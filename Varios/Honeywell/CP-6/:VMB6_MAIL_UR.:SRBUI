            
 
 
 
 
 
             MMMMM  M   M  M      M            MMMMM  MMMMM       M             XXXXX  X   X  X      X            XXXXX  XXXXX       X
             M   M  M   M  M      M            M      M   M       M             X   X  X   X  X      X            X      X   X       X
             MMMM   M   M  M      M            M      MMMMM  MMM  MMMMM             XXXX   X   X  X      X            X      XXXXX  XXX  XXXXX
             M   M  M   M  M      M            M      M           M   M             X   X  X   X  X      X            X      X           X   X
             MMMMM  MMMMM  MMMMM  MMMMM        MMMMM  M           MMMMM             XXXXX  XXXXX  XXXXX  XXXXX        XXXXX  X           XXXXX
 
               MMMMM  MMMMM  MMMMM  MMMMM  M   M    M    MMMMM  MMMMM               XXXXX  XXXXX  XXXXX  XXXXX  X   X    X    XXXXX  XXXXX
               M      M   M  M        M    M   M   M M   M   M  M               X      X   X  X        X    X   X   X X   X   X  X
               MMMMM  M   M  MMM      M    M M M  MMMMM  MMMMM  MMM               XXXXX  X   X  XXX      X    X X X  XXXXX  XXXXX  XXX
                   M  M   M  M        M    MM MM  M   M  M  M   M                   X  X   X  X        X    XX XX  X   X  X  X   X
               MMMMM  MMMMM  M        M    MM MM  M   M  M   M  MMMMM               XXXXX  XXXXX  X        X    XX XX  X   X  X   X  XXXXX
 
                  MMMMM  MMMMM  M      MMMMM    M    MMMMM  MMMMM                  XXXXX  XXXXX  X      XXXXX    X    XXXXX  XXXXX
                  M   M  M      M      M       M M   M      M                  X   X  X      X      X       X X   X      X
                  MMMMM  MMM    M      MMM    MMMMM  MMMMM  MMM                  XXXXX  XXX    X      XXX    XXXXX  XXXXX  XXX
                  M  M   M      M      M      M   M      M  M                  X  X   X      X      X      X   X      X  X
                  M   M  MMMMM  MMMMM  MMMMM  M   M  MMMMM  MMMMM                  X   X  XXXXX  XXXXX  XXXXX  X   X  XXXXX  XXXXX
 
               MMMMM  M   M  M      M      MMMMM  MMMMM  MMMMM  MM  M               XXXXX  X   X  X      X      XXXXX  XXXXX  XXXXX  XX  X
               M   M  M   M  M      M      M        M      M    MMM M               X   X  X   X  X      X      X        X      X    XXX X
               MMMM   M   M  M      M      MMM      M      M    M MMM               XXXX   X   X  X      X      XXX      X      X    X XXX
               M   M  M   M  M      M      M        M      M    M  MM               X   X  X   X  X      X      X        X      X    X  XX
               MMMMM  MMMMM  MMMMM  MMMMM  MMMMM    M    MMMMM  M  MM               XXXXX  XXXXX  XXXXX  XXXXX  XXXXX    X    XXXXX  X  XX
 
 
 
 
 
 
                                CP-6 MAIL, Release B06
 
 
                                Product Number SFH6501
 
 
                                    January, 1998
 
 
                   COPYRIGHT (c) BULL HN INFORMATION SYSTEMS INC.,
                 1991, 1986, 1987, 1988, 1990, 1991, 1994, 1997, 1998
 
 
 
 
 
 
                                      MMMMMMMMMM                                      XXXXXXXXXX
                                     M          M                                     X          X
                                     M MMMMMMM                                     X XXXXXXX
                                     M M      M                                     X X      X
                                     M M M MMM                                     X X X XXX
                                     M M M                                     X X X
                                     M M MMMM                                     X X XXXX
                                     M M M   M                                     X X X   X
                                     M M  MMM                                     X X  XXX
                                     M          M                                     X          X
                                      MMMMMMMMMM                                      XXXXXXXXXX
            
 
 
 
 
 
             MMMMM  M   M  M      M            MMMMM  MMMMM       M             XXXXX  X   X  X      X            XXXXX  XXXXX       X
             M   M  M   M  M      M            M      M   M       M             X   X  X   X  X      X            X      X   X       X
             MMMM   M   M  M      M            M      MMMMM  MMM  MMMMM             XXXX   X   X  X      X            X      XXXXX  XXX  XXXXX
             M   M  M   M  M      M            M      M           M   M             X   X  X   X  X      X            X      X           X   X
             MMMMM  MMMMM  MMMMM  MMMMM        MMMMM  M           MMMMM             XXXXX  XXXXX  XXXXX  XXXXX        XXXXX  X           XXXXX
 
               MMMMM  MMMMM  MMMMM  MMMMM  M   M    M    MMMMM  MMMMM               XXXXX  XXXXX  XXXXX  XXXXX  X   X    X    XXXXX  XXXXX
               M      M   M  M        M    M   M   M M   M   M  M               X      X   X  X        X    X   X   X X   X   X  X
               MMMMM  M   M  MMM      M    M M M  MMMMM  MMMMM  MMM               XXXXX  X   X  XXX      X    X X X  XXXXX  XXXXX  XXX
                   M  M   M  M        M    MM MM  M   M  M  M   M                   X  X   X  X        X    XX XX  X   X  X  X   X
               MMMMM  MMMMM  M        M    MM MM  M   M  M   M  MMMMM               XXXXX  XXXXX  X        X    XX XX  X   X  X   X  XXXXX
 
                  MMMMM  MMMMM  M      MMMMM    M    MMMMM  MMMMM                  XXXXX  XXXXX  X      XXXXX    X    XXXXX  XXXXX
                  M   M  M      M      M       M M   M      M                  X   X  X      X      X       X X   X      X
                  MMMMM  MMM    M      MMM    MMMMM  MMMMM  MMM                  XXXXX  XXX    X      XXX    XXXXX  XXXXX  XXX
                  M  M   M      M      M      M   M      M  M                  X  X   X      X      X      X   X      X  X
                  M   M  MMMMM  MMMMM  MMMMM  M   M  MMMMM  MMMMM                  X   X  XXXXX  XXXXX  XXXXX  X   X  XXXXX  XXXXX
 
               MMMMM  M   M  M      M      MMMMM  MMMMM  MMMMM  MM  M               XXXXX  X   X  X      X      XXXXX  XXXXX  XXXXX  XX  X
               M   M  M   M  M      M      M        M      M    MMM M               X   X  X   X  X      X      X        X      X    XXX X
               MMMM   M   M  M      M      MMM      M      M    M MMM               XXXX   X   X  X      X      XXX      X      X    X XXX
               M   M  M   M  M      M      M        M      M    M  MM               X   X  X   X  X      X      X        X      X    X  XX
               MMMMM  MMMMM  MMMMM  MMMMM  MMMMM    M    MMMMM  M  MM               XXXXX  XXXXX  XXXXX  XXXXX  XXXXX    X    XXXXX  X  XX
 
 
 
 
 
 
                                CP-6 MAIL, Release B06
 
 
                                Product Number SFH6501
 
 
                                    January, 1998
 
 
                   COPYRIGHT (c) BULL HN INFORMATION SYSTEMS INC.,
                 1991, 1986, 1987, 1988, 1990, 1991, 1994, 1997, 1998
 
 
 
 
 
 
                                      MMMMMMMMMM                                      XXXXXXXXXX
                                     M          M                                     X          X
                                     M MMMMMMM                                     X XXXXXXX
                                     M M      M                                     X X      X
                                     M M M MMM                                     X X X XXX
                                     M M M                                     X X X
                                     M M MMMM                                     X X XXXX
                                     M M M   M                                     X X X   X
                                     M M  MMM                                     X X  XXX
                                     M          M                                     X          X
                                      MMMMMMMMMM                                      XXXXXXXXXX
       
 
 
 
 
 
 
 
 
 
                                       CONTENTS
 
 
                                                                           Page
 
 
        Section 1  INTRODUCTION . . . . . . . . . . . . . . . . . . . . .   1-1
           PURPOSE. . . . . . . . . . . . . . . . . . . . . . . . . . . .   1-1
           OVERVIEW . . . . . . . . . . . . . . . . . . . . . . . . . . .   1-1
             USER REGISTRATION. . . . . . . . . . . . . . . . . . . . . .   1-2
             INTERSYSTEM MAIL . . . . . . . . . . . . . . . . . . . . . .   1-2
             FILE TRANSFER FACILITY . . . . . . . . . . . . . . . . . . .   1-2
             MULTILINGUAL MAIL. . . . . . . . . . . . . . . . . . . . . .   1-3
             COMPONENT PROGRAMS . . . . . . . . . . . . . . . . . . . . .   1-3
               MAIL . . . . . . . . . . . . . . . . . . . . . . . . . . .   1-3
               SEND . . . . . . . . . . . . . . . . . . . . . . . . . . .   1-3
               MAILMAN. . . . . . . . . . . . . . . . . . . . . . . . . .   1-4
               NODEATER . . . . . . . . . . . . . . . . . . . . . . . . .   1-4
               MOVE . . . . . . . . . . . . . . . . . . . . . . . . . . .   1-4
               SCOTTY . . . . . . . . . . . . . . . . . . . . . . . . . .   1-4
 
        Section 2  PRODUCT SUMMARY. . . . . . . . . . . . . . . . . . . .   2-1
           RELEASE CONTENT. . . . . . . . . . . . . . . . . . . . . . . .   2-1
           SUPPORTING DOCUMENTATION . . . . . . . . . . . . . . . . . . .   2-2
 
        Section 3  NEW FEATURES . . . . . . . . . . . . . . . . . . . . .   3-1
           CHANGES FROM B05 . . . . . . . . . . . . . . . . . . . . . . .   3-1
           ENHANCEMENTS IN B06. . . . . . . . . . . . . . . . . . . . . .   3-1
           STAR FIXES . . . . . . . . . . . . . . . . . . . . . . . . . .   3-1
 
        Section 4  KNOWN ERRORS AND SHORTFALLS. . . . . . . . . . . . . .   4-1
 
        Section 5  INSTALLATION PROCEDURES. . . . . . . . . . . . . . . .   5-1
           MAIL UPDATE TAPE . . . . . . . . . . . . . . . . . . . . . . .   5-1
           DEFINING A MAIL ENVIRONMENT. . . . . . . . . . . . . . . . . .   5-4
             MAIL CONFIGURATIONS. . . . . . . . . . . . . . . . . . . . .   5-5
               REGISTERED AND UNREGISTERED SYSTEMS. . . . . . . . . . . .   5-5
               DEGREES OF CONNECTIVITY. . . . . . . . . . . . . . . . . .   5-6
             CREATING AN UNREGISTERED LOCAL ENVIRONMENT . . . . . . . . .   5-7
             CREATING A REGISTERED LOCAL ENVIRONMENT. . . . . . . . . . .   5-8
             CREATING AN INTERSYSTEM ENVIRONMENT. . . . . . . . . . . . .   5-12
             CREATING AN EXTERNAL ENVIRONMENT . . . . . . . . . . . . . .   5-17
             TROUBLESHOOTING GUIDE. . . . . . . . . . . . . . . . . . . .   5-19
           INSTALLING MULTILINGUAL MAIL . . . . . . . . . . . . . . . . .   5-21
             TRANSLATING THE ERROR MESSAGE FILE . . . . . . . . . . . . .   5-21
               DIAGNOSTIC MESSAGES. . . . . . . . . . . . . . . . . . . .   5-22
               SPECIAL PURPOSE MESSAGES . . . . . . . . . . . . . . . . .   5-22
             TRANSLATING THE PARSE NODES. . . . . . . . . . . . . . . . .   5-24
 
        Section 6  INTERSYSTEM MAIL AND GATEWAYS. . . . . . . . . . . . .   6-1
           GATEWAY PROGRAMS . . . . . . . . . . . . . . . . . . . . . . .   6-1
           MAIL MESSAGE FLOW. . . . . . . . . . . . . . . . . . . . . . .   6-2
             LOCAL MESSAGE FLOW . . . . . . . . . . . . . . . . . . . . .   6-2
             INTERSYSTEM MESSAGE FLOW . . . . . . . . . . . . . . . . . .   6-4
       
 
 
                                   CONTENTS (cont)
 
 
                                                                           Page
 
 
             EXTERNAL MESSAGE FLOW. . . . . . . . . . . . . . . . . . . .   6-6
           EXTERNAL ADDRESSING. . . . . . . . . . . . . . . . . . . . . .   6-7
           MAIL MESSAGE FOLDERS . . . . . . . . . . . . . . . . . . . . .   6-9
             RECORD KEYS. . . . . . . . . . . . . . . . . . . . . . . . .   6-9
               VM_KEYTYPES EQUATES. . . . . . . . . . . . . . . . . . . .   6-10
               VM_INFOKEY STRUCTURE . . . . . . . . . . . . . . . . . . .   6-10
             MESSAGE HEADER RECORD. . . . . . . . . . . . . . . . . . . .   6-11
               VM_HEADER STRUCTURE. . . . . . . . . . . . . . . . . . . .   6-12
             SITE INFORMATION RECORD. . . . . . . . . . . . . . . . . . .   6-17
               VM_SITEKEY STRUCTURE . . . . . . . . . . . . . . . . . . .   6-17
               VM_SITE STRUCTURE. . . . . . . . . . . . . . . . . . . . .   6-18
             ADDRESS RECORDS. . . . . . . . . . . . . . . . . . . . . . .   6-19
               VM_ADD_HEAD STRUCTURE. . . . . . . . . . . . . . . . . . .   6-21
               VM_ADDTYPES EQUATES. . . . . . . . . . . . . . . . . . . .   6-22
               VM_RADDRESS STRUCTURE. . . . . . . . . . . . . . . . . . .   6-22
               VM_UADDRESS STRUCTURE. . . . . . . . . . . . . . . . . . .   6-24
             MESSAGE BODY RECORDS . . . . . . . . . . . . . . . . . . . .   6-27
               VM_BODYKEY STRUCTURE . . . . . . . . . . . . . . . . . . .   6-28
               VM_BODYTYPES EQUATES . . . . . . . . . . . . . . . . . . .   6-29
               VM_BODYREC STRUCTURE . . . . . . . . . . . . . . . . . . .   6-29
           BINARY ENCLOSURES. . . . . . . . . . . . . . . . . . . . . . .   6-32
               VM_ENCLKEY STRUCTURE . . . . . . . . . . . . . . . . . . .   6-33
               VM_ENCLOS STRUCTURE. . . . . . . . . . . . . . . . . . . .   6-34
           GATEWAY FACILITIES IN SEND . . . . . . . . . . . . . . . . . .   6-35
             INVOCATION COMMAND OPTIONS . . . . . . . . . . . . . . . . .   6-35
             MESSAGE SOURCE FILE OPTIONS. . . . . . . . . . . . . . . . .   6-36
             DATE PRIVILEGED OPTION . . . . . . . . . . . . . . . . . . .   6-37
             FROM PRIVILEGED OPTION . . . . . . . . . . . . . . . . . . .   6-38
             INTERSYSTEM BLIND COPY PRIVILEGED OPTION . . . . . . . . . .   6-38
             INTERSYSTEM COPY PRIVILEGED OPTION . . . . . . . . . . . . .   6-39
             INTERSYSTEM TO PRIVILEGED OPTION . . . . . . . . . . . . . .   6-39
             MESSAGE ID PRIVILEGED OPTION . . . . . . . . . . . . . . . .   6-40
             REFERENCE MESSAGE ID PRIVILEGED OPTION . . . . . . . . . . .   6-41
             SITE INFO PRIVILEGED OPTION. . . . . . . . . . . . . . . . .   6-41
             TRACE OPTION . . . . . . . . . . . . . . . . . . . . . . . .   6-42
             TYPE PRIVILEGED OPTION . . . . . . . . . . . . . . . . . . .   6-43
           FILE TRANSFER TO EXTERNAL NODES. . . . . . . . . . . . . . . .   6-45
 
           Index. . . . . . . . . . . . . . . . . . . . . . . . . . . . .   i-1
       
 
 
 
 
 
                                                                      SECTION 1
 
 
                                                                   INTRODUCTION
 
 
 
 
 
 
 
 
       _______       PURPOSE
 
 
       This Software Release Bulletin (SRB) documents release B06 of CP-6 MAIL.
       This product operates on Control Program-Six (CP-6) software and is
       supported on the E05 version of the operating system.
 
       In addition to the product description and installation information
       given in all SRB's, this document also contains instructions on how to
       implement gateways to external mail systems.  Anyone responsible for
       developing or maintaining a mail gateway should be given a copy of this
       material, since it provides important information that is not readily
       available elsewhere.
 
 
 
       ________       OVERVIEW
 
 
       MAIL permits users to send and receive messages.  Messages may be sent
       to another user, to user folders, and to lists of users.  These
       users/folders may be on the same system or on remote systems.  A sender
       may also send messages by forwarding or answering mail received.
       Messages in a folder may be displayed in total or just by their headers.
       They may be deleted as well as created.  They may be encrypted,
       deferred, counted, marked, copied, acknowledged, renumbered, edited, and
       sent to an output device or to a file.  Users may also create, display,
       delete, or modify local lists of user names.  They may create their own
       separate folders for grouping certain types of messages.  They may
       create their own profiles for each folder.  They may also display their
       profiles.
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                        OVERVIEW                             1-1
       
 
 
       _________________       USER REGISTRATION
 
 
       A site may elect to have only unregistered users.  If so, senders must
       know account names in order to successfully send messages to others.  In
       the more common situation, a site will elect to have a global directory
       containing the names and addresses of registered users.  In this latter
       case, a mail administrator must be appointed to perform the privileged
       task of creating, adding, displaying, and deleting those in the global
       directory.
 
 
 
       ________________       INTERSYSTEM MAIL
 
 
       MAIL allows messages to be sent to and received from remote CP-6
       systems.  All of the mail services available on the local system are
       also supported for intersystem mail.  Answers and other response
       messages flow between systems the same way they do on a single system.
       Users on remote systems can be registered locally, so that local users
       do not even need to be aware that messages are being transferred between
       systems.
 
       MAIL also provides facilities to support implementation of gateways to
       external mail systems, although no gateway software is provided with the
       MAIL product itself.  These facilities give the gateway access to all of
       the facilities used by CP-6 mail, so that users can interface with
       external mail networks in the same way they do for internal mail.
 
 
 
       ______________________       FILE TRANSFER FACILITY
 
 
       MAIL comes with a file transfer facility that it uses to transmit
       messages to remote CP-6 sites, but this facility is not limited to
       internal use by MAIL.  There is a separate MOVE program that allows use
       of this transport mechanism to transfer files between any CP-6 systems
       that are set up to support this facility.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                 FILE TRANSFER FACILITY                      1-2
       
 
 
       _________________       MULTILINGUAL MAIL
 
 
       MAIL allows all messages and commands to be translated into the user's
       native language.  Multilingual sites can allow users to interface to
       MAIL in any number of different languages.  This facility goes beyond
       the intrinsic CP-6 capability to display messages in any language; it
       also permits sites to alter the parse nodes, so that users are not
       restricted to an English command language.
 
 
 
       __________________       COMPONENT PROGRAMS
 
 
       The MAIL system consists of two major components: the mail system
       itself, and a file transfer service that is used to transfer mail
       between systems.  Each of these components is made up of three separate
       programs.  The role each program plays in the complete system is
       explained below.
 
 
 
       MAIL
 
 
       The MAIL program provides the primary user interface to the mail system.
       It lets users do everything they need to do to deal with mail on CP-6.
       For the average user, the MAIL program is the only program they need to
       know about.
 
 
 
       SEND
 
 
       The SEND program creates messages to be delivered by the mail system.
       Messages can be entered interactively or read from a message source
       file.  SEND is typically invoked by commands from within MAIL, but it is
       a separate program which can be invoked directly from IBEX, or used by
       gateways to insert messages from other mail systems into the CP-6
       message stream.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                          SEND                               1-3
       
 
 
       MAILMAN
 
 
       MAILMAN is a ghost program that interacts with SEND to create message
       files in the mail system's internal format, and then deliver them.  The
       MAILMAN at each site is responsible for delivering all messages to users
       on that site, whether they are sent from that site or received from
       elsewhere.  Each site's MAILMAN also transmits messages it receives that
       are destined for other sites; some of the file transfer software is
       linked into it to facilitate this.
 
 
 
       NODEATER
 
 
       The NODEATER program is a utility program that mail administrators use
       to define the mail network known to the local system.  It translates a
       network configuration source file into an internal form that is saved in
       the :NODES.:SYS file, which is referenced by all other components of the
       system.
 
 
 
       MOVE
 
 
       The MOVE program provides the user interface for the file transport
       facility.  It lets users move files between any pair of systems defined
       to NODEATER.  MOVE supports three transport operations:
 
       Beam               Moving a file from the local site to a remote one
                           (this is the only operation used by MAILMAN)
       Suck               Moving a file from a remote site to the local one
       Lateral arabesque  Moving a file from one remote site to another one
 
 
 
       SCOTTY
 
 
       SCOTTY is a ghost program that receives and processes file transport
       packets.  For security, each packet contains a logon which is used to
       control access to files at remote sites (MAILMAN uses a special logon
       designed just for this purpose to transport mail messages).  SCOTTY
       impersonates the specified user and either materializes the file given
       in the packet, or builds and transmits another packet containing the
       specified file, according to the requested operation.
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                         SCOTTY                              1-4
       
 
 
 
 
 
                                                                      SECTION 2
 
 
                                                                PRODUCT SUMMARY
 
 
 
 
 
 
 
 
       _______________       RELEASE CONTENT
 
 
       The following files comprise the MAIL product.
 
       File Name           Account   Description
       ---------           -------   -----------
 
       MAIL                :SYS      Message management program
       SEND                :SYS      Message creation program
       MAILMAN             :SYS      Message delivery ghost program
       MOVE                :SYS      File transfer user interface program
       NODEATER            :SYS      Network configuration utility program
       SCOTTY              :SYS      File transfer ghost program
       :VMERRMSG           :SYS      Error message file for MAIL/SEND/MAILMAN
       :VWERRMSG           :SYS      Error message file for MOVE/SCOTTY/NODEATER
       HELP:MAIL:          :SYS*     Help file for MAIL
       HELP:SEND:          :SYS*     Help file for SEND
       HELP:MOVE:          :SYS      Help file for MOVE
       HELP:NODEATER:      :SYS      Help file for NODEATER
       HELP:SCOTTY:        :SYS      Help file for SCOTTY
       VM_MACRO_C          :LIBRARY  Message folder macro file
       VW_OPTS_M           :LIBRARY  Intersystem file transfer macro file
       VN_NODES_D          :LIBRARY  SEND commands parse node source file
       VM_NODES_D          :LIBRARY  MAIL commands parse node source file
       VM_NODES1_D         :LIBRARY  Mail address parse node source file
       VM_SUBS_C           :LIBRARY  Equates for MAIL parse nodes
       VN_SUBS_C           :LIBRARY  Equates for SEND parse nodes
       $MAKE_CENTRAL       :LIBRARY  XEQ file to define the global mail registry
       $MAIL_G_MAINT       :LIBRARY  XEQ file to maintain the global registry
       HELP:$MAIL_G_MAINT: :LIBRARY  Help file for $MAIL_G_MAINT
       :VMB4_MAIL          :SRB      Source file for this document
       HA03                :DOCUM    Introduction to MAIL (UR file/LONG form)
       HA04                :DOCUM    MAIL Reference Manual (UR file/LONG form)
 
 
 
 
 
 
 
 
 
       SRB_MAIL                     RELEASE CONTENT                         2-1
       
 
 
       ________________________       SUPPORTING DOCUMENTATION
 
 
       The following documents describe the B03 version of this product.  The
       updates in the B06 version of this product will not be documented in
       manuals for this (AR5.0) release. Documentation changes, however, have
       been included the HELP files.  See the HOST SRB for information on how
       to print these manuals.
 
       Order
       Number         Title
       ------         -----
 
       HA03-01        CP-6 Introduction to MAIL
 
       HA04-02        CP-6 MAIL Reference Manual
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                SUPPORTING DOCUMENTATION                     2-2
       
 
 
 
 
 
                                                                      SECTION 3
 
 
                                                                   NEW FEATURES
 
 
 
 
 
 
 
 
       ________________       CHANGES FROM B05
 
 
       There were no changes in behavior made in the B06 release.
 
 
 
 
       ___________________       ENHANCEMENTS IN B06
 
 
       B06 is year 2000 ready, but only if run on E05 of the HOST or later.
       There were no other new enhancements added to B06 release, except the
       ones covered under the section "STAR FIXES" below.
 
 
 
 
       __________       STAR FIXES
 
 
       A listing of STARs fixed in this release is given below.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                       STAR FIXES                            3-1
         
 
 
 
 
         NUMBER  TITLE
 
 
         42668 CLPA 3 08/08/94 B05  MAIL   Modify List has strange output....
         42816 CLPA 3 08/11/95 B05  MAIL   One of our users appears to have hung and us
         42927 CLPE 5 05/26/97 B05  MAIL   Year 2000 enhancements for MAIL
         42952 CLPE 3 08/14/97 PA2A MAIL   MOVE: DATEM & DATEC doesn't work
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                       STAR FIXES                            3-2
       
 
 
 
 
 
                                                                      SECTION 4
 
 
                                                    KNOWN ERRORS AND SHORTFALLS
 
 
 
 
 
       There are no known errors in this release, other than those described in
       STARLOG.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL               KNOWN ERRORS AND SHORTFALLS                   4-1
       
 
 
 
 
 
                                                                      SECTION 5
 
 
                                                        INSTALLATION PROCEDURES
 
 
 
 
 
 
 
 
       ________________       MAIL UPDATE TAPE
 
 
 
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 
       NOTE:  If this SRB is enclosed with an entire CP-6 system release for a
              new customer, Steps 1-8 of this section should be disregarded,
              and the CP-6 system installation instructions in the CP-6 HOST
              SRB should be followed.  The processors will be installed as part
              of the installation of the entire CP-6 system.
 
              Any processor-specific instructions not contained in the HOST SRB
              are found after Step 8.
 
       * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 
       The tape(s) in this package constitute a processor update release of the
       processors shown on the enclosed order form.  The tape(s) enclosed are a
       PCL labeled tape set.  It is assumed that recipients of this tape have
       already installed a running CP-6 system.
 
       For this processor update release, there are some files which must be
       DEFed onto the customer's P.O. tape set in order to allow for future
       patching, and there are some files that need to be copied into accounts
       other than .:SYS.
 
       To install this processor update release tape follow the steps below:
 
       1.   Logon through a timesharing terminal under an account which is
            authorized with PIGC and SPIDERC processor privileges, FMSEC
            privilege, and the use of at least one tape drive in timesharing
            mode.  The installation instruction example JCL assumes that you
            normally perform your DEFs from the account .:SYSGEN.  If the
            accounts .:SRB, .:QUAC and .:DOCUM already exist, it is assumed
            that these accounts are empty (there should be no files in these
            accounts).  If you have not created these accounts, use the
            following commands:
 
 
 
 
 
       SRB_MAIL                    MAIL UPDATE TAPE                         5-1
            
 
 
 
                 !PIG
                 *CR DP#SYS.:SYSGEN GR=15000
                 *MADADD #SYS.:SYSGEN
                 *CR DP#SYS.:SRB GR=1000
                 *MADADD #SYS.:SRB
                 *CR DP#SYS.:DOCUM GR=6000
                 *MADADD #SYS.:DOCUM
                 *CR DP#SYS.:QUAC GR=3000
                 *MADADD #SYS.:QUAC
                 *END
 
 
       2.   Now, you should copy your existing processors into the .:SYSGEN
            account with these commands:
 
                 !PRIV ALL
                 !ORES MEM=256
                 !PCL
                 <COPYALL LT#CP6PO1#CP6PO2#CP6PO3 OVER .:SYSGEN
                 <REM LT#CP6PO3
                 <END
 
       3.   Mount the processor update release tape. This tape is a CP-6 PCL
            tape with a label that is PCL01 (possibly PCL02 also). To get the
            new processors (and their associated files) into your DEF account,
            use these commands:
 
                 !PCL
                 <COPYALL LT#PCL01[#PCL02 ...] OVER .:SYSGEN
                 <REM LT#PCL01[#PCL02 ...]
                 <END
 
       4.   Now the Software Release Bulletins (SRBs) and the manuals for
            the new products should be printed.
 
 
            To move the necessary files from the DEF account (.:SYSGEN) into
            the .:SRB and .:DOCUM accounts in preparation for formatting and
            printing, issue the following command:
 
                 !XEQ $XTAPEINSTALL.:SYSGEN SRB=YES,DOCUM=YES
 
            After that job has run, the :SRB and :DOCUM accounts will contain
            the SRBs and manuals (respectively) for this release.
 
            To format the SRBs and manuals for LONG form (8 1/2 by 11), issue
            the following commands:
 
                 !XEQ $XTEXTALL_SRBS.:SRB
                 !XEQ $XCOPYALL_MANUALS.:DOCUM
 
 
 
 
 
 
 
       SRB_MAIL                    MAIL UPDATE TAPE                         5-2
            
 
 
            The LONG, WIDE, and STDLP forms are created by XEQing $XFORM.  This
            is described in the HOST SRB, Section 5, Installing the Tools Tape.
 
       5.   The remainder of the files must be moved to the appropriate
            accounts.  Products moved into the .:SYS account will have patches
            applied automatically.  To do this, perform the following command:
 
                 !XEQ $XTAPEINSTALL.:SYSGEN SYS=YES[,DELL=YES]
 
            DELL will delete unnecessary files from :SYSGEN.  It is NOT
            recommended that you install these processors with names other than
            their primary names.
 
            If you choose to install these processors with modified RU names
            for parallel testing, you MUST also change the $XRUMORDER file in
            the :SYSGEN account accordingly.
 
            CAUTION: $XRUMORDER MUST be merged into the site's PATCH DECK
            as-is, to insure the proper operation of the AUTOMATIC patch update
            procedures.
 
       6.   A set of patches for these new products is on this processor update
            tape and will be in the file $XRUMORDER.:SYSGEN.  These patches
            should be merged into the site's patch deck (RUM section) prior to
            creating a new P.O. tape set.  You should now be ready to re-DEF a
            full P.O. tape set.  Modify the !DEFAULT lines of the
            $XDEF_FULL.SUPPORT file to provide the proper SITE_ID and SITE_NAME
            and boot density.  When the patches have merged, execute the
            following to create a new P.O. set:
 
                 !BATCH $XDEF_FULL.SUPPORT
 
            Note, by the time you receive and install this tape, you may be
            several weeks behind in patch releases.  Be sure to pick up all
            patches in the succeeding weekly patch files that pertain to these
            products.
 
 
       7.   When the P.O. tape set created as a result of this job is booted,
            the installation of this processor and its associated files will be
            complete.
 
       8.   Two types of tests exist in the :QUAC account, both of which
            perform some form of elementary existence checking.  Tests of the
            first type are named with the prefix ORDR and the suffix SI; these
            check to see that every element of the products you ordered is
            included in your system.  The output from these tests must be
            checked for a STEPCC of 0.  If the STEPCC for any of these tests is
            greater than 0, you are missing some component(s).  The missing
            components will be listed in the line(s) just above the line
            reporting the name of the test and the STEPCC.
 
 
 
 
 
 
 
       SRB_MAIL                    MAIL UPDATE TAPE                         5-3
            
 
 
            Tests of the second type have names of the form xx_name_GT4.  These
            tests check to see that each of the processors ordered responds
            properly when invoked; in some cases they check the performance of
            basic features.  These, too, should report a STEPCC of 0.
 
            To run the tests --
 
            After installing the new processors, log on to an account which has
            SUPERA and PIGC processor privileges, then execute the following
            job:
 
                 !SET M$LO LP
                 !XEQ $XSETUP.:QUAC
                 !R
 
            Note the first and third commands above are optional.  This job
            creates a few pages of printing and the process will be much faster
            to print the output on a printer versus a console.
 
 
            Keyin ON BA 1 at the system console to permit batch jobs.
 
            When the QUAC tests are finished, you will have a file called
            $RESULTS.:QUACRUN (this file is also copied to the printer at the
            end of all the tests) which consists of lines reporting the ATITLE
            and STEPCC of each test.  All of the STEPCCs should be zero.  After
            testing is complete, use SUPER to remove the testing account:
 
                !SUPER
                CMD*REM :QUACRUN,107TESTING
                CMD*END
 
           Delete all files in the :QUAC account:
 
                !DEL ?.:QUAC
                YES$
 
 
 
       ___________________________       DEFINING A MAIL ENVIRONMENT
 
 
       Once MAIL has been installed, a mail system environment must be defined.
       This section provides instructions on how to define various mail system
       configurations, or to upgrade from one configuration to another.
 
       No changes to an existing mail environment are needed for the B06
       release.  Sites that were running B01, B02, B03, B04 or B05 MAIL, and
       which will continue to run the same configuration, do not need to do
       anything to bring up B06 except to install it, as described above.
 
 
 
 
 
 
 
 
       SRB_MAIL               DEFINING A MAIL ENVIRONMENT                   5-4
       
 
 
       ___________________       MAIL CONFIGURATIONS
 
 
       A mail system can be configured in a number of different ways, depending
       on the needs of the site.  Configurations differ in two basic respects:
       whether or not they are registered, and their degree of connectivity.
       Registration refers to the presence of a global registry of
       user-friendly recipient names and mailing lists.  Connectivity has to do
       with transmitting mail between different systems.  These concepts are
       explained in more detail below.
 
 
 
       REGISTERED AND UNREGISTERED SYSTEMS
 
 
       In a registered system, messages can be addressed to users by their
       real-world names.  User names are recorded in a global registry along
       with the actual account and mail folder name where messages are to be
       delivered.  Messages sent by users defined in the registry are shown as
       being from their registered name, rather than from their mailbox account
       and folder.  The global registry can also contain address lists to
       define groups of users so that mail can be sent to all of them using a
       single group name.  The site must designate one or more mail
       administrators, and give them special privilege to update the global
       registry files, in order to run a mail system of this type.
 
       In an unregistered system, there is no global registry, and no
       designated mail administrator.  Messages must be addressed to a specific
       mailbox by CP-6 account and mail folder, and the sender is identified in
       the From field of a message in the same way.  Users can define their own
       local mailing lists to address users by their real-world names, but each
       user must do this individually, or a group of users must make their own
       arrangements to share a mailing list repository.
 
       The fact that a mail system has a global registry does not prevent
       unregistered users from sending or receiving mail using the same form of
       address required for an unregistered system.  It is also possible for
       users on an unregistered system to set up common mailing lists that give
       some of the benefits of a registered system.  The essential difference
       between the two types of systems, with respect to defining the mail
       configuration, is the presence or absence of a central registry, along
       with access rights to it for mail administrators.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL           REGISTERED AND UNREGISTERED SYSTEMS               5-5
       
 
 
       DEGREES OF CONNECTIVITY
 
 
       A mail system can be configured with one of three degrees of
       connectivity:
 
        1. Local mail only
        2. Local and intersystem mail
        3. Local, intersystem, and external mail
 
       Local mail consists of messages where both the sender's and recipient's
       mailboxes are on the same CP-6 system.  Configuring a system for local
       mail does not require installation of the intersystem file transfer
       facility.
 
       A system configured for intersystem mail can send messages between
       different CP-6 systems.  The intersystem file transfer facility must be
       installed in order to deliver mail between systems.  All of the mail
       services available for local users are also available for remote users.
       In a registered system, users on remote systems can be locally
       registered, so that nobody needs to know (and only an administrator can
       find out) on which system other users' mailboxes reside.
 
       External mail refers to gateways to foreign mail networks such as
       Internet, UUCP mail, or X.400 mail.  CP-6 mail provides the hooks for a
       site to link into a external network in a fairly seamless fashion, but a
       site must provide its own gateway software to transfer messages between
       CP-6 and the external network.  Gateways can support nearly all of the
       services that CP-6 uses for local and intersystem mail, but whether a
       given service is actually available depends on the capabilities of the
       external network and gateway software.
 
       A system configured for intersystem mail capability can also use the
       file transfer facility outside of MAIL to move other files between
       systems.  The same is true for configurations with external
       connectivity, provided that the gateway software is able to handle files
       other than mail folders.  A site that needs only local mail can also be
       configured for intersystem and external connectivity solely to use the
       file transfer facility.
 
       In theory, both registered and unregistered systems can be configured
       with any degree of connectivity, but systems that support intersystem or
       external mail will tend to be registered.  Therefore, detailed
       procedures for configuring an unregistered system are given only for
       local systems.  Since the steps needed to define a registered system
       have little in common with the ones needed to set up for intersystem and
       external mail, it should not be difficult to infer how to construct
       other unregistered configurations.
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                 DEGREES OF CONNECTIVITY                     5-6
       
 
 
       __________________________________________       CREATING AN UNREGISTERED LOCAL ENVIRONMENT
 
 
       To configure a MAIL system capable of delivering only local mail,
       without a global user registry, follow these steps:
 
 
        1. Create the :MAIL account
 
           The :MAIL account is needed to hold copies of message files awaiting
           delivery.  The MAIL_CG comgroup, which is used for communication
           between MAILMAN and SEND, also resides in this account.  The :MAIL
           account will be automatically created on a Y to new file system boot
           if it does not already exist.  It can also be created as follows,
           from an account with PigC processor privilege:
 
               !PIG
               Pig E04 here
               *CREATE DP#SYS.:MAIL G=9000,EXEC=?,CGMEM=48,NO BACKUP,NO ACUP
               :MAIL        0 of   9000   Exec=?, NO BACKUP, NO ACUP, CGMEM= 48
               *MADA DP#SYS.:MAIL
               *END
 
           The :MAIL account resides on DP#SYS because it must always be
           available while the system is running.  It should be allocated
           enough granules to accommodate all messages that might be in transit
           at any given time, and enough comgroup memory to accommodate all
           outstanding requests to send a new message.  The values shown should
           be more than sufficient for most environments.
 
 
        2. Disable the file transfer facility
 
           By default, the file transfer facility is enabled when MAIL is
           installed.  On a system configured only for local mail, this
           facility is not needed.  (If you want to use the file transfer
           facility for purposes other than delivering mail, you should be
           following the procedures given below for an intersystem or external
           mail environment.)  To disable the file transfer facility, delete
           the MOVE, NODEATER, and SCOTTY programs from :SYS, along with their
           help files and the :VWERRMSG message file.  Also remove these files
           from your site's boot tapes.
 
 
        3. Start the MAILMAN ghost
 
           MAILMAN must be running in order for mail messages to be delivered.
           Normally, no explicit action is needed to accomplish this.  MAILMAN
           is started automatically when the system is booted if it is in :SYS,
           and it restarts itself automatically after most errors.  However, it
           will not restart if it dies twice in one minute, or if it is
           explicitly aborted with an X operator keyin or a RUE ABRT command to
           ANLZ.  In such cases, MAILMAN must be restarted manually.
 
 
 
 
 
       SRB_MAIL                       CREATING AN                           5-7
                            UNREGISTERED LOCAL ENVIRONMENT
           
 
 
           To restart MAILMAN without rebooting the system, first define a
           logon that allows ghost access only, with an initial command that
           starts MAILMAN.  Sample JCL to do this, which must be run from an
           account with SuperC processor privilege, is:
 
               !SUPER
 
               *** CP-6 SUPER E04 ***
 
               CMD*CREATE :SYS,MAILMAN
               OPT*ACCESS G=YES,O=NO,B=NO,T=NO
               OPT*SETUP G='!MAILMAN',UNALTER
               OPT*
               CMD*END
 
               ***  NO Errors  ***
               ***  NO Warnings ***
 
           Then, use GOOSE to start up the ghost job:
 
               !GOOSE
               :START :SYS,MAILMAN
               :END
 
           MAILMAN will only run as a ghost; if invoked in batch or online mode
           it will immediately exit.  It is linked with FMR, FMS, and JIT
           privileges, and must run out of :SYS so that it can activate them
           when it needs to.
 
           When MAILMAN is started, it recreates the MAIL_CG comgroup in the
           :MAIL account.  This comgroup is used by SEND to request creation of
           new message files.  If MAILMAN is not running, SEND will not be able
           to access the comgroup, and will refuse an attempt to create a new
           message.
 
 
 
       _______________________________________       CREATING A REGISTERED LOCAL ENVIRONMENT
 
 
       The steps necessary to configure a local registered system are similar
       to those for an unregistered system, except that the global registry
       files must be created, and mail administrators given access to them.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL         CREATING A REGISTERED LOCAL ENVIRONMENT             5-8
           
 
 
        1. Create the :MAIL account
 
           In a registered system, :MAIL contains the registry files in
           addition to those mentioned above, and the site's mail
           administrators must be granted write access to these files.  While
           it is not strictly necessary for administrators to also have access
           to other files in :MAIL, having it can help them deal with
           unexpected problems with mail delivery.  There are two ways to give
           administrators full access to the :MAIL account:
 
            o  Create a logon for :MAIL that administrators can use to access
               the account.  This could be done from an account with SuperC
               processor privilege as follows:
 
                   !SUPER
 
                   *** CP-6 SUPER E04 ***
 
                   CMD*CREATE :MAIL,SOMEUSERNAME
                   OPT*ACCESS B=YES,O=YES,G=NO,T=NO
                   OPT*PASS=SECRET
                   OPT*
                   CMD*END
 
                   ***  NO Errors  ***
                   ***  NO Warnings ***
 
 
            o  Grant administrators write access to the account, so that they
               can access it under their own logons.  To do this, from an
               account with PigC processor privilege, enter:
 
                   !PIG
                   Pig E04 here
                   *MODIFY .:MAIL +WRITE=ADMACCT
                   :MAIL        0 of  99999   Exec=?, NO BACKUP, NO ACUP, CGMEM= 48
                                              Write=ADMACCT
                   *END
 
               (In this and following JCL examples, ADMACCT is used as the name
               of the administrator's account.  Of course, the administrator's
               actual logon should be substituted in its place when entering
               the commands.)
 
               This assumes that :MAIL has already been created as described
               above for an unregistered system.  If it has not, the WRITE
               clause can be appended to the PIG create command.  Note that
               WRITE cannot be abbreviated to WR here; these are two different
               commands to PIG.  Note also that additional administrators can
               be authorized in this manner while the system is running.
 
 
 
 
 
 
 
 
       SRB_MAIL         CREATING A REGISTERED LOCAL ENVIRONMENT             5-9
           
 
 
        2. Disable the file transfer facility
 
           The file transfer facility is not needed on a local system, whether
           or not it is registered.  See the above procedure for an
           unregistered system for more information about this.
 
 
        3. Define the global registry files
 
           The global mail registry is made up of two files in the :MAIL
           account.  They are:
 
           :MAIL_CENTRAL This is a mail folder which can receive messages and
                         otherwise be used as a normal mailbox by the
                         administrator.  It is special only in that the CREATE
                         USER, MODIFY USER, and DELETE USER commands in MAIL
                         are only honored when this is the current folder (and
                         the user has write access to it), and address lists
                         built with the CREATE LIST command in this folder are
                         implicitly available to every user on the system.
 
           :NAME         This is a special file that resides only in :MAIL.  It
                         is known as the "reverse map" file because MAIL uses
                         it to determine users' registered names based on their
                         logons.  It has record keys consisting of logon
                         account and user names, with record contents of the
                         registered mail name for that logon.  The primary use
                         of this file is to fill in the From field in messages
                         based on the user's logon, to prevent users from
                         sending mail that appears to be from someone else.
 
           If a logon for :MAIL was created as described in the previous step,
           entering MAIL from that logon will create :MAIL_CENTRAL if it does
           not already exist, and entering the first CREATE USER command will
           create :NAME.  Another way to create the registry files, which can
           be used from any account that has write access to :MAIL, is to
           execute the $MAKE_CENTRAL procedure that is supplied in the :LIBRARY
           account when MAIL is installed.  To do this:
 
               !XEQ $MAKE_CENTRAL.:LIBRARY
               Account of MAIL ADMINISTRATOR? ADMACCT
               !DIR RESET
 
           Once the registry files are created, they must be modified to give
           them the proper access controls.  The $MAKE_CENTRAL procedure does
           this for you, but if it is not used, you must issue the necessary
           PCL commands yourself.  The MAIL and SEND programs must have read
           access.  If the administrator will maintain the registry from a
           logon other than to :MAIL, that account should also be given write
           access.  To establish the proper access controls:
 
               !MOD :MAIL_CENTRAL.:MAIL TO (ACC=((ALL),NOLIST,EXEC),;
 
 
 
 
 
 
       SRB_MAIL         CREATING A REGISTERED LOCAL ENVIRONMENT            5-10
               
 
 
               ! ACS=((MAIL,SEND),READ),WRITE=ADMACCT)
               :MAIL_CENTRAL
               !MOD :NAME.:MAIL TO (ACC=((ALL),NOLIST,EXEC),;
               ! ACS=((MAIL,SEND),READ),WRITE=ADMACCT)
               :NAME
 
           NOLIST prohibits any access to these files except as otherwise
           specified; EXEC allows an exception for the specified programs,
           which have read access if they reside in :SYS.  The administrator
           who creates the files automatically has full access to them by
           virtue of being their creator, but he should still be given explicit
           write access to protect him in the event some other user recreates
           the files.  This access control arrangement is recommended, but it
           not strictly required by MAIL.  All that is necessary is for MAIL
           and SEND (and MOVE, if the file transfer facility is installed) to
           have read access to the registry files, and that administrators have
           write access to them.  Any set of access controls that allows this
           is acceptable; the ones shown are merely one way to accomplish this.
 
           It is also possible to let certain people act as mail administrators
           files without giving them access to messages in transit.  Once the
           registry files have been created, other users can be granted access
           to them using PCL, from an account that has write (or, at least,
           reattr) access to them:
 
               !MOD :MAIL_CENTRAL.:MAIL(SHARE) TO (WRITE+=ADMACCT)
               :MAIL_CENTRAL
               !MOD :NAME.:MAIL(SHARE) TO (WRITE+=ADMACCT)
               :NAME
 
           Users can also be given read-only access to the registry by
           substituting READ for WRITE in the above commands.  This will let
           them see users' registered addresses without being able to change
           them.
 
 
        4. Populate the registry
 
           After the registry files have been created, the administrator should
           populate them by defining mail users for all logons that might send
           mail, and creating mailing lists for commonly addressed groups of
           users.  Commands to create, delete, and modify lists and users are
           described in the Mail Reference Manual (HA04).
 
           Another way to maintain the registry is to use the $MAIL_G_MAINT
           procedure that is supplied in the :LIBRARY account when MAIL is
           installed.  This provides a simple menu-driven interface for
           maintaining user and list definitions.  Instructions on how to use
           it can be found in its help file, which is also supplied in
           :LIBRARY.  To obtain help for this procedure, enter:
 
               !HELP ($MAIL_G_MAINT.:LIBRARY)
 
 
 
 
 
 
       SRB_MAIL         CREATING A REGISTERED LOCAL ENVIRONMENT            5-11
           
 
 
           It is not necessary to completely populate the registry before
           bringing up the mail system.  Administrators can alter the registry
           while the system is running, and the changes will be immediately
           available to all other users.
 
 
        5. Start the MAILMAN ghost
 
           The procedures for starting MAILMAN on a registered system are
           identical to those given above for an unregistered system.
 
 
 
       ___________________________________       CREATING AN INTERSYSTEM ENVIRONMENT
 
 
       To build a mail configuration capable of delivering mail between CP-6
       systems requires all of the steps given above for a local system, except
       that the step to disable the file transfer facility must be omitted or
       undone.  In addition, the following steps must be taken to fully enable
       the file transfer facility.
 
       These procedures also apply whenever a site wishes to use the file
       transfer facility to move files between systems, whether or not the site
       expects to actually send mail messages between them.  There is no
       difference between a configuration for intersystem mail and one that
       uses the file transfer facility for other purposes.  For files to flow
       between two systems, the procedures must have been done on both of them.
 
 
        1. Provide physical connections to remote systems
 
           The hardware needed to establish a connection to each remote site
           must be installed and properly defined to CP-6 so that it can access
           the link.  The file transfer facility is not concerned with the
           details of how this is done.  It merely writes files to JE@wsn, and
           expects INSYM to materialize incoming files in :MOVE via NCTL file
           processing.  See the CP-6 System Support Reference (HA20 - HA22) and
           other documentation, as appropriate, for more information.
 
 
        2. Install the file transfer programs
 
           This step is needed only if the file transfer facility has been
           disabled as described above in the procedures for a local mail
           environment.  The MOVE, SCOTTY, and NODEATER programs must be
           reinstalled in :SYS, along with their help files and the :VWERRMSG
           message file, and put back onto the site's boot tapes.
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL           CREATING AN INTERSYSTEM ENVIRONMENT              5-12
           
 
 
        3. Create the :MAIL and :MOVE accounts
 
           :MAIL is used in an intersystem configuration in the same way as it
           is in a local one.  The procedures given above for creating this
           account also apply here.
 
           The :MOVE account is used by the intersystem file transfer facility.
           It holds files sent from other machines until SCOTTY processes them.
           It also contains the mail folder used by SCOTTY to send messages to
           users of MOVE to tell them whether or not the files were transferred
           correctly.
 
           The :MOVE account is created automatically on a Y to new file system
           boot.  It can also be created from an account with PigC processor
           privilege, by entering:
 
               !PIG
               Pig E04 here
               *CREATE DP#SYS.:MOVE G=9000,NOLIST=?,WRITE=:NCTL
               :MOVE         9 of  9000   Nolist=?, NO BACKUP, NO ACUP, Write=:NCTL
               *MADA DP#SYS.:MOVE
               *END
 
           The :MOVE account is allocated on DP#SYS so that it will always be
           available while the system is up and running.  The NOLIST option
           should be specified to prevent users from viewing files that are in
           transit.  :NCTL must have write access to that INSYM can create
           files in the account.
 
           In addition to the access rights shown above, a site may wish to
           grant write access to :MOVE to the mail administrator or other
           selected users.  This can be helpful when file inconsistencies and
           other unexpected problems crop up.
 
           Note that, although the file transfer facility can accommodate files
           of any size, the number of granules in :MOVE limits the size of a
           file that the system can receive.  Since a file too large to fit can
           be lost without a trace, it is best to allocate as many granules to
           :MOVE as is feasible.  The number of granules needed to receive a
           file depends on the file's contents.  ASCII files require about the
           same number of granules as the file being transferred.  Files
           containing binary data are encoded in printable ASCII, so they
           require about 50% more space in :MOVE than the file being
           transferred.
 
 
        4. Define the intersystem mail logon
 
           A special dummy logon must be defined for MAILMAN to use to deliver
           messages to remote systems.  This step is essential for mail to flow
           to other systems.  To define this logon, from an account with SuperC
           processor privilege, enter:
 
 
 
 
 
 
       SRB_MAIL           CREATING AN INTERSYSTEM ENVIRONMENT              5-13
               
 
 
               !SUPER
 
               *** CP-6 SUPER E04 ***
 
               CMD*CREATE :MAIL,500ATOB
               OPT*ACCESS G=NO,O=NO,B=NO,T=NO
               OPT*PASS=MAILPASS
               OPT*
               CMD*END
 
               ***  NO Errors  ***
               ***  NO Warnings ***
 
           MAILMAN puts this logon in the file transmission packets for
           messages that are sent to other systems.  The SCOTTY ghost on the
           remote system uses this logon to impersonate the dummy user so that
           it can create files in the :MAIL account on the remote machine.  If
           this logon is not defined, SCOTTY will not be able to deliver
           intersystem mail, and messages will be lost without a trace.
 
           Note that this logon does not allow users to actually log on to it
           in any mode.  Its only purpose is to allow SCOTTY to appear to be
           logged onto the :MAIL account so it can create files there.  (SCOTTY
           will reject any attempt to use this logon to retrieve files from
           another site.)  The user name 500ATOB and password of MAILPASS are
           hard coded in MAILMAN and SCOTTY, and must be defined exactly as
           shown.  (500 was once an internal cost center number, and "ATOB"
           stood for the System A to System B link that existed at LADC when
           intersystem mail was first implemented.)
 
 
        5. Create and populate the global registry
 
           If you are setting up a registered system, the central registry
           files must be created and populated as described above for a local
           system.  This step can be bypassed to configure an unregistered
           system.
 
           In addition, the MOVE program must have read access to the registry
           files if the system is configured to be registered.  If these files
           were not created to grant this access, they must be modified by a
           user who has write (or, at least, reattr) access to them:
 
               !MOD :MAIL_CENTRAL.:MAIL(SHARE) TO (ACS+((MOVE),READ))
               :MAIL_CENTRAL
               !MOD :NAME.:MAIL(SHARE) TO (ACS+((MOVE),READ))
               :NAME
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL           CREATING AN INTERSYSTEM ENVIRONMENT              5-14
           
 
 
        6. Create the :NODES file
 
           All sites that can receive files from the local site must be defined
           in the :NODES.:SYS mail network configuration file.  The :NODES file
           is created by the NODEATER program, which translates a network
           configuration source file into the internal form needed by the other
           mail and file transfer programs.  For instructions on how to write a
           network configuration source file, and examples, see the help file
           for NODEATER.  Try:
 
               !HELP (NODEATER) TOPICS
 
           and then ask for help on the topic of your choice.  Or, for a
           printed copy of the entire NODEATER help file, enter:
 
               !LISTHELP.X NODEATER ON ,LP
 
           Once the mail system is up and running, the :NODES file can be
           changed on the fly by rerunning NODEATER with the modified network
           source file.  (It is recommended that a site keep its current
           NODEATER JCL in $XNODES.SUPPORT so that is can be changed and rerun
           as necessary.)  However, simply rerunning NODEATER will not change
           the network definition in use by a running system, because the
           MAILMAN and SCOTTY ghosts never close :NODES, so they will continue
           to use the old version until they are errored.  This can be done
           from an operator console using the E keyin, or it can be done from
           an account with MSys privilege using the RUE command in ANLZ, as
           follows:
 
               !ANLZ
               ANLZ E04
               hostname -RUE ERR NAME=MAILMAN
               hostname -RUE ERR NAME=SCOTTY
               hostname -END
 
           Note that erroring these jobs does not actually stop and restart
           them, it only makes them close and reopen :NODES.  The run time for
           the jobs shown in a SPY display will therefore not be reset.
 
 
        6. Start the MAILMAN and SCOTTY ghosts
 
           Both the MAILMAN and SCOTTY ghosts must be running for a site to
           send and receive intersystem mail.  Instructions for starting
           MAILMAN are the same in an intersystem configuration as was
           described above for a local system.  Procedures for SCOTTY are
           analogous to those for MAILMAN.
 
           Like MAILMAN, SCOTTY starts automatically when the system is booted
           if the program is present in :SYS, and it generally restarts itself
           after an error.  However, to deal with the occasional situation
           where it is necessary to restart SCOTTY manually, it too needs a
           logon defined for it which can be put into execution with GOOSE.
 
 
 
 
 
       SRB_MAIL           CREATING AN INTERSYSTEM ENVIRONMENT              5-15
           
 
 
           Sample JCL to do this, which must be run from an account with SuperC
           processor privilege, is:
 
               !SUPER
 
               *** CP-6 SUPER E04 ***
 
               CMD*CREATE :SYS,SCOTTY
               OPT*ACCESS G=YES,O=NO,B=NO,T=NO
               OPT*SETUP G='!SCOTTY',UNALTER
               OPT*
               CMD*END
 
               ***  NO Errors  ***
               ***  NO Warnings ***
 
 
               !GOOSE
               :START :SYS,SCOTTY
               :END
 
           When SCOTTY is first invoked, it creates a :MAIL_CENTRAL file in the
           :MOVE account.  This mailbox must exist for SCOTTY to be able to
           send mail messages.  The system manager may wish to examine this
           file periodically to delete "garbage" messages. (If the destination
           of a mail message SCOTTY generates is undefined, MAIL returns the
           error message to SCOTTY's mailbox.)
 
           SCOTTY will only run as a ghost; if started in batch or online mode
           it will exit immediately.  The run unit must reside in the :SYS
           account because it requires JIT access privilege. (The run unit is
           linked with this privilege, but it is only active if the run unit is
           invoked from :SYS).
 
           The account under which the SCOTTY ghost runs must have ghost access
           and must be authorized for at least 64K of memory.
 
           Only one copy of the SCOTTY ghost may be running at once.  If a
           second copy is started, the second SCOTTY will realize that it is a
           "clone" and will exit.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL           CREATING AN INTERSYSTEM ENVIRONMENT              5-16
       
 
 
       ________________________________       CREATING AN EXTERNAL ENVIRONMENT
 
 
       To build a mail configuration capable of sending and receiving mail from
       external mail networks, all of the procedures given above for local and
       intersystem mail must be followed.  This is true even if your site does
       not actually support mail delivery to other CP-6 sites.  The only
       difference between a configuration for both intersystem and external
       mail and one that only supports external mail only is that, in the
       latter case, the :NODES file will only define a single CP-6 node (for
       the local system); all other nodes will be declared to be external.
 
       In addition to setting up an intersystem mail configuration, the
       following procedures are required in order for mail to flow from CP-6
       into an external network.  Since mail gateways can be designed to work
       in a variety of different ways, these procedures are necessarily less
       precise than the preceding ones.  Detailed technical information that
       may be of use to gateway implementors is included in Section 6 of this
       SRB.
 
       It is also possible to use the MOVE file transfer program on a system
       configured for an external environment, instead of or in addition to
       using it within MAIL.  The installation procedures are the same in
       either case.  The only difference is in the capabilities of the gateway
       software.  Files sent by MOVE appear in the gateway account with
       different names than messages put there by the mail system.  CP-6 will
       deliver either kind of file to any node defined as external, but nothing
       will be transmitted unless the gateway software knows how to handle that
       type of file.  Technical information necessary to set up a gateway to
       transmit files other than message folders is provided at the end of
       Section 6.
 
 
        1. Create the gateway account
 
           An outgoing gateway to an external mail network requires an account
           to receive messages files intended for that network that originates
           within CP-6.  Like all intersystem messages, these files are created
           by SCOTTY using the :MAIL,500ATOB logon, so (in addition to having
           the logon defined), the gateway account must permit the :MAIL
           account to create files there.  That is, if this permission was not
           granted when the gateway account was created, the following PIG
           command must be entered to grant it:
 
               MODIFY .gateacct +CREATE=:MAIL
 
           The gateway sender program must also be able to access files in the
           gateway account.  This can be accomplished in several ways.  One way
           is to create a logon for the gateway account and run the sender
           program under that logon.  Another possibility is to use PIG to
           grant access to the gateway account for whatever logon account is
           used.
 
 
 
 
 
 
       SRB_MAIL            CREATING AN EXTERNAL ENVIRONMENT                5-17
           
 
 
           Normally, each external network will have its own gateway account.
           That way, the sender program only has to know how to handle messages
           to be sent out using one foreign protocol.  However, if several
           external connections use the same protocol, the same gateway account
           could be used for all of them.  Of course, the sender program must
           then be able to differentiate between messages directed to each
           external site, and route each message to the proper one.  That could
           require an external network configuration file maintained by a
           utility program analogous to NODEATER.  It is the responsibility of
           the gateway implementor to provide any such facilities for external
           routing.
 
 
        2. Define external sites in :NODES
 
           The site's :NODES file either must be created or modified to include
           definitions for the external nodes.  Two things are required in the
           network configuration source file to define an external node:
 
            o  A NODE statement specifying TYPE=EXTERNAL must be added to
               define the external node.  The external node definition cannot
               have any paths leaving it, since the CP-6 mail system is not
               concerned with external connections.
 
            o  A PATH clause for the external must be added to the NODE
               statement for the node running the gateway software.  (To run
               the same gateway software on more than one node in a CP-6
               network, declare a PATH to the external node for each of them;
               the gateway accounts in such cases can have the same or
               different names.)  When a node is declared to be external, a
               path to that node must specify a file directory instead of a
               WSN, and the mode and speed options should be omitted.
 
           The site may also wish to provide one or more SYNONYM statements to
           define alternate names for external nodes.
 
           Following is sample NODEATER input to create node definitions to
           communicate with two external nodes:
 
               NODE  MYSITE,TYPE=CP6,;
                       PATH=(.XXXXXXXX,EXTNET),;
                       PATH=(.XXXXXXXX,OTHNET)
               NODE  EXTNET,TYPE=EXTERNAL
               NODE  OTHNET,TYPE=EXTERNAL
               I AM MYSITE.
               END
 
           In this example, mail destined for both EXTNET and OTHNET will be
           routed to the same account (.XXXXXXXX).  The gateway sender program
           that handles this mail will have to direct the mail to the correct
           mail network.
 
 
 
 
 
 
 
       SRB_MAIL            CREATING AN EXTERNAL ENVIRONMENT                5-18
           
 
 
           See the help file for NODEATER for more information, and another
           example of a network definition that contains an external node.
 
           After rerunning NODEATER to create a :NODES file that contains new
           or altered external node definitions, MAILMAN must be errored so
           that it will restart itself and use the new file (as described above
           for intersystem mail).  Note that if the changes to the network
           configuration affect only external nodes, it is not necessary to
           restart SCOTTY, since it does not use definitions for external
           nodes.  MAILMAN creates file transmission packets which the local
           SCOTTY treats as requests to move the message folders into the local
           site's gateway account.  MAILMAN uses the same logon in these
           transmission packets as it does for internal intersystem mail, which
           is why the gateway account must grant write access to :MAIL.
 
 
        3. Provide gateway software
 
           The preceding steps make it possible for CP-6 mail to get message
           files destined for an external mail network into the gateway
           account, but the site must provide its own gateway sender program to
           pick up these files, translate them into whatever format is required
           by the external network, and send them on their way.
 
           Note that these procedures only allow mail to flow out into the
           external network.  A complete, bidirectional gateway must also have
           a gateway receiver program to accept messages from the external
           network, translate them into a CP-6 message source file, and invoke
           SEND to insert them into the CP-6 mail flow.  However, except for
           establishing the physical connection to the external network, which
           is outside the scope of this SRB, no special procedures are needed
           to install a gateway receiver.
 
 
 
       _____________________       TROUBLESHOOTING GUIDE
 
 
       This section gives some of the problems that could be encountered in a
       mail environment, along with their usual solution.
 
       Problem:  Intersystem and/or external message folders show up in the
                 :MOVE account, then disappear without a trace.
       Solution: The intersystem mail logon may not be defined.  See Step 4 of
                 the Intersystem installation procedure.
 
       Problem:  External messages show up in the :MOVE account, then disappear
                 without a trace.
       Solution: The gateway account that should receive these files may not
                 grant :MAIL create access.  See Step 1 of the External
                 installation procedure.
 
 
 
 
 
 
 
       SRB_MAIL                  TROUBLESHOOTING GUIDE                     5-19
                 
 
 
       Problem:  Intersystem and/or external message folders appear in the
                 :MOVE account, then just sit there forever.
       Solution: The SCOTTY ghost is not running, or has been incorrectly
                 installed.  See Step 6 of the Intersystem installation
                 procedure.
 
       Problem:  MAILMAN and/or SCOTTY die and fail to restart themselves.
       Solution: Restart the ghost(s) manually with GOOSE using logons defined
                 for that purpose.  See Step 3 of the Local Unregistered
                 procedure for details on restarting MAILMAN, or Step 6 of the
                 Intersystem procedure for more information about SCOTTY.
 
       Problem:  SCOTTY repeatedly dies, restarts, and dies again.
       Solution: Check for a file inconsistency in the first file in the :MOVE
                 account.  If there is one, delete the file and inform the user
                 who sent it that it was lost.
 
       Problem:  Messages to a newly defined or altered node are lost.
       Solution: MAILMAN must be errored after recreating the :NODES file for
                 the change to fully take effect.  SEND will honor the change
                 and treat a new node as legal as soon as NODEATER has been
                 run, but MAILMAN will continue using the old file, and will
                 not know what to do with messages to the new node.  If the
                 change effects CP-6 nodes instead of just external ones,
                 SCOTTY must also be errored.  See Step 5 of the Intersystem
                 procedure for details.
 
       Problem:  A message sent by a gateway receiver program arrives with some
                 of the header fields appearing at the top of the body.
       Solution: SEND did not recognize the first header line in the body as a
                 legal header line.  Make sure the keyword for the field is
                 properly spelled, and that there is no other syntax error in
                 the line.  If all is well, and the field in question is a
                 privileged one, the receiver program is not invoking SEND such
                 that it runs with FMSec privilege.
 
       Problem:  A large external message or intersystem file transfer packet
                 disappears, but smaller ones flow normally.
       Solution: The :MOVE and/or gateway account may not be large enough to
                 hold the file.  Note that this can occur if the packsets
                 containing the account is full, as well as when the account
                 granule limit is exceeded.  See the LIMITS topic in the MOVE
                 help file for other limitations on files that can be
                 transferred.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                  TROUBLESHOOTING GUIDE                     5-20
       
 
 
       ____________________________       INSTALLING MULTILINGUAL MAIL
 
 
       MAIL allows CP-6 sites to translate their error messages and parse nodes
       into languages other than English.  The default (English) error messages
       are contained in the file :VMERRMSG and the default parse nodes are
       linked into the MAIL and SEND programs.
 
       NOTE:  The error message file contains MAIL and SEND commands, so both
              the parse nodes and the error messages must be translated before
              these programs will function correctly.
 
       As MAIL and SEND start execution, they look for a file containing parse
       nodes based upon the native language character in the JIT (B$JIT.LANG)
       and the account in which the run unit resides.  The default error
       message file name is :VMERRMSG.  The default node file name is VM_NODES,
       but this file is not actually needed, since it would have the same nodes
       as the ones built into the programs.  If the language byte is nonblank,
       then that blank is appended to the default file name before the search
       starts.  If the search is unsuccessful, or if the parse node file is not
       correctly structured, then the programs will use the built-in nodes and
       the default system error message file.
 
       If a parse node file is found, it is opened input as a shared data
       segment so that the memory requirements for using this capability does
       not depend upon the number of users using it but upon the number of
       different languages that are simultaneously in use.
 
 
 
 
       __________________________________       TRANSLATING THE ERROR MESSAGE FILE
 
 
       A complete copy of MAIL, SEND and MAILMAN messages may be obtained by
       using the EMIT.X tool to generate an error message source file in an
       edit file.  JCL for this might be:
 
           !EMIT.X :VMERRMSG.:SYS OVER VM_ERRMSGX.MYACCT
 
       This creates a file containing the text of all of the messages defined
       by the :VMERRMSG file in a form that can be given to EXTRACT.X to
       recreate the message file.  The messages in this file can then be
       translated using any CP-6 editor, taking care not to change anything but
       the message text.  When the error messages have been translated, they
       must be turned into a new CP-6 error message file with the EXTRACT.X
       program.  Typical JCL for this would be:
 
           !EXTRACT.X
           DA *DB
           EXTRACT VM_ERRMSGX.MYACCT
           BU OVER :VMERRMSGX PRO
           Q
 
 
 
 
 
       SRB_MAIL           TRANSLATING THE ERROR MESSAGE FILE               5-21
       
 
 
       This JCL takes a file called VM_ERRMSGX, extracts all of the error
       messages, and builds an error message file for language "X".  Note that
       the translated message file VM_ERRMSGX is in account MYACCT.  This file
       must be copied into :SYS in order for it to be found by MAIL and SEND.
 
       The remainder of this section describes the organization of the message
       file and the usage of some special messages, as an aid in their proper
       translation.
 
 
 
       DIAGNOSTIC MESSAGES
 
 
       The error numbers less than 800 are typically error diagnostic messages.
       There are also a few informational messages included in this range of
       numbers.
 
 
 
       SPECIAL PURPOSE MESSAGES
 
 
       The error numbers greater than 800 include headings, prompts, formats,
       commands and informational messages.  They are separated by functional
       code group into the following areas:
 
           VMO-?      ...   MAIL program (plus common MAIL/SEND subroutines)
           VMD-?      ...   LIST and DISPLAY commands in SEND/MAIL
           VMS-?      ...   DISPLAY STATUS selection criteria
           VMM-?      ...   SEND/MAIL flag names
           VNS-?      ...   SEND program
 
       If the messages in this group that contain command and option keywords
       are not translated to the same text that is required (by the parse
       nodes) to be entered by the mail user, then the following problems may
       become apparent:
 
       o   After editing messages in SEND, some header lines will appear in the
           message body instead of setting the proper message header fields.
           The line that appears at the start of the message body is the one
           whose keyword is spelled differently in the parse nodes and message
           file.  Changing the spellings to match will correct this problem and
           cause this and subsequent header lines to be processed properly.
 
       o   The line feed, caret and control-D accelerator characters in MAIL
           will cause syntax errors to be reported.  In this case, the keyword
           for the corresponding command is spelled differently in the parse
           nodes and message file.  The spellings must be changed to match in
           order for the accelerator character to function properly.
 
 
 
 
 
 
 
 
       SRB_MAIL                SPECIAL PURPOSE MESSAGES                    5-22
       
 
 
       Two characters are treated special in prompts, headings, formats and
       commands.  When the character '"' appears in a message, it is translated
       into a '%' before it is used.  This capability is used heavily by the
       format strings where '%' characters are necessary.
 
       The character '&' is used to indicate an explicit blank.  This
       capability is used when it is necessary to indicate a trailing blank,
       because by default all trailing blanks are removed from error messages.
 
       There are quite a few format strings in the error message file.  The
       format strings are interpreted by the X$FORMAT library subroutine which
       is described in the Host Library Services Manual (CE71).  The following
       list describes usage of a some special purpose messages whose purpose
       might not be self-explanatory.
 
       Message         Description
 
       VMD-800         X$FORMAT heading for the MAIL LIST command
       VMD-801         Flags associated with MAIL LIST command
                       Position        Meaning
                       1               Deleted message flag
                       2               New message flag
                       3               Unexamined flag
                       4               Marked flag
                       5-7             am text
                       8-10            pm text
                       12-17           (from) text
       VMD-802         Flags associated with MAIL LIST command
                       Each flag is a 3 character abbreviation
                       for: error, acknowledgment, delivery receipt,
                       file copy, answer, forward and broadcast.
       VMD-803         Format for LIST display of a message
       VMD-804         Format for first message DISPLAY line
       VMD-805         Format for second message DISPLAY line
       VMD-806 - 811   Message DISPLAY format lines
       VMD-812         Format string for wrapped (continued) message
                       DISPLAY headings.
       VMD-813         Format string for displaying error addresses
       VMD-814 - 820   Format strings for the SEND: DISPLAY subdisplay
                       command.
       VMD-821 - 823   Format string for SEND: DISPLAY command options.
       VMD-824 - 825   Additional format string for the SEND: DISPLAY
                       subdisplay command.
       VMD-1400 - 1401 Format strings for displaying user and list
                       definitions.
       VMD-1404 - 1413 Format strings for the MAIL: DISPLAY PROFILE command
       VMD-1416 - 1417 Format strings for the MAIL: DISPLAY FOLDER command
       VMM-1303 - 1304 Single characters for Yes and No.
       VMO-1000 - 1001 Prompts for modifying lists and users
       VMO-1004 - 1005 Format string for the DISPLAY FOLDER command
       VMO-1010        Format string for the TIME command
       VMO-1013        Folder created message
       VMO-1014        Using folder message
 
 
 
 
 
       SRB_MAIL                SPECIAL PURPOSE MESSAGES                    5-23
       
 
 
       VMO-1026 - 1034 MAIL: DISPLAY STATUS format strings
       VMO-1100 - 1123 MAIL: built in commands, parse nodes must match these
                       commands and options.
       VMS-1201 - 1226 Message selection criteria display of the MAIL
                       DISPLAY STATUS command.
       VNS-902  - 912  SEND: prompts (Must match parse nodes)
       VNS-914         Prompt for additional body lines
       VNS-1300 - 1302 SEND: prompts (Must match parse nodes)
       VNS-1305        Legal single character responses to <break> (VNS-913)
 
 
 
       ___________________________       TRANSLATING THE PARSE NODES
 
 
       Source files for all of the parse nodes used by MAIL and SEND are
       included on the MAIL distribution tape.  There files are put in the
       :LIBRARY account when MAIL is installed.  They are:
 
           VM_NODES_D  contains parse nodes for all MAIL commands
           VM_NODES1_D contains parse nodes for address and mailbox names
           VN_NODES_D  contains parse nodes for all SEND commands
 
       These files can be copies into a development account and modified to
       translate all literal command text.  Only VM_NODES_D and VN_NODES_D
       contain literals that need to be translated.  VM_NODES1_D should be
       recompiled as is; it is provided only because it must be linked with the
       other two modules to generate a complete set of translated nodes.
 
       NOTE: Only the quoted character strings should be modified.  Any other
       changes are likely to alter the parse tree generated for the command,
       which will either cause command options to be ignored, or will result in
       a program fault.
 
       When one English word becomes two words on translation, use a pair of
       quoted strings.  If the second word is optional, enclose it in [square
       brackets].  To require a blank between the words, put a ".B" between
       them; do not embed blanks within quoted keywords.  For example, instead
       of:
 
           CMD_GOTO (2) = [.B] ('VA/ A' | 'VA/ @' | 'va/ @') [.b] .DEC .END
 
       use:
 
           CMD_GOTO (2) =  [.B] 'VA' [.B ('A'|'@')] .DEC .END
 
       Also, note that literals are case insensitive by default, but case
       insensitivity does not apply to characters that are not alphabetic in
       English.  To make comparisons case-sensitive, you must put an equal sign
       at the start of the literal.  For example, instead of:
 
           CMD_ACKNOWLEDGE (1) = ;
               [.B] ('ac/cuse r{ception' | 'AC/CUSE RECEPTION') ...
 
 
 
 
 
       SRB_MAIL               TRANSLATING THE PARSE NODES                  5-24
       
 
 
       use:
 
           CMD_ACKNOWLEDGE (1) = ;
               [.B] 'AC/CUSE' [.B ('=r{c/eption' | '=REC/EPTION')] ...
 
       After translating the parse nodes, PARTRGE must be used to compile them.
       Finally, with the nodes correctly compiled, the nodes are "linked" into
       a file for use by MAIL and SEND by using the LINKNODES.X program.
 
       Typical JCL for this would be:
 
           !PARTRGE VM_NODES_DX OVER *VM_NODES_DX
           !PARTRGE VN_NODES_DX OVER *VN_NODES_DX
           !PARTRGE VM_NODES1_DX OVER *VM_NODES1_DX
           !LINKNODES.X
           SHARE YES
           SEG   DS6
           LINK *VM_NODES_DX,*VM_NODES1_DX,*VN_NODES_DX OVER VM_NODESX
           LIST VM_NODESX
           Q
 
       At this point, nodes for a native language of X have been created in the
       current file management account.  If this account is NOT :SYS, the nodes
       could be checked out by setting your native language to X and setting
       sense switch 0 using the IBEX "!SWITCH 0" command.  When sense switch 0
       is on, MAIL and SEND will search the current file management and logon
       account for a parse node file before searching :SYS.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL               TRANSLATING THE PARSE NODES                  5-25
       
 
 
 
 
 
                                                                      SECTION 6
 
 
                                                  INTERSYSTEM MAIL AND GATEWAYS
 
 
 
 
 
       This section explains how to implement gateways between CP-6 mail and
       external mail networks.  It describes special facilities intended for
       use by gateway programs, and provides documentation on the internal
       operation of the mail system to show how gateways fit into the overall
       architecture.
 
 
 
       ________________       GATEWAY PROGRAMS
 
 
       There are two parts to a gateway between an external mail system and
       CP-6 MAIL:  a sender process, and a receiver process.  Each of these
       typically will be implemented as a separate program.  Since these are
       distinct processes, it is possible to have a unidirectional gateway that
       consists of only a receiver or a sender, but both are needed if the
       gateway is to be fully integrated with the CP-6 mail environment.
 
       The job of the gateway receiver is, as its name implies, to receive
       messages from the external network and insert them into the CP-6 message
       stream.  The way the receiver program is invoked depends on how the
       external network connects to CP-6.  This is frequently done through a
       dial-up line that starts an online session by logging on to CP-6 with a
       special logon whose setup command invokes the receiver program.  Or, for
       extra security, the receiver program could be written as the command
       processor for the gateway logon.  Whatever its means of invocation, the
       gateway receiver must carry on a dialog with the external network using
       the appropriate message protocol to construct a CP-6 message source file
       for each message it receives, and then link to SEND to get the message
       into the CP-6 mail system.  SEND supports some special facilities for
       gateways that give receiver programs access to internal mail services
       that are necessary to create messages from other systems.  These
       facilities are fully described later in this section.
 
       A gateway sender is responsible for transmitting messages from CP-6 mail
       out into an external network.  The CP-6 mail system puts message folders
       for mail going to an external network into a special account that is
       defined by the :NODES file to be the gateway account.  Message folder
       files appear in this account in the same form as a CP-6 intersystem
       message.  Documentation on the structure of these files, and the PL-6
       macros that can be used to access them, is provided later in this
 
 
 
 
 
       SRB_MAIL                    GATEWAY PROGRAMS                         6-1
       
 
 
       section.  A gateway sender program typically runs as a ghost job that
       periodically wakes up to see if there are any files in the gateway's
       account.  If there is one, the program connects to the external network,
       translates the CP-6 message into the form needed for transmission, and
       sends it on its way.  If the message is sent successfully, the sender
       program deletes it, otherwise it creates an error message source file
       and links to SEND to deliver it back to the user who attempted to send
       the message.
 
 
 
       _________________       MAIL MESSAGE FLOW
 
 
       To assist gateway implementors in understanding how a gateway fits into
       the mail system, this section describes the steps needed to get a
       message to its destination for internal CP-6 mail, and then describes
       the additional processing required of the gateway software.
 
 
 
       __________________       LOCAL MESSAGE FLOW
 
 
       Sending and delivering a mail message on the local system involves the
       following steps.
 
        1. SEND is invoked to create a new message.  With the exception of
           response messages generated by MAILMAN, this is how all messages
           originate.  Users can create messages by invoking SEND directly or
           by issuing a message submission command in MAIL, which then links to
           SEND.  Gateway receiver programs also link to SEND to create CP-6
           copies of messages received from external sites.  SEND reads a
           message from a source file specified on its invocation command line,
           or builds it from interactive user input.  If it finds any error, it
           informs the user and, unless the problem can be corrected
           interactively, terminates with no further ado.
 
        2. When SEND is done building a message, it puts a request in the
           MAIL_CG comgroup asking MAILMAN to create a new message folder in
           the :MAIL account. (SEND cannot do this itself since users normally
           do not have write access to :MAIL.)  In addition to its other
           duties, MAILMAN periodically checks MAIL_CG for pending requests and
           processes them before continuing with message delivery.  When it
           gets a new message request, it tries to create a file with the name:
 
               :MESS000000000nnnnnnnnnn
 
           where nnnnnnnnnn is the current UTS.  If the file is successfully
           created, MAILMAN returns a response to SEND via MAIL_CG giving the
           name of the new message folder.  (If the file can't be created,
           MAILMAN returns an error response instead.)
 
 
 
 
 
 
       SRB_MAIL                   LOCAL MESSAGE FLOW                        6-2
           
 
 
        3. When SEND gets the name of the new folder from MAILMAN, it opens the
           file and proceeds to fill it in.  It then puts another message in
           MAIL_CG telling MAILMAN a new message is ready for processing, and
           exits.  (If the folder cannot be created or filled in, SEND reports
           the error and returns to the Options prompt if it is invoked
           interactively, or aborts to return the error code to the calling
           program if invoked in gateway mode.)
 
        4. When MAILMAN gets a new folder message in MAIL_CG, it puts the
           message on its delivery queue.  It looks at the header to see if the
           message is deferred, and schedules it for that time if it is,
           otherwise it uses the current time as the requested delivery time.
           (This will put the message behind any others scheduled for immediate
           delivery that MAILMAN hasn't gotten to yet, but before any
           subsequently created messages.)
 
        5. MAILMAN wakes up every 30 seconds (or after a MAIL_CG request is
           processed) to see if there are any messages waiting to be delivered.
           If there are any, it processes them, then goes back to sleep.
 
           To deliver a message, MAILMAN first checks whether a file copy was
           requested.  If so, it attempts to deliver that copy first, so that
           any cross reference trace messages for error or delivery receipts
           will be delivered properly.  It then proceeds to check the To, Copy,
           and BlindCopy lists, and puts a delivery record in the folder for
           each local address on any of these lists.  (Since delivery records
           are keyed by mailbox fid, only one record gets written if a user is
           on the recipient list more than once.)  It then scans through the
           delivery records and attempts to actually deliver the message by
           copying the folder being delivered as a new message at the end of
           the recipient's mailbox.  If it can't deliver a copy of the message
           for a recoverable reason (e.g., packset not mounted), it leaves that
           recipient on the delivery list so it will be retried later.  If any
           other error occurs, it creates an error message addressed to the
           sender (as determined by the ReturnAddress field in the header of
           the undeliverable message), and queues it for immediate delivery.
           And, when a message that requests a delivery receipt is successfully
           delivered, it creates and sends the delivery receipt in the same
           way.
 
           Once all entries in the delivery list have been successfully
           processed (or errored), MAILMAN deletes the message folder from
           :MAIL, removes it from its processing queue, and goes on to the next
           message in the queue.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                   LOCAL MESSAGE FLOW                        6-3
       
 
 
       ________________________       INTERSYSTEM MESSAGE FLOW
 
 
       Intersystem messages are created by SEND the same as local ones, and are
       processed the same way by MAILMAN up to the point of building the
       delivery records.  At that point, it passes the message off to the file
       transfer facility to be transmitted to remote sites, where it is
       delivered (or retransmitted) by the MAILMAN running there.  (For
       information about the operation of the file transfer facility, see the
       OPERATION topic in the help files for MOVE and SCOTTY.)
 
       If an address specifies a site name, MAILMAN looks up the site in the
       :NODES file and, if it is a synonym, resolves it to the actual node
       name.  (SEND also looks up site names in :NODES, but only to verify that
       they exist.)  When MAILMAN encounters an address with a site name
       different than the local one, the following process begins.
 
        6. Instead of putting delivery records in the folder being processed,
           MAILMAN adds remote addresses to a list of remote recipients that it
           maintains in memory.  It maintains a separate list for each remote
           node, containing all addresses at that node which are to receive the
           message.  If it finds any remote recipients, before it proceeds to
           deliver local copies, MAILMAN builds a copy of the folder for each
           remote site.  These folders also reside in the :MAIL account, and
           have names of the form:
 
               :XMITssss:ddddnnnnnnnnnn
 
           where ssss and dddd are the first four characters of the source
           (local) and destination node names, and nnnnnnnnnn is the low order
           digits of the UTS for when MAILMAN realized it needed to send the
           message to the site.  (If the source or destination node name
           contains less than four characters, the ssss and dddd fields are
           only as long as the node name; additional UTS digits (with leading
           zeros) appear in the file name in that case.)
 
           Message folders for remote sites contain everything in the original
           folder created by SEND, plus an intersystem address record (ITo, IC,
           and IBC) for each address list that has recipients at (or routed
           through) that site.  There is also a SiteInfo record in remote
           message folders to identify it as an intersystem message and to
           prevent sending more than one copy of a message to any given site.
 
           MAILMAN only creates an intersystem folder for each site it needs to
           transmit the message to, not one for every site in an address list.
           For example, consider a network with nodes A, B, and C where the
           only connections are A<->B and B<->C.  If a user at node B sends a
           message to both other sites, the local MAILMAN creates a separate
           intersystem folder for each site.  But when a user on node A does
           the same thing, the MAILMAN at that node builds a single intersystem
           folder bound for node B containing addresses for both other sites;
           MAILMAN on node B will deliver the message to its local users and
           transmit a new intersystem folder for the ones on node C.
 
 
 
 
 
       SRB_MAIL                INTERSYSTEM MESSAGE FLOW                     6-4
           
 
 
        7. After building the :XMIT file, MAILMAN invokes the file transfer
           facility to transport the folder to the remote site.  The logic
           needed to perform a beam operation are linked into MAILMAN to avoid
           the overhead of linking to MOVE, but the effect is the same as if
           the command:
 
               MOVE :XMITssss:ddddnnnnnnnnnn.:MAIL ;
                 TO :MOVEssss:ddddnnnnnnnnnn.:MAIL @site
 
           had been entered.  This translates the folder into a file transfer
           packet and writes it to the output stream for the remote site (that
           is, to JE@wsn, where wsn is the workstation defined in the :NODES
           file as the one to use for communication with the site in question).
 
           Since all file transfers require a logon for use on receiving
           system, to prevent security breaches, MAILMAN uses the special
           :MAIL,500ATOB logon for this purpose.  As described in the
           installation procedures given earlier, this logon cannot be used for
           any purpose other than mail folder transfer, but it must exist for
           mail to flow through the file transfer software.
 
           If the file transfer is started successfully, MAILMAN deletes the
           :XMIT file, otherwise it retains the file to indicate that the
           transfer attempt failed.  After building and attempting to transmit
           folders for each remote site to receive the message, the local
           MAILMAN is done with the message, and the file transfer facility
           takes over.
 
        8. The file transfer packet is transmitted to the remote site and
           materialized there in the :MOVE account via the NCTL process.  The
           file in :MOVE has a name of the form:
 
               MOVEnnnnnnnnsitename
 
           where nnnnnnnn is the low order digits of the UTS when the transfer
           was started, and sitename is the name of the sending site.  This
           file contains all of the information needed to reconstruct the
           original file, encoded to consist of 80 byte records containing only
           printable ASCII characters, which is the same form as any other beam
           packet.
 
        9. The SCOTTY ghost at the receiving site wakes up once a minute to
           look for new transfer packets in the :MOVE account, and process any
           it finds.  For a mail message folder, it will assume the identity of
           the :MAIL,500ATOB user, create the :MOVE?.:MAIL file with the name
           given in the MOVE command shown in step 7, and fill it in with the
           contents of the decoded beam packet.
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                INTERSYSTEM MESSAGE FLOW                     6-5
       
 
 
       10. At a site configured for intersystem mail (i.e., where there is a
           :NODES file), at the end of its normal delivery cycle, MAILMAN looks
           to see if there are any files with a :MOVE prefix in the :MAIL
           account.  If it finds any, it changes the prefix in the file name to
           :MESS, and schedules the folder for delivery the same way it would
           for a message created at that site.  The message is then delivered
           and/or rerouted to other sites using the same procedures described
           above.
 
 
 
       _____________________       EXTERNAL MESSAGE FLOW
 
 
       Message delivery to external sites is the same as for remote CP-6 sites
       up to the point where the intersystem folder is given to the file
       transfer facility at the site running the gateway software.  At that
       point, the delivery process for external mail diverges from the normal
       intersystem message flow, and performs the following steps instead.
       Note that this is only done on the node where the gateway account
       resides.  If a message is sent to an external address whose gateway runs
       on a remote CP-6 site, the message is first transmitted to that site
       using the intersystem delivery procedure described above.
 
        7. When MAILMAN transfers an :XMIT file to a site defined in :NODES as
           an external node at the local site, it invokes the file transfer
           software to beam the file as if the command:
 
               MOVE :XMITssss:ddddnnnnnnnnnn.:MAIL ;
                 TO :MESSssss:ddddnnnnnnnnnn.gateacct @thisnode
 
           had been entered, where the file name fields are the same as given
           in the corresponding intersystem message delivery step, gateacct is
           the account defined for the external system in :NODES, and thisnode
           is the local site name.  The MOVE program would reject an attempt to
           transfer a file from the local site to itself, so the beaming logic
           can safely assume that a request to do this must be coming from
           MAILMAN.  (When MOVE transfers a file to an external node, the node
           name specified will be that of the external node, not the CP-6 node
           where the gateway resides; this is what causes these files to be
           treated as described in the section on intersystem file transfer
           later in this SRB, instead of being processed as described here.)
 
           As for normal intersystem message transfer, the special
           :MAIL,500ATOB logon is given to the file transfer facility as the
           one to impersonate when the file is delivered.
 
           MAILMAN deletes :XMIT files from the :MAIL account it the file
           transfer starts successfully, and retains them if it fails, the same
           as for CP-6 intersystem messages.
 
 
 
 
 
 
 
 
       SRB_MAIL                  EXTERNAL MESSAGE FLOW                      6-6
           
 
 
        8. On the system where the gateway account resides, instead of writing
           the file transfer packet to JE@wsn to materialize it in the :MOVE
           account on the remote site, the file transfer facility creates a
           file in the local :MOVE account.  (If the program does not have
           write access to :MOVE, it grants itself FMSec privilege for a moment
           to create the file.)  This file has the normal name for a transfer
           packet of:
 
               MOVEnnnnnnnnsitename
 
           except that in this case sitename is the name of the local site.  It
           then builds the transfer packet the same way it would normally.
 
        9. The local SCOTTY ghost sees the transfer packet and processes it
           just as it would one beamed from a remote site, and creates a
           :MESS?.:gateacct file as specified by the MOVE command in step 7.
           Since it does this while impersonating the :MAIL,500ATOB logon, the
           gateway account must defined to allow write (or, at least, create)
           access to :MAIL.
 
       10. The gateway sender process, which is presumably running as a ghost
           job, wakes up periodically and checks for new :MESS? files in its
           account.  If it finds any, it establishes a connection with the
           external network and sends the messages in those folders on their
           way.
 
       Message delivery for incoming messages from an external mail system is
       relatively simple, in comparison.  When the foreign system connects to
       CP-6 to send it a message, the gateway receiver program accepts the
       message, creates a CP-6 message source file for it, and links to SEND
       (either via the M$YC or M$LINK monitor service) to initiate the delivery
       process, which proceeds the same as for a message originated within
       CP-6.  The only difference between locally submitted messages and one
       from a gateway is that SEND allows gateways to provide header fields
       that the mail system normally generates itself.
 
 
 
       ___________________       EXTERNAL ADDRESSING
 
 
       Gateway programs should transform addresses received from external
       networks into a form that is usable within CP-6, and make the reverse
       transformation on outgoing addresses.  Intersystem mail addressing is a
       complex issue, a full discussion of which is beyond the scope of this
       SRB.  There are, however, some points regarding how the CP-6 mail system
       deals with external addresses that gateway implementors should be aware
       of.
 
       CP-6 requires intersystem addresses to be of the form:
 
           local-part@sitename
 
 
 
 
 
 
       SRB_MAIL                   EXTERNAL ADDRESSING                       6-7
       
 
 
       CP-6 allows a number of special characters that might be used in
       external addresses in the local-part of the name, so that external
       addresses can be left intact.  However, the local-part of CP-6 addresses
       can contain a number of subfields that the mail system does need to
       parse, and external addresses that contain those characters can lead to
       parsing errors.  Such ambiguities can be avoided by enclosing the entire
       external address (up to the gateway's sitename) in 'quotes'.
 
       The local mail system does not attempt to validate addresses for any
       remote site.  This is true for remote CP-6 sites as well as external
       gateways.  The local system merely verifies that the node is defined,
       and leaves it to the remote MAILMAN or gateway software to verify that
       the addresses are legal.
 
       The mail system has special logic to accommodate Internet addressing
       conventions.  An address of the form:
 
           local-part@domain1.domain2...domainN.domainM
 
       is treated as if it were:
 
           local-part%domain1.domain2...domainN@domainM
 
       provided that domainM is defined as an external node in the :NODES file.
       That is, the (@) at sign delimiting the domain list is translated into a
       (%) c/o sign, and the final domain is used as the sitename.  Users will
       not see this transformation; the address is displayed with the same
       punctuation as originally entered.  However, the address is parsed
       internally such that all of the domain list up to the last one is
       included in the local-part of the address.  If a gateway takes advantage
       of this facility, the internal address record entries seen by the
       gateway sender program will have the last domain name in the SITENAME
       field, with the remainder of the domain list appended to the USER_NAME
       field.
 
       CP-6 addresses for gateways to UUCP mail and other external networks
       that do not follow Internet addressing conventions must specify the
       gateway node name as the sitename.  The gateway receiver program should
       add a sitename recognizable by the local mail system to all addresses it
       processes, and the gateway sender program should strip them back off.
       If this is not done properly, it will not be possible to return a
       response message back to the sender.  However, all addresses do not need
       to be reversible in order to deliver a message on CP-6, they only need
       to pass the CP-6 address parsing rules.  The only addresses that need to
       be valid are the ones used to deliver the message on CP-6.  If addresses
       that could be used to send a response are only examined at the time the
       response is actually sent.  If the gateway cannot transform addresses in
       a reversible form, the only consequence is that users will get an error
       if they try to respond to the message.
 
 
 
 
 
 
 
 
 
       SRB_MAIL                   EXTERNAL ADDRESSING                       6-8
       
 
 
       The mail system uses the ReplyTo field (or the From field, if there is
       no ReplyTo) as the recipient for an answer, acknowledgment or return
       receipt.  If this address is not intelligible to the local mail system,
       an attempt to respond will result in an immediate error.  If the address
       is sufficient to get the response back to the gateway, it is up to the
       gateway or external network software to return an error message for
       undeliverable mail.  If the CP-6 user attempts to answer all receivers,
       the system uses all addresses in the To, Copy, and BlindCopy lists in
       addition, and the same rules apply to them.
 
 
 
       ____________________       MAIL MESSAGE FOLDERS
 
 
       The mail system keeps each message in a separate file called a message
       folder while it is being transmitted.  A message folder is similar to a
       normal mail folder, except that it can only contain a single message and
       it has no profile, list definition, or message ID records.  The message
       in the folder is stored as message number zero, which is not a legal
       message number in a normal folder.  A message folder can also contain
       special records with intersystem addressing information not found in a
       normal folder.
 
       PL-6 macros defining the key and record structures for a message folder
       are available in the VM_MACRO_C file, which is provided in the :LIBRARY
       account when MAIL is installed.  Gateway sender programs can use these
       macros to access message folders that are to be sent to an external
       network.  This section documents aspects of these structures that might
       not be clear from just looking at the macros.  Only those structures
       that a gateway might see in a message folder are discussed.
 
 
 
       ___________       RECORD KEYS
 
 
       Message folders are maintained as keyed files.  The record keys in a
       message folder vary in size from one to seven bytes.  The first byte is
       always a code that identifies the type of record.  This is usually
       followed by a four byte field that gives the message number in binary.
       Keys for body and trace records have an additional two byte binary
       sequence number.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                       RECORD KEYS                           6-9
       
 
 
       VM_KEYTYPES EQUATES
 
 
       The VM_KEYTYPES macro defines equates for all possible mail folder
       record type codes.  Those that a gateway might see are, in ascending
       order:
 
           %VM_TYPE_HEAD        The message header record
           %VM_TYPE_SITE        The site information record
           %VM_TYPE_TO          The original To record
           %VM_TYPE_ITO         The intersystem To record
           %VM_TYPE_C           The original Copy record
           %VM_TYPE_IC          The intersystem Copy record
           %VM_TYPE_BC          The original BlindCopy record
           %VM_TYPE_IBC         The intersystem BlindCopy record
           %VM_TYPE_RTO         The ReplyTo record
           %VM_TYPE_TRACE       Message trace records
           %VM_TYPE_BODY        Message body records
           %VM_TYPE_ENCL        The enclosure context record
           %VM_TYPE_ENCL_INIT   The first enclosure data record
 
       The contents and use of each of these records are defined later in this
       section.
 
 
 
       VM_INFOKEY STRUCTURE
 
 
       VM_INFOKEY defines the structure of keys for records that appear once
       per message.  Note that, although a message folder only contains one
       message, it is keyed the same way as a normal folder, so the keys for
       records that pertain to a specific message contain the message number.
       As noted above, this is always zero in a message folder.
 
 
 
                                      VM_INFOKEY
 
           ..... NAME=VM_INFOKEY
           ..... STCLASS=STATIC
          .0-1-0 TYP=0
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |uuu|   |   |   |   2 COUNT          UBIN BYTE CALIGNED INIT(5),
          .0 |   |uuu|   |   |   2 TYPE           UBIN BYTE CALIGNED INIT(TYP),
          .0 |   |   |uuu|uuu|   2 MESSAGE_NUMBER UBIN WORD CALIGNED INIT(0);
          .1 |uuu|uuu|   |   |
             +---+---+---+---+
               0   1   2   3     .1-2-0 total length
 
 
 
 
 
 
       SRB_MAIL                  VM_INFOKEY STRUCTURE                      6-10
                   
 
 
       COUNT
                   The number of characters in this key.
 
       MESSAGE_NUMBER
                   Number of this message.  Always zero in a message folder.
 
       TYPE
                   as a TEXTC string.  The type of the record.  Values are
                   defined by the VM_KEYTYPES macro.
 
 
 
       _____________________       MESSAGE HEADER RECORD
 
 
       Every message has a header record.  The header contains timestamps for
       when the message was sent and delivered, various status flags, and the
       text of address lists and other fields that appear in the header area
       when the message is displayed.
 
       The header is a variable length record.  It begins with a structure of
       fixed fields that is defined by the VM_HEADER macro.  The remainder of
       the record is a work area that is made up of variable length blocks
       containing the various header text fields in TEXTC form and other
       information.  The fixed field area contains the addresses of the blocks
       in the work area.  The header is expected to be read into the DS8 data
       segment, starting at its beginning.  If it resides there, the addresses
       it contains can be used to point directly to the corresponding fields.
       If the header is read into some other buffer, the addresses it contains
       must be adjusted accordingly.  Note that the size of the header is
       limited only by the amount of space taken up by blocks in the work area,
       and there is no limit to the size of an address list.  Most headers fit
       in one page of memory, but mail can create headers that fill two or more
       pages.
 
       Although gateways should not need to alter the header work area, it may
       be of interest to note that it is maintained using the XUM library
       services X$ALLOCATE and X$DEALLOCATE for dynamic memory management.
       Each block begins with a word containing its size; pointers to blocks
       point past this word to the start of their actual contents.  There may
       be unused blocks in the word area.  The header contains a pointer to the
       first free block (which in this case does point to the count word), and
       the second word of a free block points to the next free block.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                  MESSAGE HEADER RECORD                     6-11
       
 
 
       VM_HEADER STRUCTURE
 
 
       VM_HEADER defines the structure of the fixed field area that begins a
       header record.
 
 
 
                                      VM_HEADER
 
         .16-0-0 NAME=VM_HEADER
           ..... STCLASS="BASED (VM_HEADER$)
                 "
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |uuu|uuu|uuu|uuu|   2 HEADER_SIZE    UBIN WORD INIT(0),
          .1 |uuu|uuu|uuu|uuu|   2 CREATION_DATE  UBIN WORD INIT(0),
          .2 |uuu|uuu|uuu|uuu|   2 DELIVERY_DATE  UBIN WORD INIT(0),
          .3 |uuu|uuu|uuu|uuu|   2 FIRST_DELIVERY UBIN WORD INIT(0),
          .4 |   |   |   |   |   2 RESERVED_DATES(0:4)
          .4 |uuu|uuu|uuu|uuu|                    UBIN WORD INIT(0*0),
             Z   Z   Z   Z   Z
         .11 |uuu|uuu|uuu|uuu|   2 NUM_RECORDS    UBIN WORD INIT(0),
         .12 |   |   |   |   |   2 STATUS,
         .12 |4  |   |   |   |     3 ERR          BIT(1) UNAL INIT('0'B),
         .12 |2  |   |   |   |     3 ANSWER       BIT(1) UNAL INIT('0'B),
         .12 |1  |   |   |   |     3 ACK          BIT(1) UNAL INIT('0'B),
         .12 | 4 |   |   |   |     3 DEFER        BIT(1) UNAL INIT('0'B),
         .12 | 2 |   |   |   |     3 RR           BIT(1) UNAL INIT('0'B),
         .12 | 1 |   |   |   |     3 CRYPT        BIT(1) UNAL INIT('0'B),
         .12 |  4|   |   |   |     3 OLD          BIT(1) UNAL INIT('0'B),
         .12 |  2|   |   |   |     3 MAKE_OLD     BIT(1) UNAL INIT('0'B),
         .12 |  1|   |   |   |     3 EXAM         BIT(1) UNAL INIT('0'B),
         .12 |   |4  |   |   |     3 DEL          BIT(1) UNAL INIT('0'B),
         .12 |   |2  |   |   |     3 FCOPY        BIT(1) UNAL INIT('0'B),
         .12 |   |1  |   |   |     3 MARK         BIT(1) UNAL INIT('0'B),
         .12 |   | 4 |   |   |     3 GRAPHICS     BIT(1) UNAL INIT('0'B),
         .12 |   | 2 |   |   |     3 FORWARDED    BIT(1) UNAL INIT('0'B),
         .12 |   | 1 |   |   |     3 ANS_TO       BIT(1) UNAL INIT('0'B),
         .12 |   |  4|   |   |     3 DR           BIT(1) UNAL INIT('0'B),
         .12 |   |  2|   |   |     3 DELIVERY     BIT(1) UNAL INIT('0'B),
         .12 |   |  1|   |   |     3 BROADCAST    BIT(1) UNAL INIT('0'B),
         .12 |   |   |4  |   |     3 PRIMARY      BIT(1) UNAL INIT('0'B),
         .12 |   |   |2  |   |     3 C            BIT(1) UNAL INIT('0'B),
         .12 |   |   |1  |   |     3 BC           BIT(1) UNAL INIT('0'B),
         .12 |   |   | 4 |   |     3 THINGED      BIT(1) UNAL INIT('0'B),
         .12 |   |   | 2 |   |     3 RRACK        BIT(1) UNAL INIT('0'B),
         .12 |   |   | 1 |   |     3 PRE_B00      BIT(1) UNAL INIT('0'B),
         .12 |   |   |  4|   |     3 ENCL         BIT(1) UNAL INIT('0'B),
         .12 |   |   |  3|777|     3 RESERVED     BIT(11) UNAL INIT('0'B),
         .13 |   |   |   |   |   2 MISC ALIGNED,
 
 
 
 
 
       SRB_MAIL                   VM_HEADER STRUCTURE                      6-12
       
 
 
         .13 |74 |   |   |   |     3 PHASE        UBIN(4) UNAL INIT(0),
         .13 | 37|777|777|777|     3 *            UBIN(32) UNAL INIT(0),
         .14 |   |   |   |   |   2 ERROR,
         .14 |777|7  |   |   |     3 FCG          BIT(12) UNAL INIT('0'B),
         .14 |   | 77|   |   |     3 MID          BIT(6) UNAL INIT('0'B),
         .14 |   |   |4  |   |     3 MON          BIT(1) UNAL INIT('0'B),
         .14 |   |   |377|77 |     3 ERR#         UBIN(14) UNAL INIT(0),
         .14 |   |   |   |  7|     3 SEV          UBIN(3) UNAL INIT(0),
         .15 |ppp|ppp|ppp|ppp|   2 FREE$          PTR INIT(ADDR(NIL)),
         .16 |   |   |   |   |   2 NEXT$          PTR
         .16 |ppp|ppp|ppp|ppp|                    INIT(ADDR(NAME.WORK_AREA)),
         .17 |ppp|ppp|ppp|ppp|   2 BAD_ADDRESS$   PTR INIT(ADDR(NIL)),
         .20 |ppp|ppp|ppp|ppp|   2 BLIND$         PTR INIT(ADDR(NIL)),
         .21 |ppp|ppp|ppp|ppp|   2 COPY$          PTR INIT(ADDR(NIL)),
         .22 |ppp|ppp|ppp|ppp|   2 FILE_FOLDER$   PTR INIT(ADDR(NIL)),
         .23 |ppp|ppp|ppp|ppp|   2 FROM$          PTR INIT(ADDR(NIL)),
         .24 |ppp|ppp|ppp|ppp|   2 REFERENCE$     PTR INIT(ADDR(NIL)),
         .25 |ppp|ppp|ppp|ppp|   2 REPLY_TO$      PTR INIT(ADDR(NIL)),
         .26 |   |   |   |   |   2 RETURN_ADDRESS$
         .26 |ppp|ppp|ppp|ppp|                    PTR INIT(ADDR(NIL)),
         .27 |ppp|ppp|ppp|ppp|   2 SIGNED$        PTR INIT(ADDR(NIL)),
         .30 |ppp|ppp|ppp|ppp|   2 SUBJECT$       PTR INIT(ADDR(NIL)),
         .31 |ppp|ppp|ppp|ppp|   2 TO$            PTR INIT(ADDR(NIL)),
         .32 |ppp|ppp|ppp|ppp|   2 UNIQUE_ID$     PTR INIT(ADDR(NIL)),
         .33 |ppp|ppp|ppp|ppp|   2 REFERS_TO_ID$  PTR INIT(ADDR(NIL)),
         .34 |   |   |   |   |   2 NUM_TRACE_RECORDS
         .34 |uuu|uuu|uuu|uuu|                    UBIN WORD INIT(0),
         .35 |   |   |   |   |   2 NUM_ENCL_RECORDS
         .35 |uuu|uuu|uuu|uuu|                    UBIN WORD INIT(0),
         .36 |uuu|uuu|uuu|uuu|   2 RESERVED(0:5)  UBIN WORD INIT(0*0),
             Z   Z   Z   Z   Z
         .44 |uuu|uuu|uuu|uuu|   2 WORK_AREA      UBIN WORD;
             +---+---+---+---+
               0   1   2   3    .45-0-0 total length
 
 
       BAD_ADDRESS$
                   Address of bad address field text in the work area, stored
                   as a TEXTC string.  This is present only in an error
                   message, and only if the ERROR field is also set.  It
                   contains text to be substituted where <> appears in the text
                   for the error message.
 
       BLIND$
                   Address of the BlindCopy field in the work area, stored as a
                   TEXTC string.
 
       COPY$
                   Address of the Copy field in the work area, stored as a
                   TEXTC string.
 
 
 
 
 
 
 
 
       SRB_MAIL                   VM_HEADER STRUCTURE                      6-13
                   
 
 
       CREATION_DATE
                   The UTS for when the message folder was first created by
                   SEND.
 
       DELIVERY_DATE
                   The UTS for when MAILMAN moved the folder to the gateway
                   account.
 
       ERROR
                   The error code in standard CP-6 format for a diagnostic
                   explaining why a message could not be delivered.  This is
                   set only in an error message, but some types of errors
                   result in a response message where the error is diagnosed by
                   an encoded body record instead of by this field.  If
                   present, the message text can be obtained from the :VMERRMSG
                   file with a M$ERRMSG monitor call.  If the message contains
                   the string <>, the contents of the BadAddress header field
                   should be substituted for it.
 
       FILE_FOLDER$
                   Address of the FileCopy folder block in the work area,
                   stored as a VM_RADDRESS structure.
 
       FIRST_DELIVERY
                   The UTS of MAILMAN's first attempt to process the message.
 
       FREE$
                   Address of the first block in the free space chain in the
                   work area.
 
       FROM$
                   Address of the From field in the work area, stored as a
                   TEXTC string.
 
       HEADER_SIZE
                   Number of words in this record.
 
       NEXT$
                   Address of the next available word in the work area.  Since
                   the header record written to a file only contains the work
                   area actually used, this points to the word following the
                   end of the record.
 
       NUM_RECORDS
                   The number of body records in the message folder.
 
       NUM_TRACE_RECORDS
                   The number of trace records in the message folder.
 
       NUM_ENCL_RECORDS
                   The number of enclosure data records in the message folder.
 
 
 
 
 
 
 
       SRB_MAIL                   VM_HEADER STRUCTURE                      6-14
                   
 
 
       REFERENCE$
                   Address of the Reference field in the work area, stored as a
                   TEXTC string.
 
       REFERS_TO_ID$
                   Address of the ReferenceMessageID field in the work area,
                   stored as a TEXTC string.
 
       REPLY_TO$
                   Address of the ReplyTo field in the work area, stored as a
                   TEXTC string.
 
       RETURN_ADDRESS$
                   Address of the ReturnAddress block in the work area.  This
                   is a VM_RADDRESS structure that MAILMAN would use to return
                   error messages for undeliverable mail.  Note that this field
                   is zapped out in a message delivered to a normal mailbox,
                   for security purposes.  It is intended for use only as a
                   sure and simple way to address an error or delivery receipt
                   back to the sender.
 
       SIGNED$
                   Address of the Signed field in the work area, stored as a
                   TEXTC string.  This is only for internal use by SEND.  In
                   message folders a gateway sees, the signature will appear in
                   body lines at the end of the message.
 
       STATUS
                   Status flag word.  Only those flags that may be set in a
                   message folder are described here.
 
           ACK
                   Set if this is an acknowledgment of a received message.
 
           ANSWER
                   Set if this is an answer to a received message.
 
           ANS_TO
                   Set in addition to ANSWER if this the reply is being sent to
                   all recipients.
 
           BROADCAST
                   Set if this is a broadcast (junk mail) message.  No errors
                   should be returned if it cannot be delivered, and the
                   message should not be delivered with the complete address
                   information needed to answer all recipients.
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                   VM_HEADER STRUCTURE                      6-15
                   
 
 
           CRYPT
                   Set if the message body is encrypted.  Although there is no
                   way to prevent users from sending encrypted messages to a
                   gateway, it is difficult to imagine how a gateway could
                   deliver them in a form that could be correctly decrypted on
                   the receiving end, so the sender program should reject them
                   and return an error message to the sender.
 
           DEFER
                   Set if message delivery was deferred.  This could be set in
                   a message delivered to a gateway, but it is not useful to
                   the sender program because the deferral has already been
                   done by MAILMAN.
 
           DELIVERY
                   Set if this message is a delivery receipt.  Note that these
                   messages are created and delivered directly by MAILMAN to
                   the mailbox used by the gateway receiver program, instead of
                   being delivered to the gateway account.  The sender program
                   will therefore never see them unless the gateway supports
                   special facilities to forward them out to the external
                   network.
 
           DR
                   Set if the sender has requested a delivery receipt for this
                   message.
 
           ERR
                   Set if this is an error message.  Note that these messages
                   are created and delivered directly by MAILMAN to the mailbox
                   used by the gateway receiver program, instead of being
                   delivered to the gateway account, so The sender program will
                   therefore never see them unless the gateway software
                   includes special facilities to forward them out to the
                   external network.
 
           FCOPY
                   Set if the sender requested a file copy of this message.
 
           FORWARDED
                   Set if message was result of FORWARD command.
 
           GRAPHICS
                   Set if message contains graphics.  (Reserved for future
                   use.)
 
           RR
                   Set if the sender requested a return receipt to be sent back
                   when a recipient displays the message.
 
           RRACK
                   Set if this is a return receipt that was sent when a message
                   was displayed.
 
 
 
 
 
       SRB_MAIL                   VM_HEADER STRUCTURE                      6-16
                   
 
 
           ENCL
                   Set if enclosures are included in this message.
 
 
       SUBJECT$
                   Address of the Subject field in the work area, stored as a
                   TEXTC string.
 
       TO$
                   Address of the To field in the work area, stored as a TEXTC
                   string.
 
       UNIQUE_ID$
                   Address of the MessageID field in the work area, stored as a
                   TEXTC string.
 
       WORK_AREA
                   First word of the work area.
 
 
 
       _______________________       SITE INFORMATION RECORD
 
 
       Every message folder destined for a remote site contains a site
       information record that identifies the sites that have already processed
       this message.  (Typically, this will only be the local site.)  This is
       used within the CP-6 mail network to detect loops in mail delivery
       paths.  Gateways probably do not need to use it for this purpose, but
       could use it to construct message routing trace lines.  In any case, it
       is there.
 
 
 
       VM_SITEKEY STRUCTURE
 
 
       The VM_SITEKEY macro defines the key for the site information record.
       Since there can only be one of these in any message folder, the key
       simply consists of the type code byte.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                  VM_SITEKEY STRUCTURE                      6-17
                                           
 
 
                                      VM_SITEKEY
 
           ..... NAME=VM_SITEKEY
           ..... STCLASS=STATIC
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |uuu|   |   |   |   2 COUNT          UBIN BYTE CALIGNED INIT(1),
          .0 |   |uuu|   |   |   2 TYPE           UBIN BYTE CALIGNED INIT(10);
             +---+---+---+---+
               0   1   2   3     .0-2-0 total length
 
 
       COUNT
                   The number of characters in this key.
 
       TYPE
                   The type code (from VM_KEYTYPES) for a site record.
 
 
 
       VM_SITE STRUCTURE
 
 
       The VM_SITE macro defines the structure of a site information record.
       This is a fixed length record that contains a list of sites that have
       processed the message.
 
 
 
                                       VM_SITE
 
           ..... NAME=VM_SITE
           ..... STCLASS=STATIC
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |   |   |   |   |   2 FLAGS,
          .0 |   |   |   |   |     3 RETURN_TO_ORIGIN
          .0 |4  |   |   |   |                    BIT(1) UNAL INIT('0'B),
          .0 |377|777|777|777|     3 RESERVED     BIT(35) UNAL INIT('0'B),
          .1 |uuu|uuu|uuu|uuu|   2 NUM_SITES      UBIN WORD INIT(0),
          .2 |ccc|ccc|ccc|ccc|   2 ORIGIN         CHAR(8) CALIGNED INIT(' '),
          .3 |ccc|ccc|ccc|ccc|
          .4 |   |   |   |   |   2 RECEIVER_SITE(0:25)
          .4 |ccc|ccc|ccc|ccc|                    CHAR(8) CALIGNED;
          .5 |ccc|ccc|ccc|ccc|
             Z   Z   Z   Z   Z
             +---+---+---+---+
               0   1   2   3    .70-0-0 total length
 
 
 
 
 
 
       SRB_MAIL                    VM_SITE STRUCTURE                       6-18
                   
 
 
       FLAGS
                   Status flag word.  Only a single flag is currently defined.
 
           RETURN_TO_ORIGIN
                   Set if delivery of the message back to the original site is
                   permitted.  This is set if the message is an answer to all
                   receivers of a message that was previously sent.
 
       NUM_SITES
                   The number of sites that have received this message so far.
 
       ORIGIN
                   The site where the message originated.
 
       RECEIVER_SITE
                   An array containing the name of the sites (as known to
                   sender) where this message has been sent.
 
 
 
       _______________       ADDRESS RECORDS
 
 
       A mail message contains address lists in both internal and textual form.
       There are separate lists for the To (primary), Copy, and BlindCopy
       recipients.  The To list is always present; the others appear only if
       the sender specified recipients of those types.  The header record
       contains the text for each field, just as the sender typed it, but there
       is also an internal address record for each list.  In an internal list,
       each address part is split out into a separate field for ease of access.
       In addition, if the user specified a local mailing list (one not defined
       in the global mail registry), it will be expanded into its global
       constituents in the internal list.  MAIL users only see the list text
       from the header, but the mail system uses the internal lists for
       purposes of actually delivering messages.
 
       In a message folder that is being delivered to a gateway, there are also
       intersystem address records which only contain the recipients that are
       to receive the message through the gateway.  There can be an intersystem
       address record for each kind of list, but only records for lists that
       actually have a recipient on the gateway will appear.  (This means that,
       although the original To record is always present, the IntersystemTo
       record may not be.)  A gateway should only deliver a message to the
       addresses specified by the intersystem list records.  (A gateway could
       use the textual or original internal lists for purposes of constructing
       header fields containing the complete list of recipients, if the
       external network supports that facility.  However, there is no way to
       determine which entries in one list were used to derive the entries in
       another list, short of redoing the entire derivation.  This makes it
       impractical to merge entries from different lists.)
 
 
 
 
 
 
 
 
       SRB_MAIL                     ADDRESS RECORDS                        6-19
       
 
 
       Every message folder also contains an internal ReplyTo address record.
       This record contains the internal address list (typically only
       containing a single entry) to which replies to the message should be
       sent.  There is also a ReplyTo string in the header record that contains
       this list in textual form.  Gateways to external systems that support
       sending replies to someone other than the originator should use the
       ReplyTo list to set the corresponding field in the outgoing message
       header.
 
       All address records are of variable length.  They begin with a small
       header of fixed fields, which is followed by a series of address
       definition structures, one per list entry.  The mail system deals with
       two kinds of internal address structures:  resolved and unresolved.  A
       resolved address defines a specific mailbox file in terms of its fid
       parts.  An unresolved address specifies a user or list name that must be
       looked up in a mail registry to determine the actual mailbox it refers
       to.  Address records can contain both resolved and unresolved addresses
       in any order or combination.  Addresses of users reached through a
       gateway will nearly always be treated as unresolved by CP-6, but it is
       possible (at least, as of the B03 release) for addresses that are
       treated internally as resolved to be routed to a gateway.
 
       The entries in an address record are maintained as a double-linked list,
       with pointers to the next and previous entries.  Address records are
       expected to be read into the DS5 data segment, starting at its
       beginning.  If they are kept there, the pointers in them can be used
       directly to the access corresponding list entries.  If the record is
       read into some other buffer, the pointers must be adjusted accordingly.
       Note that there is no practical limit to the number of entries address
       records can contain, so they can be arbitrarily large.  Most address
       records can fit in one page of memory, but mail can create records that
       span two or more pages.
 
       Like the header record work area, address records are maintained by XUM
       library services for dynamic memory management.  However, address
       records in a message folder will not have any free blocks in them.
 
       Address record keys are defined by the VM_INFOKEY structure that was
       described earlier in this section.  The following sections describe
       macros that can be used to access the record contents.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                     ADDRESS RECORDS                        6-20
       
 
 
       VM_ADD_HEAD STRUCTURE
 
 
       The VM_ADD_HEAD macro describes the header block that begins each
       address record.  It defines the number of entries in the record and
       points to the first one in the list.  The remainder of the record is
       made up of a series of blocks containing the VM_RADDRESS and VM_UADDRESS
       structures that define the list entries.
 
 
 
                                     VM_ADD_HEAD
 
           ..... NAME=VM_ADD_HEAD
           ..... STCLASS="BASED(VM_ADDLIST$)
                 "
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |uuu|uuu|uuu|uuu|   2 ADDRESS_SIZE   UBIN WORD INIT(0),
          .1 |uuu|uuu|uuu|uuu|   2 NUM_ENTRIES    UBIN WORD INIT(0),
          .2 |   |   |   |   |   2 FLAGS,
          .2 |4  |   |   |   |     3 ERR#         BIT(1) UNAL INIT('0'B),
          .2 |377|777|777|777|     3 RESERVED     BIT(35) UNAL INIT('0'B),
          .3 |ppp|ppp|ppp|ppp|   2 HEAD$          PTR INIT(ADDR(NIL)),
          .4 |ppp|ppp|ppp|ppp|   2 FREE$          PTR INIT(ADDR(NIL)),
          .5 |ppp|ppp|ppp|ppp|   2 NEXT$          PTR INIT(ADDR(NIL)),
          .6 |uuu|uuu|uuu|uuu|   2 WORK_AREA      UBIN WORD;
             +---+---+---+---+
               0   1   2   3     .7-0-0 total length
 
 
       ADDRESS_SIZE
                   Number of words in this address list.
 
       FLAGS
                   Flag word.  No flags will be set in any address record seen
                   by a gateway.
 
       FREE$
                   Address of first entry in free block list.  Address records
                   seen by the gateway will have no free blocks.
 
       HEAD$
                   Address of first entry in the address list.
 
       NEXT$
                   Address of next available word in work area.  Since address
                   records written to a file only contain the work area
                   actually used, this points to the word following the end of
                   the record.
 
 
 
 
 
 
       SRB_MAIL                  VM_ADD_HEAD STRUCTURE                     6-21
                   
 
 
       NUM_ENTRIES
                   Number of entries in list.
 
       WORK_AREA
                   First word of work area.
 
 
 
       VM_ADDTYPES EQUATES
 
 
       The VM_ADDTYPES macro defines equates for the type codes used in
       internal address list entries.  These are:
 
           %VM_ADD_RESOLVED     Resolved address entry
           %VM_ADD_UNRESOLVED   Unresolved address entry
 
 
 
       VM_RADDRESS STRUCTURE
 
 
       The VM_RADDRESS structure defines an address in terms of an actual CP-6
       style mailbox name.  Gateways will typically only need this structure to
       access the return address block in the header record.
 
 
 
                                     VM_RADDRESS
 
           ..... NAME=VM_RADDRESS
           ..... STCLASS=STATIC
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |ppp|ppp|ppp|ppp|   2 NEXT$          PTR INIT(ADDR(NIL)),
          .1 |ppp|ppp|ppp|ppp|   2 PREV$          PTR INIT(ADDR(NIL)),
          .2 |   |   |   |   |   2 FLAGS,
          .2 |4  |   |   |   |     3 UNDEF#       BIT(1) UNAL INIT('0'B),
          .2 |2  |   |   |   |     3 USER#        BIT(1) UNAL INIT('0'B),
          .2 |177|   |   |   |     3 RESERVED     BIT(7) UNAL INIT('0'B),
          .2 |   |uuu|   |   |   2 TYPE           UBIN BYTE UNAL INIT(1),
          .2 |   |   |ccc|ccc|   2 NAME_KEY       CHAR(20) CALIGNED INIT(' '),
          .3 |ccc|ccc|ccc|ccc|
          .4 |ccc|ccc|ccc|ccc|
          .5 |ccc|ccc|ccc|ccc|
          .6 |ccc|ccc|ccc|ccc|
          .7 |ccc|ccc|   |   |
          .7 |   |   |   |   |   2 FOLDER         CHAR(25) CALIGNED INIT('
          .7 |   |   |ccc|ccc|                    '*0),
         .10 |ccc|ccc|ccc|ccc|
         .11 |ccc|ccc|ccc|ccc|
 
 
 
 
 
       SRB_MAIL                  VM_RADDRESS STRUCTURE                     6-22
       
 
 
             Z   Z   Z   Z   Z
         .14 |ccc|ccc|ccc|ccc|
         .15 |ccc|ccc|ccc|   |
          .7 |   |   |   |   |   2 NOMAD REDEF FOLDER,
          .7 |   |   |ccc|ccc|     3 FOLDER       CHAR(18) CALIGNED,
         .10 |ccc|ccc|ccc|ccc|
         .11 |ccc|ccc|ccc|ccc|
         .12 |ccc|ccc|ccc|ccc|
         .13 |ccc|ccc|ccc|ccc|
         .14 |ccc|   |   |   |     3 DELIM        CHAR(1) CALIGNED,
         .14 |   |ccc|ccc|ccc|     3 PSID         CHAR(6) CALIGNED,
         .15 |ccc|ccc|ccc|   |
         .15 |   |   |   |ccc|   2 PASS           CHAR(8) CALIGNED INIT(' '*0),
         .16 |ccc|ccc|ccc|ccc|
         .17 |ccc|ccc|ccc|   |
         .17 |   |   |   |ccc|   2 SITENAME       CHAR(8) CALIGNED INIT(' '*0),
         .20 |ccc|ccc|ccc|ccc|
         .21 |ccc|ccc|ccc|   |
         .21 |   |   |   |ccc|   2 ACCT           CHAR(8) CALIGNED INIT(' '*0);
         .22 |ccc|ccc|ccc|ccc|
         .23 |ccc|ccc|ccc|...|
             +---+---+---+---+
               0   1   2   3    .24-0-0 total length
 
 
       ACCT
                   The name of the account containing the folder being
                   addressed.  This field is always present in an resolved
                   address; parsing an account name is how the mail system
                   decides the address is resolved.
 
       FLAGS
                   Flag byte.  No flags will be set for an address seen by a
                   gateway.
 
       FOLDER
                   The name of the mail folder being addressed.  If blank, the
                   /CENTRAL folder is assumed.
 
       NAME_KEY
                   Not used in addresses seen by a gateway.
 
       NEXT$
                   Address of the next entry in the address list, or ADDR(NIL)
                   if this is the last one.
 
       NOMAD
                   Redefinition of FOLDER used for accounts on private
                   packsets.  The packset ID is kept at the end of the folder
                   field in that case (and the length of folder names in
                   accounts on private packs is diminished accordingly).  If
 
 
 
 
 
 
 
       SRB_MAIL                  VM_RADDRESS STRUCTURE                     6-23
                   
 
 
                   NOMAD.DELIM is blank and NOMAD.PSID is nonblank, then the
                   NOMAD structure should be used in place of FOLDER.
                   NOMAD.FOLDER contains the actual folder name (if any), and
                   NOMAD.PSID contains the name of the packset where the
                   account resides.
 
       PASS
                   Not used in addresses seen by a gateway.  Passwords are only
                   needed to access folders within MAIL and SEND.  MAILMAN has
                   sufficient priviledge to deliver a message to a passworded
                   folder without knowing the password.
 
       PREV$
                   Address of the prior entry in the address list, or ADDR(NIL)
                   if this is the first one.
 
       SITENAME
                   The name of the site (as defined in the :NODES file) where
                   the folder is to be sent.  This will always be an actual
                   node name, never a synonym.
 
       TYPE
                   The type of this address (always %VM_ADD_RESOLVED for a
                   resolved address).  Values for address type codes are
                   defined by the VM_ADDTYPES macro.
 
 
 
       VM_UADDRESS STRUCTURE
 
 
       The VM_UADDRESS structure defines an address in terms of a user name
       that does not correspond directly to a CP-6 mailbox name.  It is almost
       identical to the VM_RADDRESS structure, except the account field at the
       end is replaced by a variable length TEXTC string containing the user
       name.  Some of the fields are meaningful only for resolved addresses,
       but they are copied here anyway for convenience of internal processing.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                  VM_UADDRESS STRUCTURE                     6-24
                                           
 
 
                                     VM_UADDRESS
 
           ..... NAME=VM_UADDRESS
           ..... STCLASS=STATIC
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |ppp|ppp|ppp|ppp|   2 NEXT$          PTR INIT(ADDR(NIL)),
          .1 |ppp|ppp|ppp|ppp|   2 PREV$          PTR INIT(ADDR(NIL)),
          .2 |   |   |   |   |   2 FLAGS,
          .2 |4  |   |   |   |     3 UNDEF#       BIT(1) UNAL INIT('0'B),
          .2 |2  |   |   |   |     3 USER#        BIT(1) UNAL INIT('0'B),
          .2 |177|   |   |   |     3 RESERVED     BIT(7) UNAL INIT('0'B),
          .2 |   |uuu|   |   |   2 TYPE           UBIN BYTE UNAL INIT(2),
          .2 |   |   |ccc|ccc|   2 NAME_KEY       CHAR(20) CALIGNED INIT(' '),
          .3 |ccc|ccc|ccc|ccc|
          .4 |ccc|ccc|ccc|ccc|
          .5 |ccc|ccc|ccc|ccc|
          .6 |ccc|ccc|ccc|ccc|
          .7 |ccc|ccc|   |   |
          .7 |   |   |   |   |   2 FOLDER         CHAR(25) CALIGNED INIT('
          .7 |   |   |ccc|ccc|                    '*0),
         .10 |ccc|ccc|ccc|ccc|
         .11 |ccc|ccc|ccc|ccc|
             Z   Z   Z   Z   Z
         .14 |ccc|ccc|ccc|ccc|
         .15 |ccc|ccc|ccc|   |
          .7 |   |   |   |   |   2 NOMAD REDEF FOLDER,
          .7 |   |   |ccc|ccc|     3 FOLDER       CHAR(18) CALIGNED,
         .10 |ccc|ccc|ccc|ccc|
         .11 |ccc|ccc|ccc|ccc|
         .12 |ccc|ccc|ccc|ccc|
         .13 |ccc|ccc|ccc|ccc|
         .14 |ccc|   |   |   |     3 DELIM        CHAR(1) CALIGNED,
         .14 |   |ccc|ccc|ccc|     3 PSID         CHAR(6) CALIGNED,
         .15 |ccc|ccc|ccc|   |
         .15 |   |   |   |ccc|   2 PASS           CHAR(8) CALIGNED INIT(' '*0),
         .16 |ccc|ccc|ccc|ccc|
         .17 |ccc|ccc|ccc|   |
         .17 |   |   |   |ccc|   2 SITENAME       CHAR(8) CALIGNED INIT(' '*0),
         .20 |ccc|ccc|ccc|ccc|
         .21 |ccc|ccc|ccc|   |
         .21 |   |   |   |   |   2 USER_NAME,
         .21 |   |   |   |uuu|     3 COUNT        UBIN BYTE CALIGNED INIT(0),
         .22 |ccc|ccc|ccc|ccc|     3 TEXT         CHAR(200) CALIGNED INIT(' ');
         .23 |ccc|ccc|ccc|ccc|
             Z   Z   Z   Z   Z
        .102 |ccc|ccc|ccc|ccc|
        .103 |ccc|ccc|ccc|ccc|
             +---+---+---+---+
               0   1   2   3   .104-0-0 total length
 
 
 
 
 
 
       SRB_MAIL                  VM_UADDRESS STRUCTURE                     6-25
                   
 
 
       FLAGS
                   Flag byte.  No flags will be set for an address seen by a
                   gateway.
 
       FOLDER
                   Within CP-6, messages can be addressed to a particular
                   folder for a registered user; these are delivered to the
                   folder of that name in the same account as the user's
                   registered central mailbox.  This facility probably does not
                   apply to messages addressed to an external network, so this
                   field should be blank in addresses used by a gateway.
                   However, although it is unlikely, it may not be impossible
                   for an external address to be parsed by CP-6 as specifying a
                   folder name.  If this field is ever nonblank in an external
                   address, the proper address can be reconstructed by
                   appending the folder to the user name, with a slash in
                   between.
 
       NAME_KEY
                   Not used in addresses seen by a gateway.
 
       NEXT$
                   Address of the next entry in the address list, or ADDR(NIL)
                   if this is the last one.
 
       NOMAD
                   Redefinition of FOLDER used for an address on a private
                   pack.  This is not meaningful if the address is unresolved.
 
       PASS
                   Not useful; see VM$RADDRESS.
 
       PREV$
                   Address of the prior entry in the address list, or ADDR(NIL)
                   if this is the first one.
 
       SITENAME
                   The name of the site (as defined in the :NODES file) where
                   the folder is to be sent.  For messages bound for an
                   external network, this will be the site name by which the
                   gateway is known to CP-6.  When a synonym for a site in the
                   CP-6 network is entered in an address, it is replaced by the
                   actual node name in the internal address, but synonyms for
                   external nodes are passed on intact for use in
                   reconstructing the external domain list.
 
       TYPE
                   The type of this address (always %VM_ADD_UNRESOLVED for a
                   unresolved address).  Values for address type codes are
                   defined by the VM_ADDTYPES macro.
 
 
 
 
 
 
 
 
       SRB_MAIL                  VM_UADDRESS STRUCTURE                     6-26
                   
 
 
       USER_NAME
                   The name of the user being addressed.  For external
                   addresses, the name may be transformed by removing the last
                   domain and replacing the (@) at sign that indicates the
                   start of the domain list with a (%) percent sign, as
                   described under External Addressing elsewhere in this
                   section.
 
                   User names are kept in TEXTC format.  Although the structure
                   defines the text field as being 200 characters long (the
                   maximum size of an address supported by CP-6), the
                   structures in an address record only contain as many words
                   as are needed to hold the actual address.
 
 
 
       ____________________       MESSAGE BODY RECORDS
 
 
       The contents of the message are kept in body records, one per message
       line.  There are a few fixed fields at the beginning of each body
       record, with the remainder taken up by a variable length string
       containing the text of the line.
 
       If the message contains any trace lines, they are kept in the same form
       as body records.  The only difference is that the record key has a type
       code of %VM_TYPE_TRACE instead of %VM_TYPE_BODY.  (Trace records are
       typically only used in incoming messages from a gateway, and by the mail
       system internally to cross reference related messages in a folder.  They
       are unlikely to appear in a message folder sent to a gateway, but since
       the SEND option that puts them in a message is not a privileged one, a
       gateway sender could see them in one of its message folders.)
 
       In addition to normal text, the message body can consist of lines whose
       text is to be obtained from MAIL's error message file (:VMERRMSG).
       These lines only appear in response messages (errors, acknowledgments,
       and delivery and return receipts) that are generated by the mail system.
       Errors and delivery receipts are created by MAILMAN in the mailbox used
       to send the message instead of being delivered in the normal fashion, so
       a gateway sender may never see these.  Acknowledgments and return
       receipts are sent to the address indicated by the ReplyTo or From field
       of the original message; if these fields an address that CP-6 mail will
       interpret as being intended for the external network, the gateway sender
       will never see them either, and even if it does, it could substitute its
       own message for the one encoded in the body.  However, the structure of
       encoded body records is documented here along with the normal one, for
       the benefit of any gateway implementors that want to process them.
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                  MESSAGE BODY RECORDS                      6-27
       
 
 
       VM_BODYKEY STRUCTURE
 
 
       VM_BODYKEY defines the structure of keys for records that can appear
       more than once for each message.  It defines the same fields as
       VM_INFOKEY, with an extra field for the record number added at the end.
 
 
 
                                      VM_BODYKEY
 
           ..... NAME=VM_BODYKEY
           ..... STCLASS=STATIC
           ..... TYP=%VM_TYPE_BODY
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |uuu|   |   |   |   2 COUNT          UBIN BYTE CALIGNED INIT(7),
          .0 |   |   |   |   |   2 TYPE           UBIN BYTE CALIGNED
          .0 |   |uuu|   |   |                    INIT(TYP48),
          .0 |   |   |uuu|uuu|   2 MESSAGE_NUMBER UBIN WORD CALIGNED INIT(0),
          .1 |uuu|uuu|   |   |
          .1 |   |   |uuu|uuu|   2 REC_NUMBER     UBIN HALF CALIGNED INIT(0);
             +---+---+---+---+
               0   1   2   3     .2-0-0 total length
 
 
       COUNT
                   The number of characters in this key.
 
       MESSAGE_NUMBER
                   Number of this message.
 
       REC_NUMBER
                   The record number identifying the line of the message body.
                   Body and trace lines each are numbered consecutively
                   starting with zero.
 
       TYPE
                   The type of the record to be accessed.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                  VM_BODYKEY STRUCTURE                      6-28
       
 
 
       VM_BODYTYPES EQUATES
 
 
       The VM_BODYTYPES macro defines equates for the type codes used in body
       records.  These are:
 
           %VM_BODY_TEXT        Text record
           %VM_BODY_GRAPHICS    Graphics data (reserved for future use)
           %VM_BODY_ENCODED_ERR Encoded error/time/substitution information
           %VM_BODY_BINARY_ENCL Binary enclosure record
 
 
 
       VM_BODYREC STRUCTURE
 
 
       The VM_BODYREC macro describes the structure of body and trace records
       in the message folder.  Each record begins with a type code identifying
       the kind of record it is.  Most records simply contain the text of the
       line, but, as noted above, body records can also have their contents
       encoded as a message code and substitution fields.
 
       In addition to the NAME and STCLASS parameters supported by all macros,
       VM_BODYREC supports two additional parameters that can be used to
       generate the structure in different ways.  These are:
 
       ERR_FORMAT  YES specifies that the structure for an encoded message body
                   record is to be generated instead of the normal one.  The
                   default is NO.
 
       VARYLEN     YES specifies that the DATA field in a normal body record is
                   to be defined as a variable length string instead of having
                   a length of the maximum message line size that CP-6 can
                   handle.  The default is NO.
 
 
 
                                      VM_BODYREC
 
           ..... ERR_FORMAT=0
                   NO=0
                   YES=1
           ..... LEN=300
           ..... NAME=VM_BODYREC
           ..... STCLASS=STATIC
           ..... TYP=%VM_BODY_TEXT
           ..... VARYLEN=0
                   NO=0
                   YES=1
 
 
 
 
 
 
 
 
 
       SRB_MAIL                  VM_BODYREC STRUCTURE                      6-29
       
 
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |   |   |   |   |   2 TYPE           UBIN BYTE CALIGNED
          .0 |uuu|   |   |   |                    INIT(TYP1),
          .0 |   |uuu|uuu|uuu|   2 RESERVED       UBIN(27) UNAL INIT(0),
          .1 |   |   |   |   |   2 VALUE,
          .1 |uuu|uuu|uuu|uuu|     3 COUNT        UBIN WORD,
          .2 |ccc|...|...|...|     3 DATA         CHAR(LEN) CALIGNED;
             +---+---+---+---+
               0   1   2   3     .3-0-0 total length (variable)
 
 
       TYPE
                   A code identifying the type of body record, set to one of
                   the equates defined by the VM_BODYTYPES macro.
 
       VALUE
                   A substructure for the contents of the body line.  In a
                   normal body record, this consists of the following fields:
 
           COUNT
                   The number of characters in the DATA field.
 
           DATA
                   The character string that makes up the line.
 
 
 
                                  VM_BODYREC_ENCODED
 
           ..... NAME=VM_BODYREC_ENCODED
           ..... STCLASS=STATIC
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |   |   |   |   |   2 TYPE           UBIN BYTE CALIGNED
          .0 |uuu|   |   |   |                    INIT(TYP1),
          .0 |   |uuu|uuu|uuu|   2 RESERVED       UBIN(27) UNAL INIT(0),
          .1 |   |   |   |   |   2 VALUE,
          .1 |uuu|uuu|uuu|uuu|     3 COUNT        UBIN WORD,
          .2 |   |   |   |   |     3 DATA,
          .2 |bbb|bbb|bbb|bbb|       4 ERR        BIT(36),
          .3 |uuu|uuu|uuu|uuu|       4 UTS        UBIN WORD,
          .4 |   |   |   |   |       4 STUFF,
          .4 |   |   |   |   |         5 PIECE(0:291)
          .4 |uuu|   |   |   |                    UBIN BYTE CALIGNED;
             Z   Z   Z   Z   Z
             +---+---+---+---+
               0   1   2   3   .115-0-0 total length
 
 
 
 
 
 
 
       SRB_MAIL                  VM_BODYREC STRUCTURE                      6-30
                   
 
 
       TYPE
                   The type of the record to be accessed.
 
       VALUE
                   A substructure for the contents of the body line.  In an
                   encoded body record, this consists of the following fields:
 
           COUNT
                   The number of characters in the DATA field.
 
           DATA
                   In an encoded body record, the DATA field is a structure
                   that contains the following subfields.
 
               ERR
                   The error code in standard CP-6 format for the message the
                   line contains.  The message text can be obtained from the
                   :VMERRMSG file with a M$ERRMSG monitor call.  If the message
                   contain the string <>, the contents of the STUFF field
                   should be substituted for it.
 
               STUFF
                   This field contains two TEXTC strings.  The first one is the
                   text to substitute for <> in the text of the message
                   returned by M$ERRMSG.  The second, which begins with the
                   byte just after the end of the first one, is to be passed as
                   the %U2 substitution field on the M$ERRMSG call.  Either or
                   both strings may be null, as indicated by a TEXTC count byte
                   of zero.  If the first field is null and some portion of the
                   message text around the <> is enclosed in <angle brackets>,
                   then the entire enclosed portion of the text should be
                   omitted from the message.
 
               UTS
                   The timestamp associated with the message for the line.
                   This should be converted to the format "mm/dd/yy hh:mm" with
                   a M$TIME monitor call, and passed as the %U1 substitution
                   field in the M$ERRMSG call that returns the text for the
                   line.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                  VM_BODYREC STRUCTURE                      6-31
       
 
 
       _________________       BINARY ENCLOSURES
 
 
       Enclosures are basically body records, with the difference that they are
       managed by additional context. The enclosure context record in analogous
       to an address record. That is, there is a fixed length header at the
       beginning of the record, followed by a series of structures describing
       each enclosure.
 
       Multiple enclosures are handled by using key types 100 - 199.  The
       enclosure context record, %VM_TYPE_ENCL, is always 100 with the records
       for the first enclosure beginning with a key type of 101, or
       %VM_TYPE_ENCL_INIT. Each additional enclosure has a key type incremented
       by 1. Key types 100 to 199 are therefore reserved.  The key structure
       for the context record use %VM_INFOKEY. The key structure for the
       enclosure records is defined by the %VM_ENCLKEY macro. This is similar
       to %VM_BODYKEY with the difference that the record number is a word,
       rather than a half word field.
 
       The context for each enclosure contains its key type, the number of
       records, the title, status flags and pointers to the next and and
       previous entries in the context record. The context record is expected
       to be read to virtual data segment 1 (AS0) starting at the beginning. If
       read into another data segment, the pointers will have to be adjusted.
       The context list will not span more than 2 pages.  The head of the list
       is defined by %VM_ADD_HEAD, the same structure used in address records.
       The enclosure context is define by %VM_ENCLOS.
 
       The enclosure records are handled much the same as regular body records.
       The exceptions are that the keys are slightly different as noted above,
       the body type is always %VM_BODY_BINARY_ENCL, VARYLEN = YES when
       invoking the %VM_BODYREC macro, and the record expects to be read into
       virtual data segment 2 (AS1).
 
       The message header contains a status flag indicating if there are
       enclosures in the mmessage, and a field containing the total number of
       enclosure records.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                    BINARY ENCLOSURES                       6-32
       
 
 
       VM_ENCLKEY STRUCTURE
 
 
       The VM_ENCLKEY structure describes the key used for enclosure records.
       It contains the same fields as VM_BODYKEY with the one difference the
       size of the REC_NUMBER field.
 
 
 
                                      VM_ENCLKEY
 
           ..... NAME=VM_ENCLKEY
           ..... STCLASS=STATIC
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |uuu|   |   |   |   2 COUNT          UBIN BYTE CALIGNED INIT(9),
          .0 |   |uuu|   |   |   2 TYPE           UBIN BYTE CALIGNED INIT(100),
          .0 |   |   |uuu|uuu|   2 MESSAGE_NUMBER UBIN WORD CALIGNED INIT(0),
          .1 |uuu|uuu|   |   |
          .1 |   |   |uuu|uuu|   2 REC_NUMBER     UBIN WORD CALIGNED INIT(0);
          .2 |uuu|uuu|   |   |
             +---+---+---+---+
               0   1   2   3     .2-2-0 total length
 
 
       COUNT
                   The number of characters in this key.
 
       MESSAGE_NUMBER
                   Number of this message.
 
       REC_NUMBER
                   The record number identifying the line of the enclosure
                   starting with zero and numbered consecutively.
 
       TYPE
                   The type of the record as found in the context block.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                  VM_ENCLKEY STRUCTURE                      6-33
       
 
 
       VM_ENCLOS STRUCTURE
 
 
       VM_ENCLOS defines each enclosure found in the context record.
 
 
 
                                      VM_ENCLOS
 
           ..... NAME=VM_ENCLOS
           ..... STCLASS=STATIC
 
               0   1   2   3
             +---+---+---+---+ DCL
          .0 |   |   |   |   | 1 NAME STCLASS,
          .0 |ppp|ppp|ppp|ppp|   2 NEXT$          PTR INIT(ADDR(NIL)),
          .1 |ppp|ppp|ppp|ppp|   2 PREV$          PTR INIT(ADDR(NIL)),
          .2 |   |   |   |   |   2 FLAGS,
          .2 |4  |   |   |   |     3 DELETED      BIT(1) UNAL INIT('0'B),
          .2 |2  |   |   |   |     3 FORWARD      BIT(1) UNAL INIT('0'B),
          .2 |177|777|777|777|     3 RESERVED     BIT(34) UNAL INIT('0'B),
          .3 |uuu|uuu|uuu|uuu|   2 RESERVED(0:5)  UBIN WORD INIT(0*0),
             Z   Z   Z   Z   Z
         .11 |uuu|uuu|uuu|uuu|   2 NRECS          UBIN WORD WALIGNED INIT(0),
         .12 |uuu|...|...|...|   2 TYPE           UBIN BYTE CALIGNED INIT(0),
         .13 |ppp|ppp|ppp|ppp|   2 TITLE$         PTR INIT(ADDR(NIL));
             +---+---+---+---+
               0   1   2   3    .14-0-0 total length
 
 
       NEXT$
                   Address of the next entry in the context list, or ADDR(NIL)
                   if this is the last one.
 
       PREV$
                   Address of the previous entry in the context list, or
                   ADDR(NIL) if this is the first one.
 
       FLAGS
                   None of the status flags can be set.
 
       NRECS
                   The number of records in this enclosure.
 
       TYPE
                   The key type to be used in VM_ENCLKEY.
 
       TITLE$
                   Pointer to a TEXTC title field.
 
 
 
 
 
 
 
 
 
       SRB_MAIL                   VM_ENCLOS STRUCTURE                      6-34
       
 
 
       __________________________       GATEWAY FACILITIES IN SEND
 
 
       Gateway receiver programs should link to SEND to insert messages from
       external networks into the CP-6 message stream.  A receiver program that
       creates its own message folders and interacts with MAILMAN directly via
       MAIL_CG, does so at its own risk.  Doing this incorrectly can make
       MAILMAN crash and burn.  We cannot be held responsible for any such
       failures, and will be upset if you report them in Starlog.  Using SEND
       is the only method of message creation that is supported.
 
       SEND has a GATEWAY invocation option and some privileged message header
       options that are intended for use by gateway receiver programs.  These
       facilities let an external gateway use nearly all of the services that
       the CP-6 mail system uses internally (provided, of course, that the
       external network in question also supports these services).
 
 
 
       __________________________       INVOCATION COMMAND OPTIONS
 
 
       The GATEWAY invocation command option tells SEND that it is being
       invoked by a program that does not permit any I/O via the standard CP-6
       input and output streams.  This is useful when the gateway uses these
       streams to carry on the dialog with the external mail system.  In
       particular, when the GATEWAY option is specified:
 
        o  SEND never prompts for message header fields.  If the To field is
           missing or malformed, SEND aborts with an appropriate error.  If the
           Subject field is missing, SEND creates a message with no subject.
 
        o  Any error that would normally result in a diagnostic causes SEND to
           abort and pass the error code back to the program that invoked it.
           The program can then obtain the corresponding diagnostic from
           :VMERRMSG or take other action as appropriate to report the error.
 
        o  The OPTIONS invocation option, which explicitly requests user
           interaction through the standard I/O streams, is mutually exclusive
           with GATEWAY.
 
       The MAIL invocation option for SEND may also be of interest to gateway
       implementors.  It specifies the mailbox SEND is to use to obtain the
       mail profile options relevant to sending messages.  Any error messages
       returned by MAILMAN for undeliverable mail also go to that mailbox.  The
       default is the user's registered mailbox (or the /CENTRAL folder in the
       logon account if the user is unregistered) when SEND is invoked from
       IBEX, or the current folder when SEND is invoked by MAIL.  The default
       is normally sufficient, but that may not be true for a gateway.  SEND
       will refuse to run if it is not given a mailbox to use (or if the one it
       picks by default doesn't exist), so the gateway must either specify the
       MAIL option or insure that a :MAIL_CENTRAL file exists in the logon
 
 
 
 
 
 
       SRB_MAIL               INVOCATION COMMAND OPTIONS                   6-35
       
 
 
       account that the receiver runs under.  Also, gateway housekeeping
       procedures should allow for the possibility of error messages and
       delivery receipts appearing in this mailbox and handle them
       appropriately (preferably by relaying them back across the external
       network to the originator of the message.)
 
       If SEND fails to create a message, it sets the StepCC to ERROR (4) on
       termination.  This is true whether or not the GATEWAY option is
       specified, but gateways are more likely to find this of interest than
       other users.
 
 
 
       ___________________________       MESSAGE SOURCE FILE OPTIONS
 
 
       SEND allows privileged users to override the From, Date, and other
       header fields that are normally only set by the mail system.  When SEND
       is invoked with FMSec privilege active, it supports some additional
       options that permit a gateway receiver program to pass values for these
       fields that it obtains from the external message.  These options should
       appear in the header line portion of the message source file passed to
       SEND.  The privileged options are listed below and then formally
       documented.
 
 
       Date                    Specifies the timestamp for when the message was
                               sent.
 
       From                    Specifies the mail address of the originator of
                               the message.
 
       IntersystemBlindCopy    Allows local delivery to selected addresses from
                               the BlindCopy list.
 
       IntersystemCopy         Allows local delivery to selected addresses from
                               the Copy list.
 
       IntersystemTo           Allows local delivery to selected addresses from
                               the To list.
 
       MessageID               Specifies the unique identifier for the message.
 
       ReferenceMessageID      Specifies the unique identifier of the message
                               this one is a response to.
 
       SiteInfo                Specifies that this message has been processed
                               by remote sites.
 
       Trace                   Puts lines in the trace envelope of the message.
 
       Type                    Specifies that this message is in response to
                               another one.
 
 
 
 
 
       SRB_MAIL               MESSAGE SOURCE FILE OPTIONS                  6-36
       
 
 
       Note that, if any of these options (or any other header field) does not
       follow the proper syntax, SEND treats the line as if it were the start
       of the message body; that line and any following header lines will not
       be processed properly, even though the message will usually still be
       sent without reporting any error.  When header lines appear in the body
       of a message received from a gateway, that means there is a syntax error
       in the header field that appears as the first body line (or, if the line
       is for a privileged option, that SEND was invoked without FMSec
       privilege).
 
       Like other SEND options, privileged options should only be specified
       once per message.  If an option appears more than once, each one
       overrides the previous one.  The options can appear in any order,
       intermixed with unprivileged options.  (There are a few exceptions to
       these general rules, which are explained in the detailed descriptions of
       those options.)
 
 
 
       ______________________       DATE PRIVILEGED OPTION
 
 
       SYNTAX:
 
       DATE : { mm/dd/[yy] [, hh:mm] }
              { hh:mm [, mm/dd[/yy]] }
 
 
       PARAMETERS:
 
       mm, dd, yy    are 1 or 2 digit numbers indicating the month, day, and
       year that the message was sent.  A leading zero is allowed but not
       required on the month and day if they are less than 10.  The year, if
       specified, must be the last two digits of the designated year.  If no
       year is specified, the current year is assumed.
 
       hh, mm     are 1 or 2 digit numbers indicating the hour and minute the
       message was sent.  A leading zero is allowed but not required if the
       numbers are less than 10.  Hours should be based on a 24 hour clock; no
       meridiem indicator is allowed.  Time zone indication is also not
       supported.
 
 
       DESCRIPTION:
 
       This option resets the header field that indicates when the message was
       sent.  If it is omitted, the message will show the time when SEND was
       invoked.  Note that MAILMAN still sets the header field for when the
       message was received at the time it actually delivers the message.
 
 
 
 
 
 
 
 
 
       SRB_MAIL                 DATE PRIVILEGED OPTION                     6-37
       
 
 
       ______________________       FROM PRIVILEGED OPTION
 
 
       SYNTAX:
 
       FROM : address
 
 
       PARAMETERS:
 
       address    is the electronic mail address of the originator of the
       message.  The address must comply with CP-6 message addressing
       conventions; the name portion must be 'quoted' if it contains special
       characters that would be treated as address part delimiters by CP-6.
 
 
       DESCRIPTION:
 
       This option places the specified address in the From field of the
       message.  This field will be used to send response messages back to the
       originator (unless the message also specifies a ReplyTo field), so it
       should give the originator's address in a form that will recognized by
       the local mail system.  Note that this option does not affect the
       ReturnAddress field in the CP-6 message header; that will still point to
       the mailbox the gateway tells SEND to use, so any error messages will be
       returned in that folder.  The ReplyTo and Signed fields are erased by
       this option, to remove any default values obtained from the mailbox SEND
       is using.  If these options are to be specified, they must therefore
       follow the From option in the message source file.
 
 
 
       ________________________________________       INTERSYSTEM BLIND COPY PRIVILEGED OPTION
 
 
       SYNTAX:
 
       I[NTERSYSTEM] B[LIND] C[OPY] : address [, address ...]
 
 
       PARAMETERS:
 
       address    is the CP-6 mail address for a blind copy recipient of the
       message on the local system.  Multiple blind copy recipients can be
       specified by providing a list of addresses separated by commas.
 
 
       DESCRIPTION:
 
       This option specifies who on the local system is to receive a blind copy
       of the message.  It is meaningful only if the SiteInfo privileged option
       is also specified.  In that case, MAILMAN will only attempt to deliver
 
 
 
 
 
 
       SRB_MAIL        INTERSYSTEM BLIND COPY PRIVILEGED OPTION            6-38
       
 
 
       blind copies to addresses on this list, although the address list for
       the BlindCopy option will still be shown when recipients display the
       message.  If SiteInfo is omitted, MAILMAN will attempt to deliver blind
       copies to all addresses specified by the BlindCopy option, and any
       IntersystemBlindCopy option will be ignored.
 
 
 
       __________________________________       INTERSYSTEM COPY PRIVILEGED OPTION
 
 
       SYNTAX:
 
       I[NTERSYSTEM] C[OPY] : address [, address ...]
 
 
       PARAMETERS:
 
       address    is the CP-6 mail address for a copy recipient of the message
       on the local system.  Multiple copy recipients can be specified by
       providing a list of addresses separated by commas.
 
 
       DESCRIPTION:
 
       This option specifies who on the local system is to receive a copy of
       the message.  It is meaningful only if the SiteInfo privileged option is
       also specified.  In that case, MAILMAN will only attempt to deliver
       copies to addresses on this list, although the address list for the Copy
       option will still be shown when recipients display the message.  If
       SiteInfo is omitted, MAILMAN will attempt to deliver copies to all
       addresses specified by the Copy option, and any IntersystemCopy option
       will be ignored.
 
 
 
       ________________________________       INTERSYSTEM TO PRIVILEGED OPTION
 
 
       SYNTAX:
 
       I[NTERSYSTEM] T[O] : address [, address ...]
 
 
       PARAMETERS:
 
       address    is the CP-6 mail address for a recipient of the message on
       the local system.  Multiple recipients can be specified by providing a
       list of addresses separated by commas.
 
 
 
 
 
 
 
 
 
       SRB_MAIL            INTERSYSTEM TO PRIVILEGED OPTION                6-39
       
 
 
       DESCRIPTION:
 
       This option specifies who on the local system is to receive the message.
       It is meaningful only if the SiteInfo privileged option is also
       specified.  In that case, MAILMAN will only attempt to deliver the
       message to addresses on this list, although the address list for the To
       option will still be shown when recipients display the message.  If
       SiteInfo is omitted, MAILMAN will attempt to deliver copies to all
       addresses specified by the To option, and any IntersystemTo option will
       be ignored.
 
 
 
       ____________________________       MESSAGE ID PRIVILEGED OPTION
 
 
       SYNTAX:
 
       [M[ESSAGE]] ID : text
 
 
       PARAMETERS:
 
       text    is the string of characters up to the end of the record. The
       string can contain up to 254 characters.
 
 
       DESCRIPTION:
 
       This option specifies a string that uniquely identifies the message.  It
       is normally obtained from the corresponding field in the external
       message header.  CP-6 mail uses this string to match against the
       ReferenceMessageID option for response message so that it can add an
       appropriate trace line to the original message.  If this option is not
       specified, SEND assigns a unique ID field of the form:
 
           <yymmdd.hhmmsstt.sysid@site.CP6>
 
       Message IDs assigned by SEND serve to identify the message within CP-6,
       but are not meaningful to the external network, so the ID given by the
       external mail system should be used if one is available.  Of course, to
       fully implement this facility, the gateway sender must also convey the
       ReferenceMessageID of responses sent through the gateway in the form
       expected by the external network.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL              MESSAGE ID PRIVILEGED OPTION                  6-40
       
 
 
       ______________________________________       REFERENCE MESSAGE ID PRIVILEGED OPTION
 
 
       SYNTAX:
 
       REF[ERENCE] [M[ESSAGE]] ID : text
 
 
       PARAMETERS:
 
       text    is the string of characters up to the end of the record.  The
       string can contain up to 254 characters.
 
 
       DESCRIPTION:
 
       This option specifies a string that uniquely identifies the message
       being responded to.  It should be obtained from the corresponding field
       in the external message header (provided, of course, that the other mail
       system supports this facility).  ReferenceMessageID is only meaningful
       if the Type privileged option is also specified to indicate that this
       message is a response (answer, acknowledgment, delivery receipt, return
       receipt, or error) to one originally sent (or received) by CP-6.  The
       specified ID is matched against the MessageIDs of all messages in the
       recipients' mailbox to determine which one should gave a trace line
       appended to inform the user that a response has been received.
 
 
 
       ___________________________       SITE INFO PRIVILEGED OPTION
 
 
       SYNTAX:
 
       SITE [INFO] : site [, site ...]
 
 
       PARAMETERS:
 
       site    is the name of a node (as known to the local system) that has
       already processed this message.  The first site on the list is assumed
       to be the one where the message originated.  If the message is known to
       have been processed by more than one node, a list of up to 26 additional
       sites can be specified.
 
 
       DESCRIPTION:
 
       This option informs MAILMAN that the message originated at a remote
       site.  Its main effect is to make MAILMAN look at the Intersystem To,
       Copy, and BlindCopy lists instead of the equivalent primary address
 
 
 
 
 
 
 
       SRB_MAIL               SITE INFO PRIVILEGED OPTION                  6-41
       
 
 
       lists for purposes of local delivery (or local routing to other remote
       nodes).  Also, if an address on one of those lists specifies a node that
       was listed in the SiteInfo option, MAILMAN detects a loop-back
       condition, and will not try to deliver the message to that address, on
       the assumption that it has already been delivered by another path.
 
 
 
       ____________       TRACE OPTION
 
 
       SYNTAX:
 
       TR[ACE] : text
 
 
       PARAMETERS:
 
       text    is the string of characters up to the end of the record.
 
 
       DESCRIPTION:
 
       This option places the specified text in the trace envelope portion of
       the message.  This is not a privileged option.  It can be specified in
       any message processed by SEND, but it is described here because it is of
       special interest to gateways.
 
       The trace envelope is a special set of pseudo-header lines that are kept
       by CP-6 in the same form as body lines.  When the message is displayed,
       trace lines appear at the end of the header.  Unlike most SEND options,
       Trace can be specified any number of times; the text of each line will
       be displayed in the order the Trace options were specified.
 
       The DisplayTrace mail profile option, which defaults to YES, can be set
       to NO to inhibit the display of the trace envelope.  Gateway receiver
       programs can therefore put fields from the external message header in
       trace lines instead of in normal body lines to give users the choice of
       seeing them or not when they display the message.
 
       It should be noted, though, that mail also uses trace lines for the
       cross reference lines that are inserted in a message when a response to
       it is received; setting DisplayTrace off will also inhibit display of
       these lines.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                      TRACE OPTION                          6-42
       
 
 
       ______________________       TYPE PRIVILEGED OPTION
 
 
       SYNTAX:
 
              { AC[KNOWLEDGMENT]   }
              { AN[SWER]           }
       TYPE : { D[ELIVERY]         }
              { E[RROR]            }
              { RR[ACKNOWLEDGMENT] }
 
 
       DESCRIPTION:
 
       This option identifies the message as a response to a message that was
       previously sent.  It sets the corresponding status flag in the CP-6
       message header, so that the message will be shown as being a response of
       the specified type when it is listed by CP-6 MAIL.
 
       The Type option is most useful when specified in conjunction with the
       ReferenceMessageID privileged option.  If that option identifies a
       message that is in the recipient's mailbox, MAILMAN will add a trace
       line to that message to inform the user that a response has been made.
 
       The following response message types are supported:
 
       ACKNOWLEDGMENT      The message is an explicit acknowledgment of a
                           message sent by the recipient.  For compatibility
                           with CP-6 MAIL, the Subject of the message should be
                           the same as that of the original message, and the
                           ReferenceMessageID field should contain the original
                           MessageID.  The body should contain a single line
                           saying that this message is an acknowledgment.  If
                           the recipient's folder (or FileCopy folder) contains
                           a message with the referenced ID, a trace line is
                           added to that message when this message is delivered
                           to note the acknowledgment.  If no such trace line
                           can be added, or if the Combine profile option is
                           not set for the folder, the message is also
                           delivered normally, but will be flagged as an ack
                           when it is listed.
 
       ANSWER              The message is an answer to one that was previously
                           sent by the recipient.  For compatibility with CP-6
                           MAIL, the Reference field should contain the Subject
                           of the original message, and the ReferenceMessageID
                           should be the original MessageID.  If the
                           recipient's folder (or FileCopy folder) contains a
                           message with the referenced ID, a trace line is
                           added to that message when this one is delivered to
                           note that it has been answered.  The message is also
                           delivered normally, marked so that it will be
                           flagged as an ans when it is listed.
 
 
 
 
 
       SRB_MAIL                 TYPE PRIVILEGED OPTION                     6-43
                           
 
 
       DELIVERY            The message is a delivery receipt for a message sent
                           by the recipient.  For compatibility with CP-6, all
                           header fields should be identical to the ones from
                           the original message, except that the
                           DeliveryReceipt and ReturnReceipt options should be
                           omitted, and the ReferenceMessageID field set to the
                           MessageID of the original.  The body should contain
                           one or more lines, each identifying a recipient of
                           the original message to whom it has been delivered.
                           If a copy of the message with the referenced ID
                           exists in the folder this message is delivered to
                           (or in its FileCopy folder), all body lines are
                           added as trace lines to that message.  If no message
                           can be found to add trace lines to, or if the
                           Combine profile option is not set, the delivery
                           receipt is also delivered as a normal message,
                           flagged to be marked as a dlv message when it is
                           listed.
 
       ERROR               This an error response to a message sent by the
                           recipient.  Error messages are generated by the mail
                           system to inform a user of undeliverable mail.  For
                           compatibility with CP-6 MAIL, the message should
                           contain the same header fields as the original,
                           except that the original MessageID should be moved
                           to the ReferenceMessageID field.  The body should
                           contain one or more lines describing why the message
                           could not be delivered.  If a copy of the message
                           with the referenced ID exists in the folder where
                           this message is delivered (or in its FileCopy
                           folder), all body lines are added as trace lines to
                           that message.  If no message can be found to add
                           trace lines to, or if the Combine profile option is
                           not set, the message is also delivered as a normal
                           message, flagged to be marked with err when it is
                           listed.
 
       RRACKNOWLEDGMENT    The message is an return receipt for a message sent
                           by the recipient.  A return receipt is similar to an
                           acknowledgment, except that it is sent automatically
                           by the mail system when the recipient displays the
                           message.  For compatibility with CP-6 MAIL, the
                           Subject of the message should be the same as that of
                           the original message, and the ReferenceMessageID
                           field should contain the original MessageID.  The
                           body should contain a single line saying that this
                           message is an return receipt.  If the folder this
                           message is delivered to (or FileCopy folder)
                           contains a message with the referenced ID, delivery
                           of this message adds a trace line to that one to
 
 
 
 
 
 
 
 
       SRB_MAIL                 TYPE PRIVILEGED OPTION                     6-44
                           
 
 
                           note the receipt.  If no such trace line can be
                           added, or if the Combine profile option is not set
                           for the folder, the message is also delivered
                           normally, but will be flagged as an rr when it is
                           listed.
 
 
 
 
       _______________________________       FILE TRANSFER TO EXTERNAL NODES
 
 
       The MOVE program can move files to external nodes as well as other CP-6
       nodes.  This facility operates an a manner similar to external mail
       gateways.  The site must provide a gateway file sender program to
       connect to the external network and actually transmit the files.  This
       processing required of this program is analogous to that of a mail
       gateway sender program; both functions could even be performed by the
       same program.  Files can only be beamed to external nodes in the current
       (B06) release; sucks and lateral arabesques are not yet supported.
 
       When an external node is the destination, the CP-6 file transport
       facility materializes the file in the external node account in much the
       same way as it does for mail folders to an external node.  It creates a
       move packet in the local :MOVE account, which SCOTTY processes to create
       a file in the external account.  As is the case for mail delivery,
       SCOTTY impersonates the :MAIL,500ATOB logon for purposes of creating the
       file, so the external gateway account must grant :MAIL access to the
       account or else the files will disappear.
 
       There are two differences between files transferred to an external
       account by MOVE and message files put there by MAILMAN.  First, the
       names of files transferred to the gateway by MOVE are of the form:
 
           MOVEnnnnnnnnsitename
 
       where nnnnnnnn is the lo-order digits of the UTS when the transfer was
       initiated, and sitename is the node where the transfer originated.  In
       addition, the original MOVE parameters (destination file name,
       authorization and options) are stored in the PROCATTR (code 13) FIT
       field.  Except for the replacement of the original PROCATTR FIT field,
       if any, the file appears in its original form (e.g., keyed, random,
       indexed, etc.), with other FIT fields that are normally visible left
       intact.
 
       The MOVE information in the PROCATTR FIT field consists of a number of
       80 byte strings, or "cards".  The format of the cards is defined in the
       VM_OPTS_M macro file.  The OPTS structure defined in that file is
       designed to hold all possible cards in they order they would appear if
       every one was used.  However, only those cards relevant to the operation
       being performed are actually present in the PROCATTR field.  Any card
       that would be all blank in the OPTS structure is omitted.
 
 
 
 
 
 
       SRB_MAIL             FILE TRANSFER TO EXTERNAL NODES                6-45
       
 
 
       The following table describes the possible cards and summarizes the
       information they contain.
 
 
 
 
         STRUCTURE     DESCRIPTION
 
 
         OPTS.INP
 
                       Provides information about the local site.
 
 
             card 1
 
                       The CMD through NODE subfields provide parameters for a
                       suck operation.  This card is never present for a beam
                       operation.
 
 
             card 2
 
                       The L and FID subfields give the name of the file at the
                       local node.  This card is always present.  This
                       information is intended for use in mail messages sent to
                       indicate that the file was successfully transmitted (or
                       not).  The L byte is biased by ASCBIN('/') to ensure
                       that it is a printable ASCII character.
 
 
         OPTS.OUT
 
                       Provides information about the file at the other node.
 
 
             card 3
 
                       The CMD through NODE subfields provide parameters for a
                       beam operation.  This card is always present.
 
 
             card 4
 
                       The L and FID subfields give the name of the file at the
                       other node.  This is the (fully qualified) name of the
                       file to be materialized on the receiving system.  The
                       L byte is biased by ASCBIN('/') to ensure that it is a
                       printable ASCII character.
 
 
 
 
 
 
 
 
 
       SRB_MAIL             FILE TRANSFER TO EXTERNAL NODES                6-46
                       
 
 
       STRUCTURE     DESCRIPTION
 
 
         OPTS.MAILSNDR
 
                       Provides information needed to return mail to the sender
                       informing him of the outcome of the operation.  Present
                       only of the MTS option was specified on the MOVE
                       command.
 
 
             card 5
 
                       If present, the first 5 bytes of this card (CMD and WHO
                       subfields) contains MAILI and the last 8 bytes contains
                       the name of the node where the sender's mailbox resides.
 
 
             card 6
 
                       The L and FID subfields contain the mail address of the
                       sender.  This can be either an external or registered
                       CP-6 mail address or a mailbox fid of the form
                       ":MAIL_folder.account".
 
 
         OPTS.MAILRCVR
 
                       Provides information needed to return mail to the
                       receiver informing him of the outcome of the operation.
                       Present only of the MTR option was specified on the MOVE
                       command.
 
 
             card 7
 
                       If present, the first 5 bytes of this card (CMD and WHO
                       subfields) contains MAILR and the last 8 bytes contains
                       the name of the node where the receiver's mailbox
                       resides.
 
 
             card 8
 
                       The L and FID subfields contain the mail address of the
                       receiver.  This can be either an external or registered
                       CP-6 mail address or a mailbox fid of the form
                       ":MAIL_folder.account".
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL             FILE TRANSFER TO EXTERNAL NODES                6-47
                       
 
 
       STRUCTURE     DESCRIPTION
 
 
         OPTS.MAILINIT
 
                       Provides information needed to return mail to the
                       initiator of the move operation informing him of the
                       outcome of the operation.  Always present unless the
                       NMTI option was specified on the MOVE command.
 
 
             card 9
 
                       If present, the first 5 bytes of this card (CMD and WHO
                       subfields) contains MAILI and the last 8 bytes contains
                       the name of the node where the initiator's mailbox
                       resides.
 
 
             card 10
 
                       The L and FID subfields contain the mail address of the
                       initiator.  This can be either an external or registered
                       CP-6 mail address or a mailbox fid of the form
                       ":MAIL_folder.account".
 
 
         OPTS.OPTSRECS
 
                       Provides information about other options specified on
                       the MOVE command.  There is one card per option,
                       appearing in the order the options were originally
                       specified.
 
                       All of these cards contain OPTS in the first 4 bytes
                       (CMD subfield).  The second 4 bytes (SUB subfield)
                       contain either DATE, RECS, or CHAR, indicating whether
                       the OPTSDATE, OPTSRECS, or OPTSCHAR macro in VW_OPTS_M
                       should be used to map their contents.
 
 
       The following is an example of the contents of a file's PROCATTR entry
       in its FIT when it has been moved into an external node account.
 
 
        !MOVE INPUTFILE TO '/destination/file/name.tag' @EXTSYS (('Logon.Extsys'))
         MOVE B06 here
         ..Sending INPUTFILE.XXXXXXXX to '/destination/file/name.tag'@EXTSYS.
         ..Intrasystem transport file has been created.
         ..Mail will return in :MAIL_CENTRAL.XXXXXXXX.
        !APL APLTOOLS.X
         APL E00
         APLTOOLS SAVED 21:15 JUL 08 '94
 
 
 
 
 
       SRB_MAIL             FILE TRANSFER TO EXTERNAL NODES                6-48
       
 
 
              +Z_'' $QFLIB 'MOVE?.XXXXXXXX'
        MOVE29802976L66A.XXXXXXXX
        MOVE30102362L66A.XXXXXXXX
 
              Z[1;] $QFOPEN 1
 
              FIT 1
 
        Enter Fparam Number: 13
         ***** Processor Attribute Information ***** 400 bytes
             File: INPUTFILE.XXXXXXXX
        Output Cmd: BEAM
             Logon: 'Logon.Extsys'
               How: To
               Kin: No
              DDNF: No
              Node: EXTSYS
              File: '/destination/file/name.tag'
        *  Mail to: Initiator
              Node: L66A
           Mailbox: :MAIL_CENTRAL.XXXXXXXX
 
        0000 101111116120 125124106111 114105056130 130130130130 *AINPUTFILE.XXXXX*
        0004 130130130040 040040040040 040040040040 040040040040 *XXX             *
        0010 040040040040 040040040040 040040040040 040040040040 *                *
        0014 040040040040 040040040040 040040040040 040040040040 *                *
        0020 040040040040 040040040040 040040040040 040040040040 *                *
        0024 102105101115 047114157147 157156056106 130124123131 *BEAM'Logon.Extsy*
        0030 123047040040 040040040040 040040040040 040040040040 *s'              *
        0034 040040040040 040040040040 040040040040 040040040040 *                *
        0040 040040040040 040040040040 040040040040 040040040040 *                *
        0044 040040040040 040040040040 105130124123 131123040040 *        EXTSYS  *
        0050 113047057144 145163164151 156141164151 157156057146 *K'/destination/f*
        0054 151154145057 156141155145 056164141147 047040040040 *ile/name.tag'   *
        0060 040040040040 040040040040 040040040040 040040040040 *                *
        0064 040040040040 040040040040 040040040040 040040040040 *                *
        0070 040040040040 040040040040 040040040040 040040040040 *                *
        0074 115101111114 111040040040 040040040040 040040040040 *MAILI           *
        0100 040040040040 040040040040 040040040040 040040040040 *                *
        0104 040040040040 040040040040 040040040040 040040040040 *                *
        0110 040040040040 040040040040 040040040040 040040040040 *                *
        0114 040040040040 040040040040 114066066101 040040040040 *        L66A    *
        0120 103072115101 111114137103 105116124122 101114056130 *C:MAIL_CENTRAL.X*
        0124 130130130130 130130130040 040040040040 040040040040 *XXXXXXX         *
        0130 040040040040 040040040040 040040040040 040040040040 *                *
        0134 040040040040 040040040040 040040040040 040040040040 *                *
        0140 040040040040 040040040040 040040040040 040040040040 *                *
 
        Enter Fparam Number: END
 
              )END
 
 
 
 
 
 
 
       SRB_MAIL             FILE TRANSFER TO EXTERNAL NODES                6-49
       
 
 
       In this display, the fields OPTS.MAILSNDR and OPTS.MAILRCVR are not
       present in the FIT, but the field OPTS.MAILINIT does appear, indicating
       the mail is to be sent back to the initiator of the move.  It is the
       responsibility of the gateway program to arrange for the delivery of the
       mail messages that SCOTTY would send if the file were transferred to a
       CP-6 node.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL             FILE TRANSFER TO EXTERNAL NODES                6-50
       
 
 
 
 
 
                                                                               
 
 
                                                                          INDEX
 
 
 
 
 
       Note: Index references indicate the page on which the paragraph
       containing the index term actually ends.  Should the paragraph straddle
       two pages, the actual indexed term might be on the first page, while the
       index reference is to the second page.
 
 
       A
 
         ADDRESS RECORDS - 6-19
 
 
       B
 
         BINARY ENCLOSURES - 6-32
 
 
       C
 
         CHANGES FROM B05 - 3-1
         COMPONENT PROGRAMS - 1-3
         CREATING A REGISTERED LOCAL ENVIRONMENT - 5-8
         CREATING AN EXTERNAL ENVIRONMENT - 5-17
         CREATING AN INTERSYSTEM ENVIRONMENT - 5-12
         CREATING AN UNREGISTERED LOCAL ENVIRONMENT - 5-7
 
 
       D
 
         DATE PRIVILEGED OPTION - 6-37
         DEFINING A MAIL ENVIRONMENT - 5-4
         DEGREES OF CONNECTIVITY - 5-6
         DIAGNOSTIC MESSAGES - 5-22
 
 
       E
 
         ENHANCEMENTS IN B06 - 3-1
         EXTERNAL ADDRESSING - 6-7
         EXTERNAL MESSAGE FLOW - 6-6
 
 
 
 
 
 
 
       SRB_MAIL                          Index                              i-1
       
 
 
       F
 
         FILE TRANSFER FACILITY - 1-2
         FILE TRANSFER TO EXTERNAL NODES - 6-45
         FROM PRIVILEGED OPTION - 6-38
 
 
       G
 
         GATEWAY FACILITIES IN SEND - 6-35
         GATEWAY PROGRAMS - 6-1
 
 
       I
 
         INSTALLING MULTILINGUAL MAIL - 5-21
         INTERSYSTEM BLIND COPY PRIVILEGED OPTION - 6-38
         INTERSYSTEM COPY PRIVILEGED OPTION - 6-39
         INTERSYSTEM MAIL - 1-2
         INTERSYSTEM MESSAGE FLOW - 6-4
         INTERSYSTEM TO PRIVILEGED OPTION - 6-39
         INVOCATION COMMAND OPTIONS - 6-35
 
 
       L
 
         LOCAL MESSAGE FLOW - 6-2
 
 
       M
 
         MAIL - 1-3
         MAIL CONFIGURATIONS - 5-5
         MAIL MESSAGE FLOW - 6-2
         MAIL MESSAGE FOLDERS - 6-9
         MAIL UPDATE TAPE - 5-1
         MAILMAN - 1-4
         MESSAGE BODY RECORDS - 6-27
         MESSAGE HEADER RECORD - 6-11
         MESSAGE ID PRIVILEGED OPTION - 6-40
         MESSAGE SOURCE FILE OPTIONS - 6-36
         MOVE - 1-4
         MULTILINGUAL MAIL - 1-3
 
 
       N
 
         NODEATER - 1-4
 
 
       O
 
         OVERVIEW - 1-1
 
 
 
 
 
       SRB_MAIL                          Index                              i-2
       
 
 
       P
 
         PURPOSE - 1-1
 
 
       R
 
         RECORD KEYS - 6-9
         REFERENCE MESSAGE ID PRIVILEGED OPTION - 6-41
         REGISTERED AND UNREGISTERED SYSTEMS - 5-5
         RELEASE CONTENT - 2-1
 
 
       S
 
         SCOTTY - 1-4
         SEND - 1-3
         SITE INFO PRIVILEGED OPTION - 6-41
         SITE INFORMATION RECORD - 6-17
         SPECIAL PURPOSE MESSAGES - 5-22
         STAR FIXES - 3-1
         SUPPORTING DOCUMENTATION - 2-2
 
 
       T
 
         TRACE OPTION - 6-42
         TRANSLATING THE ERROR MESSAGE FILE - 5-21
         TRANSLATING THE PARSE NODES - 5-24
         TROUBLESHOOTING GUIDE - 5-19
         TYPE PRIVILEGED OPTION - 6-43
 
 
       U
 
         USER REGISTRATION - 1-2
 
 
       V
 
         VM_ADDTYPES EQUATES - 6-22
         VM_ADD_HEAD STRUCTURE - 6-21
         VM_BODYKEY STRUCTURE - 6-28
         VM_BODYREC STRUCTURE - 6-29
         VM_BODYTYPES EQUATES - 6-29
         VM_ENCLKEY STRUCTURE - 6-33
         VM_ENCLOS STRUCTURE - 6-34
         VM_HEADER STRUCTURE - 6-12
         VM_INFOKEY STRUCTURE - 6-10
 
 
 
 
 
 
 
 
 
       SRB_MAIL                          Index                              i-3
            
 
 
         VM_KEYTYPES EQUATES - 6-10
         VM_RADDRESS STRUCTURE - 6-22
         VM_SITE STRUCTURE - 6-18
         VM_SITEKEY STRUCTURE - 6-17
         VM_UADDRESS STRUCTURE - 6-24
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       SRB_MAIL                          Index                              i-4

