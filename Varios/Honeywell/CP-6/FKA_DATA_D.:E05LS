VERSION E05

PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:1    
        1        1        /*M* FKA_DATA_D - Data for ALTKEY */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        FKA_DATA_D: PROC;
        8        8        /*   Indicates whether this a result of an M$CLOSE, or a user
        9        9             invoking ALTKEY. */
       10       10    1   DCL FKA_MON BIT(1) STATIC SYMDEF;
       11       11        /* Because duplicates may be found during the close, this remembers
       12       12           whether or not UNIQUE is true. */
       13       13    1   DCL FKA_UNIQUE(0:100) BIT(1) UNAL STATIC SYMDEF INIT('0'B*0);
       14       14        /* Pointer to altkey information */
       15       15    1   DCL FKA_ALTKEYS$ PTR STATIC SYMDEF;
       16       16        /* Pointer to RECFIELD information. */
       17       17    1   DCL FKA_RECFIELD$ PTR STATIC SYMDEF;
       18       18        /* FIELD_START information */
       19       19    1   DCL FKA_START$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_FIELD_START_DATA));
       20       20    1   DCL FKA_FIELD_START_DATA(0:511) UBIN STATIC SYMDEF INIT(0*0);
       21       21        /* IREL information */
       22       22    1   DCL FKA_IRKEYS$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_IRKEYS_DATA));
       23       23    1   DCL FKA_IRKEYS_DATA(0:1023) SBIN STATIC SYMDEF INIT(0*0);
       24       24        /* KFIELD information */
       25       25    1   DCL FKA_KFIELD$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_KFIELD_DATA));
       26       26    1   DCL FKA_KFIELD_DATA(0:1023) UBIN STATIC SYMDEF INIT(0*0);
       27       27        /* */
       28       28    1   DCL FKA_CODE19$ PTR STATIC SYMDEF;
       29       29        /* */
       30       30    1   DCL FKA_CODE20$ PTR STATIC SYMDEF;
       31       31        /* Block number of current index granule */
       32       32    1   DCL FKA_INDEX_GRAN SBIN STATIC SYMDEF;
       33       33        /* Block number of current data granule */
       34       34    1   DCL FKA_DATA_GRAN SBIN STATIC SYMDEF;
       35       35        /* Pointer to key table */
       36       36    1   DCL FKA_KTPTR$ PTR STATIC SYMDEF;
       37       37        /* Current value for BOUND */
PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:2    
       38       38    1   DCL FKA_BOUND SBIN STATIC SYMDEF;
       39       39        /* Pointer to DCB for file being rebuilt */
       40       40    1   DCL FKA_DCB$ PTR STATIC SYMDEF;
       41       41        /* Number of alternate indexes */
       42       42    1   DCL FKA_NUMKEYS SBIN STATIC SYMDEF;
       43       43        /* Record size being passed to SORT */
       44       44    1   DCL FKA_RECSIZE SBIN STATIC SYMDEF;
       45       45        /* Size of the key for current index */
       46       46    1   DCL FKA_KEYSIZE SBIN STATIC SYMDEF;
       47       47        /* Duplicate keys were found */
       48       48    1   DCL FKA_DUPS BIT(1) STATIC SYMDEF INIT('0'B);
       49       49        /* Static buffer for current index granule */
       50       50    1   DCL FKA_INDEX_BUF CHAR(4096) STATIC SYMDEF;
       51       51        /* */
       52       52    1   DCL FKA_INDEX_BUF$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_INDEX_BUF));
       53       53        /* Static buffer for current data granule */
       54       54    1   DCL FKA_DATA_BUF CHAR(4096) STATIC SYMDEF;
       55       55        /* */
       56       56    1   DCL FKA_DATA_BUF$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_DATA_BUF));
       57       57        /* We need to remember whether SORT$STATS was set when ALTKEY
       58       58           starts, because we need to set it to "SILENT" to keep SORT
       59       59           from printing statistics */
       60       60    1   DCL FKA_CMDVAR_EXIST BIT(1) STATIC SYMDEF;
       61       61        /* */
       62       62    1   DCL FKA_CMDVAR CHAR(512) STATIC SYMDEF;
       63       63        /* Indicates that file open was sucessful */
       64       64    1   DCL FKA_FILE_OPEN BIT(1) STATIC SYMDEF;
       65       65        /* */
       66       66    1   DCL FKA_CMDVAR_SET BIT(1) STATIC SYMDEF;
       67       67        /* Contains B$JIT.ERR as it was in M$CLOSE just prior to the M$MLINK
       68       68           to ALTKEY, so we don't lose previous errors.                   */
       69       69    1   DCL FKA_M$CLOSE_ERR BIT(36) ALIGNED STATIC SYMDEF;
       70       70        /* Indicate whether FKA$CLOSE has been called */
       71       71    1   DCL FKA_CLOSE_DONE BIT(1) STATIC SYMDEF;
       72       72        /* */
       73       73    1   END;

PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:3    
      No diagnostics issued in procedure FKA_DATA_D.

   No code generated for procedure FKA_DATA_D .
   Procedure FKA_DATA_D requires 4 words of local(AUTO) storage.

    No errors detected in file FKA_DATA_D.:E05TSI    .

PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:4    

 Object Unit name= FKA_DATA_D                                 File name= FKA_DATA_D.:E05TOU
 UTS= JUL 29 '97 15:33:35.76 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none  4758  11226  FKA_DATA_D
    1  RoData even  UTS      5      5  FKA_DATA_D
    2   Proc  even  none     0      0  FKA_DATA_D

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes     ~proc       0  FKA_DATA_D
PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:5    

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  FKA_MON                            0      1  FKA_UNIQUE
    0      4  FKA_ALTKEYS$                       0      5  FKA_RECFIELD$
    1      0  FKA_START$                         0      6  FKA_FIELD_START_DATA
    1      1  FKA_IRKEYS$                        0   1006  FKA_IRKEYS_DATA
    1      2  FKA_KFIELD$                        0   3006  FKA_KFIELD_DATA
    0   5006  FKA_CODE19$                        0   5007  FKA_CODE20$
    0   5010  FKA_INDEX_GRAN                     0   5011  FKA_DATA_GRAN
    0   5012  FKA_KTPTR$                         0   5013  FKA_BOUND
    0   5014  FKA_DCB$                           0   5015  FKA_NUMKEYS
    0   5016  FKA_RECSIZE                        0   5017  FKA_KEYSIZE
    0   5020  FKA_DUPS                           0   5021  FKA_INDEX_BUF
    1      3  FKA_INDEX_BUF$                     0   7021  FKA_DATA_BUF
    1      4  FKA_DATA_BUF$                      0  11021  FKA_CMDVAR_EXIST
    0  11022  FKA_CMDVAR                         0  11222  FKA_FILE_OPEN
    0  11223  FKA_CMDVAR_SET                     0  11224  FKA_M$CLOSE_ERR
    0  11225  FKA_CLOSE_DONE

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:6    

        1        1        /*M* FKA_DATA_D - Data for ALTKEY */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        FKA_DATA_D: PROC;
        8        8        /*   Indicates whether this a result of an M$CLOSE, or a user
        9        9             invoking ALTKEY. */
       10       10    1   DCL FKA_MON BIT(1) STATIC SYMDEF;
       11       11        /* Because duplicates may be found during the close, this remembers
       12       12           whether or not UNIQUE is true. */
       13       13    1   DCL FKA_UNIQUE(0:100) BIT(1) UNAL STATIC SYMDEF INIT('0'B*0);
       14       14        /* Pointer to altkey information */
       15       15    1   DCL FKA_ALTKEYS$ PTR STATIC SYMDEF;
       16       16        /* Pointer to RECFIELD information. */
       17       17    1   DCL FKA_RECFIELD$ PTR STATIC SYMDEF;
       18       18        /* FIELD_START information */
       19       19    1   DCL FKA_START$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_FIELD_START_DATA));
       20       20    1   DCL FKA_FIELD_START_DATA(0:511) UBIN STATIC SYMDEF INIT(0*0);
       21       21        /* IREL information */
       22       22    1   DCL FKA_IRKEYS$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_IRKEYS_DATA));
       23       23    1   DCL FKA_IRKEYS_DATA(0:1023) SBIN STATIC SYMDEF INIT(0*0);
       24       24        /* KFIELD information */
       25       25    1   DCL FKA_KFIELD$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_KFIELD_DATA));
       26       26    1   DCL FKA_KFIELD_DATA(0:1023) UBIN STATIC SYMDEF INIT(0*0);
       27       27        /* */
       28       28    1   DCL FKA_CODE19$ PTR STATIC SYMDEF;
       29       29        /* */
       30       30    1   DCL FKA_CODE20$ PTR STATIC SYMDEF;
       31       31        /* Block number of current index granule */
       32       32    1   DCL FKA_INDEX_GRAN SBIN STATIC SYMDEF;
       33       33        /* Block number of current data granule */
       34       34    1   DCL FKA_DATA_GRAN SBIN STATIC SYMDEF;
       35       35        /* Pointer to key table */
       36       36    1   DCL FKA_KTPTR$ PTR STATIC SYMDEF;
       37       37        /* Current value for BOUND */
PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:7    
       38       38    1   DCL FKA_BOUND SBIN STATIC SYMDEF;
       39       39        /* Pointer to DCB for file being rebuilt */
       40       40    1   DCL FKA_DCB$ PTR STATIC SYMDEF;
       41       41        /* Number of alternate indexes */
       42       42    1   DCL FKA_NUMKEYS SBIN STATIC SYMDEF;
       43       43        /* Record size being passed to SORT */
       44       44    1   DCL FKA_RECSIZE SBIN STATIC SYMDEF;
       45       45        /* Size of the key for current index */
       46       46    1   DCL FKA_KEYSIZE SBIN STATIC SYMDEF;
       47       47        /* Duplicate keys were found */
       48       48    1   DCL FKA_DUPS BIT(1) STATIC SYMDEF INIT('0'B);
       49       49        /* Static buffer for current index granule */
       50       50    1   DCL FKA_INDEX_BUF CHAR(4096) STATIC SYMDEF;
       51       51        /* */
       52       52    1   DCL FKA_INDEX_BUF$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_INDEX_BUF));
       53       53        /* Static buffer for current data granule */
       54       54    1   DCL FKA_DATA_BUF CHAR(4096) STATIC SYMDEF;
       55       55        /* */
       56       56    1   DCL FKA_DATA_BUF$ PTR CONSTANT SYMDEF INIT(ADDR(FKA_DATA_BUF));
       57       57        /* We need to remember whether SORT$STATS was set when ALTKEY
       58       58           starts, because we need to set it to "SILENT" to keep SORT
       59       59           from printing statistics */
       60       60    1   DCL FKA_CMDVAR_EXIST BIT(1) STATIC SYMDEF;
       61       61        /* */
       62       62    1   DCL FKA_CMDVAR CHAR(512) STATIC SYMDEF;
       63       63        /* Indicates that file open was sucessful */
       64       64    1   DCL FKA_FILE_OPEN BIT(1) STATIC SYMDEF;
       65       65        /* */
       66       66    1   DCL FKA_CMDVAR_SET BIT(1) STATIC SYMDEF;
       67       67        /* Contains B$JIT.ERR as it was in M$CLOSE just prior to the M$MLINK
       68       68           to ALTKEY, so we don't lose previous errors.                   */
       69       69    1   DCL FKA_M$CLOSE_ERR BIT(36) ALIGNED STATIC SYMDEF;
       70       70        /* Indicate whether FKA$CLOSE has been called */
       71       71    1   DCL FKA_CLOSE_DONE BIT(1) STATIC SYMDEF;
       72       72        /* */
       73       73    1   END;

PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:8    
      No diagnostics issued in procedure FKA_DATA_D.
PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:9    

 **** Variables and constants ****

  ****  Section 000  Data  FKA_DATA_D

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

  7021-0-0/c CHAR(4096)  r     1 FKA_DATA_BUF
     6-0-0/w UBIN        r     1 FKA_FIELD_START_DATA(0:511)
  5021-0-0/c CHAR(4096)  r     1 FKA_INDEX_BUF
  1006-0-0/w SBIN        r     1 FKA_IRKEYS_DATA(0:1023)
  3006-0-0/w UBIN        r     1 FKA_KFIELD_DATA(0:1023)


   No code generated for procedure FKA_DATA_D .
   Procedure FKA_DATA_D requires 4 words of local(AUTO) storage.

    No errors detected in file FKA_DATA_D.:E05TSI    .
PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:10   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FKA_DATA_D File=FKA_DATA_D.:E05TSI                            TUE 07/29/97 15:33 Page:11   
          MINI XREF LISTING

FKA_DATA_BUF
        54**DCL        56--DCLINIT
FKA_FIELD_START_DATA
        20**DCL        19--DCLINIT
FKA_INDEX_BUF
        50**DCL        52--DCLINIT
FKA_IRKEYS_DATA
        23**DCL        22--DCLINIT
FKA_KFIELD_DATA
        26**DCL        25--DCLINIT
