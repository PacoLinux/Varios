/*M* GRANULE - a program to summarize granule usage */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
GRANULE: PROC MAIN;
DCL X UBIN;
DCL Y UBIN;
DCL Z$ PTR;
DCL CHAR1 CHAR(1) BASED;
DCL INPUT CHAR(256) STATIC;
DCL OUTPUT CHAR(75) STATIC;
DCL PACKNAME CHAR(60);
DCL HPSN CHAR(8);
DCL MODE BIT(1);
DCL GRANS_INUSE_SYSTEM UBIN;
DCL GRANS_ACC_SYSTEM UBIN;
DCL GRANS_MODIFIED_SYSTEM UBIN;
DCL GPACK_I UBIN;
DCL GPACK_A UBIN;
DCL GPACK_M UBIN;
DCL PARSE_WORK CHAR(1024) STATIC;
DCL COM UBIN SYMREF;
DCL T CHAR(11) STATIC;                  /* time buffer                        */
DCL DATE CHAR(8) STATIC;
DCL TIME UBIN STATIC;
DCL X$PARSE ENTRY(1) ALTRET;
DCL GRANULE_REPORT ENTRY(6);
DCL REPORT ENTRY(6);
DCL M$ZZ DCB;
DCL M$LO DCB;
 
%INCLUDE B$JIT;
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
%F$DCB;
DCL B$JIT$ PTR SYMREF;
 
%P_PCB(T=INPUT,
       R=COM,
       W=PARSE_WORK,
       WSZ=256,
       N#=256);
 
%PARSE$SYM(NAME=OUTSYM,STCLASS=BASED);
 
%PARSE$OUT(NAME=OUTBLK,STCLASS=BASED);
 
%FPT_READ(FPTN=READ,BUF=INPUT,DCB=M$ZZ);
%FPT_TIME(FPTN=TIMER,DATE=DATE,TIME=T,SOURCE=LOCAL,DEST=UTS,TSTAMP=TIME);
 
 
%FPT_WRITE(FPTN=WRITE_LO,DCB=M$LO,BUF=OUTPUT,VFC=YES);
 
%FPT_OPEN(FPTN=OPEN,
DCB=M$LO,
ORG=UR);
 
DCL FTX_RPTERR ENTRY;
 
        CALL M$OPEN(OPEN) WHENALTRETURN DO;
           CALL FTX_RPTERR;
           END;
 
START:  INPUT=' ';
 
        CALL M$READ(READ) WHENALTRETURN DO;
           CALL FTX_RPTERR;
           END;
        DATE=SUBSTR(INPUT,0,8);
        T=SUBSTR(INPUT,9,11);
        OUTPUT='p';
        CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
           CALL FTX_RPTERR;
           END;
        OUTPUT='A';
        CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
           CALL FTX_RPTERR;
           END;
        CALL CONCAT(OUTPUT,'AGranule Report, of File Dates > ',SUBSTR(INPUT,0,20));
        CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
           CALL FTX_RPTERR;
           END;
        CALL M$TIME(TIMER);
        GRANS_INUSE_SYSTEM = 0;
        GRANS_ACC_SYSTEM = 0;
        GRANS_MODIFIED_SYSTEM = 0;
 
        INPUT=' ';
        INPUT=B$JIT.CCBUF;
 
        X=0;
        MODE='1'B;
        Z$=PINCRC(ADDR(INPUT),X);
        DO WHILE(Z$->CHAR1~=' ');
 
           IF Z$->CHAR1='D' THEN MODE='0'B;
           Z$->CHAR1=' ';
           X=X+1;
           Z$=PINCRC(ADDR(INPUT),X);
           END;
 
        PACKNAME=B$JIT.FACCN;           /* assume direcory account            */
 
        HPSN=' ';
 
        IF INPUT=' ' THEN GOTO GOON;
 
        CALL X$PARSE(P_PCB) ALTRET(OOPS);
 
 
        IF P_PCB.OUT$->OUTBLK.NSUBLKS=0 THEN GOTO GOON;
 
        ELSE DO;
 
           X=0;
           Y=P_PCB.OUT$->OUTBLK.NSUBLKS;
           DO WHILE(X<Y);
 
              PACKNAME=P_PCB.OUT$->OUTBLK.SUBLK$(X)->OUTSYM.TEXT;
 
              IF B$JIT.ACCN =
                SUBSTR(PACKNAME,0,8)
              THEN PACKNAME=' ';
              CALL GRANULE_REPORT(PACKNAME,HPSN,TIME,GPACK_I,GPACK_A,GPACK_M);
 
              IF PACKNAME~=' ' THEN DO;
 
                 GRANS_INUSE_SYSTEM = GRANS_INUSE_SYSTEM + GPACK_I;
                 GRANS_ACC_SYSTEM = GRANS_ACC_SYSTEM + GPACK_A;
                 GRANS_MODIFIED_SYSTEM = GRANS_MODIFIED_SYSTEM + GPACK_M;
 
                 END;
 
              X=X+1;
              END;
 
           END;
        IF P_PCB.OUT$->OUTBLK.NSUBLKS>1 AND
          GRANS_ACC_SYSTEM ~=0 THEN CALL REPORT(' ','TOTAL   ',GRANS_INUSE_SYSTEM,GRANS_ACC_SYSTEM,GRANS_MODIFIED_SYSTEM,'1'B);
        CALL M$EXIT;
 
OOPS:   OUTPUT='A ----  Eh?';
        CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
           CALL FTX_RPTERR;
           END;
        CALL M$EXIT;
 
GOON:   HPSN=B$JIT.HPSN;
        CALL GRANULE_REPORT(PACKNAME,HPSN,TIME,GPACK_I,GPACK_A,GPACK_M);
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
GRANULE_REPORT: PROC (PACKNAME,HPSN,SELECT_TIME,GRANS_INUSE_PACK,GRANS_ACC_PACK,GRANS_MODIFIED_PACK);
 
 
 
DCL 1 FPARAM_AREA(0:1023) ALIGNED STATIC, /* fparam area                      */
      2 DATA# UBIN WORD INIT(0*0);
 
DCL CODEX UBIN STATIC ALIGNED;     /* contains code of a fit data section     */
 
DCL FIT$ PTR STATIC INIT(ADDR(FPARAM_AREA)); /* points to beginning of FPARAM buffer */
 
/************
 BUCKET AREA
*************/
 
DCL GRANS_INUSE_ACCT UBIN;              /* by account                         */
DCL GRANS_INUSE_PACK UBIN;              /* by disk                            */
DCL GRANS_INUSE_SYSTEM UBIN;            /* by system                          */
 
DCL GRANS_ACC_ACCT UBIN;                /* accessed by account                */
DCL GRANS_ACC_PACK UBIN;                /* by disk                            */
DCL GRANS_ACC_SYSTEM UBIN;              /* by system                          */
 
DCL GRANS_MODIFIED_ACCT UBIN;
DCL GRANS_MODIFIED_PACK UBIN;
DCL GRANS_MODIFIED_SYSTEM UBIN;
DCL MAX_GRANS_ALLC UBIN;                /* max alloced by account             */
DCL MAX_GRANS_ALLC_PACK UBIN;           /* allCed by pack                     */
DCL MAX_GRANS_ALLC_SYSTEM UBIN;         /* by system                          */
 
DCL MAX_GRANS_AVAL_ACCT UBIN;           /* max avail by account               */
DCL MAX_GRANS_AVAL_PACK UBIN;           /* max avail by disk                  */
DCL MAX_GRANS_AVAL_SYSTEM UBIN;         /* max avail by disk                  */
DCL FTX_RPTERR ENTRY;
 
%INCLUDE CP_6;
%INCLUDE B_ERRORS_C;
%INCLUDE FM$FIT;
 
%CODE03;                                /* ngval, ugrans                      */
%CODE04;                                /* dates                              */
 
/***************************************
 
 data for scanning packs, accounts
 
****************************************/
 
DCL ERRORCODE UBIN;
DCL OUTPUT CHAR(75) STATIC;
DCL FID_ASN UBIN(9) STATIC ALIGNED;
DCL FID_RES CHAR(4) STATIC;
DCL PACKNAME CHAR(60);
DCL FID_TEXT CHAR(60) STATIC;
DCL HPSN CHAR(6);
DCL M$LO DCB;
DCL M$IN1 DCB;
DCL M$IN2 DCB;
DCL TEST BIT(1) UNAL;
DCL MODE BIT(1);
 
%INCLUDE B$JIT_C;
%B$JIT0(STCLASS="BASED(B$JIT$)");
      2 * BIT(1);
DCL B$JIT$ PTR;
 
 
%FPT_EXIT(FPTN=SQUASH,STCLASS=STATIC);
%FPT_WRITE(FPTN=WRITE_LO,STCLASS=STATIC,DCB=M$LO,BUF=OUTPUT);
 
%FPT_FID(FPTN=FPT_FID,
         STCLASS=STATIC,
         ACCT=VLP_ACCT,
         ASN=FID_ASN,
         NAME=VLP_NAME,
         PASS=VLP_PASS,
         RES=FID_RES,
         RESULTS=VLR_FID,
         SN=VLP_SN,
         TEXTFID=FID_TEXT,
         WSN=VLP_WSN);
 
%FPT_OPEN(FPTN=OPEN_SCAN,
         STCLASS=STATIC,
         FUN=IN,
         DCB=M$IN1,
         FPARAM=FPARAM_AREA,
         EXIST=OLDFILE,
         ACS=SEQUEN,
         ASN=FILE,
         THISF=NO,
         TEST=YES,
         SN=VLP_SN,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         NXTF=YES,
         WSN=VLP_WSN);
 
%FPT_OPEN(FPTN=NEXTA,
         STCLASS=STATIC,
         FUN=IN,
         DCB=M$IN1,
         FPARAM=FPARAM_AREA,
         EXIST=OLDFILE,
         ACS=SEQUEN,
         ASN=FILE,
         THISF=NO,
         TEST=YES,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         NAME=VLP_NAME,
         NXTF=YES,
         NXTA=YES,
         SN=VLP_SN,
         WSN=VLP_WSN);
 
%FPT_CLOSE(FPTN=SAVE,STCLASS=STATIC);
 
%FPT_UNFID(FPTN=SCAN$UNFID,
         DCB=M$IN1,
         ACCT=VLP_ACCT,
         NAME=VLP_NAME,
         PASS=VLP_PASS,
         RES=FID_RES,
         ASN=FID_ASN,
         SN=VLP_SN,
         TEXTFID=FID_TEXT,
         WSN=VLP_WSN);
 
%VLR_FID(FPTN=VLR_FID,STCLASS=STATIC);
 
%VLP_PASS(FPTN=VLP_PASS,STCLASS=STATIC);
 
%VLP_WSN(FPTN=VLP_WSN,STCLASS=STATIC);
 
%VLP_SN(FPTN=VLP_SN,STCLASS=STATIC);
 
%VLP_NAME(FPTN=VLP_NAME,STCLASS=STATIC);
 
%VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
 
DCL DATE CHAR(10) STATIC;
 
DCL TIME CHAR(11) STATIC;
 
DCL THIS_TIME UBIN;                     /* access time of file                */
DCL SELECT_TIME UBIN;                   /* min selection time                 */
DCL MODIFIED_TIME UBIN;                 /* time file was last modified        */
 
 
%F$DCB;
 
%B$ALT;
 
%B$TCB;
 
DCL B$TCB$ PTR SYMREF;
 
/********************************
 
     ENTRY POINTS
 
*********************************/
 
DCL XSF$LOCCODE ENTRY(2) ALTRET;
DCL REPORT ENTRY(6);
 
/********************************
 
         INITIALIZATION
 
*********************************/
 
        MODE = '1'B;
        GRANS_INUSE_ACCT = 0;
        GRANS_INUSE_PACK = 0;
        GRANS_ACC_ACCT = 0;
        GRANS_ACC_PACK = 0;
        GRANS_MODIFIED_ACCT = 0;
        GRANS_MODIFIED_PACK = 0;
 
        IF PACKNAME = ' ' THEN DO;
           VLP_SN.SN#(0)=HPSN;
           CALL ACCOUNT;
           CALL REPORT(VLP_SN.SN#(0),VLP_ACCT.ACCT#,GRANS_INUSE_ACCT,GRANS_ACC_ACCT,GRANS_MODIFIED_ACCT,'1'B);
           RETURN;
           END;
 
        ELSE;
 
        FID_TEXT=PACKNAME;
        CALL M$FID(FPT_FID) WHENALTRETURN DO;
           CALL FTX_RPTERR;
           END;
 
        IF VLP_SN.SN#(0)~=' ' THEN CALL PACK; /* SCAN PACK ?                  */
 
        ELSE CALL ACCOUNT;              /* OR SCAN ACCOUNT                    */
 
        IF VLP_SN.SN#(0)=' ' THEN
           CALL REPORT(VLP_SN.SN#(0),VLP_ACCT.ACCT#,GRANS_INUSE_ACCT,GRANS_ACC_ACCT,GRANS_MODIFIED_ACCT,'1'B);
        ELSE CALL REPORT(VLP_SN.SN#(0),' ',GRANS_INUSE_PACK,GRANS_ACC_PACK,GRANS_MODIFIED_PACK,'1'B);
        RETURN;                         /* ALL DONE                           */
 
ACCOUNT: PROC;
 
                                        /*  SCAN ACCOUNT ONLY                 */
 
        GRANS_INUSE_ACCT = 0;
        GRANS_ACC_ACCT = 0;
        GRANS_MODIFIED_ACCT = 0;
        OPEN_SCAN.V.INITZ.SCRUB#='1'B;  /* SCRUB DCB                          */
        ERRORCODE=0;
 
        DO WHILE(ERRORCODE~=%E$FDEOF);      /* DO UNTIL END OF ACCT               */
 
           CALL M$OPEN(OPEN_SCAN) ALTRET(CODE); /* GET NEXT FILE              */
 
           CODEX = 4;
           CALL XSF$LOCCODE(FIT$,CODEX) ALTRET(BAD04); /* time                */
 
           THIS_TIME = FIT$->CODE04.ACCESS.TIME;
           MODIFIED_TIME = FIT$->CODE04.MODIFY.TIME;
 
           FIT$ = ADDR(FPARAM_AREA);    /* refresh FIT$                       */
 
           CODEX = 3;
           CALL XSF$LOCCODE(FIT$,CODEX) ALTRET(BAD03); /* get #'s             */
 
 
           GRANS_INUSE_ACCT=GRANS_INUSE_ACCT + FIT$->CODE03.NGAVAL +
             FIT$->CODE03.UGRANS;
 
           IF THIS_TIME > SELECT_TIME THEN
 
              GRANS_ACC_ACCT=GRANS_ACC_ACCT + FIT$->CODE03.NGAVAL+
                FIT$->CODE03.UGRANS;
 
           IF MODIFIED_TIME > SELECT_TIME THEN
 
              GRANS_MODIFIED_ACCT = GRANS_MODIFIED_ACCT + FIT$->CODE03.NGAVAL +
                FIT$->CODE03.UGRANS;
 
           FIT$ = ADDR(FPARAM_AREA);
 
           DO WHILE('0'B);
 
CODE:         ERRORCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE;
              IF ERRORCODE~=%E$FDEOF THEN CALL FTX_RPTERR;
              GOTO DOWN;
 
BAD03:        CALL M$UNFID(SCAN$UNFID);
              CALL CONCAT(OUTPUT,'*** bad 03 code: ',FID_TEXT);
              CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
                 CALL FTX_RPTERR;
                 END;
 
   /* If we get here the file is probably stowed inactive */
BAD04:;
 
 
DOWN:         END;
 
           OPEN_SCAN.V.INITZ.SCRUB#='0'B;
           END;
 
 
END;
 
PACK:   PROC;
 
/* PURPOSE IS TO SCAN A PACK FOR BAD FILES */
 
        ERRORCODE=0;
        VLP_ACCT.ACCT#=' ';
        GRANS_ACC_PACK = 0;
        GRANS_INUSE_PACK = 0;
        GRANS_MODIFIED_PACK = 0;
 
        DO WHILE(ERRORCODE~=%E$ADEOF);
 
           CALL M$OPEN(NEXTA) ALTRET(CODE);
           VLP_ACCT.ACCT# = DCBADDR(DCBNUM(M$IN1))->F$DCB.ACCT#;
           CALL ACCOUNT;
           CALL REPORT(VLP_SN.SN#(0),VLP_ACCT.ACCT#,GRANS_INUSE_ACCT,GRANS_ACC_ACCT,GRANS_MODIFIED_ACCT,MODE);
           MODE='0'B;
           GRANS_ACC_PACK = GRANS_ACC_PACK + GRANS_ACC_ACCT;
           GRANS_INUSE_PACK = GRANS_INUSE_PACK + GRANS_INUSE_ACCT;
           GRANS_MODIFIED_PACK = GRANS_MODIFIED_PACK + GRANS_MODIFIED_ACCT;
           NEXTA.ACCT_=VECTOR(NIL);
 
           DO WHILE('0'B);
CODE:         ERRORCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE;
              IF ERRORCODE=%E$FDEOF THEN NEXTA.ACCT_=VECTOR(NIL);
         /* End of packset or deleted FMA are expected errors */
        ELSE IF (ERRORCODE~=%E$ADEOF) AND (ERRORCODE~=%E$NOKEY) THEN
                   CALL FTX_RPTERR;
              END;
 
           END;
 
END;
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
REPORT: PROC(PACK,A,B,C,D,MODE);
 
%INCLUDE CP_6;
 
DCL PACK CHAR(8);
DCL A CHAR(8);
DCL B UBIN;
DCL C UBIN;
DCL D UBIN;
DCL E UBIN;
DCL MODE BIT(1);
DCL OUTPUT CHAR(80) STATIC;
DCL M$LO DCB;
 
%FPT_WRITE(FPTN=WRITE_LO,DCB=M$LO,BUF=OUTPUT,VFC=YES);
 
DCL XXX CHAR(8);
DCL FTX_RPTERR ENTRY;
 
        IF MODE='1'B THEN DO;
 
           OUTPUT='A';
           CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
              CALL FTX_RPTERR;
              END;
           SUBSTR(OUTPUT,2,8)=PACK;
           CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
              CALL FTX_RPTERR;
              END;
           OUTPUT='A';
           CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
              CALL FTX_RPTERR;
              END;
           OUTPUT='A               Inuse   Not Accessed   Modified      %Accessed      %Modified';
           CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
              CALL FTX_RPTERR;
              END;
           OUTPUT='A';
           CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
              CALL FTX_RPTERR;
              END;
 
           END;
           /* The account may have no granules in use, if so there is
              no point in generating a report */
 
           IF B = 0 THEN RETURN;
        CALL CONCAT(OUTPUT,'A',A);
        CALL FORMAT(B);
        SUBSTR(OUTPUT,12,9)=XXX;
        CALL FORMAT(B-C);
        SUBSTR(OUTPUT,23,9)=XXX;
        CALL FORMAT(D);
        SUBSTR(OUTPUT,37,9)=XXX;
        CALL FORMAT((100*C)/B);
        SUBSTR(OUTPUT,51,9)=XXX;
        CALL FORMAT((100*D)/B);
        SUBSTR(OUTPUT,65,9)=XXX;
        CALL M$WRITE(WRITE_LO) WHENALTRETURN DO;
           CALL FTX_RPTERR;
           END;
 
FORMAT: PROC(Z);
 
DCL Z UBIN;
DCL X UBIN;
 
        CALL BINCHAR(XXX,Z);
 
        DO X = 0 TO 6;
 
           IF SUBSTR(XXX,X,1)='0' THEN SUBSTR(XXX,X,1)=' ';
           ELSE RETURN;
 
           END;
END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
FTX_RPTERR: PROC;
 
%INCLUDE CP_6;
%F$DCB;
 
%B$ALT;
 
%B$TCB;
 
DCL B$TCB$ PTR SYMREF;
%FPT_ERRMSG(FPTN=ERRBUFFERMSG,
   OUTDCB1=M$DO,
   BUF=ERRBUFFER,
   CODE=ERRCODE,
   INCLCODE=NO);
 
%VLP_ERRCODE(FPTN=ERRCODE,STCLASS=STATIC SYMDEF);
DCL ERRBUFFER CHAR(120) STATIC;
DCL M$DO DCB;
/*F*     NAME: FTX_RPTERR
         PURPOSE: Report ALTRET frame error.
 ***/
 
/********************/
 
        ERRBUFFERMSG.V.DCB# = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
        ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
        ERRCODE.SEV = 4;
        CALL M$ERRMSG(ERRBUFFERMSG);
        CALL M$XXX;
 
END FTX_RPTERR;
%EJECT;
