/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WIZ$INIT: PROC(GREETING,LENGTH,PCB_PTR,PC) ALTRET;
 
/* ********************************************************************\
*                                                                      *
*   The WIZ$INIT routine provides setup functions for a generalized    *
*   processor.  It performs the following tasks:                       *
*                                                                      *
*   1.  Greet the user with GREETING of length LENGTH via M$ME,        *
*       unless LENGTH=0.                                               *
*   2.  Establish break control to WIZ$BREAK.                          *
*   3.  Opens M$SI, M$LO, and (if necessary) M$DO.                     *
*   4.  Sets flags LOEQDO if M$LO is the same device as M$DO and       *
*       SIEQLO if M$SI is the same device as M$LO.                     *
*   5.  Parses the input command from B$JIT.CCBUF using the parser     *
*       if PCB_PTR is not ADDR(NIL).                                   *
*   6.  Establishes the single character prompt, PC.                   *
*                                                                      *
*   ALTRET is taken if any errors occur; if possible, an error         *
*   message is printed prior to ALTRETing.                             *
*                                                                      *
\******************************************************************** */
 
%INCLUDE CP_6;
%INCLUDE B$JIT;
%INCLUDE XU_MACRO_C;
 
    DCL LENGTH                         UBIN;
    DCL GREETING UNAL                  CHAR(LENGTH);
    DCL PCB_PTR                        PTR;
    DCL PC UNAL                        CHAR(1);
 
%FPT_OPEN(FPTN=OPEN_LO,
          DCB=M$LO,
          FUN=CREATE,
          EXIST=OLDFILE);
%FPT_OPEN(FPTN=OPEN_SI,
          DCB=M$SI,
          FUN=IN);
%FPT_OPEN(FPTN=OPEN_DO,
          DCB=M$DO,
          FUN=CREATE,
          EXIST=OLDFILE);
%FPT_CORRES(FPTN=LOVSDO,
            DCB1=M$LO,
            DCB2=M$DO);
%FPT_CORRES(FPTN=SIVSLO,
            DCB1=M$SI,
            DCB2=M$LO);
%FPT_WRITE(FPTN=WRITE_ME,
           DCB=M$ME);
%FPT_INT(UENTRY=WIZ$BREAK);
%FPT_PROMPT;
%F$DCB(DCBN=DUMMY);
%P$PCB(STCLASS="BASED(PCB_PTR)");
 
    DCL M$ME                           DCB;
    DCL M$SI                           DCB;
    DCL M$DO                           DCB;
    DCL M$LO                           DCB;
    DCL X$PARSE                        ENTRY(1) ALTRET;
    DCL WIZ$BREAK                      ENTRY ASYNC;
    DCL WIZ$SYSERR                     ENTRY(1);
    DCL WIZ$PARSERR                    ENTRY(1);
 
    DCL LOEQDO STATIC SYMDEF           BIT(1) INIT('1'B);
    DCL SIEQLO STATIC SYMDEF           BIT(1) INIT('1'B);
    DCL BROKEN SYMREF                  UBIN;
    DCL B$JIT$ SYMREF                  PTR;
 
    IF LENGTH>0 AND B$JIT.MODE~=%M_BATCH# THEN DO;
        WRITE_ME.BUF_.BUF$=ADDR(GREETING);
        WRITE_ME.BUF_.BOUND=LENGTH-1;
        CALL M$WRITE(WRITE_ME);
    END;
    FPT_PROMPT.PROMPT_=VECTOR(PC);
    CALL M$PROMPT(FPT_PROMPT);
    CALL M$INT(FPT_INT);
    BROKEN=0;
    IF NOT DCBADDR(DCBNUM(M$LO))->DUMMY.FCD# THEN
        CALL M$OPEN(OPEN_LO) ALTRET(DISASTER);
    IF NOT DCBADDR(DCBNUM(M$SI))->DUMMY.FCD# THEN
        CALL M$OPEN(OPEN_SI) ALTRET(SIERROR);
    IF NOT DCBADDR(DCBNUM(M$DO))->DUMMY.FCD# THEN
        CALL M$OPEN(OPEN_DO) ALTRET(DOERROR);
    CALL M$CORRES(LOVSDO) ALTRET(LOISDO);
    LOEQDO='0'B;
 
LOISDO:
    CALL M$CORRES(SIVSLO) ALTRET(SIISLO);
    SIEQLO='0'B;
 
SIISLO:
    IF PCB_PTR~=ADDR(NIL) THEN DO;
        P$PCB.TEXT$=ADDR(B$JIT.CCBUF);
        P$PCB.NCHARS=B$JIT.CCARS;
        CALL X$PARSE(P$PCB) ALTRET(PARSE_ERROR);
    END;
    RETURN;
 
SIERROR:
    CALL WIZ$SYSERR(DCBNUM(M$SI));
    ALTRETURN;
 
DOERROR:
    CALL WIZ$SYSERR(DCBNUM(M$DO));
    ALTRETURN;
 
PARSE_ERROR:
    CALL WIZ$PARSERR(PCB_PTR);
    ALTRETURN;
 
DISASTER:
    ALTRETURN;
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WIZ$BREAK: PROC ASYNC;
 
/* ********************************************************************\
*                                                                      *
*   The WIZ$BREAK routine is entered each time the user presses the    *
*   BREAK key on his terminal.  WIZ$BREAK tallies one in BROKEN and    *
*   resets the break count.  It then returns normally to the user's    *
*   program.  It is the user's responsibility to check BROKEN on a     *
*   periodic basis and perform appropriate actions, ending with        *
*   resetting BROKEN back to zero.                                     *
*                                                                      *
\******************************************************************** */
 
%INCLUDE CP_6;
%FPT_TRMPRG(RSTBRK=YES);
 
    DCL BROKEN STATIC SYMDEF           UBIN INIT(0);
 
    CALL M$TRMPRG(FPT_TRMPRG);
    BROKEN=BROKEN+1;
    RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WIZ$SYSERR: PROC(DCBNO);
 
/* ********************************************************************\
*                                                                      *
*   WIZ$SYSERR may be used to print an error message from the system   *
*   error message file concerning the error in the current altret      *
*   frame.  If DCBNO is greater than zero, the dcb number is placed    *
*   in the M$ERRMSG FPT so that it will be included in the error       *
*   message(s).  Return is always normal, even if M$ERRMSG returns     *
*   an error.                                                          *
*                                                                      *
\******************************************************************** */
 
%INCLUDE CP_6;
 
    DCL DCBNO                          UBIN;
 
%FPT_ERRMSG(BUF=ERRBUF,
            CODE=ERRCODE,
            OUTDCB1=M$DO);
%B$TCB;
%B$ALT;
 
    DCL M$LO                           DCB;
    DCL M$DO                           DCB;
    DCL B$TCB$ SYMREF                  PTR;
    DCL LOEQDO SYMREF                  BIT(1);
 
    DCL ERRBUF STATIC                  CHAR(120);
    DCL 1 ERRCODE STATIC,
          2 * UNAL                     BIT(33),
          2 SEV UNAL                   BIT(3);
 
    ERRCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
    ERRCODE.SEV='0'B;
    IF LOEQDO THEN
        FPT_ERRMSG.V.OUTDCB2#=0;
    ELSE
        FPT_ERRMSG.V.OUTDCB2#=DCBNUM(M$LO);
    FPT_ERRMSG.V.DCB#=DCBNO;
    CALL M$ERRMSG(FPT_ERRMSG);
    RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WIZ$USRERR: PROC(USRCODE);
 
/* ********************************************************************\
*                                                                      *
*   WIZ$USRERR may be used to print an error message from the          *
*   user's error file concerning the error specified in USRCODE.       *
*   Return is always normal, even if M$ERRMSG returns an error.        *
*                                                                      *
\******************************************************************** */
 
%INCLUDE CP_6;
 
    DCL USRCODE ALIGNED                BIT(36);
 
%FPT_ERRMSG(BUF=ERRBUF,
            CODE=ERRCODE,
            OUTDCB1=M$DO,
            INCLCODE=NO,
            FILENAME=VLP_NAME,
            FILEACCT=VLP_ACCT);
%VLP_NAME(LEN=31,
          NAME='                               ');
%VLP_ACCT(ACCT='        ');
%F$DCB(DCBN=DUMMY);
 
    DCL M$LO                           DCB;
    DCL M$DO                           DCB;
    DCL M$LM                           DCB;
    DCL LOEQDO SYMREF                  BIT(1);
 
    DCL ERRBUF STATIC                  CHAR(120);
    DCL 1 ERRCODE STATIC,
          2 * UNAL                     BIT(36);
 
    VLP_ACCT.ACCT#=DCBADDR(DCBNUM(M$LM))->DUMMY.ACCT#;
    IF VLP_ACCT.ACCT#<='        ' THEN
        VLP_ACCT.ACCT#=':SYS    ';
    VLP_NAME=DCBADDR(DCBNUM(M$LM))->DUMMY.NAME#;
    ERRCODE=USRCODE;
    IF LOEQDO THEN
        FPT_ERRMSG.V.OUTDCB2#=0;
    ELSE
        FPT_ERRMSG.V.OUTDCB2#=DCBNUM(M$LO);
    CALL M$ERRMSG(FPT_ERRMSG);
    RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WIZ$PARSERR: PROC(PCB_PTR);
 
/* ********************************************************************\
*                                                                      *
*   The WIZ$PARSERR routine will print an appropriate error message    *
*   using the error code in the PCB passed to it.  It also will        *
*   print the 10 characters prior to and the 10 characters following   *
*   the error point on M$DO and M$LO (if necessary) and provide a      *
*   pointer to the error.  If the error code exceeds 7, WIZ$USRERR     *
*   is called to print a "real" error message.                         *
*                                                                      *
\******************************************************************** */
 
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
 
    DCL PCB_PTR                        PTR;
 
%FPT_WRITE(FPTN=WRITE_DO,
           DCB=M$DO,
           BUF=ERRBUF);
%FPT_WRITE(FPTN=WRITE_LO,
           DCB=M$LO,
           BUF=ERRBUF);
%P$PCB(STCLASS="BASED(PCB_PTR)");
 
    DCL M$DO                           DCB;
    DCL M$LO                           DCB;
    DCL T                              SBIN;
    DCL LOEQDO SYMREF                  BIT(1);
    DCL WIZ$USRERR                     ENTRY(1);
 
    DCL ERRBUF STATIC                  CHAR(120);
    DCL CMDBUF BASED                   CHAR(4096);
    DCL ERRMSG(0:7) CONSTANT           CHAR(20) INIT(
        '*** BUG! ***        ','Syntax error        ',
        'Null Parser root    ','Bad Node            ',
        'Work area overflow  ','Work area too small ',
        '*** BUG! ***        ','Null U$ routine     ');
    DCL I                              SBIN;
    DCL J                              SBIN;
    DCL K                              SBIN;
 
    I=P$PCB.HI_CHAR-10;
    J=I+20;
    K=14;
    IF I<0 THEN DO;
        K=K+I;
        I=0;
    END;
    IF J>=P$PCB.NCHARS THEN
        J=P$PCB.NCHARS-1;
    IF J>=I THEN DO;
        CALL CONCAT(ERRBUF,'>>> ',SUBSTR(P$PCB.TEXT$->CMDBUF,I,
            J-I+1),' <<<');
        WRITE_DO.BUF_.BOUND=J-I+8;
        CALL M$WRITE(WRITE_DO);
        IF NOT LOEQDO THEN DO;
            WRITE_LO.BUF_.BOUND=WRITE_DO.BUF_.BOUND;
            CALL M$WRITE(WRITE_LO);
        END;
        ERRBUF=' ';
        CALL INSERT(ERRBUF,K,1,'^');
        WRITE_DO.BUF_.BOUND=K;
        CALL M$WRITE(WRITE_DO);
        IF NOT LOEQDO THEN DO;
            WRITE_LO.BUF_.BOUND=WRITE_DO.BUF_.BOUND;
            CALL M$WRITE(WRITE_LO);
        END;
    END;
    IF P$PCB.ERROR.CODE<=7 THEN DO;
        ERRBUF=ERRMSG(P$PCB.ERROR.CODE);
        WRITE_DO.BUF_.BOUND=19;
        CALL M$WRITE(WRITE_DO);
        IF NOT LOEQDO THEN DO;
            WRITE_LO.BUF_.BOUND=WRITE_DO.BUF_.BOUND;
            CALL M$WRITE(WRITE_LO);
        END;
    END;
    ELSE DO;
        T=P$PCB.ERROR.CODE;
        CALL WIZ$USRERR(T);
    END;
    RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WIZ$TERM: PROC(CC);
 
/* ********************************************************************\
*                                                                      *
*   WIZ$TERM closes M$SI, M$LO, and M$DO (if open) and sets the        *
*   step code to CC.                                                   *
*                                                                      *
\******************************************************************** */
 
%INCLUDE CP_6;
 
    DCL CC                             UBIN;
 
%FPT_EXIT;
%FPT_CLOSE(FPTN=CLOSE_SI,
           DCB=M$SI,
           DISP=SAVE);
%FPT_CLOSE(FPTN=CLOSE_DO,
           DCB=M$DO,
           DISP=SAVE);
%FPT_CLOSE(FPTN=CLOSE_LO,
           DCB=M$LO,
           DISP=SAVE);
%F$DCB(DCBN=DUMMY);
 
    DCL M$SI                           DCB;
    DCL M$DO                           DCB;
    DCL M$LO                           DCB;
 
    IF DCBADDR(DCBNUM(M$SI))->DUMMY.FCD# THEN
        CALL M$CLOSE(CLOSE_SI);
    IF DCBADDR(DCBNUM(M$LO))->DUMMY.FCD# THEN
        CALL M$CLOSE(CLOSE_LO);
    IF DCBADDR(DCBNUM(M$DO))->DUMMY.FCD# THEN
        CALL M$CLOSE(CLOSE_DO);
    FPT_EXIT.V.STEPCC#=CC;
    CALL M$EXIT(FPT_EXIT);
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WIZ$READ: PROC(BFR,SIZ) ALTRET;
 
/* ********************************************************************\
*                                                                      *
*   WIZ$READ reads the next record from M$SI and returns it into       *
*   BFR, which must be 256 characters long or greater.  The length     *
*   of the record is returned in SIZ, which must be SBIN WORD.  If     *
*   end-of-file is encountered, SIZ is set to zero and ALTRET is       *
*   taken; if any other error occurs, SIZ is set to -1, an error       *
*   message is printed, and ALTRET is taken.  If M$LO is not the       *
*   same as M$SI, the record read is printed on M$LO with VFC of       *
*   'A' (print, single space).                                         *
*                                                                      *
\******************************************************************** */
 
%INCLUDE CP_6;
 
    DCL BFR UNAL                       CHAR(256);
    DCL SIZ                            SBIN;
 
%FPT_READ(FPTN=READ_SI,
          DCB=M$SI);
%F$DCB(DCBN=DUMMY);
 
    DCL M$SI                           DCB;
    DCL WIZ$WRITE                      ENTRY(3);
    DCL WIZ$SYSERR                     ENTRY(1);
    DCL SIEQLO SYMREF                  BIT(1);
 
    READ_SI.BUF_.BUF$=ADDR(BFR);
    READ_SI.BUF_.BOUND=255;
    CALL M$READ(READ_SI) ALTRET(SIERROR);
    SIZ=DCBADDR(DCBNUM(M$SI))->DUMMY.ARS#;
    IF NOT SIEQLO THEN
        CALL WIZ$WRITE(BFR,SIZ,'A');
    RETURN;
 
SIERROR:
    IF DCBADDR(DCBNUM(M$SI))->DUMMY.TYC.EOD# OR
        DCBADDR(DCBNUM(M$SI))->DUMMY.TYC.EOF# THEN DO;
        SIZ=0;
        ALTRETURN;
    END;
    ELSE DO;
        CALL WIZ$SYSERR(DCBNUM(M$SI));
        SIZ=-1;
        ALTRETURN;
    END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WIZ$WRITE: PROC(BFR,SIZ,CC);
 
/* ********************************************************************\
*                                                                      *
*   WIZ$WRITE writes buffer BFR of size SIZ to M$LO using VFC of       *
*   CC.  DVFC in M$LO is preserved.  SIZ must be SBIN WORD.            *
*                                                                      *
\******************************************************************** */
 
%INCLUDE CP_6;
 
    DCL BFR UNAL                       CHAR(256);
    DCL SIZ                            SBIN;
    DCL CC UNAL                        CHAR(1);
 
%FPT_WRITE(FPTN=WRITE_LO,
           DCB=M$LO);
%FPT_DEVICE(DCB=M$LO,
            DVFC='A');
%F$DCB(DCBN=DUMMY);
 
    DCL M$LO                           DCB;
    DCL OLDVFC                         CHAR(1);
 
    IF SIZ>0 THEN DO;
        OLDVFC=DCBADDR(DCBNUM(M$LO))->DUMMY.DVFC#;
        FPT_DEVICE.V.DVFC#=CC;
        CALL M$DEVICE(FPT_DEVICE);
        WRITE_LO.BUF_.BOUND=SIZ-1;
        WRITE_LO.BUF_.BUF$=ADDR(BFR);
        CALL M$WRITE(WRITE_LO);
        FPT_DEVICE.V.DVFC#=OLDVFC;
        CALL M$DEVICE(FPT_DEVICE);
    END;
    RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WIZ$USER: PROC(PARSE$PARAM);
 
/* ********************************************************************\
*                                                                      *
*   WIZ$USER is the U$ routine for this set of subroutines.  It        *
*   uses WIZ$READ to do a continue read into the input buffer and      *
*   updates NCHARS.  The user's PCB must have been SYMDEFed with       *
*   the name WIZ$PCB.  If end-of-file is encountered, return is        *
*   made to the parser, which will probably return a syntax error.     *
*                                                                      *
\******************************************************************** */
 
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%PARSE$PARAM;
%P$PCB(NAME=WIZ$PCB,
       STCLASS=SYMREF);
 
    DCL WIZ$READ                       ENTRY(2) ALTRET;
    DCL BFR BASED                      CHAR(256);
    DCL SIZ                            SBIN;
 
    IF PARSE$PARAM.TYPE~=%INPUT# THEN
        RETURN;
    CALL WIZ$READ(PINCRC(WIZ$PCB.TEXT$,PARSE$PARAM.CHARPOS)->BFR,SIZ)
        ALTRET(SIERROR);
    WIZ$PCB.NCHARS=PARSE$PARAM.CHARPOS+SIZ;
 
SIERROR:
    RETURN;
END;
