VERSION E05

PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:1    
        1        1        /*M*    Support routines for TIGR */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /**/
        8        8        /*X*/
        9        9        /**/
       10       10        /*P*     NAME:     ITH$SUBR
       11       11                 PURPOSE:  Support routines for TIGR.
       12       12                 DESCRIPTION: Includes table space allocation and structure
       13       13                           initialization routines.
       14       14        */
       15       15        %EJECT;
PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:2    
       16       16        /*F*     NAME:     ITH$ALLOCATE
       17       17                 PURPOSE:  To allocate table space in TIGR'S data area.
       18       18                 DESCRIPTION: If the specified number of words are available in
       19       19                           the data area, the TABLE_PTR$ is incremented. If not
       20       20                           available, an error message is output and altreturn taken.
       21       21                 INPUT:    PTR$ - pointer to next available word in segment
       22       22                           NWORDS - number of words to allocate
       23       23                 OUTPUT:   PTR$ - pointer incremented by nwords
       24       24        */
       25       25        /*************************************************************/
       26       26        ITH$ALLOCATE: PROC(PTR$,NWORDS) ALTRET;
       27       27        /**/
       28       28        %INCLUDE M_INFO_C;
       29      168        %INCLUDE IT_ERROR_C;
       30      251    1   DCL PTR$ PTR;                           /*TIGR DATA POINTER*/
       31      252    1   DCL 1 REPTR$ REDEF PTR$,
       32      253    1         2 OFFSET UBIN(18) UNAL,
       33      254    1         2 * BIT(6) UNAL,
       34      255    1         2 SEGID UBIN(12) UNAL;
       35      256    1   DCL NWORDS SBIN WORD;                   /*NUM DATA WORDS REQUIRED*/
       36      257    1   DCL TIGR_DMAX SBIN WORD CONSTANT INIT(%((%TIGRHI - %TIGRLO  + 1) * 1024));
       37      258    1   DCL ITE$ERROR ENTRY(2);
       38      259        /**/
       39      260        /**/
       40      261    1           IF REPTR$.OFFSET + NWORDS >= TIGR_DMAX  THEN
       41      262    2              DO;
       42      263    2                 CALL ITE$ERROR(%E$NOCTSPACE);
       43      264    2                 ALTRETURN;
       44      265    2              END;
       45      266    1           PTR$ = PINCRW(PTR$,NWORDS);
       46      267    1           IF MOD (REPTR$.OFFSET , 2) ~= 0
       47      268    1           THEN REPTR$.OFFSET = REPTR$.OFFSET + 1;
       48      269    1           RETURN;
       49      270    1   END ITH$ALLOCATE;
       50      271        %EOD;

PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:3    
--  Include file information  --

   IT_ERROR_C.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
      No diagnostics issued in procedure ITH$ALLOCATE.

   Procedure ITH$ALLOCATE requires 26 words for executable code.
   Procedure ITH$ALLOCATE requires 6 words of local(AUTO) storage.

PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:4    

 Object Unit name= ITH$ALLOCATE                               File name= ITH$SUBR.:E05TOU
 UTS= JUL 29 '97 23:04:05.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  ITH$ALLOCATE
    1   Proc  even  none    26     32  ITH$ALLOCATE
    2  RoData even  none     2      2  ITH$ALLOCATE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  ITH$ALLOCATE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 ITE$ERROR
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:5    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:6    


        1        1        /*M*    Support routines for TIGR */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /**/
        8        8        /*X*/
        9        9        /**/
       10       10        /*P*     NAME:     ITH$SUBR
       11       11                 PURPOSE:  Support routines for TIGR.
       12       12                 DESCRIPTION: Includes table space allocation and structure
       13       13                           initialization routines.
       14       14        */
       15       15        %EJECT;
PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:7    
       16       16        /*F*     NAME:     ITH$ALLOCATE
       17       17                 PURPOSE:  To allocate table space in TIGR'S data area.
       18       18                 DESCRIPTION: If the specified number of words are available in
       19       19                           the data area, the TABLE_PTR$ is incremented. If not
       20       20                           available, an error message is output and altreturn taken.
       21       21                 INPUT:    PTR$ - pointer to next available word in segment
       22       22                           NWORDS - number of words to allocate
       23       23                 OUTPUT:   PTR$ - pointer incremented by nwords
       24       24        */
       25       25        /*************************************************************/
       26       26        ITH$ALLOCATE: PROC(PTR$,NWORDS) ALTRET;

     26  1 000000   000000 700200 xent  ITH$ALLOCATE TSX0  ! X66_AUTO_2
         1 000001   000006 000002                    ZERO    6,2

       27       27        /**/
       28       28        %INCLUDE M_INFO_C;
       29      168        %INCLUDE IT_ERROR_C;
       30      251    1   DCL PTR$ PTR;                           /*TIGR DATA POINTER*/
       31      252    1   DCL 1 REPTR$ REDEF PTR$,
       32      253    1         2 OFFSET UBIN(18) UNAL,
       33      254    1         2 * BIT(6) UNAL,
       34      255    1         2 SEGID UBIN(12) UNAL;
       35      256    1   DCL NWORDS SBIN WORD;                   /*NUM DATA WORDS REQUIRED*/
       36      257    1   DCL TIGR_DMAX SBIN WORD CONSTANT INIT(%((%TIGRHI - %TIGRLO  + 1) * 1024));
       37      258    1   DCL ITE$ERROR ENTRY(2);
       38      259        /**/
       39      260        /**/
       40      261    1           IF REPTR$.OFFSET + NWORDS >= TIGR_DMAX  THEN

    261  1 000002   200004 470500                    LDP0    @NWORDS,,AUTO
         1 000003   200003 471500                    LDP1    @PTR$,,AUTO
         1 000004   100000 236100                    LDQ     0,,PR1
         1 000005   000022 772000                    QRL     18
         1 000006   000000 036100                    ADLQ    0,,PR0
         1 000007   000000 116000 0                  CMPQ    TIGR_DMAX
         1 000010   000016 604000 1                  TMI     s:266
PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:8    

       41      262    2              DO;

       42      263    2                 CALL ITE$ERROR(%E$NOCTSPACE);

    263  1 000011   000001 630400 2                  EPPR0   1
         1 000012   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000013   000000 701000 xent               TSX1    ITE$ERROR
         1 000014   000000 011000                    NOP     0

       43      264    2                 ALTRETURN;

    264  1 000015   000000 702200 xent               TSX2  ! X66_AALT

       44      265    2              END;
       45      266    1           PTR$ = PINCRW(PTR$,NWORDS);

    266  1 000016   000000 236100                    LDQ     0,,PR0
         1 000017   100000 473500                    LDP3    0,,PR1
         1 000020   300000 634506                    EPPR4   0,QL,PR3
         1 000021   100000 454500                    STP4    0,,PR1

       46      267    1           IF MOD (REPTR$.OFFSET , 2) ~= 0

    267  1 000022   100000 236100                    LDQ     0,,PR1
         1 000023   000022 772000                    QRL     18
         1 000024   000001 376007                    ANQ     1,DL
         1 000025   000031 600000 1                  TZE     s:269

       47      268    1           THEN REPTR$.OFFSET = REPTR$.OFFSET + 1;

    268  1 000026   100000 220100                    LDX0    0,,PR1
         1 000027   000001 621010                    EAX1    1,X0
         1 000030   100000 741100                    STX1    0,,PR1

       48      269    1           RETURN;

PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:9    
    269  1 000031   000000 702200 xent               TSX2  ! X66_ARET

TIGR_DMAX
 Sect OctLoc
   0     000   000000 400000                                                    ....

(unnamed)
 Sect OctLoc
   2     000   000000 000232   000000 006000                                    ........
       49      270    1   END ITH$ALLOCATE;
       50      271        %EOD;

PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:10   
--  Include file information  --

   IT_ERROR_C.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
      No diagnostics issued in procedure ITH$ALLOCATE.
PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:11   

 **** Variables and constants ****

  ****  Section 000 RoData ITH$ALLOCATE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 TIGR_DMAX

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @NWORDS                    3-0-0/w PTR         r     1 @PTR$
    *0-0-0/w SBIN        r     1 NWORDS                    *0-0-0/w PTR         r     1 PTR$
    *0-0-0/w STRC        r     1 REPTR$


   Procedure ITH$ALLOCATE requires 26 words for executable code.
   Procedure ITH$ALLOCATE requires 6 words of local(AUTO) storage.
PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:12   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=ITH$ALLOCATE File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:13   
          MINI XREF LISTING

ITE$ERROR
       258**DCL-ENT   263--CALL
NWORDS
       256**DCL        26--PROC      261>>IF        266>>ASSIGN
PTR$
       251**DCL        26--PROC      252--REDEF     266<<ASSIGN    266>>ASSIGN
REPTR$.OFFSET
       253**DCL       261>>IF        267>>IF        268<<ASSIGN    268>>ASSIGN
TIGR_DMAX
       257**DCL       261>>IF

PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:14   
       51        1        /*T***********************************************************/
       52        2        /*T*                                                         */
       53        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       54        4        /*T*                                                         */
       55        5        /*T***********************************************************/
       56        6        /*F*     NAME:     ITH$INIT
       57        7                 PURPOSE:  Allocate and initialize the various IO structures built
       58        8                           by TIGR.
       59        9        */
       60       10        /*************************************************************/
       61       11
       62       12        ITH$SQH_INIT: PROC (PTR$, STRUCT$) ALTRET;
       63       13        /**/
       64       14
       65       15        %INCLUDE NI_DATA_R;
       66      452        %INCLUDE FR$RAT;
       67      505        %INCLUDE FR_SUBS;
       68      573        %INCLUDE NK_SUBS;
       69      598        %INCLUDE IT_IDATA_D;    /* SYMDEFs for constant NI$ structures     */
       70      714                                /* here so it is in both B$ROGERS & B$ANDERSON      */
       71      715
       72      716    1   DCL PTR$ PTR;
       73      717    1   DCL STRUCT$ PTR;
       74      718        /**/
       75      719        /* BASED */
       76      720        /**/
       77      721        %NI$DCT;
       78      769        %NI$SQH;
       79      782        %FR$RAT;
       80      822        /**/
       81      823        /* AUTO */
       82      824        /**/
       83      825    1   DCL TMP$ PTR;
       84      826        /**/
       85      827        /* ENTRIES */
       86      828        /**/
       87      829    1   DCL ITH$ALLOCATE ENTRY(2) ALTRET;
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:15   
       88      830        /**/
       89      831
       90      832
       91      833        /*D*     NAME:     ITH$SQH_INIT
       92      834                 PURPOSE:  To allocate an SQH structure and initialize it.
       93      835                 DESCRIPTION: If the specified number of words are available in
       94      836                           TIGR data, an SQH is allocated and initialized.
       95      837                           If not, the routine ALTRETs.
       96      838                 INPUT:    PTR$ - pointer to next available word in segment
       97      839                 OUTPUT:   STRUCT$ - pointer to newly allocated and initialized SQH
       98      840        */
       99      841
      100      842        /**/
      101      843    1   ITH$INIT:  ;     /* this used to be the proc name, so I put this label here */
      102      844        /**/
      103      845    1           STRUCT$ = PTR$;
      104      846    2           CALL ITH$ALLOCATE(PTR$,SIZEW(NI$SQH)) WHENALTRETURN DO;
      105      847    2              ALTRETURN;
      106      848    2              END;
      107      849    1           STRUCT$ -> NI$SQH = NI$SQH_C;   /* set to inited constant structure      */
      108      850        /*      STRUCT$ -> NI$SQH.GATE = '1'B;             */
      109      851        /*      STRUCT$ -> NI$SQH.AQ$ = ADDR(NIL);         */
      110      852        /*      STRUCT$ -> NI$SQH.CQ$ = ADDR(NIL);         */
      111      853    1           STRUCT$ -> NI$SQH.FDCT = N_DCTXMAX + 1;
      112      854        /*      STRUCT$ -> NI$SQH.MPC$(0) = ADDR(NIL);     */
      113      855        /*      STRUCT$ -> NI$SQH.MPC$(1) = ADDR(NIL);     */
      114      856    1           RETURN;
      115      857        %EJECT;
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:16   
      116      858        /*D*     NAME:     ITH$RAT_INIT
      117      859                 PURPOSE:  To allocate a RAT structure and initialize it.
      118      860                 DESCRIPTION: If the specified number of words are available in
      119      861                           TIGR data, a RAT is allocated and initialized.
      120      862                           If not, the routine ALTRETs.
      121      863                 INPUT:    PTR$ - pointer to next available word in segment
      122      864                 OUTPUT:   STRUCT$ - pointer to newly allocated and initialized RAT
      123      865        */
      124      866
      125      867    1   ITH$RAT_INIT: ENTRY (PTR$, STRUCT$) ALTRET;
      126      868        /**/
      127      869    1           TMP$ = PTR$;
      128      870    2           CALL ITH$ALLOCATE(PTR$,SIZEW(FR$RAT)) WHENALTRETURN DO;
      129      871    2              ALTRETURN;
      130      872    2              END;
      131      873    1           TMP$ -> FR$RAT = '0'B;
      132      874    1           TMP$ -> FR$RAT.DCTX = N_DCTXMAX;
      133      875    1           TMP$ -> FR$RAT.LNK$ = ADDR(NIL);
      134      876    1           TMP$ -> FR$RAT.RCOD = FR_NPOOL;
      135      877    1           STRUCT$ = TMP$;
      136      878    1           RETURN;
      137      879        %EJECT;
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:17   
      138      880        /*D*     NAME:     ITH$DCT_INIT
      139      881                 PURPOSE:  To allocate a DCT structure and initialize it.
      140      882                 DESCRIPTION: If the specified number of words are available in
      141      883                           TIGR data, a DCT is allocated and initialized.
      142      884                           If not, the routine ALTRETs.
      143      885                 INPUT:    PTR$ - pointer to next available word in segment
      144      886                 OUTPUT:   STRUCT$ - pointer to newly allocated and initialized DCT
      145      887        */
      146      888
      147      889    1   ITH$DCT_INIT: ENTRY (PTR$, STRUCT$) ALTRET;
      148      890        /**/
      149      891    1           STRUCT$ = PTR$;
      150      892    2           CALL ITH$ALLOCATE(PTR$,SIZEW(NI$DCT)) WHENALTRETURN DO;
      151      893    2              ALTRETURN;
      152      894    2              END;
      153      895    1           N_DCTXMAX = N_DCTXMAX + 1;
      154      896    1           N$DCT$$ -> N$DCT$(N_DCTXMAX) = STRUCT$;
      155      897    1           STRUCT$ -> NI$DCT = NI$DCT_C;     /*  set to inited constant structure*/
      156      898    1           STRUCT$ -> NI$DCT.DP = '0'B;      /* make sure DP redef space inited  */
      157      899    1           STRUCT$ -> NI$DCT.DCTX = N_DCTXMAX;
      158      900    1           STRUCT$ -> NI$DCT.RESCOD = NK_NCOM;
      159      901        /*      STRUCT$ -> NI$DCT.FL$ = ADDR(NIL);         */
      160      902        /*      STRUCT$ -> NI$DCT.DVN = 0;                 */
      161      903        /*      STRUCT$ -> NI$DCT.SQ$ = ADDR(NIL);         */
      162      904        /*      STRUCT$ -> NI$DCT.PMD$ = ADDR(NIL);        */
      163      905        /*      STRUCT$ -> NI$DCT.SPEC = ENTADDR(NIL);     */
      164      906        /*      STRUCT$ -> NI$DCT.RAT$ = ADDR(NIL);        */
      165      907        /*      STRUCT$ -> NI$DCT.DDT$ = ADDR(NIL);        */
      166      908    1           RETURN;
      167      909    1   END ITH$SQH_INIT;   /* end of INITing routines, SQH was first one */
      168      910        %EOD;

PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:18   
--  Include file information  --

   IT_IDATA_D.:E05TOU  cannot be made into a system file and is referenced.
   NK_SUBS.:E05TOU  is referenced.
   FR_SUBS.:E05TOU  is referenced.
   FR$RAT.:E05TOU  is referenced.
   NI$TABLES.:E05TOU  is referenced.
   N$REQ.:E05TOU  is referenced.
   NI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$SQH_INIT.

   Procedure ITH$SQH_INIT requires 94 words for executable code.
   Procedure ITH$SQH_INIT requires 8 words of local(AUTO) storage.

PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:19   

 Object Unit name= ITH$SQH_INIT                               File name= ITH$SUBR.:E05TOU
 UTS= JUL 29 '97 23:04:16.12 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS     86    126  ITH$SQH_INIT
    1   Proc  even  none    94    136  ITH$SQH_INIT
    2  RoData even  none     6      6  ITH$SQH_INIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  ITH$SQH_INIT
     1     31          yes     yes      Std        2  ITH$RAT_INIT
     1     67          yes     yes      Std        2  ITH$DCT_INIT

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  NI$DCT_C                           0     45  NI$DQH_C
    0     67  NI$SQH_C                           0     76  NI$IOM_C
    0    106  NI$IOSTAT_C
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:20   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 ITH$ALLOCATE
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     N$DCT$$                               N$FQ$                                 NI$FQ$
     NI$IBUF$                              NI$RP$                                N_DCTXMAX
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:21   


       51        1        /*T***********************************************************/
       52        2        /*T*                                                         */
       53        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       54        4        /*T*                                                         */
       55        5        /*T***********************************************************/
       56        6        /*F*     NAME:     ITH$INIT
       57        7                 PURPOSE:  Allocate and initialize the various IO structures built
       58        8                           by TIGR.
       59        9        */
       60       10        /*************************************************************/
       61       11
       62       12        ITH$SQH_INIT: PROC (PTR$, STRUCT$) ALTRET;

     12  1 000000   000000 700200 xent  ITH$SQH_INIT TSX0  ! X66_AUTO_2
         1 000001   000010 000002                    ZERO    8,2

       63       13        /**/
       64       14
       65       15        %INCLUDE NI_DATA_R;
       66      452        %INCLUDE FR$RAT;
       67      505        %INCLUDE FR_SUBS;
       68      573        %INCLUDE NK_SUBS;
       69      598        %INCLUDE IT_IDATA_D;    /* SYMDEFs for constant NI$ structures     */
       70      714                                /* here so it is in both B$ROGERS & B$ANDERSON      */
       71      715
       72      716    1   DCL PTR$ PTR;
       73      717    1   DCL STRUCT$ PTR;
       74      718        /**/
       75      719        /* BASED */
       76      720        /**/
       77      721        %NI$DCT;
       78      769        %NI$SQH;
       79      782        %FR$RAT;
       80      822        /**/
       81      823        /* AUTO */
       82      824        /**/
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:22   
       83      825    1   DCL TMP$ PTR;
       84      826        /**/
       85      827        /* ENTRIES */
       86      828        /**/
       87      829    1   DCL ITH$ALLOCATE ENTRY(2) ALTRET;

    829  1 000002                       ITH$INIT     null
       88      830        /**/
       89      831
       90      832
       91      833        /*D*     NAME:     ITH$SQH_INIT
       92      834                 PURPOSE:  To allocate an SQH structure and initialize it.
       93      835                 DESCRIPTION: If the specified number of words are available in
       94      836                           TIGR data, an SQH is allocated and initialized.
       95      837                           If not, the routine ALTRETs.
       96      838                 INPUT:    PTR$ - pointer to next available word in segment
       97      839                 OUTPUT:   STRUCT$ - pointer to newly allocated and initialized SQH
       98      840        */
       99      841
      100      842        /**/
      101      843    1   ITH$INIT:  ;     /* this used to be the proc name, so I put this label here */
      102      844        /**/
      103      845    1           STRUCT$ = PTR$;

    845  1 000002   200003 470500                    LDP0    @PTR$,,AUTO
         1 000003   000000 236100                    LDQ     0,,PR0
         1 000004   200004 471500                    LDP1    @STRUCT$,,AUTO
         1 000005   100000 756100                    STQ     0,,PR1

      104      846    2           CALL ITH$ALLOCATE(PTR$,SIZEW(NI$SQH)) WHENALTRETURN DO;

    846  1 000006   000000 236000 2                  LDQ     0
         1 000007   200003 235100                    LDA     @PTR$,,AUTO
         1 000010   200006 757100                    STAQ    TMP$+1,,AUTO
         1 000011   200006 630500                    EPPR0   TMP$+1,,AUTO
         1 000012   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000013   000000 701000 xent               TSX1    ITH$ALLOCATE
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:23   
         1 000014   000016 702000 1                  TSX2    s:847
         1 000015   000017 710000 1                  TRA     s:849

      105      847    2              ALTRETURN;

    847  1 000016   000000 702200 xent               TSX2  ! X66_AALT

      106      848    2              END;
      107      849    1           STRUCT$ -> NI$SQH = NI$SQH_C;   /* set to inited constant structure      */

    849  1 000017   200004 470500                    LDP0    @STRUCT$,,AUTO
         1 000020   000000 471500                    LDP1    0,,PR0
         1 000021   000100 100400                    MLR     fill='000'O
         1 000022   000067 000034 0                  ADSC9   NI$SQH_C                 cn=0,n=28
         1 000023   100000 000034                    ADSC9   0,,PR1                   cn=0,n=28

      108      850        /*      STRUCT$ -> NI$SQH.GATE = '1'B;             */
      109      851        /*      STRUCT$ -> NI$SQH.AQ$ = ADDR(NIL);         */
      110      852        /*      STRUCT$ -> NI$SQH.CQ$ = ADDR(NIL);         */
      111      853    1           STRUCT$ -> NI$SQH.FDCT = N_DCTXMAX + 1;

    853  1 000024   000000 471500                    LDP1    0,,PR0
         1 000025   000000 720000 xsym               LXL0    N_DCTXMAX
         1 000026   000001 621010                    EAX1    1,X0
         1 000027   100002 741100                    STX1    2,,PR1

      112      854        /*      STRUCT$ -> NI$SQH.MPC$(0) = ADDR(NIL);     */
      113      855        /*      STRUCT$ -> NI$SQH.MPC$(1) = ADDR(NIL);     */
      114      856    1           RETURN;

    856  1 000030   000000 702200 xent               TSX2  ! X66_ARET

      115      857        %EJECT;
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:24   
      116      858        /*D*     NAME:     ITH$RAT_INIT
      117      859                 PURPOSE:  To allocate a RAT structure and initialize it.
      118      860                 DESCRIPTION: If the specified number of words are available in
      119      861                           TIGR data, a RAT is allocated and initialized.
      120      862                           If not, the routine ALTRETs.
      121      863                 INPUT:    PTR$ - pointer to next available word in segment
      122      864                 OUTPUT:   STRUCT$ - pointer to newly allocated and initialized RAT
      123      865        */
      124      866
      125      867    1   ITH$RAT_INIT: ENTRY (PTR$, STRUCT$) ALTRET;

    867  1 000031   000000 700200 xent  ITH$RAT_INIT TSX0  ! X66_AUTO_2
         1 000032   000010 000002                    ZERO    8,2

      126      868        /**/
      127      869    1           TMP$ = PTR$;

    869  1 000033   200003 470500                    LDP0    @PTR$,,AUTO
         1 000034   000000 236100                    LDQ     0,,PR0
         1 000035   200005 756100                    STQ     TMP$,,AUTO

      128      870    2           CALL ITH$ALLOCATE(PTR$,SIZEW(FR$RAT)) WHENALTRETURN DO;

    870  1 000036   000001 236000 2                  LDQ     1
         1 000037   200003 235100                    LDA     @PTR$,,AUTO
         1 000040   200006 757100                    STAQ    TMP$+1,,AUTO
         1 000041   200006 630500                    EPPR0   TMP$+1,,AUTO
         1 000042   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000043   000000 701000 xent               TSX1    ITH$ALLOCATE
         1 000044   000046 702000 1                  TSX2    s:871
         1 000045   000047 710000 1                  TRA     s:873

      129      871    2              ALTRETURN;

    871  1 000046   000000 702200 xent               TSX2  ! X66_AALT

      130      872    2              END;
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:25   
      131      873    1           TMP$ -> FR$RAT = '0'B;

    873  1 000047   200005 470500                    LDP0    TMP$,,AUTO
         1 000050   000100 100400                    MLR     fill='000'O
         1 000051   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000052   000000 000044                    ADSC9   0,,PR0                   cn=0,n=36

      132      874    1           TMP$ -> FR$RAT.DCTX = N_DCTXMAX;

    874  1 000053   000000 720000 xsym               LXL0    N_DCTXMAX
         1 000054   000003 440100                    SXL0    3,,PR0

      133      875    1           TMP$ -> FR$RAT.LNK$ = ADDR(NIL);

    875  1 000055   000001 236000 xsym               LDQ     B_VECTNIL+1
         1 000056   000000 756100                    STQ     0,,PR0

      134      876    1           TMP$ -> FR$RAT.RCOD = FR_NPOOL;

    876  1 000057   000003 236100                    LDQ     3,,PR0
         1 000060   000002 376000 2                  ANQ     2
         1 000061   000100 276003                    ORQ     64,DU
         1 000062   000003 756100                    STQ     3,,PR0

      135      877    1           STRUCT$ = TMP$;

    877  1 000063   200005 236100                    LDQ     TMP$,,AUTO
         1 000064   200004 471500                    LDP1    @STRUCT$,,AUTO
         1 000065   100000 756100                    STQ     0,,PR1

      136      878    1           RETURN;

    878  1 000066   000000 702200 xent               TSX2  ! X66_ARET

      137      879        %EJECT;
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:26   
      138      880        /*D*     NAME:     ITH$DCT_INIT
      139      881                 PURPOSE:  To allocate a DCT structure and initialize it.
      140      882                 DESCRIPTION: If the specified number of words are available in
      141      883                           TIGR data, a DCT is allocated and initialized.
      142      884                           If not, the routine ALTRETs.
      143      885                 INPUT:    PTR$ - pointer to next available word in segment
      144      886                 OUTPUT:   STRUCT$ - pointer to newly allocated and initialized DCT
      145      887        */
      146      888
      147      889    1   ITH$DCT_INIT: ENTRY (PTR$, STRUCT$) ALTRET;

    889  1 000067   000000 700200 xent  ITH$DCT_INIT TSX0  ! X66_AUTO_2
         1 000070   000010 000002                    ZERO    8,2

      148      890        /**/
      149      891    1           STRUCT$ = PTR$;

    891  1 000071   200003 470500                    LDP0    @PTR$,,AUTO
         1 000072   000000 236100                    LDQ     0,,PR0
         1 000073   200004 471500                    LDP1    @STRUCT$,,AUTO
         1 000074   100000 756100                    STQ     0,,PR1

      150      892    2           CALL ITH$ALLOCATE(PTR$,SIZEW(NI$DCT)) WHENALTRETURN DO;

    892  1 000075   000004 236000 2                  LDQ     4
         1 000076   200003 235100                    LDA     @PTR$,,AUTO
         1 000077   200006 757100                    STAQ    TMP$+1,,AUTO
         1 000100   200006 630500                    EPPR0   TMP$+1,,AUTO
         1 000101   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000102   000000 701000 xent               TSX1    ITH$ALLOCATE
         1 000103   000105 702000 1                  TSX2    s:893
         1 000104   000106 710000 1                  TRA     s:895

      151      893    2              ALTRETURN;

    893  1 000105   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:27   
      152      894    2              END;
      153      895    1           N_DCTXMAX = N_DCTXMAX + 1;

    895  1 000106   000000 054000 xsym               AOS     N_DCTXMAX

      154      896    1           N$DCT$$ -> N$DCT$(N_DCTXMAX) = STRUCT$;

    896  1 000107   200004 470500                    LDP0    @STRUCT$,,AUTO
         1 000110   000000 236100                    LDQ     0,,PR0
         1 000111   000000 471400 xsym               LDP1    N$DCT$$
         1 000112   000000 720000 xsym               LXL0    N_DCTXMAX
         1 000113   100000 756110                    STQ     0,X0,PR1

      155      897    1           STRUCT$ -> NI$DCT = NI$DCT_C;     /*  set to inited constant structure*/

    897  1 000114   000000 471500                    LDP1    0,,PR0
         1 000115   000100 100400                    MLR     fill='000'O
         1 000116   000000 000224 0                  ADSC9   NI$DCT_C                 cn=0,n=148
         1 000117   100000 000224                    ADSC9   0,,PR1                   cn=0,n=148

      156      898    1           STRUCT$ -> NI$DCT.DP = '0'B;      /* make sure DP redef space inited  */

    898  1 000120   000000 471500                    LDP1    0,,PR0
         1 000121   000100 100400                    MLR     fill='000'O
         1 000122   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000123   100030 000060                    ADSC9   24,,PR1                  cn=0,n=48

      157      899    1           STRUCT$ -> NI$DCT.DCTX = N_DCTXMAX;

    899  1 000124   000000 471500                    LDP1    0,,PR0
         1 000125   000000 236000 xsym               LDQ     N_DCTXMAX
         1 000126   000025 736000                    QLS     21
         1 000127   100006 676100                    ERQ     6,,PR1
         1 000130   777770 376003                    ANQ     -8,DU
         1 000131   100006 656100                    ERSQ    6,,PR1

      158      900    1           STRUCT$ -> NI$DCT.RESCOD = NK_NCOM;
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:28   

    900  1 000132   000000 471500                    LDP1    0,,PR0
         1 000133   000005 236000 2                  LDQ     5
         1 000134   100006 356100                    ANSQ    6,,PR1

      159      901        /*      STRUCT$ -> NI$DCT.FL$ = ADDR(NIL);         */
      160      902        /*      STRUCT$ -> NI$DCT.DVN = 0;                 */
      161      903        /*      STRUCT$ -> NI$DCT.SQ$ = ADDR(NIL);         */
      162      904        /*      STRUCT$ -> NI$DCT.PMD$ = ADDR(NIL);        */
      163      905        /*      STRUCT$ -> NI$DCT.SPEC = ENTADDR(NIL);     */
      164      906        /*      STRUCT$ -> NI$DCT.RAT$ = ADDR(NIL);        */
      165      907        /*      STRUCT$ -> NI$DCT.DDT$ = ADDR(NIL);        */
      166      908    1           RETURN;

    908  1 000135   000000 702200 xent               TSX2  ! X66_ARET

NI$DCT_C
 Sect OctLoc
   0     000   000000 006014   000000 006014   040040 040040   040040 040040    ........
   0     004   000000 006014   000000 006014   000000 000000   000000 000000    ................
   0     010   000000 000000   000000 000000   000000 000000   000000 000000    ................
   0     020*  000000 000000   000000 000000   000000 006014   000000 006014    ................
   0     024   000000 006014   000000 000000   000000 000000   000000 000000    ................
   0     030   000000 006014   0***** ******   000000 006014   000000 000000    ................
   0     034   0***** ******   000000 000000   010100 000000   000000 000000    .........@......
   0     040   000000 000000   000000 000000   000000 006014   000000 000000    ................
   0     044   000000 006014                                                    ....

(unnamed)
 Sect OctLoc
   0     045   000000 006014   000000 000000   000000 000000   000000 000000    ................
   0     051   000000 000000   000000 000000   000000 000000   000000 000000    ................
   0     055   000000 000000   000000 000000   000000 006014   000000 006014    ................
   0     061   000000 006014   000000 006014   000000 006014   000000 000000    ................
   0     065   000000 000000   000000 006014                                    ........

NI$SQH_C
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:29   
 Sect OctLoc
   0     067   400000 000000   000000 000000   000000 000000   000000 006014    ................
   0     073   000000 006014   000000 006014   000000 006014                    ............

(unnamed)
 Sect OctLoc
   0     076   ****** ******   ****** ******   ****** ******   ****** ******    ................

(unnamed)
 Sect OctLoc
   2     000   000011 006000   000013 006000   777037 777777   000000 000045    ...............%
   2     004   000003 006000   777777 777760                                    ........
      167      909    1   END ITH$SQH_INIT;   /* end of INITing routines, SQH was first one */
      168      910        %EOD;

PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:30   
--  Include file information  --

   IT_IDATA_D.:E05TOU  cannot be made into a system file and is referenced.
   NK_SUBS.:E05TOU  is referenced.
   FR_SUBS.:E05TOU  is referenced.
   FR$RAT.:E05TOU  is referenced.
   NI$TABLES.:E05TOU  is referenced.
   N$REQ.:E05TOU  is referenced.
   NI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$SQH_INIT.
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:31   

 **** Variables and constants ****

  ****  Section 000 RoData ITH$SQH_INIT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1332)  r     1 NI$DCT_C                  67-0-0/w STRC(252)   r     1 NI$SQH_C

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PTR$                      4-0-0/w PTR         r     1 @STRUCT$
    *0-0-0/w PTR         r     1 PTR$                      *0-0-0/w PTR         r     1 STRUCT$
     5-0-0/w PTR         r     1 TMP$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 N$DCT$$                    0-0-0/w PTR         r     1 N$FQ$
     0-0-0/w PTR         r     1 NI$FQ$                     0-0-0/w PTR         r     1 NI$IBUF$
     0-0-0/w PTR         r     1 NI$RP$                     0-0-0/w SBIN        r     1 N_DCTXMAX

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(324)   r     1 FR$RAT                     0-0-0/w PTR         r     1 N$DCT$(0:0)
     0-0-0/w STRC(1332)  r     1 NI$DCT                     0-0-0/w STRC(252)   r     1 NI$SQH

PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:32   

   Procedure ITH$SQH_INIT requires 94 words for executable code.
   Procedure ITH$SQH_INIT requires 8 words of local(AUTO) storage.
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:33   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:34   
          MINI XREF LISTING

FR$RAT
       784**DCL       870--CALL      873<<ASSIGN
FR$RAT.DCTX
       802**DCL       874<<ASSIGN
FR$RAT.LNK$
       785**DCL       875<<ASSIGN
FR$RAT.RCOD
       797**DCL       876<<ASSIGN
ITH$ALLOCATE
       829**DCL-ENT   846--CALL      870--CALL      892--CALL
N$DCT$
       447**DCL       896<<ASSIGN
N$DCT$$
       313**DCL       447--IMP-PTR   896>>ASSIGN
N$FQ$
       313**DCL       448--IMP-PTR
N$REQ_INIT.BUFADDR
       332**DCL       333--REDEF     333--REDEF
N$REQ_INIT.DLA.DRELADDR
       324**DCL       324--REDEF
N$REQ_INIT.DVE.EOMCHAR
       361**DCL       362--REDEF
N$REQ_INIT.EAINFO
       355**DCL       355--REDEF
N$REQ_INIT.EAINFOX
       355**DCL       356--REDEF
N$REQ_INIT.EVNTINFO
       356**DCL       356--REDEF
N$REQ_INIT.STATUS
       337**DCL       343--REDEF
NI$DCT
       730**DCL       892--CALL      897<<ASSIGN
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:35   
NI$DCT.DCTX
       731**DCL       899<<ASSIGN
NI$DCT.DP
       750**DCL       757--REDEF     760--REDEF     761--REDEF     763--REDEF     763--REDEF     764--REDEF
       765--REDEF     765--REDEF     898<<ASSIGN
NI$DCT.MPC.IOCHANX
       758**DCL       758--REDEF
NI$DCT.RESCOD
       737**DCL       900<<ASSIGN
NI$DCT_C
       624**DCL       897>>ASSIGN
NI$DCT_C.DP
       644**DCL       651--REDEF     654--REDEF     655--REDEF     657--REDEF     657--REDEF     658--REDEF
       659--REDEF     659--REDEF
NI$DCT_C.MPC.IOCHANX
       652**DCL       652--REDEF
NI$DQH_C.IOCHANX
       674**DCL       675--REDEF
NI$DQH_C.MBX$
       683**DCL       684--REDEF
NI$FQ$
       373**DCL       449--IMP-PTR
NI$IBUF$
       373**DCL       449--IMP-PTR
NI$IMXMBX_INIT.PAGED_BASE
       383**DCL       384--REDEF     384--REDEF
NI$IMXMBX_INIT.SIZE
       385**DCL       385--REDEF
NI$IOSTAT_C.AESDCW
       710**DCL       710--REDEF
NI$REQ_INIT.DCW
       407**DCL       410--REDEF
NI$REQ_INIT.DCW.TALLY
       408**DCL       408--REDEF
NI$REQ_INIT.IDCW.EXTA
       410**DCL       410--REDEF
PL6.E3A0      #002=ITH$SQH_INIT File=ITH$SUBR.:E05TSI                            TUE 07/29/97 23:04 Page:36   
NI$REQ_INIT.PCW
       412**DCL       416--REDEF
NI$REQ_INIT.SEEK
       417**DCL       418--REDEF     419--REDEF
NI$RP$
       421**DCL       451--IMP-PTR
NI$SQH
       778**DCL       846--CALL      849<<ASSIGN
NI$SQH.DOOR
       778**DCL       778--REDEF
NI$SQH.FDCT
       778**DCL       853<<ASSIGN
NI$SQH_C
       695**DCL       849>>ASSIGN
NI$SQH_C.DOOR
       695**DCL       695--REDEF
NI_MBX_INIT.DCW.CONTROL.AE
       443**DCL       443--REDEF
NI_MBX_INIT.LPW.CONTROL.AE
       439**DCL       439--REDEF
N_DCTXMAX
       421**DCL       853>>ASSIGN    874>>ASSIGN    895<<ASSIGN    895>>ASSIGN    896>>ASSIGN    899>>ASSIGN
PTR$
       716**DCL        12--PROC      845>>ASSIGN    846<>CALL      867--ENTRY     869>>ASSIGN    870<>CALL
       889--ENTRY     891>>ASSIGN    892<>CALL
STRUCT$
       717**DCL        12--PROC      845<<ASSIGN    849>>ASSIGN    853>>ASSIGN    867--ENTRY     877<<ASSIGN
       889--ENTRY     891<<ASSIGN    896>>ASSIGN    897>>ASSIGN    898>>ASSIGN    899>>ASSIGN    900>>ASSIGN
TMP$
       825**DCL       869<<ASSIGN    873>>ASSIGN    874>>ASSIGN    875>>ASSIGN    876>>ASSIGN    877>>ASSIGN

PL6.E3A0      #003=ITH$FIND_CONNECT_INDEX File=ITH$SUBR.:E05TSI                  TUE 07/29/97 23:05 Page:37   
      169        1        /*T***********************************************************/
      170        2        /*T*                                                         */
      171        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      172        4        /*T*                                                         */
      173        5        /*T***********************************************************/
      174        6        ITH$FIND_CONNECT_INDEX:PROC(PORT,CI_INDEX) ALTRET;
      175        7
      176        8        %INCLUDE HF_DATA_R;
      177       51
      178       52    1   DCL PORT UBIN WORD;
      179       53    1   DCL CI_INDEX SBIN WORD;
      180       54    1   DCL I SBIN WORD;
      181       55
      182       56    2           DO I = 8 TO 11;
      183       57    3             IF H_RPM_CONNECT_TABLE.ENTRI.PORT#(I) = PORT THEN DO;
      184       58    3               CI_INDEX = I - 4;
      185       59    3               RETURN;
      186       60    3               END;
      187       61    2             END;
      188       62    1           ALTRETURN;
      189       63    1   END ITH$FIND_CONNECT_INDEX;
      190       64        %EOD;

PL6.E3A0      #003=ITH$FIND_CONNECT_INDEX File=ITH$SUBR.:E05TSI                  TUE 07/29/97 23:05 Page:38   
--  Include file information  --

   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$FIND_CONNECT_INDEX.

   Procedure ITH$FIND_CONNECT_INDEX requires 26 words for executable code.
   Procedure ITH$FIND_CONNECT_INDEX requires 8 words of local(AUTO) storage.

PL6.E3A0      #003=ITH$FIND_CONNECT_INDEX File=ITH$SUBR.:E05TSI                  TUE 07/29/97 23:05 Page:39   

 Object Unit name= ITH$FIND_CONNECT_INDEX                     File name= ITH$SUBR.:E05TOU
 UTS= JUL 29 '97 23:05:07.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    26     32  ITH$FIND_CONNECT_INDEX

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  ITH$FIND_CONNECT_INDEX

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     H_RPM_CONNECT_TABLE
PL6.E3A0      #003=ITH$FIND_CONNECT_INDEX File=ITH$SUBR.:E05TSI                  TUE 07/29/97 23:05 Page:40   


      169        1        /*T***********************************************************/
      170        2        /*T*                                                         */
      171        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      172        4        /*T*                                                         */
      173        5        /*T***********************************************************/
      174        6        ITH$FIND_CONNECT_INDEX:PROC(PORT,CI_INDEX) ALTRET;

      6  0 000000   000000 700200 xent  ITH$FIND_CO* TSX0  ! X66_AUTO_2
         0 000001   000010 000002                    ZERO    8,2

      175        7
      176        8        %INCLUDE HF_DATA_R;
      177       51
      178       52    1   DCL PORT UBIN WORD;
      179       53    1   DCL CI_INDEX SBIN WORD;
      180       54    1   DCL I SBIN WORD;
      181       55
      182       56    2           DO I = 8 TO 11;

     56  0 000002   000010 235007                    LDA     8,DL
         0 000003   200005 755100                    STA     I,,AUTO

      183       57    3             IF H_RPM_CONNECT_TABLE.ENTRI.PORT#(I) = PORT THEN DO;

     57  0 000004   200003 470500                    LDP0    @PORT,,AUTO
         0 000005   200005 236100                    LDQ     I,,AUTO
         0 000006   000014 402007                    MPY     12,DL
         0 000007   000000 116003                    CMPQ    0,DU
         0 000010   000012 605000 0                  TPL     s:57+6
         0 000011   000044 036003                    ADLQ    36,DU
         0 000012   003100 061406                    CSR     bolr='003'O
         0 000013   000000 000003 xsym               BDSC    H_RPM_CONNECT_TABLE,Q    by=0,bit=0,n=3
         0 000014   200006 000044                    BDSC    I+1,,AUTO                by=0,bit=0,n=36
         0 000015   200006 236100                    LDQ     I+1,,AUTO
         0 000016   000000 116100                    CMPQ    0,,PR0
         0 000017   000025 601000 0                  TNZ     s:61
PL6.E3A0      #003=ITH$FIND_CONNECT_INDEX File=ITH$SUBR.:E05TSI                  TUE 07/29/97 23:05 Page:41   

      184       58    3               CI_INDEX = I - 4;

     58  0 000020   200004 471500                    LDP1    @CI_INDEX,,AUTO
         0 000021   200005 235100                    LDA     I,,AUTO
         0 000022   000004 135007                    SBLA    4,DL
         0 000023   100000 755100                    STA     0,,PR1

      185       59    3               RETURN;

     59  0 000024   000000 702200 xent               TSX2  ! X66_ARET

      186       60    3               END;
      187       61    2             END;

     61  0 000025   200005 054100                    AOS     I,,AUTO
         0 000026   200005 235100                    LDA     I,,AUTO
         0 000027   000013 115007                    CMPA    11,DL
         0 000030   000004 604400 0                  TMOZ    s:57

      188       62    1           ALTRETURN;

     62  0 000031   000000 702200 xent               TSX2  ! X66_AALT
      189       63    1   END ITH$FIND_CONNECT_INDEX;
      190       64        %EOD;

PL6.E3A0      #003=ITH$FIND_CONNECT_INDEX File=ITH$SUBR.:E05TSI                  TUE 07/29/97 23:05 Page:42   
--  Include file information  --

   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$FIND_CONNECT_INDEX.
PL6.E3A0      #003=ITH$FIND_CONNECT_INDEX File=ITH$SUBR.:E05TSI                  TUE 07/29/97 23:05 Page:43   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CI_INDEX                  3-0-0/w PTR         r     1 @PORT
    *0-0-0/w SBIN        r     1 CI_INDEX                   5-0-0/w SBIN        r     1 I
    *0-0-0/w UBIN        r     1 PORT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(288)   r     1 H_RPM_CONNECT_TABLE


   Procedure ITH$FIND_CONNECT_INDEX requires 26 words for executable code.
   Procedure ITH$FIND_CONNECT_INDEX requires 8 words of local(AUTO) storage.
PL6.E3A0      #003=ITH$FIND_CONNECT_INDEX File=ITH$SUBR.:E05TSI                  TUE 07/29/97 23:05 Page:44   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=ITH$FIND_CONNECT_INDEX File=ITH$SUBR.:E05TSI                  TUE 07/29/97 23:05 Page:45   
          MINI XREF LISTING

CI_INDEX
        53**DCL         6--PROC       58<<ASSIGN
H_RPM_CONNECT_TABLE.ENTRI.PORT#
        42**DCL        57>>IF
I
        54**DCL        56<<DOINDEX    57>>IF         58>>ASSIGN
PORT
        52**DCL         6--PROC       57>>IF

PL6.E3A0      #004=ITH$REBUILD_CI_TABLE File=ITH$SUBR.:E05TSI                    TUE 07/29/97 23:05 Page:46   
      191        1        /*T***********************************************************/
      192        2        /*T*                                                         */
      193        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      194        4        /*T*                                                         */
      195        5        /*T***********************************************************/
      196        6        ITH$REBUILD_CI_TABLE:PROC;
      197        7
      198        8        %INCLUDE HF_DATA_R;
      199       51    1   DCL S_PORTNR(0:7) UBIN SYMREF;
      200       52    1   DCL S_NSCPU UBIN WORD SYMREF;
      201       53    1   DCL I SBIN WORD;
      202       54
      203       55    1   DCL ITH$FIND_CONNECT_INDEX ENTRY(2) ALTRET;
      204       56
      205       57    2           DO I = 0 TO S_NSCPU;
      206       58    2             CALL ITH$FIND_CONNECT_INDEX(S_PORTNR(I),H_DPS8000_CI_TABLE(I));
      207       59    2             END;
      208       60    1   END ITH$REBUILD_CI_TABLE;
      209       61        %EOD;

PL6.E3A0      #004=ITH$REBUILD_CI_TABLE File=ITH$SUBR.:E05TSI                    TUE 07/29/97 23:05 Page:47   
--  Include file information  --

   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$REBUILD_CI_TABLE.

   Procedure ITH$REBUILD_CI_TABLE requires 19 words for executable code.
   Procedure ITH$REBUILD_CI_TABLE requires 6 words of local(AUTO) storage.

PL6.E3A0      #004=ITH$REBUILD_CI_TABLE File=ITH$SUBR.:E05TSI                    TUE 07/29/97 23:05 Page:48   

 Object Unit name= ITH$REBUILD_CI_TABLE                       File name= ITH$SUBR.:E05TOU
 UTS= JUL 29 '97 23:05:18.04 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    19     23  ITH$REBUILD_CI_TABLE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  ITH$REBUILD_CI_TABLE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 ITH$FIND_CONNECT_INDEX
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     H_DPS8000_CI_TABLE                    S_PORTNR                              S_NSCPU
     B_VECTNIL
PL6.E3A0      #004=ITH$REBUILD_CI_TABLE File=ITH$SUBR.:E05TSI                    TUE 07/29/97 23:05 Page:49   


      191        1        /*T***********************************************************/
      192        2        /*T*                                                         */
      193        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      194        4        /*T*                                                         */
      195        5        /*T***********************************************************/
      196        6        ITH$REBUILD_CI_TABLE:PROC;

      6  0 000000   000000 700200 xent  ITH$REBUILD* TSX0  ! X66_AUTO_0
         0 000001   000006 000000                    ZERO    6,0

      197        7
      198        8        %INCLUDE HF_DATA_R;
      199       51    1   DCL S_PORTNR(0:7) UBIN SYMREF;
      200       52    1   DCL S_NSCPU UBIN WORD SYMREF;
      201       53    1   DCL I SBIN WORD;
      202       54
      203       55    1   DCL ITH$FIND_CONNECT_INDEX ENTRY(2) ALTRET;
      204       56
      205       57    2           DO I = 0 TO S_NSCPU;

     57  0 000002   200003 450100                    STZ     I,,AUTO
         0 000003   000016 710000 0                  TRA     s:59+1

      206       58    2             CALL ITH$FIND_CONNECT_INDEX(S_PORTNR(I),H_DPS8000_CI_TABLE(I));

     58  0 000004   200003 720100                    LXL0    I,,AUTO
         0 000005   000000 630410 xsym               EPPR0   H_DPS8000_CI_TABLE,X0
         0 000006   200005 450500                    STP0    I+2,,AUTO
         0 000007   000000 631410 xsym               EPPR1   S_PORTNR,X0
         0 000010   200004 451500                    STP1    I+1,,AUTO
         0 000011   200004 630500                    EPPR0   I+1,,AUTO
         0 000012   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000013   000000 701000 xent               TSX1    ITH$FIND_CONNECT_INDEX
         0 000014   000000 011000                    NOP     0

      207       59    2             END;
PL6.E3A0      #004=ITH$REBUILD_CI_TABLE File=ITH$SUBR.:E05TSI                    TUE 07/29/97 23:05 Page:50   

     59  0 000015   200003 054100                    AOS     I,,AUTO
         0 000016   000000 236000 xsym               LDQ     S_NSCPU
         0 000017   000004 604000 0                  TMI     s:58
         0 000020   200003 116100                    CMPQ    I,,AUTO
         0 000021   000004 605000 0                  TPL     s:58

      208       60    1   END ITH$REBUILD_CI_TABLE;

     60  0 000022   000000 702200 xent               TSX2  ! X66_ARET
      209       61        %EOD;

PL6.E3A0      #004=ITH$REBUILD_CI_TABLE File=ITH$SUBR.:E05TSI                    TUE 07/29/97 23:05 Page:51   
--  Include file information  --

   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$REBUILD_CI_TABLE.
PL6.E3A0      #004=ITH$REBUILD_CI_TABLE File=ITH$SUBR.:E05TSI                    TUE 07/29/97 23:05 Page:52   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w SBIN        r     1 I

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 H_DPS8000_CI_TABLE(0:3)
     0-0-0/w UBIN        r     1 S_NSCPU
     0-0-0/w UBIN        r     1 S_PORTNR(0:7)


   Procedure ITH$REBUILD_CI_TABLE requires 19 words for executable code.
   Procedure ITH$REBUILD_CI_TABLE requires 6 words of local(AUTO) storage.
PL6.E3A0      #004=ITH$REBUILD_CI_TABLE File=ITH$SUBR.:E05TSI                    TUE 07/29/97 23:05 Page:53   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=ITH$REBUILD_CI_TABLE File=ITH$SUBR.:E05TSI                    TUE 07/29/97 23:05 Page:54   
          MINI XREF LISTING

H_DPS8000_CI_TABLE
        41**DCL        58<>CALL
I
        53**DCL        57<<DOINDEX    58>>CALL       58>>CALL
ITH$FIND_CONNECT_INDEX
        55**DCL-ENT    58--CALL
S_NSCPU
        52**DCL        57>>DOINDEX
S_PORTNR
        51**DCL        58<>CALL

PL6.E3A0      #005=ITH$READ_VERIFY_SAD File=ITH$SUBR.:E05TSI                     TUE 07/29/97 23:05 Page:55   
      210        1        /*T***********************************************************/
      211        2        /*T*                                                         */
      212        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      213        4        /*T*                                                         */
      214        5        /*T***********************************************************/
      215        6        ITH$READ_VERIFY_SAD:PROC (BUF$,SADAD) ALTRET;
      216        7
      217        8        %INCLUDE I$DISK;
      218      260    1   DCL BUF$ PTR;
      219      261    1   DCL SADAD UBIN WORD;
      220      262
      221      263    1   DCL TIMES_READ UBIN WORD;
      222      264
      223      265    1   DCL ITQ$DREAD ENTRY(2) ALTRET;
      224      266    1   DCL 1 B_VERSION CALIGNED SYMREF,
      225      267    1         2 L UBIN BYTE UNAL,
      226      268    1         2 C CHAR(B_VERSION.L);
      227      269
      228      270    1           TIMES_READ = 0;
      229      271    1   READ_AGAIN:
      230      272    2           CALL ITQ$DREAD(BUF$,SADAD) WHENALTRETURN DO;
      231      273    2             ALTRETURN;
      232      274    2             END;
      233      275    1           IF BUF$->I$DISKDIR.MONID.A.VER = SUBSTR(B_VERSION.C,0,3) THEN RETURN;
      234      276    1           TIMES_READ = TIMES_READ+1;
      235      277    1           IF TIMES_READ > 3 THEN ALTRETURN;
      236      278    1           ELSE GOTO READ_AGAIN;
      237      279    1   END ITH$READ_VERIFY_SAD;
      238      280        %EOD;

PL6.E3A0      #005=ITH$READ_VERIFY_SAD File=ITH$SUBR.:E05TSI                     TUE 07/29/97 23:05 Page:56   
--  Include file information  --

   I$DISK.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$READ_VERIFY_SAD.

   Procedure ITH$READ_VERIFY_SAD requires 24 words for executable code.
   Procedure ITH$READ_VERIFY_SAD requires 6 words of local(AUTO) storage.

PL6.E3A0      #005=ITH$READ_VERIFY_SAD File=ITH$SUBR.:E05TSI                     TUE 07/29/97 23:05 Page:57   

 Object Unit name= ITH$READ_VERIFY_SAD                        File name= ITH$SUBR.:E05TOU
 UTS= JUL 29 '97 23:05:31.36 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    24     30  ITH$READ_VERIFY_SAD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  ITH$READ_VERIFY_SAD

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 ITQ$DREAD
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VERSION                             B_VECTNIL
PL6.E3A0      #005=ITH$READ_VERIFY_SAD File=ITH$SUBR.:E05TSI                     TUE 07/29/97 23:05 Page:58   


      210        1        /*T***********************************************************/
      211        2        /*T*                                                         */
      212        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      213        4        /*T*                                                         */
      214        5        /*T***********************************************************/
      215        6        ITH$READ_VERIFY_SAD:PROC (BUF$,SADAD) ALTRET;

      6  0 000000   000000 700200 xent  ITH$READ_VE* TSX0  ! X66_AUTO_2
         0 000001   000006 000002                    ZERO    6,2

      216        7
      217        8        %INCLUDE I$DISK;
      218      260    1   DCL BUF$ PTR;
      219      261    1   DCL SADAD UBIN WORD;
      220      262
      221      263    1   DCL TIMES_READ UBIN WORD;
      222      264
      223      265    1   DCL ITQ$DREAD ENTRY(2) ALTRET;
      224      266    1   DCL 1 B_VERSION CALIGNED SYMREF,
      225      267    1         2 L UBIN BYTE UNAL,
      226      268    1         2 C CHAR(B_VERSION.L);
      227      269
      228      270    1           TIMES_READ = 0;

    270  0 000002   200005 450100                    STZ     TIMES_READ,,AUTO

      229      271    1   READ_AGAIN:
      230      272    2           CALL ITQ$DREAD(BUF$,SADAD) WHENALTRETURN DO;

    272  0 000003   200003 630500       READ_AGAIN   EPPR0   @BUF$,,AUTO
         0 000004   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000005   000000 701000 xent               TSX1    ITQ$DREAD
         0 000006   000010 702000 0                  TSX2    s:273
         0 000007   000011 710000 0                  TRA     s:275

      231      273    2             ALTRETURN;
PL6.E3A0      #005=ITH$READ_VERIFY_SAD File=ITH$SUBR.:E05TSI                     TUE 07/29/97 23:05 Page:59   

    273  0 000010   000000 702200 xent               TSX2  ! X66_AALT

      232      274    2             END;
      233      275    1           IF BUF$->I$DISKDIR.MONID.A.VER = SUBSTR(B_VERSION.C,0,3) THEN RETURN;

    275  0 000011   200003 470500                    LDP0    @BUF$,,AUTO
         0 000012   000000 471500                    LDP1    0,,PR0
         0 000013   000000 236000 xsym               LDQ     B_VERSION
         0 000014   000033 772000                    QRL     27
         0 000015   040000 106500                    CMPC    fill='040'O
         0 000016   100210 000003                    ADSC9   136,,PR1                 cn=0,n=3
         0 000017   000000 200003 xsym               ADSC9   B_VERSION                cn=1,n=3
         0 000020   000022 601000 0                  TNZ     s:276

    275  0 000021   000000 702200 xent               TSX2  ! X66_ARET

      234      276    1           TIMES_READ = TIMES_READ+1;

    276  0 000022   200005 235100                    LDA     TIMES_READ,,AUTO
         0 000023   000001 035007                    ADLA    1,DL
         0 000024   200005 755100                    STA     TIMES_READ,,AUTO

      235      277    1           IF TIMES_READ > 3 THEN ALTRETURN;

    277  0 000025   000004 115007                    CMPA    4,DL
         0 000026   000003 602000 0                  TNC     READ_AGAIN

    277  0 000027   000000 702200 xent               TSX2  ! X66_AALT
      236      278    1           ELSE GOTO READ_AGAIN;
      237      279    1   END ITH$READ_VERIFY_SAD;
      238      280        %EOD;

PL6.E3A0      #005=ITH$READ_VERIFY_SAD File=ITH$SUBR.:E05TSI                     TUE 07/29/97 23:05 Page:60   
--  Include file information  --

   I$DISK.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$READ_VERIFY_SAD.
PL6.E3A0      #005=ITH$READ_VERIFY_SAD File=ITH$SUBR.:E05TSI                     TUE 07/29/97 23:05 Page:61   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BUF$                      4-0-0/w PTR         r     1 @SADAD
    *0-0-0/w PTR         r     1 BUF$                      *0-0-0/w UBIN        r     1 SADAD
     5-0-0/w UBIN        r     1 TIMES_READ

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ASTR(9)     r     1 B_VERSION

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(8640)  r     1 I$DISKDIR


   Procedure ITH$READ_VERIFY_SAD requires 24 words for executable code.
   Procedure ITH$READ_VERIFY_SAD requires 6 words of local(AUTO) storage.
PL6.E3A0      #005=ITH$READ_VERIFY_SAD File=ITH$SUBR.:E05TSI                     TUE 07/29/97 23:05 Page:62   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=ITH$READ_VERIFY_SAD File=ITH$SUBR.:E05TSI                     TUE 07/29/97 23:05 Page:63   
          MINI XREF LISTING

BUF$
       260**DCL         6--PROC      272<>CALL      275>>IF
B_VERSION.C
       268**DCL       275>>IF
B_VERSION.L
       267**DCL       268--IMP-SIZ   275>>IF
I$DISKDIR.FW.NAME
       258**DCL       259--REDEF
I$DISKDIR.MONID.A.VER
       216**DCL       275>>IF
I$DISKDIR.MONID.M
       218**DCL       221--REDEF
ITQ$DREAD
       265**DCL-ENT   272--CALL
READ_AGAIN
       272**LABEL     278--GOTO
SADAD
       261**DCL         6--PROC      272<>CALL
TIMES_READ
       263**DCL       270<<ASSIGN    276<<ASSIGN    276>>ASSIGN    277>>IF

PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:64   
      239        1        /*M*    Routines for ITC$CHECK to be more efficient */
      240        2        /*T***********************************************************/
      241        3        /*T*                                                         */
      242        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      243        5        /*T*                                                         */
      244        6        /*T***********************************************************/
      245        7        /**/
      246        8        /*X*/
      247        9        /**/
      248       10        /*P*     NAME:     ITH$CHECK
      249       11                 PURPOSE:  Routines for making ITC$CHECKs more efficient.
      250       12                 DESCRIPTION: Includes check device name and channel number
      251       13                              routines.
      252       14        */
      253       15        ITH$CHECK : PROC(NAME,NUMBER) ALTRET;
      254       16
      255       17    1   DCL NAME CHAR(8);
      256       18    1   DCL NUMBER SBIN;
      257       19        /*
      258       20           ENTRY DCLS
      259       21        */
      260       22    1   DCL ITE$ERROR ENTRY(2);
      261       23        /*
      262       24           INCLUDES
      263       25        */
      264       26        %INCLUDE NI_DATA_R;
      265      463        %INCLUDE IT_ERROR_C;
      266      546        %INCLUDE HF_DATA_R;
      267      589        /*
      268      590           AUTO  VARIABLES
      269      591        */
      270      592    1   DCL DCTX SBIN;
      271      593    1   DCL 1 MESG,
      272      594    1      2 COUNT UBIN(9) UNAL,
      273      595    1      2 TEXT CHAR(8) UNAL;
      274      596        /*
      275      597           BASED  VARIABLES
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:65   
      276      598        */
      277      599        %NI$DCT;
      278      647        /**/
      279      648        %EJECT;
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:66   
      280      649        /**/
      281      650        /*F*     NAME:     ITH$CHECK_DEVNAME
      282      651                 PURPOSE:  Make sure no duplicate devices names in a TIGR deck
      283      652                 DESCRIPTION: The name we are looking at in ITC$__ is passed in
      284      653                           here, and this routine looks through all of the previous
      285      654                           devices DCT entries.  If no matches are found RET.
      286      655                 INPUT:    NAME - 8 char device name being parsed in ITC.
      287      656                           NUMBER - not used in this routine (chan number check)
      288      657                 OUTPUT:   NONE - ALTRET if duplicate found, else RETURN
      289      658        */
      290      659    1   ITH$CHECK_DEVNAME : ENTRY (NAME, NUMBER) ALTRET;
      291      660
      292      661    2      DO DCTX = 1 TO N_DCTXMAX;
      293      662    2        IF N$DCT$$ -> N$DCT$(DCTX) ~= ADDR(NIL) THEN
      294      663    3          IF N$DCT$$ -> N$DCT$(DCTX) -> NI$DCT.DEVNM  =  NAME THEN DO;
      295      664    3            MESG.TEXT = NAME;     MESG.COUNT=4;
      296      665    3            CALL ITE$ERROR (%E$DUPDEVNAME, ADDR(MESG) );
      297      666    3            ALTRETURN;
      298      667    3          END; /* IF */
      299      668    2      END;  /* DO */
      300      669    1      RETURN;
      301      670        %EJECT;
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:67   
      302      671        /**/
      303      672        /*F*     NAME:     ITH$CHECK_CHANNUM
      304      673                 PURPOSE:  Check channel number to make sure in accepted range
      305      674                 DESCRIPTION: The channel number we are parsing is sent here
      306      675                           from ITC$ and this routine will make sure it is in
      307      676                           the acceptable range. ( 8 <= chan <= max ).
      308      677                 INPUT:    NAME - not used in this routine (devname check)
      309      678                           NUMBER - channel number to check (decimal value)
      310      679                 OUTPUT:   NONE - ALTRET if out of range, else RETURN
      311      680        */
      312      681    1   ITH$CHECK_CHANNUM : ENTRY (NAME, NUMBER) ALTRET;
      313      682
      314      683    2      IF NUMBER > HW_CHANS-1 THEN DO;
      315      684    2        CALL ITE$ERROR (%E$CHAN2BIG);
      316      685    2        ALTRETURN;
      317      686    2        END;
      318      687    2      IF NUMBER < 8 THEN DO;
      319      688    2        CALL ITE$ERROR (%E$CHAN2SMALL);
      320      689    2        ALTRETURN;
      321      690    2        END;
      322      691    1      RETURN;
      323      692        /**/
      324      693    1   END ITH$CHECK;

PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:68   
--  Include file information  --

   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   IT_ERROR_C.:E05TOU  is referenced.
   NI$TABLES.:E05TOU  is referenced.
   N$REQ.:E05TOU  is referenced.
   NI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$CHECK.

   Procedure ITH$CHECK requires 60 words for executable code.
   Procedure ITH$CHECK requires 14 words of local(AUTO) storage.

    No errors detected in file ITH$SUBR.:E05TSI    .

PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:69   

 Object Unit name= ITH$CHECK                                  File name= ITH$SUBR.:E05TOU
 UTS= JUL 29 '97 23:05:46.88 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    60     74  ITH$CHECK
    1  RoData even  none     6      6  ITH$CHECK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  ITH$CHECK
     0      3          yes     yes      Std        2  ITH$CHECK_DEVNAME
     0     50          yes     yes      Std        2  ITH$CHECK_CHANNUM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 ITE$ERROR
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:70   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     N$DCT$$                               N$FQ$                                 NI$FQ$
     NI$IBUF$                              NI$RP$                                N_DCTXMAX
     HW_CHANS                              B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:71   


      239        1        /*M*    Routines for ITC$CHECK to be more efficient */
      240        2        /*T***********************************************************/
      241        3        /*T*                                                         */
      242        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      243        5        /*T*                                                         */
      244        6        /*T***********************************************************/
      245        7        /**/
      246        8        /*X*/
      247        9        /**/
      248       10        /*P*     NAME:     ITH$CHECK
      249       11                 PURPOSE:  Routines for making ITC$CHECKs more efficient.
      250       12                 DESCRIPTION: Includes check device name and channel number
      251       13                              routines.
      252       14        */
      253       15        ITH$CHECK : PROC(NAME,NUMBER) ALTRET;

     15  0 000000   000000 700200 xent  ITH$CHECK    TSX0  ! X66_AUTO_2
         0 000001   000016 000002                    ZERO    14,2
         0 000002   000005 710000 0                  TRA     s:661

      254       16
      255       17    1   DCL NAME CHAR(8);
      256       18    1   DCL NUMBER SBIN;
      257       19        /*
      258       20           ENTRY DCLS
      259       21        */
      260       22    1   DCL ITE$ERROR ENTRY(2);
      261       23        /*
      262       24           INCLUDES
      263       25        */
      264       26        %INCLUDE NI_DATA_R;
      265      463        %INCLUDE IT_ERROR_C;
      266      546        %INCLUDE HF_DATA_R;
      267      589        /*
      268      590           AUTO  VARIABLES
      269      591        */
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:72   
      270      592    1   DCL DCTX SBIN;
      271      593    1   DCL 1 MESG,
      272      594    1      2 COUNT UBIN(9) UNAL,
      273      595    1      2 TEXT CHAR(8) UNAL;
      274      596        /*
      275      597           BASED  VARIABLES
      276      598        */
      277      599        %NI$DCT;
      278      647        /**/
      279      648        %EJECT;
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:73   
      280      649        /**/
      281      650        /*F*     NAME:     ITH$CHECK_DEVNAME
      282      651                 PURPOSE:  Make sure no duplicate devices names in a TIGR deck
      283      652                 DESCRIPTION: The name we are looking at in ITC$__ is passed in
      284      653                           here, and this routine looks through all of the previous
      285      654                           devices DCT entries.  If no matches are found RET.
      286      655                 INPUT:    NAME - 8 char device name being parsed in ITC.
      287      656                           NUMBER - not used in this routine (chan number check)
      288      657                 OUTPUT:   NONE - ALTRET if duplicate found, else RETURN
      289      658        */
      290      659    1   ITH$CHECK_DEVNAME : ENTRY (NAME, NUMBER) ALTRET;

    659  0 000003   000000 700200 xent  ITH$CHECK_D* TSX0  ! X66_AUTO_2
         0 000004   000016 000002                    ZERO    14,2

      291      660
      292      661    2      DO DCTX = 1 TO N_DCTXMAX;

    661  0 000005   000001 235007                    LDA     1,DL
         0 000006   200005 755100                    STA     DCTX,,AUTO
         0 000007   000044 710000 0                  TRA     s:668+1

      293      662    2        IF N$DCT$$ -> N$DCT$(DCTX) ~= ADDR(NIL) THEN

    662  0 000010   000000 470400 xsym               LDP0    N$DCT$$
         0 000011   200005 720100                    LXL0    DCTX,,AUTO
         0 000012   000000 236110                    LDQ     0,X0,PR0
         0 000013   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000014   000043 600000 0                  TZE     s:668

      294      663    3          IF N$DCT$$ -> N$DCT$(DCTX) -> NI$DCT.DEVNM  =  NAME THEN DO;

    663  0 000015   000000 471510                    LDP1    0,X0,PR0
         0 000016   200003 473500                    LDP3    @NAME,,AUTO
         0 000017   040100 106500                    CMPC    fill='040'O
         0 000020   100002 000010                    ADSC9   2,,PR1                   cn=0,n=8
         0 000021   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:74   
         0 000022   000043 601000 0                  TNZ     s:668

      295      664    3            MESG.TEXT = NAME;     MESG.COUNT=4;

    664  0 000023   040100 100500                    MLR     fill='040'O
         0 000024   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
         0 000025   200006 200010                    ADSC9   MESG,,AUTO               cn=1,n=8

    664  0 000026   004000 236003                    LDQ     2048,DU
         0 000027   200006 552140                    STBQ    MESG,'40'O,AUTO

      296      665    3            CALL ITE$ERROR (%E$DUPDEVNAME, ADDR(MESG) );

    665  0 000030   200006 631500                    EPPR1   MESG,,AUTO
         0 000031   200012 451500                    STP1    MESG+4,,AUTO
         0 000032   200012 634500                    EPPR4   MESG+4,,AUTO
         0 000033   200015 454500                    STP4    MESG+7,,AUTO
         0 000034   000001 236000 1                  LDQ     1
         0 000035   200014 756100                    STQ     MESG+6,,AUTO
         0 000036   200014 630500                    EPPR0   MESG+6,,AUTO
         0 000037   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000040   000000 701000 xent               TSX1    ITE$ERROR
         0 000041   000000 011000                    NOP     0

      297      666    3            ALTRETURN;

    666  0 000042   000000 702200 xent               TSX2  ! X66_AALT

      298      667    3          END; /* IF */
      299      668    2      END;  /* DO */

    668  0 000043   200005 054100                    AOS     DCTX,,AUTO
         0 000044   200005 236100                    LDQ     DCTX,,AUTO
         0 000045   000000 116000 xsym               CMPQ    N_DCTXMAX
         0 000046   000010 604400 0                  TMOZ    s:662

      300      669    1      RETURN;
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:75   

    669  0 000047   000000 702200 xent               TSX2  ! X66_ARET

      301      670        %EJECT;
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:76   
      302      671        /**/
      303      672        /*F*     NAME:     ITH$CHECK_CHANNUM
      304      673                 PURPOSE:  Check channel number to make sure in accepted range
      305      674                 DESCRIPTION: The channel number we are parsing is sent here
      306      675                           from ITC$ and this routine will make sure it is in
      307      676                           the acceptable range. ( 8 <= chan <= max ).
      308      677                 INPUT:    NAME - not used in this routine (devname check)
      309      678                           NUMBER - channel number to check (decimal value)
      310      679                 OUTPUT:   NONE - ALTRET if out of range, else RETURN
      311      680        */
      312      681    1   ITH$CHECK_CHANNUM : ENTRY (NAME, NUMBER) ALTRET;

    681  0 000050   000000 700200 xent  ITH$CHECK_C* TSX0  ! X66_AUTO_2
         0 000051   000016 000002                    ZERO    14,2

      313      682
      314      683    2      IF NUMBER > HW_CHANS-1 THEN DO;

    683  0 000052   200004 470500                    LDP0    @NUMBER,,AUTO
         0 000053   000000 236100                    LDQ     0,,PR0
         0 000054   000064 604000 0                  TMI     s:687
         0 000055   000000 116000 xsym               CMPQ    HW_CHANS
         0 000056   000064 602000 0                  TNC     s:687

      315      684    2        CALL ITE$ERROR (%E$CHAN2BIG);

    684  0 000057   000003 630400 1                  EPPR0   3
         0 000060   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000061   000000 701000 xent               TSX1    ITE$ERROR
         0 000062   000000 011000                    NOP     0

      316      685    2        ALTRETURN;

    685  0 000063   000000 702200 xent               TSX2  ! X66_AALT

      317      686    2        END;
      318      687    2      IF NUMBER < 8 THEN DO;
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:77   

    687  0 000064   000010 116007                    CMPQ    8,DL
         0 000065   000073 605000 0                  TPL     s:691

      319      688    2        CALL ITE$ERROR (%E$CHAN2SMALL);

    688  0 000066   000005 630400 1                  EPPR0   5
         0 000067   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000070   000000 701000 xent               TSX1    ITE$ERROR
         0 000071   000000 011000                    NOP     0

      320      689    2        ALTRETURN;

    689  0 000072   000000 702200 xent               TSX2  ! X66_AALT

      321      690    2        END;
      322      691    1      RETURN;

    691  0 000073   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   1     000   000000 000256   000000 006000   000000 000163   000002 006000    ...........s....
   1     004   000000 000255   000004 006000                                    ........
      323      692        /**/
      324      693    1   END ITH$CHECK;

PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:78   
--  Include file information  --

   HF_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   IT_ERROR_C.:E05TOU  is referenced.
   NI$TABLES.:E05TOU  is referenced.
   N$REQ.:E05TOU  is referenced.
   NI_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ITH$CHECK.
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:79   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @NAME                      4-0-0/w PTR         r     1 @NUMBER
     5-0-0/w SBIN        r     1 DCTX                       6-0-0/c STRC(81)    r     1 MESG
    *0-0-0/c CHAR(8)     r     1 NAME                      *0-0-0/w SBIN        r     1 NUMBER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 HW_CHANS                   0-0-0/w PTR         r     1 N$DCT$$
     0-0-0/w PTR         r     1 N$FQ$                      0-0-0/w PTR         r     1 NI$FQ$
     0-0-0/w PTR         r     1 NI$IBUF$                   0-0-0/w PTR         r     1 NI$RP$
     0-0-0/w SBIN        r     1 N_DCTXMAX

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 N$DCT$(0:0)                0-0-0/w STRC(1332)  r     1 NI$DCT


   Procedure ITH$CHECK requires 60 words for executable code.
   Procedure ITH$CHECK requires 14 words of local(AUTO) storage.

    No errors detected in file ITH$SUBR.:E05TSI    .
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:80   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:81   
          MINI XREF LISTING

DCTX
       592**DCL       661<<DOINDEX   662>>IF        663>>IF
HW_CHANS
       587**DCL       683>>IF
ITE$ERROR
        22**DCL-ENT   665--CALL      684--CALL      688--CALL
MESG
       593**DCL       665--CALL
MESG.COUNT
       594**DCL       664<<ASSIGN
MESG.TEXT
       595**DCL       664<<ASSIGN
N$DCT$
       458**DCL       662>>IF        663>>IF
N$DCT$$
       324**DCL       458--IMP-PTR   662>>IF        663>>IF
N$FQ$
       324**DCL       459--IMP-PTR
N$REQ_INIT.BUFADDR
       343**DCL       344--REDEF     344--REDEF
N$REQ_INIT.DLA.DRELADDR
       335**DCL       335--REDEF
N$REQ_INIT.DVE.EOMCHAR
       372**DCL       373--REDEF
N$REQ_INIT.EAINFO
       366**DCL       366--REDEF
N$REQ_INIT.EAINFOX
       366**DCL       367--REDEF
N$REQ_INIT.EVNTINFO
       367**DCL       367--REDEF
N$REQ_INIT.STATUS
       348**DCL       354--REDEF
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:82   
NAME
        17**DCL        15--PROC      659--ENTRY     663>>IF        664>>ASSIGN    681--ENTRY
NI$DCT.DEVNM
       608**DCL       663>>IF
NI$DCT.DP
       628**DCL       635--REDEF     638--REDEF     639--REDEF     641--REDEF     641--REDEF     642--REDEF
       643--REDEF     643--REDEF
NI$DCT.MPC.IOCHANX
       636**DCL       636--REDEF
NI$FQ$
       384**DCL       460--IMP-PTR
NI$IBUF$
       384**DCL       460--IMP-PTR
NI$IMXMBX_INIT.PAGED_BASE
       394**DCL       395--REDEF     395--REDEF
NI$IMXMBX_INIT.SIZE
       396**DCL       396--REDEF
NI$REQ_INIT.DCW
       418**DCL       421--REDEF
NI$REQ_INIT.DCW.TALLY
       419**DCL       419--REDEF
NI$REQ_INIT.IDCW.EXTA
       421**DCL       421--REDEF
NI$REQ_INIT.PCW
       423**DCL       427--REDEF
NI$REQ_INIT.SEEK
       428**DCL       429--REDEF     430--REDEF
NI$RP$
       432**DCL       462--IMP-PTR
NI_MBX_INIT.DCW.CONTROL.AE
       454**DCL       454--REDEF
NI_MBX_INIT.LPW.CONTROL.AE
       450**DCL       450--REDEF
NUMBER
        18**DCL        15--PROC      659--ENTRY     681--ENTRY     683>>IF        687>>IF
N_DCTXMAX
PL6.E3A0      #006=ITH$CHECK File=ITH$SUBR.:E05TSI                               TUE 07/29/97 23:05 Page:83   
       432**DCL       661>>DOINDEX
