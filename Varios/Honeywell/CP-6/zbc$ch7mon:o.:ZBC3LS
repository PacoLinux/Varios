

CC.C03    File=zbc$ch7mon:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: ch7mon.c,v 3.14 87/03/25 22:45:20 ceriel Exp $ */
        6         6             /* SEMANTIC ANALYSIS (CHAPTER 7RM) -- MONADIC OPERATORS */
        7         7
        8         8             #include "botch_free:h"
        9         9             #include <alloc:h>
       10        10             #include "nofloat:h"
       11        11             #include "nobitfield:h"
       12        12             #include "Lpars:h"
       13        13             #include "arith:h"
       14        14             #include "type:h"
       15        15             #include "label:h"
       16        16             #include "expr:h"
       17        17             #include "idf:h"
       18        18             #include "def:h"
       19        19
       20        20             extern char options[];
       21        21             extern long full_mask[/*MAXSIZE*/];  /* cstoper.c */
       22        22             char *symbol2str();
       23        23
       24        24             ch7mon(oper, expp)
       25        25              register struct expr **expp;
       26        26             {
       27        27    1         /* The monadic prefix operator oper is applied to *expp.
       28        28    1         */
       29        29    1         register struct expr *expr;
       30        30    1
       31        31    1         switch (oper)  {
       32        32    2         case '*':         /* RM 7.2 */
       33        33    2            /* no FIELD type allowed   */
       34        34    2            if ((*expp)->ex_type->tp_fund == ARRAY)
       35        35    2               array2pointer(*expp);
       36        36    2            if ((*expp)->ex_type->tp_fund != POINTER) {
CC.C03    File=zbc$ch7mon:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37    3               if ((*expp)->ex_type->tp_fund == FUNCTION)
       38        38    3                  break;
       39        39    3               expr_error(*expp,
       40        40    3                  "* applied to non-pointer (%s)",
       41        41    3                  symbol2str((*expp)->ex_type->tp_fund));
       42        42    3            }
       43        43    2            else {
       44        44    3               int lval = 1;
       45        45    3               expr = *expp;
       46        46    3               if (expr->ex_lvalue == 0)   {
       47        47    4                  /* dereference in administration only */
       48        48    4                  expr->ex_type = expr->ex_type->tp_up;
       49        49    4        #if 1
       50        50    4                  if (expr->ex_class == String) {
       51        51    5                     int value = *(expr->SG_VALUE);
       52        52    5                     expr->ex_class = Value;
       53        53    5                     expr->VL_CLASS = Const;
       54        54    5                     expr->VL_VALUE = value;
       55        55    5                     expr->ex_type = int_type;
       56        56    5                     lval = 0;
       57        57    5                     }
       58        58    4        #endif
       59        59    4                  }
       60        60    3               else  /* runtime code */
       61        61    3                  *expp = new_oper(expr->ex_type->tp_up, NILEXPR,
       62        62    3                           '*', expr);
       63        63    3               (*expp)->ex_lvalue = (   lval &&
       64        64    3                  (*expp)->ex_type->tp_fund != ARRAY &&
       65        65    3                  (*expp)->ex_type->tp_fund != FUNCTION);
       66        66    3               (*expp)->ex_modlvalue = (*expp)->ex_lvalue;
       67        67    3            }
       68        68    2            break;
       69        69    2         case '&':
       70        70    2            if ((*expp)->ex_type->tp_fund == ARRAY) {
       71        71    3               if ((*expp)->ex_class != Value || (*expp)->VL_CLASS != Name ||
       72        72    3                   (*expp)->VL_VALUE != (arith)0     ) {
       73        73    4                  warning("& before array: ignored");
CC.C03    File=zbc$ch7mon:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    4                  array2pointer(*expp);
       75        75    4                  }
       76        76    3               else {
       77        77    4                  (*expp)->ex_type = pointer_to( (*expp)->ex_type, (arith)0 );
       78        78    4                  }
       79        79    3            }
       80        80    2            else
       81        81    2            if ((*expp)->ex_type->tp_fund == FUNCTION) {
       82        82    3               warning("& before function: ignored");
       83        83    3               function2pointer(*expp);
       84        84    3            }
       85        85    2            else
       86        86    2        #ifndef NOBITFIELD
       87        87    2            if ((*expp)->ex_type->tp_fund == FIELD)
       88        88    2               expr_error(*expp, "& applied to field variable");
       89        89    2            else
       90        90    2        #endif NOBITFIELD
       91        91    2            if (!(*expp)->ex_modlvalue)
       92        92    2               expr_error(*expp, "& applied to non-lvalue");
       93        93    2            else {
       94        94    3               /* assume that enums are already filtered out   */
       95        95    3               if (  (*expp)->ex_class == Value
       96        96    3               && (*expp)->VL_CLASS == Name
       97        97    3               ) {
       98        98    4                  register struct def *def =
       99        99    4                     (*expp)->VL_IDF->id_def;
      100       100    4
      101       101    4                  /* &<var> indicates that <var>
      102       102    4                     cannot be used as register
      103       103    4                     anymore
      104       104    4                  */
      105       105    4                  if (def->df_sc == REGISTER) {
      106       106    5                     expr_error(*expp,
      107       107    5                     "& on register variable not allowed");
      108       108    5                     break;   /* break case '&' */
      109       109    5                  }
      110       110    4                  def->df_register = REG_NONE;
CC.C03    File=zbc$ch7mon:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111    4               }
      112       112    3               (*expp)->ex_type = pointer_to((*expp)->ex_type, 0);
      113       113    3               (*expp)->ex_modlvalue = (*expp)->ex_lvalue = 0;
      114       114    3            }
      115       115    2            break;
      116       116    2         case '~':
      117       117    2        #ifndef NOFLOAT
      118       118    2         {
      119       119    3            int fund = (*expp)->ex_type->tp_fund;
      120       120    3
      121       121    3            if (fund == FLOAT || fund == DOUBLE)   {
      122       122    4               expr_error(
      123       123    4                  *expp,
      124       124    4                  "~ not allowed on %s operands",
      125       125    4                  symbol2str(fund)
      126       126    4               );
      127       127    4               erroneous2int(expp);
      128       128    4               break;
      129       129    4            }
      130       130    3            /* FALLTHROUGH */
      131       131    3         }
      132       132    2        #endif NOFLOAT
      133       133    2         case '-':
      134       134    2            any2arith(expp, oper);
      135       135    2            if (is_cp_cst(*expp))   {
      136       136    3               unsigned long o1 = (*expp)->VL_VALUE;
      137       137    3
      138       138    3               (*expp)->VL_VALUE = (oper == '-') ? 0-o1 :
      139       139    3                 ((*expp)->ex_type->tp_unsigned == UNSIGNED ?
      140       140    3                  (~o1) & full_mask[(*expp)->ex_type->tp_size] :
      141       141    3                  ~o1
      142       142    3                 );
      143       143    3            }
      144       144    2            else
      145       145    2        #ifndef NOFLOAT
      146       146    2            if (is_fp_cst(*expp))
      147       147    2               switch_sign_fp(*expp);
CC.C03    File=zbc$ch7mon:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    2            else
      149       149    2        #endif NOFLOAT
      150       150    2               *expp = new_oper((*expp)->ex_type,
      151       151    2                     NILEXPR, oper, *expp);
      152       152    2            break;
      153       153    2         case '!':
      154       154    2            if ((*expp)->ex_type->tp_fund == FUNCTION)
      155       155    2               function2pointer(*expp);
      156       156    2            if ((*expp)->ex_type->tp_fund != POINTER)
      157       157    2               any2arith(expp, oper);
      158       158    2            opnd2test(expp, '!');
      159       159    2            if (is_cp_cst(*expp))   {
      160       160    3               (*expp)->VL_VALUE = !((*expp)->VL_VALUE);
      161       161    3               (*expp)->ex_type = int_type;  /* a cast ???(EB) */
      162       162    3            }
      163       163    2        #ifdef FLOATOPT
      164       164    2            else if (is_fp_cst(*expp)) {
      165       165    3               fill_int_expr(*expp, !(*expp)->FL_VALUE, INT);
      166       166    3            }
      167       167    2        #endif
      168       168    2            else
      169       169    2               *expp = new_oper(int_type, NILEXPR, oper, *expp);
      170       170    2            (*expp)->ex_flags |= EX_LOGICAL;
      171       171    2            break;
      172       172    2         case PLUSPLUS:
      173       173    2         case MINMIN:
      174       174    2            ch7incr(expp, oper);
      175       175    2            break;
      176       176    2         case SIZEOF:
      177       177    2            if (  (*expp)->ex_class == Value
      178       178    2            && (*expp)->VL_CLASS == Name
      179       179    2            && (*expp)->VL_IDF->id_def->df_formal_array
      180       180    2            )
      181       181    2               warning("sizeof formal array %s is sizeof pointer!",
      182       182    2                  (*expp)->VL_IDF->id_text);
      183       183    2            if ((*expp)->ex_type->tp_fund == FIELD)
      184       184    2               expr_warning(*expp, "sizeof applied to field variable");
CC.C03    File=zbc$ch7mon:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185    2            if ( (*expp)->ex_class == String)
      186       186    2               expr = intexpr( (*expp)->SG_LEN, INT);
      187       187    2            else expr = intexpr(size_of_type((*expp)->ex_type, "object"), INT);
      188       188    2            expr->ex_flags |= EX_SIZEOF;
      189       189    2            free_expression(*expp);
      190       190    2            *expp = expr;
      191       191    2            break;
      192       192    2         case '+':
      193       193    2            any2arith(expp, oper);
      194       194    2            break;
      195       195    2
      196       196    2         case ALIGNOF:
      197       197    2            if (  (*expp)->ex_class == Value
      198       198    2            && (*expp)->VL_CLASS == Name
      199       199    2            && (*expp)->VL_IDF->id_def->df_formal_array
      200       200    2            )
      201       201    2               warning("__alignof formal array %s is __alignof pointer!",
      202       202    2                  (*expp)->VL_IDF->id_text);
      203       203    2            expr = intexpr(align_of_type((*expp)->ex_type, "object"), INT);
      204       204    2            expr->ex_flags |= EX_SIZEOF;
      205       205    2            free_expression(*expp);
      206       206    2            *expp = expr;
      207       207    2            break;
      208       208    2         }
      209       209    1        }
      210       210
---  Include file information  ---

   zbc$botch_free:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$ch7mon:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
   zbc$label:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$ch7mon:c.:ZBC3TSI
