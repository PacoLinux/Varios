VERSION A05

PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:1    
        1        1        /*M* VDA$LOWER - Accessor routines for lower-level (non-file-level) nodes */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDA$LOWER
       12       12            PURPOSE: Accessor routines to manipulate nodes below the file level.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDA$LREAD
       17       17                If an optional absolute location and/or an optional
       18       18                relative increment are given, will position the specified stream
       19       19                to the specified node.  Then, if a passed "read-flag" is set,
       20       20                will read the node into the port level-registers.
       21       21                The stream and port must currently be open.
       22       22
       23       23                VDA$LWRITE
       24       24                If an optional absolute location is given, will position
       25       25                the specified stream to the specified node.  Then
       26       26                will write the node into the port level-registers:
       27       27                the given Spec and Data components will replace those of the
       28       28                node in the port registers.
       29       29                If this is an internal file and the key doesn't yet exist
       30       30                in the file, we'll build a new node and insert it into the
       31       31                file right now.
       32       32                For external files, we don't go to the file 'til we do a
       33       33                FLUSH operation.
       34       34                The stream and port must currently be open.
       35       35
       36       36                VDA$LDELETE
       37       37                If an optional range is given, will position the
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:2    
       38       38                specified stream to the specified node.  Then
       39       39                will delete the nodes included in the range from the
       40       40                file, and update all other streams open to this file.
       41       41                The stream and port must currently be open.
       42       42
       43       43                VDA$LSAVE_OLD_NODE
       44       44                For use by Accessor routines only.  Saves an internal
       45       45                copy (in the History file) of a node being replaced/deleted.
       46       46        */
       47       47
       48       48        /*D* NAME: VDA$LREAD
       49       49            PARAMETERS:
       50       50                STREAM - VD$STREAM to use.  This stream must be open to
       51       51                    an internal or external file.
       52       52                ABSOLUTE - Optional VD$LOCATION specifying an absolute location
       53       53                    to position to.  Only one of the following cases may hold:
       54       54                    If ABSOLUTE is omitted, we'll only position relative
       55       55                        to the stream's current position.
       56       56                    If ABSOLUTE is %CLEAR, we'll position to BOF:  the first
       57       57                        node at all levels (%LVL_LOWER thru record-level) in the file.
       58       58                    If ABSOLUTE.KEY (%(LVL_LOWER-1)) thru .KEY (n) is given,
       59       59                        these are keys for levels %LVL_LOWER thru n+1.  If the
       60       60                        file has more than n+1 levels, positioning and reading
       61       61                        will take place at the last level for which a key is given.
       62       62                    If EOF is given, we'll position to the EOF position of
       63       63                        the file at all levels.
       64       64                RELATIVE - Signed # of nodes to move relative to either
       65       65                    ABSOLUTE (if given) or the stream's current position.
       66       66                    RELATIVE>0 moves forward.
       67       67                    RELATIVE<0 moves backward.
       68       68                    RELATIVE=0 specifies that only ABSOLUTE positioning be performed.
       69       69                    To read sequentially, omit ABSOLUTE and pass RELATIVE = 1.
       70       70                    The granularity of RELATIVE is the level of the last
       71       71                    key given in ABSOLUTE, or if ABSOLUTE.KEYs are %CLEAR, the
       72       72                    record level of the file.
       73       73                READ - A BIT(1) flag; if set, after doing any positioning
       74       74                    requested via ABSOLUTE and RELATIVE, we'll read the node
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:3    
       75       75                    at the stream's current position.
       76       76            INPUT:
       77       77                None.
       78       78            OUTPUT:
       79       79                If positioning is requested, STREAM.CURRENT will be set:
       80       80                    If STREAM.CURRENT.EOF is not set, then
       81       81                    the STREAM.CURRENT.KEYs specify the keys of the node
       82       82                    nearest the requested one at level "n" (where "n" is
       83       83                    the index of the last key given in ABSOLUTE, or
       84       84                    the lowest level in the file structure if ABSOLUTE is
       85       85                    omitted or %CLEAR):
       86       86                        If STREAM.CURRENT.KEY (%(LVL_LOWER-1)) thru (n) ~=
       87       87                            ABSOLUTE.KEY (%(LVL_LOWER-1)) thru (n) and
       88       88                            RELATIVE = 0, then the specified key doesn't exist in
       89       89                            the file; in this case, we won't read anything,
       90       90                            even if READ is set.
       91       91                        If RELATIVE ~= 0, or ABSOLUTE omitted or .KEY = %CLEAR,
       92       92                            or STREAM.CURRENT.KEY (%(LVL_LOWER-1)) thru (n) =
       93       93                            ABSOLUTE.KEY (%(LVL_LOWER-1)) thru (n), then
       94       94                            the PORT.LEVEL.SPECs and .DATAs contain the Spec
       95       95                            and Data components of the requested nodes at all
       96       96                            levels.
       97       97                    If STREAM.CURRENT.EOF is set, then we hit
       98       98                        EOF (by request or while positioning the stream).  In
       99       99                        this case we won't read anything.
      100      100                    If ABSOLUTE = %CLEAR and RELATIVE = 0, then PORT.LEVELs
      101      101                        will contain the first node at each level of the file;
      102      102                        except that if the file is empty, STREAM.CURRENT.EOF
      103      103                        will be set.
      104      104                VD$STREAM.NEXT may be cleared.
      105      105            DESCRIPTION:
      106      106                If ABSOLUTE is given or RELATIVE is non-0, we first position
      107      107                the stream appropriately:
      108      108                    We'll always tell if the specified node exists; however,
      109      109                        if at entry STREAM.CURRENT or .NEXT already refers
      110      110                        to the specified node, we won't bother positioning the PORT.
      111      111                    If ABSOLUTE.EOF is set and RELATIVE = 0, don't mess with
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:4    
      112      112                        the port at all, just adjust the stream registers
      113      113                        appropriately.
      114      114                    If RELATIVE = 0, is ABSOLUTE.KEY equal to CURRENT.KEY? NEXT.KEY?
      115      115                        If so, we already know the node exists:  don't mess
      116      116                        with the port at all, just adjust the stream registers
      117      117                        appropriately.
      118      118                    We gotta go find the node randomly:  set up the VDA$PREAD
      119      119                        parameters to use the given ABSOLUTE and RELATIVE.
      120      120                    Call VDA$PREAD to position the PORT and optionally read
      121      121                        the node.
      122      122                        A "flush" operation may be performed on the set of
      123      123                        nodes in the port at entry:  if they have been
      124      124                        modified since being read, they will be flushed to the
      125      125                        file and to the Presenter.
      126      126                    If ABSOLUTE.KEY is given, RELATIVE = 0, and the requested
      127      127                        node doesn't exist in the file, then
      128      128                        STREAM.CURRENT.KEY/EOF will be set to the key of the
      129      129                        next node (if any) after the requested one, but we'll
      130      130                        simply return after the positioning:  we won't read the node.
      131      131                        If this positioning yields EOF, we return immediately.
      132      132
      133      133                Note on the meaning of "sequential" reads:
      134      134                    Passing RELATIVE=0 is similar to doing a KEYS-less M$READ
      135      135                        with no M$PRECORD before it.  However, this only works
      136      136                        once with the monitor:  the next RELATIVE=0 call (ie,
      137      137                        the next KEYS-less M$READ with no M$PRECORD before it)
      138      138                        will "read sequential"--acting like you passed
      139      139                        RELATIVE=1!!  VDA$LREAD makes the use of RELATIVE
      140      140                        more intuitive:
      141      141                            Passing RELATIVE=0 will always get the record
      142      142                                specified by ABSOLUTE or STREAM.CURRENT
      143      143                                (within the caveats on non-existing records),
      144      144                                no matter what the previous operation was.
      145      145                            Passing RELATIVE=1 will "read sequential".  To
      146      146                                read a bunch of records from a specific place
      147      147                                in the file, pass ABSOLUTE and RELATIVE=0 the
      148      148                                first time, then on successive calls omit
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:5    
      149      149                                ABSOLUTE and pass RELATIVE=1.
      150      150        */
      151      151
      152      152        VDA$LREAD: PROC (STREAM, ABSOLUTE, RELATIVE, READ) ALTRET;
      153      153
      154      154        %INCLUDE VD_MACROS_M;
      155     2369        %INCLUDE VD_PERR_C;
      156     2517
      157     2518        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
      158     2624        %VD$LOCATION (NAME=ABSOLUTE, STCLASS=PARAM);
      159     2652    1   DCL RELATIVE SBIN;
      160     2653    1   DCL READ BIT(1) ALIGNED;
      161     2654
      162     2655
      163     2656    1   DCL VDA$PREAD           ENTRY (6) ALTRET;
      164     2657    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
      165     2658    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
      166     2659    1   DCL VDG$MACC_LREAD      ENTRY (4);
      167     2660    1   DCL VDG$MACC_RETURN     ENTRY (1);
      168     2661    1   DCL VDG$ESCREECH        ENTRY (3);
      169     2662    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
      170     2663
      171     2664
      172     2665
      173     2666        %VD_6E (STCLASS=SYMREF);
      174     2702        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      175     2747
      176     2748
      177     2749
      178     2750    1   DCL REL SBIN;
      179     2751
      180     2752
      181     2753        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
      182     2851
      183     2852
      184     2853
      185     2854    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:6    
      186     2855    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);
      187     2856    2              ALTRETURN;
      188     2857    2              END;
      189     2858    1           IF VD_$$MON_ACC.V# > 0 THEN
      190     2859    1              CALL VDG$MACC_LREAD (STREAM, ABSOLUTE, RELATIVE, READ);
      191     2860    1           IF PORT.EXIST# = 0 THEN
      192     2861    1              CALL VDG$ESCREECH;
      193     2862
      194     2863    1           REL = RELATIVE;     /* So we can change it */
      195     2864    2           IF ADDR(ABSOLUTE) ~= ADDR(NIL) THEN DO;
      196     2865    2              IF (ABSOLUTE.EOF AND RELATIVE > 0)
      197     2866    2                OR (ABSOLUTE = %CLEAR AND RELATIVE < 0) THEN
      198     2867    2                 REL = 0;
      199     2868    2              END;
      200     2869
      201     2870                /*
      202     2871                *   We make most of the logic a subroutine 'cause it does
      203     2872                *       alot of optimization, which means that at funny,
      204     2873                *       spaghetti-like places it wants to say
      205     2874                *       "That's all folks!" and not call VDA$PREAD.
      206     2875                *       To make such logic readable, the subroutine just
      207     2876                *       RETURNs at such places, rather than GOTOing to a label.
      208     2877                */
      209     2878    1           CALL PREAD
      210     2879    1             ALTRET (PREAD_FAILED);
      211     2880
      212     2881
      213     2882    1           IF VD_$$MON_ACC.V# > 0 THEN
      214     2883    1              CALL VDG$MACC_RETURN (STREAM);
      215     2884    1           RETURN;
      216     2885
      217     2886
      218     2887    1   PREAD_FAILED: ;
      219     2888    1           ALTRETURN;
      220     2889
      221     2890                %BOX (TITLE=PREAD, PAGE=YES);
              2898    1
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:7    
              2902    1   /***************************************************************************
              2904    1    *                                                                         *
              2908    1            *                                   PREAD                                 *
              2910    1            *                                                                         *
              2912    1           ***************************************************************************/

      222     2916
      223     2917        /*I* NAME: PREAD
      224     2918            PARAMETERS:
      225     2919                None.
      226     2920            INPUT:
      227     2921                STREAM - VD$STREAM to use.
      228     2922                PORT - VD$PORT that STREAM is open to.
      229     2923                ABSOLUTE - Optional VD$LOCATION specifying the absolute
      230     2924                       location to position to and possibly read.
      231     2925                REL - Signed # of nodes to move relative to either
      232     2926                    the stream's current position or, if given, ABSOLUTE.
      233     2927            OUTPUT:
      234     2928                See output description of main routine.
      235     2929            DESCRIPTION:
      236     2930                See description of main routine.
      237     2931
      238     2932                Special cases detected and optimized by this routine:
      239     2933                o ABSOLUTE=EOF and REL>=0
      240     2934                    Set EOF in STREAM and return.
      241     2935                o (ABSOLUTE omitted or ABSOLUTE=STREAM.CURRENT) and REL=0
      242     2936                    If no READ requested, just return.
      243     2937                    Else, copy STREAM keys to PREAD_ABS and call VDA$PREAD.
      244     2938                o STREAM.NEXT is available (non-%CLEAR) and either:
      245     2939                    (ABSOLUTE omitted or ABSOLUTE=STREAM.CURRENT) and REL=1
      246     2940                                -- or --
      247     2941                    ABSOLUTE=STREAM.NEXT and REL=0
      248     2942                    If no READ requested, just copy STREAM.NEXT to .CURRENT
      249     2943                        and return.
      250     2944                    Else copy STREAM.NEXT to PREAD_ABS and call VDA$PREAD.
      251     2945        */
      252     2946
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:8    
      253     2947    1   PREAD:  PROC ALTRET;
      254     2948
      255     2949
      256     2950        %VD$LOCATION (NAME=PREAD_ABS, STCLASS=AUTO);
      257     2978    2   DCL PREAD_REL SBIN;
      258     2979    2   DCL ABS_EQ_CURR BIT(1) ALIGNED;
      259     2980    2   DCL ABS_EQ_NEXT BIT(1) ALIGNED;
      260     2981
      261     2982
      262     2983
      263     2984    2           PREAD_ABS = %CLEAR;
      264     2985    2           PREAD_REL = 0;
      265     2986
      266     2987    3           IF ADDR(ABSOLUTE) ~= ADDR(NIL) THEN DO;
      267     2988    3              IF ABSOLUTE.EOF AND REL >= 0 THEN
      268     2989    4   JUST_EOF:  DO;
      269     2990    4                 CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)
      270     2991    4                   ALTRET (OCLEAR_LOCATION_FAILED);
      271     2992    4                 CALL VDG$OCLEAR_LOCATION (STREAM.NEXT)
      272     2993    4                   ALTRET (OCLEAR_LOCATION_FAILED);
      273     2994    4                 STREAM.CURRENT.EOF = %TRUE;
      274     2995    4                 STREAM.LAST_OP# = %ACCOP_LOCATION;
      275     2996    4                 RETURN;
      276     2997    4                 END JUST_EOF;
      277     2998    3              END;
      278     2999
      279     3000    2           IF REL = 0 OR REL = 1 THEN
      280     3001    3   TEST_CURRENT_OR_NEXT: DO;
      281     3002    4              IF ADDR(ABSOLUTE) = ADDR(NIL) THEN DO;
      282     3003    4                 ABS_EQ_CURR = %TRUE;
      283     3004    4                 ABS_EQ_NEXT = %FALSE;
      284     3005    4                 END;
      285     3006    4              ELSE DO;
      286     3007    4                 IF ABSOLUTE = %CLEAR THEN
      287     3008    4                    EXIT TEST_CURRENT_OR_NEXT;     /* BOF */
      288     3009    4                 CALL COMPARE_ABS_WITH_CURR_AND_NEXT (ABS_EQ_CURR, ABS_EQ_NEXT)
      289     3010    4                   ALTRET (COMPARE_ABS_FAILED);
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:9    
      290     3011    4                 END;
      291     3012
      292     3013    4              IF ABS_EQ_CURR AND REL = 0 AND NOT READ THEN DO;
      293     3014                      %INCREMENT (INDX=%STG_LOC_STREAM_CURR);
      294     3017    4                 STREAM.LAST_OP# = %ACCOP_LOCATION;
      295     3018    4                 RETURN;
      296     3019    4                 END;
      297     3020
      298     3021    3              IF NOT READ
      299     3022    3                AND STREAM.NEXT ~= %CLEAR
      300     3023    3                AND ((ABS_EQ_CURR AND REL = 1)
      301     3024    3                OR (ABS_EQ_NEXT AND REL = 0)) THEN
      302     3025    4   ROLL_NEXT_TO_CURRENT: DO;
      303     3026                      %INCREMENT (INDX=%STG_LOC_STREAM_NEXT);
      304     3029    4                 CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)
      305     3030    4                   ALTRET (OCLEAR_LOCATION_FAILED);
      306     3031    4                 STREAM.CURRENT = STREAM.NEXT;
      307     3032    4                 STREAM.NEXT = %CLEAR;
      308     3033    4                 STREAM.LAST_OP# = %ACCOP_LOCATION;
      309     3034    4                 RETURN;
      310     3035    4                 END ROLL_NEXT_TO_CURRENT;
      311     3036    3              END TEST_CURRENT_OR_NEXT;
      312     3037
      313     3038
      314     3039                /*
      315     3040                *   Call VDA$PREAD to position and/or read.
      316     3041                */
      317     3042
      318     3043    2           IF ADDR(ABSOLUTE) = ADDR(NIL) THEN
      319     3044    2              PREAD_ABS = STREAM.CURRENT;
      320     3045    2           ELSE
      321     3046    2              PREAD_ABS = ABSOLUTE;
      322     3047    2           PREAD_REL = REL;
      323     3048
      324     3049    2           STREAM.LAST_OP# = %ACCOP_LOCATION;
      325     3050    2           CALL VDA$PREAD (PORT, PREAD_ABS, PREAD_REL, READ)
      326     3051    2             ALTRET (PREAD_FAILED);
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:10   
      327     3052    2           IF READ THEN
      328     3053    2              STREAM.LAST_OP# = %ACCOP_READ;
      329     3054
      330     3055                /*
      331     3056                *    Reposition the stream.
      332     3057                */
      333     3058    3           IF NOT (ADDR(ABSOLUTE) = ADDR(NIL) AND RELATIVE = 0) THEN DO;
      334     3059    3              CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)
      335     3060    3                ALTRET (OCLEAR_LOCATION_FAILED);
      336     3061    3              CALL VDG$OCOPY_LOCATION (PORT.CURRENT, STREAM.CURRENT)
      337     3062    3                ALTRET (OCOPY_LOCATION_FAILED);
      338     3063    3              CALL VDG$OCLEAR_LOCATION (STREAM.NEXT)
      339     3064    3                ALTRET (OCLEAR_LOCATION_FAILED);
      340     3065    3              END;
      341     3066
      342     3067    2           RETURN;
      343     3068
      344     3069
      345     3070    2   PREAD_FAILED: ;
      346     3071    2   OCLEAR_LOCATION_FAILED: ;
      347     3072    2   COMPARE_ABS_FAILED: ;
      348     3073    2   OCOPY_LOCATION_FAILED: ;
      349     3074    2           ALTRETURN;
      350     3075
      351     3076
      352     3077                %BOX (TITLE=COMPARE_ABS_WITH_CURR_AND_NEXT);

              3089    2   /***************************************************************************
              3091    2    *                                                                         *
              3095    2            *                       COMPARE_ABS_WITH_CURR_AND_NEXT                    *
              3097    2            *                                                                         *
              3099    2           ***************************************************************************/

      353     3103
      354     3104        /*I* NAME: COMPARE_ABS_WITH_CURR_AND_NEXT
      355     3105            PARAMETERS:
      356     3106                ABS_EQ_CURR - An uninitialized BIT(1) flag.
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:11   
      357     3107                ABS_EQ_NEXT - An uninitialized BIT(1) flag.
      358     3108            INPUT:
      359     3109                STREAM - The stream to use.
      360     3110                ABSOLUTE - VD$LOCATION (must be given if you call this rtn).
      361     3111            OUTPUT:
      362     3112                (Level %LVL_FILE of STREAM is excluded from the following tests.)
      363     3113                ABS_EQ_CURR will be set if all of ABSOLUTE's keys equal all of
      364     3114                    STREAM.CURRENT's keys.
      365     3115                ABS_EQ_NEXT will be set if all of ABSOLUTE's keys equal all of
      366     3116                    STREAM.NEXT's keys.
      367     3117            DESCRIPTION:
      368     3118                For each level from %LVL_LOWER 'til ABSOLUTE's key is %CLEAR,
      369     3119                compare ABSOLUTE.KEY (level) with STREAM.CURRENT.KEY (level)
      370     3120                and STREAM.NEXT.KEY (level).  If all ABSOLUTE.KEYs are equal
      371     3121                to either one, set the appropriate ABS_EQ_x flag and return.
      372     3122        */
      373     3123
      374     3124    2   COMPARE_ABS_WITH_CURR_AND_NEXT: PROC (ABS_EQ_CURR, ABS_EQ_NEXT) ALTRET;
      375     3125
      376     3126    3   DCL ABS_EQ_CURR BIT(1) ALIGNED;
      377     3127    3   DCL ABS_EQ_NEXT BIT(1) ALIGNED;
      378     3128
      379     3129
      380     3130    3   DCL INDX SBIN;
      381     3131    3   DCL CAND_KEY$ PTR;
      382     3132    3   DCL ABS_KEY$ PTR;
      383     3133
      384     3134
      385     3135        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CAND_KEY$)");
      386     3158        %VD$TEXTC (NAME=ABS$KEY, STCLASS="BASED(ABS_KEY$)");
      387     3181        %VD$TEXTC_REMOTE;
      388     3242
      389     3243
      390     3244    4           IF ABSOLUTE.EOF THEN DO;
      391     3245    5              IF STREAM.CURRENT.EOF THEN DO;
      392     3246    5                 ABS_EQ_CURR = %TRUE;
      393     3247    5                 ABS_EQ_NEXT = %FALSE;
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:12   
      394     3248    5                 RETURN;
      395     3249    5                 END;
      396     3250    5              IF STREAM.NEXT.EOF THEN DO;
      397     3251    5                 ABS_EQ_CURR = %FALSE;
      398     3252    5                 ABS_EQ_NEXT = %TRUE;
      399     3253    5                 RETURN;
      400     3254    5                 END;
      401     3255    4              END;
      402     3256
      403     3257    4           IF STREAM.CURRENT.EOF THEN DO;
      404     3258    4              ABS_EQ_CURR = %FALSE;
      405     3259    4              ABS_EQ_NEXT = %FALSE;
      406     3260    4              RETURN;
      407     3261    4              END;
      408     3262
      409     3263
      410     3264    3           INDX = %(LVL_LOWER-1);
      411     3265    3           ABS_EQ_CURR = %TRUE;
      412     3266    3           ABS_EQ_NEXT = ~ STREAM.NEXT.EOF;  /* Assume TRUE if not eof */
      413     3267    4           DO WHILE (INDX < %(MX_LOCATION_LEVELS-1))
      414     3268    4             AND (ABS_EQ_CURR OR ABS_EQ_NEXT)
      415     3269    4             AND (ABSOLUTE.KEY (INDX) ~= %CLEAR);
      416     3270                   %GETKEY (KEY=ABSOLUTE.KEY, INDX=INDX,
      417     3271                   PTR=ABS_KEY$);
      418     3281    5              IF ABS_EQ_CURR THEN DO;
      419     3282    5                 IF STREAM.CURRENT.KEY (INDX) = %CLEAR THEN
      420     3283    5                    ABS_EQ_CURR = %FALSE;
      421     3284    6                 ELSE DO;
      422     3285                         %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=INDX,
      423     3286                         PTR=CAND_KEY$);
      424     3296    6                    IF ABS$KEY.BYTES ~= CAND$KEY.BYTES THEN
      425     3297    6                       ABS_EQ_CURR = %FALSE;
      426     3298    6                    END;
      427     3299    5                 END;
      428     3300    5              IF ABS_EQ_NEXT THEN DO;
      429     3301    5                 IF STREAM.NEXT.KEY (INDX) = %CLEAR THEN
      430     3302    5                    ABS_EQ_NEXT = %FALSE;
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:13   
      431     3303    6                 ELSE DO;
      432     3304                         %GETKEY (KEY=STREAM.NEXT.KEY, INDX=INDX,
      433     3305                         PTR=CAND_KEY$);
      434     3315    6                    IF ABS$KEY.BYTES ~= CAND$KEY.BYTES THEN
      435     3316    6                       ABS_EQ_NEXT = %FALSE;
      436     3317    6                    END;
      437     3318    5                 END;
      438     3319    4              INDX = INDX + 1;
      439     3320    4              END;
      440     3321
      441     3322    3           RETURN;
      442     3323
      443     3324    3   END COMPARE_ABS_WITH_CURR_AND_NEXT;
      444     3325
      445     3326    2   END PREAD;
      446     3327
      447     3328    1   END VDA$LREAD;
      448     3329        %EOD;

PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:14   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$LREAD.

   Procedure VDA$LREAD requires 381 words for executable code.
   Procedure VDA$LREAD requires 32 words of local(AUTO) storage.

PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:15   

 Object Unit name= VDA$LREAD                                  File name= VDA$LOWER.:VDA5TOU
 UTS= JUL 04 '97 11:05:49.28 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   381    575  VDA$LREAD
    1  RoData even  none     1      1  VDA$LREAD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        4  VDA$LREAD

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VDG$EBREAK_ACKNOWLEDGE
         yes           Std       4 VDG$MACC_LREAD
         yes           Std       3 VDG$ESCREECH
         yes           Std       1 VDG$MACC_RETURN
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       6 VDA$PREAD
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:16   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 VD_$$MON_ACC                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:17   


        1        1        /*M* VDA$LOWER - Accessor routines for lower-level (non-file-level) nodes */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* MCR=NO, DMC=YES */
        9        9        /*T*/
       10       10
       11       11        /*P* NAME: VDA$LOWER
       12       12            PURPOSE: Accessor routines to manipulate nodes below the file level.
       13       13            DESCRIPTION:
       14       14                This module contains several external routines:
       15       15
       16       16                VDA$LREAD
       17       17                If an optional absolute location and/or an optional
       18       18                relative increment are given, will position the specified stream
       19       19                to the specified node.  Then, if a passed "read-flag" is set,
       20       20                will read the node into the port level-registers.
       21       21                The stream and port must currently be open.
       22       22
       23       23                VDA$LWRITE
       24       24                If an optional absolute location is given, will position
       25       25                the specified stream to the specified node.  Then
       26       26                will write the node into the port level-registers:
       27       27                the given Spec and Data components will replace those of the
       28       28                node in the port registers.
       29       29                If this is an internal file and the key doesn't yet exist
       30       30                in the file, we'll build a new node and insert it into the
       31       31                file right now.
       32       32                For external files, we don't go to the file 'til we do a
       33       33                FLUSH operation.
       34       34                The stream and port must currently be open.
       35       35
       36       36                VDA$LDELETE
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:18   
       37       37                If an optional range is given, will position the
       38       38                specified stream to the specified node.  Then
       39       39                will delete the nodes included in the range from the
       40       40                file, and update all other streams open to this file.
       41       41                The stream and port must currently be open.
       42       42
       43       43                VDA$LSAVE_OLD_NODE
       44       44                For use by Accessor routines only.  Saves an internal
       45       45                copy (in the History file) of a node being replaced/deleted.
       46       46        */
       47       47
       48       48        /*D* NAME: VDA$LREAD
       49       49            PARAMETERS:
       50       50                STREAM - VD$STREAM to use.  This stream must be open to
       51       51                    an internal or external file.
       52       52                ABSOLUTE - Optional VD$LOCATION specifying an absolute location
       53       53                    to position to.  Only one of the following cases may hold:
       54       54                    If ABSOLUTE is omitted, we'll only position relative
       55       55                        to the stream's current position.
       56       56                    If ABSOLUTE is %CLEAR, we'll position to BOF:  the first
       57       57                        node at all levels (%LVL_LOWER thru record-level) in the file.
       58       58                    If ABSOLUTE.KEY (%(LVL_LOWER-1)) thru .KEY (n) is given,
       59       59                        these are keys for levels %LVL_LOWER thru n+1.  If the
       60       60                        file has more than n+1 levels, positioning and reading
       61       61                        will take place at the last level for which a key is given.
       62       62                    If EOF is given, we'll position to the EOF position of
       63       63                        the file at all levels.
       64       64                RELATIVE - Signed # of nodes to move relative to either
       65       65                    ABSOLUTE (if given) or the stream's current position.
       66       66                    RELATIVE>0 moves forward.
       67       67                    RELATIVE<0 moves backward.
       68       68                    RELATIVE=0 specifies that only ABSOLUTE positioning be performed.
       69       69                    To read sequentially, omit ABSOLUTE and pass RELATIVE = 1.
       70       70                    The granularity of RELATIVE is the level of the last
       71       71                    key given in ABSOLUTE, or if ABSOLUTE.KEYs are %CLEAR, the
       72       72                    record level of the file.
       73       73                READ - A BIT(1) flag; if set, after doing any positioning
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:19   
       74       74                    requested via ABSOLUTE and RELATIVE, we'll read the node
       75       75                    at the stream's current position.
       76       76            INPUT:
       77       77                None.
       78       78            OUTPUT:
       79       79                If positioning is requested, STREAM.CURRENT will be set:
       80       80                    If STREAM.CURRENT.EOF is not set, then
       81       81                    the STREAM.CURRENT.KEYs specify the keys of the node
       82       82                    nearest the requested one at level "n" (where "n" is
       83       83                    the index of the last key given in ABSOLUTE, or
       84       84                    the lowest level in the file structure if ABSOLUTE is
       85       85                    omitted or %CLEAR):
       86       86                        If STREAM.CURRENT.KEY (%(LVL_LOWER-1)) thru (n) ~=
       87       87                            ABSOLUTE.KEY (%(LVL_LOWER-1)) thru (n) and
       88       88                            RELATIVE = 0, then the specified key doesn't exist in
       89       89                            the file; in this case, we won't read anything,
       90       90                            even if READ is set.
       91       91                        If RELATIVE ~= 0, or ABSOLUTE omitted or .KEY = %CLEAR,
       92       92                            or STREAM.CURRENT.KEY (%(LVL_LOWER-1)) thru (n) =
       93       93                            ABSOLUTE.KEY (%(LVL_LOWER-1)) thru (n), then
       94       94                            the PORT.LEVEL.SPECs and .DATAs contain the Spec
       95       95                            and Data components of the requested nodes at all
       96       96                            levels.
       97       97                    If STREAM.CURRENT.EOF is set, then we hit
       98       98                        EOF (by request or while positioning the stream).  In
       99       99                        this case we won't read anything.
      100      100                    If ABSOLUTE = %CLEAR and RELATIVE = 0, then PORT.LEVELs
      101      101                        will contain the first node at each level of the file;
      102      102                        except that if the file is empty, STREAM.CURRENT.EOF
      103      103                        will be set.
      104      104                VD$STREAM.NEXT may be cleared.
      105      105            DESCRIPTION:
      106      106                If ABSOLUTE is given or RELATIVE is non-0, we first position
      107      107                the stream appropriately:
      108      108                    We'll always tell if the specified node exists; however,
      109      109                        if at entry STREAM.CURRENT or .NEXT already refers
      110      110                        to the specified node, we won't bother positioning the PORT.
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:20   
      111      111                    If ABSOLUTE.EOF is set and RELATIVE = 0, don't mess with
      112      112                        the port at all, just adjust the stream registers
      113      113                        appropriately.
      114      114                    If RELATIVE = 0, is ABSOLUTE.KEY equal to CURRENT.KEY? NEXT.KEY?
      115      115                        If so, we already know the node exists:  don't mess
      116      116                        with the port at all, just adjust the stream registers
      117      117                        appropriately.
      118      118                    We gotta go find the node randomly:  set up the VDA$PREAD
      119      119                        parameters to use the given ABSOLUTE and RELATIVE.
      120      120                    Call VDA$PREAD to position the PORT and optionally read
      121      121                        the node.
      122      122                        A "flush" operation may be performed on the set of
      123      123                        nodes in the port at entry:  if they have been
      124      124                        modified since being read, they will be flushed to the
      125      125                        file and to the Presenter.
      126      126                    If ABSOLUTE.KEY is given, RELATIVE = 0, and the requested
      127      127                        node doesn't exist in the file, then
      128      128                        STREAM.CURRENT.KEY/EOF will be set to the key of the
      129      129                        next node (if any) after the requested one, but we'll
      130      130                        simply return after the positioning:  we won't read the node.
      131      131                        If this positioning yields EOF, we return immediately.
      132      132
      133      133                Note on the meaning of "sequential" reads:
      134      134                    Passing RELATIVE=0 is similar to doing a KEYS-less M$READ
      135      135                        with no M$PRECORD before it.  However, this only works
      136      136                        once with the monitor:  the next RELATIVE=0 call (ie,
      137      137                        the next KEYS-less M$READ with no M$PRECORD before it)
      138      138                        will "read sequential"--acting like you passed
      139      139                        RELATIVE=1!!  VDA$LREAD makes the use of RELATIVE
      140      140                        more intuitive:
      141      141                            Passing RELATIVE=0 will always get the record
      142      142                                specified by ABSOLUTE or STREAM.CURRENT
      143      143                                (within the caveats on non-existing records),
      144      144                                no matter what the previous operation was.
      145      145                            Passing RELATIVE=1 will "read sequential".  To
      146      146                                read a bunch of records from a specific place
      147      147                                in the file, pass ABSOLUTE and RELATIVE=0 the
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:21   
      148      148                                first time, then on successive calls omit
      149      149                                ABSOLUTE and pass RELATIVE=1.
      150      150        */
      151      151
      152      152        VDA$LREAD: PROC (STREAM, ABSOLUTE, RELATIVE, READ) ALTRET;

    152  0 000000   000000 700200 xent  VDA$LREAD    TSX0  ! X66_AUTO_4
         0 000001   000040 000004                    ZERO    32,4

      153      153
      154      154        %INCLUDE VD_MACROS_M;
      155     2369        %INCLUDE VD_PERR_C;
      156     2517
      157     2518        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
      158     2624        %VD$LOCATION (NAME=ABSOLUTE, STCLASS=PARAM);
      159     2652    1   DCL RELATIVE SBIN;
      160     2653    1   DCL READ BIT(1) ALIGNED;
      161     2654
      162     2655
      163     2656    1   DCL VDA$PREAD           ENTRY (6) ALTRET;
      164     2657    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
      165     2658    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
      166     2659    1   DCL VDG$MACC_LREAD      ENTRY (4);
      167     2660    1   DCL VDG$MACC_RETURN     ENTRY (1);
      168     2661    1   DCL VDG$ESCREECH        ENTRY (3);
      169     2662    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
      170     2663
      171     2664
      172     2665
      173     2666        %VD_6E (STCLASS=SYMREF);
      174     2702        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      175     2747
      176     2748
      177     2749
      178     2750    1   DCL REL SBIN;
      179     2751
      180     2752
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:22   
      181     2753        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
      182     2851
      183     2852
      184     2853
      185     2854    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;

   2854  0 000002   000027 220000 xsym               LDX0    VD_6E+23
         0 000003   000003 100003                    CMPX0   3,DU
         0 000004   000012 601000 0                  TNZ     s:2858

      186     2855    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);

   2855  0 000005   000000 630400 1                  EPPR0   0
         0 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000007   000000 701000 xent               TSX1    VDG$EBREAK_ACKNOWLEDGE
         0 000010   000000 011000                    NOP     0

      187     2856    2              ALTRETURN;

   2856  0 000011   000000 702200 xent               TSX2  ! X66_AALT

      188     2857    2              END;
      189     2858    1           IF VD_$$MON_ACC.V# > 0 THEN

   2858  0 000012   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         0 000013   000020 604400 0                  TMOZ    s:2860

      190     2859    1              CALL VDG$MACC_LREAD (STREAM, ABSOLUTE, RELATIVE, READ);

   2859  0 000014   200003 630500                    EPPR0   @STREAM,,AUTO
         0 000015   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000016   000000 701000 xent               TSX1    VDG$MACC_LREAD
         0 000017   000000 011000                    NOP     0

      191     2860    1           IF PORT.EXIST# = 0 THEN

   2860  0 000020   200003 470500                    LDP0    @STREAM,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:23   
         0 000021   000001 471500                    LDP1    1,,PR0
         0 000022   100003 720100                    LXL0    3,,PR1
         0 000023   000027 601000 0                  TNZ     s:2863

      192     2861    1              CALL VDG$ESCREECH;

   2861  0 000024   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000025   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000026   000000 011000                    NOP     0

      193     2862
      194     2863    1           REL = RELATIVE;     /* So we can change it */

   2863  0 000027   200005 470500                    LDP0    @RELATIVE,,AUTO
         0 000030   000000 235100                    LDA     0,,PR0
         0 000031   200007 755100                    STA     REL,,AUTO

      195     2864    2           IF ADDR(ABSOLUTE) ~= ADDR(NIL) THEN DO;

   2864  0 000032   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         0 000033   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000034   000052 600000 0                  TZE     s:2878

      196     2865    2              IF (ABSOLUTE.EOF AND RELATIVE > 0)

   2865  0 000035   200004 471500                    LDP1    @ABSOLUTE,,AUTO
         0 000036   100010 236100                    LDQ     8,,PR1
         0 000037   400000 316007                    CANQ    -131072,DL
         0 000040   000043 600000 0                  TZE     s:2865+6
         0 000041   000000 115003                    CMPA    0,DU
         0 000042   000051 605400 0                  TPNZ    s:2867
         0 000043   000000 106500                    CMPC    fill='000'O
         0 000044   100000 000044                    ADSC9   0,,PR1                   cn=0,n=36
         0 000045   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000046   000052 601000 0                  TNZ     s:2878
         0 000047   000000 115003                    CMPA    0,DU
         0 000050   000052 605000 0                  TPL     s:2878
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:24   

      197     2866    2                OR (ABSOLUTE = %CLEAR AND RELATIVE < 0) THEN
      198     2867    2                 REL = 0;

   2867  0 000051   200007 450100                    STZ     REL,,AUTO

      199     2868    2              END;

      200     2869
      201     2870                /*
      202     2871                *   We make most of the logic a subroutine 'cause it does
      203     2872                *       alot of optimization, which means that at funny,
      204     2873                *       spaghetti-like places it wants to say
      205     2874                *       "That's all folks!" and not call VDA$PREAD.
      206     2875                *       To make such logic readable, the subroutine just
      207     2876                *       RETURNs at such places, rather than GOTOing to a label.
      208     2877                */
      209     2878    1           CALL PREAD

   2878  0 000052   000064 701000 0                  TSX1    PREAD
         0 000053   000063 702000 0                  TSX2    PREAD_FAILED

      210     2879    1             ALTRET (PREAD_FAILED);
      211     2880
      212     2881
      213     2882    1           IF VD_$$MON_ACC.V# > 0 THEN

   2882  0 000054   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         0 000055   000062 604400 0                  TMOZ    s:2884

      214     2883    1              CALL VDG$MACC_RETURN (STREAM);

   2883  0 000056   200003 630500                    EPPR0   @STREAM,,AUTO
         0 000057   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000060   000000 701000 xent               TSX1    VDG$MACC_RETURN
         0 000061   000000 011000                    NOP     0

PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:25   
      215     2884    1           RETURN;

   2884  0 000062   000000 702200 xent               TSX2  ! X66_ARET

   2882  0 000063                       PREAD_FAILED null
      216     2885
      217     2886
      218     2887    1   PREAD_FAILED: ;
      219     2888    1           ALTRETURN;

   2888  0 000063   000000 702200 xent               TSX2  ! X66_AALT

      220     2889
      221     2890                %BOX (TITLE=PREAD, PAGE=YES);
              2898    1
              2902    1   /***************************************************************************
              2904    1    *                                                                         *
              2908    1            *                                   PREAD                                *
              2910    1            *                                                                        *
              2912    1          ***************************************************************************/

      222     2916
      223     2917        /*I* NAME: PREAD
      224     2918            PARAMETERS:
      225     2919                None.
      226     2920            INPUT:
      227     2921                STREAM - VD$STREAM to use.
      228     2922                PORT - VD$PORT that STREAM is open to.
      229     2923                ABSOLUTE - Optional VD$LOCATION specifying the absolute
      230     2924                       location to position to and possibly read.
      231     2925                REL - Signed # of nodes to move relative to either
      232     2926                    the stream's current position or, if given, ABSOLUTE.
      233     2927            OUTPUT:
      234     2928                See output description of main routine.
      235     2929            DESCRIPTION:
      236     2930                See description of main routine.
      237     2931
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:26   
      238     2932                Special cases detected and optimized by this routine:
      239     2933                o ABSOLUTE=EOF and REL>=0
      240     2934                    Set EOF in STREAM and return.
      241     2935                o (ABSOLUTE omitted or ABSOLUTE=STREAM.CURRENT) and REL=0
      242     2936                    If no READ requested, just return.
      243     2937                    Else, copy STREAM keys to PREAD_ABS and call VDA$PREAD.
      244     2938                o STREAM.NEXT is available (non-%CLEAR) and either:
      245     2939                    (ABSOLUTE omitted or ABSOLUTE=STREAM.CURRENT) and REL=1
      246     2940                                -- or --
      247     2941                    ABSOLUTE=STREAM.NEXT and REL=0
      248     2942                    If no READ requested, just copy STREAM.NEXT to .CURRENT
      249     2943                        and return.
      250     2944                    Else copy STREAM.NEXT to PREAD_ABS and call VDA$PREAD.
      251     2945        */
      252     2946
      253     2947    1   PREAD:  PROC ALTRET;

   2947  0 000064   200010 741300       PREAD        STX1  ! REL+1,,AUTO

      254     2948
      255     2949
      256     2950        %VD$LOCATION (NAME=PREAD_ABS, STCLASS=AUTO);
      257     2978    2   DCL PREAD_REL SBIN;
      258     2979    2   DCL ABS_EQ_CURR BIT(1) ALIGNED;
      259     2980    2   DCL ABS_EQ_NEXT BIT(1) ALIGNED;
      260     2981
      261     2982
      262     2983
      263     2984    2           PREAD_ABS = %CLEAR;

   2984  0 000065   000100 100400                    MLR     fill='000'O
         0 000066   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000067   200011 000044                    ADSC9   PREAD_ABS,,AUTO          cn=0,n=36

      264     2985    2           PREAD_REL = 0;

   2985  0 000070   200022 450100                    STZ     PREAD_REL,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:27   

      265     2986
      266     2987    3           IF ADDR(ABSOLUTE) ~= ADDR(NIL) THEN DO;

   2987  0 000071   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         0 000072   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000073   000127 600000 0                  TZE     s:3000

      267     2988    3              IF ABSOLUTE.EOF AND REL >= 0 THEN

   2988  0 000074   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         0 000075   000010 236100                    LDQ     8,,PR0
         0 000076   400000 316007                    CANQ    -131072,DL
         0 000077   000127 600000 0                  TZE     s:3000
         0 000100   200007 235100                    LDA     REL,,AUTO
         0 000101   000127 604000 0                  TMI     s:3000

      268     2989    4   JUST_EOF:  DO;

   2989  0 000102                       JUST_EOF     null
      269     2990    4                 CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)

   2990  0 000102   200003 236100                    LDQ     @STREAM,,AUTO
         0 000103   000006 036003                    ADLQ    6,DU
         0 000104   200034 756100                    STQ     ABS_KEY$+1,,AUTO
         0 000105   200034 630500                    EPPR0   ABS_KEY$+1,,AUTO
         0 000106   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000107   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000110   000342 702000 0                  TSX2    PREAD_FAILED

      270     2991    4                   ALTRET (OCLEAR_LOCATION_FAILED);
      271     2992    4                 CALL VDG$OCLEAR_LOCATION (STREAM.NEXT)

   2992  0 000111   200003 236100                    LDQ     @STREAM,,AUTO
         0 000112   000017 036003                    ADLQ    15,DU
         0 000113   200034 756100                    STQ     ABS_KEY$+1,,AUTO
         0 000114   200034 630500                    EPPR0   ABS_KEY$+1,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:28   
         0 000115   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000116   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000117   000342 702000 0                  TSX2    PREAD_FAILED

      272     2993    4                   ALTRET (OCLEAR_LOCATION_FAILED);
      273     2994    4                 STREAM.CURRENT.EOF = %TRUE;

   2994  0 000120   200003 470500                    LDP0    @STREAM,,AUTO
         0 000121   400000 236007                    LDQ     -131072,DL
         0 000122   000016 256100                    ORSQ    14,,PR0

      274     2995    4                 STREAM.LAST_OP# = %ACCOP_LOCATION;

   2995  0 000123   000002 220003                    LDX0    2,DU
         0 000124   000002 740100                    STX0    2,,PR0

      275     2996    4                 RETURN;

   2996  0 000125   200010 221300                    LDX1  ! REL+1,,AUTO
         0 000126   000001 702211                    TSX2  ! 1,X1

      276     2997    4                 END JUST_EOF;
      277     2998    3              END;
      278     2999
      279     3000    2           IF REL = 0 OR REL = 1 THEN

   3000  0 000127   200007 235100                    LDA     REL,,AUTO
         0 000130   000133 600000 0                  TZE     TEST_CURRENT_OR_NEXT
         0 000131   000001 115007                    CMPA    1,DL
         0 000132   000236 601000 0                  TNZ     s:3043

      280     3001    3   TEST_CURRENT_OR_NEXT: DO;

   3001  0 000133                       TEST_CURREN* null
      281     3002    4              IF ADDR(ABSOLUTE) = ADDR(NIL) THEN DO;

   3002  0 000133   200004 236100                    LDQ     @ABSOLUTE,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:29   
         0 000134   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000135   000142 601000 0                  TNZ     s:3007

      282     3003    4                 ABS_EQ_CURR = %TRUE;

   3003  0 000136   400000 236003                    LDQ     -131072,DU
         0 000137   200023 756100                    STQ     ABS_EQ_CURR,,AUTO

      283     3004    4                 ABS_EQ_NEXT = %FALSE;

   3004  0 000140   200024 450100                    STZ     ABS_EQ_NEXT,,AUTO

      284     3005    4                 END;

   3005  0 000141   000155 710000 0                  TRA     s:3013

      285     3006    4              ELSE DO;

      286     3007    4                 IF ABSOLUTE = %CLEAR THEN

   3007  0 000142   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         0 000143   000000 106500                    CMPC    fill='000'O
         0 000144   000000 000044                    ADSC9   0,,PR0                   cn=0,n=36
         0 000145   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000146   000236 600000 0                  TZE     s:3043

      287     3008    4                    EXIT TEST_CURRENT_OR_NEXT;     /* BOF */
      288     3009    4                 CALL COMPARE_ABS_WITH_CURR_AND_NEXT (ABS_EQ_CURR, ABS_EQ_NEXT)

   3009  0 000147   200024 631500                    EPPR1   ABS_EQ_NEXT,,AUTO
         0 000150   200030 451500                    STP1    @ABS_EQ_CURR+1,,AUTO
         0 000151   200023 633500                    EPPR3   ABS_EQ_CURR,,AUTO
         0 000152   200027 453500                    STP3    ABS_EQ_NEXT+3,,AUTO
         0 000153   000344 701000 0                  TSX1    COMPARE_ABS_WITH_CURR_AND_NEXT
         0 000154   000342 702000 0                  TSX2    PREAD_FAILED

      289     3010    4                   ALTRET (COMPARE_ABS_FAILED);
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:30   
      290     3011    4                 END;

      291     3012
      292     3013    4              IF ABS_EQ_CURR AND REL = 0 AND NOT READ THEN DO;

   3013  0 000155   200023 234100                    SZN     ABS_EQ_CURR,,AUTO
         0 000156   000172 605000 0                  TPL     s:3021
         0 000157   200007 235100                    LDA     REL,,AUTO
         0 000160   000172 601000 0                  TNZ     s:3021
         0 000161   200006 470500                    LDP0    @READ,,AUTO
         0 000162   000000 234100                    SZN     0,,PR0
         0 000163   000172 604000 0                  TMI     s:3021

      293     3014                      %INCREMENT (INDX=%STG_LOC_STREAM_CURR);

   3015  0 000164   000105 054000 xsym               AOS     VD_6E+69

      294     3017    4                 STREAM.LAST_OP# = %ACCOP_LOCATION;

   3017  0 000165   000002 220003                    LDX0    2,DU
         0 000166   200003 471500                    LDP1    @STREAM,,AUTO
         0 000167   100002 740100                    STX0    2,,PR1

      295     3018    4                 RETURN;

   3018  0 000170   200010 221300                    LDX1  ! REL+1,,AUTO
         0 000171   000001 702211                    TSX2  ! 1,X1

      296     3019    4                 END;
      297     3020
      298     3021    3              IF NOT READ

   3021  0 000172   200006 470500                    LDP0    @READ,,AUTO
         0 000173   000000 234100                    SZN     0,,PR0
         0 000174   000236 604000 0                  TMI     s:3043
         0 000175   200003 471500                    LDP1    @STREAM,,AUTO
         0 000176   000000 106500                    CMPC    fill='000'O
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:31   
         0 000177   100017 000044                    ADSC9   15,,PR1                  cn=0,n=36
         0 000200   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000201   000236 600000 0                  TZE     s:3043
         0 000202   200023 234100                    SZN     ABS_EQ_CURR,,AUTO
         0 000203   000207 605000 0                  TPL     s:3021+13
         0 000204   200007 235100                    LDA     REL,,AUTO
         0 000205   000001 115007                    CMPA    1,DL
         0 000206   000213 600000 0                  TZE     ROLL_NEXT_TO_CURRENT
         0 000207   200024 234100                    SZN     ABS_EQ_NEXT,,AUTO
         0 000210   000236 605000 0                  TPL     s:3043
         0 000211   200007 235100                    LDA     REL,,AUTO
         0 000212   000236 601000 0                  TNZ     s:3043

      299     3022    3                AND STREAM.NEXT ~= %CLEAR
      300     3023    3                AND ((ABS_EQ_CURR AND REL = 1)
      301     3024    3                OR (ABS_EQ_NEXT AND REL = 0)) THEN
      302     3025    4   ROLL_NEXT_TO_CURRENT: DO;

   3025  0 000213                       ROLL_NEXT_T* null
      303     3026                      %INCREMENT (INDX=%STG_LOC_STREAM_NEXT);

   3027  0 000213   000106 054000 xsym               AOS     VD_6E+70

      304     3029    4                 CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)

   3029  0 000214   200003 236100                    LDQ     @STREAM,,AUTO
         0 000215   000006 036003                    ADLQ    6,DU
         0 000216   200034 756100                    STQ     ABS_KEY$+1,,AUTO
         0 000217   200034 630500                    EPPR0   ABS_KEY$+1,,AUTO
         0 000220   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000221   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000222   000342 702000 0                  TSX2    PREAD_FAILED

      305     3030    4                   ALTRET (OCLEAR_LOCATION_FAILED);
      306     3031    4                 STREAM.CURRENT = STREAM.NEXT;

   3031  0 000223   200003 470500                    LDP0    @STREAM,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:32   
         0 000224   000100 100500                    MLR     fill='000'O
         0 000225   000017 000044                    ADSC9   15,,PR0                  cn=0,n=36
         0 000226   000006 000044                    ADSC9   6,,PR0                   cn=0,n=36

      307     3032    4                 STREAM.NEXT = %CLEAR;

   3032  0 000227   000100 100400                    MLR     fill='000'O
         0 000230   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         0 000231   000017 000044                    ADSC9   15,,PR0                  cn=0,n=36

      308     3033    4                 STREAM.LAST_OP# = %ACCOP_LOCATION;

   3033  0 000232   000002 220003                    LDX0    2,DU
         0 000233   000002 740100                    STX0    2,,PR0

      309     3034    4                 RETURN;

   3034  0 000234   200010 221300                    LDX1  ! REL+1,,AUTO
         0 000235   000001 702211                    TSX2  ! 1,X1

      310     3035    4                 END ROLL_NEXT_TO_CURRENT;
      311     3036    3              END TEST_CURRENT_OR_NEXT;
      312     3037
      313     3038
      314     3039                /*
      315     3040                *   Call VDA$PREAD to position and/or read.
      316     3041                */
      317     3042
      318     3043    2           IF ADDR(ABSOLUTE) = ADDR(NIL) THEN

   3043  0 000236   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         0 000237   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000240   000246 601000 0                  TNZ     s:3046

      319     3044    2              PREAD_ABS = STREAM.CURRENT;

   3044  0 000241   200003 470500                    LDP0    @STREAM,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:33   
         0 000242   000100 100500                    MLR     fill='000'O
         0 000243   000006 000044                    ADSC9   6,,PR0                   cn=0,n=36
         0 000244   200011 000044                    ADSC9   PREAD_ABS,,AUTO          cn=0,n=36
         0 000245   000252 710000 0                  TRA     s:3047

      320     3045    2           ELSE
      321     3046    2              PREAD_ABS = ABSOLUTE;

   3046  0 000246   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         0 000247   000100 100500                    MLR     fill='000'O
         0 000250   000000 000044                    ADSC9   0,,PR0                   cn=0,n=36
         0 000251   200011 000044                    ADSC9   PREAD_ABS,,AUTO          cn=0,n=36

      322     3047    2           PREAD_REL = REL;

   3047  0 000252   200007 235100                    LDA     REL,,AUTO
         0 000253   200022 755100                    STA     PREAD_REL,,AUTO

      323     3048
      324     3049    2           STREAM.LAST_OP# = %ACCOP_LOCATION;

   3049  0 000254   000002 220003                    LDX0    2,DU
         0 000255   200003 470500                    LDP0    @STREAM,,AUTO
         0 000256   000002 740100                    STX0    2,,PR0

      325     3050    2           CALL VDA$PREAD (PORT, PREAD_ABS, PREAD_REL, READ)

   3050  0 000257   000001 471500                    LDP1    1,,PR0
         0 000260   200006 236100                    LDQ     @READ,,AUTO
         0 000261   200037 756100                    STQ     ABS_KEY$+4,,AUTO
         0 000262   200022 633500                    EPPR3   PREAD_REL,,AUTO
         0 000263   200036 453500                    STP3    ABS_KEY$+3,,AUTO
         0 000264   200011 634500                    EPPR4   PREAD_ABS,,AUTO
         0 000265   200035 454500                    STP4    ABS_KEY$+2,,AUTO
         0 000266   200034 451500                    STP1    ABS_KEY$+1,,AUTO
         0 000267   200034 630500                    EPPR0   ABS_KEY$+1,,AUTO
         0 000270   000022 631400 xsym               EPPR1   B_VECTNIL+18
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:34   
         0 000271   000000 701000 xent               TSX1    VDA$PREAD
         0 000272   000342 702000 0                  TSX2    PREAD_FAILED

      326     3051    2             ALTRET (PREAD_FAILED);
      327     3052    2           IF READ THEN

   3052  0 000273   200006 470500                    LDP0    @READ,,AUTO
         0 000274   000000 234100                    SZN     0,,PR0
         0 000275   000301 605000 0                  TPL     s:3058

      328     3053    2              STREAM.LAST_OP# = %ACCOP_READ;

   3053  0 000276   000004 220003                    LDX0    4,DU
         0 000277   200003 471500                    LDP1    @STREAM,,AUTO
         0 000300   100002 740100                    STX0    2,,PR1

      329     3054
      330     3055                /*
      331     3056                *    Reposition the stream.
      332     3057                */
      333     3058    3           IF NOT (ADDR(ABSOLUTE) = ADDR(NIL) AND RELATIVE = 0) THEN DO;

   3058  0 000301   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         0 000302   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000303   000307 601000 0                  TNZ     s:3059
         0 000304   200005 471500                    LDP1    @RELATIVE,,AUTO
         0 000305   100000 235100                    LDA     0,,PR1
         0 000306   000340 600000 0                  TZE     s:3067

      334     3059    3              CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)

   3059  0 000307   200003 236100                    LDQ     @STREAM,,AUTO
         0 000310   000006 036003                    ADLQ    6,DU
         0 000311   200034 756100                    STQ     ABS_KEY$+1,,AUTO
         0 000312   200034 630500                    EPPR0   ABS_KEY$+1,,AUTO
         0 000313   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000314   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:35   
         0 000315   000342 702000 0                  TSX2    PREAD_FAILED

      335     3060    3                ALTRET (OCLEAR_LOCATION_FAILED);
      336     3061    3              CALL VDG$OCOPY_LOCATION (PORT.CURRENT, STREAM.CURRENT)

   3061  0 000316   200003 470500                    LDP0    @STREAM,,AUTO
         0 000317   000001 471500                    LDP1    1,,PR0
         0 000320   200003 236100                    LDQ     @STREAM,,AUTO
         0 000321   000006 036003                    ADLQ    6,DU
         0 000322   200035 756100                    STQ     ABS_KEY$+2,,AUTO
         0 000323   100012 633500                    EPPR3   10,,PR1
         0 000324   200034 453500                    STP3    ABS_KEY$+1,,AUTO
         0 000325   200034 630500                    EPPR0   ABS_KEY$+1,,AUTO
         0 000326   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000327   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000330   000342 702000 0                  TSX2    PREAD_FAILED

      337     3062    3                ALTRET (OCOPY_LOCATION_FAILED);
      338     3063    3              CALL VDG$OCLEAR_LOCATION (STREAM.NEXT)

   3063  0 000331   200003 236100                    LDQ     @STREAM,,AUTO
         0 000332   000017 036003                    ADLQ    15,DU
         0 000333   200034 756100                    STQ     ABS_KEY$+1,,AUTO
         0 000334   200034 630500                    EPPR0   ABS_KEY$+1,,AUTO
         0 000335   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000336   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000337   000342 702000 0                  TSX2    PREAD_FAILED

      339     3064    3                ALTRET (OCLEAR_LOCATION_FAILED);
      340     3065    3              END;

      341     3066
      342     3067    2           RETURN;

   3067  0 000340   200010 221300                    LDX1  ! REL+1,,AUTO
         0 000341   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:36   
   3063  0 000342                       PREAD_FAILED null
   3063  0 000342                       OCLEAR_LOCA* null
   3063  0 000342                       COMPARE_ABS* null
   3063  0 000342                       OCOPY_LOCAT* null
      343     3068
      344     3069
      345     3070    2   PREAD_FAILED: ;
      346     3071    2   OCLEAR_LOCATION_FAILED: ;
      347     3072    2   COMPARE_ABS_FAILED: ;
      348     3073    2   OCOPY_LOCATION_FAILED: ;
      349     3074    2           ALTRETURN;

   3074  0 000342   200010 221300                    LDX1  ! REL+1,,AUTO
         0 000343   000000 702211                    TSX2  ! 0,X1

      350     3075
      351     3076
      352     3077                %BOX (TITLE=COMPARE_ABS_WITH_CURR_AND_NEXT);

              3089    2   /***************************************************************************
              3091    2    *                                                                         *
              3095    2            *                       COMPARE_ABS_WITH_CURR_AND_NEXT                   *
              3097    2            *                                                                        *
              3099    2          ***************************************************************************/

      353     3103
      354     3104        /*I* NAME: COMPARE_ABS_WITH_CURR_AND_NEXT
      355     3105            PARAMETERS:
      356     3106                ABS_EQ_CURR - An uninitialized BIT(1) flag.
      357     3107                ABS_EQ_NEXT - An uninitialized BIT(1) flag.
      358     3108            INPUT:
      359     3109                STREAM - The stream to use.
      360     3110                ABSOLUTE - VD$LOCATION (must be given if you call this rtn).
      361     3111            OUTPUT:
      362     3112                (Level %LVL_FILE of STREAM is excluded from the following tests.)
      363     3113                ABS_EQ_CURR will be set if all of ABSOLUTE's keys equal all of
      364     3114                    STREAM.CURRENT's keys.
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:37   
      365     3115                ABS_EQ_NEXT will be set if all of ABSOLUTE's keys equal all of
      366     3116                    STREAM.NEXT's keys.
      367     3117            DESCRIPTION:
      368     3118                For each level from %LVL_LOWER 'til ABSOLUTE's key is %CLEAR,
      369     3119                compare ABSOLUTE.KEY (level) with STREAM.CURRENT.KEY (level)
      370     3120                and STREAM.NEXT.KEY (level).  If all ABSOLUTE.KEYs are equal
      371     3121                to either one, set the appropriate ABS_EQ_x flag and return.
      372     3122        */
      373     3123
      374     3124    2   COMPARE_ABS_WITH_CURR_AND_NEXT: PROC (ABS_EQ_CURR, ABS_EQ_NEXT) ALTRET;

   3124  0 000344   200026 741300       COMPARE_ABS* STX1  ! ABS_EQ_NEXT+2,,AUTO

      375     3125
      376     3126    3   DCL ABS_EQ_CURR BIT(1) ALIGNED;
      377     3127    3   DCL ABS_EQ_NEXT BIT(1) ALIGNED;
      378     3128
      379     3129
      380     3130    3   DCL INDX SBIN;
      381     3131    3   DCL CAND_KEY$ PTR;
      382     3132    3   DCL ABS_KEY$ PTR;
      383     3133
      384     3134
      385     3135        %VD$TEXTC (NAME=CAND$KEY, STCLASS="BASED(CAND_KEY$)");
      386     3158        %VD$TEXTC (NAME=ABS$KEY, STCLASS="BASED(ABS_KEY$)");
      387     3181        %VD$TEXTC_REMOTE;
      388     3242
      389     3243
      390     3244    4           IF ABSOLUTE.EOF THEN DO;

   3244  0 000345   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         0 000346   000010 236100                    LDQ     8,,PR0
         0 000347   400000 316007                    CANQ    -131072,DL
         0 000350   000376 600000 0                  TZE     s:3257

      391     3245    5              IF STREAM.CURRENT.EOF THEN DO;

PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:38   
   3245  0 000351   200003 471500                    LDP1    @STREAM,,AUTO
         0 000352   100016 236100                    LDQ     14,,PR1
         0 000353   400000 316007                    CANQ    -131072,DL
         0 000354   000364 600000 0                  TZE     s:3250

      392     3246    5                 ABS_EQ_CURR = %TRUE;

   3246  0 000355   400000 236003                    LDQ     -131072,DU
         0 000356   200027 473500                    LDP3    @ABS_EQ_CURR,,AUTO
         0 000357   300000 756100                    STQ     0,,PR3

      393     3247    5                 ABS_EQ_NEXT = %FALSE;

   3247  0 000360   200030 474500                    LDP4    @ABS_EQ_NEXT,,AUTO
         0 000361   400000 450100                    STZ     0,,PR4

      394     3248    5                 RETURN;

   3248  0 000362   200026 221300                    LDX1  ! ABS_EQ_NEXT+2,,AUTO
         0 000363   000001 702211                    TSX2  ! 1,X1

      395     3249    5                 END;
      396     3250    5              IF STREAM.NEXT.EOF THEN DO;

   3250  0 000364   100027 236100                    LDQ     23,,PR1
         0 000365   400000 316007                    CANQ    -131072,DL
         0 000366   000376 600000 0                  TZE     s:3257

      397     3251    5                 ABS_EQ_CURR = %FALSE;

   3251  0 000367   200027 473500                    LDP3    @ABS_EQ_CURR,,AUTO
         0 000370   300000 450100                    STZ     0,,PR3

      398     3252    5                 ABS_EQ_NEXT = %TRUE;

   3252  0 000371   400000 236003                    LDQ     -131072,DU
         0 000372   200030 474500                    LDP4    @ABS_EQ_NEXT,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:39   
         0 000373   400000 756100                    STQ     0,,PR4

      399     3253    5                 RETURN;

   3253  0 000374   200026 221300                    LDX1  ! ABS_EQ_NEXT+2,,AUTO
         0 000375   000001 702211                    TSX2  ! 1,X1

      400     3254    5                 END;
      401     3255    4              END;
      402     3256
      403     3257    4           IF STREAM.CURRENT.EOF THEN DO;

   3257  0 000376   200003 471500                    LDP1    @STREAM,,AUTO
         0 000377   100016 236100                    LDQ     14,,PR1
         0 000400   400000 316007                    CANQ    -131072,DL
         0 000401   000410 600000 0                  TZE     s:3264

      404     3258    4              ABS_EQ_CURR = %FALSE;

   3258  0 000402   200027 473500                    LDP3    @ABS_EQ_CURR,,AUTO
         0 000403   300000 450100                    STZ     0,,PR3

      405     3259    4              ABS_EQ_NEXT = %FALSE;

   3259  0 000404   200030 474500                    LDP4    @ABS_EQ_NEXT,,AUTO
         0 000405   400000 450100                    STZ     0,,PR4

      406     3260    4              RETURN;

   3260  0 000406   200026 221300                    LDX1  ! ABS_EQ_NEXT+2,,AUTO
         0 000407   000001 702211                    TSX2  ! 1,X1

      407     3261    4              END;
      408     3262
      409     3263
      410     3264    3           INDX = %(LVL_LOWER-1);

PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:40   
   3264  0 000410   200031 450100                    STZ     INDX,,AUTO

      411     3265    3           ABS_EQ_CURR = %TRUE;

   3265  0 000411   400000 236003                    LDQ     -131072,DU
         0 000412   200027 473500                    LDP3    @ABS_EQ_CURR,,AUTO
         0 000413   300000 756100                    STQ     0,,PR3

      412     3266    3           ABS_EQ_NEXT = ~ STREAM.NEXT.EOF;  /* Assume TRUE if not eof */

   3266  0 000414   100027 236100                    LDQ     23,,PR1
         0 000415   000022 736000                    QLS     18
         0 000416   400000 376003                    ANQ     -131072,DU
         0 000417   400000 676003                    ERQ     -131072,DU
         0 000420   200030 474500                    LDP4    @ABS_EQ_NEXT,,AUTO
         0 000421   400000 756100                    STQ     0,,PR4

      413     3267    4           DO WHILE (INDX < %(MX_LOCATION_LEVELS-1))

   3267  0 000422   000555 710000 0                  TRA     s:3320

      414     3268    4             AND (ABS_EQ_CURR OR ABS_EQ_NEXT)
      415     3269    4             AND (ABSOLUTE.KEY (INDX) ~= %CLEAR);
      416     3270                   %GETKEY (KEY=ABSOLUTE.KEY, INDX=INDX,
      417     3271                   PTR=ABS_KEY$);

   3278  0 000423   200031 235100                    LDA     INDX,,AUTO
         0 000424   000001 735000                    ALS     1
         0 000425   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         0 000426   000000 720105                    LXL0    0,AL,PR0
         0 000427   000002 100003                    CMPX0   2,DU
         0 000430   000435 601000 0                  TNZ     s:3278+10

   3278  0 000431   000001 471505                    LDP1    1,AL,PR0
         0 000432   100002 633500                    EPPR3   2,,PR1
         0 000433   200033 453500                    STP3    ABS_KEY$,,AUTO
         0 000434   000442 710000 0                  TRA     s:3281
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:41   

   3278  0 000435   200031 236100                    LDQ     INDX,,AUTO
         0 000436   000023 736000                    QLS     19
         0 000437   000001 036003                    ADLQ    1,DU
         0 000440   200004 036100                    ADLQ    @ABSOLUTE,,AUTO
         0 000441   200033 756100                    STQ     ABS_KEY$,,AUTO

      418     3281    5              IF ABS_EQ_CURR THEN DO;

   3281  0 000442   200027 471500                    LDP1    @ABS_EQ_CURR,,AUTO
         0 000443   100000 234100                    SZN     0,,PR1
         0 000444   000507 605000 0                  TPL     s:3300

      419     3282    5                 IF STREAM.CURRENT.KEY (INDX) = %CLEAR THEN

   3282  0 000445   200031 236100                    LDQ     INDX,,AUTO
         0 000446   000003 736000                    QLS     3
         0 000447   200003 473500                    LDP3    @STREAM,,AUTO
         0 000450   000000 106506                    CMPC    fill='000'O
         0 000451   300006 000010                    ADSC9   6,Q,PR3                  cn=0,n=8
         0 000452   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000453   000456 601000 0                  TNZ     s:3293

      420     3283    5                    ABS_EQ_CURR = %FALSE;

   3283  0 000454   100000 450100                    STZ     0,,PR1
         0 000455   000507 710000 0                  TRA     s:3300

      421     3284    6                 ELSE DO;

      422     3285                         %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=INDX,
      423     3286                         PTR=CAND_KEY$);

   3293  0 000456   300006 721105                    LXL1    6,AL,PR3
         0 000457   000002 101003                    CMPX1   2,DU
         0 000460   000465 601000 0                  TNZ     s:3293+7

PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:42   
   3293  0 000461   300007 474505                    LDP4    7,AL,PR3
         0 000462   400002 635500                    EPPR5   2,,PR4
         0 000463   200032 455500                    STP5    CAND_KEY$,,AUTO
         0 000464   000472 710000 0                  TRA     s:3296

   3293  0 000465   200031 236100                    LDQ     INDX,,AUTO
         0 000466   000023 736000                    QLS     19
         0 000467   000007 036003                    ADLQ    7,DU
         0 000470   200003 036100                    ADLQ    @STREAM,,AUTO
         0 000471   200032 756100                    STQ     CAND_KEY$,,AUTO

      424     3296    6                    IF ABS$KEY.BYTES ~= CAND$KEY.BYTES THEN

   3296  0 000472   200033 474500                    LDP4    ABS_KEY$,,AUTO
         0 000473   400000 236100                    LDQ     0,,PR4
         0 000474   000033 772000                    QRL     27
         0 000475   200032 475500                    LDP5    CAND_KEY$,,AUTO
         0 000476   000000 622006                    EAX2    0,QL
         0 000477   500000 236100                    LDQ     0,,PR5
         0 000500   000033 772000                    QRL     27
         0 000501   000000 623006                    EAX3    0,QL
         0 000502   040140 106540                    CMPC    fill='040'O
         0 000503   400000 200012                    ADSC9   0,,PR4                   cn=1,n=*X2
         0 000504   500000 200013                    ADSC9   0,,PR5                   cn=1,n=*X3
         0 000505   000507 600000 0                  TZE     s:3300

      425     3297    6                       ABS_EQ_CURR = %FALSE;

   3297  0 000506   100000 450100                    STZ     0,,PR1

      426     3298    6                    END;

      427     3299    5                 END;

      428     3300    5              IF ABS_EQ_NEXT THEN DO;

   3300  0 000507   200030 473500                    LDP3    @ABS_EQ_NEXT,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:43   
         0 000510   300000 234100                    SZN     0,,PR3
         0 000511   000554 605000 0                  TPL     s:3319

      429     3301    5                 IF STREAM.NEXT.KEY (INDX) = %CLEAR THEN

   3301  0 000512   200031 236100                    LDQ     INDX,,AUTO
         0 000513   000003 736000                    QLS     3
         0 000514   200003 474500                    LDP4    @STREAM,,AUTO
         0 000515   000000 106506                    CMPC    fill='000'O
         0 000516   400017 000010                    ADSC9   15,Q,PR4                 cn=0,n=8
         0 000517   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000520   000523 601000 0                  TNZ     s:3312

      430     3302    5                    ABS_EQ_NEXT = %FALSE;

   3302  0 000521   300000 450100                    STZ     0,,PR3
         0 000522   000554 710000 0                  TRA     s:3319

      431     3303    6                 ELSE DO;

      432     3304                         %GETKEY (KEY=STREAM.NEXT.KEY, INDX=INDX,
      433     3305                         PTR=CAND_KEY$);

   3312  0 000523   400017 720105                    LXL0    15,AL,PR4
         0 000524   000002 100003                    CMPX0   2,DU
         0 000525   000532 601000 0                  TNZ     s:3312+7

   3312  0 000526   400020 475505                    LDP5    16,AL,PR4
         0 000527   500002 636500                    EPPR6   2,,PR5
         0 000530   200032 456500                    STP6    CAND_KEY$,,AUTO
         0 000531   000537 710000 0                  TRA     s:3315

   3312  0 000532   200031 236100                    LDQ     INDX,,AUTO
         0 000533   000023 736000                    QLS     19
         0 000534   000020 036003                    ADLQ    16,DU
         0 000535   200003 036100                    ADLQ    @STREAM,,AUTO
         0 000536   200032 756100                    STQ     CAND_KEY$,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:44   

      434     3315    6                    IF ABS$KEY.BYTES ~= CAND$KEY.BYTES THEN

   3315  0 000537   200033 475500                    LDP5    ABS_KEY$,,AUTO
         0 000540   500000 236100                    LDQ     0,,PR5
         0 000541   000033 772000                    QRL     27
         0 000542   200032 476500                    LDP6    CAND_KEY$,,AUTO
         0 000543   000000 621006                    EAX1    0,QL
         0 000544   600000 236100                    LDQ     0,,PR6
         0 000545   000033 772000                    QRL     27
         0 000546   000000 622006                    EAX2    0,QL
         0 000547   040140 106540                    CMPC    fill='040'O
         0 000550   500000 200011                    ADSC9   0,,PR5                   cn=1,n=*X1
         0 000551   600000 200012                    ADSC9   0,,PR6                   cn=1,n=*X2
         0 000552   000554 600000 0                  TZE     s:3319

      435     3316    6                       ABS_EQ_NEXT = %FALSE;

   3316  0 000553   300000 450100                    STZ     0,,PR3

      436     3317    6                    END;

      437     3318    5                 END;

      438     3319    4              INDX = INDX + 1;

   3319  0 000554   200031 054100                    AOS     INDX,,AUTO

      439     3320    4              END;

   3320  0 000555   200031 235100                    LDA     INDX,,AUTO
         0 000556   000003 115007                    CMPA    3,DL
         0 000557   000573 605000 0                  TPL     s:3322
         0 000560   200027 471500                    LDP1    @ABS_EQ_CURR,,AUTO
         0 000561   100000 234100                    SZN     0,,PR1
         0 000562   000566 604000 0                  TMI     s:3320+9
         0 000563   200030 473500                    LDP3    @ABS_EQ_NEXT,,AUTO
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:45   
         0 000564   300000 234100                    SZN     0,,PR3
         0 000565   000573 605000 0                  TPL     s:3322
         0 000566   000003 735000                    ALS     3
         0 000567   000000 106505                    CMPC    fill='000'O
         0 000570   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=8
         0 000571   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000572   000423 601000 0                  TNZ     s:3278

      440     3321
      441     3322    3           RETURN;

   3322  0 000573   200026 221300                    LDX1  ! ABS_EQ_NEXT+2,,AUTO
         0 000574   000001 702211                    TSX2  ! 1,X1
      442     3323
      443     3324    3   END COMPARE_ABS_WITH_CURR_AND_NEXT;
      444     3325
      445     3326    2   END PREAD;
      446     3327
      447     3328    1   END VDA$LREAD;
      448     3329        %EOD;

PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:46   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$LREAD.
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:47   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ABSOLUTE                 27-0-0/w PTR         r     1 @ABS_EQ_CURR
    30-0-0/w PTR         r     1 @ABS_EQ_NEXT               6-0-0/w PTR         r     1 @READ
     5-0-0/w PTR         r     1 @RELATIVE                  3-0-0/w PTR         r     1 @STREAM
    *0-0-0/w STRC(324)   r     1 ABSOLUTE                  23-0-0/w BIT         r     1 ABS_EQ_CURR
    *0-0-0/w BIT         r     1 ABS_EQ_CURR               24-0-0/w BIT         r     1 ABS_EQ_NEXT
    *0-0-0/w BIT         r     1 ABS_EQ_NEXT               33-0-0/w PTR         r     1 ABS_KEY$
    32-0-0/w PTR         r     1 CAND_KEY$                 31-0-0/w SBIN        r     1 INDX
    11-0-0/w STRC(324)   r     1 PREAD_ABS                 22-0-0/w SBIN        r     1 PREAD_REL
    *0-0-0/w BIT         r     1 READ                       7-0-0/w SBIN        r     1 REL
    *0-0-0/w SBIN        r     1 RELATIVE                  *0-0-0/w STRC(864)   r     1 STREAM

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$$MON_ACC               0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 ABS$KEY                    0-0-0/w ASTR(9)     r     1 CAND$KEY
     0-0-0/w STRC(1944)  r     1 PORT                       0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDA$LREAD requires 381 words for executable code.
   Procedure VDA$LREAD requires 32 words of local(AUTO) storage.
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:48   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:49   
          MINI XREF LISTING

ABS$KEY.BYTES IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3176**DCL      3296>>IF       3315>>IF
ABS$KEY.LENGTH# IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3174**DCL      3176--IMP-SIZ  3296>>IF       3315>>IF
ABSOLUTE
      2632**DCL       152--PROC     2859<>CALL     2864--IF       2865>>IF       2987--IF       3002--IF
      3007>>IF       3043--IF       3046>>ASSIGN   3058--IF
ABSOLUTE.EOF
      2650**DCL      2865>>IF       2988>>IF       3244>>IF
ABSOLUTE.KEY
      2646**DCL      3267>>DOWHILE
ABSOLUTE.KEY.REP#
      2648**DCL      3278>>IF
ABSOLUTE.KEY.V$
      2648**DCL      3278>>ASSIGN   3278--ASSIGN
ABS_EQ_CURR IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3126**DCL      3124--PROC     3246<<ASSIGN   3251<<ASSIGN   3258<<ASSIGN   3265<<ASSIGN   3267>>DOWHILE
      3281>>IF       3283<<ASSIGN   3297<<ASSIGN
ABS_EQ_CURR IN PROCEDURE PREAD
      2979**DCL      3003<<ASSIGN   3009<>CALL     3013>>IF       3021>>IF
ABS_EQ_NEXT IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3127**DCL      3124--PROC     3247<<ASSIGN   3252<<ASSIGN   3259<<ASSIGN   3266<<ASSIGN   3267>>DOWHILE
      3300>>IF       3302<<ASSIGN   3316<<ASSIGN
ABS_EQ_NEXT IN PROCEDURE PREAD
      2980**DCL      3004<<ASSIGN   3009<>CALL     3021>>IF
ABS_KEY$ IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3132**DCL      3166--IMP-PTR  3278<<ASSIGN   3278<<ASSIGN   3296>>IF       3296>>IF       3315>>IF
      3315>>IF
CAND$KEY.BYTES IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3153**DCL      3296>>IF       3315>>IF
CAND$KEY.LENGTH# IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3151**DCL      3153--IMP-SIZ  3296>>IF       3315>>IF
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:50   
CAND_KEY$ IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3131**DCL      3143--IMP-PTR  3293<<ASSIGN   3293<<ASSIGN   3296>>IF       3296>>IF       3312<<ASSIGN
      3312<<ASSIGN   3315>>IF       3315>>IF
COMPARE_ABS_FAILED IN PROCEDURE PREAD
      3063**LABEL    3009--CALLALT
COMPARE_ABS_WITH_CURR_AND_NEXT IN PROCEDURE PREAD
      3124**PROC     3009--CALL
INDX IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3130**DCL      3264<<ASSIGN   3267>>DOWHILE  3267>>DOWHILE  3278>>IF       3278>>ASSIGN   3278>>ASSIGN
      3282>>IF       3293>>IF       3293>>ASSIGN   3293>>ASSIGN   3301>>IF       3312>>IF       3312>>ASSIGN
      3312>>ASSIGN   3319<<ASSIGN   3319>>ASSIGN
OCLEAR_LOCATION_FAILED IN PROCEDURE PREAD
      3063**LABEL    2990--CALLALT  2992--CALLALT  3029--CALLALT  3059--CALLALT  3063--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE PREAD
      3063**LABEL    3061--CALLALT
PORT
      2761**DCL      3050<>CALL
PORT.CURRENT
      2814**DCL      3061<>CALL
PORT.EXIST#
      2787**DCL      2860>>IF
PREAD
      2947**PROC     2878--CALL
PREAD_ABS IN PROCEDURE PREAD
      2958**DCL      2984<<ASSIGN   3044<<ASSIGN   3046<<ASSIGN   3050<>CALL
PREAD_FAILED
      2882**LABEL    2878--CALLALT
PREAD_FAILED IN PROCEDURE PREAD
      3063**LABEL    3050--CALLALT
PREAD_REL IN PROCEDURE PREAD
      2978**DCL      2985<<ASSIGN   3047<<ASSIGN   3050<>CALL
READ
      2653**DCL       152--PROC     2859<>CALL     3013>>IF       3021>>IF       3050<>CALL     3052>>IF
REL
      2750**DCL      2863<<ASSIGN   2867<<ASSIGN   2988>>IF       3000>>IF       3000>>IF       3013>>IF
      3021>>IF       3021>>IF       3047>>ASSIGN
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:51   
RELATIVE
      2652**DCL       152--PROC     2859<>CALL     2863>>ASSIGN   2865>>IF       2865>>IF       3058>>IF
STREAM
      2526**DCL       152--PROC     2859<>CALL     2883<>CALL
STREAM.CURRENT
      2577**DCL      2990<>CALL     3029<>CALL     3031<<ASSIGN   3044>>ASSIGN   3059<>CALL     3061<>CALL
STREAM.CURRENT.EOF
      2593**DCL      2994<<ASSIGN   3245>>IF       3257>>IF
STREAM.CURRENT.KEY
      2589**DCL      3282>>IF
STREAM.CURRENT.KEY.REP#
      2591**DCL      3293>>IF
STREAM.CURRENT.KEY.V$
      2591**DCL      3293>>ASSIGN   3293--ASSIGN
STREAM.LAST_OP#
      2552**DCL      2995<<ASSIGN   3017<<ASSIGN   3033<<ASSIGN   3049<<ASSIGN   3053<<ASSIGN
STREAM.NEXT
      2605**DCL      2992<>CALL     3021>>IF       3031>>ASSIGN   3032<<ASSIGN   3063<>CALL
STREAM.NEXT.EOF
      2621**DCL      3250>>IF       3266>>ASSIGN
STREAM.NEXT.KEY
      2617**DCL      3301>>IF
STREAM.NEXT.KEY.REP#
      2619**DCL      3312>>IF
STREAM.NEXT.KEY.V$
      2619**DCL      3312>>ASSIGN   3312--ASSIGN
STREAM.PORT$
      2552**DCL      2761--IMP-PTR  2860>>IF       3050>>CALL     3061>>CALL
TEST_CURRENT_OR_NEXT IN PROCEDURE PREAD
      3001**LABEL    3008--EXIT
VD$TEXTC_REMOTE.LENGTH# IN PROCEDURE COMPARE_ABS_WITH_CURR_AND_NEXT
      3235**DCL      3237--IMP-SIZ  3278--ASSIGN   3293--ASSIGN   3312--ASSIGN
VDA$PREAD
      2656**DCL-ENT  3050--CALL
VDG$EBREAK_ACKNOWLEDGE
      2662**DCL-ENT  2855--CALL
PL6.E3A0      #001=VDA$LREAD File=VDA$LOWER.:VDA5TSI                             FRI 07/04/97 11:05 Page:52   
VDG$ESCREECH
      2661**DCL-ENT  2861--CALL
VDG$MACC_LREAD
      2659**DCL-ENT  2859--CALL
VDG$MACC_RETURN
      2660**DCL-ENT  2883--CALL
VDG$OCLEAR_LOCATION
      2657**DCL-ENT  2990--CALL     2992--CALL     3029--CALL     3059--CALL     3063--CALL
VDG$OCOPY_LOCATION
      2658**DCL-ENT  3061--CALL
VD_$$MON_ACC.V#
      2744**DCL      2858>>IF       2882>>IF
VD_6E.INTERRUPT.STATE#
      2698**DCL      2854>>IF
VD_6E.STATS#
      2699**DCL      3015<<ASSIGN   3015>>ASSIGN   3027<<ASSIGN   3027>>ASSIGN

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:53   
      449        1        /*T***********************************************************/
      450        2        /*T*                                                         */
      451        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      452        4        /*T*                                                         */
      453        5        /*T***********************************************************/
      454        6
      455        7        /*D* NAME: VDA$LWRITE
      456        8            PARAMETERS:
      457        9                STREAM - VD$STREAM to use.  This stream must be open to
      458       10                    an internal or external file.
      459       11                ABSOLUTE - Optional VD$LOCATION specifying an absolute location
      460       12                    to position to.  ABSOLUTE must be one of the following:
      461       13                    Omitted - We'll write at the stream's current position.
      462       14                        The new Spec and Data components will replace those
      463       15                        of the last node for which a key appears in the
      464       16                        STREAM's LEVELs (this must be level %LVL_LOWER at the lowest).
      465       17                    .KEY (%(LVL_LOWER-1)) thru (n) - Keys for levels %LVL_LOWER
      466       18                        thru (n+1).  If the file has more than two levels,
      467       19                        positioning will be to the lowest level given
      468       20                        (internal files only); for example, if the
      469       21                        file has 5 levels but keys are only given for levels 1
      470       22                        and 2, we will clear the position on levels 3 and 4.
      471       23                        Writing will take place at the specified
      472       24                        node.
      473       25                    Note - Any dynamic storage pointed-to by ABSOLUTE will
      474       26                        remain in the caller's ownership after this call.
      475       27                SPEC - Optional VD$SPEC specifying the new Spec component
      476       28                    for the node.  If you don't want to affect the
      477       29                    Spec component, omit this parameter.
      478       30                    Note - Passing a VD$SPEC which is BASED on a pointer
      479       31                        which is currently NIL acts as tho you omitted
      480       32                        the parameter -- the Spec component isn't affected.
      481       33                    Note - If SPEC.REP# = %REP_REMOTE, then SPEC.V$ must point
      482       34                        to dynamic, static, or constant storage -- never to
      483       35                        the caller's auto storage!!  If the remote string
      484       36                        resides in dynamic storage (as indicated by having
      485       37                        a non-0 .OBJECT.SIZE#), then it will no longer be
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:54   
      486       38                        owned by the caller after this call.
      487       39                        Give me a Spec and I keep it, not you.  See SPEC
      488       40                        under OUTPUT comments.
      489       41                DATA - Optional VD$BUFFER containing the new Data component
      490       42                    for the node.  If you don't want to affect the
      491       43                    Data component, omit this parameter.
      492       44                    Note - Passing a VD$BUFFER which is BASED on a pointer
      493       45                        which is currently NIL acts as tho you omitted
      494       46                        the parameter -- the Data component isn't affected.
      495       47                    Note - DATA must reside in either dynamic storage, static,
      496       48                        or constant -- never the caller's auto storage!!
      497       49                        If DATA resides in dynamic (as indicated by having a
      498       50                        non-0 .OBJECT.SIZE#), it will no longer be owned
      499       51                        by the caller after this call.
      500       52                        Give me a Data buffer and I keep it, not you.  See
      501       53                        DATA under OUTPUT comments.
      502       54            INPUT:
      503       55                VD_ACCESSOR_PRIV - If we're writing to an internal file and
      504       56                    we're not doing the write on behalf of the user, but
      505       57                    rather are just updating an internally-maintained
      506       58                    value (e.g., $SITES, $LEFTOVER, etc.), then the
      507       59                    VD_ACCESSOR_PRIV's %NAC_WRITE bit must be set.
      508       60                VD_6E.HISTORY$ - If History is enabled, this must point to
      509       61                    an open VD$STREAM for the History file.
      510       62            OUTPUT:
      511       63                PORT.LEVEL.SPEC_MODIFIED and/or .DATA_MODIFIED will be set
      512       64                    at the appropriate level.
      513       65                If ABSOLUTE is given, STREAM.CURRENT will be set to ABSOLUTE.
      514       66                STREAM.NEXT may be cleared.
      515       67                PORT.CURRENT will specify the keys of the written node.
      516       68                PORT.LEVEL.SPEC and/or .DATA$ at the appropriate level
      517       69                    will contain/point-to the passed SPEC and/or DATA.
      518       70                For internal files, if the node to be written doesn't yet
      519       71                    exist in the file, it will be created and inserted into
      520       72                    the file.
      521       73                If the History file is enabled, the node being replaced, if any,
      522       74                    will be appended to the History file.
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:55   
      523       75                Upon normal return:
      524       76                    SPEC will be %CLEAR; the Accessor now owns the
      525       77                        SPEC and any dynamic storage pointed-to by SPEC.V$.
      526       78                    DATA -- if it's dynamic -- will no longer be owned by the
      527       79                        caller.  The Accessor owns it now.  The caller should
      528       80                        spoil it's pointer to the DATA VD$BUFFER.
      529       81                Upon non-fatal alternate returns, SPEC and DATA will be
      530       82                    untouched; the caller will still own any dynamic storage
      531       83                    associated with them.
      532       84            DESCRIPTION:
      533       85                If ABSOLUTE is given, first clear STREAM.CURRENT and load it
      534       86                    from ABSOLUTE.
      535       87                If History is enabled, or this is a predefined file or an
      536       88                internal file:
      537       89                    Call VDA$PREAD to find the node and read it into the Port
      538       90                        registers.
      539       91                    If History enabled:
      540       92                        Write the current node contents to the History file.
      541       93                Else if port is positioned at different node than STREAM:
      542       94                    If the port contains a node which has been modified,
      543       95                        call VDA$PFLUSH.
      544       96                    Clear the port's Keys, Specs, Datas, and Internal$s.
      545       97                    Load the port keys from STREAM.
      546       98
      547       99                If this is a predefined file:
      548      100                    Call the appropriate node writer.  This will free the
      549      101                        Port Spec and/or Data components and copy SPEC and/or
      550      102                        DATA to the Port; if the file is internal, the file
      551      103                        node will also be updated.  The node writer may have
      552      104                        side-effects (building windows, changing internal values),
      553      105                        and may reject the write (value illegal).
      554      106                Else (that is, if this isn't a predefined file):
      555      107                    Call VDA$PWRITE to copy SPEC and/or DATA to the port.
      556      108                        If this is an internal file, the file node will also
      557      109                        be updated.
      558      110                If the file is internal and the specified node doesn't yet
      559      111                    exist in the file, build a new node and insert it
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:56   
      560      112                    into the file tree.
      561      113                    We do this now rather than at
      562      114                    VDA$PFLUSH-time 'cause we want all PORT.LEVEL.INTERNAL$s
      563      115                    to point to nodes which actually exist in the file tree.
      564      116                    Also, we now know where the new node is to be inserted
      565      117                    (VDA$PREAD found the node following it's proper place),
      566      118                    and we don't want PFLUSH to have to search all over again.
      567      119        */
      568      120
      569      121        VDA$LWRITE: PROC (STREAM, ABSOLUTE, SPEC, DATA) ALTRET;
      570      122
      571      123
      572      124        %INCLUDE VD_MACROS_M;
      573     2339        %INCLUDE VD_PERR_C;
      574     2487
      575     2488        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
      576     2594        %VD$LOCATION (NAME=ABSOLUTE, STCLASS=PARAM);
      577     2622        %VD$SPEC (NAME=SPEC, STCLASS=PARAM);
      578     2636        %VD$BUFFER (NAME=DATA, STCLASS=PARAM);
      579     2694
      580     2695
      581     2696    1   DCL VDA$LSAVE_OLD_NODE  ENTRY (3) ALTRET;
      582     2697    1   DCL VDA$PREAD           ENTRY (6) ALTRET;
      583     2698    1   DCL VDA$PWRITE          ENTRY (4) ALTRET;
      584     2699    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
      585     2700    1   DCL VDP$RWRITE          ENTRY (5) ALTRET;
      586     2701    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
      587     2702    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      588     2703    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
      589     2704    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      590     2705    1   DCL VDG$BUILD_KEY       ENTRY (3) ALTRET;
      591     2706    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
      592     2707    1   DCL VDG$MACC_LWRITE     ENTRY (4);
      593     2708    1   DCL VDG$MACC_RETURN     ENTRY (1);
      594     2709    1   DCL VDG$ESCREECH        ENTRY (3);
      595     2710    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
      596     2711
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:57   
      597     2712
      598     2713        %VD_6E (STCLASS=SYMREF);
      599     2749    1   DCL VD_NODE_WRITERS$$ (0:0) EPTR SYMREF;
      600     2750        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      601     2795    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      602     2796            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=STATIC);
      603     2810
      604     2811
      605     2812
      606     2813    1   DCL SAVE_POSITION_PROTECT BIT(1) ALIGNED;
      607     2814    1   DCL INDX SBIN;
      608     2815    1   DCL LEVEL SBIN;
      609     2816    1   DCL WRITE_LEVEL SBIN;
      610     2817    1   DCL STRUCTURE_NODE$ PTR;
      611     2818    1   DCL 1 STREAM_PROTECT,
      612     2819    1         2 FLAG (0:%(MX_ACCESS_LEVELS-1)) BIT(1);
      613     2820    1   DCL HISTORY_ENABLED BIT(1) ALIGNED;
      614     2821    1   DCL NODE_EXISTS BIT(1) ALIGNED;
      615     2822    1   DCL REPOSITION_PORT BIT(1) ALIGNED;
      616     2823    1   DCL FLUSH_PORT BIT(1) ALIGNED;
      617     2824    1   DCL WITHIN_RANGE BIT(1) ALIGNED;
      618     2825    1   DCL PORT_KEY$ PTR;
      619     2826    1   DCL PORT_SPEC$ PTR;
      620     2827    1   DCL PASSED_SPEC$ PTR;
      621     2828    1   DCL STREAM_KEY$ (0:%(MX_LOCATION_LEVELS-1)) PTR;
      622     2829    1   DCL NODE_WRITER$$ EPTR;
      623     2830    1   DCL INSERT_BEFORE$ PTR;
      624     2831    1   DCL NEW_NODE$ PTR;
      625     2832    1   DCL PARENT_NODE$ PTR;
      626     2833    1   DCL ENCODED_NODE$ PTR;
      627     2834    1   DCL SUBST_FIELD$ PTR;
      628     2835    1   DCL 1 SAVE_ACCESSOR_PRIV ALIGNED,
      629     2836            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, STCLASS=AUTO);
      630     2850
      631     2851
      632     2852        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
      633     2950        %VD$FILE_NODE (NAME=STRUCTURE$NODE, STCLASS="BASED(STRUCTURE_NODE$)");
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:58   
      634     3043        %VD$TEXTC (NAME=KEY, STCLASS=BASED);
      635     3066        %VD$TEXTC (NAME=PORT$SPEC, STCLASS="BASED(PORT_SPEC$)");
      636     3089        %VD$TEXTC (NAME=PASSED$SPEC, STCLASS="BASED(PASSED_SPEC$)");
      637     3112        %VD$FILE_NODE (NAME=INSERT$BEFORE, STCLASS="BASED(INSERT_BEFORE$)");
      638     3205        %VD$FILE_NODE (NAME=NEW$NODE, STCLASS="BASED(NEW_NODE$)");
      639     3298        %VD$FILE_NODE (NAME=PARENT$NODE, STCLASS="BASED(PARENT_NODE$)");
      640     3391        %VD$ENCODED_NODE (NAME=ENCODED$NODE, STCLASS="BASED(ENCODED_NODE$)");
      641     3512        %VD$STREAM (NAME=HISTORY$STREAM, STCLASS="BASED(VD_6E.HISTORY$)");
      642     3618        %VD$FILE_NODE;
      643     3711        %VD$TEXTC_REMOTE;
      644     3772        %VD$BUFFER;
      645     3830        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      646     3883        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
      647     3928        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
      648     3973
      649     3974
      650     3975
      651     3976    1           SAVE_POSITION_PROTECT = PORT.POSITION_PROTECT;
      652     3977    1           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN
      653     3978    1              GOTO BREAK_HIT_FAILURE;
      654     3979    1           IF VD_$$MON_ACC.V# > 0 THEN
      655     3980    1              CALL VDG$MACC_LWRITE (STREAM, ABSOLUTE, SPEC, DATA);
      656     3981    1           IF PORT.EXIST# = 0 THEN
      657     3982    1              CALL VDG$ESCREECH (PORT.EXIST#);
      658     3983
      659     3984    1           STRUCTURE_NODE$ = PORT.STRUCTURE$;
      660     3985    1           WRITE_LEVEL = STRUCTURE$NODE.COUNT# - 1;
      661     3986
      662     3987    1           IF ADDR(ABSOLUTE) ~= ADDR(NIL) THEN
      663     3988    2   POSITION_STREAM: DO;
      664     3989    2              IF PORT.POSITION_PROTECT THEN
      665     3990    2                 GOTO PORT_BUSY_FAILURE;
      666     3991    2              PORT.POSITION_PROTECT = %TRUE;
      667     3992    2              STREAM.LAST_OP# = %ACCOP_LOCATION;
      668     3993    2              IF ABSOLUTE.EOF OR ABSOLUTE = %CLEAR THEN
      669     3994    2                 CALL VDG$ESCREECH (ABSOLUTE.EOF);
      670     3995    2              CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:59   
      671     3996    2                ALTRET (OCLEAR_LOCATION_FAILED);
      672     3997    2              CALL VDG$OCOPY_LOCATION (ABSOLUTE, STREAM.CURRENT)
      673     3998    2                ALTRET (OCOPY_LOCATION_FAILED);
      674     3999    2              CALL VDG$OCLEAR_LOCATION (STREAM.NEXT)
      675     4000    2                ALTRET (OCLEAR_LOCATION_FAILED);
      676     4001    3              DO INDX = %(LVL_LOWER-1) TO (STRUCTURE$NODE.COUNT# - 2);
      677     4002    4                 IF ABSOLUTE.KEY (INDX) = %CLEAR THEN DO;
      678     4003    4                    IF INDX < WRITE_LEVEL THEN
      679     4004    4                       WRITE_LEVEL = INDX;
      680     4005    4                    END;
      681     4006    3                 END;
      682     4007    2              END POSITION_STREAM;
      683     4008
      684     4009    1           STREAM_PROTECT = STREAM.PROTECT (WRITE_LEVEL);
      685     4010    1           IF (ADDR(SPEC) ~= ADDR(NIL)
      686     4011    1             AND STREAM_PROTECT.FLAG (%CO_SPEC))
      687     4012    1             OR (ADDR(DATA) ~= ADDR(NIL)
      688     4013    1             AND STREAM_PROTECT.FLAG (%CO_DATA)) THEN
      689     4014    1              GOTO CANT_WRITE_FAILURE;
      690     4015
      691     4016
      692     4017                /*
      693     4018                *   We want to do a full VDA$PREAD before writing in the
      694     4019                *       following cases:
      695     4020                *   o If this is an external consec file -- we can't insert
      696     4021                *       new records into such a file.
      697     4022                *   o If History is enabled (and this write isn't to the
      698     4023                *       History stream itself!) -- to get the old node so we
      699     4024                *       can save it in the History file before writing the
      700     4025                *       new node.
      701     4026                *   o If this is an internal file -- to find the specified
      702     4027                *       node in the file tree, or at least where to insert
      703     4028                *       it into the file tree.
      704     4029                *   o If this is a predefined file (which may be internal
      705     4030        *N**N*  *       or external) --
      706     4031                *       to see if this write is inserting a node or just
      707     4032                *       replacing it; the predefined-node writers need
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:60   
      708     4033                *       this info.
      709     4034                *   If this call doesn't meet any one of these criteria,
      710     4035                *       then we can write "blindly" (note this will always
      711     4036                *       be to an external file), telling the monitor to
      712     4037                *       replace or insert as it pleases.
      713     4038                */
      714     4039
      715     4040    1           HISTORY_ENABLED = %FALSE;
      716     4041    1           IF ADDR(STREAM) ~= VD_6E.HISTORY$
      717     4042    1             AND VD_6E.HISTORY$ ~= ADDR(NIL) THEN
      718     4043    1              IF HISTORY$STREAM.PORT$ ~= ADDR(NIL) THEN
      719     4044    1                 IF HISTORY$STREAM.PORT$ -> PORT.EXIST# ~= 0 THEN
      720     4045    1                    HISTORY_ENABLED = %TRUE;
      721     4046
      722     4047    1           REPOSITION_PORT = %FALSE;
      723     4048    1           FLUSH_PORT = %FALSE;
      724     4049
      725     4050    1           IF HISTORY_ENABLED
      726     4051    1             OR (PORT.LEVEL.ORG# (WRITE_LEVEL) = %ORG_CONSEC)
      727     4052    1             OR (PORT.DCB# = 0) THEN
      728     4053    2   FIND_AND_READ_OLD_NODE: DO;
      729     4054    2              SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;
      730     4055    2              VD_ACCESSOR_PRIV = %NAC_ALL_BITS;
      731     4056                   /* Make sure we get positioned to the proper node in the file */
      732     4057    2              CALL VDA$PREAD (PORT, ABSOLUTE, 0, %TRUE, NODE_EXISTS)
      733     4058    2                ALTRET (PREAD_FAILED);
      734     4059    2              VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;
      735     4060
      736     4061    3              IF PORT.DCB# ~= 0 THEN DO;
      737     4062    3                 IF NOT NODE_EXISTS
      738     4063    3                   AND PORT.LEVEL.ORG# (WRITE_LEVEL) = %ORG_CONSEC THEN
      739     4064    3                    GOTO CANT_INSERT_DELETE_REC_FAILURE;
      740     4065    3                 END;
      741     4066    3              ELSE DO;
      742     4067    3                 IF PORT.LEVEL.INTERNAL$ (WRITE_LEVEL - 1) = ADDR(NIL) THEN
      743     4068    3                    GOTO FILE_NOT_FILLED_FAILURE; /* Parent must exist */
      744     4069    3                 IF NODE_EXISTS THEN
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:61   
      745     4070    3                    IF NOT (PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) ->
      746     4071    3                      VD$FILE_NODE.ACCESS (%NAC_WRITE)
      747     4072    3                      OR VD_ACCESSOR_PRIV.ACCESS (%NAC_WRITE)) THEN
      748     4073    3                       GOTO CANT_WRITE_NODE_FAILURE;
      749     4074    3                 END;
      750     4075
      751     4076    3              IF HISTORY_ENABLED THEN DO;
      752     4077    3                 CALL VDA$LSAVE_OLD_NODE (STREAM, WRITE_LEVEL, NODE_EXISTS)
      753     4078    3                   ALTRET (LSAVE_OLD_NODE_FAILED);
      754     4079    3                 END;
      755     4080
      756     4081    3              IF PORT.DCB# = 0 AND NOT NODE_EXISTS THEN DO;
      757     4082                      /* Save addr of next node, or nil if eof */
      758     4083    3                 INSERT_BEFORE$ = PORT.LEVEL.INTERNAL$ (WRITE_LEVEL);
      759     4084    3                 CALL BUILD_INTERNAL_NODE
      760     4085    3                   ALTRET (BUILD_INTERNAL_NODE_FAILED);
      761     4086    3                 END;
      762     4087
      763     4088    2              IF PORT.LEVEL.ORG# (WRITE_LEVEL) = %ORG_CONSEC
      764     4089    3                AND PORT.CURRENT.EOF THEN DO;
      765     4090                      /*
      766     4091                      *   Appending record to end of consecutive file:  VDA$PREAD just
      767     4092                      *     positioned the port to EOF.  Set flag so we'll reposition
      768     4093                      *     the port to the ABSOLUTE key.
      769     4094                      */
      770     4095    3                 REPOSITION_PORT = %TRUE;
      771     4096    3                 FLUSH_PORT = %TRUE;
      772     4097    3                 END;
      773     4098    2              END FIND_AND_READ_OLD_NODE;
      774     4099
      775     4100    1           ELSE
      776     4101
      777     4102    2   BLIND_WRITE: DO;
      778     4103    2              FLUSH_PORT = %FALSE;
      779     4104
      780     4105    2   COMPARE_PORT_POSITION:
      781     4106    3              DO INDX = %(LVL_LOWER-1) TO (WRITE_LEVEL - 1);
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:62   
      782     4107    4                 IF PORT.CURRENT.EOF THEN DO;
      783     4108    4                    REPOSITION_PORT = %TRUE;
      784     4109    4                    EXIT COMPARE_PORT_POSITION;
      785     4110    4                    END;
      786     4111                      %GETKEY (KEY=PORT.CURRENT.KEY, INDX=INDX,
      787     4112                      PTR=PORT_KEY$);
      788     4122                      %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=INDX,
      789     4123                      PTR="STREAM_KEY$ (INDX)");
      790     4133    3                 IF STREAM_KEY$ (INDX) -> KEY.BYTES ~=
      791     4134    3                   PORT_KEY$ -> KEY.BYTES THEN
      792     4135    3                    REPOSITION_PORT = %TRUE;
      793     4136    3                 IF PORT.LEVEL.SPEC_MODIFIED (INDX + 1)
      794     4137    3                   OR PORT.LEVEL.DATA_MODIFIED (INDX + 1) THEN
      795     4138    3                    FLUSH_PORT = %TRUE;
      796     4139    3                 END COMPARE_PORT_POSITION;
      797     4140    2              END BLIND_WRITE;
      798     4141
      799     4142    1           IF REPOSITION_PORT THEN
      800     4143    2   POSITION_PORT: DO;
      801     4144    3              IF FLUSH_PORT THEN DO;
      802     4145    3                 CALL VDA$PFLUSH (PORT, %TO_PRESENTER)
      803     4146    3                   ALTRET (PFLUSH_FAILED);
      804     4147    3                 END;
      805     4148    2              CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)
      806     4149    2                ALTRET (OCLEAR_LOCATION_FAILED);
      807     4150    2              CALL VDG$OCOPY_LOCATION (STREAM.CURRENT, PORT.CURRENT)
      808     4151    2                ALTRET (OCOPY_LOCATION_FAILED);
      809     4152
      810     4153    2   EACH_LEVEL:
      811     4154    3              DO LEVEL = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 1;
      812     4155    3                 PORT.LEVEL.SPEC_MODIFIED (LEVEL) = %FALSE;
      813     4156    3                 PORT.LEVEL.DATA_MODIFIED (LEVEL) = %FALSE;
      814     4157                      %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=LEVEL);
      815     4167    4                 IF PORT.LEVEL.DATA$ (LEVEL) ~= ADDR(NIL) THEN DO;
      816     4168    4                    CALL VDG$OFREE (PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER)
      817     4169    4                      ALTRET (OFREE_FAILED);
      818     4170    4                    PORT.LEVEL.DATA$ (LEVEL) = ADDR(NIL);
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:63   
      819     4171    4                    END;
      820     4172    3                 PORT.LEVEL.INTERNAL$ (LEVEL) = ADDR(NIL);
      821     4173    3                 END EACH_LEVEL;
      822     4174                   /*
      823     4175                   *  Here we must set PORT.LEVEL.x_MODIFIED for the appropriate
      824     4176                   *    component and level being written, because if we change
      825     4177                   *    the Port's current location at all, we've modified its
      826     4178                   *    registers.  Note that an optimization in VDA$PWRITE will
      827     4179                   *    not set .x_MODIFIED if the component being written equals
      828     4180                   *    the component in the Port; hence if the user writes the
      829     4181                   *    same data at a different key, this is the only spot at which
      830     4182                   *    we'll detect the change and set .x_MODIFIED.
      831     4183                   */
      832     4184    2              IF ADDR(DATA) ~= ADDR(NIL) THEN
      833     4185    2                 PORT.LEVEL.DATA_MODIFIED (WRITE_LEVEL) = %TRUE;
      834     4186    2              IF ADDR(SPEC) ~= ADDR(NIL) THEN
      835     4187    2                 PORT.LEVEL.SPEC_MODIFIED (WRITE_LEVEL) = %TRUE;
      836     4188    2              END POSITION_PORT;
      837     4189
      838     4190
      839     4191                /*
      840     4192                *  Predefined files always have formatted Spec components.
      841     4193                */
      842     4194
      843     4195    1           IF PORT.LEVEL.SPEC_TYPE# (WRITE_LEVEL) >= %MX_SPEC_TYPES THEN
      844     4196    1              CALL VDG$ESCREECH (PORT.LEVEL.SPEC_TYPE# (WRITE_LEVEL));
      845     4197    1           NODE_WRITER$$ =
      846     4198    1             VD_NODE_WRITERS$$ (PORT.LEVEL.SPEC_TYPE# (WRITE_LEVEL));
      847     4199    2           IF NODE_WRITER$$ ~= ENTADDR(NIL) THEN DO;
      848     4200    2              CALL NODE_WRITER$$ (PORT, SPEC, DATA, NODE_EXISTS)
      849     4201    2                ALTRET (NODE_WRITER_FAILED);
      850     4202    2              END;
      851     4203    2           ELSE DO;
      852     4204    2              CALL VDA$PWRITE (PORT, WRITE_LEVEL, SPEC, DATA)
      853     4205    2                ALTRET (PWRITE_FAILED);
      854     4206    2              END;
      855     4207                /* SPEC and DATA have now been cleared/freed */
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:64   
      856     4208
      857     4209    1           STREAM.LAST_OP# = %ACCOP_WRITE;
      858     4210
      859     4211    2           IF PORT.DCB# = 0 AND NOT NODE_EXISTS THEN DO;
      860     4212                   /*
      861     4213                   *  We built a new file node for an internal file earlier;
      862     4214                   *    now that we know all's ok, insert it into the file tree:
      863     4215                   *        If INSERT_BEFORE$ = ADDR(NIL), insert the new node
      864     4216                   *            after the last node at WRITE_LEVEL;
      865     4217                   *        If INSERT_BEFORE$ ~= ADDR(NIL), it points to a
      866     4218                   *            node in the file tree -- insert the new node
      867     4219                   *            before the INSERT_BEFORE$ node.
      868     4220                   */
      869     4221                   %INCREMENT (INDX=%STG_ACC_INT_INSERTIONS);
      870     4224
      871     4225    2              PARENT_NODE$ = PORT.LEVEL.INTERNAL$ (WRITE_LEVEL - 1);
      872     4226    2              NEW_NODE$ = PORT.LEVEL.INTERNAL$ (WRITE_LEVEL);
      873     4227    2              NEW$NODE.FLINK$ = INSERT_BEFORE$;
      874     4228    3              IF INSERT_BEFORE$ = ADDR(NIL) THEN DO;
      875     4229    3                 NEW$NODE.BLINK$ = PARENT$NODE.TAIL$;
      876     4230    3                 PARENT$NODE.TAIL$ = NEW_NODE$;
      877     4231    3                 END;
      878     4232    3              ELSE DO;
      879     4233    3                 NEW$NODE.BLINK$ = INSERT$BEFORE.BLINK$;
      880     4234    3                 INSERT$BEFORE.BLINK$ = NEW_NODE$;
      881     4235    3                 END;
      882     4236    2              IF NEW$NODE.BLINK$ = ADDR(NIL) THEN
      883     4237    2                 PARENT$NODE.HEAD$ = NEW_NODE$;
      884     4238    2              ELSE
      885     4239    2                 NEW$NODE.BLINK$->VD$FILE_NODE.FLINK$ = NEW_NODE$;
      886     4240    2              PARENT$NODE.COUNT# = PARENT$NODE.COUNT# + 1;
      887     4241    2              END;
      888     4242
      889     4243
      890     4244    1           PORT.POSITION_PROTECT = SAVE_POSITION_PROTECT;
      891     4245    1           IF VD_$$MON_ACC.V# > 0 THEN
      892     4246    1              CALL VDG$MACC_RETURN (STREAM);
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:65   
      893     4247    1           RETURN;
      894     4248
      895     4249
      896     4250
      897     4251    1   BREAK_HIT_FAILURE:
      898     4252    1           CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);
      899     4253    1           GOTO COMMON_ALTRETURN;
      900     4254
      901     4255
      902     4256    1   PORT_BUSY_FAILURE:
      903     4257    1           CALL VDG$ERRMSG (%E$PORT_BUSY) ALTRET (COMMON_ALTRETURN);
      904     4258    1           GOTO COMMON_PORT_MSG;
      905     4259
      906     4260
      907     4261    1   CANT_WRITE_FAILURE:
      908     4262    1           CALL VDG$ERRMSG (%E$CANT_WRITE) ALTRET (COMMON_ALTRETURN);
      909     4263    1           GOTO COMMON_PORT_MSG;
      910     4264
      911     4265
      912     4266    1   CANT_INSERT_DELETE_REC_FAILURE:
      913     4267    1           CALL VDG$ERRMSG (%E$CANT_INSERT_DELETE_RECORDS)
      914     4268    1             ALTRET (COMMON_ALTRETURN);
      915     4269    1   COMMON_PORT_MSG: ;
      916     4270    1           VD$ERR.DCB# = PORT.DCB#;
      917     4271    1           GOTO COMMON_ALTRETURN;
      918     4272
      919     4273
      920     4274    1   CANT_WRITE_NODE_FAILURE:
      921     4275    1           CALL VDG$ERRMSG (%E$CANT_WRITE_NODE) ALTRET (COMMON_ALTRETURN);
      922     4276    1           SUBST_FIELD$ = PINCRW( ADDR(VD$ERR), SIZEW(VD$ERR));
      923     4277    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;
      924     4278    1           SUBST$POINTER.V$ (0) = ADDR(PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) ->
      925     4279    1             VD$FILE_NODE.DESC.KEY);
      926     4280    1           GOTO COMMON_ALTRETURN;
      927     4281
      928     4282
      929     4283    1   FILE_NOT_FILLED_FAILURE:
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:66   
      930     4284                %GETKEY (KEY=PORT.FILE_KEY, PTR=PORT_KEY$);
      931     4294    1           CALL VDG$ERRMSG (%E$FILE_NOT_FILLED, PORT_KEY$->KEY, WRITE_LEVEL)
      932     4295    1             ALTRET (COMMON_ALTRETURN);
      933     4296    1           GOTO COMMON_ALTRETURN;
      934     4297
      935     4298
      936     4299    1   PREAD_FAILED: ;
      937     4300    1           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;
      938     4301    1   LSAVE_OLD_NODE_FAILED: ;
      939     4302    1   PFLUSH_FAILED: ;
      940     4303    1   RWRITE_FAILED: ;
      941     4304    1   COMMON_ALTRETURN:
      942     4305    1           PORT.POSITION_PROTECT = SAVE_POSITION_PROTECT;
      943     4306    1           ALTRETURN;
      944     4307
      945     4308
      946     4309    1   NODE_WRITER_FAILED: ;
      947     4310    1   PWRITE_FAILED: ;
      948     4311    1           IF PORT.DCB# = 0 AND (NOT NODE_EXISTS)
      949     4312    2             AND PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;
      950     4313    2              CALL VDG$OFREE (PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) ->
      951     4314    2                VD$FILE_NODE)
      952     4315    2                ALTRET (OFREE_FAILED);
      953     4316    2              PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) = ADDR(NIL);
      954     4317    2              END;
      955     4318    1           PORT.POSITION_PROTECT = SAVE_POSITION_PROTECT;
      956     4319    1           ALTRETURN;
      957     4320
      958     4321
      959     4322    1   OFREE_FAILED: ;
      960     4323    1   OCLEAR_LOCATION_FAILED: ;
      961     4324    1   OCOPY_FAILED: ;
      962     4325    1   OCOPY_LOCATION_FAILED: ;
      963     4326    1   BUILD_INTERNAL_NODE_FAILED: ;
      964     4327    1   OALLOC_FAILED: ;
      965     4328                /* All these errors are always fatal, so just get out */
      966     4329    1           ALTRETURN;
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:67   
      967     4330
      968     4331                %BOX (TITLE=BUILD_INTERNAL_NODE, PAGE=YES);
              4339    1
              4343    1   /***************************************************************************
              4345    1    *                                                                         *
              4349    1            *                            BUILD_INTERNAL_NODE                          *
              4351    1            *                                                                         *
              4353    1           ***************************************************************************/

      969     4357
      970     4358        /*I* NAME: BUILD_INTERNAL_NODE
      971     4359            PARAMETERS:
      972     4360            INPUT:
      973     4361                WRITE_LEVEL - Level in file for which to build the node.
      974     4362                STREAM.CURRENT.KEY (WRITE_LEVEL) must specify the key to build
      975     4363                    the node for.
      976     4364                PORT - Port to build node for, at WRITE_LEVEL.
      977     4365            OUTPUT:
      978     4366                PORT.CURRENT will be set from STREAM.CURRENT.
      979     4367                PORT's Spec and Data at WRITE_LEVEL will be cleared.
      980     4368                PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) will point to the newly-built
      981     4369                    VD$FILE_NODE.  It won't be linked to anything (not yet
      982     4370                    inserted into file); it will have a Key component, but no
      983     4371                    Spec or Data components.
      984     4372            DESCRIPTION:
      985     4373                Clear the port's level registers at WRITE_LEVEL.
      986     4374                Build the VD$FILE_NODE and it's Key component.
      987     4375                Point the port to the new file node.
      988     4376                Copy the STREAM's location to the port.
      989     4377        */
      990     4378
      991     4379    1   BUILD_INTERNAL_NODE: PROC ALTRET;
      992     4380
      993     4381
      994     4382
      995     4383    2   DCL NEW_NODE$ PTR;
      996     4384    2   DCL PARENT_NODE$ PTR;
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:68   
      997     4385    2   DCL STRUCTURE_LEVEL_NODE$ PTR;
      998     4386    2   DCL STRUCTURE_LEVEL$ PTR;
      999     4387    2   DCL STREAM_KEY$ PTR;
     1000     4388    2   DCL NB_KEY SBIN;
     1001     4389    2   DCL I SBIN;
     1002     4390
     1003     4391
     1004     4392        %VD$FILE_NODE (NAME=NEW$NODE, STCLASS="BASED(NEW_NODE$)");
     1005     4485        %VD$FILE_NODE (NAME=PARENT$NODE, STCLASS="BASED(PARENT_NODE$)");
     1006     4578        %VD$FILE_NODE (NAME=STRUCTURE$LEVEL_NODE,
     1007     4579            STCLASS="BASED(STRUCTURE_LEVEL_NODE$)");
     1008     4672        %VD$STRUCTURE_LEVEL (NAME=STRUCTURE$LEVEL,
     1009     4673            STCLASS="BASED(STRUCTURE_LEVEL$)");
     1010     4720        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     1011     4743
     1012     4744
     1013     4745
     1014     4746                %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=WRITE_LEVEL);
     1015     4756    3           IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;
     1016     4757    3              CALL VDG$OFREE (PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER)
     1017     4758    3                ALTRET (OFREE_FAILED);
     1018     4759    3              PORT.LEVEL.DATA$ (WRITE_LEVEL) = ADDR(NIL);
     1019     4760    3              END;
     1020     4761
     1021     4762                /* Find VD$STRUCTURE_LEVEL for WRITE_LEVEL */
     1022     4763    2           STRUCTURE_LEVEL_NODE$ = STRUCTURE$NODE.HEAD$;
     1023     4764    3           DO I = %LVL_FILE TO (WRITE_LEVEL - 1);
     1024     4765    3              STRUCTURE_LEVEL_NODE$ = STRUCTURE$LEVEL_NODE.FLINK$;
     1025     4766    3              END;
     1026     4767    2           STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;
     1027     4768
     1028     4769    2           CALL VDG$OALLOC (%CLS_FILE_NODE, NEW_NODE$)
     1029     4770    2             ALTRET (OALLOC_FAILED);
     1030     4771                %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=WRITE_LEVEL-1,
     1031     4772                PTR=STREAM_KEY$);
     1032     4782    2           NB_KEY = STREAM$KEY.LENGTH#;
     1033     4783    2           CALL VDG$BUILD_KEY (NEW$NODE.DESC.KEY, NB_KEY,
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:69   
     1034     4784    2             STREAM$KEY.BYTES)
     1035     4785    2             ALTRET (BUILD_KEY_FAILED);
     1036     4786    2           NEW$NODE.DESC.KEY.TYPE# = PORT.LEVEL.KEY_TYPE# (WRITE_LEVEL);
     1037     4787
     1038     4788    2           NEW$NODE.ACCESS (%NAC_READ) = %TRUE;
     1039     4789    2           NEW$NODE.ACCESS (%NAC_WRITE) =
     1040     4790    2             ~ (STRUCTURE$LEVEL.PROTECT (%CO_SPEC) &
     1041     4791    2             STRUCTURE$LEVEL.PROTECT (%CO_DATA));
     1042     4792    2           NEW$NODE.ACCESS (%NAC_DELETE) = NEW$NODE.ACCESS (%NAC_WRITE);
     1043     4793
     1044     4794    2           PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) = NEW_NODE$;
     1045     4795    2           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)
     1046     4796    2             ALTRET (OCLEAR_LOCATION_FAILED);
     1047     4797    2           CALL VDG$OCOPY_LOCATION (STREAM.CURRENT, PORT.CURRENT)
     1048     4798    2             ALTRET (OCOPY_LOCATION_FAILED);
     1049     4799
     1050     4800    2           RETURN;
     1051     4801
     1052     4802
     1053     4803
     1054     4804    2   OFREE_FAILED: ;
     1055     4805    2   OALLOC_FAILED: ;
     1056     4806    2   BUILD_KEY_FAILED: ;
     1057     4807    2   OCLEAR_LOCATION_FAILED: ;
     1058     4808    2   OCOPY_LOCATION_FAILED: ;
     1059     4809    2           ALTRETURN;
     1060     4810
     1061     4811    2   END BUILD_INTERNAL_NODE;
     1062     4812
     1063     4813    1   END VDA$LWRITE;
     1064     4814        %EOD;

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:70   
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$LWRITE.

   Procedure VDA$LWRITE requires 780 words for executable code.
   Procedure VDA$LWRITE requires 46 words of local(AUTO) storage.

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:71   

 Object Unit name= VDA$LWRITE                                 File name= VDA$LOWER.:VDA5TOU
 UTS= JUL 04 '97 11:06:02.00 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   780   1414  VDA$LWRITE
    1  RoData even  none    18     22  VDA$LWRITE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        4  VDA$LWRITE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VDG$MACC_LWRITE
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       1 VDG$OFREE
         yes           Std       1 VDG$MACC_RETURN
         yes           Std       1 VDG$EBREAK_ACKNOWLEDGE
 yes     yes           Std       4 VDG$ERRMSG
 yes     yes           Std       3 VDA$LSAVE_OLD_NODE
 yes     yes           Std       4 VDA$PWRITE
 yes     yes           Std       6 VDA$PREAD
 yes     yes           Std       2 VDA$PFLUSH
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       3 VDG$BUILD_KEY
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:72   
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 VD_NODE_WRITERS$$                     VD_$$MON_ACC
     VD_ACCESSOR_PRIV                      B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:73   


      449        1        /*T***********************************************************/
      450        2        /*T*                                                         */
      451        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      452        4        /*T*                                                         */
      453        5        /*T***********************************************************/
      454        6
      455        7        /*D* NAME: VDA$LWRITE
      456        8            PARAMETERS:
      457        9                STREAM - VD$STREAM to use.  This stream must be open to
      458       10                    an internal or external file.
      459       11                ABSOLUTE - Optional VD$LOCATION specifying an absolute location
      460       12                    to position to.  ABSOLUTE must be one of the following:
      461       13                    Omitted - We'll write at the stream's current position.
      462       14                        The new Spec and Data components will replace those
      463       15                        of the last node for which a key appears in the
      464       16                        STREAM's LEVELs (this must be level %LVL_LOWER at the lowest).
      465       17                    .KEY (%(LVL_LOWER-1)) thru (n) - Keys for levels %LVL_LOWER
      466       18                        thru (n+1).  If the file has more than two levels,
      467       19                        positioning will be to the lowest level given
      468       20                        (internal files only); for example, if the
      469       21                        file has 5 levels but keys are only given for levels 1
      470       22                        and 2, we will clear the position on levels 3 and 4.
      471       23                        Writing will take place at the specified
      472       24                        node.
      473       25                    Note - Any dynamic storage pointed-to by ABSOLUTE will
      474       26                        remain in the caller's ownership after this call.
      475       27                SPEC - Optional VD$SPEC specifying the new Spec component
      476       28                    for the node.  If you don't want to affect the
      477       29                    Spec component, omit this parameter.
      478       30                    Note - Passing a VD$SPEC which is BASED on a pointer
      479       31                        which is currently NIL acts as tho you omitted
      480       32                        the parameter -- the Spec component isn't affected.
      481       33                    Note - If SPEC.REP# = %REP_REMOTE, then SPEC.V$ must point
      482       34                        to dynamic, static, or constant storage -- never to
      483       35                        the caller's auto storage!!  If the remote string
      484       36                        resides in dynamic storage (as indicated by having
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:74   
      485       37                        a non-0 .OBJECT.SIZE#), then it will no longer be
      486       38                        owned by the caller after this call.
      487       39                        Give me a Spec and I keep it, not you.  See SPEC
      488       40                        under OUTPUT comments.
      489       41                DATA - Optional VD$BUFFER containing the new Data component
      490       42                    for the node.  If you don't want to affect the
      491       43                    Data component, omit this parameter.
      492       44                    Note - Passing a VD$BUFFER which is BASED on a pointer
      493       45                        which is currently NIL acts as tho you omitted
      494       46                        the parameter -- the Data component isn't affected.
      495       47                    Note - DATA must reside in either dynamic storage, static,
      496       48                        or constant -- never the caller's auto storage!!
      497       49                        If DATA resides in dynamic (as indicated by having a
      498       50                        non-0 .OBJECT.SIZE#), it will no longer be owned
      499       51                        by the caller after this call.
      500       52                        Give me a Data buffer and I keep it, not you.  See
      501       53                        DATA under OUTPUT comments.
      502       54            INPUT:
      503       55                VD_ACCESSOR_PRIV - If we're writing to an internal file and
      504       56                    we're not doing the write on behalf of the user, but
      505       57                    rather are just updating an internally-maintained
      506       58                    value (e.g., $SITES, $LEFTOVER, etc.), then the
      507       59                    VD_ACCESSOR_PRIV's %NAC_WRITE bit must be set.
      508       60                VD_6E.HISTORY$ - If History is enabled, this must point to
      509       61                    an open VD$STREAM for the History file.
      510       62            OUTPUT:
      511       63                PORT.LEVEL.SPEC_MODIFIED and/or .DATA_MODIFIED will be set
      512       64                    at the appropriate level.
      513       65                If ABSOLUTE is given, STREAM.CURRENT will be set to ABSOLUTE.
      514       66                STREAM.NEXT may be cleared.
      515       67                PORT.CURRENT will specify the keys of the written node.
      516       68                PORT.LEVEL.SPEC and/or .DATA$ at the appropriate level
      517       69                    will contain/point-to the passed SPEC and/or DATA.
      518       70                For internal files, if the node to be written doesn't yet
      519       71                    exist in the file, it will be created and inserted into
      520       72                    the file.
      521       73                If the History file is enabled, the node being replaced, if any,
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:75   
      522       74                    will be appended to the History file.
      523       75                Upon normal return:
      524       76                    SPEC will be %CLEAR; the Accessor now owns the
      525       77                        SPEC and any dynamic storage pointed-to by SPEC.V$.
      526       78                    DATA -- if it's dynamic -- will no longer be owned by the
      527       79                        caller.  The Accessor owns it now.  The caller should
      528       80                        spoil it's pointer to the DATA VD$BUFFER.
      529       81                Upon non-fatal alternate returns, SPEC and DATA will be
      530       82                    untouched; the caller will still own any dynamic storage
      531       83                    associated with them.
      532       84            DESCRIPTION:
      533       85                If ABSOLUTE is given, first clear STREAM.CURRENT and load it
      534       86                    from ABSOLUTE.
      535       87                If History is enabled, or this is a predefined file or an
      536       88                internal file:
      537       89                    Call VDA$PREAD to find the node and read it into the Port
      538       90                        registers.
      539       91                    If History enabled:
      540       92                        Write the current node contents to the History file.
      541       93                Else if port is positioned at different node than STREAM:
      542       94                    If the port contains a node which has been modified,
      543       95                        call VDA$PFLUSH.
      544       96                    Clear the port's Keys, Specs, Datas, and Internal$s.
      545       97                    Load the port keys from STREAM.
      546       98
      547       99                If this is a predefined file:
      548      100                    Call the appropriate node writer.  This will free the
      549      101                        Port Spec and/or Data components and copy SPEC and/or
      550      102                        DATA to the Port; if the file is internal, the file
      551      103                        node will also be updated.  The node writer may have
      552      104                        side-effects (building windows, changing internal values),
      553      105                        and may reject the write (value illegal).
      554      106                Else (that is, if this isn't a predefined file):
      555      107                    Call VDA$PWRITE to copy SPEC and/or DATA to the port.
      556      108                        If this is an internal file, the file node will also
      557      109                        be updated.
      558      110                If the file is internal and the specified node doesn't yet
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:76   
      559      111                    exist in the file, build a new node and insert it
      560      112                    into the file tree.
      561      113                    We do this now rather than at
      562      114                    VDA$PFLUSH-time 'cause we want all PORT.LEVEL.INTERNAL$s
      563      115                    to point to nodes which actually exist in the file tree.
      564      116                    Also, we now know where the new node is to be inserted
      565      117                    (VDA$PREAD found the node following it's proper place),
      566      118                    and we don't want PFLUSH to have to search all over again.
      567      119        */
      568      120
      569      121        VDA$LWRITE: PROC (STREAM, ABSOLUTE, SPEC, DATA) ALTRET;

    121  0 000000   000000 700200 xent  VDA$LWRITE   TSX0  ! X66_AUTO_4
         0 000001   000056 000004                    ZERO    46,4

      570      122
      571      123
      572      124        %INCLUDE VD_MACROS_M;
      573     2339        %INCLUDE VD_PERR_C;
      574     2487
      575     2488        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
      576     2594        %VD$LOCATION (NAME=ABSOLUTE, STCLASS=PARAM);
      577     2622        %VD$SPEC (NAME=SPEC, STCLASS=PARAM);
      578     2636        %VD$BUFFER (NAME=DATA, STCLASS=PARAM);
      579     2694
      580     2695
      581     2696    1   DCL VDA$LSAVE_OLD_NODE  ENTRY (3) ALTRET;
      582     2697    1   DCL VDA$PREAD           ENTRY (6) ALTRET;
      583     2698    1   DCL VDA$PWRITE          ENTRY (4) ALTRET;
      584     2699    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
      585     2700    1   DCL VDP$RWRITE          ENTRY (5) ALTRET;
      586     2701    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
      587     2702    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
      588     2703    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
      589     2704    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
      590     2705    1   DCL VDG$BUILD_KEY       ENTRY (3) ALTRET;
      591     2706    1   DCL VDG$ERRMSG          ENTRY (4) ALTRET;
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:77   
      592     2707    1   DCL VDG$MACC_LWRITE     ENTRY (4);
      593     2708    1   DCL VDG$MACC_RETURN     ENTRY (1);
      594     2709    1   DCL VDG$ESCREECH        ENTRY (3);
      595     2710    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
      596     2711
      597     2712
      598     2713        %VD_6E (STCLASS=SYMREF);
      599     2749    1   DCL VD_NODE_WRITERS$$ (0:0) EPTR SYMREF;
      600     2750        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
      601     2795    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
      602     2796            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=STATIC);
      603     2810
      604     2811
      605     2812
      606     2813    1   DCL SAVE_POSITION_PROTECT BIT(1) ALIGNED;
      607     2814    1   DCL INDX SBIN;
      608     2815    1   DCL LEVEL SBIN;
      609     2816    1   DCL WRITE_LEVEL SBIN;
      610     2817    1   DCL STRUCTURE_NODE$ PTR;
      611     2818    1   DCL 1 STREAM_PROTECT,
      612     2819    1         2 FLAG (0:%(MX_ACCESS_LEVELS-1)) BIT(1);
      613     2820    1   DCL HISTORY_ENABLED BIT(1) ALIGNED;
      614     2821    1   DCL NODE_EXISTS BIT(1) ALIGNED;
      615     2822    1   DCL REPOSITION_PORT BIT(1) ALIGNED;
      616     2823    1   DCL FLUSH_PORT BIT(1) ALIGNED;
      617     2824    1   DCL WITHIN_RANGE BIT(1) ALIGNED;
      618     2825    1   DCL PORT_KEY$ PTR;
      619     2826    1   DCL PORT_SPEC$ PTR;
      620     2827    1   DCL PASSED_SPEC$ PTR;
      621     2828    1   DCL STREAM_KEY$ (0:%(MX_LOCATION_LEVELS-1)) PTR;
      622     2829    1   DCL NODE_WRITER$$ EPTR;
      623     2830    1   DCL INSERT_BEFORE$ PTR;
      624     2831    1   DCL NEW_NODE$ PTR;
      625     2832    1   DCL PARENT_NODE$ PTR;
      626     2833    1   DCL ENCODED_NODE$ PTR;
      627     2834    1   DCL SUBST_FIELD$ PTR;
      628     2835    1   DCL 1 SAVE_ACCESSOR_PRIV ALIGNED,
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:78   
      629     2836            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, STCLASS=AUTO);
      630     2850
      631     2851
      632     2852        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
      633     2950        %VD$FILE_NODE (NAME=STRUCTURE$NODE, STCLASS="BASED(STRUCTURE_NODE$)");
      634     3043        %VD$TEXTC (NAME=KEY, STCLASS=BASED);
      635     3066        %VD$TEXTC (NAME=PORT$SPEC, STCLASS="BASED(PORT_SPEC$)");
      636     3089        %VD$TEXTC (NAME=PASSED$SPEC, STCLASS="BASED(PASSED_SPEC$)");
      637     3112        %VD$FILE_NODE (NAME=INSERT$BEFORE, STCLASS="BASED(INSERT_BEFORE$)");
      638     3205        %VD$FILE_NODE (NAME=NEW$NODE, STCLASS="BASED(NEW_NODE$)");
      639     3298        %VD$FILE_NODE (NAME=PARENT$NODE, STCLASS="BASED(PARENT_NODE$)");
      640     3391        %VD$ENCODED_NODE (NAME=ENCODED$NODE, STCLASS="BASED(ENCODED_NODE$)");
      641     3512        %VD$STREAM (NAME=HISTORY$STREAM, STCLASS="BASED(VD_6E.HISTORY$)");
      642     3618        %VD$FILE_NODE;
      643     3711        %VD$TEXTC_REMOTE;
      644     3772        %VD$BUFFER;
      645     3830        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_6E.ERR_TAIL$)");
      646     3883        %VD$NUMBER (NAME=SUBST$NUMBER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
      647     3928        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
      648     3973
      649     3974
      650     3975
      651     3976    1           SAVE_POSITION_PROTECT = PORT.POSITION_PROTECT;

   3976  0 000002   200003 470500                    LDP0    @STREAM,,AUTO
         0 000003   000001 471500                    LDP1    1,,PR0
         0 000004   100004 236100                    LDQ     4,,PR1
         0 000005   000001 736000                    QLS     1
         0 000006   400000 376003                    ANQ     -131072,DU
         0 000007   200007 756100                    STQ     SAVE_POSITION_PROTECT,,AUTO

      652     3977    1           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN

   3977  0 000010   000027 220000 xsym               LDX0    VD_6E+23
         0 000011   000003 100003                    CMPX0   3,DU
         0 000012   001004 600000 0                  TZE     BREAK_HIT_FAILURE

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:79   
      653     3978    1              GOTO BREAK_HIT_FAILURE;
      654     3979    1           IF VD_$$MON_ACC.V# > 0 THEN

   3979  0 000013   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         0 000014   000021 604400 0                  TMOZ    s:3981

      655     3980    1              CALL VDG$MACC_LWRITE (STREAM, ABSOLUTE, SPEC, DATA);

   3980  0 000015   200003 630500                    EPPR0   @STREAM,,AUTO
         0 000016   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000017   000000 701000 xent               TSX1    VDG$MACC_LWRITE
         0 000020   000000 011000                    NOP     0

      656     3981    1           IF PORT.EXIST# = 0 THEN

   3981  0 000021   200003 470500                    LDP0    @STREAM,,AUTO
         0 000022   000001 471500                    LDP1    1,,PR0
         0 000023   100003 720100                    LXL0    3,,PR1
         0 000024   000035 601000 0                  TNZ     s:3984

      657     3982    1              CALL VDG$ESCREECH (PORT.EXIST#);

   3982  0 000025   200051 451500                    STP1    I+2,,AUTO
         0 000026   200051 236100                    LDQ     I+2,,AUTO
         0 000027   000000 036000 1                  ADLQ    0
         0 000030   200050 756100                    STQ     I+1,,AUTO
         0 000031   200050 630500                    EPPR0   I+1,,AUTO
         0 000032   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000033   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000034   000000 011000                    NOP     0

      658     3983
      659     3984    1           STRUCTURE_NODE$ = PORT.STRUCTURE$;

   3984  0 000035   200003 470500                    LDP0    @STREAM,,AUTO
         0 000036   000001 471500                    LDP1    1,,PR0
         0 000037   100006 236100                    LDQ     6,,PR1
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:80   
         0 000040   200013 756100                    STQ     STRUCTURE_NODE$,,AUTO

      660     3985    1           WRITE_LEVEL = STRUCTURE$NODE.COUNT# - 1;

   3985  0 000041   200013 473500                    LDP3    STRUCTURE_NODE$,,AUTO
         0 000042   300014 235100                    LDA     12,,PR3
         0 000043   000001 135007                    SBLA    1,DL
         0 000044   200012 755100                    STA     WRITE_LEVEL,,AUTO

      661     3986
      662     3987    1           IF ADDR(ABSOLUTE) ~= ADDR(NIL) THEN

   3987  0 000045   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         0 000046   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000047   000150 600000 0                  TZE     s:4009

      663     3988    2   POSITION_STREAM: DO;

   3988  0 000050                       POSITION_ST* null
      664     3989    2              IF PORT.POSITION_PROTECT THEN

   3989  0 000050   000001 471500                    LDP1    1,,PR0
         0 000051   100004 236100                    LDQ     4,,PR1
         0 000052   200000 316003                    CANQ    65536,DU
         0 000053   001011 601000 0                  TNZ     PORT_BUSY_FAILURE

      665     3990    2                 GOTO PORT_BUSY_FAILURE;
      666     3991    2              PORT.POSITION_PROTECT = %TRUE;

   3991  0 000054   200000 236003                    LDQ     65536,DU
         0 000055   100004 256100                    ORSQ    4,,PR1

      667     3992    2              STREAM.LAST_OP# = %ACCOP_LOCATION;

   3992  0 000056   000002 220003                    LDX0    2,DU
         0 000057   000002 740100                    STX0    2,,PR0

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:81   
      668     3993    2              IF ABSOLUTE.EOF OR ABSOLUTE = %CLEAR THEN

   3993  0 000060   200004 471500                    LDP1    @ABSOLUTE,,AUTO
         0 000061   100010 236100                    LDQ     8,,PR1
         0 000062   400000 316007                    CANQ    -131072,DL
         0 000063   000070 601000 0                  TNZ     s:3994
         0 000064   000000 106500                    CMPC    fill='000'O
         0 000065   100000 000044                    ADSC9   0,,PR1                   cn=0,n=36
         0 000066   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000067   000077 601000 0                  TNZ     s:3995

      669     3994    2                 CALL VDG$ESCREECH (ABSOLUTE.EOF);

   3994  0 000070   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         0 000071   000001 036000 1                  ADLQ    1
         0 000072   200050 756100                    STQ     I+1,,AUTO
         0 000073   200050 630500                    EPPR0   I+1,,AUTO
         0 000074   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000075   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000076   000000 011000                    NOP     0

      670     3995    2              CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)

   3995  0 000077   200003 236100                    LDQ     @STREAM,,AUTO
         0 000100   000006 036003                    ADLQ    6,DU
         0 000101   200050 756100                    STQ     I+1,,AUTO
         0 000102   200050 630500                    EPPR0   I+1,,AUTO
         0 000103   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000104   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000105   001156 702000 0                  TSX2    OFREE_FAILED

      671     3996    2                ALTRET (OCLEAR_LOCATION_FAILED);
      672     3997    2              CALL VDG$OCOPY_LOCATION (ABSOLUTE, STREAM.CURRENT)

   3997  0 000106   200003 236100                    LDQ     @STREAM,,AUTO
         0 000107   000006 036003                    ADLQ    6,DU
         0 000110   200004 235100                    LDA     @ABSOLUTE,,AUTO
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:82   
         0 000111   200050 757100                    STAQ    I+1,,AUTO
         0 000112   200050 630500                    EPPR0   I+1,,AUTO
         0 000113   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000114   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000115   001156 702000 0                  TSX2    OFREE_FAILED

      673     3998    2                ALTRET (OCOPY_LOCATION_FAILED);
      674     3999    2              CALL VDG$OCLEAR_LOCATION (STREAM.NEXT)

   3999  0 000116   200003 236100                    LDQ     @STREAM,,AUTO
         0 000117   000017 036003                    ADLQ    15,DU
         0 000120   200050 756100                    STQ     I+1,,AUTO
         0 000121   200050 630500                    EPPR0   I+1,,AUTO
         0 000122   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000123   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000124   001156 702000 0                  TSX2    OFREE_FAILED

      675     4000    2                ALTRET (OCLEAR_LOCATION_FAILED);
      676     4001    3              DO INDX = %(LVL_LOWER-1) TO (STRUCTURE$NODE.COUNT# - 2);

   4001  0 000125   200010 450100                    STZ     INDX,,AUTO
         0 000126   000143 710000 0                  TRA     s:4006+1

      677     4002    4                 IF ABSOLUTE.KEY (INDX) = %CLEAR THEN DO;

   4002  0 000127   200010 235100                    LDA     INDX,,AUTO
         0 000130   000003 735000                    ALS     3
         0 000131   200004 470500                    LDP0    @ABSOLUTE,,AUTO
         0 000132   000000 106505                    CMPC    fill='000'O
         0 000133   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=8
         0 000134   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         0 000135   000142 601000 0                  TNZ     s:4006

      678     4003    4                    IF INDX < WRITE_LEVEL THEN

   4003  0 000136   200010 236100                    LDQ     INDX,,AUTO
         0 000137   200012 116100                    CMPQ    WRITE_LEVEL,,AUTO
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:83   
         0 000140   000142 605000 0                  TPL     s:4006

      679     4004    4                       WRITE_LEVEL = INDX;

   4004  0 000141   200012 756100                    STQ     WRITE_LEVEL,,AUTO

      680     4005    4                    END;

      681     4006    3                 END;

   4006  0 000142   200010 054100                    AOS     INDX,,AUTO
         0 000143   200013 470500                    LDP0    STRUCTURE_NODE$,,AUTO
         0 000144   000014 236100                    LDQ     12,,PR0
         0 000145   000002 136007                    SBLQ    2,DL
         0 000146   200010 116100                    CMPQ    INDX,,AUTO
         0 000147   000127 605000 0                  TPL     s:4002

      682     4007    2              END POSITION_STREAM;

      683     4008
      684     4009    1           STREAM_PROTECT = STREAM.PROTECT (WRITE_LEVEL);

   4009  0 000150   200012 235100                    LDA     WRITE_LEVEL,,AUTO
         0 000151   000002 735000                    ALS     2
         0 000152   000154 605000 0                  TPL     s:4009+4
         0 000153   000044 035003                    ADLA    36,DU
         0 000154   200003 470500                    LDP0    @STREAM,,AUTO
         0 000155   003100 060505                    CSL     bolr='003'O
         0 000156   000002 400004                    BDSC    2,A,PR0                  by=2,bit=0,n=4
         0 000157   200014 000005                    BDSC    STREAM_PROTECT,,AUTO     by=0,bit=0,n=5

      685     4010    1           IF (ADDR(SPEC) ~= ADDR(NIL)

   4010  0 000160   200005 236100                    LDQ     @SPEC,,AUTO
         0 000161   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000162   000166 600000 0                  TZE     s:4010+6
         0 000163   200014 236100                    LDQ     STREAM_PROTECT,,AUTO
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:84   
         0 000164   100000 316003                    CANQ    32768,DU
         0 000165   001016 601000 0                  TNZ     CANT_WRITE_FAILURE
         0 000166   200006 236100                    LDQ     @DATA,,AUTO
         0 000167   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000170   000174 600000 0                  TZE     s:4040
         0 000171   200014 236100                    LDQ     STREAM_PROTECT,,AUTO
         0 000172   040000 316003                    CANQ    16384,DU
         0 000173   001016 601000 0                  TNZ     CANT_WRITE_FAILURE

      686     4011    1             AND STREAM_PROTECT.FLAG (%CO_SPEC))
      687     4012    1             OR (ADDR(DATA) ~= ADDR(NIL)
      688     4013    1             AND STREAM_PROTECT.FLAG (%CO_DATA)) THEN
      689     4014    1              GOTO CANT_WRITE_FAILURE;
      690     4015
      691     4016
      692     4017                /*
      693     4018                *   We want to do a full VDA$PREAD before writing in the
      694     4019                *       following cases:
      695     4020                *   o If this is an external consec file -- we can't insert
      696     4021                *       new records into such a file.
      697     4022                *   o If History is enabled (and this write isn't to the
      698     4023                *       History stream itself!) -- to get the old node so we
      699     4024                *       can save it in the History file before writing the
      700     4025                *       new node.
      701     4026                *   o If this is an internal file -- to find the specified
      702     4027                *       node in the file tree, or at least where to insert
      703     4028                *       it into the file tree.
      704     4029                *   o If this is a predefined file (which may be internal
      705     4030        *N**N*  *       or external) --
      706     4031                *       to see if this write is inserting a node or just
      707     4032                *       replacing it; the predefined-node writers need
      708     4033                *       this info.
      709     4034                *   If this call doesn't meet any one of these criteria,
      710     4035                *       then we can write "blindly" (note this will always
      711     4036                *       be to an external file), telling the monitor to
      712     4037                *       replace or insert as it pleases.
      713     4038                */
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:85   
      714     4039
      715     4040    1           HISTORY_ENABLED = %FALSE;

   4040  0 000174   200015 450100                    STZ     HISTORY_ENABLED,,AUTO

      716     4041    1           IF ADDR(STREAM) ~= VD_6E.HISTORY$

   4041  0 000175   200003 236100                    LDQ     @STREAM,,AUTO
         0 000176   000000 116000 xsym               CMPQ    VD_6E
         0 000177   000214 600000 0                  TZE     s:4047
         0 000200   000000 236000 xsym               LDQ     VD_6E
         0 000201   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000202   000214 600000 0                  TZE     s:4047

      717     4042    1             AND VD_6E.HISTORY$ ~= ADDR(NIL) THEN
      718     4043    1              IF HISTORY$STREAM.PORT$ ~= ADDR(NIL) THEN

   4043  0 000203   000000 471400 xsym               LDP1    VD_6E
         0 000204   100001 236100                    LDQ     1,,PR1
         0 000205   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000206   000214 600000 0                  TZE     s:4047

      719     4044    1                 IF HISTORY$STREAM.PORT$ -> PORT.EXIST# ~= 0 THEN

   4044  0 000207   100001 473500                    LDP3    1,,PR1
         0 000210   300003 720100                    LXL0    3,,PR3
         0 000211   000214 600000 0                  TZE     s:4047

      720     4045    1                    HISTORY_ENABLED = %TRUE;

   4045  0 000212   400000 236003                    LDQ     -131072,DU
         0 000213   200015 756100                    STQ     HISTORY_ENABLED,,AUTO

      721     4046
      722     4047    1           REPOSITION_PORT = %FALSE;

   4047  0 000214   200017 450100                    STZ     REPOSITION_PORT,,AUTO
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:86   

      723     4048    1           FLUSH_PORT = %FALSE;

   4048  0 000215   200020 450100                    STZ     FLUSH_PORT,,AUTO

      724     4049
      725     4050    1           IF HISTORY_ENABLED

   4050  0 000216   200015 234100                    SZN     HISTORY_ENABLED,,AUTO
         0 000217   000230 604000 0                  TMI     FIND_AND_READ_OLD_NODE
         0 000220   000001 471500                    LDP1    1,,PR0
         0 000221   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000222   000007 402007                    MPY     7,DL
         0 000223   100023 220106                    LDX0    19,QL,PR1
         0 000224   000001 100003                    CMPX0   1,DU
         0 000225   000230 600000 0                  TZE     FIND_AND_READ_OLD_NODE
         0 000226   100004 721100                    LXL1    4,,PR1
         0 000227   000356 601000 0                  TNZ     BLIND_WRITE

      726     4051    1             OR (PORT.LEVEL.ORG# (WRITE_LEVEL) = %ORG_CONSEC)
      727     4052    1             OR (PORT.DCB# = 0) THEN
      728     4053    2   FIND_AND_READ_OLD_NODE: DO;

   4053  0 000230                       FIND_AND_RE* null
      729     4054    2              SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;

   4054  0 000230   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         0 000231   777000 376003                    ANQ     -512,DU
         0 000232   200037 756100                    STQ     SAVE_ACCESSOR_PRIV,,AUTO

      730     4055    2              VD_ACCESSOR_PRIV = %NAC_ALL_BITS;

   4055  0 000233   777000 236003                    LDQ     -512,DU
         0 000234   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

      731     4056                   /* Make sure we get positioned to the proper node in the file */
      732     4057    2              CALL VDA$PREAD (PORT, ABSOLUTE, 0, %TRUE, NODE_EXISTS)
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:87   

   4057  0 000235   000001 471500                    LDP1    1,,PR0
         0 000236   200016 633500                    EPPR3   NODE_EXISTS,,AUTO
         0 000237   200054 453500                    STP3    I+5,,AUTO
         0 000240   000002 237000 1                  LDAQ    2
         0 000241   200052 757100                    STAQ    I+3,,AUTO
         0 000242   200004 236100                    LDQ     @ABSOLUTE,,AUTO
         0 000243   200051 756100                    STQ     I+2,,AUTO
         0 000244   200050 451500                    STP1    I+1,,AUTO
         0 000245   200050 630500                    EPPR0   I+1,,AUTO
         0 000246   000023 631400 xsym               EPPR1   B_VECTNIL+19
         0 000247   000000 701000 xent               TSX1    VDA$PREAD
         0 000250   001102 702000 0                  TSX2    PREAD_FAILED

      733     4058    2                ALTRET (PREAD_FAILED);
      734     4059    2              VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;

   4059  0 000251   200037 236100                    LDQ     SAVE_ACCESSOR_PRIV,,AUTO
         0 000252   777000 376003                    ANQ     -512,DU
         0 000253   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

      735     4060
      736     4061    3              IF PORT.DCB# ~= 0 THEN DO;

   4061  0 000254   200003 470500                    LDP0    @STREAM,,AUTO
         0 000255   000001 471500                    LDP1    1,,PR0
         0 000256   100004 720100                    LXL0    4,,PR1
         0 000257   000270 600000 0                  TZE     s:4067

      737     4062    3                 IF NOT NODE_EXISTS

   4062  0 000260   200016 234100                    SZN     NODE_EXISTS,,AUTO
         0 000261   000267 604000 0                  TMI     s:4065
         0 000262   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000263   000007 402007                    MPY     7,DL
         0 000264   100023 221106                    LDX1    19,QL,PR1
         0 000265   000001 101003                    CMPX1   1,DU
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:88   
         0 000266   001023 600000 0                  TZE     CANT_INSERT_DELETE_REC_FAILURE

      738     4063    3                   AND PORT.LEVEL.ORG# (WRITE_LEVEL) = %ORG_CONSEC THEN
      739     4064    3                    GOTO CANT_INSERT_DELETE_REC_FAILURE;
      740     4065    3                 END;

   4065  0 000267   000310 710000 0                  TRA     s:4076

      741     4066    3              ELSE DO;

      742     4067    3                 IF PORT.LEVEL.INTERNAL$ (WRITE_LEVEL - 1) = ADDR(NIL) THEN

   4067  0 000270   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000271   000007 402007                    MPY     7,DL
         0 000272   100022 236106                    LDQ     18,QL,PR1
         0 000273   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000274   001057 600000 0                  TZE     FILE_NOT_FILLED_FAILURE

      743     4068    3                    GOTO FILE_NOT_FILLED_FAILURE; /* Parent must exist */
      744     4069    3                 IF NODE_EXISTS THEN

   4069  0 000275   200016 234100                    SZN     NODE_EXISTS,,AUTO
         0 000276   000310 605000 0                  TPL     s:4076

      745     4070    3                    IF NOT (PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) ->

   4070  0 000277   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000300   000007 402007                    MPY     7,DL
         0 000301   100031 473506                    LDP3    25,QL,PR1
         0 000302   300003 236100                    LDQ     3,,PR3
         0 000303   100000 316003                    CANQ    32768,DU
         0 000304   000310 601000 0                  TNZ     s:4076
         0 000305   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         0 000306   100000 316003                    CANQ    32768,DU
         0 000307   001035 600000 0                  TZE     CANT_WRITE_NODE_FAILURE

      746     4071    3                      VD$FILE_NODE.ACCESS (%NAC_WRITE)
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:89   
      747     4072    3                      OR VD_ACCESSOR_PRIV.ACCESS (%NAC_WRITE)) THEN
      748     4073    3                       GOTO CANT_WRITE_NODE_FAILURE;
      749     4074    3                 END;

      750     4075
      751     4076    3              IF HISTORY_ENABLED THEN DO;

   4076  0 000310   200015 234100                    SZN     HISTORY_ENABLED,,AUTO
         0 000311   000324 605000 0                  TPL     s:4081

      752     4077    3                 CALL VDA$LSAVE_OLD_NODE (STREAM, WRITE_LEVEL, NODE_EXISTS)

   4077  0 000312   200016 633500                    EPPR3   NODE_EXISTS,,AUTO
         0 000313   200052 453500                    STP3    I+3,,AUTO
         0 000314   200012 631500                    EPPR1   WRITE_LEVEL,,AUTO
         0 000315   200051 451500                    STP1    I+2,,AUTO
         0 000316   200003 236100                    LDQ     @STREAM,,AUTO
         0 000317   200050 756100                    STQ     I+1,,AUTO
         0 000320   200050 630500                    EPPR0   I+1,,AUTO
         0 000321   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000322   000000 701000 xent               TSX1    VDA$LSAVE_OLD_NODE
         0 000323   001105 702000 0                  TSX2    LSAVE_OLD_NODE_FAILED

      753     4078    3                   ALTRET (LSAVE_OLD_NODE_FAILED);
      754     4079    3                 END;

      755     4080
      756     4081    3              IF PORT.DCB# = 0 AND NOT NODE_EXISTS THEN DO;

   4081  0 000324   200003 470500                    LDP0    @STREAM,,AUTO
         0 000325   000001 471500                    LDP1    1,,PR0
         0 000326   100004 720100                    LXL0    4,,PR1
         0 000327   000340 601000 0                  TNZ     s:4088
         0 000330   200016 234100                    SZN     NODE_EXISTS,,AUTO
         0 000331   000340 604000 0                  TMI     s:4088

      757     4082                      /* Save addr of next node, or nil if eof */
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:90   
      758     4083    3                 INSERT_BEFORE$ = PORT.LEVEL.INTERNAL$ (WRITE_LEVEL);

   4083  0 000332   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000333   000007 402007                    MPY     7,DL
         0 000334   100031 236106                    LDQ     25,QL,PR1
         0 000335   200032 756100                    STQ     INSERT_BEFORE$,,AUTO

      759     4084    3                 CALL BUILD_INTERNAL_NODE

   4084  0 000336   001157 701000 0                  TSX1    BUILD_INTERNAL_NODE
         0 000337   001156 702000 0                  TSX2    OFREE_FAILED

      760     4085    3                   ALTRET (BUILD_INTERNAL_NODE_FAILED);
      761     4086    3                 END;

      762     4087
      763     4088    2              IF PORT.LEVEL.ORG# (WRITE_LEVEL) = %ORG_CONSEC

   4088  0 000340   200003 470500                    LDP0    @STREAM,,AUTO
         0 000341   000001 471500                    LDP1    1,,PR0
         0 000342   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000343   000007 402007                    MPY     7,DL
         0 000344   100023 220106                    LDX0    19,QL,PR1
         0 000345   000001 100003                    CMPX0   1,DU
         0 000346   000455 601000 0                  TNZ     s:4142
         0 000347   100022 236100                    LDQ     18,,PR1
         0 000350   400000 316007                    CANQ    -131072,DL
         0 000351   000455 600000 0                  TZE     s:4142

      764     4089    3                AND PORT.CURRENT.EOF THEN DO;

      765     4090                      /*
      766     4091                      *   Appending record to end of consecutive file:  VDA$PREAD just
      767     4092                      *     positioned the port to EOF.  Set flag so we'll reposition
      768     4093                      *     the port to the ABSOLUTE key.
      769     4094                      */
      770     4095    3                 REPOSITION_PORT = %TRUE;
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:91   

   4095  0 000352   400000 236003                    LDQ     -131072,DU
         0 000353   200017 756100                    STQ     REPOSITION_PORT,,AUTO

      771     4096    3                 FLUSH_PORT = %TRUE;

   4096  0 000354   200020 756100                    STQ     FLUSH_PORT,,AUTO

      772     4097    3                 END;

      773     4098    2              END FIND_AND_READ_OLD_NODE;

   4098  0 000355   000455 710000 0                  TRA     s:4142

      774     4099
      775     4100    1           ELSE
      776     4101
      777     4102    2   BLIND_WRITE: DO;

   4102  0 000356                       BLIND_WRITE  null
      778     4103    2              FLUSH_PORT = %FALSE;

   4103  0 000356   200020 450100                    STZ     FLUSH_PORT,,AUTO

      779     4104
      780     4105    2   COMPARE_PORT_POSITION:
      781     4106    3              DO INDX = %(LVL_LOWER-1) TO (WRITE_LEVEL - 1);

   4106  0 000357   200010 450100       COMPARE_POR* STZ     INDX,,AUTO
         0 000360   000452 710000 0                  TRA     s:4139+1

      782     4107    4                 IF PORT.CURRENT.EOF THEN DO;

   4107  0 000361   200003 470500                    LDP0    @STREAM,,AUTO
         0 000362   000001 471500                    LDP1    1,,PR0
         0 000363   100022 236100                    LDQ     18,,PR1
         0 000364   400000 316007                    CANQ    -131072,DL
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:92   
         0 000365   000371 600000 0                  TZE     s:4119

      783     4108    4                    REPOSITION_PORT = %TRUE;

   4108  0 000366   400000 236003                    LDQ     -131072,DU
         0 000367   200017 756100                    STQ     REPOSITION_PORT,,AUTO

      784     4109    4                    EXIT COMPARE_PORT_POSITION;

   4109  0 000370   000455 710000 0                  TRA     s:4142

      785     4110    4                    END;
      786     4111                      %GETKEY (KEY=PORT.CURRENT.KEY, INDX=INDX,
      787     4112                      PTR=PORT_KEY$);

   4119  0 000371   200010 235100                    LDA     INDX,,AUTO
         0 000372   000001 735000                    ALS     1
         0 000373   100012 720105                    LXL0    10,AL,PR1
         0 000374   000002 100003                    CMPX0   2,DU
         0 000375   000402 601000 0                  TNZ     s:4119+9

   4119  0 000376   100013 473505                    LDP3    11,AL,PR1
         0 000377   300002 634500                    EPPR4   2,,PR3
         0 000400   200022 454500                    STP4    PORT_KEY$,,AUTO
         0 000401   000404 710000 0                  TRA     s:4130

   4119  0 000402   100013 633505                    EPPR3   11,AL,PR1
         0 000403   200022 453500                    STP3    PORT_KEY$,,AUTO

      788     4122                      %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=INDX,
      789     4123                      PTR="STREAM_KEY$ (INDX)");

   4130  0 000404   000006 721105                    LXL1    6,AL,PR0
         0 000405   000002 101003                    CMPX1   2,DU
         0 000406   000414 601000 0                  TNZ     s:4130+8

   4130  0 000407   000007 473505                    LDP3    7,AL,PR0
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:93   
         0 000410   300002 634500                    EPPR4   2,,PR3
         0 000411   200010 722100                    LXL2    INDX,,AUTO
         0 000412   200025 454512                    STP4    STREAM_KEY$,X2,AUTO
         0 000413   000422 710000 0                  TRA     s:4133

   4130  0 000414   200010 236100                    LDQ     INDX,,AUTO
         0 000415   000023 736000                    QLS     19
         0 000416   000007 036003                    ADLQ    7,DU
         0 000417   200003 036100                    ADLQ    @STREAM,,AUTO
         0 000420   200010 722100                    LXL2    INDX,,AUTO
         0 000421   200025 756112                    STQ     STREAM_KEY$,X2,AUTO

      790     4133    3                 IF STREAM_KEY$ (INDX) -> KEY.BYTES ~=

   4133  0 000422   200025 473512                    LDP3    STREAM_KEY$,X2,AUTO
         0 000423   300000 236100                    LDQ     0,,PR3
         0 000424   000033 772000                    QRL     27
         0 000425   200022 474500                    LDP4    PORT_KEY$,,AUTO
         0 000426   000000 623006                    EAX3    0,QL
         0 000427   400000 236100                    LDQ     0,,PR4
         0 000430   000033 772000                    QRL     27
         0 000431   000000 624006                    EAX4    0,QL
         0 000432   040140 106540                    CMPC    fill='040'O
         0 000433   300000 200013                    ADSC9   0,,PR3                   cn=1,n=*X3
         0 000434   400000 200014                    ADSC9   0,,PR4                   cn=1,n=*X4
         0 000435   000440 600000 0                  TZE     s:4136

      791     4134    3                   PORT_KEY$ -> KEY.BYTES THEN
      792     4135    3                    REPOSITION_PORT = %TRUE;

   4135  0 000436   400000 236003                    LDQ     -131072,DU
         0 000437   200017 756100                    STQ     REPOSITION_PORT,,AUTO

      793     4136    3                 IF PORT.LEVEL.SPEC_MODIFIED (INDX + 1)

   4136  0 000440   200010 236100                    LDQ     INDX,,AUTO
         0 000441   000007 402007                    MPY     7,DL
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:94   
         0 000442   100037 234106                    SZN     31,QL,PR1
         0 000443   000447 604000 0                  TMI     s:4138
         0 000444   100037 236106                    LDQ     31,QL,PR1
         0 000445   200000 316003                    CANQ    65536,DU
         0 000446   000451 600000 0                  TZE     s:4139

      794     4137    3                   OR PORT.LEVEL.DATA_MODIFIED (INDX + 1) THEN
      795     4138    3                    FLUSH_PORT = %TRUE;

   4138  0 000447   400000 236003                    LDQ     -131072,DU
         0 000450   200020 756100                    STQ     FLUSH_PORT,,AUTO

      796     4139    3                 END COMPARE_PORT_POSITION;

   4139  0 000451   200010 054100                    AOS     INDX,,AUTO
         0 000452   200010 236100                    LDQ     INDX,,AUTO
         0 000453   200012 116100                    CMPQ    WRITE_LEVEL,,AUTO
         0 000454   000361 604000 0                  TMI     s:4107

      797     4140    2              END BLIND_WRITE;

      798     4141
      799     4142    1           IF REPOSITION_PORT THEN

   4142  0 000455   200017 234100                    SZN     REPOSITION_PORT,,AUTO
         0 000456   000634 605000 0                  TPL     s:4195

      800     4143    2   POSITION_PORT: DO;

   4143  0 000457                       POSITION_PO* null
      801     4144    3              IF FLUSH_PORT THEN DO;

   4144  0 000457   200020 234100                    SZN     FLUSH_PORT,,AUTO
         0 000460   000470 605000 0                  TPL     s:4148

      802     4145    3                 CALL VDA$PFLUSH (PORT, %TO_PRESENTER)

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:95   
   4145  0 000461   000002 236000 1                  LDQ     2
         0 000462   200051 756100                    STQ     I+2,,AUTO
         0 000463   200050 451500                    STP1    I+1,,AUTO
         0 000464   200050 630500                    EPPR0   I+1,,AUTO
         0 000465   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000466   000000 701000 xent               TSX1    VDA$PFLUSH
         0 000467   001105 702000 0                  TSX2    LSAVE_OLD_NODE_FAILED

      803     4146    3                   ALTRET (PFLUSH_FAILED);
      804     4147    3                 END;

      805     4148    2              CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)

   4148  0 000470   200003 470500                    LDP0    @STREAM,,AUTO
         0 000471   000001 471500                    LDP1    1,,PR0
         0 000472   100012 633500                    EPPR3   10,,PR1
         0 000473   200050 453500                    STP3    I+1,,AUTO
         0 000474   200050 630500                    EPPR0   I+1,,AUTO
         0 000475   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000476   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 000477   001156 702000 0                  TSX2    OFREE_FAILED

      806     4149    2                ALTRET (OCLEAR_LOCATION_FAILED);
      807     4150    2              CALL VDG$OCOPY_LOCATION (STREAM.CURRENT, PORT.CURRENT)

   4150  0 000500   200003 470500                    LDP0    @STREAM,,AUTO
         0 000501   000001 471500                    LDP1    1,,PR0
         0 000502   100012 633500                    EPPR3   10,,PR1
         0 000503   200051 453500                    STP3    I+2,,AUTO
         0 000504   200003 236100                    LDQ     @STREAM,,AUTO
         0 000505   000006 036003                    ADLQ    6,DU
         0 000506   200050 756100                    STQ     I+1,,AUTO
         0 000507   200050 630500                    EPPR0   I+1,,AUTO
         0 000510   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000511   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 000512   001156 702000 0                  TSX2    OFREE_FAILED

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:96   
      808     4151    2                ALTRET (OCOPY_LOCATION_FAILED);
      809     4152
      810     4153    2   EACH_LEVEL:
      811     4154    3              DO LEVEL = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 1;

   4154  0 000513   000001 235007       EACH_LEVEL   LDA     1,DL
         0 000514   200011 755100                    STA     LEVEL,,AUTO
         0 000515   000604 710000 0                  TRA     s:4173+1

      812     4155    3                 PORT.LEVEL.SPEC_MODIFIED (LEVEL) = %FALSE;

   4155  0 000516   200003 470500                    LDP0    @STREAM,,AUTO
         0 000517   000001 471500                    LDP1    1,,PR0
         0 000520   200011 236100                    LDQ     LEVEL,,AUTO
         0 000521   000007 402007                    MPY     7,DL
         0 000522   000000 620006                    EAX0    0,QL
         0 000523   000031 236000 xsym               LDQ     B_VECTNIL+25
         0 000524   100030 356110                    ANSQ    24,X0,PR1

      813     4156    3                 PORT.LEVEL.DATA_MODIFIED (LEVEL) = %FALSE;

   4156  0 000525   000001 471500                    LDP1    1,,PR0
         0 000526   000004 236000 1                  LDQ     4
         0 000527   100030 356110                    ANSQ    24,X0,PR1

      814     4157                      %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=LEVEL);

   4164  0 000530   000001 471500                    LDP1    1,,PR0
         0 000531   100025 721110                    LXL1    21,X0,PR1
         0 000532   000002 101003                    CMPX1   2,DU
         0 000533   000544 601000 0                  TNZ     s:4165+1

   4164  0 000534   100026 473510                    LDP3    22,X0,PR1
         0 000535   200050 453500                    STP3    I+1,,AUTO
         0 000536   200050 630500                    EPPR0   I+1,,AUTO
         0 000537   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000540   000000 701000 xent               TSX1    VDG$OFREE
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:97   
         0 000541   000543 702000 0                  TSX2    s:4165
         0 000542   000544 710000 0                  TRA     s:4165+1

   4165  0 000543   000000 702200 xent               TSX2  ! X66_AALT

   4165  0 000544   200003 470500                    LDP0    @STREAM,,AUTO
         0 000545   000001 471500                    LDP1    1,,PR0
         0 000546   200011 236100                    LDQ     LEVEL,,AUTO
         0 000547   000007 402007                    MPY     7,DL
         0 000550   100025 450106                    STZ     21,QL,PR1
         0 000551   100026 450106                    STZ     22,QL,PR1

      815     4167    4                 IF PORT.LEVEL.DATA$ (LEVEL) ~= ADDR(NIL) THEN DO;

   4167  0 000552   000001 471500                    LDP1    1,,PR0
         0 000553   100027 236106                    LDQ     23,QL,PR1
         0 000554   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000555   000575 600000 0                  TZE     s:4172

      816     4168    4                    CALL VDG$OFREE (PORT.LEVEL.DATA$ (LEVEL) -> VD$BUFFER)

   4168  0 000556   200011 236100                    LDQ     LEVEL,,AUTO
         0 000557   000007 402007                    MPY     7,DL
         0 000560   100027 473506                    LDP3    23,QL,PR1
         0 000561   200050 453500                    STP3    I+1,,AUTO
         0 000562   200050 630500                    EPPR0   I+1,,AUTO
         0 000563   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000564   000000 701000 xent               TSX1    VDG$OFREE
         0 000565   001156 702000 0                  TSX2    OFREE_FAILED

      817     4169    4                      ALTRET (OFREE_FAILED);
      818     4170    4                    PORT.LEVEL.DATA$ (LEVEL) = ADDR(NIL);

   4170  0 000566   200003 470500                    LDP0    @STREAM,,AUTO
         0 000567   000001 471500                    LDP1    1,,PR0
         0 000570   200011 236100                    LDQ     LEVEL,,AUTO
         0 000571   000007 402007                    MPY     7,DL
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:98   
         0 000572   000000 620006                    EAX0    0,QL
         0 000573   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000574   100027 756110                    STQ     23,X0,PR1

      819     4171    4                    END;

      820     4172    3                 PORT.LEVEL.INTERNAL$ (LEVEL) = ADDR(NIL);

   4172  0 000575   000001 471500                    LDP1    1,,PR0
         0 000576   200011 236100                    LDQ     LEVEL,,AUTO
         0 000577   000007 402007                    MPY     7,DL
         0 000600   000000 620006                    EAX0    0,QL
         0 000601   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 000602   100031 756110                    STQ     25,X0,PR1

      821     4173    3                 END EACH_LEVEL;

   4173  0 000603   200011 054100                    AOS     LEVEL,,AUTO
         0 000604   200013 470500                    LDP0    STRUCTURE_NODE$,,AUTO
         0 000605   200011 236100                    LDQ     LEVEL,,AUTO
         0 000606   000014 116100                    CMPQ    12,,PR0
         0 000607   000516 604000 0                  TMI     s:4155

      822     4174                   /*
      823     4175                   *  Here we must set PORT.LEVEL.x_MODIFIED for the appropriate
      824     4176                   *    component and level being written, because if we change
      825     4177                   *    the Port's current location at all, we've modified its
      826     4178                   *    registers.  Note that an optimization in VDA$PWRITE will
      827     4179                   *    not set .x_MODIFIED if the component being written equals
      828     4180                   *    the component in the Port; hence if the user writes the
      829     4181                   *    same data at a different key, this is the only spot at which
      830     4182                   *    we'll detect the change and set .x_MODIFIED.
      831     4183                   */
      832     4184    2              IF ADDR(DATA) ~= ADDR(NIL) THEN

   4184  0 000610   200006 236100                    LDQ     @DATA,,AUTO
         0 000611   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:99   
         0 000612   000622 600000 0                  TZE     s:4186

      833     4185    2                 PORT.LEVEL.DATA_MODIFIED (WRITE_LEVEL) = %TRUE;

   4185  0 000613   200003 471500                    LDP1    @STREAM,,AUTO
         0 000614   100001 473500                    LDP3    1,,PR1
         0 000615   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000616   000007 402007                    MPY     7,DL
         0 000617   000000 620006                    EAX0    0,QL
         0 000620   200000 236003                    LDQ     65536,DU
         0 000621   300030 256110                    ORSQ    24,X0,PR3

      834     4186    2              IF ADDR(SPEC) ~= ADDR(NIL) THEN

   4186  0 000622   200005 236100                    LDQ     @SPEC,,AUTO
         0 000623   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000624   000634 600000 0                  TZE     s:4195

      835     4187    2                 PORT.LEVEL.SPEC_MODIFIED (WRITE_LEVEL) = %TRUE;

   4187  0 000625   200003 471500                    LDP1    @STREAM,,AUTO
         0 000626   100001 473500                    LDP3    1,,PR1
         0 000627   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000630   000007 402007                    MPY     7,DL
         0 000631   000000 620006                    EAX0    0,QL
         0 000632   400000 236003                    LDQ     -131072,DU
         0 000633   300030 256110                    ORSQ    24,X0,PR3

      836     4188    2              END POSITION_PORT;

      837     4189
      838     4190
      839     4191                /*
      840     4192                *  Predefined files always have formatted Spec components.
      841     4193                */
      842     4194
      843     4195    1           IF PORT.LEVEL.SPEC_TYPE# (WRITE_LEVEL) >= %MX_SPEC_TYPES THEN
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:100  

   4195  0 000634   200003 470500                    LDP0    @STREAM,,AUTO
         0 000635   000001 471500                    LDP1    1,,PR0
         0 000636   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000637   000007 402007                    MPY     7,DL
         0 000640   100024 220106                    LDX0    20,QL,PR1
         0 000641   000024 100003                    CMPX0   20,DU
         0 000642   000651 602000 0                  TNC     s:4197

      844     4196    1              CALL VDG$ESCREECH (PORT.LEVEL.SPEC_TYPE# (WRITE_LEVEL));

   4196  0 000643   100024 633506                    EPPR3   20,QL,PR1
         0 000644   200050 453500                    STP3    I+1,,AUTO
         0 000645   200050 630500                    EPPR0   I+1,,AUTO
         0 000646   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000647   000000 701000 xent               TSX1    VDG$ESCREECH
         0 000650   000000 011000                    NOP     0

      845     4197    1           NODE_WRITER$$ =

   4197  0 000651   200003 470500                    LDP0    @STREAM,,AUTO
         0 000652   000001 471500                    LDP1    1,,PR0
         0 000653   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000654   000007 402007                    MPY     7,DL
         0 000655   100024 220106                    LDX0    20,QL,PR1
         0 000656   000000 236010 xsym               LDQ     VD_NODE_WRITERS$$,X0
         0 000657   200031 756100                    STQ     NODE_WRITER$$,,AUTO

      846     4198    1             VD_NODE_WRITERS$$ (PORT.LEVEL.SPEC_TYPE# (WRITE_LEVEL));
      847     4199    2           IF NODE_WRITER$$ ~= ENTADDR(NIL) THEN DO;

   4199  0 000660   000002 116000 xsym               CMPQ    B_VECTNIL+2
         0 000661   000677 600000 0                  TZE     s:4204

      848     4200    2              CALL NODE_WRITER$$ (PORT, SPEC, DATA, NODE_EXISTS)

   4200  0 000662   200016 633500                    EPPR3   NODE_EXISTS,,AUTO
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:101  
         0 000663   200053 453500                    STP3    I+4,,AUTO
         0 000664   200006 236100                    LDQ     @DATA,,AUTO
         0 000665   200052 756100                    STQ     I+3,,AUTO
         0 000666   200005 236100                    LDQ     @SPEC,,AUTO
         0 000667   200051 756100                    STQ     I+2,,AUTO
         0 000670   200050 451500                    STP1    I+1,,AUTO
         0 000671   200050 630500                    EPPR0   I+1,,AUTO
         0 000672   200031 220100                    LDX0    NODE_WRITER$$,,AUTO
         0 000673   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000674   000000 701010                    TSX1    0,X0
         0 000675   001115 702000 0                  TSX2    NODE_WRITER_FAILED

      849     4201    2                ALTRET (NODE_WRITER_FAILED);
      850     4202    2              END;

   4202  0 000676   000711 710000 0                  TRA     s:4209

      851     4203    2           ELSE DO;

      852     4204    2              CALL VDA$PWRITE (PORT, WRITE_LEVEL, SPEC, DATA)

   4204  0 000677   200006 236100                    LDQ     @DATA,,AUTO
         0 000700   200005 235100                    LDA     @SPEC,,AUTO
         0 000701   200052 757100                    STAQ    I+3,,AUTO
         0 000702   200012 633500                    EPPR3   WRITE_LEVEL,,AUTO
         0 000703   200051 453500                    STP3    I+2,,AUTO
         0 000704   200050 451500                    STP1    I+1,,AUTO
         0 000705   200050 630500                    EPPR0   I+1,,AUTO
         0 000706   000022 631400 xsym               EPPR1   B_VECTNIL+18
         0 000707   000000 701000 xent               TSX1    VDA$PWRITE
         0 000710   001115 702000 0                  TSX2    NODE_WRITER_FAILED

      853     4205    2                ALTRET (PWRITE_FAILED);
      854     4206    2              END;

      855     4207                /* SPEC and DATA have now been cleared/freed */
      856     4208
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:102  
      857     4209    1           STREAM.LAST_OP# = %ACCOP_WRITE;

   4209  0 000711   000005 220003                    LDX0    5,DU
         0 000712   200003 470500                    LDP0    @STREAM,,AUTO
         0 000713   000002 740100                    STX0    2,,PR0

      858     4210
      859     4211    2           IF PORT.DCB# = 0 AND NOT NODE_EXISTS THEN DO;

   4211  0 000714   000001 471500                    LDP1    1,,PR0
         0 000715   100004 721100                    LXL1    4,,PR1
         0 000716   000767 601000 0                  TNZ     s:4244
         0 000717   200016 234100                    SZN     NODE_EXISTS,,AUTO
         0 000720   000767 604000 0                  TMI     s:4244

      860     4212                   /*
      861     4213                   *  We built a new file node for an internal file earlier;
      862     4214                   *    now that we know all's ok, insert it into the file tree:
      863     4215                   *        If INSERT_BEFORE$ = ADDR(NIL), insert the new node
      864     4216                   *            after the last node at WRITE_LEVEL;
      865     4217                   *        If INSERT_BEFORE$ ~= ADDR(NIL), it points to a
      866     4218                   *            node in the file tree -- insert the new node
      867     4219                   *            before the INSERT_BEFORE$ node.
      868     4220                   */
      869     4221                   %INCREMENT (INDX=%STG_ACC_INT_INSERTIONS);

   4222  0 000721   000126 054000 xsym               AOS     VD_6E+86

      870     4224
      871     4225    2              PARENT_NODE$ = PORT.LEVEL.INTERNAL$ (WRITE_LEVEL - 1);

   4225  0 000722   000001 471500                    LDP1    1,,PR0
         0 000723   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000724   000007 402007                    MPY     7,DL
         0 000725   100022 236106                    LDQ     18,QL,PR1
         0 000726   200034 756100                    STQ     PARENT_NODE$,,AUTO

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:103  
      872     4226    2              NEW_NODE$ = PORT.LEVEL.INTERNAL$ (WRITE_LEVEL);

   4226  0 000727   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 000730   000007 402007                    MPY     7,DL
         0 000731   100031 236106                    LDQ     25,QL,PR1
         0 000732   200033 756100                    STQ     NEW_NODE$,,AUTO

      873     4227    2              NEW$NODE.FLINK$ = INSERT_BEFORE$;

   4227  0 000733   200032 236100                    LDQ     INSERT_BEFORE$,,AUTO
         0 000734   200033 473500                    LDP3    NEW_NODE$,,AUTO
         0 000735   300002 756100                    STQ     2,,PR3

      874     4228    3              IF INSERT_BEFORE$ = ADDR(NIL) THEN DO;

   4228  0 000736   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000737   000746 601000 0                  TNZ     s:4233

      875     4229    3                 NEW$NODE.BLINK$ = PARENT$NODE.TAIL$;

   4229  0 000740   200034 471500                    LDP1    PARENT_NODE$,,AUTO
         0 000741   100013 236100                    LDQ     11,,PR1
         0 000742   300001 756100                    STQ     1,,PR3

      876     4230    3                 PARENT$NODE.TAIL$ = NEW_NODE$;

   4230  0 000743   200033 236100                    LDQ     NEW_NODE$,,AUTO
         0 000744   100013 756100                    STQ     11,,PR1

      877     4231    3                 END;

   4231  0 000745   000753 710000 0                  TRA     s:4236

      878     4232    3              ELSE DO;

      879     4233    3                 NEW$NODE.BLINK$ = INSERT$BEFORE.BLINK$;

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:104  
   4233  0 000746   200032 471500                    LDP1    INSERT_BEFORE$,,AUTO
         0 000747   100001 236100                    LDQ     1,,PR1
         0 000750   300001 756100                    STQ     1,,PR3

      880     4234    3                 INSERT$BEFORE.BLINK$ = NEW_NODE$;

   4234  0 000751   200033 236100                    LDQ     NEW_NODE$,,AUTO
         0 000752   100001 756100                    STQ     1,,PR1

      881     4235    3                 END;

      882     4236    2              IF NEW$NODE.BLINK$ = ADDR(NIL) THEN

   4236  0 000753   300001 236100                    LDQ     1,,PR3
         0 000754   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000755   000762 601000 0                  TNZ     s:4239

      883     4237    2                 PARENT$NODE.HEAD$ = NEW_NODE$;

   4237  0 000756   200033 236100                    LDQ     NEW_NODE$,,AUTO
         0 000757   200034 471500                    LDP1    PARENT_NODE$,,AUTO
         0 000760   100012 756100                    STQ     10,,PR1
         0 000761   000765 710000 0                  TRA     s:4240

      884     4238    2              ELSE
      885     4239    2                 NEW$NODE.BLINK$->VD$FILE_NODE.FLINK$ = NEW_NODE$;

   4239  0 000762   300001 471500                    LDP1    1,,PR3
         0 000763   200033 236100                    LDQ     NEW_NODE$,,AUTO
         0 000764   100002 756100                    STQ     2,,PR1

      886     4240    2              PARENT$NODE.COUNT# = PARENT$NODE.COUNT# + 1;

   4240  0 000765   200034 471500                    LDP1    PARENT_NODE$,,AUTO
         0 000766   100014 054100                    AOS     12,,PR1

      887     4241    2              END;
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:105  

      888     4242
      889     4243
      890     4244    1           PORT.POSITION_PROTECT = SAVE_POSITION_PROTECT;

   4244  0 000767   000001 471500                    LDP1    1,,PR0
         0 000770   200007 236100                    LDQ     SAVE_POSITION_PROTECT,,AUTO
         0 000771   000001 772000                    QRL     1
         0 000772   100004 676100                    ERQ     4,,PR1
         0 000773   200000 376003                    ANQ     65536,DU
         0 000774   100004 656100                    ERSQ    4,,PR1

      891     4245    1           IF VD_$$MON_ACC.V# > 0 THEN

   4245  0 000775   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         0 000776   001003 604400 0                  TMOZ    s:4247

      892     4246    1              CALL VDG$MACC_RETURN (STREAM);

   4246  0 000777   200003 630500                    EPPR0   @STREAM,,AUTO
         0 001000   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001001   000000 701000 xent               TSX1    VDG$MACC_RETURN
         0 001002   000000 011000                    NOP     0

      893     4247    1           RETURN;

   4247  0 001003   000000 702200 xent               TSX2  ! X66_ARET

      894     4248
      895     4249
      896     4250
      897     4251    1   BREAK_HIT_FAILURE:
      898     4252    1           CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);

   4252  0 001004   000005 630400 1     BREAK_HIT_F* EPPR0   5
         0 001005   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001006   000000 701000 xent               TSX1    VDG$EBREAK_ACKNOWLEDGE
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:106  
         0 001007   000000 011000                    NOP     0

      899     4253    1           GOTO COMMON_ALTRETURN;

   4253  0 001010   001105 710000 0                  TRA     LSAVE_OLD_NODE_FAILED

      900     4254
      901     4255
      902     4256    1   PORT_BUSY_FAILURE:
      903     4257    1           CALL VDG$ERRMSG (%E$PORT_BUSY) ALTRET (COMMON_ALTRETURN);

   4257  0 001011   000007 630400 1     PORT_BUSY_F* EPPR0   7
         0 001012   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001013   000000 701000 xent               TSX1    VDG$ERRMSG
         0 001014   001105 702000 0                  TSX2    LSAVE_OLD_NODE_FAILED

      904     4258    1           GOTO COMMON_PORT_MSG;

   4258  0 001015   001027 710000 0                  TRA     COMMON_PORT_MSG

      905     4259
      906     4260
      907     4261    1   CANT_WRITE_FAILURE:
      908     4262    1           CALL VDG$ERRMSG (%E$CANT_WRITE) ALTRET (COMMON_ALTRETURN);

   4262  0 001016   000011 630400 1     CANT_WRITE_* EPPR0   9
         0 001017   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001020   000000 701000 xent               TSX1    VDG$ERRMSG
         0 001021   001105 702000 0                  TSX2    LSAVE_OLD_NODE_FAILED

      909     4263    1           GOTO COMMON_PORT_MSG;

   4263  0 001022   001027 710000 0                  TRA     COMMON_PORT_MSG

      910     4264
      911     4265
      912     4266    1   CANT_INSERT_DELETE_REC_FAILURE:
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:107  
      913     4267    1           CALL VDG$ERRMSG (%E$CANT_INSERT_DELETE_RECORDS)

   4267  0 001023   000013 630400 1     CANT_INSERT* EPPR0   11
         0 001024   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001025   000000 701000 xent               TSX1    VDG$ERRMSG
         0 001026   001105 702000 0                  TSX2    LSAVE_OLD_NODE_FAILED

   4262  0 001027                       COMMON_PORT* null
      914     4268    1             ALTRET (COMMON_ALTRETURN);
      915     4269    1   COMMON_PORT_MSG: ;
      916     4270    1           VD$ERR.DCB# = PORT.DCB#;

   4270  0 001027   200003 470500                    LDP0    @STREAM,,AUTO
         0 001030   000001 471500                    LDP1    1,,PR0
         0 001031   100004 720100                    LXL0    4,,PR1
         0 001032   000032 473400 xsym               LDP3    VD_6E+26
         0 001033   300004 740100                    STX0    4,,PR3

      917     4271    1           GOTO COMMON_ALTRETURN;

   4271  0 001034   001105 710000 0                  TRA     LSAVE_OLD_NODE_FAILED

      918     4272
      919     4273
      920     4274    1   CANT_WRITE_NODE_FAILURE:
      921     4275    1           CALL VDG$ERRMSG (%E$CANT_WRITE_NODE) ALTRET (COMMON_ALTRETURN);

   4275  0 001035   000015 630400 1     CANT_WRITE_* EPPR0   13
         0 001036   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001037   000000 701000 xent               TSX1    VDG$ERRMSG
         0 001040   001105 702000 0                  TSX2    LSAVE_OLD_NODE_FAILED

      922     4276    1           SUBST_FIELD$ = PINCRW( ADDR(VD$ERR), SIZEW(VD$ERR));

   4276  0 001041   000032 236000 xsym               LDQ     VD_6E+26
         0 001042   000005 036003                    ADLQ    5,DU
         0 001043   200036 756100                    STQ     SUBST_FIELD$,,AUTO
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:108  

      923     4277    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;

   4277  0 001044   000043 220003                    LDX0    35,DU
         0 001045   200036 470500                    LDP0    SUBST_FIELD$,,AUTO
         0 001046   000000 740100                    STX0    0,,PR0

      924     4278    1           SUBST$POINTER.V$ (0) = ADDR(PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) ->

   4278  0 001047   200003 471500                    LDP1    @STREAM,,AUTO
         0 001050   100001 473500                    LDP3    1,,PR1
         0 001051   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001052   000007 402007                    MPY     7,DL
         0 001053   300031 474506                    LDP4    25,QL,PR3
         0 001054   400004 635500                    EPPR5   4,,PR4
         0 001055   000003 455500                    STP5    3,,PR0

      925     4279    1             VD$FILE_NODE.DESC.KEY);
      926     4280    1           GOTO COMMON_ALTRETURN;

   4280  0 001056   001105 710000 0                  TRA     LSAVE_OLD_NODE_FAILED

      927     4281
      928     4282
      929     4283    1   FILE_NOT_FILLED_FAILURE:
      930     4284                %GETKEY (KEY=PORT.FILE_KEY, PTR=PORT_KEY$);

   4291  0 001057   100010 721100       FILE_NOT_FI* LXL1    8,,PR1
         0 001060   000002 101003                    CMPX1   2,DU
         0 001061   001066 601000 0                  TNZ     s:4291+4

   4291  0 001062   100011 473500                    LDP3    9,,PR1
         0 001063   300002 634500                    EPPR4   2,,PR3
         0 001064   200022 454500                    STP4    PORT_KEY$,,AUTO
         0 001065   001070 710000 0                  TRA     s:4294

   4291  0 001066   100011 633500                    EPPR3   9,,PR1
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:109  
         0 001067   200022 453500                    STP3    PORT_KEY$,,AUTO

      931     4294    1           CALL VDG$ERRMSG (%E$FILE_NOT_FILLED, PORT_KEY$->KEY, WRITE_LEVEL)

   4294  0 001070   200012 633500                    EPPR3   WRITE_LEVEL,,AUTO
         0 001071   200052 453500                    STP3    I+3,,AUTO
         0 001072   200022 236100                    LDQ     PORT_KEY$,,AUTO
         0 001073   000017 235000 1                  LDA     15
         0 001074   200050 757100                    STAQ    I+1,,AUTO
         0 001075   200050 630500                    EPPR0   I+1,,AUTO
         0 001076   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 001077   000000 701000 xent               TSX1    VDG$ERRMSG
         0 001100   001105 702000 0                  TSX2    LSAVE_OLD_NODE_FAILED

      932     4295    1             ALTRET (COMMON_ALTRETURN);
      933     4296    1           GOTO COMMON_ALTRETURN;

   4296  0 001101   001105 710000 0                  TRA     LSAVE_OLD_NODE_FAILED

   4296  0 001102                       PREAD_FAILED null
      934     4297
      935     4298
      936     4299    1   PREAD_FAILED: ;
      937     4300    1           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;

   4300  0 001102   200037 236100                    LDQ     SAVE_ACCESSOR_PRIV,,AUTO
         0 001103   777000 376003                    ANQ     -512,DU
         0 001104   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

   4300  0 001105                       LSAVE_OLD_N* null
   4300  0 001105                       PFLUSH_FAIL* null
   4300  0 001105                       RWRITE_FAIL* null
      938     4301    1   LSAVE_OLD_NODE_FAILED: ;
      939     4302    1   PFLUSH_FAILED: ;
      940     4303    1   RWRITE_FAILED: ;
      941     4304    1   COMMON_ALTRETURN:
      942     4305    1           PORT.POSITION_PROTECT = SAVE_POSITION_PROTECT;
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:110  

   4305  0 001105   200003 470500       COMMON_ALTR* LDP0    @STREAM,,AUTO
         0 001106   000001 471500                    LDP1    1,,PR0
         0 001107   200007 236100                    LDQ     SAVE_POSITION_PROTECT,,AUTO
         0 001110   000001 772000                    QRL     1
         0 001111   100004 676100                    ERQ     4,,PR1
         0 001112   200000 376003                    ANQ     65536,DU
         0 001113   100004 656100                    ERSQ    4,,PR1

      943     4306    1           ALTRETURN;

   4306  0 001114   000000 702200 xent               TSX2  ! X66_AALT

   4300  0 001115                       NODE_WRITER* null
   4300  0 001115                       PWRITE_FAIL* null
      944     4307
      945     4308
      946     4309    1   NODE_WRITER_FAILED: ;
      947     4310    1   PWRITE_FAILED: ;
      948     4311    1           IF PORT.DCB# = 0 AND (NOT NODE_EXISTS)

   4311  0 001115   200003 470500                    LDP0    @STREAM,,AUTO
         0 001116   000001 471500                    LDP1    1,,PR0
         0 001117   100004 720100                    LXL0    4,,PR1
         0 001120   001147 601000 0                  TNZ     s:4318
         0 001121   200016 234100                    SZN     NODE_EXISTS,,AUTO
         0 001122   001147 604000 0                  TMI     s:4318
         0 001123   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001124   000007 402007                    MPY     7,DL
         0 001125   100031 236106                    LDQ     25,QL,PR1
         0 001126   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 001127   001147 600000 0                  TZE     s:4318

      949     4312    2             AND PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;

      950     4313    2              CALL VDG$OFREE (PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) ->

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:111  
   4313  0 001130   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001131   000007 402007                    MPY     7,DL
         0 001132   100031 473506                    LDP3    25,QL,PR1
         0 001133   200050 453500                    STP3    I+1,,AUTO
         0 001134   200050 630500                    EPPR0   I+1,,AUTO
         0 001135   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001136   000000 701000 xent               TSX1    VDG$OFREE
         0 001137   001156 702000 0                  TSX2    OFREE_FAILED

      951     4314    2                VD$FILE_NODE)
      952     4315    2                ALTRET (OFREE_FAILED);
      953     4316    2              PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) = ADDR(NIL);

   4316  0 001140   200003 470500                    LDP0    @STREAM,,AUTO
         0 001141   000001 471500                    LDP1    1,,PR0
         0 001142   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001143   000007 402007                    MPY     7,DL
         0 001144   000000 620006                    EAX0    0,QL
         0 001145   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 001146   100031 756110                    STQ     25,X0,PR1

      954     4317    2              END;

      955     4318    1           PORT.POSITION_PROTECT = SAVE_POSITION_PROTECT;

   4318  0 001147   000001 471500                    LDP1    1,,PR0
         0 001150   200007 236100                    LDQ     SAVE_POSITION_PROTECT,,AUTO
         0 001151   000001 772000                    QRL     1
         0 001152   100004 676100                    ERQ     4,,PR1
         0 001153   200000 376003                    ANQ     65536,DU
         0 001154   100004 656100                    ERSQ    4,,PR1

      956     4319    1           ALTRETURN;

   4319  0 001155   000000 702200 xent               TSX2  ! X66_AALT

   4318  0 001156                       OFREE_FAILED null
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:112  
   4318  0 001156                       OCLEAR_LOCA* null
   4318  0 001156                       OCOPY_FAILED null
   4318  0 001156                       OCOPY_LOCAT* null
   4318  0 001156                       BUILD_INTER* null
   4318  0 001156                       OALLOC_FAIL* null
      957     4320
      958     4321
      959     4322    1   OFREE_FAILED: ;
      960     4323    1   OCLEAR_LOCATION_FAILED: ;
      961     4324    1   OCOPY_FAILED: ;
      962     4325    1   OCOPY_LOCATION_FAILED: ;
      963     4326    1   BUILD_INTERNAL_NODE_FAILED: ;
      964     4327    1   OALLOC_FAILED: ;
      965     4328                /* All these errors are always fatal, so just get out */
      966     4329    1           ALTRETURN;

   4329  0 001156   000000 702200 xent               TSX2  ! X66_AALT

      967     4330
      968     4331                %BOX (TITLE=BUILD_INTERNAL_NODE, PAGE=YES);
              4339    1
              4343    1   /***************************************************************************
              4345    1    *                                                                         *
              4349    1            *                            BUILD_INTERNAL_NODE                         *
              4351    1            *                                                                        *
              4353    1          ***************************************************************************/

      969     4357
      970     4358        /*I* NAME: BUILD_INTERNAL_NODE
      971     4359            PARAMETERS:
      972     4360            INPUT:
      973     4361                WRITE_LEVEL - Level in file for which to build the node.
      974     4362                STREAM.CURRENT.KEY (WRITE_LEVEL) must specify the key to build
      975     4363                    the node for.
      976     4364                PORT - Port to build node for, at WRITE_LEVEL.
      977     4365            OUTPUT:
      978     4366                PORT.CURRENT will be set from STREAM.CURRENT.
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:113  
      979     4367                PORT's Spec and Data at WRITE_LEVEL will be cleared.
      980     4368                PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) will point to the newly-built
      981     4369                    VD$FILE_NODE.  It won't be linked to anything (not yet
      982     4370                    inserted into file); it will have a Key component, but no
      983     4371                    Spec or Data components.
      984     4372            DESCRIPTION:
      985     4373                Clear the port's level registers at WRITE_LEVEL.
      986     4374                Build the VD$FILE_NODE and it's Key component.
      987     4375                Point the port to the new file node.
      988     4376                Copy the STREAM's location to the port.
      989     4377        */
      990     4378
      991     4379    1   BUILD_INTERNAL_NODE: PROC ALTRET;

   4379  0 001157   200040 741300       BUILD_INTER* STX1  ! SAVE_ACCESSOR_PRIV+1,,AUTO

      992     4380
      993     4381
      994     4382
      995     4383    2   DCL NEW_NODE$ PTR;
      996     4384    2   DCL PARENT_NODE$ PTR;
      997     4385    2   DCL STRUCTURE_LEVEL_NODE$ PTR;
      998     4386    2   DCL STRUCTURE_LEVEL$ PTR;
      999     4387    2   DCL STREAM_KEY$ PTR;
     1000     4388    2   DCL NB_KEY SBIN;
     1001     4389    2   DCL I SBIN;
     1002     4390
     1003     4391
     1004     4392        %VD$FILE_NODE (NAME=NEW$NODE, STCLASS="BASED(NEW_NODE$)");
     1005     4485        %VD$FILE_NODE (NAME=PARENT$NODE, STCLASS="BASED(PARENT_NODE$)");
     1006     4578        %VD$FILE_NODE (NAME=STRUCTURE$LEVEL_NODE,
     1007     4579            STCLASS="BASED(STRUCTURE_LEVEL_NODE$)");
     1008     4672        %VD$STRUCTURE_LEVEL (NAME=STRUCTURE$LEVEL,
     1009     4673            STCLASS="BASED(STRUCTURE_LEVEL$)");
     1010     4720        %VD$TEXTC (NAME=STREAM$KEY, STCLASS="BASED(STREAM_KEY$)");
     1011     4743
     1012     4744
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:114  
     1013     4745
     1014     4746                %CLEARSPEC (SPEC=PORT.LEVEL.SPEC, INDX=WRITE_LEVEL);

   4753  0 001160   200003 470500                    LDP0    @STREAM,,AUTO
         0 001161   000001 471500                    LDP1    1,,PR0
         0 001162   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001163   000007 402007                    MPY     7,DL
         0 001164   100025 720106                    LXL0    21,QL,PR1
         0 001165   000002 100003                    CMPX0   2,DU
         0 001166   001200 601000 0                  TNZ     s:4754+2

   4753  0 001167   100026 473506                    LDP3    22,QL,PR1
         0 001170   200050 453500                    STP3    I+1,,AUTO
         0 001171   200050 630500                    EPPR0   I+1,,AUTO
         0 001172   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001173   000000 701000 xent               TSX1    VDG$OFREE
         0 001174   001176 702000 0                  TSX2    s:4754
         0 001175   001200 710000 0                  TRA     s:4754+2

   4754  0 001176   200040 221300                    LDX1  ! SAVE_ACCESSOR_PRIV+1,,AUTO
         0 001177   000000 702211                    TSX2  ! 0,X1

   4754  0 001200   200003 470500                    LDP0    @STREAM,,AUTO
         0 001201   000001 471500                    LDP1    1,,PR0
         0 001202   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001203   000007 402007                    MPY     7,DL
         0 001204   100025 450106                    STZ     21,QL,PR1
         0 001205   100026 450106                    STZ     22,QL,PR1

     1015     4756    3           IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;

   4756  0 001206   000001 471500                    LDP1    1,,PR0
         0 001207   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001210   000007 402007                    MPY     7,DL
         0 001211   100027 236106                    LDQ     23,QL,PR1
         0 001212   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 001213   001233 600000 0                  TZE     s:4763
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:115  

     1016     4757    3              CALL VDG$OFREE (PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER)

   4757  0 001214   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001215   000007 402007                    MPY     7,DL
         0 001216   100027 473506                    LDP3    23,QL,PR1
         0 001217   200050 453500                    STP3    I+1,,AUTO
         0 001220   200050 630500                    EPPR0   I+1,,AUTO
         0 001221   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001222   000000 701000 xent               TSX1    VDG$OFREE
         0 001223   001412 702000 0                  TSX2    OFREE_FAILED

     1017     4758    3                ALTRET (OFREE_FAILED);
     1018     4759    3              PORT.LEVEL.DATA$ (WRITE_LEVEL) = ADDR(NIL);

   4759  0 001224   200003 470500                    LDP0    @STREAM,,AUTO
         0 001225   000001 471500                    LDP1    1,,PR0
         0 001226   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001227   000007 402007                    MPY     7,DL
         0 001230   000000 620006                    EAX0    0,QL
         0 001231   000001 236000 xsym               LDQ     B_VECTNIL+1
         0 001232   100027 756110                    STQ     23,X0,PR1

     1019     4760    3              END;

     1020     4761
     1021     4762                /* Find VD$STRUCTURE_LEVEL for WRITE_LEVEL */
     1022     4763    2           STRUCTURE_LEVEL_NODE$ = STRUCTURE$NODE.HEAD$;

   4763  0 001233   200013 471500                    LDP1    STRUCTURE_NODE$,,AUTO
         0 001234   100012 236100                    LDQ     10,,PR1
         0 001235   200043 756100                    STQ     STRUCTURE_LEVEL_NODE$,,AUTO

     1023     4764    3           DO I = %LVL_FILE TO (WRITE_LEVEL - 1);

   4764  0 001236   200047 450100                    STZ     I,,AUTO
         0 001237   001244 710000 0                  TRA     s:4766+1
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:116  

     1024     4765    3              STRUCTURE_LEVEL_NODE$ = STRUCTURE$LEVEL_NODE.FLINK$;

   4765  0 001240   200043 470500                    LDP0    STRUCTURE_LEVEL_NODE$,,AUTO
         0 001241   000002 236100                    LDQ     2,,PR0
         0 001242   200043 756100                    STQ     STRUCTURE_LEVEL_NODE$,,AUTO

     1025     4766    3              END;

   4766  0 001243   200047 054100                    AOS     I,,AUTO
         0 001244   200047 236100                    LDQ     I,,AUTO
         0 001245   200012 116100                    CMPQ    WRITE_LEVEL,,AUTO
         0 001246   001240 604000 0                  TMI     s:4765

     1026     4767    2           STRUCTURE_LEVEL$ = STRUCTURE$LEVEL_NODE.DESC.SPEC.V$;

   4767  0 001247   200043 470500                    LDP0    STRUCTURE_LEVEL_NODE$,,AUTO
         0 001250   000007 236100                    LDQ     7,,PR0
         0 001251   200044 756100                    STQ     STRUCTURE_LEVEL$,,AUTO

     1027     4768
     1028     4769    2           CALL VDG$OALLOC (%CLS_FILE_NODE, NEW_NODE$)

   4769  0 001252   200041 631500                    EPPR1   NEW_NODE$,,AUTO
         0 001253   200051 451500                    STP1    I+2,,AUTO
         0 001254   000021 236000 1                  LDQ     17
         0 001255   200050 756100                    STQ     I+1,,AUTO
         0 001256   200050 630500                    EPPR0   I+1,,AUTO
         0 001257   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 001260   000000 701000 xent               TSX1    VDG$OALLOC
         0 001261   001412 702000 0                  TSX2    OFREE_FAILED

     1029     4770    2             ALTRET (OALLOC_FAILED);
     1030     4771                %GETKEY (KEY=STREAM.CURRENT.KEY, INDX=WRITE_LEVEL-1,
     1031     4772                PTR=STREAM_KEY$);

   4779  0 001262   200012 235100                    LDA     WRITE_LEVEL,,AUTO
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:117  
         0 001263   000001 735000                    ALS     1
         0 001264   200003 470500                    LDP0    @STREAM,,AUTO
         0 001265   000004 720105                    LXL0    4,AL,PR0
         0 001266   000002 100003                    CMPX0   2,DU
         0 001267   001274 601000 0                  TNZ     s:4779+10

   4779  0 001270   000005 471505                    LDP1    5,AL,PR0
         0 001271   100002 633500                    EPPR3   2,,PR1
         0 001272   200045 453500                    STP3    STREAM_KEY$,,AUTO
         0 001273   001301 710000 0                  TRA     s:4782

   4779  0 001274   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001275   000023 736000                    QLS     19
         0 001276   000005 036003                    ADLQ    5,DU
         0 001277   200003 036100                    ADLQ    @STREAM,,AUTO
         0 001300   200045 756100                    STQ     STREAM_KEY$,,AUTO

     1032     4782    2           NB_KEY = STREAM$KEY.LENGTH#;

   4782  0 001301   200045 471500                    LDP1    STREAM_KEY$,,AUTO
         0 001302   100000 236100                    LDQ     0,,PR1
         0 001303   000033 772000                    QRL     27
         0 001304   200046 756100                    STQ     NB_KEY,,AUTO

     1033     4783    2           CALL VDG$BUILD_KEY (NEW$NODE.DESC.KEY, NB_KEY,

   4783  0 001305   200045 236100                    LDQ     STREAM_KEY$,,AUTO
         0 001306   200000 036007                    ADLQ    65536,DL
         0 001307   200052 756100                    STQ     I+3,,AUTO
         0 001310   200046 633500                    EPPR3   NB_KEY,,AUTO
         0 001311   200051 453500                    STP3    I+2,,AUTO
         0 001312   200041 236100                    LDQ     NEW_NODE$,,AUTO
         0 001313   000004 036003                    ADLQ    4,DU
         0 001314   200050 756100                    STQ     I+1,,AUTO
         0 001315   200050 630500                    EPPR0   I+1,,AUTO
         0 001316   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 001317   000000 701000 xent               TSX1    VDG$BUILD_KEY
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:118  
         0 001320   001412 702000 0                  TSX2    OFREE_FAILED

     1034     4784    2             STREAM$KEY.BYTES)
     1035     4785    2             ALTRET (BUILD_KEY_FAILED);
     1036     4786    2           NEW$NODE.DESC.KEY.TYPE# = PORT.LEVEL.KEY_TYPE# (WRITE_LEVEL);

   4786  0 001321   200003 470500                    LDP0    @STREAM,,AUTO
         0 001322   000001 471500                    LDP1    1,,PR0
         0 001323   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001324   000007 402007                    MPY     7,DL
         0 001325   100023 720106                    LXL0    19,QL,PR1
         0 001326   200041 473500                    LDP3    NEW_NODE$,,AUTO
         0 001327   300004 740100                    STX0    4,,PR3

     1037     4787
     1038     4788    2           NEW$NODE.ACCESS (%NAC_READ) = %TRUE;

   4788  0 001330   200041 471500                    LDP1    NEW_NODE$,,AUTO
         0 001331   200000 236003                    LDQ     65536,DU
         0 001332   100003 256100                    ORSQ    3,,PR1

     1039     4789    2           NEW$NODE.ACCESS (%NAC_WRITE) =

   4789  0 001333   200044 471500                    LDP1    STRUCTURE_LEVEL$,,AUTO
         0 001334   100004 236100                    LDQ     4,,PR1
         0 001335   000003 736000                    QLS     3
         0 001336   400000 376003                    ANQ     -131072,DU
         0 001337   200050 756100                    STQ     I+1,,AUTO
         0 001340   100004 236100                    LDQ     4,,PR1
         0 001341   000002 736000                    QLS     2
         0 001342   400000 376003                    ANQ     -131072,DU
         0 001343   200050 376100                    ANQ     I+1,,AUTO
         0 001344   400000 676003                    ERQ     -131072,DU
         0 001345   200041 473500                    LDP3    NEW_NODE$,,AUTO
         0 001346   000002 772000                    QRL     2
         0 001347   300003 676100                    ERQ     3,,PR3
         0 001350   100000 376003                    ANQ     32768,DU
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:119  
         0 001351   300003 656100                    ERSQ    3,,PR3

     1040     4790    2             ~ (STRUCTURE$LEVEL.PROTECT (%CO_SPEC) &
     1041     4791    2             STRUCTURE$LEVEL.PROTECT (%CO_DATA));
     1042     4792    2           NEW$NODE.ACCESS (%NAC_DELETE) = NEW$NODE.ACCESS (%NAC_WRITE);

   4792  0 001352   200041 473500                    LDP3    NEW_NODE$,,AUTO
         0 001353   300003 236100                    LDQ     3,,PR3
         0 001354   000001 772000                    QRL     1
         0 001355   300003 676100                    ERQ     3,,PR3
         0 001356   040000 376003                    ANQ     16384,DU
         0 001357   300003 656100                    ERSQ    3,,PR3

     1043     4793
     1044     4794    2           PORT.LEVEL.INTERNAL$ (WRITE_LEVEL) = NEW_NODE$;

   4794  0 001360   000001 473500                    LDP3    1,,PR0
         0 001361   200012 236100                    LDQ     WRITE_LEVEL,,AUTO
         0 001362   000007 402007                    MPY     7,DL
         0 001363   000000 620006                    EAX0    0,QL
         0 001364   200041 236100                    LDQ     NEW_NODE$,,AUTO
         0 001365   300031 756110                    STQ     25,X0,PR3

     1045     4795    2           CALL VDG$OCLEAR_LOCATION (PORT.CURRENT)

   4795  0 001366   000001 473500                    LDP3    1,,PR0
         0 001367   300012 634500                    EPPR4   10,,PR3
         0 001370   200050 454500                    STP4    I+1,,AUTO
         0 001371   200050 630500                    EPPR0   I+1,,AUTO
         0 001372   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 001373   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         0 001374   001412 702000 0                  TSX2    OFREE_FAILED

     1046     4796    2             ALTRET (OCLEAR_LOCATION_FAILED);
     1047     4797    2           CALL VDG$OCOPY_LOCATION (STREAM.CURRENT, PORT.CURRENT)

   4797  0 001375   200003 470500                    LDP0    @STREAM,,AUTO
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:120  
         0 001376   000001 471500                    LDP1    1,,PR0
         0 001377   100012 633500                    EPPR3   10,,PR1
         0 001400   200051 453500                    STP3    I+2,,AUTO
         0 001401   200003 236100                    LDQ     @STREAM,,AUTO
         0 001402   000006 036003                    ADLQ    6,DU
         0 001403   200050 756100                    STQ     I+1,,AUTO
         0 001404   200050 630500                    EPPR0   I+1,,AUTO
         0 001405   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 001406   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         0 001407   001412 702000 0                  TSX2    OFREE_FAILED

     1048     4798    2             ALTRET (OCOPY_LOCATION_FAILED);
     1049     4799
     1050     4800    2           RETURN;

   4800  0 001410   200040 221300                    LDX1  ! SAVE_ACCESSOR_PRIV+1,,AUTO
         0 001411   000001 702211                    TSX2  ! 1,X1

   4794  0 001412                       OFREE_FAILED null
   4794  0 001412                       OALLOC_FAIL* null
   4794  0 001412                       BUILD_KEY_F* null
   4794  0 001412                       OCLEAR_LOCA* null
   4794  0 001412                       OCOPY_LOCAT* null
     1051     4801
     1052     4802
     1053     4803
     1054     4804    2   OFREE_FAILED: ;
     1055     4805    2   OALLOC_FAILED: ;
     1056     4806    2   BUILD_KEY_FAILED: ;
     1057     4807    2   OCLEAR_LOCATION_FAILED: ;
     1058     4808    2   OCOPY_LOCATION_FAILED: ;
     1059     4809    2           ALTRETURN;

   4809  0 001412   200040 221300                    LDX1  ! SAVE_ACCESSOR_PRIV+1,,AUTO
         0 001413   000000 702211                    TSX2  ! 0,X1
     1060     4810
     1061     4811    2   END BUILD_INTERNAL_NODE;
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:121  
     1062     4812
     1063     4813    1   END VDA$LWRITE;
     1064     4814        %EOD;

PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:122  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$LWRITE.
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:123  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ABSOLUTE                  6-0-0/w PTR         r     1 @DATA
     5-0-0/w PTR         r     1 @SPEC                      3-0-0/w PTR         r     1 @STREAM
    *0-0-0/w STRC(324)   r     1 ABSOLUTE                  *0-0-0/w ASTR(90)    r     1 DATA
    35-0-0/w PTR         r     1 ENCODED_NODE$             20-0-0/w BIT         r     1 FLUSH_PORT
    15-0-0/w BIT         r     1 HISTORY_ENABLED           47-0-0/w SBIN        r     1 I
    10-0-0/w SBIN        r     1 INDX                      32-0-0/w PTR         r     1 INSERT_BEFORE$
    11-0-0/w SBIN        r     1 LEVEL                     46-0-0/w SBIN        r     1 NB_KEY
    33-0-0/w PTR         r     1 NEW_NODE$                 41-0-0/w PTR         r     1 NEW_NODE$
    16-0-0/w BIT         r     1 NODE_EXISTS               31-0-0/w EPTR        r     1 NODE_WRITER$$
    34-0-0/w PTR         r     1 PARENT_NODE$              42-0-0/w PTR         r     1 PARENT_NODE$
    24-0-0/w PTR         r     1 PASSED_SPEC$              22-0-0/w PTR         r     1 PORT_KEY$
    23-0-0/w PTR         r     1 PORT_SPEC$                17-0-0/w BIT         r     1 REPOSITION_PORT
    37-0-0/w STRC(9)     r     1 SAVE_ACCESSOR_PRIV
     7-0-0/w BIT         r     1 SAVE_POSITION_PROTECT
    *0-0-0/w STRC(72)    r     1 SPEC                      *0-0-0/w STRC(864)   r     1 STREAM
    25-0-0/w PTR         r     1 STREAM_KEY$(0:3)
    45-0-0/w PTR         r     1 STREAM_KEY$               14-0-0/b STRC(5)     r     1 STREAM_PROTECT
    44-0-0/w PTR         r     1 STRUCTURE_LEVEL$
    43-0-0/w PTR         r     1 STRUCTURE_LEVEL_NODE$
    13-0-0/w PTR         r     1 STRUCTURE_NODE$           36-0-0/w PTR         r     1 SUBST_FIELD$
    12-0-0/w SBIN        r     1 WRITE_LEVEL

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$$MON_ACC               0-0-0/w STRC(22644) r     1 VD_6E
     0-0-0/w STRC(9)     r     1 VD_ACCESSOR_PRIV
     0-0-0/w EPTR        r     1 VD_NODE_WRITERS$$(0:0)
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:124  

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(864)   r     1 HISTORY$STREAM             0-0-0/w STRC(468)   r     1 INSERT$BEFORE
     0-0-0/w ASTR(9)     r     1 KEY                        0-0-0/w STRC(468)   r     1 NEW$NODE
     0-0-0/w STRC(468)   r     1 NEW$NODE                   0-0-0/w STRC(468)   r     1 PARENT$NODE
     0-0-0/w ASTR(9)     r     1 PASSED$SPEC                0-0-0/w STRC(1944)  r     1 PORT
     0-0-0/w ASTR(9)     r     1 PORT$SPEC                  0-0-0/w ASTR(9)     r     1 STREAM$KEY
     0-0-0/w STRC(324)   r     1 STRUCTURE$LEVEL            0-0-0/w STRC(468)   r     1 STRUCTURE$LEVEL_NODE
     0-0-0/w STRC(468)   r     1 STRUCTURE$NODE
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:2)
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDA$LWRITE requires 780 words for executable code.
   Procedure VDA$LWRITE requires 46 words of local(AUTO) storage.
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:125  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:126  
          MINI XREF LISTING

ABSOLUTE
      2602**DCL       121--PROC     3980<>CALL     3987--IF       3993>>IF       3997<>CALL     4057<>CALL
ABSOLUTE.EOF
      2620**DCL      3993>>IF       3994<>CALL
ABSOLUTE.KEY
      2616**DCL      4002>>IF
BREAK_HIT_FAILURE
      4252**LABEL    3978--GOTO
BUILD_INTERNAL_NODE
      4379**PROC     4084--CALL
BUILD_INTERNAL_NODE_FAILED
      4318**LABEL    4084--CALLALT
BUILD_KEY_FAILED IN PROCEDURE BUILD_INTERNAL_NODE
      4794**LABEL    4783--CALLALT
CANT_INSERT_DELETE_REC_FAILURE
      4267**LABEL    4064--GOTO
CANT_WRITE_FAILURE
      4262**LABEL    4014--GOTO
CANT_WRITE_NODE_FAILURE
      4275**LABEL    4073--GOTO
COMMON_ALTRETURN
      4305**LABEL    4253--GOTO     4257--CALLALT  4262--CALLALT  4267--CALLALT  4271--GOTO     4275--CALLALT
      4280--GOTO     4294--CALLALT  4296--GOTO
COMMON_PORT_MSG
      4262**LABEL    4258--GOTO     4263--GOTO
COMPARE_PORT_POSITION
      4106**LABEL    4109--EXIT
DATA
      2661**DCL       121--PROC     3980<>CALL     4010--IF       4184--IF       4200<>CALL     4204<>CALL
DATA.LENGTH#
      2687**DCL      2689--IMP-SIZ  3980>>CALL     4200>>CALL     4204>>CALL
ENCODED_NODE$
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:127  
      2833**DCL      3399--IMP-PTR
FILE_NOT_FILLED_FAILURE
      4291**LABEL    4068--GOTO
FLUSH_PORT
      2823**DCL      4048<<ASSIGN   4096<<ASSIGN   4103<<ASSIGN   4138<<ASSIGN   4144>>IF
HISTORY$STREAM.PORT$
      3546**DCL      4043>>IF       4044>>IF
HISTORY_ENABLED
      2820**DCL      4040<<ASSIGN   4045<<ASSIGN   4050>>IF       4076>>IF
I IN PROCEDURE BUILD_INTERNAL_NODE
      4389**DCL      4764<<DOINDEX
INDX
      2814**DCL      4001<<DOINDEX  4002>>IF       4003>>IF       4004>>ASSIGN   4106<<DOINDEX  4119>>IF
      4119>>ASSIGN   4119>>ASSIGN   4130>>IF       4130>>ASSIGN   4130>>ASSIGN   4130>>ASSIGN   4130>>ASSIGN
      4133>>IF       4133>>IF       4136>>IF       4136>>IF
INSERT$BEFORE.BLINK$
      3146**DCL      4233>>ASSIGN   4234<<ASSIGN
INSERT_BEFORE$
      2830**DCL      3120--IMP-PTR  4083<<ASSIGN   4227>>ASSIGN   4228>>IF       4233>>ASSIGN   4234>>ASSIGN
KEY
      3051**DCL      4294<>CALL
KEY.BYTES
      3061**DCL      4133>>IF       4133>>IF
KEY.LENGTH#
      3059**DCL      3061--IMP-SIZ  4133>>IF       4133>>IF       4294>>CALL
LEVEL
      2815**DCL      4154<<DOINDEX  4155>>ASSIGN   4156>>ASSIGN   4164>>IF       4164>>CALL     4164>>CALL
      4165>>ASSIGN   4167>>IF       4168>>CALL     4168>>CALL     4170>>ASSIGN   4172>>ASSIGN
LSAVE_OLD_NODE_FAILED
      4300**LABEL    4077--CALLALT
NB_KEY IN PROCEDURE BUILD_INTERNAL_NODE
      4388**DCL      4782<<ASSIGN   4783<>CALL
NEW$NODE.BLINK$
      3239**DCL      4229<<ASSIGN   4233<<ASSIGN   4236>>IF       4239>>ASSIGN
NEW$NODE.FLINK$
      3239**DCL      4227<<ASSIGN
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:128  
NEW$NODE.ACCESS IN PROCEDURE BUILD_INTERNAL_NODE
      4438**DCL      4788<<ASSIGN   4789<<ASSIGN   4792<<ASSIGN   4792>>ASSIGN
NEW$NODE.DESC.KEY IN PROCEDURE BUILD_INTERNAL_NODE
      4463**DCL      4783<>CALL
NEW$NODE.DESC.KEY.TYPE# IN PROCEDURE BUILD_INTERNAL_NODE
      4465**DCL      4786<<ASSIGN
NEW_NODE$
      2831**DCL      3213--IMP-PTR  4226<<ASSIGN   4227>>ASSIGN   4229>>ASSIGN   4230>>ASSIGN   4233>>ASSIGN
      4234>>ASSIGN   4236>>IF       4237>>ASSIGN   4239>>ASSIGN   4239>>ASSIGN
NEW_NODE$ IN PROCEDURE BUILD_INTERNAL_NODE
      4383**DCL      4400--IMP-PTR  4769<>CALL     4783>>CALL     4786>>ASSIGN   4788>>ASSIGN   4789>>ASSIGN
      4792>>ASSIGN   4792>>ASSIGN   4794>>ASSIGN
NODE_EXISTS
      2821**DCL      4057<>CALL     4062>>IF       4069>>IF       4077<>CALL     4081>>IF       4200<>CALL
      4211>>IF       4311>>IF
NODE_WRITER$$
      2829**DCL      4197<<ASSIGN   4199>>IF       4200>>CALL
NODE_WRITER_FAILED
      4300**LABEL    4200--CALLALT
OALLOC_FAILED IN PROCEDURE BUILD_INTERNAL_NODE
      4794**LABEL    4769--CALLALT
OCLEAR_LOCATION_FAILED
      4318**LABEL    3995--CALLALT  3999--CALLALT  4148--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE BUILD_INTERNAL_NODE
      4794**LABEL    4795--CALLALT
OCOPY_LOCATION_FAILED
      4318**LABEL    3997--CALLALT  4150--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE BUILD_INTERNAL_NODE
      4794**LABEL    4797--CALLALT
OFREE_FAILED
      4318**LABEL    4168--CALLALT  4313--CALLALT
OFREE_FAILED IN PROCEDURE BUILD_INTERNAL_NODE
      4794**LABEL    4757--CALLALT
PARENT$NODE.COUNT#
      3389**DCL      4240<<ASSIGN   4240>>ASSIGN
PARENT$NODE.HEAD$
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:129  
      3389**DCL      4237<<ASSIGN
PARENT$NODE.TAIL$
      3389**DCL      4229>>ASSIGN   4230<<ASSIGN
PARENT_NODE$
      2832**DCL      3306--IMP-PTR  4225<<ASSIGN   4229>>ASSIGN   4230>>ASSIGN   4237>>ASSIGN   4240>>ASSIGN
      4240>>ASSIGN
PARENT_NODE$ IN PROCEDURE BUILD_INTERNAL_NODE
      4384**DCL      4493--IMP-PTR
PASSED$SPEC.LENGTH#
      3105**DCL      3107--IMP-SIZ
PASSED_SPEC$
      2827**DCL      3097--IMP-PTR
PFLUSH_FAILED
      4300**LABEL    4145--CALLALT
PORT
      2860**DCL      4057<>CALL     4145<>CALL     4200<>CALL     4204<>CALL
PORT.CURRENT
      2913**DCL      4148<>CALL     4150<>CALL     4795<>CALL     4797<>CALL
PORT.CURRENT.EOF
      2929**DCL      4088>>IF       4107>>IF
PORT.CURRENT.KEY.REP#
      2927**DCL      4119>>IF
PORT.CURRENT.KEY.V$
      2927**DCL      4119>>ASSIGN   4119--ASSIGN
PORT.DCB#
      2887**DCL      4050>>IF       4061>>IF       4081>>IF       4211>>IF       4270>>ASSIGN   4311>>IF
PORT.EXIST#
      2886**DCL      3981>>IF       3982<>CALL     4044>>IF
PORT.FILE_KEY.REP#
      2901**DCL      4291>>IF
PORT.FILE_KEY.V$
      2901**DCL      4291>>ASSIGN   4291--ASSIGN
PORT.LEVEL.DATA$
      2947**DCL      4167>>IF       4168>>CALL     4168>>CALL     4170<<ASSIGN   4756>>IF       4757>>CALL
      4757>>CALL     4759<<ASSIGN
PORT.LEVEL.DATA_MODIFIED
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:130  
      2947**DCL      4136>>IF       4156<<ASSIGN   4185<<ASSIGN
PORT.LEVEL.INTERNAL$
      2947**DCL      4067>>IF       4070>>IF       4083>>ASSIGN   4172<<ASSIGN   4225>>ASSIGN   4226>>ASSIGN
      4278>>ASSIGN   4311>>IF       4313>>CALL     4316<<ASSIGN   4794<<ASSIGN
PORT.LEVEL.KEY_TYPE#
      2931**DCL      4786>>ASSIGN
PORT.LEVEL.ORG#
      2931**DCL      4050>>IF       4062>>IF       4088>>IF
PORT.LEVEL.SPEC
      2943**DCL      4165<<ASSIGN   4754<<ASSIGN
PORT.LEVEL.SPEC.REP#
      2945**DCL      4164>>IF       4753>>IF
PORT.LEVEL.SPEC.V$
      2945**DCL      4164>>CALL     4164>>CALL     4753>>CALL     4753>>CALL
PORT.LEVEL.SPEC_MODIFIED
      2947**DCL      4136>>IF       4155<<ASSIGN   4187<<ASSIGN
PORT.LEVEL.SPEC_TYPE#
      2931**DCL      4195>>IF       4196<>CALL     4197>>ASSIGN
PORT.POSITION_PROTECT
      2887**DCL      3976>>ASSIGN   3989>>IF       3991<<ASSIGN   4244<<ASSIGN   4305<<ASSIGN   4318<<ASSIGN
PORT.STRUCTURE$
      2888**DCL      3984>>ASSIGN
PORT$SPEC.LENGTH#
      3082**DCL      3084--IMP-SIZ
PORT_BUSY_FAILURE
      4257**LABEL    3990--GOTO
PORT_KEY$
      2825**DCL      4119<<ASSIGN   4119<<ASSIGN   4133>>IF       4133>>IF       4291<<ASSIGN   4291<<ASSIGN
      4294>>CALL     4294>>CALL
PORT_SPEC$
      2826**DCL      3074--IMP-PTR
PREAD_FAILED
      4296**LABEL    4057--CALLALT
PWRITE_FAILED
      4300**LABEL    4204--CALLALT
REPOSITION_PORT
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:131  
      2822**DCL      4047<<ASSIGN   4095<<ASSIGN   4108<<ASSIGN   4135<<ASSIGN   4142>>IF
SAVE_ACCESSOR_PRIV
      2835**DCL      4054<<ASSIGN   4059>>ASSIGN   4300>>ASSIGN
SAVE_POSITION_PROTECT
      2813**DCL      3976<<ASSIGN   4244>>ASSIGN   4305>>ASSIGN   4318>>ASSIGN
SPEC
      2630**DCL       121--PROC     3980<>CALL     4010--IF       4186--IF       4200<>CALL     4204<>CALL
STREAM
      2496**DCL       121--PROC     3980<>CALL     4041--IF       4077<>CALL     4246<>CALL
STREAM.CURRENT
      2547**DCL      3995<>CALL     3997<>CALL     4150<>CALL     4797<>CALL
STREAM.CURRENT.KEY.REP#
      2561**DCL      4130>>IF       4779>>IF
STREAM.CURRENT.KEY.V$
      2561**DCL      4130>>ASSIGN   4130--ASSIGN   4779>>ASSIGN   4779--ASSIGN
STREAM.LAST_OP#
      2522**DCL      3992<<ASSIGN   4209<<ASSIGN
STREAM.NEXT
      2575**DCL      3999<>CALL
STREAM.PORT$
      2522**DCL      2860--IMP-PTR  3976>>ASSIGN   3981>>IF       3982>>CALL     3984>>ASSIGN   3989>>IF
      3991>>ASSIGN   4050>>IF       4050>>IF       4057>>CALL     4061>>IF       4062>>IF       4067>>IF
      4070>>IF       4081>>IF       4083>>ASSIGN   4088>>IF       4088>>IF       4107>>IF       4119>>IF
      4119>>ASSIGN   4119>>ASSIGN   4136>>IF       4136>>IF       4145>>CALL     4148>>CALL     4150>>CALL
      4155>>ASSIGN   4156>>ASSIGN   4164>>IF       4164>>CALL     4164>>CALL     4165>>ASSIGN   4167>>IF
      4168>>CALL     4168>>CALL     4170>>ASSIGN   4172>>ASSIGN   4185>>ASSIGN   4187>>ASSIGN   4195>>IF
      4196>>CALL     4197>>ASSIGN   4200>>CALL     4204>>CALL     4211>>IF       4225>>ASSIGN   4226>>ASSIGN
      4244>>ASSIGN   4270>>ASSIGN   4278>>ASSIGN   4291>>IF       4291>>ASSIGN   4291>>ASSIGN   4305>>ASSIGN
      4311>>IF       4311>>IF       4313>>CALL     4316>>ASSIGN   4318>>ASSIGN   4753>>IF       4753>>CALL
      4753>>CALL     4754>>ASSIGN   4756>>IF       4757>>CALL     4757>>CALL     4759>>ASSIGN   4786>>ASSIGN
      4794>>ASSIGN   4795>>CALL     4797>>CALL
STREAM.PROTECT
      2522**DCL      4009>>ASSIGN
STREAM$KEY.BYTES IN PROCEDURE BUILD_INTERNAL_NODE
      4738**DCL      4783<>CALL
STREAM$KEY.LENGTH# IN PROCEDURE BUILD_INTERNAL_NODE
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:132  
      4736**DCL      4738--IMP-SIZ  4782>>ASSIGN   4783>>CALL
STREAM_KEY$
      2828**DCL      4130<<ASSIGN   4130<<ASSIGN   4133>>IF       4133>>IF
STREAM_KEY$ IN PROCEDURE BUILD_INTERNAL_NODE
      4387**DCL      4728--IMP-PTR  4779<<ASSIGN   4779<<ASSIGN   4782>>ASSIGN   4783>>CALL     4783>>CALL
STREAM_PROTECT
      2818**DCL      4009<<ASSIGN
STREAM_PROTECT.FLAG
      2819**DCL      4010>>IF       4010>>IF
STRUCTURE$LEVEL.PROTECT IN PROCEDURE BUILD_INTERNAL_NODE
      4717**DCL      4789>>ASSIGN   4789>>ASSIGN
STRUCTURE$LEVEL_NODE.DESC.SPEC.V$ IN PROCEDURE BUILD_INTERNAL_NODE
      4666**DCL      4767>>ASSIGN
STRUCTURE$LEVEL_NODE.FLINK$ IN PROCEDURE BUILD_INTERNAL_NODE
      4613**DCL      4765>>ASSIGN
STRUCTURE$NODE.COUNT#
      3041**DCL      3985>>ASSIGN   4001>>DOINDEX  4154>>DOINDEX
STRUCTURE$NODE.HEAD$
      3041**DCL      4763>>ASSIGN
STRUCTURE_LEVEL$ IN PROCEDURE BUILD_INTERNAL_NODE
      4386**DCL      4689--IMP-PTR  4767<<ASSIGN   4789>>ASSIGN   4789>>ASSIGN
STRUCTURE_LEVEL_NODE$ IN PROCEDURE BUILD_INTERNAL_NODE
      4385**DCL      4587--IMP-PTR  4763<<ASSIGN   4765<<ASSIGN   4765>>ASSIGN   4767>>ASSIGN
STRUCTURE_NODE$
      2817**DCL      2958--IMP-PTR  3984<<ASSIGN   3985>>ASSIGN   4001>>DOINDEX  4154>>DOINDEX  4763>>ASSIGN
SUBST$POINTER.OBJECT.CLASS#
      3968**DCL      4277<<ASSIGN
SUBST$POINTER.V$
      3970**DCL      4278<<ASSIGN
SUBST_FIELD$
      2834**DCL      3891--IMP-PTR  3944--IMP-PTR  4276<<ASSIGN   4277>>ASSIGN   4278>>ASSIGN
VD$BUFFER
      3797**DCL      4168<>CALL     4757<>CALL
VD$BUFFER.LENGTH#
      3823**DCL      3825--IMP-SIZ  4168>>CALL     4757>>CALL
VD$ERR
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:133  
      3838**DCL      4276--ASSIGN   4276--ASSIGN
VD$ERR.DCB#
      3880**DCL      4270<<ASSIGN
VD$FILE_NODE
      3626**DCL      4313<>CALL
VD$FILE_NODE.ACCESS
      3664**DCL      4070>>IF
VD$FILE_NODE.DESC.KEY
      3689**DCL      4278--ASSIGN
VD$FILE_NODE.FLINK$
      3652**DCL      4239<<ASSIGN
VD$TEXTC_REMOTE
      3736**DCL      4164<>CALL     4753<>CALL
VD$TEXTC_REMOTE.LENGTH#
      3765**DCL      3767--IMP-SIZ  4119--ASSIGN   4130--ASSIGN   4164>>CALL     4291--ASSIGN   4753>>CALL
      4779--ASSIGN
VDA$LSAVE_OLD_NODE
      2696**DCL-ENT  4077--CALL
VDA$PFLUSH
      2699**DCL-ENT  4145--CALL
VDA$PREAD
      2697**DCL-ENT  4057--CALL
VDA$PWRITE
      2698**DCL-ENT  4204--CALL
VDG$BUILD_KEY
      2705**DCL-ENT  4783--CALL
VDG$EBREAK_ACKNOWLEDGE
      2710**DCL-ENT  4252--CALL
VDG$ERRMSG
      2706**DCL-ENT  4257--CALL     4262--CALL     4267--CALL     4275--CALL     4294--CALL
VDG$ESCREECH
      2709**DCL-ENT  3982--CALL     3994--CALL     4196--CALL
VDG$MACC_LWRITE
      2707**DCL-ENT  3980--CALL
VDG$MACC_RETURN
      2708**DCL-ENT  4246--CALL
PL6.E3A0      #002=VDA$LWRITE File=VDA$LOWER.:VDA5TSI                            FRI 07/04/97 11:06 Page:134  
VDG$OALLOC
      2704**DCL-ENT  4769--CALL
VDG$OCLEAR_LOCATION
      2703**DCL-ENT  3995--CALL     3999--CALL     4148--CALL     4795--CALL
VDG$OCOPY_LOCATION
      2701**DCL-ENT  3997--CALL     4150--CALL     4797--CALL
VDG$OFREE
      2702**DCL-ENT  4164--CALL     4168--CALL     4313--CALL     4753--CALL     4757--CALL
VD_$$MON_ACC.V#
      2792**DCL      3979>>IF       4245>>IF
VD_6E.ERR_TAIL$
      2745**DCL      3838--IMP-PTR  4270>>ASSIGN   4276>>ASSIGN
VD_6E.HISTORY$
      2726**DCL      3520--IMP-PTR  4041>>IF       4041>>IF       4043>>IF       4044>>IF
VD_6E.INTERRUPT.STATE#
      2745**DCL      3977>>IF
VD_6E.STATS#
      2746**DCL      4222<<ASSIGN   4222>>ASSIGN
VD_ACCESSOR_PRIV
      2795**DCL      4054>>ASSIGN   4055<<ASSIGN   4059<<ASSIGN   4300<<ASSIGN
VD_ACCESSOR_PRIV.ACCESS
      2807**DCL      4070>>IF
VD_NODE_WRITERS$$
      2749**DCL      4197>>ASSIGN
WRITE_LEVEL
      2816**DCL      3985<<ASSIGN   4003>>IF       4004<<ASSIGN   4009>>ASSIGN   4050>>IF       4062>>IF
      4067>>IF       4070>>IF       4077<>CALL     4083>>ASSIGN   4088>>IF       4106>>DOINDEX  4185>>ASSIGN
      4187>>ASSIGN   4195>>IF       4196>>CALL     4197>>ASSIGN   4204<>CALL     4225>>ASSIGN   4226>>ASSIGN
      4278>>ASSIGN   4294<>CALL     4311>>IF       4313>>CALL     4316>>ASSIGN   4753>>IF       4753>>CALL
      4753>>CALL     4754>>ASSIGN   4756>>IF       4757>>CALL     4757>>CALL     4759>>ASSIGN   4764>>DOINDEX
      4779>>IF       4779>>ASSIGN   4779>>ASSIGN   4786>>ASSIGN   4794>>ASSIGN

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:135  
     1065        1        /*T***********************************************************/
     1066        2        /*T*                                                         */
     1067        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1068        4        /*T*                                                         */
     1069        5        /*T***********************************************************/
     1070        6
     1071        7        /*D* NAME: VDA$LDELETE
     1072        8            PARAMETERS:
     1073        9                STREAM - VD$STREAM to use.  This stream must be open to
     1074       10                    an internal or external file.
     1075       11                RANGE - Optional VD$RANGE specifying the range of nodes to delete.
     1076       12                    This is an inclusive range:  RANGE.START specifies the first
     1077       13                    node to delete and RANGE.ENDD specifies the last node to
     1078       14                    delete.
     1079       15                    RANGE must be one of the following:
     1080       16                    Omitted - We'll delete the lowest node (usually record-level)
     1081       17                        that the stream is currently positioned to.
     1082       18                    BOF, EOF, or specific nodes, specified as follows:
     1083       19                    If .START or .ENDD = %CLEAR, or have only one key which
     1084       20                        equals VD_KEY_NUMERIC_BOF or VD_KEY_STRING_BOF --
     1085       21                        this specifies BOF.
     1086       22                    If .START.EOF or .ENDD.EOF is set, this specifies EOF;
     1087       23                    Else .START.KEY or .ENDD.KEY (%(LVL_LOWER-1)) thru (n) must
     1088       24                        be given:  these are keys for levels %LVL_LOWER thru (n+1)
     1089       25                        of the file.
     1090       26
     1091       27                    Basic rule for RANGE:  we only allow deletion within one
     1092       28                    parent node, of one or more of that parent's kids -- you
     1093       29                    can't delete from some kid of node "A" thru some kid of
     1094       30                    node "B".
     1095       31                    Therefore:
     1096       32                        If RANGE.START = %CLEAR or has only VD_KEY_x_BOF, then
     1097       33                            .ENDD must be either %CLEAR, .ENDD.EOF, or exactly
     1098       34                            one .ENDD.KEY given.
     1099       35                        If RANGE.ENDD.EOF is set, then .START must be either
     1100       36                            %CLEAR, .START.EOF, or exactly one .START.KEY given.
     1101       37                        Of course, if .START.EOF is set then the only valid
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:136  
     1102       38                            .ENDD is .ENDD.EOF; if .ENDD = %CLEAR, then the
     1103       39                            only valid .START is %CLEAR or just VD_KEY_x_BOF.
     1104       40                            In either case, nothing will be deleted.
     1105       41                        If neither .START nor .END specify BOF or EOF, then
     1106       42                            the number of keys in .START.KEY and .ENDD.KEY
     1107       43                            must be equal, and all .START.KEYs except the last
     1108       44                            must equal their counterpart in .ENDD.KEY.
     1109       45                            If the file has more than two levels, deletion will
     1110       46                            be at the lowest level given; for example, if the
     1111       47                            file has 5 levels but keys are only given for levels
     1112       48                            1 and 2, we will delete nodes at levels 2 thru 5:
     1113       49                            the specified node(s) at level 2, and all children
     1114       50                            of deleted level 2 nodes.
     1115       51            INPUT:
     1116       52                VD_ACCESSOR_PRIV - If we're deleting from an internal file and
     1117       53                    we're not doing the deletion on behalf of the user, but
     1118       54                    rather are just updating an internally-maintained
     1119       55                    file (e.g., Scratch files, etc.), then the
     1120       56                    VD_ACCESSOR_PRIV's %NAC_DELETE bit must be set.
     1121       57            SCRATCH:
     1122       58                VD_STATIC_TEMP
     1123       59            OUTPUT:
     1124       60                The stream and port will end up positioned to the
     1125       61                    node following the last node deleted (which could be
     1126       62                    eof).
     1127       63                The Presenter will be told of the deletions.
     1128       64                $RECORDS_DELETED will be set to the number of nodes deleted at the
     1129       65                    lowest level at which a key was given (highest level of
     1130       66                    deleted nodes).
     1131       67        *N**N*  If the History file is enabled, the node(s) being deleted, if any,
     1132       68        *N**N*      will be appended to the History file.
     1133       69            DESCRIPTION:
     1134       70        *N**N*  If History is enabled:
     1135       71        *N**N*      Walk the nodes of the file tree which are to be deleted,
     1136       72        *N**N*          VDA$PREADing each into the Port registers and
     1137       73        *N**N*          writing it to the end of the History file.
     1138       74        *N**N*  Else:
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:137  
     1139       75                    If the port contains a node which has been modified,
     1140       76                        call VDA$PFLUSH.
     1141       77                If this is a predefined file:
     1142       78                    Loop thru the nodes to be deleted (at just the top level of
     1143       79                        the nodes to be deleted), VDA$PREADing each node and
     1144       80                        calling the appropriate node writer.  This will delete
     1145       81                        the node and all its children, and will free the Port
     1146       82                        Spec and/or Data components.
     1147       83                        The node writer may have side-effects (closing windows),
     1148       84                        and may reject the deletion.
     1149       85                    Leave the Port positioned to the node following the last node
     1150       86                        deleted.
     1151       87                Else (that is, if this isn't a predefined file):
     1152       88                    Call VDA$PDELETE to delete the nodes from the file.
     1153       89                        Leave the Port positioned to the node following the
     1154       90                        last node deleted.
     1155       91        */
     1156       92
     1157       93        VDA$LDELETE: PROC (STREAM, RANGE) ALTRET;
     1158       94
     1159       95
     1160       96        %INCLUDE VD_MACROS_M;
     1161     2311        %INCLUDE VD_PERR_C;
     1162     2459
     1163     2460
     1164     2461        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     1165     2567        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     1166     2636
     1167     2637
     1168     2638
     1169     2639    1   DCL VDA$PREAD           ENTRY (6) ALTRET;
     1170     2640    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
     1171     2641    1   DCL VDA$PDELETE         ENTRY (4) ALTRET;
     1172     2642    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
     1173     2643    1   DCL VDP$RDELETE         ENTRY (3) ALTRET;
     1174     2644    1   DCL VDG$COMPARE_PTRS_W_RANGE ENTRY (3) ALTRET;
     1175     2645    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:138  
     1176     2646    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1177     2647    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1178     2648    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1179     2649    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1180     2650    1   DCL VDG$MACC_LDELETE    ENTRY (2);
     1181     2651    1   DCL VDG$MACC_RETURN     ENTRY (1);
     1182     2652    1   DCL VDG$ESCREECH        ENTRY (3);
     1183     2653    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
     1184     2654
     1185     2655
     1186     2656        %VD_6E (STCLASS=SYMREF);
     1187     2692    1   DCL VD_NODE_WRITERS$$ (0:0) EPTR SYMREF;
     1188     2693        %VD$LOCATION (NAME=VD_LOC_$RECORDS_DELETED, STCLASS=SYMREF);
     1189     2721        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1190     2766    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
     1191     2767            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=STATIC);
     1192     2781        %VD$KEY_NUMBER (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     1193     2796
     1194     2797
     1195     2798    1   DCL ZERO_SPEC (0:1) SBIN CONSTANT INIT(0*0);
     1196     2799        %VD_BUFFER (NAME=ZERO_BUFFER, STCLASS=CONSTANT, IBYTES="''");
     1197     2859
     1198     2860
     1199     2861
     1200     2862    1   DCL STRUCTURE_NODE$ PTR;
     1201     2863        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
     1202     2932    1   DCL DEL_LEVEL SBIN;
     1203     2933    1   DCL DEL_LEVEL_COUNT SBIN;
     1204     2934    1   DCL INDX SBIN;
     1205     2935    1   DCL LEVEL SBIN;
     1206     2936    1   DCL DEL_START_KEY$ PTR;
     1207     2937    1   DCL DEL_END_KEY$ PTR;
     1208     2938    1   DCL FLUSH_PORT BIT(1) ALIGNED;
     1209     2939    1   DCL HISTORY_ENABLED BIT(1) ALIGNED;
     1210     2940        %VD$LOCATION_PTRS (NAME=LOCATION_PTRS, STCLASS=AUTO);
     1211     2955    1   DCL NODE_WRITER$$ EPTR;
     1212     2956    1   DCL PREDEF_COUNT SBIN;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:139  
     1213     2957        %VD$RANGE (NAME=PREDEF_RANGE, STCLASS=AUTO);
     1214     3026    1   DCL VD_ERR$ PTR;
     1215     3027    1   DCL SUBST_FIELD$ PTR;
     1216     3028
     1217     3029
     1218     3030        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
     1219     3128        %VD$FILE_NODE (NAME=STRUCTURE$NODE, STCLASS="BASED(STRUCTURE_NODE$)");
     1220     3221        %VD$STREAM (NAME=HISTORY$STREAM, STCLASS="BASED(VD_6E.HISTORY$)");
     1221     3327        %VD$STREAM (NAME=EQUALS$STREAM, STCLASS="BASED(VD_6E.EQUALS$)");
     1222     3433        %VD$TEXTC (NAME=DEL$START_KEY, STCLASS="BASED(DEL_START_KEY$)");
     1223     3456        %VD$TEXTC (NAME=DEL$END_KEY, STCLASS="BASED(DEL_END_KEY$)",
     1224     3457            ALIGNMENT=CALIGNED);
     1225     3480        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1226     3533        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     1227     3578        %VD$TEXTC_REMOTE;
     1228     3639        %VD$BUFFER;
     1229     3697        %VD$FILE_NODE;
     1230     3790        %VD$PORT;
     1231     3888
     1232     3889
     1233     3890
     1234     3891    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;
     1235     3892    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);
     1236     3893    2              ALTRETURN;
     1237     3894    2              END;
     1238     3895    1           IF VD_$$MON_ACC.V# > 0 THEN
     1239     3896    1              CALL VDG$MACC_LDELETE (STREAM, RANGE);
     1240     3897    1           IF PORT.EXIST# = 0 THEN
     1241     3898    1              CALL VDG$ESCREECH (PORT.EXIST#);
     1242     3899    1           STRUCTURE_NODE$ = PORT.STRUCTURE$;
     1243     3900
     1244     3901    1           IF ADDR(RANGE) = ADDR(NIL) THEN
     1245     3902    2   NO_RANGE_GIVEN: DO;
     1246     3903    2              IF STREAM.CURRENT.EOF THEN
     1247     3904    2                 CALL VDG$ESCREECH;
     1248     3905    2              DEL_RANGE.START = STREAM.CURRENT;
     1249     3906    2              DEL_RANGE.ENDD = STREAM.CURRENT;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:140  
     1250     3907    2              DEL_LEVEL = %(LVL_LOWER-1);
     1251     3908    3              DO WHILE (DEL_LEVEL < STRUCTURE$NODE.COUNT# - 1)
     1252     3909    3                AND (DEL_RANGE.START.KEY (DEL_LEVEL) ~= %CLEAR);
     1253     3910    3                 DEL_LEVEL = DEL_LEVEL + 1;
     1254     3911    3                 END;
     1255     3912    2              END NO_RANGE_GIVEN;
     1256     3913    1           ELSE
     1257     3914    2   CHECK_PASSED_RANGE: DO;
     1258     3915    2              DEL_RANGE = RANGE;
     1259     3916    2              IF DEL_RANGE.START = %CLEAR
     1260     3917    2                OR DEL_RANGE.ENDD = %CLEAR
     1261     3918    2                OR DEL_RANGE.START.EOF
     1262     3919    3                OR DEL_RANGE.ENDD.EOF THEN DO;
     1263     3920    3                 IF DEL_RANGE.START = %CLEAR THEN
     1264     3921    3                    IF NOT (DEL_RANGE.ENDD = %CLEAR
     1265     3922    3                      OR DEL_RANGE.ENDD.EOF
     1266     3923    3                      OR DEL_RANGE.ENDD.KEY (1) = %CLEAR) THEN
     1267     3924    3                       GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1268     3925    3                 IF DEL_RANGE.ENDD.EOF THEN
     1269     3926    3                    IF NOT (DEL_RANGE.START = %CLEAR
     1270     3927    3                      OR DEL_RANGE.START.EOF
     1271     3928    3                      OR DEL_RANGE.START.KEY (1) = %CLEAR) THEN
     1272     3929    3                       GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1273     3930    3                 IF DEL_RANGE.START.EOF
     1274     3931    3                   AND NOT DEL_RANGE.ENDD.EOF THEN
     1275     3932    3                    GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1276     3933    3                 IF DEL_RANGE.ENDD = %CLEAR THEN
     1277     3934    3                    IF NOT (DEL_RANGE.START = %CLEAR
     1278     3935    3                      OR (DEL_RANGE.START.KEY (1) = %CLEAR
     1279     3936    3                      AND (DEL_RANGE.START.KEY (0) = VD_KEY_NUMERIC_BOF
     1280     3937    3   /* OR DEL_RANGE.START.KEY (0) = VD_KEY_STRING_BOF */))) THEN
     1281     3938    3                       GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1282     3939    3                 DEL_LEVEL = %LVL_LOWER;
     1283     3940    3                 END;
     1284     3941    3              ELSE DO;
     1285     3942                      /*
     1286     3943                      *   Verify that kids of only one parent are being deleted.
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:141  
     1287     3944                      */
     1288     3945    3                 DEL_LEVEL = STRUCTURE$NODE.COUNT# - 1;    /* Assumption */
     1289     3946    3   CHECK_ONE_PARENT:
     1290     3947    4                 DO INDX = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 2;
     1291     3948    5                    IF DEL_RANGE.START.KEY (INDX /* -1 +1 */) = %CLEAR THEN DO;
     1292     3949    5                       DEL_LEVEL = INDX;
     1293     3950    5                       EXIT CHECK_ONE_PARENT;
     1294     3951    5                       END;
     1295     3952                         %GETKEY (KEY=DEL_RANGE.START.KEY, INDX=INDX-1,
     1296     3953                         PTR=DEL_START_KEY$);
     1297     3963                         %GETKEY (KEY=DEL_RANGE.ENDD.KEY, INDX=INDX-1,
     1298     3964                         PTR=DEL_END_KEY$);
     1299     3974    4                    IF DEL_RANGE.ENDD.KEY (INDX - 1) = %CLEAR
     1300     3975    4                      OR DEL$START_KEY.BYTES ~= DEL$END_KEY.BYTES THEN
     1301     3976    4                       GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1302     3977    4                    END CHECK_ONE_PARENT;
     1303     3978    3                 END;
     1304     3979    2              END CHECK_PASSED_RANGE;
     1305     3980
     1306     3981    1           IF PORT.LEVEL.ORG# (DEL_LEVEL) = %ORG_CONSEC
     1307     3982    1             AND PORT.DCB# ~= 0 THEN
     1308     3983    1              GOTO CANT_INSERT_DELETE_REC_FAILURE;
     1309     3984    1           IF STREAM.PROTECT (DEL_LEVEL) ~= %CLEAR THEN
     1310     3985    1              GOTO CANT_DELETE_FAILURE;
     1311     3986
     1312     3987    1           HISTORY_ENABLED = %FALSE;
     1313     3988    1           IF ADDR(STREAM) ~= VD_6E.HISTORY$
     1314     3989    1             AND VD_6E.HISTORY$ ~= ADDR(NIL) THEN
     1315     3990    1              IF HISTORY$STREAM.PORT$ ~= ADDR(NIL) THEN
     1316     3991    1                 IF HISTORY$STREAM.PORT$ -> PORT.EXIST# ~= 0 THEN
     1317     3992    1                    HISTORY_ENABLED = %TRUE;
     1318     3993
     1319     3994    1           IF HISTORY_ENABLED THEN
     1320     3995    2   WRITE_HISTORY: DO;
     1321     3996                   /*N*
     1322     3997                   *N*  Walk the deleted nodes with VDA$PREADs,
     1323     3998                   *N*      calling VDA$LSAVE_OLD_NODE on each.
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:142  
     1324     3999                   *N*/
     1325     4000    2              ;
     1326     4001    2              END WRITE_HISTORY;
     1327     4002    1           ELSE
     1328     4003    2   NO_HISTORY: DO;
     1329     4004    2              FLUSH_PORT = %FALSE;
     1330     4005    2   CHECK_FOR_FLUSH:
     1331     4006    3              DO LEVEL = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 1;
     1332     4007    3                 IF PORT.LEVEL.SPEC_MODIFIED (LEVEL)
     1333     4008    4                   OR PORT.LEVEL.DATA_MODIFIED (LEVEL) THEN DO;
     1334     4009    4                    FLUSH_PORT = %TRUE;
     1335     4010    4                    EXIT CHECK_FOR_FLUSH;
     1336     4011    4                    END;
     1337     4012    3                 END CHECK_FOR_FLUSH;
     1338     4013
     1339     4014    3              IF FLUSH_PORT THEN DO;
     1340     4015    3                 CALL VDA$PFLUSH (PORT, %TO_PRESENTER)
     1341     4016    3                   ALTRET (PFLUSH_FAILED);
     1342     4017    3                 END;
     1343     4018    2              END NO_HISTORY;
     1344     4019
     1345     4020
     1346     4021    1           IF PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL) ~= 0
     1347     4022    1             AND PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL) ~= %SPT_EXT_RECORD THEN
     1348     4023    2   PREDEFINED_FILE: DO;
     1349     4024    2              DEL_LEVEL_COUNT = 0;
     1350     4025    2              LOCATION_PTRS = %CLEAR;
     1351     4026
     1352     4027    2   WHILE_WITHIN_RANGE:
     1353     4028    3              DO WHILE %TRUE;
     1354     4029                      /*
     1355     4030                      * On each pass thru the loop, we PREAD using the
     1356     4031                      *     start location.  We can get away with this
     1357     4032                      *     'cause we delete the node we find each time,
     1358     4033                      *     so the next PREAD, when searching for the first
     1359     4034                      *     node after the start location, will always find
     1360     4035                      *     the next node.
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:143  
     1361     4036                      */
     1362     4037    3                 CALL VDA$PREAD (PORT, DEL_RANGE.START, 0, %TRUE)
     1363     4038    3                   ALTRET (PREAD_FAILED);
     1364     4039    3                 IF PORT.CURRENT.EOF THEN
     1365     4040    3                    EXIT WHILE_WITHIN_RANGE;   /* Not within range */
     1366     4041    4                 DO INDX = %(LVL_LOWER-1) TO (DEL_LEVEL - 1);
     1367     4042                         %GETKEY (KEY=PORT.CURRENT.KEY, INDX=INDX,
     1368     4043                         PTR="LOCATION_PTRS.KEY$ (INDX)");
     1369     4053    4                    END;
     1370     4054    3                 LOCATION_PTRS.COUNT# = DEL_LEVEL;
     1371     4055                      /* VDG$COMPARE_PTRS_W_RANGE ignores EOF, so test it here */
     1372     4056    3                 IF DEL_RANGE.START.EOF THEN
     1373     4057    3                    EXIT WHILE_WITHIN_RANGE;   /* Not within range */
     1374     4058    3                 IF NOT DEL_RANGE.ENDD.EOF /* E verything's before EOF */
     1375     4059    4                 THEN DO;
     1376     4060    4                    CALL VDG$COMPARE_PTRS_W_RANGE (LOCATION_PTRS, DEL_RANGE)
     1377     4061    4                      ALTRET (NOT_WITHIN_RANGE);
     1378     4062    4                    END;
     1379     4063
     1380     4064    4                 IF PORT.DCB# = 0 THEN DO;
     1381     4065    4                    IF NOT (PORT.LEVEL.INTERNAL$ (DEL_LEVEL) ->
     1382     4066    4                      VD$FILE_NODE.ACCESS (%NAC_DELETE)
     1383     4067    4                      OR VD_ACCESSOR_PRIV.ACCESS (%NAC_DELETE)) THEN
     1384     4068    4                       GOTO CANT_DELETE_NODE_FAILURE;
     1385     4069    4                    END;
     1386     4070    3                 IF PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL) >= %MX_SPEC_TYPES THEN
     1387     4071    3                    CALL VDG$ESCREECH (PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL));
     1388     4072    3                 NODE_WRITER$$ =
     1389     4073    3                   VD_NODE_WRITERS$$ (PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL));
     1390     4074    4                 IF NODE_WRITER$$ ~= ENTADDR(NIL) THEN DO;
     1391     4075                            /*
     1392     4076                            *  Pass 0-length Spec and Data args to node writer;
     1393     4077                            *      deleting the contents of these components
     1394     4078                            *      will delete the node when appropriate.
     1395     4079                            */
     1396     4080    4                    CALL NODE_WRITER$$ (PORT, ZERO_SPEC, ZERO_BUFFER,
     1397     4081    4                      %TRUE)     /* %TRUE = node exists */
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:144  
     1398     4082    4                      ALTRET (NODE_WRITER_FAILED);
     1399     4083    4                    PORT.LAST_OP# = %ACCOP_DELETE;
     1400     4084    4                    DEL_LEVEL_COUNT = DEL_LEVEL_COUNT + 1;
     1401     4085    4                    END;
     1402     4086    4                 ELSE DO;
     1403     4087    4                    PREDEF_RANGE.START = PORT.CURRENT;
     1404     4088    4                    PREDEF_RANGE.ENDD = PORT.CURRENT;
     1405     4089    4                    CALL VDA$PDELETE (PORT, PREDEF_RANGE, DEL_LEVEL,
     1406     4090    4                      PREDEF_COUNT)
     1407     4091    5                    WHENALTRETURN DO;
     1408     4092    5                       CALL CLEAN_UP_AFTER_DELETE
     1409     4093    5                         ALTRET (CLEAN_UP_AFTER_DELETE_FAILED);
     1410     4094    5                       END;
     1411     4095    4                    DEL_LEVEL_COUNT = DEL_LEVEL_COUNT + PREDEF_COUNT;
     1412     4096    4                    END;
     1413     4097    3                 END WHILE_WITHIN_RANGE;
     1414     4098    2              END PREDEFINED_FILE;
     1415     4099    2           ELSE DO;
     1416     4100    2              CALL VDA$PDELETE (PORT, DEL_RANGE, DEL_LEVEL, DEL_LEVEL_COUNT);
     1417     4101    2              END;
     1418     4102    1   NOT_WITHIN_RANGE:;
     1419     4103
     1420     4104    1           CALL CLEAN_UP_AFTER_DELETE
     1421     4105    1             ALTRET (CLEAN_UP_AFTER_DELETE_FAILED);
     1422     4106
     1423     4107
     1424     4108    1           IF VD_$$MON_ACC.V# > 0 THEN
     1425     4109    1              CALL VDG$MACC_RETURN (STREAM);
     1426     4110    1           RETURN;
     1427     4111
     1428     4112
     1429     4113
     1430     4114    1   CANT_INSERT_DELETE_REC_FAILURE:
     1431     4115    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     1432     4116    1             ALTRET (OALLOC_FAILED);
     1433     4117    1           VD$ERR.ERR.CODE# = %E$CANT_INSERT_DELETE_RECORDS;
     1434     4118    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:145  
     1435     4119    1           ALTRETURN;
     1436     4120
     1437     4121
     1438     4122    1   CANT_DEL_ACROSS_NODES_FAILURE:
     1439     4123    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     1440     4124    1             ALTRET (OALLOC_FAILED);
     1441     4125    1           VD$ERR.ERR.CODE# = %E$CANT_DELETE_ACROSS_NODES;
     1442     4126    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     1443     4127    1           ALTRETURN;
     1444     4128
     1445     4129
     1446     4130    1   CANT_DELETE_FAILURE:
     1447     4131    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     1448     4132    1             ALTRET (OALLOC_FAILED);
     1449     4133    1           VD$ERR.ERR.CODE# = %E$CANT_DELETE;
     1450     4134    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     1451     4135    1           VD$ERR.DCB# = PORT.DCB#;
     1452     4136    1           ALTRETURN;
     1453     4137
     1454     4138
     1455     4139    1   CANT_DELETE_NODE_FAILURE:
     1456     4140    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)
     1457     4141    1             ALTRET (OALLOC_FAILED);
     1458     4142    1           VD$ERR.ERR.CODE# = %E$CANT_DELETE_NODE;
     1459     4143    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;
     1460     4144    1           SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));
     1461     4145    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;
     1462     4146    1           SUBST$POINTER.V$ (0) = ADDR(PORT.LEVEL.INTERNAL$ (DEL_LEVEL) ->
     1463     4147    1             VD$FILE_NODE.DESC.KEY);
     1464     4148    1           CALL CLEAN_UP_AFTER_DELETE
     1465     4149    1             ALTRET (CLEAN_UP_AFTER_DELETE_FAILED);
     1466     4150    1           ALTRETURN;
     1467     4151
     1468     4152
     1469     4153    1   NODE_WRITER_FAILED:
     1470     4154    1           CALL CLEAN_UP_AFTER_DELETE
     1471     4155    1             ALTRET (CLEAN_UP_AFTER_DELETE_FAILED);
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:146  
     1472     4156    1           ALTRETURN;
     1473     4157
     1474     4158
     1475     4159    1   PFLUSH_FAILED: ;
     1476     4160    1   PREAD_FAILED: ;
     1477     4161    1   RDELETE_FAILED: ;
     1478     4162    1   OALLOC_FAILED: ;
     1479     4163    1   CLEAN_UP_AFTER_DELETE_FAILED: ;
     1480     4164    1           ALTRETURN;
     1481     4165
     1482     4166        %BOX (TITLE=CLEAN_UP_AFTER_DELETE);

              4178    1   /***************************************************************************
              4180    1    *                                                                         *
              4184    1            *                           CLEAN_UP_AFTER_DELETE                         *
              4186    1            *                                                                         *
              4188    1           ***************************************************************************/

     1483     4192
     1484     4193        /*I* NAME: CLEAN_UP_AFTER_DELETE
     1485     4194            PARAMETERS:
     1486     4195                None.
     1487     4196            INPUT:
     1488     4197                STREAM, PORT, DEL_RANGE - The stream and port to use, and
     1489     4198                    the range of nodes to delete.
     1490     4199                DEL_LEVEL_COUNT - # of nodes successfully deleted.
     1491     4200            OUTPUT:
     1492     4201                STREAM.CURRENT will contain a copy of PORT.CURRENT.
     1493     4202                The predefined name $RECORDS_DELETED will be updated.
     1494     4203                The Presenter will be told of the deletions.
     1495     4204            DESCRIPTION:
     1496     4205                Do all that stuff.  (See OUTPUT.)
     1497     4206        */
     1498     4207
     1499     4208    1   CLEAN_UP_AFTER_DELETE: PROC ALTRET;
     1500     4209
     1501     4210
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:147  
     1502     4211    2   DCL FAILURE BIT(1) ALIGNED;
     1503     4212    2   DCL 1 SAVE_ACCESSOR_PRIV ALIGNED,
     1504     4213            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=AUTO);
     1505     4227    2   DCL RECORDS_DELETED$ PTR;
     1506     4228
     1507     4229
     1508     4230        %VD$NUMBER (NAME=RECORDS$DELETED, STCLASS="BASED(RECORDS_DELETED$)");
     1509     4275
     1510     4276
     1511     4277
     1512     4278    2           FAILURE = %FALSE;
     1513     4279    2           CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)
     1514     4280    2             ALTRET (OCLEAR_LOCATION_FAILED);
     1515     4281    2           CALL VDG$OCOPY_LOCATION (PORT.CURRENT, STREAM.CURRENT)
     1516     4282    2             ALTRET (OCOPY_LOCATION_FAILED);
     1517     4283
     1518     4284                /*
     1519     4285                *   Set the value of $RECORDS_DELETED.
     1520     4286                */
     1521     4287    2           SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;
     1522     4288    2           VD_ACCESSOR_PRIV = %NAC_ALL_BITS;
     1523     4289    2           CALL VDG$OALLOC (%CLS_NUMBER, RECORDS_DELETED$)
     1524     4290    2             ALTRET (OALLOC_FAILED);
     1525     4291    2           RECORDS$DELETED.V# = DEL_LEVEL_COUNT;
     1526     4292    2           CALL VDA$LWRITE (EQUALS$STREAM, VD_LOC_$RECORDS_DELETED, ,
     1527     4293    2             RECORDS$DELETED)
     1528     4294    3           WHENALTRETURN DO;
     1529     4295    3              FAILURE = %TRUE;
     1530     4296    3              CALL VDG$OFREE (RECORDS$DELETED)
     1531     4297    3                ALTRET (OFREE_FAILED);
     1532     4298    3              END;
     1533     4299    2           CALL VDA$PFLUSH (EQUALS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)
     1534     4300    3           WHENALTRETURN DO;
     1535     4301    3              FAILURE = %TRUE;
     1536     4302    3              END;
     1537     4303    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;
     1538     4304
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:148  
     1539     4305                /*
     1540     4306                *   Tell the Presenter about the deletion.
     1541     4307                */
     1542     4308    2           CALL VDP$RDELETE (PORT.FILE_KEY, DEL_RANGE)
     1543     4309    2             ALTRET (RDELETE_FAILED);
     1544     4310
     1545     4311    2           IF FAILURE THEN
     1546     4312    2              ALTRETURN;
     1547     4313    2           RETURN;
     1548     4314
     1549     4315
     1550     4316
     1551     4317    2   OCLEAR_LOCATION_FAILED: ;
     1552     4318    2   OCOPY_LOCATION_FAILED: ;
     1553     4319    2   OALLOC_FAILED: ;
     1554     4320    2   OFREE_FAILED: ;
     1555     4321    2   RDELETE_FAILED: ;
     1556     4322    2           ALTRETURN;
     1557     4323
     1558     4324    2   END CLEAN_UP_AFTER_DELETE;
     1559     4325
     1560     4326
     1561     4327    1   END VDA$LDELETE;
     1562     4328        %EOD;

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:149  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$LDELETE.

   Procedure VDA$LDELETE requires 597 words for executable code.
   Procedure VDA$LDELETE requires 68 words of local(AUTO) storage.

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:150  

 Object Unit name= VDA$LDELETE                                File name= VDA$LOWER.:VDA5TOU
 UTS= JUL 04 '97 11:06:24.76 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      5      5  VDA$LDELETE
    1   Proc  even  none   597   1125  VDA$LDELETE
    2  RoData even  none    16     20  VDA$LDELETE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  VDA$LDELETE
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:151  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VDG$EBREAK_ACKNOWLEDGE
         yes           Std       2 VDG$MACC_LDELETE
 yes     yes           Std       3 VDG$OALLOC
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       3 VDG$COMPARE_PTRS_W_RANGE
 yes     yes           Std       4 VDA$PDELETE
         yes           Std       1 VDG$MACC_RETURN
 yes     yes           Std       2 VDA$PFLUSH
 yes     yes           Std       6 VDA$PREAD
 yes     yes           Std       1 VDG$OCLEAR_LOCATION
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       4 VDA$LWRITE
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       3 VDP$RDELETE
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 VD_NODE_WRITERS$$                     VD_LOC_$RECORDS_DELETED
     VD_$$MON_ACC                          VD_ACCESSOR_PRIV                      VD_KEY_NUMERIC_BOF
     B_VECTNIL
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:152  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:153  


     1065        1        /*T***********************************************************/
     1066        2        /*T*                                                         */
     1067        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1068        4        /*T*                                                         */
     1069        5        /*T***********************************************************/
     1070        6
     1071        7        /*D* NAME: VDA$LDELETE
     1072        8            PARAMETERS:
     1073        9                STREAM - VD$STREAM to use.  This stream must be open to
     1074       10                    an internal or external file.
     1075       11                RANGE - Optional VD$RANGE specifying the range of nodes to delete.
     1076       12                    This is an inclusive range:  RANGE.START specifies the first
     1077       13                    node to delete and RANGE.ENDD specifies the last node to
     1078       14                    delete.
     1079       15                    RANGE must be one of the following:
     1080       16                    Omitted - We'll delete the lowest node (usually record-level)
     1081       17                        that the stream is currently positioned to.
     1082       18                    BOF, EOF, or specific nodes, specified as follows:
     1083       19                    If .START or .ENDD = %CLEAR, or have only one key which
     1084       20                        equals VD_KEY_NUMERIC_BOF or VD_KEY_STRING_BOF --
     1085       21                        this specifies BOF.
     1086       22                    If .START.EOF or .ENDD.EOF is set, this specifies EOF;
     1087       23                    Else .START.KEY or .ENDD.KEY (%(LVL_LOWER-1)) thru (n) must
     1088       24                        be given:  these are keys for levels %LVL_LOWER thru (n+1)
     1089       25                        of the file.
     1090       26
     1091       27                    Basic rule for RANGE:  we only allow deletion within one
     1092       28                    parent node, of one or more of that parent's kids -- you
     1093       29                    can't delete from some kid of node "A" thru some kid of
     1094       30                    node "B".
     1095       31                    Therefore:
     1096       32                        If RANGE.START = %CLEAR or has only VD_KEY_x_BOF, then
     1097       33                            .ENDD must be either %CLEAR, .ENDD.EOF, or exactly
     1098       34                            one .ENDD.KEY given.
     1099       35                        If RANGE.ENDD.EOF is set, then .START must be either
     1100       36                            %CLEAR, .START.EOF, or exactly one .START.KEY given.
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:154  
     1101       37                        Of course, if .START.EOF is set then the only valid
     1102       38                            .ENDD is .ENDD.EOF; if .ENDD = %CLEAR, then the
     1103       39                            only valid .START is %CLEAR or just VD_KEY_x_BOF.
     1104       40                            In either case, nothing will be deleted.
     1105       41                        If neither .START nor .END specify BOF or EOF, then
     1106       42                            the number of keys in .START.KEY and .ENDD.KEY
     1107       43                            must be equal, and all .START.KEYs except the last
     1108       44                            must equal their counterpart in .ENDD.KEY.
     1109       45                            If the file has more than two levels, deletion will
     1110       46                            be at the lowest level given; for example, if the
     1111       47                            file has 5 levels but keys are only given for levels
     1112       48                            1 and 2, we will delete nodes at levels 2 thru 5:
     1113       49                            the specified node(s) at level 2, and all children
     1114       50                            of deleted level 2 nodes.
     1115       51            INPUT:
     1116       52                VD_ACCESSOR_PRIV - If we're deleting from an internal file and
     1117       53                    we're not doing the deletion on behalf of the user, but
     1118       54                    rather are just updating an internally-maintained
     1119       55                    file (e.g., Scratch files, etc.), then the
     1120       56                    VD_ACCESSOR_PRIV's %NAC_DELETE bit must be set.
     1121       57            SCRATCH:
     1122       58                VD_STATIC_TEMP
     1123       59            OUTPUT:
     1124       60                The stream and port will end up positioned to the
     1125       61                    node following the last node deleted (which could be
     1126       62                    eof).
     1127       63                The Presenter will be told of the deletions.
     1128       64                $RECORDS_DELETED will be set to the number of nodes deleted at the
     1129       65                    lowest level at which a key was given (highest level of
     1130       66                    deleted nodes).
     1131       67        *N**N*  If the History file is enabled, the node(s) being deleted, if any,
     1132       68        *N**N*      will be appended to the History file.
     1133       69            DESCRIPTION:
     1134       70        *N**N*  If History is enabled:
     1135       71        *N**N*      Walk the nodes of the file tree which are to be deleted,
     1136       72        *N**N*          VDA$PREADing each into the Port registers and
     1137       73        *N**N*          writing it to the end of the History file.
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:155  
     1138       74        *N**N*  Else:
     1139       75                    If the port contains a node which has been modified,
     1140       76                        call VDA$PFLUSH.
     1141       77                If this is a predefined file:
     1142       78                    Loop thru the nodes to be deleted (at just the top level of
     1143       79                        the nodes to be deleted), VDA$PREADing each node and
     1144       80                        calling the appropriate node writer.  This will delete
     1145       81                        the node and all its children, and will free the Port
     1146       82                        Spec and/or Data components.
     1147       83                        The node writer may have side-effects (closing windows),
     1148       84                        and may reject the deletion.
     1149       85                    Leave the Port positioned to the node following the last node
     1150       86                        deleted.
     1151       87                Else (that is, if this isn't a predefined file):
     1152       88                    Call VDA$PDELETE to delete the nodes from the file.
     1153       89                        Leave the Port positioned to the node following the
     1154       90                        last node deleted.
     1155       91        */
     1156       92
     1157       93        VDA$LDELETE: PROC (STREAM, RANGE) ALTRET;

     93  1 000000   000000 700200 xent  VDA$LDELETE  TSX0  ! X66_AUTO_2
         1 000001   000104 000002                    ZERO    68,2

     1158       94
     1159       95
     1160       96        %INCLUDE VD_MACROS_M;
     1161     2311        %INCLUDE VD_PERR_C;
     1162     2459
     1163     2460
     1164     2461        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     1165     2567        %VD$RANGE (NAME=RANGE, STCLASS=PARAM);
     1166     2636
     1167     2637
     1168     2638
     1169     2639    1   DCL VDA$PREAD           ENTRY (6) ALTRET;
     1170     2640    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:156  
     1171     2641    1   DCL VDA$PDELETE         ENTRY (4) ALTRET;
     1172     2642    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
     1173     2643    1   DCL VDP$RDELETE         ENTRY (3) ALTRET;
     1174     2644    1   DCL VDG$COMPARE_PTRS_W_RANGE ENTRY (3) ALTRET;
     1175     2645    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1176     2646    1   DCL VDG$OCLEAR_LOCATION ENTRY (1) ALTRET;
     1177     2647    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1178     2648    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1179     2649    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1180     2650    1   DCL VDG$MACC_LDELETE    ENTRY (2);
     1181     2651    1   DCL VDG$MACC_RETURN     ENTRY (1);
     1182     2652    1   DCL VDG$ESCREECH        ENTRY (3);
     1183     2653    1   DCL VDG$EBREAK_ACKNOWLEDGE ENTRY (1);
     1184     2654
     1185     2655
     1186     2656        %VD_6E (STCLASS=SYMREF);
     1187     2692    1   DCL VD_NODE_WRITERS$$ (0:0) EPTR SYMREF;
     1188     2693        %VD$LOCATION (NAME=VD_LOC_$RECORDS_DELETED, STCLASS=SYMREF);
     1189     2721        %VD$NUMBER (NAME=VD_$$MON_ACC, STCLASS=SYMREF);
     1190     2766    1   DCL 1 VD_ACCESSOR_PRIV ALIGNED SYMREF,
     1191     2767            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=STATIC);
     1192     2781        %VD$KEY_NUMBER (NAME=VD_KEY_NUMERIC_BOF, STCLASS=SYMREF);
     1193     2796
     1194     2797
     1195     2798    1   DCL ZERO_SPEC (0:1) SBIN CONSTANT INIT(0*0);
     1196     2799        %VD_BUFFER (NAME=ZERO_BUFFER, STCLASS=CONSTANT, IBYTES="''");
     1197     2859
     1198     2860
     1199     2861
     1200     2862    1   DCL STRUCTURE_NODE$ PTR;
     1201     2863        %VD$RANGE (NAME=DEL_RANGE, STCLASS=AUTO);
     1202     2932    1   DCL DEL_LEVEL SBIN;
     1203     2933    1   DCL DEL_LEVEL_COUNT SBIN;
     1204     2934    1   DCL INDX SBIN;
     1205     2935    1   DCL LEVEL SBIN;
     1206     2936    1   DCL DEL_START_KEY$ PTR;
     1207     2937    1   DCL DEL_END_KEY$ PTR;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:157  
     1208     2938    1   DCL FLUSH_PORT BIT(1) ALIGNED;
     1209     2939    1   DCL HISTORY_ENABLED BIT(1) ALIGNED;
     1210     2940        %VD$LOCATION_PTRS (NAME=LOCATION_PTRS, STCLASS=AUTO);
     1211     2955    1   DCL NODE_WRITER$$ EPTR;
     1212     2956    1   DCL PREDEF_COUNT SBIN;
     1213     2957        %VD$RANGE (NAME=PREDEF_RANGE, STCLASS=AUTO);
     1214     3026    1   DCL VD_ERR$ PTR;
     1215     3027    1   DCL SUBST_FIELD$ PTR;
     1216     3028
     1217     3029
     1218     3030        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
     1219     3128        %VD$FILE_NODE (NAME=STRUCTURE$NODE, STCLASS="BASED(STRUCTURE_NODE$)");
     1220     3221        %VD$STREAM (NAME=HISTORY$STREAM, STCLASS="BASED(VD_6E.HISTORY$)");
     1221     3327        %VD$STREAM (NAME=EQUALS$STREAM, STCLASS="BASED(VD_6E.EQUALS$)");
     1222     3433        %VD$TEXTC (NAME=DEL$START_KEY, STCLASS="BASED(DEL_START_KEY$)");
     1223     3456        %VD$TEXTC (NAME=DEL$END_KEY, STCLASS="BASED(DEL_END_KEY$)",
     1224     3457            ALIGNMENT=CALIGNED);
     1225     3480        %VD$ERR (NAME=VD$ERR, STCLASS="BASED(VD_ERR$)");
     1226     3533        %VD$POINTER (NAME=SUBST$POINTER, DIM="(0:2)", STCLASS="BASED(SUBST_FIELD$)");
     1227     3578        %VD$TEXTC_REMOTE;
     1228     3639        %VD$BUFFER;
     1229     3697        %VD$FILE_NODE;
     1230     3790        %VD$PORT;
     1231     3888
     1232     3889
     1233     3890
     1234     3891    2           IF VD_6E.INTERRUPT.STATE# = %INST_BREAK_QUEUED THEN DO;

   3891  1 000002   000027 220000 xsym               LDX0    VD_6E+23
         1 000003   000003 100003                    CMPX0   3,DU
         1 000004   000012 601000 1                  TNZ     s:3895

     1235     3892    2              CALL VDG$EBREAK_ACKNOWLEDGE (%E$BREAK_HIT);

   3892  1 000005   000000 630400 2                  EPPR0   0
         1 000006   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000007   000000 701000 xent               TSX1    VDG$EBREAK_ACKNOWLEDGE
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:158  
         1 000010   000000 011000                    NOP     0

     1236     3893    2              ALTRETURN;

   3893  1 000011   000000 702200 xent               TSX2  ! X66_AALT

     1237     3894    2              END;
     1238     3895    1           IF VD_$$MON_ACC.V# > 0 THEN

   3895  1 000012   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         1 000013   000020 604400 1                  TMOZ    s:3897

     1239     3896    1              CALL VDG$MACC_LDELETE (STREAM, RANGE);

   3896  1 000014   200003 630500                    EPPR0   @STREAM,,AUTO
         1 000015   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000016   000000 701000 xent               TSX1    VDG$MACC_LDELETE
         1 000017   000000 011000                    NOP     0

     1240     3897    1           IF PORT.EXIST# = 0 THEN

   3897  1 000020   200003 470500                    LDP0    @STREAM,,AUTO
         1 000021   000001 471500                    LDP1    1,,PR0
         1 000022   100003 720100                    LXL0    3,,PR1
         1 000023   000034 601000 1                  TNZ     s:3899

     1241     3898    1              CALL VDG$ESCREECH (PORT.EXIST#);

   3898  1 000024   200101 451500                    STP1    RECORDS_DELETED$+2,,AUTO
         1 000025   200101 236100                    LDQ     RECORDS_DELETED$+2,,AUTO
         1 000026   000001 036000 2                  ADLQ    1
         1 000027   200100 756100                    STQ     RECORDS_DELETED$+1,,AUTO
         1 000030   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000031   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000032   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000033   000000 011000                    NOP     0

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:159  
     1242     3899    1           STRUCTURE_NODE$ = PORT.STRUCTURE$;

   3899  1 000034   200003 470500                    LDP0    @STREAM,,AUTO
         1 000035   000001 471500                    LDP1    1,,PR0
         1 000036   100006 236100                    LDQ     6,,PR1
         1 000037   200005 756100                    STQ     STRUCTURE_NODE$,,AUTO

     1243     3900
     1244     3901    1           IF ADDR(RANGE) = ADDR(NIL) THEN

   3901  1 000040   200004 236100                    LDQ     @RANGE,,AUTO
         1 000041   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000042   000076 601000 1                  TNZ     CHECK_PASSED_RANGE

     1245     3902    2   NO_RANGE_GIVEN: DO;

   3902  1 000043                       NO_RANGE_GI* null
     1246     3903    2              IF STREAM.CURRENT.EOF THEN

   3903  1 000043   000016 236100                    LDQ     14,,PR0
         1 000044   400000 316007                    CANQ    -131072,DL
         1 000045   000051 600000 1                  TZE     s:3905

     1247     3904    2                 CALL VDG$ESCREECH;

   3904  1 000046   000002 631400 xsym               EPPR1   B_VECTNIL+2
         1 000047   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000050   000000 011000                    NOP     0

     1248     3905    2              DEL_RANGE.START = STREAM.CURRENT;

   3905  1 000051   200003 470500                    LDP0    @STREAM,,AUTO
         1 000052   000100 100500                    MLR     fill='000'O
         1 000053   000006 000044                    ADSC9   6,,PR0                   cn=0,n=36
         1 000054   200006 000044                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=36

     1249     3906    2              DEL_RANGE.ENDD = STREAM.CURRENT;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:160  

   3906  1 000055   000100 100500                    MLR     fill='000'O
         1 000056   000006 000044                    ADSC9   6,,PR0                   cn=0,n=36
         1 000057   200017 000044                    ADSC9   DEL_RANGE+9,,AUTO        cn=0,n=36

     1250     3907    2              DEL_LEVEL = %(LVL_LOWER-1);

   3907  1 000060   200030 450100                    STZ     DEL_LEVEL,,AUTO

     1251     3908    3              DO WHILE (DEL_LEVEL < STRUCTURE$NODE.COUNT# - 1)

   3908  1 000061   000063 710000 1                  TRA     s:3911

     1252     3909    3                AND (DEL_RANGE.START.KEY (DEL_LEVEL) ~= %CLEAR);
     1253     3910    3                 DEL_LEVEL = DEL_LEVEL + 1;

   3910  1 000062   200030 054100                    AOS     DEL_LEVEL,,AUTO

     1254     3911    3                 END;

   3911  1 000063   200005 470500                    LDP0    STRUCTURE_NODE$,,AUTO
         1 000064   000014 236100                    LDQ     12,,PR0
         1 000065   000001 136007                    SBLQ    1,DL
         1 000066   200030 116100                    CMPQ    DEL_LEVEL,,AUTO
         1 000067   000075 604400 1                  TMOZ    s:3912
         1 000070   200030 235100                    LDA     DEL_LEVEL,,AUTO
         1 000071   000001 735000                    ALS     1
         1 000072   200006 237105                    LDAQ    DEL_RANGE,AL,AUTO
         1 000073   000002 117000 2                  CMPAQ   2
         1 000074   000062 601000 1                  TNZ     s:3910

     1255     3912    2              END NO_RANGE_GIVEN;

   3912  1 000075   000300 710000 1                  TRA     s:3981

     1256     3913    1           ELSE
     1257     3914    2   CHECK_PASSED_RANGE: DO;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:161  

   3914  1 000076                       CHECK_PASSE* null
     1258     3915    2              DEL_RANGE = RANGE;

   3915  1 000076   200004 473500                    LDP3    @RANGE,,AUTO
         1 000077   000100 100500                    MLR     fill='000'O
         1 000100   300000 000110                    ADSC9   0,,PR3                   cn=0,n=72
         1 000101   200006 000110                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=72

     1259     3916    2              IF DEL_RANGE.START = %CLEAR

   3916  1 000102   000000 106500                    CMPC    fill='000'O
         1 000103   200006 000044                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=36
         1 000104   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000105   000120 600000 1                  TZE     s:3920
         1 000106   000000 106500                    CMPC    fill='000'O
         1 000107   200017 000044                    ADSC9   DEL_RANGE+9,,AUTO        cn=0,n=36
         1 000110   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000111   000120 600000 1                  TZE     s:3920
         1 000112   200016 236100                    LDQ     DEL_RANGE+8,,AUTO
         1 000113   400000 316007                    CANQ    -131072,DL
         1 000114   000120 601000 1                  TNZ     s:3920
         1 000115   200027 236100                    LDQ     DEL_RANGE+17,,AUTO
         1 000116   400000 316007                    CANQ    -131072,DL
         1 000117   000204 600000 1                  TZE     s:3945

     1260     3917    2                OR DEL_RANGE.ENDD = %CLEAR
     1261     3918    2                OR DEL_RANGE.START.EOF
     1262     3919    3                OR DEL_RANGE.ENDD.EOF THEN DO;

     1263     3920    3                 IF DEL_RANGE.START = %CLEAR THEN

   3920  1 000120   000000 106500                    CMPC    fill='000'O
         1 000121   200006 000044                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=36
         1 000122   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000123   000137 601000 1                  TNZ     s:3925

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:162  
     1264     3921    3                    IF NOT (DEL_RANGE.ENDD = %CLEAR

   3921  1 000124   000000 106500                    CMPC    fill='000'O
         1 000125   200017 000044                    ADSC9   DEL_RANGE+9,,AUTO        cn=0,n=36
         1 000126   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000127   000137 600000 1                  TZE     s:3925
         1 000130   200027 236100                    LDQ     DEL_RANGE+17,,AUTO
         1 000131   400000 316007                    CANQ    -131072,DL
         1 000132   000137 601000 1                  TNZ     s:3925
         1 000133   000000 106500                    CMPC    fill='000'O
         1 000134   200021 000010                    ADSC9   DEL_RANGE+11,,AUTO       cn=0,n=8
         1 000135   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000136   000664 601000 1                  TNZ     CANT_DEL_ACROSS_NODES_FAILURE

     1265     3922    3                      OR DEL_RANGE.ENDD.EOF
     1266     3923    3                      OR DEL_RANGE.ENDD.KEY (1) = %CLEAR) THEN
     1267     3924    3                       GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1268     3925    3                 IF DEL_RANGE.ENDD.EOF THEN

   3925  1 000137   200027 236100                    LDQ     DEL_RANGE+17,,AUTO
         1 000140   400000 316007                    CANQ    -131072,DL
         1 000141   000154 600000 1                  TZE     s:3930

     1269     3926    3                    IF NOT (DEL_RANGE.START = %CLEAR

   3926  1 000142   000000 106500                    CMPC    fill='000'O
         1 000143   200006 000044                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=36
         1 000144   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000145   000154 600000 1                  TZE     s:3930
         1 000146   200016 236100                    LDQ     DEL_RANGE+8,,AUTO
         1 000147   400000 316007                    CANQ    -131072,DL
         1 000150   000154 601000 1                  TNZ     s:3930
         1 000151   200010 237100                    LDAQ    DEL_RANGE+2,,AUTO
         1 000152   000002 117000 2                  CMPAQ   2
         1 000153   000664 601000 1                  TNZ     CANT_DEL_ACROSS_NODES_FAILURE

     1270     3927    3                      OR DEL_RANGE.START.EOF
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:163  
     1271     3928    3                      OR DEL_RANGE.START.KEY (1) = %CLEAR) THEN
     1272     3929    3                       GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1273     3930    3                 IF DEL_RANGE.START.EOF

   3930  1 000154   200016 236100                    LDQ     DEL_RANGE+8,,AUTO
         1 000155   400000 316007                    CANQ    -131072,DL
         1 000156   000162 600000 1                  TZE     s:3933
         1 000157   200027 236100                    LDQ     DEL_RANGE+17,,AUTO
         1 000160   400000 316007                    CANQ    -131072,DL
         1 000161   000664 600000 1                  TZE     CANT_DEL_ACROSS_NODES_FAILURE

     1274     3931    3                   AND NOT DEL_RANGE.ENDD.EOF THEN
     1275     3932    3                    GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1276     3933    3                 IF DEL_RANGE.ENDD = %CLEAR THEN

   3933  1 000162   000000 106500                    CMPC    fill='000'O
         1 000163   200017 000044                    ADSC9   DEL_RANGE+9,,AUTO        cn=0,n=36
         1 000164   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000165   000201 601000 1                  TNZ     s:3939

     1277     3934    3                    IF NOT (DEL_RANGE.START = %CLEAR

   3934  1 000166   000000 106500                    CMPC    fill='000'O
         1 000167   200006 000044                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=36
         1 000170   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000171   000201 600000 1                  TZE     s:3939
         1 000172   200010 237100                    LDAQ    DEL_RANGE+2,,AUTO
         1 000173   000002 117000 2                  CMPAQ   2
         1 000174   000664 601000 1                  TNZ     CANT_DEL_ACROSS_NODES_FAILURE
         1 000175   000000 106500                    CMPC    fill='000'O
         1 000176   200006 000010                    ADSC9   DEL_RANGE,,AUTO          cn=0,n=8
         1 000177   000000 000010 xsym               ADSC9   VD_KEY_NUMERIC_BOF       cn=0,n=8
         1 000200   000664 601000 1                  TNZ     CANT_DEL_ACROSS_NODES_FAILURE

     1278     3935    3                      OR (DEL_RANGE.START.KEY (1) = %CLEAR
     1279     3936    3                      AND (DEL_RANGE.START.KEY (0) = VD_KEY_NUMERIC_BOF
     1280     3937    3   /* OR DEL_RANGE.START.KEY (0) = VD_KEY_STRING_BOF */))) THEN
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:164  
     1281     3938    3                       GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1282     3939    3                 DEL_LEVEL = %LVL_LOWER;

   3939  1 000201   000001 235007                    LDA     1,DL
         1 000202   200030 755100                    STA     DEL_LEVEL,,AUTO

     1283     3940    3                 END;

   3940  1 000203   000300 710000 1                  TRA     s:3981

     1284     3941    3              ELSE DO;

     1285     3942                      /*
     1286     3943                      *   Verify that kids of only one parent are being deleted.
     1287     3944                      */
     1288     3945    3                 DEL_LEVEL = STRUCTURE$NODE.COUNT# - 1;    /* Assumption */

   3945  1 000204   200005 471500                    LDP1    STRUCTURE_NODE$,,AUTO
         1 000205   100014 235100                    LDA     12,,PR1
         1 000206   000001 135007                    SBLA    1,DL
         1 000207   200030 755100                    STA     DEL_LEVEL,,AUTO

     1289     3946    3   CHECK_ONE_PARENT:
     1290     3947    4                 DO INDX = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 2;

   3947  1 000210   000001 235007       CHECK_ONE_P* LDA     1,DL
         1 000211   200032 755100                    STA     INDX,,AUTO
         1 000212   000273 710000 1                  TRA     s:3977+1

     1291     3948    5                    IF DEL_RANGE.START.KEY (INDX /* -1 +1 */) = %CLEAR THEN DO;

   3948  1 000213   200032 235100                    LDA     INDX,,AUTO
         1 000214   000001 735000                    ALS     1
         1 000215   200006 237105                    LDAQ    DEL_RANGE,AL,AUTO
         1 000216   000002 117000 2                  CMPAQ   2
         1 000217   000223 601000 1                  TNZ     s:3960

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:165  
     1292     3949    5                       DEL_LEVEL = INDX;

   3949  1 000220   200032 235100                    LDA     INDX,,AUTO
         1 000221   200030 755100                    STA     DEL_LEVEL,,AUTO

     1293     3950    5                       EXIT CHECK_ONE_PARENT;

   3950  1 000222   000300 710000 1                  TRA     s:3981

     1294     3951    5                       END;
     1295     3952                         %GETKEY (KEY=DEL_RANGE.START.KEY, INDX=INDX-1,
     1296     3953                         PTR=DEL_START_KEY$);

   3960  1 000223   200032 235100                    LDA     INDX,,AUTO
         1 000224   000001 735000                    ALS     1
         1 000225   200004 720105                    LXL0    @RANGE,AL,AUTO
         1 000226   000002 100003                    CMPX0   2,DU
         1 000227   000234 601000 1                  TNZ     s:3960+9

   3960  1 000230   200005 470505                    LDP0    STRUCTURE_NODE$,AL,AUTO
         1 000231   000002 631500                    EPPR1   2,,PR0
         1 000232   200034 451500                    STP1    DEL_START_KEY$,,AUTO
         1 000233   000236 710000 1                  TRA     s:3971

   3960  1 000234   200005 630505                    EPPR0   STRUCTURE_NODE$,AL,AUTO
         1 000235   200034 450500                    STP0    DEL_START_KEY$,,AUTO

     1297     3963                         %GETKEY (KEY=DEL_RANGE.ENDD.KEY, INDX=INDX-1,
     1298     3964                         PTR=DEL_END_KEY$);

   3971  1 000236   200015 721105                    LXL1    DEL_RANGE+7,AL,AUTO
         1 000237   000002 101003                    CMPX1   2,DU
         1 000240   000245 601000 1                  TNZ     s:3971+7

   3971  1 000241   200016 470505                    LDP0    DEL_RANGE+8,AL,AUTO
         1 000242   000002 631500                    EPPR1   2,,PR0
         1 000243   200035 451500                    STP1    DEL_END_KEY$,,AUTO
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:166  
         1 000244   000247 710000 1                  TRA     s:3974

   3971  1 000245   200016 630505                    EPPR0   DEL_RANGE+8,AL,AUTO
         1 000246   200035 450500                    STP0    DEL_END_KEY$,,AUTO

     1299     3974    4                    IF DEL_RANGE.ENDD.KEY (INDX - 1) = %CLEAR

   3974  1 000247   200032 236100                    LDQ     INDX,,AUTO
         1 000250   000003 736000                    QLS     3
         1 000251   000000 106506                    CMPC    fill='000'O
         1 000252   200015 000010                    ADSC9   DEL_RANGE+7,Q,AUTO       cn=0,n=8
         1 000253   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         1 000254   000664 600000 1                  TZE     CANT_DEL_ACROSS_NODES_FAILURE
         1 000255   200034 470500                    LDP0    DEL_START_KEY$,,AUTO
         1 000256   000000 236100                    LDQ     0,,PR0
         1 000257   000033 772000                    QRL     27
         1 000260   200035 471500                    LDP1    DEL_END_KEY$,,AUTO
         1 000261   000100 101500                    MRL     fill='000'O
         1 000262   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000263   200100 000002                    ADSC9   RECORDS_DELETED$+1,,AUTO cn=0,n=2
         1 000264   200100 220100                    LDX0    RECORDS_DELETED$+1,,AUTO
         1 000265   000000 621006                    EAX1    0,QL
         1 000266   040140 106540                    CMPC    fill='040'O
         1 000267   000000 200011                    ADSC9   0,,PR0                   cn=1,n=*X1
         1 000270   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         1 000271   000664 601000 1                  TNZ     CANT_DEL_ACROSS_NODES_FAILURE

     1300     3975    4                      OR DEL$START_KEY.BYTES ~= DEL$END_KEY.BYTES THEN
     1301     3976    4                       GOTO CANT_DEL_ACROSS_NODES_FAILURE;
     1302     3977    4                    END CHECK_ONE_PARENT;

   3977  1 000272   200032 054100                    AOS     INDX,,AUTO
         1 000273   200005 470500                    LDP0    STRUCTURE_NODE$,,AUTO
         1 000274   000014 236100                    LDQ     12,,PR0
         1 000275   000002 136007                    SBLQ    2,DL
         1 000276   200032 116100                    CMPQ    INDX,,AUTO
         1 000277   000213 605000 1                  TPL     s:3948
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:167  

     1303     3978    3                 END;

     1304     3979    2              END CHECK_PASSED_RANGE;

     1305     3980
     1306     3981    1           IF PORT.LEVEL.ORG# (DEL_LEVEL) = %ORG_CONSEC

   3981  1 000300   200003 470500                    LDP0    @STREAM,,AUTO
         1 000301   000001 471500                    LDP1    1,,PR0
         1 000302   200030 236100                    LDQ     DEL_LEVEL,,AUTO
         1 000303   000007 402007                    MPY     7,DL
         1 000304   100023 220106                    LDX0    19,QL,PR1
         1 000305   000001 100003                    CMPX0   1,DU
         1 000306   000311 601000 1                  TNZ     s:3984
         1 000307   100004 721100                    LXL1    4,,PR1
         1 000310   000643 601000 1                  TNZ     CANT_INSERT_DELETE_REC_FAILURE

     1307     3982    1             AND PORT.DCB# ~= 0 THEN
     1308     3983    1              GOTO CANT_INSERT_DELETE_REC_FAILURE;
     1309     3984    1           IF STREAM.PROTECT (DEL_LEVEL) ~= %CLEAR THEN

   3984  1 000311   200030 235100                    LDA     DEL_LEVEL,,AUTO
         1 000312   000002 735000                    ALS     2
         1 000313   000315 605000 1                  TPL     s:3984+4
         1 000314   000044 035003                    ADLA    36,DU
         1 000315   000000 066505                    CMPB    filb='0'B
         1 000316   000002 400004                    BDSC    2,A,PR0                  by=2,bit=0,n=4
         1 000317   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         1 000320   000705 601000 1                  TNZ     CANT_DELETE_FAILURE

     1310     3985    1              GOTO CANT_DELETE_FAILURE;
     1311     3986
     1312     3987    1           HISTORY_ENABLED = %FALSE;

   3987  1 000321   200037 450100                    STZ     HISTORY_ENABLED,,AUTO

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:168  
     1313     3988    1           IF ADDR(STREAM) ~= VD_6E.HISTORY$

   3988  1 000322   200003 236100                    LDQ     @STREAM,,AUTO
         1 000323   000000 116000 xsym               CMPQ    VD_6E
         1 000324   000341 600000 1                  TZE     s:3994
         1 000325   000000 236000 xsym               LDQ     VD_6E
         1 000326   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000327   000341 600000 1                  TZE     s:3994

     1314     3989    1             AND VD_6E.HISTORY$ ~= ADDR(NIL) THEN
     1315     3990    1              IF HISTORY$STREAM.PORT$ ~= ADDR(NIL) THEN

   3990  1 000330   000000 473400 xsym               LDP3    VD_6E
         1 000331   300001 236100                    LDQ     1,,PR3
         1 000332   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000333   000341 600000 1                  TZE     s:3994

     1316     3991    1                 IF HISTORY$STREAM.PORT$ -> PORT.EXIST# ~= 0 THEN

   3991  1 000334   300001 474500                    LDP4    1,,PR3
         1 000335   400003 720100                    LXL0    3,,PR4
         1 000336   000341 600000 1                  TZE     s:3994

     1317     3992    1                    HISTORY_ENABLED = %TRUE;

   3992  1 000337   400000 236003                    LDQ     -131072,DU
         1 000340   200037 756100                    STQ     HISTORY_ENABLED,,AUTO

     1318     3993
     1319     3994    1           IF HISTORY_ENABLED THEN

   3994  1 000341   200037 234100                    SZN     HISTORY_ENABLED,,AUTO
         1 000342   000344 605000 1                  TPL     NO_HISTORY

     1320     3995    2   WRITE_HISTORY: DO;

   3995  1 000343                       WRITE_HISTO* null
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:169  
     1321     3996                   /*N*
     1322     3997                   *N*  Walk the deleted nodes with VDA$PREADs,
     1323     3998                   *N*      calling VDA$LSAVE_OLD_NODE on each.
     1324     3999                   *N*/
     1325     4000    2              ;
     1326     4001    2              END WRITE_HISTORY;

   4001  1 000343   000402 710000 1                  TRA     s:4021

     1327     4002    1           ELSE
     1328     4003    2   NO_HISTORY: DO;

   4003  1 000344                       NO_HISTORY   null
     1329     4004    2              FLUSH_PORT = %FALSE;

   4004  1 000344   200036 450100                    STZ     FLUSH_PORT,,AUTO

     1330     4005    2   CHECK_FOR_FLUSH:
     1331     4006    3              DO LEVEL = %LVL_LOWER TO STRUCTURE$NODE.COUNT# - 1;

   4006  1 000345   000001 235007       CHECK_FOR_F* LDA     1,DL
         1 000346   200033 755100                    STA     LEVEL,,AUTO
         1 000347   000365 710000 1                  TRA     s:4012+1

     1332     4007    3                 IF PORT.LEVEL.SPEC_MODIFIED (LEVEL)

   4007  1 000350   200003 470500                    LDP0    @STREAM,,AUTO
         1 000351   000001 471500                    LDP1    1,,PR0
         1 000352   200033 236100                    LDQ     LEVEL,,AUTO
         1 000353   000007 402007                    MPY     7,DL
         1 000354   100030 234106                    SZN     24,QL,PR1
         1 000355   000361 604000 1                  TMI     s:4009
         1 000356   100030 236106                    LDQ     24,QL,PR1
         1 000357   200000 316003                    CANQ    65536,DU
         1 000360   000364 600000 1                  TZE     s:4012

     1333     4008    4                   OR PORT.LEVEL.DATA_MODIFIED (LEVEL) THEN DO;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:170  

     1334     4009    4                    FLUSH_PORT = %TRUE;

   4009  1 000361   400000 236003                    LDQ     -131072,DU
         1 000362   200036 756100                    STQ     FLUSH_PORT,,AUTO

     1335     4010    4                    EXIT CHECK_FOR_FLUSH;

   4010  1 000363   000371 710000 1                  TRA     s:4014

     1336     4011    4                    END;
     1337     4012    3                 END CHECK_FOR_FLUSH;

   4012  1 000364   200033 054100                    AOS     LEVEL,,AUTO
         1 000365   200005 473500                    LDP3    STRUCTURE_NODE$,,AUTO
         1 000366   200033 236100                    LDQ     LEVEL,,AUTO
         1 000367   300014 116100                    CMPQ    12,,PR3
         1 000370   000350 604000 1                  TMI     s:4007

     1338     4013
     1339     4014    3              IF FLUSH_PORT THEN DO;

   4014  1 000371   200036 234100                    SZN     FLUSH_PORT,,AUTO
         1 000372   000402 605000 1                  TPL     s:4021

     1340     4015    3                 CALL VDA$PFLUSH (PORT, %TO_PRESENTER)

   4015  1 000373   000004 236000 2                  LDQ     4
         1 000374   200101 756100                    STQ     RECORDS_DELETED$+2,,AUTO
         1 000375   200100 451500                    STP1    RECORDS_DELETED$+1,,AUTO
         1 000376   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000377   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000400   000000 701000 xent               TSX1    VDA$PFLUSH
         1 000401   000776 702000 1                  TSX2    PFLUSH_FAILED

     1341     4016    3                   ALTRET (PFLUSH_FAILED);
     1342     4017    3                 END;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:171  

     1343     4018    2              END NO_HISTORY;

     1344     4019
     1345     4020
     1346     4021    1           IF PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL) ~= 0

   4021  1 000402   200003 470500                    LDP0    @STREAM,,AUTO
         1 000403   000001 471500                    LDP1    1,,PR0
         1 000404   200030 236100                    LDQ     DEL_LEVEL,,AUTO
         1 000405   000007 402007                    MPY     7,DL
         1 000406   100024 220106                    LDX0    20,QL,PR1
         1 000407   000617 600000 1                  TZE     s:4100
         1 000410   000001 100003                    CMPX0   1,DU
         1 000411   000617 600000 1                  TZE     s:4100

     1347     4022    1             AND PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL) ~= %SPT_EXT_RECORD THEN
     1348     4023    2   PREDEFINED_FILE: DO;

   4023  1 000412                       PREDEFINED_* null
     1349     4024    2              DEL_LEVEL_COUNT = 0;

   4024  1 000412   200031 450100                    STZ     DEL_LEVEL_COUNT,,AUTO

     1350     4025    2              LOCATION_PTRS = %CLEAR;

   4025  1 000413   000100 100400                    MLR     fill='000'O
         1 000414   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         1 000415   200040 000024                    ADSC9   LOCATION_PTRS,,AUTO      cn=0,n=20

     1351     4026
     1352     4027    2   WHILE_WITHIN_RANGE:
     1353     4028    3              DO WHILE %TRUE;

   4028  1 000416                       WHILE_WITHI* null
     1354     4029                      /*
     1355     4030                      * On each pass thru the loop, we PREAD using the
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:172  
     1356     4031                      *     start location.  We can get away with this
     1357     4032                      *     'cause we delete the node we find each time,
     1358     4033                      *     so the next PREAD, when searching for the first
     1359     4034                      *     node after the start location, will always find
     1360     4035                      *     the next node.
     1361     4036                      */
     1362     4037    3                 CALL VDA$PREAD (PORT, DEL_RANGE.START, 0, %TRUE)

   4037  1 000416   200003 470500                    LDP0    @STREAM,,AUTO
         1 000417   000001 471500                    LDP1    1,,PR0
         1 000420   000006 237000 2                  LDAQ    6
         1 000421   200102 757100                    STAQ    RECORDS_DELETED$+3,,AUTO
         1 000422   200006 633500                    EPPR3   DEL_RANGE,,AUTO
         1 000423   200101 453500                    STP3    RECORDS_DELETED$+2,,AUTO
         1 000424   200100 451500                    STP1    RECORDS_DELETED$+1,,AUTO
         1 000425   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000426   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000427   000000 701000 xent               TSX1    VDA$PREAD
         1 000430   000776 702000 1                  TSX2    PFLUSH_FAILED

     1363     4038    3                   ALTRET (PREAD_FAILED);
     1364     4039    3                 IF PORT.CURRENT.EOF THEN

   4039  1 000431   200003 470500                    LDP0    @STREAM,,AUTO
         1 000432   000001 471500                    LDP1    1,,PR0
         1 000433   100022 236100                    LDQ     18,,PR1
         1 000434   400000 316007                    CANQ    -131072,DL
         1 000435   000616 601000 1                  TNZ     s:4098

     1365     4040    3                    EXIT WHILE_WITHIN_RANGE;   /* Not within range */
     1366     4041    4                 DO INDX = %(LVL_LOWER-1) TO (DEL_LEVEL - 1);

   4041  1 000436   200032 450100                    STZ     INDX,,AUTO
         1 000437   000460 710000 1                  TRA     s:4053+1

     1367     4042                         %GETKEY (KEY=PORT.CURRENT.KEY, INDX=INDX,
     1368     4043                         PTR="LOCATION_PTRS.KEY$ (INDX)");
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:173  

   4050  1 000440   200003 470500                    LDP0    @STREAM,,AUTO
         1 000441   000001 471500                    LDP1    1,,PR0
         1 000442   200032 235100                    LDA     INDX,,AUTO
         1 000443   000001 735000                    ALS     1
         1 000444   100012 720105                    LXL0    10,AL,PR1
         1 000445   000002 100003                    CMPX0   2,DU
         1 000446   000454 601000 1                  TNZ     s:4050+12

   4050  1 000447   100013 473505                    LDP3    11,AL,PR1
         1 000450   300002 634500                    EPPR4   2,,PR3
         1 000451   200032 721100                    LXL1    INDX,,AUTO
         1 000452   200041 454511                    STP4    LOCATION_PTRS+1,X1,AUTO
         1 000453   000457 710000 1                  TRA     s:4053

   4050  1 000454   100013 633505                    EPPR3   11,AL,PR1
         1 000455   200032 721100                    LXL1    INDX,,AUTO
         1 000456   200041 453511                    STP3    LOCATION_PTRS+1,X1,AUTO

     1369     4053    4                    END;

   4053  1 000457   200032 054100                    AOS     INDX,,AUTO
         1 000460   200032 236100                    LDQ     INDX,,AUTO
         1 000461   200030 116100                    CMPQ    DEL_LEVEL,,AUTO
         1 000462   000440 604000 1                  TMI     s:4050

     1370     4054    3                 LOCATION_PTRS.COUNT# = DEL_LEVEL;

   4054  1 000463   200030 236100                    LDQ     DEL_LEVEL,,AUTO
         1 000464   200040 552104                    STBQ    LOCATION_PTRS,'04'O,AUTO

     1371     4055                      /* VDG$COMPARE_PTRS_W_RANGE ignores EOF, so test it here */
     1372     4056    3                 IF DEL_RANGE.START.EOF THEN

   4056  1 000465   200016 236100                    LDQ     DEL_RANGE+8,,AUTO
         1 000466   400000 316007                    CANQ    -131072,DL
         1 000467   000616 601000 1                  TNZ     s:4098
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:174  

     1373     4057    3                    EXIT WHILE_WITHIN_RANGE;   /* Not within range */
     1374     4058    3                 IF NOT DEL_RANGE.ENDD.EOF /* E verything's before EOF */

   4058  1 000470   200027 236100                    LDQ     DEL_RANGE+17,,AUTO
         1 000471   400000 316007                    CANQ    -131072,DL
         1 000472   000503 601000 1                  TNZ     s:4064

     1375     4059    4                 THEN DO;

     1376     4060    4                    CALL VDG$COMPARE_PTRS_W_RANGE (LOCATION_PTRS, DEL_RANGE)

   4060  1 000473   200006 631500                    EPPR1   DEL_RANGE,,AUTO
         1 000474   200101 451500                    STP1    RECORDS_DELETED$+2,,AUTO
         1 000475   200040 633500                    EPPR3   LOCATION_PTRS,,AUTO
         1 000476   200100 453500                    STP3    RECORDS_DELETED$+1,,AUTO
         1 000477   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000500   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000501   000000 701000 xent               TSX1    VDG$COMPARE_PTRS_W_RANGE
         1 000502   000632 702000 1                  TSX2    NOT_WITHIN_RANGE

     1377     4061    4                      ALTRET (NOT_WITHIN_RANGE);
     1378     4062    4                    END;

     1379     4063
     1380     4064    4                 IF PORT.DCB# = 0 THEN DO;

   4064  1 000503   200003 470500                    LDP0    @STREAM,,AUTO
         1 000504   000001 471500                    LDP1    1,,PR0
         1 000505   100004 720100                    LXL0    4,,PR1
         1 000506   000520 601000 1                  TNZ     s:4070

     1381     4065    4                    IF NOT (PORT.LEVEL.INTERNAL$ (DEL_LEVEL) ->

   4065  1 000507   200030 236100                    LDQ     DEL_LEVEL,,AUTO
         1 000510   000007 402007                    MPY     7,DL
         1 000511   100031 473506                    LDP3    25,QL,PR1
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:175  
         1 000512   300003 236100                    LDQ     3,,PR3
         1 000513   040000 316003                    CANQ    16384,DU
         1 000514   000520 601000 1                  TNZ     s:4070
         1 000515   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         1 000516   040000 316003                    CANQ    16384,DU
         1 000517   000733 600000 1                  TZE     CANT_DELETE_NODE_FAILURE

     1382     4066    4                      VD$FILE_NODE.ACCESS (%NAC_DELETE)
     1383     4067    4                      OR VD_ACCESSOR_PRIV.ACCESS (%NAC_DELETE)) THEN
     1384     4068    4                       GOTO CANT_DELETE_NODE_FAILURE;
     1385     4069    4                    END;

     1386     4070    3                 IF PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL) >= %MX_SPEC_TYPES THEN

   4070  1 000520   200030 236100                    LDQ     DEL_LEVEL,,AUTO
         1 000521   000007 402007                    MPY     7,DL
         1 000522   100024 221106                    LDX1    20,QL,PR1
         1 000523   000024 101003                    CMPX1   20,DU
         1 000524   000533 602000 1                  TNC     s:4072

     1387     4071    3                    CALL VDG$ESCREECH (PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL));

   4071  1 000525   100024 633506                    EPPR3   20,QL,PR1
         1 000526   200100 453500                    STP3    RECORDS_DELETED$+1,,AUTO
         1 000527   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000530   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000531   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000532   000000 011000                    NOP     0

     1388     4072    3                 NODE_WRITER$$ =

   4072  1 000533   200003 470500                    LDP0    @STREAM,,AUTO
         1 000534   000001 471500                    LDP1    1,,PR0
         1 000535   200030 236100                    LDQ     DEL_LEVEL,,AUTO
         1 000536   000007 402007                    MPY     7,DL
         1 000537   100024 220106                    LDX0    20,QL,PR1
         1 000540   000000 236010 xsym               LDQ     VD_NODE_WRITERS$$,X0
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:176  
         1 000541   200045 756100                    STQ     NODE_WRITER$$,,AUTO

     1389     4073    3                   VD_NODE_WRITERS$$ (PORT.LEVEL.SPEC_TYPE# (DEL_LEVEL));
     1390     4074    4                 IF NODE_WRITER$$ ~= ENTADDR(NIL) THEN DO;

   4074  1 000542   000002 116000 xsym               CMPQ    B_VECTNIL+2
         1 000543   000564 600000 1                  TZE     s:4087

     1391     4075                            /*
     1392     4076                            *  Pass 0-length Spec and Data args to node writer;
     1393     4077                            *      deleting the contents of these components
     1394     4078                            *      will delete the node when appropriate.
     1395     4079                            */
     1396     4080    4                    CALL NODE_WRITER$$ (PORT, ZERO_SPEC, ZERO_BUFFER,

   4080  1 000544   000010 237000 2                  LDAQ    8
         1 000545   200102 757100                    STAQ    RECORDS_DELETED$+3,,AUTO
         1 000546   000012 236000 2                  LDQ     10
         1 000547   200101 756100                    STQ     RECORDS_DELETED$+2,,AUTO
         1 000550   200100 451500                    STP1    RECORDS_DELETED$+1,,AUTO
         1 000551   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000552   200045 220100                    LDX0    NODE_WRITER$$,,AUTO
         1 000553   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000554   000000 701010                    TSX1    0,X0
         1 000555   000773 702000 1                  TSX2    NODE_WRITER_FAILED

     1397     4081    4                      %TRUE)     /* %TRUE = node exists */
     1398     4082    4                      ALTRET (NODE_WRITER_FAILED);
     1399     4083    4                    PORT.LAST_OP# = %ACCOP_DELETE;

   4083  1 000556   200003 470500                    LDP0    @STREAM,,AUTO
         1 000557   000001 471500                    LDP1    1,,PR0
         1 000560   000006 220003                    LDX0    6,DU
         1 000561   100007 740100                    STX0    7,,PR1

     1400     4084    4                    DEL_LEVEL_COUNT = DEL_LEVEL_COUNT + 1;

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:177  
   4084  1 000562   200031 054100                    AOS     DEL_LEVEL_COUNT,,AUTO

     1401     4085    4                    END;

   4085  1 000563   000416 710000 1                  TRA     WHILE_WITHIN_RANGE

     1402     4086    4                 ELSE DO;

     1403     4087    4                    PREDEF_RANGE.START = PORT.CURRENT;

   4087  1 000564   000100 100500                    MLR     fill='000'O
         1 000565   100012 000044                    ADSC9   10,,PR1                  cn=0,n=36
         1 000566   200047 000044                    ADSC9   PREDEF_RANGE,,AUTO       cn=0,n=36

     1404     4088    4                    PREDEF_RANGE.ENDD = PORT.CURRENT;

   4088  1 000567   000001 471500                    LDP1    1,,PR0
         1 000570   000100 100500                    MLR     fill='000'O
         1 000571   100012 000044                    ADSC9   10,,PR1                  cn=0,n=36
         1 000572   200060 000044                    ADSC9   PREDEF_RANGE+9,,AUTO     cn=0,n=36

     1405     4089    4                    CALL VDA$PDELETE (PORT, PREDEF_RANGE, DEL_LEVEL,

   4089  1 000573   000001 471500                    LDP1    1,,PR0
         1 000574   200046 633500                    EPPR3   PREDEF_COUNT,,AUTO
         1 000575   200103 453500                    STP3    RECORDS_DELETED$+4,,AUTO
         1 000576   200030 634500                    EPPR4   DEL_LEVEL,,AUTO
         1 000577   200102 454500                    STP4    RECORDS_DELETED$+3,,AUTO
         1 000600   200047 635500                    EPPR5   PREDEF_RANGE,,AUTO
         1 000601   200101 455500                    STP5    RECORDS_DELETED$+2,,AUTO
         1 000602   200100 451500                    STP1    RECORDS_DELETED$+1,,AUTO
         1 000603   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000604   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000605   000000 701000 xent               TSX1    VDA$PDELETE
         1 000606   000610 702000 1                  TSX2    s:4092
         1 000607   000612 710000 1                  TRA     s:4095

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:178  
     1406     4090    4                      PREDEF_COUNT)
     1407     4091    5                    WHENALTRETURN DO;

     1408     4092    5                       CALL CLEAN_UP_AFTER_DELETE

   4092  1 000610   000777 701000 1                  TSX1    CLEAN_UP_AFTER_DELETE
         1 000611   000776 702000 1                  TSX2    PFLUSH_FAILED

     1409     4093    5                         ALTRET (CLEAN_UP_AFTER_DELETE_FAILED);
     1410     4094    5                       END;

     1411     4095    4                    DEL_LEVEL_COUNT = DEL_LEVEL_COUNT + PREDEF_COUNT;

   4095  1 000612   200031 236100                    LDQ     DEL_LEVEL_COUNT,,AUTO
         1 000613   200046 036100                    ADLQ    PREDEF_COUNT,,AUTO
         1 000614   200031 756100                    STQ     DEL_LEVEL_COUNT,,AUTO

     1412     4096    4                    END;

     1413     4097    3                 END WHILE_WITHIN_RANGE;

   4097  1 000615   000416 710000 1                  TRA     WHILE_WITHIN_RANGE

     1414     4098    2              END PREDEFINED_FILE;

   4098  1 000616   000632 710000 1                  TRA     NOT_WITHIN_RANGE

     1415     4099    2           ELSE DO;

     1416     4100    2              CALL VDA$PDELETE (PORT, DEL_RANGE, DEL_LEVEL, DEL_LEVEL_COUNT);

   4100  1 000617   200031 633500                    EPPR3   DEL_LEVEL_COUNT,,AUTO
         1 000620   200103 453500                    STP3    RECORDS_DELETED$+4,,AUTO
         1 000621   200030 634500                    EPPR4   DEL_LEVEL,,AUTO
         1 000622   200102 454500                    STP4    RECORDS_DELETED$+3,,AUTO
         1 000623   200006 635500                    EPPR5   DEL_RANGE,,AUTO
         1 000624   200101 455500                    STP5    RECORDS_DELETED$+2,,AUTO
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:179  
         1 000625   200100 451500                    STP1    RECORDS_DELETED$+1,,AUTO
         1 000626   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000627   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000630   000000 701000 xent               TSX1    VDA$PDELETE
         1 000631   000000 011000                    NOP     0

     1417     4101    2              END;

   4098  1 000632                       NOT_WITHIN_* null
     1418     4102    1   NOT_WITHIN_RANGE:;
     1419     4103
     1420     4104    1           CALL CLEAN_UP_AFTER_DELETE

   4104  1 000632   000777 701000 1                  TSX1    CLEAN_UP_AFTER_DELETE
         1 000633   000776 702000 1                  TSX2    PFLUSH_FAILED

     1421     4105    1             ALTRET (CLEAN_UP_AFTER_DELETE_FAILED);
     1422     4106
     1423     4107
     1424     4108    1           IF VD_$$MON_ACC.V# > 0 THEN

   4108  1 000634   000003 235000 xsym               LDA     VD_$$MON_ACC+3
         1 000635   000642 604400 1                  TMOZ    s:4110

     1425     4109    1              CALL VDG$MACC_RETURN (STREAM);

   4109  1 000636   200003 630500                    EPPR0   @STREAM,,AUTO
         1 000637   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000640   000000 701000 xent               TSX1    VDG$MACC_RETURN
         1 000641   000000 011000                    NOP     0

     1426     4110    1           RETURN;

   4110  1 000642   000000 702200 xent               TSX2  ! X66_ARET

     1427     4111
     1428     4112
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:180  
     1429     4113
     1430     4114    1   CANT_INSERT_DELETE_REC_FAILURE:
     1431     4115    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   4115  1 000643   200071 633500       CANT_INSERT* EPPR3   VD_ERR$,,AUTO
         1 000644   200101 453500                    STP3    RECORDS_DELETED$+2,,AUTO
         1 000645   000013 236000 2                  LDQ     11
         1 000646   200100 756100                    STQ     RECORDS_DELETED$+1,,AUTO
         1 000647   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000650   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000651   000000 701000 xent               TSX1    VDG$OALLOC
         1 000652   000776 702000 1                  TSX2    PFLUSH_FAILED

     1432     4116    1             ALTRET (OALLOC_FAILED);
     1433     4117    1           VD$ERR.ERR.CODE# = %E$CANT_INSERT_DELETE_RECORDS;

   4117  1 000653   200071 470500                    LDP0    VD_ERR$,,AUTO
         1 000654   000002 236100                    LDQ     2,,PR0
         1 000655   000014 376000 2                  ANQ     12
         1 000656   004120 276007                    ORQ     2128,DL
         1 000657   000002 756100                    STQ     2,,PR0

     1434     4118    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   4118  1 000660   000003 220003                    LDX0    3,DU
         1 000661   200071 470500                    LDP0    VD_ERR$,,AUTO
         1 000662   000003 740100                    STX0    3,,PR0

     1435     4119    1           ALTRETURN;

   4119  1 000663   000000 702200 xent               TSX2  ! X66_AALT

     1436     4120
     1437     4121
     1438     4122    1   CANT_DEL_ACROSS_NODES_FAILURE:
     1439     4123    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:181  
   4123  1 000664   200071 630500       CANT_DEL_AC* EPPR0   VD_ERR$,,AUTO
         1 000665   200101 450500                    STP0    RECORDS_DELETED$+2,,AUTO
         1 000666   000013 236000 2                  LDQ     11
         1 000667   200100 756100                    STQ     RECORDS_DELETED$+1,,AUTO
         1 000670   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000671   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000672   000000 701000 xent               TSX1    VDG$OALLOC
         1 000673   000776 702000 1                  TSX2    PFLUSH_FAILED

     1440     4124    1             ALTRET (OALLOC_FAILED);
     1441     4125    1           VD$ERR.ERR.CODE# = %E$CANT_DELETE_ACROSS_NODES;

   4125  1 000674   200071 470500                    LDP0    VD_ERR$,,AUTO
         1 000675   000002 236100                    LDQ     2,,PR0
         1 000676   000014 376000 2                  ANQ     12
         1 000677   003760 276007                    ORQ     2032,DL
         1 000700   000002 756100                    STQ     2,,PR0

     1442     4126    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   4126  1 000701   000003 220003                    LDX0    3,DU
         1 000702   200071 470500                    LDP0    VD_ERR$,,AUTO
         1 000703   000003 740100                    STX0    3,,PR0

     1443     4127    1           ALTRETURN;

   4127  1 000704   000000 702200 xent               TSX2  ! X66_AALT

     1444     4128
     1445     4129
     1446     4130    1   CANT_DELETE_FAILURE:
     1447     4131    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

   4131  1 000705   200071 633500       CANT_DELETE* EPPR3   VD_ERR$,,AUTO
         1 000706   200101 453500                    STP3    RECORDS_DELETED$+2,,AUTO
         1 000707   000013 236000 2                  LDQ     11
         1 000710   200100 756100                    STQ     RECORDS_DELETED$+1,,AUTO
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:182  
         1 000711   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000712   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000713   000000 701000 xent               TSX1    VDG$OALLOC
         1 000714   000776 702000 1                  TSX2    PFLUSH_FAILED

     1448     4132    1             ALTRET (OALLOC_FAILED);
     1449     4133    1           VD$ERR.ERR.CODE# = %E$CANT_DELETE;

   4133  1 000715   200071 470500                    LDP0    VD_ERR$,,AUTO
         1 000716   000002 236100                    LDQ     2,,PR0
         1 000717   000014 376000 2                  ANQ     12
         1 000720   003750 276007                    ORQ     2024,DL
         1 000721   000002 756100                    STQ     2,,PR0

     1450     4134    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   4134  1 000722   000003 220003                    LDX0    3,DU
         1 000723   200071 470500                    LDP0    VD_ERR$,,AUTO
         1 000724   000003 740100                    STX0    3,,PR0

     1451     4135    1           VD$ERR.DCB# = PORT.DCB#;

   4135  1 000725   200003 470500                    LDP0    @STREAM,,AUTO
         1 000726   000001 471500                    LDP1    1,,PR0
         1 000727   100004 721100                    LXL1    4,,PR1
         1 000730   200071 473500                    LDP3    VD_ERR$,,AUTO
         1 000731   300004 741100                    STX1    4,,PR3

     1452     4136    1           ALTRETURN;

   4136  1 000732   000000 702200 xent               TSX2  ! X66_AALT

     1453     4137
     1454     4138
     1455     4139    1   CANT_DELETE_NODE_FAILURE:
     1456     4140    1           CALL VDG$OALLOC (%CLS_ERR, VD_ERR$)

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:183  
   4140  1 000733   200071 633500       CANT_DELETE* EPPR3   VD_ERR$,,AUTO
         1 000734   200101 453500                    STP3    RECORDS_DELETED$+2,,AUTO
         1 000735   000013 236000 2                  LDQ     11
         1 000736   200100 756100                    STQ     RECORDS_DELETED$+1,,AUTO
         1 000737   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 000740   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000741   000000 701000 xent               TSX1    VDG$OALLOC
         1 000742   000776 702000 1                  TSX2    PFLUSH_FAILED

     1457     4141    1             ALTRET (OALLOC_FAILED);
     1458     4142    1           VD$ERR.ERR.CODE# = %E$CANT_DELETE_NODE;

   4142  1 000743   200071 470500                    LDP0    VD_ERR$,,AUTO
         1 000744   000002 236100                    LDQ     2,,PR0
         1 000745   000014 376000 2                  ANQ     12
         1 000746   004010 276007                    ORQ     2056,DL
         1 000747   000002 756100                    STQ     2,,PR0

     1459     4143    1           VD$ERR.FLAGLEV# = %FLV_SERIOUS;

   4143  1 000750   000003 220003                    LDX0    3,DU
         1 000751   200071 470500                    LDP0    VD_ERR$,,AUTO
         1 000752   000003 740100                    STX0    3,,PR0

     1460     4144    1           SUBST_FIELD$ = PINCRW(VD_ERR$, SIZEW(VD$ERR));

   4144  1 000753   200071 236100                    LDQ     VD_ERR$,,AUTO
         1 000754   000005 036003                    ADLQ    5,DU
         1 000755   200072 756100                    STQ     SUBST_FIELD$,,AUTO

     1461     4145    1           SUBST$POINTER.OBJECT.CLASS# (0) = %CLS_PTR_KEY;

   4145  1 000756   000043 221003                    LDX1    35,DU
         1 000757   200072 470500                    LDP0    SUBST_FIELD$,,AUTO
         1 000760   000000 741100                    STX1    0,,PR0

     1462     4146    1           SUBST$POINTER.V$ (0) = ADDR(PORT.LEVEL.INTERNAL$ (DEL_LEVEL) ->
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:184  

   4146  1 000761   200003 471500                    LDP1    @STREAM,,AUTO
         1 000762   100001 473500                    LDP3    1,,PR1
         1 000763   200030 236100                    LDQ     DEL_LEVEL,,AUTO
         1 000764   000007 402007                    MPY     7,DL
         1 000765   300031 474506                    LDP4    25,QL,PR3
         1 000766   400004 635500                    EPPR5   4,,PR4
         1 000767   000003 455500                    STP5    3,,PR0

     1463     4147    1             VD$FILE_NODE.DESC.KEY);
     1464     4148    1           CALL CLEAN_UP_AFTER_DELETE

   4148  1 000770   000777 701000 1                  TSX1    CLEAN_UP_AFTER_DELETE
         1 000771   000776 702000 1                  TSX2    PFLUSH_FAILED

     1465     4149    1             ALTRET (CLEAN_UP_AFTER_DELETE_FAILED);
     1466     4150    1           ALTRETURN;

   4150  1 000772   000000 702200 xent               TSX2  ! X66_AALT

     1467     4151
     1468     4152
     1469     4153    1   NODE_WRITER_FAILED:
     1470     4154    1           CALL CLEAN_UP_AFTER_DELETE

   4154  1 000773   000777 701000 1     NODE_WRITER* TSX1    CLEAN_UP_AFTER_DELETE
         1 000774   000776 702000 1                  TSX2    PFLUSH_FAILED

     1471     4155    1             ALTRET (CLEAN_UP_AFTER_DELETE_FAILED);
     1472     4156    1           ALTRETURN;

   4156  1 000775   000000 702200 xent               TSX2  ! X66_AALT

   4146  1 000776                       PFLUSH_FAIL* null
   4146  1 000776                       PREAD_FAILED null
   4146  1 000776                       RDELETE_FAI* null
   4146  1 000776                       OALLOC_FAIL* null
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:185  
     1473     4157
     1474     4158
     1475     4159    1   PFLUSH_FAILED: ;
     1476     4160    1   PREAD_FAILED: ;
     1477     4161    1   RDELETE_FAILED: ;
     1478     4162    1   OALLOC_FAILED: ;
     1479     4163    1   CLEAN_UP_AFTER_DELETE_FAILED: ;

   4163  1 000776                       CLEAN_UP_AF* null
     1480     4164    1           ALTRETURN;

   4164  1 000776   000000 702200 xent               TSX2  ! X66_AALT

     1481     4165
     1482     4166        %BOX (TITLE=CLEAN_UP_AFTER_DELETE);

              4178    1   /***************************************************************************
              4180    1    *                                                                         *
              4184    1            *                           CLEAN_UP_AFTER_DELETE                        *
              4186    1            *                                                                        *
              4188    1          ***************************************************************************/

     1483     4192
     1484     4193        /*I* NAME: CLEAN_UP_AFTER_DELETE
     1485     4194            PARAMETERS:
     1486     4195                None.
     1487     4196            INPUT:
     1488     4197                STREAM, PORT, DEL_RANGE - The stream and port to use, and
     1489     4198                    the range of nodes to delete.
     1490     4199                DEL_LEVEL_COUNT - # of nodes successfully deleted.
     1491     4200            OUTPUT:
     1492     4201                STREAM.CURRENT will contain a copy of PORT.CURRENT.
     1493     4202                The predefined name $RECORDS_DELETED will be updated.
     1494     4203                The Presenter will be told of the deletions.
     1495     4204            DESCRIPTION:
     1496     4205                Do all that stuff.  (See OUTPUT.)
     1497     4206        */
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:186  
     1498     4207
     1499     4208    1   CLEAN_UP_AFTER_DELETE: PROC ALTRET;

   4208  1 000777   200074 741300       CLEAN_UP_AF* STX1  ! SUBST_FIELD$+2,,AUTO

     1500     4209
     1501     4210
     1502     4211    2   DCL FAILURE BIT(1) ALIGNED;
     1503     4212    2   DCL 1 SAVE_ACCESSOR_PRIV ALIGNED,
     1504     4213            %VD$NAC (NAME=ACCESS, LEV=2, LAST=YES, ALIGNMENT=UNAL, STCLASS=AUTO);
     1505     4227    2   DCL RECORDS_DELETED$ PTR;
     1506     4228
     1507     4229
     1508     4230        %VD$NUMBER (NAME=RECORDS$DELETED, STCLASS="BASED(RECORDS_DELETED$)");
     1509     4275
     1510     4276
     1511     4277
     1512     4278    2           FAILURE = %FALSE;

   4278  1 001000   200075 450100                    STZ     FAILURE,,AUTO

     1513     4279    2           CALL VDG$OCLEAR_LOCATION (STREAM.CURRENT)

   4279  1 001001   200003 236100                    LDQ     @STREAM,,AUTO
         1 001002   000006 036003                    ADLQ    6,DU
         1 001003   200100 756100                    STQ     RECORDS_DELETED$+1,,AUTO
         1 001004   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 001005   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001006   000000 701000 xent               TSX1    VDG$OCLEAR_LOCATION
         1 001007   001123 702000 1                  TSX2    OCLEAR_LOCATION_FAILED

     1514     4280    2             ALTRET (OCLEAR_LOCATION_FAILED);
     1515     4281    2           CALL VDG$OCOPY_LOCATION (PORT.CURRENT, STREAM.CURRENT)

   4281  1 001010   200003 470500                    LDP0    @STREAM,,AUTO
         1 001011   000001 471500                    LDP1    1,,PR0
         1 001012   200003 236100                    LDQ     @STREAM,,AUTO
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:187  
         1 001013   000006 036003                    ADLQ    6,DU
         1 001014   200101 756100                    STQ     RECORDS_DELETED$+2,,AUTO
         1 001015   100012 633500                    EPPR3   10,,PR1
         1 001016   200100 453500                    STP3    RECORDS_DELETED$+1,,AUTO
         1 001017   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 001020   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001021   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 001022   001123 702000 1                  TSX2    OCLEAR_LOCATION_FAILED

     1516     4282    2             ALTRET (OCOPY_LOCATION_FAILED);
     1517     4283
     1518     4284                /*
     1519     4285                *   Set the value of $RECORDS_DELETED.
     1520     4286                */
     1521     4287    2           SAVE_ACCESSOR_PRIV = VD_ACCESSOR_PRIV;

   4287  1 001023   000000 236000 xsym               LDQ     VD_ACCESSOR_PRIV
         1 001024   777000 376003                    ANQ     -512,DU
         1 001025   200076 756100                    STQ     SAVE_ACCESSOR_PRIV,,AUTO

     1522     4288    2           VD_ACCESSOR_PRIV = %NAC_ALL_BITS;

   4288  1 001026   777000 236003                    LDQ     -512,DU
         1 001027   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

     1523     4289    2           CALL VDG$OALLOC (%CLS_NUMBER, RECORDS_DELETED$)

   4289  1 001030   200077 630500                    EPPR0   RECORDS_DELETED$,,AUTO
         1 001031   200101 450500                    STP0    RECORDS_DELETED$+2,,AUTO
         1 001032   000016 236000 2                  LDQ     14
         1 001033   200100 756100                    STQ     RECORDS_DELETED$+1,,AUTO
         1 001034   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 001035   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001036   000000 701000 xent               TSX1    VDG$OALLOC
         1 001037   001123 702000 1                  TSX2    OCLEAR_LOCATION_FAILED

     1524     4290    2             ALTRET (OALLOC_FAILED);
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:188  
     1525     4291    2           RECORDS$DELETED.V# = DEL_LEVEL_COUNT;

   4291  1 001040   200077 470500                    LDP0    RECORDS_DELETED$,,AUTO
         1 001041   200031 235100                    LDA     DEL_LEVEL_COUNT,,AUTO
         1 001042   000003 755100                    STA     3,,PR0

     1526     4292    2           CALL VDA$LWRITE (EQUALS$STREAM, VD_LOC_$RECORDS_DELETED, ,

   4292  1 001043   200077 236100                    LDQ     RECORDS_DELETED$,,AUTO
         1 001044   000001 235000 xsym               LDA     B_VECTNIL+1
         1 001045   200102 757100                    STAQ    RECORDS_DELETED$+3,,AUTO
         1 001046   000017 236000 2                  LDQ     15
         1 001047   000001 235000 xsym               LDA     VD_6E+1
         1 001050   200100 757100                    STAQ    RECORDS_DELETED$+1,,AUTO
         1 001051   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 001052   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001053   000000 701000 xent               TSX1    VDA$LWRITE
         1 001054   001056 702000 1                  TSX2    s:4295
         1 001055   001064 710000 1                  TRA     s:4299

     1527     4293    2             RECORDS$DELETED)
     1528     4294    3           WHENALTRETURN DO;

     1529     4295    3              FAILURE = %TRUE;

   4295  1 001056   400000 236003                    LDQ     -131072,DU
         1 001057   200075 756100                    STQ     FAILURE,,AUTO

     1530     4296    3              CALL VDG$OFREE (RECORDS$DELETED)

   4296  1 001060   200077 630500                    EPPR0   RECORDS_DELETED$,,AUTO
         1 001061   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 001062   000000 701000 xent               TSX1    VDG$OFREE
         1 001063   001123 702000 1                  TSX2    OCLEAR_LOCATION_FAILED

     1531     4297    3                ALTRET (OFREE_FAILED);
     1532     4298    3              END;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:189  

     1533     4299    2           CALL VDA$PFLUSH (EQUALS$STREAM.PORT$->VD$PORT, %TO_PRESENTER)

   4299  1 001064   000001 470400 xsym               LDP0    VD_6E+1
         1 001065   000001 471500                    LDP1    1,,PR0
         1 001066   000004 236000 2                  LDQ     4
         1 001067   200101 756100                    STQ     RECORDS_DELETED$+2,,AUTO
         1 001070   200100 451500                    STP1    RECORDS_DELETED$+1,,AUTO
         1 001071   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 001072   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001073   000000 701000 xent               TSX1    VDA$PFLUSH
         1 001074   001076 702000 1                  TSX2    s:4301
         1 001075   001100 710000 1                  TRA     s:4303

     1534     4300    3           WHENALTRETURN DO;

     1535     4301    3              FAILURE = %TRUE;

   4301  1 001076   400000 236003                    LDQ     -131072,DU
         1 001077   200075 756100                    STQ     FAILURE,,AUTO

     1536     4302    3              END;

     1537     4303    2           VD_ACCESSOR_PRIV = SAVE_ACCESSOR_PRIV;

   4303  1 001100   200076 236100                    LDQ     SAVE_ACCESSOR_PRIV,,AUTO
         1 001101   777000 376003                    ANQ     -512,DU
         1 001102   000000 756000 xsym               STQ     VD_ACCESSOR_PRIV

     1538     4304
     1539     4305                /*
     1540     4306                *   Tell the Presenter about the deletion.
     1541     4307                */
     1542     4308    2           CALL VDP$RDELETE (PORT.FILE_KEY, DEL_RANGE)

   4308  1 001103   200003 470500                    LDP0    @STREAM,,AUTO
         1 001104   000001 471500                    LDP1    1,,PR0
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:190  
         1 001105   200006 633500                    EPPR3   DEL_RANGE,,AUTO
         1 001106   200101 453500                    STP3    RECORDS_DELETED$+2,,AUTO
         1 001107   100010 634500                    EPPR4   8,,PR1
         1 001110   200100 454500                    STP4    RECORDS_DELETED$+1,,AUTO
         1 001111   200100 630500                    EPPR0   RECORDS_DELETED$+1,,AUTO
         1 001112   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 001113   000000 701000 xent               TSX1    VDP$RDELETE
         1 001114   001123 702000 1                  TSX2    OCLEAR_LOCATION_FAILED

     1543     4309    2             ALTRET (RDELETE_FAILED);
     1544     4310
     1545     4311    2           IF FAILURE THEN

   4311  1 001115   200075 234100                    SZN     FAILURE,,AUTO
         1 001116   001121 605000 1                  TPL     s:4313

     1546     4312    2              ALTRETURN;

   4312  1 001117   200074 221300                    LDX1  ! SUBST_FIELD$+2,,AUTO
         1 001120   000000 702211                    TSX2  ! 0,X1

     1547     4313    2           RETURN;

   4313  1 001121   200074 221300                    LDX1  ! SUBST_FIELD$+2,,AUTO
         1 001122   000001 702211                    TSX2  ! 1,X1

   4311  1 001123                       OCLEAR_LOCA* null
   4311  1 001123                       OCOPY_LOCAT* null
   4311  1 001123                       OALLOC_FAIL* null
   4311  1 001123                       OFREE_FAILED null
   4311  1 001123                       RDELETE_FAI* null
     1548     4314
     1549     4315
     1550     4316
     1551     4317    2   OCLEAR_LOCATION_FAILED: ;
     1552     4318    2   OCOPY_LOCATION_FAILED: ;
     1553     4319    2   OALLOC_FAILED: ;
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:191  
     1554     4320    2   OFREE_FAILED: ;
     1555     4321    2   RDELETE_FAILED: ;
     1556     4322    2           ALTRETURN;

   4322  1 001123   200074 221300                    LDX1  ! SUBST_FIELD$+2,,AUTO
         1 001124   000000 702211                    TSX2  ! 0,X1
     1557     4323
     1558     4324    2   END CLEAN_UP_AFTER_DELETE;
     1559     4325
     1560     4326
     1561     4327    1   END VDA$LDELETE;
     1562     4328        %EOD;

PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:192  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$LDELETE.
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:193  

 **** Variables and constants ****

  ****  Section 000 RoData VDA$LDELETE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/w STRC(99)    r     1 ZERO_BUFFER
     0-0-0/w SBIN        r     1 ZERO_SPEC(0:1)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @RANGE                     3-0-0/w PTR         r     1 @STREAM
    35-0-0/w PTR         r     1 DEL_END_KEY$              30-0-0/w SBIN        r     1 DEL_LEVEL
    31-0-0/w SBIN        r     1 DEL_LEVEL_COUNT            6-0-0/w STRC(648)   r     1 DEL_RANGE
    34-0-0/w PTR         r     1 DEL_START_KEY$            75-0-0/w BIT         r     1 FAILURE
    36-0-0/w BIT         r     1 FLUSH_PORT                37-0-0/w BIT         r     1 HISTORY_ENABLED
    32-0-0/w SBIN        r     1 INDX                      33-0-0/w SBIN        r     1 LEVEL
    40-0-0/w STRC(180)   r     1 LOCATION_PTRS             45-0-0/w EPTR        r     1 NODE_WRITER$$
    46-0-0/w SBIN        r     1 PREDEF_COUNT              47-0-0/w STRC(648)   r     1 PREDEF_RANGE
    *0-0-0/w STRC(648)   r     1 RANGE                     77-0-0/w PTR         r     1 RECORDS_DELETED$
    76-0-0/w STRC(9)     r     1 SAVE_ACCESSOR_PRIV        *0-0-0/w STRC(864)   r     1 STREAM
     5-0-0/w PTR         r     1 STRUCTURE_NODE$           72-0-0/w PTR         r     1 SUBST_FIELD$
    71-0-0/w PTR         r     1 VD_ERR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 VD_$$MON_ACC               0-0-0/w STRC(22644) r     1 VD_6E
     0-0-0/w STRC(9)     r     1 VD_ACCESSOR_PRIV           0-0-0/w STRC(72)    r     1 VD_KEY_NUMERIC_BOF
     0-0-0/w STRC(324)   r     1 VD_LOC_$RECORDS_DELETED
     0-0-0/w EPTR        r     1 VD_NODE_WRITERS$$(0:0)
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:194  

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ASTR(9)     r     1 DEL$END_KEY                0-0-0/w ASTR(9)     r     1 DEL$START_KEY
     0-0-0/w STRC(864)   r     1 EQUALS$STREAM              0-0-0/w STRC(864)   r     1 HISTORY$STREAM
     0-0-0/w STRC(1944)  r     1 PORT                       0-0-0/w STRC(144)   r     1 RECORDS$DELETED
     0-0-0/w STRC(468)   r     1 STRUCTURE$NODE
     0-0-0/w STRC(144)   r     1 SUBST$POINTER(0:2)
     0-0-0/w ASTR(90)    r     1 VD$BUFFER                  0-0-0/w STRC(180)   r     1 VD$ERR
     0-0-0/w STRC(468)   r     1 VD$FILE_NODE               0-0-0/w STRC(1944)  r     1 VD$PORT
     0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE


   Procedure VDA$LDELETE requires 597 words for executable code.
   Procedure VDA$LDELETE requires 68 words of local(AUTO) storage.
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:195  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:196  
          MINI XREF LISTING

CANT_DELETE_FAILURE
      4131**LABEL    3985--GOTO
CANT_DELETE_NODE_FAILURE
      4140**LABEL    4068--GOTO
CANT_DEL_ACROSS_NODES_FAILURE
      4123**LABEL    3924--GOTO     3929--GOTO     3932--GOTO     3938--GOTO     3976--GOTO
CANT_INSERT_DELETE_REC_FAILURE
      4115**LABEL    3983--GOTO
CHECK_FOR_FLUSH
      4006**LABEL    4010--EXIT
CHECK_ONE_PARENT
      3947**LABEL    3950--EXIT
CLEAN_UP_AFTER_DELETE
      4208**PROC     4092--CALL     4104--CALL     4148--CALL     4154--CALL
CLEAN_UP_AFTER_DELETE_FAILED
      4163**LABEL    4092--CALLALT  4104--CALLALT  4148--CALLALT  4154--CALLALT
DEL$END_KEY.BYTES
      3475**DCL      3974>>IF
DEL$END_KEY.LENGTH#
      3473**DCL      3475--IMP-SIZ  3974>>IF
DEL$START_KEY.BYTES
      3451**DCL      3974>>IF
DEL$START_KEY.LENGTH#
      3449**DCL      3451--IMP-SIZ  3974>>IF
DEL_END_KEY$
      2937**DCL      3465--IMP-PTR  3971<<ASSIGN   3971<<ASSIGN   3974>>IF       3974>>IF
DEL_LEVEL
      2932**DCL      3907<<ASSIGN   3908>>DOWHILE  3908>>DOWHILE  3910<<ASSIGN   3910>>ASSIGN   3939<<ASSIGN
      3945<<ASSIGN   3949<<ASSIGN   3981>>IF       3984>>IF       4021>>IF       4021>>IF       4041>>DOINDEX
      4054>>ASSIGN   4065>>IF       4070>>IF       4071>>CALL     4072>>ASSIGN   4089<>CALL     4100<>CALL
      4146>>ASSIGN
DEL_LEVEL_COUNT
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:197  
      2933**DCL      4024<<ASSIGN   4084<<ASSIGN   4084>>ASSIGN   4095<<ASSIGN   4095>>ASSIGN   4100<>CALL
      4291>>ASSIGN
DEL_RANGE
      2871**DCL      3915<<ASSIGN   4060<>CALL     4100<>CALL     4308<>CALL
DEL_RANGE.ENDD
      2913**DCL      3906<<ASSIGN   3916>>IF       3921>>IF       3933>>IF
DEL_RANGE.ENDD.EOF
      2929**DCL      3916>>IF       3921>>IF       3925>>IF       3930>>IF       4058>>IF
DEL_RANGE.ENDD.KEY
      2925**DCL      3921>>IF       3974>>IF
DEL_RANGE.ENDD.KEY.REP#
      2927**DCL      3971>>IF
DEL_RANGE.ENDD.KEY.V$
      2927**DCL      3971>>ASSIGN   3971--ASSIGN
DEL_RANGE.START
      2885**DCL      3905<<ASSIGN   3916>>IF       3920>>IF       3926>>IF       3934>>IF       4037<>CALL
DEL_RANGE.START.EOF
      2901**DCL      3916>>IF       3926>>IF       3930>>IF       4056>>IF
DEL_RANGE.START.KEY
      2897**DCL      3908>>DOWHILE  3926>>IF       3934>>IF       3934>>IF       3948>>IF
DEL_RANGE.START.KEY.REP#
      2899**DCL      3960>>IF
DEL_RANGE.START.KEY.V$
      2899**DCL      3960>>ASSIGN   3960--ASSIGN
DEL_START_KEY$
      2936**DCL      3441--IMP-PTR  3960<<ASSIGN   3960<<ASSIGN   3974>>IF       3974>>IF
EQUALS$STREAM
      3335**DCL      4292<>CALL
EQUALS$STREAM.PORT$
      3361**DCL      4299>>CALL
FAILURE IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4211**DCL      4278<<ASSIGN   4295<<ASSIGN   4301<<ASSIGN   4311>>IF
FLUSH_PORT
      2938**DCL      4004<<ASSIGN   4009<<ASSIGN   4014>>IF
HISTORY$STREAM.PORT$
      3255**DCL      3990>>IF       3991>>IF
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:198  
HISTORY_ENABLED
      2939**DCL      3987<<ASSIGN   3992<<ASSIGN   3994>>IF
INDX
      2934**DCL      3947<<DOINDEX  3948>>IF       3949>>ASSIGN   3960>>IF       3960>>ASSIGN   3960>>ASSIGN
      3971>>IF       3971>>ASSIGN   3971>>ASSIGN   3974>>IF       4041<<DOINDEX  4050>>IF       4050>>ASSIGN
      4050>>ASSIGN   4050>>ASSIGN   4050>>ASSIGN
LEVEL
      2935**DCL      4006<<DOINDEX  4007>>IF       4007>>IF
LOCATION_PTRS
      2948**DCL      4025<<ASSIGN   4060<>CALL
LOCATION_PTRS.COUNT#
      2952**DCL      4054<<ASSIGN
LOCATION_PTRS.KEY$
      2952**DCL      4050<<ASSIGN   4050<<ASSIGN
NODE_WRITER$$
      2955**DCL      4072<<ASSIGN   4074>>IF       4080>>CALL
NODE_WRITER_FAILED
      4154**LABEL    4080--CALLALT
NOT_WITHIN_RANGE
      4098**LABEL    4060--CALLALT
OALLOC_FAILED
      4146**LABEL    4115--CALLALT  4123--CALLALT  4131--CALLALT  4140--CALLALT
OALLOC_FAILED IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4311**LABEL    4289--CALLALT
OCLEAR_LOCATION_FAILED IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4311**LABEL    4279--CALLALT
OCOPY_LOCATION_FAILED IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4311**LABEL    4281--CALLALT
OFREE_FAILED IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4311**LABEL    4296--CALLALT
PFLUSH_FAILED
      4146**LABEL    4015--CALLALT
PORT
      3038**DCL      4015<>CALL     4037<>CALL     4080<>CALL     4089<>CALL     4100<>CALL
PORT.CURRENT
      3091**DCL      4087>>ASSIGN   4088>>ASSIGN   4281<>CALL
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:199  
PORT.CURRENT.EOF
      3107**DCL      4039>>IF
PORT.CURRENT.KEY.REP#
      3105**DCL      4050>>IF
PORT.CURRENT.KEY.V$
      3105**DCL      4050>>ASSIGN   4050--ASSIGN
PORT.DCB#
      3065**DCL      3981>>IF       4064>>IF       4135>>ASSIGN
PORT.EXIST#
      3064**DCL      3897>>IF       3898<>CALL     3991>>IF
PORT.FILE_KEY
      3077**DCL      4308<>CALL
PORT.LAST_OP#
      3066**DCL      4083<<ASSIGN
PORT.LEVEL.DATA_MODIFIED
      3125**DCL      4007>>IF
PORT.LEVEL.INTERNAL$
      3125**DCL      4065>>IF       4146>>ASSIGN
PORT.LEVEL.ORG#
      3109**DCL      3981>>IF
PORT.LEVEL.SPEC_MODIFIED
      3125**DCL      4007>>IF
PORT.LEVEL.SPEC_TYPE#
      3109**DCL      4021>>IF       4021>>IF       4070>>IF       4071<>CALL     4072>>ASSIGN
PORT.STRUCTURE$
      3066**DCL      3899>>ASSIGN
PREAD_FAILED
      4146**LABEL    4037--CALLALT
PREDEF_COUNT
      2956**DCL      4089<>CALL     4095>>ASSIGN
PREDEF_RANGE
      2965**DCL      4089<>CALL
PREDEF_RANGE.ENDD
      3007**DCL      4088<<ASSIGN
PREDEF_RANGE.START
      2979**DCL      4087<<ASSIGN
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:200  
RANGE
      2575**DCL        93--PROC     3896<>CALL     3901--IF       3915>>ASSIGN
RDELETE_FAILED IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4311**LABEL    4308--CALLALT
RECORDS$DELETED IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4238**DCL      4292<>CALL     4296<>CALL
RECORDS$DELETED.V# IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4272**DCL      4291<<ASSIGN
RECORDS_DELETED$ IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4227**DCL      4238--IMP-PTR  4289<>CALL     4291>>ASSIGN   4292>>CALL     4296>>CALL
SAVE_ACCESSOR_PRIV IN PROCEDURE CLEAN_UP_AFTER_DELETE
      4212**DCL      4287<<ASSIGN   4303>>ASSIGN
STREAM
      2469**DCL        93--PROC     3896<>CALL     3988--IF       4109<>CALL
STREAM.CURRENT
      2520**DCL      3905>>ASSIGN   3906>>ASSIGN   4279<>CALL     4281<>CALL
STREAM.CURRENT.EOF
      2536**DCL      3903>>IF
STREAM.PORT$
      2495**DCL      3038--IMP-PTR  3897>>IF       3898>>CALL     3899>>ASSIGN   3981>>IF       3981>>IF
      4007>>IF       4007>>IF       4015>>CALL     4021>>IF       4021>>IF       4037>>CALL     4039>>IF
      4050>>IF       4050>>ASSIGN   4050>>ASSIGN   4064>>IF       4065>>IF       4070>>IF       4071>>CALL
      4072>>ASSIGN   4080>>CALL     4083>>ASSIGN   4087>>ASSIGN   4088>>ASSIGN   4089>>CALL     4100>>CALL
      4135>>ASSIGN   4146>>ASSIGN   4281>>CALL     4308>>CALL
STREAM.PROTECT
      2495**DCL      3984>>IF
STRUCTURE$NODE.COUNT#
      3219**DCL      3908>>DOWHILE  3945>>ASSIGN   3947>>DOINDEX  4006>>DOINDEX
STRUCTURE_NODE$
      2862**DCL      3136--IMP-PTR  3899<<ASSIGN   3908>>DOWHILE  3945>>ASSIGN   3947>>DOINDEX  4006>>DOINDEX
SUBST$POINTER.OBJECT.CLASS#
      3573**DCL      4145<<ASSIGN
SUBST$POINTER.V$
      3575**DCL      4146<<ASSIGN
SUBST_FIELD$
      3027**DCL      3549--IMP-PTR  4144<<ASSIGN   4145>>ASSIGN   4146>>ASSIGN
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:201  
VD$BUFFER.LENGTH#
      3690**DCL      3692--IMP-SIZ
VD$ERR
      3488**DCL      4144--ASSIGN
VD$ERR.DCB#
      3530**DCL      4135<<ASSIGN
VD$ERR.ERR.CODE#
      3527**DCL      4117<<ASSIGN   4125<<ASSIGN   4133<<ASSIGN   4142<<ASSIGN
VD$ERR.FLAGLEV#
      3530**DCL      4118<<ASSIGN   4126<<ASSIGN   4134<<ASSIGN   4143<<ASSIGN
VD$FILE_NODE.ACCESS
      3743**DCL      4065>>IF
VD$FILE_NODE.DESC.KEY
      3768**DCL      4146--ASSIGN
VD$PORT
      3798**DCL      4299<>CALL
VD$TEXTC_REMOTE.LENGTH#
      3632**DCL      3634--IMP-SIZ  3960--ASSIGN   3971--ASSIGN   4050--ASSIGN
VDA$LWRITE
      2642**DCL-ENT  4292--CALL
VDA$PDELETE
      2641**DCL-ENT  4089--CALL     4100--CALL
VDA$PFLUSH
      2640**DCL-ENT  4015--CALL     4299--CALL
VDA$PREAD
      2639**DCL-ENT  4037--CALL
VDG$COMPARE_PTRS_W_RANGE
      2644**DCL-ENT  4060--CALL
VDG$EBREAK_ACKNOWLEDGE
      2653**DCL-ENT  3892--CALL
VDG$ESCREECH
      2652**DCL-ENT  3898--CALL     3904--CALL     4071--CALL
VDG$MACC_LDELETE
      2650**DCL-ENT  3896--CALL
VDG$MACC_RETURN
      2651**DCL-ENT  4109--CALL
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:202  
VDG$OALLOC
      2647**DCL-ENT  4115--CALL     4123--CALL     4131--CALL     4140--CALL     4289--CALL
VDG$OCLEAR_LOCATION
      2646**DCL-ENT  4279--CALL
VDG$OCOPY_LOCATION
      2645**DCL-ENT  4281--CALL
VDG$OFREE
      2648**DCL-ENT  4296--CALL
VDP$RDELETE
      2643**DCL-ENT  4308--CALL
VD_$$MON_ACC.V#
      2763**DCL      3895>>IF       4108>>IF
VD_6E.EQUALS$
      2669**DCL      3335--IMP-PTR  4292>>CALL     4299>>CALL
VD_6E.HISTORY$
      2669**DCL      3229--IMP-PTR  3988>>IF       3988>>IF       3990>>IF       3991>>IF
VD_6E.INTERRUPT.STATE#
      2688**DCL      3891>>IF
VD_ACCESSOR_PRIV
      2766**DCL      4287>>ASSIGN   4288<<ASSIGN   4303<<ASSIGN
VD_ACCESSOR_PRIV.ACCESS
      2778**DCL      4065>>IF
VD_ERR$
      3026**DCL      3488--IMP-PTR  4115<>CALL     4117>>ASSIGN   4118>>ASSIGN   4123<>CALL     4125>>ASSIGN
      4126>>ASSIGN   4131<>CALL     4133>>ASSIGN   4134>>ASSIGN   4135>>ASSIGN   4140<>CALL     4142>>ASSIGN
      4143>>ASSIGN   4144>>ASSIGN
VD_KEY_NUMERIC_BOF
      2789**DCL      3934>>IF
VD_LOC_$RECORDS_DELETED
      2701**DCL      4292<>CALL
VD_NODE_WRITERS$$
      2692**DCL      4072>>ASSIGN
WHILE_WITHIN_RANGE
      4028**LABEL    4040--EXIT     4057--EXIT
ZERO_BUFFER
      2825**DCL      4080<>CALL
PL6.E3A0      #003=VDA$LDELETE File=VDA$LOWER.:VDA5TSI                           FRI 07/04/97 11:06 Page:203  
ZERO_SPEC
      2798**DCL      4080<>CALL

PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:204  
     1563        1        /*T***********************************************************/
     1564        2        /*T*                                                         */
     1565        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1566        4        /*T*                                                         */
     1567        5        /*T***********************************************************/
     1568        6
     1569        7        /*D* NAME: VDA$LSAVE_OLD_NODE
     1570        8            PARAMTERS:
     1571        9                STREAM - VD$STREAM to use; must not be the stream for the
     1572       10                    History file.  STREAM must be positioned to the old node;
     1573       11                    STREAM's port must contain the old node if NODE_EXISTS = %TRUE.
     1574       12                WRITE_LEVEL specifies the level # of the old node.
     1575       13                NODE_EXISTS - A BIT(1) ALIGNED flag.  If %TRUE, STREAM's PORT
     1576       14                    must contain the old node.
     1577       15                    If NODE_EXISTS = %FALSE, PORT's values are ignored.
     1578       16            INPUT:
     1579       17                VD_6E.HISTORY$ must point to the stream for the History file,
     1580       18                    which must be open.
     1581       19            OUTPUT:
     1582       20                The History file will have a record appended to its end,
     1583       21                    containing a copy of the old node, ready to be encoded
     1584       22                    if necessary.  Note that this record is not encoded by
     1585       23                    VDA$LSAVE_OLD_NODE; the record is encoded only when
     1586       24                    it is written to an external file (which could happen
     1587       25                    as part of the VDA$LWRITE performed by this routine, or
     1588       26                    it could happen much later, if ever).
     1589       27            DESCRIPTION:
     1590       28                Allocate the VD$ENCODED_NODE structure, and build its keys.
     1591       29                If the old node exists, make new copies of its Spec and Data
     1592       30                    components and hang them off the encoded node.
     1593       31                    (We must make new copies, rather than just steal the old
     1594       32                    ones from the Port, 'cause the NODE_WRITER$$ needs to
     1595       33                    see the components it's replacing.)
     1596       34                Write the VD$ENCODED_NODE to the end of the History file.
     1597       35        */
     1598       36
     1599       37        VDA$LSAVE_OLD_NODE: PROC (STREAM, WRITE_LEVEL, NODE_EXISTS) ALTRET;
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:205  
     1600       38
     1601       39
     1602       40        %INCLUDE VD_MACROS_M;
     1603     2255        %INCLUDE VD_PERR_C;
     1604     2403
     1605     2404        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     1606     2510    1   DCL WRITE_LEVEL SBIN;
     1607     2511    1   DCL NODE_EXISTS BIT(1) ALIGNED;
     1608     2512
     1609     2513
     1610     2514    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
     1611     2515    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
     1612     2516    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1613     2517    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1614     2518    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1615     2519    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1616     2520    1   DCL VDG$ESCREECH        ENTRY (3);
     1617     2521
     1618     2522
     1619     2523        %VD_6E (STCLASS=SYMREF);
     1620     2559
     1621     2560
     1622     2561        %VD_LOCATION (NAME=HISTORY_EOF, STCLASS=CONSTANT, IEOF=%TRUE);
     1623     2601
     1624     2602
     1625     2603
     1626     2604    1   DCL ENCODED_NODE$ PTR;
     1627     2605
     1628     2606
     1629     2607        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
     1630     2705        %VD$ENCODED_NODE (NAME=ENCODED$NODE, STCLASS="BASED(ENCODED_NODE$)");
     1631     2826        %VD$STREAM (NAME=HISTORY$STREAM, STCLASS="BASED(VD_6E.HISTORY$)");
     1632     2932        %VD$TEXTC_REMOTE;
     1633     2993        %VD$BUFFER;
     1634     3051        %VD$PORT;
     1635     3149
     1636     3150
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:206  
     1637     3151
     1638     3152    1           IF PORT.EXIST# = 0
     1639     3153    1             OR VD_6E.HISTORY$ = ADDR(NIL) THEN
     1640     3154    1              CALL VDG$ESCREECH (PORT.EXIST#);
     1641     3155
     1642     3156    1           CALL VDG$OALLOC (%CLS_ENCODED_NODE, ENCODED_NODE$)
     1643     3157    1             ALTRET (OALLOC_FAILED);
     1644     3158
     1645     3159                %COPYKEY (FKEY=STREAM.FILE_KEY, TKEY=ENCODED$NODE.DESC.FILE_KEY);
     1646     3175
     1647     3176    1           CALL VDG$OCOPY_LOCATION (STREAM.CURRENT, ENCODED$NODE.DESC.LOCATION)
     1648     3177    1             ALTRET (OCOPY_LOCATION_FAILED);
     1649     3178
     1650     3179    2           IF NODE_EXISTS THEN DO;
     1651     3180                   %COPYSPEC (FSPEC=PORT.LEVEL.SPEC, FINDX=WRITE_LEVEL,
     1652     3181                   TSPEC=ENCODED$NODE.DESC.SPEC);
     1653     3197
     1654     3198    3              IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;
     1655     3199    3                 CALL VDG$OCOPY (PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER,
     1656     3200    3                   ENCODED$NODE.DESC.DATA$)
     1657     3201    3                   ALTRET (OCOPY_FAILED);
     1658     3202    3                 END;
     1659     3203    2              END;
     1660     3204    1           CALL VDA$LWRITE (HISTORY$STREAM, HISTORY_EOF, , ENCODED$NODE)
     1661     3205    1             ALTRET (LWRITE_FAILED);
     1662     3206    1           CALL VDA$PFLUSH (HISTORY$STREAM.PORT$->VD$PORT, %TO_PRESENTER)
     1663     3207    1             ALTRET (PFLUSH_FAILED);
     1664     3208
     1665     3209    1           RETURN;
     1666     3210
     1667     3211
     1668     3212
     1669     3213    1   LWRITE_FAILED:
     1670     3214    1           CALL VDG$OFREE (ENCODED$NODE)
     1671     3215    1             ALTRET (OFREE_FAILED);
     1672     3216    1           ALTRETURN;
     1673     3217
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:207  
     1674     3218
     1675     3219    1   PFLUSH_FAILED: ;
     1676     3220    1   OALLOC_FAILED: ;
     1677     3221    1   OFREE_FAILED: ;
     1678     3222    1   OCOPY_FAILED: ;
     1679     3223    1   OCOPY_LOCATION_FAILED: ;
     1680     3224    1           ALTRETURN;
     1681     3225
     1682     3226    1   END VDA$LSAVE_OLD_NODE;

PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:208  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$LSAVE_OLD_NODE.

   Procedure VDA$LSAVE_OLD_NODE requires 131 words for executable code.
   Procedure VDA$LSAVE_OLD_NODE requires 12 words of local(AUTO) storage.

    No errors detected in file VDA$LOWER.:VDA5TSI    .

PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:209  

 Object Unit name= VDA$LSAVE_OLD_NODE                         File name= VDA$LOWER.:VDA5TOU
 UTS= JUL 04 '97 11:06:43.00 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS     11     13  VDA$LSAVE_OLD_NODE
    1   Proc  even  none   131    203  VDA$LSAVE_OLD_NODE
    2  RoData even  none     4      4  VDA$LSAVE_OLD_NODE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  VDA$LSAVE_OLD_NODE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VDG$ESCREECH
 yes     yes           Std       3 VDG$OALLOC
 yes     yes           Std       4 VDA$LWRITE
 yes     yes           Std       2 VDG$OCOPY
 yes     yes           Std       2 VDG$OCOPY_LOCATION
 yes     yes           Std       1 VDG$OFREE
 yes     yes           Std       2 VDA$PFLUSH
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:210  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VD_6E                                 B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:211  


     1563        1        /*T***********************************************************/
     1564        2        /*T*                                                         */
     1565        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1566        4        /*T*                                                         */
     1567        5        /*T***********************************************************/
     1568        6
     1569        7        /*D* NAME: VDA$LSAVE_OLD_NODE
     1570        8            PARAMTERS:
     1571        9                STREAM - VD$STREAM to use; must not be the stream for the
     1572       10                    History file.  STREAM must be positioned to the old node;
     1573       11                    STREAM's port must contain the old node if NODE_EXISTS = %TRUE.
     1574       12                WRITE_LEVEL specifies the level # of the old node.
     1575       13                NODE_EXISTS - A BIT(1) ALIGNED flag.  If %TRUE, STREAM's PORT
     1576       14                    must contain the old node.
     1577       15                    If NODE_EXISTS = %FALSE, PORT's values are ignored.
     1578       16            INPUT:
     1579       17                VD_6E.HISTORY$ must point to the stream for the History file,
     1580       18                    which must be open.
     1581       19            OUTPUT:
     1582       20                The History file will have a record appended to its end,
     1583       21                    containing a copy of the old node, ready to be encoded
     1584       22                    if necessary.  Note that this record is not encoded by
     1585       23                    VDA$LSAVE_OLD_NODE; the record is encoded only when
     1586       24                    it is written to an external file (which could happen
     1587       25                    as part of the VDA$LWRITE performed by this routine, or
     1588       26                    it could happen much later, if ever).
     1589       27            DESCRIPTION:
     1590       28                Allocate the VD$ENCODED_NODE structure, and build its keys.
     1591       29                If the old node exists, make new copies of its Spec and Data
     1592       30                    components and hang them off the encoded node.
     1593       31                    (We must make new copies, rather than just steal the old
     1594       32                    ones from the Port, 'cause the NODE_WRITER$$ needs to
     1595       33                    see the components it's replacing.)
     1596       34                Write the VD$ENCODED_NODE to the end of the History file.
     1597       35        */
     1598       36
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:212  
     1599       37        VDA$LSAVE_OLD_NODE: PROC (STREAM, WRITE_LEVEL, NODE_EXISTS) ALTRET;

     37  1 000000   000000 700200 xent  VDA$LSAVE_O* TSX0  ! X66_AUTO_3
         1 000001   000014 000003                    ZERO    12,3

     1600       38
     1601       39
     1602       40        %INCLUDE VD_MACROS_M;
     1603     2255        %INCLUDE VD_PERR_C;
     1604     2403
     1605     2404        %VD$STREAM (NAME=STREAM, STCLASS=PARAM);
     1606     2510    1   DCL WRITE_LEVEL SBIN;
     1607     2511    1   DCL NODE_EXISTS BIT(1) ALIGNED;
     1608     2512
     1609     2513
     1610     2514    1   DCL VDA$LWRITE          ENTRY (4) ALTRET;
     1611     2515    1   DCL VDA$PFLUSH          ENTRY (2) ALTRET;
     1612     2516    1   DCL VDG$OCOPY           ENTRY (2) ALTRET;
     1613     2517    1   DCL VDG$OCOPY_LOCATION  ENTRY (2) ALTRET;
     1614     2518    1   DCL VDG$OALLOC          ENTRY (3) ALTRET;
     1615     2519    1   DCL VDG$OFREE           ENTRY (1) ALTRET;
     1616     2520    1   DCL VDG$ESCREECH        ENTRY (3);
     1617     2521
     1618     2522
     1619     2523        %VD_6E (STCLASS=SYMREF);
     1620     2559
     1621     2560
     1622     2561        %VD_LOCATION (NAME=HISTORY_EOF, STCLASS=CONSTANT, IEOF=%TRUE);
     1623     2601
     1624     2602
     1625     2603
     1626     2604    1   DCL ENCODED_NODE$ PTR;
     1627     2605
     1628     2606
     1629     2607        %VD$PORT (NAME=PORT, STCLASS="BASED(STREAM.PORT$)");
     1630     2705        %VD$ENCODED_NODE (NAME=ENCODED$NODE, STCLASS="BASED(ENCODED_NODE$)");
     1631     2826        %VD$STREAM (NAME=HISTORY$STREAM, STCLASS="BASED(VD_6E.HISTORY$)");
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:213  
     1632     2932        %VD$TEXTC_REMOTE;
     1633     2993        %VD$BUFFER;
     1634     3051        %VD$PORT;
     1635     3149
     1636     3150
     1637     3151
     1638     3152    1           IF PORT.EXIST# = 0

   3152  1 000002   200003 470500                    LDP0    @STREAM,,AUTO
         1 000003   000001 471500                    LDP1    1,,PR0
         1 000004   100003 720100                    LXL0    3,,PR1
         1 000005   000011 600000 1                  TZE     s:3154
         1 000006   000000 236000 xsym               LDQ     VD_6E
         1 000007   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000010   000021 601000 1                  TNZ     s:3156

     1639     3153    1             OR VD_6E.HISTORY$ = ADDR(NIL) THEN
     1640     3154    1              CALL VDG$ESCREECH (PORT.EXIST#);

   3154  1 000011   200011 451500                    STP1    ENCODED_NODE$+3,,AUTO
         1 000012   200011 236100                    LDQ     ENCODED_NODE$+3,,AUTO
         1 000013   000000 036000 2                  ADLQ    0
         1 000014   200010 756100                    STQ     ENCODED_NODE$+2,,AUTO
         1 000015   200010 630500                    EPPR0   ENCODED_NODE$+2,,AUTO
         1 000016   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000017   000000 701000 xent               TSX1    VDG$ESCREECH
         1 000020   000000 011000                    NOP     0

     1641     3155
     1642     3156    1           CALL VDG$OALLOC (%CLS_ENCODED_NODE, ENCODED_NODE$)

   3156  1 000021   200006 630500                    EPPR0   ENCODED_NODE$,,AUTO
         1 000022   200011 450500                    STP0    ENCODED_NODE$+3,,AUTO
         1 000023   000001 236000 2                  LDQ     1
         1 000024   200010 756100                    STQ     ENCODED_NODE$+2,,AUTO
         1 000025   200010 630500                    EPPR0   ENCODED_NODE$+2,,AUTO
         1 000026   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:214  
         1 000027   000000 701000 xent               TSX1    VDG$OALLOC
         1 000030   000202 702000 1                  TSX2    PFLUSH_FAILED

     1643     3157    1             ALTRET (OALLOC_FAILED);
     1644     3158
     1645     3159                %COPYKEY (FKEY=STREAM.FILE_KEY, TKEY=ENCODED$NODE.DESC.FILE_KEY);

   3172  1 000031   200003 470500                    LDP0    @STREAM,,AUTO
         1 000032   200006 471500                    LDP1    ENCODED_NODE$,,AUTO
         1 000033   000100 100500                    MLR     fill='000'O
         1 000034   000004 000010                    ADSC9   4,,PR0                   cn=0,n=8
         1 000035   100012 000010                    ADSC9   10,,PR1                  cn=0,n=8

   3172  1 000036   000004 720100                    LXL0    4,,PR0
         1 000037   000002 100003                    CMPX0   2,DU
         1 000040   000054 601000 1                  TNZ     s:3176

   3172  1 000041   000005 473500                    LDP3    5,,PR0
         1 000042   200006 236100                    LDQ     ENCODED_NODE$,,AUTO
         1 000043   000013 036003                    ADLQ    11,DU
         1 000044   200011 756100                    STQ     ENCODED_NODE$+3,,AUTO
         1 000045   200010 453500                    STP3    ENCODED_NODE$+2,,AUTO
         1 000046   200010 630500                    EPPR0   ENCODED_NODE$+2,,AUTO
         1 000047   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000050   000000 701000 xent               TSX1    VDG$OCOPY
         1 000051   000053 702000 1                  TSX2    s:3173
         1 000052   000054 710000 1                  TRA     s:3176

   3173  1 000053   000000 702200 xent               TSX2  ! X66_AALT

     1646     3175
     1647     3176    1           CALL VDG$OCOPY_LOCATION (STREAM.CURRENT, ENCODED$NODE.DESC.LOCATION)

   3176  1 000054   200006 236100                    LDQ     ENCODED_NODE$,,AUTO
         1 000055   000014 036003                    ADLQ    12,DU
         1 000056   200011 756100                    STQ     ENCODED_NODE$+3,,AUTO
         1 000057   200003 236100                    LDQ     @STREAM,,AUTO
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:215  
         1 000060   000006 036003                    ADLQ    6,DU
         1 000061   200010 756100                    STQ     ENCODED_NODE$+2,,AUTO
         1 000062   200010 630500                    EPPR0   ENCODED_NODE$+2,,AUTO
         1 000063   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000064   000000 701000 xent               TSX1    VDG$OCOPY_LOCATION
         1 000065   000202 702000 1                  TSX2    PFLUSH_FAILED

     1648     3177    1             ALTRET (OCOPY_LOCATION_FAILED);
     1649     3178
     1650     3179    2           IF NODE_EXISTS THEN DO;

   3179  1 000066   200005 470500                    LDP0    @NODE_EXISTS,,AUTO
         1 000067   000000 234100                    SZN     0,,PR0
         1 000070   000151 605000 1                  TPL     s:3204

     1651     3180                   %COPYSPEC (FSPEC=PORT.LEVEL.SPEC, FINDX=WRITE_LEVEL,
     1652     3181                   TSPEC=ENCODED$NODE.DESC.SPEC);

   3194  1 000071   200003 471500                    LDP1    @STREAM,,AUTO
         1 000072   100001 473500                    LDP3    1,,PR1
         1 000073   200004 474500                    LDP4    @WRITE_LEVEL,,AUTO
         1 000074   400000 236100                    LDQ     0,,PR4
         1 000075   000007 402007                    MPY     7,DL
         1 000076   000002 736000                    QLS     2
         1 000077   200006 475500                    LDP5    ENCODED_NODE$,,AUTO
         1 000100   000100 100506                    MLR     fill='000'O
         1 000101   300025 000010                    ADSC9   21,Q,PR3                 cn=0,n=8
         1 000102   500026 000010                    ADSC9   22,,PR5                  cn=0,n=8

   3194  1 000103   100001 473500                    LDP3    1,,PR1
         1 000104   400000 236100                    LDQ     0,,PR4
         1 000105   000007 402007                    MPY     7,DL
         1 000106   300025 720106                    LXL0    21,QL,PR3
         1 000107   000002 100003                    CMPX0   2,DU
         1 000110   000126 601000 1                  TNZ     s:3198

   3194  1 000111   400000 236100                    LDQ     0,,PR4
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:216  
         1 000112   000007 402007                    MPY     7,DL
         1 000113   300026 476506                    LDP6    22,QL,PR3
         1 000114   200006 236100                    LDQ     ENCODED_NODE$,,AUTO
         1 000115   000027 036003                    ADLQ    23,DU
         1 000116   200011 756100                    STQ     ENCODED_NODE$+3,,AUTO
         1 000117   200010 456500                    STP6    ENCODED_NODE$+2,,AUTO
         1 000120   200010 630500                    EPPR0   ENCODED_NODE$+2,,AUTO
         1 000121   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000122   000000 701000 xent               TSX1    VDG$OCOPY
         1 000123   000125 702000 1                  TSX2    s:3195
         1 000124   000126 710000 1                  TRA     s:3198

   3195  1 000125   000000 702200 xent               TSX2  ! X66_AALT

     1653     3197
     1654     3198    3              IF PORT.LEVEL.DATA$ (WRITE_LEVEL) ~= ADDR(NIL) THEN DO;

   3198  1 000126   200003 470500                    LDP0    @STREAM,,AUTO
         1 000127   000001 471500                    LDP1    1,,PR0
         1 000130   200004 473500                    LDP3    @WRITE_LEVEL,,AUTO
         1 000131   300000 236100                    LDQ     0,,PR3
         1 000132   000007 402007                    MPY     7,DL
         1 000133   100027 236106                    LDQ     23,QL,PR1
         1 000134   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000135   000151 600000 1                  TZE     s:3204

     1655     3199    3                 CALL VDG$OCOPY (PORT.LEVEL.DATA$ (WRITE_LEVEL) -> VD$BUFFER,

   3199  1 000136   300000 236100                    LDQ     0,,PR3
         1 000137   000007 402007                    MPY     7,DL
         1 000140   100027 474506                    LDP4    23,QL,PR1
         1 000141   200006 236100                    LDQ     ENCODED_NODE$,,AUTO
         1 000142   000030 036003                    ADLQ    24,DU
         1 000143   200011 756100                    STQ     ENCODED_NODE$+3,,AUTO
         1 000144   200010 454500                    STP4    ENCODED_NODE$+2,,AUTO
         1 000145   200010 630500                    EPPR0   ENCODED_NODE$+2,,AUTO
         1 000146   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:217  
         1 000147   000000 701000 xent               TSX1    VDG$OCOPY
         1 000150   000202 702000 1                  TSX2    PFLUSH_FAILED

     1656     3200    3                   ENCODED$NODE.DESC.DATA$)
     1657     3201    3                   ALTRET (OCOPY_FAILED);
     1658     3202    3                 END;

     1659     3203    2              END;

     1660     3204    1           CALL VDA$LWRITE (HISTORY$STREAM, HISTORY_EOF, , ENCODED$NODE)

   3204  1 000151   200006 236100                    LDQ     ENCODED_NODE$,,AUTO
         1 000152   000001 235000 xsym               LDA     B_VECTNIL+1
         1 000153   200012 757100                    STAQ    ENCODED_NODE$+4,,AUTO
         1 000154   000002 236000 2                  LDQ     2
         1 000155   000000 235000 xsym               LDA     VD_6E
         1 000156   200010 757100                    STAQ    ENCODED_NODE$+2,,AUTO
         1 000157   200010 630500                    EPPR0   ENCODED_NODE$+2,,AUTO
         1 000160   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000161   000000 701000 xent               TSX1    VDA$LWRITE
         1 000162   000175 702000 1                  TSX2    LWRITE_FAILED

     1661     3205    1             ALTRET (LWRITE_FAILED);
     1662     3206    1           CALL VDA$PFLUSH (HISTORY$STREAM.PORT$->VD$PORT, %TO_PRESENTER)

   3206  1 000163   000000 470400 xsym               LDP0    VD_6E
         1 000164   000001 471500                    LDP1    1,,PR0
         1 000165   000003 236000 2                  LDQ     3
         1 000166   200011 756100                    STQ     ENCODED_NODE$+3,,AUTO
         1 000167   200010 451500                    STP1    ENCODED_NODE$+2,,AUTO
         1 000170   200010 630500                    EPPR0   ENCODED_NODE$+2,,AUTO
         1 000171   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000172   000000 701000 xent               TSX1    VDA$PFLUSH
         1 000173   000202 702000 1                  TSX2    PFLUSH_FAILED

     1663     3207    1             ALTRET (PFLUSH_FAILED);
     1664     3208
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:218  
     1665     3209    1           RETURN;

   3209  1 000174   000000 702200 xent               TSX2  ! X66_ARET

     1666     3210
     1667     3211
     1668     3212
     1669     3213    1   LWRITE_FAILED:
     1670     3214    1           CALL VDG$OFREE (ENCODED$NODE)

   3214  1 000175   200006 630500       LWRITE_FAIL* EPPR0   ENCODED_NODE$,,AUTO
         1 000176   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000177   000000 701000 xent               TSX1    VDG$OFREE
         1 000200   000202 702000 1                  TSX2    PFLUSH_FAILED

     1671     3215    1             ALTRET (OFREE_FAILED);
     1672     3216    1           ALTRETURN;

   3216  1 000201   000000 702200 xent               TSX2  ! X66_AALT

   3214  1 000202                       PFLUSH_FAIL* null
   3214  1 000202                       OALLOC_FAIL* null
   3214  1 000202                       OFREE_FAILED null
   3214  1 000202                       OCOPY_FAILED null
   3214  1 000202                       OCOPY_LOCAT* null
     1673     3217
     1674     3218
     1675     3219    1   PFLUSH_FAILED: ;
     1676     3220    1   OALLOC_FAILED: ;
     1677     3221    1   OFREE_FAILED: ;
     1678     3222    1   OCOPY_FAILED: ;
     1679     3223    1   OCOPY_LOCATION_FAILED: ;
     1680     3224    1           ALTRETURN;

   3224  1 000202   000000 702200 xent               TSX2  ! X66_AALT
     1681     3225
     1682     3226    1   END VDA$LSAVE_OLD_NODE;
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:219  

PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:220  
--  Include file information  --

   VD_PERR_C.:VDA5TOU  is referenced.
   VD_MACROS_M.:VDA5TOU  is referenced.
   B$JIT_C.:E04TOU  was found in the system file and is never referenced.
   CP_6_C.:E04TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VDA$LSAVE_OLD_NODE.
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:221  

 **** Variables and constants ****

  ****  Section 000 RoData VDA$LSAVE_OLD_NODE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)   r     1 HISTORY_EOF

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @NODE_EXISTS               3-0-0/w PTR         r     1 @STREAM
     4-0-0/w PTR         r     1 @WRITE_LEVEL               6-0-0/w PTR         r     1 ENCODED_NODE$
    *0-0-0/w BIT         r     1 NODE_EXISTS               *0-0-0/w STRC(864)   r     1 STREAM
    *0-0-0/w SBIN        r     1 WRITE_LEVEL

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(22644) r     1 VD_6E

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(900)   r     1 ENCODED$NODE               0-0-0/w STRC(864)   r     1 HISTORY$STREAM
     0-0-0/w STRC(1944)  r     1 PORT                       0-0-0/w ASTR(90)    r     1 VD$BUFFER
     0-0-0/w STRC(1944)  r     1 VD$PORT                    0-0-0/w ASTR(81)    r     1 VD$TEXTC_REMOTE

PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:222  

   Procedure VDA$LSAVE_OLD_NODE requires 131 words for executable code.
   Procedure VDA$LSAVE_OLD_NODE requires 12 words of local(AUTO) storage.

    No errors detected in file VDA$LOWER.:VDA5TSI    .
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:223  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:224  
          MINI XREF LISTING

ENCODED$NODE
      2713**DCL      3204<>CALL     3214<>CALL
ENCODED$NODE.DESC.DATA$
      2823**DCL      3199<>CALL
ENCODED$NODE.DESC.FILE_KEY
      2763**DCL      3172<<ASSIGN
ENCODED$NODE.DESC.FILE_KEY.V$
      2765**DCL      3172<>CALL
ENCODED$NODE.DESC.LOCATION
      2777**DCL      3176<>CALL
ENCODED$NODE.DESC.SPEC
      2819**DCL      3194<<ASSIGN
ENCODED$NODE.DESC.SPEC.V$
      2821**DCL      3194<>CALL
ENCODED_NODE$
      2604**DCL      2713--IMP-PTR  3156<>CALL     3172>>ASSIGN   3172>>CALL     3176>>CALL     3194>>ASSIGN
      3194>>CALL     3199>>CALL     3204>>CALL     3214>>CALL
HISTORY$STREAM
      2834**DCL      3204<>CALL
HISTORY$STREAM.PORT$
      2860**DCL      3206>>CALL
HISTORY_EOF
      2572**DCL      3204<>CALL
LWRITE_FAILED
      3214**LABEL    3204--CALLALT
NODE_EXISTS
      2511**DCL        37--PROC     3179>>IF
OALLOC_FAILED
      3214**LABEL    3156--CALLALT
OCOPY_FAILED
      3214**LABEL    3199--CALLALT
OCOPY_LOCATION_FAILED
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:225  
      3214**LABEL    3176--CALLALT
OFREE_FAILED
      3214**LABEL    3214--CALLALT
PFLUSH_FAILED
      3214**LABEL    3206--CALLALT
PORT.EXIST#
      2641**DCL      3152>>IF       3154<>CALL
PORT.LEVEL.DATA$
      2702**DCL      3198>>IF       3199>>CALL     3199>>CALL
PORT.LEVEL.SPEC
      2698**DCL      3194>>ASSIGN
PORT.LEVEL.SPEC.REP#
      2700**DCL      3194>>IF
PORT.LEVEL.SPEC.V$
      2700**DCL      3194>>CALL     3194>>CALL
STREAM
      2412**DCL        37--PROC
STREAM.CURRENT
      2463**DCL      3176<>CALL
STREAM.FILE_KEY
      2449**DCL      3172>>ASSIGN
STREAM.FILE_KEY.REP#
      2451**DCL      3172>>IF
STREAM.FILE_KEY.V$
      2451**DCL      3172>>CALL     3172>>CALL
STREAM.PORT$
      2438**DCL      2615--IMP-PTR  3152>>IF       3154>>CALL     3194>>ASSIGN   3194>>IF       3194>>CALL
      3194>>CALL     3198>>IF       3199>>CALL     3199>>CALL
VD$BUFFER
      3018**DCL      3199<>CALL
VD$BUFFER.LENGTH#
      3044**DCL      3046--IMP-SIZ  3199>>CALL
VD$PORT
      3059**DCL      3206<>CALL
VD$TEXTC_REMOTE
      2957**DCL      3172<>CALL     3194<>CALL
PL6.E3A0      #004=VDA$LSAVE_OLD_NODE File=VDA$LOWER.:VDA5TSI                    FRI 07/04/97 11:06 Page:226  
VD$TEXTC_REMOTE.LENGTH#
      2986**DCL      2988--IMP-SIZ  3172>>CALL     3194>>CALL
VDA$LWRITE
      2514**DCL-ENT  3204--CALL
VDA$PFLUSH
      2515**DCL-ENT  3206--CALL
VDG$ESCREECH
      2520**DCL-ENT  3154--CALL
VDG$OALLOC
      2518**DCL-ENT  3156--CALL
VDG$OCOPY
      2516**DCL-ENT  3172--CALL     3194--CALL     3199--CALL
VDG$OCOPY_LOCATION
      2517**DCL-ENT  3176--CALL
VDG$OFREE
      2519**DCL-ENT  3214--CALL
VD_6E.HISTORY$
      2536**DCL      2834--IMP-PTR  3152>>IF       3204>>CALL     3206>>CALL
WRITE_LEVEL
      2510**DCL        37--PROC     3194>>ASSIGN   3194>>IF       3194>>CALL     3194>>CALL     3198>>IF
      3199>>CALL     3199>>CALL
