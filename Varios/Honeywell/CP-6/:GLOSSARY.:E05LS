

14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          1    
    1      /*M* :GLOSSARY - CP-6 definitions.        */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*X* MEC,MOC,EXM=1,CLM=30,CRM=100         */
    9
   10      /*
   11
   12      The file :GLOSSARY in the CP-6 development source account
   13      is to eventually contain extractable commentary for CP-6 terms.
   14
   15      This file is maintained using plus cards in the same
   16      manner as any source file.  Developers are to add
   17      definitions to this file as time permits.
   18
   19      There is to be a *K* entry for each term being defined.
   20      The *K* commentary should be as brief as possible
   21      while still being meaningful.  Where detailed
   22      documentation of the term being defined exists
   23      the developer should reference that document here
   24      in the glossary and not duplicate the detail here.
   25
   26      When defining a acronym, the term is to be spelled out
   27      before the definition.  A *K* entry should be added for
   28      the term itself.  Because we tend to speak in acronyms
   29      instead of using the full term, the definition should be
   30      included with the *K* entry for the acronym and the entry
   31      for the term should reference the acronym.  For example:
   32
   33        JIT - Job Information Table.  The portion of user context that
   34              contains various accounting, limit and identify information.
   35
   36        Job Information Table - see JIT.
   37
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          2    
   38
   39
   40      A formatted listing of the current glossary may be
   41      obtained as follows:
   42
   43           !C ME OVER *MANUAL
   44           HEADING=
   45           ?
   46           !EOD
   47           !EXTRACT.X
   48           DATA_BASE *DA
   49           EXTRACT :GLOSSARY.:E03SI
   50           MANUAL *MANUAL,*CP6_GLOSSARY
   51           END
   52           !TEXT *CP6_GLOSSARY ON [ ME | LP ]
   53
   54      To get the definition of a single keyword:
   55          !EXTRACT.X
   56          >DA *DA
   57          >REP NAME keyword
   58          >END
   59
   60      */
   61
   62              .brf
   63
   64      /*K* AF - Architecture File.  */
   65
   66                .brf
   67
   68      /*K* AM - Associative Memory.  High speed storage used in address
   69      evaluation; two buffers: 1) a buffer memory of the 64 most recently
   70      referenced page table words (the end product of the mapping look-up
   71      mechanism).  2) a directory memory containing the corresponding first
   72      two vertical address components, working space number and page
   73      number.  */
   74
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          3    
   75                .brf
   76
   77      /*K* ASDT - Address Space Descriptor Table.  An array of 31 segment
   78      descriptors that are loaded into the MMU and define the memory to
   79      which a process has access.  In CP-6 the ASDT is contained within the
   80      HJIT.  LCP6 only  */
   81
   82                .brf
   83
   84      /*K* ASL - Alternate Shared Library.  A special shared processor that
   85      can be called directly from the user program via the CLIMB
   86      instruction.  Its primary use is for the implementation of a data
   87      base manager.  It may also be used to implement other applications
   88      such as I/O graphics packages, etc.  */
   89
   90                .brf
   91
   92      /*K* ASR - Argument Segment Register.  A 72 bit register that holds a
   93      type 1 standard descriptor which describes the argument segment of
   94      the current process.  */
   95
   96                .brf
   97
   98      /*K* Address Space Descriptor Table - see ASDT.  */
   99
  100                .brf
  101
  102      /*K* Alternate Shared Library - see ASL.  */
  103
  104                .brf
  105
  106      /*K* Argument Segment Register - see ASR.  */
  107
  108                .brf
  109
  110      /*K* Associative Memory - see AM.  */
  111
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          4    
  112                .brf
  113
  114      /*K* Base and Bound.  The delimiters of a segment.  The base is the
  115      working space relative origin of the segment and the bound is the
  116      size of the segment (or greatest relative address allowed).  */
  117
  118                .brf
  119
  120      /*K* Climb.  Instruction that provides the Call and Return functions,
  121      and designed around the domain concept.  */
  122
  123                .brf
  124
  125      /*K* DCB - Data Control Block.  1) a data structure used to
  126      communicate information between the monitor and the user about I/O
  127      operations, 2) a PL6 data type.  LCP6 only */
  128
  129                .brf
  130
  131      /*K* DEVICE - the unit of communications hardware treated as a
  132      separate entity by the system.  LCP6 only  */
  133
  134                .brf
  135
  136      /*K* DIGS - Device-Independent Graphics System.  A graphics
  137      programming package for producing computer generated pictures.  */
  138
  139                .brf
  140
  141      /*K* DISK PACK - removable storage device, 'disc' is not acceptable
  142      */
  143
  144                .brf
  145
  146      /*K* DR/AR - Descriptor Registers/Address Registers.  0-7 paired
  147      registers.  */
  148
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          5    
  149                .brf
  150
  151      /*K* DSAR - Data Stack Address Register.  A special purpose register
  152      that points to the "top" of the used portions of the data stack
  153      segment.  DSAR and DSDR are a part of the domain concept, and provide
  154      a mechanism whereby a procedure can temporarily access some scratch
  155      data space which is unique to the application that called it.  */
  156
  157                .brf
  158
  159      /*K* DSDR - Data Stack Descriptor Register.  Locates a data stack
  160      segment, cannot be directly referenced by the application, must hold
  161      a type 0 descriptor with "no save" permission (bit 22 = 0).  */
  162
  163                .brf
  164
  165      /*K* Data Control Block - see DCB.  */
  166
  167                .brf
  168
  169      /*K* Data Stack Address Register - see DSAR.  */
  170
  171                .brf
  172
  173      /*K* Data Stack Descriptor Register - see DSDR.  */
  174
  175                .brf
  176
  177      /*K* Descriptor Controlled Access - a security device mechanism that
  178      provides an application with necessary descriptors, but prevents an
  179      application from acquiring descriptors to segments outside of its
  180      domain.  */
  181
  182                .brf
  183
  184      /*K* Descriptor Registers/Address Registers - see DR/AR.  */
  185
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          6    
  186                .brf
  187
  188      /*K* Descriptor Segment - a segment containing segment descriptors, a
  189      segment defined by a descriptor of type 1 (standard descriptor -
  190      descriptor storage) or of type 3 (standard descriptor with real
  191      working space number - descriptor storage), one of a class of
  192      segments collectively referred to as "descriptor segments".  */
  193
  194                .brf
  195
  196      /*K* Descriptor Stack - provides temporary descriptor space of the
  197      "automatic" storage class.  The argument segment is always assigned
  198      to the descriptor stack, the ASR encompasses the currently available
  199      argument segment.  */
  200
  201                .brf
  202
  203      /*K* Device Independent Graphics System - see DIGS.  */
  204
  205                .brf
  206
  207      /*K* Domain - the segments which a procedure may access, and the
  208      permissions with which it may access them.  The principle
  209      determinants of a domain are the linkage and parameter segments.  */
  210
  211                .brf
  212
  213      /*K* Dribble - an IBEX command which allows the user to record
  214      everything that is displayed on the terminal in a user-specified
  215      file.  */
  216
  217                .brf
  218
  219      /*K* ERASE - data directive, erase whatever value the data has, not
  220      to be used in SCRUB.  */
  221
  222                .brf
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          7    
  223
  224      /*K* Effective Address - the 18 bit word (or 24 bit byte) address
  225      calculated from the Y-field of the instruction, the appropriate index
  226      (or arithmetic) register, and the specified address register.  An
  227      effective address is segment relative.  */
  228
  229                .brf
  230
  231      /*K* Entry Descriptor - a descriptor defined for use with the CLIMB
  232      instruction in making inter-domain transfers.  This descriptor
  233      defines the new domain and the entry point in that domain.  */
  234
  235                .brf
  236
  237      /*K* FCG - Functional Code Group.  Mnemonic for a particular project.
  238      */
  239
  240                .brf
  241
  242      /*K* FPT - Function Parameter Table.  A block of data used for
  243      communication between the monitor and user for all monitor services.
  244      */
  245
  246                .brf
  247
  248      /*K* Function Parameter Table - see FPT.  */
  249
  250                .brf
  251
  252      /*K* Functional Code Group - see FCG.  */
  253
  254                .brf
  255
  256      /*K* HJIT - Housekeeping Job Information Table.  The portion of
  257      context that contains the information required by the L6 hardware;
  258      the Address Space Descriptor Tables, Interrupt Save Areas, and Trap
  259      Save Areas.  LCP6 only  */
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          8    
  260
  261                .brf
  262
  263      /*K* Housekeeping Job Information Table - see HJIT.  */
  264
  265                .brf
  266
  267      /*K* ISR - Instruction Segment Register.  A 72 bit register that
  268      contains a descriptor, used to locate the current instruction
  269      segment.  ISR is logically associated with the Instruction Counter
  270      (IC) register which locates the current instruction.  ISR provides
  271      the function of the former Base Address Register (BAR) which applied
  272      to all memory references while in the slave mode and provided a base
  273      and bound to limit such accesses to the authorized user space.  ISR
  274      also provides privilege control.  Descriptors that are loaded into
  275      the ISR must pass a special set of tests: 1) the descriptor type must
  276      be zero, 2) the Present and Non-empty flags must be ON, 3) the base
  277      and bound must be modulo four, 4) the Execute flag must be ON.  It
  278      frames the Instruction Segment (IS).  */
  279
  280                .brf
  281
  282      /*K* Indirect Descriptor - a descriptor that locates a descriptor
  283      segment containing exactly one descriptor which is an entry
  284      descriptor.  */
  285
  286                .brf
  287
  288      /*K* Instruction Segment Register - see ISR.  */
  289
  290                .brf
  291
  292      /*K* JIT - Job Information Table.  Contains system related
  293      information about an individual CP-6 user.  The JIT accumulates and
  294      retains facts (such as mode account, name, sysid, accounting info)
  295      about a user's session.  LCP6 only  */
  296
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          9    
  297                .brf
  298
  299      /*K* Job Information Table - see JIT.  */
  300
  301                .brf
  302
  303      /*K* LINE NUMBER - a method of referencing data or records within
  304      data files used by various processors such as EDIT, PL6, FORTRAN....
  305      */
  306
  307                .brf
  308
  309      /*K* LINK    processor, CP-V syn: LINK, LOAD, LYNX - processor which
  310      combines object units into run units and satisfies unsatisfied
  311      references by searching libraries and creating DCBs.  */
  312
  313                .brf
  314
  315      /*K* LINK    vt, syn: load - process of combining object units into
  316      run units */
  317
  318                .brf
  319
  320      /*K* LPT - Linear (Dense) Page Table.  One of two mechanisms for
  321      mapping virtual addresses to real.  LPT, wherein page number is used
  322      as an index, has a maximum size of 16K words which in turn will map a
  323      working space of up to 16 million words.  */
  324
  325                .brf
  326
  327      /*K* LS - Linkage Segment.  Provides a segment of read-only
  328      descriptor storage of the general class "static internal" to the
  329      procedures of a domain.  */
  330
  331                .brf
  332
  333      /*K* LSR - Linkage Segment Register.  A 72 bit register that holds a
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          10   
  334      standard descriptor of type 1 which describes the linkage segment of
  335      the current domain.  It frames the Linkage Segment (LS).  */
  336
  337                .brf
  338
  339      /*K* Linear (Dense) Page Table - see LPT.  */
  340
  341                .brf
  342
  343      /*K* Linkage Segment - see LS.  */
  344
  345                .brf
  346
  347      /*K* Linkage Segment Register - see LSR.  */
  348
  349                .brf
  350
  351      /*K* MAD - Master Account Directory.  Contains a list of all
  352      automatically shared accounts, if the account is not in the MAD,
  353      'DP#PSN/' must precede the filename.  */
  354
  355                .brf
  356
  357      /*K* MBZ - Must Be Zero.  */
  358
  359                .brf
  360
  361      /*K* MHJIT - Monitor Housekeeping Job Information Table.  The HJIT
  362      that is mapped when the monitor is in execution, except for monitor
  363      service processing.  Refer to AF document 0574C-0 in Section 26.0.
  364      LCP6 only  */
  365
  366                .brf
  367
  368      /*K* MMU - Memory Management Unit.  The piece of L6 hardware that
  369      provides for the separation of memory into 31 independent segments,
  370      the relocation of each segment independently in physical memory, and
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          11   
  371      the protection of each segment from improper access, based on
  372      software specified attributes.  LCP6 only  */
  373
  374                .brf
  375
  376      /*K* MODULE - an organization of compile unit(s) that live together
  377      within one file to be considered as a part of the monitor or a
  378      processor.  */
  379
  380                .brf
  381
  382      /*K* Mapping - uses one of two mechanisms for mapping virtual
  383      addresses to real, 1) Linear (Dense) Page Table (LPT) or 2)
  384      Psuedo-Associative (Fragmented) Page Table (PPT).  */
  385
  386                .brf
  387
  388      /*K* Master Account Directory - see MAD.  */
  389
  390                .brf
  391
  392      /*K* Master Mode - an intermediate mode that has more access and
  393      capabilities than slave mode but which is more restricted than CP-V's
  394      "master mode".  Master mode differs from slave mode in that three
  395      major functions are permitted: 1) ability to reference memory through
  396      Working Space Register 0 (WSR0), 2) ability to execute instructions
  397      or read data from a housekeeping page, 3) the ability to climb or
  398      transfer to a privileged master mode instruction segment.  */
  399
  400                .brf
  401
  402      /*K* Memory Management - the mapping of logically contiguous
  403      information (e.g.  segments, working spaces) into physically
  404      non-contiguous storage (i.e.  pages).  */
  405
  406                .brf
  407
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          12   
  408      /*K* Memory Management Unit - see MMU.  */
  409
  410                .brf
  411
  412      /*K* NIL    data directive, syn: NULL - means nothing, do nothing,
  413      leave the data field as is.  */
  414
  415                .brf
  416
  417      /*K* OC - Operator Console.  A keyboard device where messages may be
  418      sent and keyins received.  LCP6 only  */
  419
  420                .brf
  421
  422      /*K* ODR - Operand Descriptor Register.  One of eight 72 bit utility
  423      descriptor registers that hold descriptors which describe address
  424      spaces accessible to the current domain, defines the base and size of
  425      segments.  The function of ODR's is similar to having multiple BAR's.
  426      */
  427
  428                .brf
  429
  430      /*K* OR - Option Register.  A 3 bit register that controls the
  431      clearing of data stack space, bypassing cache memory, and bypassing
  432      the safe-store portion of an inward CLIMB.  */
  433
  434                .brf
  435
  436      /*K* OU - Object Unit CP-V syn: reloadable object module (ROM) -
  437      machine language instructions, data, and debug schema output by
  438      processors such as PL6 and FORTRAN.  */
  439
  440                .brf
  441
  442      /*K* Object Unit - see OU.  */
  443
  444                .brf
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          13   
  445
  446      /*K* Operand Address - consists of a segment descriptor and an
  447      effective address (treated by the hardware as segment relative).  */
  448
  449                .brf
  450
  451      /*K* Operand Descriptor Register - see ODR.  */
  452
  453                .brf
  454
  455      /*K* Operand Reference - a two component address: segment and offset.
  456      */
  457
  458                .brf
  459
  460      /*K* Operand Segment - a broad term covering data and procedure
  461      segments and their variants.  A segment defined by a descriptor of
  462      type 0 (standard descriptor - ordinary operand storage), is one of a
  463      class of segments collectively referred to as "operand segments" as
  464      distinguished from descriptor segment.  */
  465
  466                .brf
  467
  468      /*K* Operator Console - see OC.  */
  469
  470                .brf
  471
  472      /*K* Option Register - see OR.  */
  473
  474                .brf
  475
  476      /*K* PAD - Packset Account Directory.  Contains information about
  477      file accounts such as relative disk address etc.  Accounts are added
  478      by PIG.  */
  479
  480                .brf
  481
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          14   
  482      /*K* PDBR - Page Table Directory Base Register.  Locates the page
  483      directory, and can be altered only in the most privileged execution
  484      mode of the processor.  */
  485
  486                .brf
  487
  488      /*K* PPT - Psuedo-Associative (Fragmented) Page Table.  One of two
  489      mechanisms for mapping virtual addresses to real, enable access to
  490      any of the up to 2 (22) pages of working space.  The 22 bit page
  491      number is partitioned into two indices: 1) a 16 bit major index,
  492      called the "key", 2) a six bit minor index, which is the page number
  493      modulo 64, called the "modulo page number".  */
  494
  495                .brf
  496
  497      /*K* PR - Pointer Register.  A convenient term that refers to the nth
  498      (0-7) ODRn, SEGIDn, and ARn as a collective register.  */
  499
  500                .brf
  501
  502      /*K* PROCESSOR - executable code living in :SYS, executing on behalf
  503      of a user, not part of the monitor.  A program becomes a processor
  504      when it is moved to :SYS so that it is invoked by '!name' rather than
  505      '!name.' */
  506
  507                .brf
  508
  509      /*K* PROGRAM - executable code created by a user, not run as a system
  510      processor.  */
  511
  512                .brf
  513
  514      /*K* PSN - Pack Set Name.  Logical division of disk packs within the
  515      File Management System.  A name of 1-6 characters by which a pack set
  516      is known.  */
  517
  518                .brf
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          15   
  519
  520      /*K* PSN# - the number of a pack set as it is located within a user's
  521      search list.  */
  522
  523                .brf
  524
  525      /*K* PSR - Parameter Segment Register.  A 72 bit register that holds
  526      a type 1 standard descriptor which frames the current process
  527      parameter segment.  The PSR provides the application with a uniform
  528      frame of reference for locating and using parameter descriptors.
  529      Like the LSR, the PSR cannot be directly manipulated by the
  530      application and it must contain a type 1 descriptor.  */
  531
  532                .brf
  533
  534      /*K* PT - Page Table.  A contiguous set of words in real memory that
  535      contains the page table words for a working space and is indexed by
  536      page number.  Associated with each (active) working space, PT
  537      identifies the real memory allocation to the working space, and
  538      facilitates the automatic virtual to real address transformation
  539      process.  */
  540
  541                .brf
  542
  543      /*K* PTDW - Page Table Directory Word.  An entry in the page table
  544      directory which contains the absolute location of the associated page
  545      table, the length of the page table and status bits.  Same as page
  546      table pointer (PTP).  */
  547
  548                .brf
  549
  550      /*K* PTP - Page Table Pointer.  Locates the page table, extracted
  551      from the working space page table directory, the PTP's PTLOC field
  552      points to the page table in real memory.  */
  553
  554                .brf
  555
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          16   
  556      /*K* PTW - Page Table Word.  Contains the real memory address of the
  557      real 1024 word page associated with this working (virtual) page, also
  558      contains hardware and software control fields (flags).  The PTW is
  559      extracted from the page table.  */
  560
  561                .brf
  562
  563      /*K* Pack Set Name - see PSN.  */
  564
  565                .brf
  566
  567      /*K* Packset Account Directory - see PAD.  */
  568
  569                .brf
  570
  571      /*K* Page Table - see PT.  */
  572
  573                .brf
  574
  575      /*K* Page Table Directory - contains a page table pointer that
  576      locates the page table for each working space.  The page directory is
  577      512 entries long.  */
  578
  579                .brf
  580
  581      /*K* Page Table Directory Base Register - see PDBR.  */
  582
  583                .brf
  584
  585      /*K* Page Table Directory Word - see PTDW.  */
  586
  587                .brf
  588
  589      /*K* Page Table Pointer - see PTP.  */
  590
  591                .brf
  592
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          17   
  593      /*K* Page Table Word - see PTW.  */
  594
  595                .brf
  596
  597      /*K* Parameter Segment Register - see PSR.  */
  598
  599                .brf
  600
  601      /*K* Pointer - describes a segment together with an offset within the
  602      segment.  This consists of a single word that contains an address and
  603      a SEGID.  The SEGID selects a descriptor for a specific segment and
  604      the address represents the offset within the segment.  The LDPn
  605      instruction causes ODRn to be loaded with the segment descriptor and
  606      ARn to be loaded with the offset.  */
  607
  608                .brf
  609
  610      /*K* Pointer Register - see PR.  */
  611
  612                .brf
  613
  614      /*K* Privileged Master Mode - equivalent to the former master mode in
  615      that all hardware operations are permitted.  In addition, working
  616      space zero may be accessed (for absolute addressing) and housekeeping
  617      pages may be altered.  To achieve this mode three items are required:
  618      1) master mode indicator bit set, 2) instruction is on a housekeeping
  619      page, 3) the ISR has the privileged segment bit set.  */
  620
  621                .brf
  622
  623      /*K* Program Segmentation - the hardware supported separation of
  624      logically distinct program parts for purposes of modularization and
  625      access control.  */
  626
  627                .brf
  628
  629      /*K* Psuedo-Associative (Fragmented) Page Table - see PPT.  */
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          18   
  630
  631                .brf
  632
  633      /*K* RECORD NUMBER - a method of accessing data within a consecutive
  634      or relative file within the File Management System.  */
  635
  636                .brf
  637
  638      /*K* RFU - Reserved for Future Use.  */
  639
  640                .brf
  641
  642      /*K* RHU - Reserved for Hardware Use.  */
  643
  644                .brf
  645
  646      /*K* ROS - Read Only Segment.  LCP6 only  */
  647
  648                .brf
  649
  650      /*K* RU - Run Unit  CP-V syn: load module - an organization of data
  651      and instructions that may be put into execution, created by linking
  652      object units.  */
  653
  654                .brf
  655
  656      /*K* Read Only Segment - the portion of the user context that
  657      contains the information to which the user has read, but not write
  658      permission.  This includes the Job Information Table, Exceptional
  659      Condition Control Blocks, Task Control Block and Data Control Blocks.
  660      */
  661
  662                .brf
  663
  664      /*K* Real Address - the hardware address of an operand after all
  665      address modification and paging have been applied.  Also referred to
  666      as the absolute address.  */
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          19   
  667
  668                .brf
  669
  670      /*K* Relative Address - an address that is an offset from the origin
  671      of a specific segment.  */
  672
  673                .brf
  674
  675      /*K* Run Unit - see RU.  */
  676
  677                .brf
  678
  679      /*K* SCU - System Control Unit.  Controls how memory access is
  680      allowed.  */
  681
  682                .brf
  683
  684      /*K* SDS - Subordinate Descriptor Segment.  Provides a domain with
  685      descriptor storage of either the "static internal" or "static
  686      external" class, depending on whether a given SDS is private to the
  687      domain or not.  To have access to a subordinate descriptor segment, a
  688      domain must have an SDS descriptor.  */
  689
  690                .brf
  691
  692      /*K* SSR - Safe Store Register.  A 72 bit register used to hold a
  693      standard descriptor type 1 or 3 which describes the safe-store stack
  694      of the current process.  */
  695
  696                .brf
  697
  698      /*K* SSS - Safe Store Stack.  Special storage area (segment) designed
  699      to support the Call/Return mechanism across domains.  This stack acts
  700      as a repository for enough control information to enable a Return,
  701      maintains the isolation of domains, and preserves the state of the
  702      processor around a Call.  The stack is framed by the SSR.  */
  703
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          20   
  704                .brf
  705
  706      /*K* STAR FILE - syn: *file - a file whose name begins with a '*',
  707      whose existence ceases at job end (on-line session end or system
  708      crash), and whose existence is known only to one user.  */
  709
  710                .brf
  711
  712      /*K* STATEMENT NUMBER - programs or source input to compilers consist
  713      of statements and, therefore, the statements can be assigned
  714      sequential numbers.  The compiler or preprocessor may add lines to
  715      the program and there may therefore be more lines (line numbers) than
  716      there were statements.  The result may be written to a file of
  717      records (record numbers).  */
  718
  719                .brf
  720
  721      /*K* STATION - a logical grouping of DEVICES within communications
  722      management.  A TERMINAL is always a STATION. LCP6 only  */
  723
  724                .brf
  725
  726      /*K* SUB-DEVICE - a device attached to a TERMINAL.  LCP6 only  */
  727
  728                .brf
  729
  730      /*K* Safe Store Frame - control information pushed into the
  731      safe_store stack as the result of a fault, interrupt of CLIMB.  */
  732
  733                .brf
  734
  735      /*K* Safe Store Register - see SSR.  */
  736
  737                .brf
  738
  739      /*K* Safe Store Stack - see SSR.  */
  740
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          21   
  741                .brf
  742
  743      /*K* Segment - a set of (contiguously addressable) bytes, a variable
  744      length entity that occupies contiguous virtual address space and has
  745      a homogeneous set of attributes: e.g.  Read(able), Write, Execute.
  746      There are two units of measure for segments: 1) the standard segment
  747      is allocated in units of (nine bit) bytes and can be as large as
  748      one-million bytes, 2) the super segment is allocated in units of 64
  749      million bytes and can be as large as 64 billion bytes.  Segmentation
  750      is implemented via segment descriptors.  */
  751
  752                .brf
  753
  754      /*K* Segment Descriptor - locates a segment in virtual memory, a 72
  755      bit (two word) entity that defines and describes a segment, contains
  756      the logical address of the beginning of the segment, the size of the
  757      segment, and the permissions that control its use.  */
  758
  759                .brf
  760
  761      /*K* Segment Identity register (SEGIDn) - denotes (or points to)
  762      where the descriptor in ODRn came from.  */
  763
  764                .brf
  765
  766      /*K* Shrinking - the only mechanism available to a non-privileged
  767      master mode procedure for descriptor creation.  A more limited (or
  768      equivalent) descriptor is formed from a descriptor already available,
  769      an important part of the descriptor controlled access mechanism.  */
  770
  771                .brf
  772
  773      /*K* Subordinate Descriptor Segment - see SDS.  */
  774
  775                .brf
  776
  777      /*K* System Control Unit - see SCU.  */
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          22   
  778
  779                .brf
  780
  781      /*K* TBD - To Be Defined.  */
  782
  783                .brf
  784
  785      /*K* TCB - Task Control Block.  Contains system related information
  786      about a running program.  */
  787
  788                .brf
  789
  790      /*K* TERMINAL - the unit of communication hardware that connects via
  791      one communications line.  A TERMINAL is capable of supporting several
  792      SUB-DEVICES.  LCP6 only  */
  793
  794                .brf
  795
  796      /*K* TEXTC    Data format - a character string preceded by a byte
  797      which contains the count of characters within the string.  */
  798
  799                .brf
  800
  801      /*K* TSA - Trap Save Area.  The area into which the L6 hardware will
  802      store the environment on the occurrence of a trap.  LCP6 only  */
  803
  804                .brf
  805
  806      /*K* Task Control Block - see TCB.  */
  807
  808                .brf
  809
  810      /*K* Terminal - in normal usage, an end point of a communication
  811      path; not to be confused with TERMINAL.  */
  812
  813                .brf
  814
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          23   
  815      /*K* Trap Save Area - see TSA.  */
  816
  817                .brf
  818
  819      /*K* UHJIT - User Housekeeping Job Information Table.  The HJIT that
  820      is mapped when the user is in execution or while in monitor service
  821      processing for the user.  Refer to AF document 0574C-0 in Section
  822      26.0.  LCP6 only  */
  823
  824                .brf
  825
  826      /*K* Vector - a formal construct (hardware data type) whereby a
  827      pointer is naturally extended, with bounds and flags information, to
  828      provide the necessary parameters for a "shrink" operation.  */
  829
  830                .brf
  831
  832      /*K* Virtual Address - a three-component address consisting of a
  833      working space number, a (working) page number, and a (working) byte
  834      number (offset).  This offset is used as an index relative to the
  835      real page origin to locate the operand.  */
  836
  837                .brf
  838
  839      /*K* Virtual Storage - a hardware supported approach to memory
  840      management.  */
  841
  842                .brf
  843
  844      /*K* WOO - WORKSTATION Of Origin.  LCP6 only  */
  845
  846                .brf
  847
  848      /*K* WORKSTATION - see WSN.  */
  849
  850                .brf
  851
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          24   
  852      /*K* WS - Working Space.  One of 512 equal parts of a 2(43) byte
  853      virtual address space.  Working spaces are numbered (named) zero
  854      through 511, and each has a maximum size of 2(34) bytes.  */
  855
  856                .brf
  857
  858      /*K* WSN - WORKSTATION.  An environment of devices within which a
  859      user runs.  All access to devices is qualified by WSN. LCP6 only  */
  860
  861                .brf
  862
  863      /*K* WSR - Working Space Register.  A basic relocation device.  The
  864      register is nine bits wide and contains a working space number
  865      (0-511) which is used as an index to the directory.  There are eight
  866      of these registers, named WSR0..WSR7.  Working space registers
  867      provide the keys to both sharing and isolation.  */
  868
  869                .brf
  870
  871      /*K* Working Page - one of 2(22) equal parts of a working space.
  872      Each working page has a size of 2(12) bytes of 1024 words.  */
  873
  874                .brf
  875
  876      /*K* Working Page Number - the ordinal identity of a working page,
  877      used as an index to the page table.  */
  878
  879                .brf
  880
  881      /*K* Working Space - see WS.  */
  882
  883                .brf
  884
  885      /*K* Working Space Number.  The ordinal identity of a working space,
  886      used as an index to the page table directory.  */
  887
  888                .brf
14:05 JUL 28 '97 :GLOSSARY.:E05SI                                          25   
  889
  890      /*K* Working Space Register - see WSR.  */
  891
  892                .brf
  893
  894      /*K* ZERO (0) - legitimate value of zero to be used as the data
  895      value.  */

