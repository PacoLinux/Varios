

14:59 JUL 28 '97 KZ$HIPCTR.:E05SI                                          1    
    1      /*M* KZ$HIPCTR - Controller context for HIP devices */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* */
    8
    9      /*F* NAME:        KZ$HIPCTR
   10           PURPOSE:     Contains the controller-specific information for
   11                        HIP devices.
   12      */
   13
   14      %MACRO KZ$HIPCTR(NAME=KZ$HIPCTR,LAST=";",STCLASS=BASED);
   15      %LSET LISTDIR='0'B;
   16      %LSET LISTEXP='1'B;
   17      %LSET LISTCOM='0'B;
   18      %LSET LISTSUB='1'B;
   19      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   20      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
   21      %LSET INIT=CHARTEXT('INIT');
   22      %ELSE;
   23      %LSET INIT=CHARTEXT('/*');
   24      %ENDIF;
   25
   26      DCL 1 NAME STCLASS ALIGNED,
   27
   28            2 LNK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   29                                         /* LNK$ - Ptr to next controller context   */
   30
   31            2 DEVHD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   32                     /* DEVHD$ - Head of chain of device contexts for
   33                                 this controller. */
   34
   35            2 LIN$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   36                                              /* LIN$ - Ptr to line context         */
   37            2 CHN$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
14:59 JUL 28 '97 KZ$HIPCTR.:E05SI                                          2    
   38                                              /* CHN$ - Pointer to channel entry.   */
   39
   40            2 TYP UBIN(%(18-BITBIN(MODE_FEP)*2))  %INIT(0)%CHARTEXT('/**/'),
   41                                              /* TYP - Type of controller           */
   42
   43            2 COLS UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
   44                /* COLS - Default number of columns for devices on this controller  */
   45
   46            2 ROWS UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
   47                /* ROWS - Default number of rows for devices on this controller     */
   48
   49            2 ADR UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
   50                                              /* ADR - Controller address, 0-31     */
   51
   52            %IF NOT (MODE_FEP);
   53            2 * BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
   54            %ENDIF;
   55
   56            2 TIMED_OUT_ONCE BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL ,
   57               /* TIMED_OUT_ONCE IS SET THE FIRST TIME THE CONTROLLER TIMES OUT
   58                  AND IS RESET IF CONTROLLER SUCCESSFULLY ANSWERS SECOND POLL */
   59            2 * BIT(7)  %INIT('0'B)%CHARTEXT('/**/') UNAL LAST
   60
   61      %MEND;
   62
   63      %MACRO KZ$POLLHIP(NAME=KZ$POLLHIP,STCLASS=BASED);
   64      DCL 1 NAME STCLASS,
   65            2 INDX UBIN BYTE CALIGNED,   /* INDEX INTO ARRAY WHERE POLLING RESUMES  */
   66            2 CONTINUE_POLL BIT(1),      /* FLAG SAYING POLL LIST IS NOT EXHAUSTED  */
   67            2 REBUILD_POLL BIT(1), /* SET WHEN A CONTROLLER CONNECTS OR DISCONNECTS */
   68            2 POLLX UBIN(6) UNAL,             /* Last controller answering poll     */
   69            2 POLL_LIST(0:31) UBIN BYTE CALIGNED,
   70            2 POLL_LIST_B(0:31) REDEF POLL_LIST BIT(8),
   71            2 POLL_LIST_C REDEF POLL_LIST CHAR(32);
   72      %MEND;
   73
   74      /* Macro used in communication between KZH$HIPDV and KZH$HIPIO
14:59 JUL 28 '97 KZ$HIPCTR.:E05SI                                          3    
   75         describing just where in the input buffer the data starts,
   76         and its size, excluding any ETX byte.
   77      */
   78
   79      %MACRO KZ$INPDESC(NAME=KZ$INPDESC,STCLASS=BASED);
   80
   81      DCL 1 NAME STCLASS,
   82            2 BYTX UBIN,
   83            2 DATBYTSIZ UBIN;
   84
   85      %MEND;

