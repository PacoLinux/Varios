

11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       *
    5       */
    6
    7      /*
    8       *  L L G E N
    9       *
   10       *  An Extended LL(1) Parser Generator
   11       *
   12       *  Author : Ceriel J.H. Jacobs
   13       */
   14
   15      /*
   16       * tokens.g
   17       * Defines the tokens for the grammar of LLgen.
   18       * The lexical analyser and LLmessage are also included here.
   19       */
   20
   21      {
   22      # include "types:h"
   23      # include "io:h"
   24      # include "extern:h"
   25      # include "assert:h"
   26      # include "cclass:h"
   27
   28      # ifndef NORCSID
   29      static string   rcsidc = "$Header: tokens.g,v 2.6 87/03/10 01:16:49 ceriel Exp $";
   30      # endif
   31
   32      /* Here are defined : */
   33      extern int   scanner();
   34      extern       LLmessage();
   35      extern int   input();
   36      extern    unput();
   37      extern    skipcomment();
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     2    
   38      # ifdef LINE_DIRECTIVE
   39      STATIC    linedirective();
   40      # endif
   41      STATIC string   cpy();
   42      STATIC string   vallookup();
   43      }
   44      /* Classes */
   45
   46      %token  C_IDENT ;  /* lextoken.t_string contains the identifier read */
   47      %token C_NUMBER ;  /* lextoken.t_num contains the number read */
   48      %token C_LITERAL ; /* lextoken.t_string contains the literal read */
   49
   50      /* Keywords */
   51
   52      %token C_TOKEN ;
   53      %token C_START ;
   54      %token C_IF ;
   55      %token C_WHILE ;
   56      %token C_PERSISTENT ;
   57      %token C_FIRST ;
   58      %token C_LEXICAL ;
   59      %token C_ONERROR ;
   60      %token C_AVOID ;
   61      %token C_PREFER ;
   62      %token C_DEFAULT ;
   63
   64      %lexical scanner ;
   65
   66      {
   67
   68      /*
   69       * Structure for a keyword
   70       */
   71
   72      typedef struct keyword {
   73       string   w_word;
   74       int   w_value;
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     3    
   75      } t_keyw, *p_keyw;
   76
   77      /*
   78       * The list of keywords, the most often used keywords come first.
   79       * Linear search is used, as there are not many keywords
   80       */
   81
   82      static t_keyw resword[] = {
   83       { "token",  C_TOKEN  },
   84       { "avoid",  C_AVOID  },
   85       { "prefer", C_PREFER },
   86       { "persistent", C_PERSISTENT  },
   87       { "default",   C_DEFAULT   },
   88       { "if",     C_IF  },
   89       { "while",  C_WHILE  },
   90       { "first",  C_FIRST  },
   91       { "start",  C_START  },
   92       { "lexical",   C_LEXICAL   },
   93       { "onerror",   C_ONERROR   },
   94       { 0,     0  }
   95      };
   96
   97      static t_token  savedtok;   /* to save lextoken in case of an insertion */
   98      # ifdef LINE_DIRECTIVE
   99      static  int  nostartline;   /* = 0 if at the start of a line */
  100      # endif
  101
  102      scanner() {
  103       /*
  104        * Lexical analyser, what else
  105        */
  106       register int   ch;      /* Current char */
  107       register char *p = ltext;
  108       int      reserved = 0;  /* reserved word? */
  109       char     *max = &ltext[LTEXTSZ - 1];
  110
  111       if (savedtok.t_tokno) {
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     4    
  112                /* A token has been inserted.
  113                 * Now deliver the last lextoken again
  114                 */
  115          lextoken = savedtok;
  116          savedtok.t_tokno = 0;
  117          return lextoken.t_tokno;
  118       }
  119       for (;;) {
  120          ch = input();
  121          if (ch == EOF) return ch;
  122      # ifdef LINE_DIRECTIVE
  123          if (ch == '#' && !nostartline) {
  124             linedirective();
  125             continue;
  126          }
  127      # endif
  128          switch(c_class[ch]) {
  129            case ISLIT :
  130             for (;;) {
  131                ch = input();
  132                if (ch == '\n' || ch == EOF) {
  133                   error(linecount,"missing '");
  134                   break;
  135                }
  136                if (ch == '\'') break;
  137                if (ch == '\\') {
  138                   *p++ = ch;
  139                   ch = input();
  140                }
  141                *p++ = ch;
  142                if (p > max) p--;
  143             }
  144             *p = '\0';
  145             lextoken.t_string = ltext;
  146             return C_LITERAL;
  147            case ISCOM :
  148             skipcomment(0);
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     5    
  149             /* Fall through */
  150            case ISSPA :
  151             continue;
  152            case ISDIG : {
  153             register i = 0;
  154             do {
  155                i = 10 * i + (ch - '0');
  156                ch= input();
  157             } while (c_class[ch] == ISDIG);
  158             lextoken.t_num = i;
  159             unput(ch);
  160             return C_NUMBER; }
  161            default:
  162             return ch;
  163            case ISKEY :
  164             reserved = 1;
  165             ch = input();
  166             /* Fall through */
  167            case ISLET :
  168             do {
  169                if (reserved && ch >= 'A' && ch <= 'Z') {
  170                   ch += 'a' - 'A';
  171                }
  172                *p++ = ch;
  173                if (p > max) p--;
  174                ch = input();
  175             } while (c_class[ch] == ISDIG || c_class[ch] == ISLET);
  176             unput(ch);
  177             *p = '\0';
  178             if (reserved) {   /*
  179                    * Now search for the keyword
  180                    */
  181                register p_keyw w;
  182
  183                w = resword;
  184                while (w->w_word) {
  185                   if (! strcmp(ltext,w->w_word)) {
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     6    
  186                      /*
  187                       * Return token number.
  188                       */
  189                      return w->w_value;
  190                   }
  191                   w++;
  192                }
  193                error(linecount,"illegal reserved word");
  194             }
  195             lextoken.t_string = ltext;
  196             return C_IDENT;
  197          }
  198       }
  199      }
  200
  201      static int   backupc; /* for unput() */
  202      static int   nonline; /* = 1 if last char read was a newline */
  203
  204      input() {
  205       /*
  206        * Low level input routine, used by all other input routines
  207        */
  208       register c;
  209
  210              if (c = backupc) {
  211             /* Last char was "unput()". Deliver it again
  212              */
  213          backupc = 0;
  214                      return c;
  215       }
  216       if ((c = getc(finput)) == EOF) return c;
  217      # ifdef LINE_DIRECTIVE
  218       nostartline = 1;
  219      # endif
  220       if (!nonline) {
  221          linecount++;
  222      # ifdef LINE_DIRECTIVE
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     7    
  223          nostartline = 0;
  224      # endif
  225          nonline = 1;
  226       }
  227       if (c == '\n') nonline = 0;
  228       return c;
  229      }
  230
  231      unput(c) {
  232       /*
  233        * "unread" c
  234        */
  235       backupc = c;
  236      }
  237
  238      skipcomment(flag) {
  239       /*
  240        * Skip comment. If flag != 0, the comment is inside a fragment
  241        * of C-code, so the newlines in it must be copied to enable the
  242        * C-compiler to keep a correct line count
  243        */
  244       register int   ch;
  245       int      saved;   /* line count on which comment starts */
  246
  247       saved = linecount;
  248       if (input() != '*') error(linecount,"illegal comment");
  249       do {
  250          ch = input();
  251          while (ch == '*') {
  252             if ((ch = input()) == '/') return;
  253          }
  254          if (flag && ch == '\n') putc(ch,fact);
  255       } while (ch != EOF);
  256       error(saved,"Comment does not terminate");
  257      }
  258
  259      # ifdef LINE_DIRECTIVE
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     8    
  260      STATIC
  261      linedirective() {
  262       /*
  263        * Read a line directive
  264        */
  265       register int   ch;
  266       register int   i;
  267       string      s_error = "Illegal line directive";
  268       string      store();
  269       register string   c;
  270
  271       do {  /*
  272           * Skip to next digit
  273           * Do not skip newlines
  274           */
  275          ch = input();
  276       } while (ch != '\n' && c_class[ch] != ISDIG);
  277       if (ch == '\n') {
  278          error(linecount,s_error);
  279          return;
  280       }
  281       i = 0;
  282       do  {
  283          i = i*10 + (ch - '0');
  284          ch = input();
  285       } while (c_class[ch] == ISDIG);
  286       while (ch != '\n' && ch != '"') ch = input();
  287       if (ch == '"') {
  288          c = ltext;
  289          do {
  290             *c++ = ch = input();
  291          } while (ch != '"' && ch != '\n');
  292          if (ch == '\n') {
  293             error(linecount,s_error);
  294             return;
  295          }
  296          *--c = '\0';
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     9    
  297          do {
  298             ch = input();
  299          } while (ch != '\n');
  300          /*
  301           * Remember the file name
  302           */
  303          if (strcmp(f_input,ltext)) f_input = store(ltext);
  304       }
  305       linecount = i;
  306      }
  307      # endif
  308
  309      STATIC string
  310      vallookup(s) {
  311       /*
  312        * Look up the keyword that has token number s
  313        */
  314       register p_keyw p = resword;
  315
  316       while (p->w_value) {
  317          if (p->w_value == s) return p->w_word;
  318          p++;
  319       }
  320       return 0;
  321      }
  322
  323      STATIC string
  324      cpy(s,p,inserted) register string p; {
  325       /*
  326        * Create a piece of error message for token s and put it at p.
  327        * inserted = 0 if the token s was deleted (in which case we have
  328        * attributes), else it was inserted
  329        */
  330       register string t = 0;
  331
  332       switch(s) {
  333         case C_IDENT :
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     10   
  334          if (!inserted) t = lextoken.t_string;
  335          else t = "identifier";
  336          break;
  337         case C_NUMBER :
  338          t = "number";
  339          break;
  340         case C_LITERAL :
  341          if (!inserted) {
  342             *p++ = '\'';
  343             t = lextoken.t_string;
  344             break;
  345          }
  346          t = "literal";
  347          break;
  348         case EOFILE :
  349          t = "endoffile";
  350          break;
  351       }
  352       if (!t && (t = vallookup(s))) {
  353          *p++ = '%';
  354       }
  355       if (t) { /*
  356              * We have a string for the token. Copy it
  357              */
  358          while (*t) *p++ = *t++;
  359          if (s == C_LITERAL && !inserted) {
  360             *p++ = '\'';
  361          }
  362          return p;
  363       }
  364       /*
  365        * The token is a literal
  366        */
  367       *p++ = '\'';
  368       if (s >= 040 && s <= 0176) *p++ = s;
  369       else {
  370           *p++ = '\\';
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     11   
  371           switch(s) {
  372             case '\b' : *p++ = 'b'; break;
  373             case '\f' : *p++ = 'f'; break;
  374             case '\n' : *p++ = 'n'; break;
  375             case '\r' : *p++ = 'r'; break;
  376             case '\t' : *p++ = 't'; break;
  377             default : *p++='0'+((s&0377)>>6); *p++='0'+((s>>3)&07);
  378                  *p++='0'+(s&07);
  379           }
  380       }
  381       *p++ = '\'';
  382       return p;
  383      }
  384
  385      LLmessage(d) {
  386       /*
  387        * d is either 0, in which case the current token has been deleted,
  388        * or non-zero, in which case it represents a token that is inserted
  389        * before the current token
  390        */
  391       register string   s,t;
  392       char     buf[128];
  393
  394       nerrors++;
  395       s = buf;
  396       if (d == 0) {
  397          s = cpy(LLsymb,s,0);
  398          t = " deleted";
  399          do *s++ = *t; while (*t++);
  400       } else {
  401          s = cpy(d,s,1);
  402          t = " inserted in front of ";
  403          do *s++ = *t++; while (*t);
  404          s = cpy(LLsymb,s,0);
  405          *s = '\0';
  406       }
  407       error(linecount, "%s", buf);
11:02 AUG 20 '97 zbl$tokens:g.:ZBC3TSI                                     12   
  408             /* Don't change this line to
  409              * error(linecount, buf).
  410              * The string in "buf" might contain '%' ...
  411              */
  412       if (d) { /*
  413              * Save the current token and make up some
  414              * attributes for the inserted token
  415              */
  416          savedtok = lextoken;
  417          savedtok.t_tokno = LLsymb;
  418          if (d == C_IDENT) lextoken.t_string = "dummy_identifier";
  419          else if (d == C_LITERAL) lextoken.t_string = "dummy_literal";
  420          else if (d == C_NUMBER) lextoken.t_num = 1;
  421       }
  422      }
  423      }
  424

