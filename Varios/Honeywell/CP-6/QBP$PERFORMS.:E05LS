VERSION E05

PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:1    
        1        1        /*M* QBP$PERFORMS:  PERFORM paragraph-name or section-name.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8
        9        9        /*D*      NAME: QBP$PERFORMS
       10       10               PURPOSE: To provide a common module for the perform op-codes
       11       11               ENTRIES: QBP$PERFM, QBP$PERFMT
       12       12                                     */
       13       13
       14       14        QBP$PERFORMS: PROC ALTRET;
       15       15
       16       16          %INCLUDE LCP_6;
       17      207
       18      208          %INCLUDE QG_MACRO_M;
       19      345          %INCLUDE QI_EQUATES_E;
       20      704        %INCLUDE QI_MACROS_M;
       21     5762        %QI$ALL;
       22    16875
       23    16876    1     DCL QCS$SETUP_SOURCE ENTRY;
       24    16877
       25    16878    1     DCL PFM$ PTR;
       26    16879
       27    16880        %EJECT;
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:2    
       28    16881    1   QBP$PERFM: ENTRY ALTRET;
       29    16882        /*D*     NAME: QBP$PERFM
       30    16883              PURPOSE: To (along with QBP$PERFMT) handle the PERFM op-code.
       31    16884            INTERFACE: None.
       32    16885          DESCRIPTION: The op-code that this routine processes is placed
       33    16886                         (by the compiler) at the perform statement.  It
       34    16887                         accesses the data fields that preceed the "TO"
       35    16888                         op-code (QBP$PERFMT), and stuffs the proper values
       36    16889                         into them.  These fields are the "FROM" label (or
       37    16890                         the address to the label that is the beginning of
       38    16891                         the perform sequence), the "RETURN" pointer which
       39    16892                         points to the place where execution should continue
       40    16893                         upon completion of the perform, and the "ITERATION"
       41    16894                         field which reveals (in bit 0) if the perform code is
       42    16895                         a paragraph or a section, and if there is a single
       43    16896                         iteration, or the next word is an ADRL pointing to is
       44    16897                         an iteration DCB.  Finally, it branches to the "FROM"
       45    16898                         label.  The "TO" routine, which is at the end of the
       46    16899                         perform, checks if all iterations are complete and
       47    16900                         branches to the return address if they are, and to
       48    16901                         the "FROM" label if they're not.  An example perform
       49    16902                         is as follows:
       50    16903                           VECT     C_PERFM
       51    16904                           ADRL     label        "FROM" label
       52    16905                           ADRL     perf0        "TO"   label
       53    16906                           DATA     X'0000'      Perform Attribute
       54    16907                             where the perform attribute contains iteration
       55    16908                             information.
       56    16909                                                                          */
       57    16910                                           /*
       58    16911                                           Get the procedure-name address, the
       59    16912                                           return address of the PERFORM sub-
       60    16913                                           routine, and the iteration number
       61    16914                                           (all at the "TO" procedure).
       62    16915                                           */
       63    16916            %DATA_ADDRESS ( THING@D = "QI_1.INSTR$ -> QI$OP_PERFM.PERFORM_BLOCK@D",
       64    16917            CHECK_FOR_INDIRECTION = NO,
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:3    
       65    16918            RESULT$ = PFM$ );
       66    16955                                           /*
       67    16956                                           Set the "FROM" procedure name off-
       68    16957                                           set.  This is the start offset of
       69    16958                                           the sequence of instructions to be
       70    16959                                           performed.
       71    16960                                           */
       72    16961    1       PFM$ -> QI$PERFORM_BLOCK.FROM@P = QI_1.INSTR$ -> QI$OP_PERFM.FROM@P;
       73    16962                                           /*
       74    16963                                           Point to the perform attribute:
       75    16964                                            Bit 0 = 0 "TO" is a paragraph
       76    16965                                            Bit 0 = 1 "TO" is a section
       77    16966                                            Bit14-15 = 0 iteration of 1
       78    16967                                            Bit14-15 = 1 Then next word is the
       79    16968                                                         ADRL -> iteration DCB
       80    16969                                           */
       81    16970                                           /*
       82    16971                                           We are not currently interested
       83    16972                                           in whether or not it is a paragraph
       84    16973                                           or a section.
       85    16974                                           We just want the iteration info.
       86    16975
       87    16976                                           Examine whats left of the perform
       88    16977                                           attribute.  If it's a 0 it means
       89    16978                                           that 1 iteration is to be performed,
       90    16979                                           Otherwise the word following this
       91    16980                                           one is a ADRL -> iteration DCB
       92    16981                                           following this this word.
       93    16982                                           */
       94    16983    1       IF QI_1.INSTR$ -> QI$OP_PERFM.ATTRIBUTE.ITERATION_FIELD = 0
       95    16984    1       THEN
       96    16985    2         DO;
       97    16986    2           PFM$ -> QI$PERFORM_BLOCK.ITERATION = 1;
       98    16987    2           PFM$ -> QI$PERFORM_BLOCK.RETURN$
       99    16988    2             = ADDR ( QI_1.INSTR$ -> QI$OP_PERFM.SINGLE_ITERATION_NEXT_CODE@P );
      100    16989    2         END;
      101    16990    1       ELSE
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:4    
      102    16991                                           /*
      103    16992                                           Multiple iterations required.
      104    16993                                           */
      105    16994    2         DO;
      106    16995    2           QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_PERFM.BINARY_ITERATION_COUNT@P );
      107    16996    2           CALL QCS$SETUP_SOURCE;
      108    16997                                                /* Is the length in 2 words           */
      109    16998    2           IF QI_1.OP.LEN.S = %QI#MAX_BINARY_LENGTH
      110    16999    2           THEN
      111    17000    3             DO;                          /* Doubleword - use right half        */
      112    17001    3               PFM$ -> QI$PERFORM_BLOCK.ITERATION
      113    17002    3                 = QI_1.OP.DATA.S$ -> QI$AREA_A@ (1);
      114    17003    3             END;
      115    17004    2           ELSE
      116    17005    3             DO;                          /* Singleword                         */
      117    17006    3               PFM$ -> QI$PERFORM_BLOCK.ITERATION
      118    17007    3                 = QI_1.OP.DATA.S$ -> QI$AREA_A@ (0);
      119    17008    3             END;
      120    17009                                                /* Return is to the next instruction  */
      121    17010    2           PFM$ -> QI$PERFORM_BLOCK.RETURN$
      122    17011    2             = ADDR ( QI_1.INSTR$ -> QI$OP_PERFM.MULTIPLE_ITERATION_NEXT_CODE@P );
      123    17012    2         END;
      124    17013
      125    17014                                           /*
      126    17015                                           If this is a 0 to 0 perform (i.e.
      127    17016                                           no iterations) or we simply have
      128    17017                                           no more iterations to perform,
      129    17018                                           skip the perform sequence and go
      130    17019                                           onto the next instruction.
      131    17020                                           */
      132    17021    1       IF PFM$ -> QI$PERFORM_BLOCK.ITERATION = 0
      133    17022    1       THEN
      134    17023    2         DO;
      135    17024    2           QI_1.INSTR$ = PFM$ -> QI$PERFORM_BLOCK.RETURN$;
      136    17025    2           RETURN;
      137    17026    2         END;
      138    17027
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:5    
      139    17028                                           /*
      140    17029                                           Make INSTR$ point to the "FROM"
      141    17030                                           procedure-name (the beginning of
      142    17031                                           the perform sequence).
      143    17032                                           */
      144    17033            %PROC_ADDRESS ( THING@P = "PFM$ -> QI$PERFORM_BLOCK.FROM@P",
      145    17034            CHECK_FOR_INDIRECTION = NO,
      146    17035            RESULT$ = "QI_1.INSTR$" );
      147    17072
      148    17073    1       ALTRETURN;
      149    17074
      150    17075        %EJECT;
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:6    
      151    17076    1   QBP$PERFMT: ENTRY ALTRET;
      152    17077        /*D*     NAME: QBP$PERFMT
      153    17078              PURPOSE: To test end-of-perform conditions.
      154    17079            INTERFACE: None
      155    17080          DESCRIPTION: This routine is placed (by the compiler) at the end of
      156    17081                         a performable paragraph, or section.  It's sole pur-
      157    17082                         pose in life is to determine if the perform call was
      158    17083                         executed enough times, and then to branch to the
      159    17084                         appropriate place based on it's findings.  A perform
      160    17085                         usually consists of:
      161    17086                           1) A PERFM op-code
      162    17087                           2) A pointer to a "FROM" label.
      163    17088                           3) A pointer to a "TO" label.
      164    17089                           4) A perform attribute.
      165    17090                             where the "FROM" label is the beginning of the
      166    17091                               perform sequence, the "TO" label is the ending
      167    17092                               of the perform sequence, and the perform
      168    17093                               attribute indicates if the perform code is a
      169    17094                               paragraph or a section, and whether there is
      170    17095                               an iteration of 1 or an ADRL pointing to an
      171    17096                               iteration DCB following this word.
      172    17097                         Three locations preceeding the start of the "TO"
      173    17098                         routine contain the "FROM" procedure address, the
      174    17099                         return address of the perform subroutine, and the
      175    17100                         number of iterations.  TMP_BLK$ points to these values.
      176    17101                                                                          */
      177    17102
      178    17103
      179    17104                                           /*
      180    17105                                           Get the procedure-name address, the
      181    17106                                           return address of the perform sub-
      182    17107                                           routine, and the iteration number
      183    17108                                           (all are located here at the "TO"
      184    17109                                           procedure).
      185    17110                                           */
      186    17111            %DATA_ADDRESS ( THING@D = "QI_1.INSTR$ -> QI$OP_PERFMT.PERFORM_BLOCK@D",
      187    17112            CHECK_FOR_INDIRECTION = NO,
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:7    
      188    17113            RESULT$ = PFM$ );
      189    17150
      190    17151                                           /*
      191    17152                                           If iteration = 0 before we had a
      192    17153                                           chance to decrement it, then no
      193    17154                                           iterations of the perform sequence
      194    17155                                           were executed.  In this case we
      195    17156                                           just pass control onto the next
      196    17157                                           sequential statement following the
      197    17158                                           perform sequence.  This is the
      198    17159                                           perform 0 to 0 case.
      199    17160                                           */
      200    17161    1       IF PFM$ -> QI$PERFORM_BLOCK.ITERATION = 0
      201    17162    1       THEN
      202    17163    2         DO;
      203    17164    2           QI_1.INSTR$ = ADDR (QI_1.INSTR$ -> QI$OP_PERFMT.NEXT_CODE@P);
      204    17165    2           RETURN;
      205    17166    2         END;
      206    17167
      207    17168    1       PFM$ -> QI$PERFORM_BLOCK.ITERATION = PFM$ -> QI$PERFORM_BLOCK.ITERATION - 1;
      208    17169
      209    17170                                           /*
      210    17171                                           After we decrement the iteration
      211    17172                                           count, we again check for 0.  If
      212    17173                                           it's a 0 this time, we are through
      213    17174                                           so pass control onto the return
      214    17175                                           address of the perform subroutine
      215    17176                                           (this is the next sequential
      216    17177                                           instruction following the PERFM
      217    17178                                           op-code).
      218    17179                                           */
      219    17180    1       IF PFM$ -> QI$PERFORM_BLOCK.ITERATION = 0
      220    17181    1       THEN
      221    17182    2         DO;
      222    17183    2           QI_1.INSTR$ = PFM$ -> QI$PERFORM_BLOCK.RETURN$;
      223    17184    2           ALTRETURN;
      224    17185    2         END;
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:8    
      225    17186
      226    17187                                           /*
      227    17188                                           If we got past all of the above
      228    17189                                           conditions, then we are haven't
      229    17190                                           finished yet.  Go back to the
      230    17191                                           "FROM" procedure (the beginning
      231    17192                                           of the perform sequence).
      232    17193                                           */
      233    17194            %PROC_ADDRESS ( THING@P = "PFM$ -> QI$PERFORM_BLOCK.FROM@P",
      234    17195            CHECK_FOR_INDIRECTION = NO,
      235    17196            RESULT$ = "QI_1.INSTR$" );
      236    17233    1       ALTRETURN;
      237    17234
      238    17235    1   END QBP$PERFORMS;

PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:9    
--  Include file information  --

   QI_MACROS_M.:E05TOU  is referenced.
   QI_EQUATES_E.:E05TOU  is referenced.
   QG_MACRO_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure QBP$PERFORMS.

   Procedure QBP$PERFORMS requires 175 words for executable code.
   Procedure QBP$PERFORMS requires 6 words of local(AUTO) storage.

    No errors detected in file QBP$PERFORMS.:E05TSI    .

PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:10   

 Object Unit name= QBP$PERFORMS                               File name= QBP$PERFORMS.:E05TOU
 UTS= JUL 30 '97 04:53:53.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none   175     AF  QBP$PERFORMS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        0  QBP$PERFORMS
     0      7          yes     yes      Std        0  QBP$PERFM
     0     76          yes     yes      Std        0  QBP$PERFMT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 QCS$SETUP_SOURCE
                       nStd      0 X6A_AUTO_0
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     QI_1                                  QI_4_CHAR_ALPHANUMERIC                QI_31_DIGIT_SLS_DISPLAY
     QI_16_BIT_BINARY                      QI_32_BIT_BINARY                      QI_31_DIGIT_ST_PACKED
     QI_PICTURE_STRING                r    G$ROS$
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:11   


        1        1        /*M* QBP$PERFORMS:  PERFORM paragraph-name or section-name.  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=0,DCI=4,CSI=2,IAD=2,DTI=2,AND,ECI=0,DIN=2,STI=2 */
        8        8
        9        9        /*D*      NAME: QBP$PERFORMS
       10       10               PURPOSE: To provide a common module for the perform op-codes
       11       11               ENTRIES: QBP$PERFM, QBP$PERFMT
       12       12                                     */
       13       13
       14       14        QBP$PERFORMS: PROC ALTRET;

     14   0 000000  D380 0000 0000  xent QBP$PERFORMS    LNJ,B5   X6A_AUTO_0
          0 000003       0006 0000                       DC       6,0
          0 000005  0F81 0006                            B        s:16936,PREL

       15       15
       16       16          %INCLUDE LCP_6;
       17      207
       18      208          %INCLUDE QG_MACRO_M;
       19      345          %INCLUDE QI_EQUATES_E;
       20      704        %INCLUDE QI_MACROS_M;
       21     5762        %QI$ALL;
       22    16875
       23    16876    1     DCL QCS$SETUP_SOURCE ENTRY;
       24    16877
       25    16878    1     DCL PFM$ PTR;
       26    16879
       27    16880        %EJECT;
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:12   
       28    16881    1   QBP$PERFM: ENTRY ALTRET;

  16881   0 000007  D380 0000 0000  xent QBP$PERFM       LNJ,B5   X6A_AUTO_0
          0 00000A       0006 0000                       DC       6,0

       29    16882        /*D*     NAME: QBP$PERFM
       30    16883              PURPOSE: To (along with QBP$PERFMT) handle the PERFM op-code.
       31    16884            INTERFACE: None.
       32    16885          DESCRIPTION: The op-code that this routine processes is placed
       33    16886                         (by the compiler) at the perform statement.  It
       34    16887                         accesses the data fields that preceed the "TO"
       35    16888                         op-code (QBP$PERFMT), and stuffs the proper values
       36    16889                         into them.  These fields are the "FROM" label (or
       37    16890                         the address to the label that is the beginning of
       38    16891                         the perform sequence), the "RETURN" pointer which
       39    16892                         points to the place where execution should continue
       40    16893                         upon completion of the perform, and the "ITERATION"
       41    16894                         field which reveals (in bit 0) if the perform code is
       42    16895                         a paragraph or a section, and if there is a single
       43    16896                         iteration, or the next word is an ADRL pointing to is
       44    16897                         an iteration DCB.  Finally, it branches to the "FROM"
       45    16898                         label.  The "TO" routine, which is at the end of the
       46    16899                         perform, checks if all iterations are complete and
       47    16900                         branches to the return address if they are, and to
       48    16901                         the "FROM" label if they're not.  An example perform
       49    16902                         is as follows:
       50    16903                           VECT     C_PERFM
       51    16904                           ADRL     label        "FROM" label
       52    16905                           ADRL     perf0        "TO"   label
       53    16906                           DATA     X'0000'      Perform Attribute
       54    16907                             where the perform attribute contains iteration
       55    16908                             information.
       56    16909                                                                          */
       57    16910                                           /*
       58    16911                                           Get the procedure-name address, the
       59    16912                                           return address of the PERFORM sub-
       60    16913                                           routine, and the iteration number
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:13   
       61    16914                                           (all at the "TO" procedure).
       62    16915                                           */
       63    16916            %DATA_ADDRESS ( THING@D = "QI_1.INSTR$ -> QI$OP_PERFM.PERFORM_BLOCK@D",
       64    16917            CHECK_FOR_INDIRECTION = NO,
       65    16918            RESULT$ = PFM$ );

  16936   0 00000C  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00000F  B846 0002                            LDR,R3   2,B6
          0 000011  F853                                 LDR,R7   R3
          0 000012  6C00                                 LDV,R6   0
          0 000013  8400 0000 0000  xsym                 AID      QI_1
          0 000016  8D47 0004                            SDI      PFM$,AUTO

       66    16955                                           /*
       67    16956                                           Set the "FROM" procedure name off-
       68    16957                                           set.  This is the start offset of
       69    16958                                           the sequence of instructions to be
       70    16959                                           performed.
       71    16960                                           */
       72    16961    1       PFM$ -> QI$PERFORM_BLOCK.FROM@P = QI_1.INSTR$ -> QI$OP_PERFM.FROM@P;

  16961   0 000018  DCC7 0004                            LDB,B5   PFM$,AUTO
          0 00001A  D846 0001                            LDR,R5   1,B6
          0 00001C  DF05                                 STR,R5   ,B5

       73    16962                                           /*
       74    16963                                           Point to the perform attribute:
       75    16964                                            Bit 0 = 0 "TO" is a paragraph
       76    16965                                            Bit 0 = 1 "TO" is a section
       77    16966                                            Bit14-15 = 0 iteration of 1
       78    16967                                            Bit14-15 = 1 Then next word is the
       79    16968                                                         ADRL -> iteration DCB
       80    16969                                           */
       81    16970                                           /*
       82    16971                                           We are not currently interested
       83    16972                                           in whether or not it is a paragraph
       84    16973                                           or a section.
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:14   
       85    16974                                           We just want the iteration info.
       86    16975
       87    16976                                           Examine whats left of the perform
       88    16977                                           attribute.  If it's a 0 it means
       89    16978                                           that 1 iteration is to be performed,
       90    16979                                           Otherwise the word following this
       91    16980                                           one is a ADRL -> iteration DCB
       92    16981                                           following this this word.
       93    16982                                           */
       94    16983    1       IF QI_1.INSTR$ -> QI$OP_PERFM.ATTRIBUTE.ITERATION_FIELD = 0

  16983   0 00001D  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 000020  82C6 0003                            LB,'000F'X        3,B6
          0 000022       000F
          0 000023  0501 000D                            BBT      s:16995,PREL

       95    16984    1       THEN
       96    16985    2         DO;

       97    16986    2           PFM$ -> QI$PERFORM_BLOCK.ITERATION = 1;

  16986   0 000025  4C01                                 LDV,R4   1
          0 000026  CF45 0003                            STR,R4   3,B5

       98    16987    2           PFM$ -> QI$PERFORM_BLOCK.RETURN$

  16987   0 000028  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00002B  CBC6 0004                            LAB,B4   4,B6
          0 00002D  CFC5 0001                            STB,B4   1,B5

       99    16988    2             = ADDR ( QI_1.INSTR$ -> QI$OP_PERFM.SINGLE_ITERATION_NEXT_CODE@P );
      100    16989    2         END;

  16989   0 00002F  0F81 002C                            B        s:17021,PREL

      101    16990    1       ELSE
      102    16991                                           /*
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:15   
      103    16992                                           Multiple iterations required.
      104    16993                                           */
      105    16994    2         DO;

      106    16995    2          QI_1.SOURCE$ = ADDR ( QI_1.INSTR$ -> QI$OP_PERFM.BINARY_ITERATION_COUNT@P );

  16995   0 000031  CBC6 0004                            LAB,B4   4,B6
          0 000033  CF80 0000 0018  xsym                 STB,B4   QI_1+24

      107    16996    2           CALL QCS$SETUP_SOURCE;

  16996   0 000036  CBF0 0000                            LAB,B4   0,IMO
          0 000038  E380 0000 0000  xent                 LNJ,B6   QCS$SETUP_SOURCE
          0 00003B       0001                            DC       s:16998,PREL

      108    16997                                                /* Is the length in 2 words           */
      109    16998    2           IF QI_1.OP.LEN.S = %QI#MAX_BINARY_LENGTH

  16998   0 00003C  E800 0000 0026  xsym                 LDR,R6   QI_1+38
          0 00003F  6D04                                 CMV,R6   4
          0 000040  0981 000C                            BNE      s:17006,PREL

      110    16999    2           THEN
      111    17000    3             DO;                          /* Doubleword - use right half        */

      112    17001    3               PFM$ -> QI$PERFORM_BLOCK.ITERATION

  17001   0 000042  ECC7 0004                            LDB,B6   PFM$,AUTO
          0 000044  DC80 0000 0020  xsym                 LDB,B5   QI_1+32
          0 000047  D845 0001                            LDR,R5   1,B5
          0 000049  DF46 0003                            STR,R5   3,B6

      113    17002    3                 = QI_1.OP.DATA.S$ -> QI$AREA_A@ (1);
      114    17003    3             END;

  17003   0 00004B  0F81 0009                            B        s:17010,PREL

PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:16   
      115    17004    2           ELSE
      116    17005    3             DO;                          /* Singleword                         */

      117    17006    3               PFM$ -> QI$PERFORM_BLOCK.ITERATION

  17006   0 00004D  ECC7 0004                            LDB,B6   PFM$,AUTO
          0 00004F  DC80 0000 0020  xsym                 LDB,B5   QI_1+32
          0 000052  D805                                 LDR,R5   ,B5
          0 000053  DF46 0003                            STR,R5   3,B6

      118    17007    3                 = QI_1.OP.DATA.S$ -> QI$AREA_A@ (0);
      119    17008    3             END;

      120    17009                                                /* Return is to the next instruction  */
      121    17010    2           PFM$ -> QI$PERFORM_BLOCK.RETURN$

  17010   0 000055  DC80 0000 0006  xsym                 LDB,B5   QI_1+6
          0 000058  CBC5 0005                            LAB,B4   5,B5
          0 00005A  CFC6 0001                            STB,B4   1,B6

      122    17011    2             = ADDR ( QI_1.INSTR$ -> QI$OP_PERFM.MULTIPLE_ITERATION_NEXT_CODE@P );
      123    17012    2         END;

      124    17013
      125    17014                                           /*
      126    17015                                           If this is a 0 to 0 perform (i.e.
      127    17016                                           no iterations) or we simply have
      128    17017                                           no more iterations to perform,
      129    17018                                           skip the perform sequence and go
      130    17019                                           onto the next instruction.
      131    17020                                           */
      132    17021    1       IF PFM$ -> QI$PERFORM_BLOCK.ITERATION = 0

  17021   0 00005C  ECC7 0004                            LDB,B6   PFM$,AUTO
          0 00005E  E846 0003                            LDR,R6   3,B6
          0 000060  6981 0009                            BNEZ,R6  s:17053,PREL

PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:17   
      133    17022    1       THEN
      134    17023    2         DO;

      135    17024    2           QI_1.INSTR$ = PFM$ -> QI$PERFORM_BLOCK.RETURN$;

  17024   0 000062  DCC6 0001                            LDB,B5   1,B6
          0 000064  DF80 0000 0006  xsym                 STB,B5   QI_1+6

      136    17025    2           RETURN;

  17025   0 000067  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      137    17026    2         END;
      138    17027
      139    17028                                           /*
      140    17029                                           Make INSTR$ point to the "FROM"
      141    17030                                           procedure-name (the beginning of
      142    17031                                           the perform sequence).
      143    17032                                           */
      144    17033            %PROC_ADDRESS ( THING@P = "PFM$ -> QI$PERFORM_BLOCK.FROM@P",
      145    17034            CHECK_FOR_INDIRECTION = NO,
      146    17035            RESULT$ = "QI_1.INSTR$" );

  17053   0 00006A  B806                                 LDR,R3   ,B6
          0 00006B  F853                                 LDR,R7   R3
          0 00006C  6C00                                 LDV,R6   0
          0 00006D  8400 0000 0002  xsym                 AID      QI_1+2
          0 000070  8D00 0000 0006  xsym                 SDI      QI_1+6

      147    17072
      148    17073    1       ALTRETURN;

  17073   0 000073  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      149    17074
      150    17075        %EJECT;
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:18   
      151    17076    1   QBP$PERFMT: ENTRY ALTRET;

  17076   0 000076  D380 0000 0000  xent QBP$PERFMT      LNJ,B5   X6A_AUTO_0
          0 000079       0006 0000                       DC       6,0

      152    17077        /*D*     NAME: QBP$PERFMT
      153    17078              PURPOSE: To test end-of-perform conditions.
      154    17079            INTERFACE: None
      155    17080          DESCRIPTION: This routine is placed (by the compiler) at the end of
      156    17081                         a performable paragraph, or section.  It's sole pur-
      157    17082                         pose in life is to determine if the perform call was
      158    17083                         executed enough times, and then to branch to the
      159    17084                         appropriate place based on it's findings.  A perform
      160    17085                         usually consists of:
      161    17086                           1) A PERFM op-code
      162    17087                           2) A pointer to a "FROM" label.
      163    17088                           3) A pointer to a "TO" label.
      164    17089                           4) A perform attribute.
      165    17090                             where the "FROM" label is the beginning of the
      166    17091                               perform sequence, the "TO" label is the ending
      167    17092                               of the perform sequence, and the perform
      168    17093                               attribute indicates if the perform code is a
      169    17094                               paragraph or a section, and whether there is
      170    17095                               an iteration of 1 or an ADRL pointing to an
      171    17096                               iteration DCB following this word.
      172    17097                         Three locations preceeding the start of the "TO"
      173    17098                         routine contain the "FROM" procedure address, the
      174    17099                         return address of the perform subroutine, and the
      175    17100                         number of iterations.  TMP_BLK$ points to these values.
      176    17101                                                                          */
      177    17102
      178    17103
      179    17104                                           /*
      180    17105                                           Get the procedure-name address, the
      181    17106                                           return address of the perform sub-
      182    17107                                           routine, and the iteration number
      183    17108                                           (all are located here at the "TO"
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:19   
      184    17109                                           procedure).
      185    17110                                           */
      186    17111            %DATA_ADDRESS ( THING@D = "QI_1.INSTR$ -> QI$OP_PERFMT.PERFORM_BLOCK@D",
      187    17112            CHECK_FOR_INDIRECTION = NO,
      188    17113            RESULT$ = PFM$ );

  17131   0 00007B  EC80 0000 0006  xsym                 LDB,B6   QI_1+6
          0 00007E  B846 0001                            LDR,R3   1,B6
          0 000080  F853                                 LDR,R7   R3
          0 000081  6C00                                 LDV,R6   0
          0 000082  8400 0000 0000  xsym                 AID      QI_1
          0 000085  8D47 0004                            SDI      PFM$,AUTO

      189    17150
      190    17151                                           /*
      191    17152                                           If iteration = 0 before we had a
      192    17153                                           chance to decrement it, then no
      193    17154                                           iterations of the perform sequence
      194    17155                                           were executed.  In this case we
      195    17156                                           just pass control onto the next
      196    17157                                           sequential statement following the
      197    17158                                           perform sequence.  This is the
      198    17159                                           perform 0 to 0 case.
      199    17160                                           */
      200    17161    1       IF PFM$ -> QI$PERFORM_BLOCK.ITERATION = 0

  17161   0 000087  DCC7 0004                            LDB,B5   PFM$,AUTO
          0 000089  D845 0003                            LDR,R5   3,B5
          0 00008B  5981 0009                            BNEZ,R5  s:17168,PREL

      201    17162    1       THEN
      202    17163    2         DO;

      203    17164    2           QI_1.INSTR$ = ADDR (QI_1.INSTR$ -> QI$OP_PERFMT.NEXT_CODE@P);

  17164   0 00008D  CBC6 0002                            LAB,B4   2,B6
          0 00008F  CF80 0000 0006  xsym                 STB,B4   QI_1+6
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:20   

      204    17165    2           RETURN;

  17165   0 000092  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      205    17166    2         END;
      206    17167
      207    17168    1       PFM$ -> QI$PERFORM_BLOCK.ITERATION = PFM$ -> QI$PERFORM_BLOCK.ITERATION - 1;

  17168   0 000095  88C5 0003                            DEC      3,B5

      208    17169
      209    17170                                           /*
      210    17171                                           After we decrement the iteration
      211    17172                                           count, we again check for 0.  If
      212    17173                                           it's a 0 this time, we are through
      213    17174                                           so pass control onto the return
      214    17175                                           address of the perform subroutine
      215    17176                                           (this is the next sequential
      216    17177                                           instruction following the PERFM
      217    17178                                           op-code).
      218    17179                                           */
      219    17180    1       IF PFM$ -> QI$PERFORM_BLOCK.ITERATION = 0

  17180   0 000097  D845 0003                            LDR,R5   3,B5
          0 000099  5981 0009                            BNEZ,R5  s:17214,PREL

      220    17181    1       THEN
      221    17182    2         DO;

      222    17183    2           QI_1.INSTR$ = PFM$ -> QI$PERFORM_BLOCK.RETURN$;

  17183   0 00009B  ECC5 0001                            LDB,B6   1,B5
          0 00009D  EF80 0000 0006  xsym                 STB,B6   QI_1+6

      223    17184    2           ALTRETURN;

PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:21   
  17184   0 0000A0  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      224    17185    2         END;
      225    17186
      226    17187                                           /*
      227    17188                                           If we got past all of the above
      228    17189                                           conditions, then we are haven't
      229    17190                                           finished yet.  Go back to the
      230    17191                                           "FROM" procedure (the beginning
      231    17192                                           of the perform sequence).
      232    17193                                           */
      233    17194            %PROC_ADDRESS ( THING@P = "PFM$ -> QI$PERFORM_BLOCK.FROM@P",
      234    17195            CHECK_FOR_INDIRECTION = NO,
      235    17196            RESULT$ = "QI_1.INSTR$" );

  17214   0 0000A3  A805                                 LDR,R2   ,B5
          0 0000A4  F852                                 LDR,R7   R2
          0 0000A5  6C00                                 LDV,R6   0
          0 0000A6  8400 0000 0002  xsym                 AID      QI_1+2
          0 0000A9  8D00 0000 0006  xsym                 SDI      QI_1+6

      236    17233    1       ALTRETURN;

  17233   0 0000AC  C380 0000 0000  xent                 LNJ,B4   X6A_AALT
      237    17234
      238    17235    1   END QBP$PERFORMS;

PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:22   
--  Include file information  --

   QI_MACROS_M.:E05TOU  is referenced.
   QI_EQUATES_E.:E05TOU  is referenced.
   QG_MACRO_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is referenced.
   KI_CP6.:E05TOU  was found in the system file and is referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure QBP$PERFORMS.
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:23   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 PFM$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(2576)  r     1 QI_1

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN(16)    r     1 QI$AREA_A@(0:0)
     0-0-0/w STRC(96)    r     1 QI$OP_PERFM                0-0-0/w STRC(48)    r     1 QI$OP_PERFMT
     0-0-0/w STRC(64)    r     1 QI$PERFORM_BLOCK
     0-0-0/c ASTR(8)     r     1 QI$VARIABLE_IDENTIFIER


   Procedure QBP$PERFORMS requires 175 words for executable code.
   Procedure QBP$PERFORMS requires 6 words of local(AUTO) storage.

    No errors detected in file QBP$PERFORMS.:E05TSI    .
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:24   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:25   
          MINI XREF LISTING

PFM$
     16878**DCL     16936<<ASSIGN  16961>>ASSIGN  16986>>ASSIGN  16987>>ASSIGN  17001>>ASSIGN  17006>>ASSIGN
     17010>>ASSIGN  17021>>IF      17024>>ASSIGN  17053>>ASSIGN  17131<<ASSIGN  17161>>IF      17168>>ASSIGN
     17168>>ASSIGN  17180>>IF      17183>>ASSIGN  17214>>ASSIGN
QCS$SETUP_SOURCE
     16876**DCL-ENT 16996--CALL
QGB_PARAM.DVE.DVBYTE.VFC
     11359**DCL     11360--REDEF
QGB_PARAM.DVE.EOMCHAR
     11371**DCL     11372--REDEF
QGB_PARAM.MSG$
     11353**DCL     11354--REDEF
QGB_PARAM.UHDR$
     11378**DCL     11379--REDEF
QI$ACTIVATION_STATUS
      9117**DCL      9123--REDEF
QI$AREA_A@
     11450**DCL     17001>>ASSIGN  17006>>ASSIGN
QI$CIP
      7958**DCL      8028--REDEF
QI$CIP.CA
      7963**DCL      7967--REDEF    7970--REDEF    7973--REDEF
QI$COBOL_DAD.PSEUDO_CIP
      8202**DCL      8227--REDEF
QI$COBOL_DAD.PSEUDO_CIP.ALPHANUMERIC
      8204**DCL      8209--REDEF
QI$COBOL_DAD.PSEUDO_CIP.NUMERIC.CB
      8210**DCL      8213--REDEF    8216--REDEF
QI$COBOL_DAD.VARIABLE_LENGTH_ITEMS
      8238**DCL      8254--REDEF    8262--REDEF    8270--REDEF
QI$COBOL_DAD.VARIABLE_LENGTH_ITEMS.LEVEL_MULTIPLIERS
      8239**DCL      8249--REDEF    8252--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:26   
QI$COBOL_DAD.WORD0
      8166**DCL      8167--REDEF    8181--REDEF
QI$COBOL_DAD_P_BITS.P
      8306**DCL      8312--REDEF
QI$CONDITION_CONTROL_BLOCK.LIST_A@P
      7792**DCL      7793--REDEF
QI$CONDITION_CONTROL_BLOCK.WORD0_FLAGS
      7788**DCL      7791--REDEF
QI$CONDITION_LEGAL_BLOCK.ARRAY@P
      7825**DCL      7826--REDEF    7827--REDEF
QI$DAD.PSEUDO_CIP
      8105**DCL      8130--REDEF
QI$DAD.PSEUDO_CIP.ALPHANUMERIC
      8107**DCL      8112--REDEF
QI$DAD.PSEUDO_CIP.NUMERIC.CB
      8113**DCL      8116--REDEF    8119--REDEF
QI$DAD.WORD0
      8074**DCL      8075--REDEF
QI$ERROR_MESSAGE_LINE
     11466**DCL     11468--REDEF
QI$ERROR_STATUS
     11463**DCL     11465--REDEF
QI$FIELD_DAD.ELEMENTARY_ITEM.P
      8520**DCL      8527--REDEF
QI$FIELD_DAD.ONE_DIMENSIONAL_ITEM.P
      8540**DCL      8547--REDEF
QI$FIELD_DAD.PSEUDO_CIP
      8447**DCL      8472--REDEF
QI$FIELD_DAD.PSEUDO_CIP.ALPHANUMERIC
      8449**DCL      8454--REDEF
QI$FIELD_DAD.PSEUDO_CIP.NUMERIC.CB
      8455**DCL      8458--REDEF    8461--REDEF
QI$FIELD_DAD.TWO_DIMENSIONAL_ITEM.P
      8560**DCL      8567--REDEF
QI$FIELD_DAD.VARIABLE_LENGTH_ITEMS
      8503**DCL      8519--REDEF    8537--REDEF    8555--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:27   
QI$FIELD_DAD.VARIABLE_LENGTH_ITEMS.LEVEL_MULTIPLIERS
      8504**DCL      8514--REDEF    8517--REDEF
QI$FIELD_DAD.WORD0
      8399**DCL      8400--REDEF
QI$FIELD_DAD.WORD0_FLAGS.IO_FLAGS
      8403**DCL      8408--REDEF
QI$FIELD_DAD_P.P
      8601**DCL      8608--REDEF
QI$FIELD_STATUS.INDICATORS
      9267**DCL      9299--REDEF
QI$FIELD_STATUS.INDICATORS.ENABLED_FLAGS
      9271**DCL      9276--REDEF
QI$FIELD_STATUS.INDICATORS.OPEN_FLAGS
      9283**DCL      9290--REDEF
QI$FIELD_STATUS.INDICATORS.STATE_FLAGS
      9277**DCL      9282--REDEF
QI$FILE.WORD0
      8723**DCL      8724--REDEF
QI$FILE_STATUS.INDICATORS
      9560**DCL      9592--REDEF
QI$FILE_STATUS.INDICATORS.ENABLED_FLAGS
      9564**DCL      9569--REDEF
QI$FILE_STATUS.INDICATORS.OPEN_FLAGS
      9576**DCL      9583--REDEF
QI$FILE_STATUS.INDICATORS.STATE_FLAGS
      9570**DCL      9575--REDEF
QI$FORM_FILE.USE_PROCEDURE
      8823**DCL      8830--REDEF
QI$FORM_FILE.WORD0
      8777**DCL      8778--REDEF
QI$FORM_STATUS.INDICATORS
      9681**DCL      9713--REDEF
QI$FORM_STATUS.INDICATORS.ENABLED_FLAGS
      9685**DCL      9690--REDEF
QI$FORM_STATUS.INDICATORS.OPEN_FLAGS
      9697**DCL      9704--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:28   
QI$FORM_STATUS.INDICATORS.STATE_FLAGS
      9691**DCL      9696--REDEF
QI$FRAME.WORD0
      8938**DCL      8939--REDEF
QI$FRAME_STATUS.INDICATORS
      9910**DCL      9942--REDEF
QI$FRAME_STATUS.INDICATORS.ENABLED_FLAGS
      9914**DCL      9919--REDEF
QI$FRAME_STATUS.INDICATORS.OPEN_FLAGS
      9926**DCL      9933--REDEF
QI$FRAME_STATUS.INDICATORS.STATE_FLAGS
      9920**DCL      9925--REDEF
QI$GZ_FIELD.DESCRIPTION.IO_FLAGS
     16792**DCL     16797--REDEF
QI$IDENTIFIER
     11469**DCL     11471--REDEF
QI$INDICATORS
      9181**DCL      9211--REDEF
QI$INDICATORS.ENABLED_FLAGS
      9187**DCL      9192--REDEF
QI$INDICATORS.OPEN_FLAGS
      9199**DCL      9206--REDEF
QI$INDICATORS.STATE_FLAGS
      9193**DCL      9198--REDEF
QI$MAJOR_NODE.WORD0
      8637**DCL      8638--REDEF
QI$MAJOR_STATUS.INDICATORS
      9360**DCL      9392--REDEF
QI$MAJOR_STATUS.INDICATORS.ENABLED_FLAGS
      9364**DCL      9369--REDEF
QI$MAJOR_STATUS.INDICATORS.OPEN_FLAGS
      9376**DCL      9383--REDEF
QI$MAJOR_STATUS.INDICATORS.STATE_FLAGS
      9370**DCL      9375--REDEF
QI$MESSAGE_TYPE
     11460**DCL     11462--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:29   
QI$MINOR_NODE.WORD0
      8680**DCL      8681--REDEF
QI$MINOR_STATUS.INDICATORS
      9453**DCL      9485--REDEF
QI$MINOR_STATUS.INDICATORS.ENABLED_FLAGS
      9457**DCL      9462--REDEF
QI$MINOR_STATUS.INDICATORS.OPEN_FLAGS
      9469**DCL      9476--REDEF
QI$MINOR_STATUS.INDICATORS.STATE_FLAGS
      9463**DCL      9468--REDEF
QI$OP_ACCEPT.DATANAME@P
      5868**DCL      5869--REDEF
QI$OP_CALL.EPTR$
      6040**DCL      6041--REDEF
QI$OP_CLEAR.IO_FLAGS
      6073**DCL      6076--REDEF
QI$OP_DISPLAY.FIELD_A@P
      6340**DCL      6341--REDEF
QI$OP_ENABLE.IO_FLAGS
      6427**DCL      6430--REDEF
QI$OP_IFCLS.ATTRIBUTE.TYPE
      6520**DCL      6525--REDEF
QI$OP_INSPECT.TALLYING_FOR_ITEM@P
      6754**DCL      6755--REDEF
QI$OP_INSPECT.TALLYING_INITIAL_ITEM@P
      6756**DCL      6757--REDEF
QI$OP_INSPECT.TALLYING_ITEM@P
      6752**DCL      6753--REDEF
QI$OP_OPEN.IO_FLAGS
      7314**DCL      7317--REDEF
QI$OP_PERFM.ATTRIBUTE.ITERATION_FIELD
      7351**DCL     16983>>IF
QI$OP_PERFM.BINARY_ITERATION_COUNT@P
      7352**DCL      7353--REDEF   16995--ASSIGN
QI$OP_PERFM.FROM@P
      7346**DCL     16961>>ASSIGN
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:30   
QI$OP_PERFM.MULTIPLE_ITERATION_NEXT_CODE@P
      7354**DCL     17010--ASSIGN
QI$OP_PERFM.PERFORM_BLOCK@D
      7347**DCL     16936>>ASSIGN
QI$OP_PERFM.SINGLE_ITERATION_NEXT_CODE@P
      7353**DCL     16987--ASSIGN
QI$OP_PERFMT.NEXT_CODE@P
      7382**DCL     17164--ASSIGN
QI$OP_PERFMT.PERFORM_BLOCK@D
      7381**DCL     17131>>ASSIGN
QI$PERFORM_BLOCK.FROM@P
      9153**DCL     16961<<ASSIGN  17053>>ASSIGN  17214>>ASSIGN
QI$PERFORM_BLOCK.ITERATION
      9155**DCL     16986<<ASSIGN  17001<<ASSIGN  17006<<ASSIGN  17021>>IF      17161>>IF      17168<<ASSIGN
     17168>>ASSIGN  17180>>IF
QI$PERFORM_BLOCK.RETURN$
      9154**DCL     16987<<ASSIGN  17010<<ASSIGN  17024>>ASSIGN  17183>>ASSIGN
QI$PSEUDO_CIP
      7853**DCL      7877--REDEF
QI$PSEUDO_CIP.ALPHANUMERIC
      7857**DCL      7862--REDEF
QI$PSEUDO_CIP.NUMERIC.CB
      7863**DCL      7866--REDEF    7869--REDEF
QI$TERMINAL_ATTRIBUTES
      9074**DCL      9087--REDEF
QI$TRAN_FILE.WORD0
      8859**DCL      8860--REDEF
QI$TRAN_STATUS.INDICATORS
      9794**DCL      9826--REDEF
QI$TRAN_STATUS.INDICATORS.ENABLED_FLAGS
      9798**DCL      9803--REDEF
QI$TRAN_STATUS.INDICATORS.OPEN_FLAGS
      9810**DCL      9817--REDEF
QI$TRAN_STATUS.INDICATORS.STATE_FLAGS
      9804**DCL      9809--REDEF
QI$VARIABLE_IDENTIFIER.LENGTH
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:31   
     11473**DCL     11474--IMP-SIZ
QI_1.BASE
     10002**DCL     10009--REDEF
QI_1.BASE.DATA$
     10003**DCL     16936>>ASSIGN  17131>>ASSIGN
QI_1.BASE.PROC$
     10005**DCL     17053>>ASSIGN  17214>>ASSIGN
QI_1.CURRENT.FILE$
     10893**DCL     10895--REDEF   10897--REDEF
QI_1.CURRENT.FILE_STATUS$
     10899**DCL     10901--REDEF   10903--REDEF
QI_1.DAD
     10697**DCL     10702--REDEF
QI_1.FILE_HEAD
     10880**DCL     10887--REDEF
QI_1.INSTR$
     10010**DCL     16936>>ASSIGN  16961>>ASSIGN  16983>>IF      16987>>ASSIGN  16995>>ASSIGN  17010>>ASSIGN
     17024<<ASSIGN  17053<<ASSIGN  17131>>ASSIGN  17164<<ASSIGN  17164>>ASSIGN  17183<<ASSIGN  17214<<ASSIGN
QI_1.IS_ALL_LIT
     10703**DCL     10708--REDEF
QI_1.IS_FORM_VARIABLE
     10709**DCL     10714--REDEF
QI_1.IS_TEMP
     10715**DCL     10720--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP
     10813**DCL     10838--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP.ALPHANUMERIC
     10815**DCL     10820--REDEF
QI_1.MESSAGE_LINE_DAD.PSEUDO_CIP.NUMERIC.CB
     10821**DCL     10824--REDEF   10827--REDEF
QI_1.MESSAGE_LINE_DAD.WORD0
     10782**DCL     10783--REDEF
QI_1.OFFSET
     10721**DCL     10726--REDEF
QI_1.OP.CIP
     10082**DCL     10533--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:32   
QI_1.OP.CIP.AUX
     10448**DCL     10519--REDEF
QI_1.OP.CIP.AUX.CD
     10493**DCL     10496--REDEF   10500--REDEF   10503--REDEF
QI_1.OP.CIP.S
     10152**DCL     10223--REDEF
QI_1.OP.CIP.S.CD
     10197**DCL     10200--REDEF   10204--REDEF   10207--REDEF
QI_1.OP.CIP.T
     10300**DCL     10371--REDEF
QI_1.OP.CIP.T.CD
     10345**DCL     10348--REDEF   10352--REDEF   10355--REDEF
QI_1.OP.DATA
     10540**DCL     10544--REDEF
QI_1.OP.DATA.S$
     10541**DCL     17001>>ASSIGN  17006>>ASSIGN
QI_1.OP.FILL_CHAR
     10664**DCL     10667--REDEF
QI_1.OP.INX
     10597**DCL     10601--REDEF   10602--REDEF   10606--REDEF
QI_1.OP.LEN
     10580**DCL     10584--REDEF   10585--REDEF   10589--REDEF   10590--REDEF   10594--REDEF
QI_1.OP.LEN.AUX
     10583**DCL     11484--IMP-SIZ
QI_1.OP.LEN.S
     10581**DCL     11480--IMP-SIZ 16998>>IF
QI_1.OP.LEN.T
     10582**DCL     11482--IMP-SIZ
QI_1.OP.PICTURE_STRING
     10650**DCL     10653--REDEF   10654--REDEF   10657--REDEF   10658--REDEF   10661--REDEF
QI_1.OP.ROUND
     10683**DCL     10684--REDEF   10685--REDEF
QI_1.OP.SRCH_VRFY_ELEMS
     10619**DCL     10622--REDEF
QI_1.OPENED_COUNT
     10888**DCL     10891--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:33   
QI_1.OTTER_SPACE
     10727**DCL     10732--REDEF
QI_1.PICTURE_STRING
     10733**DCL     10738--REDEF
QI_1.SOURCE$
     10053**DCL     16995<<ASSIGN
QI_1.SPECIAL_NAMES
     10916**DCL     10925--REDEF
QI_1.TYPE
     10739**DCL     10744--REDEF
QI_16_BIT_BINARY
     15929**DCL     15999--REDEF
QI_16_BIT_BINARY.CB
     15948**DCL     15951--REDEF   15955--REDEF   15958--REDEF
QI_31_DIGIT_SLS_DISPLAY
     15762**DCL     15832--REDEF
QI_31_DIGIT_SLS_DISPLAY.CD
     15809**DCL     15812--REDEF   15816--REDEF   15819--REDEF
QI_31_DIGIT_ST_PACKED
     16264**DCL     16334--REDEF
QI_31_DIGIT_ST_PACKED.CP
     16297**DCL     16300--REDEF   16304--REDEF   16307--REDEF
QI_32_BIT_BINARY
     16096**DCL     16166--REDEF
QI_32_BIT_BINARY.CB
     16115**DCL     16118--REDEF   16122--REDEF   16125--REDEF
QI_4_CHAR_ALPHANUMERIC
     15594**DCL     15664--REDEF
QI_4_CHAR_ALPHANUMERIC.CA
     15599**DCL     15603--REDEF   15606--REDEF   15609--REDEF
QI_ACCUMULATOR_DAD.CIP
     16607**DCL     16678--REDEF
QI_ACCUMULATOR_DAD.CIP.CP
     16638**DCL     16641--REDEF   16645--REDEF   16648--REDEF
QI_ALR.CIP
     11559**DCL     12010--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:34   
QI_ALR.CIP.AUX
     11925**DCL     11996--REDEF
QI_ALR.CIP.AUX.CA
     11928**DCL     11932--REDEF   11935--REDEF   11938--REDEF
QI_ALR.CIP.S
     11629**DCL     11700--REDEF
QI_ALR.CIP.S.CA
     11632**DCL     11636--REDEF   11639--REDEF   11642--REDEF
QI_ALR.CIP.T
     11777**DCL     11848--REDEF
QI_ALR.CIP.T.CA
     11780**DCL     11784--REDEF   11787--REDEF   11790--REDEF
QI_ALR.DATA
     12017**DCL     12021--REDEF
QI_ALR.FILL_CHAR
     12141**DCL     12144--REDEF
QI_ALR.INX
     12074**DCL     12078--REDEF   12079--REDEF   12083--REDEF
QI_ALR.LEN
     12057**DCL     12061--REDEF   12062--REDEF   12066--REDEF   12067--REDEF   12071--REDEF
QI_ALR.PICTURE_STRING
     12127**DCL     12130--REDEF   12131--REDEF   12134--REDEF   12135--REDEF   12138--REDEF
QI_ALR.ROUND
     12160**DCL     12161--REDEF   12162--REDEF
QI_ALR.SRCH_VRFY_ELEMS
     12096**DCL     12099--REDEF
QI_MAT.CIP
     14898**DCL     15349--REDEF
QI_MAT.CIP.AUX
     15264**DCL     15335--REDEF
QI_MAT.CIP.AUX.CA
     15267**DCL     15271--REDEF   15274--REDEF   15277--REDEF
QI_MAT.CIP.S
     14968**DCL     15039--REDEF
QI_MAT.CIP.S.CA
     14971**DCL     14975--REDEF   14978--REDEF   14981--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:35   
QI_MAT.CIP.T
     15116**DCL     15187--REDEF
QI_MAT.CIP.T.CA
     15119**DCL     15123--REDEF   15126--REDEF   15129--REDEF
QI_MAT.DATA
     15356**DCL     15360--REDEF
QI_MAT.DEC
     15424**DCL     15428--REDEF   15429--REDEF   15433--REDEF
QI_MAT.FILL_CHAR
     15480**DCL     15483--REDEF
QI_MAT.LEN
     15396**DCL     15400--REDEF   15401--REDEF   15405--REDEF   15406--REDEF   15410--REDEF
QI_MAT.PICTURE_STRING
     15466**DCL     15469--REDEF   15470--REDEF   15473--REDEF   15474--REDEF   15477--REDEF
QI_MAT.ROUND
     15499**DCL     15500--REDEF   15501--REDEF
QI_MAT.SRCH_VRFY_ELEMS
     15435**DCL     15438--REDEF
QI_PICTURE_STRING
     16432**DCL     16502--REDEF
QI_PICTURE_STRING.CA
     16437**DCL     16441--REDEF   16444--REDEF   16447--REDEF
QI_SRCH_VRFY.CIP
     14229**DCL     14680--REDEF
QI_SRCH_VRFY.CIP.AUX
     14595**DCL     14666--REDEF
QI_SRCH_VRFY.CIP.AUX.CA
     14598**DCL     14602--REDEF   14605--REDEF   14608--REDEF
QI_SRCH_VRFY.CIP.S
     14299**DCL     14370--REDEF
QI_SRCH_VRFY.CIP.S.CA
     14302**DCL     14306--REDEF   14309--REDEF   14312--REDEF
QI_SRCH_VRFY.CIP.T
     14447**DCL     14518--REDEF
QI_SRCH_VRFY.CIP.T.CA
     14450**DCL     14454--REDEF   14457--REDEF   14460--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:36   
QI_SRCH_VRFY.DATA
     14687**DCL     14691--REDEF
QI_SRCH_VRFY.DEC
     14755**DCL     14759--REDEF   14760--REDEF   14764--REDEF
QI_SRCH_VRFY.FILL_CHAR
     14811**DCL     14814--REDEF
QI_SRCH_VRFY.ROUND
     14830**DCL     14831--REDEF   14832--REDEF
QI_SRCH_VRFY.SRCH_RESULT
     14771**DCL     14774--REDEF   14775--REDEF   14778--REDEF   14779--REDEF   14782--REDEF
QI_SRCH_VRFY.SRCH_VRFY_ARGS
     14695**DCL     14699--REDEF   14700--REDEF   14704--REDEF   14705--REDEF   14709--REDEF
QI_SRCH_VRFY.SRCH_VRFY_ELEMS
     14766**DCL     14769--REDEF
QI_TYPE_BINARY_TARGET.CIP
     13556**DCL     14007--REDEF
QI_TYPE_BINARY_TARGET.CIP.AUX
     13922**DCL     13993--REDEF
QI_TYPE_BINARY_TARGET.CIP.AUX.CA
     13925**DCL     13929--REDEF   13932--REDEF   13935--REDEF
QI_TYPE_BINARY_TARGET.CIP.S
     13626**DCL     13697--REDEF
QI_TYPE_BINARY_TARGET.CIP.S.CA
     13629**DCL     13633--REDEF   13636--REDEF   13639--REDEF
QI_TYPE_BINARY_TARGET.CIP.T
     13774**DCL     13845--REDEF
QI_TYPE_BINARY_TARGET.CIP.T.CB
     13791**DCL     13794--REDEF   13798--REDEF   13801--REDEF
QI_TYPE_BINARY_TARGET.DATA
     14014**DCL     14018--REDEF
QI_TYPE_BINARY_TARGET.DEC
     14082**DCL     14086--REDEF   14087--REDEF   14091--REDEF
QI_TYPE_BINARY_TARGET.LEN
     14054**DCL     14058--REDEF   14059--REDEF   14063--REDEF   14064--REDEF   14068--REDEF
QI_TYPE_BINARY_TARGET.PICTURE_STRING
     14124**DCL     14127--REDEF   14128--REDEF   14131--REDEF   14132--REDEF   14135--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:37   
QI_TYPE_BINARY_TARGET.ROUND
     14157**DCL     14158--REDEF   14159--REDEF
QI_TYPE_BINARY_TARGET.SIZE_ERROR
     14143**DCL     14144--REDEF
QI_TYPE_BINARY_TARGET.SRCH_VRFY_ELEMS
     14093**DCL     14096--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP
     12224**DCL     12675--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.AUX
     12590**DCL     12661--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.AUX.CA
     12593**DCL     12597--REDEF   12600--REDEF   12603--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.S
     12294**DCL     12365--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.S.CD
     12339**DCL     12342--REDEF   12346--REDEF   12349--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.T
     12442**DCL     12513--REDEF
QI_TYPE_DISPLAY_SOURCE.CIP.T.CA
     12445**DCL     12449--REDEF   12452--REDEF   12455--REDEF
QI_TYPE_DISPLAY_SOURCE.DATA
     12682**DCL     12686--REDEF
QI_TYPE_DISPLAY_SOURCE.DEC
     12750**DCL     12754--REDEF   12755--REDEF   12759--REDEF
QI_TYPE_DISPLAY_SOURCE.LEN
     12722**DCL     12726--REDEF   12727--REDEF   12731--REDEF   12732--REDEF   12736--REDEF
QI_TYPE_DISPLAY_SOURCE.PICTURE_STRING
     12792**DCL     12795--REDEF   12796--REDEF   12799--REDEF   12800--REDEF   12803--REDEF
QI_TYPE_DISPLAY_SOURCE.ROUND
     12825**DCL     12826--REDEF   12827--REDEF
QI_TYPE_DISPLAY_SOURCE.SIZE_ERROR
     12811**DCL     12812--REDEF
QI_TYPE_DISPLAY_SOURCE.SRCH_VRFY_ELEMS
     12761**DCL     12764--REDEF
QI_TYPE_DISPLAY_TARGET.CIP
     12890**DCL     13341--REDEF
PL6.E3A0      #001=QBP$PERFORMS File=QBP$PERFORMS.:E05TSI                        WED 07/30/97 04:53 Page:38   
QI_TYPE_DISPLAY_TARGET.CIP.AUX
     13256**DCL     13327--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.AUX.CA
     13259**DCL     13263--REDEF   13266--REDEF   13269--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.S
     12960**DCL     13031--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.S.CA
     12963**DCL     12967--REDEF   12970--REDEF   12973--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.T
     13108**DCL     13179--REDEF
QI_TYPE_DISPLAY_TARGET.CIP.T.CD
     13153**DCL     13156--REDEF   13160--REDEF   13163--REDEF
QI_TYPE_DISPLAY_TARGET.DATA
     13348**DCL     13352--REDEF
QI_TYPE_DISPLAY_TARGET.DEC
     13416**DCL     13420--REDEF   13421--REDEF   13425--REDEF
QI_TYPE_DISPLAY_TARGET.LEN
     13388**DCL     13392--REDEF   13393--REDEF   13397--REDEF   13398--REDEF   13402--REDEF
QI_TYPE_DISPLAY_TARGET.PICTURE_STRING
     13458**DCL     13461--REDEF   13462--REDEF   13465--REDEF   13466--REDEF   13469--REDEF
QI_TYPE_DISPLAY_TARGET.ROUND
     13491**DCL     13492--REDEF   13493--REDEF
QI_TYPE_DISPLAY_TARGET.SIZE_ERROR
     13477**DCL     13478--REDEF
QI_TYPE_DISPLAY_TARGET.SRCH_VRFY_ELEMS
     13427**DCL     13430--REDEF
