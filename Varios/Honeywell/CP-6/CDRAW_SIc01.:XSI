/*M* cdraw$alloc:c  -- dynamic memory manager        */
 
#ifdef TS_CP6
#include "CDRAW_Cc07"
#include "CDRAW_Cc06"
#else
#include "cdraw.h"
#include "alloc.h"
#endif
 
#ifdef __STDC__
 
#include <stdlib.h>
 
#else
void *malloc(), *calloc(), *realloc();
 
#endif
 
/*D* NAME:    allocator
     PURPOSE: To provide fast dynamic memory management.
     DESCRIPTION:
        Instead of making multiple calls upon the memory
        management routines, this routine allocates blocks
        of structures and then provides them to the caller.
 
     INPUT:   struct alloc_descriptor *
     OUTPUT:  a structure of the size requested.
 
*/
 
void *
Allocator(Head)
  struct alloc_descriptor *Head;
{
  struct alloc_struct *rs = Head->as_head;
 
  if (!rs) {
     struct alloc_struct *p;
     int i = Head->as_anum;
     int step = Head->as_step;
     Head->as_nallocs++;
     p = rs = malloc( Head->as_asize );
     if (!rs)
        if ( Head->as_crash ) crash("*** Out of Memory ***\n", 0);
        else return 0;
     while (--i)
        (p->next = p+step), (p = p + step);
     p->next = 0;
     }
 
  Head->as_head = rs->next;
  if (++Head->as_inuse > Head->as_maxuse)
     Head->as_maxuse = Head->as_inuse;
  return rs;
}
 
void *
Free(Head, blk)
  struct alloc_descriptor *Head;
  void                    *blk;
{
  struct alloc_struct *p = blk;
  p->next = Head->as_head;
  Head->as_head = p;
  Head->as_inuse--;
}
 
 
 
char *
AllocString(n, s)
  int   n;
  char *s;
{
  char *rs;
  static int sym_text_size = 0;
  static char *sym_text_block = 0;
  static int   sym_text_waste = 0;
 
  if (sym_text_size < n)  {  /* Need another block */
     int alloc = (n > 100)? ALLOC_TEXT+100*((n+100)/n) : ALLOC_TEXT;
     sym_text_waste += sym_text_size;
     sym_text_block = (char *) malloc(alloc);
     if (!sym_text_block) return 0;
     sym_text_size = alloc;
     }
 
  rs = sym_text_block;
  sym_text_block += n;
  sym_text_size  -= n;
  if (s) memcpy(rs, s, n);
  return rs;
}
 
