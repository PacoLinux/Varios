VERSION E05

Elsie.D00  X.25 Handler CCPs                                                    WED JUL 30 '97 02:22 Page:1
        1                     *M*  KXM$CCP - X.25 Handler MLCP CCPs
        2                     *T***********************************************************
        3                     *T*                                                         *
        4                     *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
        5                     *T*                                                         *
        6                     *T***********************************************************
        7                     *
        8                     *P*  NAME:     KXM$CCP
        9                     *P*  PURPOSE:  This module contains the MLCP channel
       10                     *P*            control programs for the X.25 handler.
       11     1                        TITLE    'X.25 Handler CCPs'
       12                     *
       13                     *  System files
       14                     *
       15     2                        OUNAME   KXM$CCP
       16     3                        BIAS     START='200'X,END='BFF'X
       17     4                        SYMDEF   Y$RECEIVE_CHKTYP
       18     5                        SYMDEF   Y$TRANSMIT_CHKTYP
       19     6                        INCLUDE  KW_LCT_E
       20   313                        INCLUDE  KW_SLCT_E
       21                     *
       22                     *  These lines are invisible above (ask Paul about it)
       23                     *
       24                     *        INCLUDE  KW_LCT_E
       25                     *        INCLUDE  KW_SLCT_E
       26                     *
       27   452                        INCLUDE  KX_LCT_E

Elsie.D00  X.25 Handler CCPs                                                    WED JUL 30 '97 02:22 Page:2
       29                     *
       30                     *  Character lengths
       31                     *
       32   568  002          Y#RCVCHRBTWN  EQU  '02'X
       33   569  00C          Y#RCVCHRLNG8  EQU  '0C'X
       34   570  00C          Y#TRNCHRLNG8  EQU  '0C'X
       35                     *
       36                     *  Correct input CRC residues
       37                     *
       38   571  0B8          Y#RCVCRCRSD1 EQU  'B8'X
       39   572  0F0          Y#RCVCRCRSD2 EQU  'F0'X
       40                     *
       41                     *  Line control registers
       42                     *  Receive status (LR5)
       43                     *
       44   573  005          Y#LR_STT          EQU  5
       45   574  00F          Y#LR_STT_RS       EQU  '0F'X
       46   575  008          Y#LR_STT_RS_RSF   EQU  '08'X
       47   576  004          Y#LR_STT_RS_RA    EQU  '04'X
       48   577  002          Y#LR_STT_RS_RO    EQU  '02'X
       49   578  001          Y#LR_STT_RS_REOF  EQU  '01'X
       50   579  00E          Y#LR_STT_RS_RLBS  EQU  '0E'X
       51                     *
       52                     *  Character control (LR6)
       53                     *
       54   580  006          Y#LR_CHRCTR       EQU  6
       55   581  00F          Y#LR_CHRCTR_RCV   EQU  '0F'X
       56   582  0F0          Y#LR_CHRCTR_TRN   EQU  'F0'X
       57                     *
       58                     *  Broadband line register definitions
       59                     *
       60   583  007          Y#BLR_STT_RS        EQU  7
       61   584  020          Y#BLR_STT_RS_RSF    EQU  '20'X
       62   585  010          Y#BLR_STT_RS_REOF   EQU  '10'X
       63   586  0E0          Y#BLR_STT_RS_ABI    EQU  'E0'X
       64                     *
Elsie.D00  X.25 Handler CCPs                                                    WED JUL 30 '97 02:22 Page:3
       65                     *  Character control (LR6)
       66                     *
       67   587  006          Y#BLR_CONF          EQU  6
       68   588  007          Y#BLR_TRNCON        EQU  7

Elsie.D00  X.25 Handler CCPs                                                    WED JUL 30 '97 02:22 Page:4
       70   590               KXM$LCT  LCTS
       71                     *
       72                     *  Common LCT initialization
       73                     *
       74   591                        LCT     LOC=KX#M_CHRCTR,;
       75                              VALUE=(KW#CHRLNG8|KX#M_CHRCTR_TRN_TIMF@S|;
       76                                     Y#RCVCHRBTWN&KX#M_CHRCTR_RCV_RRO@R)
       77                     *
       78                     *  Input LCT initialization
       79                     *
       80   592                        LCT     LOC=KW#LCT5,VALUE=1       Inhibit pause
 LC2-00096-0   WARNING: The byte specified (5) has been defined as
               being reserved for firmware use.
       81   593                        LCT     LOC=KW#RCVCHRCNF,;
       82                                      VALUE=(KW#CHRLNG8|KW#CRCPLNHDLC)
       83   594                        ADDR    LOC=KW#RCVCCP$,REF=Y$RECEIVE_CHKTYP
       84   595                        LCT     LOC=KW#RCVSCN,;
       85                                      VALUE=(KW#RCVSCN_SCNCTR@S|KW#RCVSCN_SETSTT@S)
       86   596                        LCT     LOC=KW#RCVSTTMSK_DSR,VALUE=KW#RCVSTTMSK_DSR@S
       87   597                        LCT     LOC=KX#M_RCVST,VALUE=KX#M_RCVST_NULL
       88   598                        LCT     LOC=KX#M_RCVBYTE,VALUE='FF'X
       89   599                        LCT     LOC=KX#M_RCVCON,VALUE=Y#RCVCHRLNG8
       90                     *
       91                     *  Transmit LCT initialization
       92                     *
       93   600                        LCT     LOC=KW#LCT37,VALUE=1      Inhibit pause
       94   601                        LCT     LOC=KW#TRNCHRCNF,;
       95                                      VALUE=(KW#CHRLNG8|KW#CRCPLNHDLC)
       96   602                        ADDR    LOC=KW#TRNCCP$,REF=Y$TRANSMIT_CHKTYP
       97   603                        LCT     LOC=KW#TRNSCN,;
       98                                      VALUE=(KW#TRNSCN_SETSTT@S|KW#TRNSCN_STRCCP@S)
       99   604                        LCT     LOC=KW#TRNSTTMSK,;
      100                                      VALUE=(KW#TRNSTTMSK_DSR@S|KW#TRNSTTMSK_CTS@S|;
      101                                             KW#TRNSTTMSK_CD@S)
      102   605                        LCT     LOC=KX#M_TRNCON,VALUE=KX#M_TRNCON_TIFM@S
      103   606                        LCT     LOC=KX#M_TRNST,VALUE=KX#M_TRNST_NULL
Elsie.D00  X.25 Handler CCPs                                                    WED JUL 30 '97 02:22 Page:5
      104   607                        LCT     LOC=KX#M_TRNBYTE,VALUE='FF'X
      105   608                        LCT     LOC=KX#M_TRNSOF,VALUE=Y#TRNCHRLNG8
      106   609                        LCT     LOC=KX#M_TRNEOF,;
      107                                      VALUE=(KX#M_TRNEOF_TEOF@S|Y#TRNCHRLNG8)
      108   610                        LCT     LOC=KX#M_TRNIF,VALUE=KX#M_TRNIF_TEOF@S
      109   611                        ENDLCTS
                 000 0000C200 00010264 C0000000 00000080
                 010 00000000 00000001 FF0C0000 00000000
                 020 0000C200 0001049C 50000000 000000E0
                 030 00000000 D2000000 01FF100C 1C100000
                 040 00000000 00000000 00000000 00000000
                 050 00000000 00000000 00000000 00000000
                 060 00000000 00000000 00000000 00000000
                 070 00000000 00000000 00000000 00000000
                 080 00000000 00000000 00000000 00000000
                 090 00000000 00000000 00000000 00000000
                 0A0 00000000 00000000 00000000 00000000
                 0B0 00000000 00000000 00000000 00000000
                 0C0 00000000 00000000 00000000 00000000
                 0D0 00000000 00000000 00000000 00000000
                 0E0 00000000 00000000 00000000 00000000
                 0F0 00000000 00000000 00000000 00000000
      110                     *
      111                     * Reserve 100 byte patch area filled with NOPs.
      112                     *
      113   612  200          PAT TABLE     SIZE=100,DTRANSLATE=0
      114   613               PAT ENDTABLE
                 200 00000000 00000000 00000000 00000000
                 210 00000000 00000000 00000000 00000000
                 220 00000000 00000000 00000000 00000000
                 230 00000000 00000000 00000000 00000000
                 240 00000000 00000000 00000000 00000000
                 250 00000000 00000000 00000000 00000000
                 260 00000000


Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:6
      116   615                        TITLE    'X.25 Handler Receive CCP'
      117   616  264          KXM$CCP  CCP
      118   617  264          Y$RECEIVE_CHKTYP ;
      119        264                   LABEL
      120                     *
      121                     *    Determine if we are Broadband or a normal adapter
      122                     *
      123   618  264 501A              LD       KX#M_RCVTYP
      124   619  266 E205              BZ       Y$RECEIVE_START
      125   620  268 E6019A            JUMP     Y$BRECEIVE_START

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:7
      127   622  26C          Y$RECEIVE_START ;
      128        26C                   LABEL
      129                     *
      130                     *  Check for a valid CCB
      131                     *
      132   623  26C E705              BVB      Y$RCV_RCVIT
      133                     *
      134                     *  Not valid, go to stopped
      135                     *
      136   624  26E E6015C            JUMP     Y$RCV_OFF

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:8
      138   626  272          Y$RCV_RCVIT ;
      139        272                   LABEL
      140                     *
      141                     *  Valid CCB, mark the receive CCP as initializing
      142                     *
      143   627  272 9003              LD      =KX#M_RCVST_INIT
      144   628  274 5117              ST       KX#M_RCVST
      145                     *
      146                     *  Turn on the receiver
      147                     *
      148   629  276 90025414          SET      KW#CLACTR,=KW#CLACTR_RCVON@S
                     5114
      149   630  27C 32                OUT      LR#CLACTR

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:9
      151   632  27E          Y$RCV_IDLE ;
      152        27E                   LABEL
      153                     *
      154                     *  Mark the receive CCP as idle
      155                     *
      156   633  27E 9004              LD      =KX#M_RCVST_IDLE
      157   634  280 5117              ST       KX#M_RCVST
      158                     *
      159                     *  Set up the receive byte size
      160                     *
      161   635  282 5034              LD       KX#M_CHRCTR
      162   636  284 93F1              AND     ='F1'X
      163   637  286 9402              OR      =Y#RCVCHRBTWN
      164   638  288 5134              ST       KX#M_CHRCTR
      165   639  28A 36                OUT      Y#LR_CHRCTR

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:10
      167   641  28C          Y$RCV_IDLE_LOOP ;
      168        28C                   LABEL
      169                     *
      170                     *  Wait for something to happen
      171                     *
      172   642  28C 01                WAIT
      173                     *
      174                     *  Check for start of frame
      175                     *
      176   643  28D 25                IN       Y#LR_STT
      177   644  28E 930F              AND     =Y#LR_STT_RS
      178   645  290 E209              BZ       Y$RCV_FRAME
      179                     *
      180                     *  Not start of frame, check for overrun
      181                     *
      182   646  292 25                IN       Y#LR_STT
      183   647  293 9301              AND     =Y#LR_STT_RS_REOF
      184   648  295 E2F6              BZ       Y$RCV_IDLE_LOOP
      185   649  297 E600D7            JUMP     Y$RCV_OVERRUN

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:11
      187   651  29A          Y$RCV_FRAME ;
      188        29A                   LABEL
      189                     *
      190                     *  Mark the receive CCP as receiving data bytes
      191                     *
      192   652  29A 9005              LD      =KX#M_RCVST_RCV
      193   653  29C 5117              ST       KX#M_RCVST
      194                     *
      195                     *  Setup the initial CRC
      196                     *
      197   654  29E 90FF              LD      ='FF'X
      198   655  2A0 5103              ST       KW#RCVCRCRSD1
      199   656  2A2 5104              ST       KW#RCVCRCRSD2
      200                     *
      201                     *  Receive the first data byte (with CRC) and save it
      202                     *
      203   657  2A4 A1                RECV     CRC
      204   658  2A5 5118              ST       KX#M_RCVBYTE
      205                     *
      206                     *  Transfer the data byte to the FEP
      207                     *
      208   659  2A7 11                ST
      209                     *
      210                     *  Is the CCB used up
      211                     *
      212   660  2A8 F305              BNLC     Y$RCV_FRM_NLC
      213   661  2AA E600CC            JUMP     Y$RCV_LC
      214   662  2AE          Y$RCV_FRM_NLC ;
      215        2AE                   LABEL
      216                     *
      217                     *  Wait for the second data byte
      218                     *
      219   663  2AE 01                WAIT

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:12
      221                     *
      222                     *  Check the receive status
      223                     *
      224   665  2AF 25                IN       Y#LR_STT
      225   666  2B0 930F              AND     =Y#LR_STT_RS
      226   667  2B2 E219              BZ       Y$RCV_REST
      227                     *
      228                     *  Not ok, check for end of frame
      229                     *
      230   668  2B4 9301              AND     =Y#LR_STT_RS_REOF
      231   669  2B6 F253              BNZ      Y$RCV_END
      232                     *
      233                     *  Not end of frame, check for overrun
      234                     *
      235   670  2B8 25                IN       Y#LR_STT
      236   671  2B9 9302              AND     =Y#LR_STT_RS_RO
      237   672  2BB E204              BZ       Y$RCV_2_NOR
      238   673  2BD E600B1            JUMP     Y$RCV_OVERRUN
      239   674  2C0          Y$RCV_2_NOR ;
      240        2C0                   LABEL
      241                     *
      242                     *  Not overrun, check for abort
      243                     *
      244   675  2C0 25                IN       Y#LR_STT
      245   676  2C1 9304              AND     =Y#LR_STT_RS_RA
      246   677  2C3 E204              BZ       Y$RCV_2_NAB
      247   678  2C5 E600C1            JUMP     Y$RCV_ABORT
      248   679  2C8          Y$RCV_2_NAB ;
      249        2C8                   LABEL
      250                     *
      251                     *  Not abort, must be a short frame
      252                     *
      253   680  2C8 E600CC            JUMP     Y$RCV_SHORT

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:13
      255   682  2CC          Y$RCV_REST ;
      256        2CC                   LABEL
      257                     *
      258                     *  Ok, read the second data byte (with CRC) and save it
      259                     *
      260   683  2CC A1                RECV     CRC
      261   684  2CD 5118              ST       KX#M_RCVBYTE
      262                     *
      263                     *  Transfer the data byte to the FEP
      264                     *
      265   685  2CF 11                ST
      266                     *
      267                     *  Is the CCB used up
      268                     *
      269   686  2D0 F305              BNLC     Y$RCV_REST_NLC
      270   687  2D2 E600A4            JUMP     Y$RCV_LC
      271   688  2D6          Y$RCV_REST_NLC ;
      272        2D6                   LABEL
      273                     *
      274                     *  Setup the new receive byte size
      275                     *
      276   689  2D6 5034              LD       KX#M_CHRCTR
      277   690  2D8 93F1              AND     ='F1'X
      278   691  2DA 940C              OR      =Y#RCVCHRLNG8
      279   692  2DC 5134              ST       KX#M_CHRCTR
      280   693  2DE 36                OUT      Y#LR_CHRCTR
      281                     *
      282                     *  Wait for the next data byte
      283                     *
      284                     *
      285                     *   This Branch turns the following do-until loop into a do-while.
      286                     *   In the do-until form, the CCP was unable to detect frames of
      287                     *   length 3 bytes.
      288                     *
      289   694  2DF E00C              B Y$RCV_NLC

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:14
      291   696  2E2          Y$RCV_OK ;
      292        2E2                   LABEL
      293                     *
      294                     *  Ok, read a data byte (with CRC) and save it
      295                     *
      296   697  2E2 A1                RECV     CRC
      297   698  2E3 5118              ST       KX#M_RCVBYTE
      298                     *
      299                     *  Transfer the data byte to the FEP
      300                     *
      301   699  2E5 11                ST
      302                     *
      303                     *  Check for buffer exhausted
      304                     *
      305   700  2E6 F305              BNLC     Y$RCV_NLC
      306   701  2E8 E6008E            JUMP     Y$RCV_LC
      307   702  2EC          Y$RCV_NLC         ;
      308        2EC                   LABEL
      309                     *
      310                     *  Wait for the next data byte
      311                     *
      312   703  2EC 01                WAIT

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:15
      314                     *
      315                     *  Check the receive status
      316                     *
      317   705  2ED 25                IN       Y#LR_STT
      318   706  2EE 930F              AND     =Y#LR_STT_RS
      319   707  2F0 E2F1              BZ       Y$RCV_OK
      320                     *
      321                     *  Not ok, check for end of frame
      322                     *
      323   708  2F2 9301              AND     =Y#LR_STT_RS_REOF
      324   709  2F4 F215              BNZ      Y$RCV_END
      325                     *
      326                     *  Not end of frame, check for overrun
      327                     *
      328   710  2F6 25                IN       Y#LR_STT
      329   711  2F7 9302              AND     =Y#LR_STT_RS_RO
      330   712  2F9 E204              BZ       Y$RCV_3_NOR
      331   713  2FB E60073            JUMP     Y$RCV_OVERRUN
      332   714  2FE          Y$RCV_3_NOR ;
      333        2FE                   LABEL
      334                     *
      335                     *  Not overrun, check for abort
      336                     *
      337   715  2FE 25                IN       Y#LR_STT
      338   716  2FF 9304              AND     =Y#LR_STT_RS_RA
      339   717  301 E204              BZ       Y$RCV_3_NAB
      340   718  303 E60083            JUMP     Y$RCV_ABORT
      341   719  306          Y$RCV_3_NAB ;
      342        306                   LABEL
      343                     *
      344                     *  Not abort, must be a short frame
      345                     *
      346   720  306 E6008E            JUMP     Y$RCV_SHORT

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:16
      348   722  30A          Y$RCV_END ;
      349        30A                   LABEL
      350                     *
      351                     *  Mark the receive CCP as receiving the last data byte
      352                     *
      353   723  30A 9006              LD      =KX#M_RCVST_RCVLST
      354   724  30C 5117              ST       KX#M_RCVST
      355                     *
      356                     *  Read the data byte (with CRC) and save it
      357                     *
      358   725  30E A1                RECV     CRC
      359   726  30F 5118              ST       KX#M_RCVBYTE
      360                     *
      361                     *  Transfer the data byte to the FEP
      362                     *
      363   727  311 11                ST
      364                     *
      365                     *  Setup the receive byte size
      366                     *
      367   728  312 5034              LD       KX#M_CHRCTR
      368   729  314 93F1              AND     ='F1'X
      369   730  316 9402              OR      =Y#RCVCHRBTWN
      370   731  318 5134              ST       KX#M_CHRCTR
      371   732  31A 36                OUT      Y#LR_CHRCTR
      372                     *
      373                     *  Label for recovery from buffer exhaustion
      374                     *
      375   733  31C          Y$RCV_CRC1 ;
      376        31C                   LABEL
      377                     *
      378                     *  Wait for the first CRC byte
      379                     *
      380   734  31C 01                WAIT

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:17
      382                     *
      383                     *  Mark the receive CCP as receiving the first CRC byte
      384                     *
      385   736  31D 9007              LD      =KX#M_RCVST_RCVCRC1
      386   737  31F 5117              ST       KX#M_RCVST
      387                     *
      388                     *  Check the receive status
      389                     *
      390   738  321 25                IN       Y#LR_STT
      391   739  322 930F              AND     =Y#LR_STT_RS
      392   740  324 E211              BZ       Y$RCV_CRC1_OK
      393                     *
      394                     *  Not ok, check for out of sync
      395                     *
      396   741  326 9301              AND     =Y#LR_STT_RS_REOF
      397   742  328 E205              BZ       Y$RCV_INSYNC
      398   743  32A E60084            JUMP     Y$RCV_RESYNC
      399                     *
      400                     *  Not out of sync, check for abort. If not abort, must be overrun
      401                     *
      402   744  32E          Y$RCV_INSYNC      ;
      403        32E                   LABEL
      404   745  32E 25                IN       Y#LR_STT
      405   746  32F 9304              AND     =Y#LR_STT_RS_RA
      406   747  331 E23E              BZ       Y$RCV_OVERRUN
      407   748  333 E60053            JUMP     Y$RCV_ABORT

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:18
      409   750  336          Y$RCV_CRC1_OK ;
      410        336                   LABEL
      411                     *
      412                     *  Ok, read the first CRC byte (with CRC) and save it
      413                     *
      414   751  336 A1                RECV     CRC
      415   752  337 5118              ST       KX#M_RCVBYTE
      416                     *
      417                     *  Wait for the second CRC byte
      418                     *
      419   753  339 01                WAIT

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:19
      421                     *
      422                     *  Mark the receive CCP as receiving the second CRC byte
      423                     *
      424   755  33A 9008              LD      =KX#M_RCVST_RCVCRC2
      425   756  33C 5117              ST       KX#M_RCVST
      426                     *
      427                     *  Check the receive status
      428                     *
      429   757  33E 25                IN       Y#LR_STT
      430   758  33F 930F              AND     =Y#LR_STT_RS
      431   759  341 E210              BZ       Y$RCV_CRC2_OK
      432                     *
      433                     *  Not ok, check for out of sync
      434                     *
      435   760  343 9301              AND     =Y#LR_STT_RS_REOF
      436   761  345 E204              BZ       Y$RCV_INSYNC2
      437   762  347 E60067            JUMP     Y$RCV_RESYNC
      438                     *
      439                     *  Not out of sync, check for abort. If not abort, must be overrun
      440                     *
      441   763  34A          Y$RCV_INSYNC2     ;
      442        34A                   LABEL
      443   764  34A 25                IN       Y#LR_STT
      444   765  34B 9304              AND     =Y#LR_STT_RS_RA
      445   766  34D E222              BZ       Y$RCV_OVERRUN
      446   767  34F E60037            JUMP     Y$RCV_ABORT

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:20
      448   769  352          Y$RCV_CRC2_OK ;
      449        352                   LABEL
      450                     *
      451                     *  Ok, read the second CRC byte (with CRC) and save it
      452                     *
      453   770  352 A1                RECV     CRC
      454   771  353 5118              ST       KX#M_RCVBYTE
      455                     *
      456                     *  Check the CRC residue
      457                     *
      458   772  355 5003              LD       KW#RCVCRCRSD1
      459   773  357 92B8              C       =Y#RCVCRCRSD1
      460   774  359 F14A              BNE      Y$RCV_BAD_CRC
      461   775  35B 5004              LD       KW#RCVCRCRSD2
      462   776  35D 92F0              C       =Y#RCVCRCRSD2
      463   777  35F F144              BNE      Y$RCV_BAD_CRC

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:21
      465   779  362          Y$RCV_NEXT_CCB ;
      466        362                   LABEL
      467                     *
      468                     *  Get the next CCB (causes an interrupt to the FEP)
      469                     *
      470   780  362 02                GNCCB
      471                     *
      472                     *  If this CCB is not valid, quit listening
      473                     *
      474   781  363 F768              BNVB     Y$RCV_OFF
      475                     *
      476                     *    If the number of interupts is zero interupt the L6
      477                     *
      478   782  365 500993C0          BSET     KW#RCVCHNCTR,=KW#RCVCHNCTR_DFRINTCNT@S,;
                     F202
      479                                       Y$RCV_NOINTERUPT
      480   783  36B 08                INT
      481                     *
      482   784  36C          Y$RCV_NOINTERUPT ;
      483        36C                   LABEL
      484                     *
      485                     *  The CCB is valid, keep listening
      486                     *
      487   785  36C E6FF10            JUMP     Y$RCV_IDLE

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:22
      489   787  370          Y$RCV_OVERRUN ;
      490        370                   LABEL
      491                     *
      492                     *  Mark the receive CCP as processing an overrun
      493                     *  Firmware sets the Data Service Error bit in the CCB
      494                     *
      495   788  370 900D              LD      =KX#M_RCVST_ORUN
      496   789  372 5117              ST       KX#M_RCVST
      497                     *
      498                     *  Wait once (to clear the overrun status)
      499                     *
      500   790  374 01                WAIT
      501                     *
      502                     *  Go try to get the next CCB
      503                     *
      504   791  375 E0EC              B        Y$RCV_NEXT_CCB

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:23
      506   793  378          Y$RCV_LC ;
      507        378                   LABEL
      508                     *
      509                     *  Mark the receive CCP as having exhausted the receive CCB
      510                     *
      511   794  378 900F              LD      =KX#M_RCVST_LC
      512   795  37A 5117              ST       KX#M_RCVST
      513                     *
      514                     *  Mark the CCB as a short frame, (it is not a short frame,
      515                     *  the CCB exhausted bit will be set)
      516                     *
      517   796  37C 5010              LD       KX#M_RCVCCBSTAT
      518   797  37E 93F9              AND     ='F9'X
      519   798  380 9404              OR      =KX#M_RCVERR_SHORT*2        (*2 for the correct bits)
      520   799  382 5110              ST       KX#M_RCVCCBSTAT
      521                     *
      522                     *  Jump to the receive rest of buffer loop
      523                     *
      524   800  384 E6005E            JUMP     Y$RCV_LC_LOOP

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:24
      526   802  388          Y$RCV_ABORT ;
      527        388                   LABEL
      528                     *
      529                     *  Mark the receive CCP as processing an abort
      530                     *
      531   803  388 900A              LD      =KX#M_RCVST_ABORT
      532   804  38A 5117              ST       KX#M_RCVST
      533                     *
      534                     *  Mark the CCB as having been aborted
      535                     *
      536   805  38C 5010              LD       KX#M_RCVCCBSTAT
      537   806  38E 93F9              AND     ='F9'X
      538   807  390 9402              OR      =KX#M_RCVERR_ABORT*2        (*2 for the correct bits)
      539   808  392 5110              ST       KX#M_RCVCCBSTAT
      540                     *
      541                     *  Go try to get the next CCB
      542                     *
      543   809  394 E0CD              B        Y$RCV_NEXT_CCB

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:25
      545   811  396          Y$RCV_SHORT ;
      546        396                   LABEL
      547                     *
      548                     *  Mark the receive CCP as processing a short frame
      549                     *
      550   812  396 900B              LD      =KX#M_RCVST_SHORT
      551   813  398 5117              ST       KX#M_RCVST
      552                     *
      553                     *  Mark the CCB as a short frame
      554                     *
      555   814  39A 5010              LD       KX#M_RCVCCBSTAT
      556   815  39C 93F9              AND     ='F9'X
      557   816  39E 9404              OR      =KX#M_RCVERR_SHORT*2        (*2 for the correct bits)
      558   817  3A0 5110              ST       KX#M_RCVCCBSTAT
      559                     *
      560                     *  Go try to get the next CCB
      561                     *
      562   818  3A2 E0BF              B        Y$RCV_NEXT_CCB

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:26
      564   820  3A4          Y$RCV_BAD_CRC ;
      565        3A4                   LABEL
      566                     *
      567                     *  Mark the receive CCP as processing a CRC error
      568                     *
      569   821  3A4 900C              LD      =KX#M_RCVST_BAD_CRC
      570   822  3A6 5117              ST       KX#M_RCVST
      571                     *
      572                     *  Set the Data Check Bit in the CCB
      573                     *
      574   823  3A8 90405411          SET      KW#RCVDATCHKERR,=KW#RCVDATCHKERR@S
                     5111
      575                     *
      576                     *  Go try to get the next CCB
      577                     *
      578   824  3AE E0B3              B        Y$RCV_NEXT_CCB

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:27
      580   826  3B0          Y$RCV_RESYNC ;
      581        3B0                   LABEL
      582                     *
      583                     *  Mark the receive CCP as resynchronizing
      584                     *
      585   827  3B0 900E              LD      =KX#M_RCVST_RESYNC
      586   828  3B2 5117              ST       KX#M_RCVST
      587                     *
      588                     *  Mark the CCB as having under gone a resynchronization
      589                     *
      590   829  3B4 5010              LD       KX#M_RCVCCBSTAT
      591   830  3B6 93F9              AND     ='F9'X
      592   831  3B8 9406              OR      =KX#M_RCVERR_RESYNC*2       (*2 for the correct bits)
      593   832  3BA 5110              ST       KX#M_RCVCCBSTAT
      594                     *
      595                     *  Resynchronize the receiver by turning it off and then back on
      596                     *
      597   833  3BC 90FD5314          RESET    KW#CLACTR,=KW#CLACTR_RCVON@S
                     5114
      598   834  3C2 32                OUT      LR#CLACTR
      599   835  3C3 90025414          SET      KW#CLACTR,=KW#CLACTR_RCVON@S
                     5114
      600   836  3C9 32                OUT      LR#CLACTR
      601                     *
      602                     *  Go try to get the next CCB
      603                     *
      604   837  3CA E097              B        Y$RCV_NEXT_CCB

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:28
      606   839  3CC          Y$RCV_OFF ;
      607        3CC                   LABEL
      608                     *
      609                     *  Mark the receive CCP as out of CCBs
      610                     *
      611   840  3CC 9009              LD      =KX#M_RCVST_NCCB
      612   841  3CE 5117              ST       KX#M_RCVST
      613                     *
      614                     *  Turn off the receiver
      615                     *
      616   842  3D0 90FD5314          RESET    KW#CLACTR,=KW#CLACTR_RCVON@S
                     5114
      617   843  3D6 32                OUT      LR#CLACTR
      618                     *
      619                     *  Interrupt the FEP because we have no CCBs
      620                     *
      621   844  3D7 500993C0         BSET      KW#RCVCHNCTR,=KW#RCVCHNCTR_DFRINTCNT@S,;
                     F202
      622                                       Y$RCV_SKIPINT
      623   845  3DD 08                INT
      624                     *
      625                     *  Wait for something to happen
      626                     *
      627   846  3DE          Y$RCV_SKIPINT ;
      628        3DE                  LABEL
      629   847  3DE 01                WAIT
      630                     *
      631                     *  Check for a valid CCB (the FEP gave us some more CCBs)
      632                     *
      633   848  3DF F7EC              BNVB     Y$RCV_OFF
      634                     *
      635                     *  We got some CCBs, go and listen
      636                     *
      637   849  3E1 E6FE8F            JUMP     Y$RCV_RCVIT

Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:29
      639                     *
      640                     *  Loop for receiving remainder of overrun buffer
      641                     *
      642   851  3E4          Y$RCV_LC_LOOP ;
      643        3E4                   LABEL
      644                     *
      645                     *  Wait for the next byte
      646                     *
      647   852  3E4 01                WAIT
      648                     *
      649                     *  Receive it to clear the pipe ( don't store it )
      650                     *
      651   853  3E5 A1                RECV     CRC
      652                     *
      653                     *  Check the receive status
      654                     *
      655   854  3E6 25                IN       Y#LR_STT
      656   855  3E7 930F              AND     =Y#LR_STT_RS
      657   856  3E9 E2FA              BZ       Y$RCV_LC_LOOP
      658                     *
      659                     *  Not ok, check for end of frame
      660                     *
      661   857  3EB 9301              AND     =Y#LR_STT_RS_REOF
      662   858  3ED F20E              BNZ      Y$RCV_KLUDGE1
      663                     *
      664                     *  Not end of frame, check for overrun
      665                     *
      666   859  3EF 25                IN       Y#LR_STT
      667   860  3F0 9302              AND     =Y#LR_STT_RS_RO
      668   861  3F2 F20D              BNZ      Y$RCV_KLUDGE2
      669                     *
      670                     *  Not overrun, check for abort
      671                     *
      672   862  3F4 25                IN       Y#LR_STT
      673   863  3F5 5304              AND      Y#LR_STT_RS_RA
      674   864  3F7 F290              BNZ      Y$RCV_ABORT
Elsie.D00  X.25 Handler Receive CCP                                             WED JUL 30 '97 02:22 Page:30
      675                     *
      676                     *  Not abort, must be a short frame
      677                     *
      678   865  3F9 E09C              B        Y$RCV_SHORT
      679                     *
      680                     *  Kludge to jump to Y$RCV_CRC1
      681                     *
      682   866  3FC          Y$RCV_KLUDGE1 ;
      683        3FC                   LABEL
      684   867  3FC E6FF1E            JUMP     Y$RCV_CRC1
      685                     *
      686                     *  Kludge to jump to Y$RCV_OVERRUN
      687                     *
      688   868  400          Y$RCV_KLUDGE2 ;
      689        400                   LABEL
      690   869  400 E6FF6E            JUMP     Y$RCV_OVERRUN


Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:31
      692   871                        TITLE    'X.25 Handler Transmit CCP'
      693   872  404          Y$BRECEIVE_START ;
      694        404                   LABEL
      695                     *
      696                     *  Check for a valid CCB
      697                     *
      698   873  404 E705              BVB      Y$BRCV_RCVIT
      699                     *
      700                     *  Not valid, go to stopped
      701                     *
      702   874  406 E6007C            JUMP     Y$BRCV_OFF

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:32
      704   876  40A          Y$BRCV_RCVIT ;
      705        40A                   LABEL
      706                     *
      707                     *  Valid CCB, mark the receive CCP as initializing
      708                     *
      709   877  40A 9003              LD      =KX#M_RCVST_INIT
      710   878  40C 5117              ST       KX#M_RCVST
      711                     *
      712                     *        SET UP INITIAL VALUE FOR L6
      713                     *
      714   879  40E 9010              LD      ='10'X
      715   880  410 36                OUT      Y#BLR_CONF
      716                     *
      717                     *
      718                     *  Turn on the receiver
      719                     *
      720   881  411 90025414          SET      KW#CLACTR,=KW#CLACTR_RCVON@S
                     5114
      721   882  417 32                OUT      LR#CLACTR
      722                     *
      723                     *        MUST DELAY 5 MICRO SECONDS
      724                     *
      725   883  418 00                NOP
      726   884  419 00                NOP
      727   885  41A 00                NOP
      728   886  41B 00                NOP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:33
      730   888  41C          Y$BRCV_IDLE ;
      731        41C                   LABEL
      732                     *
      733                     *  Mark the receive CCP as idle
      734                     *
      735   889  41C 9004              LD      =KX#M_RCVST_IDLE
      736   890  41E 5117              ST       KX#M_RCVST
      737                     *
      738                     *  Set up the receive byte size
      739                     *
      740   891  420 5019              LD       KX#M_RCVCON
      741   892  422 36                OUT      Y#BLR_CONF

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:34
      743   894  424          Y$BRCV_IDLE_LOOP ;
      744        424                   LABEL
      745                     *
      746                     *  Wait for something to happen
      747                     *
      748   895  424 01                WAIT
      749   896  425 F5FE              BARF      Y$BRCV_IDLE_LOOP
      750                     *
      751                     * Mark the receive CCP as receiving data bytes
      752                     *
      753   897  427 9005              LD      =KX#M_RCVST_RCV
      754   898  429 5117              ST       KX#M_RCVST
      755   899  42C          Y$BRCV_GO  ;
      756        42C                   LABEL
      757                     *
      758                     *  Check Status to see if an error has occured
      759                     *
      760   900  42C 27                IN       Y#BLR_STT_RS
      761   901  42D F20A              BNZ      Y$BRCV_STATUS
      762   902  42F A0                RECV
      763   903  430 11                ST
      764                     *
      765                     *        Check to see if that is the last character
      766                     *
      767   904  431 E328              BLC      Y$BRCV_LC
      768   905  433 E5F8              BAR      Y$BRCV_GO
      769   906  435 E0EE              B        Y$BRCV_IDLE_LOOP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:35
      771   908  438          Y$BRCV_STATUS ;
      772        438                   LABEL
      773                     *
      774                     *        Check and see if this was the end of a frame
      775                     *
      776   909  438 9310              AND     =Y#BLR_STT_RS_REOF
      777   910  43A E237              BZ       Y$BRCV_ABORT
      778   911  43C 27                IN       Y#BLR_STT_RS
      779   912  43D 93E0              AND     =Y#BLR_STT_RS_ABI
      780   913  43F F232              BNZ      Y$BRCV_ABORT
      781                     *
      782                     *        Get last data byte
      783                     *
      784   914  441 A0                RECV
      785   915  442 11                ST

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:36
      787   917  444          Y$BRCV_NEXT_CCB ;
      788        444                   LABEL
      789                     *
      790                     *        Get the next CCB
      791                     *
      792   918  444 02                GNCCB
      793                     *
      794                     *    If the number of interupts is zero interupt the L6
      795                     *
      796   919  445 500993C0          BSET     KW#RCVCHNCTR,=KW#RCVCHNCTR_DFRINTCNT@S,;
                     F202
      797                                       Y$BRCV_NOINTERUPT
      798   920  44B 08                INT
      799                     *
      800   921  44C          Y$BRCV_NOINTERUPT ;
      801        44C                   LABEL
      802   922  44C F705               BNVB     Y$BRCV_WAIT4CCB
      803                     *
      804                     *        If the adapter is still ready go get the next fram
      805                     *
      806   923  44E E5DD              BAR      Y$BRCV_GO
      807   924  450 E0CB              B        Y$BRCV_IDLE
      808   925  452 01       Y$BRCV_WAIT4CCB ;
      809                              WAIT
      810   926  453 F5FE              BARF     Y$BRCV_WAIT4CCB
      811   927  455 F72E              BNVB     Y$BRCV_OFF
      812   928  457 E0D4              B        Y$BRCV_GO

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:37
      814   930  45A          Y$BRCV_LC ;
      815        45A                   LABEL
      816                     *
      817                     *  Mark the receive CCP as having exhausted the receive CCB
      818                     *
      819   931  45A 900F              LD      =KX#M_RCVST_LC
      820   932  45C 5117              ST       KX#M_RCVST
      821                     *
      822                     *  Mark the CCB as a short frame, (it is not a short frame,
      823                     *  the CCB exhausted bit will be set)
      824                     *
      825   933  45E 5010              LD       KX#M_RCVCCBSTAT
      826   934  460 93F9              AND     ='F9'X
      827   935  462 9404              OR      =KX#M_RCVERR_SHORT*2        (*2 for the correct bits)
      828   936  464 5110              ST       KX#M_RCVCCBSTAT
      829                     *
      830                     *        Read Charactes until EOF
      831                     *
      832   937  466          Y$BRCV_SREOF_LP ;
      833        466                   LABEL
      834                     *
      835                     *  Check status
      836                     *
      837   938  466 27                IN       Y#BLR_STT_RS
      838   939  467 F206              BNZ      Y$BRCV_FEOF
      839   940  469 A0                RECV     BROADBAND
      840   941  46A 01                WAIT
      841   942  46B E0FA              B        Y$BRCV_SREOF_LP
      842                     *
      843                     *    The end of the frame has been found
      844                     *
      845   943  46E          Y$BRCV_FEOF ;
      846        46E                   LABEL
      847                     *
      848                     *  Go get next CCB
      849                     *
Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:38
      850   944  46E E6FFD4            JUMP     Y$BRCV_NEXT_CCB

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:39
      852   946  472          Y$BRCV_ABORT ;
      853        472                   LABEL
      854                     *
      855                     *  Mark the receive CCP as processing an abort
      856                     *
      857   947  472 27                IN       Y#BLR_STT_RS
      858   948  473 11                ST
      859   949  474 900A              LD      =KX#M_RCVST_ABORT
      860   950  476 5117              ST       KX#M_RCVST
      861   951  478 37                OUT      Y#BLR_STT_RS
      862                     *
      863                     *  Mark the CCB as having been aborted
      864                     *
      865   952  479 5010              LD       KX#M_RCVCCBSTAT
      866   953  47B 93F9              AND     ='F9'X
      867   954  47D 9402              OR      =KX#M_RCVERR_ABORT*2        (*2 for the correct bits)
      868   955  47F 5110              ST       KX#M_RCVCCBSTAT
      869                     *
      870                     *        Read character in that caused the error
      871                     *
      872   956  481 A0                RECV
      873                     *
      874                     *  Go try to get the next CCB
      875                     *
      876   957  482 E0C1              B        Y$BRCV_NEXT_CCB

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:40
      878   959  484          Y$BRCV_OFF ;
      879        484                   LABEL
      880                     *
      881                     *  Mark the receive CCB as out of CCBs
      882                     *
      883   960  484 9009              LD      =KX#M_RCVST_NCCB
      884   961  486 5117              ST       KX#M_RCVST
      885                     *
      886                     *  Turn off the receiver
      887                     *
      888   962  488 90FD5314          RESET    KW#CLACTR,=KW#CLACTR_RCVON@S
                     5114
      889   963  48E 32                OUT      LR#CLACTR
      890                     *
      891                     *  Interrupt the FEP because we have no CCBs
      892                     *
      893   964  48F 500993C0         BSET      KW#RCVCHNCTR,=KW#RCVCHNCTR_DFRINTCNT@S,;
                     F202
      894                                       Y$BRCV_SKIPINT
      895   965  495 08                INT
      896                     *
      897                     *  Wait for something to happen
      898                     *
      899   966  496          Y$BRCV_SKIPINT ;
      900        496                  LABEL
      901   967  496 01                WAIT
      902                     *
      903                     *  Check for a valid CCB (the FEP gave us some more CCBs)
      904                     *
      905   968  497 F7EC              BNVB     Y$BRCV_OFF
      906                     *
      907                     *  We got some CCBs, go and listen
      908                     *
      909   969  499 E6FF6F            JUMP     Y$BRCV_RCVIT

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:41
      910   970                        TITLE    'X.25 Handler Transmit CCP'
      911   971  49C          Y$TRANSMIT_CHKTYP ;
      912        49C                   LABEL
      913                     *
      914                     *  Determine if we are Broadband or a normal adapter
      915                     *
      916   972  49C 501A              LD       KX#M_RCVTYP
      917   973  49E F207              BNZ      Y$BTRANSMIT_START
      918   974  4A0          Y$TRANSMIT_START ;
      919        4A0                   LABEL
      920                     *
      921                     *  Set the line character control
      922                     *
      923   975  4A0 5034              LD       KX#M_CHRCTR
      924   976  4A2 36                OUT      Y#LR_CHRCTR
      925                     *
      926                     *  Normal/Broadband common setup for line registers
      927                     *  and test for OK to send
      928                     *
      929   977  4A3 E006              B        Y$STRN_COMMON_SETUP
      930   978  4A6          Y$BTRANSMIT_START ;
      931        4A6                   LABEL
      932                     *
      933                     *  Set the line character control
      934                     *
      935   979  4A6 503A              LD       KX#M_TRNCON
      936   980  4A8 36                OUT      Y#BLR_CONF
      937                     *
      938                     *  OUT 3 will initialize the receiver, so that we do not have to
      939                     *  worry about data left in the FIFO buffers of the BB adaptor.
      940                     *
      941   981  4A9 33                OUT      3

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:42
      943                     *
      944                     *  Normal/Broadband line register setup
      945                     *  and test for OK to send
      946                     *
      947   983  4AA          Y$STRN_COMMON_SETUP ;
      948        4AA                   LABEL
      949                     *
      950                     *  Turn off the loop back test mode and turn on DTR
      951                     *
      952   984  4AA 90FB5314          RESET    KW#CLACTR,=KW#CLACTR_LOPBCK@S
                     5114
      953   985  4B0 90805414          SET      KW#CLACTR,=KW#CLACTR_DTR@S
                     5114
      954                     *
      955                     *  Turn on the scan of LR5
      956                     *
      957   986  4B6 90805428          SET      KW#TRNSCN,=KW#TRNSCN_SCNCTR@S
                     5128
      958                     *
      959                     *  Turn on request to send (RTS)
      960                     *
      961   987  4BC 90405414          SET      KW#CLACTR,=KW#CLACTR_RTS@S
                     5114
      962   988  4C2 32                OUT      LR#CLACTR
      963   989  4C3 25                IN       Y#LR_STT
      964   990  4C4 512E              ST       KW#TRNSTT
      965                     *
      966                     *  Is the data set indicating CTS
      967                     *
      968   991  4C6 502E9340          BRESET   KW#TRNSTT,=KW#TRNSTT_CTS@S,Y$STRN_NOT_CTS
                     E211
      969                     *
      970                     *  One more test for DSR if we are normal adaptor.
      971                     *
      972   992  4CC 501A              LD       KX#M_RCVTYP
      973   993  4CE E207              BZ       Y$SKIP_DSRTEST
Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:43
      974   994  4D0 502E9380          BRESET   KW#TRNSTT,=KW#TRNSTT_DSR@S,Y$STRN_NOT_CTS
                     E207
      975                     *
      976                     *  CTS is OK, check for a valid CCB
      977                     *
      978   995  4D6 E70D     Y$SKIP_DSRTEST ;
      979                              BVB      Y$STRN_TRNIT
      980                     *
      981                     *  Not valid, go to stopped
      982                     *
      983   996  4D8 E600C9            JUMP     Y$STRN_OFF

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:44
      985   998  4DC          Y$STRN_NOT_CTS ;
      986        4DC                   LABEL
      987                     *
      988                     *  Mark the transmit CCP as waiting for CTS
      989                     *
      990   999  4DC 9002              LD      =KX#M_TRNST_WAIT
      991  1000  4DE 5138              ST       KX#M_TRNST
      992                     *
      993                     *  Wait for CTS to change
      994                     *
      995  1001  4E0 01                WAIT
      996                     *
      997                     *  CTS changed, go try to start the transmitter
      998                     *
      999  1002  4E1 E0BA              B        Y$TRANSMIT_CHKTYP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:45
     1001  1004  4E4          Y$STRN_TRNIT       ;
     1002        4E4                   LABEL
     1003                     *
     1004                     *  Valid CCB, mark the transmit CCP as initializing
     1005                     *
     1006  1005  4E4 9003              LD      =KX#M_TRNST_INIT
     1007  1006  4E6 5138              ST       KX#M_TRNST
     1008                     *
     1009                     *  Turn on the transmitter
     1010                     *
     1011  1007  4E8 90015414          SET      KW#CLACTR,=KW#CLACTR_TRNON@S
                     5114
     1012  1008  4EE 32                OUT      LR#CLACTR
     1013                     *
     1014                     *  Determine if Broadband or Normal
     1015                     *
     1016  1009  4EF 501A              LD       KX#M_RCVTYP
     1017  1010  4F1 F234              BNZ      Y$BTRN_TRNIT
     1018                     *
     1019                     *  Normal adaptor. There used to be a wait instruction here.
     1020                     *
     1021                     *
     1022                     *  Find out if it is ok to continue
     1023                     *
     1024  1011  4F3 F055              BAL      Y$STRN_TEST_DTR_CTS_JMP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:46
     1026  1013  4F6          Y$TRN_FRAME ;
     1027        4F6                   LABEL
     1028                     *
     1029                     *  Mark the transmit CCP as at the start of a frame
     1030                     *
     1031  1014  4F6 9004              LD      =KX#M_TRNST_STFR
     1032  1015  4F8 5138              ST       KX#M_TRNST
     1033                     *
     1034                     *  Setup the initial CRC
     1035                     *
     1036  1016  4FA 90FF              LD      ='FF'X
     1037  1017  4FC 5123              ST       KW#TRNCRCRSD1
     1038  1018  4FE 5124              ST       KW#TRNCRCRSD2
     1039                     *
     1040                     *  Wait twice (two leading flags)
     1041                     *
     1042  1019  500 01                WAIT
     1043  1020  501 01                WAIT
     1044                     *
     1045                     *  Find out if it is ok to continue
     1046                     *
     1047  1021  502 F046              BAL      Y$STRN_TEST_DTR_CTS_JMP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:47
     1049                     *
     1050                     *  Mark the transmit CCP as transmitting the first data byte
     1051                     *
     1052  1023  504 9005              LD      =KX#M_TRNST_TRN1
     1053  1024  506 5138              ST       KX#M_TRNST
     1054                     *
     1055                     *  Get the first data byte and save it
     1056                     *
     1057  1025  508 10                LD
     1058  1026  509 5139              ST       KX#M_TRNBYTE
     1059                     *
     1060                     *  Send the first data byte (with CRC) and wait
     1061                     *
     1062  1027  50B 6101              SEND     CRC,WAIT
     1063                     *
     1064                     *  Find out if it is ok to continue
     1065                     *
     1066  1028  50D F03B              BAL      Y$STRN_TEST_DTR_CTS_JMP
     1067                     *
     1068                     *  Mark the transmit CCP as transmitting data bytes
     1069                     *
     1070  1029  50F 9006              LD      =KX#M_TRNST_TRN
     1071  1030  511 5138              ST       KX#M_TRNST
     1072                     *
     1073                     *  Reset the transmit end of frame bit (TEOF)
     1074                     *
     1075  1031  513 90EF5334          RESET    KX#M_CHRCTR,=KX#M_CHRCTR_TRN_TEOF@S
                     5134
     1076  1032  519 36                OUT      Y#LR_CHRCTR

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:48
     1078  1034  51A          Y$TRN_DATA ;
     1079        51A                   LABEL
     1080                     *
     1081                     *  Get the next data byte and save it
     1082                     *
     1083  1035  51A 10                LD
     1084  1036  51B 5139              ST       KX#M_TRNBYTE
     1085                     *
     1086                     *  Check for last data byte
     1087                     *
     1088  1037  51D E332              BLC      Y$STRN_LAST_DATA
     1089                     *
     1090                     *  Not the last data byte, send the data byte (with CRC) and wait
     1091                     *
     1092  1038  51F 6101              SEND     CRC,WAIT
     1093                     *
     1094                     *  Find out if it is ok to continue
     1095                     *
     1096  1039  521 F02A              BAL      Y$STRN_TEST_OK_JMP
     1097                     *
     1098                     *  Play it again Sam
     1099                     *
     1100  1040  523 E0F6              B        Y$TRN_DATA

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:49
     1102  1042  526          Y$BTRN_TRNIT ;
     1103        526                   LABEL
     1104                     *
     1105                     *  Broadband adaptor. Send a character to start things going
     1106                     *
     1107  1043  526 503C              LD       KX#M_TRNEOF
     1108  1044  528 37                OUT      Y#BLR_TRNCON
     1109  1045  529 9000              LD      =0
     1110  1046  52B 60                SEND
     1111                     *
     1112                     *  Wait once to let it all settle
     1113                     *
     1114  1047  52C 01                WAIT
     1115                     *
     1116                     *  Find out if it is ok to continue
     1117                     *
     1118  1048  52D F01B              BAL      Y$STRN_TEST_DTR_CTS_JMP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:50
     1120  1050  52F 9004     Y$BTRN_FRAME ;
     1121                     *
     1122                     *  Mark the transmit CCP as at the start of a frame
     1123                     *
     1124                              LD      =KX#M_TRNST_STFR
     1125  1051  531 5138              ST       KX#M_TRNST
     1126                     *
     1127                     *   Set up start of frame configuration information
     1128                     *
     1129  1052  533 503B              LD       KX#M_TRNSOF
     1130  1053  535 37                OUT      Y#BLR_TRNCON

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:51
     1132  1055  536 10       Y$BTRN_DATA ;
     1133                     *
     1134                     *  Get the next data byte and save it
     1135                     *
     1136                              LD
     1137  1056  537 5139              ST       KX#M_TRNBYTE
     1138                     *
     1139                     *  Check for last data byte
     1140                     *
     1141  1057  539 E316              BLC      Y$STRN_LAST_DATA
     1142                     *
     1143                     *  Not the last data byte, send the data byte (with CRC) and wait
     1144                     *
     1145  1058  53B 60                SEND
     1146  1059  53C E5F9              BAR      Y$BTRN_DATA
     1147  1060  53E 01                WAIT
     1148                     *
     1149                     *  If data set status has not changed do not check it
     1150                     *
     1151  1061  53F 50319310          BRESET   KW#TRNSTTCHN,=KW#TRNSTTCHN@S,Y$BTRN_DATA
                     E2F2
     1152                     *
     1153                     *  Find out if it is ok to continue
     1154                     *
     1155  1062  545 F006              BAL      Y$STRN_TEST_OK_JMP
     1156                     *
     1157                     *  Play it again Sam
     1158                     *
     1159  1063  547 E0EE              B        Y$BTRN_DATA
     1160                     *
     1161                     *  Jump to line signal test routines
     1162                     *
     1163  1064  549 06       Y$STRN_TEST_DTR_CTS_JMP ;
     1164                     *  Until we figure out how to better deal with line control signal
     1165                     *  changes, we will simply do a RETURN here to skip testing them.
     1166                     *N*      JUMP     Y$STRN_TEST_DTR_CTS
Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:52
     1167                              RETURN
     1168  1065  54A 00                NOP
     1169  1066  54B 00                NOP
     1170  1067  54C 06       Y$STRN_TEST_OK_JMP      ;
     1171                     *N*      JUMP     Y$STRN_TEST_OK
     1172                              RETURN
     1173  1068  54D 00                NOP
     1174  1069  54E 00                NOP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:53
     1176  1071  550          Y$STRN_LAST_DATA ;
     1177        550                   LABEL
     1178                     *
     1179                     *  Mark the transmit CCP as transmitting the last data byte
     1180                     *
     1181  1072  550 9007              LD      =KX#M_TRNST_TRNLST
     1182  1073  552 5138              ST       KX#M_TRNST
     1183                     *
     1184                     *  If we are broadband, we can skip the following steps
     1185                     *  for sending CRC bytes.
     1186                     *
     1187  1074  554 501A              LD       KX#M_RCVTYP
     1188  1075  556 F22F              BNZ      Y$BTRN_LAST_DATA
     1189                     *
     1190                     *  Set the transmit end of frame bit (TEOF)
     1191                     *
     1192  1076  558 90105434          SET      KX#M_CHRCTR,=KX#M_CHRCTR_TRN_TEOF@S
                     5134
     1193  1077  55E 36                OUT      Y#LR_CHRCTR
     1194                     *
     1195                     *  Restore the last data byte, send it (with CRC) and wait
     1196                     *
     1197  1078  55F 5039              LD       KX#M_TRNBYTE
     1198  1079  561 6101              SEND     CRC,WAIT
     1199                     *
     1200                     *  Find out if it is ok to continue
     1201                     *
     1202  1080  563 F0E8              BAL      Y$STRN_TEST_OK_JMP
     1203                     *
     1204                     *  Mark the transmit CCP as transmitting the first CRC byte
     1205                     *
     1206  1081  565 9008              LD      =KX#M_TRNST_TRNCRC1
     1207  1082  567 5138              ST       KX#M_TRNST
     1208                     *
     1209                     *  Get the first CRC byte and 1's complement it
     1210                     *
Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:54
     1211  1083  569 5023              LD       KW#TRNCRCRSD1
     1212  1084  56B 95FF              XOR     ='FF'X
     1213                     *
     1214                     *  Send the first CRC byte (without CRC) and wait
     1215                     *
     1216  1085  56D 6001              SEND     WAIT
     1217                     *
     1218                     *  Find out if it is ok to continue
     1219                     *
     1220  1086  56F F0DC              BAL      Y$STRN_TEST_OK_JMP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:55
     1222                     *
     1223                     *  Mark the transmit CCP as transmitting the second CRC byte
     1224                     *
     1225  1088  571 9009     Y$TRN_CRC2 ;
     1226                              LD      =KX#M_TRNST_TRNCRC2
     1227  1089  573 5138              ST       KX#M_TRNST
     1228                     *
     1229                     *  Get the second CRC byte and 1's complement it
     1230                     *
     1231  1090  575 5024              LD       KW#TRNCRCRSD2
     1232  1091  577 95FF              XOR     ='FF'X
     1233                     *
     1234                     *  Send the second CRC byte without CRC and wait
     1235                     *
     1236  1092  579 6001              SEND     WAIT
     1237                     *
     1238                     *  Find out if it is ok to continue
     1239                     *
     1240  1093  57B F0D0              BAL      Y$STRN_TEST_OK_JMP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:56
     1242                     *
     1243                     *  Mark the transmit CCP as at the end of the frame
     1244                     *
     1245  1095  57D 900A              LD      =KX#M_TRNST_ENDFR
     1246  1096  57F 5138              ST       KX#M_TRNST
     1247                     *
     1248                     *  Wait (one trailing flag)
     1249                     *
     1250  1097  581 01                WAIT
     1251                     *
     1252                     *  Find out if it is ok to continue
     1253                     *
     1254  1098  582 F0C6              BAL      Y$STRN_TEST_DTR_CTS_JMP
     1255  1099  584 E00A              B        Y$STRN_NEXT_CCB

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:57
     1257  1101  586          Y$BTRN_LAST_DATA ;
     1258        586                   LABEL
     1259                     *
     1260                     *  Set the transmit end of frame bit (TEOF)
     1261                     *
     1262  1102  586 503C              LD       KX#M_TRNEOF
     1263  1103  588 37                OUT      Y#BLR_TRNCON
     1264                     *
     1265                     *  Restore the last data byte, send it (without CRC) and wait
     1266                     *
     1267  1104  589 5039              LD       KX#M_TRNBYTE
     1268  1105  58B 6001              SEND     WAIT
     1269                     *
     1270                     *  Find out if it is ok to continue
     1271                     *
     1272  1106  58D F0BE              BAL      Y$STRN_TEST_OK_JMP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:58
     1274  1108  58F 02       Y$STRN_NEXT_CCB ;
     1275                     *
     1276                     *  This CCB is finished, get the next one
     1277                     *
     1278                              GNCCB
     1279                     *
     1280                     *  If it's a valid CCB, go do it again
     1281                     *
     1282  1109  590 F70B              BNVB     Y$STRN_SHTDWN
     1283  1110  592 501A              LD       KX#M_RCVTYP
     1284  1111  594 F204              BNZ      Y$TO_BTRN_FRAME
     1285  1112  596 E6FF5E            JUMP     Y$TRN_FRAME
     1286  1113  599 E6FF94   Y$TO_BTRN_FRAME   ;
     1287                              JUMP     Y$BTRN_FRAME
     1288                     *
     1289                     *  Invalid CCB, mark the transmit CCP as shutting down
     1290                     *
     1291  1114  59C          Y$STRN_SHTDWN      ;
     1292        59C                   LABEL
     1293  1115  59C 900B              LD      =KX#M_TRNST_SHTDWN
     1294  1116  59E 5138              ST       KX#M_TRNST
     1295                     *
     1296                     *  Wait once to let the frame finish
     1297                     *
     1298  1117  5A0 01                WAIT
     1299                     *
     1300                     *  Find out if it is ok to continue
     1301                     *
     1302  1118  5A1 F0A7              BAL      Y$STRN_TEST_DTR_CTS_JMP

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:59
     1304  1120  5A3 900C     Y$STRN_OFF ;
     1305                     *
     1306                     *  Mark the transmit CCP as off
     1307                     *
     1308                              LD      =KX#M_TRNST_OFF
     1309  1121  5A5 5138              ST       KX#M_TRNST
     1310                     *
     1311                     *  Turn off the transmitter
     1312                     *
     1313  1122  5A7 90FE5314          RESET    KW#CLACTR,=KW#CLACTR_TRNON@S
                     5114
     1314  1123  5AD 32                OUT      LR#CLACTR
     1315                     *
     1316                     *  Interrupt the FEP because we are out of CCBs
     1317                     *
     1318  1124  5AE          Y$STRN_OFF_INT_WAIT ;
     1319        5AE                   LABEL
     1320  1125  5AE 08                INT
     1321                     *
     1322                     *  Wait until something happens
     1323                     *
     1324  1126  5B0          Y$STRN_OFF_WAIT ;
     1325        5B0                   LABEL
     1326  1127  5B0 01                WAIT
     1327                     *
     1328                     *  Find out if it is ok to continue
     1329                     *
     1330  1128  5B1 F097              BAL      Y$STRN_TEST_DTR_CTS_JMP
     1331                     *
     1332                     *  We've been restarted, do we have a CCB
     1333                     *
     1334  1129  5B3 F7FC              BNVB     Y$STRN_OFF_WAIT
     1335                     *
     1336                     *  Must be ok, go forth and transmit
     1337                     *
     1338  1130  5B5 E6FF2D            JUMP     Y$STRN_TRNIT

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:60
     1340                     *
     1341                     *  Subroutines to test for DSR and CTS
     1342                     *
     1343  1132  5B8          Y$STRN_TEST_DTR_CTS ;
     1344        5B8                   LABEL
     1345                     *
     1346                     *  See if we have lost data set ready (DSR)
     1347                     *
     1348  1133  5B8 502E9380          BRESET   KW#TRNSTT,=KW#TRNSTT_DSR@S,Y$STRN_LOST_DSR
                     E21D
     1349                     *
     1350                     *  DSR is ok, see if we have lost clear to send (CTS)
     1351                     *
     1352  1134  5BE 502E9340          BRESET   KW#TRNSTT,=KW#TRNSTT_CTS@S,Y$STRN_LOST_CTS
                     E21D
     1353                     *
     1354                     *  ALL ok, return
     1355                     *
     1356  1135  5C4 06                RETURN
     1357                     *
     1358                     *
     1359  1136  5C6          Y$STRN_TEST_OK ;
     1360        5C6                   LABEL
     1361                     *
     1362                     *  See if we have lost data set ready (DSR)
     1363                     *
     1364  1137  5C6 502E9380          BRESET   KW#TRNSTT,=KW#TRNSTT_DSR@S,Y$STRN_LOST_DSR
                     E20F
     1365                     *
     1366                     *  DSR is ok, see if we have lost clear to send (CTS)
     1367                     *
     1368  1138  5CC 502E9340          BRESET   KW#TRNSTT,=KW#TRNSTT_CTS@S,Y$STRN_LOST_CTS
                     E20F
     1369                     *
     1370                     *  See if we have an under run condition
     1371                     *
Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:61
     1372  1139  5D2 502E9301          BSET     KW#TRNSTT,=KW#TRNSTT_UNDRUN@S,Y$STRN_UND_RUN
                     F20F
     1373                     *
     1374                     *  Not under run, must be ok, return
     1375                     *
     1376  1140  5D8 06                RETURN
     1377  1141  5DA          Y$STRN_LOST_DSR ;
     1378        5DA                   LABEL
     1379                     *
     1380                     *  Mark the transmit CCP as having lost data set ready (DSR)
     1381                     *
     1382  1142  5DA 900D              LD      =KX#M_TRNST_LOST_DSR
     1383  1143  5DC 5138              ST       KX#M_TRNST
     1384                     *
     1385                     *  Go to the common error shutdown code
     1386                     *
     1387  1144  5DE E00B              B        Y$STRN_BROKEN

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:62
     1389  1146  5E0          Y$STRN_LOST_CTS ;
     1390        5E0                   LABEL
     1391                     *
     1392                     *  Mark the transmit CCP as having lost clear to send (CTS)
     1393                     *
     1394  1147  5E0 900E              LD      =KX#M_TRNST_LOST_CTS
     1395  1148  5E2 5138              ST       KX#M_TRNST
     1396                     *
     1397                     *  Go to the common error shutdown code
     1398                     *
     1399  1149  5E4 E005              B        Y$STRN_BROKEN

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:63
     1401  1151  5E6          Y$STRN_UND_RUN ;
     1402        5E6                   LABEL
     1403                     *
     1404                     *  Mark the transmit CCP as taking care of an underrun
     1405                     *  Firmware sets the data service error in the CCB
     1406                     *
     1407  1152  5E6 900F              LD      =KX#M_TRNST_UNDRUN
     1408  1153  5E8 5138              ST       KX#M_TRNST
     1409                     *
     1410                     *  Fall through to the common error shutdown code
     1411                     *

Elsie.D00  X.25 Handler Transmit CCP                                            WED JUL 30 '97 02:22 Page:64
     1413  1155  5EA          Y$STRN_BROKEN ;
     1414        5EA                   LABEL
     1415                     *
     1416                     *  Turn off the scan of LR5
     1417                     *
     1418  1156  5EA 907F5328          RESET    KW#TRNSCN,=KW#TRNSCN_SCNCTR@S
                     5128
     1419                     *
     1420                     *  Turn off the transmitter
     1421                     *
     1422  1157  5F0 90FE5314          RESET    KW#CLACTR,=KW#CLACTR_TRNON@S
                     5114
     1423  1158  5F6 32                OUT      LR#CLACTR
     1424                     *
     1425                     *  Interrupt the FEP because we have had an error
     1426                     *
     1427  1159  5F7 08                INT
     1428                     *
     1429                     *  Wait until the FEP restarts us with an I/O
     1430                     *
     1431  1160  5F8 01                WAIT
     1432                     *
     1433                     *  Go forth and transmit (we hope)
     1434                     *
     1435  1161  5F9 E6FEA1            JUMP     Y$TRANSMIT_CHKTYP
     1436  1162                        END
 LC0-00001-0              No Errors in this assembly.
