VERSION E05

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:1    
        1        1        /*M* VXT$OBJECT - processes an object unit for pass 2.    */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DMR,PLM=6,IND=4,SDI=2,CTI=8,DCI=4,CSU=2,ECU=2,ENI=4,
        8        8              THI=0,DTI=0,IAD=0,CCC                          */
        9        9        VXT$OBJECT: PROC;
       10       10
       11       11        %INCLUDE VX_INC_C;
       12    10727        %VX$NODE;

             10739    1   /*******************************************************************************
             10740    1   *                                                                              *
             10741    1   *                          VX$NODE                                                 *
             10742    1   *                                                                              *
             10743    1   *******************************************************************************/

             10759    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10760    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10761    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10762    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10763    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10764    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10765                              to list of file nodes for this node            */
             10766    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10767    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10767                  /* Head pointer to shared library list */
             10768    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10768                  /* Head pointer to list of shared libraries
             10769                                          which have been mapped to included libraries */
             10770    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10771    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10772    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10773    1         2 ADDR_START REDEF  ADDR_START_A,
             10774    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:2    
             10775    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10776    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10777    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10778    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10779    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10780    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10781    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10782    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10783    1         2 START_PAGE# REDEF START_PAGE#_A,
             10784    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10785    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10786    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10787    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10788    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10789    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10790    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10791    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10792    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10792                  /* Starting pointer for common sections for this node */
             10793    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10793                  /* Stopping pointer for common sections for this node */
             10794    1         2 L_START,
             10795    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10796    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10797    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10798    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10799    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10800    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10801    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10802    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10803    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10804    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10805    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10806    1         2 L_STOP,
             10807    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10808    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10809    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:3    
             10810    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10811    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10812    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10813    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10814    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10815    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10816    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10817    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10818    1         2 L_SIZE,
             10819    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10820    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10821    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10822    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10823    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10824    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10825    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10826    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10827    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10828    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10829    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10830    1         2 L_PREV_SIZE,
             10831    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10832    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10833    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10834    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10835    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10836    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10837    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10838    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10839    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10840    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10841    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10842    1         2 BIT_MAP                ALIGNED,
             10843    1           3 DATA                  ALIGNED,
             10844    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10845    1           3 RPROC                 ALIGNED,
             10846    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:4    
             10847    1           3 ROS                   ALIGNED,
             10848    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10849    1         2 L_SC_START,
             10850    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10851    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10852    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10853    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10854    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10855    1         2 L_SC_STOP,
             10856    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10857    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10858    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10859    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10860    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10861    1         2 PROMOTE_HEAD,
             10862    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10863    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10864    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10865    1         2 PROMOTE_TAIL,
             10866    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10867    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10868    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10869    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10870    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10871    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10872    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10873    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       13    10877        %VXD$TMPLT( EDEF=YES, SDEF=YES, SEGDEF=YES );

             10890    1   /*******************************************************************************
             10891    1   *                                                                              *
             10892    1   *                          VXD$TMPLT                                               *
             10893    1   *                                                                              *
             10894    1   *******************************************************************************/

             10898        /*
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:5    
             10899                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             10900                  ENTDEFs, SYMDEFs and SEGDEFs.
             10901        */
             10903    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             10904    1         2 VALUE SBIN UNAL,
             10905                /*K*  VALUE is the value if this entry is a constant.  */
             10906    1         2 AD REDEF VALUE,
             10907                /*K*  AD is the address if this entry is not constant.  */
             10908    1           3 LFLAGS UNAL,
             10909                  /*K*  LFLAGS is the field reserved for loader to flag load
             10910                        time attributes of the definition and must be zero
             10911                        in the object unit. */
             10912    1             4 SOURCE UBIN(3) UNAL,
             10913                    /*K*  SOURCE - Source of this DEF */
             10914    1             4 DEFINED BIT(1) UNAL,
             10915                    /*K*  DEFINED - Set if this DEF defined */
             10916    1             4 MULTIPLE BIT(1) UNAL,
             10917                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             10918    1             4 USED BIT(1) UNAL,
             10919                    /*K*  USED - Set if this DEF is used. */
             10920    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             10921                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             10922                        than 2048 (RU).  */
             10923    1           3 SECTNUM UBIN(11) UNAL,
             10924                  /*K*  SECTNUM contains an entry number into the section
             10925                        table (TYPE 3).  */
             10926    1           3 ISADDR UBIN HALF UNAL,
             10927                  /*K*  ISADDR - Is Address (RU)  */
             10928    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             10929                  /*K*  OFFSET is the word offset from the origin of the section. */
             10930    1         2 NPOINTER SBIN HALF UNAL,
             10931                /*K*  NPOINTER is a word displacement into the name record
             10932                      (TYPE 1) locating the name (of this entry). */
             10933    1         2 CONSTNT BIT(1) UNAL,
             10934                /*K*  CONSTNT is a flag bit to determine the interpretation
             10935                      of word 0.
             10936                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:6    
             10937                                    SECTNUM, and ISADDR or OFFSET.
             10938                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             10939    1         2 LFLAGS UNAL,
             10940                /*K*  LFLAGS is the field reserved for loader to flag load
             10941                      time attributes and must be zero in the object unit. */
             10942    1           3 MULTIPLE BIT(1) UNAL,
             10943                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             10944    1           3 USED BIT(1) UNAL,
             10945                  /*K*  USED - Set if this DEF is used. */
             10946    1           3 SOURCE UBIN(4) UNAL,
             10947                  /*K*  SOURCE - Source of this DEF */
             10948    1           3 IS_DCB BIT(1) UNAL,
             10949                  /*K* IS_DCB - Set if this is a DCB */
             10950    1           3 * BIT(10) UNAL,
             10951                  /*K*  * is reserved for future use and must be zero.  */
             10952    1         2 PROTECTION REDEF LFLAGS,
             10953                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             10954    1           3 TYPE UBIN(5) UNAL,
             10955                  /*K*  TYPE is the Protection type.  */
             10956    1           3 * UBIN(12) UNAL;
             10957                  /*K*  * is reserved for future use and must be zero.  */

             10968    1   /*******************************************************************************
             10969    1   *                                                                              *
             10970    1   *                          B$EDEF                                                 *
             10971    1   *                                                                              *
             10972    1   *******************************************************************************/

             10977    1   DCL 1 B$EDEF BASED ALIGNED,
             10978    1         2 LFLAGS UNAL,
             10979                /*K*  LFLAGS is the field reserved for loader to flag load
             10980                      time attributes of the definition and must be zero
             10981                      in the object unit. */
             10982    1           3 SOURCE UBIN(3) UNAL,
             10983                  /*K*  SOURCE - Source of this ENTDEF */
             10984    1           3 DEFINED BIT(1)  UNAL,
             10985                  /*K*  DEFINED - Set if this ENTDEF defined */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:7    
             10986    1           3 MULTIPLE BIT(1) UNAL,
             10987                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             10988    1           3 USED BIT(1) UNAL,
             10989                  /*K*  USED - Set if this ENTDEF is used. */
             10990    1           3 * BIT(2) UNAL,
             10991                  /*K*  * - Unused and must be zero. */
             10992    1           3 FAULTAGS BIT(1) UNAL,
             10993                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             10994    1         2 OU UNAL,
             10995    1           3 SECTNUM UBIN BYTE UNAL,
             10996                  /*K*  SECTNUM contains an entry number into the section
             10997                        table (TYPE 3).  */
             10998    1           3 OFFSET UBIN HALF UNAL,
             10999                  /*K*  OFFSET is the word offset from the origin of the section. */
             11000    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             11001                /*K*  ISADDR - Is Address (RU)  */
             11002    1         2 NPOINTER SBIN HALF UNAL,
             11003                /*K*  NPOINTER is a word displacement into the name record
             11004                      (TYPE 1) locating the name (of this entry). */
             11005    1         2 PRI BIT(1) UNAL,
             11006                /*K*  PRI is a one-bit flag denoting primary entry
             11007                      definition.
             11008                         PRI = 1, primary name (object unit name)
             11009                             = 0, not primary name                 */
             11010    1         2 ALT BIT(1) UNAL,
             11011                /*K*  ALT is a one-bit flag denoting permissible alternate
             11012                      return.
             11013                         ALT = 1, alternate return allowed
             11014                             = 0, alternate return not allowed        */
             11015    1         2 CHECK BIT(1) UNAL,
             11016                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             11017                      check and alternate return specification check.
             11018                         CHECK = 0, do not check for matching
             11019                                    arguments/parameters and alternate
             11020                                    return specification check.
             11021                               = 1, check for matching arguments/parameters
             11022                                    and alternate return specification.  */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:8    
             11023    1         2 CST UBIN(4) UNAL,
             11024                /*K*  CST is a 4-bit field denoting calling sequence type.
             11025                         CST =  0, Standard CP-6 Callable Procedure
             11026                         CST =  1, Nonstandard Call Type
             11027                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11028                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11029                         CST =  4, Standard CP-6 Function Procedure; a
             11030                                   variable table entry will be present to
             11031                                   define the attributes of the function
             11032                         CST =  5, Same as 0, except USE, AVOID, or
             11033                                   MATERIALIZE attributes specified
             11034                         CST =  7, Same as 2, except USE, AVOID, or
             11035                                   MATERIALIZE attributes specified
             11036                         CST =  8, Same as 3, except USE, AVOID, or
             11037                                   MATERIALIZE attributes specified
             11038                         CST =  9, Same as 4, except USE, AVOID, or
             11039                                   MATERIALIZE attributes specified
             11040                         CST = 13, GCOS domain, save
             11041                         CST = 14, GCOS domain, no save
             11042                         CST = 15, Non-Callable Procedure.          */
             11043    1         2 NPARAM UBIN(11) UNAL;
             11044                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11056    1   /*******************************************************************************
             11057    1   *                                                                              *
             11058    1   *                          B$SDEF                                                 *
             11059    1   *                                                                              *
             11060    1   *******************************************************************************/

             11065    1   DCL 1 B$SDEF BASED ALIGNED,
             11066    1         2 VALUE SBIN UNAL,
             11067                /*K*  VALUE is the value of the constant segment definition
             11068                      pointer if CONSTNT=1.  */
             11069    1         2 AD REDEF VALUE,
             11070                /*K*  AD - Address (not constant)  */
             11071    1           3 LFLAGS UNAL,
             11072                  /*K*  LFLAGS is the field reserved for loader to flag load
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:9    
             11073                        time attributes of the definition and must be zero
             11074                        in object unit.  */
             11075    1             4 SOURCE UBIN(3) UNAL,
             11076                    /*K*  SOURCE - Source of this SYMDEF */
             11077    1             4 DEFINED BIT(1) UNAL,
             11078                    /*K*  DEFINED - Set if this SYMDEF is defined */
             11079    1             4 MULTIPLE BIT(1) UNAL,
             11080                    /*K*  MULTIPLE - Set if this SYMDEF is multiply defined. */
             11081    1             4 USED BIT(1) UNAL,
             11082                    /*K*  USED - Set if this SYMDEF is used */
             11083    1             4 * BIT(3) UNAL,
             11084                    /*K*  * - Unused */
             11085    1           3 OU UNAL,
             11086    1             4 SECTNUM UBIN BYTE UNAL,
             11087                    /*K*  SECTNUM contains I, where I is an entry number in the
             11088                          section table (TYPE 3).  */
             11089    1             4 OFFSET UBIN HALF UNAL,
             11090                   /*K*  OFFSET is the offset from the origin of section I (See SECTNUM). */
             11091    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11092                  /*K*  ISADDR - IS Address (RU)  */
             11093    1         2 NPOINTER SBIN HALF UNAL,
             11094                /*K*  NPOINTER is the word displacement into the record of
             11095                      names (TYPE 1) locating the SYMDEF name. */
             11096    1         2 CONSTNT BIT(1) UNAL,
             11097                /*K*  CONSTNT is a flag bit to determine the interpretation
             11098                      of word 0.
             11099                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11100                                    SECTNUM, and ISADDR or OFFSET.
             11101                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11102    1         2 LFLAGS UNAL,
             11103                /*K*  LFLAGS is the field reserved for loader to flag load
             11104                      time attributes and must be zero in the object unit. */
             11105    1           3 MULTIPLE BIT(1) UNAL,
             11106                  /*K*  MULTIPLE - Set if this SYMDEF is multiply defined. */
             11107    1           3 USED BIT(1) UNAL,
             11108                  /*K*  USED - Set if this SYMDEF is used. */
             11109    1           3 SOURCE UBIN(4) UNAL,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:10   
             11110                  /*K*  SOURCE - Source of this SYMDEF */
             11111    1           3 IS_DCB BIT(1) UNAL,
             11112                  /*K* IS_DCB - Set if this is a DCB */
             11113    1           3 * BIT(4) UNAL,
             11114                  /*K*  * - Unused */
             11115    1         2 * BIT(6) UNAL;
             11116                /*K*  * is reserved for future use and must be zero. */

             11128    1   /*******************************************************************************
             11129    1   *                                                                              *
             11130    1   *                          B$SEGDEF                                                *
             11131    1   *                                                                              *
             11132    1   *******************************************************************************/

             11137    1   DCL 1 B$SEGDEF BASED ALIGNED,
             11138    1         2 VALUE SBIN UNAL,
             11139                /*K*  VALUE is the value of the constant segment definition
             11140                      pointer if CONSTANT=1.  */
             11141    1         2 S REDEF VALUE,
             11142    1           3 * UBIN(24) UNAL,
             11143    1           3 SEGID UBIN(12) UNAL,
             11144                  /*K*  SEGID - Segid of constant value */
             11145    1         2 AD REDEF VALUE,
             11146                /*K*  AD - Address (not constant )  */
             11147    1           3 LFLAGS UNAL,
             11148                  /*K*  LFLAGS is the field reserved for loader to flag load
             11149                        time attributes of the definition and must be zero
             11150                        in object unit.  */
             11151    1             4 SOURCE UBIN(3) UNAL,
             11152                    /*K*  SOURCE - Source of this SEGDEF */
             11153    1             4 DEFINED BIT(1) UNAL,
             11154                    /*K*  DEFINED - Set if this SEGDEF is defined */
             11155    1             4 MULTIPLE BIT(1) UNAL,
             11156                    /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11157    1             4 USED BIT(1) UNAL,
             11158                    /*K*  USED - Set if this SEGDEF is used */
             11159    1             4 * BIT(3) UNAL,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:11   
             11160                    /*K*  * is reserved for future use and must be zero. */
             11161    1           3 OU UNAL,
             11162    1             4 SECTNUM UBIN BYTE UNAL,
             11163                    /*K*  SECTNUM is the Section number.  */
             11164    1             4 OFFSET UBIN HALF UNAL,
             11165                    /*K*  OFFSET is the offset within section. */
             11166    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11167                  /*K*  ISADDR - IS Address (RU)  */
             11168    1         2 NPOINTER SBIN HALF UNAL,
             11169                /*K*  NPOINTER is the word displacement into DEFNAMES record. */
             11170    1         2 CONSTNT BIT(1) UNAL,
             11171                /*K*  CONSTNT is a flag bit to determine the interpretation
             11172                      of word 0.
             11173                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11174                                    SECTNUM, and ISADDR or OFFSET.
             11175                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11176    1         2 LFLAGS UNAL,
             11177                /*K*  LFLAGS is the field reserved for loader to flag load time
             11178                      attributes and must be zero in the object unit.  */
             11179    1           3 MULTIPLE BIT(1) UNAL,
             11180                  /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11181    1           3 USED BIT(1) UNAL,
             11182                  /*K*  USED - Set if this SEGDEF is used */
             11183    1           3 SOURCE UBIN(4) UNAL,
             11184                  /*K*  SOURCE - Source of this SEGDEF */
             11185    1           3 * BIT(11) UNAL,
             11186                  /*K*  * is reserved for future use and must be zero. */
             11187    1         2 SEG REDEF LFLAGS UNAL,          /* Not constant SEGDEF (RU) */
             11188    1           3 TYPE UBIN(5) UNAL,            /* Segment protection type (RU) */
             11189    1           3 SEGID UBIN(12) UNAL;          /* Segid of segment (RU) */
       14    11193        %VXR$TMPLT( EREF=YES );

             11206    1   /*******************************************************************************
             11207    1   *                                                                              *
             11208    1   *                          VXR$TMPLT                                               *
             11209    1   *                                                                              *
             11210    1   *******************************************************************************/
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:12   

             11215    1   DCL 1 VXR$TMPLT BASED ALIGNED,
             11216    1         2 NPOINTER SBIN HALF UNAL,
             11217                /*K*  NPOINTER is the word index to the symbol name.  */
             11218    1         2 SREF BIT(1) UNAL,
             11219                /*K*  SREF is set is this is a secondary reference.  */
             11220    1         2 READ_ONLY BIT(1) UNAL,
             11221    1         2 GOT BIT(1) UNAL,
             11222                /*K*  GOT is set if got the OU name displacement.  */
             11223    1         2 STATE REDEF GOT BIT(1) UNAL,
             11224    1         2 OPOINTER UBIN(15) UNAL;
             11225                /*K*  OPOINTER is the word index to the OU name.  */

             11236    1   /*******************************************************************************
             11237    1   *                                                                              *
             11238    1   *                          B$EREF                                                 *
             11239    1   *                                                                              *
             11240    1   *******************************************************************************/

             11245    1   DCL 1 B$EREF BASED ALIGNED,
             11246    1         2 NPOINTER SBIN HALF UNAL,
             11247                /*K*  NPOINTER is the word displacement into the record
             11248                      of REF names (TYPE 2) locating the ENTREF name.   */
             11249    1         2 SREF BIT(1),
             11250                /*K*  SREF indicates that the reference is a secondary
             11251                      reference and should not cause loading of a library routine. */
             11252    1         2 ALT BIT(1),
             11253                /*K*  ALT is a one-bit flag denoting permissible alternate return.
             11254                         ALT = 1, alternate return allowed
             11255                             = 0, alternate return not allowed    */
             11256    1         2 CHECK BIT(1),
             11257                /*K*  CHECK is a one-bit flag denoting arguments/parameter check
             11258                      and alternate return specification check.
             11259                         CHECK = 0, do not check for matching
             11260                                    arguments/parameters and
             11261                                    alternate return specification.
             11262                               = 1, check for matching arguments/parameters
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:13   
             11263                                    and alternate return specification.  */
             11264    1         2 CST UBIN(4) UNAL,
             11265                /*K*  CST is a 4-bit field denoting calling sequence type.
             11266                         CST =  0, Standard CP-6 Callable Procedure.
             11267                         CST =  1, Nonstandard Call Type.
             11268                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11269                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11270                         CST =  4, Standard CP-6 Function Procedure; a
             11271                                   variable table entry will be present to
             11272                                   define the attributes of the function.
             11273                         CST =  5, Same as 0, except USE, AVOID, or
             11274                                   MATERIALIZE attributes specified.
             11275                         CST =  7, Same as 2, except USE, AVOID, or
             11276                                   MATERIALIZE attributes specified.
             11277                         CST =  8, Same as 3, except USE, AVOID, or
             11278                                   MATERIALIZE attributes specified.
             11279                         CST =  9, Same as 4, except USE, AVOID, or
             11280                                   MATERIALIZE attributes specified.
             11281                         CST = 13, GCOS domain, save
             11282                         CST = 14, GCOS domain, no save
             11283                         CST = 15, Non-Callable Procedure.       */
             11284    1         2 NPARAM UBIN(11) UNAL;
             11285                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11304    1   /*******************************************************************************
             11305    1   *                                                                              *
             11306    1   *                          VXR$SAT                                                 *
             11307    1   *                                                                              *
             11308    1   *******************************************************************************/

             11312    1   DCL 1 VXR$SAT                 ALIGNED   BASED,
             11313    1         2 VALUE        UBIN(36)  ALIGNED,
             11314    1         2 SEG   REDEF  VALUE,
             11315    1           3 OFFSET     UBIN(18)  UNAL,
             11316    1           3 *          BIT(6)    UNAL,
             11317    1           3 SEGID      UBIN(12)  UNAL,
             11318    1         2 BELOW        BIT(1)    UNAL,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:14   
             11319    1         2 *            BIT(17)   UNAL,
             11320    1         2 NODE#        UBIN(18)  UNAL;
       15    11322        %VX$SC;

             11335    1   /*******************************************************************************
             11336    1   *                                                                              *
             11337    1   *                          VX$SC                                                 *
             11338    1   *                                                                              *
             11339    1   *******************************************************************************/

             11344    1   DCL 1 VX$SC BASED ALIGNED,
             11345    1         2 SEG UBIN(3) UNAL,
             11346                /*K*  SEG - The segment number of this section */
             11347    1         2 TYPE UBIN(6) UNAL,
             11348                /*K*  TYPE -
             11349                      Type code      Section type
             11350                      ---------      ------------
             11351                          0          Data control section with write access.
             11352                          1          Procedure control section.
             11353                          2          Unlabeled common, name pointer must be zero.
             11354                          3          Labeled common, with mandatory name pointer.
             11355                                     This is for labeled common which must be
             11356                                     in the root.
             11357                          4          Labeled common, with mandatory name pointer.
             11358                                     This is for labeled common which need not
             11359                                     be in the root.
             11360                          5          DCB, word 1 is name pointer.
             11361                          6          Data control section with read only access,
             11362                                     word 1 = 0 or name pointer.      */
             11363    1         2 EMPTY BIT(1) UNAL,
             11364                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11365                      section is of size zero.  */
             11366    1         2 ATTR UNAL,
             11367    1           3 INT  UBIN(2) UNAL,
             11368                  /*K*  INT is the Section initialization.  */
             11369    1           3 SEGMENT BIT(1) UNAL,
             11370                  /*K* SEGMENT is set if the Section is defined in a data
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:15   
             11371                       segment.  */
             11372    1           3 ALL BIT(1) UNAL,
             11373                  /*K*  ALL is set if the Section is allocated.  */
             11374    1           3 PRE_DCB BIT(1) UNAL,
             11375                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11376    1           3 MES_INIT BIT(1) UNAL,
             11377    1           3 ALIGN UBIN(2) UNAL,
             11378                  /*K*  ALIGN is the Section alignment.  */
             11379    1         2 ADDRESS UBIN HALF UNAL,
             11380                /*K*  ADDRESS is the address within the Instruction Segment of
             11381                      the entry point of the external procedure.  */
             11382    1         2 NAME_DISP SBIN HALF UNAL,
             11383                /*K*  NAME_DISP is the Name index.  */
             11384    1         2 SIZE UBIN HALF UNAL,
             11385                /*K*  SIZE is the size, in words, of the section.  */
             11386    1         2 NODE# UBIN HALF UNAL,
             11387                /*K*  NODE# is the Node number of section.  */
             11388    1         2 COM_LINK UBIN HALF UNAL;
             11389                /*K*  COM_LINK is used internally by linker to link common sections */

             11399    1   /*******************************************************************************
             11400    1   *                                                                              *
             11401    1   *                          VX$SECT                                                 *
             11402    1   *                                                                              *
             11403    1   *******************************************************************************/

             11408    1   DCL 1 VX$SECT BASED ALIGNED,
             11409    1         2 TYPE UBIN BYTE UNAL,
             11410                /*K*  TYPE -
             11411                      Type code      Section type
             11412                      ---------      ------------
             11413                          0          Data control section with write access.
             11414                          1          Procedure control section.
             11415                          2          Unlabeled common, name pointer must be zero.
             11416                          3          Labeled common, with mandatory name pointer.
             11417                                     This is for labeled common which must be
             11418                                     in the root.
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:16   
             11419                          4          Labeled common, with mandatory name pointer.
             11420                                     This is for labeled common which need not
             11421                                     be in the root.
             11422                          5          DCB, word 1 is name pointer.
             11423                          6          Data control section with read only access,
             11424                                     word 1 = 0 or name pointer.
             11425                          7          Constant labeled common, with mandatory name pointer.
             11426                                     This is for labeled common which must be
             11427                                     in the root.
             11428                          8          Constant labeled common, with mandatory name pointer.
             11429                                     This is for labeled common which need not
             11430                                     be in the root.                        */
             11431    1         2 * BIT(1),
             11432                /*K*  * is reserved for future use and must be zero. */
             11433    1         2 INITZERO BIT(1),
             11434                /*K*  INITZERO - if 1, initialize with zero.  */
             11435    1         2 INITUTS BIT(1),
             11436                /*K*  INITUTS - if 1, initialize with UTS.  */
             11437    1         2 SEGMENT BIT(1),
             11438                /*K*  SEGMENT - if 1, specifies that this section is
             11439                                to be placed in the segment specified by
             11440                                SEG_NPOINTER.  */
             11441    1         2 * BIT(3),
             11442                /*K*  * is reserved for future use and must be zero. */
             11443    1         2 BOUND UBIN(2) UNAL,
             11444                /*K*  BOUND - bits 6-7 - defines starting location.
             11445                              00 - starts on even word
             11446                              01 - starts on odd word
             11447                              10 - starts on multiple of 8
             11448                              11 - starts on page boundary     */
             11449    1         2 SIZE UBIN HALF UNAL,
             11450                /*K*  SIZE is the size, in words, of the section.  */
             11451    1         2 NPOINTER SBIN HALF UNAL,
             11452                /*K*  NPOINTER is the word displacement into the name record
             11453                      (TYPE 1) locating the name of this section.  If the
             11454                      field is negative, the section has no name.  */
             11455    1         2 MBZ UBIN HALF UNAL,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:17   
             11456                /*K*  MBZ is reserved for future expansion and must be zero. */
             11457    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11458                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11459                      Section.  The name must be a valid segment name
             11460                      recognized by the linker.  */
             11461    1         2 G66 REDEF MBZ,
             11462                /*K*  G66 is not used on CP-6. */
             11463    1           3 * BIT(9),
             11464    1           3 NSAB BIT(9);
       16    11467        %VX$LLIST_SC;

             11479    1   /*******************************************************************************
             11480    1   *                                                                              *
             11481    1   *                          VX$LLIST_SC                                             *
             11482    1   *                                                                              *
             11483    1   *******************************************************************************/

             11488    1   DCL 1 NAME               BASED     ALIGNED,
             11489    1         2 LINK$             PTR,
             11490    1         2 BASE$             PTR,
             11491    1         2 COUNT             UBIN(36);
       17    11494        %TMPLT;

             11506    1   /*******************************************************************************
             11507    1   *                                                                              *
             11508    1   *                          TMPLT                                                 *
             11509    1   *                                                                              *
             11510    1   *******************************************************************************/

             11515    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11516    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11517    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11518    1         2 W       REDEF     A,            /* By name                            */
             11519    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11520    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       18    11523        %SET LISTMAC='1'B;
       19    11524        %SET LISTSUB='1'B;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:18   
       20    11525        %SET LISTEXP='1'B;
       21    11526        %BANNER(ARG=SUBS);
             11527        %LSET LISTDIR='0'B;

             11534    1   /*******************************************************************************
             11535    1   *                                                                              *
             11536    1   *                          SUBS                                                 *
             11537    1   *                                                                              *
             11538    1   *******************************************************************************/

       22    11542        %B$RECORDSUBS;
             11543        %EQU TYPHEAD=0 ;
             11544        %EQU TYPDNAM=1 ;
             11545        %EQU TYPRNAM=2 ;
             11546        %EQU TYPSECT=3 ;
             11547        %EQU TYPEDEF=4 ;
             11548        %EQU TYPEREF=5 ;
             11549        %EQU TYPSDEF=6 ;
             11550        %EQU TYPSREF=7 ;
             11551        %EQU TYPSEGDEF=8 ;
             11552        %EQU TYPSEGREF=9 ;
             11553        %EQU TYPPROG=10 ;
             11554        %EQU SUBTYPPROG=0 ;
             11555        %EQU SUBTYPREL=1 ;
             11556        %EQU TYPLOGBLK=11 ;
             11557        %EQU TYPINTNTRY=12 ;
             11558        %EQU TYPEXST=13 ;
             11559        %EQU TYPVREBL=14 ;
             11560        %EQU TYPDBGNAM=15 ;
             11561        %EQU TYPLV1LB=16 ;
             11562        %EQU TYPLV1=17 ;
             11563        %EQU TYPDATASEG=18 ;
             11564        %EQU TYPRUM=20 ;
             11565        %EQU TYPBIRTH=21 ;
             11566        %EQU TYPPLOVER=22 ;
             11567        %EQU TYPCOMPID=23 ;
             11568        %EQU TYPROS=30 ;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:19   
       23    11570        %B$SECTIONSUBS;
             11571        %EQU DATASECTION=0 ;
             11572        %EQU CODESECTION=1 ;
             11573        %EQU UCOMSECTION=2 ;
             11574        %EQU RLCOMSECTION=3 ;
             11575        %EQU LCOMSECTION=4 ;
             11576        %EQU DCBSECTION=5 ;
             11577        %EQU ROSECTION=6 ;
             11578        %EQU RORLCOMSECTION=7 ;
             11579        %EQU ROLCOMSECTION=8 ;
             11580        %EQU EVENBOUNDSECTION=0 ;
             11581        %EQU ODDBOUNDSECTION=1 ;
             11582        %EQU EIGHTBOUNDSECTION=2 ;
             11583        %EQU PAGEBOUNDSECTION=3 ;
       24    11585        %SUB_CST;
             11586        %EQU STD#=0 ;                           /* Standard CP6 callable procedure */
             11587        %EQU NSTD#=1 ;                          /* Non-standard Call Type  */
             11588        %EQU MAIN#=2 ;                /* Standard CP6 Procedure with MAIN attribute */
             11589        %EQU ASYNC#=3 ;               /* Standard CP6 Procedure with ASYNC attribute */
             11590        %EQU FUNC#=4 ;                /* Standard CP6 Function procedure; a variable */
             11591                                      /* table entry will be present to define the   */
             11592                                      /* attributes of the function.                 */
             11593        %EQU XSTD#=5 ;           /* Same as 0, except AVOID or MATERIALIZE specified */
             11594        %EQU XMAIN#=7 ;          /* Same as 2, except AVOID or MATERIALIZE specified */
             11595        %EQU XASYNC#=8 ;         /* Same as 3, except AVOID or MATERIALIZE specified */
             11596        %EQU XFUNC#=9 ;          /* Same as 4, except AVOID or MATERIALIZE specified */
             11597        %EQU DOMSAV#=13 ;                       /* GCOS domain, save  */
             11598        %EQU DOMNOSAV#=14 ;                     /* GCOS domain, no save  */
             11599        %EQU NOTPROC#=15 ;                      /* Non-callable procedure  */
       25    11601        %SUB_LINKFLAGS;
             11602        %EQU SOURCE_OBJECT#=0 ;
             11603        %EQU SOURCE_SLIB#=1 ;
             11604        %EQU SOURCE_ALIB#=2 ;
             11605        %EQU SOURCE_ULIB#=3 ;
             11606        %EQU SOURCE_RLIB#=4 ;
             11607        %EQU SOURCE_REMOVED#=5 ;
             11608        %EQU SOURCE_LINKER#=6 ;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:20   
       26    11610        %BANNER(ARG=DNAME);
             11611        %LSET LISTDIR='0'B;

             11618    1   /*******************************************************************************
             11619    1   *                                                                              *
             11620    1   *                          DNAME                                                 *
             11621    1   *                                                                              *
             11622    1   *******************************************************************************/

       27    11626        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11627            %LSET STR='BASED        ';
             11628            %IF
             11629                '0'B;
             11631            %ELSE;
             11632                %LSET INIT=/*;
             11633            %ENDIF;
             11634    1   DCL 1 B$DNAME BASED ALIGNED,
             11635    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11636                /*K*  COUNT is the number of characters in the name */
             11637            %IF
             11638                '0'B;
             11641            %ELSE;
             11642    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11643            %ENDIF;
       28    11645        %B;
             11646        %LSET LISTDIR='0'B;

             11653    1   /*******************************************************************************
             11654    1   *                                                                              *
             11655    1   *                          BIT                                                 *
             11656    1   *                                                                              *
             11657    1   *******************************************************************************/

       29    11661    1   DCL WILL_FIT        BIT(1)    ALIGNED   AUTO;
       30    11662        %E;
             11663        %LSET LISTDIR='0'B;

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:21   
             11670    1   /*******************************************************************************
             11671    1   *                                                                              *
             11672    1   *                          ENTRY                                                 *
             11673    1   *                                                                              *
             11674    1   *******************************************************************************/

       31    11678        %ENTRIES;
             11679    1   DCL VXE$ERROR       ENTRY(4);
             11680    1   DCL VXE$ERR         ENTRY(3);
             11681    1   DCL VXE$MERC        ENTRY;
             11682    1   DCL VXE$ERRMSG      ENTRY(3);
             11683    1   DCL VXR$READ        ENTRY( 3 );
             11684    1   DCL VXW$WRITE       ENTRY( 3 );
             11685    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11686    1   DCL VXD$B2C         ENTRY( 5 );
             11687    1   DCL VXD$C2B         ENTRY( 3 );
             11688    1   DCL VXA$GET         ENTRY( 3 );
             11689    1   DCL VXF$FREE        ENTRY( 3 );
             11690    1   DCL VXQ$SORT        ENTRY( 7 );
             11691    1   DCL VXY$YESNO       ENTRY( 1 );
       32    11693        %ENTRIES_IO;
             11694    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11695    1   DCL VXF$CLOSE       ENTRY(3);
             11696    1   DCL VXU$PREAD       ENTRY(12);
             11697    1   DCL VXK$KEY         ENTRY(4);
             11698    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11699    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       33    11701    1   DCL VXU$UNSAT            ENTRY;
       34    11702    1   DCL VXT$FIMAGE      ENTRY;
       35    11703        %PTR;
             11704        %LSET LISTDIR='0'B;

             11711    1   /*******************************************************************************
             11712    1   *                                                                              *
             11713    1   *                          PTR                                                 *
             11714    1   *                                                                              *
             11715    1   *******************************************************************************/
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:22   

       36    11719        %POINTER;
             11720    1   DCL P$         PTR       ALIGNED AUTO;
             11721    1   DCL Q$         PTR       ALIGNED AUTO;
             11722    1   DCL R$         PTR       ALIGNED AUTO;
       37    11724    1   DCL CURR$           PTR  ALIGNED   AUTO;
       38    11725    1   DCL FOUND$          PTR  ALIGNED   AUTO;
       39    11726    1   DCL NODE$           PTR  ALIGNED   AUTO;
       40    11727    1   DCL PREV$           PTR  ALIGNED   AUTO;
       41    11728    1   DCL ALL$            PTR  ALIGNED   AUTO;
       42    11729    1   DCL WHERE$          PTR  ALIGNED   AUTO;
       43    11730    1   DCL START$          PTR  ALIGNED   AUTO;
       44    11731    1   DCL RNAME$          PTR  ALIGNED   AUTO;
       45    11732    1   DCL PN$             PTR  ALIGNED   AUTO;
       46    11733    1   DCL FIRST_START$    PTR  ALIGNED   AUTO;
       47    11734    1   DCL FIRST_STOP$     PTR  ALIGNED   AUTO;
       48    11735    1   DCL RESOLVE$        PTR  ALIGNED   AUTO;
       49    11736    1   DCL DNAME$          PTR  ALIGNED   AUTO;
       50    11737    1   DCL INSERT$         PTR  ALIGNED   AUTO;
       51    11738        %U;
             11739        %LSET LISTDIR='0'B;

             11746    1   /*******************************************************************************
             11747    1   *                                                                              *
             11748    1   *                          UBIN                                                 *
             11749    1   *                                                                              *
             11750    1   *******************************************************************************/

       52    11754        %INDEX;
             11755    1   DCL I          UBIN(36) ALIGNED AUTO;
             11756    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11757    1   DCL J          UBIN(36) ALIGNED AUTO;
             11758    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11759    1   DCL K          UBIN(36) ALIGNED AUTO;
             11760    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11761    1   DCL L          UBIN(36) ALIGNED AUTO;
             11762    1   DCL SL REDEF L    SBIN WORD ALIGNED;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:23   
       53    11764    1   DCL REF_REC         UBIN(36)  ALIGNED   AUTO;
       54    11765    1   DCL DEF_REC         UBIN(36)  ALIGNED   AUTO;
       55    11766    1   DCL ALL_TYPE        UBIN(36)  ALIGNED   AUTO;
       56    11767    1   DCL SOURCE          UBIN(36)  ALIGNED   AUTO;
       57    11768    1   DCL HEAD_INX        UBIN(36)  ALIGNED   AUTO;
       58    11769    1   DCL NAME_INX        UBIN(36)  ALIGNED   AUTO;
       59    11770    1   DCL NAME_SIZEW      UBIN(36)  ALIGNED   AUTO;
       60    11771    1   DCL TSIZE           UBIN(36)  ALIGNED   AUTO;
       61    11772    1   DCL PAGE            UBIN(36)  ALIGNED   AUTO;
       62    11773    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       63    11774    1   DCL HALVE           UBIN(36)  ALIGNED   AUTO;
       64    11775    1   DCL NPAGE           UBIN(36)  ALIGNED   AUTO;
       65    11776    1   DCL TSIZE_READ      UBIN(36)  ALIGNED   AUTO;
       66    11777    1   DCL CST_D           UBIN(36)  ALIGNED   AUTO;
       67    11778    1   DCL CST_R           UBIN(36)  ALIGNED   AUTO;
       68    11779    1   DCL NP_D            UBIN(36)  ALIGNED   AUTO;
       69    11780    1   DCL NP_R            UBIN(36)  ALIGNED   AUTO;
       70    11781    1   DCL I1            UBIN(36)  ALIGNED   AUTO;
       71    11782    1   DCL SAVE_NAME_DISP  UBIN(36)  ALIGNED   AUTO;
       72    11783    1   DCL NAME_X        UBIN(36)  ALIGNED   AUTO;
       73    11784        /**/
       74    11785    1   DCL 1 TEMP ALIGNED AUTO,
       75    11786    1         2 COUNT UBIN(18) UNAL,
       76    11787    1         2 CHARS CHAR(514) UNAL;
       77    11788    1   DCL CST_TYPE(0:15)  CHAR(50)  ALIGNED   CONSTANT  INIT(
       78    11789    1   'STANDARD PROCEDURE',
       79    11790    1   'NON-STANDARD PROCEDURE',
       80    11791    1   'STANDARD/MAIN PROCEDURE',
       81    11792    1   'STANDARD/ASYNC PROCEDURE',
       82    11793    1   'STANDARD/FUNCTION PROCEDURE',
       83    11794    1   'STANDARD(USE,AVOID,MATERIALIZE) PROCEDURE',
       84    11795    1   'UNDEFINED',
       85    11796    1   'STANDARD/MAIN(USE,AVOID,MATERIALIZE) PROCEDURE',
       86    11797    1   'STANDARD/ASYNC(USE,AVOID,MATERIALIZE) PROCEDURE',
       87    11798    1   'STANDARD/FUNCTION(USE,AVOID,MATERIALIZE) PROCEDURE',
       88    11799    1   'UNDEFINED',
       89    11800    1   'UNDEFINED',
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:24   
       90    11801    1   'UNDEFINED',
       91    11802    1   'UNDEFINED',
       92    11803    1   'UNDEFINED',
       93    11804    1   'NON-CALLABLE PROCEDURE');
       94    11805    1   DCL CST_TYPE_COUNT(0:15) UBIN(36)  ALIGNED   CONSTANT  INIT(
       95    11806    1   18,
       96    11807    1   22,
       97    11808    1   23,
       98    11809    1   24,
       99    11810    1   27,
      100    11811    1   41,
      101    11812    1   9,
      102    11813    1   46,
      103    11814    1   47,
      104    11815    1   50,
      105    11816    1   9,
      106    11817    1   9,
      107    11818    1   9,
      108    11819    1   9,
      109    11820    1   9,
      110    11821    1   22);
      111    11822    1   DCL 1 DOES_NOT_ALLOW ALIGNED CONSTANT,
      112    11823    1         2 COUNT UBIN(9) UNAL INIT(14),
      113    11824    1         2 CHARS CHAR(0) UNAL INIT('DOES NOT ALLOW');
      114    11825    1   DCL 1 ALLOWS ALIGNED CONSTANT,
      115    11826    1         2 COUNT UBIN(9) UNAL INIT(6),
      116    11827    1         2 CHARS CHAR(0) UNAL INIT('ALLOWS');
      117    11828    1   DCL 1 DATA_DEF ALIGNED CONSTANT,
      118    11829    1         2 COUNT UBIN BYTE UNAL INIT(4),
      119    11830    1         2 CHARS CHAR(4) INIT('data');
      120    11831    1   DCL 1 SEG_DEF ALIGNED CONSTANT,
      121    11832    1         2 COUNT UBIN BYTE UNAL INIT(7),
      122    11833    1         2 CHARS CHAR(7) INIT('segment');
      123    11834    1   DCL PRO_TYPE(0:8) CHAR(17) CONSTANT INIT(
      124    11835    1         'DATA',
      125    11836    1         'PROCEDURE',
      126    11837    1         'UNLABEL COMMON',
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:25   
      127    11838    1         'LABEL COMMON',
      128    11839    1         'ROOT LABEL COMMON',
      129    11840    1         'DCB',
      130    11841    1            'READ ONLY',
      131    11842    1            'ROOT RO COMMON',
      132    11843    1            'RO COMMON');
      133    11844    1   DCL PRO_TYPE_COUNT(0:8) UBIN CONSTANT INIT(4,9,14,12,17,3,9,14,9);
      134    11845        %FILE;
             11846    1   DCL 1 F$NAME_                 BASED,
             11847    1         2 COUNT             UBIN( 9) UNAL,
             11848    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11849    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11850    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11851    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11852    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
      135    11854        %BIN_SEARCH_TEMPS(
      136    11855                   LOW=BIN_LOW,
      137    11856                   HIGH=BIN_HIGH,
      138    11857                   START1$=BIN_START1$,
      139    11858                   MID=BIN_MID,
      140    11859                   NTEMP$=BIN_NTEMP$);
             11860    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             11861    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             11862    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             11863    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             11864    1   DCL BIN_START1$         PTR       ALIGNED AUTO;
      141    11866        %BIN_SEARCH_VARS(
      142    11867                   START$=BIN_START$,
      143    11868                   STOP$=BIN_STOP$,
      144    11869                   RESULT$=BIN_RESULT$,
      145    11870                   N$=BIN_N$,
      146    11871                   MATCH$=BIN_MATCH$,
      147    11872                   NAME_DISP=BIN_NAME_DISP,
      148    11873                   SIZE=BIN_SIZE);
             11874    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
             11875    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
             11876    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:26   
             11877    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             11878    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             11879    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             11880    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
      149    11882        %PLIST;
      150    11883        %EJECT;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:27   
      151    11884    1         WILL_FIT = '0'B/*@NO_B*/;
      152    11885        /* Look up the primary entdef */
      153    11886    1         BIN_START$ = VX_CURR$ -> VX$NODE.L_START.ED$;
      154    11887    1         BIN_STOP$ = VX_CURR$ -> VX$NODE.L_STOP.ED$;
      155    11888    1         BIN_N$ = VX_CURR$ -> VX$NODE.L_START.DN$;
      156    11889    1         DNAME$ = BIN_N$;
      157    11890    1         TEMP.COUNT = VX_OK.OUNAME.COUNT;
      158    11891    1         TEMP.CHARS = VX_OK.OUNAME.CHARS;
      159    11892    1         PN$ = ADDR( TEMP );
      160    11893    1         SI = -2;
      161    11894    1   FIND_PRIMARY_ENTDEF:;
      162    11895              %BIN_SEARCH(
      163    11896              START$=BIN_START$,
      164    11897              STOP$=BIN_STOP$,
      165    11898              RESULT$=BIN_RESULT$,
      166    11899              N$=BIN_N$,
      167    11900              MATCH$=PN$,
      168    11901              NAME_DISP=2,
      169    11902              SIZE="SIZEW(VXD$TMPLT)",
      170    11903              SPLIT=BIN_SPLIT_A,
      171    11904              CHECK=BIN_CHECK_A,
      172    11905              ALTRETURN=NO_PRIMARY_ENTDEF,
      173    11906              EMPTY=NO_PRIMARY_ENTDEF);
             11908    1           IF BIN_START$ = ADDR(NIL) THEN GOTO NO_PRIMARY_ENTDEF;
             11909    2           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;
             11910    2              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             11911    3              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             11912    3                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             11913    3                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             11914    3                   >=
             11915    4                   PN$ -> B$DNAME.TEXT THEN DO;
             11916    4                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             11917    4                      =
             11918    4                      PN$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND;
             11919    4                    ELSE GOTO NO_PRIMARY_ENTDEF;
             11920    4                    END;
             11921    3                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:28   
             11922    3                 END;                      /* Do while                           */
             11923    2              GOTO NO_PRIMARY_ENTDEF;
             11924    2              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             11925    2           ELSE DO;                        /* Binary search                      */
             11926    2              BIN_LOW = 0;
             11927    2              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
             11928    2              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );
             11929    2   BIN_SPLIT_A:     ;
             11930    2              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             11931    2              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );
             11932    2              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             11933    2              IF BIN_NTEMP$ -> B$DNAME.TEXT
             11934    2                <
             11935    3                PN$ -> B$DNAME.TEXT THEN DO;
             11936    3                 BIN_LOW = BIN_MID;
             11937    3                 GOTO BIN_CHECK_A;
             11938    3                 END;
             11939    2              IF BIN_NTEMP$ -> B$DNAME.TEXT
             11940    2                >
             11941    3                PN$ -> B$DNAME.TEXT THEN DO;
             11942    3                 BIN_HIGH = BIN_MID;
             11943    3   BIN_CHECK_A:        ;
             11944    3                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_A;
             11945                                                /* Here => looping or not found       */
             11946                                      /* Result -> < match => a boundary condition    */
             11947    3                 /*
             11948    3                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             11949    3                   <
             11950    3                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             11950                            VXD$TMPLT) );
             11951    3                 /**/
             11952    3                   GOTO NO_PRIMARY_ENTDEF;
             11953    3                 END;
             11954    2              END;                         /* Else do;                           */
             11955    1   BIN_FOUND:
             11956        /* Here -> found */
      174    11958        /* Here => found */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:29   
      175    11959    1         IF NOT BIN_RESULT$ -> B$EDEF.PRI THEN GOTO NO_PRIMARY_ENTDEF;
      176    11960    1         VX_PRIMARY_ENTDEF_GOT = '1'B/*@TRUE_B*/;
      177    11961    1         VX_OK.KPEDX = BIN_RESULT$ -> B$EDEF.NPOINTER;
      178    11962    1         VX_P_ENTDEF = VX_OK.KPEDX;
      179    11963    1         IF VX_OK.KPEDX < BITBIN('100000'O) THEN WILL_FIT = '1'B/*@YES_B*/;
      180    11964    2         DO WHILE( '0'B );
      181    11965    2   NO_PRIMARY_ENTDEF:
      182    11966    2             I = I + 1;
      183    11967    3             IF SI<0 OR PN$~=ADDR(TEMP) THEN DO;
      184    11968        /* Try adding '_' in case the name is really in the transfer vector). */
      185    11969    4                 IF I>0 THEN DO;
      186    11970    4                     TEMP.COUNT = PN$ -> B$DNAME.COUNT;
      187    11971    4                     TEMP.CHARS = PN$ -> B$DNAME.TEXT;
      188    11972    4                     END;
      189    11973    3                 SUBSTR(TEMP.CHARS,TEMP.COUNT,1) = '_';
      190    11974    3                 TEMP.COUNT = TEMP.COUNT+1;
      191    11975    3                 PN$ = ADDR(TEMP);
      192    11976    3                 GOTO FIND_PRIMARY_ENTDEF;
      193    11977    3                 END;
      194    11978    3             DO WHILE (I/2 < VX_SC_PASS2$ -> VX$LLIST_SC.COUNT);
      195    11979    3                 PN$ = PINCRW( DNAME$,
      196    11980    3                         PINCRW( VX_SC_PASS2$ -> VX$LLIST_SC.BASE$, I/2*SIZEW(VX$SC))
      197    11981    3                         -> VX$SC.NAME_DISP);
      198    11982    3                 IF PINCRW(PN$,1) > DNAME$ THEN GOTO FIND_PRIMARY_ENTDEF;
      199    11983    3                 I = I + 2;
      200    11984    3                 END;
      201    11985    2             VX_PRIMARY_ENTDEF_GOT = '0'B/*@FALSE_B*/;
      202    11986    2             END;
      203    11987    2         DO I = 0 TO SIZEW( VX_REF_REC_A ) - 1;
      204    11988    2             REF_REC = VX_REF_REC_A(I);
      205    11989    2             HEAD_INX = VX_HEAD_INX(REF_REC); /* Get index into head record */
      206    11990    2             TSIZE = VX_OU_HEAD.REC_A.SIZE(HEAD_INX);
             11990                      /* Get total size for this record type */
      207    11991    2             PAGE = VX_OU_HEAD.REC_A.PAGE(HEAD_INX); /* Get the page size */
      208    11992    2             WHERE$ = VX_PASS2_REF.OU.L_START_A$(I);
      209    11993    2             VX_PASS2_REF.OU.L_STOP_A$(I) = ADDR(NIL);
      210    11994    3             IF TSIZE > 0 THEN DO;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:30   
      211    11995    3                 VX_CURR$ -> VX$NODE.L_START_A$(REF_REC ) = ADDR(NIL);
      212    11996    3                 VX_CURR$ -> VX$NODE.L_STOP_A$(REF_REC ) = ADDR(NIL);
      213    11997    3                 VX_CURR$ -> VX$NODE.L_SIZE_A(REF_REC ) = 0;
      214    11998    3                 VX_CURR$ -> VX$NODE.L_PREV_SIZE_A(REF_REC ) = 0;
      215    11999    3                 CALL VXU$PREAD(
      216    12000    3                         NPAGE,
      217    12001    3                         TSIZE_READ,
      218    12002    3                         0/*@OF*/,
      219    12003    3                         0/*@OF*/,
      220    12004    3                         REF_REC,
      221    12005    3                         WHERE$,
      222    12006    3                         PAGE,
      223    12007    3                         TSIZE,
      224    12008    3                         ALL_TYPE,
      225    12009    3                         TSIZE,
      226    12010    3                         VX_CURR$,
      227    12011    3                         -1
      228    12012    3                         );
      229    12013    4                 IF REF_REC ~= 2 THEN DO;
      230    12014    4                     I1 = I - 1;
      231    12015    4                     Q$ = PINCRW( WHERE$, TSIZE_READ - SIZEW( VXR$TMPLT ) );
      232    12016    4                     VX_PASS2_REF.OU.L_STOP_A$(I) = Q$;
      233    12017    4                     DEF_REC = VX_REF_MATCH_A(REF_REC);
      234    12018    4                     NAME_X = VX_MATCH_NAME_A(DEF_REC);
      235    12019    4                     RNAME$ = VX_PASS2_REF.OU.L_START.RN$;
      236    12020    4                     RESOLVE$ = VX_PASS2_REF.SAT.L_START_A$(I);
      237    12021    4                     P$ = WHERE$;
      238    12022    5                     DO WHILE ( P$ <= Q$ );
      239    12023    5                         RESOLVE$ -> VXR$SAT = '0'B;
      240    12024    5                         PN$ = PINCRW( RNAME$, P$ -> VXR$TMPLT.NPOINTER );
      241    12025    5                         CURR$ = VX_ROOT$;
      242    12026    5                         FOUND$ = ADDR(NIL);
      243    12027    5   NEXT_NODE:
      244    12028    5                         BIN_START$ = CURR$ -> VX$NODE.L_START_A$(DEF_REC);
      245    12029    5                         BIN_STOP$ = CURR$ -> VX$NODE.L_STOP_A$(DEF_REC);
      246    12030    5                         BIN_N$ = CURR$ -> VX$NODE.L_START_A$(NAME_X);
      247    12031                              %BIN_SEARCH(
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:31   
      248    12032                              START$=BIN_START$,
      249    12033                              STOP$=BIN_STOP$,
      250    12034                              RESULT$=BIN_RESULT$,
      251    12035                              N$=BIN_N$,
      252    12036                              MATCH$=PN$,
      253    12037                              NAME_DISP=2,
      254    12038                              SIZE="SIZEW(VXD$TMPLT)",
      255    12039                              NEG=%@COMMENT,
      256    12040                              GEN=%@TNEMMOC,
      257    12041                              FOUND=FOUND_ANCESTOR,
      258    12042                              SPLIT=BIN_SPLIT,
      259    12043                              CHECK=BIN_CHECK,
      260    12044                              ALTRETURN=NOT_FOUND,
      261    12045                              EMPTY=NOT_FOUND);
             12047    5           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND;
             12048    6           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;
             12049    6              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             12050    7              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             12051    7                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             12052    7                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             12053    7                   >=
             12054    8                   PN$ -> B$DNAME.TEXT THEN DO;
             12055    8                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             12056    8                      =
             12057    8                      PN$ -> B$DNAME.TEXT THEN GOTO FOUND_ANCESTOR;
             12058    8                    ELSE GOTO NOT_FOUND;
             12059    8                    END;
             12060    7                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
             12061    7                 END;                      /* Do while                           */
             12062    6              GOTO NOT_FOUND;
             12063    6              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12064    6           ELSE DO;                        /* Binary search                      */
             12065    6              BIN_LOW = 0;
             12066    6              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
             12067    6              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );
             12068    6   BIN_SPLIT:     ;
             12069    6              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:32   
             12070    6              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );
             12071    6              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             12072    6              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12073    6                <
             12074    7                PN$ -> B$DNAME.TEXT THEN DO;
             12075    7                 BIN_LOW = BIN_MID;
             12076    7                 GOTO BIN_CHECK;
             12077    7                 END;
             12078    6              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12079    6                >
             12080    7                PN$ -> B$DNAME.TEXT THEN DO;
             12081    7                 BIN_HIGH = BIN_MID;
             12082    7   BIN_CHECK:        ;
             12083    7                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT;
             12084                                                /* Here => looping or not found       */
             12085                                      /* Result -> < match => a boundary condition    */
             12086    7                 /*
             12087    7                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12088    7                   <
             12089    7                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             12089                            VXD$TMPLT) );
             12090    7                 /**/
             12091    7                   GOTO NOT_FOUND;
             12092    7                 END;
             12093    6              END;                         /* Else do;                           */
             12094    5   FOUND_ANCESTOR:
             12095        /* Here -> found */
      262    12097        /* Here => found */
      263    12098    5                         IF DEF_REC ~= 4 AND BIN_RESULT$->VXD$TMPLT.CONSTNT THEN
      264    12099    5                             SOURCE = BIN_RESULT$ -> VXD$TMPLT.LFLAGS.SOURCE;
      265    12100    5                         ELSE
      266    12101    5                             SOURCE = BIN_RESULT$ -> VXD$TMPLT.AD.LFLAGS.SOURCE;
      267    12102    5                         IF SOURCE = 5 THEN GOTO NOT_FOUND;
      268    12103    5                         FOUND$ = BIN_RESULT$;
      269    12104    5                         NODE$ = CURR$;
      270    12105    5                         GOTO DESCENDANT_SEARCH;
      271    12106    5   NOT_FOUND:
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:33   
      272    12107    6                         IF CURR$ ~= VX_CURR$ THEN DO;
      273    12108    6                             CURR$ = CURR$ -> VX$NODE.PATH$;
      274    12109    6                             GOTO NEXT_NODE;
      275    12110    6                             END;
      276    12111        /**/
      277    12112        /**/
      278    12113        /**/
      279    12114    5   DESCENDANT_SEARCH:
      280    12115        /*    Here do descendant search */
      281    12116    5                         CURR$ = VX_CURR$ -> VX$NODE.SON$;
      282    12117    6                         DO WHILE( CURR$ ~= ADDR(NIL) );
      283    12118    6                             BIN_START$ = CURR$ -> VX$NODE.L_START_A$(DEF_REC);
      284    12119    6                             BIN_STOP$ = CURR$ -> VX$NODE.L_STOP_A$(DEF_REC);
      285    12120    6                             BIN_N$ = CURR$ -> VX$NODE.L_START_A$(NAME_X);
      286    12121                                  %BIN_SEARCH(
      287    12122                                  START$=BIN_START$,
      288    12123                                  STOP$=BIN_STOP$,
      289    12124                                  RESULT$=BIN_RESULT$,
      290    12125                                  N$=BIN_N$,
      291    12126                                  MATCH$=PN$,
      292    12127                                  NAME_DISP=2,
      293    12128                                  SIZE="SIZEW(VXD$TMPLT)",
      294    12129                                  NEG=%@COMMENT,
      295    12130                                  GEN=%@TNEMMOC,
      296    12131                                  FOUND=FOUND_DESCENDANT,
      297    12132                                  SPLIT=BIN_SPLIT_D,
      298    12133                                  CHECK=BIN_CHECK_D,
      299    12134                                  ALTRETURN=NOT_FOUND_DESCENDANT,
      300    12135                                  EMPTY=NOT_FOUND_DESCENDANT);
             12137    6           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND_DESCENDANT;
             12138    7           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;
             12139    7              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             12140    8              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             12141    8                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             12142    8                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             12143    8                   >=
             12144    9                   PN$ -> B$DNAME.TEXT THEN DO;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:34   
             12145    9                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             12146    9                      =
             12147    9                      PN$ -> B$DNAME.TEXT THEN GOTO FOUND_DESCENDANT;
             12148    9                    ELSE GOTO NOT_FOUND_DESCENDANT;
             12149    9                    END;
             12150    8                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
             12151    8                 END;                      /* Do while                           */
             12152    7              GOTO NOT_FOUND_DESCENDANT;
             12153    7              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12154    7           ELSE DO;                        /* Binary search                      */
             12155    7              BIN_LOW = 0;
             12156    7              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
             12157    7              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );
             12158    7   BIN_SPLIT_D:     ;
             12159    7              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             12160    7              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );
             12161    7              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );
             12162    7              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12163    7                <
             12164    8                PN$ -> B$DNAME.TEXT THEN DO;
             12165    8                 BIN_LOW = BIN_MID;
             12166    8                 GOTO BIN_CHECK_D;
             12167    8                 END;
             12168    7              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12169    7                >
             12170    8                PN$ -> B$DNAME.TEXT THEN DO;
             12171    8                 BIN_HIGH = BIN_MID;
             12172    8   BIN_CHECK_D:        ;
             12173    8                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_D;
             12174                                                /* Here => looping or not found       */
             12175                                      /* Result -> < match => a boundary condition    */
             12176    8                 /*
             12177    8                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12178    8                   <
             12179    8                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             12179                            VXD$TMPLT) );
             12180    8                 /**/
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:35   
             12181    8                   GOTO NOT_FOUND_DESCENDANT;
             12182    8                 END;
             12183    7              END;                         /* Else do;                           */
             12184    6   FOUND_DESCENDANT:
             12185        /* Here -> found */
      301    12187        /* Here => found */
      302    12188    6                             IF DEF_REC ~= 4 AND BIN_RESULT$->VXD$TMPLT.CONSTNT
      303    12189    6                             THEN
      304    12190    6                                 SOURCE = BIN_RESULT$ -> VXD$TMPLT.LFLAGS.SOURCE;
      305    12191    6                             ELSE
      306    12192    6                                 SOURCE = BIN_RESULT$ -> VXD$TMPLT.AD.LFLAGS.SOURCE;
      307    12193    6                             IF SOURCE = 5 THEN GOTO NOT_FOUND_DESCENDANT;
      308    12194    7                             IF FOUND$ = ADDR(NIL) THEN DO;
      309    12195    7                                 FOUND$ = BIN_RESULT$;
      310    12196    7                                 NODE$ = CURR$;
      311    12197    7                                 END;      /* If FOUND$ = addr(nil) then do; */
      312    12198    7                             ELSE DO;      /* Check for multiples */
      313    12199    7                                 VX_RU_HEAD.MAP_BITS_A.MULTIPLE(I1) = '1'B/*@TRUE_B*/;
      314    12200    8                                 IF DEF_REC ~= 4 AND FOUND$ -> VXD$TMPLT.CONSTNT THEN
             12200                                          DO;
      315    12201    8                                     IF SOURCE ~= 0 THEN GOTO NOT_FOUND_DESCENDANT;
      316    12202    9                                     IF NOT FOUND$ -> VXD$TMPLT.LFLAGS.MULTIPLE THEN DO
             12202                                              ; /* First detection */
      317    12203    9                                         FOUND$ -> VXD$TMPLT.LFLAGS.MULTIPLE = '1'B
             12203                                                  /*@TRUE_B*/;
      318    12204                                              %CHECK( SEV=@MULTIPLE );
      319    12207                                              %DUP_STATS;
      320    12210    9                                         END;
      321    12211    8                                     END;
      322    12212    8                                 ELSE DO;
      323    12213    9                                     IF NOT FOUND$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE THEN
             12213                                              DO;
      324    12214    9                                         FOUND$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE = '1'B
             12214                                                  /*@TRUE_B*/;
      325    12215                                              %CHECK( SEV = @MULTIPLE );
      326    12218                                              %DUP_STATS;
      327    12221    9                                         END;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:36   
      328    12222    8                                     END;
      329    12223    7                                 FIRST_START$ = BIN_RESULT$;
      330    12224    7                                 FIRST_STOP$ = BIN_RESULT$;
      331    12225        /**/
      332    12226    8                                 DO WHILE( FIRST_START$ >= BIN_START$ );
      333    12227    8                                     IF PINCRW( BIN_N$, FIRST_START$ -> VXD$TMPLT.
             12227                                              NPOINTER )
      334    12228    8                                             -> B$DNAME.TEXT
      335    12229    8                                             ~=
      336    12230    8                                             PN$ -> B$DNAME.TEXT THEN GOTO BUMP_START;
      337    12231    8                                     FIRST_START$ = PINCRW(FIRST_START$, -SIZEW(
             12231                                              VXD$TMPLT));
      338    12232    8                                     END; /* Do while( FIRST_START$ >= BIN_START$ ); */
      339    12233    7   BUMP_START:
      340    12234    7                                 FIRST_START$ = PINCRW( FIRST_START$, SIZEW(VXD$TMPLT)
             12234                                          );
      341    12235        /**/
      342    12236    8                                 DO WHILE( FIRST_STOP$ <= BIN_STOP$ );
      343    12237    8                                     IF PINCRW( BIN_N$, FIRST_STOP$ -> VXD$TMPLT.
             12237                                              NPOINTER )
      344    12238    8                                             -> B$DNAME.TEXT
      345    12239    8                                             ~=
      346    12240    8                                             PN$ -> B$DNAME.TEXT THEN GOTO
             12240                                                      DECREASE_STOP;
      347    12241    8                                     FIRST_STOP$ = PINCRW(FIRST_STOP$, SIZEW(VXD$TMPLT)
             12241                                              );
      348    12242    8                                     END; /* Do while( FIRST_STOP$ <= BIN_STOP$ ); */
      349    12243    7   DECREASE_STOP:
      350    12244    7                                 FIRST_STOP$ = PINCRW( FIRST_STOP$, -SIZEW(VXD$TMPLT) )
             12244                                          ;
      351    12245        /**/
      352    12246    8                                 DO WHILE( FIRST_START$ <= FIRST_STOP$ );
      353    12247    8                                     SAVE_NAME_DISP = FIRST_START$ -> VXD$TMPLT.
             12247                                              NPOINTER;
      354    12248    8                                     IF FIRST_START$->VXD$TMPLT.CONSTNT
      355    12249    8                                     THEN
      356    12250    8                                         FIRST_START$->VXD$TMPLT.LFLAGS.MULTIPLE = '1'B
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:37   
             12250                                                  ;
      357    12251    8                                     ELSE
      358    12252    8                                         FIRST_START$->VXD$TMPLT.AD.LFLAGS.MULTIPLE =
             12252                                                  '1'B;
      359    12253    8                                     FIRST_START$ -> VXD$TMPLT.NPOINTER =
             12253                                              SAVE_NAME_DISP;
      360    12254    8                                     FIRST_START$ = PINCRW( FIRST_START$, SIZEW(
             12254                                              VXD$TMPLT ) );
      361    12255    8                                     END;
             12255                                              /* Do while( FIRST_START$ <= FIRST_STOP$ ); */
      362    12256    7                                 END;  /* Else do - if FOUND$ = addr(nil) ... */
      363    12257        /**/
      364    12258        /**/
      365    12259    6   NOT_FOUND_DESCENDANT:
      366    12260        /**/
      367    12261    7                             IF CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO;
      368    12262    7                                 CURR$ = CURR$ -> VX$NODE.SON$;
      369    12263    7                                 END;
             12263                                        /* If CURR$ -> VX$NODE.SON$ ~= addr(nil) then do; */
      370    12264    7                             ELSE DO;
      371    12265    8                                 DO WHILE( CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );
      372    12266    8                                     CURR$ = CURR$ -> VX$NODE.FATHER$;
      373    12267    8                                     IF CURR$ = VX_CURR$ THEN GOTO EVER_FOUND;
      374    12268    8                                     END;
      375    12269    7                                 CURR$ = CURR$ -> VX$NODE.BROTHER$;
      376    12270    7                                 END;      /* Else do */
      377    12271    6                             END;          /* Do while( CURR$ ~= addr(nil) ); */
      378    12272        %EJECT;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:38   
      379    12273    5   EVER_FOUND:
      380    12274    6                         IF FOUND$ ~= ADDR(NIL) THEN DO;
      381    12275    6                             RESOLVE$ -> VXR$SAT.NODE# = NODE$ -> VX$NODE.NUM;
      382    12276    7                             IF REF_REC = 5 THEN DO;
      383    12277    7                                 RESOLVE$ -> VXR$SAT.VALUE = FOUND$ -> B$EDEF.OU.OFFSET
             12277                                          ;
      384    12278    7                                 IF NODE$ -> VX$NODE.DEPTH > VX_CURR$ -> VX$NODE.DEPTH
             12278                                          THEN
      385    12279    7                                     RESOLVE$ -> VXR$SAT.BELOW = '1'B/*@TRUE_B*/;
      386    12280    7                                 FOUND$ -> B$EDEF.LFLAGS.USED = '1'B/*@TRUE_B*/;
      387    12281    7                                 IF FOUND$ -> B$EDEF.LFLAGS.SOURCE = 1
      388    12282    7                                 THEN VX_SLIB_USED = '1'B;
      389    12283    7                                 IF FOUND$ -> B$EDEF.CHECK
      390    12284    7                                         AND
      391    12285    8                                         P$ -> B$EREF.CHECK THEN DO;
      392    12286    8                                     IF FOUND$ -> B$EDEF.ALT
      393    12287    8                                             ~=
      394    12288    9                                             P$ -> B$EREF.ALT THEN DO;
      395    12289        /*E*  ERROR: VXT-E$ENTRY_A_VX-0
      396    12290              MESSAGE: Altret conflict for entry definition: %U1.
      397    12291              DESCRIPTION: Self-explanatory.
      398    12292        */
      399    12293    9                                         VX_EFIELD1.CHARS = PN$ -> B$DNAME.TEXT;
      400    12294    9                                         VX_EFIELD1.COUNT = PN$ -> B$DNAME.COUNT;
      401    12295                                              %SCREAM(
      402    12296                                              ERR#=E$ENTRY_A_VX,
      403    12297                                              LEVEL=@E$S_VX,
      404    12298                                              MID="'T'");
      405    12301        /*E*  ERROR: VXT-E$ENTRY_A_C_VX-0
      406    12302              MESSAGE: Definition %U1 while the reference %U2.
      407    12303              DESCRIPTION: Self-explanatory.
      408    12304        */
      409    12305   10                                         IF P$ -> B$EREF.ALT THEN DO;
      410    12306   10                                             VX_EFIELD1 = DOES_NOT_ALLOW;
      411    12307   10                                             VX_EFIELD2 = ALLOWS;
      412    12308   10                                             END;
      413    12309   10                                         ELSE DO;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:39   
      414    12310   10                                             VX_EFIELD1 = ALLOWS;
      415    12311   10                                             VX_EFIELD2 = DOES_NOT_ALLOW;
      416    12312   10                                             END; /* Else do; */
      417    12313                                              %SCREAM(
      418    12314                                              ERR#=E$ENTRY_A_C_VX,
      419    12315                                              LEVEL=@E$S_VX,
      420    12316                                              MID="'T'",
      421    12317                                              AUX=@E$REFOUOF_VX);
      422    12320    9                                         VX_ERRORS.CONFLICT.ALTRIT = VX_ERRORS.CONFLICT
             12320                                                  .ALTRIT + 1;
      423    12321                                              %CHECK( SEV = @ALTRIT );
      424    12324    9                                         END;
      425    12325        /**/
      426    12326        /**/
      427    12327        /**/
      428    12328    8                                     IF FOUND$ -> B$EDEF.NPARAM
      429    12329    8                                             ~=
      430    12330    9                                             P$ -> B$EREF.NPARAM THEN DO;
      431    12331        /*E*  ERROR: VXT-E$ENTRY_NP_VX-0
      432    12332              MESSAGE: Argument/parameter conflict for entry definition: %U1.
      433    12333              DESCRIPTION: Self-explanatory.
      434    12334        */
      435    12335    9                                         VX_EFIELD1.CHARS = PN$ -> B$DNAME.TEXT;
      436    12336    9                                         VX_EFIELD1.COUNT = PN$ -> B$DNAME.COUNT;
      437    12337                                              %SCREAM(
      438    12338                                              ERR#=E$ENTRY_NP_VX,
      439    12339                                              LEVEL=@E$S_VX,
      440    12340                                              MID="'T'");
      441    12343        /*E*  ERROR: VXT-E$ENTRY_NP_C_VX-0
      442    12344              MESSAGE: Argument count = %U1 parameter count = %U2.
      443    12345              DESCRIPTION: Self-explanatory.
      444    12346        */
      445    12347    9                                         NP_D = FOUND$ -> B$EDEF.NPARAM;
      446    12348    9                                         NP_R = P$ -> B$EREF.NPARAM;
      447    12349                                              %NUMBER( NUM1=NP_R, NUM2=NP_D );
      448    12366                                              %SCREAM(
      449    12367                                              ERR#=E$ENTRY_NP_C_VX,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:40   
      450    12368                                              LEVEL=@E$S_VX,
      451    12369                                              MID="'T'",
      452    12370                                              AUX=@E$REFOUOF_VX);
      453    12373    9                                         VX_ERRORS.CONFLICT.PARM = VX_ERRORS.CONFLICT.
             12373                                                  PARM + 1;
      454    12374                                              %CHECK( SEV = @PARM );
      455    12377    9                                         END;
      456    12378        /**/
      457    12379        /**/
      458    12380        /**/
      459    12381    8                                     CST_D = FOUND$ -> B$EDEF.CST;
      460    12382    8                                     CST_R = P$ -> B$EREF.CST;
      461    12383    9                                     IF CST_D ~= CST_R THEN DO;
      462    12384    9                                         IF CST_R ~= CST_D - 5
      463    12385    9                                                 OR
      464    12386   10                                                 CST_R = 6 THEN DO;
      465    12387        /*E*  ERROR: VXT-E$ENTRY_CST_VX-0
      466    12388              MESSAGE: Calling sequence mismatch for entry definition: %U1.
      467    12389              DESCRIPTION: Self-explanatory.
      468    12390        */
      469    12391   10                                             VX_EFIELD1.CHARS = PN$ -> B$DNAME.TEXT;
      470    12392   10                                             VX_EFIELD1.COUNT = PN$ -> B$DNAME.COUNT;
      471    12393                                                  %SCREAM(
      472    12394                                                  ERR#=E$ENTRY_CST_VX,
      473    12395                                                  LEVEL=@E$S_VX,
      474    12396                                                  MID="'T'");
      475    12399        /*E*  ERROR: VXT-E$ENTRY_CST_C_VX-0
      476    12400              MESSAGE: The definition specifies %U1 type while the reference specifies
      477    12401                       %U2 type.
      478    12402              DESCRIPTION: Self-explanatory.
      479    12403        */
      480    12404   10                                             VX_EFIELD1.CHARS = CST_TYPE( CST_D );
      481    12405   10                                             VX_EFIELD1.COUNT = CST_TYPE_COUNT( CST_D )
             12405                                                      ;
      482    12406   10                                             VX_EFIELD2.CHARS = CST_TYPE( CST_R );
      483    12407   10                                             VX_EFIELD2.COUNT = CST_TYPE_COUNT( CST_R )
             12407                                                      ;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:41   
      484    12408                                                  %SCREAM(
      485    12409                                                  ERR#=E$ENTRY_CST_C_VX,
      486    12410                                                  LEVEL=@E$S_VX,
      487    12411                                                  MID="'T'",
      488    12412                                                  AUX=@E$REFOUOF_VX);
      489    12415   10                                             VX_ERRORS.CONFLICT.CST = VX_ERRORS.
             12415                                                      CONFLICT.CST + 1;
      490    12416                                                  %CHECK( SEV = @CST );
      491    12419   10                                             END;
             12419                                            /* If CST_R -5 ~= CST_D or CST_R = 6 then do; */
      492    12420    9                                         END; /* If CST_D ~= CST_R then do; */
      493    12421    8                                     END;
      494    12422    7                                 END;      /* If REF_REF = typeref ... */
      495    12423    7                             ELSE DO;
      496    12424    8                                 IF FOUND$ -> VXD$TMPLT.CONSTNT THEN DO;
      497    12425    8                                     RESOLVE$ -> VXR$SAT.VALUE = FOUND$ -> VXD$TMPLT.
             12425                                              VALUE;
      498    12426    8                                     FOUND$ -> VXD$TMPLT.LFLAGS.USED = '1'B/*@TRUE_B*/;
      499    12427    8                                     IF FOUND$->VXD$TMPLT.LFLAGS.SOURCE = 1
      500    12428    8                                     THEN VX_SLIB_USED = '1'B;
      501    12429    8                                     END; /* If FOUND$ -> VXD$TMPLT.CNSTNT then do; */
      502    12430    8                                 ELSE DO;
      503    12431    8                                     IF REF_REC = 7 THEN
      504    12432    8                                         RESOLVE$ -> VXR$SAT.VALUE =
      505    12433    8                                                 FOUND$ -> B$SDEF.AD.OU.OFFSET;
      506    12434    9                                     ELSE DO;
      507    12435    9                                         RESOLVE$ -> VXR$SAT.SEG.OFFSET =
      508    12436    9                                                 FOUND$->B$SEGDEF.AD.OU.OFFSET;
      509    12437    9                                         RESOLVE$ -> VXR$SAT.SEG.SEGID =
      510    12438    9                                                 FOUND$ -> B$SEGDEF.SEG.SEGID;
      511    12439    9                                         END;
      512    12440    9                                     IF P$ -> VXR$TMPLT.READ_ONLY THEN DO;
      513    12441    9                                         IF FOUND$ -> VXD$TMPLT.PROTECTION.TYPE ~= 1
      514    12442    9                                                 AND FOUND$ -> VXD$TMPLT.PROTECTION.
             12442                                                          TYPE ~= 6
      515    12443    9                                                 AND FOUND$->VXD$TMPLT.PROTECTION.TYPE
             12443                                                          ~= 7
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:42   
      516    12444    9                                                 AND FOUND$->VXD$TMPLT.PROTECTION.TYPE
             12444                                                          ~= 8
      517    12445   10                                         THEN DO;
      518    12446        /*E*  ERROR: VXT-E$PRO_MIS_VX-0
      519    12447        MESSAGE: Protection type mismatch for %U1 definition: %U2.
      520    12448                 The reference specifies READ ONLY while the definition specifies %U3.
      521    12449        DESCRIPTION: Protection type specified for data or segment definition
      522    12450                     incompatible with protection type specified for the reference
      523    12451        */
      524    12452   10                                             IF REF_REC = 7
      525    12453   10                                             THEN VX_EFIELD1 = DATA_DEF;
      526    12454   10                                             ELSE VX_EFIELD1 = SEG_DEF;
      527    12455   10                                             VX_EFIELD2.COUNT = PN$ -> B$DNAME.COUNT;
      528    12456   10                                             VX_EFIELD2.CHARS = PN$ -> B$DNAME.TEXT;
      529    12457   10                                             L = R$ -> VX$SC.TYPE;
      530    12458   10                                             VX_EFIELD3.COUNT = PRO_TYPE_COUNT(L);
      531    12459   10                                             VX_EFIELD3.CHARS = PRO_TYPE(L);
      532    12460                                                  %SCREAM(
      533    12461                                                  ERR#=E$PRO_MIS_VX,
      534    12462                                                  LEVEL=@E$W_VX, MID="'T'",
      535    12463                                                  AUX=E$REFOUOF_VX );
      536    12466   10                                             END;
      537    12467    9                                         END;
      538    12468    8                                     IF NODE$ -> VX$NODE.DEPTH > VX_CURR$ -> VX$NODE.
             12468                                              DEPTH THEN
      539    12469    8                                         RESOLVE$ -> VXR$SAT.BELOW = '1'B/*@TRUE_B*/;
      540    12470    8                                     FOUND$ -> VXD$TMPLT.AD.LFLAGS.USED = '1'B
             12470                                              /*@TRUE_B*/;
      541    12471    8                                     IF FOUND$->VXD$TMPLT.AD.LFLAGS.SOURCE = 1
      542    12472    8                                     THEN VX_SLIB_USED = '1'B;
      543    12473    8                                     END;
             12473                                      /* Else do - if FOUND$ -> VXD$TMPLT.CONSTNT then do */
      544    12474    7                                 END; /* Else do - if REF_REC = typeref then do; */
      545    12475    6                             END;          /* If FOUND$ ~= addr(nil) then do */
      546    12476        %EJECT;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:43   
      547    12477    6                         ELSE DO;
      548    12478        /* Here => unsatisfied */
      549    12479    7                             IF REF_REC = 9 THEN DO;
      550    12480    7                                 BIN_START$ = ADDR( VX_SD );
      551    12481    7                                 BIN_STOP$ = VX_SD_STOP$;
      552    12482    7                                 BIN_N$ = ADDR( VX_SN );
      553    12483                                      %BIN_SEARCH(
      554    12484                                      START$=BIN_START$,
      555    12485                                      STOP$=BIN_STOP$,
      556    12486                                      RESULT$=FOUND$,
      557    12487                                      N$=BIN_N$,
      558    12488                                      MATCH$=PN$,
      559    12489                                      NAME_DISP=2,
      560    12490                                      SIZE="SIZEW(VXD$TMPLT)",
      561    12491                                      NEG=%@COMMENT,
      562    12492                                      GEN=%@TNEMMOC,
      563    12493                                      FOUND=FOUND_SEGREF,
      564    12494                                      SPLIT=BIN_SPLIT_S,
      565    12495                                      CHECK=BIN_CHECK_S,
      566    12496                                      ALTRETURN=NOT_FOUND_SEGREF,
      567    12497                                      EMPTY=NOT_FOUND_SEGREF);
             12499    7           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND_SEGREF;
             12500    8           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;
             12501    8              FOUND$ = BIN_START$;            /* Sequential search                  */
             12502    9              DO WHILE( FOUND$ <= BIN_STOP$ );
             12503    9                 BIN_NTEMP$ = PINCRW( BIN_N$, FOUND$ -> VX$TMPLT.A(2) );
             12504    9                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             12505    9                   >=
             12506   10                   PN$ -> B$DNAME.TEXT THEN DO;
             12507   10                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             12508   10                      =
             12509   10                      PN$ -> B$DNAME.TEXT THEN GOTO FOUND_SEGREF;
             12510   10                    ELSE GOTO NOT_FOUND_SEGREF;
             12511   10                    END;
             12512    9                 FOUND$ = PINCRW( FOUND$, SIZEW(VXD$TMPLT) );
             12513    9                 END;                      /* Do while                           */
             12514    8              GOTO NOT_FOUND_SEGREF;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:44   
             12515    8              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12516    8           ELSE DO;                        /* Binary search                      */
             12517    8              BIN_LOW = 0;
             12518    8              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
             12519    8              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );
             12520    8   BIN_SPLIT_S:     ;
             12521    8              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             12522    8              FOUND$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );
             12523    8              BIN_NTEMP$ = PINCRW( BIN_N$, FOUND$ -> VX$TMPLT.A(2) );
             12524    8              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12525    8                <
             12526    9                PN$ -> B$DNAME.TEXT THEN DO;
             12527    9                 BIN_LOW = BIN_MID;
             12528    9                 GOTO BIN_CHECK_S;
             12529    9                 END;
             12530    8              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12531    8                >
             12532    9                PN$ -> B$DNAME.TEXT THEN DO;
             12533    9                 BIN_HIGH = BIN_MID;
             12534    9   BIN_CHECK_S:        ;
             12535    9                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_S;
             12536                                                /* Here => looping or not found       */
             12537                                      /* Result -> < match => a boundary condition    */
             12538    9                 /*
             12539    9                   IF PINCRW( BIN_N$, FOUND$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12540    9                   <
             12541    9                   PN$ -> B$DNAME.TEXT THEN FOUND$ = PINCRW( FOUND$, SIZEW(VXD$TMPLT) )
             12541                            ;
             12542    9                 /**/
             12543    9                   GOTO NOT_FOUND_SEGREF;
             12544    9                 END;
             12545    8              END;                         /* Else do;                           */
             12546    7   FOUND_SEGREF:
             12547        /* Here -> found */
      568    12549        /* Here => found segref */
      569    12550    7                                 RESOLVE$ -> VXR$SAT.VALUE = FOUND$ -> B$SEGDEF.VALUE;
      570    12551    7                                 END;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:45   
      571    12552    7                             ELSE DO;
      572    12553    7                                 RESOLVE$ -> VXR$SAT.VALUE = VX_PROGRAM_BIAS.I.DATA;
      573    12554    8                                 DO WHILE( '0'B );
      574    12555    8   NOT_FOUND_SEGREF:                       /* Here => segref has not been found */
      575    12556    8                                     RESOLVE$ -> VXR$SAT.VALUE = VX_SPC.SEG.VALUE.NUL;
      576    12557    8                                     END;
      577    12558    7                                 BIN_START$ = VX_PASS2_REF.UNSAT.L_START_A$(I);
      578    12559    7                                 BIN_STOP$ = PINCRW( VX_PASS2_REF.UNSAT.L_STOP_A$(I), -
             12559                                          SIZEW(VXR$TMPLT) );
      579    12560    7                                 BIN_N$ = VX_PASS2_REF.UNSAT.L_START.RN$;
      580    12561                                      %BIN_SEARCH(
      581    12562                                      START$=BIN_START$,
      582    12563                                      STOP$=BIN_STOP$,
      583    12564                                      RESULT$=BIN_RESULT$,
      584    12565                                      N$=BIN_N$,
      585    12566                                      MATCH$=PN$,
      586    12567                                      NAME_DISP=0,
      587    12568                                      SIZE="SIZEW(VXR$TMPLT)",
      588    12569                                      ADDITIVE="- VX_PASS2_REF.UNSAT.PREV_RN_SIZE",
      589    12570                                      NEG=" ",
      590    12571                                      GEN=" ",
      591    12572                                      FOUND=FOUND_UNSAT,
      592    12573                                      SPLIT=BIN_SPLIT_U,
      593    12574                                      CHECK=BIN_CHECK_U,
      594    12575                                      ALTRETURN=NOT_FOUND_SEARCH,
      595    12576                                      EMPTY=NOT_FOUND_SEARCH);
             12578    7           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND_SEARCH;
             12579    8           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXR$TMPLT) < 17 THEN DO;
             12580    8              BIN_RESULT$ = BIN_START$;        /* Sequential search                  */
             12581    9              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );
             12582    9                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(0) -
             12582                          VX_PASS2_REF.UNSAT.PREV_RN_SIZE );
             12583    9                 IF BIN_NTEMP$ -> B$DNAME.TEXT
             12584    9                   >=
             12585   10                   PN$ -> B$DNAME.TEXT THEN DO;
             12586   10                    IF BIN_NTEMP$ -> B$DNAME.TEXT
             12587   10                      =
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:46   
             12588   10                      PN$ -> B$DNAME.TEXT THEN GOTO FOUND_UNSAT;
             12589   10                    ELSE GOTO NOT_FOUND_SEARCH;
             12590   10                    END;
             12591    9                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXR$TMPLT) );
             12592    9                 END;                      /* Do while                           */
             12593    8              GOTO NOT_FOUND_SEARCH;
             12594    8              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12595    8           ELSE DO;                        /* Binary search                      */
             12596    8              BIN_LOW = 0;
             12597    8              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXR$TMPLT) + 2;
             12598    8              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXR$TMPLT) );
             12599    8   BIN_SPLIT_U:     ;
             12600    8              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;
             12601    8              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXR$TMPLT) );
             12602    8              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(0) - VX_PASS2_REF.
             12602                       UNSAT.PREV_RN_SIZE );
             12603    8              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12604    8                <
             12605    9                PN$ -> B$DNAME.TEXT THEN DO;
             12606    9                 BIN_LOW = BIN_MID;
             12607    9                 GOTO BIN_CHECK_U;
             12608    9                 END;
             12609    8              IF BIN_NTEMP$ -> B$DNAME.TEXT
             12610    8                >
             12611    9                PN$ -> B$DNAME.TEXT THEN DO;
             12612    9                 BIN_HIGH = BIN_MID;
             12613    9   BIN_CHECK_U:        ;
             12614    9                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_U;
             12615                                                /* Here => looping or not found       */
             12616                                      /* Result -> < match => a boundary condition    */
             12618    9                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(0) - VX_PASS2_REF.UNSAT
             12618                            .PREV_RN_SIZE ) -> B$DNAME.TEXT
             12619    9                   <
             12620    9                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             12620                            VXR$TMPLT) );
             12622    9                   GOTO NOT_FOUND_SEARCH;
             12623    9                 END;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:47   
             12624    8              END;                         /* Else do;                           */
             12625    7   FOUND_UNSAT:
             12626        /* Here -> found */
      596    12628        /* Here => found */
      597    12629    7                                 INSERT$ = BIN_RESULT$;
      598    12630    7                                 IF VX_REF_EXPONENTIAL_SWITCH THEN GOTO
             12630                                          UNSAT_ALREADY_THERE;
      599    12631    7                                 IF VX_PRIMARY_ENTDEF_GOT AND WILL_FIT THEN GOTO
             12631                                          SEARCH_SECONDARY;
      600    12632        /**/
      601    12633    8                                 DO WHILE( INSERT$ >= BIN_START$ );
      602    12634    8                                     IF PINCRW( BIN_N$, INSERT$ -> VXR$TMPLT.NPOINTER -
             12634                                              VX_PASS2_REF.UNSAT.PREV_RN_SIZE )
      603    12635    8                                             -> B$DNAME.TEXT
      604    12636    8                                             ~=
      605    12637    8                                             PN$ -> B$DNAME.TEXT THEN GOTO
             12637                                                      STEP_FORWARD_ONCE;
      606    12638    8                                     IF NOT INSERT$ -> VXR$TMPLT.GOT THEN GOTO
             12638                                              UNSAT_ALREADY_THERE;
      607    12639    8                                     INSERT$ = PINCRW(INSERT$, -SIZEW(VXR$TMPLT));
      608    12640    8                                     END; /* Do while( INSERT$      >= BIN_START$ ); */
      609    12641    7                                 GOTO STEP_FORWARD_ONCE;
      610    12642    7   NOT_FOUND_SEARCH:
      611    12643    7                                 INSERT$ = BIN_RESULT$;
      612    12644    7                                 GOTO NOT_FOUND_UNSAT;
      613    12645    7   SEARCH_SECONDARY:
      614    12646        /**/
      615    12647    7                                 IF NOT BIN_RESULT$ -> VXR$TMPLT.GOT THEN GOTO
             12647                                          SEARCH_FORWARD;
      616    12648    7                                 R$ = PINCRW( DNAME$, BIN_RESULT$ -> VXR$TMPLT.OPOINTER
             12648                                          );
      617    12649    8                                 IF R$ -> B$DNAME.TEXT < TEMP.CHARS THEN DO;
             12649                                          /* Search forward */
      618    12650    8   SEARCH_FORWARD:
      619    12651    9                                     DO WHILE( INSERT$ <= BIN_STOP$ );
      620    12652    9                                         IF PINCRW( BIN_N$, INSERT$ -> VXR$TMPLT.
             12652                                                  NPOINTER - VX_PASS2_REF.UNSAT.PREV_RN_SIZE
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:48   
             12652                                                  )
      621    12653    9                                                 -> B$DNAME.TEXT
      622    12654    9                                                 >
      623    12655    9                                                 PN$ -> B$DNAME.TEXT THEN GOTO
             12655                                                          INSERT_POINT;
      624    12656   10                                         IF INSERT$ -> VXR$TMPLT.GOT THEN DO;
      625    12657   10                                             R$ = PINCRW( DNAME$, INSERT$ -> VXR$TMPLT.
             12657                                                      OPOINTER );
      626    12658   10                                             IF R$ -> B$DNAME.TEXT
      627    12659   10                                                     >
      628    12660   10                                                     TEMP.CHARS THEN GOTO INSERT_POINT;
      629    12661   10                                             IF R$ -> B$DNAME.TEXT
      630    12662   10                                                     =
      631    12663   10                                                     TEMP.CHARS THEN GOTO
             12663                                                              UNSAT_ALREADY_THERE;
      632    12664   10                                             END;
             12664                                                  /* If INSERT$ -> VXR$TMPLT.GOT then do; */
      633    12665    9                                         INSERT$ = PINCRW( INSERT$, SIZEW( VXR$TMPLT )
             12665                                                  );
      634    12666    9                                         END; /* Do while( INSERT$ <= BIN_STOP$ ); */
      635    12667    8                                     GOTO INSERT_POINT;
      636    12668    8                                     END;
             12668                                           /* If R$ -> B$DNAME.TEXT < TEMP.CHARS then do; */
      637    12669        /**/
      638    12670    7                                 ELSE
      639    12671        /**/
      640    12672    8                                     IF R$ -> B$DNAME.TEXT > TEMP.CHARS THEN DO;
      641    12673    9                                         DO WHILE( INSERT$ >= BIN_START$ );
             12673                                                  /* Search backwards */
      642    12674    9                                             IF PINCRW( BIN_N$, INSERT$ -> VXR$TMPLT.
             12674                                                      NPOINTER - VX_PASS2_REF.UNSAT.
             12674                                                      PREV_RN_SIZE )
      643    12675    9                                                     -> B$DNAME.TEXT
      644    12676    9                                                     <
      645    12677    9                                                     PN$ -> B$DNAME.TEXT THEN GOTO
             12677                                                              STEP_FORWARD_ONCE;
      646    12678   10                                             IF INSERT$ -> VXR$TMPLT.GOT THEN DO;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:49   
      647    12679   10                                                 R$ = PINCRW( DNAME$, INSERT$ ->
             12679                                                          VXR$TMPLT.OPOINTER );
      648    12680   10                                                 IF R$ -> B$DNAME.TEXT
      649    12681   10                                                         <
      650    12682   10                                                         TEMP.CHARS THEN GOTO
             12682                                                                  STEP_FORWARD_ONCE;
      651    12683   10                                                 IF R$ -> B$DNAME.TEXT
      652    12684   10                                                         =
      653    12685   10                                                         TEMP.CHARS THEN GOTO
             12685                                                                  UNSAT_ALREADY_THERE;
      654    12686   10                                                 END;
             12686                                                  /* If INSERT$ -> VXR$TMPLT.GOT then do; */
      655    12687    9                                             ELSE GOTO STEP_FORWARD_ONCE;
      656    12688    9                                             INSERT$ = PINCRW( INSERT$, -SIZEW(
             12688                                                      VXR$TMPLT ) );
      657    12689    9                                             END;
             12689                                                    /* Do while( INSERT$ >= BIN_START$ ); */
      658    12690    8                                         END;
             12690                                           /* If R$ -> B$DNAME.TEXT > TEMP.CHARS then do; */
      659    12691    7                                     ELSE GOTO UNSAT_ALREADY_THERE;
      660    12692        /**/
      661    12693    7   STEP_FORWARD_ONCE:
      662    12694    7                                 INSERT$ = PINCRW( INSERT$, SIZEW( VXR$TMPLT ) );
      663    12695    7   INSERT_POINT:                 ;
      664    12696    7   NOT_FOUND_UNSAT:
      665    12697        /* Check if it will fit */
      666    12698    7                                 NAME_SIZEW = ( PN$ -> B$DNAME.COUNT + 4/*@CHAR_WORD*/
             12698                                          + 1 ) / 4/*@CHAR_WORD*/;
      667    12699    7                                 IF VX_PASS2_REF.UNSAT.MAX.RN < VX_PASS2_REF.UNSAT.SIZE
             12699                                          .RN + NAME_SIZEW
      668    12700    7                                         OR
      669    12701    7                                         VX_PASS2_REF.UNSAT.MAX_A(I) <= VX_PASS2_REF.
             12701                                                  UNSAT.SIZE_A(I) THEN
      670    12702    7                                     CALL VXU$UNSAT;
      671    12703    8                                 IF VX_PASS2_REF.UNSAT.L_START.RN$ = ADDR(NIL) THEN DO;
      672    12704    8                                     VX_PASS2_REF.UNSAT.L_START.RN$ =
      673    12705    8                                             VX_PASS2_REF.UNSAT.L_WHERE.RN$;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:50   
      674    12706    8                                     VX_PASS2_REF.UNSAT.L_STOP.RN$ =
      675    12707    8                                             VX_PASS2_REF.UNSAT.L_WHERE.RN$;
      676    12708    8                                     END;  /* If */
      677    12709    8                                 IF VX_PASS2_REF.UNSAT.L_START_A$(I) = ADDR(NIL) THEN
             12709                                          DO;
      678    12710    8                                     VX_PASS2_REF.UNSAT.L_START_A$(I) =
      679    12711    8                                             VX_PASS2_REF.UNSAT.L_WHERE_A$(I);
      680    12712    8                                     VX_PASS2_REF.UNSAT.L_STOP_A$(I) =
      681    12713    8                                             VX_PASS2_REF.UNSAT.L_WHERE_A$(I);
      682    12714    8                                     INSERT$ = VX_PASS2_REF.UNSAT.L_WHERE_A$(I);
      683    12715    8                                     END;
      684    12716    8                                 ELSE DO;  /* Insert into non-null list */
      685    12717    8                                     R$ = PINCRW( VX_PASS2_REF.UNSAT.L_STOP_A$(I), -
             12717                                              SIZEW(VXR$TMPLT) );
      686    12718    9                                     IF R$ >= INSERT$ THEN DO;
      687    12719   10                                         DO WHILE( R$ >= INSERT$ );
      688    12720   10                                             PINCRW( R$, SIZEW( VXR$TMPLT ) ) ->
             12720                                                      VXR$TMPLT =
      689    12721   10                                                     R$ -> VXR$TMPLT;
      690    12722   10                                             R$ = PINCRW( R$, -SIZEW(VXR$TMPLT) );
      691    12723   10                                             END; /* Do while( R$ <= INSERT$ ); */
      692    12724    9                                         END; /* If R$ >= INSERT$ then do; */
      693    12725    8                                     END;  /* Else do */
      694    12726        /* Move name in */
      695    12727    7                                 VX_PASS2_REF.UNSAT.L_STOP.RN$ -> B$DNAME.COUNT = PN$
             12727                                          -> B$DNAME.COUNT;
      696    12728    7                                 VX_PASS2_REF.UNSAT.L_STOP.RN$ -> B$DNAME.TEXT = PN$ ->
             12728                                          B$DNAME.TEXT;
      697    12729    7                                 INSERT$ -> VXR$TMPLT.NPOINTER =
      698    12730    7                                         VX_PASS2_REF.UNSAT.PREV_RN_SIZE
      699    12731    7                                         +
      700    12732    7                                         VX_PASS2_REF.UNSAT.SIZE.RN;
      701    12733    7                                 INSERT$ -> VXR$TMPLT.SREF = P$ -> VXR$TMPLT.SREF;
      702    12734    8                                 IF P$ -> VXR$TMPLT.SREF THEN DO;
      703    12735               /* %CHECK(SEV=@UNSAT_SECONDARY */
      704    12736    8                                     VX_ERRORS.UNSAT.UNSAT_SECONDARY = VX_ERRORS.UNSAT.
             12736                                              UNSAT_SECONDARY + 1;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:51   
      705    12737    8                                     VX_RU_HEAD.MAP_BITS_A.SECONDARY(I1) = '1'B
             12737                                              /*@TRUE_B*/;
      706    12738    8                                     END;  /* If P$ -> VXR$TMPLT.SREF then do; */
      707    12739    8                                 ELSE DO;
      708    12740                                          %CHECK( SEV=@UNSAT_PRIMARY );
      709    12743    8                                     VX_ERRORS.UNSAT.UNSAT_PRIMARY = VX_ERRORS.UNSAT.
             12743                                              UNSAT_PRIMARY + 1;
      710    12744    8                                     VX_RU_HEAD.MAP_BITS_A.PRIMARY(I1) = '1'B
             12744                                              /*@TRUE_B*/;
      711    12745    8                                     END;
             12745                                           /* Else do; - if P$ -> VXR$TMPLT.SREF then do; */
      712    12746    8                                 IF VX_PRIMARY_ENTDEF_GOT AND WILL_FIT AND NOT
             12746                                          VX_REF_EXPONENTIAL_SWITCH THEN DO;
      713    12747    8                                     INSERT$ -> VXR$TMPLT.GOT = '1'B/*@TRUE_B*/;
      714    12748    8                                     INSERT$ -> VXR$TMPLT.OPOINTER = VX_OK.KPEDX;
      715    12749    8                                     END;
             12749                                        /* If VX_PRIMARY_ENTDEF_GOT and WILL_FIT then do; */
      716    12750    8                                 ELSE DO;
      717    12751    8                                     INSERT$ -> VXR$TMPLT.GOT = '0'B/*@FALSE_B*/;
      718    12752    8                                     END;
             12752                             /* Else do; - if VX_PRIMARY_ENTDEF_GOT and WILL_FIT then do; */
      719    12753    7                                 VX_PASS2_REF.UNSAT.L_STOP.RN$ =
      720    12754    7                                         PINCRW( VX_PASS2_REF.UNSAT.L_STOP.RN$,
             12754                                                  NAME_SIZEW );
      721    12755    7                                 VX_PASS2_REF.UNSAT.L_STOP_A$(I) =
      722    12756    7                                         PINCRW( VX_PASS2_REF.UNSAT.L_STOP_A$(I), SIZEW
             12756                                                  ( VXR$TMPLT ) );
      723    12757    7                                 VX_PASS2_REF.UNSAT.SIZE.RN =
      724    12758    7                                         VX_PASS2_REF.UNSAT.SIZE.RN + NAME_SIZEW;
      725    12759    7                                 VX_PASS2_REF.UNSAT.SIZE_A(I) =
      726    12760    7                                         VX_PASS2_REF.UNSAT.SIZE_A(I) + SIZEW(
             12760                                                  VXR$TMPLT );
      727    12761    7   UNSAT_ALREADY_THERE:
      728    12762    7                                 END; /* Else do - if REF_REC = typsegref then do; */
      729    12763    6                             END;  /* Else do - if FOUND$ ~= addr(nil) then do; */
      730    12764    5   BUMP_P:
      731    12765    5                         P$ = PINCRW( P$, SIZEW( VXR$TMPLT ) );
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:52   
      732    12766    5                         RESOLVE$ = PINCRW( RESOLVE$, SIZEW( VXR$SAT ) );
      733    12767    5                         END;              /* Do while( P$ <= Q$ ); */
      734    12768    4                     VX_PASS2_REF.SAT.COUNT_A(I) = POFFW( RESOLVE$,
      735    12769    4                             VX_PASS2_REF.SAT.L_START_A$(I) )/
      736    12770    4                             SIZEW( VXR$SAT );
      737    12771    4                     VX_PASS2_REF.SAT.L_STOP_A$(I) = PINCRW( RESOLVE$, -SIZEW( VXR$SAT
             12771                              ) );
      738    12772    4                     END;                  /* If REF_REC ~= typrnam then do; */
      739    12773    3                 END;                      /* If tsize > 0 then do; */
      740    12774    2             END;                      /* Do i = 0 to sizew( VX_REF_REC_A ) - 1; */
      741    12775    1         CALL VXT$FIMAGE;
      742    12776    1   END VXT$OBJECT;

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:53   
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$OBJECT.

   Procedure VXT$OBJECT requires 1451 words for executable code.
   Procedure VXT$OBJECT requires 198 words of local(AUTO) storage.

    No errors detected in file VXT$OBJECT.:E05TSI    .

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:54   

 Object Unit name= VXT$OBJECT                                 File name= VXT$OBJECT.:E05TOU
 UTS= JUL 30 '97 08:39:06.76 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2  RoData even  UTS    282    432  VXT$OBJECT
    3   Proc  even  none  1451   2653  VXT$OBJECT
    4  RoData even  none    53     65  VXT$OBJECT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        0  VXT$OBJECT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std      12 VXU$PREAD
         yes           Std       4 VXE$ERROR
         yes           Std       5 VXD$B2C
         yes           Std       0 VXU$UNSAT
         yes           Std       0 VXT$FIMAGE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:55   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_SN                                 VX_SD_STOP$
     VX_SD                                 VX_OK                                 VX_RU_HEAD
     VX_OU_HEAD                            VX_PRIMARY_ENTDEF_GOT                 VX_SLIB_USED
     VX_ROOT$                              VX_CURR$                              VX_ERRORS
     VX_ERR_SEV                            VX_PROGRAM_BIAS                       VX_EFIELD1
     VX_EFIELD2                            VX_EFIELD3                            VX_P_ENTDEF
     VX_HEAD_INX                           VX_REF_REC_A                          VX_REF_MATCH_A
     VX_MATCH_NAME_A                       VX_SC_PASS2$                          VX_PASS2_REF
     VX_SPC                                VX_REF_EXPONENTIAL_SWITCH             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:56   


        1        1        /*M* VXT$OBJECT - processes an object unit for pass 2.    */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DMR,PLM=6,IND=4,SDI=2,CTI=8,DCI=4,CSU=2,ECU=2,ENI=4,
        8        8              THI=0,DTI=0,IAD=0,CCC                          */
        9        9        VXT$OBJECT: PROC;

      9  3 000000   000000 700200 xent  VXT$OBJECT   TSX0  ! X66_AUTO_0
         3 000001   000306 000000                    ZERO    198,0

       10       10
       11       11        %INCLUDE VX_INC_C;
       12    10727        %VX$NODE;

             10739    1   /*******************************************************************************
             10740    1   *                                                                              *
             10741    1   *                          VX$NODE                                                *
             10742    1   *                                                                              *
             10743    1   *******************************************************************************/

             10759    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10760    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10761    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10762    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10763    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10764    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10765                              to list of file nodes for this node            */
             10766    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10767    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10767                  /* Head pointer to shared library list */
             10768    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10768                  /* Head pointer to list of shared libraries
             10769                                          which have been mapped to included libraries */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:57   
             10770    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10771    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10772    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10773    1         2 ADDR_START REDEF  ADDR_START_A,
             10774    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10775    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10776    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10777    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10778    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10779    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10780    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10781    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10782    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10783    1         2 START_PAGE# REDEF START_PAGE#_A,
             10784    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10785    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10786    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10787    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10788    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10789    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10790    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10791    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10792    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10792                  /* Starting pointer for common sections for this node */
             10793    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10793                  /* Stopping pointer for common sections for this node */
             10794    1         2 L_START,
             10795    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10796    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10797    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10798    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10799    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10800    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10801    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10802    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10803    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10804    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:58   
             10805    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10806    1         2 L_STOP,
             10807    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10808    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10809    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10810    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10811    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10812    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10813    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10814    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10815    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10816    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10817    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10818    1         2 L_SIZE,
             10819    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10820    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10821    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10822    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10823    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10824    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10825    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10826    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10827    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10828    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10829    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10830    1         2 L_PREV_SIZE,
             10831    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10832    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10833    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10834    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10835    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10836    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10837    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10838    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10839    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10840    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10841    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:59   
             10842    1         2 BIT_MAP                ALIGNED,
             10843    1           3 DATA                  ALIGNED,
             10844    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10845    1           3 RPROC                 ALIGNED,
             10846    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10847    1           3 ROS                   ALIGNED,
             10848    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10849    1         2 L_SC_START,
             10850    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10851    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10852    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10853    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10854    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10855    1         2 L_SC_STOP,
             10856    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10857    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10858    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10859    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10860    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10861    1         2 PROMOTE_HEAD,
             10862    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10863    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10864    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10865    1         2 PROMOTE_TAIL,
             10866    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10867    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10868    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10869    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10870    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10871    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10872    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10873    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       13    10877        %VXD$TMPLT( EDEF=YES, SDEF=YES, SEGDEF=YES );

             10890    1   /*******************************************************************************
             10891    1   *                                                                              *
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:60   
             10892    1   *                          VXD$TMPLT                                              *
             10893    1   *                                                                              *
             10894    1   *******************************************************************************/

             10898        /*
             10899                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             10900                  ENTDEFs, SYMDEFs and SEGDEFs.
             10901        */
             10903    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             10904    1         2 VALUE SBIN UNAL,
             10905                /*K*  VALUE is the value if this entry is a constant.  */
             10906    1         2 AD REDEF VALUE,
             10907                /*K*  AD is the address if this entry is not constant.  */
             10908    1           3 LFLAGS UNAL,
             10909                  /*K*  LFLAGS is the field reserved for loader to flag load
             10910                        time attributes of the definition and must be zero
             10911                        in the object unit. */
             10912    1             4 SOURCE UBIN(3) UNAL,
             10913                    /*K*  SOURCE - Source of this DEF */
             10914    1             4 DEFINED BIT(1) UNAL,
             10915                    /*K*  DEFINED - Set if this DEF defined */
             10916    1             4 MULTIPLE BIT(1) UNAL,
             10917                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             10918    1             4 USED BIT(1) UNAL,
             10919                    /*K*  USED - Set if this DEF is used. */
             10920    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             10921                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             10922                        than 2048 (RU).  */
             10923    1           3 SECTNUM UBIN(11) UNAL,
             10924                  /*K*  SECTNUM contains an entry number into the section
             10925                        table (TYPE 3).  */
             10926    1           3 ISADDR UBIN HALF UNAL,
             10927                  /*K*  ISADDR - Is Address (RU)  */
             10928    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             10929                  /*K*  OFFSET is the word offset from the origin of the section. */
             10930    1         2 NPOINTER SBIN HALF UNAL,
             10931                /*K*  NPOINTER is a word displacement into the name record
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:61   
             10932                      (TYPE 1) locating the name (of this entry). */
             10933    1         2 CONSTNT BIT(1) UNAL,
             10934                /*K*  CONSTNT is a flag bit to determine the interpretation
             10935                      of word 0.
             10936                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             10937                                    SECTNUM, and ISADDR or OFFSET.
             10938                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             10939    1         2 LFLAGS UNAL,
             10940                /*K*  LFLAGS is the field reserved for loader to flag load
             10941                      time attributes and must be zero in the object unit. */
             10942    1           3 MULTIPLE BIT(1) UNAL,
             10943                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             10944    1           3 USED BIT(1) UNAL,
             10945                  /*K*  USED - Set if this DEF is used. */
             10946    1           3 SOURCE UBIN(4) UNAL,
             10947                  /*K*  SOURCE - Source of this DEF */
             10948    1           3 IS_DCB BIT(1) UNAL,
             10949                  /*K* IS_DCB - Set if this is a DCB */
             10950    1           3 * BIT(10) UNAL,
             10951                  /*K*  * is reserved for future use and must be zero.  */
             10952    1         2 PROTECTION REDEF LFLAGS,
             10953                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             10954    1           3 TYPE UBIN(5) UNAL,
             10955                  /*K*  TYPE is the Protection type.  */
             10956    1           3 * UBIN(12) UNAL;
             10957                  /*K*  * is reserved for future use and must be zero.  */

             10968    1   /*******************************************************************************
             10969    1   *                                                                              *
             10970    1   *                          B$EDEF                                                 *
             10971    1   *                                                                              *
             10972    1   *******************************************************************************/

             10977    1   DCL 1 B$EDEF BASED ALIGNED,
             10978    1         2 LFLAGS UNAL,
             10979                /*K*  LFLAGS is the field reserved for loader to flag load
             10980                      time attributes of the definition and must be zero
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:62   
             10981                      in the object unit. */
             10982    1           3 SOURCE UBIN(3) UNAL,
             10983                  /*K*  SOURCE - Source of this ENTDEF */
             10984    1           3 DEFINED BIT(1)  UNAL,
             10985                  /*K*  DEFINED - Set if this ENTDEF defined */
             10986    1           3 MULTIPLE BIT(1) UNAL,
             10987                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             10988    1           3 USED BIT(1) UNAL,
             10989                  /*K*  USED - Set if this ENTDEF is used. */
             10990    1           3 * BIT(2) UNAL,
             10991                  /*K*  * - Unused and must be zero. */
             10992    1           3 FAULTAGS BIT(1) UNAL,
             10993                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             10994    1         2 OU UNAL,
             10995    1           3 SECTNUM UBIN BYTE UNAL,
             10996                  /*K*  SECTNUM contains an entry number into the section
             10997                        table (TYPE 3).  */
             10998    1           3 OFFSET UBIN HALF UNAL,
             10999                  /*K*  OFFSET is the word offset from the origin of the section. */
             11000    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             11001                /*K*  ISADDR - Is Address (RU)  */
             11002    1         2 NPOINTER SBIN HALF UNAL,
             11003                /*K*  NPOINTER is a word displacement into the name record
             11004                      (TYPE 1) locating the name (of this entry). */
             11005    1         2 PRI BIT(1) UNAL,
             11006                /*K*  PRI is a one-bit flag denoting primary entry
             11007                      definition.
             11008                         PRI = 1, primary name (object unit name)
             11009                             = 0, not primary name                 */
             11010    1         2 ALT BIT(1) UNAL,
             11011                /*K*  ALT is a one-bit flag denoting permissible alternate
             11012                      return.
             11013                         ALT = 1, alternate return allowed
             11014                             = 0, alternate return not allowed        */
             11015    1         2 CHECK BIT(1) UNAL,
             11016                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             11017                      check and alternate return specification check.
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:63   
             11018                         CHECK = 0, do not check for matching
             11019                                    arguments/parameters and alternate
             11020                                    return specification check.
             11021                               = 1, check for matching arguments/parameters
             11022                                    and alternate return specification.  */
             11023    1         2 CST UBIN(4) UNAL,
             11024                /*K*  CST is a 4-bit field denoting calling sequence type.
             11025                         CST =  0, Standard CP-6 Callable Procedure
             11026                         CST =  1, Nonstandard Call Type
             11027                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11028                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11029                         CST =  4, Standard CP-6 Function Procedure; a
             11030                                   variable table entry will be present to
             11031                                   define the attributes of the function
             11032                         CST =  5, Same as 0, except USE, AVOID, or
             11033                                   MATERIALIZE attributes specified
             11034                         CST =  7, Same as 2, except USE, AVOID, or
             11035                                   MATERIALIZE attributes specified
             11036                         CST =  8, Same as 3, except USE, AVOID, or
             11037                                   MATERIALIZE attributes specified
             11038                         CST =  9, Same as 4, except USE, AVOID, or
             11039                                   MATERIALIZE attributes specified
             11040                         CST = 13, GCOS domain, save
             11041                         CST = 14, GCOS domain, no save
             11042                         CST = 15, Non-Callable Procedure.          */
             11043    1         2 NPARAM UBIN(11) UNAL;
             11044                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11056    1   /*******************************************************************************
             11057    1   *                                                                              *
             11058    1   *                          B$SDEF                                                 *
             11059    1   *                                                                              *
             11060    1   *******************************************************************************/

             11065    1   DCL 1 B$SDEF BASED ALIGNED,
             11066    1         2 VALUE SBIN UNAL,
             11067                /*K*  VALUE is the value of the constant segment definition
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:64   
             11068                      pointer if CONSTNT=1.  */
             11069    1         2 AD REDEF VALUE,
             11070                /*K*  AD - Address (not constant)  */
             11071    1           3 LFLAGS UNAL,
             11072                  /*K*  LFLAGS is the field reserved for loader to flag load
             11073                        time attributes of the definition and must be zero
             11074                        in object unit.  */
             11075    1             4 SOURCE UBIN(3) UNAL,
             11076                    /*K*  SOURCE - Source of this SYMDEF */
             11077    1             4 DEFINED BIT(1) UNAL,
             11078                    /*K*  DEFINED - Set if this SYMDEF is defined */
             11079    1             4 MULTIPLE BIT(1) UNAL,
             11080                    /*K*  MULTIPLE - Set if this SYMDEF is multiply defined. */
             11081    1             4 USED BIT(1) UNAL,
             11082                    /*K*  USED - Set if this SYMDEF is used */
             11083    1             4 * BIT(3) UNAL,
             11084                    /*K*  * - Unused */
             11085    1           3 OU UNAL,
             11086    1             4 SECTNUM UBIN BYTE UNAL,
             11087                    /*K*  SECTNUM contains I, where I is an entry number in the
             11088                          section table (TYPE 3).  */
             11089    1             4 OFFSET UBIN HALF UNAL,
             11090                   /*K* OFFSET is the offset from the origin of section I (See SECTNUM). */
             11091    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11092                  /*K*  ISADDR - IS Address (RU)  */
             11093    1         2 NPOINTER SBIN HALF UNAL,
             11094                /*K*  NPOINTER is the word displacement into the record of
             11095                      names (TYPE 1) locating the SYMDEF name. */
             11096    1         2 CONSTNT BIT(1) UNAL,
             11097                /*K*  CONSTNT is a flag bit to determine the interpretation
             11098                      of word 0.
             11099                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11100                                    SECTNUM, and ISADDR or OFFSET.
             11101                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11102    1         2 LFLAGS UNAL,
             11103                /*K*  LFLAGS is the field reserved for loader to flag load
             11104                      time attributes and must be zero in the object unit. */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:65   
             11105    1           3 MULTIPLE BIT(1) UNAL,
             11106                  /*K*  MULTIPLE - Set if this SYMDEF is multiply defined. */
             11107    1           3 USED BIT(1) UNAL,
             11108                  /*K*  USED - Set if this SYMDEF is used. */
             11109    1           3 SOURCE UBIN(4) UNAL,
             11110                  /*K*  SOURCE - Source of this SYMDEF */
             11111    1           3 IS_DCB BIT(1) UNAL,
             11112                  /*K* IS_DCB - Set if this is a DCB */
             11113    1           3 * BIT(4) UNAL,
             11114                  /*K*  * - Unused */
             11115    1         2 * BIT(6) UNAL;
             11116                /*K*  * is reserved for future use and must be zero. */

             11128    1   /*******************************************************************************
             11129    1   *                                                                              *
             11130    1   *                          B$SEGDEF                                               *
             11131    1   *                                                                              *
             11132    1   *******************************************************************************/

             11137    1   DCL 1 B$SEGDEF BASED ALIGNED,
             11138    1         2 VALUE SBIN UNAL,
             11139                /*K*  VALUE is the value of the constant segment definition
             11140                      pointer if CONSTANT=1.  */
             11141    1         2 S REDEF VALUE,
             11142    1           3 * UBIN(24) UNAL,
             11143    1           3 SEGID UBIN(12) UNAL,
             11144                  /*K*  SEGID - Segid of constant value */
             11145    1         2 AD REDEF VALUE,
             11146                /*K*  AD - Address (not constant )  */
             11147    1           3 LFLAGS UNAL,
             11148                  /*K*  LFLAGS is the field reserved for loader to flag load
             11149                        time attributes of the definition and must be zero
             11150                        in object unit.  */
             11151    1             4 SOURCE UBIN(3) UNAL,
             11152                    /*K*  SOURCE - Source of this SEGDEF */
             11153    1             4 DEFINED BIT(1) UNAL,
             11154                    /*K*  DEFINED - Set if this SEGDEF is defined */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:66   
             11155    1             4 MULTIPLE BIT(1) UNAL,
             11156                    /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11157    1             4 USED BIT(1) UNAL,
             11158                    /*K*  USED - Set if this SEGDEF is used */
             11159    1             4 * BIT(3) UNAL,
             11160                    /*K*  * is reserved for future use and must be zero. */
             11161    1           3 OU UNAL,
             11162    1             4 SECTNUM UBIN BYTE UNAL,
             11163                    /*K*  SECTNUM is the Section number.  */
             11164    1             4 OFFSET UBIN HALF UNAL,
             11165                    /*K*  OFFSET is the offset within section. */
             11166    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11167                  /*K*  ISADDR - IS Address (RU)  */
             11168    1         2 NPOINTER SBIN HALF UNAL,
             11169                /*K*  NPOINTER is the word displacement into DEFNAMES record. */
             11170    1         2 CONSTNT BIT(1) UNAL,
             11171                /*K*  CONSTNT is a flag bit to determine the interpretation
             11172                      of word 0.
             11173                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11174                                    SECTNUM, and ISADDR or OFFSET.
             11175                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11176    1         2 LFLAGS UNAL,
             11177                /*K*  LFLAGS is the field reserved for loader to flag load time
             11178                      attributes and must be zero in the object unit.  */
             11179    1           3 MULTIPLE BIT(1) UNAL,
             11180                  /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11181    1           3 USED BIT(1) UNAL,
             11182                  /*K*  USED - Set if this SEGDEF is used */
             11183    1           3 SOURCE UBIN(4) UNAL,
             11184                  /*K*  SOURCE - Source of this SEGDEF */
             11185    1           3 * BIT(11) UNAL,
             11186                  /*K*  * is reserved for future use and must be zero. */
             11187    1         2 SEG REDEF LFLAGS UNAL,          /* Not constant SEGDEF (RU) */
             11188    1           3 TYPE UBIN(5) UNAL,            /* Segment protection type (RU) */
             11189    1           3 SEGID UBIN(12) UNAL;          /* Segid of segment (RU) */
       14    11193        %VXR$TMPLT( EREF=YES );

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:67   
             11206    1   /*******************************************************************************
             11207    1   *                                                                              *
             11208    1   *                          VXR$TMPLT                                              *
             11209    1   *                                                                              *
             11210    1   *******************************************************************************/

             11215    1   DCL 1 VXR$TMPLT BASED ALIGNED,
             11216    1         2 NPOINTER SBIN HALF UNAL,
             11217                /*K*  NPOINTER is the word index to the symbol name.  */
             11218    1         2 SREF BIT(1) UNAL,
             11219                /*K*  SREF is set is this is a secondary reference.  */
             11220    1         2 READ_ONLY BIT(1) UNAL,
             11221    1         2 GOT BIT(1) UNAL,
             11222                /*K*  GOT is set if got the OU name displacement.  */
             11223    1         2 STATE REDEF GOT BIT(1) UNAL,
             11224    1         2 OPOINTER UBIN(15) UNAL;
             11225                /*K*  OPOINTER is the word index to the OU name.  */

             11236    1   /*******************************************************************************
             11237    1   *                                                                              *
             11238    1   *                          B$EREF                                                 *
             11239    1   *                                                                              *
             11240    1   *******************************************************************************/

             11245    1   DCL 1 B$EREF BASED ALIGNED,
             11246    1         2 NPOINTER SBIN HALF UNAL,
             11247                /*K*  NPOINTER is the word displacement into the record
             11248                      of REF names (TYPE 2) locating the ENTREF name.   */
             11249    1         2 SREF BIT(1),
             11250                /*K*  SREF indicates that the reference is a secondary
             11251                      reference and should not cause loading of a library routine. */
             11252    1         2 ALT BIT(1),
             11253                /*K*  ALT is a one-bit flag denoting permissible alternate return.
             11254                         ALT = 1, alternate return allowed
             11255                             = 0, alternate return not allowed    */
             11256    1         2 CHECK BIT(1),
             11257                /*K*  CHECK is a one-bit flag denoting arguments/parameter check
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:68   
             11258                      and alternate return specification check.
             11259                         CHECK = 0, do not check for matching
             11260                                    arguments/parameters and
             11261                                    alternate return specification.
             11262                               = 1, check for matching arguments/parameters
             11263                                    and alternate return specification.  */
             11264    1         2 CST UBIN(4) UNAL,
             11265                /*K*  CST is a 4-bit field denoting calling sequence type.
             11266                         CST =  0, Standard CP-6 Callable Procedure.
             11267                         CST =  1, Nonstandard Call Type.
             11268                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11269                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11270                         CST =  4, Standard CP-6 Function Procedure; a
             11271                                   variable table entry will be present to
             11272                                   define the attributes of the function.
             11273                         CST =  5, Same as 0, except USE, AVOID, or
             11274                                   MATERIALIZE attributes specified.
             11275                         CST =  7, Same as 2, except USE, AVOID, or
             11276                                   MATERIALIZE attributes specified.
             11277                         CST =  8, Same as 3, except USE, AVOID, or
             11278                                   MATERIALIZE attributes specified.
             11279                         CST =  9, Same as 4, except USE, AVOID, or
             11280                                   MATERIALIZE attributes specified.
             11281                         CST = 13, GCOS domain, save
             11282                         CST = 14, GCOS domain, no save
             11283                         CST = 15, Non-Callable Procedure.       */
             11284    1         2 NPARAM UBIN(11) UNAL;
             11285                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11304    1   /*******************************************************************************
             11305    1   *                                                                              *
             11306    1   *                          VXR$SAT                                                *
             11307    1   *                                                                              *
             11308    1   *******************************************************************************/

             11312    1   DCL 1 VXR$SAT                 ALIGNED   BASED,
             11313    1         2 VALUE        UBIN(36)  ALIGNED,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:69   
             11314    1         2 SEG   REDEF  VALUE,
             11315    1           3 OFFSET     UBIN(18)  UNAL,
             11316    1           3 *          BIT(6)    UNAL,
             11317    1           3 SEGID      UBIN(12)  UNAL,
             11318    1         2 BELOW        BIT(1)    UNAL,
             11319    1         2 *            BIT(17)   UNAL,
             11320    1         2 NODE#        UBIN(18)  UNAL;
       15    11322        %VX$SC;

             11335    1   /*******************************************************************************
             11336    1   *                                                                              *
             11337    1   *                          VX$SC                                                 *
             11338    1   *                                                                              *
             11339    1   *******************************************************************************/

             11344    1   DCL 1 VX$SC BASED ALIGNED,
             11345    1         2 SEG UBIN(3) UNAL,
             11346                /*K*  SEG - The segment number of this section */
             11347    1         2 TYPE UBIN(6) UNAL,
             11348                /*K*  TYPE -
             11349                      Type code      Section type
             11350                      ---------      ------------
             11351                          0          Data control section with write access.
             11352                          1          Procedure control section.
             11353                          2          Unlabeled common, name pointer must be zero.
             11354                          3          Labeled common, with mandatory name pointer.
             11355                                     This is for labeled common which must be
             11356                                     in the root.
             11357                          4          Labeled common, with mandatory name pointer.
             11358                                     This is for labeled common which need not
             11359                                     be in the root.
             11360                          5          DCB, word 1 is name pointer.
             11361                          6          Data control section with read only access,
             11362                                     word 1 = 0 or name pointer.      */
             11363    1         2 EMPTY BIT(1) UNAL,
             11364                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11365                      section is of size zero.  */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:70   
             11366    1         2 ATTR UNAL,
             11367    1           3 INT  UBIN(2) UNAL,
             11368                  /*K*  INT is the Section initialization.  */
             11369    1           3 SEGMENT BIT(1) UNAL,
             11370                  /*K* SEGMENT is set if the Section is defined in a data
             11371                       segment.  */
             11372    1           3 ALL BIT(1) UNAL,
             11373                  /*K*  ALL is set if the Section is allocated.  */
             11374    1           3 PRE_DCB BIT(1) UNAL,
             11375                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11376    1           3 MES_INIT BIT(1) UNAL,
             11377    1           3 ALIGN UBIN(2) UNAL,
             11378                  /*K*  ALIGN is the Section alignment.  */
             11379    1         2 ADDRESS UBIN HALF UNAL,
             11380                /*K*  ADDRESS is the address within the Instruction Segment of
             11381                      the entry point of the external procedure.  */
             11382    1         2 NAME_DISP SBIN HALF UNAL,
             11383                /*K*  NAME_DISP is the Name index.  */
             11384    1         2 SIZE UBIN HALF UNAL,
             11385                /*K*  SIZE is the size, in words, of the section.  */
             11386    1         2 NODE# UBIN HALF UNAL,
             11387                /*K*  NODE# is the Node number of section.  */
             11388    1         2 COM_LINK UBIN HALF UNAL;
             11389                /*K*  COM_LINK is used internally by linker to link common sections */

             11399    1   /*******************************************************************************
             11400    1   *                                                                              *
             11401    1   *                          VX$SECT                                                *
             11402    1   *                                                                              *
             11403    1   *******************************************************************************/

             11408    1   DCL 1 VX$SECT BASED ALIGNED,
             11409    1         2 TYPE UBIN BYTE UNAL,
             11410                /*K*  TYPE -
             11411                      Type code      Section type
             11412                      ---------      ------------
             11413                          0          Data control section with write access.
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:71   
             11414                          1          Procedure control section.
             11415                          2          Unlabeled common, name pointer must be zero.
             11416                          3          Labeled common, with mandatory name pointer.
             11417                                     This is for labeled common which must be
             11418                                     in the root.
             11419                          4          Labeled common, with mandatory name pointer.
             11420                                     This is for labeled common which need not
             11421                                     be in the root.
             11422                          5          DCB, word 1 is name pointer.
             11423                          6          Data control section with read only access,
             11424                                     word 1 = 0 or name pointer.
             11425                          7          Constant labeled common, with mandatory name pointer.
             11426                                     This is for labeled common which must be
             11427                                     in the root.
             11428                          8          Constant labeled common, with mandatory name pointer.
             11429                                     This is for labeled common which need not
             11430                                     be in the root.                        */
             11431    1         2 * BIT(1),
             11432                /*K*  * is reserved for future use and must be zero. */
             11433    1         2 INITZERO BIT(1),
             11434                /*K*  INITZERO - if 1, initialize with zero.  */
             11435    1         2 INITUTS BIT(1),
             11436                /*K*  INITUTS - if 1, initialize with UTS.  */
             11437    1         2 SEGMENT BIT(1),
             11438                /*K*  SEGMENT - if 1, specifies that this section is
             11439                                to be placed in the segment specified by
             11440                                SEG_NPOINTER.  */
             11441    1         2 * BIT(3),
             11442                /*K*  * is reserved for future use and must be zero. */
             11443    1         2 BOUND UBIN(2) UNAL,
             11444                /*K*  BOUND - bits 6-7 - defines starting location.
             11445                              00 - starts on even word
             11446                              01 - starts on odd word
             11447                              10 - starts on multiple of 8
             11448                              11 - starts on page boundary     */
             11449    1         2 SIZE UBIN HALF UNAL,
             11450                /*K*  SIZE is the size, in words, of the section.  */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:72   
             11451    1         2 NPOINTER SBIN HALF UNAL,
             11452                /*K*  NPOINTER is the word displacement into the name record
             11453                      (TYPE 1) locating the name of this section.  If the
             11454                      field is negative, the section has no name.  */
             11455    1         2 MBZ UBIN HALF UNAL,
             11456                /*K*  MBZ is reserved for future expansion and must be zero. */
             11457    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11458                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11459                      Section.  The name must be a valid segment name
             11460                      recognized by the linker.  */
             11461    1         2 G66 REDEF MBZ,
             11462                /*K*  G66 is not used on CP-6. */
             11463    1           3 * BIT(9),
             11464    1           3 NSAB BIT(9);
       16    11467        %VX$LLIST_SC;

             11479    1   /*******************************************************************************
             11480    1   *                                                                              *
             11481    1   *                          VX$LLIST_SC                                            *
             11482    1   *                                                                              *
             11483    1   *******************************************************************************/

             11488    1   DCL 1 NAME               BASED     ALIGNED,
             11489    1         2 LINK$             PTR,
             11490    1         2 BASE$             PTR,
             11491    1         2 COUNT             UBIN(36);
       17    11494        %TMPLT;

             11506    1   /*******************************************************************************
             11507    1   *                                                                              *
             11508    1   *                          TMPLT                                                 *
             11509    1   *                                                                              *
             11510    1   *******************************************************************************/

             11515    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11516    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11517    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:73   
             11518    1         2 W       REDEF     A,            /* By name                            */
             11519    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11520    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       18    11523        %SET LISTMAC='1'B;
       19    11524        %SET LISTSUB='1'B;
       20    11525        %SET LISTEXP='1'B;
       21    11526        %BANNER(ARG=SUBS);
             11527        %LSET LISTDIR='0'B;

             11534    1   /*******************************************************************************
             11535    1   *                                                                              *
             11536    1   *                          SUBS                                                 *
             11537    1   *                                                                              *
             11538    1   *******************************************************************************/

       22    11542        %B$RECORDSUBS;
             11543        %EQU TYPHEAD=0 ;
             11544        %EQU TYPDNAM=1 ;
             11545        %EQU TYPRNAM=2 ;
             11546        %EQU TYPSECT=3 ;
             11547        %EQU TYPEDEF=4 ;
             11548        %EQU TYPEREF=5 ;
             11549        %EQU TYPSDEF=6 ;
             11550        %EQU TYPSREF=7 ;
             11551        %EQU TYPSEGDEF=8 ;
             11552        %EQU TYPSEGREF=9 ;
             11553        %EQU TYPPROG=10 ;
             11554        %EQU SUBTYPPROG=0 ;
             11555        %EQU SUBTYPREL=1 ;
             11556        %EQU TYPLOGBLK=11 ;
             11557        %EQU TYPINTNTRY=12 ;
             11558        %EQU TYPEXST=13 ;
             11559        %EQU TYPVREBL=14 ;
             11560        %EQU TYPDBGNAM=15 ;
             11561        %EQU TYPLV1LB=16 ;
             11562        %EQU TYPLV1=17 ;
             11563        %EQU TYPDATASEG=18 ;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:74   
             11564        %EQU TYPRUM=20 ;
             11565        %EQU TYPBIRTH=21 ;
             11566        %EQU TYPPLOVER=22 ;
             11567        %EQU TYPCOMPID=23 ;
             11568        %EQU TYPROS=30 ;
       23    11570        %B$SECTIONSUBS;
             11571        %EQU DATASECTION=0 ;
             11572        %EQU CODESECTION=1 ;
             11573        %EQU UCOMSECTION=2 ;
             11574        %EQU RLCOMSECTION=3 ;
             11575        %EQU LCOMSECTION=4 ;
             11576        %EQU DCBSECTION=5 ;
             11577        %EQU ROSECTION=6 ;
             11578        %EQU RORLCOMSECTION=7 ;
             11579        %EQU ROLCOMSECTION=8 ;
             11580        %EQU EVENBOUNDSECTION=0 ;
             11581        %EQU ODDBOUNDSECTION=1 ;
             11582        %EQU EIGHTBOUNDSECTION=2 ;
             11583        %EQU PAGEBOUNDSECTION=3 ;
       24    11585        %SUB_CST;
             11586        %EQU STD#=0 ;                           /* Standard CP6 callable procedure */
             11587        %EQU NSTD#=1 ;                          /* Non-standard Call Type  */
             11588        %EQU MAIN#=2 ;                /* Standard CP6 Procedure with MAIN attribute */
             11589        %EQU ASYNC#=3 ;               /* Standard CP6 Procedure with ASYNC attribute */
             11590        %EQU FUNC#=4 ;                /* Standard CP6 Function procedure; a variable */
             11591                                      /* table entry will be present to define the   */
             11592                                      /* attributes of the function.                 */
             11593        %EQU XSTD#=5 ;           /* Same as 0, except AVOID or MATERIALIZE specified */
             11594        %EQU XMAIN#=7 ;          /* Same as 2, except AVOID or MATERIALIZE specified */
             11595        %EQU XASYNC#=8 ;         /* Same as 3, except AVOID or MATERIALIZE specified */
             11596        %EQU XFUNC#=9 ;          /* Same as 4, except AVOID or MATERIALIZE specified */
             11597        %EQU DOMSAV#=13 ;                       /* GCOS domain, save  */
             11598        %EQU DOMNOSAV#=14 ;                     /* GCOS domain, no save  */
             11599        %EQU NOTPROC#=15 ;                      /* Non-callable procedure  */
       25    11601        %SUB_LINKFLAGS;
             11602        %EQU SOURCE_OBJECT#=0 ;
             11603        %EQU SOURCE_SLIB#=1 ;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:75   
             11604        %EQU SOURCE_ALIB#=2 ;
             11605        %EQU SOURCE_ULIB#=3 ;
             11606        %EQU SOURCE_RLIB#=4 ;
             11607        %EQU SOURCE_REMOVED#=5 ;
             11608        %EQU SOURCE_LINKER#=6 ;
       26    11610        %BANNER(ARG=DNAME);
             11611        %LSET LISTDIR='0'B;

             11618    1   /*******************************************************************************
             11619    1   *                                                                              *
             11620    1   *                          DNAME                                                 *
             11621    1   *                                                                              *
             11622    1   *******************************************************************************/

       27    11626        %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11627            %LSET STR='BASED        ';
             11628            %IF
             11629                '0'B;
             11631            %ELSE;
             11632                %LSET INIT=/*;
             11633            %ENDIF;
             11634    1   DCL 1 B$DNAME BASED ALIGNED,
             11635    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11636                /*K*  COUNT is the number of characters in the name */
             11637            %IF
             11638                '0'B;
             11641            %ELSE;
             11642    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11643            %ENDIF;
       28    11645        %B;
             11646        %LSET LISTDIR='0'B;

             11653    1   /*******************************************************************************
             11654    1   *                                                                              *
             11655    1   *                          BIT                                                 *
             11656    1   *                                                                              *
             11657    1   *******************************************************************************/
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:76   

       29    11661    1   DCL WILL_FIT        BIT(1)    ALIGNED   AUTO;
       30    11662        %E;
             11663        %LSET LISTDIR='0'B;

             11670    1   /*******************************************************************************
             11671    1   *                                                                              *
             11672    1   *                          ENTRY                                                 *
             11673    1   *                                                                              *
             11674    1   *******************************************************************************/

       31    11678        %ENTRIES;
             11679    1   DCL VXE$ERROR       ENTRY(4);
             11680    1   DCL VXE$ERR         ENTRY(3);
             11681    1   DCL VXE$MERC        ENTRY;
             11682    1   DCL VXE$ERRMSG      ENTRY(3);
             11683    1   DCL VXR$READ        ENTRY( 3 );
             11684    1   DCL VXW$WRITE       ENTRY( 3 );
             11685    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11686    1   DCL VXD$B2C         ENTRY( 5 );
             11687    1   DCL VXD$C2B         ENTRY( 3 );
             11688    1   DCL VXA$GET         ENTRY( 3 );
             11689    1   DCL VXF$FREE        ENTRY( 3 );
             11690    1   DCL VXQ$SORT        ENTRY( 7 );
             11691    1   DCL VXY$YESNO       ENTRY( 1 );
       32    11693        %ENTRIES_IO;
             11694    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11695    1   DCL VXF$CLOSE       ENTRY(3);
             11696    1   DCL VXU$PREAD       ENTRY(12);
             11697    1   DCL VXK$KEY         ENTRY(4);
             11698    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11699    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       33    11701    1   DCL VXU$UNSAT            ENTRY;
       34    11702    1   DCL VXT$FIMAGE      ENTRY;
       35    11703        %PTR;
             11704        %LSET LISTDIR='0'B;

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:77   
             11711    1   /*******************************************************************************
             11712    1   *                                                                              *
             11713    1   *                          PTR                                                 *
             11714    1   *                                                                              *
             11715    1   *******************************************************************************/

       36    11719        %POINTER;
             11720    1   DCL P$         PTR       ALIGNED AUTO;
             11721    1   DCL Q$         PTR       ALIGNED AUTO;
             11722    1   DCL R$         PTR       ALIGNED AUTO;
       37    11724    1   DCL CURR$           PTR  ALIGNED   AUTO;
       38    11725    1   DCL FOUND$          PTR  ALIGNED   AUTO;
       39    11726    1   DCL NODE$           PTR  ALIGNED   AUTO;
       40    11727    1   DCL PREV$           PTR  ALIGNED   AUTO;
       41    11728    1   DCL ALL$            PTR  ALIGNED   AUTO;
       42    11729    1   DCL WHERE$          PTR  ALIGNED   AUTO;
       43    11730    1   DCL START$          PTR  ALIGNED   AUTO;
       44    11731    1   DCL RNAME$          PTR  ALIGNED   AUTO;
       45    11732    1   DCL PN$             PTR  ALIGNED   AUTO;
       46    11733    1   DCL FIRST_START$    PTR  ALIGNED   AUTO;
       47    11734    1   DCL FIRST_STOP$     PTR  ALIGNED   AUTO;
       48    11735    1   DCL RESOLVE$        PTR  ALIGNED   AUTO;
       49    11736    1   DCL DNAME$          PTR  ALIGNED   AUTO;
       50    11737    1   DCL INSERT$         PTR  ALIGNED   AUTO;
       51    11738        %U;
             11739        %LSET LISTDIR='0'B;

             11746    1   /*******************************************************************************
             11747    1   *                                                                              *
             11748    1   *                          UBIN                                                 *
             11749    1   *                                                                              *
             11750    1   *******************************************************************************/

       52    11754        %INDEX;
             11755    1   DCL I          UBIN(36) ALIGNED AUTO;
             11756    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11757    1   DCL J          UBIN(36) ALIGNED AUTO;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:78   
             11758    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11759    1   DCL K          UBIN(36) ALIGNED AUTO;
             11760    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11761    1   DCL L          UBIN(36) ALIGNED AUTO;
             11762    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       53    11764    1   DCL REF_REC         UBIN(36)  ALIGNED   AUTO;
       54    11765    1   DCL DEF_REC         UBIN(36)  ALIGNED   AUTO;
       55    11766    1   DCL ALL_TYPE        UBIN(36)  ALIGNED   AUTO;
       56    11767    1   DCL SOURCE          UBIN(36)  ALIGNED   AUTO;
       57    11768    1   DCL HEAD_INX        UBIN(36)  ALIGNED   AUTO;
       58    11769    1   DCL NAME_INX        UBIN(36)  ALIGNED   AUTO;
       59    11770    1   DCL NAME_SIZEW      UBIN(36)  ALIGNED   AUTO;
       60    11771    1   DCL TSIZE           UBIN(36)  ALIGNED   AUTO;
       61    11772    1   DCL PAGE            UBIN(36)  ALIGNED   AUTO;
       62    11773    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       63    11774    1   DCL HALVE           UBIN(36)  ALIGNED   AUTO;
       64    11775    1   DCL NPAGE           UBIN(36)  ALIGNED   AUTO;
       65    11776    1   DCL TSIZE_READ      UBIN(36)  ALIGNED   AUTO;
       66    11777    1   DCL CST_D           UBIN(36)  ALIGNED   AUTO;
       67    11778    1   DCL CST_R           UBIN(36)  ALIGNED   AUTO;
       68    11779    1   DCL NP_D            UBIN(36)  ALIGNED   AUTO;
       69    11780    1   DCL NP_R            UBIN(36)  ALIGNED   AUTO;
       70    11781    1   DCL I1            UBIN(36)  ALIGNED   AUTO;
       71    11782    1   DCL SAVE_NAME_DISP  UBIN(36)  ALIGNED   AUTO;
       72    11783    1   DCL NAME_X        UBIN(36)  ALIGNED   AUTO;
       73    11784        /**/
       74    11785    1   DCL 1 TEMP ALIGNED AUTO,
       75    11786    1         2 COUNT UBIN(18) UNAL,
       76    11787    1         2 CHARS CHAR(514) UNAL;
       77    11788    1   DCL CST_TYPE(0:15)  CHAR(50)  ALIGNED   CONSTANT  INIT(
       78    11789    1   'STANDARD PROCEDURE',
       79    11790    1   'NON-STANDARD PROCEDURE',
       80    11791    1   'STANDARD/MAIN PROCEDURE',
       81    11792    1   'STANDARD/ASYNC PROCEDURE',
       82    11793    1   'STANDARD/FUNCTION PROCEDURE',
       83    11794    1   'STANDARD(USE,AVOID,MATERIALIZE) PROCEDURE',
       84    11795    1   'UNDEFINED',
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:79   
       85    11796    1   'STANDARD/MAIN(USE,AVOID,MATERIALIZE) PROCEDURE',
       86    11797    1   'STANDARD/ASYNC(USE,AVOID,MATERIALIZE) PROCEDURE',
       87    11798    1   'STANDARD/FUNCTION(USE,AVOID,MATERIALIZE) PROCEDURE',
       88    11799    1   'UNDEFINED',
       89    11800    1   'UNDEFINED',
       90    11801    1   'UNDEFINED',
       91    11802    1   'UNDEFINED',
       92    11803    1   'UNDEFINED',
       93    11804    1   'NON-CALLABLE PROCEDURE');
       94    11805    1   DCL CST_TYPE_COUNT(0:15) UBIN(36)  ALIGNED   CONSTANT  INIT(
       95    11806    1   18,
       96    11807    1   22,
       97    11808    1   23,
       98    11809    1   24,
       99    11810    1   27,
      100    11811    1   41,
      101    11812    1   9,
      102    11813    1   46,
      103    11814    1   47,
      104    11815    1   50,
      105    11816    1   9,
      106    11817    1   9,
      107    11818    1   9,
      108    11819    1   9,
      109    11820    1   9,
      110    11821    1   22);
      111    11822    1   DCL 1 DOES_NOT_ALLOW ALIGNED CONSTANT,
      112    11823    1         2 COUNT UBIN(9) UNAL INIT(14),
      113    11824    1         2 CHARS CHAR(0) UNAL INIT('DOES NOT ALLOW');
      114    11825    1   DCL 1 ALLOWS ALIGNED CONSTANT,
      115    11826    1         2 COUNT UBIN(9) UNAL INIT(6),
      116    11827    1         2 CHARS CHAR(0) UNAL INIT('ALLOWS');
      117    11828    1   DCL 1 DATA_DEF ALIGNED CONSTANT,
      118    11829    1         2 COUNT UBIN BYTE UNAL INIT(4),
      119    11830    1         2 CHARS CHAR(4) INIT('data');
      120    11831    1   DCL 1 SEG_DEF ALIGNED CONSTANT,
      121    11832    1         2 COUNT UBIN BYTE UNAL INIT(7),
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:80   
      122    11833    1         2 CHARS CHAR(7) INIT('segment');
      123    11834    1   DCL PRO_TYPE(0:8) CHAR(17) CONSTANT INIT(
      124    11835    1         'DATA',
      125    11836    1         'PROCEDURE',
      126    11837    1         'UNLABEL COMMON',
      127    11838    1         'LABEL COMMON',
      128    11839    1         'ROOT LABEL COMMON',
      129    11840    1         'DCB',
      130    11841    1            'READ ONLY',
      131    11842    1            'ROOT RO COMMON',
      132    11843    1            'RO COMMON');
      133    11844    1   DCL PRO_TYPE_COUNT(0:8) UBIN CONSTANT INIT(4,9,14,12,17,3,9,14,9);
      134    11845        %FILE;
             11846    1   DCL 1 F$NAME_                 BASED,
             11847    1         2 COUNT             UBIN( 9) UNAL,
             11848    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11849    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11850    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11851    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11852    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
      135    11854        %BIN_SEARCH_TEMPS(
      136    11855                   LOW=BIN_LOW,
      137    11856                   HIGH=BIN_HIGH,
      138    11857                   START1$=BIN_START1$,
      139    11858                   MID=BIN_MID,
      140    11859                   NTEMP$=BIN_NTEMP$);
             11860    1   DCL BIN_LOW             UBIN(36)  ALIGNED AUTO;
             11861    1   DCL BIN_HIGH            UBIN(36)  ALIGNED AUTO;
             11862    1   DCL BIN_MID             UBIN(36)  ALIGNED AUTO;
             11863    1   DCL BIN_NTEMP$          PTR        ALIGNED AUTO;
             11864    1   DCL BIN_START1$         PTR       ALIGNED AUTO;
      141    11866        %BIN_SEARCH_VARS(
      142    11867                   START$=BIN_START$,
      143    11868                   STOP$=BIN_STOP$,
      144    11869                   RESULT$=BIN_RESULT$,
      145    11870                   N$=BIN_N$,
      146    11871                   MATCH$=BIN_MATCH$,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:81   
      147    11872                   NAME_DISP=BIN_NAME_DISP,
      148    11873                   SIZE=BIN_SIZE);
             11874    1   DCL BIN_START$          PTR  ALIGNED   AUTO;
             11875    1   DCL BIN_STOP$           PTR  ALIGNED   AUTO;
             11876    1   DCL BIN_RESULT$         PTR  ALIGNED   AUTO;
             11877    1   DCL BIN_N$              PTR  ALIGNED   AUTO;
             11878    1   DCL BIN_MATCH$          PTR       ALIGNED   AUTO;
             11879    1   DCL BIN_NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             11880    1   DCL BIN_SIZE            UBIN(36)  ALIGNED   AUTO;
      149    11882        %PLIST;
      150    11883        %EJECT;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:82   
      151    11884    1         WILL_FIT = '0'B/*@NO_B*/;

  11884  3 000002   200003 450100                    STZ     WILL_FIT,,AUTO

      152    11885        /* Look up the primary entdef */
      153    11886    1         BIN_START$ = VX_CURR$ -> VX$NODE.L_START.ED$;

  11886  3 000003   000000 470400 xsym               LDP0    VX_CURR$
         3 000004   000034 236100                    LDQ     28,,PR0
         3 000005   200263 756100                    STQ     BIN_START$,,AUTO

      154    11887    1         BIN_STOP$ = VX_CURR$ -> VX$NODE.L_STOP.ED$;

  11887  3 000006   000046 236100                    LDQ     38,,PR0
         3 000007   200264 756100                    STQ     BIN_STOP$,,AUTO

      155    11888    1         BIN_N$ = VX_CURR$ -> VX$NODE.L_START.DN$;

  11888  3 000010   000031 236100                    LDQ     25,,PR0
         3 000011   200266 756100                    STQ     BIN_N$,,AUTO

      156    11889    1         DNAME$ = BIN_N$;

  11889  3 000012   200023 756100                    STQ     DNAME$,,AUTO

      157    11890    1         TEMP.COUNT = VX_OK.OUNAME.COUNT;

  11890  3 000013   000013 236000 xsym               LDQ     VX_OK+11
         3 000014   000033 772000                    QRL     27
         3 000015   000000 620006                    EAX0    0,QL
         3 000016   200055 740100                    STX0    TEMP,,AUTO

      158    11891    1         TEMP.CHARS = VX_OK.OUNAME.CHARS;

  11891  3 000017   040100 100400                    MLR     fill='040'O
         3 000020   000013 200037 xsym               ADSC9   VX_OK+11                 cn=1,n=31
         3 000021   200055 401002                    ADSC9   TEMP,,AUTO               cn=2,n=514
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:83   

      159    11892    1         PN$ = ADDR( TEMP );

  11892  3 000022   200055 631500                    EPPR1   TEMP,,AUTO
         3 000023   200017 451500                    STP1    PN$,,AUTO

      160    11893    1         SI = -2;

  11893  3 000024   000002 335007                    LCA     2,DL
         3 000025   200025 755100                    STA     I,,AUTO

  11893  3 000026                       FIND_PRIMAR* null
      161    11894    1   FIND_PRIMARY_ENTDEF:;
      162    11895              %BIN_SEARCH(
      163    11896              START$=BIN_START$,
      164    11897              STOP$=BIN_STOP$,
      165    11898              RESULT$=BIN_RESULT$,
      166    11899              N$=BIN_N$,
      167    11900              MATCH$=PN$,
      168    11901              NAME_DISP=2,
      169    11902              SIZE="SIZEW(VXD$TMPLT)",
      170    11903              SPLIT=BIN_SPLIT_A,
      171    11904              CHECK=BIN_CHECK_A,
      172    11905              ALTRETURN=NO_PRIMARY_ENTDEF,
      173    11906              EMPTY=NO_PRIMARY_ENTDEF);
             11908    1           IF BIN_START$ = ADDR(NIL) THEN GOTO NO_PRIMARY_ENTDEF;

  11908  3 000026   200263 236100                    LDQ     BIN_START$,,AUTO
         3 000027   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000030   000170 600000 3                  TZE     NO_PRIMARY_ENTDEF

             11909    2           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;

  11909  3 000031   200263 235100                    LDA     BIN_START$,,AUTO
         3 000032   000022 771000                    ARL     18
         3 000033   200272 755100                    STA     BIN_N$+4,,AUTO
         3 000034   200264 236100                    LDQ     BIN_STOP$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:84   
         3 000035   000022 772000                    QRL     18
         3 000036   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 000037   000002 506007                    DIV     2,DL
         3 000040   000021 116007                    CMPQ    17,DL
         3 000041   000075 605000 3                  TPL     s:11926

             11910    2              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  11910  3 000042   200263 236100                    LDQ     BIN_START$,,AUTO
         3 000043   200265 756100                    STQ     BIN_RESULT$,,AUTO

             11911    3              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  11911  3 000044   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 000045   000047 600000 3                  TZE     s:11912
         3 000046   000074 603000 3                  TRC     s:11923

             11912    3                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  11912  3 000047   200265 470500                    LDP0    BIN_RESULT$,,AUTO
         3 000050   000001 220100                    LDX0    1,,PR0
         3 000051   000000 636010                    EAQ     0,X0
         3 000052   200266 036100                    ADLQ    BIN_N$,,AUTO
         3 000053   200261 756100                    STQ     BIN_NTEMP$,,AUTO

             11913    3                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  11913  3 000054   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 000055   100000 221100                    LDX1    0,,PR1
         3 000056   200017 473500                    LDP3    PN$,,AUTO
         3 000057   300000 222100                    LDX2    0,,PR3
         3 000060   040140 106540                    CMPC    fill='040'O
         3 000061   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         3 000062   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 000063   000066 602000 3                  TNC     s:11921

             11914    3                   >=
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:85   
             11915    4                   PN$ -> B$DNAME.TEXT THEN DO;

             11916    4                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  11916  3 000064   000152 600000 3                  TZE     BIN_FOUND

             11917    4                      =
             11918    4                      PN$ -> B$DNAME.TEXT THEN GOTO BIN_FOUND;
             11919    4                    ELSE GOTO NO_PRIMARY_ENTDEF;

  11919  3 000065   000170 710000 3                  TRA     NO_PRIMARY_ENTDEF

             11920    4                    END;
             11921    3                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );

  11921  3 000066   200265 236100                    LDQ     BIN_RESULT$,,AUTO
         3 000067   000002 036003                    ADLQ    2,DU
         3 000070   200265 756100                    STQ     BIN_RESULT$,,AUTO

             11922    3                 END;                      /* Do while                           */

  11922  3 000071   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 000072   000047 602000 3                  TNC     s:11912
         3 000073   000047 600000 3                  TZE     s:11912

             11923    2              GOTO NO_PRIMARY_ENTDEF;

  11923  3 000074   000170 710000 3                  TRA     NO_PRIMARY_ENTDEF

             11924    2              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             11925    2           ELSE DO;                        /* Binary search                      */

             11926    2              BIN_LOW = 0;

  11926  3 000075   200256 450100                    STZ     BIN_LOW,,AUTO

             11927    2              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:86   

  11927  3 000076   200263 235100                    LDA     BIN_START$,,AUTO
         3 000077   000022 771000                    ARL     18
         3 000100   200272 755100                    STA     BIN_N$+4,,AUTO
         3 000101   200264 236100                    LDQ     BIN_STOP$,,AUTO
         3 000102   000022 772000                    QRL     18
         3 000103   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 000104   000002 506007                    DIV     2,DL
         3 000105   000002 036007                    ADLQ    2,DL
         3 000106   200257 756100                    STQ     BIN_HIGH,,AUTO

             11928    2              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );

  11928  3 000107   200263 236100                    LDQ     BIN_START$,,AUTO
         3 000110   777776 036003                    ADLQ    -2,DU
         3 000111   200262 756100                    STQ     BIN_START1$,,AUTO

  11928  3 000112                       BIN_SPLIT_A  null
             11929    2   BIN_SPLIT_A:     ;
             11930    2              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  11930  3 000112   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 000113   200257 036100                    ADLQ    BIN_HIGH,,AUTO
         3 000114   000001 772000                    QRL     1
         3 000115   200260 756100                    STQ     BIN_MID,,AUTO

             11931    2              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );

  11931  3 000116   000023 736000                    QLS     19
         3 000117   200262 036100                    ADLQ    BIN_START1$,,AUTO
         3 000120   200265 756100                    STQ     BIN_RESULT$,,AUTO

             11932    2              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  11932  3 000121   200265 470500                    LDP0    BIN_RESULT$,,AUTO
         3 000122   000001 220100                    LDX0    1,,PR0
         3 000123   000000 636010                    EAQ     0,X0
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:87   
         3 000124   200266 036100                    ADLQ    BIN_N$,,AUTO
         3 000125   200261 756100                    STQ     BIN_NTEMP$,,AUTO

             11933    2              IF BIN_NTEMP$ -> B$DNAME.TEXT

  11933  3 000126   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 000127   100000 221100                    LDX1    0,,PR1
         3 000130   200017 473500                    LDP3    PN$,,AUTO
         3 000131   300000 222100                    LDX2    0,,PR3
         3 000132   040140 106540                    CMPC    fill='040'O
         3 000133   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         3 000134   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 000135   000141 603000 3                  TRC     s:11939

             11934    2                <
             11935    3                PN$ -> B$DNAME.TEXT THEN DO;

             11936    3                 BIN_LOW = BIN_MID;

  11936  3 000136   200260 235100                    LDA     BIN_MID,,AUTO
         3 000137   200256 755100                    STA     BIN_LOW,,AUTO

             11937    3                 GOTO BIN_CHECK_A;

  11937  3 000140   000145 710000 3                  TRA     BIN_CHECK_A

             11938    3                 END;
             11939    2              IF BIN_NTEMP$ -> B$DNAME.TEXT

  11939  3 000141   000152 602000 3                  TNC     BIN_FOUND
         3 000142   000152 600000 3                  TZE     BIN_FOUND

             11940    2                >
             11941    3                PN$ -> B$DNAME.TEXT THEN DO;

             11942    3                 BIN_HIGH = BIN_MID;

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:88   
  11942  3 000143   200260 235100                    LDA     BIN_MID,,AUTO
         3 000144   200257 755100                    STA     BIN_HIGH,,AUTO

  11942  3 000145                       BIN_CHECK_A  null
             11943    3   BIN_CHECK_A:        ;
             11944    3                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_A;

  11944  3 000145   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 000146   000001 036007                    ADLQ    1,DL
         3 000147   200257 116100                    CMPQ    BIN_HIGH,,AUTO
         3 000150   000112 602000 3                  TNC     BIN_SPLIT_A

             11945                                                /* Here => looping or not found       */
             11946                                      /* Result -> < match => a boundary condition    */
             11947    3                 /*
             11948    3                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             11949    3                   <
             11950    3                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             11950                            VXD$TMPLT) );
             11951    3                 /**/
             11952    3                   GOTO NO_PRIMARY_ENTDEF;

  11952  3 000151   000170 710000 3                  TRA     NO_PRIMARY_ENTDEF

             11953    3                 END;
             11954    2              END;                         /* Else do;                           */
             11955    1   BIN_FOUND:
             11956        /* Here -> found */
      174    11958        /* Here => found */
      175    11959    1         IF NOT BIN_RESULT$ -> B$EDEF.PRI THEN GOTO NO_PRIMARY_ENTDEF;

  11959  3 000152   000001 236100       BIN_FOUND    LDQ     1,,PR0
         3 000153   400000 316007                    CANQ    -131072,DL
         3 000154   000170 600000 3                  TZE     NO_PRIMARY_ENTDEF

      176    11960    1         VX_PRIMARY_ENTDEF_GOT = '1'B/*@TRUE_B*/;

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:89   
  11960  3 000155   400000 236003                    LDQ     -131072,DU
         3 000156   000000 756000 xsym               STQ     VX_PRIMARY_ENTDEF_GOT

      177    11961    1         VX_OK.KPEDX = BIN_RESULT$ -> B$EDEF.NPOINTER;

  11961  3 000157   000001 236100                    LDQ     1,,PR0
         3 000160   000022 732000                    QRS     18
         3 000161   000011 756000 xsym               STQ     VX_OK+9

      178    11962    1         VX_P_ENTDEF = VX_OK.KPEDX;

  11962  3 000162   000000 756000 xsym               STQ     VX_P_ENTDEF

      179    11963    1         IF VX_OK.KPEDX < BITBIN('100000'O) THEN WILL_FIT = '1'B/*@YES_B*/;

  11963  3 000163   100000 116007                    CMPQ    32768,DL
         3 000164   000167 603000 3                  TRC     s:11964

  11963  3 000165   400000 236003                    LDQ     -131072,DU
         3 000166   200003 756100                    STQ     WILL_FIT,,AUTO

      180    11964    2         DO WHILE( '0'B );

  11964  3 000167   000255 710000 3                  TRA     s:11987

      181    11965    2   NO_PRIMARY_ENTDEF:
      182    11966    2             I = I + 1;

  11966  3 000170   200025 235100       NO_PRIMARY_* LDA     I,,AUTO
         3 000171   000001 035007                    ADLA    1,DL
         3 000172   200025 755100                    STA     I,,AUTO

      183    11967    3             IF SI<0 OR PN$~=ADDR(TEMP) THEN DO;

  11967  3 000173   200025 236100                    LDQ     I,,AUTO
         3 000174   000202 604000 3                  TMI     s:11969
         3 000175   200272 452500                    STP2    BIN_N$+4,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:90   
         3 000176   200272 236100                    LDQ     BIN_N$+4,,AUTO
         3 000177   000055 036003                    ADLQ    45,DU
         3 000200   200017 116100                    CMPQ    PN$,,AUTO
         3 000201   000226 600000 3                  TZE     s:11978

      184    11968        /* Try adding '_' in case the name is really in the transfer vector). */
      185    11969    4                 IF I>0 THEN DO;

  11969  3 000202   000000 115003                    CMPA    0,DU
         3 000203   000213 600000 3                  TZE     s:11973

      186    11970    4                     TEMP.COUNT = PN$ -> B$DNAME.COUNT;

  11970  3 000204   200017 470500                    LDP0    PN$,,AUTO
         3 000205   000000 220100                    LDX0    0,,PR0
         3 000206   200055 740100                    STX0    TEMP,,AUTO

      187    11971    4                     TEMP.CHARS = PN$ -> B$DNAME.TEXT;

  11971  3 000207   000000 221100                    LDX1    0,,PR0
         3 000210   040100 100540                    MLR     fill='040'O
         3 000211   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         3 000212   200055 401002                    ADSC9   TEMP,,AUTO               cn=2,n=514

      188    11972    4                     END;

      189    11973    3                 SUBSTR(TEMP.CHARS,TEMP.COUNT,1) = '_';

  11973  3 000213   200055 236100                    LDQ     TEMP,,AUTO
         3 000214   000022 772000                    QRL     18
         3 000215   040106 100400                    MLR     fill='040'O
         3 000216   000000 000001 4                  ADSC9   0                        cn=0,n=1
         3 000217   200055 400001                    ADSC9   TEMP,Q,AUTO              cn=2,n=1

      190    11974    3                 TEMP.COUNT = TEMP.COUNT+1;

  11974  3 000220   200055 220100                    LDX0    TEMP,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:91   
         3 000221   000001 621010                    EAX1    1,X0
         3 000222   200055 741100                    STX1    TEMP,,AUTO

      191    11975    3                 PN$ = ADDR(TEMP);

  11975  3 000223   200055 630500                    EPPR0   TEMP,,AUTO
         3 000224   200017 450500                    STP0    PN$,,AUTO

      192    11976    3                 GOTO FIND_PRIMARY_ENTDEF;

  11976  3 000225   000026 710000 3                  TRA     FIND_PRIMARY_ENTDEF

      193    11977    3                 END;
      194    11978    3             DO WHILE (I/2 < VX_SC_PASS2$ -> VX$LLIST_SC.COUNT);

  11978  3 000226   000247 710000 3                  TRA     s:11984

      195    11979    3                 PN$ = PINCRW( DNAME$,

  11979  3 000227   200025 236100                    LDQ     I,,AUTO
         3 000230   000001 772000                    QRL     1
         3 000231   000000 470400 xsym               LDP0    VX_SC_PASS2$
         3 000232   000001 471500                    LDP1    1,,PR0
         3 000233   000003 402007                    MPY     3,DL
         3 000234   100001 220106                    LDX0    1,QL,PR1
         3 000235   000000 636010                    EAQ     0,X0
         3 000236   200023 036100                    ADLQ    DNAME$,,AUTO
         3 000237   200017 756100                    STQ     PN$,,AUTO

      196    11980    3                         PINCRW( VX_SC_PASS2$ -> VX$LLIST_SC.BASE$, I/2*SIZEW(VX$SC))
      197    11981    3                         -> VX$SC.NAME_DISP);
      198    11982    3                 IF PINCRW(PN$,1) > DNAME$ THEN GOTO FIND_PRIMARY_ENTDEF;

  11982  3 000240   000001 036003                    ADLQ    1,DU
         3 000241   200023 116100                    CMPQ    DNAME$,,AUTO
         3 000242   000244 600000 3                  TZE     s:11983
         3 000243   000026 603000 3                  TRC     FIND_PRIMARY_ENTDEF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:92   

      199    11983    3                 I = I + 2;

  11983  3 000244   200025 235100                    LDA     I,,AUTO
         3 000245   000002 035007                    ADLA    2,DL
         3 000246   200025 755100                    STA     I,,AUTO

      200    11984    3                 END;

  11984  3 000247   200025 236100                    LDQ     I,,AUTO
         3 000250   000001 772000                    QRL     1
         3 000251   000000 470400 xsym               LDP0    VX_SC_PASS2$
         3 000252   000002 116100                    CMPQ    2,,PR0
         3 000253   000227 602000 3                  TNC     s:11979

      201    11985    2             VX_PRIMARY_ENTDEF_GOT = '0'B/*@FALSE_B*/;

  11985  3 000254   000000 450000 xsym               STZ     VX_PRIMARY_ENTDEF_GOT

      202    11986    2             END;

      203    11987    2         DO I = 0 TO SIZEW( VX_REF_REC_A ) - 1;

  11987  3 000255   200025 450100                    STZ     I,,AUTO
         3 000256   002644 710000 3                  TRA     s:12774+3

      204    11988    2             REF_REC = VX_REF_REC_A(I);

  11988  3 000257   200025 720100                    LXL0    I,,AUTO
         3 000260   000000 235010 xsym               LDA     VX_REF_REC_A,X0
         3 000261   200031 755100                    STA     REF_REC,,AUTO

      205    11989    2             HEAD_INX = VX_HEAD_INX(REF_REC); /* Get index into head record */

  11989  3 000262   000000 235005 xsym               LDA     VX_HEAD_INX,AL
         3 000263   200035 755100                    STA     HEAD_INX,,AUTO

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:93   
      206    11990    2             TSIZE = VX_OU_HEAD.REC_A.SIZE(HEAD_INX);
             11990                      /* Get total size for this record type */

  11990  3 000264   000005 236005 xsym               LDQ     VX_OU_HEAD+5,AL
         3 000265   000022 772000                    QRL     18
         3 000266   200040 756100                    STQ     TSIZE,,AUTO

      207    11991    2             PAGE = VX_OU_HEAD.REC_A.PAGE(HEAD_INX); /* Get the page size */

  11991  3 000267   200035 721100                    LXL1    HEAD_INX,,AUTO
         3 000270   000005 236011 xsym               LDQ     VX_OU_HEAD+5,X1
         3 000271   777777 376007                    ANQ     -1,DL
         3 000272   200041 756100                    STQ     PAGE,,AUTO

      208    11992    2             WHERE$ = VX_PASS2_REF.OU.L_START_A$(I);

  11992  3 000273   000004 236010 xsym               LDQ     VX_PASS2_REF+4,X0
         3 000274   200014 756100                    STQ     WHERE$,,AUTO

      209    11993    2             VX_PASS2_REF.OU.L_STOP_A$(I) = ADDR(NIL);

  11993  3 000275   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000276   000010 756010 xsym               STQ     VX_PASS2_REF+8,X0

      210    11994    3             IF TSIZE > 0 THEN DO;

  11994  3 000277   200040 235100                    LDA     TSIZE,,AUTO
         3 000300   002641 600000 3                  TZE     s:12774

      211    11995    3                 VX_CURR$ -> VX$NODE.L_START_A$(REF_REC ) = ADDR(NIL);

  11995  3 000301   000000 470400 xsym               LDP0    VX_CURR$
         3 000302   200031 722100                    LXL2    REF_REC,,AUTO
         3 000303   000030 756112                    STQ     24,X2,PR0

      212    11996    3                 VX_CURR$ -> VX$NODE.L_STOP_A$(REF_REC ) = ADDR(NIL);

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:94   
  11996  3 000304   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000305   000000 470400 xsym               LDP0    VX_CURR$
         3 000306   200031 722100                    LXL2    REF_REC,,AUTO
         3 000307   000042 756112                    STQ     34,X2,PR0

      213    11997    3                 VX_CURR$ -> VX$NODE.L_SIZE_A(REF_REC ) = 0;

  11997  3 000310   000000 470400 xsym               LDP0    VX_CURR$
         3 000311   200031 722100                    LXL2    REF_REC,,AUTO
         3 000312   000054 450112                    STZ     44,X2,PR0

      214    11998    3                 VX_CURR$ -> VX$NODE.L_PREV_SIZE_A(REF_REC ) = 0;

  11998  3 000313   000000 470400 xsym               LDP0    VX_CURR$
         3 000314   200031 722100                    LXL2    REF_REC,,AUTO
         3 000315   000066 450112                    STZ     54,X2,PR0

      215    11999    3                 CALL VXU$PREAD(

  11999  3 000316   000002 237000 4                  LDAQ    2
         3 000317   200304 757100                    STAQ    BIN_N$+14,,AUTO
         3 000320   200040 630500                    EPPR0   TSIZE,,AUTO
         3 000321   200303 450500                    STP0    BIN_N$+13,,AUTO
         3 000322   200033 631500                    EPPR1   ALL_TYPE,,AUTO
         3 000323   200302 451500                    STP1    BIN_N$+12,,AUTO
         3 000324   200040 633500                    EPPR3   TSIZE,,AUTO
         3 000325   200301 453500                    STP3    BIN_N$+11,,AUTO
         3 000326   200041 634500                    EPPR4   PAGE,,AUTO
         3 000327   200300 454500                    STP4    BIN_N$+10,,AUTO
         3 000330   200014 635500                    EPPR5   WHERE$,,AUTO
         3 000331   200277 455500                    STP5    BIN_N$+9,,AUTO
         3 000332   200031 636500                    EPPR6   REF_REC,,AUTO
         3 000333   200276 456500                    STP6    BIN_N$+8,,AUTO
         3 000334   000004 237000 4                  LDAQ    4
         3 000335   200274 757100                    STAQ    BIN_N$+6,,AUTO
         3 000336   200045 637500                    EPPR7   TSIZE_READ,,AUTO
         3 000337   200273 457500                    STP7    BIN_N$+5,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:95   
         3 000340   200044 630500                    EPPR0   NPAGE,,AUTO
         3 000341   200272 450500                    STP0    BIN_N$+4,,AUTO
         3 000342   200272 630500                    EPPR0   BIN_N$+4,,AUTO
         3 000343   000001 631400 4                  EPPR1   1
         3 000344   000000 701000 xent               TSX1    VXU$PREAD
         3 000345   000000 011000                    NOP     0

      216    12000    3                         NPAGE,
      217    12001    3                         TSIZE_READ,
      218    12002    3                         0/*@OF*/,
      219    12003    3                         0/*@OF*/,
      220    12004    3                         REF_REC,
      221    12005    3                         WHERE$,
      222    12006    3                         PAGE,
      223    12007    3                         TSIZE,
      224    12008    3                         ALL_TYPE,
      225    12009    3                         TSIZE,
      226    12010    3                         VX_CURR$,
      227    12011    3                         -1
      228    12012    3                         );
      229    12013    4                 IF REF_REC ~= 2 THEN DO;

  12013  3 000346   200031 235100                    LDA     REF_REC,,AUTO
         3 000347   000002 115007                    CMPA    2,DL
         3 000350   002641 600000 3                  TZE     s:12774

      230    12014    4                     I1 = I - 1;

  12014  3 000351   200025 236100                    LDQ     I,,AUTO
         3 000352   000001 136007                    SBLQ    1,DL
         3 000353   200052 756100                    STQ     I1,,AUTO

      231    12015    4                     Q$ = PINCRW( WHERE$, TSIZE_READ - SIZEW( VXR$TMPLT ) );

  12015  3 000354   200045 236100                    LDQ     TSIZE_READ,,AUTO
         3 000355   000022 736000                    QLS     18
         3 000356   000001 136003                    SBLQ    1,DU
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:96   
         3 000357   200014 036100                    ADLQ    WHERE$,,AUTO
         3 000360   200005 756100                    STQ     Q$,,AUTO

      232    12016    4                     VX_PASS2_REF.OU.L_STOP_A$(I) = Q$;

  12016  3 000361   200025 720100                    LXL0    I,,AUTO
         3 000362   000010 756010 xsym               STQ     VX_PASS2_REF+8,X0

      233    12017    4                     DEF_REC = VX_REF_MATCH_A(REF_REC);

  12017  3 000363   000000 235005 xsym               LDA     VX_REF_MATCH_A,AL
         3 000364   200032 755100                    STA     DEF_REC,,AUTO

      234    12018    4                     NAME_X = VX_MATCH_NAME_A(DEF_REC);

  12018  3 000365   000000 235005 xsym               LDA     VX_MATCH_NAME_A,AL
         3 000366   200054 755100                    STA     NAME_X,,AUTO

      235    12019    4                     RNAME$ = VX_PASS2_REF.OU.L_START.RN$;

  12019  3 000367   000004 236000 xsym               LDQ     VX_PASS2_REF+4
         3 000370   200016 756100                    STQ     RNAME$,,AUTO

      236    12020    4                     RESOLVE$ = VX_PASS2_REF.SAT.L_START_A$(I);

  12020  3 000371   000024 236010 xsym               LDQ     VX_PASS2_REF+20,X0
         3 000372   200022 756100                    STQ     RESOLVE$,,AUTO

      237    12021    4                     P$ = WHERE$;

  12021  3 000373   200014 236100                    LDQ     WHERE$,,AUTO
         3 000374   200004 756100                    STQ     P$,,AUTO

      238    12022    5                     DO WHILE ( P$ <= Q$ );

  12022  3 000375   200005 116100                    CMPQ    Q$,,AUTO
         3 000376   000400 600000 3                  TZE     s:12023
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:97   
         3 000377   002625 603000 3                  TRC     s:12768

      239    12023    5                         RESOLVE$ -> VXR$SAT = '0'B;

  12023  3 000400   200022 470500                    LDP0    RESOLVE$,,AUTO
         3 000401   000000 450100                    STZ     0,,PR0
         3 000402   000001 450100                    STZ     1,,PR0

      240    12024    5                         PN$ = PINCRW( RNAME$, P$ -> VXR$TMPLT.NPOINTER );

  12024  3 000403   200004 471500                    LDP1    P$,,AUTO
         3 000404   100000 220100                    LDX0    0,,PR1
         3 000405   000000 636010                    EAQ     0,X0
         3 000406   200016 036100                    ADLQ    RNAME$,,AUTO
         3 000407   200017 756100                    STQ     PN$,,AUTO

      241    12025    5                         CURR$ = VX_ROOT$;

  12025  3 000410   000000 236000 xsym               LDQ     VX_ROOT$
         3 000411   200007 756100                    STQ     CURR$,,AUTO

      242    12026    5                         FOUND$ = ADDR(NIL);

  12026  3 000412   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000413   200010 756100                    STQ     FOUND$,,AUTO

      243    12027    5   NEXT_NODE:
      244    12028    5                         BIN_START$ = CURR$ -> VX$NODE.L_START_A$(DEF_REC);

  12028  3 000414   200007 470500       NEXT_NODE    LDP0    CURR$,,AUTO
         3 000415   200032 720100                    LXL0    DEF_REC,,AUTO
         3 000416   000030 236110                    LDQ     24,X0,PR0
         3 000417   200263 756100                    STQ     BIN_START$,,AUTO

      245    12029    5                         BIN_STOP$ = CURR$ -> VX$NODE.L_STOP_A$(DEF_REC);

  12029  3 000420   000042 236110                    LDQ     34,X0,PR0
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:98   
         3 000421   200264 756100                    STQ     BIN_STOP$,,AUTO

      246    12030    5                         BIN_N$ = CURR$ -> VX$NODE.L_START_A$(NAME_X);

  12030  3 000422   200054 721100                    LXL1    NAME_X,,AUTO
         3 000423   000030 236111                    LDQ     24,X1,PR0
         3 000424   200266 756100                    STQ     BIN_N$,,AUTO

      247    12031                              %BIN_SEARCH(
      248    12032                              START$=BIN_START$,
      249    12033                              STOP$=BIN_STOP$,
      250    12034                              RESULT$=BIN_RESULT$,
      251    12035                              N$=BIN_N$,
      252    12036                              MATCH$=PN$,
      253    12037                              NAME_DISP=2,
      254    12038                              SIZE="SIZEW(VXD$TMPLT)",
      255    12039                              NEG=%@COMMENT,
      256    12040                              GEN=%@TNEMMOC,
      257    12041                              FOUND=FOUND_ANCESTOR,
      258    12042                              SPLIT=BIN_SPLIT,
      259    12043                              CHECK=BIN_CHECK,
      260    12044                              ALTRETURN=NOT_FOUND,
      261    12045                              EMPTY=NOT_FOUND);
             12047    5           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND;

  12047  3 000425   200263 236100                    LDQ     BIN_START$,,AUTO
         3 000426   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000427   000576 600000 3                  TZE     NOT_FOUND

             12048    6           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;

  12048  3 000430   200263 235100                    LDA     BIN_START$,,AUTO
         3 000431   000022 771000                    ARL     18
         3 000432   200272 755100                    STA     BIN_N$+4,,AUTO
         3 000433   200264 236100                    LDQ     BIN_STOP$,,AUTO
         3 000434   000022 772000                    QRL     18
         3 000435   200272 136100                    SBLQ    BIN_N$+4,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:99   
         3 000436   000002 506007                    DIV     2,DL
         3 000437   000021 116007                    CMPQ    17,DL
         3 000440   000474 605000 3                  TPL     s:12065

             12049    6              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  12049  3 000441   200263 236100                    LDQ     BIN_START$,,AUTO
         3 000442   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12050    7              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  12050  3 000443   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 000444   000446 600000 3                  TZE     s:12051
         3 000445   000473 603000 3                  TRC     s:12062

             12051    7                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  12051  3 000446   200265 470500                    LDP0    BIN_RESULT$,,AUTO
         3 000447   000001 220100                    LDX0    1,,PR0
         3 000450   000000 636010                    EAQ     0,X0
         3 000451   200266 036100                    ADLQ    BIN_N$,,AUTO
         3 000452   200261 756100                    STQ     BIN_NTEMP$,,AUTO

             12052    7                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  12052  3 000453   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 000454   100000 221100                    LDX1    0,,PR1
         3 000455   200017 473500                    LDP3    PN$,,AUTO
         3 000456   300000 222100                    LDX2    0,,PR3
         3 000457   040140 106540                    CMPC    fill='040'O
         3 000460   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         3 000461   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 000462   000465 602000 3                  TNC     s:12060

             12053    7                   >=
             12054    8                   PN$ -> B$DNAME.TEXT THEN DO;

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:100  
             12055    8                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  12055  3 000463   000551 600000 3                  TZE     FOUND_ANCESTOR

             12056    8                      =
             12057    8                      PN$ -> B$DNAME.TEXT THEN GOTO FOUND_ANCESTOR;
             12058    8                    ELSE GOTO NOT_FOUND;

  12058  3 000464   000576 710000 3                  TRA     NOT_FOUND

             12059    8                    END;
             12060    7                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );

  12060  3 000465   200265 236100                    LDQ     BIN_RESULT$,,AUTO
         3 000466   000002 036003                    ADLQ    2,DU
         3 000467   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12061    7                 END;                      /* Do while                           */

  12061  3 000470   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 000471   000446 602000 3                  TNC     s:12051
         3 000472   000446 600000 3                  TZE     s:12051

             12062    6              GOTO NOT_FOUND;

  12062  3 000473   000576 710000 3                  TRA     NOT_FOUND

             12063    6              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12064    6           ELSE DO;                        /* Binary search                      */

             12065    6              BIN_LOW = 0;

  12065  3 000474   200256 450100                    STZ     BIN_LOW,,AUTO

             12066    6              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;

  12066  3 000475   200263 235100                    LDA     BIN_START$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:101  
         3 000476   000022 771000                    ARL     18
         3 000477   200272 755100                    STA     BIN_N$+4,,AUTO
         3 000500   200264 236100                    LDQ     BIN_STOP$,,AUTO
         3 000501   000022 772000                    QRL     18
         3 000502   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 000503   000002 506007                    DIV     2,DL
         3 000504   000002 036007                    ADLQ    2,DL
         3 000505   200257 756100                    STQ     BIN_HIGH,,AUTO

             12067    6              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );

  12067  3 000506   200263 236100                    LDQ     BIN_START$,,AUTO
         3 000507   777776 036003                    ADLQ    -2,DU
         3 000510   200262 756100                    STQ     BIN_START1$,,AUTO

  12067  3 000511                       BIN_SPLIT    null
             12068    6   BIN_SPLIT:     ;
             12069    6              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  12069  3 000511   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 000512   200257 036100                    ADLQ    BIN_HIGH,,AUTO
         3 000513   000001 772000                    QRL     1
         3 000514   200260 756100                    STQ     BIN_MID,,AUTO

             12070    6              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );

  12070  3 000515   000023 736000                    QLS     19
         3 000516   200262 036100                    ADLQ    BIN_START1$,,AUTO
         3 000517   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12071    6              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  12071  3 000520   200265 470500                    LDP0    BIN_RESULT$,,AUTO
         3 000521   000001 220100                    LDX0    1,,PR0
         3 000522   000000 636010                    EAQ     0,X0
         3 000523   200266 036100                    ADLQ    BIN_N$,,AUTO
         3 000524   200261 756100                    STQ     BIN_NTEMP$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:102  

             12072    6              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12072  3 000525   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 000526   100000 221100                    LDX1    0,,PR1
         3 000527   200017 473500                    LDP3    PN$,,AUTO
         3 000530   300000 222100                    LDX2    0,,PR3
         3 000531   040140 106540                    CMPC    fill='040'O
         3 000532   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         3 000533   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 000534   000540 603000 3                  TRC     s:12078

             12073    6                <
             12074    7                PN$ -> B$DNAME.TEXT THEN DO;

             12075    7                 BIN_LOW = BIN_MID;

  12075  3 000535   200260 235100                    LDA     BIN_MID,,AUTO
         3 000536   200256 755100                    STA     BIN_LOW,,AUTO

             12076    7                 GOTO BIN_CHECK;

  12076  3 000537   000544 710000 3                  TRA     BIN_CHECK

             12077    7                 END;
             12078    6              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12078  3 000540   000551 602000 3                  TNC     FOUND_ANCESTOR
         3 000541   000551 600000 3                  TZE     FOUND_ANCESTOR

             12079    6                >
             12080    7                PN$ -> B$DNAME.TEXT THEN DO;

             12081    7                 BIN_HIGH = BIN_MID;

  12081  3 000542   200260 235100                    LDA     BIN_MID,,AUTO
         3 000543   200257 755100                    STA     BIN_HIGH,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:103  

  12081  3 000544                       BIN_CHECK    null
             12082    7   BIN_CHECK:        ;
             12083    7                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT;

  12083  3 000544   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 000545   000001 036007                    ADLQ    1,DL
         3 000546   200257 116100                    CMPQ    BIN_HIGH,,AUTO
         3 000547   000511 602000 3                  TNC     BIN_SPLIT

             12084                                                /* Here => looping or not found       */
             12085                                      /* Result -> < match => a boundary condition    */
             12086    7                 /*
             12087    7                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12088    7                   <
             12089    7                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             12089                            VXD$TMPLT) );
             12090    7                 /**/
             12091    7                   GOTO NOT_FOUND;

  12091  3 000550   000576 710000 3                  TRA     NOT_FOUND

             12092    7                 END;
             12093    6              END;                         /* Else do;                           */
             12094    5   FOUND_ANCESTOR:
             12095        /* Here -> found */
      262    12097        /* Here => found */
      263    12098    5                         IF DEF_REC ~= 4 AND BIN_RESULT$->VXD$TMPLT.CONSTNT THEN

  12098  3 000551   200032 235100       FOUND_ANCES* LDA     DEF_REC,,AUTO
         3 000552   000004 115007                    CMPA    4,DL
         3 000553   000564 600000 3                  TZE     s:12101
         3 000554   000001 236100                    LDQ     1,,PR0
         3 000555   400000 316007                    CANQ    -131072,DL
         3 000556   000564 600000 3                  TZE     s:12101

      264    12099    5                             SOURCE = BIN_RESULT$ -> VXD$TMPLT.LFLAGS.SOURCE;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:104  

  12099  3 000557   000001 236100                    LDQ     1,,PR0
         3 000560   000013 772000                    QRL     11
         3 000561   000017 376007                    ANQ     15,DL
         3 000562   200034 756100                    STQ     SOURCE,,AUTO
         3 000563   000567 710000 3                  TRA     s:12102

      265    12100    5                         ELSE
      266    12101    5                             SOURCE = BIN_RESULT$ -> VXD$TMPLT.AD.LFLAGS.SOURCE;

  12101  3 000564   000000 236100                    LDQ     0,,PR0
         3 000565   000041 772000                    QRL     33
         3 000566   200034 756100                    STQ     SOURCE,,AUTO

      267    12102    5                         IF SOURCE = 5 THEN GOTO NOT_FOUND;

  12102  3 000567   000005 116007                    CMPQ    5,DL
         3 000570   000576 600000 3                  TZE     NOT_FOUND

      268    12103    5                         FOUND$ = BIN_RESULT$;

  12103  3 000571   200265 236100                    LDQ     BIN_RESULT$,,AUTO
         3 000572   200010 756100                    STQ     FOUND$,,AUTO

      269    12104    5                         NODE$ = CURR$;

  12104  3 000573   200007 236100                    LDQ     CURR$,,AUTO
         3 000574   200011 756100                    STQ     NODE$,,AUTO

      270    12105    5                         GOTO DESCENDANT_SEARCH;

  12105  3 000575   000605 710000 3                  TRA     DESCENDANT_SEARCH

      271    12106    5   NOT_FOUND:
      272    12107    6                         IF CURR$ ~= VX_CURR$ THEN DO;

  12107  3 000576   200007 236100       NOT_FOUND    LDQ     CURR$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:105  
         3 000577   000000 116000 xsym               CMPQ    VX_CURR$
         3 000600   000605 600000 3                  TZE     DESCENDANT_SEARCH

      273    12108    6                             CURR$ = CURR$ -> VX$NODE.PATH$;

  12108  3 000601   200007 470500                    LDP0    CURR$,,AUTO
         3 000602   000003 236100                    LDQ     3,,PR0
         3 000603   200007 756100                    STQ     CURR$,,AUTO

      274    12109    6                             GOTO NEXT_NODE;

  12109  3 000604   000414 710000 3                  TRA     NEXT_NODE

      275    12110    6                             END;
      276    12111        /**/
      277    12112        /**/
      278    12113        /**/
      279    12114    5   DESCENDANT_SEARCH:
      280    12115        /*    Here do descendant search */
      281    12116    5                         CURR$ = VX_CURR$ -> VX$NODE.SON$;

  12116  3 000605   000000 470400 xsym  DESCENDANT_* LDP0    VX_CURR$
         3 000606   000000 236100                    LDQ     0,,PR0
         3 000607   200007 756100                    STQ     CURR$,,AUTO

      282    12117    6                         DO WHILE( CURR$ ~= ADDR(NIL) );

  12117  3 000610   001177 710000 3                  TRA     s:12271

      283    12118    6                             BIN_START$ = CURR$ -> VX$NODE.L_START_A$(DEF_REC);

  12118  3 000611   200007 470500                    LDP0    CURR$,,AUTO
         3 000612   200032 720100                    LXL0    DEF_REC,,AUTO
         3 000613   000030 236110                    LDQ     24,X0,PR0
         3 000614   200263 756100                    STQ     BIN_START$,,AUTO

      284    12119    6                             BIN_STOP$ = CURR$ -> VX$NODE.L_STOP_A$(DEF_REC);
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:106  

  12119  3 000615   000042 236110                    LDQ     34,X0,PR0
         3 000616   200264 756100                    STQ     BIN_STOP$,,AUTO

      285    12120    6                             BIN_N$ = CURR$ -> VX$NODE.L_START_A$(NAME_X);

  12120  3 000617   200054 721100                    LXL1    NAME_X,,AUTO
         3 000620   000030 236111                    LDQ     24,X1,PR0
         3 000621   200266 756100                    STQ     BIN_N$,,AUTO

      286    12121                                  %BIN_SEARCH(
      287    12122                                  START$=BIN_START$,
      288    12123                                  STOP$=BIN_STOP$,
      289    12124                                  RESULT$=BIN_RESULT$,
      290    12125                                  N$=BIN_N$,
      291    12126                                  MATCH$=PN$,
      292    12127                                  NAME_DISP=2,
      293    12128                                  SIZE="SIZEW(VXD$TMPLT)",
      294    12129                                  NEG=%@COMMENT,
      295    12130                                  GEN=%@TNEMMOC,
      296    12131                                  FOUND=FOUND_DESCENDANT,
      297    12132                                  SPLIT=BIN_SPLIT_D,
      298    12133                                  CHECK=BIN_CHECK_D,
      299    12134                                  ALTRETURN=NOT_FOUND_DESCENDANT,
      300    12135                                  EMPTY=NOT_FOUND_DESCENDANT);
             12137    6           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND_DESCENDANT;

  12137  3 000622   200263 236100                    LDQ     BIN_START$,,AUTO
         3 000623   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000624   001156 600000 3                  TZE     NOT_FOUND_DESCENDANT

             12138    7           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;

  12138  3 000625   200263 235100                    LDA     BIN_START$,,AUTO
         3 000626   000022 771000                    ARL     18
         3 000627   200272 755100                    STA     BIN_N$+4,,AUTO
         3 000630   200264 236100                    LDQ     BIN_STOP$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:107  
         3 000631   000022 772000                    QRL     18
         3 000632   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 000633   000002 506007                    DIV     2,DL
         3 000634   000021 116007                    CMPQ    17,DL
         3 000635   000671 605000 3                  TPL     s:12155

             12139    7              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  12139  3 000636   200263 236100                    LDQ     BIN_START$,,AUTO
         3 000637   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12140    8              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  12140  3 000640   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 000641   000643 600000 3                  TZE     s:12141
         3 000642   000670 603000 3                  TRC     s:12152

             12141    8                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  12141  3 000643   200265 470500                    LDP0    BIN_RESULT$,,AUTO
         3 000644   000001 220100                    LDX0    1,,PR0
         3 000645   000000 636010                    EAQ     0,X0
         3 000646   200266 036100                    ADLQ    BIN_N$,,AUTO
         3 000647   200261 756100                    STQ     BIN_NTEMP$,,AUTO

             12142    8                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  12142  3 000650   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 000651   100000 221100                    LDX1    0,,PR1
         3 000652   200017 473500                    LDP3    PN$,,AUTO
         3 000653   300000 222100                    LDX2    0,,PR3
         3 000654   040140 106540                    CMPC    fill='040'O
         3 000655   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         3 000656   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 000657   000662 602000 3                  TNC     s:12150

             12143    8                   >=
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:108  
             12144    9                   PN$ -> B$DNAME.TEXT THEN DO;

             12145    9                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  12145  3 000660   000746 600000 3                  TZE     FOUND_DESCENDANT

             12146    9                      =
             12147    9                      PN$ -> B$DNAME.TEXT THEN GOTO FOUND_DESCENDANT;
             12148    9                    ELSE GOTO NOT_FOUND_DESCENDANT;

  12148  3 000661   001156 710000 3                  TRA     NOT_FOUND_DESCENDANT

             12149    9                    END;
             12150    8                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );

  12150  3 000662   200265 236100                    LDQ     BIN_RESULT$,,AUTO
         3 000663   000002 036003                    ADLQ    2,DU
         3 000664   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12151    8                 END;                      /* Do while                           */

  12151  3 000665   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 000666   000643 602000 3                  TNC     s:12141
         3 000667   000643 600000 3                  TZE     s:12141

             12152    7              GOTO NOT_FOUND_DESCENDANT;

  12152  3 000670   001156 710000 3                  TRA     NOT_FOUND_DESCENDANT

             12153    7              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12154    7           ELSE DO;                        /* Binary search                      */

             12155    7              BIN_LOW = 0;

  12155  3 000671   200256 450100                    STZ     BIN_LOW,,AUTO

             12156    7              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:109  

  12156  3 000672   200263 235100                    LDA     BIN_START$,,AUTO
         3 000673   000022 771000                    ARL     18
         3 000674   200272 755100                    STA     BIN_N$+4,,AUTO
         3 000675   200264 236100                    LDQ     BIN_STOP$,,AUTO
         3 000676   000022 772000                    QRL     18
         3 000677   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 000700   000002 506007                    DIV     2,DL
         3 000701   000002 036007                    ADLQ    2,DL
         3 000702   200257 756100                    STQ     BIN_HIGH,,AUTO

             12157    7              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );

  12157  3 000703   200263 236100                    LDQ     BIN_START$,,AUTO
         3 000704   777776 036003                    ADLQ    -2,DU
         3 000705   200262 756100                    STQ     BIN_START1$,,AUTO

  12157  3 000706                       BIN_SPLIT_D  null
             12158    7   BIN_SPLIT_D:     ;
             12159    7              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  12159  3 000706   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 000707   200257 036100                    ADLQ    BIN_HIGH,,AUTO
         3 000710   000001 772000                    QRL     1
         3 000711   200260 756100                    STQ     BIN_MID,,AUTO

             12160    7              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );

  12160  3 000712   000023 736000                    QLS     19
         3 000713   200262 036100                    ADLQ    BIN_START1$,,AUTO
         3 000714   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12161    7              BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) );

  12161  3 000715   200265 470500                    LDP0    BIN_RESULT$,,AUTO
         3 000716   000001 220100                    LDX0    1,,PR0
         3 000717   000000 636010                    EAQ     0,X0
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:110  
         3 000720   200266 036100                    ADLQ    BIN_N$,,AUTO
         3 000721   200261 756100                    STQ     BIN_NTEMP$,,AUTO

             12162    7              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12162  3 000722   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 000723   100000 221100                    LDX1    0,,PR1
         3 000724   200017 473500                    LDP3    PN$,,AUTO
         3 000725   300000 222100                    LDX2    0,,PR3
         3 000726   040140 106540                    CMPC    fill='040'O
         3 000727   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         3 000730   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 000731   000735 603000 3                  TRC     s:12168

             12163    7                <
             12164    8                PN$ -> B$DNAME.TEXT THEN DO;

             12165    8                 BIN_LOW = BIN_MID;

  12165  3 000732   200260 235100                    LDA     BIN_MID,,AUTO
         3 000733   200256 755100                    STA     BIN_LOW,,AUTO

             12166    8                 GOTO BIN_CHECK_D;

  12166  3 000734   000741 710000 3                  TRA     BIN_CHECK_D

             12167    8                 END;
             12168    7              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12168  3 000735   000746 602000 3                  TNC     FOUND_DESCENDANT
         3 000736   000746 600000 3                  TZE     FOUND_DESCENDANT

             12169    7                >
             12170    8                PN$ -> B$DNAME.TEXT THEN DO;

             12171    8                 BIN_HIGH = BIN_MID;

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:111  
  12171  3 000737   200260 235100                    LDA     BIN_MID,,AUTO
         3 000740   200257 755100                    STA     BIN_HIGH,,AUTO

  12171  3 000741                       BIN_CHECK_D  null
             12172    8   BIN_CHECK_D:        ;
             12173    8                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_D;

  12173  3 000741   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 000742   000001 036007                    ADLQ    1,DL
         3 000743   200257 116100                    CMPQ    BIN_HIGH,,AUTO
         3 000744   000706 602000 3                  TNC     BIN_SPLIT_D

             12174                                                /* Here => looping or not found       */
             12175                                      /* Result -> < match => a boundary condition    */
             12176    8                 /*
             12177    8                   IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12178    8                   <
             12179    8                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             12179                            VXD$TMPLT) );
             12180    8                 /**/
             12181    8                   GOTO NOT_FOUND_DESCENDANT;

  12181  3 000745   001156 710000 3                  TRA     NOT_FOUND_DESCENDANT

             12182    8                 END;
             12183    7              END;                         /* Else do;                           */
             12184    6   FOUND_DESCENDANT:
             12185        /* Here -> found */
      301    12187        /* Here => found */
      302    12188    6                             IF DEF_REC ~= 4 AND BIN_RESULT$->VXD$TMPLT.CONSTNT

  12188  3 000746   200032 235100       FOUND_DESCE* LDA     DEF_REC,,AUTO
         3 000747   000004 115007                    CMPA    4,DL
         3 000750   000761 600000 3                  TZE     s:12192
         3 000751   000001 236100                    LDQ     1,,PR0
         3 000752   400000 316007                    CANQ    -131072,DL
         3 000753   000761 600000 3                  TZE     s:12192
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:112  

      303    12189    6                             THEN
      304    12190    6                                 SOURCE = BIN_RESULT$ -> VXD$TMPLT.LFLAGS.SOURCE;

  12190  3 000754   000001 236100                    LDQ     1,,PR0
         3 000755   000013 772000                    QRL     11
         3 000756   000017 376007                    ANQ     15,DL
         3 000757   200034 756100                    STQ     SOURCE,,AUTO
         3 000760   000764 710000 3                  TRA     s:12193

      305    12191    6                             ELSE
      306    12192    6                                 SOURCE = BIN_RESULT$ -> VXD$TMPLT.AD.LFLAGS.SOURCE;

  12192  3 000761   000000 236100                    LDQ     0,,PR0
         3 000762   000041 772000                    QRL     33
         3 000763   200034 756100                    STQ     SOURCE,,AUTO

      307    12193    6                             IF SOURCE = 5 THEN GOTO NOT_FOUND_DESCENDANT;

  12193  3 000764   000005 116007                    CMPQ    5,DL
         3 000765   001156 600000 3                  TZE     NOT_FOUND_DESCENDANT

      308    12194    7                             IF FOUND$ = ADDR(NIL) THEN DO;

  12194  3 000766   200010 236100                    LDQ     FOUND$,,AUTO
         3 000767   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000770   000776 601000 3                  TNZ     s:12199

      309    12195    7                                 FOUND$ = BIN_RESULT$;

  12195  3 000771   200265 236100                    LDQ     BIN_RESULT$,,AUTO
         3 000772   200010 756100                    STQ     FOUND$,,AUTO

      310    12196    7                                 NODE$ = CURR$;

  12196  3 000773   200007 236100                    LDQ     CURR$,,AUTO
         3 000774   200011 756100                    STQ     NODE$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:113  

      311    12197    7                                 END;      /* If FOUND$ = addr(nil) then do; */

  12197  3 000775   001156 710000 3                  TRA     NOT_FOUND_DESCENDANT

      312    12198    7                             ELSE DO;      /* Check for multiples */

      313    12199    7                                 VX_RU_HEAD.MAP_BITS_A.MULTIPLE(I1) = '1'B/*@TRUE_B*/;

  12199  3 000776   200052 235100                    LDA     I1,,AUTO
         3 000777   000002 735000                    ALS     2
         3 001000   003005 060400                    CSL     bolr='003'O
         3 001001   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         3 001002   000011 200001 xsym               BDSC    VX_RU_HEAD+9,A           by=1,bit=0,n=1

      314    12200    8                                 IF DEF_REC ~= 4 AND FOUND$ -> VXD$TMPLT.CONSTNT THEN
             12200                                          DO;

  12200  3 001003   200032 235100                    LDA     DEF_REC,,AUTO
         3 001004   000004 115007                    CMPA    4,DL
         3 001005   001031 600000 3                  TZE     s:12213
         3 001006   200010 474500                    LDP4    FOUND$,,AUTO
         3 001007   400001 236100                    LDQ     1,,PR4
         3 001010   400000 316007                    CANQ    -131072,DL
         3 001011   001031 600000 3                  TZE     s:12213

      315    12201    8                                     IF SOURCE ~= 0 THEN GOTO NOT_FOUND_DESCENDANT;

  12201  3 001012   200034 235100                    LDA     SOURCE,,AUTO
         3 001013   001156 601000 3                  TNZ     NOT_FOUND_DESCENDANT

      316    12202    9                                    IF NOT FOUND$ -> VXD$TMPLT.LFLAGS.MULTIPLE THEN DO
             12202                                              ; /* First detection */

  12202  3 001014   200000 316007                    CANQ    65536,DL
         3 001015   001047 601000 3                  TNZ     s:12223

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:114  
      317    12203    9                                         FOUND$ -> VXD$TMPLT.LFLAGS.MULTIPLE = '1'B
             12203                                                  /*@TRUE_B*/;

  12203  3 001016   200000 236007                    LDQ     65536,DL
         3 001017   400001 256100                    ORSQ    1,,PR4

      318    12204                                              %CHECK( SEV=@MULTIPLE );

  12205  3 001020   000000 235000 xsym               LDA     VX_ERR_SEV
         3 001021   000004 115007                    CMPA    4,DL
         3 001022   001025 603000 3                  TRC     s:12208

  12205  3 001023   000004 235007                    LDA     4,DL
         3 001024   000000 755000 xsym               STA     VX_ERR_SEV

      319    12207                                              %DUP_STATS;

  12208  3 001025   000000 235000 xsym               LDA     VX_ERRORS
         3 001026   000001 035007                    ADLA    1,DL
         3 001027   000000 755000 xsym               STA     VX_ERRORS

      320    12210    9                                         END;

      321    12211    8                                     END;

  12211  3 001030   001047 710000 3                  TRA     s:12223

      322    12212    8                                 ELSE DO;

      323    12213    9                                    IF NOT FOUND$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE THEN
             12213                                              DO;

  12213  3 001031   200010 474500                    LDP4    FOUND$,,AUTO
         3 001032   400000 236100                    LDQ     0,,PR4
         3 001033   020000 316003                    CANQ    8192,DU
         3 001034   001047 601000 3                  TNZ     s:12223

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:115  
      324    12214    9                                         FOUND$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE = '1'B
             12214                                                  /*@TRUE_B*/;

  12214  3 001035   020000 236003                    LDQ     8192,DU
         3 001036   400000 256100                    ORSQ    0,,PR4

      325    12215                                              %CHECK( SEV = @MULTIPLE );

  12216  3 001037   000000 235000 xsym               LDA     VX_ERR_SEV
         3 001040   000004 115007                    CMPA    4,DL
         3 001041   001044 603000 3                  TRC     s:12219

  12216  3 001042   000004 235007                    LDA     4,DL
         3 001043   000000 755000 xsym               STA     VX_ERR_SEV

      326    12218                                              %DUP_STATS;

  12219  3 001044   000000 235000 xsym               LDA     VX_ERRORS
         3 001045   000001 035007                    ADLA    1,DL
         3 001046   000000 755000 xsym               STA     VX_ERRORS

      327    12221    9                                         END;

      328    12222    8                                     END;

      329    12223    7                                 FIRST_START$ = BIN_RESULT$;

  12223  3 001047   200265 236100                    LDQ     BIN_RESULT$,,AUTO
         3 001050   200020 756100                    STQ     FIRST_START$,,AUTO

      330    12224    7                                 FIRST_STOP$ = BIN_RESULT$;

  12224  3 001051   200021 756100                    STQ     FIRST_STOP$,,AUTO

      331    12225        /**/
      332    12226    8                                 DO WHILE( FIRST_START$ >= BIN_START$ );

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:116  
  12226  3 001052   200263 116100                    CMPQ    BIN_START$,,AUTO
         3 001053   001075 602000 3                  TNC     BUMP_START

      333    12227    8                                     IF PINCRW( BIN_N$, FIRST_START$ -> VXD$TMPLT.
             12227                                              NPOINTER )

  12227  3 001054   200020 470500                    LDP0    FIRST_START$,,AUTO
         3 001055   000001 220100                    LDX0    1,,PR0
         3 001056   200266 471500                    LDP1    BIN_N$,,AUTO
         3 001057   100000 221110                    LDX1    0,X0,PR1
         3 001060   200017 473500                    LDP3    PN$,,AUTO
         3 001061   300000 222100                    LDX2    0,,PR3
         3 001062   000000 635010                    EAA     0,X0
         3 001063   000020 731000                    ARS     16
         3 001064   040140 106545                    CMPC    fill='040'O
         3 001065   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         3 001066   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 001067   001075 601000 3                  TNZ     BUMP_START

      334    12228    8                                             -> B$DNAME.TEXT
      335    12229    8                                             ~=
      336    12230    8                                             PN$ -> B$DNAME.TEXT THEN GOTO BUMP_START;
      337    12231    8                                     FIRST_START$ = PINCRW(FIRST_START$, -SIZEW(
             12231                                              VXD$TMPLT));

  12231  3 001070   200020 236100                    LDQ     FIRST_START$,,AUTO
         3 001071   777776 036003                    ADLQ    -2,DU
         3 001072   200020 756100                    STQ     FIRST_START$,,AUTO

      338    12232    8                                    END; /* Do while( FIRST_START$ >= BIN_START$ ); */

  12232  3 001073   200263 116100                    CMPQ    BIN_START$,,AUTO
         3 001074   001054 603000 3                  TRC     s:12227

      339    12233    7   BUMP_START:
      340    12234    7                                 FIRST_START$ = PINCRW( FIRST_START$, SIZEW(VXD$TMPLT)
             12234                                          );
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:117  

  12234  3 001075   200020 236100       BUMP_START   LDQ     FIRST_START$,,AUTO
         3 001076   000002 036003                    ADLQ    2,DU
         3 001077   200020 756100                    STQ     FIRST_START$,,AUTO

      341    12235        /**/
      342    12236    8                                 DO WHILE( FIRST_STOP$ <= BIN_STOP$ );

  12236  3 001100   200264 236100                    LDQ     BIN_STOP$,,AUTO
         3 001101   200021 116100                    CMPQ    FIRST_STOP$,,AUTO
         3 001102   001125 602000 3                  TNC     DECREASE_STOP

      343    12237    8                                     IF PINCRW( BIN_N$, FIRST_STOP$ -> VXD$TMPLT.
             12237                                              NPOINTER )

  12237  3 001103   200021 470500                    LDP0    FIRST_STOP$,,AUTO
         3 001104   000001 220100                    LDX0    1,,PR0
         3 001105   200266 471500                    LDP1    BIN_N$,,AUTO
         3 001106   100000 221110                    LDX1    0,X0,PR1
         3 001107   200017 473500                    LDP3    PN$,,AUTO
         3 001110   300000 222100                    LDX2    0,,PR3
         3 001111   000000 635010                    EAA     0,X0
         3 001112   000020 731000                    ARS     16
         3 001113   040140 106545                    CMPC    fill='040'O
         3 001114   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         3 001115   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 001116   001125 601000 3                  TNZ     DECREASE_STOP

      344    12238    8                                             -> B$DNAME.TEXT
      345    12239    8                                             ~=
      346    12240    8                                             PN$ -> B$DNAME.TEXT THEN GOTO
             12240                                                      DECREASE_STOP;
      347    12241    8                                    FIRST_STOP$ = PINCRW(FIRST_STOP$, SIZEW(VXD$TMPLT)
             12241                                              );

  12241  3 001117   200021 236100                    LDQ     FIRST_STOP$,,AUTO
         3 001120   000002 036003                    ADLQ    2,DU
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:118  
         3 001121   200021 756100                    STQ     FIRST_STOP$,,AUTO

      348    12242    8                                     END; /* Do while( FIRST_STOP$ <= BIN_STOP$ ); */

  12242  3 001122   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 001123   001103 602000 3                  TNC     s:12237
         3 001124   001103 600000 3                  TZE     s:12237

      349    12243    7   DECREASE_STOP:
      350    12244    7                                FIRST_STOP$ = PINCRW( FIRST_STOP$, -SIZEW(VXD$TMPLT) )
             12244                                          ;

  12244  3 001125   200021 236100       DECREASE_ST* LDQ     FIRST_STOP$,,AUTO
         3 001126   777776 036003                    ADLQ    -2,DU
         3 001127   200021 756100                    STQ     FIRST_STOP$,,AUTO

      351    12245        /**/
      352    12246    8                                 DO WHILE( FIRST_START$ <= FIRST_STOP$ );

  12246  3 001130   200020 116100                    CMPQ    FIRST_START$,,AUTO
         3 001131   001156 602000 3                  TNC     NOT_FOUND_DESCENDANT

      353    12247    8                                     SAVE_NAME_DISP = FIRST_START$ -> VXD$TMPLT.
             12247                                              NPOINTER;

  12247  3 001132   200020 470500                    LDP0    FIRST_START$,,AUTO
         3 001133   000001 236100                    LDQ     1,,PR0
         3 001134   000022 732000                    QRS     18
         3 001135   200053 756100                    STQ     SAVE_NAME_DISP,,AUTO

      354    12248    8                                     IF FIRST_START$->VXD$TMPLT.CONSTNT

  12248  3 001136   000001 236100                    LDQ     1,,PR0
         3 001137   400000 316007                    CANQ    -131072,DL
         3 001140   001144 600000 3                  TZE     s:12252

      355    12249    8                                     THEN
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:119  
      356    12250    8                                        FIRST_START$->VXD$TMPLT.LFLAGS.MULTIPLE = '1'B
             12250                                                  ;

  12250  3 001141   200000 236007                    LDQ     65536,DL
         3 001142   000001 256100                    ORSQ    1,,PR0
         3 001143   001146 710000 3                  TRA     s:12253

      357    12251    8                                     ELSE
      358    12252    8                                         FIRST_START$->VXD$TMPLT.AD.LFLAGS.MULTIPLE =
             12252                                                  '1'B;

  12252  3 001144   020000 236003                    LDQ     8192,DU
         3 001145   000000 256100                    ORSQ    0,,PR0

      359    12253    8                                     FIRST_START$ -> VXD$TMPLT.NPOINTER =
             12253                                              SAVE_NAME_DISP;

  12253  3 001146   200053 720100                    LXL0    SAVE_NAME_DISP,,AUTO
         3 001147   000001 740100                    STX0    1,,PR0

      360    12254    8                                     FIRST_START$ = PINCRW( FIRST_START$, SIZEW(
             12254                                              VXD$TMPLT ) );

  12254  3 001150   200020 236100                    LDQ     FIRST_START$,,AUTO
         3 001151   000002 036003                    ADLQ    2,DU
         3 001152   200020 756100                    STQ     FIRST_START$,,AUTO

      361    12255    8                                     END;
             12255                                             /* Do while( FIRST_START$ <= FIRST_STOP$ ); */

  12255  3 001153   200021 116100                    CMPQ    FIRST_STOP$,,AUTO
         3 001154   001132 602000 3                  TNC     s:12247
         3 001155   001132 600000 3                  TZE     s:12247

      362    12256    7                                 END;  /* Else do - if FOUND$ = addr(nil) ... */

      363    12257        /**/
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:120  
      364    12258        /**/
      365    12259    6   NOT_FOUND_DESCENDANT:
      366    12260        /**/
      367    12261    7                             IF CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO;

  12261  3 001156   200007 470500       NOT_FOUND_D* LDP0    CURR$,,AUTO
         3 001157   000000 236100                    LDQ     0,,PR0
         3 001160   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001161   001164 600000 3                  TZE     s:12265

      368    12262    7                                 CURR$ = CURR$ -> VX$NODE.SON$;

  12262  3 001162   200007 756100                    STQ     CURR$,,AUTO

      369    12263    7                                 END;
             12263                                       /* If CURR$ -> VX$NODE.SON$ ~= addr(nil) then do; */

  12263  3 001163   001177 710000 3                  TRA     s:12271

      370    12264    7                             ELSE DO;

      371    12265    8                                 DO WHILE( CURR$ -> VX$NODE.BROTHER$ = ADDR(NIL) );

  12265  3 001164   001172 710000 3                  TRA     s:12268

      372    12266    8                                     CURR$ = CURR$ -> VX$NODE.FATHER$;

  12266  3 001165   200007 470500                    LDP0    CURR$,,AUTO
         3 001166   000002 236100                    LDQ     2,,PR0
         3 001167   200007 756100                    STQ     CURR$,,AUTO

      373    12267    8                                     IF CURR$ = VX_CURR$ THEN GOTO EVER_FOUND;

  12267  3 001170   000000 116000 xsym               CMPQ    VX_CURR$
         3 001171   001201 600000 3                  TZE     EVER_FOUND

      374    12268    8                                     END;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:121  

  12268  3 001172   200007 470500                    LDP0    CURR$,,AUTO
         3 001173   000001 236100                    LDQ     1,,PR0
         3 001174   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001175   001165 600000 3                  TZE     s:12266

      375    12269    7                                 CURR$ = CURR$ -> VX$NODE.BROTHER$;

  12269  3 001176   200007 756100                    STQ     CURR$,,AUTO

      376    12270    7                                 END;      /* Else do */

      377    12271    6                             END;          /* Do while( CURR$ ~= addr(nil) ); */

  12271  3 001177   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001200   000611 601000 3                  TNZ     s:12118

      378    12272        %EJECT;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:122  
      379    12273    5   EVER_FOUND:
      380    12274    6                         IF FOUND$ ~= ADDR(NIL) THEN DO;

  12274  3 001201   200010 236100       EVER_FOUND   LDQ     FOUND$,,AUTO
         3 001202   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001203   001652 600000 3                  TZE     s:12479

      381    12275    6                             RESOLVE$ -> VXR$SAT.NODE# = NODE$ -> VX$NODE.NUM;

  12275  3 001204   200011 470500                    LDP0    NODE$,,AUTO
         3 001205   000010 720100                    LXL0    8,,PR0
         3 001206   200022 471500                    LDP1    RESOLVE$,,AUTO
         3 001207   100001 440100                    SXL0    1,,PR1

      382    12276    7                             IF REF_REC = 5 THEN DO;

  12276  3 001210   200031 235100                    LDA     REF_REC,,AUTO
         3 001211   000005 115007                    CMPA    5,DL
         3 001212   001516 601000 3                  TNZ     s:12424

      383    12277    7                                RESOLVE$ -> VXR$SAT.VALUE = FOUND$ -> B$EDEF.OU.OFFSET
             12277                                          ;

  12277  3 001213   200010 473500                    LDP3    FOUND$,,AUTO
         3 001214   300000 236100                    LDQ     0,,PR3
         3 001215   777777 376007                    ANQ     -1,DL
         3 001216   100000 756100                    STQ     0,,PR1

      384    12278    7                                 IF NODE$ -> VX$NODE.DEPTH > VX_CURR$ -> VX$NODE.DEPTH
             12278                                          THEN

  12278  3 001217   000000 474400 xsym               LDP4    VX_CURR$
         3 001220   400011 236100                    LDQ     9,,PR4
         3 001221   000011 116100                    CMPQ    9,,PR0
         3 001222   001225 603000 3                  TRC     s:12280

      385    12279    7                                     RESOLVE$ -> VXR$SAT.BELOW = '1'B/*@TRUE_B*/;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:123  

  12279  3 001223   400000 236003                    LDQ     -131072,DU
         3 001224   100001 256100                    ORSQ    1,,PR1

      386    12280    7                                 FOUND$ -> B$EDEF.LFLAGS.USED = '1'B/*@TRUE_B*/;

  12280  3 001225   010000 236003                    LDQ     4096,DU
         3 001226   300000 256100                    ORSQ    0,,PR3

      387    12281    7                                 IF FOUND$ -> B$EDEF.LFLAGS.SOURCE = 1

  12281  3 001227   300000 236100                    LDQ     0,,PR3
         3 001230   700000 376003                    ANQ     -32768,DU
         3 001231   100000 116003                    CMPQ    32768,DU
         3 001232   001235 601000 3                  TNZ     s:12283

      388    12282    7                                 THEN VX_SLIB_USED = '1'B;

  12282  3 001233   400000 236003                    LDQ     -131072,DU
         3 001234   000000 756000 xsym               STQ     VX_SLIB_USED

      389    12283    7                                 IF FOUND$ -> B$EDEF.CHECK

  12283  3 001235   300001 236100                    LDQ     1,,PR3
         3 001236   100000 316007                    CANQ    32768,DL
         3 001237   002614 600000 3                  TZE     UNSAT_ALREADY_THERE
         3 001240   200004 474500                    LDP4    P$,,AUTO
         3 001241   400000 236100                    LDQ     0,,PR4
         3 001242   100000 316007                    CANQ    32768,DL
         3 001243   002614 600000 3                  TZE     UNSAT_ALREADY_THERE

      390    12284    7                                         AND
      391    12285    8                                         P$ -> B$EREF.CHECK THEN DO;

      392    12286    8                                     IF FOUND$ -> B$EDEF.ALT

  12286  3 001244   300001 236100                    LDQ     1,,PR3
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:124  
         3 001245   400000 676100                    ERQ     0,,PR4
         3 001246   200000 376007                    ANQ     65536,DL
         3 001247   001321 600000 3                  TZE     s:12328

      393    12287    8                                             ~=
      394    12288    9                                             P$ -> B$EREF.ALT THEN DO;

      395    12289        /*E*  ERROR: VXT-E$ENTRY_A_VX-0
      396    12290              MESSAGE: Altret conflict for entry definition: %U1.
      397    12291              DESCRIPTION: Self-explanatory.
      398    12292        */
      399    12293    9                                         VX_EFIELD1.CHARS = PN$ -> B$DNAME.TEXT;

  12293  3 001250   200017 475500                    LDP5    PN$,,AUTO
         3 001251   500000 220100                    LDX0    0,,PR5
         3 001252   040000 100540                    MLR     fill='040'O
         3 001253   500000 400010                    ADSC9   0,,PR5                   cn=2,n=*X0
         3 001254   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      400    12294    9                                         VX_EFIELD1.COUNT = PN$ -> B$DNAME.COUNT;

  12294  3 001255   500000 236100                    LDQ     0,,PR5
         3 001256   000011 736000                    QLS     9
         3 001257   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      401    12295                                              %SCREAM(
      402    12296                                              ERR#=E$ENTRY_A_VX,
      403    12297                                              LEVEL=@E$S_VX,
      404    12298                                              MID="'T'");

  12299  3 001260   000010 630400 4                  EPPR0   8
         3 001261   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001262   000000 701000 xent               TSX1    VXE$ERROR
         3 001263   000000 011000                    NOP     0

      405    12301        /*E*  ERROR: VXT-E$ENTRY_A_C_VX-0
      406    12302              MESSAGE: Definition %U1 while the reference %U2.
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:125  
      407    12303              DESCRIPTION: Self-explanatory.
      408    12304        */
      409    12305   10                                         IF P$ -> B$EREF.ALT THEN DO;

  12305  3 001264   200004 470500                    LDP0    P$,,AUTO
         3 001265   000000 236100                    LDQ     0,,PR0
         3 001266   200000 316007                    CANQ    65536,DL
         3 001267   001277 600000 3                  TZE     s:12310

      410    12306   10                                             VX_EFIELD1 = DOES_NOT_ALLOW;

  12306  3 001270   000000 100400                    MLR     fill='000'O
         3 001271   000340 000017 2                  ADSC9   DOES_NOT_ALLOW           cn=0,n=15
         3 001272   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

      411    12307   10                                             VX_EFIELD2 = ALLOWS;

  12307  3 001273   000000 100400                    MLR     fill='000'O
         3 001274   000344 000007 2                  ADSC9   ALLOWS                   cn=0,n=7
         3 001275   000000 000120 xsym               ADSC9   VX_EFIELD2               cn=0,n=80

      412    12308   10                                             END;

  12308  3 001276   001305 710000 3                  TRA     s:12318

      413    12309   10                                         ELSE DO;

      414    12310   10                                             VX_EFIELD1 = ALLOWS;

  12310  3 001277   000000 100400                    MLR     fill='000'O
         3 001300   000344 000007 2                  ADSC9   ALLOWS                   cn=0,n=7
         3 001301   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

      415    12311   10                                             VX_EFIELD2 = DOES_NOT_ALLOW;

  12311  3 001302   000000 100400                    MLR     fill='000'O
         3 001303   000340 000017 2                  ADSC9   DOES_NOT_ALLOW           cn=0,n=15
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:126  
         3 001304   000000 000120 xsym               ADSC9   VX_EFIELD2               cn=0,n=80

      416    12312   10                                             END; /* Else do; */

      417    12313                                              %SCREAM(
      418    12314                                              ERR#=E$ENTRY_A_C_VX,
      419    12315                                              LEVEL=@E$S_VX,
      420    12316                                              MID="'T'",
      421    12317                                              AUX=@E$REFOUOF_VX);

  12318  3 001305   000015 630400 4                  EPPR0   13
         3 001306   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001307   000000 701000 xent               TSX1    VXE$ERROR
         3 001310   000000 011000                    NOP     0

      422    12320    9                                        VX_ERRORS.CONFLICT.ALTRIT = VX_ERRORS.CONFLICT
             12320                                                  .ALTRIT + 1;

  12320  3 001311   000003 235000 xsym               LDA     VX_ERRORS+3
         3 001312   000001 035007                    ADLA    1,DL
         3 001313   000003 755000 xsym               STA     VX_ERRORS+3

      423    12321                                              %CHECK( SEV = @ALTRIT );

  12322  3 001314   000000 236000 xsym               LDQ     VX_ERR_SEV
         3 001315   000007 116007                    CMPQ    7,DL
         3 001316   001321 603000 3                  TRC     s:12328

  12322  3 001317   000007 235007                    LDA     7,DL
         3 001320   000000 755000 xsym               STA     VX_ERR_SEV

      424    12324    9                                         END;

      425    12325        /**/
      426    12326        /**/
      427    12327        /**/
      428    12328    8                                     IF FOUND$ -> B$EDEF.NPARAM
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:127  

  12328  3 001321   200004 470500                    LDP0    P$,,AUTO
         3 001322   200010 471500                    LDP1    FOUND$,,AUTO
         3 001323   100001 236100                    LDQ     1,,PR1
         3 001324   000000 676100                    ERQ     0,,PR0
         3 001325   003777 376007                    ANQ     2047,DL
         3 001326   001417 600000 3                  TZE     s:12381

      429    12329    8                                             ~=
      430    12330    9                                             P$ -> B$EREF.NPARAM THEN DO;

      431    12331        /*E*  ERROR: VXT-E$ENTRY_NP_VX-0
      432    12332              MESSAGE: Argument/parameter conflict for entry definition: %U1.
      433    12333              DESCRIPTION: Self-explanatory.
      434    12334        */
      435    12335    9                                         VX_EFIELD1.CHARS = PN$ -> B$DNAME.TEXT;

  12335  3 001327   200017 473500                    LDP3    PN$,,AUTO
         3 001330   300000 220100                    LDX0    0,,PR3
         3 001331   040000 100540                    MLR     fill='040'O
         3 001332   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0
         3 001333   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      436    12336    9                                         VX_EFIELD1.COUNT = PN$ -> B$DNAME.COUNT;

  12336  3 001334   300000 236100                    LDQ     0,,PR3
         3 001335   000011 736000                    QLS     9
         3 001336   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      437    12337                                              %SCREAM(
      438    12338                                              ERR#=E$ENTRY_NP_VX,
      439    12339                                              LEVEL=@E$S_VX,
      440    12340                                              MID="'T'");

  12341  3 001337   000022 630400 4                  EPPR0   18
         3 001340   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001341   000000 701000 xent               TSX1    VXE$ERROR
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:128  
         3 001342   000000 011000                    NOP     0

      441    12343        /*E*  ERROR: VXT-E$ENTRY_NP_C_VX-0
      442    12344              MESSAGE: Argument count = %U1 parameter count = %U2.
      443    12345              DESCRIPTION: Self-explanatory.
      444    12346        */
      445    12347    9                                         NP_D = FOUND$ -> B$EDEF.NPARAM;

  12347  3 001343   200010 470500                    LDP0    FOUND$,,AUTO
         3 001344   000001 236100                    LDQ     1,,PR0
         3 001345   003777 376007                    ANQ     2047,DL
         3 001346   200050 756100                    STQ     NP_D,,AUTO

      446    12348    9                                         NP_R = P$ -> B$EREF.NPARAM;

  12348  3 001347   200004 471500                    LDP1    P$,,AUTO
         3 001350   100000 236100                    LDQ     0,,PR1
         3 001351   003777 376007                    ANQ     2047,DL
         3 001352   200051 756100                    STQ     NP_R,,AUTO

      447    12349                                              %NUMBER( NUM1=NP_R, NUM2=NP_D );

  12355  3 001353   000026 236000 4                  LDQ     22
         3 001354   200276 756100                    STQ     BIN_N$+8,,AUTO
         3 001355   200051 633500                    EPPR3   NP_R,,AUTO
         3 001356   200275 453500                    STP3    BIN_N$+7,,AUTO
         3 001357   000003 236000 4                  LDQ     3
         3 001360   200274 756100                    STQ     BIN_N$+6,,AUTO
         3 001361   000030 237000 4                  LDAQ    24
         3 001362   200272 757100                    STAQ    BIN_N$+4,,AUTO
         3 001363   200272 630500                    EPPR0   BIN_N$+4,,AUTO
         3 001364   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001365   000000 701000 xent               TSX1    VXD$B2C
         3 001366   000000 011000                    NOP     0

  12359  3 001367   000026 236000 4                  LDQ     22
         3 001370   200276 756100                    STQ     BIN_N$+8,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:129  
         3 001371   200050 630500                    EPPR0   NP_D,,AUTO
         3 001372   200275 450500                    STP0    BIN_N$+7,,AUTO
         3 001373   000033 236000 4                  LDQ     27
         3 001374   200274 756100                    STQ     BIN_N$+6,,AUTO
         3 001375   000034 237000 4                  LDAQ    28
         3 001376   200272 757100                    STAQ    BIN_N$+4,,AUTO
         3 001377   200272 630500                    EPPR0   BIN_N$+4,,AUTO
         3 001400   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001401   000000 701000 xent               TSX1    VXD$B2C
         3 001402   000000 011000                    NOP     0

      448    12366                                              %SCREAM(
      449    12367                                              ERR#=E$ENTRY_NP_C_VX,
      450    12368                                              LEVEL=@E$S_VX,
      451    12369                                              MID="'T'",
      452    12370                                              AUX=@E$REFOUOF_VX);

  12371  3 001403   000037 630400 4                  EPPR0   31
         3 001404   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001405   000000 701000 xent               TSX1    VXE$ERROR
         3 001406   000000 011000                    NOP     0

      453    12373    9                                         VX_ERRORS.CONFLICT.PARM = VX_ERRORS.CONFLICT.
             12373                                                  PARM + 1;

  12373  3 001407   000004 235000 xsym               LDA     VX_ERRORS+4
         3 001410   000001 035007                    ADLA    1,DL
         3 001411   000004 755000 xsym               STA     VX_ERRORS+4

      454    12374                                              %CHECK( SEV = @PARM );

  12375  3 001412   000000 236000 xsym               LDQ     VX_ERR_SEV
         3 001413   000007 116007                    CMPQ    7,DL
         3 001414   001417 603000 3                  TRC     s:12381

  12375  3 001415   000007 235007                    LDA     7,DL
         3 001416   000000 755000 xsym               STA     VX_ERR_SEV
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:130  

      455    12377    9                                         END;

      456    12378        /**/
      457    12379        /**/
      458    12380        /**/
      459    12381    8                                     CST_D = FOUND$ -> B$EDEF.CST;

  12381  3 001417   200010 470500                    LDP0    FOUND$,,AUTO
         3 001420   000001 236100                    LDQ     1,,PR0
         3 001421   000013 772000                    QRL     11
         3 001422   000017 376007                    ANQ     15,DL
         3 001423   200046 756100                    STQ     CST_D,,AUTO

      460    12382    8                                     CST_R = P$ -> B$EREF.CST;

  12382  3 001424   200004 471500                    LDP1    P$,,AUTO
         3 001425   100000 236100                    LDQ     0,,PR1
         3 001426   000013 772000                    QRL     11
         3 001427   000017 376007                    ANQ     15,DL
         3 001430   200047 756100                    STQ     CST_R,,AUTO

      461    12383    9                                     IF CST_D ~= CST_R THEN DO;

  12383  3 001431   200046 116100                    CMPQ    CST_D,,AUTO
         3 001432   002614 600000 3                  TZE     UNSAT_ALREADY_THERE

      462    12384    9                                         IF CST_R ~= CST_D - 5

  12384  3 001433   200046 236100                    LDQ     CST_D,,AUTO
         3 001434   000005 136007                    SBLQ    5,DL
         3 001435   001443 604000 3                  TMI     s:12391
         3 001436   200047 116100                    CMPQ    CST_R,,AUTO
         3 001437   001443 601000 3                  TNZ     s:12391
         3 001440   200047 235100                    LDA     CST_R,,AUTO
         3 001441   000006 115007                    CMPA    6,DL
         3 001442   002614 601000 3                  TNZ     UNSAT_ALREADY_THERE
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:131  

      463    12385    9                                                 OR
      464    12386   10                                                 CST_R = 6 THEN DO;

      465    12387        /*E*  ERROR: VXT-E$ENTRY_CST_VX-0
      466    12388              MESSAGE: Calling sequence mismatch for entry definition: %U1.
      467    12389              DESCRIPTION: Self-explanatory.
      468    12390        */
      469    12391   10                                             VX_EFIELD1.CHARS = PN$ -> B$DNAME.TEXT;

  12391  3 001443   200017 473500                    LDP3    PN$,,AUTO
         3 001444   300000 220100                    LDX0    0,,PR3
         3 001445   040000 100540                    MLR     fill='040'O
         3 001446   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0
         3 001447   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      470    12392   10                                             VX_EFIELD1.COUNT = PN$ -> B$DNAME.COUNT;

  12392  3 001450   300000 236100                    LDQ     0,,PR3
         3 001451   000011 736000                    QLS     9
         3 001452   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      471    12393                                                  %SCREAM(
      472    12394                                                  ERR#=E$ENTRY_CST_VX,
      473    12395                                                  LEVEL=@E$S_VX,
      474    12396                                                  MID="'T'");

  12397  3 001453   000044 630400 4                  EPPR0   36
         3 001454   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001455   000000 701000 xent               TSX1    VXE$ERROR
         3 001456   000000 011000                    NOP     0

      475    12399        /*E*  ERROR: VXT-E$ENTRY_CST_C_VX-0
      476    12400              MESSAGE: The definition specifies %U1 type while the reference specifies
      477    12401                       %U2 type.
      478    12402              DESCRIPTION: Self-explanatory.
      479    12403        */
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:132  
      480    12404   10                                             VX_EFIELD1.CHARS = CST_TYPE( CST_D );

  12404  3 001457   200046 236100                    LDQ     CST_D,,AUTO
         3 001460   000064 402007                    MPY     52,DL
         3 001461   040000 100406                    MLR     fill='040'O
         3 001462   000000 000062 2                  ADSC9   CST_TYPE,Q               cn=0,n=50
         3 001463   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      481    12405   10                                            VX_EFIELD1.COUNT = CST_TYPE_COUNT( CST_D )
             12405                                                      ;

  12405  3 001464   200046 720100                    LXL0    CST_D,,AUTO
         3 001465   000320 236010 2                  LDQ     CST_TYPE_COUNT,X0
         3 001466   000033 736000                    QLS     27
         3 001467   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      482    12406   10                                             VX_EFIELD2.CHARS = CST_TYPE( CST_R );

  12406  3 001470   200047 236100                    LDQ     CST_R,,AUTO
         3 001471   000064 402007                    MPY     52,DL
         3 001472   040000 100406                    MLR     fill='040'O
         3 001473   000000 000062 2                  ADSC9   CST_TYPE,Q               cn=0,n=50
         3 001474   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79

      483    12407   10                                            VX_EFIELD2.COUNT = CST_TYPE_COUNT( CST_R )
             12407                                                      ;

  12407  3 001475   200047 721100                    LXL1    CST_R,,AUTO
         3 001476   000320 236011 2                  LDQ     CST_TYPE_COUNT,X1
         3 001477   000033 736000                    QLS     27
         3 001500   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      484    12408                                                  %SCREAM(
      485    12409                                                  ERR#=E$ENTRY_CST_C_VX,
      486    12410                                                  LEVEL=@E$S_VX,
      487    12411                                                  MID="'T'",
      488    12412                                                  AUX=@E$REFOUOF_VX);
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:133  

  12413  3 001501   000051 630400 4                  EPPR0   41
         3 001502   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001503   000000 701000 xent               TSX1    VXE$ERROR
         3 001504   000000 011000                    NOP     0

      489    12415   10                                             VX_ERRORS.CONFLICT.CST = VX_ERRORS.
             12415                                                      CONFLICT.CST + 1;

  12415  3 001505   000005 235000 xsym               LDA     VX_ERRORS+5
         3 001506   000001 035007                    ADLA    1,DL
         3 001507   000005 755000 xsym               STA     VX_ERRORS+5

      490    12416                                                  %CHECK( SEV = @CST );

  12417  3 001510   000000 236000 xsym               LDQ     VX_ERR_SEV
         3 001511   000007 116007                    CMPQ    7,DL
         3 001512   002614 603000 3                  TRC     UNSAT_ALREADY_THERE

  12417  3 001513   000007 235007                    LDA     7,DL
         3 001514   000000 755000 xsym               STA     VX_ERR_SEV

      491    12419   10                                             END;
             12419                                           /* If CST_R -5 ~= CST_D or CST_R = 6 then do; */

      492    12420    9                                         END; /* If CST_D ~= CST_R then do; */

      493    12421    8                                     END;

      494    12422    7                                 END;      /* If REF_REF = typeref ... */

  12422  3 001515   002614 710000 3                  TRA     UNSAT_ALREADY_THERE

      495    12423    7                             ELSE DO;

      496    12424    8                                 IF FOUND$ -> VXD$TMPLT.CONSTNT THEN DO;

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:134  
  12424  3 001516   200010 473500                    LDP3    FOUND$,,AUTO
         3 001517   300001 236100                    LDQ     1,,PR3
         3 001520   400000 316007                    CANQ    -131072,DL
         3 001521   001535 600000 3                  TZE     s:12431

      497    12425    8                                     RESOLVE$ -> VXR$SAT.VALUE = FOUND$ -> VXD$TMPLT.
             12425                                              VALUE;

  12425  3 001522   300000 235100                    LDA     0,,PR3
         3 001523   100000 755100                    STA     0,,PR1

      498    12426    8                                    FOUND$ -> VXD$TMPLT.LFLAGS.USED = '1'B/*@TRUE_B*/;

  12426  3 001524   100000 236007                    LDQ     32768,DL
         3 001525   300001 256100                    ORSQ    1,,PR3

      499    12427    8                                     IF FOUND$->VXD$TMPLT.LFLAGS.SOURCE = 1

  12427  3 001526   300001 236100                    LDQ     1,,PR3
         3 001527   074000 376007                    ANQ     30720,DL
         3 001530   004000 116007                    CMPQ    2048,DL
         3 001531   002614 601000 3                  TNZ     UNSAT_ALREADY_THERE

      500    12428    8                                     THEN VX_SLIB_USED = '1'B;

  12428  3 001532   400000 236003                    LDQ     -131072,DU
         3 001533   000000 756000 xsym               STQ     VX_SLIB_USED

      501    12429    8                                     END; /* If FOUND$ -> VXD$TMPLT.CNSTNT then do; */

  12429  3 001534   002614 710000 3                  TRA     UNSAT_ALREADY_THERE

      502    12430    8                                 ELSE DO;

      503    12431    8                                     IF REF_REC = 7 THEN

  12431  3 001535   000007 115007                    CMPA    7,DL
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:135  
         3 001536   001543 601000 3                  TNZ     s:12435

      504    12432    8                                         RESOLVE$ -> VXR$SAT.VALUE =

  12432  3 001537   300000 236100                    LDQ     0,,PR3
         3 001540   777777 376007                    ANQ     -1,DL
         3 001541   100000 756100                    STQ     0,,PR1
         3 001542   001547 710000 3                  TRA     s:12440

      505    12433    8                                                 FOUND$ -> B$SDEF.AD.OU.OFFSET;
      506    12434    9                                     ELSE DO;

      507    12435    9                                         RESOLVE$ -> VXR$SAT.SEG.OFFSET =

  12435  3 001543   300000 721100                    LXL1    0,,PR3
         3 001544   100000 741100                    STX1    0,,PR1

      508    12436    9                                                 FOUND$->B$SEGDEF.AD.OU.OFFSET;
      509    12437    9                                         RESOLVE$ -> VXR$SAT.SEG.SEGID =

  12437  3 001545   300001 236100                    LDQ     1,,PR3
         3 001546   100000 752103                    STCQ    0,'03'O,PR1

      510    12438    9                                                 FOUND$ -> B$SEGDEF.SEG.SEGID;
      511    12439    9                                         END;

      512    12440    9                                     IF P$ -> VXR$TMPLT.READ_ONLY THEN DO;

  12440  3 001547   200004 474500                    LDP4    P$,,AUTO
         3 001550   400000 236100                    LDQ     0,,PR4
         3 001551   200000 316007                    CANQ    65536,DL
         3 001552   001630 600000 3                  TZE     s:12468

      513    12441    9                                         IF FOUND$ -> VXD$TMPLT.PROTECTION.TYPE ~= 1

  12441  3 001553   300001 236100                    LDQ     1,,PR3
         3 001554   370000 376007                    ANQ     126976,DL
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:136  
         3 001555   010000 116007                    CMPQ    4096,DL
         3 001556   001630 600000 3                  TZE     s:12468
         3 001557   060000 116007                    CMPQ    24576,DL
         3 001560   001630 600000 3                  TZE     s:12468
         3 001561   070000 116007                    CMPQ    28672,DL
         3 001562   001630 600000 3                  TZE     s:12468
         3 001563   100000 116007                    CMPQ    32768,DL
         3 001564   001630 600000 3                  TZE     s:12468

      514    12442    9                                                 AND FOUND$ -> VXD$TMPLT.PROTECTION.
             12442                                                          TYPE ~= 6
      515    12443    9                                                 AND FOUND$->VXD$TMPLT.PROTECTION.TYPE
             12443                                                          ~= 7
      516    12444    9                                                 AND FOUND$->VXD$TMPLT.PROTECTION.TYPE
             12444                                                          ~= 8
      517    12445   10                                         THEN DO;

      518    12446        /*E*  ERROR: VXT-E$PRO_MIS_VX-0
      519    12447        MESSAGE: Protection type mismatch for %U1 definition: %U2.
      520    12448                 The reference specifies READ ONLY while the definition specifies %U3.
      521    12449        DESCRIPTION: Protection type specified for data or segment definition
      522    12450                     incompatible with protection type specified for the reference
      523    12451        */
      524    12452   10                                             IF REF_REC = 7

  12452  3 001565   200031 235100                    LDA     REF_REC,,AUTO
         3 001566   000007 115007                    CMPA    7,DL
         3 001567   001574 601000 3                  TNZ     s:12454

      525    12453   10                                             THEN VX_EFIELD1 = DATA_DEF;

  12453  3 001570   000000 100400                    MLR     fill='000'O
         3 001571   000346 000005 2                  ADSC9   DATA_DEF                 cn=0,n=5
         3 001572   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80
         3 001573   001577 710000 3                  TRA     s:12455

      526    12454   10                                             ELSE VX_EFIELD1 = SEG_DEF;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:137  

  12454  3 001574   000000 100400                    MLR     fill='000'O
         3 001575   000350 000010 2                  ADSC9   SEG_DEF                  cn=0,n=8
         3 001576   000000 000120 xsym               ADSC9   VX_EFIELD1               cn=0,n=80

      527    12455   10                                             VX_EFIELD2.COUNT = PN$ -> B$DNAME.COUNT;

  12455  3 001577   200017 475500                    LDP5    PN$,,AUTO
         3 001600   500000 236100                    LDQ     0,,PR5
         3 001601   000011 736000                    QLS     9
         3 001602   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      528    12456   10                                             VX_EFIELD2.CHARS = PN$ -> B$DNAME.TEXT;

  12456  3 001603   500000 220100                    LDX0    0,,PR5
         3 001604   040000 100540                    MLR     fill='040'O
         3 001605   500000 400010                    ADSC9   0,,PR5                   cn=2,n=*X0
         3 001606   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79

      529    12457   10                                             L = R$ -> VX$SC.TYPE;

  12457  3 001607   200006 476500                    LDP6    R$,,AUTO
         3 001610   600000 236100                    LDQ     0,,PR6
         3 001611   000033 772000                    QRL     27
         3 001612   000077 376007                    ANQ     63,DL
         3 001613   200030 756100                    STQ     L,,AUTO

      530    12458   10                                             VX_EFIELD3.COUNT = PRO_TYPE_COUNT(L);

  12458  3 001614   000421 236006 2                  LDQ     PRO_TYPE_COUNT,QL
         3 001615   000033 736000                    QLS     27
         3 001616   000000 552040 xsym               STBQ    VX_EFIELD3,'40'O

      531    12459   10                                             VX_EFIELD3.CHARS = PRO_TYPE(L);

  12459  3 001617   200030 236100                    LDQ     L,,AUTO
         3 001620   000021 402007                    MPY     17,DL
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:138  
         3 001621   040000 100406                    MLR     fill='040'O
         3 001622   000352 000021 2                  ADSC9   PRO_TYPE,Q               cn=0,n=17
         3 001623   000000 200117 xsym               ADSC9   VX_EFIELD3               cn=1,n=79

      532    12460                                                  %SCREAM(
      533    12461                                                  ERR#=E$PRO_MIS_VX,
      534    12462                                                  LEVEL=@E$W_VX, MID="'T'",
      535    12463                                                  AUX=E$REFOUOF_VX );

  12464  3 001624   000056 630400 4                  EPPR0   46
         3 001625   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001626   000000 701000 xent               TSX1    VXE$ERROR
         3 001627   000000 011000                    NOP     0

      536    12466   10                                             END;

      537    12467    9                                         END;

      538    12468    8                                     IF NODE$ -> VX$NODE.DEPTH > VX_CURR$ -> VX$NODE.
             12468                                              DEPTH THEN

  12468  3 001630   000000 470400 xsym               LDP0    VX_CURR$
         3 001631   200011 471500                    LDP1    NODE$,,AUTO
         3 001632   000011 236100                    LDQ     9,,PR0
         3 001633   100011 116100                    CMPQ    9,,PR1
         3 001634   001640 603000 3                  TRC     s:12470

      539    12469    8                                         RESOLVE$ -> VXR$SAT.BELOW = '1'B/*@TRUE_B*/;

  12469  3 001635   200022 473500                    LDP3    RESOLVE$,,AUTO
         3 001636   400000 236003                    LDQ     -131072,DU
         3 001637   300001 256100                    ORSQ    1,,PR3

      540    12470    8                                     FOUND$ -> VXD$TMPLT.AD.LFLAGS.USED = '1'B
             12470                                              /*@TRUE_B*/;

  12470  3 001640   200010 473500                    LDP3    FOUND$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:139  
         3 001641   010000 236003                    LDQ     4096,DU
         3 001642   300000 256100                    ORSQ    0,,PR3

      541    12471    8                                     IF FOUND$->VXD$TMPLT.AD.LFLAGS.SOURCE = 1

  12471  3 001643   300000 236100                    LDQ     0,,PR3
         3 001644   700000 376003                    ANQ     -32768,DU
         3 001645   100000 116003                    CMPQ    32768,DU
         3 001646   002614 601000 3                  TNZ     UNSAT_ALREADY_THERE

      542    12472    8                                     THEN VX_SLIB_USED = '1'B;

  12472  3 001647   400000 236003                    LDQ     -131072,DU
         3 001650   000000 756000 xsym               STQ     VX_SLIB_USED

      543    12473    8                                     END;
             12473                                     /* Else do - if FOUND$ -> VXD$TMPLT.CONSTNT then do */

      544    12474    7                                 END; /* Else do - if REF_REC = typeref then do; */

      545    12475    6                             END;          /* If FOUND$ ~= addr(nil) then do */

  12475  3 001651   002614 710000 3                  TRA     UNSAT_ALREADY_THERE

      546    12476        %EJECT;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:140  
      547    12477    6                         ELSE DO;

      548    12478        /* Here => unsatisfied */
      549    12479    7                             IF REF_REC = 9 THEN DO;

  12479  3 001652   200031 235100                    LDA     REF_REC,,AUTO
         3 001653   000011 115007                    CMPA    9,DL
         3 001654   002013 601000 3                  TNZ     s:12553

      550    12480    7                                 BIN_START$ = ADDR( VX_SD );

  12480  3 001655   000062 236000 4                  LDQ     50
         3 001656   200263 756100                    STQ     BIN_START$,,AUTO

      551    12481    7                                 BIN_STOP$ = VX_SD_STOP$;

  12481  3 001657   000000 236000 xsym               LDQ     VX_SD_STOP$
         3 001660   200264 756100                    STQ     BIN_STOP$,,AUTO

      552    12482    7                                 BIN_N$ = ADDR( VX_SN );

  12482  3 001661   000063 236000 4                  LDQ     51
         3 001662   200266 756100                    STQ     BIN_N$,,AUTO

      553    12483                                      %BIN_SEARCH(
      554    12484                                      START$=BIN_START$,
      555    12485                                      STOP$=BIN_STOP$,
      556    12486                                      RESULT$=FOUND$,
      557    12487                                      N$=BIN_N$,
      558    12488                                      MATCH$=PN$,
      559    12489                                      NAME_DISP=2,
      560    12490                                      SIZE="SIZEW(VXD$TMPLT)",
      561    12491                                      NEG=%@COMMENT,
      562    12492                                      GEN=%@TNEMMOC,
      563    12493                                      FOUND=FOUND_SEGREF,
      564    12494                                      SPLIT=BIN_SPLIT_S,
      565    12495                                      CHECK=BIN_CHECK_S,
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:141  
      566    12496                                      ALTRETURN=NOT_FOUND_SEGREF,
      567    12497                                      EMPTY=NOT_FOUND_SEGREF);
             12499    7           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND_SEGREF;

  12499  3 001663   200263 236100                    LDQ     BIN_START$,,AUTO
         3 001664   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 001665   002017 600000 3                  TZE     NOT_FOUND_SEGREF

             12500    8           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) < 17 THEN DO;

  12500  3 001666   200263 235100                    LDA     BIN_START$,,AUTO
         3 001667   000022 771000                    ARL     18
         3 001670   200272 755100                    STA     BIN_N$+4,,AUTO
         3 001671   200264 236100                    LDQ     BIN_STOP$,,AUTO
         3 001672   000022 772000                    QRL     18
         3 001673   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 001674   000002 506007                    DIV     2,DL
         3 001675   000021 116007                    CMPQ    17,DL
         3 001676   001732 605000 3                  TPL     s:12517

             12501    8              FOUND$ = BIN_START$;            /* Sequential search                  */

  12501  3 001677   200263 236100                    LDQ     BIN_START$,,AUTO
         3 001700   200010 756100                    STQ     FOUND$,,AUTO

             12502    9              DO WHILE( FOUND$ <= BIN_STOP$ );

  12502  3 001701   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 001702   001704 600000 3                  TZE     s:12503
         3 001703   001731 603000 3                  TRC     s:12514

             12503    9                 BIN_NTEMP$ = PINCRW( BIN_N$, FOUND$ -> VX$TMPLT.A(2) );

  12503  3 001704   200010 470500                    LDP0    FOUND$,,AUTO
         3 001705   000001 220100                    LDX0    1,,PR0
         3 001706   000000 636010                    EAQ     0,X0
         3 001707   200266 036100                    ADLQ    BIN_N$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:142  
         3 001710   200261 756100                    STQ     BIN_NTEMP$,,AUTO

             12504    9                 IF BIN_NTEMP$ -> B$DNAME.TEXT

  12504  3 001711   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 001712   100000 221100                    LDX1    0,,PR1
         3 001713   200017 473500                    LDP3    PN$,,AUTO
         3 001714   300000 222100                    LDX2    0,,PR3
         3 001715   040140 106540                    CMPC    fill='040'O
         3 001716   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         3 001717   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 001720   001723 602000 3                  TNC     s:12512

             12505    9                   >=
             12506   10                   PN$ -> B$DNAME.TEXT THEN DO;

             12507   10                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  12507  3 001721   002007 600000 3                  TZE     FOUND_SEGREF

             12508   10                      =
             12509   10                      PN$ -> B$DNAME.TEXT THEN GOTO FOUND_SEGREF;
             12510   10                    ELSE GOTO NOT_FOUND_SEGREF;

  12510  3 001722   002017 710000 3                  TRA     NOT_FOUND_SEGREF

             12511   10                    END;
             12512    9                 FOUND$ = PINCRW( FOUND$, SIZEW(VXD$TMPLT) );

  12512  3 001723   200010 236100                    LDQ     FOUND$,,AUTO
         3 001724   000002 036003                    ADLQ    2,DU
         3 001725   200010 756100                    STQ     FOUND$,,AUTO

             12513    9                 END;                      /* Do while                           */

  12513  3 001726   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 001727   001704 602000 3                  TNC     s:12503
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:143  
         3 001730   001704 600000 3                  TZE     s:12503

             12514    8              GOTO NOT_FOUND_SEGREF;

  12514  3 001731   002017 710000 3                  TRA     NOT_FOUND_SEGREF

             12515    8              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12516    8           ELSE DO;                        /* Binary search                      */

             12517    8              BIN_LOW = 0;

  12517  3 001732   200256 450100                    STZ     BIN_LOW,,AUTO

             12518    8              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXD$TMPLT) + 2;

  12518  3 001733   200263 235100                    LDA     BIN_START$,,AUTO
         3 001734   000022 771000                    ARL     18
         3 001735   200272 755100                    STA     BIN_N$+4,,AUTO
         3 001736   200264 236100                    LDQ     BIN_STOP$,,AUTO
         3 001737   000022 772000                    QRL     18
         3 001740   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 001741   000002 506007                    DIV     2,DL
         3 001742   000002 036007                    ADLQ    2,DL
         3 001743   200257 756100                    STQ     BIN_HIGH,,AUTO

             12519    8              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXD$TMPLT) );

  12519  3 001744   200263 236100                    LDQ     BIN_START$,,AUTO
         3 001745   777776 036003                    ADLQ    -2,DU
         3 001746   200262 756100                    STQ     BIN_START1$,,AUTO

  12519  3 001747                       BIN_SPLIT_S  null
             12520    8   BIN_SPLIT_S:     ;
             12521    8              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  12521  3 001747   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 001750   200257 036100                    ADLQ    BIN_HIGH,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:144  
         3 001751   000001 772000                    QRL     1
         3 001752   200260 756100                    STQ     BIN_MID,,AUTO

             12522    8              FOUND$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXD$TMPLT) );

  12522  3 001753   000023 736000                    QLS     19
         3 001754   200262 036100                    ADLQ    BIN_START1$,,AUTO
         3 001755   200010 756100                    STQ     FOUND$,,AUTO

             12523    8              BIN_NTEMP$ = PINCRW( BIN_N$, FOUND$ -> VX$TMPLT.A(2) );

  12523  3 001756   200010 470500                    LDP0    FOUND$,,AUTO
         3 001757   000001 220100                    LDX0    1,,PR0
         3 001760   000000 636010                    EAQ     0,X0
         3 001761   200266 036100                    ADLQ    BIN_N$,,AUTO
         3 001762   200261 756100                    STQ     BIN_NTEMP$,,AUTO

             12524    8              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12524  3 001763   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 001764   100000 221100                    LDX1    0,,PR1
         3 001765   200017 473500                    LDP3    PN$,,AUTO
         3 001766   300000 222100                    LDX2    0,,PR3
         3 001767   040140 106540                    CMPC    fill='040'O
         3 001770   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         3 001771   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         3 001772   001776 603000 3                  TRC     s:12530

             12525    8                <
             12526    9                PN$ -> B$DNAME.TEXT THEN DO;

             12527    9                 BIN_LOW = BIN_MID;

  12527  3 001773   200260 235100                    LDA     BIN_MID,,AUTO
         3 001774   200256 755100                    STA     BIN_LOW,,AUTO

             12528    9                 GOTO BIN_CHECK_S;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:145  

  12528  3 001775   002002 710000 3                  TRA     BIN_CHECK_S

             12529    9                 END;
             12530    8              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12530  3 001776   002007 602000 3                  TNC     FOUND_SEGREF
         3 001777   002007 600000 3                  TZE     FOUND_SEGREF

             12531    8                >
             12532    9                PN$ -> B$DNAME.TEXT THEN DO;

             12533    9                 BIN_HIGH = BIN_MID;

  12533  3 002000   200260 235100                    LDA     BIN_MID,,AUTO
         3 002001   200257 755100                    STA     BIN_HIGH,,AUTO

  12533  3 002002                       BIN_CHECK_S  null
             12534    9   BIN_CHECK_S:        ;
             12535    9                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_S;

  12535  3 002002   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 002003   000001 036007                    ADLQ    1,DL
         3 002004   200257 116100                    CMPQ    BIN_HIGH,,AUTO
         3 002005   001747 602000 3                  TNC     BIN_SPLIT_S

             12536                                                /* Here => looping or not found       */
             12537                                      /* Result -> < match => a boundary condition    */
             12538    9                 /*
             12539    9                   IF PINCRW( BIN_N$, FOUND$ -> VX$TMPLT.A(2) ) -> B$DNAME.TEXT
             12540    9                   <
             12541    9                  PN$ -> B$DNAME.TEXT THEN FOUND$ = PINCRW( FOUND$, SIZEW(VXD$TMPLT) )
             12541                            ;
             12542    9                 /**/
             12543    9                   GOTO NOT_FOUND_SEGREF;

  12543  3 002006   002017 710000 3                  TRA     NOT_FOUND_SEGREF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:146  

             12544    9                 END;
             12545    8              END;                         /* Else do;                           */
             12546    7   FOUND_SEGREF:
             12547        /* Here -> found */
      568    12549        /* Here => found segref */
      569    12550    7                                 RESOLVE$ -> VXR$SAT.VALUE = FOUND$ -> B$SEGDEF.VALUE;

  12550  3 002007   000000 235100       FOUND_SEGREF LDA     0,,PR0
         3 002010   200022 474500                    LDP4    RESOLVE$,,AUTO
         3 002011   400000 755100                    STA     0,,PR4

      570    12551    7                                 END;

  12551  3 002012   002614 710000 3                  TRA     UNSAT_ALREADY_THERE

      571    12552    7                             ELSE DO;

      572    12553    7                                 RESOLVE$ -> VXR$SAT.VALUE = VX_PROGRAM_BIAS.I.DATA;

  12553  3 002013   200022 470500                    LDP0    RESOLVE$,,AUTO
         3 002014   000000 235000 xsym               LDA     VX_PROGRAM_BIAS
         3 002015   000000 755100                    STA     0,,PR0

      573    12554    8                                 DO WHILE( '0'B );

  12554  3 002016   002022 710000 3                  TRA     s:12558

      574    12555    8   NOT_FOUND_SEGREF:                       /* Here => segref has not been found */
      575    12556    8                                     RESOLVE$ -> VXR$SAT.VALUE = VX_SPC.SEG.VALUE.NUL;

  12556  3 002017   200022 470500       NOT_FOUND_S* LDP0    RESOLVE$,,AUTO
         3 002020   000011 235000 xsym               LDA     VX_SPC+9
         3 002021   000000 755100                    STA     0,,PR0

      576    12557    8                                     END;

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:147  
      577    12558    7                                 BIN_START$ = VX_PASS2_REF.UNSAT.L_START_A$(I);

  12558  3 002022   200025 720100                    LXL0    I,,AUTO
         3 002023   000054 236010 xsym               LDQ     VX_PASS2_REF+44,X0
         3 002024   200263 756100                    STQ     BIN_START$,,AUTO

      578    12559    7                                BIN_STOP$ = PINCRW( VX_PASS2_REF.UNSAT.L_STOP_A$(I), -
             12559                                          SIZEW(VXR$TMPLT) );

  12559  3 002025   000060 236010 xsym               LDQ     VX_PASS2_REF+48,X0
         3 002026   777777 036003                    ADLQ    -1,DU
         3 002027   200264 756100                    STQ     BIN_STOP$,,AUTO

      579    12560    7                                 BIN_N$ = VX_PASS2_REF.UNSAT.L_START.RN$;

  12560  3 002030   000054 236000 xsym               LDQ     VX_PASS2_REF+44
         3 002031   200266 756100                    STQ     BIN_N$,,AUTO

      580    12561                                      %BIN_SEARCH(
      581    12562                                      START$=BIN_START$,
      582    12563                                      STOP$=BIN_STOP$,
      583    12564                                      RESULT$=BIN_RESULT$,
      584    12565                                      N$=BIN_N$,
      585    12566                                      MATCH$=PN$,
      586    12567                                      NAME_DISP=0,
      587    12568                                      SIZE="SIZEW(VXR$TMPLT)",
      588    12569                                      ADDITIVE="- VX_PASS2_REF.UNSAT.PREV_RN_SIZE",
      589    12570                                      NEG=" ",
      590    12571                                      GEN=" ",
      591    12572                                      FOUND=FOUND_UNSAT,
      592    12573                                      SPLIT=BIN_SPLIT_U,
      593    12574                                      CHECK=BIN_CHECK_U,
      594    12575                                      ALTRETURN=NOT_FOUND_SEARCH,
      595    12576                                      EMPTY=NOT_FOUND_SEARCH);
             12578    7           IF BIN_START$ = ADDR(NIL) THEN GOTO NOT_FOUND_SEARCH;

  12578  3 002032   200263 236100                    LDQ     BIN_START$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:148  
         3 002033   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002034   002246 600000 3                  TZE     NOT_FOUND_SEARCH

             12579    8           IF POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXR$TMPLT) < 17 THEN DO;

  12579  3 002035   200263 235100                    LDA     BIN_START$,,AUTO
         3 002036   000022 771000                    ARL     18
         3 002037   200272 755100                    STA     BIN_N$+4,,AUTO
         3 002040   200264 236100                    LDQ     BIN_STOP$,,AUTO
         3 002041   000022 772000                    QRL     18
         3 002042   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 002043   000021 116007                    CMPQ    17,DL
         3 002044   002102 605000 3                  TPL     s:12596

             12580    8              BIN_RESULT$ = BIN_START$;        /* Sequential search                 */

  12580  3 002045   200263 236100                    LDQ     BIN_START$,,AUTO
         3 002046   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12581    9              DO WHILE( BIN_RESULT$ <= BIN_STOP$ );

  12581  3 002047   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 002050   002052 600000 3                  TZE     s:12582
         3 002051   002101 603000 3                  TRC     s:12593

             12582    9                 BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(0) -
             12582                          VX_PASS2_REF.UNSAT.PREV_RN_SIZE );

  12582  3 002052   200265 470500                    LDP0    BIN_RESULT$,,AUTO
         3 002053   000000 236100                    LDQ     0,,PR0
         3 002054   000022 772000                    QRL     18
         3 002055   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002056   000022 736000                    QLS     18
         3 002057   200266 036100                    ADLQ    BIN_N$,,AUTO
         3 002060   200261 756100                    STQ     BIN_NTEMP$,,AUTO

             12583    9                 IF BIN_NTEMP$ -> B$DNAME.TEXT
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:149  

  12583  3 002061   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 002062   100000 220100                    LDX0    0,,PR1
         3 002063   200017 473500                    LDP3    PN$,,AUTO
         3 002064   300000 221100                    LDX1    0,,PR3
         3 002065   040140 106540                    CMPC    fill='040'O
         3 002066   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0
         3 002067   300000 400011                    ADSC9   0,,PR3                   cn=2,n=*X1
         3 002070   002073 602000 3                  TNC     s:12591

             12584    9                   >=
             12585   10                   PN$ -> B$DNAME.TEXT THEN DO;

             12586   10                    IF BIN_NTEMP$ -> B$DNAME.TEXT

  12586  3 002071   002201 600000 3                  TZE     FOUND_UNSAT

             12587   10                      =
             12588   10                      PN$ -> B$DNAME.TEXT THEN GOTO FOUND_UNSAT;
             12589   10                    ELSE GOTO NOT_FOUND_SEARCH;

  12589  3 002072   002246 710000 3                  TRA     NOT_FOUND_SEARCH

             12590   10                    END;
             12591    9                 BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(VXR$TMPLT) );

  12591  3 002073   200265 236100                    LDQ     BIN_RESULT$,,AUTO
         3 002074   000001 036003                    ADLQ    1,DU
         3 002075   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12592    9                 END;                      /* Do while                           */

  12592  3 002076   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 002077   002052 602000 3                  TNC     s:12582
         3 002100   002052 600000 3                  TZE     s:12582

             12593    8              GOTO NOT_FOUND_SEARCH;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:150  

  12593  3 002101   002246 710000 3                  TRA     NOT_FOUND_SEARCH

             12594    8              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12595    8           ELSE DO;                        /* Binary search                      */

             12596    8              BIN_LOW = 0;

  12596  3 002102   200256 450100                    STZ     BIN_LOW,,AUTO

             12597    8              BIN_HIGH = POFFW( BIN_STOP$, BIN_START$ ) / SIZEW(VXR$TMPLT) + 2;

  12597  3 002103   200272 755100                    STA     BIN_N$+4,,AUTO
         3 002104   200264 236100                    LDQ     BIN_STOP$,,AUTO
         3 002105   000022 772000                    QRL     18
         3 002106   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 002107   000002 036007                    ADLQ    2,DL
         3 002110   200257 756100                    STQ     BIN_HIGH,,AUTO

             12598    8              BIN_START1$ = PINCRW( BIN_START$, -SIZEW(VXR$TMPLT) );

  12598  3 002111   200263 236100                    LDQ     BIN_START$,,AUTO
         3 002112   777777 036003                    ADLQ    -1,DU
         3 002113   200262 756100                    STQ     BIN_START1$,,AUTO

  12598  3 002114                       BIN_SPLIT_U  null
             12599    8   BIN_SPLIT_U:     ;
             12600    8              BIN_MID = ( BIN_LOW + BIN_HIGH ) / 2;

  12600  3 002114   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 002115   200257 036100                    ADLQ    BIN_HIGH,,AUTO
         3 002116   000001 772000                    QRL     1
         3 002117   200260 756100                    STQ     BIN_MID,,AUTO

             12601    8              BIN_RESULT$ = PINCRW( BIN_START1$, BIN_MID*SIZEW(VXR$TMPLT) );

  12601  3 002120   000022 736000                    QLS     18
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:151  
         3 002121   200262 036100                    ADLQ    BIN_START1$,,AUTO
         3 002122   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12602    8             BIN_NTEMP$ = PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(0) - VX_PASS2_REF.
             12602                       UNSAT.PREV_RN_SIZE );

  12602  3 002123   200265 470500                    LDP0    BIN_RESULT$,,AUTO
         3 002124   000000 236100                    LDQ     0,,PR0
         3 002125   000022 772000                    QRL     18
         3 002126   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002127   000022 736000                    QLS     18
         3 002130   200266 036100                    ADLQ    BIN_N$,,AUTO
         3 002131   200261 756100                    STQ     BIN_NTEMP$,,AUTO

             12603    8              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12603  3 002132   200261 471500                    LDP1    BIN_NTEMP$,,AUTO
         3 002133   100000 220100                    LDX0    0,,PR1
         3 002134   200017 473500                    LDP3    PN$,,AUTO
         3 002135   300000 221100                    LDX1    0,,PR3
         3 002136   040140 106540                    CMPC    fill='040'O
         3 002137   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0
         3 002140   300000 400011                    ADSC9   0,,PR3                   cn=2,n=*X1
         3 002141   002145 603000 3                  TRC     s:12609

             12604    8                <
             12605    9                PN$ -> B$DNAME.TEXT THEN DO;

             12606    9                 BIN_LOW = BIN_MID;

  12606  3 002142   200260 235100                    LDA     BIN_MID,,AUTO
         3 002143   200256 755100                    STA     BIN_LOW,,AUTO

             12607    9                 GOTO BIN_CHECK_U;

  12607  3 002144   002151 710000 3                  TRA     BIN_CHECK_U

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:152  
             12608    9                 END;
             12609    8              IF BIN_NTEMP$ -> B$DNAME.TEXT

  12609  3 002145   002201 602000 3                  TNC     FOUND_UNSAT
         3 002146   002201 600000 3                  TZE     FOUND_UNSAT

             12610    8                >
             12611    9                PN$ -> B$DNAME.TEXT THEN DO;

             12612    9                 BIN_HIGH = BIN_MID;

  12612  3 002147   200260 235100                    LDA     BIN_MID,,AUTO
         3 002150   200257 755100                    STA     BIN_HIGH,,AUTO

  12612  3 002151                       BIN_CHECK_U  null
             12613    9   BIN_CHECK_U:        ;
             12614    9                 IF BIN_LOW + 1    < BIN_HIGH THEN GOTO BIN_SPLIT_U;

  12614  3 002151   200256 236100                    LDQ     BIN_LOW,,AUTO
         3 002152   000001 036007                    ADLQ    1,DL
         3 002153   200257 116100                    CMPQ    BIN_HIGH,,AUTO
         3 002154   002114 602000 3                  TNC     BIN_SPLIT_U

             12615                                                /* Here => looping or not found       */
             12616                                      /* Result -> < match => a boundary condition    */
             12618    9                  IF PINCRW( BIN_N$, BIN_RESULT$ -> VX$TMPLT.A(0) - VX_PASS2_REF.UNSAT
             12618                            .PREV_RN_SIZE ) -> B$DNAME.TEXT

  12618  3 002155   000000 236100                    LDQ     0,,PR0
         3 002156   000022 772000                    QRL     18
         3 002157   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002160   200272 756100                    STQ     BIN_N$+4,,AUTO
         3 002161   000000 236100                    LDQ     0,,PR0
         3 002162   000022 772000                    QRL     18
         3 002163   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002164   200266 474500                    LDP4    BIN_N$,,AUTO
         3 002165   400000 220106                    LDX0    0,QL,PR4
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:153  
         3 002166   300000 221100                    LDX1    0,,PR3
         3 002167   200272 236100                    LDQ     BIN_N$+4,,AUTO
         3 002170   000002 736000                    QLS     2
         3 002171   040140 106546                    CMPC    fill='040'O
         3 002172   400000 400010                    ADSC9   0,Q,PR4                  cn=2,n=*X0
         3 002173   300000 400011                    ADSC9   0,,PR3                   cn=2,n=*X1
         3 002174   002200 603000 3                  TRC     s:12622

             12619    9                   <
             12620    9                   PN$ -> B$DNAME.TEXT THEN BIN_RESULT$ = PINCRW( BIN_RESULT$, SIZEW(
             12620                            VXR$TMPLT) );

  12620  3 002175   200265 236100                    LDQ     BIN_RESULT$,,AUTO
         3 002176   000001 036003                    ADLQ    1,DU
         3 002177   200265 756100                    STQ     BIN_RESULT$,,AUTO

             12622    9                   GOTO NOT_FOUND_SEARCH;

  12622  3 002200   002246 710000 3                  TRA     NOT_FOUND_SEARCH

             12623    9                 END;
             12624    8              END;                         /* Else do;                           */
             12625    7   FOUND_UNSAT:
             12626        /* Here -> found */
      596    12628        /* Here => found */
      597    12629    7                                 INSERT$ = BIN_RESULT$;

  12629  3 002201   200265 236100       FOUND_UNSAT  LDQ     BIN_RESULT$,,AUTO
         3 002202   200024 756100                    STQ     INSERT$,,AUTO

      598    12630    7                                 IF VX_REF_EXPONENTIAL_SWITCH THEN GOTO
             12630                                          UNSAT_ALREADY_THERE;

  12630  3 002203   000000 234000 xsym               SZN     VX_REF_EXPONENTIAL_SWITCH
         3 002204   002614 604000 3                  TMI     UNSAT_ALREADY_THERE

      599    12631    7                                 IF VX_PRIMARY_ENTDEF_GOT AND WILL_FIT THEN GOTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:154  
             12631                                          SEARCH_SECONDARY;

  12631  3 002205   000000 234000 xsym               SZN     VX_PRIMARY_ENTDEF_GOT
         3 002206   002211 605000 3                  TPL     s:12633
         3 002207   200003 234100                    SZN     WILL_FIT,,AUTO
         3 002210   002251 604000 3                  TMI     SEARCH_SECONDARY

      600    12632        /**/
      601    12633    8                                 DO WHILE( INSERT$ >= BIN_START$ );

  12633  3 002211   200263 116100                    CMPQ    BIN_START$,,AUTO
         3 002212   002245 602000 3                  TNC     s:12641

      602    12634    8                                    IF PINCRW( BIN_N$, INSERT$ -> VXR$TMPLT.NPOINTER -
             12634                                              VX_PASS2_REF.UNSAT.PREV_RN_SIZE )

  12634  3 002213   200024 470500                    LDP0    INSERT$,,AUTO
         3 002214   000000 236100                    LDQ     0,,PR0
         3 002215   000022 732000                    QRS     18
         3 002216   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002217   200272 756100                    STQ     BIN_N$+4,,AUTO
         3 002220   000000 236100                    LDQ     0,,PR0
         3 002221   000022 732000                    QRS     18
         3 002222   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002223   200266 471500                    LDP1    BIN_N$,,AUTO
         3 002224   100000 220106                    LDX0    0,QL,PR1
         3 002225   200017 473500                    LDP3    PN$,,AUTO
         3 002226   300000 221100                    LDX1    0,,PR3
         3 002227   200272 235100                    LDA     BIN_N$+4,,AUTO
         3 002230   000002 735000                    ALS     2
         3 002231   040140 106545                    CMPC    fill='040'O
         3 002232   100000 400010                    ADSC9   0,A,PR1                  cn=2,n=*X0
         3 002233   300000 400011                    ADSC9   0,,PR3                   cn=2,n=*X1
         3 002234   002417 601000 3                  TNZ     STEP_FORWARD_ONCE

      603    12635    8                                             -> B$DNAME.TEXT
      604    12636    8                                             ~=
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:155  
      605    12637    8                                             PN$ -> B$DNAME.TEXT THEN GOTO
             12637                                                      STEP_FORWARD_ONCE;
      606    12638    8                                     IF NOT INSERT$ -> VXR$TMPLT.GOT THEN GOTO
             12638                                              UNSAT_ALREADY_THERE;

  12638  3 002235   000000 236100                    LDQ     0,,PR0
         3 002236   100000 316007                    CANQ    32768,DL
         3 002237   002614 600000 3                  TZE     UNSAT_ALREADY_THERE

      607    12639    8                                     INSERT$ = PINCRW(INSERT$, -SIZEW(VXR$TMPLT));

  12639  3 002240   200024 236100                    LDQ     INSERT$,,AUTO
         3 002241   777777 036003                    ADLQ    -1,DU
         3 002242   200024 756100                    STQ     INSERT$,,AUTO

      608    12640    8                                     END; /* Do while( INSERT$     >= BIN_START$ ); */

  12640  3 002243   200263 116100                    CMPQ    BIN_START$,,AUTO
         3 002244   002213 603000 3                  TRC     s:12634

      609    12641    7                                 GOTO STEP_FORWARD_ONCE;

  12641  3 002245   002417 710000 3                  TRA     STEP_FORWARD_ONCE

      610    12642    7   NOT_FOUND_SEARCH:
      611    12643    7                                 INSERT$ = BIN_RESULT$;

  12643  3 002246   200265 236100       NOT_FOUND_S* LDQ     BIN_RESULT$,,AUTO
         3 002247   200024 756100                    STQ     INSERT$,,AUTO

      612    12644    7                                 GOTO NOT_FOUND_UNSAT;

  12644  3 002250   002422 710000 3                  TRA     INSERT_POINT

      613    12645    7   SEARCH_SECONDARY:
      614    12646        /**/
      615    12647    7                                 IF NOT BIN_RESULT$ -> VXR$TMPLT.GOT THEN GOTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:156  
             12647                                          SEARCH_FORWARD;

  12647  3 002251   000000 236100       SEARCH_SECO* LDQ     0,,PR0
         3 002252   100000 316007                    CANQ    32768,DL
         3 002253   002267 600000 3                  TZE     SEARCH_FORWARD

      616    12648    7                                R$ = PINCRW( DNAME$, BIN_RESULT$ -> VXR$TMPLT.OPOINTER
             12648                                          );

  12648  3 002254   000000 722100                    LXL2    0,,PR0
         3 002255   077777 362003                    ANX2    32767,DU
         3 002256   000000 636012                    EAQ     0,X2
         3 002257   200023 036100                    ADLQ    DNAME$,,AUTO
         3 002260   200006 756100                    STQ     R$,,AUTO

      617    12649    8                                 IF R$ -> B$DNAME.TEXT < TEMP.CHARS THEN DO;
             12649                                          /* Search forward */

  12649  3 002261   200006 474500                    LDP4    R$,,AUTO
         3 002262   400000 223100                    LDX3    0,,PR4
         3 002263   040100 106540                    CMPC    fill='040'O
         3 002264   400000 400013                    ADSC9   0,,PR4                   cn=2,n=*X3
         3 002265   200055 401002                    ADSC9   TEMP,,AUTO               cn=2,n=514
         3 002266   002342 603000 3                  TRC     s:12672

      618    12650    8   SEARCH_FORWARD:
      619    12651    9                                     DO WHILE( INSERT$ <= BIN_STOP$ );

  12651  3 002267   200264 236100       SEARCH_FORW* LDQ     BIN_STOP$,,AUTO
         3 002270   200024 116100                    CMPQ    INSERT$,,AUTO
         3 002271   002341 602000 3                  TNC     s:12667

      620    12652    9                                         IF PINCRW( BIN_N$, INSERT$ -> VXR$TMPLT.
             12652                                                 NPOINTER - VX_PASS2_REF.UNSAT.PREV_RN_SIZE
             12652                                                  )

  12652  3 002272   200024 470500                    LDP0    INSERT$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:157  
         3 002273   000000 236100                    LDQ     0,,PR0
         3 002274   000022 732000                    QRS     18
         3 002275   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002276   200272 756100                    STQ     BIN_N$+4,,AUTO
         3 002277   000000 236100                    LDQ     0,,PR0
         3 002300   000022 732000                    QRS     18
         3 002301   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002302   200266 471500                    LDP1    BIN_N$,,AUTO
         3 002303   100000 220106                    LDX0    0,QL,PR1
         3 002304   200017 473500                    LDP3    PN$,,AUTO
         3 002305   300000 221100                    LDX1    0,,PR3
         3 002306   200272 235100                    LDA     BIN_N$+4,,AUTO
         3 002307   000002 735000                    ALS     2
         3 002310   040145 106540                    CMPC    fill='040'O
         3 002311   300000 400011                    ADSC9   0,,PR3                   cn=2,n=*X1
         3 002312   100000 400010                    ADSC9   0,A,PR1                  cn=2,n=*X0
         3 002313   002422 602000 3                  TNC     INSERT_POINT

      621    12653    9                                                 -> B$DNAME.TEXT
      622    12654    9                                                 >
      623    12655    9                                                 PN$ -> B$DNAME.TEXT THEN GOTO
             12655                                                          INSERT_POINT;
      624    12656   10                                         IF INSERT$ -> VXR$TMPLT.GOT THEN DO;

  12656  3 002314   000000 236100                    LDQ     0,,PR0
         3 002315   100000 316007                    CANQ    32768,DL
         3 002316   002333 600000 3                  TZE     s:12665

      625    12657   10                                            R$ = PINCRW( DNAME$, INSERT$ -> VXR$TMPLT.
             12657                                                      OPOINTER );

  12657  3 002317   000000 720100                    LXL0    0,,PR0
         3 002320   077777 360003                    ANX0    32767,DU
         3 002321   000000 636010                    EAQ     0,X0
         3 002322   200023 036100                    ADLQ    DNAME$,,AUTO
         3 002323   200006 756100                    STQ     R$,,AUTO

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:158  
      626    12658   10                                             IF R$ -> B$DNAME.TEXT

  12658  3 002324   200006 474500                    LDP4    R$,,AUTO
         3 002325   400000 222100                    LDX2    0,,PR4
         3 002326   040140 106500                    CMPC    fill='040'O
         3 002327   200055 401002                    ADSC9   TEMP,,AUTO               cn=2,n=514
         3 002330   400000 400012                    ADSC9   0,,PR4                   cn=2,n=*X2
         3 002331   002422 602000 3                  TNC     INSERT_POINT

      627    12659   10                                                     >
      628    12660   10                                                    TEMP.CHARS THEN GOTO INSERT_POINT;
      629    12661   10                                             IF R$ -> B$DNAME.TEXT

  12661  3 002332   002614 600000 3                  TZE     UNSAT_ALREADY_THERE

      630    12662   10                                                     =
      631    12663   10                                                     TEMP.CHARS THEN GOTO
             12663                                                              UNSAT_ALREADY_THERE;
      632    12664   10                                             END;
             12664                                                 /* If INSERT$ -> VXR$TMPLT.GOT then do; */

      633    12665    9                                         INSERT$ = PINCRW( INSERT$, SIZEW( VXR$TMPLT )
             12665                                                  );

  12665  3 002333   200024 236100                    LDQ     INSERT$,,AUTO
         3 002334   000001 036003                    ADLQ    1,DU
         3 002335   200024 756100                    STQ     INSERT$,,AUTO

      634    12666    9                                         END; /* Do while( INSERT$ <= BIN_STOP$ ); */

  12666  3 002336   200264 116100                    CMPQ    BIN_STOP$,,AUTO
         3 002337   002272 602000 3                  TNC     s:12652
         3 002340   002272 600000 3                  TZE     s:12652

      635    12667    8                                     GOTO INSERT_POINT;

  12667  3 002341   002422 710000 3                  TRA     INSERT_POINT
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:159  

      636    12668    8                                     END;
             12668                                          /* If R$ -> B$DNAME.TEXT < TEMP.CHARS then do; */
      637    12669        /**/
      638    12670    7                                 ELSE
      639    12671        /**/
      640    12672    8                                     IF R$ -> B$DNAME.TEXT > TEMP.CHARS THEN DO;

  12672  3 002342   002614 602000 3                  TNC     UNSAT_ALREADY_THERE
         3 002343   002614 600000 3                  TZE     UNSAT_ALREADY_THERE

      641    12673    9                                         DO WHILE( INSERT$ >= BIN_START$ );
             12673                                                  /* Search backwards */

  12673  3 002344   200024 236100                    LDQ     INSERT$,,AUTO
         3 002345   200263 116100                    CMPQ    BIN_START$,,AUTO
         3 002346   002417 602000 3                  TNC     STEP_FORWARD_ONCE

      642    12674    9                                             IF PINCRW( BIN_N$, INSERT$ -> VXR$TMPLT.
             12674                                                      NPOINTER - VX_PASS2_REF.UNSAT.
             12674                                                      PREV_RN_SIZE )

  12674  3 002347   200024 470500                    LDP0    INSERT$,,AUTO
         3 002350   000000 236100                    LDQ     0,,PR0
         3 002351   000022 732000                    QRS     18
         3 002352   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002353   200272 756100                    STQ     BIN_N$+4,,AUTO
         3 002354   000000 236100                    LDQ     0,,PR0
         3 002355   000022 732000                    QRS     18
         3 002356   000100 136000 xsym               SBLQ    VX_PASS2_REF+64
         3 002357   200266 471500                    LDP1    BIN_N$,,AUTO
         3 002360   100000 220106                    LDX0    0,QL,PR1
         3 002361   200017 473500                    LDP3    PN$,,AUTO
         3 002362   300000 221100                    LDX1    0,,PR3
         3 002363   200272 235100                    LDA     BIN_N$+4,,AUTO
         3 002364   000002 735000                    ALS     2
         3 002365   040140 106545                    CMPC    fill='040'O
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:160  
         3 002366   100000 400010                    ADSC9   0,A,PR1                  cn=2,n=*X0
         3 002367   300000 400011                    ADSC9   0,,PR3                   cn=2,n=*X1
         3 002370   002417 602000 3                  TNC     STEP_FORWARD_ONCE

      643    12675    9                                                     -> B$DNAME.TEXT
      644    12676    9                                                     <
      645    12677    9                                                     PN$ -> B$DNAME.TEXT THEN GOTO
             12677                                                              STEP_FORWARD_ONCE;
      646    12678   10                                             IF INSERT$ -> VXR$TMPLT.GOT THEN DO;

  12678  3 002371   000000 236100                    LDQ     0,,PR0
         3 002372   100000 316007                    CANQ    32768,DL
         3 002373   002417 600000 3                  TZE     STEP_FORWARD_ONCE

      647    12679   10                                                 R$ = PINCRW( DNAME$, INSERT$ ->
             12679                                                          VXR$TMPLT.OPOINTER );

  12679  3 002374   000000 720100                    LXL0    0,,PR0
         3 002375   077777 360003                    ANX0    32767,DU
         3 002376   000000 636010                    EAQ     0,X0
         3 002377   200023 036100                    ADLQ    DNAME$,,AUTO
         3 002400   200006 756100                    STQ     R$,,AUTO

      648    12680   10                                                 IF R$ -> B$DNAME.TEXT

  12680  3 002401   200006 474500                    LDP4    R$,,AUTO
         3 002402   400000 222100                    LDX2    0,,PR4
         3 002403   040100 106540                    CMPC    fill='040'O
         3 002404   400000 400012                    ADSC9   0,,PR4                   cn=2,n=*X2
         3 002405   200055 401002                    ADSC9   TEMP,,AUTO               cn=2,n=514
         3 002406   002417 602000 3                  TNC     STEP_FORWARD_ONCE

      649    12681   10                                                         <
      650    12682   10                                                         TEMP.CHARS THEN GOTO
             12682                                                                  STEP_FORWARD_ONCE;
      651    12683   10                                                 IF R$ -> B$DNAME.TEXT

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:161  
  12683  3 002407   002614 600000 3                  TZE     UNSAT_ALREADY_THERE

      652    12684   10                                                         =
      653    12685   10                                                         TEMP.CHARS THEN GOTO
             12685                                                                  UNSAT_ALREADY_THERE;
      654    12686   10                                                 END;
             12686                                                 /* If INSERT$ -> VXR$TMPLT.GOT then do; */

  12686  3 002410   002411 710000 3                  TRA     s:12688

      655    12687    9                                             ELSE GOTO STEP_FORWARD_ONCE;
      656    12688    9                                             INSERT$ = PINCRW( INSERT$, -SIZEW(
             12688                                                      VXR$TMPLT ) );

  12688  3 002411   200024 236100                    LDQ     INSERT$,,AUTO
         3 002412   777777 036003                    ADLQ    -1,DU
         3 002413   200024 756100                    STQ     INSERT$,,AUTO

      657    12689    9                                             END;
             12689                                                   /* Do while( INSERT$ >= BIN_START$ ); */

  12689  3 002414   200263 116100                    CMPQ    BIN_START$,,AUTO
         3 002415   002347 603000 3                  TRC     s:12674

      658    12690    8                                         END;
             12690                                          /* If R$ -> B$DNAME.TEXT > TEMP.CHARS then do; */

  12690  3 002416   002417 710000 3                  TRA     STEP_FORWARD_ONCE

      659    12691    7                                     ELSE GOTO UNSAT_ALREADY_THERE;
      660    12692        /**/
      661    12693    7   STEP_FORWARD_ONCE:
      662    12694    7                                 INSERT$ = PINCRW( INSERT$, SIZEW( VXR$TMPLT ) );

  12694  3 002417   200024 236100       STEP_FORWAR* LDQ     INSERT$,,AUTO
         3 002420   000001 036003                    ADLQ    1,DU
         3 002421   200024 756100                    STQ     INSERT$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:162  

  12693  3 002422                       INSERT_POINT null
      663    12695    7   INSERT_POINT:                 ;
      664    12696    7   NOT_FOUND_UNSAT:
      665    12697        /* Check if it will fit */
      666    12698    7                                 NAME_SIZEW = ( PN$ -> B$DNAME.COUNT + 4/*@CHAR_WORD*/
             12698                                          + 1 ) / 4/*@CHAR_WORD*/;

  12698  3 002422   200017 470500       NOT_FOUND_U* LDP0    PN$,,AUTO
         3 002423   000000 236100                    LDQ     0,,PR0
         3 002424   000022 772000                    QRL     18
         3 002425   000005 036007                    ADLQ    5,DL
         3 002426   000002 772000                    QRL     2
         3 002427   200037 756100                    STQ     NAME_SIZEW,,AUTO

      667    12699    7                                IF VX_PASS2_REF.UNSAT.MAX.RN < VX_PASS2_REF.UNSAT.SIZE
             12699                                          .RN + NAME_SIZEW

  12699  3 002430   000070 036000 xsym               ADLQ    VX_PASS2_REF+56
         3 002431   000050 116000 xsym               CMPQ    VX_PASS2_REF+40
         3 002432   002434 600000 3                  TZE     s:12699+4
         3 002433   002440 603000 3                  TRC     s:12702
         3 002434   200025 720100                    LXL0    I,,AUTO
         3 002435   000070 236010 xsym               LDQ     VX_PASS2_REF+56,X0
         3 002436   000050 116010 xsym               CMPQ    VX_PASS2_REF+40,X0
         3 002437   002443 602000 3                  TNC     s:12703

      668    12700    7                                         OR
      669    12701    7                                         VX_PASS2_REF.UNSAT.MAX_A(I) <= VX_PASS2_REF.
             12701                                                  UNSAT.SIZE_A(I) THEN
      670    12702    7                                     CALL VXU$UNSAT;

  12702  3 002440   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 002441   000000 701000 xent               TSX1    VXU$UNSAT
         3 002442   000000 011000                    NOP     0

      671    12703    8                                IF VX_PASS2_REF.UNSAT.L_START.RN$ = ADDR(NIL) THEN DO;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:163  

  12703  3 002443   000054 236000 xsym               LDQ     VX_PASS2_REF+44
         3 002444   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002445   002451 601000 3                  TNZ     s:12709

      672    12704    8                                     VX_PASS2_REF.UNSAT.L_START.RN$ =

  12704  3 002446   000064 236000 xsym               LDQ     VX_PASS2_REF+52
         3 002447   000054 756000 xsym               STQ     VX_PASS2_REF+44

      673    12705    8                                             VX_PASS2_REF.UNSAT.L_WHERE.RN$;
      674    12706    8                                     VX_PASS2_REF.UNSAT.L_STOP.RN$ =

  12706  3 002450   000060 756000 xsym               STQ     VX_PASS2_REF+48

      675    12707    8                                             VX_PASS2_REF.UNSAT.L_WHERE.RN$;
      676    12708    8                                     END;  /* If */

      677    12709    8                                 IF VX_PASS2_REF.UNSAT.L_START_A$(I) = ADDR(NIL) THEN
             12709                                          DO;

  12709  3 002451   200025 720100                    LXL0    I,,AUTO
         3 002452   000054 236010 xsym               LDQ     VX_PASS2_REF+44,X0
         3 002453   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 002454   002464 601000 3                  TNZ     s:12717

      678    12710    8                                     VX_PASS2_REF.UNSAT.L_START_A$(I) =

  12710  3 002455   000064 236010 xsym               LDQ     VX_PASS2_REF+52,X0
         3 002456   000054 756010 xsym               STQ     VX_PASS2_REF+44,X0

      679    12711    8                                             VX_PASS2_REF.UNSAT.L_WHERE_A$(I);
      680    12712    8                                     VX_PASS2_REF.UNSAT.L_STOP_A$(I) =

  12712  3 002457   000064 236010 xsym               LDQ     VX_PASS2_REF+52,X0
         3 002460   000060 756010 xsym               STQ     VX_PASS2_REF+48,X0

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:164  
      681    12713    8                                             VX_PASS2_REF.UNSAT.L_WHERE_A$(I);
      682    12714    8                                     INSERT$ = VX_PASS2_REF.UNSAT.L_WHERE_A$(I);

  12714  3 002461   000064 236010 xsym               LDQ     VX_PASS2_REF+52,X0
         3 002462   200024 756100                    STQ     INSERT$,,AUTO

      683    12715    8                                     END;

  12715  3 002463   002502 710000 3                  TRA     s:12727

      684    12716    8                                 ELSE DO;  /* Insert into non-null list */

      685    12717    8                                     R$ = PINCRW( VX_PASS2_REF.UNSAT.L_STOP_A$(I), -
             12717                                              SIZEW(VXR$TMPLT) );

  12717  3 002464   000060 236010 xsym               LDQ     VX_PASS2_REF+48,X0
         3 002465   777777 036003                    ADLQ    -1,DU
         3 002466   200006 756100                    STQ     R$,,AUTO

      686    12718    9                                     IF R$ >= INSERT$ THEN DO;

  12718  3 002467   200024 116100                    CMPQ    INSERT$,,AUTO
         3 002470   002502 602000 3                  TNC     s:12727

      687    12719   10                                         DO WHILE( R$ >= INSERT$ );

  12719  3 002471   002502 602000 3                  TNC     s:12727

      688    12720   10                                             PINCRW( R$, SIZEW( VXR$TMPLT ) ) ->
             12720                                                      VXR$TMPLT =

  12720  3 002472   200006 470500                    LDP0    R$,,AUTO
         3 002473   000000 236100                    LDQ     0,,PR0
         3 002474   000001 756100                    STQ     1,,PR0

      689    12721   10                                                     R$ -> VXR$TMPLT;
      690    12722   10                                             R$ = PINCRW( R$, -SIZEW(VXR$TMPLT) );
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:165  

  12722  3 002475   200006 236100                    LDQ     R$,,AUTO
         3 002476   777777 036003                    ADLQ    -1,DU
         3 002477   200006 756100                    STQ     R$,,AUTO

      691    12723   10                                             END; /* Do while( R$ <= INSERT$ ); */

  12723  3 002500   200024 116100                    CMPQ    INSERT$,,AUTO
         3 002501   002472 603000 3                  TRC     s:12720

      692    12724    9                                         END; /* If R$ >= INSERT$ then do; */

      693    12725    8                                     END;  /* Else do */

      694    12726        /* Move name in */
      695    12727    7                                 VX_PASS2_REF.UNSAT.L_STOP.RN$ -> B$DNAME.COUNT = PN$
             12727                                          -> B$DNAME.COUNT;

  12727  3 002502   200017 470500                    LDP0    PN$,,AUTO
         3 002503   000000 220100                    LDX0    0,,PR0
         3 002504   000060 471400 xsym               LDP1    VX_PASS2_REF+48
         3 002505   100000 740100                    STX0    0,,PR1

      696    12728    7                                VX_PASS2_REF.UNSAT.L_STOP.RN$ -> B$DNAME.TEXT = PN$ ->
             12728                                          B$DNAME.TEXT;

  12728  3 002506   000060 471400 xsym               LDP1    VX_PASS2_REF+48
         3 002507   100000 220100                    LDX0    0,,PR1
         3 002510   000000 221100                    LDX1    0,,PR0
         3 002511   040140 100540                    MLR     fill='040'O
         3 002512   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         3 002513   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0

      697    12729    7                                 INSERT$ -> VXR$TMPLT.NPOINTER =

  12729  3 002514   000100 236000 xsym               LDQ     VX_PASS2_REF+64
         3 002515   000070 036000 xsym               ADLQ    VX_PASS2_REF+56
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:166  
         3 002516   000000 620006                    EAX0    0,QL
         3 002517   200024 471500                    LDP1    INSERT$,,AUTO
         3 002520   100000 740100                    STX0    0,,PR1

      698    12730    7                                         VX_PASS2_REF.UNSAT.PREV_RN_SIZE
      699    12731    7                                         +
      700    12732    7                                         VX_PASS2_REF.UNSAT.SIZE.RN;
      701    12733    7                                 INSERT$ -> VXR$TMPLT.SREF = P$ -> VXR$TMPLT.SREF;

  12733  3 002521   200004 473500                    LDP3    P$,,AUTO
         3 002522   300000 236100                    LDQ     0,,PR3
         3 002523   100000 676100                    ERQ     0,,PR1
         3 002524   400000 376007                    ANQ     -131072,DL
         3 002525   100000 656100                    ERSQ    0,,PR1

      702    12734    8                                 IF P$ -> VXR$TMPLT.SREF THEN DO;

  12734  3 002526   300000 236100                    LDQ     0,,PR3
         3 002527   400000 316007                    CANQ    -131072,DL
         3 002530   002542 600000 3                  TZE     s:12741

      703    12735               /* %CHECK(SEV=@UNSAT_SECONDARY */
      704    12736    8                                    VX_ERRORS.UNSAT.UNSAT_SECONDARY = VX_ERRORS.UNSAT.
             12736                                              UNSAT_SECONDARY + 1;

  12736  3 002531   000002 235000 xsym               LDA     VX_ERRORS+2
         3 002532   000001 035007                    ADLA    1,DL
         3 002533   000002 755000 xsym               STA     VX_ERRORS+2

      705    12737    8                                     VX_RU_HEAD.MAP_BITS_A.SECONDARY(I1) = '1'B
             12737                                              /*@TRUE_B*/;

  12737  3 002534   200052 236100                    LDQ     I1,,AUTO
         3 002535   000002 736000                    QLS     2
         3 002536   003006 060400                    CSL     bolr='003'O
         3 002537   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         3 002540   000011 230001 xsym               BDSC    VX_RU_HEAD+9,Q           by=1,bit=3,n=1
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:167  

      706    12738    8                                     END;  /* If P$ -> VXR$TMPLT.SREF then do; */

  12738  3 002541   002557 710000 3                  TRA     s:12746

      707    12739    8                                 ELSE DO;

      708    12740                                          %CHECK( SEV=@UNSAT_PRIMARY );

  12741  3 002542   000000 235000 xsym               LDA     VX_ERR_SEV
         3 002543   000007 115007                    CMPA    7,DL
         3 002544   002547 603000 3                  TRC     s:12743

  12741  3 002545   000007 235007                    LDA     7,DL
         3 002546   000000 755000 xsym               STA     VX_ERR_SEV

      709    12743    8                                     VX_ERRORS.UNSAT.UNSAT_PRIMARY = VX_ERRORS.UNSAT.
             12743                                              UNSAT_PRIMARY + 1;

  12743  3 002547   000001 236000 xsym               LDQ     VX_ERRORS+1
         3 002550   000001 036007                    ADLQ    1,DL
         3 002551   000001 756000 xsym               STQ     VX_ERRORS+1

      710    12744    8                                     VX_RU_HEAD.MAP_BITS_A.PRIMARY(I1) = '1'B
             12744                                              /*@TRUE_B*/;

  12744  3 002552   200052 235100                    LDA     I1,,AUTO
         3 002553   000002 735000                    ALS     2
         3 002554   003005 060400                    CSL     bolr='003'O
         3 002555   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         3 002556   000011 220001 xsym               BDSC    VX_RU_HEAD+9,A           by=1,bit=2,n=1

      711    12745    8                                     END;
             12745                                          /* Else do; - if P$ -> VXR$TMPLT.SREF then do; */

      712    12746    8                                 IF VX_PRIMARY_ENTDEF_GOT AND WILL_FIT AND NOT
             12746                                          VX_REF_EXPONENTIAL_SWITCH THEN DO;
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:168  

  12746  3 002557   000000 234000 xsym               SZN     VX_PRIMARY_ENTDEF_GOT
         3 002560   002574 605000 3                  TPL     s:12751
         3 002561   200003 234100                    SZN     WILL_FIT,,AUTO
         3 002562   002574 605000 3                  TPL     s:12751
         3 002563   000000 234000 xsym               SZN     VX_REF_EXPONENTIAL_SWITCH
         3 002564   002574 604000 3                  TMI     s:12751

      713    12747    8                                     INSERT$ -> VXR$TMPLT.GOT = '1'B/*@TRUE_B*/;

  12747  3 002565   100000 236007                    LDQ     32768,DL
         3 002566   100000 256100                    ORSQ    0,,PR1

      714    12748    8                                     INSERT$ -> VXR$TMPLT.OPOINTER = VX_OK.KPEDX;

  12748  3 002567   000011 236000 xsym               LDQ     VX_OK+9
         3 002570   100000 676100                    ERQ     0,,PR1
         3 002571   077777 376007                    ANQ     32767,DL
         3 002572   100000 656100                    ERSQ    0,,PR1

      715    12749    8                                     END;
             12749                                       /* If VX_PRIMARY_ENTDEF_GOT and WILL_FIT then do; */

  12749  3 002573   002576 710000 3                  TRA     s:12753

      716    12750    8                                 ELSE DO;

      717    12751    8                                     INSERT$ -> VXR$TMPLT.GOT = '0'B/*@FALSE_B*/;

  12751  3 002574   000064 236000 4                  LDQ     52
         3 002575   100000 356100                    ANSQ    0,,PR1

      718    12752    8                                     END;
             12752                            /* Else do; - if VX_PRIMARY_ENTDEF_GOT and WILL_FIT then do; */

      719    12753    7                                 VX_PASS2_REF.UNSAT.L_STOP.RN$ =

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:169  
  12753  3 002576   200037 236100                    LDQ     NAME_SIZEW,,AUTO
         3 002577   000022 736000                    QLS     18
         3 002600   000060 036000 xsym               ADLQ    VX_PASS2_REF+48
         3 002601   000060 756000 xsym               STQ     VX_PASS2_REF+48

      720    12754    7                                         PINCRW( VX_PASS2_REF.UNSAT.L_STOP.RN$,
             12754                                                  NAME_SIZEW );
      721    12755    7                                 VX_PASS2_REF.UNSAT.L_STOP_A$(I) =

  12755  3 002602   200025 720100                    LXL0    I,,AUTO
         3 002603   000060 236010 xsym               LDQ     VX_PASS2_REF+48,X0
         3 002604   000001 036003                    ADLQ    1,DU
         3 002605   000060 756010 xsym               STQ     VX_PASS2_REF+48,X0

      722    12756    7                                        PINCRW( VX_PASS2_REF.UNSAT.L_STOP_A$(I), SIZEW
             12756                                                  ( VXR$TMPLT ) );
      723    12757    7                                 VX_PASS2_REF.UNSAT.SIZE.RN =

  12757  3 002606   000070 236000 xsym               LDQ     VX_PASS2_REF+56
         3 002607   200037 036100                    ADLQ    NAME_SIZEW,,AUTO
         3 002610   000070 756000 xsym               STQ     VX_PASS2_REF+56

      724    12758    7                                         VX_PASS2_REF.UNSAT.SIZE.RN + NAME_SIZEW;
      725    12759    7                                 VX_PASS2_REF.UNSAT.SIZE_A(I) =

  12759  3 002611   000070 235010 xsym               LDA     VX_PASS2_REF+56,X0
         3 002612   000001 035007                    ADLA    1,DL
         3 002613   000070 755010 xsym               STA     VX_PASS2_REF+56,X0

      726    12760    7                                         VX_PASS2_REF.UNSAT.SIZE_A(I) + SIZEW(
             12760                                                  VXR$TMPLT );
      727    12761    7   UNSAT_ALREADY_THERE:
      728    12762    7                                 END; /* Else do - if REF_REC = typsegref then do; */

  12762  3 002614                       UNSAT_ALREA* null
      729    12763    6                             END;  /* Else do - if FOUND$ ~= addr(nil) then do; */

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:170  
      730    12764    5   BUMP_P:
      731    12765    5                         P$ = PINCRW( P$, SIZEW( VXR$TMPLT ) );

  12765  3 002614   200004 236100       BUMP_P       LDQ     P$,,AUTO
         3 002615   000001 036003                    ADLQ    1,DU
         3 002616   200004 756100                    STQ     P$,,AUTO

      732    12766    5                         RESOLVE$ = PINCRW( RESOLVE$, SIZEW( VXR$SAT ) );

  12766  3 002617   200022 236100                    LDQ     RESOLVE$,,AUTO
         3 002620   000002 036003                    ADLQ    2,DU
         3 002621   200022 756100                    STQ     RESOLVE$,,AUTO

      733    12767    5                         END;              /* Do while( P$ <= Q$ ); */

  12767  3 002622   200005 236100                    LDQ     Q$,,AUTO
         3 002623   200004 116100                    CMPQ    P$,,AUTO
         3 002624   000400 603000 3                  TRC     s:12023

      734    12768    4                     VX_PASS2_REF.SAT.COUNT_A(I) = POFFW( RESOLVE$,

  12768  3 002625   200025 720100                    LXL0    I,,AUTO
         3 002626   000024 236010 xsym               LDQ     VX_PASS2_REF+20,X0
         3 002627   000022 772000                    QRL     18
         3 002630   200272 756100                    STQ     BIN_N$+4,,AUTO
         3 002631   200022 236100                    LDQ     RESOLVE$,,AUTO
         3 002632   000022 772000                    QRL     18
         3 002633   200272 136100                    SBLQ    BIN_N$+4,,AUTO
         3 002634   000002 506007                    DIV     2,DL
         3 002635   000036 756010 xsym               STQ     VX_PASS2_REF+30,X0

      735    12769    4                             VX_PASS2_REF.SAT.L_START_A$(I) )/
      736    12770    4                             SIZEW( VXR$SAT );
      737    12771    4                     VX_PASS2_REF.SAT.L_STOP_A$(I) = PINCRW( RESOLVE$, -SIZEW( VXR$SAT
             12771                              ) );

  12771  3 002636   200022 236100                    LDQ     RESOLVE$,,AUTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:171  
         3 002637   777776 036003                    ADLQ    -2,DU
         3 002640   000031 756010 xsym               STQ     VX_PASS2_REF+25,X0

      738    12772    4                     END;                  /* If REF_REC ~= typrnam then do; */

      739    12773    3                 END;                      /* If tsize > 0 then do; */

      740    12774    2             END;                      /* Do i = 0 to sizew( VX_REF_REC_A ) - 1; */

  12774  3 002641   200025 235100                    LDA     I,,AUTO
         3 002642   000001 035007                    ADLA    1,DL
         3 002643   200025 755100                    STA     I,,AUTO
         3 002644   200025 235100                    LDA     I,,AUTO
         3 002645   000004 115007                    CMPA    4,DL
         3 002646   000257 602000 3                  TNC     s:11988

      741    12775    1         CALL VXT$FIMAGE;

  12775  3 002647   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 002650   000000 701000 xent               TSX1    VXT$FIMAGE
         3 002651   000000 011000                    NOP     0

      742    12776    1   END VXT$OBJECT;

  12776  3 002652   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:172  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$OBJECT.
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:173  

 **** Variables and constants ****

  ****  Section 002 RoData VXT$OBJECT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   344-0-0/w STRC(63)    r     1 ALLOWS
     0-0-0/w CHAR(50)    r     1 CST_TYPE(0:15)
   320-0-0/w UBIN        r     1 CST_TYPE_COUNT(0:15)
   346-0-0/w STRC(45)    r     1 DATA_DEF                 340-0-0/w STRC(135)   r     1 DOES_NOT_ALLOW
   352-0-0/c CHAR(17)    r     1 PRO_TYPE(0:8)
   421-0-0/w UBIN        r     1 PRO_TYPE_COUNT(0:8)
   350-0-0/w STRC(72)    r     1 SEG_DEF

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    33-0-0/w UBIN        r     1 ALL_TYPE                 257-0-0/w UBIN        r     1 BIN_HIGH
   256-0-0/w UBIN        r     1 BIN_LOW                  260-0-0/w UBIN        r     1 BIN_MID
   266-0-0/w PTR         r     1 BIN_N$                   261-0-0/w PTR         r     1 BIN_NTEMP$
   265-0-0/w PTR         r     1 BIN_RESULT$              263-0-0/w PTR         r     1 BIN_START$
   262-0-0/w PTR         r     1 BIN_START1$              264-0-0/w PTR         r     1 BIN_STOP$
    46-0-0/w UBIN        r     1 CST_D                     47-0-0/w UBIN        r     1 CST_R
     7-0-0/w PTR         r     1 CURR$                     32-0-0/w UBIN        r     1 DEF_REC
    23-0-0/w PTR         r     1 DNAME$                    20-0-0/w PTR         r     1 FIRST_START$
    21-0-0/w PTR         r     1 FIRST_STOP$               10-0-0/w PTR         r     1 FOUND$
    35-0-0/w UBIN        r     1 HEAD_INX                  25-0-0/w UBIN        r     1 I
    52-0-0/w UBIN        r     1 I1                        24-0-0/w PTR         r     1 INSERT$
    30-0-0/w UBIN        r     1 L                         37-0-0/w UBIN        r     1 NAME_SIZEW
    54-0-0/w UBIN        r     1 NAME_X                    11-0-0/w PTR         r     1 NODE$
    44-0-0/w UBIN        r     1 NPAGE                     50-0-0/w UBIN        r     1 NP_D
    51-0-0/w UBIN        r     1 NP_R                       4-0-0/w PTR         r     1 P$
    41-0-0/w UBIN        r     1 PAGE                      17-0-0/w PTR         r     1 PN$
     5-0-0/w PTR         r     1 Q$                         6-0-0/w PTR         r     1 R$
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:174  
    31-0-0/w UBIN        r     1 REF_REC                   22-0-0/w PTR         r     1 RESOLVE$
    16-0-0/w PTR         r     1 RNAME$                    53-0-0/w UBIN        r     1 SAVE_NAME_DISP
    25-0-0/w SBIN        r     1 SI                        34-0-0/w UBIN        r     1 SOURCE
    55-0-0/w STRC(4644)  r     1 TEMP                      40-0-0/w UBIN        r     1 TSIZE
    45-0-0/w UBIN        r     1 TSIZE_READ                14-0-0/w PTR         r     1 WHERE$
     3-0-0/w BIT         r     1 WILL_FIT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 VX_CURR$                   0-0-0/w STRC(720)   r     1 VX_EFIELD1
     0-0-0/w STRC(720)   r     1 VX_EFIELD2                 0-0-0/w STRC(720)   r     1 VX_EFIELD3
     0-0-0/w STRC(216)   r     1 VX_ERRORS                  0-0-0/w UBIN        r     1 VX_ERR_SEV
     0-0-0/w SBIN        r     1 VX_HEAD_INX(0:9)
     0-0-0/w UBIN        r     1 VX_MATCH_NAME_A(0:9)
     0-0-0/w STRC(1476)  r     1 VX_OK                      0-0-0/w STRC(1044)  r     1 VX_OU_HEAD
     0-0-0/w STRC(2340)  r     1 VX_PASS2_REF
     0-0-0/b BIT         r     1 VX_PRIMARY_ENTDEF_GOT
     0-0-0/w STRC(108)   r     1 VX_PROGRAM_BIAS            0-0-0/w UBIN        r     1 VX_P_ENTDEF
     0-0-0/w BIT         r     1 VX_REF_EXPONENTIAL_SWITCH
     0-0-0/w SBIN        r     1 VX_REF_MATCH_A(0:9)
     0-0-0/w UBIN        r     1 VX_REF_REC_A(0:3)
     0-0-0/w PTR         r     1 VX_ROOT$                   0-0-0/w STRC(1440)  r     1 VX_RU_HEAD
     0-0-0/w PTR         r     1 VX_SC_PASS2$               0-0-0/w STRC(72)    r     1 VX_SD
     0-0-0/w PTR         r     1 VX_SD_STOP$                0-0-0/b BIT         r     1 VX_SLIB_USED
     0-0-0/w STRC(27)    r     1 VX_SN                      0-0-0/w STRC(1908)  r     1 VX_SPC

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(72)    r     1 B$EDEF
     0-0-0/w STRC        r     1 B$EREF                     0-0-0/w STRC(72)    r     1 B$SDEF
     0-0-0/w STRC(72)    r     1 B$SEGDEF                   0-0-0/c ASTR(9)     r     1 F$NAME_
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:175  
     0-0-0/w STRC(108)   r     1 VX$LLIST_SC                0-0-0/w STRC(3672)  r     1 VX$NODE
     0-0-0/w STRC(108)   r     1 VX$SC                      0-0-0/w STRC(72)    r     1 VX$TMPLT
     0-0-0/w STRC(72)    r     1 VXD$TMPLT                  0-0-0/w STRC(72)    r     1 VXR$SAT
     0-0-0/w STRC        r     1 VXR$TMPLT


   Procedure VXT$OBJECT requires 1451 words for executable code.
   Procedure VXT$OBJECT requires 198 words of local(AUTO) storage.

    No errors detected in file VXT$OBJECT.:E05TSI    .
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:176  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:177  
          MINI XREF LISTING

ALLOWS
     11825**DCL     12307>>ASSIGN  12310>>ASSIGN
ALL_TYPE
     11766**DCL     11999<>CALL
B$DNAME.COUNT
     11635**DCL     11642--IMP-SIZ 11913>>IF      11913>>IF      11916>>IF      11916>>IF      11933>>IF
     11933>>IF      11939>>IF      11939>>IF      11970>>ASSIGN  11971>>ASSIGN  12052>>IF      12052>>IF
     12055>>IF      12055>>IF      12072>>IF      12072>>IF      12078>>IF      12078>>IF      12142>>IF
     12142>>IF      12145>>IF      12145>>IF      12162>>IF      12162>>IF      12168>>IF      12168>>IF
     12227>>IF      12227>>IF      12237>>IF      12237>>IF      12293>>ASSIGN  12294>>ASSIGN  12335>>ASSIGN
     12336>>ASSIGN  12391>>ASSIGN  12392>>ASSIGN  12455>>ASSIGN  12456>>ASSIGN  12504>>IF      12504>>IF
     12507>>IF      12507>>IF      12524>>IF      12524>>IF      12530>>IF      12530>>IF      12583>>IF
     12583>>IF      12586>>IF      12586>>IF      12603>>IF      12603>>IF      12609>>IF      12609>>IF
     12618>>IF      12618>>IF      12634>>IF      12634>>IF      12649>>IF      12652>>IF      12652>>IF
     12658>>IF      12661>>IF      12672>>IF      12674>>IF      12674>>IF      12680>>IF      12683>>IF
     12698>>ASSIGN  12727<<ASSIGN  12727>>ASSIGN  12728>>ASSIGN  12728>>ASSIGN
B$DNAME.TEXT
     11642**DCL     11913>>IF      11913>>IF      11916>>IF      11916>>IF      11933>>IF      11933>>IF
     11939>>IF      11939>>IF      11971>>ASSIGN  12052>>IF      12052>>IF      12055>>IF      12055>>IF
     12072>>IF      12072>>IF      12078>>IF      12078>>IF      12142>>IF      12142>>IF      12145>>IF
     12145>>IF      12162>>IF      12162>>IF      12168>>IF      12168>>IF      12227>>IF      12227>>IF
     12237>>IF      12237>>IF      12293>>ASSIGN  12335>>ASSIGN  12391>>ASSIGN  12456>>ASSIGN  12504>>IF
     12504>>IF      12507>>IF      12507>>IF      12524>>IF      12524>>IF      12530>>IF      12530>>IF
     12583>>IF      12583>>IF      12586>>IF      12586>>IF      12603>>IF      12603>>IF      12609>>IF
     12609>>IF      12618>>IF      12618>>IF      12634>>IF      12634>>IF      12649>>IF      12652>>IF
     12652>>IF      12658>>IF      12661>>IF      12672>>IF      12674>>IF      12674>>IF      12680>>IF
     12683>>IF      12728<<ASSIGN  12728>>ASSIGN
B$EDEF.ALT
     11010**DCL     12286>>IF
B$EDEF.CHECK
     11015**DCL     12283>>IF
B$EDEF.CST
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:178  
     11023**DCL     12381>>ASSIGN
B$EDEF.LFLAGS.SOURCE
     10982**DCL     12281>>IF
B$EDEF.LFLAGS.USED
     10988**DCL     12280<<ASSIGN
B$EDEF.NPARAM
     11043**DCL     12328>>IF      12347>>ASSIGN
B$EDEF.NPOINTER
     11002**DCL     11961>>ASSIGN
B$EDEF.OU
     10994**DCL     11000--REDEF
B$EDEF.OU.OFFSET
     10998**DCL     12277>>ASSIGN
B$EDEF.PRI
     11005**DCL     11959>>IF
B$EREF.ALT
     11252**DCL     12286>>IF      12305>>IF
B$EREF.CHECK
     11256**DCL     12283>>IF
B$EREF.CST
     11264**DCL     12382>>ASSIGN
B$EREF.NPARAM
     11284**DCL     12328>>IF      12348>>ASSIGN
B$SDEF.AD.OU
     11085**DCL     11091--REDEF
B$SDEF.AD.OU.OFFSET
     11089**DCL     12432>>ASSIGN
B$SDEF.VALUE
     11066**DCL     11069--REDEF
B$SEGDEF.AD.OU
     11161**DCL     11166--REDEF
B$SEGDEF.AD.OU.OFFSET
     11164**DCL     12435>>ASSIGN
B$SEGDEF.LFLAGS
     11176**DCL     11187--REDEF
B$SEGDEF.SEG.SEGID
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:179  
     11189**DCL     12437>>ASSIGN
B$SEGDEF.VALUE
     11138**DCL     11141--REDEF   11145--REDEF   12550>>ASSIGN
BIN_CHECK
     12081**LABEL   12076--GOTO
BIN_CHECK_A
     11942**LABEL   11937--GOTO
BIN_CHECK_D
     12171**LABEL   12166--GOTO
BIN_CHECK_S
     12533**LABEL   12528--GOTO
BIN_CHECK_U
     12612**LABEL   12607--GOTO
BIN_FOUND
     11959**LABEL   11918--GOTO
BIN_HIGH
     11861**DCL     11927<<ASSIGN  11930>>ASSIGN  11942<<ASSIGN  11944>>IF      12066<<ASSIGN  12069>>ASSIGN
     12081<<ASSIGN  12083>>IF      12156<<ASSIGN  12159>>ASSIGN  12171<<ASSIGN  12173>>IF      12518<<ASSIGN
     12521>>ASSIGN  12533<<ASSIGN  12535>>IF      12597<<ASSIGN  12600>>ASSIGN  12612<<ASSIGN  12614>>IF
BIN_LOW
     11860**DCL     11926<<ASSIGN  11930>>ASSIGN  11936<<ASSIGN  11944>>IF      12065<<ASSIGN  12069>>ASSIGN
     12075<<ASSIGN  12083>>IF      12155<<ASSIGN  12159>>ASSIGN  12165<<ASSIGN  12173>>IF      12517<<ASSIGN
     12521>>ASSIGN  12527<<ASSIGN  12535>>IF      12596<<ASSIGN  12600>>ASSIGN  12606<<ASSIGN  12614>>IF
BIN_MID
     11862**DCL     11930<<ASSIGN  11931>>ASSIGN  11936>>ASSIGN  11942>>ASSIGN  12069<<ASSIGN  12070>>ASSIGN
     12075>>ASSIGN  12081>>ASSIGN  12159<<ASSIGN  12160>>ASSIGN  12165>>ASSIGN  12171>>ASSIGN  12521<<ASSIGN
     12522>>ASSIGN  12527>>ASSIGN  12533>>ASSIGN  12600<<ASSIGN  12601>>ASSIGN  12606>>ASSIGN  12612>>ASSIGN
BIN_N$
     11877**DCL     11888<<ASSIGN  11889>>ASSIGN  11912>>ASSIGN  11932>>ASSIGN  12030<<ASSIGN  12051>>ASSIGN
     12071>>ASSIGN  12120<<ASSIGN  12141>>ASSIGN  12161>>ASSIGN  12227>>IF      12227>>IF      12237>>IF
     12237>>IF      12482<<ASSIGN  12503>>ASSIGN  12523>>ASSIGN  12560<<ASSIGN  12582>>ASSIGN  12602>>ASSIGN
     12618>>IF      12618>>IF      12634>>IF      12634>>IF      12652>>IF      12652>>IF      12674>>IF
     12674>>IF
BIN_NTEMP$
     11863**DCL     11912<<ASSIGN  11913>>IF      11913>>IF      11916>>IF      11916>>IF      11932<<ASSIGN
     11933>>IF      11933>>IF      11939>>IF      11939>>IF      12051<<ASSIGN  12052>>IF      12052>>IF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:180  
     12055>>IF      12055>>IF      12071<<ASSIGN  12072>>IF      12072>>IF      12078>>IF      12078>>IF
     12141<<ASSIGN  12142>>IF      12142>>IF      12145>>IF      12145>>IF      12161<<ASSIGN  12162>>IF
     12162>>IF      12168>>IF      12168>>IF      12503<<ASSIGN  12504>>IF      12504>>IF      12507>>IF
     12507>>IF      12523<<ASSIGN  12524>>IF      12524>>IF      12530>>IF      12530>>IF      12582<<ASSIGN
     12583>>IF      12583>>IF      12586>>IF      12586>>IF      12602<<ASSIGN  12603>>IF      12603>>IF
     12609>>IF      12609>>IF
BIN_RESULT$
     11876**DCL     11910<<ASSIGN  11911>>DOWHILE 11912>>ASSIGN  11921<<ASSIGN  11921>>ASSIGN  11931<<ASSIGN
     11932>>ASSIGN  11959>>IF      11961>>ASSIGN  12049<<ASSIGN  12050>>DOWHILE 12051>>ASSIGN  12060<<ASSIGN
     12060>>ASSIGN  12070<<ASSIGN  12071>>ASSIGN  12098>>IF      12099>>ASSIGN  12101>>ASSIGN  12103>>ASSIGN
     12139<<ASSIGN  12140>>DOWHILE 12141>>ASSIGN  12150<<ASSIGN  12150>>ASSIGN  12160<<ASSIGN  12161>>ASSIGN
     12188>>IF      12190>>ASSIGN  12192>>ASSIGN  12195>>ASSIGN  12223>>ASSIGN  12224>>ASSIGN  12580<<ASSIGN
     12581>>DOWHILE 12582>>ASSIGN  12591<<ASSIGN  12591>>ASSIGN  12601<<ASSIGN  12602>>ASSIGN  12618>>IF
     12618>>IF      12620<<ASSIGN  12620>>ASSIGN  12629>>ASSIGN  12643>>ASSIGN  12647>>IF      12648>>ASSIGN
BIN_SPLIT
     12067**LABEL   12083--GOTO
BIN_SPLIT_A
     11928**LABEL   11944--GOTO
BIN_SPLIT_D
     12157**LABEL   12173--GOTO
BIN_SPLIT_S
     12519**LABEL   12535--GOTO
BIN_SPLIT_U
     12598**LABEL   12614--GOTO
BIN_START$
     11874**DCL     11886<<ASSIGN  11908>>IF      11909>>IF      11910>>ASSIGN  11927>>ASSIGN  11928>>ASSIGN
     12028<<ASSIGN  12047>>IF      12048>>IF      12049>>ASSIGN  12066>>ASSIGN  12067>>ASSIGN  12118<<ASSIGN
     12137>>IF      12138>>IF      12139>>ASSIGN  12156>>ASSIGN  12157>>ASSIGN  12226>>DOWHILE 12480<<ASSIGN
     12499>>IF      12500>>IF      12501>>ASSIGN  12518>>ASSIGN  12519>>ASSIGN  12558<<ASSIGN  12578>>IF
     12579>>IF      12580>>ASSIGN  12597>>ASSIGN  12598>>ASSIGN  12633>>DOWHILE 12673>>DOWHILE
BIN_START1$
     11864**DCL     11928<<ASSIGN  11931>>ASSIGN  12067<<ASSIGN  12070>>ASSIGN  12157<<ASSIGN  12160>>ASSIGN
     12519<<ASSIGN  12522>>ASSIGN  12598<<ASSIGN  12601>>ASSIGN
BIN_STOP$
     11875**DCL     11887<<ASSIGN  11909>>IF      11911>>DOWHILE 11927>>ASSIGN  12029<<ASSIGN  12048>>IF
     12050>>DOWHILE 12066>>ASSIGN  12119<<ASSIGN  12138>>IF      12140>>DOWHILE 12156>>ASSIGN  12236>>DOWHILE
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:181  
     12481<<ASSIGN  12500>>IF      12502>>DOWHILE 12518>>ASSIGN  12559<<ASSIGN  12579>>IF      12581>>DOWHILE
     12597>>ASSIGN  12651>>DOWHILE
BUMP_START
     12234**LABEL   12230--GOTO
CST_D
     11777**DCL     12381<<ASSIGN  12383>>IF      12384>>IF      12404>>ASSIGN  12405>>ASSIGN
CST_R
     11778**DCL     12382<<ASSIGN  12383>>IF      12384>>IF      12384>>IF      12406>>ASSIGN  12407>>ASSIGN
CST_TYPE
     11788**DCL     12404>>ASSIGN  12406>>ASSIGN
CST_TYPE_COUNT
     11805**DCL     12405>>ASSIGN  12407>>ASSIGN
CURR$
     11724**DCL     12025<<ASSIGN  12028>>ASSIGN  12029>>ASSIGN  12030>>ASSIGN  12104>>ASSIGN  12107>>IF
     12108<<ASSIGN  12108>>ASSIGN  12116<<ASSIGN  12117>>DOWHILE 12118>>ASSIGN  12119>>ASSIGN  12120>>ASSIGN
     12196>>ASSIGN  12261>>IF      12262<<ASSIGN  12262>>ASSIGN  12265>>DOWHILE 12266<<ASSIGN  12266>>ASSIGN
     12267>>IF      12269<<ASSIGN  12269>>ASSIGN
DATA_DEF
     11828**DCL     12453>>ASSIGN
DECREASE_STOP
     12244**LABEL   12240--GOTO
DEF_REC
     11765**DCL     12017<<ASSIGN  12018>>ASSIGN  12028>>ASSIGN  12029>>ASSIGN  12098>>IF      12118>>ASSIGN
     12119>>ASSIGN  12188>>IF      12200>>IF
DESCENDANT_SEARCH
     12116**LABEL   12105--GOTO
DNAME$
     11736**DCL     11889<<ASSIGN  11979>>ASSIGN  11982>>IF      12648>>ASSIGN  12657>>ASSIGN  12679>>ASSIGN
DOES_NOT_ALLOW
     11822**DCL     12306>>ASSIGN  12311>>ASSIGN
EVER_FOUND
     12274**LABEL   12267--GOTO
F$NAME_.COUNT
     11847**DCL     11848--IMP-SIZ
FIND_PRIMARY_ENTDEF
     11893**LABEL   11976--GOTO    11982--GOTO
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:182  
FIRST_START$
     11733**DCL     12223<<ASSIGN  12226>>DOWHILE 12227>>IF      12227>>IF      12231<<ASSIGN  12231>>ASSIGN
     12234<<ASSIGN  12234>>ASSIGN  12246>>DOWHILE 12247>>ASSIGN  12248>>IF      12250>>ASSIGN  12252>>ASSIGN
     12253>>ASSIGN  12254<<ASSIGN  12254>>ASSIGN
FIRST_STOP$
     11734**DCL     12224<<ASSIGN  12236>>DOWHILE 12237>>IF      12237>>IF      12241<<ASSIGN  12241>>ASSIGN
     12244<<ASSIGN  12244>>ASSIGN  12246>>DOWHILE
FOUND$
     11725**DCL     12026<<ASSIGN  12103<<ASSIGN  12194>>IF      12195<<ASSIGN  12200>>IF      12202>>IF
     12203>>ASSIGN  12213>>IF      12214>>ASSIGN  12274>>IF      12277>>ASSIGN  12280>>ASSIGN  12281>>IF
     12283>>IF      12286>>IF      12328>>IF      12347>>ASSIGN  12381>>ASSIGN  12424>>IF      12425>>ASSIGN
     12426>>ASSIGN  12427>>IF      12432>>ASSIGN  12435>>ASSIGN  12437>>ASSIGN  12441>>IF      12441>>IF
     12441>>IF      12441>>IF      12470>>ASSIGN  12471>>IF      12501<<ASSIGN  12502>>DOWHILE 12503>>ASSIGN
     12512<<ASSIGN  12512>>ASSIGN  12522<<ASSIGN  12523>>ASSIGN  12550>>ASSIGN
FOUND_ANCESTOR
     12098**LABEL   12057--GOTO
FOUND_DESCENDANT
     12188**LABEL   12147--GOTO
FOUND_SEGREF
     12550**LABEL   12509--GOTO
FOUND_UNSAT
     12629**LABEL   12588--GOTO
HEAD_INX
     11768**DCL     11989<<ASSIGN  11990>>ASSIGN  11991>>ASSIGN
I
     11755**DCL     11756--REDEF   11966<<ASSIGN  11966>>ASSIGN  11969>>IF      11978>>DOWHILE 11979>>ASSIGN
     11983<<ASSIGN  11983>>ASSIGN  11987<<DOINDEX 11988>>ASSIGN  11992>>ASSIGN  11993>>ASSIGN  12014>>ASSIGN
     12016>>ASSIGN  12020>>ASSIGN  12558>>ASSIGN  12559>>ASSIGN  12699>>IF      12699>>IF      12709>>IF
     12710>>ASSIGN  12710>>ASSIGN  12712>>ASSIGN  12712>>ASSIGN  12714>>ASSIGN  12717>>ASSIGN  12755>>ASSIGN
     12755>>ASSIGN  12759>>ASSIGN  12759>>ASSIGN  12768>>ASSIGN  12768>>ASSIGN  12771>>ASSIGN
I1
     11781**DCL     12014<<ASSIGN  12199>>ASSIGN  12737>>ASSIGN  12744>>ASSIGN
INSERT$
     11737**DCL     12629<<ASSIGN  12633>>DOWHILE 12634>>IF      12634>>IF      12638>>IF      12639<<ASSIGN
     12639>>ASSIGN  12643<<ASSIGN  12651>>DOWHILE 12652>>IF      12652>>IF      12656>>IF      12657>>ASSIGN
     12665<<ASSIGN  12665>>ASSIGN  12673>>DOWHILE 12674>>IF      12674>>IF      12678>>IF      12679>>ASSIGN
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:183  
     12688<<ASSIGN  12688>>ASSIGN  12694<<ASSIGN  12694>>ASSIGN  12714<<ASSIGN  12718>>IF      12719>>DOWHILE
     12729>>ASSIGN  12733>>ASSIGN  12747>>ASSIGN  12748>>ASSIGN  12751>>ASSIGN
INSERT_POINT
     12693**LABEL   12655--GOTO    12660--GOTO    12667--GOTO
J
     11757**DCL     11758--REDEF
K
     11759**DCL     11760--REDEF
L
     11761**DCL     11762--REDEF   12457<<ASSIGN  12458>>ASSIGN  12459>>ASSIGN
NAME_SIZEW
     11770**DCL     12698<<ASSIGN  12699>>IF      12753>>ASSIGN  12757>>ASSIGN
NAME_X
     11783**DCL     12018<<ASSIGN  12030>>ASSIGN  12120>>ASSIGN
NEXT_NODE
     12028**LABEL   12109--GOTO
NODE$
     11726**DCL     12104<<ASSIGN  12196<<ASSIGN  12275>>ASSIGN  12278>>IF      12468>>IF
NOT_FOUND
     12107**LABEL   12047--GOTO    12058--GOTO    12062--GOTO    12091--GOTO    12102--GOTO
NOT_FOUND_DESCENDANT
     12261**LABEL   12137--GOTO    12148--GOTO    12152--GOTO    12181--GOTO    12193--GOTO    12201--GOTO
NOT_FOUND_SEARCH
     12643**LABEL   12578--GOTO    12589--GOTO    12593--GOTO    12622--GOTO
NOT_FOUND_SEGREF
     12556**LABEL   12499--GOTO    12510--GOTO    12514--GOTO    12543--GOTO
NOT_FOUND_UNSAT
     12698**LABEL   12644--GOTO
NO_PRIMARY_ENTDEF
     11966**LABEL   11908--GOTO    11919--GOTO    11923--GOTO    11952--GOTO    11959--GOTO
NPAGE
     11775**DCL     11999<>CALL
NP_D
     11779**DCL     12347<<ASSIGN  12359<>CALL
NP_R
     11780**DCL     12348<<ASSIGN  12355<>CALL
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:184  
P$
     11720**DCL     12021<<ASSIGN  12022>>DOWHILE 12024>>ASSIGN  12283>>IF      12286>>IF      12305>>IF
     12328>>IF      12348>>ASSIGN  12382>>ASSIGN  12440>>IF      12733>>ASSIGN  12734>>IF      12765<<ASSIGN
     12765>>ASSIGN
PAGE
     11772**DCL     11991<<ASSIGN  11999<>CALL
PN$
     11732**DCL     11892<<ASSIGN  11913>>IF      11913>>IF      11916>>IF      11916>>IF      11933>>IF
     11933>>IF      11939>>IF      11939>>IF      11967>>IF      11970>>ASSIGN  11971>>ASSIGN  11971>>ASSIGN
     11975<<ASSIGN  11979<<ASSIGN  11982>>IF      12024<<ASSIGN  12052>>IF      12052>>IF      12055>>IF
     12055>>IF      12072>>IF      12072>>IF      12078>>IF      12078>>IF      12142>>IF      12142>>IF
     12145>>IF      12145>>IF      12162>>IF      12162>>IF      12168>>IF      12168>>IF      12227>>IF
     12227>>IF      12237>>IF      12237>>IF      12293>>ASSIGN  12293>>ASSIGN  12294>>ASSIGN  12335>>ASSIGN
     12335>>ASSIGN  12336>>ASSIGN  12391>>ASSIGN  12391>>ASSIGN  12392>>ASSIGN  12455>>ASSIGN  12456>>ASSIGN
     12456>>ASSIGN  12504>>IF      12504>>IF      12507>>IF      12507>>IF      12524>>IF      12524>>IF
     12530>>IF      12530>>IF      12583>>IF      12583>>IF      12586>>IF      12586>>IF      12603>>IF
     12603>>IF      12609>>IF      12609>>IF      12618>>IF      12618>>IF      12634>>IF      12634>>IF
     12652>>IF      12652>>IF      12674>>IF      12674>>IF      12698>>ASSIGN  12727>>ASSIGN  12728>>ASSIGN
     12728>>ASSIGN
PRO_TYPE
     11834**DCL     12459>>ASSIGN
PRO_TYPE_COUNT
     11844**DCL     12458>>ASSIGN
Q$
     11721**DCL     12015<<ASSIGN  12016>>ASSIGN  12022>>DOWHILE
R$
     11722**DCL     12457>>ASSIGN  12648<<ASSIGN  12649>>IF      12649>>IF      12657<<ASSIGN  12658>>IF
     12658>>IF      12661>>IF      12661>>IF      12672>>IF      12672>>IF      12679<<ASSIGN  12680>>IF
     12680>>IF      12683>>IF      12683>>IF      12717<<ASSIGN  12718>>IF      12719>>DOWHILE 12720>>ASSIGN
     12720>>ASSIGN  12722<<ASSIGN  12722>>ASSIGN
REF_REC
     11764**DCL     11988<<ASSIGN  11989>>ASSIGN  11995>>ASSIGN  11996>>ASSIGN  11997>>ASSIGN  11998>>ASSIGN
     11999<>CALL    12013>>IF      12017>>ASSIGN  12276>>IF      12431>>IF      12452>>IF      12479>>IF
RESOLVE$
     11735**DCL     12020<<ASSIGN  12023>>ASSIGN  12275>>ASSIGN  12277>>ASSIGN  12279>>ASSIGN  12425>>ASSIGN
     12432>>ASSIGN  12435>>ASSIGN  12437>>ASSIGN  12469>>ASSIGN  12550>>ASSIGN  12553>>ASSIGN  12556>>ASSIGN
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:185  
     12766<<ASSIGN  12766>>ASSIGN  12768>>ASSIGN  12771>>ASSIGN
RNAME$
     11731**DCL     12019<<ASSIGN  12024>>ASSIGN
SAVE_NAME_DISP
     11782**DCL     12247<<ASSIGN  12253>>ASSIGN
SEARCH_FORWARD
     12651**LABEL   12647--GOTO
SEARCH_SECONDARY
     12647**LABEL   12631--GOTO
SEG_DEF
     11831**DCL     12454>>ASSIGN
SI
     11756**DCL     11893<<ASSIGN  11967>>IF
SOURCE
     11767**DCL     12099<<ASSIGN  12101<<ASSIGN  12102>>IF      12190<<ASSIGN  12192<<ASSIGN  12193>>IF
     12201>>IF
STEP_FORWARD_ONCE
     12694**LABEL   12637--GOTO    12641--GOTO    12677--GOTO    12682--GOTO    12687--GOTO
TEMP
     11785**DCL     11892--ASSIGN  11967--IF      11975--ASSIGN
TEMP.CHARS
     11787**DCL     11891<<ASSIGN  11971<<ASSIGN  11973<<ASSIGN  12649>>IF      12658>>IF      12661>>IF
     12672>>IF      12680>>IF      12683>>IF
TEMP.COUNT
     11786**DCL     11890<<ASSIGN  11970<<ASSIGN  11973>>ASSIGN  11974<<ASSIGN  11974>>ASSIGN
TSIZE
     11771**DCL     11990<<ASSIGN  11994>>IF      11999<>CALL    11999<>CALL
TSIZE_READ
     11776**DCL     11999<>CALL    12015>>ASSIGN
UNSAT_ALREADY_THERE
     12762**LABEL   12630--GOTO    12638--GOTO    12663--GOTO    12685--GOTO    12691--GOTO
VX$LLIST_SC.BASE$
     11490**DCL     11979>>ASSIGN
VX$LLIST_SC.COUNT
     11491**DCL     11978>>DOWHILE
VX$NODE.ADDR_START_A
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:186  
     10772**DCL     10773--REDEF
VX$NODE.ADDR_STOP_A
     10777**DCL     10778--REDEF
VX$NODE.BROTHER$
     10761**DCL     12265>>DOWHILE 12269>>ASSIGN
VX$NODE.DEPTH
     10771**DCL     12278>>IF      12278>>IF      12468>>IF      12468>>IF
VX$NODE.FATHER$
     10762**DCL     12266>>ASSIGN
VX$NODE.L_PREV_SIZE
     10830**DCL     10841--REDEF
VX$NODE.L_PREV_SIZE_A
     10841**DCL     11998<<ASSIGN
VX$NODE.L_SC_START
     10849**DCL     10854--REDEF
VX$NODE.L_SC_STOP
     10855**DCL     10860--REDEF
VX$NODE.L_SIZE
     10818**DCL     10829--REDEF
VX$NODE.L_SIZE_A
     10829**DCL     11997<<ASSIGN
VX$NODE.L_START
     10794**DCL     10805--REDEF
VX$NODE.L_START.DN$
     10796**DCL     11888>>ASSIGN
VX$NODE.L_START.ED$
     10799**DCL     11886>>ASSIGN
VX$NODE.L_START_A$
     10805**DCL     11995<<ASSIGN  12028>>ASSIGN  12030>>ASSIGN  12118>>ASSIGN  12120>>ASSIGN
VX$NODE.L_STOP
     10806**DCL     10817--REDEF
VX$NODE.L_STOP.ED$
     10811**DCL     11887>>ASSIGN
VX$NODE.L_STOP_A$
     10817**DCL     11996<<ASSIGN  12029>>ASSIGN  12119>>ASSIGN
VX$NODE.NUM
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:187  
     10770**DCL     12275>>ASSIGN
VX$NODE.PATH$
     10763**DCL     12108>>ASSIGN
VX$NODE.PROMOTE_HEAD
     10861**DCL     10864--REDEF
VX$NODE.PROMOTE_TAIL
     10865**DCL     10868--REDEF
VX$NODE.SON$
     10760**DCL     12116>>ASSIGN  12261>>IF      12262>>ASSIGN
VX$NODE.START_PAGE#_A
     10782**DCL     10783--REDEF
VX$NODE.STOP_PAGE#_A
     10787**DCL     10788--REDEF
VX$SC
     11344**DCL     11979--ASSIGN
VX$SC.NAME_DISP
     11382**DCL     11979>>ASSIGN
VX$SC.TYPE
     11347**DCL     12457>>ASSIGN
VX$SECT.MBZ
     11455**DCL     11457--REDEF   11461--REDEF
VX$TMPLT.A
     11516**DCL     11517--REDEF   11518--REDEF   11912>>ASSIGN  11932>>ASSIGN  12051>>ASSIGN  12071>>ASSIGN
     12141>>ASSIGN  12161>>ASSIGN  12503>>ASSIGN  12523>>ASSIGN  12582>>ASSIGN  12602>>ASSIGN  12618>>IF
     12618>>IF
VXD$B2C
     11686**DCL-ENT 12355--CALL    12359--CALL
VXD$TMPLT
     10903**DCL     11909--IF      11921--ASSIGN  11927--ASSIGN  11928--ASSIGN  11931--ASSIGN  12048--IF
     12060--ASSIGN  12066--ASSIGN  12067--ASSIGN  12070--ASSIGN  12138--IF      12150--ASSIGN  12156--ASSIGN
     12157--ASSIGN  12160--ASSIGN  12231--ASSIGN  12234--ASSIGN  12241--ASSIGN  12244--ASSIGN  12254--ASSIGN
     12500--IF      12512--ASSIGN  12518--ASSIGN  12519--ASSIGN  12522--ASSIGN
VXD$TMPLT.AD.ISADDR
     10926**DCL     10928--REDEF
VXD$TMPLT.AD.LFLAGS.MULTIPLE
     10916**DCL     12213>>IF      12214<<ASSIGN  12252<<ASSIGN
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:188  
VXD$TMPLT.AD.LFLAGS.SOURCE
     10912**DCL     12101>>ASSIGN  12192>>ASSIGN  12471>>IF
VXD$TMPLT.AD.LFLAGS.USED
     10918**DCL     12470<<ASSIGN
VXD$TMPLT.CONSTNT
     10933**DCL     12098>>IF      12188>>IF      12200>>IF      12248>>IF      12424>>IF
VXD$TMPLT.LFLAGS
     10939**DCL     10952--REDEF
VXD$TMPLT.LFLAGS.MULTIPLE
     10942**DCL     12202>>IF      12203<<ASSIGN  12250<<ASSIGN
VXD$TMPLT.LFLAGS.SOURCE
     10946**DCL     12099>>ASSIGN  12190>>ASSIGN  12427>>IF
VXD$TMPLT.LFLAGS.USED
     10944**DCL     12426<<ASSIGN
VXD$TMPLT.NPOINTER
     10930**DCL     12227>>IF      12227>>IF      12237>>IF      12237>>IF      12247>>ASSIGN  12253<<ASSIGN
VXD$TMPLT.PROTECTION.TYPE
     10954**DCL     12441>>IF      12441>>IF      12441>>IF      12441>>IF
VXD$TMPLT.VALUE
     10904**DCL     10906--REDEF   12425>>ASSIGN
VXE$ERROR
     11679**DCL-ENT 12299--CALL    12318--CALL    12341--CALL    12371--CALL    12397--CALL    12413--CALL
     12464--CALL
VXR$SAT
     11312**DCL     12023<<ASSIGN  12766--ASSIGN  12768--ASSIGN  12771--ASSIGN
VXR$SAT.BELOW
     11318**DCL     12279<<ASSIGN  12469<<ASSIGN
VXR$SAT.NODE#
     11320**DCL     12275<<ASSIGN
VXR$SAT.SEG.OFFSET
     11315**DCL     12435<<ASSIGN
VXR$SAT.SEG.SEGID
     11317**DCL     12437<<ASSIGN
VXR$SAT.VALUE
     11313**DCL     11314--REDEF   12277<<ASSIGN  12425<<ASSIGN  12432<<ASSIGN  12550<<ASSIGN  12553<<ASSIGN
     12556<<ASSIGN
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:189  
VXR$TMPLT
     11215**DCL     12015--ASSIGN  12559--ASSIGN  12579--IF      12591--ASSIGN  12597--ASSIGN  12598--ASSIGN
     12601--ASSIGN  12620--ASSIGN  12639--ASSIGN  12665--ASSIGN  12688--ASSIGN  12694--ASSIGN  12717--ASSIGN
     12720--ASSIGN  12720<<ASSIGN  12720>>ASSIGN  12722--ASSIGN  12755--ASSIGN  12759--ASSIGN  12765--ASSIGN
VXR$TMPLT.GOT
     11221**DCL     11223--REDEF   12638>>IF      12647>>IF      12656>>IF      12678>>IF      12747<<ASSIGN
     12751<<ASSIGN
VXR$TMPLT.NPOINTER
     11216**DCL     12024>>ASSIGN  12634>>IF      12634>>IF      12652>>IF      12652>>IF      12674>>IF
     12674>>IF      12729<<ASSIGN
VXR$TMPLT.OPOINTER
     11224**DCL     12648>>ASSIGN  12657>>ASSIGN  12679>>ASSIGN  12748<<ASSIGN
VXR$TMPLT.READ_ONLY
     11220**DCL     12440>>IF
VXR$TMPLT.SREF
     11218**DCL     12733<<ASSIGN  12733>>ASSIGN  12734>>IF
VXT$FIMAGE
     11702**DCL-ENT 12775--CALL
VXU$PREAD
     11696**DCL-ENT 11999--CALL
VXU$UNSAT
     11701**DCL-ENT 12702--CALL
VX_BIAS.A
      9577**DCL      9578--REDEF
VX_CBUF.CHARS_A
      9511**DCL      9512--REDEF
VX_CONST_DCB.ACTPOS
     10693**DCL     10693--REDEF
VX_CONST_DCB.ARS#
     10652**DCL     10652--REDEF
VX_CONST_DCB.ATTR#
     10682**DCL     10682--REDEF   10684--REDEF
VX_CONST_DCB.BORROW
     10704**DCL     10704--REDEF   10704--REDEF   10704--REDEF
VX_CONST_DCB.EOMCHAR#
     10659**DCL     10660--REDEF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:190  
VX_CONST_DCB.FLDID
     10696**DCL     10697--REDEF
VX_CONST_DCB.FORM$
     10688**DCL     10688--REDEF
VX_CONST_DCB.FSECT
     10711**DCL     10711--REDEF
VX_CONST_DCB.FSN#
     10678**DCL     10678--REDEF   10678--REDEF   10679--REDEF
VX_CONST_DCB.HEADER$
     10687**DCL     10688--REDEF
VX_CONST_DCB.IXTNSIZE#
     10684**DCL     10685--REDEF
VX_CONST_DCB.LASTSTA$
     10668**DCL     10668--REDEF
VX_CONST_DCB.LVL
     10705**DCL     10705--REDEF
VX_CONST_DCB.NAME#.C
     10668**DCL     10669--REDEF
VX_CONST_DCB.NOEOF
     10700**DCL     10700--REDEF
VX_CONST_DCB.NRECS#
     10685**DCL     10685--REDEF
VX_CONST_DCB.NRECX
     10712**DCL     10712--REDEF
VX_CONST_DCB.OHDR
     10701**DCL     10701--REDEF
VX_CONST_DCB.ORG#
     10676**DCL     10677--REDEF
VX_CONST_DCB.PRECNO
     10709**DCL     10709--REDEF
VX_CONST_DCB.RCSZ
     10717**DCL     10717--REDEF
VX_CONST_DCB.RES#
     10670**DCL     10670--REDEF
VX_CONST_DCB.SETX
     10689**DCL     10689--REDEF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:191  
VX_CONST_DCB.TAB$
     10688**DCL     10688--REDEF
VX_CONST_DCB.TDA
     10708**DCL     10709--REDEF
VX_CONST_DCB.WSN#
     10670**DCL     10671--REDEF
VX_CURR$
      9546**DCL     11886>>ASSIGN  11887>>ASSIGN  11888>>ASSIGN  11995>>ASSIGN  11996>>ASSIGN  11997>>ASSIGN
     11998>>ASSIGN  11999<>CALL    12107>>IF      12116>>ASSIGN  12267>>IF      12278>>IF      12468>>IF
VX_EBUF.CHARS_A
     10100**DCL     10101--REDEF
VX_EFIELD1
     10107**DCL     12306<<ASSIGN  12310<<ASSIGN  12453<<ASSIGN  12454<<ASSIGN
VX_EFIELD1.CHARS
     10109**DCL     10110--REDEF   12293<<ASSIGN  12335<<ASSIGN  12391<<ASSIGN  12404<<ASSIGN
VX_EFIELD1.CHARS_A
     10110**DCL     12355<>CALL
VX_EFIELD1.COUNT
     10108**DCL     12294<<ASSIGN  12336<<ASSIGN  12392<<ASSIGN  12405<<ASSIGN
VX_EFIELD2
     10111**DCL     12307<<ASSIGN  12311<<ASSIGN
VX_EFIELD2.CHARS
     10113**DCL     10114--REDEF   12406<<ASSIGN  12456<<ASSIGN
VX_EFIELD2.CHARS_A
     10114**DCL     12359<>CALL
VX_EFIELD2.COUNT
     10112**DCL     12407<<ASSIGN  12455<<ASSIGN
VX_EFIELD3.CHARS
     10117**DCL     10118--REDEF   12459<<ASSIGN
VX_EFIELD3.COUNT
     10116**DCL     12458<<ASSIGN
VX_EI_KEY_BUF.KEY
     10493**DCL     10494--REDEF
VX_ERRORS
      9554**DCL      9565--REDEF
VX_ERRORS.CONFLICT.ALTRIT
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:192  
      9562**DCL     12320<<ASSIGN  12320>>ASSIGN
VX_ERRORS.CONFLICT.CST
      9564**DCL     12415<<ASSIGN  12415>>ASSIGN
VX_ERRORS.CONFLICT.PARM
      9563**DCL     12373<<ASSIGN  12373>>ASSIGN
VX_ERRORS.CONFLICT_A
      9560**DCL      9561--REDEF
VX_ERRORS.MULTIPLE
      9555**DCL     12208<<ASSIGN  12208>>ASSIGN  12219<<ASSIGN  12219>>ASSIGN
VX_ERRORS.UNSAT.UNSAT_PRIMARY
      9558**DCL     12743<<ASSIGN  12743>>ASSIGN
VX_ERRORS.UNSAT.UNSAT_SECONDARY
      9559**DCL     12736<<ASSIGN  12736>>ASSIGN
VX_ERRORS.UNSAT_A
      9556**DCL      9557--REDEF
VX_ERR_SEV
      9567**DCL     12205>>IF      12205<<ASSIGN  12216>>IF      12216<<ASSIGN  12322>>IF      12322<<ASSIGN
     12375>>IF      12375<<ASSIGN  12417>>IF      12417<<ASSIGN  12741>>IF      12741<<ASSIGN
VX_HEAD_INX
     10216**DCL     11989>>ASSIGN
VX_IMAGE_DATA.CPAGE#_A
      8691**DCL      8692--REDEF
VX_IMAGE_DATA.NODE_A$
      8703**DCL      8704--REDEF
VX_IMAGE_DATA.START_A$
      8695**DCL      8696--REDEF
VX_IMAGE_DATA.STOP_A$
      8699**DCL      8700--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8760**DCL      8761--REDEF
VX_IMAGE_DS3.NODE_A$
      8772**DCL      8773--REDEF
VX_IMAGE_DS3.START_A$
      8764**DCL      8765--REDEF
VX_IMAGE_DS3.STOP_A$
      8768**DCL      8769--REDEF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:193  
VX_IMAGE_DS4.CPAGE#_A
      8783**DCL      8784--REDEF
VX_IMAGE_DS4.NODE_A$
      8795**DCL      8796--REDEF
VX_IMAGE_DS4.START_A$
      8787**DCL      8788--REDEF
VX_IMAGE_DS4.STOP_A$
      8791**DCL      8792--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8806**DCL      8807--REDEF
VX_IMAGE_DS5.NODE_A$
      8818**DCL      8819--REDEF
VX_IMAGE_DS5.START_A$
      8810**DCL      8811--REDEF
VX_IMAGE_DS5.STOP_A$
      8814**DCL      8815--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8829**DCL      8830--REDEF
VX_IMAGE_DS6.NODE_A$
      8841**DCL      8842--REDEF
VX_IMAGE_DS6.START_A$
      8833**DCL      8834--REDEF
VX_IMAGE_DS6.STOP_A$
      8837**DCL      8838--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8852**DCL      8853--REDEF
VX_IMAGE_DS7.NODE_A$
      8864**DCL      8865--REDEF
VX_IMAGE_DS7.START_A$
      8856**DCL      8857--REDEF
VX_IMAGE_DS7.STOP_A$
      8860**DCL      8861--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8875**DCL      8876--REDEF
VX_IMAGE_DS8.NODE_A$
      8887**DCL      8888--REDEF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:194  
VX_IMAGE_DS8.START_A$
      8879**DCL      8880--REDEF
VX_IMAGE_DS8.STOP_A$
      8883**DCL      8884--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8714**DCL      8715--REDEF
VX_IMAGE_PROC.NODE_A$
      8726**DCL      8727--REDEF
VX_IMAGE_PROC.START_A$
      8718**DCL      8719--REDEF
VX_IMAGE_PROC.STOP_A$
      8722**DCL      8723--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8737**DCL      8738--REDEF
VX_IMAGE_ROS.NODE_A$
      8749**DCL      8750--REDEF
VX_IMAGE_ROS.START_A$
      8741**DCL      8742--REDEF
VX_IMAGE_ROS.STOP_A$
      8745**DCL      8746--REDEF
VX_MATCH_NAME_A
     10223**DCL     12018>>ASSIGN
VX_M_VECTOR.F
      8542**DCL      8546--REDEF
VX_M_VECTOR_DP.F
      8577**DCL      8581--REDEF
VX_O.ACCTN_A$
      9706**DCL      9707--REDEF
VX_O.DCB_MATCH_A$
      9715**DCL      9716--REDEF
VX_O.DCB_MATCH_HIT_A
      9721**DCL      9722--REDEF
VX_O.FIDN_A$
      9700**DCL      9701--REDEF
VX_O.FID_A$
      9692**DCL      9693--REDEF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:195  
VX_O.INCLUDE_A$
      9712**DCL      9713--REDEF
VX_O.MAP_A
      9686**DCL      9687--REDEF
VX_O.NODCB_A
      9743**DCL      9744--REDEF
VX_O.NUM_A
      9631**DCL      9633--REDEF
VX_O.OPT_A
      9731**DCL      9732--REDEF
VX_O.PRIV_A
      9647**DCL      9649--REDEF
VX_O.SIN_A
      9600**DCL      9601--REDEF
VX_O.TCB_A
      9727**DCL      9728--REDEF
VX_OD.ACCTN_A$
      9904**DCL      9905--REDEF
VX_OD.DCB_MATCH_A$
      9913**DCL      9914--REDEF
VX_OD.FIDN_A$
      9898**DCL      9899--REDEF
VX_OD.FID_A$
      9890**DCL      9891--REDEF
VX_OD.INCLUDE_A$
      9910**DCL      9911--REDEF
VX_OD.MAP_A
      9884**DCL      9885--REDEF
VX_OD.NODCB_A
      9928**DCL      9929--REDEF
VX_OD.NUM_A
      9831**DCL      9832--REDEF
VX_OD.PRIV_A
      9846**DCL      9847--REDEF
VX_OD.SIN_A
      9800**DCL      9801--REDEF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:196  
VX_OD.VECTOR_A$
      9919**DCL      9920--REDEF
VX_OK.KPEDX
      8669**DCL     11961<<ASSIGN  11962>>ASSIGN  11963>>IF      12748>>ASSIGN
VX_OK.OUNAME.CHARS
      8673**DCL     11891>>ASSIGN
VX_OK.OUNAME.COUNT
      8672**DCL     11890>>ASSIGN
VX_OL.MAX_A
      9775**DCL      9777--REDEF
VX_OL.MIN_A
      9760**DCL      9761--REDEF
VX_ON.ACCTN_A$
     10049**DCL     10051--REDEF
VX_ON.DCB_MATCH_A$
     10060**DCL     10062--REDEF
VX_ON.FIDN_A$
     10042**DCL     10044--REDEF
VX_ON.FID_A$
     10033**DCL     10035--REDEF
VX_ON.INCLUDE_A$
     10056**DCL     10058--REDEF
VX_ON.MAP_A
     10026**DCL     10028--REDEF
VX_ON.NODCB_A$
     10076**DCL     10077--REDEF
VX_ON.NUM_A
      9971**DCL      9973--REDEF
VX_ON.PRIV_A
      9987**DCL      9989--REDEF
VX_ON.SIN_A
      9939**DCL      9941--REDEF
VX_ON.VECTOR_A$
     10067**DCL     10068--REDEF
VX_OUHEAD.VERSION
      9386**DCL      9388--REDEF
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:197  
VX_OU_HEAD
      9329**DCL      9368--REDEF
VX_OU_HEAD.REC_A
      9341**DCL      9344--REDEF
VX_OU_HEAD.REC_A.PAGE
      9343**DCL     11991>>ASSIGN
VX_OU_HEAD.REC_A.SIZE
      9342**DCL     11990>>ASSIGN
VX_O_KEY_BUF.FORM0
      8590**DCL      8593--REDEF    8600--REDEF
VX_O_KEY_BUF_L.FORM0
      8613**DCL      8616--REDEF    8623--REDEF
VX_PASS2_REF.OU.L_START
     10279**DCL     10284--REDEF
VX_PASS2_REF.OU.L_START.RN$
     10280**DCL     12019>>ASSIGN
VX_PASS2_REF.OU.L_START_A$
     10284**DCL     11992>>ASSIGN
VX_PASS2_REF.OU.L_STOP
     10285**DCL     10290--REDEF
VX_PASS2_REF.OU.L_STOP_A$
     10290**DCL     11993<<ASSIGN  12016<<ASSIGN
VX_PASS2_REF.OU.MAX
     10273**DCL     10278--REDEF
VX_PASS2_REF.OU.SIZE
     10291**DCL     10296--REDEF
VX_PASS2_REF.SAT.COUNT
     10318**DCL     10324--REDEF
VX_PASS2_REF.SAT.COUNT_A
     10324**DCL     12768<<ASSIGN
VX_PASS2_REF.SAT.ENT_SIZE
     10325**DCL     10331--REDEF
VX_PASS2_REF.SAT.L_START
     10304**DCL     10310--REDEF
VX_PASS2_REF.SAT.L_START_A$
     10310**DCL     12020>>ASSIGN  12768>>ASSIGN
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:198  
VX_PASS2_REF.SAT.L_STOP
     10311**DCL     10317--REDEF
VX_PASS2_REF.SAT.L_STOP_A$
     10317**DCL     12771<<ASSIGN
VX_PASS2_REF.SAT.MAX
     10298**DCL     10303--REDEF
VX_PASS2_REF.UNSAT.L_START
     10366**DCL     10371--REDEF
VX_PASS2_REF.UNSAT.L_START.RN$
     10367**DCL     12560>>ASSIGN  12703>>IF      12704<<ASSIGN
VX_PASS2_REF.UNSAT.L_START_A$
     10371**DCL     12558>>ASSIGN  12709>>IF      12710<<ASSIGN
VX_PASS2_REF.UNSAT.L_STOP
     10372**DCL     10377--REDEF
VX_PASS2_REF.UNSAT.L_STOP.RN$
     10373**DCL     12706<<ASSIGN  12727>>ASSIGN  12728>>ASSIGN  12728>>ASSIGN  12753<<ASSIGN  12753>>ASSIGN
VX_PASS2_REF.UNSAT.L_STOP_A$
     10377**DCL     12559>>ASSIGN  12712<<ASSIGN  12717>>ASSIGN  12755<<ASSIGN  12755>>ASSIGN
VX_PASS2_REF.UNSAT.L_WHERE
     10378**DCL     10383--REDEF
VX_PASS2_REF.UNSAT.L_WHERE.RN$
     10379**DCL     12704>>ASSIGN  12706>>ASSIGN
VX_PASS2_REF.UNSAT.L_WHERE_A$
     10383**DCL     12710>>ASSIGN  12712>>ASSIGN  12714>>ASSIGN
VX_PASS2_REF.UNSAT.MAX
     10360**DCL     10365--REDEF
VX_PASS2_REF.UNSAT.MAX.RN
     10361**DCL     12699>>IF
VX_PASS2_REF.UNSAT.MAX_A
     10365**DCL     12699>>IF
VX_PASS2_REF.UNSAT.PAGE#
     10390**DCL     10395--REDEF
VX_PASS2_REF.UNSAT.PREV_RN_SIZE
     10396**DCL     12582>>ASSIGN  12602>>ASSIGN  12618>>IF      12618>>IF      12634>>IF      12634>>IF
     12652>>IF      12652>>IF      12674>>IF      12674>>IF      12729>>ASSIGN
VX_PASS2_REF.UNSAT.SIZE
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:199  
     10384**DCL     10389--REDEF
VX_PASS2_REF.UNSAT.SIZE.RN
     10385**DCL     12699>>IF      12729>>ASSIGN  12757<<ASSIGN  12757>>ASSIGN
VX_PASS2_REF.UNSAT.SIZE_A
     10389**DCL     12699>>IF      12759<<ASSIGN  12759>>ASSIGN
VX_PHRASE.PHRASE
      9792**DCL      9794--REDEF
VX_PRIMARY_ENTDEF_GOT
      9534**DCL     11960<<ASSIGN  11985<<ASSIGN  12631>>IF      12746>>IF
VX_PROGRAM_BIAS.A
      9570**DCL      9571--REDEF
VX_PROGRAM_BIAS.I.DATA
      9572**DCL     12553>>ASSIGN
VX_P_ENTDEF
     10153**DCL     11962<<ASSIGN
VX_REF_EXPONENTIAL_SWITCH
     10510**DCL     12630>>IF      12746>>IF
VX_REF_MATCH_A
     10221**DCL     12017>>ASSIGN
VX_REF_REC_A
     10220**DCL     11987--DOINDEX 11988>>ASSIGN
VX_ROOT$
      9543**DCL     12025>>ASSIGN
VX_RU_HEAD.MAP_BITS_A.MULTIPLE
      9005**DCL     12199<<ASSIGN
VX_RU_HEAD.MAP_BITS_A.PRIMARY
      9009**DCL     12744<<ASSIGN
VX_RU_HEAD.MAP_BITS_A.SECONDARY
      9011**DCL     12737<<ASSIGN
VX_R_KEY_BUF.FORM0
      8639**DCL      8643--REDEF    8649--REDEF
VX_SC_PASS2$
     10227**DCL     11978>>DOWHILE 11979>>ASSIGN
VX_SD
      8266**DCL     12480--ASSIGN
VX_SD.A
PL6.E3A0      #001=VXT$OBJECT File=VXT$OBJECT.:E05TSI                            WED 07/30/97 08:39 Page:200  
      8267**DCL      8268--REDEF
VX_SD_STOP$
      8264**DCL     12481>>ASSIGN
VX_SLIB_USED
      9535**DCL     12282<<ASSIGN  12428<<ASSIGN  12472<<ASSIGN
VX_SN
      8261**DCL     12482--ASSIGN
VX_SPC.B$.MINE
     10461**DCL     10467--REDEF
VX_SPC.B$.NAME
     10440**DCL     10446--REDEF
VX_SPC.B$.SKIP
     10454**DCL     10460--REDEF
VX_SPC.B$.VALUE
     10447**DCL     10453--REDEF
VX_SPC.SEG.NAME
     10409**DCL     10415--REDEF
VX_SPC.SEG.VALUE
     10416**DCL     10422--REDEF
VX_SPC.SEG.VALUE.NUL
     10421**DCL     12556>>ASSIGN
VX_TSX0_OVERLAY.H
     10184**DCL     10187--REDEF
WHERE$
     11729**DCL     11992<<ASSIGN  11999<>CALL    12015>>ASSIGN  12021>>ASSIGN
WILL_FIT
     11661**DCL     11884<<ASSIGN  11963<<ASSIGN  12631>>IF      12746>>IF
