

10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      1    
    1      /*M*    XSC_COMMON_M    Common macros for ISO Library Service users     */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      %EQU XSC_RDONLYCCB# = '302303000170'O;  /* hardwired E$RDONLYCCB errcode */
    9      /*F*    NAME:   XSC$$TEXTC
   10
   11              XSC$$TEXTC is used internally by the XSC$ADDRESS macro.
   12      */
   13      %MACRO XSC$$TEXTC(
   14              NAME=XSC$$TEXTC, STCLASS=BASED, LVL=1, LAST=";",
   15              TEXT=, LIMIT=7);
   16      %LSET LISTDIR = '0'B;
   17      %LSET LISTEXP = '1'B;
   18      %LSET LISTCOM = '0'B;
   19      %LSET LISTSUB = '1'B;
   20      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   21      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   22          %LSET INIT = CHARTEXT( ' INIT');
   23          %LSET ENIT = CHARTEXT( '');
   24      %ELSE;
   25          %LSET INIT = CHARTEXT( '/*');
   26          %LSET ENIT = CHARTEXT( '*/');
   27      %ENDIF;
   28      %IF LENGTHC( 'NAME') = 0;
   29          %LSET LVL = LVL - 1;
   30      %ELSE;
   31          %IF LVL = 1;
   32              DCL 1 NAME STCLASS CALIGNED,
   33          %ELSE;
   34              %LVL NAME CALIGNED,
   35          %ENDIF;
   36      %ENDIF;
   37      %LSET LVL1 = LVL + 1;
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      2    
   38      %LSET L = TEXTCHAR(LIMIT);
   39      %LSET T = TEXTCHAR(TEXT);
   40      %IF LENGTHC( T) > 0;
   41          %LSET XTXT = TEXT;
   42          %IF LENGTHC( L) = 0;
   43              %LSET XLEN = LENGTHC( XTXT);
   44          %ELSE;
   45              %LSET XLEN = L;
   46          %ENDIF;
   47      %ELSE;
   48          %IF LENGTHC( L) > 0;
   49              %LSET XLEN = LIMIT;
   50              %LSET XTXT = CONCAT( '                                ',
   51                                   '                                ',
   52                                   '                                ',
   53                                   '                                ',
   54                                   '                                ',
   55                                   '                                ',
   56                                   '                                ',
   57                                   '                                ');
   58              %LSET XTXT = SUBSTR( %XTXT, 0, XLEN);
   59              %LSET XLEN = 0;
   60          %ELSE;
   61              %LSET XTXT = '       ';
   62              %LSET XLEN = 0;
   63          %ENDIF;
   64      %ENDIF;
   65
   66          %LVL1 %CHARTEXT( 'LEN') UBIN BYTE %INIT( %XLEN)%ENIT CALIGNED,
   67          %LVL1 %CHARTEXT( 'TXT') CHAR( LIMIT) %INIT( %XTXT)%ENIT CALIGNED LAST
   68      %MEND;
   69
   70      /*F*    NAME:   XSC$$MUNGE
   71
   72              XSC$$MUNGE is used internally by the XSC$ADDRESS macro.
   73      */
   74      %MACRO XSC$$MUNGE( W=, R=);
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      3    
   75      %LSET LISTDIR = '0'B;
   76      %LSET LISTEXP = '1'B;
   77      %LSET LISTCOM = '0'B;
   78      %LSET LISTSUB = '1'B;
   79      %IF LENGTHC( %ADDR) > 0;
   80          %LSET XX = SUBSTR( %ADDR, 0, W);
   81          %LSET COMMA = ',';
   82          %IF LENGTHC( %ADDR) <= W;
   83              %LSET COMMA = '';
   84          %ENDIF;
   85          %SET XADDR = CONCAT( %XADDR, 'BITBIN(', '''', %XX, '''', %R, ')', %COMMA);
   86          %SET NLEN = NLEN + 1;
   87          %LSET ADDR = SUBSTR( %ADDR, W);
   88          %XSC$$MUNGE( W=W, R=R);
   89      %ENDIF;
   90      %MEND;
   91
   92      /*F*    NAME:   XSC$ADDRESS
   93
   94              XSC$ADDRESS generates a structure containing the complete ISO
   95              address of an application endpoint.  This includes selectors for
   96              each of the Network, Transport, Session, and Presentation layers.
   97      */
   98      %MACRO XSC$ADDRESS(
   99              NAME=XSC$ADDRESS, STCLASS=BASED, LVL=1, LAST=";",
  100              PSAP=,
  101              SSAP=,
  102              TSAP=,
  103              NSAP=);
  104      %LSET LISTDIR = '0'B;
  105      %LSET LISTEXP = '1'B;
  106      %LSET LISTCOM = '0'B;
  107      %LSET LISTSUB = '1'B;
  108      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  109      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  110          %LSET INIT = CHARTEXT( ' INIT');
  111          %LSET ENIT = CHARTEXT( '');
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      4    
  112      %ELSE;
  113          %LSET INIT = CHARTEXT( '/*');
  114          %LSET ENIT = CHARTEXT( '*/');
  115      %ENDIF;
  116      %IF LENGTHC( 'NAME') = 0;
  117          %LSET LVL = LVL - 1;
  118      %ELSE;
  119          %IF LVL = 1;
  120              DCL 1 NAME STCLASS ALIGNED,
  121          %ELSE;
  122              %LVL NAME ALIGNED,
  123          %ENDIF;
  124      %ENDIF;
  125      %LSET LVL1 = LVL + 1;
  126      %LSET L6 = BITBIN( MODE_FEP);
  127
  128      /*K*    PSAP - STRUCTURE
  129
  130              PSAP contains a TEXTC Presentation Selector for this application
  131              endpoint.  The PSAP is used to fill in the CALLING field of a
  132              P-CONNECT Request, and to fill in the RESPONDING field of a P-CONNECT
  133              Response.
  134
  135              The structure element is named XSC$ADDRESS.PSAP.  The default has a
  136              length byte of zero, and a value field entirely filled with blanks.
  137              The maximum length allowed by ISO for a PSAP is 224 bytes.
  138      */
  139      %LSET PP = CHARTEXT( 'PSAP');
  140          %XSC$$TEXTC( NAME=%PP, TEXT=PSAP, LIMIT=224,
  141                       STCLASS=STCLASS, LVL=%LVL1, LAST=",");
  142
  143      /*K*    SSAP - STRUCTURE
  144
  145              SSAP contains a TEXTC Session Selector for this application endpoint.
  146              The SSAP is used to fill in the ISSI field of an S-CONNECT Request,
  147              and to fill in the ASSI field of an S-CONNECT Response.
  148
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      5    
  149              The structure element is named XSC$ADDRESS.SSAP.  The default has a
  150              length byte of zero, and a value field entirely filled with blanks.
  151              The maximum length allowed by ISO for an SSAP is 16 bytes.
  152      */
  153      %LSET SS = CHARTEXT( 'SSAP');
  154          %K$SSAP( NAME=%SS, SSAP=SSAP, STCLASS=STCLASS, LVL=%LVL1, LAST=",");
  155
  156      /*K*    TSAP - STRUCTURE
  157
  158              TSAP contains a TEXTH Transport Selector for this application
  159              endpoint.  The TSAP is used to fill in the ISSUR field of an S-CONNECT
  160              Request, and to fill in the ASSUR field of an S-CONNECT Response.
  161
  162              The structure element is named XSC$ADDRESS.TSAP.  The default has a
  163              length byte of zero, and a value field entirely filled with blanks.
  164              The maximum length allowed by ISO for a TSAP is 32 bytes.
  165      */
  166      %LSET TT = CHARTEXT( 'TSAP');
  167      %LSET T = TEXTCHAR(TSAP);
  168      %IF LENGTHC( T) > 0;
  169          %LSET XTSAP = TSAP;
  170          %LSET TLEN = LENGTHC( XTSAP);
  171      %ELSE;
  172          %LSET XTSAP = ' ';
  173          %LSET TLEN = 0;
  174      %ENDIF;
  175          %K$TSAP( NAME=%TT, STCLASS=STCLASS, LVL=%LVL1, LAST=",",
  176                   LEN=%TLEN, TTSAP=%XTSAP);
  177
  178      /*K*    NSAP - STRUCTURE
  179
  180              NSAP contains a Network Selector for this application endpoint.  The
  181              NSAP is used to fill in the ISSUR field of an S-CONNECT Request, and
  182              to fill in the ASSUR field of an S-CONNECT Response.
  183
  184              The structure element is named XSC$ADDRESS.NSAP.  The default has a
  185              value field entirely filled with zeroes.  The maximum length allowed
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      6    
  186              by ISO for an NSAP is 20 bytes, but note that use of the XSC$$MUNGE
  187              macro may force a shorter, unknown, limit for certain formats.
  188      */
  189      %LSET NN = CHARTEXT( 'NSAP');
  190      %LSET N = TEXTCHAR(NSAP);
  191      %LSET NLEN = 0;
  192      %LSET XADDR = CHARTEXT( '0*0');  /* XADDR will be list of UBIN BYTE values */
  193      %IF LENGTHC( N) > 0;
  194          %IF '''' = SUBSTR( N, 0, 1);
  195              %LSET R = SUBSTR( N, LENGTHC( N) - 1, 1);  /* radix char */
  196              %LSET ADDR = SUBSTR( N, 1, LENGTHC( N) - 3);  /* value chars */
  197              %LSET XADDR = '';
  198              %IF R = 'O';
  199                  %XSC$$MUNGE( W=3, R=R);
  200              %ELSEIF R = 'B';
  201                  %LSET W = CHARTEXT( BINCHAR( 9 - L6));
  202                  %XSC$$MUNGE( W=%W, R=R);
  203              %ELSEIF R = 'X';
  204                  %XSC$$MUNGE( W=2, R=R);
  205              %ELSE;
  206                  %ERROR( '1'B, 'NSAP format not one of O, B, or X');
  207              %ENDIF;
  208              %IF LENGTHC( %XADDR) > 0;
  209                  %LSET NLEN = NLEN + 1;
  210                  %LSET XADDR = CHARTEXT( %XADDR);
  211              %ELSE;
  212                  %LSET XADDR = CHARTEXT( '0*0');
  213              %ENDIF;
  214          %ELSE;
  215              %ERROR( '1'B, 'NSAP must be given in ''ooo''O, ''bbb''B, or ''xxx''X format');
  216          %ENDIF;
  217      %ENDIF;
  218          %K$NSAP( FPTN=%NN, STCLASS=STCLASS, LVL=%LVL1, LAST=LAST,
  219                   ADRTYP=NET, AFI="BITBIN( '37'X)", LEN=%NLEN, ADDRESS=%XADDR);
  220      %MEND;
  221
  222      /*F*    NAME:   XSC$$$ERRCODE
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      7    
  223
  224              XSC$$$ERRCODE is an internal copy of VLP_ERRCODE with more reasonable
  225              initialization possibilities.
  226      */
  227      %MACRO XSC$$$ERRCODE( NAME=XSC$$$ERRCODE, LVL=1, LAST=";", STCLASS=BASED,
  228              FCG='0'B, MID='0'B, MON='0'B, ERR#=0, SEV=0);
  229      %LSET LISTDIR = '0'B;
  230      %LSET LISTEXP = '1'B;
  231      %LSET LISTCOM = '0'B;
  232      %LSET LISTSUB = '1'B;
  233      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  234      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  235          %LSET INIT = CHARTEXT( ' INIT');
  236          %LSET ENIT = CHARTEXT( '');
  237      %ELSE;
  238          %LSET INIT = CHARTEXT( '/*');
  239          %LSET ENIT = CHARTEXT( '*/');
  240      %ENDIF;
  241      %IF LENGTHC( 'NAME') = 0;
  242          %LSET LVL = LVL - 1;
  243      %ELSE;
  244          %IF LVL = 1;
  245              DCL 1 NAME STCLASS ALIGNED,
  246          %ELSE;
  247              %LVL NAME STCLASS ALIGNED,
  248          %ENDIF;
  249      %ENDIF;
  250      %LSET LVL1 = LVL + 1;
  251
  252          %LVL1 %CHARTEXT( 'FCG') BIT(12) %INIT( FCG)%ENIT UNAL,
  253          %LVL1 %CHARTEXT( 'MID') BIT(6) %INIT( MID)%ENIT UNAL,
  254          %LVL1 %CHARTEXT( 'MON') BIT(1) %INIT( MON)%ENIT UNAL,
  255          %LVL1 %CHARTEXT( 'ERR#') UBIN(14) %INIT( ERR#)%ENIT UNAL,
  256          %LVL1 %CHARTEXT( 'SEV') UBIN(3) %INIT( SEV)%ENIT UNAL LAST
  257      %MEND;
  258
  259      /*F*    NAME:   XSC$CCB
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      8    
  260
  261              XSC$CCB generates a connection control block, a structure defining
  262              this endpoint of an application connection.  The structure contains
  263              information of relevance to each of the ISO library layers.
  264      */
  265      %MACRO XSC$CCB(
  266              NAME=XSC$CCB, LVL=1, LAST=";", STCLASS=BASED,
  267              DCB#="DCBNUM( NIL)",
  268              TPDUSIZE=2048,
  269              WINDOWSZ=15,
  270              TIMER1=0,
  271              TIMER2=0,
  272              QOS=0,
  273              CLASS=4,
  274              OSI_FLOW( YES='1'B, NO='0'B)='0'B,
  275              TRACE( YES='1'B, NO='0'B)='0'B,
  276              CLNS( YES='1'B, NO='0'B)='1'B,
  277              OSI( YES='1'B, NO='0'B)='1'B,
  278              CLASS2FLOW( YES='1'B, NO='0'B)='0'B,
  279              EXTENDED( YES='1'B, NO='0'B)='0'B,
  280              EXPEDITED( YES='1'B, NO='0'B)='1'B,
  281              CHKSUM( YES='1'B, NO='0'B)='0'B,
  282              ADDRESS=NIL,
  283              SASE1=NIL,
  284              SASE2=NIL,
  285              SASE3=NIL,
  286              ACSE=,
  287              PRES=,
  288              SESS=,
  289              EVNT=,
  290              BLOCKING( NO='0'B, YES='1'B)='0'B,
  291              MODE( CLIENT='0'B, SERVER='1'B)='0'B);
  292      %LSET LISTDIR = '0'B;
  293      %LSET LISTEXP = '1'B;
  294      %LSET LISTCOM = '0'B;
  295      %LSET LISTSUB = '1'B;
  296      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      9    
  297      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  298          %LSET INIT = CHARTEXT( ' INIT');
  299          %LSET ENIT = CHARTEXT( '');
  300      %ELSE;
  301          %LSET INIT = CHARTEXT( '/*');
  302          %LSET ENIT = CHARTEXT( '*/');
  303      %ENDIF;
  304      %IF LENGTHC( 'NAME') = 0;
  305          %LSET LVL = LVL - 1;
  306      %ELSE;
  307          %IF LVL = 1;
  308              DCL 1 NAME STCLASS ALIGNED,
  309          %ELSE;
  310              %LVL NAME ALIGNED,
  311          %ENDIF;
  312      %ENDIF;
  313      %LSET LVL1 = LVL + 1;
  314      %LSET LVL2 = LVL1 + 1;
  315      %LSET LVL3 = LVL2 + 1;
  316      %IF MODE_FEP;
  317          %LSET LONG = CHARTEXT( '(32)');
  318          %LSET HALF = CHARTEXT( 'WORD');
  319      %ELSE;
  320          %LSET LONG = CHARTEXT( 'WORD');
  321          %LSET HALF = CHARTEXT( 'HALF');
  322      %ENDIF;
  323      %LSET CVALID = '0'B;
  324      %LSET CPROC = CHARTEXT( 'NIL');
  325      %IF 0 ~= LENGTHC( TEXTCHAR(ACSE));
  326          %LSET CVALID = '1'B;
  327          %LSET CPROC = CHARTEXT( TEXTCHAR(ACSE));
  328      %ENDIF;
  329      %LSET PVALID = '0'B;
  330      %LSET PPROC = CHARTEXT( 'NIL');
  331      %IF 0 ~= LENGTHC( TEXTCHAR(PRES));
  332          %LSET PVALID = '1'B;
  333          %LSET PPROC = CHARTEXT( TEXTCHAR(PRES));
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      10   
  334      %ENDIF;
  335      %LSET SVALID = '0'B;
  336      %LSET SPROC = CHARTEXT( 'NIL');
  337      %IF 0 ~= LENGTHC( TEXTCHAR(SESS));
  338          %LSET SVALID = '1'B;
  339          %LSET SPROC = CHARTEXT( TEXTCHAR(SESS));
  340      %ENDIF;
  341      %LSET EVALID = '0'B;
  342      %LSET EPROC = CHARTEXT( 'NIL');
  343      %IF 0 ~= LENGTHC( TEXTCHAR( EVNT));
  344          %LSET EVALID = '1'B;
  345          %LSET EPROC = CHARTEXT( TEXTCHAR(EVNT));
  346      %ENDIF;
  347      %LSET NULL = BITBIN( '777777'O);
  348
  349      /*K*    DCB# - UBIN %HALF
  350
  351              DCB#, if specified, indicates a DCB allocated by the application to
  352              use for this connection.  If DCB# is not specified, the M$XSS DCB
  353              included with the XSS library will be used if possible.
  354
  355              The structure element name is XSC$CCB.DCB#, and the default is
  356              DCBNUM( NIL).
  357      */
  358          %LVL1 %CHARTEXT( 'DCB#') UBIN %HALF %INIT( DCB#)%ENIT HALIGNED,
  359
  360          %LVL1 %CHARTEXT( 'FLAGS'),
  361      %IF NOT MODE_FEP;
  362              %LVL2 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  363      %ENDIF;
  364              %LVL2 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  365
  366      /*K*    FLAGS.BLOCKING - BIT(1)
  367
  368              FLAGS.BLOCKING is set if any connections using this CCB are to be
  369              'blocking', i.e., the Session library is to wait for incoming
  370              data whenever the library is asked if data is present and none
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      11   
  371              is immediately available.  The default is '0'B or NO.
  372      */
  373              %LVL2 %CHARTEXT( 'BLOCKING') BIT(1) %INIT( BLOCKING)%ENIT UNAL,
  374
  375      /*K*    FLAGS.CVALID - BIT(1)
  376
  377              FLAGS.CVALID is set if a value was supplied for ACSE.  See ACSE.
  378      */
  379              %LVL2 %CHARTEXT( 'CVALID') BIT(1) %INIT( %CVALID)%ENIT UNAL,
  380
  381      /*K*    FLAGS.PVALID - BIT(1)
  382
  383              FLAGS.PVALID is set if a value was supplied for PRES.  See PRES.
  384      */
  385              %LVL2 %CHARTEXT( 'PVALID') BIT(1) %INIT( %PVALID)%ENIT UNAL,
  386
  387      /*K*    FLAGS.SVALID - BIT(1)
  388
  389              FLAGS.SVALID is set if a value was supplied for SESS.  See SESS.
  390      */
  391              %LVL2 %CHARTEXT( 'SVALID') BIT(1) %INIT( %SVALID)%ENIT UNAL,
  392
  393      /*K*    FLAGS.EVALID - BIT(1)
  394
  395              FLAGS.EVALID is set if a value was supplied for EVNT.  See EVNT.
  396      */
  397              %LVL2 %CHARTEXT( 'EVALID') BIT(1) %INIT( %EVALID)%ENIT UNAL,
  398
  399      /*K*    FLAGS.ACTIVE - BIT(1)
  400
  401              FLAGS.ACTIVE is set by the library if a no-wait M$READ was ever
  402              issued for the DCB specified in DCB#.  It is cleared by XSS$COMMTERM.
  403      */
  404              %LVL2 %CHARTEXT( 'ACTIVE') BIT(1) %INIT( '0'B)%ENIT UNAL,
  405
  406      /*K*    FLAGS.MODE - BIT(1)
  407
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      12   
  408              FLAGS.MODE is set if this endpoint is an application server.
  409              It is reset if this endpoint is an application client.
  410
  411              The default is '0'B.
  412      */
  413      /*K*    MODE - { CLIENT | SERVER }
  414
  415              MODE specifies the initial value for XSC$CCB.FLAGS.MODE.
  416              See FLAGS.MODE.  The default is CLIENT.
  417      */
  418              %LVL2 %CHARTEXT( 'MODE') BIT(1) %INIT( MODE)%ENIT UNAL,
  419
  420      /*K*    LCID - UBIN BYTE
  421
  422              LCID is filled in by the XS?$COMMINIT routine that is passed the CCB.
  423              It indicates the internal connection number for this connection.  If
  424              the application uses more than one connection at a time, it is this
  425              number that determines which connection a layer primitive FPT refers
  426              to when that FPT is used.
  427
  428              The structure element name is XSC$CCB.LCID, and the default is zero.
  429      */
  430          %LVL1 %CHARTEXT( 'LCID') UBIN BYTE %INIT( 0)%ENIT UNAL,
  431
  432      /*K*    ERROR - UBIN %LONG
  433
  434              ERROR is a one-word field that is modified by the ISO library to
  435              indicate that an error occurred when using the CCB.
  436
  437              The structure element is named XSC$CCB.ERROR, and the default is
  438              chosen so that the ISO library can ALTRETURN with a meaningful error
  439              code if the CCB was erroneously allocated in CONSTANT storage.
  440      */
  441          %LVL1 %CHARTEXT( 'ERRDEF') BIT(36) %INIT( %XSC_RDONLYCCB#)%ENIT ALIGNED,
  442          %XSC$$$ERRCODE( NAME=ERROR, LVL=%LVL1, LAST=",", STCLASS="REDEF ERRDEF");
  443
  444      /*K*    TPARMS - STRUCTURE
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      13   
  445
  446              TPARMS is a set of Transport layer parameters that are
  447              copied into the FPT_CONNECT_OSI when a connection is
  448              opened.  They are provided in the CCB so they can be modified
  449              on a per-connection basis.
  450      */
  451          %LVL1 %CHARTEXT( 'TPARMS'),
  452
  453      /*K*    TPARMS.TPDUSIZE - UBIN %HALF
  454
  455      */
  456              %LVL2 %CHARTEXT( 'TPDUSIZE') UBIN %HALF %INIT( TPDUSIZE)%ENIT HALIGNED,
  457
  458      /*K*    TPARMS.WINDOWSZ - UBIN %HALF
  459
  460      */
  461              %LVL2 %CHARTEXT( 'WINDOWSZ') UBIN %HALF %INIT( WINDOWSZ)%ENIT HALIGNED,
  462
  463      /*K*    TPARMS.TIMER1 - UBIN %HALF
  464
  465      */
  466              %LVL2 %CHARTEXT( 'TIMER1') UBIN %HALF %INIT( TIMER1)%ENIT HALIGNED,
  467
  468      /*K*    TPARMS.TIMER2 - UBIN %HALF
  469
  470      */
  471              %LVL2 %CHARTEXT( 'TIMER2') UBIN %HALF %INIT( TIMER2)%ENIT HALIGNED,
  472
  473      /*K*    TPARMS.QOS - UBIN BYTE
  474
  475      */
  476              %LVL2 %CHARTEXT( 'QOS') UBIN BYTE %INIT( QOS)%ENIT CALIGNED,
  477
  478      /*K*    TPARMS.CLASS - UBIN BYTE
  479
  480      */
  481              %LVL2 %CHARTEXT( 'CLASS') UBIN BYTE %INIT( CLASS)%ENIT CALIGNED,
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      14   
  482
  483              %LVL2 %CHARTEXT( 'TR_FLAGS'),
  484
  485                  %LVL3 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  486
  487      %IF NOT MODE_FEP;
  488                  %LVL3 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  489      %ENDIF;
  490
  491      /*K*    TPARMS.TR_FLAGS.OSI_FLOW - BIT(1)
  492
  493      */
  494                  %LVL3 %CHARTEXT( 'OSI_FLOW') BIT(1) %INIT( OSI_FLOW)%ENIT UNAL,
  495
  496      /*K*    TPARMS.TR_FLAGS.TRACE - BIT(1)
  497
  498      */
  499                  %LVL3 %CHARTEXT( 'TRACE') BIT(1) %INIT( TRACE)%ENIT UNAL,
  500
  501      /*K*    TPARMS.TR_FLAGS.CLNS - BIT(1)
  502
  503      */
  504                  %LVL3 %CHARTEXT( 'CLNS') BIT(1) %INIT( CLNS)%ENIT UNAL,
  505
  506      /*K*    TPARMS.TR_FLAGS.OSI - BIT(1)
  507
  508      */
  509                  %LVL3 %CHARTEXT( 'OSI') BIT(1) %INIT( OSI)%ENIT UNAL,
  510
  511      /*K*    TPARMS.TR_FLAGS.CLASS2FLOW - BIT(1)
  512
  513      */
  514                  %LVL3 %CHARTEXT( 'CLASS2FLOW') BIT(1) %INIT( CLASS2FLOW)%ENIT UNAL,
  515
  516      /*K*    TPARMS.TR_FLAGS.EXTENDED - BIT(1)
  517
  518      */
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      15   
  519                  %LVL3 %CHARTEXT( 'EXTENDED') BIT(1) %INIT( EXTENDED)%ENIT UNAL,
  520
  521      /*K*    TPARMS.TR_FLAGS.EXPEDITED - BIT(1)
  522
  523      */
  524                  %LVL3 %CHARTEXT( 'EXPEDITED') BIT(1) %INIT( EXPEDITED)%ENIT UNAL,
  525
  526      /*K*    TPARMS.TR_FLAGS.CHKSUM - BIT(1)
  527
  528      */
  529                  %LVL3 %CHARTEXT( 'CHKSUM') BIT(1) %INIT( CHKSUM)%ENIT UNAL,
  530
  531          %LVL1 %CHARTEXT( '*') UBIN %HALF %INIT( 0)%ENIT CALIGNED,
  532
  533      /*K*    SFPTX - UBIN %HALF
  534
  535              SFPTX is reserved for library use.  If non-NULL, it contains the
  536              memory block index of a bonus generic Session FPT, used with the
  537              XSS@... macros.
  538      */
  539          %LVL1 %CHARTEXT( 'SFPTX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  540
  541      /*K*    ADDRESS - PTR
  542
  543              ADDRESS, if specified, contains a pointer to an XSC$ADDRESS structure
  544              containing this connection endpoint's full ISO address.
  545
  546              The structure element is named XSC$CCB.ADDR$.
  547              The default for ADDRESS is ADDR( NIL).
  548      */
  549          %LVL1 %CHARTEXT( 'ADDR$') PTR %INIT( ADDR( ADDRESS))%ENIT ALIGNED,
  550
  551      /*K*    EVNT - PROCEDURE
  552
  553              EVNT is used to set up shared responsibility between the Session
  554              layer and the application for handling asynchronous events.
  555
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      16   
  556              If EVNT is not specified, the Session layer assumes all event
  557              handling control.  This means that any non-Session event causes
  558              termination of the application.
  559
  560              If EVNT is NIL, then the address of the Session layer event handler
  561              is returned to the application in XSC$CCB.EVNT$, and the
  562              application *must* call this routine when any Session event occurs.
  563
  564              If EVNT is non-NIL, it specifies the address of the application's
  565              event handler, and the Session layer will call that routine when any
  566              non-Session event occurs.
  567
  568              The default for EVNT is unspecified.
  569
  570              The structure element is named XSC$CCB.EVNT$.  If this element is to
  571              be considered valid, the flag XSC$CCB.FLAGS.EVALID must also be set.
  572              See FLAGS.EVALID.
  573      */
  574          %LVL1 %CHARTEXT( 'EVNT$') EPTR %INIT( ENTADDR( %EPROC))%ENIT,
  575
  576      /*K*    SESS - PROCEDURE
  577
  578              SESS, if specified, identifies the application procedure to be
  579              called when an incoming Session message is received.  The procedure
  580              must be coded as a normal procedure (i.e., not PROC ASYNC), and to
  581              accept one parameter, an XSS$GENERIC FPT structure.
  582
  583              If SESS is not specified, any incoming Session message is given to
  584              the Presentation handler if it is present, otherwise the message is
  585              discarded.
  586
  587              The default for SESS is unspecified.
  588
  589              The structure element is named XSC$CCB.SESS$.  If this element is to
  590              be considered valid, the flag XSC$CCB.FLAGS.SVALID must also be set.
  591              See FLAGS.SVALID.
  592      */
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      17   
  593          %LVL1 %CHARTEXT( 'SESS$') EPTR %INIT( ENTADDR( %SPROC))%ENIT,
  594
  595      /*K*    PRES - PROCEDURE
  596
  597              PRES, if specified, identifies the application procedure to be
  598              called when an incoming Presentation message is received.  The
  599              procedure must be coded as a normal procedure (i.e., not PROC ASYNC),
  600              and to accept one parameter, an XSP$GENERIC FPT structure.
  601
  602              If PRES is not specified, any incoming Presentation message is given
  603              to the ACSE handler if it is present, otherwise the message is
  604              discarded.
  605
  606              The default for PRES is unspecified.
  607
  608              The structure element is named XSC$CCB.PRES$.  If this element is to
  609              be considered valid, the flag XSC$CCB.FLAGS.PVALID must also be set.
  610              See FLAGS.PVALID.
  611      */
  612          %LVL1 %CHARTEXT( 'PRES$') EPTR %INIT( ENTADDR( %PPROC))%ENIT,
  613
  614      /*K*    ACSE - PROCEDURE
  615
  616              ACSE, if specified, identifies the application procedure to be
  617              called when an incoming ACSE message is received.  The procedure
  618              must be coded as a normal procedure (i.e., not PROC ASYNC), and to
  619              accept one parameter, an XSC$GENERIC FPT structure.
  620
  621              If ACSE is not specified, any incoming ACSE message will be discarded.
  622
  623              The default for ACSE is unspecified.
  624
  625              The structure element is named XSC$CCB.ACSE$.  If this element is to
  626              be considered valid, the flag XSC$CCB.FLAGS.CVALID must also be set.
  627              See FLAGS.CVALID.
  628      */
  629          %LVL1 %CHARTEXT( 'ACSE$') EPTR %INIT( ENTADDR( %CPROC))%ENIT,
10:39 OCT 01 '97 XSC_COMMON_M.:XSA1SI                                      18   
  630
  631      /*K*    SASE - ARRAY
  632
  633              SASE, if specified, identifies one or more SASE procedures to be
  634              called by ACSE when it receives a non-ACSE message.  Each procedure
  635              named must be coded as a normal procedure (i.e., not PROC ASYNC),
  636              and to accept one parameter, an XSC$GENERIC FPT structure.
  637
  638              If no SASE entry is specified, any incoming SASE message will be
  639              treated as a protocol error by the ACSE layer.
  640
  641              The default for SASE is unspecified.
  642
  643              The structure element is named XSC$CCB.SASE$.  Items of SASE are
  644              specified by assigning a procedure name to one or more of SASE1,
  645              SASE2, and SASE3 on XSC$CCB macro invocation.  If any item of the
  646              SASE array is nonzero, ACSE will treat it as an ENTADDR and will
  647              call the procedure indicated on receipt of a non-ACSE message.
  648      */
  649          %LVL1 %CHARTEXT( 'SASE$(0:2)') EPTR %INIT(
  650                  ENTADDR( SASE1), ENTADDR( SASE2), ENTADDR( SASE3))%ENIT LAST
  651
  652      %MEND;

