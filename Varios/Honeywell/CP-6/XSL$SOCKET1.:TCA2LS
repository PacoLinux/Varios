VERSION A02

PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:1    
        1        1        /*M*    XSL$SOCKET1             BSD4.3 Socket Library for CP-6, part 1  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,DCI=8,DTI=0,ENI=4,ECI=4,CSI=4,DIN=4,SDI=0 */
        8        8        /*F*    NAME:   Programmer's Reference
        9        9            ..::L1 "Host Socket Library\\A"
       10       10            ..VA$M_FOOTER "\Host Socket Library"
       11       11            The CP-6 Socket Library provides a collection of C-callable
       12       12            functions and PL6-callable procedures to permit CP-6
       13       13            applications to communicate with other applications over a LAN.
       14       14            ..::IX "socket library"
       15       15
       16       16            A socket is an endpoint for communication.  On CP-6 systems, a socket
       17       17            consists of a DCB and some context.  The Host Socket Library provides
       18       18            facilities to create and name sockets, to initiate outgoing
       19       19            connections and await incoming connections, to send and receive
       20       20            data, to check for the presence of incoming data or exceptional
       21       21            conditions, and to terminate connections.
       22       22            ..::IX "socket, definition of"
       23       23
       24       24            Other facilities of
       25       25            the library include getting and setting socket options, obtaining
       26       26            information about the sockets at each end of a connection,
       27       27            converting data between network and CP-6 formats, converting
       28       28            addresses between network and character string formats, and
       29       29            obtaining information from configuration files that reside in the
       30       30            :SYS account.
       31       31            ..::L1 "Host Socket Library Services\SUMMARY\1"
       32       32            The services available in the library are listed in the following
       33       33            table.
       34       34            .FIF
       35       35
       36       36            CATEGORY                    SERVICE
       37       37            .SPF
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:2    
       38       38            Create and Name Sockets     socket() and XSL$SOCKET
       39       39            }                           bind() and XSL$BIND
       40       40            }
       41       41            Initiating Connections      listen() and XSL$LISTEN
       42       42            }                           accept() and XSL$ACCEPT
       43       43            }                           accept_srvr() and XSL$ACCEPT_SRVR
       44       44            }                           connect() and XSL$CONNECT
       45       45            }
       46       46            Transferring Data           send() and XSL$SEND
       47       47            }                           recv() and XSL$RECV
       48       48            }                           sendto() and XSL$SENDTO
       49       49            }                           recvfrom() and XSL$RECVFROM
       50       50            }                           sendmsg() and XSL$SENDMSG
       51       51            }                           recvmsg() and XSL$RECVMSG
       52       52            }                           write() and XSL$WRITE
       53       53            }                           read() and XSL$READ
       54       54            }                           writev() and XSL$WRITEV
       55       55            }                           readv() and XSL$READV
       56       56            }
       57       57            I/O Multiplexing            select() and XSL$SELECT
       58       58            }
       59       59            Terminating Connections     shutdown() and XSL$SHUTDOWN
       60       60            }                           close() and XSL$CLOSE
       61       61            }
       62       62            Host, Socket, User Info     gethostname() and XSL$GETHOSTNAME
       63       63            }                           getpeername() and XSL$GETPEERNAME
       64       64            }                           getsockname() and XSL$GETSOCKNAME
       65       65            }                           getsockopt() and XSL$GETSOCKOPT
       66       66            }                           setsockopt() and XSL$SETSOCKOPT
       67       67            }                           fcntl() and XSL$FCNTL
       68       68            }                           ioctl() and XSL$IOCTL
       69       69            }                           XSL$SOCKINIT
       70       70                                            XSL$CHAM
       71       71            }
       72       72            Data Conversion             htonl() and XSL$HTONL
       73       73            }                           htons() and XSL$HTONS
       74       74            }                           ntohl() and XSL$NTOHL
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:3    
       75       75            }                           ntohs() and XSL$NTOHS
       76       76            }
       77       77            Data Manipulation           bcmp()
       78       78            }                           bcopy()
       79       79            }                           bzero()
       80       80            }
       81       81            Internet Address Usage      inet_addr() and XSL$INET_ADDR
       82       82            }                           inet_lnaof() and XSL$INET_LNAOF
       83       83            }                           inet_makeaddr() and XSL$INET_MAKEADDR
       84       84            }                           inet_netof() and XSL$INET_NETOF
       85       85            }                           inet_network() and XSL$INET_NETWORK
       86       86            }                           inet_ntoa() and XSL$INET_NTOA
       87       87            }
       88       88            "hosts" File Usage          gethostbyaddr() and XSL$GETHOSTBYADDR
       89       89            }                           gethostbyname() and XSL$GETHOSTBYNAME
       90       90            }                           gethostent() and XSL$GETHOSTENT
       91       91            }                           sethostent() and XSL$SETHOSTENT
       92       92            }                           endhostent() and XSL$ENDHOSTENT
       93       93            }
       94       94            "networks" File Usage       getnetbyaddr() and XSL$GETNETBYADDR
       95       95            }                           getnetbyname() and XSL$GETNETBYNAME
       96       96            }                           getnetent() and XSL$GETNETENT
       97       97            }                           setnetent() and XSL$SETNETENT
       98       98            }                           endnetent() and XSL$ENDNETENT
       99       99            }
      100      100            "protocols" File Usage      getprotobyname() and XSL$GETPROTOBYNAME
      101      101            }                           getprotobynumber() and XSL$GETPROTOBYNUMBER
      102      102            }                           getprotoent() and XSL$GETPROTOENT
      103      103            }                           setprotoent() and XSL$SETPROTOENT
      104      104            }                           endprotoent() and XSL$ENDPROTOENT
      105      105            }
      106      106            "services" File Usage       getservbyname() and XSL$GETSERVBYNAME
      107      107            }                           getservbyport() and XSL$GETSERVBYPORT
      108      108            }                           getservent() and XSL$GETSERVENT
      109      109            }                           setservent() and XSL$SETSERVENT
      110      110            }                           endservent() and XSL$ENDSERVENT
      111      111            }
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:4    
      112      112            .FIN
      113      113        */
      114      114        /*F*    NAME:   Linking Information
      115      115            The CP-6 Socket Library exists as an unshared LEMUR library in
      116      116            the file :ETC_SOCKET.:SYS.  The library contains both C and
      117      117            PL6 interfaces.  Routines from the library are included in an
      118      118            application by linking the application with the option
      119      119            UNSAT=:ETC_SOCKET.:SYS.
      120      120        */
      121      121        /*F*    NAME:   DCB Usage
      122      122            The CP-6 Socket Library dynamically allocates and releases socket
      123      123            DCBs as needed, without application intervention.  The DCBs used
      124      124            by the library are named F$XSLnn, where nn is an internal table
      125      125            index.  One DCB is required for each socket in use or awaiting
      126      126            an incoming connection.
      127      127
      128      128            There is also one permanent DCB used for accessing the file
      129      129            etc:routes.:SYS and, if necessary, four permanent DCBs for
      130      130            accessing the files etc:hosts, etc:networks, etc:protocols, and
      131      131            etc:services, all in .:SYS.
      132      132
      133      133            Application DCBs are neither used nor modified.
      134      134        */
      135      135        /*F*    NAME:   Include Files
      136      136            All of the include files necessary to make use of the Host Socket
      137      137            Library are located in the :LIBRARY account.  The include files
      138      138            are listed below.
      139      139            .SPB
      140      140            XSL_PERR_C
      141      141            .SPB
      142      142            .INL +8
      143      143            PL6 include file containing EQUs for error conditions.
      144      144            .INL -8
      145      145            .SPB
      146      146            XSL_SOCKET_E
      147      147            .SPB
      148      148            .INL +8
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:5    
      149      149            PL6 include file containing EQUs for general usage of the socket
      150      150            library.  PL6 equivalents of the various C defines in the xsl_?
      151      151            include files are found here.
      152      152            .INL -8
      153      153            .SPB
      154      154            XSL_SOCKET_M
      155      155            .SPB
      156      156            .INL +8
      157      157            PL6 include file containing MACROs for general usage of the socket
      158      158            library.  PL6 equivalents of the various C structures in the xsl_?
      159      159            include files are found here.
      160      160            .INL -8
      161      161            .SPB
      162      162        .BBK
      163      163            xsl_errno:h
      164      164            .SPB
      165      165            .INL +8
      166      166            C include file containing defines for error conditions.
      167      167            .INL -8
      168      168        .BEK
      169      169            .SPB
      170      170            xsl_in:h
      171      171            .SPB
      172      172            .INL +8
      173      173            C include file containing defines for Internet addressing.
      174      174            .INL -8
      175      175            .SPB
      176      176            xsl_netdb:h
      177      177            .SPB
      178      178            .INL +8
      179      179            C include file containing defines for the hosts, networks,
      180      180            protocols, and services file manipulation functions.
      181      181            .INL -8
      182      182            .SPB
      183      183            xsl_select:h
      184      184            .SPB
      185      185            .INL +8
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:6    
      186      186            C include file containing defines for the select() function.
      187      187            .INL -8
      188      188            .SPB
      189      189            xsl_socket:h
      190      190            .SPB
      191      191            .INL +8
      192      192            C include file containing defines for general usage of the socket library.
      193      193            .INL -8
      194      194        */
      195      195        /*F* NAME:  Internet Address Representation
      196      196            The term "Internet address" is used throughout the discussion of
      197      197            Host Socket Library services.  On 32-bit systems, an Internet
      198      198            address consists of four consecutive bytes of 8 bits each.  On
      199      199            CP-6 systems, an Internet address consists of four consecutive
      200      200            bytes ignoring the high-order bit of each byte.  An Internet
      201      201            address is commonly represented in text as a "character string in
      202      202            dot notation", i.e., each of four bytes as a decimal number,
      203      203            separated by dots.  For example, 128.35.0.0 and 192.9.200.2 are
      204      204            Internet addresses.
      205      205
      206      206            An Internet address consists of two parts, sometimes called
      207      207            "netid" and "hostid".  The netid identifies the network; the
      208      208            hostid identifies the host on that network.  The netid field can
      209      209            be 1, 2, or 3 bytes long in a Class A, B, or C address,
      210      210            respectively, leaving 3, 2 or 1 bytes for the hostid.  The lengths
      211      211            of the netid and the hostid are determined by inspecting the
      212      212            high-order bits of the Internet address.
      213      213
      214      214            The CP-6 Internet addresses shown below illustrate the settings of
      215      215            the high-order bits for addresses with a 1, 2, or 3 byte netid.
      216      216            For each bit position shown, the letter n denotes a netid bit, the
      217      217            letter h denotes a hostid bit, and the character ? denotes an unused
      218      218            (don't care) bit.
      219      219            .fif
      220      220
      221      221            .brn 7
      222      222            Class A address:
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:7    
      223      223            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      224      224            |? 0 n n n n n n n ? h h h h h h h h ? h h h h h h h h ? h h h h h h h h|
      225      225            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      226      226            .fin
      227      227            .spf
      228      228            Internet addresses 0.0.0.0 through 127.255.255.255
      229      229            allow 126 networks with up to 16777214 hosts each.
      230      230
      231      231
      232      232            .fif
      233      233            .brn 7
      234      234            Class B address:
      235      235            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      236      236            |? 1 0 n n n n n n ? n n n n n n n n ? h h h h h h h h ? h h h h h h h h|
      237      237            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      238      238            .fin
      239      239            .spf
      240      240            Internet addresses 128.0.0.0 through 191.255.255.255
      241      241            allow 16382 networks with up to 65534 hosts each.
      242      242
      243      243
      244      244            .fif
      245      245            .brn 7
      246      246            Class C address:
      247      247            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      248      248            |? 1 1 0 n n n n n ? n n n n n n n n ? n n n n n n n n ? h h h h h h h h|
      249      249            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      250      250            .fin
      251      251            .spf
      252      252            Internet addresses 192.0.0.0 through 223.255.255.255
      253      253            allow 2097150 networks with up to 254 hosts each.
      254      254
      255      255
      256      256            In practice, Class A and Class B networks are commonly divided up
      257      257            into subnets, using a "subnet mask" which is ANDed with the
      258      258            Internet address to specify which bits define the netid.
      259      259
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:8    
      260      260            Note:  A netid or hostid value of all binary zeros or all binary
      261      261            ones is not permitted.  (All binary zeros is reserved to mean the
      262      262            local network or the local host; all binary ones is reserved to
      263      263            mean broadcast to all networks or broadcast to all hosts.)
      264      264        */
      265      265
      266      266        /*F* NAME: socket() and XSL$SOCKET  --  Create Socket
      267      267        ..::IT "Purpose:"
      268      268        .INL +4
      269      269        Creates a new socket, to allow communication with another socket
      270      270        elsewhere in a network.
      271      271        ..::IT "C Usage:"
      272      272        .INL 4
      273      273        .FIF
      274      274        s = socket( af, type, protocol );
      275      275        ..::IT "PL6 Usage:"
      276      276        .INL 4
      277      277        .FIF
      278      278        CALL XSL$SOCKET( s, af, type, protocol );
      279      279        ..::IT "Parameters:"
      280      280        .INL 4
      281      281        .FIF
      282      282        af          integer address format
      283      283
      284      284        type        integer socket type
      285      285
      286      286        protocol    integer protocol number
      287      287        ..::IT "Result:"
      288      288        .INL 4
      289      289        .FIF
      290      290        s           integer socket descriptor or error code
      291      291        ..::IT "Description:"
      292      292        The socket() function creates an endpoint for communication, and returns
      293      293        a descriptor used by other socket library functions for this communication.
      294      294        .SPB
      295      295        The af parameter specifies the address format to use when processing
      296      296        network addresses in later operations on this socket.  Equates for the
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:9    
      297      297        possible values can be found in <xsl_socket.h> or XSL_SOCKET_E.  Only the
      298      298        "Internet" address format is currently supported; it is selected
      299      299        by coding AF_INET or %XSL_AF_INET in C or PL6 source, respectively.
      300      300        The complete list of possible address formats is shown below.
      301      301        .trf ]%
      302      302        ..::TB "^\C #define\#8\PL6 ]EQU\#10\Meaning\#"
      303      303        .trf ]]
      304      304        .xeq XSL_SOCKET_E AF_E XSL_AF_APPLETALK
      305      305        .xeq XSL_SOCKET_E AF_E XSL_AF_CCITT
      306      306        .xeq XSL_SOCKET_E AF_E XSL_AF_CHAOS
      307      307        .xeq XSL_SOCKET_E AF_E XSL_AF_DATAKIT
      308      308        .xeq XSL_SOCKET_E AF_E XSL_AF_DECNET
      309      309        .xeq XSL_SOCKET_E AF_E XSL_AF_DLI
      310      310        .xeq XSL_SOCKET_E AF_E XSL_AF_ECMA
      311      311        .xeq XSL_SOCKET_E AF_E XSL_AF_HYLINK
      312      312        .xeq XSL_SOCKET_E AF_E XSL_AF_IMPLINK
      313      313        .xeq XSL_SOCKET_E AF_E XSL_AF_INET
      314      314        .xeq XSL_SOCKET_E AF_E XSL_AF_LAT
      315      315        .xeq XSL_SOCKET_E AF_E XSL_AF_NBS
      316      316        .xeq XSL_SOCKET_E AF_E XSL_AF_NS
      317      317        .xeq XSL_SOCKET_E AF_E XSL_AF_PUP
      318      318        .xeq XSL_SOCKET_E AF_E XSL_AF_SNA
      319      319        .xeq XSL_SOCKET_E AF_E XSL_AF_UNIX
      320      320        ..::TB
      321      321        .SPB
      322      322        The type parameter specifies how communication is to be performed for
      323      323        this socket.  Equates for the possible values can be found in <xsl_socket.h>
      324      324        or XSL_SOCKET_E.  Only "stream", "datagram", and "raw" socket types are
      325      325        currently supported.  Stream type is selected by coding SOCK_STREAM or
      326      326        %XSL_SOCK_STREAM in C or PL6 source, respectively.  Datagram type is
      327      327        selected by coding SOCK_DGRAM or %XSL_SOCK_DGRAM in C or PL6 source,
      328      328        respectively.  Raw type is selected by coding SOCK_RAW or %XSL_SOCK_RAW
      329      329        in C or PL6 source, respectively.
      330      330        The complete list of possible types is shown in the table below.
      331      331        .trf ]%
      332      332        ..::TB "^\C #define\#8\PL6 ]EQU\#15\Meaning\#"
      333      333        .trf ]]
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:10   
      334      334        .xeq XSL_SOCKET_E SOCK_E SOCK_DGRAM
      335      335        .xeq XSL_SOCKET_E SOCK_E SOCK_RAW
      336      336        .xeq XSL_SOCKET_E SOCK_E SOCK_RDM
      337      337        .xeq XSL_SOCKET_E SOCK_E SOCK_SEQPACKET
      338      338        .xeq XSL_SOCKET_E SOCK_E SOCK_STREAM
      339      339        ..::TB
      340      340        .SPB
      341      341        The protocol parameter specifies which protocol family to use for
      342      342        communication on this socket.  There are potentially many protocol
      343      343        families available for each address format selected.  Equates for the
      344      344        possible values can be found in <xsl_socket.h> or XSL_SOCKET_E.  Only
      345      345        "Internet" protocol is currently supported; it is selected by coding
      346      346        PF_INET or %XSL_PF_INET in C or PL6 source, respectively.  The value 0 is
      347      347        also permitted; it specifies use of the default protocol for the selected
      348      348        address format.
      349      349        The complete list of possible protocol families is shown below.
      350      350        .trf ]%
      351      351        ..::TB "^\C #define\#8\PL6 ]EQU\#10\Meaning\#"
      352      352        .trf ]]
      353      353        .xeq XSL_SOCKET_E PF_E XSL_PF_APPLETALK
      354      354        .xeq XSL_SOCKET_E PF_E XSL_PF_CCITT
      355      355        .xeq XSL_SOCKET_E PF_E XSL_PF_CHAOS
      356      356        .xeq XSL_SOCKET_E PF_E XSL_PF_DATAKIT
      357      357        .xeq XSL_SOCKET_E PF_E XSL_PF_DECNET
      358      358        .xeq XSL_SOCKET_E PF_E XSL_PF_DLI
      359      359        .xeq XSL_SOCKET_E PF_E XSL_PF_ECMA
      360      360        .xeq XSL_SOCKET_E PF_E XSL_PF_HYLINK
      361      361        .xeq XSL_SOCKET_E PF_E XSL_PF_IMPLINK
      362      362        .xeq XSL_SOCKET_E PF_E XSL_PF_INET
      363      363        .xeq XSL_SOCKET_E PF_E XSL_PF_LAT
      364      364        .xeq XSL_SOCKET_E PF_E XSL_PF_NBS
      365      365        .xeq XSL_SOCKET_E PF_E XSL_PF_NS
      366      366        .xeq XSL_SOCKET_E PF_E XSL_PF_PUP
      367      367        .xeq XSL_SOCKET_E PF_E XSL_PF_SNA
      368      368        .xeq XSL_SOCKET_E PF_E XSL_PF_UNIX
      369      369        ..::TB
      370      370        .SPB
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:11   
      371      371        If the socket() function is successful, the s result contains the
      372      372        descriptor for a new socket with the selected attributes.  The descriptor
      373      373        is a small non-negative integer, equivalent to the DCBNUM of the DCB
      374      374        allocated for this socket.
      375      375        .SPB
      376      376        If the socket() function is unsuccessful, the s result contains
      377      377        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      378      378        to determine the specific error condition.  The XSL$SOCKET procedure
      379      379        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      380      380        to the socket() function.
      381      381        ..::IT "Errors:"
      382      382        Following are the possible error conditions reported when the socket()
      383      383        function is unsuccessful.  Equates for the possible values can be found in
      384      384        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      385      385
      386      386        .FIF
      387      387
      388      388        C #define               PL6 %EQU
      389      389        ----------------------- -----------------------
      390      390        EAFNOSUPPORT            E$AFNOSUPPORT
      391      391        .FIN
      392      392        The selected address format is not currently supported.
      393      393        .FIF
      394      394
      395      395        EMFILE                  E$MFILE
      396      396        .FIN
      397      397        M$GETDCB failed.  Unable to allocate DCB for this socket.
      398      398        .FIF
      399      399
      400      400        ENOBUFFS                E$NOBUFFS
      401      401        No buffer space is available.
      402      402        .FIN
      403      403        .FIF
      404      404
      405      405        EPROTONOSUPPORT         E$PROTONOSUPPORT
      406      406        .FIN
      407      407        The selected protocol family is not currently supported.
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:12   
      408      408        .FIF
      409      409
      410      410        ESOCKTNOSUPPORT         E$SOCKTNOSUPPORT
      411      411        .FIN
      412      412        The selected socket type is not currently supported.
      413      413        .FIF
      414      414        */
      415      415        XSL$SOCKET: PROC( RESULT, AF, TYPE, PROTOCOL) ALTRET;
      416      416        %INCLUDE XSL_SOCKET_E;
      417      674        %INCLUDE XSL_SOCKET_M;
      418     1435        %INCLUDE XSL_PERR_C;
      419     1490        %INCLUDE XSL_INTERNAL_M;
      420     1741            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      421     1885
      422     1886    1       DCL XSL$GETSOCK ENTRY(2) ALTRET;
      423     1887    1       DCL XSL$RELSOCK ENTRY(1) ALTRET;
      424     1888    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      425     1889    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      426     1890    1       DCL XSL$SOCKOPEN ENTRY(3) ALTRET;
      427     1891
      428     1892    1       DCL XSL_ERRNO SBIN SYMREF;
      429     1893    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      430     1894    1       DCL XSL_SN CHAR(6) SYMREF;
      431     1895
      432     1896    1       DCL AF SBIN;
      433     1897    1       DCL PROTOCOL SBIN;
      434     1898    1       DCL QUICK BIT(1) UNAL;
      435     1899    1       DCL RESULT SBIN;
      436     1900    1       DCL SOCK# SBIN;
      437     1901    1       DCL SOCK$ PTR;
      438     1902    1       DCL TYPE SBIN;
      439     1903
      440     1904    1       QUICK = '0'B;
      441     1905    1       GOTO COMMON;
      442     1906
      443     1907    1   XSL$QSOCKET: ENTRY( RESULT, AF, TYPE, PROTOCOL) ALTRET;
      444     1908
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:13   
      445     1909    1       QUICK = '1'B;
      446     1910    1   COMMON:
      447     1911    2       IF AF ~= %XSL_AF_INET THEN DO;
      448     1912    2           XSL_ERRNO = %E$AFNOSUPPORT;
      449     1913    2   BAILOUT:
      450     1914    2           RESULT = %E$FAILURE;
      451     1915    2           IF XSL_ERRNO = %E$FAILURE THEN
      452     1916    2               CALL XSL$RELSOCK( SOCK#);
      453     1917    2           ALTRETURN;
      454     1918    2           END;
      455     1919    2       IF TYPE < %XSL_SOCK_STREAM OR TYPE > %XSL_SOCK_RAW THEN DO;
      456     1920    2           XSL_ERRNO = %E$SOCKTNOSUPPORT; GOTO BAILOUT; END;
      457     1921    2       IF PROTOCOL ~= %XSL_PF_UNSPEC AND PROTOCOL ~= AF THEN DO;
      458     1922    2           XSL_ERRNO = %E$PROTONOSUPPORT; GOTO BAILOUT; END;
      459     1923    1       CALL XSL$GETSOCK( SOCK#, XSL_SOCK$) ALTRET (BAILOUT);
      460     1924    1       SOCK$ = XSL_SOCK$;
      461     1925    1       SOCK.AF = AF;
      462     1926    1       SOCK.TYPE = TYPE;
      463     1927    1       SOCK.PROTOCOL = PROTOCOL;
      464     1928    1       SOCK.FLAGS.BLOCKING = '1'B;
      465     1929    1       IF XSL_SN = '      ' THEN
      466     1930                /* site doesn't have default RNAME, so we can socket() now */
      467     1931    1           CALL XSL$SOCKOPEN( SOCK) ALTRET( BAILOUT);
      468     1932    1       IF TYPE ~= %XSL_SOCK_STREAM THEN
      469     1933    1           SOCK.FLAGS.SELWRITE = '1'B;
      470     1934    1       IF QUICK THEN
      471     1935    1           RESULT = SOCK#;
      472     1936    1       ELSE
      473     1937    1           RESULT = SOCK.DCB#;
      474     1938    1       RETURN;
      475     1939
      476     1940    1   END XSL$SOCKET;
      477     1941        %EOD;

PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:14   
--  Include file information  --

   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$SOCKET.

   Procedure XSL$SOCKET requires 96 words for executable code.
   Procedure XSL$SOCKET requires 12 words of local(AUTO) storage.

PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:15   

 Object Unit name= XSL$SOCKET                                 File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:29:57.28 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      2      2  XSL$SOCKET
    1   Proc  even  none    96    140  XSL$SOCKET
    2  RoData even  none     1      1  XSL$SOCKET

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  XSL$SOCKET
     1      4          yes     yes      Std        4  XSL$QSOCKET

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 XSL$RELSOCK
 yes     yes           Std       2 XSL$GETSOCK
 yes     yes           Std       3 XSL$SOCKOPEN
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:16   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_ERRNO                             XSL_SN                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:17   


        1        1        /*M*    XSL$SOCKET1             BSD4.3 Socket Library for CP-6, part 1  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,DCI=8,DTI=0,ENI=4,ECI=4,CSI=4,DIN=4,SDI=0 */
        8        8        /*F*    NAME:   Programmer's Reference
        9        9            ..::L1 "Host Socket Library\\A"
       10       10            ..VA$M_FOOTER "\Host Socket Library"
       11       11            The CP-6 Socket Library provides a collection of C-callable
       12       12            functions and PL6-callable procedures to permit CP-6
       13       13            applications to communicate with other applications over a LAN.
       14       14            ..::IX "socket library"
       15       15
       16       16            A socket is an endpoint for communication.  On CP-6 systems, a socket
       17       17            consists of a DCB and some context.  The Host Socket Library provides
       18       18            facilities to create and name sockets, to initiate outgoing
       19       19            connections and await incoming connections, to send and receive
       20       20            data, to check for the presence of incoming data or exceptional
       21       21            conditions, and to terminate connections.
       22       22            ..::IX "socket, definition of"
       23       23
       24       24            Other facilities of
       25       25            the library include getting and setting socket options, obtaining
       26       26            information about the sockets at each end of a connection,
       27       27            converting data between network and CP-6 formats, converting
       28       28            addresses between network and character string formats, and
       29       29            obtaining information from configuration files that reside in the
       30       30            :SYS account.
       31       31            ..::L1 "Host Socket Library Services\SUMMARY\1"
       32       32            The services available in the library are listed in the following
       33       33            table.
       34       34            .FIF
       35       35
       36       36            CATEGORY                    SERVICE
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:18   
       37       37            .SPF
       38       38            Create and Name Sockets     socket() and XSL$SOCKET
       39       39            }                           bind() and XSL$BIND
       40       40            }
       41       41            Initiating Connections      listen() and XSL$LISTEN
       42       42            }                           accept() and XSL$ACCEPT
       43       43            }                           accept_srvr() and XSL$ACCEPT_SRVR
       44       44            }                           connect() and XSL$CONNECT
       45       45            }
       46       46            Transferring Data           send() and XSL$SEND
       47       47            }                           recv() and XSL$RECV
       48       48            }                           sendto() and XSL$SENDTO
       49       49            }                           recvfrom() and XSL$RECVFROM
       50       50            }                           sendmsg() and XSL$SENDMSG
       51       51            }                           recvmsg() and XSL$RECVMSG
       52       52            }                           write() and XSL$WRITE
       53       53            }                           read() and XSL$READ
       54       54            }                           writev() and XSL$WRITEV
       55       55            }                           readv() and XSL$READV
       56       56            }
       57       57            I/O Multiplexing            select() and XSL$SELECT
       58       58            }
       59       59            Terminating Connections     shutdown() and XSL$SHUTDOWN
       60       60            }                           close() and XSL$CLOSE
       61       61            }
       62       62            Host, Socket, User Info     gethostname() and XSL$GETHOSTNAME
       63       63            }                           getpeername() and XSL$GETPEERNAME
       64       64            }                           getsockname() and XSL$GETSOCKNAME
       65       65            }                           getsockopt() and XSL$GETSOCKOPT
       66       66            }                           setsockopt() and XSL$SETSOCKOPT
       67       67            }                           fcntl() and XSL$FCNTL
       68       68            }                           ioctl() and XSL$IOCTL
       69       69            }                           XSL$SOCKINIT
       70       70                                            XSL$CHAM
       71       71            }
       72       72            Data Conversion             htonl() and XSL$HTONL
       73       73            }                           htons() and XSL$HTONS
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:19   
       74       74            }                           ntohl() and XSL$NTOHL
       75       75            }                           ntohs() and XSL$NTOHS
       76       76            }
       77       77            Data Manipulation           bcmp()
       78       78            }                           bcopy()
       79       79            }                           bzero()
       80       80            }
       81       81            Internet Address Usage      inet_addr() and XSL$INET_ADDR
       82       82            }                           inet_lnaof() and XSL$INET_LNAOF
       83       83            }                           inet_makeaddr() and XSL$INET_MAKEADDR
       84       84            }                           inet_netof() and XSL$INET_NETOF
       85       85            }                           inet_network() and XSL$INET_NETWORK
       86       86            }                           inet_ntoa() and XSL$INET_NTOA
       87       87            }
       88       88            "hosts" File Usage          gethostbyaddr() and XSL$GETHOSTBYADDR
       89       89            }                           gethostbyname() and XSL$GETHOSTBYNAME
       90       90            }                           gethostent() and XSL$GETHOSTENT
       91       91            }                           sethostent() and XSL$SETHOSTENT
       92       92            }                           endhostent() and XSL$ENDHOSTENT
       93       93            }
       94       94            "networks" File Usage       getnetbyaddr() and XSL$GETNETBYADDR
       95       95            }                           getnetbyname() and XSL$GETNETBYNAME
       96       96            }                           getnetent() and XSL$GETNETENT
       97       97            }                           setnetent() and XSL$SETNETENT
       98       98            }                           endnetent() and XSL$ENDNETENT
       99       99            }
      100      100            "protocols" File Usage      getprotobyname() and XSL$GETPROTOBYNAME
      101      101            }                           getprotobynumber() and XSL$GETPROTOBYNUMBER
      102      102            }                           getprotoent() and XSL$GETPROTOENT
      103      103            }                           setprotoent() and XSL$SETPROTOENT
      104      104            }                           endprotoent() and XSL$ENDPROTOENT
      105      105            }
      106      106            "services" File Usage       getservbyname() and XSL$GETSERVBYNAME
      107      107            }                           getservbyport() and XSL$GETSERVBYPORT
      108      108            }                           getservent() and XSL$GETSERVENT
      109      109            }                           setservent() and XSL$SETSERVENT
      110      110            }                           endservent() and XSL$ENDSERVENT
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:20   
      111      111            }
      112      112            .FIN
      113      113        */
      114      114        /*F*    NAME:   Linking Information
      115      115            The CP-6 Socket Library exists as an unshared LEMUR library in
      116      116            the file :ETC_SOCKET.:SYS.  The library contains both C and
      117      117            PL6 interfaces.  Routines from the library are included in an
      118      118            application by linking the application with the option
      119      119            UNSAT=:ETC_SOCKET.:SYS.
      120      120        */
      121      121        /*F*    NAME:   DCB Usage
      122      122            The CP-6 Socket Library dynamically allocates and releases socket
      123      123            DCBs as needed, without application intervention.  The DCBs used
      124      124            by the library are named F$XSLnn, where nn is an internal table
      125      125            index.  One DCB is required for each socket in use or awaiting
      126      126            an incoming connection.
      127      127
      128      128            There is also one permanent DCB used for accessing the file
      129      129            etc:routes.:SYS and, if necessary, four permanent DCBs for
      130      130            accessing the files etc:hosts, etc:networks, etc:protocols, and
      131      131            etc:services, all in .:SYS.
      132      132
      133      133            Application DCBs are neither used nor modified.
      134      134        */
      135      135        /*F*    NAME:   Include Files
      136      136            All of the include files necessary to make use of the Host Socket
      137      137            Library are located in the :LIBRARY account.  The include files
      138      138            are listed below.
      139      139            .SPB
      140      140            XSL_PERR_C
      141      141            .SPB
      142      142            .INL +8
      143      143            PL6 include file containing EQUs for error conditions.
      144      144            .INL -8
      145      145            .SPB
      146      146            XSL_SOCKET_E
      147      147            .SPB
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:21   
      148      148            .INL +8
      149      149            PL6 include file containing EQUs for general usage of the socket
      150      150            library.  PL6 equivalents of the various C defines in the xsl_?
      151      151            include files are found here.
      152      152            .INL -8
      153      153            .SPB
      154      154            XSL_SOCKET_M
      155      155            .SPB
      156      156            .INL +8
      157      157            PL6 include file containing MACROs for general usage of the socket
      158      158            library.  PL6 equivalents of the various C structures in the xsl_?
      159      159            include files are found here.
      160      160            .INL -8
      161      161            .SPB
      162      162        .BBK
      163      163            xsl_errno:h
      164      164            .SPB
      165      165            .INL +8
      166      166            C include file containing defines for error conditions.
      167      167            .INL -8
      168      168        .BEK
      169      169            .SPB
      170      170            xsl_in:h
      171      171            .SPB
      172      172            .INL +8
      173      173            C include file containing defines for Internet addressing.
      174      174            .INL -8
      175      175            .SPB
      176      176            xsl_netdb:h
      177      177            .SPB
      178      178            .INL +8
      179      179            C include file containing defines for the hosts, networks,
      180      180            protocols, and services file manipulation functions.
      181      181            .INL -8
      182      182            .SPB
      183      183            xsl_select:h
      184      184            .SPB
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:22   
      185      185            .INL +8
      186      186            C include file containing defines for the select() function.
      187      187            .INL -8
      188      188            .SPB
      189      189            xsl_socket:h
      190      190            .SPB
      191      191            .INL +8
      192      192            C include file containing defines for general usage of the socket library.
      193      193            .INL -8
      194      194        */
      195      195        /*F* NAME:  Internet Address Representation
      196      196            The term "Internet address" is used throughout the discussion of
      197      197            Host Socket Library services.  On 32-bit systems, an Internet
      198      198            address consists of four consecutive bytes of 8 bits each.  On
      199      199            CP-6 systems, an Internet address consists of four consecutive
      200      200            bytes ignoring the high-order bit of each byte.  An Internet
      201      201            address is commonly represented in text as a "character string in
      202      202            dot notation", i.e., each of four bytes as a decimal number,
      203      203            separated by dots.  For example, 128.35.0.0 and 192.9.200.2 are
      204      204            Internet addresses.
      205      205
      206      206            An Internet address consists of two parts, sometimes called
      207      207            "netid" and "hostid".  The netid identifies the network; the
      208      208            hostid identifies the host on that network.  The netid field can
      209      209            be 1, 2, or 3 bytes long in a Class A, B, or C address,
      210      210            respectively, leaving 3, 2 or 1 bytes for the hostid.  The lengths
      211      211            of the netid and the hostid are determined by inspecting the
      212      212            high-order bits of the Internet address.
      213      213
      214      214            The CP-6 Internet addresses shown below illustrate the settings of
      215      215            the high-order bits for addresses with a 1, 2, or 3 byte netid.
      216      216            For each bit position shown, the letter n denotes a netid bit, the
      217      217            letter h denotes a hostid bit, and the character ? denotes an unused
      218      218            (don't care) bit.
      219      219            .fif
      220      220
      221      221            .brn 7
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:23   
      222      222            Class A address:
      223      223            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      224      224            |? 0 n n n n n n n ? h h h h h h h h ? h h h h h h h h ? h h h h h h h h|
      225      225            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      226      226            .fin
      227      227            .spf
      228      228            Internet addresses 0.0.0.0 through 127.255.255.255
      229      229            allow 126 networks with up to 16777214 hosts each.
      230      230
      231      231
      232      232            .fif
      233      233            .brn 7
      234      234            Class B address:
      235      235            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      236      236            |? 1 0 n n n n n n ? n n n n n n n n ? h h h h h h h h ? h h h h h h h h|
      237      237            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      238      238            .fin
      239      239            .spf
      240      240            Internet addresses 128.0.0.0 through 191.255.255.255
      241      241            allow 16382 networks with up to 65534 hosts each.
      242      242
      243      243
      244      244            .fif
      245      245            .brn 7
      246      246            Class C address:
      247      247            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      248      248            |? 1 1 0 n n n n n ? n n n n n n n n ? n n n n n n n n ? h h h h h h h h|
      249      249            #-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+-#
      250      250            .fin
      251      251            .spf
      252      252            Internet addresses 192.0.0.0 through 223.255.255.255
      253      253            allow 2097150 networks with up to 254 hosts each.
      254      254
      255      255
      256      256            In practice, Class A and Class B networks are commonly divided up
      257      257            into subnets, using a "subnet mask" which is ANDed with the
      258      258            Internet address to specify which bits define the netid.
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:24   
      259      259
      260      260            Note:  A netid or hostid value of all binary zeros or all binary
      261      261            ones is not permitted.  (All binary zeros is reserved to mean the
      262      262            local network or the local host; all binary ones is reserved to
      263      263            mean broadcast to all networks or broadcast to all hosts.)
      264      264        */
      265      265
      266      266        /*F* NAME: socket() and XSL$SOCKET  --  Create Socket
      267      267        ..::IT "Purpose:"
      268      268        .INL +4
      269      269        Creates a new socket, to allow communication with another socket
      270      270        elsewhere in a network.
      271      271        ..::IT "C Usage:"
      272      272        .INL 4
      273      273        .FIF
      274      274        s = socket( af, type, protocol );
      275      275        ..::IT "PL6 Usage:"
      276      276        .INL 4
      277      277        .FIF
      278      278        CALL XSL$SOCKET( s, af, type, protocol );
      279      279        ..::IT "Parameters:"
      280      280        .INL 4
      281      281        .FIF
      282      282        af          integer address format
      283      283
      284      284        type        integer socket type
      285      285
      286      286        protocol    integer protocol number
      287      287        ..::IT "Result:"
      288      288        .INL 4
      289      289        .FIF
      290      290        s           integer socket descriptor or error code
      291      291        ..::IT "Description:"
      292      292        The socket() function creates an endpoint for communication, and returns
      293      293        a descriptor used by other socket library functions for this communication.
      294      294        .SPB
      295      295        The af parameter specifies the address format to use when processing
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:25   
      296      296        network addresses in later operations on this socket.  Equates for the
      297      297        possible values can be found in <xsl_socket.h> or XSL_SOCKET_E.  Only the
      298      298        "Internet" address format is currently supported; it is selected
      299      299        by coding AF_INET or %XSL_AF_INET in C or PL6 source, respectively.
      300      300        The complete list of possible address formats is shown below.
      301      301        .trf ]%
      302      302        ..::TB "^\C #define\#8\PL6 ]EQU\#10\Meaning\#"
      303      303        .trf ]]
      304      304        .xeq XSL_SOCKET_E AF_E XSL_AF_APPLETALK
      305      305        .xeq XSL_SOCKET_E AF_E XSL_AF_CCITT
      306      306        .xeq XSL_SOCKET_E AF_E XSL_AF_CHAOS
      307      307        .xeq XSL_SOCKET_E AF_E XSL_AF_DATAKIT
      308      308        .xeq XSL_SOCKET_E AF_E XSL_AF_DECNET
      309      309        .xeq XSL_SOCKET_E AF_E XSL_AF_DLI
      310      310        .xeq XSL_SOCKET_E AF_E XSL_AF_ECMA
      311      311        .xeq XSL_SOCKET_E AF_E XSL_AF_HYLINK
      312      312        .xeq XSL_SOCKET_E AF_E XSL_AF_IMPLINK
      313      313        .xeq XSL_SOCKET_E AF_E XSL_AF_INET
      314      314        .xeq XSL_SOCKET_E AF_E XSL_AF_LAT
      315      315        .xeq XSL_SOCKET_E AF_E XSL_AF_NBS
      316      316        .xeq XSL_SOCKET_E AF_E XSL_AF_NS
      317      317        .xeq XSL_SOCKET_E AF_E XSL_AF_PUP
      318      318        .xeq XSL_SOCKET_E AF_E XSL_AF_SNA
      319      319        .xeq XSL_SOCKET_E AF_E XSL_AF_UNIX
      320      320        ..::TB
      321      321        .SPB
      322      322        The type parameter specifies how communication is to be performed for
      323      323        this socket.  Equates for the possible values can be found in <xsl_socket.h>
      324      324        or XSL_SOCKET_E.  Only "stream", "datagram", and "raw" socket types are
      325      325        currently supported.  Stream type is selected by coding SOCK_STREAM or
      326      326        %XSL_SOCK_STREAM in C or PL6 source, respectively.  Datagram type is
      327      327        selected by coding SOCK_DGRAM or %XSL_SOCK_DGRAM in C or PL6 source,
      328      328        respectively.  Raw type is selected by coding SOCK_RAW or %XSL_SOCK_RAW
      329      329        in C or PL6 source, respectively.
      330      330        The complete list of possible types is shown in the table below.
      331      331        .trf ]%
      332      332        ..::TB "^\C #define\#8\PL6 ]EQU\#15\Meaning\#"
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:26   
      333      333        .trf ]]
      334      334        .xeq XSL_SOCKET_E SOCK_E SOCK_DGRAM
      335      335        .xeq XSL_SOCKET_E SOCK_E SOCK_RAW
      336      336        .xeq XSL_SOCKET_E SOCK_E SOCK_RDM
      337      337        .xeq XSL_SOCKET_E SOCK_E SOCK_SEQPACKET
      338      338        .xeq XSL_SOCKET_E SOCK_E SOCK_STREAM
      339      339        ..::TB
      340      340        .SPB
      341      341        The protocol parameter specifies which protocol family to use for
      342      342        communication on this socket.  There are potentially many protocol
      343      343        families available for each address format selected.  Equates for the
      344      344        possible values can be found in <xsl_socket.h> or XSL_SOCKET_E.  Only
      345      345        "Internet" protocol is currently supported; it is selected by coding
      346      346        PF_INET or %XSL_PF_INET in C or PL6 source, respectively.  The value 0 is
      347      347        also permitted; it specifies use of the default protocol for the selected
      348      348        address format.
      349      349        The complete list of possible protocol families is shown below.
      350      350        .trf ]%
      351      351        ..::TB "^\C #define\#8\PL6 ]EQU\#10\Meaning\#"
      352      352        .trf ]]
      353      353        .xeq XSL_SOCKET_E PF_E XSL_PF_APPLETALK
      354      354        .xeq XSL_SOCKET_E PF_E XSL_PF_CCITT
      355      355        .xeq XSL_SOCKET_E PF_E XSL_PF_CHAOS
      356      356        .xeq XSL_SOCKET_E PF_E XSL_PF_DATAKIT
      357      357        .xeq XSL_SOCKET_E PF_E XSL_PF_DECNET
      358      358        .xeq XSL_SOCKET_E PF_E XSL_PF_DLI
      359      359        .xeq XSL_SOCKET_E PF_E XSL_PF_ECMA
      360      360        .xeq XSL_SOCKET_E PF_E XSL_PF_HYLINK
      361      361        .xeq XSL_SOCKET_E PF_E XSL_PF_IMPLINK
      362      362        .xeq XSL_SOCKET_E PF_E XSL_PF_INET
      363      363        .xeq XSL_SOCKET_E PF_E XSL_PF_LAT
      364      364        .xeq XSL_SOCKET_E PF_E XSL_PF_NBS
      365      365        .xeq XSL_SOCKET_E PF_E XSL_PF_NS
      366      366        .xeq XSL_SOCKET_E PF_E XSL_PF_PUP
      367      367        .xeq XSL_SOCKET_E PF_E XSL_PF_SNA
      368      368        .xeq XSL_SOCKET_E PF_E XSL_PF_UNIX
      369      369        ..::TB
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:27   
      370      370        .SPB
      371      371        If the socket() function is successful, the s result contains the
      372      372        descriptor for a new socket with the selected attributes.  The descriptor
      373      373        is a small non-negative integer, equivalent to the DCBNUM of the DCB
      374      374        allocated for this socket.
      375      375        .SPB
      376      376        If the socket() function is unsuccessful, the s result contains
      377      377        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      378      378        to determine the specific error condition.  The XSL$SOCKET procedure
      379      379        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      380      380        to the socket() function.
      381      381        ..::IT "Errors:"
      382      382        Following are the possible error conditions reported when the socket()
      383      383        function is unsuccessful.  Equates for the possible values can be found in
      384      384        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      385      385
      386      386        .FIF
      387      387
      388      388        C #define               PL6 %EQU
      389      389        ----------------------- -----------------------
      390      390        EAFNOSUPPORT            E$AFNOSUPPORT
      391      391        .FIN
      392      392        The selected address format is not currently supported.
      393      393        .FIF
      394      394
      395      395        EMFILE                  E$MFILE
      396      396        .FIN
      397      397        M$GETDCB failed.  Unable to allocate DCB for this socket.
      398      398        .FIF
      399      399
      400      400        ENOBUFFS                E$NOBUFFS
      401      401        No buffer space is available.
      402      402        .FIN
      403      403        .FIF
      404      404
      405      405        EPROTONOSUPPORT         E$PROTONOSUPPORT
      406      406        .FIN
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:28   
      407      407        The selected protocol family is not currently supported.
      408      408        .FIF
      409      409
      410      410        ESOCKTNOSUPPORT         E$SOCKTNOSUPPORT
      411      411        .FIN
      412      412        The selected socket type is not currently supported.
      413      413        .FIF
      414      414        */
      415      415        XSL$SOCKET: PROC( RESULT, AF, TYPE, PROTOCOL) ALTRET;

    415  1 000000   000000 700200 xent  XSL$SOCKET   TSX0  ! X66_AUTO_4
         1 000001   000014 000004                    ZERO    12,4

      416      416        %INCLUDE XSL_SOCKET_E;
      417      674        %INCLUDE XSL_SOCKET_M;
      418     1435        %INCLUDE XSL_PERR_C;
      419     1490        %INCLUDE XSL_INTERNAL_M;
      420     1741            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      421     1885
      422     1886    1       DCL XSL$GETSOCK ENTRY(2) ALTRET;
      423     1887    1       DCL XSL$RELSOCK ENTRY(1) ALTRET;
      424     1888    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      425     1889    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      426     1890    1       DCL XSL$SOCKOPEN ENTRY(3) ALTRET;
      427     1891
      428     1892    1       DCL XSL_ERRNO SBIN SYMREF;
      429     1893    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      430     1894    1       DCL XSL_SN CHAR(6) SYMREF;
      431     1895
      432     1896    1       DCL AF SBIN;
      433     1897    1       DCL PROTOCOL SBIN;
      434     1898    1       DCL QUICK BIT(1) UNAL;
      435     1899    1       DCL RESULT SBIN;
      436     1900    1       DCL SOCK# SBIN;
      437     1901    1       DCL SOCK$ PTR;
      438     1902    1       DCL TYPE SBIN;
      439     1903
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:29   
      440     1904    1       QUICK = '0'B;

   1904  1 000002   200007 450100                    STZ     QUICK,,AUTO

      441     1905    1       GOTO COMMON;

   1905  1 000003   000010 710000 1                  TRA     COMMON

      442     1906
      443     1907    1   XSL$QSOCKET: ENTRY( RESULT, AF, TYPE, PROTOCOL) ALTRET;

   1907  1 000004   000000 700200 xent  XSL$QSOCKET  TSX0  ! X66_AUTO_4
         1 000005   000014 000004                    ZERO    12,4

      444     1908
      445     1909    1       QUICK = '1'B;

   1909  1 000006   400000 236003                    LDQ     -131072,DU
         1 000007   200007 756100                    STQ     QUICK,,AUTO

      446     1910    1   COMMON:
      447     1911    2       IF AF ~= %XSL_AF_INET THEN DO;

   1911  1 000010   200004 470500       COMMON       LDP0    @AF,,AUTO
         1 000011   000000 235100                    LDA     0,,PR0
         1 000012   000002 115007                    CMPA    2,DL
         1 000013   000033 600000 1                  TZE     s:1919

      448     1912    2           XSL_ERRNO = %E$AFNOSUPPORT;

   1912  1 000014   000152 236007                    LDQ     106,DL
         1 000015   000000 756000 xsym               STQ     XSL_ERRNO

      449     1913    2   BAILOUT:
      450     1914    2           RESULT = %E$FAILURE;

   1914  1 000016   000001 335007       BAILOUT      LCA     1,DL
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:30   
         1 000017   200003 470500                    LDP0    @RESULT,,AUTO
         1 000020   000000 755100                    STA     0,,PR0

      451     1915    2           IF XSL_ERRNO = %E$FAILURE THEN

   1915  1 000021   000000 236000 xsym               LDQ     XSL_ERRNO
         1 000022   000027 116000 xsym               CMPQ    B_VECTNIL+23
         1 000023   000032 601000 1                  TNZ     s:1917

      452     1916    2               CALL XSL$RELSOCK( SOCK#);

   1916  1 000024   200010 631500                    EPPR1   SOCK#,,AUTO
         1 000025   200012 451500                    STP1    SOCK$+1,,AUTO
         1 000026   200012 630500                    EPPR0   SOCK$+1,,AUTO
         1 000027   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000030   000000 701000 xent               TSX1    XSL$RELSOCK
         1 000031   000000 011000                    NOP     0

      453     1917    2           ALTRETURN;

   1917  1 000032   000000 702200 xent               TSX2  ! X66_AALT

      454     1918    2           END;
      455     1919    2       IF TYPE < %XSL_SOCK_STREAM OR TYPE > %XSL_SOCK_RAW THEN DO;

   1919  1 000033   200005 471500                    LDP1    @TYPE,,AUTO
         1 000034   100000 235100                    LDA     0,,PR1
         1 000035   000040 604400 1                  TMOZ    s:1920
         1 000036   000003 115007                    CMPA    3,DL
         1 000037   000043 604400 1                  TMOZ    s:1921

      456     1920    2           XSL_ERRNO = %E$SOCKTNOSUPPORT; GOTO BAILOUT; END;

   1920  1 000040   000147 236007                    LDQ     103,DL
         1 000041   000000 756000 xsym               STQ     XSL_ERRNO

   1920  1 000042   000016 710000 1                  TRA     BAILOUT
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:31   

      457     1921    2       IF PROTOCOL ~= %XSL_PF_UNSPEC AND PROTOCOL ~= AF THEN DO;

   1921  1 000043   200006 473500                    LDP3    @PROTOCOL,,AUTO
         1 000044   300000 235100                    LDA     0,,PR3
         1 000045   000054 600000 1                  TZE     s:1923
         1 000046   300000 236100                    LDQ     0,,PR3
         1 000047   000000 116100                    CMPQ    0,,PR0
         1 000050   000054 600000 1                  TZE     s:1923

      458     1922    2           XSL_ERRNO = %E$PROTONOSUPPORT; GOTO BAILOUT; END;

   1922  1 000051   000146 235007                    LDA     102,DL
         1 000052   000000 755000 xsym               STA     XSL_ERRNO

   1922  1 000053   000016 710000 1                  TRA     BAILOUT

      459     1923    1       CALL XSL$GETSOCK( SOCK#, XSL_SOCK$) ALTRET (BAILOUT);

   1923  1 000054   000000 236000 2                  LDQ     0
         1 000055   200013 756100                    STQ     SOCK$+2,,AUTO
         1 000056   200010 634500                    EPPR4   SOCK#,,AUTO
         1 000057   200012 454500                    STP4    SOCK$+1,,AUTO
         1 000060   200012 630500                    EPPR0   SOCK$+1,,AUTO
         1 000061   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000062   000000 701000 xent               TSX1    XSL$GETSOCK
         1 000063   000016 702000 1                  TSX2    BAILOUT

      460     1924    1       SOCK$ = XSL_SOCK$;

   1924  1 000064   000000 236000 xsym               LDQ     XSL_ERRNO
         1 000065   200011 756100                    STQ     SOCK$,,AUTO

      461     1925    1       SOCK.AF = AF;

   1925  1 000066   200011 470500                    LDP0    SOCK$,,AUTO
         1 000067   200004 471500                    LDP1    @AF,,AUTO
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:32   
         1 000070   100000 236100                    LDQ     0,,PR1
         1 000071   000033 736000                    QLS     27
         1 000072   000000 552140                    STBQ    0,'40'O,PR0

      462     1926    1       SOCK.TYPE = TYPE;

   1926  1 000073   200005 473500                    LDP3    @TYPE,,AUTO
         1 000074   300000 236100                    LDQ     0,,PR3
         1 000075   000022 736000                    QLS     18
         1 000076   000000 552120                    STBQ    0,'20'O,PR0

      463     1927    1       SOCK.PROTOCOL = PROTOCOL;

   1927  1 000077   200006 474500                    LDP4    @PROTOCOL,,AUTO
         1 000100   400000 236100                    LDQ     0,,PR4
         1 000101   000011 736000                    QLS     9
         1 000102   000000 552110                    STBQ    0,'10'O,PR0

      464     1928    1       SOCK.FLAGS.BLOCKING = '1'B;

   1928  1 000103   001000 236003                    LDQ     512,DU
         1 000104   000001 256100                    ORSQ    1,,PR0

      465     1929    1       IF XSL_SN = '      ' THEN

   1929  1 000105   040000 106400                    CMPC    fill='040'O
         1 000106   000000 000006 xsym               ADSC9   XSL_SN                   cn=0,n=6
         1 000107   000000 000006 0                  ADSC9   0                        cn=0,n=6
         1 000110   000115 601000 1                  TNZ     s:1932

      466     1930                /* site doesn't have default RNAME, so we can socket() now */
      467     1931    1           CALL XSL$SOCKOPEN( SOCK) ALTRET( BAILOUT);

   1931  1 000111   200011 630500                    EPPR0   SOCK$,,AUTO
         1 000112   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000113   000000 701000 xent               TSX1    XSL$SOCKOPEN
         1 000114   000016 702000 1                  TSX2    BAILOUT
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:33   

      468     1932    1       IF TYPE ~= %XSL_SOCK_STREAM THEN

   1932  1 000115   200005 470500                    LDP0    @TYPE,,AUTO
         1 000116   000000 235100                    LDA     0,,PR0
         1 000117   000001 115007                    CMPA    1,DL
         1 000120   000124 600000 1                  TZE     s:1934

      469     1933    1           SOCK.FLAGS.SELWRITE = '1'B;

   1933  1 000121   200011 471500                    LDP1    SOCK$,,AUTO
         1 000122   000020 236003                    LDQ     16,DU
         1 000123   100001 256100                    ORSQ    1,,PR1

      470     1934    1       IF QUICK THEN

   1934  1 000124   200007 234100                    SZN     QUICK,,AUTO
         1 000125   000132 605000 1                  TPL     s:1937

      471     1935    1           RESULT = SOCK#;

   1935  1 000126   200003 471500                    LDP1    @RESULT,,AUTO
         1 000127   200010 235100                    LDA     SOCK#,,AUTO
         1 000130   100000 755100                    STA     0,,PR1
         1 000131   000137 710000 1                  TRA     s:1938

      472     1936    1       ELSE
      473     1937    1           RESULT = SOCK.DCB#;

   1937  1 000132   200011 471500                    LDP1    SOCK$,,AUTO
         1 000133   100003 236100                    LDQ     3,,PR1
         1 000134   777777 376007                    ANQ     -1,DL
         1 000135   200003 473500                    LDP3    @RESULT,,AUTO
         1 000136   300000 756100                    STQ     0,,PR3

      474     1938    1       RETURN;

PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:34   
   1938  1 000137   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   0     000   040040 040040   040040 040040

(unnamed)
 Sect OctLoc
   2     000   000000 006000                                                    ....
      475     1939
      476     1940    1   END XSL$SOCKET;
      477     1941        %EOD;

PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:35   
--  Include file information  --

   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$SOCKET.
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:36   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @AF                        6-0-0/w PTR         r     1 @PROTOCOL
     3-0-0/w PTR         r     1 @RESULT                    5-0-0/w PTR         r     1 @TYPE
    *0-0-0/w SBIN        r     1 AF                        *0-0-0/w SBIN        r     1 PROTOCOL
     7-0-0/b BIT         r     1 QUICK                     *0-0-0/w SBIN        r     1 RESULT
    10-0-0/w SBIN        r     1 SOCK#                     11-0-0/w PTR         r     1 SOCK$
    *0-0-0/w SBIN        r     1 TYPE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSL_ERRNO                  0-0-0/c CHAR(6)     r     1 XSL_SN
     0-0-0/w PTR         r     1 XSL_SOCK$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 SOCK


   Procedure XSL$SOCKET requires 96 words for executable code.
   Procedure XSL$SOCKET requires 12 words of local(AUTO) storage.
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:37   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:38   
          MINI XREF LISTING

AF
      1896**DCL       415--PROC     1907--ENTRY    1911>>IF       1921>>IF       1925>>ASSIGN
BAILOUT
      1914**LABEL    1920--GOTO     1922--GOTO     1923--CALLALT  1931--CALLALT
COMMON
      1911**LABEL    1905--GOTO
PROTOCOL
      1897**DCL       415--PROC     1907--ENTRY    1921>>IF       1921>>IF       1927>>ASSIGN
QUICK
      1898**DCL      1904<<ASSIGN   1909<<ASSIGN   1934>>IF
RESULT
      1899**DCL       415--PROC     1907--ENTRY    1914<<ASSIGN   1935<<ASSIGN   1937<<ASSIGN
SOCK
      1759**DCL      1931<>CALL
SOCK.AF
      1765**DCL      1925<<ASSIGN
SOCK.DCB#
      1792**DCL      1937>>ASSIGN
SOCK.FLAGS.BLOCKING
      1778**DCL      1928<<ASSIGN
SOCK.FLAGS.SELWRITE
      1783**DCL      1933<<ASSIGN
SOCK.NBACCEPT_SOCK$
      1881**DCL      1882--REDEF
SOCK.PROTOCOL
      1767**DCL      1927<<ASSIGN
SOCK.TYPE
      1766**DCL      1926<<ASSIGN
SOCK#
      1900**DCL      1916<>CALL     1923<>CALL     1935>>ASSIGN
SOCK$
      1901**DCL      1759--IMP-PTR  1924<<ASSIGN   1925>>ASSIGN   1926>>ASSIGN   1927>>ASSIGN   1928>>ASSIGN
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:39   
      1931>>CALL     1933>>ASSIGN   1937>>ASSIGN
TYPE
      1902**DCL       415--PROC     1907--ENTRY    1919>>IF       1919>>IF       1926>>ASSIGN   1932>>IF
XSL$GETSOCK
      1886**DCL-ENT  1923--CALL
XSL$RELSOCK
      1887**DCL-ENT  1916--CALL
XSL$SOCKOPEN
      1890**DCL-ENT  1931--CALL
XSL_ERRNO
      1892**DCL      1893--REDEF    1912<<ASSIGN   1915>>IF       1920<<ASSIGN   1922<<ASSIGN
XSL_SN
      1894**DCL      1929>>IF
XSL_SOCK$
      1893**DCL      1923<>CALL     1924>>ASSIGN
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:40   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSL$SOCKET File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:29 Page:41   
              MINI UREF LISTING

XSL$CL_READ    1888**DCL-ENT
XSL$CL_WRITE    1889**DCL-ENT
XSL$QSOCKET    1907**ENTRY
XSL$SOCKET     415**PROC

PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:42   
      478        1        /*T***********************************************************/
      479        2        /*T*                                                         */
      480        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      481        4        /*T*                                                         */
      482        5        /*T***********************************************************/
      483        6        XSL$SOCKOPEN: PROC( SOCK, NAME, NAMELEN) ALTRET;
      484        7        %INCLUDE XSL_SOCKET_E;
      485      265        %INCLUDE XSL_SOCKET_M;
      486     1026            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
      487     1066        %INCLUDE XSL_PERR_C;
      488     1121        %INCLUDE XSL_INTERNAL_M;
      489     1372            %XSL$SOCKINFO( FPTN=SOCK, STCLASS=);
      490     1516        %INCLUDE XSL_SOCKMSGS_E;
      491     1562        %INCLUDE XSL_SOCKMSGS_M;
      492     2695            %XSL$SOCKETRQS( FPTN=XSL_SOCKETRQS, STCLASS="CONSTANT SYMDEF");
      493     2723            %XSL$SOCKETRQS( STCLASS="BASED( XSL_KEYBUF$)");
      494     2751            %XSL$SOCKETRSP( STCLASS="BASED( XSL_KEYBUF$)");
      495     2778
      496     2779    1       DCL XSL$CL_OPEN ENTRY(3) ALTRET;
      497     2780    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      498     2781    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      499     2782
      500     2783    1       DCL XSL_ERRNO SBIN SYMREF;
      501     2784    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      502     2785
      503     2786    1       DCL NAMELEN SBIN;
      504     2787
      505     2788    1       CALL XSL$CL_OPEN( SOCK, NAME, NAMELEN)
      506     2789    2       WHENALTRETURN DO;
      507     2790    2           XSL_ERRNO = %E$FAILURE;
      508     2791    2   BAILOUT:
      509     2792    2           ALTRETURN;
      510     2793    2           END;
      511     2794    1       XSL$SOCKETRQS = XSL_SOCKETRQS;
      512     2795    1       XSL$SOCKETRQS.AF = SOCK.AF;
      513     2796    1       XSL$SOCKETRQS.TYPE = SOCK.TYPE;
      514     2797    1       XSL$SOCKETRQS.PROTOCOL = SOCK.PROTOCOL;
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:43   
      515     2798    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$SOCKETRQS));
      516     2799    1       CALL XSL$CL_READ( SOCK);
      517     2800    2       IF XSL$SOCKETRSP.RESULT < 0 THEN DO;
      518     2801    2           XSL_ERRNO = XSL$SOCKETRSP.ERRNO;
      519     2802    2           GOTO BAILOUT;
      520     2803    2           END;
      521     2804    1       SOCK.FLAGS.SOCKET = '1'B;
      522     2805    1       RETURN;
      523     2806
      524     2807    1   END XSL$SOCKOPEN;
      525     2808        %EOD;

PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:44   
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$SOCKOPEN.

   Procedure XSL$SOCKOPEN requires 49 words for executable code.
   Procedure XSL$SOCKOPEN requires 8 words of local(AUTO) storage.

PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:45   

 Object Unit name= XSL$SOCKOPEN                               File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:30:34.00 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      2      2  XSL$SOCKOPEN
    1   Proc  even  none    49     61  XSL$SOCKOPEN
    2  RoData even  none     1      1  XSL$SOCKOPEN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  XSL$SOCKOPEN

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSL_SOCKETRQS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 XSL$CL_OPEN
 yes     yes           Std       4 XSL$CL_WRITE
 yes     yes           Std       3 XSL$CL_READ
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:46   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_ERRNO                        r    XSL_KEYBUF$                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:47   


      478        1        /*T***********************************************************/
      479        2        /*T*                                                         */
      480        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      481        4        /*T*                                                         */
      482        5        /*T***********************************************************/
      483        6        XSL$SOCKOPEN: PROC( SOCK, NAME, NAMELEN) ALTRET;

      6  1 000000   000000 700200 xent  XSL$SOCKOPEN TSX0  ! X66_AUTO_3
         1 000001   000010 000003                    ZERO    8,3

      484        7        %INCLUDE XSL_SOCKET_E;
      485      265        %INCLUDE XSL_SOCKET_M;
      486     1026            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
      487     1066        %INCLUDE XSL_PERR_C;
      488     1121        %INCLUDE XSL_INTERNAL_M;
      489     1372            %XSL$SOCKINFO( FPTN=SOCK, STCLASS=);
      490     1516        %INCLUDE XSL_SOCKMSGS_E;
      491     1562        %INCLUDE XSL_SOCKMSGS_M;
      492     2695            %XSL$SOCKETRQS( FPTN=XSL_SOCKETRQS, STCLASS="CONSTANT SYMDEF");
      493     2723            %XSL$SOCKETRQS( STCLASS="BASED( XSL_KEYBUF$)");
      494     2751            %XSL$SOCKETRSP( STCLASS="BASED( XSL_KEYBUF$)");
      495     2778
      496     2779    1       DCL XSL$CL_OPEN ENTRY(3) ALTRET;
      497     2780    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      498     2781    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      499     2782
      500     2783    1       DCL XSL_ERRNO SBIN SYMREF;
      501     2784    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      502     2785
      503     2786    1       DCL NAMELEN SBIN;
      504     2787
      505     2788    1       CALL XSL$CL_OPEN( SOCK, NAME, NAMELEN)

   2788  1 000002   200003 630500                    EPPR0   @SOCK,,AUTO
         1 000003   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000004   000000 701000 xent               TSX1    XSL$CL_OPEN
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:48   
         1 000005   000007 702000 1                  TSX2    s:2790
         1 000006   000012 710000 1                  TRA     s:2794

      506     2789    2       WHENALTRETURN DO;

      507     2790    2           XSL_ERRNO = %E$FAILURE;

   2790  1 000007   000001 335007                    LCA     1,DL
         1 000010   000000 755000 xsym               STA     XSL_ERRNO

      508     2791    2   BAILOUT:
      509     2792    2           ALTRETURN;

   2792  1 000011   000000 702200 xent  BAILOUT      TSX2  ! X66_AALT

      510     2793    2           END;
      511     2794    1       XSL$SOCKETRQS = XSL_SOCKETRQS;

   2794  1 000012   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 000013   000000 237000 0                  LDAQ    XSL_SOCKETRQS
         1 000014   000000 755100                    STA     0,,PR0
         1 000015   000001 756100                    STQ     1,,PR0

      512     2795    1       XSL$SOCKETRQS.AF = SOCK.AF;

   2795  1 000016   200003 471500                    LDP1    @SOCK,,AUTO
         1 000017   100000 236100                    LDQ     0,,PR1
         1 000020   000033 772000                    QRL     27
         1 000021   000000 620006                    EAX0    0,QL
         1 000022   000000 440100                    SXL0    0,,PR0

      513     2796    1       XSL$SOCKETRQS.TYPE = SOCK.TYPE;

   2796  1 000023   100000 221100                    LDX1    0,,PR1
         1 000024   000777 361003                    ANX1    511,DU
         1 000025   000001 741100                    STX1    1,,PR0

PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:49   
      514     2797    1       XSL$SOCKETRQS.PROTOCOL = SOCK.PROTOCOL;

   2797  1 000026   100000 236100                    LDQ     0,,PR1
         1 000027   000011 772000                    QRL     9
         1 000030   000777 376007                    ANQ     511,DL
         1 000031   000000 622006                    EAX2    0,QL
         1 000032   000001 442100                    SXL2    1,,PR0

      515     2798    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$SOCKETRQS));

   2798  1 000033   000000 236000 2                  LDQ     0
         1 000034   200003 235100                    LDA     @SOCK,,AUTO
         1 000035   200006 757100                    STAQ    @NAMELEN+1,,AUTO
         1 000036   200006 630500                    EPPR0   @NAMELEN+1,,AUTO
         1 000037   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000040   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 000041   000000 011000                    NOP     0

      516     2799    1       CALL XSL$CL_READ( SOCK);

   2799  1 000042   200003 630500                    EPPR0   @SOCK,,AUTO
         1 000043   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000044   000000 701000 xent               TSX1    XSL$CL_READ
         1 000045   000000 011000                    NOP     0

      517     2800    2       IF XSL$SOCKETRSP.RESULT < 0 THEN DO;

   2800  1 000046   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 000047   000000 720100                    LXL0    0,,PR0
         1 000050   000055 605000 1                  TPL     s:2804

      518     2801    2           XSL_ERRNO = XSL$SOCKETRSP.ERRNO;

   2801  1 000051   000001 236100                    LDQ     1,,PR0
         1 000052   000022 732000                    QRS     18
         1 000053   000000 756000 xsym               STQ     XSL_ERRNO

PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:50   
      519     2802    2           GOTO BAILOUT;

   2802  1 000054   000011 710000 1                  TRA     BAILOUT

      520     2803    2           END;
      521     2804    1       SOCK.FLAGS.SOCKET = '1'B;

   2804  1 000055   200003 471500                    LDP1    @SOCK,,AUTO
         1 000056   002000 236003                    LDQ     1024,DU
         1 000057   100001 256100                    ORSQ    1,,PR1

      522     2805    1       RETURN;

   2805  1 000060   000000 702200 xent               TSX2  ! X66_ARET

XSL_SOCKETRQS
 Sect OctLoc
   0     000   000033 000000   000000 000000                                    ........

(unnamed)
 Sect OctLoc
   2     000   000012 006000                                                    ....
      523     2806
      524     2807    1   END XSL$SOCKOPEN;
      525     2808        %EOD;

PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:51   
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$SOCKOPEN.
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:52   

 **** Variables and constants ****

  ****  Section 000 RoData XSL$SOCKOPEN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 XSL_SOCKETRQS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @NAME                      5-0-0/w PTR         r     1 @NAMELEN
     3-0-0/w PTR         r     1 @SOCK                     *0-0-0/w STRC(180)   r     1 NAME
    *0-0-0/w SBIN        r     1 NAMELEN                   *0-0-0/w STRC(720)   r     1 SOCK

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSL_ERRNO                  0-0-0/w PTR         r     1 XSL_KEYBUF$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(72)    r     1 XSL$SOCKETRQS              0-0-0/w STRC(54)    r     1 XSL$SOCKETRSP


   Procedure XSL$SOCKOPEN requires 49 words for executable code.
   Procedure XSL$SOCKOPEN requires 8 words of local(AUTO) storage.
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:53   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:54   
          MINI XREF LISTING

BAILOUT
      2792**LABEL    2802--GOTO
NAME
      1043**DCL         6--PROC     2788<>CALL
NAMELEN
      2786**DCL         6--PROC     2788<>CALL
SOCK
      1390**DCL         6--PROC     2788<>CALL     2798<>CALL     2799<>CALL
SOCK.AF
      1396**DCL      2795>>ASSIGN
SOCK.FLAGS.SOCKET
      1408**DCL      2804<<ASSIGN
SOCK.NBACCEPT_SOCK$
      1512**DCL      1513--REDEF
SOCK.PROTOCOL
      1398**DCL      2797>>ASSIGN
SOCK.TYPE
      1397**DCL      2796>>ASSIGN
XSL$CL_OPEN
      2779**DCL-ENT  2788--CALL
XSL$CL_READ
      2780**DCL-ENT  2799--CALL
XSL$CL_WRITE
      2781**DCL-ENT  2798--CALL
XSL$SOCKETRQS
      2740**DCL      2794<<ASSIGN   2798--CALL
XSL$SOCKETRQS.AF
      2747**DCL      2795<<ASSIGN
XSL$SOCKETRQS.PROTOCOL
      2749**DCL      2797<<ASSIGN
XSL$SOCKETRQS.TYPE
      2748**DCL      2796<<ASSIGN
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:55   
XSL$SOCKETRSP.ERRNO
      2776**DCL      2801>>ASSIGN
XSL$SOCKETRSP.RESULT
      2775**DCL      2800>>IF
XSL_ERRNO
      2783**DCL      2790<<ASSIGN   2801<<ASSIGN
XSL_KEYBUF$
      2784**DCL      2740--IMP-PTR  2768--IMP-PTR  2794>>ASSIGN   2795>>ASSIGN   2796>>ASSIGN   2797>>ASSIGN
      2800>>IF       2801>>ASSIGN
XSL_SOCKETRQS
      2712**DCL      2794>>ASSIGN
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:56   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XSL$SOCKOPEN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:30 Page:57   
              MINI UREF LISTING

XSL$SOCKOPEN       6**PROC

PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:58   
      526        1        /*T***********************************************************/
      527        2        /*T*                                                         */
      528        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      529        4        /*T*                                                         */
      530        5        /*T***********************************************************/
      531        6        /*F* NAME: bind() and XSL$BIND  --  Bind Name to Socket
      532        7        ..::IT "Purpose:"
      533        8        .INL +4
      534        9        Binds an address to a socket, so the socket can be addressed by other sockets
      535       10        elsewhere in the network.
      536       11        ..::IT "C Usage:"
      537       12        .INL 4
      538       13        .FIF
      539       14        status = bind( s, &name, namelen );
      540       15        ..::IT "PL6 Usage:"
      541       16        .INL 4
      542       17        .FIF
      543       18        CALL XSL$BIND( status, s, name, namelen );
      544       19        ..::IT "Parameters:"
      545       20        .INL 4
      546       21        .FIF
      547       22        s           integer socket descriptor
      548       23
      549       24        name        sockaddr structure
      550       25
      551       26        namelen     integer number of significant characters in name
      552       27        ..::IT "Result:"
      553       28        .INL 4
      554       29        .FIF
      555       30        status      integer error code
      556       31        ..::IT "Description:"
      557       32        The bind() function assigns an address to an existing socket.  When a
      558       33        socket is allocated with the socket() function, it has no associated
      559       34        address.  In order for other sockets in the network to identify the new
      560       35        socket, it must have an address bound to it.
      561       36        .SPB
      562       37        The s parameter specifies the descriptor of the socket to be bound.
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:59   
      563       38        .SPB
      564       39        The name parameter specifies the address to bind to the socket.  In C
      565       40        source, it is a sockaddr structure.  In PL6 source, it is an XSL$SOCKADDR
      566       41        structure.
      567       42        .SPB
      568       43        The namelen parameter specifies the number of significant characters in
      569       44        name.
      570       45        .SPB
      571       46        If the bind() function is successful, the status result contains ESUCCESS
      572       47        or E$SUCCESS.
      573       48        .SPB
      574       49        If the bind() function is unsuccessful, the status result contains
      575       50        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      576       51        to determine the specific error condition.  The XSL$BIND procedure
      577       52        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      578       53        to the bind() function.
      579       54        ..::IT "Errors:"
      580       55        Following are the possible error conditions reported when the bind()
      581       56        function is unsuccessful.  Equates for the possible values can be found in
      582       57        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      583       58
      584       59        .FIF
      585       60
      586       61        C #define               PL6 %EQU
      587       62        ----------------------- -----------------------
      588       63        EACCES                  E$ACCES
      589       64        Permission is denied to perform the function requested.
      590       65        .FIN
      591       66        .FIF
      592       67
      593       68        EADDRINUSE              E$ADDRINUSE
      594       69        .FIN
      595       70        The specified address is already in use.
      596       71        .FIF
      597       72
      598       73        EADDRNOTAVAIL           E$ADDRNOTAVAIL
      599       74        .FIN
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:60   
      600       75        The specified address is not available.
      601       76        .FIF
      602       77
      603       78        EBADF                   E$BADF
      604       79        .FIN
      605       80        The descriptor s is not appropriate to identify a socket.
      606       81        .FIF
      607       82
      608       83        EFAULT                  E$FAULT
      609       84        .FIN
      610       85        The namelen parameter is invalid (less than or equal to zero).
      611       86        .FIF
      612       87
      613       88        EINVAL                  E$INVAL
      614       89        .FIN
      615       90        Either connect() or bind() has already been issued on this socket.
      616       91        .FIF
      617       92
      618       93        ENOTSOCK                E$NOTSOCK
      619       94        .FIN
      620       95        The descriptor s is no longer valid to identify a socket.
      621       96        .FIF
      622       97        */
      623       98        XSL$BIND: PROC( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
      624       99        %INCLUDE XSL_SOCKET_E;
      625      357        %INCLUDE XSL_SOCKET_M;
      626     1118            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
      627     1158        %INCLUDE XSL_PERR_C;
      628     1213        %INCLUDE XSL_INTERNAL_M;
      629     1464            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      630     1608        %INCLUDE XSL_SOCKMSGS_E;
      631     1654        %INCLUDE XSL_SOCKMSGS_M;
      632     2787            %XSL$BINDRQS( FPTN=XSL_BINDRQS, STCLASS="CONSTANT SYMDEF");
      633     2839            %XSL$BINDRQS( STCLASS="BASED( XSL_KEYBUF$)");
      634     2891            %XSL$BINDRSP( STCLASS="BASED( XSL_KEYBUF$)");
      635     2918
      636     2919    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:61   
      637     2920    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      638     2921    1       DCL XSL$HTONADDR ENTRY(2);
      639     2922    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      640     2923    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      641     2924    1       DCL XSL$QSETSOCKOPT ENTRY(6) ALTRET;
      642     2925    1       DCL XSL$SOCKOPEN ENTRY(3) ALTRET;
      643     2926
      644     2927    1       DCL XSL_ERRNO SBIN SYMREF;
      645     2928    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      646     2929    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      647     2930
      648     2931    1       DCL NAMELEN SBIN;
      649     2932    1       DCL TNAMELEN SBIN;
      650     2933    1       DCL RESULT SBIN;
      651     2934    1       DCL SOCK# SBIN;
      652     2935    1       DCL SOCK$ PTR;
      653     2936    1       DCL TEMP SBIN;
      654     2937
      655     2938    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
      656     2939    1       GOTO COMMON;
      657     2940
      658     2941    1   XSL$QBIND: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
      659     2942
      660     2943    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET (BAILOUT);
      661     2944    1   COMMON:
      662     2945    1       TNAMELEN = NAMELEN;
      663     2946    1       IF TNAMELEN > 16 THEN
      664     2947    1           TNAMELEN = 16;
      665     2948    2       IF NAMELEN <= 0 THEN DO;
      666     2949    2           XSL_ERRNO = %E$FAULT;
      667     2950    2   BAILOUT:
      668     2951    2           RESULT = %E$FAILURE;
      669     2952    2           ALTRETURN;
      670     2953    2           END;
      671     2954    1       SOCK$ = XSL_SOCK$;
      672     2955    2       IF SOCK.FLAGS.CONNECT OR SOCK.FLAGS.BIND THEN DO;
      673     2956    2           XSL_ERRNO = %E$INVAL; GOTO BAILOUT; END;
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:62   
      674     2957    1       IF NOT SOCK.FLAGS.SOCKET THEN
      675     2958    1           CALL XSL$SOCKOPEN( SOCK, NAME, TNAMELEN) ALTRET( BAILOUT);
      676     2959    2       IF SOCK.FLAGS.REUSEADDR THEN DO;
      677     2960    2           TEMP = SOCK.SOCK#;
      678     2961    2           CALL XSL$QSETSOCKOPT( RESULT, TEMP, %XSL_SOL_SOCKET, %XSL_SO_REUSEADDR,
              2961                    262144, 2);
      679     2962    2           END;
      680     2963    1       XSL$BINDRQS = XSL_BINDRQS;
      681     2964    1       XSL$BINDRQS.NAMELEN = TNAMELEN;
      682     2965    1       CALL XSL$HTONADDR( XSL$BINDRQS.NAME, NAME);
      683     2966    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$BINDRQS)- 16+ TNAMELEN);
      684     2967    1       CALL XSL$CL_READ( SOCK);
      685     2968    2       IF XSL$BINDRSP.RESULT < 0 THEN DO;
      686     2969    2           XSL_ERRNO = XSL$BINDRSP.ERRNO;
      687     2970    2           GOTO BAILOUT;
      688     2971    2           END;
      689     2972    1       SOCK.SOCKNAME = NAME;
      690     2973    1       SOCK.FLAGS.BIND = '1'B;
      691     2974    1       SOCK.SOCKNAME = NAME;
      692     2975    1       RESULT = %E$SUCCESS;
      693     2976    1       RETURN;
      694     2977
      695     2978    1   END XSL$BIND;
      696     2979        %EOD;

PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:63   
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$BIND.

   Procedure XSL$BIND requires 125 words for executable code.
   Procedure XSL$BIND requires 16 words of local(AUTO) storage.

PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:64   

 Object Unit name= XSL$BIND                                   File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:30:56.60 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      5      5  XSL$BIND
    1   Proc  even  none   125    175  XSL$BIND
    2  RoData even  none     6      6  XSL$BIND

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  XSL$BIND
     1     12          yes     yes      Std        4  XSL$QBIND

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSL_BINDRQS
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:65   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSL$DCBNPTR
 yes     yes           Std       2 XSL$SOCKPTR
 yes     yes           Std       3 XSL$SOCKOPEN
 yes     yes           Std       4 XSL$CL_WRITE
 yes     yes           Std       6 XSL$QSETSOCKOPT
 yes     yes           Std       3 XSL$CL_READ
         yes           Std       2 XSL$HTONADDR
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_ERRNO                        r    XSL_KEYBUF$                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:66   


      526        1        /*T***********************************************************/
      527        2        /*T*                                                         */
      528        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      529        4        /*T*                                                         */
      530        5        /*T***********************************************************/
      531        6        /*F* NAME: bind() and XSL$BIND  --  Bind Name to Socket
      532        7        ..::IT "Purpose:"
      533        8        .INL +4
      534        9        Binds an address to a socket, so the socket can be addressed by other sockets
      535       10        elsewhere in the network.
      536       11        ..::IT "C Usage:"
      537       12        .INL 4
      538       13        .FIF
      539       14        status = bind( s, &name, namelen );
      540       15        ..::IT "PL6 Usage:"
      541       16        .INL 4
      542       17        .FIF
      543       18        CALL XSL$BIND( status, s, name, namelen );
      544       19        ..::IT "Parameters:"
      545       20        .INL 4
      546       21        .FIF
      547       22        s           integer socket descriptor
      548       23
      549       24        name        sockaddr structure
      550       25
      551       26        namelen     integer number of significant characters in name
      552       27        ..::IT "Result:"
      553       28        .INL 4
      554       29        .FIF
      555       30        status      integer error code
      556       31        ..::IT "Description:"
      557       32        The bind() function assigns an address to an existing socket.  When a
      558       33        socket is allocated with the socket() function, it has no associated
      559       34        address.  In order for other sockets in the network to identify the new
      560       35        socket, it must have an address bound to it.
      561       36        .SPB
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:67   
      562       37        The s parameter specifies the descriptor of the socket to be bound.
      563       38        .SPB
      564       39        The name parameter specifies the address to bind to the socket.  In C
      565       40        source, it is a sockaddr structure.  In PL6 source, it is an XSL$SOCKADDR
      566       41        structure.
      567       42        .SPB
      568       43        The namelen parameter specifies the number of significant characters in
      569       44        name.
      570       45        .SPB
      571       46        If the bind() function is successful, the status result contains ESUCCESS
      572       47        or E$SUCCESS.
      573       48        .SPB
      574       49        If the bind() function is unsuccessful, the status result contains
      575       50        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      576       51        to determine the specific error condition.  The XSL$BIND procedure
      577       52        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      578       53        to the bind() function.
      579       54        ..::IT "Errors:"
      580       55        Following are the possible error conditions reported when the bind()
      581       56        function is unsuccessful.  Equates for the possible values can be found in
      582       57        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      583       58
      584       59        .FIF
      585       60
      586       61        C #define               PL6 %EQU
      587       62        ----------------------- -----------------------
      588       63        EACCES                  E$ACCES
      589       64        Permission is denied to perform the function requested.
      590       65        .FIN
      591       66        .FIF
      592       67
      593       68        EADDRINUSE              E$ADDRINUSE
      594       69        .FIN
      595       70        The specified address is already in use.
      596       71        .FIF
      597       72
      598       73        EADDRNOTAVAIL           E$ADDRNOTAVAIL
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:68   
      599       74        .FIN
      600       75        The specified address is not available.
      601       76        .FIF
      602       77
      603       78        EBADF                   E$BADF
      604       79        .FIN
      605       80        The descriptor s is not appropriate to identify a socket.
      606       81        .FIF
      607       82
      608       83        EFAULT                  E$FAULT
      609       84        .FIN
      610       85        The namelen parameter is invalid (less than or equal to zero).
      611       86        .FIF
      612       87
      613       88        EINVAL                  E$INVAL
      614       89        .FIN
      615       90        Either connect() or bind() has already been issued on this socket.
      616       91        .FIF
      617       92
      618       93        ENOTSOCK                E$NOTSOCK
      619       94        .FIN
      620       95        The descriptor s is no longer valid to identify a socket.
      621       96        .FIF
      622       97        */
      623       98        XSL$BIND: PROC( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

     98  1 000000   000000 700200 xent  XSL$BIND     TSX0  ! X66_AUTO_4
         1 000001   000020 000004                    ZERO    16,4

      624       99        %INCLUDE XSL_SOCKET_E;
      625      357        %INCLUDE XSL_SOCKET_M;
      626     1118            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
      627     1158        %INCLUDE XSL_PERR_C;
      628     1213        %INCLUDE XSL_INTERNAL_M;
      629     1464            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      630     1608        %INCLUDE XSL_SOCKMSGS_E;
      631     1654        %INCLUDE XSL_SOCKMSGS_M;
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:69   
      632     2787            %XSL$BINDRQS( FPTN=XSL_BINDRQS, STCLASS="CONSTANT SYMDEF");
      633     2839            %XSL$BINDRQS( STCLASS="BASED( XSL_KEYBUF$)");
      634     2891            %XSL$BINDRSP( STCLASS="BASED( XSL_KEYBUF$)");
      635     2918
      636     2919    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      637     2920    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      638     2921    1       DCL XSL$HTONADDR ENTRY(2);
      639     2922    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      640     2923    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      641     2924    1       DCL XSL$QSETSOCKOPT ENTRY(6) ALTRET;
      642     2925    1       DCL XSL$SOCKOPEN ENTRY(3) ALTRET;
      643     2926
      644     2927    1       DCL XSL_ERRNO SBIN SYMREF;
      645     2928    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      646     2929    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      647     2930
      648     2931    1       DCL NAMELEN SBIN;
      649     2932    1       DCL TNAMELEN SBIN;
      650     2933    1       DCL RESULT SBIN;
      651     2934    1       DCL SOCK# SBIN;
      652     2935    1       DCL SOCK$ PTR;
      653     2936    1       DCL TEMP SBIN;
      654     2937
      655     2938    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   2938  1 000002   000000 236000 2                  LDQ     0
         1 000003   200004 235100                    LDA     @SOCK#,,AUTO
         1 000004   200012 757100                    STAQ    TEMP+1,,AUTO
         1 000005   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000006   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000007   000000 701000 xent               TSX1    XSL$DCBNPTR
         1 000010   000036 702000 1                  TSX2    BAILOUT

      656     2939    1       GOTO COMMON;

   2939  1 000011   000023 710000 1                  TRA     COMMON

PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:70   
      657     2940
      658     2941    1   XSL$QBIND: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

   2941  1 000012   000000 700200 xent  XSL$QBIND    TSX0  ! X66_AUTO_4
         1 000013   000020 000004                    ZERO    16,4

      659     2942
      660     2943    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET (BAILOUT);

   2943  1 000014   000000 236000 2                  LDQ     0
         1 000015   200004 235100                    LDA     @SOCK#,,AUTO
         1 000016   200012 757100                    STAQ    TEMP+1,,AUTO
         1 000017   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000020   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000021   000000 701000 xent               TSX1    XSL$SOCKPTR
         1 000022   000036 702000 1                  TSX2    BAILOUT

      661     2944    1   COMMON:
      662     2945    1       TNAMELEN = NAMELEN;

   2945  1 000023   200006 470500       COMMON       LDP0    @NAMELEN,,AUTO
         1 000024   000000 235100                    LDA     0,,PR0
         1 000025   200007 755100                    STA     TNAMELEN,,AUTO

      663     2946    1       IF TNAMELEN > 16 THEN

   2946  1 000026   000020 115007                    CMPA    16,DL
         1 000027   000032 604400 1                  TMOZ    s:2948

      664     2947    1           TNAMELEN = 16;

   2947  1 000030   000020 236007                    LDQ     16,DL
         1 000031   200007 756100                    STQ     TNAMELEN,,AUTO

      665     2948    2       IF NAMELEN <= 0 THEN DO;

   2948  1 000032   000000 235100                    LDA     0,,PR0
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:71   
         1 000033   000042 605400 1                  TPNZ    s:2954

      666     2949    2           XSL_ERRNO = %E$FAULT;

   2949  1 000034   000016 236007                    LDQ     14,DL
         1 000035   000000 756000 xsym               STQ     XSL_ERRNO

      667     2950    2   BAILOUT:
      668     2951    2           RESULT = %E$FAILURE;

   2951  1 000036   000001 335007       BAILOUT      LCA     1,DL
         1 000037   200003 470500                    LDP0    @RESULT,,AUTO
         1 000040   000000 755100                    STA     0,,PR0

      669     2952    2           ALTRETURN;

   2952  1 000041   000000 702200 xent               TSX2  ! X66_AALT

      670     2953    2           END;
      671     2954    1       SOCK$ = XSL_SOCK$;

   2954  1 000042   000000 236000 xsym               LDQ     XSL_ERRNO
         1 000043   200010 756100                    STQ     SOCK$,,AUTO

      672     2955    2       IF SOCK.FLAGS.CONNECT OR SOCK.FLAGS.BIND THEN DO;

   2955  1 000044   200010 471500                    LDP1    SOCK$,,AUTO
         1 000045   100001 236100                    LDQ     1,,PR1
         1 000046   040000 316003                    CANQ    16384,DU
         1 000047   000052 601000 1                  TNZ     s:2956
         1 000050   004000 316003                    CANQ    2048,DU
         1 000051   000055 600000 1                  TZE     s:2957

      673     2956    2           XSL_ERRNO = %E$INVAL; GOTO BAILOUT; END;

   2956  1 000052   000026 235007                    LDA     22,DL
         1 000053   000000 755000 xsym               STA     XSL_ERRNO
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:72   

   2956  1 000054   000036 710000 1                  TRA     BAILOUT

      674     2957    1       IF NOT SOCK.FLAGS.SOCKET THEN

   2957  1 000055   002000 316003                    CANQ    1024,DU
         1 000056   000070 601000 1                  TNZ     s:2959

      675     2958    1           CALL XSL$SOCKOPEN( SOCK, NAME, TNAMELEN) ALTRET( BAILOUT);

   2958  1 000057   200007 633500                    EPPR3   TNAMELEN,,AUTO
         1 000060   200014 453500                    STP3    TEMP+3,,AUTO
         1 000061   200005 236100                    LDQ     @NAME,,AUTO
         1 000062   200010 235100                    LDA     SOCK$,,AUTO
         1 000063   200012 757100                    STAQ    TEMP+1,,AUTO
         1 000064   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000065   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000066   000000 701000 xent               TSX1    XSL$SOCKOPEN
         1 000067   000036 702000 1                  TSX2    BAILOUT

      676     2959    2       IF SOCK.FLAGS.REUSEADDR THEN DO;

   2959  1 000070   200010 470500                    LDP0    SOCK$,,AUTO
         1 000071   000001 236100                    LDQ     1,,PR0
         1 000072   000400 316003                    CANQ    256,DU
         1 000073   000113 600000 1                  TZE     s:2963

      677     2960    2           TEMP = SOCK.SOCK#;

   2960  1 000074   000000 236100                    LDQ     0,,PR0
         1 000075   000777 376007                    ANQ     511,DL
         1 000076   200011 756100                    STQ     TEMP,,AUTO

      678     2961    2           CALL XSL$QSETSOCKOPT( RESULT, TEMP, %XSL_SOL_SOCKET, %XSL_SO_REUSEADDR,
              2961                    262144, 2);

   2961  1 000077   000002 237000 2                  LDAQ    2
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:73   
         1 000100   200016 757100                    STAQ    TEMP+5,,AUTO
         1 000101   000004 237000 2                  LDAQ    4
         1 000102   200014 757100                    STAQ    TEMP+3,,AUTO
         1 000103   200011 631500                    EPPR1   TEMP,,AUTO
         1 000104   200013 451500                    STP1    TEMP+2,,AUTO
         1 000105   200003 236100                    LDQ     @RESULT,,AUTO
         1 000106   200012 756100                    STQ     TEMP+1,,AUTO
         1 000107   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000110   000024 631400 xsym               EPPR1   B_VECTNIL+20
         1 000111   000000 701000 xent               TSX1    XSL$QSETSOCKOPT
         1 000112   000000 011000                    NOP     0

      679     2962    2           END;

      680     2963    1       XSL$BINDRQS = XSL_BINDRQS;

   2963  1 000113   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 000114   000100 100400                    MLR     fill='000'O
         1 000115   000000 000024 0                  ADSC9   XSL_BINDRQS              cn=0,n=20
         1 000116   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20

      681     2964    1       XSL$BINDRQS.NAMELEN = TNAMELEN;

   2964  1 000117   200007 720100                    LXL0    TNAMELEN,,AUTO
         1 000120   000000 440100                    SXL0    0,,PR0

      682     2965    1       CALL XSL$HTONADDR( XSL$BINDRQS.NAME, NAME);

   2965  1 000121   200005 236100                    LDQ     @NAME,,AUTO
         1 000122   200013 756100                    STQ     TEMP+2,,AUTO
         1 000123   000000 236000 xsym               LDQ     XSL_KEYBUF$
         1 000124   000001 036003                    ADLQ    1,DU
         1 000125   200012 756100                    STQ     TEMP+1,,AUTO
         1 000126   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000127   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000130   000000 701000 xent               TSX1    XSL$HTONADDR
         1 000131   000000 011000                    NOP     0
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:74   

      683     2966    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$BINDRQS)- 16+ TNAMELEN);

   2966  1 000132   200007 235100                    LDA     TNAMELEN,,AUTO
         1 000133   000004 035007                    ADLA    4,DL
         1 000134   200012 755100                    STA     TEMP+1,,AUTO
         1 000135   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000136   200015 450500                    STP0    TEMP+4,,AUTO
         1 000137   200010 236100                    LDQ     SOCK$,,AUTO
         1 000140   200014 756100                    STQ     TEMP+3,,AUTO
         1 000141   200014 630500                    EPPR0   TEMP+3,,AUTO
         1 000142   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000143   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 000144   000000 011000                    NOP     0

      684     2967    1       CALL XSL$CL_READ( SOCK);

   2967  1 000145   200010 630500                    EPPR0   SOCK$,,AUTO
         1 000146   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000147   000000 701000 xent               TSX1    XSL$CL_READ
         1 000150   000000 011000                    NOP     0

      685     2968    2       IF XSL$BINDRSP.RESULT < 0 THEN DO;

   2968  1 000151   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 000152   000000 720100                    LXL0    0,,PR0
         1 000153   000160 605000 1                  TPL     s:2972

      686     2969    2           XSL_ERRNO = XSL$BINDRSP.ERRNO;

   2969  1 000154   000001 236100                    LDQ     1,,PR0
         1 000155   000022 732000                    QRS     18
         1 000156   000000 756000 xsym               STQ     XSL_ERRNO

      687     2970    2           GOTO BAILOUT;

   2970  1 000157   000036 710000 1                  TRA     BAILOUT
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:75   

      688     2971    2           END;
      689     2972    1       SOCK.SOCKNAME = NAME;

   2972  1 000160   200005 471500                    LDP1    @NAME,,AUTO
         1 000161   200010 473500                    LDP3    SOCK$,,AUTO
         1 000162   000100 100500                    MLR     fill='000'O
         1 000163   100000 000024                    ADSC9   0,,PR1                   cn=0,n=20
         1 000164   300004 000024                    ADSC9   4,,PR3                   cn=0,n=20

      690     2973    1       SOCK.FLAGS.BIND = '1'B;

   2973  1 000165   004000 236003                    LDQ     2048,DU
         1 000166   300001 256100                    ORSQ    1,,PR3

      691     2974    1       SOCK.SOCKNAME = NAME;

   2974  1 000167   000100 100500                    MLR     fill='000'O
         1 000170   100000 000024                    ADSC9   0,,PR1                   cn=0,n=20
         1 000171   300004 000024                    ADSC9   4,,PR3                   cn=0,n=20

      692     2975    1       RESULT = %E$SUCCESS;

   2975  1 000172   200003 474500                    LDP4    @RESULT,,AUTO
         1 000173   400000 450100                    STZ     0,,PR4

      693     2976    1       RETURN;

   2976  1 000174   000000 702200 xent               TSX2  ! X66_ARET

XSL_BINDRQS
 Sect OctLoc
   0     000   000003 000000   000000 000000   000000 000000   000000 000000    ................
   0     004   000000 000000                                                    ....

(unnamed)
 Sect OctLoc
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:76   
   2     000   000000 006000   000000 000000   000017 006000   000004 006000    ................
   2     004   000027 006000   000006 006000                                    ........
      694     2977
      695     2978    1   END XSL$BIND;
      696     2979        %EOD;

PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:77   
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$BIND.
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:78   

 **** Variables and constants ****

  ****  Section 000 RoData XSL$BIND

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 XSL_BINDRQS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @NAME                      6-0-0/w PTR         r     1 @NAMELEN
     3-0-0/w PTR         r     1 @RESULT                    4-0-0/w PTR         r     1 @SOCK#
    *0-0-0/w STRC(180)   r     1 NAME                      *0-0-0/w SBIN        r     1 NAMELEN
    *0-0-0/w SBIN        r     1 RESULT                    *0-0-0/w SBIN        r     1 SOCK#
    10-0-0/w PTR         r     1 SOCK$                     11-0-0/w SBIN        r     1 TEMP
     7-0-0/w SBIN        r     1 TNAMELEN

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSL_ERRNO                  0-0-0/w PTR         r     1 XSL_KEYBUF$
     0-0-0/w PTR         r     1 XSL_SOCK$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 SOCK                       0-0-0/w STRC(180)   r     1 XSL$BINDRQS
     0-0-0/w STRC(54)    r     1 XSL$BINDRSP

PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:79   

   Procedure XSL$BIND requires 125 words for executable code.
   Procedure XSL$BIND requires 16 words of local(AUTO) storage.
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:80   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:81   
          MINI XREF LISTING

BAILOUT
      2951**LABEL    2938--CALLALT  2943--CALLALT  2956--GOTO     2958--CALLALT  2970--GOTO
COMMON
      2945**LABEL    2939--GOTO
NAME
      1135**DCL        98--PROC     2941--ENTRY    2958<>CALL     2965<>CALL     2972>>ASSIGN   2974>>ASSIGN
NAMELEN
      2931**DCL        98--PROC     2941--ENTRY    2945>>ASSIGN   2948>>IF
RESULT
      2933**DCL        98--PROC     2941--ENTRY    2951<<ASSIGN   2961<>CALL     2975<<ASSIGN
SOCK
      1482**DCL      2958<>CALL     2966<>CALL     2967<>CALL
SOCK.FLAGS.BIND
      1499**DCL      2955>>IF       2973<<ASSIGN
SOCK.FLAGS.CONNECT
      1496**DCL      2955>>IF
SOCK.FLAGS.REUSEADDR
      1502**DCL      2959>>IF
SOCK.FLAGS.SOCKET
      1500**DCL      2957>>IF
SOCK.NBACCEPT_SOCK$
      1604**DCL      1605--REDEF
SOCK.SOCK#
      1491**DCL      2960>>ASSIGN
SOCK.SOCKNAME
      1535**DCL      2972<<ASSIGN   2974<<ASSIGN
SOCK#
      2934**DCL        98--PROC     2938<>CALL     2941--ENTRY    2943<>CALL
SOCK$
      2935**DCL      1482--IMP-PTR  2954<<ASSIGN   2955>>IF       2955>>IF       2957>>IF       2958>>CALL
      2959>>IF       2960>>ASSIGN   2966>>CALL     2967>>CALL     2972>>ASSIGN   2973>>ASSIGN   2974>>ASSIGN
TEMP
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:82   
      2936**DCL      2960<<ASSIGN   2961<>CALL
TNAMELEN
      2932**DCL      2945<<ASSIGN   2946>>IF       2947<<ASSIGN   2958<>CALL     2964>>ASSIGN   2966>>CALL
XSL$BINDRQS
      2856**DCL      2963<<ASSIGN   2966--CALL
XSL$BINDRQS.NAME
      2883**DCL      2965<>CALL
XSL$BINDRQS.NAMELEN
      2863**DCL      2964<<ASSIGN
XSL$BINDRSP.ERRNO
      2916**DCL      2969>>ASSIGN
XSL$BINDRSP.RESULT
      2915**DCL      2968>>IF
XSL$CL_READ
      2919**DCL-ENT  2967--CALL
XSL$CL_WRITE
      2920**DCL-ENT  2966--CALL
XSL$DCBNPTR
      2923**DCL-ENT  2938--CALL
XSL$HTONADDR
      2921**DCL-ENT  2965--CALL
XSL$QSETSOCKOPT
      2924**DCL-ENT  2961--CALL
XSL$SOCKOPEN
      2925**DCL-ENT  2958--CALL
XSL$SOCKPTR
      2922**DCL-ENT  2943--CALL
XSL_BINDRQS
      2804**DCL      2963>>ASSIGN
XSL_ERRNO
      2927**DCL      2928--REDEF    2949<<ASSIGN   2956<<ASSIGN   2969<<ASSIGN
XSL_KEYBUF$
      2929**DCL      2856--IMP-PTR  2908--IMP-PTR  2963>>ASSIGN   2964>>ASSIGN   2965>>CALL     2968>>IF
      2969>>ASSIGN
XSL_SOCK$
      2928**DCL      2938<>CALL     2943<>CALL     2954>>ASSIGN
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:83   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XSL$BIND File=XSL$SOCKET1.:TCA2TSI                            SUN 11/16/97 14:30 Page:84   
              MINI UREF LISTING

XSL$BIND      98**PROC
XSL$QBIND    2941**ENTRY

PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:85   
      697        1        /*T***********************************************************/
      698        2        /*T*                                                         */
      699        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      700        4        /*T*                                                         */
      701        5        /*T***********************************************************/
      702        6        /*F* NAME: listen() and XSL$LISTEN  --  Listen for Incoming Connections
      703        7        ..::IT "Purpose:"
      704        8        .INL +4
      705        9        Listens for incoming connections to an existing socket.
      706       10        ..::IT "C Usage:"
      707       11        .INL 4
      708       12        .FIF
      709       13        status = listen( s, backlog );
      710       14        ..::IT "PL6 Usage:"
      711       15        .INL 4
      712       16        .FIF
      713       17        CALL XSL$LISTEN( status, s, backlog );
      714       18        ..::IT "Parameters:"
      715       19        .INL 4
      716       20        .FIF
      717       21        s           integer socket descriptor
      718       22
      719       23        backlog     integer pending connect queue length
      720       24        ..::IT "Result:"
      721       25        .INL 4
      722       26        .FIF
      723       27        status      integer error code
      724       28        ..::IT "Description:"
      725       29        The listen() function prepares the socket to wait until an incoming
      726       30        connection request is delivered by the network.  The wait itself is
      727       31        requested with the accept() function.
      728       32        .SPB
      729       33        The s parameter specifies the descriptor of the socket on which to listen.
      730       34        .SPB
      731       35        The backlog parameter specifies how many pending connection requests can
      732       36        be queued while the application is processing another connection request.
      733       37        .SPB
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:86   
      734       38        If the listen() function is successful, the status result contains ESUCCESS
      735       39        or E$SUCCESS.
      736       40        .SPB
      737       41        If the listen() function is unsuccessful, the status result contains
      738       42        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      739       43        to determine the specific error condition.  The XSL$LISTEN procedure
      740       44        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      741       45        to the listen() function.
      742       46        .SPB
      743       47        The listen() function applies only to "stream" sockets.
      744       48        .SPB
      745       49        If an incoming connection arrives when the listen queue is full, the
      746       50        initiator of the connection request receives the error ECONNREFUSED.
      747       51        ..::IT "Errors:"
      748       52        Following are the possible error conditions reported when the listen()
      749       53        function is unsuccessful.  Equates for the possible values can be found in
      750       54        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      751       55
      752       56        .FIF
      753       57
      754       58        C #define               PL6 %EQU
      755       59        ----------------------- -----------------------
      756       60        EBADF                   E$BADF
      757       61        .FIN
      758       62        The descriptor s is not appropriate to identify a socket.
      759       63        .FIF
      760       64
      761       65        EFAULT                  E$FAULT
      762       66        .FIN
      763       67        The backlog parameter is invalid (less than or equal to zero).
      764       68        .FIF
      765       69
      766       70        EINVAL                  E$INVAL
      767       71        .FIN
      768       72        Either bind() has not been issued on this socket, or listen() has
      769       73        already been issued on this socket.
      770       74        .FIF
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:87   
      771       75
      772       76        ENOTSOCK                E$NOTSOCK
      773       77        .FIN
      774       78        The descriptor s is no longer valid to identify a socket.
      775       79        .FIF
      776       80
      777       81        EOPNOTSUPP              E$OPNOTSUPP
      778       82        .FIN
      779       83        This is not a "stream" socket.
      780       84        .FIF
      781       85        */
      782       86        XSL$LISTEN: PROC( RESULT, SOCK#, BACKLOG) ALTRET;
      783       87        %INCLUDE XSL_SOCKET_E;
      784      345        %INCLUDE XSL_SOCKET_M;
      785     1106        %INCLUDE XSL_PERR_C;
      786     1161        %INCLUDE XSL_INTERNAL_M;
      787     1412            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      788     1556        %INCLUDE XSL_SOCKMSGS_E;
      789     1602        %INCLUDE XSL_SOCKMSGS_M;
      790     2735            %XSL$LISTENRQS( FPTN=XSL_LISTENRQS, STCLASS="CONSTANT SYMDEF");
      791     2761            %XSL$LISTENRQS( STCLASS="BASED( XSL_KEYBUF$)");
      792     2787            %XSL$LISTENRSP( STCLASS="BASED( XSL_KEYBUF$)");
      793     2814
      794     2815    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      795     2816    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      796     2817    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      797     2818    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      798     2819
      799     2820    1       DCL XSL_ERRNO SBIN SYMREF;
      800     2821    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      801     2822    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      802     2823
      803     2824    1       DCL BACKLOG SBIN;
      804     2825    1       DCL RESULT SBIN;
      805     2826    1       DCL SOCK# SBIN;
      806     2827    1       DCL SOCK$ PTR;
      807     2828
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:88   
      808     2829    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
      809     2830    1       GOTO COMMON;
      810     2831
      811     2832    1   XSL$QLISTEN: ENTRY( RESULT, SOCK#, BACKLOG) ALTRET;
      812     2833
      813     2834    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
      814     2835    1   COMMON:
      815     2836    2       IF BACKLOG <= 0 THEN DO;
      816     2837    2           XSL_ERRNO = %E$FAULT;
      817     2838    2   BAILOUT:
      818     2839    2           RESULT = %E$FAILURE;
      819     2840    2           ALTRETURN;
      820     2841    2           END;
      821     2842    1       SOCK$ = XSL_SOCK$;
      822     2843    2       IF NOT SOCK.FLAGS.BIND OR SOCK.FLAGS.LISTEN THEN DO;
      823     2844    2           XSL_ERRNO = %E$INVAL; GOTO BAILOUT; END;
      824     2845    1       XSL$LISTENRQS = XSL_LISTENRQS;
      825     2846    1       XSL$LISTENRQS.BACKLOG = BACKLOG;
      826     2847    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$LISTENRQS));
      827     2848    1       CALL XSL$CL_READ( SOCK);
      828     2849    2       IF XSL$LISTENRSP.RESULT < 0 THEN DO;
      829     2850    2           XSL_ERRNO = XSL$LISTENRSP.ERRNO;
      830     2851    2           GOTO BAILOUT;
      831     2852    2           END;
      832     2853    1       SOCK.FLAGS.LISTEN = '1'B;
      833     2854    1       RESULT = %E$SUCCESS;
      834     2855    1       RETURN;
      835     2856
      836     2857    1   END XSL$LISTEN;
      837     2858        %EOD;

PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:89   
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$LISTEN.

   Procedure XSL$LISTEN requires 68 words for executable code.
   Procedure XSL$LISTEN requires 10 words of local(AUTO) storage.

PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:90   

 Object Unit name= XSL$LISTEN                                 File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:31:29.52 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  XSL$LISTEN
    1   Proc  even  none    68    104  XSL$LISTEN
    2  RoData even  none     2      2  XSL$LISTEN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  XSL$LISTEN
     1     12          yes     yes      Std        3  XSL$QLISTEN

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSL_LISTENRQS
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:91   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSL$DCBNPTR
 yes     yes           Std       2 XSL$SOCKPTR
 yes     yes           Std       4 XSL$CL_WRITE
 yes     yes           Std       3 XSL$CL_READ
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_ERRNO                        r    XSL_KEYBUF$                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:92   


      697        1        /*T***********************************************************/
      698        2        /*T*                                                         */
      699        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      700        4        /*T*                                                         */
      701        5        /*T***********************************************************/
      702        6        /*F* NAME: listen() and XSL$LISTEN  --  Listen for Incoming Connections
      703        7        ..::IT "Purpose:"
      704        8        .INL +4
      705        9        Listens for incoming connections to an existing socket.
      706       10        ..::IT "C Usage:"
      707       11        .INL 4
      708       12        .FIF
      709       13        status = listen( s, backlog );
      710       14        ..::IT "PL6 Usage:"
      711       15        .INL 4
      712       16        .FIF
      713       17        CALL XSL$LISTEN( status, s, backlog );
      714       18        ..::IT "Parameters:"
      715       19        .INL 4
      716       20        .FIF
      717       21        s           integer socket descriptor
      718       22
      719       23        backlog     integer pending connect queue length
      720       24        ..::IT "Result:"
      721       25        .INL 4
      722       26        .FIF
      723       27        status      integer error code
      724       28        ..::IT "Description:"
      725       29        The listen() function prepares the socket to wait until an incoming
      726       30        connection request is delivered by the network.  The wait itself is
      727       31        requested with the accept() function.
      728       32        .SPB
      729       33        The s parameter specifies the descriptor of the socket on which to listen.
      730       34        .SPB
      731       35        The backlog parameter specifies how many pending connection requests can
      732       36        be queued while the application is processing another connection request.
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:93   
      733       37        .SPB
      734       38        If the listen() function is successful, the status result contains ESUCCESS
      735       39        or E$SUCCESS.
      736       40        .SPB
      737       41        If the listen() function is unsuccessful, the status result contains
      738       42        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      739       43        to determine the specific error condition.  The XSL$LISTEN procedure
      740       44        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      741       45        to the listen() function.
      742       46        .SPB
      743       47        The listen() function applies only to "stream" sockets.
      744       48        .SPB
      745       49        If an incoming connection arrives when the listen queue is full, the
      746       50        initiator of the connection request receives the error ECONNREFUSED.
      747       51        ..::IT "Errors:"
      748       52        Following are the possible error conditions reported when the listen()
      749       53        function is unsuccessful.  Equates for the possible values can be found in
      750       54        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      751       55
      752       56        .FIF
      753       57
      754       58        C #define               PL6 %EQU
      755       59        ----------------------- -----------------------
      756       60        EBADF                   E$BADF
      757       61        .FIN
      758       62        The descriptor s is not appropriate to identify a socket.
      759       63        .FIF
      760       64
      761       65        EFAULT                  E$FAULT
      762       66        .FIN
      763       67        The backlog parameter is invalid (less than or equal to zero).
      764       68        .FIF
      765       69
      766       70        EINVAL                  E$INVAL
      767       71        .FIN
      768       72        Either bind() has not been issued on this socket, or listen() has
      769       73        already been issued on this socket.
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:94   
      770       74        .FIF
      771       75
      772       76        ENOTSOCK                E$NOTSOCK
      773       77        .FIN
      774       78        The descriptor s is no longer valid to identify a socket.
      775       79        .FIF
      776       80
      777       81        EOPNOTSUPP              E$OPNOTSUPP
      778       82        .FIN
      779       83        This is not a "stream" socket.
      780       84        .FIF
      781       85        */
      782       86        XSL$LISTEN: PROC( RESULT, SOCK#, BACKLOG) ALTRET;

     86  1 000000   000000 700200 xent  XSL$LISTEN   TSX0  ! X66_AUTO_3
         1 000001   000012 000003                    ZERO    10,3

      783       87        %INCLUDE XSL_SOCKET_E;
      784      345        %INCLUDE XSL_SOCKET_M;
      785     1106        %INCLUDE XSL_PERR_C;
      786     1161        %INCLUDE XSL_INTERNAL_M;
      787     1412            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      788     1556        %INCLUDE XSL_SOCKMSGS_E;
      789     1602        %INCLUDE XSL_SOCKMSGS_M;
      790     2735            %XSL$LISTENRQS( FPTN=XSL_LISTENRQS, STCLASS="CONSTANT SYMDEF");
      791     2761            %XSL$LISTENRQS( STCLASS="BASED( XSL_KEYBUF$)");
      792     2787            %XSL$LISTENRSP( STCLASS="BASED( XSL_KEYBUF$)");
      793     2814
      794     2815    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      795     2816    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      796     2817    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      797     2818    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      798     2819
      799     2820    1       DCL XSL_ERRNO SBIN SYMREF;
      800     2821    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      801     2822    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      802     2823
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:95   
      803     2824    1       DCL BACKLOG SBIN;
      804     2825    1       DCL RESULT SBIN;
      805     2826    1       DCL SOCK# SBIN;
      806     2827    1       DCL SOCK$ PTR;
      807     2828
      808     2829    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   2829  1 000002   000000 236000 2                  LDQ     0
         1 000003   200004 235100                    LDA     @SOCK#,,AUTO
         1 000004   200010 757100                    STAQ    SOCK$+2,,AUTO
         1 000005   200010 630500                    EPPR0   SOCK$+2,,AUTO
         1 000006   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000007   000000 701000 xent               TSX1    XSL$DCBNPTR
         1 000010   000030 702000 1                  TSX2    BAILOUT

      809     2830    1       GOTO COMMON;

   2830  1 000011   000023 710000 1                  TRA     COMMON

      810     2831
      811     2832    1   XSL$QLISTEN: ENTRY( RESULT, SOCK#, BACKLOG) ALTRET;

   2832  1 000012   000000 700200 xent  XSL$QLISTEN  TSX0  ! X66_AUTO_3
         1 000013   000012 000003                    ZERO    10,3

      812     2833
      813     2834    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   2834  1 000014   000000 236000 2                  LDQ     0
         1 000015   200004 235100                    LDA     @SOCK#,,AUTO
         1 000016   200010 757100                    STAQ    SOCK$+2,,AUTO
         1 000017   200010 630500                    EPPR0   SOCK$+2,,AUTO
         1 000020   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000021   000000 701000 xent               TSX1    XSL$SOCKPTR
         1 000022   000030 702000 1                  TSX2    BAILOUT

      814     2835    1   COMMON:
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:96   
      815     2836    2       IF BACKLOG <= 0 THEN DO;

   2836  1 000023   200005 470500       COMMON       LDP0    @BACKLOG,,AUTO
         1 000024   000000 235100                    LDA     0,,PR0
         1 000025   000034 605400 1                  TPNZ    s:2842

      816     2837    2           XSL_ERRNO = %E$FAULT;

   2837  1 000026   000016 236007                    LDQ     14,DL
         1 000027   000000 756000 xsym               STQ     XSL_ERRNO

      817     2838    2   BAILOUT:
      818     2839    2           RESULT = %E$FAILURE;

   2839  1 000030   000001 335007       BAILOUT      LCA     1,DL
         1 000031   200003 470500                    LDP0    @RESULT,,AUTO
         1 000032   000000 755100                    STA     0,,PR0

      819     2840    2           ALTRETURN;

   2840  1 000033   000000 702200 xent               TSX2  ! X66_AALT

      820     2841    2           END;
      821     2842    1       SOCK$ = XSL_SOCK$;

   2842  1 000034   000000 236000 xsym               LDQ     XSL_ERRNO
         1 000035   200006 756100                    STQ     SOCK$,,AUTO

      822     2843    2       IF NOT SOCK.FLAGS.BIND OR SOCK.FLAGS.LISTEN THEN DO;

   2843  1 000036   200006 471500                    LDP1    SOCK$,,AUTO
         1 000037   100001 236100                    LDQ     1,,PR1
         1 000040   004000 316003                    CANQ    2048,DU
         1 000041   000044 600000 1                  TZE     s:2844
         1 000042   010000 316003                    CANQ    4096,DU
         1 000043   000047 600000 1                  TZE     s:2845

PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:97   
      823     2844    2           XSL_ERRNO = %E$INVAL; GOTO BAILOUT; END;

   2844  1 000044   000026 235007                    LDA     22,DL
         1 000045   000000 755000 xsym               STA     XSL_ERRNO

   2844  1 000046   000030 710000 1                  TRA     BAILOUT

      824     2845    1       XSL$LISTENRQS = XSL_LISTENRQS;

   2845  1 000047   000000 236000 0                  LDQ     XSL_LISTENRQS
         1 000050   000000 473400 xsym               LDP3    XSL_KEYBUF$
         1 000051   300000 756100                    STQ     0,,PR3

      825     2846    1       XSL$LISTENRQS.BACKLOG = BACKLOG;

   2846  1 000052   000000 720100                    LXL0    0,,PR0
         1 000053   300000 440100                    SXL0    0,,PR3

      826     2847    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$LISTENRQS));

   2847  1 000054   000001 236000 2                  LDQ     1
         1 000055   200006 235100                    LDA     SOCK$,,AUTO
         1 000056   200010 757100                    STAQ    SOCK$+2,,AUTO
         1 000057   200010 630500                    EPPR0   SOCK$+2,,AUTO
         1 000060   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000061   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 000062   000000 011000                    NOP     0

      827     2848    1       CALL XSL$CL_READ( SOCK);

   2848  1 000063   200006 630500                    EPPR0   SOCK$,,AUTO
         1 000064   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000065   000000 701000 xent               TSX1    XSL$CL_READ
         1 000066   000000 011000                    NOP     0

      828     2849    2       IF XSL$LISTENRSP.RESULT < 0 THEN DO;

PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:98   
   2849  1 000067   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 000070   000000 720100                    LXL0    0,,PR0
         1 000071   000076 605000 1                  TPL     s:2853

      829     2850    2           XSL_ERRNO = XSL$LISTENRSP.ERRNO;

   2850  1 000072   000001 236100                    LDQ     1,,PR0
         1 000073   000022 732000                    QRS     18
         1 000074   000000 756000 xsym               STQ     XSL_ERRNO

      830     2851    2           GOTO BAILOUT;

   2851  1 000075   000030 710000 1                  TRA     BAILOUT

      831     2852    2           END;
      832     2853    1       SOCK.FLAGS.LISTEN = '1'B;

   2853  1 000076   200006 471500                    LDP1    SOCK$,,AUTO
         1 000077   010000 236003                    LDQ     4096,DU
         1 000100   100001 256100                    ORSQ    1,,PR1

      833     2854    1       RESULT = %E$SUCCESS;

   2854  1 000101   200003 473500                    LDP3    @RESULT,,AUTO
         1 000102   300000 450100                    STZ     0,,PR3

      834     2855    1       RETURN;

   2855  1 000103   000000 702200 xent               TSX2  ! X66_ARET

XSL_LISTENRQS
 Sect OctLoc
   0     000   000013 000000                                                    ....

(unnamed)
 Sect OctLoc
   2     000   000000 006000   000006 006000                                    ........
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:99   
      835     2856
      836     2857    1   END XSL$LISTEN;
      837     2858        %EOD;

PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:100  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$LISTEN.
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:101  

 **** Variables and constants ****

  ****  Section 000 RoData XSL$LISTEN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 XSL_LISTENRQS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BACKLOG                   3-0-0/w PTR         r     1 @RESULT
     4-0-0/w PTR         r     1 @SOCK#                    *0-0-0/w SBIN        r     1 BACKLOG
    *0-0-0/w SBIN        r     1 RESULT                    *0-0-0/w SBIN        r     1 SOCK#
     6-0-0/w PTR         r     1 SOCK$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSL_ERRNO                  0-0-0/w PTR         r     1 XSL_KEYBUF$
     0-0-0/w PTR         r     1 XSL_SOCK$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 SOCK                       0-0-0/w STRC        r     1 XSL$LISTENRQS
     0-0-0/w STRC(54)    r     1 XSL$LISTENRSP

PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:102  

   Procedure XSL$LISTEN requires 68 words for executable code.
   Procedure XSL$LISTEN requires 10 words of local(AUTO) storage.
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:103  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:104  
          MINI XREF LISTING

BACKLOG
      2824**DCL        86--PROC     2832--ENTRY    2836>>IF       2846>>ASSIGN
BAILOUT
      2839**LABEL    2829--CALLALT  2834--CALLALT  2844--GOTO     2851--GOTO
COMMON
      2836**LABEL    2830--GOTO
RESULT
      2825**DCL        86--PROC     2832--ENTRY    2839<<ASSIGN   2854<<ASSIGN
SOCK
      1430**DCL      2847<>CALL     2848<>CALL
SOCK.FLAGS.BIND
      1447**DCL      2843>>IF
SOCK.FLAGS.LISTEN
      1446**DCL      2843>>IF       2853<<ASSIGN
SOCK.NBACCEPT_SOCK$
      1552**DCL      1553--REDEF
SOCK#
      2826**DCL        86--PROC     2829<>CALL     2832--ENTRY    2834<>CALL
SOCK$
      2827**DCL      1430--IMP-PTR  2842<<ASSIGN   2843>>IF       2843>>IF       2847>>CALL     2848>>CALL
      2853>>ASSIGN
XSL$CL_READ
      2815**DCL-ENT  2848--CALL
XSL$CL_WRITE
      2816**DCL-ENT  2847--CALL
XSL$DCBNPTR
      2818**DCL-ENT  2829--CALL
XSL$LISTENRQS
      2778**DCL      2845<<ASSIGN   2847--CALL
XSL$LISTENRQS.BACKLOG
      2785**DCL      2846<<ASSIGN
XSL$LISTENRSP.ERRNO
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:105  
      2812**DCL      2850>>ASSIGN
XSL$LISTENRSP.RESULT
      2811**DCL      2849>>IF
XSL$SOCKPTR
      2817**DCL-ENT  2834--CALL
XSL_ERRNO
      2820**DCL      2821--REDEF    2837<<ASSIGN   2844<<ASSIGN   2850<<ASSIGN
XSL_KEYBUF$
      2822**DCL      2778--IMP-PTR  2804--IMP-PTR  2845>>ASSIGN   2846>>ASSIGN   2849>>IF       2850>>ASSIGN
XSL_LISTENRQS
      2752**DCL      2845>>ASSIGN
XSL_SOCK$
      2821**DCL      2829<>CALL     2834<>CALL     2842>>ASSIGN
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:106  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #004=XSL$LISTEN File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:107  
              MINI UREF LISTING

XSL$LISTEN      86**PROC
XSL$QLISTEN    2832**ENTRY

PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:108  
      838        1        /*T***********************************************************/
      839        2        /*T*                                                         */
      840        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      841        4        /*T*                                                         */
      842        5        /*T***********************************************************/
      843        6        /*F* NAME: accept() and XSL$ACCEPT  --  Accept an Incoming Connection Request
      844        7        ..::IT "Purpose:"
      845        8        .INL +4
      846        9        Accepts an incoming connection request from another socket elsewhere
      847       10        in the network.
      848       11        ..::IT "C Usage:"
      849       12        .INL 4
      850       13        .FIF
      851       14        status = accept( s, &name, &namelen );
      852       15        ..::IT "PL6 Usage:"
      853       16        .INL 4
      854       17        .FIF
      855       18        CALL XSL$ACCEPT( status, s, name, namelen );
      856       19        ..::IT "Parameters:"
      857       20        .INL 4
      858       21        .FIF
      859       22        s           integer socket descriptor
      860       23
      861       24        name        sockaddr structure
      862       25
      863       26        namelen     integer size of name in characters
      864       27        ..::IT "Results:"
      865       28        .INL 4
      866       29        .FIF
      867       30        status      integer new socket descriptor or error code
      868       31
      869       32        name        sockaddr structure
      870       33
      871       34        namelen     integer number of significant characters in name
      872       35        ..::IT "Description:"
      873       36        The accept() function takes the first item on the queue of pending
      874       37        connection requests, allocates a new socket for it with the same
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:109  
      875       38        attributes as socket s, and returns the new descriptor.
      876       39        .SPB
      877       40        The s parameter specifies the descriptor of the socket on which to accept.
      878       41        .SPB
      879       42        The name parameter specifies an application-defined buffer to receive the
      880       43        address of the socket that initiated the connection.
      881       44        .SPB
      882       45        The namelen parameter specifies how large the name buffer is, expressed as
      883       46        the number of characters it can hold.
      884       47        .SPB
      885       48        If the accept() function is successful, the status result contains the
      886       49        descriptor of the new socket allocated for the new connection.  The
      887       50        descriptor is a small non-negative integer, equivalent to the DCBNUM of the
      888       51        DCB allocated for the new socket.  The name and namelen parameters are
      889       52        modified to identify the initiator of the connection request.
      890       53        .SPB
      891       54        If the accept() function is unsuccessful, the status result contains
      892       55        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      893       56        to determine the specific error condition.  The XSL$ACCEPT procedure
      894       57        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      895       58        to the accept() function.
      896       59        .SPB
      897       60        If no connection requests are pending when accept() is invoked, the action
      898       61        taken depends on the socket mode.  The mode of a socket is defined to be
      899       62        either "blocking" or "nonblocking".  If the socket is blocking (which is
      900       63        the default mode) the application is blocked (i.e., suspended) until an
      901       64        incoming connection request is received from the network.  If the
      902       65        socket is nonblocking, the condition is treated as an EWOULDBLOCK error.
      903       66        ..::IX "blocking"
      904       67        ..::IX "non-blocking"
      905       68        .SPB
      906       69        The mode of a socket can be changed with either fcntl() or ioctl().
      907       70        .SPB
      908       71        The accept() function applies only to "stream" sockets.
      909       72        ..::IT "Errors:"
      910       73        Following are the possible error conditions reported when the accept()
      911       74        function is unsuccessful.  Equates for the possible values can be found in
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:110  
      912       75        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      913       76
      914       77        .FIF
      915       78
      916       79        C #define               PL6 %EQU
      917       80        ----------------------- -----------------------
      918       81        EBADF                   E$BADF
      919       82        .FIN
      920       83        The descriptor s is inappropriate to identify a socket.
      921       84        .FIF
      922       85
      923       86        EINVAL                  E$INVAL
      924       87        .FIN
      925       88        The listen() function has not been invoked for this socket.
      926       89        .FIF
      927       90
      928       91        EMFILE                  E$MFILE
      929       92        .FIN
      930       93        M$GETDCB failed.  Unable to allocate DCB for new socket.
      931       94        .FIF
      932       95
      933       96        ENOTSOCK                E$NOTSOCK
      934       97        .FIN
      935       98        The descriptor s is no longer valid to identify a socket.
      936       99        .FIF
      937      100
      938      101        EOPNOTSUPP              E$OPNOTSUPP
      939      102        .FIN
      940      103        This is not a "stream" socket.
      941      104        .FIF
      942      105
      943      106        EWOULDBLOCK             E$WOULDBLOCK
      944      107        .FIN
      945      108        No connections are pending for this nonblocking socket.
      946      109        .FIF
      947      110        */
      948      111        XSL$ACCEPT: PROC( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:111  
      949      112        %INCLUDE XSL_SOCKET_E;
      950      370        %INCLUDE XSL_SOCKET_M;
      951     1131            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
      952     1171        %INCLUDE XSL_PERR_C;
      953     1226        %INCLUDE XSL_INTERNAL_M;
      954     1477            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      955     1621            %XSL$SOCKINFO( FPTN=NEWSOCK, STCLASS="BASED( NEWSOCK$)");
      956     1765        %INCLUDE XSL_SOCKMSGS_E;
      957     1811        %INCLUDE XSL_SOCKMSGS_M;
      958     2944            %XSL_REFMSGS;
      959     2947            %XSL$GIVEUPRQS( FPTN=XSL_GIVEUPRQS, STCLASS=SYMREF);
      960     2972            %XSL$GIVEUPRQS( STCLASS="BASED( XSL_KEYBUF$)");
      961     2997            %XSL$GIVEUPRSP( STCLASS="BASED( XSL_KEYBUF$)");
      962     3023            %XSL$ACCEPTRQS( FPTN=XSL_ACCEPTRQS, STCLASS=SYMREF);
      963     3049            %XSL$ACCEPTRQS( STCLASS="BASED( XSL_KEYBUF$)");
      964     3075            %XSL$ACCEPTRSP( STCLASS="BASED( XSL_KEYBUF$)");
      965     3129            %XSL$DETACHRQS( FPTN=XSL_DETACHRQS, STCLASS=SYMREF);
      966     3154            %XSL$DETACHRQS( STCLASS="BASED( XSL_KEYBUF$)");
      967     3179
      968     3180    1       DCL XSL$QCLOSE ENTRY(2) ALTRET;
      969     3181    1       DCL XSL$CL_OPEN ENTRY(3) ALTRET;
      970     3182    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      971     3183    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      972     3184    1       DCL XSL$GETSOCK ENTRY(2) ALTRET;
      973     3185    1       DCL XSL$NTOHADDR ENTRY(2);
      974     3186    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      975     3187    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      976     3188
      977     3189    1       DCL XSL_ERRNO SBIN SYMREF;
      978     3190    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      979     3191    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      980     3192
      981     3193    1       DCL LDCTX SBIN;
      982     3194    1       DCL NAMELEN SBIN;
      983     3195    1       DCL QUICK BIT(1) UNAL;
      984     3196    1       DCL RESULT SBIN;
      985     3197    1       DCL NEWSOCK# SBIN;
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:112  
      986     3198    1       DCL NEWSOCK$ PTR;
      987     3199    1       DCL SOCK# SBIN;
      988     3200    1       DCL SOCK$ PTR;
      989     3201
      990     3202    1       QUICK = '0'B;
      991     3203    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
      992     3204    1       GOTO COMMON;
      993     3205
      994     3206    1   XSL$QACCEPT: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
      995     3207
      996     3208    1       QUICK = '1'B;
      997     3209    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
      998     3210    1   COMMON:
      999     3211    1       NEWSOCK# = -1;
     1000     3212    1       SOCK$ = XSL_SOCK$;
     1001     3213    2       IF SOCK.FLAGS.ACCEPTING THEN DO;
     1002     3214    2           NEWSOCK$ = SOCK.NBACCEPT_SOCK$;
     1003     3215    2           LDCTX = SOCK.NBACCEPT_LDCTX;
     1004     3216    2           GOTO SENDIT;
     1005     3217    2           END;
     1006     3218    2       IF NOT SOCK.FLAGS.LISTEN THEN DO;
     1007     3219    2           XSL_ERRNO = %E$INVAL;
     1008     3220    2   BAILOUT:
     1009     3221    3           IF XSL_ERRNO = %E$WOULDBLOCK AND NOT SOCK.FLAGS.BLOCKING THEN DO;
     1010     3222    3               SOCK.NBACCEPT_SOCK$ = NEWSOCK$;
     1011     3223    3               SOCK.NBACCEPT_LDCTX = LDCTX;
     1012     3224    3               END;
     1013     3225    2           ELSE
     1014     3226    2               CALL XSL$QCLOSE( RESULT, NEWSOCK#);
     1015     3227    2           RESULT = %E$FAILURE;
     1016     3228    2           ALTRETURN;
     1017     3229    2           END;
     1018     3230    1       CALL XSL$GETSOCK( NEWSOCK#, XSL_SOCK$) ALTRET( BAILOUT);
     1019     3231    1       NEWSOCK$ = XSL_SOCK$;
     1020     3232    1       NEWSOCK.TYPE = %XSL_SOCK_STREAM;
     1021     3233    1       NEWSOCK.FLAGS.BLOCKING = '1'B;
     1022     3234    1       NEWSOCK.SERNUM = SOCK.SERNUM;  /* inherit network number */
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:113  
     1023     3235    1       NEWSOCK.SOCKNAME = SOCK.SOCKNAME;  /* inherit socket name */
     1024     3236    1       CALL XSL$CL_OPEN( NEWSOCK, NEWSOCK.SOCKNAME, 8) ALTRET( BAILOUTM1);
     1025     3237    1       XSL$GIVEUPRQS = XSL_GIVEUPRQS;
     1026     3238    1       CALL XSL$CL_WRITE( NEWSOCK, LENGTHC( XSL$GIVEUPRQS));
     1027     3239    1       NEWSOCK.FLAGS.MUSTREAD = '1'B;  /* force WAIT=YES read */
     1028     3240    1       CALL XSL$CL_READ( NEWSOCK) ALTRET( BAILOUT);
     1029     3241    1       LDCTX = XSL$GIVEUPRSP.XPSLDCTX;
     1030     3242    1       XSL$DETACHRQS = XSL_DETACHRQS;
     1031     3243    1       CALL XSL$CL_WRITE( NEWSOCK, LENGTHC( XSL$DETACHRQS));
     1032     3244    1   SENDIT:
     1033     3245    1       XSL$ACCEPTRQS = XSL_ACCEPTRQS;
     1034     3246    1       XSL$ACCEPTRQS.XPSLDCTX = LDCTX;
     1035     3247    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$ACCEPTRQS));
     1036     3248    1       CALL XSL$CL_READ( SOCK);
     1037     3249    2       IF XSL$ACCEPTRSP.RESULT < 0 THEN DO;
     1038     3250    2           XSL_ERRNO = XSL$ACCEPTRSP.ERRNO;
     1039     3251    2           GOTO BAILOUT;
     1040     3252    2           END;
     1041     3253    1       CALL XSL$NTOHADDR( NEWSOCK.PEERNAME, XSL$ACCEPTRSP.NAME);
     1042     3254    2       IF ADDR( NAME) ~= ADDR( NIL) AND ADDR( NAMELEN) ~= ADDR( NIL) THEN DO;
     1043     3255    2           IF NAMELEN <= 0 THEN EXIT;
     1044     3256    2           NAMELEN = XSL$ACCEPTRSP.NAMELEN;
     1045     3257    2           NAME = NEWSOCK.PEERNAME;
     1046     3258    2           END;
     1047     3259    1       SOCK.FLAGS.ACCEPT = '1'B;
     1048     3260    1       NEWSOCK.FLAGS.SOCKET = '1'B;
     1049     3261    1       NEWSOCK.FLAGS.BIND = '1'B;
     1050     3262    1       NEWSOCK.FLAGS.CONNECT = '1'B;
     1051     3263    1       NEWSOCK.FLAGS.SELWRITE = '1'B;
     1052     3264    1       IF QUICK THEN
     1053     3265    1           RESULT = NEWSOCK#;
     1054     3266    1       ELSE
     1055     3267    1           RESULT = NEWSOCK.DCB#;
     1056     3268    1       RETURN;
     1057     3269    1   BAILOUTM1:
     1058     3270    1       NEWSOCK.FLAGS.TERMINATED = '1'B;  /* release new socket */
     1059     3271    1       XSL_ERRNO = %E$FAILURE;  /* make appl get err code from TCB */
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:114  
     1060     3272    1       GOTO BAILOUT;
     1061     3273
     1062     3274    1   END XSL$ACCEPT;
     1063     3275        %EOD;

PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:115  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$ACCEPT.

   Procedure XSL$ACCEPT requires 206 words for executable code.
   Procedure XSL$ACCEPT requires 16 words of local(AUTO) storage.

PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:116  

 Object Unit name= XSL$ACCEPT                                 File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:31:55.96 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   206    316  XSL$ACCEPT
    1  RoData even  none     4      4  XSL$ACCEPT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        4  XSL$ACCEPT
     0     13          yes     yes      Std        4  XSL$QACCEPT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 XSL$MSGSDEFS
 yes     yes           Std       3 XSL$CL_OPEN
         yes           Std       2 XSL$NTOHADDR
 yes     yes           Std       2 XSL$DCBNPTR
 yes     yes           Std       2 XSL$SOCKPTR
 yes     yes           Std       4 XSL$CL_WRITE
 yes     yes           Std       2 XSL$QCLOSE
 yes     yes           Std       2 XSL$GETSOCK
 yes     yes           Std       3 XSL$CL_READ
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:117  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_GIVEUPRQS                         XSL_ACCEPTRQS                         XSL_DETACHRQS
     XSL_ERRNO                        r    XSL_KEYBUF$                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:118  


      838        1        /*T***********************************************************/
      839        2        /*T*                                                         */
      840        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      841        4        /*T*                                                         */
      842        5        /*T***********************************************************/
      843        6        /*F* NAME: accept() and XSL$ACCEPT  --  Accept an Incoming Connection Request
      844        7        ..::IT "Purpose:"
      845        8        .INL +4
      846        9        Accepts an incoming connection request from another socket elsewhere
      847       10        in the network.
      848       11        ..::IT "C Usage:"
      849       12        .INL 4
      850       13        .FIF
      851       14        status = accept( s, &name, &namelen );
      852       15        ..::IT "PL6 Usage:"
      853       16        .INL 4
      854       17        .FIF
      855       18        CALL XSL$ACCEPT( status, s, name, namelen );
      856       19        ..::IT "Parameters:"
      857       20        .INL 4
      858       21        .FIF
      859       22        s           integer socket descriptor
      860       23
      861       24        name        sockaddr structure
      862       25
      863       26        namelen     integer size of name in characters
      864       27        ..::IT "Results:"
      865       28        .INL 4
      866       29        .FIF
      867       30        status      integer new socket descriptor or error code
      868       31
      869       32        name        sockaddr structure
      870       33
      871       34        namelen     integer number of significant characters in name
      872       35        ..::IT "Description:"
      873       36        The accept() function takes the first item on the queue of pending
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:119  
      874       37        connection requests, allocates a new socket for it with the same
      875       38        attributes as socket s, and returns the new descriptor.
      876       39        .SPB
      877       40        The s parameter specifies the descriptor of the socket on which to accept.
      878       41        .SPB
      879       42        The name parameter specifies an application-defined buffer to receive the
      880       43        address of the socket that initiated the connection.
      881       44        .SPB
      882       45        The namelen parameter specifies how large the name buffer is, expressed as
      883       46        the number of characters it can hold.
      884       47        .SPB
      885       48        If the accept() function is successful, the status result contains the
      886       49        descriptor of the new socket allocated for the new connection.  The
      887       50        descriptor is a small non-negative integer, equivalent to the DCBNUM of the
      888       51        DCB allocated for the new socket.  The name and namelen parameters are
      889       52        modified to identify the initiator of the connection request.
      890       53        .SPB
      891       54        If the accept() function is unsuccessful, the status result contains
      892       55        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
      893       56        to determine the specific error condition.  The XSL$ACCEPT procedure
      894       57        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
      895       58        to the accept() function.
      896       59        .SPB
      897       60        If no connection requests are pending when accept() is invoked, the action
      898       61        taken depends on the socket mode.  The mode of a socket is defined to be
      899       62        either "blocking" or "nonblocking".  If the socket is blocking (which is
      900       63        the default mode) the application is blocked (i.e., suspended) until an
      901       64        incoming connection request is received from the network.  If the
      902       65        socket is nonblocking, the condition is treated as an EWOULDBLOCK error.
      903       66        ..::IX "blocking"
      904       67        ..::IX "non-blocking"
      905       68        .SPB
      906       69        The mode of a socket can be changed with either fcntl() or ioctl().
      907       70        .SPB
      908       71        The accept() function applies only to "stream" sockets.
      909       72        ..::IT "Errors:"
      910       73        Following are the possible error conditions reported when the accept()
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:120  
      911       74        function is unsuccessful.  Equates for the possible values can be found in
      912       75        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
      913       76
      914       77        .FIF
      915       78
      916       79        C #define               PL6 %EQU
      917       80        ----------------------- -----------------------
      918       81        EBADF                   E$BADF
      919       82        .FIN
      920       83        The descriptor s is inappropriate to identify a socket.
      921       84        .FIF
      922       85
      923       86        EINVAL                  E$INVAL
      924       87        .FIN
      925       88        The listen() function has not been invoked for this socket.
      926       89        .FIF
      927       90
      928       91        EMFILE                  E$MFILE
      929       92        .FIN
      930       93        M$GETDCB failed.  Unable to allocate DCB for new socket.
      931       94        .FIF
      932       95
      933       96        ENOTSOCK                E$NOTSOCK
      934       97        .FIN
      935       98        The descriptor s is no longer valid to identify a socket.
      936       99        .FIF
      937      100
      938      101        EOPNOTSUPP              E$OPNOTSUPP
      939      102        .FIN
      940      103        This is not a "stream" socket.
      941      104        .FIF
      942      105
      943      106        EWOULDBLOCK             E$WOULDBLOCK
      944      107        .FIN
      945      108        No connections are pending for this nonblocking socket.
      946      109        .FIF
      947      110        */
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:121  
      948      111        XSL$ACCEPT: PROC( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

    111  0 000000   000000 700200 xent  XSL$ACCEPT   TSX0  ! X66_AUTO_4
         0 000001   000020 000004                    ZERO    16,4

      949      112        %INCLUDE XSL_SOCKET_E;
      950      370        %INCLUDE XSL_SOCKET_M;
      951     1131            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
      952     1171        %INCLUDE XSL_PERR_C;
      953     1226        %INCLUDE XSL_INTERNAL_M;
      954     1477            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
      955     1621            %XSL$SOCKINFO( FPTN=NEWSOCK, STCLASS="BASED( NEWSOCK$)");
      956     1765        %INCLUDE XSL_SOCKMSGS_E;
      957     1811        %INCLUDE XSL_SOCKMSGS_M;
      958     2944            %XSL_REFMSGS;
      959     2947            %XSL$GIVEUPRQS( FPTN=XSL_GIVEUPRQS, STCLASS=SYMREF);
      960     2972            %XSL$GIVEUPRQS( STCLASS="BASED( XSL_KEYBUF$)");
      961     2997            %XSL$GIVEUPRSP( STCLASS="BASED( XSL_KEYBUF$)");
      962     3023            %XSL$ACCEPTRQS( FPTN=XSL_ACCEPTRQS, STCLASS=SYMREF);
      963     3049            %XSL$ACCEPTRQS( STCLASS="BASED( XSL_KEYBUF$)");
      964     3075            %XSL$ACCEPTRSP( STCLASS="BASED( XSL_KEYBUF$)");
      965     3129            %XSL$DETACHRQS( FPTN=XSL_DETACHRQS, STCLASS=SYMREF);
      966     3154            %XSL$DETACHRQS( STCLASS="BASED( XSL_KEYBUF$)");
      967     3179
      968     3180    1       DCL XSL$QCLOSE ENTRY(2) ALTRET;
      969     3181    1       DCL XSL$CL_OPEN ENTRY(3) ALTRET;
      970     3182    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
      971     3183    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
      972     3184    1       DCL XSL$GETSOCK ENTRY(2) ALTRET;
      973     3185    1       DCL XSL$NTOHADDR ENTRY(2);
      974     3186    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
      975     3187    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
      976     3188
      977     3189    1       DCL XSL_ERRNO SBIN SYMREF;
      978     3190    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
      979     3191    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
      980     3192
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:122  
      981     3193    1       DCL LDCTX SBIN;
      982     3194    1       DCL NAMELEN SBIN;
      983     3195    1       DCL QUICK BIT(1) UNAL;
      984     3196    1       DCL RESULT SBIN;
      985     3197    1       DCL NEWSOCK# SBIN;
      986     3198    1       DCL NEWSOCK$ PTR;
      987     3199    1       DCL SOCK# SBIN;
      988     3200    1       DCL SOCK$ PTR;
      989     3201
      990     3202    1       QUICK = '0'B;

   3202  0 000002   200010 450100                    STZ     QUICK,,AUTO

      991     3203    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   3203  0 000003   000000 236000 1                  LDQ     0
         0 000004   200004 235100                    LDA     @SOCK#,,AUTO
         0 000005   200014 757100                    STAQ    SOCK$+1,,AUTO
         0 000006   200014 630500                    EPPR0   SOCK$+1,,AUTO
         0 000007   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000010   000000 701000 xent               TSX1    XSL$DCBNPTR
         0 000011   000047 702000 0                  TSX2    BAILOUT

      992     3204    1       GOTO COMMON;

   3204  0 000012   000026 710000 0                  TRA     COMMON

      993     3205
      994     3206    1   XSL$QACCEPT: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

   3206  0 000013   000000 700200 xent  XSL$QACCEPT  TSX0  ! X66_AUTO_4
         0 000014   000020 000004                    ZERO    16,4

      995     3207
      996     3208    1       QUICK = '1'B;

   3208  0 000015   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:123  
         0 000016   200010 756100                    STQ     QUICK,,AUTO

      997     3209    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   3209  0 000017   000000 236000 1                  LDQ     0
         0 000020   200004 235100                    LDA     @SOCK#,,AUTO
         0 000021   200014 757100                    STAQ    SOCK$+1,,AUTO
         0 000022   200014 630500                    EPPR0   SOCK$+1,,AUTO
         0 000023   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000024   000000 701000 xent               TSX1    XSL$SOCKPTR
         0 000025   000047 702000 0                  TSX2    BAILOUT

      998     3210    1   COMMON:
      999     3211    1       NEWSOCK# = -1;

   3211  0 000026   000001 335007       COMMON       LCA     1,DL
         0 000027   200011 755100                    STA     NEWSOCK#,,AUTO

     1000     3212    1       SOCK$ = XSL_SOCK$;

   3212  0 000030   000000 236000 xsym               LDQ     XSL_ERRNO
         0 000031   200013 756100                    STQ     SOCK$,,AUTO

     1001     3213    2       IF SOCK.FLAGS.ACCEPTING THEN DO;

   3213  0 000032   200013 470500                    LDP0    SOCK$,,AUTO
         0 000033   000001 236100                    LDQ     1,,PR0
         0 000034   000100 316003                    CANQ    64,DU
         0 000035   000043 600000 0                  TZE     s:3218

     1002     3214    2           NEWSOCK$ = SOCK.NBACCEPT_SOCK$;

   3214  0 000036   000022 236100                    LDQ     18,,PR0
         0 000037   200012 756100                    STQ     NEWSOCK$,,AUTO

     1003     3215    2           LDCTX = SOCK.NBACCEPT_LDCTX;

PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:124  
   3215  0 000040   000023 235100                    LDA     19,,PR0
         0 000041   200007 755100                    STA     LDCTX,,AUTO

     1004     3216    2           GOTO SENDIT;

   3216  0 000042   000175 710000 0                  TRA     SENDIT

     1005     3217    2           END;
     1006     3218    2       IF NOT SOCK.FLAGS.LISTEN THEN DO;

   3218  0 000043   010000 316003                    CANQ    4096,DU
         0 000044   000076 601000 0                  TNZ     s:3230

     1007     3219    2           XSL_ERRNO = %E$INVAL;

   3219  0 000045   000026 235007                    LDA     22,DL
         0 000046   000000 755000 xsym               STA     XSL_ERRNO

     1008     3220    2   BAILOUT:
     1009     3221    3           IF XSL_ERRNO = %E$WOULDBLOCK AND NOT SOCK.FLAGS.BLOCKING THEN DO;

   3221  0 000047   000000 235000 xsym  BAILOUT      LDA     XSL_ERRNO
         0 000050   000136 115007                    CMPA    94,DL
         0 000051   000062 601000 0                  TNZ     s:3226
         0 000052   200013 470500                    LDP0    SOCK$,,AUTO
         0 000053   000001 430100                    FSZN    1,,PR0
         0 000054   000062 604000 0                  TMI     s:3226

     1010     3222    3               SOCK.NBACCEPT_SOCK$ = NEWSOCK$;

   3222  0 000055   200012 236100                    LDQ     NEWSOCK$,,AUTO
         0 000056   000022 756100                    STQ     18,,PR0

     1011     3223    3               SOCK.NBACCEPT_LDCTX = LDCTX;

   3223  0 000057   200007 235100                    LDA     LDCTX,,AUTO
         0 000060   000023 755100                    STA     19,,PR0
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:125  

     1012     3224    3               END;

   3224  0 000061   000072 710000 0                  TRA     s:3227

     1013     3225    2           ELSE
     1014     3226    2               CALL XSL$QCLOSE( RESULT, NEWSOCK#);

   3226  0 000062   200011 630500                    EPPR0   NEWSOCK#,,AUTO
         0 000063   200015 450500                    STP0    SOCK$+2,,AUTO
         0 000064   200003 236100                    LDQ     @RESULT,,AUTO
         0 000065   200014 756100                    STQ     SOCK$+1,,AUTO
         0 000066   200014 630500                    EPPR0   SOCK$+1,,AUTO
         0 000067   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000070   000000 701000 xent               TSX1    XSL$QCLOSE
         0 000071   000000 011000                    NOP     0

     1015     3227    2           RESULT = %E$FAILURE;

   3227  0 000072   000001 335007                    LCA     1,DL
         0 000073   200003 470500                    LDP0    @RESULT,,AUTO
         0 000074   000000 755100                    STA     0,,PR0

     1016     3228    2           ALTRETURN;

   3228  0 000075   000000 702200 xent               TSX2  ! X66_AALT

     1017     3229    2           END;
     1018     3230    1       CALL XSL$GETSOCK( NEWSOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   3230  0 000076   000000 236000 1                  LDQ     0
         0 000077   200015 756100                    STQ     SOCK$+2,,AUTO
         0 000100   200011 631500                    EPPR1   NEWSOCK#,,AUTO
         0 000101   200014 451500                    STP1    SOCK$+1,,AUTO
         0 000102   200014 630500                    EPPR0   SOCK$+1,,AUTO
         0 000103   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000104   000000 701000 xent               TSX1    XSL$GETSOCK
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:126  
         0 000105   000047 702000 0                  TSX2    BAILOUT

     1019     3231    1       NEWSOCK$ = XSL_SOCK$;

   3231  0 000106   000000 236000 xsym               LDQ     XSL_ERRNO
         0 000107   200012 756100                    STQ     NEWSOCK$,,AUTO

     1020     3232    1       NEWSOCK.TYPE = %XSL_SOCK_STREAM;

   3232  0 000110   200012 470500                    LDP0    NEWSOCK$,,AUTO
         0 000111   000001 236003                    LDQ     1,DU
         0 000112   000000 552120                    STBQ    0,'20'O,PR0

     1021     3233    1       NEWSOCK.FLAGS.BLOCKING = '1'B;

   3233  0 000113   001000 236003                    LDQ     512,DU
         0 000114   000001 256100                    ORSQ    1,,PR0

     1022     3234    1       NEWSOCK.SERNUM = SOCK.SERNUM;  /* inherit network number */

   3234  0 000115   200013 471500                    LDP1    SOCK$,,AUTO
         0 000116   040100 100500                    MLR     fill='040'O
         0 000117   100002 000006                    ADSC9   2,,PR1                   cn=0,n=6
         0 000120   000002 000006                    ADSC9   2,,PR0                   cn=0,n=6

     1023     3235    1       NEWSOCK.SOCKNAME = SOCK.SOCKNAME;  /* inherit socket name */

   3235  0 000121   000100 100500                    MLR     fill='000'O
         0 000122   100004 000024                    ADSC9   4,,PR1                   cn=0,n=20
         0 000123   000004 000024                    ADSC9   4,,PR0                   cn=0,n=20

     1024     3236    1       CALL XSL$CL_OPEN( NEWSOCK, NEWSOCK.SOCKNAME, 8) ALTRET( BAILOUTM1);

   3236  0 000124   000001 236000 1                  LDQ     1
         0 000125   200016 756100                    STQ     SOCK$+3,,AUTO
         0 000126   200012 236100                    LDQ     NEWSOCK$,,AUTO
         0 000127   000004 036003                    ADLQ    4,DU
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:127  
         0 000130   200012 235100                    LDA     NEWSOCK$,,AUTO
         0 000131   200014 757100                    STAQ    SOCK$+1,,AUTO
         0 000132   200014 630500                    EPPR0   SOCK$+1,,AUTO
         0 000133   000021 631400 xsym               EPPR1   B_VECTNIL+17
         0 000134   000000 701000 xent               TSX1    XSL$CL_OPEN
         0 000135   000310 702000 0                  TSX2    BAILOUTM1

     1025     3237    1       XSL$GIVEUPRQS = XSL_GIVEUPRQS;

   3237  0 000136   000000 220000 xsym               LDX0    XSL_GIVEUPRQS
         0 000137   000000 470400 xsym               LDP0    XSL_KEYBUF$
         0 000140   000000 740100                    STX0    0,,PR0

     1026     3238    1       CALL XSL$CL_WRITE( NEWSOCK, LENGTHC( XSL$GIVEUPRQS));

   3238  0 000141   000002 236000 1                  LDQ     2
         0 000142   200012 235100                    LDA     NEWSOCK$,,AUTO
         0 000143   200014 757100                    STAQ    SOCK$+1,,AUTO
         0 000144   200014 630500                    EPPR0   SOCK$+1,,AUTO
         0 000145   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000146   000000 701000 xent               TSX1    XSL$CL_WRITE
         0 000147   000000 011000                    NOP     0

     1027     3239    1       NEWSOCK.FLAGS.MUSTREAD = '1'B;  /* force WAIT=YES read */

   3239  0 000150   200012 470500                    LDP0    NEWSOCK$,,AUTO
         0 000151   000001 236003                    LDQ     1,DU
         0 000152   000001 256100                    ORSQ    1,,PR0

     1028     3240    1       CALL XSL$CL_READ( NEWSOCK) ALTRET( BAILOUT);

   3240  0 000153   200012 630500                    EPPR0   NEWSOCK$,,AUTO
         0 000154   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000155   000000 701000 xent               TSX1    XSL$CL_READ
         0 000156   000047 702000 0                  TSX2    BAILOUT

     1029     3241    1       LDCTX = XSL$GIVEUPRSP.XPSLDCTX;
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:128  

   3241  0 000157   000000 470400 xsym               LDP0    XSL_KEYBUF$
         0 000160   000000 236100                    LDQ     0,,PR0
         0 000161   000022 736000                    QLS     18
         0 000162   000022 732000                    QRS     18
         0 000163   200007 756100                    STQ     LDCTX,,AUTO

     1030     3242    1       XSL$DETACHRQS = XSL_DETACHRQS;

   3242  0 000164   000000 220000 xsym               LDX0    XSL_DETACHRQS
         0 000165   000000 740100                    STX0    0,,PR0

     1031     3243    1       CALL XSL$CL_WRITE( NEWSOCK, LENGTHC( XSL$DETACHRQS));

   3243  0 000166   000002 236000 1                  LDQ     2
         0 000167   200012 235100                    LDA     NEWSOCK$,,AUTO
         0 000170   200014 757100                    STAQ    SOCK$+1,,AUTO
         0 000171   200014 630500                    EPPR0   SOCK$+1,,AUTO
         0 000172   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000173   000000 701000 xent               TSX1    XSL$CL_WRITE
         0 000174   000000 011000                    NOP     0

     1032     3244    1   SENDIT:
     1033     3245    1       XSL$ACCEPTRQS = XSL_ACCEPTRQS;

   3245  0 000175   000000 236000 xsym  SENDIT       LDQ     XSL_ACCEPTRQS
         0 000176   000000 470400 xsym               LDP0    XSL_KEYBUF$
         0 000177   000000 756100                    STQ     0,,PR0

     1034     3246    1       XSL$ACCEPTRQS.XPSLDCTX = LDCTX;

   3246  0 000200   200007 720100                    LXL0    LDCTX,,AUTO
         0 000201   000000 440100                    SXL0    0,,PR0

     1035     3247    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$ACCEPTRQS));

   3247  0 000202   000003 236000 1                  LDQ     3
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:129  
         0 000203   200013 235100                    LDA     SOCK$,,AUTO
         0 000204   200014 757100                    STAQ    SOCK$+1,,AUTO
         0 000205   200014 630500                    EPPR0   SOCK$+1,,AUTO
         0 000206   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000207   000000 701000 xent               TSX1    XSL$CL_WRITE
         0 000210   000000 011000                    NOP     0

     1036     3248    1       CALL XSL$CL_READ( SOCK);

   3248  0 000211   200013 630500                    EPPR0   SOCK$,,AUTO
         0 000212   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000213   000000 701000 xent               TSX1    XSL$CL_READ
         0 000214   000000 011000                    NOP     0

     1037     3249    2       IF XSL$ACCEPTRSP.RESULT < 0 THEN DO;

   3249  0 000215   000000 470400 xsym               LDP0    XSL_KEYBUF$
         0 000216   000000 720100                    LXL0    0,,PR0
         0 000217   000224 605000 0                  TPL     s:3253

     1038     3250    2           XSL_ERRNO = XSL$ACCEPTRSP.ERRNO;

   3250  0 000220   000001 236100                    LDQ     1,,PR0
         0 000221   000022 732000                    QRS     18
         0 000222   000000 756000 xsym               STQ     XSL_ERRNO

     1039     3251    2           GOTO BAILOUT;

   3251  0 000223   000047 710000 0                  TRA     BAILOUT

     1040     3252    2           END;
     1041     3253    1       CALL XSL$NTOHADDR( NEWSOCK.PEERNAME, XSL$ACCEPTRSP.NAME);

   3253  0 000224   000000 236000 xsym               LDQ     XSL_KEYBUF$
         0 000225   000002 036003                    ADLQ    2,DU
         0 000226   200015 756100                    STQ     SOCK$+2,,AUTO
         0 000227   200012 236100                    LDQ     NEWSOCK$,,AUTO
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:130  
         0 000230   000011 036003                    ADLQ    9,DU
         0 000231   200014 756100                    STQ     SOCK$+1,,AUTO
         0 000232   200014 630500                    EPPR0   SOCK$+1,,AUTO
         0 000233   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000234   000000 701000 xent               TSX1    XSL$NTOHADDR
         0 000235   000000 011000                    NOP     0

     1042     3254    2       IF ADDR( NAME) ~= ADDR( NIL) AND ADDR( NAMELEN) ~= ADDR( NIL) THEN DO;

   3254  0 000236   200005 236100                    LDQ     @NAME,,AUTO
         0 000237   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000240   000261 600000 0                  TZE     s:3259
         0 000241   200006 236100                    LDQ     @NAMELEN,,AUTO
         0 000242   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000243   000261 600000 0                  TZE     s:3259

     1043     3255    2           IF NAMELEN <= 0 THEN EXIT;

   3255  0 000244   200006 470500                    LDP0    @NAMELEN,,AUTO
         0 000245   000000 235100                    LDA     0,,PR0
         0 000246   000261 604400 0                  TMOZ    s:3259

     1044     3256    2           NAMELEN = XSL$ACCEPTRSP.NAMELEN;

   3256  0 000247   000000 471400 xsym               LDP1    XSL_KEYBUF$
         0 000250   100001 236100                    LDQ     1,,PR1
         0 000251   000022 736000                    QLS     18
         0 000252   000022 732000                    QRS     18
         0 000253   000000 756100                    STQ     0,,PR0

     1045     3257    2           NAME = NEWSOCK.PEERNAME;

   3257  0 000254   200012 473500                    LDP3    NEWSOCK$,,AUTO
         0 000255   200005 474500                    LDP4    @NAME,,AUTO
         0 000256   000100 100500                    MLR     fill='000'O
         0 000257   300011 000024                    ADSC9   9,,PR3                   cn=0,n=20
         0 000260   400000 000024                    ADSC9   0,,PR4                   cn=0,n=20
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:131  

     1046     3258    2           END;

     1047     3259    1       SOCK.FLAGS.ACCEPT = '1'B;

   3259  0 000261   200013 470500                    LDP0    SOCK$,,AUTO
         0 000262   020000 236003                    LDQ     8192,DU
         0 000263   000001 256100                    ORSQ    1,,PR0

     1048     3260    1       NEWSOCK.FLAGS.SOCKET = '1'B;

   3260  0 000264   200012 471500                    LDP1    NEWSOCK$,,AUTO
         0 000265   002000 236003                    LDQ     1024,DU
         0 000266   100001 256100                    ORSQ    1,,PR1

     1049     3261    1       NEWSOCK.FLAGS.BIND = '1'B;

   3261  0 000267   004000 236003                    LDQ     2048,DU
         0 000270   100001 256100                    ORSQ    1,,PR1

     1050     3262    1       NEWSOCK.FLAGS.CONNECT = '1'B;

   3262  0 000271   040000 236003                    LDQ     16384,DU
         0 000272   100001 256100                    ORSQ    1,,PR1

     1051     3263    1       NEWSOCK.FLAGS.SELWRITE = '1'B;

   3263  0 000273   000020 236003                    LDQ     16,DU
         0 000274   100001 256100                    ORSQ    1,,PR1

     1052     3264    1       IF QUICK THEN

   3264  0 000275   200010 234100                    SZN     QUICK,,AUTO
         0 000276   000303 605000 0                  TPL     s:3267

     1053     3265    1           RESULT = NEWSOCK#;

PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:132  
   3265  0 000277   200003 473500                    LDP3    @RESULT,,AUTO
         0 000300   200011 235100                    LDA     NEWSOCK#,,AUTO
         0 000301   300000 755100                    STA     0,,PR3
         0 000302   000307 710000 0                  TRA     s:3268

     1054     3266    1       ELSE
     1055     3267    1           RESULT = NEWSOCK.DCB#;

   3267  0 000303   100003 236100                    LDQ     3,,PR1
         0 000304   777777 376007                    ANQ     -1,DL
         0 000305   200003 473500                    LDP3    @RESULT,,AUTO
         0 000306   300000 756100                    STQ     0,,PR3

     1056     3268    1       RETURN;

   3268  0 000307   000000 702200 xent               TSX2  ! X66_ARET

     1057     3269    1   BAILOUTM1:
     1058     3270    1       NEWSOCK.FLAGS.TERMINATED = '1'B;  /* release new socket */

   3270  0 000310   200012 470500       BAILOUTM1    LDP0    NEWSOCK$,,AUTO
         0 000311   400000 236003                    LDQ     -131072,DU
         0 000312   000001 256100                    ORSQ    1,,PR0

     1059     3271    1       XSL_ERRNO = %E$FAILURE;  /* make appl get err code from TCB */

   3271  0 000313   000001 335007                    LCA     1,DL
         0 000314   000000 755000 xsym               STA     XSL_ERRNO

     1060     3272    1       GOTO BAILOUT;

   3272  0 000315   000047 710000 0                  TRA     BAILOUT

(unnamed)
 Sect OctLoc
   1     000   000000 006000   000012 006000   000004 006000   000006 006000    ................
     1061     3273
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:133  
     1062     3274    1   END XSL$ACCEPT;
     1063     3275        %EOD;

PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:134  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$ACCEPT.
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:135  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @NAME                      6-0-0/w PTR         r     1 @NAMELEN
     3-0-0/w PTR         r     1 @RESULT                    4-0-0/w PTR         r     1 @SOCK#
     7-0-0/w SBIN        r     1 LDCTX                     *0-0-0/w STRC(180)   r     1 NAME
    *0-0-0/w SBIN        r     1 NAMELEN                   11-0-0/w SBIN        r     1 NEWSOCK#
    12-0-0/w PTR         r     1 NEWSOCK$                  10-0-0/b BIT         r     1 QUICK
    *0-0-0/w SBIN        r     1 RESULT                    *0-0-0/w SBIN        r     1 SOCK#
    13-0-0/w PTR         r     1 SOCK$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 XSL_ACCEPTRQS              0-0-0/w STRC(18)    r     1 XSL_DETACHRQS
     0-0-0/w SBIN        r     1 XSL_ERRNO                  0-0-0/w STRC(18)    r     1 XSL_GIVEUPRQS
     0-0-0/w PTR         r     1 XSL_KEYBUF$                0-0-0/w PTR         r     1 XSL_SOCK$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 NEWSOCK                    0-0-0/w STRC(720)   r     1 SOCK
     0-0-0/w STRC        r     1 XSL$ACCEPTRQS              0-0-0/w STRC(216)   r     1 XSL$ACCEPTRSP
     0-0-0/w STRC(18)    r     1 XSL$DETACHRQS              0-0-0/w STRC(18)    r     1 XSL$GIVEUPRQS
     0-0-0/w STRC        r     1 XSL$GIVEUPRSP


   Procedure XSL$ACCEPT requires 206 words for executable code.
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:136  
   Procedure XSL$ACCEPT requires 16 words of local(AUTO) storage.
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:137  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:138  
          MINI XREF LISTING

BAILOUT
      3221**LABEL    3203--CALLALT  3209--CALLALT  3230--CALLALT  3240--CALLALT  3251--GOTO     3272--GOTO
BAILOUTM1
      3270**LABEL    3236--CALLALT
COMMON
      3211**LABEL    3204--GOTO
LDCTX
      3193**DCL      3215<<ASSIGN   3223>>ASSIGN   3241<<ASSIGN   3246>>ASSIGN
NAME
      1148**DCL       111--PROC     3206--ENTRY    3254--IF       3257<<ASSIGN
NAMELEN
      3194**DCL       111--PROC     3206--ENTRY    3254--IF       3255>>IF       3256<<ASSIGN
NEWSOCK
      1639**DCL      3236<>CALL     3238<>CALL     3240<>CALL     3243<>CALL
NEWSOCK.DCB#
      1672**DCL      3267>>ASSIGN
NEWSOCK.FLAGS.BIND
      1656**DCL      3261<<ASSIGN
NEWSOCK.FLAGS.BLOCKING
      1658**DCL      3233<<ASSIGN
NEWSOCK.FLAGS.CONNECT
      1653**DCL      3262<<ASSIGN
NEWSOCK.FLAGS.MUSTREAD
      1667**DCL      3239<<ASSIGN
NEWSOCK.FLAGS.SELWRITE
      1663**DCL      3263<<ASSIGN
NEWSOCK.FLAGS.SOCKET
      1657**DCL      3260<<ASSIGN
NEWSOCK.FLAGS.TERMINATED
      1650**DCL      3270<<ASSIGN
NEWSOCK.NBACCEPT_SOCK$
      1761**DCL      1762--REDEF
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:139  
NEWSOCK.PEERNAME
      1732**DCL      3253<>CALL     3257>>ASSIGN
NEWSOCK.SERNUM
      1671**DCL      3234<<ASSIGN
NEWSOCK.SOCKNAME
      1692**DCL      3235<<ASSIGN   3236<>CALL
NEWSOCK.TYPE
      1646**DCL      3232<<ASSIGN
NEWSOCK#
      3197**DCL      3211<<ASSIGN   3226<>CALL     3230<>CALL     3265>>ASSIGN
NEWSOCK$
      3198**DCL      1639--IMP-PTR  3214<<ASSIGN   3222>>ASSIGN   3231<<ASSIGN   3232>>ASSIGN   3233>>ASSIGN
      3234>>ASSIGN   3235>>ASSIGN   3236>>CALL     3236>>CALL     3238>>CALL     3239>>ASSIGN   3240>>CALL
      3243>>CALL     3253>>CALL     3257>>ASSIGN   3260>>ASSIGN   3261>>ASSIGN   3262>>ASSIGN   3263>>ASSIGN
      3267>>ASSIGN   3270>>ASSIGN
QUICK
      3195**DCL      3202<<ASSIGN   3208<<ASSIGN   3264>>IF
RESULT
      3196**DCL       111--PROC     3206--ENTRY    3226<>CALL     3227<<ASSIGN   3265<<ASSIGN   3267<<ASSIGN
SENDIT
      3245**LABEL    3216--GOTO
SOCK
      1495**DCL      3247<>CALL     3248<>CALL
SOCK.FLAGS.ACCEPT
      1510**DCL      3259<<ASSIGN
SOCK.FLAGS.ACCEPTING
      1517**DCL      3213>>IF
SOCK.FLAGS.BLOCKING
      1514**DCL      3221>>IF
SOCK.FLAGS.LISTEN
      1511**DCL      3218>>IF
SOCK.NBACCEPT_LDCTX
      1619**DCL      3215>>ASSIGN   3223<<ASSIGN
SOCK.NBACCEPT_SOCK$
      1617**DCL      1618--REDEF    3214>>ASSIGN   3222<<ASSIGN
SOCK.SERNUM
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:140  
      1527**DCL      3234>>ASSIGN
SOCK.SOCKNAME
      1548**DCL      3235>>ASSIGN
SOCK#
      3199**DCL       111--PROC     3203<>CALL     3206--ENTRY    3209<>CALL
SOCK$
      3200**DCL      1495--IMP-PTR  3212<<ASSIGN   3213>>IF       3214>>ASSIGN   3215>>ASSIGN   3218>>IF
      3221>>IF       3222>>ASSIGN   3223>>ASSIGN   3234>>ASSIGN   3235>>ASSIGN   3247>>CALL     3248>>CALL
      3259>>ASSIGN
XSL$ACCEPTRQS
      3066**DCL      3245<<ASSIGN   3247--CALL
XSL$ACCEPTRQS.XPSLDCTX
      3073**DCL      3246<<ASSIGN
XSL$ACCEPTRSP.ERRNO
      3100**DCL      3250>>ASSIGN
XSL$ACCEPTRSP.NAME
      3121**DCL      3253<>CALL
XSL$ACCEPTRSP.NAMELEN
      3101**DCL      3256>>ASSIGN
XSL$ACCEPTRSP.RESULT
      3099**DCL      3249>>IF
XSL$CL_OPEN
      3181**DCL-ENT  3236--CALL
XSL$CL_READ
      3182**DCL-ENT  3240--CALL     3248--CALL
XSL$CL_WRITE
      3183**DCL-ENT  3238--CALL     3243--CALL     3247--CALL
XSL$DCBNPTR
      3187**DCL-ENT  3203--CALL
XSL$DETACHRQS
      3171**DCL      3242<<ASSIGN   3243--CALL
XSL$GETSOCK
      3184**DCL-ENT  3230--CALL
XSL$GIVEUPRQS
      2989**DCL      3237<<ASSIGN   3238--CALL
XSL$GIVEUPRSP.XPSLDCTX
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:141  
      3021**DCL      3241>>ASSIGN
XSL$NTOHADDR
      3185**DCL-ENT  3253--CALL
XSL$QCLOSE
      3180**DCL-ENT  3226--CALL
XSL$SOCKPTR
      3186**DCL-ENT  3209--CALL
XSL_ACCEPTRQS
      3040**DCL      3245>>ASSIGN
XSL_DETACHRQS
      3146**DCL      3242>>ASSIGN
XSL_ERRNO
      3189**DCL      3190--REDEF    3219<<ASSIGN   3221>>IF       3250<<ASSIGN   3271<<ASSIGN
XSL_GIVEUPRQS
      2964**DCL      3237>>ASSIGN
XSL_KEYBUF$
      3191**DCL      2989--IMP-PTR  3014--IMP-PTR  3066--IMP-PTR  3092--IMP-PTR  3171--IMP-PTR  3237>>ASSIGN
      3241>>ASSIGN   3242>>ASSIGN   3245>>ASSIGN   3246>>ASSIGN   3249>>IF       3250>>ASSIGN   3253>>CALL
      3256>>ASSIGN
XSL_SOCK$
      3190**DCL      3203<>CALL     3209<>CALL     3212>>ASSIGN   3230<>CALL     3231>>ASSIGN
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:142  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #005=XSL$ACCEPT File=XSL$SOCKET1.:TCA2TSI                          SUN 11/16/97 14:31 Page:143  
              MINI UREF LISTING

XSL$ACCEPT     111**PROC
XSL$MSGSDEFS    2945**DCL-ENT
XSL$QACCEPT    3206**ENTRY

PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:144  
     1064        1        /*T***********************************************************/
     1065        2        /*T*                                                         */
     1066        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1067        4        /*T*                                                         */
     1068        5        /*T***********************************************************/
     1069        6        /*F* NAME: connect() and XSL$CONNECT  --  Initiate Connection Request
     1070        7        ..::IT "Purpose:"
     1071        8        .INL +4
     1072        9        Initiates a connection request to another socket elsewhere in the network.
     1073       10        ..::IT "C Usage:"
     1074       11        .INL 4
     1075       12        .FIF
     1076       13        status = connect( s, &name, namelen );
     1077       14        ..::IT "PL6 Usage:"
     1078       15        .INL 4
     1079       16        .FIF
     1080       17        CALL XSL$CONNECT( status, s, name, namelen );
     1081       18        ..::IT "Parameters:"
     1082       19        .INL 4
     1083       20        .FIF
     1084       21        s           integer socket descriptor
     1085       22
     1086       23        name        sockaddr structure
     1087       24
     1088       25        namelen     integer size of name in characters
     1089       26        ..::IT "Result:"
     1090       27        .INL 4
     1091       28        .FIF
     1092       29        status      integer error code
     1093       30        ..::IT "Description:"
     1094       31        The connect() function, when invoked on a "stream" socket, initiates a
     1095       32        connection request to the remote socket named by name and namelen.  When
     1096       33        invoked on a "datagram" socket, connect() specifies the remote socket
     1097       34        that datagrams are to be sent to and received from.
     1098       35        ..::IX "stream socket"
     1099       36        ..::IX "datagram socket"
     1100       37        .SPB
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:145  
     1101       38        The s parameter specifies the descriptor of the socket on which to
     1102       39        initiate the connection.
     1103       40        .SPB
     1104       41        The name parameter specifies the address of the remote socket.  In C
     1105       42        source, it is a sockaddr structure.  In PL6 source, it is an XSL$SOCKADDR
     1106       43        structure.
     1107       44        .SPB
     1108       45        The namelen parameter specifies the number of significant characters in name.
     1109       46        .SPB
     1110       47        If the connect() function is successful, the status result contains
     1111       48        ESUCCESS or E$SUCCESS.
     1112       49        .SPB
     1113       50        If the connect() function is unsuccessful, the status result contains
     1114       51        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
     1115       52        to determine the specific error condition.  The XSL$CONNECT procedure
     1116       53        additionally ALTRETURNs if it is unsuccessful; otherwise it is identical
     1117       54        to the connect() function.
     1118       55        .SPB
     1119       56        The application need not wait while a connection attempt is made.  If
     1120       57        the mode of the socket has been set to "nonblocking" by either fcntl()
     1121       58        or ioctl(), connect() initiates the connection attempt and reports
     1122       59        the error EINPROGRESS.  Subsequent invocations of connect() report the
     1123       60        error EALREADY as long as the connection is still being attempted.
     1124       61        Eventually either ESUCCESS or EFAILURE is reported as above.
     1125       62        ..::IT "Errors:"
     1126       63        Following are the possible error conditions reported when the connect()
     1127       64        function is unsuccessful.  Equates for the possible values can be found in
     1128       65        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
     1129       66
     1130       67        .FIF
     1131       68
     1132       69        C #define               PL6 %EQU
     1133       70        ----------------------- -----------------------
     1134       71        EADDRINUSE              E$ADDRINUSE
     1135       72        .FIN
     1136       73        The specified address is already in use.
     1137       74        .FIF
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:146  
     1138       75
     1139       76        EADDRNOTAVAIL           E$ADDRNOTAVAIL
     1140       77        .FIN
     1141       78        The specified address is not available.
     1142       79        .FIF
     1143       80
     1144       81        EAFNOSUPPORT            E$AFNOSUPPORT
     1145       82        .FIN
     1146       83        Addresses in the specified family cannot be used with this socket.
     1147       84        .FIF
     1148       85
     1149       86        EALREADY                E$ALREADY
     1150       87        .FIN
     1151       88        A connection attempt is already in progress on this socket.
     1152       89        .FIF
     1153       90
     1154       91        EBADF                   E$BADF
     1155       92        .FIN
     1156       93        The descriptor s is not appropriate to identify a socket.
     1157       94        .FIF
     1158       95
     1159       96        ECONNREFUSED            E$CONNREFUSED
     1160       97        .FIN
     1161       98        Connection request refused at remote end.
     1162       99        .FIF
     1163      100
     1164      101        EFAULT                  E$FAULT
     1165      102        .FIN
     1166      103        The namelen parameter is invalid (less than or equal to zero).
     1167      104        .FIF
     1168      105
     1169      106        EINPROGRESS             E$INPROGRESS
     1170      107        .FIN
     1171      108        A connection attempt is now in progress on this socket.
     1172      109        .FIF
     1173      110
     1174      111        EINVAL                  E$INVAL
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:147  
     1175      112        .FIN
     1176      113        Either listen() or connect() has already been invoked on this socket.
     1177      114        .FIF
     1178      115
     1179      116        EISCONN                 E$ISCONN
     1180      117        The socket is already connected.
     1181      118        .FIN
     1182      119        .FIF
     1183      120
     1184      121        ENETUNREACH             E$NETUNREACH
     1185      122        .FIN
     1186      123        The specified network is unreachable.
     1187      124        .FIF
     1188      125
     1189      126        ENOTSOCK                E$NOTSOCK
     1190      127        .FIN
     1191      128        The descriptor s is no longer valid to identify a socket.
     1192      129        .FIF
     1193      130
     1194      131        ETIMEDOUT               E$TIMEDOUT
     1195      132        .FIN
     1196      133        Connection establishment timed out.
     1197      134        .FIF
     1198      135
     1199      136        EWOULDBLOCK             E$WOULDBLOCK
     1200      137        .FIN
     1201      138        The connection cannot be immediately completed.
     1202      139        .FIF
     1203      140        */
     1204      141        XSL$CONNECT: PROC( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
     1205      142        %INCLUDE XSL_SOCKET_E;
     1206      400        %INCLUDE XSL_SOCKET_M;
     1207     1161            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
     1208     1201        %INCLUDE XSL_PERR_C;
     1209     1256        %INCLUDE XSL_INTERNAL_M;
     1210     1507            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
     1211     1651        %INCLUDE XSL_SOCKMSGS_E;
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:148  
     1212     1697        %INCLUDE XSL_SOCKMSGS_M;
     1213     2830            %XSL$CONNECTRQS( FPTN=XSL_CONNECTRQS, STCLASS="CONSTANT SYMDEF");
     1214     2882            %XSL$CONNECTRQS( STCLASS="BASED( XSL_KEYBUF$)");
     1215     2934            %XSL$CONNECTRSP( STCLASS="BASED( XSL_KEYBUF$)");
     1216     2988
     1217     2989    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
     1218     2990    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
     1219     2991    1       DCL XSL$HTONADDR ENTRY(2);
     1220     2992    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
     1221     2993    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
     1222     2994    1       DCL XSL$QSETSOCKOPT ENTRY(6) ALTRET;
     1223     2995    1       DCL XSL$SOCKOPEN ENTRY(3) ALTRET;
     1224     2996
     1225     2997    1       DCL XSL_ERRNO SBIN SYMREF;
     1226     2998    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
     1227     2999    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
     1228     3000
     1229     3001    1       DCL NAMELEN SBIN;
     1230     3002    1       DCL TNAMELEN SBIN;
     1231     3003    1       DCL RESULT SBIN;
     1232     3004    1       DCL SOCK# SBIN;
     1233     3005    1       DCL SOCK$ PTR;
     1234     3006    1       DCL TEMP SBIN;
     1235     3007
     1236     3008    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
     1237     3009    1       GOTO COMMON;
     1238     3010
     1239     3011    1   XSL$QCONNECT: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;
     1240     3012
     1241     3013    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET (BAILOUT);
     1242     3014    1   COMMON:
     1243     3015    1       TNAMELEN = NAMELEN;
     1244     3016    1       IF TNAMELEN > 16 THEN
     1245     3017    1           TNAMELEN = 16;
     1246     3018    2       IF NAMELEN <= 0 THEN DO;
     1247     3019    2           XSL_ERRNO = %E$FAULT;
     1248     3020    2   BAILOUT:
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:149  
     1249     3021    2           RESULT = %E$FAILURE;
     1250     3022    2           ALTRETURN;
     1251     3023    2           END;
     1252     3024    1       SOCK$ = XSL_SOCK$;
     1253     3025    1       IF SOCK.FLAGS.CONNECTING THEN
     1254     3026    1           GOTO SENDIT;
     1255     3027    2       IF SOCK.FLAGS.LISTEN OR SOCK.FLAGS.CONNECT THEN DO;
     1256     3028    2           XSL_ERRNO = %E$INVAL; GOTO BAILOUT; END;
     1257     3029    1       IF NOT SOCK.FLAGS.SOCKET THEN
     1258     3030                /* Only get a socket if we haven't done a bind already. */
     1259     3031    1           CALL XSL$SOCKOPEN( SOCK, NAME, TNAMELEN) ALTRET( BAILOUT);
     1260     3032    2       IF SOCK.FLAGS.REUSEADDR THEN DO;
     1261     3033    2           TEMP = SOCK.SOCK#;
     1262     3034    2           CALL XSL$QSETSOCKOPT( RESULT, TEMP, %XSL_SOL_SOCKET, %XSL_SO_REUSEADDR,
              3034                    262144, 2);
     1263     3035    2           END;
     1264     3036    1   SENDIT:
     1265     3037    1       XSL$CONNECTRQS = XSL_CONNECTRQS;
     1266     3038    1       XSL$CONNECTRQS.NAMELEN = TNAMELEN;
     1267     3039    1       CALL XSL$HTONADDR( XSL$CONNECTRQS.NAME, NAME);
     1268     3040    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$CONNECTRQS)-16+TNAMELEN);
     1269     3041    1       CALL XSL$CL_READ( SOCK);
     1270     3042    2       IF XSL$CONNECTRSP.RESULT < 0 THEN DO;
     1271     3043    2           XSL_ERRNO = XSL$CONNECTRSP.ERRNO;
     1272     3044    2           GOTO BAILOUT;
     1273     3045    2           END;
     1274     3046    2       IF SOCK.TYPE ~= %XSL_SOCK_DGRAM THEN DO;
     1275     3047    2           SOCK.FLAGS.CONNECT = '1'B;
     1276     3048    2           SOCK.FLAGS.SELWRITE = '1'B;
     1277     3049    2           END;
     1278     3050    1       SOCK.PEERNAME = NAME;
     1279     3051    1       RESULT = %E$SUCCESS;
     1280     3052    1       RETURN;
     1281     3053
     1282     3054    1   END XSL$CONNECT;
     1283     3055        %EOD;

PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:150  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$CONNECT.

   Procedure XSL$CONNECT requires 130 words for executable code.
   Procedure XSL$CONNECT requires 16 words of local(AUTO) storage.

PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:151  

 Object Unit name= XSL$CONNECT                                File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:32:36.88 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      5      5  XSL$CONNECT
    1   Proc  even  none   130    202  XSL$CONNECT
    2  RoData even  none     6      6  XSL$CONNECT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  XSL$CONNECT
     1     12          yes     yes      Std        4  XSL$QCONNECT

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSL_CONNECTRQS
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:152  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSL$DCBNPTR
 yes     yes           Std       2 XSL$SOCKPTR
 yes     yes           Std       3 XSL$SOCKOPEN
 yes     yes           Std       4 XSL$CL_WRITE
 yes     yes           Std       6 XSL$QSETSOCKOPT
 yes     yes           Std       3 XSL$CL_READ
         yes           Std       2 XSL$HTONADDR
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_ERRNO                        r    XSL_KEYBUF$                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:153  


     1064        1        /*T***********************************************************/
     1065        2        /*T*                                                         */
     1066        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1067        4        /*T*                                                         */
     1068        5        /*T***********************************************************/
     1069        6        /*F* NAME: connect() and XSL$CONNECT  --  Initiate Connection Request
     1070        7        ..::IT "Purpose:"
     1071        8        .INL +4
     1072        9        Initiates a connection request to another socket elsewhere in the network.
     1073       10        ..::IT "C Usage:"
     1074       11        .INL 4
     1075       12        .FIF
     1076       13        status = connect( s, &name, namelen );
     1077       14        ..::IT "PL6 Usage:"
     1078       15        .INL 4
     1079       16        .FIF
     1080       17        CALL XSL$CONNECT( status, s, name, namelen );
     1081       18        ..::IT "Parameters:"
     1082       19        .INL 4
     1083       20        .FIF
     1084       21        s           integer socket descriptor
     1085       22
     1086       23        name        sockaddr structure
     1087       24
     1088       25        namelen     integer size of name in characters
     1089       26        ..::IT "Result:"
     1090       27        .INL 4
     1091       28        .FIF
     1092       29        status      integer error code
     1093       30        ..::IT "Description:"
     1094       31        The connect() function, when invoked on a "stream" socket, initiates a
     1095       32        connection request to the remote socket named by name and namelen.  When
     1096       33        invoked on a "datagram" socket, connect() specifies the remote socket
     1097       34        that datagrams are to be sent to and received from.
     1098       35        ..::IX "stream socket"
     1099       36        ..::IX "datagram socket"
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:154  
     1100       37        .SPB
     1101       38        The s parameter specifies the descriptor of the socket on which to
     1102       39        initiate the connection.
     1103       40        .SPB
     1104       41        The name parameter specifies the address of the remote socket.  In C
     1105       42        source, it is a sockaddr structure.  In PL6 source, it is an XSL$SOCKADDR
     1106       43        structure.
     1107       44        .SPB
     1108       45        The namelen parameter specifies the number of significant characters in name.
     1109       46        .SPB
     1110       47        If the connect() function is successful, the status result contains
     1111       48        ESUCCESS or E$SUCCESS.
     1112       49        .SPB
     1113       50        If the connect() function is unsuccessful, the status result contains
     1114       51        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
     1115       52        to determine the specific error condition.  The XSL$CONNECT procedure
     1116       53        additionally ALTRETURNs if it is unsuccessful; otherwise it is identical
     1117       54        to the connect() function.
     1118       55        .SPB
     1119       56        The application need not wait while a connection attempt is made.  If
     1120       57        the mode of the socket has been set to "nonblocking" by either fcntl()
     1121       58        or ioctl(), connect() initiates the connection attempt and reports
     1122       59        the error EINPROGRESS.  Subsequent invocations of connect() report the
     1123       60        error EALREADY as long as the connection is still being attempted.
     1124       61        Eventually either ESUCCESS or EFAILURE is reported as above.
     1125       62        ..::IT "Errors:"
     1126       63        Following are the possible error conditions reported when the connect()
     1127       64        function is unsuccessful.  Equates for the possible values can be found in
     1128       65        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
     1129       66
     1130       67        .FIF
     1131       68
     1132       69        C #define               PL6 %EQU
     1133       70        ----------------------- -----------------------
     1134       71        EADDRINUSE              E$ADDRINUSE
     1135       72        .FIN
     1136       73        The specified address is already in use.
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:155  
     1137       74        .FIF
     1138       75
     1139       76        EADDRNOTAVAIL           E$ADDRNOTAVAIL
     1140       77        .FIN
     1141       78        The specified address is not available.
     1142       79        .FIF
     1143       80
     1144       81        EAFNOSUPPORT            E$AFNOSUPPORT
     1145       82        .FIN
     1146       83        Addresses in the specified family cannot be used with this socket.
     1147       84        .FIF
     1148       85
     1149       86        EALREADY                E$ALREADY
     1150       87        .FIN
     1151       88        A connection attempt is already in progress on this socket.
     1152       89        .FIF
     1153       90
     1154       91        EBADF                   E$BADF
     1155       92        .FIN
     1156       93        The descriptor s is not appropriate to identify a socket.
     1157       94        .FIF
     1158       95
     1159       96        ECONNREFUSED            E$CONNREFUSED
     1160       97        .FIN
     1161       98        Connection request refused at remote end.
     1162       99        .FIF
     1163      100
     1164      101        EFAULT                  E$FAULT
     1165      102        .FIN
     1166      103        The namelen parameter is invalid (less than or equal to zero).
     1167      104        .FIF
     1168      105
     1169      106        EINPROGRESS             E$INPROGRESS
     1170      107        .FIN
     1171      108        A connection attempt is now in progress on this socket.
     1172      109        .FIF
     1173      110
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:156  
     1174      111        EINVAL                  E$INVAL
     1175      112        .FIN
     1176      113        Either listen() or connect() has already been invoked on this socket.
     1177      114        .FIF
     1178      115
     1179      116        EISCONN                 E$ISCONN
     1180      117        The socket is already connected.
     1181      118        .FIN
     1182      119        .FIF
     1183      120
     1184      121        ENETUNREACH             E$NETUNREACH
     1185      122        .FIN
     1186      123        The specified network is unreachable.
     1187      124        .FIF
     1188      125
     1189      126        ENOTSOCK                E$NOTSOCK
     1190      127        .FIN
     1191      128        The descriptor s is no longer valid to identify a socket.
     1192      129        .FIF
     1193      130
     1194      131        ETIMEDOUT               E$TIMEDOUT
     1195      132        .FIN
     1196      133        Connection establishment timed out.
     1197      134        .FIF
     1198      135
     1199      136        EWOULDBLOCK             E$WOULDBLOCK
     1200      137        .FIN
     1201      138        The connection cannot be immediately completed.
     1202      139        .FIF
     1203      140        */
     1204      141        XSL$CONNECT: PROC( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

    141  1 000000   000000 700200 xent  XSL$CONNECT  TSX0  ! X66_AUTO_4
         1 000001   000020 000004                    ZERO    16,4

     1205      142        %INCLUDE XSL_SOCKET_E;
     1206      400        %INCLUDE XSL_SOCKET_M;
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:157  
     1207     1161            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
     1208     1201        %INCLUDE XSL_PERR_C;
     1209     1256        %INCLUDE XSL_INTERNAL_M;
     1210     1507            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
     1211     1651        %INCLUDE XSL_SOCKMSGS_E;
     1212     1697        %INCLUDE XSL_SOCKMSGS_M;
     1213     2830            %XSL$CONNECTRQS( FPTN=XSL_CONNECTRQS, STCLASS="CONSTANT SYMDEF");
     1214     2882            %XSL$CONNECTRQS( STCLASS="BASED( XSL_KEYBUF$)");
     1215     2934            %XSL$CONNECTRSP( STCLASS="BASED( XSL_KEYBUF$)");
     1216     2988
     1217     2989    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
     1218     2990    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
     1219     2991    1       DCL XSL$HTONADDR ENTRY(2);
     1220     2992    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
     1221     2993    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
     1222     2994    1       DCL XSL$QSETSOCKOPT ENTRY(6) ALTRET;
     1223     2995    1       DCL XSL$SOCKOPEN ENTRY(3) ALTRET;
     1224     2996
     1225     2997    1       DCL XSL_ERRNO SBIN SYMREF;
     1226     2998    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
     1227     2999    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
     1228     3000
     1229     3001    1       DCL NAMELEN SBIN;
     1230     3002    1       DCL TNAMELEN SBIN;
     1231     3003    1       DCL RESULT SBIN;
     1232     3004    1       DCL SOCK# SBIN;
     1233     3005    1       DCL SOCK$ PTR;
     1234     3006    1       DCL TEMP SBIN;
     1235     3007
     1236     3008    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   3008  1 000002   000000 236000 2                  LDQ     0
         1 000003   200004 235100                    LDA     @SOCK#,,AUTO
         1 000004   200012 757100                    STAQ    TEMP+1,,AUTO
         1 000005   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000006   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000007   000000 701000 xent               TSX1    XSL$DCBNPTR
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:158  
         1 000010   000036 702000 1                  TSX2    BAILOUT

     1237     3009    1       GOTO COMMON;

   3009  1 000011   000023 710000 1                  TRA     COMMON

     1238     3010
     1239     3011    1   XSL$QCONNECT: ENTRY( RESULT, SOCK#, NAME, NAMELEN) ALTRET;

   3011  1 000012   000000 700200 xent  XSL$QCONNECT TSX0  ! X66_AUTO_4
         1 000013   000020 000004                    ZERO    16,4

     1240     3012
     1241     3013    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET (BAILOUT);

   3013  1 000014   000000 236000 2                  LDQ     0
         1 000015   200004 235100                    LDA     @SOCK#,,AUTO
         1 000016   200012 757100                    STAQ    TEMP+1,,AUTO
         1 000017   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000020   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000021   000000 701000 xent               TSX1    XSL$SOCKPTR
         1 000022   000036 702000 1                  TSX2    BAILOUT

     1242     3014    1   COMMON:
     1243     3015    1       TNAMELEN = NAMELEN;

   3015  1 000023   200006 470500       COMMON       LDP0    @NAMELEN,,AUTO
         1 000024   000000 235100                    LDA     0,,PR0
         1 000025   200007 755100                    STA     TNAMELEN,,AUTO

     1244     3016    1       IF TNAMELEN > 16 THEN

   3016  1 000026   000020 115007                    CMPA    16,DL
         1 000027   000032 604400 1                  TMOZ    s:3018

     1245     3017    1           TNAMELEN = 16;

PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:159  
   3017  1 000030   000020 236007                    LDQ     16,DL
         1 000031   200007 756100                    STQ     TNAMELEN,,AUTO

     1246     3018    2       IF NAMELEN <= 0 THEN DO;

   3018  1 000032   000000 235100                    LDA     0,,PR0
         1 000033   000042 605400 1                  TPNZ    s:3024

     1247     3019    2           XSL_ERRNO = %E$FAULT;

   3019  1 000034   000016 236007                    LDQ     14,DL
         1 000035   000000 756000 xsym               STQ     XSL_ERRNO

     1248     3020    2   BAILOUT:
     1249     3021    2           RESULT = %E$FAILURE;

   3021  1 000036   000001 335007       BAILOUT      LCA     1,DL
         1 000037   200003 470500                    LDP0    @RESULT,,AUTO
         1 000040   000000 755100                    STA     0,,PR0

     1250     3022    2           ALTRETURN;

   3022  1 000041   000000 702200 xent               TSX2  ! X66_AALT

     1251     3023    2           END;
     1252     3024    1       SOCK$ = XSL_SOCK$;

   3024  1 000042   000000 236000 xsym               LDQ     XSL_ERRNO
         1 000043   200010 756100                    STQ     SOCK$,,AUTO

     1253     3025    1       IF SOCK.FLAGS.CONNECTING THEN

   3025  1 000044   200010 471500                    LDP1    SOCK$,,AUTO
         1 000045   100001 236100                    LDQ     1,,PR1
         1 000046   000200 316003                    CANQ    128,DU
         1 000047   000115 601000 1                  TNZ     SENDIT

PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:160  
     1254     3026    1           GOTO SENDIT;
     1255     3027    2       IF SOCK.FLAGS.LISTEN OR SOCK.FLAGS.CONNECT THEN DO;

   3027  1 000050   010000 316003                    CANQ    4096,DU
         1 000051   000054 601000 1                  TNZ     s:3028
         1 000052   040000 316003                    CANQ    16384,DU
         1 000053   000057 600000 1                  TZE     s:3029

     1256     3028    2           XSL_ERRNO = %E$INVAL; GOTO BAILOUT; END;

   3028  1 000054   000026 235007                    LDA     22,DL
         1 000055   000000 755000 xsym               STA     XSL_ERRNO

   3028  1 000056   000036 710000 1                  TRA     BAILOUT

     1257     3029    1       IF NOT SOCK.FLAGS.SOCKET THEN

   3029  1 000057   002000 316003                    CANQ    1024,DU
         1 000060   000072 601000 1                  TNZ     s:3032

     1258     3030                /* Only get a socket if we haven't done a bind already. */
     1259     3031    1           CALL XSL$SOCKOPEN( SOCK, NAME, TNAMELEN) ALTRET( BAILOUT);

   3031  1 000061   200007 633500                    EPPR3   TNAMELEN,,AUTO
         1 000062   200014 453500                    STP3    TEMP+3,,AUTO
         1 000063   200005 236100                    LDQ     @NAME,,AUTO
         1 000064   200010 235100                    LDA     SOCK$,,AUTO
         1 000065   200012 757100                    STAQ    TEMP+1,,AUTO
         1 000066   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000067   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000070   000000 701000 xent               TSX1    XSL$SOCKOPEN
         1 000071   000036 702000 1                  TSX2    BAILOUT

     1260     3032    2       IF SOCK.FLAGS.REUSEADDR THEN DO;

   3032  1 000072   200010 470500                    LDP0    SOCK$,,AUTO
         1 000073   000001 236100                    LDQ     1,,PR0
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:161  
         1 000074   000400 316003                    CANQ    256,DU
         1 000075   000115 600000 1                  TZE     SENDIT

     1261     3033    2           TEMP = SOCK.SOCK#;

   3033  1 000076   000000 236100                    LDQ     0,,PR0
         1 000077   000777 376007                    ANQ     511,DL
         1 000100   200011 756100                    STQ     TEMP,,AUTO

     1262     3034    2           CALL XSL$QSETSOCKOPT( RESULT, TEMP, %XSL_SOL_SOCKET, %XSL_SO_REUSEADDR,
              3034                    262144, 2);

   3034  1 000101   000002 237000 2                  LDAQ    2
         1 000102   200016 757100                    STAQ    TEMP+5,,AUTO
         1 000103   000004 237000 2                  LDAQ    4
         1 000104   200014 757100                    STAQ    TEMP+3,,AUTO
         1 000105   200011 631500                    EPPR1   TEMP,,AUTO
         1 000106   200013 451500                    STP1    TEMP+2,,AUTO
         1 000107   200003 236100                    LDQ     @RESULT,,AUTO
         1 000110   200012 756100                    STQ     TEMP+1,,AUTO
         1 000111   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000112   000024 631400 xsym               EPPR1   B_VECTNIL+20
         1 000113   000000 701000 xent               TSX1    XSL$QSETSOCKOPT
         1 000114   000000 011000                    NOP     0

     1263     3035    2           END;

     1264     3036    1   SENDIT:
     1265     3037    1       XSL$CONNECTRQS = XSL_CONNECTRQS;

   3037  1 000115   000000 470400 xsym  SENDIT       LDP0    XSL_KEYBUF$
         1 000116   000100 100400                    MLR     fill='000'O
         1 000117   000000 000024 0                  ADSC9   XSL_CONNECTRQS           cn=0,n=20
         1 000120   000000 000024                    ADSC9   0,,PR0                   cn=0,n=20

     1266     3038    1       XSL$CONNECTRQS.NAMELEN = TNAMELEN;

PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:162  
   3038  1 000121   200007 720100                    LXL0    TNAMELEN,,AUTO
         1 000122   000000 440100                    SXL0    0,,PR0

     1267     3039    1       CALL XSL$HTONADDR( XSL$CONNECTRQS.NAME, NAME);

   3039  1 000123   200005 236100                    LDQ     @NAME,,AUTO
         1 000124   200013 756100                    STQ     TEMP+2,,AUTO
         1 000125   000000 236000 xsym               LDQ     XSL_KEYBUF$
         1 000126   000001 036003                    ADLQ    1,DU
         1 000127   200012 756100                    STQ     TEMP+1,,AUTO
         1 000130   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000131   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000132   000000 701000 xent               TSX1    XSL$HTONADDR
         1 000133   000000 011000                    NOP     0

     1268     3040    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$CONNECTRQS)-16+TNAMELEN);

   3040  1 000134   200007 235100                    LDA     TNAMELEN,,AUTO
         1 000135   000004 035007                    ADLA    4,DL
         1 000136   200012 755100                    STA     TEMP+1,,AUTO
         1 000137   200012 630500                    EPPR0   TEMP+1,,AUTO
         1 000140   200015 450500                    STP0    TEMP+4,,AUTO
         1 000141   200010 236100                    LDQ     SOCK$,,AUTO
         1 000142   200014 756100                    STQ     TEMP+3,,AUTO
         1 000143   200014 630500                    EPPR0   TEMP+3,,AUTO
         1 000144   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000145   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 000146   000000 011000                    NOP     0

     1269     3041    1       CALL XSL$CL_READ( SOCK);

   3041  1 000147   200010 630500                    EPPR0   SOCK$,,AUTO
         1 000150   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000151   000000 701000 xent               TSX1    XSL$CL_READ
         1 000152   000000 011000                    NOP     0

     1270     3042    2       IF XSL$CONNECTRSP.RESULT < 0 THEN DO;
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:163  

   3042  1 000153   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 000154   000000 720100                    LXL0    0,,PR0
         1 000155   000162 605000 1                  TPL     s:3046

     1271     3043    2           XSL_ERRNO = XSL$CONNECTRSP.ERRNO;

   3043  1 000156   000001 236100                    LDQ     1,,PR0
         1 000157   000022 732000                    QRS     18
         1 000160   000000 756000 xsym               STQ     XSL_ERRNO

     1272     3044    2           GOTO BAILOUT;

   3044  1 000161   000036 710000 1                  TRA     BAILOUT

     1273     3045    2           END;
     1274     3046    2       IF SOCK.TYPE ~= %XSL_SOCK_DGRAM THEN DO;

   3046  1 000162   200010 471500                    LDP1    SOCK$,,AUTO
         1 000163   100000 236100                    LDQ     0,,PR1
         1 000164   000777 376003                    ANQ     511,DU
         1 000165   000002 116003                    CMPQ    2,DU
         1 000166   000173 600000 1                  TZE     s:3050

     1275     3047    2           SOCK.FLAGS.CONNECT = '1'B;

   3047  1 000167   040000 236003                    LDQ     16384,DU
         1 000170   100001 256100                    ORSQ    1,,PR1

     1276     3048    2           SOCK.FLAGS.SELWRITE = '1'B;

   3048  1 000171   000020 236003                    LDQ     16,DU
         1 000172   100001 256100                    ORSQ    1,,PR1

     1277     3049    2           END;

     1278     3050    1       SOCK.PEERNAME = NAME;
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:164  

   3050  1 000173   200005 473500                    LDP3    @NAME,,AUTO
         1 000174   000100 100500                    MLR     fill='000'O
         1 000175   300000 000024                    ADSC9   0,,PR3                   cn=0,n=20
         1 000176   100011 000024                    ADSC9   9,,PR1                   cn=0,n=20

     1279     3051    1       RESULT = %E$SUCCESS;

   3051  1 000177   200003 474500                    LDP4    @RESULT,,AUTO
         1 000200   400000 450100                    STZ     0,,PR4

     1280     3052    1       RETURN;

   3052  1 000201   000000 702200 xent               TSX2  ! X66_ARET

XSL_CONNECTRQS
 Sect OctLoc
   0     000   000005 000000   000000 000000   000000 000000   000000 000000    ................
   0     004   000000 000000                                                    ....

(unnamed)
 Sect OctLoc
   2     000   000000 006000   000000 000000   000017 006000   000004 006000    ................
   2     004   000027 006000   000006 006000                                    ........
     1281     3053
     1282     3054    1   END XSL$CONNECT;
     1283     3055        %EOD;

PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:165  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$CONNECT.
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:166  

 **** Variables and constants ****

  ****  Section 000 RoData XSL$CONNECT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 XSL_CONNECTRQS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @NAME                      6-0-0/w PTR         r     1 @NAMELEN
     3-0-0/w PTR         r     1 @RESULT                    4-0-0/w PTR         r     1 @SOCK#
    *0-0-0/w STRC(180)   r     1 NAME                      *0-0-0/w SBIN        r     1 NAMELEN
    *0-0-0/w SBIN        r     1 RESULT                    *0-0-0/w SBIN        r     1 SOCK#
    10-0-0/w PTR         r     1 SOCK$                     11-0-0/w SBIN        r     1 TEMP
     7-0-0/w SBIN        r     1 TNAMELEN

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSL_ERRNO                  0-0-0/w PTR         r     1 XSL_KEYBUF$
     0-0-0/w PTR         r     1 XSL_SOCK$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 SOCK                       0-0-0/w STRC(180)   r     1 XSL$CONNECTRQS
     0-0-0/w STRC(216)   r     1 XSL$CONNECTRSP

PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:167  

   Procedure XSL$CONNECT requires 130 words for executable code.
   Procedure XSL$CONNECT requires 16 words of local(AUTO) storage.
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:168  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:169  
          MINI XREF LISTING

BAILOUT
      3021**LABEL    3008--CALLALT  3013--CALLALT  3028--GOTO     3031--CALLALT  3044--GOTO
COMMON
      3015**LABEL    3009--GOTO
NAME
      1178**DCL       141--PROC     3011--ENTRY    3031<>CALL     3039<>CALL     3050>>ASSIGN
NAMELEN
      3001**DCL       141--PROC     3011--ENTRY    3015>>ASSIGN   3018>>IF
RESULT
      3003**DCL       141--PROC     3011--ENTRY    3021<<ASSIGN   3034<>CALL     3051<<ASSIGN
SENDIT
      3037**LABEL    3026--GOTO
SOCK
      1525**DCL      3031<>CALL     3040<>CALL     3041<>CALL
SOCK.FLAGS.CONNECT
      1539**DCL      3027>>IF       3047<<ASSIGN
SOCK.FLAGS.CONNECTING
      1546**DCL      3025>>IF
SOCK.FLAGS.LISTEN
      1541**DCL      3027>>IF
SOCK.FLAGS.REUSEADDR
      1545**DCL      3032>>IF
SOCK.FLAGS.SELWRITE
      1549**DCL      3048<<ASSIGN
SOCK.FLAGS.SOCKET
      1543**DCL      3029>>IF
SOCK.NBACCEPT_SOCK$
      1647**DCL      1648--REDEF
SOCK.PEERNAME
      1618**DCL      3050<<ASSIGN
SOCK.SOCK#
      1534**DCL      3033>>ASSIGN
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:170  
SOCK.TYPE
      1532**DCL      3046>>IF
SOCK#
      3004**DCL       141--PROC     3008<>CALL     3011--ENTRY    3013<>CALL
SOCK$
      3005**DCL      1525--IMP-PTR  3024<<ASSIGN   3025>>IF       3027>>IF       3027>>IF       3029>>IF
      3031>>CALL     3032>>IF       3033>>ASSIGN   3040>>CALL     3041>>CALL     3046>>IF       3047>>ASSIGN
      3048>>ASSIGN   3050>>ASSIGN
TEMP
      3006**DCL      3033<<ASSIGN   3034<>CALL
TNAMELEN
      3002**DCL      3015<<ASSIGN   3016>>IF       3017<<ASSIGN   3031<>CALL     3038>>ASSIGN   3040>>CALL
XSL$CL_READ
      2989**DCL-ENT  3041--CALL
XSL$CL_WRITE
      2990**DCL-ENT  3040--CALL
XSL$CONNECTRQS
      2899**DCL      3037<<ASSIGN   3040--CALL
XSL$CONNECTRQS.NAME
      2926**DCL      3039<>CALL
XSL$CONNECTRQS.NAMELEN
      2906**DCL      3038<<ASSIGN
XSL$CONNECTRSP.ERRNO
      2959**DCL      3043>>ASSIGN
XSL$CONNECTRSP.RESULT
      2958**DCL      3042>>IF
XSL$DCBNPTR
      2993**DCL-ENT  3008--CALL
XSL$HTONADDR
      2991**DCL-ENT  3039--CALL
XSL$QSETSOCKOPT
      2994**DCL-ENT  3034--CALL
XSL$SOCKOPEN
      2995**DCL-ENT  3031--CALL
XSL$SOCKPTR
      2992**DCL-ENT  3013--CALL
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:171  
XSL_CONNECTRQS
      2847**DCL      3037>>ASSIGN
XSL_ERRNO
      2997**DCL      2998--REDEF    3019<<ASSIGN   3028<<ASSIGN   3043<<ASSIGN
XSL_KEYBUF$
      2999**DCL      2899--IMP-PTR  2951--IMP-PTR  3037>>ASSIGN   3038>>ASSIGN   3039>>CALL     3042>>IF
      3043>>ASSIGN
XSL_SOCK$
      2998**DCL      3008<>CALL     3013<>CALL     3024>>ASSIGN
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:172  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #006=XSL$CONNECT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:32 Page:173  
              MINI UREF LISTING

XSL$CONNECT     141**PROC
XSL$QCONNECT    3011**ENTRY

PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:174  
     1284        1        /*T***********************************************************/
     1285        2        /*T*                                                         */
     1286        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1287        4        /*T*                                                         */
     1288        5        /*T***********************************************************/
     1289        6        /*F* NAME: shutdown() and XSL$SHUTDOWN  --  Inhibit Data Transfer
     1290        7        ..::IT "Purpose:"
     1291        8        .INL +4
     1292        9        Inhibits either or both the sending and receiving of data through a socket.
     1293       10        ..::IT "C Usage:"
     1294       11        .INL 4
     1295       12        .FIF
     1296       13        status = shutdown( s, how );
     1297       14        ..::IT "PL6 Usage:"
     1298       15        .INL 4
     1299       16        .FIF
     1300       17        CALL XSL$SHUTDOWN( status, s, how );
     1301       18        ..::IT "Parameters:"
     1302       19        .INL 4
     1303       20        .FIF
     1304       21        s           integer socket descriptor
     1305       22
     1306       23        how         integer shutdown type
     1307       24        ..::IT "Result:"
     1308       25        .INL 4
     1309       26        .FIF
     1310       27        status      integer error code
     1311       28        ..::IT "Description:"
     1312       29        The shutdown() function provides for the inhibiting of data reception or
     1313       30        data transmission, or both, for the specified socket.
     1314       31        .SPB
     1315       32        The s parameter specifies the descriptor of the socket to be modified.
     1316       33        .SPB
     1317       34        The how parameter specifies how the socket is to be modified.  If how is
     1318       35        0, reception is inhibited.  If how is 1, transmission is inhibited.  If how
     1319       36        is 2, both reception and transmission are inhibited.
     1320       37        .SPB
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:175  
     1321       38        If the shutdown() function is successful, the status result contains
     1322       39        ESUCCESS or E$SUCCESS.
     1323       40        .SPB
     1324       41        If the shutdown() function is unsuccessful, the status result contains
     1325       42        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
     1326       43        to determine the specific error condition.  The XSL$SHUTDOWN procedure
     1327       44        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
     1328       45        to the shutdown() function.
     1329       46        .SPB
     1330       47        There is no facility to re-enable data reception or transmission once
     1331       48        they have been inhibited by shutdown().
     1332       49        .SPB
     1333       50        If data reception has been inhibited, all subsequent invocations of
     1334       51        read(), recv(), and recvfrom() on the selected socket act as if zero bytes
     1335       52        of data were received.
     1336       53        .SPB
     1337       54        If data transmission has been inhibited, all subsequent invocations of
     1338       55        write(), send(), and sendto() on the selected socket report the
     1339       56        error ESHUTDOWN.
     1340       57        ..::IT "Errors:"
     1341       58        Following are the possible error conditions reported when the shutdown()
     1342       59        function is unsuccessful.  Equates for the possible values can be found in
     1343       60        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
     1344       61
     1345       62        .FIF
     1346       63
     1347       64        C #define               PL6 %EQU
     1348       65        ----------------------- -----------------------
     1349       66        EBADF                   E$BADF
     1350       67        .FIN
     1351       68        The descriptor s is not appropriate to identify a socket.
     1352       69        .FIF
     1353       70
     1354       71        EFAULT                  E$FAULT
     1355       72        .FIN
     1356       73        The how parameter is invalid (not 0, 1, or 2).
     1357       74        .FIF
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:176  
     1358       75
     1359       76        ENOTCONN                E$NOTCONN
     1360       77        .FIN
     1361       78        The connect() function has not been invoked on this socket.
     1362       79        .FIF
     1363       80
     1364       81        ENOTSOCK                E$NOTSOCK
     1365       82        .FIN
     1366       83        The descriptor s is no longer valid to identify a socket.
     1367       84        .FIF
     1368       85        */
     1369       86        XSL$SHUTDOWN: PROC( RESULT, SOCK#, HOW) ALTRET;
     1370       87        %INCLUDE XSL_SOCKET_E;
     1371      345        %INCLUDE XSL_SOCKET_M;
     1372     1106        %INCLUDE XSL_PERR_C;
     1373     1161        %INCLUDE XSL_INTERNAL_M;
     1374     1412            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
     1375     1556        %INCLUDE XSL_SOCKMSGS_E;
     1376     1602        %INCLUDE XSL_SOCKMSGS_M;
     1377     2735            %XSL$SHUTDOWNRQS( FPTN=XSL_SHUTDOWNRQS, STCLASS="CONSTANT SYMDEF");
     1378     2761            %XSL$SHUTDOWNRQS( STCLASS="BASED( XSL_KEYBUF$)");
     1379     2787            %XSL$SHUTDOWNRSP( STCLASS="BASED( XSL_KEYBUF$)");
     1380     2814
     1381     2815    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
     1382     2816    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
     1383     2817    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
     1384     2818    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
     1385     2819
     1386     2820    1       DCL XSL_ERRNO SBIN SYMREF;
     1387     2821    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
     1388     2822    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
     1389     2823
     1390     2824    1       DCL HOW SBIN;
     1391     2825    1       DCL RESULT SBIN;
     1392     2826    1       DCL SOCK# SBIN;
     1393     2827    1       DCL SOCK$ PTR;
     1394     2828
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:177  
     1395     2829    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);
     1396     2830    1       GOTO COMMON;
     1397     2831
     1398     2832    1   XSL$QSHUTDOWN: ENTRY( RESULT, SOCK#, HOW) ALTRET;
     1399     2833
     1400     2834    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET (BAILOUT);
     1401     2835    1   COMMON:
     1402     2836    2       IF HOW < 0 OR HOW > 2 THEN DO;
     1403     2837    2           XSL_ERRNO = %E$FAULT;
     1404     2838    2   BAILOUT:
     1405     2839    2           RESULT = %E$FAILURE;
     1406     2840    2           ALTRETURN;
     1407     2841    2           END;
     1408     2842    1       SOCK$ = XSL_SOCK$;
     1409     2843    2       IF NOT SOCK.FLAGS.CONNECT THEN DO;
     1410     2844    2           XSL_ERRNO = %E$NOTCONN; GOTO BAILOUT; END;
     1411     2845    1       XSL$SHUTDOWNRQS = XSL_SHUTDOWNRQS;
     1412     2846    1       XSL$SHUTDOWNRQS.HOW = HOW;
     1413     2847    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$SHUTDOWNRQS));
     1414     2848    1       CALL XSL$CL_READ( SOCK);
     1415     2849    2       IF XSL$SHUTDOWNRSP.RESULT < 0 THEN DO;
     1416     2850    2           XSL_ERRNO = XSL$SHUTDOWNRSP.ERRNO;
     1417     2851    2           GOTO BAILOUT;
     1418     2852    2           END;
     1419     2853    2       DO CASE( HOW);
     1420     2854    2           CASE( 0);
     1421     2855    2               SOCK.FLAGS.RECVSHUT = '1'B;
     1422     2856    2           CASE( 1);
     1423     2857    2               SOCK.FLAGS.SENDSHUT = '1'B;
     1424     2858    2           CASE( 2);
     1425     2859    2               SOCK.FLAGS.RECVSHUT = '1'B;
     1426     2860    2               SOCK.FLAGS.SENDSHUT = '1'B;
     1427     2861    2           END;
     1428     2862    1       RESULT = %E$SUCCESS;
     1429     2863    1       RETURN;
     1430     2864
     1431     2865    1   END XSL$SHUTDOWN;
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:178  
     1432     2866        %EOD;

PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:179  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$SHUTDOWN.

   Procedure XSL$SHUTDOWN requires 86 words for executable code.
   Procedure XSL$SHUTDOWN requires 10 words of local(AUTO) storage.

PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:180  

 Object Unit name= XSL$SHUTDOWN                               File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:33:18.52 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      1      1  XSL$SHUTDOWN
    1   Proc  even  none    86    126  XSL$SHUTDOWN
    2  RoData even  none     2      2  XSL$SHUTDOWN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        3  XSL$SHUTDOWN
     1     12          yes     yes      Std        3  XSL$QSHUTDOWN

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSL_SHUTDOWNRQS
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:181  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSL$DCBNPTR
 yes     yes           Std       2 XSL$SOCKPTR
 yes     yes           Std       4 XSL$CL_WRITE
 yes     yes           Std       3 XSL$CL_READ
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_ERRNO                        r    XSL_KEYBUF$                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:182  


     1284        1        /*T***********************************************************/
     1285        2        /*T*                                                         */
     1286        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1287        4        /*T*                                                         */
     1288        5        /*T***********************************************************/
     1289        6        /*F* NAME: shutdown() and XSL$SHUTDOWN  --  Inhibit Data Transfer
     1290        7        ..::IT "Purpose:"
     1291        8        .INL +4
     1292        9        Inhibits either or both the sending and receiving of data through a socket.
     1293       10        ..::IT "C Usage:"
     1294       11        .INL 4
     1295       12        .FIF
     1296       13        status = shutdown( s, how );
     1297       14        ..::IT "PL6 Usage:"
     1298       15        .INL 4
     1299       16        .FIF
     1300       17        CALL XSL$SHUTDOWN( status, s, how );
     1301       18        ..::IT "Parameters:"
     1302       19        .INL 4
     1303       20        .FIF
     1304       21        s           integer socket descriptor
     1305       22
     1306       23        how         integer shutdown type
     1307       24        ..::IT "Result:"
     1308       25        .INL 4
     1309       26        .FIF
     1310       27        status      integer error code
     1311       28        ..::IT "Description:"
     1312       29        The shutdown() function provides for the inhibiting of data reception or
     1313       30        data transmission, or both, for the specified socket.
     1314       31        .SPB
     1315       32        The s parameter specifies the descriptor of the socket to be modified.
     1316       33        .SPB
     1317       34        The how parameter specifies how the socket is to be modified.  If how is
     1318       35        0, reception is inhibited.  If how is 1, transmission is inhibited.  If how
     1319       36        is 2, both reception and transmission are inhibited.
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:183  
     1320       37        .SPB
     1321       38        If the shutdown() function is successful, the status result contains
     1322       39        ESUCCESS or E$SUCCESS.
     1323       40        .SPB
     1324       41        If the shutdown() function is unsuccessful, the status result contains
     1325       42        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
     1326       43        to determine the specific error condition.  The XSL$SHUTDOWN procedure
     1327       44        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
     1328       45        to the shutdown() function.
     1329       46        .SPB
     1330       47        There is no facility to re-enable data reception or transmission once
     1331       48        they have been inhibited by shutdown().
     1332       49        .SPB
     1333       50        If data reception has been inhibited, all subsequent invocations of
     1334       51        read(), recv(), and recvfrom() on the selected socket act as if zero bytes
     1335       52        of data were received.
     1336       53        .SPB
     1337       54        If data transmission has been inhibited, all subsequent invocations of
     1338       55        write(), send(), and sendto() on the selected socket report the
     1339       56        error ESHUTDOWN.
     1340       57        ..::IT "Errors:"
     1341       58        Following are the possible error conditions reported when the shutdown()
     1342       59        function is unsuccessful.  Equates for the possible values can be found in
     1343       60        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
     1344       61
     1345       62        .FIF
     1346       63
     1347       64        C #define               PL6 %EQU
     1348       65        ----------------------- -----------------------
     1349       66        EBADF                   E$BADF
     1350       67        .FIN
     1351       68        The descriptor s is not appropriate to identify a socket.
     1352       69        .FIF
     1353       70
     1354       71        EFAULT                  E$FAULT
     1355       72        .FIN
     1356       73        The how parameter is invalid (not 0, 1, or 2).
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:184  
     1357       74        .FIF
     1358       75
     1359       76        ENOTCONN                E$NOTCONN
     1360       77        .FIN
     1361       78        The connect() function has not been invoked on this socket.
     1362       79        .FIF
     1363       80
     1364       81        ENOTSOCK                E$NOTSOCK
     1365       82        .FIN
     1366       83        The descriptor s is no longer valid to identify a socket.
     1367       84        .FIF
     1368       85        */
     1369       86        XSL$SHUTDOWN: PROC( RESULT, SOCK#, HOW) ALTRET;

     86  1 000000   000000 700200 xent  XSL$SHUTDOWN TSX0  ! X66_AUTO_3
         1 000001   000012 000003                    ZERO    10,3

     1370       87        %INCLUDE XSL_SOCKET_E;
     1371      345        %INCLUDE XSL_SOCKET_M;
     1372     1106        %INCLUDE XSL_PERR_C;
     1373     1161        %INCLUDE XSL_INTERNAL_M;
     1374     1412            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
     1375     1556        %INCLUDE XSL_SOCKMSGS_E;
     1376     1602        %INCLUDE XSL_SOCKMSGS_M;
     1377     2735            %XSL$SHUTDOWNRQS( FPTN=XSL_SHUTDOWNRQS, STCLASS="CONSTANT SYMDEF");
     1378     2761            %XSL$SHUTDOWNRQS( STCLASS="BASED( XSL_KEYBUF$)");
     1379     2787            %XSL$SHUTDOWNRSP( STCLASS="BASED( XSL_KEYBUF$)");
     1380     2814
     1381     2815    1       DCL XSL$CL_READ ENTRY(3) ALTRET;
     1382     2816    1       DCL XSL$CL_WRITE ENTRY(4) ALTRET;
     1383     2817    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
     1384     2818    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
     1385     2819
     1386     2820    1       DCL XSL_ERRNO SBIN SYMREF;
     1387     2821    1       DCL XSL_SOCK$ REDEF XSL_ERRNO PTR;
     1388     2822    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
     1389     2823
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:185  
     1390     2824    1       DCL HOW SBIN;
     1391     2825    1       DCL RESULT SBIN;
     1392     2826    1       DCL SOCK# SBIN;
     1393     2827    1       DCL SOCK$ PTR;
     1394     2828
     1395     2829    1       CALL XSL$DCBNPTR( SOCK#, XSL_SOCK$) ALTRET( BAILOUT);

   2829  1 000002   000000 236000 2                  LDQ     0
         1 000003   200004 235100                    LDA     @SOCK#,,AUTO
         1 000004   200010 757100                    STAQ    SOCK$+2,,AUTO
         1 000005   200010 630500                    EPPR0   SOCK$+2,,AUTO
         1 000006   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000007   000000 701000 xent               TSX1    XSL$DCBNPTR
         1 000010   000032 702000 1                  TSX2    BAILOUT

     1396     2830    1       GOTO COMMON;

   2830  1 000011   000023 710000 1                  TRA     COMMON

     1397     2831
     1398     2832    1   XSL$QSHUTDOWN: ENTRY( RESULT, SOCK#, HOW) ALTRET;

   2832  1 000012   000000 700200 xent  XSL$QSHUTDO* TSX0  ! X66_AUTO_3
         1 000013   000012 000003                    ZERO    10,3

     1399     2833
     1400     2834    1       CALL XSL$SOCKPTR( SOCK#, XSL_SOCK$) ALTRET (BAILOUT);

   2834  1 000014   000000 236000 2                  LDQ     0
         1 000015   200004 235100                    LDA     @SOCK#,,AUTO
         1 000016   200010 757100                    STAQ    SOCK$+2,,AUTO
         1 000017   200010 630500                    EPPR0   SOCK$+2,,AUTO
         1 000020   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000021   000000 701000 xent               TSX1    XSL$SOCKPTR
         1 000022   000032 702000 1                  TSX2    BAILOUT

     1401     2835    1   COMMON:
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:186  
     1402     2836    2       IF HOW < 0 OR HOW > 2 THEN DO;

   2836  1 000023   200005 470500       COMMON       LDP0    @HOW,,AUTO
         1 000024   000000 235100                    LDA     0,,PR0
         1 000025   000030 604000 1                  TMI     s:2837
         1 000026   000002 115007                    CMPA    2,DL
         1 000027   000036 604400 1                  TMOZ    s:2842

     1403     2837    2           XSL_ERRNO = %E$FAULT;

   2837  1 000030   000016 236007                    LDQ     14,DL
         1 000031   000000 756000 xsym               STQ     XSL_ERRNO

     1404     2838    2   BAILOUT:
     1405     2839    2           RESULT = %E$FAILURE;

   2839  1 000032   000001 335007       BAILOUT      LCA     1,DL
         1 000033   200003 470500                    LDP0    @RESULT,,AUTO
         1 000034   000000 755100                    STA     0,,PR0

     1406     2840    2           ALTRETURN;

   2840  1 000035   000000 702200 xent               TSX2  ! X66_AALT

     1407     2841    2           END;
     1408     2842    1       SOCK$ = XSL_SOCK$;

   2842  1 000036   000000 236000 xsym               LDQ     XSL_ERRNO
         1 000037   200006 756100                    STQ     SOCK$,,AUTO

     1409     2843    2       IF NOT SOCK.FLAGS.CONNECT THEN DO;

   2843  1 000040   200006 471500                    LDP1    SOCK$,,AUTO
         1 000041   100001 236100                    LDQ     1,,PR1
         1 000042   040000 316003                    CANQ    16384,DU
         1 000043   000047 601000 1                  TNZ     s:2845

PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:187  
     1410     2844    2           XSL_ERRNO = %E$NOTCONN; GOTO BAILOUT; END;

   2844  1 000044   000164 235007                    LDA     116,DL
         1 000045   000000 755000 xsym               STA     XSL_ERRNO

   2844  1 000046   000032 710000 1                  TRA     BAILOUT

     1411     2845    1       XSL$SHUTDOWNRQS = XSL_SHUTDOWNRQS;

   2845  1 000047   000000 236000 0                  LDQ     XSL_SHUTDOWNRQS
         1 000050   000000 473400 xsym               LDP3    XSL_KEYBUF$
         1 000051   300000 756100                    STQ     0,,PR3

     1412     2846    1       XSL$SHUTDOWNRQS.HOW = HOW;

   2846  1 000052   000000 720100                    LXL0    0,,PR0
         1 000053   300000 440100                    SXL0    0,,PR3

     1413     2847    1       CALL XSL$CL_WRITE( SOCK, LENGTHC( XSL$SHUTDOWNRQS));

   2847  1 000054   000001 236000 2                  LDQ     1
         1 000055   200006 235100                    LDA     SOCK$,,AUTO
         1 000056   200010 757100                    STAQ    SOCK$+2,,AUTO
         1 000057   200010 630500                    EPPR0   SOCK$+2,,AUTO
         1 000060   000020 631400 xsym               EPPR1   B_VECTNIL+16
         1 000061   000000 701000 xent               TSX1    XSL$CL_WRITE
         1 000062   000000 011000                    NOP     0

     1414     2848    1       CALL XSL$CL_READ( SOCK);

   2848  1 000063   200006 630500                    EPPR0   SOCK$,,AUTO
         1 000064   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000065   000000 701000 xent               TSX1    XSL$CL_READ
         1 000066   000000 011000                    NOP     0

     1415     2849    2       IF XSL$SHUTDOWNRSP.RESULT < 0 THEN DO;

PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:188  
   2849  1 000067   000000 470400 xsym               LDP0    XSL_KEYBUF$
         1 000070   000000 720100                    LXL0    0,,PR0
         1 000071   000076 605000 1                  TPL     s:2853

     1416     2850    2           XSL_ERRNO = XSL$SHUTDOWNRSP.ERRNO;

   2850  1 000072   000001 236100                    LDQ     1,,PR0
         1 000073   000022 732000                    QRS     18
         1 000074   000000 756000 xsym               STQ     XSL_ERRNO

     1417     2851    2           GOTO BAILOUT;

   2851  1 000075   000032 710000 1                  TRA     BAILOUT

     1418     2852    2           END;
     1419     2853    2       DO CASE( HOW);

   2853  1 000076   200005 471500                    LDP1    @HOW,,AUTO
         1 000077   100000 235100                    LDA     0,,PR1
         1 000100   000003 115007                    CMPA    3,DL
         1 000101   000103 602005 1                  TNC     s:2853+5,AL
         1 000102   000123 710000 1                  TRA     s:2862
         1 000103   000106 710000 1                  TRA     s:2855
         1 000104   000112 710000 1                  TRA     s:2857
         1 000105   000116 710000 1                  TRA     s:2859

     1420     2854    2           CASE( 0);

     1421     2855    2               SOCK.FLAGS.RECVSHUT = '1'B;

   2855  1 000106   200006 473500                    LDP3    SOCK$,,AUTO
         1 000107   100000 236003                    LDQ     32768,DU
         1 000110   300001 256100                    ORSQ    1,,PR3
         1 000111   000123 710000 1                  TRA     s:2862

     1422     2856    2           CASE( 1);

PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:189  
     1423     2857    2               SOCK.FLAGS.SENDSHUT = '1'B;

   2857  1 000112   200006 473500                    LDP3    SOCK$,,AUTO
         1 000113   200000 236003                    LDQ     65536,DU
         1 000114   300001 256100                    ORSQ    1,,PR3
         1 000115   000123 710000 1                  TRA     s:2862

     1424     2858    2           CASE( 2);

     1425     2859    2               SOCK.FLAGS.RECVSHUT = '1'B;

   2859  1 000116   200006 473500                    LDP3    SOCK$,,AUTO
         1 000117   100000 236003                    LDQ     32768,DU
         1 000120   300001 256100                    ORSQ    1,,PR3

     1426     2860    2               SOCK.FLAGS.SENDSHUT = '1'B;

   2860  1 000121   200000 236003                    LDQ     65536,DU
         1 000122   300001 256100                    ORSQ    1,,PR3

     1427     2861    2           END;

     1428     2862    1       RESULT = %E$SUCCESS;

   2862  1 000123   200003 473500                    LDP3    @RESULT,,AUTO
         1 000124   300000 450100                    STZ     0,,PR3

     1429     2863    1       RETURN;

   2863  1 000125   000000 702200 xent               TSX2  ! X66_ARET

XSL_SHUTDOWNRQS
 Sect OctLoc
   0     000   000031 000000                                                    ....

(unnamed)
 Sect OctLoc
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:190  
   2     000   000000 006000   000006 006000                                    ........
     1430     2864
     1431     2865    1   END XSL$SHUTDOWN;
     1432     2866        %EOD;

PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:191  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$SHUTDOWN.
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:192  

 **** Variables and constants ****

  ****  Section 000 RoData XSL$SHUTDOWN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 XSL_SHUTDOWNRQS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @HOW                       3-0-0/w PTR         r     1 @RESULT
     4-0-0/w PTR         r     1 @SOCK#                    *0-0-0/w SBIN        r     1 HOW
    *0-0-0/w SBIN        r     1 RESULT                    *0-0-0/w SBIN        r     1 SOCK#
     6-0-0/w PTR         r     1 SOCK$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSL_ERRNO                  0-0-0/w PTR         r     1 XSL_KEYBUF$
     0-0-0/w PTR         r     1 XSL_SOCK$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 SOCK                       0-0-0/w STRC        r     1 XSL$SHUTDOWNRQS
     0-0-0/w STRC(54)    r     1 XSL$SHUTDOWNRSP

PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:193  

   Procedure XSL$SHUTDOWN requires 86 words for executable code.
   Procedure XSL$SHUTDOWN requires 10 words of local(AUTO) storage.
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:194  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:195  
          MINI XREF LISTING

BAILOUT
      2839**LABEL    2829--CALLALT  2834--CALLALT  2844--GOTO     2851--GOTO
COMMON
      2836**LABEL    2830--GOTO
HOW
      2824**DCL        86--PROC     2832--ENTRY    2836>>IF       2836>>IF       2846>>ASSIGN   2853>>DOCASE
RESULT
      2825**DCL        86--PROC     2832--ENTRY    2839<<ASSIGN   2862<<ASSIGN
SOCK
      1430**DCL      2847<>CALL     2848<>CALL
SOCK.FLAGS.CONNECT
      1444**DCL      2843>>IF
SOCK.FLAGS.RECVSHUT
      1443**DCL      2855<<ASSIGN   2859<<ASSIGN
SOCK.FLAGS.SENDSHUT
      1442**DCL      2857<<ASSIGN   2860<<ASSIGN
SOCK.NBACCEPT_SOCK$
      1552**DCL      1553--REDEF
SOCK#
      2826**DCL        86--PROC     2829<>CALL     2832--ENTRY    2834<>CALL
SOCK$
      2827**DCL      1430--IMP-PTR  2842<<ASSIGN   2843>>IF       2847>>CALL     2848>>CALL     2855>>ASSIGN
      2857>>ASSIGN   2859>>ASSIGN   2860>>ASSIGN
XSL$CL_READ
      2815**DCL-ENT  2848--CALL
XSL$CL_WRITE
      2816**DCL-ENT  2847--CALL
XSL$DCBNPTR
      2818**DCL-ENT  2829--CALL
XSL$SHUTDOWNRQS
      2778**DCL      2845<<ASSIGN   2847--CALL
XSL$SHUTDOWNRQS.HOW
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:196  
      2785**DCL      2846<<ASSIGN
XSL$SHUTDOWNRSP.ERRNO
      2812**DCL      2850>>ASSIGN
XSL$SHUTDOWNRSP.RESULT
      2811**DCL      2849>>IF
XSL$SOCKPTR
      2817**DCL-ENT  2834--CALL
XSL_ERRNO
      2820**DCL      2821--REDEF    2837<<ASSIGN   2844<<ASSIGN   2850<<ASSIGN
XSL_KEYBUF$
      2822**DCL      2778--IMP-PTR  2804--IMP-PTR  2845>>ASSIGN   2846>>ASSIGN   2849>>IF       2850>>ASSIGN
XSL_SHUTDOWNRQS
      2752**DCL      2845>>ASSIGN
XSL_SOCK$
      2821**DCL      2829<>CALL     2834<>CALL     2842>>ASSIGN
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:197  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #007=XSL$SHUTDOWN File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:33 Page:198  
              MINI UREF LISTING

XSL$QSHUTDOWN    2832**ENTRY
XSL$SHUTDOWN      86**PROC

PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:199  
     1433        1        /*T***********************************************************/
     1434        2        /*T*                                                         */
     1435        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1436        4        /*T*                                                         */
     1437        5        /*T***********************************************************/
     1438        6        /*F* NAME: close() and XSL$CLOSE  --  Close Socket
     1439        7        ..::IT "Purpose:"
     1440        8        .INL +4
     1441        9        Closes the socket and releases any context associated with it.
     1442       10        ..::IT "C Usage:"
     1443       11        .INL 4
     1444       12        .FIF
     1445       13        status = close( s );
     1446       14        ..::IT "PL6 Usage:"
     1447       15        .INL 4
     1448       16        .FIF
     1449       17        CALL XSL$CLOSE( status, s );
     1450       18        ..::IT "Parameters:"
     1451       19        .INL 4
     1452       20        .FIF
     1453       21        s           integer socket descriptor
     1454       22        ..::IT "Result:"
     1455       23        .INL 4
     1456       24        .FIF
     1457       25        status      integer error code
     1458       26        ..::IT "Description:"
     1459       27        The close() function terminates any data transfer in progress through
     1460       28        the socket, closes the underlying connection (if any), and releases
     1461       29        any internal context associated with the socket.
     1462       30        .SPB
     1463       31        The s parameter specifies the descriptor of the socket to close.
     1464       32        .SPB
     1465       33        If the close() function is successful, the status result contains ESUCCESS
     1466       34        or E$SUCCESS.
     1467       35        .SPB
     1468       36        If the close() function is unsuccessful, the status result contains
     1469       37        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:200  
     1470       38        to determine the specific error condition.  The XSL$CLOSE procedure
     1471       39        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
     1472       40        to the close() function.
     1473       41        .SPB
     1474       42        Once a socket has been closed, it cannot be used for other socket operations.
     1475       43        ..::IT "Errors:"
     1476       44        Following are the possible error conditions reported when the close()
     1477       45        function is unsuccessful.  Equates for the possible values can be found in
     1478       46        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
     1479       47
     1480       48        .FIF
     1481       49
     1482       50        C #define               PL6 %EQU
     1483       51        ----------------------- -----------------------
     1484       52        EBADF                   E$BADF
     1485       53        .FIN
     1486       54        The descriptor s is not appropriate to identify a socket.
     1487       55        .FIF
     1488       56
     1489       57        ENOTSOCK                E$NOTSOCK
     1490       58        .FIN
     1491       59        The descriptor s is no longer valid to identify a socket.
     1492       60        .FIF
     1493       61        */
     1494       62        XSL$CLOSE: PROC( RESULT, SOCK#) ALTRET;
     1495       63        %INCLUDE XSL_SOCKET_E;
     1496      321        %INCLUDE XSL_SOCKET_M;
     1497     1082        %INCLUDE XSL_PERR_C;
     1498     1137        %INCLUDE XSL_INTERNAL_M;
     1499     1388            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
     1500     1532
     1501     1533    1       DCL XSL$CL_CLOSE ENTRY(1) ALTRET;
     1502     1534    1       DCL XSL$RELSOCK ENTRY(1) ALTRET;
     1503     1535    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
     1504     1536    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
     1505     1537
     1506     1538    1       DCL XSL_ERRNO SBIN SYMREF;
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:201  
     1507     1539
     1508     1540    1       DCL RESULT SBIN;
     1509     1541    1       DCL SOCK# SBIN;
     1510     1542    1       DCL SOCK$ PTR;
     1511     1543    1       DCL TEMP SBIN;
     1512     1544
     1513     1545    1       CALL XSL$DCBNPTR( SOCK#, SOCK$) ALTRET( BAILOUT);
     1514     1546    1       GOTO COMMON;
     1515     1547
     1516     1548    1   XSL$QCLOSE: ENTRY( RESULT, SOCK#) ALTRET;
     1517     1549
     1518     1550    1       CALL XSL$SOCKPTR( SOCK#, SOCK$)
     1519     1551    2       WHENALTRETURN DO;
     1520     1552    2   BAILOUT:
     1521     1553    2           RESULT = %E$FAILURE;
     1522     1554    2           ALTRETURN;
     1523     1555    2           END;
     1524     1556    1   COMMON:
     1525     1557    1       CALL XSL$CL_CLOSE( SOCK);
     1526     1558    1       TEMP = SOCK.SOCK#;
     1527     1559    1       CALL XSL$RELSOCK( TEMP);
     1528     1560    1       RESULT = %E$SUCCESS;
     1529     1561    1       RETURN;
     1530     1562
     1531     1563    1   END XSL$CLOSE;
     1532     1564        %EOD;

PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:202  
--  Include file information  --

   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$CLOSE.

   Procedure XSL$CLOSE requires 43 words for executable code.
   Procedure XSL$CLOSE requires 10 words of local(AUTO) storage.

PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:203  

 Object Unit name= XSL$CLOSE                                  File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:33:57.12 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    43     53  XSL$CLOSE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  XSL$CLOSE
     0     13          yes     yes      Std        2  XSL$QCLOSE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSL$DCBNPTR
 yes     yes           Std       2 XSL$SOCKPTR
 yes     yes           Std       1 XSL$CL_CLOSE
 yes     yes           Std       1 XSL$RELSOCK
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:204  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:205  


     1433        1        /*T***********************************************************/
     1434        2        /*T*                                                         */
     1435        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1436        4        /*T*                                                         */
     1437        5        /*T***********************************************************/
     1438        6        /*F* NAME: close() and XSL$CLOSE  --  Close Socket
     1439        7        ..::IT "Purpose:"
     1440        8        .INL +4
     1441        9        Closes the socket and releases any context associated with it.
     1442       10        ..::IT "C Usage:"
     1443       11        .INL 4
     1444       12        .FIF
     1445       13        status = close( s );
     1446       14        ..::IT "PL6 Usage:"
     1447       15        .INL 4
     1448       16        .FIF
     1449       17        CALL XSL$CLOSE( status, s );
     1450       18        ..::IT "Parameters:"
     1451       19        .INL 4
     1452       20        .FIF
     1453       21        s           integer socket descriptor
     1454       22        ..::IT "Result:"
     1455       23        .INL 4
     1456       24        .FIF
     1457       25        status      integer error code
     1458       26        ..::IT "Description:"
     1459       27        The close() function terminates any data transfer in progress through
     1460       28        the socket, closes the underlying connection (if any), and releases
     1461       29        any internal context associated with the socket.
     1462       30        .SPB
     1463       31        The s parameter specifies the descriptor of the socket to close.
     1464       32        .SPB
     1465       33        If the close() function is successful, the status result contains ESUCCESS
     1466       34        or E$SUCCESS.
     1467       35        .SPB
     1468       36        If the close() function is unsuccessful, the status result contains
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:206  
     1469       37        EFAILURE or E$FAILURE and the application must inspect errno or XSL_ERRNO
     1470       38        to determine the specific error condition.  The XSL$CLOSE procedure
     1471       39        additionally ALTRETURNs if it is unsuccessful; it is otherwise identical
     1472       40        to the close() function.
     1473       41        .SPB
     1474       42        Once a socket has been closed, it cannot be used for other socket operations.
     1475       43        ..::IT "Errors:"
     1476       44        Following are the possible error conditions reported when the close()
     1477       45        function is unsuccessful.  Equates for the possible values can be found in
     1478       46        <xsl_errno.h> or XSL_PERR_C for C and PL6 source, respectively.
     1479       47
     1480       48        .FIF
     1481       49
     1482       50        C #define               PL6 %EQU
     1483       51        ----------------------- -----------------------
     1484       52        EBADF                   E$BADF
     1485       53        .FIN
     1486       54        The descriptor s is not appropriate to identify a socket.
     1487       55        .FIF
     1488       56
     1489       57        ENOTSOCK                E$NOTSOCK
     1490       58        .FIN
     1491       59        The descriptor s is no longer valid to identify a socket.
     1492       60        .FIF
     1493       61        */
     1494       62        XSL$CLOSE: PROC( RESULT, SOCK#) ALTRET;

     62  0 000000   000000 700200 xent  XSL$CLOSE    TSX0  ! X66_AUTO_2
         0 000001   000012 000002                    ZERO    10,2

     1495       63        %INCLUDE XSL_SOCKET_E;
     1496      321        %INCLUDE XSL_SOCKET_M;
     1497     1082        %INCLUDE XSL_PERR_C;
     1498     1137        %INCLUDE XSL_INTERNAL_M;
     1499     1388            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
     1500     1532
     1501     1533    1       DCL XSL$CL_CLOSE ENTRY(1) ALTRET;
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:207  
     1502     1534    1       DCL XSL$RELSOCK ENTRY(1) ALTRET;
     1503     1535    1       DCL XSL$SOCKPTR ENTRY(2) ALTRET;
     1504     1536    1       DCL XSL$DCBNPTR ENTRY(2) ALTRET;
     1505     1537
     1506     1538    1       DCL XSL_ERRNO SBIN SYMREF;
     1507     1539
     1508     1540    1       DCL RESULT SBIN;
     1509     1541    1       DCL SOCK# SBIN;
     1510     1542    1       DCL SOCK$ PTR;
     1511     1543    1       DCL TEMP SBIN;
     1512     1544
     1513     1545    1       CALL XSL$DCBNPTR( SOCK#, SOCK$) ALTRET( BAILOUT);

   1545  0 000002   200005 630500                    EPPR0   SOCK$,,AUTO
         0 000003   200011 450500                    STP0    TEMP+3,,AUTO
         0 000004   200004 236100                    LDQ     @SOCK#,,AUTO
         0 000005   200010 756100                    STQ     TEMP+2,,AUTO
         0 000006   200010 630500                    EPPR0   TEMP+2,,AUTO
         0 000007   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000010   000000 701000 xent               TSX1    XSL$DCBNPTR
         0 000011   000026 702000 0                  TSX2    BAILOUT

     1514     1546    1       GOTO COMMON;

   1546  0 000012   000032 710000 0                  TRA     COMMON

     1515     1547
     1516     1548    1   XSL$QCLOSE: ENTRY( RESULT, SOCK#) ALTRET;

   1548  0 000013   000000 700200 xent  XSL$QCLOSE   TSX0  ! X66_AUTO_2
         0 000014   000012 000002                    ZERO    10,2

     1517     1549
     1518     1550    1       CALL XSL$SOCKPTR( SOCK#, SOCK$)

   1550  0 000015   200005 630500                    EPPR0   SOCK$,,AUTO
         0 000016   200011 450500                    STP0    TEMP+3,,AUTO
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:208  
         0 000017   200004 236100                    LDQ     @SOCK#,,AUTO
         0 000020   200010 756100                    STQ     TEMP+2,,AUTO
         0 000021   200010 630500                    EPPR0   TEMP+2,,AUTO
         0 000022   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000023   000000 701000 xent               TSX1    XSL$SOCKPTR
         0 000024   000026 702000 0                  TSX2    BAILOUT
         0 000025   000032 710000 0                  TRA     COMMON

     1519     1551    2       WHENALTRETURN DO;

     1520     1552    2   BAILOUT:
     1521     1553    2           RESULT = %E$FAILURE;

   1553  0 000026   000001 335007       BAILOUT      LCA     1,DL
         0 000027   200003 470500                    LDP0    @RESULT,,AUTO
         0 000030   000000 755100                    STA     0,,PR0

     1522     1554    2           ALTRETURN;

   1554  0 000031   000000 702200 xent               TSX2  ! X66_AALT

     1523     1555    2           END;
     1524     1556    1   COMMON:
     1525     1557    1       CALL XSL$CL_CLOSE( SOCK);

   1557  0 000032   200005 630500       COMMON       EPPR0   SOCK$,,AUTO
         0 000033   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000034   000000 701000 xent               TSX1    XSL$CL_CLOSE
         0 000035   000000 011000                    NOP     0

     1526     1558    1       TEMP = SOCK.SOCK#;

   1558  0 000036   200005 470500                    LDP0    SOCK$,,AUTO
         0 000037   000000 236100                    LDQ     0,,PR0
         0 000040   000777 376007                    ANQ     511,DL
         0 000041   200006 756100                    STQ     TEMP,,AUTO

PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:209  
     1527     1559    1       CALL XSL$RELSOCK( TEMP);

   1559  0 000042   200006 631500                    EPPR1   TEMP,,AUTO
         0 000043   200010 451500                    STP1    TEMP+2,,AUTO
         0 000044   200010 630500                    EPPR0   TEMP+2,,AUTO
         0 000045   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000046   000000 701000 xent               TSX1    XSL$RELSOCK
         0 000047   000000 011000                    NOP     0

     1528     1560    1       RESULT = %E$SUCCESS;

   1560  0 000050   200003 470500                    LDP0    @RESULT,,AUTO
         0 000051   000000 450100                    STZ     0,,PR0

     1529     1561    1       RETURN;

   1561  0 000052   000000 702200 xent               TSX2  ! X66_ARET
     1530     1562
     1531     1563    1   END XSL$CLOSE;
     1532     1564        %EOD;

PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:210  
--  Include file information  --

   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$CLOSE.
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:211  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @RESULT                    4-0-0/w PTR         r     1 @SOCK#
    *0-0-0/w SBIN        r     1 RESULT                    *0-0-0/w SBIN        r     1 SOCK#
     5-0-0/w PTR         r     1 SOCK$                      6-0-0/w SBIN        r     1 TEMP

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 SOCK


   Procedure XSL$CLOSE requires 43 words for executable code.
   Procedure XSL$CLOSE requires 10 words of local(AUTO) storage.
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:212  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:213  
          MINI XREF LISTING

BAILOUT
      1553**LABEL    1545--CALLALT
COMMON
      1557**LABEL    1546--GOTO
RESULT
      1540**DCL        62--PROC     1548--ENTRY    1553<<ASSIGN   1560<<ASSIGN
SOCK
      1406**DCL      1557<>CALL
SOCK.NBACCEPT_SOCK$
      1528**DCL      1529--REDEF
SOCK.SOCK#
      1415**DCL      1558>>ASSIGN
SOCK#
      1541**DCL        62--PROC     1545<>CALL     1548--ENTRY    1550<>CALL
SOCK$
      1542**DCL      1406--IMP-PTR  1545<>CALL     1550<>CALL     1557>>CALL     1558>>ASSIGN
TEMP
      1543**DCL      1558<<ASSIGN   1559<>CALL
XSL$CL_CLOSE
      1533**DCL-ENT  1557--CALL
XSL$DCBNPTR
      1536**DCL-ENT  1545--CALL
XSL$RELSOCK
      1534**DCL-ENT  1559--CALL
XSL$SOCKPTR
      1535**DCL-ENT  1550--CALL
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:214  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #008=XSL$CLOSE File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:33 Page:215  
              MINI UREF LISTING

XSL$CLOSE      62**PROC
XSL$QCLOSE    1548**ENTRY
XSL_ERRNO    1538**DCL

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:216  
     1533        1        /*T***********************************************************/
     1534        2        /*T*                                                         */
     1535        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1536        4        /*T*                                                         */
     1537        5        /*T***********************************************************/
     1538        6        XSL$CL: PROC( SOCK, PARM1, PARM2, PARM3) ALTRET;
     1539        7        %INCLUDE B_ERRORS_C;
     1540     1134        %INCLUDE CP_6_SUBS;
     1541     1674        %INCLUDE CP_6;
     1542     1755            %F$DCB;
     1543     1812            %B$ALT;
     1544     1820            %B$TCB;
     1545     1823            %FPT_OPEN( ASN=DEVICE, RES='CL', FUN=UPDATE, SN=VLP_SN);
     1546     1932            %VLP_SN;
     1547     1945            %FPT_CLOSE( DISP=SAVE);
     1548     1987            %FPT_READ( BUF=NIL, KEY=XSL_KEYBUF, KEYR=YES);
     1549     2026            %FPT_WRITE( BUF=NIL, KEY=XSL_KEYBUF, NODAT=YES);
     1550     2057            %FPT_WAIT( FPTN=XSL_WAIT1DAY, STCLASS="CONSTANT SYMDEF",
     1551     2058                    UNITS=86399, UETIME=XSL_UETIME);
     1552     2072            %FPT_WAIT( FPTN=XSL_WAIT1SEC, STCLASS="CONSTANT SYMDEF", UNITS=1);
     1553     2086            %FPT_TRMPRG( ABORTREAD=YES);
     1554     2115            %VLP_VECTOR( STCLASS=BASED);
     1555     2130            %FPT_GETDCB( DCBNAME=VLP_NAME, DCBNUM=DCB#, STCLASS=CONSTANT);
     1556     2145            %VLP_NAME( NAME='F$XSL00');
     1557     2172    1       DCL 1 DCBNAME REDEF VLP_NAME,
     1558     2173    1           2 LEN UBIN(9) CALIGNED,
     1559     2174    1           2 TXT CHAR(7) CALIGNED;
     1560     2175            %FPT_RELDCB;
     1561     2189        %INCLUDE XSL_PERR_C;
     1562     2244        %INCLUDE XSL_SOCKET_M;
     1563     3005            %XSL$SOCKADDR;
     1564     3045            %XSL$SOCKADDR_IN;
     1565     3109        %INCLUDE XSL_INTERNAL_M;
     1566     3360            %XSL$SOCKINFO( FPTN=SOCK, STCLASS=);
     1567     3504            %XSL$SOCKHD( STCLASS="BASED( XSL_SOCK$$)");
     1568     3537            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( BUF$)");
     1569     3570        %INCLUDE XSL_SOCKMSGS_E;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:217  
     1570     3616
     1571     3617    1       DCL XSL$H9TO8 ENTRY(1);
     1572     3618    1       DCL XSL$H8TO9 ENTRY(1);
     1573     3619    1       DCL XSL$ROUTES ENTRY(2) ALTRET;
     1574     3620    1       DCL XSL$GETBUF ENTRY(2) ALTRET;
     1575     3621    1       DCL XSL$RELBUF ENTRY(2) ALTRET;
     1576     3622    1       DCL XSL$EVLOG ENTRY(2);
     1577     3623
     1578     3624    1       DCL B$TCB$ PTR SYMREF READONLY;
     1579     3625
     1580     3626    1       DCL XSL_ERRNO SBIN SYMREF;
     1581     3627    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
     1582     3628    1       DCL XSL_SN CHAR(6) SYMREF;
     1583     3629    1       DCL XSL_SOCK$$ PTR SYMREF;
     1584     3630    1       DCL XSL_UETIME SBIN STATIC SYMDEF INIT( 0);
     1585     3631
     1586     3632            %EQU ATTR_TCP_PRIV = ATTR_CL_TCPIP# | ATTR_CL_TCP_TCP# | ATTR_CL_TCP_PRIV#;
     1587     3633            %EQU ATTR_TCP_NORMAL = ATTR_CL_TCPIP# | ATTR_CL_TCP_TCP#;
     1588     3634    1       DCL DCB# SBIN STATIC;
     1589     3635    1       DCL LAST BIT(1);
     1590     3636    1       DCL BUFPND# SBIN;
     1591     3637    1       DCL LATCH SBIN STATIC;
     1592     3638    1       DCL LATCHTMP SBIN;
     1593     3639    1       DCL NUM SBIN;
     1594     3640    1       DCL PARM1 SBIN;
     1595     3641    1       DCL PARM2 SBIN;
     1596     3642    1       DCL PARM3 SBIN;
     1597     3643    1       DCL BUF$ PTR;
     1598     3644    1       DCL B$PTR PTR BASED;
     1599     3645    1       DCL XSL_KEYBUF(0:15) SBIN HALF HALIGNED SYMREF;
     1600     3646    1       DCL DUMMYCHARS CHAR(255);
     1601     3647    1       DCL PARM3CHARS CHAR( PARM2) BASED;
     1602     3648    1       DCL PARM2CHARS CHAR( PARM1) BASED;
     1603     3649            /* the following table is indexed by RQS/RSP msgCode, and indicates the
     1604     3650               number of leading halfwords in KEYBUF that should be converted between
     1605     3651               XPS and Host formats */
     1606     3652    1       DCL HCOUNT(0:40) UBIN BYTE CONSTANT INIT(
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:218  
     1607     3653    1           0, /* unused */
     1608     3654    1           2, /* ACCEPTRQS */
     1609     3655    1           5, /* ACCEPTRSP */
     1610     3656    1           3, /* BINDRQS */
     1611     3657    1           3, /* BINDRSP */
     1612     3658    1           3, /* CONNECTRQS */
     1613     3659    1           3, /* CONNECTRSP */
     1614     3660    1           3, /* GETSOCKOPTRQS */
     1615     3661    1           4, /* GETSOCKOPTRSP */
     1616     3662    1           1, /* GIVEUPRQS */
     1617     3663    1           2, /* GIVEUPRSP */
     1618     3664    1           2, /* LISTENRQS */
     1619     3665    1           3, /* LISTENRSP */
     1620     3666    1           3, /* RECVRQS */
     1621     3667    1           3, /* RECVRSP */
     1622     3668    1           3, /* RECVFROMRQS */
     1623     3669    1           5, /* RECVFROMRSP */
     1624     3670    1           3, /* SELECTRQS */
     1625     3671    1           4, /* SELECTRSP */
     1626     3672    1           2, /* SENDRQS */
     1627     3673    1           3, /* SENDRSP */
     1628     3674    1           4, /* SENDTORQS */
     1629     3675    1           3, /* SENDTORSP */
     1630     3676    1           4, /* SETSOCKOPTRQS */
     1631     3677    1           3, /* SETSOCKOPTRSP */
     1632     3678    1           2, /* SHUTDOWNRQS */
     1633     3679    1           3, /* SHUTDOWNRSP */
     1634     3680    1           4, /* SOCKETRQS */
     1635     3681    1           3, /* SOCKETRSP */
     1636     3682    1           2, /* GETSOCKNAMERQS */
     1637     3683    1           3, /* GETSOCKNAMERSP */
     1638     3684    1           2, /* GETPEERNAMERQS */
     1639     3685    1           3, /* GETPEERNAMERSP */
     1640     3686    1           1, /* IOCTLRQS */
     1641     3687    1           3, /* IOCTLRSP */
     1642     3688    1           1, /* DETACHRQS */
     1643     3689    1           0, /* **do not use #36** */
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:219  
     1644     3690    1           0, /* reserved for #37 */
     1645     3691    1           0, /* reserved for #38 */
     1646     3692    1           0, /* reserved for #39 */
     1647     3693    1           0  /* reserved for #40 */
     1648     3694    1           ) CALIGNED;
     1649     3695
     1650     3696    1   XSL$CL_WRITE: ENTRY( SOCK, PARM1, PARM2, PARM3) ALTRET;
     1651     3697
     1652     3698            /* PARM1 is size of key buffer, PARM2 is optional size of data buffer */
     1653     3699            /* If PARM2 specified, data buffer located at PARM3 */
     1654     3700    1       LATCH = XSL_KEYBUF(0);
     1655     3701    1       IF LATCH = %CONNECTRQS AND SOCK.FLAGS.CONNECTING THEN
     1656     3702    1           RETURN;
     1657     3703    1       IF LATCH = %ACCEPTRQS AND SOCK.FLAGS.ACCEPTING THEN
     1658     3704    1           RETURN;
     1659     3705    1       NUM = HCOUNT( XSL_KEYBUF(0));
     1660     3706    1       CALL XSL$H9TO8( NUM);  /* convert first NUM halfwords 9-to-8 */
     1661     3707    1       FPT_WRITE.V.DCB# = SOCK.DCB#;
     1662     3708    1       ADDR(FPT_WRITE.KEY_) -> VLP_VECTOR.W1.VSIZE# = PARM1-1;
     1663     3709    1       IF ADDR( PARM2) = ADDR( NIL) OR PARM2 = 0 THEN
     1664     3710    1           FPT_WRITE.BUF_ = VECTOR( NIL);
     1665     3711    2       ELSE DO;
     1666     3712    2           FPT_WRITE.BUF_.BUF$ = ADDR( PARM3);
     1667     3713    2           FPT_WRITE.BUF_.BOUND = PARM2 - 1;
     1668     3714    2           END;
     1669     3715    1       IF LATCH = %SENDTORQS OR LATCH = %SENDRQS OR LATCH = %SELECTRQS OR
     1670     3716    1         LATCH = %GIVEUPRQS OR LATCH = %DETACHRQS OR
     1671     3717    2         DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) = 3 THEN DO;
     1672     3718    2           LATCHTMP = LATCH;
     1673     3719    2           LATCH = 0;
     1674     3720    2           IF SOCK.FLAGS.BLOCKING THEN
     1675     3721    2               FPT_WRITE.V.DVBYTE.NODAT# = '0'B;
     1676     3722    2           ELSE
     1677     3723    2               FPT_WRITE.V.DVBYTE.NODAT# = '1'B;
     1678     3724    2           CALL XSL$EVLOG( 'WR', ADDR(SOCK));
     1679     3725    2           CALL M$WRITE( FPT_WRITE) ALTRET( OOPSLOG);
     1680     3726    2           END;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:220  
     1681     3727    1       RETURN;
     1682     3728
     1683     3729    1   XSL$CL_READ: ENTRY( SOCK, PARM1, PARM2) ALTRET;
     1684     3730
     1685     3731            /* PARM1 is optional size of data buffer */
     1686     3732            /* If PARM1 specified, data buffer located at PARM2 */
     1687     3733    1   READ_IT:
     1688     3734    1       FPT_READ.V.DCB# = SOCK.DCB#;
     1689     3735    1       IF ADDR( PARM1) = ADDR( NIL) OR PARM1 = 0 THEN
     1690     3736                /* can't just specify a key on a read, no credits
     1691     3737                 get sent to the other end*/
     1692     3738    1           FPT_READ.BUF_ = VECTOR( DUMMYCHARS);
     1693     3739    1       ELSE
     1694     3740    1           FPT_READ.BUF_ = VECTOR( ADDR( PARM2)-> PARM2CHARS);
     1695     3741    1       NUM = XSL_KEYBUF(0)+1; /* Save the message type that requested this one */
     1696     3742    1       IF NUM = %CONNECTRSP AND SOCK.FLAGS.CONNECTING THEN
     1697     3743    1           GOTO LOOK4IT;
     1698     3744    1       IF NUM = %ACCEPTRSP AND SOCK.FLAGS.ACCEPTING THEN
     1699     3745    1           GOTO LOOK4IT;
     1700     3746    1       IF SOCK.MAXRDS = 0 OR SOCK.FLAGS.MUSTREAD OR
     1701     3747    2         ( ADDR( PARM1) ~= ADDR( NIL) AND PARM1 ~= 0) THEN DO;
     1702     3748                /* must use Wait read */
     1703     3749    3           IF LATCH = 0 THEN DO;
     1704     3750    3               FPT_READ.V.KEYS# = %NO#;
     1705     3751    3               XSL_KEYBUF = '0'B;
     1706     3752    3               END;
     1707     3753    3           ELSE DO;
     1708     3754    3               FPT_READ.V.KEYS# = %YES#;
     1709     3755    3               LATCH = 0;
     1710     3756    3               END;
     1711     3757    3           DO INHIBIT;
     1712     3758    3               IF SOCK.BUFHD ~= 0 THEN
     1713     3759    3                   CALL CANCEL( SOCK);
     1714     3760    3               IF SOCK.FLAGS.SELREAD AND NOT SOCK.FLAGS.MUSTREAD THEN
     1715     3761    3                   GOTO LOOK4IT;
     1716     3762    3   REREAD:
     1717     3763    3               SOCK.FLAGS.MUSTREAD = '0'B;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:221  
     1718     3764    3               CALL XSL$EVLOG( 'RD', ADDR(SOCK));
     1719     3765    3               CALL M$READ( FPT_READ) ALTRET( OOPSLOG);
     1720     3766    3               END;
     1721     3767    3           IF NUM ~= XSL_KEYBUF(0) THEN DO;  /* got the wrong one ?!? */
     1722     3768    3               IF XSL_KEYBUF(0) = %SENDRSP OR XSL_KEYBUF(0) = %SENDTORSP THEN
     1723     3769    4                   IF XSL_KEYBUF(2) = 255 AND XSL_KEYBUF(3) = 255 THEN DO;
     1724     3770    4                       SOCK.FEPERROR = XSL_KEYBUF(5);
     1725     3771    4                       GOTO REREAD;
     1726     3772    4                       END;
     1727     3773    3               XSL_KEYBUF(2) = %E$SOCKTNOSUPPORT;
     1728     3774    3               GOTO OOPS1;
     1729     3775    3               END;
     1730     3776    2           GOTO CLEANUP;
     1731     3777    2           END;
     1732     3778    2       ELSE DO;
     1733     3779                /* NoWait reads are allowed */
     1734     3780    3           IF DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) = 3 THEN DO;
     1735     3781                    /* 3 reads already pending */
     1736     3782    4               IF LATCH ~= 0 THEN DO;
     1737     3783    4   WRITE_IT:
     1738     3784    4                   FPT_WRITE.BUF_ = VECTOR( DUMMYCHARS);
     1739     3785    4                   IF SOCK.FLAGS.BLOCKING THEN
     1740     3786    4                       FPT_WRITE.V.DVBYTE.NODAT# = '0'B;
     1741     3787    4                   ELSE
     1742     3788    4                       FPT_WRITE.V.DVBYTE.NODAT# = '1'B;
     1743     3789    4                   CALL XSL$EVLOG( 'WR', ADDR(SOCK));
     1744     3790    4                   CALL M$WRITE( FPT_WRITE) ALTRET( OOPSLOG);
     1745     3791    4                   END;
     1746     3792    3               END;
     1747     3793    3           ELSE DO;
     1748     3794                    /* fewer than 3 reads pending */
     1749     3795    3               IF LATCH ~= 0 THEN
     1750     3796    3                   CALL XSL$GETBUF( SOCK, XSL_KEYBUF) ALTRET( WRITE_IT);
     1751     3797    3               ELSE
     1752     3798    3                   CALL XSL$GETBUF( SOCK);  /* ignore ALTRET here */
     1753     3799    3               END;
     1754     3800    2           END;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:222  
     1755     3801    1   LOOK4IT:
     1756     3802    1       BUFPND# = SOCK.BUFPND#;
     1757     3803    1       BUF$ = PINCRW( XSL_SOCK$$, SOCK.BUFHD);
     1758     3804    2       DO WHILE( BUF$ ~= XSL_SOCK$$);
     1759     3805    2           IF DATABUF.FLAGS.BUSY THEN EXIT;
     1760     3806    3           IF NUM = DATABUF.KEY(1) THEN DO;
     1761     3807                    /* found the RSP we're looking for */
     1762     3808    3               XSL_KEYBUF = DATABUF.KEY;
     1763     3809    4               IF NUM ~= %RECVRSP AND NUM ~= %RECVFROMRSP THEN DO INHIBIT;
     1764     3810    4                   SOCK.DAT# = SOCK.DAT# - 1;
     1765     3811    4                   IF SOCK.DAT# = 0 THEN
     1766     3812    4                       SOCK.FLAGS.SELREAD = '0'B;
     1767     3813    4                   SOCK.BUFPND# = SOCK.BUFPND# - 1;
     1768     3814    4                   CALL XSL$RELBUF( SOCK, DATABUF);
     1769     3815    4                   END;
     1770     3816    3               GOTO CLEANUP;
     1771     3817    3               END;
     1772     3818    2           BUF$ = PINCRW( XSL_SOCK$$, DATABUF.NXT);
     1773     3819    2           END;
     1774     3820    2       IF SOCK.FLAGS.CONNECTING THEN DO;
     1775     3821    2           XSL_KEYBUF(2) = %E$ALREADY;
     1776     3822    2           GOTO OOPS1;
     1777     3823    2           END;
     1778     3824    2       IF NUM = %CONNECTRSP AND NOT SOCK.FLAGS.BLOCKING THEN DO;
     1779     3825    2           SOCK.FLAGS.CONNECTING = '1'B;
     1780     3826    2           XSL_KEYBUF(2) = %E$INPROGRESS;
     1781     3827    2           GOTO OOPS1;
     1782     3828    2           END;
     1783     3829    2       IF SOCK.FLAGS.ACCEPTING THEN DO;
     1784     3830    2           XSL_KEYBUF(2) = %E$WOULDBLOCK;
     1785     3831    2           GOTO OOPS1;
     1786     3832    2           END;
     1787     3833    2       IF NUM = %ACCEPTRSP AND NOT SOCK.FLAGS.BLOCKING THEN DO;
     1788     3834    2           SOCK.FLAGS.ACCEPTING = '1'B;
     1789     3835    2           XSL_KEYBUF(2) = %E$WOULDBLOCK;
     1790     3836    2           GOTO OOPS1;
     1791     3837    2           END;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:223  
     1792     3838    2       DO INHIBIT;
     1793     3839    2           IF DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) = 0 THEN
     1794     3840    2               SOCK.FLAGS.MUSTREAD = '1'B;
     1795     3841    2           IF SOCK.FLAGS.MUSTREAD THEN GOTO READ_IT;
     1796     3842    2           IF BUFPND# ~= SOCK.BUFPND# THEN GOTO LOOK4IT;
     1797     3843    2           XSL_UETIME = 0;
     1798     3844    3           DO WHILE( XSL_UETIME = 0);
     1799     3845    3               CALL XSL$EVLOG( 'WT', ADDR(SOCK));
     1800     3846    3               CALL M$WAIT( XSL_WAIT1DAY);
     1801     3847    3               END;
     1802     3848    2           END;
     1803     3849    1       GOTO LOOK4IT;
     1804     3850    1   CLEANUP:
     1805     3851    1       IF NUM = %CONNECTRSP AND SOCK.FLAGS.CONNECTING THEN
     1806     3852    1           SOCK.FLAGS.CONNECTING = '0'B;
     1807     3853    1       IF NUM = %ACCEPTRSP AND SOCK.FLAGS.ACCEPTING THEN
     1808     3854    1           SOCK.FLAGS.ACCEPTING = '0'B;
     1809     3855    1       NUM = HCOUNT( NUM);
     1810     3856    1       CALL XSL$H8TO9( NUM);  /* convert first NUM halfwords 8-to-9 */
     1811     3857    1       RETURN;
     1812     3858
     1813     3859    1   XSL$CL_OPEN: ENTRY( SOCK, PARM1, PARM2) ALTRET;
     1814     3860
     1815     3861            /* PARM1 is an optional NAME structure, PARM2 is its length */
     1816     3862    1       IF ADDR( PARM1) = ADDR( NIL) THEN
     1817     3863    1           CALL SNSETUP( SOCK.SOCKNAME);
     1818     3864    1       ELSE
     1819     3865    1           CALL SNSETUP( PARM1);
     1820     3866    1       IF SOCK.MAXRDS = 0 THEN
     1821     3867    1           FPT_OPEN.V.EVENT# = 0;
     1822     3868    1       ELSE
     1823     3869    1           ADDR( FPT_OPEN.V.EVENT#)->B$PTR = ADDR( SOCK);  /* for COMIO events */
     1824     3870    1       LAST = '0'B;
     1825     3871    1   AGAIN: ;
     1826     3872    1       SOCK.SERNUM = VLP_SN.SN#(0);
     1827     3873    1       FPT_OPEN.V.DCB# = SOCK.DCB#;
     1828     3874    1       FPT_OPEN.V.ATTR# = %ATTR_TCP_PRIV;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:224  
     1829     3875    1       CALL XSL$EVLOG( 'OP', ADDR(SOCK));
     1830     3876    1       CALL M$OPEN( FPT_OPEN)
     1831     3877    2       WHENALTRETURN DO;
     1832     3878    2           FPT_OPEN.V.ATTR# = %ATTR_TCP_NORMAL;
     1833     3879    2           CALL XSL$EVLOG( 'OP', ADDR(SOCK));
     1834     3880    3           CALL M$OPEN( FPT_OPEN) WHENALTRETURN DO;
     1835     3881    3               IF LAST THEN GOTO OOPSLOG;
     1836     3882    3               LAST = '1'B;
     1837     3883    3               IF ADDR( PARM1) = ADDR( NIL) THEN
     1838     3884    3                   CALL XSL$ROUTES(
     1839     3885    3                     ADDR( SOCK.SOCKNAME)->XSL$SOCKADDR_IN.S_ADDR,
     1840     3886    3                     VLP_SN.SN#(0)) ALTRET( DFLT);
     1841     3887    3               ELSE
     1842     3888    3                   CALL XSL$ROUTES( ADDR( PARM1)->XSL$SOCKADDR_IN.S_ADDR, VLP_SN.SN#(0)
              3888                            )
     1843     3889    4                   WHENALTRETURN DO;
     1844     3890    4   DFLT:
     1845     3891    4                       VLP_SN.SN#(0) = XSL_SN;
     1846     3892    4                       END;
     1847     3893    3               GOTO AGAIN;
     1848     3894    3               END;
     1849     3895    2           END;
     1850     3896    1       RETURN;
     1851     3897
     1852     3898    1   XSL$CL_GET: ENTRY( SOCK) ALTRET;
     1853     3899
     1854     3900    1       CALL BINCHAR( SUBSTR( DCBNAME.TXT, 5, 2), SOCK.SOCK#);
     1855     3901    1       CALL XSL$EVLOG( 'GT', ADDR(SOCK));
     1856     3902    1       CALL M$GETDCB( FPT_GETDCB) ALTRET( OOPSLOG);
     1857     3903    1       SOCK.DCB# = DCB#;
     1858     3904    1       RETURN;
     1859     3905
     1860     3906    1   XSL$CL_REL: ENTRY( SOCK) ALTRET;
     1861     3907
     1862     3908    1       FPT_RELDCB.V.DCB# = SOCK.DCB#;
     1863     3909    1       CALL XSL$EVLOG( 'RL', ADDR(SOCK));
     1864     3910    1       CALL M$RELDCB( FPT_RELDCB) ALTRET( OOPSLOG);
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:225  
     1865     3911    1       SOCK.DCB# = DCBNUM( NIL);
     1866     3912    1       RETURN;
     1867     3913
     1868     3914    1   XSL$CL_CLOSE: ENTRY( SOCK) ALTRET;
     1869     3915
     1870     3916    1       SOCK.FLAGS.REUSEBUF = '0'B;
     1871     3917    1       IF SOCK.BUFHD ~= 0 THEN
     1872     3918    1           CALL CANCEL( SOCK);
     1873     3919    1       CALL XSL$EVLOG( 'CL', ADDR(SOCK));
     1874     3920    1       FPT_CLOSE.V.DCB# = SOCK.DCB#;
     1875     3921    1       CALL M$CLOSE( FPT_CLOSE) ALTRET( OOPSLOG);
     1876     3922    1       RETURN;
     1877     3923    1   OOPSLOG:
     1878     3924    1       CALL XSL$EVLOG( 'ER', ADDR(SOCK));
     1879     3925    1       CALL XSL$EVLOG( , B$TCB$->B$TCB.ALT$->B$ALT.ERR);
     1880     3926    2       IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$NODAT THEN DO;
     1881     3927    2           IF LATCH = %SENDTORQS OR LATCH = %SENDRQS OR
     1882     3928    2             ( LATCH = 0 AND ( LATCHTMP = %SENDTORQS OR LATCHTMP = %SENDRQS)) THEN
     1883     3929    2               GOTO OOPS;  /* send/write will do the right thing */
     1884     3930    2           CALL M$WAIT( XSL_WAIT1SEC);
     1885     3931    2           CALL M$RETRY ALTRET( OOPSLOG);
     1886     3932    2           END;
     1887     3933    1   OOPS:
     1888     3934    1       XSL_KEYBUF(2) = %E$FAILURE; /* ERRNO for RSP messages */
     1889     3935    1   OOPS1:
     1890     3936    1       XSL_KEYBUF(1) = %E$FAILURE; /* RESULT for RSP messages */
     1891     3937    1       ALTRETURN;
     1892     3938        %EJECT;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:226  
     1893     3939    1   XSL$CL_CANCEL: ENTRY( SOCK) ALTRET;
     1894     3940
     1895     3941    1       CALL CANCEL( SOCK);
     1896     3942    1       RETURN;
     1897     3943
     1898     3944    1   CANCEL: PROC( SOCK);
     1899     3945
     1900     3946    2       DCL BUF$ PTR;
     1901     3947    2       DCL MUSTWAIT BIT(1);
     1902     3948            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( BUF$)");
     1903     3981            %XSL$SOCKINFO( FPTN=SOCK, STCLASS=);
     1904     4125
     1905     4126    3       DO INHIBIT;
     1906     4127    4           IF DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) ~= 0 THEN DO;
     1907     4128    4               CALL XSL$EVLOG( 'XX', ADDR(SOCK));
     1908     4129    4               FPT_TRMPRG.V.DCB# = SOCK.DCB#;
     1909     4130    4               CALL M$TRMPRG( FPT_TRMPRG);  /* cancel NW read(s) */
     1910     4131    4               END;
     1911     4132    3   WAIT4IO:
     1912     4133    3           MUSTWAIT = '0'B;
     1913     4134    3           BUF$ = PINCRW( XSL_SOCK$$, SOCK.BUFHD);
     1914     4135    4           DO WHILE( BUF$ ~= XSL_SOCK$$);
     1915     4136    4               MUSTWAIT = MUSTWAIT | DATABUF.FLAGS.BUSY;
     1916     4137    4               BUF$ = PINCRW( XSL_SOCK$$, DATABUF.NXT);
     1917     4138    4               END;
     1918     4139    4           IF MUSTWAIT THEN DO;
     1919     4140    4               CALL XSL$EVLOG( 'WX', ADDR(SOCK));
     1920     4141    4               CALL M$WAIT( XSL_WAIT1DAY);  /* force event delivery */
     1921     4142    4               GOTO WAIT4IO;
     1922     4143    4               END;
     1923     4144    3           RETURN;
     1924     4145    3           END;
     1925     4146
     1926     4147    2   END CANCEL;
     1927     4148        %EJECT;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:227  
     1928     4149    1   SNSETUP: PROC( NAME);
     1929     4150
     1930     4151            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
     1931     4191
     1932     4192    2       DCL XSL$NTOHL ENTRY(2);
     1933     4193
     1934     4194    2       DCL XSL_NETMASK SBIN SYMREF;
     1935     4195    2       DCL MSK(0:3) REDEF XSL_NETMASK BIT(9) CALIGNED;
     1936     4196    2       DCL XSL_SN CHAR(6) SYMREF;
     1937     4197
     1938     4198    2       DCL I UBIN;
     1939     4199    2       DCL L UBIN;
     1940     4200    2       DCL X UBIN;
     1941     4201    2       DCL XCHARS CHAR(0) CONSTANT INIT( '0123456789ABCDEF');
     1942     4202
     1943     4203    2       VLP_SN.SN#(0) = XSL_SN;
     1944     4204    2       X = NAME.SA_DATA(4);
     1945     4205    2       IF X = 0 THEN RETURN;
     1946     4206    2       VLP_SN.SN#(0) = '      ';
     1947     4207    3       IF XSL_NETMASK = -1 THEN DO;
     1948     4208                /* figure out length based on top bits of address */
     1949     4209    3           IF X < 128 THEN L = 2;
     1950     4210    3           ELSE IF X < 192 THEN L = 4;
     1951     4211    3               ELSE L = 6;
     1952     4212    3           END;
     1953     4213    3       ELSE DO;
     1954     4214                /* figure out length based on number of nonzero netmask nibbles */
     1955     4215    3           CALL XSL$NTOHL( X, XSL_NETMASK);
     1956     4216    3           X = X/256;  /* lose lower 2 nibbles */
     1957     4217    4           DO L = 6 DOWNTO 1;
     1958     4218    4               IF MOD( X, 16) ~= 0 THEN EXIT;
     1959     4219    4               X = X/16;
     1960     4220    4               END;
     1961     4221    3           END;
     1962     4222    3       DO I = 0 TO L-1;
     1963     4223    3           X = BITBIN( BINBIT( NAME.SA_DATA( 4 + I/2), 9) & MSK( I/2));
     1964     4224    3           IF MOD( I, 2) ~= 0 THEN
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:228  
     1965     4225    3               X = MOD( X, 16);
     1966     4226    3           ELSE
     1967     4227    3               X = X/16;
     1968     4228    3           SUBSTR( VLP_SN.SN#(0), I, 1) = SUBSTR( XCHARS, X, 1);
     1969     4229    3           END;
     1970     4230    2       RETURN;
     1971     4231
     1972     4232    2   END SNSETUP;
     1973     4233
     1974     4234    1   END XSL$CL;
     1975     4235        %EOD;

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:229  
--  Include file information  --

   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$CL.

   Procedure XSL$CL requires 799 words for executable code.
   Procedure XSL$CL requires 86 words of local(AUTO) storage.

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:230  

 Object Unit name= XSL$CL                                     File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:34:17.20 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none   135    207  XSL$CL
    2  RoData even  UTS     47     57  XSL$CL
    3   Proc  even  none   799   1437  XSL$CL
    4  RoData even  none    24     30  XSL$CL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        4  XSL$CL
     3      3          yes     yes      Std        4  XSL$CL_WRITE
     3    145          yes     yes      Std        3  XSL$CL_READ
     3    632          yes     yes      Std        3  XSL$CL_OPEN
     3    770          yes     yes      Std        1  XSL$CL_GET
     3   1024          yes     yes      Std        1  XSL$CL_REL
     3   1053          yes     yes      Std        1  XSL$CL_CLOSE
     3   1171          yes     yes      Std        1  XSL$CL_CANCEL

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    2      0  XSL_WAIT1DAY                       2      6  XSL_WAIT1SEC
    1    204  XSL_UETIME
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:231  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 XSL$H9TO8
         yes           Std       2 XSL$EVLOG
 yes     yes           Std       2 XSL$RELBUF
         yes           Std       1 XSL$H8TO9
 yes     yes           Std       2 XSL$GETBUF
 yes     yes           Std       2 XSL$ROUTES
         yes           Std       2 XSL$NTOHL
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    B$TCB$                                XSL_SN
     XSL_SOCK$$                            XSL_KEYBUF                            XSL_NETMASK
     XSL_SN                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:232  


     1533        1        /*T***********************************************************/
     1534        2        /*T*                                                         */
     1535        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1536        4        /*T*                                                         */
     1537        5        /*T***********************************************************/
     1538        6        XSL$CL: PROC( SOCK, PARM1, PARM2, PARM3) ALTRET;

      6  3 000000   000000 700200 xent  XSL$CL       TSX0  ! X66_AUTO_4
         3 000001   000126 000004                    ZERO    86,4
         3 000002   000005 710000 3                  TRA     s:3700

     1539        7        %INCLUDE B_ERRORS_C;
     1540     1134        %INCLUDE CP_6_SUBS;
     1541     1674        %INCLUDE CP_6;
     1542     1755            %F$DCB;
     1543     1812            %B$ALT;
     1544     1820            %B$TCB;
     1545     1823            %FPT_OPEN( ASN=DEVICE, RES='CL', FUN=UPDATE, SN=VLP_SN);
     1546     1932            %VLP_SN;
     1547     1945            %FPT_CLOSE( DISP=SAVE);
     1548     1987            %FPT_READ( BUF=NIL, KEY=XSL_KEYBUF, KEYR=YES);
     1549     2026            %FPT_WRITE( BUF=NIL, KEY=XSL_KEYBUF, NODAT=YES);
     1550     2057            %FPT_WAIT( FPTN=XSL_WAIT1DAY, STCLASS="CONSTANT SYMDEF",
     1551     2058                    UNITS=86399, UETIME=XSL_UETIME);
     1552     2072            %FPT_WAIT( FPTN=XSL_WAIT1SEC, STCLASS="CONSTANT SYMDEF", UNITS=1);
     1553     2086            %FPT_TRMPRG( ABORTREAD=YES);
     1554     2115            %VLP_VECTOR( STCLASS=BASED);
     1555     2130            %FPT_GETDCB( DCBNAME=VLP_NAME, DCBNUM=DCB#, STCLASS=CONSTANT);
     1556     2145            %VLP_NAME( NAME='F$XSL00');
     1557     2172    1       DCL 1 DCBNAME REDEF VLP_NAME,
     1558     2173    1           2 LEN UBIN(9) CALIGNED,
     1559     2174    1           2 TXT CHAR(7) CALIGNED;
     1560     2175            %FPT_RELDCB;
     1561     2189        %INCLUDE XSL_PERR_C;
     1562     2244        %INCLUDE XSL_SOCKET_M;
     1563     3005            %XSL$SOCKADDR;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:233  
     1564     3045            %XSL$SOCKADDR_IN;
     1565     3109        %INCLUDE XSL_INTERNAL_M;
     1566     3360            %XSL$SOCKINFO( FPTN=SOCK, STCLASS=);
     1567     3504            %XSL$SOCKHD( STCLASS="BASED( XSL_SOCK$$)");
     1568     3537            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( BUF$)");
     1569     3570        %INCLUDE XSL_SOCKMSGS_E;
     1570     3616
     1571     3617    1       DCL XSL$H9TO8 ENTRY(1);
     1572     3618    1       DCL XSL$H8TO9 ENTRY(1);
     1573     3619    1       DCL XSL$ROUTES ENTRY(2) ALTRET;
     1574     3620    1       DCL XSL$GETBUF ENTRY(2) ALTRET;
     1575     3621    1       DCL XSL$RELBUF ENTRY(2) ALTRET;
     1576     3622    1       DCL XSL$EVLOG ENTRY(2);
     1577     3623
     1578     3624    1       DCL B$TCB$ PTR SYMREF READONLY;
     1579     3625
     1580     3626    1       DCL XSL_ERRNO SBIN SYMREF;
     1581     3627    1       DCL XSL_KEYBUF$ PTR SYMREF READONLY;
     1582     3628    1       DCL XSL_SN CHAR(6) SYMREF;
     1583     3629    1       DCL XSL_SOCK$$ PTR SYMREF;
     1584     3630    1       DCL XSL_UETIME SBIN STATIC SYMDEF INIT( 0);
     1585     3631
     1586     3632            %EQU ATTR_TCP_PRIV = ATTR_CL_TCPIP# | ATTR_CL_TCP_TCP# | ATTR_CL_TCP_PRIV#;
     1587     3633            %EQU ATTR_TCP_NORMAL = ATTR_CL_TCPIP# | ATTR_CL_TCP_TCP#;
     1588     3634    1       DCL DCB# SBIN STATIC;
     1589     3635    1       DCL LAST BIT(1);
     1590     3636    1       DCL BUFPND# SBIN;
     1591     3637    1       DCL LATCH SBIN STATIC;
     1592     3638    1       DCL LATCHTMP SBIN;
     1593     3639    1       DCL NUM SBIN;
     1594     3640    1       DCL PARM1 SBIN;
     1595     3641    1       DCL PARM2 SBIN;
     1596     3642    1       DCL PARM3 SBIN;
     1597     3643    1       DCL BUF$ PTR;
     1598     3644    1       DCL B$PTR PTR BASED;
     1599     3645    1       DCL XSL_KEYBUF(0:15) SBIN HALF HALIGNED SYMREF;
     1600     3646    1       DCL DUMMYCHARS CHAR(255);
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:234  
     1601     3647    1       DCL PARM3CHARS CHAR( PARM2) BASED;
     1602     3648    1       DCL PARM2CHARS CHAR( PARM1) BASED;
     1603     3649            /* the following table is indexed by RQS/RSP msgCode, and indicates the
     1604     3650               number of leading halfwords in KEYBUF that should be converted between
     1605     3651               XPS and Host formats */
     1606     3652    1       DCL HCOUNT(0:40) UBIN BYTE CONSTANT INIT(
     1607     3653    1           0, /* unused */
     1608     3654    1           2, /* ACCEPTRQS */
     1609     3655    1           5, /* ACCEPTRSP */
     1610     3656    1           3, /* BINDRQS */
     1611     3657    1           3, /* BINDRSP */
     1612     3658    1           3, /* CONNECTRQS */
     1613     3659    1           3, /* CONNECTRSP */
     1614     3660    1           3, /* GETSOCKOPTRQS */
     1615     3661    1           4, /* GETSOCKOPTRSP */
     1616     3662    1           1, /* GIVEUPRQS */
     1617     3663    1           2, /* GIVEUPRSP */
     1618     3664    1           2, /* LISTENRQS */
     1619     3665    1           3, /* LISTENRSP */
     1620     3666    1           3, /* RECVRQS */
     1621     3667    1           3, /* RECVRSP */
     1622     3668    1           3, /* RECVFROMRQS */
     1623     3669    1           5, /* RECVFROMRSP */
     1624     3670    1           3, /* SELECTRQS */
     1625     3671    1           4, /* SELECTRSP */
     1626     3672    1           2, /* SENDRQS */
     1627     3673    1           3, /* SENDRSP */
     1628     3674    1           4, /* SENDTORQS */
     1629     3675    1           3, /* SENDTORSP */
     1630     3676    1           4, /* SETSOCKOPTRQS */
     1631     3677    1           3, /* SETSOCKOPTRSP */
     1632     3678    1           2, /* SHUTDOWNRQS */
     1633     3679    1           3, /* SHUTDOWNRSP */
     1634     3680    1           4, /* SOCKETRQS */
     1635     3681    1           3, /* SOCKETRSP */
     1636     3682    1           2, /* GETSOCKNAMERQS */
     1637     3683    1           3, /* GETSOCKNAMERSP */
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:235  
     1638     3684    1           2, /* GETPEERNAMERQS */
     1639     3685    1           3, /* GETPEERNAMERSP */
     1640     3686    1           1, /* IOCTLRQS */
     1641     3687    1           3, /* IOCTLRSP */
     1642     3688    1           1, /* DETACHRQS */
     1643     3689    1           0, /* **do not use #36** */
     1644     3690    1           0, /* reserved for #37 */
     1645     3691    1           0, /* reserved for #38 */
     1646     3692    1           0, /* reserved for #39 */
     1647     3693    1           0  /* reserved for #40 */
     1648     3694    1           ) CALIGNED;
     1649     3695
     1650     3696    1   XSL$CL_WRITE: ENTRY( SOCK, PARM1, PARM2, PARM3) ALTRET;

   3696  3 000003   000000 700200 xent  XSL$CL_WRITE TSX0  ! X66_AUTO_4
         3 000004   000126 000004                    ZERO    86,4

     1651     3697
     1652     3698            /* PARM1 is size of key buffer, PARM2 is optional size of data buffer */
     1653     3699            /* If PARM2 specified, data buffer located at PARM3 */
     1654     3700    1       LATCH = XSL_KEYBUF(0);

   3700  3 000005   000000 235000 xsym               LDA     XSL_KEYBUF
         3 000006   000022 731000                    ARS     18
         3 000007   000206 755000 1                  STA     LATCH

     1655     3701    1       IF LATCH = %CONNECTRQS AND SOCK.FLAGS.CONNECTING THEN

   3701  3 000010   000005 115007                    CMPA    5,DL
         3 000011   000017 601000 3                  TNZ     s:3703
         3 000012   200003 470500                    LDP0    @SOCK,,AUTO
         3 000013   000001 236100                    LDQ     1,,PR0
         3 000014   000200 316003                    CANQ    128,DU
         3 000015   000017 600000 3                  TZE     s:3703

     1656     3702    1           RETURN;

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:236  
   3702  3 000016   000000 702200 xent               TSX2  ! X66_ARET

     1657     3703    1       IF LATCH = %ACCEPTRQS AND SOCK.FLAGS.ACCEPTING THEN

   3703  3 000017   000001 115007                    CMPA    1,DL
         3 000020   000026 601000 3                  TNZ     s:3705
         3 000021   200003 470500                    LDP0    @SOCK,,AUTO
         3 000022   000001 236100                    LDQ     1,,PR0
         3 000023   000100 316003                    CANQ    64,DU
         3 000024   000026 600000 3                  TZE     s:3705

     1658     3704    1           RETURN;

   3704  3 000025   000000 702200 xent               TSX2  ! X66_ARET

     1659     3705    1       NUM = HCOUNT( XSL_KEYBUF(0));

   3705  3 000026   000100 101405                    MRL     fill='000'O
         3 000027   000024 000001 2                  ADSC9   HCOUNT,A                 cn=0,n=1
         3 000030   200012 000004                    ADSC9   NUM,,AUTO                cn=0,n=4

     1660     3706    1       CALL XSL$H9TO8( NUM);  /* convert first NUM halfwords 9-to-8 */

   3706  3 000031   200012 630500                    EPPR0   NUM,,AUTO
         3 000032   200122 450500                    STP0    X+2,,AUTO
         3 000033   200122 630500                    EPPR0   X+2,,AUTO
         3 000034   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000035   000000 701000 xent               TSX1    XSL$H9TO8
         3 000036   000000 011000                    NOP     0

     1661     3707    1       FPT_WRITE.V.DCB# = SOCK.DCB#;

   3707  3 000037   200003 470500                    LDP0    @SOCK,,AUTO
         3 000040   000003 720100                    LXL0    3,,PR0
         3 000041   000162 740000 1                  STX0    FPT_WRITE+8

     1662     3708    1       ADDR(FPT_WRITE.KEY_) -> VLP_VECTOR.W1.VSIZE# = PARM1-1;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:237  

   3708  3 000042   200004 471500                    LDP1    @PARM1,,AUTO
         3 000043   100000 236100                    LDQ     0,,PR1
         3 000044   000001 136007                    SBLQ    1,DL
         3 000045   000020 736000                    QLS     16
         3 000046   000154 676000 1                  ERQ     FPT_WRITE+2
         3 000047   000034 376000 xsym               ANQ     B_VECTNIL+28
         3 000050   000154 656000 1                  ERSQ    FPT_WRITE+2

     1663     3709    1       IF ADDR( PARM2) = ADDR( NIL) OR PARM2 = 0 THEN

   3709  3 000051   200005 236100                    LDQ     @PARM2,,AUTO
         3 000052   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000053   000057 600000 3                  TZE     s:3710
         3 000054   200005 473500                    LDP3    @PARM2,,AUTO
         3 000055   300000 235100                    LDA     0,,PR3
         3 000056   000062 601000 3                  TNZ     s:3712

     1664     3710    1           FPT_WRITE.BUF_ = VECTOR( NIL);

   3710  3 000057   000000 237000 4                  LDAQ    0
         3 000060   000156 757000 1                  STAQ    FPT_WRITE+4
         3 000061   000072 710000 3                  TRA     s:3715

     1665     3711    2       ELSE DO;

     1666     3712    2           FPT_WRITE.BUF_.BUF$ = ADDR( PARM3);

   3712  3 000062   200006 236100                    LDQ     @PARM3,,AUTO
         3 000063   000157 756000 1                  STQ     FPT_WRITE+5

     1667     3713    2           FPT_WRITE.BUF_.BOUND = PARM2 - 1;

   3713  3 000064   300000 236100                    LDQ     0,,PR3
         3 000065   000001 136007                    SBLQ    1,DL
         3 000066   000020 736000                    QLS     16
         3 000067   000156 676000 1                  ERQ     FPT_WRITE+4
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:238  
         3 000070   000034 376000 xsym               ANQ     B_VECTNIL+28
         3 000071   000156 656000 1                  ERSQ    FPT_WRITE+4

     1668     3714    2           END;

     1669     3715    1       IF LATCH = %SENDTORQS OR LATCH = %SENDRQS OR LATCH = %SELECTRQS OR

   3715  3 000072   000206 235000 1                  LDA     LATCH
         3 000073   000025 115007                    CMPA    21,DL
         3 000074   000115 600000 3                  TZE     s:3718
         3 000075   000023 115007                    CMPA    19,DL
         3 000076   000115 600000 3                  TZE     s:3718
         3 000077   000021 115007                    CMPA    17,DL
         3 000100   000115 600000 3                  TZE     s:3718
         3 000101   000011 115007                    CMPA    9,DL
         3 000102   000115 600000 3                  TZE     s:3718
         3 000103   000043 115007                    CMPA    35,DL
         3 000104   000115 600000 3                  TZE     s:3718
         3 000105   000002 473400 4                  LDP3    2
         3 000106   300000 474500                    LDP4    0,,PR3
         3 000107   000003 721100                    LXL1    3,,PR0
         3 000110   400000 475511                    LDP5    0,X1,PR4
         3 000111   500074 236100                    LDQ     60,,PR5
         3 000112   377000 376003                    ANQ     130560,DU
         3 000113   003000 116003                    CMPQ    1536,DU
         3 000114   000144 601000 3                  TNZ     s:3727

     1670     3716    1         LATCH = %GIVEUPRQS OR LATCH = %DETACHRQS OR
     1671     3717    2         DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) = 3 THEN DO;

     1672     3718    2           LATCHTMP = LATCH;

   3718  3 000115   200011 755100                    STA     LATCHTMP,,AUTO

     1673     3719    2           LATCH = 0;

   3719  3 000116   000206 450000 1                  STZ     LATCH
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:239  

     1674     3720    2           IF SOCK.FLAGS.BLOCKING THEN

   3720  3 000117   000001 430100                    FSZN    1,,PR0
         3 000120   000124 605000 3                  TPL     s:3723

     1675     3721    2               FPT_WRITE.V.DVBYTE.NODAT# = '0'B;

   3721  3 000121   000003 236000 4                  LDQ     3
         3 000122   000165 356000 1                  ANSQ    FPT_WRITE+11
         3 000123   000126 710000 3                  TRA     s:3724

     1676     3722    2           ELSE
     1677     3723    2               FPT_WRITE.V.DVBYTE.NODAT# = '1'B;

   3723  3 000124   004000 236003                    LDQ     2048,DU
         3 000125   000165 256000 1                  ORSQ    FPT_WRITE+11

     1678     3724    2           CALL XSL$EVLOG( 'WR', ADDR(SOCK));

   3724  3 000126   200003 236100                    LDQ     @SOCK,,AUTO
         3 000127   200122 756100                    STQ     X+2,,AUTO
         3 000130   200122 633500                    EPPR3   X+2,,AUTO
         3 000131   200125 453500                    STP3    X+5,,AUTO
         3 000132   000004 236000 4                  LDQ     4
         3 000133   200124 756100                    STQ     X+4,,AUTO
         3 000134   200124 630500                    EPPR0   X+4,,AUTO
         3 000135   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000136   000000 701000 xent               TSX1    XSL$EVLOG
         3 000137   000000 011000                    NOP     0

     1679     3725    2           CALL M$WRITE( FPT_WRITE) ALTRET( OOPSLOG);

   3725  3 000140   000152 630400 1                  EPPR0   FPT_WRITE
         3 000141   440001 713400                    CLIMB   alt,write
         3 000142   401400 401760                    pmme    nvectors=4
         3 000143   001110 702000 3                  TSX2    OOPSLOG
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:240  

     1680     3726    2           END;

     1681     3727    1       RETURN;

   3727  3 000144   000000 702200 xent               TSX2  ! X66_ARET

     1682     3728
     1683     3729    1   XSL$CL_READ: ENTRY( SOCK, PARM1, PARM2) ALTRET;

   3729  3 000145   000000 700200 xent  XSL$CL_READ  TSX0  ! X66_AUTO_4
         3 000146   000126 000004                    ZERO    86,4

     1684     3730
     1685     3731            /* PARM1 is optional size of data buffer */
     1686     3732            /* If PARM1 specified, data buffer located at PARM2 */
     1687     3733    1   READ_IT:
     1688     3734    1       FPT_READ.V.DCB# = SOCK.DCB#;

   3734  3 000147   200003 470500       READ_IT      LDP0    @SOCK,,AUTO
         3 000150   000003 720100                    LXL0    3,,PR0
         3 000151   000144 740000 1                  STX0    FPT_READ+8

     1689     3735    1       IF ADDR( PARM1) = ADDR( NIL) OR PARM1 = 0 THEN

   3735  3 000152   200004 236100                    LDQ     @PARM1,,AUTO
         3 000153   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000154   000160 600000 3                  TZE     s:3738
         3 000155   200004 471500                    LDP1    @PARM1,,AUTO
         3 000156   100000 235100                    LDA     0,,PR1
         3 000157   000166 601000 3                  TNZ     s:3740

     1690     3736                /* can't just specify a key on a read, no credits
     1691     3737                 get sent to the other end*/
     1692     3738    1           FPT_READ.BUF_ = VECTOR( DUMMYCHARS);

   3738  3 000160   000005 235000 4                  LDA     5
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:241  
         3 000161   200122 452500                    STP2    X+2,,AUTO
         3 000162   200122 236100                    LDQ     X+2,,AUTO
         3 000163   000014 036003                    ADLQ    12,DU
         3 000164   000140 757000 1                  STAQ    FPT_READ+4
         3 000165   000174 710000 3                  TRA     s:3741

     1693     3739    1       ELSE
     1694     3740    1           FPT_READ.BUF_ = VECTOR( ADDR( PARM2)-> PARM2CHARS);

   3740  3 000166   100000 721100                    LXL1    0,,PR1
         3 000167   000000 635011                    EAA     0,X1
         3 000170   000002 731000                    ARS     2
         3 000171   000140 135007                    SBLA    96,DL
         3 000172   200005 236100                    LDQ     @PARM2,,AUTO
         3 000173   000140 757000 1                  STAQ    FPT_READ+4

     1695     3741    1       NUM = XSL_KEYBUF(0)+1; /* Save the message type that requested this one */

   3741  3 000174   000000 235000 xsym               LDA     XSL_KEYBUF
         3 000175   000022 731000                    ARS     18
         3 000176   000001 035007                    ADLA    1,DL
         3 000177   200012 755100                    STA     NUM,,AUTO

     1696     3742    1       IF NUM = %CONNECTRSP AND SOCK.FLAGS.CONNECTING THEN

   3742  3 000200   000006 115007                    CMPA    6,DL
         3 000201   000205 601000 3                  TNZ     s:3744
         3 000202   000001 236100                    LDQ     1,,PR0
         3 000203   000200 316003                    CANQ    128,DU
         3 000204   000411 601000 3                  TNZ     LOOK4IT

     1697     3743    1           GOTO LOOK4IT;
     1698     3744    1       IF NUM = %ACCEPTRSP AND SOCK.FLAGS.ACCEPTING THEN

   3744  3 000205   000002 115007                    CMPA    2,DL
         3 000206   000212 601000 3                  TNZ     s:3746
         3 000207   000001 236100                    LDQ     1,,PR0
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:242  
         3 000210   000100 316003                    CANQ    64,DU
         3 000211   000411 601000 3                  TNZ     LOOK4IT

     1699     3745    1           GOTO LOOK4IT;
     1700     3746    1       IF SOCK.MAXRDS = 0 OR SOCK.FLAGS.MUSTREAD OR

   3746  3 000212   000020 721100                    LXL1    16,,PR0
         3 000213   000225 600000 3                  TZE     s:3749
         3 000214   000001 236100                    LDQ     1,,PR0
         3 000215   000001 316003                    CANQ    1,DU
         3 000216   000225 601000 3                  TNZ     s:3749
         3 000217   200004 236100                    LDQ     @PARM1,,AUTO
         3 000220   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000221   000325 600000 3                  TZE     s:3780
         3 000222   200004 471500                    LDP1    @PARM1,,AUTO
         3 000223   100000 235100                    LDA     0,,PR1
         3 000224   000325 600000 3                  TZE     s:3780

     1701     3747    2         ( ADDR( PARM1) ~= ADDR( NIL) AND PARM1 ~= 0) THEN DO;

     1702     3748                /* must use Wait read */
     1703     3749    3           IF LATCH = 0 THEN DO;

   3749  3 000225   000206 235000 1                  LDA     LATCH
         3 000226   000235 601000 3                  TNZ     s:3754

     1704     3750    3               FPT_READ.V.KEYS# = %NO#;

   3750  3 000227   000006 236000 4                  LDQ     6
         3 000230   000144 356000 1                  ANSQ    FPT_READ+8

     1705     3751    3               XSL_KEYBUF = '0'B;

   3751  3 000231   000000 100400                    MLR     fill='000'O
         3 000232   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000233   000000 000040 xsym               ADSC9   XSL_KEYBUF               cn=0,n=32

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:243  
     1706     3752    3               END;

   3752  3 000234   000240 710000 3                  TRA     s:3758

     1707     3753    3           ELSE DO;

     1708     3754    3               FPT_READ.V.KEYS# = %YES#;

   3754  3 000235   200000 236007                    LDQ     65536,DL
         3 000236   000144 256000 1                  ORSQ    FPT_READ+8

     1709     3755    3               LATCH = 0;

   3755  3 000237   000206 450000 1                  STZ     LATCH

     1710     3756    3               END;

     1711     3757    3           DO INHIBIT;

     1712     3758    3               IF SOCK.BUFHD ~= 0 THEN

   3758  3 000240   000016 221300                    LDX1  ! 14,,PR0
         3 000241   000246 600200 3                  TZE   ! s:3760

     1713     3759    3                   CALL CANCEL( SOCK);

   3759  3 000242   200003 236300                    LDQ   ! @SOCK,,AUTO
         3 000243   200115 756300                    STQ   ! DUMMYCHARS+65,,AUTO
         3 000244   001200 701200 3                  TSX1  ! CANCEL
         3 000245   000000 011200                    NOP   ! 0

     1714     3760    3               IF SOCK.FLAGS.SELREAD AND NOT SOCK.FLAGS.MUSTREAD THEN

   3760  3 000246   200003 470700                    LDP0  ! @SOCK,,AUTO
         3 000247   000001 236300                    LDQ   ! 1,,PR0
         3 000250   000040 316203                    CANQ  ! 32,DU
         3 000251   000254 600200 3                  TZE   ! REREAD
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:244  
         3 000252   000001 316203                    CANQ  ! 1,DU
         3 000253   000411 600200 3                  TZE   ! LOOK4IT

     1715     3761    3                   GOTO LOOK4IT;
     1716     3762    3   REREAD:
     1717     3763    3               SOCK.FLAGS.MUSTREAD = '0'B;

   3763  3 000254   200003 470700       REREAD       LDP0  ! @SOCK,,AUTO
         3 000255   000007 236200 4                  LDQ   ! 7
         3 000256   000001 356300                    ANSQ  ! 1,,PR0

     1718     3764    3               CALL XSL$EVLOG( 'RD', ADDR(SOCK));

   3764  3 000257   200003 236300                    LDQ   ! @SOCK,,AUTO
         3 000260   200122 756300                    STQ   ! X+2,,AUTO
         3 000261   200122 631700                    EPPR1 ! X+2,,AUTO
         3 000262   200125 451700                    STP1  ! X+5,,AUTO
         3 000263   000010 236200 4                  LDQ   ! 8
         3 000264   200124 756300                    STQ   ! X+4,,AUTO
         3 000265   200124 630700                    EPPR0 ! X+4,,AUTO
         3 000266   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000267   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000270   000000 011200                    NOP   ! 0

     1719     3765    3               CALL M$READ( FPT_READ) ALTRET( OOPSLOG);

   3765  3 000271   000134 630600 1                  EPPR0 ! FPT_READ
         3 000272   440000 713600                    CLIMB ! alt,read
         3 000273   401400 401760                    pmme    nvectors=4
         3 000274   001110 702200 3                  TSX2  ! OOPSLOG

     1720     3766    3               END;

     1721     3767    3           IF NUM ~= XSL_KEYBUF(0) THEN DO;  /* got the wrong one ?!? */

   3767  3 000275   000000 236000 xsym               LDQ     XSL_KEYBUF
         3 000276   000022 732000                    QRS     18
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:245  
         3 000277   200012 116100                    CMPQ    NUM,,AUTO
         3 000300   000324 600000 3                  TZE     s:3776

     1722     3768    3               IF XSL_KEYBUF(0) = %SENDRSP OR XSL_KEYBUF(0) = %SENDTORSP THEN

   3768  3 000301   000000 620006                    EAX0    0,QL
         3 000302   000024 100003                    CMPX0   20,DU
         3 000303   000307 600000 3                  TZE     s:3769
         3 000304   000000 220000 xsym               LDX0    XSL_KEYBUF
         3 000305   000026 100003                    CMPX0   22,DU
         3 000306   000321 601000 3                  TNZ     s:3773

     1723     3769    4                   IF XSL_KEYBUF(2) = 255 AND XSL_KEYBUF(3) = 255 THEN DO;

   3769  3 000307   000001 220000 xsym               LDX0    XSL_KEYBUF+1
         3 000310   000377 100003                    CMPX0   255,DU
         3 000311   000321 601000 3                  TNZ     s:3773
         3 000312   000001 721000 xsym               LXL1    XSL_KEYBUF+1
         3 000313   000377 101003                    CMPX1   255,DU
         3 000314   000321 601000 3                  TNZ     s:3773

     1724     3770    4                       SOCK.FEPERROR = XSL_KEYBUF(5);

   3770  3 000315   200003 470500                    LDP0    @SOCK,,AUTO
         3 000316   000002 236000 xsym               LDQ     XSL_KEYBUF+2
         3 000317   000001 552104                    STBQ    1,'04'O,PR0

     1725     3771    4                       GOTO REREAD;

   3771  3 000320   000254 710000 3                  TRA     REREAD

     1726     3772    4                       END;
     1727     3773    3               XSL_KEYBUF(2) = %E$SOCKTNOSUPPORT;

   3773  3 000321   000147 220003                    LDX0    103,DU
         3 000322   000001 740000 xsym               STX0    XSL_KEYBUF+1

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:246  
     1728     3774    3               GOTO OOPS1;

   3774  3 000323   001166 710000 3                  TRA     OOPS1

     1729     3775    3               END;
     1730     3776    2           GOTO CLEANUP;

   3776  3 000324   000575 710000 3                  TRA     CLEANUP

     1731     3777    2           END;
     1732     3778    2       ELSE DO;

     1733     3779                /* NoWait reads are allowed */
     1734     3780    3           IF DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) = 3 THEN DO;

   3780  3 000325   000002 471400 4                  LDP1    2
         3 000326   100000 473500                    LDP3    0,,PR1
         3 000327   000003 722100                    LXL2    3,,PR0
         3 000330   300000 474512                    LDP4    0,X2,PR3
         3 000331   400074 236100                    LDQ     60,,PR4
         3 000332   377000 376003                    ANQ     130560,DU
         3 000333   003000 116003                    CMPQ    1536,DU
         3 000334   000373 601000 3                  TNZ     s:3795

     1735     3781                    /* 3 reads already pending */
     1736     3782    4               IF LATCH ~= 0 THEN DO;

   3782  3 000335   000206 235000 1                  LDA     LATCH
         3 000336   000411 600000 3                  TZE     LOOK4IT

     1737     3783    4   WRITE_IT:
     1738     3784    4                   FPT_WRITE.BUF_ = VECTOR( DUMMYCHARS);

   3784  3 000337   000005 235000 4     WRITE_IT     LDA     5
         3 000340   200122 452500                    STP2    X+2,,AUTO
         3 000341   200122 236100                    LDQ     X+2,,AUTO
         3 000342   000014 036003                    ADLQ    12,DU
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:247  
         3 000343   000156 757000 1                  STAQ    FPT_WRITE+4

     1739     3785    4                   IF SOCK.FLAGS.BLOCKING THEN

   3785  3 000344   200003 470500                    LDP0    @SOCK,,AUTO
         3 000345   000001 430100                    FSZN    1,,PR0
         3 000346   000352 605000 3                  TPL     s:3788

     1740     3786    4                       FPT_WRITE.V.DVBYTE.NODAT# = '0'B;

   3786  3 000347   000003 236000 4                  LDQ     3
         3 000350   000165 356000 1                  ANSQ    FPT_WRITE+11
         3 000351   000354 710000 3                  TRA     s:3789

     1741     3787    4                   ELSE
     1742     3788    4                       FPT_WRITE.V.DVBYTE.NODAT# = '1'B;

   3788  3 000352   004000 236003                    LDQ     2048,DU
         3 000353   000165 256000 1                  ORSQ    FPT_WRITE+11

     1743     3789    4                   CALL XSL$EVLOG( 'WR', ADDR(SOCK));

   3789  3 000354   200003 236100                    LDQ     @SOCK,,AUTO
         3 000355   200122 756100                    STQ     X+2,,AUTO
         3 000356   200122 631500                    EPPR1   X+2,,AUTO
         3 000357   200125 451500                    STP1    X+5,,AUTO
         3 000360   000004 236000 4                  LDQ     4
         3 000361   200124 756100                    STQ     X+4,,AUTO
         3 000362   200124 630500                    EPPR0   X+4,,AUTO
         3 000363   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000364   000000 701000 xent               TSX1    XSL$EVLOG
         3 000365   000000 011000                    NOP     0

     1744     3790    4                   CALL M$WRITE( FPT_WRITE) ALTRET( OOPSLOG);

   3790  3 000366   000152 630400 1                  EPPR0   FPT_WRITE
         3 000367   440001 713400                    CLIMB   alt,write
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:248  
         3 000370   401400 401760                    pmme    nvectors=4
         3 000371   001110 702000 3                  TSX2    OOPSLOG

     1745     3791    4                   END;

     1746     3792    3               END;

   3792  3 000372   000411 710000 3                  TRA     LOOK4IT

     1747     3793    3           ELSE DO;

     1748     3794                    /* fewer than 3 reads pending */
     1749     3795    3               IF LATCH ~= 0 THEN

   3795  3 000373   000206 235000 1                  LDA     LATCH
         3 000374   000405 600000 3                  TZE     s:3798

     1750     3796    3                   CALL XSL$GETBUF( SOCK, XSL_KEYBUF) ALTRET( WRITE_IT);

   3796  3 000375   000011 236000 4                  LDQ     9
         3 000376   200003 235100                    LDA     @SOCK,,AUTO
         3 000377   200122 757100                    STAQ    X+2,,AUTO
         3 000400   200122 630500                    EPPR0   X+2,,AUTO
         3 000401   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000402   000000 701000 xent               TSX1    XSL$GETBUF
         3 000403   000337 702000 3                  TSX2    WRITE_IT
         3 000404   000411 710000 3                  TRA     LOOK4IT

     1751     3797    3               ELSE
     1752     3798    3                   CALL XSL$GETBUF( SOCK);  /* ignore ALTRET here */

   3798  3 000405   200003 630500                    EPPR0   @SOCK,,AUTO
         3 000406   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000407   000000 701000 xent               TSX1    XSL$GETBUF
         3 000410   000000 011000                    NOP     0

     1753     3799    3               END;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:249  

     1754     3800    2           END;

     1755     3801    1   LOOK4IT:
     1756     3802    1       BUFPND# = SOCK.BUFPND#;

   3802  3 000411   200003 470500       LOOK4IT      LDP0    @SOCK,,AUTO
         3 000412   000017 236100                    LDQ     15,,PR0
         3 000413   777777 376007                    ANQ     -1,DL
         3 000414   200010 756100                    STQ     BUFPND#,,AUTO

     1757     3803    1       BUF$ = PINCRW( XSL_SOCK$$, SOCK.BUFHD);

   3803  3 000415   000016 220100                    LDX0    14,,PR0
         3 000416   000000 636010                    EAQ     0,X0
         3 000417   000000 036000 xsym               ADLQ    XSL_SOCK$$
         3 000420   200013 756100                    STQ     BUF$,,AUTO

     1758     3804    2       DO WHILE( BUF$ ~= XSL_SOCK$$);

   3804  3 000421   000000 116000 xsym               CMPQ    XSL_SOCK$$
         3 000422   000473 600000 3                  TZE     s:3820

     1759     3805    2           IF DATABUF.FLAGS.BUSY THEN EXIT;

   3805  3 000423   200013 470500                    LDP0    BUF$,,AUTO
         3 000424   000001 234100                    SZN     1,,PR0
         3 000425   000473 604000 3                  TMI     s:3820

     1760     3806    3           IF NUM = DATABUF.KEY(1) THEN DO;

   3806  3 000426   000002 236100                    LDQ     2,,PR0
         3 000427   000022 772000                    QRL     18
         3 000430   000777 376007                    ANQ     511,DL
         3 000431   200012 116100                    CMPQ    NUM,,AUTO
         3 000432   000465 601000 3                  TNZ     s:3818

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:250  
     1761     3807                    /* found the RSP we're looking for */
     1762     3808    3               XSL_KEYBUF = DATABUF.KEY;

   3808  3 000433   000000 100500                    MLR     fill='000'O
         3 000434   000002 000040                    ADSC9   2,,PR0                   cn=0,n=32
         3 000435   000000 000040 xsym               ADSC9   XSL_KEYBUF               cn=0,n=32

     1763     3809    4               IF NUM ~= %RECVRSP AND NUM ~= %RECVFROMRSP THEN DO INHIBIT;

   3809  3 000436   200012 235100                    LDA     NUM,,AUTO
         3 000437   000016 115007                    CMPA    14,DL
         3 000440   000464 600000 3                  TZE     s:3816
         3 000441   000020 115007                    CMPA    16,DL
         3 000442   000464 600000 3                  TZE     s:3816

     1764     3810    4                   SOCK.DAT# = SOCK.DAT# - 1;

   3810  3 000443   200003 471700                    LDP1  ! @SOCK,,AUTO
         3 000444   100021 720300                    LXL0  ! 17,,PR1
         3 000445   777777 621210                    EAX1  ! -1,X0
         3 000446   100021 441300                    SXL1  ! 17,,PR1

     1765     3811    4                   IF SOCK.DAT# = 0 THEN

   3811  3 000447   000452 601200 3                  TNZ   ! s:3813

     1766     3812    4                       SOCK.FLAGS.SELREAD = '0'B;

   3812  3 000450   000012 236200 4                  LDQ   ! 10
         3 000451   100001 356300                    ANSQ  ! 1,,PR1

     1767     3813    4                   SOCK.BUFPND# = SOCK.BUFPND# - 1;

   3813  3 000452   100017 720300                    LXL0  ! 15,,PR1
         3 000453   777777 622210                    EAX2  ! -1,X0
         3 000454   100017 442300                    SXL2  ! 15,,PR1

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:251  
     1768     3814    4                   CALL XSL$RELBUF( SOCK, DATABUF);

   3814  3 000455   200013 236300                    LDQ   ! BUF$,,AUTO
         3 000456   200003 235300                    LDA   ! @SOCK,,AUTO
         3 000457   200122 757300                    STAQ  ! X+2,,AUTO
         3 000460   200122 630700                    EPPR0 ! X+2,,AUTO
         3 000461   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000462   000000 701200 xent               TSX1  ! XSL$RELBUF
         3 000463   000000 011200                    NOP   ! 0

     1769     3815    4                   END;

     1770     3816    3               GOTO CLEANUP;

   3816  3 000464   000575 710000 3                  TRA     CLEANUP

     1771     3817    3               END;
     1772     3818    2           BUF$ = PINCRW( XSL_SOCK$$, DATABUF.NXT);

   3818  3 000465   000001 720100                    LXL0    1,,PR0
         3 000466   000000 636010                    EAQ     0,X0
         3 000467   000000 036000 xsym               ADLQ    XSL_SOCK$$
         3 000470   200013 756100                    STQ     BUF$,,AUTO

     1773     3819    2           END;

   3819  3 000471   000000 116000 xsym               CMPQ    XSL_SOCK$$
         3 000472   000423 601000 3                  TNZ     s:3805

     1774     3820    2       IF SOCK.FLAGS.CONNECTING THEN DO;

   3820  3 000473   200003 470500                    LDP0    @SOCK,,AUTO
         3 000474   000001 236100                    LDQ     1,,PR0
         3 000475   000200 316003                    CANQ    128,DU
         3 000476   000502 600000 3                  TZE     s:3824

     1775     3821    2           XSL_KEYBUF(2) = %E$ALREADY;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:252  

   3821  3 000477   000140 220003                    LDX0    96,DU
         3 000500   000001 740000 xsym               STX0    XSL_KEYBUF+1

     1776     3822    2           GOTO OOPS1;

   3822  3 000501   001166 710000 3                  TRA     OOPS1

     1777     3823    2           END;
     1778     3824    2       IF NUM = %CONNECTRSP AND NOT SOCK.FLAGS.BLOCKING THEN DO;

   3824  3 000502   200012 235100                    LDA     NUM,,AUTO
         3 000503   000006 115007                    CMPA    6,DL
         3 000504   000514 601000 3                  TNZ     s:3829
         3 000505   000001 430100                    FSZN    1,,PR0
         3 000506   000514 604000 3                  TMI     s:3829

     1779     3825    2           SOCK.FLAGS.CONNECTING = '1'B;

   3825  3 000507   000200 236003                    LDQ     128,DU
         3 000510   000001 256100                    ORSQ    1,,PR0

     1780     3826    2           XSL_KEYBUF(2) = %E$INPROGRESS;

   3826  3 000511   000137 220003                    LDX0    95,DU
         3 000512   000001 740000 xsym               STX0    XSL_KEYBUF+1

     1781     3827    2           GOTO OOPS1;

   3827  3 000513   001166 710000 3                  TRA     OOPS1

     1782     3828    2           END;
     1783     3829    2       IF SOCK.FLAGS.ACCEPTING THEN DO;

   3829  3 000514   000100 316003                    CANQ    64,DU
         3 000515   000521 600000 3                  TZE     s:3833

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:253  
     1784     3830    2           XSL_KEYBUF(2) = %E$WOULDBLOCK;

   3830  3 000516   000136 220003                    LDX0    94,DU
         3 000517   000001 740000 xsym               STX0    XSL_KEYBUF+1

     1785     3831    2           GOTO OOPS1;

   3831  3 000520   001166 710000 3                  TRA     OOPS1

     1786     3832    2           END;
     1787     3833    2       IF NUM = %ACCEPTRSP AND NOT SOCK.FLAGS.BLOCKING THEN DO;

   3833  3 000521   000002 115007                    CMPA    2,DL
         3 000522   000532 601000 3                  TNZ     s:3839
         3 000523   000001 430100                    FSZN    1,,PR0
         3 000524   000532 604000 3                  TMI     s:3839

     1788     3834    2           SOCK.FLAGS.ACCEPTING = '1'B;

   3834  3 000525   000100 236003                    LDQ     64,DU
         3 000526   000001 256100                    ORSQ    1,,PR0

     1789     3835    2           XSL_KEYBUF(2) = %E$WOULDBLOCK;

   3835  3 000527   000136 220003                    LDX0    94,DU
         3 000530   000001 740000 xsym               STX0    XSL_KEYBUF+1

     1790     3836    2           GOTO OOPS1;

   3836  3 000531   001166 710000 3                  TRA     OOPS1

     1791     3837    2           END;
     1792     3838    2       DO INHIBIT;

     1793     3839    2           IF DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) = 0 THEN

   3839  3 000532   000002 471600 4                  LDP1  ! 2
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:254  
         3 000533   100000 473700                    LDP3  ! 0,,PR1
         3 000534   000003 720300                    LXL0  ! 3,,PR0
         3 000535   300000 474710                    LDP4  ! 0,X0,PR3
         3 000536   400074 236300                    LDQ   ! 60,,PR4
         3 000537   377000 316203                    CANQ  ! 130560,DU
         3 000540   000543 601200 3                  TNZ   ! s:3841

     1794     3840    2               SOCK.FLAGS.MUSTREAD = '1'B;

   3840  3 000541   000001 236203                    LDQ   ! 1,DU
         3 000542   000001 256300                    ORSQ  ! 1,,PR0

     1795     3841    2           IF SOCK.FLAGS.MUSTREAD THEN GOTO READ_IT;

   3841  3 000543   000001 236300                    LDQ   ! 1,,PR0
         3 000544   000001 316203                    CANQ  ! 1,DU
         3 000545   000147 601200 3                  TNZ   ! READ_IT

     1796     3842    2           IF BUFPND# ~= SOCK.BUFPND# THEN GOTO LOOK4IT;

   3842  3 000546   000017 236300                    LDQ   ! 15,,PR0
         3 000547   777777 376207                    ANQ   ! -1,DL
         3 000550   200010 116300                    CMPQ  ! BUFPND#,,AUTO
         3 000551   000411 601200 3                  TNZ   ! LOOK4IT

     1797     3843    2           XSL_UETIME = 0;

   3843  3 000552   000204 450200 1                  STZ   ! XSL_UETIME

     1798     3844    3           DO WHILE( XSL_UETIME = 0);

   3844  3 000553   000204 235200 1                  LDA   ! XSL_UETIME
         3 000554   000574 601200 3                  TNZ   ! s:3849

     1799     3845    3               CALL XSL$EVLOG( 'WT', ADDR(SOCK));

   3845  3 000555   200003 236300                    LDQ   ! @SOCK,,AUTO
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:255  
         3 000556   200122 756300                    STQ   ! X+2,,AUTO
         3 000557   200122 630700                    EPPR0 ! X+2,,AUTO
         3 000560   200125 450700                    STP0  ! X+5,,AUTO
         3 000561   000013 236200 4                  LDQ   ! 11
         3 000562   200124 756300                    STQ   ! X+4,,AUTO
         3 000563   200124 630700                    EPPR0 ! X+4,,AUTO
         3 000564   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000565   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000566   000000 011200                    NOP   ! 0

     1800     3846    3               CALL M$WAIT( XSL_WAIT1DAY);

   3846  3 000567   000000 630600 2                  EPPR0 ! XSL_WAIT1DAY
         3 000570   020006 713600                    CLIMB ! 8198
         3 000571   400400 401760                    pmme    nvectors=2

     1801     3847    3               END;

   3847  3 000572   000204 235200 1                  LDA   ! XSL_UETIME
         3 000573   000555 600200 3                  TZE   ! s:3845

     1802     3848    2           END;

     1803     3849    1       GOTO LOOK4IT;

   3849  3 000574   000411 710000 3                  TRA     LOOK4IT

     1804     3850    1   CLEANUP:
     1805     3851    1       IF NUM = %CONNECTRSP AND SOCK.FLAGS.CONNECTING THEN

   3851  3 000575   200012 235100       CLEANUP      LDA     NUM,,AUTO
         3 000576   000006 115007                    CMPA    6,DL
         3 000577   000606 601000 3                  TNZ     s:3853
         3 000600   200003 470500                    LDP0    @SOCK,,AUTO
         3 000601   000001 236100                    LDQ     1,,PR0
         3 000602   000200 316003                    CANQ    128,DU
         3 000603   000606 600000 3                  TZE     s:3853
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:256  

     1806     3852    1           SOCK.FLAGS.CONNECTING = '0'B;

   3852  3 000604   000014 236000 4                  LDQ     12
         3 000605   000001 356100                    ANSQ    1,,PR0

     1807     3853    1       IF NUM = %ACCEPTRSP AND SOCK.FLAGS.ACCEPTING THEN

   3853  3 000606   200012 235100                    LDA     NUM,,AUTO
         3 000607   000002 115007                    CMPA    2,DL
         3 000610   000617 601000 3                  TNZ     s:3855
         3 000611   200003 470500                    LDP0    @SOCK,,AUTO
         3 000612   000001 236100                    LDQ     1,,PR0
         3 000613   000100 316003                    CANQ    64,DU
         3 000614   000617 600000 3                  TZE     s:3855

     1808     3854    1           SOCK.FLAGS.ACCEPTING = '0'B;

   3854  3 000615   000015 236000 4                  LDQ     13
         3 000616   000001 356100                    ANSQ    1,,PR0

     1809     3855    1       NUM = HCOUNT( NUM);

   3855  3 000617   200012 235100                    LDA     NUM,,AUTO
         3 000620   000100 101405                    MRL     fill='000'O
         3 000621   000024 000001 2                  ADSC9   HCOUNT,A                 cn=0,n=1
         3 000622   200012 000004                    ADSC9   NUM,,AUTO                cn=0,n=4

     1810     3856    1       CALL XSL$H8TO9( NUM);  /* convert first NUM halfwords 8-to-9 */

   3856  3 000623   200012 630500                    EPPR0   NUM,,AUTO
         3 000624   200122 450500                    STP0    X+2,,AUTO
         3 000625   200122 630500                    EPPR0   X+2,,AUTO
         3 000626   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000627   000000 701000 xent               TSX1    XSL$H8TO9
         3 000630   000000 011000                    NOP     0

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:257  
     1811     3857    1       RETURN;

   3857  3 000631   000000 702200 xent               TSX2  ! X66_ARET

     1812     3858
     1813     3859    1   XSL$CL_OPEN: ENTRY( SOCK, PARM1, PARM2) ALTRET;

   3859  3 000632   000000 700200 xent  XSL$CL_OPEN  TSX0  ! X66_AUTO_4
         3 000633   000126 000004                    ZERO    86,4

     1814     3860
     1815     3861            /* PARM1 is an optional NAME structure, PARM2 is its length */
     1816     3862    1       IF ADDR( PARM1) = ADDR( NIL) THEN

   3862  3 000634   200004 236100                    LDQ     @PARM1,,AUTO
         3 000635   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000636   000645 601000 3                  TNZ     s:3865

     1817     3863    1           CALL SNSETUP( SOCK.SOCKNAME);

   3863  3 000637   200003 236100                    LDQ     @SOCK,,AUTO
         3 000640   000004 036003                    ADLQ    4,DU
         3 000641   200115 756100                    STQ     DUMMYCHARS+65,,AUTO
         3 000642   001302 701000 3                  TSX1    SNSETUP
         3 000643   000000 011000                    NOP     0
         3 000644   000650 710000 3                  TRA     s:3866

     1818     3864    1       ELSE
     1819     3865    1           CALL SNSETUP( PARM1);

   3865  3 000645   200115 756100                    STQ     DUMMYCHARS+65,,AUTO
         3 000646   001302 701000 3                  TSX1    SNSETUP
         3 000647   000000 011000                    NOP     0

     1820     3866    1       IF SOCK.MAXRDS = 0 THEN

   3866  3 000650   200003 470500                    LDP0    @SOCK,,AUTO
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:258  
         3 000651   000020 720100                    LXL0    16,,PR0
         3 000652   000655 601000 3                  TNZ     s:3869

     1821     3867    1           FPT_OPEN.V.EVENT# = 0;

   3867  3 000653   000065 450000 1                  STZ     FPT_OPEN+53
         3 000654   000657 710000 3                  TRA     s:3870

     1822     3868    1       ELSE
     1823     3869    1           ADDR( FPT_OPEN.V.EVENT#)->B$PTR = ADDR( SOCK);  /* for COMIO events */

   3869  3 000655   200003 236100                    LDQ     @SOCK,,AUTO
         3 000656   000065 756000 1                  STQ     FPT_OPEN+53

     1824     3870    1       LAST = '0'B;

   3870  3 000657   200007 450100                    STZ     LAST,,AUTO

   3870  3 000660                       AGAIN        null
     1825     3871    1   AGAIN: ;
     1826     3872    1       SOCK.SERNUM = VLP_SN.SN#(0);

   3872  3 000660   200003 470500                    LDP0    @SOCK,,AUTO
         3 000661   040100 100400                    MLR     fill='040'O
         3 000662   000073 000006 1                  ADSC9   VLP_SN+1                 cn=0,n=6
         3 000663   000002 000006                    ADSC9   2,,PR0                   cn=0,n=6

     1827     3873    1       FPT_OPEN.V.DCB# = SOCK.DCB#;

   3873  3 000664   000003 720100                    LXL0    3,,PR0
         3 000665   000044 740000 1                  STX0    FPT_OPEN+36

     1828     3874    1       FPT_OPEN.V.ATTR# = %ATTR_TCP_PRIV;

   3874  3 000666   604000 221003                    LDX1    -63488,DU
         3 000667   000062 741000 1                  STX1    FPT_OPEN+50

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:259  
     1829     3875    1       CALL XSL$EVLOG( 'OP', ADDR(SOCK));

   3875  3 000670   200003 236100                    LDQ     @SOCK,,AUTO
         3 000671   200122 756100                    STQ     X+2,,AUTO
         3 000672   200122 631500                    EPPR1   X+2,,AUTO
         3 000673   200125 451500                    STP1    X+5,,AUTO
         3 000674   000016 236000 4                  LDQ     14
         3 000675   200124 756100                    STQ     X+4,,AUTO
         3 000676   200124 630500                    EPPR0   X+4,,AUTO
         3 000677   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000700   000000 701000 xent               TSX1    XSL$EVLOG
         3 000701   000000 011000                    NOP     0

     1830     3876    1       CALL M$OPEN( FPT_OPEN)

   3876  3 000702   000000 630400 1                  EPPR0   FPT_OPEN
         3 000703   450000 713400                    CLIMB   alt,open
         3 000704   410400 401760                    pmme    nvectors=18
         3 000705   000707 702000 3                  TSX2    s:3878
         3 000706   000767 710000 3                  TRA     s:3896

     1831     3877    2       WHENALTRETURN DO;

     1832     3878    2           FPT_OPEN.V.ATTR# = %ATTR_TCP_NORMAL;

   3878  3 000707   204000 220003                    LDX0    67584,DU
         3 000710   000062 740000 1                  STX0    FPT_OPEN+50

     1833     3879    2           CALL XSL$EVLOG( 'OP', ADDR(SOCK));

   3879  3 000711   200003 236100                    LDQ     @SOCK,,AUTO
         3 000712   200122 756100                    STQ     X+2,,AUTO
         3 000713   200122 630500                    EPPR0   X+2,,AUTO
         3 000714   200125 450500                    STP0    X+5,,AUTO
         3 000715   000016 236000 4                  LDQ     14
         3 000716   200124 756100                    STQ     X+4,,AUTO
         3 000717   200124 630500                    EPPR0   X+4,,AUTO
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:260  
         3 000720   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000721   000000 701000 xent               TSX1    XSL$EVLOG
         3 000722   000000 011000                    NOP     0

     1834     3880    3           CALL M$OPEN( FPT_OPEN) WHENALTRETURN DO;

   3880  3 000723   000000 630400 1                  EPPR0   FPT_OPEN
         3 000724   450000 713400                    CLIMB   alt,open
         3 000725   410400 401760                    pmme    nvectors=18
         3 000726   000730 702000 3                  TSX2    s:3881
         3 000727   000767 710000 3                  TRA     s:3896

     1835     3881    3               IF LAST THEN GOTO OOPSLOG;

   3881  3 000730   200007 234100                    SZN     LAST,,AUTO
         3 000731   001110 604000 3                  TMI     OOPSLOG

     1836     3882    3               LAST = '1'B;

   3882  3 000732   400000 236003                    LDQ     -131072,DU
         3 000733   200007 756100                    STQ     LAST,,AUTO

     1837     3883    3               IF ADDR( PARM1) = ADDR( NIL) THEN

   3883  3 000734   200004 236100                    LDQ     @PARM1,,AUTO
         3 000735   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000736   000751 601000 3                  TNZ     s:3888

     1838     3884    3                   CALL XSL$ROUTES(

   3884  3 000737   000017 236000 4                  LDQ     15
         3 000740   200123 756100                    STQ     X+3,,AUTO
         3 000741   200003 236100                    LDQ     @SOCK,,AUTO
         3 000742   000006 036003                    ADLQ    6,DU
         3 000743   200122 756100                    STQ     X+2,,AUTO
         3 000744   200122 630500                    EPPR0   X+2,,AUTO
         3 000745   000020 631400 xsym               EPPR1   B_VECTNIL+16
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:261  
         3 000746   000000 701000 xent               TSX1    XSL$ROUTES
         3 000747   000763 702000 3                  TSX2    DFLT
         3 000750   000766 710000 3                  TRA     s:3893

     1839     3885    3                     ADDR( SOCK.SOCKNAME)->XSL$SOCKADDR_IN.S_ADDR,
     1840     3886    3                     VLP_SN.SN#(0)) ALTRET( DFLT);
     1841     3887    3               ELSE
     1842     3888    3                  CALL XSL$ROUTES( ADDR( PARM1)->XSL$SOCKADDR_IN.S_ADDR, VLP_SN.SN#(0)
              3888                            )

   3888  3 000751   000017 236000 4                  LDQ     15
         3 000752   200123 756100                    STQ     X+3,,AUTO
         3 000753   200004 236100                    LDQ     @PARM1,,AUTO
         3 000754   000002 036003                    ADLQ    2,DU
         3 000755   200122 756100                    STQ     X+2,,AUTO
         3 000756   200122 630500                    EPPR0   X+2,,AUTO
         3 000757   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000760   000000 701000 xent               TSX1    XSL$ROUTES
         3 000761   000763 702000 3                  TSX2    DFLT
         3 000762   000766 710000 3                  TRA     s:3893

     1843     3889    4                   WHENALTRETURN DO;

     1844     3890    4   DFLT:
     1845     3891    4                       VLP_SN.SN#(0) = XSL_SN;

   3891  3 000763   040000 100400       DFLT         MLR     fill='040'O
         3 000764   000000 000006 xsym               ADSC9   XSL_SN                   cn=0,n=6
         3 000765   000073 000006 1                  ADSC9   VLP_SN+1                 cn=0,n=6

     1846     3892    4                       END;

     1847     3893    3               GOTO AGAIN;

   3893  3 000766   000660 710000 3                  TRA     AGAIN

     1848     3894    3               END;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:262  
     1849     3895    2           END;

     1850     3896    1       RETURN;

   3896  3 000767   000000 702200 xent               TSX2  ! X66_ARET

     1851     3897
     1852     3898    1   XSL$CL_GET: ENTRY( SOCK) ALTRET;

   3898  3 000770   000000 700200 xent  XSL$CL_GET   TSX0  ! X66_AUTO_4
         3 000771   000126 000004                    ZERO    86,4

     1853     3899
     1854     3900    1       CALL BINCHAR( SUBSTR( DCBNAME.TXT, 5, 2), SOCK.SOCK#);

   3900  3 000772   200003 470500                    LDP0    @SOCK,,AUTO
         3 000773   000000 236100                    LDQ     0,,PR0
         3 000774   000777 376007                    ANQ     511,DL
         3 000775   000000 235003                    LDA     0,DU
         3 000776   200122 757100                    STAQ    X+2,,AUTO
         3 000777   000000 301500                    BTD
         3 001000   200122 000010                    NDSC9   X+2,,AUTO                cn=0,s=lsgnf,sf=0,n=8
         3 001001   000177 430002 1                  NDSC9   VLP_NAME+1               cn=2,s=nosgn,sf=0,n=2

     1855     3901    1       CALL XSL$EVLOG( 'GT', ADDR(SOCK));

   3901  3 001002   200003 236100                    LDQ     @SOCK,,AUTO
         3 001003   200122 756100                    STQ     X+2,,AUTO
         3 001004   200122 631500                    EPPR1   X+2,,AUTO
         3 001005   200125 451500                    STP1    X+5,,AUTO
         3 001006   000020 236000 4                  LDQ     16
         3 001007   200124 756100                    STQ     X+4,,AUTO
         3 001010   200124 630500                    EPPR0   X+4,,AUTO
         3 001011   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001012   000000 701000 xent               TSX1    XSL$EVLOG
         3 001013   000000 011000                    NOP     0

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:263  
     1856     3902    1       CALL M$GETDCB( FPT_GETDCB) ALTRET( OOPSLOG);

   3902  3 001014   000014 630400 2                  EPPR0   FPT_GETDCB
         3 001015   460002 713400                    CLIMB   alt,+24578
         3 001016   401000 401760                    pmme    nvectors=3
         3 001017   001110 702000 3                  TSX2    OOPSLOG

     1857     3903    1       SOCK.DCB# = DCB#;

   3903  3 001020   000205 720000 1                  LXL0    DCB#
         3 001021   200003 470500                    LDP0    @SOCK,,AUTO
         3 001022   000003 440100                    SXL0    3,,PR0

     1858     3904    1       RETURN;

   3904  3 001023   000000 702200 xent               TSX2  ! X66_ARET

     1859     3905
     1860     3906    1   XSL$CL_REL: ENTRY( SOCK) ALTRET;

   3906  3 001024   000000 700200 xent  XSL$CL_REL   TSX0  ! X66_AUTO_4
         3 001025   000126 000004                    ZERO    86,4

     1861     3907
     1862     3908    1       FPT_RELDCB.V.DCB# = SOCK.DCB#;

   3908  3 001026   200003 470500                    LDP0    @SOCK,,AUTO
         3 001027   000003 720100                    LXL0    3,,PR0
         3 001030   000202 740000 1                  STX0    FPT_RELDCB+2

     1863     3909    1       CALL XSL$EVLOG( 'RL', ADDR(SOCK));

   3909  3 001031   200003 236100                    LDQ     @SOCK,,AUTO
         3 001032   200122 756100                    STQ     X+2,,AUTO
         3 001033   200122 631500                    EPPR1   X+2,,AUTO
         3 001034   200125 451500                    STP1    X+5,,AUTO
         3 001035   000021 236000 4                  LDQ     17
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:264  
         3 001036   200124 756100                    STQ     X+4,,AUTO
         3 001037   200124 630500                    EPPR0   X+4,,AUTO
         3 001040   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001041   000000 701000 xent               TSX1    XSL$EVLOG
         3 001042   000000 011000                    NOP     0

     1864     3910    1       CALL M$RELDCB( FPT_RELDCB) ALTRET( OOPSLOG);

   3910  3 001043   000200 630400 1                  EPPR0   FPT_RELDCB
         3 001044   460003 713400                    CLIMB   alt,+24579
         3 001045   400000 401760                    pmme    nvectors=1
         3 001046   001110 702000 3                  TSX2    OOPSLOG

     1865     3911    1       SOCK.DCB# = DCBNUM( NIL);

   3911  3 001047   000000 220003                    LDX0    0,DU
         3 001050   200003 470500                    LDP0    @SOCK,,AUTO
         3 001051   000003 440100                    SXL0    3,,PR0

     1866     3912    1       RETURN;

   3912  3 001052   000000 702200 xent               TSX2  ! X66_ARET

     1867     3913
     1868     3914    1   XSL$CL_CLOSE: ENTRY( SOCK) ALTRET;

   3914  3 001053   000000 700200 xent  XSL$CL_CLOSE TSX0  ! X66_AUTO_4
         3 001054   000126 000004                    ZERO    86,4

     1869     3915
     1870     3916    1       SOCK.FLAGS.REUSEBUF = '0'B;

   3916  3 001055   200003 470500                    LDP0    @SOCK,,AUTO
         3 001056   000022 236000 4                  LDQ     18
         3 001057   000001 356100                    ANSQ    1,,PR0

     1871     3917    1       IF SOCK.BUFHD ~= 0 THEN
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:265  

   3917  3 001060   000016 220100                    LDX0    14,,PR0
         3 001061   001066 600000 3                  TZE     s:3919

     1872     3918    1           CALL CANCEL( SOCK);

   3918  3 001062   200003 236100                    LDQ     @SOCK,,AUTO
         3 001063   200115 756100                    STQ     DUMMYCHARS+65,,AUTO
         3 001064   001200 701000 3                  TSX1    CANCEL
         3 001065   000000 011000                    NOP     0

     1873     3919    1       CALL XSL$EVLOG( 'CL', ADDR(SOCK));

   3919  3 001066   200003 236100                    LDQ     @SOCK,,AUTO
         3 001067   200122 756100                    STQ     X+2,,AUTO
         3 001070   200122 630500                    EPPR0   X+2,,AUTO
         3 001071   200125 450500                    STP0    X+5,,AUTO
         3 001072   000023 236000 4                  LDQ     19
         3 001073   200124 756100                    STQ     X+4,,AUTO
         3 001074   200124 630500                    EPPR0   X+4,,AUTO
         3 001075   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001076   000000 701000 xent               TSX1    XSL$EVLOG
         3 001077   000000 011000                    NOP     0

     1874     3920    1       FPT_CLOSE.V.DCB# = SOCK.DCB#;

   3920  3 001100   200003 470500                    LDP0    @SOCK,,AUTO
         3 001101   000003 720100                    LXL0    3,,PR0
         3 001102   000130 740000 1                  STX0    FPT_CLOSE+26

     1875     3921    1       CALL M$CLOSE( FPT_CLOSE) ALTRET( OOPSLOG);

   3921  3 001103   000076 630400 1                  EPPR0   FPT_CLOSE
         3 001104   450001 713400                    CLIMB   alt,close
         3 001105   406000 401760                    pmme    nvectors=13
         3 001106   001110 702000 3                  TSX2    OOPSLOG

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:266  
     1876     3922    1       RETURN;

   3922  3 001107   000000 702200 xent               TSX2  ! X66_ARET

     1877     3923    1   OOPSLOG:
     1878     3924    1       CALL XSL$EVLOG( 'ER', ADDR(SOCK));

   3924  3 001110   200003 236100       OOPSLOG      LDQ     @SOCK,,AUTO
         3 001111   200122 756100                    STQ     X+2,,AUTO
         3 001112   200122 630500                    EPPR0   X+2,,AUTO
         3 001113   200125 450500                    STP0    X+5,,AUTO
         3 001114   000024 236000 4                  LDQ     20
         3 001115   200124 756100                    STQ     X+4,,AUTO
         3 001116   200124 630500                    EPPR0   X+4,,AUTO
         3 001117   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001120   000000 701000 xent               TSX1    XSL$EVLOG
         3 001121   000000 011000                    NOP     0

     1879     3925    1       CALL XSL$EVLOG( , B$TCB$->B$TCB.ALT$->B$ALT.ERR);

   3925  3 001122   000000 470400 xsym               LDP0    B$TCB$
         3 001123   000000 471500                    LDP1    0,,PR0
         3 001124   100102 633500                    EPPR3   66,,PR1
         3 001125   200123 453500                    STP3    X+3,,AUTO
         3 001126   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 001127   200122 756100                    STQ     X+2,,AUTO
         3 001130   200122 630500                    EPPR0   X+2,,AUTO
         3 001131   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001132   000000 701000 xent               TSX1    XSL$EVLOG
         3 001133   000000 011000                    NOP     0

     1880     3926    2       IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$NODAT THEN DO;

   3926  3 001134   000000 470400 xsym               LDP0    B$TCB$
         3 001135   000000 471500                    LDP1    0,,PR0
         3 001136   100102 236100                    LDQ     66,,PR1
         3 001137   377770 376007                    ANQ     131064,DL
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:267  
         3 001140   021000 116007                    CMPQ    8704,DL
         3 001141   001164 601000 3                  TNZ     OOPS

     1881     3927    2           IF LATCH = %SENDTORQS OR LATCH = %SENDRQS OR

   3927  3 001142   000206 235000 1                  LDA     LATCH
         3 001143   000025 115007                    CMPA    21,DL
         3 001144   001164 600000 3                  TZE     OOPS
         3 001145   000023 115007                    CMPA    19,DL
         3 001146   001164 600000 3                  TZE     OOPS
         3 001147   000000 115003                    CMPA    0,DU
         3 001150   001156 601000 3                  TNZ     s:3930
         3 001151   200011 235100                    LDA     LATCHTMP,,AUTO
         3 001152   000025 115007                    CMPA    21,DL
         3 001153   001164 600000 3                  TZE     OOPS
         3 001154   000023 115007                    CMPA    19,DL
         3 001155   001164 600000 3                  TZE     OOPS

     1882     3928    2             ( LATCH = 0 AND ( LATCHTMP = %SENDTORQS OR LATCHTMP = %SENDRQS)) THEN
     1883     3929    2               GOTO OOPS;  /* send/write will do the right thing */
     1884     3930    2           CALL M$WAIT( XSL_WAIT1SEC);

   3930  3 001156   000006 630400 2                  EPPR0   XSL_WAIT1SEC
         3 001157   020006 713400                    CLIMB   8198
         3 001160   400400 401760                    pmme    nvectors=2

     1885     3931    2           CALL M$RETRY ALTRET( OOPSLOG);

   3931  3 001161   410010 713400                    CLIMB   alt,+4104
         3 001162   000000 401760                    pmme    nvectors=0
         3 001163   001110 702000 3                  TSX2    OOPSLOG

     1886     3932    2           END;

     1887     3933    1   OOPS:
     1888     3934    1       XSL_KEYBUF(2) = %E$FAILURE; /* ERRNO for RSP messages */

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:268  
   3934  3 001164   777777 220003       OOPS         LDX0    -1,DU
         3 001165   000001 740000 xsym               STX0    XSL_KEYBUF+1

     1889     3935    1   OOPS1:
     1890     3936    1       XSL_KEYBUF(1) = %E$FAILURE; /* RESULT for RSP messages */

   3936  3 001166   777777 221003       OOPS1        LDX1    -1,DU
         3 001167   000000 441000 xsym               SXL1    XSL_KEYBUF

     1891     3937    1       ALTRETURN;

   3937  3 001170   000000 702200 xent               TSX2  ! X66_AALT

     1892     3938        %EJECT;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:269  
     1893     3939    1   XSL$CL_CANCEL: ENTRY( SOCK) ALTRET;

   3939  3 001171   000000 700200 xent  XSL$CL_CANC* TSX0  ! X66_AUTO_4
         3 001172   000126 000004                    ZERO    86,4

     1894     3940
     1895     3941    1       CALL CANCEL( SOCK);

   3941  3 001173   200003 236100                    LDQ     @SOCK,,AUTO
         3 001174   200115 756100                    STQ     DUMMYCHARS+65,,AUTO
         3 001175   001200 701000 3                  TSX1    CANCEL
         3 001176   000000 011000                    NOP     0

     1896     3942    1       RETURN;

   3942  3 001177   000000 702200 xent               TSX2  ! X66_ARET

     1897     3943
     1898     3944    1   CANCEL: PROC( SOCK);

   3944  3 001200   200114 741300       CANCEL       STX1  ! DUMMYCHARS+64,,AUTO

     1899     3945
     1900     3946    2       DCL BUF$ PTR;
     1901     3947    2       DCL MUSTWAIT BIT(1);
     1902     3948            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( BUF$)");
     1903     3981            %XSL$SOCKINFO( FPTN=SOCK, STCLASS=);
     1904     4125
     1905     4126    3       DO INHIBIT;

     1906     4127    4           IF DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) ~= 0 THEN DO;

   4127  3 001201   000002 470600 4                  LDP0  ! 2
         3 001202   000000 471700                    LDP1  ! 0,,PR0
         3 001203   200115 473700                    LDP3  ! @SOCK,,AUTO
         3 001204   300003 720300                    LXL0  ! 3,,PR3
         3 001205   100000 474710                    LDP4  ! 0,X0,PR1
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:270  
         3 001206   400074 236300                    LDQ   ! 60,,PR4
         3 001207   377000 316203                    CANQ  ! 130560,DU
         3 001210   001231 600200 3                  TZE   ! WAIT4IO

     1907     4128    4               CALL XSL$EVLOG( 'XX', ADDR(SOCK));

   4128  3 001211   200115 236300                    LDQ   ! @SOCK,,AUTO
         3 001212   200122 756300                    STQ   ! X+2,,AUTO
         3 001213   200122 634700                    EPPR4 ! X+2,,AUTO
         3 001214   200125 454700                    STP4  ! X+5,,AUTO
         3 001215   000025 236200 4                  LDQ   ! 21
         3 001216   200124 756300                    STQ   ! X+4,,AUTO
         3 001217   200124 630700                    EPPR0 ! X+4,,AUTO
         3 001220   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 001221   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 001222   000000 011200                    NOP   ! 0

     1908     4129    4               FPT_TRMPRG.V.DCB# = SOCK.DCB#;

   4129  3 001223   200115 470700                    LDP0  ! @SOCK,,AUTO
         3 001224   000003 720300                    LXL0  ! 3,,PR0
         3 001225   000172 740200 1                  STX0  ! FPT_TRMPRG+4

     1909     4130    4               CALL M$TRMPRG( FPT_TRMPRG);  /* cancel NW read(s) */

   4130  3 001226   000166 630600 1                  EPPR0 ! FPT_TRMPRG
         3 001227   160004 713600                    CLIMB ! 57348
         3 001230   400400 401760                    pmme    nvectors=2

     1910     4131    4               END;

     1911     4132    3   WAIT4IO:
     1912     4133    3           MUSTWAIT = '0'B;

   4133  3 001231   200117 450300       WAIT4IO      STZ   ! MUSTWAIT,,AUTO

     1913     4134    3           BUF$ = PINCRW( XSL_SOCK$$, SOCK.BUFHD);
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:271  

   4134  3 001232   200115 470700                    LDP0  ! @SOCK,,AUTO
         3 001233   000016 220300                    LDX0  ! 14,,PR0
         3 001234   000000 636210                    EAQ   ! 0,X0
         3 001235   000000 036200 xsym               ADLQ  ! XSL_SOCK$$
         3 001236   200116 756300                    STQ   ! BUF$,,AUTO

     1914     4135    4           DO WHILE( BUF$ ~= XSL_SOCK$$);

   4135  3 001237   000000 116200 xsym               CMPQ  ! XSL_SOCK$$
         3 001240   001257 600200 3                  TZE   ! s:4139

     1915     4136    4               MUSTWAIT = MUSTWAIT | DATABUF.FLAGS.BUSY;

   4136  3 001241   200116 470700                    LDP0  ! BUF$,,AUTO
         3 001242   000001 236300                    LDQ   ! 1,,PR0
         3 001243   400000 376203                    ANQ   ! -131072,DU
         3 001244   200122 756300                    STQ   ! X+2,,AUTO
         3 001245   200117 236300                    LDQ   ! MUSTWAIT,,AUTO
         3 001246   400000 376203                    ANQ   ! -131072,DU
         3 001247   200122 276300                    ORQ   ! X+2,,AUTO
         3 001250   200117 756300                    STQ   ! MUSTWAIT,,AUTO

     1916     4137    4               BUF$ = PINCRW( XSL_SOCK$$, DATABUF.NXT);

   4137  3 001251   000001 720300                    LXL0  ! 1,,PR0
         3 001252   000000 636210                    EAQ   ! 0,X0
         3 001253   000000 036200 xsym               ADLQ  ! XSL_SOCK$$
         3 001254   200116 756300                    STQ   ! BUF$,,AUTO

     1917     4138    4               END;

   4138  3 001255   000000 116200 xsym               CMPQ  ! XSL_SOCK$$
         3 001256   001241 601200 3                  TNZ   ! s:4136

     1918     4139    4           IF MUSTWAIT THEN DO;

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:272  
   4139  3 001257   200117 234300                    SZN   ! MUSTWAIT,,AUTO
         3 001260   001277 605200 3                  TPL   ! s:4144

     1919     4140    4               CALL XSL$EVLOG( 'WX', ADDR(SOCK));

   4140  3 001261   200115 236300                    LDQ   ! @SOCK,,AUTO
         3 001262   200122 756300                    STQ   ! X+2,,AUTO
         3 001263   200122 630700                    EPPR0 ! X+2,,AUTO
         3 001264   200125 450700                    STP0  ! X+5,,AUTO
         3 001265   000026 236200 4                  LDQ   ! 22
         3 001266   200124 756300                    STQ   ! X+4,,AUTO
         3 001267   200124 630700                    EPPR0 ! X+4,,AUTO
         3 001270   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 001271   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 001272   000000 011200                    NOP   ! 0

     1920     4141    4               CALL M$WAIT( XSL_WAIT1DAY);  /* force event delivery */

   4141  3 001273   000000 630600 2                  EPPR0 ! XSL_WAIT1DAY
         3 001274   020006 713600                    CLIMB ! 8198
         3 001275   400400 401760                    pmme    nvectors=2

     1921     4142    4               GOTO WAIT4IO;

   4142  3 001276   001231 710200 3                  TRA   ! WAIT4IO

     1922     4143    4               END;
     1923     4144    3           RETURN;

   4144  3 001277   200114 221300                    LDX1  ! DUMMYCHARS+64,,AUTO
         3 001300   000001 702211                    TSX2  ! 1,X1

     1924     4145    3           END;

     1925     4146
     1926     4147    2   END CANCEL;

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:273  
   4147  3 001301   000001 702211                    TSX2  ! 1,X1

     1927     4148        %EJECT;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:274  
     1928     4149    1   SNSETUP: PROC( NAME);

   4149  3 001302   200114 741300       SNSETUP      STX1  ! DUMMYCHARS+64,,AUTO

     1929     4150
     1930     4151            %XSL$SOCKADDR( FPTN=NAME, STCLASS=);
     1931     4191
     1932     4192    2       DCL XSL$NTOHL ENTRY(2);
     1933     4193
     1934     4194    2       DCL XSL_NETMASK SBIN SYMREF;
     1935     4195    2       DCL MSK(0:3) REDEF XSL_NETMASK BIT(9) CALIGNED;
     1936     4196    2       DCL XSL_SN CHAR(6) SYMREF;
     1937     4197
     1938     4198    2       DCL I UBIN;
     1939     4199    2       DCL L UBIN;
     1940     4200    2       DCL X UBIN;
     1941     4201    2       DCL XCHARS CHAR(0) CONSTANT INIT( '0123456789ABCDEF');
     1942     4202
     1943     4203    2       VLP_SN.SN#(0) = XSL_SN;

   4203  3 001303   040000 100400                    MLR     fill='040'O
         3 001304   000000 000006 xsym               ADSC9   XSL_SN                   cn=0,n=6
         3 001305   000073 000006 1                  ADSC9   VLP_SN+1                 cn=0,n=6

     1944     4204    2       X = NAME.SA_DATA(4);

   4204  3 001306   200115 470500                    LDP0    @NAME,,AUTO
         3 001307   000002 236100                    LDQ     2,,PR0
         3 001310   000033 772000                    QRL     27
         3 001311   200120 756100                    STQ     X,,AUTO

     1945     4205    2       IF X = 0 THEN RETURN;

   4205  3 001312   001314 601000 3                  TNZ     s:4206

   4205  3 001313   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:275  
     1946     4206    2       VLP_SN.SN#(0) = '      ';

   4206  3 001314   040000 100400                    MLR     fill='040'O
         3 001315   000055 000006 2                  ADSC9   XCHARS+14                cn=0,n=6
         3 001316   000073 000006 1                  ADSC9   VLP_SN+1                 cn=0,n=6

     1947     4207    3       IF XSL_NETMASK = -1 THEN DO;

   4207  3 001317   000000 235000 xsym               LDA     XSL_NETMASK
         3 001320   000027 115000 xsym               CMPA    B_VECTNIL+23
         3 001321   001337 601000 3                  TNZ     s:4215

     1948     4208                /* figure out length based on top bits of address */
     1949     4209    3           IF X < 128 THEN L = 2;

   4209  3 001322   000200 116007                    CMPQ    128,DL
         3 001323   001327 603000 3                  TRC     s:4210

   4209  3 001324   000002 235007                    LDA     2,DL
         3 001325   200117 755100                    STA     L,,AUTO
         3 001326   001366 710000 3                  TRA     s:4222

     1950     4210    3           ELSE IF X < 192 THEN L = 4;

   4210  3 001327   000300 116007                    CMPQ    192,DL
         3 001330   001334 603000 3                  TRC     s:4211

   4210  3 001331   000004 235007                    LDA     4,DL
         3 001332   200117 755100                    STA     L,,AUTO
         3 001333   001366 710000 3                  TRA     s:4222

     1951     4211    3               ELSE L = 6;

   4211  3 001334   000006 235007                    LDA     6,DL
         3 001335   200117 755100                    STA     L,,AUTO

     1952     4212    3           END;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:276  

   4212  3 001336   001366 710000 3                  TRA     s:4222

     1953     4213    3       ELSE DO;

     1954     4214                /* figure out length based on number of nonzero netmask nibbles */
     1955     4215    3           CALL XSL$NTOHL( X, XSL_NETMASK);

   4215  3 001337   000027 236000 4                  LDQ     23
         3 001340   200123 756100                    STQ     X+3,,AUTO
         3 001341   200120 631500                    EPPR1   X,,AUTO
         3 001342   200122 451500                    STP1    X+2,,AUTO
         3 001343   200122 630500                    EPPR0   X+2,,AUTO
         3 001344   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 001345   000000 701000 xent               TSX1    XSL$NTOHL
         3 001346   000000 011000                    NOP     0

     1956     4216    3           X = X/256;  /* lose lower 2 nibbles */

   4216  3 001347   200120 236100                    LDQ     X,,AUTO
         3 001350   000010 772000                    QRL     8
         3 001351   200120 756100                    STQ     X,,AUTO

     1957     4217    4           DO L = 6 DOWNTO 1;

   4217  3 001352   000006 235007                    LDA     6,DL
         3 001353   200117 755100                    STA     L,,AUTO

     1958     4218    4               IF MOD( X, 16) ~= 0 THEN EXIT;

   4218  3 001354   200120 236100                    LDQ     X,,AUTO
         3 001355   000017 376007                    ANQ     15,DL
         3 001356   001366 601000 3                  TNZ     s:4222

     1959     4219    4               X = X/16;

   4219  3 001357   200120 236100                    LDQ     X,,AUTO
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:277  
         3 001360   000004 772000                    QRL     4
         3 001361   200120 756100                    STQ     X,,AUTO

     1960     4220    4               END;

   4220  3 001362   200117 235100                    LDA     L,,AUTO
         3 001363   000001 135007                    SBLA    1,DL
         3 001364   200117 755100                    STA     L,,AUTO
         3 001365   001354 601000 3                  TNZ     s:4218

     1961     4221    3           END;

     1962     4222    3       DO I = 0 TO L-1;

   4222  3 001366   200116 450100                    STZ     I,,AUTO
         3 001367   001432 710000 3                  TRA     s:4229+2

     1963     4223    3           X = BITBIN( BINBIT( NAME.SA_DATA( 4 + I/2), 9) & MSK( I/2));

   4223  3 001370   200116 236100                    LDQ     I,,AUTO
         3 001371   000001 772000                    QRL     1
         3 001372   200115 470500                    LDP0    @NAME,,AUTO
         3 001373   000100 101506                    MRL     fill='000'O
         3 001374   000002 000001                    ADSC9   2,Q,PR0                  cn=0,n=1
         3 001375   200122 000004                    ADSC9   X+2,,AUTO                cn=0,n=4
         3 001376   200122 236100                    LDQ     X+2,,AUTO
         3 001377   000033 736000                    QLS     27
         3 001400   200123 756100                    STQ     X+3,,AUTO
         3 001401   200116 236100                    LDQ     I,,AUTO
         3 001402   000001 772000                    QRL     1
         3 001403   000100 100406                    MLR     fill='000'O
         3 001404   000000 000001 xsym               ADSC9   XSL_NETMASK,Q            cn=0,n=1
         3 001405   200124 000004                    ADSC9   X+4,,AUTO                cn=0,n=4
         3 001406   200124 236100                    LDQ     X+4,,AUTO
         3 001407   200123 376100                    ANQ     X+3,,AUTO
         3 001410   000033 772000                    QRL     27
         3 001411   200120 756100                    STQ     X,,AUTO
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:278  

     1964     4224    3           IF MOD( I, 2) ~= 0 THEN

   4224  3 001412   200116 236100                    LDQ     I,,AUTO
         3 001413   000001 376007                    ANQ     1,DL
         3 001414   001421 600000 3                  TZE     s:4227

     1965     4225    3               X = MOD( X, 16);

   4225  3 001415   200120 236100                    LDQ     X,,AUTO
         3 001416   000017 376007                    ANQ     15,DL
         3 001417   200120 756100                    STQ     X,,AUTO
         3 001420   001424 710000 3                  TRA     s:4228

     1966     4226    3           ELSE
     1967     4227    3               X = X/16;

   4227  3 001421   200120 236100                    LDQ     X,,AUTO
         3 001422   000004 772000                    QRL     4
         3 001423   200120 756100                    STQ     X,,AUTO

     1968     4228    3           SUBSTR( VLP_SN.SN#(0), I, 1) = SUBSTR( XCHARS, X, 1);

   4228  3 001424   200116 235100                    LDA     I,,AUTO
         3 001425   040005 100406                    MLR     fill='040'O
         3 001426   000037 000001 2                  ADSC9   XCHARS,Q                 cn=0,n=1
         3 001427   000073 000001 1                  ADSC9   VLP_SN+1,A               cn=0,n=1

     1969     4229    3           END;

   4229  3 001430   000001 035007                    ADLA    1,DL
         3 001431   200116 755100                    STA     I,,AUTO
         3 001432   200116 236100                    LDQ     I,,AUTO
         3 001433   200117 116100                    CMPQ    L,,AUTO
         3 001434   001370 602000 3                  TNC     s:4223

     1970     4230    2       RETURN;
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:279  

   4230  3 001435   200114 221300                    LDX1  ! DUMMYCHARS+64,,AUTO
         3 001436   000001 702211                    TSX2  ! 1,X1

FPT_OPEN
 Sect OctLoc
   1     000   000025 777640   000044 006000   000003 777640   000072 006000    .....$.......:..
   1     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     044*  000000 000042   000000 001003   252525 000000   000040 252520    ..."......... ..
   1     050   103114 040040   000000 000000   000000 777777   000000 000000    CL  ............
   1     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     060   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
   1     064   040040 040040   000000 000000   000000 000000   000000 000000        ............
   1     070   000000 000000   ****** ******                                    ........

VLP_SN
 Sect OctLoc
   1     072   000000 000001   040040 040040   040040 ******                    ....      ..

FPT_CLOSE
 Sect OctLoc
   1     076   000003 777640   000130 006000   000000 177640   000000 006014    .....X..........
   1     102   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     126*  000000 177640   000000 006014   000000 000002   000000 000040    ...............
   1     132   000220 000000   000000 000000                                    ........

FPT_READ
 Sect OctLoc
   1     134   000005 777640   000144 006000   000007 777640   000000 006000    .....d..........
   1     140   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     144   000000 500000   000000 000000   000000 000000   000000 000000    ................
   1     150   000000 000000   000000 000000                                    ........

FPT_WRITE
 Sect OctLoc
   1     152   000003 777640   000162 006000   000007 777640   000000 006000    .....r..........
   1     156   000000 177640   000000 006014   000000 177640   000000 006014    ................
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:280  
   1     162   000000 400400   000000 000000   000000 000000   004000 000000    ................

FPT_TRMPRG
 Sect OctLoc
   1     166   000003 777640   000172 006000   000000 177640   000000 006014    .....z..........
   1     172   000000 000000   000000 000000   010000 000000   000000 000000    ................

VLP_NAME
 Sect OctLoc
   1     176   007106 044130   123114 060060                                    .F$XSL00

FPT_RELDCB
 Sect OctLoc
   1     200   000001 777640   000202 006000   000000 000000   000000 000000    ................

XSL_UETIME
 Sect OctLoc
   1     204   000000 000000                                                    ....

XSL_WAIT1DAY
 Sect OctLoc
   2     000   000001 777640   000004 006000   000000 777640   000204 006000    ................
   2     004   000000 250577   000000 000001                                    ........

XSL_WAIT1SEC
 Sect OctLoc
   2     006   000001 777640   000012 006000   000000 177640   000000 006014    ................
   2     012   000000 000001   000000 000001                                    ........

FPT_GETDCB
 Sect OctLoc
   2     014   000001 777640   000022 006000   000001 777640   000176 006000    .............~..
   2     020   000000 777640   000205 006000   000000 000000   000000 000000    ................

HCOUNT
 Sect OctLoc
   2     024   000002 005003   003003 003003   004001 002002   003003 003003    ................
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:281  
   2     030   005003 004002   003004 003004   003002 003004   003002 003002    ................
   2     034   003001 003001   000000 000000   000*** ******                    ............

XCHARS
 Sect OctLoc
   2     037   060061 062063   064065 066067   070071 101102   103104 105106    0123456789ABCDEF

(unnamed)
 Sect OctLoc
   2     043   127122 040040   122104 040040   127124 040040   117120 040040    WR  RD  WT  OP
   2     047   107124 040040   122114 040040   103114 040040   105122 040040    GT  RL  CL  ER
   2     053   130130 040040   127130 040040   040040 040040   040040 040040    XX  WX

(unnamed)
 Sect OctLoc
   4     000   000000 177640   000000 006014   000000 006003   773777 777777    ................
   4     004   000043 006000   000077 577640   777777 577777   777776 777777    .#...?..........
   4     010   000044 006000   000000 006000   777737 777777   000045 006000    .$...........%..
   4     014   777577 777777   777677 777777   000046 006000   000073 006000    .........&...;..
   4     020   000047 006000   000050 006000   777773 777777   000051 006000    .'...(.......)..
   4     024   000052 006000   000053 006000   000054 006000   000000 006000    .*...+...,......
     1971     4231
     1972     4232    2   END SNSETUP;
     1973     4233
     1974     4234    1   END XSL$CL;
     1975     4235        %EOD;

PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:282  
--  Include file information  --

   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$CL.
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:283  

 **** Variables and constants ****

  ****  Section 001  Data  XSL$CL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   205-0-0/w SBIN        r     1 DCB#                     176-0-0/c STRC(72)    r     1 DCBNAME
    76-0-0/d STRC(1080)  r     1 FPT_CLOSE                  0-0-0/d STRC(2088)  r     1 FPT_OPEN
   134-0-0/d STRC(504)   r     1 FPT_READ                 200-0-0/d STRC(144)   r     1 FPT_RELDCB
   166-0-0/d STRC(288)   r     1 FPT_TRMPRG               152-0-0/d STRC(432)   r     1 FPT_WRITE
   206-0-0/w SBIN        r     1 LATCH                    176-0-0/c STRC(72)    r     1 VLP_NAME
    72-0-0/d STRC(90)    r     1 VLP_SN                   204-0-0/w SBIN        r     1 XSL_UETIME

  ****  Section 002 RoData XSL$CL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    14-0-0/d STRC(288)   r     1 FPT_GETDCB                24-0-0/c UBIN(9)     r     1 HCOUNT(0:40)
    37-0-0/c CHAR(16)    r     1 XCHARS                     0-0-0/d STRC(216)   r     1 XSL_WAIT1DAY
     6-0-0/d STRC(216)   r     1 XSL_WAIT1SEC

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   115-0-0/w PTR         r     1 @NAME                      4-0-0/w PTR         r     1 @PARM1
     5-0-0/w PTR         r     1 @PARM2                     6-0-0/w PTR         r     1 @PARM3
     3-0-0/w PTR         r     1 @SOCK                    115-0-0/w PTR         r     1 @SOCK
    13-0-0/w PTR         r     1 BUF$                     116-0-0/w PTR         r     1 BUF$
    10-0-0/w SBIN        r     1 BUFPND#                   14-0-0/c CHAR(255)   r     1 DUMMYCHARS
   116-0-0/w UBIN        r     1 I                        117-0-0/w UBIN        r     1 L
     7-0-0/b BIT         r     1 LAST                      11-0-0/w SBIN        r     1 LATCHTMP
   117-0-0/b BIT         r     1 MUSTWAIT                  *0-0-0/w STRC(180)   r     1 NAME
    12-0-0/w SBIN        r     1 NUM                       *0-0-0/w SBIN        r     1 PARM1
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:284  
    *0-0-0/w SBIN        r     1 PARM2                     *0-0-0/w SBIN        r     1 PARM3
    *0-0-0/w STRC(720)   r     1 SOCK                      *0-0-0/w STRC(720)   r     1 SOCK
   120-0-0/w UBIN        r     1 X

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w BIT (9)     r     1 MSK(0:3)
     0-0-0/h SBIN(18)    r     1 XSL_KEYBUF(0:15)
     0-0-0/w SBIN        r     1 XSL_NETMASK                0-0-0/c CHAR(6)     r     1 XSL_SN
     0-0-0/c CHAR(6)     r     1 XSL_SN                     0-0-0/w PTR         r     1 XSL_SOCK$$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w PTR         r     1 B$PTR
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/w STRC(360)   r     1 DATABUF
     0-0-0/w STRC(360)   r     1 DATABUF                    0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 M$UC                       0-0-0/c ACHR        r     1 PARM2CHARS
     0-0-0/d STRC(72)    r     1 VLP_VECTOR                 0-0-0/w STRC(162)   r     1 XSL$SOCKADDR_IN


   Procedure XSL$CL requires 799 words for executable code.
   Procedure XSL$CL requires 86 words of local(AUTO) storage.
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:285  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:286  
          MINI XREF LISTING

AGAIN
      3870**LABEL    3893--GOTO
B$ALT.CODE
      1814**DCL      1814--REDEF    1815--REDEF    1815--REDEF
B$ALT.ERR
      1815**DCL      3925<>CALL
B$ALT.ERR.CODE
      1816**DCL      3926>>IF
B$ALT.ERR.ERR#
      1816**DCL      1816--REDEF
B$ALT.EVID
      1815**DCL      1815--REDEF    1815--REDEF
B$PTR
      3644**DCL      3869<<ASSIGN
B$TCB.ALT$
      1821**DCL      3925>>CALL     3926>>IF
B$TCB$
      3624**DCL      3925>>CALL     3926>>IF
BUF$
      3643**DCL      3554--IMP-PTR  3803<<ASSIGN   3804>>DOWHILE  3805>>IF       3806>>IF       3808>>ASSIGN
      3814>>CALL     3818<<ASSIGN   3818>>ASSIGN
BUF$ IN PROCEDURE CANCEL
      3946**DCL      3965--IMP-PTR  4134<<ASSIGN   4135>>DOWHILE  4136>>ASSIGN   4137<<ASSIGN   4137>>ASSIGN
BUFPND#
      3636**DCL      3802<<ASSIGN   3842>>IF
CANCEL
      3944**PROC     3759--CALL     3918--CALL     3941--CALL
CLEANUP
      3851**LABEL    3776--GOTO     3816--GOTO
DATABUF
      3554**DCL      3814<>CALL
DATABUF.FLAGS.BUSY
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:287  
      3564**DCL      3805>>IF
DATABUF.KEY
      3568**DCL      3806>>IF       3808>>ASSIGN
DATABUF.NXT
      3567**DCL      3818>>ASSIGN
DATABUF.FLAGS.BUSY IN PROCEDURE CANCEL
      3975**DCL      4136>>ASSIGN
DATABUF.NXT IN PROCEDURE CANCEL
      3978**DCL      4137>>ASSIGN
DCB#
      3634**DCL      2142--DCLINIT  3903>>ASSIGN
DCBNAME.TXT
      2174**DCL      3900<<CALLBLT
DFLT
      3891**LABEL    3884--CALLALT
DUMMYCHARS
      3646**DCL      3738--ASSIGN   3784--ASSIGN
F$DCB.ACTPOS
      1788**DCL      1788--REDEF
F$DCB.ARS#
      1762**DCL      1762--REDEF
F$DCB.ATTR
      1781**DCL      1782--REDEF
F$DCB.BORROW
      1796**DCL      1796--REDEF    1796--REDEF    1796--REDEF
F$DCB.DCBNAME.L
      1810**DCL      1810--IMP-SIZ
F$DCB.EOMCHAR#
      1766**DCL      1766--REDEF
F$DCB.FCN.CNT
      1801**DCL      3715>>IF       3780>>IF       3839>>IF       4127>>IF
F$DCB.FLDID
      1791**DCL      1791--REDEF
F$DCB.FORM$
      1785**DCL      1785--REDEF
F$DCB.FSECT
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:288  
      1801**DCL      1801--REDEF
F$DCB.FSN#
      1778**DCL      1778--REDEF    1778--REDEF    1779--REDEF
F$DCB.HEADER$
      1784**DCL      1784--REDEF
F$DCB.IXTNSIZE#
      1782**DCL      1782--REDEF
F$DCB.LASTSTA$
      1771**DCL      1771--REDEF
F$DCB.LVL
      1797**DCL      1797--REDEF
F$DCB.NAME#.C
      1772**DCL      1772--REDEF
F$DCB.NOEOF
      1794**DCL      1794--REDEF
F$DCB.NRECS#
      1783**DCL      1783--REDEF
F$DCB.NRECX
      1802**DCL      1802--REDEF
F$DCB.OHDR
      1794**DCL      1794--REDEF
F$DCB.ORG#
      1777**DCL      1777--REDEF
F$DCB.PRECNO
      1800**DCL      1800--REDEF
F$DCB.RCSZ
      1806**DCL      1806--REDEF
F$DCB.RES#
      1773**DCL      1773--REDEF
F$DCB.SETX
      1785**DCL      1785--REDEF
F$DCB.TAB$
      1785**DCL      1785--REDEF
F$DCB.TDA
      1799**DCL      1800--REDEF
F$DCB.WSN#
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:289  
      1773**DCL      1773--REDEF
FPT_CLOSE
      1968**DCL      3921<>CALL
FPT_CLOSE.SN_
      1968**DCL      1968--REDEF
FPT_CLOSE.UTL_
      1969**DCL      1969--REDEF
FPT_CLOSE.V
      1973**DCL      1968--DCLINIT
FPT_CLOSE.V.DCB#
      1974**DCL      3920<<ASSIGN
FPT_CLOSE.V.EXPIRE#
      1983**DCL      1983--REDEF
FPT_CLOSE.V.TYPE#
      1981**DCL      1981--REDEF
FPT_CLOSE.V.XTNSIZE#
      1978**DCL      1978--REDEF    1980--REDEF
FPT_GETDCB
      2141**DCL      3902<>CALL
FPT_GETDCB.V
      2142**DCL      2141--DCLINIT
FPT_OPEN
      1888**DCL      3876<>CALL     3880<>CALL
FPT_OPEN.ACSVEH_
      1890**DCL      1891--REDEF
FPT_OPEN.ALTKEYS_
      1896**DCL      1897--REDEF    1897--REDEF
FPT_OPEN.HDR_
      1895**DCL      1896--REDEF
FPT_OPEN.TAB_
      1894**DCL      1895--REDEF
FPT_OPEN.UHL_
      1888**DCL      1889--REDEF    1889--REDEF
FPT_OPEN.V
      1897**DCL      1888--DCLINIT
FPT_OPEN.V.ATTR#
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:290  
      1924**DCL      3874<<ASSIGN   3878<<ASSIGN
FPT_OPEN.V.DCB#
      1897**DCL      3873<<ASSIGN
FPT_OPEN.V.EVENT#
      1927**DCL      3867<<ASSIGN   3869--ASSIGN
FPT_OPEN.V.FSN#
      1928**DCL      1928--REDEF    1928--REDEF
FPT_OPEN.WSN_
      1894**DCL      1894--REDEF
FPT_READ
      2004**DCL      3765<>CALL
FPT_READ.BUF_
      2006**DCL      3738<<ASSIGN   3740<<ASSIGN
FPT_READ.STATION_
      2007**DCL      2008--REDEF
FPT_READ.V
      2008**DCL      2004--DCLINIT
FPT_READ.V.DCB#
      2008**DCL      3734<<ASSIGN
FPT_READ.V.DVBYTE.REREAD#
      2019**DCL      2019--REDEF
FPT_READ.V.INDX#
      2017**DCL      2017--REDEF
FPT_READ.V.KEYS#
      2009**DCL      3750<<ASSIGN   3754<<ASSIGN
FPT_RELDCB
      2186**DCL      3910<>CALL
FPT_RELDCB.V
      2186**DCL      2186--DCLINIT
FPT_RELDCB.V.DCB#
      2186**DCL      3908<<ASSIGN
FPT_TRMPRG
      2102**DCL      4130<>CALL
FPT_TRMPRG.V
      2109**DCL      2104--DCLINIT
FPT_TRMPRG.V.CTLFLG.RSTBRK#
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:291  
      2110**DCL      2111--REDEF
FPT_TRMPRG.V.DCB#
      2109**DCL      4129<<ASSIGN
FPT_WRITE
      2043**DCL      3725<>CALL     3790<>CALL
FPT_WRITE.BUF_
      2043**DCL      3710<<ASSIGN   3784<<ASSIGN
FPT_WRITE.BUF_.BOUND
      2043**DCL      3713<<ASSIGN
FPT_WRITE.BUF_.BUF$
      2045**DCL      3712<<ASSIGN
FPT_WRITE.KEY_
      2043**DCL      3708--ASSIGN
FPT_WRITE.STATION_
      2045**DCL      2045--REDEF
FPT_WRITE.V
      2046**DCL      2043--DCLINIT
FPT_WRITE.V.DCB#
      2046**DCL      3707<<ASSIGN
FPT_WRITE.V.DVBYTE.NODAT#
      2053**DCL      3721<<ASSIGN   3723<<ASSIGN   3786<<ASSIGN   3788<<ASSIGN
FPT_WRITE.V.DVBYTE.VFC#
      2052**DCL      2052--REDEF
HCOUNT
      3652**DCL      3705>>ASSIGN   3855>>ASSIGN
I IN PROCEDURE SNSETUP
      4198**DCL      4222<<DOINDEX  4223>>ASSIGN   4223>>ASSIGN   4224>>IF       4228>>ASSIGN
L IN PROCEDURE SNSETUP
      4199**DCL      4209<<ASSIGN   4210<<ASSIGN   4211<<ASSIGN   4217<<DOINDEX  4222>>DOINDEX
LAST
      3635**DCL      3870<<ASSIGN   3881>>IF       3882<<ASSIGN
LATCH
      3637**DCL      3700<<ASSIGN   3701>>IF       3703>>IF       3715>>IF       3715>>IF       3715>>IF
      3715>>IF       3715>>IF       3718>>ASSIGN   3719<<ASSIGN   3749>>IF       3755<<ASSIGN   3782>>IF
      3795>>IF       3927>>IF       3927>>IF       3927>>IF
LATCHTMP
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:292  
      3638**DCL      3718<<ASSIGN   3927>>IF       3927>>IF
LOOK4IT
      3802**LABEL    3743--GOTO     3745--GOTO     3761--GOTO     3842--GOTO     3849--GOTO
M$CLOSE
      1683**DCL-ENT  3921--CALL
M$GETDCB
      1689**DCL-ENT  3902--CALL
M$OPEN
      1683**DCL-ENT  3876--CALL     3880--CALL
M$READ
      1684**DCL-ENT  3765--CALL
M$RELDCB
      1689**DCL-ENT  3910--CALL
M$RETRY
      1740**DCL-ENT  3931--CALL
M$TRMPRG
      1708**DCL-ENT  4130--CALL
M$WAIT
      1741**DCL-ENT  3846--CALL     3930--CALL     4141--CALL
M$WRITE
      1684**DCL-ENT  3725--CALL     3790--CALL
MSK IN PROCEDURE SNSETUP
      4195**DCL      4223>>ASSIGN
MUSTWAIT IN PROCEDURE CANCEL
      3947**DCL      4133<<ASSIGN   4136<<ASSIGN   4136>>ASSIGN   4139>>IF
NAME IN PROCEDURE SNSETUP
      4168**DCL      4149--PROC
NAME.SA_DATA IN PROCEDURE SNSETUP
      4189**DCL      4204>>ASSIGN   4223>>ASSIGN
NUM
      3639**DCL      3705<<ASSIGN   3706<>CALL     3741<<ASSIGN   3742>>IF       3744>>IF       3767>>IF
      3806>>IF       3809>>IF       3809>>IF       3824>>IF       3833>>IF       3851>>IF       3853>>IF
      3855<<ASSIGN   3855>>ASSIGN   3856<>CALL
OOPS
      3934**LABEL    3929--GOTO
OOPS1
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:293  
      3936**LABEL    3774--GOTO     3822--GOTO     3827--GOTO     3831--GOTO     3836--GOTO
OOPSLOG
      3924**LABEL    3725--CALLALT  3765--CALLALT  3790--CALLALT  3881--GOTO     3902--CALLALT  3910--CALLALT
      3921--CALLALT  3931--CALLALT
PARM1
      3640**DCL         6--PROC     3648--IMP-SIZ  3696--ENTRY    3708>>ASSIGN   3729--ENTRY    3735--IF
      3735>>IF       3740>>ASSIGN   3746--IF       3746>>IF       3859--ENTRY    3862--IF       3865<>CALL
      3883--IF       3888--CALL
PARM2
      3641**DCL         6--PROC     3647--IMP-SIZ  3696--ENTRY    3709--IF       3709>>IF       3713>>ASSIGN
      3729--ENTRY    3740--ASSIGN   3859--ENTRY
PARM2CHARS
      3648**DCL      3740--ASSIGN
PARM3
      3642**DCL         6--PROC     3696--ENTRY    3712--ASSIGN
READ_IT
      3734**LABEL    3841--GOTO
REREAD
      3763**LABEL    3771--GOTO
SNSETUP
      4149**PROC     3863--CALL     3865--CALL
SOCK
      3378**DCL         6--PROC     3696--ENTRY    3724--CALL     3729--ENTRY    3759<>CALL     3764--CALL
      3789--CALL     3796<>CALL     3798<>CALL     3814<>CALL     3845--CALL     3859--ENTRY    3869--ASSIGN
      3875--CALL     3879--CALL     3898--ENTRY    3901--CALL     3906--ENTRY    3909--CALL     3914--ENTRY
      3918<>CALL     3919--CALL     3924--CALL     3939--ENTRY    3941<>CALL
SOCK.BUFHD
      3492**DCL      3758>>IF       3803>>ASSIGN   3917>>IF
SOCK.BUFPND#
      3495**DCL      3802>>ASSIGN   3813<<ASSIGN   3813>>ASSIGN   3842>>IF
SOCK.DAT#
      3499**DCL      3810<<ASSIGN   3810>>ASSIGN   3811>>IF
SOCK.DCB#
      3411**DCL      3707>>ASSIGN   3715--IF       3734>>ASSIGN   3780--IF       3839--IF       3873>>ASSIGN
      3903<<ASSIGN   3908>>ASSIGN   3911<<ASSIGN   3920>>ASSIGN
SOCK.FEPERROR
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:294  
      3409**DCL      3770<<ASSIGN
SOCK.FLAGS.ACCEPTING
      3400**DCL      3703>>IF       3744>>IF       3829>>IF       3834<<ASSIGN   3853>>IF       3854<<ASSIGN
SOCK.FLAGS.BLOCKING
      3397**DCL      3720>>IF       3785>>IF       3824>>IF       3833>>IF
SOCK.FLAGS.CONNECTING
      3399**DCL      3701>>IF       3742>>IF       3820>>IF       3825<<ASSIGN   3851>>IF       3852<<ASSIGN
SOCK.FLAGS.MUSTREAD
      3406**DCL      3746>>IF       3760>>IF       3763<<ASSIGN   3840<<ASSIGN   3841>>IF
SOCK.FLAGS.REUSEBUF
      3404**DCL      3916<<ASSIGN
SOCK.FLAGS.SELREAD
      3401**DCL      3760>>IF       3812<<ASSIGN
SOCK.MAXRDS
      3497**DCL      3746>>IF       3866>>IF
SOCK.NBACCEPT_SOCK$
      3500**DCL      3501--REDEF
SOCK.SERNUM
      3410**DCL      3872<<ASSIGN
SOCK.SOCK#
      3387**DCL      3900>>CALLBLT
SOCK.SOCKNAME
      3431**DCL      3863<>CALL     3884--CALL
SOCK IN PROCEDURE CANCEL
      3999**DCL      3944--PROC     4128--CALL     4140--CALL
SOCK.BUFHD IN PROCEDURE CANCEL
      4113**DCL      4134>>ASSIGN
SOCK.DCB# IN PROCEDURE CANCEL
      4032**DCL      4127--IF       4129>>ASSIGN
SOCK.NBACCEPT_SOCK$ IN PROCEDURE CANCEL
      4121**DCL      4122--REDEF
VLP_NAME
      2170**DCL      2141--DCLINIT  2172--REDEF
VLP_SN
      1943**DCL      1888--DCLINIT
VLP_SN.SN#
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:295  
      1943**DCL      3872>>ASSIGN   3884<>CALL     3888<>CALL     3891<<ASSIGN   4203<<ASSIGN   4206<<ASSIGN
      4228<<ASSIGN
VLP_VECTOR.W1.VSIZE#
      2126**DCL      3708<<ASSIGN
VLP_VECTOR.W2
      2127**DCL      2128--REDEF
WAIT4IO IN PROCEDURE CANCEL
      4133**LABEL    4142--GOTO
WRITE_IT
      3784**LABEL    3796--CALLALT
X IN PROCEDURE SNSETUP
      4200**DCL      4204<<ASSIGN   4205>>IF       4209>>IF       4210>>IF       4215<>CALL     4216<<ASSIGN
      4216>>ASSIGN   4218>>IF       4219<<ASSIGN   4219>>ASSIGN   4223<<ASSIGN   4225<<ASSIGN   4225>>ASSIGN
      4227<<ASSIGN   4227>>ASSIGN   4228>>ASSIGN
XCHARS IN PROCEDURE SNSETUP
      4201**DCL      4228>>ASSIGN
XSL$EVLOG
      3622**DCL-ENT  3724--CALL     3764--CALL     3789--CALL     3845--CALL     3875--CALL     3879--CALL
      3901--CALL     3909--CALL     3919--CALL     3924--CALL     3925--CALL     4128--CALL     4140--CALL
XSL$GETBUF
      3620**DCL-ENT  3796--CALL     3798--CALL
XSL$H8TO9
      3618**DCL-ENT  3856--CALL
XSL$H9TO8
      3617**DCL-ENT  3706--CALL
XSL$NTOHL IN PROCEDURE SNSETUP
      4192**DCL-ENT  4215--CALL
XSL$RELBUF
      3621**DCL-ENT  3814--CALL
XSL$ROUTES
      3619**DCL-ENT  3884--CALL     3888--CALL
XSL$SOCKADDR_IN.S_ADDR
      3106**DCL      3884<>CALL     3888<>CALL
XSL_KEYBUF
      3645**DCL      2004--DCLINIT  2005--DCLINIT  2043--DCLINIT  3700>>ASSIGN   3705>>ASSIGN   3741>>ASSIGN
      3751<<ASSIGN   3767>>IF       3768>>IF       3768>>IF       3769>>IF       3769>>IF       3770>>ASSIGN
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:296  
      3773<<ASSIGN   3796<>CALL     3808<<ASSIGN   3821<<ASSIGN   3826<<ASSIGN   3830<<ASSIGN   3835<<ASSIGN
      3934<<ASSIGN   3936<<ASSIGN
XSL_NETMASK IN PROCEDURE SNSETUP
      4194**DCL      4195--REDEF    4207>>IF       4215<>CALL
XSL_SN
      3628**DCL      3891>>ASSIGN
XSL_SN IN PROCEDURE SNSETUP
      4196**DCL      4203>>ASSIGN
XSL_SOCK$$
      3629**DCL      3521--IMP-PTR  3803>>ASSIGN   3804>>DOWHILE  3818>>ASSIGN   4134>>ASSIGN   4135>>DOWHILE
      4137>>ASSIGN
XSL_UETIME
      3630**DCL      2069--DCLINIT  3843<<ASSIGN   3844>>DOWHILE
XSL_WAIT1DAY
      2069**DCL      3846<>CALL     4141<>CALL
XSL_WAIT1DAY.V
      2070**DCL      2069--DCLINIT
XSL_WAIT1SEC
      2083**DCL      3930<>CALL
XSL_WAIT1SEC.V
      2084**DCL      2083--DCLINIT
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:297  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:298  
              MINI UREF LISTING

M$ACCT    1700**DCL-ENT
M$ACTIVATE    1703**DCL-ENT
M$ALIB    1696**DCL-ENT
M$ASUSER    1698**DCL-ENT
M$ATTACH    1705**DCL-ENT
M$BADPP    1723**DCL-ENT
M$CGCTL    1704**DCL-ENT
M$CGINFO    1704**DCL-ENT
M$CHECK    1685**DCL-ENT
M$CHGUNIT    1743**DCL-ENT
M$CLRSTK    1741**DCL-ENT
M$CMDVAR    1752**DCL-ENT
M$CONFIG    1713**DCL-ENT
M$CORRES    1688**DCL-ENT
M$CPEXIT    1697**DCL-ENT
M$CVM    1721**DCL-ENT
M$CVOL    1686**DCL-ENT
M$DCLFLD    1713**DCL-ENT
M$DEACTIVATE    1703**DCL-ENT
M$DELREC    1685**DCL-ENT
M$DEQ    1750**DCL-ENT
M$DETACH    1705**DCL-ENT
M$DEVICE    1687**DCL-ENT
M$DISPLAY    1750**DCL-ENT
M$DISPRES    1690**DCL-ENT
M$DLIB    1696**DCL-ENT
M$DRIBBLE    1713**DCL-ENT
M$DRTN    1741**DCL-ENT
M$DSUSER    1698**DCL-ENT
M$ENQ    1749**DCL-ENT
M$EOM    1708**DCL-ENT
M$ERASE    1714**DCL-ENT
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:299  
M$ERR    1695**DCL-ENT
M$ERRMSG    1746**DCL-ENT
M$EVENT    1738**DCL-ENT
M$EXHUME    1747**DCL-ENT
M$EXIT    1695**DCL-ENT
M$EXTEND    1687**DCL-ENT
M$FDP    1719**DCL-ENT
M$FDS    1718**DCL-ENT
M$FEBOOT    1711**DCL-ENT
M$FECTL    1712**DCL-ENT
M$FEDUMP    1711**DCL-ENT
M$FID    1746**DCL-ENT
M$FINDPROC    1700**DCL-ENT
M$FSUSER    1698**DCL-ENT
M$FVP    1720**DCL-ENT
M$FWCG    1704**DCL-ENT
M$GBPL    1724**DCL-ENT
M$GDDL    1720**DCL-ENT
M$GDP    1719**DCL-ENT
M$GDS    1718**DCL-ENT
M$GETMOUSE    1729**DCL-ENT
M$GETPM    1730**DCL-ENT
M$GJOB    1748**DCL-ENT
M$GLINEATTR    1708**DCL-ENT
M$GOODPP    1723**DCL-ENT
M$GPLATEN    1716**DCL-ENT
M$GPROMPT    1715**DCL-ENT
M$GTRMATTR    1709**DCL-ENT
M$GTRMCTL    1707**DCL-ENT
M$GTRMTAB    1710**DCL-ENT
M$GVP    1719**DCL-ENT
M$HELP    1746**DCL-ENT
M$INT    1738**DCL-ENT
M$INTRTN    1699**DCL-ENT
M$IOQ    1734**DCL-ENT
M$JOBSTATS    1748**DCL-ENT
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:300  
M$KEYIN    1688**DCL-ENT
M$LDEV    1683**DCL-ENT
M$LDTRC    1696**DCL-ENT
M$LIMIT    1689**DCL-ENT
M$LINES    1688**DCL-ENT
M$LINK    1695**DCL-ENT
M$MADMUCK    1691**DCL-ENT
M$MAKUSER    1722**DCL-ENT
M$MBS    1690**DCL-ENT
M$MDFFLD    1714**DCL-ENT
M$MERC    1739**DCL-ENT
M$MERCS    1740**DCL-ENT
M$MIRROR    1734**DCL-ENT
M$MONINFO    1751**DCL-ENT
M$MPL    1724**DCL-ENT
M$NODEINFO    1715**DCL-ENT
M$NXTUSR    1749**DCL-ENT
M$OCMSG    1747**DCL-ENT
M$OLAY    1695**DCL-ENT
M$PAS    1724**DCL-ENT
M$PATHCON    1747**DCL-ENT
M$PDS    1718**DCL-ENT
M$PFIL    1685**DCL-ENT
M$PLATEN    1709**DCL-ENT
M$PRECORD    1687**DCL-ENT
M$PROCNAME    1700**DCL-ENT
M$PROFILE    1711**DCL-ENT
M$PROMPT    1707**DCL-ENT
M$RACST    1691**DCL-ENT
M$RDSYSLOG    1732**DCL-ENT
M$RELRES    1690**DCL-ENT
M$RELSTARF    1692**DCL-ENT
M$REM    1692**DCL-ENT
M$RENV    1739**DCL-ENT
M$REQUIRE    1691**DCL-ENT
M$RETRYS    1740**DCL-ENT
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:301  
M$REW    1686**DCL-ENT
M$RLSFLD    1714**DCL-ENT
M$RPRIV    1742**DCL-ENT
M$RSPP    1721**DCL-ENT
M$RSWITCH    1743**DCL-ENT
M$RUE    1749**DCL-ENT
M$SAD    1722**DCL-ENT
M$SAVE    1698**DCL-ENT
M$SCON    1699**DCL-ENT
M$SCREECH    1697**DCL-ENT
M$SENV    1739**DCL-ENT
M$SETFMA    1683**DCL-ENT
M$SETFP    1712**DCL-ENT
M$SINPUT    1710**DCL-ENT
M$SLCFLD    1715**DCL-ENT
M$SMOUSE    1729**DCL-ENT
M$SMPRT    1721**DCL-ENT
M$SPRIV    1742**DCL-ENT
M$SSC    1722**DCL-ENT
M$SSWITCH    1742**DCL-ENT
M$STATE    1751**DCL-ENT
M$STD    1723**DCL-ENT
M$STIMER    1737**DCL-ENT
M$STLPP    1720**DCL-ENT
M$STRAP    1737**DCL-ENT
M$STRMATTR    1709**DCL-ENT
M$STRMCTL    1707**DCL-ENT
M$STRMTAB    1710**DCL-ENT
M$SYMBIO    1748**DCL-ENT
M$SYSCON    1734**DCL-ENT
M$SYSID    1752**DCL-ENT
M$TDCLOSE    1733**DCL-ENT
M$TDIO    1733**DCL-ENT
M$TDOPEN    1732**DCL-ENT
M$TDREQCPU    1733**DCL-ENT
M$TEMPWROC    1727**DCL-ENT
PL6.E3A0      #009=XSL$CL File=XSL$SOCKET1.:TCA2TSI                              SUN 11/16/97 14:34 Page:302  
M$TIME    1750**DCL-ENT
M$TRAP    1737**DCL-ENT
M$TRMISC    1712**DCL-ENT
M$TRTN    1741**DCL-ENT
M$TRUNC    1684**DCL-ENT
M$TTIMER    1737**DCL-ENT
M$UC    1707**DCL
M$UMPL    1724**DCL-ENT
M$UNFID    1746**DCL-ENT
M$UNLATCH    1703**DCL-ENT
M$UNSHARE    1700**DCL-ENT
M$USRFIELD    1743**DCL-ENT
M$VIRTUAL    1718**DCL-ENT
M$WEOF    1686**DCL-ENT
M$WRSYSLOG    1732**DCL-ENT
M$XCON    1738**DCL-ENT
M$XCONRTN    1699**DCL-ENT
M$XEQTIME    1751**DCL-ENT
M$XFLUSH    1692**DCL-ENT
M$XMOUSE    1729**DCL-ENT
M$XXX    1695**DCL-ENT
M$YC    1697**DCL-ENT
PARM3CHARS    3647**DCL
XSL$CL       6**PROC
XSL$CL_CANCEL    3939**ENTRY
XSL$CL_CLOSE    3914**ENTRY
XSL$CL_GET    3898**ENTRY
XSL$CL_OPEN    3859**ENTRY
XSL$CL_READ    3729**ENTRY
XSL$CL_REL    3906**ENTRY
XSL$CL_WRITE    3696**ENTRY
XSL$SOCKADDR    3022**DCL
XSL$SOCKHD    3521**DCL
XSL_ERRNO    3626**DCL
XSL_KEYBUF$    3627**DCL

PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:303  
     1976        1        /*T***********************************************************/
     1977        2        /*T*                                                         */
     1978        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1979        4        /*T*                                                         */
     1980        5        /*T***********************************************************/
     1981        6        /*
     1982        7            Socket Library Event Log
     1983        8
     1984        9            This log is a circular buffer of XSL_EVENTMAX+1 entries.  Each
     1985       10            entry is one word long, except for ER entries which occupy one
     1986       11            or two words.  In all entries the first two bytes are the ASCII
     1987       12            chars identifying the entry.  The remainder of the entry contains
     1988       13            information about which socket or buffer the event involves.
     1989       14            Here are the event types.....
     1990       15                AV  - B$COMIO DATA_AVL event received           SOCK
     1991       16                CL  - M$CLOSE                                   SOCK
     1992       17                ER  - monitor service error, code follows       SOCK or BUFX
     1993       18                EV  - B$NWIO event received                     BUFX
     1994       19                GB  - get buffer                                BUFX
     1995       20                GP  - get socket pointer                        PLUGH
     1996       21                GT  - M$GETDCB                                  SOCK
     1997       22                NW  - M$READ WAIT=NO                            BUFX
     1998       23                OP  - M$OPEN                                    SOCK
     1999       24                RB  - release buffer                            BUFX
     2000       25                RD  - M$READ WAIT=YES                           SOCK
     2001       26                RL  - M$RELDCB                                  SOCK
     2002       27                RQ  - B$COMIO DATA_RQS event received           SOCK
     2003       28                WR  - M$WRITE                                   SOCK
     2004       29                WT  - M$WAIT                                    SOCK or zero
     2005       30                WX  - M$WAIT for B$NWIO event(s)                SOCK
     2006       31                XX  - M$TRMPRG                                  SOCK
     2007       32
     2008       33            Here are the types of 'remainder' info.....
     2009       34                BUFX    - offset into DS of this data buffer (XSL$DATABUF)
     2010       35                SOCK    - offset into DS of this socket (XSL$SOCKINFO)
     2011       36                PLUGH   - IC of caller
     2012       37
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:304  
     2013       38            The event log starts at the address held in XSL_EVENTLOG$.
     2014       39            The index of the next available entry is in XSL_EVENTIDX.
     2015       40        */
     2016       41        XSL$EVLOG: PROC( CODE, DATA) NOAUTO;
     2017       42
     2018       43    1       DCL XSL_EVENTIDX SBIN SYMREF;
     2019       44    1       DCL XSL_EVENTMAX SBIN SYMREF;
     2020       45    1       DCL XSL_EVENTLOG$ PTR SYMREF;
     2021       46
     2022       47    1       DCL CODE UBIN;
     2023       48    1       DCL DATA UBIN;
     2024       49    1       DCL EVLOG(0:0) UBIN BASED( XSL_EVENTLOG$);
     2025       50    1       DCL XCODE UBIN;
     2026       51    1       DCL XDATA UBIN;
     2027       52        %EQU BLANKS = BITBIN( '040040'O);
     2028       53
     2029       54    2       DO INHIBIT;
     2030       55    2           IF XSL_EVENTLOG$ = ADDR( NIL) THEN RETURN;
     2031       56    2           XCODE = 0;
     2032       57    3           IF ADDR( CODE) ~= ADDR( NIL) THEN DO;
     2033       58    3               XCODE = CODE - %BLANKS;
     2034       59    3               XDATA = DATA / 262144;
     2035       60    3               END;
     2036       61    2           ELSE
     2037       62    2               XDATA = DATA;
     2038       63    2           EVLOG( XSL_EVENTIDX) = XCODE + XDATA;
     2039       64    2           XSL_EVENTIDX = XSL_EVENTIDX + 1;
     2040       65    2           IF XSL_EVENTIDX > XSL_EVENTMAX THEN
     2041       66    2               XSL_EVENTIDX = 0;
     2042       67    2           RETURN;
     2043       68    2           END;
     2044       69
     2045       70    1   END XSL$EVLOG;
     2046       71        %EOD;

PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:305  
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$EVLOG.

   Procedure XSL$EVLOG requires 36 words for executable code.
   Procedure XSL$EVLOG is declared NOAUTO and requires 6 words of local(STATIC) storage.

PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:306  

 Object Unit name= XSL$EVLOG                                  File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:36:11.64 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     6      6  XSL$EVLOG
    1   Proc  even  none    36     44  XSL$EVLOG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        2  XSL$EVLOG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_STATIC_2
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSL_EVENTIDX                          XSL_EVENTMAX                          XSL_EVENTLOG$
     B_VECTNIL
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:307  


     1976        1        /*T***********************************************************/
     1977        2        /*T*                                                         */
     1978        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1979        4        /*T*                                                         */
     1980        5        /*T***********************************************************/
     1981        6        /*
     1982        7            Socket Library Event Log
     1983        8
     1984        9            This log is a circular buffer of XSL_EVENTMAX+1 entries.  Each
     1985       10            entry is one word long, except for ER entries which occupy one
     1986       11            or two words.  In all entries the first two bytes are the ASCII
     1987       12            chars identifying the entry.  The remainder of the entry contains
     1988       13            information about which socket or buffer the event involves.
     1989       14            Here are the event types.....
     1990       15                AV  - B$COMIO DATA_AVL event received           SOCK
     1991       16                CL  - M$CLOSE                                   SOCK
     1992       17                ER  - monitor service error, code follows       SOCK or BUFX
     1993       18                EV  - B$NWIO event received                     BUFX
     1994       19                GB  - get buffer                                BUFX
     1995       20                GP  - get socket pointer                        PLUGH
     1996       21                GT  - M$GETDCB                                  SOCK
     1997       22                NW  - M$READ WAIT=NO                            BUFX
     1998       23                OP  - M$OPEN                                    SOCK
     1999       24                RB  - release buffer                            BUFX
     2000       25                RD  - M$READ WAIT=YES                           SOCK
     2001       26                RL  - M$RELDCB                                  SOCK
     2002       27                RQ  - B$COMIO DATA_RQS event received           SOCK
     2003       28                WR  - M$WRITE                                   SOCK
     2004       29                WT  - M$WAIT                                    SOCK or zero
     2005       30                WX  - M$WAIT for B$NWIO event(s)                SOCK
     2006       31                XX  - M$TRMPRG                                  SOCK
     2007       32
     2008       33            Here are the types of 'remainder' info.....
     2009       34                BUFX    - offset into DS of this data buffer (XSL$DATABUF)
     2010       35                SOCK    - offset into DS of this socket (XSL$SOCKINFO)
     2011       36                PLUGH   - IC of caller
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:308  
     2012       37
     2013       38            The event log starts at the address held in XSL_EVENTLOG$.
     2014       39            The index of the next available entry is in XSL_EVENTIDX.
     2015       40        */
     2016       41        XSL$EVLOG: PROC( CODE, DATA) NOAUTO;

     41  1 000000   000000 700200 xent  XSL$EVLOG    TSX0  ! X66_STATIC_2
         1 000001   000000 000002 0                  ZERO    0,2

     2017       42
     2018       43    1       DCL XSL_EVENTIDX SBIN SYMREF;
     2019       44    1       DCL XSL_EVENTMAX SBIN SYMREF;
     2020       45    1       DCL XSL_EVENTLOG$ PTR SYMREF;
     2021       46
     2022       47    1       DCL CODE UBIN;
     2023       48    1       DCL DATA UBIN;
     2024       49    1       DCL EVLOG(0:0) UBIN BASED( XSL_EVENTLOG$);
     2025       50    1       DCL XCODE UBIN;
     2026       51    1       DCL XDATA UBIN;
     2027       52        %EQU BLANKS = BITBIN( '040040'O);
     2028       53
     2029       54    2       DO INHIBIT;

     2030       55    2           IF XSL_EVENTLOG$ = ADDR( NIL) THEN RETURN;

     55  1 000002   000000 236200 xsym               LDQ   ! XSL_EVENTLOG$
         1 000003   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000004   000007 601200 1                  TNZ   ! s:56

     55  1 000005   000000 221200 0                  LDX1  ! 0
         1 000006   000001 702211                    TSX2  ! 1,X1

     2031       56    2           XCODE = 0;

     56  1 000007   000003 450200 0                  STZ   ! XCODE

     2032       57    3           IF ADDR( CODE) ~= ADDR( NIL) THEN DO;
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:309  

     57  1 000010   000001 236200 0                  LDQ   ! @CODE
         1 000011   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         1 000012   000024 600200 1                  TZE   ! s:62

     2033       58    3               XCODE = CODE - %BLANKS;

     58  1 000013   000001 470600 0                  LDP0  ! @CODE
         1 000014   000000 235300                    LDA   ! 0,,PR0
         1 000015   040040 135207                    SBLA  ! 16416,DL
         1 000016   000003 755200 0                  STA   ! XCODE

     2034       59    3               XDATA = DATA / 262144;

     59  1 000017   000002 471600 0                  LDP1  ! @DATA
         1 000020   100000 236300                    LDQ   ! 0,,PR1
         1 000021   000022 772200                    QRL   ! 18
         1 000022   000004 756200 0                  STQ   ! XDATA

     2035       60    3               END;

     60  1 000023   000027 710200 1                  TRA   ! s:63

     2036       61    2           ELSE
     2037       62    2               XDATA = DATA;

     62  1 000024   000002 470600 0                  LDP0  ! @DATA
         1 000025   000000 235300                    LDA   ! 0,,PR0
         1 000026   000004 755200 0                  STA   ! XDATA

     2038       63    2           EVLOG( XSL_EVENTIDX) = XCODE + XDATA;

     63  1 000027   000003 236200 0                  LDQ   ! XCODE
         1 000030   000004 036200 0                  ADLQ  ! XDATA
         1 000031   000000 470600 xsym               LDP0  ! XSL_EVENTLOG$
         1 000032   000000 720200 xsym               LXL0  ! XSL_EVENTIDX
         1 000033   000000 756310                    STQ   ! 0,X0,PR0
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:310  

     2039       64    2           XSL_EVENTIDX = XSL_EVENTIDX + 1;

     64  1 000034   000000 054200 xsym               AOS   ! XSL_EVENTIDX

     2040       65    2           IF XSL_EVENTIDX > XSL_EVENTMAX THEN

     65  1 000035   000000 236200 xsym               LDQ   ! XSL_EVENTIDX
         1 000036   000000 116200 xsym               CMPQ  ! XSL_EVENTMAX
         1 000037   000041 604600 1                  TMOZ  ! s:67

     2041       66    2               XSL_EVENTIDX = 0;

     66  1 000040   000000 450200 xsym               STZ   ! XSL_EVENTIDX

     2042       67    2           RETURN;

     67  1 000041   000000 221200 0                  LDX1  ! 0
         1 000042   000001 702211                    TSX2  ! 1,X1

     2043       68    2           END;

     2044       69
     2045       70    1   END XSL$EVLOG;

     70  1 000043   000001 702211                    TSX2  ! 1,X1
     2046       71        %EOD;

PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:311  
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure XSL$EVLOG.
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:312  

 **** Variables and constants ****

  ****  Section 000  Data  XSL$EVLOG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w PTR         r     1 @CODE                      2-0-0/w PTR         r     1 @DATA
    *0-0-0/w UBIN        r     1 CODE                      *0-0-0/w UBIN        r     1 DATA
     3-0-0/w UBIN        r     1 XCODE                      4-0-0/w UBIN        r     1 XDATA

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSL_EVENTIDX               0-0-0/w PTR         r     1 XSL_EVENTLOG$
     0-0-0/w SBIN        r     1 XSL_EVENTMAX

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 EVLOG(0:0)


   Procedure XSL$EVLOG requires 36 words for executable code.
   Procedure XSL$EVLOG is declared NOAUTO and requires 6 words of local(STATIC) storage.
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:313  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:314  
          MINI XREF LISTING

CODE
        47**DCL        41--PROC       57--IF         58>>ASSIGN
DATA
        48**DCL        41--PROC       59>>ASSIGN     62>>ASSIGN
EVLOG
        49**DCL        63<<ASSIGN
XCODE
        50**DCL        56<<ASSIGN     58<<ASSIGN     63>>ASSIGN
XDATA
        51**DCL        59<<ASSIGN     62<<ASSIGN     63>>ASSIGN
XSL_EVENTIDX
        43**DCL        63>>ASSIGN     64<<ASSIGN     64>>ASSIGN     65>>IF         66<<ASSIGN
XSL_EVENTLOG$
        45**DCL        49--IMP-PTR    55>>IF         63>>ASSIGN
XSL_EVENTMAX
        44**DCL        65>>IF
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:315  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #010=XSL$EVLOG File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:36 Page:316  
              MINI UREF LISTING

XSL$EVLOG      41**PROC

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:317  
     2047        1        /*T***********************************************************/
     2048        2        /*T*                                                         */
     2049        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2050        4        /*T*                                                         */
     2051        5        /*T***********************************************************/
     2052        6        XSL$SOCKMGMT: PROC( SOCK#, SOCK$) ALTRET;
     2053        7        %INCLUDE B$ROSEG;
     2054       70        %INCLUDE B_SEGIDS_C;
     2055      609        %INCLUDE CP_6;
     2056      690            %FPT_EVENT( UENTRY=XSL$ASYNC, STCLASS=CONSTANT);
     2057      704            %FPT_GDS (STCLASS=CONSTANT);
     2058      720        %INCLUDE XSL_PERR_C;
     2059      775        %INCLUDE XSL_SOCKET_E;
     2060     1033        %INCLUDE XSL_SOCKET_M;
     2061     1794        %INCLUDE XSL_INTERNAL_M;
     2062     2045            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( BUF$)");
     2063     2078            %XSL$DATABUF( STCLASS=BASED);
     2064     2111            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( P$)");
     2065     2255            %XSL$SOCKINFO( FPTN=XSL_SOCKINFO, STCLASS=CONSTANT);
     2066     2399            %XSL_SOCKINIT( STCLASS=CONSTANT);
     2067     2522            %XSL$SOCKHD( STCLASS="BASED(XSL_SOCK$$)");
     2068     2555
     2069     2556    1       DCL XSL$ASYNC ENTRY ASYNC;
     2070     2557    1       DCL XSL$CL_GET ENTRY(1) ALTRET;
     2071     2558    1       DCL XSL$CL_REL ENTRY(1) ALTRET;
     2072     2559    1       DCL XSL$ROUTES ENTRY(2) ALTRET;
     2073     2560    1       DCL XSL$EVLOG ENTRY(2);
     2074     2561
     2075     2562            /* BUF$ declared below must be the first AUTO variable */
     2076     2563            /* so that the PLUGH code later on will work correctly */
     2077     2564    1       DCL BUF$ PTR;
     2078     2565    1       DCL 1 PLUGH BASED ALIGNED,
     2079     2566    1           2 ADR UBIN(18),
     2080     2567    1           2 * BIT(18);
     2081     2568    1       DCL I UBIN;
     2082     2569    1       DCL TMP SBIN;
     2083     2570    1       DCL P$ PTR;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:318  
     2084     2571    1       DCL 1 R CONSTANT,
     2085     2572    1           2 * BIT(24) INIT( '00000000'O) UNAL,
     2086     2573    1           2 * BIT(12) INIT( %ROSID) UNAL;
     2087     2574    1       DCL B$ROSEG$ REDEF R PTR;
     2088     2575    1       DCL SOCK# UBIN;
     2089     2576    1       DCL SOCK$ PTR;
     2090     2577    1       DCL SOCK$ERR REDEF SOCK$ SBIN; /* Error code if ALTRET */
     2091     2578            %FPT_GDS (STCLASS=AUTO, FPTN=FPT@GDS);
     2092     2594    1       DCL XSL_DCBN2SOCK$$ PTR STATIC SYMDEF INIT( ADDR( NIL));
     2093     2595    1       DCL DCBN2SOCK(0:0) SBIN BASED( XSL_DCBN2SOCK$$);
     2094     2596    1       DCL MAXDCBN SBIN STATIC INIT( 0);
     2095     2597    1       DCL XSL_BUFSIZE SBIN STATIC SYMDEF INIT( 0);
     2096     2598    1       DCL XSL_EVENTIDX SBIN STATIC SYMDEF INIT( 0);
     2097     2599    1       DCL XSL_EVENTMAX SBIN STATIC SYMDEF INIT( 0);
     2098     2600    1       DCL XSL_EVENTLOG$ PTR STATIC SYMDEF INIT( ADDR( NIL));
     2099     2601    1       DCL XSL_SOCK$$ PTR STATIC SYMDEF INIT( ADDR( NIL));
     2100     2602    1       DCL XSL_ERRNO SBIN SYMREF;
     2101     2603
     2102     2604    1   XSL$DCBNPTR: ENTRY( SOCK#, SOCK$) ALTRET;
     2103     2605
     2104     2606            /* log caller's address */
     2105     2607    1       CALL XSL$EVLOG( 'GP', PINCRW(ADDR(BUF$),-5)->PLUGH.ADR);
     2106     2608    1       IF XSL_SOCK$$ = ADDR( NIL) OR
     2107     2609    1         SOCK# >= MAXDCBN OR DCBN2SOCK( SOCK#) = -1 THEN
     2108     2610    1           SOCK$ERR = %E$BADF;
     2109     2611    2       ELSE DO;
     2110     2612    2           SOCK$ = XSL$SOCKHD.SOCK$( DCBN2SOCK( SOCK#));
     2111     2613    3           IF NOT SOCK$->SOCK.FLAGS.TERMINATED THEN DO;
     2112     2614    3               IF SOCK$->SOCK.FEPERROR = 0 THEN
     2113     2615    3                   RETURN;
     2114     2616    4               ELSE DO;
     2115     2617    4                   I = SOCK$->SOCK.FEPERROR;
     2116     2618    4                   SOCK$->SOCK.FEPERROR = 0;
     2117     2619    4                   SOCK$ERR = I;
     2118     2620    4                   END;
     2119     2621    3               END;
     2120     2622    2           ELSE
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:319  
     2121     2623    2               SOCK$ERR = %E$NOTSOCK;
     2122     2624    2           END;
     2123     2625    1       ALTRETURN;
     2124     2626
     2125     2627    1   XSL$SOCKPTR: ENTRY( SOCK#, SOCK$) ALTRET;
     2126     2628
     2127     2629            /* log caller's address */
     2128     2630    1       CALL XSL$EVLOG( 'GP', PINCRW(ADDR(BUF$),-5)->PLUGH.ADR);
     2129     2631    1       IF XSL_SOCK$$ = ADDR(NIL) OR SOCK# >= XSL$SOCKHD.MAXSOCK THEN
     2130     2632    1           SOCK$ERR = %E$BADF;
     2131     2633    1       ELSE
     2132     2634    1           IF XSL$SOCKHD.SOCK$( SOCK#) -> SOCK.FLAGS.TERMINATED THEN
     2133     2635    1               SOCK$ERR = %E$NOTSOCK;
     2134     2636    2           ELSE DO;
     2135     2637    2               SOCK$ = XSL$SOCKHD.SOCK$( SOCK#);
     2136     2638    2               IF SOCK$->SOCK.FEPERROR = 0 THEN
     2137     2639    2                   RETURN;
     2138     2640    3               ELSE DO;
     2139     2641    3                   I = SOCK$->SOCK.FEPERROR;
     2140     2642    3                   SOCK$->SOCK.FEPERROR = 0;
     2141     2643    3                   SOCK$ERR = I;
     2142     2644    3                   END;
     2143     2645    2               END;
     2144     2646    1       ALTRETURN;
     2145     2647
     2146     2648    1   XSL$GETSOCK: ENTRY( SOCK#, SOCK$) ALTRET;
     2147     2649
     2148     2650    1       IF XSL_SOCK$$ = ADDR( NIL) THEN CALL SOCKINIT( XSL_SOCKINIT);
     2149     2651
     2150     2652    2       DO I = 0 TO XSL$SOCKHD.MAXSOCK-1;
     2151     2653    2           P$ = XSL$SOCKHD.SOCK$( I);
     2152     2654    3           IF SOCK.FLAGS.TERMINATED THEN DO;
     2153     2655    3               SOCK$ = P$;
     2154     2656    3               SOCK = XSL_SOCKINFO;
     2155     2657    3               SOCK.FLAGS = '0'B;
     2156     2658    3               SOCK.SOCK# = I;
     2157     2659    4               CALL XSL$CL_GET( SOCK) WHENALTRETURN DO;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:320  
     2158     2660    4                   SOCK$ERR = %E$MFILE;
     2159     2661    4                   ALTRETURN;
     2160     2662    4                   END;
     2161     2663    3               SOCK# = I;
     2162     2664    3               DCBN2SOCK( SOCK.DCB#) = I;
     2163     2665    3               SOCK.MAXRDS = XSL$SOCKHD.MAXRDS;
     2164     2666    3               SOCK.MAXBUF = XSL$SOCKHD.MAXBUF;
     2165     2667    3               RETURN;
     2166     2668    3               END;
     2167     2669    2           END;
     2168     2670    1       SOCK$ERR = %E$MFILE;
     2169     2671    1   BAILOUT:
     2170     2672    1       ALTRETURN;
     2171     2673
     2172     2674    1   XSL$RELSOCK: ENTRY( SOCK#) ALTRET;
     2173     2675
     2174     2676    1       IF XSL_SOCK$$ = ADDR( NIL) OR SOCK# >= XSL$SOCKHD.MAXSOCK THEN
     2175     2677    1           GOTO BAILOUT;
     2176     2678    1       P$ = XSL$SOCKHD.SOCK$( SOCK#);
     2177     2679    1       IF SOCK.FLAGS.TERMINATED THEN
     2178     2680    1           GOTO BAILOUT;
     2179     2681    2       IF SOCK.MAXRDS > 0 THEN DO INHIBIT;
     2180     2682    2           BUF$ = PINCRW( XSL_SOCK$$, SOCK.BUFHD);
     2181     2683    3           DO WHILE( BUF$ ~= XSL_SOCK$$);
     2182     2684    3               DATABUF.FLAGS.BUSY = '0'B;
     2183     2685    3               DATABUF.START = 0;
     2184     2686    3               DATABUF.LEN = 0;
     2185     2687    3               BUF$ = PINCRW( XSL_SOCK$$, DATABUF.NXT);
     2186     2688    3               END;
     2187     2689    3           IF XSL$SOCKHD.BUFHD = 0 THEN DO;
     2188     2690    3               XSL$SOCKHD.BUFHD = SOCK.BUFHD;
     2189     2691    3               XSL$SOCKHD.BUFTL = SOCK.BUFTL;
     2190     2692    3               END;
     2191     2693    3           ELSE DO;
     2192     2694    3               PINCRW( XSL_SOCK$$, XSL$SOCKHD.BUFTL)->XSL$DATABUF.NXT = SOCK.BUFHD;
     2193     2695    3               IF SOCK.BUFTL ~= 0 THEN
     2194     2696    3                   XSL$SOCKHD.BUFTL = SOCK.BUFTL;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:321  
     2195     2697    3               END;
     2196     2698    2           END;
     2197     2699    1       DCBN2SOCK( SOCK.DCB#) = -1;
     2198     2700    1       CALL XSL$CL_REL( SOCK);
     2199     2701    1       SOCK = XSL_SOCKINFO;
     2200     2702    1       RETURN;
     2201     2703        %EJECT;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:322  
     2202     2704        /*F* NAME: XSL$SOCKINIT -- Initialize Socket Library
     2203     2705        ..::IT "Purpose:"
     2204     2706        .INL +4
     2205     2707        Initializes the Socket Library using given parameters.
     2206     2708        ..::IT "C Usage:"
     2207     2709        .INL 4
     2208     2710        .FIF
     2209     2711        XSL$SOCKINIT( &parms );
     2210     2712        ..::IT "PL6 Usage:"
     2211     2713        .INL 4
     2212     2714        .FIF
     2213     2715        CALL XSL$SOCKINIT( parms );
     2214     2716        ..::IT "Parameter:"
     2215     2717        .INL 4
     2216     2718        .FIF
     2217     2719        parms       XSL_SOCKINIT parameter structure
     2218     2720        ..::IT "Description:"
     2219     2721        The XSL$SOCKINIT procedure initializes the Socket Library using the parameters
     2220     2722        passed in an XSL_SOCKINIT structure.  An application may wish to invoke
     2221     2723        XSL$SOCKINIT to specify the use or non-use of NoWait I/O, to reserve memory
     2222     2724        space for I/O buffers, or to set up a linkage to handle the arrival of
     2223     2725        application-specific events.
     2224     2726        .SPB
     2225     2727        The parms parameter contains information used in Socket Library initialization.
     2226     2728        In C source, it is an xsl_sockinit structure found in <xsl_socket.h>.  In PL6
     2227     2729        source, it is an XSL_SOCKINIT structure found in XSL_SOCKET_M.
     2228     2730        .SPB
     2229     2731        The default values for the use of XSL_SOCKINIT currently are MAXSOCK=2,
     2230     2732        NWSOCKS=-1, BUFSIZE=512, MEM=NIL, EVNT=NIL, MAXRDS=2, MAXBUF=0.
     2231     2733        .SPB
     2232     2734        The defaults provided by XSL_SOCKINIT are adequate for simple applications.
     2233     2735        For applications with special requirements, you will want to choose more
     2234     2736        appropriate values, such as larger BUFSIZE or MAXSOCK.
     2235     2737        */
     2236     2738    1   XSL$SOCKINIT: ENTRY( SOCK#) ALTRET;
     2237     2739
     2238     2740    1       CALL SOCKINIT( SOCK#) ALTRET( BAILOUT);
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:323  
     2239     2741    1       RETURN;
     2240     2742
     2241     2743    1   SOCKINIT: PROC( SOCKINIT) ALTRET;
     2242     2744
     2243     2745        %XSL_SOCKINIT( FPTN=SOCKINIT, STCLASS=PARAM);
     2244     2868    2       DCL 1 VECT BASED DALIGNED, 2 * BIT(36), 2 BASE$ PTR;
     2245     2869
     2246     2870    2       TMP = SOCKINIT.NWSOCKS;
     2247     2871    2       IF TMP = -1 THEN
     2248     2872    2           TMP = SOCKINIT.MAXSOCK;
     2249     2873    2       I = SIZEW(XSL$SOCKHD)-1 + SOCKINIT.MAXSOCK*( SIZEW(SOCK) + 1) +
     2250     2874    2         ( 1 + TMP * ( SOCKINIT.MAXRDS + SOCKINIT.MAXBUF)) *
     2251     2875    2         ( SIZEW( XSL$DATABUF) + ( SOCKINIT.BUFSIZE + 3) / 4);
     2252     2876    2       MAXDCBN = 1 + B$ROSEG$->B$ROSEG.NUMDCBS;
     2253     2877    2       I = I + MAXDCBN;  /* for DCBN2SOCK array */
     2254     2878    2       I = I + 64;  /* for event log & debugging of buffer mgmt */
     2255     2879
     2256     2880    2       IF I > 262143   /* space needed exceeds 256K */
     2257     2881    3       THEN DO;
     2258     2882    3           XSL_ERRNO = %E$INVAL;
     2259     2883    3           ALTRETURN;
     2260     2884    3           END;
     2261     2885
     2262     2886    2       XSL_EVENTMAX = 63;
     2263     2887    3       IF SOCKINIT.MEM$ = ADDR( NIL) THEN DO;
     2264     2888    3           FPT@GDS = FPT_GDS;
     2265     2889    3           ADDR( FPT@GDS.V_) -> VECT.BASE$ = ADDR( FPT@GDS.V);
     2266     2890    3           ADDR( FPT@GDS.V) -> VECT.BASE$ = ADDR( NIL);
     2267     2891    3           FPT@GDS.RESULTS_ = FPT@GDS.V_;
     2268     2892    3           FPT@GDS.V.SEGSIZE# = I;
     2269     2893    4           CALL M$GDS (FPT@GDS) WHENALTRETURN DO;
     2270     2894    4               XSL_ERRNO = %E$FAILURE;
     2271     2895    4               ALTRETURN;
     2272     2896    4               END;
     2273     2897    3           XSL_SOCK$$ = ADDR(FPT@GDS.V) -> VECT.BASE$;
     2274     2898    3           END;
     2275     2899    2       ELSE XSL_SOCK$$ = SOCKINIT.MEM$;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:324  
     2276     2900
     2277     2901    2       XSL_DCBN2SOCK$$ = PINCRW( XSL_SOCK$$, I - MAXDCBN);
     2278     2902
     2279     2903    2       XSL$SOCKHD.MAXSOCK = SOCKINIT.MAXSOCK;
     2280     2904    2       XSL$SOCKHD.SEGSIZE = I;
     2281     2905
     2282     2906    2       P$ = ADDR( XSL$SOCKHD.SOCK$( XSL$SOCKHD.MAXSOCK));
     2283     2907    3       DO I = 0 TO XSL$SOCKHD.MAXSOCK-1;
     2284     2908    3           XSL$SOCKHD.SOCK$( I) = P$;
     2285     2909    3           SOCK = XSL_SOCKINFO;
     2286     2910    3           P$ = PINCRW( P$, SIZEW( SOCK));
     2287     2911    3           END;
     2288     2912
     2289     2913    2       I = 1 + TMP * ( SOCKINIT.MAXRDS + SOCKINIT.MAXBUF);
     2290     2914    3       IF I > 0 THEN DO;
     2291     2915    3           TMP = SIZEW( XSL$DATABUF) + ( SOCKINIT.BUFSIZE + 3) / 4;
     2292     2916    3           XSL$SOCKHD.BUFHD = POFFW( P$, XSL_SOCK$$);
     2293     2917    4           DO WHILE( I > 1);
     2294     2918    4               P$->XSL$DATABUF.NXT = POFFW( P$, XSL_SOCK$$) + TMP;
     2295     2919    4               P$ = PINCRW( P$, TMP);
     2296     2920    4               I = I - 1;
     2297     2921    4               END;
     2298     2922    3           P$->XSL$DATABUF.NXT = 0;
     2299     2923    3           XSL$SOCKHD.BUFTL = POFFW( P$, XSL_SOCK$$);
     2300     2924    3           P$ = PINCRW( P$, TMP);  /* for subsequent usage of P$ */
     2301     2925    3           END;
     2302     2926    2       XSL_EVENTLOG$ = P$;
     2303     2927    2       XSL_BUFSIZE = SOCKINIT.BUFSIZE;
     2304     2928    2       XSL$SOCKHD.EVNT$ = SOCKINIT.EVNT$;
     2305     2929    3       IF SOCKINIT.NWSOCKS ~= 0 THEN DO;
     2306     2930        /*N*    SOCKINIT.EVNT$ = ENTADDR( XSL$ASYNC);   NEED THIS? */
     2307     2931    3           CALL M$EVENT( FPT_EVENT);
     2308     2932    3           XSL$SOCKHD.MAXRDS = SOCKINIT.MAXRDS;
     2309     2933    3           XSL$SOCKHD.MAXBUF = SOCKINIT.MAXBUF;
     2310     2934    3           END;
     2311     2935    3       ELSE DO;
     2312     2936    3           XSL$SOCKHD.MAXRDS = 0;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:325  
     2313     2937    3           XSL$SOCKHD.MAXBUF = 0;
     2314     2938    3           END;
     2315     2939
     2316     2940    3       DO I = 0 TO MAXDCBN - 1;
     2317     2941    3           DCBN2SOCK( I) = -1;
     2318     2942    3           END;
     2319     2943
     2320     2944    2       CALL XSL$ROUTES( 0);
     2321     2945
     2322     2946    2       RETURN;
     2323     2947    2   END SOCKINIT;
     2324     2948
     2325     2949    1   END XSL$SOCKMGMT;
     2326     2950        %EOD;

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:326  
--  Include file information  --

   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$SOCKMGMT.

   Procedure XSL$SOCKMGMT requires 456 words for executable code.
   Procedure XSL$SOCKMGMT requires 22 words of local(AUTO) storage.

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:327  

 Object Unit name= XSL$SOCKMGMT                               File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:36:21.20 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     38     46  XSL$SOCKMGMT
    2   Data  even  none     7      7  XSL$SOCKMGMT
    3   Proc  even  none   456    710  XSL$SOCKMGMT
    4  RoData even  none     3      3  XSL$SOCKMGMT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        2  XSL$SOCKMGMT
     3      3          yes     yes      Std        2  XSL$DCBNPTR
     3     63          yes     yes      Std        2  XSL$SOCKPTR
     3    140          yes     yes      Std        2  XSL$GETSOCK
     3    240          yes     yes      Std        1  XSL$RELSOCK
     3    347          yes     yes      Std        1  XSL$SOCKINIT

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    2      0  XSL_DCBN2SOCK$$                    2      2  XSL_BUFSIZE
    2      3  XSL_EVENTIDX                       2      4  XSL_EVENTMAX
    2      5  XSL_EVENTLOG$                      2      6  XSL_SOCK$$
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:328  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          Async      0 XSL$ASYNC
         yes           Std       2 XSL$EVLOG
 yes     yes           Std       1 XSL$CL_GET
 yes     yes           Std       1 XSL$CL_REL
 yes     yes           Std       2 XSL$ROUTES
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  XSL_ERRNO                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:329  


     2047        1        /*T***********************************************************/
     2048        2        /*T*                                                         */
     2049        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2050        4        /*T*                                                         */
     2051        5        /*T***********************************************************/
     2052        6        XSL$SOCKMGMT: PROC( SOCK#, SOCK$) ALTRET;

      6  3 000000   000000 700200 xent  XSL$SOCKMGMT TSX0  ! X66_AUTO_2
         3 000001   000026 000002                    ZERO    22,2
         3 000002   000005 710000 3                  TRA     s:2607

     2053        7        %INCLUDE B$ROSEG;
     2054       70        %INCLUDE B_SEGIDS_C;
     2055      609        %INCLUDE CP_6;
     2056      690            %FPT_EVENT( UENTRY=XSL$ASYNC, STCLASS=CONSTANT);
     2057      704            %FPT_GDS (STCLASS=CONSTANT);
     2058      720        %INCLUDE XSL_PERR_C;
     2059      775        %INCLUDE XSL_SOCKET_E;
     2060     1033        %INCLUDE XSL_SOCKET_M;
     2061     1794        %INCLUDE XSL_INTERNAL_M;
     2062     2045            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( BUF$)");
     2063     2078            %XSL$DATABUF( STCLASS=BASED);
     2064     2111            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( P$)");
     2065     2255            %XSL$SOCKINFO( FPTN=XSL_SOCKINFO, STCLASS=CONSTANT);
     2066     2399            %XSL_SOCKINIT( STCLASS=CONSTANT);
     2067     2522            %XSL$SOCKHD( STCLASS="BASED(XSL_SOCK$$)");
     2068     2555
     2069     2556    1       DCL XSL$ASYNC ENTRY ASYNC;
     2070     2557    1       DCL XSL$CL_GET ENTRY(1) ALTRET;
     2071     2558    1       DCL XSL$CL_REL ENTRY(1) ALTRET;
     2072     2559    1       DCL XSL$ROUTES ENTRY(2) ALTRET;
     2073     2560    1       DCL XSL$EVLOG ENTRY(2);
     2074     2561
     2075     2562            /* BUF$ declared below must be the first AUTO variable */
     2076     2563            /* so that the PLUGH code later on will work correctly */
     2077     2564    1       DCL BUF$ PTR;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:330  
     2078     2565    1       DCL 1 PLUGH BASED ALIGNED,
     2079     2566    1           2 ADR UBIN(18),
     2080     2567    1           2 * BIT(18);
     2081     2568    1       DCL I UBIN;
     2082     2569    1       DCL TMP SBIN;
     2083     2570    1       DCL P$ PTR;
     2084     2571    1       DCL 1 R CONSTANT,
     2085     2572    1           2 * BIT(24) INIT( '00000000'O) UNAL,
     2086     2573    1           2 * BIT(12) INIT( %ROSID) UNAL;
     2087     2574    1       DCL B$ROSEG$ REDEF R PTR;
     2088     2575    1       DCL SOCK# UBIN;
     2089     2576    1       DCL SOCK$ PTR;
     2090     2577    1       DCL SOCK$ERR REDEF SOCK$ SBIN; /* Error code if ALTRET */
     2091     2578            %FPT_GDS (STCLASS=AUTO, FPTN=FPT@GDS);
     2092     2594    1       DCL XSL_DCBN2SOCK$$ PTR STATIC SYMDEF INIT( ADDR( NIL));
     2093     2595    1       DCL DCBN2SOCK(0:0) SBIN BASED( XSL_DCBN2SOCK$$);
     2094     2596    1       DCL MAXDCBN SBIN STATIC INIT( 0);
     2095     2597    1       DCL XSL_BUFSIZE SBIN STATIC SYMDEF INIT( 0);
     2096     2598    1       DCL XSL_EVENTIDX SBIN STATIC SYMDEF INIT( 0);
     2097     2599    1       DCL XSL_EVENTMAX SBIN STATIC SYMDEF INIT( 0);
     2098     2600    1       DCL XSL_EVENTLOG$ PTR STATIC SYMDEF INIT( ADDR( NIL));
     2099     2601    1       DCL XSL_SOCK$$ PTR STATIC SYMDEF INIT( ADDR( NIL));
     2100     2602    1       DCL XSL_ERRNO SBIN SYMREF;
     2101     2603
     2102     2604    1   XSL$DCBNPTR: ENTRY( SOCK#, SOCK$) ALTRET;

   2604  3 000003   000000 700200 xent  XSL$DCBNPTR  TSX0  ! X66_AUTO_2
         3 000004   000026 000002                    ZERO    22,2

     2103     2605
     2104     2606            /* log caller's address */
     2105     2607    1       CALL XSL$EVLOG( 'GP', PINCRW(ADDR(BUF$),-5)->PLUGH.ADR);

   2607  3 000005   200023 452500                    STP2    @SOCKINIT+2,,AUTO
         3 000006   000000 236000 4                  LDQ     0
         3 000007   200022 756100                    STQ     @SOCKINIT+1,,AUTO
         3 000010   200022 630500                    EPPR0   @SOCKINIT+1,,AUTO
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:331  
         3 000011   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000012   000000 701000 xent               TSX1    XSL$EVLOG
         3 000013   000000 011000                    NOP     0

     2106     2608    1       IF XSL_SOCK$$ = ADDR( NIL) OR

   2608  3 000014   000006 236000 2                  LDQ     XSL_SOCK$$
         3 000015   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000016   000031 600000 3                  TZE     s:2610
         3 000017   200003 470500                    LDP0    @SOCK#,,AUTO
         3 000020   000000 236100                    LDQ     0,,PR0
         3 000021   000031 604000 3                  TMI     s:2610
         3 000022   000001 116000 2                  CMPQ    MAXDCBN
         3 000023   000031 605000 3                  TPL     s:2610
         3 000024   000000 720100                    LXL0    0,,PR0
         3 000025   000000 471400 2                  LDP1    XSL_DCBN2SOCK$$
         3 000026   100000 235110                    LDA     0,X0,PR1
         3 000027   000027 115000 xsym               CMPA    B_VECTNIL+23
         3 000030   000035 601000 3                  TNZ     s:2612

     2107     2609    1         SOCK# >= MAXDCBN OR DCBN2SOCK( SOCK#) = -1 THEN
     2108     2610    1           SOCK$ERR = %E$BADF;

   2610  3 000031   000011 235007                    LDA     9,DL
         3 000032   200004 470500                    LDP0    @SOCK$,,AUTO
         3 000033   000000 755100                    STA     0,,PR0
         3 000034   000062 710000 3                  TRA     s:2625

     2109     2611    2       ELSE DO;

     2110     2612    2           SOCK$ = XSL$SOCKHD.SOCK$( DCBN2SOCK( SOCK#));

   2612  3 000035   000006 473400 2                  LDP3    XSL_SOCK$$
         3 000036   300004 236105                    LDQ     4,AL,PR3
         3 000037   200004 474500                    LDP4    @SOCK$,,AUTO
         3 000040   400000 756100                    STQ     0,,PR4

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:332  
     2111     2613    3           IF NOT SOCK$->SOCK.FLAGS.TERMINATED THEN DO;

   2613  3 000041   400000 471500                    LDP1    0,,PR4
         3 000042   100001 234100                    SZN     1,,PR1
         3 000043   000060 604000 3                  TMI     s:2623

     2112     2614    3               IF SOCK$->SOCK.FEPERROR = 0 THEN

   2614  3 000044   100001 236100                    LDQ     1,,PR1
         3 000045   000777 316007                    CANQ    511,DL
         3 000046   000050 601000 3                  TNZ     s:2617

     2113     2615    3                   RETURN;

   2615  3 000047   000000 702200 xent               TSX2  ! X66_ARET

     2114     2616    4               ELSE DO;

     2115     2617    4                   I = SOCK$->SOCK.FEPERROR;

   2617  3 000050   100001 236100                    LDQ     1,,PR1
         3 000051   000777 376007                    ANQ     511,DL
         3 000052   200006 756100                    STQ     I,,AUTO

     2116     2618    4                   SOCK$->SOCK.FEPERROR = 0;

   2618  3 000053   000000 236003                    LDQ     0,DU
         3 000054   100001 552104                    STBQ    1,'04'O,PR1

     2117     2619    4                   SOCK$ERR = I;

   2619  3 000055   200006 235100                    LDA     I,,AUTO
         3 000056   400000 755100                    STA     0,,PR4

     2118     2620    4                   END;

     2119     2621    3               END;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:333  

   2621  3 000057   000062 710000 3                  TRA     s:2625

     2120     2622    2           ELSE
     2121     2623    2               SOCK$ERR = %E$NOTSOCK;

   2623  3 000060   000141 235007                    LDA     97,DL
         3 000061   400000 755100                    STA     0,,PR4

     2122     2624    2           END;

     2123     2625    1       ALTRETURN;

   2625  3 000062   000000 702200 xent               TSX2  ! X66_AALT

     2124     2626
     2125     2627    1   XSL$SOCKPTR: ENTRY( SOCK#, SOCK$) ALTRET;

   2627  3 000063   000000 700200 xent  XSL$SOCKPTR  TSX0  ! X66_AUTO_2
         3 000064   000026 000002                    ZERO    22,2

     2126     2628
     2127     2629            /* log caller's address */
     2128     2630    1       CALL XSL$EVLOG( 'GP', PINCRW(ADDR(BUF$),-5)->PLUGH.ADR);

   2630  3 000065   200023 452500                    STP2    @SOCKINIT+2,,AUTO
         3 000066   000000 236000 4                  LDQ     0
         3 000067   200022 756100                    STQ     @SOCKINIT+1,,AUTO
         3 000070   200022 630500                    EPPR0   @SOCKINIT+1,,AUTO
         3 000071   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000072   000000 701000 xent               TSX1    XSL$EVLOG
         3 000073   000000 011000                    NOP     0

     2129     2631    1       IF XSL_SOCK$$ = ADDR(NIL) OR SOCK# >= XSL$SOCKHD.MAXSOCK THEN

   2631  3 000074   000006 236000 2                  LDQ     XSL_SOCK$$
         3 000075   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:334  
         3 000076   000104 600000 3                  TZE     s:2632
         3 000077   200003 470500                    LDP0    @SOCK#,,AUTO
         3 000100   000006 471400 2                  LDP1    XSL_SOCK$$
         3 000101   000000 236100                    LDQ     0,,PR0
         3 000102   100002 116100                    CMPQ    2,,PR1
         3 000103   000110 602000 3                  TNC     s:2634

     2130     2632    1           SOCK$ERR = %E$BADF;

   2632  3 000104   000011 235007                    LDA     9,DL
         3 000105   200004 470500                    LDP0    @SOCK$,,AUTO
         3 000106   000000 755100                    STA     0,,PR0
         3 000107   000137 710000 3                  TRA     s:2646

     2131     2633    1       ELSE
     2132     2634    1           IF XSL$SOCKHD.SOCK$( SOCK#) -> SOCK.FLAGS.TERMINATED THEN

   2634  3 000110   000000 720100                    LXL0    0,,PR0
         3 000111   100004 473510                    LDP3    4,X0,PR1
         3 000112   300001 234100                    SZN     1,,PR3
         3 000113   000120 605000 3                  TPL     s:2637

     2133     2635    1               SOCK$ERR = %E$NOTSOCK;

   2635  3 000114   000141 235007                    LDA     97,DL
         3 000115   200004 474500                    LDP4    @SOCK$,,AUTO
         3 000116   400000 755100                    STA     0,,PR4
         3 000117   000137 710000 3                  TRA     s:2646

     2134     2636    2           ELSE DO;

     2135     2637    2               SOCK$ = XSL$SOCKHD.SOCK$( SOCK#);

   2637  3 000120   100004 236110                    LDQ     4,X0,PR1
         3 000121   200004 474500                    LDP4    @SOCK$,,AUTO
         3 000122   400000 756100                    STQ     0,,PR4

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:335  
     2136     2638    2               IF SOCK$->SOCK.FEPERROR = 0 THEN

   2638  3 000123   400000 471500                    LDP1    0,,PR4
         3 000124   100001 236100                    LDQ     1,,PR1
         3 000125   000777 316007                    CANQ    511,DL
         3 000126   000130 601000 3                  TNZ     s:2641

     2137     2639    2                   RETURN;

   2639  3 000127   000000 702200 xent               TSX2  ! X66_ARET

     2138     2640    3               ELSE DO;

     2139     2641    3                   I = SOCK$->SOCK.FEPERROR;

   2641  3 000130   100001 236100                    LDQ     1,,PR1
         3 000131   000777 376007                    ANQ     511,DL
         3 000132   200006 756100                    STQ     I,,AUTO

     2140     2642    3                   SOCK$->SOCK.FEPERROR = 0;

   2642  3 000133   000000 236003                    LDQ     0,DU
         3 000134   100001 552104                    STBQ    1,'04'O,PR1

     2141     2643    3                   SOCK$ERR = I;

   2643  3 000135   200006 235100                    LDA     I,,AUTO
         3 000136   400000 755100                    STA     0,,PR4

     2142     2644    3                   END;

     2143     2645    2               END;

     2144     2646    1       ALTRETURN;

   2646  3 000137   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:336  
     2145     2647
     2146     2648    1   XSL$GETSOCK: ENTRY( SOCK#, SOCK$) ALTRET;

   2648  3 000140   000000 700200 xent  XSL$GETSOCK  TSX0  ! X66_AUTO_2
         3 000141   000026 000002                    ZERO    22,2

     2147     2649
     2148     2650    1       IF XSL_SOCK$$ = ADDR( NIL) THEN CALL SOCKINIT( XSL_SOCKINIT);

   2650  3 000142   000006 236000 2                  LDQ     XSL_SOCK$$
         3 000143   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000144   000151 601000 3                  TNZ     s:2652

   2650  3 000145   000001 236000 4                  LDQ     1
         3 000146   200021 756100                    STQ     FPT@GDS+7,,AUTO
         3 000147   000356 701000 3                  TSX1    SOCKINIT
         3 000150   000000 011000                    NOP     0

     2149     2651
     2150     2652    2       DO I = 0 TO XSL$SOCKHD.MAXSOCK-1;

   2652  3 000151   200006 450100                    STZ     I,,AUTO
         3 000152   000230 710000 3                  TRA     s:2669+3

     2151     2653    2           P$ = XSL$SOCKHD.SOCK$( I);

   2653  3 000153   000006 470400 2                  LDP0    XSL_SOCK$$
         3 000154   200006 720100                    LXL0    I,,AUTO
         3 000155   000004 236110                    LDQ     4,X0,PR0
         3 000156   200010 756100                    STQ     P$,,AUTO

     2152     2654    3           IF SOCK.FLAGS.TERMINATED THEN DO;

   2654  3 000157   200010 471500                    LDP1    P$,,AUTO
         3 000160   100001 234100                    SZN     1,,PR1
         3 000161   000225 605000 3                  TPL     s:2669

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:337  
     2153     2655    3               SOCK$ = P$;

   2655  3 000162   200004 473500                    LDP3    @SOCK$,,AUTO
         3 000163   300000 756100                    STQ     0,,PR3

     2154     2656    3               SOCK = XSL_SOCKINFO;

   2656  3 000164   000100 100400                    MLR     fill='000'O
         3 000165   000012 000120 1                  ADSC9   XSL_SOCKINFO             cn=0,n=80
         3 000166   100000 000120                    ADSC9   0,,PR1                   cn=0,n=80

     2155     2657    3               SOCK.FLAGS = '0'B;

   2657  3 000167   177777 236007                    LDQ     65535,DL
         3 000170   100001 356100                    ANSQ    1,,PR1

     2156     2658    3               SOCK.SOCK# = I;

   2658  3 000171   200006 236100                    LDQ     I,,AUTO
         3 000172   100000 552104                    STBQ    0,'04'O,PR1

     2157     2659    4               CALL XSL$CL_GET( SOCK) WHENALTRETURN DO;

   2659  3 000173   200010 630500                    EPPR0   P$,,AUTO
         3 000174   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000175   000000 701000 xent               TSX1    XSL$CL_GET
         3 000176   000200 702000 3                  TSX2    s:2660
         3 000177   000204 710000 3                  TRA     s:2663

     2158     2660    4                   SOCK$ERR = %E$MFILE;

   2660  3 000200   000030 235007                    LDA     24,DL
         3 000201   200004 470500                    LDP0    @SOCK$,,AUTO
         3 000202   000000 755100                    STA     0,,PR0

     2159     2661    4                   ALTRETURN;

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:338  
   2661  3 000203   000000 702200 xent               TSX2  ! X66_AALT

     2160     2662    4                   END;
     2161     2663    3               SOCK# = I;

   2663  3 000204   200003 470500                    LDP0    @SOCK#,,AUTO
         3 000205   200006 235100                    LDA     I,,AUTO
         3 000206   000000 755100                    STA     0,,PR0

     2162     2664    3               DCBN2SOCK( SOCK.DCB#) = I;

   2664  3 000207   200010 471500                    LDP1    P$,,AUTO
         3 000210   100003 720100                    LXL0    3,,PR1
         3 000211   000000 473400 2                  LDP3    XSL_DCBN2SOCK$$
         3 000212   300000 755110                    STA     0,X0,PR3

     2163     2665    3               SOCK.MAXRDS = XSL$SOCKHD.MAXRDS;

   2665  3 000213   000006 473400 2                  LDP3    XSL_SOCK$$
         3 000214   300001 720100                    LXL0    1,,PR3
         3 000215   000777 360003                    ANX0    511,DU
         3 000216   100020 440100                    SXL0    16,,PR1

     2164     2666    3               SOCK.MAXBUF = XSL$SOCKHD.MAXBUF;

   2666  3 000217   300001 236100                    LDQ     1,,PR3
         3 000220   000011 772000                    QRL     9
         3 000221   000777 376007                    ANQ     511,DL
         3 000222   000000 621006                    EAX1    0,QL
         3 000223   100020 741100                    STX1    16,,PR1

     2165     2667    3               RETURN;

   2667  3 000224   000000 702200 xent               TSX2  ! X66_ARET

     2166     2668    3               END;
     2167     2669    2           END;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:339  

   2669  3 000225   200006 235100                    LDA     I,,AUTO
         3 000226   000001 035007                    ADLA    1,DL
         3 000227   200006 755100                    STA     I,,AUTO
         3 000230   000006 470400 2                  LDP0    XSL_SOCK$$
         3 000231   200006 236100                    LDQ     I,,AUTO
         3 000232   000002 116100                    CMPQ    2,,PR0
         3 000233   000153 602000 3                  TNC     s:2653

     2168     2670    1       SOCK$ERR = %E$MFILE;

   2670  3 000234   000030 235007                    LDA     24,DL
         3 000235   200004 471500                    LDP1    @SOCK$,,AUTO
         3 000236   100000 755100                    STA     0,,PR1

     2169     2671    1   BAILOUT:
     2170     2672    1       ALTRETURN;

   2672  3 000237   000000 702200 xent  BAILOUT      TSX2  ! X66_AALT

     2171     2673
     2172     2674    1   XSL$RELSOCK: ENTRY( SOCK#) ALTRET;

   2674  3 000240   000000 700200 xent  XSL$RELSOCK  TSX0  ! X66_AUTO_2
         3 000241   000026 000002                    ZERO    22,2

     2173     2675
     2174     2676    1       IF XSL_SOCK$$ = ADDR( NIL) OR SOCK# >= XSL$SOCKHD.MAXSOCK THEN

   2676  3 000242   000006 236000 2                  LDQ     XSL_SOCK$$
         3 000243   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000244   000237 600000 3                  TZE     BAILOUT
         3 000245   200003 470500                    LDP0    @SOCK#,,AUTO
         3 000246   000006 471400 2                  LDP1    XSL_SOCK$$
         3 000247   000000 236100                    LDQ     0,,PR0
         3 000250   100002 116100                    CMPQ    2,,PR1
         3 000251   000237 603000 3                  TRC     BAILOUT
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:340  

     2175     2677    1           GOTO BAILOUT;
     2176     2678    1       P$ = XSL$SOCKHD.SOCK$( SOCK#);

   2678  3 000252   000000 720100                    LXL0    0,,PR0
         3 000253   100004 236110                    LDQ     4,X0,PR1
         3 000254   200010 756100                    STQ     P$,,AUTO

     2177     2679    1       IF SOCK.FLAGS.TERMINATED THEN

   2679  3 000255   200010 473500                    LDP3    P$,,AUTO
         3 000256   300001 234100                    SZN     1,,PR3
         3 000257   000237 604000 3                  TMI     BAILOUT

     2178     2680    1           GOTO BAILOUT;
     2179     2681    2       IF SOCK.MAXRDS > 0 THEN DO INHIBIT;

   2681  3 000260   300020 721100                    LXL1    16,,PR3
         3 000261   000331 600000 3                  TZE     s:2699

     2180     2682    2           BUF$ = PINCRW( XSL_SOCK$$, SOCK.BUFHD);

   2682  3 000262   300016 222300                    LDX2  ! 14,,PR3
         3 000263   000000 636212                    EAQ   ! 0,X2
         3 000264   000006 036200 2                  ADLQ  ! XSL_SOCK$$
         3 000265   200005 756300                    STQ   ! BUF$,,AUTO

     2181     2683    3           DO WHILE( BUF$ ~= XSL_SOCK$$);

   2683  3 000266   000006 116200 2                  CMPQ  ! XSL_SOCK$$
         3 000267   000307 600200 3                  TZE   ! s:2689

     2182     2684    3               DATABUF.FLAGS.BUSY = '0'B;

   2684  3 000270   200005 470700                    LDP0  ! BUF$,,AUTO
         3 000271   000031 236200 xsym               LDQ   ! B_VECTNIL+25
         3 000272   000001 356300                    ANSQ  ! 1,,PR0
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:341  

     2183     2685    3               DATABUF.START = 0;

   2685  3 000273   000000 220203                    LDX0  ! 0,DU
         3 000274   200005 470700                    LDP0  ! BUF$,,AUTO
         3 000275   000000 740300                    STX0  ! 0,,PR0

     2184     2686    3               DATABUF.LEN = 0;

   2686  3 000276   200005 470700                    LDP0  ! BUF$,,AUTO
         3 000277   000000 440300                    SXL0  ! 0,,PR0

     2185     2687    3               BUF$ = PINCRW( XSL_SOCK$$, DATABUF.NXT);

   2687  3 000300   200005 470700                    LDP0  ! BUF$,,AUTO
         3 000301   000001 721300                    LXL1  ! 1,,PR0
         3 000302   000000 636211                    EAQ   ! 0,X1
         3 000303   000006 036200 2                  ADLQ  ! XSL_SOCK$$
         3 000304   200005 756300                    STQ   ! BUF$,,AUTO

     2186     2688    3               END;

   2688  3 000305   000006 116200 2                  CMPQ  ! XSL_SOCK$$
         3 000306   000270 601200 3                  TNZ   ! s:2684

     2187     2689    3           IF XSL$SOCKHD.BUFHD = 0 THEN DO;

   2689  3 000307   000006 470600 2                  LDP0  ! XSL_SOCK$$
         3 000310   000000 220300                    LDX0  ! 0,,PR0
         3 000311   000321 601200 3                  TNZ   ! s:2694

     2188     2690    3               XSL$SOCKHD.BUFHD = SOCK.BUFHD;

   2690  3 000312   200010 471700                    LDP1  ! P$,,AUTO
         3 000313   100016 221300                    LDX1  ! 14,,PR1
         3 000314   000000 741300                    STX1  ! 0,,PR0

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:342  
     2189     2691    3               XSL$SOCKHD.BUFTL = SOCK.BUFTL;

   2691  3 000315   100016 720300                    LXL0  ! 14,,PR1
         3 000316   000006 470600 2                  LDP0  ! XSL_SOCK$$
         3 000317   000000 440300                    SXL0  ! 0,,PR0

     2190     2692    3               END;

   2692  3 000320   000331 710200 3                  TRA   ! s:2699

     2191     2693    3           ELSE DO;

     2192     2694    3               PINCRW( XSL_SOCK$$, XSL$SOCKHD.BUFTL)->XSL$DATABUF.NXT = SOCK.BUFHD;

   2694  3 000321   000000 721300                    LXL1  ! 0,,PR0
         3 000322   200010 471700                    LDP1  ! P$,,AUTO
         3 000323   100016 222300                    LDX2  ! 14,,PR1
         3 000324   000001 442311                    SXL2  ! 1,X1,PR0

     2193     2695    3               IF SOCK.BUFTL ~= 0 THEN

   2695  3 000325   100016 720300                    LXL0  ! 14,,PR1
         3 000326   000331 600200 3                  TZE   ! s:2699

     2194     2696    3                   XSL$SOCKHD.BUFTL = SOCK.BUFTL;

   2696  3 000327   000006 470600 2                  LDP0  ! XSL_SOCK$$
         3 000330   000000 440300                    SXL0  ! 0,,PR0

     2195     2697    3               END;

     2196     2698    2           END;

     2197     2699    1       DCBN2SOCK( SOCK.DCB#) = -1;

   2699  3 000331   200010 470500                    LDP0    P$,,AUTO
         3 000332   000003 720100                    LXL0    3,,PR0
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:343  
         3 000333   000001 335007                    LCA     1,DL
         3 000334   000000 471400 2                  LDP1    XSL_DCBN2SOCK$$
         3 000335   100000 755110                    STA     0,X0,PR1

     2198     2700    1       CALL XSL$CL_REL( SOCK);

   2700  3 000336   200010 630500                    EPPR0   P$,,AUTO
         3 000337   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000340   000000 701000 xent               TSX1    XSL$CL_REL
         3 000341   000000 011000                    NOP     0

     2199     2701    1       SOCK = XSL_SOCKINFO;

   2701  3 000342   200010 470500                    LDP0    P$,,AUTO
         3 000343   000100 100400                    MLR     fill='000'O
         3 000344   000012 000120 1                  ADSC9   XSL_SOCKINFO             cn=0,n=80
         3 000345   000000 000120                    ADSC9   0,,PR0                   cn=0,n=80

     2200     2702    1       RETURN;

   2702  3 000346   000000 702200 xent               TSX2  ! X66_ARET

     2201     2703        %EJECT;
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:344  
     2202     2704        /*F* NAME: XSL$SOCKINIT -- Initialize Socket Library
     2203     2705        ..::IT "Purpose:"
     2204     2706        .INL +4
     2205     2707        Initializes the Socket Library using given parameters.
     2206     2708        ..::IT "C Usage:"
     2207     2709        .INL 4
     2208     2710        .FIF
     2209     2711        XSL$SOCKINIT( &parms );
     2210     2712        ..::IT "PL6 Usage:"
     2211     2713        .INL 4
     2212     2714        .FIF
     2213     2715        CALL XSL$SOCKINIT( parms );
     2214     2716        ..::IT "Parameter:"
     2215     2717        .INL 4
     2216     2718        .FIF
     2217     2719        parms       XSL_SOCKINIT parameter structure
     2218     2720        ..::IT "Description:"
     2219     2721        The XSL$SOCKINIT procedure initializes the Socket Library using the parameters
     2220     2722        passed in an XSL_SOCKINIT structure.  An application may wish to invoke
     2221     2723        XSL$SOCKINIT to specify the use or non-use of NoWait I/O, to reserve memory
     2222     2724        space for I/O buffers, or to set up a linkage to handle the arrival of
     2223     2725        application-specific events.
     2224     2726        .SPB
     2225     2727        The parms parameter contains information used in Socket Library initialization.
     2226     2728        In C source, it is an xsl_sockinit structure found in <xsl_socket.h>.  In PL6
     2227     2729        source, it is an XSL_SOCKINIT structure found in XSL_SOCKET_M.
     2228     2730        .SPB
     2229     2731        The default values for the use of XSL_SOCKINIT currently are MAXSOCK=2,
     2230     2732        NWSOCKS=-1, BUFSIZE=512, MEM=NIL, EVNT=NIL, MAXRDS=2, MAXBUF=0.
     2231     2733        .SPB
     2232     2734        The defaults provided by XSL_SOCKINIT are adequate for simple applications.
     2233     2735        For applications with special requirements, you will want to choose more
     2234     2736        appropriate values, such as larger BUFSIZE or MAXSOCK.
     2235     2737        */
     2236     2738    1   XSL$SOCKINIT: ENTRY( SOCK#) ALTRET;

   2738  3 000347   000000 700200 xent  XSL$SOCKINIT TSX0  ! X66_AUTO_2
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:345  
         3 000350   000026 000002                    ZERO    22,2

     2237     2739
     2238     2740    1       CALL SOCKINIT( SOCK#) ALTRET( BAILOUT);

   2740  3 000351   200003 236100                    LDQ     @SOCK#,,AUTO
         3 000352   200021 756100                    STQ     FPT@GDS+7,,AUTO
         3 000353   000356 701000 3                  TSX1    SOCKINIT
         3 000354   000237 702000 3                  TSX2    BAILOUT

     2239     2741    1       RETURN;

   2741  3 000355   000000 702200 xent               TSX2  ! X66_ARET

     2240     2742
     2241     2743    1   SOCKINIT: PROC( SOCKINIT) ALTRET;

   2743  3 000356   200020 741300       SOCKINIT     STX1  ! FPT@GDS+6,,AUTO

     2242     2744
     2243     2745        %XSL_SOCKINIT( FPTN=SOCKINIT, STCLASS=PARAM);
     2244     2868    2       DCL 1 VECT BASED DALIGNED, 2 * BIT(36), 2 BASE$ PTR;
     2245     2869
     2246     2870    2       TMP = SOCKINIT.NWSOCKS;

   2870  3 000357   200021 470500                    LDP0    @SOCKINIT,,AUTO
         3 000360   000001 235100                    LDA     1,,PR0
         3 000361   200007 755100                    STA     TMP,,AUTO

     2247     2871    2       IF TMP = -1 THEN

   2871  3 000362   000027 115000 xsym               CMPA    B_VECTNIL+23
         3 000363   000366 601000 3                  TNZ     s:2873

     2248     2872    2           TMP = SOCKINIT.MAXSOCK;

   2872  3 000364   000000 235100                    LDA     0,,PR0
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:346  
         3 000365   200007 755100                    STA     TMP,,AUTO

     2249     2873    2       I = SIZEW(XSL$SOCKHD)-1 + SOCKINIT.MAXSOCK*( SIZEW(SOCK) + 1) +

   2873  3 000366   000005 236100                    LDQ     5,,PR0
         3 000367   777777 376007                    ANQ     -1,DL
         3 000370   200022 756100                    STQ     @SOCKINIT+1,,AUTO
         3 000371   000005 236100                    LDQ     5,,PR0
         3 000372   000022 772000                    QRL     18
         3 000373   200022 036100                    ADLQ    @SOCKINIT+1,,AUTO
         3 000374   200007 402100                    MPY     TMP,,AUTO
         3 000375   200023 756100                    STQ     @SOCKINIT+2,,AUTO
         3 000376   000002 236100                    LDQ     2,,PR0
         3 000377   000003 036007                    ADLQ    3,DL
         3 000400   000002 772000                    QRL     2
         3 000401   000012 036007                    ADLQ    10,DL
         3 000402   200024 756100                    STQ     @SOCKINIT+3,,AUTO
         3 000403   200023 236100                    LDQ     @SOCKINIT+2,,AUTO
         3 000404   000001 036007                    ADLQ    1,DL
         3 000405   200024 402100                    MPY     @SOCKINIT+3,,AUTO
         3 000406   200025 756100                    STQ     @SOCKINIT+4,,AUTO
         3 000407   000000 236100                    LDQ     0,,PR0
         3 000410   000025 402007                    MPY     21,DL
         3 000411   200025 036100                    ADLQ    @SOCKINIT+4,,AUTO
         3 000412   000004 036007                    ADLQ    4,DL
         3 000413   200006 756100                    STQ     I,,AUTO

     2250     2874    2         ( 1 + TMP * ( SOCKINIT.MAXRDS + SOCKINIT.MAXBUF)) *
     2251     2875    2         ( SIZEW( XSL$DATABUF) + ( SOCKINIT.BUFSIZE + 3) / 4);
     2252     2876    2       MAXDCBN = 1 + B$ROSEG$->B$ROSEG.NUMDCBS;

   2876  3 000414   000044 471400 1                  LDP1    R
         3 000415   100002 236100                    LDQ     2,,PR1
         3 000416   000022 772000                    QRL     18
         3 000417   000001 036007                    ADLQ    1,DL
         3 000420   000001 756000 2                  STQ     MAXDCBN

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:347  
     2253     2877    2       I = I + MAXDCBN;  /* for DCBN2SOCK array */

   2877  3 000421   200006 036100                    ADLQ    I,,AUTO
         3 000422   200006 756100                    STQ     I,,AUTO

     2254     2878    2       I = I + 64;  /* for event log & debugging of buffer mgmt */

   2878  3 000423   000100 036007                    ADLQ    64,DL
         3 000424   200006 756100                    STQ     I,,AUTO

     2255     2879
     2256     2880    2       IF I > 262143   /* space needed exceeds 256K */

   2880  3 000425   000001 116003                    CMPQ    1,DU
         3 000426   000432 602000 3                  TNC     s:2886

     2257     2881    3       THEN DO;

     2258     2882    3           XSL_ERRNO = %E$INVAL;

   2882  3 000427   000026 235007                    LDA     22,DL
         3 000430   000000 755000 xsym               STA     XSL_ERRNO

     2259     2883    3           ALTRETURN;

   2883  3 000431   000000 702211                    TSX2  ! 0,X1

     2260     2884    3           END;
     2261     2885
     2262     2886    2       XSL_EVENTMAX = 63;

   2886  3 000432   000077 235007                    LDA     63,DL
         3 000433   000004 755000 2                  STA     XSL_EVENTMAX

     2263     2887    3       IF SOCKINIT.MEM$ = ADDR( NIL) THEN DO;

   2887  3 000434   000003 236100                    LDQ     3,,PR0
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:348  
         3 000435   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000436   000466 601000 3                  TNZ     s:2899

     2264     2888    3           FPT@GDS = FPT_GDS;

   2888  3 000437   000100 100400                    MLR     fill='000'O
         3 000440   000004 000030 1                  ADSC9   FPT_GDS                  cn=0,n=24
         3 000441   200012 000030                    ADSC9   FPT@GDS,,AUTO            cn=0,n=24

     2265     2889    3           ADDR( FPT@GDS.V_) -> VECT.BASE$ = ADDR( FPT@GDS.V);

   2889  3 000442   200016 633500                    EPPR3   FPT@GDS+4,,AUTO
         3 000443   200013 453500                    STP3    FPT@GDS+1,,AUTO

     2266     2890    3           ADDR( FPT@GDS.V) -> VECT.BASE$ = ADDR( NIL);

   2890  3 000444   000001 236000 xsym               LDQ     B_VECTNIL+1
         3 000445   200017 756100                    STQ     FPT@GDS+5,,AUTO

     2267     2891    3           FPT@GDS.RESULTS_ = FPT@GDS.V_;

   2891  3 000446   200012 237100                    LDAQ    FPT@GDS,,AUTO
         3 000447   200014 757100                    STAQ    FPT@GDS+2,,AUTO

     2268     2892    3           FPT@GDS.V.SEGSIZE# = I;

   2892  3 000450   200006 720100                    LXL0    I,,AUTO
         3 000451   200016 440100                    SXL0    FPT@GDS+4,,AUTO

     2269     2893    4           CALL M$GDS (FPT@GDS) WHENALTRETURN DO;

   2893  3 000452   200012 630500                    EPPR0   FPT@GDS,,AUTO
         3 000453   430001 713400                    CLIMB   alt,gds
         3 000454   400400 401760                    pmme    nvectors=2
         3 000455   000457 702000 3                  TSX2    s:2894
         3 000456   000463 710000 3                  TRA     s:2897

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:349  
     2270     2894    4               XSL_ERRNO = %E$FAILURE;

   2894  3 000457   000001 335007                    LCA     1,DL
         3 000460   000000 755000 xsym               STA     XSL_ERRNO

     2271     2895    4               ALTRETURN;

   2895  3 000461   200020 221300                    LDX1  ! FPT@GDS+6,,AUTO
         3 000462   000000 702211                    TSX2  ! 0,X1

     2272     2896    4               END;
     2273     2897    3           XSL_SOCK$$ = ADDR(FPT@GDS.V) -> VECT.BASE$;

   2897  3 000463   200017 236100                    LDQ     FPT@GDS+5,,AUTO
         3 000464   000006 756000 2                  STQ     XSL_SOCK$$

     2274     2898    3           END;

   2898  3 000465   000467 710000 3                  TRA     s:2901

     2275     2899    2       ELSE XSL_SOCK$$ = SOCKINIT.MEM$;

   2899  3 000466   000006 756000 2                  STQ     XSL_SOCK$$

     2276     2900
     2277     2901    2       XSL_DCBN2SOCK$$ = PINCRW( XSL_SOCK$$, I - MAXDCBN);

   2901  3 000467   200006 236100                    LDQ     I,,AUTO
         3 000470   000001 136000 2                  SBLQ    MAXDCBN
         3 000471   000022 736000                    QLS     18
         3 000472   000006 036000 2                  ADLQ    XSL_SOCK$$
         3 000473   000000 756000 2                  STQ     XSL_DCBN2SOCK$$

     2278     2902
     2279     2903    2       XSL$SOCKHD.MAXSOCK = SOCKINIT.MAXSOCK;

   2903  3 000474   200021 470500                    LDP0    @SOCKINIT,,AUTO
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:350  
         3 000475   000006 471400 2                  LDP1    XSL_SOCK$$
         3 000476   000000 235100                    LDA     0,,PR0
         3 000477   100002 755100                    STA     2,,PR1

     2280     2904    2       XSL$SOCKHD.SEGSIZE = I;

   2904  3 000500   200006 720100                    LXL0    I,,AUTO
         3 000501   000006 471400 2                  LDP1    XSL_SOCK$$
         3 000502   100001 740100                    STX0    1,,PR1

     2281     2905
     2282     2906    2       P$ = ADDR( XSL$SOCKHD.SOCK$( XSL$SOCKHD.MAXSOCK));

   2906  3 000503   000006 471400 2                  LDP1    XSL_SOCK$$
         3 000504   100002 721100                    LXL1    2,,PR1
         3 000505   000004 636011                    EAQ     4,X1
         3 000506   000006 036000 2                  ADLQ    XSL_SOCK$$
         3 000507   200010 756100                    STQ     P$,,AUTO

     2283     2907    3       DO I = 0 TO XSL$SOCKHD.MAXSOCK-1;

   2907  3 000510   200006 450100                    STZ     I,,AUTO
         3 000511   000527 710000 3                  TRA     s:2911+3

     2284     2908    3           XSL$SOCKHD.SOCK$( I) = P$;

   2908  3 000512   200010 236100                    LDQ     P$,,AUTO
         3 000513   000006 470400 2                  LDP0    XSL_SOCK$$
         3 000514   200006 720100                    LXL0    I,,AUTO
         3 000515   000004 756110                    STQ     4,X0,PR0

     2285     2909    3           SOCK = XSL_SOCKINFO;

   2909  3 000516   200010 470500                    LDP0    P$,,AUTO
         3 000517   000100 100400                    MLR     fill='000'O
         3 000520   000012 000120 1                  ADSC9   XSL_SOCKINFO             cn=0,n=80
         3 000521   000000 000120                    ADSC9   0,,PR0                   cn=0,n=80
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:351  

     2286     2910    3           P$ = PINCRW( P$, SIZEW( SOCK));

   2910  3 000522   000024 036003                    ADLQ    20,DU
         3 000523   200010 756100                    STQ     P$,,AUTO

     2287     2911    3           END;

   2911  3 000524   200006 235100                    LDA     I,,AUTO
         3 000525   000001 035007                    ADLA    1,DL
         3 000526   200006 755100                    STA     I,,AUTO
         3 000527   000006 470400 2                  LDP0    XSL_SOCK$$
         3 000530   200006 236100                    LDQ     I,,AUTO
         3 000531   000002 116100                    CMPQ    2,,PR0
         3 000532   000512 602000 3                  TNC     s:2908

     2288     2912
     2289     2913    2       I = 1 + TMP * ( SOCKINIT.MAXRDS + SOCKINIT.MAXBUF);

   2913  3 000533   200021 471500                    LDP1    @SOCKINIT,,AUTO
         3 000534   100005 236100                    LDQ     5,,PR1
         3 000535   777777 376007                    ANQ     -1,DL
         3 000536   200022 756100                    STQ     @SOCKINIT+1,,AUTO
         3 000537   100005 236100                    LDQ     5,,PR1
         3 000540   000022 772000                    QRL     18
         3 000541   200022 036100                    ADLQ    @SOCKINIT+1,,AUTO
         3 000542   200007 402100                    MPY     TMP,,AUTO
         3 000543   000001 036007                    ADLQ    1,DL
         3 000544   200006 756100                    STQ     I,,AUTO

     2290     2914    3       IF I > 0 THEN DO;

   2914  3 000545   000631 600000 3                  TZE     s:2926

     2291     2915    3           TMP = SIZEW( XSL$DATABUF) + ( SOCKINIT.BUFSIZE + 3) / 4;

   2915  3 000546   100002 236100                    LDQ     2,,PR1
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:352  
         3 000547   000003 036007                    ADLQ    3,DL
         3 000550   000002 772000                    QRL     2
         3 000551   000012 036007                    ADLQ    10,DL
         3 000552   200007 756100                    STQ     TMP,,AUTO

     2292     2916    3           XSL$SOCKHD.BUFHD = POFFW( P$, XSL_SOCK$$);

   2916  3 000553   000006 235000 2                  LDA     XSL_SOCK$$
         3 000554   000022 771000                    ARL     18
         3 000555   200022 755100                    STA     @SOCKINIT+1,,AUTO
         3 000556   200010 236100                    LDQ     P$,,AUTO
         3 000557   000022 772000                    QRL     18
         3 000560   200022 136100                    SBLQ    @SOCKINIT+1,,AUTO
         3 000561   000000 620006                    EAX0    0,QL
         3 000562   000000 740100                    STX0    0,,PR0

     2293     2917    4           DO WHILE( I > 1);

   2917  3 000563   200006 235100                    LDA     I,,AUTO
         3 000564   000002 115007                    CMPA    2,DL
         3 000565   000611 602000 3                  TNC     s:2922

     2294     2918    4               P$->XSL$DATABUF.NXT = POFFW( P$, XSL_SOCK$$) + TMP;

   2918  3 000566   000006 235000 2                  LDA     XSL_SOCK$$
         3 000567   000022 771000                    ARL     18
         3 000570   200022 755100                    STA     @SOCKINIT+1,,AUTO
         3 000571   200010 236100                    LDQ     P$,,AUTO
         3 000572   000022 772000                    QRL     18
         3 000573   200022 136100                    SBLQ    @SOCKINIT+1,,AUTO
         3 000574   200007 036100                    ADLQ    TMP,,AUTO
         3 000575   000000 620006                    EAX0    0,QL
         3 000576   200010 470500                    LDP0    P$,,AUTO
         3 000577   000001 440100                    SXL0    1,,PR0

     2295     2919    4               P$ = PINCRW( P$, TMP);

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:353  
   2919  3 000600   200007 236100                    LDQ     TMP,,AUTO
         3 000601   000022 736000                    QLS     18
         3 000602   200010 036100                    ADLQ    P$,,AUTO
         3 000603   200010 756100                    STQ     P$,,AUTO

     2296     2920    4               I = I - 1;

   2920  3 000604   200006 235100                    LDA     I,,AUTO
         3 000605   000001 135007                    SBLA    1,DL
         3 000606   200006 755100                    STA     I,,AUTO

     2297     2921    4               END;

   2921  3 000607   000002 115007                    CMPA    2,DL
         3 000610   000566 603000 3                  TRC     s:2918

     2298     2922    3           P$->XSL$DATABUF.NXT = 0;

   2922  3 000611   000000 220003                    LDX0    0,DU
         3 000612   200010 470500                    LDP0    P$,,AUTO
         3 000613   000001 440100                    SXL0    1,,PR0

     2299     2923    3           XSL$SOCKHD.BUFTL = POFFW( P$, XSL_SOCK$$);

   2923  3 000614   000006 236000 2                  LDQ     XSL_SOCK$$
         3 000615   000022 772000                    QRL     18
         3 000616   200022 756100                    STQ     @SOCKINIT+1,,AUTO
         3 000617   200010 236100                    LDQ     P$,,AUTO
         3 000620   000022 772000                    QRL     18
         3 000621   200022 136100                    SBLQ    @SOCKINIT+1,,AUTO
         3 000622   000000 621006                    EAX1    0,QL
         3 000623   000006 471400 2                  LDP1    XSL_SOCK$$
         3 000624   100000 441100                    SXL1    0,,PR1

     2300     2924    3           P$ = PINCRW( P$, TMP);  /* for subsequent usage of P$ */

   2924  3 000625   200007 236100                    LDQ     TMP,,AUTO
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:354  
         3 000626   000022 736000                    QLS     18
         3 000627   200010 036100                    ADLQ    P$,,AUTO
         3 000630   200010 756100                    STQ     P$,,AUTO

     2301     2925    3           END;

     2302     2926    2       XSL_EVENTLOG$ = P$;

   2926  3 000631   200010 236100                    LDQ     P$,,AUTO
         3 000632   000005 756000 2                  STQ     XSL_EVENTLOG$

     2303     2927    2       XSL_BUFSIZE = SOCKINIT.BUFSIZE;

   2927  3 000633   200021 470500                    LDP0    @SOCKINIT,,AUTO
         3 000634   000002 235100                    LDA     2,,PR0
         3 000635   000002 755000 2                  STA     XSL_BUFSIZE

     2304     2928    2       XSL$SOCKHD.EVNT$ = SOCKINIT.EVNT$;

   2928  3 000636   000004 236100                    LDQ     4,,PR0
         3 000637   000006 471400 2                  LDP1    XSL_SOCK$$
         3 000640   100003 756100                    STQ     3,,PR1

     2305     2929    3       IF SOCKINIT.NWSOCKS ~= 0 THEN DO;

   2929  3 000641   000001 235100                    LDA     1,,PR0
         3 000642   000660 600000 3                  TZE     s:2936

     2306     2930        /*N*    SOCKINIT.EVNT$ = ENTADDR( XSL$ASYNC);   NEED THIS? */
     2307     2931    3           CALL M$EVENT( FPT_EVENT);

   2931  3 000643   000000 630400 1                  EPPR0   FPT_EVENT
         3 000644   010001 713400                    CLIMB   4097
         3 000645   400000 401760                    pmme    nvectors=1

     2308     2932    3           XSL$SOCKHD.MAXRDS = SOCKINIT.MAXRDS;

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:355  
   2932  3 000646   000006 470400 2                  LDP0    XSL_SOCK$$
         3 000647   200021 471500                    LDP1    @SOCKINIT,,AUTO
         3 000650   100005 236100                    LDQ     5,,PR1
         3 000651   000022 772000                    QRL     18
         3 000652   000001 552104                    STBQ    1,'04'O,PR0

     2309     2933    3           XSL$SOCKHD.MAXBUF = SOCKINIT.MAXBUF;

   2933  3 000653   000006 470400 2                  LDP0    XSL_SOCK$$
         3 000654   100005 236100                    LDQ     5,,PR1
         3 000655   000011 736000                    QLS     9
         3 000656   000001 552110                    STBQ    1,'10'O,PR0

     2310     2934    3           END;

   2934  3 000657   000665 710000 3                  TRA     s:2940

     2311     2935    3       ELSE DO;

     2312     2936    3           XSL$SOCKHD.MAXRDS = 0;

   2936  3 000660   000006 471400 2                  LDP1    XSL_SOCK$$
         3 000661   000000 236003                    LDQ     0,DU
         3 000662   100001 552104                    STBQ    1,'04'O,PR1

     2313     2937    3           XSL$SOCKHD.MAXBUF = 0;

   2937  3 000663   000006 471400 2                  LDP1    XSL_SOCK$$
         3 000664   100001 552110                    STBQ    1,'10'O,PR1

     2314     2938    3           END;

     2315     2939
     2316     2940    3       DO I = 0 TO MAXDCBN - 1;

   2940  3 000665   200006 450100                    STZ     I,,AUTO
         3 000666   000676 710000 3                  TRA     s:2942+3
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:356  

     2317     2941    3           DCBN2SOCK( I) = -1;

   2941  3 000667   000001 335007                    LCA     1,DL
         3 000670   000000 470400 2                  LDP0    XSL_DCBN2SOCK$$
         3 000671   200006 720100                    LXL0    I,,AUTO
         3 000672   000000 755110                    STA     0,X0,PR0

     2318     2942    3           END;

   2942  3 000673   200006 236100                    LDQ     I,,AUTO
         3 000674   000001 036007                    ADLQ    1,DL
         3 000675   200006 756100                    STQ     I,,AUTO
         3 000676   200006 236100                    LDQ     I,,AUTO
         3 000677   000702 604000 3                  TMI     s:2944
         3 000700   000001 116000 2                  CMPQ    MAXDCBN
         3 000701   000667 604000 3                  TMI     s:2941

     2319     2943
     2320     2944    2       CALL XSL$ROUTES( 0);

   2944  3 000702   000002 630400 4                  EPPR0   2
         3 000703   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000704   000000 701000 xent               TSX1    XSL$ROUTES
         3 000705   000000 011000                    NOP     0

     2321     2945
     2322     2946    2       RETURN;

   2946  3 000706   200020 221300                    LDX1  ! FPT@GDS+6,,AUTO
         3 000707   000001 702211                    TSX2  ! 1,X1

FPT_EVENT
 Sect OctLoc
   1     000   000001 777640   000002 006000   000000 000000   000000 000000    ................

FPT_GDS
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:357  
 Sect OctLoc
   1     004   000001 777640   000010 006000   000000 177640   000000 006014    ................
   1     010   000600 000000   ****** ******                                    ........

XSL_SOCKINFO
 Sect OctLoc
   1     012   000000 000000   400000 00*000   040040 040040   040040 000000    ........      ..
   1     016   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     032*  000000 000000   000000 000000   000000 006014   000000 000000    ................

XSL_SOCKINIT
 Sect OctLoc
   1     036   000000 000002   777777 777777   000000 001000   000000 006014    ................
   1     042   000000 000000   000002 000000                                    ........

R
 Sect OctLoc
   1     044   000000 006003                                                    ....

(unnamed)
 Sect OctLoc
   1     045   107120 040040                                                    GP

XSL_DCBN2SOCK$$
 Sect OctLoc
   2     000   000000 006014                                                    ....

MAXDCBN
 Sect OctLoc
   2     001   000000 000000                                                    ....

XSL_BUFSIZE
 Sect OctLoc
   2     002   000000 000000                                                    ....

(unnamed)
 Sect OctLoc
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:358  
   2     003   000000 000000                                                    ....

XSL_EVENTMAX
 Sect OctLoc
   2     004   000000 000000                                                    ....

XSL_EVENTLOG$
 Sect OctLoc
   2     005   000000 006014                                                    ....

XSL_SOCK$$
 Sect OctLoc
   2     006   000000 006014                                                    ....

(unnamed)
 Sect OctLoc
   4     000   000045 006000   000036 006000   000002 006000                    .%..........
     2323     2947    2   END SOCKINIT;
     2324     2948
     2325     2949    1   END XSL$SOCKMGMT;
     2326     2950        %EOD;

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:359  
--  Include file information  --

   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   XSL_PERR_C.:TCA2TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:E05TOU  is referenced.
   B$ROSEG.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$SOCKMGMT.
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:360  

 **** Variables and constants ****

  ****  Section 001 RoData XSL$SOCKMGMT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    44-0-0/w PTR         r     1 B$ROSEG$                   0-0-0/d STRC(144)   r     1 FPT_EVENT
     4-0-0/d STRC(216)   r     1 FPT_GDS                   44-0-0/b STRC        r     1 R
    12-0-0/w STRC(720)   r     1 XSL_SOCKINFO              36-0-0/w STRC(216)   r     1 XSL_SOCKINIT

  ****  Section 002  Data  XSL$SOCKMGMT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w SBIN        r     1 MAXDCBN                    2-0-0/w SBIN        r     1 XSL_BUFSIZE
     0-0-0/w PTR         r     1 XSL_DCBN2SOCK$$            5-0-0/w PTR         r     1 XSL_EVENTLOG$
     4-0-0/w SBIN        r     1 XSL_EVENTMAX               6-0-0/w PTR         r     1 XSL_SOCK$$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @SOCK#                     4-0-0/w PTR         r     1 @SOCK$
    21-0-0/w PTR         r     1 @SOCKINIT                  5-0-0/w PTR         r     1 BUF$
    12-0-0/d STRC(216)   r     1 FPT@GDS                    6-0-0/w UBIN        r     1 I
    10-0-0/w PTR         r     1 P$                        *0-0-0/w UBIN        r     1 SOCK#
    *0-0-0/w PTR         r     1 SOCK$                     *0-0-0/w SBIN        r     1 SOCK$ERR
    *0-0-0/w STRC(216)   r     1 SOCKINIT                   7-0-0/w SBIN        r     1 TMP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:361  
     0-0-0/w SBIN        r     1 XSL_ERRNO

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(3024)  r     1 B$ROSEG                    0-0-0/w STRC(360)   r     1 DATABUF
     0-0-0/w SBIN        r     1 DCBN2SOCK(0:0)
     0-0-0/w STRC(54)    r     1 PLUGH                      0-0-0/w STRC(720)   r     1 SOCK
     0-0-0/d STRC(72)    r     1 VECT                       0-0-0/w STRC(360)   r     1 XSL$DATABUF
     0-0-0/w STRC(180)   r     1 XSL$SOCKHD


   Procedure XSL$SOCKMGMT requires 456 words for executable code.
   Procedure XSL$SOCKMGMT requires 22 words of local(AUTO) storage.
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:362  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:363  
          MINI XREF LISTING

B$ROSEG.NUMDCBS
        20**DCL      2876>>ASSIGN
B$ROSEG$
      2574**DCL      2876>>ASSIGN
BAILOUT
      2672**LABEL    2677--GOTO     2680--GOTO     2740--CALLALT
BUF$
      2564**DCL      2062--IMP-PTR  2607--CALL     2630--CALL     2682<<ASSIGN   2683>>DOWHILE  2684>>ASSIGN
      2685>>ASSIGN   2686>>ASSIGN   2687<<ASSIGN   2687>>ASSIGN
DATABUF.FLAGS.BUSY
      2072**DCL      2684<<ASSIGN
DATABUF.LEN
      2070**DCL      2686<<ASSIGN
DATABUF.NXT
      2075**DCL      2687>>ASSIGN
DATABUF.START
      2069**DCL      2685<<ASSIGN
DCBN2SOCK
      2595**DCL      2608>>IF       2612>>ASSIGN   2664<<ASSIGN   2699<<ASSIGN   2941<<ASSIGN
FPT@GDS
      2589**DCL      2888<<ASSIGN   2893<>CALL
FPT@GDS.RESULTS_
      2589**DCL      2891<<ASSIGN
FPT@GDS.V
      2589**DCL      2889--ASSIGN   2890--ASSIGN   2897--ASSIGN
FPT@GDS.V.SEGSIZE#
      2592**DCL      2892<<ASSIGN
FPT@GDS.V_
      2589**DCL      2889--ASSIGN   2891>>ASSIGN
FPT_EVENT
       701**DCL      2931<>CALL
FPT_EVENT.V
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:364  
       701**DCL       701--DCLINIT
FPT_GDS
       715**DCL      2888>>ASSIGN
FPT_GDS.V
       715**DCL       715--DCLINIT
I
      2568**DCL      2617<<ASSIGN   2619>>ASSIGN   2641<<ASSIGN   2643>>ASSIGN   2652<<DOINDEX  2653>>ASSIGN
      2658>>ASSIGN   2663>>ASSIGN   2664>>ASSIGN   2873<<ASSIGN   2877<<ASSIGN   2877>>ASSIGN   2878<<ASSIGN
      2878>>ASSIGN   2880>>IF       2892>>ASSIGN   2901>>ASSIGN   2904>>ASSIGN   2907<<DOINDEX  2908>>ASSIGN
      2913<<ASSIGN   2914>>IF       2917>>DOWHILE  2920<<ASSIGN   2920>>ASSIGN   2940<<DOINDEX  2941>>ASSIGN
M$EVENT
       673**DCL-ENT  2931--CALL
M$GDS
       653**DCL-ENT  2893--CALL
MAXDCBN
      2596**DCL      2608>>IF       2876<<ASSIGN   2877>>ASSIGN   2901>>ASSIGN   2940>>DOINDEX
P$
      2570**DCL      2129--IMP-PTR  2653<<ASSIGN   2654>>IF       2655>>ASSIGN   2656>>ASSIGN   2657>>ASSIGN
      2658>>ASSIGN   2659>>CALL     2664>>ASSIGN   2665>>ASSIGN   2666>>ASSIGN   2678<<ASSIGN   2679>>IF
      2681>>IF       2682>>ASSIGN   2690>>ASSIGN   2691>>ASSIGN   2694>>ASSIGN   2695>>IF       2696>>ASSIGN
      2699>>ASSIGN   2700>>CALL     2701>>ASSIGN   2906<<ASSIGN   2908>>ASSIGN   2909>>ASSIGN   2910<<ASSIGN
      2910>>ASSIGN   2916>>ASSIGN   2918>>ASSIGN   2918>>ASSIGN   2919<<ASSIGN   2919>>ASSIGN   2922>>ASSIGN
      2923>>ASSIGN   2924<<ASSIGN   2924>>ASSIGN   2926>>ASSIGN
PLUGH.ADR
      2566**DCL      2607<>CALL     2630<>CALL
R
      2571**DCL      2574--REDEF
SOCK
      2129**DCL      2656<<ASSIGN   2659<>CALL     2700<>CALL     2701<<ASSIGN   2873--ASSIGN   2909<<ASSIGN
      2910--ASSIGN
SOCK.BUFHD
      2243**DCL      2682>>ASSIGN   2690>>ASSIGN   2694>>ASSIGN
SOCK.BUFTL
      2244**DCL      2691>>ASSIGN   2695>>IF       2696>>ASSIGN
SOCK.DCB#
      2162**DCL      2664>>ASSIGN   2699>>ASSIGN
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:365  
SOCK.FEPERROR
      2160**DCL      2614>>IF       2617>>ASSIGN   2618<<ASSIGN   2638>>IF       2641>>ASSIGN   2642<<ASSIGN
SOCK.FLAGS
      2139**DCL      2657<<ASSIGN
SOCK.FLAGS.TERMINATED
      2140**DCL      2613>>IF       2634>>IF       2654>>IF       2679>>IF
SOCK.MAXBUF
      2247**DCL      2666<<ASSIGN
SOCK.MAXRDS
      2248**DCL      2665<<ASSIGN   2681>>IF
SOCK.NBACCEPT_SOCK$
      2251**DCL      2252--REDEF
SOCK.SOCK#
      2138**DCL      2658<<ASSIGN
SOCK#
      2575**DCL         6--PROC     2604--ENTRY    2608>>IF       2608>>IF       2612>>ASSIGN   2627--ENTRY
      2631>>IF       2634>>IF       2637>>ASSIGN   2648--ENTRY    2663<<ASSIGN   2674--ENTRY    2676>>IF
      2678>>ASSIGN   2738--ENTRY    2740<>CALL
SOCK$
      2576**DCL         6--PROC     2577--REDEF    2604--ENTRY    2612<<ASSIGN   2613>>IF       2614>>IF
      2617>>ASSIGN   2618>>ASSIGN   2627--ENTRY    2637<<ASSIGN   2638>>IF       2641>>ASSIGN   2642>>ASSIGN
      2648--ENTRY    2655<<ASSIGN
SOCK$ERR
      2577**DCL      2610<<ASSIGN   2619<<ASSIGN   2623<<ASSIGN   2632<<ASSIGN   2635<<ASSIGN   2643<<ASSIGN
      2660<<ASSIGN   2670<<ASSIGN
SOCKINIT
      2743**PROC     2650--CALL     2740--CALL
SOCKINIT IN PROCEDURE SOCKINIT
      2762**DCL      2743--PROC
SOCKINIT.BUFSIZE IN PROCEDURE SOCKINIT
      2797**DCL      2873>>ASSIGN   2915>>ASSIGN   2927>>ASSIGN
SOCKINIT.EVNT$ IN PROCEDURE SOCKINIT
      2828**DCL      2928>>ASSIGN
SOCKINIT.MAXBUF IN PROCEDURE SOCKINIT
      2866**DCL      2873>>ASSIGN   2913>>ASSIGN   2933>>ASSIGN
SOCKINIT.MAXRDS IN PROCEDURE SOCKINIT
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:366  
      2849**DCL      2873>>ASSIGN   2913>>ASSIGN   2932>>ASSIGN
SOCKINIT.MAXSOCK IN PROCEDURE SOCKINIT
      2775**DCL      2872>>ASSIGN   2873>>ASSIGN   2903>>ASSIGN
SOCKINIT.MEM$ IN PROCEDURE SOCKINIT
      2820**DCL      2887>>IF       2899>>ASSIGN
SOCKINIT.NWSOCKS IN PROCEDURE SOCKINIT
      2786**DCL      2870>>ASSIGN   2929>>IF
TMP
      2569**DCL      2870<<ASSIGN   2871>>IF       2872<<ASSIGN   2873>>ASSIGN   2913>>ASSIGN   2915<<ASSIGN
      2918>>ASSIGN   2919>>ASSIGN   2924>>ASSIGN
VECT.BASE$ IN PROCEDURE SOCKINIT
      2868**DCL      2889<<ASSIGN   2890<<ASSIGN   2897>>ASSIGN
XSL$ASYNC
      2556**DCL-ENT   701--DCLINIT
XSL$CL_GET
      2557**DCL-ENT  2659--CALL
XSL$CL_REL
      2558**DCL-ENT  2700--CALL
XSL$DATABUF
      2095**DCL      2873--ASSIGN   2915--ASSIGN
XSL$DATABUF.NXT
      2108**DCL      2694<<ASSIGN   2918<<ASSIGN   2922<<ASSIGN
XSL$EVLOG
      2560**DCL-ENT  2607--CALL     2630--CALL
XSL$ROUTES
      2559**DCL-ENT  2944--CALL
XSL$SOCKHD
      2539**DCL      2873--ASSIGN
XSL$SOCKHD.BUFHD
      2546**DCL      2689>>IF       2690<<ASSIGN   2916<<ASSIGN
XSL$SOCKHD.BUFTL
      2547**DCL      2691<<ASSIGN   2694>>ASSIGN   2696<<ASSIGN   2923<<ASSIGN
XSL$SOCKHD.EVNT$
      2552**DCL      2928<<ASSIGN
XSL$SOCKHD.MAXBUF
      2549**DCL      2666>>ASSIGN   2933<<ASSIGN   2937<<ASSIGN
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:367  
XSL$SOCKHD.MAXRDS
      2550**DCL      2665>>ASSIGN   2932<<ASSIGN   2936<<ASSIGN
XSL$SOCKHD.MAXSOCK
      2551**DCL      2631>>IF       2652>>DOINDEX  2676>>IF       2903<<ASSIGN   2906>>ASSIGN   2907>>DOINDEX
XSL$SOCKHD.SEGSIZE
      2548**DCL      2904<<ASSIGN
XSL$SOCKHD.SOCK$
      2553**DCL      2612>>ASSIGN   2634>>IF       2637>>ASSIGN   2653>>ASSIGN   2678>>ASSIGN   2906--ASSIGN
      2908<<ASSIGN
XSL_BUFSIZE
      2597**DCL      2927<<ASSIGN
XSL_DCBN2SOCK$$
      2594**DCL      2595--IMP-PTR  2608>>IF       2612>>ASSIGN   2664>>ASSIGN   2699>>ASSIGN   2901<<ASSIGN
      2941>>ASSIGN
XSL_ERRNO
      2602**DCL      2882<<ASSIGN   2894<<ASSIGN
XSL_EVENTLOG$
      2600**DCL      2926<<ASSIGN
XSL_EVENTMAX
      2599**DCL      2886<<ASSIGN
XSL_SOCK$$
      2601**DCL      2539--IMP-PTR  2608>>IF       2612>>ASSIGN   2631>>IF       2631>>IF       2634>>IF
      2637>>ASSIGN   2650>>IF       2652>>DOINDEX  2653>>ASSIGN   2665>>ASSIGN   2666>>ASSIGN   2676>>IF
      2676>>IF       2678>>ASSIGN   2682>>ASSIGN   2683>>DOWHILE  2687>>ASSIGN   2689>>IF       2690>>ASSIGN
      2691>>ASSIGN   2694>>ASSIGN   2694>>ASSIGN   2696>>ASSIGN   2897<<ASSIGN   2899<<ASSIGN   2901>>ASSIGN
      2903>>ASSIGN   2904>>ASSIGN   2906>>ASSIGN   2906>>ASSIGN   2907>>DOINDEX  2908>>ASSIGN   2916>>ASSIGN
      2916>>ASSIGN   2918>>ASSIGN   2923>>ASSIGN   2923>>ASSIGN   2928>>ASSIGN   2932>>ASSIGN   2933>>ASSIGN
      2936>>ASSIGN   2937>>ASSIGN
XSL_SOCKINFO
      2273**DCL      2656>>ASSIGN   2701>>ASSIGN   2909>>ASSIGN
XSL_SOCKINFO.NBACCEPT_SOCK$
      2395**DCL      2396--REDEF
XSL_SOCKINIT
      2416**DCL      2650<>CALL
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:368  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:369  
              MINI UREF LISTING

B$ROAVAIL      57**DCL
B$RODCB$      54**DCL
M$ACCT     635**DCL-ENT
M$ACTIVATE     638**DCL-ENT
M$ALIB     631**DCL-ENT
M$ASUSER     633**DCL-ENT
M$ATTACH     640**DCL-ENT
M$BADPP     658**DCL-ENT
M$CGCTL     639**DCL-ENT
M$CGINFO     639**DCL-ENT
M$CHECK     620**DCL-ENT
M$CHGUNIT     678**DCL-ENT
M$CLOSE     618**DCL-ENT
M$CLRSTK     676**DCL-ENT
M$CMDVAR     687**DCL-ENT
M$CONFIG     648**DCL-ENT
M$CORRES     623**DCL-ENT
M$CPEXIT     632**DCL-ENT
M$CVM     656**DCL-ENT
M$CVOL     621**DCL-ENT
M$DCLFLD     648**DCL-ENT
M$DEACTIVATE     638**DCL-ENT
M$DELREC     620**DCL-ENT
M$DEQ     685**DCL-ENT
M$DETACH     640**DCL-ENT
M$DEVICE     622**DCL-ENT
M$DISPLAY     685**DCL-ENT
M$DISPRES     625**DCL-ENT
M$DLIB     631**DCL-ENT
M$DRIBBLE     648**DCL-ENT
M$DRTN     676**DCL-ENT
M$DSUSER     633**DCL-ENT
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:370  
M$ENQ     684**DCL-ENT
M$EOM     643**DCL-ENT
M$ERASE     649**DCL-ENT
M$ERR     630**DCL-ENT
M$ERRMSG     681**DCL-ENT
M$EXHUME     682**DCL-ENT
M$EXIT     630**DCL-ENT
M$EXTEND     622**DCL-ENT
M$FDP     654**DCL-ENT
M$FDS     653**DCL-ENT
M$FEBOOT     646**DCL-ENT
M$FECTL     647**DCL-ENT
M$FEDUMP     646**DCL-ENT
M$FID     681**DCL-ENT
M$FINDPROC     635**DCL-ENT
M$FSUSER     633**DCL-ENT
M$FVP     655**DCL-ENT
M$FWCG     639**DCL-ENT
M$GBPL     659**DCL-ENT
M$GDDL     655**DCL-ENT
M$GDP     654**DCL-ENT
M$GETDCB     624**DCL-ENT
M$GETMOUSE     664**DCL-ENT
M$GETPM     665**DCL-ENT
M$GJOB     683**DCL-ENT
M$GLINEATTR     643**DCL-ENT
M$GOODPP     658**DCL-ENT
M$GPLATEN     651**DCL-ENT
M$GPROMPT     650**DCL-ENT
M$GTRMATTR     644**DCL-ENT
M$GTRMCTL     642**DCL-ENT
M$GTRMTAB     645**DCL-ENT
M$GVP     654**DCL-ENT
M$HELP     681**DCL-ENT
M$INT     673**DCL-ENT
M$INTRTN     634**DCL-ENT
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:371  
M$IOQ     669**DCL-ENT
M$JOBSTATS     683**DCL-ENT
M$KEYIN     623**DCL-ENT
M$LDEV     618**DCL-ENT
M$LDTRC     631**DCL-ENT
M$LIMIT     624**DCL-ENT
M$LINES     623**DCL-ENT
M$LINK     630**DCL-ENT
M$MADMUCK     626**DCL-ENT
M$MAKUSER     657**DCL-ENT
M$MBS     625**DCL-ENT
M$MDFFLD     649**DCL-ENT
M$MERC     674**DCL-ENT
M$MERCS     675**DCL-ENT
M$MIRROR     669**DCL-ENT
M$MONINFO     686**DCL-ENT
M$MPL     659**DCL-ENT
M$NODEINFO     650**DCL-ENT
M$NXTUSR     684**DCL-ENT
M$OCMSG     682**DCL-ENT
M$OLAY     630**DCL-ENT
M$OPEN     618**DCL-ENT
M$PAS     659**DCL-ENT
M$PATHCON     682**DCL-ENT
M$PDS     653**DCL-ENT
M$PFIL     620**DCL-ENT
M$PLATEN     644**DCL-ENT
M$PRECORD     622**DCL-ENT
M$PROCNAME     635**DCL-ENT
M$PROFILE     646**DCL-ENT
M$PROMPT     642**DCL-ENT
M$RACST     626**DCL-ENT
M$RDSYSLOG     667**DCL-ENT
M$READ     619**DCL-ENT
M$RELDCB     624**DCL-ENT
M$RELRES     625**DCL-ENT
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:372  
M$RELSTARF     627**DCL-ENT
M$REM     627**DCL-ENT
M$RENV     674**DCL-ENT
M$REQUIRE     626**DCL-ENT
M$RETRY     675**DCL-ENT
M$RETRYS     675**DCL-ENT
M$REW     621**DCL-ENT
M$RLSFLD     649**DCL-ENT
M$RPRIV     677**DCL-ENT
M$RSPP     656**DCL-ENT
M$RSWITCH     678**DCL-ENT
M$RUE     684**DCL-ENT
M$SAD     657**DCL-ENT
M$SAVE     633**DCL-ENT
M$SCON     634**DCL-ENT
M$SCREECH     632**DCL-ENT
M$SENV     674**DCL-ENT
M$SETFMA     618**DCL-ENT
M$SETFP     647**DCL-ENT
M$SINPUT     645**DCL-ENT
M$SLCFLD     650**DCL-ENT
M$SMOUSE     664**DCL-ENT
M$SMPRT     656**DCL-ENT
M$SPRIV     677**DCL-ENT
M$SSC     657**DCL-ENT
M$SSWITCH     677**DCL-ENT
M$STATE     686**DCL-ENT
M$STD     658**DCL-ENT
M$STIMER     672**DCL-ENT
M$STLPP     655**DCL-ENT
M$STRAP     672**DCL-ENT
M$STRMATTR     644**DCL-ENT
M$STRMCTL     642**DCL-ENT
M$STRMTAB     645**DCL-ENT
M$SYMBIO     683**DCL-ENT
M$SYSCON     669**DCL-ENT
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:373  
M$SYSID     687**DCL-ENT
M$TDCLOSE     668**DCL-ENT
M$TDIO     668**DCL-ENT
M$TDOPEN     667**DCL-ENT
M$TDREQCPU     668**DCL-ENT
M$TEMPWROC     662**DCL-ENT
M$TIME     685**DCL-ENT
M$TRAP     672**DCL-ENT
M$TRMISC     647**DCL-ENT
M$TRMPRG     643**DCL-ENT
M$TRTN     676**DCL-ENT
M$TRUNC     619**DCL-ENT
M$TTIMER     672**DCL-ENT
M$UC     642**DCL
M$UMPL     659**DCL-ENT
M$UNFID     681**DCL-ENT
M$UNLATCH     638**DCL-ENT
M$UNSHARE     635**DCL-ENT
M$USRFIELD     678**DCL-ENT
M$VIRTUAL     653**DCL-ENT
M$WAIT     676**DCL-ENT
M$WEOF     621**DCL-ENT
M$WRITE     619**DCL-ENT
M$WRSYSLOG     667**DCL-ENT
M$XCON     673**DCL-ENT
M$XCONRTN     634**DCL-ENT
M$XEQTIME     686**DCL-ENT
M$XFLUSH     627**DCL-ENT
M$XMOUSE     664**DCL-ENT
M$XXX     630**DCL-ENT
M$YC     632**DCL-ENT
XSL$DCBNPTR    2604**ENTRY
XSL$GETSOCK    2648**ENTRY
XSL$RELSOCK    2674**ENTRY
XSL$SOCKINIT    2738**ENTRY
XSL$SOCKMGMT       6**PROC
PL6.E3A0      #011=XSL$SOCKMGMT File=XSL$SOCKET1.:TCA2TSI                        SUN 11/16/97 14:36 Page:374  
XSL$SOCKPTR    2627**ENTRY
XSL_EVENTIDX    2598**DCL

PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:375  
     2327        1        /*T***********************************************************/
     2328        2        /*T*                                                         */
     2329        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2330        4        /*T*                                                         */
     2331        5        /*T***********************************************************/
     2332        6        XSL$ASYNC: PROC ASYNC;
     2333        7        %INCLUDE CP_6;
     2334       88            %B$EXCFR;
     2335      106            %B$TCB;
     2336      109        %INCLUDE XSL_SOCKET_M;
     2337      870        %INCLUDE XSL_INTERNAL_M;
     2338     1121            %XSL$SOCKHD( STCLASS="BASED( XSL_SOCK$$)");
     2339     1154
     2340     1155    1       DCL XSL$EVENT ENTRY(1) ALTRET;
     2341     1156
     2342     1157    1       DCL B$TCB$ PTR SYMREF READONLY;
     2343     1158    1       DCL XSL_SOCK$$ PTR SYMREF;
     2344     1159
     2345     1160    1       DCL EVENT# SBIN;
     2346     1161    1       DCL 1 P BASED ALIGNED,
     2347     1162    1           2 * UBIN(24) UNAL,
     2348     1163    1           2 SEGID UBIN(12) UNAL;
     2349     1164
     2350     1165            /* this entire procedure is INHIBITED to avoid TCB overflow */
     2351     1166    2       DO INHIBIT;
     2352     1167    2           EVENT# = B$TCB$->B$TCB.STK$->B$EXCFR.EVID;
     2353     1168    2           IF ADDR( EVENT#)->P.SEGID = ADDR( XSL_SOCK$$)->P.SEGID THEN
     2354     1169    2               CALL XSL$EVENT( B$TCB$->B$TCB.STK$->B$EXCFR);
     2355     1170    3           ELSE DO;
     2356     1171    3               IF XSL$SOCKHD.EVNT$ ~= ENTADDR( NIL) THEN
     2357     1172    3                   CALL XSL$SOCKHD.EVNT$( B$TCB$->B$TCB.STK$->B$EXCFR);
     2358     1173    3               END;
     2359     1174    2           RETURN;
     2360     1175    2           END;
     2361     1176
     2362     1177    1   END XSL$ASYNC;
     2363     1178        %EOD;
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:376  

PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:377  
--  Include file information  --

   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$ASYNC.

   Procedure XSL$ASYNC requires 30 words for executable code.
   Procedure XSL$ASYNC requires 6 words of local(AUTO) storage.

PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:378  

 Object Unit name= XSL$ASYNC                                  File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:37:19.36 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    30     36  XSL$ASYNC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes     Async       0  XSL$ASYNC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 XSL$EVENT
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    B$TCB$                                XSL_SOCK$$
     B_VECTNIL
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:379  


     2327        1        /*T***********************************************************/
     2328        2        /*T*                                                         */
     2329        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2330        4        /*T*                                                         */
     2331        5        /*T***********************************************************/
     2332        6        XSL$ASYNC: PROC ASYNC;

      6  1 000000   000000 700200 xent  XSL$ASYNC    TSX0  ! X66_AAUTO
         1 000001   000006 000000                    ZERO    6,0

     2333        7        %INCLUDE CP_6;
     2334       88            %B$EXCFR;
     2335      106            %B$TCB;
     2336      109        %INCLUDE XSL_SOCKET_M;
     2337      870        %INCLUDE XSL_INTERNAL_M;
     2338     1121            %XSL$SOCKHD( STCLASS="BASED( XSL_SOCK$$)");
     2339     1154
     2340     1155    1       DCL XSL$EVENT ENTRY(1) ALTRET;
     2341     1156
     2342     1157    1       DCL B$TCB$ PTR SYMREF READONLY;
     2343     1158    1       DCL XSL_SOCK$$ PTR SYMREF;
     2344     1159
     2345     1160    1       DCL EVENT# SBIN;
     2346     1161    1       DCL 1 P BASED ALIGNED,
     2347     1162    1           2 * UBIN(24) UNAL,
     2348     1163    1           2 SEGID UBIN(12) UNAL;
     2349     1164
     2350     1165            /* this entire procedure is INHIBITED to avoid TCB overflow */
     2351     1166    2       DO INHIBIT;

     2352     1167    2           EVENT# = B$TCB$->B$TCB.STK$->B$EXCFR.EVID;

   1167  1 000002   000000 470600 xsym               LDP0  ! B$TCB$
         1 000003   000001 471700                    LDP1  ! 1,,PR0
         1 000004   100101 235300                    LDA   ! 65,,PR1
         1 000005   200003 755300                    STA   ! EVENT#,,AUTO
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:380  

     2353     1168    2           IF ADDR( EVENT#)->P.SEGID = ADDR( XSL_SOCK$$)->P.SEGID THEN

   1168  1 000006   200003 236300                    LDQ   ! EVENT#,,AUTO
         1 000007   000000 676200 xsym               ERQ   ! XSL_SOCK$$
         1 000010   007777 376207                    ANQ   ! 4095,DL
         1 000011   000021 601200 1                  TNZ   ! s:1171

     2354     1169    2               CALL XSL$EVENT( B$TCB$->B$TCB.STK$->B$EXCFR);

   1169  1 000012   000001 471700                    LDP1  ! 1,,PR0
         1 000013   200004 451700                    STP1  ! EVENT#+1,,AUTO
         1 000014   200004 630700                    EPPR0 ! EVENT#+1,,AUTO
         1 000015   000017 631600 xsym               EPPR1 ! B_VECTNIL+15
         1 000016   000000 701200 xent               TSX1  ! XSL$EVENT
         1 000017   000000 011200                    NOP   ! 0
         1 000020   000034 710200 1                  TRA   ! s:1174

     2355     1170    3           ELSE DO;

     2356     1171    3               IF XSL$SOCKHD.EVNT$ ~= ENTADDR( NIL) THEN

   1171  1 000021   000000 471600 xsym               LDP1  ! XSL_SOCK$$
         1 000022   100003 236300                    LDQ   ! 3,,PR1
         1 000023   000002 116200 xsym               CMPQ  ! B_VECTNIL+2
         1 000024   000034 600200 1                  TZE   ! s:1174

     2357     1172    3                   CALL XSL$SOCKHD.EVNT$( B$TCB$->B$TCB.STK$->B$EXCFR);

   1172  1 000025   000001 473700                    LDP3  ! 1,,PR0
         1 000026   200004 453700                    STP3  ! EVENT#+1,,AUTO
         1 000027   200004 630700                    EPPR0 ! EVENT#+1,,AUTO
         1 000030   100003 220300                    LDX0  ! 3,,PR1
         1 000031   000017 631600 xsym               EPPR1 ! B_VECTNIL+15
         1 000032   000000 701210                    TSX1  ! 0,X0
         1 000033   000000 011200                    NOP   ! 0

PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:381  
     2358     1173    3               END;

     2359     1174    2           RETURN;

   1174  1 000034   000000 702200 xent               TSX2  ! X66_AARET

     2360     1175    2           END;

     2361     1176
     2362     1177    1   END XSL$ASYNC;

   1177  1 000035   000000 702200 xent               TSX2  ! X66_AARET
     2363     1178        %EOD;

PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:382  
--  Include file information  --

   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$ASYNC.
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:383  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w SBIN        r     1 EVENT#

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 XSL_SOCK$$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$EXCFR                    0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC        r     1 P                          0-0-0/w STRC(180)   r     1 XSL$SOCKHD


   Procedure XSL$ASYNC requires 30 words for executable code.
   Procedure XSL$ASYNC requires 6 words of local(AUTO) storage.
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:384  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:385  
          MINI XREF LISTING

B$EXCFR
        89**DCL      1169<>CALL     1172<>CALL
B$EXCFR.ASL
        89**DCL        89--REDEF
B$EXCFR.ERR.ERR#
       103**DCL       103--REDEF
B$EXCFR.EVID
       102**DCL       102--REDEF     103--REDEF    1167>>ASSIGN
B$EXCFR.IR
        90**DCL        90--REDEF
B$EXCFR.PREVSZ
        89**DCL        89--REDEF
B$EXCFR.SUBC
       101**DCL       101--REDEF     102--REDEF     102--REDEF
B$TCB.STK$
       107**DCL      1167>>ASSIGN   1169>>CALL     1172>>CALL
B$TCB$
      1157**DCL      1167>>ASSIGN   1169>>CALL     1172>>CALL
EVENT#
      1160**DCL      1167<<ASSIGN   1168--IF
P.SEGID
      1163**DCL      1168>>IF       1168>>IF
XSL$EVENT
      1155**DCL-ENT  1169--CALL
XSL$SOCKHD.EVNT$
      1151**DCL      1171>>IF       1172>>CALL
XSL_SOCK$$
      1158**DCL      1138--IMP-PTR  1168--IF       1171>>IF       1172>>CALL
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:386  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:387  
              MINI UREF LISTING

M$ACCT      33**DCL-ENT
M$ACTIVATE      36**DCL-ENT
M$ALIB      29**DCL-ENT
M$ASUSER      31**DCL-ENT
M$ATTACH      38**DCL-ENT
M$BADPP      56**DCL-ENT
M$CGCTL      37**DCL-ENT
M$CGINFO      37**DCL-ENT
M$CHECK      18**DCL-ENT
M$CHGUNIT      76**DCL-ENT
M$CLOSE      16**DCL-ENT
M$CLRSTK      74**DCL-ENT
M$CMDVAR      85**DCL-ENT
M$CONFIG      46**DCL-ENT
M$CORRES      21**DCL-ENT
M$CPEXIT      30**DCL-ENT
M$CVM      54**DCL-ENT
M$CVOL      19**DCL-ENT
M$DCLFLD      46**DCL-ENT
M$DEACTIVATE      36**DCL-ENT
M$DELREC      18**DCL-ENT
M$DEQ      83**DCL-ENT
M$DETACH      38**DCL-ENT
M$DEVICE      20**DCL-ENT
M$DISPLAY      83**DCL-ENT
M$DISPRES      23**DCL-ENT
M$DLIB      29**DCL-ENT
M$DRIBBLE      46**DCL-ENT
M$DRTN      74**DCL-ENT
M$DSUSER      31**DCL-ENT
M$ENQ      82**DCL-ENT
M$EOM      41**DCL-ENT
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:388  
M$ERASE      47**DCL-ENT
M$ERR      28**DCL-ENT
M$ERRMSG      79**DCL-ENT
M$EVENT      71**DCL-ENT
M$EXHUME      80**DCL-ENT
M$EXIT      28**DCL-ENT
M$EXTEND      20**DCL-ENT
M$FDP      52**DCL-ENT
M$FDS      51**DCL-ENT
M$FEBOOT      44**DCL-ENT
M$FECTL      45**DCL-ENT
M$FEDUMP      44**DCL-ENT
M$FID      79**DCL-ENT
M$FINDPROC      33**DCL-ENT
M$FSUSER      31**DCL-ENT
M$FVP      53**DCL-ENT
M$FWCG      37**DCL-ENT
M$GBPL      57**DCL-ENT
M$GDDL      53**DCL-ENT
M$GDP      52**DCL-ENT
M$GDS      51**DCL-ENT
M$GETDCB      22**DCL-ENT
M$GETMOUSE      62**DCL-ENT
M$GETPM      63**DCL-ENT
M$GJOB      81**DCL-ENT
M$GLINEATTR      41**DCL-ENT
M$GOODPP      56**DCL-ENT
M$GPLATEN      49**DCL-ENT
M$GPROMPT      48**DCL-ENT
M$GTRMATTR      42**DCL-ENT
M$GTRMCTL      40**DCL-ENT
M$GTRMTAB      43**DCL-ENT
M$GVP      52**DCL-ENT
M$HELP      79**DCL-ENT
M$INT      71**DCL-ENT
M$INTRTN      32**DCL-ENT
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:389  
M$IOQ      67**DCL-ENT
M$JOBSTATS      81**DCL-ENT
M$KEYIN      21**DCL-ENT
M$LDEV      16**DCL-ENT
M$LDTRC      29**DCL-ENT
M$LIMIT      22**DCL-ENT
M$LINES      21**DCL-ENT
M$LINK      28**DCL-ENT
M$MADMUCK      24**DCL-ENT
M$MAKUSER      55**DCL-ENT
M$MBS      23**DCL-ENT
M$MDFFLD      47**DCL-ENT
M$MERC      72**DCL-ENT
M$MERCS      73**DCL-ENT
M$MIRROR      67**DCL-ENT
M$MONINFO      84**DCL-ENT
M$MPL      57**DCL-ENT
M$NODEINFO      48**DCL-ENT
M$NXTUSR      82**DCL-ENT
M$OCMSG      80**DCL-ENT
M$OLAY      28**DCL-ENT
M$OPEN      16**DCL-ENT
M$PAS      57**DCL-ENT
M$PATHCON      80**DCL-ENT
M$PDS      51**DCL-ENT
M$PFIL      18**DCL-ENT
M$PLATEN      42**DCL-ENT
M$PRECORD      20**DCL-ENT
M$PROCNAME      33**DCL-ENT
M$PROFILE      44**DCL-ENT
M$PROMPT      40**DCL-ENT
M$RACST      24**DCL-ENT
M$RDSYSLOG      65**DCL-ENT
M$READ      17**DCL-ENT
M$RELDCB      22**DCL-ENT
M$RELRES      23**DCL-ENT
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:390  
M$RELSTARF      25**DCL-ENT
M$REM      25**DCL-ENT
M$RENV      72**DCL-ENT
M$REQUIRE      24**DCL-ENT
M$RETRY      73**DCL-ENT
M$RETRYS      73**DCL-ENT
M$REW      19**DCL-ENT
M$RLSFLD      47**DCL-ENT
M$RPRIV      75**DCL-ENT
M$RSPP      54**DCL-ENT
M$RSWITCH      76**DCL-ENT
M$RUE      82**DCL-ENT
M$SAD      55**DCL-ENT
M$SAVE      31**DCL-ENT
M$SCON      32**DCL-ENT
M$SCREECH      30**DCL-ENT
M$SENV      72**DCL-ENT
M$SETFMA      16**DCL-ENT
M$SETFP      45**DCL-ENT
M$SINPUT      43**DCL-ENT
M$SLCFLD      48**DCL-ENT
M$SMOUSE      62**DCL-ENT
M$SMPRT      54**DCL-ENT
M$SPRIV      75**DCL-ENT
M$SSC      55**DCL-ENT
M$SSWITCH      75**DCL-ENT
M$STATE      84**DCL-ENT
M$STD      56**DCL-ENT
M$STIMER      70**DCL-ENT
M$STLPP      53**DCL-ENT
M$STRAP      70**DCL-ENT
M$STRMATTR      42**DCL-ENT
M$STRMCTL      40**DCL-ENT
M$STRMTAB      43**DCL-ENT
M$SYMBIO      81**DCL-ENT
M$SYSCON      67**DCL-ENT
PL6.E3A0      #012=XSL$ASYNC File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:391  
M$SYSID      85**DCL-ENT
M$TDCLOSE      66**DCL-ENT
M$TDIO      66**DCL-ENT
M$TDOPEN      65**DCL-ENT
M$TDREQCPU      66**DCL-ENT
M$TEMPWROC      60**DCL-ENT
M$TIME      83**DCL-ENT
M$TRAP      70**DCL-ENT
M$TRMISC      45**DCL-ENT
M$TRMPRG      41**DCL-ENT
M$TRTN      74**DCL-ENT
M$TRUNC      17**DCL-ENT
M$TTIMER      70**DCL-ENT
M$UC      40**DCL
M$UMPL      57**DCL-ENT
M$UNFID      79**DCL-ENT
M$UNLATCH      36**DCL-ENT
M$UNSHARE      33**DCL-ENT
M$USRFIELD      76**DCL-ENT
M$VIRTUAL      51**DCL-ENT
M$WAIT      74**DCL-ENT
M$WEOF      19**DCL-ENT
M$WRITE      17**DCL-ENT
M$WRSYSLOG      65**DCL-ENT
M$XCON      71**DCL-ENT
M$XCONRTN      32**DCL-ENT
M$XEQTIME      84**DCL-ENT
M$XFLUSH      25**DCL-ENT
M$XMOUSE      62**DCL-ENT
M$XXX      28**DCL-ENT
M$YC      30**DCL-ENT
XSL$ASYNC       6**PROC

PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:392  
     2364        1        /*T***********************************************************/
     2365        2        /*T*                                                         */
     2366        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2367        4        /*T*                                                         */
     2368        5        /*T***********************************************************/
     2369        6        XSL$EVENT: PROC( B$EXCFR) ALTRET;
     2370        7        %INCLUDE CP_6;
     2371       88        %INCLUDE B$JIT;
     2372      378    1       DCL B$JIT$ PTR SYMREF READONLY; /* Just defined to get privilege info */
     2373      379            %B$COMIO( STCLASS="BASED( EXCFR$)");
     2374      392            %B$EXCFR( STCLASS=);
     2375      410            %SUB_EXC;
     2376      457            %B$NWIO( STCLASS="BASED( EXCFR$)");
     2377      542            %FPT_SCREECH( SCODE=VLP_SUA, STCLASS=CONSTANT);
     2378      556            %VLP_SUA( SEV=5, LDCTS=YES, CWSPT=YES, STCLASS=CONSTANT,
     2379      557                    FCG='XS', MID='L', CODE=9999);
     2380      627            %VLP_ERRCODE( FPTN=ERRCODE);
     2381      672            %FPT_PRIV(FPTN=SET_EXMM,STCLASS=CONSTANT,PRIV=%PR_EXMM#);
     2382      687        %INCLUDE XSL_SOCKET_M;
     2383     1448        %INCLUDE XSL_INTERNAL_M;
     2384     1699            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( EVPTR$)");
     2385     1732            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
     2386     1876        %INCLUDE XSL_SOCKMSGS_E;
     2387     1922
     2388     1923    1       DCL XSL$RELBUF ENTRY(2) ALTRET;
     2389     1924    1       DCL XSL$EVLOG ENTRY(2);
     2390     1925
     2391     1926    1       DCL XSL_SOCK$$ PTR SYMREF;
     2392     1927    1       DCL XSL_BUFSIZE SBIN SYMREF;
     2393     1928
     2394     1929    1       DCL B$PTR PTR BASED;
     2395     1930    1       DCL EVENT# SBIN;
     2396     1931    1       DCL EVPTR$ REDEF EVENT# PTR;
     2397     1932    1       DCL EXCFR$ PTR;
     2398     1933    1       DCL MSGCODE SBIN HALF;
     2399     1934    1       DCL SOCK$ PTR;
     2400     1935
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:393  
     2401     1936            /* this entire procedure is INHIBITED to avoid TCB overflow */
     2402     1937    2       DO INHIBIT;
     2403     1938    2           EVENT# = B$EXCFR.EVID;  /* loads EVPTR$ too... */
     2404     1939    2           EXCFR$ = ADDR( B$EXCFR);
     2405     1940    2   SELECT_SUBC:
     2406     1941    3           DO SELECT( B$EXCFR.SUBC);
     2407     1942    3               SELECT( %SUBC_IO#);
     2408     1943    3               CALL XSL$EVLOG( 'EV', EVPTR$);
     2409     1944    3               IF NOT DATABUF.FLAGS.BUSY
     2410     1945    4               THEN DO;
     2411     1946    5                   CALL M$SPRIV(SET_EXMM) WHENALTRETURN DO; END;
     2412     1947    4                   CALL M$SCREECH( FPT_SCREECH);
     2413     1948    4                   END;
     2414     1949    3               SOCK$ = EVPTR$->B$PTR;  /* GETBUF sets this up */
     2415     1950    3               DATABUF.FLAGS.BUSY = '0'B;
     2416     1951    3               DATABUF.START = SIZEC( DATABUF);
     2417     1952    3               DATABUF.LEN = B$NWIO.ARS;
     2418     1953    3               ERRCODE = B$NWIO.IOERRCODE;
     2419     1954    3               IF NOT ERRCODE THEN ERRCODE = B$EXCFR.ERR;
     2420     1955    4               IF ERRCODE THEN DO;
     2421     1956    4                   CALL XSL$EVLOG( 'ER', SOCK$);
     2422     1957    4                   CALL XSL$EVLOG( , ERRCODE);
     2423     1958    4                   IF SOCK.FLAGS.CP6ERR THEN GOTO RELBUF;
     2424     1959    4                   SOCK.FLAGS.CP6ERR = '1'B;
     2425     1960    4                   SOCK.CP6ERROR = ERRCODE;
     2426     1961    4                   DATABUF.LEN = 0;
     2427     1962    4                   DATABUF.KEY = '0'B;
     2428     1963    4                   DATABUF.KEY(1) = %RECVRSP;
     2429     1964    4                   END;
     2430     1965    3               ELSE
     2431     1966    3                   IF B$NWIO.TYC THEN GOTO RELBUF;
     2432     1967    3               SOCK.BUFPND# = SOCK.BUFPND# + 1;
     2433     1968    3               MSGCODE = DATABUF.KEY(1);
     2434     1969    4               IF ( MSGCODE = %RECVRSP OR MSGCODE = %RECVFROMRSP) THEN DO;
     2435     1970    4                   IF DATABUF.KEY(2) ~= 255 AND DATABUF.KEY(3) ~= 255 AND
     2436     1971    5                     DATABUF.KEY(5) ~= 0 THEN DO;
     2437     1972    5                       DATABUF.FLAGS.OOB = '1'B;
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:394  
     2438     1973    5                       IF SOCK.FLAGS.OOBINLINE THEN GOTO OOBINLINE;
     2439     1974    5                       SOCK.OOB# = SOCK.OOB# + 1;
     2440     1975    5                       SOCK.FLAGS.SELEXCEP = '1'B;
     2441     1976    5                       END;
     2442     1977    5                   ELSE DO;
     2443     1978    5   OOBINLINE:
     2444     1979    5                       SOCK.DAT# = SOCK.DAT# + 1;
     2445     1980    5                       SOCK.FLAGS.SELREAD = '1'B;
     2446     1981    5                       END;
     2447     1982    5                   IF MSGCODE = %RECVFROMRSP THEN DO;
     2448     1983    5                       IF ( DATABUF.KEY(2) ~= 255 AND DATABUF.KEY(3) ~= 255) AND
     2449     1984    6                         ( DATABUF.KEY(2)*256 + DATABUF.KEY(3) > XSL_BUFSIZE) THEN DO;
     2450     1985    6                           SOCK.FLAGS.DRIP = '1'B;
     2451     1986    6                           DATABUF.FLAGS.MORE = '1'B;
     2452     1987    6                           END;
     2453     1988    5                       ELSE
     2454     1989    5                           SOCK.FLAGS.DRIP = '0'B;
     2455     1990    5                       END;
     2456     1991    4                   EXIT SELECT_SUBC;
     2457     1992    4                   END;
     2458     1993    3               IF ( MSGCODE = %SENDRSP OR MSGCODE = %SENDTORSP) AND
     2459     1994    4                 ( DATABUF.KEY(2) = 255 AND DATABUF.KEY(3) = 255) THEN DO;
     2460     1995    4                   SOCK.FEPERROR = DATABUF.KEY(5);
     2461     1996    4                   SOCK.BUFPND# = SOCK.BUFPND# - 1;
     2462     1997    4   RELBUF:
     2463     1998    4                   CALL XSL$RELBUF( SOCK, DATABUF);
     2464     1999    4                   END;
     2465     2000    3               ELSE
     2466     2001    3                   GOTO OOBINLINE;
     2467     2002    3               SELECT( %SUBC_COMIO#);
     2468     2003    3               SOCK$ = EVPTR$;
     2469     2004    4               DO CASE( B$COMIO.SUBC2);
     2470     2005    4                   CASE( %SUBC2_DATA_RQS#);
     2471     2006    4                       CALL XSL$EVLOG( 'RQ', EVPTR$);
     2472     2007    4                       IF SOCK.RCRBYTSIZ = 0 THEN
     2473     2008    4                           SOCK.RCRBYTSIZ = B$COMIO.ARS;
     2474     2009    4                       ELSE
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:395  
     2475     2010    4                           SOCK.FLAGS.SELWRITE = '1'B;
     2476     2011    4                   CASE( %SUBC2_DATA_AVL#);
     2477     2012                                /* FEP wants to send RSP but no reads pending */
     2478     2013    4                       CALL XSL$EVLOG( 'AV', EVPTR$);
     2479     2014        /* leave this out..     IF SOCK.FLAGS.MUSTREAD AND SOCK.MAXRDS ~= 0 THEN
     2480     2015           for now.  proxy sends..  IF NOT SOCK.FLAGS.DRIP THEN
     2481     2016           multiple AVLs.               CALL M$SCREECH( FPT_SCREECH);  */
     2482     2017    4                       SOCK.FLAGS.MUSTREAD = '1'B;
     2483     2018    4                   END;
     2484     2019    3               END;
     2485     2020    2           RETURN;
     2486     2021    2           END;
     2487     2022
     2488     2023    1   END XSL$EVENT;
     2489     2024        %EOD;

PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:396  
--  Include file information  --

   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$EVENT.

   Procedure XSL$EVENT requires 232 words for executable code.
   Procedure XSL$EVENT requires 10 words of local(AUTO) storage.

PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:397  

 Object Unit name= XSL$EVENT                                  File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:37:38.60 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     16     20  XSL$EVENT
    2   Data  even  none     1      1  XSL$EVENT
    3   Proc  even  none   232    350  XSL$EVENT
    4  RoData even  none     6      6  XSL$EVENT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        1  XSL$EVENT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 XSL$EVLOG
 yes     yes           Std       2 XSL$RELBUF
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:398  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    B$JIT$                                XSL_BUFSIZE
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:399  


     2364        1        /*T***********************************************************/
     2365        2        /*T*                                                         */
     2366        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2367        4        /*T*                                                         */
     2368        5        /*T***********************************************************/
     2369        6        XSL$EVENT: PROC( B$EXCFR) ALTRET;

      6  3 000000   000000 700200 xent  XSL$EVENT    TSX0  ! X66_AUTO_1
         3 000001   000012 000001                    ZERO    10,1

     2370        7        %INCLUDE CP_6;
     2371       88        %INCLUDE B$JIT;
     2372      378    1       DCL B$JIT$ PTR SYMREF READONLY; /* Just defined to get privilege info */
     2373      379            %B$COMIO( STCLASS="BASED( EXCFR$)");
     2374      392            %B$EXCFR( STCLASS=);
     2375      410            %SUB_EXC;
     2376      457            %B$NWIO( STCLASS="BASED( EXCFR$)");
     2377      542            %FPT_SCREECH( SCODE=VLP_SUA, STCLASS=CONSTANT);
     2378      556            %VLP_SUA( SEV=5, LDCTS=YES, CWSPT=YES, STCLASS=CONSTANT,
     2379      557                    FCG='XS', MID='L', CODE=9999);
     2380      627            %VLP_ERRCODE( FPTN=ERRCODE);
     2381      672            %FPT_PRIV(FPTN=SET_EXMM,STCLASS=CONSTANT,PRIV=%PR_EXMM#);
     2382      687        %INCLUDE XSL_SOCKET_M;
     2383     1448        %INCLUDE XSL_INTERNAL_M;
     2384     1699            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( EVPTR$)");
     2385     1732            %XSL$SOCKINFO( FPTN=SOCK, STCLASS="BASED( SOCK$)");
     2386     1876        %INCLUDE XSL_SOCKMSGS_E;
     2387     1922
     2388     1923    1       DCL XSL$RELBUF ENTRY(2) ALTRET;
     2389     1924    1       DCL XSL$EVLOG ENTRY(2);
     2390     1925
     2391     1926    1       DCL XSL_SOCK$$ PTR SYMREF;
     2392     1927    1       DCL XSL_BUFSIZE SBIN SYMREF;
     2393     1928
     2394     1929    1       DCL B$PTR PTR BASED;
     2395     1930    1       DCL EVENT# SBIN;
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:400  
     2396     1931    1       DCL EVPTR$ REDEF EVENT# PTR;
     2397     1932    1       DCL EXCFR$ PTR;
     2398     1933    1       DCL MSGCODE SBIN HALF;
     2399     1934    1       DCL SOCK$ PTR;
     2400     1935
     2401     1936            /* this entire procedure is INHIBITED to avoid TCB overflow */
     2402     1937    2       DO INHIBIT;

     2403     1938    2           EVENT# = B$EXCFR.EVID;  /* loads EVPTR$ too... */

   1938  3 000002   200003 470700                    LDP0  ! @B$EXCFR,,AUTO
         3 000003   000101 235300                    LDA   ! 65,,PR0
         3 000004   200004 755300                    STA   ! EVENT#,,AUTO

     2404     1939    2           EXCFR$ = ADDR( B$EXCFR);

   1939  3 000005   200003 236300                    LDQ   ! @B$EXCFR,,AUTO
         3 000006   200005 756300                    STQ   ! EXCFR$,,AUTO

     2405     1940    2   SELECT_SUBC:
     2406     1941    3           DO SELECT( B$EXCFR.SUBC);

   1941  3 000007   000100 236300       SELECT_SUBC  LDQ   ! 64,,PR0
         3 000010   777777 376207                    ANQ   ! -1,DL
         3 000011   000001 116207                    CMPQ  ! 1,DL
         3 000012   000346 602200 3                  TNC   ! s:2020
         3 000013   000020 600200 3                  TZE   ! s:1943
         3 000014   000100 720300                    LXL0  ! 64,,PR0
         3 000015   000006 100203                    CMPX0 ! 6,DU
         3 000016   000346 601200 3                  TNZ   ! s:2020
         3 000017   000276 710200 3                  TRA   ! s:2003

     2407     1942    3               SELECT( %SUBC_IO#);

     2408     1943    3               CALL XSL$EVLOG( 'EV', EVPTR$);

   1943  3 000020   200004 631700                    EPPR1 ! EVENT#,,AUTO
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:401  
         3 000021   200011 451700                    STP1  ! SOCK$+2,,AUTO
         3 000022   000000 236200 4                  LDQ   ! 0
         3 000023   200010 756300                    STQ   ! SOCK$+1,,AUTO
         3 000024   200010 630700                    EPPR0 ! SOCK$+1,,AUTO
         3 000025   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000026   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000027   000000 011200                    NOP   ! 0

     2409     1944    3               IF NOT DATABUF.FLAGS.BUSY

   1944  3 000030   200004 470700                    LDP0  ! EVENT#,,AUTO
         3 000031   000001 234300                    SZN   ! 1,,PR0
         3 000032   000043 604200 3                  TMI   ! s:1949

     2410     1945    4               THEN DO;

     2411     1946    5                   CALL M$SPRIV(SET_EXMM) WHENALTRETURN DO; END;

   1946  3 000033   000010 630600 1                  EPPR0 ! SET_EXMM
         3 000034   420012 713600                    CLIMB ! alt,+8202
         3 000035   400000 401760                    pmme    nvectors=1
         3 000036   000040 702200 3                  TSX2  ! s:1947
         3 000037   000040 710200 3                  TRA   ! s:1947

     2412     1947    4                   CALL M$SCREECH( FPT_SCREECH);

   1947  3 000040   000000 630600 1                  EPPR0 ! FPT_SCREECH
         3 000041   000013 713600                    CLIMB ! 11
         3 000042   401000 401760                    pmme    nvectors=3

     2413     1948    4                   END;

     2414     1949    3               SOCK$ = EVPTR$->B$PTR;  /* GETBUF sets this up */

   1949  3 000043   200004 470700                    LDP0  ! EVENT#,,AUTO
         3 000044   000000 236300                    LDQ   ! 0,,PR0
         3 000045   200007 756300                    STQ   ! SOCK$,,AUTO
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:402  

     2415     1950    3               DATABUF.FLAGS.BUSY = '0'B;

   1950  3 000046   000031 236200 xsym               LDQ   ! B_VECTNIL+25
         3 000047   000001 356300                    ANSQ  ! 1,,PR0

     2416     1951    3               DATABUF.START = SIZEC( DATABUF);

   1951  3 000050   000050 220203                    LDX0  ! 40,DU
         3 000051   200004 470700                    LDP0  ! EVENT#,,AUTO
         3 000052   000000 740300                    STX0  ! 0,,PR0

     2417     1952    3               DATABUF.LEN = B$NWIO.ARS;

   1952  3 000053   200005 470700                    LDP0  ! EXCFR$,,AUTO
         3 000054   000105 721300                    LXL1  ! 69,,PR0
         3 000055   200004 471700                    LDP1  ! EVENT#,,AUTO
         3 000056   100000 441300                    SXL1  ! 0,,PR1

     2418     1953    3               ERRCODE = B$NWIO.IOERRCODE;

   1953  3 000057   000117 236300                    LDQ   ! 79,,PR0
         3 000060   000000 756200 2                  STQ   ! ERRCODE

     2419     1954    3               IF NOT ERRCODE THEN ERRCODE = B$EXCFR.ERR;

   1954  3 000061   000065 601200 3                  TNZ   ! s:1955

   1954  3 000062   200003 471700                    LDP1  ! @B$EXCFR,,AUTO
         3 000063   100102 236300                    LDQ   ! 66,,PR1
         3 000064   000000 756200 2                  STQ   ! ERRCODE

     2420     1955    4               IF ERRCODE THEN DO;

   1955  3 000065   000131 600200 3                  TZE   ! s:1966

     2421     1956    4                   CALL XSL$EVLOG( 'ER', SOCK$);
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:403  

   1956  3 000066   200007 631700                    EPPR1 ! SOCK$,,AUTO
         3 000067   200011 451700                    STP1  ! SOCK$+2,,AUTO
         3 000070   000001 236200 4                  LDQ   ! 1
         3 000071   200010 756300                    STQ   ! SOCK$+1,,AUTO
         3 000072   200010 630700                    EPPR0 ! SOCK$+1,,AUTO
         3 000073   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000074   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000075   000000 011200                    NOP   ! 0

     2422     1957    4                   CALL XSL$EVLOG( , ERRCODE);

   1957  3 000076   000002 236200 4                  LDQ   ! 2
         3 000077   000001 235200 xsym               LDA   ! B_VECTNIL+1
         3 000100   200010 757300                    STAQ  ! SOCK$+1,,AUTO
         3 000101   200010 630700                    EPPR0 ! SOCK$+1,,AUTO
         3 000102   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000103   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000104   000000 011200                    NOP   ! 0

     2423     1958    4                   IF SOCK.FLAGS.CP6ERR THEN GOTO RELBUF;

   1958  3 000105   200007 470700                    LDP0  ! SOCK$,,AUTO
         3 000106   000001 236300                    LDQ   ! 1,,PR0
         3 000107   200000 316207                    CANQ  ! 65536,DL
         3 000110   000266 601200 3                  TNZ   ! RELBUF

     2424     1959    4                   SOCK.FLAGS.CP6ERR = '1'B;

   1959  3 000111   200000 236207                    LDQ   ! 65536,DL
         3 000112   000001 256300                    ORSQ  ! 1,,PR0

     2425     1960    4                   SOCK.CP6ERROR = ERRCODE;

   1960  3 000113   000000 236200 2                  LDQ   ! ERRCODE
         3 000114   200007 470700                    LDP0  ! SOCK$,,AUTO
         3 000115   000022 756300                    STQ   ! 18,,PR0
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:404  

     2426     1961    4                   DATABUF.LEN = 0;

   1961  3 000116   000000 220203                    LDX0  ! 0,DU
         3 000117   200004 471700                    LDP1  ! EVENT#,,AUTO
         3 000120   100000 440300                    SXL0  ! 0,,PR1

     2427     1962    4                   DATABUF.KEY = '0'B;

   1962  3 000121   200004 470700                    LDP0  ! EVENT#,,AUTO
         3 000122   000100 100600                    MLR   ! fill='000'O
         3 000123   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000124   000002 000040                    ADSC9   2,,PR0                   cn=0,n=32

     2428     1963    4                   DATABUF.KEY(1) = %RECVRSP;

   1963  3 000125   200004 470700                    LDP0  ! EVENT#,,AUTO
         3 000126   000016 236203                    LDQ   ! 14,DU
         3 000127   000002 552320                    STBQ  ! 2,'20'O,PR0

     2429     1964    4                   END;

   1964  3 000130   000133 710200 3                  TRA   ! s:1967

     2430     1965    3               ELSE
     2431     1966    3                   IF B$NWIO.TYC THEN GOTO RELBUF;

   1966  3 000131   000104 235300                    LDA   ! 68,,PR0
         3 000132   000266 601200 3                  TNZ   ! RELBUF

     2432     1967    3               SOCK.BUFPND# = SOCK.BUFPND# + 1;

   1967  3 000133   200007 470700                    LDP0  ! SOCK$,,AUTO
         3 000134   000017 720300                    LXL0  ! 15,,PR0
         3 000135   000001 621210                    EAX1  ! 1,X0
         3 000136   000017 441300                    SXL1  ! 15,,PR0

PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:405  
     2433     1968    3               MSGCODE = DATABUF.KEY(1);

   1968  3 000137   200004 471700                    LDP1  ! EVENT#,,AUTO
         3 000140   100002 220300                    LDX0  ! 2,,PR1
         3 000141   000777 360203                    ANX0  ! 511,DU
         3 000142   200006 740300                    STX0  ! MSGCODE,,AUTO

     2434     1969    4               IF ( MSGCODE = %RECVRSP OR MSGCODE = %RECVFROMRSP) THEN DO;

   1969  3 000143   000016 100203                    CMPX0 ! 14,DU
         3 000144   000147 600200 3                  TZE   ! s:1970
         3 000145   000020 100203                    CMPX0 ! 16,DU
         3 000146   000243 601200 3                  TNZ   ! s:1993

     2435     1970    4                   IF DATABUF.KEY(2) ~= 255 AND DATABUF.KEY(3) ~= 255 AND

   1970  3 000147   100002 236300                    LDQ   ! 2,,PR1
         3 000150   777000 376207                    ANQ   ! -512,DL
         3 000151   377000 116207                    CMPQ  ! 130560,DL
         3 000152   000176 600200 3                  TZE   ! OOBINLINE
         3 000153   100002 236300                    LDQ   ! 2,,PR1
         3 000154   000777 376207                    ANQ   ! 511,DL
         3 000155   000377 116207                    CMPQ  ! 255,DL
         3 000156   000176 600200 3                  TZE   ! OOBINLINE
         3 000157   100003 236300                    LDQ   ! 3,,PR1
         3 000160   000777 316203                    CANQ  ! 511,DU
         3 000161   000176 600200 3                  TZE   ! OOBINLINE

     2436     1971    5                     DATABUF.KEY(5) ~= 0 THEN DO;

     2437     1972    5                       DATABUF.FLAGS.OOB = '1'B;

   1972  3 000162   200000 236203                    LDQ   ! 65536,DU
         3 000163   100001 256300                    ORSQ  ! 1,,PR1

     2438     1973    5                       IF SOCK.FLAGS.OOBINLINE THEN GOTO OOBINLINE;

PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:406  
   1973  3 000164   200007 470700                    LDP0  ! SOCK$,,AUTO
         3 000165   000001 236300                    LDQ   ! 1,,PR0
         3 000166   000002 316203                    CANQ  ! 2,DU
         3 000167   000176 601200 3                  TNZ   ! OOBINLINE

     2439     1974    5                       SOCK.OOB# = SOCK.OOB# + 1;

   1974  3 000170   000021 221300                    LDX1  ! 17,,PR0
         3 000171   000001 622211                    EAX2  ! 1,X1
         3 000172   000021 742300                    STX2  ! 17,,PR0

     2440     1975    5                       SOCK.FLAGS.SELEXCEP = '1'B;

   1975  3 000173   000010 236203                    LDQ   ! 8,DU
         3 000174   000001 256300                    ORSQ  ! 1,,PR0

     2441     1976    5                       END;

   1976  3 000175   000204 710200 3                  TRA   ! s:1982

     2442     1977    5                   ELSE DO;

     2443     1978    5   OOBINLINE:
     2444     1979    5                       SOCK.DAT# = SOCK.DAT# + 1;

   1979  3 000176   200007 470700       OOBINLINE    LDP0  ! SOCK$,,AUTO
         3 000177   000021 720300                    LXL0  ! 17,,PR0
         3 000200   000001 621210                    EAX1  ! 1,X0
         3 000201   000021 441300                    SXL1  ! 17,,PR0

     2445     1980    5                       SOCK.FLAGS.SELREAD = '1'B;

   1980  3 000202   000040 236203                    LDQ   ! 32,DU
         3 000203   000001 256300                    ORSQ  ! 1,,PR0

     2446     1981    5                       END;

PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:407  
     2447     1982    5                   IF MSGCODE = %RECVFROMRSP THEN DO;

   1982  3 000204   200006 220300                    LDX0  ! MSGCODE,,AUTO
         3 000205   000020 100203                    CMPX0 ! 16,DU
         3 000206   000242 601200 3                  TNZ   ! s:1991

     2448     1983    5                       IF ( DATABUF.KEY(2) ~= 255 AND DATABUF.KEY(3) ~= 255) AND

   1983  3 000207   200004 470700                    LDP0  ! EVENT#,,AUTO
         3 000210   000002 236300                    LDQ   ! 2,,PR0
         3 000211   777000 376207                    ANQ   ! -512,DL
         3 000212   377000 116207                    CMPQ  ! 130560,DL
         3 000213   000237 600200 3                  TZE   ! s:1989
         3 000214   000002 236300                    LDQ   ! 2,,PR0
         3 000215   000777 376207                    ANQ   ! 511,DL
         3 000216   000377 116207                    CMPQ  ! 255,DL
         3 000217   000237 600200 3                  TZE   ! s:1989
         3 000220   200010 756300                    STQ   ! SOCK$+1,,AUTO
         3 000221   000002 236300                    LDQ   ! 2,,PR0
         3 000222   000001 772200                    QRL   ! 1
         3 000223   377400 376207                    ANQ   ! 130816,DL
         3 000224   200010 036300                    ADLQ  ! SOCK$+1,,AUTO
         3 000225   000230 604200 3                  TMI   ! s:1985
         3 000226   000000 116200 xsym               CMPQ  ! XSL_BUFSIZE
         3 000227   000237 604600 3                  TMOZ  ! s:1989

     2449     1984    6                         ( DATABUF.KEY(2)*256 + DATABUF.KEY(3) > XSL_BUFSIZE) THEN DO;

     2450     1985    6                           SOCK.FLAGS.DRIP = '1'B;

   1985  3 000230   200007 471700                    LDP1  ! SOCK$,,AUTO
         3 000231   400000 236207                    LDQ   ! -131072,DL
         3 000232   100001 256300                    ORSQ  ! 1,,PR1

     2451     1986    6                           DATABUF.FLAGS.MORE = '1'B;

   1986  3 000233   200004 470700                    LDP0  ! EVENT#,,AUTO
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:408  
         3 000234   100000 236203                    LDQ   ! 32768,DU
         3 000235   000001 256300                    ORSQ  ! 1,,PR0

     2452     1987    6                           END;

   1987  3 000236   000242 710200 3                  TRA   ! s:1991

     2453     1988    5                       ELSE
     2454     1989    5                           SOCK.FLAGS.DRIP = '0'B;

   1989  3 000237   200007 471700                    LDP1  ! SOCK$,,AUTO
         3 000240   000003 236200 4                  LDQ   ! 3
         3 000241   100001 356300                    ANSQ  ! 1,,PR1

     2455     1990    5                       END;

     2456     1991    4                   EXIT SELECT_SUBC;

   1991  3 000242   000346 710200 3                  TRA   ! s:2020

     2457     1992    4                   END;
     2458     1993    3               IF ( MSGCODE = %SENDRSP OR MSGCODE = %SENDTORSP) AND

   1993  3 000243   000024 100203                    CMPX0 ! 20,DU
         3 000244   000247 600200 3                  TZE   ! s:1993+4
         3 000245   000026 100203                    CMPX0 ! 22,DU
         3 000246   000176 601200 3                  TNZ   ! OOBINLINE
         3 000247   100002 236300                    LDQ   ! 2,,PR1
         3 000250   777000 376207                    ANQ   ! -512,DL
         3 000251   377000 116207                    CMPQ  ! 130560,DL
         3 000252   000176 601200 3                  TNZ   ! OOBINLINE
         3 000253   100002 236300                    LDQ   ! 2,,PR1
         3 000254   000777 376207                    ANQ   ! 511,DL
         3 000255   000377 116207                    CMPQ  ! 255,DL
         3 000256   000176 601200 3                  TNZ   ! OOBINLINE

     2459     1994    4                 ( DATABUF.KEY(2) = 255 AND DATABUF.KEY(3) = 255) THEN DO;
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:409  

     2460     1995    4                   SOCK.FEPERROR = DATABUF.KEY(5);

   1995  3 000257   100003 236300                    LDQ   ! 3,,PR1
         3 000260   000022 772200                    QRL   ! 18
         3 000261   000001 552304                    STBQ  ! 1,'04'O,PR0

     2461     1996    4                   SOCK.BUFPND# = SOCK.BUFPND# - 1;

   1996  3 000262   200007 470700                    LDP0  ! SOCK$,,AUTO
         3 000263   000017 721300                    LXL1  ! 15,,PR0
         3 000264   777777 622211                    EAX2  ! -1,X1
         3 000265   000017 442300                    SXL2  ! 15,,PR0

     2462     1997    4   RELBUF:
     2463     1998    4                   CALL XSL$RELBUF( SOCK, DATABUF);

   1998  3 000266   200004 236300       RELBUF       LDQ   ! EVENT#,,AUTO
         3 000267   200007 235300                    LDA   ! SOCK$,,AUTO
         3 000270   200010 757300                    STAQ  ! SOCK$+1,,AUTO
         3 000271   200010 630700                    EPPR0 ! SOCK$+1,,AUTO
         3 000272   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000273   000000 701200 xent               TSX1  ! XSL$RELBUF
         3 000274   000000 011200                    NOP   ! 0

     2464     1999    4                   END;

   1999  3 000275   000346 710200 3                  TRA   ! s:2020

     2465     2000    3               ELSE
     2466     2001    3                   GOTO OOBINLINE;
     2467     2002    3               SELECT( %SUBC_COMIO#);

     2468     2003    3               SOCK$ = EVPTR$;

   2003  3 000276   200004 236300                    LDQ   ! EVENT#,,AUTO
         3 000277   200007 756300                    STQ   ! SOCK$,,AUTO
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:410  

     2469     2004    4               DO CASE( B$COMIO.SUBC2);

   2004  3 000300   200005 471700                    LDP1  ! EXCFR$,,AUTO
         3 000301   100104 721300                    LXL1  ! 68,,PR1
         3 000302   000777 361203                    ANX1  ! 511,DU
         3 000303   000003 101203                    CMPX1 ! 3,DU
         3 000304   000306 602211 3                  TNC   ! s:2004+6,X1
         3 000305   000346 710200 3                  TRA   ! s:2020
         3 000306   000346 710200 3                  TRA   ! s:2020
         3 000307   000311 710200 3                  TRA   ! s:2006
         3 000310   000333 710200 3                  TRA   ! s:2013

     2470     2005    4                   CASE( %SUBC2_DATA_RQS#);

     2471     2006    4                       CALL XSL$EVLOG( 'RQ', EVPTR$);

   2006  3 000311   200004 633700                    EPPR3 ! EVENT#,,AUTO
         3 000312   200011 453700                    STP3  ! SOCK$+2,,AUTO
         3 000313   000004 236200 4                  LDQ   ! 4
         3 000314   200010 756300                    STQ   ! SOCK$+1,,AUTO
         3 000315   200010 630700                    EPPR0 ! SOCK$+1,,AUTO
         3 000316   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000317   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000320   000000 011200                    NOP   ! 0

     2472     2007    4                       IF SOCK.RCRBYTSIZ = 0 THEN

   2007  3 000321   200007 470700                    LDP0  ! SOCK$,,AUTO
         3 000322   000017 220300                    LDX0  ! 15,,PR0
         3 000323   000330 601200 3                  TNZ   ! s:2010

     2473     2008    4                           SOCK.RCRBYTSIZ = B$COMIO.ARS;

   2008  3 000324   200005 471700                    LDP1  ! EXCFR$,,AUTO
         3 000325   100105 721300                    LXL1  ! 69,,PR1
         3 000326   000017 741300                    STX1  ! 15,,PR0
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:411  
         3 000327   000346 710200 3                  TRA   ! s:2020

     2474     2009    4                       ELSE
     2475     2010    4                           SOCK.FLAGS.SELWRITE = '1'B;

   2010  3 000330   000020 236203                    LDQ   ! 16,DU
         3 000331   000001 256300                    ORSQ  ! 1,,PR0
         3 000332   000346 710200 3                  TRA   ! s:2020

     2476     2011    4                   CASE( %SUBC2_DATA_AVL#);

     2477     2012                                /* FEP wants to send RSP but no reads pending */
     2478     2013    4                       CALL XSL$EVLOG( 'AV', EVPTR$);

   2013  3 000333   200004 633700                    EPPR3 ! EVENT#,,AUTO
         3 000334   200011 453700                    STP3  ! SOCK$+2,,AUTO
         3 000335   000005 236200 4                  LDQ   ! 5
         3 000336   200010 756300                    STQ   ! SOCK$+1,,AUTO
         3 000337   200010 630700                    EPPR0 ! SOCK$+1,,AUTO
         3 000340   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000341   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000342   000000 011200                    NOP   ! 0

     2479     2014        /* leave this out..     IF SOCK.FLAGS.MUSTREAD AND SOCK.MAXRDS ~= 0 THEN
     2480     2015           for now.  proxy sends..  IF NOT SOCK.FLAGS.DRIP THEN
     2481     2016           multiple AVLs.               CALL M$SCREECH( FPT_SCREECH);  */
     2482     2017    4                       SOCK.FLAGS.MUSTREAD = '1'B;

   2017  3 000343   200007 470700                    LDP0  ! SOCK$,,AUTO
         3 000344   000001 236203                    LDQ   ! 1,DU
         3 000345   000001 256300                    ORSQ  ! 1,,PR0

     2483     2018    4                   END;

     2484     2019    3               END;

     2485     2020    2           RETURN;
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:412  

   2020  3 000346   000000 702200 xent               TSX2  ! X66_ARET

     2486     2021    2           END;

     2487     2022
     2488     2023    1   END XSL$EVENT;

   2023  3 000347   000000 702200 xent               TSX2  ! X66_ARET

FPT_SCREECH
 Sect OctLoc
   1     000   000001 777640   000006 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014                                    ........

VLP_SUA
 Sect OctLoc
   1     006   302314 634175   001160 107760                                    ...}.pG.

SET_EXMM
 Sect OctLoc
   1     010   000001 777640   000012 006000   000000 000002   000000 000000    ................

(unnamed)
 Sect OctLoc
   1     014   105126 040040   105122 040040   122121 040040   101126 040040    EV  ER  RQ  AV

ERRCODE
 Sect OctLoc
   2     000   000000 000000                                                    ....

(unnamed)
 Sect OctLoc
   4     000   000014 006000   000015 006000   000000 006000   777777 377777    ................
   4     004   000016 006000   000017 006000                                    ........
     2489     2024        %EOD;

PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:413  
--  Include file information  --

   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$EVENT.
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:414  

 **** Variables and constants ****

  ****  Section 001 RoData XSL$EVENT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 FPT_SCREECH               10-0-0/d STRC(144)   r     1 SET_EXMM
     6-0-0/d STRC(72)    r     1 VLP_SUA

  ****  Section 002  Data  XSL$EVENT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 ERRCODE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @B$EXCFR                  *0-0-0/w STRC(2448)  r     1 B$EXCFR
     4-0-0/w SBIN        r     1 EVENT#                     4-0-0/w PTR         r     1 EVPTR$
     5-0-0/w PTR         r     1 EXCFR$                     6-0-0/w SBIN(18)    r     1 MSGCODE
     7-0-0/w PTR         r     1 SOCK$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w SBIN        r     1 XSL_BUFSIZE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:415  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2520)  r     1 B$COMIO                    0-0-0/w STRC(2880)  r     1 B$NWIO
     0-0-0/w PTR         r     1 B$PTR                      0-0-0/w STRC(360)   r     1 DATABUF
     0-0-0/w STRC(720)   r     1 SOCK


   Procedure XSL$EVENT requires 232 words for executable code.
   Procedure XSL$EVENT requires 10 words of local(AUTO) storage.
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:416  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:417  
          MINI XREF LISTING

B$COMIO.ARS
       389**DCL       389--REDEF    2008>>ASSIGN
B$COMIO.CODE
       382**DCL       382--REDEF     383--REDEF     383--REDEF
B$COMIO.ERR.ERR#
       384**DCL       384--REDEF
B$COMIO.EVID
       383**DCL       383--REDEF     383--REDEF
B$COMIO.SUBC2
       389**DCL      2004>>DOCASE
B$EXCFR
       393**DCL         6--PROC     1939--ASSIGN
B$EXCFR.ASL
       393**DCL       393--REDEF
B$EXCFR.ERR
       407**DCL      1954>>ASSIGN
B$EXCFR.ERR.ERR#
       407**DCL       407--REDEF
B$EXCFR.EVID
       406**DCL       406--REDEF     407--REDEF    1938>>ASSIGN
B$EXCFR.IR
       394**DCL       394--REDEF
B$EXCFR.PREVSZ
       393**DCL       393--REDEF
B$EXCFR.SUBC
       405**DCL       405--REDEF     406--REDEF     406--REDEF    1941>>DOSELCT
B$JIT.CPFLAGS1.SLEAZE
       196**DCL       196--REDEF
B$JIT.ERR.MID
       103**DCL       103--REDEF
B$JIT.JRESPEAK
       264**DCL       265--REDEF
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:418  
B$JIT.ORIGINATOR_PORT.FROM_CR
       373**DCL       373--REDEF     374--REDEF
B$JIT.PNR
       277**DCL       277--REDEF
B$JIT.TSLINE
       371**DCL       372--REDEF
B$JIT$
       378**DCL        97--IMP-PTR
B$NWIO.ARS
       467**DCL      1952>>ASSIGN
B$NWIO.CGPARM.MSGIDXT
       491**DCL       494--REDEF
B$NWIO.CODE
       460**DCL       460--REDEF     461--REDEF     461--REDEF
B$NWIO.ERR.ERR#
       462**DCL       462--REDEF
B$NWIO.EVID
       461**DCL       461--REDEF     461--REDEF
B$NWIO.IOERRCODE
       510**DCL      1953>>ASSIGN
B$NWIO.TYC
       467**DCL      1966>>IF
B$PTR
      1929**DCL      1949>>ASSIGN
DATABUF
      1716**DCL      1951--ASSIGN   1998<>CALL
DATABUF.FLAGS.BUSY
      1726**DCL      1944>>IF       1950<<ASSIGN
DATABUF.FLAGS.MORE
      1728**DCL      1986<<ASSIGN
DATABUF.FLAGS.OOB
      1727**DCL      1972<<ASSIGN
DATABUF.KEY
      1730**DCL      1962<<ASSIGN   1963<<ASSIGN   1968>>ASSIGN   1970>>IF       1970>>IF       1970>>IF
      1983>>IF       1983>>IF       1983>>IF       1983>>IF       1993>>IF       1993>>IF       1995>>ASSIGN
DATABUF.LEN
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:419  
      1724**DCL      1952<<ASSIGN   1961<<ASSIGN
DATABUF.START
      1723**DCL      1951<<ASSIGN
ERRCODE
       639**DCL      1953<<ASSIGN   1954>>IF       1954<<ASSIGN   1955>>IF       1957<>CALL     1960>>ASSIGN
EVENT#
      1930**DCL      1931--REDEF    1938<<ASSIGN
EVPTR$
      1931**DCL      1716--IMP-PTR  1943<>CALL     1944>>IF       1949>>ASSIGN   1950>>ASSIGN   1951>>ASSIGN
      1952>>ASSIGN   1961>>ASSIGN   1962>>ASSIGN   1963>>ASSIGN   1968>>ASSIGN   1970>>IF       1970>>IF
      1970>>IF       1972>>ASSIGN   1983>>IF       1983>>IF       1983>>IF       1983>>IF       1986>>ASSIGN
      1993>>IF       1993>>IF       1995>>ASSIGN   1998>>CALL     2003>>ASSIGN   2006<>CALL     2013<>CALL
EXCFR$
      1932**DCL       382--IMP-PTR   460--IMP-PTR  1939<<ASSIGN   1952>>ASSIGN   1953>>ASSIGN   1966>>IF
      2004>>DOCASE   2008>>ASSIGN
FPT_SCREECH
       553**DCL      1947<>CALL
M$SCREECH
        30**DCL-ENT  1947--CALL
M$SPRIV
        75**DCL-ENT  1946--CALL
MSGCODE
      1933**DCL      1968<<ASSIGN   1969>>IF       1969>>IF       1982>>IF       1993>>IF       1993>>IF
OOBINLINE
      1979**LABEL    1973--GOTO     2001--GOTO
RELBUF
      1998**LABEL    1958--GOTO     1966--GOTO
SELECT_SUBC
      1941**LABEL    1991--EXIT
SET_EXMM
       683**DCL      1946<>CALL
SET_EXMM.V
       683**DCL       683--DCLINIT
SOCK
      1750**DCL      1998<>CALL
SOCK.BUFPND#
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:420  
      1867**DCL      1967<<ASSIGN   1967>>ASSIGN   1996<<ASSIGN   1996>>ASSIGN
SOCK.CP6ERROR
      1873**DCL      1960<<ASSIGN
SOCK.DAT#
      1871**DCL      1979<<ASSIGN   1979>>ASSIGN
SOCK.FEPERROR
      1781**DCL      1995<<ASSIGN
SOCK.FLAGS.CP6ERR
      1780**DCL      1958>>IF       1959<<ASSIGN
SOCK.FLAGS.DRIP
      1779**DCL      1985<<ASSIGN   1989<<ASSIGN
SOCK.FLAGS.MUSTREAD
      1778**DCL      2017<<ASSIGN
SOCK.FLAGS.OOBINLINE
      1777**DCL      1973>>IF
SOCK.FLAGS.SELEXCEP
      1775**DCL      1975<<ASSIGN
SOCK.FLAGS.SELREAD
      1773**DCL      1980<<ASSIGN
SOCK.FLAGS.SELWRITE
      1774**DCL      2010<<ASSIGN
SOCK.NBACCEPT_SOCK$
      1872**DCL      1873--REDEF
SOCK.OOB#
      1870**DCL      1974<<ASSIGN   1974>>ASSIGN
SOCK.RCRBYTSIZ
      1866**DCL      2007>>IF       2008<<ASSIGN
SOCK$
      1934**DCL      1750--IMP-PTR  1949<<ASSIGN   1956<>CALL     1958>>IF       1959>>ASSIGN   1960>>ASSIGN
      1967>>ASSIGN   1967>>ASSIGN   1973>>IF       1974>>ASSIGN   1974>>ASSIGN   1975>>ASSIGN   1979>>ASSIGN
      1979>>ASSIGN   1980>>ASSIGN   1985>>ASSIGN   1989>>ASSIGN   1995>>ASSIGN   1996>>ASSIGN   1996>>ASSIGN
      1998>>CALL     2003<<ASSIGN   2007>>IF       2008>>ASSIGN   2010>>ASSIGN   2017>>ASSIGN
VLP_SUA
       580**DCL       553--DCLINIT
XSL$EVLOG
      1924**DCL-ENT  1943--CALL     1956--CALL     1957--CALL     2006--CALL     2013--CALL
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:421  
XSL$RELBUF
      1923**DCL-ENT  1998--CALL
XSL_BUFSIZE
      1927**DCL      1983>>IF
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:422  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:423  
              MINI UREF LISTING

M$ACCT      33**DCL-ENT
M$ACTIVATE      36**DCL-ENT
M$ALIB      29**DCL-ENT
M$ASUSER      31**DCL-ENT
M$ATTACH      38**DCL-ENT
M$BADPP      56**DCL-ENT
M$CGCTL      37**DCL-ENT
M$CGINFO      37**DCL-ENT
M$CHECK      18**DCL-ENT
M$CHGUNIT      76**DCL-ENT
M$CLOSE      16**DCL-ENT
M$CLRSTK      74**DCL-ENT
M$CMDVAR      85**DCL-ENT
M$CONFIG      46**DCL-ENT
M$CORRES      21**DCL-ENT
M$CPEXIT      30**DCL-ENT
M$CVM      54**DCL-ENT
M$CVOL      19**DCL-ENT
M$DCLFLD      46**DCL-ENT
M$DEACTIVATE      36**DCL-ENT
M$DELREC      18**DCL-ENT
M$DEQ      83**DCL-ENT
M$DETACH      38**DCL-ENT
M$DEVICE      20**DCL-ENT
M$DISPLAY      83**DCL-ENT
M$DISPRES      23**DCL-ENT
M$DLIB      29**DCL-ENT
M$DRIBBLE      46**DCL-ENT
M$DRTN      74**DCL-ENT
M$DSUSER      31**DCL-ENT
M$ENQ      82**DCL-ENT
M$EOM      41**DCL-ENT
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:424  
M$ERASE      47**DCL-ENT
M$ERR      28**DCL-ENT
M$ERRMSG      79**DCL-ENT
M$EVENT      71**DCL-ENT
M$EXHUME      80**DCL-ENT
M$EXIT      28**DCL-ENT
M$EXTEND      20**DCL-ENT
M$FDP      52**DCL-ENT
M$FDS      51**DCL-ENT
M$FEBOOT      44**DCL-ENT
M$FECTL      45**DCL-ENT
M$FEDUMP      44**DCL-ENT
M$FID      79**DCL-ENT
M$FINDPROC      33**DCL-ENT
M$FSUSER      31**DCL-ENT
M$FVP      53**DCL-ENT
M$FWCG      37**DCL-ENT
M$GBPL      57**DCL-ENT
M$GDDL      53**DCL-ENT
M$GDP      52**DCL-ENT
M$GDS      51**DCL-ENT
M$GETDCB      22**DCL-ENT
M$GETMOUSE      62**DCL-ENT
M$GETPM      63**DCL-ENT
M$GJOB      81**DCL-ENT
M$GLINEATTR      41**DCL-ENT
M$GOODPP      56**DCL-ENT
M$GPLATEN      49**DCL-ENT
M$GPROMPT      48**DCL-ENT
M$GTRMATTR      42**DCL-ENT
M$GTRMCTL      40**DCL-ENT
M$GTRMTAB      43**DCL-ENT
M$GVP      52**DCL-ENT
M$HELP      79**DCL-ENT
M$INT      71**DCL-ENT
M$INTRTN      32**DCL-ENT
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:425  
M$IOQ      67**DCL-ENT
M$JOBSTATS      81**DCL-ENT
M$KEYIN      21**DCL-ENT
M$LDEV      16**DCL-ENT
M$LDTRC      29**DCL-ENT
M$LIMIT      22**DCL-ENT
M$LINES      21**DCL-ENT
M$LINK      28**DCL-ENT
M$MADMUCK      24**DCL-ENT
M$MAKUSER      55**DCL-ENT
M$MBS      23**DCL-ENT
M$MDFFLD      47**DCL-ENT
M$MERC      72**DCL-ENT
M$MERCS      73**DCL-ENT
M$MIRROR      67**DCL-ENT
M$MONINFO      84**DCL-ENT
M$MPL      57**DCL-ENT
M$NODEINFO      48**DCL-ENT
M$NXTUSR      82**DCL-ENT
M$OCMSG      80**DCL-ENT
M$OLAY      28**DCL-ENT
M$OPEN      16**DCL-ENT
M$PAS      57**DCL-ENT
M$PATHCON      80**DCL-ENT
M$PDS      51**DCL-ENT
M$PFIL      18**DCL-ENT
M$PLATEN      42**DCL-ENT
M$PRECORD      20**DCL-ENT
M$PROCNAME      33**DCL-ENT
M$PROFILE      44**DCL-ENT
M$PROMPT      40**DCL-ENT
M$RACST      24**DCL-ENT
M$RDSYSLOG      65**DCL-ENT
M$READ      17**DCL-ENT
M$RELDCB      22**DCL-ENT
M$RELRES      23**DCL-ENT
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:426  
M$RELSTARF      25**DCL-ENT
M$REM      25**DCL-ENT
M$RENV      72**DCL-ENT
M$REQUIRE      24**DCL-ENT
M$RETRY      73**DCL-ENT
M$RETRYS      73**DCL-ENT
M$REW      19**DCL-ENT
M$RLSFLD      47**DCL-ENT
M$RPRIV      75**DCL-ENT
M$RSPP      54**DCL-ENT
M$RSWITCH      76**DCL-ENT
M$RUE      82**DCL-ENT
M$SAD      55**DCL-ENT
M$SAVE      31**DCL-ENT
M$SCON      32**DCL-ENT
M$SENV      72**DCL-ENT
M$SETFMA      16**DCL-ENT
M$SETFP      45**DCL-ENT
M$SINPUT      43**DCL-ENT
M$SLCFLD      48**DCL-ENT
M$SMOUSE      62**DCL-ENT
M$SMPRT      54**DCL-ENT
M$SSC      55**DCL-ENT
M$SSWITCH      75**DCL-ENT
M$STATE      84**DCL-ENT
M$STD      56**DCL-ENT
M$STIMER      70**DCL-ENT
M$STLPP      53**DCL-ENT
M$STRAP      70**DCL-ENT
M$STRMATTR      42**DCL-ENT
M$STRMCTL      40**DCL-ENT
M$STRMTAB      43**DCL-ENT
M$SYMBIO      81**DCL-ENT
M$SYSCON      67**DCL-ENT
M$SYSID      85**DCL-ENT
M$TDCLOSE      66**DCL-ENT
PL6.E3A0      #013=XSL$EVENT File=XSL$SOCKET1.:TCA2TSI                           SUN 11/16/97 14:37 Page:427  
M$TDIO      66**DCL-ENT
M$TDOPEN      65**DCL-ENT
M$TDREQCPU      66**DCL-ENT
M$TEMPWROC      60**DCL-ENT
M$TIME      83**DCL-ENT
M$TRAP      70**DCL-ENT
M$TRMISC      45**DCL-ENT
M$TRMPRG      41**DCL-ENT
M$TRTN      74**DCL-ENT
M$TRUNC      17**DCL-ENT
M$TTIMER      70**DCL-ENT
M$UC      40**DCL
M$UMPL      57**DCL-ENT
M$UNFID      79**DCL-ENT
M$UNLATCH      36**DCL-ENT
M$UNSHARE      33**DCL-ENT
M$USRFIELD      76**DCL-ENT
M$VIRTUAL      51**DCL-ENT
M$WAIT      74**DCL-ENT
M$WEOF      19**DCL-ENT
M$WRITE      17**DCL-ENT
M$WRSYSLOG      65**DCL-ENT
M$XCON      71**DCL-ENT
M$XCONRTN      32**DCL-ENT
M$XEQTIME      84**DCL-ENT
M$XFLUSH      25**DCL-ENT
M$XMOUSE      62**DCL-ENT
M$XXX      28**DCL-ENT
M$YC      30**DCL-ENT
XSL$EVENT       6**PROC
XSL_SOCK$$    1926**DCL

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:428  
     2490        1        /*T***********************************************************/
     2491        2        /*T*                                                         */
     2492        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2493        4        /*T*                                                         */
     2494        5        /*T***********************************************************/
     2495        6        XSL$BUFMGMT: PROC( SOCK, BUF) ALTRET;
     2496        7        %INCLUDE CP_6;
     2497       88            %F$DCB;
     2498      145            %B$ALT;
     2499      153            %B$TCB;
     2500      156            %FPT_READ( STCLASS=STATIC, KEYS=YES, KEYR=YES, WAIT=NO);
     2501      195        %INCLUDE XSL_SOCKET_E;
     2502      453        %INCLUDE XSL_SOCKET_M;
     2503     1214        %INCLUDE XSL_INTERNAL_M;
     2504     1465            %XSL$DATABUF( FPTN=BUF, STCLASS=);
     2505     1498            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( BUF$)");
     2506     1531            %XSL$SOCKINFO( FPTN=SOCK, STCLASS=);
     2507     1675            %XSL$SOCKHD( STCLASS="BASED( XSL_SOCK$$)");
     2508     1708        %INCLUDE XSL_SOCKMSGS_E;
     2509     1754        %INCLUDE XSL_SOCKMSGS_M;
     2510     2887            %XSL_REFMSGS;
     2511     2890            %XSL$RECVRQS( FPTN=XSL_RECVRQS, STCLASS=SYMREF);
     2512     2917            %XSL$RECVRQS( STCLASS="BASED( KEY$)");
     2513     2944            %XSL$RECVFROMRQS( FPTN=XSL_RECVFROMRQS, STCLASS=SYMREF);
     2514     2972            %XSL$RECVFROMRQS( STCLASS="BASED( KEY$)");
     2515     3000
     2516     3001    1       DCL XSL$EVLOG ENTRY(2);
     2517     3002
     2518     3003    1       DCL B$TCB$ PTR SYMREF READONLY;
     2519     3004
     2520     3005    1       DCL XSL_BUFSIZE SBIN SYMREF;
     2521     3006    1       DCL XSL_SOCK$$ PTR SYMREF;
     2522     3007
     2523     3008    1       DCL B$CHARS CHAR( LEN) BASED CALIGNED;
     2524     3009    1       DCL B$PTR PTR BASED;
     2525     3010    1       DCL BUF$ PTR;
     2526     3011    1       DCL BUFX SBIN;
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:429  
     2527     3012    1       DCL KEY$ PTR;
     2528     3013    1       DCL KEYS BIT(1) UNAL;
     2529     3014    1       DCL LEN SBIN;
     2530     3015    1       DCL TMPX SBIN;
     2531     3016
     2532     3017    1   XSL$RELBUF: ENTRY( SOCK, BUF) ALTRET;
     2533     3018
     2534     3019    2       DO INHIBIT;
     2535     3020    2           BUF$ = ADDR( BUF);
     2536     3021    2           BUFX = POFFW( BUF$, XSL_SOCK$$);
     2537     3022    2           CALL XSL$EVLOG( 'RB', BUFX*262144);
     2538     3023    2           TMPX = SOCK.BUFHD;
     2539     3024    3           IF TMPX = BUFX THEN DO;
     2540     3025    3               IF BUFX = SOCK.BUFTL THEN
     2541     3026    3                   SOCK.BUFTL = 0;
     2542     3027    3               SOCK.BUFHD = DATABUF.NXT;
     2543     3028    3               END;
     2544     3029    2           ELSE
     2545     3030    3               IF TMPX = SOCK.BUFTL THEN DO;
     2546     3031    3                   SOCK.BUFTL = 0;
     2547     3032    3                   SOCK.BUFHD = 0;
     2548     3033    3                   END;
     2549     3034    2               ELSE
     2550     3035    3               DO WHILE( TMPX ~= 0);
     2551     3036    4                   IF PINCRW( XSL_SOCK$$, TMPX)->DATABUF.NXT = BUFX THEN DO;
     2552     3037    4                       PINCRW( XSL_SOCK$$, TMPX)->DATABUF.NXT = DATABUF.NXT;
     2553     3038    4                       IF SOCK.BUFTL = BUFX THEN
     2554     3039    4                           SOCK.BUFTL = TMPX;
     2555     3040    4                       TMPX = 0;
     2556     3041    4                       END;
     2557     3042    3                   ELSE
     2558     3043    3                       TMPX = PINCRW( XSL_SOCK$$, TMPX)->DATABUF.NXT;
     2559     3044    3                   END;
     2560     3045    2           IF SOCK.FLAGS.REUSEBUF AND SOCK.BUFPND# <= SOCK.MAXBUF AND
     2561     3046    3             DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) < SOCK.MAXRDS THEN DO;
     2562     3047    3               KEYS = '0'B;
     2563     3048    3   COMMON:
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:430  
     2564     3049    3               DATABUF = '0'B;
     2565     3050    3               DATABUF.FLAGS.BUSY = '1'B;
     2566     3051                /*  DATABUF.NXT = 0;  superfluous */
     2567     3052    3               IF SOCK.BUFTL ~= 0 THEN
     2568     3053    3                   PINCRW( XSL_SOCK$$, SOCK.BUFTL)->DATABUF.NXT = BUFX;
     2569     3054    3               SOCK.BUFTL = BUFX;
     2570     3055    3               IF SOCK.BUFHD = 0 THEN
     2571     3056    3                   SOCK.BUFHD = BUFX;
     2572     3057    3               BUF$->B$PTR = ADDR( SOCK);
     2573     3058    3               KEY$ = ADDR( DATABUF.KEY);
     2574     3059    4               IF KEYS THEN DO;
     2575     3060                        /* use supplied RQS rather than RECVRQS/RECVFROMRQS */
     2576     3061    4                   LEN = 32;
     2577     3062    4                   KEY$->B$CHARS = ADDR( BUF)->B$CHARS;
     2578     3063    4                   LEN = XSL_BUFSIZE;
     2579     3064    4                   END;
     2580     3065    4               ELSE DO;
     2581     3066                        /* issue RECVFROMRQS or RECVRQS as appropriate */
     2582     3067    4                   LEN = XSL_BUFSIZE;
     2583     3068    5                   IF SOCK.TYPE = %XSL_SOCK_DGRAM THEN DO;
     2584     3069    5                       XSL$RECVFROMRQS = XSL_RECVFROMRQS;
     2585     3070    5                       XSL$RECVFROMRQS.LEN = 512*(9000/256) + MOD(9000,256);
     2586     3071    5                       XSL$RECVFROMRQS.FROMLEN = 32 - SIZEC( XSL$RECVFROMRQS);
     2587     3072    5                       IF SOCK.FLAGS.DRIP THEN
     2588     3073    5                           XSL$RECVFROMRQS.FLAGS = %XSL_MSG_MORE;
     2589     3074    5                       END;
     2590     3075    5                   ELSE DO;
     2591     3076    5                       XSL$RECVRQS = XSL_RECVRQS;
     2592     3077    5                       XSL$RECVRQS.LEN = 512*(LEN/256) + MOD(LEN,256);
     2593     3078    5                       END;
     2594     3079    4                   END;
     2595     3080    3               FPT_READ.BUF_ = VECTOR(
     2596     3081    3                 PINCRC( ADDR( DATABUF), SIZEC( DATABUF))->B$CHARS);
     2597     3082    3               FPT_READ.KEY_ = VECTOR( DATABUF.KEY);
     2598     3083    3               FPT_READ.V.DCB# = SOCK.DCB#;
     2599     3084    3               ADDR( FPT_READ.V.EVENT#)->B$PTR = BUF$;
     2600     3085    3               SOCK.FLAGS.MUSTREAD = '0'B;
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:431  
     2601     3086    3               CALL XSL$EVLOG( 'NW', BUF$);
     2602     3087    3               CALL M$READ( FPT_READ) ALTRET( OOPS);
     2603     3088    3               END;
     2604     3089    3           ELSE DO;
     2605     3090    3               DATABUF.NXT = XSL$SOCKHD.BUFHD;
     2606     3091    3               XSL$SOCKHD.BUFHD = BUFX;
     2607     3092    3               IF XSL$SOCKHD.BUFTL = 0 THEN
     2608     3093    3                   XSL$SOCKHD.BUFTL = XSL$SOCKHD.BUFHD;
     2609     3094    3               END;
     2610     3095    2           RETURN;
     2611     3096    2   OOPS:
     2612     3097    2           CALL XSL$EVLOG( 'ER', BUF$);
     2613     3098    3           IF BUF$ ~= ADDR( NIL) THEN DO;
     2614     3099    3               CALL XSL$EVLOG( , B$TCB$->B$TCB.ALT$->B$ALT.ERR);
     2615     3100    3               DATABUF.FLAGS.BUSY = '0'B;
     2616     3101    3               END;
     2617     3102    2           ALTRETURN;
     2618     3103    2           END;
     2619     3104
     2620     3105    1   XSL$GETBUF: ENTRY( SOCK, BUF) ALTRET;
     2621     3106
     2622     3107    2       DO INHIBIT;
     2623     3108    2           BUF$ = ADDR( NIL);
     2624     3109    2           IF XSL$SOCKHD.BUFHD = 0 THEN
     2625     3110    2               GOTO OOPS;  /* can't extend segment yet.. */
     2626     3111    2           BUFX = XSL$SOCKHD.BUFHD;
     2627     3112    2           CALL XSL$EVLOG( 'GB', BUFX*262144);
     2628     3113    2           BUF$ = PINCRW( XSL_SOCK$$, BUFX);
     2629     3114    2           XSL$SOCKHD.BUFHD = BUF$->DATABUF.NXT;
     2630     3115    2           IF XSL$SOCKHD.BUFHD = 0 THEN
     2631     3116    2               XSL$SOCKHD.BUFTL = 0;  /* no more buffers */
     2632     3117    2           IF ADDR( BUF) = ADDR( NIL) THEN
     2633     3118    2               KEYS = '0'B;
     2634     3119    2           ELSE
     2635     3120    2               KEYS = '1'B;
     2636     3121    2           GOTO COMMON;
     2637     3122    2           END;
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:432  
     2638     3123
     2639     3124    1   END XSL$BUFMGMT;

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:433  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$BUFMGMT.

   Procedure XSL$BUFMGMT requires 275 words for executable code.
   Procedure XSL$BUFMGMT requires 16 words of local(AUTO) storage.

    No errors detected in file XSL$SOCKET1.:TCA2TSI    .

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:434  

 Object Unit name= XSL$BUFMGMT                                File name= XSL$SOCKET1.:TCA2TOU
 UTS= NOV 16 '97 14:38:17.16 SUN                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    14     16  XSL$BUFMGMT
    2  RoData even  UTS      4      4  XSL$BUFMGMT
    3   Proc  even  none   275    423  XSL$BUFMGMT
    4  RoData even  none     7      7  XSL$BUFMGMT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        2  XSL$BUFMGMT
     3      3          yes     yes      Std        2  XSL$RELBUF
     3    350          yes     yes      Std        2  XSL$GETBUF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 XSL$MSGSDEFS
         yes           Std       2 XSL$EVLOG
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:435  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  XSL_RECVRQS                           XSL_RECVFROMRQS
r    B$TCB$                                XSL_BUFSIZE                           XSL_SOCK$$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:436  


     2490        1        /*T***********************************************************/
     2491        2        /*T*                                                         */
     2492        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2493        4        /*T*                                                         */
     2494        5        /*T***********************************************************/
     2495        6        XSL$BUFMGMT: PROC( SOCK, BUF) ALTRET;

      6  3 000000   000000 700200 xent  XSL$BUFMGMT  TSX0  ! X66_AUTO_2
         3 000001   000020 000002                    ZERO    16,2
         3 000002   000005 710000 3                  TRA     s:3020

     2496        7        %INCLUDE CP_6;
     2497       88            %F$DCB;
     2498      145            %B$ALT;
     2499      153            %B$TCB;
     2500      156            %FPT_READ( STCLASS=STATIC, KEYS=YES, KEYR=YES, WAIT=NO);
     2501      195        %INCLUDE XSL_SOCKET_E;
     2502      453        %INCLUDE XSL_SOCKET_M;
     2503     1214        %INCLUDE XSL_INTERNAL_M;
     2504     1465            %XSL$DATABUF( FPTN=BUF, STCLASS=);
     2505     1498            %XSL$DATABUF( FPTN=DATABUF, STCLASS="BASED( BUF$)");
     2506     1531            %XSL$SOCKINFO( FPTN=SOCK, STCLASS=);
     2507     1675            %XSL$SOCKHD( STCLASS="BASED( XSL_SOCK$$)");
     2508     1708        %INCLUDE XSL_SOCKMSGS_E;
     2509     1754        %INCLUDE XSL_SOCKMSGS_M;
     2510     2887            %XSL_REFMSGS;
     2511     2890            %XSL$RECVRQS( FPTN=XSL_RECVRQS, STCLASS=SYMREF);
     2512     2917            %XSL$RECVRQS( STCLASS="BASED( KEY$)");
     2513     2944            %XSL$RECVFROMRQS( FPTN=XSL_RECVFROMRQS, STCLASS=SYMREF);
     2514     2972            %XSL$RECVFROMRQS( STCLASS="BASED( KEY$)");
     2515     3000
     2516     3001    1       DCL XSL$EVLOG ENTRY(2);
     2517     3002
     2518     3003    1       DCL B$TCB$ PTR SYMREF READONLY;
     2519     3004
     2520     3005    1       DCL XSL_BUFSIZE SBIN SYMREF;
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:437  
     2521     3006    1       DCL XSL_SOCK$$ PTR SYMREF;
     2522     3007
     2523     3008    1       DCL B$CHARS CHAR( LEN) BASED CALIGNED;
     2524     3009    1       DCL B$PTR PTR BASED;
     2525     3010    1       DCL BUF$ PTR;
     2526     3011    1       DCL BUFX SBIN;
     2527     3012    1       DCL KEY$ PTR;
     2528     3013    1       DCL KEYS BIT(1) UNAL;
     2529     3014    1       DCL LEN SBIN;
     2530     3015    1       DCL TMPX SBIN;
     2531     3016
     2532     3017    1   XSL$RELBUF: ENTRY( SOCK, BUF) ALTRET;

   3017  3 000003   000000 700200 xent  XSL$RELBUF   TSX0  ! X66_AUTO_2
         3 000004   000020 000002                    ZERO    16,2

     2533     3018
     2534     3019    2       DO INHIBIT;

     2535     3020    2           BUF$ = ADDR( BUF);

   3020  3 000005   200004 236300                    LDQ   ! @BUF,,AUTO
         3 000006   200005 756300                    STQ   ! BUF$,,AUTO

     2536     3021    2           BUFX = POFFW( BUF$, XSL_SOCK$$);

   3021  3 000007   000000 235200 xsym               LDA   ! XSL_SOCK$$
         3 000010   000022 771200                    ARL   ! 18
         3 000011   200014 755300                    STA   ! TMPX+2,,AUTO
         3 000012   200005 236300                    LDQ   ! BUF$,,AUTO
         3 000013   000022 772200                    QRL   ! 18
         3 000014   200014 136300                    SBLQ  ! TMPX+2,,AUTO
         3 000015   200006 756300                    STQ   ! BUFX,,AUTO

     2537     3022    2           CALL XSL$EVLOG( 'RB', BUFX*262144);

   3022  3 000016   200006 235300                    LDA   ! BUFX,,AUTO
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:438  
         3 000017   000022 735200                    ALS   ! 18
         3 000020   200014 755300                    STA   ! TMPX+2,,AUTO
         3 000021   200014 630700                    EPPR0 ! TMPX+2,,AUTO
         3 000022   200017 450700                    STP0  ! TMPX+5,,AUTO
         3 000023   000000 236200 4                  LDQ   ! 0
         3 000024   200016 756300                    STQ   ! TMPX+4,,AUTO
         3 000025   200016 630700                    EPPR0 ! TMPX+4,,AUTO
         3 000026   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000027   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000030   000000 011200                    NOP   ! 0

     2538     3023    2           TMPX = SOCK.BUFHD;

   3023  3 000031   200003 470700                    LDP0  ! @SOCK,,AUTO
         3 000032   000016 236300                    LDQ   ! 14,,PR0
         3 000033   000022 772200                    QRL   ! 18
         3 000034   200012 756300                    STQ   ! TMPX,,AUTO

     2539     3024    3           IF TMPX = BUFX THEN DO;

   3024  3 000035   200006 116300                    CMPQ  ! BUFX,,AUTO
         3 000036   000051 601200 3                  TNZ   ! s:3030

     2540     3025    3               IF BUFX = SOCK.BUFTL THEN

   3025  3 000037   000016 236300                    LDQ   ! 14,,PR0
         3 000040   777777 376207                    ANQ   ! -1,DL
         3 000041   200006 116300                    CMPQ  ! BUFX,,AUTO
         3 000042   000045 601200 3                  TNZ   ! s:3027

     2541     3026    3                   SOCK.BUFTL = 0;

   3026  3 000043   000000 220203                    LDX0  ! 0,DU
         3 000044   000016 440300                    SXL0  ! 14,,PR0

     2542     3027    3               SOCK.BUFHD = DATABUF.NXT;

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:439  
   3027  3 000045   200005 471700                    LDP1  ! BUF$,,AUTO
         3 000046   100001 720300                    LXL0  ! 1,,PR1
         3 000047   000016 740300                    STX0  ! 14,,PR0

     2543     3028    3               END;

   3028  3 000050   000107 710200 3                  TRA   ! s:3045

     2544     3029    2           ELSE
     2545     3030    3               IF TMPX = SOCK.BUFTL THEN DO;

   3030  3 000051   000016 236300                    LDQ   ! 14,,PR0
         3 000052   777777 376207                    ANQ   ! -1,DL
         3 000053   200012 116300                    CMPQ  ! TMPX,,AUTO
         3 000054   000061 601200 3                  TNZ   ! s:3035

     2546     3031    3                   SOCK.BUFTL = 0;

   3031  3 000055   000000 220203                    LDX0  ! 0,DU
         3 000056   000016 440300                    SXL0  ! 14,,PR0

     2547     3032    3                   SOCK.BUFHD = 0;

   3032  3 000057   000016 740300                    STX0  ! 14,,PR0

     2548     3033    3                   END;

   3033  3 000060   000107 710200 3                  TRA   ! s:3045

     2549     3034    2               ELSE
     2550     3035    3               DO WHILE( TMPX ~= 0);

   3035  3 000061   200012 235300                    LDA   ! TMPX,,AUTO
         3 000062   000107 600200 3                  TZE   ! s:3045

     2551     3036    4                   IF PINCRW( XSL_SOCK$$, TMPX)->DATABUF.NXT = BUFX THEN DO;

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:440  
   3036  3 000063   000000 470600 xsym               LDP0  ! XSL_SOCK$$
         3 000064   200012 720300                    LXL0  ! TMPX,,AUTO
         3 000065   000001 236310                    LDQ   ! 1,X0,PR0
         3 000066   777777 376207                    ANQ   ! -1,DL
         3 000067   200006 116300                    CMPQ  ! BUFX,,AUTO
         3 000070   000104 601200 3                  TNZ   ! s:3043

     2552     3037    4                       PINCRW( XSL_SOCK$$, TMPX)->DATABUF.NXT = DATABUF.NXT;

   3037  3 000071   200005 471700                    LDP1  ! BUF$,,AUTO
         3 000072   100001 721300                    LXL1  ! 1,,PR1
         3 000073   000001 441310                    SXL1  ! 1,X0,PR0

     2553     3038    4                       IF SOCK.BUFTL = BUFX THEN

   3038  3 000074   200003 470700                    LDP0  ! @SOCK,,AUTO
         3 000075   000016 236300                    LDQ   ! 14,,PR0
         3 000076   777777 376207                    ANQ   ! -1,DL
         3 000077   200006 116300                    CMPQ  ! BUFX,,AUTO
         3 000100   000102 601200 3                  TNZ   ! s:3040

     2554     3039    4                           SOCK.BUFTL = TMPX;

   3039  3 000101   000016 440300                    SXL0  ! 14,,PR0

     2555     3040    4                       TMPX = 0;

   3040  3 000102   200012 450300                    STZ   ! TMPX,,AUTO

     2556     3041    4                       END;

   3041  3 000103   000105 710200 3                  TRA   ! s:3044

     2557     3042    3                   ELSE
     2558     3043    3                       TMPX = PINCRW( XSL_SOCK$$, TMPX)->DATABUF.NXT;

   3043  3 000104   200012 756300                    STQ   ! TMPX,,AUTO
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:441  

     2559     3044    3                   END;

   3044  3 000105   200012 235300                    LDA   ! TMPX,,AUTO
         3 000106   000063 601200 3                  TNZ   ! s:3036

     2560     3045    2           IF SOCK.FLAGS.REUSEBUF AND SOCK.BUFPND# <= SOCK.MAXBUF AND

   3045  3 000107   200003 470700                    LDP0  ! @SOCK,,AUTO
         3 000110   000001 236300                    LDQ   ! 1,,PR0
         3 000111   000004 316203                    CANQ  ! 4,DU
         3 000112   000302 600200 3                  TZE   ! s:3090
         3 000113   000017 720300                    LXL0  ! 15,,PR0
         3 000114   000020 100300                    CMPX0 ! 16,,PR0
         3 000115   000117 600200 3                  TZE   ! s:3045+8
         3 000116   000302 603200 3                  TRC   ! s:3090
         3 000117   000001 471600 4                  LDP1  ! 1
         3 000120   100000 473700                    LDP3  ! 0,,PR1
         3 000121   000003 721300                    LXL1  ! 3,,PR0
         3 000122   300000 474711                    LDP4  ! 0,X1,PR3
         3 000123   000020 236300                    LDQ   ! 16,,PR0
         3 000124   777777 376207                    ANQ   ! -1,DL
         3 000125   200014 756300                    STQ   ! TMPX+2,,AUTO
         3 000126   400074 236300                    LDQ   ! 60,,PR4
         3 000127   000033 772200                    QRL   ! 27
         3 000130   000377 376207                    ANQ   ! 255,DL
         3 000131   200014 116300                    CMPQ  ! TMPX+2,,AUTO
         3 000132   000302 605200 3                  TPL   ! s:3090

     2561     3046    3             DCBADDR( SOCK.DCB#)->F$DCB.FCN.CNT(0) < SOCK.MAXRDS THEN DO;

     2562     3047    3               KEYS = '0'B;

   3047  3 000133   200010 450300                    STZ   ! KEYS,,AUTO

     2563     3048    3   COMMON:
     2564     3049    3               DATABUF = '0'B;
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:442  

   3049  3 000134   200005 470700       COMMON       LDP0  ! BUF$,,AUTO
         3 000135   000100 100600                    MLR   ! fill='000'O
         3 000136   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         3 000137   000000 000050                    ADSC9   0,,PR0                   cn=0,n=40

     2565     3050    3               DATABUF.FLAGS.BUSY = '1'B;

   3050  3 000140   200005 470700                    LDP0  ! BUF$,,AUTO
         3 000141   400000 236203                    LDQ   ! -131072,DU
         3 000142   000001 256300                    ORSQ  ! 1,,PR0

     2566     3051                /*  DATABUF.NXT = 0;  superfluous */
     2567     3052    3               IF SOCK.BUFTL ~= 0 THEN

   3052  3 000143   200003 470700                    LDP0  ! @SOCK,,AUTO
         3 000144   000016 720300                    LXL0  ! 14,,PR0
         3 000145   000151 600200 3                  TZE   ! s:3054

     2568     3053    3                   PINCRW( XSL_SOCK$$, SOCK.BUFTL)->DATABUF.NXT = BUFX;

   3053  3 000146   200006 721300                    LXL1  ! BUFX,,AUTO
         3 000147   000000 471600 xsym               LDP1  ! XSL_SOCK$$
         3 000150   100001 441310                    SXL1  ! 1,X0,PR1

     2569     3054    3               SOCK.BUFTL = BUFX;

   3054  3 000151   200006 720300                    LXL0  ! BUFX,,AUTO
         3 000152   000016 440300                    SXL0  ! 14,,PR0

     2570     3055    3               IF SOCK.BUFHD = 0 THEN

   3055  3 000153   000016 221300                    LDX1  ! 14,,PR0
         3 000154   000156 601200 3                  TNZ   ! s:3057

     2571     3056    3                   SOCK.BUFHD = BUFX;

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:443  
   3056  3 000155   000016 740300                    STX0  ! 14,,PR0

     2572     3057    3               BUF$->B$PTR = ADDR( SOCK);

   3057  3 000156   200003 236300                    LDQ   ! @SOCK,,AUTO
         3 000157   200005 471700                    LDP1  ! BUF$,,AUTO
         3 000160   100000 756300                    STQ   ! 0,,PR1

     2573     3058    3               KEY$ = ADDR( DATABUF.KEY);

   3058  3 000161   200005 236300                    LDQ   ! BUF$,,AUTO
         3 000162   000002 036203                    ADLQ  ! 2,DU
         3 000163   200007 756300                    STQ   ! KEY$,,AUTO

     2574     3059    4               IF KEYS THEN DO;

   3059  3 000164   200010 234300                    SZN   ! KEYS,,AUTO
         3 000165   000202 605200 3                  TPL   ! s:3067

     2575     3060                        /* use supplied RQS rather than RECVRQS/RECVFROMRQS */
     2576     3061    4                   LEN = 32;

   3061  3 000166   000040 235207                    LDA   ! 32,DL
         3 000167   200011 755300                    STA   ! LEN,,AUTO

     2577     3062    4                   KEY$->B$CHARS = ADDR( BUF)->B$CHARS;

   3062  3 000170   200004 471700                    LDP1  ! @BUF,,AUTO
         3 000171   000000 621205                    EAX1  ! 0,AL
         3 000172   200007 473700                    LDP3  ! KEY$,,AUTO
         3 000173   200011 722300                    LXL2  ! LEN,,AUTO
         3 000174   040140 100740                    MLR   ! fill='040'O
         3 000175   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1
         3 000176   300000 000012                    ADSC9   0,,PR3                   cn=0,n=*X2

     2578     3063    4                   LEN = XSL_BUFSIZE;

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:444  
   3063  3 000177   000000 235200 xsym               LDA   ! XSL_BUFSIZE
         3 000200   200011 755300                    STA   ! LEN,,AUTO

     2579     3064    4                   END;

   3064  3 000201   000245 710200 3                  TRA   ! s:3080

     2580     3065    4               ELSE DO;

     2581     3066                        /* issue RECVFROMRQS or RECVRQS as appropriate */
     2582     3067    4                   LEN = XSL_BUFSIZE;

   3067  3 000202   000000 235200 xsym               LDA   ! XSL_BUFSIZE
         3 000203   200011 755300                    STA   ! LEN,,AUTO

     2583     3068    5                   IF SOCK.TYPE = %XSL_SOCK_DGRAM THEN DO;

   3068  3 000204   000000 236300                    LDQ   ! 0,,PR0
         3 000205   000777 376203                    ANQ   ! 511,DU
         3 000206   000002 116203                    CMPQ  ! 2,DU
         3 000207   000226 601200 3                  TNZ   ! s:3076

     2584     3069    5                       XSL$RECVFROMRQS = XSL_RECVFROMRQS;

   3069  3 000210   200007 471700                    LDP1  ! KEY$,,AUTO
         3 000211   000100 100600                    MLR   ! fill='000'O
         3 000212   000000 000010 xsym               ADSC9   XSL_RECVFROMRQS          cn=0,n=8
         3 000213   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

     2585     3070    5                       XSL$RECVFROMRQS.LEN = 512*(9000/256) + MOD(9000,256);

   3070  3 000214   043050 221203                    LDX1  ! 17960,DU
         3 000215   100001 741300                    STX1  ! 1,,PR1

     2586     3071    5                       XSL$RECVFROMRQS.FROMLEN = 32 - SIZEC( XSL$RECVFROMRQS);

   3071  3 000216   000030 222203                    LDX2  ! 24,DU
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:445  
         3 000217   100001 442300                    SXL2  ! 1,,PR1

     2587     3072    5                       IF SOCK.FLAGS.DRIP THEN

   3072  3 000220   000001 236300                    LDQ   ! 1,,PR0
         3 000221   400000 316207                    CANQ  ! -131072,DL
         3 000222   000245 600200 3                  TZE   ! s:3080

     2588     3073    5                           XSL$RECVFROMRQS.FLAGS = %XSL_MSG_MORE;

   3073  3 000223   000200 223203                    LDX3  ! 128,DU
         3 000224   100000 443300                    SXL3  ! 0,,PR1

     2589     3074    5                       END;

   3074  3 000225   000245 710200 3                  TRA   ! s:3080

     2590     3075    5                   ELSE DO;

     2591     3076    5                       XSL$RECVRQS = XSL_RECVRQS;

   3076  3 000226   200007 471700                    LDP1  ! KEY$,,AUTO
         3 000227   000100 100600                    MLR   ! fill='000'O
         3 000230   000000 000006 xsym               ADSC9   XSL_RECVRQS              cn=0,n=6
         3 000231   100000 000006                    ADSC9   0,,PR1                   cn=0,n=6

     2592     3077    5                       XSL$RECVRQS.LEN = 512*(LEN/256) + MOD(LEN,256);

   3077  3 000232   200011 236300                    LDQ   ! LEN,,AUTO
         3 000233   000400 506207                    DIV   ! 256,DL
         3 000234   200014 756300                    STQ   ! TMPX+2,,AUTO
         3 000235   200011 236300                    LDQ   ! LEN,,AUTO
         3 000236   000400 506207                    DIV   ! 256,DL
         3 000237   200015 755300                    STA   ! TMPX+3,,AUTO
         3 000240   200014 236300                    LDQ   ! TMPX+2,,AUTO
         3 000241   000011 736200                    QLS   ! 9
         3 000242   200015 036300                    ADLQ  ! TMPX+3,,AUTO
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:446  
         3 000243   000000 621206                    EAX1  ! 0,QL
         3 000244   100001 741300                    STX1  ! 1,,PR1

     2593     3078    5                       END;

     2594     3079    4                   END;

     2595     3080    3               FPT_READ.BUF_ = VECTOR(

   3080  3 000245   200011 235300                    LDA   ! LEN,,AUTO
         3 000246   000020 735200                    ALS   ! 16
         3 000247   000140 135207                    SBLA  ! 96,DL
         3 000250   200005 236300                    LDQ   ! BUF$,,AUTO
         3 000251   000012 036203                    ADLQ  ! 10,DU
         3 000252   000004 757200 1                  STAQ  ! FPT_READ+4

     2596     3081    3                 PINCRC( ADDR( DATABUF), SIZEC( DATABUF))->B$CHARS);
     2597     3082    3               FPT_READ.KEY_ = VECTOR( DATABUF.KEY);

   3082  3 000253   000002 235200 4                  LDA   ! 2
         3 000254   200005 236300                    LDQ   ! BUF$,,AUTO
         3 000255   000002 036203                    ADLQ  ! 2,DU
         3 000256   000002 757200 1                  STAQ  ! FPT_READ+2

     2598     3083    3               FPT_READ.V.DCB# = SOCK.DCB#;

   3083  3 000257   000003 721300                    LXL1  ! 3,,PR0
         3 000260   000010 741200 1                  STX1  ! FPT_READ+8

     2599     3084    3               ADDR( FPT_READ.V.EVENT#)->B$PTR = BUF$;

   3084  3 000261   200005 236300                    LDQ   ! BUF$,,AUTO
         3 000262   000011 756200 1                  STQ   ! FPT_READ+9

     2600     3085    3               SOCK.FLAGS.MUSTREAD = '0'B;

   3085  3 000263   000003 236200 4                  LDQ   ! 3
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:447  
         3 000264   000001 356300                    ANSQ  ! 1,,PR0

     2601     3086    3               CALL XSL$EVLOG( 'NW', BUF$);

   3086  3 000265   200005 631700                    EPPR1 ! BUF$,,AUTO
         3 000266   200015 451700                    STP1  ! TMPX+3,,AUTO
         3 000267   000004 236200 4                  LDQ   ! 4
         3 000270   200014 756300                    STQ   ! TMPX+2,,AUTO
         3 000271   200014 630700                    EPPR0 ! TMPX+2,,AUTO
         3 000272   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000273   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000274   000000 011200                    NOP   ! 0

     2602     3087    3               CALL M$READ( FPT_READ) ALTRET( OOPS);

   3087  3 000275   000000 630600 1                  EPPR0 ! FPT_READ
         3 000276   440000 713600                    CLIMB ! alt,read
         3 000277   401400 401760                    pmme    nvectors=4
         3 000300   000316 702200 3                  TSX2  ! OOPS

     2603     3088    3               END;

   3088  3 000301   000315 710200 3                  TRA   ! s:3095

     2604     3089    3           ELSE DO;

     2605     3090    3               DATABUF.NXT = XSL$SOCKHD.BUFHD;

   3090  3 000302   000000 471600 xsym               LDP1  ! XSL_SOCK$$
         3 000303   100000 220300                    LDX0  ! 0,,PR1
         3 000304   200005 473700                    LDP3  ! BUF$,,AUTO
         3 000305   300001 440300                    SXL0  ! 1,,PR3

     2606     3091    3               XSL$SOCKHD.BUFHD = BUFX;

   3091  3 000306   200006 720300                    LXL0  ! BUFX,,AUTO
         3 000307   100000 740300                    STX0  ! 0,,PR1
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:448  

     2607     3092    3               IF XSL$SOCKHD.BUFTL = 0 THEN

   3092  3 000310   000000 471600 xsym               LDP1  ! XSL_SOCK$$
         3 000311   100000 721300                    LXL1  ! 0,,PR1
         3 000312   000315 601200 3                  TNZ   ! s:3095

     2608     3093    3                   XSL$SOCKHD.BUFTL = XSL$SOCKHD.BUFHD;

   3093  3 000313   100000 222300                    LDX2  ! 0,,PR1
         3 000314   100000 442300                    SXL2  ! 0,,PR1

     2609     3094    3               END;

     2610     3095    2           RETURN;

   3095  3 000315   000000 702200 xent               TSX2  ! X66_ARET

     2611     3096    2   OOPS:
     2612     3097    2           CALL XSL$EVLOG( 'ER', BUF$);

   3097  3 000316   200005 630700       OOPS         EPPR0 ! BUF$,,AUTO
         3 000317   200015 450700                    STP0  ! TMPX+3,,AUTO
         3 000320   000005 236200 4                  LDQ   ! 5
         3 000321   200014 756300                    STQ   ! TMPX+2,,AUTO
         3 000322   200014 630700                    EPPR0 ! TMPX+2,,AUTO
         3 000323   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000324   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000325   000000 011200                    NOP   ! 0

     2613     3098    3           IF BUF$ ~= ADDR( NIL) THEN DO;

   3098  3 000326   200005 236300                    LDQ   ! BUF$,,AUTO
         3 000327   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         3 000330   000346 600200 3                  TZE   ! s:3102

     2614     3099    3               CALL XSL$EVLOG( , B$TCB$->B$TCB.ALT$->B$ALT.ERR);
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:449  

   3099  3 000331   000000 470600 xsym               LDP0  ! B$TCB$
         3 000332   000000 471700                    LDP1  ! 0,,PR0
         3 000333   100102 633700                    EPPR3 ! 66,,PR1
         3 000334   200015 453700                    STP3  ! TMPX+3,,AUTO
         3 000335   000001 236200 xsym               LDQ   ! B_VECTNIL+1
         3 000336   200014 756300                    STQ   ! TMPX+2,,AUTO
         3 000337   200014 630700                    EPPR0 ! TMPX+2,,AUTO
         3 000340   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000341   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000342   000000 011200                    NOP   ! 0

     2615     3100    3               DATABUF.FLAGS.BUSY = '0'B;

   3100  3 000343   200005 470700                    LDP0  ! BUF$,,AUTO
         3 000344   000031 236200 xsym               LDQ   ! B_VECTNIL+25
         3 000345   000001 356300                    ANSQ  ! 1,,PR0

     2616     3101    3               END;

     2617     3102    2           ALTRETURN;

   3102  3 000346   000000 702200 xent               TSX2  ! X66_AALT

     2618     3103    2           END;

   3103  3 000347   000352 710000 3                  TRA     s:3108

     2619     3104
     2620     3105    1   XSL$GETBUF: ENTRY( SOCK, BUF) ALTRET;

   3105  3 000350   000000 700200 xent  XSL$GETBUF   TSX0  ! X66_AUTO_2
         3 000351   000020 000002                    ZERO    16,2

     2621     3106
     2622     3107    2       DO INHIBIT;

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:450  
     2623     3108    2           BUF$ = ADDR( NIL);

   3108  3 000352   000001 236200 xsym               LDQ   ! B_VECTNIL+1
         3 000353   200005 756300                    STQ   ! BUF$,,AUTO

     2624     3109    2           IF XSL$SOCKHD.BUFHD = 0 THEN

   3109  3 000354   000000 470600 xsym               LDP0  ! XSL_SOCK$$
         3 000355   000000 220300                    LDX0  ! 0,,PR0
         3 000356   000316 600200 3                  TZE   ! OOPS

     2625     3110    2               GOTO OOPS;  /* can't extend segment yet.. */
     2626     3111    2           BUFX = XSL$SOCKHD.BUFHD;

   3111  3 000357   000000 236300                    LDQ   ! 0,,PR0
         3 000360   000022 772200                    QRL   ! 18
         3 000361   200006 756300                    STQ   ! BUFX,,AUTO

     2627     3112    2           CALL XSL$EVLOG( 'GB', BUFX*262144);

   3112  3 000362   200006 235300                    LDA   ! BUFX,,AUTO
         3 000363   000022 735200                    ALS   ! 18
         3 000364   200014 755300                    STA   ! TMPX+2,,AUTO
         3 000365   200014 631700                    EPPR1 ! TMPX+2,,AUTO
         3 000366   200017 451700                    STP1  ! TMPX+5,,AUTO
         3 000367   000006 236200 4                  LDQ   ! 6
         3 000370   200016 756300                    STQ   ! TMPX+4,,AUTO
         3 000371   200016 630700                    EPPR0 ! TMPX+4,,AUTO
         3 000372   000020 631600 xsym               EPPR1 ! B_VECTNIL+16
         3 000373   000000 701200 xent               TSX1  ! XSL$EVLOG
         3 000374   000000 011200                    NOP   ! 0

     2628     3113    2           BUF$ = PINCRW( XSL_SOCK$$, BUFX);

   3113  3 000375   200006 236300                    LDQ   ! BUFX,,AUTO
         3 000376   000022 736200                    QLS   ! 18
         3 000377   000000 036200 xsym               ADLQ  ! XSL_SOCK$$
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:451  
         3 000400   200005 756300                    STQ   ! BUF$,,AUTO

     2629     3114    2           XSL$SOCKHD.BUFHD = BUF$->DATABUF.NXT;

   3114  3 000401   200005 470700                    LDP0  ! BUF$,,AUTO
         3 000402   000001 720300                    LXL0  ! 1,,PR0
         3 000403   000000 471600 xsym               LDP1  ! XSL_SOCK$$
         3 000404   100000 740300                    STX0  ! 0,,PR1

     2630     3115    2           IF XSL$SOCKHD.BUFHD = 0 THEN

   3115  3 000405   000000 470600 xsym               LDP0  ! XSL_SOCK$$
         3 000406   000000 220300                    LDX0  ! 0,,PR0
         3 000407   000412 601200 3                  TNZ   ! s:3117

     2631     3116    2               XSL$SOCKHD.BUFTL = 0;  /* no more buffers */

   3116  3 000410   000000 221203                    LDX1  ! 0,DU
         3 000411   000000 441300                    SXL1  ! 0,,PR0

     2632     3117    2           IF ADDR( BUF) = ADDR( NIL) THEN

   3117  3 000412   200004 236300                    LDQ   ! @BUF,,AUTO
         3 000413   000001 116200 xsym               CMPQ  ! B_VECTNIL+1
         3 000414   000417 601200 3                  TNZ   ! s:3120

     2633     3118    2               KEYS = '0'B;

   3118  3 000415   200010 450300                    STZ   ! KEYS,,AUTO
         3 000416   000421 710200 3                  TRA   ! s:3121

     2634     3119    2           ELSE
     2635     3120    2               KEYS = '1'B;

   3120  3 000417   400000 236203                    LDQ   ! -131072,DU
         3 000420   200010 756300                    STQ   ! KEYS,,AUTO

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:452  
     2636     3121    2           GOTO COMMON;

   3121  3 000421   000134 710200 3                  TRA   ! COMMON

     2637     3122    2           END;

     2638     3123
     2639     3124    1   END XSL$BUFMGMT;

   3124  3 000422   000000 702200 xent               TSX2  ! X66_ARET

FPT_READ
 Sect OctLoc
   1     000   000005 777640   000010 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     010   000000 300000   000000 000000   000000 000000   000000 000000    ................
   1     014   000000 000000   000000 000000                                    ........

(unnamed)
 Sect OctLoc
   2     000   122102 040040   116127 040040   105122 040040   107102 040040    RB  NW  ER  GB

(unnamed)
 Sect OctLoc
   4     000   000000 006000   000000 006003   000007 777640   777776 777777    ................
   4     004   000001 006000   000002 006000   000003 006000                    ............

PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:453  
--  Include file information  --

   XSL_SOCKMSGS_M.:TCA2TOU  is referenced.
   XSL_SOCKMSGS_E.:TCA2TOU  is referenced.
   XSL_INTERNAL_M.:TCA2TOU  is referenced.
   XSL_SOCKET_M.:TCA2TOU  is referenced.
   XSL_SOCKET_E.:TCA2TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure XSL$BUFMGMT.
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:454  

 **** Variables and constants ****

  ****  Section 001  Data  XSL$BUFMGMT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(504)   r     1 FPT_READ

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BUF                       3-0-0/w PTR         r     1 @SOCK
    *0-0-0/w STRC(360)   r     1 BUF                        5-0-0/w PTR         r     1 BUF$
     6-0-0/w SBIN        r     1 BUFX                       7-0-0/w PTR         r     1 KEY$
    10-0-0/b BIT         r     1 KEYS                      11-0-0/w SBIN        r     1 LEN
    *0-0-0/w STRC(720)   r     1 SOCK                      12-0-0/w SBIN        r     1 TMPX

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w SBIN        r     1 XSL_BUFSIZE
     0-0-0/w STRC(72)    r     1 XSL_RECVFROMRQS            0-0-0/w STRC(54)    r     1 XSL_RECVRQS
     0-0-0/w PTR         r     1 XSL_SOCK$$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/c ACHR        r     1 B$CHARS
     0-0-0/w PTR         r     1 B$PTR                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(360)   r     1 DATABUF                    0-0-0/d ASTR(3528)  r     1 F$DCB
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:455  
     0-0-0/w STRC(72)    r     1 XSL$RECVFROMRQS            0-0-0/w STRC(54)    r     1 XSL$RECVRQS
     0-0-0/w STRC(180)   r     1 XSL$SOCKHD


   Procedure XSL$BUFMGMT requires 275 words for executable code.
   Procedure XSL$BUFMGMT requires 16 words of local(AUTO) storage.

    No errors detected in file XSL$SOCKET1.:TCA2TSI    .
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:456  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:457  
          MINI XREF LISTING

B$ALT.CODE
       147**DCL       147--REDEF     148--REDEF     148--REDEF
B$ALT.ERR
       148**DCL      3099<>CALL
B$ALT.ERR.ERR#
       149**DCL       149--REDEF
B$ALT.EVID
       148**DCL       148--REDEF     148--REDEF
B$CHARS
      3008**DCL      3062<<ASSIGN   3062>>ASSIGN   3080--ASSIGN
B$PTR
      3009**DCL      3057<<ASSIGN   3084<<ASSIGN
B$TCB.ALT$
       154**DCL      3099>>CALL
B$TCB$
      3003**DCL      3099>>CALL
BUF
      1482**DCL         6--PROC     3017--ENTRY    3020--ASSIGN   3062--ASSIGN   3105--ENTRY    3117--IF
BUF$
      3010**DCL      1515--IMP-PTR  3020<<ASSIGN   3021>>ASSIGN   3027>>ASSIGN   3037>>ASSIGN   3049>>ASSIGN
      3050>>ASSIGN   3057>>ASSIGN   3058>>ASSIGN   3080>>ASSIGN   3082>>ASSIGN   3084>>ASSIGN   3086<>CALL
      3090>>ASSIGN   3097<>CALL     3098>>IF       3100>>ASSIGN   3108<<ASSIGN   3113<<ASSIGN   3114>>ASSIGN
BUFX
      3011**DCL      3021<<ASSIGN   3022>>CALL     3024>>IF       3025>>IF       3036>>IF       3038>>IF
      3053>>ASSIGN   3054>>ASSIGN   3056>>ASSIGN   3091>>ASSIGN   3111<<ASSIGN   3112>>CALL     3113>>ASSIGN
COMMON
      3049**LABEL    3121--GOTO
DATABUF
      1515**DCL      3049<<ASSIGN   3080--ASSIGN   3080--ASSIGN
DATABUF.FLAGS.BUSY
      1525**DCL      3050<<ASSIGN   3100<<ASSIGN
DATABUF.KEY
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:458  
      1529**DCL      3058--ASSIGN   3082--ASSIGN
DATABUF.NXT
      1528**DCL      3027>>ASSIGN   3036>>IF       3037<<ASSIGN   3037>>ASSIGN   3043>>ASSIGN   3053<<ASSIGN
      3090<<ASSIGN   3114>>ASSIGN
F$DCB.ACTPOS
       121**DCL       121--REDEF
F$DCB.ARS#
        95**DCL        95--REDEF
F$DCB.ATTR
       114**DCL       115--REDEF
F$DCB.BORROW
       129**DCL       129--REDEF     129--REDEF     129--REDEF
F$DCB.DCBNAME.L
       143**DCL       143--IMP-SIZ
F$DCB.EOMCHAR#
        99**DCL        99--REDEF
F$DCB.FCN.CNT
       134**DCL      3045>>IF
F$DCB.FLDID
       124**DCL       124--REDEF
F$DCB.FORM$
       118**DCL       118--REDEF
F$DCB.FSECT
       134**DCL       134--REDEF
F$DCB.FSN#
       111**DCL       111--REDEF     111--REDEF     112--REDEF
F$DCB.HEADER$
       117**DCL       117--REDEF
F$DCB.IXTNSIZE#
       115**DCL       115--REDEF
F$DCB.LASTSTA$
       104**DCL       104--REDEF
F$DCB.LVL
       130**DCL       130--REDEF
F$DCB.NAME#.C
       105**DCL       105--REDEF
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:459  
F$DCB.NOEOF
       127**DCL       127--REDEF
F$DCB.NRECS#
       116**DCL       116--REDEF
F$DCB.NRECX
       135**DCL       135--REDEF
F$DCB.OHDR
       127**DCL       127--REDEF
F$DCB.ORG#
       110**DCL       110--REDEF
F$DCB.PRECNO
       133**DCL       133--REDEF
F$DCB.RCSZ
       139**DCL       139--REDEF
F$DCB.RES#
       106**DCL       106--REDEF
F$DCB.SETX
       118**DCL       118--REDEF
F$DCB.TAB$
       118**DCL       118--REDEF
F$DCB.TDA
       132**DCL       133--REDEF
F$DCB.WSN#
       106**DCL       106--REDEF
FPT_READ
       173**DCL      3087<>CALL
FPT_READ.BUF_
       175**DCL      3080<<ASSIGN
FPT_READ.KEY_
       173**DCL      3082<<ASSIGN
FPT_READ.STATION_
       176**DCL       177--REDEF
FPT_READ.V
       177**DCL       173--DCLINIT
FPT_READ.V.DCB#
       177**DCL      3083<<ASSIGN
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:460  
FPT_READ.V.DVBYTE.REREAD#
       188**DCL       188--REDEF
FPT_READ.V.EVENT#
       186**DCL      3084--ASSIGN
FPT_READ.V.INDX#
       186**DCL       186--REDEF
KEY$
      3012**DCL      2934--IMP-PTR  2989--IMP-PTR  3058<<ASSIGN   3062>>ASSIGN   3069>>ASSIGN   3070>>ASSIGN
      3071>>ASSIGN   3073>>ASSIGN   3076>>ASSIGN   3077>>ASSIGN
KEYS
      3013**DCL      3047<<ASSIGN   3059>>IF       3118<<ASSIGN   3120<<ASSIGN
LEN
      3014**DCL      3008--IMP-SIZ  3061<<ASSIGN   3062>>ASSIGN   3062>>ASSIGN   3063<<ASSIGN   3067<<ASSIGN
      3077>>ASSIGN   3077>>ASSIGN   3080>>ASSIGN
M$READ
        17**DCL-ENT  3087--CALL
OOPS
      3097**LABEL    3087--CALLALT  3110--GOTO
SOCK
      1549**DCL         6--PROC     3017--ENTRY    3057--ASSIGN   3105--ENTRY
SOCK.BUFHD
      1663**DCL      3023>>ASSIGN   3027<<ASSIGN   3032<<ASSIGN   3055>>IF       3056<<ASSIGN
SOCK.BUFPND#
      1666**DCL      3045>>IF
SOCK.BUFTL
      1664**DCL      3025>>IF       3026<<ASSIGN   3030>>IF       3031<<ASSIGN   3038>>IF       3039<<ASSIGN
      3052>>IF       3053>>ASSIGN   3054<<ASSIGN
SOCK.DCB#
      1582**DCL      3045--IF       3083>>ASSIGN
SOCK.FLAGS.DRIP
      1578**DCL      3072>>IF
SOCK.FLAGS.MUSTREAD
      1577**DCL      3085<<ASSIGN
SOCK.FLAGS.REUSEBUF
      1575**DCL      3045>>IF
SOCK.MAXBUF
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:461  
      1667**DCL      3045>>IF
SOCK.MAXRDS
      1668**DCL      3045>>IF
SOCK.NBACCEPT_SOCK$
      1671**DCL      1672--REDEF
SOCK.TYPE
      1556**DCL      3068>>IF
TMPX
      3015**DCL      3023<<ASSIGN   3024>>IF       3030>>IF       3035>>DOWHILE  3036>>IF       3037>>ASSIGN
      3039>>ASSIGN   3040<<ASSIGN   3043<<ASSIGN   3043>>ASSIGN
XSL$EVLOG
      3001**DCL-ENT  3022--CALL     3086--CALL     3097--CALL     3099--CALL     3112--CALL
XSL$RECVFROMRQS
      2989**DCL      3069<<ASSIGN   3071--ASSIGN
XSL$RECVFROMRQS.FLAGS
      2996**DCL      3073<<ASSIGN
XSL$RECVFROMRQS.FROMLEN
      2998**DCL      3071<<ASSIGN
XSL$RECVFROMRQS.LEN
      2997**DCL      3070<<ASSIGN
XSL$RECVRQS
      2934**DCL      3076<<ASSIGN
XSL$RECVRQS.LEN
      2942**DCL      3077<<ASSIGN
XSL$SOCKHD.BUFHD
      1699**DCL      3090>>ASSIGN   3091<<ASSIGN   3093>>ASSIGN   3109>>IF       3111>>ASSIGN   3114<<ASSIGN
      3115>>IF
XSL$SOCKHD.BUFTL
      1700**DCL      3092>>IF       3093<<ASSIGN   3116<<ASSIGN
XSL_BUFSIZE
      3005**DCL      3063>>ASSIGN   3067>>ASSIGN
XSL_RECVFROMRQS
      2961**DCL      3069>>ASSIGN
XSL_RECVRQS
      2907**DCL      3076>>ASSIGN
XSL_SOCK$$
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:462  
      3006**DCL      1692--IMP-PTR  3021>>ASSIGN   3036>>IF       3037>>ASSIGN   3043>>ASSIGN   3053>>ASSIGN
      3090>>ASSIGN   3091>>ASSIGN   3092>>IF       3093>>ASSIGN   3093>>ASSIGN   3109>>IF       3111>>ASSIGN
      3113>>ASSIGN   3114>>ASSIGN   3115>>IF       3116>>ASSIGN
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:463  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:464  
              MINI UREF LISTING

M$ACCT      33**DCL-ENT
M$ACTIVATE      36**DCL-ENT
M$ALIB      29**DCL-ENT
M$ASUSER      31**DCL-ENT
M$ATTACH      38**DCL-ENT
M$BADPP      56**DCL-ENT
M$CGCTL      37**DCL-ENT
M$CGINFO      37**DCL-ENT
M$CHECK      18**DCL-ENT
M$CHGUNIT      76**DCL-ENT
M$CLOSE      16**DCL-ENT
M$CLRSTK      74**DCL-ENT
M$CMDVAR      85**DCL-ENT
M$CONFIG      46**DCL-ENT
M$CORRES      21**DCL-ENT
M$CPEXIT      30**DCL-ENT
M$CVM      54**DCL-ENT
M$CVOL      19**DCL-ENT
M$DCLFLD      46**DCL-ENT
M$DEACTIVATE      36**DCL-ENT
M$DELREC      18**DCL-ENT
M$DEQ      83**DCL-ENT
M$DETACH      38**DCL-ENT
M$DEVICE      20**DCL-ENT
M$DISPLAY      83**DCL-ENT
M$DISPRES      23**DCL-ENT
M$DLIB      29**DCL-ENT
M$DRIBBLE      46**DCL-ENT
M$DRTN      74**DCL-ENT
M$DSUSER      31**DCL-ENT
M$ENQ      82**DCL-ENT
M$EOM      41**DCL-ENT
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:465  
M$ERASE      47**DCL-ENT
M$ERR      28**DCL-ENT
M$ERRMSG      79**DCL-ENT
M$EVENT      71**DCL-ENT
M$EXHUME      80**DCL-ENT
M$EXIT      28**DCL-ENT
M$EXTEND      20**DCL-ENT
M$FDP      52**DCL-ENT
M$FDS      51**DCL-ENT
M$FEBOOT      44**DCL-ENT
M$FECTL      45**DCL-ENT
M$FEDUMP      44**DCL-ENT
M$FID      79**DCL-ENT
M$FINDPROC      33**DCL-ENT
M$FSUSER      31**DCL-ENT
M$FVP      53**DCL-ENT
M$FWCG      37**DCL-ENT
M$GBPL      57**DCL-ENT
M$GDDL      53**DCL-ENT
M$GDP      52**DCL-ENT
M$GDS      51**DCL-ENT
M$GETDCB      22**DCL-ENT
M$GETMOUSE      62**DCL-ENT
M$GETPM      63**DCL-ENT
M$GJOB      81**DCL-ENT
M$GLINEATTR      41**DCL-ENT
M$GOODPP      56**DCL-ENT
M$GPLATEN      49**DCL-ENT
M$GPROMPT      48**DCL-ENT
M$GTRMATTR      42**DCL-ENT
M$GTRMCTL      40**DCL-ENT
M$GTRMTAB      43**DCL-ENT
M$GVP      52**DCL-ENT
M$HELP      79**DCL-ENT
M$INT      71**DCL-ENT
M$INTRTN      32**DCL-ENT
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:466  
M$IOQ      67**DCL-ENT
M$JOBSTATS      81**DCL-ENT
M$KEYIN      21**DCL-ENT
M$LDEV      16**DCL-ENT
M$LDTRC      29**DCL-ENT
M$LIMIT      22**DCL-ENT
M$LINES      21**DCL-ENT
M$LINK      28**DCL-ENT
M$MADMUCK      24**DCL-ENT
M$MAKUSER      55**DCL-ENT
M$MBS      23**DCL-ENT
M$MDFFLD      47**DCL-ENT
M$MERC      72**DCL-ENT
M$MERCS      73**DCL-ENT
M$MIRROR      67**DCL-ENT
M$MONINFO      84**DCL-ENT
M$MPL      57**DCL-ENT
M$NODEINFO      48**DCL-ENT
M$NXTUSR      82**DCL-ENT
M$OCMSG      80**DCL-ENT
M$OLAY      28**DCL-ENT
M$OPEN      16**DCL-ENT
M$PAS      57**DCL-ENT
M$PATHCON      80**DCL-ENT
M$PDS      51**DCL-ENT
M$PFIL      18**DCL-ENT
M$PLATEN      42**DCL-ENT
M$PRECORD      20**DCL-ENT
M$PROCNAME      33**DCL-ENT
M$PROFILE      44**DCL-ENT
M$PROMPT      40**DCL-ENT
M$RACST      24**DCL-ENT
M$RDSYSLOG      65**DCL-ENT
M$RELDCB      22**DCL-ENT
M$RELRES      23**DCL-ENT
M$RELSTARF      25**DCL-ENT
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:467  
M$REM      25**DCL-ENT
M$RENV      72**DCL-ENT
M$REQUIRE      24**DCL-ENT
M$RETRY      73**DCL-ENT
M$RETRYS      73**DCL-ENT
M$REW      19**DCL-ENT
M$RLSFLD      47**DCL-ENT
M$RPRIV      75**DCL-ENT
M$RSPP      54**DCL-ENT
M$RSWITCH      76**DCL-ENT
M$RUE      82**DCL-ENT
M$SAD      55**DCL-ENT
M$SAVE      31**DCL-ENT
M$SCON      32**DCL-ENT
M$SCREECH      30**DCL-ENT
M$SENV      72**DCL-ENT
M$SETFMA      16**DCL-ENT
M$SETFP      45**DCL-ENT
M$SINPUT      43**DCL-ENT
M$SLCFLD      48**DCL-ENT
M$SMOUSE      62**DCL-ENT
M$SMPRT      54**DCL-ENT
M$SPRIV      75**DCL-ENT
M$SSC      55**DCL-ENT
M$SSWITCH      75**DCL-ENT
M$STATE      84**DCL-ENT
M$STD      56**DCL-ENT
M$STIMER      70**DCL-ENT
M$STLPP      53**DCL-ENT
M$STRAP      70**DCL-ENT
M$STRMATTR      42**DCL-ENT
M$STRMCTL      40**DCL-ENT
M$STRMTAB      43**DCL-ENT
M$SYMBIO      81**DCL-ENT
M$SYSCON      67**DCL-ENT
M$SYSID      85**DCL-ENT
PL6.E3A0      #014=XSL$BUFMGMT File=XSL$SOCKET1.:TCA2TSI                         SUN 11/16/97 14:38 Page:468  
M$TDCLOSE      66**DCL-ENT
M$TDIO      66**DCL-ENT
M$TDOPEN      65**DCL-ENT
M$TDREQCPU      66**DCL-ENT
M$TEMPWROC      60**DCL-ENT
M$TIME      83**DCL-ENT
M$TRAP      70**DCL-ENT
M$TRMISC      45**DCL-ENT
M$TRMPRG      41**DCL-ENT
M$TRTN      74**DCL-ENT
M$TRUNC      17**DCL-ENT
M$TTIMER      70**DCL-ENT
M$UC      40**DCL
M$UMPL      57**DCL-ENT
M$UNFID      79**DCL-ENT
M$UNLATCH      36**DCL-ENT
M$UNSHARE      33**DCL-ENT
M$USRFIELD      76**DCL-ENT
M$VIRTUAL      51**DCL-ENT
M$WAIT      74**DCL-ENT
M$WEOF      19**DCL-ENT
M$WRITE      17**DCL-ENT
M$WRSYSLOG      65**DCL-ENT
M$XCON      71**DCL-ENT
M$XCONRTN      32**DCL-ENT
M$XEQTIME      84**DCL-ENT
M$XFLUSH      25**DCL-ENT
M$XMOUSE      62**DCL-ENT
M$XXX      28**DCL-ENT
M$YC      30**DCL-ENT
XSL$BUFMGMT       6**PROC
XSL$GETBUF    3105**ENTRY
XSL$MSGSDEFS    2888**DCL-ENT
XSL$RELBUF    3017**ENTRY
