

CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=1  
        1         1             /*M*    C_ms_debug:c  --  "em" debug schema generators             */
        2         2
        3         3             /*P*    NAME:          C_ms_debug
        4         4                     PURPOSE:       To generate the debug schema "em" messages.
        5         5                     DESCRIPTION:
        6         6                                    This module contains the following functions
        7         7                                    which are used to generate debug schema
        8         8                                    messages:
        9         9
       10        10                                    C_ms_fun       -- function definition
       11        11                                    C_ms_stmt      -- executable statement
       12        12                                    C_ms_lbl       -- labeled statement
       13        13                                    C_ms_blk       -- logical block
       14        14                                    C_ms_var       -- variable definition
       15        15                                    C_ms_ctln      -- Unique Control Section Name
       16        16                                    C_ms_sfun      -- static function names
       17        17             */
       18        18
       19        19             /*D*    NAME:          C_ms_fun
       20        20                     PURPOSE:       To provide information concerning a function.
       21        21                     DESCRIPTION:
       22        22                                    This function generates an "em" type 16
       23        23                                    message.  The format of this message is:
       24        24
       25        25                                       MES 16,<pro>,<cst1>,<cst2>,<cst3>,<cst4>
       26        26
       27        27                                    where:
       28        28
       29        29                                    <pro>    is the text of the function name
       30        30                                    <cst1>   0=no arg checking, 1=arg count chk
       31        31                                    <cst2>   0=normal calling sequence
       32        32                                    <cst3>   0=static,1=global
       33        33                                    <cst4>   number of bytes of params to receive
       34        34                                    <cst5>   number of bytes of locals
       35        35
       36        36             */
       37        37             #include <em.h>
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=2  
       38        38             #include <em_mes.h>
       39        39             #include <em_arith.h>
       40        40
       41        41             /*B*    NAME:       LastDebLine
       42        42                     Purpose:    To indicate the linenumber used for the last
       43        43                                 line for which statement debug schema was
       44        44                                 generated.
       45        45
       46        46                     DESCRIPTION:
       47        47                                 This variable is used to aid in developing
       48        48                                 substatement numbers and also to insert other
       49        49                                 debug schema line number information in the
       50        50                                 correct location.
       51        51
       52        52             */
       53        53             /*B*    NAME:       LastDebSubStmt
       54        54                     PURPOSE:    To indicate the next substatement number to
       55        55                                 generate if the next statement appears on a
       56        56                                 line for which we have already generated debug
       57        57                                 schema.
       58        58                     DESCRIPTION:
       59        59                                 The value of this variable is typically 1 if
       60        60                                 the program contains only one statement per line.
       61        61                                 Every time a statement is generated for a new
       62        62                                 line this variable is set to 1.  When a statement
       63        63                                 is generated for a line which already has had
       64        64                                 a statement on it, then the statement number is
       65        65                                 used and then incrimented.
       66        66             */
       67        67             unsigned int LastDebLine    = (unsigned int)-1;
       68        68             unsigned int LastDebSubStmt = 0;
       69        69
       70        70             C_ms_fun(fun,chk,ctyp,sc,nparm,nlcl)
       71        71               char  *fun;
       72        72               int   chk, ctyp, sc, nparm, nlcl;
       73        73             {
       74        74    1          C_mes_begin(ms_fun);
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=3  
       75        75    1          C_scon(fun,   (arith)(strlen(fun)   + 1));
       76        76    1          C_cst( (arith) chk );
       77        77    1          C_cst( (arith) ctyp);
       78        78    1          C_cst( (arith) sc);
       79        79    1          C_cst( (arith) nparm);
       80        80    1          C_cst( (arith) nlcl );
       81        81    1          C_mes_end();
       82        82    1        }
       83        83
       84        84
       85        85             /*D*    NAME:       C_ms_stmt
       86        86                     PURPOSE:    To generate the executable statement information
       87        87                                 "em" message.
       88        88                     DESCRIPTION:
       89        89                                 The executable statement message indicates the
       90        90                                 type of statement and the line number on which
       91        91                                 the statement occurred.  If there have been
       92        92                                 statements generated for this line already then
       93        93                                 the next sub-statement number is used, otherwise
       94        94                                 the sub-statement is set to 0.
       95        95
       96        96                                 The result of this function is the line number
       97        97                                 with the statement number added in shifted up
       98        98                                 18 bits.  Normally, the statement number is zero.
       99        99
      100       100
      101       101                                 The format of this message is:
      102       102
      103       103                                    MES 17,<cst1>,<cst2>,<cst3>
      104       104
      105       105                                 where:
      106       106
      107       107                                 <cst1>   is statement type from B$STTYPESUBS
      108       108                                 <cst2>   is the line number
      109       109                                 <cst3>   is the statement number
      110       110
      111       111             */
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=4  
      112       112             arith C_ms_stmt( typ, linenum)
      113       113               int typ, linenum;
      114       114             {
      115       115    1          if (linenum < 0)  {
      116       116    2             linenum = -linenum;
      117       117    2             if (linenum != LastDebLine)   linenum = LastDebLine + 1;
      118       118    2          }
      119       119    1          if (linenum != LastDebLine)   {
      120       120    2             LastDebLine = linenum;
      121       121    2             LastDebSubStmt = 0;
      122       122    2          }
      123       123    1          C_mes_begin(ms_stmt);
      124       124    1          C_cst( (arith) typ     );
      125       125    1          C_cst( (arith) LastDebLine );
      126       126    1          C_cst( (arith) LastDebSubStmt );
      127       127    1          C_mes_end();
      128       128    1          return LastDebLine + (LastDebSubStmt++ <<18);
      129       129    1        }
      130       130
      131       131             /*D*    NAME:          C_ms_lbl
      132       132                     PURPOSE:       To generate an "em" message for a statement
      133       133                                    label.
      134       134                     INPUT:         linenum        --    line number
      135       135                                    name           --    name of label
      136       136                     OUTPUT:        none.
      137       137                     INTERFACE:     LastDebLine
      138       138
      139       139                     DESCRIPTION:
      140       140
      141       141                        The statement number is set to 0 if this label did
      142       142                        not occur on a line for which statement schema has
      143       143                        already been generated, otherwise, the statement is
      144       144                        the next available statement for that line.
      145       145
      146       146                        The format of this message is:
      147       147
      148       148                           MES 18,<cst1>,<cst2>,<str>
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=5  
      149       149
      150       150                        where:
      151       151
      152       152                        <cst1>   is the linenumber.
      153       153                        <cst2>   is the sub-statement.
      154       154                        <str>    is the label.
      155       155
      156       156             */
      157       157             C_ms_lbl(linenum,substmt,name)
      158       158               int   linenum, substmt;
"zbm$em_mes$C_ms_debug:c.:ZBC3TSI", line 158: (warning) identifier "substmt" is not used
      159       159               char *name;
      160       160             {
      161       161    1          int stmt = (LastDebLine != linenum) ? 0 : LastDebSubStmt;
      162       162    1          C_mes_begin(ms_lbl);
      163       163    1          C_cst( (arith) linenum );
      164       164    1          C_cst( (arith) stmt );
      165       165    1          C_scon(name,  (arith)(strlen(name)  + 1));
      166       166    1          C_mes_end();
      167       167    1        }
      168       168
      169       169
      170       170             /*D*    NAME:          C_ms_blk
      171       171                     PURPOSE:       To indicate the start/end of a logical
      172       172                                    block of code.
      173       173
      174       174                     INPUT:         start       --    0=start, 1=end
      175       175                                    linenum     --    line number
      176       176                                    lexlvl      --    depth of block
      177       177
      178       178                     OUTPUT:        none
      179       179
      180       180                     INTERFACE:     LastDebLine
      181       181
      182       182                     DESCRIPTION:
      183       183
      184       184                        This message is generated whenever a block of code
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=6  
      185       185                        contains variable declarations.  This message is used
      186       186                        to mark the scope of the declaration.  The first
      187       187                        parameter indicates if a new block is beginning or the
      188       188                        current block is being closed. The second parameter is
      189       189                        the linenumber associated with this block begin/end.
      190       190
      191       191                        The statement number is set to 0 if this block start
      192       192                        did not occur on a line for which statement schema has
      193       193                        already been generated, otherwise, the statement is set
      194       194                        to the next available statement number for this line.
      195       195
      196       196                        If this is the end of a block, the block ends on the
      197       197                        previous statement!
      198       198
      199       199
      200       200                        The format of this message is:
      201       201
      202       202                           MES 19,<cst1>,<cst2>,<cst3>
      203       203
      204       204                        where:
      205       205
      206       206                        <cst1>   0=block start, 1=block end
      207       207                        <cst2>   line number
      208       208                        <cst3>   statement number within line 0..n
      209       209                        <cst4>   lexical depth of this block
      210       210
      211       211             */
      212       212             C_ms_blk(start, linenum, substmt, lexlvl)
      213       213               int    start, linenum, substmt, lexlvl;
"zbm$em_mes$C_ms_debug:c.:ZBC3TSI", line 213: (warning) identifier "substmt" is not used
      214       214             {
      215       215    1          int stmt;
      216       216    1          stmt = (LastDebLine != linenum) ? 0 : LastDebSubStmt - (start == 1);
      217       217    1          if (LastDebLine != linenum && start == 1)
      218       218    1             LastDebLine = linenum, LastDebSubStmt = 1;
      219       219    1          C_mes_begin(ms_blk);
      220       220    1          C_cst( (arith) start   );
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=7  
      221       221    1          C_cst( (arith) linenum );
      222       222    1          C_cst( (arith) stmt );
      223       223    1          C_cst( (arith) lexlvl  );
      224       224    1          C_mes_end();
      225       225    1        }
      226       226
      227       227             /*D*    NAME:          C_ms_var
      228       228                     PURPOSE:       To generate an "em" message for a variable
      229       229                                    definition.
      230       230
      231       231                     INPUT:         name     --  variable name
      232       232                                    strct    --  struct name
      233       233                                    line     --  line number
      234       234                                    stmt     --  *unused*
      235       235                                    lvl      --  level number for struct/union
      236       236                                    atyp     --  address type:static,auto,symref,
      237       237                                                 symdef,field,based.
      238       238                                    dtyp     --  data type from: VREBL_DATATYPES
      239       239                                    sz       --  size in bytes (bits for ints)
      240       240                                    esz      --  element size in bytes (ints bits)
      241       241                                    addr     --  byte address of variable
      242       242                                    bt       --  starting bit in word
      243       243                                    align    --  alignment:0=dw,1=wd,2=hw,3=ch,4=bt
      244       244                                    dims     --  array of ptr/array information
      245       245
      246       246                     OUTPUT:        none.
      247       247
      248       248                     INTERFACE:     LastDebLine
      249       249                                    LastDebSubStmt
      250       250
      251       251                     DESCRIPTION:
      252       252
      253       253                        The variable definition message indicates the names,
      254       254                        addresses, types and how to access a variable.
      255       255
      256       256                        The statement number is generated by setting it to
      257       257                        0 if this is a line for which no debug statement schema
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=8  
      258       258                        has been generated, otherwise, the statement number is
      259       259                        set to the next substatement number.
      260       260
      261       261                        The dims array is defined as follows:
      262       262
      263       263                        1. The first item of the array "dims[0]" contains the
      264       264                           number of integers in this array.  There should be
      265       265                           at least 1 value.
      266       266
      267       267                        2. The second item of the array is the number of pointer
      268       268                           indirections to get to either:
      269       269
      270       270                           a) the array indicated by the following dims items
      271       271                           b) if there are no more items in the dims array then
      272       272                              the actual data of the declared type is reached.
      273       273
      274       274                        3. Any following items have the following property:
      275       275
      276       276                           a) An integer indicating the number of array indices
      277       277                              which follow.
      278       278                           b) The array indices which indicate the array size.
      279       279                           c) Like (2.) above, an integer indicating the number
      280       280                              of pointer indirections to reach the data or the
      281       281                              next array information if more indices of the dims
      282       282                              array are in use.
      283       283
      284       284                        The format of this message is:
      285       285
      286       286                         MES 20,<str1>,<str2>,<cst1>,<cst2>,<cst3>,...<cstn>
      287       287
      288       288                        where:
      289       289
      290       290                        <str1>   is the name of the variable
      291       291                        <str2>   is the name of the struct/union
      292       292                        <cst1>   line number of this declaration
      293       293                        <cst2>   statement number
      294       294                        <cst3>   level number for struct and unions
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=9  
      295       295                        <cst4>   addrtype (1=static,2=auto,3=symref,4=symdef,
      296       296                                           5=field,6=based).
      297       297                        <cst5>   datatype from VREBL_DATATYPES
      298       298                        <cst6>   size in bytes
      299       299                        <cst7>   element size in bytes (bits for ints)
      300       300                        <cst8>   byte address
      301       301                        <cst9>   starting bit
      302       302                        <cst10>  alignment: 0=dw, 1=wd, 2=hw, 3=char, 4=bit
      303       303                        <cst11>  number of <cst> values following
      304       304                        <cst12>  indirect pointer count (number of *'s).
      305       305
      306       306                        <cstx1>  array rank: 0=scalar, 1=vector,...
      307       307                        <cstxx>  array rank integers
      308       308                        <cstxy>  indirect pointer count (number of *'s).
      309       309
      310       310             */
      311       311             C_ms_var(name,strct,line,stmt,lvl,atyp,dtyp,sz,esz,addr,bt,align,dims)
      312       312               char *name, *strct;
      313       313               int  line,stmt,lvl,atyp,dtyp,sz,esz,addr,bt,align,dims[];
      314       314             {
      315       315    1          int i, *j;
      316       316    1          stmt = (LastDebLine != line) ? 0 : LastDebSubStmt;
      317       317    1          C_mes_begin(ms_var);
      318       318    1          C_scon(name,  (arith)(strlen(name)  + 1));
      319       319    1          C_scon(strct, (arith)(strlen(strct) + 1));
      320       320    1          C_cst( (arith) line    );
      321       321    1          C_cst( (arith) stmt    );
      322       322    1          C_cst( (arith) lvl     );
      323       323    1          C_cst( (arith) atyp    );
      324       324    1          C_cst( (arith) dtyp    );
      325       325    1          C_cst( (arith) sz      );
      326       326    1          C_cst( (arith) esz     );
      327       327    1          C_cst( (arith) addr    );
      328       328    1          C_cst( (arith) bt      );
      329       329    1          C_cst( (arith) align   );
      330       330    1          for( (i=dims[0]),j=dims ; i>=0 ; --i)
      331       331    1             C_cst( (arith)*(j++) );
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=10 
      332       332    1          C_mes_end();
      333       333    1        }
      334       334
      335       335
      336       336
      337       337             /*D*    NAME:          C_ms_ctln
      338       338                     PURPOSE:       To indicate the name to use to create unique
      339       339                                    global symdefs and entdefs.
      340       340
      341       341                     INPUT:         name        --    string with name
      342       342
      343       343                     INTERFACE:     none.
      344       344
      345       345                     DESCRIPTION:
      346       346
      347       347                        This function causes a message of type "ms_ctln" to be
      348       348                        written.  This message  indicates the name to use in
      349       349                        constructing unique global (linker known) identifiers.
      350       350
      351       351                        The name will be used in the following ways:
      352       352
      353       353                        1. static control section name:  name#
      354       354                        2. constant control section name:  name##
      355       355                        3. static function name: name#f_name
      356       356
      357       357                        The format of this message is:
      358       358
      359       359                           mes  21,<str>
      360       360
      361       361                        where: str is the unique identifier name.
      362       362
      363       363             */
      364       364
      365       365             C_ms_ctln(name)
      366       366               char  *name;
      367       367             {
      368       368    1          C_mes_begin(ms_ctln);
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=11 
      369       369    1          C_scon(name, (arith) (strlen(name) + 1));
      370       370    1          C_mes_end();
      371       371    1        }
      372       372
      373       373
      374       374             /*D*    NAME:       C_ms_sfun
      375       375                     PURPOSE:    To indicate the names of all of the static
      376       376                                 functions defined in this file.
      377       377
      378       378                     INPUT:      name     -- a static function name
      379       379                                 code     -- a code to control the message portion
      380       380
      381       381                     OUTPUT:     none.
      382       382
      383       383                     INTERFACE:  C_mes_begin
      384       384                                 C_mes_scon
      385       385                                 C_mes_end
      386       386
      387       387                     DESCRIPTION:
      388       388
      389       389                        The code parameter controls the portions of this message
      390       390                        that are generated.  The start of the message is signified
      391       391                        by code==0.  The end of the message is signified by
      392       392                        code==2.  All other values of code cause the name to be
      393       393                        added to the message.
      394       394
      395       395             */
      396       396
      397       397             int
      398       398             C_ms_sfun(name,code)
      399       399               char  *name;
      400       400               int   code;
      401       401             {
      402       402    1          if (code == 0)
      403       403    1             C_mes_begin(ms_sfun);
      404       404    1          if (*name)
      405       405    1             C_scon(name, (arith) (strlen(name) + 1));
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=12 
      406       406    1          if (code == 2)
      407       407    1             C_mes_end();
      408       408    1          return 1;
      409       409    1        }
      410       410
      411       411             /*D*    NAME:          C_ms_rfun
      412       412                     PURPOSE:       To provide information concerning a function.
      413       413                     DESCRIPTION:
      414       414                                    This function generates an "em" type 23
      415       415                                    message.  The format of this message is:
      416       416
      417       417                                       MES 23,<pro>,<cst1>,<cst2>,<cst3>
      418       418
      419       419                                    where:
      420       420
      421       421                                    <pro>    is the text of the function name
      422       422                                    <cst1>   0=no arg checking, 1=arg count chk
      423       423                                    <cst2>   0=normal calling sequence
      424       424                                    <cst3>   number of bytes of params to receive
      425       425
      426       426             */
      427       427
      428       428             C_ms_rfun(fun, chk, ctyp, nparm)
      429       429               char  *fun;
      430       430               int   chk, ctyp, nparm;
      431       431             {
      432       432    1          C_mes_begin(ms_rfun);
      433       433    1          C_scon(fun,   (arith)(strlen(fun)   + 1));
      434       434    1          C_cst( (arith) chk );
      435       435    1          C_cst( (arith) ctyp);
      436       436    1          C_cst( (arith) nparm);
      437       437    1          C_mes_end();
      438       438    1        }
      439       439
---  Include file information  ---

   em:h.:ZBC3TOU. is referenced
CC.C03    File=zbm$em_mes$C_ms_debug:c.:ZBC3TSI                                     Fri Aug 22 1997  Page=13 
   em_arith:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   em_code:h.:ZBC3TOU. is referenced
   em_mes:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbm$em_mes$C_ms_debug:c.:ZBC3TSI
