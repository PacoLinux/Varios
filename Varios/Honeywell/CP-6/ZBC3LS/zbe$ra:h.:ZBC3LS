

12:37 AUG 20 '97 zbe$ra:h.:ZBC3TSI                                         1    
    1      /* $Header: ra.h,v 1.4 87/03/10 11:21:09 ceriel Exp $ */
    2      /*
    3       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    4       * See the copyright notice in the ACK home directory, in the file "Copyright".
    5       */
    6      /*
    7       *   R E G I S T E R    A L L O C A T I O N
    8       *
    9       */
   10
   11      /* TEMPORARY: should be put in ../../../h/em_mes.h: */
   12      #define ms_liv 9
   13      #define ms_ded 10
   14
   15      #define INFINITE   10000
   16      #define NRREGTYPES (reg_float+1)
   17
   18      extern int nrinstrs;  /* number of instructions of current procedure */
   19      extern line_p *instrmap;
   20      /* Dynamic array: instrmap[i] points to i'th instruction */
   21
   22      extern cond_p alocaltab[NRREGTYPES][NRREGTYPES],
   23       alocaddrtab[NRREGTYPES][NRREGTYPES], aconsttab,
   24       adconsttab,aglobaltab,aproctab;
   25      extern cond_p olocaltab[NRREGTYPES],olocaddrtab[NRREGTYPES],
   26       oconsttab,odconsttab,oglobaltab,oproctab;
   27      extern cond_p regsav_cost;
   28
   29      /* Register Allocation */
   30      typedef struct item *item_p;
   31      typedef struct allocation *alloc_p;
   32      typedef struct interval *interv_p;
   33      typedef struct time *time_p;
   34
   35
   36
   37
12:37 AUG 20 '97 zbe$ra:h.:ZBC3TSI                                         2    
   38      extern short regs_available[];  /* contains #registers of every type */
   39
   40
   41      /* A thing that can be put in a register is called an "item". The are several
   42       * types of items: a local variable, the address of a local variable,
   43       * the address of a global variable, the address of a procedure,
   44       * a word-size constant and a doubleword- size constant.
   45       */
   46
   47      #define LOCALVAR   0
   48      #define LOCAL_ADDR 1
   49      #define GLOBL_ADDR 2
   50      #define PROC_ADDR  3
   51      #define CONST      4
   52      #define DCONST     5
   53
   54      #define NO_ITEM    6
   55      #define NRITEMTYPES   6
   56
   57      struct item {
   58       item_p     it_next;  /* link to next item is list     */
   59       short   it_type;  /* its type; see above        */
   60       short   it_regtype;  /* preferred type of register    */
   61       short   it_size;  /* its size (in bytes)        */
   62       short   it_lastlive; /* temporary, used to build livetime   */
   63       lset    it_usage; /* all points in text where item is used*/
   64       interv_p  it_lives;  /* intervals during which item is live */
   65       bool    it_desirable; /* should this item be put in reg.?   */
   66       union {
   67          obj_p it_obj;     /* for GLOBL_ADDR       */
   68          proc_p   it_proc; /* for PROC_ADDR     */
   69          offset   it_off;     /* for others        */
   70       } i_t;
   71      };
   72
   73
   74      /* A 'point in time' is defined by a (line,basic block) pair */
12:37 AUG 20 '97 zbe$ra:h.:ZBC3TSI                                         3    
   75
   76      struct time {
   77       line_p     t_line;   /* point in EM text        */
   78       bblock_p  t_bblock;  /* its basic block         */
   79      };
   80
   81
   82      struct interval {
   83       short  i_start;   /* number of first instruction      */
   84       short  i_stop; /* number of last instruction    */
   85       interv_p i_next;
   86      };
   87
   88
   89      /* An item may be put in a register for the duration of a whole procedure
   90       * or part of a procedure (e.g. a loop). So a possible "allocation" looks
   91       * like: put item X in a register during the timespan T (which is a subset
   92       * of the timespan of the entire procedure). The packing process deals
   93       * with allocations, rather than items. One item may be part of several
   94       * possible allocations.
   95       */
   96
   97      struct allocation {
   98       item_p     al_item;  /* the item to be put in a register   */
   99       short   al_id; /* unique identifying number       */
  100       short   al_regtype;  /* the register type to be used       */
  101       interv_p  al_timespan;  /* timespan during which item is in reg.  */
  102       short   al_profits;  /* gains of putting item in register     */
  103       cset    al_rivals;   /* set of allocations competing with it   */
  104       short   al_susecount;   /* #usages during timespan (statically)   */
  105       short   al_dusecount;   /* #usages (dynamically, estimate)    */
  106       lset    al_inits; /* points where reg. must be initialized  */
  107       interv_p  al_busy;   /* used to compute rivals       */
  108       short   al_regnr; /* register nr.,if it is granted a reg.   */
  109       offset     al_dummy; /* dummy local variable,if granted a reg  */
  110       alloc_p    al_mates; /* link to allocations packed in same reg */
  111       alloc_p    al_wholeproc;   /* alloc. for whole proc as timespan     */
12:37 AUG 20 '97 zbe$ra:h.:ZBC3TSI                                         4    
  112       short   al_cntrivals; /* # unpacked rivals ; used for cost estim. */
  113       bool    al_isloop;   /* true if timespan consists of loop     */
  114       bool    al_iswholeproc;/*true if timespan consists of whole proc*/
  115       alloc_p    al_next;  /* link to next one in a list      */
  116      };
  117
  118      extern short alloc_id;  /* last al_id used for current procedure */
  119
  120      #define LP_BLOCKS  lp_extend->lpx_ra.lpx_blocks
  121      #define LP_HEADER  lp_extend->lpx_ra.lpx_header
  122      #define B_BEGIN    b_extend->bx_ra.bx_begin
  123      #define B_END      b_extend->bx_ra.bx_end
  124
  125      #define DLINK(l1,l2)  l1->l_next=l2; l2->l_prev=l1
  126
  127      struct item_descr {
  128       int   id_type;
  129       int   id_replindex;
  130      } ;
  131
  132      extern struct item_descr itemtab[];
  133
  134      #define newalloc() (alloc_p) newstruct(allocation)
  135      #define  oldalloc(a)  oldstruct(allocation,a)
  136      #define newitem()  (item_p) newstruct(item)
  137      #define olditem(i) oldstruct(item,i)
  138      #define newtime()  (time_p) newstruct(time)
  139      #define oldtime(t) oldstruct(time,t)
  140      #define newinterval() (interv_p) newstruct(interval)
  141      #define oldinterval(i)   oldstruct(interval,i)
  142

