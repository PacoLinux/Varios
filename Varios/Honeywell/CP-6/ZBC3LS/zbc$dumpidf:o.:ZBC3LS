

CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: dumpidf.c,v 3.13 87/03/10 17:14:48 ceriel Exp $ */
        6         6             /*  DUMP ROUTINES  */
        7         7
        8         8             #include "debug:h"
        9         9
       10        10             #include "nofloat:h"
       11        11             #include "nopp:h"
       12        12             #include "nobitfield:h"
       13        13             #include "arith:h"
       14        14             #include "stack:h"
       15        15             #include "idf:h"
       16        16             #include "def:h"
       17        17             #include "type:h"
       18        18             #include "struct:h"
       19        19             #include "field:h"
       20        20             #include "Lpars:h"
       21        21             #include "label:h"
       22        22             #include "expr:h"
       23        23             #include "static:h"
       24        24
       25        25             /*  Some routines (symbol2str, token2str, type2str) which should have
       26        26              *  yielded strings are written to yield a pointer to a transient piece
       27        27              *  of memory, containing the string, since this is the only reasonable
       28        28              *  thing to do in C. `Transient' means that the result may soon
       29        29              *  disappear, which is generally not a problem, since normally it is
       30        30              *  consumed immediately. Sometimes we need more than one of them, and
       31        31              *  MAXTRANS is the maximum number we will need simultaneously.
       32        32              */
       33        33             #define   MAXTRANS 6
       34        34
       35        35             extern char options[];
       36        36
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37             extern char *sprint();
       38        38
       39        39             extern struct idf *idf_hashtable[];
       40        40             extern char *symbol2str(), *type2str(), *next_transient();
       41        41
       42        42             enum sdef_kind {selector, field};    /* parameter for dumpsdefs */
       43        43
       44        44             static int dumplevel;
       45        45
       46        46             static
       47        47             newline() {
       48        48    1         register int dl = dumplevel;
       49        49    1
       50        50    1         print("\n");
       51        51    1         while (dl >= 2)   {
       52        52    2            print("\t");
       53        53    2            dl -= 2;
       54        54    2         }
       55        55    1         if (dl)
       56        56    1            print("    ");
       57        57    1        }
       58        58
       59        59             dumpidftab(msg, opt)
       60        60              char msg[];
       61        61             {
       62        62    1         /* Dumps the identifier table in readable form (but in
       63        63    1            arbitrary order).
       64        64    1            Unless opt & 1, macros are not dumped.
       65        65    1            Unless opt & 2, reserved identifiers are not dumped.
       66        66    1            Unless opt & 4, universal identifiers are not dumped.
       67        67    1         */
       68        68    1         int i;
       69        69    1
       70        70    1         print(">>> DUMPIDF, %s (start)", msg);
       71        71    1         dumpstack();
       72        72    1         for (i = 0; i < HASHSIZE; i++)   {
       73        73    2            register struct idf *notch = idf_hashtable[i];
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74    2
       75        75    2            while (notch)  {
       76        76    3               dumpidf(notch, opt);
       77        77    3               notch = notch->next;
       78        78    3            }
       79        79    2         }
       80        80    1         newline();
       81        81    1         print(">>> DUMPIDF, %s (end)\n", msg);
       82        82    1        }
       83        83
       84        84             dumpstack()
       85        85             {
       86        86    1         /* Dumps the identifier stack, starting at the top.
       87        87    1         */
       88        88    1         register struct stack_level *stl = local_level;
       89        89    1
       90        90    1         while (stl) {
       91        91    2            register struct stack_entry *se = stl->sl_entry;
       92        92    2
       93        93    2            newline();
       94        94    2            print("%3d: ", stl->sl_level);
       95        95    2            while (se)  {
       96        96    3               print("%s ", se->se_idf->id_text);
       97        97    3               se = se->next;
       98        98    3            }
       99        99    2            stl = stl->sl_previous;
      100       100    2         }
      101       101    1         print("\n");
      102       102    1        }
      103       103
      104       104             dumpidf(idf, opt)
      105       105              register struct idf *idf;
      106       106             {
      107       107    1         /* All information about the identifier idf is divulged in a
      108       108    1            hopefully readable format.
      109       109    1         */
      110       110    1         int started = 0;
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111    1
      112       112    1         if (!idf)
      113       113    1            return;
      114       114    1        #ifndef NOPP
      115       115    1         if ((opt&1) && idf->id_macro) {
      116       116    2            if (!started++)   {
      117       117    3               newline();
      118       118    3               print("%s:", idf->id_text);
      119       119    3            }
      120       120    2            print(" macro");
      121       121    2         }
      122       122    1        #endif NOPP
      123       123    1         if ((opt&2) && idf->id_reserved) {
      124       124    2            if (!started++)   {
      125       125    3               newline();
      126       126    3               print("%s:", idf->id_text);
      127       127    3            }
      128       128    2            print(" reserved: %d;", idf->id_reserved);
      129       129    2         }
      130       130    1         if (idf->id_def && ((opt&4) || idf->id_def->df_level))   {
      131       131    2            if (!started++)   {
      132       132    3               newline();
      133       133    3               print("%s:", idf->id_text);
      134       134    3            }
      135       135    2            dumpdefs(idf->id_def, opt);
      136       136    2         }
      137       137    1         if (idf->id_sdef) {
      138       138    2            if (!started++)   {
      139       139    3               newline();
      140       140    3               print("%s:", idf->id_text);
      141       141    3            }
      142       142    2            dumpsdefs(idf->id_sdef, selector);
      143       143    2         }
      144       144    1         if (idf->id_struct)  {
      145       145    2            if (!started++)   {
      146       146    3               newline();
      147       147    3               print("%s:", idf->id_text);
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    3            }
      149       149    2            dumptags(idf->id_struct);
      150       150    2         }
      151       151    1         if (idf->id_enum) {
      152       152    2            if (!started++)   {
      153       153    3               newline();
      154       154    3               print("%s:", idf->id_text);
      155       155    3            }
      156       156    2            dumptags(idf->id_enum);
      157       157    2         }
      158       158    1        }
      159       159
      160       160             dumpdefs(def, opt)
      161       161              register struct def *def;
      162       162             {
      163       163    1         dumplevel++;
      164       164    1         while (def && ((opt&4) || def->df_level)) {
      165       165    2            newline();
      166       166    2            print("L%d: %s %s%s%s%s%s %lo;",
      167       167    2               def->df_level,
      168       168    2               symbol2str(def->df_sc),
      169       169    2               (def->df_register != REG_NONE) ? "reg " : "",
      170       170    2               def->df_initialized ? "init'd " : "",
      171       171    2               def->df_used ? "used " : "",
      172       172    2               type2str(def->df_type, (char *)0),
      173       173    2               def->df_sc == ENUM ? ", =" : " at",
      174       174    2               def->df_address
      175       175    2            );
      176       176    2            def = def->next;
      177       177    2         }
      178       178    1         dumplevel--;
      179       179    1        }
      180       180
      181       181             dumptags(tag)
      182       182              register struct tag *tag;
      183       183             {
      184       184    1         dumplevel++;
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185    1         while (tag) {
      186       186    2            register struct type *tp = tag->tg_type;
      187       187    2            register int fund = tp->tp_fund;
      188       188    2
      189       189    2            newline();
      190       190    2            print("L%d: %s %s",
      191       191    2               tag->tg_level,
      192       192    2               fund == STRUCT ? "struct" :
      193       193    2               fund == UNION ? "union" :
      194       194    2               fund == ENUM ? "enum" : "<UNKNOWN>",
      195       195    2               tp->tp_idf->id_text
      196       196    2            );
      197       197    2            if (is_struct_or_union(fund)) {
      198       198    3               print(" {");
      199       199    3               dumpsdefs(tp->tp_sdef, field);
      200       200    3               newline();
      201       201    3               print("}");
      202       202    3            }
      203       203    2            print(";");
      204       204    2            tag = tag->next;
      205       205    2         }
      206       206    1         dumplevel--;
      207       207    1        }
      208       208
      209       209             dumpsdefs(sdef, sdk)
      210       210              register struct sdef *sdef;
      211       211              enum sdef_kind sdk;
      212       212             {
      213       213    1         /* Since sdef's are members of two chains, there are actually
      214       214    1            two dumpsdefs's, one following the chain of all selectors
      215       215    1            belonging to the same idf, starting at idf->id_sdef;
      216       216    1            and the other following the chain of all selectors belonging
      217       217    1            to the same struct, starting at stp->tp_sdef.
      218       218    1         */
      219       219    1
      220       220    1         dumplevel++;
      221       221    1         while (sdef)   {
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      222       222    2            newline();
      223       223    2            print("L%d: ", sdef->sd_level);
      224       224    2        /* field/selector name is "sdef->sd_idf->id_text"    */
      225       225    2        #ifndef NOBITFIELD
      226       226    2            if (sdk == selector)
      227       227    2        #endif NOBITFIELD
      228       228    2               print("selector %s at offset %lu in %s;",
      229       229    2                  type2str(sdef->sd_type, (char *)0),
      230       230    2                  sdef->sd_offset, type2str(sdef->sd_stype, (char *)0)
      231       231    2               );
      232       232    2        #ifndef NOBITFIELD
      233       233    2            else  print("field %s at offset %lu;",
      234       234    2                  type2str(sdef->sd_type, (char *)0), sdef->sd_offset
      235       235    2               );
      236       236    2        #endif NOBITFIELD
      237       237    2            sdef = (sdk == selector ? sdef->next : sdef->sd_sdef);
      238       238    2         }
      239       239    1         dumplevel--;
      240       240    1        }
      241       241
      242       242             char *
      243       243             type2str(tp, bf)
      244       244              register struct type *tp;
      245       245              register char *bf;
      246       246             {
      247       247    1         /* Yields a pointer to a one-line description of the type tp.
      248       248    1         */
      249       249    1         char *buf;
      250       250    1         int ops = 1;
      251       251    1
      252       252    1         if (!bf) {
      253       253    2            buf = next_transient();
      254       254    2            buf[0] = '\0';
      255       255    2            }
      256       256    1         else buf = bf;
      257       257    1         if (!tp) {
      258       258    2            sprint(buf, "%s<NILTYPE>", buf);
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      259       259    2            return buf;
      260       260    2         }
      261       261    1         sprint(buf, "%s(@%lx, #%ld, &%d) ", buf,
      262       262    1               tp, (long)tp->tp_size, tp->tp_align);
      263       263    1         while (ops) {
      264       264    2            if (tp->tp_volatile) sprintf(buf,"%svolatile ",buf);
      265       265    2            if (tp->tp_const) sprintf(buf,"%sconst ",buf);
      266       266    2            switch (tp->tp_fund) {
      267       267    3            case POINTER:
      268       268    3               sprint(buf, "%spointer to ", buf);
      269       269    3               break;
      270       270    3            case ARRAY:
      271       271    3               sprint(buf, "%sarray [%ld] of ", buf, tp->tp_size);
      272       272    3               break;
      273       273    3            case FUNCTION:
      274       274    3               if (tp->tp_formal) {
      275       275    4                  struct formallist *fl = tp->tp_formal;
      276       276    4                  int i, mx = fl->fl_num;
      277       277    4                  sprintf(buf, "%sfunction with prototype(", buf);
      278       278    4                  for (i=0 ; i<mx ; i++) {
      279       279    5                     if (i == mx-1)
      280       280    5                        type2str(fl->fl_type[i], buf);
      281       281    5                     else sprint(buf, "%s, ", type2str(fl->fl_type[i], buf));
      282       282    5                     }
      283       283    4                  sprintf(buf,"%s) yielding ",buf);
      284       284    4                  }
      285       285    3               else sprint(buf, "%sfunction yielding ", buf);
      286       286    3               break;
      287       287    3            default:
      288       288    3               sprint(buf, "%s%s%s", buf,
      289       289    3                     ( !tp->tp_unsigned ) ? "" :
      290       290    3                        (tp->tp_unsigned == SIGNED)? "signed " :
      291       291    3                        (tp != char_type) ? "unsigned " : "",
      292       292    3                     symbol2str(tp->tp_fund)
      293       293    3               );
      294       294    3               if (tp->tp_idf)
      295       295    3                  sprint(buf, "%s %s", buf,
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      296       296    3                     tp->tp_idf->id_text);
      297       297    3        #ifndef NOBITFIELD
      298       298    3               if (tp->tp_field) {
      299       299    4                  struct field *fd = tp->tp_field;
      300       300    4
      301       301    4                  sprint(buf, "%s [s=%ld,w=%ld] of ", buf,
      302       302    4                     fd->fd_shift, fd->fd_width);
      303       303    4               }
      304       304    3               else
      305       305    3        #endif NOBITFIELD
      306       306    3               ops = 0;
      307       307    3               break;
      308       308    3            }
      309       309    2            tp = tp->tp_up;
      310       310    2         }
      311       311    1         return buf;
      312       312    1        }
      313       313
      314       314             GSTATIC char trans_buf[MAXTRANS][300];
      315       315
      316       316             char *    /* the ultimate transient buffer supplier */
      317       317             next_transient()
      318       318             {
      319       319    1         static int bnum;
      320       320    1
      321       321    1         if (++bnum == MAXTRANS)
      322       322    1            bnum = 0;
      323       323    1         return trans_buf[bnum];
      324       324    1        }
      325       325
      326       326             print_expr(msg, expr)
      327       327              char msg[];
      328       328              struct expr *expr;
      329       329             {
      330       330    1         /* Provisional routine to print an expression preceded by a
      331       331    1            message msg.
      332       332    1         */
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      333       333    1         if (options['x']) {
      334       334    2            print("\n%s: ", msg);
      335       335    2            print("(L=line, T=type, r/lV=r/lvalue, F=flags, D=depth)\n");
      336       336    2            p1_expr(0, expr);
      337       337    2         }
      338       338    1        }
      339       339
      340       340             p1_expr(lvl, expr)
      341       341              register struct expr *expr;
      342       342             {
      343       343    1         extern char *type2str(), *symbol2str();
      344       344    1
      345       345    1         p1_indent(lvl);
      346       346    1         if (!expr)  {
      347       347    2            print("NILEXPR\n");
      348       348    2            return;
      349       349    2         }
      350       350    1         print("expr: L=%u, T=%s, %cV, F=%03o, D=%d, %s: ",
      351       351    1            expr->ex_line,
      352       352    1            type2str(expr->ex_type, (char *)0),
      353       353    1            expr->ex_lvalue ? 'l' : 'r',
      354       354    1            expr->ex_flags & 0xFF,
      355       355    1            expr->ex_depth,
      356       356    1            expr->ex_class == Value ? "Value" :
      357       357    1            expr->ex_class == String ? "String" :
      358       358    1        #ifndef NOFLOAT
      359       359    1            expr->ex_class == Float ? "Float" :
      360       360    1        #endif NOFLOAT
      361       361    1            expr->ex_class == Oper ? "Oper" :
      362       362    1            expr->ex_class == Type ? "Type" : "UNKNOWN CLASS"
      363       363    1         );
      364       364    1         switch (expr->ex_class) {
      365       365    2            struct oper *o;
      366       366    2         case Value:
      367       367    2            switch (expr->VL_CLASS) {
      368       368    3            case Const:
      369       369    3               print("(Const) ");
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      370       370    3               break;
      371       371    3            case Name:
      372       372    3               print("(Name) %s + ", expr->VL_IDF->id_text);
      373       373    3               break;
      374       374    3            case Label:
      375       375    3               print("(Label) .%lu + ", expr->VL_LBL);
      376       376    3               break;
      377       377    3            default:
      378       378    3               print("(Unknown) ");
      379       379    3               break;
      380       380    3            }
      381       381    2            print(expr->ex_type->tp_unsigned == UNSIGNED ? "%lu\n" : "%ld\n",
      382       382    2               expr->VL_VALUE);
      383       383    2            break;
      384       384    2         case String:
      385       385    2         {
      386       386    3            char *bts2str();
      387       387    3
      388       388    3            print(
      389       389    3               "%s\n",
      390       390    3               bts2str(expr->SG_VALUE, expr->SG_LEN, next_transient())
      391       391    3            );
      392       392    3            break;
      393       393    3         }
      394       394    2        #ifndef NOFLOAT
      395       395    2         case Float:
      396       396    2        #ifdef FLOATOPT
      397       397    2            print("%g\n", expr->FL_VALUE);
      398       398    2        #else
      399       399   *S*           print("%s\n", expr->FL_VALUE);
      400       400   *S*       #endif /* FLOATOPT */
      401       401    2            break;
      402       402    2        #endif NOFLOAT
      403       403    2         case Oper:
      404       404    2            o = &expr->ex_object.ex_oper;
      405       405    2            print("\n");
      406       406    2            p1_expr(lvl+1, o->op_left);
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
      407       407    2            p1_indent(lvl);
      408       408    2            print("%s <%s>\n", symbol2str(o->op_oper),
      409       409    2               type2str(o->op_type, (char *)0)
      410       410    2            );
      411       411    2            p1_expr(lvl+1, o->op_right);
      412       412    2            break;
      413       413    2         case Type:
      414       414    2            print("\n");
      415       415    2            break;
      416       416    2         default:
      417       417    2            print("UNKNOWN CLASS\n");
      418       418    2            break;
      419       419    2         }
      420       420    1        }
      421       421
      422       422             p1_indent(lvl)
      423       423              register int lvl;
      424       424             {
      425       425    1         while (lvl--)
      426       426    1            print("  ");
      427       427    1        }
---  Include file information  ---

   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$stack:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$struct:h.:ZBC3TOU. is referenced
   zbc$field:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$dumpidf:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=13 
   zbc$label:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$static:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$dumpidf:c.:ZBC3TSI
