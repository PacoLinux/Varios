

11:49 AUG 20 '97 zbc$tokenname:c.:ZBC3TSI                                  1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: tokenname.c,v 3.1 87/03/10 17:50:00 ceriel Exp $ */
    6      /* TOKEN NAME DEFINITIONS */
    7
    8      #include  "idf.h"
    9      #include  "arith.h"
   10      #include  "LLlex.h"
   11      #include  "tokenname.h"
   12      #include  "Lpars.h"
   13
   14      /*  To centralize the declaration of %tokens, their presence in this
   15       file is taken as their declaration. The Makefile will produce
   16       a grammar file (tokenfile.g) from this file.
   17       Moreover, rather than looking up a symbol in all these lists
   18       to find its printable name, a fast version of symbol2str() is
   19       generated from these tables.
   20       Consequenty some of these tables are not referenced explicitly
   21       in the C text any more.  To save space and to avoid lint confusion,
   22       these have been made pseudo-invisible by #ifdefs.
   23      */
   24
   25      #ifdef ____
   26      struct tokenname tkspec[] = {  /* the names of the special tokens */
   27       {IDENTIFIER, "identifier"},
   28       {TYPE_IDENTIFIER, "type_identifier"},
   29       {STRING, "string"},
   30       {FILESPECIFIER, "filespecifier"},
   31       {INTEGER, "integer"},
   32       {FLOATING, "floating"},
   33       {0, ""}
   34      };
   35      #endif ____
   36
   37      #ifdef ____
11:49 AUG 20 '97 zbc$tokenname:c.:ZBC3TSI                                  2    
   38      struct tokenname tkcomp[] = {  /* names of the composite tokens */
   39       {NOTEQUAL, "!="},
   40       {AND, "&&"},
   41       {PLUSPLUS, "++"},
   42       {MINMIN, "--"},
   43       {ARROW, "->"},
   44       {LEFT, "<<"},
   45       {LESSEQ, "<="},
   46       {EQUAL, "=="},
   47       {GREATEREQ, ">="},
   48       {RIGHT, ">>"},
   49       {OR, "||"},
   50       {ELIPSIS, "..."},
   51       {0, ""}
   52      };
   53      #endif ____
   54
   55      struct tokenname tkidf[] =  {  /* names of the identifier tokens */
   56       {AUTO, "auto"},
   57       {BREAK, "break"},
   58       {CASE, "case"},
   59       {CONTINUE, "continue"},
   60       {DEFAULT, "default"},
   61       {DO, "do"},
   62       {ELSE, "else"},
   63       {ENUM, "enum"},
   64       {EXTERN, "extern"},
   65       {FOR, "for"},
   66       {GOTO, "goto"},
   67       {IF, "if"},
   68       {LONG, "long"},
   69       {REGISTER, "register"},
   70       {RETURN, "return"},
   71       {SHORT, "short"},
   72       {SIZEOF, "sizeof"},
   73       {ALIGNOF, "__alignof"},
   74       {STATIC, "static"},
11:49 AUG 20 '97 zbc$tokenname:c.:ZBC3TSI                                  3    
   75       {STRUCT, "struct"},
   76       {SWITCH, "switch"},
   77       {TYPEDEF, "typedef"},
   78       {UNION, "union"},
   79       {UNSIGNED, "unsigned"},
   80       {WHILE, "while"},
   81       {SIGNED, "signed"},
   82       {CONST, "const"},
   83       {VOLATILE, "volatile"},
   84       {0, ""}
   85      };
   86
   87      struct tokenname tkother[] =   {  /* additional keywords from the RM */
   88       {ENTRY, "entry"},
   89       {FORTRAN, "fortran"},
   90       {0, ""}
   91      };
   92
   93      struct tokenname tkasm[] =  {  /* asm keyword for +a option */
   94       {ASM, "asm"},
   95       {0, ""}
   96      };
   97
   98      struct tokenname tkpc[] =   {  /* asm keyword for +8 option */
   99       {NEAR, "near"},
  100       {FAR, "far"},
  101       {0, ""}
  102      };
  103
  104      #ifdef ____
  105      struct tokenname tkfunny[] =   {  /* internal keywords */
  106       {CHAR, "char"},
  107       {INT, "int"},
  108       {FLOAT, "float"},
  109       {DOUBLE, "double"},
  110       {VOID, "void"},
  111
11:49 AUG 20 '97 zbc$tokenname:c.:ZBC3TSI                                  4    
  112       {ARRAY, "array"},
  113       {FUNCTION, "function"},
  114       {POINTER, "pointer"},
  115       {FIELD, "field"},
  116       {NEWLINE, "newline"},
  117
  118       {GLOBAL, "global"},
  119       {IMPLICIT, "implicit"},
  120       {FORMAL, "formal"},
  121       {LABEL, "label"},
  122       {ERRONEOUS, "erroneous"},
  123
  124       {PARCOMMA, "parcomma"},
  125       {INITCOMMA, "initcomma"},
  126       {CAST, "cast"},
  127       {POSTINCR, "postfix ++"},
  128       {POSTDECR, "postfix --"},
  129       {PLUSAB, "+="},
  130       {MINAB, "-="},
  131       {TIMESAB, "*="},
  132       {DIVAB, "/="},
  133       {MODAB, "%="},
  134       {LEFTAB, "<<="},
  135       {RIGHTAB, ">>="},
  136       {ANDAB, "&="},
  137       {XORAB, "^="},
  138       {ORAB, "|="},
  139
  140       {INT2INT, "int2int"},
  141       {INT2FLOAT, "int2float"},
  142       {FLOAT2INT, "float2int"},
  143       {FLOAT2FLOAT, "float2float"},
  144       {INT2PTR, "int2ptr"},
  145       {PTR2INT, "ptr2int"},
  146       {UNSIGNEDLONG, "unsigned long"},
  147       {0, ""}
  148      };
11:49 AUG 20 '97 zbc$tokenname:c.:ZBC3TSI                                  5    
  149      #endif ____
  150
  151      reserve(resv)
  152       register struct tokenname resv[];
  153      {
  154       /* The names of the tokens described in resv are entered
  155          as reserved words.
  156       */
  157       while (resv->tn_symbol) {
  158          struct idf *idf = str2idf(resv->tn_name);
  159
  160          if (idf->id_reserved)
  161             fatal("maximum identifier length insufficient");
  162          idf->id_reserved = resv->tn_symbol;
  163          resv++;
  164       }
  165      }
  166

