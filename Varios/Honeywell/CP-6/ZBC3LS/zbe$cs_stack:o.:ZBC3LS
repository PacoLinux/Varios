

CC.C03    File=zbe$cs_stack:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cs_stack.c,v 1.4 87/03/10 10:59:52 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*
        7         7              * S T A C K   M O D U L E
        8         8              */
        9         9             #include "types:h"
       10        10             #include "global:h"
       11        11             #include "debug:h"
       12        12             #include "aux:h"
       13        13             #include "cs:h"
       14        14             #include "cs_aux:h"
       15        15
       16        16             #define STACK_DEPTH   250
       17        17
       18        18             STATIC struct token   Stack[STACK_DEPTH];
       19        19             STATIC token_p     free_token;
       20        20
       21        21             #define Delete_top()  {--free_token; }
       22        22             #define Empty_stack() {free_token = &Stack[0]; }
       23        23             #define Stack_empty() (free_token == &Stack[0])
       24        24             #define Top     (free_token - 1)
       25        25
       26        26             Push(tkp)
       27        27              token_p tkp;
       28        28             {
       29        29    1         if (tkp->tk_size == UNKNOWN_SIZE) {
       30        30    2            Empty_stack(); /* The contents of the Stack is useless. */
       31        31    2         } else {
       32        32    2            assert(free_token < &Stack[STACK_DEPTH]);
       33        33    2
       34        34    2            free_token->tk_vn = tkp->tk_vn;
       35        35    2            free_token->tk_size = tkp->tk_size;
       36        36    2            free_token++->tk_lfirst = tkp->tk_lfirst;
CC.C03    File=zbe$cs_stack:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=2  
       37        37    2         }
       38        38    1        }
       39        39
       40        40             #define WORD_MULTIPLE(n) ((n / ws) * ws + ( n % ws ? ws : 0 ))
       41        41
       42        42             Pop(tkp, size)
       43        43              token_p tkp;
       44        44              offset size;
       45        45             {
       46        46    1         /* Pop a token with given size from the valuenumber stack into tkp. */
       47        47    1
       48        48    1         /* First simple case. */
       49        49    1         if (size != UNKNOWN_SIZE && !Stack_empty() && size == Top->tk_size) {
       50        50    2            tkp->tk_vn = Top->tk_vn;
       51        51    2            tkp->tk_size = size;
       52        52    2            tkp->tk_lfirst = Top->tk_lfirst;
       53        53    2            Delete_top();
       54        54    2            return;
       55        55    2         }
       56        56    1         /* Now we're in trouble: we must pop something that is not there!
       57        57    1          * We just put a dummy into tkp and pop tokens until we've
       58        58    1          * popped size bytes.
       59        59    1          */
       60        60    1         /* Create dummy. */
       61        61    1         tkp->tk_vn = newvalnum();
       62        62    1         tkp->tk_lfirst = (line_p) 0;
       63        63    1
       64        64    1         /* Now fiddle with the Stack. */
       65        65    1         if (Stack_empty()) return;
       66        66    1         if (size == UNKNOWN_SIZE) {
       67        67    2            Empty_stack();
       68        68    2            return;
       69        69    2         }
       70        70    1         if (size > Top->tk_size) {
       71        71    2            while (!Stack_empty() && size >= Top->tk_size) {
       72        72    3               size -= Top->tk_size;
       73        73    3               Delete_top();
CC.C03    File=zbe$cs_stack:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=3  
       74        74    3            }
       75        75    2         }
       76        76    1         /* Now Stack_empty OR size < Top->tk_size. */
       77        77    1         if (!Stack_empty()) {
       78        78    2            if (Top->tk_size - size < ws) {
       79        79    3               Delete_top();
       80        80    3            } else {
       81        81    3               Top->tk_vn = newvalnum();
       82        82    3               Top->tk_size -= WORD_MULTIPLE(size);
       83        83    3            }
       84        84    2         }
       85        85    1        }
       86        86
       87        87             Dup(lnp)
       88        88              line_p lnp;
       89        89             {
       90        90    1         /* Duplicate top bytes on the Stack. */
       91        91    1
       92        92    1         register token_p bottom = Top;
       93        93    1         register token_p oldtop = Top;
       94        94    1         register offset   nbytes = off_set(lnp);
       95        95    1         struct token dummy;
       96        96    1
       97        97    1         /* Find the bottom of the bytes to be duplicated.
       98        98    1          * It is possible that we cannot find it.
       99        99    1          */
      100       100    1         while (bottom > &Stack[0] && bottom->tk_size < nbytes) {
      101       101    2            nbytes -= bottom->tk_size;
      102       102    2            bottom--;
      103       103    2         }
      104       104    1
      105       105    1         if (bottom < &Stack[0]) {
      106       106    2            /* There was nothing. */
      107       107    2            dummy.tk_vn = newvalnum();
      108       108    2            dummy.tk_size = nbytes;
      109       109    2            dummy.tk_lfirst = lnp;
      110       110    2            Push(&dummy);
CC.C03    File=zbe$cs_stack:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=4  
      111       111    2         } else {
      112       112    2            if (bottom->tk_size < nbytes) {
      113       113    3               /* Not enough, bottom == &Stack[0]. */
      114       114    3               dummy.tk_vn = newvalnum();
      115       115    3               dummy.tk_size = nbytes - bottom->tk_size;
      116       116    3               dummy.tk_lfirst = lnp;
      117       117    3               Push(&dummy);
      118       118    3            } else if (bottom->tk_size > nbytes) {
      119       119    3               /* Not integral # tokens. */
      120       120    3               dummy.tk_vn = newvalnum();
      121       121    3               dummy.tk_size = nbytes;
      122       122    3               dummy.tk_lfirst = lnp;
      123       123    3               Push(&dummy);
      124       124    3               bottom++;
      125       125    3            }
      126       126    2            /* Bottom points to lowest token to be dupped. */
      127       127    2            while (bottom <= oldtop) {
      128       128    3               Push(bottom++);
      129       129    3               Top->tk_lfirst = lnp;
      130       130    3            }
      131       131    2         }
      132       132    1        }
      133       133
      134       134
      135       135             /*    This pops the top two items off the stack for a call statement
      136       136                   this is needed because there is an extra lal and loc on the
      137       137                   stack for the return argument location, and number of arguments
      138       138                   passed on the call, respectively.                             */
      139       139
      140       140             Pop_top_of_stack(tkp) {
"zbe$cs_stack:c.:ZBC3TSI", line 140: (warning) identifier "tkp" is not used
      141       141    1        token_p tkp;
"zbe$cs_stack:c.:ZBC3TSI", line 141: (warning) identifier "tkp" is not used
      142       142    1
      143       143    1           if (!Stack_empty()) {
      144       144    2              Delete_top();
      145       145    2              if (!Stack_empty()) {
CC.C03    File=zbe$cs_stack:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=5  
      146       146    3                 Delete_top();
      147       147    3              }
      148       148    2           }
      149       149    1           return;
      150       150    1        }
      151       151
      152       152             clr_stack()
      153       153             {
      154       154    1         free_token = &Stack[0];
      155       155    1        }
      156       156
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$cs:h.:ZBC3TOU. is referenced
   zbe$cs_aux:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbe$cs_stack:c.:ZBC3TSI
