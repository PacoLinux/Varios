

CC.C03    File=zbc$declarator:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: declarator.c,v 3.9 87/03/10 17:10:08 ceriel Exp $ */
        6         6             /*  D E C L A R A T O R   M A N I P U L A T I O N      */
        7         7
        8         8             #include  "botch_free.h"
        9         9             #include  <alloc.h>
       10        10             #include  "arith.h"
       11        11             #include  "type.h"
       12        12             #include  "Lpars.h"
       13        13             #include  "declar.h"
       14        14             #include  "idf.h"
       15        15             #include  "label.h"
       16        16             #include  "expr.h"
       17        17             #include  "sizes.h"
       18        18             #include "level.h"
       19        19
       20        20             struct declarator null_declarator = {0, 0, 0, 0};
       21        21
       22        22             struct type *
       23        23             declare_type(tp, dc)
       24        24              struct type *tp;
       25        25              struct declarator *dc;
       26        26             {
       27        27    1         /* Applies the decl_unary list starting at dc->dc_decl_unary
       28        28    1            to the type tp and returns the result.
       29        29    1         */
       30        30    1         register struct decl_unary *du = dc->dc_decl_unary;
       31        31    1         register struct formal *fms = 0;
       32        32    1
       33        33    1         while (du)  {
       34        34    2            switch (du->du_fund)  {
       35        35    3            case FUNCTION:
       36        36    3               fms = du->du_formal;
CC.C03    File=zbc$declarator:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=2  
       37        37    3               tp = construct_type(du->du_fund, tp, (arith)0, fms);
       38        38    3               break;
       39        39    3            default:
       40        40    3               tp = construct_type(du->du_fund, tp, du->du_count, NO_PARAMS);
       41        41    3            }
       42        42    2            du = du->next;
       43        43    2         }
       44        44    1         if (dc->dc_formal && fms != dc->dc_formal)   {
       45        45    2            fms = dc->dc_formal; /* no real args to FUNCTION */
       46        46    2            dc->dc_formal = 0;
       47        47    2            if (fms->fm_type) {
       48        48    3               unstack_level();
       49        49    3               if (level == L_FORMAL1) unstack_level();
       50        50    3               }
       51        51    2            else error("formal args must be absent or declared with types");
       52        52    2            free_formals(fms);
       53        53    2            }
       54        54    1         return tp;
       55        55    1        }
       56        56
       57        57             add_decl_unary(dc, fund, count, fm)
       58        58              register struct declarator *dc;
       59        59              arith count;
       60        60              struct formal *fm;
       61        61             {
       62        62    1         /* A decl_unary describing a constructor with fundamental
       63        63    1            type fund and with size count is inserted in front of the
       64        64    1            declarator dc.
       65        65    1         */
       66        66    1         register struct decl_unary *new = new_decl_unary();
       67        67    1
       68        68    1         new->next = dc->dc_decl_unary;
       69        69    1         new->du_fund = fund;
       70        70    1         new->du_count = count;
       71        71    1         if (fm)  {
       72        72    2            new->du_formal = fm;
       73        73    2            if (!dc->dc_formal)  {
CC.C03    File=zbc$declarator:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=3  
       74        74    3               /* register the parameters */
       75        75    3               dc->dc_formal = fm;
       76        76    3            }
       77        77    2         }
       78        78    1         else new->du_formal = 0;
       79        79    1         dc->dc_decl_unary = new;
       80        80    1        }
       81        81
       82        82             remove_declarator(dc)
       83        83              struct declarator *dc;
       84        84             {
       85        85    1         /* The decl_unary list starting at dc->dc_decl_unary is
       86        86    1            removed.
       87        87    1         */
       88        88    1         register struct decl_unary *du = dc->dc_decl_unary;
       89        89    1
       90        90    1         while (du)  {
       91        91    2            struct decl_unary *old_du = du;
       92        92    2
       93        93    2            du = du->next;
       94        94    2            free_decl_unary(old_du);
       95        95    2         }
       96        96    1        }
       97        97
       98        98             reject_params(dc, unstk)
       99        99              register struct declarator *dc;
      100       100              register int unstk;
      101       101             {
      102       102    1         /* The declarator is checked to have no parameters, if it
      103       103    1            is a function without a prototype.
      104       104    1         */
      105       105    1         if (unstk && dc->dc_formal && dc->dc_formal->fm_type) {
      106       106    2            unstack_level();
      107       107    2            if (level == L_FORMAL1)
      108       108    2               unstack_level();
      109       109    2            }
      110       110    1         if (dc->dc_formal && !dc->dc_formal->fm_type)   {
CC.C03    File=zbc$declarator:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=4  
      111       111    2            error("formal arguments must be absent or declared with types");
      112       112    2            free_formals(dc->dc_formal);
      113       113    2            if (dc->dc_decl_unary)
      114       114    2               dc->dc_decl_unary->du_formal = 0;
      115       115    2            dc->dc_formal = 0;
      116       116    2            }
      117       117    1        }
      118       118
      119       119             check_array_subscript(expr)
      120       120              register struct expr *expr;
      121       121             {
      122       122    1         arith size = expr->VL_VALUE;
      123       123    1
      124       124    1         if (size < 0)  {
      125       125    2            error("negative number of array elements");
      126       126    2            expr->VL_VALUE = (arith)1;
      127       127    2         }
      128       128    1         else
      129       129    1         if (size == 0) {
      130       130    2            warning("empty array declaration");
      131       131    2         }
      132       132    1         else
      133       133    1         if (size & ~max_unsigned) {   /* absolutely ridiculous */
      134       134    2            expr_error(expr, "overflow in array size");
      135       135    2            expr->VL_VALUE = (arith)1;
      136       136    2         }
      137       137    1        }
      138       138
---  Include file information  ---

   zbc$botch_free:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$declarator:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=5  
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$declar:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$level:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$declarator:c.:ZBC3TSI
