

CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: arith.c,v 3.14 87/03/25 22:40:44 ceriel Exp $ */
        6         6             /*  A R I T H M E T I C   C O N V E R S I O N S   */
        7         7
        8         8             /*  This file contains the routines for the various conversions that
        9         9              may befall operands in C. It is structurally a mess, but I haven't
       10        10              decided yet whether I can't find the right structure or the
       11        11              semantics of C is a mess.
       12        12             */
       13        13
       14        14             #include  "botch_free.h"
       15        15             #include  <alloc.h>
       16        16             #include  "nofloat.h"
       17        17             #include  "nobitfield.h"
       18        18             #include  "idf.h"
       19        19             #include  "arith.h"
       20        20             #include  "type.h"
       21        21             #include  "label.h"
       22        22             #include  "expr.h"
       23        23             #include  "Lpars.h"
       24        24             #include  "field.h"
       25        25             #include  "mes.h"
       26        26             #include  "noRoption.h"
       27        27             #include "zb_target:h"
       28        28             #include "sizes.h"
       29        29
       30        30             extern char *symbol2str();
       31        31             extern char options[];
       32        32
       33        33             int
       34        34             arithbalance(e1p, oper, e2p)   /* RM 6.6 */
       35        35              register struct expr **e1p, **e2p;
       36        36              int oper;
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=2  
       37        37             {
       38        38    1         /* The expressions *e1p and *e2p are balanced to be operands
       39        39    1            of the arithmetic operator oper.
       40        40    1         */
       41        41    1         register int t1, t2, u1, u2, s1, s2;
       42        42    1
       43        43    1         t1 = any2arith(e1p, oper);
       44        44    1         t2 = any2arith(e2p, oper);
       45        45    1
       46        46    1         /* Now t1 and t2 are either INT or LONG or FLOAT or DOUBLE */
       47        47    1        #ifndef NOFLOAT
       48        48    1         if (t1 == DOUBLE && t2 != DOUBLE)
       49        49    1            t2 = int2float(e2p, double_type);
       50        50    1         else
       51        51    1         if (t2 == DOUBLE && t1 != DOUBLE)
       52        52    1            t1 = int2float(e1p, double_type);
       53        53    1         else
       54        54    1         if (t1 == DOUBLE)
       55        55    1            return DOUBLE;
       56        56    1             if (t1 == FLOAT && t2 != FLOAT)
       57        57    1                t2 = int2float(e2p, float_type);
       58        58    1             else if (t2 == FLOAT && t1 != FLOAT)
       59        59    1                t1 = int2float(e1p, float_type);
       60        60    1             else if (t1 == FLOAT) return FLOAT;
       61        61    1        #endif NOFLOAT
       62        62    1
       63        63    1         /* Now they are INT or LONG */
       64        64    1         u1 = (*e1p)->ex_type->tp_unsigned == UNSIGNED;
       65        65    1         s1 = (*e1p)->ex_type->tp_size;
       66        66    1         u2 = (*e2p)->ex_type->tp_unsigned == UNSIGNED;
       67        67    1         s2 = (*e2p)->ex_type->tp_size;
       68        68    1
       69        69    1         /* if either is long, the other will be   */
       70        70    1         if (t1 == LONG && t2 != LONG)   {
       71        71    2             if (options['R'])
       72        72    2                  t2 = int2int(e2p, u2 ? ulong_type : long_type);
       73        73    2             else t2 = int2int(e2p, (s2 < s1 || !u2)? long_type : ulong_type);
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=3  
       74        74    2             }
       75        75    1         else
       76        76    1         if (t2 == LONG && t1 != LONG)   {
       77        77    2             if (options['R'])
       78        78    2                t1 = int2int(e1p, u1 ? ulong_type : long_type);
       79        79    2             else t1 = int2int(e1p, (s1 < s2 || !u1)? long_type : ulong_type);
       80        80    2             }
       81        81    1
       82        82    1         /* For K&R if either is unsigned, the other will be   */
       83        83    1          if (options['R'])    {
       84        84    2             if (u1 &&   !u2)
       85        85    2                t2 = int2int(e2p, (t1 == LONG) ? ulong_type : uint_type);
       86        86    2             else if (!u1 && u2)
       87        87    2                t1 = int2int(e1p, (t2 == LONG) ? ulong_type : uint_type);
       88        88    2             }
       89        89    1          else {
       90        90    2             if (u1 && !u2 && s1 == s2)
       91        91    2                t2 = int2int(e2p, (t1 == LONG) ? ulong_type : uint_type);
       92        92    2             else if (u2 && !u1 && s2 == s1)
       93        93    2                t1 = int2int(e1p, (t2 == LONG) ? ulong_type : uint_type);
       94        94    2             }
       95        95    1
       96        96    1         return t1;
       97        97    1        }
       98        98
       99        99             relbalance(e1p, oper, e2p)
      100       100              register struct expr **e1p, **e2p;
      101       101             {
      102       102    1         /* The expressions *e1p and *e2p are balanced to be operands
      103       103    1            of the relational operator oper.
      104       104    1         */
      105       105    1         if ((*e1p)->ex_type->tp_fund == FUNCTION)
      106       106    1            function2pointer(*e1p);
      107       107    1         if ((*e2p)->ex_type->tp_fund == FUNCTION)
      108       108    1            function2pointer(*e2p);
      109       109    1         if ((*e1p)->ex_type->tp_fund == POINTER)
      110       110    1            ch76pointer(e2p, oper, (*e1p)->ex_type);
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=4  
      111       111    1         else
      112       112    1         if ((*e2p)->ex_type->tp_fund == POINTER)
      113       113    1            ch76pointer(e1p, oper, (*e2p)->ex_type);
      114       114    1         else
      115       115    1            arithbalance(e1p, oper, e2p);
      116       116    1        }
      117       117
      118       118             ch76pointer(expp, oper, tp)
      119       119              struct expr **expp;
      120       120              register struct type *tp;
      121       121             {
      122       122    1         /* Checks whether *expp may be compared to tp using oper,
      123       123    1            as described in chapter 7.6 and 7.7.
      124       124    1            tp is known to be a pointer.
      125       125    1         */
      126       126    1         register struct expr *exp = *expp;
      127       127    1
      128       128    1         if (exp->ex_type->tp_fund == POINTER)  {
      129       129    2            if (exp->ex_type != tp)
      130       130    2               ch7cast(expp, oper, tp);
      131       131    2         }
      132       132    1         else
      133       133    1         if (  is_integral_type(exp->ex_type)
      134       134    1        #ifndef NOROPTION
      135       135    1            &&
      136       136    1            (  !options['R'] /* we don't care */ ||
      137       137    1               (oper == EQUAL || oper == NOTEQUAL || oper == ':')
      138       138    1            )
      139       139    1        #endif NOROPTION
      140       140    1         )     /* ch 7.7 */
      141       141    1            ch7cast(expp, CAST, tp);
      142       142    1         else  {
      143       143    2            expr_error(exp, "%s on %s and pointer",
      144       144    2                  symbol2str(oper),
      145       145    2                  symbol2str(exp->ex_type->tp_fund)
      146       146    2               );
      147       147    2            ch7cast(expp, oper, tp);
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=5  
      148       148    2         }
      149       149    1        }
      150       150
      151       151             int
      152       152             any2arith(expp, oper)
      153       153              register struct expr **expp;
      154       154              register int oper;
      155       155             {
      156       156    1         /* Turns any expression into int_type, long_type or
      157       157    1            double_type.
      158       158    1         */
      159       159    1         struct type *tp = (*expp)->ex_type;
      160       160    1         int sz = tp->tp_size;
      161       161    1         int uns = tp->tp_unsigned == UNSIGNED;
      162       162    1         int fund = tp->tp_fund;
      163       163    1
      164       164    1         switch (fund)  {
      165       165    2         case CHAR:
      166       166    2         case SHORT:
      167       167    2            if ( options['R'] )
      168       168    2               int2int(expp, uns ? uint_type : int_type);
      169       169    2             else int2int(expp, (sz < int_size || !uns) ? int_type : uint_type);
      170       170    2            break;
      171       171    2         case INT:
      172       172    2         case LONG:
      173       173    2            break;
      174       174    2         case ENUM:
      175       175    2            /* test the admissibility of the operator */
      176       176    2            if (  is_test_op(oper) || oper == '=' || oper == PARCOMMA ||
      177       177    2               oper == ',' || oper == ':'
      178       178    2            )  {
      179       179    3               /* allowed by K & R */
      180       180    3            }
      181       181    2            else
      182       182    2        #ifndef NOROPTION
      183       183    2            if (!options['R'])   {
      184       184    3               /* allowed by us */
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=6  
      185       185    3            }
      186       186    2            else
      187       187    2               expr_warning(*expp, "%s on enum", symbol2str(oper));
      188       188    2        #endif NOROPTION
      189       189    2            int2int(expp, int_type);
      190       190    2            break;
      191       191    2        #ifndef   NOFLOAT
      192       192    2         case FLOAT:
      193       193    2            if (options['R'])
      194       194    2               float2float(expp, double_type);
      195       195    2            break;
      196       196    2         case DOUBLE:
      197       197    2            break;
      198       198    2        #endif NOFLOAT
      199       199    2        #ifndef NOBITFIELD
      200       200    2         case FIELD:
      201       201    2            field2arith(expp);
      202       202    2            break;
      203       203    2        #endif NOBITFIELD
      204       204    2         default:
      205       205    2            expr_error(*expp, "operator %s on non-numerical operand (%s)",
      206       206    2               symbol2str(oper), symbol2str(fund));
      207       207    2         case ERRONEOUS:
      208       208    2            erroneous2int(expp);
      209       209    2            break;
      210       210    2         }
      211       211    1
      212       212    1         return (*expp)->ex_type->tp_fund;
      213       213    1        }
      214       214
      215       215             erroneous2int(expp)
      216       216              struct expr **expp;
      217       217             {
      218       218    1         /* the (erroneous) expression *expp is replaced by an
      219       219    1            int expression
      220       220    1         */
      221       221    1         register struct expr *exp = *expp;
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=7  
      222       222    1         int flags = exp->ex_flags;
      223       223    1
      224       224    1         free_expression(exp);
      225       225    1         exp = intexpr((arith)0, INT);
      226       226    1         exp->ex_flags = (flags | EX_ERROR);
      227       227    1         *expp = exp;
      228       228    1        }
      229       229
      230       230             struct expr *
      231       231             arith2arith(tp, oper, expr)
      232       232              struct type *tp;
      233       233              int oper;
      234       234              register struct expr *expr;
      235       235             {
      236       236    1         /* arith2arith constructs a new expression containing a
      237       237    1            run-time conversion between some arithmetic types.
      238       238    1         */
      239       239    1         register struct expr *new = new_expr();
      240       240    1
      241       241    1         new->ex_file = expr->ex_file;
      242       242    1         new->ex_line = expr->ex_line;
      243       243    1         new->ex_debline = expr->ex_debline;
      244       244    1         new->ex_type = tp;
      245       245    1         new->ex_class = Type;
      246       246    1         return new_oper(tp, new, oper, expr);
      247       247    1        }
      248       248
      249       249             int
      250       250             int2int(expp, tp)
      251       251              struct expr **expp;
      252       252              register struct type *tp;
      253       253             {
      254       254    1         /* The expression *expp, which is of some integral type, is
      255       255    1            converted to the integral type tp.
      256       256    1         */
      257       257    1         register struct expr *exp = *expp;
      258       258    1
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=8  
      259       259    1         if (is_cp_cst(exp))  {
      260       260    2            register struct type *tp1 = exp->ex_type;
      261       261    2
      262       262    2            exp->ex_type = tp;
      263       263    2            if (! (tp1->tp_unsigned == UNSIGNED) && (tp->tp_unsigned == UNSIGNED)) {
      264       264    3               /* Avoid "unreal" overflow warnings, such as
      265       265    3                  caused by f.i.:
      266       266    3                     unsigned int x = ~0;
      267       267    3                     unsigned int y = -1;
      268       268    3               */
      269       269    3               extern long full_mask[];
      270       270    3               long remainder = exp->VL_VALUE &
      271       271    3                        ~full_mask[tp->tp_size];
      272       272    3
      273       273    3               if (remainder == 0 ||
      274       274    3                   remainder == ~full_mask[tp->tp_size]) {
      275       275    4                  exp->VL_VALUE &= ~remainder;
      276       276    4               }
      277       277    3            }
      278       278    2            cut_size(exp);
      279       279    2         }
      280       280    1         else  {
      281       281    2            exp = arith2arith(tp, INT2INT, exp);
      282       282    2         }
      283       283    1         *expp = exp;
      284       284    1         return exp->ex_type->tp_fund;
      285       285    1        }
      286       286
      287       287             #ifndef NOFLOAT
      288       288             int
      289       289             int2float(expp, tp)
      290       290              register struct expr **expp;
      291       291              struct type *tp;
      292       292             {
      293       293    1         /* The expression *expp, which is of some integral type, is
      294       294    1            converted to the floating type tp.
      295       295    1         */
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=9  
      296       296    1        #ifdef FLOATOPT
      297       297    1          register struct expr *exp = *expp;
      298       298    1          double d;
      299       299    1        #endif
      300       300    1
      301       301    1         fp_used = 1;
      302       302    1        #ifdef FLOATOPT
      303       303    1          if (is_cp_cst(exp))  {
      304       304    2             if (exp->ex_type->tp_unsigned == UNSIGNED ) {
      305       305    3               d = (unsigned) exp->VL_VALUE;
      306       306    3             } else {
      307       307    3               d = exp->VL_VALUE;  }
      308       308    2             exp->ex_type = tp;
      309       309    2             exp->FL_VALUE = d;
      310       310    2             exp->ex_flags |= EX_FLOATOPT;
      311       311    2             exp->ex_class = Float;
      312       312    2             }
      313       313    1          else
      314       314    1        #endif
      315       315    1         *expp = arith2arith(tp, INT2FLOAT, *expp);
      316       316    1         return (*expp)->ex_type->tp_fund;
      317       317    1        }
      318       318
      319       319             float2int(expp, tp)
      320       320              struct expr **expp;
      321       321              struct type *tp;
      322       322             {
      323       323    1         /* The expression *expp, which is of some floating type, is
      324       324    1            converted to the integral type tp.
      325       325    1         */
      326       326    1        #ifdef FLOATOPT
      327       327    1          struct expr *exp = *expp;
      328       328    1        #endif
      329       329    1
      330       330    1         fp_used = 1;
      331       331    1        #ifdef FLOATOPT
      332       332    1          if (is_fp_cst(exp))  {
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=10 
      333       333    2             double d = exp->FL_VALUE;
      334       334    2             long newval = d;
      335       335    2
      336       336    2             if ((double)newval != d)
      337       337    2                warning("loss of precision in f.p. conversion to integral");
      338       338    2             exp->ex_type = tp;
      339       339    2             exp->VL_VALUE = newval;
      340       340    2             exp->ex_flags |= EX_FLOATOPT;
      341       341    2             exp->ex_class = Value;
      342       342    2             exp->VL_CLASS = Const;
      343       343    2             }
      344       344    1          else
      345       345    1        #endif
      346       346    1         *expp = arith2arith(tp, FLOAT2INT, *expp);
      347       347    1        }
      348       348
      349       349             float2float(expp, tp)
      350       350              register struct expr **expp;
      351       351              struct type *tp;
      352       352             {
      353       353    1         /* The expression *expp, which is of some floating type, is
      354       354    1            converted to the floating type tp.
      355       355    1            There is no need for an explicit conversion operator
      356       356    1            if the expression is a constant.
      357       357    1         */
      358       358    1
      359       359    1         fp_used = 1;
      360       360    1         if (is_fp_cst(*expp))
      361       361    1            (*expp)->ex_type = tp;
      362       362    1         else
      363       363    1            *expp = arith2arith(tp, FLOAT2FLOAT, *expp);
      364       364    1        }
      365       365             #endif NOFLOAT
      366       366
      367       367             array2pointer(exp)
      368       368              register struct expr *exp;
      369       369             {
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=11 
      370       370    1         /* The expression, which must be an array, is converted
      371       371    1            to a pointer.
      372       372    1         */
      373       373    1         exp->ex_type = construct_type(POINTER, exp->ex_type->tp_up, (arith)0, (struct
                                formal*)0);
      374       374    1        }
      375       375
      376       376             function2pointer(exp)
      377       377              register struct expr *exp;
      378       378             {
      379       379    1         /* The expression, which must be a function, is converted
      380       380    1            to a pointer to the function.
      381       381    1         */
      382       382    1         exp->ex_type = construct_type(POINTER, exp->ex_type, (arith)0, (struct formal
                               *)0);
      383       383    1        }
      384       384
      385       385             string2pointer(ex)
      386       386              register struct expr *ex;
      387       387             {
      388       388    1         /* The expression, which must be a string constant, is converted
      389       389    1            to a pointer to the string-containing area.
      390       390    1         */
      391       391    1         label lbl;
      392       392    1
      393       393    1         lbl = code_string(ex->SG_VALUE, ex->SG_LEN);
      394       394    1         ex->ex_class = Value;
      395       395    1         ex->VL_CLASS = Label;
      396       396    1         ex->VL_LBL = lbl;
      397       397    1         ex->VL_VALUE = (arith)0;
      398       398    1        }
      399       399
      400       400             opnd2integral(expp, oper)
      401       401              register struct expr **expp;
      402       402              int oper;
      403       403             {
      404       404    1         register int fund = (*expp)->ex_type->tp_fund;
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=12 
      405       405    1
      406       406    1         if (fund != INT && fund != LONG) {
      407       407    2            expr_error(*expp, "%s operand to %s",
      408       408    2                  symbol2str(fund), symbol2str(oper));
      409       409    2            erroneous2int(expp);
      410       410    2            /* fund = INT; */
      411       411    2         }
      412       412    1        }
      413       413
      414       414             opnd2logical(expp, oper)
      415       415              register struct expr **expp;
      416       416              int oper;
      417       417             {
      418       418    1         int fund;
      419       419    1
      420       420    1         if ((*expp)->ex_type->tp_fund == FUNCTION)
      421       421    1            function2pointer(*expp);
      422       422    1        #ifndef NOBITFIELD
      423       423    1         else
      424       424    1         if ((*expp)->ex_type->tp_fund == FIELD)
      425       425    1            field2arith(expp);
      426       426    1        #endif NOBITFIELD
      427       427    1         switch (fund = (*expp)->ex_type->tp_fund) {
      428       428    2         case CHAR:
      429       429    2         case SHORT:
      430       430    2         case INT:
      431       431    2         case LONG:
      432       432    2         case ENUM:
      433       433    2         case POINTER:
      434       434    2        #ifndef NOFLOAT
      435       435    2         case FLOAT:
      436       436    2         case DOUBLE:
      437       437    2        #endif NOFLOAT
      438       438    2            break;
      439       439    2         default:
      440       440    2            expr_error(*expp, "%s operand to %s",
      441       441    2               symbol2str(fund), symbol2str(oper));
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=13 
      442       442    2         case ERRONEOUS:
      443       443    2            erroneous2int(expp);
      444       444    2            break;
      445       445    2         }
      446       446    1        }
      447       447
      448       448             opnd2test(expp, oper)
      449       449              register struct expr **expp;
      450       450             {
      451       451    1         opnd2logical(expp, oper);
      452       452    1         if ((*expp)->ex_class == Oper && is_test_op((*expp)->OP_OPER))
      453       453    1            { /* It is already a test */ }
      454       454    1         else
      455       455    1            ch7bin(expp, NOTEQUAL, intexpr((arith)0, INT));
      456       456    1        }
      457       457
      458       458             int
      459       459             is_test_op(oper)
      460       460             {
      461       461    1         switch (oper)  {
      462       462    2         case '<':
      463       463    2         case '>':
      464       464    2         case LESSEQ:
      465       465    2         case GREATEREQ:
      466       466    2         case EQUAL:
      467       467    2         case NOTEQUAL:
      468       468    2         case '!':
      469       469    2         case AND:
      470       470    2         case OR: /* && and || also impose a test  */
      471       471    2            return 1;
      472       472    2         default:
      473       473    2            return 0;
      474       474    2         }
      475       475    1         /*NOTREACHED*/
      476       476    1        }
      477       477
      478       478             #ifdef ____
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=14 
      479       479   *S*       int
      480       480   *S*       is_arith_op(oper)
      481       481   *S*       {
      482       482   *S*        switch (oper) {
      483       483   *S*        case '*':
      484       484   *S*        case '/':
      485       485   *S*        case '%':
      486       486   *S*        case '+':
      487       487   *S*        case '-':
      488       488   *S*        case LEFT:
      489       489   *S*        case RIGHT:
      490       490   *S*        case '&':
      491       491   *S*        case '^':
      492       492   *S*        case '|':
      493       493   *S*           return 1;
      494       494   *S*        default:
      495       495   *S*           return 0;
      496       496   *S*        }
      497       497   *S*       }
      498       498   *S*
      499       499   *S*       int
      500       500   *S*       is_asgn_op(oper)
      501       501   *S*       {
      502       502   *S*        switch (oper) {
      503       503   *S*        case '=':
      504       504   *S*        case PLUSAB:
      505       505   *S*        case MINAB:
      506       506   *S*        case TIMESAB:
      507       507   *S*        case DIVAB:
      508       508   *S*        case MODAB:
      509       509   *S*        case LEFTAB:
      510       510   *S*        case RIGHTAB:
      511       511   *S*        case ANDAB:
      512       512   *S*        case ORAB:
      513       513   *S*        case XORAB:
      514       514   *S*        case PLUSPLUS:
      515       515   *S*        case POSTINCR:
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=15 
      516       516   *S*        case MINMIN:
      517       517   *S*        case POSTDECR:
      518       518   *S*           return 1;
      519       519   *S*        default:
      520       520   *S*           return 0;
      521       521   *S*        }
      522       522   *S*       }
      523       523   *S*       #endif
      524       524
      525       525             any2opnd(expp, oper)
      526       526              register struct expr **expp;
      527       527             {
      528       528    1         if (!*expp)
      529       529    1            return;
      530       530    1         switch ((*expp)->ex_type->tp_fund)  {  /* RM 7.1 */
      531       531    2         case CHAR:
      532       532    2         case SHORT:
      533       533    2         case ENUM:
      534       534    2        #ifndef NOFLOAT
      535       535    2         case FLOAT:
      536       536    2        #endif NOFLOAT
      537       537    2            any2arith(expp, oper);
      538       538    2            break;
      539       539    2         case ARRAY:
      540       540    2            array2pointer(*expp);
      541       541    2            break;
      542       542    2         case POINTER:
      543       543    2            if ((*expp)->ex_class == String)
      544       544    2               string2pointer(*expp);
      545       545    2            break;
      546       546    2        #ifndef NOBITFIELD
      547       547    2         case FIELD:
      548       548    2            field2arith(expp);
      549       549    2            break;
      550       550    2        #endif NOBITFIELD
      551       551    2         }
      552       552    1        }
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=16 
      553       553
      554       554             #ifndef NOBITFIELD
      555       555             field2arith(expp)
      556       556              register struct expr **expp;
      557       557             {
      558       558    1         /* The expression to extract the bitfield value from the
      559       559    1            memory word is put in the tree.
      560       560    1         */
      561       561    1         register struct type *tp = (*expp)->ex_type->tp_up;
      562       562    1         register struct field *fd = (*expp)->ex_type->tp_field;
      563       563    1         register struct type *atype = (tp->tp_unsigned == UNSIGNED) ? uword_type : wo
                               rd_type;
      564       564    1
      565       565    1         if (tp->tp_size < word_size) {
      566       566    2           (*expp)->ex_type = tp;
      567       567    2           ch7cast(expp, CAST, atype);
      568       568    2           tp = atype;
      569       569    2           }
      570       570    1         else (*expp)->ex_type = atype;
      571       571    1
      572       572    1         if (atype->tp_unsigned == UNSIGNED) {  /* don't worry about the sign bit */
      573       573    2            ch7bin(expp, RIGHT, intexpr((arith)fd->fd_shift, INT));
      574       574    2            ch7bin(expp, '&', intexpr(fd->fd_mask, INT));
      575       575    2         }
      576       576    1         else  {  /* take care of the sign bit: sign extend if needed */
      577       577    2        #ifdef TM_L66
      578       578    2            arith bits_in_type = atype->tp_size * 9;
      579       579    2        #else
      580       580   *S*           arith bits_in_type = atype->tp_size * 8;
      581       581   *S*       #endif
      582       582    2
      583       583    2            ch7bin(expp, LEFT,
      584       584    2               intexpr(bits_in_type - fd->fd_width - fd->fd_shift,
      585       585    2                        INT)
      586       586    2            );
      587       587    2            ch7bin(expp, RIGHT, intexpr(bits_in_type - fd->fd_width, INT));
      588       588    2         }
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=17 
      589       589    1         ch7cast(expp, CAST, tp);   /* restore its original type */
      590       590    1        }
      591       591             #endif NOBITFIELD
      592       592
      593       593             #ifndef NOFLOAT
      594       594             /*  switch_sign_fp() negates the given floating constant expression
      595       595              The lexical analyser has reserved an extra byte of space in front
      596       596              of the string containing the representation of the floating
      597       597              constant.  This byte contains the '-' character and we have to
      598       598              take care of the first byte the fl_value pointer points to.
      599       599             */
      600       600             switch_sign_fp(expr)
      601       601              register struct expr *expr;
      602       602             {
      603       603    1        #ifndef FLOATOPT
      604       604   *S*        if (*(expr->FL_VALUE) == '-')
      605       605   *S*           ++(expr->FL_VALUE);
      606       606   *S*        else
      607       607   *S*           --(expr->FL_VALUE);
      608       608   *S*       #else
      609       609    1         expr->FL_VALUE = 0.0 - expr->FL_VALUE;
      610       610    1        #endif
      611       611    1        }
      612       612             #endif NOFLOAT
      613       613
      614       614             int
      615       615             int2ptr(tp,oper,expp)
      616       616              register struct type *tp;
      617       617              int                  oper;
      618       618              struct expr          **expp;
      619       619             {
      620       620    1          if (is_cp_cst(*expp)) {
      621       621    2             (*expp)->ex_type = tp;
      622       622    2             if (zb_target_sys == TARGET_CP6)
      623       623    2                if ( ( oper == INT2PTR && (*expp)->VL_VALUE == (arith)0 )
      624       624    2                  || ( oper == PTR2INT && (*expp)->VL_VALUE == (arith)CP6_NULL_INT) )
                               {
CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=18 
      625       625    3                   (*expp)->VL_VALUE ^= CP6_NULL_INT;
      626       626    3             }
      627       627    2          }
      628       628    1          else *expp = arith2arith(tp,oper,*expp);
      629       629    1
      630       630    1          return (*expp)->ex_type->tp_fund;
      631       631    1        }
      632       632
      633       633
      634       634             void
      635       635             any2formal(expp, oper, tp)
      636       636               register struct expr **expp;
      637       637               register struct type *tp;
      638       638             {
      639       639    1          if (!*expp)
      640       640    1             return;
      641       641    1          if (tp)
      642       642    1        #if 0
      643       643   *S*         switch (tp->tp_fund)  {
      644       644   *S*         case CHAR:
      645       645   *S*         case SHORT:
      646       646   *S*         case ENUM:
      647       647   *S*            any2arith(expp, oper);
      648       648   *S*            break;
      649       649   *S*         default:
      650       650   *S*       #endif
      651       651    1             ch7cast(expp,oper,tp);
      652       652    1        #if 0
      653       653   *S*            break;
      654       654   *S*         }
      655       655   *S*       #endif
      656       656    1          else if ((*expp)->ex_type->tp_fund == FLOAT)
      657       657    1             ch7cast(expp, oper, double_type);
      658       658    1          else any2opnd(expp, oper);
      659       659    1        }
---  Include file information  ---

CC.C03    File=zbc$arith:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=19 
   zbc$botch_free:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$field:h.:ZBC3TOU. is referenced
   zbc$mes:h.:ZBC3TOU. is referenced
   zbc$noRoption:h.:ZBC3TOU. is referenced
   zbc$zb_target:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$arith:c.:ZBC3TSI
