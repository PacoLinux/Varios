

CC.C03    File=zbe$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=1  
        1         1             /* $Header: alloc.c,v 1.4 87/03/10 11:28:34 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  S H A R E D   F I L E
        7         7              *
        8         8              *  A L L O C . C
        9         9              */
       10        10
       11        11
       12        12
       13        13             #include <stdio:h>
       14        14             #include "types:h"
       15        15             #include "debug:h"
       16        16             #include "alloc:h"
       17        17
       18        18
       19        19             short * myalloc();
       20        20             short * Malloc();
       21        21
       22        22             #ifdef DEBUG
       23        23
       24        24             STATIC unsigned maxuse, curruse;
       25        25
       26        26             short *newcore(size)
       27        27              int size;
       28        28             {
       29        29    1         if ((curruse += (unsigned)  (size+2)) > maxuse) maxuse = curruse;
       30        30    1         return myalloc(size);
       31        31    1        }
       32        32
       33        33             oldcore(p,size)
       34        34              short *p;
       35        35              int size;
       36        36             {
CC.C03    File=zbe$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=2  
       37        37    1         curruse -= (size+2);
       38        38    1        Free(p);
       39        39    1        }
       40        40
       41        41             coreusage()
       42        42             {
       43        43    1         fprintf(stderr,"Maximal core usage (excl. buffers):%u\n",maxuse);
       44        44    1        }
       45        45
       46        46             #endif
       47        47
       48        48
       49        49             /*
       50        50              * The following two sizetables contain the sizes of the various kinds
       51        51              * of line and argument structures.
       52        52              * The assumption when making the tables was that every non-byte object
       53        53              * had to be aligned on an even boundary. On machines where alignment
       54        54              * is worse ( for example a long has to be aligned on a longword bound )
       55        55              * these tables should be revised.
       56        56              * A wasteful but safe approach is to replace every line of them by
       57        57              *  sizeof(line_t)
       58        58              * and
       59        59              *  sizeof(arg_t)
       60        60              * respectively.
       61        61              */
       62        62
       63        63             #ifndef NOTCOMPACT
       64        64             int lsizetab[] = {
       65        65    1         2*sizeof(line_p)+2*sizeof(byte),
       66        66    1         2*sizeof(line_p)+2*sizeof(byte)+sizeof(short),
       67        67    1         2*sizeof(line_p)+2*sizeof(byte)+sizeof(offset),
       68        68    1         2*sizeof(line_p)+2*sizeof(byte)+sizeof(lab_id),
       69        69    1         2*sizeof(line_p)+2*sizeof(byte)+sizeof(obj_p),
       70        70    1         2*sizeof(line_p)+2*sizeof(byte)+sizeof(proc_p),
       71        71    1         2*sizeof(line_p)+2*sizeof(byte)+sizeof(arg_p),
       72        72    1        };
       73        73
CC.C03    File=zbe$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=3  
       74        74             int asizetab[] = {
       75        75    1         sizeof(arg_p)+sizeof(short)+sizeof(offset),
       76        76    1         sizeof(arg_p)+sizeof(short)+sizeof(lab_id),
       77        77    1         sizeof(arg_p)+sizeof(short)+sizeof(obj_p),
       78        78    1         sizeof(arg_p)+sizeof(short)+sizeof(proc_p),
       79        79    1         sizeof(arg_p)+sizeof(short)+sizeof(argb_t),
       80        80    1         sizeof(arg_p)+sizeof(short)+sizeof(short)+sizeof(argb_t),
       81        81    1         sizeof(arg_p)+sizeof(short)+sizeof(short)+sizeof(argb_t),
       82        82    1         sizeof(arg_p)+sizeof(short)+sizeof(short)+sizeof(argb_t)
       83        83    1        };
       84        84             #else
       85        85   *S*       int lsizetab[] = {
       86        86   *S*        sizeof(struct line),
       87        87   *S*        sizeof(struct line),
       88        88   *S*        sizeof(struct line),
       89        89   *S*        sizeof(struct line),
       90        90   *S*        sizeof(struct line),
       91        91   *S*        sizeof(struct line),
       92        92   *S*        sizeof(struct line)
       93        93   *S*       };
       94        94   *S*
       95        95   *S*       int asizetab[] = {
       96        96   *S*        sizeof (struct arg),
       97        97   *S*        sizeof (struct arg),
       98        98   *S*        sizeof (struct arg),
       99        99   *S*        sizeof (struct arg),
      100       100   *S*        sizeof (struct arg),
      101       101   *S*        sizeof (struct arg),
      102       102   *S*        sizeof (struct arg),
      103       103   *S*        sizeof (struct arg)
      104       104   *S*       };
      105       105   *S*       #endif
      106       106
      107       107             /*
      108       108              * alloc routines:
      109       109              * Two parts:
      110       110              *   1)   typed alloc and free routines
CC.C03    File=zbe$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=4  
      111       111              *   2) untyped raw core allocation
      112       112              */
      113       113
      114       114             /*
      115       115              * PART 1
      116       116              */
      117       117
      118       118             line_p newline(optyp) int optyp; {
      119       119    1         register line_p lnp;
      120       120    1         register kind=optyp;
      121       121    1
      122       122    1         lnp = (line_p) newcore(lsizetab[kind]);
      123       123    1         TYPE(lnp) = optyp;
      124       124    1         lnp->l_next = (line_p) 0;
      125       125    1         lnp->l_prev = (line_p) 0;
      126       126    1         return(lnp);
      127       127    1        }
      128       128
      129       129             oldline(lnp) register line_p lnp; {
      130       130    1         register kind=TYPE(lnp)&BMASK;
      131       131    1
      132       132    1         if (kind == OPLIST)
      133       133    1            oldargs(ARG(lnp));
      134       134    1         oldcore((short *) lnp,lsizetab[kind]);
      135       135    1        }
      136       136
      137       137             arg_p newarg(kind) int kind; {
      138       138    1         register arg_p ap;
      139       139    1
      140       140    1         ap = (arg_p) newcore(asizetab[kind]);
      141       141    1         ap->a_type = kind;
      142       142    1         ap->a_next = (arg_p) 0; /* null next ptr.. */
      143       143    1         return(ap);
      144       144    1        }
      145       145
      146       146             oldargs(ap) register arg_p ap; {
      147       147    1         register arg_p next;
CC.C03    File=zbe$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=5  
      148       148    1
      149       149    1         while (ap != (arg_p) 0) {
      150       150    2            next = ap->a_next;
      151       151    2            switch(ap->a_type) {
      152       152    3            case ARGSTRING:
      153       153    3               oldargb(ap->a_a.a_string.ab_next);
      154       154    3               break;
      155       155    3            case ARGICN:
      156       156    3            case ARGUCN:
      157       157    3            case ARGFCN:
      158       158    3               oldargb(ap->a_a.a_con.ac_con.ab_next);
      159       159    3               break;
      160       160    3            }
      161       161    2            oldcore((short *) ap,asizetab[ap->a_type]);
      162       162    2            ap = next;
      163       163    2         }
      164       164    1        }
      165       165
      166       166             oldargb(abp) register argb_p abp; {
      167       167    1         register argb_p next;
      168       168    1
      169       169    1         while (abp != (argb_p) 0) {
      170       170    2            next = abp->ab_next;
      171       171    2            oldcore((short *) abp,sizeof (argb_t));
      172       172    2            abp = next;
      173       173    2         }
      174       174    1        }
      175       175
      176       176             oldobjects(op) register obj_p op; {
      177       177    1         register obj_p next;
      178       178    1
      179       179    1         while (op != (obj_p) 0) {
      180       180    2            next = op->o_next;
      181       181    2            oldcore((short *) op, sizeof(struct obj));
      182       182    2            op = next;
      183       183    2         }
      184       184    1        }
CC.C03    File=zbe$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=6  
      185       185
      186       186             olddblock(dbl) dblock_p dbl; {
      187       187    1         oldobjects(dbl->d_objlist);
      188       188    1         oldargs(dbl->d_values);
      189       189    1         oldcore((short *) dbl, sizeof(struct dblock));
      190       190    1        }
      191       191
      192       192
      193       193             short **newmap(length) short length; {
      194       194    1         bblock_p *tempb, *q ;
      195       195    1         int i;
      196       196    1
      197       197    1         tempb = (short *) newcore ((length+1) * sizeof(short *));
"zbe$alloc:c.:ZBC3TSI", line 197: (warning) incompatible pointers in =
      198       198    1         q=tempb ;
      199       199    1         for (i=0 ; i < length+1 ; i++ )
      200       200    1          { q[i]  = (bblock_p *) 0; }
"zbe$alloc:c.:ZBC3TSI", line 200: (warning) incompatible pointers in =
      201       201    1         return ( tempb );
"zbe$alloc:c.:ZBC3TSI", line 201: (warning) incompatible pointers in return
      202       202    1        }
      203       203
      204       204             oldmap(mp,length) short **mp, length; {
      205       205    1         oldcore((short *) mp, (length+1) * sizeof(short *));
      206       206    1        }
      207       207
      208       208
      209       209             cset newbitvect(n) short n; {
      210       210    1         return((cset) newcore((n-1)*sizeof(int) + sizeof(struct bitvector)));
      211       211    1         /* sizeof(struct bitvector) equals to the size of a struct with
      212       212    1          * one short, followed by one ALLIGNED int. So the above statement
      213       213    1          * also works e.g. on a VAX.
      214       214    1          */
      215       215    1        }
      216       216
      217       217             oldbitvect(s,n) cset s; short n; {
      218       218    1         oldcore((short *) s, (n-1)*sizeof(int) + sizeof(struct bitvector));
CC.C03    File=zbe$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=7  
      219       219    1        }
      220       220
      221       221
      222       222             short *newtable(length) short length; {
      223       223    1         return((short *) newcore((length+1) * sizeof(short)));
      224       224    1        }
      225       225
      226       226             oldtable(mp,length) short **mp, length; {
      227       227    1         oldcore((short *) mp, (length+1) * sizeof(short));
      228       228    1        }
      229       229
      230       230             cond_p newcondtab(l) int l;
      231       231             {
      232       232    1         return (cond_p) newcore(l * (sizeof (struct cond_tab)));
      233       233    1        }
      234       234
      235       235             oldcondtab(tab) cond_p tab;
      236       236             {
      237       237    1         int i;
      238       238    1         for (i = 0; tab[i].mc_cond != DEFAULT; i++);
      239       239    1         oldcore((short *) tab,((i+1) * sizeof (struct cond_tab)));
      240       240    1        }
      241       241
      242       242
      243       243             short *myalloc(size) register size; {
      244       244    1         register short *p,*q;
      245       245    1
      246       246    1         p = Malloc(size);
      247       247    1         if (p == 0)
      248       248    1            error("out of memory");
      249       249    1         for(q=p;size>0;size -= sizeof(short))
      250       250    1            *q++ = 0;
      251       251    1         return(p);
      252       252    1        }
      253       253
---  Include file information  ---

CC.C03    File=zbe$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=8  
   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced

3 warnings were detected in the file zbe$alloc:c.:ZBC3TSI
