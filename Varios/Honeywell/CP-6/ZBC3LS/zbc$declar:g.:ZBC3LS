

11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: declar.g,v 3.7 87/03/25 22:49:01 ceriel Exp $ */
    6      /*  DECLARATION SYNTAX PARSER  */
    7
    8      {
    9      #include <alloc:h>
   10      #include "nobitfield:h"
   11      #include "debug:h"
   12      #include "arith:h"
   13      #include "LLlex:h"
   14      #include "idf:h"
   15      #include "type:h"
   16      #include "struct:h"
   17      #include "field:h"
   18      #include "decspecs:h"
   19      #include "def:h"
   20      #include "declar:h"
   21      #include "label:h"
   22      #include "expr:h"
   23      #include "sizes:h"
   24      #include "level:h"
   25
   26      extern char options[];
   27      }
   28
   29      /* 8 */
   30      declaration
   31       {struct decspecs Ds;}
   32      :
   33       {Ds = null_decspecs;}
   34       decl_specifiers(&Ds)
   35       [
   36          init_declarator_list(&Ds)
   37        |
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     2    
   38           empty
   39           {
   40              int fund = Ds.ds_type->tp_fund;
   41              if (fund != UNION && fund != STRUCT && fund != ENUM)
   42                 warning("declaration must declare a variable");
   43           }
   44        ]
   45       ';'
   46      ;
   47
   48      /*  A `decl_specifiers' describes a sequence of a storage_class_specifier,
   49       an unsigned_specifier, a size_specifier and a simple type_specifier,
   50       which may occur in arbitrary order and each of which may be absent;
   51       at least one of them must be present, however, since the totally
   52       empty case has already be dealt with in `external_definition'.
   53       This means that something like:
   54          unsigned extern int short xx;
   55       is perfectly good C.
   56
   57       On top of that, multiple occurrences of storage_class_specifiers,
   58       unsigned_specifiers and size_specifiers are errors, but a second
   59       type_specifier should end the decl_specifiers and be treated as
   60       the name to be declared (see the thin ice in RM11.1).
   61       Such a language is not easily expressed in a grammar; enumeration
   62       of the permutations is unattractive. We solve the problem by
   63       having a regular grammar for the "soft" items, handling the single
   64       occurrence of the type_specifier in the grammar (we have no choice),
   65       collecting all data in a `struct decspecs' and turning that data
   66       structure into what we want.
   67
   68       The existence of declarations like
   69          short typedef yepp;
   70       makes all hope of writing a specific grammar for typedefs illusory.
   71      */
   72
   73      decl_specifiers /* non-empty */ (register struct decspecs *ds;)
   74       /* Reads a non-empty decl_specifiers and fills the struct
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     3    
   75          decspecs *ds.
   76       */
   77      :
   78      [
   79       other_specifier(ds)+
   80       [%prefer /* the thin ice in R.M. 11.1 */
   81          single_type_specifier(ds) other_specifier(ds)*
   82       |
   83          empty
   84       ]
   85      |
   86       single_type_specifier(ds) other_specifier(ds)*
   87      ]
   88       {do_decspecs(ds);}
   89      ;
   90
   91      /* 8.1 */
   92      other_specifier(register struct decspecs *ds;):
   93       [ AUTO | STATIC | EXTERN | TYPEDEF | REGISTER ]
   94       {  if (ds->ds_sc_given)
   95             error("repeated storage class specifier");
   96          ds->ds_sc_given = 1;
   97          ds->ds_sc = DOT;
   98       }
   99      |
  100       [ SHORT | LONG ]
  101       {  if (ds->ds_size)
  102             error("repeated size specifier");
  103          ds->ds_size = DOT;
  104       }
  105      |
  106       [ UNSIGNED | SIGNED ]
  107       {  if (ds->ds_unsigned)
  108             error("sign attribute specified twice");
  109          ds->ds_unsigned = DOT;
  110       }
  111      |
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     4    
  112       CONST
  113       {  if (ds->ds_const)
  114             error("const attribute specified twice");
  115          ds->ds_const = DOT;
  116       }
  117      |
  118       VOLATILE
  119       {  if (ds->ds_volatile)
  120             error("volatile attribute specified twice");
  121          ds->ds_volatile = DOT;
  122       }
  123      ;
  124
  125      /* 8.2 */
  126      type_specifier(struct type **tpp;)
  127       /* Used in struct/union declarations and in casts; only the
  128          type is relevant.
  129       */
  130       {struct decspecs Ds; Ds = null_decspecs;}
  131      :
  132       decl_specifiers(&Ds)
  133       {
  134          if (Ds.ds_sc_given)
  135             warning("storage class \"%s\" ignored",symbol2str(Ds.ds_sc));
  136          if (Ds.ds_sc == REGISTER)
  137             warning("register ignored");
  138       }
  139       {*tpp = Ds.ds_type;}
  140      ;
  141
  142      single_type_specifier(register struct decspecs *ds;):
  143       TYPE_IDENTIFIER      /* this includes INT, CHAR, etc. */
  144       {
  145          idf2type(dot.tk_idf, &ds->ds_type);
  146          ds->ds_tplvl = dot.tk_idf->id_def->df_level;
  147       }
  148      |
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     5    
  149       struct_or_union_specifier(&ds->ds_type)
  150      |
  151       enum_specifier(&ds->ds_type)
  152      ;
  153
  154      /* 8.3 */
  155      init_declarator_list(struct decspecs *ds;):
  156       init_declarator(ds)
  157       [ ',' init_declarator(ds) ]*
  158      ;
  159
  160      init_declarator(register struct decspecs *ds;)
  161       {
  162          struct declarator Dc;
  163          int must_init;
  164       }
  165      :
  166       {
  167          Dc = null_declarator;
  168       }
  169      [
  170       declarator(&Dc)
  171       {
  172          reject_params(&Dc, 1);
  173          must_init = declare_idf(ds, &Dc, level);
  174       }
  175       [
  176          initializer(Dc.dc_idf, ds->ds_sc, must_init)
  177       |
  178          {
  179           if (must_init)
  180              error("size of local %s is unknown",Dc.dc_idf->id_text);
  181           code_declaration(Dc.dc_idf, (struct expr *) 0, level, ds->ds_sc);
  182          }
  183       ]
  184      ]
  185       {remove_declarator(&Dc);}
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     6    
  186      ;
  187
  188      /* 8.6: initializer */
  189      initializer(struct idf *idf; int sc;int must_init;)
  190       {
  191          struct expr *expr = (struct expr *) 0;
  192          int fund = idf->id_def->df_type->tp_fund;
  193          int labelflag = level >= L_LOCAL && (sc==AUTO || sc==0 || sc==REGISTER) &&
  194                      (fund==STRUCT || fund==UNION || fund==ARRAY);
  195          int globalflag = level == L_GLOBAL ||
  196                 (level >= L_LOCAL && sc == STATIC);
  197       }
  198      :
  199       {  if (idf->id_def->df_type->tp_fund == FUNCTION)  {
  200             error("illegal initialization of function");
  201          }
  202       }
  203       [
  204          '='
  205       |
  206          empty
  207          {warning("old-fashioned initialization, insert =");}
  208          /* This causes trouble at declarator and at
  209             external_definition, q.v.
  210          */
  211       ]
  212       {  if (globalflag || labelflag) {
  213             struct expr ex;
  214             code_declaration(idf, &ex, level, sc);
  215          }
  216       }
  217       initial_value((globalflag || labelflag) ? &(idf->id_def->df_type) : (struct type **)0,
  218             &expr, labelflag)
  219       {  if (! globalflag) {
  220             if (idf->id_def->df_type->tp_fund == FUNCTION)  {
  221                free_expression(expr);
  222                expr = 0;
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     7    
  223             }
  224             if (!labelflag)
  225                code_declaration(idf, expr, level, sc);
  226             else init_auto_aggregate(idf, must_init);
  227      #ifdef DEBUG
  228             print_expr("initializer-expression", expr);
  229      #endif DEBUG
  230          }
  231          init_idf(idf);
  232       }
  233      ;
  234
  235      /*
  236       Functions yielding pointers to functions must be declared as, e.g.,
  237          int (*hehe(par1, par2))() char *par1, *par2; {}
  238       Since the function heading is read as a normal declarator,
  239       we just include the (formal) parameter list in the declarator
  240       description list dc.
  241      */
  242
  243      %first param_type_specifier, type_specifier;
  244
  245      declarator(register struct declarator *dc;)
  246       {
  247          arith count;
  248          struct formal *fm = 0;
  249          int elipsis = 0;
  250          int t_const = 0;
  251          int t_vol = 0;
  252       }
  253      :
  254       primary_declarator(dc)
  255       [%while(1)        /* int i (M + 2) / 4;
  256                      is a function, not an
  257                      old-fashioned initialization.
  258                   */
  259          '('
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     8    
  260          [
  261             %if (param_type_specifier(DOT))
  262             {
  263                stack_level();
  264                if (level == L_FORMAL1)
  265                   stack_level();
  266             }
  267             parameter_dec_list(&fm,&elipsis) ? /* semantic chk later... */
  268          |
  269             formal_list(&fm) ?   /* semantic check later... */
  270          ]
  271          ')'
  272          {
  273             if (fm && dc->dc_formal)   {
  274                if (fm->fm_type) {
  275                   unstack_level();
  276                   if (level == L_FORMAL1) unstack_level();
  277                   }
  278                else error("formal arguments must be absent or declared with types");
  279                }
  280             add_decl_unary(dc, FUNCTION, (arith)0, fm);
  281             fm = 0;
  282          }
  283       |
  284          arrayer(&count)
  285          {add_decl_unary(dc, ARRAY, count, NO_PARAMS);}
  286       ]*
  287      |
  288       '*' pointer_type_qualifier(dc, &t_const, &t_vol)
  289       {
  290        add_decl_unary(dc, POINTER, (arith)(t_const*2+t_vol), NO_PARAMS);
  291       }
  292      ;
  293
  294      primary_declarator(register struct declarator *dc;) :
  295       identifier(&dc->dc_idf)
  296      |
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     9    
  297       '(' declarator(dc) ')'
  298      ;
  299
  300      arrayer(arith *sizep;)
  301       { struct expr *expr; }
  302      :
  303       '['
  304          [
  305             constant_expression(&expr)
  306             {
  307                check_array_subscript(expr);
  308                *sizep = expr->VL_VALUE;
  309                free_expression(expr);
  310             }
  311          |
  312             empty
  313             { *sizep = (arith)-1; }
  314          ]
  315       ']'
  316      ;
  317
  318      formal_list (struct formal **fmp;)
  319      :
  320       formal(fmp) [ ',' formal(fmp) ]*
  321      ;
  322
  323      formal(struct formal **fmp;)
  324       {struct idf *idf; }
  325      :
  326       identifier(&idf)
  327       {
  328          register struct formal *new = new_formal();
  329
  330          new->fm_idf = idf;
  331          new->fm_type = (struct type *) 0;
  332          new->fm_elips = 0;
  333          new->next = *fmp;
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     10   
  334          *fmp = new;
  335       }
  336      ;
  337
  338      parameter_dec_list(struct formal **fmp; int *elipsis; )
  339        {int nparam = 0;}
  340      :
  341        parameter_declaration(fmp,nparam)
  342        [ %while (param_type_specifier(AHEAD))
  343              ',' parameter_declaration(fmp,++nparam)
  344        ]*
  345        [
  346              ',' ELIPSIS
  347           {
  348              (*fmp)->fm_elips = 1;
  349              *elipsis   = 1;
  350           }
  351        ]?
  352      ;
  353
  354      parameter_declaration(struct formal **fmp; int pnum;)
  355        { struct type *tp; struct declarator Dc; struct decspecs Ds;  }
  356      :
  357        {Dc = null_declarator; Ds = null_decspecs;}
  358        decl_specifiers(&Ds)
  359        {
  360           if (Ds.ds_sc_given && Ds.ds_sc != REGISTER)
  361              warning("parameter %d storage class \"%s\" ignored",pnum,symbol2str(Ds.ds_sc));
  362           tp = Ds.ds_type;
  363        }
  364        parameter_declarator(fmp, tp, &Dc, pnum)
  365      ;
  366
  367      parameter_declarator(struct formal **fmp; struct type *tp; struct declarator *dc; int pnum;)
  368      :
  369          param_declarator(dc)
  370        {register struct formal *new = new_formal();
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     11   
  371         new->fm_idf   = dc->dc_idf;
  372         new->fm_type  = tp = declare_type(tp,dc);
  373         new->fm_elips = 0;
  374         new->next     = *fmp;
  375         new->fm_num   = pnum;
  376         *fmp          = new;
  377         if (tp->tp_fund == FUNCTION)   {
  378           if (dc->dc_idf)
  379           warning("%s is declared to be a pointer to a function",dc->dc_idf->id_text);
  380           else warning("parameter %d is declared a pointer to a function",pnum);
  381           new->fm_type = tp = construct_type(POINTER, tp,(arith)0);
  382           }
  383        else if (tp->tp_fund == ARRAY) {
  384           new->fm_type = tp = construct_type(POINTER, tp->tp_up, (arith)0);
  385           }
  386        }
  387        {
  388         if (dc->dc_formal) free_formals(dc->dc_formal);
  389         remove_declarator(dc);
  390        }
  391      ;
  392
  393      param_declarator(register struct declarator *dc;)
  394        {arith count;
  395         struct formal *fmx = 0;
  396         int elipsix = 0, t_const=0, t_vol=0;
  397        }
  398      :
  399        primary_param_declarator (dc)
  400        [  '('
  401              [
  402               {
  403                stack_level();
  404                if (level == L_FORMAL1)
  405                 stack_level();
  406               }
  407               parameter_dec_list(&fmx, &elipsix)
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     12   
  408              ]?
  409           ')'
  410           {add_decl_unary(dc, FUNCTION, (arith)0, fmx);
  411            if (fmx) {
  412             if (fmx->fm_type) {
  413                unstack_level();
  414                if (level == L_FORMAL1) unstack_level();
  415                }
  416             else error("formal arguments must be absent or declared with types");
  417             }
  418            }
  419        |
  420           arrayer(&count)
  421           {add_decl_unary(dc, ARRAY, count, NO_PARAMS);}
  422        ]*
  423      |
  424        '*' param_pointer_qualifier(dc, &t_const, &t_vol)
  425        {add_decl_unary(dc, POINTER, (arith)t_const*2 + t_vol, NO_PARAMS);}
  426      ;
  427
  428      primary_param_declarator(register struct declarator *dc;)
  429      :
  430        [%if ((AHEAD == ')') || (AHEAD == ','))
  431           empty
  432        |  identifier(&dc->dc_idf)
  433        |  '(' param_declarator(dc)   ')'
  434        ]
  435      ;
  436
  437      pointer_type_qualifier(struct declarator *dc; int *tp_const; int *tp_vol;)
  438      :
  439       [   CONST pointer_type_qualifier(dc,tp_const,tp_vol)
  440        {  if (*tp_const)
  441              error("repeated \"const\" type qualifier");
  442           *tp_const = 1;
  443        }
  444       |   VOLATILE pointer_type_qualifier(dc,tp_const,tp_vol)
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     13   
  445        {  if (*tp_vol) error("repeated \"volatile\" type qualifier");
  446           *tp_vol = 1;
  447        }
  448       |   declarator(dc)
  449       ]
  450      ;
  451
  452      /* Change 2 */
  453      enum_specifier(register struct type **tpp;)
  454       {
  455          struct idf *idf;
  456          arith l = (arith)0;
  457       }
  458      :
  459       ENUM
  460       [
  461          {declare_struct(ENUM, (struct idf *) 0, tpp);}
  462          enumerator_pack(*tpp, &l)
  463       |
  464          identifier(&idf)
  465          [
  466             {declare_struct(ENUM, idf, tpp);}
  467             enumerator_pack(*tpp, &l)
  468          |
  469             {apply_struct(ENUM, idf, tpp);}
  470             empty
  471          ]
  472       ]
  473      ;
  474
  475      enumerator_pack(register struct type *tp; arith *lp;) :
  476       '{'
  477       enumerator(tp, lp)
  478       [%while(AHEAD != '}')      /* >>> conflict on ',' */
  479          ','
  480          enumerator(tp, lp)
  481       ]*
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     14   
  482       ','?           /* optional trailing comma */
  483       '}'
  484       {tp->tp_size = int_size;}
  485       /* fancy implementations that put small enums in 1 byte
  486          or so should start here.
  487       */
  488      ;
  489
  490      enumerator(struct type *tp; arith *lp;)
  491       {
  492          struct idf *idf;
  493          struct expr *expr;
  494       }
  495      :
  496       identifier(&idf)
  497       [
  498          '='
  499          constant_expression(&expr)
  500          {
  501             *lp = expr->VL_VALUE;
  502             free_expression(expr);
  503          }
  504       ]?
  505       {declare_enum(tp, idf, (*lp)++);}
  506      ;
  507
  508      /* 8.5 */
  509      struct_or_union_specifier(register struct type **tpp;)
  510       {
  511          int fund;
  512          struct idf *idfX;
  513          register struct idf *idf;
  514       }
  515      :
  516       [ STRUCT | UNION ]
  517       {fund = DOT;}
  518       [
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     15   
  519          {
  520             declare_struct(fund, (struct idf *)0, tpp);
  521          }
  522          struct_declaration_pack(*tpp)
  523       |
  524          identifier(&idfX) { idf = idfX; }
  525          [
  526             {
  527                declare_struct(fund, idf, tpp);
  528                (idf->id_struct->tg_busy)++;
  529             }
  530             struct_declaration_pack(*tpp)
  531             {
  532                (idf->id_struct->tg_busy)--;
  533             }
  534          |
  535             {apply_struct(fund, idf, tpp);}
  536             empty
  537          ]
  538       ]
  539      ;
  540
  541      struct_declaration_pack(register struct type *stp;)
  542       {
  543          struct sdef **sdefp = &stp->tp_sdef;
  544          arith size = (arith)0;
  545       }
  546      :
  547       /* The size is only filled in after the whole struct has
  548          been read, to prevent recursive definitions.
  549       */
  550       '{'
  551       struct_declaration(stp, &sdefp, &size)+
  552       '}'
  553       {stp->tp_size = align(size, stp->tp_align);}
  554      ;
  555
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     16   
  556      struct_declaration(struct type *stp; struct sdef ***sdefpp; arith *szp;)
  557       {struct type *tp;}
  558      :
  559       type_specifier(&tp)
  560       struct_declarator_list(tp, stp, sdefpp, szp)
  561       [  /* in some standard UNIX compilers the semicolon
  562             is optional, would you believe!
  563          */
  564          ';'
  565       |
  566          empty
  567          {warning("no semicolon after declarator");}
  568       ]
  569      ;
  570
  571      struct_declarator_list(struct type *tp, *stp;
  572             struct sdef ***sdefpp; arith *szp;)
  573      :
  574       struct_declarator(tp, stp, sdefpp, szp)
  575       [ ',' struct_declarator(tp, stp, sdefpp, szp) ]*
  576      ;
  577
  578      struct_declarator(struct type *tp; struct type *stp;
  579             struct sdef ***sdefpp; arith *szp;)
  580       {
  581          struct declarator Dc;
  582          struct field *fd = 0;
  583       }
  584      :
  585       {
  586          Dc = null_declarator;
  587       }
  588      [
  589       declarator(&Dc)
  590       {reject_params(&Dc, 1);}
  591       bit_expression(&fd)?
  592      |
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     17   
  593       {Dc.dc_idf = gen_idf();}
  594       bit_expression(&fd)
  595      ]
  596       {add_sel(stp, declare_type(tp, &Dc), Dc.dc_idf, sdefpp, szp, fd);}
  597       {remove_declarator(&Dc);}
  598      ;
  599
  600      bit_expression(struct field **fd;)
  601       { struct expr *expr; }
  602      :
  603       {
  604          *fd = new_field();
  605       }
  606       ':'
  607       constant_expression(&expr)
  608       {
  609          (*fd)->fd_width = expr->VL_VALUE;
  610          free_expression(expr);
  611      #ifdef NOBITFIELD
  612          error("bitfields are not implemented");
  613      #endif NOBITFIELD
  614       }
  615      ;
  616
  617      /* 8.7 */
  618      cast(struct type **tpp;) {struct declarator Dc;} :
  619       {Dc = null_declarator;}
  620       '('
  621       type_specifier(tpp)
  622       abstract_declarator(&Dc)
  623       ')'
  624       {*tpp = declare_type(*tpp, &Dc);}
  625       {if (Dc.dc_formal) free_formals(Dc.dc_formal);
  626        remove_declarator(&Dc);}
  627      ;
  628
  629      /*  This code is an abject copy of that of 'declarator', for lack of
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     18   
  630       a two-level grammar.
  631      */
  632      abstract_declarator(register struct declarator *dc;)
  633       {arith count; int t_const = 0, t_vol = 0;
  634       struct formal *fmx = 0;
  635       int elipsix        = 0;
  636       }
  637      :
  638       primary_abstract_declarator(dc)
  639       [
  640          '('
  641             [  {  stack_level();
  642                   if (level == L_FORMAL1) stack_level();
  643                }
  644                parameter_dec_list( &fmx, &elipsix)
  645             ]?
  646          ')'
  647          {add_decl_unary(dc, FUNCTION, (arith)0, fmx);
  648           if (fmx) {
  649              if (fmx->fm_type) {
  650                 unstack_level();
  651                 if (level == L_FORMAL1) unstack_level();
  652                 }
  653              else error("Formal arguments must be absent or declared with type");
  654              }
  655          }
  656       |
  657          arrayer(&count)
  658          {add_decl_unary(dc, ARRAY, count, NO_PARAMS);}
  659       ]*
  660      |
  661       '*' abs_pointer_qualifier(dc, &t_const, &t_vol)
  662       {add_decl_unary(dc, POINTER, (arith)t_const*2+t_vol, NO_PARAMS);}
  663      ;
  664
  665      abs_pointer_qualifier(struct declarator *dc; int *tp_const; int *tp_vol;)
  666      :
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     19   
  667       [   CONST abs_pointer_qualifier(dc,tp_const,tp_vol)
  668        {  if (*tp_const)
  669              error("repeated \"const\" type qualifier");
  670           *tp_const = 1;
  671        }
  672       |   VOLATILE abs_pointer_qualifier(dc,tp_const,tp_vol)
  673        {  if (*tp_vol) error("repeated \"volatile\" type qualifier");
  674           *tp_vol = 1;
  675        }
  676       |   abstract_declarator(dc)
  677       ]
  678      ;
  679
  680      param_pointer_qualifier(struct declarator *dc; int *tp_const; int *tp_vol;)
  681      :
  682       [   CONST param_pointer_qualifier(dc,tp_const,tp_vol)
  683        {  if (*tp_const)
  684              error("repeated \"const\" type qualifier");
  685           *tp_const = 1;
  686        }
  687       |   VOLATILE param_pointer_qualifier(dc,tp_const,tp_vol)
  688        {  if (*tp_vol) error("repeated \"volatile\" type qualifier");
  689           *tp_vol = 1;
  690        }
  691       |   param_declarator(dc)
  692       ]
  693      ;
  694
  695      primary_abstract_declarator(struct declarator *dc;) :
  696      [%if (AHEAD == ')')
  697       empty
  698      |
  699       '(' abstract_declarator(dc) ')'
  700      ]
  701      ;
  702
  703      empty:
11:50 AUG 20 '97 zbc$declar:g.:ZBC3TSI                                     20   
  704      ;
  705
  706      /* 8.8 */
  707      /* included in the IDENTIFIER/TYPE_IDENTIFIER mechanism */
  708

