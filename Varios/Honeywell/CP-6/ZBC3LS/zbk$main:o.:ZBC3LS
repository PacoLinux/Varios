

CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*M*  NAME: zbk$main:c - driver module for the ou generator.
        2         2                   This is the driver routine for the generation of CP-6
        3         3                   object units. Amoung the functions that are performed
        4         4                   in this routine are the generation of the specific
        5         5                   parts of the object unit that have to do with the initial
        6         6                   and final phases of the object unit generation.
        7         7             */
        8         8             #include <stdio:h>
        9         9             #include <errno:h>
       10        10             #include "zbk$ougen:h"
       11        11             #include "zbk$tables:h"
       12        12
       13        13             #define pl6str(_s_)  ( *(int *) zbk_buffer =0,\
       14        13                   strcpy( &zbk_buffer[2], _s_ ),\
       15        13                   *(int *)zbk_buffer |= strlen( &zbk_buffer[2] ) << 18)
       16        16
       17        17             #define  pl6str2(_s_)  ( *(int *) zbk_buffer =0,\
       18        17                   strcpy( &zbk_buffer[1], _s_ ),\
       19        17                   *(int *)zbk_buffer |= strlen( &zbk_buffer[1] ) << 27)
       20        20             #define OLD_ID  0
       21        21
       22        22             char zbk_buffer[512] ;
       23        23
       24        24
       25        25             int curr_eol_flag ;
       26        26
       27        27             int zbk_reloc_addr ;
       28        28
       29        29             struct zbk_reloc_struct zbk_reloc[8] = { 0,0,0,
       30        30    1                                       0,0,RELADDOP,
       31        31    1                                       0,17,RELADDOP,
       32        32    1                                       24,35,RELADDOP,
       33        33    1                                       9,35,0,
       34        34    1                                       18,35,0,
       35        35    1                                       0,0,RELSTORER,
       36        36    1                                       0,0,0 };
       37        37
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       38        38             int zbk_reloc_directive ;
       39        39             int zbk_reloc_type ;
       40        40             int zbk_reloc_section ;
       41        41             int zbk_instruct_type ;
       42        42
       43        43
       44        44             struct zbk_sec_table zbk_s_s_table[20] ;
       45        45             int xbo_seg_ref_id;
       46        46             int zbk_procsec ;
       47        47             int zbk_datasec ;
       48        48             int zbk_conssec ;
       49        49             int zbk_opt;
       50        50             int zbk_register_opt_flag = {1};
       51        51             int zbk_first_func_flag;
       52        52             int zbk_instr_drop_count ;
       53        53             int zbk_debug_flag = 1; /* temp setting- need real ref to global set
       54        54                                    in the root by options scanner. */
       55        55             int zbk_debug_print_flag = 0; /* debug print flag for ou generator.. */
       56        56             int zbk_debug_drop_flag =1; /* debug print for dropped instructions in
       57        57                                       register optimization mode. */
       58        58             int zbk_log_blk_num ;  /* logical blk number for debug stuff.. */
       59        59             int zbk_var_num ;  /* curr debug tbl ariable entry number.  */
       60        60
       61        61             extern int zbk$set_control ();
       62        62             extern int zbk$set_pointer();
       63        63             extern int zbk$set_addr_pointer();
       64        64
       65        65
       66        66             int zbk_int_constant_flag;
       67        67             int zbk_first_blk_flag ;
       68        68             int zbk_first_prog_line;
       69        69             int zbk_instr_flag ;
       70        70             int zbk_symdef_flag ;
       71        71             int zbk_static_terminate_flag;
       72        72             int zbk_static_data_flag;
       73        73             char zbk_static_con_name[130];
       74        74             char zbk_static_data_name[130];
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       75        75             int zbk_static_con_ref_num;
       76        76             int zbk_static_data_ref_num;
       77        77             int zbk_static_con_size ;
       78        78             int zbk_static_data_size ;
       79        79             int zbk_static_first_use_flag ;
       80        80             int zbk_static_function_flag;
       81        81             int zbk_debug_rec_match_flag ;
       82        82             int zbk_global_store_flag;
       83        83             int zbk_active_label; /* last active stmt lbl in the debug schema. */
       84        84
       85        85
       86        86             int *zbk_string_ptr ;
       87        87             labels_p zbk_first_lbl_tbl_ptr;
       88        88             labels_p zbk_lbl_tbl_ptr ;
       89        89             sym_tbl_p zbk_first_sym_tbl_ptr ;
       90        90             sym_tbl_p zbk_sym_tbl_ptr;
       91        91             line_tbl_p zbk_line_tbl_ptr;
       92        92
       93        93
       94        94             int zbk_curr_con_section; /* the current active control section. */
       95        95             char zbk_static_func_suffix[64] = "    ";
       96        96
       97        97
       98        98             char zbk_progname[65];  /* hold prog/file name being compiler.*/
       99        99             int zbk_oudcbnum;
      100       100             int *zbk_oudcbptr ;
      101       101             char zbk_ououtput[130];
      102       102             char zbk_cginput[130];
      103       103             int zbk_error_severity;
      104       104             int zbk_forward_ref_flag ;
      105       105             int zbk_forward_ref_count;
      106       106             int zbk_ref_name_flag ;  /* have a sym ent ref name on tsx instruction, */
      107       107             zbk_fwd_ref_p   zbk_fwd_p;
      108       108             int zbk_fwd_tbl_size ;
      109       109
      110       110             int zbk_integer_only_flag;
      111       111             char *zbk_cur_func;
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      112       112             char *zbk_cur_file = (char *) 0;
      113       113             int zbk_line_num = 0;
      114       114             char *OUGEN_PHASE = "Object Generation:";
      115       115             #define BRK_FMT   "%s File=%s  Line=%d   Function=%s,\n"
      116       116
      117       117
      118       118             extern int zbk$set_file_name();
      119       119             extern int zbk$set_static_storage();
      120       120             extern int *zbk$myalloc();
      121       121             extern void zbk$get_symbol_ids();
      122       122             extern void zbk$set_entry_def();
      123       123             extern void zbk$set_debug_stmt_info();
      124       124             extern void zbk$set_label_info();
      125       125             extern void zbk$set_var_info();
      126       126             extern void zbk$set_debug_blk_info();
      127       127             extern void zbk$set_debug_fun_info();
      128       128             extern void zbk$set_line();
      129       129             extern void zbk$set_data_ref_num();
      130       130             extern void zbk$set_con_ref_num();
      131       131             extern void zbk$walk_lbls();
      132       132             extern void zbk$walk_vars();
      133       133             extern void zbk$check_for_static_terminate();
      134       134             extern void zbk$check_if_first_call();
      135       135             extern void zbk$set_global_debug_vars();
      136       136             extern sym_tbl_p zbk$scan_and_search_for_id();
      137       137             extern struct two_halfs zbk_instruc ;
      138       138
      139       139
      140       140                   char zbk_blnk_buff[] = {"
                                "};
      141       141
      142       142             int zbk_c ;
      143       143
      144       144
      145       145             int zbk_list_options_lo;
      146       146             int zbk_list_options_dmap;
      147       147             int zbk_list_options_pmap;
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      148       148             int zbk_list_options_mdmap;
      149       149             int zbk_lo_flag = { 0 }; /* dummy for the moment - should be an
      150       150                                   external reference to flag set in root. */
      151       151             int zbk_debuflag = {-1} ;
      152       152             int zbk_pm_flag = {-1} ;
      153       153             int zbk_dm_flag = {-1} ;
      154       154             int zbk_mdm_flag = {-1} ;
      155       155             int zbk_two_arg = {2};
      156       156             int zbk_zero_arg = {0};
      157       157             int zbk_one_arg = {1};
      158       158             int zbk_three_arg = {3};
      159       159             int zbk_minus_one_arg = {-1};
      160       160             int zbk_compiler_id = {COMPILER_ID};
      161       161             int zbk_codesect = {CODESECT};
      162       162             int zbk_datasect = {DATASECT};
      163       163             int zbk_zeroinit = {ZEROINIT};
      164       164             int zbk_evenbound = {EVENBOUND};
      165       165             int zbk_noinit = {NOINIT} ;
      166       166             int zbk_eightbound = {EIGHTBOUND} ;
      167       167             int zbk_conssect = {CONSSECT} ;
      168       168             int zbk_noname = {NONAME};
      169       169
      170       170             int zbk_trustme = {-1};
      171       171
      172       172             /*    Main driver routine follows......    */
      173       173
      174       174             zbk_output_init (char *argv)
      175       175                   {
      176       176    1        int i;
      177       177    1        void ZB_OPEN_OU_IMPLICIT();
      178       178    1        void ZB_CLOSE_OU_FILE();
      179       179    1
      180       180    1        void zbk$loerrhandler();
      181       181    1        void LOSTMT_HANDLER();
      182       182    1              strcpy (zbk_progname, argv );
      183       183    1              strcpy (zbk_ououtput , argv ) ;
      184       184    1
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      185       185    1              pl6str2 (zbk_ououtput);
      186       186    1              ZB_OPEN_OU_IMPLICIT( &zbk_oudcbnum, &zbk_oudcbptr);
      187       187    1              if (zbk_lo_flag)
      188       188    1                loinit();  /* initialize the LO handler */
      189       189    1
      190       190    1
      191       191    1              vmeminit ( 4096, 3, 40);
      192       192    1              /* The virtual memory initialization routine. */
      193       193    1
      194       194    1              zbk_static_function_flag = 0;
      195       195    1              zbk_static_data_flag = -1;
      196       196    1              zbk_static_terminate_flag = 0;
      197       197    1              zbk_static_first_use_flag = -1;
      198       198    1              zbk_static_con_size = 0 ;
      199       199    1              zbk_static_data_size = 0 ;
      200       200    1              zbk_debug_rec_match_flag = 0;
      201       201    1              zbk_active_label = 0;
      202       202    1              zbk_global_store_flag = 0;
      203       203    1              zbk_blk_count = 0;
      204       204    1              zbk_stmt_count = 0;
      205       205    1              zbk_first_blk_flag = 1;
      206       206    1              zbk_first_prog_line = 1;
      207       207    1              zbk_symdef_flag = 0;
      208       208    1              zbk_integer_only_flag = 0;
      209       209    1              zbk_int_constant_flag = 0;
      210       210    1
      211       211    1              zbk_lbl_tbl_ptr = NULL;
      212       212    1              zbk_line_tbl_ptr = NULL ;
      213       213    1              zbk_first_lbl_tbl_ptr = NULL;
      214       214    1              zbk_first_sym_tbl_ptr = NULL;
      215       215    1              zbk_sym_tbl_ptr = NULL ;
      216       216    1              zbk_string_ptr = NULL;
      217       217    1              zbk_static_p = NULL;
      218       218    1
      219       219    1              zbk_fwd_tbl_size = 700;
      220       220    1              zbk_fwd_p = (zbk_fwd_ref_p) zbk$myalloc( zbk_fwd_tbl_size * sizeof(short
                               ));
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      221       221    1
      222       222    1              for (i=0; i < 128; i++) {
      223       223    2                zbk_label_hash[i] = NULL ;
      224       224    2                zbk_symbol_hash[i] = NULL ;
      225       225    2              }  /* end of the for loop. */
      226       226    1
      227       227    1              zbk_cur_func = zbk_progname;
      228       228    1              zbk_cur_file = zbk_ououtput;
      229       229    1              set_break_vars (BRK_FMT, &OUGEN_PHASE, &zbk_cur_file, (char *) 0,
      230       230    1                             &zbk_line_num, &zbk_cur_func, (int *) 0, (int *) 0);
      231       231    1
      232       232    1              return;
      233       233    1        }  /* end of the setup routine for the o.u. generation stuff. */
      234       234
      235       235             /*i*
      236       236                   name: zbk_output_finish
      237       237                   purpose: This routine in the last one called by the codegen
      238       238                   phase of the compiler. It causes the last o.u. to be closed
      239       239                   and the last o.u. zbk_output.
      240       240             */
      241       241             zbk_output_finish () {
      242       242    1
      243       243    1              zbk$outerm();  /* go terminate the last o.u. */
      244       244    1
      245       245    1              return;
      246       246    1        }
      247       247
      248       248
      249       249             /*    The follwoing routines are all called form the code generator
      250       250                   to produce the object unit code for the  different fucntions
      251       251                   that are being compiled.
      252       252             */
      253       253
      254       254
      255       255             /*i*
      256       256                   name: zbk_output_use
      257       257                   purpose: The rotuine is called to set the current control
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      258       258                   section usage for the code that is being generated.
      259       259             */
      260       260             zbk_output_use (int use_val) {
      261       261    1
      262       262    1              zbk$check_if_first_call(); /* check for data proc processing. */
      263       263    1              zbk$set_use (use_val);
      264       264    1
      265       265    1              return;
      266       266    1        }
      267       267
      268       268
      269       269             /*i*
      270       270                   name: zbk_output_abs
      271       271                   purpose: This routine is called to zbk_output to the o.u. one word
      272       272                   of absolute value.
      273       273             */
      274       274             zbk_output_abs(unsigned abs_value) {
      275       275    1              int curr_offset;
      276       276    1              unsigned p_abs_value;
      277       277    1
      278       278    1              curr_offset = zbk_s_s_table[zbk_curr_con_section].curr_offset++;
      279       279    1              p_abs_value = abs_value;
      280       280    1              if (zbk_debug_print_flag != 0) {
      281       281    2                 printf ("  section= %d, offset= %d, instruct= %12o,\n",
      282       282    2                    zbk_procsec, curr_offset, abs_value);
      283       283    2              }
      284       284    1
      285       285    1              XUO$PRGM (&zbk_curr_con_section, &curr_offset, &p_abs_value);
      286       286    1              return;
      287       287    1        }
      288       288
      289       289
      290       290             /*i*
      291       291                   name:zbk_output_rpt_abs
      292       292                   purpose: This rotuine is called to ouput the same abs value
      293       293                   n times.
      294       294             */
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      295       295             zbk_output_rpt_abs (unsigned abs_value, int a_count) {
      296       296    1        int curr_offset, i;
      297       297    1        unsigned p_abs_value;
      298       298    1
      299       299    1              if (zbk_debug_print_flag != 0) {
      300       300    2                 printf ("  section= %d, offset= %d, instruct= %12o,\n",
      301       301    2                    zbk_procsec, curr_offset, abs_value);
      302       302    2              }
      303       303    1              p_abs_value = abs_value;
      304       304    1              for (i=0; i < a_count; i++) {
      305       305    2                curr_offset = zbk_s_s_table[zbk_curr_con_section].curr_offset++;
      306       306    2                XUO$PRGM (&zbk_curr_con_section, &curr_offset, &p_abs_value);
      307       307    2              }
      308       308    1              return;
      309       309    1        }
      310       310
      311       311
      312       312
      313       313             /*i*
      314       314                   name: zbk_output_fil
      315       315                   purpose: This routine is called to set the file name up via a
      316       316                   pointer. Always called with a label as its arg.
      317       317             */
      318       318             zbk_output_fil (char *file_name) {
      319       319    1
      320       320    1              if (file_name[0] == '@' ) {
      321       321    2                zbk$set_stmt_lbl (file_name, REFED);
      322       322    2                return;
      323       323    2              }
      324       324    1              strcpy (zbk_progname, file_name);
      325       325    1
      326       326    1              return;
      327       327    1        }
      328       328
      329       329
      330       330             /*i*
      331       331                   name: zbk_output_lin
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      332       332                   purpose: This routine calls the routines to build the debug
      333       333                   table entry for executable statements. It is called for each
      334       334                   line number of the program.
      335       335             */
      336       336             zbk_output_lin (unsigned line_no) {
      337       337    1
      338       338    1              zbk$set_line (line_no);
      339       339    1              return;
      340       340    1        }
      341       341
      342       342
      343       343             /*i*
      344       344                   name: zbk_output_evenup
      345       345                   purpose: This routine is called to put the current offset
      346       346                   in the current active control section on an even word boundry.
      347       347             */
      348       348             zbk_output_evenup () {
      349       349    1
      350       350    1              if (zbk_s_s_table[zbk_curr_con_section].curr_offset%2 != 0) {
      351       351    2                zbk_s_s_table[zbk_curr_con_section].curr_offset++;
      352       352    2              }
      353       353    1              return;
      354       354    1        }
      355       355
      356       356
      357       357             /*i*
      358       358                   name: zbk_output_def_lbl
      359       359                   purpose: This routine is called to def the passed label at the
      360       360                   current offset in the current control section.
      361       361             */
      362       362             zbk_output_def_lbl (char *lname) {
      363       363    1
      364       364    1              zbk$set_stmt_lbl (lname, DEFED);
      365       365    1
      366       366    1              return;
      367       367    1        }
      368       368
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=11 
      369       369
      370       370             /*i*
      371       371                   name: zbk_output_fun
      372       372                   purpose: This routine is called to zbk_output a def for the function
      373       373                   name that is passed.
      374       374
      375       375             */
      376       376             zbk_output_fun (char *pname) {
      377       377    1              /* a call to this routine also terminates the previous o.u.
      378       378    1                 that was being processed.
      379       379    1              */
      380       380    1
      381       381    1              strcpy (zbk_progname, pname);
      382       382    1
      383       383    1              return;
      384       384    1        }
      385       385
      386       386
      387       387
      388       388             /*i*
      389       389                   name: zbk_output_glo_fun
      390       390                   purpose: This routine is called to generate the global def
      391       391                   for the routine. In reality, it is a nop because the def of
      392       392                   the program anme is actually done at the close of the
      393       393                   o.u.
      394       394             */
      395       395             zbk_output_glo_fun (char *pname) {
      396       396    1
      397       397    1              if (pname[0] == '@') {
      398       398    2                zbk$set_stmt_lbl(pname, DEFED);
      399       399    2                return;
      400       400    2              } else {
      401       401    2                zbk$set_entry_def(pname); }
      402       402    1
      403       403    1              return;
      404       404    1        }
      405       405
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=12 
      406       406
      407       407             /*i*
      408       408                   name: zbk_output_glo_var
      409       409                   purpose: This routine is called to generate a def of the
      410       410                   passed variable name.
      411       411             */
      412       412             zbk_output_glo_var (char *varname) {
      413       413    1        struct zbk_sym_tbl *sp;
      414       414    1
      415       415    1              if (varname[0] == '@') {
      416       416    2                zbk$set_stmt_lbl (varname, DEFED);
      417       417    2                return;
      418       418    2              }
      419       419    1
      420       420    1              /* set sym def stuff here... */
      421       421    1              zbk_global_store_flag = 1;
      422       422    1              sp = zbk$scan_and_search_for_id(varname, OLD_ID);
      423       423    1              zbk_global_store_flag = 0;
      424       424    1              sp->addr_type = SYMDEF_TYPE;
      425       425    1              sp->ou_set_flag = -1;
      426       426    1
      427       427    1              return;
      428       428    1        }
      429       429
      430       430
      431       431
      432       432             /*i*
      433       433                   name: zbk_output_rel
      434       434                   purpose: This routine is called to generate an abs word as
      435       435                   well as a relocation directive. The abs val and the id to
      436       436                   relocate are received as parameters on the call to this
      437       437                   routine.
      438       438             */
      439       439             zbk_output_rel (unsigned instruct, char *symbol) {
      440       440    1        unsigned addr_offset, temp1, temp_reloc_type, temp_start_bit;
      441       441    1        unsigned temp_end_bit, frd_ref, reloc_temp_type;
      442       442    1        int curr_offset;
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=13 
      443       443    1
      444       444    1              curr_offset = zbk_s_s_table[zbk_curr_con_section].curr_offset;
      445       445    1              if (symbol[0] == '=') { /* have a literal id at this point. */
      446       446    2                if(symbol[1] == '@') { /* have literal label ptr, */
      447       447    3                  addr_offset = zbk$set_pointer(&symbol[1]); }
      448       448    2                else {
      449       449    3                  if(symbol[1] == '&') { /* have literal ptr to function. */
      450       450    4                    addr_offset = zbk$set_ptr_to_function(&symbol[1]); }
      451       451    3                  else {
      452       452    4                    addr_offset = zbk$set_addr_pointer(&symbol[1]); }
      453       453    3                }
      454       454    2              } else {
      455       455    2                if (symbol[0] == '@' ) { /* have lbl for address. */
      456       456    3                  addr_offset = zbk$set_stmt_lbl(symbol, REFED);
      457       457    3                } else {
      458       458    3                  temp1 = instruct >> 12;
      459       459    3                  if (temp1 == 070) { /* chk if tsx instruction. */
      460       460    4                    zbk_ref_name_flag = 1;  }
      461       461    3                  addr_offset = zbk$get_symbol_adr (symbol);
      462       462    3                }
      463       463    2              }  /* end of test for literal ('=') */
      464       464    1              /* At this point we are ready to generate the relocartion
      465       465    1                 entity for the instruction. */
      466       466    1
      467       467    1              instruct += (addr_offset << 18);
      468       468    1              zbk_output_abs(instruct);
      469       469    1
      470       470    1              temp_reloc_type = zbk_reloc[zbk_reloc_type].type;
      471       471    1              temp_start_bit = zbk_reloc[zbk_reloc_directive].start_bit;
      472       472    1              temp_end_bit = zbk_reloc[zbk_reloc_directive].end_bit;
      473       473    1
      474       474    1              if (zbk_forward_ref_flag == 0) {
      475       475    2              XUO$RELOC (&zbk_procsec, &curr_offset, &zbk_reloc_type,
      476       476    2                  &zbk_reloc_section, &temp_reloc_type, &temp_start_bit,
      477       477    2                  &temp_end_bit );
      478       478    2              } else {  /* relocation forward ref generation. */
      479       479    2                if (zbk_reloc_type == FREF_LBL ) {
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=14 
      480       480    3                  reloc_temp_type = SECTION_TYPE;
      481       481    3                  temp_reloc_type = zbk_reloc[reloc_temp_type].type;
      482       482    3                  XUO$RELOC(&zbk_procsec, &curr_offset, &reloc_temp_type,
      483       483    3                      &zbk_procsec, &temp_reloc_type, &temp_start_bit,
      484       484    3                      &temp_end_bit);
      485       485    3                   }
      486       486    2                zbk_forward_ref_flag = 0;
      487       487    2                frd_ref = FREF_TYPE;
      488       488    2                XUO$RELOC (&zbk_procsec, &curr_offset, &frd_ref,
      489       489    2                  &zbk_reloc_section, &zbk_reloc_type, &temp_start_bit,
      490       490    2                  &temp_end_bit);  }
      491       491    1
      492       492    1              zbk_ref_name_flag = 0;
      493       493    1              zbk_reloc_type = 0;
      494       494    1              zbk_reloc_section = 0;
      495       495    1              return;
      496       496    1        }
      497       497
      498       498
      499       499             /*i*
      500       500                   name: zbk_output_fwd
      501       501                   purpose: This routine is called to generate the special
      502       502                   forward reference item for the setting of the required
      503       503                   auto frame size on the call to the function setup routine.
      504       504             */
      505       505             zbk_output_fwd (unsigned instruct, char *symbol) {
      506       506    1
      507       507    1              zbk_output_abs (instruct); /* put the abs part of instrct into o.u. */
      508       508    1              zbk_instruc.bot_half = instruct;
      509       509    1              zbk$zero_pseudo (symbol);
      510       510    1              return;
      511       511    1        }
      512       512
      513       513
      514       514
      515       515             /*i*
      516       516                   name: zbk_output_def_fwd
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=15 
      517       517                   purpose: This routine is called to set the final size for the
      518       518                   number of words needed on the auto frame for this woutine.
      519       519             */
      520       520             zbk_output_def_fwd (char *symbol, long size1) {
      521       521    1
      522       522    1              zbk$set_equ_pseudo (symbol, size1);
      523       523    1
      524       524    1              return;
      525       525    1        }
      526       526
      527       527
      528       528
      529       529             /*i*
      530       530                   name: zbk_output_ptr_fun
      531       531                   purpose: This routine is called generate a pointer to the
      532       532                   passed function id, and put it into the current o.u, section
      533       533                   address.
      534       534             */
      535       535             zbk_output_ptr_fun (char *symbol, int offset) {
      536       536    1
      537       537    1              zbk$set_ptr_to_function (symbol, offset);
      538       538    1              return;
      539       539    1        }
      540       540
      541       541
      542       542
      543       543             /*i*
      544       544                   name: zbk_output_ptr_var
      545       545                   purpose: This routine is called generate a pointer to the
      546       546                   passed variable id, and put it into the current o.u, section
      547       547                   address.
      548       548             */
      549       549             zbk_output_ptr_var (char *symbol, int offset) {
      550       550    1
      551       551    1              zbk$set_ptr_to_id (symbol, offset);
      552       552    1              return;
      553       553    1        }
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=16 
      554       554
      555       555
      556       556
      557       557             /*i*
      558       558                   name: zbk_output_ptr_lbl
      559       559                   purpose: This routine is called generate a pointer to the
      560       560                   passed label id, and put it into the current o.u, section
      561       561                   address.
      562       562             */
      563       563             zbk_output_ptr_lbl (char *symbol, int offset) {
      564       564    1
      565       565    1              zbk$set_pointer (symbol, offset);
      566       566    1              return;
      567       567    1        }
      568       568
      569       569
      570       570
      571       571             /*i*
      572       572                   name: zbk_output_equ_sym
      573       573                   purpose: Called to equate two symbols to each other.
      574       574             */
      575       575             zbk_output_equ_sym (char *sym1, char *sym2) {
      576       576    1
      577       577    1              printf (" ****error**** zbk_output_equ_sym called sym1= %s, sym2= %s,\n"
                               ,
      578       578    1                       sym1, sym2);
      579       579    1              return;
      580       580    1        }
      581       581
      582       582
      583       583             /*I*
      584       584                   NAME: zbk_output_ms_fun
      585       585                   purpose: This routine is the driver routine for the processing
      586       586                   of the debug info for the function that is about to be processed.
      587       587             */
      588       588             zbk_output_ms_fun (char *fname, long int1, long int2, long int3, long int4, lo
                               ng int5) {
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=17 
      589       589    1
      590       590    1              zbk$check_for_static_terminate();
      591       591    1              if (zbk_static_terminate_flag != 0) {
      592       592    2                zbk_static_terminate_flag = 0; }
      593       593    1              else {
      594       594    2                zbk$outerm ();
      595       595    2                zbk$walk_lbls ();
      596       596    2                zbk$walk_vars ();
      597       597    2                }
      598       598    1              zbk$set_debug_fun_info(fname, int1, int2, int3, int4, int5);
      599       599    1              return;
      600       600    1        }
      601       601
      602       602
      603       603             /*I*
      604       604                   NAME: zbk_output_ms_stmt
      605       605                   purpose: This routine is the driver routine for the processing
      606       606                   of the debug info for a stmt in the c function that is being
      607       607                   processed.
      608       608             */
      609       609             zbk_output_ms_stmt ( long int1, long int2, long int3) {
      610       610    1
      611       611    1              zbk$set_debug_stmt_info( int1, int2, int3 );
      612       612    1              return;
      613       613    1        }
      614       614
      615       615
      616       616             /*I*
      617       617                   NAME: zbk_output_ms_lbl
      618       618                   purpose: This routine is the driver routine for the processing
      619       619                   of the label infor for debug table.
      620       620             */
      621       621             zbk_output_ms_lbl (long int1, long int2, char *lbl)  {
      622       622    1
      623       623    1              zbk$set_label_info( int1, int2, lbl );
      624       624    1              return;
      625       625    1        }
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=18 
      626       626
      627       627
      628       628             /*I*
      629       629                   NAME: zbk_output_ms_blk
      630       630                   purpose: This routine is the driver routine for the processing
      631       631                   the blk information table entity. This entity descibes the blk
      632       632                   that is being processed.  */
      633       633             zbk_output_ms_blk ( long int1, long int2, long int3, long int4 ) {
      634       634    1
      635       635    1              zbk$set_debug_blk_info( int1, int2, int3, int4 );
      636       636    1              return;
      637       637    1        }
      638       638
      639       639
      640       640             /*I*
      641       641                   NAME: zbk_output_ms_var
      642       642                   purpose: This routine is the driver routine for the processing
      643       643                   of the variable debug table entry.
      644       644             */
      645       645             zbk_output_ms_var (char *snam1, char *snam2, long cst_vect[], int cst_len)  {
      646       646    1
      647       647    1              zbk$check_if_first_call(); /* check for data proc processing. */
      648       648    1              zbk$set_var_info( snam1, snam2, cst_vect, cst_len) ;
      649       649    1              return;
      650       650    1        }
      651       651
      652       652
      653       653             /*I*
      654       654                   NAME: zbk_output_ms_ctln
      655       655                   purpose: This routine is the driver routine for the processing
      656       656                   the text name for the file that is being processed.
      657       657             */
      658       658             zbk_output_ms_ctln (char *str ) {
      659       659    1
      660       660    1              zbk$set_static_name ( str ) ;
      661       661    1              return;
      662       662    1        }
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=19 
      663       663
      664       664
      665       665             /*I*
      666       666                   NAME: zbk_output_ms_sfun
      667       667                   purpose: This routine is the driver routine for the processing
      668       668                   of static function names. These names are put into a table.
      669       669             */
      670       670             zbk_output_ms_sfun (char *fname )  {
      671       671    1
      672       672    1              zbk$note_static_functions( fname ) ;
      673       673    1              return;
      674       674    1        }
      675       675
      676       676
      677       677             /*I*
      678       678                   NAME: zbk_output_ms_rfun
      679       679                   purpose: This routine is the driver routine for the processing
      680       680                   of referencing function names.
      681       681             */
      682       682             zbk_output_ms_rfun (char *fname, long int1, long int2, long int3 )  {
      683       683    1
      684       684    1              zbk$check_if_first_call(); /* chk if first in program. */
      685       685    1              zbk$set_ref_function (fname, int1, int2, int3 );
      686       686    1              return;
      687       687    1        }
      688       688
      689       689             /*I*
      690       690                   NAME: zb6_dummy
      691       691                   purpose: This routine is a dummy routine just to get the defs
      692       692                            needed for the listing routines
      693       693             */
      694       694             zb6_dummy () {
      695       695    1           zb_listing_start_listing ();
      696       696    1        }
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
CC.C03    File=zbk$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=20 
   errno:h.:LIBRARY. is referenced
   zbk$ougen:h.:ZBC3TOU. is referenced
   zbk$tables:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbk$main:c.:ZBC3TSI
