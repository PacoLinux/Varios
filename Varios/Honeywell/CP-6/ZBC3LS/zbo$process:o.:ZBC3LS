

CC.C03    File=zbo$process:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             #ifndef NORCSID
        2         2             static char rcsid[] = "$Header: process.c,v 2.3 87/03/10 01:40:39 ceriel Exp $
                               ";
        3         3             #endif
        4         4
        5         5             #include "param:h"
        6         6             #include "types:h"
        7         7             #include "assert:h"
        8         8             #include "em_spec:h"
        9         9             #include "em_pseu:h"
       10        10             #include "alloc:h"
       11        11             #include "line:h"
       12        12             #include "lookup:h"
       13        13             #include "proinf:h"
       14        14             #include "ext:h"
       15        15
       16        16             /*
       17        17              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
       18        18              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
       19        19              *
       20        20              * Author: Hans van Staveren
       21        21              */
       22        22
       23        23             process() {
       24        24    1
       25        25    1         if (wordsize == 0 || pointersize == 0)
       26        26    1            error("No MES EMX encountered");
       27        27    1         backward();       /* reverse and cleanup list */
       28        28    1         symknown();       /* symbol scope is now known */
       29        29    1         if (!nflag)
       30        30    1            symvalue();    /* give symbols value */
       31        31    1         if (prodepth != 0) {
       32        32    2            if (!nflag) {
       33        33    3               checklocs();   /* check definition of locals */
       34        34    3               peephole(); /* local optimization */
       35        35    3               relabel();  /* relabel local labels */
CC.C03    File=zbo$process:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       36        36    3               flow();     /* throw away unreachable code */
       37        37    3            }
       38        38    2          if  (curpro.mes16p != NULL ) {
       39        39    3              putlines (curpro.mes16p) ; }
       40        40    2            outpro();      /* generate PRO pseudo */
       41        41    2            outregs();     /* generate MES ms_reg pseudos */
       42        42    2         }
       43        43    1         putlines(pseudos);      /* pseudos first */
       44        44    1         if (prodepth != 0) {
       45        45    2            putlines(instrs); /* instructions next */
       46        46    2            outend();      /* generate END pseudo */
       47        47    2            cleanlocals();    /* forget instruction labels */
       48        48    2         } else if(instrs != (line_p) 0)
       49        49    1            error("instructions outside procedure");
       50        50    1        #ifdef COREDEBUG
       51        51   *S*        coreverbose();
       52        52   *S*       #endif
       53        53    1        }
       54        54
       55        55             relabel() {
       56        56    1         register num_p *npp,np,tp;
       57        57    1         register num_p repl,ttp;
       58        58    1
       59        59    1         /*
       60        60    1          * For each label find its final destination after crossjumping.
       61        61    1          * Care has to be taken to prevent a loop in the program to
       62        62    1          * cause same in the optimizer.
       63        63    1          */
       64        64    1
       65        65    1         for (npp = curpro.numhash; npp < &curpro.numhash[NNUMHASH]; npp++)
       66        66    1            for (np = *npp; np != (num_p) 0; np = np->n_next) {
       67        67    2               assert((np->n_line->l_instr&BMASK) == op_lab
       68        67    2                   && np->n_line->l_a.la_np == np);
       69        68    2               for(tp=np; (tp->n_flags&(NUMKNOWN|NUMMARK))==0;
       70        69    2                     tp = tp->n_repl)
       71        70    2                  tp->n_flags |= NUMMARK;
       72        71    2               repl = tp->n_repl;
CC.C03    File=zbo$process:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       73        72    2               for(tp=np; tp->n_flags&NUMMARK; tp = ttp) {
       74        73    3                  ttp = tp->n_repl;
       75        74    3                  tp->n_repl = repl;
       76        75    3                  tp->n_flags &= ~ NUMMARK;
       77        76    3                  tp->n_flags |=   NUMKNOWN;
       78        77    3               }
       79        78    2            }
       80        79    1        }
       81        80
       82        81             symknown() {
       83        82    1         register sym_p *spp,sp;
       84        83    1
       85        84    1         for (spp = symhash; spp < &symhash[NSYMHASH]; spp++)
       86        85    1            for (sp = *spp; sp != (sym_p) 0; sp = sp->s_next)
       87        86    1               if (sp->s_flags & SYMSEEN)
       88        87    1                  sp->s_flags |= SYMKNOWN;
       89        88    1        }
       90        89
       91        90             cleanlocals() {
       92        91    1         register num_p *npp,np,tp;
       93        92    1
       94        93    1         for (npp = curpro.numhash; npp < &curpro.numhash[NNUMHASH]; npp++) {
       95        94    2            np = *npp;
       96        95    2            while (np != (num_p) 0) {
       97        96    3               tp = np->n_next;
       98        97    3               oldnum(np);
       99        98    3               np = tp;
      100        99    3            }
      101       100    2            *npp = (num_p) 0;
      102       101    2         }
      103       102    1        }
      104       103
      105       104             checklocs() {
      106       105    1         register num_p *npp,np;
      107       106    1
      108       107    1         for (npp=curpro.numhash; npp < & curpro.numhash[NNUMHASH]; npp++)
      109       108    1            for (np = *npp; np != (num_p) 0; np=np->n_next)
CC.C03    File=zbo$process:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      110       109    1               if (np->n_line == (line_p) 0)
      111       110    1                  error("local label %u undefined",
      112       111    1                     (unsigned) np->n_number);
      113       112    1        }
      114       113
      115       114             offset align(count,alignment) offset count,alignment; {
      116       115    1
      117       116    1         assert(alignment==1||alignment==2||alignment==4);
      118       117    1         return((count+alignment-1)&~(alignment-1));
      119       118    1        }
      120       119
      121       120             symvalue() {
      122       121    1         register line_p lp;
      123       122    1         register sym_p sp;
      124       123    1         register arg_p ap;
      125       124    1         register argb_p abp;
      126       125    1         short curfrag = 0;
      127       126    1         offset count;
      128       127    1
      129       128    1         for (lp=pseudos; lp != (line_p) 0; lp = lp->l_next)
      130       129    1         switch(lp->l_instr&BMASK) {
      131       130    2         default:
      132       131    2            assert(FALSE);
      133       132    2         case ps_sym:
      134       133    2            sp = lp->l_a.la_sp;
      135       134    2            if (sp->s_frag != curfrag) {
      136       135    3               count = 0;
      137       136    3               curfrag = sp->s_frag;
      138       137    3            }
      139       138    2            count = align(count,wordsize);
      140       139    2            sp->s_value = count;
      141       140    2            break;
      142       141    2         case ps_bss:
      143       142    2         case ps_hol:
      144       143    2            /* nothing to do, all bss pseudos are in diff frags */
      145       144    2         case ps_mes:
      146       145    2            break;
CC.C03    File=zbo$process:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      147       146    2         case ps_con:
      148       147    2         case ps_rom:
      149       148    2            for (ap=lp->l_a.la_arg; ap  != (arg_p) 0; ap = ap->a_next)
      150       149    2            switch(ap->a_typ) {
      151       150    3            default:
      152       151    3               assert(FALSE);
      153       152    3            case ARGOFF:
      154       153    3               count = align(count,wordsize)+wordsize;
      155       154    3               break;
      156       155    3            case ARGNUM:
      157       156    3            case ARGSYM:
      158       157    3            case ARGVAL:
      159       158    3               count = align(count,wordsize)+pointersize;
      160       159    3               break;
      161       160    3            case ARGICN:
      162       161    3            case ARGUCN:
      163       162    3            case ARGFCN:
      164       163    3               if (ap->a_a.a_con.ac_length < wordsize)
      165       164    3                  count = align(count,(offset)ap->a_a.a_con.ac_length);
      166       165    3               else
      167       166    3                  count = align(count,wordsize);
      168       167    3               count += ap->a_a.a_con.ac_length;
      169       168    3               break;
      170       169    3            case ARGSTR:
      171       170    3               for (abp = &ap->a_a.a_string; abp != (argb_p) 0;
      172       171    3                    abp = abp->ab_next)
      173       172    3                  count += abp->ab_index;
      174       173    3               break;
      175       174    3            }
      176       175    2         }
      177       176    1        }
      178       177
---  Include file information  ---

   zbo$param:h.:ZBC3TOU. is referenced
   zbo$types:h.:ZBC3TOU. is referenced
   zbo$assert:h.:ZBC3TOU. is referenced
CC.C03    File=zbo$process:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   zbo$alloc:h.:ZBC3TOU. is referenced
   zbo$line:h.:ZBC3TOU. is referenced
   zbo$lookup:h.:ZBC3TOU. is referenced
   zbo$proinf:h.:ZBC3TOU. is referenced
   zbo$ext:h.:ZBC3TOU. is referenced
   stdio:h.:LIBRARY. is referenced

No diagnostics were issued in the file zbo$process:c.:ZBC3TSI
