

CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              *
        5         5              */
        6         6
        7         7             /*
        8         8              *  L L G E N
        9         9              *
       10        10              *  An Extended LL(1) Parser Generator
       11        11              *
       12        12              *  Author : Ceriel J.H. Jacobs
       13        13              */
       14        14
       15        15             /*
       16        16              * check.c
       17        17              * Several routines to perform checks and printouts
       18        18              */
       19        19
       20        20             # include "types:h"
       21        21             # include "extern:h"
       22        22             # include "io:h"
       23        23             # include "sets:h"
       24        24             # include "assert:h"
       25        25
       26        26             # ifndef NORCSID
       27        27             static string rcsid1 = "$Header: check.c,v 2.3 87/03/10 01:13:04 ceriel Exp $"
                               ;
       28        28             # endif
       29        29
       30        30
       31        31             static string   c_first = "> firstset   ";
       32        32             static string   c_contains = "> containset ";
       33        33             static string   c_follow = "> followset  ";
       34        34             p_set     setalloc();
       35        35             static int   level;
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=2  
       36        36
       37        37             /* In this file are defined : */
       38        38             extern conflchecks();
       39        39             STATIC prline();
       40        40             STATIC printset();
       41        41             STATIC int check();
       42        42             STATIC moreverbose();
       43        43             STATIC prrule();
       44        44             STATIC cfcheck();
       45        45             STATIC resolve();
       46        46             STATIC propagate();
       47        47             STATIC spaces();
       48        48
       49        49             conflchecks() {
       50        50    1         /*
       51        51    1          * Check for conflicts, that is,
       52        52    1          * in a repeating term, the FIRST and FOLLOW must be disjunct,
       53        53    1          * unless there is a disambiguating condition.
       54        54    1          * in an alternation, the sets that determine the direction to take,
       55        55    1          * must be disjunct.
       56        56    1          */
       57        57    1         register p_nont   p;
       58        58    1         register p_order s;
       59        59    1         p_file      x = files;
       60        60    1
       61        61    1         f_input = x->f_name;
       62        62    1         if (verbose >= 3) {
       63        63    2            for (p = nonterms; p < maxnt; p++) p->n_flags |= VERBOSE;
       64        64    2         }
       65        65    1         if (verbose) {
       66        66    2            if ((fout = fopen(f_out,"w")) == NULL) fatal(1,e_noopen,f_out);
       67        67    2         }
       68        68    1         /*
       69        69    1          * Check the rules in the order in which they are declared,
       70        70    1          * and input file by input file, to give proper error messages
       71        71    1          */
       72        72    1         for (; x < maxfiles; x++) {
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=3  
       73        73    2             f_input = x->f_name;
       74        74    2             for (s = x->f_list; s; s = s->o_next) {
       75        75    3            p = &nonterms[s->o_index];
       76        76    3                 if (check(p->n_rule)) p->n_flags |= VERBOSE;
       77        77    3             }
       78        78    2         }
       79        79    1         for (x = files; x < maxfiles; x++) {
       80        80    2             f_input = x->f_name;
       81        81    2             for (s = x->f_list; s; s = s->o_next) {
       82        82    3            p = &nonterms[s->o_index];
       83        83    3            if (p->n_flags & RECURSIVE) {
       84        84    4               error(p->n_lineno,
       85        85    4                  "Recursion in default for nonterminal %s",
       86        86    4                  p->n_name);
       87        87    4            }
       88        88    3            /*
       89        89    3             * If a printout is needed for this rule in
       90        90    3             * LL.output, just do it
       91        91    3             */
       92        92    3            if (verbose && (p->n_flags & VERBOSE)) {
       93        93    4               fprintf(fout,"\n%s :\n",p->n_name);
       94        94    4               printset(p->n_first,c_first);
       95        95    4               printset(p->n_contains,c_contains);
       96        96    4               printset(p->n_follow,c_follow);
       97        97    4               fprintf(fout,"> rule%s\n\t",
       98        98    4                  p->n_flags&EMPTY ? "\t(EMPTY producing)" : "");
       99        99    4               level = 8;
      100       100    4               prrule(p->n_rule);
      101       101    4               level = 0;
      102       102    4               prline("\n");
      103       103    4            }
      104       104    3            /*
      105       105    3             * Now, the conflicts may be resolved
      106       106    3             */
      107       107    3            resolve(p->n_rule);
      108       108    3             }
      109       109    2         }
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=4  
      110       110    1         if (verbose) fclose(fout);
      111       111    1        }
      112       112
      113       113             STATIC
      114       114             prline(s) char *s; {
      115       115    1         fputs(s, fout);
      116       116    1         spaces();
      117       117    1        }
      118       118
      119       119             STATIC
      120       120             printset(p,s) register p_set p; string s; {
      121       121    1         /*
      122       122    1          * Print the elements of a set
      123       123    1          */
      124       124    1         register int   i;
      125       125    1         register int   j;
      126       126    1         register p_token pt;
      127       127    1         string      name;
      128       128    1         int      k;
      129       129    1         int      hulp;
      130       130    1
      131       131    1         k = strlen(s) + 2 + level;
      132       132    1         /*
      133       133    1          * k contains relative level of indentation
      134       134    1          */
      135       135    1         fprintf(fout,"%s{ ",s);
      136       136    1         j = k;
      137       137    1         /*
      138       138    1          * j will gather the total length of the line
      139       139    1          */
      140       140    1         for (i = 0, pt = tokens; i < ntokens; i++,pt++) {
      141       141    2            if (IN(p,i)) {
      142       142    3               hulp = strlen(pt->t_string)+1;
      143       143    3               if (pt->t_tokno < 0400) hulp += 2;
      144       144    3               if ((j += hulp) >= 78) {
      145       145    4                  /*
      146       146    4                   * Line becoming too long
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=5  
      147       147    4                   */
      148       148    4                  j = k+hulp;
      149       149    4                  prline("\n");
      150       150    4                  fprintf(fout,">%*c",k - level - 1,' ');
      151       151    4               }
      152       152    3               fprintf(fout, pt->t_tokno<0400 ? "'%s' " : "%s ",pt->t_string);
      153       153    3            }
      154       154    2         }
      155       155    1         if (ntprint) for (i = 0; i < nnonterms; i++) {
      156       156    2            /*
      157       157    2             * Nonterminals in the set must also be printed
      158       158    2             */
      159       159    2            if (NTIN(p,i)) {
      160       160    3               name = nonterms[i].n_name;
      161       161    3               hulp = strlen(name) + 3;
      162       162    3               if ((j += hulp) >= 78) {
      163       163    4                  j = k + hulp;
      164       164    4                  prline("\n");
      165       165    4                  fprintf(fout,">%*c",k - level - 1,' ');
      166       166    4               }
      167       167    3               fprintf(fout,"<%s> ",name);
      168       168    3            }
      169       169    2         }
      170       170    1         prline("}\n");
      171       171    1        }
      172       172
      173       173             STATIC int
      174       174             check(p) register p_gram p; {
      175       175    1         /*
      176       176    1          * Search for conflicts in a grammar rule.
      177       177    1          */
      178       178    1         register p_set temp;
      179       179    1         register int retval;
      180       180    1
      181       181    1         retval = 0;
      182       182    1         for (;;) {
      183       183    2            switch (g_gettype(p)) {
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=6  
      184       184    3              case EORULE :
      185       185    3               return retval;
      186       186    3              case NONTERM : {
      187       187    4               register p_nont n;
      188       188    4
      189       189    4               n = &nonterms[g_getnont(p)];
      190       190    4               if (g_getnpar(p) != getntparams(n)) {
      191       191    5                   error(p->g_lineno,
      192       192    5                       "Call of %s : parameter count mismatch",
      193       193    5                  n->n_name);
      194       194    5               }
      195       195    4               break; }
      196       196    3              case TERM : {
      197       197    4               register p_term q;
      198       198    4
      199       199    4               q = &terms[g_getcont(p)];
      200       200    4               retval |= check(q->t_rule);
      201       201    4               if (r_getkind(q) == FIXED) break;
      202       202    4               if (setempty(q->t_first)) {
      203       203    5                  q->t_flags |= EMPTYFIRST;
      204       204    5                  retval = 1;
      205       205    5                  error(p->g_lineno, "No symbols in term");
      206       206    5               }
      207       207    4               if (empty(q->t_rule)) {
      208       208    5                  q->t_flags |= EMPTYTERM;
      209       209    5                  retval = 1;
      210       210    5                  error(p->g_lineno, "Term produces empty");
      211       211    5               }
      212       212    4               temp = setalloc();
      213       213    4               setunion(temp,q->t_first);
      214       214    4               if (!setintersect(temp,q->t_follow)) {
      215       215    5                  /*
      216       216    5                   * q->t_first * q->t_follow != EMPTY
      217       217    5                   */
      218       218    5                  if (!(q->t_flags & RESOLVER)) {
      219       219    6                     /*
      220       220    6                         * No conflict resolver
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=7  
      221       221    6                         */
      222       222    6                     error(p->g_lineno,
      223       223    6                        "Repetition conflict");
      224       224    6                     retval = 1;
      225       225    6                     moreverbose(temp);
      226       226    6                  }
      227       227    5               }
      228       228    4               else {
      229       229    5                  if (q->t_flags & RESOLVER) {
      230       230    6                     q->t_flags |= NOCONF;
      231       231    6                     error(p->g_lineno,
      232       232    6                        "%%while, no conflict");
      233       233    6                     retval = 1;
      234       234    6                  }
      235       235    5               }
      236       236    4               free((p_mem) temp);
      237       237    4               break; }
      238       238    3              case ALTERNATION : {
      239       239    4               register p_link l;
      240       240    4
      241       241    4               l = &links[g_getcont(p)];
      242       242    4               temp = setalloc();
      243       243    4               setunion(temp,l->l_symbs);
      244       244    4               if(!setintersect(temp,l->l_others)) {
      245       245    5                  /*
      246       246    5                   * temp now contains the conflicting
      247       247    5                   * symbols
      248       248    5                   */
      249       249    5                  if (!(l->l_flag & (COND|PREFERING|AVOIDING))) {
      250       250    6                     error(p->g_lineno,
      251       251    6        "Alternation conflict");
      252       252    6                     retval = 1;
      253       253    6                     moreverbose(temp);
      254       254    6                  }
      255       255    5               } else {
      256       256    5                  if (l->l_flag & (COND|PREFERING|AVOIDING)) {
      257       257    6                     l->l_flag |= NOCONF;
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=8  
      258       258    6                     error(p->g_lineno,
      259       259    6        "Conflict resolver without conflict");
      260       260    6                     retval = 1;
      261       261    6                  }
      262       262    5               }
      263       263    4               free( (p_mem) temp);
      264       264    4               retval |= check(l->l_rule);
      265       265    4               break; }
      266       266    3            }
      267       267    2            p++;
      268       268    2         }
      269       269    1        }
      270       270
      271       271             STATIC
      272       272             moreverbose(t) register p_set t; {
      273       273    1         /*
      274       274    1          * t points to a set containing conflicting symbols and pssibly
      275       275    1          * also containing nonterminals.
      276       276    1          * Take care that a printout will be prepared for these nonterminals
      277       277    1          */
      278       278    1         register int i;
      279       279    1         register p_nont p;
      280       280    1
      281       281    1         if (verbose == 2) for (i = 0, p = nonterms; i < nnonterms; i++, p++) {
      282       282    2            if (NTIN(t,i)) p->n_flags |= VERBOSE;
      283       283    2         }
      284       284    1        }
      285       285
      286       286             STATIC
      287       287             prrule(p) register p_gram p; {
      288       288    1         /*
      289       289    1          * Create a verbose printout of grammar rule p
      290       290    1          */
      291       291    1         register FILE  *f;
      292       292    1         int      present = 0;
      293       293    1         int      firstalt = 1;
      294       294    1
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=9  
      295       295    1         f = fout;
      296       296    1         for (;;) {
      297       297    2            switch (g_gettype(p)) {
      298       298    3              case EORULE :
      299       299    3               fputs("\n",f);
      300       300    3               return;
      301       301    3              case TERM : {
      302       302    4               register p_term   q;
      303       303    4               register int   c;
      304       304    4
      305       305    4               q = &terms[g_getcont(p)];
      306       306    4               if (present) prline("\n");
      307       307    4               fputs("[   ",f);
      308       308    4               level += 4;
      309       309    4               if (q->t_flags & RESOLVER) {
      310       310    5                  prline("%while (..)\n");
      311       311    5               }
      312       312    4               if (q->t_flags & PERSISTENT) {
      313       313    5                  prline("%persistent\n");
      314       314    5               }
      315       315    4               if (r_getkind(q) != FIXED) {
      316       316    5                  if (!(q->t_flags & PERSISTENT)) {
      317       317    6                      prline("> continue repetition on the\n");
      318       318    6                  }
      319       319    5                  printset(q->t_first, c_first);
      320       320    5                  if (q->t_flags & PERSISTENT) {
      321       321    6                      prline("> continue repetition on the\n");
      322       322    6                  }
      323       323    5                  printset(q->t_contains, c_contains);
      324       324    5                  prline("> terminate repetition on the\n");
      325       325    5                  printset(q->t_follow,c_follow);
      326       326    5                  if (q->t_flags & EMPTYFIRST) {
      327       327    6                      prline(">>> empty first\n");
      328       328    6                  }
      329       329    5                  if (q->t_flags & EMPTYTERM) {
      330       330    6                      prline(">>> term produces empty\n");
      331       331    6                  }
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=10 
      332       332    5                  cfcheck(q->t_first,q->t_follow,
      333       333    5                     q->t_flags & RESOLVER);
      334       334    5               }
      335       335    4               prrule(q->t_rule);
      336       336    4               level -= 4;
      337       337    4               spaces();
      338       338    4               c = r_getkind(q);
      339       339    4               fputs(c == STAR ? "]*" : c == PLUS ? "]+" :
      340       340    4                     c == OPT ? "]?" : "]", f);
      341       341    4               if (c = r_getnum(q)) {
      342       342    5                  fprintf(f,"%d",c);
      343       343    5               }
      344       344    4               prline("\n");
      345       345    4               break; }
      346       346    3              case ACTION :
      347       347    3               fputs("{..} ",f);
      348       348    3               break;
      349       349    3              case ALTERNATION : {
      350       350    4               register p_link l;
      351       351    4
      352       352    4               l = &links[g_getcont(p)];
      353       353    4               if (firstalt) {
      354       354    5                  firstalt = 0;
      355       355    5               }
      356       356    4               else  prline("|\n");
      357       357    4               printset(l->l_symbs,"> alternative on ");
      358       358    4               cfcheck(l->l_symbs,
      359       359    4                  l->l_others,
      360       360    4                  (int)(l->l_flag&(COND|PREFERING|AVOIDING)));
      361       361    4               fputs("    ",f);
      362       362    4               level += 4;
      363       363    4               if (l->l_flag & DEF) {
      364       364    5                  prline("%default\n");
      365       365    5               }
      366       366    4               if (l->l_flag & AVOIDING) {
      367       367    5                  prline("%avoid\n");
      368       368    5               }
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=11 
      369       369    4               if (l->l_flag & PREFERING) {
      370       370    5                  prline("%prefer\n");
      371       371    5               }
      372       372    4               if (l->l_flag & COND) {
      373       373    5                  prline("%if ( ... )\n");
      374       374    5               }
      375       375    4               prrule(l->l_rule);
      376       376    4               level -= 4;
      377       377    4               if (g_gettype(p+1) == EORULE) {
      378       378    5                  return;
      379       379    5               }
      380       380    4               spaces();
      381       381    4               p++; continue; }
      382       382    3              case LITERAL :
      383       383    3              case TERMINAL : {
      384       384    4               register p_token pt = &tokens[g_getcont(p)];
      385       385    4
      386       386    4               fprintf(f,pt->t_tokno<0400 ?
      387       387    4                    "'%s' " : "%s ", pt->t_string);
      388       388    4               break; }
      389       389    3              case NONTERM :
      390       390    3               fprintf(f,"%s ",nonterms[g_getnont(p)].n_name);
      391       391    3               break;
      392       392    3            }
      393       393    2            p++;
      394       394    2            present = 1;
      395       395    2         }
      396       396    1        }
      397       397
      398       398             STATIC
      399       399             cfcheck(s1,s2,flag) p_set s1,s2; {
      400       400    1         /*
      401       401    1          * Check if s1 and s2 have elements in common.
      402       402    1          * If so, flag must be non-zero, indicating that there is a
      403       403    1          * conflict resolver, otherwise, flag must be zero, indicating
      404       404    1          * that there is not.
      405       405    1          */
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=12 
      406       406    1         register p_set temp;
      407       407    1
      408       408    1         temp = setalloc();
      409       409    1         setunion(temp,s1);
      410       410    1         if (!setintersect(temp,s2)) {
      411       411    2            if (! flag) {
      412       412    3               printset(temp,">>> conflict on ");
      413       413    3               prline("\n");
      414       414    3            }
      415       415    2         } else {
      416       416    2            if (flag) {
      417       417    3               prline(">>> %if/%while, no conflict\n");
      418       418    3            }
      419       419    2         }
      420       420    1         free((p_mem) temp);
      421       421    1        }
      422       422
      423       423             STATIC
      424       424             resolve(p) register p_gram p; {
      425       425    1         /*
      426       426    1          * resolve conflicts, as specified by the user
      427       427    1          */
      428       428    1         for (;;) {
      429       429    2            switch (g_gettype(p)) {
      430       430    3              case EORULE :
      431       431    3               return;
      432       432    3              case TERM :
      433       433    3               resolve(terms[g_getcont(p)].t_rule);
      434       434    3               break;
      435       435    3              case ALTERNATION : {
      436       436    4               register p_link   l;
      437       437    4
      438       438    4               l = &links[g_getcont(p)];
      439       439    4               if (l->l_flag & AVOIDING) {
      440       440    5                  /*
      441       441    5                   * On conflicting symbols, this rule
      442       442    5                   * is never chosen
CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=13 
      443       443    5                   */
      444       444    5                  setminus(l->l_symbs,l->l_others);
      445       445    5               }
      446       446    4               if (setempty(l->l_symbs)) {
      447       447    5                  /*
      448       448    5                   * This may be caused by the statement above
      449       449    5                   */
      450       450    5                  error(p->g_lineno,"Alternative never chosen");
      451       451    5               }
      452       452    4               resolve(l->l_rule);
      453       453    4               if (l->l_flag & PREFERING) propagate(l->l_symbs,p+1);
      454       454    4               break; }
      455       455    3            }
      456       456    2            p++;
      457       457    2         }
      458       458    1        }
      459       459
      460       460             STATIC
      461       461             propagate(set,p) p_set set; register p_gram p; {
      462       462    1         /*
      463       463    1          * Propagate the fact that on the elements of set the grammar rule
      464       464    1          * p will not be chosen.
      465       465    1          */
      466       466    1         while (g_gettype(p) != EORULE) {
      467       467    2            setminus(links[g_getcont(p)].l_symbs,set);
      468       468    2            p++;
      469       469    2         }
      470       470    1        }
      471       471
      472       472             STATIC
      473       473             spaces() {
      474       474    1
      475       475    1         if (level > 0) fprintf(fout,"%*c",level,' ');
      476       476    1        }
      477       477
---  Include file information  ---

CC.C03    File=zbl$check:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=14 
   zbl$types:h.:ZBC3TOU. is referenced
   zbl$extern:h.:ZBC3TOU. is referenced
   zbl$io:h.:ZBC3TOU. is referenced
   stdio:h.:LIB_E05. is referenced
   zbl$sets:h.:ZBC3TOU. is referenced
   zbl$assert:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbl$check:c.:ZBC3TSI
