

CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=1  
        1         1             /* $Header: il3_change.c,v 1.4 87/03/10 11:16:41 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  I N L I N E   S U B S T I T U T I O N
        7         7              *
        8         8              *  I L 3 _ C H A N G E . C
        9         9              */
       10        10
       11        11
       12        12             #include <stdio:h>
       13        13             #include "types:h"
       14        14             #include "il:h"
       15        15             #include "debug:h"
       16        16             #include "alloc:h"
       17        17             #include "global:h"
       18        18             #include "def:h"
       19        19             #include "lset:h"
       20        20             #include "aux:h"
       21        21             #include "em_mnem:h"
       22        22             #include "em_pseu:h"
       23        23             #include "em_spec:h"
       24        24             #include "em_mes:h"
       25        25             #include "get:h"
       26        26             #include "put:h"
       27        27             #include "il_aux:h"
       28        28             #include "il3_change:h"
       29        29             #include "il3_aux:h"
       30        30
       31        31             int lfr_flag;  /* noting if call expects a returned value. */
       32        32
       33        33
       34        34             /* chg_callseq */
       35        35
       36        36
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=2  
       37        37
       38        38
       39        39             STATIC line_p par_expr(l,expr)
       40        40              line_p l, expr;
       41        41             {
       42        42    1         /* Find the first line of the expression of which
       43        43    1          * l is the last line; expr contains a pointer
       44        44    1          * to a copy of that expression; effectively we
       45        45    1          * just have to tally lines.
       46        46    1          */
       47        47    1
       48        48    1         line_p lnp;
       49        49    1
       50        50    1         for (lnp = expr->l_next; lnp != (line_p) 0; lnp = lnp->l_next) {
       51        51    2            assert(l != (line_p) 0);
       52        52    2            l = PREV(l);
       53        53    2          while (INSTR(l) == ps_mes) {
       54        54    3           l = PREV(l); }
       55        55    2         }
       56        56    1
       57        57    1         while (INSTR(l) == ps_mes) {
       58        58    2           l = PREV(l); }
       59        59    1         return l;
       60        60    1        }
       61        61
       62        62
       63        63
       64        64             STATIC rem_text(l1,l2)
       65        65              line_p l1,l2;
       66        66             {
       67        67    1         /* Remove the lines from l1 to l2 (inclusive) */
       68        68    1
       69        69    1         line_p l, lstop, l3;
       70        70    1         l = PREV(l1);
       71        71    1         lstop = l2->l_next;
       72        72    1         if ( l == (line_p) 0) {
       73        73    2           l3 = l1->l_next;
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=3  
       74        74    2           l = l1;
       75        75    2           while (l != lstop ) {
       76        76    3             rem_line (l) ;
       77        77    3             l = l3;
       78        78    3             l3 = l->l_next;
       79        79    3           }
       80        80    2           return;
       81        81    2         }
       82        82    1         while (l->l_next != lstop) {
       83        83    2            rem_line(l->l_next);
       84        84    2         }
       85        85    1        }
       86        86
       87        87
       88        88             del_line(l)
       89        89              line_p l;
       90        90             {
       91        91    1         /* remove a line from the list, but do not free the line pointer */
       92        92    1
       93        93    1         if (PREV(l) != (line_p) 0) {
       94        94    2          PREV(l)->l_next = l->l_next;
       95        95    2         }
       96        96    1         if (l->l_next != (line_p) 0) {
       97        97    2          PREV(l->l_next) = PREV(l);
       98        98    2         }
       99        99    1        }
      100       100
      101       101             STATIC store_tmp(p,l,size)
      102       102              proc_p p;
      103       103              line_p l;
      104       104              offset  size;
      105       105             {
      106       106    1         /* Emit code to store a 'size'-byte value in a new
      107       107    1          * temporary local variable in the stack frame of p.
      108       108    1          * Put this code after line l.
      109       109    1          */
      110       110    1
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=4  
      111       111    1         line_p lnp;
      112       112    1
      113       113    1         lnp = int_line(tmplocal(p,size)); /* line with operand temp. */
      114       114    1         p->P_ORGLOCALS += size;
      115       115    1         if (size == ws) {
      116       116    2            lnp->l_instr = op_stl;  /* STL temp. */
      117       117    2         } else {
      118       118    2            if (size == 2*ws) {
      119       119    3               lnp->l_instr = op_sdl; /* SDL temp. */
      120       120    3            } else {
      121       121    3               /* emit 'LAL temp; STI size' */
      122       122    3               lnp->l_instr = op_lal;
      123       123    3               appnd_line(lnp,l);
      124       124    3               l = lnp;
      125       125    3               assert ((short) size == size);
      126       126    3               lnp = newline(OPSHORT);
      127       127    3               SHORT(lnp) = size;
      128       128    3               lnp->l_instr = op_sti;
      129       129    3            }
      130       130    2         }
      131       131    1         appnd_line(lnp,l);
      132       132    1        }
      133       133
      134       134
      135       135
      136       136             STATIC chg_actuals(c,cal)
      137       137              call_p c;
      138       138              line_p cal;
      139       139             {
      140       140    1         /* Change the actual parameter expressions of the call. */
      141       141    1
      142       142    1         actual_p act;
      143       143    1         line_p llast,lfirst,l,ll,lll,llll;
      144       144    1         int sto_off;
      145       145    1
      146       146    1         if (c->cl_actuals == (actual_p) 0) return;
      147       147    1         ll = PREV(cal);
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=5  
      148       148    1         if (SHORT(ll) == 0) return;
      149       149    1         ll = PREV(ll); /* points to arg param word. */
      150       150    1         sto_off = SHORT(ll);
      151       151    1         llll = ll;
      152       152    1        next_try: ;
      153       153    1         for (lll = llll;INSTR(lll) != op_stl && INSTR(lll) != op_sdl; lll = PREV(lll)
                               ) {}
      154       154    1         if (SHORT(ll) != SHORT(lll)) { llll = PREV(lll); goto next_try; }
      155       155    1         llast = PREV(lll);
      156       156    1         act = c->cl_actuals;
      157       157    1
      158       158    1         while (act != (actual_p) 0) {
      159       159    2
      160       160    2            lfirst = par_expr(llast,act->ac_exp);
      161       161    2            /* the code from lfirst to llast is a parameter expression */
      162       162    2           lll = llast->l_next;
      163       163    2           lll = lll->l_next;
      164       164    2            if (act->ac_inl) {
      165       165    3               /* in line parameter; remove it */
      166       166    3            l = llast->l_next;
      167       167    3               rem_text(lfirst,l);
      168       168    3            } else {
      169       169    3           l = llast->l_next;
      170       170    3               store_tmp(curproc,llast,act->ac_size);
      171       171    3           rem_text(l,l);  /* delete the old store. */
      172       172    3               /* put a "STL tmp" -like instruction after the code */
      173       173    3            }
      174       174    2          sto_off += act->ac_size;
      175       175    2          act = act->ac_next;
      176       176    2          if (act == (actual_p) 0) break;
      177       177    2          if (act->ac_size == 8) {
      178       178    3            if (sto_off%8 != 0) {
      179       179    4              sto_off +=4; }
      180       180    3          }
      181       181    2          ll = lll;
      182       182    2        try_again: ;
      183       183    2          for (lll=ll; INSTR(lll) != op_stl && INSTR(lll) != op_sdl; lll = lll->l_next
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=6  
                               ) {}
      184       184    2          if (SHORT(lll) != sto_off) { ll = lll->l_next; goto try_again; }
      185       185    2          llast = PREV(lll);
      186       186    2         }
      187       187    1        }
      188       188
      189       189
      190       190
      191       191             STATIC rm_callpart(c,cal)
      192       192              call_p c;
      193       193              line_p cal;
      194       194             {
      195       195    1         /* Remove the call part, consisting of a CAL,
      196       196    1          * an optional ASP and an optional LFR.
      197       197    1          */
      198       198    1
      199       199    1         line_p l,ll;
      200       200    1
      201       201    1         l= PREV(cal);
      202       202    1         rem_line(cal);
      203       203    1         lfr_flag = 0; /* default - no returned val expected. */
      204       204    1         if (c->cl_proc->p_nrformals > ZEROPARAMS) {
      205       205    2            /* called procedure has parameters */
      206       206    2         }
      207       207    1         if ((INSTR(l) == op_lal) && (PREV(l))) {
      208       208    2           ll = l->l_prev;
      209       209    2           rem_line(l);
      210       210    2           l = ll;
      211       211    2         }
      212       212    1         if (l->l_next != (line_p) 0 && INSTR(l->l_next) == op_lfr) {
      213       213    2           lfr_flag = 1; /* func expects ret value. */
      214       214    2           rem_line(l->l_next); }
      215       215    1        }
      216       216
      217       217
      218       218
      219       219             chg_callseq(c,cal,l_out)
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=7  
      220       220              call_p c;
      221       221              line_p cal,*l_out;
      222       222             {
      223       223    1        line_p ll;
      224       224    1         /* Change the calling sequence. The actual parameter
      225       225    1          * expressions are changed (in line parameters are
      226       226    1          * removed, all other ones now store their result
      227       227    1          * in a temporary local of the caller);
      228       228    1          * the sequence "CAL ; ASP ; LFR" is removed.
      229       229    1          */
      230       230    1
      231       231    1
      232       232    1         chg_actuals(c,cal);
      233       233    1         rem_line( PREV(cal) );       /* remove LOC preceding cal */
      234       234    1         if (INSTR(cal->l_prev) == op_lal) {
      235       235    2           ll = PREV(cal);
      236       236    2             if (PREV(ll)) {
      237       237    3                *l_out = PREV(ll);
      238       238    3             }
      239       239    2             else {
      240       240    3                *l_out = ll;
      241       241    3             }
      242       242    2           }
      243       243    1         else {
      244       244    2           *l_out = PREV(cal); /* last instr. of new paramter part. */
      245       245    2         }
      246       246    1         rm_callpart(c,cal);
      247       247    1        }
      248       248
      249       249
      250       250             /* make_label */
      251       251
      252       252             line_p make_label(l,p)
      253       253              line_p l;
      254       254              proc_p p;
      255       255             {
      256       256    1         /* Make sure that the instruction after l
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=8  
      257       257    1          * contains an instruction label. If this is
      258       258    1          * not already the case, create a new label.
      259       259    1          */
      260       260    1
      261       261    1         line_p lab;
      262       262    1
      263       263    1         if (l->l_next != (line_p) 0 && INSTR(l->l_next) == op_lab) {
      264       264    2            return l->l_next;
      265       265    2         }
      266       266    1         lab = newline(OPINSTRLAB);
      267       267    1         lab->l_instr = op_lab;
      268       268    1         p->p_nrlabels++;
      269       269    1         INSTRLAB(lab) = p->p_nrlabels;
      270       270    1         appnd_line(lab,l);
      271       271    1         return lab;
      272       272    1        }
      273       273
      274       274
      275       275
      276       276             /* modify */
      277       277
      278       278             STATIC act_info(off,acts,ab_off,act_out,off_out)
      279       279              offset off, ab_off, *off_out;
      280       280              actual_p acts, *act_out;
      281       281             {
      282       282    1         /* Find the actual parameter that corresponds to
      283       283    1          * the formal parameter with the given offset.
      284       284    1          * Return it via act_out. If the actual is not
      285       285    1          * an in-line actual, determine which temporary
      286       286    1          * local is used for it; return the offset of that
      287       287    1          * local via off_out.
      288       288    1          */
      289       289    1
      290       290    1         offset sum = 0, tmp = 0;
      291       291    1         actual_p act;
      292       292    1
      293       293    1         for (act = acts; act != (actual_p) 0; act = act->ac_next) {
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=9  
      294       294    2            if (!act->ac_inl) {
      295       295    3               tmp -= act->ac_size;
      296       296    3            }
      297       297    2          if (act->ac_size == 8 && sum != 0) {
      298       298    3            if (sum%8 != 0) { sum += 4; }
      299       299    3          }
      300       300    2            if (sum >= off) {
      301       301    3               /* found */
      302       302    3               *act_out = act;
      303       303    3               if (!act->ac_inl) {
      304       304    4                  *off_out = tmp + sum - off + ab_off;
      305       305    4               } else {
      306       306    4                  assert (sum == off);
      307       307    4               }
      308       308    3               return;
      309       309    3            }
      310       310    2            sum += act->ac_size;
      311       311    2         }
      312       312    1         assert(FALSE);
      313       313    1        }
      314       314
      315       315
      316       316
      317       317             STATIC store_off(off,l)
      318       318              offset off;
      319       319              line_p l;
      320       320             {
      321       321    1         if (TYPE(l) == OPSHORT) {
      322       322    2            assert ((short) off == off);
      323       323    2            SHORT(l) = (short) off;
      324       324    2         } else {
      325       325    2            OFFSET(l) = off;
      326       326    2         }
      327       327    1        }
      328       328
      329       329
      330       330
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=10 
      331       331             STATIC inl_actual(l,expr)
      332       332              line_p l, expr;
      333       333             {
      334       334    1         /* Expand an actual parameter in line.
      335       335    1          * A LOL or LDL instruction is replaced
      336       336    1          * by an expression.
      337       337    1          * A SIL or LIL is replaced by the expression
      338       338    1          * followed by a STI or LOI.
      339       339    1          */
      340       340    1
      341       341    1         line_p e, lnp, s;
      342       342    1         short  instr;
      343       343    1
      344       344    1         instr = INSTR(l);
      345       345    1         assert(expr != (line_p) 0);
      346       346    1         e = copy_expr(expr); /* make a copy of expr. */
      347       347    1         if (instr == op_sil || instr == op_lil) {
      348       348    2            s = int_line((offset) ws);
      349       349    2            s->l_instr = (instr == op_sil ? op_sti : op_loi);
      350       350    2            appnd_line(s,last_line(e));
      351       351    2         } else {
      352       352    2            assert(instr == op_lol || instr == op_ldl);
      353       353    2         }
      354       354    1         lnp = PREV(l);
      355       355    1         rem_line(l);
      356       356    1         app_list(e,lnp);
      357       357    1        }
      358       358
      359       359
      360       360
      361       361             STATIC localref(l,c,ab_off,lb_off)
      362       362              line_p l;
      363       363              call_p c;
      364       364              offset ab_off, lb_off;
      365       365             {
      366       366    1         /* Change a reference to a local variable or parameter
      367       367    1          * of the called procedure.
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=11 
      368       368    1          */
      369       369    1
      370       370    1         offset off, tmpoff;
      371       371    1         actual_p act;
      372       372    1
      373       373    1         off = off_set(l);
      374       374    1         if ((off == 0) && (INSTR(l) == op_lal)) {
      375       375    2            return;
      376       376    2         }
      377       377    1         if (off < 0) {
      378       378    2            /* local variable, only the offset changes */
      379       379    2            store_off(lb_off + off,l);
      380       380    2         } else {
      381       381    2            act_info(off-ZEROPARAMS,c->cl_actuals,ab_off,&act,&tmpoff); /* find actual
                                */
      382       382    2            if (act->ac_inl) {
      383       383    3               /* inline actual parameter */
      384       384    3               inl_actual(l,act->ac_exp);
      385       385    3            } else {
      386       386    3               /* parameter stored in temporary local */
      387       387    3               store_off(tmpoff,l);
      388       388    3            }
      389       389    2         }
      390       390    1        }
      391       391
      392       392
      393       393
      394       394             STATIC chg_mes(l,c,ab_off,lb_off)
      395       395              line_p l;
      396       396              call_p c;
      397       397              offset ab_off, lb_off;
      398       398             {
      399       399    1         /* The register messages of the called procedure
      400       400    1          * must be changed. If the message applies to a
      401       401    1          * local variable or to a parameter that is not
      402       402    1          * expanded in line, the offset of the variable
      403       403    1          * is changed; else the entire message is deleted.
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=12 
      404       404    1          */
      405       405    1
      406       406    1         offset off, tmpoff;
      407       407    1         actual_p act;
      408       408    1         arg_p arg;
      409       409    1
      410       410    1         arg = ARG(l);
      411       411    1         switch ((int) arg->a_a.a_offset) {
      412       412    2            case ms_reg:
      413       413    2            if ((arg = arg->a_next) != (arg_p) 0) {
      414       414    3               /* "mes 3" without further argument is not changed */
      415       415    3               off = arg->a_a.a_offset;
      416       416    3               if (off < 0) {
      417       417    4                  /* local variable */
      418       418    4                  arg->a_a.a_offset += lb_off;
      419       419    4               } else {
      420       420    4                  act_info(off-ZEROPARAMS,c->cl_actuals,ab_off,&act,&tmpoff);
      421       421    4                  if (act->ac_inl) {
      422       422    5                     /* in line actual */
      423       423    5                     rem_line(l);
      424       424    5                  } else {
      425       425    5                     arg->a_a.a_offset = tmpoff;
      426       426    5                  }
      427       427    4               }
      428       428    3            }
      429       429    2            break;
      430       430    2            case ms_par:
      431       431    2            rem_line(l);
      432       432    2            break;
      433       433    2         }
      434       434    1        }
      435       435
      436       436
      437       437
      438       438             STATIC chg_ret(l,c,lab)
      439       439              line_p l,lab;
      440       440              call_p c;
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=13 
      441       441             {
      442       442    1         /* Change the RET instruction appearing in the
      443       443    1          * expanded text of a call. If the called procedure
      444       444    1          * falls through, the RET is just deleted; else it
      445       445    1          * is replaced by a branch.
      446       446    1          */
      447       447    1
      448       448    1         line_p lnp, bra, l1;
      449       449    1
      450       450    1         if (SHORT(l) != 0 && lfr_flag == 0) {  /* func returns val, but call
      451       451    2                  does not expect a value returned - so delete load of ret val. */
      452       452    2           l1 = PREV(l);
      453       453    2           while (INSTR(l1) == ps_mes) {
      454       454    3             l1 = PREV(l1); }
      455       455    2           if (INSTR(l1) == op_lol) {
      456       456    3             rem_line (l1); }
      457       457    2           lfr_flag == 0;
      458       458    2         }
      459       459    1
      460       460    1
      461       461    1         lnp = PREV(l);
      462       462    1         rem_line(l);
      463       463    1         if (!FALLTHROUGH(c->cl_proc)) {
      464       464    2            bra = newline(OPINSTRLAB);
      465       465    2            bra->l_instr = op_bra;
      466       466    2            INSTRLAB(bra) = INSTRLAB(lab);
      467       467    2            appnd_line(bra,lnp);
      468       468    2         }
      469       469    1        }
      470       470
      471       471
      472       472
      473       473             STATIC mod_instr(l,c,lab,ab_off,lb_off,lab_off)
      474       474              line_p l,lab;
      475       475              call_p c;
      476       476              offset ab_off,lb_off;
      477       477              int    lab_off;
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=14 
      478       478             {
      479       479    1         if (TYPE(l) == OPINSTRLAB) {
      480       480    2            INSTRLAB(l) += lab_off;
      481       481    2         } else {
      482       482    2             switch(INSTR(l)) {
      483       483    3            case op_stl:
      484       484    3            case op_inl:
      485       485    3            case op_del:
      486       486    3            case op_zrl:
      487       487    3            case op_sdl:
      488       488    3            case op_lol:
      489       489    3            case op_ldl:
      490       490    3            case op_sil:
      491       491    3            case op_lil:
      492       492    3            case op_lal:
      493       493    3               localref(l,c,ab_off,lb_off);
      494       494    3               break;
      495       495    3            case op_ret:
      496       496    3               chg_ret(l,c,lab);
      497       497    3               break;
      498       498    3            case ps_pro:
      499       499    3            case ps_end:
      500       500    3            case ps_sym:
      501       501    3            case ps_hol:
      502       502    3            case ps_bss:
      503       503    3            case ps_con:
      504       504    3            case ps_rom:
      505       505    3               rem_line(l);
      506       506    3               break;
      507       507    3            case ps_mes:
      508       508    3               chg_mes(l,c,ab_off,lb_off);
      509       509    3               break;
      510       510    3             }
      511       511    2         }
      512       512    1        }
      513       513
      514       514
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=15 
      515       515             modify(text,c,lab,ab_off,lb_off,lab_off)
      516       516              line_p text,lab;
      517       517              call_p c;
      518       518              offset ab_off,lb_off;
      519       519              int    lab_off;
      520       520             {
      521       521    1         /* Modify the EM text of the called procedure.
      522       522    1          * References to locals and parameters are
      523       523    1          * changed; RETs are either deleted or replaced
      524       524    1          * by a BRA to the given label; PRO and END pseudos
      525       525    1          * are removed; instruction labels are changed, in
      526       526    1          * order to make them different from any label used
      527       527    1          * by the caller; some messages need to be changed too.
      528       528    1          * Note that the first line of the text is a dummy instruction.
      529       529    1          */
      530       530    1
      531       531    1         register line_p l;
      532       532    1         line_p next;
      533       533    1
      534       534    1         for (l = text->l_next; l != (line_p) 0; l = next) {
      535       535    2            next = l->l_next;
      536       536    2            /* This is rather tricky. An instruction like
      537       537    2             * LOL 2 may be replaced by a number of instructions
      538       538    2             * (if the parameter is expanded in line). This inserted
      539       539    2             * code, however, should not be modified!
      540       540    2             */
      541       541    2            mod_instr(l,c,lab,ab_off,lb_off,lab_off);
      542       542    2         }
      543       543    1        }
      544       544
      545       545
      546       546
      547       547             mod_actuals(nc,c,lab,ab_off,lb_off,lab_off)
      548       548              call_p nc,c;
      549       549              line_p lab;
      550       550              offset ab_off,lb_off;
      551       551              int    lab_off;
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=16 
      552       552             {
      553       553    1         actual_p act;
      554       554    1         line_p l, next, dum;
      555       555    1
      556       556    1         dum = newline(OPNO);
      557       557    1         PREV(dum) = (line_p) 0;
      558       558    1         for (act = nc->cl_actuals; act != (actual_p) 0; act = act->ac_next) {
      559       559    2            l = act->ac_exp;
      560       560    2            assert(l != (line_p) 0);
      561       561    2            /* Insert a dummy instruction before l */
      562       562    2            dum->l_next = l;
      563       563    2            PREV(l) = dum;
      564       564    2            while(l != (line_p) 0) {
      565       565    3               next = l->l_next;
      566       566    3               mod_instr(l,c,lab,ab_off,lb_off,lab_off);
      567       567    3               l = next;
      568       568    3            }
      569       569    2            act->ac_exp = dum->l_next;
      570       570    2            PREV(dum->l_next) = (line_p) 0;
      571       571    2         }
      572       572    1         oldline(dum);
      573       573    1        }
      574       574
      575       575
      576       576
      577       577             STATIC line_p last_pseu;
      578       578             /* insert */
      579       579
      580       580             STATIC line_p first_nonpseudo(l)
      581       581              line_p l;
      582       582             {
      583       583    1         /* Find the first non-pseudo instruction of
      584       584    1          * a list of instructions.
      585       585    1          */
      586       586    1        line_p l1;
      587       587    1
      588       588    1         while (l != (line_p) 0 && INSTR(l) >= sp_fpseu &&
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=17 
      589       589    1            INSTR(l) <= ps_last) { l1 = l; l = l->l_next; }
      590       590    1            if ( l == (line_p) 0 ) { last_pseu = l1; }
      591       591    1         return l;
      592       592    1        }
      593       593
      594       594
      595       595
      596       596             insert(text,l,firstline)
      597       597              line_p text,l,firstline;
      598       598             {
      599       599    1         /* Insert the modified EM text of the called
      600       600    1          * routine in the calling routine. Pseudos are
      601       601    1          * put after the pseudos of the caller; all
      602       602    1          * normal instructions are put at the place
      603       603    1          * where the CAL originally was.
      604       604    1          */
      605       605    1
      606       606    1         line_p l1,l2,lastpseu, l3 ;
      607       607    1
      608       608    1         l1 = text->l_next;
      609       609    1         oldline(text);  /* remove dummy head instruction */
      610       610    1         if (l1 == (line_p) 0) return; /* no text at all! */
      611       611    1         l2 = first_nonpseudo(l1);
      612       612    1         if (l2 == (line_p) 0) {
      613       613    2            /* modified code consists only  of pseudos */
      614       614    2            app_select_list(l1,PREV(first_nonpseudo(firstline)));
      615       615    2         } else {
      616       616    2            if (l1 == l2) {
      617       617    3               /* no pseudos */
      618       618    3               app_select_list(l2,l);
      619       619    3            } else {
      620       620    3               l3 = first_nonpseudo(firstline);
      621       621    3               if ( l3 != (line_p) 0) {
      622       622    4                  lastpseu = PREV(l3);
      623       623    4                  PREV(l2)->l_next = (line_p) 0; /* cut link */ }
      624       624    3               else {
      625       625    4                  lastpseu = last_pseu;
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=18 
      626       626    4                  PREV(l2)->l_next = (line_p) 0; /* cut link */ }
      627       627    3               app_select_list(l2,l);  /* insert normal instructions */
      628       628    3               app_select_list(l1,lastpseu);
      629       629    3            }
      630       630    2         }
      631       631    1        }
      632       632
      633       633
      634       634
      635       635             liquidate(p,text)
      636       636              proc_p p;
      637       637              line_p text;
      638       638             {
      639       639    1         /* All calls to procedure p were expanded in line, so
      640       640    1          * p is no longer needed. However, we must not throw away
      641       641    1          * any data declarations appearing in p.
      642       642    1          * The proctable entry of p is not removed, as we do not
      643       643    1          * want to create holes in this table; however the PF_BODYSEEN
      644       644    1          * flag is cleared, so p gets the same status as a procedure
      645       645    1          * whose body is unmkown.
      646       646    1          */
      647       647    1
      648       648    1         line_p l, nextl, lastkept = (line_p) 0;
      649       649    1         call_p c, nextc;
      650       650    1
      651       651    1         for (l = text; l != (line_p) 0; l = nextl) {
      652       652    2            nextl = l->l_next;
      653       653    2            switch(INSTR(l)) {
      654       654    3               case ps_sym:
      655       655    3               case ps_hol:
      656       656    3               case ps_bss:
      657       657    3               case ps_con:
      658       658    3               case ps_rom:
      659       659    3                  lastkept = l;
      660       660    3                  break;
      661       661    3           case ps_mes:
      662       662    3            del_line(l);
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=19 
      663       663    3            break;
      664       664    3               default:
      665       665    3                  rem_line(l);
      666       666    3            }
      667       667    2         }
      668       668    1         if (lastkept != (line_p) 0) {
      669       669    2            /* There were some data declarations in p,
      670       670    2             * so we'll turn p into a data-unit; we'll
      671       671    2             * have to append an end-pseudo for this
      672       672    2             * purpose.
      673       673    2             */
      674       674    2            lastkept->l_next = newline(OPNO);
      675       675    2            lastkept->l_next->l_instr = (byte) ps_end;
      676       676    2         }
      677       677    1         /* There may be some calls in the body of p that
      678       678    1          * ought to be expanded in line. As p is removed
      679       679    1          * anyway, there is no use in really performing
      680       680    1          * these substitutions, so the call-descriptors
      681       681    1          * are just thrown away.
      682       682    1          */
      683       683    1
      684       684    1          for (c = p->P_CALS; c != (call_p) 0; c = nextc) {
      685       685    2            nextc = c->cl_cdr;
      686       686    2            rem_call(c);
      687       687    2         }
      688       688    1         /* change the proctable entry */
      689       689    1         p->p_flags1 &= (byte) ~PF_BODYSEEN;
      690       690    1         oldchange(p->p_change);
      691       691    1         olduse(p->p_use);
      692       692    1        }
      693       693
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$il:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$il3_change:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=20 
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_mes:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
   zbe$put:h.:ZBC3TOU. is referenced
   zbe$il_aux:h.:ZBC3TOU. is referenced
   zbe$il3_change:h.:ZBC3TOU. is referenced
   zbe$il3_aux:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$il3_change:c.:ZBC3TSI
