

CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             #include <assert.h>
        2         2             #include <string.h>
        3         3             #include <stdarg.h>
        4         4             #include "em_mnem.h"
        5         5             #include "cg_tree.h"
        6         6             #include "cg_inst.h"
        7         7             #include "cg_funs.h"
        8         8
        9         9                    void instruc (int, ...);
       10        10             static void zbk_analyze_adr (int);
       11        11
       12        12             struct inst inst_tbl[] = {
       13        13    1           INST_TBL_DATA
       14        14    1        };
       15        15
       16        16             int inst_load_reg[] = {
       17        17    1           0,0,0,0,0,INST_LDa,INST_LDa,0,
       18        18    1           INST_LXLn,INST_LXLn,INST_LXLn,INST_LXLn,INST_LXLn,INST_LXLn,INST_LXLn,INST_
                               LXLn,
       19        19    1           INST_LDPn,INST_LDPn,INST_LDPn,INST_LDPn,INST_LDPn,INST_LDPn,INST_LDPn,INST_
                               LDPn,
       20        20    1           INST_FLD,INST_DFLD,INST_LDAQ
       21        21    1        };
       22        22
       23        23             int inst_store_reg[] = {
       24        24    1           0,0,0,0,0,INST_STa,INST_STa,0,
       25        25    1           0,0,0,0,0,0,0,0,
       26        26    1           INST_STPn,INST_STPn,INST_STPn,INST_STPn,INST_STPn,INST_STPn,INST_STPn,INST_
                               STPn,
       27        27    1           INST_FST,INST_DFST,INST_STAQ
       28        28    1        };
       29        29
       30        30             int temp_size_reg[] = {
       31        31    1           0,0,0,0,0,4,4,0,
       32        32    1           4,4,4,4,4,4,4,4,
       33        33    1           4,4,4,4,4,4,4,4,
       34        34    1           4,8,8
CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       35        35    1        };
       36        36
       37        37             int reg_opcode_addend[] = {
       38        38    1           0,0,0,0,0,0,1,0,
       39        39    1           0,1,2,3,4,5,6,7,
       40        40    1           0,1,2,3,4,5,6,7,
       41        41    1           0,0,0
       42        42    1        };
       43        43
       44        44             char *text_regs [] = {
       45        45    1           "","au","qu","du","ic","a","q","dl",
       46        46    1           "x0","x1","x2","x3","x4","x5","x6","x7",
       47        47    1           "p0","p1","p2","p3","p4","p5","p6","p7",
       48        48    1           "","",""
       49        49    1        };
       50        50
       51        51             extern int debug;
       52        52
       53        53             /**********************************************************
       54        54
       55        55                Notes on args for instruc (...) --------------------
       56        56
       57        57                Each string of args to instruc(...) represents one instruction.
       58        58                The call on 'instruc' may convey a single inst:
       59        59                   instruc (string1);
       60        60                or a sequence of insts (by placing a  '-1' at each end):
       61        61                   instruc (-1, string1, ..., stringn, -1);
       62        62
       63        63                Within each 'string', there are a variable number of args,
       64        64                as follows ...
       65        65                   (1) The "INST_op" parameter, which communicates the op code.
       66        66                   (2) The "form" used: this indicates what args follow;
       67        67                       this must be compatible with the args required by
       68        68                       the particular op code used.
       69        69                   (3)... The 3rd & following are optional string args, as
       70        70                       indicated by the "form". These represent register, adr-node,
       71        71                       address offset, and over-rides for the symbol, tag and pr fields.
CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       72        72
       73        73                The "form" parameter appears as a sequence made up of
       74        74                characters (one per arg), selected from the list below.
       75        75                They must be in the same order as shown in the list.
       76        76
       77        77                   form   arg
       78        78                   char:  type:    meaning:
       79        79                   -----  -----    --------
       80        80                   R      (int)    register number
       81        81                   A      (ADR)    address structure
       82        82                   C      (long)   literal constant
       83        83                   N      (int)    word offset from ADR
       84        84                   S      (char *) symbol to over-ride ADR
       85        85                   T or X (int)    tag (or index register number) to over-ride ADR
       86        86                   P      (int)    pointer register number to over-ride ADR
       87        87
       88        88                Example of a single instruction:
       89        89                   instruc (INST_LDa, RA, reg1, dest_adr);
       90        90
       91        91                Example of a sequence of instructions:
       92        92                   instruc (-1,
       93        93
       94        94                       |--------------------------------------------------------------|
       95        95                       | inst\       form\  reg\    adr\  sym\      n\   tag\    pr\  |
       96        96                       |--------------------------------------------------------------|
       97        97                         INST_LDPn,  RA,    ptrj,   ptradr,
       98        98                         INST_LDa,   RA,    regaq,  tbladr,
       99        99                         INST_CMPa,  RAN,   regaq,  tbladr,         2,
      100       100                         INST_TMI,   NT,                            2,   TAG_IC,
      101       101                         INST_aRL,   RN,    regaq,                 15,
      102       102                         INST_LDa,   RSX,   regaq,        "OFSTBL",      regaq,
      103       103                         INST_ADLa,  RNT,   reqaq,                  4,   TAG_DL,
      104       104                         INST_A9BD,  NXP,                           1,   regaq,  ptrj,
      105       105
      106       106                                -1);
      107       107
      108       108                This call would cause the generation of an instruction sequence
CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      109       109                like the following:
      110       110
      111       111                         LDP4  xptrloc
      112       112                         LDQ   casetbl
      113       113                         CMPQ  casetbl+2
      114       114                         TMI   2,IC
      115       115                         QRL   15
      116       116                         LDQ   OFSTBL,QL
      117       117                         ADLQ  4,DL
      118       118                         A9BD  1,QL,PR4
      119       119
      120       120                In the case of multiword EIS instructions, such as MLR & SCM,
      121       121                there are additional "form" characters:
      122       122
      123       123                   form   arg
      124       124                   char:  type:       meaning:
      125       125                   -----  -----       --------
      126       126                   F      (int)       value of fill char, or scan mask
      127       127                   L      (int)       length
      128       128
      129       129                Each EIS descriptor is usually represented by two args:
      130       130                the address, and the length (form = AL).
      131       131                The length param may be either
      132       132                   (1) a 12-bit constant (given verbatim, as for example 128),
      133       133                or (2) the contents of a register (given as the negated register
      134       134                       number, as for example -REG_Q).
      135       135
      136       136                Example of a sequence of instructions, including EIS instructions:
      137       137                   instruc (-1,
      138       138                         INST_LDa,   RA,    lenreg, countadr,
      139       139                         INST_MLR,   ALAL,          sourceadr, -lenreg,
      140       140                                                    destadr,   -lenreg,
      141       141                         INST_MLRF,  F0ANL, 0137,
      142       142                                                    destadr,ofs,5,
      143       143                                -1);
      144       144
      145       145                This call would cause the generation of an instruction sequence
CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      146       146                like the following:
      147       147
      148       148                         LDQ   countadr
      149       149
      150       150                         MLR   (0,0,1),(0,0,1),0000
      151       151                         ADSC9 sourceadr,,,,*Q
      152       152                         ADSC9 destadr,,,,*Q
      153       153
      154       154                         MLR   (0,0,1),(0,0,1),0137
      155       155                         ADSC9 ,,,,0
      156       156                         ADSC9 destadr+ofs,,,,5
      157       157
      158       158             **********************************************************/
      159       159
      160       160             static va_list ap;
      161       161             static unsigned long form, ireq;
      162       162             static unsigned long word[4];
      163       163             static char text_opr[10], text_adr[4][80], *symbol[4];
      164       164
      165       165             void instruc (int seq, ...)
      166       166             {
      167       167    1        unsigned long ireq0;
      168       168    1        int inst, reg, fill, k;
      169       169    1        char *sp;
      170       170    1
      171       171    1           va_start (ap, seq);
      172       172    1           /* 1st arg = 'inst' ... or '-1' initiating a sequence. */
      173       173    1           if (seq>=0) inst = seq;
      174       174    1           else        inst = va_arg (ap, int);
      175       175    1
      176       176    1           do {
      177       177    2              form = va_arg (ap, unsigned long);
      178       178    2              ireq = ireq0 = inst_tbl[inst].ireq;
      179       179    2
      180       180    2              /* we already have 'inst' */
      181       181    2              word[0] = (long)inst_tbl[inst].opcode<<SHIFT_OPCODEx;
      182       182    2              if (debug & DB_LO) strcpy (text_opr, inst_tbl[inst].mnem);
CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      183       183    2
      184       184    2              reg = 0;
      185       185    2              if (form & R) reg = va_arg (ap, int);
      186       186    2              if (ireq & R) {
      187       187    3                 word[0] += (long)reg_opcode_addend[reg]<<SHIFT_OPCODE;
      188       188    3                 if (debug & DB_LO) {
      189       189    4                    sp=strrchr(text_opr,'a');
      190       190    4                    if (sp) *sp = (reg==REG_A)? 'A' : 'Q';
      191       191    4                    sp=strrchr(text_opr,'n');
      192       192    4                    if (sp) *sp = '0' + (reg&7);
      193       193    4                 }
      194       194    3              }
      195       195    2
      196       196    2              fill = 0;
      197       197    2              if (form & F) fill = va_arg (ap, int);
      198       198    2              if (ireq & F) {
      199       199    3                 word[0] |= ((long)fill<<SHIFT_FILL) & MASK_FILL;
      200       200    3                 if (debug & DB_LO)
      201       201    3                    sprintf (text_opr+strlen(text_opr), ",0%03o", fill&0777);
      202       202    3              }
      203       203    2
      204       204    2              text_adr[0][0] = 0;
      205       205    2              k = 0;
      206       206    2              while (form|ireq) {
      207       207    3                 if (k>0) word[k] = 0;
      208       208    3                 zbk_analyze_adr (k);
      209       209    3                 form >>= 8;
      210       210    3                 ireq >>= 8;
      211       211    3                 k ++;
      212       212    3              }
      213       213    2                                     zbk_send_inst (word[0], symbol[0], text_opr, text
                               _adr[0]);
      214       214    2              if (ireq0&0x00007f00L) zbk_send_inst (word[1], symbol[1], "...",    text
                               _adr[1]);
      215       215    2              if (ireq0&0x007f0000L) zbk_send_inst (word[2], symbol[2], "...",    text
                               _adr[2]);
      216       216    2              if (ireq0&0x7f000000L) zbk_send_inst (word[3], symbol[3], "...",    text
CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
                               _adr[3]);
      217       217    2
      218       218    2              inst = va_arg (ap, int);
      219       219    2           } while (seq<0 && inst>=0);
      220       220    1
      221       221    1           va_end (ap);
      222       222    1        }
      223       223
      224       224             static void zbk_analyze_adr (int k)
      225       225             {
      226       226    1        ADR adr=0;
      227       227    1        char *sym=0;
      228       228    1        long offset=0, conval;
      229       229    1        int tag=0, pr=0, len=0;
      230       230    1        char *sp;
      231       231    1        ADR litval;
      232       232    1        unsigned long tag_word_tbl[4] = {0, 0, 0, 3};
      233       233    1        unsigned long tag_shft_tbl[4] = {0, 0,18, 0};
      234       234    1
      235       235    1           if (form & A) {
      236       236    2              adr = va_arg (ap, ADR);
      237       237    2
      238       238    2              sym    = adr->argstr;
      239       239    2              offset = adr->argval;
      240       240    2              tag    = adr->xr;
      241       241    2              pr     = adr->pr;
      242       242    2
      243       243    2              switch (adr->opcode) {
      244       244    3              default:
      245       245    3              case op_adr:
      246       246    3                 break;
      247       247    3
      248       248    3              case op_abs:
      249       249    3                 offset <<= 2;
      250       250    3                 break;
      251       251    3
      252       252    3              case op_con:
CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      253       253    3                 offset = adr->argval;
      254       254    3                 if ((ireq & L)==0 && (offset&0777777000000L)==0) {
      255       255    4                    offset <<= 2;
      256       256    4                    tag = TAG_DL;
      257       257    4                    break;
      258       258    4                 }
      259       259    3                 if ((ireq & L)==0 && (offset&0000000777777L)==0) {
      260       260    4                    offset >>= 16;
      261       261    4                    tag  = TAG_DU;
      262       262    4                    break;
      263       263    4                 }
      264       264    3                 adr = zbk_make_adr_literal (adr);
      265       265    3                 sym    = adr->argstr;
      266       266    3                 offset = adr->argval;
      267       267    3                 tag    = adr->xr;
      268       268    3                 pr     = adr->pr;
      269       269    3                 break;
      270       270    3              }
      271       271    2           }
      272       272    1
      273       273    1           if (form & C) {
      274       274    2              conval = va_arg (ap, long);
      275       275    2              adr = zbk_make_adr_con (conval);
      276       276    2              adr = zbk_make_adr_literal (adr);
      277       277    2
      278       278    2              sym    = adr->argstr;
      279       279    2              offset = adr->argval;
      280       280    2              tag    = adr->xr;
      281       281    2              pr     = adr->pr;
      282       282    2           }
      283       283    1
      284       284    1           if (form & S) sym     = va_arg (ap, char *);
      285       285    1           if (form & N) offset += va_arg (ap, int) * 4;
      286       286    1           if (form & T) tag     = va_arg (ap, int);
      287       287    1           if (form & P) pr      = va_arg (ap, int);
      288       288    1           if (form & L) len     = va_arg (ap, int);
      289       289    1           symbol[k] = sym;
CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      290       290    1
      291       291    1           if (ireq & L) {
      292       292    2              if (len>0) {
      293       293    3                 word[k] |= ( len<<SHIFT_LEN) & MASK_LEN;
      294       294    3              }
      295       295    2              if (len<0) {
      296       296    3                 word[k] |= -len;
      297       297    3                 tag |=  040;
      298       298    3              }
      299       299    2           }
      300       300    1
      301       301    1           if (ireq & A) {
      302       302    2              if ((ireq & L)==0) assert ((offset&3)==0);
      303       303    2              word[k] |= (offset<<SHIFT_BYTE_ADR) & MASK_BYTE_ADR;
      304       304    2
      305       305    2              if (pr) {
      306       306    3                 tag |= 0100;
      307       307    3                 word[k] = (word[k]&~MASK_PR) | ((long)(pr&7)<<SHIFT_PR);
      308       308    3              }
      309       309    2
      310       310    2              if (tag) {
      311       311    3                 word[tag_word_tbl[k]] |= ((long)tag&0177L)<<tag_shft_tbl[k];
      312       312    3              }
      313       313    2           }
      314       314    1
      315       315    1           if (debug&DB_LO) {
      316       316    2              sp = text_adr[k];
      317       317    2              *sp = 0;
      318       318    2
      319       319    2              if (sym)                sp+=sprintf (sp, "%s", sym);
      320       320    2              if (sym && (offset>0))  sp+=sprintf (sp, "+");
      321       321    2              if (offset)             sp+=sprintf (sp, "%ld", offset/4);
      322       322    2              if (offset&3)           sp+=sprintf (sp, ".%c", '0'+((int)offset&3));
      323       323    2
      324       324    2              if ((tag&017) || pr)
      325       325    2                 sp+=sprintf (sp, ",%s,%s", text_regs[tag&017], text_regs[pr]);
      326       326    2
CC.C03    File=zbk$cg_inst:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      327       327    2              if (adr && (adr->opcode==op_lit)) {
      328       328    3                 /* use contents of literal (op_adr or op_con node) */
      329       329    3                 litval = adr->lf;
      330       330    3                 if (litval->opcode == op_con)
      331       331    3                    sp+=sprintf (sp, "   [=%ld]   [=O%lo]", litval->argval, litval->ar
                               gval);
      332       332    3                 else
      333       333    3                    sp+=sprintf (sp, "   [=%s+%ld.%c]", litval->argstr, litval->argval
                               /4,
      334       334    3                                                        '0'+((int)litval->argval&3));
      335       335    3              }
      336       336    2
      337       337    2              if (len>0)
      338       338    2                 sp+=sprintf(sp," [len=%d]",len);
      339       339    2              if (len<0)
      340       340    2                 sp+=sprintf(sp," [len=*%s]",text_regs[-len]);
      341       341    2           }
      342       342    1        }
      343       343
---  Include file information  ---

   assert:h.:LIBRARY. is referenced
   string:h.:LIBRARY. is referenced
   stdarg:h.:LIBRARY. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   zbk$cg_tree:h.:ZBC3TOU. is referenced
   zbk$cg_inst:h.:ZBC3TOU. is referenced
   zbk$cg_funs:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbk$cg_inst:c.:ZBC3TSI
