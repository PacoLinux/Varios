

CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=1  
        1         1             /* $Header: il.c,v 1.5 87/03/10 11:09:57 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  I N L I N E   S U B S T I T U T I O N */
        7         7             #include <stdio:h>
        8         8             #include "types:h"
        9         9             #include "il:h"
       10        10             #include "debug:h"
       11        11             #include "alloc:h"
       12        12             #include "global:h"
       13        13             #include "lset:h"
       14        14             #include "files:h"
       15        15             #include "em_mnem:h"
       16        16             #include "em_pseu:h"
       17        17             #include "map:h"
       18        18             #include "il_aux:h"
       19        19             #include "il1_anal:h"
       20        20             #include "il2_aux:h"
       21        21             #include "il3_subst:h"
       22        22             #include "get:h"
       23        23             #include "put:h"
       24        24             #include "go:h"
       25        25
       26        26             int calnr;
       27        27             int il_act_arg_flag = 0; /* flag used to note actual args when used. */
       28        28             int simple_scan;
       29        29             calcnt_p cchead;   /* call-count info of current proc */
       30        30             STATIC short space = 1000;
       31        31
       32        32             STATIC char cname[] = "*1XXXXXXXXXXXXXXXXXX";
       33        33             STATIC char ccname[] = "*2XXXXXXXXXXXXXXXXX";
       34        34
       35        35             /* For debugging only */
       36        36             STATIC char sname[] = "*3XXXXXXXXXXXXXXXXXX";
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=2  
       37        37
       38        38             int Ssubst;
       39        39             #ifdef VERBOSE
       40        40   *S*       int Senv,Srecursive,Slocals,Sinstrlab,Sparsefails,Spremoved,Scals;
       41        41   *S*       int Sbig_caller,Sdispensable,Schangedcallee,Sbigcallee,Sspace,Szeroratio;
       42        42   *S*       #endif
       43        43
       44        44             /* P A S S  1
       45        45              *
       46        46              * Pass 1 reads and analyses the EM text and the CFG.
       47        47              * It determines for every procedure if it may be expanded
       48        48              * in line and how it uses its formal parameters.
       49        49              * It also collects all calls appearing in the program and
       50        50              * recognizes the actual parameters of every call.
       51        51              * The call descriptors are put in a file (calfile).
       52        52              */
       53        53
       54        54             pass1(cnam)
       55        55              char  *cnam;
       56        56             {
       57        57    1         FILE  *cf, *ccf; /*
       58        58    1                    * the call-list file and the calcnt file.
       59        59    1                    */
       60        60    1         line_p laddr;
       61        61    1         bblock_p g = NULL ;
       62        62    1         short kind;
       63        63    1         line_p l = NULL ;
       64        64    1        /* line_table_p next_line_table;*/  /* declared as a global */
       65        65    1
       66        66    1         cf = openfile(cnam,"wb");
       67        67    1         ccf = openfile(ccname,"wb");
       68        68    1         mesregs = Lempty_set();
       69        69    1         apriori(fproc);
       70        70    1         /* use information from the procedure table to
       71        71    1          * see which calls certainly cannot be expanded.
       72        72    1          */
       73        73    1         next_line_ptr = first_line_ptr;
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=3  
       74        74    1         while(TRUE) {
       75        75    2             laddr = next_line_ptr;
       76        76    2            if (!get_curr_unit(&kind,&g,&l,&curproc,TRUE)) break;
       77        77    2            /* Read the control flow graph and EM text of
       78        78    2             * one procedure and analyze it.
       79        79    2             */
       80        80    2            if (kind == LDATA) {
       81        81    3           put_curr_unit(LDATA,(proc_p) 0,l);
       82        82    3           next_line_table = next_line_table->lt_next;
       83        83    3           if (next_line_table != (line_table_p) 0 ) {
       84        84    4             next_proc = next_line_table->assoc_proc;
       85        85    4             first_line_ptr = next_line_table->first_line;  }
       86        86    3           else {
       87        87    4             first_line_ptr = (line_p) 0; } /* set to null for last. */
       88        88    3               continue;
       89        89    3            }
       90        90    2            /* OUTTRACE("flow graph of proc %d read",curproc->p_id); */
       91        91    2            assert(INSTR(g->b_start) == ps_pro);
       92        92    2            curproc->p_start = g;
       93        93    2            curproc->P_LADDR = first_line_ptr;
       94        94    2            /* address of em text in em-file */
       95        95    2            /* address of graph in basic block file */
       96        96    2            curproc->P_SIZE = proclength(curproc); /* #instructions */
       97        97    2            if (BIG_PROC(curproc)) {
       98        98    3               /* curproc is too large to be expanded in line */
       99        99    3               UNSUITABLE(curproc);
      100       100    3            }
      101       101    2            calnr = 0;
      102       102    2            anal_proc(curproc,cf,ccf);
      103       103    2            /* OUTTRACE("proc %d processed",curproc->p_id); */
      104       104    2            put_curr_unit(LTEXT,curproc,(line_p) 0);
      105       105    2            /* remove control flow graph + text */
      106       106    2            /* OUTTRACE("graph of proc %d removed",curproc->p_id); */
      107       107    2            Ldeleteset(mesregs);
      108       108    2            mesregs = Lempty_set();
      109       109    2           next_line_table = next_line_table->lt_next;
      110       110    2           if (next_line_table != (line_table_p) 0 ) {
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=4  
      111       111    3             next_proc = next_line_table->assoc_proc;
      112       112    3             first_line_ptr = next_line_table->first_line;  }
      113       113    2           else {
      114       114    3             first_line_ptr = (line_p) 0; } /* set to null for last. */
      115       115    2         }
      116       116    1         fclose(cf);
      117       117    1         fclose(ccf);
      118       118    1        }
      119       119
      120       120
      121       121
      122       122             /* P A S S  2
      123       123              *
      124       124              * Pass 2 reads the calfile and determines which calls should
      125       125              * be expanded in line. It does not use the EM text.
      126       126              */
      127       127
      128       128
      129       129
      130       130             STATIC char cname2[] = "*4XXXXXXXXXXXXXXXXXX";
      131       131
      132       132             pass2(cnam,space)
      133       133              char *cnam;
      134       134              short space;
      135       135             {
      136       136    1         FILE  *cf, *cf2, *ccf;
      137       137    1         call_p c,a;
      138       138    1
      139       139    1         cf = openfile(cnam,"rb");
      140       140    1         cf2 = openfile(cname2,"wb");
      141       141    1         ccf = openfile(ccname,"rb");
      142       142    1         while ((c = getcall(cf)) != (call_p) 0) {
      143       143    2            /* process all calls */
      144       144    2            if (SUITABLE(c->cl_proc) && anal_params(c)) {
      145       145    3               /* called proc. may be put in line */
      146       146    3               /* see which parameters may be put in line */
      147       147    3               assign_ratio(c); /* assign a rank */
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=5  
      148       148    3               a = abstract(c); /* abstract essential info */
      149       149    3               append_abstract(a,a->cl_caller);
      150       150    3               /* put it in call-list of calling proc. */
      151       151    3               il_act_arg_flag = 1;
      152       152    3               putcall(c,cf2,(short) 0);
      153       153    3               il_act_arg_flag = 0;
      154       154    3            } else {
      155       155    3               rem_call(c);
      156       156    3            }
      157       157    2         }
      158       158    1         select_calls(fproc,ccf,space);
      159       159    1         fclose(cf); remove(cnam);
      160       160    1         fclose(cf2);
      161       161    1         fclose(ccf); remove(ccname);
      162       162    1         cf2 = openfile(cname2,"rb");
      163       163    1         add_actuals(fproc,cf2);
      164       164    1         cleancals(fproc); /* remove calls that were not selected */
      165       165    1         /* add actual parameters to each selected call */
      166       166    1         fclose(cf2); remove(cname2);
      167       167    1        }
      168       168
      169       169
      170       170
      171       171             /* P A S S  3
      172       172              *
      173       173              * pass 3 reads the substitution file and performs all
      174       174              * substitutions described in that file. It reads the
      175       175              * original EM text and produced a new (optimized)
      176       176              * EM textfile.
      177       177              */
      178       178
      179       179
      180       180             pass3()
      181       181             {
      182       182    1         bool verbose = TRUE;
      183       183    1          FILE *sfile;
      184       184    1         call_p c,next;
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=6  
      185       185    1         line_p l,startscan,cal;
      186       186    1         short lastcid; /* last call-id seen */
      187       187    1         line_table_p lntable;
      188       188    1         bblock_p save_b;
      189       189    1         extern bblock_p scan_b;
      190       190    1
      191       191    1         if (verbose) {
      192       192    2            sfile = openfile(sname,"wb");
      193       193    2         }
      194       194    1         mesregs = Lempty_set();
      195       195    1         simple_scan = 0;
      196       196    1         lntable = first_line_table;
      197       197    1        next_proc:
      198       198    1         if (lntable != (line_table_p) 0) {
      199       199    2         next_line_ptr = first_line_ptr = lntable->first_line;
      200       200    2         next_proc = lntable->assoc_proc;
      201       201    2         next_line_table = lntable;
      202       202    2         while ((l = get_text(&curproc)) != (line_p) 0) {
      203       203    3            if (curproc == (proc_p) 0) {
      204       204    4               /* Just a data-unit; no real instructions */
      205       205    4           goto set_next_proc;
      206       206    4            }
      207       207    3        /*  if (IS_DISPENSABLE(curproc) && (curproc->p_flags1 & PF_STATICFUNCTION)) {
      208       208    3               liquidate(curproc,l->l_next);
      209       209    3           if (first_line_table == lntable) {
      210       210    3             first_line_table = lntable->lt_next;
      211       211    3           }
      212       212    3           else {
      213       213    3             lntable->lt_priv->lt_next = lntable->lt_next;
      214       214    3           }
      215       215    3           if (lntable->lt_next != (line_table_p) 0) {
      216       216    3             lntable->lt_next->lt_priv = lntable->lt_priv;
      217       217    3           }
      218       218    3           goto set_next_proc;
      219       219    3            } else {   */
      220       220    3        /*    The above code is commented out for the purpose of not deleting
      221       221    3              functions form the stream.....
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=7  
      222       222    3        */
      223       223    3               startscan = l->l_next;
      224       224    3               lastcid = 0;
      225       225    3            simple_scan = 1;
      226       226    3            save_b = (bblock_p) 0;
      227       227    3               for (c = curproc->P_CALS; c != (call_p) 0; c = next) {
      228       228    4                  next = c->cl_cdr;
      229       229    4            scan_b = save_b; /* reset for the scan for next cal. */
      230       230    4                  cal = scan_to_cal(startscan,c->cl_id - lastcid);
      231       231    4                  assert (cal != (line_p) 0);
      232       232    4            simple_scan = 0;
      233       233    4                  startscan = scan_to_cal(cal->l_next,1);
      234       234    4            save_b = scan_b;
      235       235    4                  /* next CAL */
      236       236    4                  lastcid = c->cl_id;
      237       237    4                  /* next CAL after current one */
      238       238    4                  substitute(c,cal,l->l_next);
      239       239    4            curproc->p_flags2 |= PF_FUNCINLINDED; /* functioned hs been inlined. */
      240       240    4                  if (verbose) {
      241       241    5                     putcall(c,sfile,0);
      242       242    5                  } else {
      243       243    5                     rem_call(c);
      244       244    5                  }
      245       245    4               }
      246       246    3           goto set_next_proc;
      247       247    3        /*  }  */
      248       248    3        /*    the above commneted out line goes with the others above. */
      249       249    3         }
      250       250    2        set_next_proc:  ;
      251       251    2         lntable= lntable->lt_next;
      252       252    2         goto next_proc;
      253       253    2         }
      254       254    1         if (verbose) {
      255       255    2            fclose(sfile);
      256       256    2            remove(sname);
      257       257    2         }
      258       258    1        }
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=8  
      259       259
      260       260
      261       261             STATIC il_extptab(ptab)
      262       262              proc_p ptab;
      263       263             {
      264       264    1         /* Allocate space for extension of proctable entries.
      265       265    1          * Also, initialise some of the fields just allocated.
      266       266    1          */
      267       267    1
      268       268    1         register proc_p p;
      269       269    1
      270       270    1         for (p = ptab; p != (proc_p) 0; p = p->p_next) {
      271       271    2            p->p_extend = newilpx();
      272       272    2            p->P_ORGLABELS = p->p_nrlabels;
      273       273    2            p->P_ORGLOCALS = p->p_localbytes;
      274       274    2          p->P_CALS = (call_p *) 0 ;
"zbe$il:c.:ZBC3TSI", line 274: (warning) incompatible pointers in =
      275       275    2          p->P_FORMALS = (formal_p) 0;
      276       276    2         }
      277       277    1        }
      278       278
      279       279             STATIC il_cleanptab(ptab)
      280       280              proc_p ptab;
      281       281             {
      282       282    1         /* De-allocate space for extensions */
      283       283    1
      284       284    1         register proc_p p;
      285       285    1
      286       286    1         for (p = ptab; p != (proc_p) 0; p = p->p_next) {
      287       287    2            oldilpx(p->p_extend);
      288       288    2         }
      289       289    1        }
      290       290
      291       291             #ifdef VERBOSE
      292       292   *S*       Sdiagnostics()
      293       293   *S*       {
      294       294   *S*        /* print statictical information */
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=9  
      295       295   *S*
      296       296   *S*        fprintf(stderr,"STATISTICS:\n");
      297       297   *S*        fprintf(stderr,"Info about procedures:\n");
      298       298   *S*        fprintf(stderr,"environment accessed: %d\n",Senv);
      299       299   *S*        fprintf(stderr,"recursive: %d\n",Srecursive);
      300       300   *S*        fprintf(stderr,"too many locals: %d\n",Slocals);
      301       301   *S*        fprintf(stderr,"instr. lab in data block: %d\n",Sinstrlab);
      302       302   *S*        fprintf(stderr,"procedures removed: %d\n",Spremoved);
      303       303   *S*        fprintf(stderr,"\nInfo about calls:\n");
      304       304   *S*        fprintf(stderr,"total number of calls: %d\n",Scals);
      305       305   *S*        fprintf(stderr,"total number of calls substituted: %d\n",Ssubst);
      306       306   *S*        fprintf(stderr,"parser failed: %d\n",Sparsefails);
      307       307   *S*        fprintf(stderr,"caller too big: %d\n",Sbig_caller);
      308       308   *S*        fprintf(stderr,"caller dispensable: %d\n",Sdispensable);
      309       309   *S*        fprintf(stderr,"callee is changed: %d\n",Schangedcallee);
      310       310   *S*        fprintf(stderr,"callee too big: %d\n",Sbigcallee);
      311       311   *S*        fprintf(stderr,"no space available: %d\n",Sspace);
      312       312   *S*        fprintf(stderr,"zero ratio: %d\n",Szeroratio);
      313       313   *S*       }
      314       314   *S*       #endif
      315       315
      316       316             il_flags(p)
      317       317              char *p;
      318       318             {
      319       319    1         if (*p++ == 's') {
      320       320    2            while (*p != '\0') {
      321       321    3               space = 10*space +*p++ -'0';
      322       322    3            }
      323       323    2         }
      324       324    1        }
      325       325
      326       326             ilmain(argc,argv)
      327       327              int argc;
      328       328              char *argv[];
      329       329             {
      330       330    1
      331       331    1         fproc = NULL ;
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=10 
      332       332    1         cchead = NULL ;
      333       333    1         lmap = NULL ;
      334       334    1         lbmap = NULL ;
      335       335    1         bmap = NULL ;
      336       336    1         lpmap = NULL ;
      337       337    1
      338       338    1         go(argc,argv,no_action,no_action,no_action,il_flags);
      339       339    1         il_extptab(fproc); /* add extended data structures */
      340       340    1         tmpnam(cname);
      341       341    1         tmpnam(ccname);
      342       342    1         tmpnam(sname);
      343       343    1         tmpnam(cname2);
      344       344    1         pass1(cname); /* grep calls, analyse procedures */
      345       345    1         pass2(cname,space);  /* select calls to be expanded */
      346       346    1         pass3(); /* do substitutions */
      347       347    1         il_cleanptab(fproc); /* remove extended data structures */
      348       348    1         report("inline substitutions",Ssubst);
      349       349    1        #ifdef VERBOSE
      350       350   *S*        if (verbose_flag) {
      351       351   *S*           Sdiagnostics();
      352       352   *S*        }
      353       353   *S*       #endif
      354       354    1        #ifdef DEBUG
      355       355    1         core_usage();
      356       356    1        #endif
      357       357    1           return ;
      358       358    1        }
      359       359
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$il:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$il:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=11 
   zbe$files:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   zbe$il_aux:h.:ZBC3TOU. is referenced
   zbe$il1_anal:h.:ZBC3TOU. is referenced
   zbe$il2_aux:h.:ZBC3TOU. is referenced
   zbe$il3_subst:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
   zbe$put:h.:ZBC3TOU. is referenced
   zbe$go:h.:ZBC3TOU. is referenced

1 warning was detected in the file zbe$il:c.:ZBC3TSI
