

CC.C03    File=zbe$sr_iv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=1  
        1         1             /* $Header: sr_iv.c,v 1.4 87/03/10 11:43:19 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* S T R E N G T H   R E D U C T I O N
        7         7              *
        8         8              * S R _ I V . C
        9         9              *
       10        10              */
       11        11
       12        12
       13        13             #include "types:h"
       14        14             #include "sr:h"
       15        15             #include "em_mnem:h"
       16        16             #include "em_pseu:h"
       17        17             #include "lset:h"
       18        18             #include "cset:h"
       19        19             #include "debug:h"
       20        20             #include "global:h"
       21        21             #include "alloc:h"
       22        22             #include "aux:h"
       23        23             #include "sr_aux:h"
       24        24             #include "sr_cand:h"
       25        25             #include "sr_iv:h"
       26        26
       27        27
       28        28
       29        29             STATIC lset ivvars;   /* set of induction variables */
       30        30
       31        31             STATIC short nature(lnp)
       32        32              line_p lnp;
       33        33             {
       34        34    1         /* Auxiliary routine used by inc_or_dec, is_add and plus_or_min.
       35        35    1          * Determine if lnp had INCREMENT/DECREMENT-nature (1),
       36        36    1          * ADD-nature (2), SUBTRACT-nature (3)
CC.C03    File=zbe$sr_iv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=2  
       37        37    1          * or Buddha-nature (0).
       38        38    1          */
       39        39    1
       40        40    1         bool size_ok;
       41        41    1
       42        42    1         assert(lnp != (line_p) 0);
       43        43    1         size_ok = (TYPE(lnp) == OPSHORT && SHORT(lnp) == ws);
       44        44    1         switch(INSTR(lnp)) {
       45        45    2            case op_inc:
       46        46    2            case op_dec:
       47        47    2               return 1;
       48        48    2            case op_adi:
       49        49    2            case op_adu:
       50        50    2               return (size_ok? 2:0);
       51        51    2            case op_sbi:
       52        52    2            case op_sbu:
       53        53    2               return (size_ok? 3:0);
       54        54    2         }
       55        55    1         return 0;
       56        56    1        }
       57        57
       58        58
       59        59
       60        60             #define is_add(l)  (nature(l) == 2)
       61        61             #define plus_or_min(l)   (nature(l) > 1)
       62        62             #define inc_or_dec(l) (nature(l) == 1)
       63        63
       64        64
       65        65             STATIC bool is_same(l,lnp)
       66        66              line_p l, lnp;
       67        67             {
       68        68    1         /* lnp is a STL x , where x is a candidate
       69        69    1          * induction variable. See if l is a LOL x
       70        70    1          * (with the same x as the store-instruction)
       71        71    1          */
       72        72    1
       73        73    1         assert(INSTR(lnp) == op_stl);
CC.C03    File=zbe$sr_iv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=3  
       74        74    1         return l != (line_p) 0 && INSTR(l) == op_lol &&
       75        75    1            off_set(l) == off_set(lnp);
       76        76    1        }
       77        77
       78        78
       79        79             STATIC ivar(lnp,step)
       80        80              line_p   lnp;
       81        81              int   step;
       82        82             {
       83        83    1         /* Record the fact that we've found a new induction variable.
       84        84    1          * lnp points to the last instruction of the code that
       85        85    1          * increments the induction variable, i.e. a STL, DEL or INL.
       86        86    1          */
       87        87    1
       88        88    1         iv_p i;
       89        89    1
       90        90    1         i = newiv();
       91        91    1         i->iv_off = (TYPE(lnp) == OPSHORT ? (offset) SHORT(lnp) : OFFSET(lnp));
       92        92    1         i->iv_incr = lnp; /* last instruction of increment code */
       93        93    1         i->iv_step = step;   /* step value */
       94        94    1         Ladd(i,&ivvars);
       95        95    1        }
       96        96
       97        97
       98        98             STATIC int sign(lnp)
       99        99              line_p lnp;
      100       100             {
      101       101    1         switch(INSTR(lnp)) {
      102       102    2            case op_inc:
      103       103    2            case op_inl:
      104       104    2            case op_adi:
      105       105    2            case op_adu:
      106       106    2               return 1;
      107       107    2            case op_dec:
      108       108    2            case op_del:
      109       109    2            case op_sbi:
      110       110    2            case op_sbu:
CC.C03    File=zbe$sr_iv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=4  
      111       111    2               return (-1);
      112       112    2            default:
      113       113    2               assert(FALSE);
      114       114    2         }
      115       115    1         /* NOTREACHED */
      116       116    1        }
      117       117
      118       118
      119       119             STATIC try_patterns(lnp)
      120       120              line_p lnp;
      121       121             {
      122       122    1         /* lnp is a STL x; try to recognize
      123       123    1          * one of the patterns:
      124       124    1          *  'LOAD const; LOAD x; ADD; STORE x'
      125       125    1          * or 'LOAD x; LOAD const; ADD or SUBTRACT;
      126       126    1          *     STORE x'
      127       127    1          * or 'LOAD x; INCREMENT/DECREMENT; STORE x'
      128       128    1          */
      129       129    1
      130       130    1         line_p l, l2;
      131       131    1
      132       132    1         l = PREV(lnp); /* instruction before lnp*/
      133       133    1         if (l == (line_p) 0) return;  /* no match possible */
      134       134    1         l2 = PREV(l);
      135       135    1         if (inc_or_dec(l)) {
      136       136    2            if (is_same(l2,lnp)) {
      137       137    3               /* e.g. LOL iv ; INC ; STL iv */
      138       138    3               ivar(lnp,sign(l));
      139       139    3            }
      140       140    2            return;
      141       141    2         }
      142       142    1         if (is_add(lnp)) {
      143       143    2            if(is_same(l2,lnp) && is_const(PREV(l2))) {
      144       144    3               ivar(lnp,SHORT(PREV(l2)));
      145       145    3               return;
      146       146    3            }
      147       147    2         }
CC.C03    File=zbe$sr_iv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=5  
      148       148    1         if (plus_or_min(l)) {
      149       149    2            if (is_const(l2) && is_same(PREV(l2),lnp)) {
      150       150    3               ivar(lnp,sign(l) * SHORT(l2));
      151       151    3            }
      152       152    2         }
      153       153    1        }
      154       154
      155       155
      156       156             induc_vars(loop,ivar_out, vars_out)
      157       157              loop_p loop;
      158       158              lset   *ivar_out, *vars_out;
      159       159             {
      160       160    1         /* Construct the set of induction variables. We use several
      161       161    1          * global variables computed by 'candidates'.
      162       162    1          */
      163       163    1
      164       164    1         Lindex i;
      165       165    1         line_p lnp;
      166       166    1         lset cand_iv, vars;
      167       167    1
      168       168    1         ivvars = Lempty_set();
      169       169    1         candidates(loop, &cand_iv, &vars);
      170       170    1         /* Find the set of all variables that are assigned precisely
      171       171    1          * once within the loop, within a firm block.
      172       172    1          * Also find all remaining local variables that are changed
      173       173    1          * within the loop.
      174       174    1          */
      175       175    1         if (Lnrelems(cand_iv) > 0) {
      176       176    2            for (i = Lfirst(cand_iv); i != (Lindex) 0; i = Lnext(i,cand_iv)) {
      177       177    3               lnp = (line_p) Lelem(i);
      178       178    3               if (INSTR(lnp) == op_inl || INSTR(lnp) == op_del) {
      179       179    4                  ivar(lnp,sign(lnp));
      180       180    4               } else {
      181       181    4                  try_patterns(lnp);
      182       182    4               }
      183       183    3            }
      184       184    2         }
CC.C03    File=zbe$sr_iv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=6  
      185       185    1         Ljoin(cand_iv, &vars);
      186       186    1         *ivar_out = ivvars;
      187       187    1         *vars_out = vars;
      188       188    1        }
      189       189
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$sr:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$sr_aux:h.:ZBC3TOU. is referenced
   zbe$sr_cand:h.:ZBC3TOU. is referenced
   zbe$sr_iv:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$sr_iv:c.:ZBC3TSI
