

11:35 AUG 20 '97 zbp$macro:h.:ZBC3TSI                                      1    
    1      /* $Header: macro.h,v 1.4 87/03/10 10:37:56 ceriel Exp $ */
    2      /*
    3       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    4       * See the copyright notice in the ACK home directory, in the file "Copyright".
    5       */
    6      /* PREPROCESSOR: DEFINITION OF MACRO DESCRIPTOR */
    7
    8      /*  The flags of the mc_flag field of the macro structure. Note that
    9       these flags can be set simultaneously.
   10      */
   11      #define NOFLAG     0     /* no special flags  */
   12      #define   FUNC     01    /* function attached    */
   13      #define NOREPLACE  02    /* don't replace  */
   14
   15      #define   FORMALP 0200   /* mask for creating macro formal parameter */
   16      #ifdef NPARAMS
   17      #undef NPARAMS
   18      #endif
   19      #define NPARAMS 64 /* also defined in "nparams:h" */
   20
   21      /*  The macro descriptor is very simple, except the fact that the
   22       mc_text, which points to the replacement text, contains the
   23       non-ascii characters \201, \202, etc, indicating the position of a
   24       formal parameter in this text.
   25      */
   26
   27      #define DBL_POUND    0377  /* double pound operator '##' */
   28      #define SGL_POUND    0376  /* single pound operator '#'  */
   29      #define RECURSION    0375  /* mask for recursive macros */
   30      #define EXPAND_PARAM 0374  /* actual macro parameters are macros */
   31      #define FORMAL_OPEN  0373  /* marker between formal param and '(' */
   32      #define EOR          0372  /* End_Of_ReplacementList */
   33      struct macro {
   34       struct macro *next;
   35       char * mc_name;
   36       char * mc_formals[NPARAMS]; /* list of formal parameters */
   37       char *   mc_text; /* the replacement text    */
11:35 AUG 20 '97 zbp$macro:h.:ZBC3TSI                                      2    
   38       int   mc_nps;     /* number of formal parameters   */
   39       int   mc_length;  /* length of replacement text */
   40       int   mc_count;   /* # of "concurrent" invocations*/
   41       char  mc_flag; /* marking this macro      */
   42      };
   43
   44
   45      /* allocation definitions of struct macro */
   46      extern char *st_alloc();
   47      extern struct macro *h_macro;
   48      #ifdef DEBUG
   49      extern int cnt_macro;
   50      extern char *std_alloc();
   51      #define   new_macro() ((struct macro *) std_alloc((char **)&h_macro, sizeof(struct macro), 20, &cnt_macro))
   52      #else
   53      #define   new_macro() ((struct macro *) st_alloc((char **)&h_macro, sizeof(struct macro), 20))
   54      #endif
   55      #define   free_macro(p) st_free(p, &h_macro, sizeof(struct macro))
   56
   57      struct mlist {
   58       struct mlist *next;
   59       struct macro *m_mac;
   60       char *m_repl;
   61      };
   62
   63      /* allocation definitions of struct mlist */
   64      extern char *st_alloc();
   65      extern struct mlist *h_mlist;
   66      #ifdef DEBUG
   67      extern int cnt_mlist;
   68      extern char *std_alloc();
   69      #define   new_mlist() ((struct mlist *) std_alloc((char **)&h_mlist, sizeof(struct mlist), 20, &cnt_mlist))
   70      #else
   71      #define   new_mlist() ((struct mlist *) st_alloc((char **)&h_mlist, sizeof(struct mlist), 20))
   72      #endif
   73      #define   free_mlist(p) st_free(p, &h_mlist, sizeof(struct mlist))
   74
11:35 AUG 20 '97 zbp$macro:h.:ZBC3TSI                                      3    
   75
   76      /* `token' numbers of keywords of command-line processor
   77      */
   78      #define   K_UNKNOWN   0
   79      #define   K_DEFINE 1
   80      #define   K_ELIF      2
   81      #define   K_ELSE      3
   82      #define   K_ENDIF     4
   83      #define   K_IF     5
   84      #define   K_IFDEF     6
   85      #define   K_IFNDEF 7
   86      #define   K_INCLUDE   8
   87      #define   K_LINE      9
   88      #define   K_UNDEF     10
   89      #define K_PRAGMA 11
   90      #define K_ERROR  12
   91

