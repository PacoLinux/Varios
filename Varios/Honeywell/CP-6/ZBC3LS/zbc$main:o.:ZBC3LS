

CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: main.c,v 3.22 87/03/25 23:04:33 ceriel Exp $ */
        6         6             /* MAIN PROGRAM */
        7         7
        8         8             #include "nofloat:h"
        9         9             #include <system:h>
       10        10             #include "nopp:h"
       11        11             #include "target_sizes:h"
       12        12             #include "debug:h"
       13        13             #include "use_tmp:h"
       14        14             #include "maxincl:h"
       15        15             #include "inputtype:h"
       16        16             #include "input:h"
       17        17             #include "level:h"
       18        18             #include "idf:h"
       19        19             #include "arith:h"
       20        20             #include "type:h"
       21        21             #include "declar:h"
       22        22             #include "tokenname:h"
       23        23             #include "Lpars:h"
       24        24             #include "LLlex:h"
       25        25             #include <alloc:h>
       26        26             #include "specials:h"
       27        27             #include "noRoption:h"
       28        28             #include "nocross:h"
       29        29             #include "sizes:h"
       30        30             #include "align:h"
       31        31             #include "zb_target:h"
       32        32             #include <inp_types:h>
       33        33             #include "dataFirst:h"
       34        34             #include <valloc.h>
       35        35             extern char *tmpnam();
       36        36
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37             extern struct tokenname tkidf[], tkother[];
       38        38             extern char *symbol2str();
       39        39             char options[128];       /* one for every char   */
       40        40
       41        41             void zb_listing_start_listing();
       42        42             void zb_listing_output_ls();
       43        43             extern int zb_LS_flag;
       44        44             extern int zb_numerrs;
       45        45             extern int zb_max_severity;
       46        46             extern char *list_rec_source;
       47        47             extern char *current_function_name;
       48        48             int  zb_ls_depth = 0;
       49        49             int zb_skipping = 0;
       50        50
       51        51             extern struct zb_files zb_fileinfo;
       52        52             #define BREAK_FMT   "%s  File=%s  Key=%s  Line=%d\nFunction=%s  Errors=%d  Max
                                Sev=%d\n"
       53        53             char  *CEM_PHASE ="Semantics:";
       54        54
       55        55             #ifndef NOPP
       56        56             int inc_pos = 1;         /* place where next -I goes */
       57        57             char *inctable[MAXINCL] = {    /* list for includes */
       58        58    1         ".",
       59        59    1         ".:LIBRARY",
       60        60    1         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       61        61    1        };
       62        62
       63        63             extern char *getwdir();
       64        64             #endif NOPP
       65        65
       66        66             struct sp_id special_ids[] =   {
       67        67    1         {"setjmp", SP_SETJMP},  /* non-local goto's are registered  */
       68        68    1         {"__builtin_memcpy",     SP_MEMCPY},
       69        69    1         {"__builtin_memchr",     SP_MEMCHR},
       70        70    1         {"__builtin_memcmp",     SP_MEMCMP},
       71        71    1         {"__builtin_memset",     SP_MEMSET},
       72        72    1         {"__builtin_memmove",    SP_MEMMOVE},
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       73        73    1         {"__builtin_memrchr",    SP_MEMRCHR},
       74        74    1         {"__builtin_atan",       SP_ATAN},
       75        75    1         {"__builtin_atan2",      SP_ATAN2},
       76        76    1         {"__builtin_cos",        SP_COS},
       77        77    1         {"__builtin_sin",        SP_SIN},
       78        78    1         {"__builtin_tan",        SP_TAN},
       79        79    1         {"__builtin_cosh",       SP_COSH},
       80        80    1         {"__builtin_sinh",       SP_SINH},
       81        81    1         {"__builtin_tanh",       SP_TANH},
       82        82    1         {"__builtin_exp",        SP_EXP},
       83        83    1         {"__builtin_log",        SP_LOG},
       84        84    1         {"__builtin_log10",      SP_LOG10},
       85        85    1         {"__builtin_pow",        SP_POW},
       86        86    1         {"__builtin_sqrt",       SP_SQRT},
       87        87    1         {"__builtin_fabs",       SP_FABS},
       88        88    1         {"__builtin_abs",        SP_ABS},
       89        89    1         {"__builtin_strlen",     SP_STRLEN},
       90        90    1         {"__builtin_strcpy",     SP_STRCPY},
       91        91    1         {"__builtin_strcat",     SP_STRCAT},
       92        92    1         {"__builtin_strcmp",     SP_STRCMP},
       93        93    1         {"__builtin_strchr",     SP_STRCHR},
       94        94    1         {"__builtin_strrchr",    SP_STRRCHR},
       95        95    1         {0, 0}
       96        96    1        };
       97        97
       98        98             #ifndef NOCROSS
       99        99             arith
      100       100              short_size = SZ_SHORT,
      101       101              word_size = SZ_WORD,
      102       102              dword_size = (2 * SZ_WORD),
      103       103              int_size = SZ_INT,
      104       104              long_size = SZ_LONG,
      105       105             #ifndef NOFLOAT
      106       106              float_size = SZ_FLOAT,
      107       107              double_size = SZ_DOUBLE,
      108       108             #endif NOFLOAT
      109       109              pointer_size = SZ_POINTER;
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      110       110
      111       111             int
      112       112              short_align = AL_SHORT,
      113       113              word_align = AL_WORD,
      114       114              int_align = AL_INT,
      115       115              long_align = AL_LONG,
      116       116             #ifndef NOFLOAT
      117       117              float_align = AL_FLOAT,
      118       118              double_align = AL_DOUBLE,
      119       119             #endif NOFLOAT
      120       120              pointer_align = AL_POINTER,
      121       121              struct_align = AL_STRUCT,
      122       122              union_align = AL_UNION;
      123       123             #endif NOCROSS
      124       124
      125       125             #ifndef NOPP
      126       126             arith ifval; /* ifval will contain the result of the #if expression */
      127       127             #endif NOPP
      128       128
      129       129             char *prog_name;
      130       130
      131       131             main(argc, argv)
      132       132              char *argv[];
      133       133             {
      134       134    1         /* parse and interpret the command line options */
      135       135    1         vmeminit(1024, 3, 70);
      136       136    1         options['l'] = zb_LS_flag = 1;
      137       137    1         prog_name = argv[0];
      138       138    1         zb_listing_start_listing(CP6_VERSION,&zb_ls_depth,&zb_skipping);
      139       139    1
      140       140    1         init_hmask();
      141       141    1
      142       142    1        #ifndef NOPP
      143       143    1         init_pp();  /* initialise the preprocessor macros  */
      144       144    1        #endif NOPP
      145       145    1
      146       146    1         /* Note: source file "-" indicates that the source is supplied
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      147       147    1            as standard input.  This is only allowed if INP_READ_IN_ONE is
      148       148    1            not defined!
      149       149    1         */
      150       150    1        #ifdef INP_READ_IN_ONE
      151       151   *S*        while (argc > 1 && *argv[1] == '-')
      152       152   *S*       #else INP_READ_IN_ONE
      153       153    1         while (argc > 1 && *argv[1] == '-' && argv[1][1] != '\0')
      154       154    1        #endif INP_READ_IN_ONE
      155       155    1         {
      156       156    2            char *par = &argv[1][1];
      157       157    2
      158       158    2            do_option(par);
      159       159    2            argc--, argv++;
      160       160    2         }
      161       161    1         compile(argc - 1, &argv[1]);
      162       162    1
      163       163    1        #ifdef DEBUG
      164       164    1         hash_stat();
      165       165    1        #endif DEBUG
      166       166    1
      167       167    1         exit(err_occurred);
      168       168    1        }
      169       169
      170       170             char *source = 0, *updates = 0;
      171       171
      172       172             char *nmlist = 0;
      173       173
      174       174             #ifdef USE_TMP
      175       175             extern char *strcpy(), *strcat();
      176       176             #ifdef TS_CP6
      177       177             char *tmpfdir = "";      /* where to keep the temporary file */
      178       178             static char *tmpfname = "*Cem:XXXXXX";
      179       179             #else
      180       180   *S*       char *tmpfdir = "/tmp";     /* where to keep the temporary file */
      181       181   *S*       static char *tmpfname = "/Cem.XXXXXX";
      182       182   *S*       #endif
      183       183             char *tempfile = 0;
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      184       184             #if DATAFIRST
      185       185             char *tmpfile2 = 0;
      186       186             #endif
      187       187             #endif USE_TMP
      188       188
      189       189             compile(argc, argv)
      190       190              char *argv[];
      191       191             {
      192       192    1        #ifdef USE_TMP
      193       193    1        #ifdef TS_CP6
      194       194    1         char tmpf[60];
      195       195    1        #if DATAFIRST
      196       196    1         char tmpf2[60];
      197       197    1        #endif
      198       198    1        #else
      199       199   *S*        char tmpf[256];
      200       200   *S*       #if DATAFIRST
      201       201   *S*        char tmpf2[256];
      202       202   *S*       #endif DATAFIRST
      203       203   *S*       #endif
      204       204    1        #endif
      205       205    1         char *result;
"zbc$main:c.:ZBC3TSI", line 205: (warning) identifier "result" is not used
      206       206    1         register char *destination = 0;
      207       207    1
      208       208    1        #ifdef DEBUG
      209       209    1        #ifndef NOPP
      210       210    1         int pp_only = options['E'] || options['P'] || options['C'];
      211       211    1        #endif NOPP
      212       212    1        #endif
      213       213    1
      214       214    1         switch (argc) {
      215       215    2         case 1:
      216       216    2        #ifdef DEBUG
      217       217    2        #ifndef NOPP
      218       218    2            if (!pp_only)
      219       219    2        #endif NOPP
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      220       220    2        #endif
      221       221    2               fatal("%s: destination file not specified", prog_name);
      222       222    2            break;
      223       223    2         case 2:
      224       224    2            destination = argv[1];
      225       225    2            break;
      226       226    2         case 3:
      227       227    2            nmlist = argv[2];
      228       228    2            destination = argv[1];
      229       229    2            break;
      230       230    2         default:
      231       231    2            fatal("use: %s source destination [namelist]", prog_name);
      232       232    2            break;
      233       233    2         }
      234       234    1         if (strcmp(argv[0], "-"))
      235       235    1            FileName = source = argv[0];
      236       236    1         else {
      237       237    2            source = 0;
      238       238    2            FileName = "standard input";
      239       239    2         }
      240       240    1
      241       241    1        #ifdef USE_TMP
      242       242    1         if (! options['N']) {
      243       243    2            strcpy(tmpf, tmpfdir);
      244       244    2            strcat(tmpf, tmpfname);
      245       245    2             tempfile = tmpnam (tmpf);
      246       246    2        #if DATAFIRST
      247       247    2            strcpy(tmpf2, tmpfdir);
      248       248    2            strcat(tmpf2, tmpfname);
      249       249    2             tmpfile2 = tmpnam (tmpf2);
      250       250    2        #endif
      251       251    2         }
      252       252    1        #endif USE_TMP
      253       253    1
      254       254    1         { char *cp, *strindex();
      255       255    2           if (cp = strindex(source,','))  {
      256       256    3             updates = cp+1;
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      257       257    3             *cp = 0;
      258       258    3           }
      259       259    2         }
      260       260    1         {
      261       261    2            char cbuf[256];
      262       262    2            strcpy(cbuf,"Adjust M$SI ");
      263       263    2            strcat (cbuf,source);
      264       264    2            strcat (cbuf,",fun=in");
      265       265    2            system(cbuf);
      266       266    2            if (updates) {
      267       267    3               strcpy(cbuf,"Adjust M$UI ");
      268       268    3               strcat (cbuf,updates);
      269       269    3               strcat (cbuf,",fun=in");
      270       270    3               system(cbuf);
      271       271    3            }
      272       272    2         }
      273       273    1
      274       274    1          if (!OpenSource( 1 + (updates != 0), 0, 0)) {
      275       275    2             options['l'] = 0;    /***  Listing generator not initialized! **/
      276       276    2            fatal("%s: no source file %s\n", prog_name, FileName);
      277       277    2            }
      278       278    1          set_break_vars (BREAK_FMT, &CEM_PHASE, &FileName, &list_rec_source,
      279       279    1                          &LineNumber, &current_function_name, &zb_numerrs,
      280       280    1                          &zb_max_severity);
      281       281    1         if (destination && strcmp(destination, "-") == 0)
      282       282    1            destination = 0;
      283       283    1         File_Inserted = 1;
      284       284    1         init();
      285       285    1         LineNumber = 0;
      286       286    1        #ifndef NOPP
      287       287    1         WorkingDir = getwdir(source);
      288       288    1        #endif NOPP
      289       289    1         PushLex();
      290       290    1
      291       291    1        #ifdef DEBUG
      292       292    1        #ifndef NOPP
      293       293    1         if (pp_only) /* run the preprocessor as if it is stand-alone */
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      294       294    1            preprocess();
      295       295    1         else
      296       296    1        #endif NOPP
      297       297    1        #endif DEBUG
      298       298    1         {
      299       299    2
      300       300    2        #ifdef USE_TMP
      301       301    2            if (!options['N']) {
      302       302    3           init_code(tempfile);
      303       303    3        #if DATAFIRST
      304       304    3               EM_File_No++, init_code(tmpfile2), EM_File_No = 0;
      305       305    3        #endif
      306       306    3            }
      307       307    2            else
      308       308    2        #endif USE_TMP
      309       309    2            init_code(destination);
      310       310    2
      311       311    2            /* compile the source text       */
      312       312    2            C_program();
      313       313    2            end_code();
      314       314    2        #if DATAFIRST && defined(USE_TMP)
      315       315    2            if (!options['N'])
      316       316    2               EM_File_No = 1, C_close(), EM_File_No = 0;
      317       317    2        #endif
      318       318    2
      319       319    2        #ifdef USE_TMP
      320       320    2            if (! options['N']) {
      321       321    3               prepend_scopes(destination);
      322       322    3        #if DATAFIRST
      323       323    3               AppendFile(tmpfile2, destination);
      324       324    3               sys_remove(tmpfile2);
      325       325    3        #endif
      326       326    3               AppendFile(tempfile, destination);
      327       327    3               sys_remove(tempfile);
      328       328    3            }
      329       329    2        #endif USE_TMP
      330       330    2
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      331       331    2        #ifdef DEBUG
      332       332    2            if (options['u']) {
      333       333    3               unstack_level();  /* unstack L_GLOBAL */
      334       334    3            }
      335       335    2            if (options['f'] || options['t'])
      336       336    2               dumpidftab("end of main", options['f'] ? 0 : 0);
      337       337    2        #endif DEBUG
      338       338    2         }
      339       339    1         PopLex();
      340       340    1         if (zb_LS_flag)
      341       341    1            zb_listing_output_ls();
      342       342    1        }
      343       343
      344       344             init()
      345       345             {
      346       346    1         init_cst(); /* initialize variables of "cstoper.c"    */
      347       347    1         reserve(tkidf);      /* mark the C reserved words as such   */
      348       348    1         init_specials(special_ids);   /* mark special ids as such   */
      349       349    1
      350       350    1        #ifndef NOROPTION
      351       351    1         if (options['R'])
      352       352    1            reserve(tkother);
      353       353    1        #endif
      354       354    1
      355       355    1         char_type  = standard_type(CHAR, UNSIGNED, 1, (arith)1);
      356       356    1         uchar_type = standard_type(CHAR, UNSIGNED, 1, (arith)1);
      357       357    1         schar_type = standard_type(CHAR,   SIGNED, 1, (arith)1);
      358       358    1
      359       359    1         short_type = standard_type(SHORT, 0, short_align, short_size);
      360       360    1         ushort_type = standard_type(SHORT, UNSIGNED, short_align, short_size);
      361       361    1
      362       362    1         /* Treat type `word' as `int', having its own size and
      363       363    1            alignment requirements.
      364       364    1            This type is transparent to the user.
      365       365    1         */
      366       366    1         word_type = standard_type(INT, 0, word_align, word_size);
      367       367    1         uword_type = standard_type(INT, UNSIGNED, word_align, word_size);
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=11 
      368       368    1
      369       369    1         int_type  = standard_type(INT,        0, int_align, int_size);
      370       370    1         uint_type = standard_type(INT, UNSIGNED, int_align, int_size);
      371       371    1         sint_type = standard_type(INT,   SIGNED, int_align, int_size);
      372       372    1
      373       373    1         long_type = standard_type(LONG, 0, long_align, long_size);
      374       374    1         ulong_type = standard_type(LONG, UNSIGNED, long_align, long_size);
      375       375    1
      376       376    1        #ifndef NOFLOAT
      377       377    1         float_type = standard_type(FLOAT, 0, float_align, float_size);
      378       378    1         double_type = standard_type(DOUBLE, 0, double_align, double_size);
      379       379    1         ldouble_type = standard_type(DOUBLE, 0, double_align, double_size);
      380       380    1        #endif NOFLOAT
      381       381    1         void_type = standard_type(VOID, 0, 1, (arith)0);
      382       382    1         label_type = standard_type(LABEL, 0, 0, (arith)0);
      383       383    1         error_type = standard_type(ERRONEOUS, 0, 1, (arith)1);
      384       384    1
      385       385    1         /* Pointer Arithmetic type: all arithmetics concerning
      386       386    1            pointers is supposed to be performed in the
      387       387    1            pointer arithmetic type which is equal to either
      388       388    1            int_type or long_type, depending on the pointer_size
      389       389    1         */
      390       390    1         if (pointer_size == word_size)
      391       391    1            pa_type = word_type;
      392       392    1         else
      393       393    1         if (pointer_size == short_size)
      394       394    1            pa_type = short_type;
      395       395    1         else
      396       396    1         if (pointer_size == int_size)
      397       397    1            pa_type = int_type;
      398       398    1         else
      399       399    1         if (pointer_size == long_size)
      400       400    1            pa_type = long_type;
      401       401    1         else
      402       402    1            fatal("pointer size incompatible with any integral size");
      403       403    1
      404       404    1         if (int_size != word_size)
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=12 
      405       405    1            fatal("int_size and word_size are not equal");
      406       406    1         if (short_size > int_size || int_size > long_size)
      407       407    1            fatal("sizes of short/int/long decreasing");
      408       408    1
      409       409    1         /* Build a type for function returning int, RM 13 */
      410       410    1         funint_type = construct_type(FUNCTION, int_type, (arith)0, (struct formal*)0)
                               ;
      411       411    1         string_type = construct_type(POINTER, char_type, (arith)0, (struct formal*)0)
                               ;
      412       412    1         voidptr_type = construct_type(POINTER, void_type, (arith)0, (struct formal*)0
                               );
      413       413    1
      414       414    1         /* Define the standard type identifiers. */
      415       415    1         add_def(str2idf("char"), TYPEDEF, char_type, L_UNIVERSAL);
      416       416    1         add_def(str2idf("int"), TYPEDEF, int_type, L_UNIVERSAL);
      417       417    1        #ifndef NOFLOAT
      418       418    1         add_def(str2idf("float"), TYPEDEF, float_type, L_UNIVERSAL);
      419       419    1         add_def(str2idf("double"), TYPEDEF, double_type, L_UNIVERSAL);
      420       420    1        #endif NOFLOAT
      421       421    1         add_def(str2idf("void"), TYPEDEF, void_type, L_UNIVERSAL);
      422       422    1         stack_level();
      423       423    1        }
      424       424
      425       425             init_specials(si)
      426       426              register struct sp_id *si;
      427       427             {
      428       428    1         while (si->si_identifier)  {
      429       429    2            struct idf *idf = str2idf(si->si_identifier);
      430       430    2
      431       431    2            if (idf->id_special)
      432       432    2               fatal("maximum identifier length insufficient");
      433       433    2            idf->id_special = si->si_flag;
      434       434    2            si++;
      435       435    2         }
      436       436    1        }
      437       437
      438       438             #ifdef DEBUG
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=13 
      439       439             #ifndef NOPP
      440       440             preprocess()
      441       441             {
      442       442    1         /* preprocess() is the "stand-alone" preprocessor which
      443       443    1            consecutively calls the lexical analyzer LLlex() to get
      444       444    1            the tokens and prints them in a suitable way.
      445       445    1         */
      446       446    1         static unsigned int lastlineno = 0;
      447       447    1         static char *lastfilenm = "";
      448       448    1
      449       449    1         while (LLlex() !=  EOI) {
      450       450    2            if (lastlineno != dot.tk_line)   {
      451       451    3               if (strcmp(lastfilenm, dot.tk_file) == 0) {
      452       452    4                  if (dot.tk_line - lastlineno <= 1)  {
      453       453    5                     lastlineno++;
      454       454    5                     print("\n");
      455       455    5                  }
      456       456    4                  else  {
      457       457    5                     lastlineno = dot.tk_line;
      458       458    5                     if (!options['P'])
      459       459    5                        print("\n#line %ld \"%s\"\n",
      460       460    5                           lastlineno,
      461       461    5                           lastfilenm
      462       462    5                        );
      463       463    5                  }
      464       464    4               }
      465       465    3               else  {
      466       466    4                  lastfilenm = dot.tk_file;
      467       467    4                  lastlineno = dot.tk_line;
      468       468    4                  if (!options['P'])
      469       469    4                     print("\n#line %ld \"%s\"\n",
      470       470    4                        lastlineno, lastfilenm);
      471       471    4               }
      472       472    3            }
      473       473    2            else
      474       474    2            if (strcmp(lastfilenm, dot.tk_file) != 0) {
      475       475    3               lastfilenm = dot.tk_file;
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=14 
      476       476    3               if (!options['P'])
      477       477    3                  print("\n#line %ld \"%s\"\n",
      478       478    3                     lastlineno, lastfilenm);
      479       479    3            }
      480       480    2            switch (DOT)   {
      481       481    3            case IDENTIFIER:
      482       482    3            case TYPE_IDENTIFIER:
      483       483    3               print("%s ", dot.tk_idf->id_text);
      484       484    3               break;
      485       485    3            case STRING:
      486       486    3            {
      487       487    4               char sbuf[1024];  /* a transient buffer */
      488       488    4               char *bts2str();
      489       489    4
      490       490    4               print("\"%s\" ", bts2str(dot.tk_bts, dot.tk_len, sbuf));
      491       491    4               break;
      492       492    4            }
      493       493    3            case INTEGER:
      494       494    3               print("%ld ", dot.tk_ival);
      495       495    3               break;
      496       496    3        #ifndef NOFLOAT
      497       497    3            case FLOATING:
      498       498    3               print("%s ", dot.tk_fval);
      499       499    3               break;
      500       500    3        #endif NOFLOAT
      501       501    3            case EOI:
      502       502    3            case EOF:
      503       503    3               return;
      504       504    3            default: /* very expensive... */
      505       505    3               print("%s ", symbol2str(DOT));
      506       506    3            }
      507       507    2         }
      508       508    1        }
      509       509             #endif NOPP
      510       510             #endif DEBUG
      511       511
      512       512             #ifdef USE_TMP
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=15 
      513       513             AppendFile(src, dst)
      514       514              char *src, *dst;
      515       515             { extern int em_binary_option;
      516       516    1
      517       517    1         File *fp_src, *fp_dst;
      518       518    1         char buf[BUFSIZ];
      519       519    1         int n;
      520       520    1
      521       521    1         if (sys_open(src, OP_READ+em_binary_option, &fp_src) == 0)
      522       522    1            fatal("cannot read %s", src);
      523       523    1         if (dst) {
      524       524    2            if (sys_open(dst, OP_APPEND+em_binary_option, &fp_dst) == 0)
      525       525    2               fatal("cannot write to %s", src);
      526       526    2         }
      527       527    1         else
      528       528    1            fp_dst = STDOUT;
      529       529    1         while (sys_read(fp_src, buf, BUFSIZ, &n) != 0 && n > 0)
      530       530    1            if (sys_write(fp_dst, buf, n) == 0)
      531       531    1               fatal("(AppendFile) write error");
      532       532    1         if (n != 0)
      533       533    1            fatal("(AppendFile) read error");
      534       534    1         sys_close(fp_src);
      535       535    1         if (fp_dst != STDOUT)
      536       536    1            sys_close(fp_dst);
      537       537    1        }
      538       538             #endif USE_TMP
      539       539
      540       540             No_Mem()
      541       541             {
      542       542    1         fatal("out of memory");
      543       543    1        }
      544       544
      545       545             C_failed()
      546       546             {
      547       547    1         fatal("write failed");
      548       548    1        }
      549       549
CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=16 
---  Include file information  ---

   zbc$nofloat:h.:ZBC3TOU. is referenced
   system:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$use_tmp:h.:ZBC3TOU. is referenced
   zbc$maxincl:h.:ZBC3TOU. is referenced
   zbc$inputtype:h.:ZBC3TOU. is referenced
   zbc$input:h.:ZBC3TOU. is referenced
   inp_pkg:spec.:ZBC3TOU. is referenced
   zbc$level:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$declar:h.:ZBC3TOU. is referenced
   zbc$tokenname:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$LLlex:h.:ZBC3TOU. is referenced
   zbc$file_info:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$specials:h.:ZBC3TOU. is referenced
   zbc$noRoption:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$align:h.:ZBC3TOU. is referenced
   zbc$zb_target:h.:ZBC3TOU. is referenced
   inp_types:h.:ZBC3TOU. is referenced
   zbc$dataFirst:h.:ZBC3TOU. is referenced
   valloc:h.:LIB_E05. is referenced

CC.C03    File=zbc$main:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=17 
1 warning was detected in the file zbc$main:c.:ZBC3TSI
