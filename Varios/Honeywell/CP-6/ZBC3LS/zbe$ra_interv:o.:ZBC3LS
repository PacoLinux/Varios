

CC.C03    File=zbe$ra_interv:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ra_interv.c,v 1.3 87/03/10 11:23:13 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  R E G I S T E R   A L L O C A T I O N
        7         7              *
        8         8              *  R A _ I N T E R V A L . C
        9         9              */
       10        10
       11        11
       12        12             #include "types:h"
       13        13             #include "debug:h"
       14        14             #include "global:h"
       15        15             #include "alloc:h"
       16        16             #include "lset:h"
       17        17             #include "em_reg:h"
       18        18             #include "ra:h"
       19        19             #include "ra_interv:h"
       20        20
       21        21             interv_p cons_interval(t_start,t_stop)
       22        22              short t_start,t_stop;
       23        23             {
       24        24    1         interv_p x;
       25        25    1
       26        26    1         x = newinterval();
       27        27    1         x->i_start = t_start;
       28        28    1         x->i_stop = t_stop;
       29        29    1         return x;
       30        30    1        }
       31        31
       32        32
       33        33
       34        34             add_interval(t1,t2,list)
       35        35              short t1,t2;
       36        36              interv_p *list;
CC.C03    File=zbe$ra_interv:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=2  
       37        37             {
       38        38    1         /* Add interval (t1,t2) to the list of intervals (which is
       39        39    1          * an in-out parameter!). The list is sorted in 'chronological'
       40        40    1          * order. We attempt to keep the list as small as possible, by
       41        41    1          * putting adjacent intervals in one interval.
       42        42    1          */
       43        43    1
       44        44    1         register interv_p x1, x2, *q;
       45        45    1         int adjacent = 0;
       46        46    1         interv_p x;
       47        47    1
       48        48    1         q = list;
       49        49    1         x1 = (interv_p) 0;
       50        50    1         for (x2 = *list; x2 != (interv_p) 0; x2 = x2->i_next) {
       51        51    2            if (t2 < x2->i_start) break;
       52        52    2            x1 = x2;
       53        53    2            q = &x2->i_next;
       54        54    2         }
       55        55    1         /* Now interval (t1,t2) should be inserted somewhere in between
       56        56    1          * x1 and x2.
       57        57    1          */
       58        58    1         if (x1 != (interv_p) 0 && t1 == x1->i_stop + 1) {
       59        59    2            /* join x1 and (t1,t2) */
       60        60    2            x1->i_stop = t2;
       61        61    2            adjacent++;
       62        62    2         }
       63        63    1         if (x2 != (interv_p) 0 && t2 + 1 == x2->i_start) {
       64        64    2            /* join (t1,t2) and x2 */
       65        65    2            x2->i_start = t1;
       66        66    2            adjacent++;
       67        67    2         }
       68        68    1         if (adjacent == 0) {
       69        69    2            /* no adjacents, allocate a new intervalfor (t1,t2) */
       70        70    2            x = cons_interval(t1,t2);
       71        71    2            x->i_next = x2;
       72        72    2            *q = x;
       73        73    2         } else {
CC.C03    File=zbe$ra_interv:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=3  
       74        74    2            if (adjacent == 2) {
       75        75    3               /* x1, (t1,t2) and x2 can be put in one interval */
       76        76    3               x1->i_stop = x2->i_stop;
       77        77    3               x1->i_next = x2->i_next;
       78        78    3               oldinterval(x2);
       79        79    3            }
       80        80    2         }
       81        81    1        }
       82        82
       83        83
       84        84
       85        85             interv_p loop_lifetime(lp)
       86        86              loop_p lp;
       87        87             {
       88        88    1         /* Determine the timespan of the loop, expressed as a list
       89        89    1          * of intervals.
       90        90    1          */
       91        91    1
       92        92    1         interv_p lt = 0;
       93        93    1         register bblock_p b;
       94        94    1         register Lindex bi;
       95        95    1
       96        96    1         for (bi = Lfirst(lp->LP_BLOCKS); bi != (Lindex) 0;
       97        97    1                      bi = Lnext(bi,lp->LP_BLOCKS)) {
       98        98    2            b = (bblock_p) Lelem(bi);
       99        99    2            add_interval(b->B_BEGIN,b->B_END,&lt);
      100       100    2         }
      101       101    1         return lt;
      102       102    1        }
      103       103
      104       104
      105       105             interv_p proc_lifetime(p)
      106       106              proc_p p;
      107       107             {
      108       108    1         /* Determine the lifetime of an entire procedure */
      109       109    1
      110       110    1         register bblock_p b;
CC.C03    File=zbe$ra_interv:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=4  
      111       111    1
      112       112    1         for (b = p->p_start; b->b_next != (bblock_p) 0; b = b->b_next) ;
      113       113    1         return cons_interval(0,b->B_END);
      114       114    1        }
      115       115
      116       116
      117       117
      118       118             STATIC set_min_max(iv1,iv2)
      119       119              interv_p *iv1,*iv2;
      120       120             {
      121       121    1         /* Auxiliary routine of intersect */
      122       122    1
      123       123    1         interv_p i1 = *iv1, i2 = *iv2;
      124       124    1
      125       125    1         if (i1->i_start < i2->i_start) {
      126       126    2            *iv1 = i1;
      127       127    2            *iv2 = i2;
      128       128    2         } else {
      129       129    2            *iv1 = i2;
      130       130    2            *iv2 = i1;
      131       131    2         }
      132       132    1        }
      133       133
      134       134
      135       135
      136       136             interv_p intersect(list1,list2)
      137       137              interv_p list1,list2;
      138       138             {
      139       139    1         /* Intersect two lifetimes, each denoted by a list of intervals.
      140       140    1          * We maintain two pointers, pmin and pmax, pointing to the
      141       141    1          * next interval of each list. At any time, pmin points to the
      142       142    1          * interval of which i_start is lowest; pmax points to the
      143       143    1          * other interval (i.e. the next interval of the other list).
      144       144    1          */
      145       145    1
      146       146    1         interv_p lt = 0;
      147       147    1         interv_p pmin,pmax;
CC.C03    File=zbe$ra_interv:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=5  
      148       148    1
      149       149    1        #define BUMP(p) p = p->i_next
      150       150    1        #define EMIT(t1,t2)   add_interval(t1,t2,&lt)
      151       151    1
      152       152    1         pmin = list1;
      153       153    1         pmax = list2;
      154       154    1         while (pmin != (interv_p) 0 && pmax != (interv_p) 0) {
      155       155    2            set_min_max(&pmin,&pmax);
      156       156    2            if (pmax->i_start > pmin->i_stop) {
      157       157    3               /* e.g. (5,7) and (9,13) */
      158       158    3               BUMP(pmin);
      159       159    3            } else {
      160       160    3               if (pmax->i_stop < pmin->i_stop) {
      161       161    4                  /* e.g. (5,12) and (7,10) */
      162       162    4                  EMIT(pmax->i_start,pmax->i_stop);
      163       163    4                  BUMP(pmax);
      164       164    4               } else {
      165       165    4                  /* e.g. (5,8) and (7,12) */
      166       166    4                  EMIT(pmax->i_start,pmin->i_stop);
      167       167    4                  if (pmax->i_stop == pmin->i_stop) {
      168       168    5                     /* e.g. (5,12) and (7,12) */
      169       169    5                     BUMP(pmax);
      170       170    5                  }
      171       171    4                  BUMP(pmin);
      172       172    4               }
      173       173    3            }
      174       174    2         }
      175       175    1         return lt;
      176       176    1        }
      177       177
      178       178
      179       179
      180       180             bool not_disjoint(list1,list2)
      181       181              interv_p list1,list2;
      182       182             {
      183       183    1         /* See if list1 and list2 do overlap somewhere */
      184       184    1
CC.C03    File=zbe$ra_interv:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=6  
      185       185    1         interv_p pmin,pmax;
      186       186    1
      187       187    1         pmin = list1;
      188       188    1         pmax = list2;
      189       189    1         while (pmin != (interv_p) 0 && pmax != (interv_p) 0) {
      190       190    2            set_min_max(&pmin,&pmax);
      191       191    2            if (pmax->i_start > pmin->i_stop) {
      192       192    3               /* e.g. (5,7) and (9,13) */
      193       193    3               BUMP(pmin);
      194       194    3            } else {
      195       195    3               return TRUE; /* not disjoint */
      196       196    3            }
      197       197    2         }
      198       198    1         return FALSE; /* disjoint */
      199       199    1        }
      200       200
      201       201
      202       202
      203       203             bool contains(t,timespan)
      204       204              short t;
      205       205              interv_p timespan;
      206       206             {
      207       207    1         register interv_p iv;
      208       208    1
      209       209    1         for (iv = timespan; iv != (interv_p) 0; iv = iv->i_next) {
      210       210    2            if (t <= iv->i_stop) return (t >= iv->i_start);
      211       211    2         }
      212       212    1         return FALSE;
      213       213    1        }
      214       214
      215       215
      216       216
      217       217             interv_p copy_timespan(list)
      218       218              interv_p list;
      219       219             {
      220       220    1         /* copy the time span */
      221       221    1
CC.C03    File=zbe$ra_interv:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=7  
      222       222    1         interv_p x,y,head,*p;
      223       223    1
      224       224    1         head = (interv_p) 0;
      225       225    1         p = &head;
      226       226    1
      227       227    1         for (x = list; x != (interv_p) 0; x = x->i_next) {
      228       228    2            y = cons_interval(x->i_start,x->i_stop);
      229       229    2            *p = y;
      230       230    2            p = &y->i_next;
      231       231    2          y->i_next = (interv_p) 0 ;  /* set to null pointer */
      232       232    2         }
      233       233    1         return head;
      234       234    1        }
      235       235
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   zbe$ra:h.:ZBC3TOU. is referenced
   zbe$ra_interv:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$ra_interv:c.:ZBC3TSI
