

13:07 AUG 20 '97 zbk$tables:h.:ZBC3TSI                                     1    
    1      /*D*
    2            NAME: ou$tables:h
    3            PURPOSE: This include file contains the structures and things
    4            that are needed in the building of constant, symbol and label
    5            tables.
    6      */
    7      /*    Hash tables used for searching/building label and symbol tables.
    8      */
    9      #define  SECTION_TYPE   1
   10      #define  ENTREF_TYPE   2
   11      #define  SYMREF_TYPE   3
   12      #define  CONS_TYPE     4
   13      #define  SEGID_TYPE    5
   14      #define  SEGREF_TYPE   6
   15      #define  FREF_TYPE    15
   16      /*    type of call for external o.u. record generation. */
   17      #define  STD_CALL  0
   18
   19      /* defs for storage class names... */
   20      #define GLOBAL_STATIC_STORAGE   1
   21      #define LOCAL_STATIC_STORAGE    2
   22      #define AUTO_STORAGE            3
   23      #define GLOBAL_STORAGE          4
   24
   25      #define  TXT_USE    0
   26      #define  CON_USE    1
   27      #define  ROM_USE    2
   28      #define  BSS_USE    3
   29
   30      #define  DEFED   1
   31      #define  REFED   2
   32
   33      #define  SYMREF   1
   34      #define  ENTREF   2
   35
   36      /*    The following are data defs for the types of data used in
   37            C programs..  */
13:07 AUG 20 '97 zbk$tables:h.:ZBC3TSI                                     2    
   38      #define POINTER_DATA_TYPE  13
   39      #define SBIN_DATA_TYPE      1
   40      #define SFLT_DATA_TYPE      3
   41      #define DFLT_DATA_TYPE      4
   42      #define CHAR_DATA_TYPE     21
   43      #define UBIN_DATA_TYPE     24
   44      #define STRUCTURE_DATA_TYPE     17
   45      #define LABEL_DATA_TYPE     15
   46      #define ENTRY_DATA_TYPE     16
   47
   48      /*    defines for debug execution stmt types. */
   49      #define CALL_STMT   2; /* CALL STMT  TYPE. */
   50
   51      /*    defs for defining the types of labels that we are using. */
   52      #define GLOBAL_STATIC_LBL   1
   53      #define LOCAL_LBL           2
   54      #define SYM_DEF_LBL         3
   55      #define SYM_REF_LBL         4
   56
   57
   58      extern int *zbk_label_hash[];
   59      extern int *zbk_symbol_hash[];
   60      extern int zbk_oudcbnum;
   61      extern int *zbk_oudcbptr;
   62      extern int zbk_stmt_count;
   63
   64      /*    the following are type defs for symbol tables. */
   65      typedef struct zbk_sub_lbl_tbl *sub_lbl_tbl_p ;
   66      typedef struct zbk_line_tbl *line_tbl_p ;
   67      typedef struct zbk_sym_debug_tbl *sym_debug_tbl_p ;
   68      typedef struct zbk_sym_tbl *sym_tbl_p ;
   69      typedef struct zbk_constants *constants_p ;
   70      typedef struct zbk_forward_refs *forward_refs_p ;
   71      typedef struct zbk_labels *labels_p ;
   72      typedef struct zbk_static_funcs *static_funcs_p ;
   73
   74      struct zbk_labels {
13:07 AUG 20 '97 zbk$tables:h.:ZBC3TSI                                     3    
   75            labels_p next ;
   76            labels_p previous ;
   77            labels_p next_lbl_entry ;
   78            int offset ;
   79            int reloc_section ;
   80            int reloc_type ;
   81            int reloc_directive ;
   82            int lbl_type ;
   83            int ou_set_flag ;
   84            int hash_value ;
   85            int def_use;
   86            int deleted;
   87            double float_cons;
   88            int have_cons;
   89            forward_refs_p ref_thread ;
   90            unsigned defed  :1 ;
   91            unsigned refed  :1 ;
   92            char  lname[20] ;
   93            } ;
   94
   95
   96      struct zbk_forward_refs {
   97            forward_refs_p next ;
   98            int offset;
   99            int reloc_section;
  100            int reloc_type ;
  101            int reloc_directive ;
  102            };
  103
  104
  105      struct zbk_constants {
  106            constants_p next;
  107            int reloc_type ;
  108            int reloc_section ;
  109            int reloc_directive ;
  110            int addr_offset ;
  111            int mode ;
13:07 AUG 20 '97 zbk$tables:h.:ZBC3TSI                                     4    
  112            union  {
  113              int int_val;
  114              float real_val;
  115              double double_val;} uval;
  116            } ;
  117
  118
  119      /*    symbol table stuff..   */
  120      struct zbk_sym_tbl {
  121            sym_tbl_p next;
  122            sym_tbl_p previous ;
  123            sym_tbl_p next_sym_entry;
  124            int ou_set_flag; /* signals if ou entry for name is built.
  125                    mostly for symrefs and symrefs which are build multi times
  126                    multi function file compilations. Once for each function. */
  127            int hash_value ;
  128            int sym_class;
  129            int sym_type;
  130            int storage_class;
  131            int offset;
  132            int addr_type;
  133            int reloc_section;
  134            int reloc_type;
  135            int no_params;
  136            int no_param_words;
  137            int arg_checking ;
  138            int glo_static_flag ;
  139            int size_of_locals ;
  140            int def_use;
  141            int deleted;
  142            sym_debug_tbl_p debug;     /* link to debug info structure. */
  143            char name[40];
  144            char struct_name[40];
  145            };
  146
  147      /*    debug infor structure */
  148      struct zbk_sym_debug_tbl {
13:07 AUG 20 '97 zbk$tables:h.:ZBC3TSI                                     5    
  149            int line_no;
  150            int stmt_no;
  151            int level_no;
  152            int addr_type;
  153            int data_type;
  154            int size_bytes;
  155            int ele_size;
  156            int addr_byte;
  157            int starting_bit;
  158            int alignment;
  159            int array_rec_count;
  160            int array_rank ;
  161            int array_size;
  162            int array_info[20];
  163            };
  164      extern int *zbk_hex_ptr ;
  165      extern int *zbk_string_ptr ;
  166      extern static_funcs_p zbk_static_p;
  167      extern int zbk_first_func_flag;
  168      extern char zbk_progname[];
  169
  170      /*    structure for line number table info for building debug
  171            schema.
  172      */
  173      struct zbk_line_tbl {
  174            line_tbl_p next;
  175            int line_no;
  176            int stmt_no;
  177            int label_flag;
  178            int stmt_type;
  179            sub_lbl_tbl_p sub_lbl_tbl_ptr;
  180            int addr_offset;
  181            int section_no;
  182            int lbl_name_offset; } ;
  183
  184      struct zbk_sub_lbl_tbl {
  185            sub_lbl_tbl_p next;
13:07 AUG 20 '97 zbk$tables:h.:ZBC3TSI                                     6    
  186            int sub_stmt_no;
  187            int lbl_name_offset;
  188            int stmt_type ; } ;
  189
  190      struct zbk_static_funcs {
  191            static_funcs_p next;
  192            int hash;
  193            union n_f {
  194              char name[40];
  195              unsigned int_name[8]; } name_field;
  196               } ;
  197
  198
  199      extern int zbk_next_log_blk_num[];
  200      extern int zbk_blk_count ;
  201      extern labels_p zbk_first_lbl_tbl_ptr;
  202      extern labels_p zbk_lbl_tbl_ptr;
  203      extern line_tbl_p zbk_line_tbl_ptr;
  204      extern sym_tbl_p zbk_sym_tbl_ptr;
  205      extern sym_tbl_p zbk_first_sym_tbl_ptr;
  206
  207      extern struct zbk_reloc_struct zbk_reloc[];

