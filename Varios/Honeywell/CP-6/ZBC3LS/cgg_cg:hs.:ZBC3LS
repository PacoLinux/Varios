

10:59 AUG 20 '97 zbn$cgg_cg:h.:ZBC3TSI                                     1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: cgg_cg.h,v 1.4 87/03/09 21:13:21 ceriel Exp $ */
    6
    7      /* offsets of interesting fields in EM-pattern */
    8
    9      #define PO_HASH         0
   10      #define PO_NEXT         1
   11      #define PO_MATCH        3
   12
   13      #define ILLHASH 0177777
   14
   15
   16      /* Commands for codegenerator, in low order 5 bits of byte */
   17
   18      #define DO_NEXTEM       0
   19      #define DO_MATCH        1
   20      #define DO_XMATCH  2
   21      #define DO_XXMATCH 3
   22      #define DO_REMOVE       4
   23      #define DO_DEALLOCATE   5
   24      #define DO_REALLOCATE   6
   25      #define DO_ALLOCATE     7
   26      #define DO_MOVE         10
   27      #define DO_ERASE        11
   28      #define DO_TOKREPLACE   12
   29      #define DO_EMREPLACE    13
   30      #define DO_COST         14
   31      #define DO_RETURN       15
   32      #define DO_COERC        16
   33      #define DO_PRETURN 17
   34      #define DO_RREMOVE 18
   35      #define DO_INSTR   19
   36      #define DO_TEST    20
   37      #define DO_DLINE   21
10:59 AUG 20 '97 zbn$cgg_cg:h.:ZBC3TSI                                     2    
   38      #define DO_SETCC   22
   39
   40      #ifndef MAXATT
   41      #define MAXATT TOKENSIZE
   42      #endif
   43
   44      typedef struct instance {
   45       short in_which;
   46      #               define IN_COPY          1
   47      #      define IN_MEMB    2
   48      #               define IN_RIDENT        3
   49      #               define IN_ALLOC         4
   50      #               define IN_DESCR         5
   51      #               define IN_S_DESCR       6
   52      #               define IN_D_DESCR       7
   53       short in_info[MAXATT+1];
   54      } inst_t,*inst_p;
   55
   56      typedef struct set {
   57       short set_size;
   58       short set_val[SETSIZE];
   59      } set_t,*set_p;
   60
   61      typedef struct {
   62       short m_set1;           /* number of tokenexpr in move: from */
   63       short m_expr1;          /* optional expression */
   64       short m_set2;           /* number of tokenexpr in move: to */
   65       short m_expr2;          /* optional expression */
   66       short m_cindex;         /* code index to really do it */
   67      } move_t, *move_p;
   68
   69      typedef struct {
   70       short t_set;      /* number of tokenexpr in test */
   71       short t_expr;     /* optional expression */
   72       short t_cindex;      /* code index to really do it */
   73      } test_t, *test_p;
   74
10:59 AUG 20 '97 zbn$cgg_cg:h.:ZBC3TSI                                     3    
   75      struct exprnode {
   76       short ex_operator;
   77       short ex_lnode;
   78       short ex_rnode;
   79      };
   80      typedef struct exprnode node_t;
   81      typedef struct exprnode *node_p;
   82
   83      /*
   84       * contents of .ex_operator
   85       */
   86
   87      #define EX_TOKFIELD     0
   88      #define EX_ARG          1
   89      #define EX_CON          2
   90      #define EX_ALLREG       3
   91      #define EX_SAMESIGN     4
   92      #define EX_SFIT         5
   93      #define EX_UFIT         6
   94      #define EX_ROM          7
   95      #define EX_NCPEQ        8
   96      #define EX_SCPEQ        9
   97      #define EX_RCPEQ        10
   98      #define EX_NCPNE        11
   99      #define EX_SCPNE        12
  100      #define EX_RCPNE        13
  101      #define EX_NCPGT        14
  102      #define EX_NCPGE        15
  103      #define EX_NCPLT        16
  104      #define EX_NCPLE        17
  105      #define EX_OR2          18
  106      #define EX_AND2         19
  107      #define EX_PLUS         20
  108      #define EX_CAT          21
  109      #define EX_MINUS        22
  110      #define EX_TIMES        23
  111      #define EX_DIVIDE       24
10:59 AUG 20 '97 zbn$cgg_cg:h.:ZBC3TSI                                     4    
  112      #define EX_MOD          25
  113      #define EX_LSHIFT       26
  114      #define EX_RSHIFT       27
  115      #define EX_NOT          28
  116      #define EX_COMP         29
  117      #define EX_STRING       31
  118      #define EX_DEFINED      32
  119      #define EX_SUBREG       33
  120      #define EX_TOSTRING     34
  121      #define EX_UMINUS       35
  122      #define EX_REG          36
  123      #define EX_LOWW    37
  124      #define EX_HIGHW   38
  125      #define EX_INREG   39
  126      #define EX_REGVAR  40
  127      #define EX_OR      41
  128      #define EX_XOR     42
  129      #define EX_AND     43
  130      #define EX_GNMOFFS    44
  131      #define EX_GNM        45
  132      #define EX_GETTEMP    46
  133      #define EX_ADDRTEMP   47
  134      #define EX_GETADDR    48
  135
  136
  137      typedef struct {        /* to stack coercions */
  138       short c1_texpno;        /* token expression number */
  139       short c1_expr;    /* boolean expression */
  140       short c1_prop;    /* property of register needed */
  141       short c1_codep;         /* code index */
  142      } c1_t,*c1_p;
  143
  144      #ifdef MAXSPLIT
  145      typedef struct {        /* splitting coercions */
  146       short c2_texpno;        /* token expression number */
  147       short c2_expr;    /* optional boolean expression */
  148       short c2_nsplit;        /* split factor */
10:59 AUG 20 '97 zbn$cgg_cg:h.:ZBC3TSI                                     5    
  149       short c2_repl[MAXSPLIT];/* replacement instances */
  150       short c2_codep;         /* code index */
  151      } c2_t,*c2_p;
  152      #endif MAXSPLIT
  153
  154      typedef struct {        /* one to one coercions */
  155       short c3_texpno;        /* token expression number */
  156       short c3_expr;    /* boolean expression */
  157       short c3_prop;          /* property of register needed */
  158       short c3_repl;          /* replacement instance */
  159       short c3_codep;         /* code index */
  160      } c3_t,*c3_p;
  161
  162
  163      #define getint(a,b) \
  164       if ((a=((*(b)++)&BMASK)) >= 128) {\
  165          a = ((a-128)<<BSHIFT) | (*(b)++&BMASK); \
  166       }
  167

