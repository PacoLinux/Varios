

CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: stack.c,v 3.16 87/03/25 23:08:17 ceriel Exp $ */
        6         6             /*  S T A C K / U N S T A C K  R O U T I N E S   */
        7         7
        8         8             #include  "nofloat.h"
        9         9             #include  <system.h>
       10        10             #include  <em.h>
       11        11             #include  <em_reg.h>
       12        12             #include  "debug.h"
       13        13             #include  "botch_free.h"
       14        14             #include  <alloc.h>
       15        15             #include  "Lpars.h"
       16        16             #include  "arith.h"
       17        17             #include  "stack.h"
       18        18             #include  "type.h"
       19        19             #include  "idf.h"
       20        20             #include  "def.h"
       21        21             #include  "struct.h"
       22        22             #include  "level.h"
       23        23             #include  "mes.h"
       24        24             #include  "noRoption.h"
       25        25             #include "expr.h"
       26        26
       27        27             #define movedef2expr(df,ex) ex.ex_file    = df->df_file;\
       28        27                                          ex.ex_line    = df->df_line;\
       29        27                                          ex.ex_debline = df->df_debline;\
       30        27                                          ex.ex_flags   = 0;
       31        31
       32        32
       33        33             /* #include  <em_reg.h> */
       34        34
       35        35             extern char options[];
       36        36
CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=2  
       37        37             static struct stack_level UniversalLevel = {0, 0, 0, 0, 0, 0, 0};
       38        38             static struct stack_level init_stack_level_val = {0, 0, 0, 0, 0, 0,0};
       39        39             struct stack_level *local_level = &UniversalLevel;
       40        40             /*  The main reason for having this secondary stacking
       41        41              mechanism besides the linked lists pointed to by the idf's
       42        42              is efficiency.
       43        43              To remove the idf's of a given level, one could scan the
       44        44              hash table and chase down the idf chains; with a hash
       45        45              table size of 100 this is feasible, but with a size of say
       46        46              100000 this becomes painful. Therefore all idf's are also
       47        47              kept in a stack of sets, one set for each level.
       48        48             */
       49        49
       50        50             int level;   /* Always equal to local_level->sl_level. */
       51        51
       52        52             stack_level()   {
       53        53    1         /* A new level is added on top of the identifier stack.
       54        54    1         */
       55        55    1         register struct stack_level *stl = new_stack_level();
       56        56    1         register struct stack_level *loclev = local_level;
       57        57    1
       58        58    1         *stl = init_stack_level_val;
       59        59    1         loclev->sl_next = stl;
       60        60    1         stl->sl_previous = loclev;
       61        61    1         stl->sl_level = ++level;
       62        62    1         stl->sl_local_offset =
       63        63    1         stl->sl_max_block = loclev->sl_local_offset;
       64        64    1         local_level = stl;
       65        65    1        }
       66        66
       67        67             stack_idf(idf, stl)
       68        68              struct idf *idf;
       69        69              register struct stack_level *stl;
       70        70             {
       71        71    1         /* The identifier idf is inserted in the stack on level stl.
       72        72    1         */
       73        73    1         register struct stack_entry *se = new_stack_entry();
CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=3  
       74        74    1
       75        75    1         /* link it into the stack level */
       76        76    1         se->next = stl->sl_entry;
       77        77    1         se->se_idf = idf;
       78        78    1         stl->sl_entry = se;
       79        79    1        }
       80        80
       81        81             struct stack_level *
       82        82             stack_level_of(lvl)
       83        83             {
       84        84    1         /* The stack_level corresponding to level lvl is returned.
       85        85    1            The stack should probably be an array, to be extended with
       86        86    1            realloc where needed.
       87        87    1         */
       88        88    1         register struct stack_level *stl;
       89        89    1
       90        90    1         if (lvl == level)
       91        91    1            return local_level;
       92        92    1         stl = &UniversalLevel;
       93        93    1
       94        94    1         while (stl->sl_level != lvl)
       95        95    1            stl = stl->sl_next;
       96        96    1         return stl;
       97        97    1        }
       98        98
       99        99             unstack_level()
      100       100             {
      101       101    1         /* The top level of the identifier stack is removed.
      102       102    1         */
      103       103    1         struct stack_level *lastlvl;
      104       104    1
      105       105    1        #ifdef DEBUG
      106       106    1         if (options['t'])
      107       107    1            dumpidftab("before unstackidfs", 0);
      108       108    1        #endif DEBUG
      109       109    1         /* The implementation below is more careful than strictly
      110       110    1            necessary. Optimists may optimize it afterwards.
CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=4  
      111       111    1         */
      112       112    1         while (local_level->sl_entry) {
      113       113    2            register struct stack_entry *se = local_level->sl_entry;
      114       114    2            register struct idf *idf = se->se_idf;
      115       115    2            register struct def *def;
      116       116    2            register struct sdef *sdef;
      117       117    2            register struct tag *tag;
      118       118    2
      119       119    2            /* unlink it from the local stack level */
      120       120    2            local_level->sl_entry = se->next;
      121       121    2            free_stack_entry(se);
      122       122    2
      123       123    2            while ((def = idf->id_def) && def->df_level >= level) {
      124       124    3               /* unlink it from the def list under the idf block */
      125       125    3               if (def->df_sc == LABEL)
      126       126    3                  unstack_label(idf);
      127       127    3               else
      128       128    3               if (level == L_LOCAL || level == L_FORMAL1)  {
      129       129    4                  if (  def->df_register != REG_NONE &&
      130       130    4                     def->df_sc != STATIC &&
      131       131    4                     def->df_type->tp_size > 0 &&
      132       132    4                     options['n'] == 0
      133       133    4                  )  {
      134       134    5                     int reg;
      135       135    5
      136       136    5                     switch (def->df_type->tp_fund)   {
      137       137    6
      138       138    6                     case POINTER:
      139       139    6                        reg = reg_pointer;
      140       140    6                        break;
      141       141    6        #ifndef NOFLOAT
      142       142    6                     case FLOAT:
      143       143    6                     case DOUBLE:
      144       144    6                        reg = reg_float;
      145       145    6                        break;
      146       146    6        #endif NOFLOAT
      147       147    6                     default:
CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=5  
      148       148    6                        reg = reg_any;
      149       149    6                        break;
      150       150    6                     }
      151       151    5                     C_ms_reg(def->df_address,
      152       152    5                        def->df_type->tp_size,
      153       153    5                        reg, def->df_register
      154       154    5                     );
      155       155    5                  }
      156       156    4               }
      157       157    3               debugvar(idf, def, 0, 0);
      158       158    3               if (!def->df_used && def->df_sc != TYPEDEF && def->df_sc != ENUM && def
                               ->df_debline) {
      159       159    4                  struct expr expr_warn;
      160       160    4                  movedef2expr(def, expr_warn);
      161       161    4                  expr_warning(&expr_warn,"identifier \"%s\" is not used",idf->id_text
                               );
      162       162    4                  }
      163       163    3               idf->id_def = def->next;
      164       164    3               free_def(def);
      165       165    3               update_ahead(idf);
      166       166    3            }
      167       167    2            while (  (def = idf->id_label) && def->df_level >= level) {
      168       168    3               if (!def->df_used && def->df_debline) {
      169       169    4                  struct expr expr_warn;
      170       170    4                  movedef2expr(def, expr_warn);
      171       171    4                  expr_warning(&expr_warn,"label %s is not used", idf->id_text);
      172       172    4                  }
      173       173    3               unstack_label(idf);
      174       174    3               idf->id_label = def->next;
      175       175    3               free_def(def);
      176       176    3               }
      177       177    2            while (  (sdef = idf->id_sdef)
      178       178    2            && sdef->sd_level >= level
      179       179    2            )  {
      180       180    3               /* unlink it from the sdef list under the idf block */
      181       181    3               if (sdef->sd_stype->tp_debmes == 1)
      182       182    3                  debugbased(sdef->sd_stype->tp_sdef);
CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=6  
      183       183    3               idf->id_sdef = sdef->next;
      184       184    3               free_sdef(sdef);
      185       185    3            }
      186       186    2            while (  (tag = idf->id_struct)
      187       187    2            && tag->tg_level >= level
      188       188    2            )  {
      189       189    3               /* unlink it from the struct list under the idf block */
      190       190    3               idf->id_struct = tag->next;
      191       191    3               free_tag(tag);
      192       192    3            }
      193       193    2            while ((tag = idf->id_enum) && tag->tg_level >= level)   {
      194       194    3               /* unlink it from the enum list under the idf block */
      195       195    3               idf->id_enum = tag->next;
      196       196    3               free_tag(tag);
      197       197    3            }
      198       198    2         }
      199       199    1         /* Unlink the local stack level from the stack.
      200       200    1         */
      201       201    1         lastlvl = local_level;
      202       202    1         local_level = local_level->sl_previous;
      203       203    1         if (  level > L_LOCAL
      204       204    1         && lastlvl->sl_max_block < local_level->sl_max_block
      205       205    1         )  {
      206       206    2            local_level->sl_max_block = lastlvl->sl_max_block;
      207       207    2         }
      208       208    1         free_stack_level(lastlvl);
      209       209    1         local_level->sl_next = (struct stack_level *) 0;
      210       210    1         level = local_level->sl_level;
      211       211    1
      212       212    1        #ifdef DEBUG
      213       213    1         if (options['t'])
      214       214    1            dumpidftab("after unstackidfs", 0);
      215       215    1        #endif DEBUG
      216       216    1        }
      217       217
      218       218             unstack_world()
      219       219             {
CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=7  
      220       220    1         /* The global level of identifiers is scanned, and final
      221       221    1            decisions are taken about such issues as
      222       222    1            extern/static/global and un/initialized.
      223       223    1            Effects on the code generator: initialised variables
      224       224    1            have already been encoded while the uninitialised ones
      225       225    1            are not and have to be encoded at this moment.
      226       226    1         */
      227       227    1         register struct stack_entry *se = local_level->sl_entry;
      228       228    1
      229       229    1         open_name_list();
      230       230    1
      231       231    1         while (se)  {
      232       232    2            register struct idf *idf = se->se_idf;
      233       233    2            register struct def *def = idf->id_def;
      234       234    2
      235       235    2            if (!def)   {
      236       236    3               /* global selectors, etc. */
      237       237    3               se = se->next;
      238       238    3               continue;
      239       239    3            }
      240       240    2
      241       241    2        #ifdef DEBUG
      242       242    2            if (options['a']) {
      243       243    3               char *symbol2str();
      244       244    3
      245       245    3               print("\"%s\", %s, %s, %s, %s\n",
      246       246    3                  idf->id_text,
      247       247    3                  (def->df_alloc == 0) ? "no alloc" :
      248       248    3                  (def->df_alloc == ALLOC_SEEN) ? "alloc seen" :
      249       249    3                  (def->df_alloc == ALLOC_DONE) ? "alloc done" :
      250       250    3                  "illegal alloc info",
      251       251    3                  symbol2str(def->df_sc),
      252       252    3                  def->df_initialized ? "init" : "no init",
      253       253    3                  def->df_used ? "used" : "not used");
      254       254    3            }
      255       255    2        #endif DEBUG
      256       256    2            /*
CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=8  
      257       257    2            /_* find final storage class *_/
      258       258    2            if (def->df_sc == GLOBAL || def->df_sc == IMPLICIT)
      259       259    2               /_* even now we still don't know *_/
      260       260    2               def->df_sc = EXTERN;
      261       261    2            */
      262       262    2
      263       263    2            if (  def->df_sc == STATIC
      264       264    2               && def->df_type->tp_fund == FUNCTION
      265       265    2               && !def->df_initialized
      266       266    2            )  {
      267       267    3               /* orphaned static function */
      268       268    3               struct expr expr_warn;
      269       269    3               movedef2expr(def, expr_warn);
      270       270    3               expr_warning(&expr_warn,"static function %s never defined, %s",
      271       271    3                     idf->id_text,
      272       272    3                     "changed to extern"
      273       273    3                  );
      274       274    3               def->df_sc = EXTERN;
      275       275    3            }
      276       276    2
      277       277    2            if (
      278       278    2               def->df_alloc == ALLOC_SEEN &&
      279       279    2               !def->df_initialized
      280       280    2            )  {
      281       281    3               /* space must be allocated */
      282       282    3               bss(idf);
      283       283    3               if (def->df_sc != STATIC)
      284       284    3                  namelist(idf->id_text); /* may be common */
      285       285    3               def->df_alloc = ALLOC_DONE;   /* see Note below */
      286       286    3            }
      287       287    2            se = se->next;
      288       288    2         }
      289       289    1         /* Note:
      290       290    1            df_alloc must be set to ALLOC_DONE because the idf entry
      291       291    1            may occur several times in the list.
      292       292    1            The reason for this is that the same name may be used
      293       293    1            for different purposes on the same level, e.g.
CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=9  
      294       294    1               struct s {int s;} s;
      295       295    1            is a legal definition and contains 3 defining occurrences
      296       296    1            of s.
      297       297    1            Each definition has been entered into the identifier stack.
      298       298    1            Although only one of them concerns a variable, we meet the
      299       299    1            s 3 times when scanning the identifier stack.
      300       300    1         */
      301       301    1        }
      302       302
      303       303             /*  A list of potential common names is kept, to be fed to
      304       304              an understanding loader.  The list is written to a file
      305       305              the name of which is nmlist.  If nmlist == NULL, no name
      306       306              list is generated.
      307       307             */
      308       308             extern char *nmlist;  /* BAH! -- main.c */
      309       309             static File *nfp = 0;
      310       310
      311       311             open_name_list()
      312       312             {
      313       313    1         if (nmlist && sys_open(nmlist, OP_WRITE, &nfp) == 0)
      314       314    1            fatal("cannot create namelist %s", nmlist);
      315       315    1        }
      316       316
      317       317             namelist(nm)
      318       318              char *nm;
      319       319             {
      320       320    1         if (nmlist) {
      321       321    2            sys_write(nfp, nm, strlen(nm));
      322       322    2            sys_write(nfp, "\n", 1);
      323       323    2         }
      324       324    1        }
      325       325
---  Include file information  ---

   zbc$nofloat:h.:ZBC3TOU. is referenced
   system:h.:ZBC3TOU. is referenced
   em:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$stack:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=10 
   em_arith:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   em_code:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$botch_free:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   zbc$stack:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$struct:h.:ZBC3TOU. is referenced
   zbc$level:h.:ZBC3TOU. is referenced
   zbc$mes:h.:ZBC3TOU. is referenced
   zbc$noRoption:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$stack:c.:ZBC3TSI
