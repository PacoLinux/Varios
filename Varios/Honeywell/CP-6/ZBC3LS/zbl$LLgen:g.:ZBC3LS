

11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       *
    5       */
    6
    7      /*
    8       *  L L G E N
    9       *
   10       *  An Extended LL(1) Parser Generator
   11       *
   12       *  Author : Ceriel J.H. Jacobs
   13       */
   14
   15      /*
   16       * LLgen.g
   17       * Defines the grammar of LLgen.
   18       * Some routines that build the internal structure are also included
   19       */
   20
   21      {
   22      # include "types:h"
   23      # include "io:h"
   24      # include "extern:h"
   25      # include "assert:h"
   26      # include "cclass:h"
   27
   28      # ifndef NORCSID
   29      static string   rcsid = "$Header: LLgen.g,v 2.5 87/03/16 08:56:31 ceriel Exp $";
   30      # endif
   31      p_mem     alloc(), new_mem();
   32      string    store();
   33      p_gram    search();
   34
   35      static int   nparams;    /* parameter count for nonterminals */
   36      static int   acount;        /* count #of global actions */
   37      static t_info   term_info = {0, 0, 0, 0, 0, 0};
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      2    
   38      static t_info   link_info = {0, 0, 0, 0, 0, 0};
   39      static p_order  order,
   40          maxorder;
   41
   42      /* Here are defined : */
   43      extern    a_init();
   44      STATIC p_order  neworder();
   45      STATIC    copyact();
   46      STATIC    mkalt();
   47      STATIC    mkterm();
   48      STATIC p_gram   copyrule();
   49      /* and of course LLparse() */
   50
   51      a_init() {
   52       term_info.i_esize = sizeof (t_term);
   53       term_info.i_incr = 100;
   54       link_info.i_esize = sizeof (t_link);
   55       link_info.i_incr = 100;
   56       name_init();
   57      }
   58
   59      STATIC p_order
   60      neworder(index) {
   61       register p_order po;
   62
   63       if ((po = order) == maxorder) {
   64          po = (p_order) alloc(20 * sizeof(*order));
   65          maxorder = po + 20;
   66       }
   67       order = po + 1;
   68       po->o_next = 0;
   69       po->o_index = index;
   70       if (porder) {
   71          porder->o_next = po;
   72       }
   73       else  sorder = po;
   74       return po;
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      3    
   75      }
   76      }
   77
   78      %start LLparse, spec;
   79
   80      spec   :     {  acount = 0; }
   81         [ %persistent def ]*
   82             {  /*
   83                 * Put an endmarker in temporary file
   84                 */
   85                putc('\0', fact);
   86                putc('\0', fact);
   87             }
   88       ;
   89
   90      def       {  register string p; }
   91       : rule
   92         /*
   93          * A grammar rule
   94          */
   95       | C_TOKEN listel [ ',' listel ]* ';'
   96         /*
   97          * A token declaration
   98          */
   99       | C_START C_IDENT
  100             {  p = store(lextoken.t_string); }
  101         ',' C_IDENT ';'
  102         /*
  103          * A start symbol declaration
  104          */
  105             {  /*
  106                 * Put the declaration in the list
  107                 * of start symbols
  108                 */
  109                register p_gram temp;
  110                register p_start ff;
  111
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      4    
  112                temp = search(NONTERM,lextoken.t_string,BOTH);
  113                ff = (p_start) alloc(sizeof(t_start));
  114                ff->ff_nont = g_getnont(temp);
  115                ff->ff_name = p;
  116                ff->ff_next = start;
  117                start = ff;
  118             }
  119       | C_LEXICAL C_IDENT
  120         /*
  121          * Declaration of a name for the lexical analyser.
  122          * May appear only once
  123          */
  124             {  if (!lexical) {
  125                   lexical = store(lextoken.t_string);
  126                }
  127                else  error(linecount,"Duplicate %%lexical");
  128             }
  129         ';'
  130       | C_ONERROR C_IDENT
  131             {  if (! onerror) {
  132                   onerror = store(lextoken.t_string);
  133                }
  134                else  error(linecount,"Duplicate %%onerror");
  135             }
  136         ';'
  137       | action(0) {  acount++; }
  138         /*
  139          * A global C-declaration
  140          */
  141       | firsts
  142         /*
  143          * declarations for macros
  144          */
  145       ;
  146
  147      listel : C_IDENT   {  search(TERMINAL,lextoken.t_string,ENTERING); }
  148       ;
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      5    
  149
  150      rule         {  register p_nont p;
  151                p_gram rr;
  152                register p_gram temp;
  153             }
  154       : /*
  155          * grammar for a production rule
  156          */
  157         C_IDENT   {  temp = search(NONTERM,lextoken.t_string,BOTH);
  158                p = &nonterms[g_getnont(temp)];
  159                if (p->n_rule) {
  160                   error(linecount,
  161      "nonterminal %s already defined", lextoken.t_string);
  162                }
  163                /*
  164                 * Remember the order in which the nonterminals
  165                 * were defined. Code must be generated in that
  166                 * order to keep track with the actions on the
  167                 * temporary file
  168                 */
  169                porder = neworder(p - nonterms);
  170                p->n_count = acount;
  171                acount = 0;
  172                p->n_lineno = linecount;
  173             }
  174         [ params(2)  {  p->n_flags |= PARAMS;
  175                if (nparams > 15) {
  176                   error(linecount,"Too many parameters");
  177                }
  178                else  setntparams(p,nparams);
  179             }
  180         ]?
  181         [ action(0)  {  p->n_flags |= LOCALS; }
  182         ]?
  183         ':' productions(&rr) ';'
  184             /*
  185              * Do not use p->n_rule now! The nonterms array
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      6    
  186              * might have been re-allocated.
  187              */
  188             {  nonterms[g_getnont(temp)].n_rule = rr;}
  189       ;
  190
  191      action(int n;)
  192       /*
  193        * The parameter n is non-zero when the opening and closing
  194        * bracket must be copied along with the action
  195        */
  196       : '{'    {  copyact('{','}',n,0); }
  197         '}'
  198       ;
  199
  200      productions(p_gram *p;)
  201       /*
  202        * One or more alternatives
  203        */
  204       {  p_gram      prod;
  205          int      conflres = 0;
  206          int      t = 0;
  207          int      haddefault = 0;
  208          t_gram      alts[100];
  209          register p_gram   p_alts = alts;
  210          int      o_lc, n_lc;
  211       } :
  212             {  o_lc = linecount; }
  213         simpleproduction(p,&conflres)
  214             {  if (conflres & DEF) haddefault = 1; }
  215         [
  216           [ '|'   {  n_lc = linecount; }
  217             simpleproduction(&prod,&t)
  218             {  if (p_alts - alts >= 97) {
  219                   error(n_lc,"Too many alternatives");
  220                   p_alts = alts;
  221                }
  222                if (t & DEF) {
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      7    
  223                   if (haddefault) {
  224                      error(n_lc,
  225          "More than one %%default in alternation");
  226                   }
  227                   haddefault = 1;
  228                }
  229                mkalt(*p,conflres,o_lc,p_alts++);
  230                o_lc = n_lc;
  231                conflres = t;
  232                t = 0;
  233                *p = prod;
  234             }
  235           ]+      {  if (conflres & ~DEF) {
  236                   error(n_lc,
  237          "Resolver on last alternative not allowed");
  238                }
  239                mkalt(*p,conflres,n_lc,p_alts++);
  240                g_settype(p_alts,EORULE);
  241                *p = copyrule(alts,p_alts+1-alts);
  242             }
  243         |
  244             {  if (conflres & ~DEF) {
  245                   error(o_lc,
  246          "No alternation conflict resolver allowed here");
  247                }
  248                /*
  249                if (conflres & DEF) {
  250                   error(o_lc,
  251          "No %%default allowed here");
  252                }
  253                */
  254             }
  255         ]
  256       ;
  257      {
  258
  259      STATIC
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      8    
  260      mkalt(prod,condition,lc,res) p_gram prod; register p_gram res; {
  261       /*
  262        * Create an alternation and initialise it.
  263        */
  264       register int      hulp;
  265       register p_link      l;
  266
  267       l = (p_link) new_mem(&link_info);
  268       links = (p_link) link_info.i_ptr;
  269       hulp = l - links;
  270       l->l_rule = prod;
  271       l->l_flag = condition;
  272       g_setcont(res,hulp);
  273       g_settype(res,ALTERNATION);
  274       res->g_lineno = lc;
  275      }
  276      }
  277
  278      simpleproduction(p_gram *p; register int *conflres;)
  279       {  t_gram      rule[100];
  280          t_gram      elem;
  281          register p_gram   p_rule = rule;
  282          int      cnt, kind;
  283       } :
  284         [ C_DEFAULT  {  *conflres = DEF; }
  285         ]?
  286         [
  287           /*
  288            * Optional conflict reslover
  289            */
  290             C_IF expr   {  *conflres |= COND; }
  291           | C_PREFER {  *conflres |= PREFERING; }
  292           | C_AVOID  {  *conflres |= AVOIDING; }
  293         ]?
  294         [ %persistent elem(&elem)
  295             {  if (p_rule - rule >= 98) {
  296                   error(linecount,"Production too long");
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      9    
  297                   p_rule = rule;
  298                }
  299                kind = FIXED;
  300                cnt = 0;
  301             }
  302           [ repeats(&kind, &cnt)
  303             {  if (g_gettype(&elem) != TERM) {
  304                   *p_rule = elem;
  305                   g_settype(p_rule+1,EORULE);
  306                   mkterm(copyrule(p_rule,2),
  307                          0,
  308                          p_rule->g_lineno,
  309                          &elem);
  310                }
  311             }
  312           ]?      {  if (g_gettype(&elem) == TERM) {
  313                   register p_term q;
  314
  315                   q = &terms[g_getcont(&elem)];
  316                   r_setkind(q,kind);
  317                   r_setnum(q,cnt);
  318                   if ((q->t_flags & RESOLVER) &&
  319                       (kind == PLUS || kind == FIXED)) {
  320                      error(linecount,
  321          "%%while not allowed in this term");
  322                   }
  323                   /*
  324                    * A persistent fixed term is the same
  325                    * as a non-persistent fixed term.
  326                    * Should we complain?
  327                   if ((q->t_flags & PERSISTENT) &&
  328                       kind == FIXED) {
  329                      error(linecount,
  330                         "illegal %%persistent");
  331                   }
  332                   */
  333                }
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      10   
  334                *p_rule++ = elem;
  335             }
  336         ]*     {  register p_term q;
  337
  338                g_settype(p_rule,EORULE);
  339                *p = 0;
  340                if (g_gettype(&rule[0]) == TERM &&
  341                    p_rule-rule == 1) {
  342                      q = &terms[g_getcont(&rule[0])];
  343                   if (r_getkind(q) == FIXED &&
  344                       r_getnum(q) == 0) {
  345                         *p = q->t_rule;
  346                   }
  347                }
  348                if (!*p) *p = copyrule(rule,p_rule-rule+1);
  349             }
  350       ;
  351      {
  352
  353      STATIC
  354      mkterm(prod,flags,lc, result) p_gram prod; register p_gram result; {
  355       /*
  356        * Create a term, initialise it and return
  357        * a grammar element containing it
  358        */
  359       register p_term      q;
  360       unsigned    hulp;
  361
  362       q = (p_term) new_mem(&term_info);
  363       terms = (p_term) term_info.i_ptr;
  364       hulp = q - terms;
  365       q->t_rule = prod;
  366       q->t_contains = 0;
  367       q->t_flags = flags;
  368       g_settype(result,TERM);
  369       g_setcont(result,hulp);
  370       result->g_lineno = lc;
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      11   
  371      }
  372      }
  373
  374      elem (register p_gram pres;)
  375       {  register short t = 0;
  376          p_gram      p1;
  377          int      ln;
  378          p_gram      pe;
  379       } :
  380         '['    {  ln = linecount; }
  381         [ C_WHILE expr  {  t |= RESOLVER; }
  382         ]?
  383         [ C_PERSISTENT  {  t |= PERSISTENT; }
  384         ]?
  385         productions(&p1)
  386         ']'    {
  387                mkterm(p1,t,ln,pres);
  388             }
  389       |
  390         C_IDENT   {  pe = search(UNKNOWN,lextoken.t_string,BOTH);
  391                *pres = *pe;
  392             }
  393         [ params(0)  {  if (nparams > 14) {
  394                   error(linecount,"Too many parameters");
  395                } else   g_setnpar(pres,nparams+1);
  396                if (g_gettype(pres) == TERMINAL) {
  397                   error(linecount,
  398                      "Terminal with parameters");
  399                }
  400             }
  401         ]?
  402       | C_LITERAL {  pe = search(LITERAL,lextoken.t_string,BOTH);
  403                *pres = *pe;
  404             }
  405       |     {  g_settype(pres,ACTION);
  406                pres->g_lineno = linecount;
  407             }
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      12   
  408         action(1)
  409       ;
  410
  411      params(int n;)
  412       : '('    {  copyact('(',')',n,0); }
  413         ')'
  414       ;
  415
  416      expr   : '('    {  copyact('(',')',1,0); }
  417         ')'
  418       ;
  419
  420      repeats(int *kind, *cnt;)   {  int t1 = 0; } :
  421         [
  422           '?'     {  *kind = OPT; }
  423         | [ '*'   {  *kind = STAR; }
  424           | '+'   {  *kind = PLUS; }
  425           ]
  426           number(&t1)?
  427             {  if (t1 == 1) {
  428                   t1 = 0;
  429                   if (*kind == STAR) *kind = OPT;
  430                   if (*kind == PLUS) *kind = FIXED;
  431                }
  432             }
  433         | number(&t1)
  434         ]      {  *cnt = t1; }
  435       ;
  436
  437      number(int *t;)
  438       : C_NUMBER
  439             {  *t = lextoken.t_num;
  440                if (*t <= 0 || *t >= 8192) {
  441                   error(linecount,"Illegal number");
  442                }
  443             }
  444       ;
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      13   
  445
  446      firsts {  register string p; }
  447       : C_FIRST C_IDENT
  448             {  p = store(lextoken.t_string); }
  449         ',' C_IDENT ';'
  450             {  /*
  451                 * Store this %first in the list belonging
  452                 * to this input file
  453                 */
  454                p_gram temp;
  455                register p_first ff;
  456
  457                temp = search(NONTERM,lextoken.t_string,BOTH);
  458                ff = (p_first) alloc(sizeof(t_first));
  459                ff->ff_nont = g_getnont(temp);
  460                ff->ff_name = p;
  461                ff->ff_next = pfile->f_firsts;
  462                pfile->f_firsts = ff;
  463             }
  464       ;
  465      {
  466
  467      STATIC
  468      copyact(ch1,ch2,flag,level) char ch1,ch2; {
  469       /*
  470        * Copy an action to file f. Opening bracket is ch1, closing bracket
  471        * is ch2.
  472        * If flag = 1, copy opening and closing parameters too.
  473        * If flag = 2, the copy is a parameter declaration copy.
  474        * Give an error message if not ending on a ';'
  475        */
  476       register FILE *f;
  477       register ch;      /* Current char */
  478       register match;      /* used to read strings */
  479       int      saved;      /* save linecount */
  480       int      semicolon = 0;
  481
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      14   
  482       f = fact;
  483       if (!level) {
  484          saved = linecount;
  485          nparams = 0;         /* count comma's */
  486          putc('\0',f);
  487          fprintf(f,"# line %d \"%s\"\n", linecount,f_input);
  488       }
  489       if (level || flag == 1) putc(ch1,f);
  490       for (;;) {
  491          ch = input();
  492          if (ch == ch2) {
  493             if (!level) unput(ch);
  494             if (level || flag == 1) putc(ch,f);
  495             if ((!level) && flag == 2 && !semicolon) {
  496                error(linecount,"missing ';'");
  497             }
  498             return;
  499          }
  500          if (c_class[ch] != ISSPA) semicolon = 0;
  501          switch(ch) {
  502            case ')':
  503            case '}':
  504            case ']':
  505             error(linecount,"Parentheses mismatch");
  506             break;
  507            case '(':
  508             copyact('(',')',flag,level+1);
  509             continue;
  510            case '{':
  511             copyact('{','}',flag,level+1);
  512             continue;
  513            case '[':
  514             copyact('[',']',flag,level+1);
  515             continue;
  516            case '/':
  517             ch = input();
  518             unput(ch);
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      15   
  519             if (ch == '*') {
  520                skipcomment(1);
  521                continue;
  522             }
  523             ch = '/';
  524             break;
  525            case ';':
  526             semicolon = 1;
  527             /* Fall through */
  528            case ',':
  529             if (!level) {     /*
  530                       * Only ','s and ';'s on the
  531                       * outer level are counted
  532                       */
  533                nparams++;
  534             }
  535             break;
  536            case '\'':
  537            case '"' :
  538             /*
  539              * watch out for brackets in strings, they do not
  540              * count !
  541              */
  542             match = ch;
  543             putc(ch,f);
  544             while((ch = input())) {
  545                if (ch == match) break;
  546                if (ch == '\\') {
  547                   putc(ch,f);
  548                   ch = input();
  549                }
  550                if (ch == '\n') {
  551                   error(linecount,"newline in string");
  552                   unput(match);
  553                }
  554                putc(ch,f);
  555             }
11:02 AUG 20 '97 zbl$LLgen:g.:ZBC3TSI                                      16   
  556             if (ch == match) break;
  557             /* Fall through */
  558              case EOF :
  559             if (!level) error(saved,"Action does not terminate");
  560             return;
  561          }
  562          putc(ch,f);
  563       }
  564      }
  565
  566      STATIC p_gram
  567      copyrule(p,length) register p_gram p; {
  568       /*
  569        * Returns a pointer to a grammar rule that was created in
  570        * p. The space pointed to by p can now be reused
  571        */
  572       register p_gram t;
  573       p_gram rule;
  574
  575       t = (p_gram) alloc((unsigned) length * sizeof(t_gram));
  576       rule = t;
  577       while (length--) {
  578          *t++ = *p++;
  579       }
  580       return rule;
  581      }
  582      }
  583

