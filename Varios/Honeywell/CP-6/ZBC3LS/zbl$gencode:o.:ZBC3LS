

CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              *
        5         5              */
        6         6
        7         7             /*
        8         8              *  L L G E N
        9         9              *
       10        10              *  An Extended LL(1) Parser Generator
       11        11              *
       12        12              *  Author : Ceriel J.H. Jacobs
       13        13              */
       14        14
       15        15             /*
       16        16              * gencode.c
       17        17              * Defines the routine "gencode", which generates the parser
       18        18              * we wanted so badly.
       19        19              * This file is a mess, it should be cleaned up some time.
       20        20              */
       21        21
       22        22             # include "types:h"
       23        23             # include "io:h"
       24        24             # include "extern:h"
       25        25             # include "sets:h"
       26        26             # include "assert:h"
       27        27             # include "cclass:h"
       28        28
       29        29             # ifndef NORCSID
       30        30             static string rcsid3 = "$Header: gencode.c,v 2.8 87/03/17 22:50:40 ceriel Exp
                               $";
       31        31             # endif NORCSID
       32        32
       33        33             /*
       34        34              * Some codestrings used more than once
       35        35              */
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       36        36
       37        37             static string   c_arrend =  "0 };\n";
       38        38             static string   c_close =   "}\n";
       39        39             static string   c_break =   "break;\n";
       40        40             static string   c_read = "LLread();\n";
       41        41
       42        42             /* Some constants used for reading from the action file */
       43        43             # define ENDDECL   0400
       44        44             # define IDENT     0401
       45        45
       46        46             static int nlabel;    /* count for the generation of labels */
       47        47             static int firsts;    /* are there any? */
       48        48
       49        49             /* In this file the following routines are defined: */
       50        50             extern    gencode();
       51        51             STATIC    opentemp();
       52        52             STATIC    geninclude();
       53        53             STATIC    genrecovery();
       54        54             STATIC string   genname();
       55        55             STATIC string   genintfname();
       56        56             STATIC    generate();
       57        57             STATIC    prset();
       58        58             STATIC    macro();
       59        59             STATIC    controlline();
       60        60             STATIC    getparams();
       61        61             STATIC    gettok();
       62        62             STATIC    rulecode();
       63        63             STATIC int * dopush();
       64        64             STATIC    getaction();
       65        65             STATIC    alternation();
       66        66             STATIC    codeforterm();
       67        67             STATIC    genswhead();
       68        68             STATIC    gencases();
       69        69             STATIC    genpush();
       70        70             STATIC    genpop();
       71        71             STATIC    genincrdecr();
       72        72
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       73        73             # define NOPOP     -20000
       74        74
       75        75             p_mem alloc();
       76        76
       77        77             gencode(argc) {
       78        78    1         register p_file p = files;
       79        79    1
       80        80    1         /* Set up for code generation */
       81        81    1         if ((fact = fopen(f_temp,"rb")) == NULL) {
       82        82    2            fatal(0,e_noopen,f_temp);
       83        83    2         }
       84        84    1
       85        85    1         /* For every source file .... */
       86        86    1         while (argc--) {
       87        87    2            /* Open temporary */
       88        88    2            f_input = p->f_name;
       89        89    2            opentemp(genname(f_input),1);
       90        90    2            /* generate code ... */
       91        91    2            copyfile(incl_file);
       92        92    2            generate(p);
       93        93    2            getaction(2);
       94        94    2            if (ferror(fpars) != 0) {
       95        95    3               fatal(0,"Write error on temporary");
       96        96    3            }
       97        97    2            fclose(fpars);
       98        98    2            p++;
       99        99    2         }
      100       100    1         geninclude();
      101       101    1         genrecovery();
      102       102    1        }
      103       103
      104       104             STATIC
      105       105             opentemp(str,flag) string str; int flag; {
      106       106    1
      107       107    1         if ((fpars = fopen(str,"w")) == NULL) {
      108       108    2            fatal(0,e_noopen,str);
      109       109    2         }
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      110       110    1         if (flag == 0) str = ".";
      111       111    1         fprintf(fpars,LLgenid,str);
      112       112    1        }
      113       113
      114       114             STATIC
      115       115             geninclude() {
      116       116    1         register p_token p;
      117       117    1
      118       118    1         opentemp( genintfname(f_hfile), 0);
      119       119    1         for (p = tokens; p < maxt; p++) {
      120       120    2            if (p->t_tokno >= 0400) {
      121       121    3               fprintf(fpars,"# define %s %d\n",
      122       122    3                    p->t_string,
      123       123    3                    p->t_tokno);
      124       124    3            }
      125       125    2         }
      126       126    1         if (ferror(fpars) != 0) {
      127       127    2            fatal(0,"write error on temporary");
      128       128    2         }
      129       129    1         fclose(fpars);
      130       130    1        }
      131       131
      132       132             STATIC
      133       133             genrecovery() {
      134       134    1         register FILE  *f;
      135       135    1         register p_token t;
      136       136    1         register int   *q;
      137       137    1         register p_nont   p;
      138       138    1         register p_set *psetl;
      139       139    1         int      *index;
      140       140    1         int      i;
      141       141    1         register p_start st;
      142       142    1
      143       143    1         opentemp( genintfname(f_rfile), 0);
      144       144    1         f = fpars;
      145       145    1         copyfile(incl_file);
      146       146    1         if (!firsts) fputs("#define LLNOFIRSTS\n", f);
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      147       147    1         for (st = start; st; st = st->ff_next) {
      148       148    2            /* Make sure that every set the parser needs is in the list
      149       149    2             * before generating a define of the number of them!
      150       150    2             */
      151       151    2            p = &nonterms[st->ff_nont];
      152       152    2            if (g_gettype(p->n_rule) == ALTERNATION) {
      153       153    3               findindex(p->n_contains);
      154       154    3            }
      155       155    2         }
      156       156    1         i = maxptr - setptr;
      157       157    1         fprintf(f,
      158       158    1        "#define LL_LEXI %s\n#define LL_SSIZE %d\n#define LL_NSETS %d\n#define LL_NTER
                               MINALS %d\n",
      159       159    1              lexical,
      160       160    1              nbytes,
      161       161    1              i > 0 ? i : 1,
      162       162    1              ntokens);
      163       163    1         if (onerror) fprintf(f,"#define LL_USERHOOK %s\n", onerror);
      164       164    1         /* Now generate the routines that call the startsymbols */
      165       165    1         for (st = start; st; st = st->ff_next) {
      166       166    2            fputs(st->ff_name, f);
      167       167    2            p = &nonterms[st->ff_nont];
      168       168    2            fputs("() {\n\tunsigned int s[LL_NTERMINALS+LL_NSETS+2];\n\tLLnewlevel(s);
                               \n\tLLread();\n", f);
      169       169    2            if (g_gettype(p->n_rule) == ALTERNATION) {
      170       170    3               genpush(findindex(p->n_contains));
      171       171    3            }
      172       172    2            fprintf(f, "\tL%d_%s();\n",
      173       173    2               st->ff_nont,
      174       174    2               p->n_name);
      175       175    2            if (getntout(p) == NOSCANDONE) {
      176       176    3               fputs("\tLLscan(EOFILE);\n",f);
      177       177    3            }
      178       178    2            else  fputs("\tif (LLsymb != EOFILE) LLerror(EOFILE);\n",f);
      179       179    2            fputs("\tLLoldlevel(s);\n}\n",f);
      180       180    2         }
      181       181    1         /* Now generate the sets */
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      182       182    1         fputs("char LLsets[] = {\n",f);
      183       183    1         for (psetl = setptr; psetl < maxptr; psetl++) prset(*psetl);
      184       184    1         fputs(c_arrend, f);
      185       185    1         index = (int *) alloc((unsigned) (assval * sizeof(int)));
      186       186    1         for (q = index; q < &index[assval];) *q++ = -1;
      187       187    1         for (t = tokens; t < maxt; t++) {
      188       188    2            index[t->t_tokno] = t - tokens;
      189       189    2         }
      190       190    1         fputs("short LLindex[] = {\n",f);
      191       191    1         for (q = index; q < &index[assval]; q++) {
      192       192    2            fprintf(f, "%d,\n", *q);
      193       193    2         }
      194       194    1         fputs(c_arrend, f);
      195       195    1         free((p_mem) index);
      196       196    1         fputs("#define LL_NEWMESS\n", f);
      197       197    1         copyfile(rec_file);
      198       198    1         if (ferror(f) != 0) {
      199       199    2            fatal(0,"write error on temporary");
      200       200    2         }
      201       201    1         fclose(f);
      202       202    1        }
      203       203
      204       204             STATIC
      205       205             generate(f) p_file f; {
      206       206    1         /*
      207       207    1          * Generates a parsing routine for every nonterminal
      208       208    1          */
      209       209    1         register p_order s;
      210       210    1         register p_nont   p;
      211       211    1         int i;
      212       212    1         register p_first ff;
      213       213    1         int mustpop;
      214       214    1
      215       215    1         /* Generate first sets */
      216       216    1         for (ff = f->f_firsts; ff; ff = ff->ff_next) {
      217       217    2            macro(ff->ff_name,&nonterms[ff->ff_nont]);
      218       218    2         }
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      219       219    1
      220       220    1         /* For every nonterminal generate a function */
      221       221    1         for (s = f->f_list; s; s = s->o_next) {
      222       222    2            p = &nonterms[s->o_index];
      223       223    2            /* Generate functions in the order in which the nonterminals
      224       224    2             * were defined in the grammar. This is important, because
      225       225    2             * of synchronisation with the action file
      226       226    2             */
      227       227    2            while (p->n_count--) getaction(1);
      228       228    2            fprintf(fpars,"L%d_%s (\n",s->o_index,p->n_name);
      229       229    2            if (p->n_flags & PARAMS) {
      230       230    3               controlline();
      231       231    3               getparams();
      232       232    3            }
      233       233    2            else fputs(") {\n", fpars);
      234       234    2            if (p->n_flags & LOCALS) getaction(1);
      235       235    2            i = getntsafe(p);
      236       236    2            mustpop = NOPOP;
      237       237    2            if (g_gettype(p->n_rule) == ALTERNATION &&
      238       238    2                i > SAFESCANDONE) {
      239       239    3               mustpop = findindex(p->n_contains);
      240       240    3               if (i == NOSCANDONE) {
      241       241    4                  fputs(c_read, fpars);
      242       242    4                  i = SCANDONE;
      243       243    4               }
      244       244    3            }
      245       245    2            nlabel = 1;
      246       246    2            rulecode(p->n_rule,
      247       247    2                i,
      248       248    2                getntout(p) != NOSCANDONE,
      249       249    2                mustpop);
      250       250    2            fputs(c_close, fpars);
      251       251    2         }
      252       252    1        }
      253       253
      254       254             STATIC
      255       255             prset(p) p_set p; {
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      256       256    1         register int k;
      257       257    1         register unsigned i;
      258       258    1         int j;
      259       259    1
      260       260    1         j = nbytes;
      261       261    1         for (;;) {
      262       262    2            i = (unsigned) *p++;
      263       263    2            for (k = 0; k < sizeof(int); k++) {
      264       264    3               fprintf(fpars,"0%o,",(i & 0377));
      265       265    3               i >>= 8;
      266       266    3               if (--j == 0) {
      267       267    4                  fputs("\n",fpars);
      268       268    4                  return;
      269       269    4               }
      270       270    3            }
      271       271    2         }
      272       272    1         /* NOTREACHED */
      273       273    1        }
      274       274
      275       275             STATIC
      276       276             macro(s,n) string s; p_nont n; {
      277       277    1         int i;
      278       278    1
      279       279    1         i = findindex(n->n_first);
      280       280    1         if (i < 0) {
      281       281    2            fprintf(fpars, "#define %s(x) ((x) == %d)\n",
      282       282    2               s,
      283       283    2               tokens[-(i+1)].t_tokno);
      284       284    2            return;
      285       285    2         }
      286       286    1         firsts = 1;
      287       287    1         fprintf(fpars,"#define %s(x) LLfirst((x), %d)\n", s, i);
      288       288    1        }
      289       289
      290       290             STATIC
      291       291             controlline() {
      292       292    1         /* Copy a compiler control line */
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      293       293    1         register int l;
      294       294    1         register FILE *f1,*f2;
      295       295    1
      296       296    1         f1 = fact; f2 = fpars;
      297       297    1         l = getc(f1);
      298       298    1         assert(l == '\0');
      299       299    1         do {
      300       300    2            l = getc(f1);
      301       301    2            if (l == EOF) fatal(0, "temp file mangled");
      302       302    2            putc(l,f2);
      303       303    2         } while ( l != '\n' ) ;
      304       304    1        }
      305       305
      306       306             STATIC
      307       307             getparams() {
      308       308    1         /* getparams is called if a nonterminal has parameters. The names
      309       309    1          * of the parameters have to be found, and they should be declared
      310       310    1             */
      311       311    1         long off;
      312       312    1         register int l;
      313       313    1         long ftell();
      314       314    1         char first;
      315       315    1
      316       316    1         first = ' ';
      317       317    1         /* save offset in file to be able to copy the declaration later */
      318       318    1         off = ftell(fact);
      319       319    1         /* First pass through declaration, find the parameter names */
      320       320    1         while ((l = gettok()) != ENDDECL) {
      321       321    2            if (l == ';' || l == ',') {
      322       322    3               /*
      323       323    3                * The last identifier found before a ';' or a ','
      324       324    3                * must be a parameter
      325       325    3                */
      326       326    3               fprintf(fpars,"%c%s", first, ltext);
      327       327    3               first = ',';
      328       328    3            }
      329       329    2         }
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      330       330    1         fputs(") ",fpars);
      331       331    1         /*
      332       332    1          * Now copy the declarations
      333       333    1          */
      334       334    1         fseek(fact,off,0);
      335       335    1         getaction(0);
      336       336    1         fputs(" {\n",fpars);
      337       337    1        }
      338       338
      339       339             STATIC
      340       340             gettok() {
      341       341    1         /* Read from the action file. */
      342       342    1         register int ch;
      343       343    1         register string   c;
      344       344    1         register FILE *f;
      345       345    1
      346       346    1         f = fact;
      347       347    1         ch = getc(f);
      348       348    1         switch(ch) {
      349       349    2            case '\n':
      350       350    2               ch = getc(f);
      351       351    2               if (ch != EOF) {
      352       352    3                  ungetc(ch,f);
      353       353    3                  if (ch != '\0') return '\n';
      354       354    3               }
      355       355    2               return ENDDECL;
      356       356    2            case '\0':
      357       357    2               ungetc(ch,f);
      358       358    2               /* Fall through */
      359       359    2            case EOF :
      360       360    2               return ENDDECL;
      361       361    2            default :
      362       362    2               if (c_class[ch] == ISLET) {
      363       363    3                  c = ltext;
      364       364    3                  do {
      365       365    4                     *c++ = ch;
      366       366    4                     if (c-ltext >= LTEXTSZ) --c;
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      367       367    4                     ch = getc(f);
      368       368    4                  } while (c_class[ch] == ISLET || c_class[ch] == ISDIG);
      369       369    3                  if (ch != EOF) ungetc(ch,f);
      370       370    3                  *c = '\0';
      371       371    3                  return IDENT;
      372       372    3               }
      373       373    2               return ch;
      374       374    2         }
      375       375    1        }
      376       376
      377       377             STATIC
      378       378             rulecode(p,safety,mustscan,mustpop) register p_gram p; {
      379       379    1         /*
      380       380    1          * Code for a production rule.
      381       381    1          */
      382       382    1
      383       383    1         register int   toplevel = 1;
      384       384    1         register FILE  *f;
      385       385    1         register int   *ppu;
      386       386    1         int      pushlist[100];
      387       387    1         int      *ppushlist;
      388       388    1
      389       389    1         /*
      390       390    1          * First generate code to push the contains sets of this rule
      391       391    1          * on a stack
      392       392    1          */
      393       393    1         ppu = pushlist;
      394       394    1         ppushlist = dopush(p,safety,1,ppu);
      395       395    1         if (mustpop != NOPOP) for (; ppu < ppushlist; ppu++) {
      396       396    2            if (*ppu == mustpop) {
      397       397    3               *ppu = mustpop = NOPOP;
      398       398    3               break;
      399       399    3            }
      400       400    2         }
      401       401    1         if (g_gettype(p) != ALTERNATION) {
      402       402    2            genpop(mustpop);
      403       403    2            mustpop = NOPOP;
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
      404       404    2         }
      405       405    1         for (ppu = pushlist; ppu < ppushlist; ppu++) genpush(*ppu);
      406       406    1         f = fpars;
      407       407    1         for (;;) {
      408       408    2            switch (g_gettype(p)) {
      409       409    3              case EORULE :
      410       410    3               if (mustscan && safety == NOSCANDONE) {
      411       411    4                  fputs(c_read,f);
      412       412    4               }
      413       413    3               return;
      414       414    3              case LITERAL :
      415       415    3              case TERMINAL : {
      416       416    4               register p_token t;
      417       417    4               string s;
      418       418    4
      419       419    4               t = &tokens[g_getcont(p)];
      420       420    4               if (toplevel == 0) {
      421       421    5                  fprintf(f,"LLtdecr(%d);\n", g_getcont(p));
      422       422    5               }
      423       423    4               if (safety == SAFE) {
      424       424    5                  fputs("LL_SAFE(",f);
      425       425    5               }
      426       426    4               else if (safety == SAFESCANDONE) {
      427       427    5                  fputs("LL_SSCANDONE(",f);
      428       428    5               }
      429       429    4               else if (safety == SCANDONE) {
      430       430    5                  fputs("LL_SCANDONE(",f);
      431       431    5               }
      432       432    4               else /* if (safety == NOSCANDONE) */ {
      433       433    5                  fputs("LL_T_NOSCANDONE(", f);
      434       434    5               }
      435       435    4               if (t->t_tokno < 0400) s = "'%s');\n";
      436       436    4               else  s = "%s);\n";
      437       437    4               fprintf(f,s,t->t_string);
      438       438    4               if (safety <= SAFESCANDONE && toplevel > 0) {
      439       439    5                  safety = NOSCANDONE;
      440       440    5                  toplevel = -1;
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=13 
      441       441    5                  p++;
      442       442    5                  continue;
      443       443    5               }
      444       444    4               safety = NOSCANDONE;
      445       445    4               break; }
      446       446    3              case NONTERM : {
      447       447    4               register p_nont n = &nonterms[g_getnont(p)];
      448       448    4
      449       449    4               if (safety == NOSCANDONE &&
      450       450    4                   getntsafe(n) < NOSCANDONE) {
      451       451    5                  safety = getntsafe(n);
      452       452    5                  fputs(c_read, f);
      453       453    5               }
      454       454    4               if (toplevel == 0 &&
      455       455    4                   (g_gettype(n->n_rule) != ALTERNATION ||
      456       456    4                    getntsafe(n) <= SAFESCANDONE)) {
      457       457    5                  genpop(findindex(n->n_contains));
      458       458    5               }
      459       459    4               if (g_gettype(n->n_rule) == EORULE &&
      460       460    4                   safety <= getntout(n) &&
      461       461    4                   ! g_getnpar(p)) {
      462       462    5                  safety = getntout(n);
      463       463    5                  break;
      464       464    5               }
      465       465    4               fprintf(f,"L%d_%s(\n",g_getnont(p), n->n_name);
      466       466    4               if (g_getnpar(p)) {
      467       467    5                  controlline();
      468       468    5                  getaction(0);
      469       469    5               }
      470       470    4               fputs(");\n",f);
      471       471    4               safety = getntout(n);
      472       472    4               break; }
      473       473    3              case TERM :
      474       474    3               safety = codeforterm(&terms[g_getcont(p)],
      475       475    3                        safety,
      476       476    3                        toplevel);
      477       477    3               break;
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=14 
      478       478    3              case ACTION :
      479       479    3               getaction(1);
      480       480    3               p++;
      481       481    3               continue;
      482       482    3              case ALTERNATION :
      483       483    3               alternation(p, safety, mustscan, mustpop, 0);
      484       484    3               return;
      485       485    3            }
      486       486    2            p++;
      487       487    2            toplevel = 0;
      488       488    2         }
      489       489    1        }
      490       490
      491       491             STATIC
      492       492             alternation(p, safety, mustscan, mustpop, lb) register p_gram p; {
      493       493    1         register FILE *f = fpars;
      494       494    1         register p_link   l;
      495       495    1         int      hulp, hulp1,hulp2;
      496       496    1         int      haddefault = 0;
      497       497    1         int      unsafe = 1;
      498       498    1         int      nsafe;
      499       499    1         p_set    set;
      500       500    1         p_set    setalloc();
      501       501    1
      502       502    1         assert(safety < NOSCANDONE);
      503       503    1         l = &links[g_getcont(p)];
      504       504    1         hulp = nlabel++;
      505       505    1         hulp1 = nlabel++;
      506       506    1         hulp2 = nlabel++;
      507       507    1         if (!lb) lb = hulp1;
      508       508    1         if (!onerror && safety <= SAFESCANDONE) unsafe = 0;
      509       509    1         if (!unsafe) {
      510       510    2            genpop(mustpop);
      511       511    2            mustpop = NOPOP;
      512       512    2         }
      513       513    1         if (unsafe && hulp1 == lb) {
      514       514    2            fprintf(f,"L_%d: \n", hulp1);
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=15 
      515       515    2         }
      516       516    1         fputs("switch(LLcsymb) {\n", f);
      517       517    1         while (g_gettype(p) != EORULE) {
      518       518    2            l = &links[g_getcont(p)];
      519       519    2            if (unsafe && (l->l_flag & DEF)) {
      520       520    3               haddefault = 1;
      521       521    3               fprintf(f,
      522       522    3        "default: if (LLskip()) goto L_%d;\ngoto L_%d;\n",
      523       523    3               lb, hulp2);
      524       524    3            }
      525       525    2            if (l->l_flag & COND) {
      526       526    3               set = setalloc();
      527       527    3               setunion(set, l->l_others);
      528       528    3               setintersect(set, l->l_symbs);
      529       529    3               setminus(l->l_symbs, set);
      530       530    3               setminus(l->l_others, set);
      531       531    3               gencases(set);
      532       532    3               controlline();
      533       533    3               fputs("if (!",f);
      534       534    3               getaction(0);
      535       535    3               fprintf(f,") goto L_%d;\n", hulp);
      536       536    3            }
      537       537    2            if (!haddefault && (l->l_flag & DEF)) {
      538       538    3               haddefault = 1;
      539       539    3               fputs("default:\n", f);
      540       540    3            }
      541       541    2            else  gencases(l->l_symbs);
      542       542    2            nsafe = SAFE;
      543       543    2            if (l->l_flag & DEF) {
      544       544    3               if (unsafe) {
      545       545    4                  fprintf(f,"L_%d: ;\n", hulp2);
      546       546    4               }
      547       547    3               if (safety != SAFE) nsafe = SAFESCANDONE;
      548       548    3            }
      549       549    2            rulecode(l->l_rule, nsafe, mustscan, mustpop);
      550       550    2            fputs(c_break,f);
      551       551    2            if (l->l_flag & COND) {
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=16 
      552       552    3               p++;
      553       553    3               fprintf(f,"L_%d : ;\n",hulp);
      554       554    3               if (g_gettype(p+1) == EORULE) {
      555       555    4                  setminus(links[g_getcont(p)].l_symbs, set);
      556       556    4                  free((p_mem) set);
      557       557    4                  continue;
      558       558    4               }
      559       559    3               free((p_mem) set);
      560       560    3               if (!haddefault) {
      561       561    4                  fputs("default:\n", f);
      562       562    4               }
      563       563    3               else {
      564       564    4                  gencases(l->l_others);
      565       565    4                  safety = SAFE;
      566       566    4                  unsafe = 0;
      567       567    4               }
      568       568    3               if (! unsafe) {
      569       569    4                  genpop(mustpop);
      570       570    4                  mustpop = NOPOP;
      571       571    4               }
      572       572    3               alternation(p,safety,mustscan,mustpop,lb);
      573       573    3               break;
      574       574    3            }
      575       575    2            p++;
      576       576    2         }
      577       577    1         fputs(c_close, f);
      578       578    1        }
      579       579
      580       580             STATIC int *
      581       581             dopush(p,safety,toplevel,pp) register p_gram p; register int *pp; {
      582       582    1         /*
      583       583    1          * The safety only matters if toplevel != 0
      584       584    1          */
      585       585    1
      586       586    1         for (;;) {
      587       587    2            switch(g_gettype(p)) {
      588       588    3              case EORULE :
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=17 
      589       589    3              case ALTERNATION :
      590       590    3               return pp;
      591       591    3              case TERM : {
      592       592    4               register p_term q;
      593       593    4               int rep, cnt;
      594       594    4
      595       595    4               q = &terms[g_getcont(p)];
      596       596    4               rep = r_getkind(q);
      597       597    4               cnt = r_getnum(q);
      598       598    4               if (!(toplevel > 0 && safety <= SAFESCANDONE &&
      599       599    4                   (rep == OPT || (rep == FIXED && cnt == 0)))) {
      600       600    5                  *pp++ = findindex(q->t_contains);
      601       601    5               }
      602       602    4               break; }
      603       603    3              case LITERAL :
      604       604    3              case TERMINAL :
      605       605    3               if (toplevel > 0 && safety <= SAFESCANDONE) {
      606       606    4                  toplevel = -1;
      607       607    4                  p++;
      608       608    4                  safety = NOSCANDONE;
      609       609    4                  continue;
      610       610    4               }
      611       611    3               if (toplevel == 0) *pp++ = -(g_getcont(p)+1);
      612       612    3               break;
      613       613    3              case NONTERM : {
      614       614    4               register p_nont n;
      615       615    4
      616       616    4               n = &nonterms[g_getnont(p)];
      617       617    4               if (toplevel == 0 ||
      618       618    4                   (g_gettype(n->n_rule) == ALTERNATION &&
      619       619    4                    getntsafe(n) > SAFESCANDONE)) {
      620       620    5                  *pp++ = findindex(n->n_contains);
      621       621    5               }
      622       622    4               break; }
      623       623    3              case ACTION :
      624       624    3               p++;
      625       625    3               continue;
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=18 
      626       626    3            }
      627       627    2            toplevel = 0;
      628       628    2            safety = NOSCANDONE;
      629       629    2            p++;
      630       630    2         }
      631       631    1        }
      632       632
      633       633             # define max(a,b) ((a) < (b) ? (b) : (a))
      634       634
      635       635             STATIC
      636       636             getaction(flag) {
      637       637    1         /* Read an action from the action file.
      638       638    1          * flag = 1 if it is an action,
      639       639    1          * 0 when reading parameters
      640       640    1          */
      641       641    1         register int match,ch;
      642       642    1         register FILE *f;
      643       643    1         register int newline;
      644       644    1         int mark = 0;
      645       645    1
      646       646    1         if (flag == 1) {
      647       647    2            controlline();
      648       648    2         }
      649       649    1         f = fpars;
      650       650    1         newline = 0;
      651       651    1         for (;;) {
      652       652    2            ch = gettok();
      653       653    2            switch(ch) {
      654       654    3              case ENDDECL:
      655       655    3               if (flag != 2) break;
      656       656    3               ch = getc(fact);
      657       657    3               assert(ch == '\0');
      658       658    3               fputs("\n",f);
      659       659    3               if (mark) return;
      660       660    3               mark = 1;
      661       661    3               continue;
      662       662    3              case '\n':
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=19 
      663       663    3               newline = 1;
      664       664    3               break;
      665       665    3              case '\'' :
      666       666    3              case '"' :
      667       667    3               if (newline) {
      668       668    4                  newline = 0;
      669       669    4               }
      670       670    3               match = ch;
      671       671    3               for (;;) {
      672       672    4                  putc(ch,f);
      673       673    4                  ch = getc(fact);
      674       674    4                  if (ch == match || !ch) break;
      675       675    4                  if (ch == '\\') {
      676       676    5                     putc(ch,f);
      677       677    5                     ch = getc(fact);
      678       678    5                  }
      679       679    4               }
      680       680    3               break;
      681       681    3              case IDENT :
      682       682    3               if (newline) {
      683       683    4                  newline = 0;
      684       684    4               }
      685       685    3               fputs(ltext,f);
      686       686    3               continue;
      687       687    3            }
      688       688    2            mark = 0;
      689       689    2            if (ch == ENDDECL) break;
      690       690    2            if (newline && ch != '\n') {
      691       691    3               newline = 0;
      692       692    3            }
      693       693    2            putc(ch,f);
      694       694    2         }
      695       695    1         if (flag) fputs("\n",f);
      696       696    1        }
      697       697
      698       698             STATIC
      699       699             codeforterm(q,safety,toplevel) register p_term q; {
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=20 
      700       700    1         /*
      701       701    1          * Generate code for a term
      702       702    1          */
      703       703    1         register FILE  *f;
      704       704    1         register int   i;
      705       705    1         register int   rep;
      706       706    1         int      persistent;
      707       707    1         int      ispushed;
      708       708    1         int      sw = SAFE;
      709       709    1
      710       710    1         f = fpars;
      711       711    1         i = r_getnum(q);
      712       712    1         rep = r_getkind(q);
      713       713    1         persistent = (q->t_flags & PERSISTENT);
      714       714    1         ispushed = NOPOP;
      715       715    1         if (!(toplevel > 0 &&
      716       716    1               (safety == 0 || (!onerror && safety <= SAFESCANDONE)) &&
      717       717    1             (rep == OPT || (rep == FIXED && i == 0)))) {
      718       718    2            ispushed = findindex(q->t_contains);
      719       719    2         }
      720       720    1         if (safety == NOSCANDONE && (rep != FIXED || i == 0 ||
      721       721    1             gettout(q) != NOSCANDONE)) {
      722       722    2            fputs(c_read, f);
      723       723    2            safety = SCANDONE;
      724       724    2         }
      725       725    1         if (rep == PLUS && !persistent) {
      726       726    2            int temp;
      727       727    2
      728       728    2            temp = findindex(q->t_first);
      729       729    2            if (temp != ispushed) {
      730       730    3               genpop(ispushed);
      731       731    3               ispushed = temp;
      732       732    3               genpush(temp);
      733       733    3            }
      734       734    2         }
      735       735    1         if (i) {
      736       736    2            /* N > 0, so generate fixed forloop */
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=21 
      737       737    2            fputs("{\nregister LL_i;\n", f);
      738       738    2            assert(ispushed != NOPOP);
      739       739    2            fprintf(f, "for (LL_i = %d; LL_i >= 0; LL_i--) {\n", i - 1);
      740       740    2            if (rep == FIXED) {
      741       741    3               fputs("if (!LL_i) ", f);
      742       742    3               genpop(ispushed);
      743       743    3               genpush(ispushed);
      744       744    3               if (safety == NOSCANDONE) {
      745       745    4                  assert(gettout(q) == NOSCANDONE);
      746       746    4                  fputs(c_read, f);
      747       747    4               }
      748       748    3            }
      749       749    2         }
      750       750    1         else if (rep != OPT && rep != FIXED) {
      751       751    2            /* '+' or '*', so generate infinite loop */
      752       752    2            fputs("for (;;) {\n",f);
      753       753    2         }
      754       754    1         else if (rep == OPT &&
      755       755    1             (safety == 0 || (!onerror && safety <= SAFESCANDONE))) {
      756       756    2            genpop(ispushed);
      757       757    2            ispushed = NOPOP;
      758       758    2         }
      759       759    1         if (rep == STAR || rep == OPT) {
      760       760    2            sw = genswhead(q, rep, i, safety, ispushed);
      761       761    2         }
      762       762    1         rulecode(q->t_rule,
      763       763    1             t_safety(rep,i,persistent,safety),
      764       764    1             gettout(q) != NOSCANDONE,
      765       765    1             rep == FIXED ? ispushed : NOPOP);
      766       766    1         if (gettout(q) == NOSCANDONE && rep != FIXED) {
      767       767    2            fputs(c_read, f);
      768       768    2         }
      769       769    1         /* in the case of '+', the if is after the code for the rule */
      770       770    1         if (rep == PLUS) {
      771       771    2            if (i) {
      772       772    3               fputs("if (!LL_i) break;\n", f);
      773       773    3            }
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=22 
      774       774    2            sw = genswhead(q, rep, i, safety, ispushed);
      775       775    2         }
      776       776    1         if (rep != OPT && rep != FIXED) fputs("continue;\n", f);
      777       777    1         if (rep != FIXED) {
      778       778    2            fputs(c_close, f); /* Close switch */
      779       779    2            if (rep != OPT) {
      780       780    3               genpop(ispushed);
      781       781    3               fputs(c_break, f);
      782       782    3            }
      783       783    2         }
      784       784    1         if (rep != OPT && (rep != FIXED || i > 0)) {
      785       785    2            fputs(c_close, f);   /* Close for */
      786       786    2            if (i > 0) {
      787       787    3               fputs(c_close, f);/* Close Register ... */
      788       788    3            }
      789       789    2         }
      790       790    1         return t_after(rep, i, gettout(q));
      791       791    1        }
      792       792
      793       793             STATIC
      794       794             genswhead(q, rep, cnt, safety, ispushed) register p_term q; {
      795       795    1         /*
      796       796    1          * Generate switch statement for term q
      797       797    1          */
      798       798    1         register FILE  *f;
      799       799    1         p_set    p1;
      800       800    1         p_set    setalloc();
      801       801    1         int      hulp1, hulp2;
      802       802    1         int      safeterm;
      803       803    1         int      termissafe = 0;
      804       804    1
      805       805    1         f = fpars;
      806       806    1         if (rep == PLUS) safeterm = gettout(q);
      807       807    1         else if (rep == OPT) safeterm = safety;
      808       808    1         else /* if (rep == STAR) */ safeterm = max(safety, gettout(q));
      809       809    1         hulp2 = nlabel++;
      810       810    1         fprintf(f, "L_%d : ", hulp2);
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=23 
      811       811    1         fputs("switch(LLcsymb) {\n", f);
      812       812    1         if (q->t_flags & RESOLVER) {
      813       813    2            hulp1 = nlabel++;
      814       814    2            p1 = setalloc();
      815       815    2            setunion(p1,q->t_first);
      816       816    2            setintersect(p1,q->t_follow);
      817       817    2            /*
      818       818    2             * p1 now points to a set containing the conflicting
      819       819    2             * symbols
      820       820    2             */
      821       821    2            setminus(q->t_first, p1);
      822       822    2            setminus(q->t_follow, p1);
      823       823    2            setminus(q->t_contains, p1);
      824       824    2            gencases(p1);
      825       825    2            free((p_mem) p1);
      826       826    2            controlline();
      827       827    2            fputs("if (", f);
      828       828    2            getaction(0);
      829       829    2            fprintf(f, ") goto L_%d;\n", hulp1);
      830       830    2         }
      831       831    1         if (safeterm == 0 || (!onerror && safeterm <= SAFESCANDONE)) {
      832       832    2            fputs("default:\n", f);
      833       833    2            termissafe = 1;
      834       834    2         }
      835       835    1         else  gencases(q->t_follow);
      836       836    1         if (rep == OPT) genpop(ispushed);
      837       837    1         fputs(c_break, f);
      838       838    1         if (! termissafe) {
      839       839    2            int i;
      840       840    2            static int nvar;
      841       841    2
      842       842    2            assert(ispushed != NOPOP);
      843       843    2            if (ispushed >= 0) i = -ispushed;
      844       844    2            else i = tokens[-(ispushed+1)].t_tokno;
      845       845    2            ++nvar;
      846       846    2            fprintf(f,"default:{int LL_%d=LLnext(%d);\n;if (!LL_%d) {\n",
      847       847    2               nvar, i, nvar);
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=24 
      848       848    2            if (rep == OPT) genpop(ispushed);
      849       849    2            fputs(c_break, f);
      850       850    2            fputs(c_close, f);
      851       851    2            fprintf(f,"else if (LL_%d & 1) goto L_%d;}\n",nvar, hulp2);
      852       852    2         }
      853       853    1         if (!onerror && (q->t_flags & PERSISTENT) && safeterm != SAFE) {
      854       854    2            gencases(q->t_contains);
      855       855    2         }
      856       856    1         else  gencases(q->t_first);
      857       857    1         if (q->t_flags & RESOLVER) {
      858       858    2            fprintf(f, "L_%d : ;\n", hulp1);
      859       859    2         }
      860       860    1         if (rep == OPT) genpop(ispushed);
      861       861    1         if (cnt > 0) {
      862       862    2            assert(ispushed != NOPOP);
      863       863    2            fputs(rep == STAR ? "if (!LL_i) " : "if (LL_i == 1) ", f);
      864       864    2            genpop(ispushed);
      865       865    2         }
      866       866    1         return safeterm;
      867       867    1        }
      868       868
      869       869             STATIC
      870       870             gencases(setp) register p_set setp; {
      871       871    1         /*
      872       872    1          * setp points to a bitset indicating which cases must
      873       873    1          * be generated.
      874       874    1          * YECH, the PCC compiler does not accept many cases without statements
      875       875    1          * inbetween, so after every case label an empty statement is
      876       876    1          * generated.
      877       877    1          * The C-grammar used by PCC is really stupid on this point :
      878       878    1          * it contains the rule
      879       879    1          *    statement : label statement
      880       880    1          * which is right-recursive, and as is well known, LALR parsers don't
      881       881    1          * handle these things very good.
      882       882    1          * The grammar should have been written :
      883       883    1          *    labeledstatement : labels statement ;
      884       884    1          * labels : labels label | ;
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=25 
      885       885    1          */
      886       886    1         register p_token p;
      887       887    1         register int i;
      888       888    1
      889       889    1         for (i = 0, p = tokens; i < ntokens; i++, p++) {
      890       890    2            if (IN(setp,i)) {
      891       891    3               fprintf(fpars,
      892       892    3                  p->t_tokno<0400 ? "case /* '%s' */ %d : ;\n"
      893       893    3                           : "case /*  %s  */ %d : ;\n",
      894       894    3                  p->t_string, i);
      895       895    3            }
      896       896    2         }
      897       897    1        }
      898       898
      899       899             static char namebuf[41];
      900       900
      901       901             STATIC string
      902       902             genname(s) string s; {
      903       903    1         /*
      904       904    1          * Generate a target file name from the
      905       905    1          * source file name s.
      906       906    1          */
      907       907    1         register string c,d;
      908       908    1
      909       909    1         c = namebuf;
      910       910    1         while (*s) {
      911       911    2            if (*s == '.') break;
      912       912    2            *c++ = *s++;
      913       913    2         }
      914       914    1         for (d = c; --d > namebuf;) if (*d == ':') break;
      915       915    1         if (d == namebuf) d = c;
      916       916    1         if (d >= &namebuf[27]) {
      917       917    2            fatal(0,"%s : generated filename too long",namebuf);
      918       918    2         }
      919       919    1         *d++ = ':';
      920       920    1         *d++ = 'c';
      921       921    1         *d++ = '.';
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=26 
      922       922    1         *d = '\0';
      923       923    1         if (f_aacct) strcat(namebuf,f_aacct);
      924       924    1         return namebuf;
      925       925    1        }
      926       926
      927       927             STATIC
      928       928             genpush(d) {
      929       929    1         genincrdecr("incr", d);
      930       930    1        }
      931       931
      932       932             STATIC
      933       933             genincrdecr(s, d) string s; {
      934       934    1         if (d == NOPOP) return;
      935       935    1         if (d >= 0) {
      936       936    2            fprintf(fpars, "LLs%s(%d);\n", s,  d / nbytes);
      937       937    2            return;
      938       938    2         }
      939       939    1         fprintf(fpars, "LLt%s(%d);\n", s, -(d + 1));
      940       940    1        }
      941       941
      942       942             STATIC
      943       943             genpop(d) {
      944       944    1         genincrdecr("decr", d);
      945       945    1        }
      946       946
      947       947             STATIC string
      948       948             genintfname(s) string s;   {
      949       949    1        register string c;
      950       950    1          c = s;
      951       951    1          if (f_aacct)   {
      952       952    2             c = namebuf;
      953       953    2             strcpy(c,s);
      954       954    2             strcat(c,".");
      955       955    2             strcat(c,f_aacct);
      956       956    2          }
      957       957    1          return c;
      958       958    1        }
CC.C03    File=zbl$gencode:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=27 
      959       959
---  Include file information  ---

   zbl$types:h.:ZBC3TOU. is referenced
   zbl$io:h.:ZBC3TOU. is referenced
   stdio:h.:LIB_E05. is referenced
   zbl$extern:h.:ZBC3TOU. is referenced
   zbl$sets:h.:ZBC3TOU. is referenced
   zbl$assert:h.:ZBC3TOU. is referenced
   zbl$cclass:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbl$gencode:c.:ZBC3TSI
