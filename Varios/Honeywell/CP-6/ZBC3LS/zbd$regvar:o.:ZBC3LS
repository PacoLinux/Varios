

CC.C03    File=zbg$regvar:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             #include "assert:h"
        2         2             #include "param:h"
        3         3             #include "tables:h"
        4         4
        5         5             #ifdef REGVARS
        6         6
        7         7             #ifndef NORCSID
        8         8             static char rcsid[] = "$Header: regvar.c,v 0.3 87/03/10 01:03:24 ceriel Exp $"
                               ;
        9         9             #endif
       10        10
       11        11             #include "types:h"
       12        12             #include <cgg_cg:h>
       13        13             #include "data:h"
       14        14             #include "regvar:h"
       15        15             #include <em_reg:h>
       16        16             #include "result:h"
       17        17             #include "extern:h"
       18        18
       19        19             /*
       20        20              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
       21        21              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
       22        22              *
       23        23              * Author: Hans van Staveren
       24        24              */
       25        25             extern string myalloc();
       26        26             struct regvar *rvlist = 0;
       27        27
       28        28             struct regvar *
       29        29             linkreg(of,sz,tp,sc) long of; {
       30        30    1         register struct regvar *rvlp;
       31        31    1
       32        32    1         rvlp= (struct regvar *) myalloc(sizeof *rvlp);
       33        33    1         rvlp->rv_next = rvlist;
       34        34    1         rvlist=rvlp;
       35        35    1         rvlp->rv_off   = of;
CC.C03    File=zbg$regvar:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       36        36    1         rvlp->rv_size  = sz;
       37        37    1         rvlp->rv_type  = tp;
       38        38    1         rvlp->rv_score = sc;
       39        39    1         rvlp->rv_reg   = 0;  /* no register assigned yet */
       40        40    1         return(rvlp);
       41        41    1        }
       42        42
       43        43             tryreg(rvlp,typ) register struct regvar *rvlp; {
       44        44    1         int score;
       45        45    1         register i;
       46        46    1         register struct regassigned *ra;
       47        47    1         struct regvar *save;
       48        48    1         extern struct regvar *TrueZero;
       49        49    1
       50        50    1         if (typ != reg_any && nregvar[typ]!=0) {
       51        51    2            if (machregs[rvnumbers[typ][0]].r_size!=rvlp->rv_size)
       52        52    2               score = -1;
       53        53    2            else
       54        54    2               score = regscore(rvlp->rv_off,
       55        55    2                      rvlp->rv_size,
       56        56    2                      rvlp->rv_type,
       57        57    2                      rvlp->rv_score,
       58        58    2                      typ);   /* machine dependent */
       59        59    2            ra = regassigned[typ];
"zbg$regvar:c.:ZBC3TSI", line 59: (warning) incompatible pointers in =
       60        60    2            if (score>ra[nregvar[typ]-1].ra_score) {
       61        61    3               save = ra[nregvar[typ]-1].ra_rv;
       62        62    3               if (save == TrueZero) {
       63        63    4                  save = 0;
       64        64    4                  ra[nregvar[typ]-1].ra_rv = 0;
       65        65    4               }
       66        66    3               for (i=nregvar[typ]-1;i>0 && ra[i-1].ra_score<score;i--)
       67        67    3                  ra[i] = ra[i-1];
       68        68    3               ra[i].ra_rv = rvlp;
       69        69    3               ra[i].ra_score = score;
       70        70    3               if((rvlp=save)==0)
       71        71    3                  return;
CC.C03    File=zbg$regvar:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       72        72    3            }
       73        73    2         }
       74        74    1         if (nregvar[reg_any]==0)
       75        75    1            return;
       76        76    1         if (machregs[rvnumbers[reg_any][0]].r_size!=rvlp->rv_size)
       77        77    1            score = -1;
       78        78    1         else
       79        79    1            score = regscore(rvlp->rv_off,
       80        80    1                   rvlp->rv_size,
       81        81    1                   rvlp->rv_type,
       82        82    1                   rvlp->rv_score,
       83        83    1                   reg_any);  /* machine dependent */
       84        84    1         ra = regassigned[reg_any];
"zbg$regvar:c.:ZBC3TSI", line 84: (warning) incompatible pointers in =
       85        85    1         if (score>ra[nregvar[reg_any]-1].ra_score) {
       86        86    2            for (i=nregvar[reg_any]-1;i>0 && ra[i-1].ra_score<score;i--)
       87        87    2               ra[i] = ra[i-1];
       88        88    2            ra[i].ra_rv = rvlp;
       89        89    2            ra[i].ra_score = score;
       90        90    2         }
       91        91    1        }
       92        92
       93        93             fixregvars(saveall) {
       94        94    1         register struct regvar *rv;
       95        95    1         register rvtyp,i;
       96        96    1
       97        97    1         swtxt();
       98        98    1         i_regsave();   /* machine dependent initialization */
       99        99    1         for (rvtyp=reg_any;rvtyp<=reg_float;rvtyp++) {
      100       100    2             for(i=0;i<nregvar[rvtyp];i++)
      101       101    2            if (saveall) {
      102       102    3               struct reginfo *rp;
      103       103    3               rp= &machregs[rvnumbers[rvtyp][i]];
      104       104    3               regsave(codestrings[rp->r_repr],(long)-TEM_WSIZE,rp->r_size);
      105       105    3            } else if(regassigned[rvtyp][i].ra_score>0) {
      106       106    3               rv=regassigned[rvtyp][i].ra_rv;
      107       107    3               rv->rv_reg=rvnumbers[rvtyp][i];
CC.C03    File=zbg$regvar:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      108       108    3               rv->rv_type = rvtyp;
      109       109    3               regsave(codestrings[machregs[rv->rv_reg].r_repr],
      110       110    3                      rv->rv_off,rv->rv_size);
      111       111    3            }
      112       112    2         }
      113       113    1         f_regsave();
      114       114    1        }
      115       115
      116       116             isregvar(off) long off; {
      117       117    1         register struct regvar *rvlp;
      118       118    1
      119       119    1         for(rvlp=rvlist;rvlp!=0;rvlp=rvlp->rv_next)
      120       120    1            if(rvlp->rv_off == off)
      121       121    1               return(rvlp->rv_reg);
      122       122    1         return(-1);
      123       123    1        }
      124       124
      125       125             isregtyp(off) long off; {
      126       126    1         register struct regvar *rvlp;
      127       127    1
      128       128    1         for(rvlp=rvlist;rvlp!=0;rvlp=rvlp->rv_next)
      129       129    1            if(rvlp->rv_off == off)
      130       130    1               return(rvlp->rv_reg ? rvlp->rv_type+1 : 0);
      131       131    1         return(-1);
      132       132    1        }
      133       133
      134       134             unlinkregs() {
      135       135    1         register struct regvar *rvlp,*t;
      136       136    1         register struct regassigned *ra;
      137       137    1         int rvtyp,i;
      138       138    1
      139       139    1         for(rvlp=rvlist;rvlp!=0;rvlp=t) {
      140       140    2            t=rvlp->rv_next;
      141       141    2            myfree(rvlp);
      142       142    2         }
      143       143    1         rvlist=0;
      144       144    1         for (rvtyp=reg_any;rvtyp<=reg_float;rvtyp++) {
CC.C03    File=zbg$regvar:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      145       145    2             for(i=0;i<nregvar[rvtyp];i++) {
      146       146    3            ra= &regassigned[rvtyp][i];
"zbg$regvar:c.:ZBC3TSI", line 146: (warning) incompatible pointers in =
      147       147    3            ra->ra_rv = 0;
      148       148    3            ra->ra_score = 0;
      149       149    3             }
      150       150    2         }
      151       151    1        }
      152       152
      153       153             #endif REGVARS
      154       154
      155       155             /* nothing after this */
      156       156
---  Include file information  ---

   zbg$assert:h.:ZBC3TOU. is referenced
   zbg$param:h.:ZBC3TOU. is referenced
   tables:h.:ZBC3TOU. is referenced
   zbg$types:h.:ZBC3TOU. is referenced
   cgg_cg:h.:ZBC3TOU. is referenced
   zbg$data:h.:ZBC3TOU. is referenced
   zbg$regvar:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   zbg$result:h.:ZBC3TOU. is referenced
   zbg$extern:h.:ZBC3TOU. is referenced

3 warnings were detected in the file zbg$regvar:c.:ZBC3TSI
