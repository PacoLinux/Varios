

10:58 AUG 20 '97 zbm$idf$idf_pkg:body.:ZBC3TSI                             1    
    1      /*  SYMBOL TABLE HANDLING   */
    2
    3      #include <alloc:h>
    4
    5      /*  Each character of the identifier is xored with an 8-bit mask which
    6       depends on the position of the character; the sum of these results
    7       is the hash value.  The random masks are obtained from a
    8       congruence generator.
    9      */
   10
   11      #define   HASHSIZE 256   /* size of hashtable, must be a power of 2 */
   12      #ifndef IDF_HSIZE
   13      #define IDF_HSIZE  64 /* # of significant characters for hashing.
   14                   This is NOT the number of significant
   15                   characters!
   16                */
   17      #endif
   18      #define   HASH_X      0253  /* Knuth's X */
   19      #define   HASH_A      77 /* Knuth's a */
   20      #define   HASH_C      153   /* Knuth's c */
   21
   22      #define   HASHMASK    (HASHSIZE-1)   /* since it is a power of 2 */
   23      #define   STARTHASH()    (0)
   24      #define   ENHASH(hs,ch,hm)  (hs + (ch ^ hm))
   25      #define   STOPHASH(hs)      (hs & HASHMASK)
   26
   27      static char hmask[IDF_HSIZE];
   28
   29      static struct idf *id_hashtable[HASHSIZE] = {
   30        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   31        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   32        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   33        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   34        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   35        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   36        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
   37        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
10:58 AUG 20 '97 zbm$idf$idf_pkg:body.:ZBC3TSI                             2    
   38       /* All identifiers can in principle be reached through
   39          id_hashtable; id_hashtable[hc] is the start of a chain of
   40          idf's whose tags all hash to hc.
   41          Any identifier is entered into this
   42          list, regardless of the nature of its declaration
   43          (variable, selector, structure tag, etc.).
   44       */
   45
   46      static struct idf *
   47      new_idf(tg, size, cpy)
   48       register char *tg;
   49       register int size;
   50      {
   51       static int nidf;
   52       static struct idf *pidf;
   53      #define NIDS 50
   54      #define IBUFSIZ 2048
   55       static unsigned int icnt;
   56       static char *ip;
   57       register char *p;
   58
   59
   60       if (! nidf--) {
   61          nidf += NIDS;
   62          pidf = (struct idf *) Malloc(NIDS * sizeof (struct idf));
   63          clear((char *) pidf, NIDS * sizeof(struct idf));
   64       }
   65
   66       if (cpy) {
   67          if (size > icnt) {
   68             icnt =  size > IBUFSIZ ? size : IBUFSIZ;
   69             p = Malloc(icnt);
   70          }
   71          else p = ip;
   72          icnt -= size;
   73          pidf->id_text = p;
   74           pidf->next = 0;
10:58 AUG 20 '97 zbm$idf$idf_pkg:body.:ZBC3TSI                             3    
   75          while (size--) {
   76             *p++ = *tg++;
   77          }
   78          ip = p;
   79       }
   80       else  pidf->id_text = tg;
   81       return pidf++;
   82      }
   83
   84      #ifdef DEBUG
   85      hash_stat()
   86      {
   87       register int i;
   88
   89       print("Hash table tally:\n");
   90       for (i = 0; i < HASHSIZE; i++)   {
   91          register struct idf *notch = id_hashtable[i];
   92          register int cnt = 0;
   93
   94          while (notch)  {
   95             cnt++;
   96             notch = notch->next;
   97          }
   98          print("%d %d\n", i, cnt);
   99       }
  100       print("End hash table tally\n");
  101      }
  102      #endif DEBUG
  103
  104      struct idf *
  105      str2idf(tg, cpy)
  106       char tg[];
  107      {
  108       /* str2idf() returns an entry in the symbol table for the
  109          identifier tg.  If necessary, an entry is created.
  110       */
  111       register char *cp = tg;
10:58 AUG 20 '97 zbm$idf$idf_pkg:body.:ZBC3TSI                             4    
  112       register char *phm = &hmask[0];
  113       struct idf **hook;
  114       register struct idf *notch;
  115       register int hash;
  116       int size;
  117
  118       hash = STARTHASH();
  119       while (*cp && phm < &hmask[IDF_HSIZE]) {
  120          hash = ENHASH(hash, *cp++, *phm++);
  121       }
  122       hash = STOPHASH(hash);
  123       while (*cp++) /* nothing. Find end of string */ ;
  124       size = cp - tg;
  125
  126       /* The tag tg with length size and known hash value hash is
  127          looked up in the identifier table; if not found, it is
  128          entered if cpy >= 0. A pointer to it is returned.
  129          Notice that the chains of idf's are sorted alphabetically.
  130       */
  131       hook = &id_hashtable[hash];
  132
  133       while ((notch = *hook)) {
  134          register char *s1 = tg;
  135          int cmp;
  136
  137          cp = notch->id_text;
  138
  139          while (!(cmp = (*s1 - *cp++))) {
  140             if (*s1++ == '\0') {
  141                break;
  142             }
  143          }
  144
  145          if (cmp == 0) return notch;
  146          if (cmp < 0) break;
  147          hook = &notch->next;
  148       }
10:58 AUG 20 '97 zbm$idf$idf_pkg:body.:ZBC3TSI                             5    
  149       /* a new struct idf must be inserted at the hook */
  150       if (cpy < 0) return 0;
  151       notch = new_idf(tg, size, cpy);
  152       notch->next = *hook;
  153       *hook = notch;    /* hooked in */
  154       return notch;
  155      }
  156
  157      init_idf()   {
  158       /* A simple congruence random number generator, as
  159          described in Knuth, vol 2.
  160       */
  161       int rnd = HASH_X;
  162       register char *phm;
  163
  164       for (phm = &hmask[0]; phm < &hmask[IDF_HSIZE];) {
  165          *phm++ = rnd;
  166          rnd = (HASH_A * rnd + HASH_C) & HASHMASK;
  167       }
  168      }
  169

