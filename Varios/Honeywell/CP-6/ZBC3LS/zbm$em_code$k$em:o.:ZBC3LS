

CC.C03    File=zbm$em_code$k$em:c.:ZBC3TSI                                          Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: em.c,v 1.4 87/03/09 14:33:39 ceriel Exp $ */
        6         6             /* EM CODE OUTPUT ROUTINES */
        7         7
        8         8             #include <system:h>
        9         9             #include "em_private:h"
       10        10
       11        11             #define   put8(x)     putbyte(x)
       12        12             #ifdef TM_L66
       13        13             #define   put16(x) put8((int) x); put8((int) (x >> 9))
       14        14             #define   put32(x) put16((int) x); put16((int) (x >> 18))
       15        15             #else
       16        16   *S*       #define   put16(x) put8((int) x); put8((int) (x >> 8))
       17        17   *S*       #define   put32(x) put16((int) x); put16((int) (x >> 16))
       18        18   *S*       #endif
       19        19
       20        20             /*
       21        21              putbyte(), C_open() and C_close() are the basic routines for
       22        22              respectively write on, open and close the output file.
       23        23              The put_*() functions serve as formatting functions of the
       24        24              various EM language constructs.
       25        25              See "Description of a Machine Architecture for use with
       26        26              Block Structured Languages" par. 11.2 for the meaning of these
       27        27              names.
       28        28             */
       29        29
       30        30             /* supply a kind of buffered output */
       31        31
       32        32             static char obuf[4] [BUFSIZ];
       33        33             static char *opp[] = {obuf[0], obuf[1], obuf[2], obuf[3]};
       34        34             static char *ope[] = {obuf[0], obuf[1], obuf[2], obuf[3], obuf[4]};
       35        35             static File *ofp[4] = {0, 0, 0, 0};
       36        36             int EM_File_No = 0;
CC.C03    File=zbm$em_code$k$em:c.:ZBC3TSI                                          Fri Aug 22 1997  Page=2  
       37        37             int em_binary_option = OP_BIN;
       38        38
       39        39             static
       40        40             flush() {
       41        41    1         if (sys_write(ofp[EM_File_No], ope[EM_File_No], opp[EM_File_No] - ope[EM_File
                               _No]) == 0) {
       42        42    2            C_failed();
       43        43    2         }
       44        44    1         opp[EM_File_No] = ope[EM_File_No];
       45        45    1        }
       46        46
       47        47             #define Xputbyte(c)   if (opp[EM_File_No] >= ope[EM_File_No+1]) flush();*opp[E
                               M_File_No]++ = (c)
       48        48
       49        49             putbyte(b)
       50        50              int b;
       51        51             {
       52        52    1         Xputbyte(b);
       53        53    1        }
       54        54
       55        55             #define putbyte(c) Xputbyte(c)
       56        56
       57        57             C_init(w, p)
       58        58              arith w, p;
"zbm$em_code$k$em:c.:ZBC3TSI", line 58: (warning) identifier "w" is not used
"zbm$em_code$k$em:c.:ZBC3TSI", line 58: (warning) identifier "p" is not used
       59        59             {
       60        60    1        }
       61        61
       62        62             C_open(nm)   /* open file for compact code output   */
       63        63              char *nm;
       64        64             {
       65        65    1         if (nm == 0)
       66        66    1            ofp[EM_File_No] = STDOUT;  /* standard output   */
       67        67    1         else
       68        68    1         if (sys_open(nm, OP_WRITE+OP_BIN, &ofp[EM_File_No]) == 0)
       69        69    1            return 0;
CC.C03    File=zbm$em_code$k$em:c.:ZBC3TSI                                          Fri Aug 22 1997  Page=3  
       70        70    1         return 1;
       71        71    1        }
       72        72
       73        73             C_close()
       74        74             {
       75        75    1         if (opp[EM_File_No] != ope[EM_File_No]) flush();
       76        76    1         if (ofp[EM_File_No] != STDOUT)
       77        77    1            sys_close(ofp[EM_File_No]);
       78        78    1         ofp[EM_File_No] = 0;
       79        79    1        }
       80        80
       81        81             C_busy()
       82        82             {
       83        83    1         return ofp[0] != 0; /* true if code is being generated */
       84        84    1        }
       85        85
       86        86             C_magic()
       87        87             {
       88        88    1         put16(sp_magic);
       89        89    1        }
       90        90
       91        91             /***    the compact code generating routines  ***/
       92        92             #ifdef TM_L66
       93        93             #define   fit16i(x)   ((x) >= (long)0777777400000 && (x) <= (long)000000037777
                               7)
       94        94             #define   fit8u(x) ((x) <= 0777)     /* x is already unsigned */
       95        95             #else
       96        96   *S*       #define   fit16i(x)   ((x) >= (long)0xFFFF8000 && (x) <= (long)0x00007FFF)
       97        97   *S*       #define   fit8u(x) ((x) <= 0xFF)     /* x is already unsigned */
       98        98   *S*       #endif
       99        99
      100       100             put_ilb(l)
      101       101              register label l;
      102       102             {
      103       103    1         if (fit8u(l))  {
      104       104    2            put8(sp_ilb1);
      105       105    2            put8(l);
CC.C03    File=zbm$em_code$k$em:c.:ZBC3TSI                                          Fri Aug 22 1997  Page=4  
      106       106    2         }
      107       107    1         else  {
      108       108    2            put8(sp_ilb2);
      109       109    2            put16(l);
      110       110    2         }
      111       111    1        }
      112       112
      113       113             put_dlb(l)
      114       114              register label l;
      115       115             {
      116       116    1         if (fit8u(l))  {
      117       117    2            put8(sp_dlb1);
      118       118    2            put8(l);
      119       119    2         }
      120       120    1         else  {
      121       121    2            put8(sp_dlb2);
      122       122    2            put16((int)l);
      123       123    2         }
      124       124    1        }
      125       125
      126       126             put_cst(l)
      127       127              register arith l;
      128       128             {
      129       129    1         if (l >= (arith) -sp_zcst0 && l < (arith) (sp_ncst0 - sp_zcst0)) {
      130       130    2            /* we can convert 'l' to an int because its value
      131       131    2               can be stored in a byte.
      132       132    2            */
      133       133    2            put8((int)l + (sp_zcst0 + sp_fcst0));
      134       134    2         }
      135       135    1         else
      136       136    1         if (fit16i(l)) { /* the cast from long to int causes no trouble here */
      137       137    2            put8(sp_cst2);
      138       138    2            put16((int) l);
      139       139    2         }
      140       140    1         else  {
      141       141    2            put8(sp_cst4);
      142       142    2            put32(l);
CC.C03    File=zbm$em_code$k$em:c.:ZBC3TSI                                          Fri Aug 22 1997  Page=5  
      143       143    2         }
      144       144    1        }
      145       145
      146       146             put_doff(l, v)
      147       147              label l;
      148       148              arith v;
      149       149             {
      150       150    1         if (v == 0) {
      151       151    2            put_dlb(l);
      152       152    2         }
      153       153    1         else  {
      154       154    2            put8(sp_doff);
      155       155    2            put_dlb(l);
      156       156    2            put_cst(v);
      157       157    2         }
      158       158    1        }
      159       159
      160       160             put_noff(s, v)
      161       161              char *s;
      162       162              arith v;
      163       163             {
      164       164    1         if (v == 0) {
      165       165    2            put_dnam(s);
      166       166    2         }
      167       167    1         else  {
      168       168    2            put8(sp_doff);
      169       169    2            put_dnam(s);
      170       170    2            put_cst(v);
      171       171    2         }
      172       172    1        }
      173       173
      174       174             put_dnam(s)
      175       175              char *s;
      176       176             {
      177       177    1         put8(sp_dnam);
      178       178    1         put_str(s);
      179       179    1        }
CC.C03    File=zbm$em_code$k$em:c.:ZBC3TSI                                          Fri Aug 22 1997  Page=6  
      180       180
      181       181             put_pnam(s)
      182       182              char *s;
      183       183             {
      184       184    1         put8(sp_pnam);
      185       185    1         put_str(s);
      186       186    1        }
      187       187
      188       188             put_wcon(sp, v, sz)   /* sp_icon, sp_ucon or sp_fcon with int repr */
      189       189              int sp;
      190       190              char *v;
      191       191              arith sz;
      192       192             {
      193       193    1         /* how 'bout signextension int --> long ???  */
      194       194    1         put8(sp);
      195       195    1         put_cst(sz);
      196       196    1         put_str(v);
      197       197    1        }
      198       198
      199       199             put_str(s)
      200       200              register char *s;
      201       201             {
      202       202    1         register int len;
      203       203    1
      204       204    1         put_cst((arith) (len = strlen(s)));
      205       205    1         while (--len >= 0) {
      206       206    2            put8(*s++);
      207       207    2         }
      208       208    1        }
      209       209
      210       210             put_scon(b, n)
      211       211              register char *b;
      212       212              register arith n;
      213       213             {
      214       214    1         put8(sp_scon);
      215       215    1         put_cst(n);
      216       216    1         while (--n >= 0) {
CC.C03    File=zbm$em_code$k$em:c.:ZBC3TSI                                          Fri Aug 22 1997  Page=7  
      217       217    2            put8(*b++);
      218       218    2         }
      219       219    1        }
      220       220
---  Include file information  ---

   system:h.:ZBC3TOU. is referenced
   zbm$em$k$em_private:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   em_code:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbm$em_code$k$em:c.:ZBC3TSI
