

CC.C03    File=zbl$sets:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              *
        5         5              */
        6         6
        7         7             /*
        8         8              *  L L G E N
        9         9              *
       10        10              *  An Extended LL(1) Parser Generator
       11        11              *
       12        12              *  Author : Ceriel J.H. Jacobs
       13        13              */
       14        14
       15        15             /*
       16        16              * sets.c
       17        17              * Set manipulation and allocation routines.
       18        18              */
       19        19
       20        20             # include "types:h"
       21        21             # include "extern:h"
       22        22             # include "sets:h"
       23        23             # include "assert:h"
       24        24
       25        25             # ifndef NORCSID
       26        26             static string rcsid9 = "$Header: sets.c,v 2.2 87/03/10 01:16:18 ceriel Exp $";

       27        27             # endif
       28        28
       29        29             /* In this file the following routines are defined: */
       30        30             extern    setinit();
       31        31             extern p_set setalloc();
       32        32             extern p_set get_set();
       33        33             extern int   setunion();
       34        34             extern int   setintersect();
       35        35             extern       setminus();
CC.C03    File=zbl$sets:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       36        36             extern int   setempty();
       37        37             extern int   findindex();
       38        38             extern int   setcount();
       39        39
       40        40             int    nbytes;
       41        41             static int   setsize;
       42        42             int    tsetsize;
       43        43             p_set     *setptr = 0, *maxptr = 0;
       44        44             static t_info   set_info = {0, 0, 0, 0, 0, 0,};
       45        45             p_mem     alloc();
       46        46
       47        47             setinit(ntneeded) {
       48        48    1         /*
       49        49    1          * Initialises some variables needed for setcomputations
       50        50    1          */
       51        51    1         register int    bitset;
       52        52    1
       53        53    1         nbytes = NBYTES(ntokens);
       54        54    1         bitset = ALIGN(nbytes);
       55        55    1         tsetsize = NINTS(bitset);
       56        56    1         if (ntneeded) {
       57        57    2            /* nonterminals must be included in the sets */
       58        58    2            bitset += NBYTES(nnonterms);
       59        59    2         }
       60        60    1         setsize = NINTS(bitset);
       61        61    1         set_info.i_esize = sizeof(p_set);
       62        62    1         set_info.i_incr = 20;
       63        63    1        }
       64        64
       65        65             p_set
       66        66             get_set() {
       67        67    1         /*
       68        68    1          * Allocate a set that cannot be freed
       69        69    1          */
       70        70    1         register p_set p, q;
       71        71    1         static p_set sets, maxsets;
       72        72    1
CC.C03    File=zbl$sets:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       73        73    1         if ((p = sets) >= maxsets) {
       74        74    2            q = p = (p_set) alloc((unsigned) (50*setsize*sizeof(*sets)));
       75        75    2            maxsets = p + 50 * setsize;
       76        76    2            do {
       77        77    3               *q++ = 0;
       78        78    3            } while (q < maxsets);
       79        79    2         }
       80        80    1         sets = p + setsize;;
       81        81    1         return p;
       82        82    1        }
       83        83
       84        84             p_set
       85        85             setalloc() {
       86        86    1         /*
       87        87    1          * Allocate a set which can later be freed.
       88        88    1          */
       89        89    1         register p_set p;
       90        90    1         register int   size = setsize;
       91        91    1
       92        92    1         p = (p_set) alloc((unsigned) (size * sizeof(*p))) + size;
       93        93    1         do {
       94        94    2            *--p = 0;
       95        95    2         } while (--size);
       96        96    1         return p;
       97        97    1        }
       98        98
       99        99             int
      100       100             setunion(a,b) register p_set a,b; {
      101       101    1         /*
      102       102    1          * a = a union b.
      103       103    1          * Return 1 if the set a changed
      104       104    1          */
      105       105    1         register int   i;
      106       106    1         register int   j;
      107       107    1         register int   nsub = 0;
      108       108    1
      109       109    1         i = setsize;
CC.C03    File=zbl$sets:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      110       110    1         do {
      111       111    2            *a = (j = *a) | *b++;
      112       112    2            if (*a++ != j) {
      113       113    3               nsub = 1;
      114       114    3            }
      115       115    2         } while (--i);
      116       116    1         return nsub;
      117       117    1        }
      118       118
      119       119             int
      120       120             setintersect(a,b) register p_set a,b; {
      121       121    1         /*
      122       122    1          * a = a intersect b.
      123       123    1          * return 1 if the result is empty
      124       124    1          */
      125       125    1         register int   i;
      126       126    1         register int   nempty;
      127       127    1
      128       128    1         nempty = 1;
      129       129    1         i =  setsize;
      130       130    1         do {
      131       131    2            if (*a++ &= *b++) nempty = 0;
      132       132    2         } while (--i);
      133       133    1         return nempty;
      134       134    1        }
      135       135
      136       136             setminus(a,b) register p_set a,b; {
      137       137    1         /*
      138       138    1          * a = a setminus b
      139       139    1          */
      140       140    1         register int   i;
      141       141    1
      142       142    1         i = setsize;
      143       143    1         do {
      144       144    2            *a++ &= ~(*b++);
      145       145    2         } while (--i);
      146       146    1        }
CC.C03    File=zbl$sets:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      147       147
      148       148             int
      149       149             setempty(p) register p_set p; {
      150       150    1         /*
      151       151    1          * Return 1 if the set p is empty
      152       152    1          */
      153       153    1         register int   i;
      154       154    1
      155       155    1         i = tsetsize;
      156       156    1         do {
      157       157    2            if (*p++) return 0;
      158       158    2         } while (--i);
      159       159    1         return 1;
      160       160    1        }
      161       161
      162       162             int
      163       163             findindex(set) p_set set; {
      164       164    1         /*
      165       165    1          * The set "set" will serve as a recovery set.
      166       166    1          * Search for it in the table. If not present, enter it.
      167       167    1          * Here is room for improvement. At the moment, the list of
      168       168    1          * sets is examined with linear search.
      169       169    1          */
      170       170    1         register p_set *t;
      171       171    1         p_mem    new_mem();
      172       172    1         register p_set a;
      173       173    1         register p_set b;
      174       174    1         register int   i;
      175       175    1         int      saved;
      176       176    1
      177       177    1         /*
      178       178    1          * First search for the set in the table
      179       179    1          */
      180       180    1         for (t = setptr; t < maxptr; t++) {
      181       181    2            a = *t;
      182       182    2            b = set;
      183       183    2            i = tsetsize;
CC.C03    File=zbl$sets:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      184       184    2            do {
      185       185    3               if (*a++ != *b++) break;
      186       186    3            } while (--i);
      187       187    2            if (i) continue;
      188       188    2            /*
      189       189    2             * Here, the sets are equal.
      190       190    2             */
      191       191    2            return nbytes * (t - setptr);
      192       192    2         }
      193       193    1         /*
      194       194    1          * Now check if the set consists of only one element.
      195       195    1          * It would be a waste to use a set for that
      196       196    1          */
      197       197    1         if (setcount(set, &saved) == 1) return -(saved + 1);
      198       198    1         /*
      199       199    1          * If it does, return its number as a negative number.
      200       200    1          */
      201       201    1         maxptr = (p_set *) new_mem(&set_info);
      202       202    1         setptr = (p_set *) set_info.i_ptr;
      203       203    1         *maxptr = setalloc();
      204       204    1         setunion(*maxptr, set);
      205       205    1         return nbytes * (maxptr++ - setptr);
      206       206    1        }
      207       207
      208       208             int
      209       209             setcount(set, saved) register p_set set; int *saved; {
      210       210    1         register int i, j;
      211       211    1
      212       212    1         for (j = 0, i = 0; i < ntokens; i++) {
      213       213    2            if (IN(set,i)) {
      214       214    3               j++;
      215       215    3               *saved = i;
      216       216    3            }
      217       217    2         }
      218       218    1         return j;
      219       219    1        }
      220       220
CC.C03    File=zbl$sets:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
---  Include file information  ---

   zbl$types:h.:ZBC3TOU. is referenced
   zbl$extern:h.:ZBC3TOU. is referenced
   zbl$sets:h.:ZBC3TOU. is referenced
   zbl$assert:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbl$sets:c.:ZBC3TSI
