

CC.C03    File=zbe$aux:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=1  
        1         1             /* $Header: aux.c,v 1.4 87/03/10 11:29:10 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  S H A R E D   F I L E
        7         7              *
        8         8              *  A U X I L I A R Y   R O U T I N E S
        9         9              *
       10        10              */
       11        11
       12        12             #include "types:h"
       13        13             #include "debug:h"
       14        14             #include "global:h"
       15        15             #include "alloc:h"
       16        16             #include "aux:h"
       17        17             #include "map:h"
       18        18             #include "lset:h"
       19        19             #include "em_mes:h"
       20        20             #include "em_pseu:h"
       21        21
       22        22             offset off_set(lnp)
       23        23              line_p lnp;
       24        24             {
       25        25    1         switch(lnp->l_optype) {
       26        26    2            case OPSHORT:
       27        27    2               return (offset) SHORT(lnp);
       28        28    2            case OPOFFSET:
       29        29    2               return OFFSET(lnp);
       30        30    2            default:
       31        31    2               assert(FALSE);
       32        32    2         }
       33        33    1         /* NOTREACHED */
       34        34    1        }
       35        35
       36        36
CC.C03    File=zbe$aux:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=2  
       37        37
       38        38
       39        39             offset aoff(ap,n)
       40        40              register arg_p ap;
       41        41             {
       42        42    1         while (n>0) {
       43        43    2            if (ap != (arg_p) 0)
       44        44    2               ap = ap->a_next;
       45        45    2            n--;
       46        46    2         }
       47        47    1         if (ap == (arg_p) 0)
       48        48    1            error("too few parameters");
       49        49    1         if (ap->a_type != ARGOFF)
       50        50    1            error("offset expected");
       51        51    1         return(ap->a_a.a_offset);
       52        52    1        }
       53        53
       54        54
       55        55             offset tmplocal(p,size)
       56        56              proc_p p;
       57        57              offset   size;
       58        58             {
       59        59    1         /* Allocate a new local variable in the stack frame of p */
       60        60    1
       61        61    1         p->p_localbytes +=  size;
       62        62    1         return -(p->p_localbytes);
       63        63    1        }
       64        64
       65        65
       66        66
       67        67
       68        68             line_p int_line(off)
       69        69              offset off;
       70        70             {
       71        71    1         /* Allocate a line struct of type OPSHORT or OPOFFSET,
       72        72    1          * whichever one fits best.
       73        73    1          */
CC.C03    File=zbe$aux:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=3  
       74        74    1
       75        75    1         line_p lnp;
       76        76    1
       77        77    1         if ((short) off == off) {
       78        78    2            /* fits in a short */
       79        79    2            lnp = newline(OPSHORT);
       80        80    2            SHORT(lnp) = (short) off;
       81        81    2         } else {
       82        82    2            lnp = newline(OPOFFSET);
       83        83    2            OFFSET(lnp) = off;
       84        84    2         }
       85        85    1         lnp->l_next = (line_p) 0;
       86        86    1         return lnp;
       87        87    1        }
       88        88
       89        89
       90        90
       91        91             line_p reg_mes(tmp,size,typ,score)
       92        92              offset tmp;
       93        93              short  size;
       94        94              int    typ,score;
       95        95             {
       96        96    1         /* Generate a register message */
       97        97    1
       98        98    1         line_p l;
       99        99    1         arg_p a;
      100       100    1
      101       101    1        #define NEXTARG(a,val) a->a_next = newarg(ARGOFF); a = a->a_next; \
      102       101    1               a->a_a.a_offset = val
      103       103    1         l = newline(OPLIST);
      104       104    1         l->l_instr = ps_mes;
      105       105    1         a = ARG(l) = newarg(ARGOFF);
      106       106    1         a->a_a.a_offset = ms_reg;
      107       107    1         NEXTARG(a,tmp);
      108       108    1         NEXTARG(a,size);
      109       109    1         NEXTARG(a,typ);
      110       110    1         NEXTARG(a,score);
CC.C03    File=zbe$aux:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=4  
      111       111    1         a->a_next = (arg_p) 0;
      112       112    1         return l;
      113       113    1        }
      114       114
      115       115
      116       116             bool dom(b1,b2)
      117       117              bblock_p b1,b2;
      118       118             {
      119       119    1         /* See if b1 dominates b2. Note that a block always
      120       120    1          * dominates itself.
      121       121    1          */
      122       122    1
      123       123    1         register bblock_p b;
      124       124    1
      125       125    1         for (b = b2; b != (bblock_p) 0; b = b->b_idom) {
      126       126    2            /* See if b1 is a (not necessarily proper) ancestor
      127       127    2             * of b2 in the immediate dominator tree.
      128       128    2             */
      129       129    2            if (b == b1) return TRUE;
      130       130    2         }
      131       131    1         return FALSE;
      132       132    1        }
      133       133
      134       134
      135       135             bblock_p common_dom(a,b)
      136       136              bblock_p a,b;
      137       137             {
      138       138    1         /* find a basic block that dominates a as well as b;
      139       139    1          * note that a basic block also dominates itself.
      140       140    1          */
      141       141    1
      142       142    1         assert (a != (bblock_p) 0);
      143       143    1         assert (b != (bblock_p) 0);
      144       144    1         if (dom(a,b)) {
      145       145    2            return a;
      146       146    2         } else {
      147       147    2            if (dom(b,a)) {
CC.C03    File=zbe$aux:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=5  
      148       148    3               return b;
      149       149    3            } else {
      150       150    3               return common_dom(a->b_idom,b->b_idom);
      151       151    3            }
      152       152    2         }
      153       153    1        }
      154       154
      155       155             #define R time_space_ratio
      156       156
      157       157             short add_timespace(time,space)
      158       158              short time,space;
      159       159             {
      160       160    1         /* Add together a time and space, using the time_space_ratio
      161       161    1          * parameter that may be set by the user, indicating the need
      162       162    1          * to optimize for time, space or something in between.
      163       163    1          */
      164       164    1
      165       165    1         return (R * time + (100 - R) * space) / 100;
      166       166    1        }
      167       167
      168       168
      169       169
      170       170             rm_line(l,b)
      171       171              line_p l;
      172       172              bblock_p b;
      173       173             {
      174       174    1         if (b->b_start == l) {
      175       175    2            b->b_start = l->l_next;
      176       176    2         } else {
      177       177    2            PREV(l)->l_next = l->l_next;
      178       178    2         }
      179       179    1         if (l->l_next != (line_p) 0) {
      180       180    2            PREV(l->l_next) = PREV(l);
      181       181    2         }
      182       182    1         oldline(l);
      183       183    1        }
      184       184
CC.C03    File=zbe$aux:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=6  
      185       185
      186       186
      187       187
      188       188             appnd_line(l1,l2)
      189       189              line_p l1,l2;
      190       190             {
      191       191    1         /* Put l1 after l2 */
      192       192    1
      193       193    1         PREV(l1) = l2;
      194       194    1         l1->l_next = l2->l_next;
      195       195    1         l2->l_next = l1;
      196       196    1         if (l1->l_next != (line_p) 0) {
      197       197    2            PREV(l1->l_next) = l1;
      198       198    2         }
      199       199    1        }
      200       200
      201       201
      202       202
      203       203             line_p last_instr(b)
      204       204              bblock_p b;
      205       205             {
      206       206    1         /* Determine the last line of a list */
      207       207    1
      208       208    1         register line_p l = b->b_start;
      209       209    1
      210       210    1         if (l == (line_p) 0) return (line_p) 0;
      211       211    1         while (l->l_next != (line_p) 0) l = l->l_next;
      212       212    1         return l;
      213       213    1        }
      214       214
      215       215
      216       216
      217       217
      218       218             line_p find_mesreg(off)
      219       219              offset off;
      220       220             {
      221       221    1         /* Find the register message for the local with the given offset */
CC.C03    File=zbe$aux:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=7  
      222       222    1
      223       223    1         Lindex li;
      224       224    1         line_p l;
      225       225    1
      226       226    1         for (li = Lfirst(mesregs); li != (Lindex) 0; li = Lnext(li,mesregs)) {
      227       227    2            l = (line_p) Lelem(li);
      228       228    2            if (aoff(ARG(l),1) == off) return l;
      229       229    2         }
      230       230    1         return (line_p) 0;
      231       231    1        }
      232       232
      233       233
      234       234             bool is_regvar(off)
      235       235              offset off;
      236       236             {
      237       237    1         return find_mesreg(off) != (line_p) 0;
      238       238    1        }
      239       239
      240       240
      241       241
      242       242             offset regv_arg(off,n)
      243       243              offset off;
      244       244              int n;
      245       245             {
      246       246    1         /* fetch the n'th argument of the register message of the
      247       247    1          * local variable at offset off;
      248       248    1          */
      249       249    1
      250       250    1         line_p x = find_mesreg(off);
      251       251    1         assert (x != (line_p) 0);
      252       252    1         return aoff(ARG(x),n);
      253       253    1        }
      254       254
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$aux:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=8  
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   em_mes:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$aux:c.:ZBC3TSI
