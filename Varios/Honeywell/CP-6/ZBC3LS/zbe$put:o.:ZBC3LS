

CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=1  
        1         1             /* $Header: put.c,v 1.4 87/03/10 11:38:16 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* P U T . C */
        7         7
        8         8             #include <stdio:h>
        9         9             #include "types:h"
       10        10             #include "global:h"
       11        11             #include "debug:h"
       12        12             #include "def:h"
       13        13             #include "map:h"
       14        14             #include "em_pseu:h"
       15        15             #include "em_spec:h"
       16        16             #include "lset:h"
       17        17             #include "alloc:h"
       18        18             #include "put:h"
       19        19
       20        20             FILE *curoutp;
       21        21
       22        22
       23        23             /* The output can be either 'typed' or 'untyped'. Typed data
       24        24              * consists of a value preceded by a byte specifying what kind
       25        25              * of value it is (e.g. 2 bytes constant, 4 bytes constant,
       26        26              * proc-id, lab-id, string etc.). Untyped data consists
       27        27              * of the value only. We use typed data for the EM text and
       28        28              * untyped data for all other files.
       29        29              */
       30        30
       31        31             /* putlines */
       32        32
       33        33             STATIC putargs(ap)
       34        34              register arg_p ap;
       35        35             {
       36        36    1         while (ap != (arg_p) 0) {
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=2  
       37        37    2            outbyte((byte) ap->a_type & BMASK);
       38        38    2            switch(ap->a_type) {
       39        39    3               case ARGOFF:
       40        40    3                  outoff(ap->a_a.a_offset);
       41        41    3                  break;
       42        42    3               case ARGINSTRLAB:
       43        43    3                  outlab(ap->a_a.a_instrlab);
       44        44    3                  break;
       45        45    3               case ARGOBJECT:
       46        46    3                  outobject(ap->a_a.a_obj);
       47        47    3                  break;
       48        48    3               case ARGPROC:
       49        49    3                  outproc(ap->a_a.a_proc);
       50        50    3                  break;
       51        51    3               case ARGSTRING:
       52        52    3                  putstr(&ap->a_a.a_string);
       53        53    3                  break;
       54        54    3               case ARGICN:
       55        55    3               case ARGUCN:
       56        56    3               case ARGFCN:
       57        57    3                  outshort(ap->a_a.a_con.ac_length);
       58        58    3                  putstr(&ap->a_a.a_con.ac_con);
       59        59    3                  break;
       60        60    3            }
       61        61    2            ap = ap->a_next;
       62        62    2         }
       63        63    1         outbyte((byte) ARGCEND);
       64        64    1        }
       65        65
       66        66
       67        67
       68        68             STATIC putstr(abp) register argb_p abp; {
       69        69    1         register argb_p tbp;
       70        70    1         register length;
       71        71    1
       72        72    1         length = 0;
       73        73    1         tbp = abp;
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=3  
       74        74    1         while (tbp!= (argb_p) 0) {
       75        75    2            length += tbp->ab_index;
       76        76    2            tbp = tbp->ab_next;
       77        77    2         }
       78        78    1         outshort(length);
       79        79    1         while (abp != (argb_p) 0) {
       80        80    2            for (length=0;length<abp->ab_index;length++)
       81        81    2               outbyte( (byte) abp->ab_contents[length] );
       82        82    2            abp = abp->ab_next;
       83        83    2         }
       84        84    1        }
       85        85
       86        86
       87        87             outoff(off) offset off; {
       88        88    1
       89        89    1         outshort( (short) (off&0777777L) );
       90        90    1         outshort( (short) (off>>18) );
       91        91    1        }
       92        92
       93        93
       94        94             outshort(i) short i; {
       95        95    1
       96        96    1         outbyte( (byte) (i&0777L) );
       97        97    1         outbyte( (byte) (i>>9) );
       98        98    1        }
       99        99
      100       100
      101       101             STATIC outint(i)
      102       102              int i;
      103       103             {
      104       104    1         /* Write an integer to the output file. This routine is
      105       105    1          * only used when outputting a bitvector-set. We expect  an
      106       106    1          * integer to be either a short or a long.
      107       107    1          */
      108       108    1
      109       109    1         if (sizeof(int) == sizeof(short)) {
      110       110    2            outshort(i);
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=4  
      111       111    2         } else {
      112       112    2            assert (sizeof(int) == sizeof(offset));
      113       113    2            outoff(i);
      114       114    2         }
      115       115    1        }
      116       116
      117       117             STATIC outlab(lid) lab_id lid; {
      118       118    1         outshort((short) lid);
      119       119    1        }
      120       120
      121       121
      122       122             STATIC outobject(obj) obj_p obj; {
      123       123    1         outshort((short) obj->o_id);
      124       124    1        }
      125       125
      126       126
      127       127             STATIC outproc(p) proc_p p; {
      128       128    1         outshort((short) p->p_id);
      129       129    1        }
      130       130
      131       131
      132       132             short putlines(l,lf)
      133       133              line_p l;
      134       134              FILE *lf;
      135       135             {
      136       136    1         /* Output the list of em instructions headed by l.
      137       137    1          * Return the number of instruction written.
      138       138    1          */
      139       139    1
      140       140    1         register line_p lnp;
      141       141    1         line_p next;
      142       142    1         short instr;
      143       143    1         short count= 0;
      144       144    1
      145       145    1         curoutp = lf;  /* Set f to the EM-text output file */
      146       146    1         for (lnp = l; lnp != (line_p) 0; lnp = next) {
      147       147    2            VL(lnp);
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=5  
      148       148    2            count++;
      149       149    2            next = lnp->l_next;
      150       150    2            instr = INSTR(lnp);
      151       151    2            outbyte((byte) instr);
      152       152    2            outbyte((byte) TYPE(lnp));
      153       153    2            switch(TYPE(lnp)) {
      154       154    3               case OPSHORT:
      155       155    3                  outshort(SHORT(lnp));
      156       156    3                  break;
      157       157    3               case OPOFFSET:
      158       158    3                  outoff(OFFSET(lnp));
      159       159    3                  break;
      160       160    3               case OPINSTRLAB:
      161       161    3                  outlab(INSTRLAB(lnp));
      162       162    3                  break;
      163       163    3               case OPOBJECT:
      164       164    3                  outobject(OBJ(lnp));
      165       165    3                  break;
      166       166    3               case OPPROC:
      167       167    3                  outproc(PROC(lnp));
      168       168    3                  break;
      169       169    3               case OPLIST:
      170       170    3                  putargs(ARG(lnp));
      171       171    3                  break;
      172       172    3            }
      173       173    2            oldline(lnp);
      174       174    2         }
      175       175    1         return count;
      176       176    1        }
      177       177
      178       178
      179       179
      180       180
      181       181
      182       182             /* putdtable */
      183       183
      184       184             #define outmark(m) outbyte((byte) m)
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=6  
      185       185
      186       186
      187       187             STATIC putobjects(obj)
      188       188              register obj_p obj;
      189       189             {
      190       190    1         while (obj != (obj_p) 0) {
      191       191    2            outmark(MARK_OBJ);
      192       192    2            outshort(obj->o_id);
      193       193    2            outoff(obj->o_size);
      194       194    2            outoff(obj->o_off);
      195       195    2            obj = obj->o_next;
      196       196    2         }
      197       197    1        }
      198       198
      199       199
      200       200
      201       201             STATIC putvalues(arg)
      202       202              register arg_p arg;
      203       203             {
      204       204    1         while (arg != (arg_p) 0) {
      205       205    2            assert(arg->a_type == ARGOFF);
      206       206    2            outmark(MARK_ARG);
      207       207    2            outoff(arg->a_a.a_offset);
      208       208    2            arg = arg->a_next;
      209       209    2         }
      210       210    1        }
      211       211             putdtable(head,df)
      212       212              dblock_p head;
      213       213              FILE *df;
      214       214             {
      215       215    1         /* Write the datablock table to the data block file df. */
      216       216    1
      217       217    1         register dblock_p dbl;
      218       218    1         register obj_p obj;
      219       219    1         dblock_p next;
      220       220    1         register short n = 0;
      221       221    1
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=7  
      222       222    1         curoutp = df;      /* set f to the data block output file */
      223       223    1         /* Count the number of objects */
      224       224    1         for (dbl = head; dbl != (dblock_p) 0; dbl = dbl->d_next) {
      225       225    2            for (obj = dbl->d_objlist; obj != (obj_p) 0;
      226       226    2                        obj = obj->o_next) {
      227       227    3               n++;
      228       228    3            }
      229       229    2         }
      230       230    1         outshort(n);  /* The table is preceded by #objects . */
      231       231    1         for (dbl = head; dbl != (dblock_p) 0; dbl = next) {
      232       232    2            next = dbl->d_next;
      233       233    2            outmark(MARK_DBLOCK);
      234       234    2            outshort(dbl->d_id);
      235       235    2            outbyte(dbl->d_pseudo);
      236       236    2            outoff(dbl->d_size);
      237       237    2            outshort(dbl->d_fragmnr);
      238       238    2            outbyte(dbl->d_flags1);
      239       239    2            putobjects(dbl->d_objlist);
      240       240    2            putvalues(dbl->d_values);
      241       241    2            olddblock(dbl);
      242       242    2         }
      243       243    1         fclose(curoutp);
      244       244    1         if (omap != (obj_p *) 0) {
      245       245    2            oldmap(omap,olength);  /* release memory for omap */
      246       246    2         }
      247       247    1        }
      248       248
      249       249
      250       250
      251       251             /* putptable */
      252       252
      253       253
      254       254
      255       255             STATIC outcset(s)
      256       256              cset s;
      257       257             {
      258       258    1         /* A 'compact' set is represented externally as a row of words
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=8  
      259       259    1          * (its bitvector) preceded by its length.
      260       260    1          */
      261       261    1
      262       262    1         register short i;
      263       263    1
      264       264    1         outshort(s->v_size);
      265       265    1         for (i = 0; i <= DIVWL(s->v_size - 1); i++) {
      266       266    2            outint(s->v_bits[i]);
      267       267    2         }
      268       268    1        }
      269       269
      270       270
      271       271
      272       272             putptable(head,pf,all)
      273       273              proc_p head;
      274       274              FILE   *pf;
      275       275              bool   all;
      276       276             {
      277       277    1         register proc_p p;
      278       278    1         proc_p next;
      279       279    1         register short n = 0;
      280       280    1         /* Write the proc table */
      281       281    1
      282       282    1         curoutp = pf;
      283       283    1         /* Determine the number of procs */
      284       284    1         for (p = head; p != (proc_p) 0; p = p->p_next) {
      285       285    2            n++;
      286       286    2         }
      287       287    1         outshort(n);  /* The table is preceded by its length. */
      288       288    1         outshort ((all?1:0)); /* if all=false, only some of the attributes
      289       289    1                        are written. */
      290       290    1         for (p = head; p != (proc_p) 0; p = next) {
      291       291    2            next = p->p_next;
      292       292    2            outshort(p->p_id);
      293       293    2            outbyte(p->p_flags1);
      294       294    2            if (p->p_flags1 & PF_BODYSEEN) {
      295       295    3               /* If we have no access to the EM text of the
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=9  
      296       296    3                * body of a procedure, we have no information
      297       297    3                * about it whatsoever, so there is nothing
      298       298    3                * to output in that case.
      299       299    3                */
      300       300    3               outshort(p->p_nrlabels);
      301       301    3               outoff(p->p_localbytes);
      302       302    3               outoff(p->p_nrformals);
      303       303    3               if (all) {
      304       304    4            if (p->p_change != (proc_p) 0 ) {
"zbe$put:c.:ZBC3TSI", line 304: (warning) incompatible pointers in !=
      305       305    5                  outcset(p->p_change->c_ext);
      306       306    5                  outshort(p->p_change->c_flags);
      307       307    5                  outshort(p->p_use->u_flags);
      308       308    5                  outcset(p->p_calling);
      309       309    5                  Cdeleteset(p->p_change->c_ext);
      310       310    5                  oldchange(p->p_change);
      311       311    5                  olduse(p->p_use);
      312       312    5                  Cdeleteset(p->p_calling);
      313       313    5             }
      314       314    4               }
      315       315    3            }
      316       316    2            oldproc(p);
      317       317    2         }
      318       318    1         fclose(curoutp);
      319       319    1         if (pmap != (proc_p *) 0) {
      320       320    2            oldmap(pmap,plength);  /* release memory for pmap */
      321       321    2         }
      322       322    1        }
      323       323
      324       324
      325       325
      326       326             /* putunit */
      327       327
      328       328             STATIC outloop(l)
      329       329              loop_p l;
      330       330             {
      331       331    1         outshort((short) l->lp_id);
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=10 
      332       332    1        }
      333       333
      334       334
      335       335             STATIC outblock(b)
      336       336              bblock_p b;
      337       337             {
      338       338    1         if (b == (bblock_p) 0) {
      339       339    2            outshort((short) 0);
      340       340    2         } else {
      341       341    2            outshort((short) b->b_id);
      342       342    2         }
      343       343    1        }
      344       344
      345       345
      346       346             STATIC outid(e,p)
      347       347              Lelem_t e;
      348       348              int (*p) ();
      349       349             {
      350       350    1         /* Auxiliary routine used by outlset. */
      351       351    1
      352       352    1         /* NOSTRICT */
      353       353    1         (*p) (e);
      354       354    1        }
      355       355
      356       356
      357       357             STATIC outlset(s,p)
      358       358              lset s;
      359       359              int (*p) ();
      360       360             {
      361       361    1         /* A 'long' set is represented externally as a
      362       362    1          * a sequence of elements terminated by a 0 word.
      363       363    1          * The procedural parameter p is a routine that
      364       364    1          * prints an id (proc_id, obj_id etc.).
      365       365    1          */
      366       366    1
      367       367    1         register Lindex i;
      368       368    1
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=11 
      369       369    1         for (i = Lfirst(s); i != (Lindex) 0; i = Lnext(i,s)) {
      370       370    2            outid(Lelem(i),p);
      371       371    2         }
      372       372    1         outshort((short) 0);
      373       373    1        }
      374       374
      375       375
      376       376
      377       377             putunit(kind,p,l,gf,lf)
      378       378              short  kind;
      379       379              proc_p   p;
      380       380              line_p   l;
      381       381              FILE     *gf, *lf;
      382       382             {
      383       383    1         register bblock_p b;
      384       384    1         register short n = 0;
      385       385    1         Lindex   pi;
      386       386    1         loop_p   lp;
      387       387    1
      388       388    1         curoutp = gf;
      389       389    1         if (kind == LDATA) {
      390       390    2            outshort(0); /* No basic blocks */
      391       391    2            n = putlines(l,lf);
      392       392    2            curoutp = gf;
      393       393    2            outshort(n);
      394       394    2            return;
      395       395    2         }
      396       396    1         /* Determine the number of basic blocks */
      397       397    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      398       398    2            n++;
      399       399    2         }
      400       400    1         outshort(n); /* # basic blocks */
      401       401    1         outshort(Lnrelems(p->p_loops));  /* # loops */
      402       402    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      403       403    2            n = putlines(b->b_start,lf);
      404       404    2            curoutp = gf;
      405       405    2            outblock(b);  /* put its block_id */
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=12 
      406       406    2            outshort(n);  /* #instructions of the block */
      407       407    2            outlset(b->b_succ, outblock); /* put succ set */
      408       408    2            outlset(b->b_pred, outblock); /* put pred set */
      409       409    2            outblock(b->b_idom); /* put id of immediate dominator */
      410       410    2            outlset(b->b_loops, outloop); /* put loop set */
      411       411    2            outshort(b->b_flags);
      412       412    2         }
      413       413    1         /* The Control Flow Graph of every procedure is followed
      414       414    1          * by a description of the loops of the procedure.
      415       415    1          * Every loop contains an id, an entry block and a level.
      416       416    1          */
      417       417    1         for (pi = Lfirst(p->p_loops); pi != (Lindex) 0;
      418       418    1                      pi = Lnext(pi,p->p_loops)) {
      419       419    2            lp = (loop_p) Lelem(pi);
      420       420    2            outloop(lp);   /* id */
      421       421    2            outshort(lp->lp_level); /* nesting level */
      422       422    2            outblock(lp->lp_entry); /* loop entry block */
      423       423    2            outblock(lp->lp_end);
      424       424    2            oldloop(lp);
      425       425    2         }
      426       426    1         Ldeleteset(p->p_loops);
      427       427    1         /* We will now release the memory of the basic blocks.
      428       428    1          * Note that it would be incorrect to release a basic block
      429       429    1          * after it has been written, because there may be references
      430       430    1          * to it from other (later) blocks.
      431       431    1          */
      432       432    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      433       433    2            Ldeleteset(b->b_loops);
      434       434    2            Ldeleteset(b->b_succ);
      435       435    2            Ldeleteset(b->b_pred);
      436       436    2            oldbblock(b);
      437       437    2         }
      438       438    1         /* Release the memory for the lmap, lbmap, bmap, lpmap tables */
      439       439    1         if (lmap != (line_p *) 0) oldmap(lmap,llength);
      440       440    1         if (lbmap != (bblock_p *) 0) oldmap(lbmap,llength);
      441       441    1         if (bmap != (bblock_p *) 0)  oldmap(bmap,blength);
      442       442    1         if (lpmap != (loop_p *) 0) oldmap(lpmap,lplength);
CC.C03    File=zbe$put:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=13 
      443       443    1         curoutp = lf;
      444       444    1        }
      445       445
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$put:h.:ZBC3TOU. is referenced

1 warning was detected in the file zbe$put:c.:ZBC3TSI
