

CC.C03    File=zbe$cs_profit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cs_profit.c,v 1.4 87/03/10 10:58:46 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             #include <stdio:h>
        7         7             #include "em_mnem:h"
        8         8             #include "em_spec:h"
        9         9             #include "types:h"
       10        10             #include "debug:h"
       11        11             #include "global:h"
       12        12             #include "aux:h"
       13        13             #include "cset:h"
       14        14             #include "lset:h"
       15        15             #include "cs:h"
       16        16             #include "cs_aux:h"
       17        17             #include "cs_debug:h"
       18        18             #include "cs_avail:h"
       19        19             #include "cs_partit:h"
       20        20
       21        21             cset addr_modes ;
       22        22             cset forbidden ;
       23        23             cset cheaps ;
       24        24             STATIC short LX_threshold;
       25        25             STATIC short AR_limit;
       26        26             STATIC bool  DO_sli;
       27        27
       28        28             STATIC get_instrs(f, s_p)
       29        29              FILE *f;
       30        30              cset *s_p;
       31        31             {
       32        32    1         /* Read a set of instructions from inputfile f into *s_p.
       33        33    1          * Such a set must be delimited by a number lower than
       34        34    1          * the number of the first EM mnemonic.
       35        35    1          */
       36        36    1         int instr;
CC.C03    File=zbe$cs_profit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=2  
       37        37    1
       38        38    1         fscanf(f, "%d", &instr);
       39        39    1         while (instr >= sp_fmnem) {
       40        40    2            Cadd((Celem_t) instr, s_p);
       41        41    2            fscanf(f, "%d", &instr);
       42        42    2         }
       43        43    1        }
       44        44
       45        45             STATIC choose_cset(f, s_p)
       46        46              FILE *f;
       47        47              cset *s_p;
       48        48             {
       49        49    1         /* Read two compact sets of EM instructions from inputfile f.
       50        50    1          * Choose the first if we optimize with respect to time,
       51        51    1          * the second if we optimize with respect to space, as
       52        52    1          * indicated by time_space_ratio.
       53        53    1          */
       54        54    1         cset cs1, cs2; /* Two dummy sets. */
       55        55    1
       56        56    1         *s_p = Cempty_set((short) sp_lmnem);
       57        57    1
       58        58    1         cs1 = Cempty_set((short) sp_lmnem);
       59        59    1         get_instrs(f, &cs1);
       60        60    1         cs2 = Cempty_set((short) sp_lmnem);
       61        61    1         get_instrs(f, &cs2);
       62        62    1
       63        63    1         Ccopy_set(time_space_ratio >= 50 ? cs1 : cs2, s_p);
       64        64    1
       65        65    1         Cdeleteset(cs1); Cdeleteset(cs2);
       66        66    1         }
       67        67
       68        68             cs_machinit(f)
       69        69              FILE *f;
       70        70             {
       71        71    1         char s[100];
       72        72    1         int time, space;
       73        73    1
CC.C03    File=zbe$cs_profit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=3  
       74        74    1         /* Find piece that is relevant for this phase. */
       75        75    1         do {
       76        76    2            while (getc(f) != '\n');
       77        77    2            fscanf(f, "%s", s);
       78        78    2         } while (strcmp(s, "%%CS"));
       79        79    1
       80        80    1         /* Choose a set of instructions which must only be eliminated
       81        81    1          * if they are at the root of another expression.
       82        82    1          */
       83        83    1         choose_cset(f, &addr_modes);
       84        84    1
       85        85    1         /* Choose a set of cheap instructions; i.e. instructions that
       86        86    1          * are cheaper than a move to save the result of such an
       87        87    1          * instruction.
       88        88    1          */
       89        89    1         choose_cset(f, &cheaps);
       90        90    1
       91        91    1         /* Read how many lexical levels back an LXL/LXA instruction
       92        92    1          * must at least look before it will be eliminated.
       93        93    1          */
       94        94    1         fscanf(f, "%d %d", &time, &space);
       95        95    1         LX_threshold = time_space_ratio >= 50 ? time : space;
       96        96    1
       97        97    1         /* Read what the size of an array-element may be,
       98        98    1          * before we think that it is to big to replace
       99        99    1          * a LAR/SAR of it by AAR LOI/STI <size>.
      100       100    1          */
      101       101    1         fscanf(f, "%d", &space);
      102       102    1         AR_limit = space;
      103       103    1
      104       104    1         /* Read whether we must eliminate an SLI instruction
      105       105    1          * when it is part of an array-index computation.
      106       106    1          */
      107       107    1         fscanf(f, "%d %d", &time, &space);
      108       108    1         DO_sli = time_space_ratio >= 50 ? time : space;
      109       109    1
      110       110    1         /* Read a set of instructions which we do not want to eliminate.
CC.C03    File=zbe$cs_profit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=4  
      111       111    1          * Note: only instructions need be given that may in principle
      112       112    1          * be eliminated, but for which better code can be generated
      113       113    1          * when they stay, and with which is not dealt in the common
      114       114    1          * decision routines.
      115       115    1          */
      116       116    1         choose_cset(f, &forbidden);
      117       117    1        }
      118       118
      119       119             STATIC bool is_index(lnp)
      120       120              line_p lnp;
      121       121             {
      122       122    1         /* Return whether the SLI-instruction in lnp is part of
      123       123    1          * an array-index computation.
      124       124    1          */
      125       125    1         return   lnp->l_prev != (line_p) 0 && INSTR(lnp->l_prev) == op_loc &&
      126       126    1            lnp->l_next != (line_p) 0 && INSTR(lnp->l_next) == op_ads;
      127       127    1        }
      128       128
      129       129             STATIC bool gains(avp)
      130       130              avail_p avp;
      131       131             {
      132       132    1         /* Return whether we can gain something, when we eliminate
      133       133    1          * an expression such as in avp. We just glue together some
      134       134    1          * heuristics with some user-supplied stuff.
      135       135    1          */
      136       136    1         if (Cis_elem(avp->av_instr & BMASK, forbidden))
      137       137    1            return FALSE;
      138       138    1
      139       139    1         if (avp->av_instr == (byte) op_lxa || avp->av_instr == (byte) op_lxl)
      140       140    1            return off_set(avp->av_found) >= LX_threshold;
      141       141    1
      142       142    1         if (avp->av_instr == (byte) op_sli)
      143       143    1            return !is_index(avp->av_found) || DO_sli;
      144       144    1
      145       145    1         if (Cis_elem(avp->av_instr & BMASK, addr_modes))
      146       146    1            return instrgroup(avp->av_found->l_prev) != SIMPLE_LOAD;
      147       147    1
CC.C03    File=zbe$cs_profit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=5  
      148       148    1         if (Cis_elem(avp->av_instr & BMASK, cheaps))
      149       149    1            return avp->av_saveloc != (entity_p) 0;
      150       150    1
      151       151    1         return TRUE;
      152       152    1        }
      153       153
      154       154             STATIC bool okay_lines(avp, ocp)
      155       155              avail_p avp;
      156       156              occur_p ocp;
      157       157             {
      158       158    1         register line_p lnp, next;
      159       159    1
      160       160    1         for (lnp = ocp->oc_lfirst; lnp != (line_p) 0; lnp = next) {
      161       161    2            next = lnp != ocp->oc_llast ? lnp->l_next : (line_p) 0;
      162       162    2
      163       163    2            if (INSTR(lnp) < sp_fmnem || INSTR(lnp) > sp_lmnem)
      164       164    2               return FALSE;
      165       165    2            if (!stack_group(INSTR(lnp))) {
      166       166    3               /* Check for SAR-instruction. */
      167       167    3               if (INSTR(lnp) != op_sar || next != (line_p) 0)
      168       168    3                  return FALSE;
      169       169    3            }
      170       170    2         }
      171       171    1         /* All lines in this occurrence can in principle be eliminated;
      172       172    1          * no stores, messages, calls etc.
      173       173    1          * We now check whether it is desirable to treat a LAR or a SAR
      174       174    1          * as an AAR LOI/STI. This depends on the size of the array-elements.
      175       175    1          */
      176       176    1         if (INSTR(ocp->oc_llast) == op_lar || INSTR(ocp->oc_llast) == op_sar) {
      177       177    2            if (avp->av_instr == (byte) op_aar && time_space_ratio < 50) {
      178       178    3               return array_elemsize(avp->av_othird) <= AR_limit;
      179       179    3            }
      180       180    2         }
      181       181    1         return TRUE;
      182       182    1        }
      183       183
      184       184             bool desirable(avp)
CC.C03    File=zbe$cs_profit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=6  
      185       185              avail_p avp;
      186       186             {
      187       187    1         register Lindex i, next;
      188       188    1
      189       189    1         if (!gains(avp)) {
      190       190    2            OUTTRACE("no gain", 0);
      191       191    2            SHOWAVAIL(avp);
      192       192    2            return FALSE;
      193       193    2         }
      194       194    1
      195       195    1         /* Walk through the occurrences to see whether it is okay to
      196       196    1          * eliminate them. If not, remove them from the set.
      197       197    1          */
      198       198    1         for (i = Lfirst(avp->av_occurs); i != (Lindex) 0; i = next) {
      199       199    2            next = Lnext(i, avp->av_occurs);
      200       200    2
      201       201    2            if (!okay_lines(avp, occ_elem(i))) {
      202       202    3               OUTTRACE("may not eliminate", 0);
      203       203    3        #         ifdef TRACE
      204       204   *S*                 SHOWOCCUR(occ_elem(i));
      205       205   *S*       #         endif
      206       206    3               oldoccur(occ_elem(i));
      207       207    3               Lremove(Lelem(i), &avp->av_occurs);
      208       208    3            }
      209       209    2         }
      210       210    1
      211       211    1         return Lnrelems(avp->av_occurs) > 0;
      212       212    1        }
      213       213
      214       214             static int cs_ft_table[] = {57, 58, 106,70,71,72,5,  /* lae, lal, slI,loe,loi,
                               lof,ads */
      215       215    1                        20,28,29,30,31 }; /* cal,CMI,CMP,CMS,CMU */
      216       216             static int cs_op_table[] = {4, /* op_adp */
      217       217    1                           71, /* op_lof */
      218       218    1                           62, /* op_ldf */
      219       219    1                           72, /* op_loi */
      220       220    1                           38, /* op_dch */
CC.C03    File=zbe$cs_profit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=7  
      221       221    1                           76  /* op_dch */ };
      222       222             /* the above table is hardwired in and may need to be changed
      223       223                if the em op codes ever change......
      224       224             */
      225       225             /*i*
      226       226                   name: cs_set_machine_stuff
      227       227                   purpose: This routine sets the machine specific stuff
      228       228                   for the l66 (bull) 36 bit machines. Not read from a fie
      229       229                   but hardwired into the routine. Fast, but inflexible.
      230       230             */
      231       231             cs_set_machine_stuff() {
      232       232    1         int i;
      233       233    1
      234       234    1              forbidden = Cempty_set((short) sp_lmnem);
      235       235    1              addr_modes = Cempty_set((short) sp_lmnem);
      236       236    1              cheaps  = Cempty_set((short) sp_lmnem);
      237       237    1
      238       238    1              LX_threshold = 1;
      239       239    1              AR_limit = 8;
      240       240    1              DO_sli = FALSE ;
      241       241    1
      242       242    1              for (i=0; i < 6; i++)  {
      243       243    2                Cadd( (Celem_t) cs_op_table[i], &addr_modes );
      244       244    2              }
      245       245    1              for (i=0; i < 8; i++) {
      246       246    2                Cadd( (Celem_t) cs_ft_table[i], &forbidden);
      247       247    2              }
      248       248    1              return;
      249       249    1        }
      250       250
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$cs_profit:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=8  
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cs:h.:ZBC3TOU. is referenced
   zbe$cs_aux:h.:ZBC3TOU. is referenced
   zbe$cs_debug:h.:ZBC3TOU. is referenced
   zbe$cs_avail:h.:ZBC3TOU. is referenced
   zbe$cs_partit:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$cs_profit:c.:ZBC3TSI
