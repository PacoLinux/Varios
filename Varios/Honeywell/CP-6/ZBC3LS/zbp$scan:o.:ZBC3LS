

CC.C03    File=zbp$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /* $Header: scan.c,v 1.4 87/03/10 10:40:32 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* PREPROCESSOR: SCANNER FOR THE ACTUAL PARAMETERS OF MACROS */
        7         7
        8         8             /*  This file contains the function getactuals() which scans an actual
        9         9              parameter list and splits it up into a list of strings, each one
       10        10              representing an actual parameter.
       11        11             */
       12        12
       13        13             #include "lapbuf:h"   /* UF */
       14        14             #include "nparams:h"  /* UF */
       15        15
       16        16             #include "input:h"
       17        17             #include "class:h"
       18        18             #include "idf:h"
       19        19             #include "macro:h"
       20        20             #include "interface:h"
       21        21
       22        22             #define   EOS      '\0'
       23        23             #define   overflow()  (fatal("actual parameter buffer overflow"))
       24        24
       25        25             PRIVATE char apbuf[LAPBUF]; /* temporary storage for actual parameters */
       26        26             PRIVATE char *actparams[NPARAMS]; /* pointers to the text of the actuals */
       27        27             PRIVATE char *aptr = 0;  /* pointer to last inserted character in apbuf */
       28        28
       29        29             #define   copy(ch) ((aptr < &apbuf[LAPBUF]) ? (*aptr++ = ch) : overflow())
       30        30
       31        31             PRIVATE int nr_of_params;   /* number of actuals read until now */
       32        32
       33        33             PRIVATE char **
       34        34             getactuals(idef)
       35        35              struct idf *idef;
       36        36             {
CC.C03    File=zbp$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37    1         /* getactuals() collects the actual parameters and turns them
       38        38    1            into a list of strings, a pointer to which is returned.
       39        39    1         */
       40        40    1         register acnt = idef->id_macro->mc_nps;
       41        41    1
       42        42    1         nr_of_params = 0;
       43        43    1         actparams[0] = aptr = &apbuf[0];
       44        44    1         copyact('(', ')', 0);   /* read the actual parameters */
       45        45    1         copy(EOS);     /* mark the end of it all  */
       46        46    1
       47        47    1         if (!nr_of_params++) {     /* 0 or 1 parameter  */
       48        48    2            /* there could be a ( <spaces, comment, ...> )
       49        49    2            */
       50        50    2            register char *p = actparams[0];
       51        51    2
       52        52    2            while ((class(*p) == STSKIP) || (*p == '\n')) {
       53        53    3                  ++p;
       54        54    3            }
       55        55    2
       56        56    2            if (!*p) {  /* the case () : 0 parameters */
       57        57    3               nr_of_params--;
       58        58    3            }
       59        59    2         }
       60        60    1
       61        61    1         if (nr_of_params != acnt)  {
       62        62    2            /* argument mismatch: too many or too few
       63        63    2               actual parameters.
       64        64    2            */
       65        65    2            warning("argument mismatch, %s", idef->id_text);
       66        66    2
       67        67    2            while (nr_of_params < acnt) {
       68        68    3               /* too few paraeters: remaining actuals are ""
       69        69    3               */
       70        70    3               actparams[nr_of_params++] = "";
       71        71    3            }
       72        72    2         }
       73        73    1
CC.C03    File=zbp$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74    1         return actparams;
       75        75    1        }
       76        76
       77        77             PRIVATE
       78        78             copyact(ch1, ch2, level)
       79        79              char ch1, ch2;
       80        80              int level;
       81        81             {
       82        82    1         /* copyact() is taken from Ceriel Jacobs' LLgen, with
       83        83    1            permission.  Its task is to build a list of actuals
       84        84    1            parameters, which list is surrounded by '(' and ')' and in
       85        85    1            which the parameters are separated by ',' if there are
       86        86    1            more than 1. The balancing of '(',')' and '[',']' and
       87        87    1            '{','}' is taken care of by calling this function
       88        88    1            recursively. At each level, copyact() reads the input,
       89        89    1            upto the corresponding closing bracket.
       90        90    1
       91        91    1            Opening bracket is ch1, closing bracket is ch2. If
       92        92    1            level != 0, copy opening and closing parameters too.
       93        93    1         */
       94        94    1         register int ch;     /* Current char */
       95        95    1         register int match;     /* used to read strings */
       96        96    1
       97        97    1         if (level) {
       98        98    2            copy(ch1);
       99        99    2         }
      100       100    1
      101       101    1         for (;;) {
      102       102    2            LoadChar(ch);
      103       103    2
      104       104    2            if (ch == ch2) {
      105       105    3               if (level) {
      106       106    4                  copy(ch);
      107       107    4               }
      108       108    3               return;
      109       109    3            }
      110       110    2
CC.C03    File=zbp$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      111       111    2            switch(ch)  {
      112       112    3
      113       113    3            case ')':
      114       114    3            case '}':
      115       115    3            case ']':
      116       116    3               error("unbalanced parenthesis");
      117       117    3               break;
      118       118    3
      119       119    3            case '(':
      120       120    3               copyact('(', ')', level+1);
      121       121    3               break;
      122       122    3
      123       123    3            case '{':
      124       124    3               /* example:
      125       125    3                     #define declare(v, t)   t v
      126       126    3                     declare(v, union{int i, j; float r;});
      127       127    3               */
      128       128    3               copyact('{', '}', level+1);
      129       129    3               break;
      130       130    3
      131       131    3            case '[':
      132       132    3               copyact('[', ']', level+1);
      133       133    3               break;
      134       134    3
      135       135    3            case '\n':
      136       136    3               LoadChar(ch);
      137       137    3           ch = skipspaces (ch);
      138       138    3               while (ch == '#') {
      139       139    4                  /* This piece of code needs some
      140       140    4                     explanation: consider the call of
      141       141    4                     the macro defined as:
      142       142    4                        #define sum(b,c) (b + c)
      143       143    4                     in the following form:
      144       144    4                        sum(
      145       145    4                        #include my_phone_number
      146       146    4                        ,2)
      147       147    4                     in which case the include must be
CC.C03    File=zbp$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      148       148    4                     interpreted as such.
      149       149    4                  */
      150       150    4                  domacro();  /* has read nl, vt or ff */
      151       151    4                  LoadChar(ch);
      152       152    4            ch = skipspaces (ch);
      153       153    4                  /* Loop, for another control line */
      154       154    4               }
      155       155    3
      156       156    3               PushBack();
      157       157    3               copy('\n');
      158       158    3               break;
      159       159    3
      160       160    3            case '/':
      161       161    3               LoadChar(ch);
      162       162    3
      163       163    3               if (ch == '*') {  /* skip comment   */
      164       164    4                  skipcomment();
      165       165    4                  continue;
      166       166    4               }
      167       167    3
      168       168    3               PushBack();
      169       169    3               copy('/');
      170       170    3               break;
      171       171    3
      172       172    3            case ',':
      173       173    3               if (!level) {
      174       174    4                  /* next parameter encountered */
      175       175    4                  copy(EOS);
      176       176    4
      177       177    4                  if (++nr_of_params >= NPARAMS) {
      178       178    5                     fatal("(getact) too many actuals");
      179       179    5                  }
      180       180    4
      181       181    4                  actparams[nr_of_params] = aptr;
      182       182    4               }
      183       183    3               else  {
      184       184    4                  copy(ch);
CC.C03    File=zbp$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      185       185    4               }
      186       186    3               break;
      187       187    3
      188       188    3            case '\'':
      189       189    3            case '"' :
      190       190    3               /* watch out for brackets in strings, they do
      191       191    3                  not count !
      192       192    3               */
      193       193    3               match = ch;
      194       194    3               copy(ch);
      195       195    3               LoadChar(ch);
      196       196    3               while (ch != EOI) {
      197       197    4                  if (ch == match) {
      198       198    5                     break;
      199       199    5                  }
      200       200    4
      201       201    4                  if (ch == '\\')   {
      202       202    5                     copy(ch);
      203       203    5                     LoadChar(ch);
      204       204    5                  }
      205       205    4                  else
      206       206    4                  if (ch == '\n')   {
      207       207    5                     error("newline in string");
      208       208    5                     copy(match);
      209       209    5                     break;
      210       210    5                  }
      211       211    4
      212       212    4                  copy(ch);
      213       213    4                  LoadChar(ch);
      214       214    4               }
      215       215    3
      216       216    3               if (ch == match)  {
      217       217    4                  copy(ch);
      218       218    4                  break;
      219       219    4               }
      220       220    3               /* Fall through */
      221       221    3
CC.C03    File=zbp$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      222       222    3            case EOI :
      223       223    3               error("unterminated macro call");
      224       224    3               return;
      225       225    3
      226       226    3            default:
      227       227    3               copy(ch);
      228       228    3               break;
      229       229    3            }
      230       230    2         }
      231       231    1        }
      232       232
---  Include file information  ---

   zbp$lapbuf:h.:ZBC3TOU. is referenced
   zbp$nparams:h.:ZBC3TOU. is referenced
   zbp$input:h.:ZBC3TOU. is referenced
   zbp$inputtype:h.:ZBC3TOU. is referenced
   inp_pkg:spec.:ZBC3TOU. is referenced
   zbp$class:h.:ZBC3TOU. is referenced
   charoffset:h.:ZBC3TOU. is referenced
   zbp$idf:h.:ZBC3TOU. is referenced
   idf_pkg:spec.:ZBC3TOU. is referenced
   zbp$macro:h.:ZBC3TOU. is referenced
   zbp$interface:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbp$scan:c.:ZBC3TSI
