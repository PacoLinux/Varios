

CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             #ifndef NORCSID
        2         2             static char rcsid[] = "$Header: subr.c,v 0.6 87/03/10 01:04:25 ceriel Exp $";
        3         3             #endif
        4         4
        5         5             #include "assert:h"
        6         6             #include <stdio:h>
        7         7             #include "param:h"
        8         8             #include "tables:h"
        9         9             #include "types:h"
       10        10             #include <cgg_cg:h>
       11        11             #include "data:h"
       12        12             #include "result:h"
       13        13             #include "extern:h"
       14        14
       15        15             /*
       16        16              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
       17        17              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
       18        18              *
       19        19              * Author: Hans van Staveren
       20        20              */
       21        21
       22        22             string myalloc();
       23        23             unsigned codegen();
       24        24
       25        25             match(tp,tep,optexp) register token_p tp; register set_p tep; {
       26        26    1         register bitno;
       27        27    1         token_p ct;
       28        28    1         result_t result;
       29        29    1
       30        30    1         if (tp->t_token == -1) {        /* register frame */
       31        31    2            bitno = tp->t_att[0].ar;
       32        32    2            if (tep->set_val[bitno>>4]&(1<<(bitno&017)))
       33        33    2               if (tep->set_val[0]&1 || getrefcount(tp->t_att[0].ar)<=1)
       34        34    2                  goto oklabel;
       35        35    2            return(0);
       36        36    2         } else {                /* token frame */
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37    2            bitno = tp->t_token+NREGS;
       38        38    2            if ((tep->set_val[bitno>>4]&(1<<(bitno&017)))==0)
       39        39    2               return(0);
       40        40    2         }
       41        41    1            oklabel:
       42        42    1         if (optexp==0)
       43        43    1            return(1);
       44        44    1         ct=curtoken;
       45        45    1         curtoken=tp;
       46        46    1         result=compute(&enodes[optexp]);
       47        47    1         curtoken=ct;
       48        48    1         return(result.e_v.e_con);
       49        49    1        }
       50        50
       51        51             instance(instno,token) register token_p token; {
       52        52    1         register inst_p inp;
       53        53    1         int i;
       54        54    1         register token_p tp;
       55        55    1         struct reginfo *rp;
       56        56    1         int regno;
       57        57    1         result_t result;
       58        58    1
       59        59    1         if (instno==0) {
       60        60    2            token->t_token = 0;
       61        61    2            for(i=0;i<TOKENSIZE;i++)
       62        62    2               token->t_att[i].aw=0;
       63        63    2            return;
       64        64    2         }
       65        65    1         inp= &tokeninstances[instno];
       66        66    1         switch(inp->in_which) {
       67        67    2         default:
       68        68    2            assert(FALSE);
       69        69    2         case IN_COPY:
       70        70    2            if (inp->in_info[0] == 0)
       71        71    2               if (curtoken) tp = curtoken;
       72        72    2               else tp = &fakestack[stackheight-1];
       73        73    2            else  tp= &fakestack[stackheight-inp->in_info[0]];
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74    2            if (inp->in_info[1]==0) {
       75        75    3               *token = *tp;
       76        76    3            } else {
       77        77    3               token->t_token= -1;
       78        78    3        #if MAXMEMBERS!=0
       79        79    3               assert(tp->t_token == -1);
       80        80    3               rp = &machregs[tp->t_att[0].ar];
       81        81    3               token->t_att[0].ar=rp->r_members[inp->in_info[1]-1];
       82        82    3        #else
       83        83   *S*              assert(FALSE);
       84        84   *S*       #endif
       85        85    3            }
       86        86    2            return;
       87        87    2         case IN_MEMB:
       88        88    2            if (inp->in_info[0] == 0)
       89        89    2               if (curtoken) tp = curtoken;
       90        90    2               else tp = &fakestack[stackheight-1];
       91        91    2            else  tp= &fakestack[stackheight-inp->in_info[0]];
       92        92    2            assert(inp->in_info[1]!=0);
       93        93    2            assert(tp->t_token>0);
       94        94    2            token->t_token= -1;
       95        95    2            assert(tokens[tp->t_token].t_type[inp->in_info[1]-1] == EV_REG);
       96        96    2            token->t_att[0].ar=tp->t_att[inp->in_info[1]-1].ar;
       97        97    2            return;
       98        98    2         case IN_RIDENT:
       99        99    2            token->t_token= -1;
      100       100    2            token->t_att[0].ar= inp->in_info[0];
      101       101    2            return;
      102       102    2         case IN_ALLOC:
      103       103    2            token->t_token= -1;
      104       104    2            regno=allreg[inp->in_info[0]];
      105       105    2        #if MAXMEMBERS!=0
      106       106    2            if (inp->in_info[1])
      107       107    2               regno=machregs[regno].r_members[inp->in_info[1]-1];
      108       108    2        #endif
      109       109    2            token->t_att[0].ar = regno;
      110       110    2            return;
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      111       111    2        #ifdef REGVARS
      112       112    2         case IN_S_DESCR:
      113       113    2         case IN_D_DESCR:
      114       114    2            result=compute(&enodes[inp->in_info[1]]);
      115       115    2            assert(result.e_typ==EV_INT);
      116       116    2            if ((regno=isregvar(result.e_v.e_con)) > 0) {
      117       117    3               token->t_token = -1;
      118       118    3               token->t_att[0].ar = regno;
      119       119    3               for(i=1;i<TOKENSIZE;i++)
      120       120    3                  token->t_att[i].aw = 0;
      121       121    3               return;
      122       122    3            }
      123       123    2            /* fall through */
      124       124    2        #endif
      125       125    2         case IN_DESCR:
      126       126    2            token->t_token=inp->in_info[0];
      127       127    2            for (i=0;i<TOKENSIZE;i++)
      128       128    2               if (inp->in_info[i+1]==0) {
      129       129    3                  assert(tokens[token->t_token].t_type[i]==0);
      130       130    3                  token->t_att[i].aw=0;
      131       131    3               } else {
      132       132    3                  result=compute(&enodes[inp->in_info[i+1]]);
      133       133    3                  assert(tokens[token->t_token].t_type[i]==result.e_typ);
      134       134    3                  if (result.e_typ==EV_INT)
      135       135    3                     token->t_att[i].aw=result.e_v.e_con;
      136       136    3                  else if (result.e_typ==EV_ADDR)
      137       137    3                     token->t_att[i].aa= result.e_v.e_addr;
      138       138    3                  else
      139       139    3                     token->t_att[i].ar=result.e_v.e_reg;
      140       140    3               }
      141       141    2            return;
      142       142    2         }
      143       143    1        }
      144       144
      145       145             cinstance(instno,token,tp,regno) register token_p token,tp; {
      146       146    1         register inst_p inp;
      147       147    1         int i;
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      148       148    1         struct reginfo *rp;
      149       149    1         result_t result;
      150       150    1         int sh; /* saved stackheight */
      151       151    1
      152       152    1         assert(instno!=0);
      153       153    1         inp= &tokeninstances[instno];
      154       154    1         switch(inp->in_which) {
      155       155    2         default:
      156       156    2            assert(FALSE);
      157       157    2         case IN_COPY:
      158       158    2            assert(inp->in_info[0] <= 1);
      159       159    2            if (inp->in_info[1]==0) {
      160       160    3               *token = *tp;
      161       161    3            } else {
      162       162    3               token->t_token= -1;
      163       163    3        #if MAXMEMBERS!=0
      164       164    3               assert(tp->t_token == -1);
      165       165    3               rp = &machregs[tp->t_att[0].ar];
      166       166    3               token->t_att[0].ar=rp->r_members[inp->in_info[1]-1];
      167       167    3        #else
      168       168   *S*              assert(FALSE);
      169       169   *S*       #endif
      170       170    3            }
      171       171    2            return;
      172       172    2         case IN_MEMB:
      173       173    2            assert(inp->in_info[0] <= 1);
      174       174    2            token->t_token= -1;
      175       175    2            assert(tp->t_token>0);
      176       176    2            assert(tokens[tp->t_token].t_type[inp->in_info[1]-1] == EV_REG);
      177       177    2            token->t_att[0].ar=tp->t_att[inp->in_info[1]-1].ar;
      178       178    2            return;
      179       179    2         case IN_RIDENT:
      180       180    2            token->t_token= -1;
      181       181    2            token->t_att[0].ar= inp->in_info[0];
      182       182    2            return;
      183       183    2         case IN_ALLOC:
      184       184    2            token->t_token= -1;
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      185       185    2            assert(inp->in_info[0]==0);
      186       186    2        #if MAXMEMBERS!=0
      187       187    2            if (inp->in_info[1])
      188       188    2               regno=machregs[regno].r_members[inp->in_info[1]-1];
      189       189    2        #endif
      190       190    2            token->t_att[0].ar = regno;
      191       191    2            return;
      192       192    2        #ifdef REGVARS
      193       193    2         case IN_S_DESCR:
      194       194    2         case IN_D_DESCR:
      195       195    2            {  token_p ct = curtoken;
      196       196    3
      197       197    3               curtoken = tp;
      198       198    3               result=compute(&enodes[inp->in_info[1]]);
      199       199    3               curtoken = ct;
      200       200    3               assert(result.e_typ==EV_INT);
      201       201    3               if ((regno=isregvar(result.e_v.e_con)) > 0) {
      202       202    4                  token->t_token = -1;
      203       203    4                  token->t_att[0].ar = regno;
      204       204    4                  for(i=1;i<TOKENSIZE;i++)
      205       205    4                     token->t_att[i].aw = 0;
      206       206    4                  return;
      207       207    4               }
      208       208    3            }
      209       209    2            /* fall through */
      210       210    2        #endif
      211       211    2         case IN_DESCR:
      212       212    2            sh = stackheight;
      213       213    2            stackheight = tp - fakestack + 1;
      214       214    2            token->t_token=inp->in_info[0];
      215       215    2            for (i=0;i<TOKENSIZE;i++)
      216       216    2               if (inp->in_info[i+1]==0) {
      217       217    3                  assert(tokens[token->t_token].t_type[i]==0);
      218       218    3                  token->t_att[i].aw=0;
      219       219    3               } else {
      220       220    3                  token_p ct = curtoken;
      221       221    3
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      222       222    3                  curtoken = tp;
      223       223    3                  result=compute(&enodes[inp->in_info[i+1]]);
      224       224    3                  curtoken = ct;
      225       225    3                  assert(tokens[token->t_token].t_type[i]==result.e_typ);
      226       226    3                  if (result.e_typ==EV_INT)
      227       227    3                     token->t_att[i].aw=result.e_v.e_con;
      228       228    3                  else if (result.e_typ==EV_ADDR)
      229       229    3                     token->t_att[i].aa= result.e_v.e_addr;
      230       230    3                  else
      231       231    3                     token->t_att[i].ar=result.e_v.e_reg;
      232       232    3               }
      233       233    2            stackheight = sh;
      234       234    2            return;
      235       235    2         }
      236       236    1        }
      237       237
      238       238             eqtoken(tp1,tp2) token_p tp1,tp2; {
      239       239    1         register i;
      240       240    1         register tkdef_p tdp;
      241       241    1
      242       242    1         if (tp1->t_token!=tp2->t_token)
      243       243    1            return(0);
      244       244    1         if (tp1->t_token==0)
      245       245    1            return(1);
      246       246    1         if (tp1->t_token==-1) {
      247       247    2            if (tp1->t_att[0].ar!=tp2->t_att[0].ar)
      248       248    2               return(0);
      249       249    2            return(1);
      250       250    2         }
      251       251    1         tdp = &tokens[tp1->t_token];
      252       252    1         for (i=0;i<TOKENSIZE;i++)
      253       253    1            switch(tdp->t_type[i]) {
      254       254    2            default:
      255       255    2               return(1);
      256       256    2            case EV_INT:
      257       257    2               if (tp1->t_att[i].aw != tp2->t_att[i].aw)
      258       258    2                  return(0);
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      259       259    2               break;
      260       260    2            case EV_REG:
      261       261    2               if (tp1->t_att[i].ar != tp2->t_att[i].ar)
      262       262    2                  return(0);
      263       263    2               break;
      264       264    2            case EV_ADDR:
      265       265    2               if (strcmp(tp1->t_att[i].aa.ea_str, tp2->t_att[i].aa.ea_str))
      266       266    2                  return(0);
      267       267    2               if (tp1->t_att[i].aa.ea_off!=tp2->t_att[i].aa.ea_off)
      268       268    2                  return(0);
      269       269    2               break;
      270       270    2            }
      271       271    1         return(1);
      272       272    1        }
      273       273
      274       274             distance(cindex) {
      275       275    1         register char *bp;
      276       276    1         register i;
      277       277    1         register token_p tp;
      278       278    1         int tokexp,tpl;
      279       279    1         int expsize,toksize,exact;
      280       280    1         int xsekt=0;
      281       281    1
      282       282    1         bp = &coderules[cindex];
      283       283    1        #ifndef NDEBUG
      284       284    1         if (*bp==DO_DLINE) {
      285       285    2            ++bp;
      286       286    2            getint(i,bp);
      287       287    2         }
      288       288    1        #endif
      289       289    1         switch( (*bp)&037 ) {
      290       290    2         default:
      291       291    2            return(stackheight==0 ? 0 : 100);
      292       292    2         case DO_MATCH:
      293       293    2            break;
      294       294    2         case DO_XXMATCH:
      295       295    2            xsekt++;
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      296       296    2         case DO_XMATCH:
      297       297    2            xsekt++;
      298       298    2            break;
      299       299    2         }
      300       300    1         tpl= ((*bp++)>>5)&07;
      301       301    1         if (stackheight < tpl) {
      302       302    2            if (xsekt)
      303       303    2               return(MAXINT);
      304       304    2            tpl = stackheight;
      305       305    2         } else
      306       306    1            if (stackheight != tpl && xsekt==2)
      307       307    1               return(MAXINT);
      308       308    1         exact=0;
      309       309    1         tp= &fakestack[stackheight-1];
      310       310    1         for (i=0;i<tpl;i++,tp--) {
      311       311    2            getint(tokexp,bp);
      312       312    2            if (!match(tp, &machsets[tokexp], 0)) {
      313       313    3               if (xsekt)
      314       314    3                  return(MAXINT);
      315       315    3               expsize = ssize(tokexp);
      316       316    3               toksize = tsize(tp);
      317       317    3               if (expsize>toksize)
      318       318    3                  return(100);
      319       319    3               if (expsize<toksize)
      320       320    3                  return(99-i);
      321       321    3            } else
      322       322    2               exact++;
      323       323    2         }
      324       324    1         if (exact==tpl) {
      325       325    2            if (xsekt)
      326       326    2               return(0);
      327       327    2            return(10-exact);
      328       328    2         }
      329       329    1         return(20-exact);
      330       330    1        }
      331       331
      332       332             unsigned costcalc(cost) cost_t cost; {
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      333       333    1         extern unsigned cc1,cc2,cc3,cc4;
      334       334    1
      335       335    1         return(cost.ct_space*cc1/cc2 + cost.ct_time*cc3/cc4);
      336       336    1        }
      337       337
      338       338             ssize(tokexpno) {
      339       339    1
      340       340    1         return(machsets[tokexpno].set_size);
      341       341    1        }
      342       342
      343       343             tsize(tp) register token_p tp; {
      344       344    1
      345       345    1         if (tp->t_token==-1)
      346       346    1            return(machregs[tp->t_att[0].ar].r_size);
      347       347    1         return(tokens[tp->t_token].t_size);
      348       348    1        }
      349       349
      350       350             #ifdef MAXSPLIT
      351       351   *S*       instsize(tinstno,tp) token_p tp; {
      352       352   *S*        inst_p inp;
      353       353   *S*        struct reginfo *rp;
      354       354   *S*
      355       355   *S*        inp = &tokeninstances[tinstno];
      356       356   *S*        switch(inp->in_which) {
      357       357   *S*        default:
      358       358   *S*           assert(FALSE);
      359       359   *S*        case IN_COPY:
      360       360   *S*           assert(inp->in_info[0]<=1);
      361       361   *S*       #if MAXMEMBERS!=0
      362       362   *S*           if (inp->in_info[1]==0)
      363       363   *S*       #endif
      364       364   *S*              return(tsize(tp));
      365       365   *S*       #if MAXMEMBERS!=0
      366       366   *S*           else {
      367       367   *S*              assert(tp->t_token == -1);
      368       368   *S*              rp = &machregs[tp->t_att[0].ar];
      369       369   *S*              return(machregs[rp->r_members[inp->in_info[1]-1]].r_size);
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=11 
      370       370   *S*           }
      371       371   *S*       #endif
      372       372   *S*        case IN_RIDENT:
      373       373   *S*           return(machregs[inp->in_info[0]].r_size);
      374       374   *S*        case IN_ALLOC:
      375       375   *S*           assert(FALSE);  /* cannot occur in splitting coercion */
      376       376   *S*        case IN_DESCR:
      377       377   *S*        case IN_S_DESCR:
      378       378   *S*        case IN_D_DESCR:
      379       379   *S*           return(tokens[inp->in_info[0]].t_size);
      380       380   *S*        }
      381       381   *S*       }
      382       382   *S*       #endif MAXSPLIT
      383       383
      384       384             tref(tp,amount) register token_p tp; {
      385       385    1         register i;
      386       386    1         register tkdef_p tdp;
      387       387    1
      388       388    1         if (tp->t_token==-1)
      389       389    1            chrefcount(tp->t_att[0].ar,amount,FALSE);
      390       390    1         else {
      391       391    2            tdp= &tokens[tp->t_token];
      392       392    2            for(i=0;i<TOKENSIZE;i++)
      393       393    2               if (tdp->t_type[i]==EV_REG)
      394       394    2                  chrefcount(tp->t_att[i].ar,amount,FALSE);
      395       395    2         }
      396       396    1        }
      397       397
      398       398             #define MAXSAVE 10
      399       399             /* A few routines to save the top of the current stack,
      400       400                restore it and check whether a certain register is present in the
      401       401                saved stack
      402       402             */
      403       403             token_t aside[MAXSAVE] ;
      404       404             int aside_length = -1 ;
      405       405
      406       406             save_stack(tp) register token_p tp ; {
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=12 
      407       407    1         int i ;
      408       408    1
      409       409    1         aside_length = &fakestack[stackheight-1] -tp;
      410       410    1         assert(aside_length<=MAXSAVE);
      411       411    1        #ifndef NDEBUG
      412       412    1         if (aside_length!=0 && Debug>1)
      413       413    1            fprintf(stderr,"Saving %d items from fakestack\n",aside_length);
      414       414    1        #endif
      415       415    1         for (i=1;i<=aside_length;i++)
      416       416    1            aside[i-1] = tp[i];
      417       417    1         stackheight -= aside_length;
      418       418    1        }
      419       419
      420       420             in_stack(reg) {
      421       421    1         register token_p tp ;
      422       422    1         register i ;
      423       423    1         register tkdef_p tdp ;
      424       424    1
      425       425    1         for ( i=0, tp=aside ; i<aside_length ; i++, tp++ )
      426       426    1            if (tp->t_token==-1) {
      427       427    2               if(tp->t_att[0].ar==reg)
      428       428    2                  goto gotone ;
      429       429    2            } else {
      430       430    2               tdp = &tokens[tp->t_token];
      431       431    2               for(i=0;i<TOKENSIZE;i++)
      432       432    2                  if (tdp->t_type[i]==EV_REG &&
      433       433    2                      tp->t_att[i].ar==reg)
      434       434    2                     goto gotone ;
      435       435    2            }
      436       436    1         return 0 ;
      437       437    1        gotone:
      438       438    1        #ifndef NDEBUG
      439       439    1         if ( Debug>2 )
      440       440    1            fprintf(stderr,"Register %d present on non-visible stack\n",
      441       441    1               reg ) ;
      442       442    1        #endif
      443       443    1         return 1 ;
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=13 
      444       444    1        }
      445       445
      446       446             rest_stack() {
      447       447    1         register int i ;
      448       448    1
      449       449    1         assert(aside_length!= -1);
      450       450    1        #ifndef NDEBUG
      451       451    1         if (aside_length!=0 && Debug>1)
      452       452    1            fprintf(stderr,"Restoring %d items to fakestack(%d)\n",
      453       453    1               aside_length,stackheight);
      454       454    1        #endif
      455       455    1         for (i=0;i<aside_length;i++)
      456       456    1            fakestack[stackheight++] = aside[i];
      457       457    1         aside_length= -1 ;
      458       458    1        }
      459       459
      460       460             #ifdef MAXSPLIT
      461       461   *S*       split(tp,ip,ply,toplevel) token_p tp; register int *ip; {
      462       462   *S*        register c2_p cp;
      463       463   *S*        token_t savestack[MAXSAVE];
      464       464   *S*        int ok;
      465       465   *S*        register i;
      466       466   *S*        int diff;
      467       467   *S*        token_p stp;
      468       468   *S*        int tpl;
      469       469   *S*
      470       470   *S*        for (cp=c2coercs;cp->c2_texpno>=0; cp++) {
      471       471   *S*           if (!match(tp,&machsets[cp->c2_texpno],0))
      472       472   *S*              continue;
      473       473   *S*           ok=1;
      474       474   *S*           for (i=0; ok && i<cp->c2_nsplit;i++) {
      475       475   *S*              if (ip[i]==0)
      476       476   *S*                 goto found;
      477       477   *S*              if (instsize(cp->c2_repl[i],tp) != ssize(ip[i]))
      478       478   *S*                 ok=0;
      479       479   *S*           }
      480       480   *S*           goto found;
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=14 
      481       481   *S*        }
      482       482   *S*        return(0);
      483       483   *S*       found:
      484       484   *S*        assert(stackheight+cp->c2_nsplit-1<MAXFSTACK);
      485       485   *S*        save_stack(tp);
      486       486   *S*        tpl = tokpatlen;
      487       487   *S*        tokpatlen = 1;
      488       488   *S*        codegen(&coderules[cp->c2_codep],ply,toplevel,MAXINT,0);
      489       489   *S*        tokpatlen = tpl;
      490       490   *S*        rest_stack();
      491       491   *S*        return(cp->c2_nsplit);
      492       492   *S*       }
      493       493   *S*       #endif MAXSPLIT
      494       494
      495       495             unsigned docoerc(tp,cp,ply,toplevel,forced) token_p tp; register c3_p cp; {
      496       496    1         unsigned cost;
      497       497    1         int tpl;        /* saved tokpatlen */
      498       498    1
      499       499    1         save_stack(tp) ;
      500       500    1         tpl = tokpatlen;
      501       501    1         tokpatlen = 1;
      502       502    1         cost = codegen(&coderules[cp->c3_codep],ply,toplevel,MAXINT,forced);
      503       503    1         tokpatlen = tpl;
      504       504    1         rest_stack() ;
      505       505    1         nallreg = 0;
      506       506    1         return(cost);
      507       507    1        }
      508       508
      509       509             unsigned stackupto(limit,ply,toplevel) token_p limit; {
      510       510    1         token_t savestack[MAXFSTACK];
      511       511    1         token_p stp;
      512       512    1         int i,diff;
      513       513    1         int tpl;        /* saved tokpatlen */
      514       514    1         int nareg;  /* saved nareg */
      515       515    1         int areg[MAXALLREG];
      516       516    1         register c1_p cp;
      517       517    1         register token_p tp;
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=15 
      518       518    1         unsigned totalcost=0;
      519       519    1         struct reginfo *rp,**rpp;
      520       520    1
      521       521    1         for (tp=fakestack;tp<=limit;limit--) {
      522       522    2            for (cp=c1coercs;cp->c1_texpno>=0; cp++) {
      523       523    3               if (match(tp,&machsets[cp->c1_texpno],cp->c1_expr)) {
      524       524    4                  if (cp->c1_prop>=0) {
      525       525    5                     for (rpp=reglist[cp->c1_prop];
      526       526    5                            (rp = *rpp)!=0 &&
      527       527    5                            getrefcount(rp-machregs)!=0;
      528       528    5                          rpp++)
      529       529    5                        ;
      530       530    5                     if (rp==0)
      531       531    5                        continue;
      532       532    5                        /* look for other possibility */
      533       533    5                  }
      534       534    4                  stp = &fakestack[stackheight-1];
      535       535    4                  diff = stp -tp;
      536       536    4                  assert(diff<=MAXFSTACK);
      537       537    4                  for (i=1;i<=diff;i++)
      538       538    4                     savestack[i-1] = tp[i];
      539       539    4                  stackheight -= diff;
      540       540    4                  tpl = tokpatlen;
      541       541    4                  tokpatlen = 1;
      542       542    4                  nareg = nallreg;
      543       543    4                  for (i=0;i<nareg;i++)
      544       544    4                     areg[i] = allreg[i];
      545       545    4                  if (cp->c1_prop>=0) {
      546       546    5                     nallreg=1; allreg[0] = rp-machregs;
      547       547    5                     chrefcount(allreg[0],1,FALSE);
      548       548    5                  } else
      549       549    4                     nallreg=0;
      550       550    4                  totalcost+= codegen(&coderules[cp->c1_codep],ply,toplevel,MAXINT,0);

      551       551    4                  tokpatlen = tpl;
      552       552    4                  for (i=0;i<diff;i++)
      553       553    4                     fakestack[stackheight++] = savestack[i];
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=16 
      554       554    4                  nallreg=nareg;
      555       555    4                  for (i=0;i<nareg;i++)
      556       556    4                     allreg[i] = areg[i];
      557       557    4                  goto contin;
      558       558    4               }
      559       559    3            }
      560       560    2            assert(FALSE);
      561       561    2         contin: ;
      562       562    2         }
      563       563    1         return(totalcost);
      564       564    1        }
      565       565
      566       566             c3_p findcoerc(tp,tep) token_p tp; set_p tep; {
      567       567    1         register c3_p cp;
      568       568    1         token_t rtoken;
      569       569    1         register i;
      570       570    1         register struct reginfo **rpp;
      571       571    1
      572       572    1         for (cp=c3coercs;cp->c3_texpno>=0; cp++) {
      573       573    2            if (tp!=(token_p) 0) {
      574       574    3               if (cp->c3_texpno==0)
      575       575    3                  continue;
      576       576    3               if (!match(tp,&machsets[cp->c3_texpno],cp->c3_expr))
      577       577    3                  continue;
      578       578    3            } else {
      579       579    3               if (cp->c3_texpno!=0)
      580       580    3                  continue;
      581       581    3            }
      582       582    2            if (cp->c3_prop<0) {   /* no reg needed */
      583       583    3               cinstance(cp->c3_repl,&rtoken,tp,0);
      584       584    3               if (match(&rtoken,tep,0))
      585       585    3                  return(cp);
      586       586    3            } else {
      587       587    3               curreglist = (rl_p) myalloc(sizeof (rl_t));
      588       588    3               curreglist->rl_n = 0;
      589       589    3               for (rpp=reglist[cp->c3_prop];*rpp;rpp++) {
      590       590    4                  i = *rpp - machregs;
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=17 
      591       591    4                  cinstance(cp->c3_repl,&rtoken,tp,i);
      592       592    4                  if (match(&rtoken,tep,0))
      593       593    4                     curreglist->rl_list[curreglist->rl_n++] = i;
      594       594    4               }
      595       595    3               if (curreglist->rl_n != 0)
      596       596    3                  return(cp);
      597       597    3               myfree(curreglist);
      598       598    3            }
      599       599    2         }
      600       600    1         return(0);      /* nothing found */
      601       601    1        }
      602       602
      603       603             itokcost() {
      604       604    1         register tkdef_p tdp;
      605       605    1
      606       606    1         for(tdp=tokens+1;tdp->t_size!=0;tdp++)
      607       607    1            tdp->t_cost.ct_space = costcalc(tdp->t_cost);
      608       608    1        }
      609       609
      610       610             error(s,a1,a2,a3,a4,a5,a6,a7,a8) char *s; {
      611       611    1
      612       612    1         fprintf(stderr,"Error: ");
      613       613    1         fprintf(stderr,s,a1,a2,a3,a4,a5,a6,a7,a8);
      614       614    1         fprintf(stderr,"\n");
      615       615    1        #ifdef TABLEDEBUG
      616       616    1         ruletrace();
      617       617    1        #endif
      618       618    1         out_finish();
      619       619    1         exit(8);
      620       620    1        }
      621       621
      622       622             fatal(s,a1,a2,a3,a4,a5,a6,a7,a8) char *s; {
      623       623    1
      624       624    1         fprintf(stderr,"Fatal: ");
      625       625    1         fprintf(stderr,s,a1,a2,a3,a4,a5,a6,a7,a8);
      626       626    1         fprintf(stderr,"\n");
      627       627    1        #ifdef TABLEDEBUG
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=18 
      628       628    1         ruletrace();
      629       629    1        #endif
      630       630    1         out_finish();
      631       631    1         abort();
      632       632    1         exit(8);
      633       633    1        }
      634       634
      635       635             #ifdef TABLEDEBUG
      636       636
      637       637             ruletrace() {
      638       638    1         register i;
      639       639    1         extern int tablelines[MAXTDBUG];
      640       640    1         extern int ntableline;
      641       641    1         extern char *tablename;
      642       642    1
      643       643    1         fprintf(stderr,"Last code rules used\n");
      644       644    1         i=ntableline-1;
      645       645    1         while(i!=ntableline) {
      646       646    2            if (i<0)
      647       647    2               i += MAXTDBUG;
      648       648    2            if (tablelines[i]!=0)
      649       649    2               fprintf(stderr,"\%d: \"%s\", line %d\n",i,tablename,tablelines[i]);
      650       650    2            i--;
      651       651    2         }
      652       652    1        }
      653       653             #endif
      654       654
      655       655             #ifndef NDEBUG
      656       656             badassertion(asstr,file,line) char *asstr, *file; {
      657       657    1
      658       658    1         fatal("\"%s\", line %d:Assertion \"%s\" failed",file,line,asstr);
      659       659    1        }
      660       660             #endif
      661       661
      662       662             max(a,b) {
      663       663    1
      664       664    1         return(a>b ? a : b);
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=19 
      665       665    1        }
      666       666
      667       667
      668       668             dump_stack()
      669       669             {
      670       670    1           extern token_t fakestack[];
      671       671    1           extern int stackheight;
      672       672    1           token_t *tp;
      673       673    1           int toknum, i;
      674       674    1
      675       675    1           fprintf(stderr, "STACK DUMP: ");
      676       676    1           for (tp=&fakestack[stackheight-1]; tp>=&fakestack[0]; tp--) {
      677       677    2              /*   STACK DUMP:  %1  %2  ...  %n    */
      678       678    2              toknum = tp->t_token;
      679       679    2              fprintf(stderr, "{%d", toknum);
      680       680    2              if (toknum==-1)
      681       681    2                 fprintf(stderr,":R=%d", tp->t_att[0].ar);
      682       682    2              else if (toknum>0) {
      683       683    3                 for (i=0; i<TOKENSIZE; i++) {
      684       684    4                    switch (tokens[toknum].t_type[i]) {
      685       685    5                       case 0:       break;
      686       686    5                       case EV_INT:  fprintf(stderr,",I=%ld", tp->t_att[i].aw);
      687       687    5                                     break;
      688       688    5                       case EV_REG:  fprintf(stderr,",R=%d", tp->t_att[i].ar);
      689       689    5                                     break;
      690       690    5                       case EV_ADDR: fprintf(stderr,",A=%s+%ld",
      691       691    5                                             tp->t_att[i].aa.ea_str,
      692       692    5                                             tp->t_att[i].aa.ea_off);
      693       693    5                                     break;
      694       694    5                    }
      695       695    4                 }
      696       696    3              }
      697       697    2              fprintf(stderr,"} ");
      698       698    2           }
      699       699    1           fprintf(stderr,"\n");
      700       700    1        }
      701       701
CC.C03    File=zbg$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=20 
---  Include file information  ---

   zbg$assert:h.:ZBC3TOU. is referenced
   stdio:h.:LIB_E05. is referenced
   zbg$param:h.:ZBC3TOU. is referenced
   tables:h.:ZBC3TOU. is referenced
   zbg$types:h.:ZBC3TOU. is referenced
   cgg_cg:h.:ZBC3TOU. is referenced
   zbg$data:h.:ZBC3TOU. is referenced
   zbg$result:h.:ZBC3TOU. is referenced
   zbg$extern:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbg$subr:c.:ZBC3TSI
