
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:1    
        1        1        Z_SYS_OPEN: proc( path, flags, fp);
        2        2
        3        3    1   dcl  path  char(4096);
        4        4    1   dcl  flags sbin;       /**  Passed by Value!!!! **/
        5        5    1   dcl  fp    ptr;        /**  Pointer to a Z_SYS_FILDES   **/
        6        6
        7        7
        8        8        %include CP_6;
        9     5567        %include CP_6_SUBS;
       10     6107        %include zbm$system$system_n;
       11     6353
       12     6354        %Z_SYS_FTAB(STCLASS="STATIC SYMDEF",DCBS="0*0");
       13     6407        %Z_SYS_FILDES;
       14     6450
       15     6451    1   dcl  Z_RETURN_INT   entry(1);
       16     6452    1   dcl  Z_GET_IOB      entry(2);
       17     6453    1   dcl  Z_GET_FP_DCB   entry(2);
       18     6454    1   dcl  Z_ALLOC_BUF    entry(1) altret;
       19     6455    1   dcl  Z_SYS_FSIZE    entry(1) altret;
       20     6456
       21     6457    1   dcl  M$SI     dcb;
       22     6458    1   dcl  M$LO     dcb;
       23     6459    1   dcl  M$DO     dcb;
       24     6460
       25     6461    1   dcl  Z_BIN_MARKER(0:1) char(1) constant symdef init(bitasc('177'o),bitasc('123'o));
       26     6462
       27     6463
       28     6464
       29     6465        %F$DCB(STCLASS="BASED(DCB$)");
       30     6522
       31     6523        %FPT_OPEN( FPTN        =  OPEN_FPT,   STCLASS="");
       32     6632
       33     6633        %FPT_OPEN( FPTN        =  OPEN1,
       34     6634                   STCLASS     =  CONSTANT,
       35     6635                   ASN         =  FILE,
       36     6636                   NAME        =  open1_name,
       37     6637                   ACCT        =  open1_acct,
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:2    
       38     6638                   PASS        =  open1_pass,
       39     6639                   WSN         =  open1_wsn,
       40     6640                   SN          =  open1_sn);
       41     6749
       42     6750        %FPT_FID(  FPTN        =  FPT_FID1,
       43     6751                   STCLASS     =  STATIC,
       44     6752                   ACCT        =  open1_acct,
       45     6753                   NAME        =  open1_name,
       46     6754                   PASS        =  open1_pass,
       47     6755                   WSN         =  open1_wsn,
       48     6756                   SN          =  open1_sn,
       49     6757        /********  ASN         =  "OPEN_FPT.V.ASN#",  **********/
       50     6758                   SNAME       =  YES,
       51     6759                   SACCT       =  YES,
       52     6760                   SPASS       =  YES,
       53     6761                   SSN         =  YES,
       54     6762                   SWSN        =  YES);
       55     6785
       56     6786        %VLP_NAME( FPTN        =  open1_name, LEN=31);
       57     6813
       58     6814        %VLP_ACCT( FPTN        =  open1_acct);
       59     6827
       60     6828        %VLP_PASS( FPTN        =  open1_pass);
       61     6841
       62     6842        %VLP_WSN ( FPTN        =  open1_wsn);
       63     6855
       64     6856        %VLP_SN  ( FPTN        =  open1_sn);
       65     6869
       66     6870        %FPT_GETDCB(  FPTN     =  GETDCB,
       67     6871                      STCLASS  =  "");
       68     6886
       69     6887        %VLP_NAME(    FPTN     =  DCBNAME);
       70     6914
       71     6915        %FPT_GETDCB(  FPTN     =  GETDCB_CONST,
       72     6916                      STCLASS  =  CONSTANT);
       73     6931
       74     6932        %FPT_READ( FPTN        =  READ,
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:3    
       75     6933                   BUF         =  NIL,
       76     6934                   KEY         =  KEY,
       77     6935                   KEYS        =  YES);
       78     6974
       79     6975        %FPT_WRITE(FPTN        =  WRITE,
       80     6976                   BUF         =  NIL,
       81     6977                   BP          =  YES,
       82     6978                   KEY         =  KEY);
       83     7009
       84     7010    1   dcl  1  KEY      STATIC,
       85     7011    1           2  L     ubin(9) unal init(3),
       86     7012    1           2  BLOCK ubin(27)unal init(0);
       87     7013
       88     7014        %FPT_CLOSE(FPTN        =  CLOSE_CONST,
       89     7015                   STCLASS     =  CONSTANT,
       90     7016                   DISP        =  SAVE);
       91     7058
       92     7059        %FPT_CLOSE(FPTN        =  CLOSE, STCLASS="");
       93     7101
       94     7102
       95     7103        %FPT_RELDCB(FPTN       =  RELDCB_CONST,
       96     7104                    STCLASS    =  CONSTANT);
       97     7118
       98     7119        %FPT_RELDCB(FPTN       =  FPT_RELDCB,
       99     7120                    STCLASS    =  "");
      100     7134
      101     7135
      102     7136    1   dcl  i     sbin;
      103     7137    1   dcl  errc  sbin;
      104     7138
      105     7139    1   dcl  flptr ptr;
      106     7140
      107     7141    1   dcl  1  flag       redef flptr, /* kludge to get param passed by val*/
      108     7142    1           2  org     ubin(9) unal,
      109     7143    1           2  *       bit(9),
      110     7144    1           2  dvbyte  bit(9)  unal,
      111     7145    1           2  strpvfc bit(1)  unal,
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:4    
      112     7146    1           2  *       bit(4),
      113     7147    1           2  bin     bit(1)  unal,
      114     7148    1           2  mode    ubin(3) unal;
      115     7149
      116     7150    1   dcl  flg   sbin;
      117     7151    1   dcl  filep ptr;
      118     7152    1   dcl  it    sbin;
      119     7153    1   dcl  DCB$  ptr;
      120     7154    1   dcl  dont_open bit(1)   aligned;
      121     7155    1   dcl  BIN_BUF  char(%BIN_BLOCKSIZE);
      122     7156
      123     7157    1     OPEN_FPT    =  open1;
      124     7158    1     dont_open   =  '0'B;
      125     7159    1     OPEN_FPT.V_ =  vector(OPEN_FPT.V);
      126     7160    1     FPT_FID1.ASN_  = vector(OPEN_FPT.V.ASN#);
      127     7161    1     FPT_FID1.RES_  = vector(OPEN_FPT.V.RES#);
      128     7162
      129     7163    1     GETDCB     =  GETDCB_CONST;
      130     7164    1     GETDCB.V_  =  vector(GETDCB.V);
      131     7165    1     GETDCB.DCBNUM_  = vector(OPEN_FPT.V.DCB#);
      132     7166    1     GETDCB.DCBNAME_ = vector(DCBNAME);
      133     7167
      134     7168    1     flptr  = addr(flags);      /*  Copy value  */
      135     7169    1     flg    = flag.mode;     /*  and grab it */
      136     7170    2     do case(flg);
      137     7171    2     case(%OP_READ);      OPEN_FPT.V.FUN# = %IN#;
      138     7172    2     case(%OP_WRITE);
      139     7173    2        OPEN_FPT.V.ORG# = flag.org;
      140     7174    2        OPEN_FPT.V.FUN# = %CREATE#;
      141     7175    2        OPEN_FPT.V.EXIST# = %NEWFILE#;
      142     7176    2        if flag.bin then
      143     7177    3        do;
      144     7178    3           OPEN_FPT.V.ORG# = %KEYED#;
      145     7179    3           OPEN_FPT.V.TYPE# = 'D ';
      146     7180    3        end;
      147     7181    2     case(%OP_APPEND);
      148     7182    2        OPEN_FPT.V.ORG# = flag.org;
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:5    
      149     7183    2        OPEN_FPT.V.FUN#   = %CREATE#;
      150     7184    2        OPEN_FPT.V.EXIST# = %OLDFILE#;
      151     7185    2        OPEN_FPT.V.ACS#   = %DIRECT#;
      152     7186    2        if flag.bin then
      153     7187    3        do;
      154     7188        /****** OPEN_FPT.V.FUN# = %UPDATE#;   ********************/
      155     7189    3           OPEN_FPT.V.ORG# = %KEYED#;
      156     7190    3           OPEN_FPT.V.TYPE# = 'D ';
      157     7191    3        end;
      158     7192    2     case(else);
      159     7193    2        goto err;              /**  FAILURE **/
      160     7194    2     end;
      161     7195    1     filep = addr(nil);
      162     7196    1   lookup:
      163     7197    2     do it = 3 to %SYS_NOPEN;
      164     7198    2        if Z_SYS_FTAB.O_FLAGS(it) = '0'B then
      165     7199    3        do;
      166     7200    3           filep = addr(Z_SYS_FTAB(it));
      167     7201    3           exit lookup;
      168     7202    3        end;
      169     7203    2     end;
      170     7204    1     if filep = addr(nil) then goto err;
      171     7205
      172     7206    1     if (it < 3) then
      173     7207    2     do;
      174     7208    2        call Z_GET_IOB(it,i);
      175     7209    2        if (i > 0) then Z_SYS_FTAB.DCB#(it) = i;
      176     7210    2     end;
      177     7211
      178     7212    1     i = 0;
      179     7213    1     if addr(path) ~= addr(nil)
      180     7214    1        then call index(i,%binasc(0),path);
      181     7215    1     if  (i = 0) then
      182     7216    2     do;   /**   Scratch file!  **/
      183     7217    2        OPEN_FPT.v.disp# = %SCRATCH#;
      184     7218    2        OPEN_FPT.v.fun#  = %CREATE#;
      185     7219    2        OPEN_FPT.v.acs#  = %DIRECT#;
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:6    
      186     7220    2        open1_name.l#    = 8;
      187     7221    2        open1_name.name# = '*scrchXX';
      188     7222    2        call binchar( substr(open1_name.name#,6,2), it);
      189     7223    2     end;
      190     7224    1        else
      191     7225    2     do;
      192     7226    2        if (i>4)and(substr(path,,4)='dcb=' or substr(path,,4)='DCB=')then
      193     7227    3        do;   /*  User requesting a specific dcb assignment */
      194     7228    3           if (it > 3)  and  (Z_SYS_FTAB.DCB#(it) > 0) then
      195     7229    4           do;   /**  Release any existing dcb    **/
      196     7230    4              FPT_RELDCB = RELDCB_CONST;
      197     7231    4              FPT_RELDCB.V_ = vector(FPT_RELDCB.V);
      198     7232    4              FPT_RELDCB.V.DCB# = Z_SYS_FTAB.DCB#(it);
      199     7233    4              Z_SYS_FTAB.DCB#(it) = 0;
      200     7234    5              call M$RELDCB(FPT_RELDCB) whenaltreturn do; ; end;
      201     7235    4           end;
      202     7236    3           DCBNAME.L# = i - 4;
      203     7237    3           DCBNAME.NAME# = substr(path,4,i-4);
      204     7238    3           call M$GETDCB( GETDCB) altret( err );
      205     7239    3           dcb$ = dcbaddr (OPEN_FPT.V.DCB#);
      206     7240    3           Z_SYS_FTAB.DCB#(it) = OPEN_FPT.V.DCB#;
      207     7241    4           if dcb$->F$DCB.FCD# = '1'B then do;
      208     7242                /* See if it is open to the C library */
      209     7243    4              CALL Z_GET_FP_DCB (Z_SYS_FTAB.DCB#(it),Z_SYS_FTAB.fp$(it));
      210     7244    4              dont_open = '1'B;
      211     7245    4              end;
      212     7246    3           OPEN_FPT.NAME_ = vector(nil);
      213     7247    3           OPEN_FPT.ACCT_ = vector(nil);
      214     7248    3           OPEN_FPT.PASS_ = vector(nil);
      215     7249    3           OPEN_FPT.V.ASN#  = 0;
      216     7250    3           OPEN_FPT.V.INITZ.REASSIGN# = '1'b;
      217     7251    3           OPEN_FPT.V.INITZ.SCRUB#    = '1'b;
      218     7252    3        end;
      219     7253    2           else
      220     7254    3        do;
      221     7255    3           FPT_FID1.TEXTFID_ = vector( substr(path,,i) );
      222     7256    3           call M$FID(FPT_FID1) altret(err);
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:7    
      223     7257    3        end;
      224     7258    2     end;
      225     7259
      226     7260    1     if Z_SYS_FTAB.DCB#(it) = 0 then
      227     7261    2     do;   /**  We need to allocate a DCB!  **/
      228     7262    2        DCBNAME.L# = 6;
      229     7263    2        DCBNAME.NAME# = 'SDCBXX';
      230     7264    2        call binchar( substr(DCBNAME.NAME#,4,2), it);
      231     7265    2        call M$GETDCB( GETDCB ) altret(err);
      232     7266    2        Z_SYS_FTAB.DCB#(it) = OPEN_FPT.V.DCB#;
      233     7267    2     end;
      234     7268    1     OPEN_FPT.V.DCB# = Z_SYS_FTAB.DCB#(it);
      235     7269    1     DCB$ = dcbaddr(OPEN_FPT.V.DCB#);
      236     7270
      237     7271    1     if (~dont_open) then
      238     7272    1        call M$OPEN(OPEN_FPT) altret(err);
      239     7273    1     Z_SYS_FTAB.O_FLAGS(it)         = binbit(flag.mode,36);
      240     7274    1     Z_SYS_FTAB.O_FLAGS.BIN(it)     = flag.bin;
      241     7275    1     Z_SYS_FTAB.O_FLAGS.DVBYTE(it)  = flag.dvbyte;
      242     7276    1     Z_SYS_FTAB.O_FLAGS.STRPVFC(it) = flag.strpvfc;
      243     7277    1     fp = filep;
      244     7278    1     Z_SYS_FTAB.BLKNUM(it)  = 0;
      245     7279    1     if flag.mode = %OP_WRITE
      246     7280    1        then Z_SYS_FTAB.BLKLAST(it) = -1;
      247     7281    1        else Z_SYS_FTAB.BLKLAST(it) = DCB$->F$DCB.NRECS#-1;
      248     7282    1     if flag.mode = %OP_APPEND
      249     7283    1        then Z_SYS_FTAB.BLKNUM(it) = DCB$->F$DCB.NRECS#;
      250     7284    1     call Z_ALLOC_BUF(Z_SYS_FTAB(it)) altret(errx);
      251     7285    1     Z_SYS_FTAB.BLKLEN(it) = 0;
      252     7286    1     Z_SYS_FTAB.BLKPOS(it) = 0;
      253     7287    1     Z_SYS_FTAB.BLKNUM(it) = 0;
      254     7288    1     if Z_SYS_FTAB.o_flags.BIN(it) then
      255     7289    2     do;   /*****  Allocate a buffer to hold records    ********/
      256     7290    2        Z_SYS_FTAB.o_flags.SEEK(it) = '1'B;
      257     7291    2        Z_SYS_FTAB.LBLKLEN(it)=0;
      258     7292    2        if flag.mode = %OP_APPEND then
      259     7293    3        do;
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:8    
      260     7294    3           Z_SYS_FTAB.BLKNUM(it) = maximum(0,DCB$->F$DCB.NRECS#-1);
      261     7295    3           if DCB$->F$DCB.NRECS# > 0
      262     7296    3              then call Z_SYS_FSIZE( Z_SYS_FTAB(it) );
      263     7297    3           Z_SYS_FTAB.BLKPOS(it) = Z_SYS_FTAB.LBLKLEN(it);
      264     7298    4           if Z_SYS_FTAB.BLKPOS(it) = %BIN_BLOCKSIZE then do;
      265     7299    4              Z_SYS_FTAB.BLKPOS(it) = 0;
      266     7300    4              Z_SYS_FTAB.BLKNUM(it) = Z_SYS_FTAB.BLKNUM(it) + 1;
      267     7301    4              end;
      268     7302    3        end;
      269     7303    2     end;
      270     7304    1     call Z_RETURN_INT(1);
      271     7305
      272     7306    1   errx:
      273     7307    1        CLOSE       = CLOSE_CONST;
      274     7308    1        CLOSE.V_    = vector(CLOSE.V);
      275     7309    1        CLOSE.V.DCB#= OPEN_FPT.V.DCB#;
      276     7310    1        Z_SYS_FTAB.O_FLAGS(it) = '0'b;
      277     7311    1        call M$CLOSE(CLOSE) altret(err);
      278     7312    1   err:
      279     7313    1     call  Z_RETURN_INT(0);
      280     7314
      281     7315    1   end Z_SYS_OPEN;
      282     7316        %EOD;

PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:9    
--  Include file information  --

   zbm$system$system_n.:ZBC3TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z_SYS_OPEN.

   Procedure Z_SYS_OPEN requires 405 words for executable code.
   Procedure Z_SYS_OPEN requires 372 words of local(AUTO) storage.

PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:10   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:11   
          MINI XREF LISTING

CLOSE
      7082**DCL      7307<<ASSIGN   7311<>CALL
CLOSE.SN_
      7082**DCL      7082--REDEF
CLOSE.UTL_
      7083**DCL      7083--REDEF
CLOSE.V
      7087**DCL      7308--ASSIGN
CLOSE.V.DCB#
      7088**DCL      7309<<ASSIGN
CLOSE.V.EXPIRE#
      7097**DCL      7097--REDEF
CLOSE.V.TYPE#
      7095**DCL      7095--REDEF
CLOSE.V.XTNSIZE#
      7092**DCL      7092--REDEF    7094--REDEF
CLOSE.V_
      7082**DCL      7308<<ASSIGN
CLOSE_CONST
      7039**DCL      7307>>ASSIGN
CLOSE_CONST.SN_
      7039**DCL      7039--REDEF
CLOSE_CONST.UTL_
      7040**DCL      7040--REDEF
CLOSE_CONST.V
      7044**DCL      7039--DCLINIT
CLOSE_CONST.V.EXPIRE#
      7054**DCL      7054--REDEF
CLOSE_CONST.V.TYPE#
      7052**DCL      7052--REDEF
CLOSE_CONST.V.XTNSIZE#
      7049**DCL      7049--REDEF    7051--REDEF
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:12   
DCB$
      7153**DCL      6466--IMP-PTR  7239<<ASSIGN   7241>>IF       7269<<ASSIGN   7281>>ASSIGN   7283>>ASSIGN
      7294>>ASSIGN   7295>>IF
DCBNAME
      6912**DCL      7166--ASSIGN
DCBNAME.L#
      6912**DCL      7236<<ASSIGN   7262<<ASSIGN
DCBNAME.NAME#
      6912**DCL      7237<<ASSIGN   7263<<ASSIGN   7264<<CALLBLT
DONT_OPEN
      7154**DCL      7158<<ASSIGN   7244<<ASSIGN   7271>>IF
ERR
      7313**LABEL    7193--GOTO     7204--GOTO     7238--CALLALT  7256--CALLALT  7265--CALLALT  7272--CALLALT
      7311--CALLALT
ERRX
      7307**LABEL    7284--CALLALT
F$DCB.ACTPOS
      6498**DCL      6498--REDEF
F$DCB.ARS#
      6472**DCL      6472--REDEF
F$DCB.ATTR
      6491**DCL      6492--REDEF
F$DCB.BORROW
      6506**DCL      6506--REDEF    6506--REDEF    6506--REDEF
F$DCB.DCBNAME.L
      6520**DCL      6520--IMP-SIZ
F$DCB.EOMCHAR#
      6476**DCL      6476--REDEF
F$DCB.FCD#
      6485**DCL      7241>>IF
F$DCB.FLDID
      6501**DCL      6501--REDEF
F$DCB.FORM$
      6495**DCL      6495--REDEF
F$DCB.FSECT
      6511**DCL      6511--REDEF
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:13   
F$DCB.FSN#
      6488**DCL      6488--REDEF    6488--REDEF    6489--REDEF
F$DCB.HEADER$
      6494**DCL      6494--REDEF
F$DCB.IXTNSIZE#
      6492**DCL      6492--REDEF
F$DCB.LASTSTA$
      6481**DCL      6481--REDEF
F$DCB.LVL
      6507**DCL      6507--REDEF
F$DCB.NAME#.C
      6482**DCL      6482--REDEF
F$DCB.NOEOF
      6504**DCL      6504--REDEF
F$DCB.NRECS#
      6493**DCL      6493--REDEF    7281>>ASSIGN   7283>>ASSIGN   7294>>ASSIGN   7295>>IF
F$DCB.NRECX
      6512**DCL      6512--REDEF
F$DCB.OHDR
      6504**DCL      6504--REDEF
F$DCB.ORG#
      6487**DCL      6487--REDEF
F$DCB.PRECNO
      6510**DCL      6510--REDEF
F$DCB.RCSZ
      6516**DCL      6516--REDEF
F$DCB.RES#
      6483**DCL      6483--REDEF
F$DCB.SETX
      6495**DCL      6495--REDEF
F$DCB.TAB$
      6495**DCL      6495--REDEF
F$DCB.TDA
      6509**DCL      6510--REDEF
F$DCB.WSN#
      6483**DCL      6483--REDEF
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:14   
FILEP
      7151**DCL      7195<<ASSIGN   7200<<ASSIGN   7204>>IF       7277>>ASSIGN
FLAG.BIN
      7147**DCL      7176>>IF       7186>>IF       7274>>ASSIGN
FLAG.DVBYTE
      7144**DCL      7275>>ASSIGN
FLAG.MODE
      7148**DCL      7169>>ASSIGN   7273>>ASSIGN   7279>>IF       7282>>IF       7292>>IF
FLAG.ORG
      7142**DCL      7173>>ASSIGN   7182>>ASSIGN
FLAG.STRPVFC
      7145**DCL      7276>>ASSIGN
FLAGS
         4**DCL         1--PROC     7168--ASSIGN
FLG
      7150**DCL      7169<<ASSIGN   7170>>DOCASE
FLPTR
      7139**DCL      7141--REDEF    7168<<ASSIGN
FP
         5**DCL         1--PROC     7277<<ASSIGN
FPT_FID1
      6773**DCL      7256<>CALL
FPT_FID1.ASN_
      6776**DCL      7160<<ASSIGN
FPT_FID1.RES_
      6776**DCL      7161<<ASSIGN
FPT_FID1.TEXTFID_
      6773**DCL      7255<<ASSIGN
FPT_FID1.V
      6777**DCL      6773--DCLINIT
FPT_RELDCB
      7131**DCL      7230<<ASSIGN   7234<>CALL
FPT_RELDCB.V
      7131**DCL      7231--ASSIGN
FPT_RELDCB.V.DCB#
      7131**DCL      7232<<ASSIGN
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:15   
FPT_RELDCB.V_
      7131**DCL      7231<<ASSIGN
GETDCB
      6882**DCL      7163<<ASSIGN   7238<>CALL     7265<>CALL
GETDCB.DCBNAME_
      6882**DCL      7166<<ASSIGN
GETDCB.DCBNUM_
      6882**DCL      7165<<ASSIGN
GETDCB.V
      6883**DCL      7164--ASSIGN
GETDCB.V_
      6882**DCL      7164<<ASSIGN
GETDCB_CONST
      6927**DCL      7163>>ASSIGN
GETDCB_CONST.V
      6928**DCL      6927--DCLINIT
I
      7136**DCL      7208<>CALL     7209>>IF       7209>>ASSIGN   7212<<ASSIGN   7214<<CALLBLT  7215>>IF
      7226>>IF       7236>>ASSIGN   7237>>ASSIGN   7255>>ASSIGN
IT
      7152**DCL      7197<<DOINDEX  7198>>IF       7200>>ASSIGN   7206>>IF       7208<>CALL     7209>>ASSIGN
      7222>>CALLBLT  7228>>IF       7228>>IF       7232>>ASSIGN   7233>>ASSIGN   7240>>ASSIGN   7243>>CALL
      7243>>CALL     7260>>IF       7264>>CALLBLT  7266>>ASSIGN   7268>>ASSIGN   7273>>ASSIGN   7274>>ASSIGN
      7275>>ASSIGN   7276>>ASSIGN   7278>>ASSIGN   7280>>ASSIGN   7281>>ASSIGN   7283>>ASSIGN   7284>>CALL
      7285>>ASSIGN   7286>>ASSIGN   7287>>ASSIGN   7288>>IF       7290>>ASSIGN   7291>>ASSIGN   7294>>ASSIGN
      7296>>CALL     7297>>ASSIGN   7297>>ASSIGN   7298>>IF       7299>>ASSIGN   7300>>ASSIGN   7300>>ASSIGN
      7310>>ASSIGN
KEY
      7010**DCL      6952--DCLINIT  6953--DCLINIT  6995--DCLINIT
LOOKUP
      7197**LABEL    7201--EXIT
M$CLOSE
      5495**DCL-ENT  7311--CALL
M$FID
      5558**DCL-ENT  7256--CALL
M$GETDCB
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:16   
      5501**DCL-ENT  7238--CALL     7265--CALL
M$OPEN
      5495**DCL-ENT  7272--CALL
M$RELDCB
      5501**DCL-ENT  7234--CALL
OPEN1
      6705**DCL      7157>>ASSIGN
OPEN1.ACSVEH_
      6707**DCL      6708--REDEF
OPEN1.ALTKEYS_
      6713**DCL      6714--REDEF    6714--REDEF
OPEN1.HDR_
      6712**DCL      6713--REDEF
OPEN1.TAB_
      6711**DCL      6712--REDEF
OPEN1.UHL_
      6705**DCL      6706--REDEF    6706--REDEF
OPEN1.V
      6714**DCL      6705--DCLINIT
OPEN1.V.FSN#
      6745**DCL      6745--REDEF    6745--REDEF
OPEN1.WSN_
      6711**DCL      6711--REDEF
OPEN1_ACCT
      6825**DCL      6710--DCLINIT  6774--DCLINIT
OPEN1_NAME
      6811**DCL      6706--DCLINIT  6774--DCLINIT
OPEN1_NAME.L#
      6811**DCL      7220<<ASSIGN
OPEN1_NAME.NAME#
      6811**DCL      7221<<ASSIGN   7222<<CALLBLT
OPEN1_PASS
      6839**DCL      6707--DCLINIT  6775--DCLINIT
OPEN1_SN
      6867**DCL      6705--DCLINIT  6775--DCLINIT
OPEN1_WSN
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:17   
      6853**DCL      6711--DCLINIT  6775--DCLINIT
OPEN_FPT
      6588**DCL      7157<<ASSIGN   7272<>CALL
OPEN_FPT.ACCT_
      6592**DCL      7247<<ASSIGN
OPEN_FPT.ACSVEH_
      6590**DCL      6591--REDEF
OPEN_FPT.ALTKEYS_
      6596**DCL      6597--REDEF    6597--REDEF
OPEN_FPT.HDR_
      6595**DCL      6596--REDEF
OPEN_FPT.NAME_
      6589**DCL      7246<<ASSIGN
OPEN_FPT.PASS_
      6590**DCL      7248<<ASSIGN
OPEN_FPT.TAB_
      6594**DCL      6595--REDEF
OPEN_FPT.UHL_
      6588**DCL      6589--REDEF    6589--REDEF
OPEN_FPT.V
      6597**DCL      7159--ASSIGN
OPEN_FPT.V.ACS#
      6608**DCL      7185<<ASSIGN   7219<<ASSIGN
OPEN_FPT.V.ASN#
      6607**DCL      7160--ASSIGN   7249<<ASSIGN
OPEN_FPT.V.DCB#
      6597**DCL      7165--ASSIGN   7239--ASSIGN   7240>>ASSIGN   7266>>ASSIGN   7268<<ASSIGN   7269--ASSIGN
      7309>>ASSIGN
OPEN_FPT.V.DISP#
      6613**DCL      7217<<ASSIGN
OPEN_FPT.V.EXIST#
      6601**DCL      7175<<ASSIGN   7184<<ASSIGN
OPEN_FPT.V.FSN#
      6628**DCL      6628--REDEF    6628--REDEF
OPEN_FPT.V.FUN#
      6607**DCL      7171<<ASSIGN   7174<<ASSIGN   7183<<ASSIGN   7218<<ASSIGN
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:18   
OPEN_FPT.V.INITZ.REASSIGN#
      6598**DCL      7250<<ASSIGN
OPEN_FPT.V.INITZ.SCRUB#
      6598**DCL      7251<<ASSIGN
OPEN_FPT.V.ORG#
      6608**DCL      7173<<ASSIGN   7178<<ASSIGN   7182<<ASSIGN   7189<<ASSIGN
OPEN_FPT.V.RES#
      6612**DCL      7161--ASSIGN
OPEN_FPT.V.TYPE#
      6609**DCL      7179<<ASSIGN   7190<<ASSIGN
OPEN_FPT.V_
      6588**DCL      7159<<ASSIGN
OPEN_FPT.WSN_
      6594**DCL      6594--REDEF
PATH
         3**DCL         1--PROC     7213--IF       7214>>CALLBLT  7226>>IF       7226>>IF       7237>>ASSIGN
      7255--ASSIGN
READ.STATION_
      6955**DCL      6956--REDEF
READ.V
      6956**DCL      6952--DCLINIT
READ.V.DVBYTE.REREAD#
      6967**DCL      6967--REDEF
READ.V.INDX#
      6965**DCL      6965--REDEF
RELDCB_CONST
      7115**DCL      7230>>ASSIGN
RELDCB_CONST.V
      7115**DCL      7115--DCLINIT
WRITE.STATION_
      6997**DCL      6997--REDEF
WRITE.V
      6998**DCL      6995--DCLINIT
WRITE.V.DVBYTE.VFC#
      7004**DCL      7004--REDEF
Z_ALLOC_BUF
PL6.E3A0      #001=Z_SYS_OPEN File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:22 Page:19   
      6454**DCL-ENT  7284--CALL
Z_GET_FP_DCB
      6453**DCL-ENT  7243--CALL
Z_GET_IOB
      6452**DCL-ENT  7208--CALL
Z_RETURN_INT
      6451**DCL-ENT  7304--CALL     7313--CALL
Z_SYS_FSIZE
      6455**DCL-ENT  7296--CALL
Z_SYS_FTAB
      6362**DCL      7200--ASSIGN   7284<>CALL     7296<>CALL
Z_SYS_FTAB.BLKLAST
      6401**DCL      7280<<ASSIGN   7281<<ASSIGN
Z_SYS_FTAB.BLKLEN
      6400**DCL      7285<<ASSIGN
Z_SYS_FTAB.BLKNUM
      6398**DCL      7278<<ASSIGN   7283<<ASSIGN   7287<<ASSIGN   7294<<ASSIGN   7300<<ASSIGN   7300>>ASSIGN
Z_SYS_FTAB.BLKPOS
      6399**DCL      7286<<ASSIGN   7297<<ASSIGN   7298>>IF       7299<<ASSIGN
Z_SYS_FTAB.DCB#
      6374**DCL      7209<<ASSIGN   7228>>IF       7232>>ASSIGN   7233<<ASSIGN   7240<<ASSIGN   7243<>CALL
      7260>>IF       7266<<ASSIGN   7268>>ASSIGN
Z_SYS_FTAB.FP$
      6404**DCL      7243<>CALL
Z_SYS_FTAB.LBLKLEN
      6402**DCL      7291<<ASSIGN   7297>>ASSIGN
Z_SYS_FTAB.O_FLAGS
      6375**DCL      7198>>IF       7273<<ASSIGN   7310<<ASSIGN
Z_SYS_FTAB.O_FLAGS.BIN
      6394**DCL      7274<<ASSIGN   7288>>IF
Z_SYS_FTAB.O_FLAGS.DVBYTE
      6382**DCL      7275<<ASSIGN
Z_SYS_FTAB.O_FLAGS.SEEK
      6377**DCL      7290<<ASSIGN
Z_SYS_FTAB.O_FLAGS.STRPVFC
      6392**DCL      7276<<ASSIGN

PL6.E3A0      #002=Z_SYS_CLOSE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:20   
      283        1        /*  sys_close(fp);                                */
      284        2
      285        3        Z_SYS_CLOSE:  proc(fp);
      286        4
      287        5
      288        6        %include   CP_6;
      289     5565        %include   CP_6_SUBS;
      290     6105        %include   zbm$system$system_n;
      291     6351
      292     6352        %Z_SYS_FILDES(NAME=fp,STCLASS="");
      293     6395
      294     6396        %FPT_WRITE(   FPTN     =  WRITE,
      295     6397                      BUF      =  NIL,
      296     6398                      BP       =  YES,
      297     6399                      KEY      =  KEY);
      298     6430
      299     6431    1   dcl  1  KEY      static,
      300     6432    1           2 *      ubin(9) init(3),
      301     6433    1           2 BLOCK  ubin(27)init(0);
      302     6434
      303     6435
      304     6436    1   dcl  Z_RETURN_INT   entry(1);
      305     6437    1   dcl  Z_SYS_FLUSH    entry(1) altret;
      306     6438
      307     6439        %FPT_CLOSE(   FPTN     =  CLOSE_FPT,
      308     6440                      STCLASS  =  "");
      309     6482
      310     6483        %FPT_CLOSE(   FPTN     =  CLOSE_FPT_CONST,
      311     6484                      STCLASS  =  CONSTANT,
      312     6485                      DISP     =  SAVE);
      313     6527
      314     6528    1     if fp.o_flags.DIRTY = '1'b
      315     6529    1        then call Z_SYS_FLUSH(fp);
      316     6530    1     if fp.o_flags.CONT then
      317     6531    2     do;
      318     6532    2        KEY.BLOCK = FP.BLKNUM + 1;
      319     6533    2        WRITE.V.DCB# = FP.DCB#;
PL6.E3A0      #002=Z_SYS_CLOSE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:21   
      320     6534    3        call M$WRITE( WRITE ) whenaltreturn do; ; end;
      321     6535    2     end;
      322     6536    2     IF (fp.fp$ = addr(nil)) THEN DO;
      323     6537    2        CLOSE_FPT      =  CLOSE_FPT_CONST;
      324     6538    2        CLOSE_FPT.V_   =  vector(CLOSE_FPT.V);
      325     6539    2        CLOSE_FPT.V.DCB#  = FP.DCB#;
      326     6540    3        call M$CLOSE(CLOSE_FPT) whenaltreturn do; ; end;
      327     6541    2        END;
      328     6542    1     FP.O_FLAGS = '0'b;
      329     6543    1     call Z_RETURN_INT(1);
      330     6544
      331     6545    1   end Z_SYS_CLOSE;
      332     6546        %EOD;

PL6.E3A0      #002=Z_SYS_CLOSE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:22   
--  Include file information  --

   zbm$system$system_n.:ZBC3TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z_SYS_CLOSE.

   Procedure Z_SYS_CLOSE requires 50 words for executable code.
   Procedure Z_SYS_CLOSE requires 36 words of local(AUTO) storage.

PL6.E3A0      #002=Z_SYS_CLOSE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:23   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=Z_SYS_CLOSE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:24   
          MINI XREF LISTING

CLOSE_FPT
      6463**DCL      6537<<ASSIGN   6540<>CALL
CLOSE_FPT.SN_
      6463**DCL      6463--REDEF
CLOSE_FPT.UTL_
      6464**DCL      6464--REDEF
CLOSE_FPT.V
      6468**DCL      6538--ASSIGN
CLOSE_FPT.V.DCB#
      6469**DCL      6539<<ASSIGN
CLOSE_FPT.V.EXPIRE#
      6478**DCL      6478--REDEF
CLOSE_FPT.V.TYPE#
      6476**DCL      6476--REDEF
CLOSE_FPT.V.XTNSIZE#
      6473**DCL      6473--REDEF    6475--REDEF
CLOSE_FPT.V_
      6463**DCL      6538<<ASSIGN
CLOSE_FPT_CONST
      6508**DCL      6537>>ASSIGN
CLOSE_FPT_CONST.SN_
      6508**DCL      6508--REDEF
CLOSE_FPT_CONST.UTL_
      6509**DCL      6509--REDEF
CLOSE_FPT_CONST.V
      6513**DCL      6508--DCLINIT
CLOSE_FPT_CONST.V.EXPIRE#
      6523**DCL      6523--REDEF
CLOSE_FPT_CONST.V.TYPE#
      6521**DCL      6521--REDEF
CLOSE_FPT_CONST.V.XTNSIZE#
      6518**DCL      6518--REDEF    6520--REDEF
PL6.E3A0      #002=Z_SYS_CLOSE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:25   
FP
      6361**DCL         3--PROC     6529<>CALL
FP.BLKNUM
      6387**DCL      6532>>ASSIGN
FP.DCB#
      6363**DCL      6533>>ASSIGN   6539>>ASSIGN
FP.FP$
      6393**DCL      6536>>IF
FP.O_FLAGS
      6364**DCL      6542<<ASSIGN
FP.O_FLAGS.CONT
      6365**DCL      6530>>IF
FP.O_FLAGS.DIRTY
      6367**DCL      6528>>IF
KEY
      6431**DCL      6416--DCLINIT
KEY.BLOCK
      6433**DCL      6532<<ASSIGN
M$CLOSE
      5493**DCL-ENT  6540--CALL
M$WRITE
      5494**DCL-ENT  6534--CALL
WRITE
      6416**DCL      6534<>CALL
WRITE.STATION_
      6418**DCL      6418--REDEF
WRITE.V
      6419**DCL      6416--DCLINIT
WRITE.V.DCB#
      6419**DCL      6533<<ASSIGN
WRITE.V.DVBYTE.VFC#
      6425**DCL      6425--REDEF
Z_RETURN_INT
      6436**DCL-ENT  6543--CALL
Z_SYS_FLUSH
      6437**DCL-ENT  6529--CALL

PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:26   
      333        1        /*  call by sys_read(fp,...)                      */
      334        2        /*  Z_SYS_READ returns size of record read        */
      335        3
      336        4        Z_SYS_READ:  proc(fp, buf, bufsize);
      337        5
      338        6
      339        7        %include   CP_6;
      340     5566        %include   CP_6_SUBS;
      341     6106        %include   B_ERRORS_C;
      342     7233        %include   XS_MACRO_C;
      343     7277        %include   xb_stdio_i6;
      344     7520
      345     7521        %include   zbm$system$system_n;
      346     7767
      347     7768        %Z_SYS_FTAB;
      348     7821        %Z_SYS_FILDES(NAME=fp,STCLASS="");
      349     7864    1   dcl  buf      char(bufsize);
      350     7865    1   dcl  bufsize  sbin;
      351     7866    1   dcl   xsaptr$  ptr;
      352     7867
      353     7868        %File_Header (Name=fp_c, Stclass="BASED (fp.fp$)");
      354     7980        %XSA_PARAM (STCLASS="BASED (xsaptr$)");
      355     8010        %XSA_ENTRIES;
      356     8014
      357     8015        %F$DCB(STCLASS=BASED);
      358     8072        %B$ALT;
      359     8080    1   dcl  B$TCB$ ptr symref readonly;
      360     8081    1   dcl  BSD$   ptr based;
      361     8082
      362     8083        %FPT_READ(    FPTN     =  READ,
      363     8084                      STCLASS  =  "",
      364     8085                      BUF      =  NIL,
      365     8086                      BP       =  NO,
      366     8087                      KEY      =  KEY,
      367     8088                      KEYS     =  NO);
      368     8127
      369     8128        %FPT_READ(    FPTN     =  READ_CONST,
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:27   
      370     8129                      STCLASS  =  CONSTANT,
      371     8130                      BUF      =  NIL,
      372     8131                      BP       =  NO,
      373     8132                      KEY      =  KEY,
      374     8133                      KEYS     =  NO);
      375     8172
      376     8173    1   dcl  Z_BIN_MARKER   char(2)  symref readonly;
      377     8174
      378     8175    1   dcl  1  KEY      static,
      379     8176    1           2 *      ubin(9) unal init(3),
      380     8177    1           2 BLOCK  ubin(27)unal init(0);
      381     8178
      382     8179
      383     8180    1   dcl  Z_RETURN_INT   entry(1);
      384     8181    1   dcl  Z_SYS_FLUSH    entry(1) altret;
      385     8182    1   dcl  Z_GET_IOB      entry(2);
      386     8183    1   dcl  Z_GET_FP       entry(2);
      387     8184    1   dcl  Z_ALLOC_BUF    entry(1) altret;
      388     8185
      389     8186
      390     8187    1   dcl  RS       sbin;
      391     8188    1   dcl  I        sbin;
      392     8189    1   dcl  OFFS     sbin;
      393     8190    1   dcl  REM      sbin;
      394     8191    1   dcl  BSIZE    sbin;
      395     8192    1   dcl  dcb$     ptr;
      396     8193    1   dcl  BINBUF   char(%BIN_BLOCKSIZE) based(fp.BLK$);
      397     8194
      398     8195
      399     8196    1     READ = READ_CONST;
      400     8197    1     READ.V_ = vector( READ.V );
      401     8198    1     READ.V.DVBYTE = fp.o_flags.dvbyte & '011110000'b; /* bp/reread/bin/trans */
      402     8199
      403     8200    1     if fp.dcb# = 0 then
      404     8201    2     do;
      405     8202    2        if addr(fp) = STDIN then RS = 0;
      406     8203    2           else if addr(fp) = STDOUT then RS = 1;
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:28   
      407     8204    2              else if addr(fp) = STDERR then RS = 2;
      408     8205    2                 else goto err;
      409     8206    2        call Z_ALLOC_BUF(Z_SYS_FTAB(RS)) altret(rerr);
      410     8207    2        call Z_GET_FP (RS,fp.fp$);
      411     8208    2        xsaptr$ = fp_c.xsa$;
      412     8209    2        call Z_GET_IOB(RS,OFFS);
      413     8210    2        if OFFS ~= 0
      414     8211    2           then fp.dcb# = OFFS;
      415     8212    2           else goto err;
      416     8213    2     end;
      417     8214    1     READ.V.DCB# = FP.DCB#;
      418     8215    1     dcb$ = dcbaddr( READ.V.DCB# );
      419     8216
      420     8217    1     if fp.o_flags.bin then
      421     8218    2     do;   /**   Reading a binary file      **/
      422     8219    2        READ.BUF_    = vector( BINBUF );
      423     8220    2        READ.V.DVBYTE.BP# = '1'b;  /**  Don't strip trailing blanks  **/
      424     8221    2        if fp.o_flags.seek then
      425     8222    3        do;   /**  Got to get our record first!   **/
      426     8223    3           KEY.BLOCK = fp.BLKNUM + 1;
      427     8224    3           fp.o_flags.seek = '0'b; /** Don't seek again **/
      428     8225    3           READ.V.KEYS# = '1'b;
      429     8226    3           call M$READ( READ ) altret(rerr);
      430     8227    3           fp.BLKLEN = dcb$->F$DCB.ARS#;
      431     8228    3           READ.V.KEYS# = '0'b;
      432     8229    3        end;
      433     8230    2        REM = bufsize; /** Number of bytes to move into user buffer **/
      434     8231    2        OFFS = 0;      /** Current position in his buffer           **/
      435     8232
      436     8233    3        do while REM > 0;
      437     8234    3           if fp.BLKPOS < fp.BLKLEN then
      438     8235    4           do;
      439     8236    4              BSIZE = minimum(REM, fp.BLKLEN-fp.BLKPOS);
      440     8237    4              substr(buf,OFFS,BSIZE) = substr(BINBUF,fp.BLKPOS,BSIZE);
      441     8238    4              REM = REM - BSIZE;
      442     8239    4              OFFS = OFFS + BSIZE;
      443     8240    4              fp.BLKPOS = fp.BLKPOS + BSIZE;
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:29   
      444     8241    4           end;
      445     8242    3              else
      446     8243    4           do;   /**  Must read the file to get the next piece.  **/
      447     8244    4              if fp.o_flags.EOF then goto err;
      448     8245    4              if fp.o_flags.DIRTY
      449     8246    4                 then call Z_SYS_FLUSH(fp);
      450     8247
      451     8248    5              do while REM > %BIN_BLOCKSIZE;
      452     8249    5                 call M$READ( READ ) altret(REM_ERR);
      453     8250    5                 fp.BLKNUM = fp.BLKNUM + 1;
      454     8251    5                 BSIZE = dcb$->F$DCB.ARS#;
      455     8252    5                 substr(buf,OFFS,BSIZE) = substr(BINBUF,,BSIZE);
      456     8253    5                 OFFS  = OFFS + BSIZE;
      457     8254    5                 REM   = REM  - BSIZE;
      458     8255    5              end;
      459     8256
      460     8257    4              if REM > 0 then
      461     8258    5              do;
      462     8259    5                 call M$READ( READ ) altret(REM_ERR);
      463     8260    5                 fp.BLKNUM = fp.BLKNUM + 1;
      464     8261    5                 fp.BLKLEN = dcb$->F$DCB.ARS#;
      465     8262    5                 fp.BLKPOS = 0;
      466     8263    5              end;
      467     8264    4           end;
      468     8265    3        end;  /* Of while REM > 0     */
      469     8266    3        do while '0'b;    /***    DO NEVER;    ***/
      470     8267    3   REM_ERR:
      471     8268    3           if OFFS = 0 then goto rerr;
      472     8269    3           fp.o_flags.eof = '1'b;   /** Got some data before EOF  **/
      473     8270    3        end;
      474     8271    2        RS = OFFS;
      475     8272    2     end;  /*  Of if this is a binary read  */
      476     8273    1        else
      477     8274    2     do;   /***     A non-binary read       ***/
      478     8275    2        READ.V.STRPVFC# = fp.o_flags.strpvfc;
      479     8276    2        if fp.o_flags.CONT
      480     8277    2           then READ.V.DVBYTE.CONT# = '1'b;
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:30   
      481     8278    2        READ.BUF_   = vector( substr(buf,,bufsize-1) );
      482     8279    2         if (fp.fp$ ~= addr(NIL)) then
      483     8280    2            xsaptr$ =fp_c.xsa$;
      484     8281    2         else
      485     8282    2            xsaptr$ = addr(NIL);
      486     8283    2         if (xsaptr$ ~= addr(NIL)) then
      487     8284    2            call XSA$WRITE (READ, XSA_PARAM) altret ( err );
      488     8285    2         else
      489     8286    2            call M$READ( READ ) altret( err );
      490     8287    2        fp.o_flags.CONT = '0'b;
      491     8288    2   cont_read:
      492     8289    2        RS = dcb$->F$DCB.ARS#;
      493     8290    2        if fp.o_flags.CONT = '0'b then
      494     8291    3        do;
      495     8292    3           substr(BUF,RS,1) = %binasc(10);
      496     8293    3           RS = RS + 1;
      497     8294    3        end;
      498     8295    2     end;  /***     of non-binary read      ***/
      499     8296    1     call Z_RETURN_INT(RS);
      500     8297
      501     8298    1   err:
      502     8299    1     if B$TCB$->BSD$->B$ALT.ERR.CODE = %E$LD then
      503     8300    2     do;
      504     8301    2        fp.o_flags.CONT = '1'b;
      505     8302    2        goto cont_read;
      506     8303    2     end;
      507     8304    1   rerr:
      508     8305    1     call Z_RETURN_INT(0);
      509     8306
      510     8307    1   end Z_SYS_READ;
      511     8308        %EOD;

PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:31   
--  Include file information  --

   zbm$system$system_n.:ZBC3TOU  is referenced.
   xb_stdio_i6.:LIB_E05  cannot be made into a system file and is referenced.
   XS_MACRO_C.:LIB_E05  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z_SYS_READ.

   Procedure Z_SYS_READ requires 287 words for executable code.
   Procedure Z_SYS_READ requires 30 words of local(AUTO) storage.

PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:32   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:33   
          MINI XREF LISTING

B$ALT.CODE
      8074**DCL      8074--REDEF    8075--REDEF    8075--REDEF
B$ALT.ERR.CODE
      8076**DCL      8299>>IF
B$ALT.ERR.ERR#
      8076**DCL      8076--REDEF
B$ALT.EVID
      8075**DCL      8075--REDEF    8075--REDEF
B$TCB$
      8080**DCL      8299>>IF
BINBUF
      8193**DCL      8219--ASSIGN   8237>>ASSIGN   8252>>ASSIGN
BSD$
      8081**DCL      8299>>IF
BSIZE
      8191**DCL      8236<<ASSIGN   8237>>ASSIGN   8237>>ASSIGN   8238>>ASSIGN   8239>>ASSIGN   8240>>ASSIGN
      8251<<ASSIGN   8252>>ASSIGN   8252>>ASSIGN   8253>>ASSIGN   8254>>ASSIGN
BUF
      7864**DCL         4--PROC     8237<<ASSIGN   8252<<ASSIGN   8278--ASSIGN   8292<<ASSIGN
BUFSIZE
      7865**DCL         4--PROC     7864--IMP-SIZ  8230>>ASSIGN   8237>>ASSIGN   8252>>ASSIGN   8278>>ASSIGN
      8278>>ASSIGN   8292>>ASSIGN
CONT_READ
      8289**LABEL    8302--GOTO
DCB$
      8192**DCL      8215<<ASSIGN   8227>>ASSIGN   8251>>ASSIGN   8261>>ASSIGN   8289>>ASSIGN
ERR
      8299**LABEL    8205--GOTO     8212--GOTO     8244--GOTO     8284--CALLALT  8286--CALLALT
F$DCB.ACTPOS
      8048**DCL      8048--REDEF
F$DCB.ARS#
      8022**DCL      8022--REDEF    8227>>ASSIGN   8251>>ASSIGN   8261>>ASSIGN   8289>>ASSIGN
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:34   
F$DCB.ATTR
      8041**DCL      8042--REDEF
F$DCB.BORROW
      8056**DCL      8056--REDEF    8056--REDEF    8056--REDEF
F$DCB.DCBNAME.L
      8070**DCL      8070--IMP-SIZ
F$DCB.EOMCHAR#
      8026**DCL      8026--REDEF
F$DCB.FLDID
      8051**DCL      8051--REDEF
F$DCB.FORM$
      8045**DCL      8045--REDEF
F$DCB.FSECT
      8061**DCL      8061--REDEF
F$DCB.FSN#
      8038**DCL      8038--REDEF    8038--REDEF    8039--REDEF
F$DCB.HEADER$
      8044**DCL      8044--REDEF
F$DCB.IXTNSIZE#
      8042**DCL      8042--REDEF
F$DCB.LASTSTA$
      8031**DCL      8031--REDEF
F$DCB.LVL
      8057**DCL      8057--REDEF
F$DCB.NAME#.C
      8032**DCL      8032--REDEF
F$DCB.NOEOF
      8054**DCL      8054--REDEF
F$DCB.NRECS#
      8043**DCL      8043--REDEF
F$DCB.NRECX
      8062**DCL      8062--REDEF
F$DCB.OHDR
      8054**DCL      8054--REDEF
F$DCB.ORG#
      8037**DCL      8037--REDEF
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:35   
F$DCB.PRECNO
      8060**DCL      8060--REDEF
F$DCB.RCSZ
      8066**DCL      8066--REDEF
F$DCB.RES#
      8033**DCL      8033--REDEF
F$DCB.SETX
      8045**DCL      8045--REDEF
F$DCB.TAB$
      8045**DCL      8045--REDEF
F$DCB.TDA
      8059**DCL      8060--REDEF
F$DCB.WSN#
      8033**DCL      8033--REDEF
FP
      7830**DCL         4--PROC     8202--IF       8203--IF       8204--IF       8246<>CALL
FP.BLK$
      7861**DCL      8193--IMP-PTR  8219>>ASSIGN   8237>>ASSIGN   8252>>ASSIGN
FP.BLKLEN
      7858**DCL      8227<<ASSIGN   8234>>IF       8236>>ASSIGN   8261<<ASSIGN
FP.BLKNUM
      7856**DCL      8223>>ASSIGN   8250<<ASSIGN   8250>>ASSIGN   8260<<ASSIGN   8260>>ASSIGN
FP.BLKPOS
      7857**DCL      8234>>IF       8236>>ASSIGN   8237>>ASSIGN   8240<<ASSIGN   8240>>ASSIGN   8262<<ASSIGN
FP.DCB#
      7832**DCL      8200>>IF       8211<<ASSIGN   8214>>ASSIGN
FP.FP$
      7862**DCL      7869--IMP-PTR  8207<>CALL     8208>>ASSIGN   8279>>IF       8280>>ASSIGN
FP.O_FLAGS.BIN
      7852**DCL      8217>>IF
FP.O_FLAGS.CONT
      7834**DCL      8276>>IF       8287<<ASSIGN   8290>>IF       8301<<ASSIGN
FP.O_FLAGS.DIRTY
      7836**DCL      8245>>IF
FP.O_FLAGS.DVBYTE
      7840**DCL      8198>>ASSIGN
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:36   
FP.O_FLAGS.EOF
      7837**DCL      8244>>IF       8269<<ASSIGN
FP.O_FLAGS.SEEK
      7835**DCL      8221>>IF       8224<<ASSIGN
FP.O_FLAGS.STRPVFC
      7850**DCL      8275>>ASSIGN
FP_C.FPT_READ.V.DVBYTE.REREAD#
      7931**DCL      7932--REDEF
FP_C.FPT_READ.V.INDX#
      7924**DCL      7925--REDEF
FP_C.FPT_WRITE.V.DVBYTE.VFC#
      7969**DCL      7970--REDEF
FP_C.XSA$
      7895**DCL      8208>>ASSIGN   8280>>ASSIGN
KEY
      8175**DCL      8150--DCLINIT  8151--DCLINIT
KEY.BLOCK
      8177**DCL      8223<<ASSIGN
M$READ
      5495**DCL-ENT  8226--CALL     8249--CALL     8259--CALL     8286--CALL
OFFS
      8189**DCL      8209<>CALL     8210>>IF       8211>>ASSIGN   8231<<ASSIGN   8237>>ASSIGN   8239<<ASSIGN
      8239>>ASSIGN   8252>>ASSIGN   8253<<ASSIGN   8253>>ASSIGN   8268>>IF       8271>>ASSIGN
READ
      8105**DCL      8196<<ASSIGN   8226<>CALL     8249<>CALL     8259<>CALL     8284<>CALL     8286<>CALL
READ.BUF_
      8107**DCL      8219<<ASSIGN   8278<<ASSIGN
READ.STATION_
      8108**DCL      8109--REDEF
READ.V
      8109**DCL      8197--ASSIGN
READ.V.DCB#
      8109**DCL      8214<<ASSIGN   8215--ASSIGN
READ.V.DVBYTE
      8119**DCL      8198<<ASSIGN
READ.V.DVBYTE.BP#
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:37   
      8119**DCL      8220<<ASSIGN
READ.V.DVBYTE.CONT#
      8122**DCL      8277<<ASSIGN
READ.V.DVBYTE.REREAD#
      8120**DCL      8120--REDEF
READ.V.INDX#
      8118**DCL      8118--REDEF
READ.V.KEYS#
      8110**DCL      8225<<ASSIGN   8228<<ASSIGN
READ.V.STRPVFC#
      8122**DCL      8275<<ASSIGN
READ.V_
      8105**DCL      8197<<ASSIGN
READ_CONST
      8150**DCL      8196>>ASSIGN
READ_CONST.STATION_
      8153**DCL      8154--REDEF
READ_CONST.V
      8154**DCL      8150--DCLINIT
READ_CONST.V.DVBYTE.REREAD#
      8165**DCL      8165--REDEF
READ_CONST.V.INDX#
      8163**DCL      8163--REDEF
REM
      8190**DCL      8230<<ASSIGN   8233>>DOWHILE  8236>>ASSIGN   8238<<ASSIGN   8238>>ASSIGN   8248>>DOWHILE
      8254<<ASSIGN   8254>>ASSIGN   8257>>IF
REM_ERR
      8268**LABEL    8249--CALLALT  8259--CALLALT
RERR
      8305**LABEL    8206--CALLALT  8226--CALLALT  8268--GOTO
RS
      8187**DCL      8202<<ASSIGN   8203<<ASSIGN   8204<<ASSIGN   8206>>CALL     8207<>CALL     8209<>CALL
      8271<<ASSIGN   8289<<ASSIGN   8292>>ASSIGN   8293<<ASSIGN   8293>>ASSIGN   8296<>CALL
XSA$WRITE
      8011**DCL-ENT  8284--CALL
XSAPTR$
PL6.E3A0      #003=Z_SYS_READ File=zbm$system$Z_SYS:6.:ZBC3TSI                   FRI 08/22/97 09:23 Page:38   
      7866**DCL      7988--IMP-PTR  8208<<ASSIGN   8280<<ASSIGN   8282<<ASSIGN   8283>>IF       8284>>CALL
XSA_PARAM
      7988**DCL      8284<>CALL
XSA_PARAM.EOMCHAR#
      8004**DCL      8005--REDEF
XSA_PARAM.SIG1
      7998**DCL      7998--REDEF
XSA_PARAM.SIG2
      7998**DCL      7999--REDEF
Z_ALLOC_BUF
      8184**DCL-ENT  8206--CALL
Z_GET_FP
      8183**DCL-ENT  8207--CALL
Z_GET_IOB
      8182**DCL-ENT  8209--CALL
Z_RETURN_INT
      8180**DCL-ENT  8296--CALL     8305--CALL
Z_SYS_FLUSH
      8181**DCL-ENT  8246--CALL
Z_SYS_FTAB
      7776**DCL      8202--IF       8203--IF       8204--IF       8206<>CALL

PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:39   
      512        1        /*  call by sys_write(fp,...)                      */
      513        2        /*  Z_SYS_WRITE returns bufsize if successfull     */
      514        3
      515        4        Z_SYS_WRITE:  proc(fp, buf, bufsize) altret;
      516        5
      517        6
      518        7        %include   CP_6;
      519     5566        %include   CP_6_SUBS;
      520     6106        %include   B_ERRORS_C;
      521     7233        %include   XS_MACRO_C;
      522     7277        %include   xb_stdio_i6;
      523     7520
      524     7521        %include   zbm$system$system_n;
      525     7767
      526     7768        %Z_SYS_FILDES(NAME=fp,STCLASS="");
      527     7811    1   dcl  buf      char(bufsize);
      528     7812    1   dcl  bufsize  sbin;
      529     7813    1   dcl   xsaptr$  ptr;
      530     7814
      531     7815        %File_Header (Name=fp_c, Stclass="BASED (fp.fp$)");
      532     7927        %XSA_PARAM (STCLASS ="BASED (xsaptr$)");
      533     7957        %XSA_ENTRIES;
      534     7961
      535     7962        %Z_SYS_FTAB;
      536     8015
      537     8016        %F$DCB(STCLASS=BASED);
      538     8073        %B$ALT;
      539     8081    1   dcl  B$TCB$ ptr symref readonly;
      540     8082    1   dcl  BSD$   ptr based;
      541     8083
      542     8084        %FPT_WRITE(   FPTN     =  WRITE,
      543     8085                      STCLASS  =  "",
      544     8086                      BUF      =  NIL,
      545     8087                      BP       =  NO,
      546     8088                      KEY      =  KEY);
      547     8119
      548     8120        %FPT_WRITE(   FPTN     =  WRITE_CONST,
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:40   
      549     8121                      STCLASS  =  CONSTANT,
      550     8122                      BUF      =  NIL,
      551     8123                      BP       =  NO,
      552     8124                      KEY      =  KEY);
      553     8155
      554     8156        %FPT_READ(    FPTN     =  READ,
      555     8157                      STCLASS  =  "",
      556     8158                      BUF      =  NIL,
      557     8159                      BP       =  NO,
      558     8160                      KEY      =  KEY,
      559     8161                      KEYS     =  NO);
      560     8200
      561     8201        %FPT_READ(    FPTN     =  READ_CONST,
      562     8202                      STCLASS  =  CONSTANT,
      563     8203                      BUF      =  NIL,
      564     8204                      BP       =  NO,
      565     8205                      KEY      =  KEY,
      566     8206                      KEYS     =  YES);
      567     8245
      568     8246    1   dcl  1  KEY      static,
      569     8247    1           2 *      ubin(9) unal init(3),
      570     8248    1           2 BLOCK  ubin(27)unal init(0);
      571     8249
      572     8250
      573     8251    1   dcl  Z_RETURN_INT   entry(1);
      574     8252    1   dcl  Z_GET_IOB      entry(2);
      575     8253    1   dcl  Z_GET_FP       entry(2);
      576     8254    1   dcl  Z_ALLOC_BUF    entry(1) altret;
      577     8255
      578     8256    1   dcl  Z_BIN_MARKER   char(2) symref readonly;
      579     8257
      580     8258    1   dcl  RS       sbin;
      581     8259    1   dcl  OFFS     sbin;
      582     8260    1   dcl  BLKS     sbin;
      583     8261    1   dcl  WRS      sbin;
      584     8262    1   dcl  dcb$     ptr;
      585     8263    1   dcl  BINBUF   char(%BIN_BLOCKSIZE) based(fp.BLK$);
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:41   
      586     8264    1   dcl  REM      sbin;
      587     8265    1   dcl  BSIZE    sbin;
      588     8266    1   dcl  I        sbin;
      589     8267
      590     8268    1     READ     =  READ_CONST;
      591     8269    1     WRITE    =  WRITE_CONST;
      592     8270    1     READ.V_  =  vector(READ.V);
      593     8271    1     WRITE.V_ =  vector(WRITE.V);
      594     8272    1     WRITE.V.DVBYTE = fp.o_flags.dvbyte & '011110000'b; /*bp/vfc/bin/trans*/
      595     8273    1     KEY.BLOCK = fp.BLKNUM + 1;
      596     8274
      597     8275
      598     8276    1     if fp.dcb# = 0 then
      599     8277    2     do;
      600     8278    2        if addr(fp) = STDIN then RS = 0;
      601     8279    2           else if addr(fp) = STDOUT then RS = 1;
      602     8280    2              else if addr(fp) = STDERR then RS = 2;
      603     8281    2                 else goto err;
      604     8282    2        call Z_ALLOC_BUF(Z_SYS_FTAB(RS)) altret(err);
      605     8283    2        call Z_GET_FP (RS,fp.fp$);
      606     8284    2        xsaptr$  =  fp_c.xsa$;
      607     8285    2        call Z_GET_IOB(RS,OFFS);
      608     8286    2        if OFFS ~= 0
      609     8287    2           then fp.dcb# = OFFS;
      610     8288    2           else goto err;
      611     8289    2        dcb$ = dcbaddr(fp.dcb#);
      612     8290    2        if dcb$->F$DCB.ORG# = %KEYED# then
      613     8291    3        do;
      614     8292    3           fp.BLKNUM        = 0;
      615     8293    3           if dcb$->F$DCB.NRECS# > 0
      616     8294    3              then fp.BLKNUM = dcb$->F$DCB.NRECS#;
      617     8295    3        end;
      618     8296    2        key.block = fp.BLKNUM + 1;
      619     8297    2     end;
      620     8298
      621     8299    1     WRITE.V.DCB# = FP.DCB#;
      622     8300    1     READ.V.DCB#  = FP.DCB#;
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:42   
      623     8301    1     dcb$ = dcbaddr( READ.V.DCB# );
      624     8302    1     BLKS = bufsize;
      625     8303    1     OFFS = 0;
      626     8304    1     if fp.o_flags.bin = '1'b   then
      627     8305    2     do;   /***     Binary Write      ***/
      628     8306    2        WRITE.V.DVBYTE.BP# = '1'b;
      629     8307    2        REM = bufsize;
      630     8308    2        READ.BUF_  = vector( BINBUF );
      631     8309    2        WRITE.BUF_ = vector( BINBUF );
      632     8310    2        if fp.o_flags.seek   = '1'b then
      633     8311    3        do;   /* dirty buffers have been written already!  */
      634     8312    3           fp.o_flags.seek = '0'b;    /** Seek completion **/
      635     8313    3           if KEY.BLOCK <= (fp.BLKLAST + 1) and
      636     8314    3             (fp.BLKPOS > 0  OR REM < %BIN_BLOCKSIZE) then
      637     8315    4           do;   /**  We must actually read the record!  **/
      638     8316    4              call M$READ( READ ) altret(err);
      639     8317    4              fp.BLKLEN = dcb$->F$DCB.ARS#;
      640     8318    4              if fp.BLKPOS > fp.BLKLEN
      641     8319    4                 then goto err; /**  Bad seek! **/
      642     8320    4              if fp.BLKLEN ~= %BIN_BLOCKSIZE and
      643     8321    4                 fp.BLKNUM ~= FP.BLKLAST
      644     8322    4                 then goto err;
      645     8323    4           end;  /** of actually having to read the silly record **/
      646     8324    3        end;     /** of a seek operation                         **/
      647     8325
      648     8326    3        do while( REM > 0 );
      649     8327
      650     8328    3           if fp.BLKPOS < (%BIN_BLOCKSIZE) and
      651     8329    3              (fp.BLKPOS > 0 or REM < (%BIN_BLOCKSIZE)) then
      652     8330    4           do;   /**   Put some stuff in the current buffer.  **/
      653     8331    4              BSIZE = minimum(REM,%BIN_BLOCKSIZE - fp.BLKPOS);
      654     8332    4              substr(BINBUF,fp.BLKPOS,BSIZE) = substr(buf,OFFS,BSIZE);
      655     8333    4              fp.o_flags.DIRTY = '1'b;
      656     8334    4              REM = REM - BSIZE;
      657     8335    4              OFFS = OFFS + BSIZE;
      658     8336    4              fp.BLKPOS = fp.BLKPOS + BSIZE;
      659     8337    4              if fp.BLKPOS > fp.BLKLEN
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:43   
      660     8338    4                 then fp.BLKLEN = fp.BLKPOS;
      661     8339    4           end;
      662     8340    3              else
      663     8341    4           do;   /**   Maybe write a dirty buffer, get next block  **/
      664     8342    4              if fp.o_flags.DIRTY = '1'b
      665     8343    4                 then call FLUSH(fp) altret(err);
      666     8344
      667     8345    5              do while( REM >= %BIN_BLOCKSIZE );
      668     8346    5                 substr(BINBUF,,%BIN_BLOCKSIZE) = substr(buf,OFFS,%BIN_BLOCKSIZE);
      669     8347    5                 WRITE.BUF_ = vector (substr(BINBUF,,%BIN_BLOCKSIZE));
      670     8348    5                 call M$WRITE( WRITE ) altret(err);
      671     8349    5                 KEY.BLOCK = KEY.BLOCK + 1;
      672     8350    5                 fp.BLKNUM = KEY.BLOCK - 1;
      673     8351    5                 if KEY.BLOCK > (fp.BLKLAST + 1) then
      674     8352    6                 do;
      675     8353    6                    fp.BLKLAST = KEY.BLOCK - 2;
      676     8354    6                    fp.LBLKLEN = %BIN_BLOCKSIZE;
      677     8355    6                 end;
      678     8356    5                 OFFS = OFFS + %BIN_BLOCKSIZE;
      679     8357    5                 REM  = REM  - %BIN_BLOCKSIZE;
      680     8358    5              end;
      681     8359
      682     8360    4              fp.BLKPOS = 0;
      683     8361    4              fp.BLKLEN = 0;
      684     8362    4              if REM > 0 then
      685     8363    5              do;   /**  A little bit to stuff in the next block  ***/
      686     8364    5                 if KEY.BLOCK <= (fp.BLKLAST + 1) then
      687     8365    6                 do;
      688     8366    6                    call M$READ( READ ) altret(err);
      689     8367    6                    fp.BLKLEN = dcb$->F$DCB.ARS#;
      690     8368    6                    if fp.BLKLEN ~= %BIN_BLOCKSIZE and
      691     8369    6                       fp.BLKNUM ~= FP.BLKLAST
      692     8370    6                       then goto err;
      693     8371    6                 end;
      694     8372    5              end;
      695     8373    4                 else fp.o_flags.seek = '1'b;  /** get next block **/
      696     8374    4           end;  /**   Of writtin buffer skipping to next block   **/
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:44   
      697     8375    3        end;     /**   Of while REM > 0                           **/
      698     8376    2     end;        /**   Of if this is a binary write.              **/
      699     8377
      700     8378    1        else
      701     8379
      702     8380    2     do;   /*****      Writting Ascii File     *****/
      703     8381    2        BLKS = bufsize;
      704     8382    2        RS   = 0;
      705     8383
      706     8384    2     if fp.BLKPOS > 0 then
      707     8385    3     do;   /***     Something already pending for this stream    ***/
      708     8386    3        REM = 1;
      709     8387    4        call index(RS,%binasc(10),BUF,OFFS) whenaltreturn do;
      710     8388    4           REM  = 0; RS = BLKS;
      711     8389    4           end;
      712     8390    3        RS = minimum(RS,%BIN_BLOCKSIZE - fp.BLKPOS);
      713     8391    3        substr(BINBUF,fp.BLKPOS,RS) = substr(BUF,,RS);
      714     8392    3        fp.BLKPOS = fp.BLKPOS + RS;
      715     8393    3        OFFS = RS + 1;
      716     8394    3        if (REM = 1) or (fp.BLKPOS = %BIN_BLOCKSIZE) then
      717     8395    4        do;   /**  Buffer full or found a new-line   **/
      718     8396    4           WRITE.BUF_ = vector(substr(BINBUF,,fp.BLKPOS));
      719     8397    4           fp.BLKNUM  = fp.BLKNUM + 1;
      720     8398    4           if (REM = 0) and addr(fp) > STDERR
      721     8399    4              then WRITE.V.DVBYTE.CONT# = '1'b;
      722     8400    4         if (fp.fp$ ~= addr(NIL)) then
      723     8401    4            xsaptr$ =fp_c.xsa$;
      724     8402    4         else
      725     8403    4            xsaptr$ = addr(NIL);
      726     8404    4           if (xsaptr$ ~= addr(nil)) then
      727     8405    4              call XSA$WRITE (WRITE, XSA_PARAM) altret (err);
      728     8406    4           else
      729     8407    4              call M$WRITE( WRITE ) altret(err);
      730     8408    4           WRITE.V.DVBYTE.CONT# = '0'b;
      731     8409    4           fp.BLKPOS = 0;
      732     8410    4           key.block = key.block + REM + 1;
      733     8411    4        end;
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:45   
      734     8412    3     end;
      735     8413
      736     8414    2   ASCII_LOOP:
      737     8415    3        do while RS < BLKS;
      738     8416
      739     8417    3           REM = 1;
      740     8418    4           call index(RS,%binasc(10),buf,OFFS) whenaltreturn do;
      741     8419    4              BSIZE = RS -OFFS;
      742     8420    4              if BSIZE < %BIN_BLOCKSIZE then
      743     8421    5              do;   /***  Block up the record!    ***/
      744     8422    5                 substr(BINBUF,,BSIZE) = substr(buf,OFFS,BSIZE);
      745     8423    5                 fp.BLKPOS = BSIZE;
      746     8424    5                 exit ASCII_LOOP;
      747     8425    5              end;
      748     8426    4              RS = BLKS; REM = 0;  /** Don't incr BLKNUM **/
      749     8427    4              if addr(FP) > STDERR then WRITE.V.DVBYTE.CONT# = '1'b;
      750     8428    4              end;
      751     8429    3           WRITE.BUF_ = vector(substr(buf,OFFS,RS-OFFS));
      752     8430    3           if RS = OFFS then WRITE.BUF_ = vector(nil);
      753     8431    3           fp.BLKNUM = fp.BLKNUM + REM;
      754     8432    3         if (fp.fp$ ~= addr(NIL)) then
      755     8433    3            xsaptr$ =fp_c.xsa$;
      756     8434    3         else
      757     8435    3            xsaptr$ = addr(NIL);
      758     8436    3           if (xsaptr$ ~= addr(nil)) then
      759     8437    3              call XSA$WRITE (WRITE, XSA_PARAM) altret (err);
      760     8438    3           else
      761     8439    3              call M$WRITE( WRITE ) altret(err);
      762     8440    3           key.block = key.block + REM + 1;
      763     8441    3           OFFS = RS + 1;
      764     8442    3        end;
      765     8443    2     end;
      766     8444    1     WRITE.V.DVBYTE.CONT# = '0'b;
      767     8445    1     call Z_RETURN_INT(bufsize);
      768     8446
      769     8447    1   err:
      770     8448    1     call Z_RETURN_INT(0);
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:46   
      771     8449
      772     8450
      773     8451    1   Z_SYS_FLUSH:  entry(fp) altret;
      774     8452
      775     8453    1     WRITE       =  WRITE_CONST;
      776     8454    1     WRITE.V_    =  vector(WRITE.V);
      777     8455    1     KEY.BLOCK   =  fp.BLKNUM + 1;
      778     8456    1     WRITE.V.DCB#=  fp.DCB#;
      779     8457    1     fp.o_flags.DIRTY = '0'b;
      780     8458    2     call flush(fp) whenaltreturn do;
      781     8459    2        altreturn;
      782     8460    2        end;
      783     8461    1     call Z_RETURN_INT(1);
      784     8462
      785     8463    1   FLUSH: proc(fp) altret;
      786     8464
      787     8465        %Z_SYS_FILDES(name=fp,stclass="");
      788     8508
      789     8509    2        I = fp.BLKLEN;
      790     8510    2        if fp.o_flags.bin = '1'b then
      791     8511    3        do;
      792     8512    3           if I < %BIN_BLOCKSIZE then
      793     8513    4           do;
      794     8514    4              substr(BINBUF,I,%BIN_BLOCKSIZE-I) = ' ';
      795     8515    4           end;
      796     8516    3        end;
      797     8517    2        WRITE.BUF_ = vector(substr( BINBUF,,I ));
      798     8518    3        call M$WRITE( WRITE ) whenaltreturn do; altreturn; end;
      799     8519    2        if KEY.BLOCK >= (fp.BLKLAST + 1) then
      800     8520    3        do;
      801     8521    3           fp.LBLKLEN = fp.BLKLEN;
      802     8522    3           fp.BLKLAST         = KEY.BLOCK - 1;
      803     8523    3        end;
      804     8524    2        fp.BLKLEN = 0;
      805     8525    2        fp.BLKPOS = 0;
      806     8526    2        KEY.BLOCK = KEY.BLOCK + 1;
      807     8527    2        fp.BLKNUM = KEY.BLOCK - 1;
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:47   
      808     8528    2        fp.o_flags.DIRTY = '0'b;
      809     8529    2        return;
      810     8530    2   end FLUSH;
      811     8531
      812     8532    1   end Z_SYS_WRITE;
      813     8533        %EOD;

PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:48   
--  Include file information  --

   zbm$system$system_n.:ZBC3TOU  is referenced.
   xb_stdio_i6.:LIB_E05  cannot be made into a system file and is referenced.
   XS_MACRO_C.:LIB_E05  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z_SYS_WRITE.

   Procedure Z_SYS_WRITE requires 601 words for executable code.
   Procedure Z_SYS_WRITE requires 46 words of local(AUTO) storage.

PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:49   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:50   
          MINI XREF LISTING

ASCII_LOOP
      8415**LABEL    8424--EXIT
B$ALT.CODE
      8075**DCL      8075--REDEF    8076--REDEF    8076--REDEF
B$ALT.ERR.ERR#
      8077**DCL      8077--REDEF
B$ALT.EVID
      8076**DCL      8076--REDEF    8076--REDEF
BINBUF
      8263**DCL      8308--ASSIGN   8309--ASSIGN   8332<<ASSIGN   8346<<ASSIGN   8347--ASSIGN   8391<<ASSIGN
      8396--ASSIGN   8422<<ASSIGN   8514<<ASSIGN   8517--ASSIGN
BLKS
      8260**DCL      8302<<ASSIGN   8381<<ASSIGN   8388>>ASSIGN   8415>>DOWHILE  8426>>ASSIGN
BSIZE
      8265**DCL      8331<<ASSIGN   8332>>ASSIGN   8332>>ASSIGN   8334>>ASSIGN   8335>>ASSIGN   8336>>ASSIGN
      8419<<ASSIGN   8420>>IF       8422>>ASSIGN   8422>>ASSIGN   8423>>ASSIGN
BUF
      7811**DCL         4--PROC     8332>>ASSIGN   8346>>ASSIGN   8387>>CALLBLT  8391>>ASSIGN   8418>>CALLBLT
      8422>>ASSIGN   8429--ASSIGN
BUFSIZE
      7812**DCL         4--PROC     7811--IMP-SIZ  8302>>ASSIGN   8307>>ASSIGN   8332>>ASSIGN   8346>>ASSIGN
      8381>>ASSIGN   8387>>CALLBLT  8391>>ASSIGN   8418>>CALLBLT  8422>>ASSIGN   8429>>ASSIGN   8445<>CALL
DCB$
      8262**DCL      8289<<ASSIGN   8290>>IF       8293>>IF       8294>>ASSIGN   8301<<ASSIGN   8317>>ASSIGN
      8367>>ASSIGN
ERR
      8448**LABEL    8281--GOTO     8282--CALLALT  8288--GOTO     8316--CALLALT  8319--GOTO     8322--GOTO
      8343--CALLALT  8348--CALLALT  8366--CALLALT  8370--GOTO     8405--CALLALT  8407--CALLALT  8437--CALLALT
      8439--CALLALT
F$DCB.ACTPOS
      8049**DCL      8049--REDEF
F$DCB.ARS#
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:51   
      8023**DCL      8023--REDEF    8317>>ASSIGN   8367>>ASSIGN
F$DCB.ATTR
      8042**DCL      8043--REDEF
F$DCB.BORROW
      8057**DCL      8057--REDEF    8057--REDEF    8057--REDEF
F$DCB.DCBNAME.L
      8071**DCL      8071--IMP-SIZ
F$DCB.EOMCHAR#
      8027**DCL      8027--REDEF
F$DCB.FLDID
      8052**DCL      8052--REDEF
F$DCB.FORM$
      8046**DCL      8046--REDEF
F$DCB.FSECT
      8062**DCL      8062--REDEF
F$DCB.FSN#
      8039**DCL      8039--REDEF    8039--REDEF    8040--REDEF
F$DCB.HEADER$
      8045**DCL      8045--REDEF
F$DCB.IXTNSIZE#
      8043**DCL      8043--REDEF
F$DCB.LASTSTA$
      8032**DCL      8032--REDEF
F$DCB.LVL
      8058**DCL      8058--REDEF
F$DCB.NAME#.C
      8033**DCL      8033--REDEF
F$DCB.NOEOF
      8055**DCL      8055--REDEF
F$DCB.NRECS#
      8044**DCL      8044--REDEF    8293>>IF       8294>>ASSIGN
F$DCB.NRECX
      8063**DCL      8063--REDEF
F$DCB.OHDR
      8055**DCL      8055--REDEF
F$DCB.ORG#
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:52   
      8038**DCL      8038--REDEF    8290>>IF
F$DCB.PRECNO
      8061**DCL      8061--REDEF
F$DCB.RCSZ
      8067**DCL      8067--REDEF
F$DCB.RES#
      8034**DCL      8034--REDEF
F$DCB.SETX
      8046**DCL      8046--REDEF
F$DCB.TAB$
      8046**DCL      8046--REDEF
F$DCB.TDA
      8060**DCL      8061--REDEF
F$DCB.WSN#
      8034**DCL      8034--REDEF
FLUSH
      8463**PROC     8343--CALL     8458--CALL
FP
      7777**DCL         4--PROC     8278--IF       8279--IF       8280--IF       8343<>CALL     8398--IF
      8427--IF       8451--ENTRY    8458<>CALL
FP.BLK$
      7808**DCL      8263--IMP-PTR  8308>>ASSIGN   8309>>ASSIGN   8332>>ASSIGN   8346>>ASSIGN   8347>>ASSIGN
      8391>>ASSIGN   8396>>ASSIGN   8422>>ASSIGN   8514>>ASSIGN   8517>>ASSIGN
FP.BLKLAST
      7806**DCL      8313>>IF       8320>>IF       8351>>IF       8353<<ASSIGN   8364>>IF       8368>>IF
FP.BLKLEN
      7805**DCL      8317<<ASSIGN   8318>>IF       8320>>IF       8337>>IF       8338<<ASSIGN   8361<<ASSIGN
      8367<<ASSIGN   8368>>IF
FP.BLKNUM
      7803**DCL      8273>>ASSIGN   8292<<ASSIGN   8294<<ASSIGN   8296>>ASSIGN   8320>>IF       8350<<ASSIGN
      8368>>IF       8397<<ASSIGN   8397>>ASSIGN   8431<<ASSIGN   8431>>ASSIGN   8455>>ASSIGN
FP.BLKPOS
      7804**DCL      8313>>IF       8318>>IF       8328>>IF       8328>>IF       8331>>ASSIGN   8332>>ASSIGN
      8336<<ASSIGN   8336>>ASSIGN   8337>>IF       8338>>ASSIGN   8360<<ASSIGN   8384>>IF       8390>>ASSIGN
      8391>>ASSIGN   8392<<ASSIGN   8392>>ASSIGN   8394>>IF       8396>>ASSIGN   8409<<ASSIGN   8423<<ASSIGN
FP.DCB#
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:53   
      7779**DCL      8276>>IF       8287<<ASSIGN   8289--ASSIGN   8299>>ASSIGN   8300>>ASSIGN   8456>>ASSIGN
FP.FP$
      7809**DCL      7816--IMP-PTR  8283<>CALL     8284>>ASSIGN   8400>>IF       8401>>ASSIGN   8432>>IF
      8433>>ASSIGN
FP.LBLKLEN
      7807**DCL      8354<<ASSIGN
FP.O_FLAGS.BIN
      7799**DCL      8304>>IF
FP.O_FLAGS.DIRTY
      7783**DCL      8333<<ASSIGN   8342>>IF       8457<<ASSIGN
FP.O_FLAGS.DVBYTE
      7787**DCL      8272>>ASSIGN
FP.O_FLAGS.SEEK
      7782**DCL      8310>>IF       8312<<ASSIGN   8373<<ASSIGN
FP IN PROCEDURE FLUSH
      8474**DCL      8463--PROC
FP.BLKLAST IN PROCEDURE FLUSH
      8503**DCL      8519>>IF       8522<<ASSIGN
FP.BLKLEN IN PROCEDURE FLUSH
      8502**DCL      8509>>ASSIGN   8521>>ASSIGN   8524<<ASSIGN
FP.BLKNUM IN PROCEDURE FLUSH
      8500**DCL      8527<<ASSIGN
FP.BLKPOS IN PROCEDURE FLUSH
      8501**DCL      8525<<ASSIGN
FP.LBLKLEN IN PROCEDURE FLUSH
      8504**DCL      8521<<ASSIGN
FP.O_FLAGS.BIN IN PROCEDURE FLUSH
      8496**DCL      8510>>IF
FP.O_FLAGS.DIRTY IN PROCEDURE FLUSH
      8480**DCL      8528<<ASSIGN
FP_C.FPT_READ.V.DVBYTE.REREAD#
      7878**DCL      7879--REDEF
FP_C.FPT_READ.V.INDX#
      7871**DCL      7872--REDEF
FP_C.FPT_WRITE.V.DVBYTE.VFC#
      7916**DCL      7917--REDEF
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:54   
FP_C.XSA$
      7842**DCL      8284>>ASSIGN   8401>>ASSIGN   8433>>ASSIGN
I
      8266**DCL      8509<<ASSIGN   8512>>IF       8514>>ASSIGN   8514>>ASSIGN   8517>>ASSIGN
KEY
      8246**DCL      8141--DCLINIT  8223--DCLINIT  8224--DCLINIT
KEY.BLOCK
      8248**DCL      8273<<ASSIGN   8296<<ASSIGN   8313>>IF       8349<<ASSIGN   8349>>ASSIGN   8350>>ASSIGN
      8351>>IF       8353>>ASSIGN   8364>>IF       8410<<ASSIGN   8410>>ASSIGN   8440<<ASSIGN   8440>>ASSIGN
      8455<<ASSIGN   8519>>IF       8522>>ASSIGN   8526<<ASSIGN   8526>>ASSIGN   8527>>ASSIGN
M$READ
      5495**DCL-ENT  8316--CALL     8366--CALL
M$WRITE
      5495**DCL-ENT  8348--CALL     8407--CALL     8439--CALL     8518--CALL
OFFS
      8259**DCL      8285<>CALL     8286>>IF       8287>>ASSIGN   8303<<ASSIGN   8332>>ASSIGN   8335<<ASSIGN
      8335>>ASSIGN   8346>>ASSIGN   8356<<ASSIGN   8356>>ASSIGN   8387>>CALLBLT  8393<<ASSIGN   8418>>CALLBLT
      8419>>ASSIGN   8422>>ASSIGN   8429>>ASSIGN   8429>>ASSIGN   8430>>IF       8441<<ASSIGN
READ
      8178**DCL      8268<<ASSIGN   8316<>CALL     8366<>CALL
READ.BUF_
      8180**DCL      8308<<ASSIGN
READ.STATION_
      8181**DCL      8182--REDEF
READ.V
      8182**DCL      8270--ASSIGN
READ.V.DCB#
      8182**DCL      8300<<ASSIGN   8301--ASSIGN
READ.V.DVBYTE.REREAD#
      8193**DCL      8193--REDEF
READ.V.INDX#
      8191**DCL      8191--REDEF
READ.V_
      8178**DCL      8270<<ASSIGN
READ_CONST
      8223**DCL      8268>>ASSIGN
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:55   
READ_CONST.STATION_
      8226**DCL      8227--REDEF
READ_CONST.V
      8227**DCL      8223--DCLINIT
READ_CONST.V.DVBYTE.REREAD#
      8238**DCL      8238--REDEF
READ_CONST.V.INDX#
      8236**DCL      8236--REDEF
REM
      8264**DCL      8307<<ASSIGN   8313>>IF       8326>>DOWHILE  8328>>IF       8331>>ASSIGN   8334<<ASSIGN
      8334>>ASSIGN   8345>>DOWHILE  8357<<ASSIGN   8357>>ASSIGN   8362>>IF       8386<<ASSIGN   8388<<ASSIGN
      8394>>IF       8398>>IF       8410>>ASSIGN   8417<<ASSIGN   8426<<ASSIGN   8431>>ASSIGN   8440>>ASSIGN
RS
      8258**DCL      8278<<ASSIGN   8279<<ASSIGN   8280<<ASSIGN   8282>>CALL     8283<>CALL     8285<>CALL
      8382<<ASSIGN   8387<<CALLBLT  8388<<ASSIGN   8390<<ASSIGN   8390>>ASSIGN   8391>>ASSIGN   8391>>ASSIGN
      8392>>ASSIGN   8393>>ASSIGN   8415>>DOWHILE  8418<<CALLBLT  8419>>ASSIGN   8426<<ASSIGN   8429>>ASSIGN
      8430>>IF       8441>>ASSIGN
WRITE
      8105**DCL      8269<<ASSIGN   8348<>CALL     8405<>CALL     8407<>CALL     8437<>CALL     8439<>CALL
      8453<<ASSIGN   8518<>CALL
WRITE.BUF_
      8105**DCL      8309<<ASSIGN   8347<<ASSIGN   8396<<ASSIGN   8429<<ASSIGN   8430<<ASSIGN   8517<<ASSIGN
WRITE.STATION_
      8107**DCL      8107--REDEF
WRITE.V
      8108**DCL      8271--ASSIGN   8454--ASSIGN
WRITE.V.DCB#
      8108**DCL      8299<<ASSIGN   8456<<ASSIGN
WRITE.V.DVBYTE
      8113**DCL      8272<<ASSIGN
WRITE.V.DVBYTE.BP#
      8114**DCL      8306<<ASSIGN
WRITE.V.DVBYTE.CONT#
      8116**DCL      8399<<ASSIGN   8408<<ASSIGN   8427<<ASSIGN   8444<<ASSIGN
WRITE.V.DVBYTE.VFC#
      8114**DCL      8114--REDEF
PL6.E3A0      #004=Z_SYS_WRITE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:23 Page:56   
WRITE.V_
      8105**DCL      8271<<ASSIGN   8454<<ASSIGN
WRITE_CONST
      8141**DCL      8269>>ASSIGN   8453>>ASSIGN
WRITE_CONST.STATION_
      8143**DCL      8143--REDEF
WRITE_CONST.V
      8144**DCL      8141--DCLINIT
WRITE_CONST.V.DVBYTE.VFC#
      8150**DCL      8150--REDEF
XSA$WRITE
      7958**DCL-ENT  8405--CALL     8437--CALL
XSAPTR$
      7813**DCL      7935--IMP-PTR  8284<<ASSIGN   8401<<ASSIGN   8403<<ASSIGN   8404>>IF       8405>>CALL
      8433<<ASSIGN   8435<<ASSIGN   8436>>IF       8437>>CALL
XSA_PARAM
      7935**DCL      8405<>CALL     8437<>CALL
XSA_PARAM.EOMCHAR#
      7951**DCL      7952--REDEF
XSA_PARAM.SIG1
      7945**DCL      7945--REDEF
XSA_PARAM.SIG2
      7945**DCL      7946--REDEF
Z_ALLOC_BUF
      8254**DCL-ENT  8282--CALL
Z_GET_FP
      8253**DCL-ENT  8283--CALL
Z_GET_IOB
      8252**DCL-ENT  8285--CALL
Z_RETURN_INT
      8251**DCL-ENT  8445--CALL     8448--CALL     8461--CALL
Z_SYS_FTAB
      7970**DCL      8278--IF       8279--IF       8280--IF       8282<>CALL     8398--IF       8427--IF

PL6.E3A0      #005=Z_ALLOC_BUF File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:57   
      814        1        /***
      815        2         ***    Allocate buffer for Binary file
      816        3         ***/
      817        4
      818        5        Z_ALLOC_BUF: proc(fp) altret;
      819        6
      820        7        %include zbm$system$system_n;
      821      253        %Z_SYS_FILDES(NAME=fp,STCLASS="");
      822      296
      823      297    1   dcl  Z_SYS_MALLOC      entry(2);
      824      298    1   dcl  Z_RETURN_INT      entry(1);
      825      299    1   dcl  P$                ptr;
      826      300
      827      301    1     if fp.BLK$ = addr(nil) then
      828      302    2     do;
      829      303    2        call Z_SYS_MALLOC(fp.BLK$,%BIN_BLOCKSIZE);
      830      304    2        if fp.BLK$ = addr(nil) then altreturn;
      831      305    2     end;
      832      306    1     fp.BLKLEN = 0;
      833      307    1     fp.BLKPOS = 0;
      834      308    1     fp.BLKNUM = 0;
      835      309    1     call Z_RETURN_INT(1);
      836      310
      837      311    1   end Z_ALLOC_BUF;
      838      312        %EOD;

PL6.E3A0      #005=Z_ALLOC_BUF File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:58   
--  Include file information  --

   zbm$system$system_n.:ZBC3TOU  is referenced.
      No diagnostics issued in procedure Z_ALLOC_BUF.

   Procedure Z_ALLOC_BUF requires 29 words for executable code.
   Procedure Z_ALLOC_BUF requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=Z_ALLOC_BUF File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:59   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=Z_ALLOC_BUF File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:60   
          MINI XREF LISTING

FP
       262**DCL         5--PROC
FP.BLK$
       293**DCL       301>>IF        303<>CALL      304>>IF
FP.BLKLEN
       290**DCL       306<<ASSIGN
FP.BLKNUM
       288**DCL       308<<ASSIGN
FP.BLKPOS
       289**DCL       307<<ASSIGN
Z_RETURN_INT
       298**DCL-ENT   309--CALL
Z_SYS_MALLOC
       297**DCL-ENT   303--CALL

PL6.E3A0      #006=Z_SYS_FTELL File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:61   
      839        1        /**     Z_SYS_FTELL function:
      840        2         **
      841        3         **        int
      842        4         **        Z_SYS_FTELL(fp)
      843        5         **           File *fp;
      844        6         **
      845        7         **        Result:  The offset in the file to the current position.
      846        8         **/
      847        9        Z_SYS_FTELL:  proc(fp);
      848       10
      849       11        %include zbm$system$system_n;
      850      257
      851      258        %Z_SYS_FILDES(NAME=fp,STCLASS="");
      852      301
      853      302    1   dcl  Z_RETURN_INT   entry(1);
      854      303
      855      304    1     call Z_RETURN_INT( fp.BLKNUM * (%BIN_BLOCKSIZE) + fp.BLKPOS );
      856      305
      857      306    1   end Z_SYS_FTELL;
      858      307        %EOD;

PL6.E3A0      #006=Z_SYS_FTELL File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:62   
--  Include file information  --

   zbm$system$system_n.:ZBC3TOU  is referenced.
      No diagnostics issued in procedure Z_SYS_FTELL.

   Procedure Z_SYS_FTELL requires 17 words for executable code.
   Procedure Z_SYS_FTELL requires 8 words of local(AUTO) storage.

PL6.E3A0      #006=Z_SYS_FTELL File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:63   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=Z_SYS_FTELL File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:64   
          MINI XREF LISTING

FP
       267**DCL         9--PROC
FP.BLKNUM
       293**DCL       304>>CALL
FP.BLKPOS
       294**DCL       304>>CALL
Z_RETURN_INT
       302**DCL-ENT   304--CALL

PL6.E3A0      #007=Z_SYS_FSIZE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:65   
      859        1        Z_SYS_FSIZE:  proc(fp) altret;
      860        2
      861        3        %include zbm$system$system_n;
      862      249        %include   CP_6;
      863     5808        %include   CP_6_SUBS;
      864     6348
      865     6349        %Z_SYS_FILDES(NAME=fp,STCLASS="");
      866     6392
      867     6393    1   dcl  Z_BIN_MARKER   char(2) symref readonly;
      868     6394    1   dcl  Z_RETURN_INT   entry(1);
      869     6395
      870     6396        %F$DCB;
      871     6453
      872     6454        %FPT_READ( FPTN        =  READ,
      873     6455                   BUF         =  NIL,
      874     6456                   KEY         =  KEY,
      875     6457                   KEYS        =  YES,
      876     6458                   STCLASS     =  "");
      877     6497
      878     6498        %FPT_READ( FPTN        =  READ_INIT,
      879     6499                   STCLASS     =  CONSTANT,
      880     6500                   BUF         =  NIL,
      881     6501                   KEY         =  KEY,
      882     6502                   KEYS        =  YES);
      883     6541
      884     6542    1   dcl  RS       sbin;
      885     6543    1   dcl  I        sbin;
      886     6544    1   dcl  BINBUF   char(%BIN_BLOCKSIZE);
      887     6545    1   dcl  1  KEY         static,
      888     6546    1           2  *        ubin(9) unal   init(3),
      889     6547    1           2  BLOCK    ubin(27)unal   init(0);
      890     6548
      891     6549    1     READ        =  READ_INIT;
      892     6550    1     READ.V_     =  vector(READ.V);
      893     6551    1     READ.V.DCB# = fp.DCB#;
      894     6552    1     RS          =  0;
      895     6553    1     if fp.o_flags.BIN = '1'b then
PL6.E3A0      #007=Z_SYS_FSIZE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:66   
      896     6554    2     do;
      897     6555    2        if fp.BLKNUM > fp.BLKLAST then
      898     6556    3        do;
      899     6557    3           call Z_RETURN_INT( fp.BLKNUM*(%BIN_BLOCKSIZE) + fp.BLKLEN);
      900     6558    3        end;
      901     6559    2        if fp.LBLKLEN = 0 then
      902     6560    3        do;   /***  Haven't read/written the last block yet!  ***/
      903     6561    3           READ.BUF_ = vector(BINBUF);
      904     6562    3           KEY.BLOCK = fp.BLKLAST + 1;
      905     6563    3           call M$READ( READ ) altret(err);
      906     6564    3           fp.LBLKLEN = dcbaddr(READ.V.DCB#)->F$DCB.ARS#;
      907     6565    3        end;
      908     6566    2        RS = fp.BLKLAST * (%BIN_BLOCKSIZE) + fp.LBLKLEN;
      909     6567    2     end;
      910     6568    1     call Z_RETURN_INT( RS );
      911     6569
      912     6570    1   err:
      913     6571    1     altreturn;
      914     6572
      915     6573    1   end Z_SYS_FSIZE;
      916     6574        %EOD;

PL6.E3A0      #007=Z_SYS_FSIZE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:67   
--  Include file information  --

   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   zbm$system$system_n.:ZBC3TOU  is referenced.
      No diagnostics issued in procedure Z_SYS_FSIZE.

   Procedure Z_SYS_FSIZE requires 67 words for executable code.
   Procedure Z_SYS_FSIZE requires 280 words of local(AUTO) storage.

PL6.E3A0      #007=Z_SYS_FSIZE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:68   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=Z_SYS_FSIZE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:69   
          MINI XREF LISTING

BINBUF
      6544**DCL      6561--ASSIGN
ERR
      6571**LABEL    6563--CALLALT
F$DCB.ACTPOS
      6429**DCL      6429--REDEF
F$DCB.ARS#
      6403**DCL      6403--REDEF    6564>>ASSIGN
F$DCB.ATTR
      6422**DCL      6423--REDEF
F$DCB.BORROW
      6437**DCL      6437--REDEF    6437--REDEF    6437--REDEF
F$DCB.DCBNAME.L
      6451**DCL      6451--IMP-SIZ
F$DCB.EOMCHAR#
      6407**DCL      6407--REDEF
F$DCB.FLDID
      6432**DCL      6432--REDEF
F$DCB.FORM$
      6426**DCL      6426--REDEF
F$DCB.FSECT
      6442**DCL      6442--REDEF
F$DCB.FSN#
      6419**DCL      6419--REDEF    6419--REDEF    6420--REDEF
F$DCB.HEADER$
      6425**DCL      6425--REDEF
F$DCB.IXTNSIZE#
      6423**DCL      6423--REDEF
F$DCB.LASTSTA$
      6412**DCL      6412--REDEF
F$DCB.LVL
      6438**DCL      6438--REDEF
PL6.E3A0      #007=Z_SYS_FSIZE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:70   
F$DCB.NAME#.C
      6413**DCL      6413--REDEF
F$DCB.NOEOF
      6435**DCL      6435--REDEF
F$DCB.NRECS#
      6424**DCL      6424--REDEF
F$DCB.NRECX
      6443**DCL      6443--REDEF
F$DCB.OHDR
      6435**DCL      6435--REDEF
F$DCB.ORG#
      6418**DCL      6418--REDEF
F$DCB.PRECNO
      6441**DCL      6441--REDEF
F$DCB.RCSZ
      6447**DCL      6447--REDEF
F$DCB.RES#
      6414**DCL      6414--REDEF
F$DCB.SETX
      6426**DCL      6426--REDEF
F$DCB.TAB$
      6426**DCL      6426--REDEF
F$DCB.TDA
      6440**DCL      6441--REDEF
F$DCB.WSN#
      6414**DCL      6414--REDEF
FP
      6358**DCL         1--PROC
FP.BLKLAST
      6387**DCL      6555>>IF       6562>>ASSIGN   6566>>ASSIGN
FP.BLKLEN
      6386**DCL      6557>>CALL
FP.BLKNUM
      6384**DCL      6555>>IF       6557>>CALL
FP.DCB#
      6360**DCL      6551>>ASSIGN
PL6.E3A0      #007=Z_SYS_FSIZE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:71   
FP.LBLKLEN
      6388**DCL      6559>>IF       6564<<ASSIGN   6566>>ASSIGN
FP.O_FLAGS.BIN
      6380**DCL      6553>>IF
KEY
      6545**DCL      6519--DCLINIT  6520--DCLINIT
KEY.BLOCK
      6547**DCL      6562<<ASSIGN
M$READ
      5737**DCL-ENT  6563--CALL
READ
      6475**DCL      6549<<ASSIGN   6563<>CALL
READ.BUF_
      6477**DCL      6561<<ASSIGN
READ.STATION_
      6478**DCL      6479--REDEF
READ.V
      6479**DCL      6550--ASSIGN
READ.V.DCB#
      6479**DCL      6551<<ASSIGN   6564--ASSIGN
READ.V.DVBYTE.REREAD#
      6490**DCL      6490--REDEF
READ.V.INDX#
      6488**DCL      6488--REDEF
READ.V_
      6475**DCL      6550<<ASSIGN
READ_INIT
      6519**DCL      6549>>ASSIGN
READ_INIT.STATION_
      6522**DCL      6523--REDEF
READ_INIT.V
      6523**DCL      6519--DCLINIT
READ_INIT.V.DVBYTE.REREAD#
      6534**DCL      6534--REDEF
READ_INIT.V.INDX#
      6532**DCL      6532--REDEF
PL6.E3A0      #007=Z_SYS_FSIZE File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:72   
RS
      6542**DCL      6552<<ASSIGN   6566<<ASSIGN   6568<>CALL
Z_RETURN_INT
      6394**DCL-ENT  6557--CALL     6568--CALL

PL6.E3A0      #008=Z_SYS_FSEEK File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:73   
      917        1        /***
      918        2         ***    Z_SYS_FSEEK
      919        3         ***
      920        4         ***    int
      921        5         ***    Z_SYS_FSEEK(fp,offset,code)
      922        6         ***
      923        7                   File     *fp;
      924        8         ***       long     offset;
      925        9         ***       int      code;
      926       10         ***
      927       11         ***       code -- 0 relative to bof
      928       12         ***               1 relative to cpos
      929       13         ***               2 relative to eof
      930       14         ***/
      931       15        Z_SYS_FSEEK: proc(fp,offsetv,codev);
      932       16
      933       17        %include zbm$system$system_n;
      934      263        %include CP_6;
      935     5822        %include CP_6_SUBS;
      936     6362
      937     6363        %Z_SYS_FILDES(   Name  =  fp,   Stclass  =  "");
      938     6406
      939     6407    1   dcl  Z_SYS_FSIZE       entry(1) altret;
      940     6408    1   dcl  Z_SYS_FLUSH       entry(1) altret;
      941     6409    1   dcl  Z_RETURN_INT      entry(1);
      942     6410
      943     6411    1   dcl  offsetv  sbin;
      944     6412    1   dcl  codev    sbin;
      945     6413
      946     6414    1   dcl  offset   sbin;
      947     6415    1   dcl  offsetp  redef offset ptr;
      948     6416    1   dcl  code     sbin;
      949     6417    1   dcl  codep    redef code ptr;
      950     6418
      951     6419    1   dcl  seek     sbin;
      952     6420    1   dcl  endfile  sbin;
      953     6421    1   dcl  pos      sbin;
PL6.E3A0      #008=Z_SYS_FSEEK File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:74   
      954     6422    1   dcl  block    sbin;
      955     6423    1   dcl  RS       sbin;
      956     6424
      957     6425    1     offsetp = addr(offsetv);   /**!! Passed by Value !!**/
      958     6426    1     codep   = addr(codev);     /**!! Passed by Value !!**/
      959     6427    1     RS      = 1;               /**  assume error       **/
      960     6428
      961     6429    1     if fp.BLKNUM >= fp.BLKLAST
      962     6430    1        then endfile = fp.BLKNUM * (%BIN_BLOCKSIZE) + fp.BLKLEN + 1;
      963     6431    1        else endfile = fp.BLKLAST * (%BIN_BLOCKSIZE) + fp.LBLKLEN + 1;
      964     6432    1     seek = offset;
      965     6433    2     do case(code);
      966     6434    2     case(1);
      967     6435    2        seek = seek + fp.BLKNUM * (%BIN_BLOCKSIZE) + fp.BLKPOS;
      968     6436    2     case(2);
      969     6437    2        if fp.LBLKLEN = 0 then
      970     6438    3        do;
      971     6439    3           if fp.BLKNUM <= fp.BLKLAST then
      972     6440    4           do;
      973     6441    4              call Z_SYS_FSIZE(fp) altret(err);
      974     6442    4              endfile = fp.BLKLAST * (%BIN_BLOCKSIZE) + fp.LBLKLEN + 1;
      975     6443    4           end;
      976     6444    3              else endfile = fp.BLKNUM*(%BIN_BLOCKSIZE) + fp.BLKLEN+1;
      977     6445    3        end;
      978     6446    2        seek = seek + endfile;
      979     6447    2     end;
      980     6448
      981     6449    1     if seek < 0  or  seek > endfile then
      982     6450    2     do;
      983     6451    2        if seek < 0 then goto err;
      984     6452    2        if fp.LBLKLEN = 0
      985     6453    2           then call Z_SYS_FSIZE(fp) altret(err);
      986     6454    2        if fp.BLKNUM >= fp.BLKLAST
      987     6455    2           then endfile = fp.BLKNUM * (%BIN_BLOCKSIZE) + fp.BLKLEN+1;
      988     6456    2           else endfile = fp.BLKLAST * (%BIN_BLOCKSIZE) + fp.LBLKLEN+1;
      989     6457    2        if seek > endfile then goto err;
      990     6458    2     end;
PL6.E3A0      #008=Z_SYS_FSEEK File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:75   
      991     6459
      992     6460    1     if seek < endfile
      993     6461    1        then fp.o_flags.EOF = '0'b;
      994     6462    1        else fp.o_flags.EOF = '1'b;
      995     6463
      996     6464    1     pos   = mod(seek, (%BIN_BLOCKSIZE));
      997     6465    1     block = seek / (%BIN_BLOCKSIZE);
      998     6466
      999     6467    1     if block ~= fp.BLKNUM then
     1000     6468    2     do;
     1001     6469    2        if fp.o_flags.DIRTY
     1002     6470    2           then call Z_SYS_FLUSH(fp);
     1003     6471    2        fp.BLKNUM = BLOCK;
     1004     6472    2        fp.BLKPOS = pos;
     1005     6473    2        fp.o_flags.seek = '1'b;
     1006     6474    2     end;
     1007     6475    1        else
     1008     6476    2     do;
     1009     6477    2        fp.BLKPOS = pos;
     1010     6478    2     end;
     1011     6479    1     RS = 0;
     1012     6480
     1013     6481    1   err:
     1014     6482    1     call Z_RETURN_INT(RS);
     1015     6483
     1016     6484    1   end Z_SYS_FSEEK;
     1017     6485
     1018     6486        %EOD;

PL6.E3A0      #008=Z_SYS_FSEEK File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:76   
--  Include file information  --

   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   zbm$system$system_n.:ZBC3TOU  is referenced.
      No diagnostics issued in procedure Z_SYS_FSEEK.

   Procedure Z_SYS_FSEEK requires 146 words for executable code.
   Procedure Z_SYS_FSEEK requires 16 words of local(AUTO) storage.

PL6.E3A0      #008=Z_SYS_FSEEK File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:77   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=Z_SYS_FSEEK File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:78   
          MINI XREF LISTING

BLOCK
      6422**DCL      6465<<ASSIGN   6467>>IF       6471>>ASSIGN
CODE
      6416**DCL      6417--REDEF    6433>>DOCASE
CODEP
      6417**DCL      6426<<ASSIGN
CODEV
      6412**DCL        15--PROC     6426--ASSIGN
ENDFILE
      6420**DCL      6430<<ASSIGN   6431<<ASSIGN   6442<<ASSIGN   6444<<ASSIGN   6446>>ASSIGN   6449>>IF
      6455<<ASSIGN   6456<<ASSIGN   6457>>IF       6460>>IF
ERR
      6482**LABEL    6441--CALLALT  6451--GOTO     6453--CALLALT  6457--GOTO
FP
      6372**DCL        15--PROC     6441<>CALL     6453<>CALL     6470<>CALL
FP.BLKLAST
      6401**DCL      6429>>IF       6431>>ASSIGN   6439>>IF       6442>>ASSIGN   6454>>IF       6456>>ASSIGN
FP.BLKLEN
      6400**DCL      6430>>ASSIGN   6444>>ASSIGN   6455>>ASSIGN
FP.BLKNUM
      6398**DCL      6429>>IF       6430>>ASSIGN   6435>>ASSIGN   6439>>IF       6444>>ASSIGN   6454>>IF
      6455>>ASSIGN   6467>>IF       6471<<ASSIGN
FP.BLKPOS
      6399**DCL      6435>>ASSIGN   6472<<ASSIGN   6477<<ASSIGN
FP.LBLKLEN
      6402**DCL      6431>>ASSIGN   6437>>IF       6442>>ASSIGN   6452>>IF       6456>>ASSIGN
FP.O_FLAGS.DIRTY
      6378**DCL      6469>>IF
FP.O_FLAGS.EOF
      6379**DCL      6461<<ASSIGN   6462<<ASSIGN
FP.O_FLAGS.SEEK
      6377**DCL      6473<<ASSIGN
PL6.E3A0      #008=Z_SYS_FSEEK File=zbm$system$Z_SYS:6.:ZBC3TSI                  FRI 08/22/97 09:24 Page:79   
OFFSET
      6414**DCL      6415--REDEF    6432>>ASSIGN
OFFSETP
      6415**DCL      6425<<ASSIGN
OFFSETV
      6411**DCL        15--PROC     6425--ASSIGN
POS
      6421**DCL      6464<<ASSIGN   6472>>ASSIGN   6477>>ASSIGN
RS
      6423**DCL      6427<<ASSIGN   6479<<ASSIGN   6482<>CALL
SEEK
      6419**DCL      6432<<ASSIGN   6435<<ASSIGN   6435>>ASSIGN   6446<<ASSIGN   6446>>ASSIGN   6449>>IF
      6449>>IF       6451>>IF       6457>>IF       6460>>IF       6464>>ASSIGN   6465>>ASSIGN
Z_RETURN_INT
      6409**DCL-ENT  6482--CALL
Z_SYS_FLUSH
      6408**DCL-ENT  6470--CALL
Z_SYS_FSIZE
      6407**DCL-ENT  6441--CALL     6453--CALL

PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:80   
     1019        1        /**     Z_SYS_FILEINFO function:
     1020        2         **
     1021        3         **     int
     1022        4         **     sys_fileinfo(File fp, File_Set info)
     1023        5         **
     1024        6         **     Result: 0=failure, 1=successfull
     1025        7         **/
     1026        8        Z_SYS_FILEINFO:  proc(fp,info) altret;
     1027        9
     1028       10        %include   zbm$system$system_n;
     1029      256        %include   CP_6;
     1030     5815        %include   CP_6_SUBS;
     1031     6355        %include   B$ROSEG;
     1032     6418
     1033     6419        %Z_SYS_FILDES(NAME=fp,STCLASS="");
     1034     6462
     1035     6463        %Z_SYS_FTAB;
     1036     6516
     1037     6517        %Z_FILE_SET(NAME=info,STCLASS="");
     1038     6604
     1039     6605
     1040     6606
     1041     6607        %F$DCB(BASED="BASED(DCB$)");
     1042     6664
     1043     6665    1   dcl  B$ROS$      ptr symref;
     1044     6666
     1045     6667        %FPT_UNFID (  FPTN     =  UNFID_FPT_INIT,
     1046     6668                      STCLASS  =  CONSTANT);
     1047     6686
     1048     6687    1   dcl  TEXTLEN     sbin;
     1049     6688
     1050     6689        %FPT_UNFID (  FPTN     =  UNFID_FPT,
     1051     6690                      STCLASS  =  "");
     1052     6708
     1053     6709
     1054     6710        %FPT_TRMCTL(  FPTN     =  FPT_TRMCTL_INIT,
     1055     6711                      STCLASS  =  CONSTANT,
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:81   
     1056     6712                      DCB      =  M$UC,
     1057     6713                      VLPTYPE  =  WINDOW);
     1058     6740
     1059     6741        %FPT_TRMCTL(  FPTN     =  FPT_TRMCTL,
     1060     6742                      STCLASS  =  "");
     1061     6769
     1062     6770        %VLP_WINDOW(  FPTN     =  WINDOW,
     1063     6771                      STCLASS  =  "");
     1064     6815
     1065     6816
     1066     6817        %VLP_TAB(     FPTN     =  TABS, STCLASS=BASED);
     1067     6831        %VLP_FPRG(    FPTN     =  VLP_FPRG, STCLASS="BASED(HDR$)");
     1068     6852
     1069     6853        %VLP_FORM(    FPTN     =  FORM,     STCLASS=BASED);
     1070     6866        %VLP_HDR(     FPTN     =  HEADER,
     1071     6867                      STCLASS  =  "BASED(HDR$)",
     1072     6868                      LEN      =  HEADER.TITL.L#);
     1073     6884
     1074     6885        %VLP_SETSTA(  FPTN     =  STA, STCLASS="BASED(HDR$)");
     1075     6913
     1076     6914    1   dcl  Z_GET_IOB      entry(2);
     1077     6915    1   dcl  Z_ALLOC_BUF    entry(1) altret;
     1078     6916
     1079     6917
     1080     6918    1   dcl  DCB#        sbin;
     1081     6919    1   dcl  DCB$        ptr;
     1082     6920    1   dcl  HDR$        ptr;
     1083     6921    1   dcl  I           sbin;
     1084     6922    1   dcl  OFFS        sbin;
     1085     6923    1   dcl  RS          sbin;
     1086     6924
     1087     6925
     1088     6926    1   dcl  CHARNAMES   char(%(4*16)) based;
     1089     6927
     1090     6928    1        info = '0'b;
     1091     6929    1        if fp.dcb# = 0 then
     1092     6930    2        do;
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:82   
     1093     6931    2           if addr(fp) = STDIN then RS = 0;
     1094     6932    2              else if addr(fp) = STDOUT then RS = 1;
     1095     6933    2                 else if addr(fp) = STDERR then RS = 2;
     1096     6934    2                    else altreturn;
     1097     6935    2           call Z_ALLOC_BUF(Z_SYS_FTAB(RS)) altret(IO_ERR);
     1098     6936    2           call Z_GET_IOB(RS,OFFS);
     1099     6937    2           if OFFS ~= 0
     1100     6938    2              then fp.dcb# = OFFS;
     1101     6939    2              else altreturn;
     1102     6940    2           dcb$ = dcbaddr(fp.dcb#);
     1103     6941    2           if dcb$->F$DCB.ORG# = %KEYED# then
     1104     6942    3           do;
     1105     6943    3              fp.BLKNUM        = 0;
     1106     6944    3              if dcb$->F$DCB.NRECS# > 0
     1107     6945    3                 then fp.BLKNUM = dcb$->F$DCB.NRECS#;
     1108     6946    3           end;
     1109     6947    2        end;
     1110     6948
     1111     6949    1        DCB#= fp.DCB#;
     1112     6950    1        DCB$  = dcbaddr(DCB#);
     1113     6951    1        UNFID_FPT         = UNFID_FPT_INIT;
     1114     6952    1        UNFID_FPT.V_      = vector(UNFID_FPT.V);
     1115     6953    1        UNFID_FPT.V.DCB#  = DCB#;
     1116     6954    1        UNFID_FPT.TEXTFID_= vector(info.FID);
     1117     6955    1        UNFID_FPT.LEN_    = vector(TEXTLEN);
     1118     6956    1        call M$UNFID(UNFID_FPT) altret(IO_ERR);
     1119     6957
     1120     6958    1        substr(info.FID,TEXTLEN,1) = binasc(0);
     1121     6959
     1122     6960
     1123     6961        /**  Extras...   */
     1124     6962
     1125     6963    1        info.FUN = F$DCB.FUN#;
     1126     6964    1        info.ACS = F$DCB.ACS#;
     1127     6965    1        info.ORG = F$DCB.ORG#;
     1128     6966    1        info.ASN = F$DCB.ASN#;
     1129     6967
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:83   
     1130     6968    2        do case(info.ORG);
     1131     6969    2        case(%CG#);
     1132     6970    2        case(%UR#,%SYMB#);
     1133     6971    2           info.UR.DVFC = F$DCB.DVFC#;
     1134     6972    2           if F$DCB.FORM$ ~= addr(nil) then
     1135     6973    3           do;
     1136     6974    3              info.UR.FORM = F$DCB.FORM$->FORM.FORM#;
     1137     6975    3              substr(info.UR.FORM,6,1) = %binasc(0);
     1138     6976    3           end;
     1139     6977    2           HDR$ = F$DCB.HEADER$;
     1140     6978    2           if HDR$ ~= addr(nil) then
     1141     6979    3           do;
     1142     6980    3              info.UR.TITLE = addr(HEADER.TITL);
     1143     6981    3              info.UR.HDRH  = HEADER.CTL.HEADERHEIGHT#;
     1144     6982    3              info.UR.INDENT  = HEADER.CTL.INDENT#;
     1145     6983    3              info.UR.PAGE    = HEADER.CTL.COUNT#;
     1146     6984    3           end;
     1147     6985    2           info.UR.LINES    = F$DCB.LINES#;
     1148     6986    2           info.UR.WIDTH    = F$DCB.WIDTH#;
     1149     6987    2           if F$DCB.TAB$ ~= addr(nil)
     1150     6988    2              then info.UR.MARGIN = F$DCB.TAB$->TABS.MARGIN#;
     1151     6989
     1152     6990    2        case(%INDEXED#);
     1153     6991    2           info.INDEXED.KEYX    =  F$DCB.KEYX#;
     1154     6992    2           info.INDEXED.KEYL    =  F$DCB.KEYL#;
     1155     6993    2           info.INDEXED.LOAD    =  bitbin(F$DCB.LOAD#);
     1156     6994
     1157     6995    2        case(%RANDOM#,%IDS#);
     1158     6996    2           info.RANDOM.IXTNSIZE  = F$DCB.IXTNSIZE#;
     1159     6997
     1160     6998    2        case(%RELATIVE#);
     1161     6999    2           info.RANDOM.IXTNSIZE  = F$DCB.NRECS#;
     1162     7000
     1163     7001    2        case(%FPRG#);
     1164     7002    2           if F$DCB.FPRGX > 0  then
     1165     7003    3           do;
     1166     7004    3              HDR$ = pincrw(B$ROS$,F$DCB.FPRGX);
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:84   
     1167     7005    3              I = VLP_FPRG.PROFILE#.C#;
     1168     7006    3              if VLP_FPRG.LDBYPRO# > 0 then
     1169     7007    4              do;
     1170     7008    4                 info.FPRG.PROFILE = VLP_FPRG.PROFILE#.T#;
     1171     7009    4                 substr(info.FPRG.PROFILE,I,1) = binasc(0);
     1172     7010    4              end;
     1173     7011    3              I = VLP_FPRG.NAME.L#;
     1174     7012    3              if VLP_FPRG.NAME.L# > 0 then
     1175     7013    4              do;
     1176     7014    4                 info.FPRG.FPRG = VLP_FPRG.NAME.C#;
     1177     7015    4                 substr(info.FPRG.FPRG,I,1) = '.';
     1178     7016    4                 substr(info.FPRG.FPRG,I+1,8) = VLP_FPRG.ACCT#;
     1179     7017    4                 substr(info.FPRG.FPRG,I+9,1) = %binasc(0);
     1180     7018    4              end;
     1181     7019    3           end;
     1182     7020
     1183     7021    2        case(%SE#);
     1184     7022    2           info.SE.NRECS = F$DCB.NRECS#;
     1185     7023    2           info.SE.SPARE = F$DCB.SPARE#;
     1186     7024
     1187     7025    2        end;  /*  Of do case  */
     1188     7026
     1189     7027
     1190     7028    1        if info.ASN = %FILE# then
     1191     7029    2        do;
     1192     7030    2           info.FILE.IXTNSIZE   =  F$DCB.IXTNSIZE#;
     1193     7031    2           info.FILE.NRECS      =  F$DCB.NRECS#;
     1194     7032    2           info.FILE.CTG        =  bitbin(F$DCB.CTG#);
     1195     7033    2           info.FILE.DISP       =  F$DCB.DISP#;
     1196     7034    2           info.FILE.SHARE      =  F$DCB.SHARE#;
     1197     7035    2        end;
     1198     7036    1           else
     1199     7037    1           if info.ASN = %TAPE# and info.ORG ~= %FREE# then
     1200     7038    2           do;
     1201     7039    2              info.TAPE.BLKL    =  F$DCB.BLKL#;
     1202     7040    2              info.TAPE.FSN     =  F$DCB.FSN#;
     1203     7041    2              info.TAPE.DENSITY =  F$DCB.DENSITY#;
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:85   
     1204     7042    2              info.TAPE.BLOCKED =  bitbin(F$DCB.BLOCKED#);
     1205     7043    2              info.TAPE.CVOL    =  bitbin(F$DCB.CVOL#);
     1206     7044    2              info.TAPE.EBCDIC  =  bitbin(F$DCB.EBCDIC#);
     1207     7045    2              info.TAPE.CNVRT   =  bitbin(F$DCB.CNVRT#);
     1208     7046    2              info.TAPE.SPANNED =  bitbin(F$DCB.SPANNED#);
     1209     7047    2              info.TAPE.VOL     =  F$DCB.VOL#;
     1210     7048    2           end;
     1211     7049    1              else if info.ASN = %COMGROUP# then
     1212     7050    2              do;
     1213     7051    2                 info.COMGROUP.AU = bitbin(F$DCB.AU#);
     1214     7052    2                 info.COMGROUP.QISS      = bitbin(F$DCB.QISS#);
     1215     7053    2                 HDR$ = F$DCB.SETSTA$;
     1216     7054    2                 if HDR$ = addr(nil) then exit;
     1217     7055    2                 info.COMGROUP.ALLDCBS   = bitbin(STA.OSTA.ALLDCBS#);
     1218     7056    2                 info.COMGROUP.ALLTRMS   = bitbin(STA.OSTA.ALLTRMS#);
     1219     7057    2                 info.COMGROUP.ANYDCB    = bitbin(STA.OSTA.ANYDCB#);
     1220     7058    2                 info.COMGROUP.DIRONLY   = bitbin(STA.ISTA.DIRONLY#);
     1221     7059    2                 info.COMGROUP.ILATCH    = bitbin(STA.ISTA.ILATCH#);
     1222     7060    2                 info.COMGROUP.ILOCK     = bitbin(STA.ISTA.ILOCK#);
     1223     7061    2                 info.COMGROUP.OLATCH    = bitbin(STA.OSTA.OLATCH#);
     1224     7062    2                 info.COMGROUP.OLOCK     = bitbin(STA.OSTA.OLOCK#);
     1225     7063    2                 info.COMGROUP.EOFNONE   = bitbin(STA.ISTA.EOFNONE#);
     1226     7064    2                 info.COMGROUP.EOFONE    = bitbin(STA.ISTA.EOFONE#);
     1227     7065    2                 info.COMGROUP.MYSTATION = STA.MYSTATION#;
     1228     7066    2                 info.COMGROUP.ISTATION  = STA.ISTA.ISTATION#;
     1229     7067    2                 info.COMGROUP.OSTATION  = STA.OSTA.OSTATION#;
     1230     7068    2                 info.COMGROUP.IMSGTYP   = STA.ISTA.IMSGTYP#;
     1231     7069    2                 info.COMGROUP.OMSGTYP   = STA.OSTA.OMSGTYP#;
     1232     7070    2              end;
     1233     7071    1              else if info.ASN = %DEVICE# and substr(F$DCB.RES#,,2)='UC'
     1234     7072    1                 and substr(F$DCB.RES#,2,2) ~= ' ' then
     1235     7073    2   WINDOW:       do;
     1236     7074    2                    call index(I,F$DCB.RES#,ADDR(B$ROS$->B$ROSEG.LDEVNAME)->CHARNAMES)
     1237     7075    3                       whenreturn do; exit window; end;
     1238     7076    2                    FPT_TRMCTL        =  FPT_TRMCTL_INIT;
     1239     7077    2                    FPT_TRMCTL.V_     =  vector(FPT_TRMCTL.V);
     1240     7078    2                    FPT_TRMCTL.TRMCTL_=  vector(WINDOW);
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:86   
     1241     7079    2                    FPT_TRMCTL.V.DCB# = DCB#;
     1242     7080    2                    call M$GTRMCTL(FPT_TRMCTL)
     1243     7081    3                    whenreturn do;
     1244     7082    3                       info.UC.WLEN = WINDOW.LENGTH#;
     1245     7083    3                       info.UC.WWID = WINDOW.WIDTH#;
     1246     7084    3                       info.UC.MINL = WINDOW.MINLENGTH#;
     1247     7085    3                       info.UC.MINW = WINDOW.MINWIDTH#;
     1248     7086    3                       info.UC.WINLINE = WINDOW.ORG_PST.LINE;
     1249     7087    3                       info.UC.WINCOL  = WINDOW.ORG_PST.COLUMN;
     1250     7088    3                    end;
     1251     7089    2                 end;
     1252     7090    1        return;
     1253     7091
     1254     7092
     1255     7093
     1256     7094
     1257     7095    1   IO_ERR:
     1258     7096    1        altreturn;
     1259     7097
     1260     7098    1   end Z_SYS_FILEINFO;
     1261     7099        %EOD;

PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:87   
--  Include file information  --

   B$ROSEG.:LIB_E05  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   zbm$system$system_n.:ZBC3TOU  is referenced.
      No diagnostics issued in procedure Z_SYS_FILEINFO.

   Procedure Z_SYS_FILEINFO requires 442 words for executable code.
   Procedure Z_SYS_FILEINFO requires 52 words of local(AUTO) storage.

PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:88   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:89   
          MINI XREF LISTING

B$ROS$
      6665**DCL      7004>>ASSIGN   7074>>CALLBLT
B$ROSEG.LDEVNAME
      6376**DCL      7074--CALLBLT
CHARNAMES
      6926**DCL      7074>>CALLBLT
DCB#
      6918**DCL      6949<<ASSIGN   6950--ASSIGN   6953>>ASSIGN   7079>>ASSIGN
DCB$
      6919**DCL      6608--IMP-PTR  6940<<ASSIGN   6941>>IF       6944>>IF       6945>>ASSIGN   6950<<ASSIGN
      6963>>ASSIGN   6964>>ASSIGN   6965>>ASSIGN   6966>>ASSIGN   6971>>ASSIGN   6972>>IF       6974>>ASSIGN
      6977>>ASSIGN   6985>>ASSIGN   6986>>ASSIGN   6987>>IF       6988>>ASSIGN   6991>>ASSIGN   6992>>ASSIGN
      6993>>ASSIGN   6996>>ASSIGN   6999>>ASSIGN   7002>>IF       7004>>ASSIGN   7022>>ASSIGN   7023>>ASSIGN
      7030>>ASSIGN   7031>>ASSIGN   7032>>ASSIGN   7033>>ASSIGN   7034>>ASSIGN   7039>>ASSIGN   7040>>ASSIGN
      7041>>ASSIGN   7042>>ASSIGN   7043>>ASSIGN   7044>>ASSIGN   7045>>ASSIGN   7046>>ASSIGN   7047>>ASSIGN
      7051>>ASSIGN   7052>>ASSIGN   7053>>ASSIGN   7071>>IF       7071>>IF       7074>>CALLBLT
F$DCB.ACS#
      6632**DCL      6964>>ASSIGN
F$DCB.ACTPOS
      6640**DCL      6640--REDEF
F$DCB.ARS#
      6614**DCL      6614--REDEF
F$DCB.ASN#
      6629**DCL      6966>>ASSIGN
F$DCB.ATTR
      6633**DCL      6634--REDEF
F$DCB.AU#
      6626**DCL      7051>>ASSIGN
F$DCB.BLKL#
      6630**DCL      7039>>ASSIGN
F$DCB.BLOCKED#
      6628**DCL      7042>>ASSIGN
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:90   
F$DCB.BORROW
      6648**DCL      6648--REDEF    6648--REDEF    6648--REDEF
F$DCB.CNVRT#
      6627**DCL      7045>>ASSIGN
F$DCB.CTG#
      6628**DCL      7032>>ASSIGN
F$DCB.CVOL#
      6628**DCL      7043>>ASSIGN
F$DCB.DCBNAME.L
      6662**DCL      6662--IMP-SIZ
F$DCB.DENSITY#
      6635**DCL      7041>>ASSIGN
F$DCB.DISP#
      6629**DCL      7033>>ASSIGN
F$DCB.DVFC#
      6636**DCL      6971>>ASSIGN
F$DCB.EBCDIC#
      6627**DCL      7044>>ASSIGN
F$DCB.EOMCHAR#
      6618**DCL      6618--REDEF
F$DCB.FLDID
      6643**DCL      6643--REDEF
F$DCB.FORM$
      6637**DCL      6637--REDEF    6972>>IF       6974>>ASSIGN
F$DCB.FPRGX
      6639**DCL      7002>>IF       7004>>ASSIGN
F$DCB.FSECT
      6653**DCL      6653--REDEF
F$DCB.FSN#
      6630**DCL      6630--REDEF    6630--REDEF    6631--REDEF    7040>>ASSIGN
F$DCB.FUN#
      6629**DCL      6963>>ASSIGN
F$DCB.HEADER$
      6636**DCL      6636--REDEF    6977>>ASSIGN
F$DCB.IXTNSIZE#
      6634**DCL      6634--REDEF    6996>>ASSIGN   7030>>ASSIGN
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:91   
F$DCB.KEYL#
      6631**DCL      6992>>ASSIGN
F$DCB.KEYX#
      6631**DCL      6991>>ASSIGN
F$DCB.LASTSTA$
      6623**DCL      6623--REDEF
F$DCB.LINES#
      6636**DCL      6985>>ASSIGN
F$DCB.LOAD#
      6626**DCL      6993>>ASSIGN
F$DCB.LVL
      6649**DCL      6649--REDEF
F$DCB.NAME#.C
      6624**DCL      6624--REDEF
F$DCB.NOEOF
      6646**DCL      6646--REDEF
F$DCB.NRECS#
      6635**DCL      6635--REDEF    6944>>IF       6945>>ASSIGN   6999>>ASSIGN   7022>>ASSIGN   7031>>ASSIGN
F$DCB.NRECX
      6654**DCL      6654--REDEF
F$DCB.OHDR
      6646**DCL      6646--REDEF
F$DCB.ORG#
      6629**DCL      6629--REDEF    6941>>IF       6965>>ASSIGN
F$DCB.PRECNO
      6652**DCL      6652--REDEF
F$DCB.QISS#
      6626**DCL      7052>>ASSIGN
F$DCB.RCSZ
      6658**DCL      6658--REDEF
F$DCB.RES#
      6625**DCL      6625--REDEF    7071>>IF       7071>>IF       7074>>CALLBLT
F$DCB.SETSTA$
      6623**DCL      7053>>ASSIGN
F$DCB.SETX
      6637**DCL      6637--REDEF
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:92   
F$DCB.SHARE#
      6628**DCL      7034>>ASSIGN
F$DCB.SPANNED#
      6628**DCL      7046>>ASSIGN
F$DCB.SPARE#
      6632**DCL      7023>>ASSIGN
F$DCB.TAB$
      6637**DCL      6637--REDEF    6987>>IF       6988>>ASSIGN
F$DCB.TDA
      6651**DCL      6652--REDEF
F$DCB.VOL#
      6635**DCL      7047>>ASSIGN
F$DCB.WIDTH#
      6621**DCL      6986>>ASSIGN
F$DCB.WSN#
      6625**DCL      6625--REDEF
FORM.FORM#
      6864**DCL      6974>>ASSIGN
FP
      6428**DCL         8--PROC     6931--IF       6932--IF       6933--IF
FP.BLKNUM
      6454**DCL      6943<<ASSIGN   6945<<ASSIGN
FP.DCB#
      6430**DCL      6929>>IF       6938<<ASSIGN   6940--ASSIGN   6949>>ASSIGN
FPT_TRMCTL
      6758**DCL      7076<<ASSIGN   7080<>CALL
FPT_TRMCTL.TRMCTL_
      6764**DCL      7078<<ASSIGN
FPT_TRMCTL.V
      6766**DCL      7077--ASSIGN
FPT_TRMCTL.V.DCB#
      6766**DCL      7079<<ASSIGN
FPT_TRMCTL.V_
      6760**DCL      7077<<ASSIGN
FPT_TRMCTL_INIT
      6729**DCL      7076>>ASSIGN
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:93   
FPT_TRMCTL_INIT.V
      6737**DCL      6731--DCLINIT
HDR$
      6920**DCL      6842--IMP-PTR  6879--IMP-PTR  6897--IMP-PTR  6977<<ASSIGN   6978>>IF       6980>>ASSIGN
      6981>>ASSIGN   6982>>ASSIGN   6983>>ASSIGN   7004<<ASSIGN   7005>>ASSIGN   7006>>IF       7008>>ASSIGN
      7011>>ASSIGN   7012>>IF       7014>>ASSIGN   7016>>ASSIGN   7053<<ASSIGN   7054>>IF       7055>>ASSIGN
      7056>>ASSIGN   7057>>ASSIGN   7058>>ASSIGN   7059>>ASSIGN   7060>>ASSIGN   7061>>ASSIGN   7062>>ASSIGN
      7063>>ASSIGN   7064>>ASSIGN   7065>>ASSIGN   7066>>ASSIGN   7067>>ASSIGN   7068>>ASSIGN   7069>>ASSIGN
HEADER.CTL.COUNT#
      6881**DCL      6983>>ASSIGN
HEADER.CTL.HEADERHEIGHT#
      6880**DCL      6981>>ASSIGN
HEADER.CTL.INDENT#
      6880**DCL      6982>>ASSIGN
HEADER.TITL
      6881**DCL      6980--ASSIGN
HEADER.TITL.L#
      6881**DCL      6882--IMP-SIZ
I
      6921**DCL      7005<<ASSIGN   7009>>ASSIGN   7011<<ASSIGN   7015>>ASSIGN   7016>>ASSIGN   7017>>ASSIGN
      7074<<CALLBLT
INFO
      6525**DCL         8--PROC     6928<<ASSIGN
INFO.ACS
      6527**DCL      6964<<ASSIGN
INFO.ASN
      6529**DCL      6966<<ASSIGN   7028>>IF       7037>>IF       7049>>IF       7071>>IF
INFO.COMGROUP.ALLDCBS
      6590**DCL      7055<<ASSIGN
INFO.COMGROUP.ALLTRMS
      6591**DCL      7056<<ASSIGN
INFO.COMGROUP.ANYDCB
      6592**DCL      7057<<ASSIGN
INFO.COMGROUP.AU
      6600**DCL      7051<<ASSIGN
INFO.COMGROUP.DIRONLY
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:94   
      6593**DCL      7058<<ASSIGN
INFO.COMGROUP.EOFNONE
      6598**DCL      7063<<ASSIGN
INFO.COMGROUP.EOFONE
      6599**DCL      7064<<ASSIGN
INFO.COMGROUP.ILATCH
      6594**DCL      7059<<ASSIGN
INFO.COMGROUP.ILOCK
      6595**DCL      7060<<ASSIGN
INFO.COMGROUP.IMSGTYP
      6588**DCL      7068<<ASSIGN
INFO.COMGROUP.ISTATION
      6586**DCL      7066<<ASSIGN
INFO.COMGROUP.MYSTATION
      6585**DCL      7065<<ASSIGN
INFO.COMGROUP.OLATCH
      6596**DCL      7061<<ASSIGN
INFO.COMGROUP.OLOCK
      6597**DCL      7062<<ASSIGN
INFO.COMGROUP.OMSGTYP
      6589**DCL      7069<<ASSIGN
INFO.COMGROUP.OSTATION
      6587**DCL      7067<<ASSIGN
INFO.COMGROUP.QISS
      6601**DCL      7052<<ASSIGN
INFO.FID
      6530**DCL      6954--ASSIGN   6958<<ASSIGN
INFO.FILE
      6558**DCL      6565--REDEF    6576--REDEF    6584--REDEF
INFO.FILE.CTG
      6561**DCL      7032<<ASSIGN
INFO.FILE.DISP
      6562**DCL      7033<<ASSIGN
INFO.FILE.IXTNSIZE
      6559**DCL      7030<<ASSIGN
INFO.FILE.NRECS
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:95   
      6560**DCL      7031<<ASSIGN
INFO.FILE.SHARE
      6563**DCL      7034<<ASSIGN
INFO.FPRG.FPRG
      6552**DCL      7014<<ASSIGN   7015<<ASSIGN   7016<<ASSIGN   7017<<ASSIGN
INFO.FPRG.PROFILE
      6551**DCL      7008<<ASSIGN   7009<<ASSIGN
INFO.FUN
      6526**DCL      6963<<ASSIGN
INFO.INDEXED.KEYL
      6544**DCL      6992<<ASSIGN
INFO.INDEXED.KEYX
      6543**DCL      6991<<ASSIGN
INFO.INDEXED.LOAD
      6545**DCL      6993<<ASSIGN
INFO.ORG
      6528**DCL      6965<<ASSIGN   6968>>DOCASE   7037>>IF
INFO.RANDOM.IXTNSIZE
      6548**DCL      6996<<ASSIGN   6999<<ASSIGN
INFO.SE.NRECS
      6555**DCL      7022<<ASSIGN
INFO.SE.SPARE
      6556**DCL      7023<<ASSIGN
INFO.TAPE.BLKL
      6566**DCL      7039<<ASSIGN
INFO.TAPE.BLOCKED
      6570**DCL      7042<<ASSIGN
INFO.TAPE.CNVRT
      6573**DCL      7045<<ASSIGN
INFO.TAPE.CVOL
      6571**DCL      7043<<ASSIGN
INFO.TAPE.DENSITY
      6569**DCL      7041<<ASSIGN
INFO.TAPE.EBCDIC
      6572**DCL      7044<<ASSIGN
INFO.TAPE.FSN
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:96   
      6568**DCL      7040<<ASSIGN
INFO.TAPE.SPANNED
      6574**DCL      7046<<ASSIGN
INFO.TAPE.VOL
      6567**DCL      7047<<ASSIGN
INFO.UC.MINL
      6579**DCL      7084<<ASSIGN
INFO.UC.MINW
      6580**DCL      7085<<ASSIGN
INFO.UC.WINCOL
      6582**DCL      7087<<ASSIGN
INFO.UC.WINLINE
      6581**DCL      7086<<ASSIGN
INFO.UC.WLEN
      6577**DCL      7082<<ASSIGN
INFO.UC.WWID
      6578**DCL      7083<<ASSIGN
INFO.UR
      6531**DCL      6542--REDEF    6547--REDEF    6550--REDEF    6554--REDEF
INFO.UR.DVFC
      6535**DCL      6971<<ASSIGN
INFO.UR.FORM
      6534**DCL      6974<<ASSIGN   6975<<ASSIGN
INFO.UR.HDRH
      6536**DCL      6981<<ASSIGN
INFO.UR.INDENT
      6537**DCL      6982<<ASSIGN
INFO.UR.LINES
      6540**DCL      6985<<ASSIGN
INFO.UR.MARGIN
      6539**DCL      6988<<ASSIGN
INFO.UR.PAGE
      6532**DCL      6983<<ASSIGN
INFO.UR.TITLE
      6533**DCL      6980<<ASSIGN
INFO.UR.WIDTH
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:97   
      6538**DCL      6986<<ASSIGN
IO_ERR
      7096**LABEL    6935--CALLALT  6956--CALLALT
M$GTRMCTL
      5767**DCL-ENT  7080--CALL
M$UNFID
      5806**DCL-ENT  6956--CALL
OFFS
      6922**DCL      6936<>CALL     6937>>IF       6938>>ASSIGN
RS
      6923**DCL      6931<<ASSIGN   6932<<ASSIGN   6933<<ASSIGN   6935>>CALL     6936<>CALL
STA.ISTA.DIRONLY#
      6904**DCL      7058>>ASSIGN
STA.ISTA.EOFNONE#
      6903**DCL      7063>>ASSIGN
STA.ISTA.EOFONE#
      6903**DCL      7064>>ASSIGN
STA.ISTA.ILATCH#
      6902**DCL      7059>>ASSIGN
STA.ISTA.ILOCK#
      6902**DCL      7060>>ASSIGN
STA.ISTA.IMSGTYP#
      6902**DCL      7068>>ASSIGN
STA.ISTA.ISTATION#
      6901**DCL      7066>>ASSIGN
STA.MYSTATION#
      6901**DCL      7065>>ASSIGN
STA.OSTA.ALLDCBS#
      6908**DCL      7055>>ASSIGN
STA.OSTA.ALLTRMS#
      6908**DCL      7056>>ASSIGN
STA.OSTA.ANYDCB#
      6909**DCL      7057>>ASSIGN
STA.OSTA.OLATCH#
      6907**DCL      7061>>ASSIGN
STA.OSTA.OLOCK#
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:98   
      6907**DCL      7062>>ASSIGN
STA.OSTA.OMSGTYP#
      6906**DCL      7069>>ASSIGN
STA.OSTA.OSTATION#
      6906**DCL      7067>>ASSIGN
TABS.MARGIN#
      6828**DCL      6988>>ASSIGN
TEXTLEN
      6687**DCL      6955--ASSIGN   6958>>ASSIGN
UNFID_FPT
      6701**DCL      6951<<ASSIGN   6956<>CALL
UNFID_FPT.LEN_
      6704**DCL      6955<<ASSIGN
UNFID_FPT.TEXTFID_
      6701**DCL      6954<<ASSIGN
UNFID_FPT.V
      6705**DCL      6952--ASSIGN
UNFID_FPT.V.DCB#
      6705**DCL      6953<<ASSIGN
UNFID_FPT.V_
      6701**DCL      6952<<ASSIGN
UNFID_FPT_INIT
      6679**DCL      6951>>ASSIGN
UNFID_FPT_INIT.V
      6683**DCL      6679--DCLINIT
VLP_FPRG.ACCT#
      6848**DCL      7016>>ASSIGN
VLP_FPRG.LDBYPRO#
      6846**DCL      7006>>IF
VLP_FPRG.NAME.C#
      6848**DCL      7014>>ASSIGN
VLP_FPRG.NAME.L#
      6847**DCL      7011>>ASSIGN   7012>>IF
VLP_FPRG.PROFILE#.C#
      6849**DCL      7005>>ASSIGN
VLP_FPRG.PROFILE#.T#
PL6.E3A0      #009=Z_SYS_FILEINFO File=zbm$system$Z_SYS:6.:ZBC3TSI               FRI 08/22/97 09:24 Page:99   
      6849**DCL      7008>>ASSIGN
WINDOW
      7073**LABEL    7075--EXIT     7078--ASSIGN
WINDOW.FWINDOW#
      6789**DCL      6789--REDEF    6790--REDEF
WINDOW.LENGTH#
      6803**DCL      7082>>ASSIGN
WINDOW.MINLENGTH#
      6808**DCL      7084>>ASSIGN
WINDOW.MINWIDTH#
      6809**DCL      7085>>ASSIGN
WINDOW.ORG_PST.COLUMN
      6804**DCL      7087>>ASSIGN
WINDOW.ORG_PST.LINE
      6804**DCL      7086>>ASSIGN
WINDOW.WIDTH#
      6803**DCL      7083>>ASSIGN
Z_ALLOC_BUF
      6915**DCL-ENT  6935--CALL
Z_GET_IOB
      6914**DCL-ENT  6936--CALL
Z_SYS_FTAB
      6471**DCL      6931--IF       6932--IF       6933--IF       6935<>CALL

PL6.E3A0      #010=Z_SYS_HEADING File=zbm$system$Z_SYS:6.:ZBC3TSI                FRI 08/22/97 09:25 Page:100  
     1262        1        /**      Z_SYS_HEADING  function
     1263        2         **
     1264        3         **      int
     1265        4         **      sys_heading (File fp, char heading[512], int cur_page)
     1266        5         **
     1267        6         **      Result: 0=failure, 1=sucessful
     1268        7         **/
     1269        8
     1270        9        Z_SYS_HEADING:  proc(fp, heading, cur_page) altret;
     1271       10
     1272       11        %include   zbm$system$system_n;
     1273      257        %include   CP_6;
     1274     5816        %include   CP_6_SUBS;
     1275     6356        %include   B$ROSEG;
     1276     6419
     1277     6420        %Z_SYS_FILDES(NAME=fp,STCLASS="");
     1278     6463    1   DCL   heading  char(511);
     1279     6464    1   DCL   cur_page sbin;
     1280     6465
     1281     6466        %Z_SYS_FTAB;
     1282     6519
     1283     6520        %F$DCB(BASED="BASED(DCB$)");
     1284     6577
     1285     6578        %VLP_HDR(     FPTN     =  HEADER,
     1286     6579                      STCLASS  =  "STATIC",
     1287     6580                      HEADERHEIGHT = 2,
     1288     6581                      LEN      =  512);
     1289     6597
     1290     6598        %FPT_DEVICE (FPTN=FPT_DEVICE,
     1291     6599                     STCLASS = "",
     1292     6600                     HDR = HEADER);
     1293     6618
     1294     6619        %FPT_DEVICE (FPTN=FPT$DEVICE,
     1295     6620                     PAGE=YES,
     1296     6621                     STCLASS = "CONSTANT"
     1297     6622                     );
     1298     6640
PL6.E3A0      #010=Z_SYS_HEADING File=zbm$system$Z_SYS:6.:ZBC3TSI                FRI 08/22/97 09:25 Page:101  
     1299     6641
     1300     6642    1   dcl  Z_GET_IOB      entry(2);
     1301     6643    1   dcl  Z_ALLOC_BUF    entry(1) altret;
     1302     6644
     1303     6645
     1304     6646    1   dcl  DCB#        sbin;
     1305     6647    1   dcl  DCB$        ptr;
     1306     6648    1   dcl  HDR$        ptr;
     1307     6649    1   dcl  I           sbin;
     1308     6650    1   dcl  OFFS        sbin;
     1309     6651    1   dcl  RS          sbin;
     1310     6652
     1311     6653
     1312     6654
     1313     6655    1        if fp.dcb# = 0 then
     1314     6656    2        do;
     1315     6657    2           if addr(fp) = STDIN then RS = 0;
     1316     6658    2              else if addr(fp) = STDOUT then RS = 1;
     1317     6659    2                 else if addr(fp) = STDERR then RS = 2;
     1318     6660    2                    else altreturn;
     1319     6661    2           call Z_ALLOC_BUF(Z_SYS_FTAB(RS)) altret(IO_ERR);
     1320     6662    2           call Z_GET_IOB(RS,OFFS);
     1321     6663    2           if OFFS ~= 0
     1322     6664    2              then fp.dcb# = OFFS;
     1323     6665    2              else altreturn;
     1324     6666    2           dcb$ = dcbaddr(fp.dcb#);
     1325     6667    2        end;
     1326     6668
     1327     6669    1        DCB#= fp.DCB#;
     1328     6670    1        DCB$  = dcbaddr(DCB#);
     1329     6671
     1330     6672        /*    Now its time to setup the heading         */
     1331     6673
     1332     6674    1         call index (RS, %binasc(10), heading);
     1333     6675    1         HEADER.TITL.TITLE# = binasc(0);
     1334     6676    1         substr (HEADER.TITL.TITLE#,,RS-3) = substr (heading,1,RS-2);
     1335     6677    1         HEADER.CTL.INDENT# = 1;
PL6.E3A0      #010=Z_SYS_HEADING File=zbm$system$Z_SYS:6.:ZBC3TSI                FRI 08/22/97 09:25 Page:102  
     1336     6678    1         HEADER.TITL.L# = RS;
     1337     6679    1         HEADER.CTL.COUNT# = RS - 2;
     1338     6680    1         if (cur_page = 1) then
     1339     6681    1            HEADER.CTL.RESETPAGE# = '1'B;
     1340     6682    1         else
     1341     6683    1            HEADER.CTL.RESETPAGE# = '0'B;
     1342     6684    1         substr (HEADER.TITL.TITLE#,RS+1,1) = binasc(0);
     1343     6685    1         FPT_DEVICE = FPT$DEVICE;
     1344     6686    1         FPT_DEVICE.V.DCB# = DCB#;
     1345     6687    1         FPT_DEVICE.V_ = VECTOR (FPT_DEVICE.V);
     1346     6688    1         FPT_DEVICE.HDR_ = VECTOR(HEADER);
     1347     6689    1         CALL M$DEVICE (FPT_DEVICE) ALTRET (IO_ERR);
     1348     6690    1         RETURN;
     1349     6691
     1350     6692    1   IO_ERR:
     1351     6693    1        altreturn;
     1352     6694
     1353     6695    1   end   Z_SYS_HEADING;

PL6.E3A0      #010=Z_SYS_HEADING File=zbm$system$Z_SYS:6.:ZBC3TSI                FRI 08/22/97 09:25 Page:103  
--  Include file information  --

   B$ROSEG.:LIB_E05  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   zbm$system$system_n.:ZBC3TOU  is referenced.
      No diagnostics issued in procedure Z_SYS_HEADING.

   Procedure Z_SYS_HEADING requires 109 words for executable code.
   Procedure Z_SYS_HEADING requires 24 words of local(AUTO) storage.

    No errors detected in file zbm$system$Z_SYS:6.:ZBC3TSI    .

PL6.E3A0      #010=Z_SYS_HEADING File=zbm$system$Z_SYS:6.:ZBC3TSI                FRI 08/22/97 09:25 Page:104  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=Z_SYS_HEADING File=zbm$system$Z_SYS:6.:ZBC3TSI                FRI 08/22/97 09:25 Page:105  
          MINI XREF LISTING

CUR_PAGE
      6464**DCL         9--PROC     6680>>IF
DCB#
      6646**DCL      6669<<ASSIGN   6670--ASSIGN   6686>>ASSIGN
DCB$
      6647**DCL      6521--IMP-PTR  6666<<ASSIGN   6670<<ASSIGN
F$DCB.ACTPOS
      6553**DCL      6553--REDEF
F$DCB.ARS#
      6527**DCL      6527--REDEF
F$DCB.ATTR
      6546**DCL      6547--REDEF
F$DCB.BORROW
      6561**DCL      6561--REDEF    6561--REDEF    6561--REDEF
F$DCB.DCBNAME.L
      6575**DCL      6575--IMP-SIZ
F$DCB.EOMCHAR#
      6531**DCL      6531--REDEF
F$DCB.FLDID
      6556**DCL      6556--REDEF
F$DCB.FORM$
      6550**DCL      6550--REDEF
F$DCB.FSECT
      6566**DCL      6566--REDEF
F$DCB.FSN#
      6543**DCL      6543--REDEF    6543--REDEF    6544--REDEF
F$DCB.HEADER$
      6549**DCL      6549--REDEF
F$DCB.IXTNSIZE#
      6547**DCL      6547--REDEF
F$DCB.LASTSTA$
      6536**DCL      6536--REDEF
PL6.E3A0      #010=Z_SYS_HEADING File=zbm$system$Z_SYS:6.:ZBC3TSI                FRI 08/22/97 09:25 Page:106  
F$DCB.LVL
      6562**DCL      6562--REDEF
F$DCB.NAME#.C
      6537**DCL      6537--REDEF
F$DCB.NOEOF
      6559**DCL      6559--REDEF
F$DCB.NRECS#
      6548**DCL      6548--REDEF
F$DCB.NRECX
      6567**DCL      6567--REDEF
F$DCB.OHDR
      6559**DCL      6559--REDEF
F$DCB.ORG#
      6542**DCL      6542--REDEF
F$DCB.PRECNO
      6565**DCL      6565--REDEF
F$DCB.RCSZ
      6571**DCL      6571--REDEF
F$DCB.RES#
      6538**DCL      6538--REDEF
F$DCB.SETX
      6550**DCL      6550--REDEF
F$DCB.TAB$
      6550**DCL      6550--REDEF
F$DCB.TDA
      6564**DCL      6565--REDEF
F$DCB.WSN#
      6538**DCL      6538--REDEF
FP
      6429**DCL         9--PROC     6657--IF       6658--IF       6659--IF
FP.DCB#
      6431**DCL      6655>>IF       6664<<ASSIGN   6666--ASSIGN   6669>>ASSIGN
FPT$DEVICE
      6633**DCL      6685>>ASSIGN
FPT$DEVICE.V
      6634**DCL      6633--DCLINIT
PL6.E3A0      #010=Z_SYS_HEADING File=zbm$system$Z_SYS:6.:ZBC3TSI                FRI 08/22/97 09:25 Page:107  
FPT_DEVICE
      6611**DCL      6685<<ASSIGN   6689<>CALL
FPT_DEVICE.HDR_
      6611**DCL      6688<<ASSIGN
FPT_DEVICE.V
      6612**DCL      6687--ASSIGN
FPT_DEVICE.V.DCB#
      6612**DCL      6686<<ASSIGN
FPT_DEVICE.V_
      6611**DCL      6687<<ASSIGN
HEADER
      6592**DCL      6688--ASSIGN
HEADER.CTL.COUNT#
      6594**DCL      6679<<ASSIGN
HEADER.CTL.INDENT#
      6593**DCL      6677<<ASSIGN
HEADER.CTL.RESETPAGE#
      6592**DCL      6681<<ASSIGN   6683<<ASSIGN
HEADER.TITL.L#
      6594**DCL      6678<<ASSIGN
HEADER.TITL.TITLE#
      6595**DCL      6675<<ASSIGN   6676<<ASSIGN   6684<<ASSIGN
HEADING
      6463**DCL         9--PROC     6674>>CALLBLT  6676>>ASSIGN
IO_ERR
      6693**LABEL    6661--CALLALT  6689--CALLALT
M$DEVICE
      5748**DCL-ENT  6689--CALL
OFFS
      6650**DCL      6662<>CALL     6663>>IF       6664>>ASSIGN
RS
      6651**DCL      6657<<ASSIGN   6658<<ASSIGN   6659<<ASSIGN   6661>>CALL     6662<>CALL     6674<<CALLBLT
      6676>>ASSIGN   6676>>ASSIGN   6678>>ASSIGN   6679>>ASSIGN   6684>>ASSIGN
Z_ALLOC_BUF
      6643**DCL-ENT  6661--CALL
Z_GET_IOB
PL6.E3A0      #010=Z_SYS_HEADING File=zbm$system$Z_SYS:6.:ZBC3TSI                FRI 08/22/97 09:25 Page:108  
      6642**DCL-ENT  6662--CALL
Z_SYS_FTAB
      6474**DCL      6657--IF       6658--IF       6659--IF       6661<>CALL
