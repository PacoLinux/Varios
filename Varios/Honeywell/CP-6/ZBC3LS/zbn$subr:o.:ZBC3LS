

CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             #ifndef NORCSID
        6         6             static char rcsid[]= "$Header: subr.c,v 0.6 87/03/09 19:07:49 ceriel Exp $";
        7         7             #endif
        8         8
        9         9             #include "param:h"
       10        10             #include "reg:h"
       11        11             #include "lookup:h"
       12        12             #include "property:h"
       13        13             #include "expr:h"
       14        14             #include "set:h"
       15        15             #include "varinfo:h"
       16        16             #include "instruct:h"
       17        17             #include "token:h"
       18        18             #include "regvar:h"
       19        19             #include <cgg_cg:h>
       20        20             #include "extern:h"
       21        21
       22        22             extern struct varinfo null_varinfo;
       23        23             extern token_t null_token_t;
       24        24
       25        25             n_proc(name) char *name; {
       26        26    1         register symbol *sy_p;
       27        27    1         extern int npatbytes;
       28        28    1
       29        29    1         sy_p = lookup(name,symproc,newsymbol);
       30        30    1         sy_p->sy_value.syv_procoff = npatbytes + 1;
       31        31    1        }
       32        32
       33        33             struct varinfo *
       34        34             make_erase(name) char *name; {
       35        35    1         expr_t e,ident_expr();
       36        36    1         struct varinfo *result;
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37    1
       38        38    1         e = ident_expr(name);
       39        39    1         if (e.ex_typ != TYPREG)
       40        40    1            error("Register name required here");
       41        41    1         NEW(result,struct varinfo,null_varinfo);
       42        42    1         result->vi_next = VI_NULL;
       43        43    1         result->vi_int[0] = e.ex_index;
       44        44    1         return(result);
       45        45    1        }
       46        46
       47        47             n_instr(name,asname,oplist,eraselist,cost)
       48        48             char *name,*asname;
       49        49             struct operand *oplist;
       50        50             struct varinfo *eraselist,*cost;
       51        51             {
       52        52    1         register instrno;
       53        53    1         register cc_count;
       54        54    1         register instr_p ip;
       55        55    1
       56        56    1         instrno = NEXT(ninstr,MAXINSTR,"Instructions");
       57        57    1         ip = &l_instr[instrno];
       58        58    1         ip->i_name = name;
       59        59    1         ip->i_asname = strlookup(asname!=0 ? asname : name);
       60        60    1         ip->i_nops = 0;
       61        61    1         ip->i_oplist = oplist;
       62        62    1         ip->i_erases = eraselist;
       63        63    1         if (cost==0) {
       64        64    2            ip->i_cost.ct_space = 0;
       65        65    2            ip->i_cost.ct_time = 0;
       66        66    2         } else {
       67        67    2            ip->i_cost.ct_space = cost->vi_int[0];
       68        68    2            ip->i_cost.ct_space = cost->vi_int[1];
       69        69    2         }
       70        70    1         for (cc_count=0; oplist!=0; oplist = oplist->o_next) {
       71        71    2            ip->i_nops++;
       72        72    2            if(oplist->o_adorn&AD_CC)
       73        73    2               cc_count++;
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74    2         }
       75        75    1         while (eraselist!=VI_NULL) {
       76        76    2            if (eraselist->vi_int[0] == -1 && cc_count)
       77        77    2               error("Instruction can't both set and break the condition codes");
       78        78    2            eraselist=eraselist->vi_next;
       79        79    2         }
       80        80    1         if (cc_count>1)
       81        81    1            error("No instruction can set condition codes more than once");
       82        82    1        }
       83        83
       84        84             n_set(name,number) char *name; {
       85        85    1         register symbol *sy_p;
       86        86    1
       87        87    1         sy_p = lookup(name,symset,newsymbol);
       88        88    1         sy_p->sy_value.syv_setno = number;
       89        89    1        }
       90        90
       91        91             n_tok(name,atts,size,cost,format)
       92        92             char *name;
       93        93             struct varinfo *atts,*cost,*format;
       94        94             {
       95        95    1         register symbol *sy_p;
       96        96    1         register token_p tp;
       97        97    1         register struct varinfo *vip;
       98        98    1         int i;
       99        99    1         int tokno;
      100       100    1         int thistokensize;
      101       101    1         char formstr[50],smallstr[2];
      102       102    1
      103       103    1         sy_p = lookup(name,symtok,newsymbol);
      104       104    1         NEW(tp,token_t,null_token_t);
      105       105    1         tokno = NEXT(ntokens,MAXTOKENS,"Tokens");
      106       106    1         sy_p->sy_value.syv_tokno = tokno;
      107       107    1         l_tokens[tokno] = tp;
      108       108    1         tp->tk_name = sy_p->sy_name;
      109       109    1         tp->tk_size = size;
      110       110    1         if (cost != 0) {
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      111       111    2            tp->tk_cost.ct_space = cost->vi_int[0];
      112       112    2            tp->tk_cost.ct_time  = cost->vi_int[1];
      113       113    2         } else {
      114       114    2            tp->tk_cost.ct_space = 0;
      115       115    2            tp->tk_cost.ct_time  = 0;
      116       116    2         }
      117       117    1         for(i=0,vip=atts;i<MAXATT && vip!=0;i++,vip=vip->vi_next) {
      118       118    2            tp->tk_att[i].ta_type = vip->vi_int[0];
      119       119    2            tp->tk_att[i].ta_name = vip->vi_str[0];
      120       120    2            vip->vi_str[0]=0;
      121       121    2         }
      122       122    1         thistokensize=i;
      123       123    1         if (i>maxtokensize)
      124       124    1            maxtokensize=i;
      125       125    1         if (vip!=0)
      126       126    1            error("More then %d attributes, rest discarded",MAXATT);
      127       127    1         for(;i<MAXATT;i++)
      128       128    1            tp->tk_att[i].ta_type= -3;
      129       129    1         if (format!=0) {
      130       130    2            formstr[0] = 0;
      131       131    2            for (vip=format;vip!=0;vip=vip->vi_next) {
      132       132    3               if (vip->vi_int[0]==0)
      133       133    3                  strcat(formstr,vip->vi_str[0]);
      134       134    3               else {
      135       135    4                  for(i=0;i<thistokensize;i++) {
      136       136    5                     if (strcmp(vip->vi_str[0],tp->tk_att[i].ta_name)==0) {
      137       137    6                        smallstr[0] = i+1;
      138       138    6                        smallstr[1] = 0;
      139       139    6                        strcat(formstr,smallstr);
      140       140    6                        break;
      141       141    6                     }
      142       142    5                  }
      143       143    4                  if (i==thistokensize)
      144       144    4                     error("%s not a known attribute",
      145       145    4                        vip->vi_str[0]);
      146       146    4               }
      147       147    3            }
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      148       148    2            tp->tk_format = strlookup(formstr);
      149       149    2         } else
      150       150    1            tp->tk_format = -1;
      151       151    1        }
      152       152
      153       153             checkprintformat(n) {
      154       154    1         register short *s;
      155       155    1         register i;
      156       156    1         extern set_t l_sets[];
      157       157    1
      158       158    1         s= l_sets[n].set_val;
      159       159    1         for(i=nregs;i<nregs+ntokens;i++)
      160       160    1            if (BIT(s,i) && l_tokens[i-nregs]->tk_format<0)
      161       161    1               error("Token %s in set does not have printformat",
      162       162    1                  l_tokens[i-nregs]->tk_name);
      163       163    1        }
      164       164
      165       165             n_prop(name,size) char *name; int size; {
      166       166    1         int propno;
      167       167    1         register symbol *sp;
      168       168    1
      169       169    1         propno = NEXT(nprops,MAXPROPS,"Properties");
      170       170    1         sp = lookup(name,symprop,newsymbol);
      171       171    1         sp->sy_value.syv_propno = propno;
      172       172    1         if (size <= 0) {
      173       173    2            error("Size of property must be >0");
      174       174    2            size = wordsize;
      175       175    2         }
      176       176    1         l_props[propno].pr_size = size;
      177       177    1        }
      178       178
      179       179             prophall(n) {
      180       180    1         register i;
      181       181    1         short hallset[SETSIZE];
      182       182    1
      183       183    1         if (n < 0) return;
      184       184    1         for(i=0;i<SETSIZE;i++)
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      185       185    1            hallset[i] = i<SZOFSET(MAXREGS) ? l_props[n].pr_regset[i] : 0;
      186       186    1         nexthall(hallset);
      187       187    1        }
      188       188
      189       189             n_reg(name,printstring,nmemb,member1,member2) char *name,*printstring; {
      190       190    1         register symbol *sy_p;
      191       191    1         register struct reginfo *ri_p;
      192       192    1         int regno;
      193       193    1
      194       194    1         sy_p = lookup(name,symreg,newsymbol);
      195       195    1         sy_p->sy_value.syv_regno = regno = NEXT(nregs,MAXREGS,"Number of registers");

      196       196    1         ri_p = &l_regs[regno];
      197       197    1         ri_p->ri_name = mystrcpy(name);
      198       198    1         ri_p->ri_repr = printstring!=0 ? mystrcpy(printstring) : ri_p->ri_name;
      199       199    1         ri_p->ri_memb[0] = member1;
      200       200    1         ri_p->ri_memb[1] = member2;
      201       201    1         if (nmemb>maxmembers)
      202       202    1            maxmembers=nmemb;
      203       203    1         return(regno);
      204       204    1        }
      205       205
      206       206             make_const() {
      207       207    1
      208       208    1         wordsize = cmustbeset("EM_WSIZE");
      209       209    1         pointersize = cmustbeset("EM_PSIZE");
      210       210    1        }
      211       211
      212       212             cmustbeset(ident) char *ident; {
      213       213    1
      214       214    1         return(lookup(ident,symconst,mustexist)->sy_value.syv_cstval);
      215       215    1        }
      216       216
      217       217             n_const(ident,val) char *ident; {
      218       218    1         register symbol *sy_p;
      219       219    1
      220       220    1         sy_p = lookup(ident,symconst,newsymbol);
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      221       221    1         sy_p->sy_value.syv_cstval = val;
      222       222    1        }
      223       223
      224       224             n_sconst(ident,val) char *ident,*val; {
      225       225    1         register symbol *sy_p;
      226       226    1
      227       227    1         sy_p = lookup(ident,symsconst,newsymbol);
      228       228    1         sy_p->sy_value.syv_stringno = strlookup(val);
      229       229    1        }
      230       230
      231       231             regline(rl,pl,rv) struct varinfo *rl,*pl; {
      232       232    1         register struct varinfo *rrl,*rpl;
      233       233    1         register short *sp;
      234       234    1         register struct reginfo *regp;
      235       235    1         int thissize;
      236       236    1         int propno;
      237       237    1
      238       238    1         for(rrl=rl;rrl!=0;rrl=rrl->vi_next) {
      239       239    2            regp = &l_regs[rrl->vi_int[0]];
      240       240    2            thissize = 0;
      241       241    2            for(rpl=pl;rpl!=0;rpl=rpl->vi_next) {
      242       242    3               propno = rpl->vi_int[0];
      243       243    3               sp= l_props[propno].pr_regset;
      244       244    3               BIS(sp,rrl->vi_int[0]);
      245       245    3               if (thissize==0)
      246       246    3                  thissize = l_props[propno].pr_size;
      247       247    3               else if (thissize!=-1 && thissize!=l_props[propno].pr_size)
      248       248    3                  error("Register %s has no clear size",
      249       249    3                     regp->ri_name);
      250       250    3            }
      251       251    2            regp->ri_size = thissize;
      252       252    2            regp->ri_class = regclass;
      253       253    2            regp->ri_rregvar = rv;
      254       254    2            if (rv>=0) {
      255       255    3               if (regp->ri_memb[0]!=0)
      256       256    3                  error("Register variables may not have subregisters");
      257       257    3               rvused |= ANY_REGVAR;
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      258       258    3               if (regp->ri_size == wordsize)
      259       259    3                  rvused |= SL_REGVAR;
      260       260    3               else if (regp->ri_size == 2*wordsize)
      261       261    3                  rvused |= DL_REGVAR;
      262       262    3               if (nregvar[rv]==0)
      263       263    3                  rvsize[rv] = regp->ri_size;
      264       264    3               else if (rvsize[rv]!=regp->ri_size)
      265       265    3                  error("All register variables of one type must have the same size");

      266       266    3               NEXT(nregvar[rv],MAXREGVAR,"Register variable");
      267       267    3               rvnumbers[rv][nregvar[rv]-1] = rrl->vi_int[0];
      268       268    3            }
      269       269    2         }
      270       270    1         regclass++;
      271       271    1        }
      272       272
      273       273             setallreg(vi) struct varinfo *vi; {
      274       274    1
      275       275    1         nallreg=0;
      276       276    1         for(;vi!=0;vi=vi->vi_next) {
      277       277    2            if (vi->vi_int[0]<0)
      278       278    2               continue;
      279       279    2            allreg[nallreg++] = vi->vi_int[0];
      280       280    2         }
      281       281    1        }
      282       282
      283       283             freevi(vip) register struct varinfo *vip; {
      284       284    1         register i;
      285       285    1         extern char *end;
      286       286    1
      287       287    1         if (vip==0)
      288       288    1            return;
      289       289    1         freevi(vip->vi_next);
      290       290    1         freevi(vip->vi_vi);
      291       291    1         for (i=0;i<VI_NSTR;i++)
      292       292    1            if (vip->vi_str[i]>end)
      293       293    1               free((char *) vip->vi_str[i]);
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      294       294    1         free(vip);
      295       295    1        }
      296       296
      297       297             int myatoi(s) register char *s; {
      298       298    1         register int base=10;
      299       299    1         register sum=0;
      300       300    1
      301       301    1         if (*s=='0') {
      302       302    2            base = 8;
      303       303    2            s++;
      304       304    2            if (*s=='x') {
      305       305    3               base=16;
      306       306    3               s++;
      307       307    3            }
      308       308    2         }
      309       309    1         for (;;) {
      310       310    2            switch (*s) {
      311       311    3            default: return(sum);
      312       312    3            case '8':
      313       313    3            case '9':
      314       314    3               if (base==8) error("Bad digit in octal number");
      315       315    3            case '0':
      316       316    3            case '1':
      317       317    3            case '2':
      318       318    3            case '3':
      319       319    3            case '4':
      320       320    3            case '5':
      321       321    3            case '6':
      322       322    3            case '7':
      323       323    3               sum = sum*base + *s++ - '0';
      324       324    3               break;
      325       325    3            case 'a':
      326       326    3            case 'b':
      327       327    3            case 'c':
      328       328    3            case 'd':
      329       329    3            case 'e':
      330       330    3            case 'f':
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      331       331    3               if (base!=16) error("Hexletter in number not expected");
      332       332    3               sum = sum*base + 10 + *s++ - 'a';
      333       333    3               break;
      334       334    3            case 'A':
      335       335    3            case 'B':
      336       336    3            case 'C':
      337       337    3            case 'D':
      338       338    3            case 'E':
      339       339    3            case 'F':
      340       340    3               if (base!=16) error("Hexletter in number not expected");
      341       341    3               sum = sum*base + 10 + *s++ - 'A';
      342       342    3               break;
      343       343    3            }
      344       344    2         }
      345       345    1        }
      346       346
      347       347             char *mystrcpy(s) char *s; {
      348       348    1         register char *p;
      349       349    1         char *myalloc();
      350       350    1
      351       351    1         p=myalloc(strlen(s)+1);
      352       352    1         strcpy(p,s);
      353       353    1         return(p);
      354       354    1        }
      355       355
      356       356
      357       357             char *end         = 0;  /**  Lowest address of allocated data  **/
      358       358             char *myalloc_top = 0;  /**  Highest address of allocated data **/
      359       359
      360       360             char *myalloc(n) register n; {
      361       361    1         register char *p,*result;
      362       362    1         char *malloc();
      363       363    1
      364       364    1         result=p=malloc(n);
      365       365    1         if (p== (char *) 0)
      366       366    1            fatal("Out of memory");
      367       367    1         if (end > p) end = p;
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=11 
      368       368    1         if (myalloc_top < p+n || myalloc_top == (char *)0) myalloc_top = p+n;
      369       369    1         do *p++=0; while (--n);
      370       370    1         return(result);
      371       371    1        }
      372       372
      373       373             chkincl(value,lwb,upb) {
      374       374    1
      375       375    1         if (value<lwb || value>upb)
      376       376    1            error("Number %d should have been between %d and %d",
      377       377    1               value,lwb,upb);
      378       378    1         return(value);
      379       379    1        }
      380       380
      381       381             subset(sp1,sp2,setsize) short *sp1,*sp2; {
      382       382    1         register i;
      383       383    1
      384       384    1         for(i=0;i<setsize;i++)
      385       385    1            if ( (sp1[i] | sp2[i]) != sp2[i])
      386       386    1               return(0);
      387       387    1         return(1);
      388       388    1        }
      389       389
      390       390             vilength(vip) register struct varinfo *vip; {
      391       391    1         register l=0;
      392       392    1
      393       393    1         while(vip!=0) {
      394       394    2            vip=vip->vi_next;
      395       395    2            l++;
      396       396    2         }
      397       397    1         return(l);
      398       398    1        }
      399       399
---  Include file information  ---

   zbn$param:h.:ZBC3TOU. is referenced
   zbm$local:h.:ZBC3TOU. is referenced
   zbn$reg:h.:ZBC3TOU. is referenced
CC.C03    File=zbn$subr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=12 
   zbn$lookup:h.:ZBC3TOU. is referenced
   zbn$property:h.:ZBC3TOU. is referenced
   zbn$expr:h.:ZBC3TOU. is referenced
   zbn$set:h.:ZBC3TOU. is referenced
   zbn$varinfo:h.:ZBC3TOU. is referenced
   zbn$instruct:h.:ZBC3TOU. is referenced
   zbn$cost:h.:ZBC3TOU. is referenced
   zbn$token:h.:ZBC3TOU. is referenced
   zbn$regvar:h.:ZBC3TOU. is referenced
   cgg_cg:h.:ZBC3TOU. is referenced
   zbn$extern:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbn$subr:c.:ZBC3TSI
