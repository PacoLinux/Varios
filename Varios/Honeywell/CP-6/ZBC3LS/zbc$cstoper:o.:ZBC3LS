

CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: cstoper.c,v 3.9 87/03/20 08:25:42 ceriel Exp $ */
        6         6             /*  C O N S T A N T   E X P R E S S I O N   H A N D L I N G   */
        7         7
        8         8             #include  "target_sizes.h"
        9         9             #include  "idf.h"
       10        10             #include  "arith.h"
       11        11             #include  "type.h"
       12        12             #include  "label.h"
       13        13             #include  "expr.h"
       14        14             #include  "sizes.h"
       15        15             #include  "Lpars.h"
       16        16             #include  "assert.h"
       17        17             #include "zb_ovchk.h"
       18        18             #include "specials.h"
       19        19             #include <errno.h>
       20        20             #include <math.h>
       21        21
       22        22             long mach_long_sign;  /* sign bit of the machine long */
       23        23             int mach_long_size;   /* size of long on this machine == sizeof(long) */
       24        24             long full_mask[MAXSIZE];/* full_mask[1] == 0XFF, full_mask[2] == 0XFFFF, .. */

       25        25             arith max_int;     /* maximum integer on target machine   */
       26        26             arith max_unsigned;   /* maximum unsigned on target machine  */
       27        27
       28        28             cstbin(expp, oper, expr)
       29        29              register struct expr **expp, *expr;
       30        30             {
       31        31    1         /* The operation oper is performed on the constant
       32        32    1            expressions *expp(ld) and expr(ct), and the result restored in
       33        33    1            *expp.
       34        34    1         */
       35        35    1         register arith o1 = (*expp)->VL_VALUE;
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       36        36    1         register arith o2 = expr->VL_VALUE;
       37        37    1         int uns = (*expp)->ex_type->tp_unsigned == UNSIGNED;
       38        38    1
       39        39    1         machovfl = 0;
       40        40    1         ASSERT(is_ld_cst(*expp) && is_cp_cst(expr));
       41        41    1         switch (oper)  {
       42        42    2         case '*':
       43        43    2            o1 = machmult(o1, o2, uns);
       44        44    2            if (machovfl)
       45        45    2               expr_warning(expr, "overflow detected in constant expression");
       46        46    2            break;
       47        47    2         case '/':
       48        48    2            if (o2 == 0)   {
       49        49    3               expr_error(expr, "division by 0");
       50        50    3               break;
       51        51    3            }
       52        52    2            if (uns) {
       53        53    3               /* this is more of a problem than you might
       54        54    3                  think on C compilers which do not have
       55        55    3                  unsigned long.
       56        56    3               */
       57        57    3               if (o2 & mach_long_sign)   {/* o2 > max_long */
       58        58    4                  o1 = ! (o1 >= 0 || o1 < o2);
       59        59    4                  /* this is the unsigned test
       60        60    4                     o1 < o2 for o2 > max_long
       61        61    4                  */
       62        62    4               }
       63        63    3               else  {     /* o2 <= max_long */
       64        64    4                  long half, bit, hdiv, hrem, rem;
       65        65    4
       66        66    4                  half = (o1 >> 1) & ~mach_long_sign;
       67        67    4                  bit = o1 & 01;
       68        68    4                  /* now o1 == 2 * half + bit
       69        69    4                     and half <= max_long
       70        70    4                     and bit <= max_long
       71        71    4                  */
       72        72    4                  hdiv = half / o2;
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       73        73    4                  hrem = half % o2;
       74        74    4                  rem = 2 * hrem + bit;
       75        75    4                  o1 = 2 * hdiv + (rem < 0 || rem >= o2);
       76        76    4                  /* that is the unsigned compare
       77        77    4                     rem >= o2 for o2 <= max_long
       78        78    4                  */
       79        79    4               }
       80        80    3            }
       81        81    2            else
       82        82    2               o1 /= o2;
       83        83    2            break;
       84        84    2         case '%':
       85        85    2            if (o2 == 0)   {
       86        86    3               expr_error(expr, "modulo by 0");
       87        87    3               break;
       88        88    3            }
       89        89    2            if (uns) {
       90        90    3               if (o2 & mach_long_sign)   {/* o2 > max_long */
       91        91    4                  o1 = (o1 >= 0 || o1 < o2) ? o1 : o1 - o2;
       92        92    4                  /* this is the unsigned test
       93        93    4                     o1 < o2 for o2 > max_long
       94        94    4                  */
       95        95    4               }
       96        96    3               else  {     /* o2 <= max_long */
       97        97    4                  long half, bit, hrem, rem;
       98        98    4
       99        99    4                  half = (o1 >> 1) & ~mach_long_sign;
      100       100    4                  bit = o1 & 01;
      101       101    4                  /* now o1 == 2 * half + bit
      102       102    4                     and half <= max_long
      103       103    4                     and bit <= max_long
      104       104    4                  */
      105       105    4                  hrem = half % o2;
      106       106    4                  rem = 2 * hrem + bit;
      107       107    4                  o1 = (rem < 0 || rem >= o2) ? rem - o2 : rem;
      108       108    4               }
      109       109    3            }
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      110       110    2            else
      111       111    2               o1 %= o2;
      112       112    2            break;
      113       113    2         case '+':
      114       114    2            o1 = machadd(o1, o2, uns);
      115       115    2            if (machovfl)
      116       116    2               expr_warning(expr, "overflow detected in constant expression");
      117       117    2            break;
      118       118    2         case '-':
      119       119    2            o1 = machsub(o1, o2, uns);
      120       120    2            if (machovfl)
      121       121    2               expr_warning(expr, "overflow detected in constant expression");
      122       122    2            break;
      123       123    2         case LEFT:
      124       124    2            o1 <<= o2;
      125       125    2            break;
      126       126    2         case RIGHT:
      127       127    2            if (o2 == 0)
      128       128    2               break;
      129       129    2            if (uns) {
      130       130    3               o1 >>= 1;
      131       131    3               o1 &= ~mach_long_sign;
      132       132    3               o1 >>= (o2-1);
      133       133    3            }
      134       134    2            else
      135       135    2               o1 >>= o2;
      136       136    2            break;
      137       137    2         case '<':
      138       138    2            {
      139       139    3               arith tmp = o1;
      140       140    3
      141       141    3               o1 = o2;
      142       142    3               o2 = tmp;
      143       143    3            }
      144       144    2            /* Fall through */
      145       145    2         case '>':
      146       146    2            if (uns) {
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      147       147    3               o1 = (o1 & mach_long_sign ?
      148       148    3                  (o2 & mach_long_sign ? o1 > o2 : 1) :
      149       149    3                  (o2 & mach_long_sign ? 0 : o1 > o2)
      150       150    3               );
      151       151    3            }
      152       152    2            else
      153       153    2               o1 = o1 > o2;
      154       154    2            break;
      155       155    2         case LESSEQ:
      156       156    2            {
      157       157    3               arith tmp = o1;
      158       158    3
      159       159    3               o1 = o2;
      160       160    3               o2 = tmp;
      161       161    3            }
      162       162    2            /* Fall through */
      163       163    2         case GREATEREQ:
      164       164    2            if (uns) {
      165       165    3               o1 = (o1 & mach_long_sign ?
      166       166    3                  (o2 & mach_long_sign ? o1 >= o2 : 1) :
      167       167    3                  (o2 & mach_long_sign ? 0 : o1 >= o2)
      168       168    3               );
      169       169    3            }
      170       170    2            else
      171       171    2               o1 = o1 >= o2;
      172       172    2            break;
      173       173    2         case EQUAL:
      174       174    2            o1 = o1 == o2;
      175       175    2            break;
      176       176    2         case NOTEQUAL:
      177       177    2            o1 = o1 != o2;
      178       178    2            break;
      179       179    2         case '&':
      180       180    2            o1 &= o2;
      181       181    2            break;
      182       182    2         case '|':
      183       183    2            o1 |= o2;
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      184       184    2            break;
      185       185    2         case '^':
      186       186    2            o1 ^= o2;
      187       187    2            break;
      188       188    2         }
      189       189    1         (*expp)->VL_VALUE = o1;
      190       190    1         cut_size(*expp);
      191       191    1         (*expp)->ex_flags |= expr->ex_flags;
      192       192    1         (*expp)->ex_flags &= ~EX_PARENS;
      193       193    1         free_expression(expr);
      194       194    1        }
      195       195
      196       196             cut_size(expr)
      197       197              register struct expr *expr;
      198       198             {
      199       199    1         /* The constant value of the expression expr is made to
      200       200    1            conform to the size of the type of the expression.
      201       201    1         */
      202       202    1         register arith o1 = expr->VL_VALUE;
      203       203    1         int uns = expr->ex_type->tp_unsigned == UNSIGNED;
      204       204    1         int size = (int) expr->ex_type->tp_size;
      205       205    1
      206       206    1         ASSERT(expr->ex_class == Value);
      207       207    1         if (expr->ex_type->tp_fund == POINTER) {
      208       208    2            /* why warn on "ptr-3" ?
      209       209    2               This quick hack fixes it
      210       210    2            */
      211       211    2            uns = 0;
      212       212    2         }
      213       213    1         if (uns) {
      214       214    2            if (o1 & ~full_mask[size])
      215       215    2               expr_warning(expr,
      216       216    2                  "overflow in unsigned constant expression");
      217       217    2            o1 &= full_mask[size];
      218       218    2         }
      219       219    1         else {
      220       220    2            int nbits = (int) (mach_long_size - size) * 8;
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      221       221    2            long remainder = o1 & ~full_mask[size];
      222       222    2
      223       223    2            if (remainder != 0 && remainder != ~full_mask[size])
      224       224    2               expr_warning(expr, "overflow in constant expression");
      225       225    2            o1 <<= nbits;     /* ??? */
      226       226    2            o1 >>= nbits;
      227       227    2         }
      228       228    1         expr->VL_VALUE = o1;
      229       229    1        }
      230       230
      231       231             #ifdef FLOATOPT
      232       232
      233       233             /*D*    NAME:    cstfpbin(struct expr **expp, int oper, struct expr *e);
      234       234                     PURPOSE: To provide floating point constant folding functions
      235       235                           which munge an operator and two constant expressions
      236       236                           into a single constant expression.
      237       237
      238       238                     DESCRIPTION:
      239       239                           This function assumes that both passed expressions are
      240       240                           constant floating point values.  The operator must be
      241       241                           one of addition, subtraction, multiplication, division
      242       242                           or one of the logical functions.
      243       243
      244       244                           This function turns the first expression into the
      245       245                           expression representing the constant value of the
      246       246                           result of the function on the two constant operands.
      247       247                           Integer results are produced by the logical functions.
      248       248             */
      249       249
      250       250             void
      251       251             cstfpbin(expp, oper, expr)
      252       252                  register struct expr **expp, *expr;
      253       253             {
      254       254    1          register double o1 = (*expp)->FL_VALUE;
      255       255    1          register double o2 =   expr ->FL_VALUE;
      256       256    1          int irs = 0, rval = 0;
      257       257    1
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      258       258    1          machovfl = 0;
      259       259    1          ASSERT(is_fp_cst(*expp) && is_fp_cst(expr));
      260       260    1
      261       261    1          switch (oper) {
      262       262    2
      263       263    2          case '*':
      264       264    2            o1 = machfpmult(o1, o2);
      265       265    2            break;
      266       266    2
      267       267    2          case '/':
      268       268    2            if (o2 != 0)
      269       269    2              o1 = machfpdiv(o1, o2);
      270       270    2            else expr_error(expr, "division by zero in f.p. constant expression");
      271       271    2            break;
      272       272    2
      273       273    2          case '+':
      274       274    2            o1 = machfpadd(o1, o2);
      275       275    2            break;
      276       276    2
      277       277    2          case '-':
      278       278    2            o1 = machfpsub(o1, o2);
      279       279    2            break;
      280       280    2
      281       281    2          case '<':
      282       282    2            irs++;     /* indicate result is "int" type */
      283       283    2            rval = o1 < o2;
      284       284    2            break;
      285       285    2
      286       286    2          case '>':
      287       287    2            irs++;     /* indicate result is "int" type */
      288       288    2            rval = o1 > o2;
      289       289    2            break;
      290       290    2
      291       291    2          case LESSEQ:
      292       292    2            irs++;     /* indicate result is "int" type */
      293       293    2            rval = o1 <= o2;
      294       294    2            break;
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      295       295    2
      296       296    2          case GREATEREQ:
      297       297    2            irs++;     /* indicate result is "int" type */
      298       298    2            rval = o1 >= o2;
      299       299    2            break;
      300       300    2
      301       301    2          case EQUAL:
      302       302    2            irs++;     /* indicate result is "int" type */
      303       303    2            rval = o1 == o2;
      304       304    2            break;
      305       305    2
      306       306    2          case NOTEQUAL:
      307       307    2            irs++;     /* indicate result is "int" type */
      308       308    2            rval = o1 != o2;
      309       309    2            break;
      310       310    2
      311       311    2          default:
      312       312    2            expr_error(expr, "operation %d not handled on f.p. constant", oper);
      313       313    2            break;
      314       314    2          }
      315       315    1
      316       316    1          if (machovfl)
      317       317    1            expr_warning(expr, "overflow detected in f.p. constant expression");
      318       318    1
      319       319    1          (*expp)->ex_flags |= expr->ex_flags | EX_FLOATOPT;
      320       320    1          (*expp)->ex_flags &= ~EX_PARENS;
      321       321    1          if (irs)
      322       322    1            fill_int_expr(*expp, rval, INT);
      323       323    1          else (*expp)->FL_VALUE = o1;
      324       324    1          free_expression(expr);
      325       325    1        }
      326       326
      327       327             #endif
      328       328             init_cst()
      329       329             {
      330       330    1         register int i = 0;
      331       331    1         register arith bt = (arith)0;
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      332       332    1
      333       333    1         while (!(bt < 0)) {
      334       334    2        #ifdef TM_L66
      335       335    2            bt = (bt << 9) + 0777, i++;
      336       336    2        #else
      337       337   *S*           bt = (bt << 8) + 0377, i++;
      338       338   *S*       #endif
      339       339    2            if (i == MAXSIZE)
      340       340    2               fatal("array full_mask too small for this machine");
      341       341    2            full_mask[i] = bt;
      342       342    2         }
      343       343    1         mach_long_size = i;
      344       344    1        #ifdef TM_L66
      345       345    1         mach_long_sign = 1 << (mach_long_size * 9 - 1);
      346       346    1        #else
      347       347   *S*        mach_long_sign = 1 << (mach_long_size * 8 - 1);
      348       348   *S*       #endif
      349       349    1         if (long_size < mach_long_size)
      350       350    1            fatal("sizeof (long) insufficient on this machine");
      351       351    1        #ifdef TM_L66
      352       352    1         max_int = full_mask[int_size] & ~(1 << (int_size * 9 - 1));
      353       353    1        #else
      354       354   *S*        max_int = full_mask[int_size] & ~(1 << (int_size * 8 - 1));
      355       355   *S*       #endif
      356       356    1         max_unsigned = full_mask[int_size];
      357       357    1        }
      358       358
      359       359
      360       360
      361       361
      362       362             /*D*   NAME:  cstfunc(struct expr **expp, int oper, struct expr *expr)
      363       363                    PURPOSE: To compute the result of a builtin function call with
      364       364                             constant arguments at compile time.
      365       365                    DESCRIPTION:
      366       366                           This function is called with the function expression as
      367       367                           the first argument, the argument expression(s) as the
      368       368                           third and the builtin function number as the second
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      369       369                           argument.
      370       370
      371       371                           This function assumes that it is only called with
      372       372                           a constant expression for the function arguments.
      373       373                           It obtains the argument value (possibly converting
      374       374                           them to the correct type), computes the result
      375       375                           of the function, and finally modifies the function
      376       376                           call expression to be the result of the function.
      377       377
      378       378                           There is one slightly messy aspect of this modification
      379       379                           and that is that if there is an error computing the
      380       380                           result of the function (as signified by errno being
      381       381                           set), then at compile time we output a warning and at
      382       382                           runtime there is a "suitable" substitute value used.
      383       383                           Perhaps, we should not perform the optimization in
      384       384                           this case.
      385       385             */
      386       386
      387       387             int
      388       388             cstfunc(expp, oper, expr)
      389       389                  register struct expr **expp, *expr;
      390       390             {
      391       391    1          double o1, o2;
      392       392    1          int    i1, i2;
"zbc$cstoper:c.:ZBC3TSI", line 392: (warning) identifier "i2" is not used
      393       393    1          int    irs = 0;
      394       394    1
      395       395    1          if (Oper == expr->ex_class && PARCOMMA == expr->OP_OPER) {
      396       396    2            struct expr *left = expr->OP_LEFT;
      397       397    2            struct expr *right = expr->OP_RIGHT;
      398       398    2            if (is_cp_cst(left))
      399       399    2              o1 = (double) left->VL_VALUE;
      400       400    2            else  o1 = left->FL_VALUE;
      401       401    2
      402       402    2            if (is_cp_cst(right))
      403       403    2              o2 = (double) right->VL_VALUE;
      404       404    2            else o2 = right->FL_VALUE;
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
      405       405    2          }
      406       406    1          else if (oper != SP_ABS) {
      407       407    2            if (is_cp_cst(expr))
      408       408    2              o1 = (double) expr->VL_VALUE;    /* Fetch first arg value */
      409       409    2            else o1 = expr->FL_VALUE;
      410       410    2
      411       411    2            if (oper == SP_ATAN2 || oper == SP_POW) {      /* dyadic function! */
      412       412    3              crash("Don't handle builtin function %d", oper);
      413       413    3            }
      414       414    2          }
      415       415    1          else {  /** Well, it must be SP_ABS **/
      416       416    2            if (is_cp_cst(expr))
      417       417    2              i1 = (int) expr->VL_VALUE;
      418       418    2            else {
      419       419    3               i1 = (int) expr->FL_VALUE;
      420       420    3               if (i1 != expr->FL_VALUE)
      421       421    3                 expr_warning(*expp, "Conversion to int changes value");
      422       422    3            }
      423       423    2          }
      424       424    1
      425       425    1          machovfl = 0;
      426       426    1          errno = 0;
      427       427    1
      428       428    1          switch (oper) {
      429       429    2
      430       430    2          case SP_ATAN:    o1 = atan(o1);        break;
      431       431    2          case SP_ATAN2:   o1 = atan2(o1, o2);   break;
      432       432    2          case SP_COS:     o1 = cos(o1);         break;
      433       433    2          case SP_SIN:     o1 = sin(o1);         break;
      434       434    2          case SP_TAN:     o1 = tan(o1);         break;
      435       435    2          case SP_COSH:    o1 = cosh(o1);        break;
      436       436    2          case SP_SINH:    o1 = sinh(o1);        break;
      437       437    2          case SP_TANH:    o1 = tanh(o1);        break;
      438       438    2          case SP_EXP:     o1 = exp(o1);         break;
      439       439    2          case SP_LOG:     o1 = log(o1);         break;
      440       440    2          case SP_LOG10:   o1 = log10(o1);       break;
      441       441    2          case SP_POW:     o1 = pow(o1, o2);     break;
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=13 
      442       442    2          case SP_SQRT:    o1 = sqrt(o1);        break;
      443       443    2          case SP_FABS:    o1 = fabs(o1);        break;
      444       444    2          case SP_ABS:
      445       445    2             if (i1 == 0400000000000) {
      446       446    3                expr_warning(*expp, "Math err: Integer overflow in abs()");
      447       447    3                return 0;
      448       448    3                }
      449       449    2             i1 = abs(i1); irs++; break;
      450       450    2          default:
      451       451    2            crash("builtin function number %d not handled in constant folder", oper);
      452       452    2          }
      453       453    1
      454       454    1          if (errno != 0) {
      455       455    2            char embuf[511];
      456       456    2            sprintf(embuf, "math error: %s", strerror(errno));
      457       457    2            expr_warning(*expp, embuf);
      458       458    2            return 0;
      459       459    2          }
      460       460    1
      461       461    1          (*expp)->ex_flags |= expr->ex_flags | EX_FLOATOPT;
      462       462    1          (*expp)->ex_flags &= ~EX_PARENS;
      463       463    1          if (!irs) {
      464       464    2            (*expp)->FL_VALUE = o1;
      465       465    2            (*expp)->ex_type  = double_type;
      466       466    2            (*expp)->ex_class = Float;
      467       467    2          }
      468       468    1          else  fill_int_expr(*expp, i1, INT);
      469       469    1
      470       470    1          free_expression(expr);
      471       471    1          return 1;
      472       472    1        }
---  Include file information  ---

   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$cstoper:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=14 
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$assert:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$zb_ovchk:h.:ZBC3TOU. is referenced
   zbc$specials:h.:ZBC3TOU. is referenced
   errno:h.:LIB_E05. is referenced
   math:h.:LIB_E05. is referenced

1 warning was detected in the file zbc$cstoper:c.:ZBC3TSI
