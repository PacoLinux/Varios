

CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ud.c,v 1.6 87/03/10 11:45:58 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  U S E  -  D E F I N I T I O N   A N A L Y S I S */
        7         7
        8         8             #include <stdio:h>
        9         9             #include "types:h"
       10        10             #include "ud:h"
       11        11             #include "debug:h"
       12        12             #include "global:h"
       13        13             #include "lset:h"
       14        14             #include "cset:h"
       15        15             #include "def:h"
       16        16             #include "files:h"
       17        17             #include "map:h"
       18        18             #include "get:h"
       19        19             #include "put:h"
       20        20             #include "alloc:h"
       21        21             #include "aux:h"
       22        22             #include "init_glob:h"
       23        23             #include "locals:h"
       24        24             #include "go:h"
       25        25             #include "em_spec:h"
       26        26             #include "ud_defs:h"
       27        27             #include "ud_const:h"
       28        28             #include "ud_copy:h"
       29        29
       30        30             /* core allocation macros */
       31        31             #define newudbx()  (bext_p) newstruct(bext_ud)
       32        32             #define oldudbx(x) oldstruct(bext_ud,x)
       33        33
       34        34             struct bext_ud bext_ud_init = { (cset) 0, (cset) 0, (cset) 0,
       35        35    1              (cset) 0, (cset) 0, (cset) 0, (cset) 0, (cset) 0, (cset) 0};
       36        36
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=2  
       37        37             int Svalue,Svariable;
       38        38
       39        39             cond_p globl_cond_tab,local_cond_tab;
       40        40
       41        41             STATIC cond_p getcondtab(f)
       42        42              FILE *f;
       43        43             {
       44        44    1         int l,i;
       45        45    1         cond_p tab;
       46        46    1
       47        47    1         fscanf(f,"%d",&l);
       48        48    1         tab = newcondtab(l);
       49        49    1         for (i = 0; i < l; i++) {
       50        50    2            fscanf(f,"%hd %hd %hd",&tab[i].mc_cond,&tab[i].mc_tval,
       51        51    2                &tab[i].mc_sval);
       52        52    2         }
       53        53    1         assert(tab[l-1].mc_cond == DEFAULT);
       54        54    1         return tab;
       55        55    1        }
       56        56
       57        57
       58        58             STATIC ud_machinit(f)
       59        59              FILE *f;
       60        60             {
       61        61    1         char s[100];
       62        62    1
       63        63    1         for (;;) {
       64        64    2            while(getc(f) != '\n');
       65        65    2            fscanf(f,"%s",s);
       66        66    2            if (strcmp(s,"%%UD") == 0)break;
       67        67    2         }
       68        68    1         globl_cond_tab = getcondtab(f);
       69        69    1         local_cond_tab = getcondtab(f);
       70        70    1        }
       71        71
       72        72
       73        73
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=3  
       74        74             STATIC bool test_cond(cond,val)
       75        75              short cond;
       76        76              offset val;
       77        77             {
       78        78    1         switch(cond) {
       79        79    2            case DEFAULT:
       80        80    2               return TRUE;
       81        81    2            case FITBYTE:
       82        82    2               return val >= -128 && val < 128;
       83        83    2         }
       84        84    1         assert(FALSE);
       85        85    1         /* NOTREACHED */
       86        86    1        }
       87        87
       88        88
       89        89             STATIC short map_value(tab,val,time)
       90        90              struct cond_tab tab[];
       91        91              offset val;
       92        92              bool time;
       93        93             {
       94        94    1         cond_p p;
       95        95    1
       96        96    1         for (p = &tab[0]; ; p++) {
       97        97    2            if (test_cond(p->mc_cond,val)) {
       98        98    3               return (time ? p->mc_tval : p->mc_sval);
       99        99    3            }
      100       100    2         }
      101       101    1        }
      102       102
      103       103
      104       104             STATIC init_root(root)
      105       105              bblock_p root;
      106       106             {
      107       107    1         /* Initialise the IN OUT sets of the entry block of the
      108       108    1          * current procedure. Global variables and parameters
      109       109    1          * already have a value at this point, although we do
      110       110    1          * not know which value. Therefor, implicit definitions
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=4  
      111       111    1          * to all global variables and parameters are
      112       112    1          * put in IN.
      113       113    1          */
      114       114    1
      115       115    1         short v;
      116       116    1
      117       117    1         for (v = 1; v <= nrglobals; v++) {
      118       118    2            Cadd(IMPLICIT_DEF(GLOB_TO_VARNR(v)), &IN(root));
      119       119    2         }
      120       120    1         for (v = 1; v <= nrlocals; v++) {
      121       121    2            if (locals[v]->lc_off >= 0) {
      122       122    3               Cadd(IMPLICIT_DEF(LOC_TO_VARNR(v)),&IN(root));
      123       123    3            }
      124       124    2         }
      125       125    1         /* OUT(root) = IN(root) - KILL(root) + GEN(root) */
      126       126    1         Ccopy_set(IN(root),&OUT(root));
      127       127    1         Csubtract(KILL(root),&OUT(root));
      128       128    1         Cjoin(GEN(root),&OUT(root));
      129       129    1        }
      130       130
      131       131
      132       132
      133       133
      134       134             STATIC unite_outs(bbset,setp)
      135       135              lset bbset;
      136       136              cset *setp;
      137       137             {
      138       138    1         /* Take the union of OUT(b), for all b in bbset,
      139       139    1          * and put the result in setp.
      140       140    1          */
      141       141    1
      142       142    1         Lindex i;
      143       143    1
      144       144    1         Cclear_set(setp);
      145       145    1         for (i = Lfirst(bbset); i != (Lindex) 0; i = Lnext(i,bbset)) {
      146       146    2            Cjoin(OUT((bblock_p) Lelem(i)), setp);
      147       147    2         }
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=5  
      148       148    1        }
      149       149
      150       150
      151       151
      152       152             STATIC solve_equations(p)
      153       153              proc_p p;
      154       154             {
      155       155    1         /* Solve the data flow equations for reaching
      156       156    1          * definitions of procedure p.
      157       157    1          * These equations are:
      158       158    1          *  (1)  OUT(b) = IN(b) - KILL(b) + GEN(b)
      159       159    1          *  (2)  IN(b)  = OUT(p1) + .. + OUT(pn) ;
      160       160    1          *       where PRED(b) = {p1, .. , pn}
      161       161    1          * We use the iterative algorithm of Aho&Ullman to
      162       162    1          * solve the equations.
      163       163    1          */
      164       164    1
      165       165    1         register bblock_p b;
      166       166    1         bool     change;
      167       167    1         cset     newin;
      168       168    1
      169       169    1         /* initializations */
      170       170    1         newin = Cempty_set(nrdefs);
      171       171    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      172       172    2            IN(b) = Cempty_set(nrdefs);
      173       173    2            OUT(b) = Cempty_set(nrdefs);
      174       174    2            Ccopy_set(GEN(b), &OUT(b));
      175       175    2         }
      176       176    1         init_root(p->p_start);
      177       177    1         /* Global variables and parameters have already a value
      178       178    1          * at the procedure entry block.
      179       179    1          */
      180       180    1         change = TRUE;
      181       181    1         /* main loop */
      182       182    1         while (change) {
      183       183    2            change = FALSE;
      184       184    2            for (b = p->p_start->b_next; b != (bblock_p) 0; b = b->b_next) {
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=6  
      185       185    3               unite_outs(b->b_pred, &newin);
      186       186    3               /* newin = OUT(p1) + .. + OUT(pn) */
      187       187    3               if (!Cequal(newin,IN(b))) {
      188       188    4                  change = TRUE;
      189       189    4                  Ccopy_set(newin, &IN(b));
      190       190    4                  Ccopy_set(IN(b),   &OUT(b));
      191       191    4                  Csubtract(KILL(b), &OUT(b));
      192       192    4                  Cjoin(GEN(b),      &OUT(b));
      193       193    4               }
      194       194    3            }
      195       195    2         }
      196       196    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      197       197    2            Cdeleteset(KILL(b));
      198       198    2            Cdeleteset(OUT(b));
      199       199    2         }
      200       200    1         Cdeleteset(newin);
      201       201    1        }
      202       202
      203       203
      204       204
      205       205             short global_addr_cost()
      206       206             {
      207       207    1         if (globl_cond_tab == NULL) return 0;
      208       208    1         return add_timespace(map_value(globl_cond_tab,(offset) 0,TRUE),
      209       209    1                    map_value(globl_cond_tab,(offset) 0,FALSE));
      210       210    1        }
      211       211
      212       212             short local_addr_cost(off)
      213       213              offset off;
      214       214             {
      215       215    1         if (local_cond_tab == NULL) return 0;
      216       216    1         return add_timespace(map_value(local_cond_tab,off,TRUE),
      217       217    1                    map_value(local_cond_tab,off,FALSE));
      218       218    1        }
      219       219
      220       220
      221       221
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=7  
      222       222             STATIC bool fold_is_desirable(old,new)
      223       223              line_p old,new;
      224       224             {
      225       225    1         /* See if it is desirable to replace the variable used by the
      226       226    1          * EM instruction 'old' by the variable used by 'new'.
      227       227    1          * We do not replace 'cheaply addressable variables' by 'expensively
      228       228    1          * addressable variables'. E.g. if we're optimizing object code size,
      229       229    1          * we do not replace a local variable by a global variable on a VAX,
      230       230    1          * because the former occupies 1 or 2 bytes and the latter occupies
      231       231    1          * 4 bytes.
      232       232    1          * If 2 local variables are equally expensive to address, we replace
      233       233    1          * the first one by the second only if the first one is used at
      234       234    1          * least as many times as the second one.
      235       235    1          */
      236       236    1
      237       237    1         local_p oldloc,newloc;
      238       238    1         short old_cost,new_cost,nr;
      239       239    1         bool ok;
      240       240    1
      241       241    1         if (TYPE(old) == OPOBJECT) {
      242       242    2            /* old variable is a global variable */
      243       243    2            return TYPE(new) != OPOBJECT &&
      244       244    2                   global_addr_cost() >=
      245       245    2                   local_addr_cost(off_set(new));
      246       246    2         }
      247       247    1         find_local(off_set(old),&nr,&ok);
      248       248    1         assert(ok);
      249       249    1         oldloc = locals[nr];
      250       250    1         old_cost = local_addr_cost(off_set(old));
      251       251    1         if (TYPE(new) == OPOBJECT) {
      252       252    2            return oldloc->lc_score == 2 || /* old var. can be eliminated */
      253       253    2                   old_cost > global_addr_cost();
      254       254    2         }
      255       255    1         find_local(off_set(new),&nr,&ok);
      256       256    1         assert(ok);
      257       257    1         newloc = locals[nr];
      258       258    1         new_cost = local_addr_cost(off_set(new));
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=8  
      259       259    1         return old_cost > new_cost ||
      260       260    1                (old_cost == new_cost && oldloc->lc_score < newloc->lc_score);
      261       261    1        }
      262       262
      263       263
      264       264
      265       265             #ifdef TRACE
      266       266   *S*       /*********** TRACING ROUTINES ***********/
      267       267   *S*
      268       268   *S*       pr_localtab() {
      269       269   *S*        short i;
      270       270   *S*        local_p lc;
      271       271   *S*
      272       272   *S*        printf("LOCAL-TABLE (%d)\n\n",nrlocals);
      273       273   *S*        for (i = 1; i <= nrlocals; i++) {
      274       274   *S*           lc = locals[i];
      275       275   *S*           printf("LOCAL %d\n",i);
      276       276   *S*           printf(" offset= %ld\n",lc->lc_off);
      277       277   *S*           printf(" size=   %d\n",lc->lc_size);
      278       278   *S*           printf(" flags=  %d\n",lc->lc_flags);
      279       279   *S*        }
      280       280   *S*       }
      281       281   *S*
      282       282   *S*       pr_globals()
      283       283   *S*       {
      284       284   *S*        dblock_p d;
      285       285   *S*        obj_p obj;
      286       286   *S*
      287       287   *S*        printf("GLOBALS (%d)\n\n",nrglobals);
      288       288   *S*        printf("ID  GLOBNR\n");
      289       289   *S*        for (d = fdblock; d != (dblock_p) 0; d = d->d_next) {
      290       290   *S*           for (obj = d->d_objlist; obj != (obj_p) 0; obj = obj->o_next) {
      291       291   *S*              if (obj->o_globnr != 0) {
      292       292   *S*                 printf("%d  %d\n", obj->o_id,obj->o_globnr);
      293       293   *S*              }
      294       294   *S*           }
      295       295   *S*        }
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=9  
      296       296   *S*       }
      297       297   *S*
      298       298   *S*       extern char em_mnem[];
      299       299   *S*
      300       300   *S*       pr_defs()
      301       301   *S*       {
      302       302   *S*        short i;
      303       303   *S*        line_p l;
      304       304   *S*
      305       305   *S*        printf("DEF TABLE\n\n");
      306       306   *S*        for (i = 1; i <= nrexpldefs; i++) {
      307       307   *S*           l = defs[i];
      308       308   *S*           printf("%d  %s ",EXPL_TO_DEFNR(i),
      309       309   *S*              &em_mnem[(INSTR(l)-sp_fmnem)*4]);
      310       310   *S*           switch(TYPE(l)) {
      311       311   *S*              case OPSHORT:
      312       312   *S*                 printf("%d\n",SHORT(l));
      313       313   *S*                 break;
      314       314   *S*              case OPOFFSET:
      315       315   *S*                 printf("%ld\n",OFFSET(l));
      316       316   *S*                 break;
      317       317   *S*              case OPOBJECT:
      318       318   *S*                 printf("%d\n",OBJ(l)->o_id);
      319       319   *S*                 break;
      320       320   *S*              default:
      321       321   *S*                 assert(FALSE);
      322       322   *S*           }
      323       323   *S*        }
      324       324   *S*       }
      325       325   *S*
      326       326   *S*
      327       327   *S*       pr_set(name,k,s,n)
      328       328   *S*        char *name;
      329       329   *S*        cset s;
      330       330   *S*        short k,n;
      331       331   *S*       {
      332       332   *S*        short i;
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=10 
      333       333   *S*
      334       334   *S*        printf("%s(%d) =  {",name,k);
      335       335   *S*        for (i = 1; i <= n; i++) {
      336       336   *S*           if (Cis_elem(i,s)) {
      337       337   *S*              printf("%d ",i);
      338       338   *S*           }
      339       339   *S*        }
      340       340   *S*        printf ("}\n");
      341       341   *S*       }
      342       342   *S*
      343       343   *S*       pr_blocks(p)
      344       344   *S*        proc_p p;
      345       345   *S*       {
      346       346   *S*        bblock_p b;
      347       347   *S*        short n;
      348       348   *S*
      349       349   *S*        for (b = p->p_start; b != 0; b = b->b_next) {
      350       350   *S*           printf ("\n");
      351       351   *S*           n = b->b_id;
      352       352   *S*           pr_set("GEN",n,GEN(b),nrdefs);
      353       353   *S*           pr_set("KILL",n,KILL(b),nrdefs);
      354       354   *S*           pr_set("IN ",n,IN(b),nrdefs);
      355       355   *S*           pr_set("OUT",n,OUT(b),nrdefs);
      356       356   *S*           pr_set("CHGVARS",n,CHGVARS(b),nrvars);
      357       357   *S*        }
      358       358   *S*       }
      359       359   *S*
      360       360   *S*       pr_copies()
      361       361   *S*       {
      362       362   *S*        short i;
      363       363   *S*
      364       364   *S*        printf("\nCOPY TABLE\n\n");
      365       365   *S*        for (i = 1; i <= nrdefs; i++) {
      366       366   *S*           if (def_to_copynr[i] != 0) {
      367       367   *S*              printf("%d  %d\n",i,def_to_copynr[i]);
      368       368   *S*           }
      369       369   *S*        }
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=11 
      370       370   *S*       }
      371       371   *S*
      372       372   *S*       pr_cblocks(p)
      373       373   *S*        proc_p p;
      374       374   *S*       {
      375       375   *S*        bblock_p b;
      376       376   *S*        short n;
      377       377   *S*
      378       378   *S*        for (b = p->p_start; b != 0; b = b->b_next) {
      379       379   *S*           printf ("\n");
      380       380   *S*           n = b->b_id;
      381       381   *S*           pr_set("CGEN",n,C_GEN(b),nrcopies);
      382       382   *S*           pr_set("CKILL",n,C_KILL(b),nrcopies);
      383       383   *S*           pr_set("CIN ",n,C_IN(b),nrcopies);
      384       384   *S*           pr_set("COUT",n,C_OUT(b),nrcopies);
      385       385   *S*        }
      386       386   *S*       }
      387       387   *S*
      388       388   *S*       /*********** END TRACING ********/
      389       389   *S*
      390       390   *S*       #endif
      391       391
      392       392             STATIC ud_analysis(p)
      393       393              proc_p p;
      394       394             {
      395       395    1         /* Perform use-definition analysis on procedure p */
      396       396    1
      397       397    1         make_localtab(p);  /* See for which local we'll keep ud-info */
      398       398    1        #ifdef TRACE
      399       399   *S*        pr_localtab();
      400       400   *S*       #endif
      401       401    1         nrvars = nrglobals + nrlocals;
      402       402    1         make_defs(p);  /* Make a table of all useful definitions in p */
      403       403    1        #ifdef TRACE
      404       404   *S*        pr_defs();
      405       405   *S*       #endif
      406       406    1         nrdefs = nrexpldefs + nrvars; /* number of definitions */
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=12 
      407       407    1         gen_sets(p); /* compute GEN(b), for every basic block b */
      408       408    1         kill_sets(p); /* compute KILL(b), for every basic block b */
      409       409    1         solve_equations(p); /* solve data flow equations for p */
      410       410    1        #ifdef TRACE
      411       411   *S*        pr_blocks(p);
      412       412   *S*       #endif
      413       413    1        }
      414       414
      415       415
      416       416
      417       417             STATIC clean_maps()
      418       418             {
      419       419    1         local_p *p;
      420       420    1         cset *v;
      421       421    1
      422       422    1         oldmap(defs,nrexpldefs);
      423       423    1         for (p = &locals[1]; p <= &locals[nrlocals]; p++) {
      424       424    2            oldlocal(*p);
      425       425    2         }
      426       426    1         oldmap(locals,nrlocals);
      427       427    1         for (v = &vardefs[1]; v <= &vardefs[nrvars]; v++) {
      428       428    2            Cdeleteset(*v);
      429       429    2         }
      430       430    1         oldmap(vardefs,nrvars);
      431       431    1        }
      432       432
      433       433
      434       434
      435       435             STATIC bool try_optim(l,b)
      436       436              line_p l;
      437       437              bblock_p b;
      438       438             {
      439       439    1         /* Try copy propagation and constant propagation */
      440       440    1
      441       441    1         line_p def;
      442       442    1         offset val;
      443       443    1         short defnr;
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=13 
      444       444    1
      445       445    1
      446       446    1         if (is_use(l) && (def = unique_def(l,b,&defnr)) != (line_p) 0) {
      447       447    2            if (is_copy(def)) {
      448       448    3               if (value_retained(def,defnr,l,b) &&
      449       449    3                   fold_is_desirable(l,PREV(def))) {
      450       450    4                  fold_var(l,PREV(def),b);
      451       451    4                  OUTVERBOSE("vp:variable folded in proc %d",
      452       451    4                         curproc->p_id,0);
      453       452    4                  Svariable++;
      454       453    4                  return TRUE;
      455       454    4               }
      456       455    3            } else {
      457       456    3               if (value_known(def,&val)) {
      458       457    4                  fold_const(l,b,val);
      459       458    4                  OUTVERBOSE("vp:value folded in proc %d",
      460       458    4                     curproc->p_id,0);
      461       459    4                  Svalue++;
      462       460    4                  return TRUE;
      463       461    4               }
      464       462    3            }
      465       463    2         }
      466       464    1         return FALSE;
      467       465    1        }
      468       466
      469       467
      470       468
      471       469             value_propagation(p)
      472       470              proc_p p;
      473       471             {
      474       472    1         /* Apply value propagation to procedure p */
      475       473    1
      476       474    1         bool  changes;
      477       475    1         bblock_p b;
      478       476    1         line_p   l, next;
      479       477    1
      480       478    1         changes = TRUE;
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=14 
      481       479    1         /* If a statement like A := B is folded to A := constant,
      482       480    1          * new opportunities for constant folding may arise,
      483       481    1          * e.g. the value of A might be statically known too now.
      484       482    1          */
      485       483    1
      486       484    1          while (changes) {
      487       485    2            changes = FALSE;
      488       486    2            for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      489       487    3               for (l = b->b_start; l != (line_p) 0; l = next) {
      490       488    4                  next = l->l_next;
      491       489    4                  if (try_optim(l,b)) {
      492       490    5                     changes = TRUE;
      493       491    5                  }
      494       492    4               }
      495       493    3            }
      496       494    2         }
      497       495    1         oldmap(copies,nrcopies);
      498       496    1         oldtable(def_to_copynr,nrdefs);
      499       497    1        }
      500       498
      501       499
      502       500             STATIC ud_extend(p)
      503       501              proc_p p;
      504       502             {
      505       503    1         /* Allocate extended data structures for Use Definition analysis */
      506       504    1
      507       505    1         register bblock_p b;
      508       506    1
      509       507    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      510       508    2          b->b_extend = newudbx();
      511       509    2          b->b_extend->bx_ud = bext_ud_init ; /* init the new structure. */
      512       510    2         }
      513       511    1        }
      514       512
      515       513
      516       514             STATIC ud_cleanup(p)
      517       515              proc_p p;
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=15 
      518       516             {
      519       517    1         /* Deallocate extended data structures for Use Definition analysis */
      520       518    1
      521       519    1         register bblock_p b;
      522       520    1
      523       521    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      524       522    2            Cdeleteset(GEN(b));
      525       523    2            Cdeleteset(IN(b));
      526       524    2            Cdeleteset(C_GEN(b));
      527       525    2            Cdeleteset(C_KILL(b));
      528       526    2            Cdeleteset(C_IN(b));
      529       527    2            Cdeleteset(C_OUT(b));
      530       528    2            Cdeleteset(CHGVARS(b));
      531       529    2            oldudbx(b->b_extend);
      532       530    2         }
      533       531    1        }
      534       532
      535       533
      536       534             ud_optimize(p)
      537       535              proc_p p;
      538       536             {
      539       537    1         if (p->p_start == (bblock_p) 0) return; /* not real procedure. */
      540       538    1         if (globl_cond_tab == (cond_p) 0) {
      541       539    2           ud_set_cond_tab(); }
      542       540    1         ud_extend(p);
      543       541    1         locals = (local_p *) 0;
      544       542    1         vardefs = (cset *) 0;
      545       543    1         defs = (line_p *) 0;
      546       544    1         ud_analysis(p);
      547       545    1         copy_analysis(p);
      548       546    1        #ifdef TRACE
      549       547   *S*        pr_copies();
      550       548   *S*        pr_cblocks(p);
      551       549   *S*       #endif
      552       550    1         value_propagation(p);
      553       551    1         ud_cleanup(p);
      554       552    1         clean_maps();
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=16 
      555       553    1        }
      556       554
      557       555             udmain(argc,argv)
      558       556              int argc;
      559       557              char *argv[];
      560       558             {
      561       559    1         globl_cond_tab = (cond_p) 0;
      562       560    1         local_cond_tab = (cond_p) 0;
      563       561    1         go(argc,argv,init_globals,ud_optimize,ud_machinit,no_action);
      564       562    1         report("values folded",Svalue);
      565       563    1         report("variables folded",Svariable);
      566       564    1           return ;
      567       565    1        }
      568       566
      569       567
      570       568
      571       569             /*i*
      572       570                   name: ud_set_cond_tab
      573       571                   procedure: This routine sets the global and local condtion
      574       572                   tables for the ud register usage replacement routine.
      575       573             */
      576       574             ud_set_cond_tab() {
      577       575    1
      578       576    1              globl_cond_tab = newcondtab(1);
      579       577    1              local_cond_tab = newcondtab(1);
      580       578    1
      581       579    1              globl_cond_tab[0].mc_cond = 1;
      582       580    1              globl_cond_tab[0].mc_tval = 4;
      583       581    1              globl_cond_tab[0].mc_sval = 2;
      584       582    1              local_cond_tab[0].mc_cond = 1;
      585       583    1              local_cond_tab[0].mc_tval = 4;
      586       584    1              local_cond_tab[0].mc_sval = 2;
      587       585    1              globl_cond_tab[0].mc_cond = DEFAULT;
      588       586    1              local_cond_tab[0].mc_cond = DEFAULT;
      589       587    1              return;
      590       588    1        }
      591       589
CC.C03    File=zbe$ud:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=17 
      592       590
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$ud:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$files:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
   zbe$put:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$init_glob:h.:ZBC3TOU. is referenced
   zbe$locals:h.:ZBC3TOU. is referenced
   zbe$go:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   zbe$ud_defs:h.:ZBC3TOU. is referenced
   zbe$ud_const:h.:ZBC3TOU. is referenced
   zbe$ud_copy:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$ud:c.:ZBC3TSI
