

CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: ch7.c,v 3.16 87/03/25 22:42:51 ceriel Exp $ */
        6         6             /*  S E M A N T I C   A N A L Y S I S -- C H A P T E R  7 RM */
        7         7
        8         8             #include  "nofloat.h"
        9         9             #include  "debug.h"
       10        10             #include  "nobitfield.h"
       11        11             #include  "idf.h"
       12        12             #include  "arith.h"
       13        13             #include  "type.h"
       14        14             #include  "struct.h"
       15        15             #include  "label.h"
       16        16             #include  "expr.h"
       17        17             #include  "def.h"
       18        18             #include  "Lpars.h"
       19        19             #include  "assert.h"
       20        20             #include "zb_target:h"
       21        21
       22        22             #define unqualify(tp) ( (tp->tp_nqualified) ? tp->tp_nqualified : tp )
       23        23
       24        24             extern char options[];
       25        25             extern char *symbol2str();
       26        26
       27        27             /*  Most expression-handling routines have a pointer to a
       28        28              (struct type *) as first parameter. The object under the pointer
       29        29              gets updated in the process.
       30        30             */
       31        31
       32        32             ch7sel(expp, oper, idf)
       33        33              struct expr **expp;
       34        34              struct idf *idf;
       35        35             {
       36        36    1         /* The selector idf is applied to *expp; oper may be '.' or
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=2  
       37        37    1            ARROW.
       38        38    1         */
       39        39    1         register struct expr *exp = *expp;
       40        40    1         register struct type *tp = exp->ex_type;
       41        41    1         register struct sdef *sd;
       42        42    1         struct type *sd_tp;
       43        43    1         int fsres = 0;
       44        44    1
       45        45    1         if (oper == ARROW)   {
       46        46    2            if (tp->tp_fund == POINTER || tp->tp_fund == ARRAY)   /* normal case */
       47        47    2               tp = tp->tp_up;
       48        48    2            else {   /* constructions like "12->selector" and
       49        49    3                  "char c; c->selector"
       50        50    3               */
       51        51    3               switch (tp->tp_fund) {
       52        52    4               case CHAR:
       53        53    4               case SHORT:
       54        54    4               case INT:
       55        55    4               case LONG:
       56        56    4               case ENUM:
       57        57    4                  /* Allowed by RM 14.1 */
       58        58    4                  ch7cast(expp, CAST, pa_type);
       59        59    4                  sd = idf2sdef(idf, tp);
       60        60    4                  tp = sd->sd_stype;
       61        61    4                  break;
       62        62    4               default:
       63        63    4                  expr_error(exp, "-> applied to %s",
       64        64    4                     symbol2str(tp->tp_fund));
       65        65    4               case ERRONEOUS:
       66        66    4                  exp->ex_type = error_type;
       67        67    4                  return;
       68        68    4               }
       69        69    3            } /* tp->tp_fund != POINTER */
       70        70    2         } /* oper == ARROW */
       71        71    1         else { /* oper == '.' */
       72        72    2            /* filter out illegal expressions "non_lvalue.sel" */
       73        73    2            fsres = !exp->ex_modlvalue || (exp->ex_class == Oper && exp->OP_OPER == '(
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=3  
                               ');
       74        74    2            if (!exp->ex_lvalue && !fsres) {
       75        75    3               expr_error(exp, "dot requires lvalue");
       76        76    3               return;
       77        77    3            }
       78        78    2         }
       79        79    1         exp = *expp;
       80        80    1         switch (tp->tp_fund) {
       81        81    2         case POINTER:  /* for int *p; p->next = ...  */
       82        82    2         case STRUCT:
       83        83    2         case UNION:
       84        84    2            break;
       85        85    2         case CHAR:
       86        86    2         case SHORT:
       87        87    2         case INT:
       88        88    2         case LONG:
       89        89    2         case ENUM:
       90        90    2            /* warning will be given by idf2sdef() */
       91        91    2            break;
       92        92    2         default:
       93        93    2            if (!is_anon_idf(idf))
       94        94    2               expr_error(exp, "selector %s applied to %s",
       95        95    2                  idf->id_text, symbol2str(tp->tp_fund));
       96        96    2         case ERRONEOUS:
       97        97    2            exp->ex_type = error_type;
       98        98    2            return;
       99        99    2         }
      100       100    1         sd = idf2sdef(idf, tp);
      101       101    1         sd_tp = sd->sd_type;  /* Get type of selector */
      102       102    1         if (tp->tp_nqualified)   {
      103       103    2           sd_tp = build_qualified_type(sd_tp, tp->tp_const, tp->tp_volatile);
      104       104    2         }
      105       105    1         if (oper == '.')  {
      106       106    2            /* there are 3 cases in which the selection can be
      107       107    2               performed compile-time:
      108       108    2               I: n.sel (n either an identifier or a constant)
      109       109    2               II:   (e.s1).s2 (transformed into (e.(s1+s2)))
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=4  
      110       110    2               III:  (e->s1).s2 (transformed into (e->(s1+s2)))
      111       111    2                  The code performing these conversions is
      112       112    2                  extremely obscure.
      113       113    2            */
      114       114    2            if (exp->ex_class == Value)   {
      115       115    3               /* It is an object we know the address of; so
      116       116    3                  we can calculate the address of the
      117       117    3                  selected member
      118       118    3               */
      119       119    3               if (exp->VL_CLASS == Const)
      120       120    3                  exp->VL_VALUE += sd->sd_offset << 16;
      121       121    3               else exp->VL_VALUE += sd->sd_offset;
      122       122    3               exp->ex_type = sd_tp;
      123       123    3               if (exp->ex_type == error_type)
      124       124    3                  exp->ex_flags |= EX_ERROR;
      125       125    3            }
      126       126    2            else
      127       127    2            if (exp->ex_class == Oper) {
      128       128    3               struct oper *op = &(exp->ex_object.ex_oper);
      129       129    3
      130       130    3               if (op->op_oper == '.' || op->op_oper == ARROW) {
      131       131    4                  ASSERT(is_cp_cst(op->op_right));
      132       132    4                  op->op_right->VL_VALUE += sd->sd_offset;
      133       133    4                  exp->ex_type = sd_tp;
      134       134    4                  if (exp->ex_type == error_type)
      135       135    4                     exp->ex_flags |= EX_ERROR;
      136       136    4               }
      137       137    3               else
      138       138    3                  exp = new_oper(sd_tp, exp, '.',
      139       139    3                        intexpr(sd->sd_offset, INT));
      140       140    3            }
      141       141    2         }
      142       142    1         else { /* oper == ARROW */
      143       143    2        /*   There is one case in which the ARROW selection can be
      144       144    2             performed at compile time:
      145       145    2             1. (&n)->sel   (where n is an identifier or constant)
      146       146    2        */
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=5  
      147       147    2             if (exp->ex_class == Value && exp->ex_lvalue == 0) {
      148       148    3                if (exp->VL_CLASS == Const)
      149       149    3                   exp->VL_VALUE += sd->sd_offset << 16;
      150       150    3                else exp->VL_VALUE += sd->sd_offset;
      151       151    3                exp->ex_type   = sd_tp;
      152       152    3                if (exp->ex_type == error_type)
      153       153    3                   exp->ex_flags |= EX_ERROR;
      154       154    3                }
      155       155    2             else
      156       156    2            exp = new_oper(sd_tp,
      157       157    2               exp, oper, intexpr(sd->sd_offset, INT));
      158       158    2            }
      159       159    1         exp->ex_lvalue = (sd_tp->tp_fund != ARRAY);
      160       160    1         exp->ex_modlvalue = exp->ex_lvalue && !fsres;
      161       161    1         if (fsres && sd_tp->tp_fund == ARRAY)
      162       162    1           expr_error(exp, "non-lvalue array cannot be converted to pointer");
      163       163    1         *expp = exp;
      164       164    1        }
      165       165
      166       166             ch7incr(expp, oper)
      167       167              struct expr **expp;
      168       168             {
      169       169    1         /* The monadic prefix/postfix incr/decr operator oper is
      170       170    1            applied to *expp.
      171       171    1         */
      172       172    1         ch7asgn(expp, oper, intexpr((arith)1, INT));
      173       173    1        }
      174       174
      175       175             ch7cast(expp, oper, tp)
      176       176              register struct expr **expp;
      177       177              register struct type *tp;
      178       178             {
      179       179    1         /* The expression *expp is cast to type tp; the cast is
      180       180    1            caused by the operator oper.  If the cast has
      181       181    1            to be passed on to run time, its left operand will be an
      182       182    1            expression of class Type.
      183       183    1         */
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=6  
      184       184    1         register struct type *oldtp;
      185       185    1
      186       186    1         if ((*expp)->ex_type->tp_fund == FUNCTION)
      187       187    1            function2pointer(*expp);
      188       188    1         if ((*expp)->ex_type->tp_fund == ARRAY)
      189       189    1            array2pointer(*expp);
      190       190    1         if ((*expp)->ex_class == String)  {
      191       191    2            string2pointer(*expp);
      192       192    2            if (tp->tp_fund == POINTER && tp->tp_up->tp_fund == CHAR)
      193       193    2               (*expp)->ex_type = tp;
      194       194    2            }
      195       195    1         oldtp = (*expp)->ex_type;
      196       196    1        #ifndef NOBITFIELD
      197       197    1         if (oldtp->tp_fund == FIELD)  {
      198       198    2            field2arith(expp);
      199       199    2            ch7cast(expp, oper, tp);
      200       200    2         }
      201       201    1         else
      202       202    1         if (tp->tp_fund == FIELD)
      203       203    1            ch7cast(expp, oper, tp->tp_up);
      204       204    1         else
      205       205    1        #endif NOBITFIELD
      206       206    1         if (oldtp == tp)
      207       207    1            {}       /* life is easy */
      208       208    1         else
      209       209    1         if (tp->tp_fund == VOID)   /* Easy again */
      210       210    1            (*expp)->ex_type = void_type;
      211       211    1         else
      212       212    1         if (is_arith_type(oldtp) && is_arith_type(tp))  {
      213       213    2            int oldi = is_integral_type(oldtp);
      214       214    2            int i = is_integral_type(tp);
      215       215    2
      216       216    2            if (oldi && i) {
      217       217    3               if (  oldtp->tp_fund == ENUM &&
      218       218    3                  tp->tp_fund == ENUM &&
      219       219    3                  oper != CAST
      220       220    3               )
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=7  
      221       221    3                  expr_warning(*expp,
      222       222    3                     "%s on enums of different types",
      223       223    3                     symbol2str(oper));
      224       224    3               int2int(expp, tp);
      225       225    3            }
      226       226    2        #ifndef NOFLOAT
      227       227    2            else
      228       228    2            if (oldi && !i)   {
      229       229    3               if (oldtp->tp_fund == ENUM && oper != CAST)
      230       230    3                  expr_warning(*expp,
      231       231    3                     "conversion of enum to %s\n",
      232       232    3                     symbol2str(tp->tp_fund));
      233       233    3               int2float(expp, tp);
      234       234    3            }
      235       235    2            else
      236       236    2            if (!oldi && i)
      237       237    2               float2int(expp, tp);
      238       238    2            else     /* !oldi && !i */
      239       239    2               float2float(expp, tp);
      240       240    2        #else NOFLOAT
      241       241   *S*           else
      242       242   *S*              crash("(ch7cast) floats not implemented\n");
      243       243   *S*       #endif NOFLOAT
      244       244    2         }
      245       245    1         else
      246       246    1         if (oper == PARCOMMA && unqualified_type_of(oldtp) == unqualified_type_of(tp)
                               )
      247       247    1            (*expp)->ex_type = unqualified_type_of(tp);
      248       248    1         else
      249       249    1         if (oldtp->tp_fund == POINTER && tp->tp_fund == POINTER) {
      250       250    2            if (oper != CAST)
      251       251    2               if (tp->tp_up->tp_fund != VOID && oldtp->tp_up->tp_fund != VOID)
      252       252    2               if (oper == '='                                 &&
      253       253    2               ((tp->tp_nqualified && tp->tp_nqualified == oldtp->tp_nqualified)  ||
      254       254    2                (tp->tp_nqualified && tp->tp_nqualified == oldtp)    ||
      255       255    2                (oldtp->tp_nqualified && oldtp->tp_nqualified == tp)    )  ) {
      256       256    3               }
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=8  
      257       257    2               else
      258       258    2               if (is_type_compatible(oldtp->tp_up, tp->tp_up))  {}
      259       259    2               else
      260       260    2               expr_warning(*expp, "incompatible pointers in %s",
      261       261    2                           symbol2str(oper));
      262       262    2            (*expp)->ex_type = tp;  /* free conversion */
      263       263    2         }
      264       264    1         else
      265       265    1         if (oldtp->tp_fund == POINTER && is_integral_type(tp))   {
      266       266    2            /* from pointer to integral */
      267       267    2            if (oper != CAST)
      268       268    2               expr_warning(*expp,
      269       269    2                  "illegal conversion of pointer to %s",
      270       270    2                  symbol2str(tp->tp_fund));
      271       271    2            if (oldtp->tp_size > tp->tp_size)
      272       272    2               expr_warning(*expp,
      273       273    2                  "conversion of pointer to %s loses accuracy",
      274       274    2                  symbol2str(tp->tp_fund));
      275       275    2            if (oldtp->tp_size != tp->tp_size)
      276       276    2               int2int(expp, tp);
      277       277    2            int2ptr(tp,PTR2INT,expp);
      278       278    2         }
      279       279    1         else
      280       280    1         if (tp->tp_fund == POINTER && is_integral_type(oldtp))   {
      281       281    2            /* from integral to pointer */
      282       282    2            switch (oper)  {
      283       283    3            case CAST:
      284       284    3               if ( !is_cp_cst(*expp) || (*expp)->VL_VALUE != (arith) 0)
      285       285    3                  expr_warning(*expp,
      286       286    3                     "non-portable conversion of %s to pointer",
      287       287    3                     symbol2str( oldtp->tp_fund ) );
      288       288    3               break;
      289       289    3            case EQUAL:
      290       290    3            case NOTEQUAL:
      291       291    3            case '=':
      292       292    3            case RETURN:
      293       293    3            case PARCOMMA:
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=9  
      294       294    3               if (is_cp_cst(*expp) && (*expp)->VL_VALUE == (arith)0)
      295       295    3                  break;
      296       296    3            default:
      297       297    3               expr_warning(*expp,
      298       298    3                  "illegal conversion of %s to pointer",
      299       299    3                  symbol2str(oldtp->tp_fund));
      300       300    3               break;
      301       301    3            }
      302       302    2            if (oldtp->tp_size > tp->tp_size)
      303       303    2               expr_warning(*expp,
      304       304    2                  "conversion of %s to pointer loses accuracy",
      305       305    2                  symbol2str(oldtp->tp_fund));
      306       306    2            if (oldtp->tp_size != tp->tp_size)
      307       307    2               int2int(expp, tp);
      308       308    2            int2ptr(tp,INT2PTR,expp);
      309       309    2         }
      310       310    1         else
      311       311    1         if (oldtp->tp_nqualified && oldtp->tp_nqualified == tp) {
      312       312    2         }
      313       313    1         else
      314       314    1         if (tp->tp_nqualified && tp->tp_nqualified == oldtp) {
      315       315    2         }
      316       316    1         else
      317       317    1         if (tp->tp_nqualified && tp->tp_nqualified == oldtp->tp_nqualified) {
      318       318    2         }
      319       319    1         else
      320       320    1         if (oldtp->tp_fund == ERRONEOUS) /* we just won't look */
      321       321    1            (*expp)->ex_type = tp;  /* brute force */
      322       322    1         else
      323       323    1         if (oldtp->tp_size == tp->tp_size && oper == CAST) {
      324       324    2            expr_warning(*expp, "dubious conversion based on equal size");
      325       325    2            (*expp)->ex_type = tp;     /* brute force */
      326       326    2         }
      327       327    1         else  {
      328       328    2            if (oldtp->tp_fund != ERRONEOUS && tp->tp_fund != ERRONEOUS)
      329       329    2               expr_error(*expp, "cannot convert %s to %s",
      330       330    2                  symbol2str(oldtp->tp_fund),
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=10 
      331       331    2                  symbol2str(tp->tp_fund)
      332       332    2               );
      333       333    2            (*expp)->ex_type = tp;     /* brute force */
      334       334    2         }
      335       335    1        }
      336       336
      337       337             ch7asgn(expp, oper, expr)
      338       338              struct expr **expp;
      339       339              struct expr *expr;
      340       340             {
      341       341    1         /* The assignment operators.
      342       342    1            "f op= e" should be interpreted as
      343       343    1            "f = (typeof f)((typeof (f op e))f op (typeof (f op e))e)"
      344       344    1            and not as "f = f op (typeof f)e".
      345       345    1            Consider, for example, (i == 10) i *= 0.9; (i == 9), where
      346       346    1            typeof i == int.
      347       347    1            The resulting expression tree becomes:
      348       348    1                  op=
      349       349    1                  / \
      350       349    1                      /   \
      351       349    1                     f     (typeof (f op e))e
      352       352    1            EVAL should however take care of evaluating (typeof (f op e))f
      353       353    1         */
      354       354    1         register struct expr *exp = *expp;
      355       355    1         int fund = exp->ex_type->tp_fund;
      356       356    1         struct type *tp;
      357       357    1
      358       358    1         /* We expect an lvalue */
      359       359    1         if (!exp->ex_modlvalue) {
      360       360    2            expr_error(exp, "no modifiable value on left of %s", symbol2str(oper));
      361       361    2            exp->ex_depth = 99;  /* no direct store/load at EVAL() */
      362       362    2               /* what is 99 ??? DG */
      363       363    2         }
      364       364    1         if (oper == '=') {
      365       365    2            if (fund == STRUCT || fund == UNION)
      366       366    2               if (exp->ex_type->tp_size < 0 || expr->ex_type->tp_size < 0)
      367       367    2                  error("size of object unknown");
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=11 
      368       368    2            ch7cast(&expr, oper, exp->ex_type);
      369       369    2            tp = expr->ex_type;
      370       370    2         }
      371       371    1         else {   /* turn e into e' where typeof(e') = typeof (f op e) */
      372       372    2            struct expr *extmp = intexpr((arith)0, INT);
      373       373    2
      374       374    2            /* this is really $#@&*%$# ! */
      375       375    2            extmp->ex_lvalue = 1;
      376       376    2            extmp->ex_modlvalue = 1;
      377       377    2            extmp->ex_type = exp->ex_type;
      378       378    2            ch7bin(&extmp, oper, expr);
      379       379    2            /* Note that ch7bin creates a tree of the expression
      380       380    2               ((typeof (f op e))f op (typeof (f op e))e),
      381       381    2               where f ~ extmp and e ~ expr.
      382       382    2               We want to use (typeof (f op e))e.
      383       383    2               Ch7bin does not create a tree if both operands
      384       384    2               were illegal or constants!
      385       385    2            */
      386       386    2            tp = extmp->ex_type; /* perform the arithmetic in type tp */
      387       387    2            if (extmp->ex_class == Oper) {
      388       388    3               expr = extmp->OP_RIGHT;
      389       389    3               extmp->OP_RIGHT = NILEXPR;
      390       390    3               free_expression(extmp);
      391       391    3            }
      392       392    2            else
      393       393    2               expr = extmp;
      394       394    2         }
      395       395    1        #ifndef NOBITFIELD
      396       396    1         if (fund == FIELD)
      397       397    1            exp = new_oper(exp->ex_type->tp_up, exp, oper, expr);
      398       398    1         else
      399       399    1            exp = new_oper(exp->ex_type, exp, oper, expr);
      400       400    1        #else NOBITFIELD
      401       401   *S*        exp = new_oper(exp->ex_type, exp, oper, expr);
      402       402   *S*       #endif NOBITFIELD
      403       403    1         exp->OP_TYPE = tp;   /* for EVAL() */
      404       404    1         exp->ex_flags |= EX_SIDEEFFECTS;
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=12 
      405       405    1         *expp = exp;
      406       406    1        }
      407       407
      408       408             /*  Some interesting (?) questions answered.
      409       409             */
      410       410             int
      411       411             is_integral_type(tp)
      412       412              register struct type *tp;
      413       413             {
      414       414    1         switch (tp->tp_fund) {
      415       415    2         case CHAR:
      416       416    2         case SHORT:
      417       417    2         case INT:
      418       418    2         case LONG:
      419       419    2         case ENUM:
      420       420    2            return 1;
      421       421    2        #ifndef NOBITFIELD
      422       422    2         case FIELD:
      423       423    2            return is_integral_type(tp->tp_up);
      424       424    2        #endif NOBITFIELD
      425       425    2         default:
      426       426    2            return 0;
      427       427    2         }
      428       428    1        }
      429       429
      430       430             int
      431       431             is_arith_type(tp)
      432       432              register struct type *tp;
      433       433             {
      434       434    1         switch (tp->tp_fund) {
      435       435    2         case CHAR:
      436       436    2         case SHORT:
      437       437    2         case INT:
      438       438    2         case LONG:
      439       439    2         case ENUM:
      440       440    2        #ifndef NOFLOAT
      441       441    2         case FLOAT:
CC.C03    File=zbc$ch7:c.:ZBC3TSI                                                   Fri Aug 22 1997  Page=13 
      442       442    2         case DOUBLE:
      443       443    2        #endif NOFLOAT
      444       444    2            return 1;
      445       445    2        #ifndef NOBITFIELD
      446       446    2         case FIELD:
      447       447    2            return is_arith_type(tp->tp_up);
      448       448    2        #endif NOBITFIELD
      449       449    2         default:
      450       450    2            return 0;
      451       451    2         }
      452       452    1        }
      453       453
---  Include file information  ---

   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$struct:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$assert:h.:ZBC3TOU. is referenced
   zbc$zb_target:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$ch7:c.:ZBC3TSI
