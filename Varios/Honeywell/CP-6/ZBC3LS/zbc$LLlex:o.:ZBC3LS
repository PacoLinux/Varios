

CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: LLlex.c,v 3.14 87/03/25 22:35:53 ceriel Exp $ */
        6         6             /*         L E X I C A L   A N A L Y Z E R       */
        7         7
        8         8             #include <alloc:h>
        9         9             #include "nofloat:h"
       10        10             #include "idfsize:h"
       11        11             #include "numsize:h"
       12        12             #include "debug:h"
       13        13             #include "strsize:h"
       14        14             #include "nopp:h"
       15        15             #include "input:h"
       16        16             #include "arith:h"
       17        17             #include "def:h"
       18        18             #include "idf:h"
       19        19             #include "LLlex:h"
       20        20             #include "Lpars:h"
       21        21             #include "class:h"
       22        22             #include "assert:h"
       23        23             #include "sizes:h"
       24        24
       25        25             #include "macro:h"
       26        26             #include "textsize:h"
       27        27             /* Data about the token yielded */
       28        28             struct token dot, ahead, aside;
       29        29
       30        30             #ifndef NOPP
       31        31             int ReplaceMacros = 1;      /* replacing macros        */
       32        32             int PreProcKeys = 0;     /* return preprocessor key    */
       33        33             int AccDefined = 0;      /* accept "defined(...)"      */
       34        34             int UnknownIdIsZero = 0; /* interpret unknown id as integer 0 */
       35        35             int Unstacked = 0;    /* an unstack is done         */
       36        36             #endif
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=2  
       37        37             extern double strtod();
       38        38             extern int errno;
       39        39             extern char options[];
       40        40             unsigned int dollar_warn = 0;
       41        41             #include <string:h>
       42        42             int SkipEscNewline = 0;     /* how to interpret backslash-newline */
       43        43             int AccFileSpecifier = 0;   /* return filespecifier <...>    */
       44        44             int EoiForNewline = 0;      /* return EOI upon encountering newline */
       45        45             int File_Inserted = 0;      /* a file has just been inserted */
       46        46             extern int dont_skip_spaces; /* declared in domacro() */
       47        47             extern int dont_replace_directives; /* declared in domacro() */
       48        48
       49        49             #define MAX_LL_DEPTH  2
       50        50             #define LoadMapChar(c)  LoadChar(c)
       51        51             #define check_more_concat {\
       52        51             if (ch != DBL_POUND) {\
       53        51               if (class(ch) == STSKIP || ch == EOR) {\
       54        51                  while (class(ch) == STSKIP || ch == EOR) LoadChar(ch);\
       55        51                  if (ch != DBL_POUND) {\
       56        51                     concat = 0;\
       57        51                     PushBack();\
       58        51                     InsertBuffer;\
       59        51                     goto go_on;\
       60        51                  }\
       61        51               }\
       62        51               else{\
       63        51                 PushBack ();\
       64        51                 concat = 0;\
       65        51                 InsertBuffer;\
       66        51                 goto go_on;\
       67        51               }\
       68        51             }\
       69        51             }
       70        70             #define InsertBuffer  {\
       71        70             void Fake_ReplaceList();\
       72        70             text[indx] ='\0';\
       73        70             if (stringization&&insert_pos){\
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=3  
       74        70                InsertText(text+insert_pos, strlen(text)- insert_pos);\
       75        70                indx = insert_pos;\
       76        70             }\
       77        70             else{\
       78        70                InsertText(text, strlen(text));\
       79        70                indx = 0;\
       80        70             }\
       81        70             Fake_ReplaceList () ;\
       82        70             LoadChar (ch);\
       83        70             concat = 0;\
       84        70             }
       85        85
       86        86
       87        87             static struct token LexStack[MAX_LL_DEPTH];
       88        88             static LexSP = 0;
       89        89
       90        90             /*  In PushLex() the actions are taken in order to initialise or
       91        91              re-initialise the lexical scanner.
       92        92              E.g. at the invocation of a sub-parser that uses LLlex(), the
       93        93              state of the current parser should be saved.
       94        94             */
       95        95             PushLex()
       96        96             {
       97        97    1         ASSERT(LexSP < 2);
       98        98    1         ASSERT(ASIDE == 0);  /* ASIDE = 0;  */
       99        99    1         GetToken(&ahead);
      100       100    1         ahead.tk_line = LineNumber;
      101       101    1         ahead.tk_file = FileName;
      102       102    1         ahead.tok_debline = DebugLineBias;
      103       103    1         LexStack[LexSP++] = dot;
      104       104    1        }
      105       105
      106       106             PopLex()
      107       107             {
      108       108    1         ASSERT(LexSP > 0);
      109       109    1         dot = LexStack[--LexSP];
      110       110    1        }
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=4  
      111       111
      112       112             int
      113       113             LLlex()
      114       114             {
      115       115    1         /* LLlex() plays the role of Lexical Analyzer for the C parser.
      116       116    1            The look-ahead and putting aside of tokens are taken into
      117       117    1            account.
      118       118    1         */
      119       119    1         if (ASIDE) {   /* a token is put aside    */
      120       120    2            dot = aside;
      121       121    2            ASIDE = 0;
      122       122    2         }
      123       123    1         else {      /* read ahead and return the old one   */
      124       124    2            dot = ahead;
      125       125    2            /* the following test is performed due to the dual
      126       126    2               task of LLlex(): it is also called for parsing the
      127       127    2               restricted constant expression following a #if or
      128       128    2               #elif.  The newline character causes EOF to be
      129       129    2               returned in this case to stop the LLgen parsing task.
      130       130    2            */
      131       131    2            if (DOT != EOI)
      132       132    2               GetToken(&ahead);
      133       133    2            else
      134       134    2               DOT = EOF;
      135       135    2         }
      136       136    1         /* keep track of the place of the token in the file   */
      137       137    1         ahead.tk_file = FileName;
      138       138    1         ahead.tk_line = LineNumber;
      139       139    1         ahead.tok_debline = DebugLineBias;
      140       140    1         return DOT;
      141       141    1        }
      142       142
      143       143              int dollar_warned = 0;
      144       144             char *string_token();
      145       145             #define TEXT_SIZE   (IDFSIZE > NUMSIZE ? IDFSIZE : NUMSIZE) + 1
      146       146
      147       147             int
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=5  
      148       148             GetToken(ptok)
      149       149              register struct token *ptok;
      150       150             {
      151       151    1         /* GetToken() is the actual token recognizer. It calls the
      152       152    1            control line interpreter if it encounters a "\n#"
      153       153    1            combination. Macro replacement is also performed if it is
      154       154    1            needed.
      155       155    1         */
      156       156    1         char buf[(IDFSIZE > NUMSIZE ? IDFSIZE : NUMSIZE) + 1];
      157       157    1         register int ch, nch;
      158       158    1         extern int zb_ls_depth;
      159       159    1
      160       160    1         static int recursive_marker = 0;
      161       161    1         register int expanding_param = 0;
      162       162    1         register int indx = 0;
      163       163    1         register int size = TEXT_SIZE;
      164       164    1         register char text[TEXT_SIZE];
      165       165    1         register int concat = 0;
      166       166    1        #define push_text(a){text[indx++]=a;if(indx==size){/*truncating*/}}
      167       167    1         register int stringization = 0;
      168       168    1         register int insert_pos = 0;
      169       169    1         register int string_type = 0;
      170       170    1         if (File_Inserted) {
      171       171    2            File_Inserted = 0;
      172       172    2            DebugLineBias--;
      173       173    2            goto firstline;
      174       174    2         }
      175       175    1        again: /* rescan the input after an error or replacement  */
      176       176    1        #ifndef NOPP
      177       177    1         if (Unstacked) EnableMacros();
      178       178    1        #endif
      179       179    1         LoadMapChar(ch);
      180       180    1        go_on: /* rescan, the following character has been read   */
      181       181    1          if ((ch & 0600) && ch != EOI) { /* stop on non_ascii character */
      182       182    2        #ifndef NOPP
      183       183    2            if (ch == DBL_POUND) {    /* catenation */
      184       184    3             if (!concat) concat = 1;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=6  
      185       185    3             LoadMapChar(ch);  goto go_on;
      186       186    3            }
      187       187    2            else
      188       188    2            /* the outermost single pounds are replaced by
      189       189    2               special marker SGL_POUND, which will be replaced
      190       190    2               by '"' if we encounter the matching double quote.
      191       191    2               The other single pounds are replaced by '"'
      192       192    2               at this time which will cause the insertion
      193       193    2               of ecsape characters.    Note no insertions
      194       194    2               after the replacement of a macro name.
      195       195    2            */
      196       196    2            if (ch == SGL_POUND) {    /* stringization */
      197       197    3               if (!concat) {
      198       198    4                  if (stringization) {
      199       199    5                     push_text('"');
      200       200    5                  }
      201       201    4                  else { /* not stringization */
      202       202    5                     if (indx) { /* something left in the buffer */
      203       203    6                        PushBack();  /* for SGL_POUND */
      204       204    6                        InsertBuffer;
      205       205    6                        goto again;
      206       206    6                     }
      207       207    5                     else {
      208       208    6                        push_text(SGL_POUND);
      209       209    6                     }
      210       210    5                  } /* not stringization */
      211       211    4               } /* not concat */
      212       212    3               else { /* in catenations */
      213       213    4                  if (concat == 2) { /* already catenating strings */
      214       214    5                     while ((class(text[--indx]) == STSKIP || text[indx] == '\n') && i
                               ndx);
      215       215    5                     concat = 0; /* pos now points the last '"' */
      216       216    5                  }
      217       217    4                  else { /* try to catenate a string */
      218       218    5                     error("catenating string literals and non-string literals");
      219       219    5                     if (concat) concat = 2; /* e.g. A"B" */
      220       220    5                     if (stringization) {
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=7  
      221       221    6                        push_text('"');
      222       222    6                     }
      223       223    5                     else {
      224       224    6                        push_text(SGL_POUND);
      225       225    6                     }
      226       226    5                  } /* try to catenating a string */
      227       227    4               } /* in catenations */
      228       228    3             stringization ++;
      229       229    3             LoadMapChar(ch);  goto go_on;
      230       230    3            }
      231       231    2            else
      232       232    2            if (ch == RECURSION) {    /* recursive marker */
      233       233    3             recursive_marker = 1;
      234       234    3             LoadMapChar(ch);  goto go_on;
      235       235    3            }
      236       236    2            else
      237       237    2            if (ch == EXPAND_PARAM) {    /* expand parameters first */
      238       238    3             expanding_param = 1;
      239       239    3             while(LoadMapChar(ch), ch == EXPAND_PARAM) expanding_param ++;
      240       240    3             goto go_on;
      241       241    3            }
      242       242    2            else
      243       243    2            if (ch == FORMAL_OPEN) {
      244       244    3             LoadMapChar(ch);  goto go_on;
      245       245    3            }
      246       246    2            else
      247       247    2            if (ch == EOR) {    /* end of replacement list */
      248       248    3             LoadMapChar(ch);  goto go_on;
      249       249    3            }
      250       250    2            else
      251       251    2            if (ch == 0371) {
      252       252    3             LoadMapChar(ch);
      253       253    3             while ((!stringization && class(ch) == STSKIP) || ch == EOR) LoadMapChar(
                               ch);
      254       254    3             if (ch == DBL_POUND){
      255       255    4                concat = 2;
      256       256    4             }
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=8  
      257       257    3             else { concat = 0; PushBack(); }
      258       258    3             if (stringization > 1) {
      259       259    4               push_text('"');
      260       260    4             }
      261       261    3             else {
      262       262    4               push_text(SGL_POUND);
      263       263    4             }
      264       264    3             if (stringization == 1 && !concat) {
      265       265    4               void Fake_ReplaceList();
      266       266    4               register int size = TEXT_SIZE;
      267       267    4               char buf[TEXT_SIZE];
      268       268    4               char *tg = text;
      269       269    4        #define push_buf(a) \
      270       269    4        {buf[i++]=a;if(i==size){/*truncating*/}}
      271       271    4               int  i = 0;
      272       272    4               text[indx] = '\0';
      273       273    4               while(*tg) {
      274       274    5                 if (*tg == SGL_POUND) {
      275       275    6                    push_buf('"');
      276       276    6                 }
      277       277    5                 else
      278       278    5                 if (*tg == '"') {
      279       279    6                    push_buf('\\');
      280       280    6                    push_buf('"');
      281       281    6                 }
      282       282    5                 else {
      283       283    6                    push_buf(*tg);
      284       284    6                 }
      285       285    5                 tg++;
      286       286    5               }
      287       287    4               buf[i] = '\0';
      288       288    4               size = i + 1;
      289       289    4               tg = Malloc(size);
      290       290    4               strcpy(tg, buf);
      291       291    4               InsertText(tg, size);
      292       292    4               Fake_ReplaceList();
      293       293    4               indx = i = insert_pos = 0;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=9  
      294       294    4               stringization --;
      295       295    4               goto again;
      296       296    4             }
      297       297    3             stringization --;
      298       298    3             LoadMapChar(ch);  goto go_on;
      299       299    3            }
      300       300    2            else
      301       301    2        #endif     /*  NOPP */
      302       302    2            fatal("non-ascii '\\%03o' read", ch & 0377);
      303       303    2          } /* if ((ch & 0600) && ch != EOI) */
      304       304    1         switch (class(ch)) { /* detect character class  */
      305       305    2         case STNL:     /* newline, vertical space or formfeed */
      306       306    2        firstline:
      307       307    2            AdjustLineNumber;       /* also at vs and ff */
      308       308    2            if (EoiForNewline)   /* called in control line  */
      309       309    2               /* a newline in a control line indicates the
      310       310    2                  end-of-information of the line.
      311       311    2               */
      312       312    2               return ptok->tk_symb = EOI;
      313       313    2            while (LoadMapChar(ch), ch = skipspaces(ch), ch=='#') {
      314       314    3            /* a control line follows...   */
      315       315    3           ch = skipspaces(ch);
      316       316    3           if (ch == '?') ch = trigraph();
      317       317    3               domacro();
      318       318    3               if (File_Inserted) {
      319       319    4                  File_Inserted = 0;
      320       320    4                  DebugLineBias--;
      321       321    4                  goto firstline;
      322       322    4               }
      323       323    3            }
      324       324    2               /* We have to loop here, because in
      325       325    2                  `domacro' the nl, vt or ff is read. The
      326       326    2                  character following it may again be a `#'.
      327       327    2               */
      328       328    2            goto go_on;
      329       329    2         case STSKIP:      /* just skip the skip characters */
      330       330    2          if (stringization && !concat) {
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=10 
      331       331    3              push_text(ch);
      332       332    3          }
      333       333    2            goto again;
      334       334    2         case STGARB:      /* garbage character       */
      335       335    2        #ifndef NOPP
      336       336    2          if (!stringization && !concat) {
      337       337    3            if (SkipEscNewline && (ch == '\\')) {
      338       338    4               /* a '\\' is allowed in #if/#elif expression */
      339       339    4               LoadMapChar(ch);
      340       340    4               if (class(ch) == STNL) {   /* vt , ff ?   */
      341       341    5                  AdjustLineNumber;
      342       342    5                  goto again;
      343       343    5               }
      344       344    4               PushBack();
      345       345    4               ch = '\\';
      346       346    4            }
      347       347    3        #endif NOPP
      348       348    3            if (040 < ch && ch < 0177)
      349       349    3               lexerror("garbage char %c", ch);
      350       350    3            else
      351       351    3               lexerror("garbage char \\%03o", ch);
      352       352    3        #ifndef NOPP
      353       353    3          }
      354       354    2          else {
      355       355    3           push_text(ch);
      356       356    3           LoadMapChar(ch);
      357       357    3           if (concat) check_more_concat;
      358       358    3           goto go_on;
      359       359    3          }
      360       360    2        #endif NOPP
      361       361    2            goto again;
      362       362    2         case STSIMP:   /* a simple character, no part of compound token*/
      363       363    2            if (ch == '{')  zb_ls_depth++;
      364       364    2            else if (ch == '}')  zb_ls_depth--;
      365       365    2          if (stringization || concat) {
      366       366    3           push_text(ch);
      367       367    3           LoadMapChar(ch);
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=11 
      368       368    3        #ifndef NOPP
      369       369    3           if (concat) check_more_concat;
      370       370    3        #endif  /* NOPP */
      371       371    3           goto go_on;
      372       372    3          }
      373       373    2          else
      374       374    2            return ptok->tk_symb = ch;
      375       375    2         case STCOMP:   /* maybe the start of a compound token    */
      376       376    2        #ifndef NOPP
      377       377    2          if (!stringization && !concat) {
      378       378    3        #endif NOPP
      379       379    3            LoadMapChar(nch);       /* character lookahead  */
      380       380    3            switch (ch) {
      381       381    4            case '!':
      382       382    4               if (nch == '=')
      383       383    4                  return ptok->tk_symb = NOTEQUAL;
      384       384    4               PushBack();
      385       385    4               return ptok->tk_symb = ch;
      386       386    4            case '&':
      387       387    4               if (nch == '&')
      388       388    4                  return ptok->tk_symb = AND;
      389       389    4           if (nch == '=')
      390       390    4            return ptok->tk_symb = ANDAB;
      391       391    4               PushBack();
      392       392    4               return ptok->tk_symb = ch;
      393       393    4            case '+':
      394       394    4               if (nch == '+')
      395       395    4                  return ptok->tk_symb = PLUSPLUS;
      396       396    4           if (nch == '=')
      397       397    4            return ptok->tk_symb = PLUSAB;
      398       398    4               PushBack();
      399       399    4               return ptok->tk_symb = ch;
      400       400    4            case '-':
      401       401    4               if (nch == '-')
      402       402    4                  return ptok->tk_symb = MINMIN;
      403       403    4               if (nch == '>')
      404       404    4                  return ptok->tk_symb = ARROW;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=12 
      405       405    4           if (nch == '=')
      406       406    4            return ptok->tk_symb = MINAB;
      407       407    4               PushBack();
      408       408    4               return ptok->tk_symb = ch;
      409       409    4            case '<':
      410       410    4               if (AccFileSpecifier) {
      411       411    5                  PushBack(); /* pushback nch */
      412       412    5                  ptok->tk_bts = string_token("file specifier",
      413       413    5                           '>', &(ptok->tk_len), stringization, concat);
      414       414    5                  return ptok->tk_symb = FILESPECIFIER;
      415       415    5               }
      416       416    4           if (nch == '<') {
      417       417    5            char xch;
      418       418    5            LoadMapChar(xch);
      419       419    5            if (xch == '=')
      420       420    5             return ptok->tk_symb = LEFTAB;
      421       421    5            PushBack();
      422       422    5            return ptok->tk_symb = LEFT;
      423       423    5           }
      424       424    4               if (nch == '=')
      425       425    4                  return ptok->tk_symb = LESSEQ;
      426       426    4               PushBack();
      427       427    4               return ptok->tk_symb = ch;
      428       428    4            case '=':
      429       429    4               if (nch == '=')
      430       430    4                  return ptok->tk_symb = EQUAL;
      431       431    4               PushBack();
      432       432    4               return ptok->tk_symb = ch;
      433       433    4            case '>':
      434       434    4               if (nch == '=')
      435       435    4                  return ptok->tk_symb = GREATEREQ;
      436       436    4           if (nch == '>') {
      437       437    5            char xch;
      438       438    5            LoadMapChar(xch);
      439       439    5            if (xch == '=')
      440       440    5             return ptok->tk_symb = RIGHTAB;
      441       441    5            PushBack();
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=13 
      442       442    5            return ptok->tk_symb = RIGHT;
      443       443    5           }
      444       444    4               PushBack();
      445       445    4               return ptok->tk_symb = ch;
      446       446    4            case '|':
      447       447    4               if (nch == '|')
      448       448    4                  return ptok->tk_symb = OR;
      449       449    4           if (nch == '=')
      450       450    4            return ptok->tk_symb = ORAB;
      451       451    4               PushBack();
      452       452    4               return ptok->tk_symb = ch;
      453       453    4          case '*':
      454       454    4           if (nch == '=')
      455       455    4            return ptok->tk_symb = TIMESAB;
      456       456    4           PushBack();
      457       457    4           return ptok->tk_symb = ch;
      458       458    4          case '/':
      459       459    4           if (nch == '*') {
      460       460    5            skipcomment();
      461       461    5            goto again;
      462       462    5           }
      463       463    4           if (nch == '=')
      464       464    4            return ptok->tk_symb = DIVAB;
      465       465    4           PushBack();
      466       466    4           return ptok->tk_symb = ch;
      467       467    4          case '%':
      468       468    4           if (nch == '=')
      469       469    4            return ptok->tk_symb = MODAB;
      470       470    4           PushBack();
      471       471    4           return ptok->tk_symb = ch;
      472       472    4          case '^':
      473       473    4           if (nch == '=')
      474       474    4            return ptok->tk_symb = XORAB;
      475       475    4           PushBack();
      476       476    4           return ptok->tk_symb = ch;
      477       477    4            }
      478       478    3        #ifndef NOPP
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=14 
      479       479    3          } /* if (!stringization) */
      480       480    2          else {
      481       481    3           push_text(ch);
      482       482    3           LoadMapChar(ch);
      483       483    3           if (concat) check_more_concat;
      484       484    3           goto go_on;
      485       485    3          }
      486       486    2        #endif NOPP
      487       487    2         case STIDF:
      488       488    2         {
      489       489    3            register char *tg = &buf[0];
      490       490    3            register int pos = -1;
      491       491    3            register int hash;
      492       492    3            register struct idf *idef;
      493       493    3            extern int idfsize;     /* ??? */
      494       494    3          register PreviousChar = '\0';
      495       495    3         if (ch == 'L') {   /* Long string and character constants */
      496       496    4           LoadChar(hash);
      497       497    4           string_type = LONG;
      498       498    4           if (hash == '\'') goto char_const;
      499       499    4           if (hash == '\"') goto string_const;
      500       500    4           PushBack();
      501       501    4         }
      502       502    3            hash = STARTHASH();
      503       503    3            do {        /* read the identifier  */
      504       504    4               if (++pos < idfsize) {
      505       505    5        #ifndef NOPP
      506       506    5                  if (Unstacked) EnableMacros();
      507       507    5        #endif
      508       508    5                  *tg++ = ch;
      509       509    5                  hash = ENHASH(hash, ch, pos);
      510       510    5               }
      511       511    4               LoadChar(ch);
      512       512    4            } while (in_idf(ch));
      513       513    3            hash = STOPHASH(hash);
      514       514    3            if (ch != EOI)
      515       515    3               PushBack();
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=15 
      516       516    3            *tg++ = '\0';  /* mark the end of the identifier   */
      517       517    3            idef = ptok->tk_idf = idf_hashed(buf, tg - buf, hash);
      518       518    3        #ifndef NOPP
      519       519    3          if (!recursive_marker) {
      520       520    4           if (expanding_param > 1
      521       521    4              || (!expanding_param && ch != DBL_POUND && !concat)
      522       522    4              || (expanding_param == 1  && ch != DBL_POUND && !concat && !stringizatio
                               n )
      523       523    4              ){
      524       524    5            if (ReplaceMacros) {
      525       525    6               expanding_param = 0;
      526       526    6               if (idef && !(dont_replace_directives && idef->id_resmac) && idef->id_m
                               acro && replace(idef)) {
      527       527    7                  LoadMapChar(ch); goto go_on; /* goto again; */
      528       528    7               }
      529       529    6            }
      530       530    5           }
      531       531    4           else {
      532       532    5            expanding_param = 0;
      533       533    5           }
      534       534    4          }
      535       535    3          else {  /* it's recursive */
      536       536    4           recursive_marker = 0;
      537       537    4          }
      538       538    3
      539       539    3          *tg = 0;
      540       540    3          tg = buf;
      541       541    3
      542       542    3          if (indx && !text[indx] && !concat && !stringization) {
      543       543    4             text[indx = 0] = '\0';
      544       544    4          }
      545       545    3          if (stringization && !concat) insert_pos = indx;
      546       546    3          while (*tg) {
      547       547    4             push_text(*tg++);
      548       548    4          }
      549       549    3
      550       550    3          LoadMapChar(ch);
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=16 
      551       551    3
      552       552    3          if (!dont_skip_spaces && !stringization) while(ch == EOR || class(ch) == STS
                               KIP) { PreviousChar = ch; LoadMapChar(ch);}
      553       553    3          if (ch != DBL_POUND) {
      554       554    4             PushBack();
      555       555    4             if (class(PreviousChar) == STSKIP) {
      556       556    5                PushBack();
      557       557    5                PreviousChar = '\0';
      558       558    5             }
      559       559    4             if (stringization) {
      560       560    5                if (concat) {
      561       561    6                   void Fake_ReplaceList();
      562       562    6                   text[indx] = '\0';
      563       563    6                   InsertText(text+insert_pos, strlen(text)-insert_pos);
      564       564    6                   indx = insert_pos;
      565       565    6                   Fake_ReplaceList();
      566       566    6                   concat = 0;
      567       567    6                   goto again;
      568       568    6                }
      569       569    5                else { /* in stringization but no concat */
      570       570    6                   LoadMapChar(ch);
      571       571    6                   goto go_on;
      572       572    6                }
      573       573    5             }
      574       574    4             else { /* not in a stringization */
      575       575    5                if (concat) {
      576       576    6                   void Fake_ReplaceList();
      577       577    6                   text[indx] = '\0';
      578       578    6                   InsertText(text, strlen(text));
      579       579    6                   indx = 0;
      580       580    6                   Fake_ReplaceList();
      581       581    6                   concat = 0;
      582       582    6                   goto again;
      583       583    6                }
      584       584    5                else { /* not in stringization nor in catenation */
      585       585    6                   text[indx] = '\0';
      586       586    6                   goto done;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=17 
      587       587    6                }
      588       588    5             } /* not in a stringization */
      589       589    4          } /* no catenation */
      590       590    3          else {  /* concatenation required */
      591       591    4           concat = 1;
      592       592    4           if (indx) {
      593       593    5              while ((class(text[--indx]) == STSKIP || text[indx] == '\n') && indx);
      594       594    5              indx++;
      595       595    5           }
      596       596    4           LoadMapChar(ch);  goto go_on;
      597       597    4          }
      598       598    3
      599       599    3        done:
      600       600    3            if (UnknownIdIsZero && idef->id_reserved != SIZEOF && idef->id_reserved !=
                                ALIGNOF) {
      601       601    4               ptok->tk_ival = (arith)0;
      602       602    4               ptok->tk_fund = INT;
      603       603    4           if ((options['A'] || options['R']) && !dollar_warned && strchr(idef->id_tex
                               t, '$')) {
      604       604    5              lexerror("$ in identifier");
      605       605    5              dollar_warned = 1;
      606       606    5           }
      607       607    4               return ptok->tk_symb = INTEGER;
      608       608    4            }
      609       609    3        #endif NOPP
      610       610    3            ptok->tk_symb = (
      611       611    3               idef->id_reserved ? idef->id_reserved
      612       612    3               : idef->id_def && idef->id_def->df_sc == TYPEDEF ?
      613       613    3                  TYPE_IDENTIFIER
      614       614    3               : IDENTIFIER
      615       615    3            );
      616       616    3           if ((options['A'] || options['R']) && !dollar_warned && strchr(idef->id_tex
                               t, '$')) {
      617       617    4              lexerror("$ in identifier");
      618       618    4              dollar_warned = 1;
      619       619    4           }
      620       620    3            return IDENTIFIER;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=18 
      621       621    3         }
      622       622    2         case STCHAR:            /* character constant   */
      623       623    2        char_const:
      624       624    2         {
      625       625    3            register arith val = 0, size = 0;
      626       626    3
      627       627    3            LoadMapChar(ch);
      628       628    3            if (ch == '\'')
      629       629    3               lexerror("character constant too short");
      630       630    3            else
      631       631    3        #ifndef NOPP
      632       632    3          {
      633       633    4          if (stringization || concat) push_text('\'');
      634       634    4        #endif NOPP
      635       635    4            while (ch != '\'') {
      636       636    5               if (ch == '\n') {
      637       637    6                  lexerror("newline in character constant");
      638       638    6                  AdjustLineNumber;
      639       639    6                  break;
      640       640    6               }
      641       641    5               if (ch == '\\') {
      642       642    6                  LoadMapChar(ch);
      643       643    6            if (concat) {
      644       644    7               push_text('\\');
      645       645    7            }
      646       646    6            else
      647       647    6            if (stringization) {
      648       648    7               push_text('\\');
      649       649    7               push_text('\\');
      650       650    7            }
      651       651    6                  if (ch == '\n')
      652       652    6             AdjustLineNumber;
      653       653    6        #ifndef NOPP
      654       654    6            if (stringization || concat) {
      655       655    7               push_text(ch);
      656       656    7            }
      657       657    6            else
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=19 
      658       658    6        #endif NOPP
      659       659    6                  ch = quoted(ch);
      660       660    6               }
      661       661    5               val = val*512 + ch;
      662       662    5               size++;
      663       663    5               LoadMapChar(ch);
      664       664    5            }
      665       665    4        #ifndef NOPP
      666       666    4          } /* else */
      667       667    3        #endif  NOPP
      668       668    3            if (size > int_size)
      669       669    3               lexerror("character constant too long");
      670       670    3        #ifndef NOPP
      671       671    3           if (stringization || concat) {
      672       672    4              push_text('\'');
      673       673    4              LoadMapChar(ch);
      674       674    4              if (concat) check_more_concat;
      675       675    4              goto go_on;
      676       676    4           }
      677       677    3
      678       678    3        #endif  NOPP
      679       679    3            ptok->tk_ival = val;
      680       680    3            ptok->tk_fund = INT;
      681       681    3            return ptok->tk_symb = INTEGER;
      682       682    3         }
      683       683    2         case STSTR:             /* string   */
      684       684    2          string_type = 0;
      685       685    2        string_const:
      686       686    2        #ifndef NOPP
      687       687    2           if (stringization || concat){
      688       688    3             char *tg; int dummy;
      689       689    3             push_text('"');
      690       690    3             tg = string_token("string", '"', &dummy, stringization, concat);
      691       691    3             while (*tg)  push_text(*tg++);
      692       692    3             push_text('"');
      693       693    3             LoadMapChar(ch);  goto go_on;
      694       694    3           }
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=20 
      695       695    2           else {
      696       696    3        #endif NOPP
      697       697    3            ptok->tok_qualifier = string_type;
      698       698    3            ptok->tk_bts = string_token("string", '"', &(ptok->tk_len), stringization,
                                concat);
      699       699    3            return ptok->tk_symb = STRING;
      700       700    3        #ifndef NOPP
      701       701    3          }
      702       702    2        #endif NOPP
      703       703    2         case STNUM:          /* a numeric constant   */
      704       704    2         {
      705       705    3            /* It should be noted that 099 means 81(decimal) and
      706       706    3               099.5 means 99.5 . This severely limits the tricks
      707       707    3               we can use to scan a numeric value.
      708       708    3            */
      709       709    3            register char *np = &buf[1];
      710       710    3            register int base = 10;
      711       711    3            register int vch, xch;
      712       712    3            register unsigned long val = 0, oldv = 0;
      713       713    3            register int ovfl = 0;
      714       714    3            char *endch;
      715       715    3
      716       716    3        #ifndef NOPP
      717       717    3         if (!stringization && !concat) {
      718       718    4        #endif  NOPP
      719       719    4            if (ch == '.') {  /* an embarrassing ambiguity */
      720       720    5        #ifndef NOFLOAT
      721       721    5               LoadChar(vch);
      722       722    5               if (vch == '.') {
      723       723    6                  LoadChar(xch);
      724       724    6                  if (xch == '.')
      725       725    6                     return ptok->tk_symb = ELIPSIS;
      726       726    6                  PushBack();
      727       727    6               }
      728       728    5               else PushBack();
      729       729    5               if (!is_dig(vch)) /* just a `.'  */
      730       730    5                  return ptok->tk_symb = ch;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=21 
      731       731    5               *np++ = '0';
      732       732    5               /* in the rest of the compiler, all floats
      733       733    5                  have to start with a digit.
      734       734    5               */
      735       735    5        #else NOFLOAT
      736       736   *S*              return ptok->tk_symb = ch;
      737       737   *S*       #endif NOFLOAT
      738       738    5            }
      739       739    4            if (ch == '0') {
      740       740    5               *np++ = ch;
      741       741    5               LoadChar(ch);
      742       742    5               if (ch == 'x' || ch == 'X') {
      743       743    6                  base = 16;
      744       744    6                  LoadChar(ch);
      745       745    6               }
      746       746    5               else
      747       747    5                  base = 8;
      748       748    5            }
      749       749    4            while (vch = val_in_base(ch, base), vch >= 0) {
      750       750    5               val = val*base + vch;
      751       751    5               if (oldv && val <= oldv) ovfl++;
      752       752    5               oldv = val;
      753       753    5               if (np < &buf[NUMSIZE])
      754       754    5                  *np++ = ch;
      755       755    5               LoadChar(ch);
      756       756    5            }
      757       757    4            if (base == 16 && np <= &buf[2])
      758       758    4               lexwarning("no digits in hexadecimal constant");
      759       759    4            if (ch == 'L' || ch == 'l' || ch == 'u' || ch == 'U') {
      760       760    5               int found = 0;
      761       761    5               if (ovfl)
      762       762    5                  lexwarning("overflow in integer constant");
      763       763    5               while (ch) {
      764       764    6                  if (ch == 'l' || ch == 'L') {
      765       765    7                     if (found & 1)
      766       766    7                        lexerror("duplicate \"l\" integer qualifiers");
      767       767    7                     found |= 1;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=22 
      768       768    7                     ptok->tk_ival = (arith)val;
      769       769    7                     if (ptok->tk_fund == UNSIGNED)
      770       770    7                        ptok->tk_fund = UNSIGNEDLONG;
      771       771    7                     else ptok->tk_fund = LONG;
      772       772    7                     }
      773       773    6                  else if (ch == 'u' || ch == 'U') {
      774       774    7                     if (found & 2)
      775       775    7                        lexerror("duplicate \"u\" integer qualifiers");
      776       776    7                     ptok->tk_ival = (arith)val;
      777       777    7                     if (ptok->tk_fund == LONG)
      778       778    7                        ptok->tk_fund = UNSIGNEDLONG;
      779       779    7                     else ptok->tk_fund = UNSIGNED;
      780       780    7                     found |= 2;
      781       781    7                     }
      782       782    6                  else {
      783       783    7                     if (in_idf(ch)) {
      784       784    8                        lexerror("Illegal integer constant");
      785       785    8                        while (in_idf(ch)) LoadChar(ch);
      786       786    8                        }
      787       787    7                     PushBack();
      788       788    7                     return ptok->tk_symb = INTEGER;
      789       789    7                     }
      790       790    6                  LoadChar(ch);
      791       791    6                  }  /* end of while loop */
      792       792    5            }   /* end of if block      */
      793       793    4        #ifndef NOFLOAT
      794       794    4            if (base == 16 || !(ch == '.' || ch == 'e' || ch == 'E'))
      795       795    4        #endif NOFLOAT
      796       796    4            {
      797       797    5               if (ovfl)
      798       798    5                  lexwarning("overflow in integer constant");
      799       799    5               ptok->tk_ival = (arith)val;
      800       800    5           if (in_idf(ch))    {
      801       801    6              if (base == 8)
      802       802    6                 lexerror("Illegal octal constant");
      803       803    6              else if (base == 16)
      804       804    6                 lexerror("Illegal hexadecimal constant");
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=23 
      805       805    6              else lexerror("Illegal integer constant");
      806       806    6              while (in_idf(ch))  LoadChar(ch);
      807       807    6              }
      808       808    5           PushBack();
      809       809    5               /* The semantic analyser must know if the
      810       810    5                  integral constant is given in octal/hexa-
      811       811    5                  decimal form, in which case its type is
      812       812    5                  UNSIGNED, or in decimal form, in which case
      813       813    5                  its type is signed, indicated by
      814       814    5                  the fund INTEGER.
      815       815    5               */
      816       816    5               ptok->tk_fund =
      817       817    5                  (ptok->tk_ival >= 0)   /* same size int and longs! */
      818       818    5                     ? INTEGER : UNSIGNED;
      819       819    5               return ptok->tk_symb = INTEGER;
      820       820    5            }
      821       821    4            /* where's the test for the length of the integral ???   */
      822       822    4        #ifndef NOFLOAT
      823       823    4            if (ch == '.'){
      824       824    5               if (np < &buf[NUMSIZE])
      825       825    5                  *np++ = ch;
      826       826    5               LoadChar(ch);
      827       827    5            }
      828       828    4            while (is_dig(ch)){
      829       829    5               if (np < &buf[NUMSIZE])
      830       830    5                  *np++ = ch;
      831       831    5               LoadChar(ch);
      832       832    5            }
      833       833    4            if (ch == 'e' || ch == 'E') {
      834       834    5               if (np < &buf[NUMSIZE])
      835       835    5                  *np++ = ch;
      836       836    5               LoadChar(ch);
      837       837    5               if (ch == '+' || ch == '-') {
      838       838    6                  if (np < &buf[NUMSIZE])
      839       839    6                     *np++ = ch;
      840       840    6                  LoadChar(ch);
      841       841    6               }
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=24 
      842       842    5               if (!is_dig(ch)) {
      843       843    6                  lexerror("malformed floating constant");
      844       844    6                  if (np < &buf[NUMSIZE])
      845       845    6                     *np++ = ch;
      846       846    6               }
      847       847    5               while (is_dig(ch)) {
      848       848    6                  if (np < &buf[NUMSIZE])
      849       849    6                     *np++ = ch;
      850       850    6                  LoadChar(ch);
      851       851    6               }
      852       852    5            }
      853       853    4          ptok->tk_ftype = DOUBLE;
      854       854    4            if (in_idf(ch)) {
      855       855    5            int found = 0;
      856       856    5            while (ch) {
      857       857    6                 if (ch == 'l' || ch == 'L') {
      858       858    7                    if (found & 1) lexerror("duplicate \"l\" qualifier");
      859       859    7                    found |= 1;
      860       860    7                    ptok->tk_ftype = LONG;
      861       861    7                    LoadChar(ch);
      862       862    7                    }
      863       863    6                 else if (ch == 'f' || ch == 'F') {
      864       864    7                    if (found & 2) lexerror("duplicate \"f\" qualifier");
      865       865    7                    found |= 2;
      866       866    7                    if (ptok->tk_ftype != LONG) ptok->tk_ftype = FLOAT;
      867       867    7                    LoadChar(ch);
      868       868    7                    }
      869       869    6                 else {
      870       870    7                    if (in_idf(ch)) {
      871       871    8                       lexerror("Illegal float qualifier");
      872       872    8                       while(in_idf(ch)) LoadChar(ch);
      873       873    8                       }
      874       874    7                    break;
      875       875    7                    }       /* of not "l" or "f" suffix */
      876       876    6                 }          /* of while (ch)            */
      877       877    5            }               /* of if (in_idf(ch))       */
      878       878    4            PushBack();
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=25 
      879       879    4            *np++ = '\0';
      880       880    4            errno = 0;
      881       881    4            buf[0] = '-';  /* good heavens...   */
      882       882    4            if (np == &buf[NUMSIZE+1]) {
      883       883    5               lexerror("floating constant too long");
      884       884    5        #ifndef FLOATOPT
      885       885   *S*              ptok->tk_fval = Salloc("0.0",(unsigned) 5) + 1;
      886       886   *S*       #else
      887       887    5               ptok->tk_fval = 0.0;
      888       888    5        #endif
      889       889    5            }
      890       890    4            else
      891       891    4        #ifndef FLOATOPT
      892       892   *S*              ptok->tk_fval = Salloc(buf,(unsigned) (np - buf)) + 1;
      893       893   *S*       #else
      894       894    4               ptok->tk_fval = strtod(buf+1, &endch);
      895       895    4        #endif
      896       896    4        #ifndef FLOATOPT
      897       897   *S*           strtod(buf, &endch);
      898       898   *S*       #endif
      899       899    4            if (*endch != 0 || errno != 0)
      900       900    4               error("Floating point constant cannot be represented");
      901       901    4            return ptok->tk_symb = FLOATING;
      902       902    4        #endif NOFLOAT
      903       903    4        #ifndef NOPP
      904       904    4         }
      905       905    3         else {  /*  in a stringization or in a catenation */
      906       906    4           if (stringization && !concat) insert_pos = indx;
      907       907    4           if (ch == '.') {
      908       908    5        #ifndef NOFLOAT
      909       909    5              push_text(ch);
      910       910    5              LoadChar(vch);
      911       911    5              if (vch == '.') {
      912       912    6                 push_text(vch);
      913       913    6                 LoadChar(xch);
      914       914    6                 if (xch == '.') {
      915       915    7                    push_text(xch);
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=26 
      916       916    7                    LoadMapChar(ch);  goto go_on;
      917       917    7                 }
      918       918    6                 PushBack();
      919       919    6              }
      920       920    5              else PushBack();
      921       921    5              if (!is_dig(vch)) { /* just a '.' */
      922       922    6                 LoadMapChar(ch);
      923       923    6                 goto go_on;
      924       924    6              }
      925       925    5              LoadChar(ch);
      926       926    5              *np++ = '0';
      927       927    5        #else  NOFLOAT
      928       928   *S*             push_text('.');
      929       929   *S*             LoadMapChar(ch);  goto go_on;
      930       930   *S*       #endif NOFLOAT
      931       931    5           } /* if (ch == '.') */
      932       932    4           if (ch == '0') {
      933       933    5              *np++ = ch;
      934       934    5              push_text(ch);
      935       935    5              LoadChar(ch);
      936       936    5              if (ch == 'x' || ch == 'X') {
      937       937    6                 base = 16;
      938       938    6                 push_text(ch);
      939       939    6                 LoadChar(ch);
      940       940    6              }
      941       941    5              else
      942       942    5                 base = 8;
      943       943    5           } /* if (ch == '0') */
      944       944    4
      945       945    4           vch = val_in_base(ch, base);
      946       946    4        more:
      947       947    4           if (vch >= 0) {
      948       948    5              val = val*base + vch;
      949       949    5              if (np < &buf[NUMSIZE]) {
      950       950    6                 *np++ = ch;
      951       951    6                 push_text(ch);
      952       952    6              }
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=27 
      953       953    5              LoadChar(ch);
      954       954    5              vch = val_in_base(ch, base);
      955       955    5              if (vch >= 0) goto more;
      956       956    5           }
      957       957    4
      958       958    4           if (ch == 'L' || ch == 'l' || ch == 'u' || ch == 'U') {
      959       959    5              push_text(ch);
      960       960    5              LoadMapChar(ch);
      961       961    5           }
      962       962    4           if (concat) check_more_concat;
      963       963    4           goto go_on;
      964       964    4         }
      965       965    3        #endif  NOPP
      966       966    3         }
      967       967    2         case STEOI:       /* end of text on source file */
      968       968    2            return ptok->tk_symb = EOI;
      969       969    2         default:          /* this cannot happen   */
      970       970    2            crash("bad class for char 0%o", ch);
      971       971    2         }
      972       972    1         /*NOTREACHED*/
      973       973    1        }
      974       974
      975       975             skipcomment()
      976       976             {
      977       977    1         /* The last character read has been the '*' of '/_*'.  The
      978       978    1            characters, except NL and EOI, between '/_*' and the first
      979       979    1            occurring '*_/' are not interpreted.
      980       980    1            NL only affects the LineNumber.  EOI is not legal.
      981       981    1
      982       982    1            Important note: it is not possible to stop skipping comment
      983       983    1            beyond the end-of-file of an included file.
      984       984    1            EOI is returned by LoadChar only on encountering EOF of the
      985       985    1            top-level file...
      986       986    1         */
      987       987    1         register int c;
      988       988    1
      989       989    1         NoUnstack++;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=28 
      990       990    1         LoadChar(c);
      991       991    1         do {
      992       992    2            while (c != '*') {
      993       993    3               if (class(c) == STNL) {
      994       994    4                  AdjustLineNumber;
      995       995    4           }
      996       996    3               else
      997       997    3               if (c == EOI) {
      998       998    4                  NoUnstack--;
      999       999    4                  return;
     1000      1000    4               }
     1001      1001    3               LoadChar(c);
     1002      1002    3            } /* last Character seen was '*' */
     1003      1003    2            LoadChar(c);
     1004      1004    2         } while (c != '/');
     1005      1005    1         NoUnstack--;
     1006      1006    1        }
     1007      1007
     1008      1008             char *
     1009      1009             string_token(nm, stop_char, plen, stringization, concat)
     1010      1010              char *nm;
     1011      1011              int *plen;
     1012      1012             {
     1013      1013    1         register int ch = '"';
     1014      1014    1         register int str_size;
     1015      1015    1         register char *str = Malloc((unsigned) (str_size = ISTRSIZE));
     1016      1016    1         register int pos = 0;
     1017      1017    1
     1018      1018    1        while (ch == '"')   {
     1019      1019    2         LoadMapChar(ch);
     1020      1020    2         while (ch != stop_char) {
     1021      1021    3            if (ch == '\n') {
     1022      1022    4               lexerror("newline in %s", nm);
     1023      1023    4               AdjustLineNumber;
     1024      1024    4               break;
     1025      1025    4            }
     1026      1026    3            if (ch == EOI) {
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=29 
     1027      1027    4               lexerror("end-of-file inside %s", nm);
     1028      1028    4               break;
     1029      1029    4            }
     1030      1030    3            if (ch == '\\') {
     1031      1031    4                if (stringization) {
     1032      1032    5                    str[pos++] = ch;
     1033      1033    5                    if (pos == str_size)
     1034      1034    5                       str = Srealloc(str, (unsigned) (str_size += RSTRSIZE));
     1035      1035    5                    str[pos++] = ch;
     1036      1036    5                    if (pos == str_size)
     1037      1037    5                       str = Srealloc(str, (unsigned) (str_size += RSTRSIZE));
     1038      1038    5                }
     1039      1039    4               LoadMapChar(ch);
     1040      1040    4               if (ch == '\n') {
     1041      1041    5            warning("string literal continuation is not standard");
     1042      1042    5                  AdjustLineNumber;
     1043      1043    5                  LoadMapChar(ch);
     1044      1044    5                  continue;
     1045      1045    5               }
     1046      1046    4        #ifndef NOPP
     1047      1047    4           if (!stringization && !concat)
     1048      1048    4               ch = quoted(ch);
     1049      1049    4        #endif
     1050      1050    4            }
     1051      1051    3        #ifndef NOPP
     1052      1052    3          if (ch > 0370) {
     1053      1053    4             if (ch == DBL_POUND) { /* replace DBL_POUND by '##' */
     1054      1054    5                 str[pos++] = '#';
     1055      1055    5                 if (pos == str_size) str = Srealloc(str, str_size <<= 1);
     1056      1056    5                 ch = '#';
     1057      1057    5             }
     1058      1058    4             else if (ch == SGL_POUND) { /* replace it by '#' */
     1059      1059    5                 ch = '#';
     1060      1060    5             }
     1061      1061    4             else { /* drop special characters */
     1062      1062    5                 LoadMapChar(ch);
     1063      1063    5                 continue;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=30 
     1064      1064    5             }
     1065      1065    4          }
     1066      1066    3        #endif NOPP
     1067      1067    3            str[pos++] = ch;
     1068      1068    3            if (pos == str_size)
     1069      1069    3               str = Srealloc(str, (unsigned) (str_size += RSTRSIZE));
     1070      1070    3            LoadMapChar(ch);
     1071      1071    3         }
     1072      1072    2         do {
     1073      1073    3           LoadChar(ch);
     1074      1074    3         } while (class(ch) == STSKIP);
     1075      1075    2        }
     1076      1076    1         PushBack();
     1077      1077    1         str[pos++] = '\0'; /* for filenames etc. */
     1078      1078    1         *plen = pos;
     1079      1079    1         return str;
     1080      1080    1        }
     1081      1081
     1082      1082             int
     1083      1083             quoted(ch)
     1084      1084              register int ch;
     1085      1085             {
     1086      1086    1         /* quoted() replaces an escaped character sequence by the
     1087      1087    1            character meant.
     1088      1088    1         */
     1089      1089    1         /* first char after backslash already in ch */
     1090      1090    1         if (!is_oct(ch)) {      /* a quoted char */
     1091      1091    2            switch (ch) {
     1092      1092    3            case 'n':
     1093      1093    3               ch = '\n';
     1094      1094    3               break;
     1095      1095    3            case 't':
     1096      1096    3               ch = '\t';
     1097      1097    3               break;
     1098      1098    3            case 'b':
     1099      1099    3               ch = '\b';
     1100      1100    3               break;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=31 
     1101      1101    3            case 'r':
     1102      1102    3               ch = '\r';
     1103      1103    3               break;
     1104      1104    3            case 'f':
     1105      1105    3               ch = '\f';
     1106      1106    3               break;
     1107      1107    3              case 'a':
     1108      1108    3               ch = '\a';         ch = '\007';
     1109      1109    3               break;
     1110      1110    3              case 'v':
     1111      1111    3               ch = '\v';         ch = '\013';
     1112      1112    3               break;
     1113      1113    3              case 'x':
     1114      1114    3        #if 0
     1115      1115   *S*              { register int hex=0, i;
     1116      1116   *S*                LoadChar(ch);
     1117      1117   *S*                hex = val_in_base(ch,16);
     1118      1118   *S*                if ( hex >= 0 ) {
     1119      1119   *S*                  LoadChar(ch);
     1120      1120   *S*                  i = val_in_base(ch,16);
     1121      1121   *S*                  if (i >= 0)
     1122      1122   *S*                     hex = hex*16 + i;
     1123      1123   *S*                     else PushBack();
     1124      1124   *S*                }
     1125      1125   *S*                else PushBack();
     1126      1126   *S*                ch = hex;
     1127      1127   *S*              }
     1128      1128   *S*              break;
     1129      1129   *S*       #endif
     1130      1130    3               {
     1131      1131    4                 register int hex = 0;
     1132      1132    4                 LoadChar(ch);
     1133      1133    4                 while (isxdigit(ch)) {
     1134      1134    5                    hex = hex*16 + val_in_base(ch, 16);
     1135      1135    5                    LoadChar(ch);
     1136      1136    5                 };
     1137      1137    4                 PushBack();
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=32 
     1138      1138    4                 ch = hex;
     1139      1139    4               }
     1140      1140    3               break;
     1141      1141    3            }
     1142      1142    2         }
     1143      1143    1         else {            /* a quoted octal */
     1144      1144    2            register int oct = 0, cnt = 0;
     1145      1145    2
     1146      1146    2            do {
     1147      1147    3               oct = oct*8 + (ch-'0');
     1148      1148    3               LoadChar(ch);
     1149      1149    3            } while (is_oct(ch) && ++cnt < 3);
     1150      1150    2            PushBack();
     1151      1151    2            ch = oct;
     1152      1152    2         }
     1153      1153    1         if (ch & 0400)
     1154      1154    1            lexwarning("nine bit chars are non-portable");
     1155      1155    1         return ch&0777;
     1156      1156    1        }
     1157      1157
     1158      1158             /* provisional */
     1159      1159             int
     1160      1160             val_in_base(ch, base)
     1161      1161              register int ch;
     1162      1162             {
     1163      1163    1         int t = ch - '0';
     1164      1164    1         return
     1165      1165    1            is_dig(ch) ? ((base != 8) ? t : (t < 8? t : -2))
     1166      1166    1            : base != 16 ? -3
     1167      1167    1            : is_hex(ch) ? (ch - 'a' + 10) & 017
     1168      1168    1            : -1;
     1169      1169    1        }
     1170      1170
     1171      1171             #define TRICASE(A,B) case A: ch = B; break
     1172      1172
     1173      1173             int  trigraph() {   /*  a '?' has already been seen  */
     1174      1174    1         register char ch;
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=33 
     1175      1175    1
     1176      1176    1         LoadChar(ch);
     1177      1177    1         if(ch != '?') {
     1178      1178    2           PushBack();
     1179      1179    2           return '?';
     1180      1180    2         }
     1181      1181    1         LoadChar(ch);
     1182      1182    1         switch (ch)  {
     1183      1183    2
     1184      1184    2          TRICASE('=','#');
     1185      1185    2          TRICASE('(','[');
     1186      1186    2          TRICASE('/','\\');
     1187      1187    2          TRICASE(')',']');
     1188      1188    2          TRICASE('\'','^');
     1189      1189    2          TRICASE('<','{');
     1190      1190    2          TRICASE('!','|');
     1191      1191    2          TRICASE('>','}');
     1192      1192    2          TRICASE('-','~');
     1193      1193    2
     1194      1194    2         default:
     1195      1195    2          PushBack(); /* Current switch Character */
     1196      1196    2          PushBack(); /* Second character ('?') of trigraph */
     1197      1197    2          ch = '?';   /* Return character that started it all! */
     1198      1198    2          break;
     1199      1199    2         }
     1200      1200    1         return ch;
     1201      1201    1        }
     1202      1202
     1203      1203
     1204      1204             #ifdef FLOATOPT
     1205      1205
     1206      1206             /**
     1207      1207                  NAME:       doublestr(double d)
     1208      1208                  PURPOSE:    To return a "double" value as a string.
     1209      1209                  DESCRIPTION:
     1210      1210                     This function returns the integer length
     1211      1211                     of the machine specific representation of
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=34 
     1212      1212                     a double constant (without trailing 0 bytes).
     1213      1213                     The input is a double value.
     1214      1214
     1215      1215             **/
     1216      1216
     1217      1217             int
     1218      1218             doublestrlen(d)
     1219      1219               union {
     1220      1220    1             double v;
     1221      1221    1             int    i[2];
     1222      1222    1             } d;
     1223      1223             {
     1224      1224    1          int   r, j;
     1225      1225    1
     1226      1226    1
     1227      1227    1        /* Determine length of double less trailing zeroes */
     1228      1228    1          (r = 1), j = d.i[0];
     1229      1229    1          if (d.i[1])
     1230      1230    1             (r = 5), j = d.i[1];
     1231      1231    1          if (j & 0777777)
     1232      1232    1             r += 2 + ((j & 0777) > 0);    /* 3,4, 7,8 */
     1233      1233    1          else r += (j & 0777000000) > 0;  /* 1,2, 5,6 */
     1234      1234    1
     1235      1235    1
     1236      1236    1          return r;
     1237      1237    1        }
     1238      1238
     1239      1239             #endif
---  Include file information  ---

   alloc:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$idfsize:h.:ZBC3TOU. is referenced
   zbc$numsize:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$strsize:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$LLlex:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=35 
   zbc$input:h.:ZBC3TOU. is referenced
   inp_pkg:spec.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$LLlex:h.:ZBC3TOU. is referenced
   zbc$file_info:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$class:h.:ZBC3TOU. is referenced
   zbc$assert:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$macro:h.:ZBC3TOU. is referenced
   zbc$textsize:h.:ZBC3TOU. is referenced
   string:h.:LIB_E05. is referenced

No diagnostics were issued in the file zbc$LLlex:c.:ZBC3TSI
