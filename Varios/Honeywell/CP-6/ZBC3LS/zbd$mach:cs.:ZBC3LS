

12:19 AUG 20 '97 zbd$mach:c.:ZBC3TSI                                       1    
    1      /*M* mach:c   -- machine specific tailoring for CP-6          */
    2
    3      #include <codegen:h>   /* defines Z... as number values. */
    4      #include <zb_cp6_object:h>
    5
    6      #define ATW(n) (((n)+3)/4)
    7      #define ATD(n) (((n)+7)/8*8)
    8
    9      int main_func = 0;
   10      int have_auto_structure = 0;
   11
   12      /*
   13       * machine dependent back end routines for the L66
   14       */
   15
   16      con_part(sz,w) register sz; word w; {
   17
   18              while (part_size % sz)
   19                      part_size++;
   20              if (part_size == 4)
   21                      part_flush();
   22              if (sz == 1) {
   23                      w &= 0x1FF;
   24                      w <<= 9*(3-part_size);
   25                      part_word |= w;
   26              } else if (sz == 2) {
   27                      w &= 0x3FFFF;
   28                      if (part_size == 0)
   29                              w <<= 18;
   30                      part_word |= w;
   31              } else {
   32                      assert(sz == 4);
   33                      part_word = w;
   34              }
   35              part_size += sz;
   36      }
   37
12:19 AUG 20 '97 zbd$mach:c.:ZBC3TSI                                       2    
   38      con_mult(sz) word sz; {
   39
   40              if (sz != 4)
   41                      fatal("bad icon/ucon size");
   42              fprintf(codefile, "%d %s\n", ZDEC, str);
   43      }
   44
   45      con_float() {
   46
   47              if (argval==4)
   48                 fprintf(codefile, "%d %s\n", ZFLOAT, str);
   49              else if (argval==8)
   50                 fprintf(codefile, "%d %s\n", ZDFLOAT, str);
   51              else
   52                 fatal("bad fcon size");
   53      }
   54
   55      #ifdef REGVARS
   56
   57      regscore(off,size,typ,score,totyp)
   58              long off;
   59      {
   60              if (score == 0) return -1;
   61              switch(typ) {
   62                      case reg_float:
   63                              return -1;
   64                      case reg_pointer:
   65                              if (size != 4 || totyp != reg_pointer) return -1;
   66                              score *= 2;
   67                              break;
   68                      case reg_loop:
   69                              score += 5;
   70                              /* fall through .. */
   71                      case reg_any:
   72                              if (size != 4 || totyp == reg_pointer) return -1;
   73                              break;
   74              }
12:19 AUG 20 '97 zbd$mach:c.:ZBC3TSI                                       3    
   75              if (off >= 0) {
   76                      /* parameters must be initialized with an instruction
   77                       * like "ldg q,0,dl", which costs 1 word.
   78                       */
   79                      score -= 1;
   80              }
   81              score -= 1; /* take save/restore into account */
   82              return score;
   83      }
   84      struct regsav_t {
   85              char    *rs_reg;        /* e.g. "a3" or "d5" */
   86              long    rs_off;         /* offset of variable */
   87              int     rs_size;        /* 2 or 4 bytes */
   88      } regsav[9];
   89
   90
   91      int regnr;
   92
   93      i_regsave()
   94      {
   95              regnr = 0;
   96      }
   97
   98      f_regsave()
   99      {
  100              register struct regsav_t *p;
  101
  102              for (p = regsav; p < &regsav[regnr]; p++) {
  103                      fprintf(codefile," pushg %s\n",p->rs_reg);
  104              }
  105              /* initialise register-parameters */
  106              for (p = regsav; p < &regsav[regnr]; p++) {
  107                      if (p->rs_off >= 0) {
  108                              fprintf(codefile, "%d %s,%ld,,%d)\n",
  109                                      ZLDG,
  110                                      p->rs_reg,
  111                                      p->rs_off/4+4,
12:19 AUG 20 '97 zbd$mach:c.:ZBC3TSI                                       4    
  112                                      ZP2);
  113                      }
  114              }
  115      }
  116
  117
  118      regsave(str,off,size)
  119              char *str;
  120              long off;
  121      {
  122         return;  /* until we REALLY have reg vars! */
  123              assert (regnr < 9);
  124              regsav[regnr].rs_reg = str;
  125              regsav[regnr].rs_off = off;
  126              regsav[regnr++].rs_size = size;
  127              fprintf(codefile, "*Local %ld into %s\n",off,str);
  128      }
  129
  130      regreturn()
  131      {
  132              register struct regsav_t *p;
  133
  134              for (p = &regsav[regnr-1]; p >= regsav; p--) {
  135                      fprintf(codefile," popg %s\n",p->rs_reg);
  136              }
  137              if (main_func)
  138                   fprintf(codefile, "%d _XBI_MARET\n", ZTSX2);
  139              else fprintf(codefile, "%d _XBC_FARET\n", ZTSX2);
  140      }
  141
  142      #endif
  143
  144      prolog(nlocals) FULL nlocals;
  145      {
  146              int nargs; char aargs;
  147              extern int zb_auto_info[8];
  148
12:19 AUG 20 '97 zbd$mach:c.:ZBC3TSI                                       5    
  149              main_func = 0;
  150              /* setting actual temp value used. */
  151              zb_auto_info[4] = ATD(zb_auto_info[3]) + ATD(nlocals);
  152              zb_auto_info[5] = zb_auto_info[6] = zb_auto_info[4];
  153              zb_auto_info[0] = zb_auto_info[4];
  154              if (strcmp(argstr,"main") == 0) main_func++;
  155              nargs = ((zb_auto_info[3]+3)>>2)-4;
  156              aargs = (nargs < 6)? '0'+nargs : 'N';
  157              fprintf(codefile, "%d _XBC_AUTO_%c\n%d $AUTOSIZE,%d\n",
  158                                      ZTSX0, aargs, ZHALF, nargs);
  159      }
  160
  161      end_of_function()
  162      {
  163            extern int zb_auto_info[8];
  164            fprintf(codefile, "%d $AUTOSIZE,%d\n", ZEQU, (zb_auto_info[6]+7)/8*2);
  165      }
  166
  167      mes(type) word type;
  168      {
  169        int argt;
  170
  171        part_flush();
  172        switch ( (int)type ) {
  173        case ms_ext:
  174            for (;;) {
  175               argt = getarg( ptyp(sp_cend) | ptyp(sp_pnam) | sym_ptyp );
  176               if (argt == sp_cend) return;
  177               strarg(argt);
  178               fprintf(codefile, "%d %s\n", ZERROR, argstr);
  179               break;
  180            }
  181        case ms_fun:
  182           {  /*  mes 16,<str>,<cst1>,<cst2>,<cst3>,<cst4> */
  183            int i;
  184            extern int zb_auto_info[8], zb_temp_info[10];
  185            zb_auto_info[0] = zb_auto_info[1] = zb_auto_info[2] = 0;
12:19 AUG 20 '97 zbd$mach:c.:ZBC3TSI                                       6    
  186            zb_auto_info[3] = zb_auto_info[4] = zb_auto_info[5] = 0;
  187            zb_auto_info[6] = zb_auto_info[7] = 0;
  188            if ( getarg( ptyp(sp_cend) | ptyp(sp_scon) ) == sp_cend)
  189              return;
  190            fprintf(codefile, "%d %s,", PS_FUN_OP, str);
  191            for (i=0 ;; ) {
  192               argt = getarg( ptyp(sp_cend) | cst_ptyp );
  193               if (argt == sp_cend) break;
  194               if (i<6)
  195                 zb_auto_info[i++] = argval;
  196            }
  197            fprintf(codefile,"%d,%d,%d,%d,%d\n",zb_auto_info[0],
  198                    zb_auto_info[1],zb_auto_info[2],
  199                    zb_auto_info[3],zb_auto_info[4]           );
  200            zb_auto_info[4] = ATD(zb_auto_info[3]) + ATD(zb_auto_info[4]);
  201            zb_auto_info[5] = zb_auto_info[6] = zb_auto_info[4];
  202            zb_temp_info[0] = zb_auto_info[4];
  203            return;
  204           }
  205        case ms_stmt:
  206           {  /*  mes 17,<cst1>,<cst2>,<cst3>              */
  207              int stmt[3], i;
  208              stmt[0] = stmt[1] = stmt[2] = 0;
  209              for ( i=0 ;; i++ ) {
  210                 argt = getarg( ptyp(sp_cend) | cst_ptyp );
  211                 if (argt == sp_cend) break;
  212                 if (i<4) stmt[i] = argval;
  213              }
  214              fprintf(codefile, "%d %d,%d,%d\n", PS_STMT_OP,
  215                       stmt[0], stmt[1], stmt[2]           );
  216              return;
  217           }
  218        case ms_lbl:
  219           {  /*  mes  18,<cst1>,<cst2>,<str>                    */
  220              int lineno[2], i;
  221              lineno[0] = lineno[1] = 0;
  222              for (i = 0; i < 2; ++i)   {
12:19 AUG 20 '97 zbd$mach:c.:ZBC3TSI                                       7    
  223                 argt = getarg( ptyp(sp_cend) | cst_ptyp );
  224                 if (argt == sp_cend) return;
  225                 lineno[i] = argval;
  226              }
  227              argt = getarg( ptyp(sp_cend) | str_ptyp );
  228              if (argt == sp_cend) return;
  229              fprintf(codefile, "%d %d,%d,%s\n", PS_LBL_OP, lineno[0], lineno[1], str);
  230              while(getarg(any_ptyp) != sp_cend);
  231              return;
  232           }
  233        case ms_blk:
  234           {  /*  mes 19,<cst1>,<cst2>,<cst3>                    */
  235              int blk[4], i;
  236              blk[0] = blk[1] = blk[2] = blk[3] = 0;
  237              for ( i = 0 ;; i++ ) {
  238                 argt = getarg( ptyp(sp_cend) | cst_ptyp );
  239                 if (argt == sp_cend) break;
  240                 if (i < 4)
  241                    blk[i] = argval;
  242              }
  243              fprintf(codefile, "%d %d,%d,%d,%d\n",PS_BLK_OP,blk[0],blk[1],blk[2],blk[3]);
  244              return;
  245           }
  246        case ms_var:
  247           {  /*  mes 20,<str1>,<str2>,<cst1>,<cst2>,<cst3>,...,<cstn> */
  248              static int auto_struct = 0;
  249              int decl[10], i, j = 0;
  250              getarg(ptyp(sp_scon));
  251              fprintf(codefile, "%d %s", PS_VAR_OP, str);
  252              getarg(ptyp(sp_scon));
  253              fprintf(codefile,",%s",str);
  254              for ( i=0 ;;)  {
  255                 argt = getarg( ptyp(sp_cend) | cst_ptyp );
  256                 if (argt == sp_cend) break;
  257                 decl[i++] = argval;
  258                 if (i > 9)  {
  259                    if (decl[4]==STRUCTURE_DATATYPE)
12:19 AUG 20 '97 zbd$mach:c.:ZBC3TSI                                       8    
  260                       auto_struct = (decl[3]==AUTO_ADDRTYPE);
  261                    if ( j == 0 && decl[7] < 0 &&
  262                          (( decl[3]==AUTO_ADDRTYPE || (auto_struct && decl[3]==FIELD_ADDRTYPE)) ||
  263                             (decl[2] > 0 && decl[3] == 5 && have_auto_structure)))
  264                       decl[7] = zb_auto_info[4] + decl[7];
  265                    if (j == 0 && decl[2] == 0) {
  266                      if(decl[4] == 17 && decl[3] == 2) {
  267                        have_auto_structure = 1; }
  268                      else {
  269                        have_auto_structure = 0; }
  270                    }
  271                    j++;
  272                    fprintf(codefile,",%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
  273                       decl[0],decl[1],decl[2],decl[3],decl[4],
  274                       decl[5],decl[6],decl[7],decl[8],decl[9]         );
  275                    i = 0;
  276                 }
  277              }
  278              for (j=0 ; j<i ; )   fprintf(codefile,",%d",decl[j++]);
  279              fprintf(codefile,"\n");
  280              return;
  281           }
  282
  283      case ms_ctln:
  284         {  /*  mes 21,<str>                   */
  285           if (getarg( ptyp(sp_cend) | ptyp(sp_scon)) == sp_cend)
  286              return;
  287           fprintf(codefile, "%d %s\n", PS_CTLN_OP, str);
  288           getarg( ptyp(sp_cend) );
  289           break;
  290         }
  291
  292      case ms_sfun:
  293         {  /*  mes 22,<str>,<str>,<str>,...   */
  294           if (getarg( ptyp(sp_cend) | ptyp(sp_scon) ) != sp_cend)  {
  295              fprintf(codefile, "%d %s", PS_SFUN_OP, str);
  296
12:19 AUG 20 '97 zbd$mach:c.:ZBC3TSI                                       9    
  297              while (getarg( ptyp(sp_cend) | ptyp(sp_scon) ) != sp_cend)
  298                 fprintf(codefile, ",%s", str);
  299
  300              fprintf(codefile,"\n");
  301           }
  302           break;
  303         }
  304        case ms_rfun:
  305           {  /*  mes 23,<str>,<cst1>,<cst2>,<cst3> */
  306            int i;
  307            int vals[3];
  308            vals[0] = vals[1] = vals[2] = 0;
  309            if ( getarg( ptyp(sp_cend) | ptyp(sp_scon) ) == sp_cend)
  310              return;
  311            fprintf(codefile, "%d %s,", PS_RFUN_OP, str);
  312            for (i=0 ;; ) {
  313               argt = getarg( ptyp(sp_cend) | cst_ptyp );
  314               if (argt == sp_cend) break;
  315               if (i<3)
  316                 vals[i++] = argval;
  317            }
  318            fprintf(codefile,"%d,%d,%d\n",vals[0], vals[1], vals[2]);
  319            return;
  320           }
  321        default:
  322            while ( getarg(any_ptyp) != sp_cend );
  323            break;
  324        }
  325      }

