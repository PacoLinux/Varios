

CC.C03    File=zbn$hall:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             #ifndef NORCSID
        6         6             static char rcsid[]= "$Header: hall.c,v 0.3 87/03/09 19:00:46 ceriel Exp $";
        7         7             #endif
        8         8
        9         9             #include "assert:h"
       10        10             #include "param:h"
       11        11             #include "set:h"
       12        12             #include <stdio:h>
       13        13
       14        14             /*
       15        15              * This file implements the marriage thesis from Hall.
       16        16              * The thesis says that given a number, say N, of subsets from
       17        17              * a finite set, it is possible to create a set with cardinality N,
       18        18              * that contains one member for each of the subsets,
       19        19              * iff for each number, say M, of subsets from 2 to N the union of
       20        20              * each M-tuple sets has cardinality >= M.
       21        21              *
       22        22              * So what, you might say. As indeed I did.
       23        23              * But this is actually used here to check the possibility of each
       24        24              * code rule. If a code rule has a number of token_sets in the with
       25        25              * clause and a number of properties in the uses rule it must be
       26        26              * possible to do this from an empty fakestack. Hall helps.
       27        27              */
       28        28
       29        29             #define MAXHALL (TOKPATMAX+MAXALLREG)
       30        30             short hallsets[MAXHALL][SETSIZE];
       31        31             int nhallsets= -1;
       32        32             int hallfreq[MAXHALL][2];
       33        33
       34        34             hallverbose() {
       35        35    1         register i;
       36        36    1         register max;
CC.C03    File=zbn$hall:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37    1
       38        38    1         fprintf(stderr,"Table of hall frequencies\n   #   pre   post\n");
       39        39    1         for (max=MAXHALL-1;hallfreq[max][0]==0 && hallfreq[max][1]==0;max--)
       40        40    1            ;
       41        41    1         for (i=0;i<=max;i++)
       42        42    1            fprintf(stderr,"%3d%6d%6d\n",i,hallfreq[i][0],hallfreq[i][1]);
       43        43    1        }
       44        44
       45        45             inithall() {
       46        46    1
       47        47    1         assert(nhallsets == -1);
       48        48    1         nhallsets=0;
       49        49    1        }
       50        50
       51        51             nexthall(sp) register short *sp; {
       52        52    1         register i;
       53        53    1
       54        54    1         assert(nhallsets>=0);
       55        55    1         for(i=0;i<SETSIZE;i++)
       56        56    1            hallsets[nhallsets][i] = sp[i];
       57        57    1         nhallsets++;
       58        58    1        }
       59        59
       60        60             card(sp) register short *sp; {
       61        61    1         register sum,i;
       62        62    1
       63        63    1         sum=0;
       64        64    1         for(i=0;i<8*sizeof(short)*SETSIZE;i++)
       65        65    1            if (BIT(sp,i))
       66        66    1               sum++;
       67        67    1         return(sum);
       68        68    1        }
       69        69
       70        70             checkhall() {
       71        71    1
       72        72    1         assert(nhallsets>=0);
       73        73    1         if (!hall())
CC.C03    File=zbn$hall:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74    1            error("Hall says: \"You can't have those registers\"");
       75        75    1        }
       76        76
       77        77             hall() {
       78        78    1         register i,j,k;
       79        79    1         int ok;
       80        80    1
       81        81    1         hallfreq[nhallsets][0]++;
       82        82    1         /*
       83        83    1          * If a set has cardinality >= nhallsets it can never be the cause
       84        84    1          * of the hall algorithm failing. So it can be thrown away.
       85        85    1          * But then nhallsets is less, so this step can be re-applied.
       86        86    1          */
       87        87    1
       88        88    1         do {
       89        89    2            ok = 0;
       90        90    2            for(i=0;i<nhallsets;i++)
       91        91    2               if (card(hallsets[i])>=nhallsets) {
       92        92    3                  for (j=i+1;j<nhallsets;j++)
       93        93    3                     for(k=0;k<SETSIZE;k++)
       94        94    3                        hallsets[j-1][k] =
       95        95    3                           hallsets[j][k];
       96        96    3                  nhallsets--;
       97        97    3                  ok = 1;
       98        98    3                  break;
       99        99    3               }
      100       100    2         } while (ok);
      101       101    1
      102       102    1         /*
      103       103    1          * Now all sets have cardinality < nhallsets
      104       104    1          */
      105       105    1
      106       106    1         hallfreq[nhallsets][1]++;
      107       107    1         ok=recurhall(nhallsets,hallsets);
      108       108    1         nhallsets = -1;
      109       109    1         return(ok);
      110       110    1        }
CC.C03    File=zbn$hall:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      111       111
      112       112             recurhall(nhallsets,hallsets) short hallsets[][SETSIZE]; {
      113       113    1         short copysets[MAXHALL][SETSIZE];
      114       114    1         short setsum[SETSIZE];
      115       115    1         register i,j,k,ncopys;
      116       116    1
      117       117    1         /*
      118       118    1          * First check cardinality of union of all
      119       119    1          */
      120       120    1         for(k=0;k<SETSIZE;k++)
      121       121    1            setsum[k]=0;
      122       122    1         for(i=0;i<nhallsets;i++)
      123       123    1            unite(hallsets[i],setsum);
      124       124    1         if (card(setsum)<nhallsets)
      125       125    1            return(0);
      126       126    1         /*
      127       127    1          * Now check the hall property of everything but one set,
      128       128    1          * for all sets
      129       129    1          */
      130       130    1         for(i=0;i<nhallsets;i++) {
      131       131    2            ncopys=0;
      132       132    2            for(j=0;j<nhallsets;j++) if (j!=i) {
      133       133    3               for(k=0;k<SETSIZE;k++)
      134       134    3                  copysets[ncopys][k] = hallsets[j][k];
      135       135    3               ncopys++;
      136       136    3            }
      137       137    2            assert(ncopys == nhallsets-1);
      138       138    2            if (!recurhall(ncopys,copysets))
      139       139    2               return(0);
      140       140    2         }
      141       141    1         return(1);
      142       142    1        }
      143       143
      144       144             unite(sp,into) register short *sp,*into; {
      145       145    1         register i;
      146       146    1
      147       147    1         for(i=0;i<SETSIZE;i++)
CC.C03    File=zbn$hall:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      148       148    1            into[i] |= sp[i];
      149       149    1        }
      150       150
      151       151             /*
      152       152              * Limerick (rot13)
      153       153              *
      154       154              * N zngurzngvpvna anzrq Unyy
      155       155              * Unf n urknurqebavpny onyy,
      156       156              *  Naq gur phor bs vgf jrvtug
      157       157              *  Gvzrf uvf crpxre'f, cyhf rvtug
      158       158              * Vf uvf cubar ahzore -- tvir uvz n pnyy..
      159       159              */
      160       160
---  Include file information  ---

   zbn$assert:h.:ZBC3TOU. is referenced
   zbn$param:h.:ZBC3TOU. is referenced
   zbm$local:h.:ZBC3TOU. is referenced
   zbn$set:h.:ZBC3TOU. is referenced
   stdio:h.:LIB_E05. is referenced

No diagnostics were issued in the file zbn$hall:c.:ZBC3TSI
