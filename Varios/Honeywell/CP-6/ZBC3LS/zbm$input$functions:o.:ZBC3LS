
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:1    
        1        1        /*M*     ZB_INPUT$FUNCTIONS      */
        2        2        /*T*/
        3        3        /*P*     NAME:       ZB_INPUT$FUNCTIONS
        4        4                 PURPOSE:    Uses XUU services to read input of source
        5        5                 DESCRIPTION:This does your basic files services of reading
        6        6                             data using the fast sequential I/O of
        7        7                             XUU services
        8        8        */
        9        9
       10       10        /*F*     NAME:       ZB_INPUT_OPEN
       11       11                 PURPOSE:    Opens files using XUU services
       12       12                 DESCRIPTION:This routine opens a file using XUU services
       13       13                             and allows the capability to use XUU's fastio read services
       14       14        */
       15       15        /*D*     NAME:    ZB_INPUT_OPEN
       16       16                 CALL:    CALL ZB_INPUT_OPEN (FILEINFO)
       17       17                 INPUT:
       18       18                          FILEINFO.FILENAME$   - If the file is to be opened as
       19       19                                          an include file, it contains the name of the file.
       20       20                          FILEINFO.FILETYPE    - Type of file it should be opened as:
       21       21                                                   =1    Open as a base file
       22       22                                                   =2    Open a Base and update file
       23       23                                                   =3    Open as an include file
       24       24                 OUTPUT:
       25       25                          FILEINFO.OPEN_FLAG   - If the file is opened ok it is
       26       26                                                 set to a 1 else it is a 0.
       27       27                          FILEINFO.LEVEL       - If the file was an include file,
       28       28                                           it contains the nesting level of the include file
       29       29                 DESCRIPTION:
       30       30                    Check and see what type of file is to be opened. If it is an
       31       31                    include file create an FPT that points to the filename passed
       32       32                    Open the file using the fast sequential I/O of XUU. If
       33       33                    everything up to this point is ok, set the OPEN_FLAG parameter
       34       34                    and the nesting of the include block (if neccessary).
       35       35        */
       36       36
       37       37        ZB_INPUT_OPEN: proc(FILEINFO);
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:2    
       38       38
       39       39        %include CP_6;
       40     5598        %include CP_6_SUBS;
       41     6138        %include XU_MACRO_C;
       42     9244        %include XU_PERR_C;
       43     9435        %include B_ERRORS_C;
       44    10562        %include zbm$input$types_c;
       45    10611
       46    10612        %ZB_FILEINFO (NAME=FILEINFO,STCLASS="");
       47    10625
       48    10626    1   dcl   M$DO     dcb;
       49    10627    1   dcl   M$SI     dcb;
       50    10628    1   dcl   M$UI     dcb;
       51    10629    1   dcl   M$OU     dcb;
       52    10630    1   dcl   M$LO     dcb;
       53    10631    1   dcl   M$SI$    ptr;
       54    10632    1   dcl   M$UI$    ptr;
       55    10633    1   dcl   M$OU$    ptr;
       56    10634    1   dcl   ouname$  ptr;
       57    10635    1   dcl   POS      sbin;
       58    10636    1   dcl   FNAME    char(POS)   based;
       59    10637
       60    10638
       61    10639        %XUU$ENTRY;
       62    10644        %XUU$ALLOC_TYPES;
       63    10667        %F$DCB;
       64    10724
       65    10725        %XUU_PARAM(   FPTN        =  XUU_PARAM,
       66    10726                      STCLASS     =  "STATIC SYMDEF",
       67    10727                      DCB         =  "dcbnum(M$LO)",
       68    10728                      OPT_UI      =  NO,
       69    10729                      BLANK_FILL  =  YES,
       70    10730                      ALLOCATE    =  ZB$ALLOCATE,
       71    10731                      RELEASE     =  ZB$RELEASE,
       72    10732                      FAST_BASE   = YES,
       73    10733                      FAST_UPDATE = YES,
       74    10734                      FAST_INCLUDE= YES,
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:3    
       75    10735                      BASE        =  YES);
       76    11170
       77    11171         %FPT_CLOSE (FPTN = CLOSE_SI,
       78    11172                     STCLASS = "STATIC SYMDEF",
       79    11173                     DCB     = M$SI);
       80    11215
       81    11216         %FPT_OPEN  (FPTN = OPEN_TEST_UI_CONST,
       82    11217                     STCLASS = CONSTANT,
       83    11218                     DCB = M$UI,
       84    11219                     TEST = YES);
       85    11328
       86    11329         %FPT_OPEN  (FPTN = OPEN_TEST_UI,
       87    11330                     STCLASS = "");
       88    11439
       89    11440         %FPT_OPEN  (FPTN = OPEN_TEST_OU_CONST,
       90    11441                     STCLASS = CONSTANT,
       91    11442                     DCB = M$OU,
       92    11443                     TEST = YES);
       93    11552
       94    11553         %FPT_OPEN  (FPTN = OPEN_TEST_OU,
       95    11554                     STCLASS = "");
       96    11663         %VLP_NAME  (FPTN = VLP_OUNAME,
       97    11664                     LEN = 31);
       98    11691        %FPT_OPEN(    FPTN        = FPT_XUU_OPEN,
       99    11692                      STCLASS     = "");
      100    11801
      101    11802        %FPT_OPEN(    FPTN     = FPT_XUU_OPEN_CONST,
      102    11803                      STCLASS  = CONSTANT,
      103    11804                      ASN      = FILE,
      104    11805                      NAME     = FPT_XUU_OPEN_NAME,
      105    11806                      ACCT     = FPT_XUU_OPEN_ACCT,
      106    11807                      PASS     = FPT_XUU_OPEN_PASS,
      107    11808                      WSN      = FPT_XUU_OPEN_WSN,
      108    11809                      SN       = FPT_XUU_OPEN_SN);
      109    11918
      110    11919        %FPT_FID(     FPTN        = FPT_XUU_FID,
      111    11920                      STCLASS     = STATIC,
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:4    
      112    11921                      NAME        = FPT_XUU_OPEN_NAME,
      113    11922                      ACCT        = FPT_XUU_OPEN_ACCT,
      114    11923                      PASS        = FPT_XUU_OPEN_PASS,
      115    11924                      WSN         = FPT_XUU_OPEN_WSN,
      116    11925                      SN          = FPT_XUU_OPEN_SN,
      117    11926                      SNAME       = YES,
      118    11927                      SACCT       = YES,
      119    11928                      SPASS       = YES,
      120    11929                      SWSN        = YES,
      121    11930                      SSN         = YES);
      122    11953
      123    11954        %VLP_NAME(    FPTN        = FPT_XUU_OPEN_NAME,
      124    11955                      LEN         = 31);
      125    11982
      126    11983        %VLP_ACCT(    FPTN        = FPT_XUU_OPEN_ACCT);
      127    11996
      128    11997        %VLP_PASS(    FPTN        = FPT_XUU_OPEN_PASS);
      129    12010
      130    12011        %VLP_WSN(     FPTN        = FPT_XUU_OPEN_WSN);
      131    12024
      132    12025        %VLP_SN(      FPTN        = FPT_XUU_OPEN_SN);
      133    12038
      134    12039    1   dcl   ZB$ALLOCATE    entry(2);
      135    12040    1   dcl   ZB$RELEASE     entry(1);
      136    12041    1   dcl   Z_RETURN_INT   entry(1);
      137    12042
      138    12043    1      FPT_XUU_OPEN = FPT_XUU_OPEN_CONST;
      139    12044    1      FPT_XUU_OPEN.V_ = VECTOR(FPT_XUU_OPEN.V);
      140    12045    1      FPT_XUU_FID.ASN_ = VECTOR(FPT_XUU_OPEN.V.ASN#);
      141    12046    1      FPT_XUU_FID.RES_ = VECTOR(FPT_XUU_OPEN.V.RES#);
      142    12047    1      M$UI$ = dcbaddr(dcbnum(M$UI));
      143    12048    1      M$SI$ = dcbaddr(dcbnum(M$SI));
      144    12049    1      M$OU$ = dcbaddr(dcbnum(M$OU));
      145    12050
      146    12051        /*    Check to see if an account was specified for the M$OU but no
      147    12052              name.  If so use the M$SI name and change a possibly ending :c
      148    12053              to a :o                                                       */
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:5    
      149    12054
      150    12055    1      if ((M$OU$->F$DCB.ASN# = %FILE#) and (M$OU$->F$DCB.NAME#.L = 2) and
      151    12056    1         (substr(M$OU$->F$DCB.NAME#.C,,2) = '*G') and
      152    12057    1         (substr(M$OU$->F$DCB.ACCT#,0,1) ~= ' '))
      153    12058    2      then do;
      154    12059    2         OPEN_TEST_OU = OPEN_TEST_OU_CONST;
      155    12060    2         OPEN_TEST_OU.NAME_ = vector (M$SI$->F$DCB.NAME#);
      156    12061    2         if ((M$SI$->F$DCB.NAME#.L >=2) and
      157    12062    2         (substr(M$SI$->F$DCB.NAME#.C,M$SI$->F$DCB.NAME#.L-2,2) = ':c'))
      158    12063    3         then do;
      159    12064    3            pos = M$SI$->F$DCB.NAME#.L;
      160    12065    3            substr (VLP_OUNAME.NAME#, 0, pos-1) = substr (M$SI$->F$DCB.NAME#.C, 0, pos-
             12065                     1);
      161    12066    3            substr (VLP_OUNAME.NAME#, pos-1, 1) = 'o';
      162    12067    3            VLP_OUNAME.L# = pos;
      163    12068    3            OPEN_TEST_OU.NAME_ = vector (VLP_OUNAME);
      164    12069    3         end;
      165    12070    3         call M$OPEN (OPEN_TEST_OU) whenaltreturn do; ; end;
      166    12071    2      end;
      167    12072
      168    12073    1      FPT_XUU_OPEN.V.FUN# = %IN#;
      169    12074
      170    12075    2      if (FILEINFO.FILETYPE = %IN_BASE) then do;
      171    12076    2         XUU_PARAM.FLAGS.BASE# = '1'B;
      172    12077    2         XUU_PARAM.FLAGS.UP_DATE# = '0'B;
      173    12078    2         XUU_PARAM.FLAGS.INCLUDE# = '0'B;
      174    12079    2         XUU_PARAM.FLAGS.OPT_UI# = '0'B;
      175    12080    2        call M$CLOSE (CLOSE_SI);   /* in case C lib opened it */
      176    12081    2         call XUU$OPEN(XUU_PARAM) altret(CRASH_AND_BURN);
      177    12082    2      end; /* if then */
      178    12083    2      else if (FILEINFO.FILETYPE = %IN_UPDATE) then do;
      179    12084    2         XUU_PARAM.FLAGS.BASE# = '1'B;
      180    12085    2         XUU_PARAM.FLAGS.UP_DATE# = '1'B;
      181    12086    2         XUU_PARAM.FLAGS.INCLUDE# = '0'B;
      182    12087    2         if (FILEINFO.OPTUI = 1) then
      183    12088    2            XUU_PARAM.FLAGS.OPT_UI# = '1'B;
      184    12089    2         else
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:6    
      185    12090    2            XUU_PARAM.FLAGS.OPT_UI# = '0'B;
      186    12091    2         call M$CLOSE (CLOSE_SI);   /* in case C lib opened it */
      187    12092    2         if (FILEINFO.LIST_UPDATE = 1) then
      188    12093    2            XUU_PARAM.FLAGS.LU_FIRST# = '1'B;
      189    12094    2         else
      190    12095    2            XUU_PARAM.FLAGS.LU_FIRST# = '0'B;
      191    12096    2         if ((M$UI$->F$DCB.ASN# = %FILE#) and (M$UI$->F$DCB.NAME#.L = 0))
      192    12097    3         then do;
      193    12098    3            OPEN_TEST_UI = OPEN_TEST_UI_CONST;
      194    12099    3            OPEN_TEST_UI.NAME_ = vector (M$SI$->F$DCB.NAME#);
      195    12100    4            call M$OPEN (OPEN_TEST_UI) whenaltreturn do; ; end;
      196    12101    3         end;
      197    12102    2         call XUU$OPEN(XUU_PARAM) altret(CRASH_AND_BURN);
      198    12103    2      end; /* opening base and update files */
      199    12104    2      else do;
      200    12105    2         POS = 128;
      201    12106    2         call index (POS,%binasc(0),FILEINFO.FILENAME$->FNAME);
      202    12107    2         XUU_PARAM.FLAGS.INCLUDE# = '1'B;
      203    12108    2         XUU_PARAM.FLAGS.UP_DATE# = '0'B;
      204    12109    2         XUU_PARAM.FLAGS.BASE#    = '0'B;
      205    12110    2         XUU_PARAM.FLAGS.OPT_UI#  = '0'B;
      206    12111    2         FPT_XUU_FID.TEXTFID_ = VECTOR (substr (FILEINFO.FILENAME$->FNAME,,POS));
      207    12112    2         call M$FID (FPT_XUU_FID) altret (CRASH_AND_BURN);
      208    12113    2         XUU_PARAM.O.FPT_PTR$ = ADDR(FPT_XUU_OPEN);
      209    12114    2         call XUU$OPEN(XUU_PARAM) altret(CRASH_AND_BURN);
      210    12115    2      end; /* opening include file */
      211    12116
      212    12117    1      FILEINFO.OPEN_FLAG = 1;
      213    12118    1      FILEINFO.LEVEL = XUU_PARAM.LEVEL;
      214    12119    1      call Z_RETURN_INT (1);
      215    12120
      216    12121    1   CRASH_AND_BURN:
      217    12122    1      FILEINFO.OPEN_FLAG = 0;
      218    12123    1      call Z_RETURN_INT (0);
      219    12124
      220    12125    1   end ZB_INPUT_OPEN;
      221    12126        %EOD;
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:7    

PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:8    
--  Include file information  --

   zbm$input$types_c.:ZBC3TOU  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
   XU_PERR_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ZB_INPUT_OPEN.

   Procedure ZB_INPUT_OPEN requires 208 words for executable code.
   Procedure ZB_INPUT_OPEN requires 186 words of local(AUTO) storage.

PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:9    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:10   
          MINI XREF LISTING

CLOSE_SI
     11196**DCL     12080<>CALL    12091<>CALL
CLOSE_SI.SN_
     11196**DCL     11196--REDEF
CLOSE_SI.UTL_
     11197**DCL     11197--REDEF
CLOSE_SI.V
     11201**DCL     11196--DCLINIT
CLOSE_SI.V.EXPIRE#
     11211**DCL     11211--REDEF
CLOSE_SI.V.TYPE#
     11209**DCL     11209--REDEF
CLOSE_SI.V.XTNSIZE#
     11206**DCL     11206--REDEF   11208--REDEF
CRASH_AND_BURN
     12122**LABEL   12081--CALLALT 12102--CALLALT 12112--CALLALT 12114--CALLALT
F$DCB.ACCT#
     10684**DCL     12055>>IF
F$DCB.ACTPOS
     10700**DCL     10700--REDEF
F$DCB.ARS#
     10674**DCL     10674--REDEF
F$DCB.ASN#
     10689**DCL     12055>>IF      12096>>IF
F$DCB.ATTR
     10693**DCL     10694--REDEF
F$DCB.BORROW
     10708**DCL     10708--REDEF   10708--REDEF   10708--REDEF
F$DCB.DCBNAME.L
     10722**DCL     10722--IMP-SIZ
F$DCB.EOMCHAR#
     10678**DCL     10678--REDEF
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:11   
F$DCB.FLDID
     10703**DCL     10703--REDEF
F$DCB.FORM$
     10697**DCL     10697--REDEF
F$DCB.FSECT
     10713**DCL     10713--REDEF
F$DCB.FSN#
     10690**DCL     10690--REDEF   10690--REDEF   10691--REDEF
F$DCB.HEADER$
     10696**DCL     10696--REDEF
F$DCB.IXTNSIZE#
     10694**DCL     10694--REDEF
F$DCB.LASTSTA$
     10683**DCL     10683--REDEF
F$DCB.LVL
     10709**DCL     10709--REDEF
F$DCB.NAME#
     10684**DCL     12060--ASSIGN  12099--ASSIGN
F$DCB.NAME#.C
     10684**DCL     10684--REDEF   12055>>IF      12061>>IF      12065>>ASSIGN
F$DCB.NAME#.L
     10684**DCL     12055>>IF      12061>>IF      12061>>IF      12064>>ASSIGN  12096>>IF
F$DCB.NOEOF
     10706**DCL     10706--REDEF
F$DCB.NRECS#
     10695**DCL     10695--REDEF
F$DCB.NRECX
     10714**DCL     10714--REDEF
F$DCB.OHDR
     10706**DCL     10706--REDEF
F$DCB.ORG#
     10689**DCL     10689--REDEF
F$DCB.PRECNO
     10712**DCL     10712--REDEF
F$DCB.RCSZ
     10718**DCL     10718--REDEF
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:12   
F$DCB.RES#
     10685**DCL     10685--REDEF
F$DCB.SETX
     10697**DCL     10697--REDEF
F$DCB.TAB$
     10697**DCL     10697--REDEF
F$DCB.TDA
     10711**DCL     10712--REDEF
F$DCB.WSN#
     10685**DCL     10685--REDEF
FILEINFO
     10613**DCL        37--PROC
FILEINFO.FILENAME$
     10618**DCL     12106>>CALLBLT 12111>>ASSIGN
FILEINFO.FILETYPE
     10617**DCL     12075>>IF      12083>>IF
FILEINFO.LEVEL
     10620**DCL     12118<<ASSIGN
FILEINFO.LIST_UPDATE
     10622**DCL     12092>>IF
FILEINFO.OPEN_FLAG
     10619**DCL     12117<<ASSIGN  12122<<ASSIGN
FILEINFO.OPTUI
     10621**DCL     12087>>IF
FNAME
     10636**DCL     12106>>CALLBLT 12111--ASSIGN
FPT_XUU_FID
     11941**DCL     12112<>CALL
FPT_XUU_FID.ASN_
     11944**DCL     12045<<ASSIGN
FPT_XUU_FID.RES_
     11944**DCL     12046<<ASSIGN
FPT_XUU_FID.TEXTFID_
     11941**DCL     12111<<ASSIGN
FPT_XUU_FID.V
     11945**DCL     11941--DCLINIT
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:13   
FPT_XUU_OPEN
     11757**DCL     12043<<ASSIGN  12113--ASSIGN
FPT_XUU_OPEN.ACSVEH_
     11759**DCL     11760--REDEF
FPT_XUU_OPEN.ALTKEYS_
     11765**DCL     11766--REDEF   11766--REDEF
FPT_XUU_OPEN.HDR_
     11764**DCL     11765--REDEF
FPT_XUU_OPEN.TAB_
     11763**DCL     11764--REDEF
FPT_XUU_OPEN.UHL_
     11757**DCL     11758--REDEF   11758--REDEF
FPT_XUU_OPEN.V
     11766**DCL     12044--ASSIGN
FPT_XUU_OPEN.V.ASN#
     11776**DCL     12045--ASSIGN
FPT_XUU_OPEN.V.FSN#
     11797**DCL     11797--REDEF   11797--REDEF
FPT_XUU_OPEN.V.FUN#
     11776**DCL     12073<<ASSIGN
FPT_XUU_OPEN.V.RES#
     11781**DCL     12046--ASSIGN
FPT_XUU_OPEN.V_
     11757**DCL     12044<<ASSIGN
FPT_XUU_OPEN.WSN_
     11763**DCL     11763--REDEF
FPT_XUU_OPEN_ACCT
     11994**DCL     11879--DCLINIT 11942--DCLINIT
FPT_XUU_OPEN_CONST
     11874**DCL     12043>>ASSIGN
FPT_XUU_OPEN_CONST.ACSVEH_
     11876**DCL     11877--REDEF
FPT_XUU_OPEN_CONST.ALTKEYS_
     11882**DCL     11883--REDEF   11883--REDEF
FPT_XUU_OPEN_CONST.HDR_
     11881**DCL     11882--REDEF
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:14   
FPT_XUU_OPEN_CONST.TAB_
     11880**DCL     11881--REDEF
FPT_XUU_OPEN_CONST.UHL_
     11874**DCL     11875--REDEF   11875--REDEF
FPT_XUU_OPEN_CONST.V
     11883**DCL     11874--DCLINIT
FPT_XUU_OPEN_CONST.V.FSN#
     11914**DCL     11914--REDEF   11914--REDEF
FPT_XUU_OPEN_CONST.WSN_
     11880**DCL     11880--REDEF
FPT_XUU_OPEN_NAME
     11980**DCL     11875--DCLINIT 11942--DCLINIT
FPT_XUU_OPEN_PASS
     12008**DCL     11876--DCLINIT 11943--DCLINIT
FPT_XUU_OPEN_SN
     12036**DCL     11874--DCLINIT 11943--DCLINIT
FPT_XUU_OPEN_WSN
     12022**DCL     11880--DCLINIT 11943--DCLINIT
M$CLOSE
      5526**DCL-ENT 12080--CALL    12091--CALL
M$FID
      5589**DCL-ENT 12112--CALL
M$OPEN
      5526**DCL-ENT 12070--CALL    12100--CALL
M$OU
     10629**DCL     12049--ASSIGN
M$OU$
     10633**DCL     12049<<ASSIGN  12055>>IF      12055>>IF      12055>>IF      12055>>IF
M$SI
     10627**DCL     12048--ASSIGN
M$SI$
     10631**DCL     12048<<ASSIGN  12060>>ASSIGN  12061>>IF      12061>>IF      12061>>IF      12064>>ASSIGN
     12065>>ASSIGN  12099>>ASSIGN
M$UI
     10628**DCL     12047--ASSIGN
M$UI$
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:15   
     10632**DCL     12047<<ASSIGN  12096>>IF      12096>>IF
OPEN_TEST_OU
     11619**DCL     12059<<ASSIGN  12070<>CALL
OPEN_TEST_OU.ACSVEH_
     11621**DCL     11622--REDEF
OPEN_TEST_OU.ALTKEYS_
     11627**DCL     11628--REDEF   11628--REDEF
OPEN_TEST_OU.HDR_
     11626**DCL     11627--REDEF
OPEN_TEST_OU.NAME_
     11620**DCL     12060<<ASSIGN  12068<<ASSIGN
OPEN_TEST_OU.TAB_
     11625**DCL     11626--REDEF
OPEN_TEST_OU.UHL_
     11619**DCL     11620--REDEF   11620--REDEF
OPEN_TEST_OU.V.FSN#
     11659**DCL     11659--REDEF   11659--REDEF
OPEN_TEST_OU.WSN_
     11625**DCL     11625--REDEF
OPEN_TEST_OU_CONST
     11508**DCL     12059>>ASSIGN
OPEN_TEST_OU_CONST.ACSVEH_
     11510**DCL     11511--REDEF
OPEN_TEST_OU_CONST.ALTKEYS_
     11516**DCL     11517--REDEF   11517--REDEF
OPEN_TEST_OU_CONST.HDR_
     11515**DCL     11516--REDEF
OPEN_TEST_OU_CONST.TAB_
     11514**DCL     11515--REDEF
OPEN_TEST_OU_CONST.UHL_
     11508**DCL     11509--REDEF   11509--REDEF
OPEN_TEST_OU_CONST.V
     11517**DCL     11508--DCLINIT
OPEN_TEST_OU_CONST.V.FSN#
     11548**DCL     11548--REDEF   11548--REDEF
OPEN_TEST_OU_CONST.WSN_
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:16   
     11514**DCL     11514--REDEF
OPEN_TEST_UI
     11395**DCL     12098<<ASSIGN  12100<>CALL
OPEN_TEST_UI.ACSVEH_
     11397**DCL     11398--REDEF
OPEN_TEST_UI.ALTKEYS_
     11403**DCL     11404--REDEF   11404--REDEF
OPEN_TEST_UI.HDR_
     11402**DCL     11403--REDEF
OPEN_TEST_UI.NAME_
     11396**DCL     12099<<ASSIGN
OPEN_TEST_UI.TAB_
     11401**DCL     11402--REDEF
OPEN_TEST_UI.UHL_
     11395**DCL     11396--REDEF   11396--REDEF
OPEN_TEST_UI.V.FSN#
     11435**DCL     11435--REDEF   11435--REDEF
OPEN_TEST_UI.WSN_
     11401**DCL     11401--REDEF
OPEN_TEST_UI_CONST
     11284**DCL     12098>>ASSIGN
OPEN_TEST_UI_CONST.ACSVEH_
     11286**DCL     11287--REDEF
OPEN_TEST_UI_CONST.ALTKEYS_
     11292**DCL     11293--REDEF   11293--REDEF
OPEN_TEST_UI_CONST.HDR_
     11291**DCL     11292--REDEF
OPEN_TEST_UI_CONST.TAB_
     11290**DCL     11291--REDEF
OPEN_TEST_UI_CONST.UHL_
     11284**DCL     11285--REDEF   11285--REDEF
OPEN_TEST_UI_CONST.V
     11293**DCL     11284--DCLINIT
OPEN_TEST_UI_CONST.V.FSN#
     11324**DCL     11324--REDEF   11324--REDEF
OPEN_TEST_UI_CONST.WSN_
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:17   
     11290**DCL     11290--REDEF
POS
     10635**DCL     10636--IMP-SIZ 12064<<ASSIGN  12065>>ASSIGN  12065>>ASSIGN  12066>>ASSIGN  12067>>ASSIGN
     12105<<ASSIGN  12106<<CALLBLT 12106>>CALLBLT 12111>>ASSIGN  12111>>ASSIGN
VLP_OUNAME
     11689**DCL     12068--ASSIGN
VLP_OUNAME.L#
     11689**DCL     12067<<ASSIGN
VLP_OUNAME.NAME#
     11689**DCL     12065<<ASSIGN  12066<<ASSIGN
XUU$OPEN
     10640**DCL-ENT 12081--CALL    12102--CALL    12114--CALL
XUU_PARAM
     10744**DCL     12081<>CALL    12102<>CALL    12114<>CALL
XUU_PARAM.ASCII_KEY
     11010**DCL     11016--REDEF   11030--REDEF   11053--REDEF
XUU_PARAM.FLAGS.BASE#
     10746**DCL     12076<<ASSIGN  12084<<ASSIGN  12109<<ASSIGN
XUU_PARAM.FLAGS.INCLUDE#
     10777**DCL     12078<<ASSIGN  12086<<ASSIGN  12107<<ASSIGN
XUU_PARAM.FLAGS.LU_FIRST#
     10851**DCL     12093<<ASSIGN  12095<<ASSIGN
XUU_PARAM.FLAGS.OPT_UI#
     10887**DCL     12079<<ASSIGN  12088<<ASSIGN  12090<<ASSIGN  12110<<ASSIGN
XUU_PARAM.FLAGS.UP_DATE#
     10760**DCL     12077<<ASSIGN  12085<<ASSIGN  12108<<ASSIGN
XUU_PARAM.LEVEL
     10937**DCL     12118>>ASSIGN
XUU_PARAM.O.FPT_PTR$
     11044**DCL     12113<<ASSIGN
XUU_PARAM.SI_ERRCODE
     10952**DCL     10965--REDEF
XUU_PARAM.UI_ERRCODE
     10977**DCL     10990--REDEF
ZB$ALLOCATE
     12039**DCL-ENT 11097--DCLINIT
PL6.E3A0      #001=ZB_INPUT_OPEN File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:26 Page:18   
ZB$RELEASE
     12040**DCL-ENT 11123--DCLINIT
Z_RETURN_INT
     12041**DCL-ENT 12119--CALL    12123--CALL

PL6.E3A0      #002=ZB_INPUT_READ File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:27 Page:19   
      222        1
      223        2        /*F*     NAME:       ZB_INPUT_READ
      224        3                 PURPOSE:    This routine reads the next record from a file
      225        4                 DESCRIPTION:This routine reads the next record from the
      226        5                             input files.
      227        6        */
      228        7        /*D*     NAME:    ZB_INPUT_READ
      229        8                 CALL:    CALL ZB_INPUT_READ (FILEINFO)
      230        9                 INPUT:
      231       10                          FILEINFO.BUFFER$  - A pointer to a buffer that is
      232       11                                              to receive the data
      233       12                          FILEINFO.BUFSIZE  - The size of the buffer
      234       13                          FILEINFO.LEVEL    - The expected nested level of the
      235       14                                              record that is to be read
      236       15                 OUTPUT:
      237       16                          FILEINFO.NBYTES   - Number of bytes read in buffer
      238       17                          FILEINFO.FILETYPE - What type of file the record
      239       18                                              was read from
      240       19                          FILEINFO.LEVEL    - If the file was an include file,
      241       20                                              the nested include level
      242       21                          FILEINFO.KEY$     - Points at the text that contains
      243       22                                              the information of the key read.
      244       23                 DESCRIPTION:
      245       24                    Check to see if a record is already saved of in a buffer
      246       25                    (This happens when an EOF was found in an include file
      247       26                     and its FILEINFO.LEVEL > 1). Get the next record to
      248       27                    read by using XUU$READ or this saved buffer. Now it
      249       28                    figures out from what type of file the record comes from
      250       29                    and its nested include level. If no EOF was found in
      251       30                    either an include file or the base file, the routine
      252       31                    returns a 1 else it returns a 0.
      253       32        */
      254       33
      255       34        ZB_INPUT_READ: proc(FILEINFO) altret;
      256       35
      257       36
      258       37        %include CP_6;
PL6.E3A0      #002=ZB_INPUT_READ File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:27 Page:20   
      259     5596        %include XU_MACRO_C;
      260     8702        %include XU_PERR_C;
      261     8893        %include B_ERRORS_C;
      262    10020        %include zbm$input$types_c;
      263    10069
      264    10070        %ZB_FILEINFO (NAME=FILEINFO,STCLASS="");
      265    10083
      266    10084    1   dcl   Z_RETURN_INT entry (1);
      267    10085    1   dcl   XBI_SET_ERRNO entry(1);
      268    10086    1   dcl   BASED_BUF   char(FILEINFO.BUFSIZE)     based;
      269    10087    1   dcl   BASED_KEY   char(12)                   based;
      270    10088    1   dcl   BUF_SAVED   char(4096) static;
      271    10089    1   dcl   NBYTES_OLD  sbin        static   init(0);
      272    10090    1   dcl   NUM_EOF     sbin        static   init(0);
      273    10091
      274    10092        %XUU$ENTRY;
      275    10097        %XUU$ALLOC_TYPES;
      276    10120        %XUU_PARAM(STCLASS=SYMREF);
      277    10555    2         if (NBYTES_OLD ~= 0) then do;
      278    10556    3            if (NUM_EOF = 0) then do;
      279    10557    3               substr (FILEINFO.BUFFER$->BASED_BUF,0,NBYTES_OLD) = BUF_SAVED;
      280    10558    3               FILEINFO.NBYTES = NBYTES_OLD;
      281    10559    3               NBYTES_OLD = 0;
      282    10560    3               CALL Z_RETURN_INT(1);
      283    10561    3            end;
      284    10562    3            else do;
      285    10563    3               FILEINFO.LEVEL = FILEINFO.LEVEL - 1;
      286    10564    3               NUM_EOF = NUM_EOF - 1;
      287    10565    3               CALL Z_RETURN_INT (0);
      288    10566    3            end;
      289    10567    2         end;
      290    10568    2         else do;
      291    10569    2            call XUU$READ(XUU_PARAM,vector(FILEINFO.BUFFER$->BASED_BUF)) altret(CHK_ERR
             10569                     );
      292    10570    2            FILEINFO.NBYTES = XUU_PARAM.ARS;
      293    10571    2         end;
      294    10572    1         if (XUU_PARAM.FLAGS.BASE# = '1'B) then
PL6.E3A0      #002=ZB_INPUT_READ File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:27 Page:21   
      295    10573    1            FILEINFO.FILETYPE = %IN_BASE;
      296    10574    1         else if (XUU_PARAM.FLAGS.UP_DATE# = '1'B) then
      297    10575    1            FILEINFO.FILETYPE = %IN_UPDATE;
      298    10576    1         else if (XUU_PARAM.FLAGS.INCLUDE# = '1'B) then
      299    10577    1            FILEINFO.FILETYPE = %IN_INCLUDE;
      300    10578    1         if (XUU_PARAM.FLAGS.KEY_REC# = '1'B) then
      301    10579    1            substr (FILEINFO.KEY$->BASED_KEY,0,10) = substr (XUU_PARAM.ASCII_KEY,0,10);
      302    10580    1         else
      303    10581    1            substr (FILEINFO.KEY$->BASED_KEY,0,10) = substr (XUU_PARAM.ASCII_KEY,0,10);
      304    10582    1         substr (FILEINFO.KEY$->BASED_KEY,10,1) = %binasc(0);
      305    10583    1         substr (FILEINFO.BUFFER$->BASED_BUF,FILEINFO.NBYTES,1) = %binasc(10);
      306    10584    1         FILEINFO.NBYTES = FILEINFO.NBYTES + 1;
      307    10585    1         if (XUU_PARAM.LEVEL = FILEINFO.LEVEL) then
      308    10586    1            call Z_RETURN_INT(1);
      309    10587    2         else do;
      310    10588    2            NUM_EOF = FILEINFO.LEVEL - XUU_PARAM.LEVEL - 1;
      311    10589    2            FILEINFO.LEVEL = FILEINFO.LEVEL - 1;
      312    10590    2            BUF_SAVED = substr (FILEINFO.BUFFER$->BASED_BUF,0,FILEINFO.NBYTES);
      313    10591    2            NBYTES_OLD = FILEINFO.NBYTES;
      314    10592    2            call Z_RETURN_INT(0);
      315    10593    2         end;
      316    10594
      317    10595    1   CHK_ERR:
      318    10596    1         if XUU_PARAM.FLAGS.BASE# = '1'b and
      319    10597    1            XUU_PARAM.ERRCODE.MON = '1'b and
      320    10598    1            XUU_PARAM.ERRCODE.ERR# = %E$EOF
      321    10599    2         then do;
      322    10600    2            FILEINFO.LEVEL = -1;
      323    10601    2            call Z_RETURN_INT(0); /* EOF of base file found */
      324    10602    2         end;
      325    10603    2         else do;
      326    10604    2            call XBI_SET_ERRNO (XUU_PARAM.ERRCODE);
      327    10605    2            call Z_RETURN_INT(-1); /* An error occurred */
      328    10606    2         END;
      329    10607
      330    10608    1   end ZB_INPUT_READ;
      331    10609        %EOD;
PL6.E3A0      #002=ZB_INPUT_READ File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:27 Page:22   

PL6.E3A0      #002=ZB_INPUT_READ File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:27 Page:23   
--  Include file information  --

   zbm$input$types_c.:ZBC3TOU  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
   XU_PERR_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ZB_INPUT_READ.

   Procedure ZB_INPUT_READ requires 152 words for executable code.
   Procedure ZB_INPUT_READ requires 10 words of local(AUTO) storage.

PL6.E3A0      #002=ZB_INPUT_READ File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:27 Page:24   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=ZB_INPUT_READ File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:27 Page:25   
          MINI XREF LISTING

BASED_BUF
     10086**DCL     10557<<ASSIGN  10569--CALL    10583<<ASSIGN  10590>>ASSIGN
BASED_KEY
     10087**DCL     10579<<ASSIGN  10581<<ASSIGN  10582<<ASSIGN
BUF_SAVED
     10088**DCL     10557>>ASSIGN  10590<<ASSIGN
CHK_ERR
     10596**LABEL   10569--CALLALT
FILEINFO
     10071**DCL        34--PROC
FILEINFO.BUFFER$
     10072**DCL     10557>>ASSIGN  10569>>CALL    10583>>ASSIGN  10590>>ASSIGN
FILEINFO.BUFSIZE
     10073**DCL     10086--IMP-SIZ 10557>>ASSIGN  10569>>CALL    10583>>ASSIGN  10590>>ASSIGN
FILEINFO.FILETYPE
     10075**DCL     10573<<ASSIGN  10575<<ASSIGN  10577<<ASSIGN
FILEINFO.KEY$
     10081**DCL     10579>>ASSIGN  10581>>ASSIGN  10582>>ASSIGN
FILEINFO.LEVEL
     10078**DCL     10563<<ASSIGN  10563>>ASSIGN  10585>>IF      10588>>ASSIGN  10589<<ASSIGN  10589>>ASSIGN
     10600<<ASSIGN
FILEINFO.NBYTES
     10074**DCL     10558<<ASSIGN  10570<<ASSIGN  10583>>ASSIGN  10584<<ASSIGN  10584>>ASSIGN  10590>>ASSIGN
     10591>>ASSIGN
NBYTES_OLD
     10089**DCL     10555>>IF      10557>>ASSIGN  10558>>ASSIGN  10559<<ASSIGN  10591<<ASSIGN
NUM_EOF
     10090**DCL     10556>>IF      10564<<ASSIGN  10564>>ASSIGN  10588<<ASSIGN
XBI_SET_ERRNO
     10085**DCL-ENT 10604--CALL
XUU$READ
     10094**DCL-ENT 10569--CALL
PL6.E3A0      #002=ZB_INPUT_READ File=zbm$input$functions:6.:ZBC3TSI             FRI 08/22/97 09:27 Page:26   
XUU_PARAM
     10129**DCL     10569<>CALL
XUU_PARAM.ARS
     10332**DCL     10570>>ASSIGN
XUU_PARAM.ASCII_KEY
     10395**DCL     10401--REDEF   10415--REDEF   10438--REDEF   10579>>ASSIGN  10581>>ASSIGN
XUU_PARAM.ERRCODE
     10375**DCL     10604<>CALL
XUU_PARAM.ERRCODE.ERR#
     10393**DCL     10596>>IF
XUU_PARAM.ERRCODE.MON
     10392**DCL     10596>>IF
XUU_PARAM.FLAGS.BASE#
     10131**DCL     10572>>IF      10596>>IF
XUU_PARAM.FLAGS.INCLUDE#
     10162**DCL     10576>>IF
XUU_PARAM.FLAGS.KEY_REC#
     10218**DCL     10578>>IF
XUU_PARAM.FLAGS.UP_DATE#
     10145**DCL     10574>>IF
XUU_PARAM.LEVEL
     10322**DCL     10585>>IF      10588>>ASSIGN
XUU_PARAM.SI_ERRCODE
     10337**DCL     10350--REDEF
XUU_PARAM.UI_ERRCODE
     10362**DCL     10375--REDEF
Z_RETURN_INT
     10084**DCL-ENT 10560--CALL    10565--CALL    10586--CALL    10592--CALL    10601--CALL    10605--CALL

PL6.E3A0      #003=ZB_INPUT_CLOSE File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:27 Page:27   
      332        1
      333        2        /*F*     NAME:       ZB_INPUT_CLOSE
      334        3                 PURPOSE:    Closes a file opened using XUU services
      335        4                 DESCRIPTION:This routine closes a file opened with XUU services
      336        5        */
      337        6        /*D*     NAME:    ZB_INPUT_CLOSE
      338        7                 CALL:    CALL ZB_INPUT_CLOSE (FILEINFO)
      339        8                 INPUT:
      340        9                          FILEINFO.FILETYPE    - The type of file that is
      341       10                                                 to be closed
      342       11                                                  =1 - Close base file
      343       12                                                  =2 - Close update file
      344       13                                                  =3 - Close include file
      345       14                 OUTPUT:
      346       15                          FILEINFO.OPEN_FLAG   - This flag is set to a 0
      347       16                                                 if the file is closed ok
      348       17                 DESCRIPTION:
      349       18                    This routine closes the current file that is opened
      350       19                    as either an include, base, or update file depending
      351       20                    on the value of FILEINFO.FILETYPE. If the file is closed
      352       21                    without any errors the FILEINFO.OPEN_FLAG is reset to 0
      353       22        */
      354       23
      355       24        ZB_INPUT_CLOSE:   proc(FILEINFO);
      356       25
      357       26
      358       27        %include CP_6;
      359     5586        %include XU_MACRO_C;
      360     8692        %include XU_PERR_C;
      361     8883        %include B_ERRORS_C;
      362    10010        %include zbm$input$types_c;
      363    10059
      364    10060        %ZB_FILEINFO   (NAME=FILEINFO,STCLASS="");
      365    10073
      366    10074        %XUU$ENTRY;
      367    10079        %XUU_PARAM(STCLASS=SYMREF);
      368    10514
PL6.E3A0      #003=ZB_INPUT_CLOSE File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:27 Page:28   
      369    10515    1   dcl   Z_RETURN_INT   entry(1);
      370    10516
      371    10517    1      call XUU$CLOSE (XUU_PARAM) altret (CRASH_AND_BURN);
      372    10518    1      FILEINFO.OPEN_FLAG = 0;
      373    10519    1      call Z_RETURN_INT (1);
      374    10520
      375    10521    1   CRASH_AND_BURN:
      376    10522    1      call Z_RETURN_INT (0);
      377    10523
      378    10524    1   end ZB_INPUT_CLOSE;
      379    10525        %EOD;

PL6.E3A0      #003=ZB_INPUT_CLOSE File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:27 Page:29   
--  Include file information  --

   zbm$input$types_c.:ZBC3TOU  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
   XU_PERR_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ZB_INPUT_CLOSE.

   Procedure ZB_INPUT_CLOSE requires 17 words for executable code.
   Procedure ZB_INPUT_CLOSE requires 4 words of local(AUTO) storage.

PL6.E3A0      #003=ZB_INPUT_CLOSE File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:27 Page:30   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=ZB_INPUT_CLOSE File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:27 Page:31   
          MINI XREF LISTING

CRASH_AND_BURN
     10522**LABEL   10517--CALLALT
FILEINFO
     10061**DCL        24--PROC
FILEINFO.OPEN_FLAG
     10067**DCL     10518<<ASSIGN
XUU$CLOSE
     10077**DCL-ENT 10517--CALL
XUU_PARAM
     10088**DCL     10517<>CALL
XUU_PARAM.ASCII_KEY
     10354**DCL     10360--REDEF   10374--REDEF   10397--REDEF
XUU_PARAM.SI_ERRCODE
     10296**DCL     10309--REDEF
XUU_PARAM.UI_ERRCODE
     10321**DCL     10334--REDEF
Z_RETURN_INT
     10515**DCL-ENT 10519--CALL    10522--CALL

PL6.E3A0      #004=ZB$ALLOCATE File=zbm$input$functions:6.:ZBC3TSI               FRI 08/22/97 09:27 Page:32   
      380        1
      381        2        /*F*     NAME:       ZB$ALLOCATE
      382        3                 PURPOSE:    This routine allocates a buffer for XUU fastio
      383        4                 DESCRIPTION:This routine allocates a buffer for XUU's fastio
      384        5                             by calling a C routine which in turn calls malloc
      385        6        */
      386        7        /*D*     NAME:    ZB$ALLOCATE
      387        8                 CALL:    CALL ZB$ALLOCATE (VECT,ATYPE)
      388        9                 INPUT:
      389       10                          ATYPE sbin  - How much space to allocate:
      390       11                                         =0 Allocate 4096 bytes
      391       12                                         else Allocate 4096 * 4 bytes
      392       13                 OUTPUT:
      393       14                          VECT vector - A vector framing the area allocated
      394       15                                        by this routine
      395       16                 DESCRIPTION:
      396       17                    This routine allocates an area of memory that is used
      397       18                    as a buffer by XUU services for its fast sequential
      398       19                    I/O capabilities.  It gets this memory the hard way
      399       20                    by calling a c routine that calls the C allocation
      400       21                    routine malloc().
      401       22        */
      402       23
      403       24        ZB$ALLOCATE: proc (VECT,ATYPE);
      404       25    1   dcl      VECT     vector;
      405       26    1   dcl      ATYPE    sbin;
      406       27
      407       28        %include    CP_6;
      408     5587        %include    XU_MACRO_C;
      409     8693        %include    XU_PERR_C;
      410     8884        %include    B_ERRORS_C;
      411    10011
      412    10012    1   dcl      P$       ptr;
      413    10013    1   dcl      NBYTES   sbin;
      414    10014    1   dcl      VSTRING     char(NBYTES)      based;
      415    10015        %B$TCB;
      416    10018        %B$ALT;
PL6.E3A0      #004=ZB$ALLOCATE File=zbm$input$functions:6.:ZBC3TSI               FRI 08/22/97 09:27 Page:33   
      417    10026    1   DCL   B$TCB$   PTR   SYMREF;
      418    10027
      419    10028        %FPT_MERC   (FPTN=FPT_MERC,STCLASS="");
      420    10041        %VLP_ERRCODE   (FPTN=ERR_CODE, STCLASS="");
      421    10086
      422    10087
      423    10088    1   dcl      MALLOC_CALLER  entry(2);
      424    10089
      425    10090        /* Figure out the number of bytes that are needed to be allocated */
      426    10091
      427    10092    1      if (ATYPE = 0) then
      428    10093    1         NBYTES = 4096;
      429    10094    1      else
      430    10095    1         NBYTES = 4096 * 4;
      431    10096
      432    10097        /* Call a C routine that calls malloc this is neccessary because
      433    10098           PL6 can not call functions and it call routines that are in
      434    10099           lower case.                                                    */
      435    10100
      436    10101    1      call MALLOC_CALLER (P$,NBYTES);
      437    10102    2      if (P$ = ADDR(nil)) then do;
      438    10103    2         ERR_CODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      439    10104    2         ERR_CODE.SEV = 3;
      440    10105    2         FPT_MERC.JERR_ = VECTOR(ERR_CODE);
      441    10106    2         CALL M$MERC (FPT_MERC);
      442    10107    2      end;
      443    10108    1      VECT = vector (substr (P$->VSTRING,0));
      444    10109    1      return;
      445    10110    1   end ZB$ALLOCATE;
      446    10111
      447    10112        %EOD;

PL6.E3A0      #004=ZB$ALLOCATE File=zbm$input$functions:6.:ZBC3TSI               FRI 08/22/97 09:27 Page:34   
--  Include file information  --

   B_ERRORS_C.:LIB_E05  is referenced.
   XU_PERR_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ZB$ALLOCATE.

   Procedure ZB$ALLOCATE requires 43 words for executable code.
   Procedure ZB$ALLOCATE requires 14 words of local(AUTO) storage.

PL6.E3A0      #004=ZB$ALLOCATE File=zbm$input$functions:6.:ZBC3TSI               FRI 08/22/97 09:27 Page:35   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=ZB$ALLOCATE File=zbm$input$functions:6.:ZBC3TSI               FRI 08/22/97 09:27 Page:36   
          MINI XREF LISTING

ATYPE
        26**DCL        24--PROC    10092>>IF
B$ALT.CODE
     10020**DCL     10020--REDEF   10021--REDEF   10021--REDEF
B$ALT.ERR
     10021**DCL     10103>>ASSIGN
B$ALT.ERR.ERR#
     10022**DCL     10022--REDEF
B$ALT.EVID
     10021**DCL     10021--REDEF   10021--REDEF
B$TCB.ALT$
     10016**DCL     10103>>ASSIGN
B$TCB$
     10026**DCL     10103>>ASSIGN
ERR_CODE
     10053**DCL     10103<<ASSIGN  10105--ASSIGN
ERR_CODE.SEV
     10083**DCL     10104<<ASSIGN
FPT_MERC
     10039**DCL     10106<>CALL
FPT_MERC.JERR_
     10039**DCL     10105<<ASSIGN
M$MERC
      5571**DCL-ENT 10106--CALL
MALLOC_CALLER
     10088**DCL-ENT 10101--CALL
NBYTES
     10013**DCL     10014--IMP-SIZ 10093<<ASSIGN  10095<<ASSIGN  10101<>CALL    10108>>ASSIGN
P$
     10012**DCL     10101<>CALL    10102>>IF      10108>>ASSIGN
VECT
        25**DCL        24--PROC    10108<<ASSIGN
PL6.E3A0      #004=ZB$ALLOCATE File=zbm$input$functions:6.:ZBC3TSI               FRI 08/22/97 09:27 Page:37   
VSTRING
     10014**DCL     10108--ASSIGN

PL6.E3A0      #005=ZB$RELEASE File=zbm$input$functions:6.:ZBC3TSI                FRI 08/22/97 09:28 Page:38   
      448        1
      449        2        /*F*     NAME:       ZB$RELEASE
      450        3                 PURPOSE:    Free up some memory
      451        4                 DESCRIPTION:This routine frees up some memory that are
      452        5                             used by XUU services for its fastio buffers
      453        6        */
      454        7        /*D*     NAME:    ZB$RELEASE
      455        8                 CALL:    CALL ZB$RELEASE (VECT)
      456        9                 INPUT:
      457       10                          VECT vector - A vector framing the area of memory
      458       11                                        that is to be released
      459       12                 OUTPUT:  none
      460       13                 DESCRIPTION:
      461       14                    This routine frees up a chunk of memory that was used by
      462       15                    XUU for its fastio buffers. This memory is freed up by
      463       16                    using a C routine that calls the C function free()
      464       17        */
      465       18
      466       19        ZB$RELEASE: proc (VECT);
      467       20    1   dcl      VECT     vector;
      468       21
      469       22    1   dcl      FREE_CALLER    entry(1);
      470       23
      471       24        /* Get a pointer to call the C routine free that frees up a chunk of
      472       25           memory                                                           */
      473       26
      474       27    1      call FREE_CALLER (vbase(VECT));
      475       28    1      return;
      476       29    1   end ZB$RELEASE;
      477       30        %EOD;

PL6.E3A0      #005=ZB$RELEASE File=zbm$input$functions:6.:ZBC3TSI                FRI 08/22/97 09:28 Page:39   
      No diagnostics issued in procedure ZB$RELEASE.

   Procedure ZB$RELEASE requires 10 words for executable code.
   Procedure ZB$RELEASE requires 6 words of local(AUTO) storage.

PL6.E3A0      #005=ZB$RELEASE File=zbm$input$functions:6.:ZBC3TSI                FRI 08/22/97 09:28 Page:40   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=ZB$RELEASE File=zbm$input$functions:6.:ZBC3TSI                FRI 08/22/97 09:28 Page:41   
          MINI XREF LISTING

FREE_CALLER
        22**DCL-ENT    27--CALL
VECT
        20**DCL        19--PROC       27<>CALL

PL6.E3A0      #006=ZB_GETFILENAME File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:28 Page:42   
      478        1
      479        2        ZB_GETFILENAME: proc(FILETYPE,SOURCE_NAME,UPDATE_NAME);
      480        3    1   dcl   FILETYPE    sbin;
      481        4    1   dcl   SOURCE_NAME    char(132);
      482        5    1   dcl   UPDATE_NAME    char(132);
      483        6
      484        7        %include CP_6;
      485     5566        %include CP_6_SUBS;
      486     6106        %include zbm$input$types_c;
      487     6155
      488     6156        %FPT_UNFID (FPTN=UNFID);
      489     6174
      490     6175    1   dcl   Z_RETURN_INT   entry(1);
      491     6176    1   dcl   M$SI  dcb;
      492     6177    1   dcl   M$UI  dcb;
      493     6178
      494     6179        /*    Local Variables */
      495     6180
      496     6181    1   dcl   NAME_LEN    sbin;
      497     6182    1   dcl   RS       sbin;
      498     6183
      499     6184    1         RS = 0;
      500     6185    1         NAME_LEN = 0;
      501     6186    1         UNFID.V.DCB# = DCBNUM (M$SI);
      502     6187    1         UNFID.TEXTFID_ = VECTOR (SOURCE_NAME);
      503     6188    1         UNFID.LEN_ = VECTOR (NAME_LEN);
      504     6189    1         CALL M$UNFID (UNFID) ALTRET (ERR);
      505     6190    1         substr (SOURCE_NAME,NAME_LEN,1) = %binasc(0);
      506     6191
      507     6192    1         if (FILETYPE = %IN_UPDATE)
      508     6193    2         then do;
      509     6194    2            NAME_LEN = 0;
      510     6195    2            UNFID.V.DCB# = DCBNUM (M$UI);
      511     6196    2            UNFID.TEXTFID_ = VECTOR (UPDATE_NAME);
      512     6197    2            UNFID.LEN_ = VECTOR (NAME_LEN);
      513     6198    2            CALL M$UNFID (UNFID) ALTRET (ERR);
      514     6199    2            substr (UPDATE_NAME,NAME_LEN,1) = %binasc(0);
PL6.E3A0      #006=ZB_GETFILENAME File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:28 Page:43   
      515     6200    2         end; /* UNFIDDING M$UI */
      516     6201    1         RS = 1;
      517     6202
      518     6203    1   ERR:
      519     6204    1         call Z_RETURN_INT (RS);
      520     6205    1   END ZB_GETFILENAME;

PL6.E3A0      #006=ZB_GETFILENAME File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:28 Page:44   
--  Include file information  --

   zbm$input$types_c.:ZBC3TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure ZB_GETFILENAME.

   Procedure ZB_GETFILENAME requires 58 words for executable code.
   Procedure ZB_GETFILENAME requires 10 words of local(AUTO) storage.

    No errors detected in file zbm$input$functions:6.:ZBC3TSI    .

PL6.E3A0      #006=ZB_GETFILENAME File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:28 Page:45   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=ZB_GETFILENAME File=zbm$input$functions:6.:ZBC3TSI            FRI 08/22/97 09:28 Page:46   
          MINI XREF LISTING

ERR
      6204**LABEL    6189--CALLALT  6198--CALLALT
FILETYPE
         3**DCL         2--PROC     6192>>IF
M$SI
      6176**DCL      6186>>ASSIGN
M$UI
      6177**DCL      6195>>ASSIGN
M$UNFID
      5557**DCL-ENT  6189--CALL     6198--CALL
NAME_LEN
      6181**DCL      6185<<ASSIGN   6188--ASSIGN   6190>>ASSIGN   6194<<ASSIGN   6197--ASSIGN   6199>>ASSIGN
RS
      6182**DCL      6184<<ASSIGN   6201<<ASSIGN   6204<>CALL
SOURCE_NAME
         4**DCL         2--PROC     6187--ASSIGN   6190<<ASSIGN
UNFID
      6167**DCL      6189<>CALL     6198<>CALL
UNFID.LEN_
      6170**DCL      6188<<ASSIGN   6197<<ASSIGN
UNFID.TEXTFID_
      6167**DCL      6187<<ASSIGN   6196<<ASSIGN
UNFID.V
      6171**DCL      6167--DCLINIT
UNFID.V.DCB#
      6171**DCL      6186<<ASSIGN   6195<<ASSIGN
UPDATE_NAME
         5**DCL         2--PROC     6196--ASSIGN   6199<<ASSIGN
Z_RETURN_INT
      6175**DCL-ENT  6204--CALL
