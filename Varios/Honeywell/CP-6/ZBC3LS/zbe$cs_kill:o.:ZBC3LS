

CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cs_kill.c,v 1.4 87/03/10 10:55:44 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             #include "em_mnem:h"
        7         7             #include "types:h"
        8         8             #include "debug:h"
        9         9             #include "global:h"
       10        10             #include "lset:h"
       11        11             #include "cset:h"
       12        12             #include "aux:h"
       13        13             #include "map:h"
       14        14             #include "cs:h"
       15        15             #include "cs_aux:h"
       16        16             #include "cs_debug:h"
       17        17             #include "cs_avail:h"
       18        18             #include "cs_entity:h"
       19        19
       20        20             STATIC base_valno(enp)
       21        21              entity_p enp;
       22        22             {
       23        23    1         /* Return the value number of the (base) address of an indirectly
       24        24    1          * accessed entity.
       25        25    1          */
       26        26    1         switch (enp->en_kind) {
       27        27    2            default:
       28        28    2               assert(FALSE);
       29        29    2               break;
       30        30    2            case ENINDIR:
       31        31    2               return enp->en_ind;
       32        32    2            case ENOFFSETTED:
       33        33    2               return enp->en_base;
       34        34    2            case ENARRELEM:
       35        35    2               return enp->en_arbase;
       36        36    2         }
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37    1         /* NOTREACHED */
       38        38    1        }
       39        39
       40        40             STATIC entity_p find_base(vn)
       41        41              valnum vn;
       42        42             {
       43        43    1         /* Vn is the valuenumber of the (base) address of an indirectly
       44        44    1          * accessed entity. Return the entity that holds this address
       45        45    1          * recursively.
       46        46    1          */
       47        47    1         register Lindex i;
       48        48    1         register avail_p ravp;
       49        49    1
       50        50    1         for (i = Lfirst(entities); i != (Lindex) 0; i = Lnext(i, entities)) {
       51        51    2            register entity_p renp = en_elem(i);
       52        52    2
       53        53    2            if (renp->en_vn == vn) {
       54        54    3               switch (renp->en_kind) {
       55        55    4                  case ENAEXTERNAL:
       56        56    4                  case ENALOCAL:
       57        57    4                  case ENALOCBASE:
       58        58    4                  case ENAARGBASE:
       59        59    4                     return renp;
       60        60    4                  case ENAOFFSETTED:
       61        61    4                     return find_base(renp->en_base);
       62        62    4               }
       63        63    3            }
       64        64    2         }
       65        65    1
       66        66    1         /* We couldn't find it among the entities.
       67        67    1          * Let's try the available expressions.
       68        68    1          */
       69        69    1         for (ravp = avails; ravp != (avail_p) 0; ravp = ravp->av_before) {
       70        70    2            if (ravp->av_result == vn) {
       71        71    3               if (ravp->av_instr == (byte) op_aar)
       72        72    3                  return find_base(ravp->av_ofirst);
       73        73    3               if (ravp->av_instr == (byte) op_ads)
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74    3                  return find_base(ravp->av_oleft);
       75        75    3            }
       76        76    2         }
       77        77    1
       78        78    1         /* Bad luck. */
       79        79    1         return (entity_p) 0;
       80        80    1        }
       81        81
       82        82             STATIC bool obj_overlap(op1, op2)
       83        83              obj_p op1, op2;
       84        84             {
       85        85    1         /* Op1 and op2 point to two objects in the same datablock.
       86        86    1          * Obj_overlap returns whether these objects might overlap.
       87        87    1          */
       88        88    1         obj_p tmp;
       89        89    1
       90        90    1         if (op1->o_off > op2->o_off) {
       91        91    2            /* Exchange them. */
       92        92    2            tmp = op1; op1 = op2; op2 = tmp;
       93        93    2         }
       94        94    1         return   op1->o_size == UNKNOWN_SIZE ||
       95        95    1            op1->o_off + op1->o_size > op2->o_off;
       96        96    1        }
       97        97
       98        98             #define same_datablock(o1, o2) ((o1)->o_dblock == (o2)->o_dblock)
       99        99
      100       100             STATIC bool addr_local(enp)
      101       101              entity_p enp;
      102       102             {
      103       103    1         /* Is enp the address of a stack item. */
      104       104    1
      105       105    1         if (enp == (entity_p) 0) return FALSE;
      106       106    1
      107       107    1         return   enp->en_kind == ENALOCAL || enp->en_kind == ENALOCBASE ||
      108       108    1            enp->en_kind == ENAARGBASE;
      109       109    1        }
      110       110
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111             STATIC bool addr_external(enp)
      112       112              entity_p enp;
      113       113             {
      114       114    1         /* Is enp the address of an external. */
      115       115    1
      116       116    1         return enp != (entity_p) 0 && enp->en_kind == ENAEXTERNAL;
      117       117    1        }
      118       118
      119       119             STATIC kill_external(obp, indir)
      120       120              obj_p obp;
      121       121              int indir;
      122       122             {
      123       123    1         /* A store is done via the object in obp. If this store is direct
      124       124    1          * we kill directly accessed entities in the same data block only
      125       125    1          * if they overlap with obp, otherwise we kill everything in the
      126       126    1          * data block. Indirectly accessed entities of which it can not be
      127       127    1          * proven taht they are not in the same data block, are killed in
      128       128    1          * both cases.
      129       129    1          */
      130       130    1         register Lindex i;
      131       131    1
      132       132    1         OUTTRACE("kill external", 0);
      133       133    1         for (i = Lfirst(entities); i != (Lindex) 0; i = Lnext(i, entities)) {
      134       134    2            entity_p enp = en_elem(i);
      135       135    2            entity_p base;
      136       136    2
      137       137    2            switch (enp->en_kind) {
      138       138    3               case ENEXTERNAL:
      139       139    3                  if (!same_datablock(enp->en_ext, obp))
      140       140    3                     break;
      141       141    3                  if (!indir && !obj_overlap(enp->en_ext, obp))
      142       142    3                     break;
      143       143    3                  OUTTRACE("kill %d", enp->en_vn);
      144       144    3                  enp->en_vn = newvalnum();
      145       145    3                  break;
      146       146    3               case ENINDIR:
      147       147    3               case ENOFFSETTED:
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    3               case ENARRELEM:
      149       149    3                  /* We spare its value number if we are sure
      150       150    3                   * that its (base) address points into the
      151       151    3                   * stack or into another data block.
      152       152    3                   */
      153       153    3                  base = find_base(base_valno(enp));
      154       154    3                  if (addr_local(base))
      155       155    3                     break;
      156       156    3                  if (addr_external(base) &&
      157       157    3                      !same_datablock(base->en_ext, obp)
      158       158    3                     )
      159       159    3                     break;
      160       160    3                  OUTTRACE("kill %d", enp->en_vn);
      161       161    3                  enp->en_vn = newvalnum();
      162       162    3                  break;
      163       163    3            }
      164       164    2         }
      165       165    1        }
      166       166
      167       167             STATIC bool loc_overlap(enp1, enp2)
      168       168              entity_p enp1, enp2;
      169       169             {
      170       170    1         /* Enp1 and enp2 point to two locals. Loc_overlap returns whether
      171       171    1          * they overlap.
      172       172    1          */
      173       173    1         entity_p tmp;
      174       174    1
      175       175    1         assert(enp1->en_kind == ENLOCAL && enp2->en_kind == ENLOCAL);
      176       176    1
      177       177    1         if (enp1->en_loc > enp2->en_loc) {
      178       178    2            /* Exchange them. */
      179       179    2            tmp = enp1; enp1 = enp2; enp2 = tmp;
      180       180    2         }
      181       181    1         if (enp1->en_loc < 0 && enp2->en_loc >= 0)
      182       182    1            return   FALSE; /* Locals and parameters do not overlap. */
      183       183    1         else  return   enp1->en_size == UNKNOWN_SIZE ||
      184       184    1               enp1->en_loc + enp1->en_size > enp2->en_loc;
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185    1        }
      186       186
      187       187             STATIC kill_local(enp, indir)
      188       188              entity_p enp;
      189       189              bool indir;
      190       190             {
      191       191    1         /* This time a store is done into an ENLOCAL. */
      192       192    1
      193       193    1         register Lindex i;
      194       194    1
      195       195    1         OUTTRACE("kill local", 0);
      196       196    1         for (i = Lfirst(entities); i != (Lindex) 0; i = Lnext(i, entities)) {
      197       197    2            entity_p rep = en_elem(i);
      198       198    2            entity_p base;
      199       199    2
      200       200    2            switch (rep->en_kind) {
      201       201    3               case ENLOCAL:
      202       202    3                  if (indir) {
      203       203    4                     /* Kill locals that might be stored into
      204       204    4                      * via a pointer. Note: enp not used.
      205       205    4                      */
      206       206    4                     if (!is_regvar(rep->en_loc)) {
      207       207    5                        OUTTRACE("kill %d", rep->en_vn);
      208       208    5                        rep->en_vn = newvalnum();
      209       209    5                     }
      210       210    4                  } else if (loc_overlap(rep, enp)) {
      211       211    4                     /* Only kill overlapping locals. */
      212       212    4                     OUTTRACE("kill %d", rep->en_vn);
      213       213    4                     rep->en_vn = newvalnum();
      214       214    4                  }
      215       215    3                  break;
      216       216    3               case ENINDIR:
      217       217    3               case ENOFFSETTED:
      218       218    3               case ENARRELEM:
      219       219    3                  if (!is_regvar(enp->en_loc)) {
      220       220    4                     base = find_base(base_valno(rep));
      221       221    4                     if (!addr_external(base)) {
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      222       222    5                        OUTTRACE("kill %d", rep->en_vn);
      223       223    5                        rep->en_vn = newvalnum();
      224       224    5                     }
      225       225    4                  }
      226       226    3                  break;
      227       227    3            }
      228       228    2         }
      229       229    1        }
      230       230
      231       231             STATIC kill_sim()
      232       232             {
      233       233    1         /* A store is done into the ENIGNMASK. */
      234       234    1
      235       235    1         register Lindex i;
      236       236    1
      237       237    1         OUTTRACE("kill sim", 0);
      238       238    1         for (i = Lfirst(entities); i != (Lindex) 0; i = Lnext(i, entities)) {
      239       239    2            register entity_p rep = en_elem(i);
      240       240    2
      241       241    2            if (rep->en_kind == ENIGNMASK) {
      242       242    3               OUTTRACE("kill %d", rep->en_vn);
      243       243    3               rep->en_vn = newvalnum();
      244       244    3               return; /* There is only one ignoremask. */
      245       245    3            }
      246       246    2         }
      247       247    1        }
      248       248
      249       249             kill_direct(enp)
      250       250              entity_p enp;
      251       251             {
      252       252    1         /* A store will be done into enp. We must forget the values of all the
      253       253    1          * entities this one may overlap with.
      254       254    1          */
      255       255    1         switch (enp->en_kind) {
      256       256    2            default:
      257       257    2               assert(FALSE);
      258       258    2               break;
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      259       259    2            case ENEXTERNAL:
      260       260    2               kill_external(enp->en_ext, FALSE);
      261       261    2               break;
      262       262    2            case ENLOCAL:
      263       263    2               kill_local(enp, FALSE);
      264       264    2               break;
      265       265    2            case ENIGNMASK:
      266       266    2               kill_sim();
      267       267    2               break;
      268       268    2         }
      269       269    1        }
      270       270
      271       271             kill_indir(enp)
      272       272              entity_p enp;
      273       273             {
      274       274    1         /* An indirect store is done, in an ENINDIR,
      275       275    1          * an ENOFFSETTED or an ENARRELEM.
      276       276    1          */
      277       277    1         entity_p p;
      278       278    1
      279       279    1         /* If we can find the (base) address of this entity, then we can spare
      280       280    1          * the entities that are provably not pointed to by the address.
      281       281    1          * We will also make use of the MES 3 pseudo's, generated by
      282       282    1          * the front-end. When a MES 3 is generated for a local, this local
      283       283    1          * will not be referenced indirectly.
      284       284    1          */
      285       285    1         if ((p = find_base(base_valno(enp))) == (entity_p) 0) {
      286       286    2            kill_much(); /* Kill all entities without registermessage. */
      287       287    2         } else {
      288       288    2            switch (p->en_kind) {
      289       289    3               case ENAEXTERNAL:
      290       290    3                  /* An indirect store into global data. */
      291       291    3                  kill_external(p->en_ext, TRUE);
      292       292    3                  break;
      293       293    3               case ENALOCAL:
      294       294    3               case ENALOCBASE:
      295       295    3               case ENAARGBASE:
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      296       296    3                  /* An indirect store into stack data.  */
      297       297    3                  kill_local(p, TRUE);
      298       298    3                  break;
      299       299    3            }
      300       300    2         }
      301       301    1        }
      302       302
      303       303             kill_much()
      304       304             {
      305       305    1         /* Kills all killable entities,
      306       306    1          * except the locals for which a registermessage was generated.
      307       307    1          */
      308       308    1         register Lindex i;
      309       309    1
      310       310    1         OUTTRACE("kill much", 0);
      311       311    1         for (i = Lfirst(entities); i != (Lindex) 0; i = Lnext(i, entities)) {
      312       312    2            register entity_p rep = en_elem(i);
      313       313    2
      314       314    2            if (rep->en_static) continue;
      315       315    2            if (rep->en_kind == ENLOCAL && is_regvar(rep->en_loc)) continue;
      316       316    2            OUTTRACE("kill %d", rep->en_vn);
      317       317    2            rep->en_vn = newvalnum();
      318       318    2         }
      319       319    1        }
      320       320
      321       321             STATIC bool bad_procflags(pp)
      322       322              proc_p pp;
      323       323             {
      324       324    1         /* Return whether the flags about the procedure in pp indicate
      325       325    1          * that we have little information about it. It might be that
      326       326    1          * we haven't seen the text of pp, or that we have seen that pp
      327       327    1          * calls a procedure which we haven't seen the text of.
      328       328    1          */
      329       329    1         return !(pp->p_flags1 & PF_BODYSEEN) || (pp->p_flags1 & PF_CALUNKNOWN);
      330       330    1        }
      331       331
      332       332             STATIC kill_globset(s)
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      333       333              cset s;
      334       334             {
      335       335    1         /* S is a set of global variables that might be changed.
      336       336    1          * We act as if a direct store is done into each of them.
      337       337    1          */
      338       338    1         register Cindex i;
      339       339    1
      340       340    1         OUTTRACE("kill globset", 0);
      341       341    1         for (i = Cfirst(s); i != (Cindex) 0; i = Cnext(i,s)) {
      342       342    2            kill_external(omap[Celem(i)], FALSE);
      343       343    2         }
      344       344    1        }
      345       345
      346       346             kill_call(pp)
      347       347              proc_p pp;
      348       348             {
      349       349    1         /* Kill everything that might be destroyed by calling
      350       350    1          * the procedure in pp.
      351       351    1          */
      352       352    1         if (bad_procflags(pp)) {
      353       353    2            /* We don't know enough about this procedure. */
      354       354    2            kill_much();
      355       355    2         } else if (pp->p_change->c_flags & CF_INDIR) {
      356       356    2            /* The procedure does an indirect store. */
      357       357    2            kill_much();
      358       358    2         } else {
      359       359    2            /* Procedure might affect global data. */
      360       360    2            kill_globset(pp->p_change->c_ext);
      361       361    2         }
      362       362    1        }
      363       363
      364       364             kill_all()
      365       365             {
      366       366    1         /* Kills all entities. */
      367       367    1
      368       368    1         register Lindex i;
      369       369    1
CC.C03    File=zbe$cs_kill:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      370       370    1         OUTTRACE("kill all entities", 0);
      371       371    1         for (i = Lfirst(entities); i != (Lindex) i; i = Lnext(i, entities)) {
      372       372    2            entity_p enp = en_elem(i);
      373       373    2
      374       374    2            OUTTRACE("kill %d", enp->en_vn);
      375       375    2            enp->en_vn = newvalnum();
      376       376    2         }
      377       377    1        }
      378       378
---  Include file information  ---

   em_mnem:h.:ZBC3TOU. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   zbe$cs:h.:ZBC3TOU. is referenced
   zbe$cs_aux:h.:ZBC3TOU. is referenced
   zbe$cs_debug:h.:ZBC3TOU. is referenced
   zbe$cs_avail:h.:ZBC3TOU. is referenced
   zbe$cs_entity:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$cs_kill:c.:ZBC3TSI
