

CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ra_xform.c,v 1.3 87/03/10 11:27:33 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  R E G I S T E R   A L L O C A T I O N
        7         7              *
        8         8              *  R A _ X F O R M . C
        9         9              */
       10        10
       11        11             #include "types:h"
       12        12             #include "debug:h"
       13        13             #include "def:h"
       14        14             #include "global:h"
       15        15             #include "lset:h"
       16        16             #include "aux:h"
       17        17             #include "alloc:h"
       18        18             #include "em_mnem:h"
       19        19             #include "em_spec:h"
       20        20             #include "em_pseu:h"
       21        21             #include "em_mes:h"
       22        22             #include "em_reg:h"
       23        23             #include "ra:h"
       24        24             #include "ra_interv:h"
       25        25             #include "ra_xform:h"
       26        26             #include "ra_items:h"
       27        27
       28        28
       29        29             /* The replacement table is used to transform instructions that reference
       30        30              * items other than local variables (i.e. the address of a local or global
       31        31              * variable or a single/double constant; the transformation of an instruction
       32        32              * that references a local variable is very simple).
       33        33              * The generated code depends on the word and pointer size of the target
       34        34              * machine.
       35        35              */
       36        36
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=2  
       37        37
       38        38             struct repl {
       39        39    1         short r_instr; /* instruction    */
       40        40    1         short r_op;    /* operand     */
       41        41    1        };
       42        42
       43        43             /* REGNR,NO and STOP should not equal the wordsize or pointer size
       44        44              * of any machine.
       45        45              */
       46        46             #define   REGNR -3
       47        47             #define   NO -2
       48        48             #define   STOP  -1
       49        49             #define   PS 0
       50        50             #define   PS2   1
       51        51             #define   WS 2
       52        52             #define   WS2   3
       53        53
       54        54             #define LOAD_POINTER  op_nop
       55        55             #define   BLANK    {0, STOP}
       56        56
       57        57             #define NRREPLACEMENTS   13
       58        58             #define   REPL_LENGTH 3
       59        59
       60        60             struct repl repl_tab[NRREPLACEMENTS][REPL_LENGTH] = {
       61        61    1         /* 0 */  {{op_lil, REGNR}, BLANK,      BLANK},
       62        62    1         /* 1 */  {{LOAD_POINTER,REGNR},  {op_loi,PS},   {op_loi,WS}},
       63        63    1         /* 2 */  {{LOAD_POINTER,REGNR},  BLANK,      BLANK},
       64        64    1         /* 3 */ {{LOAD_POINTER,REGNR},   {op_loi,WS2},  BLANK},
       65        65    1         /* 4 */  {{op_sil,REGNR},  BLANK,      BLANK},
       66        66    1         /* 5 */  {{LOAD_POINTER,REGNR},  {op_loi,PS},   {op_sti,WS}},
       67        67    1         /* 6 */  {{LOAD_POINTER,REGNR},  {op_sti,WS2},  BLANK},
       68        68    1         /* 7 */  {{op_lil,REGNR},  {op_inc,NO},   {op_sil,REGNR}},
       69        69    1         /* 8 */  {{op_lil,REGNR},  {op_dec,NO},   {op_sil,REGNR}},
       70        70    1         /* 9 */  {{op_zer,WS},     {op_sil,REGNR},   BLANK},
       71        71    1         /*10 */  {{op_lol,REGNR},  BLANK,      BLANK},
       72        72    1         /*11 */  {{op_ldl,REGNR},  BLANK,      BLANK},
       73        73    1         /*12 */  {{LOAD_POINTER,REGNR},  {op_cai,NO},   BLANK},
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=3  
       74        74    1        };
       75        75
       76        76
       77        77
       78        78
       79        79             init_replacements(psize,wsize)
       80        80              short psize,wsize;
       81        81             {
       82        82    1         /* The replacement code to be generated depends on the
       83        83    1          * wordsize and pointer size of the target machine.
       84        84    1          * The replacement table is initialized with a description
       85        85    1          * of which sizes to use. This routine inserts the real sizes.
       86        86    1          * It also inserts the actual EM instruction to be used
       87        87    1          * as a 'Load pointer' instruction.
       88        88    1          */
       89        89    1
       90        90    1         register int i,j;
       91        91    1         short load_pointer;
       92        92    1         struct repl *r;
       93        93    1
       94        94    1         assert (psize == wsize || psize == 2*wsize);
       95        95    1         load_pointer = (psize == wsize ? op_lol : op_ldl);
       96        96    1         for (i = 0; i < NRREPLACEMENTS; i++) {
       97        97    2            for (j = 0; j < REPL_LENGTH; j++) {
       98        98    3               r = &repl_tab[i][j];
       99        99    3               if (r->r_op == STOP) break;
      100       100    3               if (r->r_instr == LOAD_POINTER) {
      101       101    4                  r->r_instr = load_pointer;
      102       102    4               }
      103       103    3               switch (r->r_op) {
      104       104    4                  /* initially r_op describes how to compute
      105       105    4                   * the real operand of the instruction. */
      106       106    4                  case PS2:
      107       107    4                     r->r_op = 2*psize;
      108       108    4                     break;
      109       109    4                  case PS:
      110       110    4                     r->r_op = psize;
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=4  
      111       111    4                     break;
      112       112    4                  case WS2:
      113       113    4                     r->r_op = 2*wsize;
      114       114    4                     break;
      115       115    4                  case WS:
      116       116    4                     r->r_op = wsize;
      117       117    4                     break;
      118       118    4                  case NO:
      119       119    4                  case REGNR: /* use offset of dummy local,
      120       120    4                         * will be filled in later.
      121       121    4                         */
      122       122    4                     break;
      123       123    4                  default: assert(FALSE);
      124       124    4               }
      125       125    3            }
      126       126    2         }
      127       127    1        }
      128       128
      129       129
      130       130
      131       131             STATIC int repl_index(l)
      132       132              line_p l;
      133       133             {
      134       134    1         return itemtab[INSTR(l) - sp_fmnem].id_replindex;
      135       135    1        }
      136       136
      137       137
      138       138
      139       139             STATIC bool is_current(alloc,t)
      140       140              alloc_p alloc;
      141       141              short t;
      142       142             {
      143       143    1         /* Is time t part of alloc's timespan? */
      144       144    1
      145       145    1         return contains(t,alloc->al_timespan);
      146       146    1        }
      147       147
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=5  
      148       148
      149       149             STATIC match_item(item,l)
      150       150              item_p item;
      151       151              line_p l;
      152       152             {
      153       153    1         /* See if the item used by l is the same one as 'item' */
      154       154    1         struct item thisitem;
      155       155    1
      156       156    1         fill_item(&thisitem,l);
      157       157    1         if (item->it_type == LOCAL_ADDR && thisitem.it_type == LOCALVAR) {
      158       158    2            /* The usage of a local variable is also considered to
      159       159    2             * be the usage of the address of that variable.
      160       160    2             */
      161       161    2            thisitem.it_type = LOCAL_ADDR;
      162       162    2         }
      163       163    1         return item->it_type == thisitem.it_type && same_item(item,&thisitem);
      164       164    1        }
      165       165
      166       166
      167       167
      168       168             STATIC alloc_p find_alloc(alloclist,l,t)
      169       169              alloc_p alloclist;
      170       170              line_p l;
      171       171              short t;
      172       172             {
      173       173    1         /* See if any of the allocations of the list applies to instruction
      174       174    1          * l at time t.
      175       175    1          */
      176       176    1
      177       177    1         register alloc_p alloc,m;
      178       178    1
      179       179    1         for (alloc = alloclist; alloc != (alloc_p) 0; alloc = alloc->al_next) {
      180       180    2            for (m = alloc; m != (alloc_p) 0; m = m->al_mates) {
      181       181    3               if (is_current(m,t) && match_item(m->al_item,l)) {
      182       182    4                  return m;
      183       183    4               }
      184       184    3            }
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=6  
      185       185    2         }
      186       186    1         return (alloc_p) 0;
      187       187    1        }
      188       188
      189       189
      190       190             STATIC replace_line(l,b,list)
      191       191              line_p l,list;
      192       192              bblock_p b;
      193       193             {
      194       194    1         if (b->b_start == l) {
      195       195    2            b->b_start = list;
      196       196    2         } else {
      197       197    2            if (PREV(l) !=0 && PREV(l)->l_next != (line_p) 0) {
      198       198    3               PREV(l)->l_next = list; }
      199       199    2         }
      200       200    1         if (PREV(l) != (line_p) 0) {
      201       201    2            PREV(list) = PREV(l); }
      202       202    1         while (list->l_next != (line_p) 0) {
      203       203    2            list = list->l_next;
      204       204    2         }
      205       205    1         list->l_next = l->l_next;
      206       206    1         if (l->l_next != (line_p) 0 && PREV(l) != (line_p) 0) {
      207       207    2            PREV(l->l_next) = list;
      208       208    2         }
      209       209    1         oldline(l);
      210       210    1        }
      211       211
      212       212
      213       213             STATIC line_p repl_code(lnp,regnr)
      214       214              line_p lnp;
      215       215              offset  regnr;
      216       216             {
      217       217    1         line_p head,*q,l,prev = (line_p) 0;
      218       218    1         int i,index;
      219       219    1         struct repl *r;
      220       220    1
      221       221    1         q = &head;
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=7  
      222       222    1         index = repl_index(lnp);
      223       223    1         for (i = 0; i < REPL_LENGTH; i++) {
      224       224    2            r = &repl_tab[index][i];
      225       225    2            if (r->r_op == STOP) break;  /* replacement < REPL_LENGTH */
      226       226    2            switch(r->r_op) {
      227       227    3               case REGNR:
      228       228    3                  l = int_line(regnr);
      229       229    3                  break;
      230       230    3               case NO:
      231       231    3                  l = newline(OPNO);
      232       232    3                  break;
      233       233    3               default:
      234       234    3                  l = newline(OPSHORT);
      235       235    3                  SHORT(l) = r->r_op;
      236       236    3                  break;
      237       237    3            }
      238       238    2            *q = l;
      239       239    2            l->l_instr = r->r_instr;
      240       240    2            PREV(l) = prev;
      241       241    2            prev = l;
      242       242    2            q = &l->l_next;
      243       243    2         }
      244       244    1         return head;
      245       245    1        }
      246       246
      247       247
      248       248
      249       249             STATIC apply_alloc(b,l,alloc)
      250       250              bblock_p b;
      251       251              line_p l;
      252       252              alloc_p alloc;
      253       253             {
      254       254    1         /* 'l' is an EM instruction using an item that will be put in
      255       255    1          * a register. Generate new code that uses the register instead
      256       256    1          * of the item.
      257       257    1          * If the item is a local variable the new code is the same as
      258       258    1          * the old code, except for the fact that the offset of the
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=8  
      259       259    1          * local is changed (it now uses the dummy local that will be
      260       260    1          * put in a register by the code generator).
      261       261    1          * If the item is a constant, the new code is a LOL or LDL.
      262       262    1          * If the item is the address of a local or global variable, things
      263       263    1          * get more complicated. The new code depends on the instruction
      264       264    1          * that uses the item (i.e. l). The new code, which may consist of
      265       265    1          * several instructions, is obtained by consulting a replacement
      266       266    1          * table.
      267       267    1          */
      268       268    1
      269       269    1         line_p newcode;
      270       270    1
      271       271    1         if (alloc->al_item->it_type == LOCALVAR) {
      272       272    2            SHORT(l) = alloc->al_dummy;
      273       273    2         } else {
      274       274    2            newcode = repl_code(l,alloc->al_dummy);
      275       275    2            replace_line(l,b,newcode);
      276       276    2         }
      277       277    1        }
      278       278
      279       279
      280       280
      281       281             STATIC int loaditem_tab[NRITEMTYPES][2] =
      282       282             {   /*       WS    2 * WS */
      283       283    1         /*LOCALVAR*/   op_lol,     op_ldl,
      284       284    1         /*LOCAL_ADDR*/ op_lal,     op_lal,
      285       285    1         /*GLOBL_ADDR*/ op_lae,     op_lae,
      286       286    1         /*PROC_ADDR*/  op_lpi,     op_lpi,
      287       287    1         /*CONST*/   op_loc,     op_nop,
      288       288    1         /*DCONST*/  op_nop,     op_ldc
      289       289    1        };
      290       290
      291       291
      292       292             STATIC line_p load_item(item)
      293       293              item_p item;
      294       294             {
      295       295    1         /* Generate an EM instruction that loads the item on the stack */
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=9  
      296       296    1
      297       297    1         line_p l;
      298       298    1
      299       299    1         switch (item->it_type) {
      300       300    2            case GLOBL_ADDR:
      301       301    2               l = newline(OPOBJECT);
      302       302    2               OBJ(l) = item->i_t.it_obj;
      303       303    2               break;
      304       304    2            case PROC_ADDR:
      305       305    2               l = newline(OPPROC);
      306       306    2               PROC(l) = item->i_t.it_proc;
      307       307    2               break;
      308       308    2            default:
      309       309    2               l = int_line(item->i_t.it_off);
      310       310    2         }
      311       311    1         l->l_instr = loaditem_tab[item->it_type][item->it_size == ws ? 0 : 1];
      312       312    1         assert(l->l_instr != op_nop);
      313       313    1         return l;
      314       314    1        }
      315       315
      316       316
      317       317             STATIC line_p store_local(size,off)
      318       318              short size;
      319       319              offset off;
      320       320             {
      321       321    1         line_p l = int_line(off);
      322       322    1
      323       323    1         l->l_instr = (size == ws ? op_stl : op_sdl);
      324       324    1         return l;
      325       325    1        }
      326       326
      327       327
      328       328
      329       329             STATIC line_p init_place(b)
      330       330              bblock_p b;
      331       331             {
      332       332    1
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=10 
      333       333    1         register line_p l,prev;
      334       334    1
      335       335    1         prev = (line_p) 0;
      336       336    1         for (l = b->b_start; l != (line_p) 0; l = l->l_next) {
      337       337    2            switch(INSTR(l)) {
      338       338    3               case ps_mes:
      339       339    3               case ps_pro:
      340       340    3               case op_lab:
      341       341    3                  break;
      342       342    3               default:
      343       343    3                  return prev;
      344       344    3            }
      345       345    2            prev =l;
      346       346    2         }
      347       347    1         return prev;
      348       348    1        }
      349       349
      350       350
      351       351
      352       352             STATIC append_code(l1,l2,b)
      353       353              line_p l1,l2;
      354       354              bblock_p b;
      355       355             {
      356       356    1         /* Append instruction l1 and l2 at begin of block b */
      357       357    1
      358       358    1         line_p l;
      359       359    1
      360       360    1         DLINK(l1,l2);
      361       361    1         l = init_place(b);
      362       362    1         if (l == (line_p) 0) {
      363       363    2            l2->l_next = b->b_start;
      364       364    2            b->b_start = l1;
      365       365    2            PREV(l1) = (line_p) 0;
      366       366    2         } else {
      367       367    2            l2->l_next = l->l_next;
      368       368    2            DLINK(l,l1);
      369       369    2         }
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=11 
      370       370    1         if (l2->l_next != (line_p) 0) {
      371       371    2            PREV(l2->l_next) = l2;
      372       372    2         }
      373       373    1        }
      374       374
      375       375
      376       376
      377       377             STATIC emit_init_code(list)
      378       378              alloc_p list;
      379       379             {
      380       380    1         /* Emit initialization code for all packed allocations.
      381       381    1          * This code looks like "dummy_local := item", e.g.
      382       382    1          * "LOC 25 ; STL -10" in EM terminology.
      383       383    1          */
      384       384    1
      385       385    1         register alloc_p alloc,m;
      386       386    1         Lindex bi;
      387       387    1         bblock_p b;
      388       388    1
      389       389    1         for (alloc = list; alloc != (alloc_p) 0; alloc = alloc->al_next) {
      390       390    2            for (m = alloc; m != (alloc_p) 0; m = m->al_mates) {
      391       391    3               for (bi = Lfirst(m->al_inits); bi != (Lindex) 0;
      392       392    3                          bi = Lnext(bi,m->al_inits)) {
      393       393    4                  /* "inits" contains all initialization points */
      394       394    4                  b = (bblock_p) Lelem(bi);
      395       395    4                  append_code(load_item(m->al_item),
      396       396    4                         store_local(m->al_item->it_size,
      397       397    4                           m->al_dummy),
      398       398    4                         b);
      399       399    4               }
      400       400    3            }
      401       401    2         }
      402       402    1        }
      403       403
      404       404
      405       405
      406       406             STATIC emit_mesregs(p,alloclist)
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=12 
      407       407              proc_p  p;
      408       408              alloc_p alloclist;
      409       409             {
      410       410    1         line_p l,m,x;
      411       411    1         alloc_p alloc;
      412       412    1
      413       413    1
      414       414    1         l = p->p_start->b_start;
      415       415    1         x = l->l_next;
      416       416    1         for (alloc = alloclist; alloc != (alloc_p) 0; alloc = alloc->al_next) {
      417       417    2            m = reg_mes(alloc->al_dummy,alloc->al_item->it_size,
      418       418    2               alloc->al_regtype,INFINITE);
      419       419    2            DLINK(l,m);
      420       420    2            l = m;
      421       421    2         }
      422       422    1         if (x != (line_p) 0) DLINK(l,x);
      423       423    1        }
      424       424
      425       425             #define is_mesreg(l)  (INSTR(l) == ps_mes && aoff(ARG(l),0) == ms_reg)
      426       426
      427       427
      428       428
      429       429             rem_mes(p)
      430       430              proc_p p;
      431       431             {
      432       432    1         register bblock_p b;
      433       433    1         register line_p l,next;
      434       434    1         offset m;
      435       435    1
      436       436    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      437       437    2            for (l = b->b_start; l != (line_p) 0; l = next) {
      438       438    3               next = l->l_next;
      439       439    3               if ( INSTR(l) == ps_mes &&
      440       440    3                   ((m = aoff(ARG(l),0)) == ms_liv || m == ms_ded)) {
      441       441    4                     /* remove live/dead messages */
      442       442    4                     rm_line(l,b);
      443       443    4               }
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=13 
      444       444    3            }
      445       445    2         }
      446       446    1        }
      447       447
      448       448
      449       449
      450       450             xform_proc(p,alloclist,nrinstrs,instrmap)
      451       451              proc_p p;
"zbe$ra_xform:c.:ZBC3TSI", line 451: (warning) identifier "nrinstrs" is not used
"zbe$ra_xform:c.:ZBC3TSI", line 451: (warning) identifier "instrmap" is not used
      452       452              alloc_p alloclist;
      453       453              short nrinstrs;
      454       454              line_p instrmap[];
      455       455             {
      456       456    1         /* Transform every instruction of procedure p that uses an item
      457       457    1          * at a point where the item is kept in a register.
      458       458    1          */
      459       459    1
      460       460    1         register short now = 0;
      461       461    1         register line_p l,next;
      462       462    1         register bblock_p b;
      463       463    1         alloc_p alloc;
      464       464    1
      465       465    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      466       466    2            for (l = b->b_start; l != (line_p) 0; l = next) {
      467       467    3               next = l->l_next;
      468       468    3               if (is_mesreg(l) && ARG(l)->a_next != (arg_p) 0 &&
      469       469    3                  aoff(ARG(l),4) != INFINITE) {
      470       470    4                  /* All register messages for local variables
      471       471    4                        * that were not assigned a register get
      472       472    4                   * their 'count' fields* set to 0.
      473       473    4                   */
      474       474    4                  ARG(l)->a_next->a_next->a_next
      475       475    4                     ->a_next->a_a.a_offset = 0;
      476       476    4               }
      477       477    3               if (is_item(l) &&
      478       478    3                   (alloc = find_alloc(alloclist,l,now))
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=14 
      479       479    3                          != (alloc_p) 0 ) {
      480       480    4                  apply_alloc(b,l,alloc);
      481       481    4               }
      482       482    3               now++;
      483       483    3            }
      484       484    2         }
      485       485    1         emit_init_code(alloclist);
      486       486    1         emit_mesregs(p,alloclist);
      487       487    1         rem_mes(p);
      488       488    1        }
      489       489
      490       490
      491       491
      492       492
      493       493             STATIC bool always_in_reg(off,allocs,size_out)
      494       494              offset off;
      495       495              alloc_p allocs;
      496       496              short *size_out;
      497       497             {
      498       498    1         /* See if the local variable with the given offset is stored
      499       499    1          * in a register during its entire lifetime. As a side effect,
      500       500    1          * return the size of the local.
      501       501    1          */
      502       502    1
      503       503    1         alloc_p alloc,m;
      504       504    1         item_p item;
      505       505    1
      506       506    1         for (alloc = allocs; alloc != (alloc_p) 0; alloc = alloc->al_next) {
      507       507    2            for (m = alloc; m != (alloc_p) 0; m = m->al_mates) {
      508       508    3               item = m->al_item;
      509       509    3               if (m->al_iswholeproc &&
      510       510    3                   item->it_type == LOCALVAR &&
      511       511    3                   item->i_t.it_off == off) {
      512       512    4                  *size_out = item->it_size;
      513       513    4                  return TRUE;
      514       514    4               }
      515       515    3            }
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=15 
      516       516    2         }
      517       517    1         return FALSE;
      518       518    1        }
      519       519
      520       520
      521       521             rem_locals(p,allocs)
      522       522              proc_p p;
      523       523              alloc_p allocs;
      524       524             {
      525       525    1         /* Try to decrease the number of locals of procedure p, by
      526       526    1          * looking at which locals are always stored in a register.
      527       527    1          */
      528       528    1
      529       529    1         offset nrlocals = p->p_localbytes;
      530       530    1         short size;
      531       531    1
      532       532    1         while (nrlocals > 0) {
      533       533    2            /* A local can only be removed if all locals with
      534       534    2             * higher offsets are removed too.
      535       535    2             */
      536       536    2            if (always_in_reg(-nrlocals,allocs,&size)) {
      537       537    3               OUTVERBOSE("local %d removed from proc %d\n",
      538       537    3                  nrlocals,p->p_id);
      539       538    3               nrlocals -= size;
      540       539    3            } else {
      541       540    3               break;
      542       541    3            }
      543       542    2         }
      544       543    1         p->p_localbytes = nrlocals;
      545       544    1        }
      546       545             rem_formals(p,allocs)
      547       546              proc_p p;
      548       547              alloc_p allocs;
      549       548             {
      550       549    1         /* Try to decrease the number of formals of procedure p, by
      551       550    1          * looking at which formals are always stored in a register.
      552       551    1          */
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=16 
      553       552    1
      554       553    1         offset nrformals = p->p_nrformals;
      555       554    1         offset off = 0;
      556       555    1         short size;
      557       556    1
      558       557    1         if (nrformals == UNKNOWN_SIZE) return;
      559       558    1         while (off < nrformals) {
      560       559    2            if (always_in_reg(off,allocs,&size)) {
      561       560    3               OUTVERBOSE("formal %d removed from proc %d\n",
      562       560    3                  off,p->p_id);
      563       561    3               off += size;
      564       562    3            } else {
      565       563    3               break;
      566       564    3            }
      567       565    2         }
      568       566    1         if (nrformals == off) {
      569       567    2            OUTVERBOSE("all formals of procedure %d removed\n",p->p_id,0);
      570       568    2            p->p_nrformals = ZEROPARAMS;
      571       569    2         }
      572       570    1        }
      573       571
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_mes:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   zbe$ra:h.:ZBC3TOU. is referenced
   zbe$ra_interv:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$ra_xform:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=17 
   zbe$ra_xform:h.:ZBC3TOU. is referenced
   zbe$ra_items:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbe$ra_xform:c.:ZBC3TSI
