

12:27 AUG 20 '97 zb6$ougen:h.:ZBC3TSI                                      1    
    1      /*
    2            This file is the major include file foe the CP-6 o.u.
    3            generation. It contains defines for structs and references
    4            for ids that are used in the generation of CP-6 object
    5            units.
    6      */
    7
    8      #define N  ((void *) NULL)
    9      #define COMPILER_ID  13   /*  C compiler id is set for delta */
   10      extern int sublog_ops[];
   11      #define CODESECT   1
   12      #define DATASECT   0
   13      #define CONSSECT   6
   14      #define NONAME     -1
   15      #define NOINIT     0
   16      #define ZEROINIT   (1 << 35)
   17      #define EVENBOUND  0
   18      #define EIGHTBOUND  2
   19
   20      /* o.u. relocation operators.  */
   21      #define  RELADDOP   1
   22      #define  RELSTORER 14
   23
   24      #define  FREF_LBL   1
   25      #define  FREF_AUTO  2
   26      #define  FREF_DBL   3
   27      #define  FREF_SNAM  5
   28      #define  FREF_SLBL  6
   29
   30
   31      #define DIG_MASK 017
   32      #define INT_LIT    1
   33      #define FLOAT_LIT  2
   34      #define DFLOAT_LIT 3
   35      #define TEXT_LIT   4
   36      #define HEX_LIT    5
   37      #define OCT_LIT    6
12:27 AUG 20 '97 zb6$ougen:h.:ZBC3TSI                                      2    
   38      #define DEC_LIT    7
   39
   40      #define UHALF_WORD   2
   41      #define LHALF_WORD   5
   42
   43
   44      #define INST_STD   1
   45      #define INST_PTR   2
   46      #define INST_EIS   3
   47      /*    defines for data alignment in code o.u. generation. */
   48      #define DBL_ALIGN  0
   49      #define WRD_ALIGN  1
   50      #define HALF_ALIGN  2
   51      #define CHAR_ALIGN  3
   52      #define BIT_ALIGN  4
   53
   54      /*    DEFINES FOR SYMBOL TABLE CLASSES  */
   55      #define EQU_CLASS  1
   56      #define NO_CLASS  0
   57      #define SCALAR_CLASS  2
   58      #define ARRAY_CLASS  3
   59      #define FUNCTION_CLASS  4
   60      #define EXT_SYM_CLASS  5
   61
   62      /*    defines for address field types.   */
   63      #define  STATIC_TYPE  1
   64      #define  AUTO_TYPE  2
   65      #define  SYMREF_TYPE  3
   66      #define  SYMDEF_TYPE  4
   67      #define  FIELD_TYPE  5
   68      #define  BASED_TYPE  6
   69
   70      /*    the following are used for debug record generation. */
   71      #define SCALAR_ARRAY  0
   72      #define VECTOR0_ARRAY  1
   73      #define GENERAL_ARRAY  3
   74
12:27 AUG 20 '97 zb6$ougen:h.:ZBC3TSI                                      3    
   75
   76
   77      /*    The following is the structure used to keep tract of the
   78            the different sections that are used in the ou generation. */
   79
   80      struct sec_table {
   81            int curr_offset ;
   82            int size  ;
   83            char name[20] ;
   84            } ;
   85
   86
   87
   88      /*    The following are ids that are used in the ougen processing.
   89      */
   90
   91      extern int static_data_flag;
   92      extern char static_data_name[];
   93      extern char static_con_name[];
   94      extern int static_terminate_flag;
   95      extern int static_first_use_flag;
   96      extern int have_static_flag;
   97      extern char static_name[];
   98      extern int compiler_id ;
   99      extern int datasect ;
  100      extern int conssect ;
  101      extern int eightbound ;
  102      extern int evenbound ;
  103      extern int static_con_size;
  104      extern int static_data_size;
  105      extern int static_data_ref_num;
  106      extern int static_con_ref_num;
  107      extern  int procsec ;
  108      extern  int datasec ;
  109      extern  int conssec ;
  110      extern int instr_flag ;
  111      extern int symdef_flag ;
12:27 AUG 20 '97 zb6$ougen:h.:ZBC3TSI                                      4    
  112      extern int log_blk_num ;
  113      extern int curr_line_no ;
  114      extern int zero_val;
  115      extern int std_call;
  116      extern int xbo_seg_ref_id;
  117      extern int first_prog_line;
  118
  119      extern struct sec_table s_s_table[] ;
  120
  121      struct instr {
  122            char name_[20];
  123            int op_code;
  124            int assoc_register;
  125            int addr_offset;
  126            int addr_reloc_sec;
  127            int index ;
  128            int have_index ;
  129            int ptr_reg ;
  130            int have_ptr_reg ;
  131            int tag ;
  132            };
  133
  134      extern int forward_ref_flag ;
  135      extern int forward_ref_count;
  136      struct  forward_ref {
  137            int *fwd_tbl [10];
  138              };
  139
  140      typedef struct forward_ref *fwd_ref_p;
  141      extern fwd_ref_p  fwd_p;
  142
  143      extern int fwd_tbl_size;
  144
  145      extern int error_severity ;
  146      extern int reloc_type ;
  147      extern int reloc_section ;
  148      extern int reloc_directive ;
12:27 AUG 20 '97 zb6$ougen:h.:ZBC3TSI                                      5    
  149      extern int curr_con_section ;
  150      extern int eol_flag ;
  151      extern ref_name_flag;
  152      extern int have_static_flag;
  153      extern char static_total_name[];
  154      extern struct instr curr_instr ;
  155      extern struct instr prev_instr ;
  156      extern struct instr next_instr ;
  157
  158      /*    Instruction structures follow here.   */
  159
  160      struct inst_std_ptr {
  161            unsigned pr_reg :3 ;
  162            unsigned y_field :15 ;
  163            unsigned op_code :10 ;
  164            unsigned null1 :1 ;
  165            unsigned pr :1 ;
  166            unsigned tag_tm :2 ;
  167            unsigned tag_td :4 ; } ;
  168
  169      struct inst_std {
  170            unsigned y_field :18 ;
  171            unsigned op_code :10 ;
  172            unsigned null1 :2 ;
  173            unsigned tag_tm :2 ;
  174            unsigned tag_td :4 ; } ;
  175
  176      struct tag_field {
  177            unsigned tm :2 ;
  178            unsigned tg :4 ; } ;
  179
  180      struct inst_eis_char {
  181            unsigned fill :9 ;
  182            unsigned null2 :2 ;
  183            unsigned ref2_pr :1 ;
  184            unsigned ref2_rl :1 ;
  185            unsigned ref2_id :1 ;
12:27 AUG 20 '97 zb6$ougen:h.:ZBC3TSI                                      6    
  186            unsigned ref2_reg :4 ;
  187            unsigned op_code :10 ;
  188            unsigned null1   :1 ;
  189            unsigned ref1_pr :1 ;
  190            unsigned ref1_rl :1 ;
  191            unsigned ref1_id :1 ;
  192            unsigned ref1_reg :4 ; } ;
  193      struct inst_eis_three {
  194            unsigned fill :2 ;
  195            unsigned ref3_pr :1 ;
  196            unsigned ref3_rl :1 ;
  197            unsigned ref3_id :1 ;
  198            unsigned ref3_reg :4 ;
  199            unsigned null2 :2 ;
  200            unsigned ref2_pr :1 ;
  201            unsigned ref2_rl :1 ;
  202            unsigned ref2_id :1 ;
  203            unsigned ref2_reg :4 ;
  204            unsigned op_code :10 ;
  205            unsigned null1   :1 ;
  206            unsigned ref1_pr :1 ;
  207            unsigned ref1_rl :1 ;
  208            unsigned ref1_id :1 ;
  209            unsigned ref1_reg :4 ; } ;
  210
  211      /*    The following strctures describe the operands for the eis
  212            instructions that are genreated for mlr and mrl instructions.
  213      */
  214
  215      struct eis_oper {
  216            int word_offset;
  217            int byte_offset;
  218            int len ;
  219            int have_ptr ;
  220            int ptr_reg ;
  221            int have_reloc_addr ;
  222            int reloc_section ;
12:27 AUG 20 '97 zb6$ougen:h.:ZBC3TSI                                      7    
  223            int reloc_type  ;
  224             } ;
  225
  226      struct eis_desc {
  227            unsigned word_offset :18 ;
  228            unsigned byte_offset :2 ;
  229            unsigned null1  :4 ;
  230            unsigned len  :12 ;
  231             } ;
  232
  233      struct eis_desc_ptr {
  234            unsigned ptr  :3 ;
  235            unsigned word_offset :15 ;
  236            unsigned byte_offset :2 ;
  237            unsigned null1  :4 ;
  238            unsigned len  :12 ;
  239             } ;
  240
  241      /*    The following structure defines the instruction set
  242            for all the instructions that are produced by the
  243            o.u. generator.
  244      */
  245      struct reloc_struct {
  246            int start_bit ;
  247            int end_bit ;
  248            int type ; } ;
  249
  250      /*    The following are definitions for instruction tables.
  251      */
  252      extern int load_ops[];
  253      extern int store_ops[];
  254      extern int load_comp_ops[];
  255      extern int eppr_ops[];
  256      extern int add_ops[];
  257      extern int addlog_ops[];
  258      extern int sub_ops[];
  259      extern int comp_ops[];
12:27 AUG 20 '97 zb6$ougen:h.:ZBC3TSI                                      8    
  260      extern int add_storage_ops[];
  261      extern int and_ops[];
  262      extern int ld_xr_ops[];
  263      extern int st_xr_ops[];
  264      extern int or_ops[];
  265      extern int ea_ops[];
  266      extern int eor_ops[];
  267      extern int eor_store_ops[];
  268      extern int left_shift_ops[];
  269      extern int left_rotate_ops[];
  270      extern int right_shift_ops[];
  271      extern int right_logical_ops[];

