

11:03 AUG 20 '97 zbl$llgen$rec:h.:ZBC3TSI                                  1    
    1      /*
    2       * Some grammar independent code.
    3       * This file is copied into Lpars.c.
    4       */
    5
    6      # ifndef lint
    7      static char *rcsid = "$Header: rec,v 2.9 87/03/17 22:41:18 ceriel Exp $";
    8      # endif
    9
   10      # ifdef LL_DEBUG
   11      # include <stdio:h>
   12      # endif
   13
   14      unsigned int LLtcnt[LL_NTERMINALS];
   15      unsigned int LLscnt[LL_NSETS];
   16      int    LLcsymb, LLsymb;
   17      static int   LLlevel;
   18
   19      /* In this file are defined: */
   20      extern    LLread();
   21      extern int   LLskip();
   22      extern int   LLnext();
   23      extern    LLscan();
   24      extern    LLerror();
   25      # ifndef LLNOFIRSTS
   26      extern int   LLfirst();
   27      # endif
   28      extern    LLnewlevel();
   29      extern    LLoldlevel();
   30
   31      LLscan(t) {
   32       /*
   33        * Check if the next symbol is equal to the parameter
   34        */
   35       if ((LLsymb = LL_LEXI()) <= 0) LLsymb = EOFILE;
   36       if (LLsymb == t) {
   37          return;
11:03 AUG 20 '97 zbl$llgen$rec:h.:ZBC3TSI                                  2    
   38       }
   39       /*
   40        * If we come here, an error has been detected
   41        */
   42       LLerror(t);
   43      }
   44
   45      LLread() {
   46       for (;;) {
   47          if ((LLsymb = LL_LEXI()) <= 0) LLsymb = EOFILE;
   48          if ((LLcsymb = LLindex[LLsymb]) >= 0) return;
   49          LLmessage(0);
   50       }
   51       /* NOTREACHED */
   52      }
   53
   54      LLerror(t) {
   55       register int i;
   56
   57      #ifdef LL_NEWMESS
   58       if (t == EOFILE) {
   59      #ifdef LL_USERHOOK
   60          LLuserhook(EOFILE);
   61      #endif LL_USERHOOK
   62          if (LLsymb != EOFILE) {
   63             LLmessage(-1);
   64             while ((LLsymb = LL_LEXI()) > 0) /* nothing */ ;
   65          }
   66          return;
   67       }
   68      #endif
   69       if ((LLcsymb = LLindex[LLsymb]) < 0) {
   70          LLmessage(0);
   71          LLread();
   72       }
   73       i = LLindex[t];
   74       LLtcnt[i]++;
11:03 AUG 20 '97 zbl$llgen$rec:h.:ZBC3TSI                                  3    
   75      #ifdef LL_USERHOOK
   76       if (LLdoskip(t)) /* nothing */;
   77      #else
   78       if (LLskip()) /* nothing */;
   79      #endif
   80       LLtcnt[i]--;
   81       if (LLsymb != t) LLmessage(t);
   82      }
   83
   84      # ifndef LLNOFIRSTS
   85      LLfirst(x, d) {
   86       register int i;
   87
   88       return (i = LLindex[x]) >= 0 &&
   89          (LLsets[d + (i >> 3)] & (1 << (i & 07)));
   90      }
   91      # endif
   92
   93      LLnext(n) {
   94       /* returns: 0 if the current symbol is'nt skipped, and it
   95              is'nt a member of "n",
   96              1 if we have a new symbol, but it is'nt a member,
   97              2 if the current symbol is a member,
   98              and 3 if we have a new symbol and it is a member.
   99          So, the low order bit indicates wether we have a new symbol,
  100          and the next bit indicates wether it is a member of "n".
  101       */
  102
  103       int retval = 0;
  104
  105       if (LLskip()) retval = 1;
  106       if (n <= 0 && LLsets[(LLcsymb >> 3) - n] & (1 << (LLcsymb & 07))) {
  107          retval |= 2;
  108       }
  109       else if (LLsymb == n) retval |= 2;
  110       return retval;
  111      }
11:03 AUG 20 '97 zbl$llgen$rec:h.:ZBC3TSI                                  4    
  112
  113      LLskip() {
  114       /* returns 0 if the current symbol is'nt skipped, and
  115          1 if it is, t.i., we have a new symbol
  116       */
  117      #ifdef LL_USERHOOK
  118       return LLdoskip(0);
  119      }
  120
  121      LLuserhook(exp)
  122      {
  123       int old = LLsymb;
  124       LL_USERHOOK(exp);
  125       LLread();
  126       return LLsymb != old;
  127      }
  128
  129      LLdoskip(exp) {
  130       int LLx;
  131      #endif LL_USERHOOK
  132       register int i;
  133       int retval;
  134       int LLi, LLb;
  135
  136       retval = 0;
  137      #ifdef LL_USERHOOK
  138       LLx = LLuserhook(exp);
  139       if (LLx) retval = 1;
  140      #endif LL_USERHOOK
  141       for (;;) {
  142          if (LLtcnt[LLcsymb] != 0) return retval;
  143          LLi = LLcsymb >> 3;
  144          LLb = 1 << (LLcsymb & 07);
  145          for (i = LL_NSETS - 1; i >= 0; i--) {
  146             if (LLscnt[i] != 0) {
  147                if (LLsets[LL_SSIZE*i+LLi] & LLb) {
  148                   return retval;
11:03 AUG 20 '97 zbl$llgen$rec:h.:ZBC3TSI                                  5    
  149                }
  150             }
  151          }
  152      #ifdef LL_USERHOOK
  153          if (LLx) LLx = LLuserhook(exp);
  154          if (LLx) continue;
  155      #endif LL_USERHOOK
  156          LLmessage(0);
  157          retval = 1;
  158          LLread();
  159       }
  160       /* NOTREACHED */
  161      }
  162
  163      LLnewlevel(LLsinfo) unsigned int *LLsinfo; {
  164       register int i;
  165
  166       if (LLlevel++) {
  167          LLsinfo[LL_NSETS+LL_NTERMINALS] = (unsigned) LLsymb;
  168          LLsinfo[LL_NSETS+LL_NTERMINALS+1] = (unsigned) LLcsymb;
  169          for (i = LL_NTERMINALS - 1; i >= 0; i--) {
  170             LLsinfo[i] = LLtcnt[i];
  171             LLtcnt[i] = 0;
  172          }
  173          for (i = LL_NSETS - 1; i >= 0; i--) {
  174             LLsinfo[LL_NTERMINALS+i] = LLscnt[i];
  175             LLscnt[i] = 0;
  176          }
  177       }
  178       LLtincr(0);
  179      }
  180
  181      LLoldlevel(LLsinfo) unsigned int *LLsinfo; {
  182       register int i;
  183
  184       LLtdecr(0);
  185      # ifdef LL_DEBUG
11:03 AUG 20 '97 zbl$llgen$rec:h.:ZBC3TSI                                  6    
  186       for (i = 0; i < LL_NTERMINALS; i++) LL_assert(LLtcnt[i] == 0);
  187       for (i = 0; i < LL_NSETS; i++) LL_assert(LLscnt[i] == 0);
  188      # endif
  189       if (--LLlevel) {
  190          for (i = LL_NSETS - 1; i >= 0; i--) {
  191             LLscnt[i] = LLsinfo[LL_NTERMINALS+i];
  192          }
  193          for (i = LL_NTERMINALS - 1; i >= 0; i--) {
  194             LLtcnt[i] = LLsinfo[i];
  195          }
  196          LLsymb = (int) LLsinfo[LL_NSETS+LL_NTERMINALS];
  197          LLcsymb = (int) LLsinfo[LL_NSETS+LL_NTERMINALS+1];
  198       }
  199      }
  200
  201      # ifdef LL_DEBUG
  202      LL_badassertion(asstr,file,line) char *asstr, *file; {
  203
  204       fprintf(stderr,"Assertion \"%s\" failed %s(%d)\n",asstr,file,line);
  205       abort();
  206      }
  207      # endif
  208

