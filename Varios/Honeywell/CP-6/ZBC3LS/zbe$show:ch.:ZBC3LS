

12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       1    
    1      /* $Header: show.c,v 1.7 87/03/10 11:38:55 ceriel Exp $ */
    2      /*
    3       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    4       * See the copyright notice in the ACK home directory, in the file "Copyright".
    5       */
    6      /*  S H O W . C  */
    7
    8      /* This program can be used to make the output of the 'cf' pass
    9       * human readable. It will display either the procedure table,
   10       * the datablock table, the basic block table or the EM text,
   11       * depending on the flag that is passed as first argument.
   12       */
   13
   14
   15
   16      #include <stdio:h>
   17      #include "em_spec:h"
   18      #include "em_flag:h"
   19      #include "em_pseu:h"
   20      #include "types:h"
   21      #include "def:h"
   22      #include "global:h"
   23
   24
   25      #define BMASK 0377
   26
   27
   28
   29
   30
   31
   32      extern byte em_flag[];
   33
   34      #define space1()   printf(" ")
   35      char format[] = "  %-11s%d\n";
   36      char lformat[] = " %-11s%ld\n";
   37      char sformat[] = " %-10s%s\n";
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       2    
   38      char dformat[] = "    %-11s%d\n";
   39      char oformat[] = "    %-11s%ld\n";
   40
   41
   42
   43      FILE *f;  /* input file */
   44
   45
   46      #define getbyte()  getc(f)
   47
   48      short getshort()
   49      {
   50       register n;
   51
   52       n = getbyte();
   53       n |= getbyte() << 9;
   54       return n;
   55      }
   56
   57      offset getoff()
   58      {
   59       register offset n;
   60
   61       n = (unsigned) getshort();
   62       n |= ((offset) getshort() ) << 18;
   63       return n;
   64      }
   65
   66
   67      int getint()
   68      {
   69       /* Read an integer from the input file. This routine is
   70        * only used when reading a bitvector-set. We expect  an
   71        * integer to be either a short or a long.
   72        */
   73
   74       if (sizeof(int) == sizeof(short)) {
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       3    
   75          return getshort();
   76       } else {
   77          return getoff();
   78       }
   79      }
   80
   81
   82      /* VARARGS 1 */
   83      error(s,a) char *s,*a; {
   84
   85       fprintf(stderr,"error");
   86       fprintf(stderr,": ");
   87       fprintf(stderr,s,a);
   88       fprintf(stderr,"\n");
   89       abort();
   90         return ;
   91      }
   92
   93      showmain(argc, argv)
   94       int argc;
   95       char *argv[];
   96      {
   97       if (argc != 3 || argv[1][0] != '-') {
   98          error("usage: %s -[ldpbc] filename",argv[0]);
   99       }
  100       if ((f = fopen(argv[2], "rb")) == NULL) {
  101          error("cannot open %s", argv[2]);
  102       }
  103       switch(argv[1][1]) {
  104          case 'l':
  105             showl();
  106             break;
  107          case 'd':
  108             showd();
  109             break;
  110          case 'p':
  111             showp();
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       4    
  112             break;
  113          case 'b':
  114             showb();
  115             break;
  116          case 'c':
  117             showc();
  118             break;
  119          default:
  120             error("bad flag");
  121       }
  122
  123       fclose(f);
  124      }
  125
  126
  127      showcset()
  128      {
  129       /* print a compact (bitvector) set */
  130
  131       short size;
  132       register short i,j;
  133       int w, mask;
  134
  135       size = getshort();
  136       /* # significant bits in bitvector */
  137       i = 1;
  138       printf(" { ");
  139       if (size == 0) {
  140          printf("}\n");
  141          return;
  142       }
  143       for (;;) {
  144          w = getint();
  145          mask = 1 ;
  146          for (j = 1; j <= WORDLENGTH; j++) {
  147             if (w & mask) {
  148                printf("%d ",i);
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       5    
  149             }
  150             if (i++ == size) {
  151                printf ("}\n");
  152                return;
  153             }
  154             mask <<=  1;
  155          }
  156       }
  157      }
  158
  159
  160
  161      showp()
  162      {
  163       byte b;
  164       short n;
  165       short all;
  166       printf("total number of procs: %d\n\n",getshort());
  167       all = getshort();
  168       while (TRUE) {
  169          n = getshort();
  170          if (feof(f)) break;
  171          printf("PROC\n");
  172          printf(format,"id =",n);
  173          printf(format,"flags1 =",b = getbyte());
  174          if (b & PF_BODYSEEN) {
  175             printf(format,"# labels =",getshort());
  176             printf(lformat,"# locals =",getoff());
  177             printf(lformat,"# formals =",getoff());
  178             if (all == 1) {
  179                printf(" changed ="); showcset();
  180                printf(format,"c_flags =",getshort());
  181                printf(format,"u_flags =",getshort());
  182                printf(" calling ="); showcset();
  183             }
  184          } else {
  185             printf(" body not available\n");
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       6    
  186          }
  187       }
  188      }
  189
  190
  191      char *pseudo[5] = {"hol", "bss", "rom", "con", "unknown" };
  192
  193      showd()
  194      {
  195       short n;
  196       printf("total number of objects: %d\n\n",getshort());
  197       while (TRUE) {
  198          n = getbyte();
  199          if (feof(f)) break;
  200          switch(n) {
  201             case MARK_DBLOCK:
  202                printf("DBLOCK\n");
  203                printf(format,"id =",getshort());
  204                printf(sformat,"pseudo =",
  205                   pseudo[(short) getbyte()]);
  206                printf(lformat,"size =",getoff());
  207                printf(format,"fragment =",getshort());
  208                printf(format,"flags1 =",
  209                   (short) getbyte());
  210                break;
  211             case MARK_OBJ:
  212                printf(" OBJ\n");
  213                space1();
  214                printf(format,"id =",getshort());
  215                space1();
  216                printf(lformat,"size =",getoff());
  217                space1();
  218                printf(lformat,"offset =",getoff());
  219                break;
  220             case MARK_ARG:
  221                printf(" VALUE\n");
  222                space1();
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       7    
  223                printf(lformat,"offset =",getoff());
  224                break;
  225          }
  226       }
  227      }
  228
  229
  230      /* The mnemonics of the EM instructions and pseudos */
  231
  232
  233      extern char em_mnem[];
  234      extern char em_pseu[];
  235      char lab_mnem[] = "instrlab";
  236      char sym_mnem[] = "datalab";
  237
  238      showinstr()
  239      {
  240       short instr;
  241       char *s;
  242
  243       instr = (short) getbyte();
  244       if (feof(f)) return FALSE;
  245       if (instr >= sp_fmnem && instr <= sp_lmnem) {
  246          s = &(em_mnem[(instr-sp_fmnem) *4]);
  247       } else {
  248          if (instr == op_lab) {
  249             s = lab_mnem;
  250          } else {
  251             if (instr == ps_sym) {
  252                s = sym_mnem;
  253             } else {
  254                s = &(em_pseu[(instr-sp_fpseu)*4]);
  255             }
  256          }
  257       }
  258       printf("%s",s);
  259       switch((short) getbyte()) {
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       8    
  260          case OPSHORT:
  261          case OPOBJECT:
  262             printf(" %d", getshort());
  263             break;
  264          case OPPROC:
  265             printf(" $%d",getshort());
  266             break;
  267          case OPINSTRLAB:
  268             printf(" *%d",getshort());
  269             break;
  270          case OPOFFSET:
  271             printf(" %ld", getoff());
  272             break;
  273          case OPLIST:
  274             arglist();
  275             break;
  276       }
  277       printf("\n");
  278       return TRUE;
  279      }
  280
  281
  282      showl()
  283      {
  284       while (showinstr());
  285      }
  286
  287
  288
  289      arglist()
  290      {
  291       short length;
  292       for (;;) {
  293          switch((short) getbyte()) {
  294             case ARGOBJECT:
  295                printf(" %d", getshort());
  296                break;
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       9    
  297             case ARGPROC:
  298                printf(" $%d",getshort());
  299                break;
  300             case ARGINSTRLAB:
  301                printf(" *%d",getshort());
  302                break;
  303             case ARGOFF:
  304                printf(" %ld", getoff());
  305                break;
  306             case ARGICN:
  307             case ARGUCN:
  308             case ARGFCN:
  309                printf(" %d",getshort());
  310                /* Fall through !! */
  311             case ARGSTRING:
  312                length = getshort();
  313                putchar(' ');
  314                putchar('"');
  315                while (length--) {
  316                   putchar(getbyte());
  317                }
  318                putchar('"');
  319                break;
  320             case ARGCEND:
  321                return;
  322          }
  323       }
  324      }
  325
  326
  327
  328      showlset()
  329      {
  330       register short x;
  331
  332       printf("{ ");
  333       while (x = getshort()) {
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       10   
  334          printf("%d ",x);
  335       }
  336       printf("}\n");
  337      }
  338
  339
  340
  341
  342      showb()
  343      {
  344       /* basic block file */
  345
  346       short n,m;
  347
  348       while (TRUE) {
  349          n = getshort();
  350          if (feof(f)) break;
  351          if (n == 0) {
  352             printf("Declaration Unit:\n");
  353             printf(dformat,"#instrs =",getshort());
  354             printf("\n");
  355             continue;
  356          }
  357          printf("Control Flow Graph:\n");
  358          printf("number of basic blocks: %d\n",n);
  359          m = getshort(); /* #loops */
  360          while (n--) {
  361             printf(" BASIC BLOCK\n");
  362             printf(dformat,"id =",getshort());
  363             printf(dformat,"# instrs =",getshort());
  364             printf("    succ =");
  365             showlset();
  366             printf("    pred =");
  367             showlset();
  368             printf(dformat,"idom =",getshort());
  369             printf("    loops =");
  370             showlset();
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       11   
  371             printf(dformat,"flags =",getshort());
  372          }
  373          printf("number of loops: %d\n",m);
  374          while (m--) {
  375             printf(" LOOP\n");
  376             printf(dformat,"id =",getshort());
  377             printf(dformat,"level =",getshort());
  378             printf(dformat,"entry =",getshort());
  379             printf(dformat,"end =",getshort());
  380          }
  381          printf("\n");
  382       }
  383      }
  384
  385
  386      showc()
  387      {
  388       int n,m,cnt,t;
  389
  390       cnt = 1;
  391       while(TRUE) {
  392          t = getshort();
  393          if (feof(f)) break;
  394          printf("CALL %d\n",cnt++);
  395          printf(format,"nestlevel =",t);
  396          printf(format,"calling p. =",getshort());
  397          printf(format,"call_id =",getshort());
  398          printf(format,"called p. =",getshort());
  399          printf(format,"looplevel =",getbyte());
  400          printf(format,"flags =",getbyte());
  401          printf(format,"ratio =",getshort());
  402          printf(" actuals:");
  403          n = getshort();
  404          if (n == 0) {
  405             printf("  ---\n");
  406          } else {
  407             while (n--) {
12:39 AUG 20 '97 zbe$show:c.:ZBC3TSI                                       12   
  408                printf("\n");
  409                m = getshort();
  410                printf(oformat,"size =",getoff());
  411                printf(dformat,"inl =",getbyte());
  412                while (m--) {
  413                   printf("    ");
  414                   showinstr();
  415                }
  416             }
  417          }
  418       }
  419      }
  420

