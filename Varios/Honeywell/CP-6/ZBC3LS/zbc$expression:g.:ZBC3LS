

11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: expression.g,v 3.4 87/03/25 22:58:06 ceriel Exp $ */
    6      /*  EXPRESSION SYNTAX PARSER   */
    7
    8      {
    9      #include "arith:h"
   10      #include "LLlex:h"
   11      #include "type:h"
   12      #include "idf:h"
   13      #include "label:h"
   14      #include "expr:h"
   15      #include "noRoption:h"
   16      #include "declar:h"
   17
   18      extern char options[];
   19      extern struct expr *intexpr();
   20      }
   21
   22      /* 7.1 */
   23      primary(register struct expr **expp;) {register int first_time = 1;} :
   24       IDENTIFIER
   25       {dot2expr(expp);}
   26      |
   27       constant(expp)
   28      |
   29      [
   30       STRING
   31       {
   32         if (first_time) {
   33            dot2expr(expp);
   34            first_time = 0;
   35         }
   36         else {
   37            concat2expr(expp);
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 2    
   38         }
   39       }
   40      ]+
   41      |
   42       '(' expression(expp) ')'
   43       {(*expp)->ex_flags |= EX_PARENS;}
   44      ;
   45
   46      secundary(register struct expr **expp;)
   47      {int oper;}
   48      :
   49       primary(expp)
   50       [
   51          index_pack(expp)
   52       |
   53          parameter_pack(expp)
   54       |
   55          selection(expp)
   56       |
   57          postop(&oper)
   58          {ch7incr(expp, oper);}
   59       ]*
   60      ;
   61
   62      index_pack(struct expr **expp;)
   63       {struct expr *e1;}
   64      :
   65       '[' expression(&e1) ']'
   66       {ch7bin(expp, '[', e1);}
   67      ;
   68
   69      parameter_pack(struct expr **expp;)
   70       {struct expr *e1 = 0;
   71        struct type *tp = (*expp)->ex_type;
   72        struct type *tx = tp;
   73        struct formallist *fm;}
   74      :
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 3    
   75       {
   76          while (tx->tp_fund == POINTER)
   77             tx = tx->tp_up;
   78          fm = tx->tp_formal;
   79       }
   80       '(' parameter_list(&e1, fm)? ')'
   81       {ch7bin(expp, '(', e1);}
   82      ;
   83
   84      selection(struct expr **expp;)
   85       {int oper; struct idf *idf;}
   86      :
   87       [ '.' | ARROW ]
   88       {oper = DOT;}
   89       identifier(&idf)
   90       {ch7sel(expp, oper, idf);}
   91      ;
   92
   93      parameter_list(struct expr **expp; struct formallist *fm;)
   94       {struct expr *e1 = 0;
   95        int got_fm = (fm == (struct formallist *)0)? 0 : 1;
   96        int elips = ((got_fm) ? fm->fl_elips : 0), fmi = 0;
   97        struct type *tp = (got_fm) ? fm->fl_type[fmi] : (struct type *)0;
   98       }
   99      :
  100       assignment_expression(expp)
  101       {any2formal(expp, PARCOMMA, tp);
  102       }
  103       [  ','
  104          assignment_expression(&e1)
  105          {if (got_fm)
  106             if (++fmi >= fm->fl_num)  {
  107              if (!elips)
  108               expr_error(*expp,"Too many arguments supplied for function");
  109              got_fm = 0, tp = (struct type *)0;
  110             }
  111             else tp = fm->fl_type[fmi];
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 4    
  112           any2formal(&e1, PARCOMMA, tp);
  113          }
  114          {ch7bin(expp, PARCOMMA, e1);}
  115       ]*
  116       { if (got_fm && fm->fl_num > ++fmi)
  117             expr_error(*expp,"function requires additional arguments");
  118       }
  119      ;
  120
  121      %first first_of_type_specifier, type_specifier;
  122
  123      unary(register struct expr **expp;)
  124       {struct type *tp; int oper;}
  125      :
  126      %if (first_of_type_specifier(AHEAD))
  127       cast(&tp) unary(expp)
  128       {  ch7cast(expp, CAST, tp);
  129          (*expp)->ex_flags |= EX_CAST;
  130       }
  131      |
  132       secundary(expp)
  133      |
  134       unop(&oper) unary(expp)
  135       {ch7mon(oper, expp);}
  136      |
  137       size_of(expp)
  138      ;
  139
  140      size_of(register struct expr **expp;)
  141       { struct type *tp; int func_id; }
  142      :
  143       [ SIZEOF | ALIGNOF ]
  144       {  func_id = DOT; }
  145       [%if (first_of_type_specifier(AHEAD))
  146          cast(&tp)
  147          {
  148              if (func_id == SIZEOF)
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 5    
  149                *expp = intexpr(size_of_type(tp, "type"), INT);
  150             else  *expp = intexpr(align_of_type(tp, "type"), INT);
  151             (*expp)->ex_flags |= EX_SIZEOF;
  152          }
  153       |
  154          unary(expp)
  155          {ch7mon(func_id, expp);}
  156       ]
  157      ;
  158
  159      /* 7.3-7.12 */
  160      /*  The set of operators in C is stratified in 15 levels, with level
  161       N being treated in RM 7.N.  In principle each operator is
  162       assigned a rank, ranging from 1 to 15.  Such an expression can
  163       be parsed by a construct like:
  164          binary_expression(int maxrank;)
  165             {int oper;}
  166          :
  167             binary_expression(maxrank - 1)
  168             [%if (rank_of(DOT) <= maxrank)
  169                binop(&oper)
  170                binary_expression(rank_of(oper)-1)
  171             ]?
  172          ;
  173       except that some call of 'unary' is necessary, depending on the
  174       grammar.
  175
  176       This simple view is marred by three complications:
  177       1. Level 15 (comma operator) is not allowed in many
  178          contexts and is different.
  179       2. Level 13 (conditional operator) is a ternary operator,
  180          which does not fit this scheme at all.
  181       3. Level 14 (assignment operators) group right-to-left, as
  182          opposed to 2-12, which group left-to-right (or are
  183          immaterial).
  184       4. The operators in level 14 start with operators in levels
  185          2-13 (RM 7.14: The two parts of a compound assignment
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 6    
  186          operator are separate tokens.)  This causes LL1 problems.
  187       This forces us to have four rules:
  188          binary_expression for level 2-12
  189          conditional_expression  for level 13
  190          assignment_expression   for level 14 and
  191          expression     for the most general expression
  192      */
  193
  194      binary_expression(int maxrank; struct expr **expp;)
  195       {int oper; struct expr *e1;}
  196      :
  197       unary(expp)
  198       [%while (rank_of(DOT) <= maxrank && AHEAD != '=')
  199          /* '?', '=', and ',' are no binops, and the test
  200             for AHEAD != '=' keeps the other assignment
  201             operators out
  202          */
  203          binop(&oper)
  204          binary_expression(rank_of(oper)-1, &e1)
  205          {
  206             ch7bin(expp, oper, e1);
  207          }
  208       ]*
  209      ;
  210
  211      /* 7.13 */
  212      conditional_expression(struct expr **expp;)
  213      /*  There is some unfortunate disagreement about what is allowed
  214       between the '?' and the ':' of a conditional_expression.
  215       Although the Ritchie compiler does not even allow
  216       conditional_expressions there, some other compilers (e.g., VAX)
  217       accept a full assignment_expression there, and programs
  218       (like, e.g., emacs) rely on it. So we have little choice.
  219      */
  220       {struct expr *e1 = 0, *e2 = 0;}
  221      :
  222       /* allow all binary operators */
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 7    
  223       binary_expression(rank_of('?') - 1, expp)
  224       [  '?'
  225          expression(&e1)
  226          {
  227      #ifndef NOROPTION
  228             check_conditional(e1, '?', "between ? and :");
  229      #endif
  230          }
  231          ':'
  232          assignment_expression(&e2)
  233          {
  234      #ifndef NOROPTION
  235             check_conditional(e2, '=', "after :");
  236      #endif
  237             ch7bin(&e1, ':', e2);
  238             opnd2test(expp, '?');
  239             ch7bin(expp, '?', e1);
  240          }
  241       ]?
  242      ;
  243
  244      /* 7.14 */
  245      assignment_expression(struct expr **expp;)
  246       {
  247          int oper;
  248          struct expr *e1 = 0;
  249       }
  250      :
  251       conditional_expression(expp)
  252       [%prefer /* (rank_of(DOT) <= maxrank) for any asgnop */
  253          asgnop(&oper)
  254          assignment_expression(&e1)
  255          {ch7asgn(expp, oper, e1);}
  256       |
  257          empty    /* LLgen artefact ??? */
  258       ]
  259      ;
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 8    
  260
  261      /* 7.15 */
  262      expression(struct expr **expp;)
  263       {struct expr *e1;}
  264      :
  265       assignment_expression(expp)
  266       [  ','
  267          assignment_expression(&e1)
  268          {
  269             ch7bin(expp, ',', e1);
  270          }
  271       ]*
  272      ;
  273
  274      unop(int *oper;) :
  275       ['*' | '&' | '-' | '+' | '!' | '~' | PLUSPLUS | MINMIN]
  276       {*oper = DOT;}
  277      ;
  278
  279      postop(int *oper;):
  280       PLUSPLUS {*oper = POSTINCR;}
  281      |
  282       MINMIN {*oper = POSTDECR;}
  283      ;
  284
  285      multop:
  286       '*' | '/' | '%'
  287      ;
  288
  289      addop:
  290       '+' | '-'
  291      ;
  292
  293      shiftop:
  294       LEFT | RIGHT
  295      ;
  296
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 9    
  297      relop:
  298       '<' | '>' | LESSEQ | GREATEREQ
  299      ;
  300
  301      eqop:
  302       EQUAL | NOTEQUAL
  303      ;
  304
  305      arithop:
  306       multop | addop | shiftop
  307      |
  308       '&' | '^' | '|'
  309      ;
  310
  311      binop(int *oper;) :
  312       [ arithop | relop | eqop | AND | OR ]
  313       {*oper = DOT;}
  314      ;
  315
  316      asgnop(register int *oper;):
  317       '=' {*oper = DOT;}
  318      |
  319      [
  320       '+' '=' {*oper = PLUSAB;}
  321      |
  322       '-' '=' {*oper = MINAB;}
  323      |
  324       '*' '=' {*oper = TIMESAB;}
  325      |
  326       '/' '=' {*oper = DIVAB;}
  327      |
  328       '%' '=' {*oper = MODAB;}
  329      |
  330       LEFT '=' {*oper = LEFTAB;}
  331      |
  332       RIGHT '=' {*oper = RIGHTAB;}
  333      |
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 10   
  334       '&' '=' {*oper = ANDAB;}
  335      |
  336       '^' '=' {*oper = XORAB;}
  337      |
  338       '|' '=' {*oper = ORAB;}
  339      ]
  340      {
  341       char *symbol2str();
  342       warning("assignment operator %s had white spaces between the operator and =", symbol2str(*oper));
  343      }
  344
  345      |
  346       [ PLUSAB | MINAB | TIMESAB | DIVAB | MODAB |
  347         LEFTAB | RIGHTAB | ANDAB | XORAB | ORAB ]
  348          {
  349
  350             *oper = DOT;
  351          }
  352      ;
  353
  354      constant(struct expr **expp;) :
  355      [
  356       INTEGER
  357      |
  358       FLOATING
  359      ]   {dot2expr(expp);}
  360      ;
  361
  362      /* 15 */
  363      constant_expression (struct expr **expp;) :
  364       assignment_expression(expp)
  365       {chk_cst_expr(expp);}
  366      ;
  367
  368      identifier(struct idf **idfp;) :
  369      [
  370       IDENTIFIER
11:50 AUG 20 '97 zbc$expression:g.:ZBC3TSI                                 11   
  371      |
  372       TYPE_IDENTIFIER
  373      ]
  374       {*idfp = dot.tk_idf;}
  375      ;
  376

