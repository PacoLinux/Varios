

11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: statement.g,v 3.11 87/03/25 23:09:50 ceriel Exp $ */
    6      /*  STATEMENT SYNTAX PARSER */
    7
    8      {
    9      #include <em:h>
   10
   11      #include "debug:h"
   12      #include "botch_free:h"
   13
   14      #include "arith:h"
   15      #include "LLlex:h"
   16      #include "type:h"
   17      #include "idf:h"
   18      #include "label:h"
   19      #include "expr:h"
   20      #include "code:h"
   21      #include "stack:h"
   22      #include "def:h"
   23      #include "zb_cp6_object:h"
   24
   25      extern int level;
   26      extern int current_statement_type;
   27      extern char options[];
   28
   29      arith C_ms_stmt();
   30      }
   31
   32      /*  Each statement construction is stacked in order to trace a
   33       statement to such a construction. Example: a case statement should
   34       be recognized as a piece of the most enclosing switch statement.
   35      */
   36
   37      /* 9 */
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  2    
   38      statement
   39      :
   40      %if (AHEAD != ':')
   41       expression_statement
   42      |
   43       label ':' statement
   44      |
   45       compound_statement((arith *)0)
   46      |
   47       if_statement
   48      |
   49       while_statement
   50      |
   51       do_statement
   52      |
   53       for_statement
   54      |
   55       switch_statement
   56      |
   57       case_statement
   58      |
   59       default_statement
   60      |
   61       BREAK
   62       {
   63          arith lineno;
   64          lineno = C_ms_stmt(S_EXIT,dot.tok_debline);
   65          finfo.ExprLines++;
   66          if (!options['L'])
   67            C_lin(lineno);
   68          code_break();
   69       }
   70       ';'
   71      |
   72       CONTINUE
   73       {
   74          arith lineno;
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  3    
   75          lineno = C_ms_stmt(S_STOP,dot.tok_debline);
   76          finfo.ExprLines++;
   77          if (!options['L'])
   78            C_lin(lineno);
   79          code_continue();
   80       }
   81       ';'
   82      |
   83       return_statement
   84      |
   85       jump
   86      |
   87       ';'
   88      |
   89       asm_statement
   90      ;
   91
   92      expression_statement
   93       {  struct expr *expr;
   94       }
   95      :
   96       expression(&expr)
   97       ';'
   98          {
   99      #ifdef DEBUG
  100             print_expr("Full expression", expr);
  101      #endif DEBUG
  102             {   /*  Determine statement type  */
  103              int sttype = S_MISC;
  104              if (expr->ex_class == Oper)
  105                 switch (expr->OP_OPER)  {
  106                 case '(':
  107                    sttype = S_CALL;
  108                    break;
  109                 case '=':
  110                 case PLUSAB:
  111                 case MINAB:
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  4    
  112                 case TIMESAB:
  113                 case DIVAB:
  114                 case MODAB:
  115                 case LEFTAB:
  116                 case RIGHTAB:
  117                 case ANDAB:
  118                 case XORAB:
  119                 case ORAB:
  120                 case POSTINCR:
  121                 case POSTDECR:
  122                 case PLUSPLUS:
  123                 case MINMIN:
  124                    sttype = S_ASSIGNMENT;
  125                    break;
  126                 }
  127              expr->ex_debline = C_ms_stmt(sttype,expr->ex_debline);
  128            /**/
  129            }
  130             code_expr(expr, RVAL, FALSE, NO_LABEL, NO_LABEL);
  131             free_expression(expr);
  132          }
  133      ;
  134
  135      label
  136       {  struct idf *idf;
  137       }
  138      :
  139       identifier(&idf)
  140       {
  141          /* This allows the following absurd case:
  142
  143                typedef int grz;
  144                main()   {
  145                   grz: printf("A labelled statement\n");
  146                }
  147          */
  148          define_label(idf);
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  5    
  149          C_ms_lbl(dot.tok_debline,0,idf->id_text);
  150          finfo.ExprLines++;
  151          C_df_ilb((label)idf->id_label->df_address);
  152       }
  153      ;
  154
  155      if_statement
  156       {
  157          struct expr *expr;
  158          label l_true = text_label();
  159          label l_false = text_label();
  160          label l_end = text_label();
  161       }
  162      :
  163       IF
  164       '('
  165       expression(&expr)
  166          {
  167         expr->ex_debline = C_ms_stmt(S_IF,expr->ex_debline);
  168             opnd2test(&expr, IF);
  169             if (is_cp_cst(expr)) {
  170                /* The comparison has been optimized
  171                   to a 0 or 1.
  172                */
  173                if (expr->VL_VALUE == (arith)0)  {
  174                   if (!options['L'])
  175                     C_lin((arith) expr->ex_debline);
  176                   finfo.ExprLines++;
  177                   C_bra(l_false);
  178                }
  179                /* else fall through */
  180             }
  181             else  {
  182                code_expr(expr, RVAL, TRUE, l_true, l_false);
  183                C_df_ilb(l_true);
  184             }
  185             free_expression(expr);
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  6    
  186          }
  187       ')'
  188       statement
  189       [%prefer
  190          ELSE
  191             {
  192                C_bra(l_end);
  193                C_df_ilb(l_false);
  194             }
  195          statement
  196             {  C_df_ilb(l_end);
  197             }
  198       |
  199          empty
  200             {  C_df_ilb(l_false);
  201             }
  202       ]
  203      ;
  204
  205      while_statement
  206       {
  207          struct expr *expr;
  208          label l_break = text_label();
  209          label l_continue = text_label();
  210          label l_body = text_label();
  211       }
  212      :
  213       WHILE
  214          {
  215             stack_stmt(l_break, l_continue);
  216             C_df_ilb(l_continue);
  217          }
  218       '('
  219       expression(&expr)
  220          {
  221             expr->ex_debline = C_ms_stmt(S_DO_WHILE,expr->ex_debline);
  222             opnd2test(&expr, WHILE);
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  7    
  223             if (is_cp_cst(expr)) {
  224                if (expr->VL_VALUE == (arith)0)  {
  225                   if (!options['L'])
  226                     C_lin((arith) expr->ex_debline);
  227                   finfo.ExprLines++;
  228                   C_bra(l_break);
  229                }
  230             }
  231             else  {
  232                code_expr(expr, RVAL, TRUE, l_body, l_break);
  233                C_df_ilb(l_body);
  234             }
  235          }
  236       ')'
  237       statement
  238          {
  239             C_bra(l_continue);
  240             C_df_ilb(l_break);
  241             unstack_stmt();
  242             free_expression(expr);
  243          }
  244      ;
  245
  246      do_statement
  247       {  struct expr *expr;
  248          label l_break = text_label();
  249          label l_continue = text_label();
  250          label l_body = text_label();
  251       }
  252      :
  253       DO
  254          {  C_df_ilb(l_body);
  255             stack_stmt(l_break, l_continue);
  256          }
  257       statement
  258       WHILE
  259       '('
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  8    
  260          {  C_df_ilb(l_continue);
  261          }
  262       expression(&expr)
  263          {
  264             expr->ex_debline = C_ms_stmt(S_DO_WHILE_END,expr->ex_debline);
  265             opnd2test(&expr, WHILE);
  266             if (is_cp_cst(expr)) {
  267                if (expr->VL_VALUE == (arith)1)  {
  268                   if (!options['L'])
  269                     C_lin((arith)(expr->ex_debline));
  270                   finfo.ExprLines++;
  271                   C_bra(l_body);
  272                }
  273             }
  274             else  {
  275                code_expr(expr, RVAL, TRUE, l_body, l_break);
  276             }
  277             C_df_ilb(l_break);
  278          }
  279       ')'
  280       ';'
  281          {
  282             unstack_stmt();
  283             free_expression(expr);
  284          }
  285      ;
  286
  287      for_statement
  288       {  struct expr *e_init = 0, *e_test = 0, *e_incr = 0;
  289          label l_break = text_label();
  290          label l_continue = text_label();
  291          label l_body = text_label();
  292          label l_test = text_label();
  293       }
  294      :
  295       FOR
  296          {  stack_stmt(l_break, l_continue);
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  9    
  297          }
  298       '('
  299       [
  300          expression(&e_init)
  301          {
  302             if (e_init)
  303               e_init->ex_debline = C_ms_stmt(S_DO_INDEX,e_init->ex_debline);
  304             code_expr(e_init, RVAL, FALSE, NO_LABEL, NO_LABEL);
  305          }
  306       ]?
  307       ';'
  308          {  C_df_ilb(l_test);
  309          }
  310       [
  311          expression(&e_test)
  312          {
  313             opnd2test(&e_test, FOR);
  314             if (is_cp_cst(e_test))  {
  315                if (e_test->VL_VALUE == (arith)0)   {
  316                   C_bra(l_break);
  317                }
  318             }
  319             else  {
  320                code_expr(e_test, RVAL, TRUE, l_body, l_break);
  321                C_df_ilb(l_body);
  322             }
  323          }
  324       ]?
  325       ';'
  326       expression(&e_incr)?
  327       ')'
  328       statement
  329          {
  330             C_df_ilb(l_continue);
  331             { arith lineno = 0;
  332                lineno = C_ms_stmt(S_DO_INDEX_END,-dot.tok_debline);
  333                if (e_incr)  {
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  10   
  334                   e_incr->ex_debline = lineno;
  335                   code_expr(e_incr, RVAL, FALSE, NO_LABEL, NO_LABEL);
  336                }
  337                else {
  338                   finfo.ExprLines++;
  339                   if (!options['L'])
  340                     C_lin((arith)(lineno));
  341                }
  342             }
  343             C_bra(l_test);
  344             C_df_ilb(l_break);
  345             unstack_stmt();
  346             free_expression(e_init);
  347             free_expression(e_test);
  348             free_expression(e_incr);
  349          }
  350      ;
  351
  352      switch_statement
  353       {
  354          struct expr *expr;
  355       }
  356      :
  357       SWITCH
  358       '('
  359       expression(&expr)
  360          {
  361             expr->ex_debline = C_ms_stmt(S_DO_CASE,expr->ex_debline);
  362             code_startswitch(&expr);
  363          }
  364       ')'
  365       statement
  366          {
  367             code_endswitch();
  368             free_expression(expr);
  369          }
  370      ;
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  11   
  371
  372      case_statement
  373       {
  374          struct expr *expr;
  375       }
  376      :
  377       CASE
  378       constant_expression(&expr)
  379          {
  380             code_case(expr);
  381             free_expression(expr);
  382          }
  383       ':'
  384       statement
  385      ;
  386
  387      default_statement
  388      :
  389       DEFAULT
  390          {
  391             code_default();
  392          }
  393       ':'
  394       statement
  395      ;
  396
  397      return_statement
  398       {
  399          struct expr *expr = 0;
  400          unsigned int lineno = 0;
  401       }
  402      :
  403       RETURN
  404       {
  405         lineno = dot.tok_debline;
  406       }
  407       [
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  12   
  408          expression(&expr)
  409          {
  410             expr->ex_debline = C_ms_stmt(S_RETURN,expr->ex_debline);
  411             do_return_expr(expr);
  412             free_expression(expr);
  413          }
  414       |
  415          empty
  416          {
  417             lineno = C_ms_stmt(S_RETURN,lineno);
  418             finfo.ExprLines++;
  419             if (!options['L'])
  420               C_lin((arith)(lineno));
  421             do_return();
  422          }
  423       ]
  424       ';'
  425      ;
  426
  427      jump
  428       {  struct idf *idf;
  429       }
  430      :
  431       GOTO
  432       identifier(&idf)
  433       ';'
  434          {
  435             apply_label(idf);
  436          {
  437          arith lineno;
  438          lineno = C_ms_stmt(S_GOTO,dot.tok_debline);
  439          finfo.ExprLines++;
  440          if (!options['L'])
  441            C_lin((arith)(lineno));
  442          }
  443          idf->id_label->df_used = 1;
  444             C_bra((label)idf->id_label->df_address);
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  13   
  445          }
  446      ;
  447
  448      compound_statement(arith *nbytes;)
  449        {
  450           int decls = 0;
  451           extern int current_block_level;
  452        }
  453        :
  454       '{'
  455          {
  456             stack_level();
  457          }
  458       [%while (AHEAD != ':')     /* >>> conflict on TYPE_IDENTIFIER */
  459       { if (decls++==0) {
  460           C_ms_blk(0,dot.tok_debline,0,current_block_level++);
  461           }
  462       }
  463          declaration
  464       ]*
  465       [%persistent
  466          statement
  467       ]*
  468       '}'
  469          {
  470             if (nbytes)
  471                *nbytes = (- local_level->sl_max_block);
  472             unstack_level();
  473             if (decls > 0)  {
  474                C_ms_blk(1,dot.tok_debline,0,--current_block_level);
  475             }
  476          }
  477      ;
  478
  479      asm_statement
  480       {  char *asm_bts;
  481          int asm_len;
11:50 AUG 20 '97 zbc$statement:g.:ZBC3TSI                                  14   
  482       }
  483      :
  484       ASM
  485       '('
  486       STRING
  487          {  asm_bts = dot.tk_bts;
  488             asm_len = dot.tk_len;
  489          }
  490       ')'
  491       ';'
  492          {  code_asm(asm_bts, asm_len);
  493          }
  494      ;
  495

