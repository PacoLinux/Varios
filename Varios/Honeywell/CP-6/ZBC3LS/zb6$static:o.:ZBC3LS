

CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /*M*
        2         2                   name: ou$static
        3         3                   purpose: This  module contians functions for the handling
        4         4                   of static module building and setting up information for the
        5         5                   generation of C object units.
        6         6
        7         7             */
        8         8             #include <stdio:h>
        9         9             /* #include <dcb:h> */
       10        10             #include "codegen:h"
       11        11             #include "zb6$ougen:h"
       12        12             #include "zb6$tables:h"
       13        13             #include "zb6$instructions:h"
       14        14             #include "zb6$equate1:h"
       15        15
       16        16             #define pl6str(_s_)  ( *(int *) buf =0,\
       17        16                   strcpy( &buf[2], _s_ ),\
       18        16                   *(int *)buf |= strlen( &buf[2] ) << 18)
       19        19
       20        20             #define  pl6str2(_s_)  ( *(int *) buf =0,\
       21        20                   strcpy( &buf[1], _s_ ),\
       22        20                   *(int *)buf |= strlen( &buf[1] ) << 27)
       23        23             #define POS_MASK 0377777777777
       24        24
       25        25             static char buf[512] ;
       26        26
       27        27             char static_name[65];
       28        28             char static_total_name[70];
       29        29             int static_func_count;
       30        30             static_funcs_p  static_p;
       31        31
       32        32             int have_static_flag;
       33        33
       34        34             extern void scan_name();
       35        35             extern int *myalloc();
       36        36             extern void errhandler() ;
       37        37             extern int zeroinit ;
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       38        38             extern char blanks_32[];
       39        39             extern void set_reloc_stuff();
       40        40             extern char B_VERSION[];
       41        41             extern char static_func_suffix[];
       42        42
       43        43             /*i*
       44        44                   name: set_static_name
       45        45                   purpose: This routine sets the name for the static control
       46        46                   setics that are to be generated for each compilation file.
       47        47
       48        48             */
       49        49             set_static_name() {
       50        50    1
       51        51    1              scan_name (static_name);
       52        52    1
       53        53    1
       54        54    1              have_static_flag=-1;
       55        55    1
       56        56    1              return;
       57        57    1              }
       58        58
       59        59             /*i*
       60        60                   name: note_static_functions
       61        61                   purpose: This fucntion sets scans that names of the static
       62        62                   functions that are contained in this compile file, and puts
       63        63                   them into a table. The names are then compared with the name
       64        64                   of functions and external references as then are processed.
       65        65                   when matches are found, the static name is appended to the
       66        66                   function name.
       67        67
       68        68             */
       69        69             note_static_functions()  {
       70        70    1        int count;
       71        71    1        int hash_value;
       72        72    1        struct static_funcs *p, *last_p;
       73        73    1
       74        74    1              p = (struct static_funcs *) myalloc(sizeof(struct static_funcs) * 15);
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       75        75    1              static_p = p;
       76        76    1              static_func_count = 0;
       77        77    1              count = 15;
       78        78    1              last_p = NULL;
       79        79    1        once_more:
       80        80    1
       81        81    1              while (count > 0) {
       82        82    2                strcpy (p->name_field.name, blanks_32);
       83        83    2                scan_name(p->name_field.name);
       84        84    2                static_func_count++;
       85        85    2                if (last_p != NULL) {
       86        86    3                   last_p->next = p; }
       87        87    2                last_p = p;
       88        88    2                p->next = NULL;
       89        89    2                hash_value = p->name_field.int_name[0] + p->name_field.int_name[1] +
       90        90    2                             p->name_field.int_name[2] ;
       91        91    2                hash_value = hash_value * hash_value ;
       92        92    2                hash_value = (hash_value & POS_MASK) % 601;
       93        93    2                p->hash = hash_value ;
       94        94    2
       95        95    2                if (c == ' ') {
       96        96    3                  while ((c=getc(infile)) == ' ') {}
       97        97    3                  if (c != ',') return;
       98        98    3
       99        99    3                  }
      100       100    2                else {
      101       101    3                  if (c != ',') return;
      102       102    3                 }
      103       103    2                while ((c=getc(infile)) == ' ') {}
      104       104    2                p++;
      105       105    2                count--;
      106       106    2              }   /* end of the while on the count */
      107       107    1              /* if we reach this point, we have gone more fucntion names
      108       108    1                 than table entries. We need to get more table space at
      109       109    1                 this point.
      110       110    1              */
      111       111    1              p = (struct static_funcs *) myalloc(sizeof(struct static_funcs) * 5);
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      112       112    1              count = 5;
      113       113    1              goto once_more;
      114       114    1              }  /* end of the function note_static_fucntions.  */
      115       115
      116       116
      117       117
      118       118             /*i*
      119       119                   name: check_if_first_call
      120       120                   purpose: this routine is checking for very first USE pseudo
      121       121                   op in the program. If found this signals that static, and
      122       122                   constant (also static) o.u. module is to be generated.
      123       123                   This causes us to do the initial calls to the o.u. generator
      124       124                   routines for the building of the object unit.
      125       125
      126       126             */
      127       127             check_if_first_call()  {
      128       128    1        int length;
      129       129    1        int i;
      130       130    1        int schema;
      131       131    1        struct v_num {
      132       132    2              unsigned lett :9;
      133       133    2              unsigned release :9;
      134       134    2              }  version;
      135       135    1        int ii;
      136       136    1        int name_offset, dname_offset, cname_offset;
      137       137    1        void *entptr;
      138       138    1
      139       139    1              if (static_first_use_flag == 0) return;
      140       140    1                static_first_use_flag =0;
      141       141    1
      142       142    1              /* at this point the o.u. for the data only i.u. is initiated.
      143       143    1              */
      144       144    1
      145       145    1
      146       146    1              /* setup names for the static section. */
      147       147    1
      148       148    1              strcpy (&progname[1], static_name);
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      149       149    1              length = strlen(static_name);
      150       150    1              strcpy (static_data_name, static_name);
      151       151    1              strcpy (static_con_name, static_name);
      152       152    1              static_data_name[length] = '#';
      153       153    1              static_data_name[length+1] = 's';
      154       154    1              static_data_name[length+2] = '\0';
      155       155    1              static_con_name[length] = '#';
      156       156    1              static_con_name[length+1] = 'c';
      157       157    1              static_con_name[length+2] = '\0';
      158       158    1
      159       159    1        /* >>>>>>>>>>>>>>>>>> TEMP FIX <<<<<<<<<<<<<<<<<<<<< */
      160       160    1              length = strlen (static_name) ;
      161       161    1              if (length >= 27) {
      162       162    2                length = 27; }
      163       163    1        /*  >>>>>>>>>>>>>>>>>> END OF TEMP FIX <<<<<<<<<<<<< */
      164       164    1              progname[length+1] = '#';
      165       165    1              progname[length+2] = 'f';
      166       166    1              progname[length+3] = '#';
      167       167    1              progname[length+4] = '\0';
      168       168    1              progname[0] = '_';
      169       169    1
      170       170    1              ii=-1;
      171       171    1              i = 0;
      172       172    1              schema=0;
      173       173    1              pl6str2 (":SHARED_C");
      174       174    1
      175       175    1              version.lett = B_VERSION[1];
      176       176    1              version.release = 0 ;
      177       177    1              XUO$OUINIT(&oudcbnum,&i,&schema,&compiler_id,&version ,
      178       178    1                  buf, N, &entptr , N, &ii);
      179       179    1
      180       180    1              pl6str (static_data_name);
      181       181    1
      182       182    1              XUO$DNAME(buf, &dname_offset);
      183       183    1              XUO$SECTBUILD( &datasect, &dname_offset, &datasec, &zeroinit, &evenbound
                               );
      184       184    1              XUO$SDEF( &dname_offset, &datasec, &zero_val);
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185    1
      186       186    1              pl6str (static_con_name);
      187       187    1
      188       188    1              XUO$DNAME(buf, &cname_offset);
      189       189    1              XUO$SECTBUILD( &conssect, &cname_offset, &conssec, &zeroinit, &evenbound
                               );
      190       190    1              XUO$SDEF( &cname_offset, &conssec, &zero_val);
      191       191    1
      192       192    1              strcpy (static_total_name, progname);
      193       193    1              pl6str (progname);
      194       194    1              XUO$DNAME (buf, &name_offset);
      195       195    1              XUO$EDEF (&conssec, &zero_val, &name_offset, &zero_val,
      196       196    1                  &zero_val, &zero_val, &std_call, &zero_val);
      197       197    1
      198       198    1              s_s_table[procsec].size = 0;
      199       199    1              s_s_table[datasec].size = 0;
      200       200    1              s_s_table[conssec].size = 0;
      201       201    1
      202       202    1              s_s_table[procsec].curr_offset = 0;
      203       203    1              s_s_table[datasec].curr_offset = 0;
      204       204    1              s_s_table[conssec].curr_offset = 0;
      205       205    1
      206       206    1              pl6str ("ISSID");
      207       207    1              XUO$RNAME( buf, &name_offset);
      208       208    1              XUO$SEGREF ( &name_offset, &xbo_seg_ref_id);
      209       209    1
      210       210    1              forward_ref_count = 0;
      211       211    1              forward_ref_flag  = 0;
      212       212    1              ref_name_flag = 0;
      213       213    1              curr_con_section = 0;
      214       214    1              first_func_flag = 0;
      215       215    1              lbl_tbl_ptr = NULL ;
      216       216    1              line_tbl_ptr = NULL ;
      217       217    1              first_lbl_tbl_ptr = NULL;
      218       218    1              first_sym_tbl_ptr = NULL;
      219       219    1              sym_tbl_ptr = NULL ;
      220       220    1              dfloat_ptr = NULL;
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      221       221    1              int_ptr = NULL;
      222       222    1              string_ptr = NULL;
      223       223    1              for (i=0; i < 601; i++) {
      224       224    2                label_hash[i] = NULL ;
      225       225    2                symbol_hash[i] = NULL ;
      226       226    2              }  /* end of the for loop. */
      227       227    1
      228       228    1              return;
      229       229    1              }
      230       230
      231       231
      232       232
      233       233             /*i*
      234       234                   name: check_for_static_terminate
      235       235                   purpose: This routine is the one to generate the termination
      236       236                   code for the data only module for the c compile unit.
      237       237                   */
      238       238             check_for_static_terminate() {
      239       239    1        int sect_size;
      240       240    1        int *dcbptr ;
      241       241    1        void forward_ref_process ();
      242       242    1        void *ent_ptr;
      243       243    1
      244       244    1
      245       245    1              if (static_data_flag == 0) return;
      246       246    1
      247       247    1              static_data_flag = 0;
      248       248    1              /* terminate the current o.u. */
      249       249    1
      250       250    1              static_terminate_flag = -1;
      251       251    1
      252       252    1              if (static_first_use_flag != 0) {
      253       253    2                 static_first_use_flag = 0;
      254       254    2                 return; }
      255       255    1
      256       256    1
      257       257    1              if (s_s_table[procsec].curr_offset != 0) {
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      258       258    2                sect_size = s_s_table[datasec].curr_offset + 1;
      259       259    2                XUO$SECTSIZE (&procsec, &sect_size );
      260       260    2                }
      261       261    1              sect_size = s_s_table[conssec].curr_offset + 1;
      262       262    1              XUO$SECTSIZE (&conssec, &sect_size );
      263       263    1              sect_size = s_s_table[datasec].curr_offset + 1;
      264       264    1              XUO$SECTSIZE (&datasec, &sect_size );
      265       265    1
      266       266    1              if (forward_ref_count != 0) {  /* have forward refs in the prog. */
      267       267    2                dcbptr = oudcbptr;
      268       268    2                ent_ptr = (void (*)()) forward_ref_process ;
      269       269    2                if (s_s_table[conssec].curr_offset != 0) {
      270       270    3                  XUO$FRWD_REF (&conssec, &ent_ptr ,
      271       271    3                       &dcbptr );  }
      272       272    2                if (s_s_table[datasec].curr_offset != 0) {
      273       273    3                  XUO$FRWD_REF (&datasec, &ent_ptr ,
      274       274    3                       &dcbptr );  }
      275       275    2                /*  do the forward ref processing.   */
      276       276    2              }  /* enof of the forward ref processing. */
      277       277    1              pl6str (progname);
      278       278    1
      279       279    1              XUO$HEADNAME ( buf );
      280       280    1
      281       281    1              XUO$HEAD_SEVERITY (&error_severity);
      282       282    1
      283       283    1              XUO$OUTERM () ;  /* finsih the o.u building .   */
      284       284    1
      285       285    1              strcpy (progname, static_name);
      286       286    1              static_con_size = s_s_table[conssec].curr_offset;
      287       287    1              static_data_size = s_s_table[datasec].curr_offset;
      288       288    1              if (strcmp(static_func_suffix, "    ") != 0) {
      289       289    2                 strcpy(static_name, static_func_suffix); }
      290       290    1
      291       291    1              walk_lbls();
      292       292    1              walk_vars();
      293       293    1
      294       294    1              return;
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      295       295    1              }
      296       296
      297       297
      298       298             /*i*
      299       299                   name: walk_lbls
      300       300                   purpose: This routine walks tha lbl table thread and releases
      301       301                   all local lbls. It also resets the ou_set_flag for global
      302       302                   labels and changes symdefs to symrefs.
      303       303             */
      304       304             walk_lbls()  {
      305       305    1        struct labels *p, *last_p, *next, *prev , *next_p;
      306       306    1        line_tbl_p lt, lt_next;
      307       307    1
      308       308    1              if (line_tbl_ptr != NULL) { /* walk debug line # tbl release tbl entries
                               . */
      309       309    2                for (lt = line_tbl_ptr; lt != (line_tbl_p) 0; lt = lt_next) {
      310       310    3                  lt_next = lt->next ;
      311       311    3                  Free (lt);
      312       312    3                }
      313       313    2                line_tbl_ptr = (line_tbl_p) 0;
      314       314    2              }   /* end of the releasing of the line # table. */
      315       315    1
      316       316    1              if (first_lbl_tbl_ptr == NULL) return;
      317       317    1
      318       318    1              /* now walk the label thread and set symdefs to symrefs
      319       319    1                 and release local labels. */
      320       320    1              p = first_lbl_tbl_ptr;
      321       321    1
      322       322    1              while (p != NULL && p->lbl_type == LOCAL_LBL) {
      323       323    2                next = p;
      324       324    2                if (p->previous == NULL) {
      325       325    3                  if (p->next == NULL) {
      326       326    4                    label_hash[p->hash_value] = NULL; }
      327       327    3                  else {
      328       328    4                    label_hash[p->hash_value] = (int *)p->next; }
      329       329    3                } else {
      330       330    3                  prev = p->previous;
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      331       331    3                 while (prev != NULL && prev->deleted != 0) {
      332       332    4                   prev = prev->previous; }
      333       333    3                  if (prev != NULL) {
      334       334    4                    prev->next = p->next; } }
      335       335    2                p = p->next_lbl_entry ;
      336       336    2                next->deleted = -1;
      337       337    2                Free(next); }
      338       338    1              first_lbl_tbl_ptr = p;
      339       339    1              lbl_tbl_ptr = p;
      340       340    1
      341       341    1              last_p = first_lbl_tbl_ptr;
      342       342    1              for (p = first_lbl_tbl_ptr; p != NULL; p=next) {
      343       343    2                next = p->next_lbl_entry;
      344       344    2                if(p->lbl_type == SYM_DEF_LBL ) {
      345       345    3                   p->lbl_type = SYM_REF_LBL;
      346       346    3                   p->ou_set_flag = 0;
      347       347    3                   last_p = p; }
      348       348    2                else {
      349       349    3                   if (p->lbl_type == LOCAL_LBL ) {
      350       350    4                      last_p->next_lbl_entry = p->next_lbl_entry;
      351       351    4                      if (p->previous == NULL) {
      352       352    5                        if (p->next == NULL) {
      353       353    6                          label_hash[p->hash_value] = NULL; }
      354       354    5                        else {
      355       355    6                          label_hash[p->hash_value] = (int *)p->next; }
      356       356    5                      } else {
      357       357    5                        prev = p->previous;
      358       358    5                        while (prev != NULL) {
      359       359    6                           if (prev->deleted == 0 ) break;
      360       360    6                           prev = prev->previous; }
      361       361    5                        if (prev != NULL) {
      362       362    6                          next_p = p->next ;
      363       363    6                          if (next_p != NULL) {
      364       364    7                            next_p->previous = prev; }
      365       365    6                          prev->next = p->next; }
      366       366    5                        else {
      367       367    6                          next_p = p->next ;
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      368       368    6                          if (next_p != NULL) {
      369       369    7                            next_p->previous = NULL; }
      370       370    6                          else {
      371       371    7                            label_hash[p->hash_value] = NULL; }
      372       372    6                        }
      373       373    5                       }
      374       374    4                      p->deleted = -1;
      375       375    4                      Free (p); }
      376       376    3                   else {
      377       377    4                      lbl_tbl_ptr = p;
      378       378    4                      last_p = p; }
      379       379    3                }  /* end of the else close. */
      380       380    2              }   /* end of the for loop. */
      381       381    1              return;
      382       382    1              }  /* enf of the function walk_lbls. */
      383       383             /*i*
      384       384                   name: walk_vars
      385       385                   purpose: This routine walks the sym tbl table thread and
      386       386                   releases all local ids, and esets the ou_set_flag, and
      387       387                   changes symdefs to symrefs.
      388       388             */
      389       389             walk_vars()  {
      390       390    1        struct sym_tbl *p, *next, *last_p, *prev, *next_p;
      391       391    1        struct sym_debug_tbl *d;
      392       392    1        struct constants *c,*next_c ;
      393       393    1
      394       394    1              if (first_sym_tbl_ptr == NULL ) return;
      395       395    1              p = first_sym_tbl_ptr;
      396       396    1
      397       397    1              while (p->storage_class == AUTO_STORAGE ||
      398       398    1                     p->storage_class == LOCAL_STATIC_STORAGE ||
      399       399    1                     (p->reloc_type == ENTREF_TYPE && p->sym_class != FUNCTION_CLASS)
                               ) {
      400       400    2                next = p;
      401       401    2                if (p->previous == NULL) {
      402       402    3                  if (p->next == NULL) {
      403       403    4                    symbol_hash[p->hash_value] = NULL; }
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      404       404    3                  else {
      405       405    4                    symbol_hash[p->hash_value] = (int *) p->next; }
      406       406    3                } else {
      407       407    3                  prev = p->previous;
      408       408    3                  while (prev->deleted != 0) {
      409       409    4                    prev = prev->previous; }
      410       410    3                  prev->next = p->next ; }
      411       411    2
      412       412    2                p = p->next_sym_entry ;
      413       413    2                next->deleted = -1;
      414       414    2                Free(next);  }
      415       415    1
      416       416    1              sym_tbl_ptr = p;
      417       417    1              first_sym_tbl_ptr = p;
      418       418    1              last_p = p;
      419       419    1
      420       420    1              for(p = first_sym_tbl_ptr; p!= NULL; p = next) {
      421       421    2                next = p->next_sym_entry;
      422       422    2                if (p->storage_class ==AUTO_STORAGE ||
      423       423    2                    p->storage_class == LOCAL_STATIC_STORAGE ||
      424       424    2                    (p->reloc_type == ENTREF_TYPE && p->sym_class != FUNCTION_CLASS) )
                                {
      425       425    3                   last_p->next_sym_entry = p->next_sym_entry;
      426       426    3                   if (p->previous == NULL) {
      427       427    4                     if (p->next == NULL) {
      428       428    5                       symbol_hash[p->hash_value] = NULL; }
      429       429    4                     else {
      430       430    5                       symbol_hash[p->hash_value] = (int *) p->next; }
      431       431    4                   } else {
      432       432    4                     prev = p->previous;
      433       433    4                     while (prev != NULL) {
      434       434    5                       if(prev->deleted == 0) break;
      435       435    5                        prev = prev->previous; }
      436       436    4                     if (prev != NULL) {
      437       437    5                       next_p = p->next ;
      438       438    5                       if (next_p != NULL) {
      439       439    6                         next_p->previous = prev; }
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      440       440    5                       prev->next = p->next; }
      441       441    4                     else {
      442       442    5                       next_p = p->next ;
      443       443    5                       if (next_p != NULL) {
      444       444    6                         next_p->previous = NULL; }
      445       445    5                       else {
      446       446    6                         symbol_hash[p->hash_value] = NULL; }
      447       447    5                     }
      448       448    4                    }
      449       449    3                   p->deleted = -1;
      450       450    3                   Free (p);
      451       451    3                   }
      452       452    2                 else {
      453       453    3                   p->ou_set_flag = 0;
      454       454    3                   sym_tbl_ptr = p;
      455       455    3                   if (p->storage_class == GLOBAL_STORAGE) {
      456       456    4                      p->addr_type = SYMREF_TYPE;
      457       457    4                      p->offset = 0;
      458       458    4                      d = p->debug;
      459       459    4                      if ( d != NULL ) {
      460       460    5                        d->addr_type = SYMREF_TYPE;  }
      461       461    4                    }
      462       462    3                   else {
      463       463    4                    if (p->sym_class == FUNCTION_CLASS &&  (p->reloc_type == ENTREF_TY
                               PE || p->addr_type == STATIC_TYPE)) {
      464       464    5                      p->reloc_section = -1;
      465       465    5                      p->ou_set_flag = 0; } }
      466       466    3                   last_p = p;
      467       467    3                 }
      468       468    2              }  /* end of the for loop. */
      469       469    1              /* release all the dflost ant int constant storage area at
      470       470    1                 this point. */
      471       471    1
      472       472    1              if (dfloat_ptr != NULL) {
      473       473    2                for (c = dfloat_ptr; c != NULL; c = next_c) {
"zb6$static:c.:ZBC3TSI", line 473: (warning) incompatible pointers in =
      474       474    3                  next_c = c->next;
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=14 
      475       475    3                  Free(c);
      476       476    3                 }
      477       477    2               }
      478       478    1              if (int_ptr != NULL) {
      479       479    2                for (c = int_ptr; c!= NULL; c = next_c) {
"zb6$static:c.:ZBC3TSI", line 479: (warning) incompatible pointers in =
      480       480    3                  next_c = c->next;
      481       481    3                  Free(c);
      482       482    3                 }
      483       483    2               }
      484       484    1              return;
      485       485    1              }   /* end of the function walk_vars. */
      486       486
      487       487
      488       488             /*i*
      489       489                   name: set_con_ref_num
      490       490                   purpose: This routine sets the correct reloc type and current
      491       491                   entry number for the global ids in the symbol table.
      492       492             */
      493       493             set_con_ref_num() {
      494       494    1        struct labels *l, *next_l;
      495       495    1
      496       496    1
      497       497    1              if (first_lbl_tbl_ptr != NULL) {
      498       498    2                for (l = first_lbl_tbl_ptr; l != NULL; l = next_l) {
      499       499    3                  next_l = l->next_lbl_entry;
      500       500    3                  if (l->lbl_type == GLOBAL_STATIC_LBL) {
      501       501    4                    l->reloc_type = SYMREF_TYPE;
      502       502    4                    if (l->def_use == ROM_USE) {
      503       503    5                      l->reloc_section = static_con_ref_num; }
      504       504    4                    else {
      505       505    5                      l->reloc_section = static_data_ref_num; }
      506       506    4                  }
      507       507    3                }
      508       508    2              }
      509       509    1
      510       510    1              return;
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=15 
      511       511    1              }  /* end of the function set_con_ref_num. */
      512       512
      513       513
      514       514             /*i*
      515       515                   name: set_data_ref_num
      516       516                   purpose: This routine sets the symbol tables to be sym
      517       517                   refs, and also sets the relocation info for global
      518       518                   static ids.
      519       519             */
      520       520             set_data_ref_num()  {
      521       521    1        struct sym_tbl *s, *next_s;
      522       522    1        struct sym_debug_tbl *d;
      523       523    1
      524       524    1              if (first_sym_tbl_ptr != NULL) {
      525       525    2                for (s = first_sym_tbl_ptr; s != NULL; s = next_s) {
      526       526    3                  next_s = s->next_sym_entry;
      527       527    3                  if (s->storage_class == GLOBAL_STATIC_STORAGE) {
      528       528    4                    s->reloc_type = SYMREF_TYPE;
      529       529    4                    if (s->def_use == ROM_USE) {
      530       530    5                      s->reloc_section = static_con_ref_num; }
      531       531    4                    else {
      532       532    5                      s->reloc_section = static_data_ref_num; } }
      533       533    3                  else {
      534       534    4                    if (s->storage_class == GLOBAL_STORAGE) {
      535       535    5                      s->addr_type = SYMREF_TYPE;
      536       536    5                      s->offset = 0;
      537       537    5                      d = s->debug;
      538       538    5                      if (d != NULL) { /* make sure it is not null ptr. */
      539       539    6                        d->addr_type = SYMREF_TYPE; } }
      540       540    4                  }
      541       541    3                }
      542       542    2              }
      543       543    1
      544       544    1              return;
      545       545    1              }  /* end of the function set_data_ref_num. */
      546       546
      547       547             /*i*
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=16 
      548       548                   name: set_global_debug_vars
      549       549                   purpose: This routine walks the thread of global ids for the
      550       550                   C program and generates debug schema for all the global ids
      551       551                   in the current C function that is having o.u. code generated
      552       552                   for it.
      553       553             */
      554       554             set_global_debug_vars ()  {
      555       555    1        int i;
      556       556    1        struct sym_tbl *s, *next_s , *s1, *next;
      557       557    1
      558       558    1              if (first_sym_tbl_ptr != NULL)  {
      559       559    2                for (s = first_sym_tbl_ptr; s != NULL; s = next_s)  {
      560       560    3                  next_s = s->next_sym_entry;
      561       561    3                  if (s->debug != NULL && s->addr_type != AUTO_TYPE) {
      562       562    4                    if (s->addr_type == SYMREF_TYPE && s->debug->level_no == 1) {
      563       563    5                       set_reloc_stuff(s);
      564       564    5                       s->ou_set_flag = -1; }
      565       565    4                    if (s->reloc_type != ENTREF_TYPE ) {
      566       566    5                    if (s->next != NULL) {
      567       567    6                      for(s1= s; s1 != NULL; s1 = next) {
      568       568    7                        next = s1->next;
      569       569    7                        if((i=strcmp(s1->name, s->name)) == 0 && s1->debug != NULL) {
      570       570    8                          if (s1->debug->level_no == 1 &&
      571       571    8                              s->debug->level_no == 1 &&
      572       572    8                              s1->debug->addr_type == 2 /* auto */) {goto no_global;}
      573       573    8                        }
      574       574    7                      }
      575       575    6                    }  /* end of the if test on s->next  .. */
      576       576    5                    build_debug(s); }
      577       577    4                  }  /* end of the test for debug record. */
      578       578    3                 else {  /* test for auto structrure. */
      579       579    4                  if (s->debug != NULL && s->addr_type == AUTO_TYPE) {
      580       580    5                    if (s->debug->level_no == 1 && s->debug->data_type == STRUCTURE_DA
                               TA_TYPE) {
      581       581    6                      while (next_s != NULL && next_s->debug->level_no != 1) {
      582       582    7                        next_s = next_s->next_sym_entry; }
      583       583    6                    }
CC.C03    File=zb6$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=17 
      584       584    5                  }
      585       585    4                 } /* end of else clause on debug record check. */
      586       586    3        no_global: ;  /* lbl branched to when name scope conflict. */
      587       587    3                 }  /*  end of the for loop. */
      588       588    2              }  /* end of the if test on the first sym tbl ptr. */
      589       589    1              return;
      590       590    1              }  /* end of the routine set_global_debug_vars. */
      591       591
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   codegen:h.:ZBC3TOU. is referenced
   zb6$ougen:h.:ZBC3TOU. is referenced
   zb6$tables:h.:ZBC3TOU. is referenced
   zb6$instructions:h.:ZBC3TOU. is referenced
   zb6$equate1:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zb6$static:c.:ZBC3TSI
