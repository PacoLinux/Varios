

CC.C03    File=zbr$cpp_main:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=1  
        1         1             /* $Header: main.c,v 1.7 87/03/16 15:09:36 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* MAIN PROGRAM */
        7         7             #include "zbp$idf:h"                             /* IDFSIZE */
        8         8             #include "root_interface:h"
        9         9             #include "zbp$macro:h"
       10        10             #include "zbp$file_info:h"
       11        11             #include "zbp$idfsize:h"
       12        12             #include <system:h>
       13        13             #include <string:h>
       14        14             #include <stdio:h>
       15        15             #define  CP6_VERSION "CPP."                      /* CP6_VERSION,zbc$zb_target:
                               h.:ZBB0OU */
       16        16             #include "zbp$input:h"                           /* zb_listing_start_listing *
                               /
       17        17
       18        18             #define SOURCE    10
       19        19             #define UPDATE    11
       20        20             #define OBJECT    12
       21        21             #define  CPP_FMT        "%s processing file %s key=%s\n"
       22        22             char     *CPP_PHASE =   "C Pre-Processor";
       23        23             extern   char *list_rec_source;
       24        24
       25        25             extern char *getwdir();
       26        26             extern int err_occurred;
       27        27             int idfsize = IDFSIZE;
       28        28             int ifval;
       29        29             char options[128];
       30        30             char *prog_name;
       31        31             char *source = 0;
       32        32             char *update_file = 0;
       33        33             char *destination = 0;
       34        34             FILE *cppout;
CC.C03    File=zbr$cpp_main:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=2  
       35        35             extern char *GetFileName();
       36        36             int updates;
       37        37             int inc_pos = 1;                                 /* place where next -I goes *
                               /
       38        38             char *inctable[MAXINCL]       = {
       39        39    1         "..",
       40        40    1         ":LIBRARY",                                     /*  or :LIB_E02?*/
       41        41    1         0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       42        42    1        }   ;
       43        43             cpp_main(cpp_arg)
       44        44               struct arguments *cpp_arg;
       45        45             {
       46        46    1
       47        47    1        #include <alloc:h>                               /* st_free */
       48        48    1        #define free_dlist(p)  st_free(p, &hh_dlist, sizeof(struct dlist))
       49        49    1        void Free(void *);
       50        50    1        extern int Mvmalloc;
       51        51    1        struct dlist *hh_dlist;
       52        52    1        register struct dlist *p = cpp_arg->DefineList;
       53        53    1
       54        54    1
       55        55    1        for (updates=0; updates<128; updates++)
       56        56    1            options[updates] = (cpp_arg->options)[updates];
       57        57    1        prog_name = cpp_arg->prog_name;
       58        58    1        updates = cpp_arg->update_input;
       59        59    1
       60        60    1        init_idf();
       61        61    1        init_pp();                                         /* initialise the preproces
                               sor macros */
       62        62    1
       63        63    1
       64        64    1        if (!options['A']) {
       65        65    2            macro_def(str2idf("TS_CP6",0), (char **)0, "1", -1, 1, NOFLAG);
       66        66    2            macro_def(str2idf("TM_L66",0), (char **)0, "1", -1, 1, NOFLAG);
       67        67    2        }
       68        68    1        macro_def(str2idf("_CP6_",0), (char **)0, "1", -1, 1, NOFLAG);
       69        69    1        macro_def(str2idf("_L66_",0), (char **)0, "1", -1, 1, NOFLAG);
CC.C03    File=zbr$cpp_main:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=3  
       70        70    1
       71        71    1        if (cpp_arg->idfsize) {                          /* identifier size is given f
                               rom command line */
       72        72    2           idfsize = cpp_arg->idfsize;
       73        73    2           if (idfsize > IDFSIZE) {
       74        74    3               warning("maximum identifier length is %d", IDFSIZE);
       75        75    3               idfsize = IDFSIZE;
       76        76    3           }
       77        77    2           if (idfsize < 8) {                            /* Notice the difference betw
                               een CPP & CEM */
       78        78    3               warning("minimum identifier length is 8");
       79        79    3               idfsize = 8;
       80        80    3           }
       81        81    2        }
       82        82    1
       83        83    1
       84        84    1        while (p != (struct dlist *)0 ) {
       85        85    2        register struct dlist *nxt = p->next;
       86        86    2          if (p->type) {                                 /* NDefine */
       87        87    3               register struct idf *idef = findidf(p->dname);
       88        88    3               if (idef && idef->id_macro) {
       89        89    4                  free_macro(idef->id_macro);
       90        90    4                  idef->id_macro = (struct macro *) 0;
       91        91    4               }
       92        92    3          }
       93        93    2          else {                                         /* Define */
       94        94    3               if (p->buf) {                             /* Define(id=buf) */
       95        95    4                  macro_def(str2idf(p->dname,0), (char **)0, p->buf, -1, strlen(p->buf
                               ), NOFLAG);
       96        96    4               }
       97        97    3               else {                                    /* Define(id) */
       98        98    4                  macro_def(str2idf(p->dname,0), (char **)0, "1", -1, 2, NOFLAG);
       99        99    4               }
      100       100    3          };
      101       101    2          Mvmalloc = 0;
      102       102    2          Free(p->dname);
      103       103    2          Mvmalloc = 1;
CC.C03    File=zbr$cpp_main:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=4  
      104       104    2          free_dlist(p);
      105       105    2          p = nxt;
      106       106    2        }
      107       107    1        { int i;
      108       108    2          for (i=1; i<MAXINCL; i++)
      109       109    2               inctable[i] = (cpp_arg->srch_table)[i];
      110       110    2        }
      111       111    1
      112       112    1         cpp_compile(cpp_arg->opt_ui, cpp_arg->opt_lu);
      113       113    1
      114       114    1        }
      115       115
      116       116             int zb_ls_depth = 0;
      117       117             int zb_skipping = 0;
      118       118             extern int zb_LS_flag;
      119       119
      120       120             cpp_compile(opt_ui, opt_lu)
      121       121                   unsigned int opt_ui;
      122       122                   unsigned int opt_lu;
      123       123             {
      124       124    1
      125       125    1        void ZB_CLOSE_OU_FILE();
      126       126    1
      127       127    1          options['l'] = zb_LS_flag;
      128       128    1          zb_listing_start_listing(CP6_VERSION,&zb_ls_depth, &zb_skipping);
      129       129    1          if (!OpenSource( 1 + updates, opt_ui, opt_lu)) {
      130       130    2              GetFileName(SOURCE);
      131       131    2              FileName = source;
      132       132    2              if (updates) {
      133       133    3                 GetFileName(UPDATE);
      134       134    3                 fatal("%s: no source file %s or no update file %s\n", prog_name, sour
                               ce, update_file);
      135       135    3              }
      136       136    2              fatal("%s: no source file %s\n", prog_name, source);
      137       137    2          };
      138       138    1          GetFileName(SOURCE);
      139       139    1          FileName = source;
CC.C03    File=zbr$cpp_main:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=5  
      140       140    1
      141       141    1          if ((cppout = fopen("dcb=M$OU", "w")) == (FILE *) 0)
      142       142    1             fatal ("Can not create output for CPP\n");
      143       143    1
      144       144    1          if (source) WorkingDir = getwdir(source);
      145       145    1          set_break_vars (CPP_FMT, &CPP_PHASE, &source, &list_rec_source,
      146       146    1                         (int *) 0, (char **) 0, (int *) 0, (int *) 0);
      147       147    1          preprocess(source);
      148       148    1          fclose(cppout);
      149       149    1        }
      150       150
      151       151
      152       152             char *
      153       153             GetFileName(FileType)
      154       154              int FileType;
      155       155             /* Purpose :
      156       156              *            This function returns filename strings translated
      157       157              *            from M$SI, M$UI, M$OU.
      158       158              *
      159       159              * FileType :
      160       160              *            SOURCE  :returns filename of M$SI
      161       161              *            UPDATE  :returns filename of M$UI
      162       162              *            OBJECT  :returns filename of M$OU
      163       163              */
      164       164             {
      165       165    1        #include <fileinfo:h>
      166       166    1        extern int finform();
      167       167    1
      168       168    1        FILE_SET    M_SI_set;
      169       169    1        FILE        M_SI;
      170       170    1
      171       171    1              M_SI._fpt_read._v._dcb = FileType;
      172       172    1              if (!finform(&M_SI, &M_SI_set)) {
      173       173    2                register char *filename = M_SI_set.fid;
      174       174    2                switch (FileType) {
      175       175    3                case SOURCE:
      176       176    3                       return strcpy(source=Malloc(strlen(filename)+1), filename);
CC.C03    File=zbr$cpp_main:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=6  
      177       177    3                case UPDATE:
      178       178    3                       return strcpy(update_file=Malloc(strlen(filename)+1), filename)
                               ;
      179       179    3                case OBJECT:
      180       180    3                       return strcpy(destination=Malloc(strlen(filename)+1), filename)
                               ;
      181       181    3                default:
      182       182    3                       break;
      183       183    3                }
      184       184    2              }
      185       185    1              return (char *)0;
      186       186    1        }
---  Include file information  ---

   zbp$idf:h.:ZBC3TOU. is referenced
   idf_pkg:spec.:ZBC3TOU. is referenced
   zbr$root_interface:h.:ZBC3TOU. is referenced
   xu_cp6_c:h.:LIB_E05. is referenced
   xu_macro_c:h.:LIB_E05. is referenced
   xux$interface_m:h.:LIB_E05. is referenced
   zbp$macro:h.:ZBC3TOU. is referenced
   zbp$file_info:h.:ZBC3TOU. is referenced
   zbp$idfsize:h.:ZBC3TOU. is referenced
   system:h.:ZBC3TOU. is referenced
   string:h.:LIB_E05. is referenced
   stdio:h.:LIB_E05. is referenced
   zbp$input:h.:ZBC3TOU. is referenced
   zbp$inputtype:h.:ZBC3TOU. is referenced
   inp_pkg:spec.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   fileinfo:h.:LIB_E05. is referenced

No diagnostics were issued in the file zbr$cpp_main:c.:ZBC3TSI
