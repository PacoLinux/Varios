

CC.C03    File=zbg$move:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             #ifndef NORCSID
        2         2             static char rcsid[] = "$Header: move.c,v 0.3 87/03/10 01:02:34 ceriel Exp $";
        3         3             #endif
        4         4
        5         5             #include "assert:h"
        6         6             #include "param:h"
        7         7             #include "tables:h"
        8         8             #include "types:h"
        9         9             #include <cgg_cg:h>
       10        10             #include "data:h"
       11        11             #include "result:h"
       12        12             #include "extern:h"
       13        13
       14        14             /*
       15        15              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
       16        16              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
       17        17              *
       18        18              * Author: Hans van Staveren
       19        19              */
       20        20
       21        21             unsigned costcalc();
       22        22
       23        23             move(tp1,tp2,ply,toplevel,maxcost) token_p tp1,tp2; unsigned maxcost; {
       24        24    1         register move_p mp;
       25        25    1         register unsigned t;
       26        26    1         register struct reginfo *rp;
       27        27    1         tkdef_p tdp;
       28        28    1         int i;
       29        29    1         unsigned codegen();
       30        30    1
       31        31    1         if (eqtoken(tp1,tp2))
       32        32    1            return(0);
       33        33    1         if (tp2->t_token == -1) {
       34        34    2            if (tp1->t_token == -1) {
       35        35    3               if (eqtoken(&machregs[tp1->t_att[0].ar].r_contents,
       36        36    3                      &machregs[tp2->t_att[0].ar].r_contents) &&
CC.C03    File=zbg$move:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37    3                     machregs[tp1->t_att[0].ar].r_contents.t_token!=0)
       38        38    3                  return(0);
       39        39    3               erasereg(tp2->t_att[0].ar);
       40        40    3               machregs[tp2->t_att[0].ar].r_contents =
       41        41    3                 machregs[tp1->t_att[0].ar].r_contents ;
       42        42    3
       43        43    3            } else {
       44        44    3               if (eqtoken(&machregs[tp2->t_att[0].ar].r_contents,tp1))
       45        45    3                  return(0);
       46        46    3               erasereg(tp2->t_att[0].ar);
       47        47    3               machregs[tp2->t_att[0].ar].r_contents = *tp1;
       48        48    3            }
       49        49    2            for (rp=machregs+1;rp<machregs+NREGS;rp++) {
       50        50    3               if (rp->r_contents.t_token == 0)
       51        51    3                  continue;
       52        52    3               assert(rp->r_contents.t_token > 0);
       53        53    3               tdp = &tokens[rp->r_contents.t_token];
       54        54    3               for (i=0;i<TOKENSIZE;i++)
       55        55    3                  if (tdp->t_type[i] == EV_REG &&
       56        56    3                      clash(rp->r_contents.t_att[i].ar,tp2->t_att[0].ar)) {
       57        57    4                     erasereg(rp-machregs);
       58        58    4                     break;
       59        59    4                  }
       60        60    3            }
       61        61    2         } else if (tp1->t_token == -1) {
       62        62    2            if (eqtoken(tp2,&machregs[tp1->t_att[0].ar].r_contents))
       63        63    2               return(0);
       64        64    2            machregs[tp1->t_att[0].ar].r_contents = *tp2;
       65        65    2         }
       66        66    1         /*
       67        67    1          * If we arrive here the move must really be executed
       68        68    1          */
       69        69    1         for (mp=moves;mp->m_set1>=0;mp++) {
       70        70    2            if (!match(tp1,&machsets[mp->m_set1],mp->m_expr1))
       71        71    2               continue;
       72        72    2            if (match(tp2,&machsets[mp->m_set2],mp->m_expr2))
       73        73    2               break;
CC.C03    File=zbg$move:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74    2            /*
       75        75    2             * Correct move rule is found
       76        76    2             */
       77        77    2         }
       78        78    1         assert(mp->m_set1>=0);
       79        79    1         /*
       80        80    1          * To get correct interpretation of things like %[1]
       81        81    1          * in move code we stack tp2 and tp1. This little trick
       82        82    1          * saves a lot of testing in other places.
       83        83    1          */
       84        84    1
       85        85    1         fakestack[stackheight] = *tp2;
       86        86    1         fakestack[stackheight+1] = *tp1;
       87        87    1         stackheight += 2;
       88        88    1         tokpatlen += 2;
       89        89    1         t = codegen(&coderules[mp->m_cindex],ply,toplevel,maxcost,0);
       90        90    1         tokpatlen -= 2;
       91        91    1         stackheight -= 2;
       92        92    1         return(t);
       93        93    1        }
       94        94
       95        95             #define cocoreg machregs[0].r_contents
       96        96
       97        97             setcc(tp) token_p tp; {
       98        98    1
       99        99    1         cocoreg = *tp;
      100       100    1        }
      101       101
      102       102             test(tp,ply,toplevel,maxcost) token_p tp; unsigned maxcost; {
      103       103    1         register test_p mp;
      104       104    1         register unsigned t;
      105       105    1         register struct reginfo *rp;
"zbg$move:c.:ZBC3TSI", line 105: (warning) identifier "rp" is not used
      106       106    1         tkdef_p tdp;
"zbg$move:c.:ZBC3TSI", line 106: (warning) identifier "tdp" is not used
      107       107    1         int i;
"zbg$move:c.:ZBC3TSI", line 107: (warning) identifier "i" is not used
CC.C03    File=zbg$move:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      108       108    1         unsigned codegen();
      109       109    1
      110       110    1         if (cocoreg.t_token!=0) {
      111       111    2            if (eqtoken(tp,&cocoreg))
      112       112    2               return(0);
      113       113    2            if (tp->t_token == -1) {
      114       114    3               if (eqtoken(&machregs[tp->t_att[0].ar].r_contents,&cocoreg))
      115       115    3                  return(0);
      116       116    3            }
      117       117    2         }
      118       118    1         /*
      119       119    1          * If we arrive here the test must really be executed
      120       120    1          */
      121       121    1         for (mp=tests;mp->t_set>=0;mp++) {
      122       122    2            if (match(tp,&machsets[mp->t_set],mp->t_expr))
      123       123    2               break;
      124       124    2            /*
      125       125    2             * Correct move rule is found
      126       126    2             */
      127       127    2         }
      128       128    1         assert(mp->t_set>=0);
      129       129    1         /*
      130       130    1          * To get correct interpretation of things like %[1]
      131       131    1          * in test code we stack tp. This little trick
      132       132    1          * saves a lot of testing in other places.
      133       133    1          */
      134       134    1
      135       135    1         fakestack[stackheight] = *tp;
      136       136    1         stackheight++;
      137       137    1         tokpatlen++;
      138       138    1         t = codegen(&coderules[mp->t_cindex],ply,toplevel,maxcost,0);
      139       139    1         tokpatlen--;
      140       140    1         stackheight--;
      141       141    1         return(t);
      142       142    1        }
      143       143
---  Include file information  ---
CC.C03    File=zbg$move:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  

   zbg$assert:h.:ZBC3TOU. is referenced
   zbg$param:h.:ZBC3TOU. is referenced
   tables:h.:ZBC3TOU. is referenced
   zbg$types:h.:ZBC3TOU. is referenced
   cgg_cg:h.:ZBC3TOU. is referenced
   zbg$data:h.:ZBC3TOU. is referenced
   zbg$result:h.:ZBC3TOU. is referenced
   zbg$extern:h.:ZBC3TOU. is referenced

3 warnings were detected in the file zbg$move:c.:ZBC3TSI
