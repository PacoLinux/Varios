

10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 1    
    1      /* $Header: reade.c,v 1.6 87/03/12 22:24:19 ceriel Exp $ */
    2      /*
    3       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    4       * See the copyright notice in the ACK home directory, in the file "Copyright".
    5       */
    6      /*  This file is ment to be included in the file read_emeV.c.
    7       It contains the part that takes care of the reading of human readable
    8       EM-code.
    9      */
   10
   11      #include <ctype.h>
   12
   13      /* #define XXX_YYY /* only for early debugging */
   14
   15      #ifdef XXX_YYY
   16      #define out(str)   (sys_write(STDOUT, str, strlen(str)))
   17      #else
   18      #define out(s)
   19      #endif
   20
   21      #ifdef  TM_L66
   22      #define fit16i(x)  ((x) >= -262144L && (x) <= 262143L)
   23      #else
   24      #define fit16i(x)  ((x) >= -32768L && (x) <= 32767L)
   25      #endif
   26
   27      #define HSIZE   256   /* Size of hashtable for mnemonics */
   28
   29      static int hashtab[HSIZE];  /* The hashtable for mnemonics */
   30
   31      static int argnum;    /* Number of arguments */
   32
   33      #define COMMENTSTARTER   ';'
   34
   35      /* inithash, pre_hash, hash: Simple hashtable mechanism
   36      */
   37      PRIVATE int
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 2    
   38      hash(s)
   39       register char *s;
   40      {
   41       register int h = 0;
   42
   43       while (*s) {
   44          h <<= 1;
   45          h += *s++;
   46       }
   47       return h;
   48      }
   49
   50      PRIVATE
   51      pre_hash(i, s)
   52       char *s;
   53      {
   54       register int h;
   55
   56       assert(i != 0);
   57       h = hash(s);
   58
   59       for (;;) {
   60          h++;
   61          if (h >= HSIZE) h %= HSIZE;
   62          if (hashtab[h] == 0) {
   63             hashtab[h] = i;
   64             return;
   65          }
   66       }
   67       /*NOTREACHED*/
   68      }
   69
   70      extern char em_mnem[][4];
   71      extern char em_pseu[][4];
   72
   73      PRIVATE
   74      inithash()
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 3    
   75      {
   76       register int i;
   77
   78       /* Enter instructions ... */
   79       for (i = sp_fmnem; i <= sp_lmnem; i++) {
   80          pre_hash(i, em_mnem[i - sp_fmnem]);
   81       }
   82
   83       /* and pseudos ... */
   84       for (i = sp_fpseu; i <= sp_lpseu; i++) {
   85          pre_hash(i, em_pseu[i - sp_fpseu]);
   86       }
   87      }
   88
   89      /* nospace: skip until we find a non-space character. Also skip
   90       comments.
   91      */
   92      PRIVATE int
   93      nospace()
   94      {
   95       register int c;
   96
   97       do c = getbyte();
   98       while (isspace(c) && c != '\n');
   99
  100       if (c == COMMENTSTARTER) {
  101          do c = getbyte();
  102          while (c != '\n' && c != EOF);
  103       }
  104
  105       return c;
  106      }
  107
  108      /* syntax: Put an error message in EM_error and skip to the end of the line
  109      */
  110      PRIVATE
  111      syntax(s)
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 4    
  112       char *s;
  113      {
  114       register int c;
  115
  116       xerror(s);
  117       state = 0;
  118       while ((c = getbyte()) != '\n' && c != EOF) /* nothing */ ;
  119       ungetbyte(c);
  120      }
  121
  122      /* checkeol: check that we have a complete line (except maybe for spaces)
  123      */
  124      PRIVATE
  125      checkeol()
  126      {
  127
  128       if (nospace() != '\n') {
  129          syntax("end of line expected");
  130          nospace();
  131       }
  132      }
  133
  134      /* getescape: read a '\' escape sequence
  135      */
  136      PRIVATE int
  137      getescape()
  138      {
  139       register int c, j, r;
  140
  141       if ((c = getbyte()) >= '0' && c <= '7') { /* numeric escape */
  142          r = c - '0';
  143
  144          for (j = 0; j < 2; j++) {
  145             if ((c = getbyte()) < '0' || c > '7') {
  146                ungetbyte(c);
  147                return r;
  148             }
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 5    
  149             r <<= 3;
  150             r += c - '0';
  151          }
  152
  153          return r;
  154       }
  155
  156       switch(c) {
  157       case 'b':   return '\b';
  158       case 'f':   return '\f';
  159       case 'n':   return '\n';
  160       case 'r':   return '\r';
  161       case 't':   return '\t';
  162       }
  163
  164       return c;
  165      }
  166
  167      /* getname: Read a string of characters representing an identifier
  168      */
  169      PRIVATE struct string *
  170      getname()
  171      {
  172       register char *p;
  173       register struct string *s;
  174       register int c;
  175
  176       s = stringentry();
  177       p = s->str;
  178       c = getbyte();
  179
  180       if (!(isalpha(c) || c == '_')) {
  181          ungetbyte(c);
  182          syntax("Letter expected");
  183          return s;
  184       }
  185
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 6    
  186       while (isalnum(c) || c == '_') {
  187          if (p < &(s->str[STRSIZ])) *p++ = c;
  188          c = getbyte();
  189       }
  190
  191       ungetbyte(c);
  192       *p = '\0';
  193       s->length = p - s->str;
  194       return s;
  195      }
  196
  197      /* getstring: read a string of characters between quotes
  198      */
  199      PRIVATE struct string *
  200      getstring()
  201      {
  202       register char *p;
  203       struct string *s;
  204       register int c;
  205       static int termc;
  206
  207       s = stringentry();
  208       p = s->str;
  209
  210       if (!(state & INSTRING)) { /* Not reading a string yet */
  211          termc = getbyte();
  212          /* assert(termc == '"' || termc == '\''); */
  213          /* This assertion does not work. Compiler error messages.
  214             The trouble lies in the ", it terminates the string
  215             created in the assertion macro
  216          */
  217       }
  218
  219       for (;;) {
  220          if ((c = getbyte()) == '\n' || c == EOF) {
  221             ungetbyte(c);
  222             syntax("non-terminated string");
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 7    
  223             break;
  224          }
  225
  226          if (c == termc) {
  227             if (termc == '"') *p++ = '\0';
  228             state &= ~INSTRING;
  229             break;
  230          }
  231
  232          if (c == '\\') c = getescape();
  233
  234          if (p >= &(s->str[STRSIZ])) {
  235             state |= INSTRING;
  236             ungetbyte(c);
  237             break;
  238          }
  239
  240          *p++ = c;
  241       }
  242       *p = '\0';
  243
  244       s->length = p - s->str;
  245       return s;
  246      }
  247
  248      PRIVATE struct e_args *gettyp();
  249
  250      PRIVATE int
  251      offsetted(argtyp, ap)
  252       arith *ap;
  253      {
  254       register int c;
  255       register struct e_args *ap1;
  256
  257       if ((c = nospace()) == '+' || c == '-') {
  258          ap1 = gettyp(cst_ptyp);
  259          if (c == '-') *ap = -(ap1->em_cst);
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 8    
  260          else *ap = ap1->em_cst;
  261          return sp_doff;
  262       }
  263       else  *ap = 0;
  264
  265       ungetbyte(c);
  266       return argtyp;
  267      }
  268
  269      PRIVATE int
  270      getnumber(c, ap)
  271       register int c;
  272       register struct e_args *ap;
  273      {
  274       register char *p;
  275       int n;
  276       register struct string *s = stringentry();
  277       int expsign;
  278       long str2long();
  279
  280       p = s->str;
  281       ap->em_argtype = cst_ptyp;
  282       expsign = 0;
  283
  284       if (c == '+' || c == '-') {
  285          if (c == '-') *p++ = c;
  286          c = getbyte();
  287       }
  288
  289       if (! isdigit(c)) {
  290          ungetbyte(c);
  291          syntax("digit expected");
  292          i_strings--;
  293          return sp_cst4;
  294       }
  295
  296       n = sp_cst4;
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 9    
  297
  298       for (;;) {
  299          if (p >= &(s->str[STRSIZ])) {
  300             syntax("number too long");
  301             i_strings--;
  302             return sp_cst4;
  303          }
  304
  305          *p++ = c;
  306
  307          if ((c = getbyte()) == '.' || c == 'e' || c == 'E') {
  308             expsign = c != '.';
  309             n = sp_fcon;
  310             continue;
  311          }
  312
  313          if (expsign) {
  314             expsign = 0;
  315             if (c == '+' || c == '-') continue;
  316          }
  317
  318          if (! isdigit(c)) break;
  319       }
  320
  321       ungetbyte(c);
  322       *p = '\0';
  323       c = nospace();
  324
  325       if (n == sp_fcon && c != 'F') {
  326          ungetbyte(c);
  327          syntax("'F' expected");
  328          return n;
  329       }
  330
  331       if (c == 'I' || c == 'U' || c == 'F') {
  332          ap->em_str = s->str;
  333          ap->em_size = gettyp(cst_ptyp)->em_cst;
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 10   
  334
  335          switch(c) {
  336          case 'I':
  337             ap->em_argtype = ico_ptyp;
  338             return sp_icon;
  339          case 'U':
  340             ap->em_argtype = uco_ptyp;
  341             return sp_ucon;
  342          case 'F':
  343             ap->em_argtype = fco_ptyp;
  344             return sp_fcon;
  345          }
  346          assert(0);
  347       }
  348
  349       ungetbyte(c);
  350       ap->em_cst = (arith) str2long(s->str, 10);
  351       i_strings--;
  352       return sp_cst4;
  353      }
  354
  355      PRIVATE int getexpr();
  356
  357      PRIVATE int
  358      getfactor(c, ap)
  359       register int c;
  360       register struct e_args *ap;
  361      {
  362       if (c == '(') {
  363          if (getexpr(nospace(), ap) != sp_cst4) {
  364             syntax("expression expected");
  365          }
  366          else if ((c = nospace()) != ')') {
  367             ungetbyte(c);
  368             syntax("')' expected");
  369          }
  370          return sp_cst4;
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 11   
  371       }
  372       return getnumber(c, ap);
  373      }
  374
  375      PRIVATE int
  376      getterm(c, ap)
  377       register int c;
  378       register struct e_args *ap;
  379      {
  380       arith left;
  381
  382       if ((c = getfactor(c, ap)) != sp_cst4) return c;
  383
  384       for (;;) {
  385          if ((c = nospace()) != '*' && c != '/' && c != '%') {
  386             ungetbyte(c);
  387             break;
  388          }
  389
  390          left = ap->em_cst;
  391          if (getfactor(nospace(), ap) != sp_cst4) {
  392             syntax("factor expected");
  393             break;
  394          }
  395
  396          if (c == '*') ap->em_cst *= left;
  397          else if (c == '/') ap->em_cst = left / ap->em_cst;
  398          else  ap->em_cst = left % ap->em_cst;
  399       }
  400       return sp_cst4;
  401      }
  402
  403      PRIVATE int
  404      getexpr(c, ap)
  405       register int c;
  406       register struct e_args *ap;
  407      {
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 12   
  408       arith left;
  409
  410       if ((c = getterm(c, ap)) != sp_cst4) return c;
  411
  412       for (;;) {
  413          if ((c = nospace()) != '+' && c != '-') {
  414             ungetbyte(c);
  415             break;
  416          }
  417
  418          left = ap->em_cst;
  419          if (getterm(nospace(), ap) != sp_cst4) {
  420             syntax("term expected");
  421             break;
  422          }
  423
  424          if (c == '+') ap->em_cst += left;
  425          else ap->em_cst = left - ap->em_cst;
  426       }
  427       return sp_cst4;
  428      }
  429
  430      PRIVATE int
  431      get15u()
  432      {
  433       register struct e_args *ap = argentry();
  434
  435       ap->em_next = 0;
  436       if (getnumber(getbyte(), ap) != sp_cst4) {
  437          syntax("integer expected");
  438       }
  439      #ifdef TM_L66
  440       else check((ap->em_cst & ~0377777) == 0);
  441      #else
  442       else check((ap->em_cst & ~077777) == 0);
  443      #endif
  444       i_emargs--;
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 13   
  445       return (int) (ap->em_cst);
  446      }
  447
  448      PRIVATE struct e_args *
  449      gettyp(typset)
  450      {
  451       register int c, t;
  452       register struct e_args *ap = argentry();
  453       register int argtyp;
  454
  455       ap->em_next = 0;
  456       if ((c = nospace()) == '\n') {
  457          ungetbyte(c);
  458          out("newline\n");
  459          argtyp = sp_cend;
  460       }
  461       else if (isdigit(c) || c == '+' || c == '-' || c == '(') {
  462          out("expr\n");
  463          argtyp = getexpr(c, ap);
  464          if (argtyp == sp_cst4 && fit16i(ap->em_cst)) argtyp = sp_cst2;
  465       }
  466       else if (isalpha(c) || c == '_') {
  467          out("name\n");
  468          ungetbyte(c);
  469          ap->em_dnam = getname()->str;
  470          ap->em_argtype = sof_ptyp;
  471          argtyp = offsetted(sp_dnam, &(ap->em_soff));
  472       }
  473       else if (c == '.') {
  474          out(".label\n");
  475          ap->em_dlb = get15u();
  476          ap->em_argtype = nof_ptyp;
  477          argtyp = offsetted(sp_dlb2, &(ap->em_noff));
  478       }
  479       else if (c == '*') {
  480          out("*label\n");
  481          ap->em_ilb = get15u();
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 14   
  482          ap->em_argtype = ilb_ptyp;
  483          argtyp = sp_ilb2;
  484       }
  485       else if (c == '$') {
  486          out("$name\n");
  487          ap->em_pnam = getname()->str;
  488          ap->em_argtype = pro_ptyp;
  489          argtyp = sp_pnam;
  490       }
  491       else if (c == '"' || c == '\'') {
  492          register struct string *s;
  493
  494          out("string\n");
  495          ungetbyte(c);
  496          s = getstring(0);
  497          ap->em_str = s->str;
  498          ap->em_size = s->length;
  499          ap->em_argtype = str_ptyp;
  500          argtyp = sp_scon;
  501       }
  502       else if (c == '?') {
  503          out("?\n");
  504          argtyp = sp_cend;
  505       }
  506       else {
  507          /* c != '\n', so "ungetbyte" not neccesary */
  508          syntax("operand expected");
  509          return ap;
  510       }
  511
  512       t = argtyp - sp_fspec;
  513       assert(t >= 0 && t < 16);
  514       if ((typset & (1 << t)) == 0) {
  515          syntax("Bad argument type");
  516          return ap;
  517       }
  518
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 15   
  519       if (argtyp == sp_cend) return 0;
  520       return ap;
  521      }
  522
  523      PRIVATE struct e_args *
  524      getarg(typset)
  525      {
  526       register int c;
  527
  528       if (argnum != 1) {
  529          if ((c = nospace()) != ',') {
  530             if (c != '\n') {
  531                syntax("comma expected");
  532                return 0;
  533             }
  534             ungetbyte(c);
  535          }
  536       }
  537       argnum++;
  538       return gettyp(typset);
  539      }
  540
  541      /* getmnem: We found the start of either an instruction or a pseudo.
  542       get the rest of it
  543      */
  544      PRIVATE
  545      getmnem(c, p)
  546       register struct e_instr *p;
  547      {
  548       register int h;
  549       int i;
  550       register struct string *s;
  551
  552       ungetbyte(c);
  553       s = getname();
  554       h = hash(s->str);
  555
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 16   
  556       for (;;) {
  557          h++;
  558          if (h >= HSIZE) h %= HSIZE;
  559          if ((i = hashtab[h]) == 0) {
  560             syntax("bad mnemonic");
  561             return;
  562          }
  563          else if (i <= sp_lmnem) {
  564             assert(i >= sp_fmnem);
  565             if (strcmp(s->str, em_mnem[i - sp_fmnem]) != 0) {
  566                continue;
  567             }
  568             p->em_type = EM_MNEM;
  569             p->em_opcode = i;
  570             break;
  571          }
  572          assert(i <= sp_lpseu && i >= sp_fpseu);
  573          if (strcmp(s->str, em_pseu[i - sp_fpseu]) != 0) {
  574             continue;
  575          }
  576          if (i == ps_mes) {
  577             p->em_type = EM_STARTMES;
  578             break;
  579          }
  580          p->em_opcode = i;
  581          p->em_type = EM_PSEU;
  582          break;
  583       }
  584       i_strings--;
  585      }
  586
  587      PRIVATE
  588      line_line()
  589      {
  590       register struct e_args *ap;
  591       static char filebuf[STRSIZ + 1];
  592       char *btscpy();
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 17   
  593
  594       ap = gettyp(ptyp(sp_cst2));
  595       EM_lineno = ap->em_cst;
  596       i_emargs--;
  597       ap = gettyp(str_ptyp);
  598       btscpy(filebuf, ap->em_str, (int) ap->em_size);
  599       i_emargs--;
  600       i_strings--;
  601       EM_filename = filebuf;
  602      }
  603
  604      PRIVATE
  605      getlabel(c, p)
  606       register struct e_instr *p;
  607      {
  608       register struct e_args *ap;
  609
  610       ungetbyte(c);
  611       ap = gettyp(lab_ptyp|ptyp(sp_cst2));
  612       switch(ap->em_argtype) {
  613       case cst_ptyp:
  614          p->em_type = EM_DEFILB;
  615          p->em_deflb = ap->em_cst;
  616          break;
  617       case sof_ptyp:
  618          p->em_type = EM_DEFDNAM;
  619          p->em_defdnam = ap->em_dnam;
  620          break;
  621       case nof_ptyp:
  622          p->em_type = EM_DEFDLB;
  623          p->em_deflb = ap->em_dlb;
  624          break;
  625       }
  626       checkeol();
  627      }
  628
  629      PRIVATE struct e_instr *
10:54 AUG 20 '97 zbm$read$reade:c.:ZBC3TSI                                 18   
  630      gethead()
  631      {
  632       register int c, i;
  633       register struct e_instr *p = &emhead;
  634
  635       argnum = 1;
  636       for (;;) {
  637          EM_lineno++;
  638          c = getbyte();
  639          if (c == COMMENTSTARTER) {
  640             do c = getbyte();
  641             while (c != '\n' && c != EOF);
  642          }
  643          if (c == EOF) return 0;
  644          if (c == '\n') continue;
  645          if (isspace(c)) {
  646             c = nospace();
  647             if (isalpha(c) || c == '_') {
  648                getmnem(c, p);
  649                return p;
  650             }
  651             ungetbyte(c);
  652          }
  653          else if (c == '#') line_line();
  654          else {
  655             getlabel(c, p);
  656             return p;
  657          }
  658          checkeol();
  659       }
  660       /*NOTREACHED*/
  661      }
  662

