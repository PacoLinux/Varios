

CC.C03    File=zbl$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              *
        5         5              */
        6         6
        7         7             /*
        8         8              *  L L G E N
        9         9              *
       10        10              *  An Extended LL(1) Parser Generator
       11        11              *
       12        12              *  Author : Ceriel J.H. Jacobs
       13        13              */
       14        14
       15        15             /*
       16        16              * alloc.c
       17        17              * Interface to malloc() and realloc()
       18        18              */
       19        19
       20        20             # include "types:h"
       21        21             # include "extern:h"
       22        22
       23        23             # ifndef NORCSID
       24        24             static string rcsid = "$Header: alloc.c,v 2.3 87/03/10 01:12:32 ceriel Exp $";

       25        25             # endif
       26        26
       27        27             static string e_nomem = "Out of memory";
       28        28
       29        29             p_mem
       30        30             alloc(size) unsigned size; {
       31        31    1         /*
       32        32    1            Allocate "size" bytes. Panic if it fails
       33        33    1          */
       34        34    1         p_mem p;
       35        35    1         p_mem malloc();
CC.C03    File=zbl$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=2  
       36        36    1
       37        37    1         if ((p = malloc(size)) == 0) fatal(linecount,e_nomem);
       38        38    1         return p;
       39        39    1        }
       40        40
       41        41             p_mem
       42        42             ralloc(p,size) p_mem p; unsigned size; {
       43        43    1         /*
       44        44    1            Re-allocate the chunk of memory indicated by "p", to
       45        45    1            occupy "size" bytes
       46        46    1          */
       47        47    1         p_mem realloc();
       48        48    1
       49        49    1         if ((p = realloc(p,size)) == 0) fatal(linecount,e_nomem);
       50        50    1         return p;
       51        51    1        }
       52        52
       53        53             p_mem
       54        54             new_mem(p) register p_info p; {
       55        55    1         /*
       56        56    1            This routine implements arrays that can grow.
       57        57    1            It must be called every time a new element is added to it.
       58        58    1            Also, the array has associated with it a "info_alloc" structure,
       59        59    1            which contains info on the element size, total allocated size,
       60        60    1            a pointer to the array, a pointer to the first free element,
       61        61    1            and a pointer to the top.
       62        62    1            If the base of the array is remembered elsewhere, it should
       63        63    1            be updated each time this routine is called
       64        64    1          */
       65        65    1         p_mem rp;
       66        66    1         unsigned sz;
       67        67    1
       68        68    1         if (p->i_max >= p->i_top) {   /* No more free elements */
       69        69    2            sz = p->i_size;
       70        70    2            p->i_size += p->i_incr * p->i_esize;
       71        71    2            p->i_ptr = !p->i_ptr ?
       72        72    2               alloc(p->i_size) :
CC.C03    File=zbl$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=3  
       73        73    2               ralloc(p->i_ptr, p->i_size);
       74        74    2            p->i_max = p->i_ptr + sz;
       75        75    2            p->i_top = p->i_ptr + p->i_size;
       76        76    2         }
       77        77    1         rp = p->i_max;
       78        78    1         p->i_max += p->i_esize;
       79        79    1         return rp;
       80        80    1        }
       81        81
---  Include file information  ---

   zbl$types:h.:ZBC3TOU. is referenced
   zbl$extern:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbl$alloc:c.:ZBC3TSI
