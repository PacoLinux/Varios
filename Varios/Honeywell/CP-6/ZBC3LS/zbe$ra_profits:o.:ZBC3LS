

CC.C03    File=zbe$ra_profits:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ra_profits.c,v 1.6 87/04/03 15:38:52 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  R E G I S T E R   A L L O C A T I O N
        7         7              *
        8         8              *  R A _ P R O F I T S . C
        9         9              */
       10        10
       11        11             #include "types:h"
       12        12             #include "debug:h"
       13        13             #include "lset:h"
       14        14             #include "global:h"
       15        15             #include "em_reg:h"
       16        16             #include "ra:h"
       17        17             #include "ra_aux:h"
       18        18             #include "ra_profits:h"
       19        19
       20        20             STATIC bool ra_test_cond(cond,val)
       21        21              short cond;
       22        22              offset val;
       23        23             {
       24        24    1         switch(cond) {
       25        25    2            case DEFAULT:
       26        26    2               return TRUE;
       27        27    2            case FITBYTE:
       28        28    2               return val >= -128 && val < 128;
       29        29    2            case IN_0_63:
       30        30    2               return val >= 0 && val <= 63;
       31        31    2            case IN_0_8:
       32        32    2               return val >= 0 && val <= 8;
       33        33    2         }
       34        34    1        }
       35        35
       36        36             STATIC short ra_map_value(tab,val,time)
CC.C03    File=zbe$ra_profits:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=2  
       37        37              struct cond_tab tab[];
       38        38              offset val;
       39        39              bool time;
       40        40             {
       41        41    1         cond_p p;
       42        42    1
       43        43    1         for (p = &tab[0]; ; p++) {
       44        44    2            if (ra_test_cond(p->mc_cond,val)) {
       45        45    3               return (time ? p->mc_tval : p->mc_sval);
       46        46    3            }
       47        47    2         }
       48        48    1        }
       49        49
       50        50
       51        51             STATIC short index_value(tab,n,time)
       52        52              struct cond_tab tab[];
       53        53              short n;
       54        54              bool time;
       55        55             {
       56        56    1         cond_p p;
       57        57    1
       58        58    1         p = &tab[n];
       59        59    1         return (time ? p->mc_tval : p->mc_sval);
       60        60    1        }
       61        61
       62        62
       63        63             allocscore(itemtyp,localtyp,size,off,totyp,time_out,space_out)
       64        64              short itemtyp, localtyp,totyp,size;
       65        65              offset off;
       66        66              short *time_out, *space_out;
       67        67             {
       68        68    1         cond_p m;
       69        69    1
       70        70    1         if (localtyp == reg_loop) localtyp = reg_any;
       71        71    1         if (size == ws || size ==ps && totyp == reg_pointer) {
       72        72    2            switch(itemtyp) {
       73        73    3               case LOCALVAR:
CC.C03    File=zbe$ra_profits:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=3  
       74        74    3               m = alocaltab[localtyp][totyp];
       75        75    3               break;
       76        76    3               case LOCAL_ADDR:
       77        77    3               m = alocaddrtab[localtyp][totyp];
       78        78    3               break;
       79        79    3               case CONST:
       80        80    3               m = aconsttab;
       81        81    3               break;
       82        82    3               case DCONST:
       83        83    3               m = aconsttab;
       84        84    3               break;
       85        85    3               case GLOBL_ADDR:
       86        86    3               m = aglobaltab;
       87        87    3               break;
       88        88    3               case PROC_ADDR:
       89        89    3               m = aproctab;
       90        90    3               break;
       91        91    3             default:
       92        92    3           m = (cond_p) 0;
       93        93    3           break;
       94        94    3            }
       95        95    2         } else {
       96        96    2            m = (cond_p) 0;
       97        97    2         }
       98        98    1         *time_out = (m == (cond_p) 0 ? -1 : ra_map_value(m,off,TRUE));
       99        99    1         *space_out = (m == (cond_p) 0 ? -1 : ra_map_value(m,off,FALSE));
      100       100    1         /*
      101       101    1         printf("itemtyp = %d, localtyp = %d off = %ld\n",itemtyp,localtyp,off);
      102       102    1         printf("ALLOCSCORE = (%d,%d)\n",*time_out,*space_out);
      103       103    1         */
      104       104    1        }
      105       105
      106       106             opening_cost(itemtyp,localtyp,off,time_out,space_out)
      107       107              short itemtyp, localtyp;
      108       108              offset off;
      109       109              short *time_out, *space_out;
      110       110             {
CC.C03    File=zbe$ra_profits:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=4  
      111       111    1         cond_p m;
      112       112    1
      113       113    1         if (localtyp == reg_loop) localtyp = reg_any;
      114       114    1         switch(itemtyp) {
      115       115    2            case LOCALVAR:
      116       116    2            m = olocaltab[localtyp];
      117       117    2            break;
      118       118    2            case LOCAL_ADDR:
      119       119    2            m = olocaddrtab[localtyp];
      120       120    2            break;
      121       121    2            case CONST:
      122       122    2            m = oconsttab;
      123       123    2            break;
      124       124    2            case DCONST:
      125       125    2            m = oconsttab;
      126       126    2            break;
      127       127    2            case GLOBL_ADDR:
      128       128    2            m = oglobaltab;
      129       129    2            break;
      130       130    2            case PROC_ADDR:
      131       131    2            m = oproctab;
      132       132    2            break;
      133       133    2         }
      134       134    1         *time_out = (m == (cond_p) 0 ? 1000 : ra_map_value(m,off,TRUE));
      135       135    1         *space_out = (m == (cond_p) 0 ? 1000 : ra_map_value(m,off,FALSE));
      136       136    1         /*
      137       137    1         printf("itemtyp = %d, localtyp = %d off = %ld\n",itemtyp,localtyp,off);
      138       138    1         printf("OPEN_COST = (%d,%d)\n",*time_out,*space_out);
      139       139    1         */
      140       140    1        }
      141       141
      142       142
      143       143
      144       144
      145       145             regsave_cost(regs,time_out,space_out)
      146       146              short regs[], *time_out, *space_out;
      147       147             {
CC.C03    File=zbe$ra_profits:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=5  
      148       148    1         /* Estimate the costs of saving and restoring the registers
      149       149    1          * The array regs contains the number of registers of every
      150       150    1          * possible type.
      151       151    1          */
      152       152    1
      153       153    1         short n = regs[reg_any] + regs[reg_pointer] + regs[reg_float];
      154       154    1         /* #registers */
      155       155    1
      156       156    1         *time_out = index_value(regsav_cost,n,TRUE);
      157       157    1         *space_out = index_value(regsav_cost,n,FALSE);
      158       158    1         /*
      159       159    1         printf("REGSAVE COST, n=%d, (%d,%d)\n",n,*time_out,*space_out);
      160       160    1         */
      161       161    1        }
      162       162
      163       163
      164       164
      165       165             STATIC short dyn_inits(inits)
      166       166              lset inits;
      167       167             {
      168       168    1         Lindex i;
      169       169    1         short sum = 0;
      170       170    1         bblock_p b;
      171       171    1
      172       172    1         for (i = Lfirst(inits); i != (Lindex) 0; i = Lnext(i,inits)) {
      173       173    2            b = (bblock_p) Lelem(i);
      174       174    2            sum += loop_scale(Lnrelems(b->b_loops));
      175       175    2         }
      176       176    1         return sum;
      177       177    1        }
      178       178
      179       179
      180       180
      181       181             compute_profits(alloclist,time_opt)
      182       182              alloc_p alloclist;
      183       183              bool time_opt;
      184       184             {
CC.C03    File=zbe$ra_profits:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=6  
      185       185    1         /* Compute the profits attribute of every allocation.
      186       186    1          * If the item of an allocation may be put in several types
      187       187    1          * of register, we choose only the most advanteagous one.
      188       188    1          */
      189       189    1
      190       190    1         register alloc_p alloc;
      191       191    1         short s,t,rtyp,maxsc;
      192       192    1         item_p item;
      193       193    1         short time,space,sc;
      194       194    1         short otime,ospace;
      195       195    1         offset off;
      196       196    1         short cnt,nr_inits;
      197       197    1
      198       198    1         for (alloc = alloclist; alloc != (alloc_p) 0; alloc = alloc->al_next) {
      199       199    2            maxsc = 0;
      200       200    2            item = alloc->al_item;
      201       201    2            switch(item->it_type) {
      202       202    3               case LOCALVAR:
      203       203    3               case LOCAL_ADDR:
      204       204    3               case CONST:
      205       205    3               case DCONST:
      206       206    3                  off = item->i_t.it_off;
      207       207    3                  break;
      208       208    3               default:
      209       209    3                  off = 0;
      210       210    3            }
      211       211    2            for (rtyp = item->it_regtype; ; rtyp = reg_any) {
      212       212    3               allocscore(    item->it_type,
      213       213    3                     item->it_regtype,
      214       214    3                     item->it_size,
      215       215    3                     off,
      216       216    3                     rtyp,
      217       217    3                     &time,
      218       218    3                     &space);
      219       219    3               opening_cost(  item->it_type,
      220       220    3                     item->it_regtype,
      221       221    3                     off,
CC.C03    File=zbe$ra_profits:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=7  
      222       222    3                     &otime,
      223       223    3                     &ospace);
      224       224    3               nr_inits = Lnrelems(alloc->al_inits);
      225       225    3               s = alloc->al_susecount * space -
      226       226    3                  nr_inits*ospace;
      227       227    3               if (!alloc->al_isloop && nr_inits > 0) {
      228       228    4                  /* might lead to increase of execution time */
      229       229    4                  cnt = 0;
      230       230    4               } else {
      231       231    4                  cnt = alloc->al_dusecount;
      232       232    4               }
      233       233    3               t = cnt * time - dyn_inits(alloc->al_inits) * otime;
      234       234    3               sc = (time_opt ? t : s);
      235       235    3               if (sc > maxsc) {
      236       236    4                  maxsc = sc;
      237       237    4                  alloc->al_regtype = rtyp;
      238       238    4                  alloc->al_profits = sc;
      239       239    4               }
      240       240    3               if (rtyp == reg_any) break;
      241       241    3            }
      242       242    2         }
      243       243    1        }
      244       244
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   em_reg:h.:ZBC3TOU. is referenced
   zbe$ra:h.:ZBC3TOU. is referenced
   zbe$ra_aux:h.:ZBC3TOU. is referenced
   zbe$ra_profits:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$ra_profits:c.:ZBC3TSI
