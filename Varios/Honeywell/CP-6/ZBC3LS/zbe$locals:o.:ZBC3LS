

CC.C03    File=zbe$locals:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /* $Header: locals.c,v 1.5 87/03/10 11:35:08 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*
        7         7              *  L O C A L S . C
        8         8              */
        9         9
       10        10             #include <stdio:h>
       11        11             #include "types:h"
       12        12             #include "debug:h"
       13        13             #include "global:h"
       14        14             #include "lset:h"
       15        15             #include "cset:h"
       16        16             #include "def:h"
       17        17             #include "get:h"
       18        18             #include "aux:h"
       19        19             #include "alloc:h"
       20        20             #include "em_mnem:h"
       21        21             #include "em_spec:h"
       22        22             #include "em_pseu:h"
       23        23             #include "em_mes:h"
       24        24             #include "locals:h"
       25        25
       26        26
       27        27             extern short nrglobals;
       28        28
       29        29             short nrlocals;
       30        30             local_p *locals;  /* dynamic array */
       31        31
       32        32             STATIC localvar(off,size,locs,reg,score)
       33        33              offset off;
       34        34              short  size;
       35        35              local_p *locs;
       36        36              bool reg;
CC.C03    File=zbe$locals:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37              offset score;
       38        38             {
       39        39    1         /* process a reference to a local variable.
       40        40    1          * A local is characterized by a (offset,size) pair.
       41        41    1          * We first collect all locals in a list, sorted
       42        42    1          * by offset. Later we will construct a table
       43        43    1          * out of this list.
       44        44    1          */
       45        45    1
       46        46    1         local_p lc, x, *prevp;
       47        47    1
       48        48    1         prevp = locs;
       49        49    1         for (lc = *locs; lc != (local_p) 0; lc = lc->lc_next) {
       50        50    2            if (lc->lc_off == off && lc->lc_size == size) {
       51        51    3               if (reg) {
       52        52    4                  REGVAR(lc); /* register variable */
       53        53    4                  lc->lc_score = score;
       54        54    4               }
       55        55    3               return; /* local already present */
       56        56    3            }
       57        57    2            if (lc->lc_off > off) break;
       58        58    2            prevp = &lc->lc_next;
       59        59    2         }
       60        60    1         /* the local was not seen before; create an entry
       61        61    1          * for it in the list.
       62        62    1          */
       63        63    1         x = *prevp = newlocal();
       64        64    1         x->lc_off = off;
       65        65    1         x->lc_size = size;
       66        66    1         x->lc_next = lc;
       67        67    1         if (reg) {
       68        68    2            REGVAR(x);
       69        69    2            x->lc_score = score;
       70        70    2         }
       71        71    1        }
       72        72
       73        73
CC.C03    File=zbe$locals:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74
       75        75             STATIC check_message(l,locs)
       76        76              line_p l;
       77        77              local_p *locs;
       78        78             {
       79        79    1         /* See if l is a register message */
       80        80    1
       81        81    1         arg_p arg;
       82        82    1
       83        83    1         arg = ARG(l);
       84        84    1         if (aoff(arg,0) == ms_reg && arg->a_next != (arg_p) 0) {
       85        85    2            localvar(aoff(arg,1), (short) aoff(arg,2), locs, TRUE,
       86        86    2                 aoff(arg,4));
       87        87    2         }
       88        88    1        }
       89        89
       90        90
       91        91
       92        92
       93        93             STATIC check_local_use(l,locs)
       94        94              line_p l;
       95        95              local_p *locs;
       96        96             {
       97        97    1         short sz;
       98        98    1
       99        99    1         switch(INSTR(l)) {
      100       100    2            case op_lol:
      101       101    2            case op_stl:
      102       102    2            case op_inl:
      103       103    2            case op_del:
      104       104    2            case op_zrl:
      105       105    2               sz = ws;
      106       106    2               break;
      107       107    2            case op_ldl:
      108       108    2            case op_sdl:
      109       109    2               sz = 2 * ws;
      110       110    2               break;
CC.C03    File=zbe$locals:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111    2            case op_lil:
      112       112    2            case op_sil:
      113       113    2               sz = ps;
      114       114    2               break;
      115       115    2            case ps_mes:
      116       116    2               check_message(l,locs);
      117       117    2               /* fall through .. */
      118       118    2            default:
      119       119    2               return;
      120       120    2         }
      121       121    1         localvar(off_set(l),sz,locs,FALSE,(offset) 0);
      122       122    1        }
      123       123
      124       124
      125       125             make_localtab(p)
      126       126              proc_p p;
      127       127             {
      128       128    1         /* Make a table of local variables.
      129       129    1          * This table is used to associate a
      130       130    1          * unique number with a local. If two
      131       131    1          * locals overlap (e.g. LDL 4 and LDL 2)
      132       132    1          * none of them is considered any further,
      133       133    1          * i.e. we don't compute ud-info for them.
      134       134    1          */
      135       135    1
      136       136    1         local_p prev, next, lc;
      137       137    1         local_p locallist = (local_p) 0;
      138       138    1         short cnt = 0;
      139       139    1         offset x, ill_zone = 0;
      140       140    1         register bblock_p b;
      141       141    1         register line_p   l;
      142       142    1
      143       143    1         /* first make a list of all locals used */
      144       144    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      145       145    2            for (l = b->b_start; l != (line_p) 0; l = l->l_next) {
      146       146    3               check_local_use(l,&locallist);
      147       147    3            }
CC.C03    File=zbe$locals:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    2         }
      149       149    1         /* Now remove overlapping locals, count useful ones on the fly */
      150       150    1         for (lc = locallist; lc != (local_p) 0; lc = lc->lc_next) {
      151       151    2            if (ill_zone != 0 && lc->lc_off < ill_zone) {
      152       152    3               /* this local overlaps with a previous one */
      153       153    3               BADLC(lc);
      154       154    3               if (!IS_BADLC(prev)) {
      155       155    4                  BADLC(prev);
      156       156    4                  cnt--;
      157       157    4               }
      158       158    3            } else {
      159       159    3               cnt++;
      160       160    3            }
      161       161    2            x = lc->lc_off + lc->lc_size;
      162       162    2            if (ill_zone == 0 || x > ill_zone) {
      163       163    3               ill_zone = x;
      164       164    3            }
      165       165    2            prev = lc;
      166       166    2         }
      167       167    1         /* Now we know how many local variables there are */
      168       168    1         nrlocals = cnt;
      169       169    1         locals = (local_p *) newmap(cnt);
      170       170    1         cnt = 1;
      171       171    1         for (lc = locallist; lc != (local_p) 0; lc = next) {
      172       172    2            next = lc->lc_next;
      173       173    2            if (IS_BADLC(lc)) {
      174       174    3               oldlocal(lc);
      175       175    3            } else {
      176       176    3               locals[cnt++] = lc;
      177       177    3               lc->lc_next = (local_p) 0;
      178       178    3            }
      179       179    2         }
      180       180    1         assert (cnt == nrlocals+1);
      181       181    1        }
      182       182
      183       183
      184       184
CC.C03    File=zbe$locals:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185             STATIC find_local(off,nr_out,found_out)
      186       186              offset off;
      187       187              short  *nr_out;
      188       188              bool   *found_out;
      189       189             {
      190       190    1         /* Try to find the local variable at the given
      191       191    1          * offset. Return its local-number.
      192       192    1          */
      193       193    1
      194       194    1         short v;
      195       195    1
      196       196    1         for (v = 1; v <= nrlocals; v++) {
      197       197    2            if (locals[v]->lc_off > off) break;
      198       198    2            if (locals[v]->lc_off == off) {
      199       199    3               *found_out = TRUE;
      200       200    3               *nr_out = v;
      201       201    3               return;
      202       202    3            }
      203       203    2         }
      204       204    1         *found_out = FALSE;
      205       205    1        }
      206       206
      207       207
      208       208
      209       209
      210       210             var_nr(l,nr_out,found_out)
      211       211              line_p l;
      212       212              short  *nr_out;
      213       213              bool   *found_out;
      214       214             {
      215       215    1         /* Determine the number of the variable referenced
      216       216    1          * by EM instruction l.
      217       217    1          */
      218       218    1
      219       219    1         offset off;
      220       220    1         short nr;
      221       221    1
CC.C03    File=zbe$locals:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      222       222    1         switch(TYPE(l)) {
      223       223    2            case OPOBJECT:
      224       224    2               /* global variable */
      225       225    2               if (OBJ(l)->o_globnr == 0) {
      226       226    3                  /* We don't maintain ud-info for this var */
      227       227    3                  *found_out = FALSE;
      228       228    3               } else {
      229       229    3                  *nr_out = GLOB_TO_VARNR(OBJ(l)->o_globnr);
      230       230    3                  *found_out = TRUE;
      231       231    3               }
      232       232    2               return;
      233       233    2            case OPSHORT:
      234       234    2               off = (offset) SHORT(l);
      235       235    2               break;
      236       236    2            case OPOFFSET:
      237       237    2               off = OFFSET(l);
      238       238    2               break;
      239       239    2            default:
      240       240    2               assert(FALSE);
      241       241    2         }
      242       242    1         /* Its's a local variable */
      243       243    1         find_local(off,&nr,found_out);
      244       244    1         if (*found_out) {
      245       245    2            *nr_out = LOC_TO_VARNR(nr);
      246       246    2         }
      247       247    1        }
      248       248
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$locals:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_mes:h.:ZBC3TOU. is referenced
   zbe$locals:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$locals:c.:ZBC3TSI
