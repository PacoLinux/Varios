

CC.C03    File=zbe$cset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cset.c,v 1.3 87/03/10 11:29:51 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  S H A R E D   F I L E
        7         7              *
        8         8              *  C S E T . C
        9         9              */
       10        10
       11        11
       12        12             #include "types:h"
       13        13             #include "cset:h"
       14        14             #include "alloc:h"
       15        15             #include "debug:h"
       16        16             #include "global:h"
       17        17
       18        18
       19        19             /* A set over a range of integers from 1 to N may be represented
       20        20              * as a 'compact' set. Such a set is represented as a 'bitvector'
       21        21              * record, containing the size of the set (i.e. N) and a row
       22        22              * of words (the bitvector itself). An integer J (1 <= J  <= N) is
       23        23              * an element of the set iff the J-th bit of the vector is a '1'.
       24        24              * Any redundant bits in the last word are garanteed to be zero bits.
       25        25              * This package implements the usual operations on sets.
       26        26              * The name of every operation is preceede by a 'C' to
       27        27              * distinguish it from the operation on 'long' (list)
       28        28              * sets whth a similar name.
       29        29              */
       30        30
       31        31
       32        32             /* The two arithmetic operations 'divide by wordlength' and
       33        33              * 'modulo wordlength' can be performed very efficiently
       34        34              * if the word length (of the source machine) is 16.
       35        35              */
       36        36
CC.C03    File=zbe$cset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37
       38        38
       39        39
       40        40             cset Cempty_set(n)
       41        41              short n;
       42        42             {
       43        43    1         cset s;
       44        44    1
       45        45    1         s = newbitvect(DIVWL(n-1) + 1);
       46        46    1         s->v_size = n;
       47        47    1         return s;
       48        48    1        }
       49        49
       50        50
       51        51             bool Cis_elem(x,s)
       52        52              Celem_t x;
       53        53              cset    s;
       54        54             {
       55        55    1         short n;
       56        56    1         int mask;
       57        57    1
       58        58    1         assert(x>0 && x <= s->v_size);
       59        59    1         n = DIVWL(x-1);
       60        60    1         mask = (1 << MODWL(x-1));
       61        61    1         if ((s->v_bits[n] & mask) == 0) {
       62        62    2            return FALSE;
       63        63    2         } else {
       64        64    2            return TRUE;
       65        65    2         }
       66        66    1        }
       67        67
       68        68
       69        69
       70        70             Cadd(x,s_p)
       71        71              Celem_t x;
       72        72              cset    *s_p;
       73        73             {
CC.C03    File=zbe$cset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74    1         cset s;
       75        75    1         short n;
       76        76    1         int mask;
       77        77    1
       78        78    1         s = *s_p;
       79        79    1         assert(x>0 && x <= s->v_size);
       80        80    1         n = DIVWL(x-1);
       81        81    1         mask = (1 << MODWL(x-1));
       82        82    1         s->v_bits[n] |= mask;
       83        83    1        }
       84        84
       85        85
       86        86             Cremove(x,s_p)
       87        87              Celem_t x;
       88        88              cset    *s_p;
       89        89             {
       90        90    1         cset s;
       91        91    1         short n;
       92        92    1         int mask;
       93        93    1
       94        94    1         s = *s_p;
       95        95    1         assert(x>0 && x <= s->v_size);
       96        96    1         n = DIVWL(x-1);
       97        97    1         mask = (1 << MODWL(x-1));
       98        98    1         s->v_bits[n] &= ~mask;
       99        99    1        }
      100       100
      101       101
      102       102
      103       103             /* The operations first, next and elem can be used to iterate
      104       104              * over a set. For example:
      105       105              *  for (i = Cfirst(s); i != (Cindex) 0; i = Cnext(i,s) {
      106       106              *     x = Celem(i);
      107       107              *     use x
      108       108              *  }
      109       109              * which is like:
      110       110              *      'for all elements x of s do'
CC.C03    File=zbe$cset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      111       111              *     use x
      112       112              *
      113       113              * The implementation of first and next is not very fast.
      114       114              * It could be made much more efficient (at the price of a
      115       115              * higher complexity) by not using 'is_elem'.
      116       116              * Iteration over a bitvector, however, is not supposed to
      117       117              * be used very often.
      118       118              */
      119       119
      120       120             Cindex Cfirst(s)
      121       121              cset s;
      122       122             {
      123       123    1         return Cnext((Cindex) 0,s);
      124       124    1        }
      125       125
      126       126
      127       127             Cindex Cnext(i,s)
      128       128              Cindex i;
      129       129              cset   s;
      130       130             {
      131       131    1         register short n;
      132       132    1
      133       133    1         for (n = i+1; n <= s->v_size; n++) {
      134       134    2            if (Cis_elem(n,s)) {
      135       135    3               return (Cindex) n;
      136       136    3            }
      137       137    2         }
      138       138    1         return (Cindex) 0;
      139       139    1        }
      140       140
      141       141
      142       142             Celem_t Celem(i)
      143       143              Cindex i;
      144       144             {
      145       145    1         return (Celem_t) i;
      146       146    1        }
      147       147
CC.C03    File=zbe$cset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      148       148
      149       149
      150       150             Cjoin(s1,s2_p)
      151       151              cset s1, *s2_p;
      152       152             {
      153       153    1         /* Two sets are joined by or-ing their bitvectors,
      154       154    1          * word by word.
      155       155    1          */
      156       156    1
      157       157    1         cset s2;
      158       158    1         short n;
      159       159    1         register short i;
      160       160    1
      161       161    1         s2 = *s2_p;
      162       162    1         assert(s1->v_size == s2->v_size);
      163       163    1         n = DIVWL(s1->v_size -1);  /* #words -1 */
      164       164    1         for (i = 0; i <= n; i++) {
      165       165    2            s2->v_bits[i] |= s1->v_bits[i];
      166       166    2         }
      167       167    1        }
      168       168
      169       169
      170       170
      171       171             Cintersect(s1,s2_p)
      172       172              cset s1, *s2_p;
      173       173             {
      174       174    1         /* Two sets are intersected by and-ing their bitvectors,
      175       175    1          * word by word.
      176       176    1          */
      177       177    1
      178       178    1         cset s2;
      179       179    1         short n;
      180       180    1         register short i;
      181       181    1
      182       182    1         s2 = *s2_p;
      183       183    1         assert(s1->v_size == s2->v_size);
      184       184    1         n = DIVWL(s1->v_size -1);  /* #words -1 */
CC.C03    File=zbe$cset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      185       185    1         for (i = 0; i <= n; i++) {
      186       186    2            s2->v_bits[i] &= s1->v_bits[i];
      187       187    2         }
      188       188    1        }
      189       189
      190       190
      191       191             Cdeleteset(s)
      192       192              cset s;
      193       193             {
      194       194    1         oldbitvect(s,DIVWL(s->v_size - 1) + 1);
      195       195    1        }
      196       196
      197       197
      198       198             bool Cis_subset(s1,s2)
      199       199              cset s1,s2;
      200       200             {
      201       201    1         /* See if s1 is a subset of s2 */
      202       202    1
      203       203    1         register short i;
      204       204    1
      205       205    1         assert(s1->v_size == s2->v_size);
      206       206    1         if (s1->v_size == 0) return TRUE;
      207       207    1         for (i = 0; i <= DIVWL(s1->v_size-1); i++) {
      208       208    2            if ((s1->v_bits[i] & ~(s2->v_bits[i])) != 0) {
      209       209    3               return FALSE;
      210       210    3            }
      211       211    2         }
      212       212    1         return TRUE;
      213       213    1        }
      214       214
      215       215
      216       216             Cclear_set(s_p)
      217       217              cset *s_p;
      218       218             {
      219       219    1         cset s;
      220       220    1         register short i;
      221       221    1
CC.C03    File=zbe$cset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      222       222    1         s = *s_p;
      223       223    1         assert (s != (cset) 0);
      224       224    1         for (i = 0; i <=  DIVWL(s->v_size-1); i++) {
      225       225    2            s->v_bits[i] = 0;
      226       226    2         }
      227       227    1        }
      228       228
      229       229
      230       230             Ccopy_set(s1,s2_p)
      231       231              cset s1, *s2_p;
      232       232             {
      233       233    1         cset s2;
      234       234    1         register short i;
      235       235    1
      236       236    1         s2 = *s2_p;
      237       237    1         assert (s1->v_size == s2->v_size);
      238       238    1         for (i = 0; i <=  DIVWL(s1->v_size-1); i++) {
      239       239    2            s2->v_bits[i] = s1->v_bits[i];
      240       240    2         }
      241       241    1        }
      242       242
      243       243
      244       244             Csubtract(s1,s2_p)
      245       245              cset s1, *s2_p;
      246       246             {
      247       247    1         cset s2;
      248       248    1         register short i;
      249       249    1
      250       250    1         s2 = *s2_p;
      251       251    1         assert (s1->v_size == s2->v_size);
      252       252    1         for (i = 0; i <=  DIVWL(s1->v_size-1); i++) {
      253       253    2            s2->v_bits[i] &= ~(s1->v_bits[i]);
      254       254    2         }
      255       255    1        }
      256       256
      257       257
      258       258             bool Cequal(s1,s2)
CC.C03    File=zbe$cset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      259       259              cset s1, s2;
      260       260             {
      261       261    1         register short i;
      262       262    1
      263       263    1         assert (s1->v_size == s2->v_size);
      264       264    1         for (i = 0; i <=  DIVWL(s1->v_size-1); i++) {
      265       265    2            if (s1->v_bits[i] != s2->v_bits[i]) return FALSE;
      266       266    2         }
      267       267    1         return TRUE;
      268       268    1        }
      269       269
      270       270             short Cnrelems(s)
      271       271              cset s;
      272       272             {
      273       273    1         register short n, cnt;
      274       274    1
      275       275    1         cnt = 0;
      276       276    1         for (n = 1; n <= s->v_size; n++) {
      277       277    2            if (Cis_elem(n,s)) {
      278       278    3               cnt++;
      279       279    3            }
      280       280    2         }
      281       281    1         return cnt;
      282       282    1        }
      283       283
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$cset:c.:ZBC3TSI
