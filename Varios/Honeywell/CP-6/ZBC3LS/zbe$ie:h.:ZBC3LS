

12:36 AUG 20 '97 zbe$ie:h.:ZBC3TSI                                         1    
    1      /*M*  zbe$ie:h - header file for invariant expression checking
    2      /*p*
    3            name: zbe$ie:h
    4            purpose: This is the headre file for the invariant expression
    5            checking routine. Contains defines and structure definitions
    6            used in the zbe$ie? routines that perform the invariant
    7            expression processing.
    8      */
    9
   10      extern bblock_p cur_b;
   11      extern lset invars;
   12      extern loop_p cur_lp;
   13
   14      #define LP_BLOCKS   lp_extend->lpx_ie.lpx_blocks
   15      #define LP_DONE     lp_extend->lpx_ie.lpx_done
   16      #define LP_CAL      lp_extend->lpx_ie.lpx_cal
   17      #define LP_INSTR    lp_extend->lpx_ie.lpx_instr
   18      #define LP_HEADER   lp_extend->lpx_ie.lpx_header
   19      #define LP_DEF      lp_extend->lpx_ie.lpx_def
   20      #define LP_REF      lp_extend->lpx_ie.lpx_ref
   21      #define LP_BOE      lp_extend->lpx_ie.lpx_boe
   22      #define LP_DDEF     lp_extend->lpx_ie.lpx_ddef
   23      #define LP_KILL     lp_extend->lpx_ie.lpx_kill
   24
   25
   26      #define B_DEF(b)    b->b_extend->bx_ie.bx_def
   27      #define B_REF(b)    b->b_extend->bx_ie.bx_ref
   28      #define B_BOE(b)    b->b_extend->bx_ie.bx_boe
   29      #define B_DDEF(b)   b->b_extend->bx_ie.bx_ddef
   30      #define B_KILL(b)   b->b_extend->bx_ie.bx_kill
   31
   32      #define  newielpx()  (lpext_p) newstruct(lpext_ie)
   33      #define  newiebx()  (bext_p) newstruct(bext_ie)
   34      #define  oldielpx(x)  oldstruct (lpext_ie,x)
   35      #define  oldiebx(x)  oldstruct (bext_ie,x)
   36
   37      #define IE_STORE      1
12:36 AUG 20 '97 zbe$ie:h.:ZBC3TSI                                         2    
   38      #define IE_INT_ARITH  2
   39      #define IE_FLT_ARITH  3
   40
   41      #define ie_prev_line(lc,lp)  { lp=PREV(lc);\
   42            if (lp != (line_p) 0) {  \
   43            while (INSTR(lp) == ps_mes ) {  \
   44              lp = PREV(lp); } } }
   45
   46      #define ie_prev_lt(lc,lp)  { lp=PREV(lc);\
   47            if(lp == (line_p) 0) return FALSE; \
   48            while (INSTR(lp) == ps_mes) { \
   49              lp = PREV(lp); \
   50              if (lp == (line_p) 0) return FALSE; \
   51            } }
   52
   53      /*    the following is for the invariant table.  */
   54      typedef struct invar_t *invar_t_p;
   55
   56         struct invar_t {
   57       invar_t_p     i_next;
   58       invar_t_p     i_prev;
   59       line_p        i_line;  /* last instruction pointer of exp. */
   60       bblock_p      i_block;  /* block pointer. */
   61         } ;
   62
   63         struct invar_t  invar_tbl;
   64      extern invar_t_p invar_tbl_start;
   65      extern invar_t_p last_invar_tbl;
   66
   67      extern short nrvars;
   68      extern short nrlocals;
   69      extern short nrglobals;

