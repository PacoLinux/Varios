

11:56 AUG 20 '97 zbc$macro:str.:ZBC3TSI                                    1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: macro.str,v 3.5 87/03/25 23:03:51 ceriel Exp $ */
    6      /* PREPROCESSOR: DEFINITION OF MACRO DESCRIPTOR */
    7
    8      #include "zbc$nopp:h"
    9
   10      #ifndef NOPP
   11      /*  The flags of the mc_flag field of the macro structure. Note that
   12       these flags can be set simultaneously.
   13      */
   14      #define NOFLAG     0     /* no special flags  */
   15      #define   FUNC     01    /* function attached    */
   16      #define NOREPLACE  02    /* don't replace  */
   17
   18      #define   FORMALP 0200   /* mask for creating macro formal parameter */
   19      #ifdef NPARAMS
   20      #undef NPARAMS
   21      #endif
   22      #define NPARAMS 64    /* also defined in "nparams:h" */
   23
   24      /*  The macro descriptor is very simple, except the fact that the
   25       mc_text, which points to the replacement text, contains the
   26       non-ascii characters \201, \202, etc, indicating the position of a
   27       formal parameter in this text.
   28      */
   29
   30      #define DBL_POUND    0377  /* double pound operator '##' */
   31      #define SGL_POUND    0376  /* single pound operator '#'  */
   32      #define RECURSION    0375  /* mask for recursive macros */
   33      #define EXPAND_PARAM 0374  /* actual macro parameters are macros */
   34      #define FORMAL_OPEN  0373  /* marker between formal param and '(' */
   35      #define EOR          0372  /* End_Of_ReplacementList */
   36
   37      struct macro {
11:56 AUG 20 '97 zbc$macro:str.:ZBC3TSI                                    2    
   38       struct macro *next;
   39       char * mc_name;
   40       char * mc_formals[NPARAMS]; /* list of formal parameters */
   41       char *   mc_text; /* the replacement text    */
   42       int   mc_nps;     /* number of formal parameters   */
   43       int   mc_length;  /* length of replacement text */
   44       int   mc_count;   /* # of "concurrent" invocations*/
   45       char  mc_flag; /* marking this macro      */
   46      };
   47
   48      /* ALLOCDEF "macro" 50 */
   49
   50      struct mlist {
   51       struct mlist *next;
   52       struct macro *m_mac;
   53       char *m_repl;
   54      };
   55
   56      /* ALLOCDEF "mlist" 20 */
   57
   58      /* `token' numbers of keywords of command-line processor
   59      */
   60      #define   K_UNKNOWN   0
   61      #define   K_DEFINE 1
   62      #define   K_ELIF      2
   63      #define   K_ELSE      3
   64      #define   K_ENDIF     4
   65      #define   K_IF     5
   66      #define   K_IFDEF     6
   67      #define   K_IFNDEF 7
   68      #define   K_INCLUDE   8
   69      #define   K_LINE      9
   70      #define   K_UNDEF     10
   71      #define K_PRAGMA 11
   72      #define K_ERROR  12
   73      #endif NOPP
   74

