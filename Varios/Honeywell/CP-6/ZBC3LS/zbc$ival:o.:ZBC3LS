

CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=1  
        1         1             /* LLgen generated code from source zbc$ival:c.:ZBC3TOU */
        2         2             /* $Header: incl,v 2.2 87/02/16 21:35:40 ceriel Exp $ */
        3         3             #ifdef LL_DEBUG
        4         4   *S*       #define LL_assert(x) if(!(x)) LL_badassertion("x",__FILE__,__LINE__)
        5         5   *S*       #else
        6         6             #define LL_assert(x)  /* nothing */
        7         7             #endif
        8         8
        9         9             extern int LLsymb;
       10        10             extern char LLsets[];
       11        11
       12        12             #define LL_SAFE(x) /* Nothing */
       13        13             #define LL_SSCANDONE(x)  if (LLsymb != x) LLerror(x); else
       14        14             #define LL_SCANDONE(x)   if (LLsymb != x) LLerror(x); else
       15        15             #define LL_T_NOSCANDONE(x)  LLscan(x)
       16        16
       17        17             # include "Lpars:h"
       18        18
       19        19             extern unsigned int LLscnt[];
       20        20             extern unsigned int LLtcnt[];
       21        21             extern int LLcsymb;
       22        22             extern int LL_symb;
       23        23
       24        24             #define LLsdecr(d) {LL_assert(LLscnt[d] > 0); LLscnt[d]--;}
       25        25             #define LLtdecr(d) {LL_assert(LLtcnt[d] > 0); LLtcnt[d]--;}
       26        26             #define LLsincr(d) LLscnt[d]++
       27        27             #define LLtincr(d) LLtcnt[d]++
       28        28
       29        29             # line 8 "zbc$ival:g.:ZBC3TOU"
       30        30
       31        31             #include "nofloat:h"
       32        32             #include <em:h>
       33        33             #include "debug:h"
       34        34             #include <alloc:h>
       35        35             #include "nobitfield:h"
       36        36             #include "arith:h"
       37        37             #include "align:h"
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=2  
       38        38             #include "label:h"
       39        39             #include "expr:h"
       40        40             #include "type:h"
       41        41             #include "struct:h"
       42        42             #include "field:h"
       43        43             #include "assert:h"
       44        44             #include "Lpars:h"
       45        45             #include "class:h"
       46        46             #include "sizes:h"
       47        47             #include "idf:h"
       48        48             #include "level:h"
       49        49             #include "def:h"
       50        50             #include "LLlex:h"
       51        51             #include "noRoption:h"
       52        52             #include "estack:h"
       53        53             #include "zb_target:h"
       54        54             #include "dataFirst:h"
       55        55             #include "use_tmp:h"
       56        56
       57        57             #define con_nullbyte()   if (initialize_const)\
       58        57                                    C_rom_ucon("0", (arith)1), constant_data++;\
       59        57                               else C_con_ucon("0", (arith)1), static_data++
       60        60             #define aggregate_type(tp) ((tp)->tp_fund == ARRAY || (tp)->tp_fund == STRUCT
                               || (tp)->tp_fund == UNION)
       61        61
       62        62             char *long2str();
       63        63             char *strncpy();
       64        64             extern char options[];
       65        65             static int gen_error;
       66        66             struct type **gen_tphead(), **gen_tpmiddle();
       67        67             struct sdef *gen_align_to_next();
       68        68             int initialize_const = 0, within_init = 0;
       69        69             static char zeroes[40] = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
       70        70             L12_initial_value (
       71        71             # line 54 "zbc$ival:g.:ZBC3TOU"
       72        72              tpp,expp,auto_agg) register struct type **tpp; register struct expr **expp; i
                               nt auto_agg; {
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=3  
       73        73    1        # line 55 "zbc$ival:g.:ZBC3TOU"
       74        74    1        int init_flg;
       75        75    1        LLsincr(7);
       76        76    1        # line 57 "zbc$ival:g.:ZBC3TOU"
       77        77    1        {
       78        78    2                  init_flg = within_init;
       79        79    2                  if (!within_init) {
       80        80    3                     if (tpp)  {
       81        81    4                        struct type *tp = *tpp;
       82        82    4                        while (tp->tp_fund == ARRAY)
       83        83    4                           tp = tp->tp_up;
       84        84    4                        initialize_const = tp->tp_const && !tp->tp_volatile;
       85        85    4                        if (auto_agg) initialize_const = 1;
       86        86    4                        }
       87        87    3                     else initialize_const = 0;
       88        88    3                     within_init = 1;
       89        89    3                     }
       90        90    2                  if (tpp) gen_tpcheck(tpp, 0);
       91        91    2               }
       92        92    1        L_2:
       93        93    1        switch(LLcsymb) {
       94        94    2        default: if (LLskip()) goto L_2;
       95        95    2        goto L_3;
       96        96    2        case /*  IDENTIFIER  */ 1 : ;
       97        97    2        case /*  STRING  */ 3 : ;
       98        98    2        case /*  INTEGER  */ 5 : ;
       99        99    2        case /*  FLOATING  */ 6 : ;
      100       100    2        case /*  PLUSPLUS  */ 9 : ;
      101       101    2        case /*  MINMIN  */ 10 : ;
      102       102    2        case /*  SIZEOF  */ 35 : ;
      103       103    2        case /*  ALIGNOF  */ 36 : ;
      104       104    2        case /* '(' */ 92 : ;
      105       105    2        case /* '*' */ 94 : ;
      106       106    2        case /* '&' */ 102 : ;
      107       107    2        case /* '-' */ 103 : ;
      108       108    2        case /* '+' */ 104 : ;
      109       109    2        case /* '!' */ 105 : ;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=4  
      110       110    2        case /* '~' */ 106 : ;
      111       111    2        L_3: ;
      112       112    2        LLsdecr(7);
      113       113    2        L60_assignment_expression(
      114       114    2        # line 73 "zbc$ival:g.:ZBC3TOU"
      115       115    2        expp);
      116       116    2        # line 74 "zbc$ival:g.:ZBC3TOU"
      117       117    2        { if ((*expp)->ex_type->tp_fund == ARRAY)
      118       118    3                  array2pointer(*expp);
      119       119    3                 if (tpp) {
      120       120    4                  gen_simple_exp(tpp, expp);
      121       121    4                  free_expression(*expp);
      122       122    4                  *expp = 0;
      123       123    4                 }
      124       124    3               }
      125       125    2        break;
      126       126    2        case /* '{' */ 97 : ;
      127       127    2        LLsdecr(7);
      128       128    2        L80_initial_value_pack(
      129       129    2        # line 83 "zbc$ival:g.:ZBC3TOU"
      130       130    2        tpp, expp);
      131       131    2        LLread();
      132       132    2        break;
      133       133    2        }
      134       134    1        # line 85 "zbc$ival:g.:ZBC3TOU"
      135       135    1        { within_init = init_flg;
      136       136    2            if (!within_init)  {
      137       137    3               long *sectp = (initialize_const)?&constant_data : &static_data;
      138       138    3               int   rem   = (*sectp)&3;
      139       139    3               if (rem) {
      140       140    4        #if DATAFIRST && defined(USE_TMP)
      141       141    4                  if (!options['N']) EM_File_No = 1;
      142       142    4        #endif
      143       143    4                  if (initialize_const) C_rom_scon("\0\0\0", (arith) 4-rem);
      144       144    4                  else C_con_scon("\0\0\0", (arith) 4-rem);
      145       145    4                  (*sectp) += 4-rem;
      146       146    4        #if DATAFIRST && defined(USE_TMP)
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=5  
      147       147    4                  EM_File_No = 0;
      148       148    4        #endif
      149       149    4                  }
      150       150    3               }
      151       151    2         }
      152       152    1        }
      153       153             L80_initial_value_pack (
      154       154             # line 104 "zbc$ival:g.:ZBC3TOU"
      155       155              tpp,expp) struct type **tpp; struct expr **expp; {
      156       156    1        LLtincr(98);
      157       157    1        LL_SAFE('{');
      158       158    1        L81_initial_value_list(
      159       159    1        # line 106 "zbc$ival:g.:ZBC3TOU"
      160       160    1        tpp, expp);
      161       161    1        LLtdecr(98);
      162       162    1        LL_SCANDONE('}');
      163       163    1        }
      164       164             L81_initial_value_list (
      165       165             # line 110 "zbc$ival:g.:ZBC3TOU"
      166       166              tpp,expp) register struct type **tpp; struct expr **expp; {
      167       167    1        # line 111 "zbc$ival:g.:ZBC3TOU"
      168       168    1         struct expr *e1;
      169       169    1           register struct type **tpp2 = 0;
      170       170    1
      171       171    1        LLtincr(90);
      172       172    1        LLtincr(90);
      173       173    1        # line 115 "zbc$ival:g.:ZBC3TOU"
      174       174    1        { if (tpp) tpp2 = gen_tphead(tpp, 0); }
      175       175    1        LLread();
      176       176    1        L12_initial_value(
      177       177    1        # line 116 "zbc$ival:g.:ZBC3TOU"
      178       178    1        tpp2, &e1, 0);
      179       179    1        # line 117 "zbc$ival:g.:ZBC3TOU"
      180       180    1        { if (!tpp) init_expression(&expp, e1); }
      181       181    1        for (;;) {
      182       182    2        L_1 : switch(LLcsymb) {
      183       183    3        case /* ',' */ 90 : ;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=6  
      184       184    3        # line 118 "zbc$ival:g.:ZBC3TOU"
      185       185    3        if ((AHEAD != '}')) goto L_2;
      186       186    3        case /* '}' */ 98 : ;
      187       187    3        break;
      188       188    3        default:{int LL_32=LLnext(44);
      189       189    4        ;if (!LL_32) {
      190       190    5        break;
      191       191    5        }
      192       192    4        else if (LL_32 & 1) goto L_1;}
      193       193    3        L_2 : ;
      194       194    3        LL_SAFE(',');
      195       195    3        # line 120 "zbc$ival:g.:ZBC3TOU"
      196       196    3        { if (tpp) tpp2 = gen_tpmiddle(); }
      197       197    3        LLread();
      198       198    3        L12_initial_value(
      199       199    3        # line 121 "zbc$ival:g.:ZBC3TOU"
      200       200    3        tpp2, &e1, 0);
      201       201    3        # line 122 "zbc$ival:g.:ZBC3TOU"
      202       202    3        { if (!tpp) init_expression(&expp, e1); }
      203       203    3        continue;
      204       204    3        }
      205       205    2        LLtdecr(90);
      206       206    2        break;
      207       207    2        }
      208       208    1        # line 124 "zbc$ival:g.:ZBC3TOU"
      209       209    1        { if (tpp) gen_tpend(); }
      210       210    1        LLtdecr(90);
      211       211    1        L_3 : switch(LLcsymb) {
"zbc$ival:g.:ZBC3TOU", line 126: (warning) label L_3 is not used
      212       212    2        default:
      213       213    2        break;
      214       214    2        case /* ',' */ 90 : ;
      215       215    2        LL_SAFE(',');
      216       216    2        LLread();
      217       217    2        }
      218       218    1        }
      219       219
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=7  
      220       220             # line 128 "zbc$ival:g.:ZBC3TOU"
      221       221
      222       222             gen_tpcheck(tpp, union_allowed)
      223       223              struct type **tpp;
      224       224             {
      225       225    1         register struct type *tp;
      226       226    1
      227       227    1         if (gen_error) return;
      228       228    1         switch((tp = *tpp)->tp_fund) {
      229       229    2         case ARRAY:
      230       230    2            if (! valid_type(tp->tp_up, "array element"))
      231       231    2               gen_error = 1;
      232       232    2            break;
      233       233    2         case STRUCT:
      234       234    2            if (! valid_type(tp, "struct"))
      235       235    2               gen_error = 1;
      236       236    2            break;
      237       237    2         case UNION:
      238       238    2            if (options['R'] && ! union_allowed) {
      239       239    3               warning("union initialisation not allowed");
      240       240    3               break;
      241       241    3            }
      242       242    2            if (! valid_type(tp, "union"))
      243       243    2               gen_error = 1;
      244       244    2            break;
      245       245    2         }
      246       246    1        }
      247       247
      248       248             gen_simple_exp(tpp, expp)
      249       249              struct type **tpp;
      250       250              struct expr **expp;
      251       251             {
      252       252    1         register struct type *tp;
      253       253    1
      254       254    1         if (gen_error) return;
      255       255    1         if ( (*expp)->ex_flags & EX_COMMA )
      256       256    1            warning("expression comma incorrect in initialization");
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=8  
      257       257    1         tp = *tpp;
      258       258    1         switch(tp->tp_fund) {
      259       259    2         case ARRAY:
      260       260    2            if ((*expp)->ex_class == String && tp->tp_up->tp_fund == CHAR) {
      261       261    3               ch_array(tpp,*expp);
      262       262    3               break;
      263       263    3            }
      264       264    2
      265       265    2         case STRUCT:
      266       266    2         case UNION:
      267       267    2            check_and_pad(expp, tpp);
      268       268    2            break;
      269       269    2         case ERRONEOUS:
      270       270    2            gen_error = 1;
      271       271    2            break;
      272       272    2         default:
      273       273    2            check_ival(expp, tp);
      274       274    2            break;
      275       275    2         }
      276       276    1        }
      277       277
      278       278             struct e_stack *p_stack = 0;
      279       279
      280       280             struct type **
      281       281             arr_elem(tpp, p)
      282       282              struct type **tpp;
      283       283              struct e_stack *p;
      284       284             {
      285       285    1         register struct type *tp = *tpp;
      286       286    1
      287       287    1         if (tp->tp_up->tp_fund == CHAR && AHEAD == STRING && p->elem_count == 1) {
      288       288    2            p->nelem = 1;
      289       289    2            return tpp;
      290       290    2         }
      291       291    1         if (AHEAD == '{' || ! aggregate_type(tp->tp_up))
      292       292    1            return &(tp->tp_up);
      293       293    1         return gen_tphead(&(tp->tp_up), 1);
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=9  
      294       294    1        }
      295       295
      296       296             struct sdef *
      297       297             next_field(sd, p)
      298       298              register struct sdef *sd;
      299       299              register struct e_stack *p;
      300       300             {
      301       301    1         if (sd->sd_sdef)
      302       302    1            p->bytes_upto_here += zero_bytes(sd);
      303       303    1         if (p->last_offset != sd->sd_offset) {
      304       304    2            p->bytes_upto_here +=
      305       305    2               size_of_type(sd->sd_type, "selector");
      306       306    2            p->last_offset = sd->sd_offset;
      307       307    2         }
      308       308    1         return sd->sd_sdef;
      309       309    1        }
      310       310
      311       311             struct type **
      312       312             gen_tphead(tpp, nest)
      313       313              struct type **tpp;
      314       314             {
      315       315    1         register struct type *tp = *tpp;
      316       316    1         register struct e_stack *p = new_e_stack();
      317       317    1         register struct sdef *sd;
      318       318    1
      319       319    1         if (gen_error) return tpp;
      320       320    1         p->next = p_stack;
      321       321    1         p_stack = p;
      322       322    1         p->s_nested = nest;
      323       323    1         p->s_tpp = tpp;
      324       324    1         switch(tp->tp_fund) {
      325       325    2         case ARRAY:
      326       326    2            p->nelem = -1;
      327       327    2            p->elem_count = 1;
      328       328    2            if (tp->tp_size != (arith) -1) {
      329       329    3               p->nelem = (tp->tp_size / tp->tp_up->tp_size);
      330       330    3            }
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=10 
      331       331    2            return arr_elem(tpp, p);
      332       332    2         case STRUCT:
      333       333    2            p->s_def = sd = tp->tp_sdef;
      334       334    2            p->bytes_upto_here = 0;
      335       335    2            p->last_offset = -1;
      336       336    2        #ifndef NOBITFIELD
      337       337    2            while (sd && is_anon_idf(sd->sd_idf)) {
      338       338    3               put_bf(sd->sd_type, (arith) 0);
      339       339    3               sd = next_field(sd, p);
      340       340    3            }
      341       341    2        #endif
      342       342    2            p->s_def = sd;
      343       343    2            if (AHEAD != '{' && aggregate_type(sd->sd_type)) {
      344       344    3               return gen_tphead(&(sd->sd_type), 1);
      345       345    3            }
      346       346    2            return &(sd->sd_type);
      347       347    2         case UNION:
      348       348    2            sd = tp->tp_sdef;
      349       349    2            p->nelem = 1;
      350       350    2            p->elem_count = 1;
      351       351    2            return &(sd->sd_type);
      352       352    2         default:
      353       353    2            p->nelem = 1;
      354       354    2            p->elem_count = 1;
      355       355    2            return tpp;
      356       356    2         }
      357       357    1        }
      358       358
      359       359             struct type **
      360       360             gen_tpmiddle()
      361       361             {
      362       362    1         register struct type *tp;
      363       363    1         register struct sdef *sd;
      364       364    1         register struct e_stack *p = p_stack;
      365       365    1
      366       366    1         if (!p) gen_error = 1;
      367       367    1         if (gen_error) return (p) ? p->s_tpp : (struct type **)0;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=11 
      368       368    1        again:
      369       369    1         tp = *(p->s_tpp);
      370       370    1         switch(tp->tp_fund) {
      371       371    2         default:
      372       372    2            if (p->elem_count == p->nelem && p->s_nested) {
      373       373    3               p = p->next;
      374       374    3               free_e_stack(p_stack);
      375       375    3               p_stack = p;
      376       376    3               goto again;
      377       377    3            }
      378       378    2            p->elem_count++;
      379       379    2            if (p->nelem >= 0 && p->elem_count > p->nelem) {
      380       380    3               too_many_initialisers();
      381       381    3               return p->s_tpp;
      382       382    3            }
      383       383    2            if (tp->tp_fund == ARRAY) {
      384       384    3               return arr_elem(p->s_tpp, p);
      385       385    3            }
      386       386    2            return p->s_tpp;
      387       387    2         case STRUCT:
      388       388    2            sd = gen_align_to_next(p);
      389       389    2            if (! sd) {
      390       390    3        #if DATAFIRST && defined(USE_TMP)
      391       391    3               if (!options['N'])  EM_File_No = 1;
      392       392    3        #endif
      393       393    3               while (p->bytes_upto_here++ < tp->tp_size)
      394       394    3                  con_nullbyte();
      395       395    3        #if DATAFIRST && defined(USE_TMP)
      396       396    3               EM_File_No = 0;
      397       397    3        #endif
      398       398    3               if (p->s_nested) {
      399       399    4                  p = p->next;
      400       400    4                  free_e_stack(p_stack);
      401       401    4                  p_stack = p;
      402       402    4                  goto again;
      403       403    4               }
      404       404    3               too_many_initialisers();
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=12 
      405       405    3               return p->s_tpp;
      406       406    3            }
      407       407    2            if (AHEAD != '{' && aggregate_type(sd->sd_type)) {
      408       408    3               return gen_tphead(&(sd->sd_type), 1);
      409       409    3            }
      410       410    2            return &(sd->sd_type);
      411       411    2         }
      412       412    1        }
      413       413
      414       414             struct sdef *
      415       415             gen_align_to_next(p)
      416       416              register struct e_stack *p;
      417       417             {
      418       418    1         register struct sdef *sd = p->s_def;
      419       419    1
      420       420    1         if (! sd) return sd;
      421       421    1        #ifndef NOBITFIELD
      422       422    1         do {
      423       423    2            if (is_anon_idf(sd->sd_idf)) put_bf(sd->sd_type, (arith) 0);
      424       424    2        #endif
      425       425    2            sd = next_field(sd, p);
      426       426    2        #ifndef NOBITFIELD
      427       427    2         } while (sd && is_anon_idf(sd->sd_idf));
      428       428    1        #endif
      429       429    1         p->s_def = sd;
      430       430    1         return sd;
      431       431    1        }
      432       432
      433       433             gen_tpend()
      434       434             {
      435       435    1         register struct e_stack *p = p_stack;
      436       436    1         register struct type *tp;
      437       437    1         register struct sdef *sd;
      438       438    1         int getout = 0;
      439       439    1         int offs;
      440       440    1
      441       441    1         while (!getout) {
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=13 
      442       442    2             if (p && !gen_error) {
      443       443    3            tp = *(p->s_tpp);
      444       444    3            switch(tp->tp_fund) {
      445       445    4            case ARRAY:
      446       446    4               if (tp->tp_size == -1) {
      447       447    5                  *(p->s_tpp) = construct_type(ARRAY,
      448       448    5                     tp->tp_up, p->elem_count, (struct formal*)0);
      449       449    5               }
      450       450    4               else {
      451       451    5                  while (p->nelem-- > p->elem_count) {
      452       452    6                     initialize_to_zero(&tp->tp_up, initialize_const, 0);
      453       453    6                  }
      454       454    5               }
      455       455    4               break;
      456       456    4            case UNION:
      457       457    4               {  int i = (tp->tp_size) - (tp->tp_sdef->sd_type->tp_size);
      458       458    5                  if (i > 0)
      459       459    5                     if (initialize_const) zero_memory(i, &constant_data, C_rom_ucon);

      460       460    5                        else zero_memory(i, &static_data, C_con_ucon);
      461       461    5                  break;
      462       462    5               }
      463       463    4            case STRUCT:
      464       464    4               sd = p->s_def;
      465       465    4               offs = (sd) ? sd->sd_offset : -1;
      466       466    4               sd = gen_align_to_next(p);
      467       467    4               while (sd && offs == sd->sd_offset) {
      468       468    5                  put_bf( sd->sd_type, (arith) 0 );
      469       469    5                  sd = next_field(sd, p);
      470       470    5                  }
      471       471    4               while (sd) {
      472       472    5                  initialize_to_zero(&sd->sd_type, initialize_const, 0);
      473       473    5                  if (sd->sd_sdef)
      474       474    5                     p->bytes_upto_here += zero_bytes(sd);
      475       475    5                  p->bytes_upto_here +=
      476       476    5                     size_of_type(sd->sd_type, "selector");
      477       477    5                  sd = sd->sd_sdef;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=14 
      478       478    5               }
      479       479    4        #if DATAFIRST && defined(USE_TMP)
      480       480    4               if (!options['N'])  EM_File_No = 1;
      481       481    4        #endif
      482       482    4               while (p->bytes_upto_here++ < tp->tp_size)
      483       483    4                  con_nullbyte();
      484       484    4        #if DATAFIRST && defined(USE_TMP)
      485       485    4               EM_File_No = 0;
      486       486    4        #endif
      487       487    4               break;
      488       488    4            }
      489       489    3             }
      490       490    2            if (p) {
      491       491    3               if (! p->s_nested) getout = 1;
      492       492    3               p = p->next;
      493       493    3               free_e_stack(p_stack);
      494       494    3               p_stack = p;
      495       495    3            }
      496       496    2            else getout = 1;
      497       497    2         }
      498       498    1         gen_error = 0;
      499       499    1        }
      500       500
      501       501
      502       502
      503       503
      504       504
      505       505
      506       506             check_and_pad(expp, tpp)
      507       507              struct type **tpp;
      508       508              struct expr **expp;
      509       509             {
      510       510    1
      511       511    1         register struct type *tp = *tpp;
      512       512    1         register struct expr *ex = *expp;
"zbc$ival:g.:ZBC3TOU", line 419: (warning) identifier "ex" is not used
      513       513    1
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=15 
      514       514    1         if (tp->tp_fund == ARRAY) {
      515       515    2            check_and_pad(expp, &(tp->tp_up));
      516       516    2            if (tp->tp_size == (arith)-1)
      517       517    2
      518       518    2
      519       519    2
      520       520    2               tp = *tpp = construct_type(ARRAY, tp->tp_up, (arith)1, (struct formal*)
                               0);
      521       521    2            else {
      522       522    3               register int dim = (tp->tp_size)?tp->tp_size / tp->tp_up->tp_size : 0;
      523       523    3
      524       524    3               while (--dim > 0)
      525       525    3                  initialize_to_zero(&tp->tp_up, initialize_const, 0);
      526       526    3            }
      527       527    2         }
      528       528    1         else
      529       529    1         if (tp->tp_fund == STRUCT || tp->tp_fund == UNION) {
      530       530    2            register struct sdef *sd = tp->tp_sdef;
      531       531    2
      532       532    2            check_and_pad(expp, &(sd->sd_type));
      533       533    2
      534       534    2            if (tp->tp_fund == UNION)   {
      535       535    3               int n = tp->tp_size - sd->sd_type->tp_size;
      536       536    3
      537       537    3               if (initialize_const) constant_data += n;
      538       538    3                  else static_data += n;
      539       539    3        #if DATAFIRST && defined(USE_TMP)
      540       540    3             if (!options['N']) EM_File_No = 1;
      541       541    3        #endif
      542       542    3               while (n--)    {
      543       543    4                  if (initialize_const)  C_rom_icon("0",(arith)1);
      544       544    4                     else C_con_icon("0",(arith)1);
      545       545    4                  }
      546       546    3        #if DATAFIRST && defined(USE_TMP)
      547       547    3             EM_File_No = 0;
      548       548    3        #endif
      549       549    3               }
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=16 
      550       550    2               else   {
      551       551    3                  if (sd->sd_sdef)
      552       552    3                     zero_bytes(sd);
      553       553    3                  while (sd = sd->sd_sdef) {
      554       554    4                     initialize_to_zero(&sd->sd_type, initialize_const, 0);
      555       555    4                     if (sd->sd_sdef)
      556       556    4                        zero_bytes(sd);
      557       557    4               }
      558       558    3            }
      559       559    2         }
      560       560    1         else
      561       561    1            check_ival(expp, tp);
      562       562    1        }
      563       563
      564       564
      565       565
      566       566
      567       567             pad(tpx)
      568       568              struct type *tpx;
      569       569             {
      570       570    1         register struct type *tp = tpx;
      571       571    1         register arith sz = tp->tp_size;
      572       572    1
      573       573    1         gen_tpcheck(&tpx, 1);
      574       574    1         if (gen_error) return;
      575       575    1         switch (tp->tp_fund) {
      576       576    2         case UNION:
      577       577    2        #ifndef NOROPTION
      578       578    2            if (options['R']) {
      579       579    3               warning("initialisation of unions not allowed");
      580       580    3            }
      581       581    2        #endif
      582       582    2            break;
      583       583    2        #ifndef NOBITFIELD
      584       584    2         case FIELD:
      585       585    2            put_bf(tp, (arith)0);
      586       586    2            return;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=17 
      587       587    2        #endif NOBITFIELD
      588       588    2            default:
      589       589    2               break;
      590       590    2         }
      591       591    1
      592       592    1        #if DATAFIRST && defined(USE_TMP)
      593       593    1         if (!options['N'])  EM_File_No = 1;
      594       594    1        #endif
      595       595    1         if (initialize_const)  {
      596       596    2            while (sz && (constant_data & (word_size - 1))) {
      597       597    3               C_rom_icon("0",(arith)1);
      598       598    3               constant_data++;
      599       599    3               sz--;
      600       600    3               }
      601       601    2            constant_data += sz;
      602       602    2            while (sz >= word_size) {
      603       603    3               C_rom_cst((arith) 0);
      604       604    3               sz -= word_size;
      605       605    3               }
      606       606    2            while (sz) {
      607       607    3               C_rom_icon("0", (arith) 1);
      608       608    3               sz--;
      609       609    3               }
      610       610    2            }
      611       611    1         else  {
      612       612    2            while (sz && (static_data & (word_size - 1))) {
      613       613    3               C_con_icon("0",(arith)1);
      614       614    3               static_data++;
      615       615    3               sz--;
      616       616    3               }
      617       617    2            static_data += sz;
      618       618    2            while (sz >= word_size) {
      619       619    3               C_con_cst((arith) 0);
      620       620    3               sz -= word_size;
      621       621    3            }
      622       622    2            while (sz) {
      623       623    3               C_con_icon("0", (arith) 1);
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=18 
      624       624    3               sz--;
      625       625    3            }
      626       626    2         }
      627       627    1        #if DATAFIRST && defined(USE_TMP)
      628       628    1         EM_File_No = 0;
      629       629    1        #endif
      630       630    1        }
      631       631
      632       632
      633       633
      634       634
      635       635
      636       636
      637       637
      638       638             check_ival(expp, tp)
      639       639              register struct type *tp;
      640       640              struct expr **expp;
      641       641             {
      642       642    1
      643       643    1
      644       644    1
      645       645    1
      646       646    1
      647       647    1         register struct expr *expr = *expp;
      648       648    1
      649       649    1         switch (tp->tp_fund) {
      650       650    2         case CHAR:
      651       651    2         case SHORT:
      652       652    2         case INT:
      653       653    2         case LONG:
      654       654    2         case ENUM:
      655       655    2         case POINTER:
      656       656    2            ch7cast(expp, '=', tp);
      657       657    2            expr = *expp;
      658       658    2        #ifdef DEBUG
      659       659    2            print_expr("init-expr after cast", expr);
      660       660    2        #endif DEBUG
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=19 
      661       661    2        #if DATAFIRST && defined(USE_TMP)
      662       662    2            if (!options['N']) EM_File_No = 1;
      663       663    2        #endif
      664       664    2            if (initialize_const) constant_data += tp->tp_size;
      665       665    2               else static_data += tp->tp_size;
      666       666    2            if (!is_ld_cst(expr))
      667       667    2               illegal_init_cst(expr);
      668       668    2            else
      669       669    2            if (expr->VL_CLASS == Const)
      670       670    2               con_int(expr);
      671       671    2            else
      672       672    2            if (expr->VL_CLASS == Name) {
      673       673    3               register struct idf *idf = expr->VL_IDF;
      674       674    3
      675       675    3               if (idf->id_def->df_level >= L_LOCAL)
      676       676    3                  illegal_init_cst(expr);
      677       677    3               else
      678       678    3               if (idf->id_def->df_type->tp_fund == FUNCTION)
      679       679    3                  if (initialize_const) C_rom_pnam(idf->id_text);
      680       680    3                     else C_con_pnam(idf->id_text);
      681       681    3               else
      682       682    3                  if (initialize_const) C_rom_dnam(idf->id_text, expr->VL_VALUE);
      683       683    3                     else C_con_dnam(idf->id_text, expr->VL_VALUE);
      684       684    3            }
      685       685    2            else {
      686       686    3               ASSERT(expr->VL_CLASS == Label);
      687       687    3               if (initialize_const) C_rom_dlb(expr->VL_LBL, expr->VL_VALUE);
      688       688    3                  else C_con_dlb(expr->VL_LBL, expr->VL_VALUE);
      689       689    3            }
      690       690    2        #if DATAFIRST && defined(USE_TMP)
      691       691    2            EM_File_No = 0;
      692       692    2        #endif
      693       693    2            break;
      694       694    2        #ifndef NOFLOAT
      695       695    2         case FLOAT:
      696       696    2         case DOUBLE:
      697       697    2            ch7cast(expp, '=', tp);
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=20 
      698       698    2            expr = *expp;
      699       699    2        #ifdef DEBUG
      700       700    2            print_expr("init-expr after cast", expr);
      701       701    2        #endif DEBUG
      702       702    2        #if DATAFIRST && defined(USE_TMP)
      703       703    2            if (!options['N']) EM_File_No = 1;
      704       704    2        #endif
      705       705    2            if (initialize_const) constant_data += tp->tp_size;
      706       706    2               else static_data += tp->tp_size;
      707       707    2            if (expr->ex_class == Float) {
      708       708    3        #ifdef FLOATOPT
      709       709    3        #define FLOATSRC fbuf
      710       710    3               char fbuf[44];
      711       711    3               sprintf(fbuf, "%.20g", expr->FL_VALUE);
      712       712    3        #else
      713       713   *S*       #define FLOATSRC expr->FL_VALUE
      714       714   *S*       #endif
      715       715    3               if (initialize_const)
      716       716    3                  C_rom_fcon(FLOATSRC, expr->ex_type->tp_size);
      717       717    3               else C_con_fcon(FLOATSRC, expr->ex_type->tp_size);
      718       718    3               }
      719       719    2            else
      720       720    2            if (expr->ex_class == Oper && expr->OP_OPER == INT2FLOAT) {
      721       721    3
      722       722    3               expr = expr->OP_RIGHT;
      723       723    3               if (is_cp_cst(expr))
      724       724    3                  if (initialize_const) C_rom_fcon(long2str((long)expr->VL_VALUE, 10),
                                tp->tp_size);
      725       725    3                     else C_con_fcon(long2str((long)expr->VL_VALUE, 10),
      726       726    3                     tp->tp_size);
      727       727    3               else
      728       728    3                  illegal_init_cst(expr);
      729       729    3            }
      730       730    2            else
      731       731    2               illegal_init_cst(expr);
      732       732    2        #if DATAFIRST && defined(USE_TMP)
      733       733    2            EM_File_No = 0;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=21 
      734       734    2        #endif
      735       735    2            break;
      736       736    2        #endif NOFLOAT
      737       737    2
      738       738    2        #ifndef NOBITFIELD
      739       739    2         case FIELD:
      740       740    2            ch7cast(expp, '=', tp->tp_up);
      741       741    2            expr = *expp;
      742       742    2        #ifdef DEBUG
      743       743    2            print_expr("init-expr after cast", expr);
      744       744    2        #endif DEBUG
      745       745    2            if (is_cp_cst(expr))
      746       746    2               put_bf(tp, expr->VL_VALUE);
      747       747    2            else
      748       748    2               illegal_init_cst(expr);
      749       749    2            break;
      750       750    2        #endif NOBITFIELD
      751       751    2
      752       752    2         case ERRONEOUS:
      753       753    2         case FUNCTION:
      754       754    2            break;
      755       755    2         default:
      756       756    2            crash("check_ival");
      757       757    2         }
      758       758    1        }
      759       759
      760       760
      761       761
      762       762
      763       763
      764       764             ch_array(tpp, ex)
      765       765              struct type **tpp;
      766       766              struct expr *ex;
      767       767             {
      768       768    1         register struct type *tp = *tpp;
      769       769    1         register arith length = ex->SG_LEN;
      770       770    1         char *s;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=22 
      771       771    1         arith ntopad;
      772       772    1
      773       773    1         ASSERT(ex->ex_class == String);
      774       774    1         if (tp->tp_size == (arith)-1) {
      775       775    2
      776       776    2            tp = *tpp = construct_type(ARRAY, tp->tp_up, length, (struct formal*)0);
      777       777    2            ntopad = align(tp->tp_size, (int) word_size) - tp->tp_size;
      778       778    2         }
      779       779    1         else {
      780       780    2            arith dim = tp->tp_size / tp->tp_up->tp_size;
      781       781    2            extern char options[];
      782       782    2
      783       783    2            if (length > dim) {
      784       784    3               if (dim < (length - 1))
      785       785    3                  expr_warning(ex,"too many initialisers for char array");
      786       786    3               length = dim;
      787       787    3            }
      788       788    2          ntopad = dim - length;
      789       789    2         }
      790       790    1
      791       791    1         s = ex->SG_VALUE;
      792       792    1         str_cst(s, (int) (length), initialize_const, 0);
      793       793    1         vfree(s);
      794       794    1         while (ntopad >= sizeof(zeroes)) {
      795       795    2            str_cst(zeroes,(int) sizeof(zeroes), initialize_const, 0);
      796       796    2            length += sizeof(zeroes);
      797       797    2            ntopad -= sizeof(zeroes);
      798       798    2            }
      799       799    1         if (ntopad) {
      800       800    2            str_cst(zeroes, (int) ntopad, initialize_const, 0);
      801       801    2            length += ntopad;
      802       802    2            }
      803       803    1         if (initialize_const) constant_data += length;
      804       804    1            else static_data += length;
      805       805    1        }
      806       806
      807       807
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=23 
      808       808
      809       809
      810       810             str_cst(str, len, rom, pad)
      811       811              register char *str;
      812       812              register int len;
      813       813             {
      814       814    1         arith chunksize = ((127 + word_size) / word_size) * word_size;
      815       815    1
      816       816    1        #if DATAFIRST && defined(USE_TMP)
      817       817    1         if (!options['N'])  EM_File_No = 1;
      818       818    1        #endif
      819       819    1         while (len > chunksize) {
      820       820    2            if (rom) C_rom_scon(str, chunksize);
      821       821    2               else C_con_scon(str, chunksize);
      822       822    2            len -= chunksize;
      823       823    2            str += chunksize;
      824       824    2         }
      825       825    1         if (rom) C_rom_scon(str, (arith) len);
      826       826    1            else C_con_scon(str, (arith) len);
      827       827    1         if (pad && (len & 3))
      828       828    1            if (rom) C_rom_scon("\000\000\000", (arith) 4 - (len&3));
      829       829    1               else C_con_scon("\000\000\000", (arith) 4 - (len&3));
      830       830    1        #if DATAFIRST && defined(USE_TMP)
      831       831    1         EM_File_No = 0;
      832       832    1        #endif
      833       833    1        }
      834       834
      835       835             #ifndef NOBITFIELD
      836       836
      837       837
      838       838
      839       839
      840       840
      841       841
      842       842
      843       843             put_bf(tp, val)
      844       844              struct type *tp;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=24 
      845       845              arith val;
      846       846             {
      847       847    1         static long field = (arith)0;
      848       848    1         static arith offset = (arith)-1;
      849       849    1         register struct field *fd = tp->tp_field;
      850       850    1         register struct sdef *sd =  fd->fd_sdef;
      851       851    1         static struct expr exp;
      852       852    1
      853       853    1         ASSERT(sd);
      854       854    1         if (offset == (arith)-1) {
      855       855    2
      856       856    2            offset = sd->sd_offset;
      857       857    2            exp.ex_type = tp->tp_up;
      858       858    2            exp.ex_class = Value;
      859       859    2            exp.VL_CLASS = Const;
      860       860    2         }
      861       861    1         if (val != 0)
      862       862    1            field |= (val & fd->fd_mask) << fd->fd_shift;
      863       863    1         if (sd->sd_sdef == 0 || sd->sd_sdef->sd_offset != offset ||
      864       864    1             sd->sd_stype->tp_fund == UNION ) {
      865       865    2
      866       866    2            exp.VL_VALUE = field;
      867       867    2            con_int(&exp);
      868       868    2            if (initialize_const) constant_data += exp.ex_type->tp_size;
      869       869    2               else static_data += exp.ex_type->tp_size;
      870       870    2            field = (arith)0;
      871       871    2            offset = (arith)-1;
      872       872    2         }
      873       873    1        }
      874       874             #endif NOBITFIELD
      875       875
      876       876             int
      877       877             zero_bytes(sd)
      878       878              register struct sdef *sd;
      879       879             {
      880       880    1
      881       881    1
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=25 
      882       882    1
      883       883    1         register int n =
      884       884    1            (sd->sd_type->tp_fund!=FIELD || !sd->sd_sdef || sd->sd_sdef->sd_offset!=sd
                               ->sd_offset)?
      885       885    1            sd->sd_sdef->sd_offset - sd->sd_offset -
      886       886    1            size_of_type(sd->sd_type, "struct member")
      887       887    1            : 0;
      888       888    1         register int count = n;
      889       889    1
      890       890    1        #if DATAFIRST && defined(USE_TMP)
      891       891    1         if (!options['N'])  EM_File_No = 1;
      892       892    1        #endif
      893       893    1         while (n-- > 0)
      894       894    1            con_nullbyte();
      895       895    1        #if DATAFIRST && defined(USE_TMP)
      896       896    1         EM_File_No = 0;
      897       897    1        #endif
      898       898    1         return count;
      899       899    1        }
      900       900
      901       901             int
      902       902             valid_type(tp, str)
      903       903              struct type *tp;
      904       904              char *str;
      905       905             {
      906       906    1         if (tp->tp_size < 0) {
      907       907    2            error("size of %s unknown", str);
      908       908    2            return 0;
      909       909    2         }
      910       910    1         return 1;
      911       911    1        }
      912       912
      913       913             con_int(ex)
      914       914              register struct expr *ex;
      915       915             {
      916       916    1         register struct type *tp = ex->ex_type;
      917       917    1
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=26 
      918       918    1        #if DATAFIRST && defined(USE_TMP)
      919       919    1         if (!options['N'])  EM_File_No = 1;
      920       920    1        #endif
      921       921    1         ASSERT(is_cp_cst(ex));
      922       922    1         if (tp->tp_unsigned)
      923       923    1            if (initialize_const)
      924       924    1               C_rom_ucon(long2str((long)ex->VL_VALUE, -10), tp->tp_size);
      925       925    1            else C_con_ucon(long2str((long)ex->VL_VALUE, -10), tp->tp_size);
      926       926    1         else
      927       927    1            if (initialize_const)
      928       928    1               C_rom_icon(long2str((long)ex->VL_VALUE, 10), tp->tp_size);
      929       929    1            else C_con_icon(long2str((long)ex->VL_VALUE, 10), tp->tp_size);
      930       930    1        #if DATAFIRST && defined(USE_TMP)
      931       931    1         EM_File_No = 0;
      932       932    1        #endif
      933       933    1        }
      934       934
      935       935             illegal_init_cst(ex)
      936       936              struct expr *ex;
      937       937             {
      938       938    1         expr_error(ex, "illegal initialisation constant");
      939       939    1         gen_error = 1;
      940       940    1        }
      941       941
      942       942             too_many_initialisers()
      943       943             {
      944       944    1         error("too many initialisers");
      945       945    1         gen_error = 1;
      946       946    1        }
      947       947
      948       948             static arith fill_zero_bytes = 0;
      949       949             static arith bf_offset = (arith)-1;
      950       950
      951       951             initialize_to_zero(tpp,con,nest)
      952       952               struct type **tpp;
      953       953               int   con;
      954       954               int   nest;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=27 
      955       955             {
      956       956    1          register struct type *tp = *tpp;
      957       957    1
      958       958    1
      959       959    1          switch   (tp->tp_fund)  {
      960       960    2
      961       961    2          case CHAR:
      962       962    2          case SHORT:
      963       963    2          case INT:
      964       964    2          case LONG:
      965       965    2          case ENUM:
      966       966    2             fill_zero_bytes += tp->tp_size;
      967       967    2             break;
      968       968    2
      969       969    2          case FLOAT:
      970       970    2          case DOUBLE:
      971       971    2             zero_float(tp->tp_size,con);
      972       972    2             break;
      973       973    2
      974       974    2          case POINTER:
      975       975    2             zero_pointer(tp->tp_size,con);
      976       976    2             break;
      977       977    2
      978       978    2        #ifndef NOBITFIELD
      979       979    2          case FIELD:
      980       980    2             zero_field(tp->tp_size, con, tp->tp_field->fd_sdef);
      981       981    2             break;
      982       982    2        #endif
      983       983    2
      984       984    2          case STRUCT:
      985       985    2             {
      986       986    3                register struct sdef *sd = tp->tp_sdef;
      987       987    3                int bytes = 0, b;
      988       988    3                while (sd)  {
      989       989    4                   initialize_to_zero(&sd->sd_type,con,nest+1);
      990       990    4                   b = 0;
      991       991    4                   if (sd->sd_type->tp_fund != FIELD || !sd->sd_sdef ||
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=28 
      992       992    4                          sd->sd_sdef->sd_offset != sd->sd_offset      )
      993       993    4                      b = sd->sd_type->tp_size;
      994       994    4                   bytes += (b<0) ? 1 : b;
      995       995    4                   if (sd->sd_sdef) b = pseudo_zero_bytes(sd);
      996       996    4                      else b = tp->tp_size - bytes;
      997       997    4                   fill_zero_bytes += b;
      998       998    4                   bytes += b;
      999       999    4                   sd = sd->sd_sdef;
     1000      1000    4                }
     1001      1001    3             }
     1002      1002    2             break;
     1003      1003    2
     1004      1004    2          case UNION:
     1005      1005    2             {
     1006      1006    3                register struct sdef *sd = tp->tp_sdef;
     1007      1007    3                if (sd) {
     1008      1008    4                   if (FIELD != sd->sd_type->tp_fund)
     1009      1009    4                      initialize_to_zero(&sd->sd_type,con,nest+1);
     1010      1010    4                   else fill_zero_bytes += sd->sd_type->tp_size;
     1011      1011    4                   }
     1012      1012    3                fill_zero_bytes += size_of_type(tp,"union") - sd->sd_type->tp_size;
     1013      1013    3             }
     1014      1014    2             break;
     1015      1015    2
     1016      1016    2          case ARRAY:
     1017      1017    2             {
     1018      1018    3                int sz = tp->tp_size;
     1019      1019    3                struct type *tpu = tp->tp_up;
     1020      1020    3                int elems, i;
     1021      1021    3
     1022      1022    3                while (tpu->tp_fund == ARRAY)
     1023      1023    3                   tpu = tpu->tp_up;
     1024      1024    3
     1025      1025    3                elems = ((sz < 0)? tpu->tp_size : sz) / tpu->tp_size;
     1026      1026    3
     1027      1027    3                switch   (tpu->tp_fund) {
     1028      1028    4                case STRUCT:
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=29 
     1029      1029    4                case UNION:
     1030      1030    4                   for (i=0; i<elems; i++)
     1031      1031    4                      initialize_to_zero(&tpu,con,nest+1);
     1032      1032    4                   break;
     1033      1033    4
     1034      1034    4                case POINTER:
     1035      1035    4                   for (i=0; i<elems; i++)
     1036      1036    4                      zero_pointer(tpu->tp_size, con);
     1037      1037    4                   break;
     1038      1038    4
     1039      1039    4                case FLOAT:
     1040      1040    4                case DOUBLE:
     1041      1041    4                   for (i=0; i<elems; i++)
     1042      1042    4                      zero_float(tpu->tp_size, con);
     1043      1043    4                   break;
     1044      1044    4
     1045      1045    4        #ifndef NOBITFIELD
     1046      1046    4                case FIELD:
     1047      1047    4                   for (i=0; i<elems; i++)
     1048      1048    4                      zero_field(tpu->tp_size, con, tpu->tp_field->fd_sdef);
     1049      1049    4                   break;
     1050      1050    4        #endif
     1051      1051    4
     1052      1052    4                default:
     1053      1053    4                   fill_zero_bytes += elems * tpu->tp_size;
     1054      1054    4                }
     1055      1055    3             }
     1056      1056    2          }
     1057      1057    1          if (fill_zero_bytes && !nest) force_zeroes(fill_zero_bytes,con), fill_zero_b
                               ytes = 0;
     1058      1058    1        }
     1059      1059
     1060      1060             force_zeroes(n,con)
     1061      1061               int n;
     1062      1062             {
     1063      1063    1        #if DATAFIRST && defined(USE_TMP)
     1064      1064    1          if (!options['N']) EM_File_No = 1;
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=30 
     1065      1065    1        #endif
     1066      1066    1
     1067      1067    1          if (con) {
     1068      1068    2             while (n && (constant_data & (word_size - 1)))   {
     1069      1069    3                C_rom_ucon("0",(arith)1);
     1070      1070    3                constant_data++;
     1071      1071    3                n--;
     1072      1072    3                }
     1073      1073    2             while (n >= word_size)   {
     1074      1074    3                C_rom_cst((arith)0);
     1075      1075    3                constant_data += word_size;
     1076      1076    3                n -= word_size;
     1077      1077    3                }
     1078      1078    2             while (n)   {
     1079      1079    3                C_rom_ucon("0",(arith)1);
     1080      1080    3                constant_data++;
     1081      1081    3                n--;
     1082      1082    3                }
     1083      1083    2             }
     1084      1084    1          else {
     1085      1085    2             int l;
     1086      1086    2             while (n && (static_data & (word_size - 1)))   {
     1087      1087    3                C_con_ucon("0",(arith)1);
     1088      1088    3                static_data++;
     1089      1089    3                n--;
     1090      1090    3                }
     1091      1091    2             if (n >= word_size) {
     1092      1092    3                l = n % word_size;
     1093      1093    3                C_bss_cst((arith)n-l,(arith)0, 1);
     1094      1094    3                static_data += n-l;
     1095      1095    3                n = l;
     1096      1096    3                }
     1097      1097    2             while (n)   {
     1098      1098    3                C_con_ucon("0",(arith)1);
     1099      1099    3                static_data++;
     1100      1100    3                n--;
     1101      1101    3                }
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=31 
     1102      1102    2             }
     1103      1103    1        #if DATAFIRST && defined(USE_TMP)
     1104      1104    1          EM_File_No = 0;
     1105      1105    1        #endif
     1106      1106    1        }
     1107      1107
     1108      1108             zero_float(sz, con)
     1109      1109               arith sz;
     1110      1110               int   con;
     1111      1111             {
     1112      1112    1          if (fill_zero_bytes)   force_zeroes(fill_zero_bytes, con), fill_zero_bytes =
                                0;
     1113      1113    1        #if DATAFIRST && defined(USE_TMP)
     1114      1114    1          if (!options['N']) EM_File_No = 1;
     1115      1115    1        #endif
     1116      1116    1          if (con) {
     1117      1117    2             C_rom_fcon("0", sz);
     1118      1118    2             constant_data += sz;
     1119      1119    2             }
     1120      1120    1          else  {
     1121      1121    2             C_con_fcon("0", sz);
     1122      1122    2             static_data += sz;
     1123      1123    2          }
     1124      1124    1        #if DATAFIRST && defined(USE_TMP)
     1125      1125    1          EM_File_No = 0;
     1126      1126    1        #endif
     1127      1127    1        }
     1128      1128
     1129      1129             zero_pointer(sz, con)
     1130      1130               arith sz;
     1131      1131               int   con;
     1132      1132             {
     1133      1133    1          if (fill_zero_bytes)   force_zeroes(fill_zero_bytes, con), fill_zero_bytes =
                                0;
     1134      1134    1        #if DATAFIRST && defined(USE_TMP)
     1135      1135    1          if (!options['N']) EM_File_No = 1;
     1136      1136    1        #endif
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=32 
     1137      1137    1          if (con) {
     1138      1138    2             C_rom_ucon("3084", sz);
     1139      1139    2             constant_data += sz;
     1140      1140    2             }
     1141      1141    1          else  {
     1142      1142    2             C_con_ucon("3084", sz);
     1143      1143    2             static_data += sz;
     1144      1144    2             }
     1145      1145    1        #if DATAFIRST && defined(USE_TMP)
     1146      1146    1          EM_File_No = 0;
     1147      1147    1        #endif
     1148      1148    1        }
     1149      1149
     1150      1150             zero_field(sz, con, sd)
     1151      1151               arith sz;
"zbc$ival:g.:ZBC3TOU", line 1058: (warning) identifier "con" is not used
     1152      1152               int   con;
     1153      1153               struct sdef *sd;
     1154      1154             {
     1155      1155    1          if (bf_offset == (arith)-1) bf_offset = sd->sd_offset;
     1156      1156    1
     1157      1157    1          if (sd->sd_sdef == 0  ||  sd->sd_sdef->sd_offset != bf_offset) {
     1158      1158    2             fill_zero_bytes += sz;
     1159      1159    2             bf_offset = (arith)-1;
     1160      1160    2             }
     1161      1161    1        }
     1162      1162
     1163      1163             pseudo_zero_bytes(sd)
     1164      1164               register struct sdef *sd;
     1165      1165             {
     1166      1166    1
     1167      1167    1
     1168      1168    1
     1169      1169    1          int n;
     1170      1170    1          if (sd->sd_type->tp_fund != FIELD || sd->sd_sdef->sd_offset != sd->sd_offset
                               )
     1171      1171    1             n = sd->sd_sdef->sd_offset - sd->sd_offset - size_of_type(sd->sd_type,"st
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=33 
                               ruct member");
     1172      1172    1          else n = 0;
     1173      1173    1          return n;
     1174      1174    1        }
     1175      1175
     1176      1176             zero_memory(bytes, coffset, fzero)
     1177      1177               int bytes;
     1178      1178               int *coffset;
     1179      1179               void (*fzero)();
     1180      1180             {
     1181      1181    1        #if DATAFIRST && defined(USE_TMP)
     1182      1182    1          if (!options['N']) EM_File_No = 1;
     1183      1183    1        #endif
     1184      1184    1          while ( bytes > 0  &&  (*coffset)&3 )
     1185      1185    1             fzero("0",(arith)1), (*coffset)++, bytes--;
     1186      1186    1
     1187      1187    1          while ( bytes >= 4 )
     1188      1188    1             fzero("0",(arith)4), *coffset += 4, bytes -= 4;
     1189      1189    1
     1190      1190    1          while ( bytes > 0 )
     1191      1191    1             fzero("0",(arith)1), (*coffset)++, bytes--;
     1192      1192    1
     1193      1193    1        #if DATAFIRST && defined(USE_TMP)
     1194      1194    1          EM_File_No = 0;
     1195      1195    1        #endif
     1196      1196    1        }
     1197      1197
     1198      1198
---  Include file information  ---

   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   em:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   em_code:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$ival:c.:ZBC3TOU                                                  Fri Aug 22 1997  Page=34 
   alloc:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   zbc$align:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$struct:h.:ZBC3TOU. is referenced
   zbc$field:h.:ZBC3TOU. is referenced
   zbc$assert:h.:ZBC3TOU. is referenced
   zbc$class:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$level:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$LLlex:h.:ZBC3TOU. is referenced
   zbc$file_info:h.:ZBC3TOU. is referenced
   zbc$noRoption:h.:ZBC3TOU. is referenced
   zbc$estack:h.:ZBC3TOU. is referenced
   zbc$zb_target:h.:ZBC3TOU. is referenced
   zbc$dataFirst:h.:ZBC3TOU. is referenced
   zbc$use_tmp:h.:ZBC3TOU. is referenced

3 warnings were detected in the file zbc$ival:c.:ZBC3TOU
