

CC.C03    File=zbl$name:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              *
        5         5              */
        6         6
        7         7             /*
        8         8              *  L L G E N
        9         9              *
       10        10              *  An Extended LL(1) Parser Generator
       11        11              *
       12        12              *  Author : Ceriel J.H. Jacobs
       13        13              */
       14        14
       15        15             /*
       16        16              * name.c
       17        17              * Defines the symboltable search routine, a name store routine and an
       18        18              * initialising routine.
       19        19              */
       20        20
       21        21             # include "types:h"
       22        22             # include "extern:h"
       23        23             # include "assert:h"
       24        24             # include "io:h"
       25        25
       26        26             # ifndef NORCSID
       27        27             static string rcsid7 = "$Header: name.c,v 2.3 87/03/10 01:15:48 ceriel Exp $";

       28        28             # endif
       29        29
       30        30             # define HASHSIZE 128
       31        31             # define NMSIZ 2048   /* Room for names allocated NMSIZ bytes at a time */
       32        32
       33        33             static char  *name, *maxname;
       34        34             static p_entry  h_root[HASHSIZE] = {    /* hash table */
       35        35    1          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
CC.C03    File=zbl$name:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       36        36    1          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       37        37    1          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       38        38    1          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       39        39    1          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       40        40    1          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       41        41    1          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       42        42    1          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
       43        43             static string   e_literal = "Illegal literal";
       44        44             static p_entry  entries, maxentries;
       45        45             static t_info   token_info = {0, 0, 0, 0, 0, 0};
       46        46             static t_info   nont_info  = {0, 0, 0, 0, 0, 0};
       47        47
       48        48             /* Defined in this file are: */
       49        49             extern string   store();
       50        50             extern    name_init();
       51        51             STATIC int   hash();
       52        52             STATIC p_entry  newentry();
       53        53             extern p_gram   search();
       54        54
       55        55             p_mem alloc();
       56        56             p_mem new_mem();
       57        57
       58        58             name_init() {
       59        59    1         int i;
       60        60    1         for( i=0 ; i<HASHSIZE ; h_root[i++]=(p_entry)0 )    ;
       61        61    1         token_info.i_esize = sizeof (t_token);
       62        62    1         token_info.i_incr = 100;
       63        63    1         nont_info.i_esize = sizeof (t_nont);
       64        64    1         nont_info.i_incr = 100;
       65        65    1         search(TERMINAL,"EOFILE",ENTERING);
       66        66    1        }
       67        67
       68        68             STATIC p_entry
       69        69             newentry(str, next) string str; p_entry next; {
       70        70    1         register p_entry p;
       71        71    1
       72        72    1         if ((p = entries) == maxentries) {
CC.C03    File=zbl$name:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       73        73    2            p = (p_entry) alloc(50 * sizeof(t_entry));
       74        74    2            maxentries = p + 50;
       75        75    2         }
       76        76    1         entries = p + 1;
       77        77    1         p->h_name = str;
       78        78    1         p->h_next = next;
       79        79    1         p->h_type.g_lineno = linecount;
       80        80    1         return p;
       81        81    1        }
       82        82
       83        83             string
       84        84             store(s) string s; {
       85        85    1         /*
       86        86    1          * Store a string s in the name table
       87        87    1          */
       88        88    1         register string   s1, t ,u;
       89        89    1
       90        90    1         u = name;
       91        91    1         t = s;
       92        92    1         s1 = u;
       93        93    1         do {
       94        94    2            if (u >= maxname) {
       95        95    3               u = alloc(NMSIZ);
       96        96    3               maxname = u + NMSIZ;
       97        97    3               t = s;
       98        98    3               s1 = u;
       99        99    3            }
      100       100    2            *u++ = *t;
      101       101    2         } while (*t++);
      102       102    1         name = u;
      103       103    1         return s1;
      104       104    1        }
      105       105
      106       106             STATIC int
      107       107             hash(str) string str; {
      108       108    1         /*
      109       109    1          * Compute the hash for string str
CC.C03    File=zbl$name:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      110       110    1          */
      111       111    1         register int   i;
      112       112    1         register string l;
      113       113    1
      114       114    1         l = str;
      115       115    1         i = 0;
      116       116    1         while (*l != '\0') i += *l++ & 0377;
      117       117    1         i += l - str;
      118       118    1         return i % HASHSIZE;
      119       119    1        }
      120       120
      121       121             p_gram
      122       122             search(type,str,option) register string str; {
      123       123    1         /*
      124       124    1          * Search for object str.
      125       125    1          * It has type UNKNOWN, LITERAL, TERMINAL or NONTERM.
      126       126    1          * option can be ENTERING or BOTH (also looking).
      127       127    1          */
      128       128    1         register int      val;
      129       129    1         register p_entry  p;
      130       130    1         register int      i;
      131       131    1         int         type1;
      132       132    1
      133       133    1         i = hash(str);
      134       134    1         /*
      135       135    1          * Walk hash chain
      136       136    1          */
      137       137    1         for (p = h_root[i]; p != (p_entry) 0; p = p->h_next) {
      138       138    2            if(!strcmp(p->h_name,str)) {
      139       139    3               type1 = g_gettype(&(p->h_type));
      140       140    3               if (type1 != type) {
      141       141    4                  if (type1 == LITERAL || type == LITERAL) {
      142       142    5                     continue;
      143       143    5                  }
      144       144    4                  if (type != UNKNOWN) {
      145       145    5                     error(linecount,
      146       146    5                        "%s : illegal type",
CC.C03    File=zbl$name:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      147       147    5                        str);
      148       148    5                     continue;
      149       149    5                  }
      150       150    4               }
      151       151    3               if (option==ENTERING)  {
      152       152    4                  error(linecount,
      153       153    4                     "%s : already defined",str);
      154       154    4               }
      155       155    3               p->h_type.g_lineno = linecount;
      156       156    3               return &(p->h_type);
      157       157    3            }
      158       158    2         }
      159       159    1         p = newentry(store(str), h_root[i]);
      160       160    1         h_root[i] = p;
      161       161    1         if (type == TERMINAL || type == LITERAL) {
      162       162    2            register p_token pt;
      163       163    2
      164       164    2            pt = (p_token) new_mem(&token_info);
      165       165    2            tokens = (p_token) token_info.i_ptr;
      166       166    2            pt->t_string = p->h_name;
      167       167    2            if (type == LITERAL) {
      168       168    3               if (str[0] == '\\') {
      169       169    4                  /*
      170       170    4                   * Handle escapes in literals
      171       171    4                   */
      172       172    4                  if (str[2] == '\0') {
      173       173    5                     switch(str[1]) {
      174       174    6                       case 'n' :
      175       175    6                        val = '\n';
      176       176    6                        break;
      177       177    6                       case 'r' :
      178       178    6                        val = '\r';
      179       179    6                        break;
      180       180    6                       case 'b' :
      181       181    6                        val = '\b';
      182       182    6                        break;
      183       183    6                       case 'f' :
CC.C03    File=zbl$name:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      184       184    6                        val = '\f';
      185       185    6                        break;
      186       186    6                       case 't' :
      187       187    6                        val = '\t';
      188       188    6                        break;
      189       189    6                       case '\'':
      190       190    6                        val = '\'';
      191       191    6                        break;
      192       192    6                       case '\\':
      193       193    6                        val = '\\';
      194       194    6                        break;
      195       195    6                       default  :
      196       196    6                        error(linecount,e_literal);
      197       197    6                     }
      198       198    5                  } else {
      199       199    5                     /*
      200       200    5                      * Here, str[2] != '\0'
      201       201    5                      */
      202       202    5                     if (str[1] > '3' || str[1] < '0' ||
      203       203    5                         str[2] > '7' || str[2] < '0' ||
      204       204    5                         str[3] > '7' || str[3] < '0' ||
      205       205    5                         str[4] != '\0') error(linecount,e_literal);
      206       206    5                     val = 64*str[1] - 73*'0' +
      207       207    5                           8*str[2] + str[3];
      208       208    5                  }
      209       209    4               } else {
      210       210    4                  /*
      211       211    4                   * No escape in literal
      212       212    4                   */
      213       213    4                  if (str[1] == '\0') val = str[0];
      214       214    4                  else error(linecount,e_literal);
      215       215    4               }
      216       216    3               pt->t_tokno = val;
      217       217    3               g_settype(&(p->h_type), LITERAL);
      218       218    3            } else {
      219       219    3               /*
      220       220    3                * Here, type = TERMINAL
CC.C03    File=zbl$name:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      221       221    3                */
      222       222    3               pt->t_tokno = assval++;
      223       223    3               g_settype(&(p->h_type), TERMINAL);
      224       224    3            }
      225       225    2            g_setcont(&(p->h_type), ntokens);
      226       226    2            ntokens++;
      227       227    2            return &(p->h_type);
      228       228    2         }
      229       229    1         /*
      230       230    1          * type == NONTERM || type == UNKNOWN
      231       231    1          * UNKNOWN and not yet declared means : NONTERM
      232       232    1          */
      233       233    1         {
      234       234    2            register p_nont q;
      235       235    2
      236       236    2            q = (p_nont) new_mem(&nont_info);
      237       237    2            nonterms = (p_nont) nont_info.i_ptr;
      238       238    2            q->n_name = p->h_name;
      239       239    2            q->n_rule = 0;
      240       240    2            q->n_lineno = linecount;
      241       241    2            q->n_string = f_input;
      242       242    2            q->n_follow = 0;
      243       243    2            q->n_flags = 0;
      244       244    2            q->n_contains = 0;
      245       245    2            g_settype(&(p->h_type), NONTERM);
      246       246    2            g_setcont(&(p->h_type), nnonterms);
      247       247    2            nnonterms++;
      248       248    2            return &(p->h_type);
      249       249    2         }
      250       250    1        }
      251       251
---  Include file information  ---

   zbl$types:h.:ZBC3TOU. is referenced
   zbl$extern:h.:ZBC3TOU. is referenced
   zbl$assert:h.:ZBC3TOU. is referenced
   zbl$io:h.:ZBC3TOU. is referenced
CC.C03    File=zbl$name:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
   stdio:h.:LIB_E05. is referenced

No diagnostics were issued in the file zbl$name:c.:ZBC3TSI
