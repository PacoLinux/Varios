

CC.C03    File=zbe$cf_succ:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cf_succ.c,v 1.3 87/03/10 10:47:34 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  C O N T R O L   F L O W
        7         7              *
        8         8              *  C F _ S U C C . C
        9         9              */
       10        10
       11        11
       12        12             #include <stdio:h>
       13        13             #include "types:h"
       14        14             #include "def:h"
       15        15             #include "debug:h"
       16        16             #include "global:h"
       17        17             #include "lset:h"
       18        18             #include "cset:h"
       19        19             #include "em_spec:h"
       20        20             #include "em_pseu:h"
       21        21             #include "em_flag:h"
       22        22             #include "em_mnem:h"
       23        23             #include "cf:h"
       24        24             #include "map:h"
       25        25
       26        26             extern char em_flag[];
       27        27
       28        28
       29        29             STATIC succeeds(succ,pred)
       30        30              bblock_p succ, pred;
       31        31             {
       32        32    1         assert(pred != (bblock_p) 0);
       33        33    1         if (succ != (bblock_p) 0) {
       34        34    2            Ladd(succ, &pred->b_succ);
       35        35    2            Ladd(pred, &succ->b_pred);
       36        36    2         }
CC.C03    File=zbe$cf_succ:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37    1        }
       38        38
       39        39
       40        40             #define IS_RETURN(i)  (i == op_ret || i == op_rtt)
       41        41             #define IS_CASE_JUMP(i)  (i == op_csa || i == op_csb)
       42        42             #define IS_UNCOND_JUMP(i) (i <= sp_lmnem && (em_flag[i-sp_fmnem] & EM_FLO) ==
                               FLO_T)
       43        43             #define IS_COND_JUMP(i)  (i <= sp_lmnem && (em_flag[i-sp_fmnem] & EM_FLO) == F
                               LO_C)
       44        44             #define TARGET(lnp)   (lbmap[INSTRLAB(lnp)])
       45        45             #define ATARGET(arg)  (lbmap[arg->a_a.a_instrlab])
       46        46
       47        47
       48        48
       49        49             STATIC arg_p skip_const(arg)
       50        50              arg_p arg;
       51        51             {
       52        52    1         assert(arg != (arg_p) 0);
       53        53    1         switch(arg->a_type) {
       54        54    2            case ARGOFF:
       55        55    2            case ARGICN:
       56        56    2            case ARGUCN:
       57        57    2               break;
       58        58    2            default:
       59        59    2               error("bad case descriptor");
       60        60    2         }
       61        61    1         return arg->a_next;
       62        62    1        }
       63        63
       64        64
       65        65             STATIC arg_p use_label(arg,b)
       66        66              arg_p arg;
       67        67              bblock_p b;
       68        68             {
       69        69    1         if (arg->a_type == ARGINSTRLAB) {
       70        70    2            /* arg is a non-null label */
       71        71    2            succeeds(ATARGET(arg),b);
CC.C03    File=zbe$cf_succ:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       72        72    2         }
       73        73    1         return arg->a_next;
       74        74    1        }
       75        75
       76        76
       77        77
       78        78             STATIC case_flow(instr,desc,b)
       79        79              short    instr;
       80        80              line_p   desc;
       81        81              bblock_p b;
       82        82             {
       83        83    1         /* Analyse the case descriptor (given as a ROM pseudo instruction).
       84        84    1          * Every instruction label appearing in the descriptor
       85        85    1          * heads a basic block that is a successor of the block
       86        86    1          * in which the case instruction appears (b).
       87        87    1          */
       88        88    1
       89        89    1         register arg_p arg;
       90        90    1
       91        91    1         assert(instr == op_csa || instr == op_csb);
       92        92    1         assert(TYPE(desc) == OPLIST);
       93        93    1         arg = ARG(desc);
       94        94    1         arg = use_label(arg,b);
       95        95    1         /* See if there is a default label. If so, then
       96        96    1          * its block is a successor of b. Set arg to
       97        97    1          * next argument.
       98        98    1          */
       99        99    1         if (instr == op_csa) {
      100       100    2            arg = skip_const(arg); /* skip lower bound */
      101       101    2            arg = skip_const(arg); /* skip lower-upper bound */
      102       102    2            while (arg != (arg_p) 0) {
      103       103    3               /* All following arguments are case labels
      104       104    3                * or zeroes.
      105       105    3                */
      106       106    3               arg = use_label(arg,b);
      107       107    3            }
      108       108    2         } else {
CC.C03    File=zbe$cf_succ:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      109       109    2            /* csb instruction */
      110       110    2            arg = skip_const(arg);  /* skip #entries */
      111       111    2            while (arg != (arg_p) 0) {
      112       112    3               /* All following arguments are alternatively
      113       113    3                * an index and an instruction label (possibly 0).
      114       114    3                */
      115       115    3               arg = skip_const(arg);  /* skip index */
      116       116    3               arg = use_label(arg,b);
      117       117    3            }
      118       118    2         }
      119       119    1        }
      120       120
      121       121
      122       122
      123       123             STATIC line_p case_descr(lnp)
      124       124              line_p lnp;
      125       125             {
      126       126    1         /* lnp is the instruction just before a csa or csb,
      127       127    1          * so it is the instruction that pushes the address
      128       128    1          * of a case descriptor on the stack. Find that
      129       129    1          * descriptor, i.e. a rom pseudo instruction.
      130       130    1          * Note that this instruction will always be part
      131       131    1          * of the procedure in which the csa/csb occurs.
      132       132    1          */
      133       133    1
      134       134    1         register line_p l;
      135       135    1         dblock_p d;
      136       136    1         obj_p    obj;
      137       137    1         dblock_id id;
      138       138    1
      139       139    1         if (lnp == (line_p) 0 || (INSTR(lnp)) != op_lae) {
      140       140    2            error("cannot find 'lae descr' before csa/csb");
      141       141    2         }
      142       142    1         /* We'll first find the ROM and its dblock_id */
      143       143    1         obj = OBJ(lnp);
      144       144    1         if (obj->o_off != (offset) 0) {
      145       145    2            error("bad 'lae descr' before csa/csb");
CC.C03    File=zbe$cf_succ:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      146       146    2            /* We require a descriptor to be an entire rom,
      147       147    2             * not part of a rom.
      148       148    2             */
      149       149    2         }
      150       150    1         d = obj->o_dblock;
      151       151    1         assert(d != (dblock_p) 0);
      152       152    1         if (d->d_pseudo != DROM) {
      153       153    2            error("case descriptor must be in rom");
      154       154    2         }
      155       155    1         id = d->d_id;
      156       156    1         /* We'll use the dblock_id to find the defining occurrence
      157       157    1          * of the rom in the EM text (i.e. a rom pseudo). As all
      158       158    1          * pseudos appear at the beginning of a procedure, we only
      159       159    1          * have to look in its first basic block.
      160       160    1          */
      161       161    1         assert(curproc != (proc_p) 0);
      162       162    1         assert(curproc->p_start != (bblock_p) 0);
      163       163    1         l = curproc->p_start->b_start; /* first instruction of curproc */
      164       164    1         while (l != (line_p) 0) {
      165       165    2            if ((INSTR(l)) == ps_sym &&
      166       166    2                SHORT(l) == id) {
      167       167    3               /* found! */
      168       168    3               assert((INSTR(l->l_next)) == ps_rom);
      169       169    3               return l->l_next;
      170       170    3            }
      171       171    2            l = l->l_next;
      172       172    2         }
      173       173    1         error("cannot find rom pseudo for case descriptor");
      174       174    1         /* NOTREACHED */
      175       175    1        }
      176       176
      177       177
      178       178
      179       179             STATIC last2_instrs(b,last_out,prev_out)
      180       180              bblock_p b;
      181       181              line_p   *last_out,*prev_out;
      182       182             {
CC.C03    File=zbe$cf_succ:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      183       183    1         /* Determine the last and one-but-last instruction
      184       184    1          * of basic block b. An end-pseudo is not regarded
      185       185    1          * as an instruction. If the block contains only 1
      186       186    1          * instruction, prev_out is 0.
      187       187    1          */
      188       188    1
      189       189    1         register line_p l1,l2;
      190       190    1
      191       191    1         l2 = b->b_start;  /* first instruction of b */
      192       192    1         assert(l2 != (line_p) 0); /* block can not be empty */
      193       193    1         if ((l1 = l2->l_next) == (line_p) 0 || INSTR(l1) == ps_end) {
      194       194    2            *last_out = l2; /* single instruction */
      195       195    2            *prev_out = (line_p) 0;
      196       196    2         } else {
      197       197    2            while(l1->l_next != (line_p) 0 && INSTR(l1->l_next) != ps_end) {
      198       198    3               l2 = l1;
      199       199    3               l1 = l1->l_next;
      200       200    3            }
      201       201    2            *last_out = l1;
      202       202    2            *prev_out = l2;
      203       203    2         }
      204       204    1        }
      205       205
      206       206
      207       207
      208       208             control_flow(head)
      209       209              bblock_p head;
      210       210             {
      211       211    1         /* compute the successor and predecessor relation
      212       212    1          * for every basic block.
      213       213    1          */
      214       214    1
      215       215    1         register bblock_p b;
      216       216    1         line_p lnp, prev;
      217       217    1         short instr;
      218       218    1
      219       219    1         for (b = head; b != (bblock_p) 0; b = b->b_next) {
CC.C03    File=zbe$cf_succ:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      220       220    2            /* for every basic block, in textual order, do */
      221       221    2            last2_instrs(b, &lnp, &prev);
      222       222    2            /* find last and one-but-last instruction */
      223       223    2            instr = INSTR(lnp);
      224       224    2            /* The last instruction of the basic block
      225       225    2             * determines the set of successors of the block.
      226       226    2             */
      227       227    2            if (IS_CASE_JUMP(instr)) {
      228       228    3               case_flow(instr,case_descr(prev),b);
      229       229    3               /* If lnp is a csa or csb, then the instruction
      230       230    3                * just before it (i.e. prev) must be the
      231       231    3                * instruction that pushes the address of the
      232       232    3                * case descriptor. This descriptor is found
      233       233    3                * and analysed in order to build the successor
      234       234    3                * and predecessor sets of b.
      235       235    3                */
      236       236    3            } else {
      237       237    3               if (!IS_RETURN(instr)) {
      238       238    4               if (IS_UNCOND_JUMP(instr)) {
      239       239    5                  succeeds(TARGET(lnp),b);
      240       240    5               } else {
      241       241    5                  if (IS_COND_JUMP(instr)) {
      242       242    6                     succeeds(TARGET(lnp),b);
      243       243    6                     succeeds(b->b_next, b);
      244       244    6                     /* Textually next block is
      245       245    6                      * a successor of b.
      246       246    6                      */
      247       247    6                  } else {
      248       248    6                     /* normal instruction */
      249       249    6                     succeeds(b->b_next, b);
      250       250    6                  }
      251       251    5               }
      252       252    4               }
      253       253    3            }
      254       254    2         }
      255       255    1        }
      256       256
CC.C03    File=zbe$cf_succ:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_flag:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   zbe$cf:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$cf_succ:c.:ZBC3TSI
