

10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 1    
    1      /* $Header: readk.c,v 1.7 87/03/31 08:16:41 ceriel Exp $ */
    2      /*
    3       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    4       * See the copyright notice in the ACK home directory, in the file "Copyright".
    5       */
    6      /*  This file must be included in the file "read_emk.c".
    7       It takes care of the reading of compact EM code.
    8      */
    9
   10      #include <ctype.h>
   11
   12      /* get16, get32: read a signed constant
   13      */
   14      PRIVATE int
   15      get16()
   16      {
   17       register int l_byte, h_byte;
   18
   19       l_byte = getbyte();
   20       h_byte = getbyte();
   21      #ifdef  TM_L66
   22       if (h_byte >= 256) h_byte -= 512;
   23       return l_byte | (h_byte << 9);
   24      #else
   25       if (h_byte >= 128) h_byte -= 256;
   26       return l_byte | (h_byte << 8);
   27      #endif
   28      }
   29
   30      PRIVATE arith
   31      get32()
   32      {
   33       register arith l;
   34       register int h_byte;
   35
   36       l = getbyte();
   37      #ifdef  TM_L66
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 2    
   38       l |= ((unsigned) getbyte() << 9);
   39       l |= ((arith) getbyte() << 18);
   40       h_byte = getbyte();
   41       if (h_byte >= 256) h_byte -= 512;
   42       return l | ((arith) h_byte << 27);
   43      #else
   44       l |= ((unsigned) getbyte() << 8);
   45       l |= ((arith) getbyte() << 16);
   46       h_byte = getbyte();
   47       if (h_byte >= 128) h_byte -= 256;
   48       return l | ((arith) h_byte << 24);
   49      #endif
   50      }
   51
   52      PRIVATE struct string *getstring();
   53
   54      /* getarg : read an argument of any type, and check it against "typset"
   55         if neccesary. Return a pointer to the argument.
   56      */
   57      PRIVATE struct e_args *
   58      getarg(typset)
   59      {
   60       register struct e_args *ap = argentry();
   61       register int i = getbyte();
   62      #ifdef CHECKING
   63       int argtyp;
   64      #endif CHECKING
   65
   66       ap->em_next = 0;
   67       switch(i) {
   68       default:
   69          if (i < sp_fcst0+sp_ncst0 && i >= sp_fcst0) { /* A cst */
   70             ap->em_cst = i - sp_zcst0;
   71             ap->em_argtype = cst_ptyp;
   72             i = sp_cst2;
   73          }
   74          break;
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 3    
   75
   76       case sp_dlb1:  /* Numeric data label encoded in one byte */
   77          ap->em_dlb = getbyte();
   78          ap->em_noff = 0;
   79          ap->em_argtype = nof_ptyp;
   80          break;
   81
   82       case sp_dlb2:  /* Numeric data label encoded in two bytes */
   83          ap->em_dlb = get16();
   84          ap->em_noff = 0;
   85          ap->em_argtype = nof_ptyp;
   86      #ifdef CHECKING
   87          if (ap->em_dlb < 0 && !EM_error) {
   88             EM_error = "Illegal data label";
   89             break;
   90          }
   91      #endif CHECKING
   92          break;
   93
   94       case sp_ilb1:  /* Instruction label encoded in one byte */
   95          ap->em_ilb = getbyte();
   96          ap->em_argtype = ilb_ptyp;
   97          break;
   98
   99       case sp_ilb2:  /* Instruction label encoded in two bytes */
  100          ap->em_ilb = get16();
  101          ap->em_argtype = ilb_ptyp;
  102      #ifdef CHECKING
  103          if (ap->em_ilb < 0 && !EM_error) {
  104             EM_error = "Illegal instruction label";
  105             break;
  106          }
  107      #endif CHECKING
  108          break;
  109
  110       case sp_cst2:  /* A cst encoded in two bytes */
  111          ap->em_cst = get16();
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 4    
  112          ap->em_argtype = cst_ptyp;
  113          break;
  114
  115       case sp_cst4:  /* A cst encoded in four bytes */
  116          ap->em_cst = get32();
  117          ap->em_argtype = cst_ptyp;
  118          break;
  119
  120       case sp_pnam:  /* A procedure name */
  121       {
  122          register struct string *p;
  123
  124          p = getstring(1);
  125      #ifdef CHECKING
  126          if (state & INSTRING) {
  127             xerror("Procedure name too long");
  128          }
  129      #endif CHECKING
  130          ap->em_pnam = p->str;
  131          ap->em_argtype = pro_ptyp;
  132          break;
  133       }
  134
  135       case sp_dnam:  /* A Non-numeric data label */
  136       {
  137          register struct string *p;
  138
  139          p = getstring(1);
  140      #ifdef CHECKING
  141          if (state & INSTRING) {
  142             xerror("Data label too long");
  143          }
  144      #endif CHECKING
  145          ap->em_dnam = p->str;
  146          ap->em_soff = 0;
  147          ap->em_argtype = sof_ptyp;
  148          break;
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 5    
  149       }
  150
  151       case sp_doff:  /* A data label + offset */
  152       {
  153          register struct e_args *ap1;
  154
  155          ap1 = getarg(lab_ptyp);
  156          *ap = *ap1;
  157          i_emargs--;
  158          ap1 = getarg(cst_ptyp);
  159          if (ap->em_argtype == sof_ptyp) {   /* non-numeric label */
  160             ap->em_soff = ap1->em_cst;
  161          }
  162          else  ap->em_noff = ap1->em_cst;
  163          i_emargs--;
  164          break;
  165       }
  166
  167       case sp_icon:  /* An integer constant */
  168       case sp_ucon:  /* An unsigned constant */
  169       case sp_fcon:  /* A floating constant */
  170       {
  171          register struct string *p;
  172
  173          ap->em_size = getarg(cst_ptyp)->em_cst;
  174          i_emargs--;
  175          p = getstring(0);
  176      #ifdef CHECKING
  177          if (state & INSTRING) {
  178             xerror("Numeric constant too long");
  179          }
  180      #endif CHECKING
  181          ap->em_argtype = ptyp(i);
  182          ap->em_str = p->str;
  183          break;
  184       }
  185
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 6    
  186       case sp_scon:  /* A string constant */
  187       {
  188          register struct string *p;
  189
  190          p = getstring(0);
  191          ap->em_argtype = str_ptyp;
  192          ap->em_str = p->str;
  193          ap->em_size = p->length;
  194          break;
  195       }
  196       }
  197      #ifdef CHECKING
  198       argtyp = i;
  199       if (EM_error) return 0;
  200
  201       if (i == EOF) {
  202          xfatal("Unexpected EOF");
  203          return 0;
  204       }
  205
  206       if ((i -= sp_fspec) < 0 || i >= 16) {
  207          xerror("Illegal byte");
  208          return 0;
  209       }
  210
  211       if ((typset & (1 << i)) == 0 && !EM_error) {
  212          EM_error = "Bad argument type";
  213       }
  214       if (argtyp == sp_cend) return 0;
  215      #else not CHECKING
  216       if (i == sp_cend) return 0;
  217      #endif CHECKING
  218       return ap;
  219      }
  220
  221      #ifdef CHECKING
  222      /* checkident: check that a string indeed represents an identifier
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 7    
  223      */
  224      PRIVATE int
  225      checkident(s)
  226       register struct string *s;
  227      {
  228       register char *p;
  229       register int n;
  230
  231       p = s->str;
  232       if (!isascii(*p) || (!isalpha(*p) && *p != '_')) {
  233          return 0;
  234       }
  235       p++;
  236       for (n = s->length; --n > 0; p++) {
  237          if (!isascii(*p) || (!isalnum(*p) && *p != '_')) {
  238             return 0;
  239          }
  240       }
  241       return 1;
  242      }
  243      #endif CHECKING
  244
  245      /* getstring: read a string from the input, but at most STRSIZ characters
  246       of it. The next characters will be read another time around
  247      */
  248      /*ARGSUSED*/
  249      PRIVATE struct string *
  250      getstring(isident)
  251      {
  252       register char *p;
  253       register int n;
  254       register struct string *s;
  255
  256       if (!(state & INSTRING)) { /* Not reading a string yet */
  257          struct e_args *ap = getarg(cst_ptyp);
  258                   /* Read length of string */
  259          i_emargs--;
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 8    
  260          strleft = ap->em_cst;
  261      #ifdef CHECKING
  262          if (strleft < 0) {
  263             xerror("Negative length in string");
  264             return 0;
  265          }
  266      #endif CHECKING
  267       }
  268
  269       s = stringentry();
  270
  271       if (strleft <= STRSIZ) {   /* Handle the whole string */
  272          n = strleft;
  273          state &= ~INSTRING;
  274       }
  275       else {            /* Handle STRSIZ characters of it, and
  276                      indicate that there is more
  277                   */
  278          n = STRSIZ;
  279          strleft -= STRSIZ;
  280          state |= INSTRING;
  281       }
  282
  283       s->length = n;
  284       p = s->str;
  285       while (--n >= 0) {
  286          *p++ = getbyte();
  287       }
  288       *p++ = '\0';
  289
  290      #ifdef CHECKING
  291       if (isident) {
  292          if (!checkident(s) && !EM_error) {
  293             EM_error = "Illegal identifier";
  294          }
  295       }
  296      #endif CHECKING
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 9    
  297       return s;
  298      }
  299
  300      /* gethead: read the start of an EM-line
  301      */
  302      PRIVATE struct e_instr *
  303      gethead()
  304      {
  305       register int i;
  306       register struct e_instr *p = &emhead;
  307
  308       EM_lineno++;
  309
  310       if ((i = getbyte()) < sp_fmnem+sp_nmnem && i >= sp_fmnem) {
  311          /* A mnemonic */
  312          p->em_type = EM_MNEM;
  313          p->em_opcode = i;
  314          return p;
  315       }
  316
  317       if (i < sp_fpseu+sp_npseu && i >= sp_fpseu) {   /* A pseudo */
  318          if (i == ps_mes) {
  319             p->em_type = EM_STARTMES;
  320          }
  321          else  p->em_type = EM_PSEU;
  322          p->em_opcode = i;
  323          return p;
  324       }
  325
  326       if (i < sp_filb0+sp_nilb0 && i >= sp_filb0) {   /* Instruction label */
  327          p->em_type = EM_DEFILB;
  328          p->em_deflb = i - sp_filb0;
  329          return p;
  330       }
  331
  332       switch(i) {
  333       case sp_ilb1:  /* Instruction label */
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 10   
  334          p->em_type = EM_DEFILB;
  335          p->em_deflb = getbyte();
  336          break;
  337
  338       case sp_ilb2:  /* Instruction label */
  339          p->em_type = EM_DEFILB;
  340          p->em_deflb = get16();
  341      #ifdef CHECKING
  342          if (p->em_deflb < 0 && !EM_error) {
  343             EM_error = "Illegal instruction label definition";
  344          }
  345      #endif CHECKING
  346          break;
  347
  348       case sp_dlb1:  /* Numeric data label */
  349          p->em_type = EM_DEFDLB;
  350          p->em_deflb = getbyte();
  351          break;
  352
  353       case sp_dlb2:  /* Numeric data label */
  354          p->em_type = EM_DEFDLB;
  355          p->em_deflb = get16();
  356      #ifdef CHECKING
  357          if (p->em_deflb < 0 && !EM_error) {
  358             EM_error = "Illegal data label definition";
  359          }
  360      #endif CHECKING
  361          break;
  362
  363       case sp_dnam:  /* Non-numeric data label */
  364       {
  365          struct string *s;
  366
  367          p->em_type = EM_DEFDNAM;
  368          if (!(s = getstring(1))) {
  369             p->em_defdnam = "";
  370          }
10:54 AUG 20 '97 zbm$read$readk:c.:ZBC3TSI                                 11   
  371          else  p->em_defdnam = s->str;
  372          break;
  373       }
  374
  375       case EOF:   /* End of file */
  376          return 0;
  377
  378       default:
  379          xerror("Unknown opcode");
  380          break;
  381       }
  382
  383       return p;
  384      }
  385

