

CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ic_aux.c,v 1.3 87/03/10 11:04:44 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  I N T E R M E D I A T E   C O D E
        7         7              *
        8         8              *  I C _ A U X . C
        9         9              */
       10        10
       11        11
       12        12
       13        13             #include "types:h"
       14        14             #include "global:h"
       15        15             #include "debug:h"
       16        16             #include "def:h"
       17        17             #include "aux:h"
       18        18             #include "em_pseu:h"
       19        19             #include "em_spec:h"
       20        20             #include "em_mnem:h"
       21        21             #include "ic:h"
       22        22             #include "ic_io:h"
       23        23             #include "ic_lookup:h"
       24        24             #include "alloc:h"
       25        25             #include "ic_aux:h"
       26        26
       27        27
       28        28
       29        29             /* opr_size */
       30        30
       31        31             offset opr_size(instr)
       32        32              short instr;
       33        33             {
       34        34    1         switch(instr) {
       35        35    2            case op_loe:
       36        36    2            case op_ste:
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37    2            case op_ine:
       38        38    2            case op_dee:
       39        39    2            case op_zre:
       40        40    2               return (offset) ws;
       41        41    2            case op_lde:
       42        42    2            case op_sde:
       43        43    2               return (offset) 2*ws;
       44        44    2            case op_lae:
       45        45    2            case op_fil:
       46        46    2               return (offset) UNKNOWN_SIZE;
       47        47    2            default:
       48        48    2               error("illegal operand of opr_size: %d", instr);
       49        49    2         }
       50        50    1         /* NOTREACHED */
       51        51    1        }
       52        52
       53        53
       54        54
       55        55             /* dblockdef */
       56        56
       57        57             STATIC offset argsize(arg)
       58        58              arg_p arg;
       59        59             {
       60        60    1         /* Compute the size (in bytes) that the given initializer
       61        61    1          * will occupy.
       62        62    1          */
       63        63    1
       64        64    1         offset s;
       65        65    1         argb_p argb;
       66        66    1
       67        67    1         switch(arg->a_type) {
       68        68    2            case ARGOFF:
       69        69    2               /* See if value fits in a short */
       70        70    2               if ((short) arg->a_a.a_offset == arg->a_a.a_offset) {
       71        71    3                  return ws;
       72        72    3               } else {
       73        73    3                  return 2*ws;
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    3               }
       75        75    2            case ARGINSTRLAB:
       76        76    2            case ARGOBJECT:
       77        77    2            case ARGPROC:
       78        78    2               return ps;  /* pointer size */
       79        79    2            case ARGSTRING:
       80        80    2               /* strings are partitioned into pieces */
       81        81    2               s = 0;
       82        82    2               for (argb = &arg->a_a.a_string; argb != (argb_p) 0;
       83        83    2                  argb = argb->ab_next) {
       84        84    3                  s += argb->ab_index;
       85        85    3               }
       86        86    2               return s;
       87        87    2            case ARGICN:
       88        88    2            case ARGUCN:
       89        89    2            case ARGFCN:
       90        90    2               return arg->a_a.a_con.ac_length;
       91        91    2            default:
       92        92    2               assert(FALSE);
       93        93    2            }
       94        94    1            /* NOTREACHED */
       95        95    1        }
       96        96
       97        97
       98        98             STATIC offset blocksize(pseudo,args)
       99        99              byte  pseudo;
      100       100              arg_p args;
      101       101             {
      102       102    1         /* Determine the number of bytes of a datablock */
      103       103    1
      104       104    1         arg_p arg;
      105       105    1         offset   sum;
      106       106    1
      107       107    1         switch(pseudo) {
      108       108    2            case DHOL:
      109       109    2            case DBSS:
      110       110    2            if (args->a_type != ARGOFF) {
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111    3               error("offset expected");
      112       112    3            }
      113       113    2            return args->a_a.a_offset;
      114       114    2            case DCON:
      115       115    2            case DROM:
      116       116    2            sum = 0;
      117       117    2            for (arg = args; arg != (arg_p) 0; arg = arg->a_next) {
      118       118    3               /* Add the sizes of all initializers */
      119       119    3               sum += argsize(arg);
      120       120    3            }
      121       121    2            return sum;
      122       122    2            default:
      123       123    2            assert(FALSE);
      124       124    2         }
      125       125    1         /* NOTREACHED */
      126       126    1        }
      127       127
      128       128
      129       129             STATIC arg_p copy_arg(arg)
      130       130              arg_p arg;
      131       131             {
      132       132    1         /* Copy one argument */
      133       133    1
      134       134    1         arg_p new;
      135       135    1
      136       136    1         assert(arg->a_type == ARGOFF);
      137       137    1         new = newarg(ARGOFF);
      138       138    1         new->a_a.a_offset = arg->a_a.a_offset;
      139       139    1         return new;
      140       140    1        }
      141       141
      142       142
      143       143
      144       144             STATIC arg_p copy_rom(args)
      145       145              arg_p args;
      146       146             {
      147       147    1         /* Make a copy of the values of a rom,
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    1          * provided that the rom contains only integer values,
      149       149    1          */
      150       150    1
      151       151    1         arg_p arg, arg2, argh;
      152       152    1
      153       153    1         for (arg = args; arg != (arg_p) 0; arg = arg->a_next) {
      154       154    2            if (arg->a_type != ARGOFF) {
      155       155    3               return (arg_p) 0;
      156       156    3            }
      157       157    2         }
      158       158    1         /* Now make the copy */
      159       159    1         arg2 = argh = copy_arg(args);
      160       160    1         for (arg = args->a_next; arg != (arg_p) 0; arg = arg->a_next) {
      161       161    2            arg2->a_next = copy_arg(arg);
      162       162    2            arg2 = arg2->a_next;
      163       163    2         }
      164       164    1         return argh;
      165       165    1        }
      166       166
      167       167
      168       168
      169       169             dblockdef(db,n,lnp)
      170       170              dblock_p db;
      171       171              int    n;
      172       172              line_p    lnp;
      173       173             {
      174       174    1         /* Process a data block defining occurrence */
      175       175    1
      176       176    1         byte m;
      177       177    1
      178       178    1         switch(n) {
      179       179    2            case ps_hol:
      180       180    2               m = DHOL;
      181       181    2               break;
      182       182    2            case ps_bss:
      183       183    2               m = DBSS;
      184       184    2               break;
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185    2            case ps_con:
      186       186    2               m = DCON;
      187       187    2               break;
      188       188    2            case ps_rom:
      189       189    2               m = DROM;
      190       190    2               break;
      191       191    2            default:
      192       192    2               assert(FALSE);
      193       193    2         }
      194       194    1         db->d_pseudo = m;
      195       195    1         db->d_size = blocksize(m, ARG(lnp));
      196       196    1         if (m == DROM) {
      197       197    2            /* We keep the values of a rom block in the data block
      198       198    2             * table if the values consist of integers only.
      199       199    2             */
      200       200    2            db->d_values = copy_rom(ARG(lnp));
      201       201    2         }
      202       202    1        }
      203       203
      204       204
      205       205
      206       206             /* combine */
      207       207
      208       208             combine(db,l1,l2,pseu)
      209       209              dblock_p db;
      210       210              line_p   l1,l2;
      211       211              byte pseu;
      212       212             {
      213       213    1         /* Combine two successive ROMs/CONs (without a data label
      214       214    1          * in between into a single ROM. E.g.:
      215       215    1          *    xyz
      216       216    1          *     rom 3,6,9,12
      217       217    1          *     rom 7,0,2
      218       218    1          * is changed into:
      219       219    1          *    xyz
      220       220    1          *     rom 3,6,9,12,7,0,2
      221       221    1          */
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      222       222    1
      223       223    1         arg_p v;
      224       224    1
      225       225    1         db->d_size += blocksize(pseu,ARG(l2));
      226       226    1         /* db is the data block that was already assigned to the
      227       227    1          * first rom/con. The second one is not assigned a new
      228       228    1          * data block of course, as the two are combined into
      229       229    1          * one instruction.
      230       230    1          */
      231       231    1         if (pseu == DROM && db->d_values != (arg_p) 0) {
      232       232    2            /* The values contained in a ROM are only copied
      233       233    2             * to the data block if they may be useful to us
      234       234    2             * (e.g. they certainly may not be strings). In our
      235       235    2             * case it means that both ROMs must have useful
      236       236    2             * arguments.
      237       237    2             */
      238       238    2            for (v = db->d_values; v->a_next != (arg_p) 0; v = v->a_next);
      239       239    2            /* The first rom contained useful arguments. v now points to
      240       240    2             * its last argument. Append the arguments of the second
      241       241    2             * rom to this list. If the second rom has arguments that are
      242       242    2             * not useful, throw away the entire list (we want to copy
      243       243    2             * everything or nothing).
      244       244    2             */
      245       245    2            if ((v->a_next = copy_rom(ARG(l2))) == (arg_p) 0) {
      246       246    3               oldargs(db->d_values);
      247       247    3               db->d_values = (arg_p) 0;
      248       248    3            }
      249       249    2         }
      250       250    1         for (v = ARG(l1); v->a_next != (arg_p) 0; v = v->a_next);
      251       251    1         /* combine the arguments of both instructions. */
      252       252    1         v->a_next = ARG(l2);
      253       253    1         ARG(l2) = (arg_p) 0;
      254       254    1        }
      255       255
      256       256
      257       257
      258       258             /* arglist */
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      259       259
      260       260             STATIC arg_string(length,abp)
      261       261              offset  length;
      262       262              register argb_p abp;
      263       263             {
      264       264    1
      265       265    1           abp->ab_next = (argb_p) 0 ;
      266       266    1         while (length--) {
      267       267    2            if (abp->ab_index == NARGBYTES)
      268       268    2        {         abp = abp->ab_next = newargb();
      269       269    3            abp->ab_next = (argb_p) 0 ; }
      270       270    2            abp->ab_contents[abp->ab_index++] = readchar();
      271       271    2         }
      272       272    1        }
      273       273
      274       274
      275       275             line_p arglist(n)
      276       276              int n;
      277       277             {
      278       278    1         line_p   lnp;
      279       279    1         register arg_p ap,*app;
      280       280    1         bool moretocome;
      281       281    1         offset length;
      282       282    1
      283       283    1
      284       284    1         /*
      285       285    1          * creates an arglist with n elements
      286       286    1          * if n == 0 the arglist is variable and terminated by sp_cend
      287       287    1          */
      288       288    1
      289       289    1         lnp = newline(OPLIST);
      290       290    1         app = &ARG(lnp);
      291       291    1         moretocome = TRUE;
      292       292    1         do {
      293       293    2            switch(table2()) {
      294       294    3            default:
      295       295    3               error("unknown byte in arglist");
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      296       296    3            case CSTX1:
      297       297    3               tabval2 = (offset) tabval;
      298       298    3            case CSTX2:
      299       299    3               *app = ap = newarg(ARGOFF);
      300       300    3           ap->a_next = (arg_p) 0 ;
      301       301    3               ap->a_a.a_offset = tabval2;
      302       302    3               app = &ap->a_next;
      303       303    3               break;
      304       304    3            case ILBX:
      305       305    3               *app = ap = newarg(ARGINSTRLAB);
      306       306    3           ap->a_next = (arg_p) 0 ;
      307       307    3               ap->a_a.a_instrlab = instr_lab((short) tabval);
      308       308    3               app = &ap->a_next;
      309       309    3               break;
      310       310    3            case DLBX:
      311       311    3               *app = ap = newarg(ARGOBJECT);
      312       312    3           ap->a_next = (arg_p) 0 ;
      313       313    3               ap->a_a.a_obj = object(string,(offset) 0, (offset) 0);
      314       314    3               /* The size of the object is unknown */
      315       315    3               app = &ap->a_next;
      316       316    3               break;
      317       317    3            case sp_pnam:
      318       318    3               *app = ap = newarg(ARGPROC);
      319       319    3           ap->a_next = (arg_p) 0 ;
      320       320    3               ap->a_a.a_proc = proclookup(string,OCCURRING);
      321       321    3               app = &ap->a_next;
      322       322    3               break;
      323       323    3            case VALX1:
      324       324    3               tabval2 = (offset) tabval;
      325       325    3            case VALX2:
      326       326    3               *app = ap = newarg(ARGOBJECT);
      327       327    3           ap->a_next = (arg_p) 0 ;
      328       328    3               ap->a_a.a_obj = object(string, tabval2, (offset) 0);
      329       329    3               app = &ap->a_next;
      330       330    3               break;
      331       331    3            case sp_scon:
      332       332    3               *app = ap = newarg(ARGSTRING);
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      333       333    3           ap->a_next = (arg_p) 0 ;
      334       334    3               length = get_off();
      335       335    3               arg_string(length,&ap->a_a.a_string);
      336       336    3               app = &ap->a_next;
      337       337    3               break;
      338       338    3            case sp_icon:
      339       339    3               *app = ap = newarg(ARGICN);
      340       340    3               goto casecon;
      341       341    3            case sp_ucon:
      342       342    3               *app = ap = newarg(ARGUCN);
      343       343    3               goto casecon;
      344       344    3            case sp_fcon:
      345       345    3               *app = ap = newarg(ARGFCN);
      346       346    3            casecon:
      347       347    3               length = get_int();
      348       348    3           ap->a_next = (arg_p) 0 ;
      349       349    3               ap->a_a.a_con.ac_length = (short) length;
      350       350    3               arg_string(get_off(),&ap->a_a.a_con.ac_con);
      351       351    3               app = &ap->a_next;
      352       352    3               break;
      353       353    3            case sp_cend:
      354       354    3               moretocome = FALSE;
      355       355    3            }
      356       356    2            if (n && (--n) == 0)
      357       357    2               moretocome = FALSE;
      358       358    2         } while (moretocome);
      359       359    1         return(lnp);
      360       360    1        }
      361       361
      362       362
      363       363
      364       364             /* is_datalabel */
      365       365
      366       366             bool is_datalabel(l)
      367       367              line_p l;
      368       368             {
      369       369    1         VL(l);
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      370       370    1         return (l->l_instr == (byte) ps_sym);
      371       371    1        }
      372       372
      373       373
      374       374
      375       375             /* block_of_lab */
      376       376
      377       377             dblock_p block_of_lab(ident)
      378       378              char *ident;
      379       379             {
      380       380    1         dblock_p dbl;
      381       381    1
      382       382    1         /* Find the datablock with the given name.
      383       383    1          * Used for defining occurrences.
      384       384    1          */
      385       385    1
      386       386    1         dbl = symlookup(ident,DEFINING);
      387       387    1         VD(dbl);
      388       388    1         if (dbl->d_pseudo != DUNKNOWN) {
      389       389    2            error("identifier redeclared");
      390       390    2         }
      391       391    1         return dbl;
      392       392    1        }
      393       393
      394       394
      395       395
      396       396             /* object */
      397       397
      398       398             STATIC obj_p make_object(dbl,off,size)
      399       399              dblock_p dbl;
      400       400              offset   off;
      401       401              offset   size;
      402       402             {
      403       403    1         /* Allocate an obj struct with the given attributes
      404       404    1          * (if it did not exist already).
      405       405    1          * Return a pointer to the found or newly created object struct.
      406       406    1          */
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      407       407    1
      408       408    1         obj_p obj, prev, new;
      409       409    1
      410       410    1         /* See if the object was already present in the object list
      411       411    1          *  of the given datablock. If it is not yet present, find
      412       412    1          * the right place to insert the new object. Note that
      413       413    1          * the objects are sorted by offset.
      414       414    1          */
      415       415    1         prev = (obj_p) 0;
      416       416    1         for (obj = dbl->d_objlist; obj != (obj_p) 0; obj = obj->o_next) {
      417       417    2            if (obj->o_off >= off) {
      418       418    3               break;
      419       419    3            }
      420       420    2            prev = obj;
      421       421    2         }
      422       422    1         /* Note that the data block may contain several objects
      423       423    1          * with the required offset; we also want the size to
      424       424    1          * be the right one.
      425       425    1          */
      426       426    1         while (obj != (obj_p) 0 && obj->o_off == off) {
      427       427    2            if (obj->o_size == UNKNOWN_SIZE) {
      428       428    3               obj->o_size = size;
      429       429    3               return obj;
      430       430    3            } else {
      431       431    3               if (size == UNKNOWN_SIZE || obj->o_size == size) {
      432       432    4                  return obj;
      433       433    4                  /* This is the right one */
      434       434    4               } else {
      435       435    4                  prev = obj;
      436       436    4                  obj = obj->o_next;
      437       437    4               }
      438       438    3            }
      439       439    2         }
      440       440    1         /* Allocate a new object */
      441       441    1         new = newobject();
      442       442    1         new->o_id     = ++lastoid; /* create a unique object id */
      443       443    1         new->o_off    = off;
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      444       444    1         new->o_size   = size;
      445       445    1         new->o_dblock = dbl;
      446       446    1         /* Insert the new object */
      447       447    1         if (prev == (obj_p) 0) {
      448       448    2            dbl->d_objlist = new;
      449       449    2         } else {
      450       450    2            prev->o_next = new;
      451       451    2         }
      452       452    1         new->o_next = obj;
      453       453    1         return new;
      454       454    1        }
      455       455
      456       456
      457       457
      458       458             obj_p object(ident,off,size)
      459       459              char *ident;
      460       460              offset off;
      461       461              offset size;
      462       462             {
      463       463    1         dblock_p dbl;
      464       464    1
      465       465    1         /* Create an object struct (if it did not yet exist)
      466       466    1          * for the object with the given size and offset
      467       467    1          * within the datablock of the given name.
      468       468    1          */
      469       469    1
      470       470    1         dbl = (ident == (char *) 0 ? curhol : symlookup(ident, OCCURRING));
      471       471    1         VD(dbl);
      472       472    1         return(make_object(dbl,off,size));
      473       473    1        }
      474       474
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$ic_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=14 
   zbe$aux:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   zbe$ic:h.:ZBC3TOU. is referenced
   zbe$ic_io:h.:ZBC3TOU. is referenced
   zbe$ic_lookup:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$ic_aux:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$ic_aux:c.:ZBC3TSI
