

CC.C03    File=zbe$cs_getent:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cs_getent.c,v 1.4 87/03/17 11:12:09 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             #include "em_mnem:h"
        7         7             #include "types:h"
        8         8             #include "aux:h"
        9         9             #include "debug:h"
       10        10             #include "global:h"
       11        11             #include "cs:h"
       12        12             #include "cs_aux:h"
       13        13             #include "cs_entity:h"
       14        14             #include "cs_stack:h"
       15        15
       16        16             #define WS1  0
       17        17             #define WS2  1
       18        18             #define PS   2
       19        19             #define ARGW 3
       20        20             #define ARDESC3 4
       21        21
       22        22             STATIC struct inf_entity {
       23        23    1         byte  inf_instr;  /* Key.           */
       24        24    1         byte  inf_used;   /* Kind of entity used by key.   */
       25        25    1         byte  inf_size;   /* Indication of the size. */
       26        26    1        } inf_table[] = {
       27        27    1         op_adp,  ENAOFFSETTED,  PS,
       28        28    1         op_dee,  ENEXTERNAL, WS1,
       29        29    1         op_del,  ENLOCAL, WS1,
       30        30    1         op_ine,  ENEXTERNAL, WS1,
       31        31    1         op_inl,  ENLOCAL, WS1,
       32        32    1         op_lae,  ENAEXTERNAL,   PS,
       33        33    1         op_lal,  ENALOCAL,   PS,
       34        34    1         op_lar,  ENARRELEM,  ARDESC3,
       35        35    1         op_ldc,  ENCONST, WS2,
       36        36    1         op_lde,  ENEXTERNAL, WS2,
CC.C03    File=zbe$cs_getent:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=2  
       37        37    1         op_ldf,  ENOFFSETTED,   WS2,
       38        38    1         op_ldl,  ENLOCAL, WS2,
       39        39    1         op_lil,  ENINDIR, WS1,
       40        40    1         op_lim,  ENIGNMASK,  WS1,
       41        41    1         op_loc,  ENCONST, WS1,
       42        42    1         op_loe,  ENEXTERNAL, WS1,
       43        43    1         op_lof,  ENOFFSETTED,   WS1,
       44        44    1         op_loi,  ENINDIR, ARGW,
       45        45    1         op_lol,  ENLOCAL, WS1,
       46        46    1         op_lpi,  ENPROC,     PS,
       47        47    1         op_lxa,  ENAARGBASE, PS,
       48        48    1         op_lxl,  ENALOCBASE, PS,
       49        49    1         op_sar,  ENARRELEM,  ARDESC3,
       50        50    1         op_sde,  ENEXTERNAL, WS2,
       51        51    1         op_sdf,  ENOFFSETTED,   WS2,
       52        52    1         op_sdl,  ENLOCAL, WS2,
       53        53    1         op_sil,  ENINDIR, WS1,
       54        54    1         op_ste,  ENEXTERNAL,    WS1,
       55        55    1         op_stf,  ENOFFSETTED,   WS1,
       56        56    1         op_sti,  ENINDIR, ARGW,
       57        57    1         op_stl,  ENLOCAL, WS1,
       58        58    1         op_zer,  ENCONST, ARGW,
       59        59    1         op_zre,  ENEXTERNAL, WS1,
       60        60    1         op_zrf,  ENFZER,     ARGW,
       61        61    1         op_zrl,  ENLOCAL, WS1,
       62        62    1         op_nop   /* Delimitor. */
       63        63    1        };
       64        64
       65        65             #define INFKEY(ip) (ip->inf_instr & BMASK)
       66        66             #define ENKIND(ip) ip->inf_used
       67        67             #define SIZEINF(ip)   ip->inf_size
       68        68
       69        69             STATIC struct inf_entity *getinf(n)
       70        70              int n;
       71        71             {
       72        72    1         struct inf_entity *ip;
       73        73    1
CC.C03    File=zbe$cs_getent:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=3  
       74        74    1         for (ip = &inf_table[0]; INFKEY(ip) != op_nop; ip++) {
       75        75    2            if (INFKEY(ip) == n) return ip;
       76        76    2         }
       77        77    1         return (struct inf_entity *) 0;
       78        78    1        }
       79        79
       80        80             entity_p getentity(lnp, l_out)
       81        81              line_p lnp, *l_out;
       82        82             {
       83        83    1         /* Build the entities where lnp refers to, and enter them.
       84        84    1          * If a token needs to be popped, the first line that pushed
       85        85    1          * it is stored in *l_out.
       86        86    1          * The main entity lnp refers to, is returned.
       87        87    1          */
       88        88    1         struct entity en;
       89        89    1         struct token tk;
       90        90    1         struct inf_entity *ip;
       91        91    1         valnum vn;
       92        92    1         offset indexsize;
       93        93    1         struct token adesc, index, arbase;
       94        94    1
       95        95    1         *l_out = lnp;
       96        96    1
       97        97    1         /* Lor is a special case. */
       98        98    1         if (INSTR(lnp) == op_lor) {
       99        99    2            offset off = off_set(lnp);
      100       100    2
      101       101    2            en.en_static = FALSE;
      102       102    2            en.en_size = ps;
      103       103    2            switch ((int) off == off ? (int) off : 3) {
      104       104    3               default:
      105       105    3                  assert(FALSE);
      106       106    3                  break;
      107       107    3               case 0:
      108       108    3                  en.en_kind = ENLOCBASE;
      109       109    3                  break;
      110       110    3               case 1:
CC.C03    File=zbe$cs_getent:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=4  
      111       111    3                  return (entity_p) 0;
      112       112    3               case 2:
      113       113    3                  en.en_kind = ENHEAPPTR;
      114       114    3                  break;
      115       115    3            }
      116       116    2            return en_enter(&en);
      117       117    2         }
      118       118    1
      119       119    1         if ( (ip = getinf(INSTR(lnp))) == (struct inf_entity *) 0)
      120       120    1            return (entity_p) 0; /* It does not refer to any entity. */
      121       121    1
      122       122    1         /* Lil and sil refer to two entities. */
      123       123    1         if (INSTR(lnp) == op_lil || INSTR(lnp) == op_sil) {
      124       124    2            en.en_static = FALSE;
      125       125    2            en.en_kind = ENLOCAL;
      126       126    2            en.en_size = ps; /* Local must be a pointer. */
      127       127    2            en.en_loc = off_set(lnp);
      128       128    2            vn = en_enter(&en)->en_vn;
      129       129    2         }
      130       130    1
      131       131    1         en.en_static = FALSE;
      132       132    1         en.en_kind = ENKIND(ip);
      133       133    1
      134       134    1         /* Fill in the size of the entity. */
      135       135    1         switch (SIZEINF(ip)) {
      136       136    2            default:
      137       137    2               assert(FALSE);
      138       138    2               break;
      139       139    2            case WS1:
      140       140    2               en.en_size = ws;
      141       141    2               break;
      142       142    2            case WS2:
      143       143    2               en.en_size = 2*ws;
      144       144    2               break;
      145       145    2            case PS:
      146       146    2               en.en_size = ps;
      147       147    2               break;
CC.C03    File=zbe$cs_getent:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=5  
      148       148    2            case ARGW:
      149       149    2               if (TYPE(lnp) != OPNO) {
      150       150    3                  en.en_size = off_set(lnp);
      151       151    3               } else {
      152       152    3                  Pop(&tk, (offset) ws);
      153       153    3                  *l_out = tk.tk_lfirst;
      154       154    3                  en.en_size = UNKNOWN_SIZE;
      155       155    3               }
      156       156    2               break;
      157       157    2            case ARDESC3:
      158       158    2               assert(en.en_kind == ENARRELEM);
      159       159    2               if (TYPE(lnp) != OPNO) {
      160       160    3                  indexsize = off_set(lnp);
      161       161    3               } else {
      162       162    3                  Pop(&tk, (offset) ws);
      163       163    3                  indexsize = UNKNOWN_SIZE;
      164       164    3               }
      165       165    2               Pop(&adesc, (offset) ps);
      166       166    2               en.en_adesc = adesc.tk_vn;
      167       167    2               Pop(&index, indexsize);
      168       168    2               en.en_index = index.tk_vn;
      169       169    2               Pop(&arbase, (offset) ps);
      170       170    2               en.en_arbase = arbase.tk_vn;
      171       171    2               *l_out = arbase.tk_lfirst;
      172       172    2               en.en_size = array_elemsize(adesc.tk_vn);
      173       173    2               break;
      174       174    2         }
      175       175    1
      176       176    1         /* Fill in additional information. */
      177       177    1         switch (en.en_kind) {
      178       178    2            case ENFZER:
      179       179    2               en.en_static = TRUE;
      180       180    2               break;
      181       181    2            case ENCONST:
      182       182    2               en.en_static = TRUE;
      183       183    2               en.en_val = off_set(lnp);
      184       184    2               break;
CC.C03    File=zbe$cs_getent:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=6  
      185       185    2            case ENALOCAL:
      186       186    2               en.en_static = TRUE;
      187       187    2            case ENLOCAL:
      188       188    2               en.en_loc = off_set(lnp);
      189       189    2               break;
      190       190    2            case ENAEXTERNAL:
      191       191    2               en.en_static = TRUE;
      192       192    2            case ENEXTERNAL:
      193       193    2               en.en_ext = OBJ(lnp);
      194       194    2               break;
      195       195    2            case ENINDIR:
      196       196    2               if (INSTR(lnp) == op_loi || INSTR(lnp) == op_sti) {
      197       197    3                  Pop(&tk, (offset) ps);
      198       198    3                  *l_out = tk.tk_lfirst;
      199       199    3                  vn = tk.tk_vn;
      200       200    3               }
      201       201    2               en.en_ind = vn;
      202       202    2               break;
      203       203    2            case ENAOFFSETTED:
      204       204    2               en.en_static = TRUE;
      205       205    2            case ENOFFSETTED:
      206       206    2               Pop(&tk, (offset) ps);
      207       207    2               *l_out = tk.tk_lfirst;
      208       208    2               en.en_base = tk.tk_vn;
      209       209    2               en.en_off = off_set(lnp);
      210       210    2               break;
      211       211    2            case ENALOCBASE:
      212       212    2            case ENAARGBASE:
      213       213    2               en.en_static = TRUE;
      214       214    2               en.en_levels = off_set(lnp);
      215       215    2               break;
      216       216    2            case ENPROC:
      217       217    2               en.en_pro = PROC(lnp);
      218       218    2               break;
      219       219    2            case ENARRELEM:
      220       220    2               /* We gathered the information in the previous switch.
      221       221    2                */
CC.C03    File=zbe$cs_getent:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=7  
      222       222    2               break;
      223       223    2         }
      224       224    1
      225       225    1         return en_enter(&en);
      226       226    1        }
      227       227
---  Include file information  ---

   em_mnem:h.:ZBC3TOU. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$cs:h.:ZBC3TOU. is referenced
   zbe$cs_aux:h.:ZBC3TOU. is referenced
   zbe$cs_entity:h.:ZBC3TOU. is referenced
   zbe$cs_stack:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$cs_getent:c.:ZBC3TSI
