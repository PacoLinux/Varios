

13:08 AUG 20 '97 zbk$cg_tree:h.:ZBC3TSI                                    1    
    1      typedef struct EXPR_struct {
    2         struct EXPR_struct *next;
    3         int        opcode;
    4         char      *argstr;
    5         long       argval;
    6         long       n;     /* cii...: from/to lens;  cal,cai: nr args */
    7         int        xr;    /* for addressing nodes only */
    8         int        pr;    /* for addressing nodes only */
    9         int        xtype; /* for addressing nodes only */
   10         int        reg;   /* for op_reg only */
   11         struct EXPR_struct *lf, *rt, *third;
   12         struct EXPR_struct *xec_chain;
   13         int        number;
   14      } *EXPR;
   15      #define init_EXPR  {0,0,0,0,0,0,0,0,0,0,0,0,0,0}
   16
   17      #define ADR        EXPR
   18      #define ADR_struct EXPR_struct
   19      #define init_ADR   {0,0,0,0,0,0,0,0,0,0,0,0,0,0}
   20
   21      /* special cases of em nodes ---
   22         example node:      represents em:
   23         -------------      --------------
   24         cif  ,14 (valu)    [valu]; loc 1; loc 4; cif;
   25         cal f,2  (args)    [args]; lae args; loc 2; cal f;
   26         cai  ,2  (args,f)  [args]; lae args; loc 2; lae f; cai;
   27         ret 4    (valu)    [valu]; ret 4;
   28      */
   29
   30      /*   TO BE REMOVED !!
   31      typedef struct ADR_struct {
   32         struct ADR_struct *next;
   33         int    class;   => opcode
   34         char  *symbol;  => argstr
   35         long   offset;  => argval
   36         int    xr;
   37         int    pr;
13:08 AUG 20 '97 zbk$cg_tree:h.:ZBC3TSI                                    2    
   38         long   conval;  => argval
   39         int    xtype;
   40         struct ADR_struct *litadr; => lf
   41         int        number;
   42      } *ADR;
   43      static ADR_struct init_ADR = {0,0,0,0,0,0,0,0,0,0};
   44      */
   45
   46      struct  VAR_TBL {
   47         char  *sym;
   48         long   ofs;
   49         int    depth;
   50         int    align;
   51      };
   52
   53
   54      /* addessing nodes ---
   55
   56      node:       op_adr  "argstr"+argval,xr,pr
   57      inst adr:      ...  "argstr"+argval,xr,pr     [as in LDQ var-3,x2,p2]
   58
   59      node:       op_con     argval
   60      inst_adr:      ...    =argval                 [as in LDQ =0111222333444]
   61                     or     argval,DL               [as in LDQ 070,DL]
   62                     or     argval,DU               [as in LDQ 070,DU]
   63
   64      node:       op_abs    argval,xr
   65      inst_adr:      ...    argval,xr               [as in QRL 18 or QLS 1,x3]
   66
   67      node:       op_lit    "@I_n_lits"+ofs  (lf*)
   68      inst_adr:      ...    ="argstr"+argval        [as in LDA   lits+4  [=var+5] ]
   69                     or     =argval                 [as in EPPR1 lits+12 [=000003000000] ]
   70            (lf*:) note: "op_lit.lf" points to either "op_adr" or "op_con" node.
   71      */
   72
   73
   74      /* values for "em_op_info[]" ... */
13:08 AUG 20 '97 zbk$cg_tree:h.:ZBC3TSI                                    3    
   75      #define OP_FLAG_UNUSED   02000
   76      #define OP_FLAG_LOCAL    01000
   77      #define OP_FLAG_KILL     00400
   78      #define OP_FLAG_KILL_ALL 00200
   79      #define OP_FLAG_LEAF     00100
   80      #define OP_FLAG_SPEC     00040
   81      #define OP_FLAG_XEC      00020
   82      #define OP_FLAG_LFARG    00010
   83      #define OP_FLAG_RTARG    00004
   84      #define OP_FLAG_THIRDARG 00002
   85      #define OP_FLAG_RESULT   00001
   86
   87      /* values for "debug" flag bits ... */
   88      #define DB_EM            00001
   89      #define DB_TREE          00002
   90      #define DB_XEC           00004
   91      #define DB_LO            00010
   92      #define DB_OU            00020
   93      #define DB_OUTCALLS      00040
   94      #define DB_HDR    (DB_TREE | DB_XEC | DB_LO | DB_OUTCALLS)
   95

