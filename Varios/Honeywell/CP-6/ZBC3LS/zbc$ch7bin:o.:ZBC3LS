

CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: ch7bin.c,v 3.14 87/03/25 22:44:13 ceriel Exp $ */
        6         6             /* SEMANTIC ANALYSIS (CHAPTER 7RM)  --  BINARY OPERATORS */
        7         7
        8         8             #include "botch_free:h"
        9         9             #include <alloc:h>
       10        10             #include "nofloat:h"
       11        11             #include "idf:h"
       12        12             #include "arith:h"
       13        13             #include "type:h"
       14        14             #include "struct:h"
       15        15             #include "label:h"
       16        16             #include "expr:h"
       17        17             #include "Lpars:h"
       18        18             #include "noRoption:h"
       19        19             #include "zb_target.h"
       20        20             #include "specials.h"
       21        21
       22        22             extern char options[];
       23        23             extern char *symbol2str();
       24        24
       25        25             /*  This chapter asks for the repeated application of code to handle
       26        26              an operation that may be executed at compile time or at run time,
       27        27              depending on the constancy of the operands.
       28        28             */
       29        29
       30        30             #define commutative_binop(expp, oper, expr)   mk_binop(expp, oper, expr, 1)
       31        31             #define non_commutative_binop(expp, oper, expr)  mk_binop(expp, oper, expr, 0)

       32        32
       33        33             ch7bin(expp, oper, expr)
       34        34              register struct expr **expp;
       35        35              struct expr *expr;
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       36        36             {
       37        37    1         /* apply binary operator oper between *expp and expr.
       38        38    1            NB: don't swap operands if op is one of the op= operators!!!
       39        39    1         */
       40        40    1         if (oper != PARCOMMA)  {
       41        41    2            any2opnd(expp, oper);
       42        42    2            if (oper != '(' && oper != ',') any2opnd(&expr, oper);
       43        43    2         }
       44        44    1         switch (oper)  {
       45        45    2            int fund;
       46        46    2         case '[':            /* RM 7.1 */
       47        47    2            /* RM 14.3 states that indexing follows the commutative laws */
       48        48    2            switch ((*expp)->ex_type->tp_fund)  {
       49        49    3            case POINTER:
       50        50    3            case ARRAY:
       51        51    3               break;
       52        52    3            case ERRONEOUS:
       53        53    3               return;
       54        54    3            default:    /* unindexable */
       55        55    3               switch (expr->ex_type->tp_fund)  {
       56        56    4               case POINTER:
       57        57    4               case ARRAY:
       58        58    4                  break;
       59        59    4               case ERRONEOUS:
       60        60    4                  return;
       61        61    4               default:
       62        62    4                  expr_error(*expp,
       63        63    4                     "indexing an object of type %s",
       64        64    4                     symbol2str((*expp)->ex_type->tp_fund));
       65        65    4                  return;
       66        66    4               }
       67        67    3               break;
       68        68    3            }
       69        69    2            ch7bin(expp, '+', expr);
       70        70    2            ch7mon('*', expp);
       71        71    2            break;
       72        72    2         case '(':            /* RM 7.1 */
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       73        73    2            if ( (*expp)->ex_type->tp_fund == FUNCTION ) {
       74        74    3            struct expr *ex = *expp;
       75        75    3            int bi = ex->ex_class == Value && ex->VL_CLASS == Name &&
       76        76    3                     (ex->VL_IDF->id_special > 63)? ex->VL_IDF->id_special : 0;
       77        77    3            int mbi =  (bi >= SP_ATAN && bi <= SP_ABS) &&
       78        78    3                       (is_fp_cst(expr) || is_cp_cst(expr));
       79        79    3
       80        80    3            if (bi && (bi == SP_ATAN2 || bi == SP_POW))
       81        81    3              mbi = expr->ex_class == Oper && PARCOMMA == expr->OP_OPER     &&
       82        82    3                    (is_fp_cst(expr->OP_LEFT)  || is_cp_cst(expr->OP_LEFT)) &&
       83        83    3                    (is_fp_cst(expr->OP_RIGHT) || is_cp_cst(expr->OP_RIGHT));
       84        84    3
       85        85    3            if (mbi) {
       86        86    4              if (cstfunc(expp, bi, expr))
       87        87    4                break;
       88        88    4            }
       89        89    3          }
       90        90    2            if (  (*expp)->ex_type->tp_fund == POINTER &&
       91        91    2               (*expp)->ex_type->tp_up->tp_fund == FUNCTION
       92        92    2            )  {
       93        93    3        #ifndef NOROPTION
       94        94    3               if (options['R'])
       95        95    3                  warning("function pointer called");
       96        96    3        #endif NOROPTION
       97        97    3               ch7mon('*', expp);
       98        98    3            }
       99        99    2            if ((*expp)->ex_type->tp_fund != FUNCTION)   {
      100       100    3               expr_error(*expp, "call of non-function (%s)",
      101       101    3                  symbol2str((*expp)->ex_type->tp_fund));
      102       102    3               /* leave the expression; it may still serve */
      103       103    3               free_expression(expr);  /* there go the parameters */
      104       104    3            }
      105       105    2            else
      106       106    2               *expp = new_oper((*expp)->ex_type->tp_up,
      107       107    2                     *expp, '(', expr);
      108       108    2            (*expp)->ex_flags |= EX_SIDEEFFECTS;
      109       109    2            if ((*expp)->ex_type->tp_fund == FLOAT)   {
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      110       110    3               (*expp)->ex_type = double_type;
      111       111    3               float2float( expp, float_type);
      112       112    3               }
      113       113    2            break;
      114       114    2         case PARCOMMA:          /* RM 7.1 */
      115       115    2            if ((*expp)->ex_type->tp_fund == FUNCTION)
      116       116    2               function2pointer(*expp);
      117       117    2            *expp = new_oper(expr->ex_type, *expp, PARCOMMA, expr);
      118       118    2            break;
      119       119    2         case '%':
      120       120    2         case MODAB:
      121       121    2         case ANDAB:
      122       122    2         case XORAB:
      123       123    2         case ORAB:
      124       124    2            opnd2integral(expp, oper);
      125       125    2            opnd2integral(&expr, oper);
      126       126    2            /* Fall through */
      127       127    2         case '/':
      128       128    2         case DIVAB:
      129       129    2         case TIMESAB:
      130       130    2            fund = arithbalance(expp, oper, &expr);
      131       131    2            non_commutative_binop(expp, oper, expr);
      132       132    2            break;
      133       133    2         case '&':
      134       134    2         case '^':
      135       135    2         case '|':
      136       136    2            opnd2integral(expp, oper);
      137       137    2            opnd2integral(&expr, oper);
      138       138    2            /* Fall through */
      139       139    2         case '*':
      140       140    2            fund = arithbalance(expp, oper, &expr);
      141       141    2            commutative_binop(expp, oper, expr);
      142       142    2            break;
      143       143    2         case '+':
      144       144    2            if (expr->ex_type->tp_fund == POINTER) { /* swap operands */
      145       145    3               struct expr *etmp = expr;
      146       146    3               expr = *expp;
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      147       147    3               *expp = etmp;
      148       148    3            }
      149       149    2            /*FALLTHROUGH*/
      150       150    2         case PLUSAB:
      151       151    2         case POSTINCR:
      152       152    2         case PLUSPLUS:
      153       153    2            if ((*expp)->ex_type->tp_fund == POINTER) {
      154       154    3               pointer_arithmetic(expp, oper, &expr);
      155       155    3               if (expr->ex_type->tp_size != (*expp)->ex_type->tp_size)
      156       156    3                  ch7cast(&expr, CAST, (*expp)->ex_type);
      157       157    3               pointer_binary(expp, oper, expr);
      158       158    3            }
      159       159    2            else  {
      160       160    3               fund = arithbalance(expp, oper, &expr);
      161       161    3               if (oper == '+')
      162       162    3                  commutative_binop(expp, oper, expr);
      163       163    3               else
      164       164    3                  non_commutative_binop(expp, oper, expr);
      165       165    3            }
      166       166    2            break;
      167       167    2         case '-':
      168       168    2         case MINAB:
      169       169    2         case POSTDECR:
      170       170    2         case MINMIN:
      171       171    2            if ((*expp)->ex_type->tp_fund == POINTER) {
      172       172    3               if (expr->ex_type->tp_fund == POINTER)
      173       173    3                  pntminuspnt(expp, oper, expr);
      174       174    3               else {
      175       175    4                  pointer_arithmetic(expp, oper, &expr);
      176       176    4                  pointer_binary(expp, oper, expr);
      177       177    4               }
      178       178    3            }
      179       179    2            else  {
      180       180    3               fund = arithbalance(expp, oper, &expr);
      181       181    3               non_commutative_binop(expp, oper, expr);
      182       182    3            }
      183       183    2            break;
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      184       184    2         case LEFT:
      185       185    2         case RIGHT:
      186       186    2         case LEFTAB:
      187       187    2         case RIGHTAB:
      188       188    2            opnd2integral(expp, oper);
      189       189    2            opnd2integral(&expr, oper);
      190       190    2            fund = arithbalance(expp, oper, &expr); /* ch. 7.5 */
      191       191    2            ch7cast(&expr, oper, int_type); /* cvt. rightop to int */
      192       192    2            if (expr->ex_class == Value && expr->VL_CLASS == Const) {
      193       193    3               int v = expr->VL_VALUE;
      194       194    3               if (v < 0 || v > 36)
      195       195    3                  expr_warning(expr, "shift by more than bits in type");
      196       196    3               }
      197       197    2            non_commutative_binop(expp, oper, expr);
      198       198    2            break;
      199       199    2         case '<':
      200       200    2         case '>':
      201       201    2         case LESSEQ:
      202       202    2         case GREATEREQ:
      203       203    2         case EQUAL:
      204       204    2         case NOTEQUAL:
      205       205    2            warn_compares(*expp, expr, oper);
      206       206    2            relbalance(expp, oper, &expr);
      207       207    2            non_commutative_binop(expp, oper, expr);
      208       208    2            (*expp)->ex_type = int_type;
      209       209    2            break;
      210       210    2         case AND:
      211       211    2         case OR:
      212       212    2            opnd2test(expp, oper);
      213       213    2            opnd2test(&expr, oper);
      214       214    2            if (is_cp_cst(*expp))   {
      215       215    3               register struct expr *ex = *expp;
      216       216    3
      217       217    3               /* the following condition is a short-hand for
      218       218    3                  ((oper == AND) && o1) || ((oper == OR) && !o1)
      219       219    3                  where o1 == (*expp)->VL_VALUE;
      220       220    3                  and ((oper == AND) || (oper == OR))
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      221       221    3               */
      222       222    3               if ((oper == AND) == (ex->VL_VALUE != (arith)0))
      223       223    3                  *expp = expr;
      224       224    3               else {
      225       225    4                  ex->ex_flags |= expr->ex_flags;
      226       226    4                  free_expression(expr);
      227       227    4                  *expp = intexpr((arith)((oper == AND) ? 0 : 1),
      228       228    4                        INT);
      229       229    4               }
      230       230    3               (*expp)->ex_flags |= ex->ex_flags;
      231       231    3               free_expression(ex);
      232       232    3            }
      233       233    2            else
      234       234    2            if (is_cp_cst(expr)) {
      235       235    3               /* Note!!!: the following condition is a short-hand for
      236       236    3                  ((oper == AND) && o2) || ((oper == OR) && !o2)
      237       237    3                  where o2 == expr->VL_VALUE
      238       238    3                  and ((oper == AND) || (oper == OR))
      239       239    3               */
      240       240    3               if ((oper == AND) == (expr->VL_VALUE != (arith)0)) {
      241       241    4                  (*expp)->ex_flags |= expr->ex_flags;
      242       242    4                  free_expression(expr);
      243       243    4               }
      244       244    3               else {
      245       245    4                  if (oper == OR)
      246       246    4                     expr->VL_VALUE = (arith)1;
      247       247    4                  ch7bin(expp, ',', expr);
      248       248    4               }
      249       249    3            }
      250       250    2            else
      251       251    2               *expp = new_oper(int_type, *expp, oper, expr);
      252       252    2            (*expp)->ex_flags |= EX_LOGICAL;
      253       253    2            break;
      254       254    2         case ':':
      255       255    2            if (  is_struct_or_union((*expp)->ex_type->tp_fund)
      256       256    2            || is_struct_or_union(expr->ex_type->tp_fund)
      257       257    2            )  {
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      258       258    3               if ((*expp)->ex_type != expr->ex_type)
      259       259    3                  expr_error(*expp, "illegal balance");
      260       260    3            }
      261       261    2            else
      262       262    2               if ((*expp)->ex_type->tp_fund!=VOID || expr->ex_type->tp_fund!=VOID)
      263       263    2                  relbalance(expp, oper, &expr);
      264       264    2            *expp = new_oper((*expp)->ex_type, *expp, oper, expr);
      265       265    2            break;
      266       266    2         case '?':
      267       267    2            opnd2logical(expp, oper);
      268       268    2            if (is_cp_cst(*expp))
      269       269    2               *expp = (*expp)->VL_VALUE ?
      270       270    2                  expr->OP_LEFT : expr->OP_RIGHT;
      271       271    2            else
      272       272    2               *expp = new_oper(expr->ex_type, *expp, oper, expr);
      273       273    2            break;
      274       274    2         case ',':
      275       275    2            if (ARRAY == expr->ex_type->tp_fund)
      276       276    2               any2opnd(&expr, oper);
      277       277    2            if (is_cp_cst(*expp))
      278       278    2               *expp = expr;
      279       279    2            else
      280       280    2               *expp = new_oper(expr->ex_type, *expp, oper, expr);
      281       281    2            (*expp)->ex_flags |= EX_COMMA;
      282       282    2            break;
      283       283    2         }
      284       284    1        }
      285       285
      286       286             pntminuspnt(expp, oper, expr)
      287       287              register struct expr **expp, *expr;
      288       288             {
      289       289    1         /* Subtracting two pointers is so complicated it merits a
      290       290    1            routine of its own.
      291       291    1         */
      292       292    1         struct type *up_type = (*expp)->ex_type->tp_up;
      293       293    1
      294       294    1         if (!is_type_compatible( up_type, expr->ex_type->tp_up) )   {
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      295       295    2            expr_error(*expp, "subtracting incompatible pointers");
      296       296    2            free_expression(expr);
      297       297    2            erroneous2int(expp);
      298       298    2            return;
      299       299    2         }
      300       300    1         /* we hope the optimizer will eliminate the load-time
      301       301    1            pointer subtraction
      302       302    1         */
      303       303    1         *expp = new_oper((*expp)->ex_type, *expp, oper, expr);
      304       304    1         (*expp)->ex_type = pa_type;   /* brute force say its pa_type! */
      305       305    1         ch7bin(expp, '/',
      306       306    1            intexpr(size_of_type(up_type, "object"), pa_type->tp_fund));
      307       307    1         ch7cast(expp, CAST, int_type);   /* result will be an integer expr */
      308       308    1        }
      309       309
      310       310             mk_binop(expp, oper, expr, commutative)
      311       311              struct expr **expp;
      312       312              register struct expr *expr;
      313       313             {
      314       314    1         /* Constructs in *expp the operation indicated by the operands.
      315       315    1            "commutative" indicates wether "oper" is a commutative
      316       316    1            operator.
      317       317    1         */
      318       318    1         register struct expr *ex = *expp;
      319       319    1         register int const_expr = (is_cp_cst(expr) && is_cp_cst(ex)) ||
      320       320    1        #ifdef FLOATOPT
      321       321    1                                   (is_fp_cst(expr) && is_fp_cst(ex));
      322       322    1        #else
      323       323   *S*                                  0;
      324       324   *S*       #endif
      325       325    1         register int fp  = expr->ex_class == Float;
      326       326    1         register int div_zero = const_expr && (oper=='/' || oper=='%') &&
      327       327    1                                 (fp ? expr->FL_VALUE==0 : expr->VL_VALUE==0);
      328       328    1
      329       329    1         if (const_expr && !div_zero)
      330       330    1        #ifdef FLOATOPT
      331       331    1            if (fp)
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      332       332    1               cstfpbin(expp, oper, expr);
      333       333    1            else
      334       334    1        #endif
      335       335    1            cstbin(expp, oper, expr);
      336       336    1         else  {
      337       337    2            if (div_zero)
      338       338    2               expr_warning(expr,"possible division by zero");
      339       339    2            *expp = (commutative && expr->ex_depth >= ex->ex_depth) ?
      340       340    2                  new_oper(ex->ex_type, expr, oper, ex) :
      341       341    2                  new_oper(ex->ex_type, ex, oper, expr);
      342       342    2         }
      343       343    1        }
      344       344
      345       345             pointer_arithmetic(expp1, oper, expp2)
      346       346              register struct expr **expp1, **expp2;
      347       347             {
      348       348    1         /* prepares the integral expression expp2 in order to
      349       349    1            apply it to the pointer expression expp1
      350       350    1         */
      351       351    1          unsigned shift = (zb_target_sys == TARGET_CP6 &&
      352       352    1                           is_cp_cst(*expp1) && is_cp_cst(*expp2)) ? 16 : 0;
      353       353    1        #ifndef NOFLOAT
      354       354    1         if (any2arith(expp2, oper) == DOUBLE)  {
      355       355    2            expr_error(*expp2,
      356       356    2               "illegal combination of float and pointer");
      357       357    2            erroneous2int(expp2);
      358       358    2         }
      359       359    1        #endif NOFLOAT
      360       360    1         ch7bin( expp2, '*',
      361       361    1            intexpr((size_of_type((*expp1)->ex_type->tp_up,"object"))<<shift,
      362       362    1               pa_type->tp_fund)
      363       363    1         );
      364       364    1        }
      365       365
      366       366             pointer_binary(expp, oper, expr)
      367       367              register struct expr **expp, *expr;
      368       368             {
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      369       369    1         /* constructs the pointer arithmetic expression out of
      370       370    1            a pointer expression, a binary operator and an integral
      371       371    1            expression.
      372       372    1         */
      373       373    1         if (is_ld_cst(expr) && is_ld_cst(*expp))
      374       374    1            cstbin(expp, oper, expr);
      375       375    1         else
      376       376    1            *expp = new_oper((*expp)->ex_type, *expp, oper, expr);
      377       377    1        }
      378       378
      379       379
      380       380             /*   NAME:       warn_compares
      381       381                  PURPOSE:    To provide a warning when comparisons with unsigned
      382       382                              char and signed int occur.
      383       383                  DESCRIPTION:
      384       384                        A typical example of this would be:
      385       385
      386       386                        char c = getc(stdin);
      387       387                        if (c == EOF) ...
      388       388
      389       389                        Since the define for EOF is -1, then this comparison is
      390       390                        absolutely meaningless when char's are unsigned.  The
      391       391                        result is a program that should work and does work on
      392       392                        systems with default signed char.
      393       393
      394       394             */
      395       395
      396       396             warn_compares(exa, exb, oper)
      397       397               struct expr *exa;
      398       398               struct expr *exb;
      399       399             {
      400       400    1          struct expr *exv, *exo;
      401       401    1          int   value, side, first, last;
      402       402    1          if (exa->ex_class == Value && exa->VL_CLASS == Const) {
      403       403    2             side = 0;
      404       404    2             exv = exa;
      405       405    2             exo = exb;
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      406       406    2             }
      407       407    1          else if (exb->ex_class == Value && exb->VL_CLASS == Const) {
      408       408    2             side = 1;
      409       409    2             exv = exb;
      410       410    2             exo = exa;
      411       411    2             }
      412       412    1          else return;
      413       413    1          if (exv->ex_type->tp_fund != INT)
      414       414    1             return;
      415       415    1          if (exo->ex_class != Oper || exo->OP_OPER != INT2INT  ||
      416       416    1              exo->OP_LEFT ->ex_type->tp_fund       != INT      ||
      417       417    1              exo->OP_RIGHT->ex_type->tp_fund       != CHAR     ||
      418       418    1        /**** exo->OP_RIGHT->ex_type->tp_unsigned   != UNSIGNED || *****/
      419       419    1              exo->OP_LEFT ->ex_type->tp_unsigned   == UNSIGNED   )
      420       420    1             return;
      421       421    1
      422       422    1          value = exv->VL_VALUE;
      423       423    1          if (exo->OP_RIGHT->ex_type->tp_unsigned == UNSIGNED) {
      424       424    2             first = 0; last = 511;
      425       425    2             }
      426       426    1          else {
      427       427    2             first = -256; last = 255;
      428       428    2             }
      429       429    1
      430       430    1          if (oper == EQUAL || oper == NOTEQUAL) {
      431       431    2             if (value < first || value > last)
      432       432    2             expr_warning(exv, "equality comparison with value %d beyond range of type
                                %s", value, "char");
      433       433    2             }
      434       434    1          else {
      435       435    2             if (value==first && ((side && oper=='<') || (!side && oper=='>')))
      436       436    2                expr_warning(exv, "comparison selects values beyond range of type char
                               ");
      437       437    2             else
      438       438    2             if (value==last  && ((side && oper=='>') || (!side && oper=='<')))
      439       439    2                expr_warning(exv, "comparison selects values beyond range of type char
                               ");
CC.C03    File=zbc$ch7bin:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      440       440    2             else if (value < first || value > last)
      441       441    2                expr_warning(exv, "comparison with value %d beyond range of type %s",
                               value, "char");
      442       442    2             }
      443       443    1          return;
      444       444    1        }
---  Include file information  ---

   zbc$botch_free:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$struct:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$noRoption:h.:ZBC3TOU. is referenced
   zbc$zb_target:h.:ZBC3TOU. is referenced
   zbc$specials:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$ch7bin:c.:ZBC3TSI
