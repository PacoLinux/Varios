

CC.C03    File=zbk$cg_mem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             #include "cg_tree.h"
        2         2             #include <string.h>
        3         3             #include "cg_funs.h"
        4         4
        5         5             /*-----------------------------------------------------------
        6         6             -----     Block maintenance macros     ----------------------
        7         7             -----------------------------------------------------------*/
        8         8
        9         9             /* Notes ---
       10        10
       11        11                There are three kinds of structures being maintained:
       12        12                   DICTionary blocks,
       13        13                   EXPRession nodes,
       14        14                   LITeral addresss nodes.
       15        15                For each of these, we maintain two chains: one for the free
       16        16                blocks of that kind, and one for the blocks in use (the
       17        17                "active" blocks). The chains are threaded together by a
       18        18                pointer in each block named "next" (it's the first word
       19        19                in each block). There are three static pointers associated
       20        20                with each kind of structure, "x":
       21        21                   free_x   == ptr to first of the free blocks for "x";
       22        22                   first_x  == ptr to first of the active blocks for "x";
       23        23                   last_x   == ptr to latest of the active blocks for "x";
       24        24
       25        25                The macro "reset_xxx()" initializes by moving all the active
       26        26                blocks to the free chain.
       27        27                   before "reset" ---
       28        28                      [free:]  F1, F2, ..., Fn
       29        29                      [first:] A1, A2, ..., [last:] Am
       30        30                   after  "reset" ---
       31        31                      [free:]  A1, A2, ..., Am, F1, F2, ..., Fn
       32        32                      [first:] -
       33        33
       34        34                The macro "restore_xxx()" moves all the active blocks
       35        35                starting after a given block to the free chain. The
       36        36                given block thus becomes the new "last" active block.
       37        37                   before "restore" ---
CC.C03    File=zbk$cg_mem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       38        38                      [free:]  F1, F2, ..., Fn
       39        39                      [first:] A1, A2, ..., [last:] Am
       40        40                   after  "restore" (with given block # Ak) ---
       41        41                      [free:]  Ak+1, ....., Am, F1, F2, ..., Fn
       42        42                      [first:] A1, A2, ..., [last:] Ak
       43        43
       44        44                The macro "new_xxx()" gets a new block from
       45        45                (1) the free chain, or (2) from system memory. In
       46        46                the latter case, it appends a number of new blocks
       47        47                to the free chain as well. This macro simply returns
       48        48                the new block; it does not alter the active chain -
       49        49                see "onto_xxx()" for that.
       50        50                Case (1):
       51        51                   before "new" ---
       52        52                      [free:]  F1, F2, ..., Fn
       53        53                   after  "new" ---
       54        54                      [free:]  F2, ..., Fn
       55        55                      [returned:] F1
       56        56                Case (2):
       57        57                   before "new" ---
       58        58                      [free:]  -
       59        59                   after  "new" ---
       60        60                      [free:]  F2, ..., Fn
       61        61                      [returned:] F1
       62        62
       63        63                The macro "onto_xxx()" appends a given new block onto
       64        64                the active chain. It does not effect the free chain.
       65        65                   before "onto" ---
       66        66                      [free:]  F1, F2, ..., Fn
       67        67                      [first:] A1, A2, ..., [last:] Am
       68        68                   after  "new" ---
       69        69                      [free:]  F1, F2, ..., Fn
       70        70                      [first:] A1, A2, ..., Am, [last:] Anew
       71        71
       72        72             -----------------------------------------------------------*/
       73        73
       74        74             #define reset_xxx(free,first,last) \
CC.C03    File=zbk$cg_mem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       75        74                if (last) {                     \
       76        74                   last->next = free;           \
       77        74                   free  = first;               \
       78        74                   first = last = 0;            \
       79        74                };
       80        80
       81        81             #define restore_xxx(this,free,first,last) \
       82        81                if (!this) reset_xxx(free,first,last) \
       83        81                if (last) {                     \
       84        81                   last->next = free;           \
       85        81                   free  = this->next;          \
       86        81                   this->next = 0;              \
       87        81                   last = this;                 \
       88        81                };
       89        89
       90        90             extern char *st_alloc (char **, unsigned int, int);
       91        91             #define new_xxx(str,free,cnt) ((struct str *) st_alloc((char **)&free, sizeof(
                               struct str), cnt ))
       92        92
       93        93             #define onto_xxx(this,first,last)  \
       94        93                if (last)                       \
       95        93                   last->next = this;           \
       96        93                else                            \
       97        93                   first = this;                \
       98        93                this->next = 0;                 \
       99        93                last = this;
      100       100
      101       101                    void zbk_reset_dict (void);
      102       102                    char *zbk_append_dict (char s[]);
      103       103                    void zbk_save_dict_pos (void);
      104       104                    void zbk_restore_dict_pos (void);
      105       105                    void zbk_reset_nodes (void);
      106       106                    EXPR zbk_get_node (void);
      107       107                    void zbk_reset_lits (void);
      108       108                    ADR  zbk_get_lit (void);
      109       109                    void zbk_print_mem_stats (void);
      110       110
CC.C03    File=zbk$cg_mem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111             /*---------------------------------------------------------*/
      112       112
      113       113             /* This module keeps track of memory used in these ways:
      114       114
      115       115                             Element type...  Set by...       Used by...
      116       116                             ---------------  ---------       ----------
      117       117                   dict        DICT_struct    cg_get          cg_scan
      118       118                   nodes       EXPR_struct    cg_scan         cg_gen
      119       119                   literals     ADR_struct    cg_lit          cg_lit
      120       120             */
      121       121
      122       122             #define DICT_BLOCK_SIZE  1000
      123       123             struct DICT_struct {
      124       124    1           struct DICT_struct *next;
      125       125    1           char bytes[DICT_BLOCK_SIZE];
      126       126    1        };
      127       127
      128       128             struct DICT_struct *free_dict=0, *first_dict=0, *last_dict=0;
      129       129             struct EXPR_struct *free_node=0, *first_node=0, *last_node=0;
      130       130             struct  ADR_struct *free_lit =0, *first_lit =0, *last_lit =0;
      131       131
      132       132             /*--- DICT ------------------------------------------------*/
      133       133
      134       134             static int dblk_bytes=DICT_BLOCK_SIZE, saved_dblk_bytes;
      135       135             static struct DICT_struct *dblk_ptr=0, *saved_dblk_ptr;
      136       136
      137       137             void zbk_reset_dict (void)
      138       138             {
      139       139    1           reset_xxx (free_dict, first_dict, last_dict);
      140       140    1           dblk_bytes=DICT_BLOCK_SIZE;
      141       141    1           dblk_ptr=0;
      142       142    1        }
      143       143
      144       144             char *zbk_append_dict (char s[])
      145       145             {
      146       146    1        char *p;
      147       147    1        int n;
CC.C03    File=zbk$cg_mem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    1           n = strlen(s) + 1;
      149       149    1           if ((dblk_bytes+n) >= DICT_BLOCK_SIZE) {
      150       150    2              dblk_ptr = new_xxx (DICT_struct, free_dict, 1);
      151       151    2              onto_xxx ( dblk_ptr, first_dict, last_dict);
      152       152    2              dblk_bytes = 0;
      153       153    2           }
      154       154    1           p = memcpy (&dblk_ptr->bytes[dblk_bytes], s, n);
      155       155    1           dblk_bytes += n;
      156       156    1           return (p);
      157       157    1        }
      158       158
      159       159             void zbk_save_dict_pos (void)
      160       160             {
      161       161    1           saved_dblk_bytes = dblk_bytes;
      162       162    1           saved_dblk_ptr = dblk_ptr;
      163       163    1        }
      164       164
      165       165             void zbk_restore_dict_pos (void)
      166       166             {
      167       167    1           restore_xxx (saved_dblk_ptr, free_dict, first_dict, last_dict);
      168       168    1           dblk_bytes = saved_dblk_bytes;
      169       169    1           dblk_ptr = saved_dblk_ptr;
      170       170    1        }
      171       171
      172       172             /*--- NODES -----------------------------------------------*/
      173       173
      174       174             void zbk_reset_nodes (void)
      175       175             {  reset_xxx (free_node, first_node, last_node); }
      176       176
      177       177             static int nodex=0;
      178       178             static struct EXPR_struct init_expr = init_EXPR;
      179       179             EXPR zbk_get_node (void)
      180       180             {
      181       181    1           EXPR expr = new_xxx (EXPR_struct, free_node, 50);
      182       182    1           *expr = init_expr;
      183       183    1           expr->number = nodex++;
      184       184    1           onto_xxx (expr, first_node, last_node);
CC.C03    File=zbk$cg_mem:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185    1           return (expr);
      186       186    1        }
      187       187
      188       188             /*--- LITS ------------------------------------------------*/
      189       189
      190       190             void zbk_reset_lits (void)
      191       191             {  reset_xxx (free_lit, first_lit, last_lit); }
      192       192
      193       193             static struct ADR_struct init_adr = init_ADR;
      194       194             ADR zbk_get_lit (void)
      195       195             {
      196       196    1           ADR adrx = new_xxx (ADR_struct, free_lit, 50);
      197       197    1           *adrx = init_adr;
      198       198    1           onto_xxx (adrx, first_lit, last_lit);
      199       199    1           return (adrx);
      200       200    1        }
      201       201
---  Include file information  ---

   zbk$cg_tree:h.:ZBC3TOU. is referenced
   string:h.:LIBRARY. is referenced
   zbk$cg_funs:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbk$cg_mem:c.:ZBC3TSI
