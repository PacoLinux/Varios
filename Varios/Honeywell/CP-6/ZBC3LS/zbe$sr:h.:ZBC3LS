

12:38 AUG 20 '97 zbe$sr:h.:ZBC3TSI                                         1    
    1      /* $Header: sr.h,v 1.5 87/03/10 11:41:07 ceriel Exp $ */
    2      /*
    3       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    4       * See the copyright notice in the ACK home directory, in the file "Copyright".
    5       */
    6      /* I N T E R N A L   D A T A S T R U C T U R E S   O F
    7       *
    8       *       S T R E N G T H   R E D U C T I O N
    9       *
   10       */
   11
   12
   13      typedef struct iv  *iv_p;
   14      typedef struct code_info *code_p;
   15
   16      /* An induction variable */
   17
   18      struct iv {
   19       offset    iv_off; /* offset of the induction variable */
   20       line_p    iv_incr;   /* pointer to last instr. of EM-code that
   21                 * increments the induction variable   */
   22       offset    iv_step;   /* step value           */
   23      };
   24
   25
   26      /* All information about a reducible piece of code is collected in
   27       * a single structure.
   28       */
   29
   30      struct code_info {
   31       loop_p     co_loop;  /* the loop the code is in    */
   32       bblock_p  co_block;  /* the basic block the code is in   */
   33       line_p     co_lfirst;   /* first instruction of the code */
   34       line_p     co_llast; /* last  instruction of the code */
   35       line_p     co_ivexpr;   /* start of linear expr. using iv   */
   36       line_p     co_endexpr;  /* end of the expression      */
   37       int     co_sign;  /* sign of iv in above expr      */
12:38 AUG 20 '97 zbe$sr:h.:ZBC3TSI                                         2    
   38       iv_p    co_iv; /* the induction variable     */
   39       offset     co_temp;  /* temporary variable         */
   40       int     co_tmpsize;  /* size of the temp. variable (ws or ps)*/
   41       int     co_instr; /* the expensive instruction (mli,lar..)*/
   42       union {
   43          line_p   co_loadlc;  /* LOC lc instruction (for mult.)*/
   44          line_p  co_desc;  /* load address of descriptor
   45                    *   (for lar etc.)     */
   46       } c_o;
   47      };
   48
   49      #define LOAD 0
   50      #define STORE 1
   51
   52      #define DLINK(l1,l2)  l1->l_next=l2; l2->l_prev=l1
   53
   54      #define same_local(l1,l2)   (off_set(l1) == off_set(l2))
   55
   56      #define LP_BLOCKS  lp_extend->lpx_sr.lpx_blocks
   57      #define LP_DONE    lp_extend->lpx_sr.lpx_done
   58      #define LP_HEADER  lp_extend->lpx_sr.lpx_header
   59      #define LP_INSTR   lp_extend->lpx_sr.lpx_instr
   60
   61      /* Parameters to be provided by environment: */
   62
   63      extern int ovfl_harmful;  /* Does overflow during multiplication
   64                 * cause a trap ?
   65                 */
   66      extern int arrbound_harmful;  /* Is it harmful to take the address of
   67                * a non-existing array element ?
   68                */
   69      extern int Ssr;  /* #optimizations found */
   70
   71      /* core allocation macros */
   72      #define newiv()    (iv_p)      newstruct(iv)
   73      #define newcinfo() (code_p)    newstruct(code_info)
   74      #define newsrlpx() (lpext_p)   newstruct(lpext_sr)
12:38 AUG 20 '97 zbe$sr:h.:ZBC3TSI                                         3    
   75      #define oldiv(x)   oldstruct(iv,x)
   76      #define oldcinfo(x)   oldstruct(code_info,x)
   77      #define oldsrlpx(x)   oldstruct(lpext_sr,x)
   78

