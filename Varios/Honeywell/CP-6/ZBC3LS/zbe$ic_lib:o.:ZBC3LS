

CC.C03    File=zbe$ic_lib:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ic_lib.c,v 1.4 87/03/10 11:07:04 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  I N T E R M E D I A T E   C O D E
        7         7              *
        8         8              *  I C _ L I B . C
        9         9              */
       10        10
       11        11
       12        12             #include <stdio:h>
       13        13             #include "types:h"
       14        14             #include "debug:h"
       15        15             #include "em_spec:h"
       16        16             #include "em_pseu:h"
       17        17             #include "em_mes:h"
       18        18             #include "arch:h"
       19        19             #include "ic:h"
       20        20             #include "ic_lookup:h"
       21        21             #include "ic_io:h"
       22        22             #include "global:h"
       23        23             #include "files:h"
       24        24             #include "ic_lib:h"
       25        25
       26        26
       27        27             STATIC skip_string(n)
       28        28              offset n;
       29        29             {
       30        30    1         /* Read a string of length n and void it */
       31        31    1
       32        32    1         while (n--) {
       33        33    2            readchar();
       34        34    2         }
       35        35    1        }
       36        36
CC.C03    File=zbe$ic_lib:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37
       38        38             STATIC skip_arguments()
       39        39             {
       40        40    1         /* Skip the arguments of a MES pseudo. The argument
       41        41    1          * list is terminated by a sp_cend byte.
       42        42    1          */
       43        43    1
       44        44    1         for (;;) {
       45        45    2            switch(table2()) {
       46        46    3               case sp_scon:
       47        47    3                  get_off(); /* void */
       48        48    3                  /* fall through !!! */
       49        49    3               case sp_icon:
       50        50    3               case sp_ucon:
       51        51    3               case sp_fcon:
       52        52    3                  get_int(); /* void */
       53        53    3                  skip_string(get_off());
       54        54    3                  break;
       55        55    3               case sp_cend:
       56        56    3                  return;
       57        57    3               default:
       58        58    3                  break;
       59        59    3            }
       60        60    2         }
       61        61    1        }
       62        62
       63        63
       64        64
       65        65             STATIC bool proc_wanted(name)
       66        66              char *name;
       67        67             {
       68        68    1         /* See if 'name' is the name of an external procedure
       69        69    1          * that has been used before, but for which no body
       70        70    1          * has been given so far.
       71        71    1          */
       72        72    1
       73        73    1         proc_p p;
CC.C03    File=zbe$ic_lib:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    1
       75        75    1         if (( p = proclookup(name,IMPORTING)) != (proc_p) 0 &&
       76        76    1            !(p->p_flags1 & PF_BODYSEEN)) {
       77        77    2            return TRUE;
       78        78    2         } else {
       79        79    2            return FALSE;
       80        80    2         }
       81        81    1        }
       82        82
       83        83
       84        84
       85        85             STATIC bool data_wanted(name)
       86        86              char *name;
       87        87             {
       88        88    1         /* See if 'name' is the name of an externally visible
       89        89    1          * data block that has been used before, but for which
       90        90    1          * no defining occurrence has been given yet.
       91        91    1          */
       92        92    1
       93        93    1         dblock_p db;
       94        94    1
       95        95    1         if ((db = symlookup(name,IMPORTING)) != (dblock_p) 0 &&
       96        96    1            db->d_pseudo == DUNKNOWN) {
       97        97    2            return TRUE;
       98        98    2         } else {
       99        99    2            return FALSE;
      100       100    2         }
      101       101    1        }
      102       102
      103       103
      104       104
      105       105             STATIC bool wanted_names()
      106       106             {
      107       107    1         /* Read the names of procedures and data labels,
      108       108    1          * appearing in a 'MES ms_ext' pseudo. Those are
      109       109    1          * the names of entities that are imported by
      110       110    1          * a library module.
CC.C03    File=zbe$ic_lib:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111    1          * If any of them is wanted, return TRUE.
      112       112    1          * A name is wanted if it is the name of a procedure
      113       113    1          * or data block for which applied occurrences but
      114       114    1          * no defining occurrence has been met.
      115       115    1          */
      116       116    1
      117       117    1         for (;;) {
      118       118    2            switch(table2()) {
      119       119    3               case DLBX:
      120       120    3                  if (data_wanted(string)) {
      121       121    4                     return TRUE;
      122       122    4                  }
      123       123    3                  /* A data entity with the name
      124       124    3                   * string is available.
      125       125    3                   */
      126       126    3                  break;
      127       127    3               case sp_pnam:
      128       128    3                  if (proc_wanted(string)) {
      129       129    4                     return TRUE;
      130       130    4                  }
      131       131    3                  break;
      132       132    3               case sp_cend:
      133       133    3                  return FALSE;
      134       134    3               default:
      135       135    3                  error("wrong argument of MES %d", ms_ext);
      136       136    3            }
      137       137    2         }
      138       138    1        }
      139       139
      140       140
      141       141
      142       142             STATIC FILE *curfile = NULL;
      143       143             STATIC bool useful()
      144       144             {
      145       145    1         /* Determine if any entity imported by the current
      146       146    1          * compact EM assembly file  (which will usually be
      147       147    1          * part of an archive file) is useful to us.
CC.C03    File=zbe$ic_lib:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    1          * The file must contain (before any other non-MES line)
      149       149    1          * a 'MES ms_ext' pseudo that has as arguments the names
      150       150    1          * of the entities imported.
      151       151    1          */
      152       152    1
      153       153    1         for (;;) {
      154       154    2            if (table1() != PSEU || tabval != ps_mes) {
      155       155    3               error("cannot find MES %d in library file",ms_ext);
      156       156    3            }
      157       157    2            if (table2() != CSTX1) {
      158       158    3               error("message number expected");
      159       159    3            }
      160       160    2            if (tabval == ms_ext) {
      161       161    3               /* This is the one we searched */
      162       162    3               return wanted_names();
      163       163    3               /* Read the names of the imported entities
      164       164    3                * and check if any of them is wanted.
      165       165    3                */
      166       166    3            } else {
      167       167    3               skip_arguments(); /* skip remainder of this MES */
      168       168    3            }
      169       169    2         }
      170       170    1        }
      171       171
      172       172
      173       173
      174       174             STATIC bool is_archive(name)
      175       175              char *name;
      176       176             {
      177       177    1         /* See if 'name' is the name of an archive file, i.e. it
      178       178    1          * should end on ".a" and should at least be three characters
      179       179    1          * long (i.e. the name ".a" is not accepted as an archive name!).
      180       180    1          */
      181       181    1
      182       182    1         register char *p;
      183       183    1
      184       184    1         for (p = name; *p; p++);
CC.C03    File=zbe$ic_lib:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185    1         return (p > name+2) && (*--p == 'a') && (*--p == '.');
      186       186    1        }
      187       187
      188       188
      189       189
      190       190             STATIC struct ar_hdr hdr;
      191       191
      192       192             STATIC bool read_hdr()
      193       193             {
      194       194    1         /* Read the header of an archive module */
      195       195    1
      196       196    1
      197       197    1         fread(&hdr, sizeof(hdr), 1, curfile);
      198       198    1         return !feof(curfile);
      199       199    1        }
      200       200
      201       201
      202       202
      203       203             STATIC int argcnt = ARGSTART - 1;
      204       204             STATIC short arstate = NO_ARCHIVE;
      205       205
      206       206
      207       207             FILE *next_file(argc,argv)
      208       208              int argc;
      209       209              char *argv[];
      210       210             {
      211       211    1         /* See if there are more EM input files. The file names
      212       212    1          * are given via argv. If a file is an archive file
      213       213    1          * it is supposed to be a library of EM compact assembly
      214       214    1          * files. A module (file) contained in this archive file
      215       215    1          * is only used if it imports at least one procedure or
      216       216    1          * datalabel for which we have not yet seen a defining
      217       217    1          * occurrence, although we have seen a used occurrence.
      218       218    1          */
      219       219    1
      220       220    1          long ptr;
      221       221    1
CC.C03    File=zbe$ic_lib:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      222       222    1          for (;;) {
      223       223    2            /* This loop is only exited via a return */
      224       224    2            if (arstate == ARCHIVE) {
      225       225    3               /* We were reading an archive file */
      226       226    3               if (ftell(curfile) & 1) {
      227       227    4                  /* modules in an archive file always
      228       228    4                   * begin on a word boundary, i.e. at
      229       229    4                   * an even address.
      230       230    4                   */
      231       231    4                  fseek(curfile,1L,1);
      232       232    4               }
      233       233    3               if (read_hdr()) { /* read header of next module */
      234       234    4                  ptr = ftell(curfile); /* file position */
      235       235    4                  file_init(curfile,ARCHIVE,hdr.ar_size);
      236       236    4                  /* tell i/o package that we're reading
      237       237    4                   * an archive module of given length.
      238       238    4                   */
      239       239    4                  if (useful()) {
      240       240    5                     /* re-initialize file, because 'useful'
      241       241    5                      * has read some bytes too.
      242       242    5                      */
      243       243    5                     fseek(curfile,ptr,0); /* start module */
      244       244    5                     file_init(curfile,ARCHIVE,hdr.ar_size);
      245       245    5                     return curfile;
      246       246    5                  } else {
      247       247    5                     /* skip this module */
      248       248    5                     fseek(curfile,
      249       249    5                       ptr+hdr.ar_size,0);
      250       250    5                  }
      251       251    4               } else {
      252       252    4                  /* done with this archive */
      253       253    4                  arstate = NO_ARCHIVE;
      254       254    4               }
      255       255    3            } else {
      256       256    3               /* open next file, close old */
      257       257    3               if (curfile != NULL) {
      258       258    4                  fclose(curfile);
CC.C03    File=zbe$ic_lib:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      259       259    4               }
      260       260    3               argcnt++;
      261       261    3               if (argcnt >= argc) {
      262       262    4                  /* done with all arguments */
      263       263    4                  return NULL;
      264       264    4               }
      265       265    3               filename = argv[argcnt];
      266       266    3               if ((curfile = fopen(filename,"rb")) == NULL) {
      267       267    4                  error("cannot open %s",filename);
      268       268    4               }
      269       269    3               if (is_archive(filename)) {
      270       270    4                  /* ends on '.a' */
      271       271    4                  arstate = ARCHIVE;
      272       272    4                  arch_init(curfile); /* read magic ar number */
      273       273    4               } else {
      274       274    4                  file_init(curfile,NO_ARCHIVE,0L);
      275       275    4                  return curfile;
      276       276    4               }
      277       277    3            }
      278       278    2         }
      279       279    1        }
      280       280
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_mes:h.:ZBC3TOU. is referenced
   zbe$arch:h.:ZBC3TOU. is referenced
   zbe$ic:h.:ZBC3TOU. is referenced
   zbe$ic_lookup:h.:ZBC3TOU. is referenced
   zbe$ic_io:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$files:h.:ZBC3TOU. is referenced
   zbe$ic_lib:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$ic_lib:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  

No diagnostics were issued in the file zbe$ic_lib:c.:ZBC3TSI
