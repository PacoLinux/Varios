

CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=1  
        1         1             /* $Header: lv.c,v 1.4 87/03/10 11:19:22 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6
        7         7             /* L I V E   V A R I A B L E S   A N A L Y S I S */
        8         8
        9         9             #include <stdio:h>
       10        10             #include "types:h"
       11        11             #include "lv:h"
       12        12             #include "debug:h"
       13        13             #include "global:h"
       14        14             #include "lset:h"
       15        15             #include "cset:h"
       16        16             #include "def:h"
       17        17             #include "files:h"
       18        18             #include "alloc:h"
       19        19             #include "map:h"
       20        20             #include "get:h"
       21        21             #include "put:h"
       22        22             #include "aux:h"
       23        23             #include "init_glob:h"
       24        24             #include "locals:h"
       25        25             #include "go:h"
       26        26             #include "em_mnem:h"
       27        27             #include "em_pseu:h"
       28        28             #include "em_spec:h"
       29        29             #include "parser:h"
       30        30
       31        31             #define newlvbx()  (bext_p) newstruct(bext_lv)
       32        32             #define oldlvbx(x) oldstruct(bext_lv,x)
       33        33
       34        34
       35        35             /* TEMPORARY: should be put in ../../../h/em_mes.h: */
       36        36             #define ms_liv 9
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=2  
       37        37             #define ms_ded 10
       38        38
       39        39             short nrglobals;
       40        40             short nrvars;
       41        41
       42        42             STATIC int no_opt;
       43        43             STATIC int Slv;
       44        44             STATIC bool mesgflag = FALSE;  /* Suppress generation of live/dead info */
       45        45
       46        46
       47        47             STATIC clean_up()
       48        48             {
       49        49    1         local_p *p;
       50        50    1
       51        51    1         for (p = &locals[1]; p <= &locals[nrlocals]; p++) {
       52        52    2            oldlocal(*p);
       53        53    2         }
       54        54    1         oldmap(locals,nrlocals);
       55        55    1        }
       56        56
       57        57
       58        58
       59        59             STATIC bool is_dir_use(l)
       60        60              line_p l;
       61        61             {
       62        62    1         /* See if l is a direct use of some variable
       63        63    1          * (i.e. not through a pointer). A LIL is a
       64        64    1          * direct use of some pointer variable
       65        65    1          * (and an indirect use of some other variable).
       66        66    1          * A SIL is also a direct use.
       67        67    1          * A LOI, however, is not an direct use of a variable.
       68        68    1          * An an increment/decrement instruction is regarded
       69        69    1          * as a use here, and not as a definition, as the
       70        70    1          * variable is first used and than defined.
       71        71    1          */
       72        72    1
       73        73    1         switch(INSTR(l)) {
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=3  
       74        74    2            case op_dee:
       75        75    2            case op_del:
       76        76    2            case op_ine:
       77        77    2            case op_inl:
       78        78    2            case op_lde:
       79        79    2            case op_ldl:
       80        80    2            case op_lil:
       81        81    2            case op_loe:
       82        82    2            case op_lol:
       83        83    2            case op_sil:
       84        84    2               return TRUE;
       85        85    2            default:
       86        86    2               return FALSE;
       87        87    2         }
       88        88    1         /* NOTREACHED */
       89        89    1        }
       90        90
       91        91
       92        92
       93        93             STATIC bool is_indir_use(l)
       94        94              line_p l;
       95        95             {
       96        96    1         char *s;
       97        97    1         proc_p p;
       98        98    1         extern char **pnames;
       99        99    1         /* See if instruction l uses some variable(s) indirectly,
      100       100    1          * i.e. through a pointer or via a procedure call.
      101       101    1          */
      102       102    1
      103       103    1         switch(INSTR(l)) {
      104       104    2            case op_blm:
      105       105    2            case op_bls:
      106       106    2            case op_cai:
      107       107    2            case op_cal:
      108       108    2            case op_lar:
      109       109    2            case op_ldf:
      110       110    2            case op_lil:
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=4  
      111       111    2          case op_lal:
      112       112    2            case op_lof:
      113       113    2            case op_loi:
      114       114    2            case op_los:
      115       115    2            case op_mon:
      116       116    2               if (INSTR(l) == op_cal) {
      117       117    3                  p = PROC(l);
      118       118    3                  s = pnames[p->p_id];
      119       119    3                  if ((s) && ((strcmp ( s, "_setjmp")) == 0)) {
      120       120    4                     no_opt = 1; }
      121       121    3               }
      122       122    2               return TRUE;
      123       123    2            default:
      124       124    2               return FALSE;
      125       125    2         }
      126       126    1         /* NOTREACHED */
      127       127    1        }
      128       128
      129       129
      130       130
      131       131             STATIC bool is_def(l)
      132       132              line_p l;
      133       133             {
      134       134    1         /* See if l does a direct definition */
      135       135    1
      136       136    1         switch(INSTR(l)) {
      137       137    2            case op_sde:
      138       138    2            case op_sdl:
      139       139    2            case op_ste:
      140       140    2            case op_stl:
      141       141    2            case op_zre:
      142       142    2            case op_zrl:
      143       143    2               return TRUE;
      144       144    2            default:
      145       145    2               return FALSE;
      146       146    2         }
      147       147    1         /* NOTREACHED */
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=5  
      148       148    1        }
      149       149
      150       150
      151       151             STATIC def_use(p)
      152       152              proc_p p;
      153       153             {
      154       154    1         /* Compute DEF(b) and USE(b), for every basic block b
      155       155    1          * of procedure p. DEF(b) contains the variables that
      156       156    1          * are certain to be defined (assigned) in b
      157       157    1          * before being used. USE(b) contains the variables
      158       158    1          * that may be used in b, before being defined.
      159       159    1          * (Note that uncertainty arises in the presence of
      160       160    1          *  pointers and procedure calls).
      161       161    1          * We compute these sets, by scanning the text of
      162       162    1          * the basic block from beginning till end.
      163       163    1          */
      164       164    1
      165       165    1         register bblock_p b;
      166       166    1         register line_p l;
      167       167    1         short v;
      168       168    1         bool found;
      169       169    1        local_p loc;
      170       170    1         cset all_ind_uses;
      171       171    1
      172       172    1         all_ind_uses = Cempty_set(nrvars);
      173       173    1         for (v = 1; v < nrlocals; v++) {
      174       174    2            if (!IS_REGVAR(locals[v])) {
      175       175    3               Cadd(LOC_TO_VARNR(v),&all_ind_uses);
      176       176    3            }
      177       177    2         }
      178       178    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      179       179    2            USE(b) = Cempty_set(nrvars);
      180       180    2            DEF(b) = Cempty_set(nrvars);
      181       181    2            for (l = b->b_start; l != (line_p) 0; l = l->l_next) {
      182       182    3               if (is_def(l)) {
      183       183    4                  /* An direct definition (i.e. not
      184       184    4                   * through a pointer).
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=6  
      185       185    4                   */
      186       186    4                  var_nr(l,&v,&found);
      187       187    4                  if (found && !Cis_elem(v,USE(b))) {
      188       188    5                     /* We do maintain live-dead info
      189       189    5                      * for this variable, and it was
      190       190    5                      * not used earlier in b.
      191       191    5                      */
      192       192    5                     Cadd(v, &DEF(b));
      193       193    5                  }
      194       194    4               } else {
      195       195    4                  if (is_dir_use(l)) {
      196       196    5                     var_nr(l,&v,&found);
      197       197    5                     loc = (local_p) l;
      198       198    5                     if (found && (!Cis_elem(v,DEF(b)) || IS_REGVAR(loc))) {
      199       199    6                        Cadd(v, &USE(b));
      200       200    6                     }
      201       201    5                  }
      202       202    4                  if (is_indir_use(l)) {
      203       203    5                     /* Add variable that may be used
      204       204    5                      * by l to USE(b).
      205       205    5                      */
      206       206    5                     Cjoin(all_ind_uses,&USE(b));
      207       207    5                  }
      208       208    4               }
      209       209    3            }
      210       210    2         }
      211       211    1         Cdeleteset(all_ind_uses);
      212       212    1        }
      213       213
      214       214
      215       215
      216       216             STATIC unite_ins(bbset,setp)
      217       217              lset bbset;
      218       218              cset *setp;
      219       219             {
      220       220    1         /* Take the union of L_IN(b), for all b in bbset,
      221       221    1          * and put the result in setp.
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=7  
      222       222    1          */
      223       223    1
      224       224    1         Lindex i;
      225       225    1
      226       226    1         Cclear_set(setp);
      227       227    1         for (i = Lfirst(bbset); i != (Lindex) 0; i = Lnext(i,bbset)) {
      228       228    2            Cjoin(L_IN((bblock_p) Lelem(i)), setp);
      229       229    2         }
      230       230    1        }
      231       231
      232       232
      233       233
      234       234             STATIC solve_lv(p)
      235       235              proc_p p;
      236       236             {
      237       237    1         /* Solve the data flow equations for Live Variables,
      238       238    1          * for procedure p. These equations are:
      239       239    1          *  (1)   IN[b] = OUT[b] - DEF[b] + USE[b]
      240       240    1          *  (2)   OUT(b) = IN(s1) + ... + IN(sn) ;
      241       241    1          *        where SUCC(b) = {s1, ... , sn}
      242       242    1          */
      243       243    1
      244       244    1         register bblock_p b;
      245       245    1         cset newout = Cempty_set(nrvars);
      246       246    1         bool change = TRUE;
      247       247    1
      248       248    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      249       249    2            L_IN(b) = Cempty_set(nrvars);
      250       250    2            Ccopy_set(USE(b), &L_IN(b));
      251       251    2            L_OUT(b) = Cempty_set(nrvars);
      252       252    2         }
      253       253    1         while (change) {
      254       254    2            change = FALSE;
      255       255    2            for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      256       256    3               unite_ins(b->b_succ,&newout);
      257       257    3               if (!Cequal(newout,L_OUT(b))) {
      258       258    4                  change = TRUE;
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=8  
      259       259    4                  Ccopy_set(newout, &L_OUT(b));
      260       260    4                  Ccopy_set(newout, &L_IN(b));
      261       261    4                  Csubtract(DEF(b), &L_IN(b));
      262       262    4                  Cjoin(USE(b), &L_IN(b));
      263       263    4               }
      264       264    3            }
      265       265    2         }
      266       266    1         Cdeleteset(newout);
      267       267    1        }
      268       268
      269       269
      270       270             STATIC live_variables_analysis(p)
      271       271              proc_p p;
      272       272             {
      273       273    1         make_localtab(p);
      274       274    1         nrvars = nrglobals + nrlocals;
      275       275    1         def_use(p);
      276       276    1         solve_lv(p);
      277       277    1        }
      278       278
      279       279
      280       280             STATIC init_live_dead(b)
      281       281              bblock_p b;
      282       282             {
      283       283    1         /* For every register variable, see if it is
      284       284    1          * live or dead at the end of b.
      285       285    1          */
      286       286    1
      287       287    1         register short v;
      288       288    1         local_p loc;
      289       289    1
      290       290    1         for (v = 1; v <= nrlocals; v++) {
      291       291    2            loc = locals[v];
      292       292    2            if (IS_REGVAR(loc) && Cis_elem(LOC_TO_VARNR(v),L_OUT(b))) {
      293       293    3               LIVE(loc);
      294       294    3            } else {
      295       295    3               DEAD(loc);
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=9  
      296       296    3            }
      297       297    2         }
      298       298    1        }
      299       299
      300       300
      301       301
      302       302             STATIC line_p make_mesg(mesg,loc)
      303       303              short mesg;
      304       304              local_p loc;
      305       305             {
      306       306    1         /* Create a line for a message stating that
      307       307    1          * local variable loc is live/dead. This message
      308       308    1          * looks like: "mes ms_liv,off,size" or
      309       309    1          * "mes ms_ded,off,size".
      310       310    1          */
      311       311    1
      312       312    1         line_p l = newline(OPLIST);
      313       313    1         register arg_p ap;
      314       314    1
      315       315    1         l->l_instr = ps_mes;
      316       316    1         ap = ARG(l) = newarg(ARGOFF);
      317       317    1         ap->a_a.a_offset = mesg;
      318       318    1         ap = ap->a_next = newarg(ARGOFF);
      319       319    1         ap->a_a.a_offset = loc->lc_off;
      320       320    1         ap = ap->a_next = newarg(ARGOFF);
      321       321    1         ap->a_a.a_offset = loc->lc_size;
      322       322    1         ap->a_next = (arg_p) 0;  /* make sure inited to null pointer. */
      323       323    1         return l;
      324       324    1        }
      325       325
      326       326
      327       327
      328       328             STATIC block_entry(b,prev)
      329       329              bblock_p b,prev;
      330       330             {
      331       331    1         short v,vn;
      332       332    1         local_p loc;
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=10 
      333       333    1         bool was_live, is_live;
      334       334    1
      335       335    1         /* Generate a live/dead message for every register variable that
      336       336    1          * was live at the end of prev, but dead at the beginning of b,
      337       337    1          * or v.v. If prev = 0 (i.e. begin of procedure), parameters were
      338       338    1          * live, normal local variables were dead.
      339       339    1          */
      340       340    1
      341       341    1         for (v = 1; v <= nrlocals; v++) {
      342       342    2            loc = locals[v];
      343       343    2            vn = LOC_TO_VARNR(v);
      344       344    2            if (prev == (bblock_p) 0) {
      345       345    3               was_live = loc->lc_off >= 0;
      346       346    3            } else {
      347       347    3               was_live = Cis_elem(vn,L_OUT(prev));
      348       348    3            }
      349       349    2            is_live = Cis_elem(vn,L_IN(b));
      350       350    2            if (was_live != is_live) {
      351       351    3               app_block(make_mesg((is_live?ms_liv:ms_ded),loc),b);
      352       352    3            }
      353       353    2         }
      354       354    1        }
      355       355
      356       356
      357       357
      358       358             STATIC app_block(l,b)
      359       359              line_p l;
      360       360              bblock_p b;
      361       361             {
      362       362    1         line_p x = b->b_start;
      363       363    1
      364       364    1         if (x != (line_p) 0 && INSTR(x) == ps_pro) {
      365       365    2            /* start of procedure; append after pro pseudo ! */
      366       366    2            if ((l->l_next = x->l_next) != (line_p) 0) {
      367       367    3               PREV(l->l_next) = l;
      368       368    3            }
      369       369    2            x->l_next = l;
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=11 
      370       370    2            PREV(l) = x;
      371       371    2         } else {
      372       372    2            if ((l->l_next = x) != (line_p) 0) {
      373       373    3               PREV(l->l_next) = l;
      374       374    3            }
      375       375    2            b->b_start = l;
      376       376    2            PREV(l) = (line_p) 0;
      377       377    2         }
      378       378    1        }
      379       379
      380       380
      381       381
      382       382             STATIC definition(l,useless_out,v_out,mesgflag)
      383       383              line_p l;
      384       384              bool *useless_out;
      385       385              short *v_out;
      386       386              bool mesgflag;
      387       387             {
      388       388    1         /* Process a definition. If the defined (register-) variable
      389       389    1          * is live after 'l', then create a live-message and put
      390       390    1          * it after 'l'.
      391       391    1          */
      392       392    1
      393       393    1         short v;
      394       394    1         bool found;
      395       395    1         local_p loc;
      396       396    1
      397       397    1         *useless_out = FALSE;
      398       398    1         var_nr(l,&v,&found);
      399       399    1         if (found && IS_LOCAL(v)) {
      400       400    2            *v_out = v;
      401       401    2            loc = locals[TO_LOCAL(v)];
      402       402    2            if (IS_REGVAR(loc)) {
      403       403    3           if ((INSTR(l) == op_stl || INSTR(l) == op_sdl) && l->l_next != (line_p) 0 &
                               & INSTR(l->l_next) == op_lal) {
      404       404    4             if (SHORT(l) == SHORT(l->l_next) || SHORT(l->l_next) < 0 ) { return; }
      405       405    4           }
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=12 
      406       406    3               if (IS_LIVE(loc)) {
      407       407    4                  if (!mesgflag) {
      408       408    5                     appnd_line(make_mesg(ms_liv,loc), l);
      409       409    5                  }
      410       410    4                  DEAD(loc);
      411       411    4               } else {
      412       412    4                  if (!no_opt) {
      413       413    5                    *useless_out = TRUE; }
      414       414    4               }
      415       415    3            }
      416       416    2         }
      417       417    1        }
      418       418
      419       419
      420       420
      421       421
      422       422             STATIC use(l,mesgflag)
      423       423              line_p l;
      424       424              bool mesgflag;
      425       425             {
      426       426    1         /* Process a use. If the defined (register-) variable
      427       427    1          * is dead after 'l', then create a dead-message and put
      428       428    1          * it after 'l'.
      429       429    1          */
      430       430    1
      431       431    1         short v;
      432       432    1         bool found;
      433       433    1         local_p loc;
      434       434    1
      435       435    1         var_nr(l,&v,&found);
      436       436    1         if (found && IS_LOCAL(v)) {
      437       437    2            loc = locals[TO_LOCAL(v)];
      438       438    2            if (IS_REGVAR(loc) && IS_DEAD(loc)) {
      439       439    3               if (!mesgflag) {
      440       440    4                  appnd_line(make_mesg(ms_ded,loc), l);
      441       441    4               }
      442       442    3               LIVE(loc);
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=13 
      443       443    3            }
      444       444    2         }
      445       445    1        }
      446       446
      447       447
      448       448
      449       449             STATIC nothing() { }  /* No action to be undertaken at level 0 of parser */
      450       450
      451       451             STATIC rem_code(l1,l2,b)
      452       452              line_p l1,l2;
      453       453              bblock_p b;
      454       454             {
      455       455    1         line_p l,x,y;
      456       456    1
      457       457    1         x = PREV(l1);
      458       458    1         y = l2->l_next;
      459       459    1         for (l = l1; l != l2; l = l->l_next) {
      460       460    2            oldline(l);
      461       461    2         }
      462       462    1         if (x == (line_p) 0) {
      463       463    2            b->b_start = y;
      464       464    2         } else {
      465       465    2            x->l_next = y;
      466       466    2         }
      467       467    1         if (y != (line_p) 0) {
      468       468    2            PREV(y) = x;
      469       469    2         }
      470       470    1        }
      471       471
      472       472
      473       473
      474       474
      475       475             #define SIZE(v) ((offset) locals[TO_LOCAL(v)]->lc_size)
      476       476
      477       477
      478       478
      479       479
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=14 
      480       480             lv_mesg(p,mesgflag)
      481       481              proc_p p;
      482       482              bool mesgflag;
      483       483             {
      484       484    1         /* Create live/dead messages for every possible register
      485       485    1          * variable of p. A dead-message is put after a "use" of
      486       486    1          * such a variable, if the variable becomes dead just
      487       487    1          * after the use (i.e. this was its last use).
      488       488    1          * A live message is put after a "definition" of such
      489       489    1          * a variable, if the variable becomes live just
      490       490    1          * after the definition (which will usually be the case).
      491       491    1          * We traverse every basic block b of p from the last
      492       492    1          * instruction of b backwards to the beginning of b.
      493       493    1          * Initially, all variables that are dead at the end
      494       494    1          * of b are marked dead. All others are marked live.
      495       495    1          * If we come accross a definition of a variable X that
      496       496    1          * was marked live, we put a live-message after the
      497       497    1          * definition and mark X dead.
      498       498    1          * If we come accross a use of a variable X that
      499       499    1          * was marked dead, we put a dead-message after the
      500       500    1          * use and mark X live.
      501       501    1          * So at any point, the mark of X tells whether X is
      502       502    1          * live or dead immediately before (!) that point.
      503       503    1          * We also generate a message at the start of a basic block
      504       504    1          * for every variable that was live at the end of the (textually)
      505       505    1          * previous block, but dead at the entry of this block, or v.v.
      506       506    1          * On the fly, useless assignments are removed.
      507       507    1          */
      508       508    1
      509       509    1         register bblock_p b;
      510       510    1         register line_p l;
      511       511    1         line_p lnp, prev;
      512       512    1         bblock_p prevb = (bblock_p) 0;
      513       513    1         short v;
      514       514    1         bool useless;
      515       515    1
      516       516    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=15 
      517       517    2            block_entry(b,prevb); /* generate message at head of block */
      518       518    2            prevb = b;
      519       519    2            if (!mesgflag) {
      520       520    3               init_live_dead(b);
      521       521    3            }
      522       522    2            for (l = last_instr(b); l != (line_p) 0; l = prev) {
      523       523    3               /* traverse backwards! */
      524       524    3               prev = PREV(l);
      525       525    3               if (is_def(l)) {
      526       526    4                  definition(l,&useless,&v,mesgflag);
      527       527    4                  if (useless &&   /* assignment to dead var. */
      528       528    4                      parse(prev,SIZE(v),&lnp,0,nothing)) {
      529       529    5                     /* The code "VAR := expression" can
      530       530    5                      * be removed. 'l' is the "STL VAR",
      531       531    5                      * lnp is the beginning of the EM code
      532       532    5                      * for the expression.
      533       533    5                      */
      534       534    5                     prev = PREV(lnp);
      535       535    5                     rem_code(lnp,l,b);
      536       536    5        OUTVERBOSE("useless assignment ,proc %d,local %d", curproc->p_id,
      537       536    5          (int) locals[TO_LOCAL(v)]->lc_off);
      538       537    5                     Slv++;
      539       538    5                  }
      540       539    4               } else {
      541       540    4                  if (is_dir_use(l))  {
      542       541    5                     use(l,mesgflag);
      543       542    5                  }
      544       543    4               }
      545       544    3            }
      546       545    2         }
      547       546    1        }
      548       547
      549       548
      550       549             STATIC lv_extend(p)
      551       550              proc_p p;
      552       551             {
      553       552    1         /* Allocate extended data structures for Use Definition analysis */
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=16 
      554       553    1
      555       554    1         register bblock_p b;
      556       555    1
      557       556    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      558       557    2            b->b_extend = newlvbx();
      559       558    2         }
      560       559    1        }
      561       560
      562       561
      563       562             STATIC lv_cleanup(p)
      564       563              proc_p p;
      565       564             {
      566       565    1         /* Deallocate extended data structures for Use Definition analysis */
      567       566    1
      568       567    1         register bblock_p b;
      569       568    1
      570       569    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      571       570    2            Cdeleteset(USE(b));
      572       571    2            Cdeleteset(DEF(b));
      573       572    2            Cdeleteset(L_IN(b));
      574       573    2            Cdeleteset(L_OUT(b));
      575       574    2            oldlvbx(b->b_extend);
      576       575    2         }
      577       576    1        }
      578       577
      579       578             lv_flags(p)
      580       579              char *p;
      581       580             {
      582       581    1         switch(*p) {
      583       582    2            case 'N':
      584       583    2               mesgflag = TRUE;
      585       584    2               break;
      586       585    2         }
      587       586    1        }
      588       587
      589       588
      590       589             lv_optimize(p)
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=17 
      591       590              proc_p p;
      592       591             {
      593       592    1         no_opt = 0;
      594       593    1         locals = (local_p *) 0;
      595       594    1         lv_extend(p);
      596       595    1         live_variables_analysis(p);
      597       596    1         lv_mesg(p,mesgflag);
      598       597    1         /* generate live-dead messages for regvars */
      599       598    1         lv_cleanup(p);
      600       599    1         clean_up();
      601       600    1        }
      602       601
      603       602
      604       603
      605       604             lvmain(argc,argv)
      606       605              int argc;
      607       606              char *argv[];
      608       607             {
      609       608    1         extern char **pnames;
      610       609    1         FILE *pf;
      611       610    1         extern FILE *zbe_pdump;
      612       611    1         pf = zbe_pdump;
      613       612    1         getpnames (pf);
      614       613    1         go(argc,argv,init_globals,lv_optimize,no_action,lv_flags);
      615       614    1         report("useless assignments deleted",Slv);
      616       615    1         oldmap (pnames, plength);
      617       616    1         rewind (pf);
      618       617    1
      619       618    1           return ;
      620       619    1        }
      621       620
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$lv:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$lv:c.:ZBC3TSI                                                    Fri Aug 22 1997  Page=18 
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$files:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
   zbe$put:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$init_glob:h.:ZBC3TOU. is referenced
   zbe$locals:h.:ZBC3TOU. is referenced
   zbe$go:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   zbe$parser:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$lv:c.:ZBC3TSI
