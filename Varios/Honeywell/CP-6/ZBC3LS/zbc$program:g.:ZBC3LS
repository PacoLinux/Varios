

11:50 AUG 20 '97 zbc$program:g.:ZBC3TSI                                    1    
    1      /*
    2       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    3       * See the copyright notice in the ACK home directory, in the file "Copyright".
    4       */
    5      /* $Header: program.g,v 3.9 87/03/27 16:39:57 ceriel Exp $ */
    6      /* PROGRAM PARSER */
    7
    8      /*  The presence of typedef declarations renders it impossible to
    9       make a context-free grammar of C. Consequently we need
   10       context-sensitive parsing techniques, the simplest one being
   11       a subtle cooperation between the parser and the lexical scanner.
   12       The lexical scanner has to know whether to return IDENTIFIER
   13       or TYPE_IDENTIFIER for a given tag, and it obtains this information
   14       from the definition list, as constructed by the parser.
   15       The present grammar is essentially LL(2), and is processed by
   16       a parser generator which accepts LL(1) with tie breaking rules
   17       in C, of the form %if(cond) and %while(cond). To solve the LL(1)
   18       ambiguities, the lexical scanner does a one symbol look-ahead.
   19       This symbol, however, cannot always be correctly assessed, since
   20       the present symbol may cause a change in the definition list
   21       which causes the identification of the look-ahead symbol to be
   22       invalidated.
   23       The lexical scanner relies on the parser (or its routines) to
   24       detect this situation and then update the look-ahead symbol.
   25       An alternative approach would be to reassess the look-ahead symbol
   26       in the lexical scanner when it is promoted to dot symbol. This
   27       would be more beautiful but less correct, since then for a short
   28       while there would be a discrepancy between the look-ahead symbol
   29       and the definition list; I think it would nevertheless work in
   30       correct programs.
   31       A third solution would be to enter the identifier as soon as it
   32       is found; its storage class is then known, although its full type
   33       isn't. We would have to fill that in afterwards.
   34
   35       At block exit the situation is even worse. Upon reading the
   36       closing brace, the names declared inside the function are cleared
   37       from the name list. This action may expose a type identifier that
11:50 AUG 20 '97 zbc$program:g.:ZBC3TSI                                    2    
   38       is the same as the identifier in the look-ahead symbol. This
   39       situation certainly invalidates the third solution, and casts
   40       doubts upon the second.
   41      */
   42
   43      %lexical  LLlex;
   44      %start    C_program, program;
   45      %start    If_expr, control_if_expression;
   46
   47      {
   48      #include  "nopp.h"
   49      #include  "arith.h"
   50      #include  "LLlex.h"
   51      #include  "idf.h"
   52      #include  "label.h"
   53      #include  "type.h"
   54      #include  "declar.h"
   55      #include  "decspecs.h"
   56      #include  "code.h"
   57      #include  "expr.h"
   58      #include  "def.h"
   59      #include "level.h"
   60
   61      #ifndef NOPP
   62      extern arith ifval;
   63      #endif NOPP
   64
   65      /*VARARGS*/
   66      extern error();
   67      }
   68
   69      control_if_expression
   70       {
   71          struct expr *exprX;
   72       }
   73      :
   74       constant_expression(&exprX)
11:50 AUG 20 '97 zbc$program:g.:ZBC3TSI                                    3    
   75          {
   76      #ifndef NOPP
   77             register struct expr *expr = exprX;
   78             if (expr->ex_flags & EX_SIZEOF)
   79                expr_error(expr, "sizeof not allowed in preprocessor");
   80      #ifdef FLOATOPT
   81             if (expr->ex_flags & EX_FLOATOPT)
   82                expr_error(expr, "floating point not allowed in preprocessor");
   83      #endif
   84             ifval = expr->VL_VALUE;
   85             free_expression(expr);
   86      #endif NOPP
   87          }
   88      ;
   89
   90      /* 10 */
   91      program:
   92       [%persistent external_definition]*
   93       {unstack_world();}
   94      ;
   95
   96      /*  A C identifier definition is remarkable in that it formulates
   97       the declaration in a way different from most other languages:
   98       e.g., rather than defining x as a pointer-to-integer, it defines
   99       *x as an integer and lets the compiler deduce that x is actually
  100       pointer-to-integer.  This has profound consequences, both for the
  101       structure of an identifier definition and for the compiler.
  102
  103       A definition starts with a decl_specifiers, which contains things
  104       like
  105          typedef int
  106       which is implicitly repeated for every definition in the list, and
  107       then for each identifier a declarator is given, of the form
  108          *a()
  109       or so.  The decl_specifiers is kept in a struct decspecs, to be
  110       used again and again, while the declarator is stored in a struct
  111       declarator, only to be passed to declare_idf together with the
11:50 AUG 20 '97 zbc$program:g.:ZBC3TSI                                    4    
  112       struct decspecs.
  113      */
  114
  115      external_definition
  116       {
  117          struct decspecs Ds;
  118          struct declarator Dc;
  119          register struct type *tp;
  120       }
  121      :
  122       {
  123          Ds = null_decspecs;
  124          Dc = null_declarator;
  125       }
  126       ext_decl_specifiers(&Ds)
  127       [
  128          declarator(&Dc)
  129          {declare_idf(&Ds, &Dc, L_GLOBAL);
  130           tp = Dc.dc_idf->id_def->df_type;  }
  131          [%if (tp->tp_fund == FUNCTION && tp != Ds.ds_type)
  132             /* int i (1) {2, 3}
  133                is a function, not an old-fashioned
  134                initialization.
  135             */
  136             function(&Dc)
  137          |
  138             non_function(&Ds, &Dc)
  139          ]
  140       |
  141          ';'
  142          {
  143            int fund = Ds.ds_type->tp_fund;
  144
  145            if (fund != UNION && fund != STRUCT && fund != ENUM)
  146               warning("declaration must declare a variable");
  147          }
  148       ]
11:50 AUG 20 '97 zbc$program:g.:ZBC3TSI                                    5    
  149       {remove_declarator(&Dc);}
  150      |
  151       asm_statement        /* top level, would you believe */
  152      ;
  153
  154      ext_decl_specifiers(struct decspecs *ds;) :
  155      %prefer /* the thin ice in  R.M. 11.1 */
  156       decl_specifiers(ds)
  157      |
  158       empty
  159       {do_decspecs(ds);}
  160      ;
  161
  162      non_function(register struct decspecs *ds; register struct declarator *dc;)
  163      :
  164       {
  165        if (dc->dc_formal && dc->dc_formal->fm_type) {
  166          unstack_level();
  167          unstack_level();
  168          }
  169        reject_params(dc, 0);
  170       }
  171       [
  172          initializer(dc->dc_idf, ds->ds_sc, 0)
  173       |
  174          { code_declaration(dc->dc_idf, (struct expr *) 0, level, ds->ds_sc); }
  175       ]
  176       [
  177          ','
  178          init_declarator(ds)
  179       ]*
  180       ';'
  181      ;
  182
  183      /* 10.1 */
  184      function(struct declarator *dc;)
  185       {
11:50 AUG 20 '97 zbc$program:g.:ZBC3TSI                                    6    
  186          arith fbytes, nbytes, typed_list = 0;
  187       }
  188      :
  189       {  register struct idf *idf = dc->dc_idf;
  190
  191          init_idf(idf);
  192          begin_proc(idf->id_text, idf->id_def);
  193          if (!dc->dc_formal || !dc->dc_formal->fm_type)  {
  194             stack_level();    /* L_FORMAL1 declarations */
  195             stack_level();    /* L_FORMAL2 declarations */
  196             }
  197          declare_params(dc);
  198       }
  199       [ declaration {typed_list++;} ]*
  200       {
  201          if (typed_list && dc->dc_formal && dc->dc_formal->fm_type)
  202             error("function prototype parameters have been re-declared!");
  203          declare_formals(&fbytes, dc);
  204       }
  205       compound_statement(&nbytes)
  206       {
  207          unstack_level();  /* L_FORMAL2 declarations */
  208          unstack_level();  /* L_FORMAL1 declarations */
  209          end_proc(fbytes, nbytes);
  210       }
  211      ;
  212

