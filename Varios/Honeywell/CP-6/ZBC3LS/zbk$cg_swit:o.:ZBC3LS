

CC.C03    File=zbk$cg_swit:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             #include "em_mnem.h"
        2         2             #include "cg_tree.h"
        3         3             #include "cg_inst.h"
        4         4             #include "cg_funs.h"
        5         5
        6         6             /* DONT #define CSB_LINEAR -- forces the Binary search */
        7         7
        8         8                    void zbk_gen_switch (EXPR);
        9         9
       10        10             /*---------------------------------------------------------
       11        11             ---   Notes for CSA (dense case - directy indexed)   ------
       12        12             -----------------------------------------------------------
       13        13
       14        14             SWITCH DATA TABLE ---
       15        15
       16        16                 switch (i) {
       17        17                    default:     ptr[default]
       18        18                    case k0+0:   ptr[0]
       19        19                    case k0+1:   ptr[1]
       20        20                    ...          ...
       21        21                    case k0+n-1: ptr[n-1]
       22        22                 }
       23        23                 tbl[0] --> ptr[default]
       24        24                     1      k0
       25        25                     2      n-1
       26        26                     3      ptr[0]
       27        27                     4      ptr[1]
       28        28                     ..     ...
       29        29                     n+2    ptr[n-1]
       30        30
       31        31             SWITCH CODE ---
       32        32
       33        33                     lda  i
       34        34                     sbla tbl[1]      ;(k0)
       35        35                     tmi  L1          ;default if i-k0<0
       36        36                     cmpa tbl[2]      ;(n-1)
       37        37                     tpnz L1          ;default if i-k0>n-1
CC.C03    File=zbk$cg_swit:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       38        38                     lda  tbl[3],al   ;get ptr[i-k0]
       39        39                     tra  0,au        ;transfer to ptr[i-k0]
       40        40                L1:  lda  tbl[0]      ;get ptr[default]
       41        41                     tra  0,au        ;transfer to ptr[default]
       42        42
       43        43             -----------------------------------------------------------
       44        44             ---   Notes for CSB (sparse case - linear search)   -------
       45        45             -----------------------------------------------------------
       46        46
       47        47             SWITCH DATA TABLE ---
       48        48
       49        49                 switch (i) {
       50        50                    default:     ptr[default]
       51        51                    case k[0]:   ptr[0]
       52        52                    case k[1]:   ptr[1]
       53        53                    ...          ...
       54        54                    case k[n-1]: ptr[n-1]
       55        55                 }
       56        56                 tbl[0] --> ptr[default]
       57        57                     1      n
       58        58                     2      k[0]         k[] are in ascending order:
       59        59                     3      ptr[0]       k[0] < k[1] < ... < k[n-1]
       60        60                     4      k[1]
       61        61                     5      ptr[1]
       62        62                     ..     ...
       63        63                     2n+0   k[n-1]
       64        64                     2n+1   ptr[n-1]
       65        65
       66        66             SWITCH CODE ---
       67        67
       68        68                     lda  i
       69        69                     ldq  tbl[1]      ;init index j=n
       70        70                     qls  1           ;maintain doubled index, 2j
       71        71                L1:  sblq 2,dl        ;for 2j = 2n-2, 2n-4, ..., 2, 0
       72        72                     tmi  L2          ;default if not found
       73        73                     cmpa tbl[2],ql   ;compare i with k[j]
       74        74                     tmi  L1          ;i<k[j] ... try next lower j
CC.C03    File=zbk$cg_swit:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       75        75                     tpnz L2          ;i>k[j] ... went past it, so default
       76        76                     lda  tbl[3],ql   ;i==k[j] .. found it! get ptr[j]
       77        77                     tra  0,au        ;transfer to ptr[j]
       78        78                L2:  lda  tbl[0]      ;get ptr[default]
       79        79                     tra  0,au        ;transfer to ptr[default]
       80        80
       81        81             -----------------------------------------------------------
       82        82             ---   Notes for CSB (sparse case - binary search)   -------
       83        83             -----------------------------------------------------------
       84        84
       85        85             SWITCH DATA TABLE ---
       86        86                 (Same as above: CSB)
       87        87
       88        88             SWITCH CODE ---
       89        89
       90        90                     lda  i
       91        91                     ldq  =-2
       92        92                     stq  tmp0        ;init doubled lower bound 2p = -2
       93        93                     ldq  tbl[1]      ;get n
       94        94                     qls  1           ;init doubled upper bound 2q = 2n
       95        95                L1:  stq  tmp1        ;set new upper bound to previous midpoint
       96        96                     adlq tmp0        ;compute new midpoint,
       97        97                L2:  qrs  1           ;   (j = (p+q)/2).
       98        98                     anq  =-2         ;round downwards
       99        99                     cmpq tmp0        ;if midpoint == lower bound,
      100       100                     tze  L4          ;   it's not in case tbl, so default.
      101       101                     cmpa tbl[2],ql   ;compare i with k[j]
      102       102                     tmi  L1          ;i<k[j] ... new range is [p:j]
      103       103                     tpnz L3          ;i>k[j] ... new range is [j:q]
      104       104                     lda  tbl[3],ql   ;i==k[j] .. found it! get ptr[j]
      105       105                     tra  0,au        ;transfer to ptr[j]
      106       106                L3:  stq  tmp0        ;set new lower bound to previous midpoint
      107       107                     adlq tmp1        ;compute new midpoint
      108       108                     tra  L2
      109       109                L4:  lda  tbl[0]      ;get ptr[default]
      110       110                     tra  0,au        ;transfer to ptr[default]
      111       111             */
CC.C03    File=zbk$cg_swit:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      112       112
      113       113             void zbk_gen_switch (EXPR node)
      114       114             {
      115       115    1        ADR tbl, T0, T1;
      116       116    1
      117       117    1        if (node->opcode==op_csa) {
      118       118    2           tbl = expr_is_word_adr (node->rt);
      119       119    2           zbk_expr_to_reg (node->lf, 1<<REG_A);
      120       120    2           instruc (-1,
      121       121    2        /*       INST_LDa,  RA,  REG_A,  i,               */
      122       122    2                 INST_SBLa, RAN, REG_A,  tbl,  1,
      123       123    2                 INST_TMI,  NT,                5,     TAG_IC, /*L1*/
      124       124    2                 INST_CMPa, RAN, REG_A,  tbl,  2,
      125       125    2                 INST_TPNZ, NT,                3,     TAG_IC, /*L1*/
      126       126    2                 INST_LDa,  RANX,REG_A,  tbl,  3,     TAG_A,
      127       127    2                 INST_TRA,  X,                        TAG_AU,
      128       128    2        /*L1:*/  INST_LDa,  RA,  REG_A,  tbl,
      129       129    2                 INST_TRA,  X,                        TAG_AU,
      130       130    2                 -1);
      131       131    2           zbk_release_regn (REG_A);
      132       132    2        }
      133       133    1        else {
      134       134    2
      135       135    2        #ifdef CSB_LINEAR
      136       136   *S*
      137       137   *S*          tbl = expr_is_word_adr (node->rt);
      138       138   *S*          zbk_expr_to_reg (node->lf, 1<<REG_A);
      139       139   *S*          zbk_allocate_regn (REG_Q);
      140       140   *S*          instruc (-1,
      141       141   *S*       /*       INST_LDa,  RA,  REG_A,  i,               */
      142       142   *S*                INST_LDa,  RAN, REG_Q,  tbl,  1,
      143       143   *S*                INST_aLS,  RN,  REG_Q,        1,
      144       144   *S*       /*L1:*/  INST_SBLa, RNT, REG_Q,        2,     TAG_DL,
      145       145   *S*                INST_TMI,  NT,                6,     TAG_IC, /*L2*/
      146       146   *S*                INST_CMPa, RANX,REG_A,  tbl,  2,     TAG_Q,
      147       147   *S*                INST_TMI,  NT,               -3,     TAG_IC, /*L1*/
      148       148   *S*                INST_TPNZ, NT,                3,     TAG_IC, /*L2*/
CC.C03    File=zbk$cg_swit:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      149       149   *S*                INST_LDa,  RANX,REG_A,  tbl,  3,     TAG_Q,
      150       150   *S*                INST_TRA,  X,                        TAG_AU,
      151       151   *S*       /*L2:*/  INST_LDa,  RA,  REG_A,  tbl,
      152       152   *S*                INST_TRA,  X,                        TAG_AU,
      153       153   *S*                -1);
      154       154   *S*          zbk_release_regn (REG_A);
      155       155   *S*          zbk_release_regn (REG_Q);
      156       156   *S*       }
      157       157   *S*
      158       158   *S*       #else
      159       159    2
      160       160    2           tbl = expr_is_word_adr (node->rt);
      161       161    2           T0 = zbk_make_adr_temp (4);
      162       162    2           T1 = zbk_make_adr_temp (4);
      163       163    2
      164       164    2           zbk_expr_to_reg (node->lf, 1<<REG_A);
      165       165    2           zbk_allocate_regn (REG_Q);
      166       166    2           instruc (-1,
      167       167    2        /*       INST_LDa,  RA,  REG_A,  i,               */
      168       168    2                 INST_LDa,  RC,  REG_Q,  -2L,
      169       169    2                 INST_STa,  RA,  REG_Q,  T0,
      170       170    2                 INST_LDa,  RAN, REG_Q,  tbl,  1,
      171       171    2                 INST_aLS,  RN,  REG_Q,        1,
      172       172    2        /*L1:*/  INST_STa,  RA,  REG_Q,  T1,
      173       173    2                 INST_ADLa, RA,  REG_Q,  T0,
      174       174    2        /*L2:*/  INST_aRS,  RN,  REG_Q,        1,
      175       175    2                 INST_ANa,  RC,  REG_Q,  -2L,
      176       176    2                 INST_CMPa, RA,  REG_Q,  T0,
      177       177    2                 INST_TZE,  NT,                9,     TAG_IC, /*L4*/
      178       178    2                 INST_CMPa, RANX,REG_A,  tbl,  2,     TAG_Q,
      179       179    2                 INST_TMI,  NT,               -7,     TAG_IC, /*L1*/
      180       180    2                 INST_TPNZ, NT,                3,     TAG_IC, /*L3*/
      181       181    2                 INST_LDa,  RANX,REG_A,  tbl,  3,     TAG_Q,
      182       182    2                 INST_TRA,  X,                        TAG_AU,
      183       183    2        /*L3:*/  INST_STa,  RA,  REG_Q,  T0,
      184       184    2                 INST_ADLa, RA,  REG_Q,  T1,
      185       185    2                 INST_TRA,  NT,               -11,    TAG_IC, /*L2*/
CC.C03    File=zbk$cg_swit:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      186       186    2        /*L4:*/  INST_LDa,  RA,  REG_A,  tbl,
      187       187    2                 INST_TRA,  X,                        TAG_AU,
      188       188    2                 -1);
      189       189    2           zbk_release_regn (REG_A);
      190       190    2           zbk_release_regn (REG_Q);
      191       191    2        }
      192       192    1
      193       193    1        #endif
      194       194    1        }
---  Include file information  ---

   em_mnem:h.:ZBC3TOU. is referenced
   zbk$cg_tree:h.:ZBC3TOU. is referenced
   zbk$cg_inst:h.:ZBC3TOU. is referenced
   zbk$cg_funs:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbk$cg_swit:c.:ZBC3TSI
