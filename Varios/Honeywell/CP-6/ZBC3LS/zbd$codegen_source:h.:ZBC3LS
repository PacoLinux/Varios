

12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             1    
    1      /*******************************************
    2       *                                         *
    3       *   Interface between Code Gen & OU Gen   *
    4       *                                         *
    5       *******************************************/
    6
    7      /*************************************************************************
    8      Notes on instruction formats -------
    9
   10      General format notes -------
   11
   12           - Each instruction or pseudo-op produced by CodeGen consists of one line:
   13                <opcase#> <arg1>,<arg2>,...,<argn>
   14             where each arg is -
   15               (a)  an unsigned decimal integer, or
   16               (b)  a literal preceded by '=', or
   17               (c)  [for certain pseudo-ops] a symbol name
   18                    in the form of a text string.
   19
   20             For instance, the ACTUAL line
   21                1 5,100,9,18
   22             corresponding to the PARAMETERIZED line
   23                ZLDG ZA,100,ZX1,ZP2
   24             is meant to correspond to the L66 instruction
   25                LDA 100,X1,PR2
   26
   27           - Trailing default fields are omitted.  Thus,
   28                 12 6,18     [actual line]
   29                 ZGLS ZQ,18  [parameterized line]
   30                 QLS  18     [actual instruction]
   31              has default xr/tag and preg field values (ie, zeros).
   32
   33            - For normal instructions that allow literals,
   34              an <arg> may be a literal value preceded by '='.
   35              The value may be (a) a decimal integer, as in ...
   36                 1 6,=10     [actual line]
   37                 ZLDG ZQ,=10 [parameterized line]
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             2    
   38                 LDQ  =10    [actual instruction]
   39              or (b) a relocatable symbol, as in ...
   40                 13 6,=abc      [actual line]
   41                 ZADG ZQ,=abc   [parameterized line]
   42                 ADQ  =ptr(abc) [actual instruction]
   43              where 'ptr(x)' represents a one-word constant, which
   44              is a pointer to 'x'.
   45
   46            - Some pseudo-ops can have symbol strings as args:
   47                 69 ab,cd    [actual line]
   48                 ZEQU ab,cd  [parameterized line]
   49                 ab EQU cd   [actual pseudo-op]
   50
   51
   52      Specific format notes --------
   53
   54         Standard instruction format:
   55           (applies to normal instructions like LDA, LDX0, DIV)
   56               op        word-ofs, xr/tag, pr
   57           should gen
   58               op        word-ofs, xr/tag, pr
   59
   60
   61         Generic A/Qreg instruction format:
   62           (applies to derived instructions like ZLDG, ZSTG)
   63               op        AQreg, word-ofs, xr/tag, pr
   64                         ( ^ is either ZA or ZQ)
   65           should gen
   66               opA/opQ   word-ofs, xr/tag, pr
   67
   68
   69         Two-arg EIS instruction format:
   70           (currently applies only to MLR with constant lengths & fill=0)
   71               ZMLR      word-ofs1, byte-ofs1, xr1, pr1, len1, word-ofs2, byte-ofs2, xr2, pr2, len2
   72           should gen
   73               MLR       ([pr1>0],0,0,xr1), ([pr2>0],0,0,xr2), 0
   74               ADSC9     word-ofs1, byte-ofs1, len1, [pr1]
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             3    
   75               ADSC9     word-ofs2, byte-ofs2, len2, [pr2]
   76
   77       *************************************************************************/
   78
   79
   80
   81      /***************************
   82       *  Op cases               *
   83       ***************************/
   84
   85      /* generic A/Q format:  [Zop r,a,x,p] --> [ opA/Q a,x,p]  */
   86
   87      #define ZLDG         @
   88      #define ZLCG         @
   89      #define ZSTG         @
   90      #define ZLDX         @
   91      #define ZSTX         @
   92      #define ZADX         @
   93      #define ZASX         @
   94      #define ZLXL         @
   95      #define ZSXL         @
   96      #define ZEAX         @
   97      #define ZEAG         @
   98      #define ZLDP         @
   99      #define ZSTP         @
  100      #define ZEPPR        @
  101
  102      #define ZADG         @
  103      #define ZADLG        @
  104      #define ZSBG         @
  105      #define ZSBLG        @
  106      #define ZASG         @
  107      #define ZCMPG        @
  108      #define ZANG         @
  109      #define ZORG         @
  110      #define ZERG         @
  111      #define ZERSG        @
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             4    
  112
  113      #define ZGLS         @
  114      #define ZGLR         @
  115      #define ZGRS         @
  116      #define ZGRL         @
  117
  118      /* standard inst format:  [Zop a,x,p] --> [ op a,x,p]  */
  119
  120      #define ZLDA         @
  121      #define ZLDQ         @
  122      #define ZSTQ         @
  123      #define ZADLQ        @
  124      #define ZSBQ         @
  125      #define ZSBLA        @
  126      #define ZSBLQ        @
  127      #define ZANQ         @
  128      #define ZQLS         @
  129      #define ZQRS         @
  130      #define ZLDE         @
  131      #define ZSTZ         @
  132      #define ZAOS         @
  133      #define ZSZN         @
  134      #define ZSTI         @
  135
  136      #define ZMPY         @
  137      #define ZDIV         @
  138      #define ZDVF         @
  139      #define ZNEG         @
  140      #define ZCMPA        @
  141      #define ZCMPQ        @
  142      #define ZARL         @
  143      #define ZLLS         @
  144      #define ZLRS         @
  145      #define ZLRL         @
  146
  147      #define ZFLD         @
  148      #define ZFST         @
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             5    
  149      #define ZFAD         @
  150      #define ZFSB         @
  151      #define ZFMP         @
  152      #define ZFDV         @
  153      #define ZFDI         @
  154      #define ZFCMP        @
  155      #define ZFSZN        @
  156      #define ZDFLD        @
  157      #define ZDFST        @
  158      #define ZDFAD        @
  159      #define ZDFSB        @
  160      #define ZDFMP        @
  161      #define ZDFDV        @
  162      #define ZDFDI        @
  163      #define ZDFCMP       @
  164      #define ZFNEG        @
  165      #define ZUFA         @
  166
  167      #define ZLDAQ        @
  168      #define ZSTAQ        @
  169
  170      #define ZLDX0        @
  171      #define ZLDX7        @
  172      #define ZEPPR0       @
  173      #define ZEPPR1       @
  174      #define ZEPPR7       @
  175      #define ZLDP0        @
  176      #define ZSTP0        @
  177      #define ZSTP7        @
  178      #define ZA9BD        @
  179      #define ZNOP         @
  180      #define ZTSX0        @
  181      #define ZTSX1        @
  182      #define ZTSX2        @
  183      #define ZTMI         @
  184      #define ZTMOZ        @
  185      #define ZTEQ         @
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             6    
  186      #define ZTNE         @
  187      #define ZTPL         @
  188      #define ZTZE         @
  189      #define ZTNC         @
  190      #define ZTRC         @
  191      #define ZTTN         @
  192      #define ZTTF         @
  193      #define ZTRCANE      @
  194      #define ZTNCOEQ      @
  195      #define ZTPNZ        @
  196      #define ZTRA         @
  197
  198      /* special-address instructions (see comments on each op): */
  199
  200      #define ZA9BDX7      @    /* [ZA9BDX7   p]  --> [A9BD 0,X7,p  ] */
  201      #define ZA9BDX7P7    @    /* [ZA9BDX7P7  ]  --> [A9BD 0,X7,PR7] */
  202
  203      /* EIS inst formats:
  204
  205      Special "stacking" EIS instructions:
  206
  207      -  ZMLR4  a1,x1,p1, a2,x2,p2
  208      -  ZMLR8  ...
  209           should gen
  210               MLR       ([p1>0],0,0,x1), ([p2>0],0,0,x2), 0
  211               ADSC9     a1,0,4/8,p1
  212               ADSC9     a2,0,4/8,p2
  213
  214      -  ZMLR1  a1,b1,x1,p1,1, a2,x2,p2
  215           should gen
  216               MLR       ([p1>0], 0, 0, x1), ([p2>0], 0, 0, x2), 0
  217               ADSC9     a1, b1, 1, p1    ;len = 1 always
  218               ADSC9     a2, 3,  1, p2    ;(") & byte displacement = 3 always
  219
  220      Normal EIS instructions:
  221
  222      -  ZMLR[X]   a1,b1,x1,p1,N1/*Y1, a2,b2,x2,p2,N2/*Y2
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             7    
  223           should gen
  224               MLR       ([p1>0], 0, *0/1, x1), ([p2>0], 0, *0/1, x2), 0
  225               ADSC9     a1, b1, N1/*Y1, p1   ;len is N1 (const) or *Y1 (xreg)
  226               ADSC9     a2, b2, N2/*Y2, p2   ;len is N2 (const) or *Y2 (xreg)
  227
  228      -  ZMRL      a1,b1,x1,p1,N1, a2,b2,x2,p2,N2
  229      -  ZMRLX     a1,b1,x1,p1,Y1, a2,b2,x2,p2,Y2
  230      -  ZCMPC     a1,b1,x1,p1,N1, a2,b2,x2,p2,N2
  231      -  ZCMPCX    a1,b1,x1,p1,Y1, a2,b2,x2,p2,Y2
  232           (similar to MLR[X] above, but with op = MRL, CMPC)
  233
  234      -  ZSCM[X]   a1,b1,x1,p1,N1/*Y1, a2,b2,x2,p2,N2/*Y2, a3,,p3
  235           should gen
  236               SCM       ([p1>0],0,0,x1), ([p2>0],0,0,x2), 0
  237               ARG       a3,p3
  238               SCM       ([p1>0], 0, *0/1, x1), ([p2>0], 0, *0/1, x2), 0
  239               ADSC9     a1, b1, N1/*Y1, p1   ;len is N1 (const) or *Y1 (xreg)
  240               ADSC9     a2, b2, N2/*Y2, p2   ;len is N2 (const) or *Y2 (xreg)
  241               ARG       a3,p3                ;note: there's never an x3 spec since
  242                                              ;   there's no MF3 field to put it in.
  243
  244      -  ZSCMR[X]  a1,b1,x1,p1,N1, a2,b2,x2,p2,N2, a3,,p3
  245           (similar to SCM[X] above, but with op = SCMR)
  246      */
  247      #define ZMLR4        @ /* [ZMLR4  a1,   x1,p1,    a2,x2,p2] */
  248      #define ZMLR8        @ /* [ZMLR8  a1,   x1,p1,    a2,x2,p2] */
  249      #define ZMLR1        @ /* [ZMLR1  a1,b1,x1,p1,1,  a2,x2,p2] */
  250
  251      #define ZMLR         @ /* [ZMLR   a1,b1,x1,p1,N1, a2,b2,x2,p2,N2] */
  252      #define ZMLRX        @ /* [ZMLRX  a1,b1,x1,p1,Y1, a2,b2,x2,p2,Y2] */
  253      #define ZMRL         @ /* [ZMRL   a1,b1,x1,p1,N1, a2,b2,x2,p2,N2] */
  254      #define ZMRLX        @ /* [ZMRLX  a1,b1,x1,p1,Y1, a2,b2,x2,p2,Y2] */
  255      #define ZCMPC        @ /* [ZCMPC  a1,b1,x1,p1,N1, a2,b2,x2,p2,N2] */
  256      #define ZCMPCX       @ /* [ZCMPCX a1,b1,x1,p1,Y1, a2,b2,x2,p2,Y2] */
  257      #define ZSCM         @ /* [ZSCM   a1,b1,x1,p1,N1, a2,b2,x2,p2,N2, a3,,p3] */
  258      #define ZSCMX        @ /* [ZSCMX  a1,b1,x1,p1,Y1, a2,b2,x2,p2,Y2, a3,,p3] */
  259      #define ZSCMR        @ /* [ZSCMR  a1,b1,x1,p1,N1, a2,b2,x2,p2,N2, a3,,p3] */
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             8    
  260      #define ZSCMRX       @ /* [ZSCMRX a1,b1,x1,p1,Y1, a2,b2,x2,p2,Y2, a3,,p3] */
  261
  262      /* special Branching inst format:
  263
  264          [ZB..  type, label,tag]
  265          where  type==1 means normal   signed   args
  266                 type==2 means reversed signed   args
  267                 type==3 means normal   unsigned args
  268                 type==4 means reversed unsigned args
  269
  270                      type ==    1       2       3       4     */
  271      #define ZBLT         @ /* TMI     TPNZ    TNC     TRCANE */
  272      #define ZBLE         @ /* TMOZ    TPL     TNCOEQ  TRC    */
  273      #define ZBEQ         @ /* TZE     TZE     TZE     TZE    */
  274      #define ZBNE         @ /* TNZ     TNZ     TNZ     TNZ    */
  275      #define ZBGE         @ /* TPL     TMOZ    TRC     TNCOEQ */
  276      #define ZBGT         @ /* TPNZ    TMI     TRCANE  TNC    */
  277       /*
  278      where  "TNCOEQ" means "Transfer on No Carry, Or EQual",
  279      and translates to two instructions:
  280         TNC label
  281         TZE label
  282
  283      and    "TRCANE" means "TRansfer on Carry, And Not Equal",
  284      and translates to two instructions:
  285         TNC 2,IC
  286         TNZ label
  287       */
  288
  289      /* special integer/float convert-and-load instructions */
  290      #define ZCIF         @    /* [ZCIF i]     --> [ FLD/DFLD =f] */
  291      #define ZCUF         @    /* [ZCUF u]     --> [ FLD/DFLD =f] */
  292      #define ZCID         @    /* [ZCID i]     --> [ FLD/DFLD =f] */
  293      #define ZCUD         @    /* [ZCUD u]     --> [ FLD/DFLD =f] */
  294      #define ZCFI         @    /* [ZCFI lbl]   --> [ LDQ =i] */
  295      #define ZCFU         @    /* [ZCFU lbl]   --> [ LDQ =u] */
  296      #define ZCDI         @    /* [ZCDI lbl]   --> [ LDQ =i] */
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             9    
  297      #define ZCDU         @    /* [ZCDU lbl]   --> [ LDQ =u] */
  298
  299      /* pseudo-op formats (see comments on each op): */
  300
  301      #define ZUSE         @    /* [ZUSE n]     --> [ USE n,p]    */
  302      /*      "ZUSE 0" means: switch to  TXT  section.
  303              "ZUSE 1" means: switch to  CON  section.
  304              "ZUSE 2" means: switch to  ROM  section.
  305              "ZUSE 3" means: switch to  BSS  section.  */
  306      #define ZFIL         @    /* [ZFIL s]     --> (set the File Name) */
  307      #define ZLIN         @    /* [ZLIN n]     --> (set the Line Number) */
  308      #define ZLNI         @    /* [ZLNI]       --> (increment the Line Number) */
  309      #define ZHALF        @    /* [ZHALF n,m]  --> [ ZERO n,m]   */
  310      #define ZOCT         @    /* [ZOCT n]     --> [ OCT n]      */
  311      #define ZDEC         @    /* [ZDEC n]     --> [ DEC n]      */
  312      #define ZPTR         @    /* [ZPTR s]     --> [ HALF s,seg] */
  313      #define ZEPTR        @    /* [ZEPTR s]    --> [ HALF s,0]   */
  314      #define ZNULL        @    /* [ZNULL s]    --> [s NULL]      */
  315      #define ZFLOAT       @    /* [ZFLOAT f]   --> [(f.p. const)]*/
  316      #define ZDFLOAT      @    /* [ZDFLOAT f]  --> [(f.p. const)]*/
  317      #define ZEQU         @    /* [ZEQU s1,s2] --> [s1 EQU s2]   */
  318      #define ZBSS         @    /* [ZBSS s,n]   --> [s BSS n]     */
  319      #define ZDEF         @    /* [ZDEF s]     --> [ ENT/SYMDEF s] */
  320      #define ZDUMMY       @    /* [ZDUMMY x]   --> [does nothing!] */
  321
  322      #define ZERROR     999    /* [ZERROR n]   --> [ ??? n]      */
  323      /* note: generation of ZERROR reflects certain errors during Code Gen */
  324
  325      /* pseudo-op formats for messages (see comments in "ps_cp6_ops:h") */
  326
  327      #define PS_STMT_OP   @
  328      #define PS_LBL_OP    @
  329      #define PS_BLK_OP    @
  330      #define PS_VAR_OP    @
  331      #define PS_FUN_OP    @
  332      #define PS_CTLN_OP   @
  333      #define PS_SFUN_OP   @
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             10   
  334      #define PS_RFUN_OP   @
  335
  336      /***************************
  337       *  A/Qreg field codes     *
  338       ***************************/
  339
  340      #define ZA           5
  341      #define ZQ           6
  342
  343      /*  note: these parameters may appear
  344                      (a) as a/q register specs for ZLDG etc;
  345               or     (b) as xr specs for ZMLR etc (and so, should have
  346                          the same values as ZAL, ZQL).
  347
  348
  349      /***************************
  350       *  Xreg/Tag field codes   *
  351       ***************************/
  352
  353      #define ZAU          1
  354      #define ZQU          2
  355      #define ZDU          3
  356      #define ZIC          4
  357      #define ZAL          5
  358      #define ZQL          6
  359      #define ZDL          7
  360
  361      #define ZN           0    /*default*/
  362      #define ZX0          8
  363      #define ZX1          9
  364      #define ZX2         10
  365      #define ZX3         11
  366      #define ZX4         12
  367      #define ZX5         13
  368      #define ZX6         14
  369      #define ZX7         15
  370
12:19 AUG 20 '97 zbd$codegen_source:h.:ZBC3TSI                             11   
  371
  372      /***************************
  373       *  Preg field codes       *
  374       ***************************/
  375
  376      #define ZP0         16
  377      #define ZP1         17
  378      #define ZP2         18
  379      #define ZP3         19
  380      #define ZP4         20
  381      #define ZP5         21
  382      #define ZP6         22
  383      #define ZP7         23
  384

