

CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /* $Header: il_aux.c,v 1.4 87/03/10 11:18:18 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6
        7         7             /*  I N L I N E   S U B S T I T U T I O N
        8         8              *
        9         9              *  I L _ A U X . C
       10        10              */
       11        11
       12        12             #include <stdio:h>
       13        13             #include "types:h"
       14        14             #include "il:h"
       15        15             #include "debug:h"
       16        16             #include "get:h"
       17        17             #include "put:h"
       18        18             #include "alloc:h"
       19        19             #include "global:h"
       20        20             #include "lset:h"
       21        21             #include "map:h"
       22        22             #include "em_spec:h"
       23        23             #include "em_mnem:h"
       24        24             #include "em_pseu:h"
       25        25             #include "il_aux:h"
       26        26
       27        27
       28        28             int tsize(type)
       29        29              int type;
       30        30             {
       31        31    1         /* Determine the size of a variable of the
       32        32    1          *  given type.
       33        33    1          */
       34        34    1
       35        35    1         switch(type) {
       36        36    2            case SINGLE:   return ws;
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37    2            case DOUBLE:   return 2*ws;
       38        38    2            case POINTER:  return ps;
       39        39    2            default: assert(FALSE);
       40        40    2         }
       41        41    1         /* NOTREACHED */
       42        42    1        }
       43        43
       44        44
       45        45
       46        46             line_p duplicate(lnp)
       47        47              line_p lnp;
       48        48             {
       49        49    1         /* Make a duplicate of an EM instruction.
       50        50    1          * Pseudos may not be passed as argument.
       51        51    1          */
       52        52    1
       53        53    1         line_p l;
       54        54    1
       55        55    1         l = newline(TYPE(lnp));
       56        56    1         l->l_instr = INSTR(lnp);
       57        57    1         switch(TYPE(l)) {
       58        58    2            case OPNO:
       59        59    2               break;
       60        60    2            case OPSHORT:
       61        61    2               SHORT(l) = SHORT(lnp);
       62        62    2               break;
       63        63    2            case OPOFFSET:
       64        64    2               OFFSET(l) = OFFSET(lnp);
       65        65    2               break;
       66        66    2            case OPINSTRLAB:
       67        67    2               INSTRLAB(l) = INSTRLAB(lnp);
       68        68    2               break;
       69        69    2            case OPOBJECT:
       70        70    2               OBJ(l) = OBJ(lnp);
       71        71    2               break;
       72        72    2            case OPPROC:
       73        73    2               PROC(l) = PROC(lnp);
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    2               break;
       75        75    2            default:
       76        76    2               assert(FALSE); /* cannot copy pseudo */
       77        77    2         }
       78        78    1         return l;
       79        79    1        }
       80        80
       81        81
       82        82
       83        83
       84        84             line_p copy_expr(l1)
       85        85              line_p l1;
       86        86             {
       87        87    1         /* copy the expression */
       88        88    1
       89        89    1         line_p head, tail, l, lnp;
       90        90    1
       91        91    1         head = (line_p) 0;
       92        92    1         for (lnp = l1; lnp != (line_p) 0; lnp = lnp->l_next) {
       93        93    2            l = duplicate(lnp);
       94        94    2            if (head == (line_p) 0) {
       95        95    3               head = tail = l;
       96        96    3               PREV(l) = (line_p) 0;
       97        97    3            } else {
       98        98    3               tail->l_next = l;
       99        99    3               PREV(l) = tail;
      100       100    3               tail = l;
      101       101    3           tail->l_next = (line_p) 0;
      102       102    3            }
      103       103    2         }
      104       104    1         return head;
      105       105    1        }
      106       106
      107       107
      108       108
      109       109             rem_call(c)
      110       110              call_p c;
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111             {
      112       112    1         actual_p act, nexta;
      113       113    1         call_p   nc,nextc;
      114       114    1         line_p   l,   nextl;
      115       115    1
      116       116    1         for (act = c->cl_actuals; act != (actual_p) 0; act = nexta) {
      117       117    2            nexta = act->ac_next;
      118       118    2            for (l = act->ac_exp; l != (line_p) 0; l = nextl) {
      119       119    3               nextl = l->l_next;
      120       120    3           oldcore(l, sizeof(struct line));
      121       121    3            }
      122       122    2            oldactual(act);
      123       123    2         }
      124       124    1         nc = c->cl_car;
      125       125    1         oldcall(c);
      126       126    1         for (; nc != (call_p) 0; nc = nextc) {
      127       127    2            /* Take care of nested calls */
      128       128    2            nextc = nc->cl_cdr;
      129       129    2            rem_call(nc);
      130       130    2         }
      131       131    1        }
      132       132
      133       133
      134       134
      135       135             /* rem_graph */
      136       136
      137       137             STATIC short remlines(l)
      138       138              line_p l;
      139       139             {
      140       140    1
      141       141    1         register line_p lnp;
      142       142    1         line_p next;
      143       143    1
      144       144    1         for (lnp = l; lnp != (line_p) 0; lnp = next) {
      145       145    2            next = lnp->l_next;
      146       146    2          oldcore(lnp, sizeof(struct line));
      147       147    2         }
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    1        }
      149       149
      150       150
      151       151
      152       152             remunit(kind,p,l)
      153       153              short    kind;
      154       154              proc_p   p;
      155       155              line_p   l;
      156       156             {
      157       157    1         register bblock_p b;
      158       158    1         bblock_p next;
      159       159    1         Lindex   pi;
      160       160    1
      161       161    1         if (kind == LDATA) {
      162       162    2            remlines(l);
      163       163    2            return;
      164       164    2         }
      165       165    1         for (b = p->p_start; b != (bblock_p) 0; b = next) {
      166       166    2            next = b->b_next;
      167       167    2            remlines(b->b_start);
      168       168    2            Ldeleteset(b->b_loops);
      169       169    2            Ldeleteset(b->b_succ);
      170       170    2            Ldeleteset(b->b_pred);
      171       171    2            oldbblock(b);
      172       172    2         }
      173       173    1         for (pi = Lfirst(p->p_loops); pi != (Lindex) 0;
      174       174    1                      pi = Lnext(pi,p->p_loops)) {
      175       175    2            oldloop(Lelem(pi));
      176       176    2         }
      177       177    1         Ldeleteset(p->p_loops);
      178       178    1         oldmap(lmap,llength);
      179       179    1         oldmap(lbmap,llength);
      180       180    1         oldmap(bmap,blength);
      181       181    1         oldmap(lpmap,lplength);
      182       182    1        }
      183       183             remcc(head)
      184       184              calcnt_p head;
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185             {
      186       186    1         calcnt_p cc, next;
      187       187    1
      188       188    1         for (cc = head; cc != (calcnt_p) 0; cc = next) {
      189       189    2            next = cc->cc_next;
      190       190    2            oldcalcnt(cc);
      191       191    2         }
      192       192    1        }
      193       193
      194       194
      195       195             /* Extra I/O routines */
      196       196
      197       197             call_p getcall(cf)
      198       198              FILE *cf;
      199       199             {
      200       200    1         /* read a call from the call-file */
      201       201    1
      202       202    1         call_p c;
      203       203    1         proc_p voided;
      204       204    1         actual_p act,*app;
      205       205    1         short n,m;
      206       206    1
      207       207    1         curinp = cf;
      208       208    1         c = newcall();
      209       209    1         n = getshort(); /* void nesting level */
      210       210    1         if (feof(curinp)) return (call_p) 0;
      211       211    1         c->cl_caller = pmap[getshort()];
      212       212    1         c->cl_id     = getshort();
      213       213    1         c->cl_proc   = pmap[getshort()];
      214       214    1         c->cl_looplevel = getbyte();
      215       215    1         c->cl_flags = getbyte();
      216       216    1         c->cl_ratio  = getshort();
      217       217    1         c->cl_cdr = (call_p) 0;
      218       218    1         c->cl_car = (call_p) 0;
      219       219    1         app = &c->cl_actuals;
      220       220    1         n = getshort();
      221       221    1         while(n--) {
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      222       222    2            act = newactual();
      223       223    2            m = getshort();
      224       224    2            act->ac_size = getoff();
      225       225    2            act->ac_inl = getbyte();
      226       226    2            act->ac_exp = getlines(cf,m,&voided);
      227       227    2            *app = act;
      228       228    2            app = &act->ac_next;
      229       229    2          act->ac_next = (actual_p) 0;
      230       230    2         }
      231       231    1         *app = (actual_p) 0;
      232       232    1         return c;
      233       233    1        }
      234       234
      235       235
      236       236
      237       237             line_p get_text_new(p_out)
      238       238              proc_p *p_out;
      239       239             {
      240       240    1         /* Read the EM text of one unit
      241       241    1          * If it is a procedure, set p_out to
      242       242    1          * the proc. just read. Else set p_out
      243       243    1          * to 0.
      244       244    1          */
      245       245    1
      246       246    1         line_p dumhead, l, lprev,old_l;
      247       247    1         short oldllength = llength;
      248       248    1         short oldlastlabid = lastlabid;
      249       249    1         line_p get_next_il_line();
      250       250    1
      251       251    1         *p_out = (proc_p) 0;
      252       252    1         dumhead = newline(OPNO);
      253       253    1         /* The list of instructions is preceeded by a dummy
      254       254    1          * line, to simplify list manipulation
      255       255    1          */
      256       256    1         dumhead->l_instr = op_nop; /* just for fun */
      257       257    1         lprev = dumhead;
      258       258    1         for (;;) {
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      259       259    2          old_l = get_next_il_line(p_out);
      260       260    2          lprev->l_next = (line_p) 0; /* set null incase.... */
      261       261    2            if (old_l ==(line_p) 0) {
      262       262    3            if (lprev == dumhead) { return (line_p) 0; }
      263       263    3            else { return dumhead; }
      264       264    3          }
      265       265    2          l = newline(TYPE(old_l));
      266       266    2          l->l_instr = old_l->l_instr;
      267       267    2          l->l_a = old_l->l_a;
      268       268    2            lprev->l_next = l;
      269       269    2            PREV(l) = lprev;
      270       270    2            if (INSTR(l) == ps_end) break;
      271       271    2            if (INSTR(l) == ps_mes) {
      272       272    3               message(l);
      273       273    3            }
      274       274    2            lprev = l;
      275       275    2         }
      276       276    1         /* The tables that map labels to instructions
      277       277    1          * and labels to basic blocks are not used.
      278       278    1          */
      279       279    1        /*  if (*p_out != (proc_p) 0) {    - NOT NECESSARY
      280       280    1            oldmap(lmap,llength);
      281       281    1            oldmap(lbmap,llength);
      282       282    1            lmap = oldlmap;
      283       283    1            lpmap = oldlpmap;
      284       284    1         }    -   END OF NOT NECESSARY CODE. */
      285       285    1         llength = oldllength;
      286       286    1         lastlabid = oldlastlabid;
      287       287    1         return dumhead;
      288       288    1        }
      289       289
      290       290
      291       291             line_p get_text(p_out)
      292       292              proc_p *p_out;
      293       293             {
      294       294    1         /* Read the EM text of one unit
      295       295    1          * If it is a procedure, set p_out to
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      296       296    1          * the proc. just read. Else set p_out
      297       297    1          * to 0.
      298       298    1          */
      299       299    1
      300       300    1         line_p dumhead, l, lprev;
      301       301    1         loop_p *oldlpmap = lpmap;
      302       302    1         line_p *oldlmap = lmap;
      303       303    1         short oldllength = llength;
      304       304    1         short oldlastlabid = lastlabid;
      305       305    1        line_p get_next_line();
      306       306    1
      307       307    1         *p_out = (proc_p) 0;
      308       308    1         dumhead = newline(OPNO);
      309       309    1         /* The list of instructions is preceeded by a dummy
      310       310    1          * line, to simplify list manipulation
      311       311    1          */
      312       312    1         dumhead->l_instr = op_nop; /* just for fun */
      313       313    1         lprev = dumhead;
      314       314    1         for (;;) {
      315       315    2            l = get_next_line(p_out);
      316       316    2            lprev->l_next = l;
      317       317    2          if (l == (line_p) 0) {
      318       318    3            if (lprev == dumhead) {return (line_p) 0; }
      319       319    3            else { return dumhead; }  }
      320       320    2            PREV(l) = lprev;
      321       321    2            if (INSTR(l) == ps_end) break;
      322       322    2            if (INSTR(l) == ps_mes) {
      323       323    3               message(l);
      324       324    3            }
      325       325    2            lprev = l;
      326       326    2         }
      327       327    1         /* The tables that map labels to instructions
      328       328    1          * and labels to basic blocks are not used.
      329       329    1          */
      330       330    1         if (*p_out != (proc_p) 0) {
      331       331    2            oldmap(lmap,llength);
      332       332    2            oldmap(lbmap,llength);
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      333       333    2            lmap = oldlmap;
      334       334    2            lpmap = oldlpmap;
      335       335    2         }
      336       336    1         llength = oldllength;
      337       337    1         lastlabid = oldlastlabid;
      338       338    1         return dumhead;
      339       339    1        }
      340       340
      341       341
      342       342
      343       343             calcnt_p getcc(ccf,p)
      344       344              FILE *ccf;
      345       345              proc_p p;
      346       346             {
      347       347    1         /* Get call-count info of procedure p */
      348       348    1
      349       349    1         calcnt_p head,cc,*ccp;
      350       350    1         short i;
      351       351    1
      352       352    1         fseek(ccf,p->p_extend->px_il.p_ccaddr,0);
      353       353    1         curinp = ccf;
      354       354    1         head = (calcnt_p) 0;
      355       355    1         ccp = &head;
      356       356    1         for (i = getshort(); i != (short) 0; i--) {
      357       357    2            cc = *ccp = newcalcnt();
      358       358    2            cc->cc_proc = pmap[getshort()];
      359       359    2            cc->cc_count = getshort();
      360       360    2            ccp = &cc->cc_next;
      361       361    2          cc->cc_next = (calcnt_p) 0;
      362       362    2         }
      363       363    1         return head;
      364       364    1        }
      365       365
      366       366
      367       367             /* The following routines are only used by the Inline Substitution phase */
      368       368
      369       369
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      370       370             STATIC putactuals(alist,cfile)
      371       371              actual_p alist;
      372       372              FILE     *cfile;
      373       373             {
      374       374    1         /* output a list of actual parameters */
      375       375    1
      376       376    1         actual_p a,next;
      377       377    1         line_p l;
      378       378    1         int count;
      379       379    1         extern int il_act_arg_flag;
      380       380    1
      381       381    1         count = 0;
      382       382    1         for (a = alist; a != (actual_p) 0; a = a->ac_next) count++;
      383       383    1         outshort(count); /* number of actuals */
      384       384    1         for (a = alist; a != (actual_p) 0; a = next) {
      385       385    2            next = a->ac_next;
      386       386    2            count = 0;
      387       387    2            for (l = a->ac_exp; l != (line_p) 0; l= l->l_next) count++;
      388       388    2            outshort(count); /* length of actual */
      389       389    2            outoff(a->ac_size);
      390       390    2            outbyte(a->ac_inl);
      391       391    2            count = putlines(a->ac_exp,cfile);
      392       392    2            if (il_act_arg_flag == 0) {
      393       393    3              oldactual(a);   }
      394       394    2         }
      395       395    1        }
      396       396
      397       397
      398       398
      399       399             putcall(c,cfile,level)
      400       400              call_p c;
      401       401              FILE   *cfile;
      402       402              short  level;
      403       403             {
      404       404    1         /* output a call */
      405       405    1
      406       406    1         call_p nc,nextc;
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      407       407    1
      408       408    1
      409       409    1         curoutp = cfile;
      410       410    1         outshort(level);  /* nesting level */
      411       411    1         outshort(c->cl_caller->p_id); /* calling proc */
      412       412    1         outshort(c->cl_id);
      413       413    1         outshort(c->cl_proc->p_id);   /* called proc */
      414       414    1         outbyte(c->cl_looplevel);
      415       415    1         outbyte(c->cl_flags);
      416       416    1         outshort(c->cl_ratio);
      417       417    1         putactuals(c->cl_actuals,cfile);
      418       418    1         nc = c->cl_car;
      419       419    1         oldcall(c);
      420       420    1         for (; nc != (call_p) 0; nc = nextc) {
      421       421    2            /* take care of nested calls */
      422       422    2            nextc = nc->cl_cdr;
      423       423    2            putcall(nc,cfile,level+1);
      424       424    2         }
      425       425    1        }
      426       426
      427       427             long putcc(head,ccf)
      428       428              calcnt_p head;
      429       429              FILE     *ccf;
      430       430             {
      431       431    1         /* Write call-count information to file ccf.
      432       432    1          * Return the disk address of the info written.
      433       433    1          */
      434       434    1
      435       435    1         calcnt_p cc;
      436       436    1         long addr;
      437       437    1         short cnt;
      438       438    1
      439       439    1         addr = ftell(ccf);
      440       440    1         curoutp = ccf;
      441       441    1         cnt = 0;
      442       442    1         for (cc = head; cc != (calcnt_p) 0;cc = cc->cc_next) cnt++;
      443       443    1         outshort(cnt);
CC.C03    File=zbe$il_aux:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      444       444    1         for (cc = head; cc != (calcnt_p) 0; cc = cc->cc_next) {
      445       445    2            outproc(cc->cc_proc);
      446       446    2            outshort(cc->cc_count);
      447       447    2         }
      448       448    1         return addr;
      449       449    1        }
      450       450
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$il:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
   zbe$put:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   zbe$il_aux:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$il_aux:c.:ZBC3TSI
