

CC.C03    File=zbe$cs_elim:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cs_elim.c,v 1.5 87/03/10 10:53:16 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             #include "em_reg:h"
        7         7             #include "em_mnem:h"
        8         8             #include "types:h"
        9         9             #include "alloc:h"
       10        10             #include "lset:h"
       11        11             #include "aux:h"
       12        12             #include "global:h"
       13        13             #include "debug:h"
       14        14             #include "cs:h"
       15        15             #include "cs_avail:h"
       16        16             #include "cs_alloc:h"
       17        17             #include "cs_aux:h"
       18        18             #include "cs_debug:h"
       19        19             #include "cs_profit:h"
       20        20             #include "cs_partit:h"
       21        21             #include "cs_debug:h"
       22        22
       23        23             STATIC dlink(l1, l2)
       24        24              line_p l1, l2;
       25        25             {
       26        26    1         /* Doubly link the lines in l1 and l2. */
       27        27    1
       28        28    1         if (l1 != (line_p) 0)
       29        29    1            l1->l_next = l2;
       30        30    1         if (l2 != (line_p) 0)
       31        31    1            l2->l_prev = l1;
       32        32    1        }
       33        33
       34        34             STATIC remove_lines(first, last)
       35        35              line_p first, last;
       36        36             {
CC.C03    File=zbe$cs_elim:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37    1         /* Throw away the lines between and including first and last.
       38        38    1          * Don't worry about any pointers; the (must) have been taken care of.
       39        39    1          */
       40        40    1         register line_p lnp, next;
       41        41    1
       42        42    1         last->l_next = (line_p) 0; /* Delimit the list. */
       43        43    1         for (lnp = first; lnp != (line_p) 0; lnp = next) {
       44        44    2            next = lnp->l_next;
       45        45    2            oldline(lnp);
       46        46    2         }
       47        47    1        }
       48        48
       49        49             STATIC bool contained(ocp1, ocp2)
       50        50              occur_p ocp1, ocp2;
       51        51             {
       52        52    1         /* Determine whether ocp1 is contained within ocp2. */
       53        53    1
       54        54    1         register line_p lnp, next;
       55        55    1
       56        56    1         for (lnp = ocp2->oc_lfirst; lnp != (line_p) 0; lnp = next) {
       57        57    2            next = lnp != ocp2->oc_llast ? lnp->l_next : (line_p) 0;
       58        58    2
       59        59    2            if (lnp == ocp1->oc_llast) return TRUE;
       60        60    2         }
       61        61    1         return FALSE;
       62        62    1        }
       63        63
       64        64             STATIC delete(ocp, start)
       65        65              occur_p ocp;
       66        66              avail_p start;
       67        67             {
       68        68    1         /* Delete all occurrences that are contained within ocp.
       69        69    1          * They must have been entered in the list before start:
       70        70    1          * if an expression is contained with an other, its operator line
       71        71    1          * appears before the operator line of the other because EM-expressions
       72        72    1          * are postfix.
       73        73    1          */
CC.C03    File=zbe$cs_elim:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74    1         register avail_p ravp;
       75        75    1         register Lindex   i, next;
       76        76    1
       77        77    1         for (ravp = start; ravp != (avail_p) 0; ravp = ravp->av_before) {
       78        78    2            for (i = Lfirst(ravp->av_occurs); i != (Lindex) 0; i = next) {
       79        79    3               next = Lnext(i, ravp->av_occurs);
       80        80    3
       81        81    3               if (contained(occ_elem(i), ocp)) {
       82        82    4                  OUTTRACE("delete contained occurrence", 0);
       83        83    4        #            ifdef TRACE
       84        84   *S*                    SHOWOCCUR(occ_elem(i));
       85        85   *S*       #            endif
       86        86    4                  oldoccur(occ_elem(i));
       87        87    4                  Lremove(Lelem(i), &ravp->av_occurs);
       88        88    4               }
       89        89    3            }
       90        90    2         }
       91        91    1        }
       92        92
       93        93             STATIC complete_aar(lnp, instr, descr_vn)
       94        94              line_p lnp;
       95        95              int instr;
       96        96              valnum descr_vn;
       97        97             {
       98        98    1         /* Lnp is an instruction that loads the address of an array-element.
       99        99    1          * Instr tells us what effect we should achieve; load (instr is op_lar)
      100       100    1          * or store (instr is op_sar) this array-element. Descr_vn is the
      101       101    1          * valuenumber of the address of the descriptor of this array.
      102       102    1          * We append a loi or sti of the correct number of bytes.
      103       103    1          */
      104       104    1         register line_p lindir;
      105       105    1
      106       106    1         lindir = int_line(array_elemsize(descr_vn));
      107       107    1         lindir->l_instr = instr == op_lar ? op_loi : op_sti;
      108       108    1         dlink(lindir, lnp->l_next);
      109       109    1         dlink(lnp, lindir);
      110       110    1        }
CC.C03    File=zbe$cs_elim:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111
      112       112             STATIC replace(ocp, tmp, avp)
      113       113              occur_p ocp;
      114       114              offset tmp;
      115       115              avail_p avp;
      116       116             {
      117       117    1         /* Replace the lines in the occurrence in ocp by a load of the
      118       118    1          * temporary with offset tmp.
      119       119    1          */
      120       120    1         register line_p lol, first, last;
      121       121    1
      122       122    1         assert(avp->av_size == ws || avp->av_size == 2*ws);
      123       123    1
      124       124    1         first = ocp->oc_lfirst; last = ocp->oc_llast;
      125       125    1
      126       126    1         lol = int_line(tmp);
      127       127    1         lol->l_instr = avp->av_size == ws ? op_lol : op_ldl;
      128       128    1         dlink(lol, last->l_next);
      129       129    1
      130       130    1         if (first->l_prev == (line_p) 0) ocp->oc_belongs->b_start = lol;
      131       131    1         dlink(first->l_prev, lol);
      132       132    1
      133       133    1         if (avp->av_instr == (byte) op_aar) {
      134       134    2            /* There may actually be a LAR or a SAR instruction; in that
      135       135    2             * case we have to complete the array-instruction.
      136       136    2             */
      137       137    2            register int instr = INSTR(last);
      138       138    2
      139       139    2            if (instr != op_aar) complete_aar(lol, instr, avp->av_othird);
      140       140    2         }
      141       141    1
      142       142    1         /* Throw away the by now useless lines. */
      143       143    1         remove_lines(first, last);
      144       144    1        }
      145       145
      146       146             STATIC append(avp, tmp)
      147       147              avail_p avp;
CC.C03    File=zbe$cs_elim:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148              offset tmp;
      149       149             {
      150       150    1         /* Avp->av_found points to a line with an operator in it. This
      151       151    1          * routine emits a sequence of instructions that saves the result
      152       152    1          * in a local with offset tmp. In most cases we just append
      153       153    1          * avp->av_found with stl/sdl tmp and lol/ldl tmp depending on
      154       154    1          * avp->av_size. If however the operator is an aar contained
      155       155    1          * within a lar or sar, we must first generate the aar.
      156       156    1          */
      157       157    1         register line_p stl, lol;
      158       158    1
      159       159    1         assert(avp->av_size == ws || avp->av_size == 2*ws);
      160       160    1
      161       161    1         stl = int_line(tmp);
      162       162    1         stl->l_instr = avp->av_size == ws ? op_stl : op_sdl;
      163       163    1         lol = int_line(tmp);
      164       164    1         lol->l_instr = avp->av_size == ws ? op_lol : op_ldl;
      165       165    1
      166       166    1         dlink(lol, avp->av_found->l_next);
      167       167    1         dlink(stl, lol);
      168       168    1         dlink(avp->av_found, stl);
      169       169    1
      170       170    1         if (avp->av_instr == (byte) op_aar) {
      171       171    2            register int instr = INSTR(avp->av_found);
      172       172    2
      173       173    2            if (instr != op_aar) {
      174       174    3               complete_aar(lol, instr, avp->av_othird);
      175       175    3               avp->av_found->l_instr = op_aar;
      176       176    3            }
      177       177    2         }
      178       178    1        }
      179       179
      180       180             STATIC set_replace(avp, tmp)
      181       181              avail_p avp;
      182       182              offset tmp;
      183       183             {
      184       184    1         /* Avp->av_occurs is now a set of occurrences, each of which will be
CC.C03    File=zbe$cs_elim:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185    1          * replaced by a reference to a local.
      186       186    1          * Each time we eliminate an expression, we delete from our
      187       187    1          * list those expressions that are physically contained in them,
      188       188    1          * because we cannot eliminate them again.
      189       189    1          */
      190       190    1         register Lindex i;
      191       191    1         register lset s = avp->av_occurs;
      192       192    1
      193       193    1         for (i = Lfirst(s); i != (Lindex) 0; i = Lnext(i, s)) {
      194       194    2            OUTVERBOSE("eliminate duplicate", 0);
"zbe$cs_elim:c.:ZBC3TSI", line 194: (warning) argument mismatch, OUTVERBOSE
      195       195    2            SHOWOCCUR(occ_elem(i));
      196       196    2            Scs++;
      197       197    2            delete(occ_elem(i), avp->av_before);
      198       198    2            replace(occ_elem(i), tmp, avp);
      199       199    2         }
      200       200    1        }
      201       201
      202       202             STATIC int reg_score(enp)
      203       203              entity_p enp;
      204       204             {
      205       205    1         /* Enp is a local that will go into a register.
      206       206    1          * We return its score upto now.
      207       207    1          */
      208       208    1         assert(is_regvar(enp->en_loc));
      209       209    1         return regv_arg(enp->en_loc, 4);
      210       210    1        }
      211       211
      212       212             STATIC line_p gen_mesreg(off, avp, pp)
      213       213              offset off;
      214       214              avail_p avp;
      215       215              proc_p pp;
      216       216             {
      217       217    1         /* Generate a register message for the local that will hold the
      218       218    1          * result of the expression in avp, at the appropriate place in
      219       219    1          * the procedure in pp.
      220       220    1          */
CC.C03    File=zbe$cs_elim:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      221       221    1         register line_p reg;
      222       222    1
      223       223    1         reg = reg_mes(off, (short) avp->av_size, regtype(avp->av_instr), 0);
      224       224    1         appnd_line(reg, pp->p_start->b_start);
      225       225    1
      226       226    1         return reg;
      227       227    1        }
      228       228
      229       229             STATIC change_score(mes, score)
      230       230              line_p mes;
      231       231              int score;
      232       232             {
      233       233    1         /* Change the score in the register message in mes to score. */
      234       234    1
      235       235    1         register arg_p ap = ARG(mes);
      236       236    1
      237       237    1         ap = ap->a_next; /* Offset. */
      238       238    1         ap = ap->a_next; /* Size. */
      239       239    1         ap = ap->a_next; /* Type. */
      240       240    1         ap = ap->a_next; /* Score. */
      241       241    1
      242       242    1         ap->a_a.a_offset = score;
      243       243    1        }
      244       244
      245       245             eliminate(pp)
      246       246              proc_p pp;
      247       247             {
      248       248    1         /* Eliminate costly common subexpressions within procedure pp.
      249       249    1          * We scan the available expressions in - with respect to time found -
      250       250    1          * reverse order, to find largest first, e.g. `A + B + C' before
      251       251    1          * `A + B'.
      252       252    1          * We do not eliminate an expression when the size
      253       253    1          * is not one of ws or 2*ws, because then we cannot use lol or ldl.
      254       254    1          * Code is appended to the first occurrence of the expression
      255       255    1          * to store the result into a local.
      256       256    1          */
      257       257    1         register avail_p ravp;
CC.C03    File=zbe$cs_elim:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      258       258    1         register int score;
      259       259    1         register offset tmp;
      260       260    1         register line_p mes;
      261       261    1
      262       262    1         for (ravp = avails; ravp != (avail_p) 0; ravp = ravp->av_before) {
      263       263    2
      264       264    2            if (ravp->av_size != ws && ravp->av_size != 2*ws) continue;
      265       265    2
      266       266    2            if (ravp->av_saveloc == (entity_p) 0) {
      267       267    3               /* We save it ourselves. */
      268       268    3               score = 2; /* Stl and lol. */
      269       269    3            } else {
      270       270    3               score = reg_score(ravp->av_saveloc);
      271       271    3            }
      272       272    2            if (desirable(ravp)) {
      273       273    3               score += Lnrelems(ravp->av_occurs);
      274       274    3               OUTTRACE("temporary local score %d", score);
      275       275    3               if (ravp->av_saveloc != (entity_p) 0) {
      276       276    4                  tmp = ravp->av_saveloc->en_loc;
      277       277    4                  mes = find_mesreg(tmp);
      278       278    4                  OUTVERBOSE("re-using %ld(LB)", tmp);
"zbe$cs_elim:c.:ZBC3TSI", line 278: (warning) argument mismatch, OUTVERBOSE
      279       279    4               } else {
      280       280    4                  tmp = tmplocal(pp,  ravp->av_size);
      281       281    4                  mes = gen_mesreg(tmp, ravp, pp);
      282       282    4                  append(ravp, tmp);
      283       283    4               }
      284       284    3               change_score(mes, score);
      285       285    3               set_replace(ravp, tmp);
      286       286    3            }
      287       287    2         }
      288       288    1        }
      289       289
---  Include file information  ---

   em_reg:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$cs_elim:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$cs:h.:ZBC3TOU. is referenced
   zbe$cs_avail:h.:ZBC3TOU. is referenced
   zbe$cs_alloc:h.:ZBC3TOU. is referenced
   zbe$cs_aux:h.:ZBC3TOU. is referenced
   zbe$cs_debug:h.:ZBC3TOU. is referenced
   zbe$cs_profit:h.:ZBC3TOU. is referenced
   zbe$cs_partit:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbe$cs_elim:c.:ZBC3TSI
