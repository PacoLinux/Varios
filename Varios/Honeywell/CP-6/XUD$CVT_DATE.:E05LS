VERSION E05

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:1    
        1        1        /*M* XUD$CVT_DATE - Date conversion service routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* NO */
        8        8
        9        9        /******************************************************************************/
       10       10        /*P*
       11       11        NAME:   XUD$CVT_DATE
       12       12        PURPOSE:
       13       13                Date conversion service routines.
       14       14        DESCRIPTION:
       15       15                This set of library service routines converts
       16       16                dates and times from character to DATE or UTS values, and vice versa.
       17       17                Conversion between DATE and UTS is also supported.  Additional
       18       18                entry points return the current system time in any desired
       19       19                form, and initialize date/time pictures.
       20       20
       21       21                There is a separate entry point for each type of conversion
       22       22                supported.  The routine names are of the form "XUD$from_to".  All
       23       23                routines use a standard parameter block, described by the XUD_PARAM
       24       24                macro.
       25       25
       26       26                The file contains the following routines:
       27       27
       28       28                XUD$CVT_DATE - Dummy procedure header.
       29       29                XUD$INIT_PIC(*) - Initialize a date/time picture.
       30       30                XUD$CHAR_UTS(*) - Convert from character to UTS.
       31       31                XUD$CHAR_DATE(*) - Convert from character to DATE.
       32       32                XUD$UTS_CHAR(*) - Convert from UTS to character.
       33       33                XUD$DATE_CHAR(*) - Convert from DATE to character.
       34       34                XUD$DATE_UTS(*) - Convert from DATE to UTS.
       35       35                XUD$UTS_DATE(*) - Convert from UTS to DATE.
       36       36                XUD$CLOCK_UTS(*) - Returns current timestamp as a UTS.
       37       37                XUD$CLOCK_DATE(*) - Returns current timestamp as a DATE.
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:2    
       38       38                XUD$CLOCK_CHAR(*) - Returns current timestamp in character.
       39       39                    SETUP_CHARS_IN - Initialize an input string operand.
       40       40                    SETUP_CHARS_OUT(*) - Initialize an output string operand.
       41       41                    SETUP_PICTURE - Get an initialized picture for use in conversion.
       42       42                    CVT_TO_CHAR - Convert from binary to character date.
       43       43                        CHECK_SIZE - Check for string overflow.
       44       44                        SET_LEN_1OR2 - Set length for zero-suppressed subfield.
       45       45                        CVT_FROM_NUM - Convert binary subfield to character.
       46       46                        MOVE_ALPHA - Move alphabetic subfield into result.
       47       47                        CVT_TO_SPAN - Convert binary timespan to character.
       48       48                    CVT_FROM_CHAR - Convert from character to binary date.
       49       49                        CVT_XX - Dummy procedure for subfield conversion routines.
       50       50                        CVT_YY(*) - Convert YY from character to binary.
       51       51                        CVT_MO(*) - Convert MM from character to binary.
       52       52                        CVT_DD(*) - Convert DD from character to binary.
       53       53                        CVT_MMM(*) - Convert MMM from character to binary.
       54       54                        CVT_WWW(*) - Convert WWW from character to binary.
       55       55                        CVT_SWITCH(*) - Parse date/time switch in character string.
       56       56                        CVT_HH(*) - Convert HH from character to binary.
       57       57                        CVT_MI(*) - Convert MM from character to binary.
       58       58                        CVT_SS(*) - Convert SS from character to binary.
       59       59                        CVT_TT(*) - Convert TT from character to binary.
       60       60                        CVT_TO_NUM - Convert numeric substring to binary.
       61       61                        CVT_1ST_NUM(*) - Convert first timespan subfield to binary.
       62       62                        GET_CURRENT_YEAR - Get current year from the operating system.
       63       63                        CVT_FROM_DEFAULT - Convert from character using default rules.
       64       64                            PARSE_DATE - Convert date using default rules.
       65       65                            PARSE_TIME(*) - Convert time using default rules.
       66       66                                CHK4END - Check for end of time using default rules.
       67       67                            PARSE_SPAN(*) - Convert timespan using default rules.
       68       68                    FROM_UTS - Convert UTS to days and tics.
       69       69                    CHK4SFX - Check for date/time suffix.
       70       70                    RSEARCH - Call SEARCHR so as to avoid hardware glitch.
       71       71
       72       72                (*) indicates an entry point in the preceeding procedure.
       73       73        */
       74       74        /******************************************************************************/
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:3    
       75       75
       76       76        XUD$CVT_DATE: PROC( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;
       77       77
       78       78        %INCLUDE CP_6;
       79     5637        %INCLUDE CP_6_SUBS;
       80     6177        %INCLUDE XU_MACRO_C;
       81     9283        %INCLUDE XU_PERR_C;
       82     9474        %INCLUDE B$TABLES_C;
       83     9582            %B$SR_NON_BLANK;
       84     9586            %B$SR_NON_ZERO;
       85     9590            %B$SR_NON_ALPHA;
       86     9594            %B$SR_NON_DEC;
       87     9598            %B$XL_LOWER_UR;
       88     9602            %B$XL_UPPER_UR;
       89     9606
       90     9607        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:4    
       91     9608        %LIST;
       92     9609        %INCLUDE XUD_PICTURE_M;
        1+    9610        /*M* XUD_PICTURE_M - Macros for internal use by date conversion services */
        2+    9611        /*T***********************************************************/
        3+    9612        /*T*                                                         */
        4+    9613        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+    9614        /*T*                                                         */
        6+    9615        /*T***********************************************************/
        7+    9616        /*X* NO */
        8+    9617
        9+    9618        /******************************************************************************/
       10+    9619        /*P*
       11+    9620        NAME:   XUD_PICTURE_M
       12+    9621        PURPOSE:
       13+    9622                Preprocessor definitions for internal date/time pictures.
       14+    9623        DESCRIPTION:
       15+    9624                This file contains EQUs for the internal date/time picture codes
       16+    9625                and other preprocessor definitions for internal pictures validation.
       17+    9626                These definitions are not normally needed by users of the date/time
       18+    9627                conversion services, but they are available for use by programs
       19+    9628                (such as XARGENT) that require special handling of pictures.
       20+    9629        */
       21+    9630        /******************************************************************************/
       22+    9631
       23+    9632        /****** Time conversion factors
       24+    9633        */
       25+    9634        %EQU XUD#TICS_SEC = 100;
       26+    9635        %EQU XUD#TICS_MIN = 6000;
       27+    9636        %EQU XUD#TICS_HOUR = 360000;
       28+    9637        %EQU XUD#TICS_DAY = 8640000;
       29+    9638
       30+    9639        %EQU XUD#SECS_MIN = 60;
       31+    9640        %EQU XUD#SECS_HOUR = 3600;
       32+    9641        %EQU XUD#SECS_DAY = 86400;
       33+    9642
       34+    9643        %EQU XUD#MINS_HOUR = 60;
       35+    9644        %EQU XUD#MINS_DAY = 1440;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:5    
       36+    9645
       37+    9646        %EQU XUD#HOURS_DAY = 24;
       38+    9647
       39+    9648        %EQU XUD#UTS_BASE = 722084;
       40+    9649        /*   XUD#UTS_BASE = ((365.25 * 1976) + 365 - 15)
       41+    9650        */
       42+    9651        %EQU XUD#UTS_LIMIT = 730036;
       43+    9652        /*   XUD#UTS_LIMIT = XUD#UTS_BASE + FLOOR( 2**36 / XUD#TICS_DAY )
       44+    9653        */
       45+    9654
       46+    9655        /****** Miscellaneous EQUs
       47+    9656        */
       48+    9657        %EQU XUD#PICTYPE_UNDEF = ' ';
       49+    9658        %EQU XUD#PICTYPE_DATE = 'D';
       50+    9659        %EQU XUD#PICTYPE_TIME = 'T';
       51+    9660
       52+    9661        %EQU XUD#SFX_NONE = 0;
       53+    9662        %EQU XUD#SFX_AD = 1;
       54+    9663        %EQU XUD#SFX_A_D = 2;
       55+    9664        %EQU XUD#SFX_BC = 3;
       56+    9665        %EQU XUD#SFX_B_C = 4;
       57+    9666        %EQU XUD#SFX_AM = 5;
       58+    9667        %EQU XUD#SFX_A_M = 6;
       59+    9668        %EQU XUD#SFX_PM = 7;
       60+    9669        %EQU XUD#SFX_P_M = 8;
       61+    9670        %EQU XUD#SFX_CE = 9;
       62+    9671        %EQU XUD#SFX_C_E = 10;
       63+    9672        %EQU XUD#SFX_BCE = 11;
       64+    9673        %EQU XUD#SFX_B_C_E = 12;
       65+    9674
       66+    9675        %EQU XUD#YES = '1'B;
       67+    9676        %EQU XUD#NO = '0'B;
       68+    9677        %EQU XUD#BLANK = ' ';
       69+    9678
       70+    9679        /****** EQUs for date and time subfield codes
       71+    9680        */
       72+    9681        %EQU XUD#P_BASE         = BITBIN( '400'O );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:6    
       73+    9682
       74+    9683        %EQU XUD#P_SWITCH       = XUD#P_BASE;
       75+    9684
       76+    9685        %EQU XUD#P_DATE_Y1      = BITBIN( '401'O );
       77+    9686        %EQU XUD#P_DATE_Y2      = BITBIN( '402'O );
       78+    9687        %EQU XUD#P_DATE_Y4      = BITBIN( '403'O );
       79+    9688        %EQU XUD#P_DATE_Y5      = BITBIN( '404'O );
       80+    9689        %EQU XUD#P_DATE_M1      = BITBIN( '405'O );
       81+    9690        %EQU XUD#P_DATE_M2      = BITBIN( '406'O );
       82+    9691        %EQU XUD#P_DATE_M3UC    = BITBIN( '407'O );
       83+    9692        %EQU XUD#P_DATE_M3IC    = BITBIN( '410'O );
       84+    9693        %EQU XUD#P_DATE_M3LC    = BITBIN( '411'O );
       85+    9694        %EQU XUD#P_DATE_M4UC    = BITBIN( '412'O );
       86+    9695        %EQU XUD#P_DATE_M4IC    = BITBIN( '413'O );
       87+    9696        %EQU XUD#P_DATE_M4LC    = BITBIN( '414'O );
       88+    9697        %EQU XUD#P_DATE_D1      = BITBIN( '415'O );
       89+    9698        %EQU XUD#P_DATE_D2      = BITBIN( '416'O );
       90+    9699        %EQU XUD#P_DATE_W1UC    = BITBIN( '417'O );
       91+    9700        %EQU XUD#P_DATE_W1IC    = BITBIN( '420'O );
       92+    9701        %EQU XUD#P_DATE_W1LC    = BITBIN( '421'O );
       93+    9702        %EQU XUD#P_DATE_W2UC    = BITBIN( '422'O );
       94+    9703        %EQU XUD#P_DATE_W2IC    = BITBIN( '423'O );
       95+    9704        %EQU XUD#P_DATE_W2LC    = BITBIN( '424'O );
       96+    9705        %EQU XUD#P_DATE_W3UC    = BITBIN( '425'O );
       97+    9706        %EQU XUD#P_DATE_W3IC    = BITBIN( '426'O );
       98+    9707        %EQU XUD#P_DATE_W3LC    = BITBIN( '427'O );
       99+    9708        %EQU XUD#P_DATE_W4UC    = BITBIN( '430'O );
      100+    9709        %EQU XUD#P_DATE_W4IC    = BITBIN( '431'O );
      101+    9710        %EQU XUD#P_DATE_W4LC    = BITBIN( '432'O );
      102+    9711        %EQU XUD#P_DATE_Q       = BITBIN( '433'O );
      103+    9712        %EQU XUD#P_DATE_J1      = BITBIN( '434'O );
      104+    9713        %EQU XUD#P_DATE_J3      = BITBIN( '435'O );
      105+    9714        %EQU XUD#P_DATE_AD      = BITBIN( '436'O );
      106+    9715        %EQU XUD#P_DATE_A_D     = BITBIN( '437'O );
      107+    9716        %EQU XUD#P_DATE_BC      = BITBIN( '440'O );
      108+    9717        %EQU XUD#P_DATE_B_C     = BITBIN( '441'O );
      109+    9718        %EQU XUD#P_DATE_CE      = BITBIN( '442'O );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:7    
      110+    9719        %EQU XUD#P_DATE_C_E     = BITBIN( '443'O );
      111+    9720        %EQU XUD#P_DATE_BCE     = BITBIN( '444'O );
      112+    9721        %EQU XUD#P_DATE_B_C_E   = BITBIN( '445'O );
      113+    9722
      114+    9723        %EQU XUD#P_TIME_BASE    = BITBIN( '453'O );
      115+    9724
      116+    9725        %EQU XUD#P_TIME_D3      = BITBIN( '453'O );
      117+    9726        %EQU XUD#P_TIME_H3      = BITBIN( '454'O );
      118+    9727        %EQU XUD#P_TIME_M3      = BITBIN( '455'O );
      119+    9728        %EQU XUD#P_TIME_S3      = BITBIN( '456'O );
      120+    9729        %EQU XUD#P_TIME_T3      = BITBIN( '457'O );
      121+    9730        %EQU XUD#P_TIME_H1      = BITBIN( '460'O );
      122+    9731        %EQU XUD#P_TIME_H1A     = BITBIN( '461'O );
      123+    9732        %EQU XUD#P_TIME_H2      = BITBIN( '462'O );
      124+    9733        %EQU XUD#P_TIME_H2A     = BITBIN( '463'O );
      125+    9734        %EQU XUD#P_TIME_M1      = BITBIN( '464'O );
      126+    9735        %EQU XUD#P_TIME_M2      = BITBIN( '465'O );
      127+    9736        %EQU XUD#P_TIME_S1      = BITBIN( '466'O );
      128+    9737        %EQU XUD#P_TIME_S2      = BITBIN( '467'O );
      129+    9738        %EQU XUD#P_TIME_T1      = BITBIN( '470'O );
      130+    9739        %EQU XUD#P_TIME_T2      = BITBIN( '471'O );
      131+    9740        %EQU XUD#P_TIME_APM     = BITBIN( '472'O );
      132+    9741        %EQU XUD#P_TIME_AP_M    = BITBIN( '473'O );
      133+    9742
      134+    9743        %EQU XUD#P_LIMIT        = BITBIN( '477'O );
      135+    9744        %EQU XUD#P_MAX          = XUD#P_LIMIT - XUD#P_BASE;
      136+    9745
      137+    9746        /****** Flags for subfield duplication checks.
      138+    9747        */
      139+    9748        %EQU XUD#USED_Y     = '400000'O;
      140+    9749        %EQU XUD#USED_MO    = '200000'O;
      141+    9750        %EQU XUD#USED_D     = '100002'O;
      142+    9751        %EQU XUD#USED_J     = '300002'O;
      143+    9752        %EQU XUD#USED_W     = '040000'O;
      144+    9753        %EQU XUD#USED_ADBC  = '020000'O;
      145+    9754        %EQU XUD#USED_Q     = '300000'O;
      146+    9755        %EQU XUD#USED_H     = '004000'O;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:8    
      147+    9756        %EQU XUD#USED_MI    = '002000'O;
      148+    9757        %EQU XUD#USED_S     = '001000'O;
      149+    9758        %EQU XUD#USED_T     = '000400'O;
      150+    9759        %EQU XUD#USED_AMPM  = '000200'O;
      151+    9760
      152+    9761        %EQU XUD#USED_DAY   = '000002'O;
      153+    9762        %EQU XUD#USED_YYY   = '000001'O;
      154+    9763
      155+    9764        /****** Table to detect adjacent picture codes that would be ambiguous
      156+    9765        */
      157+    9766        %EQU XUD#PV_ALPHA    = 1;    /* Alphabetic              */
      158+    9767        %EQU XUD#PV_NUM_F    = 2;    /* Fixed size number       */
      159+    9768        %EQU XUD#PV_NUM_V    = 3;    /* Variable size number    */
      160+    9769
      161+    9770        %MACRO XUD_VALID;
      162+    9771
      163+    9772        DCL XUD_VALID ( 0:%XUD#P_MAX ) UBIN BYTE CALIGNED CONSTANT INIT(
      164+    9773            0,              /* UNUSED           */
      165+    9774            %XUD#PV_NUM_F,  /* XUD#P_DATE_Y1    */
      166+    9775            %XUD#PV_NUM_F,  /* XUD#P_DATE_Y2    */
      167+    9776            %XUD#PV_NUM_V,  /* XUD#P_DATE_Y4    */
      168+    9777            %XUD#PV_NUM_V,  /* XUD#P_DATE_Y5    */
      169+    9778            %XUD#PV_NUM_V,  /* XUD#P_DATE_M1    */
      170+    9779            %XUD#PV_NUM_F,  /* XUD#P_DATE_M2    */
      171+    9780            %XUD#PV_ALPHA,  /* XUD#P_DATE_M3UC  */
      172+    9781            %XUD#PV_ALPHA,  /* XUD#P_DATE_M3IC  */
      173+    9782            %XUD#PV_ALPHA,  /* XUD#P_DATE_M3LC  */
      174+    9783            %XUD#PV_ALPHA,  /* XUD#P_DATE_M4UC  */
      175+    9784            %XUD#PV_ALPHA,  /* XUD#P_DATE_M4IC  */
      176+    9785            %XUD#PV_ALPHA,  /* XUD#P_DATE_M4LC  */
      177+    9786            %XUD#PV_NUM_V,  /* XUD#P_DATE_D1    */
      178+    9787            %XUD#PV_NUM_F,  /* XUD#P_DATE_D2    */
      179+    9788            %XUD#PV_ALPHA,  /* XUD#P_DATE_W1UC  */
      180+    9789            %XUD#PV_ALPHA,  /* XUD#P_DATE_W1IC  */
      181+    9790            %XUD#PV_ALPHA,  /* XUD#P_DATE_W1LC  */
      182+    9791            %XUD#PV_ALPHA,  /* XUD#P_DATE_W2UC  */
      183+    9792            %XUD#PV_ALPHA,  /* XUD#P_DATE_W2IC  */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:9    
      184+    9793            %XUD#PV_ALPHA,  /* XUD#P_DATE_W2LC  */
      185+    9794            %XUD#PV_ALPHA,  /* XUD#P_DATE_W3UC  */
      186+    9795            %XUD#PV_ALPHA,  /* XUD#P_DATE_W3IC  */
      187+    9796            %XUD#PV_ALPHA,  /* XUD#P_DATE_W3LC  */
      188+    9797            %XUD#PV_ALPHA,  /* XUD#P_DATE_W4UC  */
      189+    9798            %XUD#PV_ALPHA,  /* XUD#P_DATE_W4IC  */
      190+    9799            %XUD#PV_ALPHA,  /* XUD#P_DATE_W4LC  */
      191+    9800            %XUD#PV_NUM_F,  /* XUD#P_DATE_Q     */
      192+    9801            %XUD#PV_NUM_V,  /* XUD#P_DATE_J1    */
      193+    9802            %XUD#PV_NUM_F,  /* XUD#P_DATE_J3    */
      194+    9803            %XUD#PV_ALPHA,  /* XUD#P_DATE_AD    */
      195+    9804            %XUD#PV_ALPHA,  /* XUD#P_DATE_A_D   */
      196+    9805            %XUD#PV_ALPHA,  /* XUD#P_DATE_BC    */
      197+    9806            %XUD#PV_ALPHA,  /* XUD#P_DATE_B_C   */
      198+    9807            %XUD#PV_ALPHA,  /* XUD#P_DATE_CE    */
      199+    9808            %XUD#PV_ALPHA,  /* XUD#P_DATE_C_E   */
      200+    9809            %XUD#PV_ALPHA,  /* XUD#P_DATE_BCE   */
      201+    9810            %XUD#PV_ALPHA,  /* XUD#P_DATE_B_C_E */
      202+    9811            0 * 5,          /* RESERVED         */
      203+    9812            %XUD#PV_NUM_V,  /* XUD#P_TIME_D3    */
      204+    9813            %XUD#PV_NUM_V,  /* XUD#P_TIME_H3    */
      205+    9814            %XUD#PV_NUM_V,  /* XUD#P_TIME_M3    */
      206+    9815            %XUD#PV_NUM_V,  /* XUD#P_TIME_S3    */
      207+    9816            %XUD#PV_NUM_V,  /* XUD#P_TIME_T3    */
      208+    9817            %XUD#PV_NUM_V,  /* XUD#P_TIME_H1    */
      209+    9818            %XUD#PV_NUM_V,  /* XUD#P_TIME_H1A   */
      210+    9819            %XUD#PV_NUM_F,  /* XUD#P_TIME_H2    */
      211+    9820            %XUD#PV_NUM_F,  /* XUD#P_TIME_H2A   */
      212+    9821            %XUD#PV_NUM_V,  /* XUD#P_TIME_M1    */
      213+    9822            %XUD#PV_NUM_F,  /* XUD#P_TIME_M2    */
      214+    9823            %XUD#PV_NUM_V,  /* XUD#P_TIME_S1    */
      215+    9824            %XUD#PV_NUM_F,  /* XUD#P_TIME_S2    */
      216+    9825            %XUD#PV_NUM_V,  /* XUD#P_TIME_T1    */
      217+    9826            %XUD#PV_NUM_F,  /* XUD#P_TIME_T2    */
      218+    9827            %XUD#PV_ALPHA,  /* XUD#P_TIME_APM   */
      219+    9828            %XUD#PV_ALPHA,  /* XUD#P_TIME_AP_M  */
      220+    9829            0 * 4 );        /* RESERVED         */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:10   
      221+    9830
      222+    9831        %MEND;
      223+    9832        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:11   
      224+    9833        /********** Layout of table to hold month and weekday text
      225+    9834        */
      226+    9835        %MACRO XUD$WORK( STCLASS=BASED );
      227+    9836
      228+    9837        DCL 1 XUD$WORK STCLASS,
      229+    9838            2 M_INIT BIT( 1 ) UNAL,
      230+    9839            2 W_INIT BIT( 1 ) UNAL,
      231+    9840            2 * BIT( 16 ) UNAL,
      232+    9841            2 SIZE UBIN HALF HALIGNED,
      233+    9842            2 M$( 0:11 ) PTR,
      234+    9843            2 W$( 0:6 ) PTR,
      235+    9844            2 M_SIZE( 0:11 ) UBIN BYTE CALIGNED,
      236+    9845            2 W_SIZE( 0:6 ) UBIN BYTE CALIGNED,
      237+    9846            2 TEXT CHAR( 300 );
      238+    9847
      239+    9848        %MEND;
       93     9849        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:12   
       94     9850        /****** Parameters
       95     9851        */
       96     9852        %XUD_PARAM( STCLASS=PARAM );
              9853        %LSET LISTDIR = '0'B;
              9865    1   DCL 1 XUD_PARAM PARAM ALIGNED,
              9866    1       2 PIC$ PTR /*(ADDR(NIL))*/,
              9873    1       2 TEXTC BIT(1) UNAL /*('0'B)*/,
              9882    1       2 INIT_PIC BIT(1) UNAL /*('0'B)*/,
              9896    1       2 TIMESPAN BIT(1) UNAL /*('0'B)*/,
              9903    1       2 ASSUME_UTS BIT(1) UNAL /*('0'B)*/,
              9912    1       2 * BIT(4) UNAL /*('0'B)*/,
              9913    1       2 PIC_TEXTC BIT(1) UNAL /*('0'B)*/,
              9923    1       2 PIC_SIZE UBIN BYTE CALIGNED /*(0)*/,
              9931    1       2 SIZE UBIN BYTE CALIGNED /*(0)*/,
              9941    1       2 MAX_SIZE UBIN BYTE CALIGNED /*(0)*/,
              9947    1       2 DATA_SIZE REDEF MAX_SIZE UBIN BYTE CALIGNED,
              9954    1       2 ERR           ALIGNED,
              9959    1           3 FCG BIT(12) UNAL /*('0'B)*/,
              9960    1           3 MID BIT(6) UNAL /*('0'B)*/,
              9961    1           3 MON BIT(1) UNAL /*('0'B)*/,
              9962    1           3 ERR# UBIN(14) UNAL /*(0)*/,
              9963    1           3 SEV UBIN(3) UNAL /*(0)*/,
              9964    1       2 WORK$ PTR /*(ADDR(NIL))*/,
              9984    1       2 * PTR /*(ADDR(NIL))*/,
              9985    1       2 * PTR /*(ADDR(NIL))*/,
              9986    1       2 UTS_TYPE UBIN BYTE CALIGNED /*(0)*/,
              9998    1       2 * UBIN (27) CALIGNED /*(0)*/,
              9999    1       2 * UBIN WORD /*(0)*/;
       97    10001
       98    10002    1   DCL DATA_IN CHAR( 64 ) PARAM;
       99    10003
      100    10004    1   DCL DATA_OUT CHAR( 64 ) PARAM;
      101    10005
      102    10006        /****** Local data
      103    10007        */
      104    10008    1   DCL PICTURE$ PTR;
      105    10009    1   DCL PIC_SIZE SBIN;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:13   
      106    10010    1   DCL 1 PICTURE CALIGNED BASED( PICTURE$ ),
      107    10011    1       2 L UBIN BYTE CALIGNED,
      108    10012    1       2 T CHAR( 63 );
      109    10013
      110    10014    1   DCL CHAR_SIZE SBIN;
      111    10015    1   DCL CHARS$ PTR;
      112    10016    1   DCL CHARS CHAR( CHAR_SIZE ) BASED( CHARS$ );
      113    10017
      114    10018    1   DCL TEMP_CHARS CHAR( 64 );
      115    10019    1   DCL TEMP_PICTURE CHAR( 64 );
      116    10020    1   DCL LIMBO CHAR( 12 );
      117    10021
      118    10022    1   DCL DAYS SBIN;
      119    10023    1   DCL TICS SBIN;
      120    10024    1   DCL UTS UBIN;
      121    10025    1   DCL UTS_CHR4 REDEF UTS CHAR( 4 );
      122    10026
      123    10027    1   DCL 1 FLDS,
      124    10028    1       2 YEAR SBIN,
      125    10029    1       2 MON SBIN,
      126    10030    1       2 DAY SBIN,
      127    10031    1       2 JULIAN SBIN,
      128    10032    1       2 QUARTER SBIN,
      129    10033    1       2 BC BIT( 1 ),
      130    10034    1       2 LEAP_FLAG BIT( 1 ),
      131    10035    1       2 WKDAY_ONLY BIT( 1 ),
      132    10036    1       2 LEAP SBIN,
      133    10037    1       2 WKDAY SBIN,
      134    10038    1       2 HOUR SBIN,
      135    10039    1       2 MIN SBIN,
      136    10040    1       2 SEC SBIN,
      137    10041    1       2 TIC SBIN;
      138    10042
      139    10043    1   DCL I SBIN;
      140    10044    1   DCL J SBIN;
      141    10045    1   DCL IDX SBIN;
      142    10046    1   DCL JUNK UBIN;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:14   
      143    10047    1   DCL LEN SBIN;
      144    10048    1   DCL NUM SBIN;
      145    10049    1   DCL TIMESPAN BIT( 1 );
      146    10050    1   DCL ERR BIT( 36 );
      147    10051
      148    10052        %INCLUDE XUD_UTS_M;
        1+   10053        /*M* XUD_UTS_M Macros for XUD UTS subroutines */
        2+   10054        /*T***********************************************************/
        3+   10055        /*T*                                                         */
        4+   10056        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+   10057        /*T*                                                         */
        6+   10058        /*T***********************************************************/
        7+   10059
        8+   10060        /*F*
        9+   10061        NAME:   XUD$UTS_ENTRIES
       10+   10062
       11+   10063                The XUD$UTS_ENTRIES macro generates entry point definitions
       12+   10064                for all XUD$UTS service routines
       13+   10065        */
       14+   10066
       15+   10067        %MACRO XUD$UTS_ENTRIES;
       16+   10068
       17+   10069        dcl XUD$UTS_DIFF              entry (3) altret;
       18+   10070        /*  Returns difference between UTS1 and UTS2 in centiseconds.
       19+   10071            Usage:  call XUD$UTS_DIFF (INTERVAL, UTS1, UTS2) ...
       20+   10072              INTERVAL  sbin  (OUTPUT)
       21+   10073              UTS1      ubin
       22+   10074              UTS2      ubin  */
       23+   10075
       24+   10076        dcl XUD$UTS_DIFF_SEC          entry (3) altret;
       25+   10077        /*  Returns difference between UTS1 and UTS2 in seconds.
       26+   10078            Usage:  call XUD$UTS_DIFF_SEC (INTERVAL, UTS1, UTS2) ...
       27+   10079              INTERVAL  sbin  (OUTPUT)
       28+   10080              UTS1      ubin
       29+   10081              UTS2      ubin  */
       30+   10082
       31+   10083        dcl XUD$UTS_DIFF_25TH         entry (3) altret;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:15   
       32+   10084        /*  Returns difference between UTS1 and UTS2 in 1/25th second units.
       33+   10085            Usage:  call XUD$UTS_DIFF_25TH (INTERVAL, UTS1, UTS2) ...
       34+   10086              INTERVAL  sbin  (OUTPUT)
       35+   10087              UTS1      ubin
       36+   10088              UTS2      ubin  */
       37+   10089
       38+   10090
       39+   10091        dcl XUD$UTS_ADJUST            entry (3) altret;
       40+   10092        /*  Returns UTS1 computed by adding INTERVAL centiseconds to UTS2
       41+   10093            Usage:  call XUD$UTS_ADJUST (UTS1, UTS2, INTERVAL) ...
       42+   10094              UTS1      ubin  (OUTPUT)
       43+   10095              UTS2      ubin
       44+   10096              INTERVAL  sbin  */
       45+   10097
       46+   10098        dcl XUD$UTS_ADJ_25TH          entry (3) altret;
       47+   10099        /*  Returns UTS1 computed by adding INTERVAL in 1/25ths of a second to UTS2
       48+   10100            Usage:  call XUD$UTS_ADJ_25TH (UTS1, UTS2, INTERVAL) ...
       49+   10101              UTS1      ubin  (OUTPUT)
       50+   10102              UTS2      ubin
       51+   10103              INTERVAL  sbin  */
       52+   10104
       53+   10105        %MEND;                        /* end of XUD$UTS_ENTRIES */
             10105            /* end of XUD$UTS_ENTRIES */
       54+   10106
       55+   10107
       56+   10108        /*F*
       57+   10109        NAME:   XUD_UTS_EQU
       58+   10110
       59+   10111                The XUD_UTS_EQU macro defines the various symbolic constants
       60+   10112                used by the XUD$UTS service routines and their callers.
       61+   10113        */
       62+   10114
       63+   10115        %MACRO XUD_UTS_EQU;
       64+   10116
       65+   10117        %EQU UTS_CUSP# = chartext ('bitbin(''540546215000''o)');
       66+   10118
       67+   10119        %EQU UTS_25TH_SEC# = 25;        /* # 1/25ths of a second in a second */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:16   
       68+   10120        %EQU UTS_25TH_MIN# = 1500;      /* ... a minute */
       69+   10121        %EQU UTS_25TH_HOUR# = 90000;    /* ... an hour */
       70+   10122        %EQU UTS_25TH_DAY# = 2160000;   /* ... a day */
       71+   10123
       72+   10124        %EQU UTS_CSEC_SEC# = 100;       /* # centiseconds in a second */
       73+   10125        %EQU UTS_CSEC_MIN# = 6000;      /* ... a minute */
       74+   10126        %EQU UTS_CSEC_HOUR# = 360000;   /* ... an hour */
       75+   10127        %EQU UTS_CSEC_DAY# = 8640000;   /* ... a day */
       76+   10128
       77+   10129        %MEND;                        /* end of XUD_UTS_EQU */      /* end of XUD_UTS_EQU */
       78+   10130
       79+   10131        /***********************************************************************
       80+   10132         *        End of include file XUD_UTS_M.                               *
       81+   10133         ***********************************************************************/
      149    10134        %XUD$UTS_ENTRIES;
             10135    1   dcl XUD$UTS_DIFF              entry (3) altret;
             10136        /*  Returns difference between UTS1 and UTS2 in centiseconds.
             10137            Usage:  call XUD$UTS_DIFF (INTERVAL, UTS1, UTS2) ...
             10138              INTERVAL  sbin  (OUTPUT)
             10139              UTS1      ubin
             10140              UTS2      ubin  */
             10141    1   dcl XUD$UTS_DIFF_SEC          entry (3) altret;
             10142        /*  Returns difference between UTS1 and UTS2 in seconds.
             10143            Usage:  call XUD$UTS_DIFF_SEC (INTERVAL, UTS1, UTS2) ...
             10144              INTERVAL  sbin  (OUTPUT)
             10145              UTS1      ubin
             10146              UTS2      ubin  */
             10147    1   dcl XUD$UTS_DIFF_25TH         entry (3) altret;
             10148        /*  Returns difference between UTS1 and UTS2 in 1/25th second units.
             10149            Usage:  call XUD$UTS_DIFF_25TH (INTERVAL, UTS1, UTS2) ...
             10150              INTERVAL  sbin  (OUTPUT)
             10151              UTS1      ubin
             10152              UTS2      ubin  */
             10153    1   dcl XUD$UTS_ADJUST            entry (3) altret;
             10154        /*  Returns UTS1 computed by adding INTERVAL centiseconds to UTS2
             10155            Usage:  call XUD$UTS_ADJUST (UTS1, UTS2, INTERVAL) ...
             10156              UTS1      ubin  (OUTPUT)
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:17   
             10157              UTS2      ubin
             10158              INTERVAL  sbin  */
             10159    1   dcl XUD$UTS_ADJ_25TH          entry (3) altret;
             10160        /*  Returns UTS1 computed by adding INTERVAL in 1/25ths of a second to UTS2
             10161            Usage:  call XUD$UTS_ADJ_25TH (UTS1, UTS2, INTERVAL) ...
             10162              UTS1      ubin  (OUTPUT)
             10163              UTS2      ubin
             10164              INTERVAL  sbin  */
      150    10166        %XUD_UTS_EQU;
             10167        %EQU UTS_CUSP# = chartext ('bitbin(''540546215000''o)');
             10168        %EQU UTS_25TH_SEC# = 25;        /* # 1/25ths of a second in a second */
             10169        %EQU UTS_25TH_MIN# = 1500;      /* ... a minute */
             10170        %EQU UTS_25TH_HOUR# = 90000;    /* ... an hour */
             10171        %EQU UTS_25TH_DAY# = 2160000;   /* ... a day */
             10172        %EQU UTS_CSEC_SEC# = 100;       /* # centiseconds in a second */
             10173        %EQU UTS_CSEC_MIN# = 6000;      /* ... a minute */
             10174        %EQU UTS_CSEC_HOUR# = 360000;   /* ... an hour */
             10175        %EQU UTS_CSEC_DAY# = 8640000;   /* ... a day */
      151    10177
      152    10178    1   DCL PIC_CHAR CHAR( 1 );
      153    10179    1   DCL PICID UBIN( 9 );
      154    10180    1   DCL PICTYPE CHAR( 1 );
      155    10181    1   DCL PICID_USED BIT( 18 );
      156    10182    1   DCL PICID_SWITCH BIT( 1 );
      157    10183    1   DCL USED_FLAG BIT( 18 );
      158    10184    1   DCL USED_BEFORE BIT( 18 );
      159    10185    1   DCL PICID_H SBIN;
      160    10186    1   DCL MAXSIZE SBIN;
      161    10187
      162    10188    1   DCL 1 TEXTC CALIGNED BASED,
      163    10189    1       2 L UBIN BYTE CALIGNED,
      164    10190    1       2 T CHAR( TEXTC.L );
      165    10191
      166    10192        /********** External Routines
      167    10193        */
      168    10194    1   DCL XUD$TO_DATE ENTRY( 3 ) ALTRET;
      169    10195    1   DCL XUD$FROM_DATE ENTRY( 3 ) ALTRET;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:18   
      170    10196
      171    10197        /****** Monitor service interface
      172    10198        */
      173    10199        %PLIST;
      174    10200        %FPT_TIME( FPTN=FPT@TIME, STCLASS=AUTO );
      175    10219        %FPT_TIME( FPTN=FPT_TIME_C, STCLASS=CONSTANT,
      176    10220            SOURCE=CLOCK,
      177    10221            DEST=ANS );
      178    10240
      179    10241    1   DCL 1 SYSTEM_DATE,
      180    10242    1       2 YY CHAR( 2 ),
      181    10243    1       2 MM CHAR( 2 ),
      182    10244    1       2 DD CHAR( 2 );
      183    10245    1   DCL SYSTEM_YEAR SBIN;
      184    10246
      185    10247        /****** Constants
      186    10248        */
      187    10249        %XUD_VALID;
      188    10309
      189    10310        %VLP_ERRCODE( FPTN=E_XUD#BAD_SIZE, STCLASS=CONSTANT,
      190    10311            FCG=XU, MID=D, ERR#=%E$XUD#BAD_SIZE );
      191    10356        /*E* ERROR: XUD-E$XUD#BAD_SIZE
      192    10357        MESSAGE: Illegal size for character date.  Legal size is between 1 and 63.
      193    10358        DESCRIPTION: Occurs only on calls for conversion to or from character.
      194    10359                     For conversion to character, XUD_PARAM.SIZE is incorrect.
      195    10360                     For conversion from character, either the string size is
      196    10361                     incorrect or the string is all blank.  In this case, the
      197    10362                     size comes from XUD_PARAM.SIZE if XUD_PARAM.TEXTC=NO, and
      198    10363                     from the count byte of the TEXTC string if XUD_PARAM.TEXTC=YES.
      199    10364        */
      200    10365        %VLP_ERRCODE( FPTN=E_XUD#BAD_PIC_SIZE, STCLASS=CONSTANT,
      201    10366            FCG=XU, MID=D, ERR#=%E$XUD#BAD_PIC_SIZE );
      202    10411        /*E* ERROR: XUD-E$XUD#BAD_PIC_SIZE
      203    10412        MESSAGE: Illegal size for date picture.  Legal size is between 1 and 63.
      204    10413        DESCRIPTION: Occurs only on calls that do picture initialization.
      205    10414                     If XUD_PARAM.PIC_TEXTC=NO, XUD_PARAM.PIC_SIZE is incorrect.
      206    10415                     Otherwise, the count byte of the TEXTC string for the picture
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:19   
      207    10416                     is incorrect.
      208    10417        */
      209    10418        %VLP_ERRCODE( FPTN=E_XUD#OVERFLOW, STCLASS=CONSTANT,
      210    10419            FCG=XU, MID=D, ERR#=%E$XUD#OVERFLOW );
      211    10464        /*E* ERROR: XUD-E$XUD#OVERFLOW
      212    10465        MESSAGE: Date overflow.
      213    10466        DESCRIPTION: Occurs only on calls for conversion from character,
      214    10467                     and for XUD$DATE_UTS.  The value to be converted is too
      215    10468                     large for the target datatype.  The value returned is the
      216    10469                     maximum for that datatype.
      217    10470        */
      218    10471        %VLP_ERRCODE( FPTN=E_XUD#UNDERFLOW, STCLASS=CONSTANT,
      219    10472            FCG=XU, MID=D, ERR#=%E$XUD#UNDERFLOW );
      220    10517        /*E* ERROR: XUD-E$XUD#UNDERFLOW
      221    10518        MESSAGE: Date underflow.
      222    10519        DESCRIPTION: Occurs only on calls for conversion from character,
      223    10520                     and for XUD$DATE_UTS.  The value to be converted is too
      224    10521                     small for the target datatype.  The value returned is the
      225    10522                     minimum for that datatype.
      226    10523        */
      227    10524        %VLP_ERRCODE( FPTN=E_XUD#BAD_PIC, STCLASS=CONSTANT,
      228    10525            FCG=XU, MID=D, ERR#=%E$XUD#BAD_PIC );
      229    10570        /*E* ERROR: XUD-E$XUD#BAD_PIC
      230    10571        MESSAGE: Invalid character in a date/time picture.
      231    10572        MESSAGE1: Characters that are not subfield identifiers and not punctuation
      232    10573                    must be enclosed in (") quotes.
      233    10574        DESCRIPTION: Occurs only on calls that do picture initialization.
      234    10575        */
      235    10576        %VLP_ERRCODE( FPTN=E_XUD#BAD_TIME_PIC, STCLASS=CONSTANT,
      236    10577            FCG=XU, MID=D, ERR#=%E$XUD#BAD_TIME_PIC );
      237    10622        /*E* ERROR: XUD-E$XUD#BAD_TIME_PIC
      238    10623        MESSAGE: Invalid character in a time span picture.
      239    10624        MESSAGE1: Characters that are not subfield identifiers and not punctuation
      240    10625                    must be enclosed in (") quotes.
      241    10626        DESCRIPTION: Occurs only on calls that do picture initialization.
      242    10627                     It is used in place of E$XUD_BAD_PIC when XUD_PARAM.TIMESPAN=YES.
      243    10628        */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:20   
      244    10629        %VLP_ERRCODE( FPTN=E_XUD#BAD_PIC_QUOTE, STCLASS=CONSTANT,
      245    10630            FCG=XU, MID=D, ERR#=%E$XUD#BAD_PIC_QUOTE );
      246    10675        /*E* ERROR: XUD-E$XUD#BAD_PIC_QUOTE
      247    10676        MESSAGE: Unmatched (") quotes in a date/time picture.
      248    10677        DESCRIPTION: Occurs only on calls that do picture initialization.
      249    10678        */
      250    10679        %VLP_ERRCODE( FPTN=E_XUD#LONG_PICID, STCLASS=CONSTANT,
      251    10680            FCG=XU, MID=D, ERR#=%E$XUD#LONG_PICID );
      252    10725        /*E* ERROR: XUD-E$XUD#LONG_PICID
      253    10726        MESSAGE: Too many repetitions of a character in a date/time picture.
      254    10727        DESCRIPTION: Occurs only on calls that do picture initialization.
      255    10728        */
      256    10729        %VLP_ERRCODE( FPTN=E_XUD#RUNON_PICID, STCLASS=CONSTANT,
      257    10730            FCG=XU, MID=D, ERR#=%E$XUD#RUNON_PICID );
      258    10775        /*E* ERROR: XUD-E$XUD#RUNON_PICID
      259    10776        MESSAGE: A date/time picture contains two adjacent alphabetic or
      260    10777                    zero suppressed numeric fields.
      261    10778        DESCRIPTION: Occurs only on calls that do picture initialization.
      262    10779                     This message is used for pictures where conversion to
      263    10780                     character will yield values that cannot be correctly
      264    10781                     parsed by the conversion from character logic.
      265    10782        */
      266    10783        %VLP_ERRCODE( FPTN=E_XUD#AMBIGUOUS_PIC, STCLASS=CONSTANT,
      267    10784            FCG=XU, MID=D, ERR#=%E$XUD#AMBIGUOUS_PIC );
      268    10829        /*E* ERROR: XUD-E$XUD#AMBIGUOUS_PIC
      269    10830        MESSAGE: The picture contains an ambiguous combination of subfields.
      270    10831        DESCRIPTION: Occurs only on calls that do picture initialization.
      271    10832                     The day of week and time of day are only meaningful when
      272    10833                     the picture defines a specific day.  Era is not meaningful
      273    10834                     when the year is derived from the current date.  Year and
      274    10835                     day cannot be specified without the month.
      275    10836        */
      276    10837        %VLP_ERRCODE( FPTN=E_XUD#SHORT_CHAR, STCLASS=CONSTANT,
      277    10838            FCG=XU, MID=D, ERR#=%E$XUD#SHORT_CHAR );
      278    10883        /*E* ERROR: XUD-E$XUD#SHORT_CHAR
      279    10884        MESSAGE: The field for a date/time is too small to hold the value.
      280    10885        DESCRIPTION: Occurs only on calls for conversion to character.
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:21   
      281    10886                     The receiving field is too short to hold the entire value when
      282    10887                     converted according to the specified picture.  The value
      283    10888                     returned is truncated at the first subfield or punctuation
      284    10889                     character that would extend beyond the end of the field.
      285    10890        */
      286    10891        %VLP_ERRCODE( FPTN=E_XUD#EXCESS_CHARS, STCLASS=CONSTANT,
      287    10892            FCG=XU, MID=D, ERR#=%E$XUD#EXCESS_CHARS );
      288    10937        /*E* ERROR: XUD-E$XUD#EXCESS_CHARS
      289    10938        MESSAGE: A character date or time has extra characters at the end of the value.
      290    10939        DESCRIPTION: Occurs only on calls for conversion from character.
      291    10940                     When called within a parse exit (U$) routine to parse a date in a
      292    10941                     command, this can be treated as a normal return.  Otherwise, it is
      293    10942                     equivalent to E$XUD#BAD_DATE or E$XUD#BAD_TIME.
      294    10943        */
      295    10944        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE, STCLASS=CONSTANT,
      296    10945            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE );
      297    10990        /*E* ERROR: XUD-E$XUD#BAD_DATE
      298    10991        MESSAGE: Date or time is not in the proper format.
      299    10992        DESCRIPTION: Occurs only on calls for conversion from character
      300    10993                     when XUD_PARAM.TIMESPAN=NO.
      301    10994                     It covers a variety of errors that cannot be tied to a specific
      302    10995                     subfield.  These include missing, incorrect, or extra punctuation,
      303    10996                     and too many digits in a numeric subfield.  It is also used
      304    10997                     when no picture is provided and it is not possible to determine
      305    10998                     what type of format is intended to be used.
      306    10999        */
      307    11000        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_Y, STCLASS=CONSTANT,
      308    11001            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_Y );
      309    11046        /*E* ERROR: XUD-E$XUD#BAD_DATE_Y
      310    11047        MESSAGE: Missing or incorrect value for year.
      311    11048        DESCRIPTION: Occurs only on calls for conversion from character.
      312    11049        */
      313    11050        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_MO, STCLASS=CONSTANT,
      314    11051            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_MO );
      315    11096        /*E* ERROR: XUD-E$XUD#BAD_DATE_MO
      316    11097        MESSAGE: Missing or incorrect value for month.
      317    11098        DESCRIPTION: Occurs only on calls for conversion from character.
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:22   
      318    11099        */
      319    11100        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_D, STCLASS=CONSTANT,
      320    11101            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_D );
      321    11146        /*E* ERROR: XUD-E$XUD#BAD_DATE_D
      322    11147        MESSAGE: Missing or incorrect value for days.
      323    11148        DESCRIPTION: Occurs only on calls for conversion from character.
      324    11149        */
      325    11150        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_W, STCLASS=CONSTANT,
      326    11151            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_W );
      327    11196        /*E* ERROR: XUD-E$XUD#BAD_DATE_W
      328    11197        MESSAGE: Missing or incorrect value for day of week.
      329    11198        DESCRIPTION: Occurs only on calls for conversion from character.
      330    11199        */
      331    11200        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_Q, STCLASS=CONSTANT,
      332    11201            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_Q );
      333    11246        /*E* ERROR: XUD-E$XUD#BAD_DATE_Q
      334    11247        MESSAGE: Missing or incorrect value for quarter of year.
      335    11248        DESCRIPTION: Occurs only on calls for conversion from character.
      336    11249        */
      337    11250        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_H, STCLASS=CONSTANT,
      338    11251            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_H );
      339    11296        /*E* ERROR: XUD-E$XUD#BAD_DATE_H
      340    11297        MESSAGE: Missing or incorrect value for hours.
      341    11298        DESCRIPTION: Occurs only on calls for conversion from character.
      342    11299        */
      343    11300        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_MI, STCLASS=CONSTANT,
      344    11301            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_MI );
      345    11346        /*E* ERROR: XUD-E$XUD#BAD_DATE_MI
      346    11347        MESSAGE: Missing or incorrect value for minutes.
      347    11348        DESCRIPTION: Occurs only on calls for conversion from character.
      348    11349        */
      349    11350        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_S, STCLASS=CONSTANT,
      350    11351            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_S );
      351    11396        /*E* ERROR: XUD-E$XUD#BAD_DATE_S
      352    11397        MESSAGE: Missing or incorrect value for seconds.
      353    11398        DESCRIPTION: Occurs only on calls for conversion from character.
      354    11399        */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:23   
      355    11400        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_T, STCLASS=CONSTANT,
      356    11401            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_T );
      357    11446        /*E* ERROR: XUD-E$XUD#BAD_DATE_T
      358    11447        MESSAGE: Missing or incorrect value for hundredths of seconds.
      359    11448        DESCRIPTION: Occurs only on calls for conversion from character.
      360    11449        */
      361    11450        %VLP_ERRCODE( FPTN=E_XUD#BAD_TIME, STCLASS=CONSTANT,
      362    11451            FCG=XU, MID=D, ERR#=%E$XUD#BAD_TIME );
      363    11496        /*E* ERROR: XUD-E$XUD#BAD_TIME
      364    11497        MESSAGE: Timespan is not in the proper format.
      365    11498        DESCRIPTION: Occurs only on calls for conversion from character.
      366    11499                     It is used in place of E$XUD#BAD_DATE when XUD_PARAM.TIMESPAN=YES.
      367    11500        */
      368    11501        %VLP_ERRCODE( FPTN=E_XUD#BAD_PICID, STCLASS=CONSTANT,
      369    11502            FCG=XU, MID=D, ERR#=%E$XUD#BAD_PICID );
      370    11547        /*E* ERROR: XUD-E$XUD#BAD_PICID
      371    11548        MESSAGE: Date subfield appears in time picture, or vice versa.
      372    11549        DESCRIPTION: Occurs only on calls that do picture initialization.
      373    11550        */
      374    11551        %VLP_ERRCODE( FPTN=E_XUD#DUP_PICID, STCLASS=CONSTANT,
      375    11552            FCG=XU, MID=D, ERR#=%E$XUD#DUP_PICID );
      376    11597        /*E* ERROR: XUD-E$XUD#DUP_PICID
      377    11598        MESSAGE: A subfield appears more than once in a date/time picture.
      378    11599        DESCRIPTION: Occurs only on calls that do picture initialization.
      379    11600        */
      380    11601        %VLP_ERRCODE( FPTN=E_XUD#NO_PICIDS, STCLASS=CONSTANT,
      381    11602            FCG=XU, MID=D, ERR#=%E$XUD#NO_PICIDS );
      382    11647        /*E* ERROR: XUD-E$XUD#NO_PICIDS
      383    11648        MESSAGE: The picture does not contain any date/time subfields.
      384    11649        DESCRIPTION: Occurs only on calls that do picture initialization.
      385    11650        */
      386    11651        %VLP_ERRCODE( FPTN=E_XUD#PICID_ORDER, STCLASS=CONSTANT,
      387    11652            FCG=XU, MID=D, ERR#=%E$XUD#PICID_ORDER );
      388    11697        /*E* ERROR: XUD-E$XUD#PICID_ORDER
      389    11698        MESSAGE: The subfields in a time picture are not in the proper order.
      390    11699        DESCRIPTION: Occurs only on calls that do picture initialization.
      391    11700        */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:24   
      392    11701        %VLP_ERRCODE( FPTN=E_XUD#UNINIT_PIC, STCLASS=CONSTANT,
      393    11702            FCG=XU, MID=D, ERR#=%E$XUD#UNINIT_PIC );
      394    11747        /*E* ERROR: XUD-E$XUD#UNINIT_PIC
      395    11748        MESSAGE: A date/time picture has not been properly initialized.
      396    11749        DESCRIPTION: Occurs only on calls for conversion to or from character.
      397    11750                     This indicates a program error, not a user error.  If issued
      398    11751                     by a standard CP-6 processor, it should be reported in STARLOG.
      399    11752        */
      400    11753        %VLP_ERRCODE( FPTN=E_XUD#BAD_UTS_TYPE, STCLASS=CONSTANT,
      401    11754            FCG=XU, MID=D, ERR#=%E$XUD#BAD_UTS_TYPE );
      402    11799        /*E* ERROR: XUD-E$XUD#BAD_UTS_TYPE
      403    11800        MESSAGE: Invalid UTS type.
      404    11801        MESSAGE1: The value in xud_param.UTS_TYPE is not correct.  This is a program
      405    11802                    error, not a user error.  If issued by a standard CP-6 processor,
      406    11803                    it should be reported in STARLOG.
      407    11804        */
      408    11805
      409    11806    1   DCL CUM_DAYS( 0:11 ) SBIN CONSTANT
      410    11807    1       INIT( 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 );
      411    11808    1   DCL CUM_DAYS_BC( 0:11 ) SBIN CONSTANT
      412    11809    1       INIT( 334, 306, 275, 245, 214, 184, 153, 122, 92, 61, 31, 0 );
      413    11810    1   DCL MON_DAYS( 0:11 ) SBIN CONSTANT
      414    11811    1       INIT( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
      415    11812
      416    11813    1   DCL MONTH$( 0:11 ) PTR CONSTANT INIT(
      417    11814    1       ADDR( MONTH.JAN ),
      418    11815    1       ADDR( MONTH.FEB ),
      419    11816    1       ADDR( MONTH.MAR ),
      420    11817    1       ADDR( MONTH.APR ),
      421    11818    1       ADDR( MONTH.MAY ),
      422    11819    1       ADDR( MONTH.JUN ),
      423    11820    1       ADDR( MONTH.JUL ),
      424    11821    1       ADDR( MONTH.AUG ),
      425    11822    1       ADDR( MONTH.SEP ),
      426    11823    1       ADDR( MONTH.OCT ),
      427    11824    1       ADDR( MONTH.NOV ),
      428    11825    1       ADDR( MONTH.DEC ));
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:25   
      429    11826    1   DCL 1 MONTH CONSTANT,
      430    11827    1         2 JAN,
      431    11828    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.JAN.T )),
      432    11829    1           3 T CHAR( 0 ) INIT( 'JANUARY' ),
      433    11830    1         2 FEB,
      434    11831    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.FEB.T )),
      435    11832    1           3 T CHAR( 0 ) INIT( 'FEBRUARY' ),
      436    11833    1         2 MAR,
      437    11834    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.MAR.T )),
      438    11835    1           3 T CHAR( 0 ) INIT( 'MARCH' ),
      439    11836    1         2 APR,
      440    11837    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.APR.T )),
      441    11838    1           3 T CHAR( 0 ) INIT( 'APRIL' ),
      442    11839    1         2 MAY,
      443    11840    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.MAY.T )),
      444    11841    1           3 T CHAR( 0 ) INIT( 'MAY' ),
      445    11842    1         2 JUN,
      446    11843    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.JUN.T )),
      447    11844    1           3 T CHAR( 0 ) INIT( 'JUNE' ),
      448    11845    1         2 JUL,
      449    11846    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.JUL.T )),
      450    11847    1           3 T CHAR( 0 ) INIT( 'JULY' ),
      451    11848    1         2 AUG,
      452    11849    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.AUG.T )),
      453    11850    1           3 T CHAR( 0 ) INIT( 'AUGUST' ),
      454    11851    1         2 SEP,
      455    11852    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.SEP.T )),
      456    11853    1           3 T CHAR( 0 ) INIT( 'SEPTEMBER' ),
      457    11854    1         2 OCT,
      458    11855    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.OCT.T )),
      459    11856    1           3 T CHAR( 0 ) INIT( 'OCTOBER' ),
      460    11857    1         2 NOV,
      461    11858    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.NOV.T )),
      462    11859    1           3 T CHAR( 0 ) INIT( 'NOVEMBER' ),
      463    11860    1         2 DEC,
      464    11861    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.DEC.T )),
      465    11862    1           3 T CHAR( 0 ) INIT( 'DECEMBER' );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:26   
      466    11863
      467    11864    1   DCL MONTH_SIZE( 0:11 ) UBIN CONSTANT
      468    11865    1       INIT( 2, 1, 3, 2, 3, 3, 3, 2, 1, 1, 1, 1 );
      469    11866
      470    11867    1   DCL WEEKDAY$( 0:6 ) PTR CONSTANT INIT(
      471    11868    1       ADDR( WEEKDAY.SUN ),
      472    11869    1       ADDR( WEEKDAY.MON ),
      473    11870    1       ADDR( WEEKDAY.TUE ),
      474    11871    1       ADDR( WEEKDAY.WED ),
      475    11872    1       ADDR( WEEKDAY.THU ),
      476    11873    1       ADDR( WEEKDAY.FRI ),
      477    11874    1       ADDR( WEEKDAY.SAT ));
      478    11875    1   DCL 1 WEEKDAY CONSTANT,
      479    11876    1         2 SUN,
      480    11877    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.SUN.T )),
      481    11878    1           3 T CHAR( 0 ) INIT( 'SUNDAY' ),
      482    11879    1         2 MON,
      483    11880    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.MON.T )),
      484    11881    1           3 T CHAR( 0 ) INIT( 'MONDAY' ),
      485    11882    1         2 TUE,
      486    11883    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.TUE.T )),
      487    11884    1           3 T CHAR( 0 ) INIT( 'TUESDAY' ),
      488    11885    1         2 WED,
      489    11886    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.WED.T )),
      490    11887    1           3 T CHAR( 0 ) INIT( 'WEDNESDAY' ),
      491    11888    1         2 THU,
      492    11889    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.THU.T )),
      493    11890    1           3 T CHAR( 0 ) INIT( 'THURSDAY' ),
      494    11891    1         2 FRI,
      495    11892    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.FRI.T )),
      496    11893    1           3 T CHAR( 0 ) INIT( 'FRIDAY' ),
      497    11894    1         2 SAT,
      498    11895    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.SAT.T )),
      499    11896    1           3 T CHAR( 0 ) INIT( 'SATURDAY' );
      500    11897
      501    11898        %EQU SPEC_NOW = 0 ;
      502    11899        %EQU SPEC_TODAY = 1 ;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:27   
      503    11900        %EQU SPEC_TOMORROW = 2 ;
      504    11901        %EQU SPEC_YESTERDAY = 3 ;
      505    11902        %EQU SPEC_MAX = 3 ;
      506    11903
      507    11904    1   DCL SPECIAL_SIZE( 0:%SPEC_MAX ) UBIN CONSTANT
      508    11905    1       INIT( 3, 3, 4, 4 );
      509    11906
      510    11907    1   DCL SPECIAL$( 0:%SPEC_MAX ) PTR CONSTANT INIT(
      511    11908    1       ADDR( SPECIAL.NOW ),
      512    11909    1       ADDR( SPECIAL.TODAY ),
      513    11910    1       ADDR( SPECIAL.TOMORROW ),
      514    11911    1       ADDR( SPECIAL.YESTERDAY ));
      515    11912    1   DCL 1 SPECIAL CONSTANT ,
      516    11913    1         2 NOW,
      517    11914    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( SPECIAL.NOW.T )),
      518    11915    1           3 T CHAR( 0 ) INIT( 'NOW' ),
      519    11916    1         2 TODAY,
      520    11917    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( SPECIAL.TODAY.T )),
      521    11918    1           3 T CHAR( 0 ) INIT( 'TODAY' ),
      522    11919    1         2 TOMORROW,
      523    11920    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( SPECIAL.TOMORROW.T )),
      524    11921    1           3 T CHAR( 0 ) INIT( 'TOMORROW' ),
      525    11922    1         2 YESTERDAY,
      526    11923    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( SPECIAL.YESTERDAY.T )),
      527    11924    1           3 T CHAR( 0 ) INIT( 'YESTERDAY' );
      528    11925
      529    11926    1   DCL DEFAULT_PICTURE( 0:5 ) UBIN BYTE CALIGNED CONSTANT INIT( 5,
      530    11927    1       %XUD#P_DATE_M2,
      531    11928    1       %ASCBIN( '/' ),
      532    11929    1       %XUD#P_DATE_D2,
      533    11930    1       %ASCBIN( '/' ),
      534    11931    1       %XUD#P_DATE_Y2 );
      535    11932
      536    11933    1   DCL MAX_UTS_INIT BIT( 36 ) CONSTANT INIT( '777777777777'O );
      537    11934    1   DCL MAX_UTS REDEF MAX_UTS_INIT CHAR( 4 );
      538    11935    1   DCL MAX_UBIN REDEF MAX_UTS_INIT UBIN;
      539    11936    1   DCL MIN_UTS_INIT BIT( 36 ) CONSTANT INIT( '0'O );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:28   
      540    11937    1   DCL MIN_UTS REDEF MIN_UTS_INIT CHAR( 4 );
      541    11938    1   DCL MAX_DATE_INIT BIT( 72 ) CONSTANT INIT( '311231231231231231231231'O );
      542    11939    1   DCL MAX_DATE REDEF MAX_DATE_INIT CHAR( 8 );
      543    11940
      544    11941        /****** Common termination logic
      545    11942        */
      546    11943    1       ERR = '0'B;
      547    11944    1   ERROR_RETURN: ;
      548    11945    1       XUD_PARAM.ERR = ERR;
      549    11946    1       ALTRETURN;
      550    11947
      551    11948    1   NORMAL_RETURN: ;
      552    11949    1       XUD_PARAM.ERR = '0'B;
      553    11950    1       RETURN;
      554    11951
      555    11952        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:29   
      556    11953        /******************************************************************************/
      557    11954        /*F*
      558    11955        NAME:   XUD$INIT_PIC
      559    11956        PURPOSE:
      560    11957                Initialize a date/time picture.
      561    11958        */
      562    11959        /*D*
      563    11960        NAME:   XUD$INIT_PIC
      564    11961        CALL:
      565    11962                CALL XUD$INIT_PIC( XUD_PARAM, external, internal ) ALTRET( error );
      566    11963        PARAMETERS:
      567    11964                XUD_PARAM - Standard parameter block.
      568    11965                external - The picture in external format.
      569    11966                internal - Returns the picture in internal format.
      570    11967        INTERFACE:
      571    11968                CHK4SFX
      572    11969        DESCRIPTION:
      573    11970                This routine converts a date/time picture from external to internal
      574    11971                form.  In an internal picture, subfield identifiers are replaced
      575    11972                with a one-byte code for ease of processing.  As a result, the
      576    11973                size of an internal picture is guaranteed to be less than or equal
      577    11974                to the size of the external picture.  External pictures may not
      578    11975                exceed 63 characters.  Internal pictures are always TEXTC strings.
      579    11976                All pictures must be initialized before they are used on calls
      580    11977                to conversion routines.
      581    11978        */
      582    11979        /******************************************************************************/
      583    11980
      584    11981    1   XUD$INIT_PIC: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;
      585    11982
      586    11983            /*
      587    11984              Prepare the external picture for parsing.
      588    11985            */
      589    11986    1       IF XUD_PARAM.PIC_TEXTC
      590    11987    2       THEN DO;
      591    11988    2           CHARS$ = ADDR( ADDR(DATA_IN)-> TEXTC.T );
      592    11989    2           CHAR_SIZE = ADDR(DATA_IN)-> TEXTC.L;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:30   
      593    11990    2       END;
      594    11991    2       ELSE DO;
      595    11992    2           CHARS$ = ADDR(DATA_IN);
      596    11993    2           CHAR_SIZE = XUD_PARAM.PIC_SIZE;
      597    11994    2       END;
      598    11995    1       PICTURE$ = ADDR(DATA_OUT);
      599    11996
      600    11997    1       IF CHAR_SIZE = 0 OR CHAR_SIZE > 63
      601    11998    2       THEN DO;
      602    11999    2           ERR = E_XUD#BAD_PIC_SIZE;
      603    12000    2           GOTO ERROR_RETURN;
      604    12001    2       END;
      605    12002    1       CALL RSEARCH ALTRET( E_NO_PICIDS );
      606    12003    1       CALL XLATE( TEMP_CHARS, B$XL_UPPER_UR, CHARS );
      607    12004
      608    12005    1       ERR = '0'B;
      609    12006    1       PICID_USED = '0'B;
      610    12007    1       USED_BEFORE = '0'B;
      611    12008    1       PICID_SWITCH = %XUD#NO;
      612    12009    1       PICID_H = -1;
      613    12010    1       MAXSIZE = 0;
      614    12011    1       TIMESPAN = XUD_PARAM.TIMESPAN;
      615    12012    1       IF TIMESPAN
      616    12013    1         THEN PICTYPE = %XUD#PICTYPE_TIME;
      617    12014    1         ELSE PICTYPE = %XUD#PICTYPE_UNDEF;
      618    12015
      619    12016            /*
      620    12017              Loop to scan all characters in external picture...
      621    12018              for each, insert the appropriate codes in the internal picture.
      622    12019                J = index into external picture.
      623    12020                I = index into internal picture.
      624    12021            */
      625    12022    1       I = 0;
      626    12023    1       CALL SEARCH( J, JUNK, B$SR_NON_BLANK, CHARS );
      627    12024    2       DO WHILE J < CHAR_SIZE;
      628    12025    2           PIC_CHAR = SUBSTR( TEMP_CHARS, J, 1 );
      629    12026    3           DO SELECT( PIC_CHAR );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:31   
      630    12027    3           SELECT( '"' );
      631    12028                /*
      632    12029                  Move a quoted string from the external picture to the internal one.
      633    12030                */
      634    12031    3               IF J+2 >= CHAR_SIZE
      635    12032    3                 THEN GOTO E_BAD_PIC_QUOTE;
      636    12033    3               CALL INDEX( LEN, '"', CHARS, J+1 ) ALTRET( E_BAD_PIC_QUOTE );
      637    12034    4               DO WHILE LEN + 2 < CHAR_SIZE ;
      638    12035    4                   IF SUBSTR( CHARS, LEN+1, 1 ) ~= '"'
      639    12036    4                     THEN EXIT;
      640    12037    4                   LEN = LEN - J;
      641    12038    4                   SUBSTR( PICTURE.T, I, LEN ) = SUBSTR( CHARS, J+1, LEN );
      642    12039    4                   J = J + LEN + 1;
      643    12040    4                   I = I + LEN;
      644    12041    4                   MAXSIZE = MAXSIZE + LEN;
      645    12042    4                   CALL INDEX( LEN, '"', CHARS, J+1 ) ALTRET( E_BAD_PIC_QUOTE );
      646    12043    4               END/*WHILE*/;
      647    12044    3               LEN = LEN - J - 1;
      648    12045    3               SUBSTR( PICTURE.T, I, LEN ) = SUBSTR( CHARS, J+1, LEN );
      649    12046    3               J = J + LEN + 2;
      650    12047    3               I = I + LEN;
      651    12048    3               MAXSIZE = MAXSIZE + LEN;
      652    12049
      653    12050    3           SELECT( '!' );
      654    12051                /*
      655    12052                  Switch between date and time picture parsing.
      656    12053                */
      657    12054    3               IF TIMESPAN OR PICID_SWITCH
      658    12055    3                 THEN GOTO E_BAD_PIC;
      659    12056    3               IF NOT PICID_USED
      660    12057    3                 THEN GOTO E_NO_PICIDS;
      661    12058    3               IF PICTYPE = %XUD#PICTYPE_TIME
      662    12059    3                 THEN PICTYPE = %XUD#PICTYPE_DATE;
      663    12060    3                 ELSE PICTYPE = %XUD#PICTYPE_TIME;
      664    12061    3               PICID_SWITCH = %XUD#YES;
      665    12062    3               USED_BEFORE = PICID_USED;
      666    12063    3               PICID_H = -1;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:32   
      667    12064    3               SUBSTR( PICTURE.T, I, 1 ) = BINASC( %XUD#P_SWITCH );
      668    12065    3               J = J + 1;
      669    12066    3               I = I + 1;
      670    12067
      671    12068    3           SELECT( ELSE );
      672    12069                /*
      673    12070                  Check for a picture subfield identifier.
      674    12071                */
      675    12072
      676    12073    3               IF ASCBIN( SUBSTR( CHARS, J, 1 )) >= %XUD#P_BASE
      677    12074    3                 THEN GOTO E_BAD_PIC;
      678    12075    3               PICID = 0;
      679    12076                    /*
      680    12077                      The following EQUs refer to the corresponding characters
      681    12078                      in the INDEX function table that appears below.
      682    12079                    */
      683    12080                      %EQU D = 0;
      684    12081                      %EQU H = D+1;
      685    12082                      %EQU J = H+1;
      686    12083                      %EQU M = J+1;
      687    12084                      %EQU Q = M+1;
      688    12085                      %EQU S = Q+1;
      689    12086                      %EQU T = S+1;
      690    12087                      %EQU W = T+1;
      691    12088                      %EQU Y = W+1;
      692    12089    3               CALL INDEX( IDX, PIC_CHAR, 'DHJMQSTWY' )
      693    12090    4               WHENRETURN DO;
      694    12091                    /*
      695    12092                      For "standard" picture identifiers, set internal code based
      696    12093                        on number of repetitions of the pattern character.
      697    12094                    */
      698    12095    4                   LEN = 1;
      699    12096    5                   DO WHILE SUBSTR( TEMP_CHARS, J+LEN, 1 ) = PIC_CHAR
      700    12097    5                     AND J+LEN < CHAR_SIZE AND LEN < 12;
      701    12098    5                       LEN = LEN + 1;
      702    12099    5                   END/*WHILE*/;
      703    12100                        /*
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:33   
      704    12101                          First subfield of timespan needs special handling.
      705    12102                        */
      706    12103    4                   IF TIMESPAN AND NOT PICID_USED
      707    12104    5                   THEN DO;
      708    12105    5                       IF LEN > 10
      709    12106    5                         THEN GOTO E_LONG_PICID;
      710    12107    6                       DO CASE( IDX );
      711    12108    6                       CASE( %D );
      712    12109    6                           PICID = %XUD#P_TIME_D3;
      713    12110    6                           PICID_USED = %XUD#USED_D;
      714    12111    6                       CASE( %H );
      715    12112    6                           PICID = %XUD#P_TIME_H3;
      716    12113    6                           PICID_USED = %XUD#USED_H;
      717    12114    6                       CASE( %M );
      718    12115    6                           PICID = %XUD#P_TIME_M3;
      719    12116    6                           PICID_USED = %XUD#USED_MI;
      720    12117    6                       CASE( %S );
      721    12118    6                           PICID = %XUD#P_TIME_S3;
      722    12119    6                           PICID_USED = %XUD#USED_S;
      723    12120    6                       CASE( %T );
      724    12121    6                           PICID = %XUD#P_TIME_T3;
      725    12122    6                           PICID_USED = %XUD#USED_T;
      726    12123    6                       CASE( ELSE );
      727    12124    6                           GOTO E_BAD_PIC;
      728    12125    6                       END/*CASE*/;
      729    12126    5                       MAXSIZE = MAXSIZE + LEN;
      730    12127    5                       J = J + LEN;
      731    12128    5                       SUBSTR( PICTURE.T, I, 1 ) = BINASC( PICID );
      732    12129    5                       IF LEN = 1
      733    12130    5                         THEN GOTO NEXT_CHAR;
      734    12131    5                       I = I + 1;
      735    12132    5                       SUBSTR( PICTURE.T, I, 1 ) = BINASC( LEN );
      736    12133    5                       GOTO NEXT_CHAR;
      737    12134    5                   END;
      738    12135                        /*
      739    12136                          Set subfield code (PICID) based on character and number
      740    12137                          of repetitions.
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:34   
      741    12138                        */
      742    12139    5                   DO CASE( IDX );
      743    12140                        /*
      744    12141                          D - day of month
      745    12142                        */
      746    12143    5                   CASE( %D );
      747    12144    5                       IF TIMESPAN
      748    12145    5                         THEN GOTO E_PICID_ORDER;
      749    12146    5                       USED_FLAG = %XUD#USED_D;
      750    12147    6                       DO CASE( LEN );
      751    12148    6                       CASE( 1 );
      752    12149    6                           PICID = %XUD#P_DATE_D1;
      753    12150    6                       CASE( 2 );
      754    12151    6                           PICID = %XUD#P_DATE_D2;
      755    12152    6                       CASE( ELSE );
      756    12153    6                           GOTO E_LONG_PICID;
      757    12154    6                       END/*CASE*/;
      758    12155    5                       MAXSIZE = MAXSIZE + 2;
      759    12156                        /*
      760    12157                          H - hour
      761    12158                        */
      762    12159    5                   CASE( %H );
      763    12160    5                       IF PICID_USED &
      764    12161    5                         %( XUD#USED_MI | XUD#USED_S | XUD#USED_T | XUD#USED_AMPM )
      765    12162    5                         THEN GOTO E_PICID_ORDER;
      766    12163    5                       USED_FLAG = %XUD#USED_H;
      767    12164    6                       DO CASE( LEN );
      768    12165    6                       CASE( 1 );
      769    12166    6                           PICID = %XUD#P_TIME_H1;
      770    12167    6                       CASE( 2 );
      771    12168    6                           PICID = %XUD#P_TIME_H2;
      772    12169    6                       CASE( ELSE );
      773    12170    6                           GOTO E_LONG_PICID;
      774    12171    6                       END/*CASE*/;
      775    12172    5                       PICID_H = I;
      776    12173    5                       MAXSIZE = MAXSIZE + 2;
      777    12174                        /*
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:35   
      778    12175                          J - Julian day (day of year)
      779    12176                        */
      780    12177    5                   CASE( %J );
      781    12178    5                       USED_FLAG = %XUD#USED_J;
      782    12179    6                       DO CASE( LEN );
      783    12180    6                       CASE( 1, 2 );
      784    12181    6                           PICID = %XUD#P_DATE_J1;
      785    12182    6                       CASE( 3 );
      786    12183    6                           PICID = %XUD#P_DATE_J3;
      787    12184    6                       CASE( ELSE );
      788    12185    6                           GOTO E_LONG_PICID;
      789    12186    6                       END/*CASE*/;
      790    12187    5                       MAXSIZE = MAXSIZE + 3;
      791    12188                        /*
      792    12189                          M - month or minute
      793    12190                        */
      794    12191    5                   CASE( %M );
      795    12192    5                       IF PICTYPE = %XUD#PICTYPE_TIME
      796    12193    6                       THEN DO;
      797    12194    6                           IF (( PICID_USED &
      798    12195    6                               %( XUD#USED_S | XUD#USED_T | XUD#USED_AMPM ))
      799    12196    6                             OR ( PICID_USED
      800    12197    6                               AND NOT ( PICID_USED & %XUD#USED_H )))
      801    12198    6                             THEN GOTO E_PICID_ORDER;
      802    12199    6                           USED_FLAG = %XUD#USED_MI;
      803    12200    7                           DO CASE( LEN );
      804    12201    7                           CASE( 1 );
      805    12202    7                               PICID = %XUD#P_TIME_M1;
      806    12203    7                           CASE( 2 );
      807    12204    7                               PICID = %XUD#P_TIME_M2;
      808    12205    7                           CASE( ELSE );
      809    12206    7                               GOTO E_LONG_PICID;
      810    12207    7                           END/*CASE*/;
      811    12208    6                           MAXSIZE = MAXSIZE + 2;
      812    12209    6                       END;
      813    12210    6                       ELSE DO;
      814    12211    6                           USED_FLAG = %XUD#USED_MO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:36   
      815    12212    7                           DO CASE( LEN );
      816    12213    7                           CASE( 1 );
      817    12214    7                               PICID = %XUD#P_DATE_M1;
      818    12215    7                               MAXSIZE = MAXSIZE + 2;
      819    12216    7                           CASE( 2 );
      820    12217    7                               PICID = %XUD#P_DATE_M2;
      821    12218    7                               MAXSIZE = MAXSIZE + 2;
      822    12219    7                           CASE( 3 );
      823    12220    7                               PICID = %XUD#P_DATE_M3UC;
      824    12221    7                               MAXSIZE = MAXSIZE + 3;
      825    12222    7                           CASE( ELSE );
      826    12223    7                               PICID = %XUD#P_DATE_M4UC;
      827    12224    7                               MAXSIZE = MAXSIZE + 9;
      828    12225    7                           END/*CASE*/;
      829    12226    6                           IF LEN > 2
      830    12227    7                           THEN DO;
      831    12228                                /*
      832    12229                                  For alphabetic month variants, determine case shift.
      833    12230                                */
      834    12231    7                               IF SUBSTR( CHARS, J+LEN-1, 1 ) ~= PIC_CHAR
      835    12232    8                               THEN DO;
      836    12233    8                                   PICID = PICID + 1; /* XUD#P_DATE_M?IC */
      837    12234    8                                   IF SUBSTR( CHARS, J, 1 ) ~= PIC_CHAR
      838    12235    8                                   THEN
      839    12236    8                                       PICID = PICID + 1; /* XUD#P_DATE_M?LC */
      840    12237    8                               END;
      841    12238    7                           END;
      842    12239    6                       END;
      843    12240                        /*
      844    12241                          Q - quarter of year
      845    12242                        */
      846    12243    5                   CASE( %Q );
      847    12244    5                       USED_FLAG = %XUD#USED_Q;
      848    12245    5                       IF LEN ~= 1
      849    12246    5                         THEN GOTO E_LONG_PICID;
      850    12247    5                       PICID = %XUD#P_DATE_Q;
      851    12248    5                       MAXSIZE = MAXSIZE + 1;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:37   
      852    12249                        /*
      853    12250                          S - seconds
      854    12251                        */
      855    12252    5                   CASE( %S );
      856    12253    5                       IF ( PICID_USED & %( XUD#USED_T | XUD#USED_AMPM ))
      857    12254    5                         OR ( PICID_USED AND NOT ( PICID_USED & %XUD#USED_MI ))
      858    12255    5                         THEN GOTO E_PICID_ORDER;
      859    12256    5                       USED_FLAG = %XUD#USED_S;
      860    12257    6                       DO CASE( LEN );
      861    12258    6                       CASE( 1 );
      862    12259    6                           PICID = %XUD#P_TIME_S1;
      863    12260    6                       CASE( 2 );
      864    12261    6                           PICID = %XUD#P_TIME_S2;
      865    12262    6                       CASE( ELSE );
      866    12263    6                           GOTO E_LONG_PICID;
      867    12264    6                       END/*CASE*/;
      868    12265    5                       MAXSIZE = MAXSIZE + 2;
      869    12266                        /*
      870    12267                          T - clock tics (hundredths of second)
      871    12268                        */
      872    12269    5                   CASE( %T );
      873    12270    5                       IF ( PICID_USED & %XUD#USED_AMPM )
      874    12271    5                         OR PICID_USED AND NOT ( PICID_USED & %XUD#USED_S )
      875    12272    5                         THEN GOTO E_PICID_ORDER;
      876    12273    5                       USED_FLAG = %XUD#USED_T;
      877    12274    6                       DO CASE( LEN );
      878    12275    6                       CASE( 1 );
      879    12276    6                           PICID = %XUD#P_TIME_T1;
      880    12277    6                       CASE( 2 );
      881    12278    6                           PICID = %XUD#P_TIME_T2;
      882    12279    6                       CASE( ELSE );
      883    12280    6                           GOTO E_LONG_PICID;
      884    12281    6                       END/*CASE*/;
      885    12282    5                       MAXSIZE = MAXSIZE + 2;
      886    12283                        /*
      887    12284                          W - day of week
      888    12285                        */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:38   
      889    12286    5                   CASE( %W );
      890    12287    5                       USED_FLAG = %XUD#USED_W;
      891    12288    6                       DO CASE( LEN );
      892    12289    6                       CASE( 1 );
      893    12290    6                           PICID = %XUD#P_DATE_W1UC;
      894    12291    6                           MAXSIZE = MAXSIZE + 2;
      895    12292    6                       CASE( 2 );
      896    12293    6                           PICID = %XUD#P_DATE_W2UC;
      897    12294    6                           MAXSIZE = MAXSIZE + 2;
      898    12295    6                       CASE( 3 );
      899    12296    6                           PICID = %XUD#P_DATE_W3UC;
      900    12297    6                           MAXSIZE = MAXSIZE + 3;
      901    12298    6                       CASE( ELSE );
      902    12299    6                           PICID = %XUD#P_DATE_W4UC;
      903    12300    6                           MAXSIZE = MAXSIZE + 9;
      904    12301    6                       END/*CASE*/;
      905    12302                            /*
      906    12303                              Determine alphabetic case based on first and last chars.
      907    12304                            */
      908    12305    5                       IF SUBSTR( CHARS, J+LEN-1, 1 ) ~= PIC_CHAR
      909    12306    6                       THEN DO;
      910    12307    6                           PICID = PICID + 1; /* becomes XUD#P_DATE_W?IC */
      911    12308    6                           IF SUBSTR( CHARS, J, 1 ) ~= PIC_CHAR
      912    12309    6                           THEN
      913    12310    6                               PICID = PICID + 1; /* becomes XUD#P_DATE_W?LC */
      914    12311    6                       END;
      915    12312                        /*
      916    12313                          Y - year
      917    12314                        */
      918    12315    5                   CASE( %Y );
      919    12316    5                       USED_FLAG = %XUD#USED_Y;
      920    12317    6                       DO CASE( LEN );
      921    12318    6                       CASE( 1 );
      922    12319    6                           PICID = %XUD#P_DATE_Y1;
      923    12320    6                           MAXSIZE = MAXSIZE + 1;
      924    12321    6                       CASE( 2 );
      925    12322    6                           PICID = %XUD#P_DATE_Y2;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:39   
      926    12323    6                           MAXSIZE = MAXSIZE + 2;
      927    12324    6                       CASE( 3, 4 );
      928    12325    6                           PICID = %XUD#P_DATE_Y4;
      929    12326    6                           MAXSIZE = MAXSIZE + 4;
      930    12327    6                           USED_FLAG = USED_FLAG | %XUD#USED_YYY;
      931    12328    6                       CASE( 5, 6 );
      932    12329    6                           PICID = %XUD#P_DATE_Y5;
      933    12330    6                           MAXSIZE = MAXSIZE + 6;
      934    12331    6                           USED_FLAG = USED_FLAG | %XUD#USED_YYY;
      935    12332    6                       CASE( ELSE );
      936    12333    6                           GOTO E_LONG_PICID;
      937    12334    6                       END/*CASE*/;
      938    12335
      939    12336    5                   END/*CASE*/;
      940    12337    4               END/*WHEN*/;
      941    12338    4               WHENALTRETURN DO;
      942    12339                    /*
      943    12340                      Not a standard code... check for a suffix code.
      944    12341                    */
      945    12342    4                   IF NOT TIMESPAN AND PIC_CHAR ~= ' '
      946    12343    5                   THEN DO;
      947    12344    5                       CALL CHK4SFX;
      948    12345    5                       MAXSIZE = MAXSIZE + LEN;
      949    12346    6                       DO CASE( IDX );
      950    12347    6                       CASE( %XUD#SFX_AD );
      951    12348    6                           PICID = %XUD#P_DATE_AD;
      952    12349    6                           USED_FLAG = %XUD#USED_ADBC;
      953    12350    6                       CASE( %XUD#SFX_BC );
      954    12351    6                           PICID = %XUD#P_DATE_BC;
      955    12352    6                           USED_FLAG = %XUD#USED_ADBC;
      956    12353    6                       CASE( %XUD#SFX_AM, %XUD#SFX_PM );
      957    12354    6                           PICID = %XUD#P_TIME_APM;
      958    12355    6                           USED_FLAG = %XUD#USED_AMPM;
      959    12356    6                       CASE( %XUD#SFX_A_D );
      960    12357    6                           PICID = %XUD#P_DATE_A_D;
      961    12358    6                           USED_FLAG = %XUD#USED_ADBC;
      962    12359    6                       CASE( %XUD#SFX_B_C );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:40   
      963    12360    6                           PICID = %XUD#P_DATE_B_C;
      964    12361    6                           USED_FLAG = %XUD#USED_ADBC;
      965    12362    6                       CASE( %XUD#SFX_A_M, %XUD#SFX_P_M );
      966    12363    6                           PICID = %XUD#P_TIME_AP_M;
      967    12364    6                           USED_FLAG = %XUD#USED_AMPM;
      968    12365    6                       CASE( %XUD#SFX_CE );
      969    12366    6                           PICID = %XUD#P_DATE_CE;
      970    12367    6                           USED_FLAG = %XUD#USED_ADBC;
      971    12368    6                       CASE( %XUD#SFX_C_E );
      972    12369    6                           PICID = %XUD#P_DATE_C_E;
      973    12370    6                           USED_FLAG = %XUD#USED_ADBC;
      974    12371    6                       CASE( %XUD#SFX_BCE );
      975    12372    6                           PICID = %XUD#P_DATE_BCE;
      976    12373    6                           USED_FLAG = %XUD#USED_ADBC;
      977    12374    6                       CASE( %XUD#SFX_B_C_E );
      978    12375    6                           PICID = %XUD#P_DATE_B_C_E;
      979    12376    6                           USED_FLAG = %XUD#USED_ADBC;
      980    12377    6                       END/*CASE*/;
      981    12378    5                   END;
      982    12379    4               END/*WHENALT*/;
      983    12380                    /*
      984    12381                      Common processing for all subfield identifiers...
      985    12382                    */
      986    12383    3               IF PICID > 0
      987    12384    4               THEN DO;
      988    12385    4                   IF PICTYPE = %XUD#PICTYPE_UNDEF
      989    12386    5                   THEN DO;
      990    12387                        /*
      991    12388                          If picture type is unknown, set it based on type of code.
      992    12389                        */
      993    12390    5                       IF PICID < %XUD#P_TIME_BASE
      994    12391    5                       THEN
      995    12392    5                           PICTYPE = %XUD#PICTYPE_DATE;
      996    12393    5                       ELSE
      997    12394    5                           PICTYPE = %XUD#PICTYPE_TIME;
      998    12395    5                   END;
      999    12396    5                   ELSE DO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:41   
     1000    12397                        /*
     1001    12398                          If picture type is known, make sure code is valid for type.
     1002    12399                        */
     1003    12400    5                       IF ( PICID < %XUD#P_TIME_BASE
     1004    12401    5                           AND PICTYPE = %XUD#PICTYPE_TIME )
     1005    12402    5                         OR ( PICID >= %XUD#P_TIME_BASE
     1006    12403    5                           AND PICTYPE = %XUD#PICTYPE_DATE )
     1007    12404    5                         THEN GOTO E_BAD_PICID;
     1008    12405                            /*
     1009    12406                              If code is AM/PM... change code for hour to be mod 12.
     1010    12407                            */
     1011    12408    5                       IF USED_FLAG = %XUD#USED_AMPM
     1012    12409    6                       THEN DO;
     1013    12410    6                           IF PICID_H < 0
     1014    12411    6                             THEN GOTO E_PICID_ORDER;
     1015    12412    6                           SUBSTR( PICTURE.T, PICID_H, 1 ) =
     1016    12413    6                             BINASC( ASCBIN( SUBSTR( PICTURE.T, PICID_H, 1 )) + 1 );
     1017    12414    6                       END;
     1018    12415    5                   END;
     1019    12416                        /*
     1020    12417                          Make sure a subfield appears only once in a picture.
     1021    12418                        */
     1022    12419    4                   IF ( PICID_USED & USED_FLAG )
     1023    12420    4                     THEN GOTO E_DUP_PICID;
     1024    12421    4                   PICID_USED = ( PICID_USED | USED_FLAG );
     1025    12422                        /*
     1026    12423                          Give error if use of picture would yield ambiguous values.
     1027    12424                        */
     1028    12425    4                   IF I > 0
     1029    12426    5                   THEN DO;
     1030    12427    5                       PIC_CHAR = SUBSTR( PICTURE.T, I-1, 1 );
     1031    12428    5                       IF PIC_CHAR = BINASC( %XUD#P_SWITCH )
     1032    12429    5                         OR PIC_CHAR < %XUD#BLANK
     1033    12430    6                       THEN DO;
     1034    12431    6                           PIC_CHAR = SUBSTR( PICTURE.T, I-2, 1 );
     1035    12432    6                           IDX = 2;
     1036    12433    6                       END;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:42   
     1037    12434    5                       ELSE
     1038    12435    5                           IDX = 1;
     1039    12436    5   VALIDATE_CHAR:      ;
     1040    12437    5                       IF PIC_CHAR <= BINASC( %XUD#P_BASE )
     1041    12438    5                         THEN EXIT;
     1042    12439    6                       DO CASE( XUD_VALID( PICID - %XUD#P_BASE ) * 3 +
     1043    12440    6                         XUD_VALID( ASCBIN( PIC_CHAR ) - %XUD#P_BASE ) );
     1044    12441    6                       CASE( %(XUD#PV_ALPHA*3 + XUD#PV_ALPHA),
     1045    12442    6                         %(XUD#PV_NUM_F*3 + XUD#PV_NUM_V),
     1046    12443    6                         %(XUD#PV_NUM_V*3 + XUD#PV_NUM_V) );
     1047    12444    6                           ERR = E_XUD#RUNON_PICID;
     1048    12445    6                           GOTO ERROR_RETURN;
     1049    12446    6                       END/*CASE*/;
     1050    12447    5                       IF PIC_CHAR = BINASC( %XUD#P_DATE_BC )
     1051    12448    5                         OR PIC_CHAR = BINASC( %XUD#P_DATE_B_C )
     1052    12449    5                         OR PIC_CHAR = BINASC( %XUD#P_DATE_BCE )
     1053    12450    5                         OR PIC_CHAR = BINASC( %XUD#P_DATE_B_C_E )
     1054    12451    6                       THEN DO;
     1055    12452    6                           PIC_CHAR = SUBSTR( PICTURE.T, I - IDX - 1, 1 );
     1056    12453    6                           GOTO VALIDATE_CHAR;
     1057    12454    6                       END;
     1058    12455    5                   END;
     1059    12456                        /*
     1060    12457                          Move code into internal picture.
     1061    12458                        */
     1062    12459    4                   SUBSTR( PICTURE.T, I, 1 ) = BINASC( PICID );
     1063    12460    4                   J = J + LEN;
     1064    12461    4               END;
     1065    12462    4               ELSE DO;
     1066    12463                        /*
     1067    12464                          Not a subfield identifier...
     1068    12465                            move character intact from external to internal picture.
     1069    12466                        */
     1070    12467    4                   IF ( PIC_CHAR >= 'A' AND PIC_CHAR <= 'Z' )
     1071    12468    4                     OR PIC_CHAR < %XUD#BLANK
     1072    12469    4                     THEN GOTO E_BAD_PIC;
     1073    12470    4                   SUBSTR( PICTURE.T, I, 1 ) = SUBSTR( CHARS, J, 1 );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:43   
     1074    12471    4                   J = J + 1;
     1075    12472    4                   MAXSIZE = MAXSIZE + 1;
     1076    12473    4               END;
     1077    12474
     1078    12475    3   NEXT_CHAR:  ;
     1079    12476    3               I = I + 1;
     1080    12477    3           END/*SELECT*/;
     1081    12478    2       END/*WHILE*/;
     1082    12479
     1083    12480            /*
     1084    12481              All done parsing... check for meaningless subfield combinations.
     1085    12482            */
     1086    12483    1       IF (( PICID_USED & %XUD#USED_ADBC )
     1087    12484    1         AND NOT ( PICID_USED & %XUD#USED_YYY ))
     1088    12485    1       OR (( PICID_USED & %XUD#USED_Y )
     1089    12486    1         AND ( PICID_USED & %XUD#USED_D )
     1090    12487    1         AND NOT ( PICID_USED & %XUD#USED_MO ))
     1091    12488    1       OR (( PICID_USED & %( XUD#USED_W | XUD#USED_H ))
     1092    12489    1         AND NOT ( PICID_USED & %XUD#USED_DAY )
     1093    12490    1         AND ( PICID_USED & %( XUD#USED_Y | XUD#USED_MO )))
     1094    12491    2       THEN DO;
     1095    12492    2           ERR = E_XUD#AMBIGUOUS_PIC;
     1096    12493    2           GOTO ERROR_RETURN;
     1097    12494    2       END;
     1098    12495    1       IF PICID_USED = USED_BEFORE
     1099    12496    1         THEN GOTO E_NO_PICIDS;
     1100    12497
     1101    12498    1       PICTURE.L = I;
     1102    12499    1       XUD_PARAM.MAX_SIZE = MAXSIZE;
     1103    12500    1       GOTO NORMAL_RETURN;
     1104    12501
     1105    12502    1   E_BAD_PIC:
     1106    12503    1       IF TIMESPAN
     1107    12504    1         THEN ERR = E_XUD#BAD_TIME_PIC;
     1108    12505    1         ELSE ERR = E_XUD#BAD_PIC;
     1109    12506    1       GOTO ERROR_RETURN;
     1110    12507    1   E_PICID_ORDER:
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:44   
     1111    12508    1       ERR = E_XUD#PICID_ORDER;
     1112    12509    1       GOTO ERROR_RETURN;
     1113    12510    1   E_BAD_PIC_QUOTE:
     1114    12511    1       ERR = E_XUD#BAD_PIC_QUOTE;
     1115    12512    1       GOTO ERROR_RETURN;
     1116    12513    1   E_LONG_PICID:
     1117    12514    1       ERR = E_XUD#LONG_PICID;
     1118    12515    1       GOTO ERROR_RETURN;
     1119    12516    1   E_DUP_PICID:
     1120    12517    1       ERR = E_XUD#DUP_PICID;
     1121    12518    1       GOTO ERROR_RETURN;
     1122    12519    1   E_BAD_PICID:
     1123    12520    1       IF TIMESPAN
     1124    12521    1         THEN ERR = E_XUD#BAD_TIME_PIC;
     1125    12522    1         ELSE ERR = E_XUD#BAD_PICID;
     1126    12523    1       GOTO ERROR_RETURN;
     1127    12524    1   E_NO_PICIDS:
     1128    12525    1       ERR = E_XUD#NO_PICIDS;
     1129    12526    1       GOTO ERROR_RETURN;
     1130    12527
     1131    12528        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:45   
     1132    12529        /******************************************************************************/
     1133    12530        /*F*
     1134    12531        NAME:   XUD$CHAR_UTS
     1135    12532        PURPOSE:
     1136    12533                Convert from character to UTS.
     1137    12534        */
     1138    12535        /*D*
     1139    12536        NAME:   XUD$CHAR_UTS
     1140    12537        CALL:
     1141    12538                CALL XUD$CHAR_UTS ( XUD_PARAM, char, uts ) ALTRET ( error );
     1142    12539        PARAMETERS:
     1143    12540                XUD_PARAM - Standard parameter block.
     1144    12541                char - The character date to convert.
     1145    12542                uts - Returns the date as a UTS.
     1146    12543        INTERFACE:
     1147    12544                SETUP_CHARS_IN
     1148    12545                SETUP_PICTURE
     1149    12546                CVT_FROM_CHAR
     1150    12547        DESCRIPTION:
     1151    12548                This routine calls a subroutine to convert a date/time character
     1152    12549                string into a binary date and time, then combines these into a DATE
     1153    12550                value.
     1154    12551                An overflow or underflow error occurs if the value is above or below
     1155    12552                the UTS range.
     1156    12553        */
     1157    12554        /******************************************************************************/
     1158    12555
     1159    12556    1   XUD$CHAR_UTS: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;
     1160    12557
     1161    12558    1       CALL SETUP_CHARS_IN( ADDR(DATA_IN) ) ALTRET( UTS_UNDEFINED );
     1162    12559    1       CALL SETUP_PICTURE ALTRET( UTS_UNDEFINED );
     1163    12560    1       CALL CVT_FROM_CHAR;
     1164    12561    1   UTS_CALC: ;
     1165    12562    1       IF NOT TIMESPAN
     1166    12563    1         THEN DAYS = DAYS - %XUD#UTS_BASE;
     1167    12564    1       IF DAYS < 0 OR TICS < 0
     1168    12565    1         THEN GOTO UTS_UNDERFLOW;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:46   
     1169    12566    1       IF DAYS > 31814           /* 2**36 / %UTS_25TH_DAY */
     1170    12567    1         THEN GOTO UTS_OVERFLOW;
     1171    12568    1       CALL XUD$UTS_ADJ_25TH (UTS, 0, DAYS * %UTS_25TH_DAY#) ALTRET (UTS_OVERFLOW);
     1172    12569    1       CALL XUD$UTS_ADJUST (UTS, UTS, TICS) ALTRET (UTS_OVERFLOW);
     1173    12570    1       SUBSTR( DATA_OUT, 0, 4 ) = UTS_CHR4;
     1174    12571    1       IF ERR
     1175    12572    1         THEN GOTO ERROR_RETURN;
     1176    12573    1       GOTO NORMAL_RETURN;
     1177    12574
     1178    12575    1   UTS_UNDERFLOW:
     1179    12576    1       IF NOT ERR
     1180    12577    1         THEN ERR = E_XUD#UNDERFLOW;
     1181    12578    1   UTS_UNDEFINED:
     1182    12579    1       SUBSTR( DATA_OUT, 0, 4 ) = MIN_UTS;
     1183    12580    1       GOTO ERROR_RETURN;
     1184    12581
     1185    12582    1   UTS_OVERFLOW:
     1186    12583    1       IF NOT ERR
     1187    12584    1         THEN ERR = E_XUD#OVERFLOW;
     1188    12585    1       SUBSTR( DATA_OUT, 0, 4 ) = MAX_UTS;
     1189    12586    1       GOTO ERROR_RETURN;
     1190    12587
     1191    12588        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:47   
     1192    12589        /******************************************************************************/
     1193    12590        /*F*
     1194    12591        NAME:   XUD$CHAR_DATE
     1195    12592        PURPOSE:
     1196    12593                Convert from character to DATE.
     1197    12594        */
     1198    12595        /*D*
     1199    12596        NAME:   XUD$CHAR_DATE
     1200    12597        CALL:
     1201    12598                CALL XUD$CHAR_DATE ( XUD_PARAM, char, date ) ALTRET ( error );
     1202    12599        PARAMETERS:
     1203    12600                XUD_PARAM - Standard parameter block.
     1204    12601                char - The character date to convert.
     1205    12602                date - Returns the date as a DATE.
     1206    12603        INTERFACE:
     1207    12604                SETUP_CHARS_IN
     1208    12605                SETUP_PICTURE
     1209    12606                CVT_FROM_CHAR
     1210    12607                XUD$TO_DATE
     1211    12608        DESCRIPTION:
     1212    12609                This routine calls a subroutine to convert a date/time character
     1213    12610                string into a binary date and time, then combines these into a DATE
     1214    12611                value.
     1215    12612        */
     1216    12613        /******************************************************************************/
     1217    12614
     1218    12615    1   XUD$CHAR_DATE: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;
     1219    12616
     1220    12617    1       CALL SETUP_CHARS_IN( ADDR(DATA_IN) ) ALTRET( DATE_UNDEFINED );
     1221    12618    1       CALL SETUP_PICTURE ALTRET( DATE_UNDEFINED );
     1222    12619    1       CALL CVT_FROM_CHAR ALTRET( DATE_ALTRETURN );
     1223    12620    1       CALL XUD$TO_DATE( DAYS, TICS, DATA_OUT ) ALTRET( DATE_OVERFLOW );
     1224    12621    1       GOTO NORMAL_RETURN;
     1225    12622
     1226    12623    1   DATE_UNDEFINED:
     1227    12624    1       DAYS = 0;
     1228    12625    1       TICS = 0;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:48   
     1229    12626    1   DATE_ALTRETURN:
     1230    12627    1       CALL XUD$TO_DATE( DAYS, TICS, DATA_OUT ) ALTRET( DATE_OVERFLOW );
     1231    12628    1       GOTO ERROR_RETURN;
     1232    12629
     1233    12630    1   DATE_OVERFLOW:
     1234    12631    1       SUBSTR( DATA_OUT, 0, 8 ) = MAX_DATE;
     1235    12632    1       IF DAYS > 0
     1236    12633    1       THEN
     1237    12634    1           ERR = E_XUD#OVERFLOW;
     1238    12635    2       ELSE DO;
     1239    12636    2           ERR = E_XUD#UNDERFLOW;
     1240    12637    2           SUBSTR( DATA_OUT, 0, 1 ) = BITASC( '331'O );
     1241    12638    2       END;
     1242    12639    1       GOTO ERROR_RETURN;
     1243    12640
     1244    12641        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:49   
     1245    12642        /******************************************************************************/
     1246    12643        /*F*
     1247    12644        NAME:   XUD$UTS_CHAR
     1248    12645        PURPOSE:
     1249    12646                Convert from UTS to character.
     1250    12647        */
     1251    12648        /*D*
     1252    12649        NAME:   XUD$UTS_CHAR
     1253    12650        CALL:
     1254    12651                CALL XUD$UTS_CHAR ( XUD_PARAM, uts, char ) ALTRET ( error );
     1255    12652        PARAMETERS:
     1256    12653                XUD_PARAM - Standard parameter block.
     1257    12654                uts - The UTS value to convert.
     1258    12655                char - Returns the date as a character string.
     1259    12656        INTERFACE:
     1260    12657                SETUP_CHARS_OUT
     1261    12658                SETUP_PICTURE
     1262    12659                FROM_UTS
     1263    12660                CVT_TO_CHAR
     1264    12661        DESCRIPTION:
     1265    12662                This routine changes a UTS value into a binary date and time, then
     1266    12663                calls a common subroutine to format a the value as a character string
     1267    12664                according to the specified picture.
     1268    12665        */
     1269    12666        /******************************************************************************/
     1270    12667
     1271    12668    1   XUD$UTS_CHAR: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;
     1272    12669
     1273    12670    1       CALL SETUP_CHARS_OUT( ADDR(DATA_OUT) ) ALTRET( ERROR_RETURN );
     1274    12671    1       CALL SETUP_PICTURE ALTRET( ERROR_RETURN );
     1275    12672    1       UTS_CHR4 = SUBSTR( DATA_IN, 0, 4 );  /* force word alignment */
     1276    12673    1       CALL FROM_UTS;
     1277    12674    1       CALL CVT_TO_CHAR ALTRET( ERROR_RETURN );
     1278    12675    1       GOTO NORMAL_RETURN;
     1279    12676
     1280    12677        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:50   
     1281    12678        /******************************************************************************/
     1282    12679        /*F*
     1283    12680        NAME:   XUD$DATE_CHAR
     1284    12681        PURPOSE:
     1285    12682                Convert from DATE to character.
     1286    12683        */
     1287    12684        /*D*
     1288    12685        NAME:   XUD$DATE_CHAR
     1289    12686        CALL:
     1290    12687                CALL XUD$DATE_CHAR ( XUD_PARAM, date, char ) ALTRET ( error );
     1291    12688        PARAMETERS:
     1292    12689                XUD_PARAM - Standard parameter block.
     1293    12690                date - The DATE value to convert.
     1294    12691                char - Returns the date as a character string.
     1295    12692        INTERFACE:
     1296    12693                SETUP_CHARS_OUT
     1297    12694                SETUP_PICTURE
     1298    12695                CVT_TO_CHAR
     1299    12696                XUD$FROM_DATE
     1300    12697        DESCRIPTION:
     1301    12698                This routine changes a DATE value into a binary date and time, then
     1302    12699                calls a common subroutine to format a the value as a character string
     1303    12700                according to the specified picture.
     1304    12701        */
     1305    12702        /******************************************************************************/
     1306    12703
     1307    12704    1   XUD$DATE_CHAR: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;
     1308    12705
     1309    12706    1       CALL SETUP_CHARS_OUT( ADDR(DATA_OUT) ) ALTRET( ERROR_RETURN );
     1310    12707    1       CALL SETUP_PICTURE ALTRET( ERROR_RETURN );
     1311    12708    1       CALL XUD$FROM_DATE( DATA_IN, DAYS, TICS );
     1312    12709    1       CALL CVT_TO_CHAR ALTRET( ERROR_RETURN );
     1313    12710    1       GOTO NORMAL_RETURN;
     1314    12711
     1315    12712        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:51   
     1316    12713        /******************************************************************************/
     1317    12714        /*F*
     1318    12715        NAME:   XUD$DATE_UTS
     1319    12716        PURPOSE:
     1320    12717                Convert from DATE to UTS.
     1321    12718        */
     1322    12719        /*D*
     1323    12720        NAME:   XUD$DATE_UTS
     1324    12721        CALL:
     1325    12722                CALL XUD$DATE_UTS ( XUD_PARAM, date, uts ) ALTRET ( error );
     1326    12723        PARAMETERS:
     1327    12724                XUD_PARAM - Standard parameter block.
     1328    12725                date - The DATE value to convert.
     1329    12726                uts - Returns the value as a UTS.
     1330    12727        INTERFACE:
     1331    12728                XUD$FROM_DATE
     1332    12729        DESCRIPTION:
     1333    12730                This routine converts a DATE to a UTS value.  An overflow or
     1334    12731                underflow error occurs if the DATE value is above or below
     1335    12732                the UTS range.
     1336    12733        */
     1337    12734        /******************************************************************************/
     1338    12735
     1339    12736    1   XUD$DATE_UTS: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;
     1340    12737
     1341    12738    1       CALL XUD$FROM_DATE( DATA_IN, DAYS, TICS );
     1342    12739    1       ERR = '0'B;
     1343    12740    1       TIMESPAN = XUD_PARAM.TIMESPAN;
     1344    12741    1       GOTO UTS_CALC;
     1345    12742
     1346    12743        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:52   
     1347    12744        /******************************************************************************/
     1348    12745        /*F*
     1349    12746        NAME:   XUD$UTS_DATE
     1350    12747        PURPOSE:
     1351    12748                Convert from UTS to DATE.
     1352    12749        */
     1353    12750        /*D*
     1354    12751        NAME:   XUD$UTS_DATE
     1355    12752        CALL:
     1356    12753                CALL XUD$UTS_DATE ( XUD_PARAM, uts, date ) ALTRET ( not_used );
     1357    12754        PARAMETERS:
     1358    12755                XUD_PARAM - Standard parameter block.
     1359    12756                uts - The UTS value to convert.
     1360    12757                date - Returns the value as a DATE.
     1361    12758        INTERFACE:
     1362    12759                FROM_UTS
     1363    12760                XUD$TO_DATE
     1364    12761        DESCRIPTION:
     1365    12762                This routine converts a UTS to a DATE value.
     1366    12763        */
     1367    12764        /******************************************************************************/
     1368    12765
     1369    12766    1   XUD$UTS_DATE: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;
     1370    12767
     1371    12768    1       UTS_CHR4 = SUBSTR( DATA_IN, 0, 4 );  /* force word alignment */
     1372    12769    1       TIMESPAN = XUD_PARAM.TIMESPAN;
     1373    12770    1       CALL FROM_UTS;
     1374    12771    1       CALL XUD$TO_DATE( DAYS, TICS, DATA_OUT );
     1375    12772    1       GOTO NORMAL_RETURN;
     1376    12773
     1377    12774        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:53   
     1378    12775        /******************************************************************************/
     1379    12776        /*F*
     1380    12777        NAME:   XUD$CLOCK_UTS
     1381    12778        PURPOSE:
     1382    12779                Return the current system timestamp as a UTS.
     1383    12780        */
     1384    12781        /*D*
     1385    12782        NAME:   XUD$CLOCK_UTS
     1386    12783        CALL:
     1387    12784                CALL XUD$CLOCK_UTS ( XUD_PARAM, uts ) ALTRET ( not_used );
     1388    12785        PARAMETERS:
     1389    12786                XUD_PARAM - Standard parameter block.
     1390    12787                uts - Returns the system timestamp as a UTS.
     1391    12788        INTERFACE:
     1392    12789                GET_CURRENT_UTS
     1393    12790        DESCRIPTION:
     1394    12791                This routine returns the current system timestamp in UTS format.
     1395    12792                This is simply a pass-thru to M$TIME, and is provided largely
     1396    12793                for the sake of completeness.
     1397    12794        */
     1398    12795        /******************************************************************************/
     1399    12796
     1400    12797    1   XUD$CLOCK_UTS: ENTRY( XUD_PARAM, DATA_IN ) ALTRET;
     1401    12798
     1402    12799    1       CALL GET_CURRENT_UTS ALTRET( UTS_UNDEFINED );
     1403    12800    1       SUBSTR( DATA_IN, 0, 4 ) = UTS_CHR4;
     1404    12801    1       GOTO NORMAL_RETURN;
     1405    12802
     1406    12803        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:54   
     1407    12804        /******************************************************************************/
     1408    12805        /*F*
     1409    12806        NAME:   XUD$CLOCK_DATE
     1410    12807        PURPOSE:
     1411    12808                Return the current system timestamp as a DATE.
     1412    12809        */
     1413    12810        /*D*
     1414    12811        NAME:   XUD$CLOCK_DATE
     1415    12812        CALL:
     1416    12813                CALL XUD$CLOCK_DATE ( XUD_PARAM, date ) ALTRET ( not_used );
     1417    12814        PARAMETERS:
     1418    12815                XUD_PARAM - Standard parameter block.
     1419    12816                date - Returns the system timestamp as a DATE.
     1420    12817        INTERFACE:
     1421    12818                GET_CURRENT_UTS
     1422    12819                FROM_UTS
     1423    12820                XUD$TO_DATE
     1424    12821        DESCRIPTION:
     1425    12822                This routine returns the current system timestamp in DATE format.
     1426    12823        */
     1427    12824        /******************************************************************************/
     1428    12825
     1429    12826    1   XUD$CLOCK_DATE: ENTRY( XUD_PARAM, DATA_IN ) ALTRET;
     1430    12827
     1431    12828    1       CALL GET_CURRENT_UTS ALTRET( DATE_UNDEFINED );
     1432    12829    1       CALL FROM_UTS;
     1433    12830    1       CALL XUD$TO_DATE( DAYS, TICS, DATA_IN );
     1434    12831    1       GOTO NORMAL_RETURN;
     1435    12832
     1436    12833        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:55   
     1437    12834        /******************************************************************************/
     1438    12835        /*F*
     1439    12836        NAME:   XUD$CLOCK_CHAR
     1440    12837        PURPOSE:
     1441    12838                Return the current system timestamp as a character string.
     1442    12839        */
     1443    12840        /*D*
     1444    12841        NAME:   XUD$CLOCK_CHAR
     1445    12842        CALL:
     1446    12843                CALL XUD$CLOCK_CHAR ( XUD_PARAM, char ) ALTRET ( error );
     1447    12844        PARAMETERS:
     1448    12845                XUD_PARAM - Standard parameter block.
     1449    12846                char - Returns the system timestamp as a character string.
     1450    12847        INTERFACE:
     1451    12848                GET_CURRENT_UTS
     1452    12849                SETUP_CHARS_OUT
     1453    12850                SETUP_PICTURE
     1454    12851                FROM_UTS
     1455    12852                CVT_TO_CHAR
     1456    12853        DESCRIPTION:
     1457    12854                This routine returns the current system timestamp as a character
     1458    12855                string in the format specified by a picture.
     1459    12856        */
     1460    12857        /******************************************************************************/
     1461    12858
     1462    12859    1   XUD$CLOCK_CHAR: ENTRY( XUD_PARAM, DATA_IN ) ALTRET;
     1463    12860
     1464    12861    1       CALL GET_CURRENT_UTS ALTRET( ERROR_RETURN );
     1465    12862    1       CALL SETUP_CHARS_OUT( ADDR(DATA_IN) ) ALTRET( ERROR_RETURN );
     1466    12863    1       CALL SETUP_PICTURE ALTRET( ERROR_RETURN );
     1467    12864    1       CALL FROM_UTS;
     1468    12865    1       CALL CVT_TO_CHAR ALTRET( ERROR_RETURN );
     1469    12866    1       GOTO NORMAL_RETURN;
     1470    12867
     1471    12868        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:56   
     1472    12869        /******************************************************************************/
     1473    12870        /*F*
     1474    12871        NAME:   SETUP_CHARS_IN
     1475    12872        PURPOSE:
     1476    12873                Initialize a character input string operand.
     1477    12874        */
     1478    12875        /*D*
     1479    12876        NAME:   SETUP_CHARS_IN
     1480    12877        CALL:
     1481    12878                CALL SETUP_CHARS_IN( ADDR$ ) ALTRET( size_error );
     1482    12879        PARAMETERS:
     1483    12880                ADDR$ - Pointer to character operand.
     1484    12881        OUTPUT:
     1485    12882                CHARS$ - Points to first character of string.
     1486    12883                CHAR_SIZE - Contains the number of characters in the string.
     1487    12884        INTERFACE:
     1488    12885                none.
     1489    12886        DESCRIPTION:
     1490    12887                This routine initializes the controls for the BASED variable CHARS
     1491    12888                according to whether or not the XUD_PARAM.TEXTC flag is set.
     1492    12889                It also strips leading and trailing zeros from the value.
     1493    12890                The alternate return is taken if the operand size is invalid.
     1494    12891        */
     1495    12892        /******************************************************************************/
     1496    12893
     1497    12894    1   SETUP_CHARS_IN: PROC( ADDR$ ) ALTRET;
     1498    12895
     1499    12896    2   DCL ADDR$ PTR PARAM;
     1500    12897
     1501    12898    2   DCL OUT_FLAG BIT( 1 );
     1502    12899
     1503    12900    2       OUT_FLAG = %XUD#NO;
     1504    12901    2   COMMON: ;
     1505    12902    2       IF XUD_PARAM.TEXTC
     1506    12903    3       THEN DO;
     1507    12904    3           CHARS$ = ADDR( ADDR$-> TEXTC.T );
     1508    12905    3           IF OUT_FLAG
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:57   
     1509    12906    3           THEN
     1510    12907    3               CHAR_SIZE = XUD_PARAM.SIZE;
     1511    12908    3           ELSE
     1512    12909    3               CHAR_SIZE = ADDR$-> TEXTC.L;
     1513    12910    3       END;
     1514    12911    3       ELSE DO;
     1515    12912    3           CHARS$ = ADDR$;
     1516    12913    3           CHAR_SIZE = XUD_PARAM.SIZE;
     1517    12914    3       END;
     1518    12915    2       IF CHAR_SIZE = 0
     1519    12916    2         THEN GOTO E_BAD_SIZE;
     1520    12917
     1521    12918    2       IF OUT_FLAG
     1522    12919    2       THEN
     1523    12920    2           CHARS = %XUD#BLANK;
     1524    12921    3       ELSE DO;
     1525    12922    3           IF CHAR_SIZE > 63
     1526    12923    3             THEN GOTO E_BAD_SIZE;
     1527    12924    3           CALL RSEARCH ALTRET( E_BAD_SIZE );
     1528    12925    3           CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, CHARS );
     1529    12926    3           IF LEN > 0
     1530    12927    4           THEN DO;
     1531    12928    4               CHARS$ = PINCRC( CHARS$, LEN );
     1532    12929    4               CHAR_SIZE = CHAR_SIZE - LEN;
     1533    12930    4           END;
     1534    12931    3       END;
     1535    12932
     1536    12933    2       TIMESPAN = XUD_PARAM.TIMESPAN;
     1537    12934    2       RETURN;
     1538    12935
     1539    12936    2   E_BAD_SIZE:
     1540    12937    2       ERR = E_XUD#BAD_SIZE;
     1541    12938    2   ALT:ALTRETURN;
     1542    12939
     1543    12940        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:58   
     1544    12941        /******************************************************************************/
     1545    12942        /*D*
     1546    12943        ENTRY:  SETUP_CHARS_OUT
     1547    12944        CALL:
     1548    12945                CALL SETUP_CHARS_OUT( ADDR$ ) ALTRET( size_error );
     1549    12946        DESCRIPTION:
     1550    12947                This routine is identical to SETUP_CHARS_IN, except that the
     1551    12948                size is taken from the parameter block even if the string is
     1552    12949                TEXTC, and the string is blanked.
     1553    12950        */
     1554    12951        /******************************************************************************/
     1555    12952
     1556    12953    2   SETUP_CHARS_OUT: ENTRY( ADDR$ ) ALTRET;
     1557    12954
     1558    12955    2       OUT_FLAG = %XUD#YES;
     1559    12956    2       GOTO COMMON;
     1560    12957
     1561    12958    2   END SETUP_CHARS_IN;
     1562    12959        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:59   
     1563    12960        /******************************************************************************/
     1564    12961        /*F*
     1565    12962        NAME:   SETUP_PICTURE
     1566    12963        PURPOSE:
     1567    12964                Get an intialized picture for use in conversion.
     1568    12965        */
     1569    12966        /*D*
     1570    12967        NAME:   SETUP_PICTURE
     1571    12968        CALL:
     1572    12969                CALL SETUP_PICTURE ALTRET( initialization_error );
     1573    12970        OUTPUT:
     1574    12971                PICTURE$ - Points to the initialized picture, or ADDR(NIL) if
     1575    12972                            the parameter block does not contain a picture pointer.
     1576    12973        INTERFACE:
     1577    12974                XUD$INIT_PIC
     1578    12975        DESCRIPTION:
     1579    12976                This routine initializes the controls for the BASED variable PICTURE.
     1580    12977                If the XUD_PARAM.INIT_PIC flag is set, the picture is initialized.
     1581    12978                Otherwise, the picture is assumed to have been previously initialized.
     1582    12979                The alternate return is taken if an initialization error occurs.
     1583    12980        */
     1584    12981        /******************************************************************************/
     1585    12982
     1586    12983    1   SETUP_PICTURE: PROC ALTRET;
     1587    12984
     1588    12985    2       PICTURE$ = XUD_PARAM.PIC$;
     1589    12986    2       IF PICTURE$ ~= ADDR( NIL )
     1590    12987    3       THEN DO;
     1591    12988    3           IF XUD_PARAM.INIT_PIC
     1592    12989    4           THEN DO;
     1593    12990    4               CALL XUD$INIT_PIC( XUD_PARAM, PICTURE, TEMP_PICTURE )
     1594    12991    5               WHENALTRETURN DO;
     1595    12992    5                   ERR = XUD_PARAM.ERR;
     1596    12993    5                   GOTO ALT;
     1597    12994    5               END/*WHENALT*/;
     1598    12995    4               PICTURE$ = ADDR( TEMP_PICTURE );
     1599    12996    4               PIC_SIZE = PICTURE.L;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:60   
     1600    12997    4               GOTO RET;
     1601    12998    4           END;
     1602    12999
     1603    13000    3           PIC_SIZE = PICTURE.L;
     1604    13001    4           DO I = 0 TO PIC_SIZE - 1;
     1605    13002    4               PICID = ASCBIN( SUBSTR( PICTURE.T, I, 1 ));
     1606    13003    4               IF PICID >= %XUD#P_BASE
     1607    13004    5               THEN DO;
     1608    13005    5                   IF NOT TIMESPAN
     1609    13006    5                     OR ( PICID >= %XUD#P_TIME_D3 AND PICID <= %XUD#P_TIME_T3 )
     1610    13007    5                   THEN
     1611    13008    5                       GOTO RET;
     1612    13009    5                   ERR = E_XUD#BAD_TIME_PIC;
     1613    13010    5                   GOTO ALT;
     1614    13011    5               END;
     1615    13012    4           END/*TO*/;
     1616    13013    3           ERR = E_XUD#UNINIT_PIC;
     1617    13014    3   ALT:    ALTRETURN;
     1618    13015    3       END;
     1619    13016    2   RET:RETURN;
     1620    13017
     1621    13018    2   END SETUP_PICTURE;
     1622    13019        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:61   
     1623    13020        /******************************************************************************/
     1624    13021        /*F*
     1625    13022        NAME:   CVT_TO_CHAR
     1626    13023        PURPOSE:
     1627    13024                Convert binary date and time to character string.
     1628    13025        */
     1629    13026        /*D*
     1630    13027        NAME:   CVT_TO_CHAR
     1631    13028        CALL:
     1632    13029                CALL CVT_TO_CHAR ALTRET( error );
     1633    13030        INPUT:
     1634    13031                DAYS - Number of days from Jan. 1, 1 AD.
     1635    13032                TICS - Number of clock tics since midnight.
     1636    13033                PICTURE - Picture string to use to control conversion.
     1637    13034        OUTPUT:
     1638    13035                CHARS - Character string containing converted value.
     1639    13036        INTERFACE:
     1640    13037                CHECK_SIZE
     1641    13038                CVT_FROM_NUM
     1642    13039                MOVE_ALPHA
     1643    13040                CVT_TO_SPAN
     1644    13041                SET_LEN_1OR2
     1645    13042        DESCRIPTION:
     1646    13043                This routine converts a count of days and clock tics into a
     1647    13044                character string, as specified by a picture.  If no picture
     1648    13045                is provided, a default picture of YYMMDD is used.
     1649    13046
     1650    13047                Before formatting the character string, the count of days is
     1651    13048                broken down into a year, month, day, and Julian day.  This is
     1652    13049                done unconditionally in one fell swoop, even though it is
     1653    13050                superfluous for time-only pictures, because the calculations
     1654    13051                needed are complex and incestuous.  Values for other fields
     1655    13052                are easier to derive, and are obtained only when they are
     1656    13053                called for by the picture.
     1657    13054
     1658    13055                For convenience of calculation, a negative count of days (for
     1659    13056                a date B.C.) is changed to a positive number.  A flag is set
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:62   
     1660    13057                to indicate that this has been done.
     1661    13058
     1662    13059                If the receiving field is too short to hold the entire value,
     1663    13060                an error is reported after formatting for as many picture codes
     1664    13061                as will fit.
     1665    13062        */
     1666    13063        /******************************************************************************/
     1667    13064
     1668    13065    1   CVT_TO_CHAR: PROC ALTRET;
     1669    13066
     1670    13067    2       FLDS = '0'B;
     1671    13068            /*
     1672    13069              If the value to be converted is a timespan, the only preliminary step
     1673    13070              needed is to insert a minus sign and invert the value if it is negative.
     1674    13071            */
     1675    13072    2       IF TIMESPAN
     1676    13073    3       THEN DO;
     1677    13074    3           J = 0;
     1678    13075    3           IF DAYS < 0 OR TICS < 0
     1679    13076    4           THEN DO;
     1680    13077    4               DAYS = - DAYS;
     1681    13078    4               TICS = - TICS;
     1682    13079    4               SUBSTR( CHARS, 0, 1 ) = '-';
     1683    13080    4               J = 1;
     1684    13081    4           END;
     1685    13082    3           GOTO CONVERT_TIME;
     1686    13083    3       END;
     1687    13084            /*
     1688    13085              Dates Before Christ cause problems because they run backwards...
     1689    13086              Ascending absolute values for all subfields of BC dates must be
     1690    13087              subtracted from the maximum for the subfield to get the value to
     1691    13088              use.  Also, the lack of year and day zero introduces discontinuities
     1692    13089              in the weekday and leap year cycles.  Weekdays are calculated
     1693    13090              differently for dates AD and BC to maintain continuity, but leap
     1694    13091              years BC are calculated as if they were AD.  Leap years weren't
     1695    13092              introduced until 1582 AD, this is arguably as correct as anything
     1696    13093              else, even though it means one leap day is "lost".  It is also
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:63   
     1697    13094              both easier to implement and less confusing to users than any
     1698    13095              scheme to keep strict continuity.
     1699    13096              Yes, I know, it would be, in some sense, more accurate to calculate
     1700    13097              dates with no leap days before the Gregorian calendar was introduced,
     1701    13098              but gimme a break!  It was hard enough to tune this so that you get
     1702    13099              consistent results converting to and from internal form using the
     1703    13100              current "simplified" scheme.  Besides, not adding leap days before
     1704    13101              they were invented would only keep closer in step with contemporary
     1705    13102              calendars for another 1000 years back, when the Julian calendar
     1706    13103              was introduced; before that, lack of leap days would cause dates
     1707    13104              to get increasingly out of sync with reality.
     1708    13105            */
     1709    13106    2       IF DAYS < 0 OR TICS < 0
     1710    13107    3       THEN DO;
     1711    13108    3           FLDS.BC = %XUD#YES;
     1712    13109    3           IF TICS = 0
     1713    13110    3           THEN
     1714    13111    3               DAYS = DAYS + 1;
     1715    13112    3           ELSE
     1716    13113    3               TICS = %XUD#TICS_DAY + TICS;
     1717    13114    3           FLDS.WKDAY = 6 + MOD( DAYS - 6, 7 );
     1718    13115    3       END;
     1719    13116    2       ELSE
     1720    13117    2           FLDS.WKDAY = MOD( DAYS + 1, 7 );
     1721    13118            /*
     1722    13119              Any year evenly divisible by 4 is a leap year, except if the year is a
     1723    13120              multiple of 100 it is only a leap year if it is also a multiple of 400.
     1724    13121              Given the number of days since Jan. 1, 1 AD, the next few lines use
     1725    13122              these magic numbers to compute the total number of leap days elapsed:
     1726    13123                305 = number of days from leap day to start of next year AD.
     1727    13124                60 = number of days from leap day to end of prior year BC.
     1728    13125                1461 = number of days in 4 years.
     1729    13126                36525 = number of days in 100 years (without nonleap century).
     1730    13127                146096 = number of days in 400 years.
     1731    13128            */
     1732    13129    2       IF NOT FLDS.BC
     1733    13130    2         THEN J = DAYS + 305;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:64   
     1734    13131    2         ELSE J = DAYS - 60;
     1735    13132    2       I = ((J / 146096) * 3) + (MOD( J, 146096 ) / 36525);/* nonleap centuries */
     1736    13133    2       I = ((I + J) / 1461) - I;                           /* total leap days */
     1737    13134            /*
     1738    13135              Once leap days are eliminated, the year is simply the total number
     1739    13136              of days divided by the number of days in a non-leap year.
     1740    13137            */
     1741    13138    2       FLDS.YEAR = (DAYS - I) / 365;
     1742    13139            /*
     1743    13140              The number of leap days computed above cannot be used to get the
     1744    13141              Julian day because it is not known if one of those leap days was
     1745    13142              in the current year.  But now that the year is known, the number
     1746    13143              of leap days before that year can be calculated using a different
     1747    13144              method to get the correct Julian day (not yet adjusted for years BC).
     1748    13145            */
     1749    13146    2       FLDS.JULIAN = DAYS - (FLDS.YEAR * 365) - ((FLDS.YEAR * 12) / 48)
     1750    13147    2         + ((FLDS.YEAR / 400) * 3) + (MOD( FLDS.YEAR, 400 ) / 100) + 1;
     1751    13148            /*
     1752    13149              The preceding calculations use the zero-relative year, but the
     1753    13150              first year BC and AD is actually 1.  The actual year is needed
     1754    13151              for the remaining calculations...
     1755    13152            */
     1756    13153    2       IF FLDS.BC
     1757    13154    2         THEN FLDS.YEAR = - FLDS.YEAR;
     1758    13155    2       FLDS.YEAR = FLDS.YEAR + 1;
     1759    13156            /*
     1760    13157              In order to compute the month and day, and to adjust the Julian
     1761    13158              date for years BC, we must know whether or not a leap day has
     1762    13159              been taken earlier in the year...
     1763    13160            */
     1764    13161    2       IF MOD( FLDS.YEAR, 4 ) = 0
     1765    13162    2         AND( MOD( FLDS.YEAR, 100 ) ~= 0 OR MOD( FLDS.YEAR, 400 ) = 0 )
     1766    13163    3       THEN DO;
     1767    13164    3           IF FLDS.JULIAN >= 60 OR FLDS.JULIAN <= -305
     1768    13165    4           THEN DO;
     1769    13166    4               IF FLDS.JULIAN = 60 OR FLDS.JULIAN = -305
     1770    13167    5               THEN DO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:65   
     1771    13168    5                   FLDS.MON = 2;
     1772    13169    5                   FLDS.DAY = 29;
     1773    13170    5                   FLDS.JULIAN = 60;
     1774    13171    5                   GOTO CONVERT;
     1775    13172    5               END;
     1776    13173    4               FLDS.LEAP = 1;
     1777    13174    4           END;
     1778    13175    3           IF FLDS.BC
     1779    13176    4           THEN DO;
     1780    13177    4               FLDS.JULIAN = 365 + FLDS.JULIAN;
     1781    13178    4               FLDS.LEAP = 1 - FLDS.LEAP;
     1782    13179    4           END;
     1783    13180    3       END;
     1784    13181    3       ELSE DO;
     1785    13182    3           IF FLDS.BC
     1786    13183    3             THEN FLDS.JULIAN = 364 + FLDS.JULIAN;
     1787    13184    3       END;
     1788    13185            /*
     1789    13186              Whew!  We now know the correct year, the correct day within the
     1790    13187              year, and whether or not a leap day has been taken this year.
     1791    13188              Given that, it is relatively straightforward to calculate the
     1792    13189              month and day...
     1793    13190            */
     1794    13191    3       DO FLDS.MON = 0 TO 10;
     1795    13192    3           IF CUM_DAYS( FLDS.MON + 1 ) >= FLDS.JULIAN - FLDS.LEAP
     1796    13193    3             THEN EXIT;
     1797    13194    3       END/*TO*/;
     1798    13195    2       FLDS.DAY = FLDS.JULIAN - CUM_DAYS( FLDS.MON ) - FLDS.LEAP;
     1799    13196    2       FLDS.MON = FLDS.MON + 1;
     1800    13197
     1801    13198    2   CONVERT: ;
     1802    13199    2       J = 0;
     1803    13200    2   CONVERT_TIME: ;
     1804    13201    2       IF PICTURE$ = ADDR( NIL )
     1805    13202    3       THEN DO;
     1806    13203    3           IF TIMESPAN
     1807    13204    4           THEN DO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:66   
     1808    13205    4               CALL CVT_TO_SPAN ALTRET( ALT );
     1809    13206    4               GOTO DONE;
     1810    13207    4           END;
     1811    13208    4           ELSE DO;
     1812    13209    4               PICTURE$ = ADDR( DEFAULT_PICTURE );
     1813    13210    4               PIC_SIZE = LENGTHC( DEFAULT_PICTURE ) - 1;
     1814    13211    4           END;
     1815    13212    3       END;
     1816    13213            /*
     1817    13214              Convert the value by processing the picture character by character.
     1818    13215              Each picture char results in one or more chars in the output string.
     1819    13216                I = index into picture.
     1820    13217                J = index into character string.
     1821    13218            */
     1822    13219    3       DO I = 0 TO PIC_SIZE - 1;
     1823    13220    4           DO CASE( ASCBIN( SUBSTR( PICTURE.T, I, 1 )));
     1824    13221
     1825    13222                /*
     1826    13223                  Picture codes for year...
     1827    13224                */
     1828    13225    4           CASE( %XUD#P_DATE_Y1 );
     1829    13226    4               NUM = MOD( FLDS.YEAR, 10 );
     1830    13227    4               LEN = 1;
     1831    13228    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1832    13229    4               CALL CVT_FROM_NUM;
     1833    13230    4           CASE( %XUD#P_DATE_Y2 );
     1834    13231    4               NUM = MOD( FLDS.YEAR, 100 );
     1835    13232    4               LEN = 2;
     1836    13233    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1837    13234    4               CALL CVT_FROM_NUM;
     1838    13235    4           CASE( %XUD#P_DATE_Y4 );
     1839    13236    4               CALL BINCHAR( LIMBO, FLDS.YEAR );
     1840    13237    4               CALL SEARCH( LEN, JUNK, B$SR_NON_ZERO, LIMBO );
     1841    13238    4               LEN = MINIMUM( LENGTHC( LIMBO ) - LEN, 4 );
     1842    13239    4               GOTO MOVENUM;
     1843    13240    4           CASE( %XUD#P_DATE_Y5 );
     1844    13241    4               CALL BINCHAR( LIMBO, FLDS.YEAR );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:67   
     1845    13242    4               CALL SEARCH( LEN, JUNK, B$SR_NON_ZERO, LIMBO );
     1846    13243    4               LEN = LENGTHC( LIMBO ) - LEN;
     1847    13244    4   MOVENUM:    ;
     1848    13245    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1849    13246    4               SUBSTR( CHARS, J, LEN ) = SUBSTR( LIMBO, LENGTHC( LIMBO ) - LEN );
     1850    13247                /*
     1851    13248                  Picture codes for month...
     1852    13249                */
     1853    13250    4           CASE( %XUD#P_DATE_M1 );
     1854    13251    4               NUM = FLDS.MON;
     1855    13252    4               CALL SET_LEN_1OR2;
     1856    13253    4               GOTO CVTNUM;
     1857    13254    4           CASE( %XUD#P_DATE_M2 );
     1858    13255    4               NUM = FLDS.MON;
     1859    13256    4               LEN = 2;
     1860    13257    4   CVTNUM:     ;
     1861    13258    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1862    13259    4               CALL CVT_FROM_NUM;
     1863    13260
     1864    13261    4           CASE( %XUD#P_DATE_M3UC );
     1865    13262    4               LEN = 3;
     1866    13263    4               GOTO DATE_M_UC;
     1867    13264    4           CASE( %XUD#P_DATE_M4UC );
     1868    13265    4               LEN = MONTH$( FLDS.MON - 1 )-> TEXTC.L;
     1869    13266    4   DATE_M_UC:  ;
     1870    13267    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1871    13268    4               CALL MOVE_ALPHA( MONTH$( FLDS.MON - 1 ));
     1872    13269
     1873    13270    4           CASE( %XUD#P_DATE_M3IC );
     1874    13271    4               LEN = 3;
     1875    13272    4               GOTO DATE_M_IC;
     1876    13273    4           CASE( %XUD#P_DATE_M4IC );
     1877    13274    4               LEN = MONTH$( FLDS.MON - 1 )-> TEXTC.L;
     1878    13275    4   DATE_M_IC:  ;
     1879    13276    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1880    13277    4               CALL MOVE_ALPHA( MONTH$( FLDS.MON - 1 ));
     1881    13278    4   XLATE_IC:   ;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:68   
     1882    13279    4               CALL XLATE( SUBSTR( CHARS, J+1, LEN-1 ), B$XL_LOWER_UR,
     1883    13280    4                 SUBSTR( CHARS, J+1, LEN-1 ));
     1884    13281
     1885    13282    4           CASE( %XUD#P_DATE_M3LC );
     1886    13283    4               LEN = 3;
     1887    13284    4               GOTO DATE_M_LC;
     1888    13285    4           CASE( %XUD#P_DATE_M4LC );
     1889    13286    4               LEN = MONTH$( FLDS.MON - 1 )-> TEXTC.L;
     1890    13287    4   DATE_M_LC:  ;
     1891    13288    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1892    13289    4               CALL MOVE_ALPHA( MONTH$( FLDS.MON - 1 ));
     1893    13290    4   XLATE_LC:   ;
     1894    13291    4               CALL XLATE( SUBSTR( CHARS, J, LEN ), B$XL_LOWER_UR,
     1895    13292    4                 SUBSTR( CHARS, J, LEN ));
     1896    13293                /*
     1897    13294                  Picture codes for day of month...
     1898    13295                */
     1899    13296    4           CASE( %XUD#P_DATE_D1 );
     1900    13297    4               NUM = FLDS.DAY;
     1901    13298    4               CALL SET_LEN_1OR2;
     1902    13299    4               GOTO CVTNUM;
     1903    13300    4           CASE( %XUD#P_DATE_D2 );
     1904    13301    4               NUM = FLDS.DAY;
     1905    13302    4               LEN = 2;
     1906    13303    4               GOTO CVTNUM;
     1907    13304                /*
     1908    13305                  Picture codes for day of year...
     1909    13306                */
     1910    13307    4           CASE( %XUD#P_DATE_J1 );
     1911    13308    4               NUM = FLDS.JULIAN;
     1912    13309    4               IF NUM < 10
     1913    13310    4                 THEN LEN = 1;
     1914    13311    4                 ELSE IF NUM < 100
     1915    13312    4                   THEN LEN = 2;
     1916    13313    4                   ELSE LEN = 3;
     1917    13314    4               GOTO CVTNUM;
     1918    13315    4           CASE( %XUD#P_DATE_J3 );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:69   
     1919    13316    4               NUM = FLDS.JULIAN;
     1920    13317    4               LEN = 3;
     1921    13318    4               GOTO CVTNUM;
     1922    13319                /*
     1923    13320                  Picture code for quarter of year...
     1924    13321                */
     1925    13322    4           CASE( %XUD#P_DATE_Q );
     1926    13323    4               NUM = (FLDS.MON / 3) + 1;
     1927    13324    4               LEN = 1;
     1928    13325    4               GOTO CVTNUM;
     1929    13326                /*
     1930    13327                  Picture codes for day of week...
     1931    13328                */
     1932    13329    4           CASE( %XUD#P_DATE_W1UC );
     1933    13330    4               LEN = MOD( FLDS.WKDAY + 1, 2 ) + 1;
     1934    13331    4               GOTO DATE_W_UC;
     1935    13332    4           CASE( %XUD#P_DATE_W2UC );
     1936    13333    4               LEN = 2;
     1937    13334    4               GOTO DATE_W_UC;
     1938    13335    4           CASE( %XUD#P_DATE_W3UC );
     1939    13336    4               LEN = 3;
     1940    13337    4               GOTO DATE_W_UC;
     1941    13338    4           CASE( %XUD#P_DATE_W4UC );
     1942    13339    4               LEN = WEEKDAY$( FLDS.WKDAY )-> TEXTC.L;
     1943    13340    4   DATE_W_UC:  ;
     1944    13341    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1945    13342    4               CALL MOVE_ALPHA( WEEKDAY$( FLDS.WKDAY ));
     1946    13343
     1947    13344    4           CASE( %XUD#P_DATE_W1LC, %XUD#P_DATE_W1IC );
     1948    13345    4               LEN = MOD( FLDS.WKDAY + 1, 2 ) + 1;
     1949    13346    4               GOTO DATE_W_IC;
     1950    13347    4           CASE( %XUD#P_DATE_W2IC );
     1951    13348    4               LEN = 2;
     1952    13349    4               GOTO DATE_W_IC;
     1953    13350    4           CASE( %XUD#P_DATE_W3IC );
     1954    13351    4               LEN = 3;
     1955    13352    4               GOTO DATE_W_IC;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:70   
     1956    13353    4           CASE( %XUD#P_DATE_W4IC );
     1957    13354    4               LEN = WEEKDAY$( FLDS.WKDAY )-> TEXTC.L;
     1958    13355    4   DATE_W_IC:  ;
     1959    13356    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1960    13357    4               CALL MOVE_ALPHA( WEEKDAY$( FLDS.WKDAY ));
     1961    13358    4               IF LEN > 1
     1962    13359    4                 THEN GOTO XLATE_IC;
     1963    13360
     1964    13361    4           CASE( %XUD#P_DATE_W2LC );
     1965    13362    4               LEN = 2;
     1966    13363    4               GOTO DATE_W_LC;
     1967    13364    4           CASE( %XUD#P_DATE_W3LC );
     1968    13365    4               LEN = 3;
     1969    13366    4               GOTO DATE_W_LC;
     1970    13367    4           CASE( %XUD#P_DATE_W4LC );
     1971    13368    4               LEN = WEEKDAY$( FLDS.WKDAY )-> TEXTC.L;
     1972    13369    4   DATE_W_LC:  ;
     1973    13370    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1974    13371    4               CALL MOVE_ALPHA( WEEKDAY$( FLDS.WKDAY ));
     1975    13372    4               GOTO XLATE_LC;
     1976    13373                /*
     1977    13374                  Picture codes for AD/BC...
     1978    13375                */
     1979    13376    4           CASE( %XUD#P_DATE_AD );
     1980    13377    4   DATE_AD:    ;
     1981    13378    4               LEN = 2;
     1982    13379    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1983    13380    4               IF FLDS.BC
     1984    13381    4               THEN
     1985    13382    4                   SUBSTR( CHARS, J, 2 ) = 'BC';
     1986    13383    4               ELSE
     1987    13384    4                   SUBSTR( CHARS, J, 2 ) = 'AD';
     1988    13385    4           CASE( %XUD#P_DATE_A_D );
     1989    13386    4   DATE_A_D:   ;
     1990    13387    4               LEN = 4;
     1991    13388    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     1992    13389    4               IF FLDS.BC
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:71   
     1993    13390    4               THEN
     1994    13391    4                   SUBSTR( CHARS, J, 4 ) = 'B.C.';
     1995    13392    4               ELSE
     1996    13393    4                   SUBSTR( CHARS, J, 4 ) = 'A.D.';
     1997    13394    4           CASE( %XUD#P_DATE_BC );
     1998    13395    4               IF FLDS.BC
     1999    13396    4               THEN
     2000    13397    4                   GOTO DATE_AD;
     2001    13398    4               ELSE
     2002    13399    4                   LEN = 0;
     2003    13400    4           CASE( %XUD#P_DATE_B_C );
     2004    13401    4               IF FLDS.BC
     2005    13402    4               THEN
     2006    13403    4                   GOTO DATE_A_D;
     2007    13404    4               ELSE
     2008    13405    4                   LEN = 0;
     2009    13406    4           CASE( %XUD#P_DATE_CE );
     2010    13407    4               IF FLDS.BC
     2011    13408    5               THEN DO;
     2012    13409    5   DATE_BCE:       ;
     2013    13410    5                   LEN = 3;
     2014    13411    5                   CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     2015    13412    5                   SUBSTR( CHARS, J, 3 ) = 'BCE';
     2016    13413    5               END;
     2017    13414    5               ELSE DO;
     2018    13415    5                   LEN = 2;
     2019    13416    5                   CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     2020    13417    5                   SUBSTR( CHARS, J, 2 ) = 'CE';
     2021    13418    5               END;
     2022    13419    4           CASE( %XUD#P_DATE_C_E );
     2023    13420    4               IF FLDS.BC
     2024    13421    5               THEN DO;
     2025    13422    5   DATE_B_C_E:     ;
     2026    13423    5                   LEN = 6;
     2027    13424    5                   CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     2028    13425    5                   SUBSTR( CHARS, J, 6 ) = 'B.C.E.';
     2029    13426    5               END;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:72   
     2030    13427    5               ELSE DO;
     2031    13428    5                   LEN = 4;
     2032    13429    5                   CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     2033    13430    5                   SUBSTR( CHARS, J, 4 ) = 'C.E.';
     2034    13431    5               END;
     2035    13432    4           CASE( %XUD#P_DATE_BCE );
     2036    13433    4               IF FLDS.BC
     2037    13434    4               THEN
     2038    13435    4                   GOTO DATE_BCE;
     2039    13436    4               LEN = 0;
     2040    13437    4           CASE( %XUD#P_DATE_B_C_E );
     2041    13438    4               IF FLDS.BC
     2042    13439    4               THEN
     2043    13440    4                   GOTO DATE_B_C_E;
     2044    13441    4               LEN = 0;
     2045    13442        /*
     2046    13443                  Picture code for days...
     2047    13444                */
     2048    13445    4           CASE( %XUD#P_TIME_D3 );
     2049    13446    4               NUM = DAYS;
     2050    13447    4   TIME_1ST:   ;
     2051    13448    4               CALL BINCHAR( LIMBO, NUM );
     2052    13449    4               CALL SEARCH( LEN, JUNK, B$SR_NON_ZERO, LIMBO );
     2053    13450    4               LEN = MAXIMUM( 1, LENGTHC( LIMBO ) - LEN );
     2054    13451    4               IF I < PIC_SIZE
     2055    13452    4               THEN IF SUBSTR( PICTURE.T, I+1, 1 ) < %XUD#BLANK
     2056    13453    4               THEN
     2057    13454    4                   I = I + 1;
     2058    13455    4               GOTO MOVENUM;
     2059    13456                /*
     2060    13457                  Picture codes for hour...
     2061    13458                */
     2062    13459    4           CASE( %XUD#P_TIME_H1 );
     2063    13460    4               NUM = TICS / %XUD#TICS_HOUR;
     2064    13461    4               CALL SET_LEN_1OR2;
     2065    13462    4               GOTO CVTNUM;
     2066    13463    4           CASE( %XUD#P_TIME_H2 );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:73   
     2067    13464    4               NUM = TICS / %XUD#TICS_HOUR;
     2068    13465    4               LEN = 2;
     2069    13466    4               GOTO CVTNUM;
     2070    13467    4           CASE( %XUD#P_TIME_H1A );
     2071    13468    4               NUM = MOD( TICS / %XUD#TICS_HOUR, 12 );
     2072    13469    4               IF NUM = 0
     2073    13470    4                 THEN NUM = 12;
     2074    13471    4               CALL SET_LEN_1OR2;
     2075    13472    4               GOTO CVTNUM;
     2076    13473    4           CASE( %XUD#P_TIME_H2A );
     2077    13474    4               NUM = MOD( TICS / %XUD#TICS_HOUR, 12 );
     2078    13475    4               LEN = 2;
     2079    13476    4               IF NUM = 0
     2080    13477    4                 THEN NUM = 12;
     2081    13478    4               GOTO CVTNUM;
     2082    13479    4           CASE( %XUD#P_TIME_H3 );
     2083    13480    4               NUM = (TICS / %XUD#TICS_HOUR) + (DAYS * %XUD#HOURS_DAY);
     2084    13481    4               GOTO TIME_1ST;
     2085    13482                /*
     2086    13483                  Picture codes for minute...
     2087    13484                */
     2088    13485    4           CASE( %XUD#P_TIME_M1 );
     2089    13486    4               NUM = MOD( TICS / %XUD#TICS_MIN, %XUD#MINS_HOUR );
     2090    13487    4               CALL SET_LEN_1OR2;
     2091    13488    4               GOTO CVTNUM;
     2092    13489    4           CASE( %XUD#P_TIME_M2 );
     2093    13490    4               NUM = MOD( TICS / %XUD#TICS_MIN, %XUD#MINS_HOUR );
     2094    13491    4               LEN = 2;
     2095    13492    4               GOTO CVTNUM;
     2096    13493    4           CASE( %XUD#P_TIME_M3 );
     2097    13494    4               NUM = (TICS / %XUD#TICS_MIN) + (DAYS * %XUD#MINS_DAY);
     2098    13495    4               GOTO TIME_1ST;
     2099    13496                /*
     2100    13497                  Picture codes for second...
     2101    13498                */
     2102    13499    4           CASE( %XUD#P_TIME_S1 );
     2103    13500    4               NUM = MOD( TICS / %XUD#TICS_SEC, %XUD#SECS_MIN );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:74   
     2104    13501    4               CALL SET_LEN_1OR2;
     2105    13502    4               GOTO CVTNUM;
     2106    13503    4           CASE( %XUD#P_TIME_S2 );
     2107    13504    4               NUM = MOD( TICS / %XUD#TICS_SEC, %XUD#SECS_MIN );
     2108    13505    4               LEN = 2;
     2109    13506    4               GOTO CVTNUM;
     2110    13507    4           CASE( %XUD#P_TIME_S3 );
     2111    13508    4               NUM = (TICS / %XUD#TICS_SEC) + (DAYS * %XUD#SECS_DAY);
     2112    13509    4               GOTO TIME_1ST;
     2113    13510                /*
     2114    13511                  Picture codes for clock tics...
     2115    13512                */
     2116    13513    4           CASE( %XUD#P_TIME_T1 );
     2117    13514    4               NUM = MOD( TICS, %XUD#TICS_SEC );
     2118    13515    4               IF MOD( NUM, 10 ) = 0
     2119    13516    5               THEN DO;
     2120    13517    5                   NUM = NUM / 10;
     2121    13518    5                   LEN = 1;
     2122    13519    5               END;
     2123    13520    4               ELSE
     2124    13521    4                   LEN = 2;
     2125    13522    4               GOTO CVTNUM;
     2126    13523    4           CASE( %XUD#P_TIME_T2 );
     2127    13524    4               NUM = MOD( TICS, %XUD#TICS_SEC );
     2128    13525    4               LEN = 2;
     2129    13526    4               GOTO CVTNUM;
     2130    13527    4           CASE( %XUD#P_TIME_T3 );
     2131    13528    4               NUM = TICS + (DAYS * %XUD#TICS_DAY);
     2132    13529    4               GOTO TIME_1ST;
     2133    13530                /*
     2134    13531                  Picture codes for AM/PM...
     2135    13532                */
     2136    13533    4           CASE( %XUD#P_TIME_APM );
     2137    13534    4               LEN = 2;
     2138    13535    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     2139    13536    4               IF TICS / %XUD#TICS_HOUR < 12
     2140    13537    4               THEN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:75   
     2141    13538    4                   SUBSTR( CHARS, J, 2 ) = 'AM';
     2142    13539    4               ELSE
     2143    13540    4                   SUBSTR( CHARS, J, 2 ) = 'PM';
     2144    13541    4           CASE( %XUD#P_TIME_AP_M );
     2145    13542    4               LEN = 4;
     2146    13543    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     2147    13544    4               IF TICS / %XUD#TICS_HOUR < 12
     2148    13545    4               THEN
     2149    13546    4                   SUBSTR( CHARS, J, 4 ) = 'A.M.';
     2150    13547    4               ELSE
     2151    13548    4                   SUBSTR( CHARS, J, 4 ) = 'P.M.';
     2152    13549                /*
     2153    13550                  Picture punctuation...
     2154    13551                */
     2155    13552    4           CASE( %XUD#P_SWITCH );
     2156    13553    4               LEN = 0;
     2157    13554    4           CASE( ELSE );
     2158    13555    4               LEN = 1;
     2159    13556    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
     2160    13557    4               SUBSTR( CHARS, J, 1 ) = SUBSTR( PICTURE.T, I, 1 );
     2161    13558
     2162    13559    4           END/*CASE*/;
     2163    13560    3           J = J + LEN;
     2164    13561    3       END/*TO*/;
     2165    13562
     2166    13563    2   DONE: ;
     2167    13564    2       IF XUD_PARAM.TEXTC
     2168    13565    2       THEN
     2169    13566    2           ADDR(DATA_OUT)-> TEXTC.L = J;
     2170    13567    2       XUD_PARAM.DATA_SIZE = J;
     2171    13568
     2172    13569    2       RETURN;
     2173    13570
     2174    13571    2   E_SHORT_CHAR:
     2175    13572    2       IF XUD_PARAM.TEXTC
     2176    13573    2       THEN
     2177    13574    2           ADDR(DATA_OUT)-> TEXTC.L = J;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:76   
     2178    13575    2       XUD_PARAM.DATA_SIZE = J;
     2179    13576    2       ERR = E_XUD#SHORT_CHAR;
     2180    13577    2   ALT:ALTRETURN;
     2181    13578
     2182    13579        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:77   
     2183    13580        /******************************************************************************/
     2184    13581        /*I*
     2185    13582        NAME:   CHECK_SIZE
     2186    13583        PURPOSE:
     2187    13584                Altreturn if subfield would overflow string size.
     2188    13585        CALL:
     2189    13586                CALL CHECK_SIZE ALTRET( overflow );
     2190    13587        INPUT:
     2191    13588                J - current position in string.
     2192    13589                LEN - length of subfield to be appended to string.
     2193    13590                CHAR_SIZE - maximum string size.
     2194    13591        INTERFACE:
     2195    13592                None.
     2196    13593        */
     2197    13594        /******************************************************************************/
     2198    13595
     2199    13596    2   CHECK_SIZE: PROC ALTRET;
     2200    13597
     2201    13598    3       IF J + LEN > CHAR_SIZE
     2202    13599    3         THEN ALTRETURN;
     2203    13600    3         ELSE RETURN;
     2204    13601
     2205    13602    3   END CHECK_SIZE;
     2206    13603        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:78   
     2207    13604        /******************************************************************************/
     2208    13605        /*I*
     2209    13606        NAME:   SET_LEN_1OR2
     2210    13607        PURPOSE:
     2211    13608                Set length for 1 or 2 digit leading zero-suppressed subfield.
     2212    13609        CALL:
     2213    13610                CALL SET_LEN_1OR2;
     2214    13611        INPUT:
     2215    13612                NUM - The number whose length is to be returned.
     2216    13613        OUTPUT:
     2217    13614                LEN - The length of the number.
     2218    13615        INTERFACE:
     2219    13616                None.
     2220    13617        */
     2221    13618        /******************************************************************************/
     2222    13619
     2223    13620    2   SET_LEN_1OR2: PROC;
     2224    13621
     2225    13622    3       IF NUM < 10
     2226    13623    3         THEN LEN = 1;
     2227    13624    3         ELSE LEN = 2;
     2228    13625    3       RETURN;
     2229    13626
     2230    13627    3   END SET_LEN_1OR2;
     2231    13628        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:79   
     2232    13629        /******************************************************************************/
     2233    13630        /*I*
     2234    13631        NAME:   CVT_FROM_NUM
     2235    13632        PURPOSE:
     2236    13633                Convert a numeric subfield to character.
     2237    13634        CALL:
     2238    13635                CALL CVT_FROM_NUM;
     2239    13636        INPUT:
     2240    13637                NUM - binary subfield to be converted.
     2241    13638                J - current offset into string.
     2242    13639                LEN - number of digits of converted number.
     2243    13640        INTERFACE:
     2244    13641                None.
     2245    13642        */
     2246    13643        /******************************************************************************/
     2247    13644
     2248    13645    2   CVT_FROM_NUM: PROC;
     2249    13646
     2250    13647    3       CALL BINCHAR( SUBSTR( CHARS, J, LEN ), NUM );
     2251    13648    3       RETURN;
     2252    13649
     2253    13650    3   END CVT_FROM_NUM;
     2254    13651        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:80   
     2255    13652        /******************************************************************************/
     2256    13653        /*I*
     2257    13654        NAME:   MOVE_ALPHA
     2258    13655        PURPOSE:
     2259    13656                Move alphabetic substring to result string.
     2260    13657        CALL:
     2261    13658                CALL MOVE_ALPHA( TEXTC$ ));
     2262    13659        PARAMETER:
     2263    13660                TEXTC$ - Pointer to TEXTC string containing text to move.
     2264    13661        INPUT:
     2265    13662                J - Current offset into result string.
     2266    13663                LEN - Number of characters to move.
     2267    13664        INTERFACE:
     2268    13665                None.
     2269    13666        */
     2270    13667        /******************************************************************************/
     2271    13668
     2272    13669    2   MOVE_ALPHA: PROC( TEXTC$ );
     2273    13670
     2274    13671    3   DCL TEXTC$ PTR PARAM;
     2275    13672
     2276    13673    3       SUBSTR( CHARS, J, LEN ) = TEXTC$-> TEXTC.T;
     2277    13674    3       RETURN;
     2278    13675
     2279    13676    3   END MOVE_ALPHA;
     2280    13677        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:81   
     2281    13678        /******************************************************************************/
     2282    13679        /*I*
     2283    13680        NAME:   CVT_TO_SPAN
     2284    13681        PURPOSE:
     2285    13682                Convert a binary time interval to a character string.
     2286    13683        CALL:
     2287    13684                CALL CVT_TO_SPAN ALTRET( error );
     2288    13685        INPUT:
     2289    13686                DAYS - Number of days in interval.
     2290    13687                TICS - Number of clock tics in interval.
     2291    13688        OUTPUT:
     2292    13689                CHARS - The converted string.
     2293    13690        INTERFACE:
     2294    13691                SET_LEN_1OR2
     2295    13692                CVT_FROM_NUM
     2296    13693        DESCRIPTION:
     2297    13694                This routine converts a number of days and clock tics into a
     2298    13695                time interval constant.  The format of the result is:
     2299    13696                    ddddddddd.h:mm:ss.tt
     2300    13697
     2301    13698                Leading and trailing subfields and their associated punctuation
     2302    13699                are omitted if they have a value of zero.
     2303    13700                The alternate return is taken if the receiving string is not long
     2304    13701                enough to hold the number of days.  If the receiving string is too
     2305    13702                short to hold one or more time subfields, the ones that do not fit
     2306    13703                will be dropped, with no error indicated.
     2307    13704        */
     2308    13705        /******************************************************************************/
     2309    13706
     2310    13707    2   CVT_TO_SPAN: PROC ALTRET;
     2311    13708
     2312    13709    3       IDX = 0;
     2313    13710            /*
     2314    13711              Convert number of days, if non-zero.
     2315    13712            */
     2316    13713    3       IF DAYS > 0
     2317    13714    4       THEN DO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:82   
     2318    13715    4           CALL BINCHAR( LIMBO, DAYS );
     2319    13716    4           CALL SEARCH( LEN, JUNK, B$SR_NON_ZERO, LIMBO )
     2320    13717    5           WHENRETURN DO;
     2321    13718    5               LEN = LENGTHC( LIMBO ) - LEN;
     2322    13719    5           END/*WHEN*/;
     2323    13720    5           WHENALTRETURN DO;
     2324    13721    5               LEN = 1;
     2325    13722    5           END/*WHENALT*/;
     2326    13723    4           IF J + LEN > CHAR_SIZE
     2327    13724    5           THEN DO;
     2328    13725    5               ERR = E_XUD#SHORT_CHAR;
     2329    13726    5               ALTRETURN;
     2330    13727    5           END;
     2331    13728    4           SUBSTR( CHARS, J, LEN ) = SUBSTR( LIMBO, LENGTHC( LIMBO ) - LEN );
     2332    13729    4           J = J + LEN;
     2333    13730    4           IF TICS = 0
     2334    13731    4             THEN GOTO RET;
     2335    13732    4           IDX = J;
     2336    13733    4       END;
     2337    13734            /*
     2338    13735              Get values for time subfields.
     2339    13736            */
     2340    13737    3       FLDS.HOUR = TICS / %XUD#TICS_HOUR;
     2341    13738    3       FLDS.MIN = MOD( TICS / %XUD#TICS_MIN, %XUD#MINS_HOUR );
     2342    13739    3       FLDS.SEC = MOD( TICS / %XUD#TICS_SEC, %XUD#SECS_MIN );
     2343    13740    3       FLDS.TIC = MOD( TICS, %XUD#TICS_SEC );
     2344    13741            /*
     2345    13742              Convert the hour, unless the span is less than an hour.
     2346    13743            */
     2347    13744    3       NUM = FLDS.HOUR;
     2348    13745    3       IF DAYS > 0
     2349    13746    3         THEN LEN = 3;
     2350    13747    3         ELSE CALL SET_LEN_1OR2;
     2351    13748    3       IF J + LEN + 1 > CHAR_SIZE OR TICS = 0
     2352    13749    3         THEN GOTO TRUNC;
     2353    13750    3       IF DAYS > 0 OR FLDS.HOUR > 0
     2354    13751    4       THEN DO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:83   
     2355    13752    4           IF DAYS > 0
     2356    13753    5           THEN DO;
     2357    13754    5               SUBSTR( CHARS, J, 1 ) = '.';
     2358    13755    5               J = J + 1;
     2359    13756    5               LEN = 2;
     2360    13757    5           END;
     2361    13758    4           CALL CVT_FROM_NUM;
     2362    13759    4           J = J + LEN;
     2363    13760    4       END;
     2364    13761            /*
     2365    13762              Convert the minute preceded by a colon, unless span is an even hour.
     2366    13763            */
     2367    13764    3       SUBSTR( CHARS, J, 1 ) = ':';
     2368    13765    3       J = J + 1;
     2369    13766    3       IF FLDS.HOUR > 0
     2370    13767    3         THEN IDX = J;
     2371    13768    3       IF FLDS.MIN = 0 AND FLDS.SEC = 0 AND FLDS.TIC = 0
     2372    13769    3         THEN GOTO RET;
     2373    13770    3       IF J + 2 > CHAR_SIZE
     2374    13771    3         THEN GOTO TRUNC;
     2375    13772    3       NUM = FLDS.MIN;
     2376    13773    3       LEN = 2;
     2377    13774    3       CALL CVT_FROM_NUM;
     2378    13775    3       J = J + LEN;
     2379    13776    3       IF FLDS.MIN > 0
     2380    13777    3         THEN IDX = J;
     2381    13778            /*
     2382    13779              Convert the second preceded by a colon, unless time is an even minute.
     2383    13780            */
     2384    13781    3       IF FLDS.SEC = 0 AND FLDS.TIC = 0
     2385    13782    3         THEN GOTO RET;
     2386    13783    3       IF J + 3 > CHAR_SIZE
     2387    13784    3         THEN GOTO TRUNC;
     2388    13785    3       SUBSTR( CHARS, J, 1 ) = ':';
     2389    13786    3       J = J + 1;
     2390    13787    3       NUM = FLDS.SEC;
     2391    13788    3       LEN = 2;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:84   
     2392    13789    3       CALL CVT_FROM_NUM;
     2393    13790    3       J = J + LEN;
     2394    13791    3       IF FLDS.SEC > 0
     2395    13792    3         THEN IDX = J;
     2396    13793            /*
     2397    13794              Convert clock tics preceded by a period, unless span is an even second.
     2398    13795            */
     2399    13796    3       IF FLDS.TIC = 0
     2400    13797    3         THEN GOTO RET;
     2401    13798    3       IF J + 3 > CHAR_SIZE
     2402    13799    3         THEN GOTO TRUNC;
     2403    13800    3       SUBSTR( CHARS, J, 1 ) = '.';
     2404    13801    3       J = J + 1;
     2405    13802    3       NUM = FLDS.TIC;
     2406    13803    3       LEN = 2;
     2407    13804    3       CALL CVT_FROM_NUM;
     2408    13805    3       J = J + LEN;
     2409    13806
     2410    13807    3   RET:RETURN;
     2411    13808
     2412    13809    3   TRUNC:
     2413    13810    3       IF J ~= IDX
     2414    13811    4       THEN DO;
     2415    13812    4           SUBSTR( CHARS, IDX, J - IDX ) = %XUD#BLANK;
     2416    13813    4           J = IDX;
     2417    13814    4       END;
     2418    13815    3       IF J = 0
     2419    13816    4       THEN DO;
     2420    13817    4           SUBSTR( CHARS, 0, 1 ) = '0';
     2421    13818    4           J = 1;
     2422    13819    4       END;
     2423    13820    3       GOTO RET;
     2424    13821
     2425    13822    3   END CVT_TO_SPAN;
     2426    13823
     2427    13824    2   END CVT_TO_CHAR;
     2428    13825        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:85   
     2429    13826        /******************************************************************************/
     2430    13827        /*F*
     2431    13828        NAME:   CVT_FROM_CHAR
     2432    13829        PURPOSE:
     2433    13830                Convert character string to binary date and time.
     2434    13831        */
     2435    13832        /*D*
     2436    13833        NAME:   CVT_FROM_CHAR
     2437    13834        CALL:
     2438    13835                CALL CVT_FROM_CHAR ALTRET( error );
     2439    13836        INPUT:
     2440    13837                CHARS - The string to be converted.
     2441    13838                PICTURE - The picture to use to control conversion.
     2442    13839        OUTPUT:
     2443    13840                DAYS - Number of days from Jan. 1, 1 AD.
     2444    13841                TICS - Number of clock tics since midnight.
     2445    13842        INTERFACE:
     2446    13843                CVT_YY
     2447    13844                CVT_MO
     2448    13845                CVT_DD
     2449    13846                CVT_MMM
     2450    13847                CVT_WWW
     2451    13848                CVT_SWITCH
     2452    13849                CVT_HH
     2453    13850                CVT_MI
     2454    13851                CVT_SS
     2455    13852                CVT_TT
     2456    13853                CHK4SFX
     2457    13854                CVT_TO_NUM
     2458    13855                GET_CURRENT_YEAR
     2459    13856                PARSE_SPAN
     2460    13857        DESCRIPTION:
     2461    13858                This routine converts a character string into a number of days
     2462    13859                and clock tics.  The calling routines will combine these counts
     2463    13860                to form a DATE or a UTS value.  An error is reported and
     2464    13861                a result of zero is returned if the input does not match the picture.
     2465    13862
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:86   
     2466    13863                Leading and trailing blanks have been stripped by the string prep
     2467    13864                routine.  Embedded blanks are handled such that multiple blanks
     2468    13865                are always allowed and never required.  All other punctuation
     2469    13866                must appear exactly as specified by the picture.  Punctuation
     2470    13867                in the value not in the picture results in an error.
     2471    13868
     2472    13869                Insignificant zeros are always accepted and never required on
     2473    13870                numeric fields.  Alphabetic fields are accepted insensitive to
     2474    13871                case and with or without abbreviation.  Suffixes (AD, BC, AM, and PM)
     2475    13872                are recognized insensitive to case, with or without periods
     2476    13873                after each character, and can always be preceded by one or more
     2477    13874                blanks.  If the era (AD or BC) is omitted, AD is assumed.
     2478    13875                AM is assumed if the meridiem (AM or PM) is omitted.
     2479    13876
     2480    13877                The date/time separator can be represented by
     2481    13878                one or more blanks, or by a comma optionally followed by one
     2482    13879                or more blanks, or by nothing at all.
     2483    13880        */
     2484    13881        /******************************************************************************/
     2485    13882
     2486    13883    1   CVT_FROM_CHAR: PROC ALTRET;
     2487    13884
     2488    13885    2   DCL BLANK BIT( 1 );
     2489    13886
     2490    13887    2       CALL XLATE( TEMP_CHARS, B$XL_UPPER_UR, CHARS );
     2491    13888    2       FLDS = '0'B;
     2492    13889    2       ERR = '0'B;
     2493    13890    2       DAYS = 0;
     2494    13891    2       TICS = 0;
     2495    13892    2       BLANK = %XUD#YES;
     2496    13893            /*
     2497    13894              Check for sign on timespan values.
     2498    13895            */
     2499    13896    2       J = 0;
     2500    13897    2       IF TIMESPAN
     2501    13898    3       THEN DO;
     2502    13899    3           IF SUBSTR( CHARS, 0, 1 ) = '+' OR SUBSTR( CHARS, 0, 1 ) = '-'
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:87   
     2503    13900    4           THEN DO;
     2504    13901    4               IF CHAR_SIZE = 1
     2505    13902    4                 THEN GOTO E_BAD_DATE_D;
     2506    13903    4               IF SUBSTR( CHARS, 0, 1 ) = '-'
     2507    13904    4                 THEN FLDS.BC = %XUD#YES;
     2508    13905    4               J = 1;
     2509    13906    4           END;
     2510    13907    3       END;
     2511    13908        /*
     2512    13909          Check for special names (TODAY, etc.) on date values.
     2513    13910        */
     2514    13911    3       ELSE DO;
     2515    13912    3           CALL SEARCH( LEN, JUNK, B$SR_NON_ALPHA, SUBSTR( TEMP_CHARS, J ));
     2516    13913    3           IF LEN > 0
     2517    13914    4           THEN DO;
     2518    13915    5               DO I = 0 TO %SPEC_MAX ;
     2519    13916    5                   IF LEN >= SPECIAL_SIZE( I )
     2520    13917    5                   THEN IF SUBSTR( TEMP_CHARS, J, LEN ) =
     2521    13918    5                       SUBSTR( SPECIAL$( I )-> TEXTC.T, 0, LEN )
     2522    13919    6                   THEN DO;
     2523    13920    6                       CALL GET_CURRENT_UTS ALTRET( ALT );
     2524    13921    6                       CALL FROM_UTS ;
     2525    13922    6                       IF I ~= %SPEC_NOW
     2526    13923    7                       THEN DO;
     2527    13924    7                           TICS = 0;
     2528    13925    7                           IF I = %SPEC_TOMORROW  THEN DAYS = DAYS + 1;
     2529    13926    7                           IF I = %SPEC_YESTERDAY THEN DAYS = DAYS - 1;
     2530    13927    7                       END;
     2531    13928
     2532    13929    6                       IF LEN < CHAR_SIZE
     2533    13930    7                       THEN DO;
     2534    13931    7                           ERR = E_XUD#EXCESS_CHARS ;
     2535    13932    7                           ALTRETURN ;
     2536    13933    7                       END;
     2537    13934    6                       RETURN ;    /** SPECIAL RETURN FOR SPECIAL NAMES **/
     2538    13935
     2539    13936    6                   END;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:88   
     2540    13937    5               END/*TO*/;
     2541    13938    4           END;
     2542    13939    3       END;
     2543    13940            /*
     2544    13941              If no picture is provided, parse the value according to special
     2545    13942              default rules, and skip the normal parse loop.
     2546    13943            */
     2547    13944    2       IF PICTURE$ = ADDR( NIL )
     2548    13945    3       THEN DO;
     2549    13946    3           CALL CVT_FROM_DEFAULT ALTRET( ALT );
     2550    13947    3       END;
     2551    13948            /*
     2552    13949              Convert the character string to binary subfields by processing
     2553    13950                the picture character by character.
     2554    13951              I = index into picture.
     2555    13952              J = index into character string.
     2556    13953            */
     2557    13954    3       ELSE DO;
     2558    13955    4           DO I = 0 TO PIC_SIZE - 1;
     2559    13956    5               DO CASE( ASCBIN( SUBSTR( PICTURE.T, I, 1 )));
     2560    13957                    /*
     2561    13958                      Picture codes for year...
     2562    13959                    */
     2563    13960    5               CASE( %XUD#P_DATE_Y1 );
     2564    13961    5                   IF B$SR_NON_DEC.C( ASCBIN( SUBSTR( TEMP_CHARS, J, 1 ))) ~= '0'B
     2565    13962    5                     THEN GOTO E_BAD_DATE_Y;
     2566    13963    5                   CALL CHARBIN( FLDS.YEAR, SUBSTR( CHARS, J, 1 ));
     2567    13964    5                   CALL GET_CURRENT_YEAR;
     2568    13965    5                   FLDS.YEAR = FLDS.YEAR + (SYSTEM_YEAR / 10 * 10);
     2569    13966    5                   LEN = 1;
     2570    13967    5               CASE( %XUD#P_DATE_Y2 );
     2571    13968    5                   CALL CVT_YY ALTRET( E_BAD_DATE_Y );
     2572    13969    5               CASE( %XUD#P_DATE_Y4, %XUD#P_DATE_Y5 );
     2573    13970    5                   CALL CVT_TO_NUM( FLDS.YEAR, 6 ) ALTRET( E_BAD_DATE_Y );
     2574    13971    5                   IF FLDS.YEAR < 1
     2575    13972    5                     THEN GOTO E_BAD_DATE_Y;
     2576    13973                    /*
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:89   
     2577    13974                      Picture codes for month...
     2578    13975                    */
     2579    13976    5               CASE( %XUD#P_DATE_M1, %XUD#P_DATE_M2 );
     2580    13977    5                   CALL CVT_MO ALTRET( E_BAD_DATE_MO );
     2581    13978    5               CASE( %XUD#P_DATE_M3UC, %XUD#P_DATE_M3IC, %XUD#P_DATE_M3LC,
     2582    13979    5                         %XUD#P_DATE_M4UC, %XUD#P_DATE_M4IC, %XUD#P_DATE_M4LC );
     2583    13980    5                   CALL CVT_MMM ALTRET( E_BAD_DATE_MO );
     2584    13981                    /*
     2585    13982                      Picture codes for day of month...
     2586    13983                    */
     2587    13984    5               CASE( %XUD#P_DATE_D1, %XUD#P_DATE_D2 );
     2588    13985    5                   CALL CVT_DD ALTRET( E_BAD_DATE_D );
     2589    13986                    /*
     2590    13987                      Picture codes for day of year...
     2591    13988                    */
     2592    13989    5               CASE( %XUD#P_DATE_J1, %XUD#P_DATE_J3 );
     2593    13990    5                   CALL CVT_TO_NUM( FLDS.JULIAN, 3 ) ALTRET( E_BAD_DATE_D );
     2594    13991    5                   IF FLDS.JULIAN = 0
     2595    13992    5                     THEN GOTO E_BAD_DATE_D;
     2596    13993                    /*
     2597    13994                      Picture code for quarter of year...
     2598    13995                    */
     2599    13996    5               CASE( %XUD#P_DATE_Q );
     2600    13997    5                   IF B$SR_NON_DEC.C( ASCBIN( SUBSTR( TEMP_CHARS, J, 1 ))) ~= '0'B
     2601    13998    5                     THEN GOTO E_BAD_DATE_Q;
     2602    13999    5                   CALL CHARBIN( FLDS.QUARTER, SUBSTR( CHARS, J, 1 ));
     2603    14000    5                   LEN = 1;
     2604    14001    5                   IF FLDS.QUARTER > 4 OR FLDS.QUARTER < 1
     2605    14002    5                     THEN GOTO E_BAD_DATE_Q;
     2606    14003                    /*
     2607    14004                      Picture codes for day of week...
     2608    14005                    */
     2609    14006    5               CASE( %XUD#P_DATE_W1UC, %XUD#P_DATE_W1IC, %XUD#P_DATE_W1LC,
     2610    14007    5                     %XUD#P_DATE_W2UC, %XUD#P_DATE_W2IC, %XUD#P_DATE_W2LC,
     2611    14008    5                     %XUD#P_DATE_W3UC, %XUD#P_DATE_W3IC, %XUD#P_DATE_W3LC,
     2612    14009    5                     %XUD#P_DATE_W4UC, %XUD#P_DATE_W4IC, %XUD#P_DATE_W4LC );
     2613    14010    5                   CALL CVT_WWW ALTRET( E_BAD_DATE_W );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:90   
     2614    14011                    /*
     2615    14012                      Picture codes for AD/BC...
     2616    14013                    */
     2617    14014    5               CASE( %XUD#P_DATE_AD, %XUD#P_DATE_BC,
     2618    14015    5                     %XUD#P_DATE_A_D, %XUD#P_DATE_B_C,
     2619    14016    5                     %XUD#P_DATE_CE, %XUD#P_DATE_BCE,
     2620    14017    5                     %XUD#P_DATE_C_E, %XUD#P_DATE_B_C_E );
     2621    14018    5                   CALL CHK4SFX;
     2622    14019    6                   DO CASE( IDX );
     2623    14020    6                   CASE( %XUD#SFX_AD, %XUD#SFX_A_D,
     2624    14021    6                         %XUD#SFX_CE, %XUD#SFX_C_E, %XUD#SFX_NONE );
     2625    14022    6                       ; /* nothing to do */
     2626    14023    6                   CASE( %XUD#SFX_BC, %XUD#SFX_B_C,
     2627    14024    6                         %XUD#SFX_BCE, %XUD#SFX_B_C_E );
     2628    14025    6                       FLDS.BC = %XUD#YES;
     2629    14026    6                   CASE( ELSE );
     2630    14027    6                       LEN = 0;
     2631    14028    6                   END/*CASE*/;
     2632    14029                    /*
     2633    14030                      Picture code for days...
     2634    14031                    */
     2635    14032    5               CASE( %XUD#P_TIME_D3 );
     2636    14033    5                   CALL CVT_1ST_NUM( FLDS.DAY ) ALTRET( E_BAD_DATE_D );
     2637    14034                    /*
     2638    14035                      Picture codes for hour...
     2639    14036                    */
     2640    14037    5               CASE( %XUD#P_TIME_H1, %XUD#P_TIME_H2 );
     2641    14038    5                   CALL CVT_HH ALTRET( E_BAD_DATE_H );
     2642    14039    5               CASE( %XUD#P_TIME_H1A, %XUD#P_TIME_H2A );
     2643    14040    5                   CALL CVT_TO_NUM( FLDS.HOUR, 2 ) ALTRET( E_BAD_DATE_H );
     2644    14041    5                   IF FLDS.HOUR = 12
     2645    14042    5                   THEN
     2646    14043    5                       FLDS.HOUR = 0;
     2647    14044    5                   ELSE IF FLDS.HOUR = 0 OR FLDS.HOUR > 11
     2648    14045    5                   THEN
     2649    14046    5                       GOTO E_BAD_DATE_H;
     2650    14047    5               CASE( %XUD#P_TIME_H3 );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:91   
     2651    14048    5                   CALL CVT_1ST_NUM( FLDS.HOUR ) ALTRET( E_BAD_DATE_H );
     2652    14049    5                   FLDS.DAY = FLDS.HOUR / %XUD#HOURS_DAY;
     2653    14050    5                   FLDS.HOUR = MOD( FLDS.HOUR, %XUD#HOURS_DAY );
     2654    14051                    /*
     2655    14052                      Picture codes for minute...
     2656    14053                    */
     2657    14054    5               CASE( %XUD#P_TIME_M1, %XUD#P_TIME_M2 );
     2658    14055    5                   CALL CVT_MI ALTRET( E_BAD_DATE_MI );
     2659    14056    5               CASE( %XUD#P_TIME_M3 );
     2660    14057    5                   CALL CVT_1ST_NUM( FLDS.MIN ) ALTRET( E_BAD_DATE_MI );
     2661    14058    5                   FLDS.DAY = FLDS.MIN / %XUD#MINS_DAY;
     2662    14059    5                   FLDS.MIN = MOD( FLDS.MIN, %XUD#MINS_DAY );
     2663    14060                    /*
     2664    14061                      Picture codes for second...
     2665    14062                    */
     2666    14063    5               CASE( %XUD#P_TIME_S1, %XUD#P_TIME_S2 );
     2667    14064    5                   CALL CVT_SS ALTRET( E_BAD_DATE_S );
     2668    14065    5               CASE( %XUD#P_TIME_S3 );
     2669    14066    5                   CALL CVT_1ST_NUM( FLDS.SEC ) ALTRET( E_BAD_DATE_S );
     2670    14067    5                   FLDS.DAY = FLDS.SEC / %XUD#SECS_DAY;
     2671    14068    5                   FLDS.SEC = MOD( FLDS.SEC, %XUD#SECS_DAY );
     2672    14069                    /*
     2673    14070                      Picture codes for clock tics...
     2674    14071                    */
     2675    14072    5               CASE( %XUD#P_TIME_T1, %XUD#P_TIME_T2 );
     2676    14073    5                   CALL CVT_TT ALTRET( E_BAD_DATE_T );
     2677    14074    5               CASE( %XUD#P_TIME_T3 );
     2678    14075    5                   CALL CVT_1ST_NUM( FLDS.TIC ) ALTRET( E_BAD_DATE_T );
     2679    14076    5                   FLDS.DAY = FLDS.TIC / %XUD#TICS_DAY;
     2680    14077    5                   FLDS.TIC = MOD( FLDS.TIC, %XUD#TICS_DAY );
     2681    14078                    /*
     2682    14079                      Picture codes for AM/PM...
     2683    14080                    */
     2684    14081    5               CASE( %XUD#P_TIME_APM, %XUD#P_TIME_AP_M );
     2685    14082    5                   CALL CHK4SFX;
     2686    14083    6                   DO CASE( IDX );
     2687    14084    6                   CASE( %XUD#SFX_AM, %XUD#SFX_A_M, %XUD#SFX_NONE );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:92   
     2688    14085    6                       ; /* nothing to do */
     2689    14086    6                   CASE( %XUD#SFX_PM, %XUD#SFX_P_M );
     2690    14087    6                       FLDS.HOUR = FLDS.HOUR + 12;
     2691    14088    6                   CASE( ELSE );
     2692    14089    6                       LEN = 0;
     2693    14090    6                   END/*CASE*/;
     2694    14091                    /*
     2695    14092                      Picture punctuation...
     2696    14093                    */
     2697    14094    5               CASE( %XUD#P_SWITCH );
     2698    14095    5                   CALL CVT_SWITCH;
     2699    14096    5                   LEN = 0;
     2700    14097    5                   BLANK = %XUD#YES;
     2701    14098    5               CASE( ELSE );
     2702    14099    5                   IF SUBSTR( PICTURE.T, I, 1 ) = %XUD#BLANK
     2703    14100    6                   THEN DO;
     2704    14101    6                       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));
     2705    14102    6                       IF LEN = 0 AND NOT BLANK AND I < PIC_SIZE - 1
     2706    14103    7                       THEN DO;
     2707    14104    7                           PIC_CHAR = SUBSTR( PICTURE.T, I+1, 1 );
     2708    14105    7                           IF PIC_CHAR ~= BINASC( %XUD#P_DATE_AD )
     2709    14106    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_A_D )
     2710    14107    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_BC )
     2711    14108    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_B_C )
     2712    14109    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_CE )
     2713    14110    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_C_E )
     2714    14111    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_BCE )
     2715    14112    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_B_C_E )
     2716    14113    7                               AND PIC_CHAR ~= BINASC( %XUD#P_TIME_AP_M )
     2717    14114    7                               AND PIC_CHAR ~= BINASC( %XUD#P_TIME_APM )
     2718    14115    7                               AND PIC_CHAR ~= BINASC( %XUD#P_TIME_AP_M )
     2719    14116    7                             THEN GOTO E_BAD_DATE;
     2720    14117    7                       END;
     2721    14118    6                       J = J + LEN;
     2722    14119    6                       LEN = 0;
     2723    14120    6                       BLANK = %XUD#YES;
     2724    14121    6                   END;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:93   
     2725    14122    6                   ELSE DO;
     2726    14123    6                       IF J < CHAR_SIZE AND
     2727    14124    6                         SUBSTR( CHARS, J, 1 ) ~= SUBSTR( PICTURE.T, I, 1 )
     2728    14125    6                         THEN GOTO E_BAD_DATE;
     2729    14126    6                       LEN = 1;
     2730    14127    6                   END;
     2731    14128
     2732    14129    5               END/*CASE*/;
     2733    14130    4               IF LEN > 0
     2734    14131    4                 THEN BLANK = %XUD#NO;
     2735    14132    4               J = J + LEN;
     2736    14133    4           END/*TO*/;
     2737    14134    3       END;
     2738    14135            /*
     2739    14136              Give error if string not exhausted when picture is completely parsed.
     2740    14137            */
     2741    14138    2       IF J < CHAR_SIZE
     2742    14139    2         THEN ERR = E_XUD#EXCESS_CHARS;
     2743    14140
     2744    14141    2       IF TIMESPAN
     2745    14142    3       THEN DO;
     2746    14143                /*
     2747    14144                  Compute days and tics for timespans.
     2748    14145                */
     2749    14146    3           DAYS = FLDS.DAY;
     2750    14147    3           TICS = (FLDS.HOUR * %XUD#TICS_HOUR) + (FLDS.MIN * %XUD#TICS_MIN )
     2751    14148    3             + (FLDS.SEC * %XUD#TICS_SEC) + FLDS.TIC;
     2752    14149    3           IF FLDS.BC
     2753    14150    4           THEN DO;
     2754    14151    4               TICS = - TICS;
     2755    14152    4               DAYS = - DAYS;
     2756    14153    4           END;
     2757    14154    3       END;
     2758    14155    3       ELSE DO;
     2759    14156                /*
     2760    14157                  Compute date subfields not explicitly provided
     2761    14158                */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:94   
     2762    14159    3           IF FLDS.YEAR = 0 AND FLDS.JULIAN = 0 AND FLDS.QUARTER = 0
     2763    14160    3             AND FLDS.MON = 0
     2764    14161    4           THEN DO;
     2765    14162    4               CALL GET_CURRENT_YEAR;
     2766    14163    4               FLDS.YEAR = SYSTEM_YEAR;
     2767    14164    4               CALL CHARBIN( FLDS.MON, SYSTEM_DATE.MM );
     2768    14165    4               IF FLDS.DAY = 0
     2769    14166    4                 THEN CALL CHARBIN( FLDS.DAY, SYSTEM_DATE.DD );
     2770    14167    4               IF FLDS.WKDAY ~= 0
     2771    14168    4                 THEN FLDS.WKDAY_ONLY = %XUD#YES;
     2772    14169    4           END;
     2773    14170    3           ELSE IF FLDS.YEAR = 0
     2774    14171    4           THEN DO;
     2775    14172    4               CALL GET_CURRENT_YEAR;
     2776    14173    4               FLDS.YEAR = SYSTEM_YEAR;
     2777    14174    4           END;
     2778    14175    3           IF MOD( FLDS.YEAR, 4 ) = 0
     2779    14176    3             AND ( MOD( FLDS.YEAR, 100 ) ~= 0 OR MOD( FLDS.YEAR / 100, 4 ) = 0 )
     2780    14177    4           THEN DO;
     2781    14178    4               FLDS.LEAP_FLAG = %XUD#YES;
     2782    14179    4               IF ( FLDS.MON > 2 OR FLDS.JULIAN > 59 OR FLDS.QUARTER > 1 )
     2783    14180    4                 THEN FLDS.LEAP = 1;
     2784    14181    4           END;
     2785    14182    3           IF FLDS.QUARTER > 0
     2786    14183    3             THEN FLDS.JULIAN = CUM_DAYS( (FLDS.QUARTER - 1) * 3 ) + FLDS.LEAP + 1;
     2787    14184    3           IF FLDS.JULIAN > 0
     2788    14185    4           THEN DO;
     2789    14186    4               IF FLDS.JULIAN = 60 AND FLDS.LEAP_FLAG
     2790    14187    5               THEN DO;
     2791    14188    5                   FLDS.DAY = 29;
     2792    14189    5                   FLDS.MON = 2;
     2793    14190    5               END;
     2794    14191    5               ELSE DO;
     2795    14192    5                   IF FLDS.JULIAN - FLDS.LEAP > 365
     2796    14193    5                     THEN GOTO E_BAD_DATE_D;
     2797    14194    6                   DO FLDS.MON = 0 TO 10;
     2798    14195    6                       IF CUM_DAYS( FLDS.MON + 1 ) >= FLDS.JULIAN - FLDS.LEAP
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:95   
     2799    14196    6                         THEN EXIT;
     2800    14197    6                   END/*TO*/;
     2801    14198    5                   FLDS.DAY = FLDS.JULIAN - CUM_DAYS( FLDS.MON ) - FLDS.LEAP;
     2802    14199    5                   FLDS.MON = FLDS.MON + 1;
     2803    14200    5               END;
     2804    14201    4           END;
     2805    14202                /*
     2806    14203                  Validate number of days in month
     2807    14204                */
     2808    14205    4           ELSE DO;
     2809    14206    4               IF FLDS.DAY > 0 AND FLDS.MON > 0
     2810    14207    4                 THEN IF MON_DAYS( FLDS.MON - 1 ) < FLDS.DAY
     2811    14208    4                 AND NOT( FLDS.LEAP_FLAG AND FLDS.MON = 2 AND FLDS.DAY = 29 )
     2812    14209    4                 THEN GOTO E_BAD_DATE_D;
     2813    14210    4           END;
     2814    14211                /*
     2815    14212                  Compute DAYS and TICS from date/time subfields.
     2816    14213                */
     2817    14214    3           FLDS.YEAR = FLDS.YEAR - 1;
     2818    14215    3           IF FLDS.MON > 0
     2819    14216    3             THEN FLDS.MON = FLDS.MON - 1;
     2820    14217    3           IF FLDS.DAY > 0
     2821    14218    3             THEN FLDS.DAY = FLDS.DAY - 1;
     2822    14219    3           IF NOT FLDS.BC
     2823    14220    4           THEN DO;
     2824    14221                    /* Calculate number of days without leap years... */
     2825    14222    4               DAYS = FLDS.DAY + CUM_DAYS( FLDS.MON ) + (FLDS.YEAR * 365);
     2826    14223                    /*  ...plus nominal number of yeap years... */
     2827    14224    4               FLDS.MON = FLDS.MON + 10;
     2828    14225    4               DAYS = DAYS + (((FLDS.YEAR * 12) + FLDS.MON) / 48);
     2829    14226                    /*  ...minus non-leap centuries up to last leap century... */
     2830    14227    4               FLDS.YEAR = FLDS.YEAR + (FLDS.MON / 12);
     2831    14228    4               DAYS = DAYS - ((FLDS.YEAR / 400) * 3);
     2832    14229                    /*  ...minus non_leap centuries since last leap century. */
     2833    14230    4               DAYS = DAYS - (MOD( FLDS.YEAR, 400 ) / 100);
     2834    14231                    /*  Calculate time of day. */
     2835    14232    4               TICS = (FLDS.HOUR * %XUD#TICS_HOUR) + (FLDS.MIN * %XUD#TICS_MIN)
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:96   
     2836    14233    4                 + (FLDS.SEC * %XUD#TICS_SEC) + FLDS.TIC;
     2837    14234                    /* If weekday only, bump days to next occurrance of that day. */
     2838    14235    4               IF FLDS.WKDAY_ONLY
     2839    14236    5               THEN DO;
     2840    14237    5                   I = MOD( DAYS + 1, 7 ) + 1;
     2841    14238    5                   IF I >= FLDS.WKDAY
     2842    14239    5                     THEN I = 7 - (I - FLDS.WKDAY);
     2843    14240    5                     ELSE I = FLDS.WKDAY - I;
     2844    14241    5                   DAYS = DAYS + I;
     2845    14242    5               END;
     2846    14243                    /* If day of week was entered, make sure it is correct. */
     2847    14244    4               ELSE IF FLDS.WKDAY > 0 AND MOD( DAYS + 1, 7 ) ~= FLDS.WKDAY - 1
     2848    14245    4                 THEN GOTO E_BAD_DATE_W;
     2849    14246    4           END;
     2850    14247    4           ELSE DO;
     2851    14248                    /* Calculate number of days BC without leap years... */
     2852    14249    4               DAYS = - (MON_DAYS( FLDS.MON ) - FLDS.DAY)
     2853    14250    4                 - CUM_DAYS_BC( FLDS.MON ) - (FLDS.YEAR * 365) + 1;
     2854    14251                    /* ...minus number nominal number of leap years... */
     2855    14252    4               FLDS.MON = 13 - FLDS.MON;
     2856    14253    4               DAYS = DAYS - (((FLDS.YEAR * 12) + FLDS.MON ) / 48);
     2857    14254                    /* ...plus non-leap centuries after first leap century... */
     2858    14255    4               FLDS.YEAR = FLDS.YEAR + (FLDS.MON / 12);
     2859    14256    4               DAYS = DAYS + ((FLDS.YEAR / 400) * 3);
     2860    14257                    /* ...plus non-leap centuries up to first leap century. */
     2861    14258    4               DAYS = DAYS + (MOD( FLDS.YEAR, 400 ) / 100);
     2862    14259                    /* Calculate time before start of next day. */
     2863    14260    4               TICS = - %XUD#TICS_DAY + (FLDS.HOUR * %XUD#TICS_HOUR)
     2864    14261    4                 + (FLDS.MIN * %XUD#TICS_MIN) + (FLDS.SEC * %XUD#TICS_SEC)
     2865    14262    4                 + FLDS.TIC;
     2866    14263                    /* If day of week was entered, make sure it is correct. */
     2867    14264    4               IF FLDS.WKDAY > 0 AND MOD( - DAYS, 7 ) ~= 7 - FLDS.WKDAY
     2868    14265    4                 THEN GOTO E_BAD_DATE_W;
     2869    14266    4           END;
     2870    14267    3       END;
     2871    14268
     2872    14269    2       IF ERR
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:97   
     2873    14270    2         THEN GOTO ALT;
     2874    14271    2       RETURN;
     2875    14272
     2876    14273    2   E_BAD_DATE:
     2877    14274    2       IF TIMESPAN
     2878    14275    2         THEN ERR = E_XUD#BAD_TIME;
     2879    14276    2         ELSE ERR = E_XUD#BAD_DATE;
     2880    14277    2       GOTO ALT;
     2881    14278    2   E_BAD_DATE_Y:
     2882    14279    2       ERR = E_XUD#BAD_DATE_Y;
     2883    14280    2       GOTO ALT;
     2884    14281    2   E_BAD_DATE_MO:
     2885    14282    2       ERR = E_XUD#BAD_DATE_MO;
     2886    14283    2       GOTO ALT;
     2887    14284    2   E_BAD_DATE_D:
     2888    14285    2       ERR = E_XUD#BAD_DATE_D;
     2889    14286    2       GOTO ALT;
     2890    14287    2   E_BAD_DATE_Q:
     2891    14288    2       ERR = E_XUD#BAD_DATE_Q;
     2892    14289    2       GOTO ALT;
     2893    14290    2   E_BAD_DATE_W:
     2894    14291    2       ERR = E_XUD#BAD_DATE_W;
     2895    14292    2       GOTO ALT;
     2896    14293    2   E_BAD_DATE_H:
     2897    14294    2       ERR = E_XUD#BAD_DATE_H;
     2898    14295    2       GOTO ALT;
     2899    14296    2   E_BAD_DATE_MI:
     2900    14297    2       ERR = E_XUD#BAD_DATE_MI;
     2901    14298    2       GOTO ALT;
     2902    14299    2   E_BAD_DATE_S:
     2903    14300    2       ERR = E_XUD#BAD_DATE_S;
     2904    14301    2       GOTO ALT;
     2905    14302    2   E_BAD_DATE_T:
     2906    14303    2       ERR = E_XUD#BAD_DATE_T;
     2907    14304    2   ALT:ALTRETURN;
     2908    14305
     2909    14306        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:98   
     2910    14307    2   CVT_XX: PROC ALTRET;
     2911    14308
     2912    14309        /******************************************************************************/
     2913    14310        /*I*
     2914    14311        NAME:   CVT_XX
     2915    14312        PURPOSE:
     2916    14313                Convert a subfield from character to binary.
     2917    14314        CALL:
     2918    14315                CALL CVT_YY ALTRET( error );
     2919    14316                CALL CVT_MO ALTRET( error );
     2920    14317                CALL CVT_DD ALTRET( error );
     2921    14318                CALL CVT_MMM ALTRET( error );
     2922    14319                CALL CVT_WWW ALTRET( error );
     2923    14320                CALL CVT_SWITCH ALTRET( null-switch );
     2924    14321                CALL CVT_HH ALTRET( error );
     2925    14322                CALL CVT_MI ALTRET( error );
     2926    14323                CALL CVT_SS ALTRET( error );
     2927    14324                CALL CVT_TT ALTRET( error );
     2928    14325        DESCRIPTION:
     2929    14326                The logic for conversion of some picture codes is in subroutines
     2930    14327                so that is can be used by default parsing logic as well as for
     2931    14328                pictures specified by the caller.
     2932    14329        */
     2933    14330        /******************************************************************************/
     2934    14331
     2935    14332    3   CVT_YY: ENTRY ALTRET;
     2936    14333
     2937    14334    3       CALL CVT_TO_NUM( FLDS.YEAR, 2 ) ALTRET( ALT );
     2938    14335    3       IF LEN ~= 2
     2939    14336    3         THEN GOTO ALT;
     2940    14337    3       IF XUD_PARAM.ASSUME_UTS AND FLDS.YEAR <= 20
     2941    14338    3         THEN FLDS.YEAR = FLDS.YEAR + 2000;
     2942    14339    3       ELSE IF XUD_PARAM.ASSUME_UTS AND FLDS.YEAR >= 78
     2943    14340    3         THEN FLDS.YEAR = FLDS.YEAR + 1900;
     2944    14341    4       ELSE DO;
     2945    14342    4           CALL GET_CURRENT_YEAR;
     2946    14343    4           FLDS.YEAR = FLDS.YEAR + (SYSTEM_YEAR / 100 * 100);
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:99   
     2947    14344    4       END;
     2948    14345
     2949    14346    3       LEN = 2;
     2950    14347
     2951    14348    3   RET:RETURN;
     2952    14349    3   ALT:ALTRETURN;
     2953    14350
     2954    14351
     2955    14352    3   CVT_MO: ENTRY ALTRET;
     2956    14353
     2957    14354    3       CALL CVT_TO_NUM( FLDS.MON, 2 ) ALTRET( ALT );
     2958    14355    3       IF FLDS.MON > 12 OR FLDS.MON < 1
     2959    14356    3         THEN GOTO ALT;
     2960    14357    3       GOTO RET;
     2961    14358
     2962    14359
     2963    14360    3   CVT_DD: ENTRY ALTRET;
     2964    14361
     2965    14362    3       CALL CVT_TO_NUM( FLDS.DAY, 2 ) ALTRET( ALT );
     2966    14363    3       IF FLDS.DAY = 0
     2967    14364    3         THEN GOTO ALT;
     2968    14365    3       GOTO RET;
     2969    14366
     2970    14367
     2971    14368    3   CVT_MMM: ENTRY ALTRET;
     2972    14369
     2973    14370    3       CALL SEARCH( LEN, JUNK, B$SR_NON_ALPHA, SUBSTR( TEMP_CHARS, J ));
     2974    14371    3       IF LEN = 0
     2975    14372    3         THEN GOTO ALT;
     2976    14373    4       DO FLDS.MON = 0 TO 11;
     2977    14374    4           IF SUBSTR( TEMP_CHARS, J, LEN ) =
     2978    14375    4             SUBSTR( MONTH$( FLDS.MON )-> TEXTC.T, 0, LEN )
     2979    14376    5           THEN DO;
     2980    14377    5               IF MONTH_SIZE( FLDS.MON ) > LEN
     2981    14378    5                 THEN GOTO ALT;
     2982    14379    5               FLDS.MON = FLDS.MON + 1;
     2983    14380    5               GOTO RET;   /** NORMAL RETURN **/
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:100  
     2984    14381    5           END;
     2985    14382    4       END/*TO*/;
     2986    14383    3       GOTO ALT;
     2987    14384
     2988    14385
     2989    14386    3   CVT_WWW: ENTRY ALTRET;
     2990    14387
     2991    14388    3       CALL SEARCH( LEN, JUNK, B$SR_NON_ALPHA, SUBSTR( TEMP_CHARS, J ));
     2992    14389    3       IF LEN = 0
     2993    14390    3         THEN GOTO ALT;
     2994    14391    4       DO FLDS.WKDAY = 0 TO 6;
     2995    14392    4           IF SUBSTR( TEMP_CHARS, J, LEN ) =
     2996    14393    4             SUBSTR( WEEKDAY$( FLDS.WKDAY )-> TEXTC.T, 0, LEN )
     2997    14394    5           THEN DO;
     2998    14395    5               IF MOD( FLDS.WKDAY + 1, 2 ) + 1 > LEN
     2999    14396    5                 THEN GOTO ALT;
     3000    14397    5               FLDS.WKDAY = FLDS.WKDAY + 1;
     3001    14398    5               GOTO RET;   /** NORMAL RETURN **/
     3002    14399    5           END;
     3003    14400    4       END/*TO*/;
     3004    14401    3       GOTO ALT;
     3005    14402
     3006    14403
     3007    14404    3   CVT_SWITCH: ENTRY ALTRET;
     3008    14405
     3009    14406    3       IF J >= CHAR_SIZE
     3010    14407    3         THEN GOTO ALT;
     3011    14408    3       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));
     3012    14409    3       IF J+LEN < CHAR_SIZE
     3013    14410    3       THEN IF SUBSTR( CHARS, J+LEN, 1 ) = ','
     3014    14411    3         THEN LEN = LEN + 1;
     3015    14412    3       IF LEN = 0
     3016    14413    3         THEN GOTO ALT;
     3017    14414    3       IF J+LEN < CHAR_SIZE
     3018    14415    3       THEN
     3019    14416    3           CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ), LEN );
     3020    14417    3       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ), LEN );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:101  
     3021    14418    3       J = J + LEN;
     3022    14419    3       GOTO RET;
     3023    14420
     3024    14421
     3025    14422    3   CVT_HH: ENTRY ALTRET;
     3026    14423
     3027    14424    3       CALL CVT_TO_NUM( FLDS.HOUR, 2 ) ALTRET( ALT );
     3028    14425    3       IF FLDS.HOUR > %(XUD#HOURS_DAY - 1)
     3029    14426    3         THEN GOTO ALT;
     3030    14427    3       GOTO RET;
     3031    14428
     3032    14429
     3033    14430    3   CVT_MI: ENTRY ALTRET;
     3034    14431
     3035    14432    3       CALL CVT_TO_NUM( FLDS.MIN, 2 ) ALTRET( ALT );
     3036    14433    3       IF FLDS.MIN > %(XUD#MINS_HOUR - 1)
     3037    14434    3         THEN GOTO ALT;
     3038    14435    3       GOTO RET;
     3039    14436
     3040    14437
     3041    14438    3   CVT_SS: ENTRY ALTRET;
     3042    14439
     3043    14440    3       CALL CVT_TO_NUM( FLDS.SEC, 2 ) ALTRET( ALT );
     3044    14441    3       IF FLDS.SEC > %(XUD#SECS_MIN - 1)
     3045    14442    3         THEN GOTO ALT;
     3046    14443    3       GOTO RET;
     3047    14444
     3048    14445
     3049    14446    3   CVT_TT: ENTRY ALTRET;
     3050    14447
     3051    14448    3       CALL CVT_TO_NUM( FLDS.TIC, 2 ) ALTRET( ALT );
     3052    14449    3       IF LEN = 1
     3053    14450    3         THEN FLDS.TIC = FLDS.TIC * 10;
     3054    14451    3       GOTO RET;
     3055    14452
     3056    14453    3   END CVT_XX;
     3057    14454        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:102  
     3058    14455        /******************************************************************************/
     3059    14456        /*I*
     3060    14457        NAME:   CVT_TO_NUM
     3061    14458        PURPOSE:
     3062    14459                Convert a numeric substring to binary.
     3063    14460        CALL:
     3064    14461                CALL CVT_TO_NUM( NUM, MAX ) ALTRET( not_a_number );
     3065    14462        PARAMETERS:
     3066    14463                NUM - Returns the converted number.
     3067    14464                MAX - The maximum number of digits.
     3068    14465        INPUT:
     3069    14466                CHARS - The string containing the number.
     3070    14467                J - The starting offset of the number.
     3071    14468        OUTPUT:
     3072    14469                LEN - The actual length of the number.
     3073    14470        INTERFACE:
     3074    14471                None.
     3075    14472        DESCRIPTION:
     3076    14473                This routine extracts a numeric substring from a character string
     3077    14474                and converts it to binary.
     3078    14475                The maximum substring length is provided.  The actual substring
     3079    14476                length is returned.  This will be less than the maximum if the string
     3080    14477                ends or a non-numeric character is found within the substring of
     3081    14478                maximum length.
     3082    14479                The alternate return is taken if the starting character is not a digit.
     3083    14480        */
     3084    14481        /******************************************************************************/
     3085    14482
     3086    14483    2   CVT_TO_NUM: PROC( NUM, MAX ) ALTRET;
     3087    14484
     3088    14485    3   DCL NUM SBIN PARAM;
     3089    14486    3   DCL MAX SBIN PARAM;
     3090    14487    3   DCL LIMIT SBIN;
     3091    14488
     3092    14489    3       LIMIT = MAX;
     3093    14490    3   COMMON: ;
     3094    14491    3       IF J >= CHAR_SIZE THEN ALTRETURN;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:103  
     3095    14492    3       CALL SEARCH( LEN, JUNK, B$SR_NON_DEC,
     3096    14493    3         SUBSTR( CHARS, J, MINIMUM( LIMIT, CHAR_SIZE - J )));
     3097    14494    3       IF LEN = 0 THEN ALTRETURN;
     3098    14495    3       CALL CHARBIN( NUM, SUBSTR( CHARS, J, LEN ));
     3099    14496    3       RETURN;
     3100    14497
     3101    14498        /******************************************************************************/
     3102    14499        /*I*
     3103    14500        NAME:   CVT_1ST_NUM
     3104    14501        PURPOSE:
     3105    14502                Convert first timespan subfield to binary.
     3106    14503        CALL:
     3107    14504                CALL CVT_1ST_NUM( NUM ) ALTRET( not_a_number );
     3108    14505        DESCRIPTION:
     3109    14506                This routine is identical to CVT_FROM_NUM, except that the maximum
     3110    14507                size is taken from the next picture character, not a parameter.
     3111    14508        */
     3112    14509        /******************************************************************************/
     3113    14510
     3114    14511    3   CVT_1ST_NUM: ENTRY( NUM ) ALTRET;
     3115    14512
     3116    14513    3       IF I < PIC_SIZE - 1 AND SUBSTR( PICTURE.T, I+1, 1 ) < %XUD#BLANK
     3117    14514    4       THEN DO;
     3118    14515    4           LIMIT = ASCBIN( SUBSTR( PICTURE.T, I+1, 1 ));
     3119    14516    4           I = I + 1;
     3120    14517    4       END;
     3121    14518    3       ELSE
     3122    14519    3           LIMIT = 1;
     3123    14520    3       GOTO COMMON;
     3124    14521
     3125    14522    3   END CVT_TO_NUM;
     3126    14523        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:104  
     3127    14524        /******************************************************************************/
     3128    14525        /*I*
     3129    14526        NAME:   GET_CURRENT_YEAR
     3130    14527        PURPOSE:
     3131    14528                Get the current year from the operating system.
     3132    14529        CALL:
     3133    14530                CALL GET_CURRENT_YEAR;
     3134    14531        OUTPUT:
     3135    14532                SYSTEM_YEAR - Full system year (eg, 1984) in binary.
     3136    14533        INTERFACE:
     3137    14534                M$TIME
     3138    14535        DESCRIPTION:
     3139    14536                This routine is called when a character date contains a
     3140    14537                partial year (eg, 84) or no year.  It is called every time the
     3141    14538                year is needed in order to avoid any static data allocation.  (Static
     3142    14539                data must be avoided since this module is included in the ARES ASL).
     3143    14540        */
     3144    14541        /******************************************************************************/
     3145    14542
     3146    14543    2   GET_CURRENT_YEAR: PROC;
     3147    14544
     3148    14545    3       FPT@TIME = FPT_TIME_C;
     3149    14546    3       FPT@TIME.DATE_ = VECTOR( SYSTEM_DATE );
     3150    14547    3       CALL M$TIME( FPT@TIME );
     3151    14548    3       CALL CHARBIN( SYSTEM_YEAR, SYSTEM_DATE.YY );
     3152    14549    3       IF SYSTEM_YEAR >= 85
     3153    14550    3         THEN SYSTEM_YEAR = SYSTEM_YEAR + 1900;
     3154    14551    3         ELSE SYSTEM_YEAR = SYSTEM_YEAR + 2000;
     3155    14552    3       RETURN;
     3156    14553
     3157    14554    3   END GET_CURRENT_YEAR;
     3158    14555        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:105  
     3159    14556        /******************************************************************************/
     3160    14557        /*I*
     3161    14558        NAME:   CVT_FROM_DEFAULT
     3162    14559        PURPOSE:
     3163    14560                Convert date from string to binary using default conversion rules.
     3164    14561        CALL:
     3165    14562                CALL CVT_FROM_DEFAULT ALTRET( error );
     3166    14563        INPUT:
     3167    14564                CHARS - The string to be converted.
     3168    14565        OUTPUT:
     3169    14566                FLDS - Subfield values set as if string were parsed using a picture.
     3170    14567        INTERFACE:
     3171    14568                PARSE_DATE
     3172    14569                PARSE_TIME
     3173    14570                CVT_SWITCH
     3174    14571        DESCRIPTION:
     3175    14572                This routine parses a date and/or time according to default rules.
     3176    14573                It is used for conversion from character to internal form when
     3177    14574                no picture is provided.
     3178    14575
     3179    14576                Either the date or time may come first.  One or more blanks, or a
     3180    14577                comma followed by one or more blanks must separate them.  If the
     3181    14578                time is omitted, midnight is assumed.  If the date is omitted,
     3182    14579                today is assumed.
     3183    14580        */
     3184    14581        /******************************************************************************/
     3185    14582
     3186    14583    2   CVT_FROM_DEFAULT: PROC ALTRET;
     3187    14584
     3188    14585    3   DCL COMMITTED BIT( 1 ); /* used to avoid issuing misleading diagnostics */
     3189    14586
     3190    14587    3       IF TIMESPAN
     3191    14588    3       THEN
     3192    14589    3           CALL PARSE_SPAN ALTRET( ALT );
     3193    14590    4       ELSE DO;
     3194    14591    4           COMMITTED = %XUD#NO;
     3195    14592    4           J = 0;  /* index into character string */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:106  
     3196    14593    4           CALL PARSE_TIME
     3197    14594    5           WHENRETURN DO;
     3198    14595    5               IF J < CHAR_SIZE
     3199    14596    6               THEN DO;
     3200    14597    6                   CALL CVT_SWITCH ALTRET( E_BAD_DATE );
     3201    14598    6                   CALL PARSE_DATE ALTRET( ALT );
     3202    14599    6               END;
     3203    14600    5           END/*WHEN*/;
     3204    14601    5           WHENALTRETURN DO;
     3205    14602    5               IF COMMITTED
     3206    14603    5                 THEN GOTO ALT;
     3207    14604    5               ERR = '0'B;
     3208    14605    5               FLDS = '0'B;
     3209    14606    5               J = 0;
     3210    14607    5               CALL PARSE_DATE
     3211    14608    6               WHENALTRETURN DO;
     3212    14609    6                   IF NOT COMMITTED
     3213    14610    6                     THEN GOTO E_BAD_DATE;
     3214    14611    6                   GOTO ALT;
     3215    14612    6               END/*WHENALT*/;
     3216    14613    5               IF J < CHAR_SIZE
     3217    14614    6               THEN DO;
     3218    14615    6                   CALL CVT_SWITCH ALTRET( E_BAD_DATE );
     3219    14616    6                   CALL PARSE_TIME ALTRET( ALT );
     3220    14617    6               END;
     3221    14618    5           END/*WHENALT*/;
     3222    14619    4       END;
     3223    14620    3       RETURN;
     3224    14621
     3225    14622    3   E_BAD_DATE:
     3226    14623    3       ERR = E_XUD#BAD_DATE;
     3227    14624    3   ALT:ALTRETURN;
     3228    14625
     3229    14626        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:107  
     3230    14627        /******************************************************************************/
     3231    14628        /*I*
     3232    14629        NAME:   PARSE_DATE
     3233    14630        PURPOSE:
     3234    14631                Parse a date according to default rules.
     3235    14632        CALL:
     3236    14633                CALL PARSE_DATE ALTRET( error );
     3237    14634        INPUT:
     3238    14635                CHARS - The string to be converted.
     3239    14636                J - Starting offset into string.
     3240    14637        OUTPUT:
     3241    14638                FLDS - Subfield values set as if string were parsed using a picture.
     3242    14639                J - Offset to character following end of parsed date.
     3243    14640        INTERFACE:
     3244    14641                CVT_WWW
     3245    14642                CVT_MMM
     3246    14643                CVT_DD
     3247    14644                CVT_MO
     3248    14645                CVT_YY
     3249    14646                CVT_SWITCH
     3250    14647        DESCRIPTION:
     3251    14648                The default rules for parsing date/time strings accept the following
     3252    14649                date formats:
     3253    14650
     3254    14651                    yy-mm-dd
     3255    14652                    www
     3256    14653                    mm/dd/yyyy
     3257    14654                    mm/dd/yy        mm/dd
     3258    14655                    mmm dd, 'yy     mmm dd 'yy      mmm dd
     3259    14656                    dd mmm, 'yy     dd mmm 'yy      dd mmm
     3260    14657        */
     3261    14658        /******************************************************************************/
     3262    14659
     3263    14660    3   PARSE_DATE: PROC ALTRET;
     3264    14661
     3265    14662            /*
     3266    14663              Try for MM/DD/YYYY or MM/DD/YY or MM/DD
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:108  
     3267    14664            */
     3268    14665    4       CALL INDEX( I, '/', CHARS, J )
     3269    14666    5       WHENRETURN DO;
     3270    14667    5           COMMITTED = %XUD#YES;
     3271    14668    5           CALL CVT_MO ALTRET( E_BAD_DATE_MO );
     3272    14669    5           J = J + LEN;
     3273    14670    5           IF J >= CHAR_SIZE
     3274    14671    5             THEN GOTO E_BAD_DATE;
     3275    14672    5           IF SUBSTR( CHARS, J, 1 ) ~= '/'
     3276    14673    5             THEN GOTO E_BAD_DATE;
     3277    14674    5           J = J + 1;
     3278    14675    5           CALL CVT_DD ALTRET( E_BAD_DATE_D );
     3279    14676    5           J = J + LEN;
     3280    14677    5           IF J >= CHAR_SIZE
     3281    14678    5             THEN GOTO RET;
     3282    14679    5           IF SUBSTR( CHARS, J, 1 ) ~= '/'
     3283    14680    5             THEN GOTO RET;
     3284    14681    5           J = J + 1;
     3285    14682    5           CALL CVT_TO_NUM( FLDS.YEAR, 4 );
     3286    14683    5           IF LEN < 4
     3287    14684    5           THEN
     3288    14685    5               CALL CVT_YY ALTRET( E_BAD_DATE_Y );
     3289    14686    5           J = J + LEN;
     3290    14687    5           GOTO RET;
     3291    14688    5       END/*WHEN*/;
     3292    14689            /*
     3293    14690              Try for YY-MM-DD
     3294    14691            */
     3295    14692    4       CALL INDEX( I, '-', CHARS, J )
     3296    14693    5       WHENRETURN DO;
     3297    14694    5           COMMITTED = %XUD#YES;
     3298    14695    5           CALL CVT_YY ALTRET( E_BAD_DATE_Y );
     3299    14696    5           J = J + LEN;
     3300    14697    5           IF J >= CHAR_SIZE
     3301    14698    5             THEN GOTO E_BAD_DATE;
     3302    14699    5           IF SUBSTR( CHARS, J, 1 ) ~= '-'
     3303    14700    5             THEN GOTO E_BAD_DATE;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:109  
     3304    14701    5           J = J + 1;
     3305    14702    5           CALL CVT_MO ALTRET( E_BAD_DATE_MO );
     3306    14703    5           J = J + LEN;
     3307    14704    5           IF J >= CHAR_SIZE
     3308    14705    5             THEN GOTO E_BAD_DATE;
     3309    14706    5           IF SUBSTR( CHARS, J, 1 ) ~= '-'
     3310    14707    5             THEN GOTO E_BAD_DATE;
     3311    14708    5           J = J + 1;
     3312    14709    5           CALL CVT_DD ALTRET( E_BAD_DATE_D );
     3313    14710    5           J = J + LEN;
     3314    14711    5           GOTO RET;
     3315    14712    5       END/*WHEN*/;
     3316    14713            /*
     3317    14714              Try for WWW
     3318    14715            */
     3319    14716    4       CALL CVT_WWW
     3320    14717    5       WHENRETURN DO;
     3321    14718    5           COMMITTED = %XUD#YES;
     3322    14719    5           J = J + LEN;
     3323    14720    5           GOTO RET;
     3324    14721    5       END/*WHEN*/;
     3325    14722    4       FLDS.WKDAY = 0;
     3326    14723            /*
     3327    14724              Try for MMM DD, 'YY or MMM DD 'YY or MMM DD
     3328    14725            */
     3329    14726    4       CALL CVT_MMM
     3330    14727    5       WHENRETURN DO;
     3331    14728    5           COMMITTED = %XUD#YES;
     3332    14729    5           J = J + LEN;
     3333    14730    5           IF J >= CHAR_SIZE
     3334    14731    5             THEN GOTO E_BAD_DATE;
     3335    14732    5           CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));
     3336    14733    5           J = J + LEN;
     3337    14734    5           CALL CVT_DD ALTRET( E_BAD_DATE_D );
     3338    14735    5           J = J + LEN;
     3339    14736    5   YY:     ;
     3340    14737    5           CALL CVT_SWITCH;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:110  
     3341    14738    5           IF J >= CHAR_SIZE
     3342    14739    5             THEN GOTO RET;
     3343    14740    5           IF SUBSTR( CHARS, J, 1 ) ~= ''''
     3344    14741    6           THEN DO;
     3345    14742    6               J = J - LEN;
     3346    14743    6               GOTO RET;
     3347    14744    6           END;
     3348    14745    5           J = J + 1;
     3349    14746    5           CALL CVT_YY ALTRET( E_BAD_DATE_Y );
     3350    14747    5           J = J + LEN;
     3351    14748    5           GOTO RET;
     3352    14749    5       END/*WHEN*/;
     3353    14750            /*
     3354    14751              Try for DD MMM, 'YY or DD MMM 'YY or DD MMM
     3355    14752            */
     3356    14753    4       I = J;
     3357    14754    4       CALL CVT_DD ALTRET( TRY_YYMMDD );
     3358    14755    4       J = J + LEN;
     3359    14756    4       IF J >= CHAR_SIZE
     3360    14757    4         THEN GOTO E_BAD_DATE;
     3361    14758    4       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));
     3362    14759    4       J = J + LEN;
     3363    14760    4       CALL CVT_MMM ALTRET( TRY_YYMMDD );
     3364    14761    4       J = J + LEN;
     3365    14762    4       COMMITTED = %XUD#YES;
     3366    14763    4       GOTO YY;
     3367    14764            /*
     3368    14765              Try for YYMMDD
     3369    14766            */
     3370    14767    4   TRY_YYMMDD: ;
     3371    14768    4       J = I;
     3372    14769    4       CALL CVT_YY ALTRET( E_BAD_DATE );
     3373    14770    4       J = J + 2;
     3374    14771    4       CALL CVT_MO ALTRET( E_BAD_DATE );
     3375    14772    4       J = J + 2;
     3376    14773    4       CALL CVT_DD ALTRET( E_BAD_DATE );
     3377    14774    4       COMMITTED = %XUD#YES;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:111  
     3378    14775    4       IF LEN ~= 2
     3379    14776    4         THEN GOTO E_BAD_DATE_D;
     3380    14777    4       J = J + 2;
     3381    14778    4       GOTO RET;
     3382    14779
     3383    14780    4   E_BAD_DATE_Y:
     3384    14781    4       ERR = E_XUD#BAD_DATE_Y;
     3385    14782    4       GOTO ALT;
     3386    14783    4   E_BAD_DATE_MO:
     3387    14784    4       ERR = E_XUD#BAD_DATE_MO;
     3388    14785    4       GOTO ALT;
     3389    14786    4   E_BAD_DATE_D:
     3390    14787    4       ERR = E_XUD#BAD_DATE_D;
     3391    14788    4       GOTO ALT;
     3392    14789    4   E_BAD_DATE_H:
     3393    14790    4       ERR = E_XUD#BAD_DATE_H;
     3394    14791    4       GOTO ALT;
     3395    14792    4   E_BAD_DATE_MI:
     3396    14793    4       ERR = E_XUD#BAD_DATE_MI;
     3397    14794    4       GOTO ALT;
     3398    14795    4   E_BAD_DATE_S:
     3399    14796    4       ERR = E_XUD#BAD_DATE_S;
     3400    14797    4       GOTO ALT;
     3401    14798    4   E_BAD_DATE_T:
     3402    14799    4       ERR = E_XUD#BAD_DATE_T;
     3403    14800    4       GOTO ALT;
     3404    14801    4   E_BAD_DATE:
     3405    14802    4       ERR = E_XUD#BAD_DATE;
     3406    14803    4   ALT:ALTRETURN;
     3407    14804
     3408    14805    4   RET:RETURN; /* Normal return point for all picture types */
     3409    14806
     3410    14807        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:112  
     3411    14808        /******************************************************************************/
     3412    14809        /*I*
     3413    14810        NAME:   PARSE_TIME
     3414    14811        PURPOSE:
     3415    14812                Parse time of day using default rules.
     3416    14813        CALL:
     3417    14814                CALL PARSE_TIME ALTRET( ALT );
     3418    14815        INPUT:
     3419    14816                CHARS - The string to be converted.
     3420    14817                J - Starting offset into string.
     3421    14818        OUTPUT:
     3422    14819                FLDS - Subfield values set as if string were parsed using a picture.
     3423    14820                J - Offset to character following end of parsed time.
     3424    14821        INTERFACE:
     3425    14822                CVT_HH
     3426    14823                CVT_MI
     3427    14824                CVT_SS
     3428    14825                CVT_TT
     3429    14826                CHK4END
     3430    14827        DESCRIPTION:
     3431    14828                The time must be in the form:   hh:mm:ss.tt AM
     3432    14829                Trailing subfields and their punctuation may be omitted if their
     3433    14830                value is zero, except that the hour cannot be used alone.  AM
     3434    14831                may be omitted and the value will be interpreted on a 24-hour
     3435    14832                clock.  Blanks are optional before AM, if specified.
     3436    14833        */
     3437    14834        /******************************************************************************/
     3438    14835
     3439    14836    4   PARSE_TIME: ENTRY ALTRET;
     3440    14837
     3441    14838    4       CALL CVT_HH ALTRET( E_BAD_DATE_H );
     3442    14839    4       J = J + LEN;
     3443    14840    4       IF J >= CHAR_SIZE
     3444    14841    4         THEN GOTO E_BAD_DATE;
     3445    14842    4       IF SUBSTR( CHARS, J, 1 ) = ':'
     3446    14843    5       THEN DO;
     3447    14844    5           COMMITTED = %XUD#YES;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:113  
     3448    14845    5           J = J + 1;
     3449    14846    5       END;
     3450    14847    5       ELSE DO;
     3451    14848    5           CALL CHK4END ALTRET( ALT );
     3452    14849    5           IF NUM < 0
     3453    14850    5             THEN GOTO E_BAD_DATE;
     3454    14851    5           COMMITTED = %XUD#YES;
     3455    14852    5           GOTO RET;
     3456    14853    5       END;
     3457    14854
     3458    14855    4       CALL CVT_MI ALTRET( E_BAD_DATE_MI );
     3459    14856    4       J = J + LEN;
     3460    14857    4       IF J >= CHAR_SIZE
     3461    14858    4         THEN GOTO RET;
     3462    14859    4       IF SUBSTR( CHARS, J, 1 ) = ':'
     3463    14860    4       THEN
     3464    14861    4           J = J + 1;
     3465    14862    5       ELSE DO;
     3466    14863    5           CALL CHK4END ALTRET( ALT );
     3467    14864    5           GOTO RET;
     3468    14865    5       END;
     3469    14866
     3470    14867    4       CALL CVT_SS ALTRET( E_BAD_DATE_S );
     3471    14868    4       J = J + LEN;
     3472    14869    4       IF J >= CHAR_SIZE
     3473    14870    4         THEN GOTO RET;
     3474    14871    4       IF SUBSTR( CHARS, J, 1 ) = '.'
     3475    14872    4       THEN
     3476    14873    4           J = J + 1;
     3477    14874    5       ELSE DO;
     3478    14875    5           CALL CHK4END ALTRET( ALT );
     3479    14876    5           GOTO RET;
     3480    14877    5       END;
     3481    14878
     3482    14879    4       CALL CVT_TT ALTRET( E_BAD_DATE_T );
     3483    14880    4       J = J + LEN;
     3484    14881    4       CALL CHK4END;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:114  
     3485    14882    4       IF I < 0
     3486    14883    4         THEN ERR = '0'B;
     3487    14884    4       GOTO RET;
     3488    14885
     3489    14886        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:115  
     3490    14887        /******************************************************************************/
     3491    14888        /*I*
     3492    14889        NAME:   CHK4END
     3493    14890        PURPOSE:
     3494    14891                Check for end of time value according to default rules.
     3495    14892        CALL:
     3496    14893                CALL CHK4END ALTRET( error );
     3497    14894        INPUT:
     3498    14895                CHARS - The string to be converted.
     3499    14896                J - Starting offset into string.
     3500    14897        OUTPUT:
     3501    14898                FLDS.HOUR - May be updated if AM or PM found.
     3502    14899                J - If AM or PM found, updated to point past it, else unchanged.
     3503    14900                NUM - If less than zero, AM or PM not found.
     3504    14901        INTERFACE:
     3505    14902                CHK4SFX
     3506    14903        DESCRIPTION:
     3507    14904                If the current character is a blank, we are at the end of the time,
     3508    14905                except that an AM or PM suffix may follow.  If a suffix is found,
     3509    14906                the hour is validated and possibly adjusted for a 12-hour colck.
     3510    14907                The routine returns normally if this is the end of the time and
     3511    14908                the hour is not in error, otherwise it altreturns after setting
     3512    14909                the error code.
     3513    14910                The current offset if incremented if a suffix is found, otherwise
     3514    14911                it is not changed.
     3515    14912        */
     3516    14913        /******************************************************************************/
     3517    14914
     3518    14915    4   CHK4END: PROC ALTRET;
     3519    14916
     3520    14917    5       NUM = -1;
     3521    14918    5       IF J >= CHAR_SIZE
     3522    14919    5         THEN GOTO RET;
     3523    14920
     3524    14921    5       CALL CHK4SFX;
     3525    14922    6       DO CASE( IDX );
     3526    14923    6       CASE( %XUD#SFX_AM, %XUD#SFX_A_M );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:116  
     3527    14924    6           NUM = 0;
     3528    14925    6       CASE( %XUD#SFX_PM, %XUD#SFX_P_M );
     3529    14926    6           NUM = 12;
     3530    14927    6       CASE( ELSE );
     3531    14928    6           IF SUBSTR( CHARS, J, 1 ) = ' ' OR SUBSTR( CHARS, J, 1 ) = ','
     3532    14929    6             THEN GOTO RET;
     3533    14930    6             ELSE GOTO E_BAD_DATE;
     3534    14931    6       END/*CASE*/;
     3535    14932
     3536    14933    5       IF FLDS.HOUR = 12
     3537    14934    5       THEN
     3538    14935    5           FLDS.HOUR = 0;
     3539    14936    5       ELSE IF FLDS.HOUR = 0 OR FLDS.HOUR > 11
     3540    14937    5       THEN
     3541    14938    5           GOTO E_BAD_DATE_H;
     3542    14939    5       FLDS.HOUR = FLDS.HOUR + NUM;
     3543    14940    5       J = J + LEN;
     3544    14941
     3545    14942    5   RET:RETURN;
     3546    14943
     3547    14944    5   E_BAD_DATE:
     3548    14945    5       ERR = E_XUD#BAD_DATE;
     3549    14946    5       GOTO ALT;
     3550    14947    5   E_BAD_DATE_H:
     3551    14948    5       ERR = E_XUD#BAD_DATE_H;
     3552    14949    5   ALT:ALTRETURN;
     3553    14950
     3554    14951    5   END CHK4END;
     3555    14952
     3556    14953        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:117  
     3557    14954        /******************************************************************************/
     3558    14955        /*I*
     3559    14956        NAME:   PARSE_SPAN
     3560    14957        PURPOSE:
     3561    14958                Convert time interval constant from string to binary.
     3562    14959        CALL:
     3563    14960                CALL PARSE_SPAN ALTRET( error );
     3564    14961        INPUT:
     3565    14962                CHARS - The string to be converted.
     3566    14963                J - Starting offset into string.
     3567    14964        OUTPUT:
     3568    14965                FLDS - Subfield values set as if parse were done via picture.
     3569    14966                J - Points to character past end of converted string.
     3570    14967        INTERFACE:
     3571    14968                CVT_HH
     3572    14969                CVT_MI
     3573    14970                CVT_SS
     3574    14971                CVT_TT
     3575    14972        DESCRIPTION:
     3576    14973                This routine converts a time interval constant into a number
     3577    14974                of days and clock tics.  The calling routines will conbine
     3578    14975                these counts into a DATE or UTS interval.
     3579    14976
     3580    14977                The syntax for the constant is as follows:
     3581    14978
     3582    14979                          { d [ . ]                                  }
     3583    14980                          {                                          }
     3584    14981                    [+|-] { [ d [ . ]] h : [ m [ : [ s [ . [ t ]]]]] }
     3585    14982                          {                                          }
     3586    14983                          { : m [ : [ s [ . [ t ]]]]                 }
     3587    14984
     3588    14985                Leading and trailing blanks are ignored.  Embedded blanks are
     3589    14986                not allowed.  The alternate return is taken if the constant value
     3590    14987                has incorrect syntax or if any time subfield exceeds its maximum
     3591    14988                value.
     3592    14989        */
     3593    14990        /******************************************************************************/
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:118  
     3594    14991
     3595    14992    4   PARSE_SPAN: ENTRY ALTRET;
     3596    14993
     3597    14994            /*
     3598    14995              Parse number of days.
     3599    14996            */
     3600    14997    4       CALL INDEX( IDX, '.', CHARS, J );
     3601    14998    4       IF IDX > J
     3602    14999    5       THEN DO;
     3603    15000    5           CALL INDEX( I, ':', CHARS, J )
     3604    15001    6           WHENRETURN DO;
     3605    15002    6               IF I = J
     3606    15003    6                 THEN IF J + 1 = CHAR_SIZE
     3607    15004    6                   THEN GOTO E_BAD_DATE_H;
     3608    15005    6                   ELSE GOTO NO_HOURS;
     3609    15006    6           END/*WHEN*/;
     3610    15007    5           IF IDX <= I
     3611    15008    6           THEN DO;
     3612    15009    6               CALL SEARCH( LEN, JUNK, B$SR_NON_DEC, CHARS, J );
     3613    15010    6               IF LEN ~= IDX OR LEN = J
     3614    15011    6                 THEN GOTO E_BAD_DATE_D;
     3615    15012    6               CALL CHARBIN( FLDS.DAY, SUBSTR( CHARS, J, LEN-J ));
     3616    15013    6               J = LEN + 1;
     3617    15014    6               IF J >= CHAR_SIZE
     3618    15015    6                 THEN GOTO RET;
     3619    15016    6           END;
     3620    15017    5       END;
     3621    15018    4       ELSE
     3622    15019    4           J = J + 1;
     3623    15020            /*
     3624    15021              Parse number of hours.
     3625    15022            */
     3626    15023    4       CALL CVT_HH ALTRET( E_BAD_DATE_H );
     3627    15024    4       J = J + LEN;
     3628    15025    4       IF J >= CHAR_SIZE
     3629    15026    4         THEN GOTO E_BAD_DATE_H;
     3630    15027    4       IF SUBSTR( CHARS, J, 1 ) ~= ':'
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:119  
     3631    15028    4         THEN GOTO E_BAD_DATE_H;
     3632    15029    4   NO_HOURS: ;
     3633    15030    4       J = J + 1;
     3634    15031    4       IF J = CHAR_SIZE
     3635    15032    4         THEN GOTO RET;
     3636    15033            /*
     3637    15034              Parse number of minutes.
     3638    15035            */
     3639    15036    4       CALL CVT_MI ALTRET( E_BAD_DATE_MI );
     3640    15037    4       J = J + LEN;
     3641    15038    4       IF J >= CHAR_SIZE
     3642    15039    4         THEN GOTO RET;
     3643    15040    4       IF SUBSTR( CHARS, J, 1 ) ~= ':'
     3644    15041    4         THEN GOTO RET;
     3645    15042    4       J = J + 1;
     3646    15043    4       IF J = CHAR_SIZE
     3647    15044    4         THEN GOTO RET;
     3648    15045            /*
     3649    15046              Parse number of seconds.
     3650    15047            */
     3651    15048    4       CALL CVT_SS ALTRET( E_BAD_DATE_S );
     3652    15049    4       J = J + LEN;
     3653    15050    4       IF J >= CHAR_SIZE
     3654    15051    4         THEN GOTO RET;
     3655    15052    4       IF SUBSTR( CHARS, J, 1 ) ~= '.'
     3656    15053    4         THEN GOTO RET;
     3657    15054    4       J = J + 1;
     3658    15055    4       IF J = CHAR_SIZE
     3659    15056    4         THEN GOTO RET;
     3660    15057            /*
     3661    15058              Parse number of clock tics.
     3662    15059            */
     3663    15060    4       CALL CVT_TT ALTRET( E_BAD_DATE_T );
     3664    15061    4       J = J + LEN;
     3665    15062
     3666    15063    4   END PARSE_DATE;
     3667    15064
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:120  
     3668    15065    3   END CVT_FROM_DEFAULT;
     3669    15066
     3670    15067    2   END CVT_FROM_CHAR;
     3671    15068        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:121  
     3672    15069        /******************************************************************************/
     3673    15070        /*F*
     3674    15071        NAME:   GET_CURRENT_UTS
     3675    15072        PURPOSE:
     3676    15073                Get the current timestamp from the operating system.
     3677    15074        */
     3678    15075        /*D*
     3679    15076        NAME:   GET_CURRENT_UTS
     3680    15077        CALL:
     3681    15078                CALL GET_CURRENT_UTS ALTRET( error );
     3682    15079        OUTPUT:
     3683    15080                UTS - System timestamp as a UTS.
     3684    15081        INTERFACE:
     3685    15082                M$TIME
     3686    15083        DESCRIPTION:
     3687    15084                This routine is called for the entry points that return the
     3688    15085                system clock time.
     3689    15086        */
     3690    15087        /******************************************************************************/
     3691    15088
     3692    15089    1   GET_CURRENT_UTS: PROC ALTRET;
     3693    15090
     3694    15091    2       TIMESPAN = %XUD#NO;
     3695    15092
     3696    15093    2       FPT@TIME = FPT_TIME_C;
     3697    15094    2       FPT@TIME.V_ = VECTOR( FPT@TIME.V );
     3698    15095    2       FPT@TIME.TSTAMP_ = VECTOR( UTS );
     3699    15096    2       FPT@TIME.V.DEST# = XUD_PARAM.UTS_TYPE;
     3700    15097    2       CALL M$TIME( FPT@TIME );
     3701    15098
     3702    15099    2       RETURN;
     3703    15100
     3704    15101    2   END GET_CURRENT_UTS;
     3705    15102        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:122  
     3706    15103        /******************************************************************************/
     3707    15104        /*F*
     3708    15105        NAME:   FROM_UTS
     3709    15106        PURPOSE:
     3710    15107                Convert a UTS into days and tics.
     3711    15108        */
     3712    15109        /*D*
     3713    15110        NAME:   FROM_UTS
     3714    15111        CALL:
     3715    15112                CALL FROM_UTS;
     3716    15113        INPUT:
     3717    15114                UTS - The UTS to be converted.
     3718    15115        OUTPUT:
     3719    15116                DAYS - The number of days since Jan. 1, 1 AD.
     3720    15117                TICS - The number of clock tics into the day.
     3721    15118        INTERFACE:
     3722    15119                XUD$UTS_DIFF_25TH
     3723    15120                XUD$UTS_DIFF
     3724    15121                XUD$UTS_ADJ_25TH
     3725    15122        DESCRIPTION:
     3726    15123                Get the number of days out of the UTS, convert it back to a
     3727    15124                UTS (rounded to days), and then TICS is the difference between
     3728    15125                the two.
     3729    15126        */
     3730    15127        /******************************************************************************/
     3731    15128
     3732    15129    1   FROM_UTS: PROC;
     3733    15130
     3734    15131    2       DCL UTS_IN_DAYS UBIN;
     3735    15132    2       DCL DAYS_IN_25THS UBIN;
     3736    15133
     3737    15134    2       CALL XUD$UTS_DIFF_25TH (DAYS_IN_25THS, UTS, 0);
     3738    15135    2       DAYS = DAYS_IN_25THS / %UTS_25TH_DAY#;
     3739    15136    2       CALL XUD$UTS_ADJ_25TH (UTS_IN_DAYS, 0, DAYS * %UTS_25TH_DAY#);
     3740    15137    2       CALL XUD$UTS_DIFF (TICS, UTS, UTS_IN_DAYS);
     3741    15138    2       IF NOT TIMESPAN
     3742    15139    2       THEN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:123  
     3743    15140    2           DAYS = DAYS + %XUD#UTS_BASE;
     3744    15141    2       RETURN;
     3745    15142
     3746    15143    2   END FROM_UTS;
     3747    15144        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:124  
     3748    15145        /******************************************************************************/
     3749    15146        /*F*
     3750    15147        NAME:   CHK4SFX
     3751    15148        PURPOSE:
     3752    15149                Check for date/time suffix in a character string.
     3753    15150        */
     3754    15151        /*D*
     3755    15152        NAME:   CHK4SFX
     3756    15153        CALL:
     3757    15154                CALL CHK4SFX;
     3758    15155        INPUT:
     3759    15156                J - Current index into string.
     3760    15157                TEMP_CHARS - Character string to search (xlated to uppercase).
     3761    15158        OUTPUT:
     3762    15159                IDX - Returns code for suffix found.
     3763    15160                LEN - Length of suffix found (zero if none).
     3764    15161        INTERFACE:
     3765    15162                None.
     3766    15163        DESCRIPTION:
     3767    15164                This routine checks for a date (AD or BC) or time (AM or PM)
     3768    15165                suffix (with or without periods after each letter) at the
     3769    15166                specified offset in the character string being parsed.  It sets
     3770    15167                a code indicating the suffix found, if any, and its length.
     3771    15168        */
     3772    15169        /******************************************************************************/
     3773    15170
     3774    15171    1   CHK4SFX: PROC;
     3775    15172
     3776    15173    2       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));
     3777    15174    2       IF SUBSTR( TEMP_CHARS , J+LEN , 6 ) = 'B.C.E.'
     3778    15175    3       THEN DO;
     3779    15176    3           JUNK = 6;
     3780    15177    3           IDX = %XUD#SFX_B_C_E;
     3781    15178    3       END;
     3782    15179    3       ELSE DO;
     3783    15180    3           JUNK = 4;
     3784    15181    4           DO SELECT( SUBSTR( TEMP_CHARS, J+LEN, 4 ));
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:125  
     3785    15182    4           SELECT( 'A.D.' );
     3786    15183    4               IDX = %XUD#SFX_A_D;
     3787    15184    4           SELECT( 'B.C.' );
     3788    15185    4               IDX = %XUD#SFX_B_C;
     3789    15186    4           SELECT( 'C.E.' );
     3790    15187    4               IDX = %XUD#SFX_C_E;
     3791    15188    4           SELECT( 'A.M.' );
     3792    15189    4               IDX = %XUD#SFX_A_M;
     3793    15190    4           SELECT( 'P.M.' );
     3794    15191    4               IDX = %XUD#SFX_P_M;
     3795    15192    4           SELECT( ELSE );
     3796    15193    4               IF SUBSTR( TEMP_CHARS , J+LEN , 3 ) = 'BCE'
     3797    15194    5               THEN DO;
     3798    15195    5                   JUNK = 3;
     3799    15196    5                   IDX = %XUD#SFX_BCE;
     3800    15197    5               END;
     3801    15198    5               ELSE DO;
     3802    15199    5                   JUNK = 2;
     3803    15200    6                   DO SELECT( SUBSTR( TEMP_CHARS, J+LEN, 2 ));
     3804    15201    6                   SELECT( 'AD' );
     3805    15202    6                       IDX = %XUD#SFX_AD;
     3806    15203    6                   SELECT( 'BC' );
     3807    15204    6                       IDX = %XUD#SFX_BC;
     3808    15205    6                   SELECT( 'CE' );
     3809    15206    6                       IDX = %XUD#SFX_CE;
     3810    15207    6                   SELECT( 'AM' );
     3811    15208    6                       IDX = %XUD#SFX_AM;
     3812    15209    6                   SELECT( 'PM' );
     3813    15210    6                       IDX = %XUD#SFX_PM;
     3814    15211    6                   SELECT( ELSE );
     3815    15212    6                       IDX = %XUD#SFX_NONE;
     3816    15213    6                       RETURN ;
     3817    15214    6                   END/*SELECT*/;
     3818    15215    5               END;
     3819    15216    4           END/*SELECT*/;
     3820    15217    3       END;
     3821    15218    2       LEN = LEN + JUNK ;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:126  
     3822    15219    2       RETURN;
     3823    15220
     3824    15221    2   END CHK4SFX;
     3825    15222        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:127  
     3826    15223        /******************************************************************************/
     3827    15224        /*F*
     3828    15225        NAME:   RSEARCH
     3829    15226        PURPOSE:
     3830    15227                Avoid hardware glitch with SEARCHR.
     3831    15228        */
     3832    15229        /*D*
     3833    15230        NAME:   RSEARCH
     3834    15231        CALL:
     3835    15232                CALL RSEARCH ALTRET( all-blank );
     3836    15233        INPUT:
     3837    15234                CHAR_SIZE - The number of characters in the string to be searched.
     3838    15235                CHARS - The character string to be searched.
     3839    15236        OUTPUT:
     3840    15237                CHAR_SIZE - Adjusted to disregard trailing blanks.
     3841    15238        DESCRIPTION:
     3842    15239                The hardware may trap on a TCTR instruction that accesses the
     3843    15240                first doubleword of a segment that is not doubleword aligned.
     3844    15241                To avoid this, a SEARCHR call can only be used to scan the
     3845    15242                portion of the string after the first seven characters.  If
     3846    15243                a non-blank has not been found, the leading characters must be
     3847    15244                examined one by one.
     3848    15245
     3849    15246                This mainly (or solely) affects ARES, which uses a separate
     3850    15247                $PSn descriptor to frame each of its parameters.
     3851    15248        */
     3852    15249        /******************************************************************************/
     3853    15250
     3854    15251    1   RSEARCH: PROC ALTRET ;
     3855    15252
     3856    15253    2       IF CHAR_SIZE > 7
     3857    15254    3       THEN DO;
     3858    15255    3           CALL SEARCHR( CHAR_SIZE , JUNK , B$SR_NON_BLANK , SUBSTR( CHARS , 7 ))
     3859    15256    4           WHENRETURN DO;
     3860    15257    4               CHAR_SIZE = CHAR_SIZE + 8 ;
     3861    15258    4               RETURN ;
     3862    15259    4           END/*WHEN*/;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:128  
     3863    15260    3           CHAR_SIZE = 7 ;
     3864    15261    3       END;
     3865    15262    3       DO WHILE SUBSTR( CHARS , CHAR_SIZE - 1 , 1 ) = %XUD#BLANK ;
     3866    15263    3           CHAR_SIZE = CHAR_SIZE - 1 ;
     3867    15264    3           IF CHAR_SIZE = 0
     3868    15265    3           THEN
     3869    15266    3               ALTRETURN ;
     3870    15267    3       END/*WHILE*/;
     3871    15268    2       RETURN ;
     3872    15269
     3873    15270    2   END RSEARCH ;
     3874    15271
     3875    15272    1   END XUD$CVT_DATE ;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:129  
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   XUD_PICTURE_M.:E05TOU  is referenced.
   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   XU_PERR_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XUD$CVT_DATE.

   Procedure XUD$CVT_DATE requires 4324 words for executable code.
   Procedure XUD$CVT_DATE requires 116 words of local(AUTO) storage.

    No errors detected in file XUD$CVT_DATE.:E05TSI    .

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:130  

 Object Unit name= XUD$CVT_DATE                               File name= XUD$CVT_DATE.:E05TOU
 UTS= JUL 30 '97 09:11:29.36 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS    199    307  XUD$CVT_DATE
    2   Proc  even  none  4324  10344  XUD$CVT_DATE
    3  RoData even  none    29     35  XUD$CVT_DATE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        3  XUD$CVT_DATE
     2     12          yes     yes      Std        3  XUD$INIT_PIC
     2   1642          yes     yes      Std        3  XUD$CHAR_UTS
     2   1750          yes     yes      Std        3  XUD$CHAR_DATE
     2   2033          yes     yes      Std        3  XUD$UTS_CHAR
     2   2056          yes     yes      Std        3  XUD$DATE_CHAR
     2   2105          yes     yes      Std        3  XUD$DATE_UTS
     2   2130          yes     yes      Std        3  XUD$UTS_DATE
     2   2160          yes     yes      Std        2  XUD$CLOCK_UTS
     2   2171          yes     yes      Std        2  XUD$CLOCK_DATE
     2   2212          yes     yes      Std        2  XUD$CLOCK_CHAR
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:131  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       3 XUD$UTS_ADJ_25TH
 yes     yes           Std       3 XUD$TO_DATE
 yes     yes           Std       3 XUD$FROM_DATE
 yes     yes           Std       3 XUD$UTS_ADJUST
 yes     yes           Std       3 XUD$UTS_DIFF_25TH
 yes     yes           Std       3 XUD$UTS_DIFF
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    B$SR_NON_BLANK$                  r    B$SR_NON_ZERO$
r    B$SR_NON_ALPHA$                  r    B$SR_NON_DEC$                    r    B$XL_LOWER_UR$
r    B$XL_UPPER_UR$                        B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:132  


        1        1        /*M* XUD$CVT_DATE - Date conversion service routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* NO */
        8        8
        9        9        /******************************************************************************/
       10       10        /*P*
       11       11        NAME:   XUD$CVT_DATE
       12       12        PURPOSE:
       13       13                Date conversion service routines.
       14       14        DESCRIPTION:
       15       15                This set of library service routines converts
       16       16                dates and times from character to DATE or UTS values, and vice versa.
       17       17                Conversion between DATE and UTS is also supported.  Additional
       18       18                entry points return the current system time in any desired
       19       19                form, and initialize date/time pictures.
       20       20
       21       21                There is a separate entry point for each type of conversion
       22       22                supported.  The routine names are of the form "XUD$from_to".  All
       23       23                routines use a standard parameter block, described by the XUD_PARAM
       24       24                macro.
       25       25
       26       26                The file contains the following routines:
       27       27
       28       28                XUD$CVT_DATE - Dummy procedure header.
       29       29                XUD$INIT_PIC(*) - Initialize a date/time picture.
       30       30                XUD$CHAR_UTS(*) - Convert from character to UTS.
       31       31                XUD$CHAR_DATE(*) - Convert from character to DATE.
       32       32                XUD$UTS_CHAR(*) - Convert from UTS to character.
       33       33                XUD$DATE_CHAR(*) - Convert from DATE to character.
       34       34                XUD$DATE_UTS(*) - Convert from DATE to UTS.
       35       35                XUD$UTS_DATE(*) - Convert from UTS to DATE.
       36       36                XUD$CLOCK_UTS(*) - Returns current timestamp as a UTS.
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:133  
       37       37                XUD$CLOCK_DATE(*) - Returns current timestamp as a DATE.
       38       38                XUD$CLOCK_CHAR(*) - Returns current timestamp in character.
       39       39                    SETUP_CHARS_IN - Initialize an input string operand.
       40       40                    SETUP_CHARS_OUT(*) - Initialize an output string operand.
       41       41                    SETUP_PICTURE - Get an initialized picture for use in conversion.
       42       42                    CVT_TO_CHAR - Convert from binary to character date.
       43       43                        CHECK_SIZE - Check for string overflow.
       44       44                        SET_LEN_1OR2 - Set length for zero-suppressed subfield.
       45       45                        CVT_FROM_NUM - Convert binary subfield to character.
       46       46                        MOVE_ALPHA - Move alphabetic subfield into result.
       47       47                        CVT_TO_SPAN - Convert binary timespan to character.
       48       48                    CVT_FROM_CHAR - Convert from character to binary date.
       49       49                        CVT_XX - Dummy procedure for subfield conversion routines.
       50       50                        CVT_YY(*) - Convert YY from character to binary.
       51       51                        CVT_MO(*) - Convert MM from character to binary.
       52       52                        CVT_DD(*) - Convert DD from character to binary.
       53       53                        CVT_MMM(*) - Convert MMM from character to binary.
       54       54                        CVT_WWW(*) - Convert WWW from character to binary.
       55       55                        CVT_SWITCH(*) - Parse date/time switch in character string.
       56       56                        CVT_HH(*) - Convert HH from character to binary.
       57       57                        CVT_MI(*) - Convert MM from character to binary.
       58       58                        CVT_SS(*) - Convert SS from character to binary.
       59       59                        CVT_TT(*) - Convert TT from character to binary.
       60       60                        CVT_TO_NUM - Convert numeric substring to binary.
       61       61                        CVT_1ST_NUM(*) - Convert first timespan subfield to binary.
       62       62                        GET_CURRENT_YEAR - Get current year from the operating system.
       63       63                        CVT_FROM_DEFAULT - Convert from character using default rules.
       64       64                            PARSE_DATE - Convert date using default rules.
       65       65                            PARSE_TIME(*) - Convert time using default rules.
       66       66                                CHK4END - Check for end of time using default rules.
       67       67                            PARSE_SPAN(*) - Convert timespan using default rules.
       68       68                    FROM_UTS - Convert UTS to days and tics.
       69       69                    CHK4SFX - Check for date/time suffix.
       70       70                    RSEARCH - Call SEARCHR so as to avoid hardware glitch.
       71       71
       72       72                (*) indicates an entry point in the preceeding procedure.
       73       73        */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:134  
       74       74        /******************************************************************************/
       75       75
       76       76        XUD$CVT_DATE: PROC( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;

     76  2 000000   000000 700200 xent  XUD$CVT_DATE TSX0  ! X66_AUTO_3
         2 000001   000164 000003                    ZERO    116,3

       77       77
       78       78        %INCLUDE CP_6;
       79     5637        %INCLUDE CP_6_SUBS;
       80     6177        %INCLUDE XU_MACRO_C;
       81     9283        %INCLUDE XU_PERR_C;
       82     9474        %INCLUDE B$TABLES_C;
       83     9582            %B$SR_NON_BLANK;
       84     9586            %B$SR_NON_ZERO;
       85     9590            %B$SR_NON_ALPHA;
       86     9594            %B$SR_NON_DEC;
       87     9598            %B$XL_LOWER_UR;
       88     9602            %B$XL_UPPER_UR;
       89     9606
       90     9607        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:135  
       91     9608        %LIST;
       92     9609        %INCLUDE XUD_PICTURE_M;
        1+    9610        /*M* XUD_PICTURE_M - Macros for internal use by date conversion services */
        2+    9611        /*T***********************************************************/
        3+    9612        /*T*                                                         */
        4+    9613        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+    9614        /*T*                                                         */
        6+    9615        /*T***********************************************************/
        7+    9616        /*X* NO */
        8+    9617
        9+    9618        /******************************************************************************/
       10+    9619        /*P*
       11+    9620        NAME:   XUD_PICTURE_M
       12+    9621        PURPOSE:
       13+    9622                Preprocessor definitions for internal date/time pictures.
       14+    9623        DESCRIPTION:
       15+    9624                This file contains EQUs for the internal date/time picture codes
       16+    9625                and other preprocessor definitions for internal pictures validation.
       17+    9626                These definitions are not normally needed by users of the date/time
       18+    9627                conversion services, but they are available for use by programs
       19+    9628                (such as XARGENT) that require special handling of pictures.
       20+    9629        */
       21+    9630        /******************************************************************************/
       22+    9631
       23+    9632        /****** Time conversion factors
       24+    9633        */
       25+    9634        %EQU XUD#TICS_SEC = 100;
       26+    9635        %EQU XUD#TICS_MIN = 6000;
       27+    9636        %EQU XUD#TICS_HOUR = 360000;
       28+    9637        %EQU XUD#TICS_DAY = 8640000;
       29+    9638
       30+    9639        %EQU XUD#SECS_MIN = 60;
       31+    9640        %EQU XUD#SECS_HOUR = 3600;
       32+    9641        %EQU XUD#SECS_DAY = 86400;
       33+    9642
       34+    9643        %EQU XUD#MINS_HOUR = 60;
       35+    9644        %EQU XUD#MINS_DAY = 1440;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:136  
       36+    9645
       37+    9646        %EQU XUD#HOURS_DAY = 24;
       38+    9647
       39+    9648        %EQU XUD#UTS_BASE = 722084;
       40+    9649        /*   XUD#UTS_BASE = ((365.25 * 1976) + 365 - 15)
       41+    9650        */
       42+    9651        %EQU XUD#UTS_LIMIT = 730036;
       43+    9652        /*   XUD#UTS_LIMIT = XUD#UTS_BASE + FLOOR( 2**36 / XUD#TICS_DAY )
       44+    9653        */
       45+    9654
       46+    9655        /****** Miscellaneous EQUs
       47+    9656        */
       48+    9657        %EQU XUD#PICTYPE_UNDEF = ' ';
       49+    9658        %EQU XUD#PICTYPE_DATE = 'D';
       50+    9659        %EQU XUD#PICTYPE_TIME = 'T';
       51+    9660
       52+    9661        %EQU XUD#SFX_NONE = 0;
       53+    9662        %EQU XUD#SFX_AD = 1;
       54+    9663        %EQU XUD#SFX_A_D = 2;
       55+    9664        %EQU XUD#SFX_BC = 3;
       56+    9665        %EQU XUD#SFX_B_C = 4;
       57+    9666        %EQU XUD#SFX_AM = 5;
       58+    9667        %EQU XUD#SFX_A_M = 6;
       59+    9668        %EQU XUD#SFX_PM = 7;
       60+    9669        %EQU XUD#SFX_P_M = 8;
       61+    9670        %EQU XUD#SFX_CE = 9;
       62+    9671        %EQU XUD#SFX_C_E = 10;
       63+    9672        %EQU XUD#SFX_BCE = 11;
       64+    9673        %EQU XUD#SFX_B_C_E = 12;
       65+    9674
       66+    9675        %EQU XUD#YES = '1'B;
       67+    9676        %EQU XUD#NO = '0'B;
       68+    9677        %EQU XUD#BLANK = ' ';
       69+    9678
       70+    9679        /****** EQUs for date and time subfield codes
       71+    9680        */
       72+    9681        %EQU XUD#P_BASE         = BITBIN( '400'O );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:137  
       73+    9682
       74+    9683        %EQU XUD#P_SWITCH       = XUD#P_BASE;
       75+    9684
       76+    9685        %EQU XUD#P_DATE_Y1      = BITBIN( '401'O );
       77+    9686        %EQU XUD#P_DATE_Y2      = BITBIN( '402'O );
       78+    9687        %EQU XUD#P_DATE_Y4      = BITBIN( '403'O );
       79+    9688        %EQU XUD#P_DATE_Y5      = BITBIN( '404'O );
       80+    9689        %EQU XUD#P_DATE_M1      = BITBIN( '405'O );
       81+    9690        %EQU XUD#P_DATE_M2      = BITBIN( '406'O );
       82+    9691        %EQU XUD#P_DATE_M3UC    = BITBIN( '407'O );
       83+    9692        %EQU XUD#P_DATE_M3IC    = BITBIN( '410'O );
       84+    9693        %EQU XUD#P_DATE_M3LC    = BITBIN( '411'O );
       85+    9694        %EQU XUD#P_DATE_M4UC    = BITBIN( '412'O );
       86+    9695        %EQU XUD#P_DATE_M4IC    = BITBIN( '413'O );
       87+    9696        %EQU XUD#P_DATE_M4LC    = BITBIN( '414'O );
       88+    9697        %EQU XUD#P_DATE_D1      = BITBIN( '415'O );
       89+    9698        %EQU XUD#P_DATE_D2      = BITBIN( '416'O );
       90+    9699        %EQU XUD#P_DATE_W1UC    = BITBIN( '417'O );
       91+    9700        %EQU XUD#P_DATE_W1IC    = BITBIN( '420'O );
       92+    9701        %EQU XUD#P_DATE_W1LC    = BITBIN( '421'O );
       93+    9702        %EQU XUD#P_DATE_W2UC    = BITBIN( '422'O );
       94+    9703        %EQU XUD#P_DATE_W2IC    = BITBIN( '423'O );
       95+    9704        %EQU XUD#P_DATE_W2LC    = BITBIN( '424'O );
       96+    9705        %EQU XUD#P_DATE_W3UC    = BITBIN( '425'O );
       97+    9706        %EQU XUD#P_DATE_W3IC    = BITBIN( '426'O );
       98+    9707        %EQU XUD#P_DATE_W3LC    = BITBIN( '427'O );
       99+    9708        %EQU XUD#P_DATE_W4UC    = BITBIN( '430'O );
      100+    9709        %EQU XUD#P_DATE_W4IC    = BITBIN( '431'O );
      101+    9710        %EQU XUD#P_DATE_W4LC    = BITBIN( '432'O );
      102+    9711        %EQU XUD#P_DATE_Q       = BITBIN( '433'O );
      103+    9712        %EQU XUD#P_DATE_J1      = BITBIN( '434'O );
      104+    9713        %EQU XUD#P_DATE_J3      = BITBIN( '435'O );
      105+    9714        %EQU XUD#P_DATE_AD      = BITBIN( '436'O );
      106+    9715        %EQU XUD#P_DATE_A_D     = BITBIN( '437'O );
      107+    9716        %EQU XUD#P_DATE_BC      = BITBIN( '440'O );
      108+    9717        %EQU XUD#P_DATE_B_C     = BITBIN( '441'O );
      109+    9718        %EQU XUD#P_DATE_CE      = BITBIN( '442'O );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:138  
      110+    9719        %EQU XUD#P_DATE_C_E     = BITBIN( '443'O );
      111+    9720        %EQU XUD#P_DATE_BCE     = BITBIN( '444'O );
      112+    9721        %EQU XUD#P_DATE_B_C_E   = BITBIN( '445'O );
      113+    9722
      114+    9723        %EQU XUD#P_TIME_BASE    = BITBIN( '453'O );
      115+    9724
      116+    9725        %EQU XUD#P_TIME_D3      = BITBIN( '453'O );
      117+    9726        %EQU XUD#P_TIME_H3      = BITBIN( '454'O );
      118+    9727        %EQU XUD#P_TIME_M3      = BITBIN( '455'O );
      119+    9728        %EQU XUD#P_TIME_S3      = BITBIN( '456'O );
      120+    9729        %EQU XUD#P_TIME_T3      = BITBIN( '457'O );
      121+    9730        %EQU XUD#P_TIME_H1      = BITBIN( '460'O );
      122+    9731        %EQU XUD#P_TIME_H1A     = BITBIN( '461'O );
      123+    9732        %EQU XUD#P_TIME_H2      = BITBIN( '462'O );
      124+    9733        %EQU XUD#P_TIME_H2A     = BITBIN( '463'O );
      125+    9734        %EQU XUD#P_TIME_M1      = BITBIN( '464'O );
      126+    9735        %EQU XUD#P_TIME_M2      = BITBIN( '465'O );
      127+    9736        %EQU XUD#P_TIME_S1      = BITBIN( '466'O );
      128+    9737        %EQU XUD#P_TIME_S2      = BITBIN( '467'O );
      129+    9738        %EQU XUD#P_TIME_T1      = BITBIN( '470'O );
      130+    9739        %EQU XUD#P_TIME_T2      = BITBIN( '471'O );
      131+    9740        %EQU XUD#P_TIME_APM     = BITBIN( '472'O );
      132+    9741        %EQU XUD#P_TIME_AP_M    = BITBIN( '473'O );
      133+    9742
      134+    9743        %EQU XUD#P_LIMIT        = BITBIN( '477'O );
      135+    9744        %EQU XUD#P_MAX          = XUD#P_LIMIT - XUD#P_BASE;
      136+    9745
      137+    9746        /****** Flags for subfield duplication checks.
      138+    9747        */
      139+    9748        %EQU XUD#USED_Y     = '400000'O;
      140+    9749        %EQU XUD#USED_MO    = '200000'O;
      141+    9750        %EQU XUD#USED_D     = '100002'O;
      142+    9751        %EQU XUD#USED_J     = '300002'O;
      143+    9752        %EQU XUD#USED_W     = '040000'O;
      144+    9753        %EQU XUD#USED_ADBC  = '020000'O;
      145+    9754        %EQU XUD#USED_Q     = '300000'O;
      146+    9755        %EQU XUD#USED_H     = '004000'O;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:139  
      147+    9756        %EQU XUD#USED_MI    = '002000'O;
      148+    9757        %EQU XUD#USED_S     = '001000'O;
      149+    9758        %EQU XUD#USED_T     = '000400'O;
      150+    9759        %EQU XUD#USED_AMPM  = '000200'O;
      151+    9760
      152+    9761        %EQU XUD#USED_DAY   = '000002'O;
      153+    9762        %EQU XUD#USED_YYY   = '000001'O;
      154+    9763
      155+    9764        /****** Table to detect adjacent picture codes that would be ambiguous
      156+    9765        */
      157+    9766        %EQU XUD#PV_ALPHA    = 1;    /* Alphabetic              */
      158+    9767        %EQU XUD#PV_NUM_F    = 2;    /* Fixed size number       */
      159+    9768        %EQU XUD#PV_NUM_V    = 3;    /* Variable size number    */
      160+    9769
      161+    9770        %MACRO XUD_VALID;
      162+    9771
      163+    9772        DCL XUD_VALID ( 0:%XUD#P_MAX ) UBIN BYTE CALIGNED CONSTANT INIT(
      164+    9773            0,              /* UNUSED           */
      165+    9774            %XUD#PV_NUM_F,  /* XUD#P_DATE_Y1    */
      166+    9775            %XUD#PV_NUM_F,  /* XUD#P_DATE_Y2    */
      167+    9776            %XUD#PV_NUM_V,  /* XUD#P_DATE_Y4    */
      168+    9777            %XUD#PV_NUM_V,  /* XUD#P_DATE_Y5    */
      169+    9778            %XUD#PV_NUM_V,  /* XUD#P_DATE_M1    */
      170+    9779            %XUD#PV_NUM_F,  /* XUD#P_DATE_M2    */
      171+    9780            %XUD#PV_ALPHA,  /* XUD#P_DATE_M3UC  */
      172+    9781            %XUD#PV_ALPHA,  /* XUD#P_DATE_M3IC  */
      173+    9782            %XUD#PV_ALPHA,  /* XUD#P_DATE_M3LC  */
      174+    9783            %XUD#PV_ALPHA,  /* XUD#P_DATE_M4UC  */
      175+    9784            %XUD#PV_ALPHA,  /* XUD#P_DATE_M4IC  */
      176+    9785            %XUD#PV_ALPHA,  /* XUD#P_DATE_M4LC  */
      177+    9786            %XUD#PV_NUM_V,  /* XUD#P_DATE_D1    */
      178+    9787            %XUD#PV_NUM_F,  /* XUD#P_DATE_D2    */
      179+    9788            %XUD#PV_ALPHA,  /* XUD#P_DATE_W1UC  */
      180+    9789            %XUD#PV_ALPHA,  /* XUD#P_DATE_W1IC  */
      181+    9790            %XUD#PV_ALPHA,  /* XUD#P_DATE_W1LC  */
      182+    9791            %XUD#PV_ALPHA,  /* XUD#P_DATE_W2UC  */
      183+    9792            %XUD#PV_ALPHA,  /* XUD#P_DATE_W2IC  */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:140  
      184+    9793            %XUD#PV_ALPHA,  /* XUD#P_DATE_W2LC  */
      185+    9794            %XUD#PV_ALPHA,  /* XUD#P_DATE_W3UC  */
      186+    9795            %XUD#PV_ALPHA,  /* XUD#P_DATE_W3IC  */
      187+    9796            %XUD#PV_ALPHA,  /* XUD#P_DATE_W3LC  */
      188+    9797            %XUD#PV_ALPHA,  /* XUD#P_DATE_W4UC  */
      189+    9798            %XUD#PV_ALPHA,  /* XUD#P_DATE_W4IC  */
      190+    9799            %XUD#PV_ALPHA,  /* XUD#P_DATE_W4LC  */
      191+    9800            %XUD#PV_NUM_F,  /* XUD#P_DATE_Q     */
      192+    9801            %XUD#PV_NUM_V,  /* XUD#P_DATE_J1    */
      193+    9802            %XUD#PV_NUM_F,  /* XUD#P_DATE_J3    */
      194+    9803            %XUD#PV_ALPHA,  /* XUD#P_DATE_AD    */
      195+    9804            %XUD#PV_ALPHA,  /* XUD#P_DATE_A_D   */
      196+    9805            %XUD#PV_ALPHA,  /* XUD#P_DATE_BC    */
      197+    9806            %XUD#PV_ALPHA,  /* XUD#P_DATE_B_C   */
      198+    9807            %XUD#PV_ALPHA,  /* XUD#P_DATE_CE    */
      199+    9808            %XUD#PV_ALPHA,  /* XUD#P_DATE_C_E   */
      200+    9809            %XUD#PV_ALPHA,  /* XUD#P_DATE_BCE   */
      201+    9810            %XUD#PV_ALPHA,  /* XUD#P_DATE_B_C_E */
      202+    9811            0 * 5,          /* RESERVED         */
      203+    9812            %XUD#PV_NUM_V,  /* XUD#P_TIME_D3    */
      204+    9813            %XUD#PV_NUM_V,  /* XUD#P_TIME_H3    */
      205+    9814            %XUD#PV_NUM_V,  /* XUD#P_TIME_M3    */
      206+    9815            %XUD#PV_NUM_V,  /* XUD#P_TIME_S3    */
      207+    9816            %XUD#PV_NUM_V,  /* XUD#P_TIME_T3    */
      208+    9817            %XUD#PV_NUM_V,  /* XUD#P_TIME_H1    */
      209+    9818            %XUD#PV_NUM_V,  /* XUD#P_TIME_H1A   */
      210+    9819            %XUD#PV_NUM_F,  /* XUD#P_TIME_H2    */
      211+    9820            %XUD#PV_NUM_F,  /* XUD#P_TIME_H2A   */
      212+    9821            %XUD#PV_NUM_V,  /* XUD#P_TIME_M1    */
      213+    9822            %XUD#PV_NUM_F,  /* XUD#P_TIME_M2    */
      214+    9823            %XUD#PV_NUM_V,  /* XUD#P_TIME_S1    */
      215+    9824            %XUD#PV_NUM_F,  /* XUD#P_TIME_S2    */
      216+    9825            %XUD#PV_NUM_V,  /* XUD#P_TIME_T1    */
      217+    9826            %XUD#PV_NUM_F,  /* XUD#P_TIME_T2    */
      218+    9827            %XUD#PV_ALPHA,  /* XUD#P_TIME_APM   */
      219+    9828            %XUD#PV_ALPHA,  /* XUD#P_TIME_AP_M  */
      220+    9829            0 * 4 );        /* RESERVED         */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:141  
      221+    9830
      222+    9831        %MEND;
      223+    9832        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:142  
      224+    9833        /********** Layout of table to hold month and weekday text
      225+    9834        */
      226+    9835        %MACRO XUD$WORK( STCLASS=BASED );
      227+    9836
      228+    9837        DCL 1 XUD$WORK STCLASS,
      229+    9838            2 M_INIT BIT( 1 ) UNAL,
      230+    9839            2 W_INIT BIT( 1 ) UNAL,
      231+    9840            2 * BIT( 16 ) UNAL,
      232+    9841            2 SIZE UBIN HALF HALIGNED,
      233+    9842            2 M$( 0:11 ) PTR,
      234+    9843            2 W$( 0:6 ) PTR,
      235+    9844            2 M_SIZE( 0:11 ) UBIN BYTE CALIGNED,
      236+    9845            2 W_SIZE( 0:6 ) UBIN BYTE CALIGNED,
      237+    9846            2 TEXT CHAR( 300 );
      238+    9847
      239+    9848        %MEND;
       93     9849        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:143  
       94     9850        /****** Parameters
       95     9851        */
       96     9852        %XUD_PARAM( STCLASS=PARAM );
              9853        %LSET LISTDIR = '0'B;
              9865    1   DCL 1 XUD_PARAM PARAM ALIGNED,
              9866    1       2 PIC$ PTR /*(ADDR(NIL))*/,
              9873    1       2 TEXTC BIT(1) UNAL /*('0'B)*/,
              9882    1       2 INIT_PIC BIT(1) UNAL /*('0'B)*/,
              9896    1       2 TIMESPAN BIT(1) UNAL /*('0'B)*/,
              9903    1       2 ASSUME_UTS BIT(1) UNAL /*('0'B)*/,
              9912    1       2 * BIT(4) UNAL /*('0'B)*/,
              9913    1       2 PIC_TEXTC BIT(1) UNAL /*('0'B)*/,
              9923    1       2 PIC_SIZE UBIN BYTE CALIGNED /*(0)*/,
              9931    1       2 SIZE UBIN BYTE CALIGNED /*(0)*/,
              9941    1       2 MAX_SIZE UBIN BYTE CALIGNED /*(0)*/,
              9947    1       2 DATA_SIZE REDEF MAX_SIZE UBIN BYTE CALIGNED,
              9954    1       2 ERR           ALIGNED,
              9959    1           3 FCG BIT(12) UNAL /*('0'B)*/,
              9960    1           3 MID BIT(6) UNAL /*('0'B)*/,
              9961    1           3 MON BIT(1) UNAL /*('0'B)*/,
              9962    1           3 ERR# UBIN(14) UNAL /*(0)*/,
              9963    1           3 SEV UBIN(3) UNAL /*(0)*/,
              9964    1       2 WORK$ PTR /*(ADDR(NIL))*/,
              9984    1       2 * PTR /*(ADDR(NIL))*/,
              9985    1       2 * PTR /*(ADDR(NIL))*/,
              9986    1       2 UTS_TYPE UBIN BYTE CALIGNED /*(0)*/,
              9998    1       2 * UBIN (27) CALIGNED /*(0)*/,
              9999    1       2 * UBIN WORD /*(0)*/;
       97    10001
       98    10002    1   DCL DATA_IN CHAR( 64 ) PARAM;
       99    10003
      100    10004    1   DCL DATA_OUT CHAR( 64 ) PARAM;
      101    10005
      102    10006        /****** Local data
      103    10007        */
      104    10008    1   DCL PICTURE$ PTR;
      105    10009    1   DCL PIC_SIZE SBIN;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:144  
      106    10010    1   DCL 1 PICTURE CALIGNED BASED( PICTURE$ ),
      107    10011    1       2 L UBIN BYTE CALIGNED,
      108    10012    1       2 T CHAR( 63 );
      109    10013
      110    10014    1   DCL CHAR_SIZE SBIN;
      111    10015    1   DCL CHARS$ PTR;
      112    10016    1   DCL CHARS CHAR( CHAR_SIZE ) BASED( CHARS$ );
      113    10017
      114    10018    1   DCL TEMP_CHARS CHAR( 64 );
      115    10019    1   DCL TEMP_PICTURE CHAR( 64 );
      116    10020    1   DCL LIMBO CHAR( 12 );
      117    10021
      118    10022    1   DCL DAYS SBIN;
      119    10023    1   DCL TICS SBIN;
      120    10024    1   DCL UTS UBIN;
      121    10025    1   DCL UTS_CHR4 REDEF UTS CHAR( 4 );
      122    10026
      123    10027    1   DCL 1 FLDS,
      124    10028    1       2 YEAR SBIN,
      125    10029    1       2 MON SBIN,
      126    10030    1       2 DAY SBIN,
      127    10031    1       2 JULIAN SBIN,
      128    10032    1       2 QUARTER SBIN,
      129    10033    1       2 BC BIT( 1 ),
      130    10034    1       2 LEAP_FLAG BIT( 1 ),
      131    10035    1       2 WKDAY_ONLY BIT( 1 ),
      132    10036    1       2 LEAP SBIN,
      133    10037    1       2 WKDAY SBIN,
      134    10038    1       2 HOUR SBIN,
      135    10039    1       2 MIN SBIN,
      136    10040    1       2 SEC SBIN,
      137    10041    1       2 TIC SBIN;
      138    10042
      139    10043    1   DCL I SBIN;
      140    10044    1   DCL J SBIN;
      141    10045    1   DCL IDX SBIN;
      142    10046    1   DCL JUNK UBIN;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:145  
      143    10047    1   DCL LEN SBIN;
      144    10048    1   DCL NUM SBIN;
      145    10049    1   DCL TIMESPAN BIT( 1 );
      146    10050    1   DCL ERR BIT( 36 );
      147    10051
      148    10052        %INCLUDE XUD_UTS_M;
        1+   10053        /*M* XUD_UTS_M Macros for XUD UTS subroutines */
        2+   10054        /*T***********************************************************/
        3+   10055        /*T*                                                         */
        4+   10056        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+   10057        /*T*                                                         */
        6+   10058        /*T***********************************************************/
        7+   10059
        8+   10060        /*F*
        9+   10061        NAME:   XUD$UTS_ENTRIES
       10+   10062
       11+   10063                The XUD$UTS_ENTRIES macro generates entry point definitions
       12+   10064                for all XUD$UTS service routines
       13+   10065        */
       14+   10066
       15+   10067        %MACRO XUD$UTS_ENTRIES;
       16+   10068
       17+   10069        dcl XUD$UTS_DIFF              entry (3) altret;
       18+   10070        /*  Returns difference between UTS1 and UTS2 in centiseconds.
       19+   10071            Usage:  call XUD$UTS_DIFF (INTERVAL, UTS1, UTS2) ...
       20+   10072              INTERVAL  sbin  (OUTPUT)
       21+   10073              UTS1      ubin
       22+   10074              UTS2      ubin  */
       23+   10075
       24+   10076        dcl XUD$UTS_DIFF_SEC          entry (3) altret;
       25+   10077        /*  Returns difference between UTS1 and UTS2 in seconds.
       26+   10078            Usage:  call XUD$UTS_DIFF_SEC (INTERVAL, UTS1, UTS2) ...
       27+   10079              INTERVAL  sbin  (OUTPUT)
       28+   10080              UTS1      ubin
       29+   10081              UTS2      ubin  */
       30+   10082
       31+   10083        dcl XUD$UTS_DIFF_25TH         entry (3) altret;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:146  
       32+   10084        /*  Returns difference between UTS1 and UTS2 in 1/25th second units.
       33+   10085            Usage:  call XUD$UTS_DIFF_25TH (INTERVAL, UTS1, UTS2) ...
       34+   10086              INTERVAL  sbin  (OUTPUT)
       35+   10087              UTS1      ubin
       36+   10088              UTS2      ubin  */
       37+   10089
       38+   10090
       39+   10091        dcl XUD$UTS_ADJUST            entry (3) altret;
       40+   10092        /*  Returns UTS1 computed by adding INTERVAL centiseconds to UTS2
       41+   10093            Usage:  call XUD$UTS_ADJUST (UTS1, UTS2, INTERVAL) ...
       42+   10094              UTS1      ubin  (OUTPUT)
       43+   10095              UTS2      ubin
       44+   10096              INTERVAL  sbin  */
       45+   10097
       46+   10098        dcl XUD$UTS_ADJ_25TH          entry (3) altret;
       47+   10099        /*  Returns UTS1 computed by adding INTERVAL in 1/25ths of a second to UTS2
       48+   10100            Usage:  call XUD$UTS_ADJ_25TH (UTS1, UTS2, INTERVAL) ...
       49+   10101              UTS1      ubin  (OUTPUT)
       50+   10102              UTS2      ubin
       51+   10103              INTERVAL  sbin  */
       52+   10104
       53+   10105        %MEND;                        /* end of XUD$UTS_ENTRIES */
             10105            /* end of XUD$UTS_ENTRIES */
       54+   10106
       55+   10107
       56+   10108        /*F*
       57+   10109        NAME:   XUD_UTS_EQU
       58+   10110
       59+   10111                The XUD_UTS_EQU macro defines the various symbolic constants
       60+   10112                used by the XUD$UTS service routines and their callers.
       61+   10113        */
       62+   10114
       63+   10115        %MACRO XUD_UTS_EQU;
       64+   10116
       65+   10117        %EQU UTS_CUSP# = chartext ('bitbin(''540546215000''o)');
       66+   10118
       67+   10119        %EQU UTS_25TH_SEC# = 25;        /* # 1/25ths of a second in a second */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:147  
       68+   10120        %EQU UTS_25TH_MIN# = 1500;      /* ... a minute */
       69+   10121        %EQU UTS_25TH_HOUR# = 90000;    /* ... an hour */
       70+   10122        %EQU UTS_25TH_DAY# = 2160000;   /* ... a day */
       71+   10123
       72+   10124        %EQU UTS_CSEC_SEC# = 100;       /* # centiseconds in a second */
       73+   10125        %EQU UTS_CSEC_MIN# = 6000;      /* ... a minute */
       74+   10126        %EQU UTS_CSEC_HOUR# = 360000;   /* ... an hour */
       75+   10127        %EQU UTS_CSEC_DAY# = 8640000;   /* ... a day */
       76+   10128
       77+   10129        %MEND;                        /* end of XUD_UTS_EQU */     /* end of XUD_UTS_EQU */
       78+   10130
       79+   10131        /***********************************************************************
       80+   10132         *        End of include file XUD_UTS_M.                               *
       81+   10133         ***********************************************************************/
      149    10134        %XUD$UTS_ENTRIES;
             10135    1   dcl XUD$UTS_DIFF              entry (3) altret;
             10136        /*  Returns difference between UTS1 and UTS2 in centiseconds.
             10137            Usage:  call XUD$UTS_DIFF (INTERVAL, UTS1, UTS2) ...
             10138              INTERVAL  sbin  (OUTPUT)
             10139              UTS1      ubin
             10140              UTS2      ubin  */
             10141    1   dcl XUD$UTS_DIFF_SEC          entry (3) altret;
             10142        /*  Returns difference between UTS1 and UTS2 in seconds.
             10143            Usage:  call XUD$UTS_DIFF_SEC (INTERVAL, UTS1, UTS2) ...
             10144              INTERVAL  sbin  (OUTPUT)
             10145              UTS1      ubin
             10146              UTS2      ubin  */
             10147    1   dcl XUD$UTS_DIFF_25TH         entry (3) altret;
             10148        /*  Returns difference between UTS1 and UTS2 in 1/25th second units.
             10149            Usage:  call XUD$UTS_DIFF_25TH (INTERVAL, UTS1, UTS2) ...
             10150              INTERVAL  sbin  (OUTPUT)
             10151              UTS1      ubin
             10152              UTS2      ubin  */
             10153    1   dcl XUD$UTS_ADJUST            entry (3) altret;
             10154        /*  Returns UTS1 computed by adding INTERVAL centiseconds to UTS2
             10155            Usage:  call XUD$UTS_ADJUST (UTS1, UTS2, INTERVAL) ...
             10156              UTS1      ubin  (OUTPUT)
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:148  
             10157              UTS2      ubin
             10158              INTERVAL  sbin  */
             10159    1   dcl XUD$UTS_ADJ_25TH          entry (3) altret;
             10160        /*  Returns UTS1 computed by adding INTERVAL in 1/25ths of a second to UTS2
             10161            Usage:  call XUD$UTS_ADJ_25TH (UTS1, UTS2, INTERVAL) ...
             10162              UTS1      ubin  (OUTPUT)
             10163              UTS2      ubin
             10164              INTERVAL  sbin  */
      150    10166        %XUD_UTS_EQU;
             10167        %EQU UTS_CUSP# = chartext ('bitbin(''540546215000''o)');
             10168        %EQU UTS_25TH_SEC# = 25;        /* # 1/25ths of a second in a second */
             10169        %EQU UTS_25TH_MIN# = 1500;      /* ... a minute */
             10170        %EQU UTS_25TH_HOUR# = 90000;    /* ... an hour */
             10171        %EQU UTS_25TH_DAY# = 2160000;   /* ... a day */
             10172        %EQU UTS_CSEC_SEC# = 100;       /* # centiseconds in a second */
             10173        %EQU UTS_CSEC_MIN# = 6000;      /* ... a minute */
             10174        %EQU UTS_CSEC_HOUR# = 360000;   /* ... an hour */
             10175        %EQU UTS_CSEC_DAY# = 8640000;   /* ... a day */
      151    10177
      152    10178    1   DCL PIC_CHAR CHAR( 1 );
      153    10179    1   DCL PICID UBIN( 9 );
      154    10180    1   DCL PICTYPE CHAR( 1 );
      155    10181    1   DCL PICID_USED BIT( 18 );
      156    10182    1   DCL PICID_SWITCH BIT( 1 );
      157    10183    1   DCL USED_FLAG BIT( 18 );
      158    10184    1   DCL USED_BEFORE BIT( 18 );
      159    10185    1   DCL PICID_H SBIN;
      160    10186    1   DCL MAXSIZE SBIN;
      161    10187
      162    10188    1   DCL 1 TEXTC CALIGNED BASED,
      163    10189    1       2 L UBIN BYTE CALIGNED,
      164    10190    1       2 T CHAR( TEXTC.L );
      165    10191
      166    10192        /********** External Routines
      167    10193        */
      168    10194    1   DCL XUD$TO_DATE ENTRY( 3 ) ALTRET;
      169    10195    1   DCL XUD$FROM_DATE ENTRY( 3 ) ALTRET;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:149  
      170    10196
      171    10197        /****** Monitor service interface
      172    10198        */
      173    10199        %PLIST;
      174    10200        %FPT_TIME( FPTN=FPT@TIME, STCLASS=AUTO );
      175    10219        %FPT_TIME( FPTN=FPT_TIME_C, STCLASS=CONSTANT,
      176    10220            SOURCE=CLOCK,
      177    10221            DEST=ANS );
      178    10240
      179    10241    1   DCL 1 SYSTEM_DATE,
      180    10242    1       2 YY CHAR( 2 ),
      181    10243    1       2 MM CHAR( 2 ),
      182    10244    1       2 DD CHAR( 2 );
      183    10245    1   DCL SYSTEM_YEAR SBIN;
      184    10246
      185    10247        /****** Constants
      186    10248        */
      187    10249        %XUD_VALID;
      188    10309
      189    10310        %VLP_ERRCODE( FPTN=E_XUD#BAD_SIZE, STCLASS=CONSTANT,
      190    10311            FCG=XU, MID=D, ERR#=%E$XUD#BAD_SIZE );
      191    10356        /*E* ERROR: XUD-E$XUD#BAD_SIZE
      192    10357        MESSAGE: Illegal size for character date.  Legal size is between 1 and 63.
      193    10358        DESCRIPTION: Occurs only on calls for conversion to or from character.
      194    10359                     For conversion to character, XUD_PARAM.SIZE is incorrect.
      195    10360                     For conversion from character, either the string size is
      196    10361                     incorrect or the string is all blank.  In this case, the
      197    10362                     size comes from XUD_PARAM.SIZE if XUD_PARAM.TEXTC=NO, and
      198    10363                     from the count byte of the TEXTC string if XUD_PARAM.TEXTC=YES.
      199    10364        */
      200    10365        %VLP_ERRCODE( FPTN=E_XUD#BAD_PIC_SIZE, STCLASS=CONSTANT,
      201    10366            FCG=XU, MID=D, ERR#=%E$XUD#BAD_PIC_SIZE );
      202    10411        /*E* ERROR: XUD-E$XUD#BAD_PIC_SIZE
      203    10412        MESSAGE: Illegal size for date picture.  Legal size is between 1 and 63.
      204    10413        DESCRIPTION: Occurs only on calls that do picture initialization.
      205    10414                     If XUD_PARAM.PIC_TEXTC=NO, XUD_PARAM.PIC_SIZE is incorrect.
      206    10415                     Otherwise, the count byte of the TEXTC string for the picture
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:150  
      207    10416                     is incorrect.
      208    10417        */
      209    10418        %VLP_ERRCODE( FPTN=E_XUD#OVERFLOW, STCLASS=CONSTANT,
      210    10419            FCG=XU, MID=D, ERR#=%E$XUD#OVERFLOW );
      211    10464        /*E* ERROR: XUD-E$XUD#OVERFLOW
      212    10465        MESSAGE: Date overflow.
      213    10466        DESCRIPTION: Occurs only on calls for conversion from character,
      214    10467                     and for XUD$DATE_UTS.  The value to be converted is too
      215    10468                     large for the target datatype.  The value returned is the
      216    10469                     maximum for that datatype.
      217    10470        */
      218    10471        %VLP_ERRCODE( FPTN=E_XUD#UNDERFLOW, STCLASS=CONSTANT,
      219    10472            FCG=XU, MID=D, ERR#=%E$XUD#UNDERFLOW );
      220    10517        /*E* ERROR: XUD-E$XUD#UNDERFLOW
      221    10518        MESSAGE: Date underflow.
      222    10519        DESCRIPTION: Occurs only on calls for conversion from character,
      223    10520                     and for XUD$DATE_UTS.  The value to be converted is too
      224    10521                     small for the target datatype.  The value returned is the
      225    10522                     minimum for that datatype.
      226    10523        */
      227    10524        %VLP_ERRCODE( FPTN=E_XUD#BAD_PIC, STCLASS=CONSTANT,
      228    10525            FCG=XU, MID=D, ERR#=%E$XUD#BAD_PIC );
      229    10570        /*E* ERROR: XUD-E$XUD#BAD_PIC
      230    10571        MESSAGE: Invalid character in a date/time picture.
      231    10572        MESSAGE1: Characters that are not subfield identifiers and not punctuation
      232    10573                    must be enclosed in (") quotes.
      233    10574        DESCRIPTION: Occurs only on calls that do picture initialization.
      234    10575        */
      235    10576        %VLP_ERRCODE( FPTN=E_XUD#BAD_TIME_PIC, STCLASS=CONSTANT,
      236    10577            FCG=XU, MID=D, ERR#=%E$XUD#BAD_TIME_PIC );
      237    10622        /*E* ERROR: XUD-E$XUD#BAD_TIME_PIC
      238    10623        MESSAGE: Invalid character in a time span picture.
      239    10624        MESSAGE1: Characters that are not subfield identifiers and not punctuation
      240    10625                    must be enclosed in (") quotes.
      241    10626        DESCRIPTION: Occurs only on calls that do picture initialization.
      242    10627                     It is used in place of E$XUD_BAD_PIC when XUD_PARAM.TIMESPAN=YES.
      243    10628        */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:151  
      244    10629        %VLP_ERRCODE( FPTN=E_XUD#BAD_PIC_QUOTE, STCLASS=CONSTANT,
      245    10630            FCG=XU, MID=D, ERR#=%E$XUD#BAD_PIC_QUOTE );
      246    10675        /*E* ERROR: XUD-E$XUD#BAD_PIC_QUOTE
      247    10676        MESSAGE: Unmatched (") quotes in a date/time picture.
      248    10677        DESCRIPTION: Occurs only on calls that do picture initialization.
      249    10678        */
      250    10679        %VLP_ERRCODE( FPTN=E_XUD#LONG_PICID, STCLASS=CONSTANT,
      251    10680            FCG=XU, MID=D, ERR#=%E$XUD#LONG_PICID );
      252    10725        /*E* ERROR: XUD-E$XUD#LONG_PICID
      253    10726        MESSAGE: Too many repetitions of a character in a date/time picture.
      254    10727        DESCRIPTION: Occurs only on calls that do picture initialization.
      255    10728        */
      256    10729        %VLP_ERRCODE( FPTN=E_XUD#RUNON_PICID, STCLASS=CONSTANT,
      257    10730            FCG=XU, MID=D, ERR#=%E$XUD#RUNON_PICID );
      258    10775        /*E* ERROR: XUD-E$XUD#RUNON_PICID
      259    10776        MESSAGE: A date/time picture contains two adjacent alphabetic or
      260    10777                    zero suppressed numeric fields.
      261    10778        DESCRIPTION: Occurs only on calls that do picture initialization.
      262    10779                     This message is used for pictures where conversion to
      263    10780                     character will yield values that cannot be correctly
      264    10781                     parsed by the conversion from character logic.
      265    10782        */
      266    10783        %VLP_ERRCODE( FPTN=E_XUD#AMBIGUOUS_PIC, STCLASS=CONSTANT,
      267    10784            FCG=XU, MID=D, ERR#=%E$XUD#AMBIGUOUS_PIC );
      268    10829        /*E* ERROR: XUD-E$XUD#AMBIGUOUS_PIC
      269    10830        MESSAGE: The picture contains an ambiguous combination of subfields.
      270    10831        DESCRIPTION: Occurs only on calls that do picture initialization.
      271    10832                     The day of week and time of day are only meaningful when
      272    10833                     the picture defines a specific day.  Era is not meaningful
      273    10834                     when the year is derived from the current date.  Year and
      274    10835                     day cannot be specified without the month.
      275    10836        */
      276    10837        %VLP_ERRCODE( FPTN=E_XUD#SHORT_CHAR, STCLASS=CONSTANT,
      277    10838            FCG=XU, MID=D, ERR#=%E$XUD#SHORT_CHAR );
      278    10883        /*E* ERROR: XUD-E$XUD#SHORT_CHAR
      279    10884        MESSAGE: The field for a date/time is too small to hold the value.
      280    10885        DESCRIPTION: Occurs only on calls for conversion to character.
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:152  
      281    10886                     The receiving field is too short to hold the entire value when
      282    10887                     converted according to the specified picture.  The value
      283    10888                     returned is truncated at the first subfield or punctuation
      284    10889                     character that would extend beyond the end of the field.
      285    10890        */
      286    10891        %VLP_ERRCODE( FPTN=E_XUD#EXCESS_CHARS, STCLASS=CONSTANT,
      287    10892            FCG=XU, MID=D, ERR#=%E$XUD#EXCESS_CHARS );
      288    10937        /*E* ERROR: XUD-E$XUD#EXCESS_CHARS
      289    10938        MESSAGE: A character date or time has extra characters at the end of the value.
      290    10939        DESCRIPTION: Occurs only on calls for conversion from character.
      291    10940                     When called within a parse exit (U$) routine to parse a date in a
      292    10941                     command, this can be treated as a normal return.  Otherwise, it is
      293    10942                     equivalent to E$XUD#BAD_DATE or E$XUD#BAD_TIME.
      294    10943        */
      295    10944        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE, STCLASS=CONSTANT,
      296    10945            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE );
      297    10990        /*E* ERROR: XUD-E$XUD#BAD_DATE
      298    10991        MESSAGE: Date or time is not in the proper format.
      299    10992        DESCRIPTION: Occurs only on calls for conversion from character
      300    10993                     when XUD_PARAM.TIMESPAN=NO.
      301    10994                     It covers a variety of errors that cannot be tied to a specific
      302    10995                     subfield.  These include missing, incorrect, or extra punctuation,
      303    10996                     and too many digits in a numeric subfield.  It is also used
      304    10997                     when no picture is provided and it is not possible to determine
      305    10998                     what type of format is intended to be used.
      306    10999        */
      307    11000        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_Y, STCLASS=CONSTANT,
      308    11001            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_Y );
      309    11046        /*E* ERROR: XUD-E$XUD#BAD_DATE_Y
      310    11047        MESSAGE: Missing or incorrect value for year.
      311    11048        DESCRIPTION: Occurs only on calls for conversion from character.
      312    11049        */
      313    11050        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_MO, STCLASS=CONSTANT,
      314    11051            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_MO );
      315    11096        /*E* ERROR: XUD-E$XUD#BAD_DATE_MO
      316    11097        MESSAGE: Missing or incorrect value for month.
      317    11098        DESCRIPTION: Occurs only on calls for conversion from character.
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:153  
      318    11099        */
      319    11100        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_D, STCLASS=CONSTANT,
      320    11101            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_D );
      321    11146        /*E* ERROR: XUD-E$XUD#BAD_DATE_D
      322    11147        MESSAGE: Missing or incorrect value for days.
      323    11148        DESCRIPTION: Occurs only on calls for conversion from character.
      324    11149        */
      325    11150        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_W, STCLASS=CONSTANT,
      326    11151            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_W );
      327    11196        /*E* ERROR: XUD-E$XUD#BAD_DATE_W
      328    11197        MESSAGE: Missing or incorrect value for day of week.
      329    11198        DESCRIPTION: Occurs only on calls for conversion from character.
      330    11199        */
      331    11200        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_Q, STCLASS=CONSTANT,
      332    11201            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_Q );
      333    11246        /*E* ERROR: XUD-E$XUD#BAD_DATE_Q
      334    11247        MESSAGE: Missing or incorrect value for quarter of year.
      335    11248        DESCRIPTION: Occurs only on calls for conversion from character.
      336    11249        */
      337    11250        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_H, STCLASS=CONSTANT,
      338    11251            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_H );
      339    11296        /*E* ERROR: XUD-E$XUD#BAD_DATE_H
      340    11297        MESSAGE: Missing or incorrect value for hours.
      341    11298        DESCRIPTION: Occurs only on calls for conversion from character.
      342    11299        */
      343    11300        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_MI, STCLASS=CONSTANT,
      344    11301            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_MI );
      345    11346        /*E* ERROR: XUD-E$XUD#BAD_DATE_MI
      346    11347        MESSAGE: Missing or incorrect value for minutes.
      347    11348        DESCRIPTION: Occurs only on calls for conversion from character.
      348    11349        */
      349    11350        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_S, STCLASS=CONSTANT,
      350    11351            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_S );
      351    11396        /*E* ERROR: XUD-E$XUD#BAD_DATE_S
      352    11397        MESSAGE: Missing or incorrect value for seconds.
      353    11398        DESCRIPTION: Occurs only on calls for conversion from character.
      354    11399        */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:154  
      355    11400        %VLP_ERRCODE( FPTN=E_XUD#BAD_DATE_T, STCLASS=CONSTANT,
      356    11401            FCG=XU, MID=D, ERR#=%E$XUD#BAD_DATE_T );
      357    11446        /*E* ERROR: XUD-E$XUD#BAD_DATE_T
      358    11447        MESSAGE: Missing or incorrect value for hundredths of seconds.
      359    11448        DESCRIPTION: Occurs only on calls for conversion from character.
      360    11449        */
      361    11450        %VLP_ERRCODE( FPTN=E_XUD#BAD_TIME, STCLASS=CONSTANT,
      362    11451            FCG=XU, MID=D, ERR#=%E$XUD#BAD_TIME );
      363    11496        /*E* ERROR: XUD-E$XUD#BAD_TIME
      364    11497        MESSAGE: Timespan is not in the proper format.
      365    11498        DESCRIPTION: Occurs only on calls for conversion from character.
      366    11499                     It is used in place of E$XUD#BAD_DATE when XUD_PARAM.TIMESPAN=YES.
      367    11500        */
      368    11501        %VLP_ERRCODE( FPTN=E_XUD#BAD_PICID, STCLASS=CONSTANT,
      369    11502            FCG=XU, MID=D, ERR#=%E$XUD#BAD_PICID );
      370    11547        /*E* ERROR: XUD-E$XUD#BAD_PICID
      371    11548        MESSAGE: Date subfield appears in time picture, or vice versa.
      372    11549        DESCRIPTION: Occurs only on calls that do picture initialization.
      373    11550        */
      374    11551        %VLP_ERRCODE( FPTN=E_XUD#DUP_PICID, STCLASS=CONSTANT,
      375    11552            FCG=XU, MID=D, ERR#=%E$XUD#DUP_PICID );
      376    11597        /*E* ERROR: XUD-E$XUD#DUP_PICID
      377    11598        MESSAGE: A subfield appears more than once in a date/time picture.
      378    11599        DESCRIPTION: Occurs only on calls that do picture initialization.
      379    11600        */
      380    11601        %VLP_ERRCODE( FPTN=E_XUD#NO_PICIDS, STCLASS=CONSTANT,
      381    11602            FCG=XU, MID=D, ERR#=%E$XUD#NO_PICIDS );
      382    11647        /*E* ERROR: XUD-E$XUD#NO_PICIDS
      383    11648        MESSAGE: The picture does not contain any date/time subfields.
      384    11649        DESCRIPTION: Occurs only on calls that do picture initialization.
      385    11650        */
      386    11651        %VLP_ERRCODE( FPTN=E_XUD#PICID_ORDER, STCLASS=CONSTANT,
      387    11652            FCG=XU, MID=D, ERR#=%E$XUD#PICID_ORDER );
      388    11697        /*E* ERROR: XUD-E$XUD#PICID_ORDER
      389    11698        MESSAGE: The subfields in a time picture are not in the proper order.
      390    11699        DESCRIPTION: Occurs only on calls that do picture initialization.
      391    11700        */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:155  
      392    11701        %VLP_ERRCODE( FPTN=E_XUD#UNINIT_PIC, STCLASS=CONSTANT,
      393    11702            FCG=XU, MID=D, ERR#=%E$XUD#UNINIT_PIC );
      394    11747        /*E* ERROR: XUD-E$XUD#UNINIT_PIC
      395    11748        MESSAGE: A date/time picture has not been properly initialized.
      396    11749        DESCRIPTION: Occurs only on calls for conversion to or from character.
      397    11750                     This indicates a program error, not a user error.  If issued
      398    11751                     by a standard CP-6 processor, it should be reported in STARLOG.
      399    11752        */
      400    11753        %VLP_ERRCODE( FPTN=E_XUD#BAD_UTS_TYPE, STCLASS=CONSTANT,
      401    11754            FCG=XU, MID=D, ERR#=%E$XUD#BAD_UTS_TYPE );
      402    11799        /*E* ERROR: XUD-E$XUD#BAD_UTS_TYPE
      403    11800        MESSAGE: Invalid UTS type.
      404    11801        MESSAGE1: The value in xud_param.UTS_TYPE is not correct.  This is a program
      405    11802                    error, not a user error.  If issued by a standard CP-6 processor,
      406    11803                    it should be reported in STARLOG.
      407    11804        */
      408    11805
      409    11806    1   DCL CUM_DAYS( 0:11 ) SBIN CONSTANT
      410    11807    1       INIT( 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 );
      411    11808    1   DCL CUM_DAYS_BC( 0:11 ) SBIN CONSTANT
      412    11809    1       INIT( 334, 306, 275, 245, 214, 184, 153, 122, 92, 61, 31, 0 );
      413    11810    1   DCL MON_DAYS( 0:11 ) SBIN CONSTANT
      414    11811    1       INIT( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
      415    11812
      416    11813    1   DCL MONTH$( 0:11 ) PTR CONSTANT INIT(
      417    11814    1       ADDR( MONTH.JAN ),
      418    11815    1       ADDR( MONTH.FEB ),
      419    11816    1       ADDR( MONTH.MAR ),
      420    11817    1       ADDR( MONTH.APR ),
      421    11818    1       ADDR( MONTH.MAY ),
      422    11819    1       ADDR( MONTH.JUN ),
      423    11820    1       ADDR( MONTH.JUL ),
      424    11821    1       ADDR( MONTH.AUG ),
      425    11822    1       ADDR( MONTH.SEP ),
      426    11823    1       ADDR( MONTH.OCT ),
      427    11824    1       ADDR( MONTH.NOV ),
      428    11825    1       ADDR( MONTH.DEC ));
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:156  
      429    11826    1   DCL 1 MONTH CONSTANT,
      430    11827    1         2 JAN,
      431    11828    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.JAN.T )),
      432    11829    1           3 T CHAR( 0 ) INIT( 'JANUARY' ),
      433    11830    1         2 FEB,
      434    11831    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.FEB.T )),
      435    11832    1           3 T CHAR( 0 ) INIT( 'FEBRUARY' ),
      436    11833    1         2 MAR,
      437    11834    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.MAR.T )),
      438    11835    1           3 T CHAR( 0 ) INIT( 'MARCH' ),
      439    11836    1         2 APR,
      440    11837    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.APR.T )),
      441    11838    1           3 T CHAR( 0 ) INIT( 'APRIL' ),
      442    11839    1         2 MAY,
      443    11840    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.MAY.T )),
      444    11841    1           3 T CHAR( 0 ) INIT( 'MAY' ),
      445    11842    1         2 JUN,
      446    11843    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.JUN.T )),
      447    11844    1           3 T CHAR( 0 ) INIT( 'JUNE' ),
      448    11845    1         2 JUL,
      449    11846    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.JUL.T )),
      450    11847    1           3 T CHAR( 0 ) INIT( 'JULY' ),
      451    11848    1         2 AUG,
      452    11849    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.AUG.T )),
      453    11850    1           3 T CHAR( 0 ) INIT( 'AUGUST' ),
      454    11851    1         2 SEP,
      455    11852    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.SEP.T )),
      456    11853    1           3 T CHAR( 0 ) INIT( 'SEPTEMBER' ),
      457    11854    1         2 OCT,
      458    11855    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.OCT.T )),
      459    11856    1           3 T CHAR( 0 ) INIT( 'OCTOBER' ),
      460    11857    1         2 NOV,
      461    11858    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.NOV.T )),
      462    11859    1           3 T CHAR( 0 ) INIT( 'NOVEMBER' ),
      463    11860    1         2 DEC,
      464    11861    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( MONTH.DEC.T )),
      465    11862    1           3 T CHAR( 0 ) INIT( 'DECEMBER' );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:157  
      466    11863
      467    11864    1   DCL MONTH_SIZE( 0:11 ) UBIN CONSTANT
      468    11865    1       INIT( 2, 1, 3, 2, 3, 3, 3, 2, 1, 1, 1, 1 );
      469    11866
      470    11867    1   DCL WEEKDAY$( 0:6 ) PTR CONSTANT INIT(
      471    11868    1       ADDR( WEEKDAY.SUN ),
      472    11869    1       ADDR( WEEKDAY.MON ),
      473    11870    1       ADDR( WEEKDAY.TUE ),
      474    11871    1       ADDR( WEEKDAY.WED ),
      475    11872    1       ADDR( WEEKDAY.THU ),
      476    11873    1       ADDR( WEEKDAY.FRI ),
      477    11874    1       ADDR( WEEKDAY.SAT ));
      478    11875    1   DCL 1 WEEKDAY CONSTANT,
      479    11876    1         2 SUN,
      480    11877    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.SUN.T )),
      481    11878    1           3 T CHAR( 0 ) INIT( 'SUNDAY' ),
      482    11879    1         2 MON,
      483    11880    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.MON.T )),
      484    11881    1           3 T CHAR( 0 ) INIT( 'MONDAY' ),
      485    11882    1         2 TUE,
      486    11883    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.TUE.T )),
      487    11884    1           3 T CHAR( 0 ) INIT( 'TUESDAY' ),
      488    11885    1         2 WED,
      489    11886    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.WED.T )),
      490    11887    1           3 T CHAR( 0 ) INIT( 'WEDNESDAY' ),
      491    11888    1         2 THU,
      492    11889    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.THU.T )),
      493    11890    1           3 T CHAR( 0 ) INIT( 'THURSDAY' ),
      494    11891    1         2 FRI,
      495    11892    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.FRI.T )),
      496    11893    1           3 T CHAR( 0 ) INIT( 'FRIDAY' ),
      497    11894    1         2 SAT,
      498    11895    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( WEEKDAY.SAT.T )),
      499    11896    1           3 T CHAR( 0 ) INIT( 'SATURDAY' );
      500    11897
      501    11898        %EQU SPEC_NOW = 0 ;
      502    11899        %EQU SPEC_TODAY = 1 ;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:158  
      503    11900        %EQU SPEC_TOMORROW = 2 ;
      504    11901        %EQU SPEC_YESTERDAY = 3 ;
      505    11902        %EQU SPEC_MAX = 3 ;
      506    11903
      507    11904    1   DCL SPECIAL_SIZE( 0:%SPEC_MAX ) UBIN CONSTANT
      508    11905    1       INIT( 3, 3, 4, 4 );
      509    11906
      510    11907    1   DCL SPECIAL$( 0:%SPEC_MAX ) PTR CONSTANT INIT(
      511    11908    1       ADDR( SPECIAL.NOW ),
      512    11909    1       ADDR( SPECIAL.TODAY ),
      513    11910    1       ADDR( SPECIAL.TOMORROW ),
      514    11911    1       ADDR( SPECIAL.YESTERDAY ));
      515    11912    1   DCL 1 SPECIAL CONSTANT ,
      516    11913    1         2 NOW,
      517    11914    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( SPECIAL.NOW.T )),
      518    11915    1           3 T CHAR( 0 ) INIT( 'NOW' ),
      519    11916    1         2 TODAY,
      520    11917    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( SPECIAL.TODAY.T )),
      521    11918    1           3 T CHAR( 0 ) INIT( 'TODAY' ),
      522    11919    1         2 TOMORROW,
      523    11920    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( SPECIAL.TOMORROW.T )),
      524    11921    1           3 T CHAR( 0 ) INIT( 'TOMORROW' ),
      525    11922    1         2 YESTERDAY,
      526    11923    1           3 * UBIN BYTE CALIGNED INIT( LENGTHC( SPECIAL.YESTERDAY.T )),
      527    11924    1           3 T CHAR( 0 ) INIT( 'YESTERDAY' );
      528    11925
      529    11926    1   DCL DEFAULT_PICTURE( 0:5 ) UBIN BYTE CALIGNED CONSTANT INIT( 5,
      530    11927    1       %XUD#P_DATE_M2,
      531    11928    1       %ASCBIN( '/' ),
      532    11929    1       %XUD#P_DATE_D2,
      533    11930    1       %ASCBIN( '/' ),
      534    11931    1       %XUD#P_DATE_Y2 );
      535    11932
      536    11933    1   DCL MAX_UTS_INIT BIT( 36 ) CONSTANT INIT( '777777777777'O );
      537    11934    1   DCL MAX_UTS REDEF MAX_UTS_INIT CHAR( 4 );
      538    11935    1   DCL MAX_UBIN REDEF MAX_UTS_INIT UBIN;
      539    11936    1   DCL MIN_UTS_INIT BIT( 36 ) CONSTANT INIT( '0'O );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:159  
      540    11937    1   DCL MIN_UTS REDEF MIN_UTS_INIT CHAR( 4 );
      541    11938    1   DCL MAX_DATE_INIT BIT( 72 ) CONSTANT INIT( '311231231231231231231231'O );
      542    11939    1   DCL MAX_DATE REDEF MAX_DATE_INIT CHAR( 8 );
      543    11940
      544    11941        /****** Common termination logic
      545    11942        */
      546    11943    1       ERR = '0'B;

  11943  2 000002   200103 450100                    STZ     ERR,,AUTO

  11943  2 000003                       ERROR_RETURN null
      547    11944    1   ERROR_RETURN: ;
      548    11945    1       XUD_PARAM.ERR = ERR;

  11945  2 000003   200103 236100                    LDQ     ERR,,AUTO
         2 000004   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 000005   000002 756100                    STQ     2,,PR0

      549    11946    1       ALTRETURN;

  11946  2 000006   000000 702200 xent               TSX2  ! X66_AALT

  11945  2 000007                       NORMAL_RETU* null
      550    11947
      551    11948    1   NORMAL_RETURN: ;
      552    11949    1       XUD_PARAM.ERR = '0'B;

  11949  2 000007   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 000010   000002 450100                    STZ     2,,PR0

      553    11950    1       RETURN;

  11950  2 000011   000000 702200 xent               TSX2  ! X66_ARET

      554    11951
      555    11952        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:160  
      556    11953        /******************************************************************************/
      557    11954        /*F*
      558    11955        NAME:   XUD$INIT_PIC
      559    11956        PURPOSE:
      560    11957                Initialize a date/time picture.
      561    11958        */
      562    11959        /*D*
      563    11960        NAME:   XUD$INIT_PIC
      564    11961        CALL:
      565    11962                CALL XUD$INIT_PIC( XUD_PARAM, external, internal ) ALTRET( error );
      566    11963        PARAMETERS:
      567    11964                XUD_PARAM - Standard parameter block.
      568    11965                external - The picture in external format.
      569    11966                internal - Returns the picture in internal format.
      570    11967        INTERFACE:
      571    11968                CHK4SFX
      572    11969        DESCRIPTION:
      573    11970                This routine converts a date/time picture from external to internal
      574    11971                form.  In an internal picture, subfield identifiers are replaced
      575    11972                with a one-byte code for ease of processing.  As a result, the
      576    11973                size of an internal picture is guaranteed to be less than or equal
      577    11974                to the size of the external picture.  External pictures may not
      578    11975                exceed 63 characters.  Internal pictures are always TEXTC strings.
      579    11976                All pictures must be initialized before they are used on calls
      580    11977                to conversion routines.
      581    11978        */
      582    11979        /******************************************************************************/
      583    11980
      584    11981    1   XUD$INIT_PIC: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;

  11981  2 000012   000000 700200 xent  XUD$INIT_PIC TSX0  ! X66_AUTO_3
         2 000013   000164 000003                    ZERO    116,3

      585    11982
      586    11983            /*
      587    11984              Prepare the external picture for parsing.
      588    11985            */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:161  
      589    11986    1       IF XUD_PARAM.PIC_TEXTC

  11986  2 000014   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 000015   000001 430100                    FSZN    1,,PR0
         2 000016   000027 605000 2                  TPL     s:11992

      590    11987    2       THEN DO;

      591    11988    2           CHARS$ = ADDR( ADDR(DATA_IN)-> TEXTC.T );

  11988  2 000017   200004 236100                    LDQ     @DATA_IN,,AUTO
         2 000020   200000 036007                    ADLQ    65536,DL
         2 000021   200011 756100                    STQ     CHARS$,,AUTO

      592    11989    2           CHAR_SIZE = ADDR(DATA_IN)-> TEXTC.L;

  11989  2 000022   200004 471500                    LDP1    @DATA_IN,,AUTO
         2 000023   000100 101500                    MRL     fill='000'O
         2 000024   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 000025   200010 000004                    ADSC9   CHAR_SIZE,,AUTO          cn=0,n=4

      593    11990    2       END;

  11990  2 000026   000035 710000 2                  TRA     s:11995

      594    11991    2       ELSE DO;

      595    11992    2           CHARS$ = ADDR(DATA_IN);

  11992  2 000027   200004 236100                    LDQ     @DATA_IN,,AUTO
         2 000030   200011 756100                    STQ     CHARS$,,AUTO

      596    11993    2           CHAR_SIZE = XUD_PARAM.PIC_SIZE;

  11993  2 000031   000001 236100                    LDQ     1,,PR0
         2 000032   000022 772000                    QRL     18
         2 000033   000777 376007                    ANQ     511,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:162  
         2 000034   200010 756100                    STQ     CHAR_SIZE,,AUTO

      597    11994    2       END;

      598    11995    1       PICTURE$ = ADDR(DATA_OUT);

  11995  2 000035   200005 236100                    LDQ     @DATA_OUT,,AUTO
         2 000036   200006 756100                    STQ     PICTURE$,,AUTO

      599    11996
      600    11997    1       IF CHAR_SIZE = 0 OR CHAR_SIZE > 63

  11997  2 000037   200010 235100                    LDA     CHAR_SIZE,,AUTO
         2 000040   000043 600000 2                  TZE     s:11999
         2 000041   000077 115007                    CMPA    63,DL
         2 000042   000046 604400 2                  TMOZ    s:12002

      601    11998    2       THEN DO;

      602    11999    2           ERR = E_XUD#BAD_PIC_SIZE;

  11999  2 000043   000035 236000 1                  LDQ     E_XUD#BAD_PIC_SIZE
         2 000044   200103 756100                    STQ     ERR,,AUTO

      603    12000    2           GOTO ERROR_RETURN;

  12000  2 000045   000003 710000 2                  TRA     ERROR_RETURN

      604    12001    2       END;
      605    12002    1       CALL RSEARCH ALTRET( E_NO_PICIDS );

  12002  2 000046   010275 701000 2                  TSX1    RSEARCH
         2 000047   001637 702000 2                  TSX2    E_NO_PICIDS

      606    12003    1       CALL XLATE( TEMP_CHARS, B$XL_UPPER_UR, CHARS );

  12003  2 000050   200011 470500                    LDP0    CHARS$,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:163  
         2 000051   200010 720100                    LXL0    CHAR_SIZE,,AUTO
         2 000052   000000 471400 xsym               LDP1    B$XL_UPPER_UR$
         2 000053   040100 160540                    MVT     fill='040'O
         2 000054   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         2 000055   200012 000100                    ADSC9   TEMP_CHARS,,AUTO         cn=0,n=64
         2 000056   100000 000100                    ARG     0,,PR1

      607    12004
      608    12005    1       ERR = '0'B;

  12005  2 000057   200103 450100                    STZ     ERR,,AUTO

      609    12006    1       PICID_USED = '0'B;

  12006  2 000060   000000 221003                    LDX1    0,DU
         2 000061   200107 741100                    STX1    PICID_USED,,AUTO

      610    12007    1       USED_BEFORE = '0'B;

  12007  2 000062   200112 741100                    STX1    USED_BEFORE,,AUTO

      611    12008    1       PICID_SWITCH = %XUD#NO;

  12008  2 000063   200110 450100                    STZ     PICID_SWITCH,,AUTO

      612    12009    1       PICID_H = -1;

  12009  2 000064   000001 335007                    LCA     1,DL
         2 000065   200113 755100                    STA     PICID_H,,AUTO

      613    12010    1       MAXSIZE = 0;

  12010  2 000066   200114 450100                    STZ     MAXSIZE,,AUTO

      614    12011    1       TIMESPAN = XUD_PARAM.TIMESPAN;

  12011  2 000067   200003 473500                    LDP3    @XUD_PARAM,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:164  
         2 000070   300001 236100                    LDQ     1,,PR3
         2 000071   000002 736000                    QLS     2
         2 000072   400000 376003                    ANQ     -131072,DU
         2 000073   200102 756100                    STQ     TIMESPAN,,AUTO

      615    12012    1       IF TIMESPAN

  12012  2 000074   200102 234100                    SZN     TIMESPAN,,AUTO
         2 000075   000101 605000 2                  TPL     s:12014

      616    12013    1         THEN PICTYPE = %XUD#PICTYPE_TIME;

  12013  2 000076   124000 236003                    LDQ     43008,DU
         2 000077   200106 756100                    STQ     PICTYPE,,AUTO
         2 000100   000103 710000 2                  TRA     s:12022

      617    12014    1         ELSE PICTYPE = %XUD#PICTYPE_UNDEF;

  12014  2 000101   040000 236003                    LDQ     16384,DU
         2 000102   200106 756100                    STQ     PICTYPE,,AUTO

      618    12015
      619    12016            /*
      620    12017              Loop to scan all characters in external picture...
      621    12018              for each, insert the appropriate codes in the internal picture.
      622    12019                J = index into external picture.
      623    12020                I = index into internal picture.
      624    12021            */
      625    12022    1       I = 0;

  12022  2 000103   200074 450100                    STZ     I,,AUTO

      626    12023    1       CALL SEARCH( J, JUNK, B$SR_NON_BLANK, CHARS );

  12023  2 000104   000000 474400 xsym               LDP4    B$SR_NON_BLANK$
         2 000105   000000 164540                    TCT
         2 000106   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:165  
         2 000107   400000 000100                    ARG     0,,PR4
         2 000110   200075 000100                    ARG     J,,AUTO
         2 000111   200075 235100                    LDA     J,,AUTO
         2 000112   000033 771000                    ARL     27
         2 000113   200077 755100                    STA     JUNK,,AUTO
         2 000114   200075 551140                    STBA    J,'40'O,AUTO

      627    12024    2       DO WHILE J < CHAR_SIZE;

  12024  2 000115   200075 236100                    LDQ     J,,AUTO
         2 000116   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 000117   001535 605000 2                  TPL     s:12483

      628    12025    2           PIC_CHAR = SUBSTR( TEMP_CHARS, J, 1 );

  12025  2 000120   200075 235100                    LDA     J,,AUTO
         2 000121   040100 100505                    MLR     fill='040'O
         2 000122   200012 000001                    ADSC9   TEMP_CHARS,A,AUTO        cn=0,n=1
         2 000123   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1

      629    12026    3           DO SELECT( PIC_CHAR );

  12026  2 000124   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 000125   777000 376003                    ANQ     -512,DU
         2 000126   042000 116003                    CMPQ    17408,DU
         2 000127   000135 602000 2                  TNC     s:12026+9
         2 000130   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 000131   777000 376003                    ANQ     -512,DU
         2 000132   042000 116003                    CMPQ    17408,DU
         2 000133   000142 600000 2                  TZE     s:12031
         2 000134   000321 710000 2                  TRA     s:12073
         2 000135   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 000136   777000 376003                    ANQ     -512,DU
         2 000137   041000 116003                    CMPQ    16896,DU
         2 000140   000321 601000 2                  TNZ     s:12073
         2 000141   000265 710000 2                  TRA     s:12054

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:166  
      630    12027    3           SELECT( '"' );

      631    12028                /*
      632    12029                  Move a quoted string from the external picture to the internal one.
      633    12030                */
      634    12031    3               IF J+2 >= CHAR_SIZE

  12031  2 000142   200075 236100                    LDQ     J,,AUTO
         2 000143   000002 036007                    ADLQ    2,DL
         2 000144   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 000145   001616 605000 2                  TPL     E_BAD_PIC_QUOTE

      635    12032    3                 THEN GOTO E_BAD_PIC_QUOTE;
      636    12033    3               CALL INDEX( LEN, '"', CHARS, J+1 ) ALTRET( E_BAD_PIC_QUOTE );

  12033  2 000146   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 000147   200075 136100                    SBLQ    J,,AUTO
         2 000150   777777 620006                    EAX0    -1,QL
         2 000151   200075 236100                    LDQ     J,,AUTO
         2 000152   000001 036007                    ADLQ    1,DL
         2 000153   200011 470500                    LDP0    CHARS$,,AUTO
         2 000154   000000 124545                    SCM     mask='000'O
         2 000155   000000 200010                    ADSC9   0,A,PR0                  cn=1,n=*X0
         2 000156   000000 000001 3                  ADSC9   0                        cn=0,n=1
         2 000157   200100 000100                    ARG     LEN,,AUTO
         2 000160   200100 056100                    ASQ     LEN,,AUTO
         2 000161   001616 606400 2                  TTN     E_BAD_PIC_QUOTE

      637    12034    4               DO WHILE LEN + 2 < CHAR_SIZE ;

  12034  2 000162   000232 710000 2                  TRA     s:12043

      638    12035    4                   IF SUBSTR( CHARS, LEN+1, 1 ) ~= '"'

  12035  2 000163   200011 470500                    LDP0    CHARS$,,AUTO
         2 000164   200100 235100                    LDA     LEN,,AUTO
         2 000165   040000 106505                    CMPC    fill='040'O
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:167  
         2 000166   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         2 000167   000000 000001 3                  ADSC9   0                        cn=0,n=1
         2 000170   000236 601000 2                  TNZ     s:12044

      639    12036    4                     THEN EXIT;
      640    12037    4                   LEN = LEN - J;

  12037  2 000171   200100 236100                    LDQ     LEN,,AUTO
         2 000172   200075 136100                    SBLQ    J,,AUTO
         2 000173   200100 756100                    STQ     LEN,,AUTO

      641    12038    4                   SUBSTR( PICTURE.T, I, LEN ) = SUBSTR( CHARS, J+1, LEN );

  12038  2 000174   000000 620006                    EAX0    0,QL
         2 000175   200075 235100                    LDA     J,,AUTO
         2 000176   200006 471500                    LDP1    PICTURE$,,AUTO
         2 000177   200100 721100                    LXL1    LEN,,AUTO
         2 000200   200074 236100                    LDQ     I,,AUTO
         2 000201   040146 100545                    MLR     fill='040'O
         2 000202   000000 200010                    ADSC9   0,A,PR0                  cn=1,n=*X0
         2 000203   100000 200011                    ADSC9   0,Q,PR1                  cn=1,n=*X1

      642    12039    4                   J = J + LEN + 1;

  12039  2 000204   200075 236100                    LDQ     J,,AUTO
         2 000205   200100 036100                    ADLQ    LEN,,AUTO
         2 000206   000001 036007                    ADLQ    1,DL
         2 000207   200075 756100                    STQ     J,,AUTO

      643    12040    4                   I = I + LEN;

  12040  2 000210   200074 236100                    LDQ     I,,AUTO
         2 000211   200100 036100                    ADLQ    LEN,,AUTO
         2 000212   200074 756100                    STQ     I,,AUTO

      644    12041    4                   MAXSIZE = MAXSIZE + LEN;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:168  
  12041  2 000213   200114 236100                    LDQ     MAXSIZE,,AUTO
         2 000214   200100 036100                    ADLQ    LEN,,AUTO
         2 000215   200114 756100                    STQ     MAXSIZE,,AUTO

      645    12042    4                   CALL INDEX( LEN, '"', CHARS, J+1 ) ALTRET( E_BAD_PIC_QUOTE );

  12042  2 000216   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 000217   200075 136100                    SBLQ    J,,AUTO
         2 000220   777777 620006                    EAX0    -1,QL
         2 000221   200075 236100                    LDQ     J,,AUTO
         2 000222   000001 036007                    ADLQ    1,DL
         2 000223   200075 235100                    LDA     J,,AUTO
         2 000224   000000 124545                    SCM     mask='000'O
         2 000225   000000 200010                    ADSC9   0,A,PR0                  cn=1,n=*X0
         2 000226   000000 000001 3                  ADSC9   0                        cn=0,n=1
         2 000227   200100 000100                    ARG     LEN,,AUTO
         2 000230   200100 056100                    ASQ     LEN,,AUTO
         2 000231   001616 606400 2                  TTN     E_BAD_PIC_QUOTE

      646    12043    4               END/*WHILE*/;

  12043  2 000232   200100 236100                    LDQ     LEN,,AUTO
         2 000233   000002 036007                    ADLQ    2,DL
         2 000234   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 000235   000163 604000 2                  TMI     s:12035

      647    12044    3               LEN = LEN - J - 1;

  12044  2 000236   200100 236100                    LDQ     LEN,,AUTO
         2 000237   200075 136100                    SBLQ    J,,AUTO
         2 000240   000001 136007                    SBLQ    1,DL
         2 000241   200100 756100                    STQ     LEN,,AUTO

      648    12045    3               SUBSTR( PICTURE.T, I, LEN ) = SUBSTR( CHARS, J+1, LEN );

  12045  2 000242   000000 620006                    EAX0    0,QL
         2 000243   200075 235100                    LDA     J,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:169  
         2 000244   200006 471500                    LDP1    PICTURE$,,AUTO
         2 000245   200100 721100                    LXL1    LEN,,AUTO
         2 000246   200074 236100                    LDQ     I,,AUTO
         2 000247   040146 100545                    MLR     fill='040'O
         2 000250   000000 200010                    ADSC9   0,A,PR0                  cn=1,n=*X0
         2 000251   100000 200011                    ADSC9   0,Q,PR1                  cn=1,n=*X1

      649    12046    3               J = J + LEN + 2;

  12046  2 000252   200075 236100                    LDQ     J,,AUTO
         2 000253   200100 036100                    ADLQ    LEN,,AUTO
         2 000254   000002 036007                    ADLQ    2,DL
         2 000255   200075 756100                    STQ     J,,AUTO

      650    12047    3               I = I + LEN;

  12047  2 000256   200074 236100                    LDQ     I,,AUTO
         2 000257   200100 036100                    ADLQ    LEN,,AUTO
         2 000260   200074 756100                    STQ     I,,AUTO

      651    12048    3               MAXSIZE = MAXSIZE + LEN;

  12048  2 000261   200114 236100                    LDQ     MAXSIZE,,AUTO
         2 000262   200100 036100                    ADLQ    LEN,,AUTO
         2 000263   200114 756100                    STQ     MAXSIZE,,AUTO
         2 000264   001532 710000 2                  TRA     s:12478

      652    12049
      653    12050    3           SELECT( '!' );

      654    12051                /*
      655    12052                  Switch between date and time picture parsing.
      656    12053                */
      657    12054    3               IF TIMESPAN OR PICID_SWITCH

  12054  2 000265   200102 234100                    SZN     TIMESPAN,,AUTO
         2 000266   001603 604000 2                  TMI     E_BAD_PIC
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:170  
         2 000267   200110 234100                    SZN     PICID_SWITCH,,AUTO
         2 000270   001603 604000 2                  TMI     E_BAD_PIC

      658    12055    3                 THEN GOTO E_BAD_PIC;
      659    12056    3               IF NOT PICID_USED

  12056  2 000271   200107 220100                    LDX0    PICID_USED,,AUTO
         2 000272   001637 600000 2                  TZE     E_NO_PICIDS

      660    12057    3                 THEN GOTO E_NO_PICIDS;
      661    12058    3               IF PICTYPE = %XUD#PICTYPE_TIME

  12058  2 000273   200106 236100                    LDQ     PICTYPE,,AUTO
         2 000274   777000 376003                    ANQ     -512,DU
         2 000275   124000 116003                    CMPQ    43008,DU
         2 000276   000302 601000 2                  TNZ     s:12060

      662    12059    3                 THEN PICTYPE = %XUD#PICTYPE_DATE;

  12059  2 000277   104000 236003                    LDQ     34816,DU
         2 000300   200106 756100                    STQ     PICTYPE,,AUTO
         2 000301   000304 710000 2                  TRA     s:12061

      663    12060    3                 ELSE PICTYPE = %XUD#PICTYPE_TIME;

  12060  2 000302   124000 236003                    LDQ     43008,DU
         2 000303   200106 756100                    STQ     PICTYPE,,AUTO

      664    12061    3               PICID_SWITCH = %XUD#YES;

  12061  2 000304   400000 236003                    LDQ     -131072,DU
         2 000305   200110 756100                    STQ     PICID_SWITCH,,AUTO

      665    12062    3               USED_BEFORE = PICID_USED;

  12062  2 000306   200112 740100                    STX0    USED_BEFORE,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:171  
      666    12063    3               PICID_H = -1;

  12063  2 000307   000001 335007                    LCA     1,DL
         2 000310   200113 755100                    STA     PICID_H,,AUTO

      667    12064    3               SUBSTR( PICTURE.T, I, 1 ) = BINASC( %XUD#P_SWITCH );

  12064  2 000311   200006 470500                    LDP0    PICTURE$,,AUTO
         2 000312   200074 235100                    LDA     I,,AUTO
         2 000313   040105 100400                    MLR     fill='040'O
         2 000314   000001 000001 3                  ADSC9   1                        cn=0,n=1
         2 000315   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1

      668    12065    3               J = J + 1;

  12065  2 000316   200075 054100                    AOS     J,,AUTO

      669    12066    3               I = I + 1;

  12066  2 000317   200074 054100                    AOS     I,,AUTO
         2 000320   001532 710000 2                  TRA     s:12478

      670    12067
      671    12068    3           SELECT( ELSE );

      672    12069                /*
      673    12070                  Check for a picture subfield identifier.
      674    12071                */
      675    12072
      676    12073    3               IF ASCBIN( SUBSTR( CHARS, J, 1 )) >= %XUD#P_BASE

  12073  2 000321   200011 470500                    LDP0    CHARS$,,AUTO
         2 000322   000100 101505                    MRL     fill='000'O
         2 000323   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 000324   200152 000004                    ADSC9   LIMIT+1,,AUTO            cn=0,n=4
         2 000325   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 000326   000400 116007                    CMPQ    256,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:172  
         2 000327   001603 603000 2                  TRC     E_BAD_PIC

      677    12074    3                 THEN GOTO E_BAD_PIC;
      678    12075    3               PICID = 0;

  12075  2 000330   200105 450100                    STZ     PICID,,AUTO

      679    12076                    /*
      680    12077                      The following EQUs refer to the corresponding characters
      681    12078                      in the INDEX function table that appears below.
      682    12079                    */
      683    12080                      %EQU D = 0;
      684    12081                      %EQU H = D+1;
      685    12082                      %EQU J = H+1;
      686    12083                      %EQU M = J+1;
      687    12084                      %EQU Q = M+1;
      688    12085                      %EQU S = Q+1;
      689    12086                      %EQU T = S+1;
      690    12087                      %EQU W = T+1;
      691    12088                      %EQU Y = W+1;
      692    12089    3               CALL INDEX( IDX, PIC_CHAR, 'DHJMQSTWY' )

  12089  2 000331   000100 124400                    SCM     mask='000'O
         2 000332   000267 000011 1                  ADSC9   MAX_DATE_INIT+2          cn=0,n=9
         2 000333   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1
         2 000334   200076 000100                    ARG     IDX,,AUTO
         2 000335   001144 606400 2                  TTN     s:12342

      693    12090    4               WHENRETURN DO;

      694    12091                    /*
      695    12092                      For "standard" picture identifiers, set internal code based
      696    12093                        on number of repetitions of the pattern character.
      697    12094                    */
      698    12095    4                   LEN = 1;

  12095  2 000336   000001 236007                    LDQ     1,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:173  
         2 000337   200100 756100                    STQ     LEN,,AUTO

      699    12096    5                   DO WHILE SUBSTR( TEMP_CHARS, J+LEN, 1 ) = PIC_CHAR

  12096  2 000340   000342 710000 2                  TRA     s:12099

      700    12097    5                     AND J+LEN < CHAR_SIZE AND LEN < 12;
      701    12098    5                       LEN = LEN + 1;

  12098  2 000341   200100 054100                    AOS     LEN,,AUTO

      702    12099    5                   END/*WHILE*/;

  12099  2 000342   200075 236100                    LDQ     J,,AUTO
         2 000343   200100 036100                    ADLQ    LEN,,AUTO
         2 000344   040100 106506                    CMPC    fill='040'O
         2 000345   200012 000001                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=1
         2 000346   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1
         2 000347   000357 601000 2                  TNZ     s:12103
         2 000350   200075 236100                    LDQ     J,,AUTO
         2 000351   200100 036100                    ADLQ    LEN,,AUTO
         2 000352   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 000353   000357 605000 2                  TPL     s:12103
         2 000354   200100 235100                    LDA     LEN,,AUTO
         2 000355   000014 115007                    CMPA    12,DL
         2 000356   000341 604000 2                  TMI     s:12098

      703    12100                        /*
      704    12101                          First subfield of timespan needs special handling.
      705    12102                        */
      706    12103    4                   IF TIMESPAN AND NOT PICID_USED

  12103  2 000357   200102 234100                    SZN     TIMESPAN,,AUTO
         2 000360   000463 605000 2                  TPL     s:12139
         2 000361   200107 220100                    LDX0    PICID_USED,,AUTO
         2 000362   000463 601000 2                  TNZ     s:12139

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:174  
      707    12104    5                   THEN DO;

      708    12105    5                       IF LEN > 10

  12105  2 000363   200100 235100                    LDA     LEN,,AUTO
         2 000364   000012 115007                    CMPA    10,DL
         2 000365   001621 605400 2                  TPNZ    E_LONG_PICID

      709    12106    5                         THEN GOTO E_LONG_PICID;
      710    12107    6                       DO CASE( IDX );

  12107  2 000366   200076 236100                    LDQ     IDX,,AUTO
         2 000367   000007 116007                    CMPQ    7,DL
         2 000370   000372 602006 2                  TNC     s:12107+4,QL
         2 000371   000432 710000 2                  TRA     s:12124
         2 000372   000401 710000 2                  TRA     s:12109
         2 000373   000406 710000 2                  TRA     s:12112
         2 000374   000432 710000 2                  TRA     s:12124
         2 000375   000413 710000 2                  TRA     s:12115
         2 000376   000432 710000 2                  TRA     s:12124
         2 000377   000420 710000 2                  TRA     s:12118
         2 000400   000425 710000 2                  TRA     s:12121

      711    12108    6                       CASE( %D );

      712    12109    6                           PICID = %XUD#P_TIME_D3;

  12109  2 000401   453000 236003                    LDQ     -109056,DU
         2 000402   200105 756100                    STQ     PICID,,AUTO

      713    12110    6                           PICID_USED = %XUD#USED_D;

  12110  2 000403   100002 221003                    LDX1    32770,DU
         2 000404   200107 741100                    STX1    PICID_USED,,AUTO
         2 000405   000433 710000 2                  TRA     s:12126

      714    12111    6                       CASE( %H );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:175  

      715    12112    6                           PICID = %XUD#P_TIME_H3;

  12112  2 000406   454000 236003                    LDQ     -108544,DU
         2 000407   200105 756100                    STQ     PICID,,AUTO

      716    12113    6                           PICID_USED = %XUD#USED_H;

  12113  2 000410   004000 221003                    LDX1    2048,DU
         2 000411   200107 741100                    STX1    PICID_USED,,AUTO
         2 000412   000433 710000 2                  TRA     s:12126

      717    12114    6                       CASE( %M );

      718    12115    6                           PICID = %XUD#P_TIME_M3;

  12115  2 000413   455000 236003                    LDQ     -108032,DU
         2 000414   200105 756100                    STQ     PICID,,AUTO

      719    12116    6                           PICID_USED = %XUD#USED_MI;

  12116  2 000415   002000 221003                    LDX1    1024,DU
         2 000416   200107 741100                    STX1    PICID_USED,,AUTO
         2 000417   000433 710000 2                  TRA     s:12126

      720    12117    6                       CASE( %S );

      721    12118    6                           PICID = %XUD#P_TIME_S3;

  12118  2 000420   456000 236003                    LDQ     -107520,DU
         2 000421   200105 756100                    STQ     PICID,,AUTO

      722    12119    6                           PICID_USED = %XUD#USED_S;

  12119  2 000422   001000 221003                    LDX1    512,DU
         2 000423   200107 741100                    STX1    PICID_USED,,AUTO
         2 000424   000433 710000 2                  TRA     s:12126
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:176  

      723    12120    6                       CASE( %T );

      724    12121    6                           PICID = %XUD#P_TIME_T3;

  12121  2 000425   457000 236003                    LDQ     -107008,DU
         2 000426   200105 756100                    STQ     PICID,,AUTO

      725    12122    6                           PICID_USED = %XUD#USED_T;

  12122  2 000427   000400 221003                    LDX1    256,DU
         2 000430   200107 741100                    STX1    PICID_USED,,AUTO
         2 000431   000433 710000 2                  TRA     s:12126

      726    12123    6                       CASE( ELSE );

      727    12124    6                           GOTO E_BAD_PIC;

  12124  2 000432   001603 710000 2                  TRA     E_BAD_PIC

      728    12125    6                       END/*CASE*/;

      729    12126    5                       MAXSIZE = MAXSIZE + LEN;

  12126  2 000433   200114 236100                    LDQ     MAXSIZE,,AUTO
         2 000434   200100 036100                    ADLQ    LEN,,AUTO
         2 000435   200114 756100                    STQ     MAXSIZE,,AUTO

      730    12127    5                       J = J + LEN;

  12127  2 000436   200075 236100                    LDQ     J,,AUTO
         2 000437   200100 036100                    ADLQ    LEN,,AUTO
         2 000440   200075 756100                    STQ     J,,AUTO

      731    12128    5                       SUBSTR( PICTURE.T, I, 1 ) = BINASC( PICID );

  12128  2 000441   200006 470500                    LDP0    PICTURE$,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:177  
         2 000442   200074 235100                    LDA     I,,AUTO
         2 000443   040105 100500                    MLR     fill='040'O
         2 000444   200105 000001                    ADSC9   PICID,,AUTO              cn=0,n=1
         2 000445   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1

      732    12129    5                       IF LEN = 1

  12129  2 000446   200100 235100                    LDA     LEN,,AUTO
         2 000447   000001 115007                    CMPA    1,DL
         2 000450   001531 600000 2                  TZE     NEXT_CHAR

      733    12130    5                         THEN GOTO NEXT_CHAR;
      734    12131    5                       I = I + 1;

  12131  2 000451   200074 054100                    AOS     I,,AUTO

      735    12132    5                       SUBSTR( PICTURE.T, I, 1 ) = BINASC( LEN );

  12132  2 000452   200100 236100                    LDQ     LEN,,AUTO
         2 000453   000033 736000                    QLS     27
         2 000454   000002 276000 3                  ORQ     2
         2 000455   200152 756100                    STQ     LIMIT+1,,AUTO
         2 000456   200074 235100                    LDA     I,,AUTO
         2 000457   040105 100500                    MLR     fill='040'O
         2 000460   200152 000004                    ADSC9   LIMIT+1,,AUTO            cn=0,n=4
         2 000461   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1

      736    12133    5                       GOTO NEXT_CHAR;

  12133  2 000462   001531 710000 2                  TRA     NEXT_CHAR

      737    12134    5                   END;
      738    12135                        /*
      739    12136                          Set subfield code (PICID) based on character and number
      740    12137                          of repetitions.
      741    12138                        */
      742    12139    5                   DO CASE( IDX );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:178  

  12139  2 000463   200076 235100                    LDA     IDX,,AUTO
         2 000464   000011 115007                    CMPA    9,DL
         2 000465   000467 602005 2                  TNC     s:12139+4,AL
         2 000466   001143 710000 2                  TRA     s:12336
         2 000467   000500 710000 2                  TRA     s:12144
         2 000470   000525 710000 2                  TRA     s:12160
         2 000471   000555 710000 2                  TRA     s:12178
         2 000472   000601 710000 2                  TRA     s:12192
         2 000473   000721 710000 2                  TRA     s:12244
         2 000474   000732 710000 2                  TRA     s:12253
         2 000475   000764 710000 2                  TRA     s:12270
         2 000476   001016 710000 2                  TRA     s:12287
         2 000477   001076 710000 2                  TRA     s:12316

      743    12140                        /*
      744    12141                          D - day of month
      745    12142                        */
      746    12143    5                   CASE( %D );

      747    12144    5                       IF TIMESPAN

  12144  2 000500   200102 234100                    SZN     TIMESPAN,,AUTO
         2 000501   001613 604000 2                  TMI     E_PICID_ORDER

      748    12145    5                         THEN GOTO E_PICID_ORDER;
      749    12146    5                       USED_FLAG = %XUD#USED_D;

  12146  2 000502   100002 220003                    LDX0    32770,DU
         2 000503   200111 740100                    STX0    USED_FLAG,,AUTO

      750    12147    6                       DO CASE( LEN );

  12147  2 000504   200100 236100                    LDQ     LEN,,AUTO
         2 000505   000003 116007                    CMPQ    3,DL
         2 000506   000510 602006 2                  TNC     s:12147+4,QL
         2 000507   000521 710000 2                  TRA     s:12153
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:179  
         2 000510   000521 710000 2                  TRA     s:12153
         2 000511   000513 710000 2                  TRA     s:12149
         2 000512   000516 710000 2                  TRA     s:12151

      751    12148    6                       CASE( 1 );

      752    12149    6                           PICID = %XUD#P_DATE_D1;

  12149  2 000513   415000 236003                    LDQ     -124416,DU
         2 000514   200105 756100                    STQ     PICID,,AUTO
         2 000515   000522 710000 2                  TRA     s:12155

      753    12150    6                       CASE( 2 );

      754    12151    6                           PICID = %XUD#P_DATE_D2;

  12151  2 000516   416000 236003                    LDQ     -123904,DU
         2 000517   200105 756100                    STQ     PICID,,AUTO
         2 000520   000522 710000 2                  TRA     s:12155

      755    12152    6                       CASE( ELSE );

      756    12153    6                           GOTO E_LONG_PICID;

  12153  2 000521   001621 710000 2                  TRA     E_LONG_PICID

      757    12154    6                       END/*CASE*/;

      758    12155    5                       MAXSIZE = MAXSIZE + 2;

  12155  2 000522   000002 236007                    LDQ     2,DL
         2 000523   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 000524   001143 710000 2                  TRA     s:12336

      759    12156                        /*
      760    12157                          H - hour
      761    12158                        */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:180  
      762    12159    5                   CASE( %H );

      763    12160    5                       IF PICID_USED &

  12160  2 000525   200107 220100                    LDX0    PICID_USED,,AUTO
         2 000526   003600 360003                    ANX0    1920,DU
         2 000527   001613 601000 2                  TNZ     E_PICID_ORDER

      764    12161    5                         %( XUD#USED_MI | XUD#USED_S | XUD#USED_T | XUD#USED_AMPM )
      765    12162    5                         THEN GOTO E_PICID_ORDER;
      766    12163    5                       USED_FLAG = %XUD#USED_H;

  12163  2 000530   004000 220003                    LDX0    2048,DU
         2 000531   200111 740100                    STX0    USED_FLAG,,AUTO

      767    12164    6                       DO CASE( LEN );

  12164  2 000532   200100 236100                    LDQ     LEN,,AUTO
         2 000533   000003 116007                    CMPQ    3,DL
         2 000534   000536 602006 2                  TNC     s:12164+4,QL
         2 000535   000547 710000 2                  TRA     s:12170
         2 000536   000547 710000 2                  TRA     s:12170
         2 000537   000541 710000 2                  TRA     s:12166
         2 000540   000544 710000 2                  TRA     s:12168

      768    12165    6                       CASE( 1 );

      769    12166    6                           PICID = %XUD#P_TIME_H1;

  12166  2 000541   460000 236003                    LDQ     -106496,DU
         2 000542   200105 756100                    STQ     PICID,,AUTO
         2 000543   000550 710000 2                  TRA     s:12172

      770    12167    6                       CASE( 2 );

      771    12168    6                           PICID = %XUD#P_TIME_H2;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:181  
  12168  2 000544   462000 236003                    LDQ     -105472,DU
         2 000545   200105 756100                    STQ     PICID,,AUTO
         2 000546   000550 710000 2                  TRA     s:12172

      772    12169    6                       CASE( ELSE );

      773    12170    6                           GOTO E_LONG_PICID;

  12170  2 000547   001621 710000 2                  TRA     E_LONG_PICID

      774    12171    6                       END/*CASE*/;

      775    12172    5                       PICID_H = I;

  12172  2 000550   200074 235100                    LDA     I,,AUTO
         2 000551   200113 755100                    STA     PICID_H,,AUTO

      776    12173    5                       MAXSIZE = MAXSIZE + 2;

  12173  2 000552   000002 236007                    LDQ     2,DL
         2 000553   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 000554   001143 710000 2                  TRA     s:12336

      777    12174                        /*
      778    12175                          J - Julian day (day of year)
      779    12176                        */
      780    12177    5                   CASE( %J );

      781    12178    5                       USED_FLAG = %XUD#USED_J;

  12178  2 000555   300002 220003                    LDX0    98306,DU
         2 000556   200111 740100                    STX0    USED_FLAG,,AUTO

      782    12179    6                       DO CASE( LEN );

  12179  2 000557   200100 236100                    LDQ     LEN,,AUTO
         2 000560   000004 116007                    CMPQ    4,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:182  
         2 000561   000563 602006 2                  TNC     s:12179+4,QL
         2 000562   000575 710000 2                  TRA     s:12185
         2 000563   000575 710000 2                  TRA     s:12185
         2 000564   000567 710000 2                  TRA     s:12181
         2 000565   000567 710000 2                  TRA     s:12181
         2 000566   000572 710000 2                  TRA     s:12183

      783    12180    6                       CASE( 1, 2 );

      784    12181    6                           PICID = %XUD#P_DATE_J1;

  12181  2 000567   434000 236003                    LDQ     -116736,DU
         2 000570   200105 756100                    STQ     PICID,,AUTO
         2 000571   000576 710000 2                  TRA     s:12187

      785    12182    6                       CASE( 3 );

      786    12183    6                           PICID = %XUD#P_DATE_J3;

  12183  2 000572   435000 236003                    LDQ     -116224,DU
         2 000573   200105 756100                    STQ     PICID,,AUTO
         2 000574   000576 710000 2                  TRA     s:12187

      787    12184    6                       CASE( ELSE );

      788    12185    6                           GOTO E_LONG_PICID;

  12185  2 000575   001621 710000 2                  TRA     E_LONG_PICID

      789    12186    6                       END/*CASE*/;

      790    12187    5                       MAXSIZE = MAXSIZE + 3;

  12187  2 000576   000003 236007                    LDQ     3,DL
         2 000577   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 000600   001143 710000 2                  TRA     s:12336

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:183  
      791    12188                        /*
      792    12189                          M - month or minute
      793    12190                        */
      794    12191    5                   CASE( %M );

      795    12192    5                       IF PICTYPE = %XUD#PICTYPE_TIME

  12192  2 000601   200106 236100                    LDQ     PICTYPE,,AUTO
         2 000602   777000 376003                    ANQ     -512,DU
         2 000603   124000 116003                    CMPQ    43008,DU
         2 000604   000637 601000 2                  TNZ     s:12211

      796    12193    6                       THEN DO;

      797    12194    6                           IF (( PICID_USED &

  12194  2 000605   200107 220100                    LDX0    PICID_USED,,AUTO
         2 000606   001600 360003                    ANX0    896,DU
         2 000607   001613 601000 2                  TNZ     E_PICID_ORDER
         2 000610   200107 220100                    LDX0    PICID_USED,,AUTO
         2 000611   000614 600000 2                  TZE     s:12199
         2 000612   004000 360003                    ANX0    2048,DU
         2 000613   001613 600000 2                  TZE     E_PICID_ORDER

      798    12195    6                               %( XUD#USED_S | XUD#USED_T | XUD#USED_AMPM ))
      799    12196    6                             OR ( PICID_USED
      800    12197    6                               AND NOT ( PICID_USED & %XUD#USED_H )))
      801    12198    6                             THEN GOTO E_PICID_ORDER;
      802    12199    6                           USED_FLAG = %XUD#USED_MI;

  12199  2 000614   002000 220003                    LDX0    1024,DU
         2 000615   200111 740100                    STX0    USED_FLAG,,AUTO

      803    12200    7                           DO CASE( LEN );

  12200  2 000616   200100 236100                    LDQ     LEN,,AUTO
         2 000617   000003 116007                    CMPQ    3,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:184  
         2 000620   000622 602006 2                  TNC     s:12200+4,QL
         2 000621   000633 710000 2                  TRA     s:12206
         2 000622   000633 710000 2                  TRA     s:12206
         2 000623   000625 710000 2                  TRA     s:12202
         2 000624   000630 710000 2                  TRA     s:12204

      804    12201    7                           CASE( 1 );

      805    12202    7                               PICID = %XUD#P_TIME_M1;

  12202  2 000625   464000 236003                    LDQ     -104448,DU
         2 000626   200105 756100                    STQ     PICID,,AUTO
         2 000627   000634 710000 2                  TRA     s:12208

      806    12203    7                           CASE( 2 );

      807    12204    7                               PICID = %XUD#P_TIME_M2;

  12204  2 000630   465000 236003                    LDQ     -103936,DU
         2 000631   200105 756100                    STQ     PICID,,AUTO
         2 000632   000634 710000 2                  TRA     s:12208

      808    12205    7                           CASE( ELSE );

      809    12206    7                               GOTO E_LONG_PICID;

  12206  2 000633   001621 710000 2                  TRA     E_LONG_PICID

      810    12207    7                           END/*CASE*/;

      811    12208    6                           MAXSIZE = MAXSIZE + 2;

  12208  2 000634   000002 236007                    LDQ     2,DL
         2 000635   200114 056100                    ASQ     MAXSIZE,,AUTO

      812    12209    6                       END;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:185  
  12209  2 000636   001143 710000 2                  TRA     s:12336

      813    12210    6                       ELSE DO;

      814    12211    6                           USED_FLAG = %XUD#USED_MO;

  12211  2 000637   200000 220003                    LDX0    65536,DU
         2 000640   200111 740100                    STX0    USED_FLAG,,AUTO

      815    12212    7                           DO CASE( LEN );

  12212  2 000641   200100 236100                    LDQ     LEN,,AUTO
         2 000642   000004 116007                    CMPQ    4,DL
         2 000643   000645 602006 2                  TNC     s:12212+4,QL
         2 000644   000670 710000 2                  TRA     s:12223
         2 000645   000670 710000 2                  TRA     s:12223
         2 000646   000651 710000 2                  TRA     s:12214
         2 000647   000656 710000 2                  TRA     s:12217
         2 000650   000663 710000 2                  TRA     s:12220

      816    12213    7                           CASE( 1 );

      817    12214    7                               PICID = %XUD#P_DATE_M1;

  12214  2 000651   405000 236003                    LDQ     -128512,DU
         2 000652   200105 756100                    STQ     PICID,,AUTO

      818    12215    7                               MAXSIZE = MAXSIZE + 2;

  12215  2 000653   000002 236007                    LDQ     2,DL
         2 000654   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 000655   000674 710000 2                  TRA     s:12226

      819    12216    7                           CASE( 2 );

      820    12217    7                               PICID = %XUD#P_DATE_M2;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:186  
  12217  2 000656   406000 236003                    LDQ     -128000,DU
         2 000657   200105 756100                    STQ     PICID,,AUTO

      821    12218    7                               MAXSIZE = MAXSIZE + 2;

  12218  2 000660   000002 236007                    LDQ     2,DL
         2 000661   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 000662   000674 710000 2                  TRA     s:12226

      822    12219    7                           CASE( 3 );

      823    12220    7                               PICID = %XUD#P_DATE_M3UC;

  12220  2 000663   407000 236003                    LDQ     -127488,DU
         2 000664   200105 756100                    STQ     PICID,,AUTO

      824    12221    7                               MAXSIZE = MAXSIZE + 3;

  12221  2 000665   000003 236007                    LDQ     3,DL
         2 000666   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 000667   000674 710000 2                  TRA     s:12226

      825    12222    7                           CASE( ELSE );

      826    12223    7                               PICID = %XUD#P_DATE_M4UC;

  12223  2 000670   412000 236003                    LDQ     -125952,DU
         2 000671   200105 756100                    STQ     PICID,,AUTO

      827    12224    7                               MAXSIZE = MAXSIZE + 9;

  12224  2 000672   000011 236007                    LDQ     9,DL
         2 000673   200114 056100                    ASQ     MAXSIZE,,AUTO

      828    12225    7                           END/*CASE*/;

      829    12226    6                           IF LEN > 2
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:187  

  12226  2 000674   200100 236100                    LDQ     LEN,,AUTO
         2 000675   000002 116007                    CMPQ    2,DL
         2 000676   001143 604400 2                  TMOZ    s:12336

      830    12227    7                           THEN DO;

      831    12228                                /*
      832    12229                                  For alphabetic month variants, determine case shift.
      833    12230                                */
      834    12231    7                               IF SUBSTR( CHARS, J+LEN-1, 1 ) ~= PIC_CHAR

  12231  2 000677   200075 036100                    ADLQ    J,,AUTO
         2 000700   200011 470500                    LDP0    CHARS$,,AUTO
         2 000701   040100 106506                    CMPC    fill='040'O
         2 000702   077777 600001                    ADSC9   -1,Q,PR0                 cn=3,n=1
         2 000703   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1
         2 000704   001143 600000 2                  TZE     s:12336

      835    12232    8                               THEN DO;

      836    12233    8                                   PICID = PICID + 1; /* XUD#P_DATE_M?IC */

  12233  2 000705   200105 236100                    LDQ     PICID,,AUTO
         2 000706   001000 036003                    ADLQ    512,DU
         2 000707   200105 552140                    STBQ    PICID,'40'O,AUTO

      837    12234    8                                   IF SUBSTR( CHARS, J, 1 ) ~= PIC_CHAR

  12234  2 000710   200075 236100                    LDQ     J,,AUTO
         2 000711   040100 106506                    CMPC    fill='040'O
         2 000712   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 000713   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1
         2 000714   001143 600000 2                  TZE     s:12336

      838    12235    8                                   THEN
      839    12236    8                                       PICID = PICID + 1; /* XUD#P_DATE_M?LC */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:188  

  12236  2 000715   200105 236100                    LDQ     PICID,,AUTO
         2 000716   001000 036003                    ADLQ    512,DU
         2 000717   200105 552140                    STBQ    PICID,'40'O,AUTO

      840    12237    8                               END;

      841    12238    7                           END;

      842    12239    6                       END;

  12239  2 000720   001143 710000 2                  TRA     s:12336

      843    12240                        /*
      844    12241                          Q - quarter of year
      845    12242                        */
      846    12243    5                   CASE( %Q );

      847    12244    5                       USED_FLAG = %XUD#USED_Q;

  12244  2 000721   300000 220003                    LDX0    98304,DU
         2 000722   200111 740100                    STX0    USED_FLAG,,AUTO

      848    12245    5                       IF LEN ~= 1

  12245  2 000723   200100 236100                    LDQ     LEN,,AUTO
         2 000724   000001 116007                    CMPQ    1,DL
         2 000725   001621 601000 2                  TNZ     E_LONG_PICID

      849    12246    5                         THEN GOTO E_LONG_PICID;
      850    12247    5                       PICID = %XUD#P_DATE_Q;

  12247  2 000726   433000 236003                    LDQ     -117248,DU
         2 000727   200105 756100                    STQ     PICID,,AUTO

      851    12248    5                       MAXSIZE = MAXSIZE + 1;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:189  
  12248  2 000730   200114 054100                    AOS     MAXSIZE,,AUTO
         2 000731   001143 710000 2                  TRA     s:12336

      852    12249                        /*
      853    12250                          S - seconds
      854    12251                        */
      855    12252    5                   CASE( %S );

      856    12253    5                       IF ( PICID_USED & %( XUD#USED_T | XUD#USED_AMPM ))

  12253  2 000732   200107 220100                    LDX0    PICID_USED,,AUTO
         2 000733   000600 360003                    ANX0    384,DU
         2 000734   001613 601000 2                  TNZ     E_PICID_ORDER
         2 000735   200107 220100                    LDX0    PICID_USED,,AUTO
         2 000736   000741 600000 2                  TZE     s:12256
         2 000737   002000 360003                    ANX0    1024,DU
         2 000740   001613 600000 2                  TZE     E_PICID_ORDER

      857    12254    5                         OR ( PICID_USED AND NOT ( PICID_USED & %XUD#USED_MI ))
      858    12255    5                         THEN GOTO E_PICID_ORDER;
      859    12256    5                       USED_FLAG = %XUD#USED_S;

  12256  2 000741   001000 220003                    LDX0    512,DU
         2 000742   200111 740100                    STX0    USED_FLAG,,AUTO

      860    12257    6                       DO CASE( LEN );

  12257  2 000743   200100 236100                    LDQ     LEN,,AUTO
         2 000744   000003 116007                    CMPQ    3,DL
         2 000745   000747 602006 2                  TNC     s:12257+4,QL
         2 000746   000760 710000 2                  TRA     s:12263
         2 000747   000760 710000 2                  TRA     s:12263
         2 000750   000752 710000 2                  TRA     s:12259
         2 000751   000755 710000 2                  TRA     s:12261

      861    12258    6                       CASE( 1 );

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:190  
      862    12259    6                           PICID = %XUD#P_TIME_S1;

  12259  2 000752   466000 236003                    LDQ     -103424,DU
         2 000753   200105 756100                    STQ     PICID,,AUTO
         2 000754   000761 710000 2                  TRA     s:12265

      863    12260    6                       CASE( 2 );

      864    12261    6                           PICID = %XUD#P_TIME_S2;

  12261  2 000755   467000 236003                    LDQ     -102912,DU
         2 000756   200105 756100                    STQ     PICID,,AUTO
         2 000757   000761 710000 2                  TRA     s:12265

      865    12262    6                       CASE( ELSE );

      866    12263    6                           GOTO E_LONG_PICID;

  12263  2 000760   001621 710000 2                  TRA     E_LONG_PICID

      867    12264    6                       END/*CASE*/;

      868    12265    5                       MAXSIZE = MAXSIZE + 2;

  12265  2 000761   000002 236007                    LDQ     2,DL
         2 000762   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 000763   001143 710000 2                  TRA     s:12336

      869    12266                        /*
      870    12267                          T - clock tics (hundredths of second)
      871    12268                        */
      872    12269    5                   CASE( %T );

      873    12270    5                       IF ( PICID_USED & %XUD#USED_AMPM )

  12270  2 000764   200107 220100                    LDX0    PICID_USED,,AUTO
         2 000765   000200 360003                    ANX0    128,DU
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:191  
         2 000766   001613 601000 2                  TNZ     E_PICID_ORDER
         2 000767   200107 220100                    LDX0    PICID_USED,,AUTO
         2 000770   000773 600000 2                  TZE     s:12273
         2 000771   001000 360003                    ANX0    512,DU
         2 000772   001613 600000 2                  TZE     E_PICID_ORDER

      874    12271    5                         OR PICID_USED AND NOT ( PICID_USED & %XUD#USED_S )
      875    12272    5                         THEN GOTO E_PICID_ORDER;
      876    12273    5                       USED_FLAG = %XUD#USED_T;

  12273  2 000773   000400 220003                    LDX0    256,DU
         2 000774   200111 740100                    STX0    USED_FLAG,,AUTO

      877    12274    6                       DO CASE( LEN );

  12274  2 000775   200100 236100                    LDQ     LEN,,AUTO
         2 000776   000003 116007                    CMPQ    3,DL
         2 000777   001001 602006 2                  TNC     s:12274+4,QL
         2 001000   001012 710000 2                  TRA     s:12280
         2 001001   001012 710000 2                  TRA     s:12280
         2 001002   001004 710000 2                  TRA     s:12276
         2 001003   001007 710000 2                  TRA     s:12278

      878    12275    6                       CASE( 1 );

      879    12276    6                           PICID = %XUD#P_TIME_T1;

  12276  2 001004   470000 236003                    LDQ     -102400,DU
         2 001005   200105 756100                    STQ     PICID,,AUTO
         2 001006   001013 710000 2                  TRA     s:12282

      880    12277    6                       CASE( 2 );

      881    12278    6                           PICID = %XUD#P_TIME_T2;

  12278  2 001007   471000 236003                    LDQ     -101888,DU
         2 001010   200105 756100                    STQ     PICID,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:192  
         2 001011   001013 710000 2                  TRA     s:12282

      882    12279    6                       CASE( ELSE );

      883    12280    6                           GOTO E_LONG_PICID;

  12280  2 001012   001621 710000 2                  TRA     E_LONG_PICID

      884    12281    6                       END/*CASE*/;

      885    12282    5                       MAXSIZE = MAXSIZE + 2;

  12282  2 001013   000002 236007                    LDQ     2,DL
         2 001014   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 001015   001143 710000 2                  TRA     s:12336

      886    12283                        /*
      887    12284                          W - day of week
      888    12285                        */
      889    12286    5                   CASE( %W );

      890    12287    5                       USED_FLAG = %XUD#USED_W;

  12287  2 001016   040000 220003                    LDX0    16384,DU
         2 001017   200111 740100                    STX0    USED_FLAG,,AUTO

      891    12288    6                       DO CASE( LEN );

  12288  2 001020   200100 236100                    LDQ     LEN,,AUTO
         2 001021   000004 116007                    CMPQ    4,DL
         2 001022   001024 602006 2                  TNC     s:12288+4,QL
         2 001023   001047 710000 2                  TRA     s:12299
         2 001024   001047 710000 2                  TRA     s:12299
         2 001025   001030 710000 2                  TRA     s:12290
         2 001026   001035 710000 2                  TRA     s:12293
         2 001027   001042 710000 2                  TRA     s:12296

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:193  
      892    12289    6                       CASE( 1 );

      893    12290    6                           PICID = %XUD#P_DATE_W1UC;

  12290  2 001030   417000 236003                    LDQ     -123392,DU
         2 001031   200105 756100                    STQ     PICID,,AUTO

      894    12291    6                           MAXSIZE = MAXSIZE + 2;

  12291  2 001032   000002 236007                    LDQ     2,DL
         2 001033   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 001034   001053 710000 2                  TRA     s:12305

      895    12292    6                       CASE( 2 );

      896    12293    6                           PICID = %XUD#P_DATE_W2UC;

  12293  2 001035   422000 236003                    LDQ     -121856,DU
         2 001036   200105 756100                    STQ     PICID,,AUTO

      897    12294    6                           MAXSIZE = MAXSIZE + 2;

  12294  2 001037   000002 236007                    LDQ     2,DL
         2 001040   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 001041   001053 710000 2                  TRA     s:12305

      898    12295    6                       CASE( 3 );

      899    12296    6                           PICID = %XUD#P_DATE_W3UC;

  12296  2 001042   425000 236003                    LDQ     -120320,DU
         2 001043   200105 756100                    STQ     PICID,,AUTO

      900    12297    6                           MAXSIZE = MAXSIZE + 3;

  12297  2 001044   000003 236007                    LDQ     3,DL
         2 001045   200114 056100                    ASQ     MAXSIZE,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:194  
         2 001046   001053 710000 2                  TRA     s:12305

      901    12298    6                       CASE( ELSE );

      902    12299    6                           PICID = %XUD#P_DATE_W4UC;

  12299  2 001047   430000 236003                    LDQ     -118784,DU
         2 001050   200105 756100                    STQ     PICID,,AUTO

      903    12300    6                           MAXSIZE = MAXSIZE + 9;

  12300  2 001051   000011 236007                    LDQ     9,DL
         2 001052   200114 056100                    ASQ     MAXSIZE,,AUTO

      904    12301    6                       END/*CASE*/;

      905    12302                            /*
      906    12303                              Determine alphabetic case based on first and last chars.
      907    12304                            */
      908    12305    5                       IF SUBSTR( CHARS, J+LEN-1, 1 ) ~= PIC_CHAR

  12305  2 001053   200075 236100                    LDQ     J,,AUTO
         2 001054   200100 036100                    ADLQ    LEN,,AUTO
         2 001055   200011 470500                    LDP0    CHARS$,,AUTO
         2 001056   040100 106506                    CMPC    fill='040'O
         2 001057   077777 600001                    ADSC9   -1,Q,PR0                 cn=3,n=1
         2 001060   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1
         2 001061   001143 600000 2                  TZE     s:12336

      909    12306    6                       THEN DO;

      910    12307    6                           PICID = PICID + 1; /* becomes XUD#P_DATE_W?IC */

  12307  2 001062   200105 236100                    LDQ     PICID,,AUTO
         2 001063   001000 036003                    ADLQ    512,DU
         2 001064   200105 552140                    STBQ    PICID,'40'O,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:195  
      911    12308    6                           IF SUBSTR( CHARS, J, 1 ) ~= PIC_CHAR

  12308  2 001065   200075 236100                    LDQ     J,,AUTO
         2 001066   040100 106506                    CMPC    fill='040'O
         2 001067   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 001070   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1
         2 001071   001143 600000 2                  TZE     s:12336

      912    12309    6                           THEN
      913    12310    6                               PICID = PICID + 1; /* becomes XUD#P_DATE_W?LC */

  12310  2 001072   200105 236100                    LDQ     PICID,,AUTO
         2 001073   001000 036003                    ADLQ    512,DU
         2 001074   200105 552140                    STBQ    PICID,'40'O,AUTO

      914    12311    6                       END;

  12311  2 001075   001143 710000 2                  TRA     s:12336

      915    12312                        /*
      916    12313                          Y - year
      917    12314                        */
      918    12315    5                   CASE( %Y );

      919    12316    5                       USED_FLAG = %XUD#USED_Y;

  12316  2 001076   400000 220003                    LDX0    -131072,DU
         2 001077   200111 740100                    STX0    USED_FLAG,,AUTO

      920    12317    6                       DO CASE( LEN );

  12317  2 001100   200100 236100                    LDQ     LEN,,AUTO
         2 001101   000007 116007                    CMPQ    7,DL
         2 001102   001104 602006 2                  TNC     s:12317+4,QL
         2 001103   001142 710000 2                  TRA     s:12333
         2 001104   001142 710000 2                  TRA     s:12333
         2 001105   001113 710000 2                  TRA     s:12319
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:196  
         2 001106   001117 710000 2                  TRA     s:12322
         2 001107   001124 710000 2                  TRA     s:12325
         2 001110   001124 710000 2                  TRA     s:12325
         2 001111   001133 710000 2                  TRA     s:12329
         2 001112   001133 710000 2                  TRA     s:12329

      921    12318    6                       CASE( 1 );

      922    12319    6                           PICID = %XUD#P_DATE_Y1;

  12319  2 001113   401000 236003                    LDQ     -130560,DU
         2 001114   200105 756100                    STQ     PICID,,AUTO

      923    12320    6                           MAXSIZE = MAXSIZE + 1;

  12320  2 001115   200114 054100                    AOS     MAXSIZE,,AUTO
         2 001116   001143 710000 2                  TRA     s:12336

      924    12321    6                       CASE( 2 );

      925    12322    6                           PICID = %XUD#P_DATE_Y2;

  12322  2 001117   402000 236003                    LDQ     -130048,DU
         2 001120   200105 756100                    STQ     PICID,,AUTO

      926    12323    6                           MAXSIZE = MAXSIZE + 2;

  12323  2 001121   000002 236007                    LDQ     2,DL
         2 001122   200114 056100                    ASQ     MAXSIZE,,AUTO
         2 001123   001143 710000 2                  TRA     s:12336

      927    12324    6                       CASE( 3, 4 );

      928    12325    6                           PICID = %XUD#P_DATE_Y4;

  12325  2 001124   403000 236003                    LDQ     -129536,DU
         2 001125   200105 756100                    STQ     PICID,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:197  

      929    12326    6                           MAXSIZE = MAXSIZE + 4;

  12326  2 001126   000004 236007                    LDQ     4,DL
         2 001127   200114 056100                    ASQ     MAXSIZE,,AUTO

      930    12327    6                           USED_FLAG = USED_FLAG | %XUD#USED_YYY;

  12327  2 001130   000001 260003                    ORX0    1,DU
         2 001131   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001132   001143 710000 2                  TRA     s:12336

      931    12328    6                       CASE( 5, 6 );

      932    12329    6                           PICID = %XUD#P_DATE_Y5;

  12329  2 001133   404000 236003                    LDQ     -129024,DU
         2 001134   200105 756100                    STQ     PICID,,AUTO

      933    12330    6                           MAXSIZE = MAXSIZE + 6;

  12330  2 001135   000006 236007                    LDQ     6,DL
         2 001136   200114 056100                    ASQ     MAXSIZE,,AUTO

      934    12331    6                           USED_FLAG = USED_FLAG | %XUD#USED_YYY;

  12331  2 001137   000001 260003                    ORX0    1,DU
         2 001140   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001141   001143 710000 2                  TRA     s:12336

      935    12332    6                       CASE( ELSE );

      936    12333    6                           GOTO E_LONG_PICID;

  12333  2 001142   001621 710000 2                  TRA     E_LONG_PICID

      937    12334    6                       END/*CASE*/;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:198  

      938    12335
      939    12336    5                   END/*CASE*/;

  12336  2 001143   001261 710000 2                  TRA     s:12383

      940    12337    4               END/*WHEN*/;
      941    12338    4               WHENALTRETURN DO;

      942    12339                    /*
      943    12340                      Not a standard code... check for a suffix code.
      944    12341                    */
      945    12342    4                   IF NOT TIMESPAN AND PIC_CHAR ~= ' '

  12342  2 001144   200102 234100                    SZN     TIMESPAN,,AUTO
         2 001145   001261 604000 2                  TMI     s:12383
         2 001146   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001147   777000 376003                    ANQ     -512,DU
         2 001150   040000 116003                    CMPQ    16384,DU
         2 001151   001261 600000 2                  TZE     s:12383

      946    12343    5                   THEN DO;

      947    12344    5                       CALL CHK4SFX;

  12344  2 001152   010071 701000 2                  TSX1    CHK4SFX
         2 001153   000000 011000                    NOP     0

      948    12345    5                       MAXSIZE = MAXSIZE + LEN;

  12345  2 001154   200114 236100                    LDQ     MAXSIZE,,AUTO
         2 001155   200100 036100                    ADLQ    LEN,,AUTO
         2 001156   200114 756100                    STQ     MAXSIZE,,AUTO

      949    12346    6                       DO CASE( IDX );

  12346  2 001157   200076 235100                    LDA     IDX,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:199  
         2 001160   000015 115007                    CMPA    13,DL
         2 001161   001163 602005 2                  TNC     s:12346+4,AL
         2 001162   001261 710000 2                  TRA     s:12383
         2 001163   001261 710000 2                  TRA     s:12383
         2 001164   001200 710000 2                  TRA     s:12348
         2 001165   001217 710000 2                  TRA     s:12357
         2 001166   001205 710000 2                  TRA     s:12351
         2 001167   001224 710000 2                  TRA     s:12360
         2 001170   001212 710000 2                  TRA     s:12354
         2 001171   001231 710000 2                  TRA     s:12363
         2 001172   001212 710000 2                  TRA     s:12354
         2 001173   001231 710000 2                  TRA     s:12363
         2 001174   001236 710000 2                  TRA     s:12366
         2 001175   001243 710000 2                  TRA     s:12369
         2 001176   001250 710000 2                  TRA     s:12372
         2 001177   001255 710000 2                  TRA     s:12375

      950    12347    6                       CASE( %XUD#SFX_AD );

      951    12348    6                           PICID = %XUD#P_DATE_AD;

  12348  2 001200   436000 236003                    LDQ     -115712,DU
         2 001201   200105 756100                    STQ     PICID,,AUTO

      952    12349    6                           USED_FLAG = %XUD#USED_ADBC;

  12349  2 001202   020000 220003                    LDX0    8192,DU
         2 001203   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001204   001261 710000 2                  TRA     s:12383

      953    12350    6                       CASE( %XUD#SFX_BC );

      954    12351    6                           PICID = %XUD#P_DATE_BC;

  12351  2 001205   440000 236003                    LDQ     -114688,DU
         2 001206   200105 756100                    STQ     PICID,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:200  
      955    12352    6                           USED_FLAG = %XUD#USED_ADBC;

  12352  2 001207   020000 220003                    LDX0    8192,DU
         2 001210   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001211   001261 710000 2                  TRA     s:12383

      956    12353    6                       CASE( %XUD#SFX_AM, %XUD#SFX_PM );

      957    12354    6                           PICID = %XUD#P_TIME_APM;

  12354  2 001212   472000 236003                    LDQ     -101376,DU
         2 001213   200105 756100                    STQ     PICID,,AUTO

      958    12355    6                           USED_FLAG = %XUD#USED_AMPM;

  12355  2 001214   000200 220003                    LDX0    128,DU
         2 001215   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001216   001261 710000 2                  TRA     s:12383

      959    12356    6                       CASE( %XUD#SFX_A_D );

      960    12357    6                           PICID = %XUD#P_DATE_A_D;

  12357  2 001217   437000 236003                    LDQ     -115200,DU
         2 001220   200105 756100                    STQ     PICID,,AUTO

      961    12358    6                           USED_FLAG = %XUD#USED_ADBC;

  12358  2 001221   020000 220003                    LDX0    8192,DU
         2 001222   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001223   001261 710000 2                  TRA     s:12383

      962    12359    6                       CASE( %XUD#SFX_B_C );

      963    12360    6                           PICID = %XUD#P_DATE_B_C;

  12360  2 001224   441000 236003                    LDQ     -114176,DU
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:201  
         2 001225   200105 756100                    STQ     PICID,,AUTO

      964    12361    6                           USED_FLAG = %XUD#USED_ADBC;

  12361  2 001226   020000 220003                    LDX0    8192,DU
         2 001227   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001230   001261 710000 2                  TRA     s:12383

      965    12362    6                       CASE( %XUD#SFX_A_M, %XUD#SFX_P_M );

      966    12363    6                           PICID = %XUD#P_TIME_AP_M;

  12363  2 001231   473000 236003                    LDQ     -100864,DU
         2 001232   200105 756100                    STQ     PICID,,AUTO

      967    12364    6                           USED_FLAG = %XUD#USED_AMPM;

  12364  2 001233   000200 220003                    LDX0    128,DU
         2 001234   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001235   001261 710000 2                  TRA     s:12383

      968    12365    6                       CASE( %XUD#SFX_CE );

      969    12366    6                           PICID = %XUD#P_DATE_CE;

  12366  2 001236   442000 236003                    LDQ     -113664,DU
         2 001237   200105 756100                    STQ     PICID,,AUTO

      970    12367    6                           USED_FLAG = %XUD#USED_ADBC;

  12367  2 001240   020000 220003                    LDX0    8192,DU
         2 001241   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001242   001261 710000 2                  TRA     s:12383

      971    12368    6                       CASE( %XUD#SFX_C_E );

      972    12369    6                           PICID = %XUD#P_DATE_C_E;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:202  

  12369  2 001243   443000 236003                    LDQ     -113152,DU
         2 001244   200105 756100                    STQ     PICID,,AUTO

      973    12370    6                           USED_FLAG = %XUD#USED_ADBC;

  12370  2 001245   020000 220003                    LDX0    8192,DU
         2 001246   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001247   001261 710000 2                  TRA     s:12383

      974    12371    6                       CASE( %XUD#SFX_BCE );

      975    12372    6                           PICID = %XUD#P_DATE_BCE;

  12372  2 001250   444000 236003                    LDQ     -112640,DU
         2 001251   200105 756100                    STQ     PICID,,AUTO

      976    12373    6                           USED_FLAG = %XUD#USED_ADBC;

  12373  2 001252   020000 220003                    LDX0    8192,DU
         2 001253   200111 740100                    STX0    USED_FLAG,,AUTO
         2 001254   001261 710000 2                  TRA     s:12383

      977    12374    6                       CASE( %XUD#SFX_B_C_E );

      978    12375    6                           PICID = %XUD#P_DATE_B_C_E;

  12375  2 001255   445000 236003                    LDQ     -112128,DU
         2 001256   200105 756100                    STQ     PICID,,AUTO

      979    12376    6                           USED_FLAG = %XUD#USED_ADBC;

  12376  2 001257   020000 220003                    LDX0    8192,DU
         2 001260   200111 740100                    STX0    USED_FLAG,,AUTO

      980    12377    6                       END/*CASE*/;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:203  
      981    12378    5                   END;

      982    12379    4               END/*WHENALT*/;

      983    12380                    /*
      984    12381                      Common processing for all subfield identifiers...
      985    12382                    */
      986    12383    3               IF PICID > 0

  12383  2 001261   200105 236100                    LDQ     PICID,,AUTO
         2 001262   777000 316003                    CANQ    -512,DU
         2 001263   001503 600000 2                  TZE     s:12467

      987    12384    4               THEN DO;

      988    12385    4                   IF PICTYPE = %XUD#PICTYPE_UNDEF

  12385  2 001264   200106 236100                    LDQ     PICTYPE,,AUTO
         2 001265   777000 376003                    ANQ     -512,DU
         2 001266   040000 116003                    CMPQ    16384,DU
         2 001267   001302 601000 2                  TNZ     s:12400

      989    12386    5                   THEN DO;

      990    12387                        /*
      991    12388                          If picture type is unknown, set it based on type of code.
      992    12389                        */
      993    12390    5                       IF PICID < %XUD#P_TIME_BASE

  12390  2 001270   200105 236100                    LDQ     PICID,,AUTO
         2 001271   777000 376003                    ANQ     -512,DU
         2 001272   453000 116003                    CMPQ    -109056,DU
         2 001273   001277 603000 2                  TRC     s:12394

      994    12391    5                       THEN
      995    12392    5                           PICTYPE = %XUD#PICTYPE_DATE;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:204  
  12392  2 001274   104000 236003                    LDQ     34816,DU
         2 001275   200106 756100                    STQ     PICTYPE,,AUTO
         2 001276   001343 710000 2                  TRA     s:12419

      996    12393    5                       ELSE
      997    12394    5                           PICTYPE = %XUD#PICTYPE_TIME;

  12394  2 001277   124000 236003                    LDQ     43008,DU
         2 001300   200106 756100                    STQ     PICTYPE,,AUTO

      998    12395    5                   END;

  12395  2 001301   001343 710000 2                  TRA     s:12419

      999    12396    5                   ELSE DO;

     1000    12397                        /*
     1001    12398                          If picture type is known, make sure code is valid for type.
     1002    12399                        */
     1003    12400    5                       IF ( PICID < %XUD#P_TIME_BASE

  12400  2 001302   200105 236100                    LDQ     PICID,,AUTO
         2 001303   777000 376003                    ANQ     -512,DU
         2 001304   453000 116003                    CMPQ    -109056,DU
         2 001305   001312 603000 2                  TRC     s:12400+8
         2 001306   200106 236100                    LDQ     PICTYPE,,AUTO
         2 001307   777000 376003                    ANQ     -512,DU
         2 001310   124000 116003                    CMPQ    43008,DU
         2 001311   001627 600000 2                  TZE     E_BAD_PICID
         2 001312   200105 236100                    LDQ     PICID,,AUTO
         2 001313   777000 376003                    ANQ     -512,DU
         2 001314   453000 116003                    CMPQ    -109056,DU
         2 001315   001322 602000 2                  TNC     s:12408
         2 001316   200106 236100                    LDQ     PICTYPE,,AUTO
         2 001317   777000 376003                    ANQ     -512,DU
         2 001320   104000 116003                    CMPQ    34816,DU
         2 001321   001627 600000 2                  TZE     E_BAD_PICID
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:205  

     1004    12401    5                           AND PICTYPE = %XUD#PICTYPE_TIME )
     1005    12402    5                         OR ( PICID >= %XUD#P_TIME_BASE
     1006    12403    5                           AND PICTYPE = %XUD#PICTYPE_DATE )
     1007    12404    5                         THEN GOTO E_BAD_PICID;
     1008    12405                            /*
     1009    12406                              If code is AM/PM... change code for hour to be mod 12.
     1010    12407                            */
     1011    12408    5                       IF USED_FLAG = %XUD#USED_AMPM

  12408  2 001322   200111 220100                    LDX0    USED_FLAG,,AUTO
         2 001323   000200 100003                    CMPX0   128,DU
         2 001324   001343 601000 2                  TNZ     s:12419

     1012    12409    6                       THEN DO;

     1013    12410    6                           IF PICID_H < 0

  12410  2 001325   200113 235100                    LDA     PICID_H,,AUTO
         2 001326   001613 604000 2                  TMI     E_PICID_ORDER

     1014    12411    6                             THEN GOTO E_PICID_ORDER;
     1015    12412    6                           SUBSTR( PICTURE.T, PICID_H, 1 ) =

  12412  2 001327   200006 470500                    LDP0    PICTURE$,,AUTO
         2 001330   000100 101505                    MRL     fill='000'O
         2 001331   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         2 001332   200152 000004                    ADSC9   LIMIT+1,,AUTO            cn=0,n=4
         2 001333   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 001334   000001 036007                    ADLQ    1,DL
         2 001335   000033 736000                    QLS     27
         2 001336   000002 276000 3                  ORQ     2
         2 001337   200153 756100                    STQ     LIMIT+2,,AUTO
         2 001340   040105 100500                    MLR     fill='040'O
         2 001341   200153 000004                    ADSC9   LIMIT+2,,AUTO            cn=0,n=4
         2 001342   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:206  
     1016    12413    6                             BINASC( ASCBIN( SUBSTR( PICTURE.T, PICID_H, 1 )) + 1 );
     1017    12414    6                       END;

     1018    12415    5                   END;

     1019    12416                        /*
     1020    12417                          Make sure a subfield appears only once in a picture.
     1021    12418                        */
     1022    12419    4                   IF ( PICID_USED & USED_FLAG )

  12419  2 001343   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001344   200111 360100                    ANX0    USED_FLAG,,AUTO
         2 001345   001624 601000 2                  TNZ     E_DUP_PICID

     1023    12420    4                     THEN GOTO E_DUP_PICID;
     1024    12421    4                   PICID_USED = ( PICID_USED | USED_FLAG );

  12421  2 001346   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001347   200111 260100                    ORX0    USED_FLAG,,AUTO
         2 001350   200107 740100                    STX0    PICID_USED,,AUTO

     1025    12422                        /*
     1026    12423                          Give error if use of picture would yield ambiguous values.
     1027    12424                        */
     1028    12425    4                   IF I > 0

  12425  2 001351   200074 235100                    LDA     I,,AUTO
         2 001352   001472 604400 2                  TMOZ    s:12459

     1029    12426    5                   THEN DO;

     1030    12427    5                       PIC_CHAR = SUBSTR( PICTURE.T, I-1, 1 );

  12427  2 001353   200006 470500                    LDP0    PICTURE$,,AUTO
         2 001354   040100 100505                    MLR     fill='040'O
         2 001355   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001356   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:207  

     1031    12428    5                       IF PIC_CHAR = BINASC( %XUD#P_SWITCH )

  12428  2 001357   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001360   777000 376003                    ANQ     -512,DU
         2 001361   400000 116003                    CMPQ    -131072,DU
         2 001362   001367 600000 2                  TZE     s:12431
         2 001363   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001364   777000 376003                    ANQ     -512,DU
         2 001365   040000 116003                    CMPQ    16384,DU
         2 001366   001375 603000 2                  TRC     s:12435

     1032    12429    5                         OR PIC_CHAR < %XUD#BLANK
     1033    12430    6                       THEN DO;

     1034    12431    6                           PIC_CHAR = SUBSTR( PICTURE.T, I-2, 1 );

  12431  2 001367   040100 100505                    MLR     fill='040'O
         2 001370   077777 600001                    ADSC9   -1,A,PR0                 cn=3,n=1
         2 001371   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1

     1035    12432    6                           IDX = 2;

  12432  2 001372   000002 236007                    LDQ     2,DL
         2 001373   200076 756100                    STQ     IDX,,AUTO

     1036    12433    6                       END;

  12433  2 001374   001377 710000 2                  TRA     VALIDATE_CHAR

     1037    12434    5                       ELSE
     1038    12435    5                           IDX = 1;

  12435  2 001375   000001 236007                    LDQ     1,DL
         2 001376   200076 756100                    STQ     IDX,,AUTO

  12428  2 001377                       VALIDATE_CH* null
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:208  
     1039    12436    5   VALIDATE_CHAR:      ;
     1040    12437    5                       IF PIC_CHAR <= BINASC( %XUD#P_BASE )

  12437  2 001377   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001400   777000 376003                    ANQ     -512,DU
         2 001401   400000 116003                    CMPQ    -131072,DU
         2 001402   001472 602000 2                  TNC     s:12459
         2 001403   001472 600000 2                  TZE     s:12459

     1041    12438    5                         THEN EXIT;
     1042    12439    6                       DO CASE( XUD_VALID( PICID - %XUD#P_BASE ) * 3 +

  12439  2 001404   200105 236100                    LDQ     PICID,,AUTO
         2 001405   000033 772000                    QRL     27
         2 001406   200152 756100                    STQ     LIMIT+1,,AUTO
         2 001407   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001410   000033 772000                    QRL     27
         2 001411   000100 101406                    MRL     fill='000'O
         2 001412   777714 000001 1                  ADSC9   MAX_DATE_INIT-233,Q      cn=0,n=1
         2 001413   200153 000004                    ADSC9   LIMIT+2,,AUTO            cn=0,n=4
         2 001414   200152 235100                    LDA     LIMIT+1,,AUTO
         2 001415   000100 101405                    MRL     fill='000'O
         2 001416   777714 000001 1                  ADSC9   MAX_DATE_INIT-233,A      cn=0,n=1
         2 001417   200154 000004                    ADSC9   LIMIT+3,,AUTO            cn=0,n=4
         2 001420   200154 236100                    LDQ     LIMIT+3,,AUTO
         2 001421   000003 402007                    MPY     3,DL
         2 001422   200153 036100                    ADLQ    LIMIT+2,,AUTO
         2 001423   000004 136007                    SBLQ    4,DL
         2 001424   000011 116007                    CMPQ    9,DL
         2 001425   001427 602006 2                  TNC     s:12439+19,QL
         2 001426   001443 710000 2                  TRA     s:12447
         2 001427   001440 710000 2                  TRA     s:12444
         2 001430   001443 710000 2                  TRA     s:12447
         2 001431   001443 710000 2                  TRA     s:12447
         2 001432   001443 710000 2                  TRA     s:12447
         2 001433   001443 710000 2                  TRA     s:12447
         2 001434   001440 710000 2                  TRA     s:12444
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:209  
         2 001435   001443 710000 2                  TRA     s:12447
         2 001436   001443 710000 2                  TRA     s:12447
         2 001437   001440 710000 2                  TRA     s:12444

     1043    12440    6                         XUD_VALID( ASCBIN( PIC_CHAR ) - %XUD#P_BASE ) );
     1044    12441    6                       CASE( %(XUD#PV_ALPHA*3 + XUD#PV_ALPHA),

     1045    12442    6                         %(XUD#PV_NUM_F*3 + XUD#PV_NUM_V),
     1046    12443    6                         %(XUD#PV_NUM_V*3 + XUD#PV_NUM_V) );
     1047    12444    6                           ERR = E_XUD#RUNON_PICID;

  12444  2 001440   000044 236000 1                  LDQ     E_XUD#RUNON_PICID
         2 001441   200103 756100                    STQ     ERR,,AUTO

     1048    12445    6                           GOTO ERROR_RETURN;

  12445  2 001442   000003 710000 2                  TRA     ERROR_RETURN

     1049    12446    6                       END/*CASE*/;

     1050    12447    5                       IF PIC_CHAR = BINASC( %XUD#P_DATE_BC )

  12447  2 001443   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001444   777000 376003                    ANQ     -512,DU
         2 001445   440000 116003                    CMPQ    -114688,DU
         2 001446   001463 600000 2                  TZE     s:12452
         2 001447   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001450   777000 376003                    ANQ     -512,DU
         2 001451   441000 116003                    CMPQ    -114176,DU
         2 001452   001463 600000 2                  TZE     s:12452
         2 001453   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001454   777000 376003                    ANQ     -512,DU
         2 001455   444000 116003                    CMPQ    -112640,DU
         2 001456   001463 600000 2                  TZE     s:12452
         2 001457   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001460   777000 376003                    ANQ     -512,DU
         2 001461   445000 116003                    CMPQ    -112128,DU
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:210  
         2 001462   001472 601000 2                  TNZ     s:12459

     1051    12448    5                         OR PIC_CHAR = BINASC( %XUD#P_DATE_B_C )
     1052    12449    5                         OR PIC_CHAR = BINASC( %XUD#P_DATE_BCE )
     1053    12450    5                         OR PIC_CHAR = BINASC( %XUD#P_DATE_B_C_E )
     1054    12451    6                       THEN DO;

     1055    12452    6                           PIC_CHAR = SUBSTR( PICTURE.T, I - IDX - 1, 1 );

  12452  2 001463   200074 236100                    LDQ     I,,AUTO
         2 001464   200076 136100                    SBLQ    IDX,,AUTO
         2 001465   200006 470500                    LDP0    PICTURE$,,AUTO
         2 001466   040100 100506                    MLR     fill='040'O
         2 001467   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 001470   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1

     1056    12453    6                           GOTO VALIDATE_CHAR;

  12453  2 001471   001377 710000 2                  TRA     VALIDATE_CHAR

     1057    12454    6                       END;
     1058    12455    5                   END;
     1059    12456                        /*
     1060    12457                          Move code into internal picture.
     1061    12458                        */
     1062    12459    4                   SUBSTR( PICTURE.T, I, 1 ) = BINASC( PICID );

  12459  2 001472   200006 470500                    LDP0    PICTURE$,,AUTO
         2 001473   200074 235100                    LDA     I,,AUTO
         2 001474   040105 100500                    MLR     fill='040'O
         2 001475   200105 000001                    ADSC9   PICID,,AUTO              cn=0,n=1
         2 001476   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1

     1063    12460    4                   J = J + LEN;

  12460  2 001477   200075 236100                    LDQ     J,,AUTO
         2 001500   200100 036100                    ADLQ    LEN,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:211  
         2 001501   200075 756100                    STQ     J,,AUTO

     1064    12461    4               END;

  12461  2 001502   001531 710000 2                  TRA     NEXT_CHAR

     1065    12462    4               ELSE DO;

     1066    12463                        /*
     1067    12464                          Not a subfield identifier...
     1068    12465                            move character intact from external to internal picture.
     1069    12466                        */
     1070    12467    4                   IF ( PIC_CHAR >= 'A' AND PIC_CHAR <= 'Z' )

  12467  2 001503   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001504   777000 376003                    ANQ     -512,DU
         2 001505   101000 116003                    CMPQ    33280,DU
         2 001506   001514 602000 2                  TNC     s:12467+9
         2 001507   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001510   777000 376003                    ANQ     -512,DU
         2 001511   132000 116003                    CMPQ    46080,DU
         2 001512   001603 602000 2                  TNC     E_BAD_PIC
         2 001513   001603 600000 2                  TZE     E_BAD_PIC
         2 001514   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 001515   777000 376003                    ANQ     -512,DU
         2 001516   040000 116003                    CMPQ    16384,DU
         2 001517   001603 602000 2                  TNC     E_BAD_PIC

     1071    12468    4                     OR PIC_CHAR < %XUD#BLANK
     1072    12469    4                     THEN GOTO E_BAD_PIC;
     1073    12470    4                   SUBSTR( PICTURE.T, I, 1 ) = SUBSTR( CHARS, J, 1 );

  12470  2 001520   200011 470500                    LDP0    CHARS$,,AUTO
         2 001521   200075 235100                    LDA     J,,AUTO
         2 001522   200006 471500                    LDP1    PICTURE$,,AUTO
         2 001523   200074 236100                    LDQ     I,,AUTO
         2 001524   040106 100505                    MLR     fill='040'O
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:212  
         2 001525   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
         2 001526   100000 200001                    ADSC9   0,Q,PR1                  cn=1,n=1

     1074    12471    4                   J = J + 1;

  12471  2 001527   200075 054100                    AOS     J,,AUTO

     1075    12472    4                   MAXSIZE = MAXSIZE + 1;

  12472  2 001530   200114 054100                    AOS     MAXSIZE,,AUTO

     1076    12473    4               END;

  12470  2 001531                       NEXT_CHAR    null
     1077    12474
     1078    12475    3   NEXT_CHAR:  ;
     1079    12476    3               I = I + 1;

  12476  2 001531   200074 054100                    AOS     I,,AUTO

     1080    12477    3           END/*SELECT*/;

     1081    12478    2       END/*WHILE*/;

  12478  2 001532   200075 236100                    LDQ     J,,AUTO
         2 001533   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 001534   000120 604000 2                  TMI     s:12025

     1082    12479
     1083    12480            /*
     1084    12481              All done parsing... check for meaningless subfield combinations.
     1085    12482            */
     1086    12483    1       IF (( PICID_USED & %XUD#USED_ADBC )

  12483  2 001535   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001536   020000 360003                    ANX0    8192,DU
         2 001537   001543 600000 2                  TZE     s:12483+6
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:213  
         2 001540   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001541   000001 360003                    ANX0    1,DU
         2 001542   001565 600000 2                  TZE     s:12492
         2 001543   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001544   400000 360003                    ANX0    -131072,DU
         2 001545   001554 600000 2                  TZE     s:12483+15
         2 001546   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001547   100002 360003                    ANX0    32770,DU
         2 001550   001554 600000 2                  TZE     s:12483+15
         2 001551   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001552   200000 360003                    ANX0    65536,DU
         2 001553   001565 600000 2                  TZE     s:12492
         2 001554   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001555   044000 360003                    ANX0    18432,DU
         2 001556   001570 600000 2                  TZE     s:12495
         2 001557   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001560   000002 360003                    ANX0    2,DU
         2 001561   001570 601000 2                  TNZ     s:12495
         2 001562   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001563   600000 360003                    ANX0    -65536,DU
         2 001564   001570 600000 2                  TZE     s:12495

     1087    12484    1         AND NOT ( PICID_USED & %XUD#USED_YYY ))
     1088    12485    1       OR (( PICID_USED & %XUD#USED_Y )
     1089    12486    1         AND ( PICID_USED & %XUD#USED_D )
     1090    12487    1         AND NOT ( PICID_USED & %XUD#USED_MO ))
     1091    12488    1       OR (( PICID_USED & %( XUD#USED_W | XUD#USED_H ))
     1092    12489    1         AND NOT ( PICID_USED & %XUD#USED_DAY )
     1093    12490    1         AND ( PICID_USED & %( XUD#USED_Y | XUD#USED_MO )))
     1094    12491    2       THEN DO;

     1095    12492    2           ERR = E_XUD#AMBIGUOUS_PIC;

  12492  2 001565   000045 236000 1                  LDQ     E_XUD#AMBIGUOUS_PIC
         2 001566   200103 756100                    STQ     ERR,,AUTO

     1096    12493    2           GOTO ERROR_RETURN;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:214  

  12493  2 001567   000003 710000 2                  TRA     ERROR_RETURN

     1097    12494    2       END;
     1098    12495    1       IF PICID_USED = USED_BEFORE

  12495  2 001570   200107 220100                    LDX0    PICID_USED,,AUTO
         2 001571   200112 100100                    CMPX0   USED_BEFORE,,AUTO
         2 001572   001637 600000 2                  TZE     E_NO_PICIDS

     1099    12496    1         THEN GOTO E_NO_PICIDS;
     1100    12497
     1101    12498    1       PICTURE.L = I;

  12498  2 001573   200006 470500                    LDP0    PICTURE$,,AUTO
         2 001574   000100 101500                    MRL     fill='000'O
         2 001575   200074 000004                    ADSC9   I,,AUTO                  cn=0,n=4
         2 001576   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     1102    12499    1       XUD_PARAM.MAX_SIZE = MAXSIZE;

  12499  2 001577   200003 471500                    LDP1    @XUD_PARAM,,AUTO
         2 001600   200114 236100                    LDQ     MAXSIZE,,AUTO
         2 001601   100001 552104                    STBQ    1,'04'O,PR1

     1103    12500    1       GOTO NORMAL_RETURN;

  12500  2 001602   000007 710000 2                  TRA     NORMAL_RETURN

     1104    12501
     1105    12502    1   E_BAD_PIC:
     1106    12503    1       IF TIMESPAN

  12503  2 001603   200102 234100       E_BAD_PIC    SZN     TIMESPAN,,AUTO
         2 001604   001610 605000 2                  TPL     s:12505

     1107    12504    1         THEN ERR = E_XUD#BAD_TIME_PIC;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:215  

  12504  2 001605   000041 236000 1                  LDQ     E_XUD#BAD_TIME_PIC
         2 001606   200103 756100                    STQ     ERR,,AUTO
         2 001607   001612 710000 2                  TRA     s:12506

     1108    12505    1         ELSE ERR = E_XUD#BAD_PIC;

  12505  2 001610   000040 236000 1                  LDQ     E_XUD#BAD_PIC
         2 001611   200103 756100                    STQ     ERR,,AUTO

     1109    12506    1       GOTO ERROR_RETURN;

  12506  2 001612   000003 710000 2                  TRA     ERROR_RETURN

     1110    12507    1   E_PICID_ORDER:
     1111    12508    1       ERR = E_XUD#PICID_ORDER;

  12508  2 001613   000066 236000 1     E_PICID_ORD* LDQ     E_XUD#PICID_ORDER
         2 001614   200103 756100                    STQ     ERR,,AUTO

     1112    12509    1       GOTO ERROR_RETURN;

  12509  2 001615   000003 710000 2                  TRA     ERROR_RETURN

     1113    12510    1   E_BAD_PIC_QUOTE:
     1114    12511    1       ERR = E_XUD#BAD_PIC_QUOTE;

  12511  2 001616   000042 236000 1     E_BAD_PIC_Q* LDQ     E_XUD#BAD_PIC_QUOTE
         2 001617   200103 756100                    STQ     ERR,,AUTO

     1115    12512    1       GOTO ERROR_RETURN;

  12512  2 001620   000003 710000 2                  TRA     ERROR_RETURN

     1116    12513    1   E_LONG_PICID:
     1117    12514    1       ERR = E_XUD#LONG_PICID;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:216  
  12514  2 001621   000043 236000 1     E_LONG_PICID LDQ     E_XUD#LONG_PICID
         2 001622   200103 756100                    STQ     ERR,,AUTO

     1118    12515    1       GOTO ERROR_RETURN;

  12515  2 001623   000003 710000 2                  TRA     ERROR_RETURN

     1119    12516    1   E_DUP_PICID:
     1120    12517    1       ERR = E_XUD#DUP_PICID;

  12517  2 001624   000064 236000 1     E_DUP_PICID  LDQ     E_XUD#DUP_PICID
         2 001625   200103 756100                    STQ     ERR,,AUTO

     1121    12518    1       GOTO ERROR_RETURN;

  12518  2 001626   000003 710000 2                  TRA     ERROR_RETURN

     1122    12519    1   E_BAD_PICID:
     1123    12520    1       IF TIMESPAN

  12520  2 001627   200102 234100       E_BAD_PICID  SZN     TIMESPAN,,AUTO
         2 001630   001634 605000 2                  TPL     s:12522

     1124    12521    1         THEN ERR = E_XUD#BAD_TIME_PIC;

  12521  2 001631   000041 236000 1                  LDQ     E_XUD#BAD_TIME_PIC
         2 001632   200103 756100                    STQ     ERR,,AUTO
         2 001633   001636 710000 2                  TRA     s:12523

     1125    12522    1         ELSE ERR = E_XUD#BAD_PICID;

  12522  2 001634   000063 236000 1                  LDQ     E_XUD#BAD_PICID
         2 001635   200103 756100                    STQ     ERR,,AUTO

     1126    12523    1       GOTO ERROR_RETURN;

  12523  2 001636   000003 710000 2                  TRA     ERROR_RETURN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:217  

     1127    12524    1   E_NO_PICIDS:
     1128    12525    1       ERR = E_XUD#NO_PICIDS;

  12525  2 001637   000065 236000 1     E_NO_PICIDS  LDQ     E_XUD#NO_PICIDS
         2 001640   200103 756100                    STQ     ERR,,AUTO

     1129    12526    1       GOTO ERROR_RETURN;

  12526  2 001641   000003 710000 2                  TRA     ERROR_RETURN

     1130    12527
     1131    12528        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:218  
     1132    12529        /******************************************************************************/
     1133    12530        /*F*
     1134    12531        NAME:   XUD$CHAR_UTS
     1135    12532        PURPOSE:
     1136    12533                Convert from character to UTS.
     1137    12534        */
     1138    12535        /*D*
     1139    12536        NAME:   XUD$CHAR_UTS
     1140    12537        CALL:
     1141    12538                CALL XUD$CHAR_UTS ( XUD_PARAM, char, uts ) ALTRET ( error );
     1142    12539        PARAMETERS:
     1143    12540                XUD_PARAM - Standard parameter block.
     1144    12541                char - The character date to convert.
     1145    12542                uts - Returns the date as a UTS.
     1146    12543        INTERFACE:
     1147    12544                SETUP_CHARS_IN
     1148    12545                SETUP_PICTURE
     1149    12546                CVT_FROM_CHAR
     1150    12547        DESCRIPTION:
     1151    12548                This routine calls a subroutine to convert a date/time character
     1152    12549                string into a binary date and time, then combines these into a DATE
     1153    12550                value.
     1154    12551                An overflow or underflow error occurs if the value is above or below
     1155    12552                the UTS range.
     1156    12553        */
     1157    12554        /******************************************************************************/
     1158    12555
     1159    12556    1   XUD$CHAR_UTS: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;

  12556  2 001642   000000 700200 xent  XUD$CHAR_UTS TSX0  ! X66_AUTO_3
         2 001643   000164 000003                    ZERO    116,3

     1160    12557
     1161    12558    1       CALL SETUP_CHARS_IN( ADDR(DATA_IN) ) ALTRET( UTS_UNDEFINED );

  12558  2 001644   200004 236100                    LDQ     @DATA_IN,,AUTO
         2 001645   200156 756100                    STQ     LIMIT+5,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:219  
         2 001646   200156 630500                    EPPR0   LIMIT+5,,AUTO
         2 001647   200137 450500                    STP0    SYSTEM_YEAR+3,,AUTO
         2 001650   002233 701000 2                  TSX1    SETUP_CHARS_IN
         2 001651   001732 702000 2                  TSX2    UTS_UNDEFINED

     1162    12559    1       CALL SETUP_PICTURE ALTRET( UTS_UNDEFINED );

  12559  2 001652   002351 701000 2                  TSX1    SETUP_PICTURE
         2 001653   001732 702000 2                  TSX2    UTS_UNDEFINED

     1163    12560    1       CALL CVT_FROM_CHAR;

  12560  2 001654   004510 701000 2                  TSX1    CVT_FROM_CHAR
         2 001655   000000 011000                    NOP     0

  12559  2 001656                       UTS_CALC     null
     1164    12561    1   UTS_CALC: ;
     1165    12562    1       IF NOT TIMESPAN

  12562  2 001656   200102 234100                    SZN     TIMESPAN,,AUTO
         2 001657   001662 604000 2                  TMI     s:12564

     1166    12563    1         THEN DAYS = DAYS - %XUD#UTS_BASE;

  12563  2 001660   000003 236000 3                  LDQ     3
         2 001661   200055 056100                    ASQ     DAYS,,AUTO

     1167    12564    1       IF DAYS < 0 OR TICS < 0

  12564  2 001662   200055 235100                    LDA     DAYS,,AUTO
         2 001663   001726 604000 2                  TMI     UTS_UNDERFLOW
         2 001664   200056 236100                    LDQ     TICS,,AUTO
         2 001665   001726 604000 2                  TMI     UTS_UNDERFLOW

     1168    12565    1         THEN GOTO UTS_UNDERFLOW;
     1169    12566    1       IF DAYS > 31814           /* 2**36 / %UTS_25TH_DAY */

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:220  
  12566  2 001666   076106 115007                    CMPA    31814,DL
         2 001667   001737 605400 2                  TPNZ    UTS_OVERFLOW

     1170    12567    1         THEN GOTO UTS_OVERFLOW;
     1171    12568    1       CALL XUD$UTS_ADJ_25TH (UTS, 0, DAYS * %UTS_25TH_DAY#) ALTRET (UTS_OVERFLOW);

  12568  2 001670   200055 236100                    LDQ     DAYS,,AUTO
         2 001671   000004 402000 3                  MPY     4
         2 001672   200152 756100                    STQ     LIMIT+1,,AUTO
         2 001673   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 001674   200155 450500                    STP0    LIMIT+4,,AUTO
         2 001675   000005 236000 3                  LDQ     5
         2 001676   200154 756100                    STQ     LIMIT+3,,AUTO
         2 001677   200057 631500                    EPPR1   UTS,,AUTO
         2 001700   200153 451500                    STP1    LIMIT+2,,AUTO
         2 001701   200153 630500                    EPPR0   LIMIT+2,,AUTO
         2 001702   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001703   000000 701000 xent               TSX1    XUD$UTS_ADJ_25TH
         2 001704   001737 702000 2                  TSX2    UTS_OVERFLOW

     1172    12569    1       CALL XUD$UTS_ADJUST (UTS, UTS, TICS) ALTRET (UTS_OVERFLOW);

  12569  2 001705   200056 630500                    EPPR0   TICS,,AUTO
         2 001706   200154 450500                    STP0    LIMIT+3,,AUTO
         2 001707   200057 631500                    EPPR1   UTS,,AUTO
         2 001710   200153 451500                    STP1    LIMIT+2,,AUTO
         2 001711   200057 633500                    EPPR3   UTS,,AUTO
         2 001712   200152 453500                    STP3    LIMIT+1,,AUTO
         2 001713   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 001714   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001715   000000 701000 xent               TSX1    XUD$UTS_ADJUST
         2 001716   001737 702000 2                  TSX2    UTS_OVERFLOW

     1173    12570    1       SUBSTR( DATA_OUT, 0, 4 ) = UTS_CHR4;

  12570  2 001717   200005 470500                    LDP0    @DATA_OUT,,AUTO
         2 001720   040100 100500                    MLR     fill='040'O
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:221  
         2 001721   200057 000004                    ADSC9   UTS,,AUTO                cn=0,n=4
         2 001722   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

     1174    12571    1       IF ERR

  12571  2 001723   200103 235100                    LDA     ERR,,AUTO
         2 001724   000003 601000 2                  TNZ     ERROR_RETURN

     1175    12572    1         THEN GOTO ERROR_RETURN;
     1176    12573    1       GOTO NORMAL_RETURN;

  12573  2 001725   000007 710000 2                  TRA     NORMAL_RETURN

     1177    12574
     1178    12575    1   UTS_UNDERFLOW:
     1179    12576    1       IF NOT ERR

  12576  2 001726   200103 236100       UTS_UNDERFL* LDQ     ERR,,AUTO
         2 001727   001732 601000 2                  TNZ     UTS_UNDEFINED

     1180    12577    1         THEN ERR = E_XUD#UNDERFLOW;

  12577  2 001730   000037 236000 1                  LDQ     E_XUD#UNDERFLOW
         2 001731   200103 756100                    STQ     ERR,,AUTO

     1181    12578    1   UTS_UNDEFINED:
     1182    12579    1       SUBSTR( DATA_OUT, 0, 4 ) = MIN_UTS;

  12579  2 001732   200005 470500       UTS_UNDEFIN* LDP0    @DATA_OUT,,AUTO
         2 001733   040100 100400                    MLR     fill='040'O
         2 001734   000264 000004 1                  ADSC9   MIN_UTS_INIT             cn=0,n=4
         2 001735   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

     1183    12580    1       GOTO ERROR_RETURN;

  12580  2 001736   000003 710000 2                  TRA     ERROR_RETURN

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:222  
     1184    12581
     1185    12582    1   UTS_OVERFLOW:
     1186    12583    1       IF NOT ERR

  12583  2 001737   200103 235100       UTS_OVERFLOW LDA     ERR,,AUTO
         2 001740   001743 601000 2                  TNZ     s:12585

     1187    12584    1         THEN ERR = E_XUD#OVERFLOW;

  12584  2 001741   000036 236000 1                  LDQ     E_XUD#OVERFLOW
         2 001742   200103 756100                    STQ     ERR,,AUTO

     1188    12585    1       SUBSTR( DATA_OUT, 0, 4 ) = MAX_UTS;

  12585  2 001743   200005 470500                    LDP0    @DATA_OUT,,AUTO
         2 001744   040100 100400                    MLR     fill='040'O
         2 001745   000263 000004 1                  ADSC9   MAX_UTS_INIT             cn=0,n=4
         2 001746   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

     1189    12586    1       GOTO ERROR_RETURN;

  12586  2 001747   000003 710000 2                  TRA     ERROR_RETURN

     1190    12587
     1191    12588        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:223  
     1192    12589        /******************************************************************************/
     1193    12590        /*F*
     1194    12591        NAME:   XUD$CHAR_DATE
     1195    12592        PURPOSE:
     1196    12593                Convert from character to DATE.
     1197    12594        */
     1198    12595        /*D*
     1199    12596        NAME:   XUD$CHAR_DATE
     1200    12597        CALL:
     1201    12598                CALL XUD$CHAR_DATE ( XUD_PARAM, char, date ) ALTRET ( error );
     1202    12599        PARAMETERS:
     1203    12600                XUD_PARAM - Standard parameter block.
     1204    12601                char - The character date to convert.
     1205    12602                date - Returns the date as a DATE.
     1206    12603        INTERFACE:
     1207    12604                SETUP_CHARS_IN
     1208    12605                SETUP_PICTURE
     1209    12606                CVT_FROM_CHAR
     1210    12607                XUD$TO_DATE
     1211    12608        DESCRIPTION:
     1212    12609                This routine calls a subroutine to convert a date/time character
     1213    12610                string into a binary date and time, then combines these into a DATE
     1214    12611                value.
     1215    12612        */
     1216    12613        /******************************************************************************/
     1217    12614
     1218    12615    1   XUD$CHAR_DATE: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;

  12615  2 001750   000000 700200 xent  XUD$CHAR_DA* TSX0  ! X66_AUTO_3
         2 001751   000164 000003                    ZERO    116,3

     1219    12616
     1220    12617    1       CALL SETUP_CHARS_IN( ADDR(DATA_IN) ) ALTRET( DATE_UNDEFINED );

  12617  2 001752   200004 236100                    LDQ     @DATA_IN,,AUTO
         2 001753   200157 756100                    STQ     LIMIT+6,,AUTO
         2 001754   200157 630500                    EPPR0   LIMIT+6,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:224  
         2 001755   200137 450500                    STP0    SYSTEM_YEAR+3,,AUTO
         2 001756   002233 701000 2                  TSX1    SETUP_CHARS_IN
         2 001757   001777 702000 2                  TSX2    DATE_UNDEFINED

     1221    12618    1       CALL SETUP_PICTURE ALTRET( DATE_UNDEFINED );

  12618  2 001760   002351 701000 2                  TSX1    SETUP_PICTURE
         2 001761   001777 702000 2                  TSX2    DATE_UNDEFINED

     1222    12619    1       CALL CVT_FROM_CHAR ALTRET( DATE_ALTRETURN );

  12619  2 001762   004510 701000 2                  TSX1    CVT_FROM_CHAR
         2 001763   002001 702000 2                  TSX2    DATE_ALTRETURN

     1223    12620    1       CALL XUD$TO_DATE( DAYS, TICS, DATA_OUT ) ALTRET( DATE_OVERFLOW );

  12620  2 001764   200005 236100                    LDQ     @DATA_OUT,,AUTO
         2 001765   200154 756100                    STQ     LIMIT+3,,AUTO
         2 001766   200056 630500                    EPPR0   TICS,,AUTO
         2 001767   200153 450500                    STP0    LIMIT+2,,AUTO
         2 001770   200055 631500                    EPPR1   DAYS,,AUTO
         2 001771   200152 451500                    STP1    LIMIT+1,,AUTO
         2 001772   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 001773   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001774   000000 701000 xent               TSX1    XUD$TO_DATE
         2 001775   002014 702000 2                  TSX2    DATE_OVERFLOW

     1224    12621    1       GOTO NORMAL_RETURN;

  12621  2 001776   000007 710000 2                  TRA     NORMAL_RETURN

     1225    12622
     1226    12623    1   DATE_UNDEFINED:
     1227    12624    1       DAYS = 0;

  12624  2 001777   200055 450100       DATE_UNDEFI* STZ     DAYS,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:225  
     1228    12625    1       TICS = 0;

  12625  2 002000   200056 450100                    STZ     TICS,,AUTO

     1229    12626    1   DATE_ALTRETURN:
     1230    12627    1       CALL XUD$TO_DATE( DAYS, TICS, DATA_OUT ) ALTRET( DATE_OVERFLOW );

  12627  2 002001   200005 236100       DATE_ALTRET* LDQ     @DATA_OUT,,AUTO
         2 002002   200154 756100                    STQ     LIMIT+3,,AUTO
         2 002003   200056 630500                    EPPR0   TICS,,AUTO
         2 002004   200153 450500                    STP0    LIMIT+2,,AUTO
         2 002005   200055 631500                    EPPR1   DAYS,,AUTO
         2 002006   200152 451500                    STP1    LIMIT+1,,AUTO
         2 002007   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 002010   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002011   000000 701000 xent               TSX1    XUD$TO_DATE
         2 002012   002014 702000 2                  TSX2    DATE_OVERFLOW

     1231    12628    1       GOTO ERROR_RETURN;

  12628  2 002013   000003 710000 2                  TRA     ERROR_RETURN

     1232    12629
     1233    12630    1   DATE_OVERFLOW:
     1234    12631    1       SUBSTR( DATA_OUT, 0, 8 ) = MAX_DATE;

  12631  2 002014   200005 470500       DATE_OVERFL* LDP0    @DATA_OUT,,AUTO
         2 002015   040100 100400                    MLR     fill='040'O
         2 002016   000265 000010 1                  ADSC9   MAX_DATE_INIT            cn=0,n=8
         2 002017   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

     1235    12632    1       IF DAYS > 0

  12632  2 002020   200055 235100                    LDA     DAYS,,AUTO
         2 002021   002025 604400 2                  TMOZ    s:12636

     1236    12633    1       THEN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:226  
     1237    12634    1           ERR = E_XUD#OVERFLOW;

  12634  2 002022   000036 236000 1                  LDQ     E_XUD#OVERFLOW
         2 002023   200103 756100                    STQ     ERR,,AUTO
         2 002024   002032 710000 2                  TRA     s:12639

     1238    12635    2       ELSE DO;

     1239    12636    2           ERR = E_XUD#UNDERFLOW;

  12636  2 002025   000037 236000 1                  LDQ     E_XUD#UNDERFLOW
         2 002026   200103 756100                    STQ     ERR,,AUTO

     1240    12637    2           SUBSTR( DATA_OUT, 0, 1 ) = BITASC( '331'O );

  12637  2 002027   040100 100400                    MLR     fill='040'O
         2 002030   000006 000001 3                  ADSC9   6                        cn=0,n=1
         2 002031   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     1241    12638    2       END;

     1242    12639    1       GOTO ERROR_RETURN;

  12639  2 002032   000003 710000 2                  TRA     ERROR_RETURN

     1243    12640
     1244    12641        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:227  
     1245    12642        /******************************************************************************/
     1246    12643        /*F*
     1247    12644        NAME:   XUD$UTS_CHAR
     1248    12645        PURPOSE:
     1249    12646                Convert from UTS to character.
     1250    12647        */
     1251    12648        /*D*
     1252    12649        NAME:   XUD$UTS_CHAR
     1253    12650        CALL:
     1254    12651                CALL XUD$UTS_CHAR ( XUD_PARAM, uts, char ) ALTRET ( error );
     1255    12652        PARAMETERS:
     1256    12653                XUD_PARAM - Standard parameter block.
     1257    12654                uts - The UTS value to convert.
     1258    12655                char - Returns the date as a character string.
     1259    12656        INTERFACE:
     1260    12657                SETUP_CHARS_OUT
     1261    12658                SETUP_PICTURE
     1262    12659                FROM_UTS
     1263    12660                CVT_TO_CHAR
     1264    12661        DESCRIPTION:
     1265    12662                This routine changes a UTS value into a binary date and time, then
     1266    12663                calls a common subroutine to format a the value as a character string
     1267    12664                according to the specified picture.
     1268    12665        */
     1269    12666        /******************************************************************************/
     1270    12667
     1271    12668    1   XUD$UTS_CHAR: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;

  12668  2 002033   000000 700200 xent  XUD$UTS_CHAR TSX0  ! X66_AUTO_3
         2 002034   000164 000003                    ZERO    116,3

     1272    12669
     1273    12670    1       CALL SETUP_CHARS_OUT( ADDR(DATA_OUT) ) ALTRET( ERROR_RETURN );

  12670  2 002035   200005 236100                    LDQ     @DATA_OUT,,AUTO
         2 002036   200160 756100                    STQ     LIMIT+7,,AUTO
         2 002037   200160 630500                    EPPR0   LIMIT+7,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:228  
         2 002040   200137 450500                    STP0    SYSTEM_YEAR+3,,AUTO
         2 002041   002345 701000 2                  TSX1    SETUP_CHARS_OUT
         2 002042   000003 702000 2                  TSX2    ERROR_RETURN

     1274    12671    1       CALL SETUP_PICTURE ALTRET( ERROR_RETURN );

  12671  2 002043   002351 701000 2                  TSX1    SETUP_PICTURE
         2 002044   000003 702000 2                  TSX2    ERROR_RETURN

     1275    12672    1       UTS_CHR4 = SUBSTR( DATA_IN, 0, 4 );  /* force word alignment */

  12672  2 002045   200004 470500                    LDP0    @DATA_IN,,AUTO
         2 002046   040100 100500                    MLR     fill='040'O
         2 002047   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4
         2 002050   200057 000004                    ADSC9   UTS,,AUTO                cn=0,n=4

     1276    12673    1       CALL FROM_UTS;

  12673  2 002051   010016 701000 2                  TSX1    FROM_UTS
         2 002052   000000 011000                    NOP     0

     1277    12674    1       CALL CVT_TO_CHAR ALTRET( ERROR_RETURN );

  12674  2 002053   002453 701000 2                  TSX1    CVT_TO_CHAR
         2 002054   000003 702000 2                  TSX2    ERROR_RETURN

     1278    12675    1       GOTO NORMAL_RETURN;

  12675  2 002055   000007 710000 2                  TRA     NORMAL_RETURN

     1279    12676
     1280    12677        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:229  
     1281    12678        /******************************************************************************/
     1282    12679        /*F*
     1283    12680        NAME:   XUD$DATE_CHAR
     1284    12681        PURPOSE:
     1285    12682                Convert from DATE to character.
     1286    12683        */
     1287    12684        /*D*
     1288    12685        NAME:   XUD$DATE_CHAR
     1289    12686        CALL:
     1290    12687                CALL XUD$DATE_CHAR ( XUD_PARAM, date, char ) ALTRET ( error );
     1291    12688        PARAMETERS:
     1292    12689                XUD_PARAM - Standard parameter block.
     1293    12690                date - The DATE value to convert.
     1294    12691                char - Returns the date as a character string.
     1295    12692        INTERFACE:
     1296    12693                SETUP_CHARS_OUT
     1297    12694                SETUP_PICTURE
     1298    12695                CVT_TO_CHAR
     1299    12696                XUD$FROM_DATE
     1300    12697        DESCRIPTION:
     1301    12698                This routine changes a DATE value into a binary date and time, then
     1302    12699                calls a common subroutine to format a the value as a character string
     1303    12700                according to the specified picture.
     1304    12701        */
     1305    12702        /******************************************************************************/
     1306    12703
     1307    12704    1   XUD$DATE_CHAR: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;

  12704  2 002056   000000 700200 xent  XUD$DATE_CH* TSX0  ! X66_AUTO_3
         2 002057   000164 000003                    ZERO    116,3

     1308    12705
     1309    12706    1       CALL SETUP_CHARS_OUT( ADDR(DATA_OUT) ) ALTRET( ERROR_RETURN );

  12706  2 002060   200005 236100                    LDQ     @DATA_OUT,,AUTO
         2 002061   200161 756100                    STQ     LIMIT+8,,AUTO
         2 002062   200161 630500                    EPPR0   LIMIT+8,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:230  
         2 002063   200137 450500                    STP0    SYSTEM_YEAR+3,,AUTO
         2 002064   002345 701000 2                  TSX1    SETUP_CHARS_OUT
         2 002065   000003 702000 2                  TSX2    ERROR_RETURN

     1310    12707    1       CALL SETUP_PICTURE ALTRET( ERROR_RETURN );

  12707  2 002066   002351 701000 2                  TSX1    SETUP_PICTURE
         2 002067   000003 702000 2                  TSX2    ERROR_RETURN

     1311    12708    1       CALL XUD$FROM_DATE( DATA_IN, DAYS, TICS );

  12708  2 002070   200056 630500                    EPPR0   TICS,,AUTO
         2 002071   200154 450500                    STP0    LIMIT+3,,AUTO
         2 002072   200055 631500                    EPPR1   DAYS,,AUTO
         2 002073   200153 451500                    STP1    LIMIT+2,,AUTO
         2 002074   200004 236100                    LDQ     @DATA_IN,,AUTO
         2 002075   200152 756100                    STQ     LIMIT+1,,AUTO
         2 002076   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 002077   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002100   000000 701000 xent               TSX1    XUD$FROM_DATE
         2 002101   000000 011000                    NOP     0

     1312    12709    1       CALL CVT_TO_CHAR ALTRET( ERROR_RETURN );

  12709  2 002102   002453 701000 2                  TSX1    CVT_TO_CHAR
         2 002103   000003 702000 2                  TSX2    ERROR_RETURN

     1313    12710    1       GOTO NORMAL_RETURN;

  12710  2 002104   000007 710000 2                  TRA     NORMAL_RETURN

     1314    12711
     1315    12712        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:231  
     1316    12713        /******************************************************************************/
     1317    12714        /*F*
     1318    12715        NAME:   XUD$DATE_UTS
     1319    12716        PURPOSE:
     1320    12717                Convert from DATE to UTS.
     1321    12718        */
     1322    12719        /*D*
     1323    12720        NAME:   XUD$DATE_UTS
     1324    12721        CALL:
     1325    12722                CALL XUD$DATE_UTS ( XUD_PARAM, date, uts ) ALTRET ( error );
     1326    12723        PARAMETERS:
     1327    12724                XUD_PARAM - Standard parameter block.
     1328    12725                date - The DATE value to convert.
     1329    12726                uts - Returns the value as a UTS.
     1330    12727        INTERFACE:
     1331    12728                XUD$FROM_DATE
     1332    12729        DESCRIPTION:
     1333    12730                This routine converts a DATE to a UTS value.  An overflow or
     1334    12731                underflow error occurs if the DATE value is above or below
     1335    12732                the UTS range.
     1336    12733        */
     1337    12734        /******************************************************************************/
     1338    12735
     1339    12736    1   XUD$DATE_UTS: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;

  12736  2 002105   000000 700200 xent  XUD$DATE_UTS TSX0  ! X66_AUTO_3
         2 002106   000164 000003                    ZERO    116,3

     1340    12737
     1341    12738    1       CALL XUD$FROM_DATE( DATA_IN, DAYS, TICS );

  12738  2 002107   200056 630500                    EPPR0   TICS,,AUTO
         2 002110   200154 450500                    STP0    LIMIT+3,,AUTO
         2 002111   200055 631500                    EPPR1   DAYS,,AUTO
         2 002112   200153 451500                    STP1    LIMIT+2,,AUTO
         2 002113   200004 236100                    LDQ     @DATA_IN,,AUTO
         2 002114   200152 756100                    STQ     LIMIT+1,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:232  
         2 002115   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 002116   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002117   000000 701000 xent               TSX1    XUD$FROM_DATE
         2 002120   000000 011000                    NOP     0

     1342    12739    1       ERR = '0'B;

  12739  2 002121   200103 450100                    STZ     ERR,,AUTO

     1343    12740    1       TIMESPAN = XUD_PARAM.TIMESPAN;

  12740  2 002122   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 002123   000001 236100                    LDQ     1,,PR0
         2 002124   000002 736000                    QLS     2
         2 002125   400000 376003                    ANQ     -131072,DU
         2 002126   200102 756100                    STQ     TIMESPAN,,AUTO

     1344    12741    1       GOTO UTS_CALC;

  12741  2 002127   001656 710000 2                  TRA     UTS_CALC

     1345    12742
     1346    12743        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:233  
     1347    12744        /******************************************************************************/
     1348    12745        /*F*
     1349    12746        NAME:   XUD$UTS_DATE
     1350    12747        PURPOSE:
     1351    12748                Convert from UTS to DATE.
     1352    12749        */
     1353    12750        /*D*
     1354    12751        NAME:   XUD$UTS_DATE
     1355    12752        CALL:
     1356    12753                CALL XUD$UTS_DATE ( XUD_PARAM, uts, date ) ALTRET ( not_used );
     1357    12754        PARAMETERS:
     1358    12755                XUD_PARAM - Standard parameter block.
     1359    12756                uts - The UTS value to convert.
     1360    12757                date - Returns the value as a DATE.
     1361    12758        INTERFACE:
     1362    12759                FROM_UTS
     1363    12760                XUD$TO_DATE
     1364    12761        DESCRIPTION:
     1365    12762                This routine converts a UTS to a DATE value.
     1366    12763        */
     1367    12764        /******************************************************************************/
     1368    12765
     1369    12766    1   XUD$UTS_DATE: ENTRY( XUD_PARAM, DATA_IN, DATA_OUT ) ALTRET;

  12766  2 002130   000000 700200 xent  XUD$UTS_DATE TSX0  ! X66_AUTO_3
         2 002131   000164 000003                    ZERO    116,3

     1370    12767
     1371    12768    1       UTS_CHR4 = SUBSTR( DATA_IN, 0, 4 );  /* force word alignment */

  12768  2 002132   200004 470500                    LDP0    @DATA_IN,,AUTO
         2 002133   040100 100500                    MLR     fill='040'O
         2 002134   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4
         2 002135   200057 000004                    ADSC9   UTS,,AUTO                cn=0,n=4

     1372    12769    1       TIMESPAN = XUD_PARAM.TIMESPAN;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:234  
  12769  2 002136   200003 471500                    LDP1    @XUD_PARAM,,AUTO
         2 002137   100001 236100                    LDQ     1,,PR1
         2 002140   000002 736000                    QLS     2
         2 002141   400000 376003                    ANQ     -131072,DU
         2 002142   200102 756100                    STQ     TIMESPAN,,AUTO

     1373    12770    1       CALL FROM_UTS;

  12770  2 002143   010016 701000 2                  TSX1    FROM_UTS
         2 002144   000000 011000                    NOP     0

     1374    12771    1       CALL XUD$TO_DATE( DAYS, TICS, DATA_OUT );

  12771  2 002145   200005 236100                    LDQ     @DATA_OUT,,AUTO
         2 002146   200154 756100                    STQ     LIMIT+3,,AUTO
         2 002147   200056 630500                    EPPR0   TICS,,AUTO
         2 002150   200153 450500                    STP0    LIMIT+2,,AUTO
         2 002151   200055 631500                    EPPR1   DAYS,,AUTO
         2 002152   200152 451500                    STP1    LIMIT+1,,AUTO
         2 002153   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 002154   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002155   000000 701000 xent               TSX1    XUD$TO_DATE
         2 002156   000000 011000                    NOP     0

     1375    12772    1       GOTO NORMAL_RETURN;

  12772  2 002157   000007 710000 2                  TRA     NORMAL_RETURN

     1376    12773
     1377    12774        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:235  
     1378    12775        /******************************************************************************/
     1379    12776        /*F*
     1380    12777        NAME:   XUD$CLOCK_UTS
     1381    12778        PURPOSE:
     1382    12779                Return the current system timestamp as a UTS.
     1383    12780        */
     1384    12781        /*D*
     1385    12782        NAME:   XUD$CLOCK_UTS
     1386    12783        CALL:
     1387    12784                CALL XUD$CLOCK_UTS ( XUD_PARAM, uts ) ALTRET ( not_used );
     1388    12785        PARAMETERS:
     1389    12786                XUD_PARAM - Standard parameter block.
     1390    12787                uts - Returns the system timestamp as a UTS.
     1391    12788        INTERFACE:
     1392    12789                GET_CURRENT_UTS
     1393    12790        DESCRIPTION:
     1394    12791                This routine returns the current system timestamp in UTS format.
     1395    12792                This is simply a pass-thru to M$TIME, and is provided largely
     1396    12793                for the sake of completeness.
     1397    12794        */
     1398    12795        /******************************************************************************/
     1399    12796
     1400    12797    1   XUD$CLOCK_UTS: ENTRY( XUD_PARAM, DATA_IN ) ALTRET;

  12797  2 002160   000000 700200 xent  XUD$CLOCK_U* TSX0  ! X66_AUTO_3
         2 002161   000164 000003                    ZERO    116,3

     1401    12798
     1402    12799    1       CALL GET_CURRENT_UTS ALTRET( UTS_UNDEFINED );

  12799  2 002162   007766 701000 2                  TSX1    GET_CURRENT_UTS
         2 002163   001732 702000 2                  TSX2    UTS_UNDEFINED

     1403    12800    1       SUBSTR( DATA_IN, 0, 4 ) = UTS_CHR4;

  12800  2 002164   200004 470500                    LDP0    @DATA_IN,,AUTO
         2 002165   040100 100500                    MLR     fill='040'O
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:236  
         2 002166   200057 000004                    ADSC9   UTS,,AUTO                cn=0,n=4
         2 002167   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4

     1404    12801    1       GOTO NORMAL_RETURN;

  12801  2 002170   000007 710000 2                  TRA     NORMAL_RETURN

     1405    12802
     1406    12803        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:237  
     1407    12804        /******************************************************************************/
     1408    12805        /*F*
     1409    12806        NAME:   XUD$CLOCK_DATE
     1410    12807        PURPOSE:
     1411    12808                Return the current system timestamp as a DATE.
     1412    12809        */
     1413    12810        /*D*
     1414    12811        NAME:   XUD$CLOCK_DATE
     1415    12812        CALL:
     1416    12813                CALL XUD$CLOCK_DATE ( XUD_PARAM, date ) ALTRET ( not_used );
     1417    12814        PARAMETERS:
     1418    12815                XUD_PARAM - Standard parameter block.
     1419    12816                date - Returns the system timestamp as a DATE.
     1420    12817        INTERFACE:
     1421    12818                GET_CURRENT_UTS
     1422    12819                FROM_UTS
     1423    12820                XUD$TO_DATE
     1424    12821        DESCRIPTION:
     1425    12822                This routine returns the current system timestamp in DATE format.
     1426    12823        */
     1427    12824        /******************************************************************************/
     1428    12825
     1429    12826    1   XUD$CLOCK_DATE: ENTRY( XUD_PARAM, DATA_IN ) ALTRET;

  12826  2 002171   000000 700200 xent  XUD$CLOCK_D* TSX0  ! X66_AUTO_3
         2 002172   000164 000003                    ZERO    116,3

     1430    12827
     1431    12828    1       CALL GET_CURRENT_UTS ALTRET( DATE_UNDEFINED );

  12828  2 002173   007766 701000 2                  TSX1    GET_CURRENT_UTS
         2 002174   001777 702000 2                  TSX2    DATE_UNDEFINED

     1432    12829    1       CALL FROM_UTS;

  12829  2 002175   010016 701000 2                  TSX1    FROM_UTS
         2 002176   000000 011000                    NOP     0
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:238  

     1433    12830    1       CALL XUD$TO_DATE( DAYS, TICS, DATA_IN );

  12830  2 002177   200004 236100                    LDQ     @DATA_IN,,AUTO
         2 002200   200154 756100                    STQ     LIMIT+3,,AUTO
         2 002201   200056 630500                    EPPR0   TICS,,AUTO
         2 002202   200153 450500                    STP0    LIMIT+2,,AUTO
         2 002203   200055 631500                    EPPR1   DAYS,,AUTO
         2 002204   200152 451500                    STP1    LIMIT+1,,AUTO
         2 002205   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 002206   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002207   000000 701000 xent               TSX1    XUD$TO_DATE
         2 002210   000000 011000                    NOP     0

     1434    12831    1       GOTO NORMAL_RETURN;

  12831  2 002211   000007 710000 2                  TRA     NORMAL_RETURN

     1435    12832
     1436    12833        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:239  
     1437    12834        /******************************************************************************/
     1438    12835        /*F*
     1439    12836        NAME:   XUD$CLOCK_CHAR
     1440    12837        PURPOSE:
     1441    12838                Return the current system timestamp as a character string.
     1442    12839        */
     1443    12840        /*D*
     1444    12841        NAME:   XUD$CLOCK_CHAR
     1445    12842        CALL:
     1446    12843                CALL XUD$CLOCK_CHAR ( XUD_PARAM, char ) ALTRET ( error );
     1447    12844        PARAMETERS:
     1448    12845                XUD_PARAM - Standard parameter block.
     1449    12846                char - Returns the system timestamp as a character string.
     1450    12847        INTERFACE:
     1451    12848                GET_CURRENT_UTS
     1452    12849                SETUP_CHARS_OUT
     1453    12850                SETUP_PICTURE
     1454    12851                FROM_UTS
     1455    12852                CVT_TO_CHAR
     1456    12853        DESCRIPTION:
     1457    12854                This routine returns the current system timestamp as a character
     1458    12855                string in the format specified by a picture.
     1459    12856        */
     1460    12857        /******************************************************************************/
     1461    12858
     1462    12859    1   XUD$CLOCK_CHAR: ENTRY( XUD_PARAM, DATA_IN ) ALTRET;

  12859  2 002212   000000 700200 xent  XUD$CLOCK_C* TSX0  ! X66_AUTO_3
         2 002213   000164 000003                    ZERO    116,3

     1463    12860
     1464    12861    1       CALL GET_CURRENT_UTS ALTRET( ERROR_RETURN );

  12861  2 002214   007766 701000 2                  TSX1    GET_CURRENT_UTS
         2 002215   000003 702000 2                  TSX2    ERROR_RETURN

     1465    12862    1       CALL SETUP_CHARS_OUT( ADDR(DATA_IN) ) ALTRET( ERROR_RETURN );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:240  

  12862  2 002216   200004 236100                    LDQ     @DATA_IN,,AUTO
         2 002217   200162 756100                    STQ     LIMIT+9,,AUTO
         2 002220   200162 630500                    EPPR0   LIMIT+9,,AUTO
         2 002221   200137 450500                    STP0    SYSTEM_YEAR+3,,AUTO
         2 002222   002345 701000 2                  TSX1    SETUP_CHARS_OUT
         2 002223   000003 702000 2                  TSX2    ERROR_RETURN

     1466    12863    1       CALL SETUP_PICTURE ALTRET( ERROR_RETURN );

  12863  2 002224   002351 701000 2                  TSX1    SETUP_PICTURE
         2 002225   000003 702000 2                  TSX2    ERROR_RETURN

     1467    12864    1       CALL FROM_UTS;

  12864  2 002226   010016 701000 2                  TSX1    FROM_UTS
         2 002227   000000 011000                    NOP     0

     1468    12865    1       CALL CVT_TO_CHAR ALTRET( ERROR_RETURN );

  12865  2 002230   002453 701000 2                  TSX1    CVT_TO_CHAR
         2 002231   000003 702000 2                  TSX2    ERROR_RETURN

     1469    12866    1       GOTO NORMAL_RETURN;

  12866  2 002232   000007 710000 2                  TRA     NORMAL_RETURN

     1470    12867
     1471    12868        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:241  
     1472    12869        /******************************************************************************/
     1473    12870        /*F*
     1474    12871        NAME:   SETUP_CHARS_IN
     1475    12872        PURPOSE:
     1476    12873                Initialize a character input string operand.
     1477    12874        */
     1478    12875        /*D*
     1479    12876        NAME:   SETUP_CHARS_IN
     1480    12877        CALL:
     1481    12878                CALL SETUP_CHARS_IN( ADDR$ ) ALTRET( size_error );
     1482    12879        PARAMETERS:
     1483    12880                ADDR$ - Pointer to character operand.
     1484    12881        OUTPUT:
     1485    12882                CHARS$ - Points to first character of string.
     1486    12883                CHAR_SIZE - Contains the number of characters in the string.
     1487    12884        INTERFACE:
     1488    12885                none.
     1489    12886        DESCRIPTION:
     1490    12887                This routine initializes the controls for the BASED variable CHARS
     1491    12888                according to whether or not the XUD_PARAM.TEXTC flag is set.
     1492    12889                It also strips leading and trailing zeros from the value.
     1493    12890                The alternate return is taken if the operand size is invalid.
     1494    12891        */
     1495    12892        /******************************************************************************/
     1496    12893
     1497    12894    1   SETUP_CHARS_IN: PROC( ADDR$ ) ALTRET;

  12894  2 002233   200136 741300       SETUP_CHARS* STX1  ! SYSTEM_YEAR+2,,AUTO

     1498    12895
     1499    12896    2   DCL ADDR$ PTR PARAM;
     1500    12897
     1501    12898    2   DCL OUT_FLAG BIT( 1 );
     1502    12899
     1503    12900    2       OUT_FLAG = %XUD#NO;

  12900  2 002234   200140 450100                    STZ     OUT_FLAG,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:242  

  12900  2 002235                       COMMON       null
     1504    12901    2   COMMON: ;
     1505    12902    2       IF XUD_PARAM.TEXTC

  12902  2 002235   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 002236   000001 234100                    SZN     1,,PR0
         2 002237   002262 605000 2                  TPL     s:12912

     1506    12903    3       THEN DO;

     1507    12904    3           CHARS$ = ADDR( ADDR$-> TEXTC.T );

  12904  2 002240   200137 471500                    LDP1    @ADDR$,,AUTO
         2 002241   100000 473500                    LDP3    0,,PR1
         2 002242   200152 453500                    STP3    LIMIT+1,,AUTO
         2 002243   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 002244   200000 036007                    ADLQ    65536,DL
         2 002245   200011 756100                    STQ     CHARS$,,AUTO

     1508    12905    3           IF OUT_FLAG

  12905  2 002246   200140 234100                    SZN     OUT_FLAG,,AUTO
         2 002247   002255 605000 2                  TPL     s:12909

     1509    12906    3           THEN
     1510    12907    3               CHAR_SIZE = XUD_PARAM.SIZE;

  12907  2 002250   000001 236100                    LDQ     1,,PR0
         2 002251   000011 772000                    QRL     9
         2 002252   000777 376007                    ANQ     511,DL
         2 002253   200010 756100                    STQ     CHAR_SIZE,,AUTO
         2 002254   002271 710000 2                  TRA     s:12915

     1511    12908    3           ELSE
     1512    12909    3               CHAR_SIZE = ADDR$-> TEXTC.L;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:243  
  12909  2 002255   100000 473500                    LDP3    0,,PR1
         2 002256   000100 101500                    MRL     fill='000'O
         2 002257   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         2 002260   200010 000004                    ADSC9   CHAR_SIZE,,AUTO          cn=0,n=4

     1513    12910    3       END;

  12910  2 002261   002271 710000 2                  TRA     s:12915

     1514    12911    3       ELSE DO;

     1515    12912    3           CHARS$ = ADDR$;

  12912  2 002262   200137 471500                    LDP1    @ADDR$,,AUTO
         2 002263   100000 236100                    LDQ     0,,PR1
         2 002264   200011 756100                    STQ     CHARS$,,AUTO

     1516    12913    3           CHAR_SIZE = XUD_PARAM.SIZE;

  12913  2 002265   000001 236100                    LDQ     1,,PR0
         2 002266   000011 772000                    QRL     9
         2 002267   000777 376007                    ANQ     511,DL
         2 002270   200010 756100                    STQ     CHAR_SIZE,,AUTO

     1517    12914    3       END;

     1518    12915    2       IF CHAR_SIZE = 0

  12915  2 002271   200010 235100                    LDA     CHAR_SIZE,,AUTO
         2 002272   002341 600000 2                  TZE     E_BAD_SIZE

     1519    12916    2         THEN GOTO E_BAD_SIZE;
     1520    12917
     1521    12918    2       IF OUT_FLAG

  12918  2 002273   200140 234100                    SZN     OUT_FLAG,,AUTO
         2 002274   002303 605000 2                  TPL     s:12922
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:244  

     1522    12919    2       THEN
     1523    12920    2           CHARS = %XUD#BLANK;

  12920  2 002275   200011 473500                    LDP3    CHARS$,,AUTO
         2 002276   000000 620005                    EAX0    0,AL
         2 002277   040140 100400                    MLR     fill='040'O
         2 002300   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 002301   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         2 002302   002332 710000 2                  TRA     s:12933

     1524    12921    3       ELSE DO;

     1525    12922    3           IF CHAR_SIZE > 63

  12922  2 002303   000077 115007                    CMPA    63,DL
         2 002304   002341 605400 2                  TPNZ    E_BAD_SIZE

     1526    12923    3             THEN GOTO E_BAD_SIZE;
     1527    12924    3           CALL RSEARCH ALTRET( E_BAD_SIZE );

  12924  2 002305   010275 701000 2                  TSX1    RSEARCH
         2 002306   002341 702000 2                  TSX2    E_BAD_SIZE

     1528    12925    3           CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, CHARS );

  12925  2 002307   000000 470400 xsym               LDP0    B$SR_NON_BLANK$
         2 002310   200011 471500                    LDP1    CHARS$,,AUTO
         2 002311   200010 720100                    LXL0    CHAR_SIZE,,AUTO
         2 002312   000000 164540                    TCT
         2 002313   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         2 002314   000000 000100                    ARG     0,,PR0
         2 002315   200100 000100                    ARG     LEN,,AUTO
         2 002316   200100 235100                    LDA     LEN,,AUTO
         2 002317   000033 771000                    ARL     27
         2 002320   200077 755100                    STA     JUNK,,AUTO
         2 002321   200100 551140                    STBA    LEN,'40'O,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:245  

     1529    12926    3           IF LEN > 0

  12926  2 002322   200100 236100                    LDQ     LEN,,AUTO
         2 002323   002332 604400 2                  TMOZ    s:12933

     1530    12927    4           THEN DO;

     1531    12928    4               CHARS$ = PINCRC( CHARS$, LEN );

  12928  2 002324   000020 736000                    QLS     16
         2 002325   200011 036100                    ADLQ    CHARS$,,AUTO
         2 002326   200011 756100                    STQ     CHARS$,,AUTO

     1532    12929    4               CHAR_SIZE = CHAR_SIZE - LEN;

  12929  2 002327   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 002330   200100 136100                    SBLQ    LEN,,AUTO
         2 002331   200010 756100                    STQ     CHAR_SIZE,,AUTO

     1533    12930    4           END;

     1534    12931    3       END;

     1535    12932
     1536    12933    2       TIMESPAN = XUD_PARAM.TIMESPAN;

  12933  2 002332   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 002333   000001 236100                    LDQ     1,,PR0
         2 002334   000002 736000                    QLS     2
         2 002335   400000 376003                    ANQ     -131072,DU
         2 002336   200102 756100                    STQ     TIMESPAN,,AUTO

     1537    12934    2       RETURN;

  12934  2 002337   200136 221300                    LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 002340   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:246  

     1538    12935
     1539    12936    2   E_BAD_SIZE:
     1540    12937    2       ERR = E_XUD#BAD_SIZE;

  12937  2 002341   000034 236000 1     E_BAD_SIZE   LDQ     E_XUD#BAD_SIZE
         2 002342   200103 756100                    STQ     ERR,,AUTO

     1541    12938    2   ALT:ALTRETURN;

  12938  2 002343   200136 221300       ALT          LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 002344   000000 702211                    TSX2  ! 0,X1

     1542    12939
     1543    12940        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:247  
     1544    12941        /******************************************************************************/
     1545    12942        /*D*
     1546    12943        ENTRY:  SETUP_CHARS_OUT
     1547    12944        CALL:
     1548    12945                CALL SETUP_CHARS_OUT( ADDR$ ) ALTRET( size_error );
     1549    12946        DESCRIPTION:
     1550    12947                This routine is identical to SETUP_CHARS_IN, except that the
     1551    12948                size is taken from the parameter block even if the string is
     1552    12949                TEXTC, and the string is blanked.
     1553    12950        */
     1554    12951        /******************************************************************************/
     1555    12952
     1556    12953    2   SETUP_CHARS_OUT: ENTRY( ADDR$ ) ALTRET;

  12953  2 002345   200136 741300       SETUP_CHARS* STX1  ! SYSTEM_YEAR+2,,AUTO

     1557    12954
     1558    12955    2       OUT_FLAG = %XUD#YES;

  12955  2 002346   400000 236003                    LDQ     -131072,DU
         2 002347   200140 756100                    STQ     OUT_FLAG,,AUTO

     1559    12956    2       GOTO COMMON;

  12956  2 002350   002235 710000 2                  TRA     COMMON

     1560    12957
     1561    12958    2   END SETUP_CHARS_IN;
     1562    12959        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:248  
     1563    12960        /******************************************************************************/
     1564    12961        /*F*
     1565    12962        NAME:   SETUP_PICTURE
     1566    12963        PURPOSE:
     1567    12964                Get an intialized picture for use in conversion.
     1568    12965        */
     1569    12966        /*D*
     1570    12967        NAME:   SETUP_PICTURE
     1571    12968        CALL:
     1572    12969                CALL SETUP_PICTURE ALTRET( initialization_error );
     1573    12970        OUTPUT:
     1574    12971                PICTURE$ - Points to the initialized picture, or ADDR(NIL) if
     1575    12972                            the parameter block does not contain a picture pointer.
     1576    12973        INTERFACE:
     1577    12974                XUD$INIT_PIC
     1578    12975        DESCRIPTION:
     1579    12976                This routine initializes the controls for the BASED variable PICTURE.
     1580    12977                If the XUD_PARAM.INIT_PIC flag is set, the picture is initialized.
     1581    12978                Otherwise, the picture is assumed to have been previously initialized.
     1582    12979                The alternate return is taken if an initialization error occurs.
     1583    12980        */
     1584    12981        /******************************************************************************/
     1585    12982
     1586    12983    1   SETUP_PICTURE: PROC ALTRET;

  12983  2 002351   200136 741300       SETUP_PICTU* STX1  ! SYSTEM_YEAR+2,,AUTO

     1587    12984
     1588    12985    2       PICTURE$ = XUD_PARAM.PIC$;

  12985  2 002352   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 002353   000000 236100                    LDQ     0,,PR0
         2 002354   200006 756100                    STQ     PICTURE$,,AUTO

     1589    12986    2       IF PICTURE$ ~= ADDR( NIL )

  12986  2 002355   000001 116000 xsym               CMPQ    B_VECTNIL+1
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:249  
         2 002356   002451 600000 2                  TZE     RET

     1590    12987    3       THEN DO;

     1591    12988    3           IF XUD_PARAM.INIT_PIC

  12988  2 002357   000001 236100                    LDQ     1,,PR0
         2 002360   200000 316003                    CANQ    65536,DU
         2 002361   002406 600000 2                  TZE     s:13000

     1592    12989    4           THEN DO;

     1593    12990    4               CALL XUD$INIT_PIC( XUD_PARAM, PICTURE, TEMP_PICTURE )

  12990  2 002362   200032 631500                    EPPR1   TEMP_PICTURE,,AUTO
         2 002363   200154 451500                    STP1    LIMIT+3,,AUTO
         2 002364   200006 236100                    LDQ     PICTURE$,,AUTO
         2 002365   200003 235100                    LDA     @XUD_PARAM,,AUTO
         2 002366   200152 757100                    STAQ    LIMIT+1,,AUTO
         2 002367   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 002370   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 002371   000012 701000 2                  TSX1    s:11981
         2 002372   002374 702000 2                  TSX2    s:12992
         2 002373   002400 710000 2                  TRA     s:12995

     1594    12991    5               WHENALTRETURN DO;

     1595    12992    5                   ERR = XUD_PARAM.ERR;

  12992  2 002374   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 002375   000002 236100                    LDQ     2,,PR0
         2 002376   200103 756100                    STQ     ERR,,AUTO

     1596    12993    5                   GOTO ALT;

  12993  2 002377   002447 710000 2                  TRA     ALT

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:250  
     1597    12994    5               END/*WHENALT*/;
     1598    12995    4               PICTURE$ = ADDR( TEMP_PICTURE );

  12995  2 002400   200032 630500                    EPPR0   TEMP_PICTURE,,AUTO
         2 002401   200006 450500                    STP0    PICTURE$,,AUTO

     1599    12996    4               PIC_SIZE = PICTURE.L;

  12996  2 002402   000100 101500                    MRL     fill='000'O
         2 002403   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 002404   200007 000004                    ADSC9   PIC_SIZE,,AUTO           cn=0,n=4

     1600    12997    4               GOTO RET;

  12997  2 002405   002451 710000 2                  TRA     RET

     1601    12998    4           END;
     1602    12999
     1603    13000    3           PIC_SIZE = PICTURE.L;

  13000  2 002406   200006 471500                    LDP1    PICTURE$,,AUTO
         2 002407   000100 101500                    MRL     fill='000'O
         2 002410   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 002411   200007 000004                    ADSC9   PIC_SIZE,,AUTO           cn=0,n=4

     1604    13001    4           DO I = 0 TO PIC_SIZE - 1;

  13001  2 002412   200074 450100                    STZ     I,,AUTO
         2 002413   002442 710000 2                  TRA     s:13012+1

     1605    13002    4               PICID = ASCBIN( SUBSTR( PICTURE.T, I, 1 ));

  13002  2 002414   200006 470500                    LDP0    PICTURE$,,AUTO
         2 002415   200074 235100                    LDA     I,,AUTO
         2 002416   000100 101505                    MRL     fill='000'O
         2 002417   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         2 002420   200152 000004                    ADSC9   LIMIT+1,,AUTO            cn=0,n=4
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:251  
         2 002421   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 002422   000033 736000                    QLS     27
         2 002423   200105 756100                    STQ     PICID,,AUTO

     1606    13003    4               IF PICID >= %XUD#P_BASE

  13003  2 002424   200105 236100                    LDQ     PICID,,AUTO
         2 002425   777000 376003                    ANQ     -512,DU
         2 002426   400000 116003                    CMPQ    -131072,DU
         2 002427   002441 602000 2                  TNC     s:13012

     1607    13004    5               THEN DO;

     1608    13005    5                   IF NOT TIMESPAN

  13005  2 002430   200102 234100                    SZN     TIMESPAN,,AUTO
         2 002431   002451 605000 2                  TPL     RET
         2 002432   453000 116003                    CMPQ    -109056,DU
         2 002433   002436 602000 2                  TNC     s:13009
         2 002434   460000 116003                    CMPQ    -106496,DU
         2 002435   002451 602000 2                  TNC     RET

     1609    13006    5                     OR ( PICID >= %XUD#P_TIME_D3 AND PICID <= %XUD#P_TIME_T3 )
     1610    13007    5                   THEN
     1611    13008    5                       GOTO RET;
     1612    13009    5                   ERR = E_XUD#BAD_TIME_PIC;

  13009  2 002436   000041 236000 1                  LDQ     E_XUD#BAD_TIME_PIC
         2 002437   200103 756100                    STQ     ERR,,AUTO

     1613    13010    5                   GOTO ALT;

  13010  2 002440   002447 710000 2                  TRA     ALT

     1614    13011    5               END;
     1615    13012    4           END/*TO*/;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:252  
  13012  2 002441   200074 054100                    AOS     I,,AUTO
         2 002442   200074 236100                    LDQ     I,,AUTO
         2 002443   200007 116100                    CMPQ    PIC_SIZE,,AUTO
         2 002444   002414 604000 2                  TMI     s:13002

     1616    13013    3           ERR = E_XUD#UNINIT_PIC;

  13013  2 002445   000067 236000 1                  LDQ     E_XUD#UNINIT_PIC
         2 002446   200103 756100                    STQ     ERR,,AUTO

     1617    13014    3   ALT:    ALTRETURN;

  13014  2 002447   200136 221300       ALT          LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 002450   000000 702211                    TSX2  ! 0,X1

     1618    13015    3       END;
     1619    13016    2   RET:RETURN;

  13016  2 002451   200136 221300       RET          LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 002452   000001 702211                    TSX2  ! 1,X1

     1620    13017
     1621    13018    2   END SETUP_PICTURE;
     1622    13019        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:253  
     1623    13020        /******************************************************************************/
     1624    13021        /*F*
     1625    13022        NAME:   CVT_TO_CHAR
     1626    13023        PURPOSE:
     1627    13024                Convert binary date and time to character string.
     1628    13025        */
     1629    13026        /*D*
     1630    13027        NAME:   CVT_TO_CHAR
     1631    13028        CALL:
     1632    13029                CALL CVT_TO_CHAR ALTRET( error );
     1633    13030        INPUT:
     1634    13031                DAYS - Number of days from Jan. 1, 1 AD.
     1635    13032                TICS - Number of clock tics since midnight.
     1636    13033                PICTURE - Picture string to use to control conversion.
     1637    13034        OUTPUT:
     1638    13035                CHARS - Character string containing converted value.
     1639    13036        INTERFACE:
     1640    13037                CHECK_SIZE
     1641    13038                CVT_FROM_NUM
     1642    13039                MOVE_ALPHA
     1643    13040                CVT_TO_SPAN
     1644    13041                SET_LEN_1OR2
     1645    13042        DESCRIPTION:
     1646    13043                This routine converts a count of days and clock tics into a
     1647    13044                character string, as specified by a picture.  If no picture
     1648    13045                is provided, a default picture of YYMMDD is used.
     1649    13046
     1650    13047                Before formatting the character string, the count of days is
     1651    13048                broken down into a year, month, day, and Julian day.  This is
     1652    13049                done unconditionally in one fell swoop, even though it is
     1653    13050                superfluous for time-only pictures, because the calculations
     1654    13051                needed are complex and incestuous.  Values for other fields
     1655    13052                are easier to derive, and are obtained only when they are
     1656    13053                called for by the picture.
     1657    13054
     1658    13055                For convenience of calculation, a negative count of days (for
     1659    13056                a date B.C.) is changed to a positive number.  A flag is set
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:254  
     1660    13057                to indicate that this has been done.
     1661    13058
     1662    13059                If the receiving field is too short to hold the entire value,
     1663    13060                an error is reported after formatting for as many picture codes
     1664    13061                as will fit.
     1665    13062        */
     1666    13063        /******************************************************************************/
     1667    13064
     1668    13065    1   CVT_TO_CHAR: PROC ALTRET;

  13065  2 002453   200136 741300       CVT_TO_CHAR  STX1  ! SYSTEM_YEAR+2,,AUTO

     1669    13066
     1670    13067    2       FLDS = '0'B;

  13067  2 002454   000100 100400                    MLR     fill='000'O
         2 002455   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 002456   200060 000060                    ADSC9   FLDS,,AUTO               cn=0,n=48

     1671    13068            /*
     1672    13069              If the value to be converted is a timespan, the only preliminary step
     1673    13070              needed is to insert a minus sign and invert the value if it is negative.
     1674    13071            */
     1675    13072    2       IF TIMESPAN

  13072  2 002457   200102 234100                    SZN     TIMESPAN,,AUTO
         2 002460   002501 605000 2                  TPL     s:13106

     1676    13073    3       THEN DO;

     1677    13074    3           J = 0;

  13074  2 002461   200075 450100                    STZ     J,,AUTO

     1678    13075    3           IF DAYS < 0 OR TICS < 0

  13075  2 002462   200055 235100                    LDA     DAYS,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:255  
         2 002463   002466 604000 2                  TMI     s:13077
         2 002464   200056 236100                    LDQ     TICS,,AUTO
         2 002465   002500 605000 2                  TPL     s:13082

     1679    13076    4           THEN DO;

     1680    13077    4               DAYS = - DAYS;

  13077  2 002466   000000 531000                    NEG     0
         2 002467   200055 755100                    STA     DAYS,,AUTO

     1681    13078    4               TICS = - TICS;

  13078  2 002470   200056 336100                    LCQ     TICS,,AUTO
         2 002471   200056 756100                    STQ     TICS,,AUTO

     1682    13079    4               SUBSTR( CHARS, 0, 1 ) = '-';

  13079  2 002472   200011 470500                    LDP0    CHARS$,,AUTO
         2 002473   040100 100400                    MLR     fill='040'O
         2 002474   000007 000001 3                  ADSC9   7                        cn=0,n=1
         2 002475   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     1683    13080    4               J = 1;

  13080  2 002476   000001 235007                    LDA     1,DL
         2 002477   200075 755100                    STA     J,,AUTO

     1684    13081    4           END;

     1685    13082    3           GOTO CONVERT_TIME;

  13082  2 002500   002712 710000 2                  TRA     CONVERT_TIME

     1686    13083    3       END;
     1687    13084            /*
     1688    13085              Dates Before Christ cause problems because they run backwards...
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:256  
     1689    13086              Ascending absolute values for all subfields of BC dates must be
     1690    13087              subtracted from the maximum for the subfield to get the value to
     1691    13088              use.  Also, the lack of year and day zero introduces discontinuities
     1692    13089              in the weekday and leap year cycles.  Weekdays are calculated
     1693    13090              differently for dates AD and BC to maintain continuity, but leap
     1694    13091              years BC are calculated as if they were AD.  Leap years weren't
     1695    13092              introduced until 1582 AD, this is arguably as correct as anything
     1696    13093              else, even though it means one leap day is "lost".  It is also
     1697    13094              both easier to implement and less confusing to users than any
     1698    13095              scheme to keep strict continuity.
     1699    13096              Yes, I know, it would be, in some sense, more accurate to calculate
     1700    13097              dates with no leap days before the Gregorian calendar was introduced,
     1701    13098              but gimme a break!  It was hard enough to tune this so that you get
     1702    13099              consistent results converting to and from internal form using the
     1703    13100              current "simplified" scheme.  Besides, not adding leap days before
     1704    13101              they were invented would only keep closer in step with contemporary
     1705    13102              calendars for another 1000 years back, when the Julian calendar
     1706    13103              was introduced; before that, lack of leap days would cause dates
     1707    13104              to get increasingly out of sync with reality.
     1708    13105            */
     1709    13106    2       IF DAYS < 0 OR TICS < 0

  13106  2 002501   200055 235100                    LDA     DAYS,,AUTO
         2 002502   002505 604000 2                  TMI     s:13108
         2 002503   200056 236100                    LDQ     TICS,,AUTO
         2 002504   002523 605000 2                  TPL     s:13117

     1710    13107    3       THEN DO;

     1711    13108    3           FLDS.BC = %XUD#YES;

  13108  2 002505   400000 236003                    LDQ     -131072,DU
         2 002506   200065 256100                    ORSQ    FLDS+5,,AUTO

     1712    13109    3           IF TICS = 0

  13109  2 002507   200056 235100                    LDA     TICS,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:257  
         2 002510   002513 601000 2                  TNZ     s:13113

     1713    13110    3           THEN
     1714    13111    3               DAYS = DAYS + 1;

  13111  2 002511   200055 054100                    AOS     DAYS,,AUTO
         2 002512   002515 710000 2                  TRA     s:13114

     1715    13112    3           ELSE
     1716    13113    3               TICS = %XUD#TICS_DAY + TICS;

  13113  2 002513   000010 236000 3                  LDQ     8
         2 002514   200056 056100                    ASQ     TICS,,AUTO

     1717    13114    3           FLDS.WKDAY = 6 + MOD( DAYS - 6, 7 );

  13114  2 002515   200055 236100                    LDQ     DAYS,,AUTO
         2 002516   000006 136007                    SBLQ    6,DL
         2 002517   000007 506007                    DIV     7,DL
         2 002520   000006 035007                    ADLA    6,DL
         2 002521   200067 755100                    STA     FLDS+7,,AUTO

     1718    13115    3       END;

  13115  2 002522   002527 710000 2                  TRA     s:13129

     1719    13116    2       ELSE
     1720    13117    2           FLDS.WKDAY = MOD( DAYS + 1, 7 );

  13117  2 002523   200055 236100                    LDQ     DAYS,,AUTO
         2 002524   000001 036007                    ADLQ    1,DL
         2 002525   000007 506007                    DIV     7,DL
         2 002526   200067 755100                    STA     FLDS+7,,AUTO

     1721    13118            /*
     1722    13119              Any year evenly divisible by 4 is a leap year, except if the year is a
     1723    13120              multiple of 100 it is only a leap year if it is also a multiple of 400.
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:258  
     1724    13121              Given the number of days since Jan. 1, 1 AD, the next few lines use
     1725    13122              these magic numbers to compute the total number of leap days elapsed:
     1726    13123                305 = number of days from leap day to start of next year AD.
     1727    13124                60 = number of days from leap day to end of prior year BC.
     1728    13125                1461 = number of days in 4 years.
     1729    13126                36525 = number of days in 100 years (without nonleap century).
     1730    13127                146096 = number of days in 400 years.
     1731    13128            */
     1732    13129    2       IF NOT FLDS.BC

  13129  2 002527   200065 234100                    SZN     FLDS+5,,AUTO
         2 002530   002535 604000 2                  TMI     s:13131

     1733    13130    2         THEN J = DAYS + 305;

  13130  2 002531   200055 236100                    LDQ     DAYS,,AUTO
         2 002532   000461 036007                    ADLQ    305,DL
         2 002533   200075 756100                    STQ     J,,AUTO
         2 002534   002540 710000 2                  TRA     s:13132

     1734    13131    2         ELSE J = DAYS - 60;

  13131  2 002535   200055 236100                    LDQ     DAYS,,AUTO
         2 002536   000074 136007                    SBLQ    60,DL
         2 002537   200075 756100                    STQ     J,,AUTO

     1735    13132    2       I = ((J / 146096) * 3) + (MOD( J, 146096 ) / 36525);/* nonleap centuries */

  13132  2 002540   435260 506007                    DIV     -116048,DL
         2 002541   000044 733000                    LRS     36
         2 002542   107255 506007                    DIV     36525,DL
         2 002543   200152 756100                    STQ     LIMIT+1,,AUTO
         2 002544   200075 236100                    LDQ     J,,AUTO
         2 002545   435260 506007                    DIV     -116048,DL
         2 002546   000003 402007                    MPY     3,DL
         2 002547   200152 036100                    ADLQ    LIMIT+1,,AUTO
         2 002550   200074 756100                    STQ     I,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:259  

     1736    13133    2       I = ((I + J) / 1461) - I;                           /* total leap days */

  13133  2 002551   200075 036100                    ADLQ    J,,AUTO
         2 002552   002665 506007                    DIV     1461,DL
         2 002553   200074 136100                    SBLQ    I,,AUTO
         2 002554   200074 756100                    STQ     I,,AUTO

     1737    13134            /*
     1738    13135              Once leap days are eliminated, the year is simply the total number
     1739    13136              of days divided by the number of days in a non-leap year.
     1740    13137            */
     1741    13138    2       FLDS.YEAR = (DAYS - I) / 365;

  13138  2 002555   200055 236100                    LDQ     DAYS,,AUTO
         2 002556   200074 136100                    SBLQ    I,,AUTO
         2 002557   000555 506007                    DIV     365,DL
         2 002560   200060 756100                    STQ     FLDS,,AUTO

     1742    13139            /*
     1743    13140              The number of leap days computed above cannot be used to get the
     1744    13141              Julian day because it is not known if one of those leap days was
     1745    13142              in the current year.  But now that the year is known, the number
     1746    13143              of leap days before that year can be calculated using a different
     1747    13144              method to get the correct Julian day (not yet adjusted for years BC).
     1748    13145            */
     1749    13146    2       FLDS.JULIAN = DAYS - (FLDS.YEAR * 365) - ((FLDS.YEAR * 12) / 48)

  13146  2 002561   000011 402000 3                  MPY     9
         2 002562   200055 036100                    ADLQ    DAYS,,AUTO
         2 002563   200152 756100                    STQ     LIMIT+1,,AUTO
         2 002564   200060 236100                    LDQ     FLDS,,AUTO
         2 002565   000014 402007                    MPY     12,DL
         2 002566   000060 506007                    DIV     48,DL
         2 002567   200153 756100                    STQ     LIMIT+2,,AUTO
         2 002570   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 002571   200153 136100                    SBLQ    LIMIT+2,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:260  
         2 002572   200154 756100                    STQ     LIMIT+3,,AUTO
         2 002573   200060 236100                    LDQ     FLDS,,AUTO
         2 002574   000620 506007                    DIV     400,DL
         2 002575   000003 402007                    MPY     3,DL
         2 002576   200154 036100                    ADLQ    LIMIT+3,,AUTO
         2 002577   200155 756100                    STQ     LIMIT+4,,AUTO
         2 002600   200060 236100                    LDQ     FLDS,,AUTO
         2 002601   000620 506007                    DIV     400,DL
         2 002602   000044 733000                    LRS     36
         2 002603   000144 506007                    DIV     100,DL
         2 002604   200155 036100                    ADLQ    LIMIT+4,,AUTO
         2 002605   000001 036007                    ADLQ    1,DL
         2 002606   200063 756100                    STQ     FLDS+3,,AUTO

     1750    13147    2         + ((FLDS.YEAR / 400) * 3) + (MOD( FLDS.YEAR, 400 ) / 100) + 1;
     1751    13148            /*
     1752    13149              The preceding calculations use the zero-relative year, but the
     1753    13150              first year BC and AD is actually 1.  The actual year is needed
     1754    13151              for the remaining calculations...
     1755    13152            */
     1756    13153    2       IF FLDS.BC

  13153  2 002607   200065 234100                    SZN     FLDS+5,,AUTO
         2 002610   002613 605000 2                  TPL     s:13155

     1757    13154    2         THEN FLDS.YEAR = - FLDS.YEAR;

  13154  2 002611   200060 335100                    LCA     FLDS,,AUTO
         2 002612   200060 755100                    STA     FLDS,,AUTO

     1758    13155    2       FLDS.YEAR = FLDS.YEAR + 1;

  13155  2 002613   200060 054100                    AOS     FLDS,,AUTO

     1759    13156            /*
     1760    13157              In order to compute the month and day, and to adjust the Julian
     1761    13158              date for years BC, we must know whether or not a leap day has
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:261  
     1762    13159              been taken earlier in the year...
     1763    13160            */
     1764    13161    2       IF MOD( FLDS.YEAR, 4 ) = 0

  13161  2 002614   200060 236100                    LDQ     FLDS,,AUTO
         2 002615   000004 506007                    DIV     4,DL
         2 002616   000044 733000                    LRS     36
         2 002617   000000 116003                    CMPQ    0,DU
         2 002620   002665 601000 2                  TNZ     s:13182
         2 002621   200060 236100                    LDQ     FLDS,,AUTO
         2 002622   000144 506007                    DIV     100,DL
         2 002623   000044 733000                    LRS     36
         2 002624   000000 116003                    CMPQ    0,DU
         2 002625   002633 601000 2                  TNZ     s:13164
         2 002626   200060 236100                    LDQ     FLDS,,AUTO
         2 002627   000620 506007                    DIV     400,DL
         2 002630   000044 733000                    LRS     36
         2 002631   000000 116003                    CMPQ    0,DU
         2 002632   002665 601000 2                  TNZ     s:13182

     1765    13162    2         AND( MOD( FLDS.YEAR, 100 ) ~= 0 OR MOD( FLDS.YEAR, 400 ) = 0 )
     1766    13163    3       THEN DO;

     1767    13164    3           IF FLDS.JULIAN >= 60 OR FLDS.JULIAN <= -305

  13164  2 002633   200063 235100                    LDA     FLDS+3,,AUTO
         2 002634   000074 115007                    CMPA    60,DL
         2 002635   002640 605000 2                  TPL     s:13166
         2 002636   000012 115000 3                  CMPA    10
         2 002637   002655 605400 2                  TPNZ    s:13175

     1768    13165    4           THEN DO;

     1769    13166    4               IF FLDS.JULIAN = 60 OR FLDS.JULIAN = -305

  13166  2 002640   000074 115007                    CMPA    60,DL
         2 002641   002644 600000 2                  TZE     s:13168
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:262  
         2 002642   000012 115000 3                  CMPA    10
         2 002643   002653 601000 2                  TNZ     s:13173

     1770    13167    5               THEN DO;

     1771    13168    5                   FLDS.MON = 2;

  13168  2 002644   000002 236007                    LDQ     2,DL
         2 002645   200061 756100                    STQ     FLDS+1,,AUTO

     1772    13169    5                   FLDS.DAY = 29;

  13169  2 002646   000035 235007                    LDA     29,DL
         2 002647   200062 755100                    STA     FLDS+2,,AUTO

     1773    13170    5                   FLDS.JULIAN = 60;

  13170  2 002650   000074 235007                    LDA     60,DL
         2 002651   200063 755100                    STA     FLDS+3,,AUTO

     1774    13171    5                   GOTO CONVERT;

  13171  2 002652   002711 710000 2                  TRA     CONVERT

     1775    13172    5               END;
     1776    13173    4               FLDS.LEAP = 1;

  13173  2 002653   000001 236007                    LDQ     1,DL
         2 002654   200066 756100                    STQ     FLDS+6,,AUTO

     1777    13174    4           END;

     1778    13175    3           IF FLDS.BC

  13175  2 002655   200065 234100                    SZN     FLDS+5,,AUTO
         2 002656   002671 605000 2                  TPL     s:13191

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:263  
     1779    13176    4           THEN DO;

     1780    13177    4               FLDS.JULIAN = 365 + FLDS.JULIAN;

  13177  2 002657   000555 236007                    LDQ     365,DL
         2 002660   200063 056100                    ASQ     FLDS+3,,AUTO

     1781    13178    4               FLDS.LEAP = 1 - FLDS.LEAP;

  13178  2 002661   000001 235007                    LDA     1,DL
         2 002662   200066 135100                    SBLA    FLDS+6,,AUTO
         2 002663   200066 755100                    STA     FLDS+6,,AUTO

     1782    13179    4           END;

     1783    13180    3       END;

  13180  2 002664   002671 710000 2                  TRA     s:13191

     1784    13181    3       ELSE DO;

     1785    13182    3           IF FLDS.BC

  13182  2 002665   200065 234100                    SZN     FLDS+5,,AUTO
         2 002666   002671 605000 2                  TPL     s:13191

     1786    13183    3             THEN FLDS.JULIAN = 364 + FLDS.JULIAN;

  13183  2 002667   000554 236007                    LDQ     364,DL
         2 002670   200063 056100                    ASQ     FLDS+3,,AUTO

     1787    13184    3       END;

     1788    13185            /*
     1789    13186              Whew!  We now know the correct year, the correct day within the
     1790    13187              year, and whether or not a leap day has been taken this year.
     1791    13188              Given that, it is relatively straightforward to calculate the
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:264  
     1792    13189              month and day...
     1793    13190            */
     1794    13191    3       DO FLDS.MON = 0 TO 10;

  13191  2 002671   200061 450100                    STZ     FLDS+1,,AUTO

     1795    13192    3           IF CUM_DAYS( FLDS.MON + 1 ) >= FLDS.JULIAN - FLDS.LEAP

  13192  2 002672   200063 236100                    LDQ     FLDS+3,,AUTO
         2 002673   200066 136100                    SBLQ    FLDS+6,,AUTO
         2 002674   200061 720100                    LXL0    FLDS+1,,AUTO
         2 002675   000072 116010 1                  CMPQ    CUM_DAYS+1,X0
         2 002676   002703 604400 2                  TMOZ    s:13195

     1796    13193    3             THEN EXIT;
     1797    13194    3       END/*TO*/;

  13194  2 002677   200061 054100                    AOS     FLDS+1,,AUTO
         2 002700   200061 235100                    LDA     FLDS+1,,AUTO
         2 002701   000012 115007                    CMPA    10,DL
         2 002702   002672 604400 2                  TMOZ    s:13192

     1798    13195    2       FLDS.DAY = FLDS.JULIAN - CUM_DAYS( FLDS.MON ) - FLDS.LEAP;

  13195  2 002703   200061 720100                    LXL0    FLDS+1,,AUTO
         2 002704   200063 236100                    LDQ     FLDS+3,,AUTO
         2 002705   000071 136010 1                  SBLQ    CUM_DAYS,X0
         2 002706   200066 136100                    SBLQ    FLDS+6,,AUTO
         2 002707   200062 756100                    STQ     FLDS+2,,AUTO

     1799    13196    2       FLDS.MON = FLDS.MON + 1;

  13196  2 002710   200061 054100                    AOS     FLDS+1,,AUTO

  13196  2 002711                       CONVERT      null
     1800    13197
     1801    13198    2   CONVERT: ;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:265  
     1802    13199    2       J = 0;

  13199  2 002711   200075 450100                    STZ     J,,AUTO

  13199  2 002712                       CONVERT_TIME null
     1803    13200    2   CONVERT_TIME: ;
     1804    13201    2       IF PICTURE$ = ADDR( NIL )

  13201  2 002712   200006 236100                    LDQ     PICTURE$,,AUTO
         2 002713   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 002714   002726 601000 2                  TNZ     s:13219

     1805    13202    3       THEN DO;

     1806    13203    3           IF TIMESPAN

  13203  2 002715   200102 234100                    SZN     TIMESPAN,,AUTO
         2 002716   002722 605000 2                  TPL     s:13209

     1807    13204    4           THEN DO;

     1808    13205    4               CALL CVT_TO_SPAN ALTRET( ALT );

  13205  2 002717   004211 701000 2                  TSX1    CVT_TO_SPAN
         2 002720   004136 702000 2                  TSX2    ALT

     1809    13206    4               GOTO DONE;

  13206  2 002721   004110 710000 2                  TRA     DONE

     1810    13207    4           END;
     1811    13208    4           ELSE DO;

     1812    13209    4               PICTURE$ = ADDR( DEFAULT_PICTURE );

  13209  2 002722   000013 236000 3                  LDQ     11
         2 002723   200006 756100                    STQ     PICTURE$,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:266  

     1813    13210    4               PIC_SIZE = LENGTHC( DEFAULT_PICTURE ) - 1;

  13210  2 002724   000005 235007                    LDA     5,DL
         2 002725   200007 755100                    STA     PIC_SIZE,,AUTO

     1814    13211    4           END;

     1815    13212    3       END;

     1816    13213            /*
     1817    13214              Convert the value by processing the picture character by character.
     1818    13215              Each picture char results in one or more chars in the output string.
     1819    13216                I = index into picture.
     1820    13217                J = index into character string.
     1821    13218            */
     1822    13219    3       DO I = 0 TO PIC_SIZE - 1;

  13219  2 002726   200074 450100                    STZ     I,,AUTO
         2 002727   004105 710000 2                  TRA     s:13561+1

     1823    13220    4           DO CASE( ASCBIN( SUBSTR( PICTURE.T, I, 1 )));

  13220  2 002730   200006 470500                    LDP0    PICTURE$,,AUTO
         2 002731   200074 235100                    LDA     I,,AUTO
         2 002732   000100 101505                    MRL     fill='000'O
         2 002733   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         2 002734   200152 000004                    ADSC9   LIMIT+1,,AUTO            cn=0,n=4
         2 002735   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 002736   000400 136007                    SBLQ    256,DL
         2 002737   000074 116007                    CMPQ    60,DL
         2 002740   002742 602006 2                  TNC     s:13220+10,QL
         2 002741   004066 710000 2                  TRA     s:13555
         2 002742   004064 710000 2                  TRA     s:13553
         2 002743   003036 710000 2                  TRA     s:13226
         2 002744   003050 710000 2                  TRA     s:13231
         2 002745   003062 710000 2                  TRA     s:13236
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:267  
         2 002746   003106 710000 2                  TRA     s:13241
         2 002747   003140 710000 2                  TRA     s:13251
         2 002750   003145 710000 2                  TRA     s:13255
         2 002751   003156 710000 2                  TRA     s:13262
         2 002752   003176 710000 2                  TRA     s:13271
         2 002753   003227 710000 2                  TRA     s:13283
         2 002754   003161 710000 2                  TRA     s:13265
         2 002755   003201 710000 2                  TRA     s:13274
         2 002756   003232 710000 2                  TRA     s:13286
         2 002757   003257 710000 2                  TRA     s:13297
         2 002760   003264 710000 2                  TRA     s:13301
         2 002761   003324 710000 2                  TRA     s:13330
         2 002762   003355 710000 2                  TRA     s:13345
         2 002763   003355 710000 2                  TRA     s:13345
         2 002764   003332 710000 2                  TRA     s:13333
         2 002765   003363 710000 2                  TRA     s:13348
         2 002766   003411 710000 2                  TRA     s:13362
         2 002767   003335 710000 2                  TRA     s:13336
         2 002770   003366 710000 2                  TRA     s:13351
         2 002771   003414 710000 2                  TRA     s:13365
         2 002772   003340 710000 2                  TRA     s:13339
         2 002773   003371 710000 2                  TRA     s:13354
         2 002774   003417 710000 2                  TRA     s:13368
         2 002775   003315 710000 2                  TRA     s:13323
         2 002776   003271 710000 2                  TRA     s:13308
         2 002777   003310 710000 2                  TRA     s:13316
         2 003000   003434 710000 2                  TRA     DATE_AD
         2 003001   003456 710000 2                  TRA     DATE_A_D
         2 003002   003500 710000 2                  TRA     s:13395
         2 003003   003504 710000 2                  TRA     s:13401
         2 003004   003510 710000 2                  TRA     s:13407
         2 003005   003536 710000 2                  TRA     s:13420
         2 003006   003564 710000 2                  TRA     s:13433
         2 003007   003570 710000 2                  TRA     s:13438
         2 003010   004066 710000 2                  TRA     s:13555
         2 003011   004066 710000 2                  TRA     s:13555
         2 003012   004066 710000 2                  TRA     s:13555
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:268  
         2 003013   004066 710000 2                  TRA     s:13555
         2 003014   004066 710000 2                  TRA     s:13555
         2 003015   003574 710000 2                  TRA     s:13446
         2 003016   003674 710000 2                  TRA     s:13480
         2 003017   003722 710000 2                  TRA     s:13494
         2 003020   003750 710000 2                  TRA     s:13508
         2 003021   004007 710000 2                  TRA     s:13528
         2 003022   003632 710000 2                  TRA     s:13460
         2 003023   003646 710000 2                  TRA     s:13468
         2 003024   003640 710000 2                  TRA     s:13464
         2 003025   003661 710000 2                  TRA     s:13474
         2 003026   003704 710000 2                  TRA     s:13486
         2 003027   003713 710000 2                  TRA     s:13490
         2 003030   003732 710000 2                  TRA     s:13500
         2 003031   003741 710000 2                  TRA     s:13504
         2 003032   003760 710000 2                  TRA     s:13514
         2 003033   004001 710000 2                  TRA     s:13524
         2 003034   004014 710000 2                  TRA     s:13534
         2 003035   004040 710000 2                  TRA     s:13542

     1824    13221
     1825    13222                /*
     1826    13223                  Picture codes for year...
     1827    13224                */
     1828    13225    4           CASE( %XUD#P_DATE_Y1 );

     1829    13226    4               NUM = MOD( FLDS.YEAR, 10 );

  13226  2 003036   200060 236100                    LDQ     FLDS,,AUTO
         2 003037   000012 506007                    DIV     10,DL
         2 003040   200101 755100                    STA     NUM,,AUTO

     1830    13227    4               LEN = 1;

  13227  2 003041   000001 236007                    LDQ     1,DL
         2 003042   200100 756100                    STQ     LEN,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:269  
     1831    13228    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13228  2 003043   004140 701000 2                  TSX1    CHECK_SIZE
         2 003044   004123 702000 2                  TSX2    E_SHORT_CHAR

     1832    13229    4               CALL CVT_FROM_NUM;

  13229  2 003045   004161 701000 2                  TSX1    CVT_FROM_NUM
         2 003046   000000 011000                    NOP     0
         2 003047   004101 710000 2                  TRA     s:13560

     1833    13230    4           CASE( %XUD#P_DATE_Y2 );

     1834    13231    4               NUM = MOD( FLDS.YEAR, 100 );

  13231  2 003050   200060 236100                    LDQ     FLDS,,AUTO
         2 003051   000144 506007                    DIV     100,DL
         2 003052   200101 755100                    STA     NUM,,AUTO

     1835    13232    4               LEN = 2;

  13232  2 003053   000002 236007                    LDQ     2,DL
         2 003054   200100 756100                    STQ     LEN,,AUTO

     1836    13233    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13233  2 003055   004140 701000 2                  TSX1    CHECK_SIZE
         2 003056   004123 702000 2                  TSX2    E_SHORT_CHAR

     1837    13234    4               CALL CVT_FROM_NUM;

  13234  2 003057   004161 701000 2                  TSX1    CVT_FROM_NUM
         2 003060   000000 011000                    NOP     0
         2 003061   004101 710000 2                  TRA     s:13560

     1838    13235    4           CASE( %XUD#P_DATE_Y4 );

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:270  
     1839    13236    4               CALL BINCHAR( LIMBO, FLDS.YEAR );

  13236  2 003062   000100 301500                    BTD
         2 003063   200060 000004                    NDSC9   FLDS,,AUTO               cn=0,s=lsgnf,sf=0,n=4
         2 003064   200052 030014                    NDSC9   LIMBO,,AUTO              cn=0,s=nosgn,sf=0,n=12

     1840    13237    4               CALL SEARCH( LEN, JUNK, B$SR_NON_ZERO, LIMBO );

  13237  2 003065   000000 471400 xsym               LDP1    B$SR_NON_ZERO$
         2 003066   000000 164500                    TCT
         2 003067   200052 000014                    ADSC9   LIMBO,,AUTO              cn=0,n=12
         2 003070   100000 000100                    ARG     0,,PR1
         2 003071   200100 000100                    ARG     LEN,,AUTO
         2 003072   200100 236100                    LDQ     LEN,,AUTO
         2 003073   000044 737000                    LLS     36
         2 003074   000033 771000                    ARL     27
         2 003075   200077 755100                    STA     JUNK,,AUTO
         2 003076   200100 551140                    STBA    LEN,'40'O,AUTO

     1841    13238    4               LEN = MINIMUM( LENGTHC( LIMBO ) - LEN, 4 );

  13238  2 003077   000014 236007                    LDQ     12,DL
         2 003100   200100 136100                    SBLQ    LEN,,AUTO
         2 003101   000004 116007                    CMPQ    4,DL
         2 003102   003104 604400 2                  TMOZ    s:13238+5
         2 003103   000004 236007                    LDQ     4,DL
         2 003104   200100 756100                    STQ     LEN,,AUTO

     1842    13239    4               GOTO MOVENUM;

  13239  2 003105   003126 710000 2                  TRA     MOVENUM

     1843    13240    4           CASE( %XUD#P_DATE_Y5 );

     1844    13241    4               CALL BINCHAR( LIMBO, FLDS.YEAR );

  13241  2 003106   000100 301500                    BTD
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:271  
         2 003107   200060 000004                    NDSC9   FLDS,,AUTO               cn=0,s=lsgnf,sf=0,n=4
         2 003110   200052 030014                    NDSC9   LIMBO,,AUTO              cn=0,s=nosgn,sf=0,n=12

     1845    13242    4               CALL SEARCH( LEN, JUNK, B$SR_NON_ZERO, LIMBO );

  13242  2 003111   000000 471400 xsym               LDP1    B$SR_NON_ZERO$
         2 003112   000000 164500                    TCT
         2 003113   200052 000014                    ADSC9   LIMBO,,AUTO              cn=0,n=12
         2 003114   100000 000100                    ARG     0,,PR1
         2 003115   200100 000100                    ARG     LEN,,AUTO
         2 003116   200100 236100                    LDQ     LEN,,AUTO
         2 003117   000044 737000                    LLS     36
         2 003120   000033 771000                    ARL     27
         2 003121   200077 755100                    STA     JUNK,,AUTO
         2 003122   200100 551140                    STBA    LEN,'40'O,AUTO

     1846    13243    4               LEN = LENGTHC( LIMBO ) - LEN;

  13243  2 003123   000014 236007                    LDQ     12,DL
         2 003124   200100 136100                    SBLQ    LEN,,AUTO
         2 003125   200100 756100                    STQ     LEN,,AUTO

  13243  2 003126                       MOVENUM      null
     1847    13244    4   MOVENUM:    ;
     1848    13245    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13245  2 003126   004140 701000 2                  TSX1    CHECK_SIZE
         2 003127   004123 702000 2                  TSX2    E_SHORT_CHAR

     1849    13246    4               SUBSTR( CHARS, J, LEN ) = SUBSTR( LIMBO, LENGTHC( LIMBO ) - LEN );

  13246  2 003130   200100 335100                    LCA     LEN,,AUTO
         2 003131   200100 720100                    LXL0    LEN,,AUTO
         2 003132   200011 470500                    LDP0    CHARS$,,AUTO
         2 003133   200075 236100                    LDQ     J,,AUTO
         2 003134   040146 100545                    MLR     fill='040'O
         2 003135   200055 000010                    ADSC9   DAYS,A,AUTO              cn=0,n=*X0
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:272  
         2 003136   000000 000010                    ADSC9   0,Q,PR0                  cn=0,n=*X0
         2 003137   004101 710000 2                  TRA     s:13560

     1850    13247                /*
     1851    13248                  Picture codes for month...
     1852    13249                */
     1853    13250    4           CASE( %XUD#P_DATE_M1 );

     1854    13251    4               NUM = FLDS.MON;

  13251  2 003140   200061 236100                    LDQ     FLDS+1,,AUTO
         2 003141   200101 756100                    STQ     NUM,,AUTO

     1855    13252    4               CALL SET_LEN_1OR2;

  13252  2 003142   004147 701000 2                  TSX1    SET_LEN_1OR2
         2 003143   000000 011000                    NOP     0

     1856    13253    4               GOTO CVTNUM;

  13253  2 003144   003151 710000 2                  TRA     CVTNUM

     1857    13254    4           CASE( %XUD#P_DATE_M2 );

     1858    13255    4               NUM = FLDS.MON;

  13255  2 003145   200061 236100                    LDQ     FLDS+1,,AUTO
         2 003146   200101 756100                    STQ     NUM,,AUTO

     1859    13256    4               LEN = 2;

  13256  2 003147   000002 235007                    LDA     2,DL
         2 003150   200100 755100                    STA     LEN,,AUTO

  13256  2 003151                       CVTNUM       null
     1860    13257    4   CVTNUM:     ;
     1861    13258    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:273  

  13258  2 003151   004140 701000 2                  TSX1    CHECK_SIZE
         2 003152   004123 702000 2                  TSX2    E_SHORT_CHAR

     1862    13259    4               CALL CVT_FROM_NUM;

  13259  2 003153   004161 701000 2                  TSX1    CVT_FROM_NUM
         2 003154   000000 011000                    NOP     0
         2 003155   004101 710000 2                  TRA     s:13560

     1863    13260
     1864    13261    4           CASE( %XUD#P_DATE_M3UC );

     1865    13262    4               LEN = 3;

  13262  2 003156   000003 236007                    LDQ     3,DL
         2 003157   200100 756100                    STQ     LEN,,AUTO

     1866    13263    4               GOTO DATE_M_UC;

  13263  2 003160   003166 710000 2                  TRA     DATE_M_UC

     1867    13264    4           CASE( %XUD#P_DATE_M4UC );

     1868    13265    4               LEN = MONTH$( FLDS.MON - 1 )-> TEXTC.L;

  13265  2 003161   200061 720100                    LXL0    FLDS+1,,AUTO
         2 003162   000134 471410 1                  LDP1    MON_DAYS+11,X0
         2 003163   000100 101500                    MRL     fill='000'O
         2 003164   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 003165   200100 000004                    ADSC9   LEN,,AUTO                cn=0,n=4

  13265  2 003166                       DATE_M_UC    null
     1869    13266    4   DATE_M_UC:  ;
     1870    13267    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13267  2 003166   004140 701000 2                  TSX1    CHECK_SIZE
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:274  
         2 003167   004123 702000 2                  TSX2    E_SHORT_CHAR

     1871    13268    4               CALL MOVE_ALPHA( MONTH$( FLDS.MON - 1 ));

  13268  2 003170   200061 720100                    LXL0    FLDS+1,,AUTO
         2 003171   000134 630410 1                  EPPR0   MON_DAYS+11,X0
         2 003172   200141 450500                    STP0    OUT_FLAG+1,,AUTO
         2 003173   004172 701000 2                  TSX1    MOVE_ALPHA
         2 003174   000000 011000                    NOP     0
         2 003175   004101 710000 2                  TRA     s:13560

     1872    13269
     1873    13270    4           CASE( %XUD#P_DATE_M3IC );

     1874    13271    4               LEN = 3;

  13271  2 003176   000003 236007                    LDQ     3,DL
         2 003177   200100 756100                    STQ     LEN,,AUTO

     1875    13272    4               GOTO DATE_M_IC;

  13272  2 003200   003206 710000 2                  TRA     DATE_M_IC

     1876    13273    4           CASE( %XUD#P_DATE_M4IC );

     1877    13274    4               LEN = MONTH$( FLDS.MON - 1 )-> TEXTC.L;

  13274  2 003201   200061 720100                    LXL0    FLDS+1,,AUTO
         2 003202   000134 471410 1                  LDP1    MON_DAYS+11,X0
         2 003203   000100 101500                    MRL     fill='000'O
         2 003204   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 003205   200100 000004                    ADSC9   LEN,,AUTO                cn=0,n=4

  13274  2 003206                       DATE_M_IC    null
     1878    13275    4   DATE_M_IC:  ;
     1879    13276    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:275  
  13276  2 003206   004140 701000 2                  TSX1    CHECK_SIZE
         2 003207   004123 702000 2                  TSX2    E_SHORT_CHAR

     1880    13277    4               CALL MOVE_ALPHA( MONTH$( FLDS.MON - 1 ));

  13277  2 003210   200061 720100                    LXL0    FLDS+1,,AUTO
         2 003211   000134 630410 1                  EPPR0   MON_DAYS+11,X0
         2 003212   200141 450500                    STP0    OUT_FLAG+1,,AUTO
         2 003213   004172 701000 2                  TSX1    MOVE_ALPHA
         2 003214   000000 011000                    NOP     0

  13274  2 003215                       XLATE_IC     null
     1881    13278    4   XLATE_IC:   ;
     1882    13279    4               CALL XLATE( SUBSTR( CHARS, J+1, LEN-1 ), B$XL_LOWER_UR,

  13279  2 003215   200100 720100                    LXL0    LEN,,AUTO
         2 003216   777777 621010                    EAX1    -1,X0
         2 003217   200011 470500                    LDP0    CHARS$,,AUTO
         2 003220   200075 235100                    LDA     J,,AUTO
         2 003221   000000 471400 xsym               LDP1    B$XL_LOWER_UR$
         2 003222   040145 160545                    MVT     fill='040'O
         2 003223   000000 200011                    ADSC9   0,A,PR0                  cn=1,n=*X1
         2 003224   000000 200011                    ADSC9   0,A,PR0                  cn=1,n=*X1
         2 003225   100000 000100                    ARG     0,,PR1
         2 003226   004101 710000 2                  TRA     s:13560

     1883    13280    4                 SUBSTR( CHARS, J+1, LEN-1 ));
     1884    13281
     1885    13282    4           CASE( %XUD#P_DATE_M3LC );

     1886    13283    4               LEN = 3;

  13283  2 003227   000003 236007                    LDQ     3,DL
         2 003230   200100 756100                    STQ     LEN,,AUTO

     1887    13284    4               GOTO DATE_M_LC;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:276  
  13284  2 003231   003237 710000 2                  TRA     DATE_M_LC

     1888    13285    4           CASE( %XUD#P_DATE_M4LC );

     1889    13286    4               LEN = MONTH$( FLDS.MON - 1 )-> TEXTC.L;

  13286  2 003232   200061 720100                    LXL0    FLDS+1,,AUTO
         2 003233   000134 471410 1                  LDP1    MON_DAYS+11,X0
         2 003234   000100 101500                    MRL     fill='000'O
         2 003235   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 003236   200100 000004                    ADSC9   LEN,,AUTO                cn=0,n=4

  13286  2 003237                       DATE_M_LC    null
     1890    13287    4   DATE_M_LC:  ;
     1891    13288    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13288  2 003237   004140 701000 2                  TSX1    CHECK_SIZE
         2 003240   004123 702000 2                  TSX2    E_SHORT_CHAR

     1892    13289    4               CALL MOVE_ALPHA( MONTH$( FLDS.MON - 1 ));

  13289  2 003241   200061 720100                    LXL0    FLDS+1,,AUTO
         2 003242   000134 630410 1                  EPPR0   MON_DAYS+11,X0
         2 003243   200141 450500                    STP0    OUT_FLAG+1,,AUTO
         2 003244   004172 701000 2                  TSX1    MOVE_ALPHA
         2 003245   000000 011000                    NOP     0

  13286  2 003246                       XLATE_LC     null
     1893    13290    4   XLATE_LC:   ;
     1894    13291    4               CALL XLATE( SUBSTR( CHARS, J, LEN ), B$XL_LOWER_UR,

  13291  2 003246   200011 470500                    LDP0    CHARS$,,AUTO
         2 003247   200100 720100                    LXL0    LEN,,AUTO
         2 003250   200075 235100                    LDA     J,,AUTO
         2 003251   000000 471400 xsym               LDP1    B$XL_LOWER_UR$
         2 003252   040145 160545                    MVT     fill='040'O
         2 003253   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:277  
         2 003254   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 003255   100000 000100                    ARG     0,,PR1
         2 003256   004101 710000 2                  TRA     s:13560

     1895    13292    4                 SUBSTR( CHARS, J, LEN ));
     1896    13293                /*
     1897    13294                  Picture codes for day of month...
     1898    13295                */
     1899    13296    4           CASE( %XUD#P_DATE_D1 );

     1900    13297    4               NUM = FLDS.DAY;

  13297  2 003257   200062 236100                    LDQ     FLDS+2,,AUTO
         2 003260   200101 756100                    STQ     NUM,,AUTO

     1901    13298    4               CALL SET_LEN_1OR2;

  13298  2 003261   004147 701000 2                  TSX1    SET_LEN_1OR2
         2 003262   000000 011000                    NOP     0

     1902    13299    4               GOTO CVTNUM;

  13299  2 003263   003151 710000 2                  TRA     CVTNUM

     1903    13300    4           CASE( %XUD#P_DATE_D2 );

     1904    13301    4               NUM = FLDS.DAY;

  13301  2 003264   200062 236100                    LDQ     FLDS+2,,AUTO
         2 003265   200101 756100                    STQ     NUM,,AUTO

     1905    13302    4               LEN = 2;

  13302  2 003266   000002 235007                    LDA     2,DL
         2 003267   200100 755100                    STA     LEN,,AUTO

     1906    13303    4               GOTO CVTNUM;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:278  

  13303  2 003270   003151 710000 2                  TRA     CVTNUM

     1907    13304                /*
     1908    13305                  Picture codes for day of year...
     1909    13306                */
     1910    13307    4           CASE( %XUD#P_DATE_J1 );

     1911    13308    4               NUM = FLDS.JULIAN;

  13308  2 003271   200063 236100                    LDQ     FLDS+3,,AUTO
         2 003272   200101 756100                    STQ     NUM,,AUTO

     1912    13309    4               IF NUM < 10

  13309  2 003273   000012 116007                    CMPQ    10,DL
         2 003274   003300 605000 2                  TPL     s:13311

     1913    13310    4                 THEN LEN = 1;

  13310  2 003275   000001 235007                    LDA     1,DL
         2 003276   200100 755100                    STA     LEN,,AUTO
         2 003277   003307 710000 2                  TRA     s:13314

     1914    13311    4                 ELSE IF NUM < 100

  13311  2 003300   000144 116007                    CMPQ    100,DL
         2 003301   003305 605000 2                  TPL     s:13313

     1915    13312    4                   THEN LEN = 2;

  13312  2 003302   000002 235007                    LDA     2,DL
         2 003303   200100 755100                    STA     LEN,,AUTO
         2 003304   003307 710000 2                  TRA     s:13314

     1916    13313    4                   ELSE LEN = 3;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:279  
  13313  2 003305   000003 235007                    LDA     3,DL
         2 003306   200100 755100                    STA     LEN,,AUTO

     1917    13314    4               GOTO CVTNUM;

  13314  2 003307   003151 710000 2                  TRA     CVTNUM

     1918    13315    4           CASE( %XUD#P_DATE_J3 );

     1919    13316    4               NUM = FLDS.JULIAN;

  13316  2 003310   200063 236100                    LDQ     FLDS+3,,AUTO
         2 003311   200101 756100                    STQ     NUM,,AUTO

     1920    13317    4               LEN = 3;

  13317  2 003312   000003 235007                    LDA     3,DL
         2 003313   200100 755100                    STA     LEN,,AUTO

     1921    13318    4               GOTO CVTNUM;

  13318  2 003314   003151 710000 2                  TRA     CVTNUM

     1922    13319                /*
     1923    13320                  Picture code for quarter of year...
     1924    13321                */
     1925    13322    4           CASE( %XUD#P_DATE_Q );

     1926    13323    4               NUM = (FLDS.MON / 3) + 1;

  13323  2 003315   200061 236100                    LDQ     FLDS+1,,AUTO
         2 003316   000003 506007                    DIV     3,DL
         2 003317   000001 036007                    ADLQ    1,DL
         2 003320   200101 756100                    STQ     NUM,,AUTO

     1927    13324    4               LEN = 1;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:280  
  13324  2 003321   000001 235007                    LDA     1,DL
         2 003322   200100 755100                    STA     LEN,,AUTO

     1928    13325    4               GOTO CVTNUM;

  13325  2 003323   003151 710000 2                  TRA     CVTNUM

     1929    13326                /*
     1930    13327                  Picture codes for day of week...
     1931    13328                */
     1932    13329    4           CASE( %XUD#P_DATE_W1UC );

     1933    13330    4               LEN = MOD( FLDS.WKDAY + 1, 2 ) + 1;

  13330  2 003324   200067 236100                    LDQ     FLDS+7,,AUTO
         2 003325   000001 036007                    ADLQ    1,DL
         2 003326   000002 506007                    DIV     2,DL
         2 003327   000001 035007                    ADLA    1,DL
         2 003330   200100 755100                    STA     LEN,,AUTO

     1934    13331    4               GOTO DATE_W_UC;

  13331  2 003331   003345 710000 2                  TRA     DATE_W_UC

     1935    13332    4           CASE( %XUD#P_DATE_W2UC );

     1936    13333    4               LEN = 2;

  13333  2 003332   000002 236007                    LDQ     2,DL
         2 003333   200100 756100                    STQ     LEN,,AUTO

     1937    13334    4               GOTO DATE_W_UC;

  13334  2 003334   003345 710000 2                  TRA     DATE_W_UC

     1938    13335    4           CASE( %XUD#P_DATE_W3UC );

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:281  
     1939    13336    4               LEN = 3;

  13336  2 003335   000003 236007                    LDQ     3,DL
         2 003336   200100 756100                    STQ     LEN,,AUTO

     1940    13337    4               GOTO DATE_W_UC;

  13337  2 003337   003345 710000 2                  TRA     DATE_W_UC

     1941    13338    4           CASE( %XUD#P_DATE_W4UC );

     1942    13339    4               LEN = WEEKDAY$( FLDS.WKDAY )-> TEXTC.L;

  13339  2 003340   200067 720100                    LXL0    FLDS+7,,AUTO
         2 003341   000213 471410 1                  LDP1    WEEKDAY$,X0
         2 003342   000100 101500                    MRL     fill='000'O
         2 003343   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 003344   200100 000004                    ADSC9   LEN,,AUTO                cn=0,n=4

  13339  2 003345                       DATE_W_UC    null
     1943    13340    4   DATE_W_UC:  ;
     1944    13341    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13341  2 003345   004140 701000 2                  TSX1    CHECK_SIZE
         2 003346   004123 702000 2                  TSX2    E_SHORT_CHAR

     1945    13342    4               CALL MOVE_ALPHA( WEEKDAY$( FLDS.WKDAY ));

  13342  2 003347   200067 720100                    LXL0    FLDS+7,,AUTO
         2 003350   000213 630410 1                  EPPR0   WEEKDAY$,X0
         2 003351   200141 450500                    STP0    OUT_FLAG+1,,AUTO
         2 003352   004172 701000 2                  TSX1    MOVE_ALPHA
         2 003353   000000 011000                    NOP     0
         2 003354   004101 710000 2                  TRA     s:13560

     1946    13343
     1947    13344    4           CASE( %XUD#P_DATE_W1LC, %XUD#P_DATE_W1IC );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:282  

     1948    13345    4               LEN = MOD( FLDS.WKDAY + 1, 2 ) + 1;

  13345  2 003355   200067 236100                    LDQ     FLDS+7,,AUTO
         2 003356   000001 036007                    ADLQ    1,DL
         2 003357   000002 506007                    DIV     2,DL
         2 003360   000001 035007                    ADLA    1,DL
         2 003361   200100 755100                    STA     LEN,,AUTO

     1949    13346    4               GOTO DATE_W_IC;

  13346  2 003362   003376 710000 2                  TRA     DATE_W_IC

     1950    13347    4           CASE( %XUD#P_DATE_W2IC );

     1951    13348    4               LEN = 2;

  13348  2 003363   000002 236007                    LDQ     2,DL
         2 003364   200100 756100                    STQ     LEN,,AUTO

     1952    13349    4               GOTO DATE_W_IC;

  13349  2 003365   003376 710000 2                  TRA     DATE_W_IC

     1953    13350    4           CASE( %XUD#P_DATE_W3IC );

     1954    13351    4               LEN = 3;

  13351  2 003366   000003 236007                    LDQ     3,DL
         2 003367   200100 756100                    STQ     LEN,,AUTO

     1955    13352    4               GOTO DATE_W_IC;

  13352  2 003370   003376 710000 2                  TRA     DATE_W_IC

     1956    13353    4           CASE( %XUD#P_DATE_W4IC );

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:283  
     1957    13354    4               LEN = WEEKDAY$( FLDS.WKDAY )-> TEXTC.L;

  13354  2 003371   200067 720100                    LXL0    FLDS+7,,AUTO
         2 003372   000213 471410 1                  LDP1    WEEKDAY$,X0
         2 003373   000100 101500                    MRL     fill='000'O
         2 003374   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 003375   200100 000004                    ADSC9   LEN,,AUTO                cn=0,n=4

  13354  2 003376                       DATE_W_IC    null
     1958    13355    4   DATE_W_IC:  ;
     1959    13356    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13356  2 003376   004140 701000 2                  TSX1    CHECK_SIZE
         2 003377   004123 702000 2                  TSX2    E_SHORT_CHAR

     1960    13357    4               CALL MOVE_ALPHA( WEEKDAY$( FLDS.WKDAY ));

  13357  2 003400   200067 720100                    LXL0    FLDS+7,,AUTO
         2 003401   000213 630410 1                  EPPR0   WEEKDAY$,X0
         2 003402   200141 450500                    STP0    OUT_FLAG+1,,AUTO
         2 003403   004172 701000 2                  TSX1    MOVE_ALPHA
         2 003404   000000 011000                    NOP     0

     1961    13358    4               IF LEN > 1

  13358  2 003405   200100 235100                    LDA     LEN,,AUTO
         2 003406   000001 115007                    CMPA    1,DL
         2 003407   003215 605400 2                  TPNZ    XLATE_IC
         2 003410   004101 710000 2                  TRA     s:13560

     1962    13359    4                 THEN GOTO XLATE_IC;
     1963    13360
     1964    13361    4           CASE( %XUD#P_DATE_W2LC );

     1965    13362    4               LEN = 2;

  13362  2 003411   000002 236007                    LDQ     2,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:284  
         2 003412   200100 756100                    STQ     LEN,,AUTO

     1966    13363    4               GOTO DATE_W_LC;

  13363  2 003413   003424 710000 2                  TRA     DATE_W_LC

     1967    13364    4           CASE( %XUD#P_DATE_W3LC );

     1968    13365    4               LEN = 3;

  13365  2 003414   000003 236007                    LDQ     3,DL
         2 003415   200100 756100                    STQ     LEN,,AUTO

     1969    13366    4               GOTO DATE_W_LC;

  13366  2 003416   003424 710000 2                  TRA     DATE_W_LC

     1970    13367    4           CASE( %XUD#P_DATE_W4LC );

     1971    13368    4               LEN = WEEKDAY$( FLDS.WKDAY )-> TEXTC.L;

  13368  2 003417   200067 720100                    LXL0    FLDS+7,,AUTO
         2 003420   000213 471410 1                  LDP1    WEEKDAY$,X0
         2 003421   000100 101500                    MRL     fill='000'O
         2 003422   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 003423   200100 000004                    ADSC9   LEN,,AUTO                cn=0,n=4

  13368  2 003424                       DATE_W_LC    null
     1972    13369    4   DATE_W_LC:  ;
     1973    13370    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13370  2 003424   004140 701000 2                  TSX1    CHECK_SIZE
         2 003425   004123 702000 2                  TSX2    E_SHORT_CHAR

     1974    13371    4               CALL MOVE_ALPHA( WEEKDAY$( FLDS.WKDAY ));

  13371  2 003426   200067 720100                    LXL0    FLDS+7,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:285  
         2 003427   000213 630410 1                  EPPR0   WEEKDAY$,X0
         2 003430   200141 450500                    STP0    OUT_FLAG+1,,AUTO
         2 003431   004172 701000 2                  TSX1    MOVE_ALPHA
         2 003432   000000 011000                    NOP     0

     1975    13372    4               GOTO XLATE_LC;

  13372  2 003433   003246 710000 2                  TRA     XLATE_LC

     1976    13373                /*
     1977    13374                  Picture codes for AD/BC...
     1978    13375                */
     1979    13376    4           CASE( %XUD#P_DATE_AD );

  13372  2 003434                       DATE_AD      null
     1980    13377    4   DATE_AD:    ;
     1981    13378    4               LEN = 2;

  13378  2 003434   000002 235007                    LDA     2,DL
         2 003435   200100 755100                    STA     LEN,,AUTO

     1982    13379    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13379  2 003436   004140 701000 2                  TSX1    CHECK_SIZE
         2 003437   004123 702000 2                  TSX2    E_SHORT_CHAR

     1983    13380    4               IF FLDS.BC

  13380  2 003440   200065 234100                    SZN     FLDS+5,,AUTO
         2 003441   003450 605000 2                  TPL     s:13384

     1984    13381    4               THEN
     1985    13382    4                   SUBSTR( CHARS, J, 2 ) = 'BC';

  13382  2 003442   200011 470500                    LDP0    CHARS$,,AUTO
         2 003443   200075 235100                    LDA     J,,AUTO
         2 003444   040105 100400                    MLR     fill='040'O
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:286  
         2 003445   000272 000002 1                  ADSC9   MAX_DATE_INIT+5          cn=0,n=2
         2 003446   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         2 003447   004101 710000 2                  TRA     s:13560

     1986    13383    4               ELSE
     1987    13384    4                   SUBSTR( CHARS, J, 2 ) = 'AD';

  13384  2 003450   200011 470500                    LDP0    CHARS$,,AUTO
         2 003451   200075 235100                    LDA     J,,AUTO
         2 003452   040105 100400                    MLR     fill='040'O
         2 003453   000273 000002 1                  ADSC9   MAX_DATE_INIT+6          cn=0,n=2
         2 003454   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         2 003455   004101 710000 2                  TRA     s:13560

     1988    13385    4           CASE( %XUD#P_DATE_A_D );

  13378  2 003456                       DATE_A_D     null
     1989    13386    4   DATE_A_D:   ;
     1990    13387    4               LEN = 4;

  13387  2 003456   000004 235007                    LDA     4,DL
         2 003457   200100 755100                    STA     LEN,,AUTO

     1991    13388    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13388  2 003460   004140 701000 2                  TSX1    CHECK_SIZE
         2 003461   004123 702000 2                  TSX2    E_SHORT_CHAR

     1992    13389    4               IF FLDS.BC

  13389  2 003462   200065 234100                    SZN     FLDS+5,,AUTO
         2 003463   003472 605000 2                  TPL     s:13393

     1993    13390    4               THEN
     1994    13391    4                   SUBSTR( CHARS, J, 4 ) = 'B.C.';

  13391  2 003464   200011 470500                    LDP0    CHARS$,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:287  
         2 003465   200075 235100                    LDA     J,,AUTO
         2 003466   040105 100400                    MLR     fill='040'O
         2 003467   000274 000004 1                  ADSC9   MAX_DATE_INIT+7          cn=0,n=4
         2 003470   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         2 003471   004101 710000 2                  TRA     s:13560

     1995    13392    4               ELSE
     1996    13393    4                   SUBSTR( CHARS, J, 4 ) = 'A.D.';

  13393  2 003472   200011 470500                    LDP0    CHARS$,,AUTO
         2 003473   200075 235100                    LDA     J,,AUTO
         2 003474   040105 100400                    MLR     fill='040'O
         2 003475   000275 000004 1                  ADSC9   MAX_DATE_INIT+8          cn=0,n=4
         2 003476   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         2 003477   004101 710000 2                  TRA     s:13560

     1997    13394    4           CASE( %XUD#P_DATE_BC );

     1998    13395    4               IF FLDS.BC

  13395  2 003500   200065 234100                    SZN     FLDS+5,,AUTO
         2 003501   003434 604000 2                  TMI     DATE_AD

     1999    13396    4               THEN
     2000    13397    4                   GOTO DATE_AD;
     2001    13398    4               ELSE
     2002    13399    4                   LEN = 0;

  13399  2 003502   200100 450100                    STZ     LEN,,AUTO
         2 003503   004101 710000 2                  TRA     s:13560

     2003    13400    4           CASE( %XUD#P_DATE_B_C );

     2004    13401    4               IF FLDS.BC

  13401  2 003504   200065 234100                    SZN     FLDS+5,,AUTO
         2 003505   003456 604000 2                  TMI     DATE_A_D
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:288  

     2005    13402    4               THEN
     2006    13403    4                   GOTO DATE_A_D;
     2007    13404    4               ELSE
     2008    13405    4                   LEN = 0;

  13405  2 003506   200100 450100                    STZ     LEN,,AUTO
         2 003507   004101 710000 2                  TRA     s:13560

     2009    13406    4           CASE( %XUD#P_DATE_CE );

     2010    13407    4               IF FLDS.BC

  13407  2 003510   200065 234100                    SZN     FLDS+5,,AUTO
         2 003511   003524 605000 2                  TPL     s:13415

     2011    13408    5               THEN DO;

  13405  2 003512                       DATE_BCE     null
     2012    13409    5   DATE_BCE:       ;
     2013    13410    5                   LEN = 3;

  13410  2 003512   000003 235007                    LDA     3,DL
         2 003513   200100 755100                    STA     LEN,,AUTO

     2014    13411    5                   CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13411  2 003514   004140 701000 2                  TSX1    CHECK_SIZE
         2 003515   004123 702000 2                  TSX2    E_SHORT_CHAR

     2015    13412    5                   SUBSTR( CHARS, J, 3 ) = 'BCE';

  13412  2 003516   200011 470500                    LDP0    CHARS$,,AUTO
         2 003517   200075 235100                    LDA     J,,AUTO
         2 003520   040105 100400                    MLR     fill='040'O
         2 003521   000276 000003 1                  ADSC9   MAX_DATE_INIT+9          cn=0,n=3
         2 003522   000000 000003                    ADSC9   0,A,PR0                  cn=0,n=3
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:289  

     2016    13413    5               END;

  13413  2 003523   004101 710000 2                  TRA     s:13560

     2017    13414    5               ELSE DO;

     2018    13415    5                   LEN = 2;

  13415  2 003524   000002 236007                    LDQ     2,DL
         2 003525   200100 756100                    STQ     LEN,,AUTO

     2019    13416    5                   CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13416  2 003526   004140 701000 2                  TSX1    CHECK_SIZE
         2 003527   004123 702000 2                  TSX2    E_SHORT_CHAR

     2020    13417    5                   SUBSTR( CHARS, J, 2 ) = 'CE';

  13417  2 003530   200011 470500                    LDP0    CHARS$,,AUTO
         2 003531   200075 235100                    LDA     J,,AUTO
         2 003532   040105 100400                    MLR     fill='040'O
         2 003533   000277 000002 1                  ADSC9   MAX_DATE_INIT+10         cn=0,n=2
         2 003534   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2

     2021    13418    5               END;

  13418  2 003535   004101 710000 2                  TRA     s:13560

     2022    13419    4           CASE( %XUD#P_DATE_C_E );

     2023    13420    4               IF FLDS.BC

  13420  2 003536   200065 234100                    SZN     FLDS+5,,AUTO
         2 003537   003552 605000 2                  TPL     s:13428

     2024    13421    5               THEN DO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:290  

  13415  2 003540                       DATE_B_C_E   null
     2025    13422    5   DATE_B_C_E:     ;
     2026    13423    5                   LEN = 6;

  13423  2 003540   000006 235007                    LDA     6,DL
         2 003541   200100 755100                    STA     LEN,,AUTO

     2027    13424    5                   CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13424  2 003542   004140 701000 2                  TSX1    CHECK_SIZE
         2 003543   004123 702000 2                  TSX2    E_SHORT_CHAR

     2028    13425    5                   SUBSTR( CHARS, J, 6 ) = 'B.C.E.';

  13425  2 003544   200011 470500                    LDP0    CHARS$,,AUTO
         2 003545   200075 235100                    LDA     J,,AUTO
         2 003546   040105 100400                    MLR     fill='040'O
         2 003547   000300 000006 1                  ADSC9   MAX_DATE_INIT+11         cn=0,n=6
         2 003550   000000 000006                    ADSC9   0,A,PR0                  cn=0,n=6

     2029    13426    5               END;

  13426  2 003551   004101 710000 2                  TRA     s:13560

     2030    13427    5               ELSE DO;

     2031    13428    5                   LEN = 4;

  13428  2 003552   000004 236007                    LDQ     4,DL
         2 003553   200100 756100                    STQ     LEN,,AUTO

     2032    13429    5                   CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13429  2 003554   004140 701000 2                  TSX1    CHECK_SIZE
         2 003555   004123 702000 2                  TSX2    E_SHORT_CHAR

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:291  
     2033    13430    5                   SUBSTR( CHARS, J, 4 ) = 'C.E.';

  13430  2 003556   200011 470500                    LDP0    CHARS$,,AUTO
         2 003557   200075 235100                    LDA     J,,AUTO
         2 003560   040105 100400                    MLR     fill='040'O
         2 003561   000302 000004 1                  ADSC9   MAX_DATE_INIT+13         cn=0,n=4
         2 003562   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4

     2034    13431    5               END;

  13431  2 003563   004101 710000 2                  TRA     s:13560

     2035    13432    4           CASE( %XUD#P_DATE_BCE );

     2036    13433    4               IF FLDS.BC

  13433  2 003564   200065 234100                    SZN     FLDS+5,,AUTO
         2 003565   003512 604000 2                  TMI     DATE_BCE

     2037    13434    4               THEN
     2038    13435    4                   GOTO DATE_BCE;
     2039    13436    4               LEN = 0;

  13436  2 003566   200100 450100                    STZ     LEN,,AUTO
         2 003567   004101 710000 2                  TRA     s:13560

     2040    13437    4           CASE( %XUD#P_DATE_B_C_E );

     2041    13438    4               IF FLDS.BC

  13438  2 003570   200065 234100                    SZN     FLDS+5,,AUTO
         2 003571   003540 604000 2                  TMI     DATE_B_C_E

     2042    13439    4               THEN
     2043    13440    4                   GOTO DATE_B_C_E;
     2044    13441    4               LEN = 0;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:292  
  13441  2 003572   200100 450100                    STZ     LEN,,AUTO
         2 003573   004101 710000 2                  TRA     s:13560

     2045    13442        /*
     2046    13443                  Picture code for days...
     2047    13444                */
     2048    13445    4           CASE( %XUD#P_TIME_D3 );

     2049    13446    4               NUM = DAYS;

  13446  2 003574   200055 236100                    LDQ     DAYS,,AUTO
         2 003575   200101 756100                    STQ     NUM,,AUTO

  13446  2 003576                       TIME_1ST     null
     2050    13447    4   TIME_1ST:   ;
     2051    13448    4               CALL BINCHAR( LIMBO, NUM );

  13448  2 003576   000100 301500                    BTD
         2 003577   200101 000004                    NDSC9   NUM,,AUTO                cn=0,s=lsgnf,sf=0,n=4
         2 003600   200052 030014                    NDSC9   LIMBO,,AUTO              cn=0,s=nosgn,sf=0,n=12

     2052    13449    4               CALL SEARCH( LEN, JUNK, B$SR_NON_ZERO, LIMBO );

  13449  2 003601   000000 470400 xsym               LDP0    B$SR_NON_ZERO$
         2 003602   000000 164500                    TCT
         2 003603   200052 000014                    ADSC9   LIMBO,,AUTO              cn=0,n=12
         2 003604   000000 000100                    ARG     0,,PR0
         2 003605   200100 000100                    ARG     LEN,,AUTO
         2 003606   200100 235100                    LDA     LEN,,AUTO
         2 003607   000033 771000                    ARL     27
         2 003610   200077 755100                    STA     JUNK,,AUTO
         2 003611   200100 551140                    STBA    LEN,'40'O,AUTO

     2053    13450    4               LEN = MAXIMUM( 1, LENGTHC( LIMBO ) - LEN );

  13450  2 003612   000014 236007                    LDQ     12,DL
         2 003613   200100 136100                    SBLQ    LEN,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:293  
         2 003614   000001 116007                    CMPQ    1,DL
         2 003615   003617 605000 2                  TPL     s:13450+5
         2 003616   000001 236007                    LDQ     1,DL
         2 003617   200100 756100                    STQ     LEN,,AUTO

     2054    13451    4               IF I < PIC_SIZE

  13451  2 003620   200074 236100                    LDQ     I,,AUTO
         2 003621   200007 116100                    CMPQ    PIC_SIZE,,AUTO
         2 003622   003631 605000 2                  TPL     s:13455

     2055    13452    4               THEN IF SUBSTR( PICTURE.T, I+1, 1 ) < %XUD#BLANK

  13452  2 003623   200006 471500                    LDP1    PICTURE$,,AUTO
         2 003624   040000 106506                    CMPC    fill='040'O
         2 003625   100000 400001                    ADSC9   0,Q,PR1                  cn=2,n=1
         2 003626   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 003627   003631 603000 2                  TRC     s:13455

     2056    13453    4               THEN
     2057    13454    4                   I = I + 1;

  13454  2 003630   200074 054100                    AOS     I,,AUTO

     2058    13455    4               GOTO MOVENUM;

  13455  2 003631   003126 710000 2                  TRA     MOVENUM

     2059    13456                /*
     2060    13457                  Picture codes for hour...
     2061    13458                */
     2062    13459    4           CASE( %XUD#P_TIME_H1 );

     2063    13460    4               NUM = TICS / %XUD#TICS_HOUR;

  13460  2 003632   200056 236100                    LDQ     TICS,,AUTO
         2 003633   000014 506000 3                  DIV     12
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:294  
         2 003634   200101 756100                    STQ     NUM,,AUTO

     2064    13461    4               CALL SET_LEN_1OR2;

  13461  2 003635   004147 701000 2                  TSX1    SET_LEN_1OR2
         2 003636   000000 011000                    NOP     0

     2065    13462    4               GOTO CVTNUM;

  13462  2 003637   003151 710000 2                  TRA     CVTNUM

     2066    13463    4           CASE( %XUD#P_TIME_H2 );

     2067    13464    4               NUM = TICS / %XUD#TICS_HOUR;

  13464  2 003640   200056 236100                    LDQ     TICS,,AUTO
         2 003641   000014 506000 3                  DIV     12
         2 003642   200101 756100                    STQ     NUM,,AUTO

     2068    13465    4               LEN = 2;

  13465  2 003643   000002 235007                    LDA     2,DL
         2 003644   200100 755100                    STA     LEN,,AUTO

     2069    13466    4               GOTO CVTNUM;

  13466  2 003645   003151 710000 2                  TRA     CVTNUM

     2070    13467    4           CASE( %XUD#P_TIME_H1A );

     2071    13468    4               NUM = MOD( TICS / %XUD#TICS_HOUR, 12 );

  13468  2 003646   200056 236100                    LDQ     TICS,,AUTO
         2 003647   000014 506000 3                  DIV     12
         2 003650   000014 506007                    DIV     12,DL
         2 003651   200101 755100                    STA     NUM,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:295  
     2072    13469    4               IF NUM = 0

  13469  2 003652   000000 115003                    CMPA    0,DU
         2 003653   003656 601000 2                  TNZ     s:13471

     2073    13470    4                 THEN NUM = 12;

  13470  2 003654   000014 236007                    LDQ     12,DL
         2 003655   200101 756100                    STQ     NUM,,AUTO

     2074    13471    4               CALL SET_LEN_1OR2;

  13471  2 003656   004147 701000 2                  TSX1    SET_LEN_1OR2
         2 003657   000000 011000                    NOP     0

     2075    13472    4               GOTO CVTNUM;

  13472  2 003660   003151 710000 2                  TRA     CVTNUM

     2076    13473    4           CASE( %XUD#P_TIME_H2A );

     2077    13474    4               NUM = MOD( TICS / %XUD#TICS_HOUR, 12 );

  13474  2 003661   200056 236100                    LDQ     TICS,,AUTO
         2 003662   000014 506000 3                  DIV     12
         2 003663   000014 506007                    DIV     12,DL
         2 003664   200101 755100                    STA     NUM,,AUTO

     2078    13475    4               LEN = 2;

  13475  2 003665   000002 236007                    LDQ     2,DL
         2 003666   200100 756100                    STQ     LEN,,AUTO

     2079    13476    4               IF NUM = 0

  13476  2 003667   000000 115003                    CMPA    0,DU
         2 003670   003673 601000 2                  TNZ     s:13478
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:296  

     2080    13477    4                 THEN NUM = 12;

  13477  2 003671   000014 235007                    LDA     12,DL
         2 003672   200101 755100                    STA     NUM,,AUTO

     2081    13478    4               GOTO CVTNUM;

  13478  2 003673   003151 710000 2                  TRA     CVTNUM

     2082    13479    4           CASE( %XUD#P_TIME_H3 );

     2083    13480    4               NUM = (TICS / %XUD#TICS_HOUR) + (DAYS * %XUD#HOURS_DAY);

  13480  2 003674   200056 236100                    LDQ     TICS,,AUTO
         2 003675   000014 506000 3                  DIV     12
         2 003676   200152 756100                    STQ     LIMIT+1,,AUTO
         2 003677   200055 236100                    LDQ     DAYS,,AUTO
         2 003700   000030 402007                    MPY     24,DL
         2 003701   200152 036100                    ADLQ    LIMIT+1,,AUTO
         2 003702   200101 756100                    STQ     NUM,,AUTO

     2084    13481    4               GOTO TIME_1ST;

  13481  2 003703   003576 710000 2                  TRA     TIME_1ST

     2085    13482                /*
     2086    13483                  Picture codes for minute...
     2087    13484                */
     2088    13485    4           CASE( %XUD#P_TIME_M1 );

     2089    13486    4               NUM = MOD( TICS / %XUD#TICS_MIN, %XUD#MINS_HOUR );

  13486  2 003704   200056 236100                    LDQ     TICS,,AUTO
         2 003705   013560 506007                    DIV     6000,DL
         2 003706   000074 506007                    DIV     60,DL
         2 003707   200101 755100                    STA     NUM,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:297  

     2090    13487    4               CALL SET_LEN_1OR2;

  13487  2 003710   004147 701000 2                  TSX1    SET_LEN_1OR2
         2 003711   000000 011000                    NOP     0

     2091    13488    4               GOTO CVTNUM;

  13488  2 003712   003151 710000 2                  TRA     CVTNUM

     2092    13489    4           CASE( %XUD#P_TIME_M2 );

     2093    13490    4               NUM = MOD( TICS / %XUD#TICS_MIN, %XUD#MINS_HOUR );

  13490  2 003713   200056 236100                    LDQ     TICS,,AUTO
         2 003714   013560 506007                    DIV     6000,DL
         2 003715   000074 506007                    DIV     60,DL
         2 003716   200101 755100                    STA     NUM,,AUTO

     2094    13491    4               LEN = 2;

  13491  2 003717   000002 236007                    LDQ     2,DL
         2 003720   200100 756100                    STQ     LEN,,AUTO

     2095    13492    4               GOTO CVTNUM;

  13492  2 003721   003151 710000 2                  TRA     CVTNUM

     2096    13493    4           CASE( %XUD#P_TIME_M3 );

     2097    13494    4               NUM = (TICS / %XUD#TICS_MIN) + (DAYS * %XUD#MINS_DAY);

  13494  2 003722   200056 236100                    LDQ     TICS,,AUTO
         2 003723   013560 506007                    DIV     6000,DL
         2 003724   200152 756100                    STQ     LIMIT+1,,AUTO
         2 003725   200055 236100                    LDQ     DAYS,,AUTO
         2 003726   002640 402007                    MPY     1440,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:298  
         2 003727   200152 036100                    ADLQ    LIMIT+1,,AUTO
         2 003730   200101 756100                    STQ     NUM,,AUTO

     2098    13495    4               GOTO TIME_1ST;

  13495  2 003731   003576 710000 2                  TRA     TIME_1ST

     2099    13496                /*
     2100    13497                  Picture codes for second...
     2101    13498                */
     2102    13499    4           CASE( %XUD#P_TIME_S1 );

     2103    13500    4               NUM = MOD( TICS / %XUD#TICS_SEC, %XUD#SECS_MIN );

  13500  2 003732   200056 236100                    LDQ     TICS,,AUTO
         2 003733   000144 506007                    DIV     100,DL
         2 003734   000074 506007                    DIV     60,DL
         2 003735   200101 755100                    STA     NUM,,AUTO

     2104    13501    4               CALL SET_LEN_1OR2;

  13501  2 003736   004147 701000 2                  TSX1    SET_LEN_1OR2
         2 003737   000000 011000                    NOP     0

     2105    13502    4               GOTO CVTNUM;

  13502  2 003740   003151 710000 2                  TRA     CVTNUM

     2106    13503    4           CASE( %XUD#P_TIME_S2 );

     2107    13504    4               NUM = MOD( TICS / %XUD#TICS_SEC, %XUD#SECS_MIN );

  13504  2 003741   200056 236100                    LDQ     TICS,,AUTO
         2 003742   000144 506007                    DIV     100,DL
         2 003743   000074 506007                    DIV     60,DL
         2 003744   200101 755100                    STA     NUM,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:299  
     2108    13505    4               LEN = 2;

  13505  2 003745   000002 236007                    LDQ     2,DL
         2 003746   200100 756100                    STQ     LEN,,AUTO

     2109    13506    4               GOTO CVTNUM;

  13506  2 003747   003151 710000 2                  TRA     CVTNUM

     2110    13507    4           CASE( %XUD#P_TIME_S3 );

     2111    13508    4               NUM = (TICS / %XUD#TICS_SEC) + (DAYS * %XUD#SECS_DAY);

  13508  2 003750   200056 236100                    LDQ     TICS,,AUTO
         2 003751   000144 506007                    DIV     100,DL
         2 003752   200152 756100                    STQ     LIMIT+1,,AUTO
         2 003753   200055 236100                    LDQ     DAYS,,AUTO
         2 003754   250600 402007                    MPY     86400,DL
         2 003755   200152 036100                    ADLQ    LIMIT+1,,AUTO
         2 003756   200101 756100                    STQ     NUM,,AUTO

     2112    13509    4               GOTO TIME_1ST;

  13509  2 003757   003576 710000 2                  TRA     TIME_1ST

     2113    13510                /*
     2114    13511                  Picture codes for clock tics...
     2115    13512                */
     2116    13513    4           CASE( %XUD#P_TIME_T1 );

     2117    13514    4               NUM = MOD( TICS, %XUD#TICS_SEC );

  13514  2 003760   200056 236100                    LDQ     TICS,,AUTO
         2 003761   000144 506007                    DIV     100,DL
         2 003762   200101 755100                    STA     NUM,,AUTO

     2118    13515    4               IF MOD( NUM, 10 ) = 0
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:300  

  13515  2 003763   200101 236100                    LDQ     NUM,,AUTO
         2 003764   000012 506007                    DIV     10,DL
         2 003765   000044 733000                    LRS     36
         2 003766   000000 116003                    CMPQ    0,DU
         2 003767   003776 601000 2                  TNZ     s:13521

     2119    13516    5               THEN DO;

     2120    13517    5                   NUM = NUM / 10;

  13517  2 003770   200101 236100                    LDQ     NUM,,AUTO
         2 003771   000012 506007                    DIV     10,DL
         2 003772   200101 756100                    STQ     NUM,,AUTO

     2121    13518    5                   LEN = 1;

  13518  2 003773   000001 235007                    LDA     1,DL
         2 003774   200100 755100                    STA     LEN,,AUTO

     2122    13519    5               END;

  13519  2 003775   004000 710000 2                  TRA     s:13522

     2123    13520    4               ELSE
     2124    13521    4                   LEN = 2;

  13521  2 003776   000002 235007                    LDA     2,DL
         2 003777   200100 755100                    STA     LEN,,AUTO

     2125    13522    4               GOTO CVTNUM;

  13522  2 004000   003151 710000 2                  TRA     CVTNUM

     2126    13523    4           CASE( %XUD#P_TIME_T2 );

     2127    13524    4               NUM = MOD( TICS, %XUD#TICS_SEC );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:301  

  13524  2 004001   200056 236100                    LDQ     TICS,,AUTO
         2 004002   000144 506007                    DIV     100,DL
         2 004003   200101 755100                    STA     NUM,,AUTO

     2128    13525    4               LEN = 2;

  13525  2 004004   000002 236007                    LDQ     2,DL
         2 004005   200100 756100                    STQ     LEN,,AUTO

     2129    13526    4               GOTO CVTNUM;

  13526  2 004006   003151 710000 2                  TRA     CVTNUM

     2130    13527    4           CASE( %XUD#P_TIME_T3 );

     2131    13528    4               NUM = TICS + (DAYS * %XUD#TICS_DAY);

  13528  2 004007   200055 236100                    LDQ     DAYS,,AUTO
         2 004010   000010 402000 3                  MPY     8
         2 004011   200056 036100                    ADLQ    TICS,,AUTO
         2 004012   200101 756100                    STQ     NUM,,AUTO

     2132    13529    4               GOTO TIME_1ST;

  13529  2 004013   003576 710000 2                  TRA     TIME_1ST

     2133    13530                /*
     2134    13531                  Picture codes for AM/PM...
     2135    13532                */
     2136    13533    4           CASE( %XUD#P_TIME_APM );

     2137    13534    4               LEN = 2;

  13534  2 004014   000002 236007                    LDQ     2,DL
         2 004015   200100 756100                    STQ     LEN,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:302  
     2138    13535    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13535  2 004016   004140 701000 2                  TSX1    CHECK_SIZE
         2 004017   004123 702000 2                  TSX2    E_SHORT_CHAR

     2139    13536    4               IF TICS / %XUD#TICS_HOUR < 12

  13536  2 004020   200056 236100                    LDQ     TICS,,AUTO
         2 004021   000014 506000 3                  DIV     12
         2 004022   000014 116007                    CMPQ    12,DL
         2 004023   004032 605000 2                  TPL     s:13540

     2140    13537    4               THEN
     2141    13538    4                   SUBSTR( CHARS, J, 2 ) = 'AM';

  13538  2 004024   200011 470500                    LDP0    CHARS$,,AUTO
         2 004025   200075 235100                    LDA     J,,AUTO
         2 004026   040105 100400                    MLR     fill='040'O
         2 004027   000303 000002 1                  ADSC9   MAX_DATE_INIT+14         cn=0,n=2
         2 004030   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         2 004031   004101 710000 2                  TRA     s:13560

     2142    13539    4               ELSE
     2143    13540    4                   SUBSTR( CHARS, J, 2 ) = 'PM';

  13540  2 004032   200011 470500                    LDP0    CHARS$,,AUTO
         2 004033   200075 235100                    LDA     J,,AUTO
         2 004034   040105 100400                    MLR     fill='040'O
         2 004035   000304 000002 1                  ADSC9   MAX_DATE_INIT+15         cn=0,n=2
         2 004036   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         2 004037   004101 710000 2                  TRA     s:13560

     2144    13541    4           CASE( %XUD#P_TIME_AP_M );

     2145    13542    4               LEN = 4;

  13542  2 004040   000004 236007                    LDQ     4,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:303  
         2 004041   200100 756100                    STQ     LEN,,AUTO

     2146    13543    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13543  2 004042   004140 701000 2                  TSX1    CHECK_SIZE
         2 004043   004123 702000 2                  TSX2    E_SHORT_CHAR

     2147    13544    4               IF TICS / %XUD#TICS_HOUR < 12

  13544  2 004044   200056 236100                    LDQ     TICS,,AUTO
         2 004045   000014 506000 3                  DIV     12
         2 004046   000014 116007                    CMPQ    12,DL
         2 004047   004056 605000 2                  TPL     s:13548

     2148    13545    4               THEN
     2149    13546    4                   SUBSTR( CHARS, J, 4 ) = 'A.M.';

  13546  2 004050   200011 470500                    LDP0    CHARS$,,AUTO
         2 004051   200075 235100                    LDA     J,,AUTO
         2 004052   040105 100400                    MLR     fill='040'O
         2 004053   000305 000004 1                  ADSC9   MAX_DATE_INIT+16         cn=0,n=4
         2 004054   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         2 004055   004101 710000 2                  TRA     s:13560

     2150    13547    4               ELSE
     2151    13548    4                   SUBSTR( CHARS, J, 4 ) = 'P.M.';

  13548  2 004056   200011 470500                    LDP0    CHARS$,,AUTO
         2 004057   200075 235100                    LDA     J,,AUTO
         2 004060   040105 100400                    MLR     fill='040'O
         2 004061   000306 000004 1                  ADSC9   MAX_DATE_INIT+17         cn=0,n=4
         2 004062   000000 000004                    ADSC9   0,A,PR0                  cn=0,n=4
         2 004063   004101 710000 2                  TRA     s:13560

     2152    13549                /*
     2153    13550                  Picture punctuation...
     2154    13551                */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:304  
     2155    13552    4           CASE( %XUD#P_SWITCH );

     2156    13553    4               LEN = 0;

  13553  2 004064   200100 450100                    STZ     LEN,,AUTO
         2 004065   004101 710000 2                  TRA     s:13560

     2157    13554    4           CASE( ELSE );

     2158    13555    4               LEN = 1;

  13555  2 004066   000001 236007                    LDQ     1,DL
         2 004067   200100 756100                    STQ     LEN,,AUTO

     2159    13556    4               CALL CHECK_SIZE ALTRET( E_SHORT_CHAR );

  13556  2 004070   004140 701000 2                  TSX1    CHECK_SIZE
         2 004071   004123 702000 2                  TSX2    E_SHORT_CHAR

     2160    13557    4               SUBSTR( CHARS, J, 1 ) = SUBSTR( PICTURE.T, I, 1 );

  13557  2 004072   200006 470500                    LDP0    PICTURE$,,AUTO
         2 004073   200074 235100                    LDA     I,,AUTO
         2 004074   200011 471500                    LDP1    CHARS$,,AUTO
         2 004075   200075 236100                    LDQ     J,,AUTO
         2 004076   040106 100505                    MLR     fill='040'O
         2 004077   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         2 004100   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1

     2161    13558
     2162    13559    4           END/*CASE*/;

     2163    13560    3           J = J + LEN;

  13560  2 004101   200075 236100                    LDQ     J,,AUTO
         2 004102   200100 036100                    ADLQ    LEN,,AUTO
         2 004103   200075 756100                    STQ     J,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:305  

     2164    13561    3       END/*TO*/;

  13561  2 004104   200074 054100                    AOS     I,,AUTO
         2 004105   200074 236100                    LDQ     I,,AUTO
         2 004106   200007 116100                    CMPQ    PIC_SIZE,,AUTO
         2 004107   002730 604000 2                  TMI     s:13220

     2165    13562
     2166    13563    2   DONE: ;

  13563  2 004110                       DONE         null
     2167    13564    2       IF XUD_PARAM.TEXTC

  13564  2 004110   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 004111   000001 234100                    SZN     1,,PR0
         2 004112   004117 605000 2                  TPL     s:13567

     2168    13565    2       THEN
     2169    13566    2           ADDR(DATA_OUT)-> TEXTC.L = J;

  13566  2 004113   200005 471500                    LDP1    @DATA_OUT,,AUTO
         2 004114   000100 101500                    MRL     fill='000'O
         2 004115   200075 000004                    ADSC9   J,,AUTO                  cn=0,n=4
         2 004116   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     2170    13567    2       XUD_PARAM.DATA_SIZE = J;

  13567  2 004117   200075 236100                    LDQ     J,,AUTO
         2 004120   000001 552104                    STBQ    1,'04'O,PR0

     2171    13568
     2172    13569    2       RETURN;

  13569  2 004121   200136 221300                    LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 004122   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:306  
     2173    13570
     2174    13571    2   E_SHORT_CHAR:
     2175    13572    2       IF XUD_PARAM.TEXTC

  13572  2 004123   200003 470500       E_SHORT_CHAR LDP0    @XUD_PARAM,,AUTO
         2 004124   000001 234100                    SZN     1,,PR0
         2 004125   004132 605000 2                  TPL     s:13575

     2176    13573    2       THEN
     2177    13574    2           ADDR(DATA_OUT)-> TEXTC.L = J;

  13574  2 004126   200005 471500                    LDP1    @DATA_OUT,,AUTO
         2 004127   000100 101500                    MRL     fill='000'O
         2 004130   200075 000004                    ADSC9   J,,AUTO                  cn=0,n=4
         2 004131   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     2178    13575    2       XUD_PARAM.DATA_SIZE = J;

  13575  2 004132   200075 236100                    LDQ     J,,AUTO
         2 004133   000001 552104                    STBQ    1,'04'O,PR0

     2179    13576    2       ERR = E_XUD#SHORT_CHAR;

  13576  2 004134   000046 236000 1                  LDQ     E_XUD#SHORT_CHAR
         2 004135   200103 756100                    STQ     ERR,,AUTO

     2180    13577    2   ALT:ALTRETURN;

  13577  2 004136   200136 221300       ALT          LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 004137   000000 702211                    TSX2  ! 0,X1

     2181    13578
     2182    13579        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:307  
     2183    13580        /******************************************************************************/
     2184    13581        /*I*
     2185    13582        NAME:   CHECK_SIZE
     2186    13583        PURPOSE:
     2187    13584                Altreturn if subfield would overflow string size.
     2188    13585        CALL:
     2189    13586                CALL CHECK_SIZE ALTRET( overflow );
     2190    13587        INPUT:
     2191    13588                J - current position in string.
     2192    13589                LEN - length of subfield to be appended to string.
     2193    13590                CHAR_SIZE - maximum string size.
     2194    13591        INTERFACE:
     2195    13592                None.
     2196    13593        */
     2197    13594        /******************************************************************************/
     2198    13595
     2199    13596    2   CHECK_SIZE: PROC ALTRET;

  13596  2 004140   200140 741300       CHECK_SIZE   STX1  ! OUT_FLAG,,AUTO

     2200    13597
     2201    13598    3       IF J + LEN > CHAR_SIZE

  13598  2 004141   200075 236100                    LDQ     J,,AUTO
         2 004142   200100 036100                    ADLQ    LEN,,AUTO
         2 004143   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 004144   004146 604400 2                  TMOZ    s:13600

     2202    13599    3         THEN ALTRETURN;

  13599  2 004145   000000 702211                    TSX2  ! 0,X1

     2203    13600    3         ELSE RETURN;

  13600  2 004146   000001 702211                    TSX2  ! 1,X1

     2204    13601
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:308  
     2205    13602    3   END CHECK_SIZE;
     2206    13603        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:309  
     2207    13604        /******************************************************************************/
     2208    13605        /*I*
     2209    13606        NAME:   SET_LEN_1OR2
     2210    13607        PURPOSE:
     2211    13608                Set length for 1 or 2 digit leading zero-suppressed subfield.
     2212    13609        CALL:
     2213    13610                CALL SET_LEN_1OR2;
     2214    13611        INPUT:
     2215    13612                NUM - The number whose length is to be returned.
     2216    13613        OUTPUT:
     2217    13614                LEN - The length of the number.
     2218    13615        INTERFACE:
     2219    13616                None.
     2220    13617        */
     2221    13618        /******************************************************************************/
     2222    13619
     2223    13620    2   SET_LEN_1OR2: PROC;

  13620  2 004147   200142 741300       SET_LEN_1OR2 STX1  ! UTS_IN_DAYS+1,,AUTO

     2224    13621
     2225    13622    3       IF NUM < 10

  13622  2 004150   200101 235100                    LDA     NUM,,AUTO
         2 004151   000012 115007                    CMPA    10,DL
         2 004152   004156 605000 2                  TPL     s:13624

     2226    13623    3         THEN LEN = 1;

  13623  2 004153   000001 236007                    LDQ     1,DL
         2 004154   200100 756100                    STQ     LEN,,AUTO
         2 004155   004160 710000 2                  TRA     s:13625

     2227    13624    3         ELSE LEN = 2;

  13624  2 004156   000002 236007                    LDQ     2,DL
         2 004157   200100 756100                    STQ     LEN,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:310  

     2228    13625    3       RETURN;

  13625  2 004160   000001 702211                    TSX2  ! 1,X1

     2229    13626
     2230    13627    3   END SET_LEN_1OR2;
     2231    13628        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:311  
     2232    13629        /******************************************************************************/
     2233    13630        /*I*
     2234    13631        NAME:   CVT_FROM_NUM
     2235    13632        PURPOSE:
     2236    13633                Convert a numeric subfield to character.
     2237    13634        CALL:
     2238    13635                CALL CVT_FROM_NUM;
     2239    13636        INPUT:
     2240    13637                NUM - binary subfield to be converted.
     2241    13638                J - current offset into string.
     2242    13639                LEN - number of digits of converted number.
     2243    13640        INTERFACE:
     2244    13641                None.
     2245    13642        */
     2246    13643        /******************************************************************************/
     2247    13644
     2248    13645    2   CVT_FROM_NUM: PROC;

  13645  2 004161   200142 741300       CVT_FROM_NUM STX1  ! UTS_IN_DAYS+1,,AUTO

     2249    13646
     2250    13647    3       CALL BINCHAR( SUBSTR( CHARS, J, LEN ), NUM );

  13647  2 004162   200011 470500                    LDP0    CHARS$,,AUTO
         2 004163   200100 720100                    LXL0    LEN,,AUTO
         2 004164   200075 235100                    LDA     J,,AUTO
         2 004165   000145 301500                    BTD
         2 004166   200101 000004                    NDSC9   NUM,,AUTO                cn=0,s=lsgnf,sf=0,n=4
         2 004167   000000 030010                    NDSC9   0,A,PR0                  cn=0,s=nosgn,sf=0,n=*X0

     2251    13648    3       RETURN;

  13648  2 004170   200142 221300                    LDX1  ! UTS_IN_DAYS+1,,AUTO
         2 004171   000001 702211                    TSX2  ! 1,X1

     2252    13649
     2253    13650    3   END CVT_FROM_NUM;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:312  
     2254    13651        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:313  
     2255    13652        /******************************************************************************/
     2256    13653        /*I*
     2257    13654        NAME:   MOVE_ALPHA
     2258    13655        PURPOSE:
     2259    13656                Move alphabetic substring to result string.
     2260    13657        CALL:
     2261    13658                CALL MOVE_ALPHA( TEXTC$ ));
     2262    13659        PARAMETER:
     2263    13660                TEXTC$ - Pointer to TEXTC string containing text to move.
     2264    13661        INPUT:
     2265    13662                J - Current offset into result string.
     2266    13663                LEN - Number of characters to move.
     2267    13664        INTERFACE:
     2268    13665                None.
     2269    13666        */
     2270    13667        /******************************************************************************/
     2271    13668
     2272    13669    2   MOVE_ALPHA: PROC( TEXTC$ );

  13669  2 004172   200140 741300       MOVE_ALPHA   STX1  ! OUT_FLAG,,AUTO

     2273    13670
     2274    13671    3   DCL TEXTC$ PTR PARAM;
     2275    13672
     2276    13673    3       SUBSTR( CHARS, J, LEN ) = TEXTC$-> TEXTC.T;

  13673  2 004173   200141 470500                    LDP0    @TEXTC$,,AUTO
         2 004174   000000 471500                    LDP1    0,,PR0
         2 004175   000100 101500                    MRL     fill='000'O
         2 004176   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 004177   200152 000002                    ADSC9   LIMIT+1,,AUTO            cn=0,n=2
         2 004200   200152 220100                    LDX0    LIMIT+1,,AUTO
         2 004201   200011 473500                    LDP3    CHARS$,,AUTO
         2 004202   200100 722100                    LXL2    LEN,,AUTO
         2 004203   200075 235100                    LDA     J,,AUTO
         2 004204   040145 100540                    MLR     fill='040'O
         2 004205   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:314  
         2 004206   300000 000012                    ADSC9   0,A,PR3                  cn=0,n=*X2

     2277    13674    3       RETURN;

  13674  2 004207   200140 221300                    LDX1  ! OUT_FLAG,,AUTO
         2 004210   000001 702211                    TSX2  ! 1,X1

     2278    13675
     2279    13676    3   END MOVE_ALPHA;
     2280    13677        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:315  
     2281    13678        /******************************************************************************/
     2282    13679        /*I*
     2283    13680        NAME:   CVT_TO_SPAN
     2284    13681        PURPOSE:
     2285    13682                Convert a binary time interval to a character string.
     2286    13683        CALL:
     2287    13684                CALL CVT_TO_SPAN ALTRET( error );
     2288    13685        INPUT:
     2289    13686                DAYS - Number of days in interval.
     2290    13687                TICS - Number of clock tics in interval.
     2291    13688        OUTPUT:
     2292    13689                CHARS - The converted string.
     2293    13690        INTERFACE:
     2294    13691                SET_LEN_1OR2
     2295    13692                CVT_FROM_NUM
     2296    13693        DESCRIPTION:
     2297    13694                This routine converts a number of days and clock tics into a
     2298    13695                time interval constant.  The format of the result is:
     2299    13696                    ddddddddd.h:mm:ss.tt
     2300    13697
     2301    13698                Leading and trailing subfields and their associated punctuation
     2302    13699                are omitted if they have a value of zero.
     2303    13700                The alternate return is taken if the receiving string is not long
     2304    13701                enough to hold the number of days.  If the receiving string is too
     2305    13702                short to hold one or more time subfields, the ones that do not fit
     2306    13703                will be dropped, with no error indicated.
     2307    13704        */
     2308    13705        /******************************************************************************/
     2309    13706
     2310    13707    2   CVT_TO_SPAN: PROC ALTRET;

  13707  2 004211   200140 741300       CVT_TO_SPAN  STX1  ! OUT_FLAG,,AUTO

     2311    13708
     2312    13709    3       IDX = 0;

  13709  2 004212   200076 450100                    STZ     IDX,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:316  

     2313    13710            /*
     2314    13711              Convert number of days, if non-zero.
     2315    13712            */
     2316    13713    3       IF DAYS > 0

  13713  2 004213   200055 235100                    LDA     DAYS,,AUTO
         2 004214   004265 604400 2                  TMOZ    s:13737

     2317    13714    4       THEN DO;

     2318    13715    4           CALL BINCHAR( LIMBO, DAYS );

  13715  2 004215   000100 301500                    BTD
         2 004216   200055 000004                    NDSC9   DAYS,,AUTO               cn=0,s=lsgnf,sf=0,n=4
         2 004217   200052 030014                    NDSC9   LIMBO,,AUTO              cn=0,s=nosgn,sf=0,n=12

     2319    13716    4           CALL SEARCH( LEN, JUNK, B$SR_NON_ZERO, LIMBO )

  13716  2 004220   000000 470400 xsym               LDP0    B$SR_NON_ZERO$
         2 004221   000000 164500                    TCT
         2 004222   200052 000014                    ADSC9   LIMBO,,AUTO              cn=0,n=12
         2 004223   000000 000100                    ARG     0,,PR0
         2 004224   200100 000100                    ARG     LEN,,AUTO
         2 004225   200100 236100                    LDQ     LEN,,AUTO
         2 004226   000044 737000                    LLS     36
         2 004227   000033 771000                    ARL     27
         2 004230   200077 755100                    STA     JUNK,,AUTO
         2 004231   200100 551140                    STBA    LEN,'40'O,AUTO
         2 004232   004237 606400 2                  TTN     s:13721

     2320    13717    5           WHENRETURN DO;

     2321    13718    5               LEN = LENGTHC( LIMBO ) - LEN;

  13718  2 004233   000014 236007                    LDQ     12,DL
         2 004234   200100 136100                    SBLQ    LEN,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:317  
         2 004235   200100 756100                    STQ     LEN,,AUTO

     2322    13719    5           END/*WHEN*/;

  13719  2 004236   004241 710000 2                  TRA     s:13723

     2323    13720    5           WHENALTRETURN DO;

     2324    13721    5               LEN = 1;

  13721  2 004237   000001 235007                    LDA     1,DL
         2 004240   200100 755100                    STA     LEN,,AUTO

     2325    13722    5           END/*WHENALT*/;

     2326    13723    4           IF J + LEN > CHAR_SIZE

  13723  2 004241   200075 236100                    LDQ     J,,AUTO
         2 004242   200100 036100                    ADLQ    LEN,,AUTO
         2 004243   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 004244   004251 604400 2                  TMOZ    s:13728

     2327    13724    5           THEN DO;

     2328    13725    5               ERR = E_XUD#SHORT_CHAR;

  13725  2 004245   000046 236000 1                  LDQ     E_XUD#SHORT_CHAR
         2 004246   200103 756100                    STQ     ERR,,AUTO

     2329    13726    5               ALTRETURN;

  13726  2 004247   200140 221300                    LDX1  ! OUT_FLAG,,AUTO
         2 004250   000000 702211                    TSX2  ! 0,X1

     2330    13727    5           END;
     2331    13728    4           SUBSTR( CHARS, J, LEN ) = SUBSTR( LIMBO, LENGTHC( LIMBO ) - LEN );

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:318  
  13728  2 004251   200100 335100                    LCA     LEN,,AUTO
         2 004252   200100 720100                    LXL0    LEN,,AUTO
         2 004253   200011 470500                    LDP0    CHARS$,,AUTO
         2 004254   200075 236100                    LDQ     J,,AUTO
         2 004255   040146 100545                    MLR     fill='040'O
         2 004256   200055 000010                    ADSC9   DAYS,A,AUTO              cn=0,n=*X0
         2 004257   000000 000010                    ADSC9   0,Q,PR0                  cn=0,n=*X0

     2332    13729    4           J = J + LEN;

  13729  2 004260   200100 036100                    ADLQ    LEN,,AUTO
         2 004261   200075 756100                    STQ     J,,AUTO

     2333    13730    4           IF TICS = 0

  13730  2 004262   200056 235100                    LDA     TICS,,AUTO
         2 004263   004462 600000 2                  TZE     RET

     2334    13731    4             THEN GOTO RET;
     2335    13732    4           IDX = J;

  13732  2 004264   200076 756100                    STQ     IDX,,AUTO

     2336    13733    4       END;

     2337    13734            /*
     2338    13735              Get values for time subfields.
     2339    13736            */
     2340    13737    3       FLDS.HOUR = TICS / %XUD#TICS_HOUR;

  13737  2 004265   200056 236100                    LDQ     TICS,,AUTO
         2 004266   000014 506000 3                  DIV     12
         2 004267   200070 756100                    STQ     FLDS+8,,AUTO

     2341    13738    3       FLDS.MIN = MOD( TICS / %XUD#TICS_MIN, %XUD#MINS_HOUR );

  13738  2 004270   200056 236100                    LDQ     TICS,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:319  
         2 004271   013560 506007                    DIV     6000,DL
         2 004272   000074 506007                    DIV     60,DL
         2 004273   200071 755100                    STA     FLDS+9,,AUTO

     2342    13739    3       FLDS.SEC = MOD( TICS / %XUD#TICS_SEC, %XUD#SECS_MIN );

  13739  2 004274   200056 236100                    LDQ     TICS,,AUTO
         2 004275   000144 506007                    DIV     100,DL
         2 004276   000074 506007                    DIV     60,DL
         2 004277   200072 755100                    STA     FLDS+10,,AUTO

     2343    13740    3       FLDS.TIC = MOD( TICS, %XUD#TICS_SEC );

  13740  2 004300   200056 236100                    LDQ     TICS,,AUTO
         2 004301   000144 506007                    DIV     100,DL
         2 004302   200073 755100                    STA     FLDS+11,,AUTO

     2344    13741            /*
     2345    13742              Convert the hour, unless the span is less than an hour.
     2346    13743            */
     2347    13744    3       NUM = FLDS.HOUR;

  13744  2 004303   200070 236100                    LDQ     FLDS+8,,AUTO
         2 004304   200101 756100                    STQ     NUM,,AUTO

     2348    13745    3       IF DAYS > 0

  13745  2 004305   200055 235100                    LDA     DAYS,,AUTO
         2 004306   004312 604400 2                  TMOZ    s:13747

     2349    13746    3         THEN LEN = 3;

  13746  2 004307   000003 235007                    LDA     3,DL
         2 004310   200100 755100                    STA     LEN,,AUTO
         2 004311   004314 710000 2                  TRA     s:13748

     2350    13747    3         ELSE CALL SET_LEN_1OR2;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:320  

  13747  2 004312   004147 701000 2                  TSX1    SET_LEN_1OR2
         2 004313   000000 011000                    NOP     0

     2351    13748    3       IF J + LEN + 1 > CHAR_SIZE OR TICS = 0

  13748  2 004314   200075 236100                    LDQ     J,,AUTO
         2 004315   200100 036100                    ADLQ    LEN,,AUTO
         2 004316   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 004317   004464 605000 2                  TPL     TRUNC
         2 004320   200056 235100                    LDA     TICS,,AUTO
         2 004321   004464 600000 2                  TZE     TRUNC

     2352    13749    3         THEN GOTO TRUNC;
     2353    13750    3       IF DAYS > 0 OR FLDS.HOUR > 0

  13750  2 004322   200055 236100                    LDQ     DAYS,,AUTO
         2 004323   004326 605400 2                  TPNZ    s:13752
         2 004324   200070 235100                    LDA     FLDS+8,,AUTO
         2 004325   004345 604400 2                  TMOZ    s:13764

     2354    13751    4       THEN DO;

     2355    13752    4           IF DAYS > 0

  13752  2 004326   000000 116003                    CMPQ    0,DU
         2 004327   004340 604400 2                  TMOZ    s:13758

     2356    13753    5           THEN DO;

     2357    13754    5               SUBSTR( CHARS, J, 1 ) = '.';

  13754  2 004330   200011 470500                    LDP0    CHARS$,,AUTO
         2 004331   200075 235100                    LDA     J,,AUTO
         2 004332   040105 100400                    MLR     fill='040'O
         2 004333   000015 000001 3                  ADSC9   13                       cn=0,n=1
         2 004334   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:321  

     2358    13755    5               J = J + 1;

  13755  2 004335   200075 054100                    AOS     J,,AUTO

     2359    13756    5               LEN = 2;

  13756  2 004336   000002 235007                    LDA     2,DL
         2 004337   200100 755100                    STA     LEN,,AUTO

     2360    13757    5           END;

     2361    13758    4           CALL CVT_FROM_NUM;

  13758  2 004340   004161 701000 2                  TSX1    CVT_FROM_NUM
         2 004341   000000 011000                    NOP     0

     2362    13759    4           J = J + LEN;

  13759  2 004342   200075 236100                    LDQ     J,,AUTO
         2 004343   200100 036100                    ADLQ    LEN,,AUTO
         2 004344   200075 756100                    STQ     J,,AUTO

     2363    13760    4       END;

     2364    13761            /*
     2365    13762              Convert the minute preceded by a colon, unless span is an even hour.
     2366    13763            */
     2367    13764    3       SUBSTR( CHARS, J, 1 ) = ':';

  13764  2 004345   200011 470500                    LDP0    CHARS$,,AUTO
         2 004346   200075 235100                    LDA     J,,AUTO
         2 004347   040105 100400                    MLR     fill='040'O
         2 004350   000016 000001 3                  ADSC9   14                       cn=0,n=1
         2 004351   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1

     2368    13765    3       J = J + 1;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:322  

  13765  2 004352   200075 054100                    AOS     J,,AUTO

     2369    13766    3       IF FLDS.HOUR > 0

  13766  2 004353   200070 235100                    LDA     FLDS+8,,AUTO
         2 004354   004357 604400 2                  TMOZ    s:13768

     2370    13767    3         THEN IDX = J;

  13767  2 004355   200075 236100                    LDQ     J,,AUTO
         2 004356   200076 756100                    STQ     IDX,,AUTO

     2371    13768    3       IF FLDS.MIN = 0 AND FLDS.SEC = 0 AND FLDS.TIC = 0

  13768  2 004357   200071 236100                    LDQ     FLDS+9,,AUTO
         2 004360   004365 601000 2                  TNZ     s:13770
         2 004361   200072 235100                    LDA     FLDS+10,,AUTO
         2 004362   004365 601000 2                  TNZ     s:13770
         2 004363   200073 235100                    LDA     FLDS+11,,AUTO
         2 004364   004462 600000 2                  TZE     RET

     2372    13769    3         THEN GOTO RET;
     2373    13770    3       IF J + 2 > CHAR_SIZE

  13770  2 004365   200075 236100                    LDQ     J,,AUTO
         2 004366   000002 036007                    ADLQ    2,DL
         2 004367   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 004370   004464 605400 2                  TPNZ    TRUNC

     2374    13771    3         THEN GOTO TRUNC;
     2375    13772    3       NUM = FLDS.MIN;

  13772  2 004371   200071 235100                    LDA     FLDS+9,,AUTO
         2 004372   200101 755100                    STA     NUM,,AUTO

     2376    13773    3       LEN = 2;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:323  

  13773  2 004373   000002 235007                    LDA     2,DL
         2 004374   200100 755100                    STA     LEN,,AUTO

     2377    13774    3       CALL CVT_FROM_NUM;

  13774  2 004375   004161 701000 2                  TSX1    CVT_FROM_NUM
         2 004376   000000 011000                    NOP     0

     2378    13775    3       J = J + LEN;

  13775  2 004377   200075 236100                    LDQ     J,,AUTO
         2 004400   200100 036100                    ADLQ    LEN,,AUTO
         2 004401   200075 756100                    STQ     J,,AUTO

     2379    13776    3       IF FLDS.MIN > 0

  13776  2 004402   200071 235100                    LDA     FLDS+9,,AUTO
         2 004403   004405 604400 2                  TMOZ    s:13781

     2380    13777    3         THEN IDX = J;

  13777  2 004404   200076 756100                    STQ     IDX,,AUTO

     2381    13778            /*
     2382    13779              Convert the second preceded by a colon, unless time is an even minute.
     2383    13780            */
     2384    13781    3       IF FLDS.SEC = 0 AND FLDS.TIC = 0

  13781  2 004405   200072 235100                    LDA     FLDS+10,,AUTO
         2 004406   004411 601000 2                  TNZ     s:13783
         2 004407   200073 235100                    LDA     FLDS+11,,AUTO
         2 004410   004462 600000 2                  TZE     RET

     2385    13782    3         THEN GOTO RET;
     2386    13783    3       IF J + 3 > CHAR_SIZE

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:324  
  13783  2 004411   000003 036007                    ADLQ    3,DL
         2 004412   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 004413   004464 605400 2                  TPNZ    TRUNC

     2387    13784    3         THEN GOTO TRUNC;
     2388    13785    3       SUBSTR( CHARS, J, 1 ) = ':';

  13785  2 004414   200011 470500                    LDP0    CHARS$,,AUTO
         2 004415   200075 235100                    LDA     J,,AUTO
         2 004416   040105 100400                    MLR     fill='040'O
         2 004417   000016 000001 3                  ADSC9   14                       cn=0,n=1
         2 004420   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1

     2389    13786    3       J = J + 1;

  13786  2 004421   200075 054100                    AOS     J,,AUTO

     2390    13787    3       NUM = FLDS.SEC;

  13787  2 004422   200072 235100                    LDA     FLDS+10,,AUTO
         2 004423   200101 755100                    STA     NUM,,AUTO

     2391    13788    3       LEN = 2;

  13788  2 004424   000002 236007                    LDQ     2,DL
         2 004425   200100 756100                    STQ     LEN,,AUTO

     2392    13789    3       CALL CVT_FROM_NUM;

  13789  2 004426   004161 701000 2                  TSX1    CVT_FROM_NUM
         2 004427   000000 011000                    NOP     0

     2393    13790    3       J = J + LEN;

  13790  2 004430   200075 236100                    LDQ     J,,AUTO
         2 004431   200100 036100                    ADLQ    LEN,,AUTO
         2 004432   200075 756100                    STQ     J,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:325  

     2394    13791    3       IF FLDS.SEC > 0

  13791  2 004433   200072 235100                    LDA     FLDS+10,,AUTO
         2 004434   004436 604400 2                  TMOZ    s:13796

     2395    13792    3         THEN IDX = J;

  13792  2 004435   200076 756100                    STQ     IDX,,AUTO

     2396    13793            /*
     2397    13794              Convert clock tics preceded by a period, unless span is an even second.
     2398    13795            */
     2399    13796    3       IF FLDS.TIC = 0

  13796  2 004436   200073 235100                    LDA     FLDS+11,,AUTO
         2 004437   004462 600000 2                  TZE     RET

     2400    13797    3         THEN GOTO RET;
     2401    13798    3       IF J + 3 > CHAR_SIZE

  13798  2 004440   000003 036007                    ADLQ    3,DL
         2 004441   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 004442   004464 605400 2                  TPNZ    TRUNC

     2402    13799    3         THEN GOTO TRUNC;
     2403    13800    3       SUBSTR( CHARS, J, 1 ) = '.';

  13800  2 004443   200011 470500                    LDP0    CHARS$,,AUTO
         2 004444   200075 235100                    LDA     J,,AUTO
         2 004445   040105 100400                    MLR     fill='040'O
         2 004446   000015 000001 3                  ADSC9   13                       cn=0,n=1
         2 004447   000000 000001                    ADSC9   0,A,PR0                  cn=0,n=1

     2404    13801    3       J = J + 1;

  13801  2 004450   200075 054100                    AOS     J,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:326  

     2405    13802    3       NUM = FLDS.TIC;

  13802  2 004451   200073 235100                    LDA     FLDS+11,,AUTO
         2 004452   200101 755100                    STA     NUM,,AUTO

     2406    13803    3       LEN = 2;

  13803  2 004453   000002 236007                    LDQ     2,DL
         2 004454   200100 756100                    STQ     LEN,,AUTO

     2407    13804    3       CALL CVT_FROM_NUM;

  13804  2 004455   004161 701000 2                  TSX1    CVT_FROM_NUM
         2 004456   000000 011000                    NOP     0

     2408    13805    3       J = J + LEN;

  13805  2 004457   200075 236100                    LDQ     J,,AUTO
         2 004460   200100 036100                    ADLQ    LEN,,AUTO
         2 004461   200075 756100                    STQ     J,,AUTO

     2409    13806
     2410    13807    3   RET:RETURN;

  13807  2 004462   200140 221300       RET          LDX1  ! OUT_FLAG,,AUTO
         2 004463   000001 702211                    TSX2  ! 1,X1

     2411    13808
     2412    13809    3   TRUNC:
     2413    13810    3       IF J ~= IDX

  13810  2 004464   200075 236100       TRUNC        LDQ     J,,AUTO
         2 004465   200076 116100                    CMPQ    IDX,,AUTO
         2 004466   004477 600000 2                  TZE     s:13815

     2414    13811    4       THEN DO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:327  

     2415    13812    4           SUBSTR( CHARS, IDX, J - IDX ) = %XUD#BLANK;

  13812  2 004467   200076 136100                    SBLQ    IDX,,AUTO
         2 004470   200011 470500                    LDP0    CHARS$,,AUTO
         2 004471   000000 620006                    EAX0    0,QL
         2 004472   200076 235100                    LDA     IDX,,AUTO
         2 004473   040145 100400                    MLR     fill='040'O
         2 004474   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 004475   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0

     2416    13813    4           J = IDX;

  13813  2 004476   200075 755100                    STA     J,,AUTO

     2417    13814    4       END;

     2418    13815    3       IF J = 0

  13815  2 004477   200075 235100                    LDA     J,,AUTO
         2 004500   004507 601000 2                  TNZ     s:13820

     2419    13816    4       THEN DO;

     2420    13817    4           SUBSTR( CHARS, 0, 1 ) = '0';

  13817  2 004501   200011 470500                    LDP0    CHARS$,,AUTO
         2 004502   040100 100400                    MLR     fill='040'O
         2 004503   000017 000001 3                  ADSC9   15                       cn=0,n=1
         2 004504   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     2421    13818    4           J = 1;

  13818  2 004505   000001 236007                    LDQ     1,DL
         2 004506   200075 756100                    STQ     J,,AUTO

     2422    13819    4       END;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:328  

     2423    13820    3       GOTO RET;

  13820  2 004507   004462 710000 2                  TRA     RET

     2424    13821
     2425    13822    3   END CVT_TO_SPAN;
     2426    13823
     2427    13824    2   END CVT_TO_CHAR;
     2428    13825        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:329  
     2429    13826        /******************************************************************************/
     2430    13827        /*F*
     2431    13828        NAME:   CVT_FROM_CHAR
     2432    13829        PURPOSE:
     2433    13830                Convert character string to binary date and time.
     2434    13831        */
     2435    13832        /*D*
     2436    13833        NAME:   CVT_FROM_CHAR
     2437    13834        CALL:
     2438    13835                CALL CVT_FROM_CHAR ALTRET( error );
     2439    13836        INPUT:
     2440    13837                CHARS - The string to be converted.
     2441    13838                PICTURE - The picture to use to control conversion.
     2442    13839        OUTPUT:
     2443    13840                DAYS - Number of days from Jan. 1, 1 AD.
     2444    13841                TICS - Number of clock tics since midnight.
     2445    13842        INTERFACE:
     2446    13843                CVT_YY
     2447    13844                CVT_MO
     2448    13845                CVT_DD
     2449    13846                CVT_MMM
     2450    13847                CVT_WWW
     2451    13848                CVT_SWITCH
     2452    13849                CVT_HH
     2453    13850                CVT_MI
     2454    13851                CVT_SS
     2455    13852                CVT_TT
     2456    13853                CHK4SFX
     2457    13854                CVT_TO_NUM
     2458    13855                GET_CURRENT_YEAR
     2459    13856                PARSE_SPAN
     2460    13857        DESCRIPTION:
     2461    13858                This routine converts a character string into a number of days
     2462    13859                and clock tics.  The calling routines will combine these counts
     2463    13860                to form a DATE or a UTS value.  An error is reported and
     2464    13861                a result of zero is returned if the input does not match the picture.
     2465    13862
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:330  
     2466    13863                Leading and trailing blanks have been stripped by the string prep
     2467    13864                routine.  Embedded blanks are handled such that multiple blanks
     2468    13865                are always allowed and never required.  All other punctuation
     2469    13866                must appear exactly as specified by the picture.  Punctuation
     2470    13867                in the value not in the picture results in an error.
     2471    13868
     2472    13869                Insignificant zeros are always accepted and never required on
     2473    13870                numeric fields.  Alphabetic fields are accepted insensitive to
     2474    13871                case and with or without abbreviation.  Suffixes (AD, BC, AM, and PM)
     2475    13872                are recognized insensitive to case, with or without periods
     2476    13873                after each character, and can always be preceded by one or more
     2477    13874                blanks.  If the era (AD or BC) is omitted, AD is assumed.
     2478    13875                AM is assumed if the meridiem (AM or PM) is omitted.
     2479    13876
     2480    13877                The date/time separator can be represented by
     2481    13878                one or more blanks, or by a comma optionally followed by one
     2482    13879                or more blanks, or by nothing at all.
     2483    13880        */
     2484    13881        /******************************************************************************/
     2485    13882
     2486    13883    1   CVT_FROM_CHAR: PROC ALTRET;

  13883  2 004510   200136 741300       CVT_FROM_CH* STX1  ! SYSTEM_YEAR+2,,AUTO

     2487    13884
     2488    13885    2   DCL BLANK BIT( 1 );
     2489    13886
     2490    13887    2       CALL XLATE( TEMP_CHARS, B$XL_UPPER_UR, CHARS );

  13887  2 004511   200011 470500                    LDP0    CHARS$,,AUTO
         2 004512   200010 720100                    LXL0    CHAR_SIZE,,AUTO
         2 004513   000000 471400 xsym               LDP1    B$XL_UPPER_UR$
         2 004514   040100 160540                    MVT     fill='040'O
         2 004515   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         2 004516   200012 000100                    ADSC9   TEMP_CHARS,,AUTO         cn=0,n=64
         2 004517   100000 000100                    ARG     0,,PR1

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:331  
     2491    13888    2       FLDS = '0'B;

  13888  2 004520   000100 100400                    MLR     fill='000'O
         2 004521   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 004522   200060 000060                    ADSC9   FLDS,,AUTO               cn=0,n=48

     2492    13889    2       ERR = '0'B;

  13889  2 004523   200103 450100                    STZ     ERR,,AUTO

     2493    13890    2       DAYS = 0;

  13890  2 004524   200055 450100                    STZ     DAYS,,AUTO

     2494    13891    2       TICS = 0;

  13891  2 004525   200056 450100                    STZ     TICS,,AUTO

     2495    13892    2       BLANK = %XUD#YES;

  13892  2 004526   400000 236003                    LDQ     -131072,DU
         2 004527   200137 756100                    STQ     BLANK,,AUTO

     2496    13893            /*
     2497    13894              Check for sign on timespan values.
     2498    13895            */
     2499    13896    2       J = 0;

  13896  2 004530   200075 450100                    STZ     J,,AUTO

     2500    13897    2       IF TIMESPAN

  13897  2 004531   200102 234100                    SZN     TIMESPAN,,AUTO
         2 004532   004556 605000 2                  TPL     s:13912

     2501    13898    3       THEN DO;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:332  
     2502    13899    3           IF SUBSTR( CHARS, 0, 1 ) = '+' OR SUBSTR( CHARS, 0, 1 ) = '-'

  13899  2 004533   040000 106500                    CMPC    fill='040'O
         2 004534   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 004535   000020 000001 3                  ADSC9   16                       cn=0,n=1
         2 004536   004543 600000 2                  TZE     s:13901
         2 004537   040000 106500                    CMPC    fill='040'O
         2 004540   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 004541   000007 000001 3                  ADSC9   7                        cn=0,n=1
         2 004542   004652 601000 2                  TNZ     s:13944

     2503    13900    4           THEN DO;

     2504    13901    4               IF CHAR_SIZE = 1

  13901  2 004543   200010 235100                    LDA     CHAR_SIZE,,AUTO
         2 004544   000001 115007                    CMPA    1,DL
         2 004545   006126 600000 2                  TZE     E_BAD_DATE_D

     2505    13902    4                 THEN GOTO E_BAD_DATE_D;
     2506    13903    4               IF SUBSTR( CHARS, 0, 1 ) = '-'

  13903  2 004546   040000 106500                    CMPC    fill='040'O
         2 004547   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 004550   000007 000001 3                  ADSC9   7                        cn=0,n=1
         2 004551   004553 601000 2                  TNZ     s:13905

     2507    13904    4                 THEN FLDS.BC = %XUD#YES;

  13904  2 004552   200065 256100                    ORSQ    FLDS+5,,AUTO

     2508    13905    4               J = 1;

  13905  2 004553   000001 235007                    LDA     1,DL
         2 004554   200075 755100                    STA     J,,AUTO

     2509    13906    4           END;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:333  

     2510    13907    3       END;

  13907  2 004555   004652 710000 2                  TRA     s:13944

     2511    13908        /*
     2512    13909          Check for special names (TODAY, etc.) on date values.
     2513    13910        */
     2514    13911    3       ELSE DO;

     2515    13912    3           CALL SEARCH( LEN, JUNK, B$SR_NON_ALPHA, SUBSTR( TEMP_CHARS, J ));

  13912  2 004556   200075 722100                    LXL2    J,,AUTO
         2 004557   777677 622012                    EAX2    -65,X2
         2 004560   777777 662003                    ERX2    -1,DU
         2 004561   000000 473400 xsym               LDP3    B$SR_NON_ALPHA$
         2 004562   200075 235100                    LDA     J,,AUTO
         2 004563   000000 164545                    TCT
         2 004564   200012 000012                    ADSC9   TEMP_CHARS,A,AUTO        cn=0,n=*X2
         2 004565   300000 000100                    ARG     0,,PR3
         2 004566   200100 000100                    ARG     LEN,,AUTO
         2 004567   200100 235100                    LDA     LEN,,AUTO
         2 004570   000033 771000                    ARL     27
         2 004571   200077 755100                    STA     JUNK,,AUTO
         2 004572   200100 551140                    STBA    LEN,'40'O,AUTO

     2516    13913    3           IF LEN > 0

  13913  2 004573   200100 235100                    LDA     LEN,,AUTO
         2 004574   004652 604400 2                  TMOZ    s:13944

     2517    13914    4           THEN DO;

     2518    13915    5               DO I = 0 TO %SPEC_MAX ;

  13915  2 004575   200074 450100                    STZ     I,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:334  
     2519    13916    5                   IF LEN >= SPECIAL_SIZE( I )

  13916  2 004576   200074 720100                    LXL0    I,,AUTO
         2 004577   200100 236100                    LDQ     LEN,,AUTO
         2 004600   004646 604000 2                  TMI     s:13937
         2 004601   000241 116010 1                  CMPQ    SPECIAL_SIZE,X0
         2 004602   004646 602000 2                  TNC     s:13937

     2520    13917    5                   THEN IF SUBSTR( TEMP_CHARS, J, LEN ) =

  13917  2 004603   000245 470410 1                  LDP0    SPECIAL$,X0
         2 004604   000100 101500                    MRL     fill='000'O
         2 004605   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 004606   200152 000002                    ADSC9   LIMIT+1,,AUTO            cn=0,n=2
         2 004607   200152 221100                    LDX1    LIMIT+1,,AUTO
         2 004610   000000 622006                    EAX2    0,QL
         2 004611   200075 235100                    LDA     J,,AUTO
         2 004612   200100 723100                    LXL3    LEN,,AUTO
         2 004613   040140 106545                    CMPC    fill='040'O
         2 004614   200012 000012                    ADSC9   TEMP_CHARS,A,AUTO        cn=0,n=*X2
         2 004615   000000 200013                    ADSC9   0,,PR0                   cn=1,n=*X3
         2 004616   004646 601000 2                  TNZ     s:13937

     2521    13918    5                       SUBSTR( SPECIAL$( I )-> TEXTC.T, 0, LEN )
     2522    13919    6                   THEN DO;

     2523    13920    6                       CALL GET_CURRENT_UTS ALTRET( ALT );

  13920  2 004617   007766 701000 2                  TSX1    GET_CURRENT_UTS
         2 004620   006152 702000 2                  TSX2    ALT

     2524    13921    6                       CALL FROM_UTS ;

  13921  2 004621   010016 701000 2                  TSX1    FROM_UTS
         2 004622   000000 011000                    NOP     0

     2525    13922    6                       IF I ~= %SPEC_NOW
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:335  

  13922  2 004623   200074 235100                    LDA     I,,AUTO
         2 004624   004635 600000 2                  TZE     s:13929

     2526    13923    7                       THEN DO;

     2527    13924    7                           TICS = 0;

  13924  2 004625   200056 450100                    STZ     TICS,,AUTO

     2528    13925    7                           IF I = %SPEC_TOMORROW  THEN DAYS = DAYS + 1;

  13925  2 004626   000002 115007                    CMPA    2,DL
         2 004627   004631 601000 2                  TNZ     s:13926

  13925  2 004630   200055 054100                    AOS     DAYS,,AUTO

     2529    13926    7                           IF I = %SPEC_YESTERDAY THEN DAYS = DAYS - 1;

  13926  2 004631   000003 115007                    CMPA    3,DL
         2 004632   004635 601000 2                  TNZ     s:13929

  13926  2 004633   000001 336007                    LCQ     1,DL
         2 004634   200055 056100                    ASQ     DAYS,,AUTO

     2530    13927    7                       END;

     2531    13928
     2532    13929    6                       IF LEN < CHAR_SIZE

  13929  2 004635   200100 236100                    LDQ     LEN,,AUTO
         2 004636   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 004637   004644 605000 2                  TPL     s:13934

     2533    13930    7                       THEN DO;

     2534    13931    7                           ERR = E_XUD#EXCESS_CHARS ;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:336  

  13931  2 004640   000047 236000 1                  LDQ     E_XUD#EXCESS_CHARS
         2 004641   200103 756100                    STQ     ERR,,AUTO

     2535    13932    7                           ALTRETURN ;

  13932  2 004642   200136 221300                    LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 004643   000000 702211                    TSX2  ! 0,X1

     2536    13933    7                       END;
     2537    13934    6                       RETURN ;    /** SPECIAL RETURN FOR SPECIAL NAMES **/

  13934  2 004644   200136 221300                    LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 004645   000001 702211                    TSX2  ! 1,X1

     2538    13935
     2539    13936    6                   END;
     2540    13937    5               END/*TO*/;

  13937  2 004646   200074 054100                    AOS     I,,AUTO
         2 004647   200074 235100                    LDA     I,,AUTO
         2 004650   000003 115007                    CMPA    3,DL
         2 004651   004576 604400 2                  TMOZ    s:13916

     2541    13938    4           END;

     2542    13939    3       END;

     2543    13940            /*
     2544    13941              If no picture is provided, parse the value according to special
     2545    13942              default rules, and skip the normal parse loop.
     2546    13943            */
     2547    13944    2       IF PICTURE$ = ADDR( NIL )

  13944  2 004652   200006 236100                    LDQ     PICTURE$,,AUTO
         2 004653   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 004654   004660 601000 2                  TNZ     s:13955
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:337  

     2548    13945    3       THEN DO;

     2549    13946    3           CALL CVT_FROM_DEFAULT ALTRET( ALT );

  13946  2 004655   006725 701000 2                  TSX1    CVT_FROM_DEFAULT
         2 004656   006152 702000 2                  TSX2    ALT

     2550    13947    3       END;

  13947  2 004657   005455 710000 2                  TRA     s:14138

     2551    13948            /*
     2552    13949              Convert the character string to binary subfields by processing
     2553    13950                the picture character by character.
     2554    13951              I = index into picture.
     2555    13952              J = index into character string.
     2556    13953            */
     2557    13954    3       ELSE DO;

     2558    13955    4           DO I = 0 TO PIC_SIZE - 1;

  13955  2 004660   200074 450100                    STZ     I,,AUTO
         2 004661   005452 710000 2                  TRA     s:14133+1

     2559    13956    5               DO CASE( ASCBIN( SUBSTR( PICTURE.T, I, 1 )));

  13956  2 004662   200006 470500                    LDP0    PICTURE$,,AUTO
         2 004663   200074 235100                    LDA     I,,AUTO
         2 004664   000100 101505                    MRL     fill='000'O
         2 004665   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         2 004666   200152 000004                    ADSC9   LIMIT+1,,AUTO            cn=0,n=4
         2 004667   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 004670   000400 136007                    SBLQ    256,DL
         2 004671   000074 116007                    CMPQ    60,DL
         2 004672   004674 602006 2                  TNC     s:13956+10,QL
         2 004673   005310 710000 2                  TRA     s:14099
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:338  
         2 004674   005302 710000 2                  TRA     s:14095
         2 004675   004770 710000 2                  TRA     s:13961
         2 004676   005021 710000 2                  TRA     s:13968
         2 004677   005024 710000 2                  TRA     s:13970
         2 004700   005024 710000 2                  TRA     s:13970
         2 004701   005035 710000 2                  TRA     s:13977
         2 004702   005035 710000 2                  TRA     s:13977
         2 004703   005040 710000 2                  TRA     s:13980
         2 004704   005040 710000 2                  TRA     s:13980
         2 004705   005040 710000 2                  TRA     s:13980
         2 004706   005040 710000 2                  TRA     s:13980
         2 004707   005040 710000 2                  TRA     s:13980
         2 004710   005040 710000 2                  TRA     s:13980
         2 004711   005043 710000 2                  TRA     s:13985
         2 004712   005043 710000 2                  TRA     s:13985
         2 004713   005106 710000 2                  TRA     s:14010
         2 004714   005106 710000 2                  TRA     s:14010
         2 004715   005106 710000 2                  TRA     s:14010
         2 004716   005106 710000 2                  TRA     s:14010
         2 004717   005106 710000 2                  TRA     s:14010
         2 004720   005106 710000 2                  TRA     s:14010
         2 004721   005106 710000 2                  TRA     s:14010
         2 004722   005106 710000 2                  TRA     s:14010
         2 004723   005106 710000 2                  TRA     s:14010
         2 004724   005106 710000 2                  TRA     s:14010
         2 004725   005106 710000 2                  TRA     s:14010
         2 004726   005106 710000 2                  TRA     s:14010
         2 004727   005057 710000 2                  TRA     s:13997
         2 004730   005046 710000 2                  TRA     s:13990
         2 004731   005046 710000 2                  TRA     s:13990
         2 004732   005111 710000 2                  TRA     s:14018
         2 004733   005111 710000 2                  TRA     s:14018
         2 004734   005111 710000 2                  TRA     s:14018
         2 004735   005111 710000 2                  TRA     s:14018
         2 004736   005111 710000 2                  TRA     s:14018
         2 004737   005111 710000 2                  TRA     s:14018
         2 004740   005111 710000 2                  TRA     s:14018
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:339  
         2 004741   005111 710000 2                  TRA     s:14018
         2 004742   005310 710000 2                  TRA     s:14099
         2 004743   005310 710000 2                  TRA     s:14099
         2 004744   005310 710000 2                  TRA     s:14099
         2 004745   005310 710000 2                  TRA     s:14099
         2 004746   005310 710000 2                  TRA     s:14099
         2 004747   005141 710000 2                  TRA     s:14033
         2 004750   005171 710000 2                  TRA     s:14048
         2 004751   005207 710000 2                  TRA     s:14057
         2 004752   005225 710000 2                  TRA     s:14066
         2 004753   005243 710000 2                  TRA     s:14075
         2 004754   005146 710000 2                  TRA     s:14038
         2 004755   005151 710000 2                  TRA     s:14040
         2 004756   005146 710000 2                  TRA     s:14038
         2 004757   005151 710000 2                  TRA     s:14040
         2 004760   005204 710000 2                  TRA     s:14055
         2 004761   005204 710000 2                  TRA     s:14055
         2 004762   005222 710000 2                  TRA     s:14064
         2 004763   005222 710000 2                  TRA     s:14064
         2 004764   005240 710000 2                  TRA     s:14073
         2 004765   005240 710000 2                  TRA     s:14073
         2 004766   005256 710000 2                  TRA     s:14082
         2 004767   005256 710000 2                  TRA     s:14082

     2560    13957                    /*
     2561    13958                      Picture codes for year...
     2562    13959                    */
     2563    13960    5               CASE( %XUD#P_DATE_Y1 );

     2564    13961    5                   IF B$SR_NON_DEC.C( ASCBIN( SUBSTR( TEMP_CHARS, J, 1 ))) ~= '0'B

  13961  2 004770   200075 236100                    LDQ     J,,AUTO
         2 004771   000100 101506                    MRL     fill='000'O
         2 004772   200012 000001                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=1
         2 004773   200152 000004                    ADSC9   LIMIT+1,,AUTO            cn=0,n=4
         2 004774   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 004775   000000 471400 xsym               LDP1    B$SR_NON_DEC$
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:340  
         2 004776   000000 106506                    CMPC    fill='000'O
         2 004777   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1
         2 005000   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 005001   006120 601000 2                  TNZ     E_BAD_DATE_Y

     2565    13962    5                     THEN GOTO E_BAD_DATE_Y;
     2566    13963    5                   CALL CHARBIN( FLDS.YEAR, SUBSTR( CHARS, J, 1 ));

  13963  2 005002   200011 473500                    LDP3    CHARS$,,AUTO
         2 005003   200075 236100                    LDQ     J,,AUTO
         2 005004   000100 305506                    DTB
         2 005005   300000 030001                    NDSC9   0,Q,PR3                  cn=0,s=nosgn,sf=0,n=1
         2 005006   200060 000004                    NDSC9   FLDS,,AUTO               cn=0,s=lsgnf,sf=0,n=4

     2567    13964    5                   CALL GET_CURRENT_YEAR;

  13964  2 005007   006674 701000 2                  TSX1    GET_CURRENT_YEAR
         2 005010   000000 011000                    NOP     0

     2568    13965    5                   FLDS.YEAR = FLDS.YEAR + (SYSTEM_YEAR / 10 * 10);

  13965  2 005011   200134 236100                    LDQ     SYSTEM_YEAR,,AUTO
         2 005012   000012 506007                    DIV     10,DL
         2 005013   000012 402007                    MPY     10,DL
         2 005014   200060 036100                    ADLQ    FLDS,,AUTO
         2 005015   200060 756100                    STQ     FLDS,,AUTO

     2569    13966    5                   LEN = 1;

  13966  2 005016   000001 235007                    LDA     1,DL
         2 005017   200100 755100                    STA     LEN,,AUTO
         2 005020   005443 710000 2                  TRA     s:14130

     2570    13967    5               CASE( %XUD#P_DATE_Y2 );

     2571    13968    5                   CALL CVT_YY ALTRET( E_BAD_DATE_Y );

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:341  
  13968  2 005021   006156 701000 2                  TSX1    CVT_YY
         2 005022   006120 702000 2                  TSX2    E_BAD_DATE_Y
         2 005023   005443 710000 2                  TRA     s:14130

     2572    13969    5               CASE( %XUD#P_DATE_Y4, %XUD#P_DATE_Y5 );

     2573    13970    5                   CALL CVT_TO_NUM( FLDS.YEAR, 6 ) ALTRET( E_BAD_DATE_Y );

  13970  2 005024   000021 236000 3                  LDQ     17
         2 005025   200150 756100                    STQ     @NUM+1,,AUTO
         2 005026   200060 631500                    EPPR1   FLDS,,AUTO
         2 005027   200147 451500                    STP1    DAYS_IN_25THS+5,,AUTO
         2 005030   006600 701000 2                  TSX1    CVT_TO_NUM
         2 005031   006120 702000 2                  TSX2    E_BAD_DATE_Y

     2574    13971    5                   IF FLDS.YEAR < 1

  13971  2 005032   200060 235100                    LDA     FLDS,,AUTO
         2 005033   006120 604400 2                  TMOZ    E_BAD_DATE_Y
         2 005034   005443 710000 2                  TRA     s:14130

     2575    13972    5                     THEN GOTO E_BAD_DATE_Y;
     2576    13973                    /*
     2577    13974                      Picture codes for month...
     2578    13975                    */
     2579    13976    5               CASE( %XUD#P_DATE_M1, %XUD#P_DATE_M2 );

     2580    13977    5                   CALL CVT_MO ALTRET( E_BAD_DATE_MO );

  13977  2 005035   006227 701000 2                  TSX1    CVT_MO
         2 005036   006123 702000 2                  TSX2    E_BAD_DATE_MO
         2 005037   005443 710000 2                  TRA     s:14130

     2581    13978    5               CASE( %XUD#P_DATE_M3UC, %XUD#P_DATE_M3IC, %XUD#P_DATE_M3LC,

     2582    13979    5                         %XUD#P_DATE_M4UC, %XUD#P_DATE_M4IC, %XUD#P_DATE_M4LC );
     2583    13980    5                   CALL CVT_MMM ALTRET( E_BAD_DATE_MO );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:342  

  13980  2 005040   006256 701000 2                  TSX1    CVT_MMM
         2 005041   006123 702000 2                  TSX2    E_BAD_DATE_MO
         2 005042   005443 710000 2                  TRA     s:14130

     2584    13981                    /*
     2585    13982                      Picture codes for day of month...
     2586    13983                    */
     2587    13984    5               CASE( %XUD#P_DATE_D1, %XUD#P_DATE_D2 );

     2588    13985    5                   CALL CVT_DD ALTRET( E_BAD_DATE_D );

  13985  2 005043   006244 701000 2                  TSX1    CVT_DD
         2 005044   006126 702000 2                  TSX2    E_BAD_DATE_D
         2 005045   005443 710000 2                  TRA     s:14130

     2589    13986                    /*
     2590    13987                      Picture codes for day of year...
     2591    13988                    */
     2592    13989    5               CASE( %XUD#P_DATE_J1, %XUD#P_DATE_J3 );

     2593    13990    5                   CALL CVT_TO_NUM( FLDS.JULIAN, 3 ) ALTRET( E_BAD_DATE_D );

  13990  2 005046   000022 236000 3                  LDQ     18
         2 005047   200150 756100                    STQ     @NUM+1,,AUTO
         2 005050   200063 631500                    EPPR1   FLDS+3,,AUTO
         2 005051   200147 451500                    STP1    DAYS_IN_25THS+5,,AUTO
         2 005052   006600 701000 2                  TSX1    CVT_TO_NUM
         2 005053   006126 702000 2                  TSX2    E_BAD_DATE_D

     2594    13991    5                   IF FLDS.JULIAN = 0

  13991  2 005054   200063 235100                    LDA     FLDS+3,,AUTO
         2 005055   006126 600000 2                  TZE     E_BAD_DATE_D
         2 005056   005443 710000 2                  TRA     s:14130

     2595    13992    5                     THEN GOTO E_BAD_DATE_D;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:343  
     2596    13993                    /*
     2597    13994                      Picture code for quarter of year...
     2598    13995                    */
     2599    13996    5               CASE( %XUD#P_DATE_Q );

     2600    13997    5                   IF B$SR_NON_DEC.C( ASCBIN( SUBSTR( TEMP_CHARS, J, 1 ))) ~= '0'B

  13997  2 005057   200075 236100                    LDQ     J,,AUTO
         2 005060   000100 101506                    MRL     fill='000'O
         2 005061   200012 000001                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=1
         2 005062   200152 000004                    ADSC9   LIMIT+1,,AUTO            cn=0,n=4
         2 005063   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 005064   000000 471400 xsym               LDP1    B$SR_NON_DEC$
         2 005065   000000 106506                    CMPC    fill='000'O
         2 005066   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1
         2 005067   000002 000002 xsym               ADSC9   B_VECTNIL+2              cn=0,n=2
         2 005070   006131 601000 2                  TNZ     E_BAD_DATE_Q

     2601    13998    5                     THEN GOTO E_BAD_DATE_Q;
     2602    13999    5                   CALL CHARBIN( FLDS.QUARTER, SUBSTR( CHARS, J, 1 ));

  13999  2 005071   200011 473500                    LDP3    CHARS$,,AUTO
         2 005072   200075 236100                    LDQ     J,,AUTO
         2 005073   000100 305506                    DTB
         2 005074   300000 030001                    NDSC9   0,Q,PR3                  cn=0,s=nosgn,sf=0,n=1
         2 005075   200064 000004                    NDSC9   FLDS+4,,AUTO             cn=0,s=lsgnf,sf=0,n=4

     2603    14000    5                   LEN = 1;

  14000  2 005076   000001 235007                    LDA     1,DL
         2 005077   200100 755100                    STA     LEN,,AUTO

     2604    14001    5                   IF FLDS.QUARTER > 4 OR FLDS.QUARTER < 1

  14001  2 005100   200064 235100                    LDA     FLDS+4,,AUTO
         2 005101   000004 115007                    CMPA    4,DL
         2 005102   006131 605400 2                  TPNZ    E_BAD_DATE_Q
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:344  
         2 005103   000000 115003                    CMPA    0,DU
         2 005104   006131 604400 2                  TMOZ    E_BAD_DATE_Q
         2 005105   005443 710000 2                  TRA     s:14130

     2605    14002    5                     THEN GOTO E_BAD_DATE_Q;
     2606    14003                    /*
     2607    14004                      Picture codes for day of week...
     2608    14005                    */
     2609    14006    5               CASE( %XUD#P_DATE_W1UC, %XUD#P_DATE_W1IC, %XUD#P_DATE_W1LC,

     2610    14007    5                     %XUD#P_DATE_W2UC, %XUD#P_DATE_W2IC, %XUD#P_DATE_W2LC,
     2611    14008    5                     %XUD#P_DATE_W3UC, %XUD#P_DATE_W3IC, %XUD#P_DATE_W3LC,
     2612    14009    5                     %XUD#P_DATE_W4UC, %XUD#P_DATE_W4IC, %XUD#P_DATE_W4LC );
     2613    14010    5                   CALL CVT_WWW ALTRET( E_BAD_DATE_W );

  14010  2 005106   006327 701000 2                  TSX1    CVT_WWW
         2 005107   006134 702000 2                  TSX2    E_BAD_DATE_W
         2 005110   005443 710000 2                  TRA     s:14130

     2614    14011                    /*
     2615    14012                      Picture codes for AD/BC...
     2616    14013                    */
     2617    14014    5               CASE( %XUD#P_DATE_AD, %XUD#P_DATE_BC,

     2618    14015    5                     %XUD#P_DATE_A_D, %XUD#P_DATE_B_C,
     2619    14016    5                     %XUD#P_DATE_CE, %XUD#P_DATE_BCE,
     2620    14017    5                     %XUD#P_DATE_C_E, %XUD#P_DATE_B_C_E );
     2621    14018    5                   CALL CHK4SFX;

  14018  2 005111   010071 701000 2                  TSX1    CHK4SFX
         2 005112   000000 011000                    NOP     0

     2622    14019    6                   DO CASE( IDX );

  14019  2 005113   200076 235100                    LDA     IDX,,AUTO
         2 005114   000015 115007                    CMPA    13,DL
         2 005115   005117 602005 2                  TNC     s:14019+4,AL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:345  
         2 005116   005137 710000 2                  TRA     s:14027
         2 005117   005140 710000 2                  TRA     s:14028
         2 005120   005140 710000 2                  TRA     s:14028
         2 005121   005140 710000 2                  TRA     s:14028
         2 005122   005134 710000 2                  TRA     s:14025
         2 005123   005134 710000 2                  TRA     s:14025
         2 005124   005137 710000 2                  TRA     s:14027
         2 005125   005137 710000 2                  TRA     s:14027
         2 005126   005137 710000 2                  TRA     s:14027
         2 005127   005137 710000 2                  TRA     s:14027
         2 005130   005140 710000 2                  TRA     s:14028
         2 005131   005140 710000 2                  TRA     s:14028
         2 005132   005134 710000 2                  TRA     s:14025
         2 005133   005134 710000 2                  TRA     s:14025

     2623    14020    6                   CASE( %XUD#SFX_AD, %XUD#SFX_A_D,

     2624    14021    6                         %XUD#SFX_CE, %XUD#SFX_C_E, %XUD#SFX_NONE );
     2625    14022    6                       ; /* nothing to do */
     2626    14023    6                   CASE( %XUD#SFX_BC, %XUD#SFX_B_C,

     2627    14024    6                         %XUD#SFX_BCE, %XUD#SFX_B_C_E );
     2628    14025    6                       FLDS.BC = %XUD#YES;

  14025  2 005134   400000 236003                    LDQ     -131072,DU
         2 005135   200065 256100                    ORSQ    FLDS+5,,AUTO
         2 005136   005443 710000 2                  TRA     s:14130

     2629    14026    6                   CASE( ELSE );

     2630    14027    6                       LEN = 0;

  14027  2 005137   200100 450100                    STZ     LEN,,AUTO

     2631    14028    6                   END/*CASE*/;

  14028  2 005140   005443 710000 2                  TRA     s:14130
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:346  

     2632    14029                    /*
     2633    14030                      Picture code for days...
     2634    14031                    */
     2635    14032    5               CASE( %XUD#P_TIME_D3 );

     2636    14033    5                   CALL CVT_1ST_NUM( FLDS.DAY ) ALTRET( E_BAD_DATE_D );

  14033  2 005141   200062 631500                    EPPR1   FLDS+2,,AUTO
         2 005142   200147 451500                    STP1    DAYS_IN_25THS+5,,AUTO
         2 005143   006647 701000 2                  TSX1    CVT_1ST_NUM
         2 005144   006126 702000 2                  TSX2    E_BAD_DATE_D
         2 005145   005443 710000 2                  TRA     s:14130

     2637    14034                    /*
     2638    14035                      Picture codes for hour...
     2639    14036                    */
     2640    14037    5               CASE( %XUD#P_TIME_H1, %XUD#P_TIME_H2 );

     2641    14038    5                   CALL CVT_HH ALTRET( E_BAD_DATE_H );

  14038  2 005146   006521 701000 2                  TSX1    CVT_HH
         2 005147   006137 702000 2                  TSX2    E_BAD_DATE_H
         2 005150   005443 710000 2                  TRA     s:14130

     2642    14039    5               CASE( %XUD#P_TIME_H1A, %XUD#P_TIME_H2A );

     2643    14040    5                   CALL CVT_TO_NUM( FLDS.HOUR, 2 ) ALTRET( E_BAD_DATE_H );

  14040  2 005151   000023 236000 3                  LDQ     19
         2 005152   200150 756100                    STQ     @NUM+1,,AUTO
         2 005153   200070 631500                    EPPR1   FLDS+8,,AUTO
         2 005154   200147 451500                    STP1    DAYS_IN_25THS+5,,AUTO
         2 005155   006600 701000 2                  TSX1    CVT_TO_NUM
         2 005156   006137 702000 2                  TSX2    E_BAD_DATE_H

     2644    14041    5                   IF FLDS.HOUR = 12
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:347  

  14041  2 005157   200070 235100                    LDA     FLDS+8,,AUTO
         2 005160   000014 115007                    CMPA    12,DL
         2 005161   005164 601000 2                  TNZ     s:14044

     2645    14042    5                   THEN
     2646    14043    5                       FLDS.HOUR = 0;

  14043  2 005162   200070 450100                    STZ     FLDS+8,,AUTO
         2 005163   005443 710000 2                  TRA     s:14130

     2647    14044    5                   ELSE IF FLDS.HOUR = 0 OR FLDS.HOUR > 11

  14044  2 005164   000000 115003                    CMPA    0,DU
         2 005165   006137 600000 2                  TZE     E_BAD_DATE_H
         2 005166   000013 115007                    CMPA    11,DL
         2 005167   006137 605400 2                  TPNZ    E_BAD_DATE_H
         2 005170   005443 710000 2                  TRA     s:14130

     2648    14045    5                   THEN
     2649    14046    5                       GOTO E_BAD_DATE_H;
     2650    14047    5               CASE( %XUD#P_TIME_H3 );

     2651    14048    5                   CALL CVT_1ST_NUM( FLDS.HOUR ) ALTRET( E_BAD_DATE_H );

  14048  2 005171   200070 631500                    EPPR1   FLDS+8,,AUTO
         2 005172   200147 451500                    STP1    DAYS_IN_25THS+5,,AUTO
         2 005173   006647 701000 2                  TSX1    CVT_1ST_NUM
         2 005174   006137 702000 2                  TSX2    E_BAD_DATE_H

     2652    14049    5                   FLDS.DAY = FLDS.HOUR / %XUD#HOURS_DAY;

  14049  2 005175   200070 236100                    LDQ     FLDS+8,,AUTO
         2 005176   000030 506007                    DIV     24,DL
         2 005177   200062 756100                    STQ     FLDS+2,,AUTO

     2653    14050    5                   FLDS.HOUR = MOD( FLDS.HOUR, %XUD#HOURS_DAY );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:348  

  14050  2 005200   200070 236100                    LDQ     FLDS+8,,AUTO
         2 005201   000030 506007                    DIV     24,DL
         2 005202   200070 755100                    STA     FLDS+8,,AUTO
         2 005203   005443 710000 2                  TRA     s:14130

     2654    14051                    /*
     2655    14052                      Picture codes for minute...
     2656    14053                    */
     2657    14054    5               CASE( %XUD#P_TIME_M1, %XUD#P_TIME_M2 );

     2658    14055    5                   CALL CVT_MI ALTRET( E_BAD_DATE_MI );

  14055  2 005204   006534 701000 2                  TSX1    CVT_MI
         2 005205   006142 702000 2                  TSX2    E_BAD_DATE_MI
         2 005206   005443 710000 2                  TRA     s:14130

     2659    14056    5               CASE( %XUD#P_TIME_M3 );

     2660    14057    5                   CALL CVT_1ST_NUM( FLDS.MIN ) ALTRET( E_BAD_DATE_MI );

  14057  2 005207   200071 631500                    EPPR1   FLDS+9,,AUTO
         2 005210   200147 451500                    STP1    DAYS_IN_25THS+5,,AUTO
         2 005211   006647 701000 2                  TSX1    CVT_1ST_NUM
         2 005212   006142 702000 2                  TSX2    E_BAD_DATE_MI

     2661    14058    5                   FLDS.DAY = FLDS.MIN / %XUD#MINS_DAY;

  14058  2 005213   200071 236100                    LDQ     FLDS+9,,AUTO
         2 005214   002640 506007                    DIV     1440,DL
         2 005215   200062 756100                    STQ     FLDS+2,,AUTO

     2662    14059    5                   FLDS.MIN = MOD( FLDS.MIN, %XUD#MINS_DAY );

  14059  2 005216   200071 236100                    LDQ     FLDS+9,,AUTO
         2 005217   002640 506007                    DIV     1440,DL
         2 005220   200071 755100                    STA     FLDS+9,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:349  
         2 005221   005443 710000 2                  TRA     s:14130

     2663    14060                    /*
     2664    14061                      Picture codes for second...
     2665    14062                    */
     2666    14063    5               CASE( %XUD#P_TIME_S1, %XUD#P_TIME_S2 );

     2667    14064    5                   CALL CVT_SS ALTRET( E_BAD_DATE_S );

  14064  2 005222   006547 701000 2                  TSX1    CVT_SS
         2 005223   006145 702000 2                  TSX2    E_BAD_DATE_S
         2 005224   005443 710000 2                  TRA     s:14130

     2668    14065    5               CASE( %XUD#P_TIME_S3 );

     2669    14066    5                   CALL CVT_1ST_NUM( FLDS.SEC ) ALTRET( E_BAD_DATE_S );

  14066  2 005225   200072 631500                    EPPR1   FLDS+10,,AUTO
         2 005226   200147 451500                    STP1    DAYS_IN_25THS+5,,AUTO
         2 005227   006647 701000 2                  TSX1    CVT_1ST_NUM
         2 005230   006145 702000 2                  TSX2    E_BAD_DATE_S

     2670    14067    5                   FLDS.DAY = FLDS.SEC / %XUD#SECS_DAY;

  14067  2 005231   200072 236100                    LDQ     FLDS+10,,AUTO
         2 005232   250600 506007                    DIV     86400,DL
         2 005233   200062 756100                    STQ     FLDS+2,,AUTO

     2671    14068    5                   FLDS.SEC = MOD( FLDS.SEC, %XUD#SECS_DAY );

  14068  2 005234   200072 236100                    LDQ     FLDS+10,,AUTO
         2 005235   250600 506007                    DIV     86400,DL
         2 005236   200072 755100                    STA     FLDS+10,,AUTO
         2 005237   005443 710000 2                  TRA     s:14130

     2672    14069                    /*
     2673    14070                      Picture codes for clock tics...
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:350  
     2674    14071                    */
     2675    14072    5               CASE( %XUD#P_TIME_T1, %XUD#P_TIME_T2 );

     2676    14073    5                   CALL CVT_TT ALTRET( E_BAD_DATE_T );

  14073  2 005240   006562 701000 2                  TSX1    CVT_TT
         2 005241   006150 702000 2                  TSX2    E_BAD_DATE_T
         2 005242   005443 710000 2                  TRA     s:14130

     2677    14074    5               CASE( %XUD#P_TIME_T3 );

     2678    14075    5                   CALL CVT_1ST_NUM( FLDS.TIC ) ALTRET( E_BAD_DATE_T );

  14075  2 005243   200073 631500                    EPPR1   FLDS+11,,AUTO
         2 005244   200147 451500                    STP1    DAYS_IN_25THS+5,,AUTO
         2 005245   006647 701000 2                  TSX1    CVT_1ST_NUM
         2 005246   006150 702000 2                  TSX2    E_BAD_DATE_T

     2679    14076    5                   FLDS.DAY = FLDS.TIC / %XUD#TICS_DAY;

  14076  2 005247   200073 236100                    LDQ     FLDS+11,,AUTO
         2 005250   000010 506000 3                  DIV     8
         2 005251   200062 756100                    STQ     FLDS+2,,AUTO

     2680    14077    5                   FLDS.TIC = MOD( FLDS.TIC, %XUD#TICS_DAY );

  14077  2 005252   200073 236100                    LDQ     FLDS+11,,AUTO
         2 005253   000010 506000 3                  DIV     8
         2 005254   200073 755100                    STA     FLDS+11,,AUTO
         2 005255   005443 710000 2                  TRA     s:14130

     2681    14078                    /*
     2682    14079                      Picture codes for AM/PM...
     2683    14080                    */
     2684    14081    5               CASE( %XUD#P_TIME_APM, %XUD#P_TIME_AP_M );

     2685    14082    5                   CALL CHK4SFX;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:351  

  14082  2 005256   010071 701000 2                  TSX1    CHK4SFX
         2 005257   000000 011000                    NOP     0

     2686    14083    6                   DO CASE( IDX );

  14083  2 005260   200076 235100                    LDA     IDX,,AUTO
         2 005261   000011 115007                    CMPA    9,DL
         2 005262   005264 602005 2                  TNC     s:14083+4,AL
         2 005263   005300 710000 2                  TRA     s:14089
         2 005264   005301 710000 2                  TRA     s:14090
         2 005265   005300 710000 2                  TRA     s:14089
         2 005266   005300 710000 2                  TRA     s:14089
         2 005267   005300 710000 2                  TRA     s:14089
         2 005270   005300 710000 2                  TRA     s:14089
         2 005271   005301 710000 2                  TRA     s:14090
         2 005272   005301 710000 2                  TRA     s:14090
         2 005273   005275 710000 2                  TRA     s:14087
         2 005274   005275 710000 2                  TRA     s:14087

     2687    14084    6                   CASE( %XUD#SFX_AM, %XUD#SFX_A_M, %XUD#SFX_NONE );

     2688    14085    6                       ; /* nothing to do */
     2689    14086    6                   CASE( %XUD#SFX_PM, %XUD#SFX_P_M );

     2690    14087    6                       FLDS.HOUR = FLDS.HOUR + 12;

  14087  2 005275   000014 236007                    LDQ     12,DL
         2 005276   200070 056100                    ASQ     FLDS+8,,AUTO
         2 005277   005443 710000 2                  TRA     s:14130

     2691    14088    6                   CASE( ELSE );

     2692    14089    6                       LEN = 0;

  14089  2 005300   200100 450100                    STZ     LEN,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:352  
     2693    14090    6                   END/*CASE*/;

  14090  2 005301   005443 710000 2                  TRA     s:14130

     2694    14091                    /*
     2695    14092                      Picture punctuation...
     2696    14093                    */
     2697    14094    5               CASE( %XUD#P_SWITCH );

     2698    14095    5                   CALL CVT_SWITCH;

  14095  2 005302   006402 701000 2                  TSX1    CVT_SWITCH
         2 005303   000000 011000                    NOP     0

     2699    14096    5                   LEN = 0;

  14096  2 005304   200100 450100                    STZ     LEN,,AUTO

     2700    14097    5                   BLANK = %XUD#YES;

  14097  2 005305   400000 236003                    LDQ     -131072,DU
         2 005306   200137 756100                    STQ     BLANK,,AUTO
         2 005307   005443 710000 2                  TRA     s:14130

     2701    14098    5               CASE( ELSE );

     2702    14099    5                   IF SUBSTR( PICTURE.T, I, 1 ) = %XUD#BLANK

  14099  2 005310   040000 106505                    CMPC    fill='040'O
         2 005311   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         2 005312   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 005313   005431 601000 2                  TNZ     s:14123

     2703    14100    6                   THEN DO;

     2704    14101    6                       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:353  
  14101  2 005314   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 005315   200075 136100                    SBLQ    J,,AUTO
         2 005316   000000 471400 xsym               LDP1    B$SR_NON_BLANK$
         2 005317   200011 473500                    LDP3    CHARS$,,AUTO
         2 005320   000000 620006                    EAX0    0,QL
         2 005321   200075 236100                    LDQ     J,,AUTO
         2 005322   000000 164546                    TCT
         2 005323   300000 000010                    ADSC9   0,Q,PR3                  cn=0,n=*X0
         2 005324   100000 000100                    ARG     0,,PR1
         2 005325   200100 000100                    ARG     LEN,,AUTO
         2 005326   200100 235100                    LDA     LEN,,AUTO
         2 005327   000033 771000                    ARL     27
         2 005330   200077 755100                    STA     JUNK,,AUTO
         2 005331   200100 551140                    STBA    LEN,'40'O,AUTO

     2705    14102    6                       IF LEN = 0 AND NOT BLANK AND I < PIC_SIZE - 1

  14102  2 005332   200100 235100                    LDA     LEN,,AUTO
         2 005333   005422 601000 2                  TNZ     s:14118
         2 005334   200137 234100                    SZN     BLANK,,AUTO
         2 005335   005422 604000 2                  TMI     s:14118
         2 005336   200007 236100                    LDQ     PIC_SIZE,,AUTO
         2 005337   000001 136007                    SBLQ    1,DL
         2 005340   200074 116100                    CMPQ    I,,AUTO
         2 005341   005422 604400 2                  TMOZ    s:14118

     2706    14103    7                       THEN DO;

     2707    14104    7                           PIC_CHAR = SUBSTR( PICTURE.T, I+1, 1 );

  14104  2 005342   200074 235100                    LDA     I,,AUTO
         2 005343   040100 100505                    MLR     fill='040'O
         2 005344   000000 400001                    ADSC9   0,A,PR0                  cn=2,n=1
         2 005345   200104 000001                    ADSC9   PIC_CHAR,,AUTO           cn=0,n=1

     2708    14105    7                           IF PIC_CHAR ~= BINASC( %XUD#P_DATE_AD )

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:354  
  14105  2 005346   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005347   777000 376003                    ANQ     -512,DU
         2 005350   436000 116003                    CMPQ    -115712,DU
         2 005351   005422 600000 2                  TZE     s:14118
         2 005352   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005353   777000 376003                    ANQ     -512,DU
         2 005354   437000 116003                    CMPQ    -115200,DU
         2 005355   005422 600000 2                  TZE     s:14118
         2 005356   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005357   777000 376003                    ANQ     -512,DU
         2 005360   440000 116003                    CMPQ    -114688,DU
         2 005361   005422 600000 2                  TZE     s:14118
         2 005362   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005363   777000 376003                    ANQ     -512,DU
         2 005364   441000 116003                    CMPQ    -114176,DU
         2 005365   005422 600000 2                  TZE     s:14118
         2 005366   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005367   777000 376003                    ANQ     -512,DU
         2 005370   442000 116003                    CMPQ    -113664,DU
         2 005371   005422 600000 2                  TZE     s:14118
         2 005372   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005373   777000 376003                    ANQ     -512,DU
         2 005374   443000 116003                    CMPQ    -113152,DU
         2 005375   005422 600000 2                  TZE     s:14118
         2 005376   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005377   777000 376003                    ANQ     -512,DU
         2 005400   444000 116003                    CMPQ    -112640,DU
         2 005401   005422 600000 2                  TZE     s:14118
         2 005402   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005403   777000 376003                    ANQ     -512,DU
         2 005404   445000 116003                    CMPQ    -112128,DU
         2 005405   005422 600000 2                  TZE     s:14118
         2 005406   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005407   777000 376003                    ANQ     -512,DU
         2 005410   473000 116003                    CMPQ    -100864,DU
         2 005411   005422 600000 2                  TZE     s:14118
         2 005412   200104 236100                    LDQ     PIC_CHAR,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:355  
         2 005413   777000 376003                    ANQ     -512,DU
         2 005414   472000 116003                    CMPQ    -101376,DU
         2 005415   005422 600000 2                  TZE     s:14118
         2 005416   200104 236100                    LDQ     PIC_CHAR,,AUTO
         2 005417   777000 376003                    ANQ     -512,DU
         2 005420   473000 116003                    CMPQ    -100864,DU
         2 005421   006110 601000 2                  TNZ     E_BAD_DATE

     2709    14106    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_A_D )
     2710    14107    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_BC )
     2711    14108    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_B_C )
     2712    14109    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_CE )
     2713    14110    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_C_E )
     2714    14111    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_BCE )
     2715    14112    7                               AND PIC_CHAR ~= BINASC( %XUD#P_DATE_B_C_E )
     2716    14113    7                               AND PIC_CHAR ~= BINASC( %XUD#P_TIME_AP_M )
     2717    14114    7                               AND PIC_CHAR ~= BINASC( %XUD#P_TIME_APM )
     2718    14115    7                               AND PIC_CHAR ~= BINASC( %XUD#P_TIME_AP_M )
     2719    14116    7                             THEN GOTO E_BAD_DATE;
     2720    14117    7                       END;

     2721    14118    6                       J = J + LEN;

  14118  2 005422   200075 236100                    LDQ     J,,AUTO
         2 005423   200100 036100                    ADLQ    LEN,,AUTO
         2 005424   200075 756100                    STQ     J,,AUTO

     2722    14119    6                       LEN = 0;

  14119  2 005425   200100 450100                    STZ     LEN,,AUTO

     2723    14120    6                       BLANK = %XUD#YES;

  14120  2 005426   400000 236003                    LDQ     -131072,DU
         2 005427   200137 756100                    STQ     BLANK,,AUTO

     2724    14121    6                   END;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:356  

  14121  2 005430   005443 710000 2                  TRA     s:14130

     2725    14122    6                   ELSE DO;

     2726    14123    6                       IF J < CHAR_SIZE AND

  14123  2 005431   200075 236100                    LDQ     J,,AUTO
         2 005432   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 005433   005441 605000 2                  TPL     s:14126
         2 005434   200011 471500                    LDP1    CHARS$,,AUTO
         2 005435   040105 106506                    CMPC    fill='040'O
         2 005436   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1
         2 005437   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         2 005440   006110 601000 2                  TNZ     E_BAD_DATE

     2727    14124    6                         SUBSTR( CHARS, J, 1 ) ~= SUBSTR( PICTURE.T, I, 1 )
     2728    14125    6                         THEN GOTO E_BAD_DATE;
     2729    14126    6                       LEN = 1;

  14126  2 005441   000001 235007                    LDA     1,DL
         2 005442   200100 755100                    STA     LEN,,AUTO

     2730    14127    6                   END;

     2731    14128
     2732    14129    5               END/*CASE*/;

     2733    14130    4               IF LEN > 0

  14130  2 005443   200100 235100                    LDA     LEN,,AUTO
         2 005444   005446 604400 2                  TMOZ    s:14132

     2734    14131    4                 THEN BLANK = %XUD#NO;

  14131  2 005445   200137 450100                    STZ     BLANK,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:357  
     2735    14132    4               J = J + LEN;

  14132  2 005446   200075 236100                    LDQ     J,,AUTO
         2 005447   200100 036100                    ADLQ    LEN,,AUTO
         2 005450   200075 756100                    STQ     J,,AUTO

     2736    14133    4           END/*TO*/;

  14133  2 005451   200074 054100                    AOS     I,,AUTO
         2 005452   200074 236100                    LDQ     I,,AUTO
         2 005453   200007 116100                    CMPQ    PIC_SIZE,,AUTO
         2 005454   004662 604000 2                  TMI     s:13956

     2737    14134    3       END;

     2738    14135            /*
     2739    14136              Give error if string not exhausted when picture is completely parsed.
     2740    14137            */
     2741    14138    2       IF J < CHAR_SIZE

  14138  2 005455   200075 236100                    LDQ     J,,AUTO
         2 005456   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 005457   005462 605000 2                  TPL     s:14141

     2742    14139    2         THEN ERR = E_XUD#EXCESS_CHARS;

  14139  2 005460   000047 236000 1                  LDQ     E_XUD#EXCESS_CHARS
         2 005461   200103 756100                    STQ     ERR,,AUTO

     2743    14140
     2744    14141    2       IF TIMESPAN

  14141  2 005462   200102 234100                    SZN     TIMESPAN,,AUTO
         2 005463   005505 605000 2                  TPL     s:14159

     2745    14142    3       THEN DO;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:358  
     2746    14143                /*
     2747    14144                  Compute days and tics for timespans.
     2748    14145                */
     2749    14146    3           DAYS = FLDS.DAY;

  14146  2 005464   200062 235100                    LDA     FLDS+2,,AUTO
         2 005465   200055 755100                    STA     DAYS,,AUTO

     2750    14147    3           TICS = (FLDS.HOUR * %XUD#TICS_HOUR) + (FLDS.MIN * %XUD#TICS_MIN )

  14147  2 005466   200070 236100                    LDQ     FLDS+8,,AUTO
         2 005467   000074 402007                    MPY     60,DL
         2 005470   200071 036100                    ADLQ    FLDS+9,,AUTO
         2 005471   000074 402007                    MPY     60,DL
         2 005472   200072 036100                    ADLQ    FLDS+10,,AUTO
         2 005473   000144 402007                    MPY     100,DL
         2 005474   200073 036100                    ADLQ    FLDS+11,,AUTO
         2 005475   200056 756100                    STQ     TICS,,AUTO

     2751    14148    3             + (FLDS.SEC * %XUD#TICS_SEC) + FLDS.TIC;
     2752    14149    3           IF FLDS.BC

  14149  2 005476   200065 234100                    SZN     FLDS+5,,AUTO
         2 005477   006104 605000 2                  TPL     s:14269

     2753    14150    4           THEN DO;

     2754    14151    4               TICS = - TICS;

  14151  2 005500   200056 335100                    LCA     TICS,,AUTO
         2 005501   200056 755100                    STA     TICS,,AUTO

     2755    14152    4               DAYS = - DAYS;

  14152  2 005502   200055 336100                    LCQ     DAYS,,AUTO
         2 005503   200055 756100                    STQ     DAYS,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:359  
     2756    14153    4           END;

     2757    14154    3       END;

  14154  2 005504   006104 710000 2                  TRA     s:14269

     2758    14155    3       ELSE DO;

     2759    14156                /*
     2760    14157                  Compute date subfields not explicitly provided
     2761    14158                */
     2762    14159    3           IF FLDS.YEAR = 0 AND FLDS.JULIAN = 0 AND FLDS.QUARTER = 0

  14159  2 005505   200060 235100                    LDA     FLDS,,AUTO
         2 005506   005536 601000 2                  TNZ     s:14170
         2 005507   200063 236100                    LDQ     FLDS+3,,AUTO
         2 005510   005536 601000 2                  TNZ     s:14170
         2 005511   200064 235100                    LDA     FLDS+4,,AUTO
         2 005512   005536 601000 2                  TNZ     s:14170
         2 005513   200061 235100                    LDA     FLDS+1,,AUTO
         2 005514   005536 601000 2                  TNZ     s:14170

     2763    14160    3             AND FLDS.MON = 0
     2764    14161    4           THEN DO;

     2765    14162    4               CALL GET_CURRENT_YEAR;

  14162  2 005515   006674 701000 2                  TSX1    GET_CURRENT_YEAR
         2 005516   000000 011000                    NOP     0

     2766    14163    4               FLDS.YEAR = SYSTEM_YEAR;

  14163  2 005517   200134 235100                    LDA     SYSTEM_YEAR,,AUTO
         2 005520   200060 755100                    STA     FLDS,,AUTO

     2767    14164    4               CALL CHARBIN( FLDS.MON, SYSTEM_DATE.MM );

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:360  
  14164  2 005521   000100 305500                    DTB
         2 005522   200132 430002                    NDSC9   SYSTEM_DATE,,AUTO        cn=2,s=nosgn,sf=0,n=2
         2 005523   200061 000004                    NDSC9   FLDS+1,,AUTO             cn=0,s=lsgnf,sf=0,n=4

     2768    14165    4               IF FLDS.DAY = 0

  14165  2 005524   200062 236100                    LDQ     FLDS+2,,AUTO
         2 005525   005531 601000 2                  TNZ     s:14167

     2769    14166    4                 THEN CALL CHARBIN( FLDS.DAY, SYSTEM_DATE.DD );

  14166  2 005526   000100 305500                    DTB
         2 005527   200133 030002                    NDSC9   SYSTEM_DATE+1,,AUTO      cn=0,s=nosgn,sf=0,n=2
         2 005530   200062 000004                    NDSC9   FLDS+2,,AUTO             cn=0,s=lsgnf,sf=0,n=4

     2770    14167    4               IF FLDS.WKDAY ~= 0

  14167  2 005531   200067 236100                    LDQ     FLDS+7,,AUTO
         2 005532   005544 600000 2                  TZE     s:14175

     2771    14168    4                 THEN FLDS.WKDAY_ONLY = %XUD#YES;

  14168  2 005533   100000 236003                    LDQ     32768,DU
         2 005534   200065 256100                    ORSQ    FLDS+5,,AUTO

     2772    14169    4           END;

  14169  2 005535   005544 710000 2                  TRA     s:14175

     2773    14170    3           ELSE IF FLDS.YEAR = 0

  14170  2 005536   200060 235100                    LDA     FLDS,,AUTO
         2 005537   005544 601000 2                  TNZ     s:14175

     2774    14171    4           THEN DO;

     2775    14172    4               CALL GET_CURRENT_YEAR;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:361  

  14172  2 005540   006674 701000 2                  TSX1    GET_CURRENT_YEAR
         2 005541   000000 011000                    NOP     0

     2776    14173    4               FLDS.YEAR = SYSTEM_YEAR;

  14173  2 005542   200134 235100                    LDA     SYSTEM_YEAR,,AUTO
         2 005543   200060 755100                    STA     FLDS,,AUTO

     2777    14174    4           END;

     2778    14175    3           IF MOD( FLDS.YEAR, 4 ) = 0

  14175  2 005544   200060 236100                    LDQ     FLDS,,AUTO
         2 005545   000004 506007                    DIV     4,DL
         2 005546   000044 733000                    LRS     36
         2 005547   000000 116003                    CMPQ    0,DU
         2 005550   005601 601000 2                  TNZ     s:14182
         2 005551   200060 236100                    LDQ     FLDS,,AUTO
         2 005552   000144 506007                    DIV     100,DL
         2 005553   000044 733000                    LRS     36
         2 005554   000000 116003                    CMPQ    0,DU
         2 005555   005564 601000 2                  TNZ     s:14178
         2 005556   200060 236100                    LDQ     FLDS,,AUTO
         2 005557   000144 506007                    DIV     100,DL
         2 005560   000004 506007                    DIV     4,DL
         2 005561   000044 733000                    LRS     36
         2 005562   000000 116003                    CMPQ    0,DU
         2 005563   005601 601000 2                  TNZ     s:14182

     2779    14176    3             AND ( MOD( FLDS.YEAR, 100 ) ~= 0 OR MOD( FLDS.YEAR / 100, 4 ) = 0 )
     2780    14177    4           THEN DO;

     2781    14178    4               FLDS.LEAP_FLAG = %XUD#YES;

  14178  2 005564   200000 236003                    LDQ     65536,DU
         2 005565   200065 256100                    ORSQ    FLDS+5,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:362  

     2782    14179    4               IF ( FLDS.MON > 2 OR FLDS.JULIAN > 59 OR FLDS.QUARTER > 1 )

  14179  2 005566   200061 235100                    LDA     FLDS+1,,AUTO
         2 005567   000002 115007                    CMPA    2,DL
         2 005570   005577 605400 2                  TPNZ    s:14180
         2 005571   200063 235100                    LDA     FLDS+3,,AUTO
         2 005572   000073 115007                    CMPA    59,DL
         2 005573   005577 605400 2                  TPNZ    s:14180
         2 005574   200064 235100                    LDA     FLDS+4,,AUTO
         2 005575   000001 115007                    CMPA    1,DL
         2 005576   005601 604400 2                  TMOZ    s:14182

     2783    14180    4                 THEN FLDS.LEAP = 1;

  14180  2 005577   000001 235007                    LDA     1,DL
         2 005600   200066 755100                    STA     FLDS+6,,AUTO

     2784    14181    4           END;

     2785    14182    3           IF FLDS.QUARTER > 0

  14182  2 005601   200064 235100                    LDA     FLDS+4,,AUTO
         2 005602   005611 604400 2                  TMOZ    s:14184

     2786    14183    3             THEN FLDS.JULIAN = CUM_DAYS( (FLDS.QUARTER - 1) * 3 ) + FLDS.LEAP + 1;

  14183  2 005603   200064 236100                    LDQ     FLDS+4,,AUTO
         2 005604   000003 402007                    MPY     3,DL
         2 005605   000066 236006 1                  LDQ     E_XUD#PICID_ORDER,QL
         2 005606   200066 036100                    ADLQ    FLDS+6,,AUTO
         2 005607   000001 036007                    ADLQ    1,DL
         2 005610   200063 756100                    STQ     FLDS+3,,AUTO

     2787    14184    3           IF FLDS.JULIAN > 0

  14184  2 005611   200063 235100                    LDA     FLDS+3,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:363  
         2 005612   005652 604400 2                  TMOZ    s:14206

     2788    14185    4           THEN DO;

     2789    14186    4               IF FLDS.JULIAN = 60 AND FLDS.LEAP_FLAG

  14186  2 005613   000074 115007                    CMPA    60,DL
         2 005614   005625 601000 2                  TNZ     s:14192
         2 005615   200065 236100                    LDQ     FLDS+5,,AUTO
         2 005616   200000 316003                    CANQ    65536,DU
         2 005617   005625 600000 2                  TZE     s:14192

     2790    14187    5               THEN DO;

     2791    14188    5                   FLDS.DAY = 29;

  14188  2 005620   000035 235007                    LDA     29,DL
         2 005621   200062 755100                    STA     FLDS+2,,AUTO

     2792    14189    5                   FLDS.MON = 2;

  14189  2 005622   000002 235007                    LDA     2,DL
         2 005623   200061 755100                    STA     FLDS+1,,AUTO

     2793    14190    5               END;

  14190  2 005624   005671 710000 2                  TRA     s:14214

     2794    14191    5               ELSE DO;

     2795    14192    5                   IF FLDS.JULIAN - FLDS.LEAP > 365

  14192  2 005625   200063 236100                    LDQ     FLDS+3,,AUTO
         2 005626   200066 136100                    SBLQ    FLDS+6,,AUTO
         2 005627   000555 116007                    CMPQ    365,DL
         2 005630   006126 605400 2                  TPNZ    E_BAD_DATE_D

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:364  
     2796    14193    5                     THEN GOTO E_BAD_DATE_D;
     2797    14194    6                   DO FLDS.MON = 0 TO 10;

  14194  2 005631   200061 450100                    STZ     FLDS+1,,AUTO

     2798    14195    6                       IF CUM_DAYS( FLDS.MON + 1 ) >= FLDS.JULIAN - FLDS.LEAP

  14195  2 005632   200063 236100                    LDQ     FLDS+3,,AUTO
         2 005633   200066 136100                    SBLQ    FLDS+6,,AUTO
         2 005634   200061 720100                    LXL0    FLDS+1,,AUTO
         2 005635   000072 116010 1                  CMPQ    CUM_DAYS+1,X0
         2 005636   005643 604400 2                  TMOZ    s:14198

     2799    14196    6                         THEN EXIT;
     2800    14197    6                   END/*TO*/;

  14197  2 005637   200061 054100                    AOS     FLDS+1,,AUTO
         2 005640   200061 235100                    LDA     FLDS+1,,AUTO
         2 005641   000012 115007                    CMPA    10,DL
         2 005642   005632 604400 2                  TMOZ    s:14195

     2801    14198    5                   FLDS.DAY = FLDS.JULIAN - CUM_DAYS( FLDS.MON ) - FLDS.LEAP;

  14198  2 005643   200061 720100                    LXL0    FLDS+1,,AUTO
         2 005644   200063 236100                    LDQ     FLDS+3,,AUTO
         2 005645   000071 136010 1                  SBLQ    CUM_DAYS,X0
         2 005646   200066 136100                    SBLQ    FLDS+6,,AUTO
         2 005647   200062 756100                    STQ     FLDS+2,,AUTO

     2802    14199    5                   FLDS.MON = FLDS.MON + 1;

  14199  2 005650   200061 054100                    AOS     FLDS+1,,AUTO

     2803    14200    5               END;

     2804    14201    4           END;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:365  
  14201  2 005651   005671 710000 2                  TRA     s:14214

     2805    14202                /*
     2806    14203                  Validate number of days in month
     2807    14204                */
     2808    14205    4           ELSE DO;

     2809    14206    4               IF FLDS.DAY > 0 AND FLDS.MON > 0

  14206  2 005652   200062 236100                    LDQ     FLDS+2,,AUTO
         2 005653   005671 604400 2                  TMOZ    s:14214
         2 005654   200061 235100                    LDA     FLDS+1,,AUTO
         2 005655   005671 604400 2                  TMOZ    s:14214

     2810    14207    4                 THEN IF MON_DAYS( FLDS.MON - 1 ) < FLDS.DAY

  14207  2 005656   000120 116005 1                  CMPQ    CUM_DAYS_BC+11,AL
         2 005657   005671 604400 2                  TMOZ    s:14214
         2 005660   200065 236100                    LDQ     FLDS+5,,AUTO
         2 005661   200000 316003                    CANQ    65536,DU
         2 005662   006126 600000 2                  TZE     E_BAD_DATE_D
         2 005663   200061 235100                    LDA     FLDS+1,,AUTO
         2 005664   000002 115007                    CMPA    2,DL
         2 005665   006126 601000 2                  TNZ     E_BAD_DATE_D
         2 005666   200062 235100                    LDA     FLDS+2,,AUTO
         2 005667   000035 115007                    CMPA    29,DL
         2 005670   006126 601000 2                  TNZ     E_BAD_DATE_D

     2811    14208    4                 AND NOT( FLDS.LEAP_FLAG AND FLDS.MON = 2 AND FLDS.DAY = 29 )
     2812    14209    4                 THEN GOTO E_BAD_DATE_D;
     2813    14210    4           END;

     2814    14211                /*
     2815    14212                  Compute DAYS and TICS from date/time subfields.
     2816    14213                */
     2817    14214    3           FLDS.YEAR = FLDS.YEAR - 1;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:366  
  14214  2 005671   000001 336007                    LCQ     1,DL
         2 005672   200060 056100                    ASQ     FLDS,,AUTO

     2818    14215    3           IF FLDS.MON > 0

  14215  2 005673   200061 235100                    LDA     FLDS+1,,AUTO
         2 005674   005676 604400 2                  TMOZ    s:14217

     2819    14216    3             THEN FLDS.MON = FLDS.MON - 1;

  14216  2 005675   200061 056100                    ASQ     FLDS+1,,AUTO

     2820    14217    3           IF FLDS.DAY > 0

  14217  2 005676   200062 235100                    LDA     FLDS+2,,AUTO
         2 005677   005701 604400 2                  TMOZ    s:14219

     2821    14218    3             THEN FLDS.DAY = FLDS.DAY - 1;

  14218  2 005700   200062 056100                    ASQ     FLDS+2,,AUTO

     2822    14219    3           IF NOT FLDS.BC

  14219  2 005701   200065 234100                    SZN     FLDS+5,,AUTO
         2 005702   006015 604000 2                  TMI     s:14249

     2823    14220    4           THEN DO;

     2824    14221                    /* Calculate number of days without leap years... */
     2825    14222    4               DAYS = FLDS.DAY + CUM_DAYS( FLDS.MON ) + (FLDS.YEAR * 365);

  14222  2 005703   200061 720100                    LXL0    FLDS+1,,AUTO
         2 005704   200062 236100                    LDQ     FLDS+2,,AUTO
         2 005705   000071 036010 1                  ADLQ    CUM_DAYS,X0
         2 005706   200152 756100                    STQ     LIMIT+1,,AUTO
         2 005707   200060 236100                    LDQ     FLDS,,AUTO
         2 005710   000555 402007                    MPY     365,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:367  
         2 005711   200152 036100                    ADLQ    LIMIT+1,,AUTO
         2 005712   200055 756100                    STQ     DAYS,,AUTO

     2826    14223                    /*  ...plus nominal number of yeap years... */
     2827    14224    4               FLDS.MON = FLDS.MON + 10;

  14224  2 005713   000012 236007                    LDQ     10,DL
         2 005714   200061 056100                    ASQ     FLDS+1,,AUTO

     2828    14225    4               DAYS = DAYS + (((FLDS.YEAR * 12) + FLDS.MON) / 48);

  14225  2 005715   200060 236100                    LDQ     FLDS,,AUTO
         2 005716   000014 402007                    MPY     12,DL
         2 005717   200061 036100                    ADLQ    FLDS+1,,AUTO
         2 005720   000060 506007                    DIV     48,DL
         2 005721   200055 036100                    ADLQ    DAYS,,AUTO
         2 005722   200055 756100                    STQ     DAYS,,AUTO

     2829    14226                    /*  ...minus non-leap centuries up to last leap century... */
     2830    14227    4               FLDS.YEAR = FLDS.YEAR + (FLDS.MON / 12);

  14227  2 005723   200061 236100                    LDQ     FLDS+1,,AUTO
         2 005724   000014 506007                    DIV     12,DL
         2 005725   200060 036100                    ADLQ    FLDS,,AUTO
         2 005726   200060 756100                    STQ     FLDS,,AUTO

     2831    14228    4               DAYS = DAYS - ((FLDS.YEAR / 400) * 3);

  14228  2 005727   000620 506007                    DIV     400,DL
         2 005730   000024 402000 3                  MPY     20
         2 005731   200055 036100                    ADLQ    DAYS,,AUTO
         2 005732   200055 756100                    STQ     DAYS,,AUTO

     2832    14229                    /*  ...minus non_leap centuries since last leap century. */
     2833    14230    4               DAYS = DAYS - (MOD( FLDS.YEAR, 400 ) / 100);

  14230  2 005733   200060 236100                    LDQ     FLDS,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:368  
         2 005734   000620 506007                    DIV     400,DL
         2 005735   000044 733000                    LRS     36
         2 005736   000144 506007                    DIV     100,DL
         2 005737   200152 756100                    STQ     LIMIT+1,,AUTO
         2 005740   200055 236100                    LDQ     DAYS,,AUTO
         2 005741   200152 136100                    SBLQ    LIMIT+1,,AUTO
         2 005742   200055 756100                    STQ     DAYS,,AUTO

     2834    14231                    /*  Calculate time of day. */
     2835    14232    4               TICS = (FLDS.HOUR * %XUD#TICS_HOUR) + (FLDS.MIN * %XUD#TICS_MIN)

  14232  2 005743   200070 236100                    LDQ     FLDS+8,,AUTO
         2 005744   000074 402007                    MPY     60,DL
         2 005745   200071 036100                    ADLQ    FLDS+9,,AUTO
         2 005746   000074 402007                    MPY     60,DL
         2 005747   200072 036100                    ADLQ    FLDS+10,,AUTO
         2 005750   000144 402007                    MPY     100,DL
         2 005751   200073 036100                    ADLQ    FLDS+11,,AUTO
         2 005752   200056 756100                    STQ     TICS,,AUTO

     2836    14233    4                 + (FLDS.SEC * %XUD#TICS_SEC) + FLDS.TIC;
     2837    14234                    /* If weekday only, bump days to next occurrance of that day. */
     2838    14235    4               IF FLDS.WKDAY_ONLY

  14235  2 005753   200065 236100                    LDQ     FLDS+5,,AUTO
         2 005754   100000 316003                    CANQ    32768,DU
         2 005755   006001 600000 2                  TZE     s:14244

     2839    14236    5               THEN DO;

     2840    14237    5                   I = MOD( DAYS + 1, 7 ) + 1;

  14237  2 005756   200055 236100                    LDQ     DAYS,,AUTO
         2 005757   000001 036007                    ADLQ    1,DL
         2 005760   000007 506007                    DIV     7,DL
         2 005761   000001 035007                    ADLA    1,DL
         2 005762   200074 755100                    STA     I,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:369  

     2841    14238    5                   IF I >= FLDS.WKDAY

  14238  2 005763   200074 236100                    LDQ     I,,AUTO
         2 005764   200067 116100                    CMPQ    FLDS+7,,AUTO
         2 005765   005773 604000 2                  TMI     s:14240

     2842    14239    5                     THEN I = 7 - (I - FLDS.WKDAY);

  14239  2 005766   200067 136100                    SBLQ    FLDS+7,,AUTO
         2 005767   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 005770   000010 036007                    ADLQ    8,DL
         2 005771   200074 756100                    STQ     I,,AUTO
         2 005772   005776 710000 2                  TRA     s:14241

     2843    14240    5                     ELSE I = FLDS.WKDAY - I;

  14240  2 005773   200067 236100                    LDQ     FLDS+7,,AUTO
         2 005774   200074 136100                    SBLQ    I,,AUTO
         2 005775   200074 756100                    STQ     I,,AUTO

     2844    14241    5                   DAYS = DAYS + I;

  14241  2 005776   200055 036100                    ADLQ    DAYS,,AUTO
         2 005777   200055 756100                    STQ     DAYS,,AUTO

     2845    14242    5               END;

  14242  2 006000   006104 710000 2                  TRA     s:14269

     2846    14243                    /* If day of week was entered, make sure it is correct. */
     2847    14244    4               ELSE IF FLDS.WKDAY > 0 AND MOD( DAYS + 1, 7 ) ~= FLDS.WKDAY - 1

  14244  2 006001   200067 235100                    LDA     FLDS+7,,AUTO
         2 006002   006014 604400 2                  TMOZ    s:14246
         2 006003   200055 236100                    LDQ     DAYS,,AUTO
         2 006004   000001 036007                    ADLQ    1,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:370  
         2 006005   000007 506007                    DIV     7,DL
         2 006006   200067 236100                    LDQ     FLDS+7,,AUTO
         2 006007   000001 136007                    SBLQ    1,DL
         2 006010   200152 756100                    STQ     LIMIT+1,,AUTO
         2 006011   000044 733000                    LRS     36
         2 006012   200152 116100                    CMPQ    LIMIT+1,,AUTO
         2 006013   006134 601000 2                  TNZ     E_BAD_DATE_W

     2848    14245    4                 THEN GOTO E_BAD_DATE_W;
     2849    14246    4           END;

  14246  2 006014   006104 710000 2                  TRA     s:14269

     2850    14247    4           ELSE DO;

     2851    14248                    /* Calculate number of days BC without leap years... */
     2852    14249    4               DAYS = - (MON_DAYS( FLDS.MON ) - FLDS.DAY)

  14249  2 006015   200061 720100                    LXL0    FLDS+1,,AUTO
         2 006016   000121 236010 1                  LDQ     MON_DAYS,X0
         2 006017   200062 136100                    SBLQ    FLDS+2,,AUTO
         2 006020   000105 036010 1                  ADLQ    CUM_DAYS_BC,X0
         2 006021   200152 756100                    STQ     LIMIT+1,,AUTO
         2 006022   200060 236100                    LDQ     FLDS,,AUTO
         2 006023   000555 402007                    MPY     365,DL
         2 006024   200152 036100                    ADLQ    LIMIT+1,,AUTO
         2 006025   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 006026   000002 036007                    ADLQ    2,DL
         2 006027   200055 756100                    STQ     DAYS,,AUTO

     2853    14250    4                 - CUM_DAYS_BC( FLDS.MON ) - (FLDS.YEAR * 365) + 1;
     2854    14251                    /* ...minus number nominal number of leap years... */
     2855    14252    4               FLDS.MON = 13 - FLDS.MON;

  14252  2 006030   000015 235007                    LDA     13,DL
         2 006031   200061 135100                    SBLA    FLDS+1,,AUTO
         2 006032   200061 755100                    STA     FLDS+1,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:371  

     2856    14253    4               DAYS = DAYS - (((FLDS.YEAR * 12) + FLDS.MON ) / 48);

  14253  2 006033   200060 236100                    LDQ     FLDS,,AUTO
         2 006034   000014 402007                    MPY     12,DL
         2 006035   200061 036100                    ADLQ    FLDS+1,,AUTO
         2 006036   000060 506007                    DIV     48,DL
         2 006037   200152 756100                    STQ     LIMIT+1,,AUTO
         2 006040   200055 236100                    LDQ     DAYS,,AUTO
         2 006041   200152 136100                    SBLQ    LIMIT+1,,AUTO
         2 006042   200055 756100                    STQ     DAYS,,AUTO

     2857    14254                    /* ...plus non-leap centuries after first leap century... */
     2858    14255    4               FLDS.YEAR = FLDS.YEAR + (FLDS.MON / 12);

  14255  2 006043   200061 236100                    LDQ     FLDS+1,,AUTO
         2 006044   000014 506007                    DIV     12,DL
         2 006045   200060 036100                    ADLQ    FLDS,,AUTO
         2 006046   200060 756100                    STQ     FLDS,,AUTO

     2859    14256    4               DAYS = DAYS + ((FLDS.YEAR / 400) * 3);

  14256  2 006047   000620 506007                    DIV     400,DL
         2 006050   000003 402007                    MPY     3,DL
         2 006051   200055 036100                    ADLQ    DAYS,,AUTO
         2 006052   200055 756100                    STQ     DAYS,,AUTO

     2860    14257                    /* ...plus non-leap centuries up to first leap century. */
     2861    14258    4               DAYS = DAYS + (MOD( FLDS.YEAR, 400 ) / 100);

  14258  2 006053   200060 236100                    LDQ     FLDS,,AUTO
         2 006054   000620 506007                    DIV     400,DL
         2 006055   000044 733000                    LRS     36
         2 006056   000144 506007                    DIV     100,DL
         2 006057   200055 036100                    ADLQ    DAYS,,AUTO
         2 006060   200055 756100                    STQ     DAYS,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:372  
     2862    14259                    /* Calculate time before start of next day. */
     2863    14260    4               TICS = - %XUD#TICS_DAY + (FLDS.HOUR * %XUD#TICS_HOUR)

  14260  2 006061   200070 236100                    LDQ     FLDS+8,,AUTO
         2 006062   000074 402007                    MPY     60,DL
         2 006063   200071 036100                    ADLQ    FLDS+9,,AUTO
         2 006064   000074 402007                    MPY     60,DL
         2 006065   200072 036100                    ADLQ    FLDS+10,,AUTO
         2 006066   000144 402007                    MPY     100,DL
         2 006067   200073 036100                    ADLQ    FLDS+11,,AUTO
         2 006070   000010 136000 3                  SBLQ    8
         2 006071   200056 756100                    STQ     TICS,,AUTO

     2864    14261    4                 + (FLDS.MIN * %XUD#TICS_MIN) + (FLDS.SEC * %XUD#TICS_SEC)
     2865    14262    4                 + FLDS.TIC;
     2866    14263                    /* If day of week was entered, make sure it is correct. */
     2867    14264    4               IF FLDS.WKDAY > 0 AND MOD( - DAYS, 7 ) ~= 7 - FLDS.WKDAY

  14264  2 006072   200067 235100                    LDA     FLDS+7,,AUTO
         2 006073   006104 604400 2                  TMOZ    s:14269
         2 006074   200055 336100                    LCQ     DAYS,,AUTO
         2 006075   000007 506007                    DIV     7,DL
         2 006076   000007 236007                    LDQ     7,DL
         2 006077   200067 136100                    SBLQ    FLDS+7,,AUTO
         2 006100   200152 756100                    STQ     LIMIT+1,,AUTO
         2 006101   000044 733000                    LRS     36
         2 006102   200152 116100                    CMPQ    LIMIT+1,,AUTO
         2 006103   006134 601000 2                  TNZ     E_BAD_DATE_W

     2868    14265    4                 THEN GOTO E_BAD_DATE_W;
     2869    14266    4           END;

     2870    14267    3       END;

     2871    14268
     2872    14269    2       IF ERR

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:373  
  14269  2 006104   200103 235100                    LDA     ERR,,AUTO
         2 006105   006152 601000 2                  TNZ     ALT

     2873    14270    2         THEN GOTO ALT;
     2874    14271    2       RETURN;

  14271  2 006106   200136 221300                    LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 006107   000001 702211                    TSX2  ! 1,X1

     2875    14272
     2876    14273    2   E_BAD_DATE:
     2877    14274    2       IF TIMESPAN

  14274  2 006110   200102 234100       E_BAD_DATE   SZN     TIMESPAN,,AUTO
         2 006111   006115 605000 2                  TPL     s:14276

     2878    14275    2         THEN ERR = E_XUD#BAD_TIME;

  14275  2 006112   000062 236000 1                  LDQ     E_XUD#BAD_TIME
         2 006113   200103 756100                    STQ     ERR,,AUTO
         2 006114   006117 710000 2                  TRA     s:14277

     2879    14276    2         ELSE ERR = E_XUD#BAD_DATE;

  14276  2 006115   000050 236000 1                  LDQ     E_XUD#BAD_DATE
         2 006116   200103 756100                    STQ     ERR,,AUTO

     2880    14277    2       GOTO ALT;

  14277  2 006117   006152 710000 2                  TRA     ALT

     2881    14278    2   E_BAD_DATE_Y:
     2882    14279    2       ERR = E_XUD#BAD_DATE_Y;

  14279  2 006120   000051 236000 1     E_BAD_DATE_Y LDQ     E_XUD#BAD_DATE_Y
         2 006121   200103 756100                    STQ     ERR,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:374  
     2883    14280    2       GOTO ALT;

  14280  2 006122   006152 710000 2                  TRA     ALT

     2884    14281    2   E_BAD_DATE_MO:
     2885    14282    2       ERR = E_XUD#BAD_DATE_MO;

  14282  2 006123   000052 236000 1     E_BAD_DATE_* LDQ     E_XUD#BAD_DATE_MO
         2 006124   200103 756100                    STQ     ERR,,AUTO

     2886    14283    2       GOTO ALT;

  14283  2 006125   006152 710000 2                  TRA     ALT

     2887    14284    2   E_BAD_DATE_D:
     2888    14285    2       ERR = E_XUD#BAD_DATE_D;

  14285  2 006126   000053 236000 1     E_BAD_DATE_D LDQ     E_XUD#BAD_DATE_D
         2 006127   200103 756100                    STQ     ERR,,AUTO

     2889    14286    2       GOTO ALT;

  14286  2 006130   006152 710000 2                  TRA     ALT

     2890    14287    2   E_BAD_DATE_Q:
     2891    14288    2       ERR = E_XUD#BAD_DATE_Q;

  14288  2 006131   000055 236000 1     E_BAD_DATE_Q LDQ     E_XUD#BAD_DATE_Q
         2 006132   200103 756100                    STQ     ERR,,AUTO

     2892    14289    2       GOTO ALT;

  14289  2 006133   006152 710000 2                  TRA     ALT

     2893    14290    2   E_BAD_DATE_W:
     2894    14291    2       ERR = E_XUD#BAD_DATE_W;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:375  
  14291  2 006134   000054 236000 1     E_BAD_DATE_W LDQ     E_XUD#BAD_DATE_W
         2 006135   200103 756100                    STQ     ERR,,AUTO

     2895    14292    2       GOTO ALT;

  14292  2 006136   006152 710000 2                  TRA     ALT

     2896    14293    2   E_BAD_DATE_H:
     2897    14294    2       ERR = E_XUD#BAD_DATE_H;

  14294  2 006137   000056 236000 1     E_BAD_DATE_H LDQ     E_XUD#BAD_DATE_H
         2 006140   200103 756100                    STQ     ERR,,AUTO

     2898    14295    2       GOTO ALT;

  14295  2 006141   006152 710000 2                  TRA     ALT

     2899    14296    2   E_BAD_DATE_MI:
     2900    14297    2       ERR = E_XUD#BAD_DATE_MI;

  14297  2 006142   000057 236000 1     E_BAD_DATE_* LDQ     E_XUD#BAD_DATE_MI
         2 006143   200103 756100                    STQ     ERR,,AUTO

     2901    14298    2       GOTO ALT;

  14298  2 006144   006152 710000 2                  TRA     ALT

     2902    14299    2   E_BAD_DATE_S:
     2903    14300    2       ERR = E_XUD#BAD_DATE_S;

  14300  2 006145   000060 236000 1     E_BAD_DATE_S LDQ     E_XUD#BAD_DATE_S
         2 006146   200103 756100                    STQ     ERR,,AUTO

     2904    14301    2       GOTO ALT;

  14301  2 006147   006152 710000 2                  TRA     ALT

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:376  
     2905    14302    2   E_BAD_DATE_T:
     2906    14303    2       ERR = E_XUD#BAD_DATE_T;

  14303  2 006150   000061 236000 1     E_BAD_DATE_T LDQ     E_XUD#BAD_DATE_T
         2 006151   200103 756100                    STQ     ERR,,AUTO

     2907    14304    2   ALT:ALTRETURN;

  14304  2 006152   200136 221300       ALT          LDX1  ! SYSTEM_YEAR+2,,AUTO
         2 006153   000000 702211                    TSX2  ! 0,X1

     2908    14305
     2909    14306        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:377  
     2910    14307    2   CVT_XX: PROC ALTRET;

  14307  2 006154   200144 741300       CVT_XX       STX1  ! DAYS_IN_25THS+2,,AUTO
         2 006155   006157 710000 2                  TRA     s:14334

     2911    14308
     2912    14309        /******************************************************************************/
     2913    14310        /*I*
     2914    14311        NAME:   CVT_XX
     2915    14312        PURPOSE:
     2916    14313                Convert a subfield from character to binary.
     2917    14314        CALL:
     2918    14315                CALL CVT_YY ALTRET( error );
     2919    14316                CALL CVT_MO ALTRET( error );
     2920    14317                CALL CVT_DD ALTRET( error );
     2921    14318                CALL CVT_MMM ALTRET( error );
     2922    14319                CALL CVT_WWW ALTRET( error );
     2923    14320                CALL CVT_SWITCH ALTRET( null-switch );
     2924    14321                CALL CVT_HH ALTRET( error );
     2925    14322                CALL CVT_MI ALTRET( error );
     2926    14323                CALL CVT_SS ALTRET( error );
     2927    14324                CALL CVT_TT ALTRET( error );
     2928    14325        DESCRIPTION:
     2929    14326                The logic for conversion of some picture codes is in subroutines
     2930    14327                so that is can be used by default parsing logic as well as for
     2931    14328                pictures specified by the caller.
     2932    14329        */
     2933    14330        /******************************************************************************/
     2934    14331
     2935    14332    3   CVT_YY: ENTRY ALTRET;

  14332  2 006156   200144 741300       CVT_YY       STX1  ! DAYS_IN_25THS+2,,AUTO

     2936    14333
     2937    14334    3       CALL CVT_TO_NUM( FLDS.YEAR, 2 ) ALTRET( ALT );

  14334  2 006157   000023 236000 3                  LDQ     19
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:378  
         2 006160   200150 756100                    STQ     @NUM+1,,AUTO
         2 006161   200060 630500                    EPPR0   FLDS,,AUTO
         2 006162   200147 450500                    STP0    DAYS_IN_25THS+5,,AUTO
         2 006163   006600 701000 2                  TSX1    CVT_TO_NUM
         2 006164   006225 702000 2                  TSX2    ALT

     2938    14335    3       IF LEN ~= 2

  14335  2 006165   200100 235100                    LDA     LEN,,AUTO
         2 006166   000002 115007                    CMPA    2,DL
         2 006167   006225 601000 2                  TNZ     ALT

     2939    14336    3         THEN GOTO ALT;
     2940    14337    3       IF XUD_PARAM.ASSUME_UTS AND FLDS.YEAR <= 20

  14337  2 006170   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 006171   000001 236100                    LDQ     1,,PR0
         2 006172   040000 316003                    CANQ    16384,DU
         2 006173   006202 600000 2                  TZE     s:14339
         2 006174   200060 235100                    LDA     FLDS,,AUTO
         2 006175   000024 115007                    CMPA    20,DL
         2 006176   006202 605400 2                  TPNZ    s:14339

     2941    14338    3         THEN FLDS.YEAR = FLDS.YEAR + 2000;

  14338  2 006177   003720 236007                    LDQ     2000,DL
         2 006200   200060 056100                    ASQ     FLDS,,AUTO
         2 006201   006221 710000 2                  TRA     s:14346

     2942    14339    3       ELSE IF XUD_PARAM.ASSUME_UTS AND FLDS.YEAR >= 78

  14339  2 006202   040000 316003                    CANQ    16384,DU
         2 006203   006212 600000 2                  TZE     s:14342
         2 006204   200060 235100                    LDA     FLDS,,AUTO
         2 006205   000116 115007                    CMPA    78,DL
         2 006206   006212 604000 2                  TMI     s:14342

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:379  
     2943    14340    3         THEN FLDS.YEAR = FLDS.YEAR + 1900;

  14340  2 006207   003554 236007                    LDQ     1900,DL
         2 006210   200060 056100                    ASQ     FLDS,,AUTO
         2 006211   006221 710000 2                  TRA     s:14346

     2944    14341    4       ELSE DO;

     2945    14342    4           CALL GET_CURRENT_YEAR;

  14342  2 006212   006674 701000 2                  TSX1    GET_CURRENT_YEAR
         2 006213   000000 011000                    NOP     0

     2946    14343    4           FLDS.YEAR = FLDS.YEAR + (SYSTEM_YEAR / 100 * 100);

  14343  2 006214   200134 236100                    LDQ     SYSTEM_YEAR,,AUTO
         2 006215   000144 506007                    DIV     100,DL
         2 006216   000144 402007                    MPY     100,DL
         2 006217   200060 036100                    ADLQ    FLDS,,AUTO
         2 006220   200060 756100                    STQ     FLDS,,AUTO

     2947    14344    4       END;

     2948    14345
     2949    14346    3       LEN = 2;

  14346  2 006221   000002 235007                    LDA     2,DL
         2 006222   200100 755100                    STA     LEN,,AUTO

     2950    14347
     2951    14348    3   RET:RETURN;

  14348  2 006223   200144 221300       RET          LDX1  ! DAYS_IN_25THS+2,,AUTO
         2 006224   000001 702211                    TSX2  ! 1,X1

     2952    14349    3   ALT:ALTRETURN;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:380  
  14349  2 006225   200144 221300       ALT          LDX1  ! DAYS_IN_25THS+2,,AUTO
         2 006226   000000 702211                    TSX2  ! 0,X1

     2953    14350
     2954    14351
     2955    14352    3   CVT_MO: ENTRY ALTRET;

  14352  2 006227   200144 741300       CVT_MO       STX1  ! DAYS_IN_25THS+2,,AUTO

     2956    14353
     2957    14354    3       CALL CVT_TO_NUM( FLDS.MON, 2 ) ALTRET( ALT );

  14354  2 006230   000023 236000 3                  LDQ     19
         2 006231   200150 756100                    STQ     @NUM+1,,AUTO
         2 006232   200061 630500                    EPPR0   FLDS+1,,AUTO
         2 006233   200147 450500                    STP0    DAYS_IN_25THS+5,,AUTO
         2 006234   006600 701000 2                  TSX1    CVT_TO_NUM
         2 006235   006225 702000 2                  TSX2    ALT

     2958    14355    3       IF FLDS.MON > 12 OR FLDS.MON < 1

  14355  2 006236   200061 235100                    LDA     FLDS+1,,AUTO
         2 006237   000014 115007                    CMPA    12,DL
         2 006240   006225 605400 2                  TPNZ    ALT
         2 006241   000000 115003                    CMPA    0,DU
         2 006242   006225 604400 2                  TMOZ    ALT

     2959    14356    3         THEN GOTO ALT;
     2960    14357    3       GOTO RET;

  14357  2 006243   006223 710000 2                  TRA     RET

     2961    14358
     2962    14359
     2963    14360    3   CVT_DD: ENTRY ALTRET;

  14360  2 006244   200144 741300       CVT_DD       STX1  ! DAYS_IN_25THS+2,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:381  

     2964    14361
     2965    14362    3       CALL CVT_TO_NUM( FLDS.DAY, 2 ) ALTRET( ALT );

  14362  2 006245   000023 236000 3                  LDQ     19
         2 006246   200150 756100                    STQ     @NUM+1,,AUTO
         2 006247   200062 630500                    EPPR0   FLDS+2,,AUTO
         2 006250   200147 450500                    STP0    DAYS_IN_25THS+5,,AUTO
         2 006251   006600 701000 2                  TSX1    CVT_TO_NUM
         2 006252   006225 702000 2                  TSX2    ALT

     2966    14363    3       IF FLDS.DAY = 0

  14363  2 006253   200062 235100                    LDA     FLDS+2,,AUTO
         2 006254   006225 600000 2                  TZE     ALT

     2967    14364    3         THEN GOTO ALT;
     2968    14365    3       GOTO RET;

  14365  2 006255   006223 710000 2                  TRA     RET

     2969    14366
     2970    14367
     2971    14368    3   CVT_MMM: ENTRY ALTRET;

  14368  2 006256   200144 741300       CVT_MMM      STX1  ! DAYS_IN_25THS+2,,AUTO

     2972    14369
     2973    14370    3       CALL SEARCH( LEN, JUNK, B$SR_NON_ALPHA, SUBSTR( TEMP_CHARS, J ));

  14370  2 006257   200075 720100                    LXL0    J,,AUTO
         2 006260   777677 620010                    EAX0    -65,X0
         2 006261   777777 660003                    ERX0    -1,DU
         2 006262   000000 470400 xsym               LDP0    B$SR_NON_ALPHA$
         2 006263   200075 235100                    LDA     J,,AUTO
         2 006264   000000 164545                    TCT
         2 006265   200012 000010                    ADSC9   TEMP_CHARS,A,AUTO        cn=0,n=*X0
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:382  
         2 006266   000000 000100                    ARG     0,,PR0
         2 006267   200100 000100                    ARG     LEN,,AUTO
         2 006270   200100 236100                    LDQ     LEN,,AUTO
         2 006271   000044 737000                    LLS     36
         2 006272   000033 771000                    ARL     27
         2 006273   200077 755100                    STA     JUNK,,AUTO
         2 006274   200100 551140                    STBA    LEN,'40'O,AUTO

     2974    14371    3       IF LEN = 0

  14371  2 006275   200100 236100                    LDQ     LEN,,AUTO
         2 006276   006225 600000 2                  TZE     ALT

     2975    14372    3         THEN GOTO ALT;
     2976    14373    4       DO FLDS.MON = 0 TO 11;

  14373  2 006277   200061 450100                    STZ     FLDS+1,,AUTO

     2977    14374    4           IF SUBSTR( TEMP_CHARS, J, LEN ) =

  14374  2 006300   200061 720100                    LXL0    FLDS+1,,AUTO
         2 006301   000135 470410 1                  LDP0    MONTH$,X0
         2 006302   000100 101500                    MRL     fill='000'O
         2 006303   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 006304   200152 000002                    ADSC9   LIMIT+1,,AUTO            cn=0,n=2
         2 006305   200152 221100                    LDX1    LIMIT+1,,AUTO
         2 006306   200100 722100                    LXL2    LEN,,AUTO
         2 006307   200075 235100                    LDA     J,,AUTO
         2 006310   040140 106545                    CMPC    fill='040'O
         2 006311   200012 000012                    ADSC9   TEMP_CHARS,A,AUTO        cn=0,n=*X2
         2 006312   000000 200012                    ADSC9   0,,PR0                   cn=1,n=*X2
         2 006313   006322 601000 2                  TNZ     s:14382

     2978    14375    4             SUBSTR( MONTH$( FLDS.MON )-> TEXTC.T, 0, LEN )
     2979    14376    5           THEN DO;

     2980    14377    5               IF MONTH_SIZE( FLDS.MON ) > LEN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:383  

  14377  2 006314   000177 236010 1                  LDQ     MONTH_SIZE,X0
         2 006315   006225 604000 2                  TMI     ALT
         2 006316   200100 116100                    CMPQ    LEN,,AUTO
         2 006317   006225 605400 2                  TPNZ    ALT

     2981    14378    5                 THEN GOTO ALT;
     2982    14379    5               FLDS.MON = FLDS.MON + 1;

  14379  2 006320   200061 054100                    AOS     FLDS+1,,AUTO

     2983    14380    5               GOTO RET;   /** NORMAL RETURN **/

  14380  2 006321   006223 710000 2                  TRA     RET

     2984    14381    5           END;
     2985    14382    4       END/*TO*/;

  14382  2 006322   200061 054100                    AOS     FLDS+1,,AUTO
         2 006323   200061 236100                    LDQ     FLDS+1,,AUTO
         2 006324   000013 116007                    CMPQ    11,DL
         2 006325   006300 604400 2                  TMOZ    s:14374

     2986    14383    3       GOTO ALT;

  14383  2 006326   006225 710000 2                  TRA     ALT

     2987    14384
     2988    14385
     2989    14386    3   CVT_WWW: ENTRY ALTRET;

  14386  2 006327   200144 741300       CVT_WWW      STX1  ! DAYS_IN_25THS+2,,AUTO

     2990    14387
     2991    14388    3       CALL SEARCH( LEN, JUNK, B$SR_NON_ALPHA, SUBSTR( TEMP_CHARS, J ));

  14388  2 006330   200075 720100                    LXL0    J,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:384  
         2 006331   777677 620010                    EAX0    -65,X0
         2 006332   777777 660003                    ERX0    -1,DU
         2 006333   000000 470400 xsym               LDP0    B$SR_NON_ALPHA$
         2 006334   200075 235100                    LDA     J,,AUTO
         2 006335   000000 164545                    TCT
         2 006336   200012 000010                    ADSC9   TEMP_CHARS,A,AUTO        cn=0,n=*X0
         2 006337   000000 000100                    ARG     0,,PR0
         2 006340   200100 000100                    ARG     LEN,,AUTO
         2 006341   200100 236100                    LDQ     LEN,,AUTO
         2 006342   000044 737000                    LLS     36
         2 006343   000033 771000                    ARL     27
         2 006344   200077 755100                    STA     JUNK,,AUTO
         2 006345   200100 551140                    STBA    LEN,'40'O,AUTO

     2992    14389    3       IF LEN = 0

  14389  2 006346   200100 236100                    LDQ     LEN,,AUTO
         2 006347   006225 600000 2                  TZE     ALT

     2993    14390    3         THEN GOTO ALT;
     2994    14391    4       DO FLDS.WKDAY = 0 TO 6;

  14391  2 006350   200067 450100                    STZ     FLDS+7,,AUTO

     2995    14392    4           IF SUBSTR( TEMP_CHARS, J, LEN ) =

  14392  2 006351   200067 720100                    LXL0    FLDS+7,,AUTO
         2 006352   000213 470410 1                  LDP0    WEEKDAY$,X0
         2 006353   000100 101500                    MRL     fill='000'O
         2 006354   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 006355   200152 000002                    ADSC9   LIMIT+1,,AUTO            cn=0,n=2
         2 006356   200152 221100                    LDX1    LIMIT+1,,AUTO
         2 006357   200100 722100                    LXL2    LEN,,AUTO
         2 006360   200075 235100                    LDA     J,,AUTO
         2 006361   040140 106545                    CMPC    fill='040'O
         2 006362   200012 000012                    ADSC9   TEMP_CHARS,A,AUTO        cn=0,n=*X2
         2 006363   000000 200012                    ADSC9   0,,PR0                   cn=1,n=*X2
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:385  
         2 006364   006375 601000 2                  TNZ     s:14400

     2996    14393    4             SUBSTR( WEEKDAY$( FLDS.WKDAY )-> TEXTC.T, 0, LEN )
     2997    14394    5           THEN DO;

     2998    14395    5               IF MOD( FLDS.WKDAY + 1, 2 ) + 1 > LEN

  14395  2 006365   200067 236100                    LDQ     FLDS+7,,AUTO
         2 006366   000001 036007                    ADLQ    1,DL
         2 006367   000002 506007                    DIV     2,DL
         2 006370   000044 733000                    LRS     36
         2 006371   200100 116100                    CMPQ    LEN,,AUTO
         2 006372   006225 605000 2                  TPL     ALT

     2999    14396    5                 THEN GOTO ALT;
     3000    14397    5               FLDS.WKDAY = FLDS.WKDAY + 1;

  14397  2 006373   200067 054100                    AOS     FLDS+7,,AUTO

     3001    14398    5               GOTO RET;   /** NORMAL RETURN **/

  14398  2 006374   006223 710000 2                  TRA     RET

     3002    14399    5           END;
     3003    14400    4       END/*TO*/;

  14400  2 006375   200067 054100                    AOS     FLDS+7,,AUTO
         2 006376   200067 236100                    LDQ     FLDS+7,,AUTO
         2 006377   000006 116007                    CMPQ    6,DL
         2 006400   006351 604400 2                  TMOZ    s:14392

     3004    14401    3       GOTO ALT;

  14401  2 006401   006225 710000 2                  TRA     ALT

     3005    14402
     3006    14403
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:386  
     3007    14404    3   CVT_SWITCH: ENTRY ALTRET;

  14404  2 006402   200144 741300       CVT_SWITCH   STX1  ! DAYS_IN_25THS+2,,AUTO

     3008    14405
     3009    14406    3       IF J >= CHAR_SIZE

  14406  2 006403   200075 236100                    LDQ     J,,AUTO
         2 006404   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 006405   006225 605000 2                  TPL     ALT

     3010    14407    3         THEN GOTO ALT;
     3011    14408    3       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));

  14408  2 006406   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 006407   200075 136100                    SBLQ    J,,AUTO
         2 006410   000000 470400 xsym               LDP0    B$SR_NON_BLANK$
         2 006411   200011 471500                    LDP1    CHARS$,,AUTO
         2 006412   000000 620006                    EAX0    0,QL
         2 006413   200075 235100                    LDA     J,,AUTO
         2 006414   000000 164545                    TCT
         2 006415   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         2 006416   000000 000100                    ARG     0,,PR0
         2 006417   200100 000100                    ARG     LEN,,AUTO
         2 006420   200100 236100                    LDQ     LEN,,AUTO
         2 006421   000044 737000                    LLS     36
         2 006422   000033 771000                    ARL     27
         2 006423   200077 755100                    STA     JUNK,,AUTO
         2 006424   200100 551140                    STBA    LEN,'40'O,AUTO

     3012    14409    3       IF J+LEN < CHAR_SIZE

  14409  2 006425   200075 236100                    LDQ     J,,AUTO
         2 006426   200100 036100                    ADLQ    LEN,,AUTO
         2 006427   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 006430   006440 605000 2                  TPL     s:14412

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:387  
     3013    14410    3       THEN IF SUBSTR( CHARS, J+LEN, 1 ) = ','

  14410  2 006431   200075 236100                    LDQ     J,,AUTO
         2 006432   200100 036100                    ADLQ    LEN,,AUTO
         2 006433   040000 106506                    CMPC    fill='040'O
         2 006434   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1
         2 006435   000025 000001 3                  ADSC9   21                       cn=0,n=1
         2 006436   006440 601000 2                  TNZ     s:14412

     3014    14411    3         THEN LEN = LEN + 1;

  14411  2 006437   200100 054100                    AOS     LEN,,AUTO

     3015    14412    3       IF LEN = 0

  14412  2 006440   200100 236100                    LDQ     LEN,,AUTO
         2 006441   006225 600000 2                  TZE     ALT

     3016    14413    3         THEN GOTO ALT;
     3017    14414    3       IF J+LEN < CHAR_SIZE

  14414  2 006442   200075 036100                    ADLQ    J,,AUTO
         2 006443   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 006444   006471 605000 2                  TPL     s:14417

     3018    14415    3       THEN
     3019    14416    3           CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ), LEN );

  14416  2 006445   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 006446   200075 136100                    SBLQ    J,,AUTO
         2 006447   200152 756100                    STQ     LIMIT+1,,AUTO
         2 006450   200100 136100                    SBLQ    LEN,,AUTO
         2 006451   200153 756100                    STQ     LIMIT+2,,AUTO
         2 006452   200100 236100                    LDQ     LEN,,AUTO
         2 006453   200075 036100                    ADLQ    J,,AUTO
         2 006454   200154 756100                    STQ     LIMIT+3,,AUTO
         2 006455   200100 236100                    LDQ     LEN,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:388  
         2 006456   200153 720100                    LXL0    LIMIT+2,,AUTO
         2 006457   200154 235100                    LDA     LIMIT+3,,AUTO
         2 006460   000000 164545                    TCT
         2 006461   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         2 006462   000000 000100                    ARG     0,,PR0
         2 006463   200100 000100                    ARG     LEN,,AUTO
         2 006464   200100 235100                    LDA     LEN,,AUTO
         2 006465   000033 771000                    ARL     27
         2 006466   200077 755100                    STA     JUNK,,AUTO
         2 006467   200100 551140                    STBA    LEN,'40'O,AUTO
         2 006470   200100 056100                    ASQ     LEN,,AUTO

     3020    14417    3       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ), LEN );

  14417  2 006471   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 006472   200075 136100                    SBLQ    J,,AUTO
         2 006473   200152 756100                    STQ     LIMIT+1,,AUTO
         2 006474   200100 136100                    SBLQ    LEN,,AUTO
         2 006475   200153 756100                    STQ     LIMIT+2,,AUTO
         2 006476   200100 236100                    LDQ     LEN,,AUTO
         2 006477   200075 036100                    ADLQ    J,,AUTO
         2 006500   200154 756100                    STQ     LIMIT+3,,AUTO
         2 006501   200100 236100                    LDQ     LEN,,AUTO
         2 006502   200153 720100                    LXL0    LIMIT+2,,AUTO
         2 006503   200154 235100                    LDA     LIMIT+3,,AUTO
         2 006504   000000 164545                    TCT
         2 006505   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         2 006506   000000 000100                    ARG     0,,PR0
         2 006507   200100 000100                    ARG     LEN,,AUTO
         2 006510   200100 235100                    LDA     LEN,,AUTO
         2 006511   000033 771000                    ARL     27
         2 006512   200077 755100                    STA     JUNK,,AUTO
         2 006513   200100 551140                    STBA    LEN,'40'O,AUTO
         2 006514   200100 056100                    ASQ     LEN,,AUTO

     3021    14418    3       J = J + LEN;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:389  
  14418  2 006515   200075 236100                    LDQ     J,,AUTO
         2 006516   200100 036100                    ADLQ    LEN,,AUTO
         2 006517   200075 756100                    STQ     J,,AUTO

     3022    14419    3       GOTO RET;

  14419  2 006520   006223 710000 2                  TRA     RET

     3023    14420
     3024    14421
     3025    14422    3   CVT_HH: ENTRY ALTRET;

  14422  2 006521   200144 741300       CVT_HH       STX1  ! DAYS_IN_25THS+2,,AUTO

     3026    14423
     3027    14424    3       CALL CVT_TO_NUM( FLDS.HOUR, 2 ) ALTRET( ALT );

  14424  2 006522   000023 236000 3                  LDQ     19
         2 006523   200150 756100                    STQ     @NUM+1,,AUTO
         2 006524   200070 630500                    EPPR0   FLDS+8,,AUTO
         2 006525   200147 450500                    STP0    DAYS_IN_25THS+5,,AUTO
         2 006526   006600 701000 2                  TSX1    CVT_TO_NUM
         2 006527   006225 702000 2                  TSX2    ALT

     3028    14425    3       IF FLDS.HOUR > %(XUD#HOURS_DAY - 1)

  14425  2 006530   200070 235100                    LDA     FLDS+8,,AUTO
         2 006531   000027 115007                    CMPA    23,DL
         2 006532   006225 605400 2                  TPNZ    ALT

     3029    14426    3         THEN GOTO ALT;
     3030    14427    3       GOTO RET;

  14427  2 006533   006223 710000 2                  TRA     RET

     3031    14428
     3032    14429
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:390  
     3033    14430    3   CVT_MI: ENTRY ALTRET;

  14430  2 006534   200144 741300       CVT_MI       STX1  ! DAYS_IN_25THS+2,,AUTO

     3034    14431
     3035    14432    3       CALL CVT_TO_NUM( FLDS.MIN, 2 ) ALTRET( ALT );

  14432  2 006535   000023 236000 3                  LDQ     19
         2 006536   200150 756100                    STQ     @NUM+1,,AUTO
         2 006537   200071 630500                    EPPR0   FLDS+9,,AUTO
         2 006540   200147 450500                    STP0    DAYS_IN_25THS+5,,AUTO
         2 006541   006600 701000 2                  TSX1    CVT_TO_NUM
         2 006542   006225 702000 2                  TSX2    ALT

     3036    14433    3       IF FLDS.MIN > %(XUD#MINS_HOUR - 1)

  14433  2 006543   200071 235100                    LDA     FLDS+9,,AUTO
         2 006544   000073 115007                    CMPA    59,DL
         2 006545   006225 605400 2                  TPNZ    ALT

     3037    14434    3         THEN GOTO ALT;
     3038    14435    3       GOTO RET;

  14435  2 006546   006223 710000 2                  TRA     RET

     3039    14436
     3040    14437
     3041    14438    3   CVT_SS: ENTRY ALTRET;

  14438  2 006547   200144 741300       CVT_SS       STX1  ! DAYS_IN_25THS+2,,AUTO

     3042    14439
     3043    14440    3       CALL CVT_TO_NUM( FLDS.SEC, 2 ) ALTRET( ALT );

  14440  2 006550   000023 236000 3                  LDQ     19
         2 006551   200150 756100                    STQ     @NUM+1,,AUTO
         2 006552   200072 630500                    EPPR0   FLDS+10,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:391  
         2 006553   200147 450500                    STP0    DAYS_IN_25THS+5,,AUTO
         2 006554   006600 701000 2                  TSX1    CVT_TO_NUM
         2 006555   006225 702000 2                  TSX2    ALT

     3044    14441    3       IF FLDS.SEC > %(XUD#SECS_MIN - 1)

  14441  2 006556   200072 235100                    LDA     FLDS+10,,AUTO
         2 006557   000073 115007                    CMPA    59,DL
         2 006560   006225 605400 2                  TPNZ    ALT

     3045    14442    3         THEN GOTO ALT;
     3046    14443    3       GOTO RET;

  14443  2 006561   006223 710000 2                  TRA     RET

     3047    14444
     3048    14445
     3049    14446    3   CVT_TT: ENTRY ALTRET;

  14446  2 006562   200144 741300       CVT_TT       STX1  ! DAYS_IN_25THS+2,,AUTO

     3050    14447
     3051    14448    3       CALL CVT_TO_NUM( FLDS.TIC, 2 ) ALTRET( ALT );

  14448  2 006563   000023 236000 3                  LDQ     19
         2 006564   200150 756100                    STQ     @NUM+1,,AUTO
         2 006565   200073 630500                    EPPR0   FLDS+11,,AUTO
         2 006566   200147 450500                    STP0    DAYS_IN_25THS+5,,AUTO
         2 006567   006600 701000 2                  TSX1    CVT_TO_NUM
         2 006570   006225 702000 2                  TSX2    ALT

     3052    14449    3       IF LEN = 1

  14449  2 006571   200100 235100                    LDA     LEN,,AUTO
         2 006572   000001 115007                    CMPA    1,DL
         2 006573   006577 601000 2                  TNZ     s:14451

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:392  
     3053    14450    3         THEN FLDS.TIC = FLDS.TIC * 10;

  14450  2 006574   200073 236100                    LDQ     FLDS+11,,AUTO
         2 006575   000012 402007                    MPY     10,DL
         2 006576   200073 756100                    STQ     FLDS+11,,AUTO

     3054    14451    3       GOTO RET;

  14451  2 006577   006223 710000 2                  TRA     RET

     3055    14452
     3056    14453    3   END CVT_XX;
     3057    14454        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:393  
     3058    14455        /******************************************************************************/
     3059    14456        /*I*
     3060    14457        NAME:   CVT_TO_NUM
     3061    14458        PURPOSE:
     3062    14459                Convert a numeric substring to binary.
     3063    14460        CALL:
     3064    14461                CALL CVT_TO_NUM( NUM, MAX ) ALTRET( not_a_number );
     3065    14462        PARAMETERS:
     3066    14463                NUM - Returns the converted number.
     3067    14464                MAX - The maximum number of digits.
     3068    14465        INPUT:
     3069    14466                CHARS - The string containing the number.
     3070    14467                J - The starting offset of the number.
     3071    14468        OUTPUT:
     3072    14469                LEN - The actual length of the number.
     3073    14470        INTERFACE:
     3074    14471                None.
     3075    14472        DESCRIPTION:
     3076    14473                This routine extracts a numeric substring from a character string
     3077    14474                and converts it to binary.
     3078    14475                The maximum substring length is provided.  The actual substring
     3079    14476                length is returned.  This will be less than the maximum if the string
     3080    14477                ends or a non-numeric character is found within the substring of
     3081    14478                maximum length.
     3082    14479                The alternate return is taken if the starting character is not a digit.
     3083    14480        */
     3084    14481        /******************************************************************************/
     3085    14482
     3086    14483    2   CVT_TO_NUM: PROC( NUM, MAX ) ALTRET;

  14483  2 006600   200146 741300       CVT_TO_NUM   STX1  ! DAYS_IN_25THS+4,,AUTO

     3087    14484
     3088    14485    3   DCL NUM SBIN PARAM;
     3089    14486    3   DCL MAX SBIN PARAM;
     3090    14487    3   DCL LIMIT SBIN;
     3091    14488
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:394  
     3092    14489    3       LIMIT = MAX;

  14489  2 006601   200150 470500                    LDP0    @MAX,,AUTO
         2 006602   000000 235100                    LDA     0,,PR0
         2 006603   200151 755100                    STA     LIMIT,,AUTO

  14489  2 006604                       COMMON       null
     3093    14490    3   COMMON: ;
     3094    14491    3       IF J >= CHAR_SIZE THEN ALTRETURN;

  14491  2 006604   200075 236100                    LDQ     J,,AUTO
         2 006605   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 006606   006611 604000 2                  TMI     s:14492

  14491  2 006607   200146 221300                    LDX1  ! DAYS_IN_25THS+4,,AUTO
         2 006610   000000 702211                    TSX2  ! 0,X1

     3095    14492    3       CALL SEARCH( LEN, JUNK, B$SR_NON_DEC,

  14492  2 006611   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 006612   200075 136100                    SBLQ    J,,AUTO
         2 006613   200151 116100                    CMPQ    LIMIT,,AUTO
         2 006614   006616 604400 2                  TMOZ    s:14492+5
         2 006615   200151 236100                    LDQ     LIMIT,,AUTO
         2 006616   000000 470400 xsym               LDP0    B$SR_NON_DEC$
         2 006617   200011 471500                    LDP1    CHARS$,,AUTO
         2 006620   000000 620006                    EAX0    0,QL
         2 006621   200075 235100                    LDA     J,,AUTO
         2 006622   000000 164545                    TCT
         2 006623   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         2 006624   000000 000100                    ARG     0,,PR0
         2 006625   200100 000100                    ARG     LEN,,AUTO
         2 006626   200100 236100                    LDQ     LEN,,AUTO
         2 006627   000044 737000                    LLS     36
         2 006630   000033 771000                    ARL     27
         2 006631   200077 755100                    STA     JUNK,,AUTO
         2 006632   200100 551140                    STBA    LEN,'40'O,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:395  

     3096    14493    3         SUBSTR( CHARS, J, MINIMUM( LIMIT, CHAR_SIZE - J )));
     3097    14494    3       IF LEN = 0 THEN ALTRETURN;

  14494  2 006633   200100 236100                    LDQ     LEN,,AUTO
         2 006634   006637 601000 2                  TNZ     s:14495

  14494  2 006635   200146 221300                    LDX1  ! DAYS_IN_25THS+4,,AUTO
         2 006636   000000 702211                    TSX2  ! 0,X1

     3098    14495    3       CALL CHARBIN( NUM, SUBSTR( CHARS, J, LEN ));

  14495  2 006637   200147 473500                    LDP3    @NUM,,AUTO
         2 006640   000000 620006                    EAX0    0,QL
         2 006641   200075 236100                    LDQ     J,,AUTO
         2 006642   000100 305546                    DTB
         2 006643   100000 030010                    NDSC9   0,Q,PR1                  cn=0,s=nosgn,sf=0,n=*X0
         2 006644   300000 000004                    NDSC9   0,,PR3                   cn=0,s=lsgnf,sf=0,n=4

     3099    14496    3       RETURN;

  14496  2 006645   200146 221300                    LDX1  ! DAYS_IN_25THS+4,,AUTO
         2 006646   000001 702211                    TSX2  ! 1,X1

     3100    14497
     3101    14498        /******************************************************************************/
     3102    14499        /*I*
     3103    14500        NAME:   CVT_1ST_NUM
     3104    14501        PURPOSE:
     3105    14502                Convert first timespan subfield to binary.
     3106    14503        CALL:
     3107    14504                CALL CVT_1ST_NUM( NUM ) ALTRET( not_a_number );
     3108    14505        DESCRIPTION:
     3109    14506                This routine is identical to CVT_FROM_NUM, except that the maximum
     3110    14507                size is taken from the next picture character, not a parameter.
     3111    14508        */
     3112    14509        /******************************************************************************/
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:396  
     3113    14510
     3114    14511    3   CVT_1ST_NUM: ENTRY( NUM ) ALTRET;

  14511  2 006647   200146 741300       CVT_1ST_NUM  STX1  ! DAYS_IN_25THS+4,,AUTO

     3115    14512
     3116    14513    3       IF I < PIC_SIZE - 1 AND SUBSTR( PICTURE.T, I+1, 1 ) < %XUD#BLANK

  14513  2 006650   200007 236100                    LDQ     PIC_SIZE,,AUTO
         2 006651   000001 136007                    SBLQ    1,DL
         2 006652   200074 116100                    CMPQ    I,,AUTO
         2 006653   006671 604400 2                  TMOZ    s:14519
         2 006654   200006 470500                    LDP0    PICTURE$,,AUTO
         2 006655   200074 235100                    LDA     I,,AUTO
         2 006656   040000 106505                    CMPC    fill='040'O
         2 006657   000000 400001                    ADSC9   0,A,PR0                  cn=2,n=1
         2 006660   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 006661   006671 603000 2                  TRC     s:14519

     3117    14514    4       THEN DO;

     3118    14515    4           LIMIT = ASCBIN( SUBSTR( PICTURE.T, I+1, 1 ));

  14515  2 006662   000100 101505                    MRL     fill='000'O
         2 006663   000000 400001                    ADSC9   0,A,PR0                  cn=2,n=1
         2 006664   200152 000004                    ADSC9   LIMIT+1,,AUTO            cn=0,n=4
         2 006665   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 006666   200151 756100                    STQ     LIMIT,,AUTO

     3119    14516    4           I = I + 1;

  14516  2 006667   200074 054100                    AOS     I,,AUTO

     3120    14517    4       END;

  14517  2 006670   006673 710000 2                  TRA     s:14520

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:397  
     3121    14518    3       ELSE
     3122    14519    3           LIMIT = 1;

  14519  2 006671   000001 235007                    LDA     1,DL
         2 006672   200151 755100                    STA     LIMIT,,AUTO

     3123    14520    3       GOTO COMMON;

  14520  2 006673   006604 710000 2                  TRA     COMMON

     3124    14521
     3125    14522    3   END CVT_TO_NUM;
     3126    14523        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:398  
     3127    14524        /******************************************************************************/
     3128    14525        /*I*
     3129    14526        NAME:   GET_CURRENT_YEAR
     3130    14527        PURPOSE:
     3131    14528                Get the current year from the operating system.
     3132    14529        CALL:
     3133    14530                CALL GET_CURRENT_YEAR;
     3134    14531        OUTPUT:
     3135    14532                SYSTEM_YEAR - Full system year (eg, 1984) in binary.
     3136    14533        INTERFACE:
     3137    14534                M$TIME
     3138    14535        DESCRIPTION:
     3139    14536                This routine is called when a character date contains a
     3140    14537                partial year (eg, 84) or no year.  It is called every time the
     3141    14538                year is needed in order to avoid any static data allocation.  (Static
     3142    14539                data must be avoided since this module is included in the ARES ASL).
     3143    14540        */
     3144    14541        /******************************************************************************/
     3145    14542
     3146    14543    2   GET_CURRENT_YEAR: PROC;

  14543  2 006674   200146 741300       GET_CURRENT* STX1  ! DAYS_IN_25THS+4,,AUTO

     3147    14544
     3148    14545    3       FPT@TIME = FPT_TIME_C;

  14545  2 006675   000100 100400                    MLR     fill='000'O
         2 006676   000000 000060 1                  ADSC9   FPT_TIME_C               cn=0,n=48
         2 006677   200116 000060                    ADSC9   FPT@TIME,,AUTO           cn=0,n=48

     3149    14546    3       FPT@TIME.DATE_ = VECTOR( SYSTEM_DATE );

  14546  2 006700   000026 235000 3                  LDA     22
         2 006701   200152 452500                    STP2    LIMIT+1,,AUTO
         2 006702   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 006703   000132 036003                    ADLQ    90,DU
         2 006704   200120 757100                    STAQ    FPT@TIME+2,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:399  

     3150    14547    3       CALL M$TIME( FPT@TIME );

  14547  2 006705   200116 630500                    EPPR0   FPT@TIME,,AUTO
         2 006706   020004 713400                    CLIMB   8196
         2 006707   402000 401760                    pmme    nvectors=5

     3151    14548    3       CALL CHARBIN( SYSTEM_YEAR, SYSTEM_DATE.YY );

  14548  2 006710   000100 305500                    DTB
         2 006711   200132 030002                    NDSC9   SYSTEM_DATE,,AUTO        cn=0,s=nosgn,sf=0,n=2
         2 006712   200134 000004                    NDSC9   SYSTEM_YEAR,,AUTO        cn=0,s=lsgnf,sf=0,n=4

     3152    14549    3       IF SYSTEM_YEAR >= 85

  14549  2 006713   200134 235100                    LDA     SYSTEM_YEAR,,AUTO
         2 006714   000125 115007                    CMPA    85,DL
         2 006715   006721 604000 2                  TMI     s:14551

     3153    14550    3         THEN SYSTEM_YEAR = SYSTEM_YEAR + 1900;

  14550  2 006716   003554 236007                    LDQ     1900,DL
         2 006717   200134 056100                    ASQ     SYSTEM_YEAR,,AUTO
         2 006720   006723 710000 2                  TRA     s:14552

     3154    14551    3         ELSE SYSTEM_YEAR = SYSTEM_YEAR + 2000;

  14551  2 006721   003720 236007                    LDQ     2000,DL
         2 006722   200134 056100                    ASQ     SYSTEM_YEAR,,AUTO

     3155    14552    3       RETURN;

  14552  2 006723   200146 221300                    LDX1  ! DAYS_IN_25THS+4,,AUTO
         2 006724   000001 702211                    TSX2  ! 1,X1

     3156    14553
     3157    14554    3   END GET_CURRENT_YEAR;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:400  
     3158    14555        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:401  
     3159    14556        /******************************************************************************/
     3160    14557        /*I*
     3161    14558        NAME:   CVT_FROM_DEFAULT
     3162    14559        PURPOSE:
     3163    14560                Convert date from string to binary using default conversion rules.
     3164    14561        CALL:
     3165    14562                CALL CVT_FROM_DEFAULT ALTRET( error );
     3166    14563        INPUT:
     3167    14564                CHARS - The string to be converted.
     3168    14565        OUTPUT:
     3169    14566                FLDS - Subfield values set as if string were parsed using a picture.
     3170    14567        INTERFACE:
     3171    14568                PARSE_DATE
     3172    14569                PARSE_TIME
     3173    14570                CVT_SWITCH
     3174    14571        DESCRIPTION:
     3175    14572                This routine parses a date and/or time according to default rules.
     3176    14573                It is used for conversion from character to internal form when
     3177    14574                no picture is provided.
     3178    14575
     3179    14576                Either the date or time may come first.  One or more blanks, or a
     3180    14577                comma followed by one or more blanks must separate them.  If the
     3181    14578                time is omitted, midnight is assumed.  If the date is omitted,
     3182    14579                today is assumed.
     3183    14580        */
     3184    14581        /******************************************************************************/
     3185    14582
     3186    14583    2   CVT_FROM_DEFAULT: PROC ALTRET;

  14583  2 006725   200140 741300       CVT_FROM_DE* STX1  ! OUT_FLAG,,AUTO

     3187    14584
     3188    14585    3   DCL COMMITTED BIT( 1 ); /* used to avoid issuing misleading diagnostics */
     3189    14586
     3190    14587    3       IF TIMESPAN

  14587  2 006726   200102 234100                    SZN     TIMESPAN,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:402  
         2 006727   006733 605000 2                  TPL     s:14591

     3191    14588    3       THEN
     3192    14589    3           CALL PARSE_SPAN ALTRET( ALT );

  14589  2 006730   007566 701000 2                  TSX1    PARSE_SPAN
         2 006731   006777 702000 2                  TSX2    ALT
         2 006732   006773 710000 2                  TRA     s:14620

     3193    14590    4       ELSE DO;

     3194    14591    4           COMMITTED = %XUD#NO;

  14591  2 006733   200141 450100                    STZ     COMMITTED,,AUTO

     3195    14592    4           J = 0;  /* index into character string */

  14592  2 006734   200075 450100                    STZ     J,,AUTO

     3196    14593    4           CALL PARSE_TIME

  14593  2 006735   007370 701000 2                  TSX1    PARSE_TIME
         2 006736   006747 702000 2                  TSX2    s:14602

     3197    14594    5           WHENRETURN DO;

     3198    14595    5               IF J < CHAR_SIZE

  14595  2 006737   200075 236100                    LDQ     J,,AUTO
         2 006740   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 006741   006746 605000 2                  TPL     s:14600

     3199    14596    6               THEN DO;

     3200    14597    6                   CALL CVT_SWITCH ALTRET( E_BAD_DATE );

  14597  2 006742   006402 701000 2                  TSX1    CVT_SWITCH
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:403  
         2 006743   006775 702000 2                  TSX2    E_BAD_DATE

     3201    14598    6                   CALL PARSE_DATE ALTRET( ALT );

  14598  2 006744   007001 701000 2                  TSX1    PARSE_DATE
         2 006745   006777 702000 2                  TSX2    ALT

     3202    14599    6               END;

     3203    14600    5           END/*WHEN*/;

  14600  2 006746   006773 710000 2                  TRA     s:14620

     3204    14601    5           WHENALTRETURN DO;

     3205    14602    5               IF COMMITTED

  14602  2 006747   200141 234100                    SZN     COMMITTED,,AUTO
         2 006750   006777 604000 2                  TMI     ALT

     3206    14603    5                 THEN GOTO ALT;
     3207    14604    5               ERR = '0'B;

  14604  2 006751   200103 450100                    STZ     ERR,,AUTO

     3208    14605    5               FLDS = '0'B;

  14605  2 006752   000100 100400                    MLR     fill='000'O
         2 006753   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         2 006754   200060 000060                    ADSC9   FLDS,,AUTO               cn=0,n=48

     3209    14606    5               J = 0;

  14606  2 006755   200075 450100                    STZ     J,,AUTO

     3210    14607    5               CALL PARSE_DATE

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:404  
  14607  2 006756   007001 701000 2                  TSX1    PARSE_DATE
         2 006757   006761 702000 2                  TSX2    s:14609
         2 006760   006764 710000 2                  TRA     s:14613

     3211    14608    6               WHENALTRETURN DO;

     3212    14609    6                   IF NOT COMMITTED

  14609  2 006761   200141 234100                    SZN     COMMITTED,,AUTO
         2 006762   006775 605000 2                  TPL     E_BAD_DATE

     3213    14610    6                     THEN GOTO E_BAD_DATE;
     3214    14611    6                   GOTO ALT;

  14611  2 006763   006777 710000 2                  TRA     ALT

     3215    14612    6               END/*WHENALT*/;
     3216    14613    5               IF J < CHAR_SIZE

  14613  2 006764   200075 236100                    LDQ     J,,AUTO
         2 006765   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 006766   006773 605000 2                  TPL     s:14620

     3217    14614    6               THEN DO;

     3218    14615    6                   CALL CVT_SWITCH ALTRET( E_BAD_DATE );

  14615  2 006767   006402 701000 2                  TSX1    CVT_SWITCH
         2 006770   006775 702000 2                  TSX2    E_BAD_DATE

     3219    14616    6                   CALL PARSE_TIME ALTRET( ALT );

  14616  2 006771   007370 701000 2                  TSX1    PARSE_TIME
         2 006772   006777 702000 2                  TSX2    ALT

     3220    14617    6               END;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:405  
     3221    14618    5           END/*WHENALT*/;

     3222    14619    4       END;

     3223    14620    3       RETURN;

  14620  2 006773   200140 221300                    LDX1  ! OUT_FLAG,,AUTO
         2 006774   000001 702211                    TSX2  ! 1,X1

     3224    14621
     3225    14622    3   E_BAD_DATE:
     3226    14623    3       ERR = E_XUD#BAD_DATE;

  14623  2 006775   000050 236000 1     E_BAD_DATE   LDQ     E_XUD#BAD_DATE
         2 006776   200103 756100                    STQ     ERR,,AUTO

     3227    14624    3   ALT:ALTRETURN;

  14624  2 006777   200140 221300       ALT          LDX1  ! OUT_FLAG,,AUTO
         2 007000   000000 702211                    TSX2  ! 0,X1

     3228    14625
     3229    14626        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:406  
     3230    14627        /******************************************************************************/
     3231    14628        /*I*
     3232    14629        NAME:   PARSE_DATE
     3233    14630        PURPOSE:
     3234    14631                Parse a date according to default rules.
     3235    14632        CALL:
     3236    14633                CALL PARSE_DATE ALTRET( error );
     3237    14634        INPUT:
     3238    14635                CHARS - The string to be converted.
     3239    14636                J - Starting offset into string.
     3240    14637        OUTPUT:
     3241    14638                FLDS - Subfield values set as if string were parsed using a picture.
     3242    14639                J - Offset to character following end of parsed date.
     3243    14640        INTERFACE:
     3244    14641                CVT_WWW
     3245    14642                CVT_MMM
     3246    14643                CVT_DD
     3247    14644                CVT_MO
     3248    14645                CVT_YY
     3249    14646                CVT_SWITCH
     3250    14647        DESCRIPTION:
     3251    14648                The default rules for parsing date/time strings accept the following
     3252    14649                date formats:
     3253    14650
     3254    14651                    yy-mm-dd
     3255    14652                    www
     3256    14653                    mm/dd/yyyy
     3257    14654                    mm/dd/yy        mm/dd
     3258    14655                    mmm dd, 'yy     mmm dd 'yy      mmm dd
     3259    14656                    dd mmm, 'yy     dd mmm 'yy      dd mmm
     3260    14657        */
     3261    14658        /******************************************************************************/
     3262    14659
     3263    14660    3   PARSE_DATE: PROC ALTRET;

  14660  2 007001   200142 741300       PARSE_DATE   STX1  ! UTS_IN_DAYS+1,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:407  
     3264    14661
     3265    14662            /*
     3266    14663              Try for MM/DD/YYYY or MM/DD/YY or MM/DD
     3267    14664            */
     3268    14665    4       CALL INDEX( I, '/', CHARS, J )

  14665  2 007002   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 007003   200075 136100                    SBLQ    J,,AUTO
         2 007004   200152 756100                    STQ     LIMIT+1,,AUTO
         2 007005   200075 236100                    LDQ     J,,AUTO
         2 007006   200011 470500                    LDP0    CHARS$,,AUTO
         2 007007   200152 720100                    LXL0    LIMIT+1,,AUTO
         2 007010   200075 235100                    LDA     J,,AUTO
         2 007011   000000 124545                    SCM     mask='000'O
         2 007012   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 007013   000027 000001 3                  ADSC9   23                       cn=0,n=1
         2 007014   200074 000100                    ARG     I,,AUTO
         2 007015   200074 056100                    ASQ     I,,AUTO
         2 007016   007072 606400 2                  TTN     s:14692

     3269    14666    5       WHENRETURN DO;

     3270    14667    5           COMMITTED = %XUD#YES;

  14667  2 007017   400000 236003                    LDQ     -131072,DU
         2 007020   200141 756100                    STQ     COMMITTED,,AUTO

     3271    14668    5           CALL CVT_MO ALTRET( E_BAD_DATE_MO );

  14668  2 007021   006227 701000 2                  TSX1    CVT_MO
         2 007022   007340 702000 2                  TSX2    E_BAD_DATE_MO

     3272    14669    5           J = J + LEN;

  14669  2 007023   200075 236100                    LDQ     J,,AUTO
         2 007024   200100 036100                    ADLQ    LEN,,AUTO
         2 007025   200075 756100                    STQ     J,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:408  

     3273    14670    5           IF J >= CHAR_SIZE

  14670  2 007026   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007027   007362 605000 2                  TPL     E_BAD_DATE

     3274    14671    5             THEN GOTO E_BAD_DATE;
     3275    14672    5           IF SUBSTR( CHARS, J, 1 ) ~= '/'

  14672  2 007030   200011 470500                    LDP0    CHARS$,,AUTO
         2 007031   040000 106506                    CMPC    fill='040'O
         2 007032   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007033   000027 000001 3                  ADSC9   23                       cn=0,n=1
         2 007034   007362 601000 2                  TNZ     E_BAD_DATE

     3276    14673    5             THEN GOTO E_BAD_DATE;
     3277    14674    5           J = J + 1;

  14674  2 007035   200075 054100                    AOS     J,,AUTO

     3278    14675    5           CALL CVT_DD ALTRET( E_BAD_DATE_D );

  14675  2 007036   006244 701000 2                  TSX1    CVT_DD
         2 007037   007343 702000 2                  TSX2    E_BAD_DATE_D

     3279    14676    5           J = J + LEN;

  14676  2 007040   200075 236100                    LDQ     J,,AUTO
         2 007041   200100 036100                    ADLQ    LEN,,AUTO
         2 007042   200075 756100                    STQ     J,,AUTO

     3280    14677    5           IF J >= CHAR_SIZE

  14677  2 007043   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007044   007366 605000 2                  TPL     RET

     3281    14678    5             THEN GOTO RET;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:409  
     3282    14679    5           IF SUBSTR( CHARS, J, 1 ) ~= '/'

  14679  2 007045   200011 470500                    LDP0    CHARS$,,AUTO
         2 007046   040000 106506                    CMPC    fill='040'O
         2 007047   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007050   000027 000001 3                  ADSC9   23                       cn=0,n=1
         2 007051   007366 601000 2                  TNZ     RET

     3283    14680    5             THEN GOTO RET;
     3284    14681    5           J = J + 1;

  14681  2 007052   200075 054100                    AOS     J,,AUTO

     3285    14682    5           CALL CVT_TO_NUM( FLDS.YEAR, 4 );

  14682  2 007053   000030 236000 3                  LDQ     24
         2 007054   200150 756100                    STQ     @MAX,,AUTO
         2 007055   200060 631500                    EPPR1   FLDS,,AUTO
         2 007056   200147 451500                    STP1    @NUM,,AUTO
         2 007057   006600 701000 2                  TSX1    CVT_TO_NUM
         2 007060   000000 011000                    NOP     0

     3286    14683    5           IF LEN < 4

  14683  2 007061   200100 235100                    LDA     LEN,,AUTO
         2 007062   000004 115007                    CMPA    4,DL
         2 007063   007066 605000 2                  TPL     s:14686

     3287    14684    5           THEN
     3288    14685    5               CALL CVT_YY ALTRET( E_BAD_DATE_Y );

  14685  2 007064   006156 701000 2                  TSX1    CVT_YY
         2 007065   007335 702000 2                  TSX2    E_BAD_DATE_Y

     3289    14686    5           J = J + LEN;

  14686  2 007066   200075 236100                    LDQ     J,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:410  
         2 007067   200100 036100                    ADLQ    LEN,,AUTO
         2 007070   200075 756100                    STQ     J,,AUTO

     3290    14687    5           GOTO RET;

  14687  2 007071   007366 710000 2                  TRA     RET

     3291    14688    5       END/*WHEN*/;
     3292    14689            /*
     3293    14690              Try for YY-MM-DD
     3294    14691            */
     3295    14692    4       CALL INDEX( I, '-', CHARS, J )

  14692  2 007072   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 007073   200075 136100                    SBLQ    J,,AUTO
         2 007074   200152 756100                    STQ     LIMIT+1,,AUTO
         2 007075   200075 236100                    LDQ     J,,AUTO
         2 007076   200011 470500                    LDP0    CHARS$,,AUTO
         2 007077   200152 720100                    LXL0    LIMIT+1,,AUTO
         2 007100   200075 235100                    LDA     J,,AUTO
         2 007101   000000 124545                    SCM     mask='000'O
         2 007102   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 007103   000007 000001 3                  ADSC9   7                        cn=0,n=1
         2 007104   200074 000100                    ARG     I,,AUTO
         2 007105   200074 056100                    ASQ     I,,AUTO
         2 007106   007151 606400 2                  TTN     s:14716

     3296    14693    5       WHENRETURN DO;

     3297    14694    5           COMMITTED = %XUD#YES;

  14694  2 007107   400000 236003                    LDQ     -131072,DU
         2 007110   200141 756100                    STQ     COMMITTED,,AUTO

     3298    14695    5           CALL CVT_YY ALTRET( E_BAD_DATE_Y );

  14695  2 007111   006156 701000 2                  TSX1    CVT_YY
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:411  
         2 007112   007335 702000 2                  TSX2    E_BAD_DATE_Y

     3299    14696    5           J = J + LEN;

  14696  2 007113   200075 236100                    LDQ     J,,AUTO
         2 007114   200100 036100                    ADLQ    LEN,,AUTO
         2 007115   200075 756100                    STQ     J,,AUTO

     3300    14697    5           IF J >= CHAR_SIZE

  14697  2 007116   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007117   007362 605000 2                  TPL     E_BAD_DATE

     3301    14698    5             THEN GOTO E_BAD_DATE;
     3302    14699    5           IF SUBSTR( CHARS, J, 1 ) ~= '-'

  14699  2 007120   200011 470500                    LDP0    CHARS$,,AUTO
         2 007121   040000 106506                    CMPC    fill='040'O
         2 007122   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007123   000007 000001 3                  ADSC9   7                        cn=0,n=1
         2 007124   007362 601000 2                  TNZ     E_BAD_DATE

     3303    14700    5             THEN GOTO E_BAD_DATE;
     3304    14701    5           J = J + 1;

  14701  2 007125   200075 054100                    AOS     J,,AUTO

     3305    14702    5           CALL CVT_MO ALTRET( E_BAD_DATE_MO );

  14702  2 007126   006227 701000 2                  TSX1    CVT_MO
         2 007127   007340 702000 2                  TSX2    E_BAD_DATE_MO

     3306    14703    5           J = J + LEN;

  14703  2 007130   200075 236100                    LDQ     J,,AUTO
         2 007131   200100 036100                    ADLQ    LEN,,AUTO
         2 007132   200075 756100                    STQ     J,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:412  

     3307    14704    5           IF J >= CHAR_SIZE

  14704  2 007133   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007134   007362 605000 2                  TPL     E_BAD_DATE

     3308    14705    5             THEN GOTO E_BAD_DATE;
     3309    14706    5           IF SUBSTR( CHARS, J, 1 ) ~= '-'

  14706  2 007135   200011 470500                    LDP0    CHARS$,,AUTO
         2 007136   040000 106506                    CMPC    fill='040'O
         2 007137   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007140   000007 000001 3                  ADSC9   7                        cn=0,n=1
         2 007141   007362 601000 2                  TNZ     E_BAD_DATE

     3310    14707    5             THEN GOTO E_BAD_DATE;
     3311    14708    5           J = J + 1;

  14708  2 007142   200075 054100                    AOS     J,,AUTO

     3312    14709    5           CALL CVT_DD ALTRET( E_BAD_DATE_D );

  14709  2 007143   006244 701000 2                  TSX1    CVT_DD
         2 007144   007343 702000 2                  TSX2    E_BAD_DATE_D

     3313    14710    5           J = J + LEN;

  14710  2 007145   200075 236100                    LDQ     J,,AUTO
         2 007146   200100 036100                    ADLQ    LEN,,AUTO
         2 007147   200075 756100                    STQ     J,,AUTO

     3314    14711    5           GOTO RET;

  14711  2 007150   007366 710000 2                  TRA     RET

     3315    14712    5       END/*WHEN*/;
     3316    14713            /*
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:413  
     3317    14714              Try for WWW
     3318    14715            */
     3319    14716    4       CALL CVT_WWW

  14716  2 007151   006327 701000 2                  TSX1    CVT_WWW
         2 007152   007161 702000 2                  TSX2    s:14722

     3320    14717    5       WHENRETURN DO;

     3321    14718    5           COMMITTED = %XUD#YES;

  14718  2 007153   400000 236003                    LDQ     -131072,DU
         2 007154   200141 756100                    STQ     COMMITTED,,AUTO

     3322    14719    5           J = J + LEN;

  14719  2 007155   200075 236100                    LDQ     J,,AUTO
         2 007156   200100 036100                    ADLQ    LEN,,AUTO
         2 007157   200075 756100                    STQ     J,,AUTO

     3323    14720    5           GOTO RET;

  14720  2 007160   007366 710000 2                  TRA     RET

     3324    14721    5       END/*WHEN*/;
     3325    14722    4       FLDS.WKDAY = 0;

  14722  2 007161   200067 450100                    STZ     FLDS+7,,AUTO

     3326    14723            /*
     3327    14724              Try for MMM DD, 'YY or MMM DD 'YY or MMM DD
     3328    14725            */
     3329    14726    4       CALL CVT_MMM

  14726  2 007162   006256 701000 2                  TSX1    CVT_MMM
         2 007163   007246 702000 2                  TSX2    s:14753

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:414  
     3330    14727    5       WHENRETURN DO;

     3331    14728    5           COMMITTED = %XUD#YES;

  14728  2 007164   400000 236003                    LDQ     -131072,DU
         2 007165   200141 756100                    STQ     COMMITTED,,AUTO

     3332    14729    5           J = J + LEN;

  14729  2 007166   200075 236100                    LDQ     J,,AUTO
         2 007167   200100 036100                    ADLQ    LEN,,AUTO
         2 007170   200075 756100                    STQ     J,,AUTO

     3333    14730    5           IF J >= CHAR_SIZE

  14730  2 007171   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007172   007362 605000 2                  TPL     E_BAD_DATE

     3334    14731    5             THEN GOTO E_BAD_DATE;
     3335    14732    5           CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));

  14732  2 007173   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 007174   200075 136100                    SBLQ    J,,AUTO
         2 007175   000000 470400 xsym               LDP0    B$SR_NON_BLANK$
         2 007176   200011 471500                    LDP1    CHARS$,,AUTO
         2 007177   000000 620006                    EAX0    0,QL
         2 007200   200075 235100                    LDA     J,,AUTO
         2 007201   000000 164545                    TCT
         2 007202   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         2 007203   000000 000100                    ARG     0,,PR0
         2 007204   200100 000100                    ARG     LEN,,AUTO
         2 007205   200100 236100                    LDQ     LEN,,AUTO
         2 007206   000044 737000                    LLS     36
         2 007207   000033 771000                    ARL     27
         2 007210   200077 755100                    STA     JUNK,,AUTO
         2 007211   200100 551140                    STBA    LEN,'40'O,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:415  
     3336    14733    5           J = J + LEN;

  14733  2 007212   200075 236100                    LDQ     J,,AUTO
         2 007213   200100 036100                    ADLQ    LEN,,AUTO
         2 007214   200075 756100                    STQ     J,,AUTO

     3337    14734    5           CALL CVT_DD ALTRET( E_BAD_DATE_D );

  14734  2 007215   006244 701000 2                  TSX1    CVT_DD
         2 007216   007343 702000 2                  TSX2    E_BAD_DATE_D

     3338    14735    5           J = J + LEN;

  14735  2 007217   200075 236100                    LDQ     J,,AUTO
         2 007220   200100 036100                    ADLQ    LEN,,AUTO
         2 007221   200075 756100                    STQ     J,,AUTO

  14735  2 007222                       YY           null
     3339    14736    5   YY:     ;
     3340    14737    5           CALL CVT_SWITCH;

  14737  2 007222   006402 701000 2                  TSX1    CVT_SWITCH
         2 007223   000000 011000                    NOP     0

     3341    14738    5           IF J >= CHAR_SIZE

  14738  2 007224   200075 236100                    LDQ     J,,AUTO
         2 007225   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007226   007366 605000 2                  TPL     RET

     3342    14739    5             THEN GOTO RET;
     3343    14740    5           IF SUBSTR( CHARS, J, 1 ) ~= ''''

  14740  2 007227   200011 470500                    LDP0    CHARS$,,AUTO
         2 007230   040000 106506                    CMPC    fill='040'O
         2 007231   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007232   000031 000001 3                  ADSC9   25                       cn=0,n=1
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:416  
         2 007233   007237 600000 2                  TZE     s:14745

     3344    14741    6           THEN DO;

     3345    14742    6               J = J - LEN;

  14742  2 007234   200100 136100                    SBLQ    LEN,,AUTO
         2 007235   200075 756100                    STQ     J,,AUTO

     3346    14743    6               GOTO RET;

  14743  2 007236   007366 710000 2                  TRA     RET

     3347    14744    6           END;
     3348    14745    5           J = J + 1;

  14745  2 007237   200075 054100                    AOS     J,,AUTO

     3349    14746    5           CALL CVT_YY ALTRET( E_BAD_DATE_Y );

  14746  2 007240   006156 701000 2                  TSX1    CVT_YY
         2 007241   007335 702000 2                  TSX2    E_BAD_DATE_Y

     3350    14747    5           J = J + LEN;

  14747  2 007242   200075 236100                    LDQ     J,,AUTO
         2 007243   200100 036100                    ADLQ    LEN,,AUTO
         2 007244   200075 756100                    STQ     J,,AUTO

     3351    14748    5           GOTO RET;

  14748  2 007245   007366 710000 2                  TRA     RET

     3352    14749    5       END/*WHEN*/;
     3353    14750            /*
     3354    14751              Try for DD MMM, 'YY or DD MMM 'YY or DD MMM
     3355    14752            */
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:417  
     3356    14753    4       I = J;

  14753  2 007246   200075 235100                    LDA     J,,AUTO
         2 007247   200074 755100                    STA     I,,AUTO

     3357    14754    4       CALL CVT_DD ALTRET( TRY_YYMMDD );

  14754  2 007250   006244 701000 2                  TSX1    CVT_DD
         2 007251   007311 702000 2                  TSX2    TRY_YYMMDD

     3358    14755    4       J = J + LEN;

  14755  2 007252   200075 236100                    LDQ     J,,AUTO
         2 007253   200100 036100                    ADLQ    LEN,,AUTO
         2 007254   200075 756100                    STQ     J,,AUTO

     3359    14756    4       IF J >= CHAR_SIZE

  14756  2 007255   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007256   007362 605000 2                  TPL     E_BAD_DATE

     3360    14757    4         THEN GOTO E_BAD_DATE;
     3361    14758    4       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));

  14758  2 007257   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 007260   200075 136100                    SBLQ    J,,AUTO
         2 007261   000000 470400 xsym               LDP0    B$SR_NON_BLANK$
         2 007262   200011 471500                    LDP1    CHARS$,,AUTO
         2 007263   000000 620006                    EAX0    0,QL
         2 007264   200075 235100                    LDA     J,,AUTO
         2 007265   000000 164545                    TCT
         2 007266   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         2 007267   000000 000100                    ARG     0,,PR0
         2 007270   200100 000100                    ARG     LEN,,AUTO
         2 007271   200100 236100                    LDQ     LEN,,AUTO
         2 007272   000044 737000                    LLS     36
         2 007273   000033 771000                    ARL     27
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:418  
         2 007274   200077 755100                    STA     JUNK,,AUTO
         2 007275   200100 551140                    STBA    LEN,'40'O,AUTO

     3362    14759    4       J = J + LEN;

  14759  2 007276   200075 236100                    LDQ     J,,AUTO
         2 007277   200100 036100                    ADLQ    LEN,,AUTO
         2 007300   200075 756100                    STQ     J,,AUTO

     3363    14760    4       CALL CVT_MMM ALTRET( TRY_YYMMDD );

  14760  2 007301   006256 701000 2                  TSX1    CVT_MMM
         2 007302   007311 702000 2                  TSX2    TRY_YYMMDD

     3364    14761    4       J = J + LEN;

  14761  2 007303   200075 236100                    LDQ     J,,AUTO
         2 007304   200100 036100                    ADLQ    LEN,,AUTO
         2 007305   200075 756100                    STQ     J,,AUTO

     3365    14762    4       COMMITTED = %XUD#YES;

  14762  2 007306   400000 236003                    LDQ     -131072,DU
         2 007307   200141 756100                    STQ     COMMITTED,,AUTO

     3366    14763    4       GOTO YY;

  14763  2 007310   007222 710000 2                  TRA     YY

  14762  2 007311                       TRY_YYMMDD   null
     3367    14764            /*
     3368    14765              Try for YYMMDD
     3369    14766            */
     3370    14767    4   TRY_YYMMDD: ;
     3371    14768    4       J = I;

  14768  2 007311   200074 235100                    LDA     I,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:419  
         2 007312   200075 755100                    STA     J,,AUTO

     3372    14769    4       CALL CVT_YY ALTRET( E_BAD_DATE );

  14769  2 007313   006156 701000 2                  TSX1    CVT_YY
         2 007314   007362 702000 2                  TSX2    E_BAD_DATE

     3373    14770    4       J = J + 2;

  14770  2 007315   000002 236007                    LDQ     2,DL
         2 007316   200075 056100                    ASQ     J,,AUTO

     3374    14771    4       CALL CVT_MO ALTRET( E_BAD_DATE );

  14771  2 007317   006227 701000 2                  TSX1    CVT_MO
         2 007320   007362 702000 2                  TSX2    E_BAD_DATE

     3375    14772    4       J = J + 2;

  14772  2 007321   000002 236007                    LDQ     2,DL
         2 007322   200075 056100                    ASQ     J,,AUTO

     3376    14773    4       CALL CVT_DD ALTRET( E_BAD_DATE );

  14773  2 007323   006244 701000 2                  TSX1    CVT_DD
         2 007324   007362 702000 2                  TSX2    E_BAD_DATE

     3377    14774    4       COMMITTED = %XUD#YES;

  14774  2 007325   400000 236003                    LDQ     -131072,DU
         2 007326   200141 756100                    STQ     COMMITTED,,AUTO

     3378    14775    4       IF LEN ~= 2

  14775  2 007327   200100 235100                    LDA     LEN,,AUTO
         2 007330   000002 115007                    CMPA    2,DL
         2 007331   007343 601000 2                  TNZ     E_BAD_DATE_D
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:420  

     3379    14776    4         THEN GOTO E_BAD_DATE_D;
     3380    14777    4       J = J + 2;

  14777  2 007332   000002 236007                    LDQ     2,DL
         2 007333   200075 056100                    ASQ     J,,AUTO

     3381    14778    4       GOTO RET;

  14778  2 007334   007366 710000 2                  TRA     RET

     3382    14779
     3383    14780    4   E_BAD_DATE_Y:
     3384    14781    4       ERR = E_XUD#BAD_DATE_Y;

  14781  2 007335   000051 236000 1     E_BAD_DATE_Y LDQ     E_XUD#BAD_DATE_Y
         2 007336   200103 756100                    STQ     ERR,,AUTO

     3385    14782    4       GOTO ALT;

  14782  2 007337   007364 710000 2                  TRA     ALT

     3386    14783    4   E_BAD_DATE_MO:
     3387    14784    4       ERR = E_XUD#BAD_DATE_MO;

  14784  2 007340   000052 236000 1     E_BAD_DATE_* LDQ     E_XUD#BAD_DATE_MO
         2 007341   200103 756100                    STQ     ERR,,AUTO

     3388    14785    4       GOTO ALT;

  14785  2 007342   007364 710000 2                  TRA     ALT

     3389    14786    4   E_BAD_DATE_D:
     3390    14787    4       ERR = E_XUD#BAD_DATE_D;

  14787  2 007343   000053 236000 1     E_BAD_DATE_D LDQ     E_XUD#BAD_DATE_D
         2 007344   200103 756100                    STQ     ERR,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:421  

     3391    14788    4       GOTO ALT;

  14788  2 007345   007364 710000 2                  TRA     ALT

     3392    14789    4   E_BAD_DATE_H:
     3393    14790    4       ERR = E_XUD#BAD_DATE_H;

  14790  2 007346   000056 236000 1     E_BAD_DATE_H LDQ     E_XUD#BAD_DATE_H
         2 007347   200103 756100                    STQ     ERR,,AUTO

     3394    14791    4       GOTO ALT;

  14791  2 007350   007364 710000 2                  TRA     ALT

     3395    14792    4   E_BAD_DATE_MI:
     3396    14793    4       ERR = E_XUD#BAD_DATE_MI;

  14793  2 007351   000057 236000 1     E_BAD_DATE_* LDQ     E_XUD#BAD_DATE_MI
         2 007352   200103 756100                    STQ     ERR,,AUTO

     3397    14794    4       GOTO ALT;

  14794  2 007353   007364 710000 2                  TRA     ALT

     3398    14795    4   E_BAD_DATE_S:
     3399    14796    4       ERR = E_XUD#BAD_DATE_S;

  14796  2 007354   000060 236000 1     E_BAD_DATE_S LDQ     E_XUD#BAD_DATE_S
         2 007355   200103 756100                    STQ     ERR,,AUTO

     3400    14797    4       GOTO ALT;

  14797  2 007356   007364 710000 2                  TRA     ALT

     3401    14798    4   E_BAD_DATE_T:
     3402    14799    4       ERR = E_XUD#BAD_DATE_T;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:422  

  14799  2 007357   000061 236000 1     E_BAD_DATE_T LDQ     E_XUD#BAD_DATE_T
         2 007360   200103 756100                    STQ     ERR,,AUTO

     3403    14800    4       GOTO ALT;

  14800  2 007361   007364 710000 2                  TRA     ALT

     3404    14801    4   E_BAD_DATE:
     3405    14802    4       ERR = E_XUD#BAD_DATE;

  14802  2 007362   000050 236000 1     E_BAD_DATE   LDQ     E_XUD#BAD_DATE
         2 007363   200103 756100                    STQ     ERR,,AUTO

     3406    14803    4   ALT:ALTRETURN;

  14803  2 007364   200142 221300       ALT          LDX1  ! UTS_IN_DAYS+1,,AUTO
         2 007365   000000 702211                    TSX2  ! 0,X1

     3407    14804
     3408    14805    4   RET:RETURN; /* Normal return point for all picture types */

  14805  2 007366   200142 221300       RET          LDX1  ! UTS_IN_DAYS+1,,AUTO
         2 007367   000001 702211                    TSX2  ! 1,X1

     3409    14806
     3410    14807        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:423  
     3411    14808        /******************************************************************************/
     3412    14809        /*I*
     3413    14810        NAME:   PARSE_TIME
     3414    14811        PURPOSE:
     3415    14812                Parse time of day using default rules.
     3416    14813        CALL:
     3417    14814                CALL PARSE_TIME ALTRET( ALT );
     3418    14815        INPUT:
     3419    14816                CHARS - The string to be converted.
     3420    14817                J - Starting offset into string.
     3421    14818        OUTPUT:
     3422    14819                FLDS - Subfield values set as if string were parsed using a picture.
     3423    14820                J - Offset to character following end of parsed time.
     3424    14821        INTERFACE:
     3425    14822                CVT_HH
     3426    14823                CVT_MI
     3427    14824                CVT_SS
     3428    14825                CVT_TT
     3429    14826                CHK4END
     3430    14827        DESCRIPTION:
     3431    14828                The time must be in the form:   hh:mm:ss.tt AM
     3432    14829                Trailing subfields and their punctuation may be omitted if their
     3433    14830                value is zero, except that the hour cannot be used alone.  AM
     3434    14831                may be omitted and the value will be interpreted on a 24-hour
     3435    14832                clock.  Blanks are optional before AM, if specified.
     3436    14833        */
     3437    14834        /******************************************************************************/
     3438    14835
     3439    14836    4   PARSE_TIME: ENTRY ALTRET;

  14836  2 007370   200142 741300       PARSE_TIME   STX1  ! UTS_IN_DAYS+1,,AUTO

     3440    14837
     3441    14838    4       CALL CVT_HH ALTRET( E_BAD_DATE_H );

  14838  2 007371   006521 701000 2                  TSX1    CVT_HH
         2 007372   007346 702000 2                  TSX2    E_BAD_DATE_H
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:424  

     3442    14839    4       J = J + LEN;

  14839  2 007373   200075 236100                    LDQ     J,,AUTO
         2 007374   200100 036100                    ADLQ    LEN,,AUTO
         2 007375   200075 756100                    STQ     J,,AUTO

     3443    14840    4       IF J >= CHAR_SIZE

  14840  2 007376   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007377   007362 605000 2                  TPL     E_BAD_DATE

     3444    14841    4         THEN GOTO E_BAD_DATE;
     3445    14842    4       IF SUBSTR( CHARS, J, 1 ) = ':'

  14842  2 007400   200011 470500                    LDP0    CHARS$,,AUTO
         2 007401   040000 106506                    CMPC    fill='040'O
         2 007402   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007403   000016 000001 3                  ADSC9   14                       cn=0,n=1
         2 007404   007411 601000 2                  TNZ     s:14848

     3446    14843    5       THEN DO;

     3447    14844    5           COMMITTED = %XUD#YES;

  14844  2 007405   400000 236003                    LDQ     -131072,DU
         2 007406   200141 756100                    STQ     COMMITTED,,AUTO

     3448    14845    5           J = J + 1;

  14845  2 007407   200075 054100                    AOS     J,,AUTO

     3449    14846    5       END;

  14846  2 007410   007420 710000 2                  TRA     s:14855

     3450    14847    5       ELSE DO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:425  

     3451    14848    5           CALL CHK4END ALTRET( ALT );

  14848  2 007411   007475 701000 2                  TSX1    CHK4END
         2 007412   007364 702000 2                  TSX2    ALT

     3452    14849    5           IF NUM < 0

  14849  2 007413   200101 235100                    LDA     NUM,,AUTO
         2 007414   007362 604000 2                  TMI     E_BAD_DATE

     3453    14850    5             THEN GOTO E_BAD_DATE;
     3454    14851    5           COMMITTED = %XUD#YES;

  14851  2 007415   400000 236003                    LDQ     -131072,DU
         2 007416   200141 756100                    STQ     COMMITTED,,AUTO

     3455    14852    5           GOTO RET;

  14852  2 007417   007366 710000 2                  TRA     RET

     3456    14853    5       END;
     3457    14854
     3458    14855    4       CALL CVT_MI ALTRET( E_BAD_DATE_MI );

  14855  2 007420   006534 701000 2                  TSX1    CVT_MI
         2 007421   007351 702000 2                  TSX2    E_BAD_DATE_MI

     3459    14856    4       J = J + LEN;

  14856  2 007422   200075 236100                    LDQ     J,,AUTO
         2 007423   200100 036100                    ADLQ    LEN,,AUTO
         2 007424   200075 756100                    STQ     J,,AUTO

     3460    14857    4       IF J >= CHAR_SIZE

  14857  2 007425   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:426  
         2 007426   007366 605000 2                  TPL     RET

     3461    14858    4         THEN GOTO RET;
     3462    14859    4       IF SUBSTR( CHARS, J, 1 ) = ':'

  14859  2 007427   200011 470500                    LDP0    CHARS$,,AUTO
         2 007430   040000 106506                    CMPC    fill='040'O
         2 007431   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007432   000016 000001 3                  ADSC9   14                       cn=0,n=1
         2 007433   007436 601000 2                  TNZ     s:14863

     3463    14860    4       THEN
     3464    14861    4           J = J + 1;

  14861  2 007434   200075 054100                    AOS     J,,AUTO
         2 007435   007441 710000 2                  TRA     s:14867

     3465    14862    5       ELSE DO;

     3466    14863    5           CALL CHK4END ALTRET( ALT );

  14863  2 007436   007475 701000 2                  TSX1    CHK4END
         2 007437   007364 702000 2                  TSX2    ALT

     3467    14864    5           GOTO RET;

  14864  2 007440   007366 710000 2                  TRA     RET

     3468    14865    5       END;
     3469    14866
     3470    14867    4       CALL CVT_SS ALTRET( E_BAD_DATE_S );

  14867  2 007441   006547 701000 2                  TSX1    CVT_SS
         2 007442   007354 702000 2                  TSX2    E_BAD_DATE_S

     3471    14868    4       J = J + LEN;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:427  
  14868  2 007443   200075 236100                    LDQ     J,,AUTO
         2 007444   200100 036100                    ADLQ    LEN,,AUTO
         2 007445   200075 756100                    STQ     J,,AUTO

     3472    14869    4       IF J >= CHAR_SIZE

  14869  2 007446   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007447   007366 605000 2                  TPL     RET

     3473    14870    4         THEN GOTO RET;
     3474    14871    4       IF SUBSTR( CHARS, J, 1 ) = '.'

  14871  2 007450   200011 470500                    LDP0    CHARS$,,AUTO
         2 007451   040000 106506                    CMPC    fill='040'O
         2 007452   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007453   000015 000001 3                  ADSC9   13                       cn=0,n=1
         2 007454   007457 601000 2                  TNZ     s:14875

     3475    14872    4       THEN
     3476    14873    4           J = J + 1;

  14873  2 007455   200075 054100                    AOS     J,,AUTO
         2 007456   007462 710000 2                  TRA     s:14879

     3477    14874    5       ELSE DO;

     3478    14875    5           CALL CHK4END ALTRET( ALT );

  14875  2 007457   007475 701000 2                  TSX1    CHK4END
         2 007460   007364 702000 2                  TSX2    ALT

     3479    14876    5           GOTO RET;

  14876  2 007461   007366 710000 2                  TRA     RET

     3480    14877    5       END;
     3481    14878
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:428  
     3482    14879    4       CALL CVT_TT ALTRET( E_BAD_DATE_T );

  14879  2 007462   006562 701000 2                  TSX1    CVT_TT
         2 007463   007357 702000 2                  TSX2    E_BAD_DATE_T

     3483    14880    4       J = J + LEN;

  14880  2 007464   200075 236100                    LDQ     J,,AUTO
         2 007465   200100 036100                    ADLQ    LEN,,AUTO
         2 007466   200075 756100                    STQ     J,,AUTO

     3484    14881    4       CALL CHK4END;

  14881  2 007467   007475 701000 2                  TSX1    CHK4END
         2 007470   000000 011000                    NOP     0

     3485    14882    4       IF I < 0

  14882  2 007471   200074 235100                    LDA     I,,AUTO
         2 007472   007474 605000 2                  TPL     s:14884

     3486    14883    4         THEN ERR = '0'B;

  14883  2 007473   200103 450100                    STZ     ERR,,AUTO

     3487    14884    4       GOTO RET;

  14884  2 007474   007366 710000 2                  TRA     RET

     3488    14885
     3489    14886        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:429  
     3490    14887        /******************************************************************************/
     3491    14888        /*I*
     3492    14889        NAME:   CHK4END
     3493    14890        PURPOSE:
     3494    14891                Check for end of time value according to default rules.
     3495    14892        CALL:
     3496    14893                CALL CHK4END ALTRET( error );
     3497    14894        INPUT:
     3498    14895                CHARS - The string to be converted.
     3499    14896                J - Starting offset into string.
     3500    14897        OUTPUT:
     3501    14898                FLDS.HOUR - May be updated if AM or PM found.
     3502    14899                J - If AM or PM found, updated to point past it, else unchanged.
     3503    14900                NUM - If less than zero, AM or PM not found.
     3504    14901        INTERFACE:
     3505    14902                CHK4SFX
     3506    14903        DESCRIPTION:
     3507    14904                If the current character is a blank, we are at the end of the time,
     3508    14905                except that an AM or PM suffix may follow.  If a suffix is found,
     3509    14906                the hour is validated and possibly adjusted for a 12-hour colck.
     3510    14907                The routine returns normally if this is the end of the time and
     3511    14908                the hour is not in error, otherwise it altreturns after setting
     3512    14909                the error code.
     3513    14910                The current offset if incremented if a suffix is found, otherwise
     3514    14911                it is not changed.
     3515    14912        */
     3516    14913        /******************************************************************************/
     3517    14914
     3518    14915    4   CHK4END: PROC ALTRET;

  14915  2 007475   200144 741300       CHK4END      STX1  ! DAYS_IN_25THS+2,,AUTO

     3519    14916
     3520    14917    5       NUM = -1;

  14917  2 007476   000001 335007                    LCA     1,DL
         2 007477   200101 755100                    STA     NUM,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:430  

     3521    14918    5       IF J >= CHAR_SIZE

  14918  2 007500   200075 236100                    LDQ     J,,AUTO
         2 007501   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007502   007555 605000 2                  TPL     RET

     3522    14919    5         THEN GOTO RET;
     3523    14920
     3524    14921    5       CALL CHK4SFX;

  14921  2 007503   010071 701000 2                  TSX1    CHK4SFX
         2 007504   000000 011000                    NOP     0

     3525    14922    6       DO CASE( IDX );

  14922  2 007505   200076 235100                    LDA     IDX,,AUTO
         2 007506   000005 135007                    SBLA    5,DL
         2 007507   000004 115007                    CMPA    4,DL
         2 007510   007512 602005 2                  TNC     s:14922+5,AL
         2 007511   007523 710000 2                  TRA     s:14928
         2 007512   007516 710000 2                  TRA     s:14924
         2 007513   007516 710000 2                  TRA     s:14924
         2 007514   007520 710000 2                  TRA     s:14926
         2 007515   007520 710000 2                  TRA     s:14926

     3526    14923    6       CASE( %XUD#SFX_AM, %XUD#SFX_A_M );

     3527    14924    6           NUM = 0;

  14924  2 007516   200101 450100                    STZ     NUM,,AUTO
         2 007517   007536 710000 2                  TRA     s:14933

     3528    14925    6       CASE( %XUD#SFX_PM, %XUD#SFX_P_M );

     3529    14926    6           NUM = 12;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:431  
  14926  2 007520   000014 236007                    LDQ     12,DL
         2 007521   200101 756100                    STQ     NUM,,AUTO
         2 007522   007536 710000 2                  TRA     s:14933

     3530    14927    6       CASE( ELSE );

     3531    14928    6           IF SUBSTR( CHARS, J, 1 ) = ' ' OR SUBSTR( CHARS, J, 1 ) = ','

  14928  2 007523   200011 470500                    LDP0    CHARS$,,AUTO
         2 007524   200075 236100                    LDQ     J,,AUTO
         2 007525   040000 106506                    CMPC    fill='040'O
         2 007526   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007527   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 007530   007555 600000 2                  TZE     RET
         2 007531   040000 106506                    CMPC    fill='040'O
         2 007532   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007533   000025 000001 3                  ADSC9   21                       cn=0,n=1
         2 007534   007555 600000 2                  TZE     RET

     3532    14929    6             THEN GOTO RET;
     3533    14930    6             ELSE GOTO E_BAD_DATE;

  14930  2 007535   007557 710000 2                  TRA     E_BAD_DATE

     3534    14931    6       END/*CASE*/;

     3535    14932
     3536    14933    5       IF FLDS.HOUR = 12

  14933  2 007536   200070 236100                    LDQ     FLDS+8,,AUTO
         2 007537   000014 116007                    CMPQ    12,DL
         2 007540   007543 601000 2                  TNZ     s:14936

     3537    14934    5       THEN
     3538    14935    5           FLDS.HOUR = 0;

  14935  2 007541   200070 450100                    STZ     FLDS+8,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:432  
         2 007542   007547 710000 2                  TRA     s:14939

     3539    14936    5       ELSE IF FLDS.HOUR = 0 OR FLDS.HOUR > 11

  14936  2 007543   000000 116003                    CMPQ    0,DU
         2 007544   007562 600000 2                  TZE     E_BAD_DATE_H
         2 007545   000013 116007                    CMPQ    11,DL
         2 007546   007562 605400 2                  TPNZ    E_BAD_DATE_H

     3540    14937    5       THEN
     3541    14938    5           GOTO E_BAD_DATE_H;
     3542    14939    5       FLDS.HOUR = FLDS.HOUR + NUM;

  14939  2 007547   200070 236100                    LDQ     FLDS+8,,AUTO
         2 007550   200101 036100                    ADLQ    NUM,,AUTO
         2 007551   200070 756100                    STQ     FLDS+8,,AUTO

     3543    14940    5       J = J + LEN;

  14940  2 007552   200075 236100                    LDQ     J,,AUTO
         2 007553   200100 036100                    ADLQ    LEN,,AUTO
         2 007554   200075 756100                    STQ     J,,AUTO

     3544    14941
     3545    14942    5   RET:RETURN;

  14942  2 007555   200144 221300       RET          LDX1  ! DAYS_IN_25THS+2,,AUTO
         2 007556   000001 702211                    TSX2  ! 1,X1

     3546    14943
     3547    14944    5   E_BAD_DATE:
     3548    14945    5       ERR = E_XUD#BAD_DATE;

  14945  2 007557   000050 236000 1     E_BAD_DATE   LDQ     E_XUD#BAD_DATE
         2 007560   200103 756100                    STQ     ERR,,AUTO

     3549    14946    5       GOTO ALT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:433  

  14946  2 007561   007564 710000 2                  TRA     ALT

     3550    14947    5   E_BAD_DATE_H:
     3551    14948    5       ERR = E_XUD#BAD_DATE_H;

  14948  2 007562   000056 236000 1     E_BAD_DATE_H LDQ     E_XUD#BAD_DATE_H
         2 007563   200103 756100                    STQ     ERR,,AUTO

     3552    14949    5   ALT:ALTRETURN;

  14949  2 007564   200144 221300       ALT          LDX1  ! DAYS_IN_25THS+2,,AUTO
         2 007565   000000 702211                    TSX2  ! 0,X1

     3553    14950
     3554    14951    5   END CHK4END;
     3555    14952
     3556    14953        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:434  
     3557    14954        /******************************************************************************/
     3558    14955        /*I*
     3559    14956        NAME:   PARSE_SPAN
     3560    14957        PURPOSE:
     3561    14958                Convert time interval constant from string to binary.
     3562    14959        CALL:
     3563    14960                CALL PARSE_SPAN ALTRET( error );
     3564    14961        INPUT:
     3565    14962                CHARS - The string to be converted.
     3566    14963                J - Starting offset into string.
     3567    14964        OUTPUT:
     3568    14965                FLDS - Subfield values set as if parse were done via picture.
     3569    14966                J - Points to character past end of converted string.
     3570    14967        INTERFACE:
     3571    14968                CVT_HH
     3572    14969                CVT_MI
     3573    14970                CVT_SS
     3574    14971                CVT_TT
     3575    14972        DESCRIPTION:
     3576    14973                This routine converts a time interval constant into a number
     3577    14974                of days and clock tics.  The calling routines will conbine
     3578    14975                these counts into a DATE or UTS interval.
     3579    14976
     3580    14977                The syntax for the constant is as follows:
     3581    14978
     3582    14979                          { d [ . ]                                  }
     3583    14980                          {                                          }
     3584    14981                    [+|-] { [ d [ . ]] h : [ m [ : [ s [ . [ t ]]]]] }
     3585    14982                          {                                          }
     3586    14983                          { : m [ : [ s [ . [ t ]]]]                 }
     3587    14984
     3588    14985                Leading and trailing blanks are ignored.  Embedded blanks are
     3589    14986                not allowed.  The alternate return is taken if the constant value
     3590    14987                has incorrect syntax or if any time subfield exceeds its maximum
     3591    14988                value.
     3592    14989        */
     3593    14990        /******************************************************************************/
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:435  
     3594    14991
     3595    14992    4   PARSE_SPAN: ENTRY ALTRET;

  14992  2 007566   200142 741300       PARSE_SPAN   STX1  ! UTS_IN_DAYS+1,,AUTO

     3596    14993
     3597    14994            /*
     3598    14995              Parse number of days.
     3599    14996            */
     3600    14997    4       CALL INDEX( IDX, '.', CHARS, J );

  14997  2 007567   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 007570   200075 136100                    SBLQ    J,,AUTO
         2 007571   200152 756100                    STQ     LIMIT+1,,AUTO
         2 007572   200075 236100                    LDQ     J,,AUTO
         2 007573   200011 470500                    LDP0    CHARS$,,AUTO
         2 007574   200152 720100                    LXL0    LIMIT+1,,AUTO
         2 007575   200075 235100                    LDA     J,,AUTO
         2 007576   000000 124545                    SCM     mask='000'O
         2 007577   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 007600   000015 000001 3                  ADSC9   13                       cn=0,n=1
         2 007601   200076 000100                    ARG     IDX,,AUTO
         2 007602   200076 056100                    ASQ     IDX,,AUTO

     3601    14998    4       IF IDX > J

  14998  2 007603   200076 236100                    LDQ     IDX,,AUTO
         2 007604   200075 116100                    CMPQ    J,,AUTO
         2 007605   007676 604400 2                  TMOZ    s:15019

     3602    14999    5       THEN DO;

     3603    15000    5           CALL INDEX( I, ':', CHARS, J )

  15000  2 007606   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 007607   200075 136100                    SBLQ    J,,AUTO
         2 007610   200152 756100                    STQ     LIMIT+1,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:436  
         2 007611   200075 236100                    LDQ     J,,AUTO
         2 007612   200152 720100                    LXL0    LIMIT+1,,AUTO
         2 007613   000000 124545                    SCM     mask='000'O
         2 007614   000000 000010                    ADSC9   0,A,PR0                  cn=0,n=*X0
         2 007615   000016 000001 3                  ADSC9   14                       cn=0,n=1
         2 007616   200074 000100                    ARG     I,,AUTO
         2 007617   200074 056100                    ASQ     I,,AUTO
         2 007620   007631 606400 2                  TTN     s:15007

     3604    15001    6           WHENRETURN DO;

     3605    15002    6               IF I = J

  15002  2 007621   200074 236100                    LDQ     I,,AUTO
         2 007622   200075 116100                    CMPQ    J,,AUTO
         2 007623   007631 601000 2                  TNZ     s:15007

     3606    15003    6                 THEN IF J + 1 = CHAR_SIZE

  15003  2 007624   200075 236100                    LDQ     J,,AUTO
         2 007625   000001 036007                    ADLQ    1,DL
         2 007626   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007627   007346 600000 2                  TZE     E_BAD_DATE_H

     3607    15004    6                   THEN GOTO E_BAD_DATE_H;
     3608    15005    6                   ELSE GOTO NO_HOURS;

  15005  2 007630   007713 710000 2                  TRA     NO_HOURS

     3609    15006    6           END/*WHEN*/;
     3610    15007    5           IF IDX <= I

  15007  2 007631   200076 236100                    LDQ     IDX,,AUTO
         2 007632   200074 116100                    CMPQ    I,,AUTO
         2 007633   007677 605400 2                  TPNZ    s:15023

     3611    15008    6           THEN DO;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:437  

     3612    15009    6               CALL SEARCH( LEN, JUNK, B$SR_NON_DEC, CHARS, J );

  15009  2 007634   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 007635   200075 136100                    SBLQ    J,,AUTO
         2 007636   200152 756100                    STQ     LIMIT+1,,AUTO
         2 007637   200075 236100                    LDQ     J,,AUTO
         2 007640   000000 470400 xsym               LDP0    B$SR_NON_DEC$
         2 007641   200011 471500                    LDP1    CHARS$,,AUTO
         2 007642   200152 720100                    LXL0    LIMIT+1,,AUTO
         2 007643   000000 164546                    TCT
         2 007644   100000 000010                    ADSC9   0,Q,PR1                  cn=0,n=*X0
         2 007645   000000 000100                    ARG     0,,PR0
         2 007646   200100 000100                    ARG     LEN,,AUTO
         2 007647   200100 235100                    LDA     LEN,,AUTO
         2 007650   000033 771000                    ARL     27
         2 007651   200077 755100                    STA     JUNK,,AUTO
         2 007652   200100 551140                    STBA    LEN,'40'O,AUTO
         2 007653   200100 056100                    ASQ     LEN,,AUTO

     3613    15010    6               IF LEN ~= IDX OR LEN = J

  15010  2 007654   200100 236100                    LDQ     LEN,,AUTO
         2 007655   200076 116100                    CMPQ    IDX,,AUTO
         2 007656   007343 601000 2                  TNZ     E_BAD_DATE_D
         2 007657   200075 116100                    CMPQ    J,,AUTO
         2 007660   007343 600000 2                  TZE     E_BAD_DATE_D

     3614    15011    6                 THEN GOTO E_BAD_DATE_D;
     3615    15012    6               CALL CHARBIN( FLDS.DAY, SUBSTR( CHARS, J, LEN-J ));

  15012  2 007661   200075 136100                    SBLQ    J,,AUTO
         2 007662   000000 620006                    EAX0    0,QL
         2 007663   200075 236100                    LDQ     J,,AUTO
         2 007664   000100 305546                    DTB
         2 007665   100000 030010                    NDSC9   0,Q,PR1                  cn=0,s=nosgn,sf=0,n=*X0
         2 007666   200062 000004                    NDSC9   FLDS+2,,AUTO             cn=0,s=lsgnf,sf=0,n=4
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:438  

     3616    15013    6               J = LEN + 1;

  15013  2 007667   200100 235100                    LDA     LEN,,AUTO
         2 007670   000001 035007                    ADLA    1,DL
         2 007671   200075 755100                    STA     J,,AUTO

     3617    15014    6               IF J >= CHAR_SIZE

  15014  2 007672   200075 236100                    LDQ     J,,AUTO
         2 007673   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007674   007366 605000 2                  TPL     RET

     3618    15015    6                 THEN GOTO RET;
     3619    15016    6           END;

     3620    15017    5       END;

  15017  2 007675   007677 710000 2                  TRA     s:15023

     3621    15018    4       ELSE
     3622    15019    4           J = J + 1;

  15019  2 007676   200075 054100                    AOS     J,,AUTO

     3623    15020            /*
     3624    15021              Parse number of hours.
     3625    15022            */
     3626    15023    4       CALL CVT_HH ALTRET( E_BAD_DATE_H );

  15023  2 007677   006521 701000 2                  TSX1    CVT_HH
         2 007700   007346 702000 2                  TSX2    E_BAD_DATE_H

     3627    15024    4       J = J + LEN;

  15024  2 007701   200075 236100                    LDQ     J,,AUTO
         2 007702   200100 036100                    ADLQ    LEN,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:439  
         2 007703   200075 756100                    STQ     J,,AUTO

     3628    15025    4       IF J >= CHAR_SIZE

  15025  2 007704   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007705   007346 605000 2                  TPL     E_BAD_DATE_H

     3629    15026    4         THEN GOTO E_BAD_DATE_H;
     3630    15027    4       IF SUBSTR( CHARS, J, 1 ) ~= ':'

  15027  2 007706   200011 470500                    LDP0    CHARS$,,AUTO
         2 007707   040000 106506                    CMPC    fill='040'O
         2 007710   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007711   000016 000001 3                  ADSC9   14                       cn=0,n=1
         2 007712   007346 601000 2                  TNZ     E_BAD_DATE_H

  15027  2 007713                       NO_HOURS     null
     3631    15028    4         THEN GOTO E_BAD_DATE_H;
     3632    15029    4   NO_HOURS: ;
     3633    15030    4       J = J + 1;

  15030  2 007713   200075 054100                    AOS     J,,AUTO

     3634    15031    4       IF J = CHAR_SIZE

  15031  2 007714   200075 236100                    LDQ     J,,AUTO
         2 007715   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007716   007366 600000 2                  TZE     RET

     3635    15032    4         THEN GOTO RET;
     3636    15033            /*
     3637    15034              Parse number of minutes.
     3638    15035            */
     3639    15036    4       CALL CVT_MI ALTRET( E_BAD_DATE_MI );

  15036  2 007717   006534 701000 2                  TSX1    CVT_MI
         2 007720   007351 702000 2                  TSX2    E_BAD_DATE_MI
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:440  

     3640    15037    4       J = J + LEN;

  15037  2 007721   200075 236100                    LDQ     J,,AUTO
         2 007722   200100 036100                    ADLQ    LEN,,AUTO
         2 007723   200075 756100                    STQ     J,,AUTO

     3641    15038    4       IF J >= CHAR_SIZE

  15038  2 007724   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007725   007366 605000 2                  TPL     RET

     3642    15039    4         THEN GOTO RET;
     3643    15040    4       IF SUBSTR( CHARS, J, 1 ) ~= ':'

  15040  2 007726   200011 470500                    LDP0    CHARS$,,AUTO
         2 007727   040000 106506                    CMPC    fill='040'O
         2 007730   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007731   000016 000001 3                  ADSC9   14                       cn=0,n=1
         2 007732   007366 601000 2                  TNZ     RET

     3644    15041    4         THEN GOTO RET;
     3645    15042    4       J = J + 1;

  15042  2 007733   200075 054100                    AOS     J,,AUTO

     3646    15043    4       IF J = CHAR_SIZE

  15043  2 007734   200075 236100                    LDQ     J,,AUTO
         2 007735   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007736   007366 600000 2                  TZE     RET

     3647    15044    4         THEN GOTO RET;
     3648    15045            /*
     3649    15046              Parse number of seconds.
     3650    15047            */
     3651    15048    4       CALL CVT_SS ALTRET( E_BAD_DATE_S );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:441  

  15048  2 007737   006547 701000 2                  TSX1    CVT_SS
         2 007740   007354 702000 2                  TSX2    E_BAD_DATE_S

     3652    15049    4       J = J + LEN;

  15049  2 007741   200075 236100                    LDQ     J,,AUTO
         2 007742   200100 036100                    ADLQ    LEN,,AUTO
         2 007743   200075 756100                    STQ     J,,AUTO

     3653    15050    4       IF J >= CHAR_SIZE

  15050  2 007744   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007745   007366 605000 2                  TPL     RET

     3654    15051    4         THEN GOTO RET;
     3655    15052    4       IF SUBSTR( CHARS, J, 1 ) ~= '.'

  15052  2 007746   200011 470500                    LDP0    CHARS$,,AUTO
         2 007747   040000 106506                    CMPC    fill='040'O
         2 007750   000000 000001                    ADSC9   0,Q,PR0                  cn=0,n=1
         2 007751   000015 000001 3                  ADSC9   13                       cn=0,n=1
         2 007752   007366 601000 2                  TNZ     RET

     3656    15053    4         THEN GOTO RET;
     3657    15054    4       J = J + 1;

  15054  2 007753   200075 054100                    AOS     J,,AUTO

     3658    15055    4       IF J = CHAR_SIZE

  15055  2 007754   200075 236100                    LDQ     J,,AUTO
         2 007755   200010 116100                    CMPQ    CHAR_SIZE,,AUTO
         2 007756   007366 600000 2                  TZE     RET

     3659    15056    4         THEN GOTO RET;
     3660    15057            /*
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:442  
     3661    15058              Parse number of clock tics.
     3662    15059            */
     3663    15060    4       CALL CVT_TT ALTRET( E_BAD_DATE_T );

  15060  2 007757   006562 701000 2                  TSX1    CVT_TT
         2 007760   007357 702000 2                  TSX2    E_BAD_DATE_T

     3664    15061    4       J = J + LEN;

  15061  2 007761   200075 236100                    LDQ     J,,AUTO
         2 007762   200100 036100                    ADLQ    LEN,,AUTO
         2 007763   200075 756100                    STQ     J,,AUTO

     3665    15062
     3666    15063    4   END PARSE_DATE;

  15063  2 007764   200142 221300                    LDX1  ! UTS_IN_DAYS+1,,AUTO
         2 007765   000001 702211                    TSX2  ! 1,X1

     3667    15064
     3668    15065    3   END CVT_FROM_DEFAULT;
     3669    15066
     3670    15067    2   END CVT_FROM_CHAR;
     3671    15068        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:443  
     3672    15069        /******************************************************************************/
     3673    15070        /*F*
     3674    15071        NAME:   GET_CURRENT_UTS
     3675    15072        PURPOSE:
     3676    15073                Get the current timestamp from the operating system.
     3677    15074        */
     3678    15075        /*D*
     3679    15076        NAME:   GET_CURRENT_UTS
     3680    15077        CALL:
     3681    15078                CALL GET_CURRENT_UTS ALTRET( error );
     3682    15079        OUTPUT:
     3683    15080                UTS - System timestamp as a UTS.
     3684    15081        INTERFACE:
     3685    15082                M$TIME
     3686    15083        DESCRIPTION:
     3687    15084                This routine is called for the entry points that return the
     3688    15085                system clock time.
     3689    15086        */
     3690    15087        /******************************************************************************/
     3691    15088
     3692    15089    1   GET_CURRENT_UTS: PROC ALTRET;

  15089  2 007766   200140 741300       GET_CURRENT* STX1  ! OUT_FLAG,,AUTO

     3693    15090
     3694    15091    2       TIMESPAN = %XUD#NO;

  15091  2 007767   200102 450100                    STZ     TIMESPAN,,AUTO

     3695    15092
     3696    15093    2       FPT@TIME = FPT_TIME_C;

  15093  2 007770   000100 100400                    MLR     fill='000'O
         2 007771   000000 000060 1                  ADSC9   FPT_TIME_C               cn=0,n=48
         2 007772   200116 000060                    ADSC9   FPT@TIME,,AUTO           cn=0,n=48

     3697    15094    2       FPT@TIME.V_ = VECTOR( FPT@TIME.V );
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:444  

  15094  2 007773   000032 235000 3                  LDA     26
         2 007774   200152 452500                    STP2    LIMIT+1,,AUTO
         2 007775   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 007776   000130 036003                    ADLQ    88,DU
         2 007777   200116 757100                    STAQ    FPT@TIME,,AUTO

     3698    15095    2       FPT@TIME.TSTAMP_ = VECTOR( UTS );

  15095  2 010000   777640 235007                    LDA     -96,DL
         2 010001   200152 452500                    STP2    LIMIT+1,,AUTO
         2 010002   200152 236100                    LDQ     LIMIT+1,,AUTO
         2 010003   000057 036003                    ADLQ    47,DU
         2 010004   200126 757100                    STAQ    FPT@TIME+8,,AUTO

     3699    15096    2       FPT@TIME.V.DEST# = XUD_PARAM.UTS_TYPE;

  15096  2 010005   200003 470500                    LDP0    @XUD_PARAM,,AUTO
         2 010006   000006 236100                    LDQ     6,,PR0
         2 010007   000011 772000                    QRL     9
         2 010010   200130 552120                    STBQ    FPT@TIME+10,'20'O,AUTO

     3700    15097    2       CALL M$TIME( FPT@TIME );

  15097  2 010011   200116 630500                    EPPR0   FPT@TIME,,AUTO
         2 010012   020004 713400                    CLIMB   8196
         2 010013   402000 401760                    pmme    nvectors=5

     3701    15098
     3702    15099    2       RETURN;

  15099  2 010014   200140 221300                    LDX1  ! OUT_FLAG,,AUTO
         2 010015   000001 702211                    TSX2  ! 1,X1

     3703    15100
     3704    15101    2   END GET_CURRENT_UTS;
     3705    15102        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:445  
     3706    15103        /******************************************************************************/
     3707    15104        /*F*
     3708    15105        NAME:   FROM_UTS
     3709    15106        PURPOSE:
     3710    15107                Convert a UTS into days and tics.
     3711    15108        */
     3712    15109        /*D*
     3713    15110        NAME:   FROM_UTS
     3714    15111        CALL:
     3715    15112                CALL FROM_UTS;
     3716    15113        INPUT:
     3717    15114                UTS - The UTS to be converted.
     3718    15115        OUTPUT:
     3719    15116                DAYS - The number of days since Jan. 1, 1 AD.
     3720    15117                TICS - The number of clock tics into the day.
     3721    15118        INTERFACE:
     3722    15119                XUD$UTS_DIFF_25TH
     3723    15120                XUD$UTS_DIFF
     3724    15121                XUD$UTS_ADJ_25TH
     3725    15122        DESCRIPTION:
     3726    15123                Get the number of days out of the UTS, convert it back to a
     3727    15124                UTS (rounded to days), and then TICS is the difference between
     3728    15125                the two.
     3729    15126        */
     3730    15127        /******************************************************************************/
     3731    15128
     3732    15129    1   FROM_UTS: PROC;

  15129  2 010016   200140 741300       FROM_UTS     STX1  ! OUT_FLAG,,AUTO

     3733    15130
     3734    15131    2       DCL UTS_IN_DAYS UBIN;
     3735    15132    2       DCL DAYS_IN_25THS UBIN;
     3736    15133
     3737    15134    2       CALL XUD$UTS_DIFF_25TH (DAYS_IN_25THS, UTS, 0);

  15134  2 010017   000005 236000 3                  LDQ     5
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:446  
         2 010020   200154 756100                    STQ     LIMIT+3,,AUTO
         2 010021   200057 630500                    EPPR0   UTS,,AUTO
         2 010022   200153 450500                    STP0    LIMIT+2,,AUTO
         2 010023   200142 631500                    EPPR1   DAYS_IN_25THS,,AUTO
         2 010024   200152 451500                    STP1    LIMIT+1,,AUTO
         2 010025   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 010026   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 010027   000000 701000 xent               TSX1    XUD$UTS_DIFF_25TH
         2 010030   000000 011000                    NOP     0

     3738    15135    2       DAYS = DAYS_IN_25THS / %UTS_25TH_DAY#;

  15135  2 010031   200142 236100                    LDQ     DAYS_IN_25THS,,AUTO
         2 010032   000001 772000                    QRL     1
         2 010033   000033 506000 3                  DIV     27
         2 010034   200055 756100                    STQ     DAYS,,AUTO

     3739    15136    2       CALL XUD$UTS_ADJ_25TH (UTS_IN_DAYS, 0, DAYS * %UTS_25TH_DAY#);

  15136  2 010035   000004 402000 3                  MPY     4
         2 010036   200152 756100                    STQ     LIMIT+1,,AUTO
         2 010037   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 010040   200155 450500                    STP0    LIMIT+4,,AUTO
         2 010041   000005 236000 3                  LDQ     5
         2 010042   200154 756100                    STQ     LIMIT+3,,AUTO
         2 010043   200141 631500                    EPPR1   UTS_IN_DAYS,,AUTO
         2 010044   200153 451500                    STP1    LIMIT+2,,AUTO
         2 010045   200153 630500                    EPPR0   LIMIT+2,,AUTO
         2 010046   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 010047   000000 701000 xent               TSX1    XUD$UTS_ADJ_25TH
         2 010050   000000 011000                    NOP     0

     3740    15137    2       CALL XUD$UTS_DIFF (TICS, UTS, UTS_IN_DAYS);

  15137  2 010051   200141 630500                    EPPR0   UTS_IN_DAYS,,AUTO
         2 010052   200154 450500                    STP0    LIMIT+3,,AUTO
         2 010053   200057 631500                    EPPR1   UTS,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:447  
         2 010054   200153 451500                    STP1    LIMIT+2,,AUTO
         2 010055   200056 633500                    EPPR3   TICS,,AUTO
         2 010056   200152 453500                    STP3    LIMIT+1,,AUTO
         2 010057   200152 630500                    EPPR0   LIMIT+1,,AUTO
         2 010060   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 010061   000000 701000 xent               TSX1    XUD$UTS_DIFF
         2 010062   000000 011000                    NOP     0

     3741    15138    2       IF NOT TIMESPAN

  15138  2 010063   200102 234100                    SZN     TIMESPAN,,AUTO
         2 010064   010067 604000 2                  TMI     s:15141

     3742    15139    2       THEN
     3743    15140    2           DAYS = DAYS + %XUD#UTS_BASE;

  15140  2 010065   000034 236000 3                  LDQ     28
         2 010066   200055 056100                    ASQ     DAYS,,AUTO

     3744    15141    2       RETURN;

  15141  2 010067   200140 221300                    LDX1  ! OUT_FLAG,,AUTO
         2 010070   000001 702211                    TSX2  ! 1,X1

     3745    15142
     3746    15143    2   END FROM_UTS;
     3747    15144        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:448  
     3748    15145        /******************************************************************************/
     3749    15146        /*F*
     3750    15147        NAME:   CHK4SFX
     3751    15148        PURPOSE:
     3752    15149                Check for date/time suffix in a character string.
     3753    15150        */
     3754    15151        /*D*
     3755    15152        NAME:   CHK4SFX
     3756    15153        CALL:
     3757    15154                CALL CHK4SFX;
     3758    15155        INPUT:
     3759    15156                J - Current index into string.
     3760    15157                TEMP_CHARS - Character string to search (xlated to uppercase).
     3761    15158        OUTPUT:
     3762    15159                IDX - Returns code for suffix found.
     3763    15160                LEN - Length of suffix found (zero if none).
     3764    15161        INTERFACE:
     3765    15162                None.
     3766    15163        DESCRIPTION:
     3767    15164                This routine checks for a date (AD or BC) or time (AM or PM)
     3768    15165                suffix (with or without periods after each letter) at the
     3769    15166                specified offset in the character string being parsed.  It sets
     3770    15167                a code indicating the suffix found, if any, and its length.
     3771    15168        */
     3772    15169        /******************************************************************************/
     3773    15170
     3774    15171    1   CHK4SFX: PROC;

  15171  2 010071   200146 741300       CHK4SFX      STX1  ! DAYS_IN_25THS+4,,AUTO

     3775    15172
     3776    15173    2       CALL SEARCH( LEN, JUNK, B$SR_NON_BLANK, SUBSTR( CHARS, J ));

  15173  2 010072   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 010073   200075 136100                    SBLQ    J,,AUTO
         2 010074   000000 470400 xsym               LDP0    B$SR_NON_BLANK$
         2 010075   200011 471500                    LDP1    CHARS$,,AUTO
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:449  
         2 010076   000000 620006                    EAX0    0,QL
         2 010077   200075 235100                    LDA     J,,AUTO
         2 010100   000000 164545                    TCT
         2 010101   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=*X0
         2 010102   000000 000100                    ARG     0,,PR0
         2 010103   200100 000100                    ARG     LEN,,AUTO
         2 010104   200100 236100                    LDQ     LEN,,AUTO
         2 010105   000044 737000                    LLS     36
         2 010106   000033 771000                    ARL     27
         2 010107   200077 755100                    STA     JUNK,,AUTO
         2 010110   200100 551140                    STBA    LEN,'40'O,AUTO

     3777    15174    2       IF SUBSTR( TEMP_CHARS , J+LEN , 6 ) = 'B.C.E.'

  15174  2 010111   200075 236100                    LDQ     J,,AUTO
         2 010112   200100 036100                    ADLQ    LEN,,AUTO
         2 010113   040000 106506                    CMPC    fill='040'O
         2 010114   200012 000006                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=6
         2 010115   000300 000006 1                  ADSC9   MAX_DATE_INIT+11         cn=0,n=6
         2 010116   010124 601000 2                  TNZ     s:15180

     3778    15175    3       THEN DO;

     3779    15176    3           JUNK = 6;

  15176  2 010117   000006 236007                    LDQ     6,DL
         2 010120   200077 756100                    STQ     JUNK,,AUTO

     3780    15177    3           IDX = %XUD#SFX_B_C_E;

  15177  2 010121   000014 235007                    LDA     12,DL
         2 010122   200076 755100                    STA     IDX,,AUTO

     3781    15178    3       END;

  15178  2 010123   010271 710000 2                  TRA     s:15218

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:450  
     3782    15179    3       ELSE DO;

     3783    15180    3           JUNK = 4;

  15180  2 010124   000004 236007                    LDQ     4,DL
         2 010125   200077 756100                    STQ     JUNK,,AUTO

     3784    15181    4           DO SELECT( SUBSTR( TEMP_CHARS, J+LEN, 4 ));

  15181  2 010126   200075 236100                    LDQ     J,,AUTO
         2 010127   200100 036100                    ADLQ    LEN,,AUTO
         2 010130   040000 106506                    CMPC    fill='040'O
         2 010131   200012 000004                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=4
         2 010132   000274 000004 1                  ADSC9   MAX_DATE_INIT+7          cn=0,n=4
         2 010133   010147 602000 2                  TNC     s:15181+17
         2 010134   010164 600000 2                  TZE     s:15185
         2 010135   040000 106506                    CMPC    fill='040'O
         2 010136   200012 000004                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=4
         2 010137   000302 000004 1                  ADSC9   MAX_DATE_INIT+13         cn=0,n=4
         2 010140   010200 602000 2                  TNC     s:15193
         2 010141   010167 600000 2                  TZE     s:15187
         2 010142   040000 106506                    CMPC    fill='040'O
         2 010143   200012 000004                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=4
         2 010144   000306 000004 1                  ADSC9   MAX_DATE_INIT+17         cn=0,n=4
         2 010145   010200 601000 2                  TNZ     s:15193
         2 010146   010175 710000 2                  TRA     s:15191
         2 010147   040000 106506                    CMPC    fill='040'O
         2 010150   200012 000004                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=4
         2 010151   000275 000004 1                  ADSC9   MAX_DATE_INIT+8          cn=0,n=4
         2 010152   010200 602000 2                  TNC     s:15193
         2 010153   010161 600000 2                  TZE     s:15183
         2 010154   040000 106506                    CMPC    fill='040'O
         2 010155   200012 000004                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=4
         2 010156   000305 000004 1                  ADSC9   MAX_DATE_INIT+16         cn=0,n=4
         2 010157   010200 601000 2                  TNZ     s:15193
         2 010160   010172 710000 2                  TRA     s:15189

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:451  
     3785    15182    4           SELECT( 'A.D.' );

     3786    15183    4               IDX = %XUD#SFX_A_D;

  15183  2 010161   000002 235007                    LDA     2,DL
         2 010162   200076 755100                    STA     IDX,,AUTO
         2 010163   010271 710000 2                  TRA     s:15218

     3787    15184    4           SELECT( 'B.C.' );

     3788    15185    4               IDX = %XUD#SFX_B_C;

  15185  2 010164   000004 235007                    LDA     4,DL
         2 010165   200076 755100                    STA     IDX,,AUTO
         2 010166   010271 710000 2                  TRA     s:15218

     3789    15186    4           SELECT( 'C.E.' );

     3790    15187    4               IDX = %XUD#SFX_C_E;

  15187  2 010167   000012 235007                    LDA     10,DL
         2 010170   200076 755100                    STA     IDX,,AUTO
         2 010171   010271 710000 2                  TRA     s:15218

     3791    15188    4           SELECT( 'A.M.' );

     3792    15189    4               IDX = %XUD#SFX_A_M;

  15189  2 010172   000006 235007                    LDA     6,DL
         2 010173   200076 755100                    STA     IDX,,AUTO
         2 010174   010271 710000 2                  TRA     s:15218

     3793    15190    4           SELECT( 'P.M.' );

     3794    15191    4               IDX = %XUD#SFX_P_M;

  15191  2 010175   000010 235007                    LDA     8,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:452  
         2 010176   200076 755100                    STA     IDX,,AUTO
         2 010177   010271 710000 2                  TRA     s:15218

     3795    15192    4           SELECT( ELSE );

     3796    15193    4               IF SUBSTR( TEMP_CHARS , J+LEN , 3 ) = 'BCE'

  15193  2 010200   200075 236100                    LDQ     J,,AUTO
         2 010201   200100 036100                    ADLQ    LEN,,AUTO
         2 010202   040000 106506                    CMPC    fill='040'O
         2 010203   200012 000003                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=3
         2 010204   000276 000003 1                  ADSC9   MAX_DATE_INIT+9          cn=0,n=3
         2 010205   010213 601000 2                  TNZ     s:15199

     3797    15194    5               THEN DO;

     3798    15195    5                   JUNK = 3;

  15195  2 010206   000003 235007                    LDA     3,DL
         2 010207   200077 755100                    STA     JUNK,,AUTO

     3799    15196    5                   IDX = %XUD#SFX_BCE;

  15196  2 010210   000013 236007                    LDQ     11,DL
         2 010211   200076 756100                    STQ     IDX,,AUTO

     3800    15197    5               END;

  15197  2 010212   010271 710000 2                  TRA     s:15218

     3801    15198    5               ELSE DO;

     3802    15199    5                   JUNK = 2;

  15199  2 010213   000002 235007                    LDA     2,DL
         2 010214   200077 755100                    STA     JUNK,,AUTO

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:453  
     3803    15200    6                   DO SELECT( SUBSTR( TEMP_CHARS, J+LEN, 2 ));

  15200  2 010215   200075 236100                    LDQ     J,,AUTO
         2 010216   200100 036100                    ADLQ    LEN,,AUTO
         2 010217   040000 106506                    CMPC    fill='040'O
         2 010220   200012 000002                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=2
         2 010221   000272 000002 1                  ADSC9   MAX_DATE_INIT+5          cn=0,n=2
         2 010222   010236 602000 2                  TNC     s:15200+17
         2 010223   010253 600000 2                  TZE     s:15204
         2 010224   040000 106506                    CMPC    fill='040'O
         2 010225   200012 000002                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=2
         2 010226   000277 000002 1                  ADSC9   MAX_DATE_INIT+10         cn=0,n=2
         2 010227   010267 602000 2                  TNC     s:15212
         2 010230   010256 600000 2                  TZE     s:15206
         2 010231   040000 106506                    CMPC    fill='040'O
         2 010232   200012 000002                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=2
         2 010233   000304 000002 1                  ADSC9   MAX_DATE_INIT+15         cn=0,n=2
         2 010234   010267 601000 2                  TNZ     s:15212
         2 010235   010264 710000 2                  TRA     s:15210
         2 010236   040000 106506                    CMPC    fill='040'O
         2 010237   200012 000002                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=2
         2 010240   000273 000002 1                  ADSC9   MAX_DATE_INIT+6          cn=0,n=2
         2 010241   010267 602000 2                  TNC     s:15212
         2 010242   010250 600000 2                  TZE     s:15202
         2 010243   040000 106506                    CMPC    fill='040'O
         2 010244   200012 000002                    ADSC9   TEMP_CHARS,Q,AUTO        cn=0,n=2
         2 010245   000303 000002 1                  ADSC9   MAX_DATE_INIT+14         cn=0,n=2
         2 010246   010267 601000 2                  TNZ     s:15212
         2 010247   010261 710000 2                  TRA     s:15208

     3804    15201    6                   SELECT( 'AD' );

     3805    15202    6                       IDX = %XUD#SFX_AD;

  15202  2 010250   000001 236007                    LDQ     1,DL
         2 010251   200076 756100                    STQ     IDX,,AUTO
         2 010252   010271 710000 2                  TRA     s:15218
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:454  

     3806    15203    6                   SELECT( 'BC' );

     3807    15204    6                       IDX = %XUD#SFX_BC;

  15204  2 010253   000003 236007                    LDQ     3,DL
         2 010254   200076 756100                    STQ     IDX,,AUTO
         2 010255   010271 710000 2                  TRA     s:15218

     3808    15205    6                   SELECT( 'CE' );

     3809    15206    6                       IDX = %XUD#SFX_CE;

  15206  2 010256   000011 236007                    LDQ     9,DL
         2 010257   200076 756100                    STQ     IDX,,AUTO
         2 010260   010271 710000 2                  TRA     s:15218

     3810    15207    6                   SELECT( 'AM' );

     3811    15208    6                       IDX = %XUD#SFX_AM;

  15208  2 010261   000005 236007                    LDQ     5,DL
         2 010262   200076 756100                    STQ     IDX,,AUTO
         2 010263   010271 710000 2                  TRA     s:15218

     3812    15209    6                   SELECT( 'PM' );

     3813    15210    6                       IDX = %XUD#SFX_PM;

  15210  2 010264   000007 236007                    LDQ     7,DL
         2 010265   200076 756100                    STQ     IDX,,AUTO
         2 010266   010271 710000 2                  TRA     s:15218

     3814    15211    6                   SELECT( ELSE );

     3815    15212    6                       IDX = %XUD#SFX_NONE;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:455  
  15212  2 010267   200076 450100                    STZ     IDX,,AUTO

     3816    15213    6                       RETURN ;

  15213  2 010270   000001 702211                    TSX2  ! 1,X1

     3817    15214    6                   END/*SELECT*/;

     3818    15215    5               END;
     3819    15216    4           END/*SELECT*/;

     3820    15217    3       END;
     3821    15218    2       LEN = LEN + JUNK ;

  15218  2 010271   200100 236100                    LDQ     LEN,,AUTO
         2 010272   200077 036100                    ADLQ    JUNK,,AUTO
         2 010273   200100 756100                    STQ     LEN,,AUTO

     3822    15219    2       RETURN;

  15219  2 010274   000001 702211                    TSX2  ! 1,X1

     3823    15220
     3824    15221    2   END CHK4SFX;
     3825    15222        %EJECT;
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:456  
     3826    15223        /******************************************************************************/
     3827    15224        /*F*
     3828    15225        NAME:   RSEARCH
     3829    15226        PURPOSE:
     3830    15227                Avoid hardware glitch with SEARCHR.
     3831    15228        */
     3832    15229        /*D*
     3833    15230        NAME:   RSEARCH
     3834    15231        CALL:
     3835    15232                CALL RSEARCH ALTRET( all-blank );
     3836    15233        INPUT:
     3837    15234                CHAR_SIZE - The number of characters in the string to be searched.
     3838    15235                CHARS - The character string to be searched.
     3839    15236        OUTPUT:
     3840    15237                CHAR_SIZE - Adjusted to disregard trailing blanks.
     3841    15238        DESCRIPTION:
     3842    15239                The hardware may trap on a TCTR instruction that accesses the
     3843    15240                first doubleword of a segment that is not doubleword aligned.
     3844    15241                To avoid this, a SEARCHR call can only be used to scan the
     3845    15242                portion of the string after the first seven characters.  If
     3846    15243                a non-blank has not been found, the leading characters must be
     3847    15244                examined one by one.
     3848    15245
     3849    15246                This mainly (or solely) affects ARES, which uses a separate
     3850    15247                $PSn descriptor to frame each of its parameters.
     3851    15248        */
     3852    15249        /******************************************************************************/
     3853    15250
     3854    15251    1   RSEARCH: PROC ALTRET ;

  15251  2 010275   200142 741300       RSEARCH      STX1  ! DAYS_IN_25THS,,AUTO

     3855    15252
     3856    15253    2       IF CHAR_SIZE > 7

  15253  2 010276   200010 235100                    LDA     CHAR_SIZE,,AUTO
         2 010277   000007 115007                    CMPA    7,DL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:457  
         2 010300   010326 604400 2                  TMOZ    s:15262

     3857    15254    3       THEN DO;

     3858    15255    3           CALL SEARCHR( CHAR_SIZE , JUNK , B$SR_NON_BLANK , SUBSTR( CHARS , 7 ))

  15255  2 010301   777771 620005                    EAX0    -7,AL
         2 010302   200010 236100                    LDQ     CHAR_SIZE,,AUTO
         2 010303   000007 136007                    SBLQ    7,DL
         2 010304   000000 470400 xsym               LDP0    B$SR_NON_BLANK$
         2 010305   200011 471500                    LDP1    CHARS$,,AUTO
         2 010306   000000 165540                    TCTR
         2 010307   100001 600010                    ADSC9   1,,PR1                   cn=3,n=*X0
         2 010310   000000 000100                    ARG     0,,PR0
         2 010311   200010 000100                    ARG     CHAR_SIZE,,AUTO
         2 010312   200010 235100                    LDA     CHAR_SIZE,,AUTO
         2 010313   000033 771000                    ARL     27
         2 010314   200077 755100                    STA     JUNK,,AUTO
         2 010315   200010 551140                    STBA    CHAR_SIZE,'40'O,AUTO
         2 010316   010324 606400 2                  TTN     s:15260
         2 010317   200010 054100                    AOS     CHAR_SIZE,,AUTO
         2 010320   200010 156100                    SSQ     CHAR_SIZE,,AUTO

     3859    15256    4           WHENRETURN DO;

     3860    15257    4               CHAR_SIZE = CHAR_SIZE + 8 ;

  15257  2 010321   000010 236007                    LDQ     8,DL
         2 010322   200010 056100                    ASQ     CHAR_SIZE,,AUTO

     3861    15258    4               RETURN ;

  15258  2 010323   000001 702211                    TSX2  ! 1,X1

     3862    15259    4           END/*WHEN*/;
     3863    15260    3           CHAR_SIZE = 7 ;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:458  
  15260  2 010324   000007 235007                    LDA     7,DL
         2 010325   200010 755100                    STA     CHAR_SIZE,,AUTO

     3864    15261    3       END;

     3865    15262    3       DO WHILE SUBSTR( CHARS , CHAR_SIZE - 1 , 1 ) = %XUD#BLANK ;

  15262  2 010326   010334 710000 2                  TRA     s:15267

     3866    15263    3           CHAR_SIZE = CHAR_SIZE - 1 ;

  15263  2 010327   000001 336007                    LCQ     1,DL
         2 010330   200010 056100                    ASQ     CHAR_SIZE,,AUTO

     3867    15264    3           IF CHAR_SIZE = 0

  15264  2 010331   010334 601000 2                  TNZ     s:15267

     3868    15265    3           THEN
     3869    15266    3               ALTRETURN ;

  15266  2 010332   200142 221300                    LDX1  ! DAYS_IN_25THS,,AUTO
         2 010333   000000 702211                    TSX2  ! 0,X1

     3870    15267    3       END/*WHILE*/;

  15267  2 010334   200011 470500                    LDP0    CHARS$,,AUTO
         2 010335   200010 235100                    LDA     CHAR_SIZE,,AUTO
         2 010336   040000 106505                    CMPC    fill='040'O
         2 010337   077777 600001                    ADSC9   -1,A,PR0                 cn=3,n=1
         2 010340   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         2 010341   010327 600000 2                  TZE     s:15263

     3871    15268    2       RETURN ;

  15268  2 010342   200142 221300                    LDX1  ! DAYS_IN_25THS,,AUTO
         2 010343   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:459  
     3872    15269
     3873    15270    2   END RSEARCH ;
     3874    15271
     3875    15272    1   END XUD$CVT_DATE ;

PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:460  
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   XUD_PICTURE_M.:E05TOU  is referenced.
   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   XU_PERR_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XUD$CVT_DATE.
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:461  

 **** Variables and constants ****

  ****  Section 001 RoData XUD$CVT_DATE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    71-0-0/w SBIN        r     1 CUM_DAYS(0:11)
   105-0-0/w SBIN        r     1 CUM_DAYS_BC(0:11)
   261-0-0/c UBIN(9)     r     1 DEFAULT_PICTURE(0:5)
    45-0-0/w STRC        r     1 E_XUD#AMBIGUOUS_PIC       50-0-0/w STRC        r     1 E_XUD#BAD_DATE
    53-0-0/w STRC        r     1 E_XUD#BAD_DATE_D          56-0-0/w STRC        r     1 E_XUD#BAD_DATE_H
    57-0-0/w STRC        r     1 E_XUD#BAD_DATE_MI         52-0-0/w STRC        r     1 E_XUD#BAD_DATE_MO
    55-0-0/w STRC        r     1 E_XUD#BAD_DATE_Q          60-0-0/w STRC        r     1 E_XUD#BAD_DATE_S
    61-0-0/w STRC        r     1 E_XUD#BAD_DATE_T          54-0-0/w STRC        r     1 E_XUD#BAD_DATE_W
    51-0-0/w STRC        r     1 E_XUD#BAD_DATE_Y          40-0-0/w STRC        r     1 E_XUD#BAD_PIC
    63-0-0/w STRC        r     1 E_XUD#BAD_PICID           42-0-0/w STRC        r     1 E_XUD#BAD_PIC_QUOTE
    35-0-0/w STRC        r     1 E_XUD#BAD_PIC_SIZE        34-0-0/w STRC        r     1 E_XUD#BAD_SIZE
    62-0-0/w STRC        r     1 E_XUD#BAD_TIME            41-0-0/w STRC        r     1 E_XUD#BAD_TIME_PIC
    64-0-0/w STRC        r     1 E_XUD#DUP_PICID           47-0-0/w STRC        r     1 E_XUD#EXCESS_CHARS
    43-0-0/w STRC        r     1 E_XUD#LONG_PICID          65-0-0/w STRC        r     1 E_XUD#NO_PICIDS
    36-0-0/w STRC        r     1 E_XUD#OVERFLOW            66-0-0/w STRC        r     1 E_XUD#PICID_ORDER
    44-0-0/w STRC        r     1 E_XUD#RUNON_PICID         46-0-0/w STRC        r     1 E_XUD#SHORT_CHAR
    37-0-0/w STRC        r     1 E_XUD#UNDERFLOW           67-0-0/w STRC        r     1 E_XUD#UNINIT_PIC
     0-0-0/d STRC(432)   r     1 FPT_TIME_C               265-0-0/c CHAR(8)     r     1 MAX_DATE
   265-0-0/b BIT (72)    r     1 MAX_DATE_INIT            263-0-0/c CHAR(4)     r     1 MAX_UTS
   263-0-0/b BIT         r     1 MAX_UTS_INIT             264-0-0/c CHAR(4)     r     1 MIN_UTS
   264-0-0/b BIT         r     1 MIN_UTS_INIT             151-0-0/c STRC(774)   r     1 MONTH
   135-0-0/w PTR         r     1 MONTH$(0:11)
   177-0-0/w UBIN        r     1 MONTH_SIZE(0:11)
   121-0-0/w SBIN        r     1 MON_DAYS(0:11)
   251-0-0/c STRC(261)   r     1 SPECIAL
   245-0-0/w PTR         r     1 SPECIAL$(0:3)
   241-0-0/w UBIN        r     1 SPECIAL_SIZE(0:3)
   222-0-0/c STRC(513)   r     1 WEEKDAY
   213-0-0/w PTR         r     1 WEEKDAY$(0:6)
    14-0-0/c UBIN(9)     r     1 XUD_VALID(0:63)
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:462  

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   137-0-0/w PTR         r     1 @ADDR$                     4-0-0/w PTR         r     1 @DATA_IN
     5-0-0/w PTR         r     1 @DATA_OUT                150-0-0/w PTR         r     1 @MAX
   147-0-0/w PTR         r     1 @NUM                     141-0-0/w PTR         r     1 @TEXTC$
     3-0-0/w PTR         r     1 @XUD_PARAM                *0-0-0/w PTR         r     1 ADDR$
   137-0-0/b BIT         r     1 BLANK                     11-0-0/w PTR         r     1 CHARS$
    10-0-0/w SBIN        r     1 CHAR_SIZE                141-0-0/b BIT         r     1 COMMITTED
    *0-0-0/c CHAR(64)    r     1 DATA_IN                   *0-0-0/c CHAR(64)    r     1 DATA_OUT
    55-0-0/w SBIN        r     1 DAYS                     142-0-0/w UBIN        r     1 DAYS_IN_25THS
   103-0-0/b BIT         r     1 ERR                       60-0-0/w STRC(432)   r     1 FLDS
   116-0-0/d STRC(432)   r     1 FPT@TIME                  74-0-0/w SBIN        r     1 I
    76-0-0/w SBIN        r     1 IDX                       75-0-0/w SBIN        r     1 J
    77-0-0/w UBIN        r     1 JUNK                     100-0-0/w SBIN        r     1 LEN
    52-0-0/c CHAR(12)    r     1 LIMBO                    151-0-0/w SBIN        r     1 LIMIT
    *0-0-0/w SBIN        r     1 MAX                      114-0-0/w SBIN        r     1 MAXSIZE
   101-0-0/w SBIN        r     1 NUM                       *0-0-0/w SBIN        r     1 NUM
   140-0-0/b BIT         r     1 OUT_FLAG                 105-0-0/w UBIN(9)     r     1 PICID
   113-0-0/w SBIN        r     1 PICID_H                  110-0-0/b BIT         r     1 PICID_SWITCH
   107-0-0/b BIT (18)    r     1 PICID_USED                 6-0-0/w PTR         r     1 PICTURE$
   106-0-0/c CHAR        r     1 PICTYPE                  104-0-0/c CHAR        r     1 PIC_CHAR
     7-0-0/w SBIN        r     1 PIC_SIZE                 132-0-0/c STRC(54)    r     1 SYSTEM_DATE
   134-0-0/w SBIN        r     1 SYSTEM_YEAR               12-0-0/c CHAR(64)    r     1 TEMP_CHARS
    32-0-0/c CHAR(64)    r     1 TEMP_PICTURE              *0-0-0/w PTR         r     1 TEXTC$
    56-0-0/w SBIN        r     1 TICS                     102-0-0/b BIT         r     1 TIMESPAN
   112-0-0/b BIT (18)    r     1 USED_BEFORE              111-0-0/b BIT (18)    r     1 USED_FLAG
    57-0-0/w UBIN        r     1 UTS                       57-0-0/w CHAR(4)     r     1 UTS_CHR4
   141-0-0/w UBIN        r     1 UTS_IN_DAYS               *0-0-0/w STRC(288)   r     1 XUD_PARAM

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:463  

     0-0-0/w PTR         r     1 B$SR_NON_ALPHA$            0-0-0/w PTR         r     1 B$SR_NON_BLANK$
     0-0-0/w PTR         r     1 B$SR_NON_DEC$              0-0-0/w PTR         r     1 B$SR_NON_ZERO$
     0-0-0/w PTR         r     1 B$XL_LOWER_UR$             0-0-0/w PTR         r     1 B$XL_UPPER_UR$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 B$SR_NON_ALPHA             0-0-0/d STRC(4608)  r     1 B$SR_NON_BLANK
     0-0-0/d STRC(4608)  r     1 B$SR_NON_DEC               0-0-0/d STRC(4608)  r     1 B$SR_NON_ZERO
     0-0-0/d STRC(4608)  r     1 B$XL_LOWER_UR              0-0-0/d STRC(4608)  r     1 B$XL_UPPER_UR
     0-0-0/c ACHR        r     1 CHARS                      0-0-0/c STRC(576)   r     1 PICTURE
     0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure XUD$CVT_DATE requires 4324 words for executable code.
   Procedure XUD$CVT_DATE requires 116 words of local(AUTO) storage.

    No errors detected in file XUD$CVT_DATE.:E05TSI    .
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:464  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:465  
          MINI XREF LISTING

ADDR$ IN PROCEDURE SETUP_CHARS_IN
     12896**DCL     12894--PROC    12904>>ASSIGN  12909>>ASSIGN  12912>>ASSIGN  12953--ENTRY
ALT IN PROCEDURE CHK4END
     14949**LABEL   14946--GOTO
ALT IN PROCEDURE CVT_FROM_CHAR
     14304**LABEL   13920--CALLALT 13946--CALLALT 14270--GOTO    14277--GOTO    14280--GOTO    14283--GOTO
     14286--GOTO    14289--GOTO    14292--GOTO    14295--GOTO    14298--GOTO    14301--GOTO
ALT IN PROCEDURE CVT_FROM_DEFAULT
     14624**LABEL   14589--CALLALT 14598--CALLALT 14603--GOTO    14611--GOTO    14616--CALLALT
ALT IN PROCEDURE CVT_TO_CHAR
     13577**LABEL   13205--CALLALT
ALT IN PROCEDURE CVT_XX
     14349**LABEL   14334--CALLALT 14336--GOTO    14354--CALLALT 14356--GOTO    14362--CALLALT 14364--GOTO
     14372--GOTO    14378--GOTO    14383--GOTO    14390--GOTO    14396--GOTO    14401--GOTO    14407--GOTO
     14413--GOTO    14424--CALLALT 14426--GOTO    14432--CALLALT 14434--GOTO    14440--CALLALT 14442--GOTO
     14448--CALLALT
ALT IN PROCEDURE PARSE_DATE
     14803**LABEL   14782--GOTO    14785--GOTO    14788--GOTO    14791--GOTO    14794--GOTO    14797--GOTO
     14800--GOTO    14848--CALLALT 14863--CALLALT 14875--CALLALT
ALT IN PROCEDURE SETUP_PICTURE
     13014**LABEL   12993--GOTO    13010--GOTO
B$SR_NON_ALPHA
      9592**DCL     13912>>CALLBLT 14370>>CALLBLT 14388>>CALLBLT
B$SR_NON_ALPHA$
      9591**DCL      9592--IMP-PTR 13912>>CALLBLT 14370>>CALLBLT 14388>>CALLBLT
B$SR_NON_BLANK
      9584**DCL     12023>>CALLBLT 12925>>CALLBLT 14101>>CALLBLT 14408>>CALLBLT 14416>>CALLBLT 14417>>CALLBLT
     14732>>CALLBLT 14758>>CALLBLT 15173>>CALLBLT 15255>>CALLBLT
B$SR_NON_BLANK$
      9583**DCL      9584--IMP-PTR 12023>>CALLBLT 12925>>CALLBLT 14101>>CALLBLT 14408>>CALLBLT 14416>>CALLBLT
     14417>>CALLBLT 14732>>CALLBLT 14758>>CALLBLT 15173>>CALLBLT 15255>>CALLBLT
B$SR_NON_DEC
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:466  
      9596**DCL     14492>>CALLBLT 15009>>CALLBLT
B$SR_NON_DEC.C
      9596**DCL     13961>>IF      13997>>IF
B$SR_NON_DEC$
      9595**DCL      9596--IMP-PTR 13961>>IF      13997>>IF      14492>>CALLBLT 15009>>CALLBLT
B$SR_NON_ZERO
      9588**DCL     13237>>CALLBLT 13242>>CALLBLT 13449>>CALLBLT 13716>>CALLBLT
B$SR_NON_ZERO$
      9587**DCL      9588--IMP-PTR 13237>>CALLBLT 13242>>CALLBLT 13449>>CALLBLT 13716>>CALLBLT
B$XL_LOWER_UR
      9600**DCL     13279>>CALLBLT 13291>>CALLBLT
B$XL_LOWER_UR$
      9599**DCL      9600--IMP-PTR 13279>>CALLBLT 13291>>CALLBLT
B$XL_UPPER_UR
      9604**DCL     12003>>CALLBLT 13887>>CALLBLT
B$XL_UPPER_UR$
      9603**DCL      9604--IMP-PTR 12003>>CALLBLT 13887>>CALLBLT
BLANK IN PROCEDURE CVT_FROM_CHAR
     13885**DCL     13892<<ASSIGN  14097<<ASSIGN  14102>>IF      14120<<ASSIGN  14131<<ASSIGN
CHARS
     10016**DCL     12003>>CALLBLT 12023>>CALLBLT 12033>>CALLBLT 12035>>IF      12038>>ASSIGN  12042>>CALLBLT
     12045>>ASSIGN  12073>>IF      12231>>IF      12234>>IF      12305>>IF      12308>>IF      12470>>ASSIGN
     12920<<ASSIGN  12925>>CALLBLT 13079<<ASSIGN  13246<<ASSIGN  13279<<CALLBLT 13279>>CALLBLT 13291<<CALLBLT
     13291>>CALLBLT 13382<<ASSIGN  13384<<ASSIGN  13391<<ASSIGN  13393<<ASSIGN  13412<<ASSIGN  13417<<ASSIGN
     13425<<ASSIGN  13430<<ASSIGN  13538<<ASSIGN  13540<<ASSIGN  13546<<ASSIGN  13548<<ASSIGN  13557<<ASSIGN
     13647<<CALLBLT 13673<<ASSIGN  13728<<ASSIGN  13754<<ASSIGN  13764<<ASSIGN  13785<<ASSIGN  13800<<ASSIGN
     13812<<ASSIGN  13817<<ASSIGN  13887>>CALLBLT 13899>>IF      13899>>IF      13903>>IF      13963>>CALLBLT
     13999>>CALLBLT 14101>>CALLBLT 14123>>IF      14408>>CALLBLT 14410>>IF      14416>>CALLBLT 14417>>CALLBLT
     14492>>CALLBLT 14495>>CALLBLT 14665>>CALLBLT 14672>>IF      14679>>IF      14692>>CALLBLT 14699>>IF
     14706>>IF      14732>>CALLBLT 14740>>IF      14758>>CALLBLT 14842>>IF      14859>>IF      14871>>IF
     14928>>IF      14928>>IF      14997>>CALLBLT 15000>>CALLBLT 15009>>CALLBLT 15012>>CALLBLT 15027>>IF
     15040>>IF      15052>>IF      15173>>CALLBLT 15255>>CALLBLT 15262>>DOWHILE
CHARS$
     10015**DCL     10016--IMP-PTR 11988<<ASSIGN  11992<<ASSIGN  12003>>CALLBLT 12023>>CALLBLT 12033>>CALLBLT
     12035>>IF      12038>>ASSIGN  12042>>CALLBLT 12045>>ASSIGN  12073>>IF      12231>>IF      12234>>IF
     12305>>IF      12308>>IF      12470>>ASSIGN  12904<<ASSIGN  12912<<ASSIGN  12920>>ASSIGN  12925>>CALLBLT
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:467  
     12928<<ASSIGN  12928>>ASSIGN  13079>>ASSIGN  13246>>ASSIGN  13279>>CALLBLT 13279>>CALLBLT 13291>>CALLBLT
     13291>>CALLBLT 13382>>ASSIGN  13384>>ASSIGN  13391>>ASSIGN  13393>>ASSIGN  13412>>ASSIGN  13417>>ASSIGN
     13425>>ASSIGN  13430>>ASSIGN  13538>>ASSIGN  13540>>ASSIGN  13546>>ASSIGN  13548>>ASSIGN  13557>>ASSIGN
     13647>>CALLBLT 13673>>ASSIGN  13728>>ASSIGN  13754>>ASSIGN  13764>>ASSIGN  13785>>ASSIGN  13800>>ASSIGN
     13812>>ASSIGN  13817>>ASSIGN  13887>>CALLBLT 13899>>IF      13899>>IF      13903>>IF      13963>>CALLBLT
     13999>>CALLBLT 14101>>CALLBLT 14123>>IF      14408>>CALLBLT 14410>>IF      14416>>CALLBLT 14417>>CALLBLT
     14492>>CALLBLT 14495>>CALLBLT 14665>>CALLBLT 14672>>IF      14679>>IF      14692>>CALLBLT 14699>>IF
     14706>>IF      14732>>CALLBLT 14740>>IF      14758>>CALLBLT 14842>>IF      14859>>IF      14871>>IF
     14928>>IF      14928>>IF      14997>>CALLBLT 15000>>CALLBLT 15009>>CALLBLT 15012>>CALLBLT 15027>>IF
     15040>>IF      15052>>IF      15173>>CALLBLT 15255>>CALLBLT 15262>>DOWHILE
CHAR_SIZE
     10014**DCL     10016--IMP-SIZ 11989<<ASSIGN  11993<<ASSIGN  11997>>IF      11997>>IF      12003>>CALLBLT
     12023>>CALLBLT 12024>>DOWHILE 12031>>IF      12033>>CALLBLT 12034>>DOWHILE 12035>>IF      12038>>ASSIGN
     12042>>CALLBLT 12045>>ASSIGN  12073>>IF      12096>>DOWHILE 12231>>IF      12234>>IF      12305>>IF
     12308>>IF      12470>>ASSIGN  12907<<ASSIGN  12909<<ASSIGN  12913<<ASSIGN  12915>>IF      12920>>ASSIGN
     12922>>IF      12925>>CALLBLT 12929<<ASSIGN  12929>>ASSIGN  13079>>ASSIGN  13246>>ASSIGN  13279>>CALLBLT
     13279>>CALLBLT 13291>>CALLBLT 13291>>CALLBLT 13382>>ASSIGN  13384>>ASSIGN  13391>>ASSIGN  13393>>ASSIGN
     13412>>ASSIGN  13417>>ASSIGN  13425>>ASSIGN  13430>>ASSIGN  13538>>ASSIGN  13540>>ASSIGN  13546>>ASSIGN
     13548>>ASSIGN  13557>>ASSIGN  13598>>IF      13647>>CALLBLT 13673>>ASSIGN  13723>>IF      13728>>ASSIGN
     13748>>IF      13754>>ASSIGN  13764>>ASSIGN  13770>>IF      13783>>IF      13785>>ASSIGN  13798>>IF
     13800>>ASSIGN  13812>>ASSIGN  13817>>ASSIGN  13887>>CALLBLT 13899>>IF      13899>>IF      13901>>IF
     13903>>IF      13929>>IF      13963>>CALLBLT 13999>>CALLBLT 14101>>CALLBLT 14123>>IF      14123>>IF
     14138>>IF      14406>>IF      14408>>CALLBLT 14409>>IF      14410>>IF      14414>>IF      14416>>CALLBLT
     14417>>CALLBLT 14491>>IF      14492>>CALLBLT 14492>>CALLBLT 14495>>CALLBLT 14595>>IF      14613>>IF
     14665>>CALLBLT 14670>>IF      14672>>IF      14677>>IF      14679>>IF      14692>>CALLBLT 14697>>IF
     14699>>IF      14704>>IF      14706>>IF      14730>>IF      14732>>CALLBLT 14738>>IF      14740>>IF
     14756>>IF      14758>>CALLBLT 14840>>IF      14842>>IF      14857>>IF      14859>>IF      14869>>IF
     14871>>IF      14918>>IF      14928>>IF      14928>>IF      14997>>CALLBLT 15000>>CALLBLT 15003>>IF
     15009>>CALLBLT 15012>>CALLBLT 15014>>IF      15025>>IF      15027>>IF      15031>>IF      15038>>IF
     15040>>IF      15043>>IF      15050>>IF      15052>>IF      15055>>IF      15173>>CALLBLT 15253>>IF
     15255<<CALLBLT 15255>>CALLBLT 15257<<ASSIGN  15257>>ASSIGN  15260<<ASSIGN  15262>>DOWHILE 15262>>DOWHILE
     15263<<ASSIGN  15263>>ASSIGN  15264>>IF
CHECK_SIZE IN PROCEDURE CVT_TO_CHAR
     13596**PROC    13228--CALL    13233--CALL    13245--CALL    13258--CALL    13267--CALL    13276--CALL
     13288--CALL    13341--CALL    13356--CALL    13370--CALL    13379--CALL    13388--CALL    13411--CALL
     13416--CALL    13424--CALL    13429--CALL    13535--CALL    13543--CALL    13556--CALL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:468  
CHK4END IN PROCEDURE PARSE_DATE
     14915**PROC    14848--CALL    14863--CALL    14875--CALL    14881--CALL
CHK4SFX
     15171**PROC    12344--CALL    14018--CALL    14082--CALL    14921--CALL
COMMITTED IN PROCEDURE CVT_FROM_DEFAULT
     14585**DCL     14591<<ASSIGN  14602>>IF      14609>>IF      14667<<ASSIGN  14694<<ASSIGN  14718<<ASSIGN
     14728<<ASSIGN  14762<<ASSIGN  14774<<ASSIGN  14844<<ASSIGN  14851<<ASSIGN
COMMON IN PROCEDURE CVT_TO_NUM
     14489**LABEL   14520--GOTO
COMMON IN PROCEDURE SETUP_CHARS_IN
     12900**LABEL   12956--GOTO
CONVERT IN PROCEDURE CVT_TO_CHAR
     13196**LABEL   13171--GOTO
CONVERT_TIME IN PROCEDURE CVT_TO_CHAR
     13199**LABEL   13082--GOTO
CUM_DAYS
     11806**DCL     13192>>IF      13195>>ASSIGN  14183>>ASSIGN  14195>>IF      14198>>ASSIGN  14222>>ASSIGN
CUM_DAYS_BC
     11808**DCL     14249>>ASSIGN
CVTNUM IN PROCEDURE CVT_TO_CHAR
     13256**LABEL   13253--GOTO    13299--GOTO    13303--GOTO    13314--GOTO    13318--GOTO    13325--GOTO
     13462--GOTO    13466--GOTO    13472--GOTO    13478--GOTO    13488--GOTO    13492--GOTO    13502--GOTO
     13506--GOTO    13522--GOTO    13526--GOTO
CVT_1ST_NUM IN PROCEDURE CVT_TO_NUM
     14511**ENTRY   14033--CALL    14048--CALL    14057--CALL    14066--CALL    14075--CALL
CVT_DD IN PROCEDURE CVT_XX
     14360**ENTRY   13985--CALL    14675--CALL    14709--CALL    14734--CALL    14754--CALL    14773--CALL
CVT_FROM_CHAR
     13883**PROC    12560--CALL    12619--CALL
CVT_FROM_DEFAULT IN PROCEDURE CVT_FROM_CHAR
     14583**PROC    13946--CALL
CVT_FROM_NUM IN PROCEDURE CVT_TO_CHAR
     13645**PROC    13229--CALL    13234--CALL    13259--CALL    13758--CALL    13774--CALL    13789--CALL
     13804--CALL
CVT_HH IN PROCEDURE CVT_XX
     14422**ENTRY   14038--CALL    14838--CALL    15023--CALL
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:469  
CVT_MI IN PROCEDURE CVT_XX
     14430**ENTRY   14055--CALL    14855--CALL    15036--CALL
CVT_MMM IN PROCEDURE CVT_XX
     14368**ENTRY   13980--CALL    14726--CALL    14760--CALL
CVT_MO IN PROCEDURE CVT_XX
     14352**ENTRY   13977--CALL    14668--CALL    14702--CALL    14771--CALL
CVT_SS IN PROCEDURE CVT_XX
     14438**ENTRY   14064--CALL    14867--CALL    15048--CALL
CVT_SWITCH IN PROCEDURE CVT_XX
     14404**ENTRY   14095--CALL    14597--CALL    14615--CALL    14737--CALL
CVT_TO_CHAR
     13065**PROC    12674--CALL    12709--CALL    12865--CALL
CVT_TO_NUM IN PROCEDURE CVT_FROM_CHAR
     14483**PROC    13970--CALL    13990--CALL    14040--CALL    14334--CALL    14354--CALL    14362--CALL
     14424--CALL    14432--CALL    14440--CALL    14448--CALL    14682--CALL
CVT_TO_SPAN IN PROCEDURE CVT_TO_CHAR
     13707**PROC    13205--CALL
CVT_TT IN PROCEDURE CVT_XX
     14446**ENTRY   14073--CALL    14879--CALL    15060--CALL
CVT_WWW IN PROCEDURE CVT_XX
     14386**ENTRY   14010--CALL    14716--CALL
CVT_YY IN PROCEDURE CVT_XX
     14332**ENTRY   13968--CALL    14685--CALL    14695--CALL    14746--CALL    14769--CALL
DATA_IN
     10002**DCL        76--PROC    11981--ENTRY   11988--ASSIGN  11989--ASSIGN  11992--ASSIGN  12556--ENTRY
     12558--CALL    12615--ENTRY   12617--CALL    12668--ENTRY   12672>>ASSIGN  12704--ENTRY   12708<>CALL
     12736--ENTRY   12738<>CALL    12766--ENTRY   12768>>ASSIGN  12797--ENTRY   12800<<ASSIGN  12826--ENTRY
     12830<>CALL    12859--ENTRY   12862--CALL
DATA_OUT
     10004**DCL        76--PROC    11981--ENTRY   11995--ASSIGN  12556--ENTRY   12570<<ASSIGN  12579<<ASSIGN
     12585<<ASSIGN  12615--ENTRY   12620<>CALL    12627<>CALL    12631<<ASSIGN  12637<<ASSIGN  12668--ENTRY
     12670--CALL    12704--ENTRY   12706--CALL    12736--ENTRY   12766--ENTRY   12771<>CALL    13566--ASSIGN
     13574--ASSIGN
DATE_AD IN PROCEDURE CVT_TO_CHAR
     13372**LABEL   13397--GOTO
DATE_ALTRETURN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:470  
     12627**LABEL   12619--CALLALT
DATE_A_D IN PROCEDURE CVT_TO_CHAR
     13378**LABEL   13403--GOTO
DATE_BCE IN PROCEDURE CVT_TO_CHAR
     13405**LABEL   13435--GOTO
DATE_B_C_E IN PROCEDURE CVT_TO_CHAR
     13415**LABEL   13440--GOTO
DATE_M_IC IN PROCEDURE CVT_TO_CHAR
     13274**LABEL   13272--GOTO
DATE_M_LC IN PROCEDURE CVT_TO_CHAR
     13286**LABEL   13284--GOTO
DATE_M_UC IN PROCEDURE CVT_TO_CHAR
     13265**LABEL   13263--GOTO
DATE_OVERFLOW
     12631**LABEL   12620--CALLALT 12627--CALLALT
DATE_UNDEFINED
     12624**LABEL   12617--CALLALT 12618--CALLALT 12828--CALLALT
DATE_W_IC IN PROCEDURE CVT_TO_CHAR
     13354**LABEL   13346--GOTO    13349--GOTO    13352--GOTO
DATE_W_LC IN PROCEDURE CVT_TO_CHAR
     13368**LABEL   13363--GOTO    13366--GOTO
DATE_W_UC IN PROCEDURE CVT_TO_CHAR
     13339**LABEL   13331--GOTO    13334--GOTO    13337--GOTO
DAYS
     10022**DCL     12563<<ASSIGN  12563>>ASSIGN  12564>>IF      12566>>IF      12568>>CALL    12620<>CALL
     12624<<ASSIGN  12627<>CALL    12632>>IF      12708<>CALL    12738<>CALL    12771<>CALL    12830<>CALL
     13075>>IF      13077<<ASSIGN  13077>>ASSIGN  13106>>IF      13111<<ASSIGN  13111>>ASSIGN  13114>>ASSIGN
     13117>>ASSIGN  13130>>ASSIGN  13131>>ASSIGN  13138>>ASSIGN  13146>>ASSIGN  13446>>ASSIGN  13480>>ASSIGN
     13494>>ASSIGN  13508>>ASSIGN  13528>>ASSIGN  13713>>IF      13715>>CALLBLT 13745>>IF      13750>>IF
     13752>>IF      13890<<ASSIGN  13925<<ASSIGN  13925>>ASSIGN  13926<<ASSIGN  13926>>ASSIGN  14146<<ASSIGN
     14152<<ASSIGN  14152>>ASSIGN  14222<<ASSIGN  14225<<ASSIGN  14225>>ASSIGN  14228<<ASSIGN  14228>>ASSIGN
     14230<<ASSIGN  14230>>ASSIGN  14237>>ASSIGN  14241<<ASSIGN  14241>>ASSIGN  14244>>IF      14249<<ASSIGN
     14253<<ASSIGN  14253>>ASSIGN  14256<<ASSIGN  14256>>ASSIGN  14258<<ASSIGN  14258>>ASSIGN  14264>>IF
     15135<<ASSIGN  15136>>CALL    15140<<ASSIGN  15140>>ASSIGN
DAYS_IN_25THS IN PROCEDURE FROM_UTS
     15132**DCL     15134<>CALL    15135>>ASSIGN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:471  
DEFAULT_PICTURE
     11926**DCL     13209--ASSIGN  13210--ASSIGN
DONE IN PROCEDURE CVT_TO_CHAR
     13563**LABEL   13206--GOTO
ERR
     10050**DCL     11943<<ASSIGN  11945>>ASSIGN  11999<<ASSIGN  12005<<ASSIGN  12444<<ASSIGN  12492<<ASSIGN
     12504<<ASSIGN  12505<<ASSIGN  12508<<ASSIGN  12511<<ASSIGN  12514<<ASSIGN  12517<<ASSIGN  12521<<ASSIGN
     12522<<ASSIGN  12525<<ASSIGN  12571>>IF      12576>>IF      12577<<ASSIGN  12583>>IF      12584<<ASSIGN
     12634<<ASSIGN  12636<<ASSIGN  12739<<ASSIGN  12937<<ASSIGN  12992<<ASSIGN  13009<<ASSIGN  13013<<ASSIGN
     13576<<ASSIGN  13725<<ASSIGN  13889<<ASSIGN  13931<<ASSIGN  14139<<ASSIGN  14269>>IF      14275<<ASSIGN
     14276<<ASSIGN  14279<<ASSIGN  14282<<ASSIGN  14285<<ASSIGN  14288<<ASSIGN  14291<<ASSIGN  14294<<ASSIGN
     14297<<ASSIGN  14300<<ASSIGN  14303<<ASSIGN  14604<<ASSIGN  14623<<ASSIGN  14781<<ASSIGN  14784<<ASSIGN
     14787<<ASSIGN  14790<<ASSIGN  14793<<ASSIGN  14796<<ASSIGN  14799<<ASSIGN  14802<<ASSIGN  14883<<ASSIGN
     14945<<ASSIGN  14948<<ASSIGN
ERROR_RETURN
     11943**LABEL   12000--GOTO    12445--GOTO    12493--GOTO    12506--GOTO    12509--GOTO    12512--GOTO
     12515--GOTO    12518--GOTO    12523--GOTO    12526--GOTO    12572--GOTO    12580--GOTO    12586--GOTO
     12628--GOTO    12639--GOTO    12670--CALLALT 12671--CALLALT 12674--CALLALT 12706--CALLALT 12707--CALLALT
     12709--CALLALT 12861--CALLALT 12862--CALLALT 12863--CALLALT 12865--CALLALT
E_BAD_DATE IN PROCEDURE CHK4END
     14945**LABEL   14930--GOTO
E_BAD_DATE IN PROCEDURE CVT_FROM_CHAR
     14274**LABEL   14116--GOTO    14125--GOTO
E_BAD_DATE IN PROCEDURE CVT_FROM_DEFAULT
     14623**LABEL   14597--CALLALT 14610--GOTO    14615--CALLALT
E_BAD_DATE IN PROCEDURE PARSE_DATE
     14802**LABEL   14671--GOTO    14673--GOTO    14698--GOTO    14700--GOTO    14705--GOTO    14707--GOTO
     14731--GOTO    14757--GOTO    14769--CALLALT 14771--CALLALT 14773--CALLALT 14841--GOTO    14850--GOTO
E_BAD_DATE_D IN PROCEDURE CVT_FROM_CHAR
     14285**LABEL   13902--GOTO    13985--CALLALT 13990--CALLALT 13992--GOTO    14033--CALLALT 14193--GOTO
     14209--GOTO
E_BAD_DATE_D IN PROCEDURE PARSE_DATE
     14787**LABEL   14675--CALLALT 14709--CALLALT 14734--CALLALT 14776--GOTO    15011--GOTO
E_BAD_DATE_H IN PROCEDURE CHK4END
     14948**LABEL   14938--GOTO
E_BAD_DATE_H IN PROCEDURE CVT_FROM_CHAR
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:472  
     14294**LABEL   14038--CALLALT 14040--CALLALT 14046--GOTO    14048--CALLALT
E_BAD_DATE_H IN PROCEDURE PARSE_DATE
     14790**LABEL   14838--CALLALT 15004--GOTO    15023--CALLALT 15026--GOTO    15028--GOTO
E_BAD_DATE_MI IN PROCEDURE CVT_FROM_CHAR
     14297**LABEL   14055--CALLALT 14057--CALLALT
E_BAD_DATE_MI IN PROCEDURE PARSE_DATE
     14793**LABEL   14855--CALLALT 15036--CALLALT
E_BAD_DATE_MO IN PROCEDURE CVT_FROM_CHAR
     14282**LABEL   13977--CALLALT 13980--CALLALT
E_BAD_DATE_MO IN PROCEDURE PARSE_DATE
     14784**LABEL   14668--CALLALT 14702--CALLALT
E_BAD_DATE_Q IN PROCEDURE CVT_FROM_CHAR
     14288**LABEL   13998--GOTO    14002--GOTO
E_BAD_DATE_S IN PROCEDURE CVT_FROM_CHAR
     14300**LABEL   14064--CALLALT 14066--CALLALT
E_BAD_DATE_S IN PROCEDURE PARSE_DATE
     14796**LABEL   14867--CALLALT 15048--CALLALT
E_BAD_DATE_T IN PROCEDURE CVT_FROM_CHAR
     14303**LABEL   14073--CALLALT 14075--CALLALT
E_BAD_DATE_T IN PROCEDURE PARSE_DATE
     14799**LABEL   14879--CALLALT 15060--CALLALT
E_BAD_DATE_W IN PROCEDURE CVT_FROM_CHAR
     14291**LABEL   14010--CALLALT 14245--GOTO    14265--GOTO
E_BAD_DATE_Y IN PROCEDURE CVT_FROM_CHAR
     14279**LABEL   13962--GOTO    13968--CALLALT 13970--CALLALT 13972--GOTO
E_BAD_DATE_Y IN PROCEDURE PARSE_DATE
     14781**LABEL   14685--CALLALT 14695--CALLALT 14746--CALLALT
E_BAD_PIC
     12503**LABEL   12055--GOTO    12074--GOTO    12124--GOTO    12469--GOTO
E_BAD_PICID
     12520**LABEL   12404--GOTO
E_BAD_PIC_QUOTE
     12511**LABEL   12032--GOTO    12033--CALLALT 12042--CALLALT
E_BAD_SIZE IN PROCEDURE SETUP_CHARS_IN
     12937**LABEL   12916--GOTO    12923--GOTO    12924--CALLALT
E_DUP_PICID
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:473  
     12517**LABEL   12420--GOTO
E_LONG_PICID
     12514**LABEL   12106--GOTO    12153--GOTO    12170--GOTO    12185--GOTO    12206--GOTO    12246--GOTO
     12263--GOTO    12280--GOTO    12333--GOTO
E_NO_PICIDS
     12525**LABEL   12002--CALLALT 12057--GOTO    12496--GOTO
E_PICID_ORDER
     12508**LABEL   12145--GOTO    12162--GOTO    12198--GOTO    12255--GOTO    12272--GOTO    12411--GOTO
E_SHORT_CHAR IN PROCEDURE CVT_TO_CHAR
     13572**LABEL   13228--CALLALT 13233--CALLALT 13245--CALLALT 13258--CALLALT 13267--CALLALT 13276--CALLALT
     13288--CALLALT 13341--CALLALT 13356--CALLALT 13370--CALLALT 13379--CALLALT 13388--CALLALT 13411--CALLALT
     13416--CALLALT 13424--CALLALT 13429--CALLALT 13535--CALLALT 13543--CALLALT 13556--CALLALT
E_XUD#AMBIGUOUS_PIC
     10796**DCL     12492>>ASSIGN
E_XUD#BAD_DATE
     10957**DCL     14276>>ASSIGN  14623>>ASSIGN  14802>>ASSIGN  14945>>ASSIGN
E_XUD#BAD_DATE_D
     11113**DCL     14285>>ASSIGN  14787>>ASSIGN
E_XUD#BAD_DATE_H
     11263**DCL     14294>>ASSIGN  14790>>ASSIGN  14948>>ASSIGN
E_XUD#BAD_DATE_MI
     11313**DCL     14297>>ASSIGN  14793>>ASSIGN
E_XUD#BAD_DATE_MO
     11063**DCL     14282>>ASSIGN  14784>>ASSIGN
E_XUD#BAD_DATE_Q
     11213**DCL     14288>>ASSIGN
E_XUD#BAD_DATE_S
     11363**DCL     14300>>ASSIGN  14796>>ASSIGN
E_XUD#BAD_DATE_T
     11413**DCL     14303>>ASSIGN  14799>>ASSIGN
E_XUD#BAD_DATE_W
     11163**DCL     14291>>ASSIGN
E_XUD#BAD_DATE_Y
     11013**DCL     14279>>ASSIGN  14781>>ASSIGN
E_XUD#BAD_PIC
     10537**DCL     12505>>ASSIGN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:474  
E_XUD#BAD_PICID
     11514**DCL     12522>>ASSIGN
E_XUD#BAD_PIC_QUOTE
     10642**DCL     12511>>ASSIGN
E_XUD#BAD_PIC_SIZE
     10378**DCL     11999>>ASSIGN
E_XUD#BAD_SIZE
     10323**DCL     12937>>ASSIGN
E_XUD#BAD_TIME
     11463**DCL     14275>>ASSIGN
E_XUD#BAD_TIME_PIC
     10589**DCL     12504>>ASSIGN  12521>>ASSIGN  13009>>ASSIGN
E_XUD#DUP_PICID
     11564**DCL     12517>>ASSIGN
E_XUD#EXCESS_CHARS
     10904**DCL     13931>>ASSIGN  14139>>ASSIGN
E_XUD#LONG_PICID
     10692**DCL     12514>>ASSIGN
E_XUD#NO_PICIDS
     11614**DCL     12525>>ASSIGN
E_XUD#OVERFLOW
     10431**DCL     12584>>ASSIGN  12634>>ASSIGN
E_XUD#PICID_ORDER
     11664**DCL     12508>>ASSIGN
E_XUD#RUNON_PICID
     10742**DCL     12444>>ASSIGN
E_XUD#SHORT_CHAR
     10850**DCL     13576>>ASSIGN  13725>>ASSIGN
E_XUD#UNDERFLOW
     10484**DCL     12577>>ASSIGN  12636>>ASSIGN
E_XUD#UNINIT_PIC
     11714**DCL     13013>>ASSIGN
FLDS
     10027**DCL     13067<<ASSIGN  13888<<ASSIGN  14605<<ASSIGN
FLDS.BC
     10033**DCL     13108<<ASSIGN  13129>>IF      13153>>IF      13175>>IF      13182>>IF      13380>>IF
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:475  
     13389>>IF      13395>>IF      13401>>IF      13407>>IF      13420>>IF      13433>>IF      13438>>IF
     13904<<ASSIGN  14025<<ASSIGN  14149>>IF      14219>>IF
FLDS.DAY
     10030**DCL     13169<<ASSIGN  13195<<ASSIGN  13297>>ASSIGN  13301>>ASSIGN  14033<>CALL    14049<<ASSIGN
     14058<<ASSIGN  14067<<ASSIGN  14076<<ASSIGN  14146>>ASSIGN  14165>>IF      14166<<CALLBLT 14188<<ASSIGN
     14198<<ASSIGN  14206>>IF      14207>>IF      14207>>IF      14217>>IF      14218<<ASSIGN  14218>>ASSIGN
     14222>>ASSIGN  14249>>ASSIGN  14362<>CALL    14363>>IF      15012<<CALLBLT
FLDS.HOUR
     10038**DCL     13737<<ASSIGN  13744>>ASSIGN  13750>>IF      13766>>IF      14040<>CALL    14041>>IF
     14043<<ASSIGN  14044>>IF      14044>>IF      14048<>CALL    14049>>ASSIGN  14050<<ASSIGN  14050>>ASSIGN
     14087<<ASSIGN  14087>>ASSIGN  14147>>ASSIGN  14232>>ASSIGN  14260>>ASSIGN  14424<>CALL    14425>>IF
     14933>>IF      14935<<ASSIGN  14936>>IF      14936>>IF      14939<<ASSIGN  14939>>ASSIGN
FLDS.JULIAN
     10031**DCL     13146<<ASSIGN  13164>>IF      13164>>IF      13166>>IF      13166>>IF      13170<<ASSIGN
     13177<<ASSIGN  13177>>ASSIGN  13183<<ASSIGN  13183>>ASSIGN  13192>>IF      13195>>ASSIGN  13308>>ASSIGN
     13316>>ASSIGN  13990<>CALL    13991>>IF      14159>>IF      14179>>IF      14183<<ASSIGN  14184>>IF
     14186>>IF      14192>>IF      14195>>IF      14198>>ASSIGN
FLDS.LEAP
     10036**DCL     13173<<ASSIGN  13178<<ASSIGN  13178>>ASSIGN  13192>>IF      13195>>ASSIGN  14180<<ASSIGN
     14183>>ASSIGN  14192>>IF      14195>>IF      14198>>ASSIGN
FLDS.LEAP_FLAG
     10034**DCL     14178<<ASSIGN  14186>>IF      14207>>IF
FLDS.MIN
     10039**DCL     13738<<ASSIGN  13768>>IF      13772>>ASSIGN  13776>>IF      14057<>CALL    14058>>ASSIGN
     14059<<ASSIGN  14059>>ASSIGN  14147>>ASSIGN  14232>>ASSIGN  14260>>ASSIGN  14432<>CALL    14433>>IF
FLDS.MON
     10029**DCL     13168<<ASSIGN  13191<<DOINDEX 13192>>IF      13195>>ASSIGN  13196<<ASSIGN  13196>>ASSIGN
     13251>>ASSIGN  13255>>ASSIGN  13265>>ASSIGN  13268>>CALL    13274>>ASSIGN  13277>>CALL    13286>>ASSIGN
     13289>>CALL    13323>>ASSIGN  14159>>IF      14164<<CALLBLT 14179>>IF      14189<<ASSIGN  14194<<DOINDEX
     14195>>IF      14198>>ASSIGN  14199<<ASSIGN  14199>>ASSIGN  14206>>IF      14207>>IF      14207>>IF
     14215>>IF      14216<<ASSIGN  14216>>ASSIGN  14222>>ASSIGN  14224<<ASSIGN  14224>>ASSIGN  14225>>ASSIGN
     14227>>ASSIGN  14249>>ASSIGN  14249>>ASSIGN  14252<<ASSIGN  14252>>ASSIGN  14253>>ASSIGN  14255>>ASSIGN
     14354<>CALL    14355>>IF      14355>>IF      14373<<DOINDEX 14374>>IF      14374>>IF      14377>>IF
     14379<<ASSIGN  14379>>ASSIGN
FLDS.QUARTER
     10032**DCL     13999<<CALLBLT 14001>>IF      14001>>IF      14159>>IF      14179>>IF      14182>>IF
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:476  
     14183>>ASSIGN
FLDS.SEC
     10040**DCL     13739<<ASSIGN  13768>>IF      13781>>IF      13787>>ASSIGN  13791>>IF      14066<>CALL
     14067>>ASSIGN  14068<<ASSIGN  14068>>ASSIGN  14147>>ASSIGN  14232>>ASSIGN  14260>>ASSIGN  14440<>CALL
     14441>>IF
FLDS.TIC
     10041**DCL     13740<<ASSIGN  13768>>IF      13781>>IF      13796>>IF      13802>>ASSIGN  14075<>CALL
     14076>>ASSIGN  14077<<ASSIGN  14077>>ASSIGN  14147>>ASSIGN  14232>>ASSIGN  14260>>ASSIGN  14448<>CALL
     14450<<ASSIGN  14450>>ASSIGN
FLDS.WKDAY
     10037**DCL     13114<<ASSIGN  13117<<ASSIGN  13330>>ASSIGN  13339>>ASSIGN  13342>>CALL    13345>>ASSIGN
     13354>>ASSIGN  13357>>CALL    13368>>ASSIGN  13371>>CALL    14167>>IF      14238>>IF      14239>>ASSIGN
     14240>>ASSIGN  14244>>IF      14244>>IF      14264>>IF      14264>>IF      14391<<DOINDEX 14392>>IF
     14392>>IF      14395>>IF      14397<<ASSIGN  14397>>ASSIGN  14722<<ASSIGN
FLDS.WKDAY_ONLY
     10035**DCL     14168<<ASSIGN  14235>>IF
FLDS.YEAR
     10028**DCL     13138<<ASSIGN  13146>>ASSIGN  13146>>ASSIGN  13146>>ASSIGN  13146>>ASSIGN  13154<<ASSIGN
     13154>>ASSIGN  13155<<ASSIGN  13155>>ASSIGN  13161>>IF      13161>>IF      13161>>IF      13226>>ASSIGN
     13231>>ASSIGN  13236>>CALLBLT 13241>>CALLBLT 13963<<CALLBLT 13965<<ASSIGN  13965>>ASSIGN  13970<>CALL
     13971>>IF      14159>>IF      14163<<ASSIGN  14170>>IF      14173<<ASSIGN  14175>>IF      14175>>IF
     14175>>IF      14214<<ASSIGN  14214>>ASSIGN  14222>>ASSIGN  14225>>ASSIGN  14227<<ASSIGN  14227>>ASSIGN
     14228>>ASSIGN  14230>>ASSIGN  14249>>ASSIGN  14253>>ASSIGN  14255<<ASSIGN  14255>>ASSIGN  14256>>ASSIGN
     14258>>ASSIGN  14334<>CALL    14337>>IF      14338<<ASSIGN  14338>>ASSIGN  14339>>IF      14340<<ASSIGN
     14340>>ASSIGN  14343<<ASSIGN  14343>>ASSIGN  14682<>CALL
FPT@TIME
     10211**DCL     14545<<ASSIGN  14547<>CALL    15093<<ASSIGN  15097<>CALL
FPT@TIME.DATE_
     10211**DCL     14546<<ASSIGN
FPT@TIME.TSTAMP_
     10214**DCL     15095<<ASSIGN
FPT@TIME.V
     10215**DCL     15094--ASSIGN
FPT@TIME.V.DEST#
     10215**DCL     15096<<ASSIGN
FPT@TIME.V_
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:477  
     10211**DCL     15094<<ASSIGN
FPT_TIME_C
     10232**DCL     14545>>ASSIGN  15093>>ASSIGN
FPT_TIME_C.V
     10236**DCL     10232--DCLINIT
FROM_UTS
     15129**PROC    12673--CALL    12770--CALL    12829--CALL    12864--CALL    13921--CALL
GET_CURRENT_UTS
     15089**PROC    12799--CALL    12828--CALL    12861--CALL    13920--CALL
GET_CURRENT_YEAR IN PROCEDURE CVT_FROM_CHAR
     14543**PROC    13964--CALL    14162--CALL    14172--CALL    14342--CALL
I
     10043**DCL     12022<<ASSIGN  12038>>ASSIGN  12040<<ASSIGN  12040>>ASSIGN  12045>>ASSIGN  12047<<ASSIGN
     12047>>ASSIGN  12064>>ASSIGN  12066<<ASSIGN  12066>>ASSIGN  12128>>ASSIGN  12131<<ASSIGN  12131>>ASSIGN
     12132>>ASSIGN  12172>>ASSIGN  12425>>IF      12427>>ASSIGN  12431>>ASSIGN  12452>>ASSIGN  12459>>ASSIGN
     12470>>ASSIGN  12476<<ASSIGN  12476>>ASSIGN  12498>>ASSIGN  13001<<DOINDEX 13002>>ASSIGN  13132<<ASSIGN
     13133<<ASSIGN  13133>>ASSIGN  13133>>ASSIGN  13138>>ASSIGN  13219<<DOINDEX 13220>>DOCASE  13451>>IF
     13452>>IF      13454<<ASSIGN  13454>>ASSIGN  13557>>ASSIGN  13915<<DOINDEX 13916>>IF      13917>>IF
     13917>>IF      13922>>IF      13925>>IF      13926>>IF      13955<<DOINDEX 13956>>DOCASE  14099>>IF
     14102>>IF      14104>>ASSIGN  14123>>IF      14237<<ASSIGN  14238>>IF      14239<<ASSIGN  14239>>ASSIGN
     14240<<ASSIGN  14240>>ASSIGN  14241>>ASSIGN  14513>>IF      14513>>IF      14515>>ASSIGN  14516<<ASSIGN
     14516>>ASSIGN  14665<<CALLBLT 14692<<CALLBLT 14753<<ASSIGN  14768>>ASSIGN  14882>>IF      15000<<CALLBLT
     15002>>IF      15007>>IF
IDX
     10045**DCL     12089<<CALLBLT 12107>>DOCASE  12139>>DOCASE  12346>>DOCASE  12432<<ASSIGN  12435<<ASSIGN
     12452>>ASSIGN  13709<<ASSIGN  13732<<ASSIGN  13767<<ASSIGN  13777<<ASSIGN  13792<<ASSIGN  13810>>IF
     13812>>ASSIGN  13812>>ASSIGN  13813>>ASSIGN  14019>>DOCASE  14083>>DOCASE  14922>>DOCASE  14997<<CALLBLT
     14998>>IF      15007>>IF      15010>>IF      15177<<ASSIGN  15183<<ASSIGN  15185<<ASSIGN  15187<<ASSIGN
     15189<<ASSIGN  15191<<ASSIGN  15196<<ASSIGN  15202<<ASSIGN  15204<<ASSIGN  15206<<ASSIGN  15208<<ASSIGN
     15210<<ASSIGN  15212<<ASSIGN
J
     10044**DCL     12023<<CALLBLT 12024>>DOWHILE 12025>>ASSIGN  12031>>IF      12033>>CALLBLT 12037>>ASSIGN
     12038>>ASSIGN  12039<<ASSIGN  12039>>ASSIGN  12042>>CALLBLT 12044>>ASSIGN  12045>>ASSIGN  12046<<ASSIGN
     12046>>ASSIGN  12065<<ASSIGN  12065>>ASSIGN  12073>>IF      12096>>DOWHILE 12096>>DOWHILE 12127<<ASSIGN
     12127>>ASSIGN  12231>>IF      12234>>IF      12305>>IF      12308>>IF      12460<<ASSIGN  12460>>ASSIGN
     12470>>ASSIGN  12471<<ASSIGN  12471>>ASSIGN  13074<<ASSIGN  13080<<ASSIGN  13130<<ASSIGN  13131<<ASSIGN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:478  
     13132>>ASSIGN  13132>>ASSIGN  13133>>ASSIGN  13199<<ASSIGN  13246>>ASSIGN  13279>>CALLBLT 13279>>CALLBLT
     13291>>CALLBLT 13291>>CALLBLT 13382>>ASSIGN  13384>>ASSIGN  13391>>ASSIGN  13393>>ASSIGN  13412>>ASSIGN
     13417>>ASSIGN  13425>>ASSIGN  13430>>ASSIGN  13538>>ASSIGN  13540>>ASSIGN  13546>>ASSIGN  13548>>ASSIGN
     13557>>ASSIGN  13560<<ASSIGN  13560>>ASSIGN  13566>>ASSIGN  13567>>ASSIGN  13574>>ASSIGN  13575>>ASSIGN
     13598>>IF      13647>>CALLBLT 13673>>ASSIGN  13723>>IF      13728>>ASSIGN  13729<<ASSIGN  13729>>ASSIGN
     13732>>ASSIGN  13748>>IF      13754>>ASSIGN  13755<<ASSIGN  13755>>ASSIGN  13759<<ASSIGN  13759>>ASSIGN
     13764>>ASSIGN  13765<<ASSIGN  13765>>ASSIGN  13767>>ASSIGN  13770>>IF      13775<<ASSIGN  13775>>ASSIGN
     13777>>ASSIGN  13783>>IF      13785>>ASSIGN  13786<<ASSIGN  13786>>ASSIGN  13790<<ASSIGN  13790>>ASSIGN
     13792>>ASSIGN  13798>>IF      13800>>ASSIGN  13801<<ASSIGN  13801>>ASSIGN  13805<<ASSIGN  13805>>ASSIGN
     13810>>IF      13812>>ASSIGN  13813<<ASSIGN  13815>>IF      13818<<ASSIGN  13896<<ASSIGN  13905<<ASSIGN
     13912>>CALLBLT 13917>>IF      13961>>IF      13963>>CALLBLT 13997>>IF      13999>>CALLBLT 14101>>CALLBLT
     14118<<ASSIGN  14118>>ASSIGN  14123>>IF      14123>>IF      14132<<ASSIGN  14132>>ASSIGN  14138>>IF
     14370>>CALLBLT 14374>>IF      14388>>CALLBLT 14392>>IF      14406>>IF      14408>>CALLBLT 14409>>IF
     14410>>IF      14414>>IF      14416>>CALLBLT 14417>>CALLBLT 14418<<ASSIGN  14418>>ASSIGN  14491>>IF
     14492>>CALLBLT 14492>>CALLBLT 14495>>CALLBLT 14592<<ASSIGN  14595>>IF      14606<<ASSIGN  14613>>IF
     14665>>CALLBLT 14669<<ASSIGN  14669>>ASSIGN  14670>>IF      14672>>IF      14674<<ASSIGN  14674>>ASSIGN
     14676<<ASSIGN  14676>>ASSIGN  14677>>IF      14679>>IF      14681<<ASSIGN  14681>>ASSIGN  14686<<ASSIGN
     14686>>ASSIGN  14692>>CALLBLT 14696<<ASSIGN  14696>>ASSIGN  14697>>IF      14699>>IF      14701<<ASSIGN
     14701>>ASSIGN  14703<<ASSIGN  14703>>ASSIGN  14704>>IF      14706>>IF      14708<<ASSIGN  14708>>ASSIGN
     14710<<ASSIGN  14710>>ASSIGN  14719<<ASSIGN  14719>>ASSIGN  14729<<ASSIGN  14729>>ASSIGN  14730>>IF
     14732>>CALLBLT 14733<<ASSIGN  14733>>ASSIGN  14735<<ASSIGN  14735>>ASSIGN  14738>>IF      14740>>IF
     14742<<ASSIGN  14742>>ASSIGN  14745<<ASSIGN  14745>>ASSIGN  14747<<ASSIGN  14747>>ASSIGN  14753>>ASSIGN
     14755<<ASSIGN  14755>>ASSIGN  14756>>IF      14758>>CALLBLT 14759<<ASSIGN  14759>>ASSIGN  14761<<ASSIGN
     14761>>ASSIGN  14768<<ASSIGN  14770<<ASSIGN  14770>>ASSIGN  14772<<ASSIGN  14772>>ASSIGN  14777<<ASSIGN
     14777>>ASSIGN  14839<<ASSIGN  14839>>ASSIGN  14840>>IF      14842>>IF      14845<<ASSIGN  14845>>ASSIGN
     14856<<ASSIGN  14856>>ASSIGN  14857>>IF      14859>>IF      14861<<ASSIGN  14861>>ASSIGN  14868<<ASSIGN
     14868>>ASSIGN  14869>>IF      14871>>IF      14873<<ASSIGN  14873>>ASSIGN  14880<<ASSIGN  14880>>ASSIGN
     14918>>IF      14928>>IF      14928>>IF      14940<<ASSIGN  14940>>ASSIGN  14997>>CALLBLT 14998>>IF
     15000>>CALLBLT 15002>>IF      15003>>IF      15009>>CALLBLT 15010>>IF      15012>>CALLBLT 15012>>CALLBLT
     15013<<ASSIGN  15014>>IF      15019<<ASSIGN  15019>>ASSIGN  15024<<ASSIGN  15024>>ASSIGN  15025>>IF
     15027>>IF      15030<<ASSIGN  15030>>ASSIGN  15031>>IF      15037<<ASSIGN  15037>>ASSIGN  15038>>IF
     15040>>IF      15042<<ASSIGN  15042>>ASSIGN  15043>>IF      15049<<ASSIGN  15049>>ASSIGN  15050>>IF
     15052>>IF      15054<<ASSIGN  15054>>ASSIGN  15055>>IF      15061<<ASSIGN  15061>>ASSIGN  15173>>CALLBLT
     15174>>IF      15181>>DOSELCT 15193>>IF      15200>>DOSELCT
JUNK
     10046**DCL     12023<<CALLBLT 12925<<CALLBLT 13237<<CALLBLT 13242<<CALLBLT 13449<<CALLBLT 13716<<CALLBLT
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:479  
     13912<<CALLBLT 14101<<CALLBLT 14370<<CALLBLT 14388<<CALLBLT 14408<<CALLBLT 14416<<CALLBLT 14417<<CALLBLT
     14492<<CALLBLT 14732<<CALLBLT 14758<<CALLBLT 15009<<CALLBLT 15173<<CALLBLT 15176<<ASSIGN  15180<<ASSIGN
     15195<<ASSIGN  15199<<ASSIGN  15218>>ASSIGN  15255<<CALLBLT
LEN
     10047**DCL     12033<<CALLBLT 12034>>DOWHILE 12035>>IF      12037<<ASSIGN  12037>>ASSIGN  12038>>ASSIGN
     12038>>ASSIGN  12039>>ASSIGN  12040>>ASSIGN  12041>>ASSIGN  12042<<CALLBLT 12044<<ASSIGN  12044>>ASSIGN
     12045>>ASSIGN  12045>>ASSIGN  12046>>ASSIGN  12047>>ASSIGN  12048>>ASSIGN  12095<<ASSIGN  12096>>DOWHILE
     12096>>DOWHILE 12096>>DOWHILE 12098<<ASSIGN  12098>>ASSIGN  12105>>IF      12126>>ASSIGN  12127>>ASSIGN
     12129>>IF      12132>>ASSIGN  12147>>DOCASE  12164>>DOCASE  12179>>DOCASE  12200>>DOCASE  12212>>DOCASE
     12226>>IF      12231>>IF      12245>>IF      12257>>DOCASE  12274>>DOCASE  12288>>DOCASE  12305>>IF
     12317>>DOCASE  12345>>ASSIGN  12460>>ASSIGN  12925<<CALLBLT 12926>>IF      12928>>ASSIGN  12929>>ASSIGN
     13227<<ASSIGN  13232<<ASSIGN  13237<<CALLBLT 13238<<ASSIGN  13238>>ASSIGN  13242<<CALLBLT 13243<<ASSIGN
     13243>>ASSIGN  13246>>ASSIGN  13246>>ASSIGN  13256<<ASSIGN  13262<<ASSIGN  13265<<ASSIGN  13271<<ASSIGN
     13274<<ASSIGN  13279>>CALLBLT 13279>>CALLBLT 13283<<ASSIGN  13286<<ASSIGN  13291>>CALLBLT 13291>>CALLBLT
     13302<<ASSIGN  13310<<ASSIGN  13312<<ASSIGN  13313<<ASSIGN  13317<<ASSIGN  13324<<ASSIGN  13330<<ASSIGN
     13333<<ASSIGN  13336<<ASSIGN  13339<<ASSIGN  13345<<ASSIGN  13348<<ASSIGN  13351<<ASSIGN  13354<<ASSIGN
     13358>>IF      13362<<ASSIGN  13365<<ASSIGN  13368<<ASSIGN  13378<<ASSIGN  13387<<ASSIGN  13399<<ASSIGN
     13405<<ASSIGN  13410<<ASSIGN  13415<<ASSIGN  13423<<ASSIGN  13428<<ASSIGN  13436<<ASSIGN  13441<<ASSIGN
     13449<<CALLBLT 13450<<ASSIGN  13450>>ASSIGN  13465<<ASSIGN  13475<<ASSIGN  13491<<ASSIGN  13505<<ASSIGN
     13518<<ASSIGN  13521<<ASSIGN  13525<<ASSIGN  13534<<ASSIGN  13542<<ASSIGN  13553<<ASSIGN  13555<<ASSIGN
     13560>>ASSIGN  13598>>IF      13623<<ASSIGN  13624<<ASSIGN  13647>>CALLBLT 13673>>ASSIGN  13716<<CALLBLT
     13718<<ASSIGN  13718>>ASSIGN  13721<<ASSIGN  13723>>IF      13728>>ASSIGN  13728>>ASSIGN  13729>>ASSIGN
     13746<<ASSIGN  13748>>IF      13756<<ASSIGN  13759>>ASSIGN  13773<<ASSIGN  13775>>ASSIGN  13788<<ASSIGN
     13790>>ASSIGN  13803<<ASSIGN  13805>>ASSIGN  13912<<CALLBLT 13913>>IF      13916>>IF      13917>>IF
     13917>>IF      13929>>IF      13966<<ASSIGN  14000<<ASSIGN  14027<<ASSIGN  14089<<ASSIGN  14096<<ASSIGN
     14101<<CALLBLT 14102>>IF      14118>>ASSIGN  14119<<ASSIGN  14126<<ASSIGN  14130>>IF      14132>>ASSIGN
     14335>>IF      14346<<ASSIGN  14370<<CALLBLT 14371>>IF      14374>>IF      14374>>IF      14377>>IF
     14388<<CALLBLT 14389>>IF      14392>>IF      14392>>IF      14395>>IF      14408<<CALLBLT 14409>>IF
     14410>>IF      14411<<ASSIGN  14411>>ASSIGN  14412>>IF      14414>>IF      14416<<CALLBLT 14416>>CALLBLT
     14417<<CALLBLT 14417>>CALLBLT 14418>>ASSIGN  14449>>IF      14492<<CALLBLT 14494>>IF      14495>>CALLBLT
     14669>>ASSIGN  14676>>ASSIGN  14683>>IF      14686>>ASSIGN  14696>>ASSIGN  14703>>ASSIGN  14710>>ASSIGN
     14719>>ASSIGN  14729>>ASSIGN  14732<<CALLBLT 14733>>ASSIGN  14735>>ASSIGN  14742>>ASSIGN  14747>>ASSIGN
     14755>>ASSIGN  14758<<CALLBLT 14759>>ASSIGN  14761>>ASSIGN  14775>>IF      14839>>ASSIGN  14856>>ASSIGN
     14868>>ASSIGN  14880>>ASSIGN  14940>>ASSIGN  15009<<CALLBLT 15010>>IF      15010>>IF      15012>>CALLBLT
     15013>>ASSIGN  15024>>ASSIGN  15037>>ASSIGN  15049>>ASSIGN  15061>>ASSIGN  15173<<CALLBLT 15174>>IF
     15181>>DOSELCT 15193>>IF      15200>>DOSELCT 15218<<ASSIGN  15218>>ASSIGN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:480  
LIMBO
     10020**DCL     13236<<CALLBLT 13237>>CALLBLT 13238--ASSIGN  13241<<CALLBLT 13242>>CALLBLT 13243--ASSIGN
     13246>>ASSIGN  13246--ASSIGN  13448<<CALLBLT 13449>>CALLBLT 13450--ASSIGN  13715<<CALLBLT 13716>>CALLBLT
     13718--ASSIGN  13728>>ASSIGN  13728--ASSIGN
LIMIT IN PROCEDURE CVT_TO_NUM
     14487**DCL     14489<<ASSIGN  14492>>CALLBLT 14515<<ASSIGN  14519<<ASSIGN
M$TIME
      5632**DCL-ENT 14547--CALL    15097--CALL
MAX IN PROCEDURE CVT_TO_NUM
     14486**DCL     14483--PROC    14489>>ASSIGN
MAXSIZE
     10186**DCL     12010<<ASSIGN  12041<<ASSIGN  12041>>ASSIGN  12048<<ASSIGN  12048>>ASSIGN  12126<<ASSIGN
     12126>>ASSIGN  12155<<ASSIGN  12155>>ASSIGN  12173<<ASSIGN  12173>>ASSIGN  12187<<ASSIGN  12187>>ASSIGN
     12208<<ASSIGN  12208>>ASSIGN  12215<<ASSIGN  12215>>ASSIGN  12218<<ASSIGN  12218>>ASSIGN  12221<<ASSIGN
     12221>>ASSIGN  12224<<ASSIGN  12224>>ASSIGN  12248<<ASSIGN  12248>>ASSIGN  12265<<ASSIGN  12265>>ASSIGN
     12282<<ASSIGN  12282>>ASSIGN  12291<<ASSIGN  12291>>ASSIGN  12294<<ASSIGN  12294>>ASSIGN  12297<<ASSIGN
     12297>>ASSIGN  12300<<ASSIGN  12300>>ASSIGN  12320<<ASSIGN  12320>>ASSIGN  12323<<ASSIGN  12323>>ASSIGN
     12326<<ASSIGN  12326>>ASSIGN  12330<<ASSIGN  12330>>ASSIGN  12345<<ASSIGN  12345>>ASSIGN  12472<<ASSIGN
     12472>>ASSIGN  12499>>ASSIGN
MAX_DATE
     11939**DCL     12631>>ASSIGN
MAX_DATE_INIT
     11938**DCL     11939--REDEF
MAX_UTS
     11934**DCL     12585>>ASSIGN
MAX_UTS_INIT
     11933**DCL     11934--REDEF   11935--REDEF
MIN_UTS
     11937**DCL     12579>>ASSIGN
MIN_UTS_INIT
     11936**DCL     11937--REDEF
MONTH.APR
     11836**DCL     11817--DCLINIT
MONTH.APR.T
     11838**DCL     11837--DCLINIT
MONTH.AUG
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:481  
     11848**DCL     11821--DCLINIT
MONTH.AUG.T
     11850**DCL     11849--DCLINIT
MONTH.DEC
     11860**DCL     11825--DCLINIT
MONTH.DEC.T
     11862**DCL     11861--DCLINIT
MONTH.FEB
     11830**DCL     11815--DCLINIT
MONTH.FEB.T
     11832**DCL     11831--DCLINIT
MONTH.JAN
     11827**DCL     11814--DCLINIT
MONTH.JAN.T
     11829**DCL     11828--DCLINIT
MONTH.JUL
     11845**DCL     11820--DCLINIT
MONTH.JUL.T
     11847**DCL     11846--DCLINIT
MONTH.JUN
     11842**DCL     11819--DCLINIT
MONTH.JUN.T
     11844**DCL     11843--DCLINIT
MONTH.MAR
     11833**DCL     11816--DCLINIT
MONTH.MAR.T
     11835**DCL     11834--DCLINIT
MONTH.MAY
     11839**DCL     11818--DCLINIT
MONTH.MAY.T
     11841**DCL     11840--DCLINIT
MONTH.NOV
     11857**DCL     11824--DCLINIT
MONTH.NOV.T
     11859**DCL     11858--DCLINIT
MONTH.OCT
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:482  
     11854**DCL     11823--DCLINIT
MONTH.OCT.T
     11856**DCL     11855--DCLINIT
MONTH.SEP
     11851**DCL     11822--DCLINIT
MONTH.SEP.T
     11853**DCL     11852--DCLINIT
MONTH$
     11813**DCL     13265>>ASSIGN  13268<>CALL    13274>>ASSIGN  13277<>CALL    13286>>ASSIGN  13289<>CALL
     14374>>IF      14374>>IF
MONTH_SIZE
     11864**DCL     14377>>IF
MON_DAYS
     11810**DCL     14207>>IF      14249>>ASSIGN
MOVENUM IN PROCEDURE CVT_TO_CHAR
     13243**LABEL   13239--GOTO    13455--GOTO
MOVE_ALPHA IN PROCEDURE CVT_TO_CHAR
     13669**PROC    13268--CALL    13277--CALL    13289--CALL    13342--CALL    13357--CALL    13371--CALL
NEXT_CHAR
     12470**LABEL   12130--GOTO    12133--GOTO
NORMAL_RETURN
     11945**LABEL   12500--GOTO    12573--GOTO    12621--GOTO    12675--GOTO    12710--GOTO    12772--GOTO
     12801--GOTO    12831--GOTO    12866--GOTO
NO_HOURS IN PROCEDURE PARSE_DATE
     15027**LABEL   15005--GOTO
NUM
     10048**DCL     13226<<ASSIGN  13231<<ASSIGN  13251<<ASSIGN  13255<<ASSIGN  13297<<ASSIGN  13301<<ASSIGN
     13308<<ASSIGN  13309>>IF      13311>>IF      13316<<ASSIGN  13323<<ASSIGN  13446<<ASSIGN  13448>>CALLBLT
     13460<<ASSIGN  13464<<ASSIGN  13468<<ASSIGN  13469>>IF      13470<<ASSIGN  13474<<ASSIGN  13476>>IF
     13477<<ASSIGN  13480<<ASSIGN  13486<<ASSIGN  13490<<ASSIGN  13494<<ASSIGN  13500<<ASSIGN  13504<<ASSIGN
     13508<<ASSIGN  13514<<ASSIGN  13515>>IF      13517<<ASSIGN  13517>>ASSIGN  13524<<ASSIGN  13528<<ASSIGN
     13622>>IF      13647>>CALLBLT 13744<<ASSIGN  13772<<ASSIGN  13787<<ASSIGN  13802<<ASSIGN  14849>>IF
     14917<<ASSIGN  14924<<ASSIGN  14926<<ASSIGN  14939>>ASSIGN
NUM IN PROCEDURE CVT_TO_NUM
     14485**DCL     14483--PROC    14495<<CALLBLT 14511--ENTRY
OUT_FLAG IN PROCEDURE SETUP_CHARS_IN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:483  
     12898**DCL     12900<<ASSIGN  12905>>IF      12918>>IF      12955<<ASSIGN
PARSE_DATE IN PROCEDURE CVT_FROM_DEFAULT
     14660**PROC    14598--CALL    14607--CALL
PARSE_SPAN IN PROCEDURE PARSE_DATE
     14992**ENTRY   14589--CALL
PARSE_TIME IN PROCEDURE PARSE_DATE
     14836**ENTRY   14593--CALL    14616--CALL
PICID
     10179**DCL     12075<<ASSIGN  12109<<ASSIGN  12112<<ASSIGN  12115<<ASSIGN  12118<<ASSIGN  12121<<ASSIGN
     12128>>ASSIGN  12149<<ASSIGN  12151<<ASSIGN  12166<<ASSIGN  12168<<ASSIGN  12181<<ASSIGN  12183<<ASSIGN
     12202<<ASSIGN  12204<<ASSIGN  12214<<ASSIGN  12217<<ASSIGN  12220<<ASSIGN  12223<<ASSIGN  12233<<ASSIGN
     12233>>ASSIGN  12236<<ASSIGN  12236>>ASSIGN  12247<<ASSIGN  12259<<ASSIGN  12261<<ASSIGN  12276<<ASSIGN
     12278<<ASSIGN  12290<<ASSIGN  12293<<ASSIGN  12296<<ASSIGN  12299<<ASSIGN  12307<<ASSIGN  12307>>ASSIGN
     12310<<ASSIGN  12310>>ASSIGN  12319<<ASSIGN  12322<<ASSIGN  12325<<ASSIGN  12329<<ASSIGN  12348<<ASSIGN
     12351<<ASSIGN  12354<<ASSIGN  12357<<ASSIGN  12360<<ASSIGN  12363<<ASSIGN  12366<<ASSIGN  12369<<ASSIGN
     12372<<ASSIGN  12375<<ASSIGN  12383>>IF      12390>>IF      12400>>IF      12400>>IF      12439>>DOCASE
     12459>>ASSIGN  13002<<ASSIGN  13003>>IF      13005>>IF      13005>>IF
PICID_H
     10185**DCL     12009<<ASSIGN  12063<<ASSIGN  12172<<ASSIGN  12410>>IF      12412>>ASSIGN  12412>>ASSIGN
PICID_SWITCH
     10182**DCL     12008<<ASSIGN  12054>>IF      12061<<ASSIGN
PICID_USED
     10181**DCL     12006<<ASSIGN  12056>>IF      12062>>ASSIGN  12103>>IF      12110<<ASSIGN  12113<<ASSIGN
     12116<<ASSIGN  12119<<ASSIGN  12122<<ASSIGN  12160>>IF      12194>>IF      12194>>IF      12194>>IF
     12253>>IF      12253>>IF      12253>>IF      12270>>IF      12270>>IF      12270>>IF      12419>>IF
     12421<<ASSIGN  12421>>ASSIGN  12483>>IF      12483>>IF      12483>>IF      12483>>IF      12483>>IF
     12483>>IF      12483>>IF      12483>>IF      12495>>IF
PICTURE
     10010**DCL     12990<>CALL
PICTURE.L
     10011**DCL     12498<<ASSIGN  12996>>ASSIGN  13000>>ASSIGN
PICTURE.T
     10012**DCL     12038<<ASSIGN  12045<<ASSIGN  12064<<ASSIGN  12128<<ASSIGN  12132<<ASSIGN  12412<<ASSIGN
     12412>>ASSIGN  12427>>ASSIGN  12431>>ASSIGN  12452>>ASSIGN  12459<<ASSIGN  12470<<ASSIGN  13002>>ASSIGN
     13220>>DOCASE  13452>>IF      13557>>ASSIGN  13956>>DOCASE  14099>>IF      14104>>ASSIGN  14123>>IF
     14513>>IF      14515>>ASSIGN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:484  
PICTURE$
     10008**DCL     10010--IMP-PTR 11995<<ASSIGN  12038>>ASSIGN  12045>>ASSIGN  12064>>ASSIGN  12128>>ASSIGN
     12132>>ASSIGN  12412>>ASSIGN  12412>>ASSIGN  12427>>ASSIGN  12431>>ASSIGN  12452>>ASSIGN  12459>>ASSIGN
     12470>>ASSIGN  12498>>ASSIGN  12985<<ASSIGN  12986>>IF      12990>>CALL    12995<<ASSIGN  12996>>ASSIGN
     13000>>ASSIGN  13002>>ASSIGN  13201>>IF      13209<<ASSIGN  13220>>DOCASE  13452>>IF      13557>>ASSIGN
     13944>>IF      13956>>DOCASE  14099>>IF      14104>>ASSIGN  14123>>IF      14513>>IF      14515>>ASSIGN
PICTYPE
     10180**DCL     12013<<ASSIGN  12014<<ASSIGN  12058>>IF      12059<<ASSIGN  12060<<ASSIGN  12192>>IF
     12385>>IF      12392<<ASSIGN  12394<<ASSIGN  12400>>IF      12400>>IF
PIC_CHAR
     10178**DCL     12025<<ASSIGN  12026>>DOSELCT 12089>>CALLBLT 12096>>DOWHILE 12231>>IF      12234>>IF
     12305>>IF      12308>>IF      12342>>IF      12427<<ASSIGN  12428>>IF      12428>>IF      12431<<ASSIGN
     12437>>IF      12439>>DOCASE  12447>>IF      12447>>IF      12447>>IF      12447>>IF      12452<<ASSIGN
     12467>>IF      12467>>IF      12467>>IF      14104<<ASSIGN  14105>>IF      14105>>IF      14105>>IF
     14105>>IF      14105>>IF      14105>>IF      14105>>IF      14105>>IF      14105>>IF      14105>>IF
     14105>>IF
PIC_SIZE
     10009**DCL     12996<<ASSIGN  13000<<ASSIGN  13001>>DOINDEX 13210<<ASSIGN  13219>>DOINDEX 13451>>IF
     13955>>DOINDEX 14102>>IF      14513>>IF
RET IN PROCEDURE CHK4END
     14942**LABEL   14919--GOTO    14929--GOTO
RET IN PROCEDURE CVT_TO_SPAN
     13807**LABEL   13731--GOTO    13769--GOTO    13782--GOTO    13797--GOTO    13820--GOTO
RET IN PROCEDURE CVT_XX
     14348**LABEL   14357--GOTO    14365--GOTO    14380--GOTO    14398--GOTO    14419--GOTO    14427--GOTO
     14435--GOTO    14443--GOTO    14451--GOTO
RET IN PROCEDURE PARSE_DATE
     14805**LABEL   14678--GOTO    14680--GOTO    14687--GOTO    14711--GOTO    14720--GOTO    14739--GOTO
     14743--GOTO    14748--GOTO    14778--GOTO    14852--GOTO    14858--GOTO    14864--GOTO    14870--GOTO
     14876--GOTO    14884--GOTO    15015--GOTO    15032--GOTO    15039--GOTO    15041--GOTO    15044--GOTO
     15051--GOTO    15053--GOTO    15056--GOTO
RET IN PROCEDURE SETUP_PICTURE
     13016**LABEL   12997--GOTO    13008--GOTO
RSEARCH
     15251**PROC    12002--CALL    12924--CALL
SETUP_CHARS_IN
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:485  
     12894**PROC    12558--CALL    12617--CALL
SETUP_CHARS_OUT IN PROCEDURE SETUP_CHARS_IN
     12953**ENTRY   12670--CALL    12706--CALL    12862--CALL
SETUP_PICTURE
     12983**PROC    12559--CALL    12618--CALL    12671--CALL    12707--CALL    12863--CALL
SET_LEN_1OR2 IN PROCEDURE CVT_TO_CHAR
     13620**PROC    13252--CALL    13298--CALL    13461--CALL    13471--CALL    13487--CALL    13501--CALL
     13747--CALL
SPECIAL.NOW
     11913**DCL     11908--DCLINIT
SPECIAL.NOW.T
     11915**DCL     11914--DCLINIT
SPECIAL.TODAY
     11916**DCL     11909--DCLINIT
SPECIAL.TODAY.T
     11918**DCL     11917--DCLINIT
SPECIAL.TOMORROW
     11919**DCL     11910--DCLINIT
SPECIAL.TOMORROW.T
     11921**DCL     11920--DCLINIT
SPECIAL.YESTERDAY
     11922**DCL     11911--DCLINIT
SPECIAL.YESTERDAY.T
     11924**DCL     11923--DCLINIT
SPECIAL$
     11907**DCL     13917>>IF      13917>>IF
SPECIAL_SIZE
     11904**DCL     13916>>IF
SYSTEM_DATE
     10241**DCL     14546--ASSIGN
SYSTEM_DATE.DD
     10244**DCL     14166>>CALLBLT
SYSTEM_DATE.MM
     10243**DCL     14164>>CALLBLT
SYSTEM_DATE.YY
     10242**DCL     14548>>CALLBLT
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:486  
SYSTEM_YEAR
     10245**DCL     13965>>ASSIGN  14163>>ASSIGN  14173>>ASSIGN  14343>>ASSIGN  14548<<CALLBLT 14549>>IF
     14550<<ASSIGN  14550>>ASSIGN  14551<<ASSIGN  14551>>ASSIGN
TEMP_CHARS
     10018**DCL     12003<<CALLBLT 12025>>ASSIGN  12096>>DOWHILE 13887<<CALLBLT 13912>>CALLBLT 13917>>IF
     13961>>IF      13997>>IF      14370>>CALLBLT 14374>>IF      14388>>CALLBLT 14392>>IF      15174>>IF
     15181>>DOSELCT 15193>>IF      15200>>DOSELCT
TEMP_PICTURE
     10019**DCL     12990<>CALL    12995--ASSIGN
TEXTC.L
     10189**DCL     10190--IMP-SIZ 11989>>ASSIGN  12909>>ASSIGN  13265>>ASSIGN  13274>>ASSIGN  13286>>ASSIGN
     13339>>ASSIGN  13354>>ASSIGN  13368>>ASSIGN  13566<<ASSIGN  13574<<ASSIGN  13673>>ASSIGN  13917>>IF
     14374>>IF      14392>>IF
TEXTC.T
     10190**DCL     11988--ASSIGN  12904--ASSIGN  13673>>ASSIGN  13917>>IF      14374>>IF      14392>>IF
TEXTC$ IN PROCEDURE MOVE_ALPHA
     13671**DCL     13669--PROC    13673>>ASSIGN  13673>>ASSIGN
TICS
     10023**DCL     12564>>IF      12569<>CALL    12620<>CALL    12625<<ASSIGN  12627<>CALL    12708<>CALL
     12738<>CALL    12771<>CALL    12830<>CALL    13075>>IF      13078<<ASSIGN  13078>>ASSIGN  13106>>IF
     13109>>IF      13113<<ASSIGN  13113>>ASSIGN  13460>>ASSIGN  13464>>ASSIGN  13468>>ASSIGN  13474>>ASSIGN
     13480>>ASSIGN  13486>>ASSIGN  13490>>ASSIGN  13494>>ASSIGN  13500>>ASSIGN  13504>>ASSIGN  13508>>ASSIGN
     13514>>ASSIGN  13524>>ASSIGN  13528>>ASSIGN  13536>>IF      13544>>IF      13730>>IF      13737>>ASSIGN
     13738>>ASSIGN  13739>>ASSIGN  13740>>ASSIGN  13748>>IF      13891<<ASSIGN  13924<<ASSIGN  14147<<ASSIGN
     14151<<ASSIGN  14151>>ASSIGN  14232<<ASSIGN  14260<<ASSIGN  15137<>CALL
TIMESPAN
     10049**DCL     12011<<ASSIGN  12012>>IF      12054>>IF      12103>>IF      12144>>IF      12342>>IF
     12503>>IF      12520>>IF      12562>>IF      12740<<ASSIGN  12769<<ASSIGN  12933<<ASSIGN  13005>>IF
     13072>>IF      13203>>IF      13897>>IF      14141>>IF      14274>>IF      14587>>IF      15091<<ASSIGN
     15138>>IF
TIME_1ST IN PROCEDURE CVT_TO_CHAR
     13446**LABEL   13481--GOTO    13495--GOTO    13509--GOTO    13529--GOTO
TRUNC IN PROCEDURE CVT_TO_SPAN
     13810**LABEL   13749--GOTO    13771--GOTO    13784--GOTO    13799--GOTO
TRY_YYMMDD IN PROCEDURE PARSE_DATE
     14762**LABEL   14754--CALLALT 14760--CALLALT
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:487  
USED_BEFORE
     10184**DCL     12007<<ASSIGN  12062<<ASSIGN  12495>>IF
USED_FLAG
     10183**DCL     12146<<ASSIGN  12163<<ASSIGN  12178<<ASSIGN  12199<<ASSIGN  12211<<ASSIGN  12244<<ASSIGN
     12256<<ASSIGN  12273<<ASSIGN  12287<<ASSIGN  12316<<ASSIGN  12327<<ASSIGN  12327>>ASSIGN  12331<<ASSIGN
     12331>>ASSIGN  12349<<ASSIGN  12352<<ASSIGN  12355<<ASSIGN  12358<<ASSIGN  12361<<ASSIGN  12364<<ASSIGN
     12367<<ASSIGN  12370<<ASSIGN  12373<<ASSIGN  12376<<ASSIGN  12408>>IF      12419>>IF      12421>>ASSIGN
UTS
     10024**DCL     10025--REDEF   12568<>CALL    12569<>CALL    12569<>CALL    15095--ASSIGN  15134<>CALL
     15137<>CALL
UTS_CALC
     12559**LABEL   12741--GOTO
UTS_CHR4
     10025**DCL     12570>>ASSIGN  12672<<ASSIGN  12768<<ASSIGN  12800>>ASSIGN
UTS_IN_DAYS IN PROCEDURE FROM_UTS
     15131**DCL     15136<>CALL    15137<>CALL
UTS_OVERFLOW
     12583**LABEL   12567--GOTO    12568--CALLALT 12569--CALLALT
UTS_UNDEFINED
     12579**LABEL   12558--CALLALT 12559--CALLALT 12799--CALLALT
UTS_UNDERFLOW
     12576**LABEL   12565--GOTO
VALIDATE_CHAR
     12428**LABEL   12453--GOTO
WEEKDAY.FRI
     11891**DCL     11873--DCLINIT
WEEKDAY.FRI.T
     11893**DCL     11892--DCLINIT
WEEKDAY.MON
     11879**DCL     11869--DCLINIT
WEEKDAY.MON.T
     11881**DCL     11880--DCLINIT
WEEKDAY.SAT
     11894**DCL     11874--DCLINIT
WEEKDAY.SAT.T
     11896**DCL     11895--DCLINIT
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:488  
WEEKDAY.SUN
     11876**DCL     11868--DCLINIT
WEEKDAY.SUN.T
     11878**DCL     11877--DCLINIT
WEEKDAY.THU
     11888**DCL     11872--DCLINIT
WEEKDAY.THU.T
     11890**DCL     11889--DCLINIT
WEEKDAY.TUE
     11882**DCL     11870--DCLINIT
WEEKDAY.TUE.T
     11884**DCL     11883--DCLINIT
WEEKDAY.WED
     11885**DCL     11871--DCLINIT
WEEKDAY.WED.T
     11887**DCL     11886--DCLINIT
WEEKDAY$
     11867**DCL     13339>>ASSIGN  13342<>CALL    13354>>ASSIGN  13357<>CALL    13368>>ASSIGN  13371<>CALL
     14392>>IF      14392>>IF
XLATE_IC IN PROCEDURE CVT_TO_CHAR
     13274**LABEL   13359--GOTO
XLATE_LC IN PROCEDURE CVT_TO_CHAR
     13286**LABEL   13372--GOTO
XUD$FROM_DATE
     10195**DCL-ENT 12708--CALL    12738--CALL
XUD$INIT_PIC
     11981**ENTRY   12990--CALL
XUD$TO_DATE
     10194**DCL-ENT 12620--CALL    12627--CALL    12771--CALL    12830--CALL
XUD$UTS_ADJUST
     10153**DCL-ENT 12569--CALL
XUD$UTS_ADJ_25TH
     10159**DCL-ENT 12568--CALL    15136--CALL
XUD$UTS_DIFF
     10135**DCL-ENT 15137--CALL
XUD$UTS_DIFF_25TH
PL6.E3A0      #001=XUD$CVT_DATE File=XUD$CVT_DATE.:E05TSI                        WED 07/30/97 09:11 Page:489  
     10147**DCL-ENT 15134--CALL
XUD_PARAM
      9865**DCL        76--PROC    11981--ENTRY   12556--ENTRY   12615--ENTRY   12668--ENTRY   12704--ENTRY
     12736--ENTRY   12766--ENTRY   12797--ENTRY   12826--ENTRY   12859--ENTRY   12990<>CALL
XUD_PARAM.ASSUME_UTS
      9903**DCL     14337>>IF      14339>>IF
XUD_PARAM.DATA_SIZE
      9947**DCL     13567<<ASSIGN  13575<<ASSIGN
XUD_PARAM.ERR
      9954**DCL     11945<<ASSIGN  11949<<ASSIGN  12992>>ASSIGN
XUD_PARAM.INIT_PIC
      9882**DCL     12988>>IF
XUD_PARAM.MAX_SIZE
      9941**DCL      9947--REDEF   12499<<ASSIGN
XUD_PARAM.PIC$
      9866**DCL     12985>>ASSIGN
XUD_PARAM.PIC_SIZE
      9923**DCL     11993>>ASSIGN
XUD_PARAM.PIC_TEXTC
      9913**DCL     11986>>IF
XUD_PARAM.SIZE
      9931**DCL     12907>>ASSIGN  12913>>ASSIGN
XUD_PARAM.TEXTC
      9873**DCL     12902>>IF      13564>>IF      13572>>IF
XUD_PARAM.TIMESPAN
      9896**DCL     12011>>ASSIGN  12740>>ASSIGN  12769>>ASSIGN  12933>>ASSIGN
XUD_PARAM.UTS_TYPE
      9986**DCL     15096>>ASSIGN
XUD_VALID
     10250**DCL     12439>>DOCASE  12439>>DOCASE
YY IN PROCEDURE PARSE_DATE
     14735**LABEL   14763--GOTO
