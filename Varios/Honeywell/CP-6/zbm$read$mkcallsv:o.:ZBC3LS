

CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=1  
        1         1             /* $Header: mkcalls.c,v 1.6 87/03/29 12:55:25 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  makecalls: expand a datastructure as delivered by "EM_getline"
        7         7              into calls to the procedural interface.
        8         8              Exported routine:
        9         9                 EM_mkcalls
       10        10             */
       11        11
       12        12             #include <em_spec.h>
       13        13             #include <em_mnem.h>
       14        14             #include <em_pseu.h>
       15        15             #include <em_flag.h>
       16        16             #include "em_ptyp.h"
       17        17             #include <em.h>
       18        18             #include "em_comp.h"
       19        19             #include <assert.h>
       20        20
       21        21             extern char em_flag[];   /* One per EM instruction: indicates parameter kind *
                               /
       22        22             extern short em_ptyp[];  /* One per parameter kind: indicates parameter type *
                               /
       23        23
       24        24             static int listtype = 0; /* indicates pseudo when generating code for
       25        25                          variable length argument lists
       26        26                          (only for MES)
       27        27                       */
       28        28
       29        29             #ifdef CHECKING
       30        30   *S*       /*  c_getarg: Check the argument indicated by "args".
       31        31   *S*        The argument must be of a type allowed by "typset".
       32        32   *S*        Return a pointer to the next argument.
       33        33   *S*       */
       34        34   *S*       PRIVATE struct e_args *
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=2  
       35        35   *S*       c_getarg(args, typset)
       36        36   *S*        register struct e_args *args;
       37        37   *S*       {
       38        38   *S*
       39        39   *S*        if (((!typset) && args) ||
       40        40   *S*            ((!args) && typset)) {
       41        41   *S*           /* End of arguments expected, but there are more, or
       42        42   *S*              an argument expected, but there is none
       43        43   *S*           */
       44        44   *S*           EM_error = "Illegal number of parameters";
       45        45   *S*           return 0;
       46        46   *S*        }
       47        47   *S*
       48        48   *S*        if (!args) return 0;
       49        49   *S*        if (!(args->em_argtype & typset)) {
       50        50   *S*           /* Type error */
       51        51   *S*           EM_error = "Illegal parameter type";
       52        52   *S*        }
       53        53   *S*
       54        54   *S*        return args->em_next;
       55        55   *S*       }
       56        56   *S*       #else not CHECKING
       57        57             #define c_getarg(arg, x) ((arg) ? (arg)->em_next : (arg))
       58        58             #endif CHECKING
       59        59
       60        60             /*  EM_doinstr: An EM instruction
       61        61             */
       62        62             PRIVATE
       63        63             EM_doinstr(opcode, arg)
       64        64              register struct e_args *arg;
       65        65             {
       66        66    1         register int parametertype;   /* parametertype of the instruction */
       67        67    1         register struct e_args *args;
       68        68    1
       69        69    1         parametertype = em_flag[opcode-sp_fmnem] & EM_PAR;
       70        70    1        #ifdef CHECKING
       71        71   *S*        if (parametertype != PAR_NO && parametertype != PAR_W) {
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=3  
       72        72   *S*           if (!arg) {
       73        73   *S*              EM_error = "Illegal number of parameters";
       74        74   *S*              return;
       75        75   *S*           }
       76        76   *S*        }
       77        77   *S*       #endif CHECKING
       78        78    1         switch(parametertype) {
       79        79    2            case PAR_NO:
       80        80    2               break;
       81        81    2            default:
       82        82    2               args = c_getarg(arg, em_ptyp[parametertype]);
       83        83    2               args = c_getarg(args, 0);
       84        84    2               break;
       85        85    2            case PAR_W:
       86        86    2               if (arg) {
       87        87    3                  args = c_getarg(arg, cst_ptyp);
       88        88    3                  args = c_getarg(args, 0);
       89        89    3               }
       90        90    2               else {
       91        91    3        #include "C_mnem_narg"
       92       145    3                  return;
       93       146    3               }
       94       147    2               break;
       95       148    2         }
       96       149    1        #include "C_mnem"
       97       321    1        }
       98       322
       99       323             PRIVATE
      100       324             EM_dopseudo(opcode, args)
      101       325              register struct e_args *args;
      102       326             {
      103       327    1         register struct e_args *arg;
      104       328    1
      105       329    1         switch(opcode) {
      106       330    2            case ps_exc: {
      107       331    3               register struct e_args *args2;
      108       332    3
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=4  
      109       333    3               arg = c_getarg(args, cst_ptyp);
      110       334    3               args2 = c_getarg(arg, cst_ptyp);
      111       335    3               args2 = c_getarg(args2, 0);
      112       336    3               C_exc(args->em_cst, arg->em_cst);
      113       337    3               break;
      114       338    3            }
      115       339    2            case ps_hol: {
      116       340    3               register struct e_args *args2, *args3;
      117       341    3
      118       342    3               arg = c_getarg(args, cst_ptyp);
      119       343    3               args2 = c_getarg(arg, par_ptyp);
      120       344    3               args3 = c_getarg(args2, cst_ptyp);
      121       345    3               args3 = c_getarg(args3, 0);
      122       346    3               switch(arg->em_argtype) {
      123       347    4                   case cst_ptyp:
      124       348    4                  C_hol_cst(args->em_cst,
      125       349    4                       arg->em_cst,
      126       350    4                       (int) (args2->em_cst));
      127       351    4                  break;
      128       352    4                   case ico_ptyp:
      129       353    4                  C_hol_icon(args->em_cst,
      130       354    4                        arg->em_str,
      131       355    4                        arg->em_size,
      132       356    4                        (int)(args2->em_cst));
      133       357    4                  break;
      134       358    4                   case uco_ptyp:
      135       359    4                  C_hol_ucon(args->em_cst,
      136       360    4                        arg->em_str,
      137       361    4                        arg->em_size,
      138       362    4                        (int)(args2->em_cst));
      139       363    4                  break;
      140       364    4                   case fco_ptyp:
      141       365    4                  C_hol_fcon(args->em_cst,
      142       366    4                        arg->em_str,
      143       367    4                        arg->em_size,
      144       368    4                        (int)(args2->em_cst));
      145       369    4                  break;
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=5  
      146       370    4                   case sof_ptyp:
      147       371    4                  C_hol_dnam(args->em_cst,
      148       372    4                        arg->em_dnam,
      149       373    4                        arg->em_soff,
      150       374    4                        (int)(args2->em_cst));
      151       375    4                  break;
      152       376    4                   case nof_ptyp:
      153       377    4                  C_hol_dlb(args->em_cst,
      154       378    4                       arg->em_dlb,
      155       379    4                       arg->em_noff,
      156       380    4                       (int)(args2->em_cst));
      157       381    4                  break;
      158       382    4                   case ilb_ptyp:
      159       383    4                  C_hol_ilb(args->em_cst,
      160       384    4                       arg->em_ilb,
      161       385    4                       (int)(args2->em_cst));
      162       386    4                  break;
      163       387    4                   case pro_ptyp:
      164       388    4                  C_hol_pnam(args->em_cst,
      165       389    4                        arg->em_pnam,
      166       390    4                        (int)(args2->em_cst));
      167       391    4                  break;
      168       392    4                   default:
      169       393    4                  EM_error = "Illegal parameter type";
      170       394    4                  break;
      171       395    4               }
      172       396    3               break;
      173       397    3            }
      174       398    2            case ps_bss: {
      175       399    3               register struct e_args *args2, *args3;
      176       400    3
      177       401    3               arg = c_getarg(args, cst_ptyp);
      178       402    3               args2 = c_getarg(arg, par_ptyp);
      179       403    3               args3 = c_getarg(args2, cst_ptyp);
      180       404    3               args3 = c_getarg(args3, 0);
      181       405    3               switch(arg->em_argtype) {
      182       406    4                   case cst_ptyp:
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=6  
      183       407    4                  C_bss_cst(args->em_cst,
      184       408    4                       arg->em_cst,
      185       409    4                       (int)(args2->em_cst));
      186       410    4                  break;
      187       411    4                   case ico_ptyp:
      188       412    4                  C_bss_icon(args->em_cst,
      189       413    4                        arg->em_str,
      190       414    4                        arg->em_size,
      191       415    4                        (int)(args2->em_cst));
      192       416    4                  break;
      193       417    4                   case uco_ptyp:
      194       418    4                  C_bss_ucon(args->em_cst,
      195       419    4                        arg->em_str,
      196       420    4                        arg->em_size,
      197       421    4                        (int)(args2->em_cst));
      198       422    4                  break;
      199       423    4                   case fco_ptyp:
      200       424    4                  C_bss_fcon(args->em_cst,
      201       425    4                        arg->em_str,
      202       426    4                        arg->em_size,
      203       427    4                        (int)(args2->em_cst));
      204       428    4                  break;
      205       429    4                   case sof_ptyp:
      206       430    4                  C_bss_dnam(args->em_cst,
      207       431    4                        arg->em_dnam,
      208       432    4                        arg->em_soff,
      209       433    4                        (int)(args2->em_cst));
      210       434    4                  break;
      211       435    4                   case nof_ptyp:
      212       436    4                  C_bss_dlb(args->em_cst,
      213       437    4                       arg->em_dlb,
      214       438    4                       arg->em_noff,
      215       439    4                       (int)(args2->em_cst));
      216       440    4                  break;
      217       441    4                   case ilb_ptyp:
      218       442    4                  C_bss_ilb(args->em_cst,
      219       443    4                       arg->em_ilb,
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=7  
      220       444    4                       (int)(args2->em_cst));
      221       445    4                  break;
      222       446    4                   case pro_ptyp:
      223       447    4                  C_bss_pnam(args->em_cst,
      224       448    4                        arg->em_pnam,
      225       449    4                        (int)(args2->em_cst));
      226       450    4                  break;
      227       451    4                   default:
      228       452    4                  EM_error = "Illegal parameter type";
      229       453    4                  break;
      230       454    4               }
      231       455    3               break;
      232       456    3            }
      233       457    2            case ps_end:
      234       458    2               if (args) {
      235       459    3                  arg = c_getarg(args, cst_ptyp);
      236       460    3                  arg = c_getarg(arg, 0);
      237       461    3                  C_end(args->em_cst);
      238       462    3                  break;
      239       463    3               }
      240       464    2               C_end_narg();
      241       465    2               break;
      242       466    2            case ps_exa:
      243       467    2            case ps_ina:
      244       468    2               arg = c_getarg(args, lab_ptyp);
      245       469    2               arg = c_getarg(arg, 0);
      246       470    2               if (args->em_argtype == nof_ptyp) {
      247       471    3                  if (opcode == ps_exa) {
      248       472    4                     C_exa_dlb(args->em_dlb);
      249       473    4                  }
      250       474    3                  else  C_ina_dlb(args->em_dlb);
      251       475    3                  break;
      252       476    3               }
      253       477    2               if (opcode == ps_exa) {
      254       478    3                  C_exa_dnam(args->em_dnam);
      255       479    3               }
      256       480    2               else  C_ina_dnam(args->em_dnam);
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=8  
      257       481    2               break;
      258       482    2            case ps_exp:
      259       483    2            case ps_inp:
      260       484    2               arg = c_getarg(args, pro_ptyp);
      261       485    2               arg = c_getarg(arg, 0);
      262       486    2               if (opcode == ps_exp) {
      263       487    3                  C_exp(args->em_pnam);
      264       488    3               }
      265       489    2               else  C_inp(args->em_pnam);
      266       490    2               break;
      267       491    2            case ps_pro:
      268       492    2               arg = c_getarg(args, pro_ptyp);
      269       493    2               if (arg) {
      270       494    3                  struct e_args *args2;
      271       495    3
      272       496    3                  args2 = c_getarg(arg, cst_ptyp);
      273       497    3                  args2 = c_getarg(args2, 0);
      274       498    3                  C_pro(args->em_pnam, arg->em_cst);
      275       499    3               }
      276       500    2               else  C_pro_narg(args->em_pnam);
      277       501    2               break;
      278       502    2            case ps_con:
      279       503    2               arg = c_getarg(args, val_ptyp);
      280       504    2               arg = c_getarg(arg, 0);
      281       505    2               switch(args->em_argtype) {
      282       506    3                  case ilb_ptyp:
      283       507    3                     C_con_ilb(args->em_ilb);
      284       508    3                     break;
      285       509    3                  case nof_ptyp:
      286       510    3                     C_con_dlb(args->em_dlb, args->em_noff);
      287       511    3                     break;
      288       512    3                  case sof_ptyp:
      289       513    3                     C_con_dnam(args->em_dnam, args->em_soff);
      290       514    3                     break;
      291       515    3                  case cst_ptyp:
      292       516    3                     C_con_cst(args->em_cst);
      293       517    3                     break;
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=9  
      294       518    3                  case pro_ptyp:
      295       519    3                     C_con_pnam(args->em_pnam);
      296       520    3                     break;
      297       521    3                  case str_ptyp:
      298       522    3                     C_con_scon(args->em_str, args->em_size);
      299       523    3                     break;
      300       524    3                  case ico_ptyp:
      301       525    3                     C_con_icon(args->em_str, args->em_size);
      302       526    3                     break;
      303       527    3                  case uco_ptyp:
      304       528    3                     C_con_ucon(args->em_str, args->em_size);
      305       529    3                     break;
      306       530    3                  case fco_ptyp:
      307       531    3                     C_con_fcon(args->em_str, args->em_size);
      308       532    3                     break;
      309       533    3                  default:
      310       534    3                     EM_error = "Illegal argument type";
      311       535    3                     return 0;
      312       536    3               }
      313       537    2               break;
      314       538    2            case ps_rom:
      315       539    2               arg = c_getarg(args, val_ptyp);
      316       540    2               arg = c_getarg(arg, 0);
      317       541    2               switch(args->em_argtype) {
      318       542    3                  case ilb_ptyp:
      319       543    3                     C_rom_ilb(args->em_ilb);
      320       544    3                     break;
      321       545    3                  case nof_ptyp:
      322       546    3                     C_rom_dlb(args->em_dlb, args->em_noff);
      323       547    3                     break;
      324       548    3                  case sof_ptyp:
      325       549    3                     C_rom_dnam(args->em_dnam, args->em_soff);
      326       550    3                     break;
      327       551    3                  case cst_ptyp:
      328       552    3                     C_rom_cst(args->em_cst);
      329       553    3                     break;
      330       554    3                  case pro_ptyp:
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=10 
      331       555    3                     C_rom_pnam(args->em_pnam);
      332       556    3                     break;
      333       557    3                  case str_ptyp:
      334       558    3                     C_rom_scon(args->em_str, args->em_size);
      335       559    3                     break;
      336       560    3                  case ico_ptyp:
      337       561    3                     C_rom_icon(args->em_str, args->em_size);
      338       562    3                     break;
      339       563    3                  case uco_ptyp:
      340       564    3                     C_rom_ucon(args->em_str, args->em_size);
      341       565    3                     break;
      342       566    3                  case fco_ptyp:
      343       567    3                     C_rom_fcon(args->em_str, args->em_size);
      344       568    3                     break;
      345       569    3                  default:
      346       570    3                     EM_error = "Illegal argument type";
      347       571    3                     return 0;
      348       572    3               }
      349       573    2               break;
      350       574    2            default:
      351       575    2               EM_error = "Illegal pseudo instruction";
      352       576    2               break;
      353       577    2         }
      354       578    1        }
      355       579
      356       580             PRIVATE
      357       581             EM_docon(args)
      358       582              register struct e_args *args;
      359       583             {
      360       584    1         register struct e_args *arg;
      361       585    1
      362       586    1         arg = c_getarg(args, val_ptyp);
      363       587    1         arg = c_getarg(arg, 0);
      364       588    1         switch(args->em_argtype) {
      365       589    2            case ilb_ptyp:
      366       590    2               C_ilb(args->em_ilb);
      367       591    2               break;
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=11 
      368       592    2            case nof_ptyp:
      369       593    2               C_dlb(args->em_dlb, args->em_noff);
      370       594    2               break;
      371       595    2            case sof_ptyp:
      372       596    2               C_dnam(args->em_dnam, args->em_soff);
      373       597    2               break;
      374       598    2            case cst_ptyp:
      375       599    2               C_cst(args->em_cst);
      376       600    2               break;
      377       601    2            case pro_ptyp:
      378       602    2               C_pnam(args->em_pnam);
      379       603    2               break;
      380       604    2            case str_ptyp:
      381       605    2               C_scon(args->em_str, args->em_size);
      382       606    2               break;
      383       607    2            case ico_ptyp:
      384       608    2               C_icon(args->em_str, args->em_size);
      385       609    2               break;
      386       610    2            case uco_ptyp:
      387       611    2               C_ucon(args->em_str, args->em_size);
      388       612    2               break;
      389       613    2            case fco_ptyp:
      390       614    2               C_fcon(args->em_str, args->em_size);
      391       615    2               break;
      392       616    2            default:
      393       617    2               EM_error = "Illegal argument type";
      394       618    2               break;
      395       619    2         }
      396       620    1        }
      397       621
      398       622             PRIVATE
      399       623             EM_dostartmes(args)
      400       624              register struct e_args *args;
      401       625             {
      402       626    1         register struct e_args *arg;
      403       627    1
      404       628    1         if (listtype) {
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=12 
      405       629    2            EM_error = "Message not ended";
      406       630    2            return;
      407       631    2         }
      408       632    1         arg = c_getarg(args, cst_ptyp);
      409       633    1         arg = c_getarg(arg, 0);
      410       634    1         C_mes_begin((int) (args->em_cst));
      411       635    1         listtype = ps_mes;
      412       636    1        }
      413       637
      414       638             EXPORT int
      415       639             EM_mkcalls(line)
      416       640              register struct e_instr *line;
      417       641             {
      418       642    1
      419       643    1        #ifdef CHECKING
      420       644   *S*        if (listtype && line->em_type != EM_MESARG && line->em_type != EM_ENDMES) {
      421       645   *S*           EM_error = "Message not ended";
      422       646   *S*           return 0;
      423       647   *S*        }
      424       648   *S*       #endif CHECKING
      425       649    1         EM_error = 0;
      426       650    1         switch(line->em_type) {
      427       651    2            default:
      428       652    2               EM_error = "Illegal EM line";
      429       653    2               break;
      430       654    2            case EM_MNEM:
      431       655    2               /* normal instruction */
      432       656    2               EM_doinstr(line->em_opcode, line->em_args);
      433       657    2               break;
      434       658    2            case EM_DEFILB:
      435       659    2               /* defining occurrence of an instruction label */
      436       660    2               C_df_ilb(line->em_deflb);
      437       661    2               break;
      438       662    2            case EM_DEFDLB:
      439       663    2               /* defining occurrence of a global data label */
      440       664    2               C_df_dlb(line->em_deflb);
      441       665    2               break;
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=13 
      442       666    2            case EM_DEFDNAM:
      443       667    2               /* defining occurrence of a non-numeric data label */
      444       668    2               C_df_dnam(line->em_defdnam);
      445       669    2               break;
      446       670    2            case EM_PSEU:
      447       671    2               /* pseudo */
      448       672    2               EM_dopseudo(line->em_opcode, line->em_args);
      449       673    2               break;
      450       674    2            case EM_STARTMES:
      451       675    2               /* start of a MES pseudo */
      452       676    2               EM_dostartmes(line->em_arg);
      453       677    2               break;
      454       678    2            case EM_MESARG:
      455       679    2            case EM_ENDMES:
      456       680    2        #ifdef CHECKING
      457       681   *S*              if (!listtype) {
      458       682   *S*                 EM_error = "Message not started";
      459       683   *S*                 return 0;
      460       684   *S*              }
      461       685   *S*       #endif
      462       686    2               if (line->em_type == EM_MESARG) {
      463       687    3                  EM_docon(line->em_arg);
      464       688    3                  break;
      465       689    3               }
      466       690    2               C_mes_end();
      467       691    2               listtype = 0;
      468       692    2               break;
      469       693    2         }
      470       694    1         if (EM_error) return 0;
      471       695    1         return 1;
      472       696    1        }
      473       697
---  Include file information  ---

   em_spec:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
CC.C03    File=zbm$read$mkcalls:c.:ZBC3TOU                                          Fri Aug 22 1997  Page=14 
   em_flag:h.:ZBC3TOU. is referenced
   em_ptyp:h.:ZBC3TOU. is referenced
   em:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   em_code:h.:ZBC3TOU. is referenced
   zbm$em_comp:h.:ZBC3TOU. is referenced
   assert:h.:LIB_E05. is referenced
   zbm$read$C_mnem_narg.:ZBC3TOU. is referenced
   zbm$read$C_mnem.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbm$read$mkcalls:c.:ZBC3TOU
