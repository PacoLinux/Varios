VERSION E05

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:1    
        1        1        /*M* KNA$SUBS - Application Presentation Engine  Assorted routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0  */
        8        8
        9        9        /*P* NAME: KNA$SUBS
       10       10           PURPOSE:  This module contains various utility routines used by the
       11       11                     Application Protocol Engine:
       12       12
       13       13                     KNA$CONTEXT - To get and release IOP, LDCT, TCTX and SSN context
       14       14                     KNA$LOCATE_TCTX - Selectively locate a transport context
       15       15                     KNA$CHECKSUM - Build and OSI header checksums
       16       16                     KNA$MAP - To map user area into the monitor window
       17       17                     KNA$REG_USER - To reg the user
       18       18                     KNA$DECODE_VDO - To decode a read response
       19       19                     KNA$BUILD_VDO
       20       20                     KNA$FCNO and KNA$FCNOU
       21       21                     KNA$CONV_STR - To convert stream name to stream number
       22       22                     KNA$CHECK_VDO
       23       23        */
       24       24
       25       25
       26       26        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:2    
       27       27        /*F* NAME: KNA$CONTEXT
       28       28             PURPOSE:
       29       29                   The KNA$CONTEXT module contains the routines to allocate
       30       30                   and deallocate the LCP-6 I/O Packets, Session Context
       31       31                   Blocks and Logical Device Control Table entries.
       32       32        */
       33       33
       34       34        /*D* NAME: KNA$GET_context_block
       35       35
       36       36             CALL: CALL KNA$GET [ IOP | LDCT | TCTX | SSN ] (ctx$)
       37       37
       38       38             OUTPUT: ctx$ - contains the address on the allocated context block.
       39       39
       40       40             DESCRIPTION:
       41       41                   Current usage and peak counts for each of type of context
       42       42                   blocks are maintained.
       43       43                   If there are no context blocks available the alternate
       44       44                   return is taken.
       45       45        */
       46       46
       47       47        /*D* NAME: KNA$RLS_context_block
       48       48
       49       49             CALL: CALL KNA$RLS [ IOP | LDCT | SSN ] (ctx$)
       50       50
       51       51             INPUT: ctx$ - contains the address of the context block to be released.
       52       52
       53       53             DESCRIPTION:
       54       54                   The context block is added to the chain of free context
       55       55                   blocks.
       56       56                   If the context checker for any specific type is turned
       57       57                   on, the release context routine will run the chain of
       58       58                   free context blocks to check for inconsistancies.
       59       59        */
       60       60
       61       61        KNA$CONTEXT: PROC(CTX$) ALTRET;
       62       62
       63       63        %INCLUDE GH_SCHD_M;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:3    
       64      207        %INCLUDE K_ADDRESS_M;
       65      710        %INCLUDE K_TRANSPORT_E;
       66     1035        %INCLUDE KN_DATA_M;
       67     2821        %INCLUDE KNA_MACRO_M;
       68     2897        %INCLUDE GH_LCP6_M;
       69     3731        %INCLUDE GU_LCP6_M;
       70     4659        %INCLUDE GH_GATE_M;
       71     4700        %INCLUDE K_SCODE_C;
       72     4785        %INCLUDE FR_SCODE_C;
       73     4802        %INCLUDE G_JIT_M;
       74     5067
       75     5068                                                /* Input parameters                   */
       76     5069    1   DCL CTX$ PTR;
       77     5070
       78     5071                                                /* Auto Storage                       */
       79     5072    1   DCL DATA$ PTR;                          /*addr of appropriate kn_data_tbl*/
       80     5073    1   DCL LDCTX UBIN;
       81     5074    1   DCL TCTX_ID REDEF LDCTX UBIN;
       82     5075    1   DCL GENERATION UBIN;
       83     5076
       84     5077    1   DCL CTX_COUNT UBIN;
       85     5078    1   DCL CTX$$ PTR;
       86     5079    1   DCL LNK$ PTR;
       87     5080
       88     5081                                                /* Static Data                        */
       89     5082        %VLP_SCODE (FPTN=SC_BRKN_CHAIN,ERR#=%S$BRKN_CHAIN,SEV=G_SEV_SCREECH#,
       90     5083                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       91     5144        %VLP_SCODE (FPTN=SC_IOP,ERR#=%S$IOP,SEV=G_SEV_SCREECH#,
       92     5145                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       93     5206        %VLP_SCODE (FPTN=SC_LDCT,ERR#=%S$LDCT,SEV=G_SEV_SCREECH#,
       94     5207                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       95     5268        %VLP_SCODE (FPTN=SC_SSN,ERR#=%S$SSN,SEV=G_SEV_SCREECH#,
       96     5269                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       97     5330        %VLP_SCODE (FPTN=SC_TCTX,ERR#=%S$TCTX,SEV=G_SEV_SCREECH#,
       98     5331                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       99     5392        %VLP_SCODE (FPTN=SC_DELU,ERR#=%S$R2FEW,SEV=G_SEV_SCREECH#,
      100     5393                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:4    
      101     5454        %GATE (FPTN=KN_CTX_GATE,STCLASS=SYMREF);
      102     5473
      103     5474                                                /* External Data                      */
      104     5475    1   DCL G$BOBCAT$ PTR SYMREF READONLY;
      105     5476    1   DCL G$JIT$ PTR SYMREF READONLY;
      106     5477    1   DCL KN_IOP_START$ PTR SYMREF READONLY;
      107     5478    1   DCL KN_LDCT_START$ PTR SYMREF READONLY;
      108     5479    1   DCL KN_SSN_START$ PTR SYMREF READONLY;
      109     5480    1   DCL KN_TCTX_START$ PTR SYMREF READONLY;
      110     5481    1   DCL KN_IOP_END$ PTR SYMREF READONLY;
      111     5482    1   DCL KN_LDCT_END$ PTR SYMREF READONLY;
      112     5483    1   DCL KN_SSN_END$ PTR SYMREF READONLY;
      113     5484    1   DCL KN_DCT$$ PTR SYMREF READONLY;
      114     5485    1   DCL KN_TCTX$$ PTR SYMREF READONLY;
      115     5486    1   DCL KNT_WINDOW_EXTENDED UBIN SYMREF;
      116     5487    1   DCL KNT_RETRAN_TIMER UBIN SYMREF;
      117     5488    1   DCL KNT_WINDOW_TIMER UBIN SYMREF;
      118     5489    1   DCL KNT_INACTIVITY_TIMER UBIN SYMREF;
      119     5490    1   DCL KNT_REFERENCE_TIMER UBIN SYMREF;
      120     5491
      121     5492                                                /* Based Data                         */
      122     5493        %KN_DATA_TBL (FPTN=KN$DATA, TYPE=STRUCTURE, STCLASS="BASED(DATA$)");
      123     5557        %KNA$SSN;
      124     5640        %KN$IOP;
      125     5813        %KN$LDCT;
      126     6058        %K$TCTX;
      127     6965    1   DCL KN$DCT$(0:0) PTR BASED(KN_DCT$$);
      128     6966    1   DCL K$TCTX$(0:0) PTR BASED(KN_TCTX$$);
      129     6967        %G$JIT(STCLASS="BASED(G$JIT$)");
      130     7381    1   DCL B$PTR PTR BASED;
      131     7382
      132     7383
      133     7384    1   DCL SCREECH ENTRY(1);
      134     7385    1   DCL KNT$TTIMER ENTRY(1);
      135     7386    1   DCL KNT$RLS_CHAIN ENTRY(1);
      136     7387    1   DCL GHS$CANCEL_TMR ENTRY(1);
      137     7388        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:5    
      138     7389    1   KNA$GETIOP: ENTRY(CTX$) ALTRET;
      139     7390    1      DATA$ = ADDR(KN_IOP_START$);
      140     7391    1      CALL GET_CTX
      141     7392    2      WHENALTRETURN DO;
      142     7393    2           CALL SCREECH(SC_IOP);
      143     7394    2           ALTRETURN;
      144     7395    2           END;
      145     7396        /*S* SCREECH_CODE: KNA-S$IOP
      146     7397             TYPE: SCREECH
      147     7398             MESSAGE: Out of system IOPs.  NETCON IOP value may be too small.
      148     7399             REMARKS: If increasing the IOP value is ineffective, submit a star.
      149     7400        */
      150     7401    1      CTX$->KN$IOP = '0'B;
      151     7402    1      CTX$->KN$IOP.FLAGS.INUSE = '1'B;
      152     7403    1      CTX$->KN$IOP.L.USER# = G$JIT.USR#;
      153     7404    1      RETURN;
      154     7405
      155     7406    1   KNA$RLSIOP: ENTRY(CTX$) ALTRET;
      156     7407    1      IF CTX$ = ADDR(NIL) THEN CALL CTX_SCREECH;
      157     7408
      158     7409    1      IF NOT(CTX$->KN$IOP.FLAGS.INUSE)
      159     7410    1      THEN CALL CTX_SCREECH;
      160     7411
      161     7412    1      ELSE CTX$->KN$IOP.FLAGS.INUSE = '0'B;
      162     7413
      163     7414    1      DATA$ = ADDR(KN_IOP_START$);
      164     7415    1      CALL RLS_CTX;
      165     7416    1      RETURN;
      166     7417        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:6    
      167     7418    1   KNA$GETLDCT: ENTRY(CTX$) ALTRET;
      168     7419    1      DATA$ = ADDR(KN_LDCT_START$);
      169     7420    1      CALL GET_CTX
      170     7421    2      WHENALTRETURN DO;
      171     7422    2           CALL SCREECH(SC_LDCT);
      172     7423    2           ALTRETURN;
      173     7424    2           END;
      174     7425        /*S* SCREECH_CODE: KNA-S$LDCT
      175     7426             TYPE: SCREECH
      176     7427             MESSAGE: Out of system LDCTs.  NETCON LDCT value may be too small.
      177     7428             REMARKS: If increasing the LDCT value is ineffective, submit a star.
      178     7429        */
      179     7430
      180     7431    1      LDCTX = CTX$->KN$LDCT.LDCTX;
      181     7432    1      GENERATION = CTX$->KN$LDCT.GENERATION +1;
      182     7433    1      CTX$->KN$LDCT = '0'B;
      183     7434    1      CTX$->KN$LDCT.LDCTX = LDCTX;
      184     7435    1      CTX$->KN$LDCT.GENERATION = GENERATION;
      185     7436    1      CTX$->KN$LDCT.CQPTR = -1;
      186     7437
      187     7438    1      KN$DCT$(LDCTX) = CTX$;
      188     7439
      189     7440    1      RETURN;
      190     7441
      191     7442
      192     7443    1   KNA$RLSLDCT: ENTRY(CTX$) ALTRET;
      193     7444    1      IF CTX$ = ADDR(NIL) THEN CALL CTX_SCREECH;
      194     7445
      195     7446    2      ELSE DO;
      196     7447    2           CTX$->KN$LDCT.USER# = 0;
      197     7448    2           KN$DCT$(CTX$->KN$LDCT.LDCTX) = ADDR(NIL);
      198     7449    2           END;
      199     7450
      200     7451           %LOCK (G=KN_CTX_GATE);
      201     7458    1      IF CTX$->KN$LDCT.FLAGS.QUEUED
      202     7459    2      THEN DO;
      203     7460    2           CTX$->KN$LDCT.FLAGS.REL = '1'B;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:7    
      204     7461    2           CTX$->KN$LDCT.USER_ENTRY$ = ENTADDR(NIL);
      205     7462                %UNLOCK (G=KN_CTX_GATE);
      206     7469    2           RETURN;
      207     7470    2           END;
      208     7471
      209     7472    1      DATA$ = ADDR(KN_LDCT_START$);
      210     7473    1      CALL RLS_CTX2;
      211     7474    1      RETURN;
      212     7475
      213     7476        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:8    
      214     7477    1   KNA$GETSSN: ENTRY(CTX$) ALTRET;
      215     7478    1      DATA$ = ADDR(KN_SSN_START$);
      216     7479    1      CALL GET_CTX
      217     7480    2      WHENALTRETURN DO;
      218     7481    2           CALL SCREECH(SC_SSN);
      219     7482    2           ALTRETURN;
      220     7483    2           END;
      221     7484        /*S* SCREECH_CODE: KNA-S$SSN
      222     7485             TYPE: SCREECH
      223     7486             MESSAGE: Out of system APESSNs.  NETCON APESSN value may be too small.
      224     7487             REMARKS: If increasing the APESSN value is ineffective, submit a star.
      225     7488        */
      226     7489    1      CTX$->KNA$SSN = '0'B;
      227     7490    1      RETURN;
      228     7491
      229     7492
      230     7493    1   KNA$RLSSSN: ENTRY(CTX$) ALTRET;
      231     7494    1      IF CTX$ = ADDR(NIL) THEN CALL CTX_SCREECH;
      232     7495    1      ELSE CTX$->KNA$SSN.STATE = 0;
      233     7496
      234     7497    1      DATA$ =ADDR(KN_SSN_START$);
      235     7498    1      CALL RLS_CTX;
      236     7499    1      RETURN;
      237     7500
      238     7501        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:9    
      239     7502    1   KNA$GETTCTX: ENTRY(CTX$) ALTRET;
      240     7503    1      DATA$ = ADDR(KN_TCTX_START$);
      241     7504    1      CALL GET_CTX
      242     7505    2      WHENALTRETURN DO;
      243     7506    2           CALL SCREECH(SC_TCTX);
      244     7507    2           END;
      245     7508        /*S* SCREECH_CODE: KNA-S$TCTX
      246     7509             TYPE: SCREECH
      247     7510             MESSAGE: Out of Transport Context.
      248     7511        */
      249     7512
      250     7513    1      TCTX_ID = CTX$->K$TCTX.SRC_REF;
      251     7514    1      CTX$->K$TCTX = '0'B;
      252     7515    1      CTX$->K$TCTX.SRC_REF = TCTX_ID;
      253     7516    1      CTX$->K$TCTX.STATE = %K_TSTATE_CLOSED;
      254     7517    1      CTX$->K$TCTX.RCV_WINDOW_SZ = KNT_WINDOW_EXTENDED;
      255     7518    1      CTX$->K$TCTX.RECV_UWE = CTX$->K$TCTX.RCV_WINDOW_SZ;
      256     7519    1      CTX$->K$TCTX.SEND_RETRY_COUNT = 1;
      257     7520    1      CTX$->K$TCTX.TPDUSZ = 128;
      258     7521    1      CTX$->K$TCTX.TPDUSZ_PARM = %K_TPDUSIZE_128;
      259     7522    1      CTX$->K$TCTX.MAXSEQ = 2147483647/*.7FFF FFFF*/;
      260     7523    1      CTX$->K$TCTX.SSN_CRDT = 1;
      261     7524
      262     7525    1      CTX$->K$TCTX.TMR_RETRAN.INTERVAL = (KNT_RETRAN_TIMER *15) /2;
      263     7526    1      CTX$->K$TCTX.TMR_WINDOW.INTERVAL = (KNT_WINDOW_TIMER *15) /2;
      264     7527    1      CTX$->K$TCTX.TMR_INACTIVITY.INTERVAL = (KNT_INACTIVITY_TIMER *15) /2;
      265     7528    1      CTX$->K$TCTX.TMR_REFERENCE.INTERVAL = (KNT_REFERENCE_TIMER *15) /2;
      266     7529
      267     7530    1      CTX$->K$TCTX.TMR_RETRAN.CLOCK_ID.TCTX = CTX$->K$TCTX.SRC_REF;
      268     7531    1      CTX$->K$TCTX.TMR_WINDOW.CLOCK_ID.TCTX = CTX$->K$TCTX.SRC_REF;
      269     7532    1      CTX$->K$TCTX.TMR_INACTIVITY.CLOCK_ID.TCTX = CTX$->K$TCTX.SRC_REF;
      270     7533    1      CTX$->K$TCTX.TMR_REFERENCE.CLOCK_ID.TCTX = CTX$->K$TCTX.SRC_REF;
      271     7534
      272     7535    1      CTX$->K$TCTX.TMR_RETRAN.CLOCK_ID.TMR = %K_TTIMER_RETRAN;
      273     7536    1      CTX$->K$TCTX.TMR_WINDOW.CLOCK_ID.TMR = %K_TTIMER_WINDOW;
      274     7537    1      CTX$->K$TCTX.TMR_INACTIVITY.CLOCK_ID.TMR = %K_TTIMER_INACTIVITY;
      275     7538    1      CTX$->K$TCTX.TMR_REFERENCE.CLOCK_ID.TMR = %K_TTIMER_REFERENCE;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:10   
      276     7539
      277     7540
      278     7541    1      CTX$->K$TCTX.TMR_RETRAN.PROC$ = ENTADDR(KNT$TTIMER);
      279     7542    1      CTX$->K$TCTX.TMR_WINDOW.PROC$ = ENTADDR(KNT$TTIMER);
      280     7543    1      CTX$->K$TCTX.TMR_INACTIVITY.PROC$ = ENTADDR(KNT$TTIMER);
      281     7544    1      CTX$->K$TCTX.TMR_REFERENCE.PROC$ = ENTADDR(KNT$TTIMER);
      282     7545
      283     7546    1      K$TCTX$(TCTX_ID) = CTX$;
      284     7547
      285     7548    1      RETURN;
      286     7549
      287     7550
      288     7551    1   KNA$RELTCTX: ENTRY(CTX$) ALTRET;
      289     7552    1      IF CTX$ = ADDR(NIL) THEN CALL CTX_SCREECH;
      290     7553
      291     7554    1      ELSE CALL GHS$CANCEL_TMR (CTX$->K$TCTX.TMR_RETRAN);
      292     7555    1      CALL GHS$CANCEL_TMR (CTX$->K$TCTX.TMR_WINDOW);
      293     7556    1      CALL GHS$CANCEL_TMR (CTX$->K$TCTX.TMR_INACTIVITY);
      294     7557    1      CALL GHS$CANCEL_TMR (CTX$->K$TCTX.TMR_REFERENCE);
      295     7558
      296     7559    1      CALL KNT$RLS_CHAIN(CTX$->K$TCTX);
      297     7560
      298     7561    1      CTX$->K$TCTX.STATE = %K_TSTATE_CLOSED;
      299     7562
      300     7563    1      DATA$ = ADDR(KN_TCTX_START$);
      301     7564    1      CALL RLS_CTX;
      302     7565    1      RETURN;
      303     7566
      304     7567        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:11   
      305     7568        /*D* NAME: KNA$CHECK
      306     7569
      307     7570             PURPOSE: To check for resources that may be still allocated
      308     7571                      to the user at delete user time.
      309     7572        */
      310     7573
      311     7574    1   KNA$CHECK: ENTRY ALTRET;
      312     7575
      313     7576    1      DATA$ = KN_SSN_START$;
      314     7577    2      DO WHILE DATA$ <= KN_SSN_END$;
      315     7578    2           IF DATA$->KNA$SSN.STATE ~= 0 AND DATA$->KNA$SSN.USER# = G$JIT.USR#
      316     7579    2           THEN CALL DELU_SCREECH;
      317     7580
      318     7581    2           ELSE DATA$ = PINCRW(DATA$,SIZEW(KNA$SSN));
      319     7582    2           END;
      320     7583
      321     7584    1      DATA$ = KN_IOP_START$;
      322     7585    2      DO WHILE DATA$ <= KN_IOP_END$;
      323     7586    2           IF DATA$->KN$IOP.LNK$ < G$BOBCAT$
      324     7587    3           THEN DO;
      325     7588    3                IF DATA$->KN$IOP.L.USER# = G$JIT.USR#
      326     7589    3                THEN CALL DELU_SCREECH;
      327     7590    3                END;
      328     7591    2           ELSE DATA$ = PINCRW(DATA$,SIZEW(KN$IOP));
      329     7592    2           END;
      330     7593
      331     7594    1      DATA$ = KN_LDCT_START$;
      332     7595    2      DO WHILE DATA$ <= KN_LDCT_END$;
      333     7596    2           IF DATA$->KN$LDCT.USER# = G$JIT.USR#
      334     7597    2           THEN CALL DELU_SCREECH;
      335     7598
      336     7599    2           ELSE DATA$ = PINCRW(DATA$,SIZEW(KN$LDCT));
      337     7600    2           END;
      338     7601    1      RETURN;
      339     7602
      340     7603        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:12   
      341     7604
      342     7605    1   GET_CTX: PROC ALTRET;
      343     7606           %LOCK (G=KN_CTX_GATE);
      344     7613
      345     7614    2      CTX$ = KN$DATA.HEAD$;
      346     7615
      347     7616    2      IF CTX$ = ADDR(NIL)
      348     7617    3      THEN DO;
      349     7618    3           IF KN$DATA.USE# ~= KN$DATA.MAX#
      350     7619    3           THEN CALL CTX_SCREECH;
      351     7620
      352     7621                %UNLOCK (G=KN_CTX_GATE);
      353     7628    3           ALTRETURN;
      354     7629    3           END;
      355     7630
      356     7631    3      ELSE DO;
      357     7632    3           KN$DATA.USE# = KN$DATA.USE# +1;
      358     7633    3           IF KN$DATA.USE# > KN$DATA.PEAK#
      359     7634    3           THEN KN$DATA.PEAK# = KN$DATA.USE#;
      360     7635
      361     7636    3           LNK$ = PINCRW(CTX$,KN$DATA.LNK#);
      362     7637    3           KN$DATA.HEAD$ = LNK$->B$PTR;
      363     7638                %UNLOCK (G=KN_CTX_GATE);
      364     7645    3           RETURN;
      365     7646    3           END;
      366     7647    2   END GET_CTX;
      367     7648        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:13   
      368     7649
      369     7650    1   RLS_CTX: PROC;
      370     7651           %LOCK (G=KN_CTX_GATE);
      371     7658
      372     7659    2   RLS_CTX2: ENTRY;
      373     7660    2      IF KN$DATA.CHECK ~= 0
      374     7661    3      THEN DO;
      375     7662    3           CTX_COUNT = 0;
      376     7663    3           CTX$$ = KN$DATA.HEAD$;
      377     7664
      378     7665    4           DO WHILE CTX$$ ~= ADDR(NIL);
      379     7666    4                CTX_COUNT = CTX_COUNT + 1;
      380     7667
      381     7668    4                LNK$ = PINCRW(CTX$$,KN$DATA.LNK#);
      382     7669    4                IF (CTX$$ = CTX$) OR (LNK$->B$PTR = CTX$$)
      383     7670    4                THEN CALL CTX_SCREECH;
      384     7671
      385     7672    4                ELSE IF (CTX$$ > KN$DATA.END$) OR (CTX$$ < KN$DATA.START$)
      386     7673    4                     THEN CALL CTX_SCREECH;
      387     7674
      388     7675    4                     ELSE CTX$$ = LNK$->B$PTR;
      389     7676    4                END;
      390     7677
      391     7678    3           IF CTX_COUNT + KN$DATA.USE# ~= KN$DATA.MAX#
      392     7679    3           THEN CALL CTX_SCREECH;
      393     7680    3           END/*do if check*/;
      394     7681
      395     7682    2      LNK$ = PINCRW(CTX$,KN$DATA.LNK#);
      396     7683    2      LNK$->B$PTR = KN$DATA.HEAD$;
      397     7684    2      KN$DATA.HEAD$ = CTX$;
      398     7685    2      KN$DATA.USE# = KN$DATA.USE# -1;
      399     7686
      400     7687    2      CTX$ = ADDR(NIL);
      401     7688           %UNLOCK (G=KN_CTX_GATE);
      402     7695    2      RETURN;
      403     7696
      404     7697    2   END RLS_CTX;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:14   
      405     7698        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:15   
      406     7699    1   CTX_SCREECH: PROC;
      407     7700    2      CALL SCREECH(SC_BRKN_CHAIN);
      408     7701
      409     7702        /*S* SCREECH_CODE: KNA-S$BRKN_CHAIN
      410     7703             TYPE: SCREECH
      411     7704             MESSAGE: Error in the chain of IOPs, LDCTs, SSN or TCTX Blocks.
      412     7705        */
      413     7706    2   END CTX_SCREECH;
      414     7707
      415     7708        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:16   
      416     7709    1   DELU_SCREECH: PROC;
      417     7710    2      CALL SCREECH(SC_DELU);
      418     7711
      419     7712        /*S* SCREECH_CODE: KNA-S$R2FEW
      420     7713             TYPE: SCREECH
      421     7714             MESSAGE: User has resources allocated at delete user.
      422     7715        */
      423     7716    2   END DELU_SCREECH;
      424     7717    1   END KNA$CONTEXT;
      425     7718        %EOD;

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:17   
--  Include file information  --

   G_JIT_M.:E05TOU  is referenced.
   FR_SCODE_C.:E05TOU  is referenced.
   K_SCODE_C.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
   KNA_MACRO_M.:E05TOU  is referenced.
   KN_DATA_M.:E05TOU  is referenced.
   K_TRANSPORT_E.:E05TOU  is referenced.
   K_ADDRESS_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$CONTEXT.

   Procedure KNA$CONTEXT requires 995 words for executable code.
   Procedure KNA$CONTEXT requires 22 words of local(AUTO) storage.

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:18   

 Object Unit name= KNA$CONTEXT                                File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 00:58:30.12 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS     18     12  KNA$CONTEXT
    1   Proc  even  none   995    3E3  KNA$CONTEXT
    2  RoData even  none    16     10  KNA$CONTEXT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        1  KNA$CONTEXT
     1      7          yes     yes      Std        1  KNA$GETIOP
     1     3C          yes     yes      Std        1  KNA$RLSIOP
     1     64          yes     yes      Std        1  KNA$GETLDCT
     1     A9          yes     yes      Std        1  KNA$RLSLDCT
     1     F5          yes     yes      Std        1  KNA$GETSSN
     1    11D          yes     yes      Std        1  KNA$RLSSSN
     1    13A          yes     yes      Std        1  KNA$GETTCTX
     1    201          yes     yes      Std        1  KNA$RELTCTX
     1    267          yes     yes      Std        0  KNA$CHECK
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:19   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 SCREECH
 yes     yes           Std       1 GHH$UNLOCK
         yes           Std       1 KNT$TTIMER
 yes     yes           Std       1 GHH$LOCK
         yes           Std       1 GHS$CANCEL_TMR
         yes           Std       1 KNT$RLS_CHAIN
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET
                       nStd      0 X6C_ALRZ

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KN_CTX_GATE                      r    G$BOBCAT$                        r    G$JIT$
r    KN_IOP_START$                    r    KN_LDCT_START$                   r    KN_SSN_START$
r    KN_TCTX_START$                   r    KN_IOP_END$                      r    KN_LDCT_END$
r    KN_SSN_END$                      r    KN_DCT$$                         r    KN_TCTX$$
     KNT_WINDOW_EXTENDED                   KNT_RETRAN_TIMER                      KNT_WINDOW_TIMER
     KNT_INACTIVITY_TIMER                  KNT_REFERENCE_TIMER              r    G$ROS$
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:20   


        1        1        /*M* KNA$SUBS - Application Presentation Engine  Assorted routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0  */
        8        8
        9        9        /*P* NAME: KNA$SUBS
       10       10           PURPOSE:  This module contains various utility routines used by the
       11       11                     Application Protocol Engine:
       12       12
       13       13                     KNA$CONTEXT - To get and release IOP, LDCT, TCTX and SSN context
       14       14                     KNA$LOCATE_TCTX - Selectively locate a transport context
       15       15                     KNA$CHECKSUM - Build and OSI header checksums
       16       16                     KNA$MAP - To map user area into the monitor window
       17       17                     KNA$REG_USER - To reg the user
       18       18                     KNA$DECODE_VDO - To decode a read response
       19       19                     KNA$BUILD_VDO
       20       20                     KNA$FCNO and KNA$FCNOU
       21       21                     KNA$CONV_STR - To convert stream name to stream number
       22       22                     KNA$CHECK_VDO
       23       23        */
       24       24
       25       25
       26       26        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:21   
       27       27        /*F* NAME: KNA$CONTEXT
       28       28             PURPOSE:
       29       29                   The KNA$CONTEXT module contains the routines to allocate
       30       30                   and deallocate the LCP-6 I/O Packets, Session Context
       31       31                   Blocks and Logical Device Control Table entries.
       32       32        */
       33       33
       34       34        /*D* NAME: KNA$GET_context_block
       35       35
       36       36             CALL: CALL KNA$GET [ IOP | LDCT | TCTX | SSN ] (ctx$)
       37       37
       38       38             OUTPUT: ctx$ - contains the address on the allocated context block.
       39       39
       40       40             DESCRIPTION:
       41       41                   Current usage and peak counts for each of type of context
       42       42                   blocks are maintained.
       43       43                   If there are no context blocks available the alternate
       44       44                   return is taken.
       45       45        */
       46       46
       47       47        /*D* NAME: KNA$RLS_context_block
       48       48
       49       49             CALL: CALL KNA$RLS [ IOP | LDCT | SSN ] (ctx$)
       50       50
       51       51             INPUT: ctx$ - contains the address of the context block to be released.
       52       52
       53       53             DESCRIPTION:
       54       54                   The context block is added to the chain of free context
       55       55                   blocks.
       56       56                   If the context checker for any specific type is turned
       57       57                   on, the release context routine will run the chain of
       58       58                   free context blocks to check for inconsistancies.
       59       59        */
       60       60
       61       61        KNA$CONTEXT: PROC(CTX$) ALTRET;

     61   1 000000  D380 0000 0000  xent KNA$CONTEXT     LNJ,B5   X6A_AUTO_1
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:22   
          1 000003       0016 0001                       DC       22,1
          1 000005  0F81 0006                            B        s:7390,PREL

       62       62
       63       63        %INCLUDE GH_SCHD_M;
       64      207        %INCLUDE K_ADDRESS_M;
       65      710        %INCLUDE K_TRANSPORT_E;
       66     1035        %INCLUDE KN_DATA_M;
       67     2821        %INCLUDE KNA_MACRO_M;
       68     2897        %INCLUDE GH_LCP6_M;
       69     3731        %INCLUDE GU_LCP6_M;
       70     4659        %INCLUDE GH_GATE_M;
       71     4700        %INCLUDE K_SCODE_C;
       72     4785        %INCLUDE FR_SCODE_C;
       73     4802        %INCLUDE G_JIT_M;
       74     5067
       75     5068                                                /* Input parameters                   */
       76     5069    1   DCL CTX$ PTR;
       77     5070
       78     5071                                                /* Auto Storage                       */
       79     5072    1   DCL DATA$ PTR;                          /*addr of appropriate kn_data_tbl*/
       80     5073    1   DCL LDCTX UBIN;
       81     5074    1   DCL TCTX_ID REDEF LDCTX UBIN;
       82     5075    1   DCL GENERATION UBIN;
       83     5076
       84     5077    1   DCL CTX_COUNT UBIN;
       85     5078    1   DCL CTX$$ PTR;
       86     5079    1   DCL LNK$ PTR;
       87     5080
       88     5081                                                /* Static Data                        */
       89     5082        %VLP_SCODE (FPTN=SC_BRKN_CHAIN,ERR#=%S$BRKN_CHAIN,SEV=G_SEV_SCREECH#,
       90     5083                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       91     5144        %VLP_SCODE (FPTN=SC_IOP,ERR#=%S$IOP,SEV=G_SEV_SCREECH#,
       92     5145                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       93     5206        %VLP_SCODE (FPTN=SC_LDCT,ERR#=%S$LDCT,SEV=G_SEV_SCREECH#,
       94     5207                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       95     5268        %VLP_SCODE (FPTN=SC_SSN,ERR#=%S$SSN,SEV=G_SEV_SCREECH#,
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:23   
       96     5269                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       97     5330        %VLP_SCODE (FPTN=SC_TCTX,ERR#=%S$TCTX,SEV=G_SEV_SCREECH#,
       98     5331                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
       99     5392        %VLP_SCODE (FPTN=SC_DELU,ERR#=%S$R2FEW,SEV=G_SEV_SCREECH#,
      100     5393                    STCLASS=CONSTANT,FCG=KN,MID=A,MON='1'B);
      101     5454        %GATE (FPTN=KN_CTX_GATE,STCLASS=SYMREF);
      102     5473
      103     5474                                                /* External Data                      */
      104     5475    1   DCL G$BOBCAT$ PTR SYMREF READONLY;
      105     5476    1   DCL G$JIT$ PTR SYMREF READONLY;
      106     5477    1   DCL KN_IOP_START$ PTR SYMREF READONLY;
      107     5478    1   DCL KN_LDCT_START$ PTR SYMREF READONLY;
      108     5479    1   DCL KN_SSN_START$ PTR SYMREF READONLY;
      109     5480    1   DCL KN_TCTX_START$ PTR SYMREF READONLY;
      110     5481    1   DCL KN_IOP_END$ PTR SYMREF READONLY;
      111     5482    1   DCL KN_LDCT_END$ PTR SYMREF READONLY;
      112     5483    1   DCL KN_SSN_END$ PTR SYMREF READONLY;
      113     5484    1   DCL KN_DCT$$ PTR SYMREF READONLY;
      114     5485    1   DCL KN_TCTX$$ PTR SYMREF READONLY;
      115     5486    1   DCL KNT_WINDOW_EXTENDED UBIN SYMREF;
      116     5487    1   DCL KNT_RETRAN_TIMER UBIN SYMREF;
      117     5488    1   DCL KNT_WINDOW_TIMER UBIN SYMREF;
      118     5489    1   DCL KNT_INACTIVITY_TIMER UBIN SYMREF;
      119     5490    1   DCL KNT_REFERENCE_TIMER UBIN SYMREF;
      120     5491
      121     5492                                                /* Based Data                         */
      122     5493        %KN_DATA_TBL (FPTN=KN$DATA, TYPE=STRUCTURE, STCLASS="BASED(DATA$)");
      123     5557        %KNA$SSN;
      124     5640        %KN$IOP;
      125     5813        %KN$LDCT;
      126     6058        %K$TCTX;
      127     6965    1   DCL KN$DCT$(0:0) PTR BASED(KN_DCT$$);
      128     6966    1   DCL K$TCTX$(0:0) PTR BASED(KN_TCTX$$);
      129     6967        %G$JIT(STCLASS="BASED(G$JIT$)");
      130     7381    1   DCL B$PTR PTR BASED;
      131     7382
      132     7383
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:24   
      133     7384    1   DCL SCREECH ENTRY(1);
      134     7385    1   DCL KNT$TTIMER ENTRY(1);
      135     7386    1   DCL KNT$RLS_CHAIN ENTRY(1);
      136     7387    1   DCL GHS$CANCEL_TMR ENTRY(1);
      137     7388        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:25   
      138     7389    1   KNA$GETIOP: ENTRY(CTX$) ALTRET;

   7389   1 000007  D380 0000 0000  xent KNA$GETIOP      LNJ,B5   X6A_AUTO_1
          1 00000A       0016 0001                       DC       22,1

      139     7390    1      DATA$ = ADDR(KN_IOP_START$);

   7390   1 00000C  EB80 0000 0000  xsym                 LAB,B6   KN_IOP_START$
          1 00000F  EFC7 0006                            STB,B6   DATA$,AUTO

      140     7391    1      CALL GET_CTX

   7391   1 000011  E3C0 02DD                            LNJ,B6   s:0,PREL
          1 000013       0003                            DC       s:7393,PREL
          1 000014  0F81 000D                            B        s:7401,PREL

      141     7392    2      WHENALTRETURN DO;

      142     7393    2           CALL SCREECH(SC_IOP);

   7393   1 000016  BB80 0000 0000  02                   LAB,B3   0
          1 000019  CBF0 0100                            LAB,B4   256,IMO
          1 00001B  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 00001E       0001                            DC       s:7394,PREL

      143     7394    2           ALTRETURN;

   7394   1 00001F  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      144     7395    2           END;
      145     7396        /*S* SCREECH_CODE: KNA-S$IOP
      146     7397             TYPE: SCREECH
      147     7398             MESSAGE: Out of system IOPs.  NETCON IOP value may be too small.
      148     7399             REMARKS: If increasing the IOP value is ineffective, submit a star.
      149     7400        */
      150     7401    1      CTX$->KN$IOP = '0'B;

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:26   
   7401   1 000022  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 000024  DC86                                 LDB,B5   ,B6
          1 000025  5C36                                 LDV,R5   54
          1 000026  0021                                 ALR      ;
          1 000027       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 000029       4005 0000                                ALPHANUM(0,B5,,R5,FILL)

      151     7402    1      CTX$->KN$IOP.FLAGS.INUSE = '1'B;

   7402   1 00002B  437F                                 CSYNC    s:7401+8,SPREL
          1 00002C  DC86                                 LDB,B5   ,B6
          1 00002D  8945 0003                            LBT,'1000'X       3,B5
          1 00002F       1000

      152     7403    1      CTX$->KN$IOP.L.USER# = G$JIT.USR#;

   7403   1 000030  DC86                                 LDB,B5   ,B6
          1 000031  CC80 0000 0000  xsym                 LDB,B4   G$JIT$
          1 000034  E844 0004                            LDR,R6   4,B4
          1 000036  EAC5 000F                            SRM,R6,'00FF'X    15,B5
          1 000038       00FF

      153     7404    1      RETURN;

   7404   1 000039  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      154     7405
      155     7406    1   KNA$RLSIOP: ENTRY(CTX$) ALTRET;

   7406   1 00003C  D380 0000 0000  xent KNA$RLSIOP      LNJ,B5   X6A_AUTO_1
          1 00003F       0016 0001                       DC       22,1

      156     7407    1      IF CTX$ = ADDR(NIL) THEN CALL CTX_SCREECH;

   7407   1 000041  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 000043  8D86                                 CMN      ,B6
          1 000044  0981 0004                            BNE      s:7409,PREL
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:27   

   7407   1 000046  E3C0 037E                            LNJ,B6   s:0,PREL
          1 000048       0001                            DC       s:7409,PREL

      157     7408
      158     7409    1      IF NOT(CTX$->KN$IOP.FLAGS.INUSE)

   7409   1 000049  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 00004B  DC86                                 LDB,B5   ,B6
          1 00004C  82C5 0003                            LB,'1000'X        3,B5
          1 00004E       1000
          1 00004F  0501 0006                            BBT      s:7412,PREL

      159     7410    1      THEN CALL CTX_SCREECH;

   7410   1 000051  E3C0 0373                            LNJ,B6   s:0,PREL
          1 000053       0001                            DC       s:7410+3,PREL
          1 000054  0F81 0004                            B        s:7414,PREL

      160     7411
      161     7412    1      ELSE CTX$->KN$IOP.FLAGS.INUSE = '0'B;

   7412   1 000056  8845 0003                            LBF,'1000'X       3,B5
   7412   1 000058       1000

      162     7413
      163     7414    1      DATA$ = ADDR(KN_IOP_START$);

   7414   1 000059  EB80 0000 0000  xsym                 LAB,B6   KN_IOP_START$
          1 00005C  EFC7 0006                            STB,B6   DATA$,AUTO

      164     7415    1      CALL RLS_CTX;

   7415   1 00005E  E3C0 02E2                            LNJ,B6   s:0,PREL
          1 000060       0001                            DC       s:7416,PREL

      165     7416    1      RETURN;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:28   

   7416   1 000061  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      166     7417        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:29   
      167     7418    1   KNA$GETLDCT: ENTRY(CTX$) ALTRET;

   7418   1 000064  D380 0000 0000  xent KNA$GETLDCT     LNJ,B5   X6A_AUTO_1
          1 000067       0016 0001                       DC       22,1

      168     7419    1      DATA$ = ADDR(KN_LDCT_START$);

   7419   1 000069  EB80 0000 0000  xsym                 LAB,B6   KN_LDCT_START$
          1 00006C  EFC7 0006                            STB,B6   DATA$,AUTO

      169     7420    1      CALL GET_CTX

   7420   1 00006E  E3C0 0280                            LNJ,B6   s:0,PREL
          1 000070       0003                            DC       s:7422,PREL
          1 000071  0F81 000D                            B        s:7431,PREL

      170     7421    2      WHENALTRETURN DO;

      171     7422    2           CALL SCREECH(SC_LDCT);

   7422   1 000073  BB80 0000 0002  02                   LAB,B3   +2
          1 000076  CBF0 0100                            LAB,B4   256,IMO
          1 000078  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 00007B       0001                            DC       s:7423,PREL

      172     7423    2           ALTRETURN;

   7423   1 00007C  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      173     7424    2           END;
      174     7425        /*S* SCREECH_CODE: KNA-S$LDCT
      175     7426             TYPE: SCREECH
      176     7427             MESSAGE: Out of system LDCTs.  NETCON LDCT value may be too small.
      177     7428             REMARKS: If increasing the LDCT value is ineffective, submit a star.
      178     7429        */
      179     7430
      180     7431    1      LDCTX = CTX$->KN$LDCT.LDCTX;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:30   

   7431   1 00007F  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 000081  DC86                                 LDB,B5   ,B6
          1 000082  E845 0007                            LDR,R6   7,B5
          1 000084  EF47 0008                            STR,R6   LDCTX,AUTO

      181     7432    1      GENERATION = CTX$->KN$LDCT.GENERATION +1;

   7432   1 000086  D2C5 0004                            LLH,R5   4,B5
          1 000088  5E01                                 ADV,R5   1
          1 000089  DF47 0009                            STR,R5   GENERATION,AUTO

      182     7433    1      CTX$->KN$LDCT = '0'B;

   7433   1 00008B  5C20                                 LDV,R5   32
          1 00008C  0021                                 ALR      ;
          1 00008D       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 00008F       4005 0000                                ALPHANUM(0,B5,,R5,FILL)

      183     7434    1      CTX$->KN$LDCT.LDCTX = LDCTX;

   7434   1 000091  437F                                 CSYNC    s:7433+5,SPREL
          1 000092  DC86                                 LDB,B5   ,B6
          1 000093  E847 0008                            LDR,R6   LDCTX,AUTO
          1 000095  EF45 0007                            STR,R6   7,B5

      184     7435    1      CTX$->KN$LDCT.GENERATION = GENERATION;

   7435   1 000097  DC86                                 LDB,B5   ,B6
          1 000098  C847 0009                            LDR,R4   GENERATION,AUTO
          1 00009A  C7C5 0004                            STH,R4   4,B5

      185     7436    1      CTX$->KN$LDCT.CQPTR = -1;

   7436   1 00009C  DC86                                 LDB,B5   ,B6
          1 00009D  8945 000F                            LBT,'FFFF'X       15,B5
          1 00009F       FFFF
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:31   

      186     7437
      187     7438    1      KN$DCT$(LDCTX) = CTX$;

   7438   1 0000A0  DC86                                 LDB,B5   ,B6
          1 0000A1  CC80 0000 0000  xsym                 LDB,B4   KN_DCT$$
          1 0000A4  B856                                 LDR,R3   R6
          1 0000A5  DFB4                                 STB,B5   ,B4,R3

      188     7439
      189     7440    1      RETURN;

   7440   1 0000A6  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      190     7441
      191     7442
      192     7443    1   KNA$RLSLDCT: ENTRY(CTX$) ALTRET;

   7443   1 0000A9  D380 0000 0000  xent KNA$RLSLDCT     LNJ,B5   X6A_AUTO_1
          1 0000AC       0016 0001                       DC       22,1

      193     7444    1      IF CTX$ = ADDR(NIL) THEN CALL CTX_SCREECH;

   7444   1 0000AE  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 0000B0  8D86                                 CMN      ,B6
          1 0000B1  0981 0006                            BNE      s:7447,PREL

   7444   1 0000B3  E3C0 0311                            LNJ,B6   s:0,PREL
          1 0000B5       0001                            DC       s:7444+8,PREL
          1 0000B6  0F81 000E                            B        s:7456,PREL

      194     7445
      195     7446    2      ELSE DO;

      196     7447    2           CTX$->KN$LDCT.USER# = 0;

   7447   1 0000B8  DC86                                 LDB,B5   ,B6
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:32   
          1 0000B9  8745 000E                            CL       14,B5

      197     7448    2           KN$DCT$(CTX$->KN$LDCT.LDCTX) = ADDR(NIL);

   7448   1 0000BB  DC86                                 LDB,B5   ,B6
          1 0000BC  B845 0007                            LDR,R3   7,B5
          1 0000BE  CB80 0000 0000                       LAB,B4   0
          1 0000C1  BC80 0000 0000  xsym                 LDB,B3   KN_DCT$$
          1 0000C4  CFB3                                 STB,B4   ,B3,R3

      198     7449    2           END;

      199     7450
      200     7451           %LOCK (G=KN_CTX_GATE);

   7456   1 0000C5  BB80 0000 0004  02                   LAB,B3   +4
          1 0000C8  CBF0 0100                            LAB,B4   256,IMO
          1 0000CA  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 0000CD       0001                            DC       s:7458,PREL

      201     7458    1      IF CTX$->KN$LDCT.FLAGS.QUEUED

   7458   1 0000CE  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 0000D0  DC86                                 LDB,B5   ,B6
          1 0000D1  89C5 000A                            CMZ      10,B5
          1 0000D3  0881 0016                            BAGE     s:7472,PREL

      202     7459    2      THEN DO;

      203     7460    2           CTX$->KN$LDCT.FLAGS.REL = '1'B;

   7460   1 0000D5  8945 000A                            LBT,'4000'X       10,B5
   7460   1 0000D7       4000

      204     7461    2           CTX$->KN$LDCT.USER_ENTRY$ = ENTADDR(NIL);

   7461   1 0000D8  DC86                                 LDB,B5   ,B6
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:33   
          1 0000D9  CC80 0000 0006  02                   LDB,B4   +6
          1 0000DC  CFC5 000C                            STB,B4   12,B5

      205     7462                %UNLOCK (G=KN_CTX_GATE);

   7467   1 0000DE  BB80 0000 0004  02                   LAB,B3   +4
          1 0000E1  CBF0 0100                            LAB,B4   256,IMO
          1 0000E3  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 0000E6       0001                            DC       s:7469,PREL

      206     7469    2           RETURN;

   7469   1 0000E7  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      207     7470    2           END;
      208     7471
      209     7472    1      DATA$ = ADDR(KN_LDCT_START$);

   7472   1 0000EA  CB80 0000 0000  xsym                 LAB,B4   KN_LDCT_START$
          1 0000ED  CFC7 0006                            STB,B4   DATA$,AUTO

      210     7473    1      CALL RLS_CTX2;

   7473   1 0000EF  E3C0 025E                            LNJ,B6   s:0,PREL
          1 0000F1       0001                            DC       s:7474,PREL

      211     7474    1      RETURN;

   7474   1 0000F2  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      212     7475
      213     7476        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:34   
      214     7477    1   KNA$GETSSN: ENTRY(CTX$) ALTRET;

   7477   1 0000F5  D380 0000 0000  xent KNA$GETSSN      LNJ,B5   X6A_AUTO_1
          1 0000F8       0016 0001                       DC       22,1

      215     7478    1      DATA$ = ADDR(KN_SSN_START$);

   7478   1 0000FA  EB80 0000 0000  xsym                 LAB,B6   KN_SSN_START$
          1 0000FD  EFC7 0006                            STB,B6   DATA$,AUTO

      216     7479    1      CALL GET_CTX

   7479   1 0000FF  E3C0 01EF                            LNJ,B6   s:0,PREL
          1 000101       0003                            DC       s:7481,PREL
          1 000102  0F81 000D                            B        s:7489,PREL

      217     7480    2      WHENALTRETURN DO;

      218     7481    2           CALL SCREECH(SC_SSN);

   7481   1 000104  BB80 0000 0008  02                   LAB,B3   +8
          1 000107  CBF0 0100                            LAB,B4   256,IMO
          1 000109  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 00010C       0001                            DC       s:7482,PREL

      219     7482    2           ALTRETURN;

   7482   1 00010D  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      220     7483    2           END;
      221     7484        /*S* SCREECH_CODE: KNA-S$SSN
      222     7485             TYPE: SCREECH
      223     7486             MESSAGE: Out of system APESSNs.  NETCON APESSN value may be too small.
      224     7487             REMARKS: If increasing the APESSN value is ineffective, submit a star.
      225     7488        */
      226     7489    1      CTX$->KNA$SSN = '0'B;

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:35   
   7489   1 000110  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 000112  DC86                                 LDB,B5   ,B6
          1 000113  5C32                                 LDV,R5   50
          1 000114  0021                                 ALR      ;
          1 000115       4178 0000                                ALPHANUM('0000'X,IMO,,1),;
          1 000117       4005 0000                                ALPHANUM(0,B5,,R5,FILL)

      227     7490    1      RETURN;

   7490   1 000119  437F                                 CSYNC    s:7489+8,SPREL
          1 00011A  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      228     7491
      229     7492
      230     7493    1   KNA$RLSSSN: ENTRY(CTX$) ALTRET;

   7493   1 00011D  D380 0000 0000  xent KNA$RLSSSN      LNJ,B5   X6A_AUTO_1
          1 000120       0016 0001                       DC       22,1

      231     7494    1      IF CTX$ = ADDR(NIL) THEN CALL CTX_SCREECH;

   7494   1 000122  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 000124  8D86                                 CMN      ,B6
          1 000125  0981 0006                            BNE      s:7495,PREL

   7494   1 000127  E3C0 029D                            LNJ,B6   s:0,PREL
          1 000129       0001                            DC       s:7494+8,PREL
          1 00012A  0F81 0004                            B        s:7497,PREL

      232     7495    1      ELSE CTX$->KNA$SSN.STATE = 0;

   7495   1 00012C  DC86                                 LDB,B5   ,B6
          1 00012D  8745 0013                            CL       19,B5

      233     7496
      234     7497    1      DATA$ =ADDR(KN_SSN_START$);

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:36   
   7497   1 00012F  EB80 0000 0000  xsym                 LAB,B6   KN_SSN_START$
          1 000132  EFC7 0006                            STB,B6   DATA$,AUTO

      235     7498    1      CALL RLS_CTX;

   7498   1 000134  E3C0 020C                            LNJ,B6   s:0,PREL
          1 000136       0001                            DC       s:7499,PREL

      236     7499    1      RETURN;

   7499   1 000137  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      237     7500
      238     7501        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:37   
      239     7502    1   KNA$GETTCTX: ENTRY(CTX$) ALTRET;

   7502   1 00013A  D380 0000 0000  xent KNA$GETTCTX     LNJ,B5   X6A_AUTO_1
          1 00013D       0016 0001                       DC       22,1

      240     7503    1      DATA$ = ADDR(KN_TCTX_START$);

   7503   1 00013F  EB80 0000 0000  xsym                 LAB,B6   KN_TCTX_START$
          1 000142  EFC7 0006                            STB,B6   DATA$,AUTO

      241     7504    1      CALL GET_CTX

   7504   1 000144  E3C0 01AA                            LNJ,B6   s:0,PREL
          1 000146       0003                            DC       s:7506,PREL
          1 000147  0F81 000A                            B        s:7513,PREL

      242     7505    2      WHENALTRETURN DO;

      243     7506    2           CALL SCREECH(SC_TCTX);

   7506   1 000149  BB80 0000 000A  02                   LAB,B3   +10
          1 00014C  CBF0 0100                            LAB,B4   256,IMO
          1 00014E  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 000151       0001                            DC       s:7513,PREL

      244     7507    2           END;

      245     7508        /*S* SCREECH_CODE: KNA-S$TCTX
      246     7509             TYPE: SCREECH
      247     7510             MESSAGE: Out of Transport Context.
      248     7511        */
      249     7512
      250     7513    1      TCTX_ID = CTX$->K$TCTX.SRC_REF;

   7513   1 000152  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 000154  DC86                                 LDB,B5   ,B6
          1 000155  E845 0002                            LDR,R6   2,B5
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:38   
          1 000157  EF47 0008                            STR,R6   LDCTX,AUTO

      251     7514    1      CTX$->K$TCTX = '0'B;

   7514   1 000159  DFC7 0014                            STB,B5   LNK$+7,AUTO
          1 00015B  AB80 0000 0000  02                   LAB,B2   0
          1 00015E  2C0C                                 LDV,R2   12
          1 00015F  6C01                                 LDV,R6   1
          1 000160  BB85                                 LAB,B3   ,B5
          1 000161  3C00                                 LDV,R3   0
          1 000162  F870 0160                            LDR,R7   352,IMO
          1 000164  D380 0000 0000  xent                 LNJ,B5   X6C_ALRZ

      252     7515    1      CTX$->K$TCTX.SRC_REF = TCTX_ID;

   7515   1 000167  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 000169  DC86                                 LDB,B5   ,B6
          1 00016A  E847 0008                            LDR,R6   LDCTX,AUTO
          1 00016C  EF45 0002                            STR,R6   2,B5

      253     7516    1      CTX$->K$TCTX.STATE = %K_TSTATE_CLOSED;

   7516   1 00016E  DC86                                 LDB,B5   ,B6
          1 00016F  5C02                                 LDV,R5   2
          1 000170  D785                                 STH,R5   ,B5

      254     7517    1      CTX$->K$TCTX.RCV_WINDOW_SZ = KNT_WINDOW_EXTENDED;

   7517   1 000171  DC86                                 LDB,B5   ,B6
          1 000172  C800 0000 0000  xsym                 LDR,R4   KNT_WINDOW_EXTENDED
          1 000175  CAC5 0005                            SRM,R4,'00FF'X    5,B5
          1 000177       00FF

      255     7518    1      CTX$->K$TCTX.RECV_UWE = CTX$->K$TCTX.RCV_WINDOW_SZ;

   7518   1 000178  DC86                                 LDB,B5   ,B6
          1 000179  F845 0005                            LDR,R7   5,B5
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:39   
          1 00017B  F570 00FF                            AND,R7   255,IMO
          1 00017D  6C00                                 LDV,R6   0
          1 00017E  8D45 0024                            SDI      36,B5

      256     7519    1      CTX$->K$TCTX.SEND_RETRY_COUNT = 1;

   7519   1 000180  DC86                                 LDB,B5   ,B6
          1 000181  6C01                                 LDV,R6   1
          1 000182  E7C5 004D                            STH,R6   77,B5

      257     7520    1      CTX$->K$TCTX.TPDUSZ = 128;

   7520   1 000184  DC86                                 LDB,B5   ,B6
          1 000185  B870 0080                            LDR,R3   128,IMO
          1 000187  BF45 0009                            STR,R3   9,B5

      258     7521    1      CTX$->K$TCTX.TPDUSZ_PARM = %K_TPDUSIZE_128;

   7521   1 000189  DC86                                 LDB,B5   ,B6
          1 00018A  2C07                                 LDV,R2   7
          1 00018B  AAC5 0008                            SRM,R2,'00FF'X    8,B5
          1 00018D       00FF

      259     7522    1      CTX$->K$TCTX.MAXSEQ = 2147483647/*.7FFF FFFF*/;

   7522   1 00018E  DC86                                 LDB,B5   ,B6
          1 00018F  8CF0 7FFF FFFF                       LDI      2147483647,IMO
          1 000192  8D45 000A                            SDI      10,B5

      260     7523    1      CTX$->K$TCTX.SSN_CRDT = 1;

   7523   1 000194  DC86                                 LDB,B5   ,B6
          1 000195  1C01                                 LDV,R1   1
          1 000196  9F45 004A                            STR,R1   74,B5

      261     7524
      262     7525    1      CTX$->K$TCTX.TMR_RETRAN.INTERVAL = (KNT_RETRAN_TIMER *15) /2;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:40   

   7525   1 000198  DC86                                 LDB,B5   ,B6
          1 000199  E800 0000 0000  xsym                 LDR,R6   KNT_RETRAN_TIMER
          1 00019C  6F0F                                 MLV,R6   15
          1 00019D  6041                                 SOR,R6   1
          1 00019E  EF45 0053                            STR,R6   83,B5

      263     7526    1      CTX$->K$TCTX.TMR_WINDOW.INTERVAL = (KNT_WINDOW_TIMER *15) /2;

   7526   1 0001A0  DC86                                 LDB,B5   ,B6
          1 0001A1  E800 0000 0000  xsym                 LDR,R6   KNT_WINDOW_TIMER
          1 0001A4  6F0F                                 MLV,R6   15
          1 0001A5  6041                                 SOR,R6   1
          1 0001A6  EF45 005D                            STR,R6   93,B5

      264     7527    1      CTX$->K$TCTX.TMR_INACTIVITY.INTERVAL = (KNT_INACTIVITY_TIMER *15) /2;

   7527   1 0001A8  DC86                                 LDB,B5   ,B6
          1 0001A9  E800 0000 0000  xsym                 LDR,R6   KNT_INACTIVITY_TIMER
          1 0001AC  6F0F                                 MLV,R6   15
          1 0001AD  6041                                 SOR,R6   1
          1 0001AE  EF45 0067                            STR,R6   103,B5

      265     7528    1      CTX$->K$TCTX.TMR_REFERENCE.INTERVAL = (KNT_REFERENCE_TIMER *15) /2;

   7528   1 0001B0  DC86                                 LDB,B5   ,B6
          1 0001B1  E800 0000 0000  xsym                 LDR,R6   KNT_REFERENCE_TIMER
          1 0001B4  6F0F                                 MLV,R6   15
          1 0001B5  6041                                 SOR,R6   1
          1 0001B6  EF45 0071                            STR,R6   113,B5

      266     7529
      267     7530    1      CTX$->K$TCTX.TMR_RETRAN.CLOCK_ID.TCTX = CTX$->K$TCTX.SRC_REF;

   7530   1 0001B8  DC86                                 LDB,B5   ,B6
          1 0001B9  E845 0002                            LDR,R6   2,B5
          1 0001BB  E7C5 0052                            STH,R6   82,B5
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:41   

      268     7531    1      CTX$->K$TCTX.TMR_WINDOW.CLOCK_ID.TCTX = CTX$->K$TCTX.SRC_REF;

   7531   1 0001BD  DC86                                 LDB,B5   ,B6
          1 0001BE  E845 0002                            LDR,R6   2,B5
          1 0001C0  E7C5 005C                            STH,R6   92,B5

      269     7532    1      CTX$->K$TCTX.TMR_INACTIVITY.CLOCK_ID.TCTX = CTX$->K$TCTX.SRC_REF;

   7532   1 0001C2  DC86                                 LDB,B5   ,B6
          1 0001C3  E845 0002                            LDR,R6   2,B5
          1 0001C5  E7C5 0066                            STH,R6   102,B5

      270     7533    1      CTX$->K$TCTX.TMR_REFERENCE.CLOCK_ID.TCTX = CTX$->K$TCTX.SRC_REF;

   7533   1 0001C7  DC86                                 LDB,B5   ,B6
          1 0001C8  E845 0002                            LDR,R6   2,B5
          1 0001CA  E7C5 0070                            STH,R6   112,B5

      271     7534
      272     7535    1      CTX$->K$TCTX.TMR_RETRAN.CLOCK_ID.TMR = %K_TTIMER_RETRAN;

   7535   1 0001CC  DC86                                 LDB,B5   ,B6
          1 0001CD  8845 0052                            LBF,'00FF'X       82,B5
          1 0001CF       00FF

      273     7536    1      CTX$->K$TCTX.TMR_WINDOW.CLOCK_ID.TMR = %K_TTIMER_WINDOW;

   7536   1 0001D0  DC86                                 LDB,B5   ,B6
          1 0001D1  6C01                                 LDV,R6   1
          1 0001D2  EAC5 005C                            SRM,R6,'00FF'X    92,B5
          1 0001D4       00FF

      274     7537    1      CTX$->K$TCTX.TMR_INACTIVITY.CLOCK_ID.TMR = %K_TTIMER_INACTIVITY;

   7537   1 0001D5  DC86                                 LDB,B5   ,B6
          1 0001D6  6C02                                 LDV,R6   2
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:42   
          1 0001D7  EAC5 0066                            SRM,R6,'00FF'X    102,B5
          1 0001D9       00FF

      275     7538    1      CTX$->K$TCTX.TMR_REFERENCE.CLOCK_ID.TMR = %K_TTIMER_REFERENCE;

   7538   1 0001DA  DC86                                 LDB,B5   ,B6
          1 0001DB  6C03                                 LDV,R6   3
          1 0001DC  EAC5 0070                            SRM,R6,'00FF'X    112,B5
          1 0001DE       00FF

      276     7539
      277     7540
      278     7541    1      CTX$->K$TCTX.TMR_RETRAN.PROC$ = ENTADDR(KNT$TTIMER);

   7541   1 0001DF  DC86                                 LDB,B5   ,B6
          1 0001E0  CB80 0000 0000  xent                 LAB,B4   KNT$TTIMER
          1 0001E3  CFC5 0050                            STB,B4   80,B5

      279     7542    1      CTX$->K$TCTX.TMR_WINDOW.PROC$ = ENTADDR(KNT$TTIMER);

   7542   1 0001E5  DC86                                 LDB,B5   ,B6
          1 0001E6  CB80 0000 0000  xent                 LAB,B4   KNT$TTIMER
          1 0001E9  CFC5 005A                            STB,B4   90,B5

      280     7543    1      CTX$->K$TCTX.TMR_INACTIVITY.PROC$ = ENTADDR(KNT$TTIMER);

   7543   1 0001EB  DC86                                 LDB,B5   ,B6
          1 0001EC  CB80 0000 0000  xent                 LAB,B4   KNT$TTIMER
          1 0001EF  CFC5 0064                            STB,B4   100,B5

      281     7544    1      CTX$->K$TCTX.TMR_REFERENCE.PROC$ = ENTADDR(KNT$TTIMER);

   7544   1 0001F1  DC86                                 LDB,B5   ,B6
          1 0001F2  CB80 0000 0000  xent                 LAB,B4   KNT$TTIMER
          1 0001F5  CFC5 006E                            STB,B4   110,B5

      282     7545
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:43   
      283     7546    1      K$TCTX$(TCTX_ID) = CTX$;

   7546   1 0001F7  DC86                                 LDB,B5   ,B6
          1 0001F8  CC80 0000 0000  xsym                 LDB,B4   KN_TCTX$$
          1 0001FB  B847 0008                            LDR,R3   LDCTX,AUTO
          1 0001FD  DFB4                                 STB,B5   ,B4,R3

      284     7547
      285     7548    1      RETURN;

   7548   1 0001FE  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      286     7549
      287     7550
      288     7551    1   KNA$RELTCTX: ENTRY(CTX$) ALTRET;

   7551   1 000201  D380 0000 0000  xent KNA$RELTCTX     LNJ,B5   X6A_AUTO_1
          1 000204       0016 0001                       DC       22,1

      289     7552    1      IF CTX$ = ADDR(NIL) THEN CALL CTX_SCREECH;

   7552   1 000206  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 000208  8D86                                 CMN      ,B6
          1 000209  0981 0006                            BNE      s:7554,PREL

   7552   1 00020B  E3C0 01B9                            LNJ,B6   s:0,PREL
          1 00020D       0001                            DC       s:7552+8,PREL
          1 00020E  0F81 000E                            B        s:7555,PREL

      290     7553
      291     7554    1      ELSE CALL GHS$CANCEL_TMR (CTX$->K$TCTX.TMR_RETRAN);

   7554   1 000210  DC86                                 LDB,B5   ,B6
          1 000211  CBC5 0050                            LAB,B4   80,B5
          1 000213  CFC7 0014                            STB,B4   LNK$+7,AUTO
          1 000215  BBC7 0014                            LAB,B3   LNK$+7,AUTO
          1 000217  CBF0 0100                            LAB,B4   256,IMO
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:44   
          1 000219  E380 0000 0000  xent                 LNJ,B6   GHS$CANCEL_TMR
          1 00021C       0001                            DC       s:7555,PREL

      292     7555    1      CALL GHS$CANCEL_TMR (CTX$->K$TCTX.TMR_WINDOW);

   7555   1 00021D  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 00021F  DC86                                 LDB,B5   ,B6
          1 000220  CBC5 005A                            LAB,B4   90,B5
          1 000222  CFC7 0014                            STB,B4   LNK$+7,AUTO
          1 000224  BBC7 0014                            LAB,B3   LNK$+7,AUTO
          1 000226  CBF0 0100                            LAB,B4   256,IMO
          1 000228  E380 0000 0000  xent                 LNJ,B6   GHS$CANCEL_TMR
          1 00022B       0001                            DC       s:7556,PREL

      293     7556    1      CALL GHS$CANCEL_TMR (CTX$->K$TCTX.TMR_INACTIVITY);

   7556   1 00022C  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 00022E  DC86                                 LDB,B5   ,B6
          1 00022F  CBC5 0064                            LAB,B4   100,B5
          1 000231  CFC7 0014                            STB,B4   LNK$+7,AUTO
          1 000233  BBC7 0014                            LAB,B3   LNK$+7,AUTO
          1 000235  CBF0 0100                            LAB,B4   256,IMO
          1 000237  E380 0000 0000  xent                 LNJ,B6   GHS$CANCEL_TMR
          1 00023A       0001                            DC       s:7557,PREL

      294     7557    1      CALL GHS$CANCEL_TMR (CTX$->K$TCTX.TMR_REFERENCE);

   7557   1 00023B  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 00023D  DC86                                 LDB,B5   ,B6
          1 00023E  CBC5 006E                            LAB,B4   110,B5
          1 000240  CFC7 0014                            STB,B4   LNK$+7,AUTO
          1 000242  BBC7 0014                            LAB,B3   LNK$+7,AUTO
          1 000244  CBF0 0100                            LAB,B4   256,IMO
          1 000246  E380 0000 0000  xent                 LNJ,B6   GHS$CANCEL_TMR
          1 000249       0001                            DC       s:7559,PREL

      295     7558
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:45   
      296     7559    1      CALL KNT$RLS_CHAIN(CTX$->K$TCTX);

   7559   1 00024A  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 00024C  DC86                                 LDB,B5   ,B6
          1 00024D  DFC7 0014                            STB,B5   LNK$+7,AUTO
          1 00024F  BBC7 0014                            LAB,B3   LNK$+7,AUTO
          1 000251  CBF0 0100                            LAB,B4   256,IMO
          1 000253  E380 0000 0000  xent                 LNJ,B6   KNT$RLS_CHAIN
          1 000256       0001                            DC       s:7561,PREL

      297     7560
      298     7561    1      CTX$->K$TCTX.STATE = %K_TSTATE_CLOSED;

   7561   1 000257  ECC7 0004                            LDB,B6   @CTX$,AUTO
          1 000259  DC86                                 LDB,B5   ,B6
          1 00025A  6C02                                 LDV,R6   2
          1 00025B  E785                                 STH,R6   ,B5

      299     7562
      300     7563    1      DATA$ = ADDR(KN_TCTX_START$);

   7563   1 00025C  DB80 0000 0000  xsym                 LAB,B5   KN_TCTX_START$
          1 00025F  DFC7 0006                            STB,B5   DATA$,AUTO

      301     7564    1      CALL RLS_CTX;

   7564   1 000261  E3C0 00DF                            LNJ,B6   s:0,PREL
          1 000263       0001                            DC       s:7565,PREL

      302     7565    1      RETURN;

   7565   1 000264  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      303     7566
      304     7567        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:46   
      305     7568        /*D* NAME: KNA$CHECK
      306     7569
      307     7570             PURPOSE: To check for resources that may be still allocated
      308     7571                      to the user at delete user time.
      309     7572        */
      310     7573
      311     7574    1   KNA$CHECK: ENTRY ALTRET;

   7574   1 000267  D380 0000 0000  xent KNA$CHECK       LNJ,B5   X6A_AUTO_1
          1 00026A       0016 0001                       DC       22,1

      312     7575
      313     7576    1      DATA$ = KN_SSN_START$;

   7576   1 00026C  EC80 0000 0000  xsym                 LDB,B6   KN_SSN_START$
          1 00026F  EFC7 0006                            STB,B6   DATA$,AUTO

      314     7577    2      DO WHILE DATA$ <= KN_SSN_END$;

   7577   1 000271  ED80 0000 0000  xsym                 CMB,B6   KN_SSN_END$
          1 000274  0301 0021                            BG       s:7584,PREL

      315     7578    2           IF DATA$->KNA$SSN.STATE ~= 0 AND DATA$->KNA$SSN.USER# = G$JIT.USR#

   7578   1 000276  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 000278  E846 0013                            LDR,R6   19,B6
          1 00027A  6901 0011                            BEZ,R6   s:7581,PREL
          1 00027C  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 00027F  D845 0004                            LDR,R5   4,B5
          1 000281  D570 00FF                            AND,R5   255,IMO
          1 000283  D946 0011                            CMR,R5   17,B6
          1 000285  0981 0006                            BNE      s:7581,PREL

      316     7579    2           THEN CALL DELU_SCREECH;

   7579   1 000287  E3C0 014C                            LNJ,B6   s:0,PREL
          1 000289       0001                            DC       s:7579+3,PREL
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:47   
          1 00028A  0F81 0005                            B        s:7582,PREL

      317     7580
      318     7581    2           ELSE DATA$ = PINCRW(DATA$,SIZEW(KNA$SSN));

   7581   1 00028C  DBC6 0019                            LAB,B5   25,B6
          1 00028E  DFC7 0006                            STB,B5   DATA$,AUTO

      319     7582    2           END;

   7582   1 000290  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 000292  ED80 0000 0000  xsym                 CMB,B6   KN_SSN_END$
          1 000295  03E1                                 BLE      s:7578,SPREL

      320     7583
      321     7584    1      DATA$ = KN_IOP_START$;

   7584   1 000296  DC80 0000 0000  xsym                 LDB,B5   KN_IOP_START$
          1 000299  DFC7 0006                            STB,B5   DATA$,AUTO

      322     7585    2      DO WHILE DATA$ <= KN_IOP_END$;

   7585   1 00029B  DD80 0000 0000  xsym                 CMB,B5   KN_IOP_END$
          1 00029E  0301 0027                            BG       s:7594,PREL

      323     7586    2           IF DATA$->KN$IOP.LNK$ < G$BOBCAT$

   7586   1 0002A0  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 0002A2  DCC6 000E                            LDB,B5   14,B6
          1 0002A4  DD80 0000 0000  xsym                 CMB,B5   G$BOBCAT$
          1 0002A7  0281 0014                            BGE      s:7591,PREL

      324     7587    3           THEN DO;

      325     7588    3                IF DATA$->KN$IOP.L.USER# = G$JIT.USR#

   7588   1 0002A9  E846 000F                            LDR,R6   15,B6
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:48   
          1 0002AB  E570 00FF                            AND,R6   255,IMO
          1 0002AD  CC80 0000 0000  xsym                 LDB,B4   G$JIT$
          1 0002B0  D844 0004                            LDR,R5   4,B4
          1 0002B2  D570 00FF                            AND,R5   255,IMO
          1 0002B4  E955                                 CMR,R6   R5
          1 0002B5  0981 000A                            BNE      s:7592,PREL

      326     7589    3                THEN CALL DELU_SCREECH;

   7589   1 0002B7  E3C0 011C                            LNJ,B6   s:0,PREL
          1 0002B9       0001                            DC       s:7590,PREL

      327     7590    3                END;

   7590   1 0002BA  0F81 0005                            B        s:7592,PREL

      328     7591    2           ELSE DATA$ = PINCRW(DATA$,SIZEW(KN$IOP));

   7591   1 0002BC  CBC6 001B                            LAB,B4   27,B6
          1 0002BE  CFC7 0006                            STB,B4   DATA$,AUTO

      329     7592    2           END;

   7592   1 0002C0  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 0002C2  ED80 0000 0000  xsym                 CMB,B6   KN_IOP_END$
          1 0002C5  03DB                                 BLE      s:7586,SPREL

      330     7593
      331     7594    1      DATA$ = KN_LDCT_START$;

   7594   1 0002C6  EC80 0000 0000  xsym                 LDB,B6   KN_LDCT_START$
          1 0002C9  EFC7 0006                            STB,B6   DATA$,AUTO

      332     7595    2      DO WHILE DATA$ <= KN_LDCT_END$;

   7595   1 0002CB  ED80 0000 0000  xsym                 CMB,B6   KN_LDCT_END$
          1 0002CE  0301 001D                            BG       s:7601,PREL
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:49   

      333     7596    2           IF DATA$->KN$LDCT.USER# = G$JIT.USR#

   7596   1 0002D0  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 0002D2  DC80 0000 0000  xsym                 LDB,B5   G$JIT$
          1 0002D5  E845 0004                            LDR,R6   4,B5
          1 0002D7  E570 00FF                            AND,R6   255,IMO
          1 0002D9  E946 000E                            CMR,R6   14,B6
          1 0002DB  0981 0006                            BNE      s:7599,PREL

      334     7597    2           THEN CALL DELU_SCREECH;

   7597   1 0002DD  E3C0 00F6                            LNJ,B6   s:0,PREL
          1 0002DF       0001                            DC       s:7597+3,PREL
          1 0002E0  0F81 0005                            B        s:7600,PREL

      335     7598
      336     7599    2           ELSE DATA$ = PINCRW(DATA$,SIZEW(KN$LDCT));

   7599   1 0002E2  CBC6 0010                            LAB,B4   16,B6
          1 0002E4  CFC7 0006                            STB,B4   DATA$,AUTO

      337     7600    2           END;

   7600   1 0002E6  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 0002E8  ED80 0000 0000  xsym                 CMB,B6   KN_LDCT_END$
          1 0002EB  03E5                                 BLE      s:7596,SPREL

      338     7601    1      RETURN;

   7601   1 0002EC  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      339     7602
      340     7603        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:50   
      341     7604
      342     7605    1   GET_CTX: PROC ALTRET;

   7605   1 0002EF  EFC7 0010            GET_CTX         STB,B6   LNK$+3,AUTO

      343     7606           %LOCK (G=KN_CTX_GATE);

   7611   1 0002F1  BB80 0000 0004  02                   LAB,B3   +4
          1 0002F4  CBF0 0100                            LAB,B4   256,IMO
          1 0002F6  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 0002F9       0001                            DC       s:7614,PREL

      344     7613
      345     7614    2      CTX$ = KN$DATA.HEAD$;

   7614   1 0002FA  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 0002FC  DCC6 0004                            LDB,B5   4,B6
          1 0002FE  CCC7 0004                            LDB,B4   @CTX$,AUTO
          1 000300  DF84                                 STB,B5   ,B4

      346     7615
      347     7616    2      IF CTX$ = ADDR(NIL)

   7616   1 000301  8D84                                 CMN      ,B4
          1 000302  0981 0017                            BNE      s:7632,PREL

      348     7617    3      THEN DO;

      349     7618    3           IF KN$DATA.USE# ~= KN$DATA.MAX#

   7618   1 000304  E846 0007                            LDR,R6   7,B6
          1 000306  E946 0006                            CMR,R6   6,B6
          1 000308  0901 0004                            BE       s:7626,PREL

      350     7619    3           THEN CALL CTX_SCREECH;

   7619   1 00030A  E3C0 00BA                            LNJ,B6   s:0,PREL
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:51   
          1 00030C       0001                            DC       s:7626,PREL

      351     7620
      352     7621                %UNLOCK (G=KN_CTX_GATE);

   7626   1 00030D  BB80 0000 0004  02                   LAB,B3   +4
          1 000310  CBF0 0100                            LAB,B4   256,IMO
          1 000312  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 000315       0001                            DC       s:7628,PREL

      353     7628    3           ALTRETURN;

   7628   1 000316  ECC7 0010                            LDB,B6   LNK$+3,AUTO
          1 000318  B806                                 LDR,R3   ,B6
          1 000319  C3B6                                 LNJ,B4   ,B6,R3

      354     7629    3           END;
      355     7630
      356     7631    3      ELSE DO;

      357     7632    3           KN$DATA.USE# = KN$DATA.USE# +1;

   7632   1 00031A  8AC6 0007                            INC      7,B6

      358     7633    3           IF KN$DATA.USE# > KN$DATA.PEAK#

   7633   1 00031C  E846 0007                            LDR,R6   7,B6
          1 00031E  E946 0008                            CMR,R6   8,B6
          1 000320  0381 0003                            BLE      s:7636,PREL

      359     7634    3           THEN KN$DATA.PEAK# = KN$DATA.USE#;

   7634   1 000322  EF46 0008                            STR,R6   8,B6

      360     7635
      361     7636    3           LNK$ = PINCRW(CTX$,KN$DATA.LNK#);

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:52   
   7636   1 000324  B846 000A                            LDR,R3   10,B6
          1 000326  DC84                                 LDB,B5   ,B4
          1 000327  DFC7 0014                            STB,B5   LNK$+7,AUTO
          1 000329  F853                                 LDR,R7   R3
          1 00032A  6C00                                 LDV,R6   0
          1 00032B  8447 0014                            AID      LNK$+7,AUTO
          1 00032D  8D47 000D                            SDI      LNK$,AUTO

      362     7637    3           KN$DATA.HEAD$ = LNK$->B$PTR;

   7637   1 00032F  BCC7 000D                            LDB,B3   LNK$,AUTO
          1 000331  AC83                                 LDB,B2   ,B3
          1 000332  AFC6 0004                            STB,B2   4,B6

      363     7638                %UNLOCK (G=KN_CTX_GATE);

   7643   1 000334  BB80 0000 0004  02                   LAB,B3   +4
          1 000337  CBF0 0100                            LAB,B4   256,IMO
          1 000339  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 00033C       0001                            DC       s:7645,PREL

      364     7645    3           RETURN;

   7645   1 00033D  ECC7 0010                            LDB,B6   LNK$+3,AUTO
          1 00033F  C3C6 0001                            LNJ,B4   1,B6

      365     7646    3           END;
      366     7647    2   END GET_CTX;
      367     7648        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:53   
      368     7649
      369     7650    1   RLS_CTX: PROC;

   7650   1 000341  EFC7 0010            RLS_CTX         STB,B6   LNK$+3,AUTO

      370     7651           %LOCK (G=KN_CTX_GATE);

   7656   1 000343  BB80 0000 0004  02                   LAB,B3   +4
          1 000346  CBF0 0100                            LAB,B4   256,IMO
          1 000348  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          1 00034B       0001                            DC       s:7656+9,PREL
          1 00034C  0F81 0003                            B        s:7660,PREL

      371     7658
      372     7659    2   RLS_CTX2: ENTRY;

   7659   1 00034E  EFC7 0010            RLS_CTX2        STB,B6   LNK$+3,AUTO

      373     7660    2      IF KN$DATA.CHECK ~= 0

   7660   1 000350  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 000352  E846 0009                            LDR,R6   9,B6
          1 000354  6901 0046                            BEZ,R6   s:7682,PREL

      374     7661    3      THEN DO;

      375     7662    3           CTX_COUNT = 0;

   7662   1 000356  8747 000A                            CL       CTX_COUNT,AUTO

      376     7663    3           CTX$$ = KN$DATA.HEAD$;

   7663   1 000358  DCC6 0004                            LDB,B5   4,B6
          1 00035A  DFC7 000B                            STB,B5   CTX$$,AUTO

      377     7664
      378     7665    4           DO WHILE CTX$$ ~= ADDR(NIL);
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:54   

   7665   1 00035C  0F81 002E                            B        s:7676,PREL

      379     7666    4                CTX_COUNT = CTX_COUNT + 1;

   7666   1 00035E  8AC7 000A                            INC      CTX_COUNT,AUTO

      380     7667
      381     7668    4                LNK$ = PINCRW(CTX$$,KN$DATA.LNK#);

   7668   1 000360  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 000362  B846 000A                            LDR,R3   10,B6
          1 000364  F853                                 LDR,R7   R3
          1 000365  6C00                                 LDV,R6   0
          1 000366  8447 000B                            AID      CTX$$,AUTO
          1 000368  8D47 000D                            SDI      LNK$,AUTO

      382     7669    4                IF (CTX$$ = CTX$) OR (LNK$->B$PTR = CTX$$)

   7669   1 00036A  DCC7 000B                            LDB,B5   CTX$$,AUTO
          1 00036C  CCC7 0004                            LDB,B4   @CTX$,AUTO
          1 00036E  DD84                                 CMB,B5   ,B4
          1 00036F  0901 0008                            BE       s:7670,PREL
          1 000371  BCC7 000D                            LDB,B3   LNK$,AUTO
          1 000373  AC83                                 LDB,B2   ,B3
          1 000374  ADC7 000B                            CMB,B2   CTX$$,AUTO
          1 000376  0981 0006                            BNE      s:7672,PREL

      383     7670    4                THEN CALL CTX_SCREECH;

   7670   1 000378  E3C0 004C                            LNJ,B6   s:0,PREL
          1 00037A       0001                            DC       s:7670+3,PREL
          1 00037B  0F81 000F                            B        s:7676,PREL

      384     7671
      385     7672    4                ELSE IF (CTX$$ > KN$DATA.END$) OR (CTX$$ < KN$DATA.START$)

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:55   
   7672   1 00037D  DDC6 0002                            CMB,B5   2,B6
          1 00037F  0301 0004                            BG       s:7673,PREL
          1 000381  DD86                                 CMB,B5   ,B6
          1 000382  0281 0006                            BGE      s:7675,PREL

      386     7673    4                     THEN CALL CTX_SCREECH;

   7673   1 000384  E3C0 0040                            LNJ,B6   s:0,PREL
          1 000386       0001                            DC       s:7673+3,PREL
          1 000387  0F81 0003                            B        s:7676,PREL

      387     7674
      388     7675    4                     ELSE CTX$$ = LNK$->B$PTR;

   7675   1 000389  AFC7 000B                            STB,B2   CTX$$,AUTO

      389     7676    4                END;

   7676   1 00038B  8DC7 000B                            CMN      CTX$$,AUTO
          1 00038D  09D1                                 BNE      s:7666,SPREL

      390     7677
      391     7678    3           IF CTX_COUNT + KN$DATA.USE# ~= KN$DATA.MAX#

   7678   1 00038E  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 000390  E847 000A                            LDR,R6   CTX_COUNT,AUTO
          1 000392  EA46 0007                            ADD,R6   7,B6
          1 000394  E946 0006                            CMR,R6   6,B6
          1 000396  0901 0004                            BE       s:7682,PREL

      392     7679    3           THEN CALL CTX_SCREECH;

   7679   1 000398  E3C0 002C                            LNJ,B6   s:0,PREL
          1 00039A       0001                            DC       s:7682,PREL

      393     7680    3           END/*do if check*/;

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:56   
      394     7681
      395     7682    2      LNK$ = PINCRW(CTX$,KN$DATA.LNK#);

   7682   1 00039B  ECC7 0006                            LDB,B6   DATA$,AUTO
          1 00039D  B846 000A                            LDR,R3   10,B6
          1 00039F  DCC7 0004                            LDB,B5   @CTX$,AUTO
          1 0003A1  CC85                                 LDB,B4   ,B5
          1 0003A2  CFC7 0014                            STB,B4   LNK$+7,AUTO
          1 0003A4  F853                                 LDR,R7   R3
          1 0003A5  6C00                                 LDV,R6   0
          1 0003A6  8447 0014                            AID      LNK$+7,AUTO
          1 0003A8  8D47 000D                            SDI      LNK$,AUTO

      396     7683    2      LNK$->B$PTR = KN$DATA.HEAD$;

   7683   1 0003AA  BCC6 0004                            LDB,B3   4,B6
          1 0003AC  ACC7 000D                            LDB,B2   LNK$,AUTO
          1 0003AE  BF82                                 STB,B3   ,B2

      397     7684    2      KN$DATA.HEAD$ = CTX$;

   7684   1 0003AF  CC85                                 LDB,B4   ,B5
          1 0003B0  CFC6 0004                            STB,B4   4,B6

      398     7685    2      KN$DATA.USE# = KN$DATA.USE# -1;

   7685   1 0003B2  88C6 0007                            DEC      7,B6

      399     7686
      400     7687    2      CTX$ = ADDR(NIL);

   7687   1 0003B4  BB80 0000 0000                       LAB,B3   0
          1 0003B7  BF85                                 STB,B3   ,B5

      401     7688           %UNLOCK (G=KN_CTX_GATE);

   7693   1 0003B8  BB80 0000 0004  02                   LAB,B3   +4
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:57   
          1 0003BB  CBF0 0100                            LAB,B4   256,IMO
          1 0003BD  E380 0000 0000  xent                 LNJ,B6   GHH$UNLOCK
          1 0003C0       0001                            DC       s:7695,PREL

      402     7695    2      RETURN;

   7695   1 0003C1  ECC7 0010                            LDB,B6   LNK$+3,AUTO
          1 0003C3  C3C6 0001                            LNJ,B4   1,B6

      403     7696
      404     7697    2   END RLS_CTX;
      405     7698        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:58   
      406     7699    1   CTX_SCREECH: PROC;

   7699   1 0003C5  EFC7 0012            CTX_SCREECH     STB,B6   LNK$+5,AUTO

      407     7700    2      CALL SCREECH(SC_BRKN_CHAIN);

   7700   1 0003C7  BB80 0000 000C  02                   LAB,B3   +12
          1 0003CA  CBF0 0100                            LAB,B4   256,IMO
          1 0003CC  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 0003CF       0001                            DC       s:7706,PREL

      408     7701
      409     7702        /*S* SCREECH_CODE: KNA-S$BRKN_CHAIN
      410     7703             TYPE: SCREECH
      411     7704             MESSAGE: Error in the chain of IOPs, LDCTs, SSN or TCTX Blocks.
      412     7705        */
      413     7706    2   END CTX_SCREECH;

   7706   1 0003D0  ECC7 0012                            LDB,B6   LNK$+5,AUTO
          1 0003D2  C3C6 0001                            LNJ,B4   1,B6

      414     7707
      415     7708        %EJECT;
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:59   
      416     7709    1   DELU_SCREECH: PROC;

   7709   1 0003D4  EFC7 0010            DELU_SCREECH    STB,B6   LNK$+3,AUTO

      417     7710    2      CALL SCREECH(SC_DELU);

   7710   1 0003D6  BB80 0000 000E  02                   LAB,B3   +14
          1 0003D9  CBF0 0100                            LAB,B4   256,IMO
          1 0003DB  E380 0000 0000  xent                 LNJ,B6   SCREECH
          1 0003DE       0001                            DC       s:7716,PREL

      418     7711
      419     7712        /*S* SCREECH_CODE: KNA-S$R2FEW
      420     7713             TYPE: SCREECH
      421     7714             MESSAGE: User has resources allocated at delete user.
      422     7715        */
      423     7716    2   END DELU_SCREECH;

   7716   1 0003DF  ECC7 0010                            LDB,B6   LNK$+3,AUTO
          1 0003E1  C3C6 0001                            LNJ,B4   1,B6
      424     7717    1   END KNA$CONTEXT;
      425     7718        %EOD;

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:60   
--  Include file information  --

   G_JIT_M.:E05TOU  is referenced.
   FR_SCODE_C.:E05TOU  is referenced.
   K_SCODE_C.:E05TOU  is referenced.
   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
   KNA_MACRO_M.:E05TOU  is referenced.
   KN_DATA_M.:E05TOU  is referenced.
   K_TRANSPORT_E.:E05TOU  is referenced.
   K_ADDRESS_M.:E05TOU  is referenced.
   GH_SCHD_M.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$CONTEXT.
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:61   

 **** Variables and constants ****

  ****  Section 000 RoData KNA$CONTEXT

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(48)    r     1 SC_BRKN_CHAIN              F-0-0/w STRC(48)    r     1 SC_DELU
     3-0-0/w STRC(48)    r     1 SC_IOP                     6-0-0/w STRC(48)    r     1 SC_LDCT
     9-0-0/w STRC(48)    r     1 SC_SSN                     C-0-0/w STRC(48)    r     1 SC_TCTX

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CTX$                     *0-0-0/w PTR         r     1 CTX$
     B-0-0/w PTR         r     1 CTX$$                      A-0-0/w UBIN(16)    r     1 CTX_COUNT
     6-0-0/w PTR         r     1 DATA$                      9-0-0/w UBIN(16)    r     1 GENERATION
     8-0-0/w UBIN(16)    r     1 LDCTX                      D-0-0/w PTR         r     1 LNK$
     8-0-0/w UBIN(16)    r     1 TCTX_ID

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$BOBCAT$                  0-0-0/w PTR         r     1 G$JIT$
     0-0-0/w UBIN(16)    r     1 KNT_INACTIVITY_TIMER       0-0-0/w UBIN(16)    r     1 KNT_REFERENCE_TIMER
     0-0-0/w UBIN(16)    r     1 KNT_RETRAN_TIMER           0-0-0/w UBIN(16)    r     1 KNT_WINDOW_EXTENDED
     0-0-0/w UBIN(16)    r     1 KNT_WINDOW_TIMER           0-0-0/w STRC(48)    r     1 KN_CTX_GATE
     0-0-0/w PTR         r     1 KN_DCT$$                   0-0-0/w PTR         r     1 KN_IOP_END$
     0-0-0/w PTR         r     1 KN_IOP_START$              0-0-0/w PTR         r     1 KN_LDCT_END$
     0-0-0/w PTR         r     1 KN_LDCT_START$             0-0-0/w PTR         r     1 KN_SSN_END$
     0-0-0/w PTR         r     1 KN_SSN_START$              0-0-0/w PTR         r     1 KN_TCTX$$
     0-0-0/w PTR         r     1 KN_TCTX_START$

PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:62   
  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$PTR                      0-0-0/w STRC(5616)  r     1 G$JIT
     0-0-0/w STRC(2816)  r     1 K$TCTX
     0-0-0/w PTR         r     1 K$TCTX$(0:0)
     0-0-0/w STRC(208)   r     1 KN$DATA
     0-0-0/w PTR         r     1 KN$DCT$(0:0)
     0-0-0/w STRC(432)   r     1 KN$IOP                     0-0-0/w STRC(256)   r     1 KN$LDCT
     0-0-0/w STRC(400)   r     1 KNA$SSN


   Procedure KNA$CONTEXT requires 995 words for executable code.
   Procedure KNA$CONTEXT requires 22 words of local(AUTO) storage.
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:63   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:64   
          MINI XREF LISTING

B$PTR
      7381**DCL      7637>>ASSIGN   7669>>IF       7675>>ASSIGN   7683<<ASSIGN
CTX$
      5069**DCL        61--PROC     7389--ENTRY    7401>>ASSIGN   7402>>ASSIGN   7403>>ASSIGN   7406--ENTRY
      7407>>IF       7409>>IF       7412>>ASSIGN   7418--ENTRY    7431>>ASSIGN   7432>>ASSIGN   7433>>ASSIGN
      7434>>ASSIGN   7435>>ASSIGN   7436>>ASSIGN   7438>>ASSIGN   7443--ENTRY    7444>>IF       7447>>ASSIGN
      7448>>ASSIGN   7458>>IF       7460>>ASSIGN   7461>>ASSIGN   7477--ENTRY    7489>>ASSIGN   7493--ENTRY
      7494>>IF       7495>>ASSIGN   7502--ENTRY    7513>>ASSIGN   7514>>ASSIGN   7515>>ASSIGN   7516>>ASSIGN
      7517>>ASSIGN   7518>>ASSIGN   7518>>ASSIGN   7519>>ASSIGN   7520>>ASSIGN   7521>>ASSIGN   7522>>ASSIGN
      7523>>ASSIGN   7525>>ASSIGN   7526>>ASSIGN   7527>>ASSIGN   7528>>ASSIGN   7530>>ASSIGN   7530>>ASSIGN
      7531>>ASSIGN   7531>>ASSIGN   7532>>ASSIGN   7532>>ASSIGN   7533>>ASSIGN   7533>>ASSIGN   7535>>ASSIGN
      7536>>ASSIGN   7537>>ASSIGN   7538>>ASSIGN   7541>>ASSIGN   7542>>ASSIGN   7543>>ASSIGN   7544>>ASSIGN
      7546>>ASSIGN   7551--ENTRY    7552>>IF       7554>>CALL     7555>>CALL     7556>>CALL     7557>>CALL
      7559>>CALL     7561>>ASSIGN   7614<<ASSIGN   7616>>IF       7636>>ASSIGN   7669>>IF       7682>>ASSIGN
      7684>>ASSIGN   7687<<ASSIGN
CTX$$
      5078**DCL      7663<<ASSIGN   7665>>DOWHILE  7668>>ASSIGN   7669>>IF       7669>>IF       7672>>IF
      7672>>IF       7675<<ASSIGN
CTX_COUNT
      5077**DCL      7662<<ASSIGN   7666<<ASSIGN   7666>>ASSIGN   7678>>IF
CTX_SCREECH
      7699**PROC     7407--CALL     7410--CALL     7444--CALL     7494--CALL     7552--CALL     7619--CALL
      7670--CALL     7673--CALL     7679--CALL
DATA$
      5072**DCL      5499--IMP-PTR  7390<<ASSIGN   7414<<ASSIGN   7419<<ASSIGN   7472<<ASSIGN   7478<<ASSIGN
      7497<<ASSIGN   7503<<ASSIGN   7563<<ASSIGN   7576<<ASSIGN   7577>>DOWHILE  7578>>IF       7578>>IF
      7581<<ASSIGN   7581>>ASSIGN   7584<<ASSIGN   7585>>DOWHILE  7586>>IF       7588>>IF       7591<<ASSIGN
      7591>>ASSIGN   7594<<ASSIGN   7595>>DOWHILE  7596>>IF       7599<<ASSIGN   7599>>ASSIGN   7614>>ASSIGN
      7618>>IF       7618>>IF       7632>>ASSIGN   7632>>ASSIGN   7633>>IF       7633>>IF       7634>>ASSIGN
      7634>>ASSIGN   7636>>ASSIGN   7637>>ASSIGN   7660>>IF       7663>>ASSIGN   7668>>ASSIGN   7672>>IF
      7672>>IF       7678>>IF       7678>>IF       7682>>ASSIGN   7683>>ASSIGN   7684>>ASSIGN   7685>>ASSIGN
      7685>>ASSIGN
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:65   
DELU_SCREECH
      7709**PROC     7579--CALL     7589--CALL     7597--CALL
G$BOBCAT$
      5475**DCL      7586>>IF
G$JIT.ERRLOG
      7311**DCL      7314--REDEF
G$JIT.JSUNIT
      7050**DCL      7051--REDEF
G$JIT.MCLS
      7049**DCL      7049--REDEF
G$JIT.TMRZ
      7318**DCL      7319--REDEF
G$JIT.USER_EXTIME
      7042**DCL      7043--REDEF
G$JIT.USER_MEMTIME
      7045**DCL      7045--REDEF
G$JIT.USER_SVTIME
      7044**DCL      7044--REDEF
G$JIT.USR#
      7039**DCL      7403>>ASSIGN   7578>>IF       7588>>IF       7596>>IF
G$JIT$
      5476**DCL      6981--IMP-PTR  7403>>ASSIGN   7578>>IF       7588>>IF       7596>>IF
GENERATION
      5075**DCL      7432<<ASSIGN   7435>>ASSIGN
GET_CTX
      7605**PROC     7391--CALL     7420--CALL     7479--CALL     7504--CALL
GHH$LOCK
      4699**DCL-ENT  7456--CALL     7611--CALL     7656--CALL
GHH$UNLOCK
      4699**DCL-ENT  7467--CALL     7626--CALL     7643--CALL     7693--CALL
GHS$CANCEL_TMR
      7387**DCL-ENT  7554--CALL     7555--CALL     7556--CALL     7557--CALL
K$TCTX
      6063**DCL      7514<<ASSIGN   7559<>CALL
K$TCTX.DST_NSAP.ADDRESS_N
      6948**DCL      6949--REDEF
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:66   
K$TCTX.MAXSEQ
      6167**DCL      7522<<ASSIGN
K$TCTX.NODE
      6070**DCL      6083--REDEF
K$TCTX.RCV_WINDOW_SZ
      6135**DCL      7517<<ASSIGN   7518>>ASSIGN
K$TCTX.RECV_UWE
      6441**DCL      7518<<ASSIGN
K$TCTX.SEND_RETRY_COUNT
      6607**DCL      7519<<ASSIGN
K$TCTX.SRC_NSAP.ADDRESS_N
      6884**DCL      6885--REDEF
K$TCTX.SRC_REF
      6097**DCL      7513>>ASSIGN   7515<<ASSIGN   7530>>ASSIGN   7531>>ASSIGN   7532>>ASSIGN   7533>>ASSIGN
K$TCTX.SSN_CRDT
      6592**DCL      7523<<ASSIGN
K$TCTX.STATE
      6064**DCL      7516<<ASSIGN   7561<<ASSIGN
K$TCTX.TMR_INACTIVITY
      6702**DCL      7556<>CALL
K$TCTX.TMR_INACTIVITY.ARG
      6704**DCL      6705--REDEF
K$TCTX.TMR_INACTIVITY.CLOCK_ID.TCTX
      6705**DCL      7532<<ASSIGN
K$TCTX.TMR_INACTIVITY.CLOCK_ID.TMR
      6705**DCL      7537<<ASSIGN
K$TCTX.TMR_INACTIVITY.INTERVAL
      6705**DCL      7527<<ASSIGN
K$TCTX.TMR_INACTIVITY.PROC$
      6704**DCL      7543<<ASSIGN
K$TCTX.TMR_REFERENCE
      6732**DCL      7557<>CALL
K$TCTX.TMR_REFERENCE.ARG
      6734**DCL      6735--REDEF
K$TCTX.TMR_REFERENCE.CLOCK_ID.TCTX
      6735**DCL      7533<<ASSIGN
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:67   
K$TCTX.TMR_REFERENCE.CLOCK_ID.TMR
      6735**DCL      7538<<ASSIGN
K$TCTX.TMR_REFERENCE.INTERVAL
      6735**DCL      7528<<ASSIGN
K$TCTX.TMR_REFERENCE.PROC$
      6734**DCL      7544<<ASSIGN
K$TCTX.TMR_RETRAN
      6643**DCL      7554<>CALL
K$TCTX.TMR_RETRAN.ARG
      6645**DCL      6646--REDEF
K$TCTX.TMR_RETRAN.CLOCK_ID.TCTX
      6646**DCL      7530<<ASSIGN
K$TCTX.TMR_RETRAN.CLOCK_ID.TMR
      6646**DCL      7535<<ASSIGN
K$TCTX.TMR_RETRAN.INTERVAL
      6646**DCL      7525<<ASSIGN
K$TCTX.TMR_RETRAN.PROC$
      6645**DCL      7541<<ASSIGN
K$TCTX.TMR_WINDOW
      6672**DCL      7555<>CALL
K$TCTX.TMR_WINDOW.ARG
      6674**DCL      6675--REDEF
K$TCTX.TMR_WINDOW.CLOCK_ID.TCTX
      6675**DCL      7531<<ASSIGN
K$TCTX.TMR_WINDOW.CLOCK_ID.TMR
      6675**DCL      7536<<ASSIGN
K$TCTX.TMR_WINDOW.INTERVAL
      6675**DCL      7526<<ASSIGN
K$TCTX.TMR_WINDOW.PROC$
      6674**DCL      7542<<ASSIGN
K$TCTX.TPDUSZ
      6166**DCL      7520<<ASSIGN
K$TCTX.TPDUSZ_PARM
      6165**DCL      7521<<ASSIGN
K$TCTX$
      6966**DCL      7546<<ASSIGN
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:68   
KN$DATA.CHECK
      5540**DCL      7660>>IF
KN$DATA.END$
      5515**DCL      7672>>IF
KN$DATA.HEAD$
      5520**DCL      7614>>ASSIGN   7637<<ASSIGN   7663>>ASSIGN   7683>>ASSIGN   7684<<ASSIGN
KN$DATA.LNK#
      5546**DCL      7636>>ASSIGN   7668>>ASSIGN   7682>>ASSIGN
KN$DATA.MAX#
      5526**DCL      7618>>IF       7678>>IF
KN$DATA.PEAK#
      5535**DCL      7633>>IF       7634<<ASSIGN
KN$DATA.START$
      5510**DCL      7672>>IF
KN$DATA.USE#
      5531**DCL      7618>>IF       7632<<ASSIGN   7632>>ASSIGN   7633>>IF       7634>>ASSIGN   7678>>IF
      7685<<ASSIGN   7685>>ASSIGN
KN$DCT$
      6965**DCL      7438<<ASSIGN   7448<<ASSIGN
KN$IOP
      5641**DCL      7401<<ASSIGN   7591--ASSIGN
KN$IOP.ARS
      5697**DCL      5698--REDEF    5699--REDEF
KN$IOP.FLAGS.INUSE
      5707**DCL      7402<<ASSIGN   7409>>IF       7412<<ASSIGN
KN$IOP.L.USER#
      5731**DCL      7403<<ASSIGN   7588>>IF
KN$IOP.LNK$
      5727**DCL      5728--REDEF    7586>>IF
KN$LDCT
      5828**DCL      7433<<ASSIGN   7599--ASSIGN
KN$LDCT.CQPTR
      6051**DCL      7436<<ASSIGN
KN$LDCT.FLAGS.QUEUED
      6005**DCL      7458>>IF
KN$LDCT.FLAGS.REL
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:69   
      6013**DCL      7460<<ASSIGN
KN$LDCT.GENERATION
      5938**DCL      7432>>ASSIGN   7435<<ASSIGN
KN$LDCT.LDCTX
      5970**DCL      7431>>ASSIGN   7434<<ASSIGN   7448>>ASSIGN
KN$LDCT.RLCID.LDCTX
      5889**DCL      5896--REDEF    5904--REDEF
KN$LDCT.TRANSPORT_ID
      5923**DCL      5931--REDEF
KN$LDCT.UID
      5953**DCL      5954--REDEF    5963--REDEF
KN$LDCT.USER#
      6046**DCL      7447<<ASSIGN   7596>>IF
KN$LDCT.USER_ENTRY$
      6034**DCL      7461<<ASSIGN
KNA$SSN
      5570**DCL      7489<<ASSIGN   7581--ASSIGN
KNA$SSN.IOPRD$
      5632**DCL      5632--REDEF
KNA$SSN.RLCID.NODE#
      5636**DCL      5636--REDEF
KNA$SSN.STATE
      5637**DCL      7495<<ASSIGN   7578>>IF
KNA$SSN.USER#
      5637**DCL      7578>>IF
KNT$RLS_CHAIN
      7386**DCL-ENT  7559--CALL
KNT$TTIMER
      7385**DCL-ENT  7541--ASSIGN   7542--ASSIGN   7543--ASSIGN   7544--ASSIGN
KNT_INACTIVITY_TIMER
      5489**DCL      7527>>ASSIGN
KNT_REFERENCE_TIMER
      5490**DCL      7528>>ASSIGN
KNT_RETRAN_TIMER
      5487**DCL      7525>>ASSIGN
KNT_WINDOW_EXTENDED
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:70   
      5486**DCL      7517>>ASSIGN
KNT_WINDOW_TIMER
      5488**DCL      7526>>ASSIGN
KN_CTX_GATE
      5466**DCL      7456<>CALL     7467<>CALL     7611<>CALL     7626<>CALL     7643<>CALL     7656<>CALL
      7693<>CALL
KN_DCT$$
      5484**DCL      6965--IMP-PTR  7438>>ASSIGN   7448>>ASSIGN
KN_IOP_END$
      5481**DCL      7585>>DOWHILE
KN_IOP_START$
      5477**DCL      7390--ASSIGN   7414--ASSIGN   7584>>ASSIGN
KN_LDCT_END$
      5482**DCL      7595>>DOWHILE
KN_LDCT_START$
      5478**DCL      7419--ASSIGN   7472--ASSIGN   7594>>ASSIGN
KN_SSN_END$
      5483**DCL      7577>>DOWHILE
KN_SSN_START$
      5479**DCL      7478--ASSIGN   7497--ASSIGN   7576>>ASSIGN
KN_TCTX$$
      5485**DCL      6966--IMP-PTR  7546>>ASSIGN
KN_TCTX_START$
      5480**DCL      7503--ASSIGN   7563--ASSIGN
LDCTX
      5073**DCL      5074--REDEF    7431<<ASSIGN   7434>>ASSIGN   7438>>ASSIGN
LNK$
      5079**DCL      7636<<ASSIGN   7637>>ASSIGN   7668<<ASSIGN   7669>>IF       7675>>ASSIGN   7682<<ASSIGN
      7683>>ASSIGN
RLS_CTX
      7650**PROC     7415--CALL     7498--CALL     7564--CALL
RLS_CTX2 IN PROCEDURE RLS_CTX
      7659**ENTRY    7473--CALL
SCREECH
      7384**DCL-ENT  7393--CALL     7422--CALL     7481--CALL     7506--CALL     7700--CALL     7710--CALL
SC_BRKN_CHAIN
PL6.E3A0      #001=KNA$CONTEXT File=KNA$SUBS.:E05TSI                             WED 07/30/97 00:58 Page:71   
      5110**DCL      7700<>CALL
SC_DELU
      5420**DCL      7710<>CALL
SC_IOP
      5172**DCL      7393<>CALL
SC_LDCT
      5234**DCL      7422<>CALL
SC_SSN
      5296**DCL      7481<>CALL
SC_TCTX
      5358**DCL      7506<>CALL
TCTX_ID
      5074**DCL      7513<<ASSIGN   7515>>ASSIGN   7546>>ASSIGN

PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:72   
      426        1        /*T***********************************************************/
      427        2        /*T*                                                         */
      428        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      429        4        /*T*                                                         */
      430        5        /*T***********************************************************/
      431        6        %EJECT;
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:73   
      432        7        /*F*  NAME: KNA$LOCATE_TCTX
      433        8
      434        9              PURPOSE: To locate an allocated TCTX where the selected
      435       10                       NODE, CLASS, QOS, CHKSUM, EXTENDED, EXPEDITED and
      436       11                       CLASS_2_FLOW options match those specified in the
      437       12                       connect request.
      438       13
      439       14                       The alternate return is taken if a TCTX with
      440       15                       matching specifications cannot be found.
      441       16
      442       17              INPUT:   KN$NETPARM.FPT$ contains the address of FPT_CONNECT
      443       18                       KN$NETPARM.LDCT$ contains the address of the session
      444       19                       connection LDCT if this is call from local session.
      445       20
      446       21              OUTPUT:  KN$NETPARM.TCTX_ID will contain the index for the TCXT
      447       22                       KN$LDCT.TRANSPORT_ID will contain the index for the TCTX
      448       23                       if this is a call from local session.
      449       24        */
      450       25
      451       26        /*X* PLM=3,IND=5,ENU=0,ECU=0 */
      452       27        KNA$LOCATE_TCTX: PROC(KN$NETPARM) ALTRET;
      453       28
      454       29        %INCLUDE KN_DATA_M;
      455     1815        %INCLUDE KNH_MACRO_C;
      456     2098        %INCLUDE K_ADDRESS_M;
      457     2601        %INCLUDE KI_CP6;
      458     3697        %INCLUDE GH_SCHD_M;
      459     3841
      460     3842                                                /* Input parameters                   */
      461     3843        %KN$NETPARM;
      462     3996
      463     3997                                                /* AUTO Storage                       */
      464     3998    1   DCL TCTX# UBIN;
      465     3999    1   DCL TCTX$ PTR;
      466     4000
      467     4001                                                /* Based data                         */
      468     4002    1   DCL KN$TCTX$(0:0) PTR BASED(KN_TCTX$$);
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:74   
      469     4003        %KN$LDCT (STCLASS="BASED(KN$NETPARM.LDCT$)");
      470     4248        %K$TCTX (NAME=K$TCTX, STCLASS="BASED(TCTX$)");
      471     5155        %FPT_CONNECT (STCLASS="BASED(KN$NETPARM.FPT$)");
      472     5224                                                /* External data                      */
      473     5225    1   DCL KN_TCTX$$ PTR SYMREF READONLY;
      474     5226    1   DCL KN_TCTX_MAX# UBIN SYMREF READONLY;
      475     5227
      476     5228
      477     5229    1      TCTX# = 1;
      478     5230
      479     5231    2      DO WHILE ( TCTX# < KN_TCTX_MAX# );
      480     5232    2           TCTX$ = KN$TCTX$(TCTX#);
      481     5233    2           IF TCTX$ ~= ADDR(NIL)
      482     5234    3           THEN DO;
      483     5235    3                IF K$TCTX.STATE > %K_TSTATE_CLOSED
      484     5236    3                THEN IF K$TCTX.NODE = FPT_CONNECT.RLCID.NODE
      485     5237    4                     THEN DO;
      486     5238    4                          IF K$TCTX.CLASS = 15
      487     5239    5                          THEN DO;
      488     5240    5                               FPT_CONNECT.CLASS = 15;
      489     5241    5                               FPT_CONNECT.SERVICE = K$TCTX.QOS;
      490     5242    5                               FPT_CONNECT.TR_FLAGS = K$TCTX.OPTION;
      491     5243    5                               GOTO GOT_MATCH;
      492     5244    5                               END;
      493     5245
      494     5246    4                          IF K$TCTX.QOS = FPT_CONNECT.SERVICE
      495     5247    4                            AND K$TCTX.CLASS = FPT_CONNECT.CLASS
      496     5248    4                            AND BITBIN(K$TCTX.OPTION & '001F'X) = BITBIN(FPT_CONNECT.
              5248                                     TR_FLAGS & '001F'X)
      497     5249                                                /* .1F elimates the trace flag        */
      498     5250    5                          THEN DO;
      499     5251    5   GOT_MATCH:                  ;
      500     5252    5                               KN$NETPARM.TCTX_ID = K$TCTX.SRC_REF;
      501     5253    5                               IF KN$NETPARM.FUNCTION = %KN_FCN_INIT
      502     5254    6                               THEN DO;
      503     5255    6                                    IF KN$LDCT.CONN_TYPE ~= %KN_CNTYPE_LINK
      504     5256    7                                    THEN DO;
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:75   
      505     5257    7                                         KN$LDCT.TRANSPORT_ID = K$TCTX.SRC_REF;
      506     5258    7                                         END;
      507     5259    6                                    END;
      508     5260    5                               RETURN;
      509     5261    5                               END/*got match*/;
      510     5262    4                          END/*node match*/;
      511     5263    3                END/*do if tctx$ ~nil*/;
      512     5264
      513     5265    2           TCTX# = TCTX# +1;
      514     5266    2           END/*do while tldct < knt_nxt_tdct*/;
      515     5267
      516     5268    1      ALTRETURN;
      517     5269
      518     5270    1   END KNA$LOCATE_TCTX;
      519     5271        %EOD;

PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:76   
--  Include file information  --

   GH_SCHD_M.:E05TOU  is referenced.
   KI_CP6.:E05TOU  is referenced.
   K_ADDRESS_M.:E05TOU  is referenced.
   KNH_MACRO_C.:E05TOU  is referenced.
   KN_DATA_M.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$LOCATE_TCTX.

   Procedure KNA$LOCATE_TCTX requires 124 words for executable code.
   Procedure KNA$LOCATE_TCTX requires 10 words of local(AUTO) storage.

PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:77   

 Object Unit name= KNA$LOCATE_TCTX                            File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 00:59:21.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none   124     7C  KNA$LOCATE_TCTX

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        1  KNA$LOCATE_TCTX

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    KN_TCTX$$                        r    KN_TCTX_MAX#                     r    G$ROS$
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:78   


      426        1        /*T***********************************************************/
      427        2        /*T*                                                         */
      428        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      429        4        /*T*                                                         */
      430        5        /*T***********************************************************/
      431        6        %EJECT;
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:79   
      432        7        /*F*  NAME: KNA$LOCATE_TCTX
      433        8
      434        9              PURPOSE: To locate an allocated TCTX where the selected
      435       10                       NODE, CLASS, QOS, CHKSUM, EXTENDED, EXPEDITED and
      436       11                       CLASS_2_FLOW options match those specified in the
      437       12                       connect request.
      438       13
      439       14                       The alternate return is taken if a TCTX with
      440       15                       matching specifications cannot be found.
      441       16
      442       17              INPUT:   KN$NETPARM.FPT$ contains the address of FPT_CONNECT
      443       18                       KN$NETPARM.LDCT$ contains the address of the session
      444       19                       connection LDCT if this is call from local session.
      445       20
      446       21              OUTPUT:  KN$NETPARM.TCTX_ID will contain the index for the TCXT
      447       22                       KN$LDCT.TRANSPORT_ID will contain the index for the TCTX
      448       23                       if this is a call from local session.
      449       24        */
      450       25
      451       26        /*X* PLM=3,IND=5,ENU=0,ECU=0 */
      452       27        KNA$LOCATE_TCTX: PROC(KN$NETPARM) ALTRET;

     27   0 000000  D380 0000 0000  xent KNA$LOCATE_TCTX LNJ,B5   X6A_AUTO_1
          0 000003       000A 0001                       DC       10,1

      453       28
      454       29        %INCLUDE KN_DATA_M;
      455     1815        %INCLUDE KNH_MACRO_C;
      456     2098        %INCLUDE K_ADDRESS_M;
      457     2601        %INCLUDE KI_CP6;
      458     3697        %INCLUDE GH_SCHD_M;
      459     3841
      460     3842                                                /* Input parameters                   */
      461     3843        %KN$NETPARM;
      462     3996
      463     3997                                                /* AUTO Storage                       */
      464     3998    1   DCL TCTX# UBIN;
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:80   
      465     3999    1   DCL TCTX$ PTR;
      466     4000
      467     4001                                                /* Based data                         */
      468     4002    1   DCL KN$TCTX$(0:0) PTR BASED(KN_TCTX$$);
      469     4003        %KN$LDCT (STCLASS="BASED(KN$NETPARM.LDCT$)");
      470     4248        %K$TCTX (NAME=K$TCTX, STCLASS="BASED(TCTX$)");
      471     5155        %FPT_CONNECT (STCLASS="BASED(KN$NETPARM.FPT$)");
      472     5224                                                /* External data                      */
      473     5225    1   DCL KN_TCTX$$ PTR SYMREF READONLY;
      474     5226    1   DCL KN_TCTX_MAX# UBIN SYMREF READONLY;
      475     5227
      476     5228
      477     5229    1      TCTX# = 1;

   5229   0 000005  6C01                                 LDV,R6   1
          0 000006  EF47 0006                            STR,R6   TCTX#,AUTO

      478     5230
      479     5231    2      DO WHILE ( TCTX# < KN_TCTX_MAX# );

   5231   0 000008  E900 0000 0000  xsym                 CMR,R6   KN_TCTX_MAX#
          0 00000B  0281 006D                            BGE      s:5268,PREL

      480     5232    2           TCTX$ = KN$TCTX$(TCTX#);

   5232   0 00000D  EC80 0000 0000  xsym                 LDB,B6   KN_TCTX$$
          0 000010  B847 0006                            LDR,R3   TCTX#,AUTO
          0 000012  DCB6                                 LDB,B5   ,B6,R3
          0 000013  DFC7 0007                            STB,B5   TCTX$,AUTO

      481     5233    2           IF TCTX$ ~= ADDR(NIL)

   5233   0 000015  8DC7 0007                            CMN      TCTX$,AUTO
          0 000017  0901 0058                            BE       s:5265,PREL

      482     5234    3           THEN DO;

PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:81   
      483     5235    3                IF K$TCTX.STATE > %K_TSTATE_CLOSED

   5235   0 000019  E285                                 LLH,R6   ,B5
          0 00001A  6D02                                 CMV,R6   2
          0 00001B  0381 0054                            BLE      s:5265,PREL

      484     5236    3                THEN IF K$TCTX.NODE = FPT_CONNECT.RLCID.NODE

   5236   0 00001D  CCC7 0004                            LDB,B4   @KN$NETPARM,AUTO
          0 00001F  BCC4 0019                            LDB,B3   25,B4
          0 000021  D805                                 LDR,R5   ,B5
          0 000022  D570 00FF                            AND,R5   255,IMO
          0 000024  C2C3 000D                            LLH,R4   13,B3
          0 000026  D954                                 CMR,R5   R4
          0 000027  0981 0048                            BNE      s:5265,PREL

      485     5237    4                     THEN DO;

      486     5238    4                          IF K$TCTX.CLASS = 15

   5238   0 000029  A2C5 0005                            LLH,R2   5,B5
          0 00002B  2D0F                                 CMV,R2   15
          0 00002C  0981 0013                            BNE      s:5246,PREL

      487     5239    5                          THEN DO;

      488     5240    5                               FPT_CONNECT.CLASS = 15;

   5240   0 00002E  1C0F                                 LDV,R1   15
          0 00002F  97C3 0011                            STH,R1   17,B3

      489     5241    5                               FPT_CONNECT.SERVICE = K$TCTX.QOS;

   5241   0 000031  BCC4 0019                            LDB,B3   25,B4
          0 000033  E845 0004                            LDR,R6   4,B5
          0 000035  EAC3 0010                            SRM,R6,'00FF'X    16,B3
          0 000037       00FF
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:82   

      490     5242    5                               FPT_CONNECT.TR_FLAGS = K$TCTX.OPTION;

   5242   0 000038  BCC4 0019                            LDB,B3   25,B4
          0 00003A  E845 000C                            LDR,R6   12,B5
          0 00003C  EF43 0012                            STR,R6   18,B3

      491     5243    5                               GOTO GOT_MATCH;

   5243   0 00003E  0F81 001C                            B        s:5250,PREL

      492     5244    5                               END;
      493     5245
      494     5246    4                          IF K$TCTX.QOS = FPT_CONNECT.SERVICE

   5246   0 000040  9845 0004                            LDR,R1   4,B5
          0 000042  9570 00FF                            AND,R1   255,IMO
          0 000044  E843 0010                            LDR,R6   16,B3
          0 000046  E570 00FF                            AND,R6   255,IMO
          0 000048  9956                                 CMR,R1   R6
          0 000049  0981 0026                            BNE      s:5265,PREL
          0 00004B  E2C3 0011                            LLH,R6   17,B3
          0 00004D  A956                                 CMR,R2   R6
          0 00004E  0981 0021                            BNE      s:5265,PREL
          0 000050  E845 000C                            LDR,R6   12,B5
          0 000052  E570 001F                            AND,R6   31,IMO
          0 000054  D843 0012                            LDR,R5   18,B3
          0 000056  D570 001F                            AND,R5   31,IMO
          0 000058  E955                                 CMR,R6   R5
          0 000059  0981 0016                            BNE      s:5265,PREL

      495     5247    4                            AND K$TCTX.CLASS = FPT_CONNECT.CLASS
      496     5248    4                            AND BITBIN(K$TCTX.OPTION & '001F'X) = BITBIN(FPT_CONNECT.
              5248                                     TR_FLAGS & '001F'X)
      497     5249                                                /* .1F elimates the trace flag        */
      498     5250    5                          THEN DO;

PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:83   
   5242   0                              GOT_MATCH       null
      499     5251    5   GOT_MATCH:                  ;
      500     5252    5                               KN$NETPARM.TCTX_ID = K$TCTX.SRC_REF;

   5252   0 00005B  E845 0002            GOT_MATCH       LDR,R6   2,B5
          0 00005D  EF44 0011                            STR,R6   17,B4

      501     5253    5                               IF KN$NETPARM.FUNCTION = %KN_FCN_INIT

   5253   0 00005F  D844 0014                            LDR,R5   20,B4
          0 000061  5D01                                 CMV,R5   1
          0 000062  0981 000A                            BNE      s:5260,PREL

      502     5254    6                               THEN DO;

      503     5255    6                                    IF KN$LDCT.CONN_TYPE ~= %KN_CNTYPE_LINK

   5255   0 000064  BC84                                 LDB,B3   ,B4
          0 000065  C283                                 LLH,R4   ,B3
          0 000066  4D06                                 CMV,R4   6
          0 000067  0901 0005                            BE       s:5260,PREL

      504     5256    7                                    THEN DO;

      505     5257    7                                         KN$LDCT.TRANSPORT_ID = K$TCTX.SRC_REF;

   5257   0 000069  A845 0002                            LDR,R2   2,B5
          0 00006B  AF43 0003                            STR,R2   3,B3

      506     5258    7                                         END;

      507     5259    6                                    END;

      508     5260    5                               RETURN;

   5260   0 00006D  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:84   
      509     5261    5                               END/*got match*/;
      510     5262    4                          END/*node match*/;
      511     5263    3                END/*do if tctx$ ~nil*/;
      512     5264
      513     5265    2           TCTX# = TCTX# +1;

   5265   0 000070  8AC7 0006                            INC      TCTX#,AUTO

      514     5266    2           END/*do while tldct < knt_nxt_tdct*/;

   5266   0 000072  E847 0006                            LDR,R6   TCTX#,AUTO
          0 000074  E900 0000 0000  xsym                 CMR,R6   KN_TCTX_MAX#
          0 000077  0201 FF95                            BL       s:5232,PREL

      515     5267
      516     5268    1      ALTRETURN;

   5268   0 000079  C380 0000 0000  xent                 LNJ,B4   X6A_AALT
      517     5269
      518     5270    1   END KNA$LOCATE_TCTX;
      519     5271        %EOD;

PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:85   
--  Include file information  --

   GH_SCHD_M.:E05TOU  is referenced.
   KI_CP6.:E05TOU  is referenced.
   K_ADDRESS_M.:E05TOU  is referenced.
   KNH_MACRO_C.:E05TOU  is referenced.
   KN_DATA_M.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$LOCATE_TCTX.
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:86   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @KN$NETPARM               *0-0-0/w STRC(528)   r     1 KN$NETPARM
     6-0-0/w UBIN(16)    r     1 TCTX#                      7-0-0/w PTR         r     1 TCTX$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 KN_TCTX$$                  0-0-0/w UBIN(16)    r     1 KN_TCTX_MAX#

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(304)   r     1 FPT_CONNECT                0-0-0/w STRC(2816)  r     1 K$TCTX
     0-0-0/w STRC(256)   r     1 KN$LDCT
     0-0-0/w PTR         r     1 KN$TCTX$(0:0)


   Procedure KNA$LOCATE_TCTX requires 124 words for executable code.
   Procedure KNA$LOCATE_TCTX requires 10 words of local(AUTO) storage.
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:87   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:88   
          MINI XREF LISTING

FPT_CONNECT.CLASS
      5209**DCL      5240<<ASSIGN   5246>>IF
FPT_CONNECT.RLCID.GENERATION
      5205**DCL      5206--REDEF
FPT_CONNECT.RLCID.LDCTX
      5206**DCL      5206--REDEF
FPT_CONNECT.RLCID.NODE
      5205**DCL      5236>>IF
FPT_CONNECT.SERVICE
      5208**DCL      5241<<ASSIGN   5246>>IF
FPT_CONNECT.TERMINAL_ID.TERM
      5194**DCL      5203--REDEF
FPT_CONNECT.TR_FLAGS
      5210**DCL      5242<<ASSIGN   5246>>IF
GOT_MATCH
      5242**LABEL    5243--GOTO
K$TCTX.CLASS
      4319**DCL      5238>>IF       5246>>IF
K$TCTX.DST_NSAP.ADDRESS_N
      5138**DCL      5139--REDEF
K$TCTX.NODE
      4260**DCL      4273--REDEF    5236>>IF
K$TCTX.OPTION
      4358**DCL      5242>>ASSIGN   5246>>IF
K$TCTX.QOS
      4308**DCL      5241>>ASSIGN   5246>>IF
K$TCTX.SRC_NSAP.ADDRESS_N
      5074**DCL      5075--REDEF
K$TCTX.SRC_REF
      4287**DCL      5252>>ASSIGN   5257>>ASSIGN
K$TCTX.STATE
      4254**DCL      5235>>IF
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:89   
K$TCTX.TMR_INACTIVITY.ARG
      4894**DCL      4895--REDEF
K$TCTX.TMR_REFERENCE.ARG
      4924**DCL      4925--REDEF
K$TCTX.TMR_RETRAN.ARG
      4835**DCL      4836--REDEF
K$TCTX.TMR_WINDOW.ARG
      4864**DCL      4865--REDEF
KN$LDCT.CONN_TYPE
      4019**DCL      5255>>IF
KN$LDCT.RLCID.LDCTX
      4079**DCL      4086--REDEF    4094--REDEF
KN$LDCT.TRANSPORT_ID
      4113**DCL      4121--REDEF    5257<<ASSIGN
KN$LDCT.UID
      4143**DCL      4144--REDEF    4153--REDEF
KN$NETPARM
      3856**DCL        27--PROC
KN$NETPARM.FPT$
      3975**DCL      5169--IMP-PTR  5236>>IF       5240>>ASSIGN   5241>>ASSIGN   5242>>ASSIGN   5246>>IF
      5246>>IF       5246>>IF
KN$NETPARM.FUNCTION
      3951**DCL      5253>>IF
KN$NETPARM.LDCT$
      3857**DCL      4018--IMP-PTR  5255>>IF       5257>>ASSIGN
KN$NETPARM.MSG$
      3863**DCL      3868--REDEF
KN$NETPARM.NHDR$
      3915**DCL      3916--REDEF
KN$NETPARM.SHDR$
      3893**DCL      3894--REDEF
KN$NETPARM.TCTX_ID
      3926**DCL      5252<<ASSIGN
KN$NETPARM.THDR$
      3904**DCL      3905--REDEF
KN$NETPARM.UHDR$
PL6.E3A0      #002=KNA$LOCATE_TCTX File=KNA$SUBS.:E05TSI                         WED 07/30/97 00:59 Page:90   
      3879**DCL      3880--REDEF
KN$TCTX$
      4002**DCL      5232>>ASSIGN
KN_TCTX$$
      5225**DCL      4002--IMP-PTR  5232>>ASSIGN
KN_TCTX_MAX#
      5226**DCL      5231>>DOWHILE
TCTX#
      3998**DCL      5229<<ASSIGN   5231>>DOWHILE  5232>>ASSIGN   5265<<ASSIGN   5265>>ASSIGN
TCTX$
      3999**DCL      4253--IMP-PTR  5232<<ASSIGN   5233>>IF       5235>>IF       5236>>IF       5238>>IF
      5241>>ASSIGN   5242>>ASSIGN   5246>>IF       5246>>IF       5246>>IF       5252>>ASSIGN   5257>>ASSIGN

PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:91   
      520        1        /*T***********************************************************/
      521        2        /*T*                                                         */
      522        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      523        4        /*T*                                                         */
      524        5        /*T***********************************************************/
      525        6
      526        7
      527        8        /*F* NAME:  KNA$MAP
      528        9             PURPOSE:
      529       10                  The purpose of this routine is to take a segment
      530       11                  descriptor that has been saved in an IOP and map
      531       12                  the necessary data into the window segment, modifying the
      532       13                  passed pointer so that it points into the window segment
      533       14                  where the data is.
      534       15           DESCRIPTION:
      535       16                  This routine is used by KNA$IN to remap a descriptor that
      536       17                  was saved in an IOP by KNA$SAVEMAP.  The passed descriptor
      537       18                  is mapped into the window segment and the passed pointer
      538       19                  is modified to locate the data within the window segment.
      539       20        */
      540       21        /*D*
      541       22           NAME:  KNA$MAP
      542       23             CALL: CALL KNA$MAP(ptr$,segdesc);
      543       24
      544       25           PARAMETERS:
      545       26                  ptr$ - The virtual pointer
      546       27                  segdesc - The segment descriptor from the IOP
      547       28        */
      548       29
      549       30        KNA$MAP: PROC(PTR$,SEGDES);
      550       31                                                /* INCLUDES                           */
      551       32        %INCLUDE GH_LCP6_M;
      552      866        %INCLUDE G_HJIT_M;
      553     1011                                                /* SYMREFS                            */
      554     1012    1   DCL G$ASDT_MCL$ PTR SYMREF;
      555     1013    1   DCL G$UHJIT$ PTR SYMREF;
      556     1014    1   DCL G$WINDOW1$ PTR SYMREF;
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:92   
      557     1015                                                /* BASED                              */
      558     1016        %G$UHJIT(STCLASS="BASED(G$UHJIT$)");
      559     3990        %G$ASDT_MCL(STCLASS="BASED(G$ASDT_MCL$)");
      560     4684        %G$ASDT(STCLASS=BASED);
      561     4713                                                /* ARGS                               */
      562     4714    1   DCL PTR$ UBIN(32);
      563     4715    1   DCL PTR$$ REDEF PTR$ CPTR;
      564     4716    1   DCL 1 LITTLE$ REDEF PTR$,               /* Used for 4K segs 0 - 15            */
      565     4717    1         2 U16 UBIN(16) UNAL,
      566     4718    1         2 U4 UBIN(4) UNAL,
      567     4719    1         2 U12 UBIN(12) UNAL ;
      568     4720    1   DCL 1 BIG$ REDEF PTR$,                  /* Used for 64K segs 16 - 30          */
      569     4721    1         2 CFLG BIT(1),
      570     4722    1         2 U15 UBIN(15) UNAL,
      571     4723    1         2 U16 UBIN(16) UNAL ;
      572     4724    1   DCL SEGDES BIT(32) ALIGNED;
      573     4725                                                /* TEMPS                              */
      574     4726    1   DCL OFFSET UBIN(32);
      575     4727    1   DCL SEGNO UBIN;
      576     4728    1   DCL NONWORD_ALIGNED BIT(1) ;
      577     4729                                                /* ENTRYS                             */
      578     4730    1   DCL GHH$ASD ENTRY(2);
      579     4731    1      IF BIG$.U15 = 0
      580     4732    1      THEN OFFSET = LITTLE$.U12;
      581     4733    1      ELSE OFFSET = BIG$.U16;
      582     4734
      583     4735    1      IF BIG$.CFLG
      584     4736    1      THEN NONWORD_ALIGNED = '1'B;
      585     4737    1      ELSE NONWORD_ALIGNED = '0'B;
      586     4738
      587     4739    1      G$ASDT_MCL.WINDOW1 = SEGDES;
      588     4740    1      CALL GHH$ASD(G$WINDOW1$,G$ASDT_MCL.WINDOW1);
      589     4741
      590     4742        /* Setup the pointer to be an offset from the base of WINDOW1
      591     4743        */
      592     4744    1      PTR$$=PINCRW(G$WINDOW1$,OFFSET);
      593     4745    1      IF NONWORD_ALIGNED
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:93   
      594     4746    1      THEN BIG$.CFLG = '1'B;
      595     4747
      596     4748    1      RETURN;
      597     4749        %EJECT;
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:94   
      598     4750        /*F* NAME: KNA$SAVEMAP
      599     4751             PURPOSE: To move a segment descriptor from the user's ASDT
      600     4752                      into the IOP.
      601     4753             DESCRIPTION: This routine is used by the read code in KNA$USERIO.
      602     4754        */
      603     4755
      604     4756    1   KNA$SAVEMAP: ENTRY(PTR$,SEGDES);
      605     4757
      606     4758    1      IF BIG$.U15 = 0
      607     4759    1      THEN SEGNO = LITTLE$.U4;
      608     4760    1      ELSE SEGNO = BIG$.U15 + 15;
      609     4761
      610     4762    1      SEGDES = ADDR(G$UHJIT$->G$UHJIT.ASDT_MCL)->G$ASDT(SEGNO);
      611     4763    1      RETURN;
      612     4764
      613     4765    1   END;
      614     4766        %EOD;

PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:95   
--  Include file information  --

   G_HJIT_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$MAP.

   Procedure KNA$MAP requires 113 words for executable code.
   Procedure KNA$MAP requires 16 words of local(AUTO) storage.

PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:96   

 Object Unit name= KNA$MAP                                    File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 00:59:44.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none   113     71  KNA$MAP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        2  KNA$MAP
     0     4D                  yes      Std        2  KNA$SAVEMAP

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 GHH$ASD
                       nStd      0 X6A_AUTO_2
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     G$ASDT_MCL$                           G$UHJIT$                              G$WINDOW1$
r    G$ROS$
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:97   


      520        1        /*T***********************************************************/
      521        2        /*T*                                                         */
      522        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      523        4        /*T*                                                         */
      524        5        /*T***********************************************************/
      525        6
      526        7
      527        8        /*F* NAME:  KNA$MAP
      528        9             PURPOSE:
      529       10                  The purpose of this routine is to take a segment
      530       11                  descriptor that has been saved in an IOP and map
      531       12                  the necessary data into the window segment, modifying the
      532       13                  passed pointer so that it points into the window segment
      533       14                  where the data is.
      534       15           DESCRIPTION:
      535       16                  This routine is used by KNA$IN to remap a descriptor that
      536       17                  was saved in an IOP by KNA$SAVEMAP.  The passed descriptor
      537       18                  is mapped into the window segment and the passed pointer
      538       19                  is modified to locate the data within the window segment.
      539       20        */
      540       21        /*D*
      541       22           NAME:  KNA$MAP
      542       23             CALL: CALL KNA$MAP(ptr$,segdesc);
      543       24
      544       25           PARAMETERS:
      545       26                  ptr$ - The virtual pointer
      546       27                  segdesc - The segment descriptor from the IOP
      547       28        */
      548       29
      549       30        KNA$MAP: PROC(PTR$,SEGDES);

     30   0 000000  D380 0000 0000  xent KNA$MAP         LNJ,B5   X6A_AUTO_2
          0 000003       0010 0002                       DC       16,2

      550       31                                                /* INCLUDES                           */
      551       32        %INCLUDE GH_LCP6_M;
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:98   
      552      866        %INCLUDE G_HJIT_M;
      553     1011                                                /* SYMREFS                            */
      554     1012    1   DCL G$ASDT_MCL$ PTR SYMREF;
      555     1013    1   DCL G$UHJIT$ PTR SYMREF;
      556     1014    1   DCL G$WINDOW1$ PTR SYMREF;
      557     1015                                                /* BASED                              */
      558     1016        %G$UHJIT(STCLASS="BASED(G$UHJIT$)");
      559     3990        %G$ASDT_MCL(STCLASS="BASED(G$ASDT_MCL$)");
      560     4684        %G$ASDT(STCLASS=BASED);
      561     4713                                                /* ARGS                               */
      562     4714    1   DCL PTR$ UBIN(32);
      563     4715    1   DCL PTR$$ REDEF PTR$ CPTR;
      564     4716    1   DCL 1 LITTLE$ REDEF PTR$,               /* Used for 4K segs 0 - 15            */
      565     4717    1         2 U16 UBIN(16) UNAL,
      566     4718    1         2 U4 UBIN(4) UNAL,
      567     4719    1         2 U12 UBIN(12) UNAL ;
      568     4720    1   DCL 1 BIG$ REDEF PTR$,                  /* Used for 64K segs 16 - 30          */
      569     4721    1         2 CFLG BIT(1),
      570     4722    1         2 U15 UBIN(15) UNAL,
      571     4723    1         2 U16 UBIN(16) UNAL ;
      572     4724    1   DCL SEGDES BIT(32) ALIGNED;
      573     4725                                                /* TEMPS                              */
      574     4726    1   DCL OFFSET UBIN(32);
      575     4727    1   DCL SEGNO UBIN;
      576     4728    1   DCL NONWORD_ALIGNED BIT(1) ;
      577     4729                                                /* ENTRYS                             */
      578     4730    1   DCL GHH$ASD ENTRY(2);
      579     4731    1      IF BIG$.U15 = 0

   4731   0 000005  ECC7 0004                            LDB,B6   @PTR$,AUTO
          0 000007  8286                                 LB,'7FFF'X        ,B6
          0 000008       7FFF
          0 000009  0501 000A                            BBT      s:4733,PREL

      580     4732    1      THEN OFFSET = LITTLE$.U12;

   4732   0 00000B  F846 0001                            LDR,R7   1,B6
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:99   
          0 00000D  F570 0FFF                            AND,R7   4095,IMO
          0 00000F  6C00                                 LDV,R6   0
          0 000010  8D47 0008                            SDI      OFFSET,AUTO
          0 000012  0F81 0006                            B        s:4735,PREL

      581     4733    1      ELSE OFFSET = BIG$.U16;

   4733   0 000014  F846 0001                            LDR,R7   1,B6
          0 000016  6C00                                 LDV,R6   0
          0 000017  8D47 0008                            SDI      OFFSET,AUTO

      582     4734
      583     4735    1      IF BIG$.CFLG

   4735   0 000019  8986                                 CMZ      ,B6
          0 00001A  0881 0006                            BAGE     s:4737,PREL

      584     4736    1      THEN NONWORD_ALIGNED = '1'B;

   4736   0 00001C  8947 000B                            LBT,'8000'X       NONWORD_ALIGNED,AUTO
   4736   0 00001E       8000
          0 00001F  0F81 0003                            B        s:4739,PREL

      585     4737    1      ELSE NONWORD_ALIGNED = '0'B;

   4737   0 000021  8747 000B                            CL       NONWORD_ALIGNED,AUTO

      586     4738
      587     4739    1      G$ASDT_MCL.WINDOW1 = SEGDES;

   4739   0 000023  DCC7 0006                            LDB,B5   @SEGDES,AUTO
          0 000025  8C85                                 LDI      ,B5
          0 000026  CC80 0000 0000  xsym                 LDB,B4   G$ASDT_MCL$
          0 000029  8D44 0030                            SDI      48,B4

      588     4740    1      CALL GHH$ASD(G$WINDOW1$,G$ASDT_MCL.WINDOW1);

PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:100  
   4740   0 00002B  BBC4 0030                            LAB,B3   48,B4
          0 00002D  BFC7 000E                            STB,B3   NONWORD_ALIGNED+3,AUTO
          0 00002F  AB80 0000 0000  xsym                 LAB,B2   G$WINDOW1$
          0 000032  AFC7 000C                            STB,B2   NONWORD_ALIGNED+1,AUTO
          0 000034  BBC7 000C                            LAB,B3   NONWORD_ALIGNED+1,AUTO
          0 000036  CBF0 0200                            LAB,B4   512,IMO
          0 000038  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          0 00003B       0001                            DC       s:4744,PREL

      589     4741
      590     4742        /* Setup the pointer to be an offset from the base of WINDOW1
      591     4743        */
      592     4744    1      PTR$$=PINCRW(G$WINDOW1$,OFFSET);

   4744   0 00003C  8C80 0000 0000  xsym                 LDI      G$WINDOW1$
          0 00003F  8447 0008                            AID      OFFSET,AUTO
          0 000041  ECC7 0004                            LDB,B6   @PTR$,AUTO
          0 000043  8D06                                 SDI      ,B6

      593     4745    1      IF NONWORD_ALIGNED

   4745   0 000044  89C7 000B                            CMZ      NONWORD_ALIGNED,AUTO
          0 000046  0881 0003                            BAGE     s:4748,PREL

      594     4746    1      THEN BIG$.CFLG = '1'B;

   4746   0 000048  8906                                 LBT,'8000'X       ,B6
   4746   0 000049       8000

      595     4747
      596     4748    1      RETURN;

   4748   0 00004A  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      597     4749        %EJECT;
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:101  
      598     4750        /*F* NAME: KNA$SAVEMAP
      599     4751             PURPOSE: To move a segment descriptor from the user's ASDT
      600     4752                      into the IOP.
      601     4753             DESCRIPTION: This routine is used by the read code in KNA$USERIO.
      602     4754        */
      603     4755
      604     4756    1   KNA$SAVEMAP: ENTRY(PTR$,SEGDES);

   4756   0 00004D  D380 0000 0000  xent KNA$SAVEMAP     LNJ,B5   X6A_AUTO_2
          0 000050       0010 0002                       DC       16,2

      605     4757
      606     4758    1      IF BIG$.U15 = 0

   4758   0 000052  ECC7 0004                            LDB,B6   @PTR$,AUTO
          0 000054  8286                                 LB,'7FFF'X        ,B6
          0 000055       7FFF
          0 000056  0501 0008                            BBT      s:4760,PREL

      607     4759    1      THEN SEGNO = LITTLE$.U4;

   4759   0 000058  E846 0001                            LDR,R6   1,B6
          0 00005A  604C                                 SOR,R6   12
          0 00005B  EF47 000A                            STR,R6   SEGNO,AUTO
          0 00005D  0F81 0007                            B        s:4762,PREL

      608     4760    1      ELSE SEGNO = BIG$.U15 + 15;

   4760   0 00005F  E806                                 LDR,R6   ,B6
          0 000060  E570 7FFF                            AND,R6   32767,IMO
          0 000062  6E0F                                 ADV,R6   15
          0 000063  EF47 000A                            STR,R6   SEGNO,AUTO

      609     4761
      610     4762    1      SEGDES = ADDR(G$UHJIT$->G$UHJIT.ASDT_MCL)->G$ASDT(SEGNO);

   4762   0 000065  DC80 0000 0000  xsym                 LDB,B5   G$UHJIT$
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:102  
          0 000068  B856                                 LDR,R3   R6
          0 000069  3E1F                                 ADV,R3   31
          0 00006A  8CB5                                 LDI      ,B5,R3
          0 00006B  CCC7 0006                            LDB,B4   @SEGDES,AUTO
          0 00006D  8D04                                 SDI      ,B4

      611     4763    1      RETURN;

   4763   0 00006E  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
      612     4764
      613     4765    1   END;
      614     4766        %EOD;

PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:103  
--  Include file information  --

   G_HJIT_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$MAP.
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:104  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @PTR$                      6-0-0/w PTR         r     1 @SEGDES
    *0-0-0/w STRC(32)    r     1 BIG$                      *0-0-0/w STRC(32)    r     1 LITTLE$
     B-0-0/b BIT         r     1 NONWORD_ALIGNED            8-0-0/w UBIN(32)    r     1 OFFSET
    *0-0-0/w UBIN(32)    r     1 PTR$                      *0-0-0/w PTR         r     1 PTR$$
    *0-0-0/w BIT (32)    r     1 SEGDES                     A-0-0/w UBIN(16)    r     1 SEGNO

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$ASDT_MCL$                0-0-0/w PTR         r     1 G$UHJIT$
     0-0-0/w PTR         r     1 G$WINDOW1$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(32)    r     1 G$ASDT(0:30)               0-0-0/w STRC(992)   r     1 G$ASDT_MCL
     0-0-0/w STRC(6480)  r     1 G$UHJIT


   Procedure KNA$MAP requires 113 words for executable code.
   Procedure KNA$MAP requires 16 words of local(AUTO) storage.
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:105  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:106  
          MINI XREF LISTING

BIG$.CFLG
      4721**DCL      4735>>IF       4746<<ASSIGN
BIG$.U15
      4722**DCL      4731>>IF       4758>>IF       4760>>ASSIGN
BIG$.U16
      4723**DCL      4733>>ASSIGN
G$ASDT
      4689**DCL      4762>>ASSIGN
G$ASDT_MCL.WINDOW1
      4545**DCL      4739<<ASSIGN   4740<>CALL
G$ASDT_MCL$
      1012**DCL      3996--IMP-PTR  4739>>ASSIGN   4740>>CALL
G$UHJIT.ASDT_MCL
      1740**DCL      4762--ASSIGN
G$UHJIT.ISA_USR
      2456**DCL      2751--REDEF
G$UHJIT.ISA_USR.P$$
      2531**DCL      2531--REDEF
G$UHJIT.TSA_CP.ISA.P$$
      3738**DCL      3738--REDEF
G$UHJIT.TSA_CP.P$$
      3609**DCL      3609--REDEF    3610--REDEF
G$UHJIT.TSA_DB.ISA.P$$
      3350**DCL      3350--REDEF
G$UHJIT.TSA_DB.P$$
      3221**DCL      3221--REDEF    3222--REDEF
G$UHJIT.TSA_RTT.P$$
      3984**DCL      3984--REDEF    3985--REDEF
G$UHJIT.TSA_USR.ISA.P$$
      2940**DCL      2940--REDEF
G$UHJIT.TSA_USR.P$$
      2811**DCL      2811--REDEF    2812--REDEF
PL6.E3A0      #003=KNA$MAP File=KNA$SUBS.:E05TSI                                 WED 07/30/97 00:59 Page:107  
G$UHJIT$
      1013**DCL      1033--IMP-PTR  4762>>ASSIGN
G$WINDOW1$
      1014**DCL      4740<>CALL     4744>>ASSIGN
GHH$ASD
      4730**DCL-ENT  4740--CALL
LITTLE$.U12
      4719**DCL      4732>>ASSIGN
LITTLE$.U4
      4718**DCL      4759>>ASSIGN
NONWORD_ALIGNED
      4728**DCL      4736<<ASSIGN   4737<<ASSIGN   4745>>IF
OFFSET
      4726**DCL      4732<<ASSIGN   4733<<ASSIGN   4744>>ASSIGN
PTR$
      4714**DCL        30--PROC     4715--REDEF    4716--REDEF    4720--REDEF    4756--ENTRY
PTR$$
      4715**DCL      4744<<ASSIGN
SEGDES
      4724**DCL        30--PROC     4739>>ASSIGN   4756--ENTRY    4762<<ASSIGN
SEGNO
      4727**DCL      4759<<ASSIGN   4760<<ASSIGN   4762>>ASSIGN

PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:108  
      615        1        /*T***********************************************************/
      616        2        /*T*                                                         */
      617        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      618        4        /*T*                                                         */
      619        5        /*T***********************************************************/
      620        6        /*F*
      621        7           NAME: KNA$REG_USER
      622        8           PURPOSE:
      623        9             To set some status in the APE context block before REGging the user.
      624       10             the user.
      625       11        */
      626       12        /*D*
      627       13           NAME: KNA$REG_USER
      628       14           CALL:
      629       15                  CALL KNA$REG_USER (EVENT,SSN$);
      630       16           PARAMETERS:
      631       17                  EVENT - Code describing the event that we are REGging for
      632       18                  SSN$  - Pointer to the concerned APE context
      633       19           DESCRIPTION:
      634       20                  Save EVENT as the reason for REGging and then call GHS$REG
      635       21             with the same EVENT.  Set status to say we are REGged.
      636       22        */
      637       23        %EJECT;
PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:109  
      638       24        KNA$REG_USER: PROC (EVENT,SSN$) ALTRET;
      639       25        %INCLUDE GU_LCP6_M;
      640      953        %INCLUDE KNA_MACRO_M;
      641     1029        %INCLUDE GH_GATE_M;
      642     1070        /*     Parameters */
      643     1071    1   DCL EVENT UBIN WORD;
      644     1072    1   DCL SSN$ PTR;
      645     1073        /*     Based storage */
      646     1074        %KNA$SSN (STCLASS="BASED(SSN$)");
      647     1157    1   DCL GHS$REG ENTRY(2) ALTRET;
      648     1158        /* Symref */
      649     1159        %GATE (FPTN=KNA_LNKSSN,STCLASS=SYMREF);
      650     1178
      651     1179    1      KNA$SSN.FLAGS.REGGED = '1'B;
      652     1180    1      KNA$SSN.REGRSN = EVENT;
      653     1181    1      CALL GHS$REG(EVENT,KNA$SSN.LDCT$)
      654     1182    2      WHENALTRETURN DO;
      655     1183                %LOCK (G=KNA_LNKSSN);
      656     1190    2           KNA$SSN.FLAGS.REGGED = '0'B;
      657     1191    2           ALTRETURN;
      658     1192    2           END;
      659     1193           %LOCK (G=KNA_LNKSSN);
      660     1200    1      KNA$SSN.FLAGS.REGGED = '0'B;
      661     1201    1   END KNA$REG_USER;
      662     1202        %EOD;

PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:110  
--  Include file information  --

   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   KNA_MACRO_M.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$REG_USER.

   Procedure KNA$REG_USER requires 67 words for executable code.
   Procedure KNA$REG_USER requires 12 words of local(AUTO) storage.

PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:111  

 Object Unit name= KNA$REG_USER                               File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 01:00:42.72 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none    67     43  KNA$REG_USER
    1  RoData even  none     2      2  KNA$REG_USER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  KNA$REG_USER

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 GHS$REG
 yes     yes           Std       1 GHH$LOCK
                       nStd      0 X6A_AUTO_2
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KNA_LNKSSN                       r    G$ROS$
PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:112  


      615        1        /*T***********************************************************/
      616        2        /*T*                                                         */
      617        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      618        4        /*T*                                                         */
      619        5        /*T***********************************************************/
      620        6        /*F*
      621        7           NAME: KNA$REG_USER
      622        8           PURPOSE:
      623        9             To set some status in the APE context block before REGging the user.
      624       10             the user.
      625       11        */
      626       12        /*D*
      627       13           NAME: KNA$REG_USER
      628       14           CALL:
      629       15                  CALL KNA$REG_USER (EVENT,SSN$);
      630       16           PARAMETERS:
      631       17                  EVENT - Code describing the event that we are REGging for
      632       18                  SSN$  - Pointer to the concerned APE context
      633       19           DESCRIPTION:
      634       20                  Save EVENT as the reason for REGging and then call GHS$REG
      635       21             with the same EVENT.  Set status to say we are REGged.
      636       22        */
      637       23        %EJECT;
PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:113  
      638       24        KNA$REG_USER: PROC (EVENT,SSN$) ALTRET;

     24   0 000000  D380 0000 0000  xent KNA$REG_USER    LNJ,B5   X6A_AUTO_2
          0 000003       000C 0002                       DC       12,2

      639       25        %INCLUDE GU_LCP6_M;
      640      953        %INCLUDE KNA_MACRO_M;
      641     1029        %INCLUDE GH_GATE_M;
      642     1070        /*     Parameters */
      643     1071    1   DCL EVENT UBIN WORD;
      644     1072    1   DCL SSN$ PTR;
      645     1073        /*     Based storage */
      646     1074        %KNA$SSN (STCLASS="BASED(SSN$)");
      647     1157    1   DCL GHS$REG ENTRY(2) ALTRET;
      648     1158        /* Symref */
      649     1159        %GATE (FPTN=KNA_LNKSSN,STCLASS=SYMREF);
      650     1178
      651     1179    1      KNA$SSN.FLAGS.REGGED = '1'B;

   1179   0 000005  ECC7 0006                            LDB,B6   @SSN$,AUTO
          0 000007  DC86                                 LDB,B5   ,B6
          0 000008  8905                                 LBT,'8000'X       ,B5
          0 000009       8000

      652     1180    1      KNA$SSN.REGRSN = EVENT;

   1180   0 00000A  DC86                                 LDB,B5   ,B6
          0 00000B  CCC7 0004                            LDB,B4   @EVENT,AUTO
          0 00000D  E804                                 LDR,R6   ,B4
          0 00000E  EF45 0012                            STR,R6   18,B5

      653     1181    1      CALL GHS$REG(EVENT,KNA$SSN.LDCT$)

   1181   0 000010  DC86                                 LDB,B5   ,B6
          0 000011  BBC5 0004                            LAB,B3   4,B5
          0 000013  BFC7 000A                            STB,B3   @SSN$+4,AUTO
          0 000015  CFC7 0008                            STB,B4   @SSN$+2,AUTO
PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:114  
          0 000017  BBC7 0008                            LAB,B3   @SSN$+2,AUTO
          0 000019  CBF0 0200                            LAB,B4   512,IMO
          0 00001B  E380 0000 0000  xent                 LNJ,B6   GHS$REG
          0 00001E       0003                            DC       s:1188,PREL
          0 00001F  0F81 0012                            B        s:1198,PREL

      654     1182    2      WHENALTRETURN DO;

      655     1183                %LOCK (G=KNA_LNKSSN);

   1188   0 000021  BB80 0000 0000  01                   LAB,B3   0
          0 000024  CBF0 0100                            LAB,B4   256,IMO
          0 000026  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          0 000029       0001                            DC       s:1190,PREL

      656     1190    2           KNA$SSN.FLAGS.REGGED = '0'B;

   1190   0 00002A  ECC7 0006                            LDB,B6   @SSN$,AUTO
          0 00002C  DC86                                 LDB,B5   ,B6
          0 00002D  8805                                 LBF,'8000'X       ,B5
          0 00002E       8000

      657     1191    2           ALTRETURN;

   1191   0 00002F  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      658     1192    2           END;
      659     1193           %LOCK (G=KNA_LNKSSN);

   1198   0 000032  BB80 0000 0000  01                   LAB,B3   0
          0 000035  CBF0 0100                            LAB,B4   256,IMO
          0 000037  E380 0000 0000  xent                 LNJ,B6   GHH$LOCK
          0 00003A       0001                            DC       s:1200,PREL

      660     1200    1      KNA$SSN.FLAGS.REGGED = '0'B;

   1200   0 00003B  ECC7 0006                            LDB,B6   @SSN$,AUTO
PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:115  
          0 00003D  DC86                                 LDB,B5   ,B6
          0 00003E  8805                                 LBF,'8000'X       ,B5
          0 00003F       8000

      661     1201    1   END KNA$REG_USER;

   1201   0 000040  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
      662     1202        %EOD;

PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:116  
--  Include file information  --

   GH_GATE_M.:E05TOU  cannot be made into a system file and is referenced.
   KNA_MACRO_M.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$REG_USER.
PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:117  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @EVENT                     6-0-0/w PTR         r     1 @SSN$
    *0-0-0/w UBIN(16)    r     1 EVENT                     *0-0-0/w PTR         r     1 SSN$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(48)    r     1 KNA_LNKSSN

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(400)   r     1 KNA$SSN


   Procedure KNA$REG_USER requires 67 words for executable code.
   Procedure KNA$REG_USER requires 12 words of local(AUTO) storage.
PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:118  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=KNA$REG_USER File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:00 Page:119  
          MINI XREF LISTING

EVENT
      1071**DCL        24--PROC     1180>>ASSIGN   1181<>CALL
GHH$LOCK
      1069**DCL-ENT  1188--CALL     1198--CALL
GHS$REG
      1157**DCL-ENT  1181--CALL
KNA$SSN.FLAGS.REGGED
      1091**DCL      1179<<ASSIGN   1190<<ASSIGN   1200<<ASSIGN
KNA$SSN.IOPRD$
      1149**DCL      1149--REDEF
KNA$SSN.LDCT$
      1146**DCL      1181<>CALL
KNA$SSN.REGRSN
      1154**DCL      1180<<ASSIGN
KNA$SSN.RLCID.NODE#
      1153**DCL      1153--REDEF
KNA_LNKSSN
      1171**DCL      1188<>CALL     1198<>CALL
SSN$
      1072**DCL        24--PROC     1087--IMP-PTR  1179>>ASSIGN   1180>>ASSIGN   1181>>CALL     1190>>ASSIGN
      1200>>ASSIGN

PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:120  
      663        1        /*T***********************************************************/
      664        2        /*T*                                                         */
      665        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      666        4        /*T*                                                         */
      667        5        /*T***********************************************************/
      668        6
      669        7        KNA$DECODE_VDO: PROC (K$RWPARM) ALTRET;
      670        8
      671        9        /*F*
      672       10             NAME: KNA$DECODE_VDO
      673       11             PURPOSE:
      674       12                  This routine decodes a read response and merges the information
      675       13                  into K$RWPARM.
      676       14             DESCRIPTION:
      677       15                  None.
      678       16        */
      679       17
      680       18        %INCLUDE G_LCP6_E;
      681      276        %INCLUDE KV$VDO;
      682     1291        %INCLUDE K$RWPARM;
      683     1677        %INCLUDE GU_LCP6_M;
      684     2605        %K$RWPARM (NAME=K$RWPARM);
      685     2921        %KV_VDO_E;
      686     2957        %KV_VDOVLP_E;
      687     2971        %KV_VDOMRKTYP_E;
      688     2977        %KV_DATMOD_E;
      689     2983        %KV_DATCTRCHRTYP_E;
      690     2989
      691     2990        /* Table size of all vdos */
      692     2991        %KV_VDOBYTSIZ (NAME=KNA_VDOBYTSIZ,STCLASS=SYMREF);
      693     3011        %KV$VDO (STCLASS="BASED(K$RWPARM.UHDR$)");
      694     3038        %KV$VDO_DAT (STCLASS="BASED(K$RWPARM.UHDR$)");
      695     3083        %KV$VDOVLP;
      696     3119        %KV$VDOVLP_ACTPOS (STCLASS="BASED(MSG$)");
      697     3170        %KV$VDOVLP_CG_MSGID (STCLASS="BASED(MSG$)");
      698     3222        %KV$VDOVLP_CG_MSGTYP (STCLASS="BASED(MSG$)");
      699     3274        %KV$VDOVLP_CG_STA (STCLASS="BASED(MSG$)");
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:121  
      700     3325        %KV$VDOVLP_DAT1 (STCLASS="BASED(MSG$)",LAST=",");
      701     3375    1         2 MSG CHAR(K$RWPARM.MSGSZ);
      702     3376        %KV$VDOVLP_DAT2 (STCLASS="BASED(MSG$)",LAST=",");
      703     3426    1         2 MSG CHAR(K$RWPARM.MSGSZ);
      704     3427        %KV$VDOVLP_ERR (STCLASS="BASED(MSG$)");
      705     3524        %KV$VDOVLP_FLDID (STCLASS="BASED(MSG$)");
      706     3575        %KV$VDOVLP_KEY (STCLASS="BASED(MSG$)",LAST=",");
      707     3625    1         2 KEY CHAR(KV$VDOVLP_KEY.BYTSIZ);
      708     3626        %KV$VDOVLP_MRK (STCLASS="BASED(MSG$)");
      709     3679
      710     3680
      711     3681    1   DCL MSG$ PTR;
      712     3682    1   DCL TEMPU1 UBIN;
      713     3683    1   DCL TEMPS1 REDEF TEMPU1 SBIN;
      714     3684    1   DCL 1 TEMPU1S REDEF TEMPU1,
      715     3685    1         2 * BIT(15) UNAL ,
      716     3686    1         2 LOBIT BIT(1) UNAL;
      717     3687
      718     3688    1   DCL B$HWORD UBIN(16) BASED CALIGNED;
      719     3689    1   DCL TMP_SZ UBIN;
      720     3690        %EJECT;
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:122  
      721     3691
      722     3692    1      TMP_SZ = KNA_VDOBYTSIZ(KV$VDO_DAT.FNC);
      723     3693    1      IF KV$VDO.FNC = 0 OR KV$VDO.FNC > %KV_VDO_FNC_HI OR K$RWPARM.UHDRSZ < TMP_SZ
      724     3694    1      THEN
      725     3695    1           GOTO L1 ;
      726     3696
      727     3697    1      K$RWPARM.STR = KV$VDO.STR;
      728     3698
      729     3699        /*
      730     3700                DO CASE (KV$VDO.FNC);
      731     3701                 CASE (%KV_VDO_FNC_DAT);
      732     3702        */
      733     3703    1      IF KV$VDO.FNC = %KV_VDO_FNC_DAT
      734     3704    2      THEN DO;
      735     3705
      736     3706    3           IF K$RWPARM.READMLT THEN DO;
      737     3707    3                K$RWPARM.MSGSZ = K$RWPARM.UHDRSZ;
      738     3708    3                K$RWPARM.MSG$ = K$RWPARM.UHDR$;
      739     3709    3                RETURN;
      740     3710    3                END;
      741     3711    2           IF KV$VDO_DAT.DATCTRCHRTYP = %KV_DATCTRCHRTYP_ACT
      742     3712    2           THEN K$RWPARM.DVE.EOMCHAR = KV$VDO_DAT.DATCTRCHR;
      743     3713    3           ELSE DO;
      744     3714    3                TEMPU1 = KV$VDO_DAT.DATCTRCHRTYP ;
      745     3715    3                K$RWPARM.EOM_EOR = '1'B;
      746     3716    3                IF TEMPU1 = %KV_DATCTRCHRTYP_VFC
      747     3717    4                THEN DO;
      748     3718    4                     K$RWPARM.DVE.DVBYTE.VFC = '1'B;
      749     3719    4                     K$RWPARM.DVE.VFC = KV$VDO_DAT.DATCTRCHR;
      750     3720    4                     END;
      751     3721    3                END;
      752     3722    2           IF KV$VDO_DAT.DATMOD = %KV_DATMOD_TRN
      753     3723    2           THEN K$RWPARM.DVE.DVBYTE.TRANS = '1'B;
      754     3724
      755     3725    2           END;                            /* End cases                          */
      756     3726
      757     3727    1      TEMPU1 = 0;
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:123  
      758     3728    1      IF KV$VDO_DAT.VLP
      759     3729    2      THEN DO;
      760     3730
      761     3731    2   L2:
      762     3732    2           TEMPU1 = 0;
      763     3733    2           IF (TMP_SZ < K$RWPARM.UHDRSZ)
      764     3734    3           THEN DO;
      765     3735
      766     3736
      767     3737    3                MSG$ = PINCRW(K$RWPARM.UHDR$,TMP_SZ/2) ;
      768     3738
      769     3739    4                DO CASE (MSG$->KV$VDOVLP.TYP);
      770     3740
      771     3741    4                 CASE (%KV_VDOVLP_TYP_ACTPOS);
      772     3742    4                   K$RWPARM.ACTPOS = KV$VDOVLP_ACTPOS.ACTPOS;
      773     3743    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_ACTPOS);
      774     3744    4                   IF MSG$->KV$VDOVLP.LST = '0'B
      775     3745    4                   THEN GOTO L2;
      776     3746    4                   GOTO L4;
      777     3747
      778     3748    4                 CASE (%KV_VDOVLP_TYP_CG_MSGID);
      779     3749    4                   K$RWPARM.MSGIDXT = KV$VDOVLP_CG_MSGID.CG_MSGIDXT;
      780     3750    4                   K$RWPARM.MSGID=KV$VDOVLP_CG_MSGID.CG_MSGID;
      781     3751    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_CG_MSGID) ;
      782     3752    4                   IF MSG$->KV$VDOVLP.LST = '0'B
      783     3753    4                   THEN GOTO L2;
      784     3754    4                   GOTO L4;
      785     3755
      786     3756    4                 CASE (%KV_VDOVLP_TYP_CG_MSGTYP);
      787     3757    4                   K$RWPARM.MSGTYP = KV$VDOVLP_CG_MSGTYP.CG_MSGTYP;
      788     3758    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_CG_MSGTYP) ;
      789     3759    4                   IF MSG$->KV$VDOVLP.LST = '0'B
      790     3760    4                   THEN GOTO L2;
      791     3761    4                   GOTO L4;
      792     3762
      793     3763    4                 CASE (%KV_VDOVLP_TYP_CG_STA);
      794     3764    4                   K$RWPARM.STATION = KV$VDOVLP_CG_STA.CG_STA;
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:124  
      795     3765    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_CG_STA) ;
      796     3766    4                   IF MSG$->KV$VDOVLP.LST = '0'B
      797     3767    4                   THEN GOTO L2;
      798     3768    4                   GOTO L4;
      799     3769
      800     3770    4                 CASE (%KV_VDOVLP_TYP_DAT1);
      801     3771    4                   K$RWPARM.MSG$ = ADDR(KV$VDOVLP_DAT1.MSG);
      802     3772    4                   K$RWPARM.MSGSZ = KV$VDOVLP_DAT1.BYTSIZ;
      803     3773    4                   TEMPU1 = LENGTHC(KV$VDOVLP_DAT1) ;
      804     3774
      805     3775    4                 CASE (%KV_VDOVLP_TYP_DAT2);
      806     3776    4                   K$RWPARM.MSGSZ = KV$VDOVLP_DAT2.BYTSIZ;
      807     3777    4                   K$RWPARM.MSG$ = ADDR(KV$VDOVLP_DAT2.MSG);
      808     3778    4                   TEMPU1 = LENGTHC(KV$VDOVLP_DAT2) ;
      809     3779
      810     3780    4                 CASE (%KV_VDOVLP_TYP_ERR);
      811     3781    4                   K$RWPARM.MSG_ERRCODE=KV$VDOVLP_ERR.ERRCODE;
      812     3782    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_ERR) ;
      813     3783    4                   IF MSG$->KV$VDOVLP.LST = '0'B
      814     3784    4                   THEN GOTO L2;
      815     3785    4                   GOTO L4;
      816     3786
      817     3787
      818     3788    4                 CASE (%KV_VDOVLP_TYP_FLDID);
      819     3789    4                   K$RWPARM.FLDID = KV$VDOVLP_FLDID.FLDID;
      820     3790    4                   IF K$RWPARM.KEYTYPE = %G_KEYTYPE_FLDID#
      821     3791    4                   THEN
      822     3792    5                   DO ;
      823     3793    5                        K$RWPARM.KEYSZ = KV$VDOVLP_FLDID.BYTSIZ;
      824     3794    5                        K$RWPARM.KEY$ = ADDR(KV$VDOVLP_FLDID.FLDID);
      825     3795    5                        END;
      826     3796    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_FLDID) ;
      827     3797    4                   IF MSG$->KV$VDOVLP.LST = '0'B
      828     3798    4                   THEN GOTO L2;
      829     3799    4                   GOTO L4;
      830     3800
      831     3801
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:125  
      832     3802    4                 CASE (%KV_VDOVLP_TYP_KEY);
      833     3803    4                   IF K$RWPARM.KEYTYPE = %G_KEYTYPE_COORD#
      834     3804    4                   THEN
      835     3805    5                   DO ;
      836     3806    5                        K$RWPARM.KEYSZ = KV$VDOVLP_KEY.BYTSIZ;
      837     3807    5                        K$RWPARM.KEY$ = ADDR(KV$VDOVLP_KEY.KEY);
      838     3808    5                        END;
      839     3809    4                   TEMPU1 = LENGTHC(KV$VDOVLP_KEY) ;
      840     3810
      841     3811    4                 CASE (%KV_VDOVLP_TYP_MRK);
      842     3812    4                   K$RWPARM.MRKTYP = KV$VDOVLP_MRK.MRKTYP;
      843     3813    4                   IF K$RWPARM.MRKTYP = %KV_VDOMRKTYP_LSTRCRID
      844     3814    4                   THEN
      845     3815    5                   DO ;
      846     3816    5                        K$RWPARM.BLKREC.BLKU#=ADDR(KV$VDOVLP_MRK.ID)->B$HWORD;
      847     3817    5                        K$RWPARM.BLKREC.RECU#=PINCRC(ADDR(KV$VDOVLP_MRK.ID),2)->B$HWORD
              3817                                 ;
      848     3818    5                        END;
      849     3819    4                   ELSE
      850     3820    4                        K$RWPARM.MARKER = KV$VDOVLP_MRK.ID;
      851     3821    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_MRK) ;
      852     3822    4                   IF MSG$->KV$VDOVLP.LST = '0'B
      853     3823    4                   THEN GOTO L2;
      854     3824    4                   GOTO L4;
      855     3825
      856     3826    4                 CASE (ELSE);
      857     3827    4                   GOTO L1 ;
      858     3828
      859     3829    4                   END;                    /* End cases                          */
      860     3830
      861     3831    3                IF TEMPU1S.LOBIT
      862     3832    3                THEN TMP_SZ = TMP_SZ + 1;
      863     3833
      864     3834    3                TMP_SZ = TMP_SZ + TEMPU1 ;
      865     3835
      866     3836    3                IF MSG$->KV$VDOVLP.LST = '0'B
      867     3837    3                THEN GOTO L2;
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:126  
      868     3838
      869     3839    3                END;
      870     3840
      871     3841    2           END ;
      872     3842
      873     3843
      874     3844    1   L4:
      875     3845    1      IF TMP_SZ = K$RWPARM.UHDRSZ OR TMP_SZ = K$RWPARM.UHDRSZ + MOD(TEMPU1,2)
      876     3846    1      THEN RETURN;
      877     3847
      878     3848    1   L1:
      879     3849    1      CALL PROTOCOL_ERR;
      880     3850    1      ALTRETURN;
      881     3851
      882     3852
      883     3853    1   PROTOCOL_ERR: PROC;
      884     3854
      885     3855                  /*N* Error log */
      886     3856    2      RETURN;
      887     3857
      888     3858
      889     3859    2   END PROTOCOL_ERR;
      890     3860
      891     3861
      892     3862    1   END KNA$DECODE_VDO;
      893     3863        %EOD;

PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:127  
--  Include file information  --

   GU_LCP6_M.:E05TOU  is referenced.
   K$RWPARM.:E05TOU  is referenced.
   KV$VDO.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$DECODE_VDO.

   Procedure KNA$DECODE_VDO requires 382 words for executable code.
   Procedure KNA$DECODE_VDO requires 14 words of local(AUTO) storage.

PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:128  

 Object Unit name= KNA$DECODE_VDO                             File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 01:00:58.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none   382    17E  KNA$DECODE_VDO

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        1  KNA$DECODE_VDO

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_1
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KNA_VDOBYTSIZ                    r    G$ROS$
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:129  


      663        1        /*T***********************************************************/
      664        2        /*T*                                                         */
      665        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      666        4        /*T*                                                         */
      667        5        /*T***********************************************************/
      668        6
      669        7        KNA$DECODE_VDO: PROC (K$RWPARM) ALTRET;

      7   0 000000  D380 0000 0000  xent KNA$DECODE_VDO  LNJ,B5   X6A_AUTO_1
          0 000003       000E 0001                       DC       14,1

      670        8
      671        9        /*F*
      672       10             NAME: KNA$DECODE_VDO
      673       11             PURPOSE:
      674       12                  This routine decodes a read response and merges the information
      675       13                  into K$RWPARM.
      676       14             DESCRIPTION:
      677       15                  None.
      678       16        */
      679       17
      680       18        %INCLUDE G_LCP6_E;
      681      276        %INCLUDE KV$VDO;
      682     1291        %INCLUDE K$RWPARM;
      683     1677        %INCLUDE GU_LCP6_M;
      684     2605        %K$RWPARM (NAME=K$RWPARM);
      685     2921        %KV_VDO_E;
      686     2957        %KV_VDOVLP_E;
      687     2971        %KV_VDOMRKTYP_E;
      688     2977        %KV_DATMOD_E;
      689     2983        %KV_DATCTRCHRTYP_E;
      690     2989
      691     2990        /* Table size of all vdos */
      692     2991        %KV_VDOBYTSIZ (NAME=KNA_VDOBYTSIZ,STCLASS=SYMREF);
      693     3011        %KV$VDO (STCLASS="BASED(K$RWPARM.UHDR$)");
      694     3038        %KV$VDO_DAT (STCLASS="BASED(K$RWPARM.UHDR$)");
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:130  
      695     3083        %KV$VDOVLP;
      696     3119        %KV$VDOVLP_ACTPOS (STCLASS="BASED(MSG$)");
      697     3170        %KV$VDOVLP_CG_MSGID (STCLASS="BASED(MSG$)");
      698     3222        %KV$VDOVLP_CG_MSGTYP (STCLASS="BASED(MSG$)");
      699     3274        %KV$VDOVLP_CG_STA (STCLASS="BASED(MSG$)");
      700     3325        %KV$VDOVLP_DAT1 (STCLASS="BASED(MSG$)",LAST=",");
      701     3375    1         2 MSG CHAR(K$RWPARM.MSGSZ);
      702     3376        %KV$VDOVLP_DAT2 (STCLASS="BASED(MSG$)",LAST=",");
      703     3426    1         2 MSG CHAR(K$RWPARM.MSGSZ);
      704     3427        %KV$VDOVLP_ERR (STCLASS="BASED(MSG$)");
      705     3524        %KV$VDOVLP_FLDID (STCLASS="BASED(MSG$)");
      706     3575        %KV$VDOVLP_KEY (STCLASS="BASED(MSG$)",LAST=",");
      707     3625    1         2 KEY CHAR(KV$VDOVLP_KEY.BYTSIZ);
      708     3626        %KV$VDOVLP_MRK (STCLASS="BASED(MSG$)");
      709     3679
      710     3680
      711     3681    1   DCL MSG$ PTR;
      712     3682    1   DCL TEMPU1 UBIN;
      713     3683    1   DCL TEMPS1 REDEF TEMPU1 SBIN;
      714     3684    1   DCL 1 TEMPU1S REDEF TEMPU1,
      715     3685    1         2 * BIT(15) UNAL ,
      716     3686    1         2 LOBIT BIT(1) UNAL;
      717     3687
      718     3688    1   DCL B$HWORD UBIN(16) BASED CALIGNED;
      719     3689    1   DCL TMP_SZ UBIN;
      720     3690        %EJECT;
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:131  
      721     3691
      722     3692    1      TMP_SZ = KNA_VDOBYTSIZ(KV$VDO_DAT.FNC);

   3692   0 000005  ECC7 0004                            LDB,B6   @K$RWPARM,AUTO
          0 000007  DCC6 0017                            LDB,B5   23,B6
          0 000009  B285                                 LLH,R3   ,B5
          0 00000A  E2B0 0000 0000  xsym                 LLH,R6   KNA_VDOBYTSIZ,R3
          0 00000D  EF47 0009                            STR,R6   TMP_SZ,AUTO

      723     3693    1      IF KV$VDO.FNC = 0 OR KV$VDO.FNC > %KV_VDO_FNC_HI OR K$RWPARM.UHDRSZ < TMP_SZ

   3693   0 00000F  3901 0162                            BEZ,R3   s:3849,PREL
          0 000011  3D22                                 CMV,R3   34
          0 000012  0301 015F                            BG       s:3849,PREL
          0 000014  E946 0019                            CMR,R6   25,B6
          0 000016  0301 015B                            BG       s:3849,PREL

      724     3694    1      THEN
      725     3695    1           GOTO L1 ;
      726     3696
      727     3697    1      K$RWPARM.STR = KV$VDO.STR;

   3697   0 000018  D805                                 LDR,R5   ,B5
          0 000019  D570 007F                            AND,R5   127,IMO
          0 00001B  DAC6 001D                            SRM,R5,'00FF'X    29,B6
          0 00001D       00FF

      728     3698
      729     3699        /*
      730     3700                DO CASE (KV$VDO.FNC);
      731     3701                 CASE (%KV_VDO_FNC_DAT);
      732     3702        */
      733     3703    1      IF KV$VDO.FNC = %KV_VDO_FNC_DAT

   3703   0 00001E  D285                                 LLH,R5   ,B5
          0 00001F  5D05                                 CMV,R5   5
          0 000020  0981 0038                            BNE      s:3727,PREL
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:132  

      734     3704    2      THEN DO;

      735     3705
      736     3706    3           IF K$RWPARM.READMLT THEN DO;

   3706   0 000022  82C6 0010                            LB,'4000'X        16,B6
   3706   0 000024       4000
          0 000025  0581 0009                            BBF      s:3711,PREL

      737     3707    3                K$RWPARM.MSGSZ = K$RWPARM.UHDRSZ;

   3707   0 000027  C846 0019                            LDR,R4   25,B6
          0 000029  CF46 0002                            STR,R4   2,B6

      738     3708    3                K$RWPARM.MSG$ = K$RWPARM.UHDR$;

   3708   0 00002B  DF86                                 STB,B5   ,B6

      739     3709    3                RETURN;

   3709   0 00002C  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      740     3710    3                END;
      741     3711    2           IF KV$VDO_DAT.DATCTRCHRTYP = %KV_DATCTRCHRTYP_ACT

   3711   0 00002F  C845 0001                            LDR,R4   1,B5
          0 000031  404A                                 SOR,R4   10
          0 000032  C570 0003                            AND,R4   3,IMO
          0 000034  4D01                                 CMV,R4   1
          0 000035  0981 0008                            BNE      s:3714,PREL

      742     3712    2           THEN K$RWPARM.DVE.EOMCHAR = KV$VDO_DAT.DATCTRCHR;

   3712   0 000037  B845 0001                            LDR,R3   1,B5
          0 000039  BAC6 000F                            SRM,R3,'00FF'X    15,B6
          0 00003B       00FF
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:133  
          0 00003C  0F81 0011                            B        s:3722,PREL

      743     3713    3           ELSE DO;

      744     3714    3                TEMPU1 = KV$VDO_DAT.DATCTRCHRTYP ;

   3714   0 00003E  CF47 0008                            STR,R4   TEMPU1,AUTO

      745     3715    3                K$RWPARM.EOM_EOR = '1'B;

   3715   0 000040  8946 0010                            LBT,'2000'X       16,B6
   3715   0 000042       2000

      746     3716    3                IF TEMPU1 = %KV_DATCTRCHRTYP_VFC

   3716   0 000043  4D02                                 CMV,R4   2
          0 000044  0981 0009                            BNE      s:3722,PREL

      747     3717    4                THEN DO;

      748     3718    4                     K$RWPARM.DVE.DVBYTE.VFC = '1'B;

   3718   0 000046  8946 000F                            LBT,'4000'X       15,B6
   3718   0 000048       4000

      749     3719    4                     K$RWPARM.DVE.VFC = KV$VDO_DAT.DATCTRCHR;

   3719   0 000049  D845 0001                            LDR,R5   1,B5
          0 00004B  DAC6 000F                            SRM,R5,'00FF'X    15,B6
          0 00004D       00FF

      750     3720    4                     END;

      751     3721    3                END;

      752     3722    2           IF KV$VDO_DAT.DATMOD = %KV_DATMOD_TRN

PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:134  
   3722   0 00004E  D845 0001                            LDR,R5   1,B5
          0 000050  5048                                 SOR,R5   8
          0 000051  D570 0003                            AND,R5   3,IMO
          0 000053  5D01                                 CMV,R5   1
          0 000054  0981 0004                            BNE      s:3727,PREL

      753     3723    2           THEN K$RWPARM.DVE.DVBYTE.TRANS = '1'B;

   3723   0 000056  8946 000F                            LBT,'1000'X       15,B6
   3723   0 000058       1000

      754     3724
      755     3725    2           END;                            /* End cases                          */

      756     3726
      757     3727    1      TEMPU1 = 0;

   3727   0 000059  8747 0008                            CL       TEMPU1,AUTO

      758     3728    1      IF KV$VDO_DAT.VLP

   3728   0 00005B  8285                                 LB,'0080'X        ,B5
   3728   0 00005C       0080
          0 00005D  0581 0100                            BBF      s:3841,PREL

      759     3729    2      THEN DO;

      760     3730
      761     3731    2   L2:
      762     3732    2           TEMPU1 = 0;

   3732   0 00005F  8747 0008            L2              CL       TEMPU1,AUTO

      763     3733    2           IF (TMP_SZ < K$RWPARM.UHDRSZ)

   3733   0 000061  ECC7 0004                            LDB,B6   @K$RWPARM,AUTO
          0 000063  E847 0009                            LDR,R6   TMP_SZ,AUTO
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:135  
          0 000065  E946 0019                            CMR,R6   25,B6
          0 000067  0281 00F6                            BGE      s:3841,PREL

      764     3734    3           THEN DO;

      765     3735
      766     3736
      767     3737    3                MSG$ = PINCRW(K$RWPARM.UHDR$,TMP_SZ/2) ;

   3737   0 000069  6041                                 SOR,R6   1
          0 00006A  DCC6 0017                            LDB,B5   23,B6
          0 00006C  DFC7 000C                            STB,B5   TMP_SZ+3,AUTO
          0 00006E  F856                                 LDR,R7   R6
          0 00006F  6C00                                 LDV,R6   0
          0 000070  8447 000C                            AID      TMP_SZ+3,AUTO
          0 000072  8D47 0006                            SDI      MSG$,AUTO

      768     3738
      769     3739    4                DO CASE (MSG$->KV$VDOVLP.TYP);

   3739   0 000074  CCC7 0006                            LDB,B4   MSG$,AUTO
          0 000076  B804                                 LDR,R3   ,B4
          0 000077  3048                                 SOR,R3   8
          0 000078  B570 007F                            AND,R3   127,IMO
          0 00007A  3D0C                                 CMV,R3   12
          0 00007B  0281 00D0                            BGE      s:3827,PREL
          0 00007D  A830 0000 0083  00                   LDR,R2   s:3739+15,R3
          0 000080  83A0 0000 008F  00                   JMP      s:3742,R2
          0 000083       00BD                            DC       s:3827,PREL
          0 000084       000D                            DC       s:3749,PREL
          0 000085       001F                            DC       s:3757,PREL
          0 000086       0031                            DC       s:3764,PREL
          0 000087       0043                            DC       s:3771,PREL
          0 000088       0050                            DC       s:3776,PREL
          0 000089       005C                            DC       s:3781,PREL
          0 00008A       006A                            DC       s:3789,PREL
          0 00008B       0085                            DC       s:3803,PREL
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:136  
          0 00008C       009A                            DC       s:3812,PREL
          0 00008D       00BD                            DC       s:3827,PREL
          0 00008E       0000                            DC       s:3742,PREL

      770     3740
      771     3741    4                 CASE (%KV_VDOVLP_TYP_ACTPOS);

      772     3742    4                   K$RWPARM.ACTPOS = KV$VDOVLP_ACTPOS.ACTPOS;

   3742   0 00008F  D844 0001                            LDR,R5   1,B4
          0 000091  DF46 0027                            STR,R5   39,B6

      773     3743    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_ACTPOS);

   3743   0 000093  C847 0009                            LDR,R4   TMP_SZ,AUTO
          0 000095  4E04                                 ADV,R4   4
          0 000096  CF47 0009                            STR,R4   TMP_SZ,AUTO

      774     3744    4                   IF MSG$->KV$VDOVLP.LST = '0'B

   3744   0 000098  8984                                 CMZ      ,B4
          0 000099  08C6                                 BAGE     s:3729,SPREL

      775     3745    4                   THEN GOTO L2;
      776     3746    4                   GOTO L4;

   3746   0 00009A  0F81 00C3                            B        s:3841,PREL

      777     3747
      778     3748    4                 CASE (%KV_VDOVLP_TYP_CG_MSGID);

      779     3749    4                   K$RWPARM.MSGIDXT = KV$VDOVLP_CG_MSGID.CG_MSGIDXT;

   3749   0 00009C  8CC4 0004                            LDI      4,B4
          0 00009E  8D46 0013                            SDI      19,B6

      780     3750    4                   K$RWPARM.MSGID=KV$VDOVLP_CG_MSGID.CG_MSGID;
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:137  

   3750   0 0000A0  8CC4 0002                            LDI      2,B4
          0 0000A2  8D46 0011                            SDI      17,B6

      781     3751    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_CG_MSGID) ;

   3751   0 0000A4  D847 0009                            LDR,R5   TMP_SZ,AUTO
          0 0000A6  5E0C                                 ADV,R5   12
          0 0000A7  DF47 0009                            STR,R5   TMP_SZ,AUTO

      782     3752    4                   IF MSG$->KV$VDOVLP.LST = '0'B

   3752   0 0000A9  8984                                 CMZ      ,B4
          0 0000AA  0881 FFB4                            BAGE     s:3729,PREL

      783     3753    4                   THEN GOTO L2;
      784     3754    4                   GOTO L4;

   3754   0 0000AC  0F81 00B1                            B        s:3841,PREL

      785     3755
      786     3756    4                 CASE (%KV_VDOVLP_TYP_CG_MSGTYP);

      787     3757    4                   K$RWPARM.MSGTYP = KV$VDOVLP_CG_MSGTYP.CG_MSGTYP;

   3757   0 0000AE  AB84                                 LAB,B2   ,B4
          0 0000AF  2C04                                 LDV,R2   4
          0 0000B0  6C08                                 LDV,R6   8
          0 0000B1  BB86                                 LAB,B3   ,B6
          0 0000B2  3C0E                                 LDV,R3   14
          0 0000B3  0008                                 MMM

      788     3758    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_CG_MSGTYP) ;

   3758   0 0000B4  E847 0009                            LDR,R6   TMP_SZ,AUTO
          0 0000B6  6E0C                                 ADV,R6   12
          0 0000B7  EF47 0009                            STR,R6   TMP_SZ,AUTO
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:138  

      789     3759    4                   IF MSG$->KV$VDOVLP.LST = '0'B

   3759   0 0000B9  DCC7 0006                            LDB,B5   MSG$,AUTO
          0 0000BB  8985                                 CMZ      ,B5
          0 0000BC  0881 FFA2                            BAGE     s:3729,PREL

      790     3760    4                   THEN GOTO L2;
      791     3761    4                   GOTO L4;

   3761   0 0000BE  0F81 009F                            B        s:3841,PREL

      792     3762
      793     3763    4                 CASE (%KV_VDOVLP_TYP_CG_STA);

      794     3764    4                   K$RWPARM.STATION = KV$VDOVLP_CG_STA.CG_STA;

   3764   0 0000C0  AB84                                 LAB,B2   ,B4
          0 0000C1  2C04                                 LDV,R2   4
          0 0000C2  6C08                                 LDV,R6   8
          0 0000C3  BB86                                 LAB,B3   ,B6
          0 0000C4  3C06                                 LDV,R3   6
          0 0000C5  0008                                 MMM

      795     3765    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_CG_STA) ;

   3765   0 0000C6  E847 0009                            LDR,R6   TMP_SZ,AUTO
          0 0000C8  6E0C                                 ADV,R6   12
          0 0000C9  EF47 0009                            STR,R6   TMP_SZ,AUTO

      796     3766    4                   IF MSG$->KV$VDOVLP.LST = '0'B

   3766   0 0000CB  DCC7 0006                            LDB,B5   MSG$,AUTO
          0 0000CD  8985                                 CMZ      ,B5
          0 0000CE  0881 FF90                            BAGE     s:3729,PREL

      797     3767    4                   THEN GOTO L2;
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:139  
      798     3768    4                   GOTO L4;

   3768   0 0000D0  0F81 008D                            B        s:3841,PREL

      799     3769
      800     3770    4                 CASE (%KV_VDOVLP_TYP_DAT1);

      801     3771    4                   K$RWPARM.MSG$ = ADDR(KV$VDOVLP_DAT1.MSG);

   3771   0 0000D2  BBC4 0001                            LAB,B3   1,B4
          0 0000D4  BF86                                 STB,B3   ,B6

      802     3772    4                   K$RWPARM.MSGSZ = KV$VDOVLP_DAT1.BYTSIZ;

   3772   0 0000D5  D804                                 LDR,R5   ,B4
          0 0000D6  D570 00FF                            AND,R5   255,IMO
          0 0000D8  DF46 0002                            STR,R5   2,B6

      803     3773    4                   TEMPU1 = LENGTHC(KV$VDOVLP_DAT1) ;

   3773   0 0000DA  5E02                                 ADV,R5   2
          0 0000DB  DF47 0008                            STR,R5   TEMPU1,AUTO
          0 0000DD  0F81 0070                            B        s:3831,PREL

      804     3774
      805     3775    4                 CASE (%KV_VDOVLP_TYP_DAT2);

      806     3776    4                   K$RWPARM.MSGSZ = KV$VDOVLP_DAT2.BYTSIZ;

   3776   0 0000DF  D844 0001                            LDR,R5   1,B4
          0 0000E1  DF46 0002                            STR,R5   2,B6

      807     3777    4                   K$RWPARM.MSG$ = ADDR(KV$VDOVLP_DAT2.MSG);

   3777   0 0000E3  BBC4 0002                            LAB,B3   2,B4
          0 0000E5  BF86                                 STB,B3   ,B6

PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:140  
      808     3778    4                   TEMPU1 = LENGTHC(KV$VDOVLP_DAT2) ;

   3778   0 0000E6  5E04                                 ADV,R5   4
          0 0000E7  DF47 0008                            STR,R5   TEMPU1,AUTO
          0 0000E9  0F81 0064                            B        s:3831,PREL

      809     3779
      810     3780    4                 CASE (%KV_VDOVLP_TYP_ERR);

      811     3781    4                   K$RWPARM.MSG_ERRCODE=KV$VDOVLP_ERR.ERRCODE;

   3781   0 0000EB  8CC4 0001                            LDI      1,B4
          0 0000ED  8D46 001A                            SDI      26,B6

      812     3782    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_ERR) ;

   3782   0 0000EF  D847 0009                            LDR,R5   TMP_SZ,AUTO
          0 0000F1  5E06                                 ADV,R5   6
          0 0000F2  DF47 0009                            STR,R5   TMP_SZ,AUTO

      813     3783    4                   IF MSG$->KV$VDOVLP.LST = '0'B

   3783   0 0000F4  8984                                 CMZ      ,B4
          0 0000F5  0881 FF69                            BAGE     s:3729,PREL

      814     3784    4                   THEN GOTO L2;
      815     3785    4                   GOTO L4;

   3785   0 0000F7  0F81 0066                            B        s:3841,PREL

      816     3786
      817     3787
      818     3788    4                 CASE (%KV_VDOVLP_TYP_FLDID);

      819     3789    4                   K$RWPARM.FLDID = KV$VDOVLP_FLDID.FLDID;

   3789   0 0000F9  D844 0001                            LDR,R5   1,B4
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:141  
          0 0000FB  DF46 0026                            STR,R5   38,B6

      820     3790    4                   IF K$RWPARM.KEYTYPE = %G_KEYTYPE_FLDID#

   3790   0 0000FD  C2C6 0028                            LLH,R4   40,B6
          0 0000FF  4D01                                 CMV,R4   1
          0 000100  0981 0009                            BNE      s:3796,PREL

      821     3791    4                   THEN
      822     3792    5                   DO ;

      823     3793    5                        K$RWPARM.KEYSZ = KV$VDOVLP_FLDID.BYTSIZ;

   3793   0 000102  B804                                 LDR,R3   ,B4
          0 000103  BAC6 0028                            SRM,R3,'00FF'X    40,B6
          0 000105       00FF

      824     3794    5                        K$RWPARM.KEY$ = ADDR(KV$VDOVLP_FLDID.FLDID);

   3794   0 000106  BBC4 0001                            LAB,B3   1,B4
          0 000108  BFC6 0023                            STB,B3   35,B6

      825     3795    5                        END;

      826     3796    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_FLDID) ;

   3796   0 00010A  B847 0009                            LDR,R3   TMP_SZ,AUTO
          0 00010C  3E04                                 ADV,R3   4
          0 00010D  BF47 0009                            STR,R3   TMP_SZ,AUTO

      827     3797    4                   IF MSG$->KV$VDOVLP.LST = '0'B

   3797   0 00010F  8984                                 CMZ      ,B4
          0 000110  0881 FF4E                            BAGE     s:3729,PREL

      828     3798    4                   THEN GOTO L2;
      829     3799    4                   GOTO L4;
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:142  

   3799   0 000112  0F81 004B                            B        s:3841,PREL

      830     3800
      831     3801
      832     3802    4                 CASE (%KV_VDOVLP_TYP_KEY);

      833     3803    4                   IF K$RWPARM.KEYTYPE = %G_KEYTYPE_COORD#

   3803   0 000114  D2C6 0028                            LLH,R5   40,B6
          0 000116  5D02                                 CMV,R5   2
          0 000117  0981 0009                            BNE      s:3809,PREL

      834     3804    4                   THEN
      835     3805    5                   DO ;

      836     3806    5                        K$RWPARM.KEYSZ = KV$VDOVLP_KEY.BYTSIZ;

   3806   0 000119  C804                                 LDR,R4   ,B4
          0 00011A  CAC6 0028                            SRM,R4,'00FF'X    40,B6
          0 00011C       00FF

      837     3807    5                        K$RWPARM.KEY$ = ADDR(KV$VDOVLP_KEY.KEY);

   3807   0 00011D  BBC4 0001                            LAB,B3   1,B4
          0 00011F  BFC6 0023                            STB,B3   35,B6

      838     3808    5                        END;

      839     3809    4                   TEMPU1 = LENGTHC(KV$VDOVLP_KEY) ;

   3809   0 000121  C804                                 LDR,R4   ,B4
          0 000122  C570 00FF                            AND,R4   255,IMO
          0 000124  4E02                                 ADV,R4   2
          0 000125  CF47 0008                            STR,R4   TEMPU1,AUTO
          0 000127  0F81 0026                            B        s:3831,PREL

PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:143  
      840     3810
      841     3811    4                 CASE (%KV_VDOVLP_TYP_MRK);

      842     3812    4                   K$RWPARM.MRKTYP = KV$VDOVLP_MRK.MRKTYP;

   3812   0 000129  D844 0001                            LDR,R5   1,B4
          0 00012B  D570 00FF                            AND,R5   255,IMO
          0 00012D  D7C6 001D                            STH,R5   29,B6

      843     3813    4                   IF K$RWPARM.MRKTYP = %KV_VDOMRKTYP_LSTRCRID

   3813   0 00012F  D2C6 001D                            LLH,R5   29,B6
          0 000131  5D02                                 CMV,R5   2
          0 000132  0981 000B                            BNE      s:3820,PREL

      844     3814    4                   THEN
      845     3815    5                   DO ;

      846     3816    5                        K$RWPARM.BLKREC.BLKU#=ADDR(KV$VDOVLP_MRK.ID)->B$HWORD;

   3816   0 000134  C844 0002                            LDR,R4   2,B4
          0 000136  CF46 000D                            STR,R4   13,B6

      847     3817    5                       K$RWPARM.BLKREC.RECU#=PINCRC(ADDR(KV$VDOVLP_MRK.ID),2)->B$HWORD
              3817                                 ;

   3817   0 000138  B844 0003                            LDR,R3   3,B4
          0 00013A  BF46 000E                            STR,R3   14,B6

      848     3818    5                        END;

   3818   0 00013C  0F81 0005                            B        s:3821,PREL

      849     3819    4                   ELSE
      850     3820    4                        K$RWPARM.MARKER = KV$VDOVLP_MRK.ID;

   3820   0 00013E  8CC4 0002                            LDI      2,B4
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:144  
          0 000140  8D46 000D                            SDI      13,B6

      851     3821    4                   TMP_SZ = TMP_SZ + SIZEC(KV$VDOVLP_MRK) ;

   3821   0 000142  E847 0009                            LDR,R6   TMP_SZ,AUTO
          0 000144  6E08                                 ADV,R6   8
          0 000145  EF47 0009                            STR,R6   TMP_SZ,AUTO

      852     3822    4                   IF MSG$->KV$VDOVLP.LST = '0'B

   3822   0 000147  8984                                 CMZ      ,B4
          0 000148  0881 FF16                            BAGE     s:3729,PREL

      853     3823    4                   THEN GOTO L2;
      854     3824    4                   GOTO L4;

   3824   0 00014A  0F81 0013                            B        s:3841,PREL

      855     3825
      856     3826    4                 CASE (ELSE);

      857     3827    4                   GOTO L1 ;

   3827   0 00014C  0F81 0025                            B        s:3849,PREL

      858     3828
      859     3829    4                   END;                    /* End cases                          */

      860     3830
      861     3831    3                IF TEMPU1S.LOBIT

   3831   0 00014E  82C7 0008                            LB,'0001'X        TEMPU1,AUTO
   3831   0 000150       0001
          0 000151  0581 0003                            BBF      s:3834,PREL

      862     3832    3                THEN TMP_SZ = TMP_SZ + 1;

PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:145  
   3832   0 000153  8AC7 0009                            INC      TMP_SZ,AUTO

      863     3833
      864     3834    3                TMP_SZ = TMP_SZ + TEMPU1 ;

   3834   0 000155  D847 0009                            LDR,R5   TMP_SZ,AUTO
          0 000157  DA47 0008                            ADD,R5   TEMPU1,AUTO
          0 000159  DF47 0009                            STR,R5   TMP_SZ,AUTO

      865     3835
      866     3836    3                IF MSG$->KV$VDOVLP.LST = '0'B

   3836   0 00015B  8984                                 CMZ      ,B4
          0 00015C  0881 FF02                            BAGE     s:3729,PREL

      867     3837    3                THEN GOTO L2;
      868     3838
      869     3839    3                END;

      870     3840
      871     3841    2           END ;

      872     3842
      873     3843
      874     3844    1   L4:
      875     3845    1      IF TMP_SZ = K$RWPARM.UHDRSZ OR TMP_SZ = K$RWPARM.UHDRSZ + MOD(TEMPU1,2)

   3845   0 00015E  E847 0009            L4              LDR,R6   TMP_SZ,AUTO
          0 000160  E946 0019                            CMR,R6   25,B6
          0 000162  0901 000C                            BE       s:3846,PREL
          0 000164  D847 0008                            LDR,R5   TEMPU1,AUTO
          0 000166  D570 0001                            AND,R5   1,IMO
          0 000168  DA46 0019                            ADD,R5   25,B6
          0 00016A  5801 0007                            BLZ,R5   s:3849,PREL
          0 00016C  D956                                 CMR,R5   R6
          0 00016D  0981 0004                            BNE      s:3849,PREL

PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:146  
      876     3846    1      THEN RETURN;

   3846   0 00016F  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      877     3847
      878     3848    1   L1:
      879     3849    1      CALL PROTOCOL_ERR;

   3849   0 000172  E3C0 0005            L1              LNJ,B6   s:0,PREL
          0 000174       0001                            DC       s:3850,PREL

      880     3850    1      ALTRETURN;

   3850   0 000175  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      881     3851
      882     3852
      883     3853    1   PROTOCOL_ERR: PROC;

   3853   0 000178  EFC7 000A            PROTOCOL_ERR    STB,B6   TMP_SZ+1,AUTO

      884     3854
      885     3855                  /*N* Error log */
      886     3856    2      RETURN;

   3856   0 00017A  ECC7 000A                            LDB,B6   TMP_SZ+1,AUTO
          0 00017C  C3C6 0001                            LNJ,B4   1,B6
      887     3857
      888     3858
      889     3859    2   END PROTOCOL_ERR;
      890     3860
      891     3861
      892     3862    1   END KNA$DECODE_VDO;
      893     3863        %EOD;

PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:147  
--  Include file information  --

   GU_LCP6_M.:E05TOU  is referenced.
   K$RWPARM.:E05TOU  is referenced.
   KV$VDO.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$DECODE_VDO.
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:148  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @K$RWPARM                 *0-0-0/w STRC(656)   r     1 K$RWPARM
     6-0-0/w PTR         r     1 MSG$                       8-0-0/w UBIN(16)    r     1 TEMPU1
     8-0-0/w STRC(16)    r     1 TEMPU1S                    9-0-0/w UBIN(16)    r     1 TMP_SZ

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c UBIN(8)     r     1 KNA_VDOBYTSIZ(0:34)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c UBIN(16)    r     1 B$HWORD                    0-0-0/w STRC(16)    r     1 KV$VDO
     0-0-0/w STRC(16)    r     1 KV$VDOVLP                  0-0-0/w STRC(32)    r     1 KV$VDOVLP_ACTPOS
     0-0-0/w STRC(96)    r     1 KV$VDOVLP_CG_MSGID         0-0-0/w STRC(96)    r     1 KV$VDOVLP_CG_MSGTYP
     0-0-0/w STRC(96)    r     1 KV$VDOVLP_CG_STA           0-0-0/w ASTR(16)    r     1 KV$VDOVLP_DAT1
     0-0-0/w ASTR(32)    r     1 KV$VDOVLP_DAT2             0-0-0/w STRC(48)    r     1 KV$VDOVLP_ERR
     0-0-0/w STRC(32)    r     1 KV$VDOVLP_FLDID            0-0-0/w ASTR(16)    r     1 KV$VDOVLP_KEY
     0-0-0/w STRC(64)    r     1 KV$VDOVLP_MRK              0-0-0/w STRC(32)    r     1 KV$VDO_DAT


   Procedure KNA$DECODE_VDO requires 382 words for executable code.
   Procedure KNA$DECODE_VDO requires 14 words of local(AUTO) storage.
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:149  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:150  
          MINI XREF LISTING

B$HWORD
      3688**DCL      3816>>ASSIGN   3817>>ASSIGN
K$RWPARM
      2622**DCL         7--PROC
K$RWPARM.ACTPOS
      2912**DCL      3742<<ASSIGN
K$RWPARM.BLKREC
      2652**DCL      2677--REDEF
K$RWPARM.BLKREC.BLKU#
      2653**DCL      3816<<ASSIGN
K$RWPARM.BLKREC.RECU#
      2665**DCL      3817<<ASSIGN
K$RWPARM.DVE.DVBYTE.TRANS
      2695**DCL      3723<<ASSIGN
K$RWPARM.DVE.DVBYTE.VFC
      2692**DCL      2693--REDEF    3718<<ASSIGN
K$RWPARM.DVE.EOMCHAR
      2700**DCL      2704--REDEF    3712<<ASSIGN
K$RWPARM.DVE.VFC
      2704**DCL      3719<<ASSIGN
K$RWPARM.EOM_EOR
      2721**DCL      3715<<ASSIGN
K$RWPARM.ERR
      2764**DCL      2769--REDEF
K$RWPARM.FC
      2728**DCL      2729--REDEF
K$RWPARM.FLDID
      2910**DCL      2911--REDEF    3789<<ASSIGN
K$RWPARM.KEY$
      2908**DCL      3794<<ASSIGN   3807<<ASSIGN
K$RWPARM.KEYSZ
      2919**DCL      3793<<ASSIGN   3806<<ASSIGN
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:151  
K$RWPARM.KEYTYPE
      2917**DCL      2918--REDEF    3790>>IF       3803>>IF
K$RWPARM.MARKER
      2677**DCL      3820<<ASSIGN
K$RWPARM.MRKTYP
      2902**DCL      3812<<ASSIGN   3813>>IF
K$RWPARM.MSG$
      2623**DCL      2624--REDEF    2633--REDEF    3708<<ASSIGN   3771<<ASSIGN   3777<<ASSIGN
K$RWPARM.MSGID
      2739**DCL      2744--REDEF    3750<<ASSIGN
K$RWPARM.MSGIDXT
      2752**DCL      2756--REDEF    3749<<ASSIGN
K$RWPARM.MSGSZ
      2634**DCL      3375--IMP-SIZ  3426--IMP-SIZ  3707<<ASSIGN   3772<<ASSIGN   3773>>ASSIGN   3776<<ASSIGN
      3778>>ASSIGN
K$RWPARM.MSGTYP
      2643**DCL      3757<<ASSIGN
K$RWPARM.MSG_ERRCODE
      2887**DCL      3781<<ASSIGN
K$RWPARM.ORG
      2888**DCL      2889--REDEF
K$RWPARM.READMLT
      2712**DCL      3706>>IF
K$RWPARM.STATION
      2638**DCL      3764<<ASSIGN
K$RWPARM.STR
      2903**DCL      3697<<ASSIGN
K$RWPARM.UHDR$
      2777**DCL      3031--IMP-PTR  3071--IMP-PTR  3692>>ASSIGN   3693>>IF       3693>>IF       3697>>ASSIGN
      3703>>IF       3708>>ASSIGN   3711>>IF       3712>>ASSIGN   3714>>ASSIGN   3719>>ASSIGN   3722>>IF
      3728>>IF       3737>>ASSIGN
K$RWPARM.UHDRSZ
      2782**DCL      3693>>IF       3707>>ASSIGN   3733>>IF       3845>>IF       3845>>IF
K$RWPARM.VDOFLGS
      2890**DCL      2901--REDEF
KNA_VDOBYTSIZ
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:152  
      3004**DCL      3692>>ASSIGN
KV$VDO.FNC
      3035**DCL      3693>>IF       3693>>IF       3703>>IF
KV$VDO.STR
      3035**DCL      3697>>ASSIGN
KV$VDOVLP.LST
      3109**DCL      3744>>IF       3752>>IF       3759>>IF       3766>>IF       3783>>IF       3797>>IF
      3822>>IF       3836>>IF
KV$VDOVLP.TYP
      3109**DCL      3739>>DOCASE
KV$VDOVLP_ACTPOS
      3154**DCL      3743--ASSIGN
KV$VDOVLP_ACTPOS.ACTPOS
      3168**DCL      3742>>ASSIGN
KV$VDOVLP_CG_MSGID
      3205**DCL      3751--ASSIGN
KV$VDOVLP_CG_MSGID.CG_MSGID
      3219**DCL      3750>>ASSIGN
KV$VDOVLP_CG_MSGID.CG_MSGIDXT
      3220**DCL      3749>>ASSIGN
KV$VDOVLP_CG_MSGTYP
      3257**DCL      3758--ASSIGN
KV$VDOVLP_CG_MSGTYP.CG_MSGTYP
      3271**DCL      3757>>ASSIGN
KV$VDOVLP_CG_STA
      3309**DCL      3765--ASSIGN
KV$VDOVLP_CG_STA.CG_STA
      3323**DCL      3764>>ASSIGN
KV$VDOVLP_DAT1
      3360**DCL      3773--ASSIGN
KV$VDOVLP_DAT1.BYTSIZ
      3366**DCL      3772>>ASSIGN
KV$VDOVLP_DAT1.MSG
      3375**DCL      3771--ASSIGN
KV$VDOVLP_DAT2
      3411**DCL      3778--ASSIGN
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:153  
KV$VDOVLP_DAT2.BYTSIZ
      3419**DCL      3776>>ASSIGN
KV$VDOVLP_DAT2.MSG
      3426**DCL      3777--ASSIGN
KV$VDOVLP_ERR
      3462**DCL      3782--ASSIGN
KV$VDOVLP_ERR.ERRCODE
      3493**DCL      3781>>ASSIGN
KV$VDOVLP_FLDID
      3559**DCL      3796--ASSIGN
KV$VDOVLP_FLDID.BYTSIZ
      3565**DCL      3793>>ASSIGN
KV$VDOVLP_FLDID.FLDID
      3573**DCL      3789>>ASSIGN   3794--ASSIGN
KV$VDOVLP_KEY
      3610**DCL      3809--ASSIGN
KV$VDOVLP_KEY.BYTSIZ
      3616**DCL      3625--IMP-SIZ  3806>>ASSIGN   3809>>ASSIGN
KV$VDOVLP_KEY.KEY
      3625**DCL      3807--ASSIGN
KV$VDOVLP_MRK
      3661**DCL      3821--ASSIGN
KV$VDOVLP_MRK.ID
      3676**DCL      3816--ASSIGN   3817--ASSIGN   3820>>ASSIGN
KV$VDOVLP_MRK.MRKTYP
      3675**DCL      3812>>ASSIGN
KV$VDO_DAT.DATCTRCHR
      3080**DCL      3712>>ASSIGN   3719>>ASSIGN
KV$VDO_DAT.DATCTRCHRTYP
      3079**DCL      3711>>IF       3714>>ASSIGN
KV$VDO_DAT.DATMOD
      3080**DCL      3722>>IF
KV$VDO_DAT.FNC
      3075**DCL      3692>>ASSIGN
KV$VDO_DAT.VLP
      3075**DCL      3728>>IF
PL6.E3A0      #005=KNA$DECODE_VDO File=KNA$SUBS.:E05TSI                          WED 07/30/97 01:00 Page:154  
L1
      3849**LABEL    3695--GOTO     3827--GOTO
L2
      3732**LABEL    3745--GOTO     3753--GOTO     3760--GOTO     3767--GOTO     3784--GOTO     3798--GOTO
      3823--GOTO     3837--GOTO
L4
      3845**LABEL    3746--GOTO     3754--GOTO     3761--GOTO     3768--GOTO     3785--GOTO     3799--GOTO
      3824--GOTO
MSG$
      3681**DCL      3154--IMP-PTR  3205--IMP-PTR  3257--IMP-PTR  3309--IMP-PTR  3360--IMP-PTR  3411--IMP-PTR
      3462--IMP-PTR  3559--IMP-PTR  3610--IMP-PTR  3661--IMP-PTR  3737<<ASSIGN   3739>>DOCASE   3742>>ASSIGN
      3744>>IF       3749>>ASSIGN   3750>>ASSIGN   3752>>IF       3757>>ASSIGN   3759>>IF       3764>>ASSIGN
      3766>>IF       3771>>ASSIGN   3772>>ASSIGN   3776>>ASSIGN   3777>>ASSIGN   3781>>ASSIGN   3783>>IF
      3789>>ASSIGN   3793>>ASSIGN   3794>>ASSIGN   3797>>IF       3806>>ASSIGN   3807>>ASSIGN   3809>>ASSIGN
      3809>>ASSIGN   3812>>ASSIGN   3816>>ASSIGN   3817>>ASSIGN   3820>>ASSIGN   3822>>IF       3836>>IF
PROTOCOL_ERR
      3853**PROC     3849--CALL
TEMPU1
      3682**DCL      3683--REDEF    3684--REDEF    3714<<ASSIGN   3716>>IF       3727<<ASSIGN   3732<<ASSIGN
      3773<<ASSIGN   3778<<ASSIGN   3809<<ASSIGN   3834>>ASSIGN   3845>>IF
TEMPU1S.LOBIT
      3686**DCL      3831>>IF
TMP_SZ
      3689**DCL      3692<<ASSIGN   3693>>IF       3733>>IF       3737>>ASSIGN   3743<<ASSIGN   3743>>ASSIGN
      3751<<ASSIGN   3751>>ASSIGN   3758<<ASSIGN   3758>>ASSIGN   3765<<ASSIGN   3765>>ASSIGN   3782<<ASSIGN
      3782>>ASSIGN   3796<<ASSIGN   3796>>ASSIGN   3821<<ASSIGN   3821>>ASSIGN   3832<<ASSIGN   3832>>ASSIGN
      3834<<ASSIGN   3834>>ASSIGN   3845>>IF       3845>>IF

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:155  
      894        1        /*T***********************************************************/
      895        2        /*T*                                                         */
      896        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      897        4        /*T*                                                         */
      898        5        /*T***********************************************************/
      899        6
      900        7        KNA$BUILD_VDO: PROC(FUNCTION,K$RWPARM,HDR);
      901        8
      902        9        %INCLUDE KV$VDO;
      903     1024        %INCLUDE K$RWPARM;
      904     1410        %INCLUDE GU_LCP6_M;
      905     2338        %INCLUDE G_LCP6_E;
      906     2596        %INCLUDE KV_PRMID_E;
      907     2770        %KV_PRMID_E;
      908     2926        %INCLUDE K_CP6_M;
      909     3122        %INCLUDE KI$CP6V_C;
      910     3561
      911     3562        /* Parameters */
      912     3563    1   DCL FUNCTION UBIN;
      913     3564        %K$RWPARM (NAME=K$RWPARM);
      914     3880    1   DCL HDR CHAR(100) WALIGNED;
      915     3881
      916     3882        /* Based structures */
      917     3883        %KV_VDO_ALL;
      918     6026        %KV$VDOVLP_MRK (NAME=VDOVLP_MRK,STCLASS=BASED,LAST=",");
      919     6079    1         2 BMRK REDEF ID,
      920     6080    1           3 BLK# UBIN (16) UNAL,
      921     6081    1           3 REC# UBIN (16) UNAL;
      922     6082    1   DCL 1 VDO BASED,
      923     6083    1         2 * CHAR(VDOSZ);
      924     6084    1   DCL 1 VDO1 BASED(HDR$) WALIGNED ,
      925     6085    1         2 WD1 UBIN ,
      926     6086    1         2 WD2 UBIN ,
      927     6087    1         2 WD3 UBIN ,
      928     6088    1         2 WD4 UBIN ,
      929     6089    1         2 WD5 UBIN ,
      930     6090    1         2 WD6 UBIN ;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:156  
      931     6091
      932     6092    1   DCL FLDID UBIN BASED;
      933     6093    1   DCL KEY CHAR(K$RWPARM.KEYSZ) BASED;
      934     6094        %FPT$DCLFLD_V(BASED="BASED(K$RWPARM.V$)");
      935     6114    1   DCL TL CHAR(K$RWPARM.VSZ) BASED(K$RWPARM.V$);
      936     6115        %FPT$ERASE_V(BASED="BASED(K$RWPARM.V$)");
      937     6131        %FPT$MDFFLD_V(BASED="BASED(K$RWPARM.V$)");
      938     6147        %VLP$FLDATR_V (FPTN=VLP$FLDATR,BASED="BASED(K$RWPARM.IP$)");
      939     6164        %FPT$TRMPRG_V (BASED="BASED(K$RWPARM.V$)");
      940     6176        /* Auto */
      941     6177    1   DCL HDR$ PTR;
      942     6178    1   DCL LHDR$ PTR;
      943     6179    1   DCL MSGSZ UBIN;
      944     6180    1   DCL VDOSZ UBIN;
      945     6181    1   DCL TEMP2U REDEF VDOSZ UBIN ;
      946     6182    1   DCL TEMP2S REDEF VDOSZ SBIN ;
      947     6183    1   DCL OP$ CPTR;
      948     6184    1   DCL 1 OP$1 REDEF OP$ ,
      949     6185    1         2 HIBIT BIT(1) UNAL ,
      950     6186    1         2 WAPTR BIT(31) UNAL ;
      951     6187    1   DCL OPP$ REDEF OP$ PTR;
      952     6188
      953     6189    1   DCL B$CHAR CHAR(1) BASED(OP$) UNAL;
      954     6190    1   DCL UBNBSD UBIN WORD BASED ALIGNED ;
      955     6191    1   DCL 1 UBNBSD1 REDEF UBNBSD ALIGNED ,
      956     6192    1         2 HLF1 UBIN(8) UNAL ,
      957     6193    1         2 HLF2 UBIN(8) UNAL ;
      958     6194
      959     6195    1   DCL TEMP1U UBIN ;
      960     6196    1   DCL TEMP1S REDEF TEMP1U SBIN ;
      961     6197    1   DCL 1 TEMP1STR REDEF TEMP1U ,
      962     6198    1         2 HLF1 UBIN(8) UNAL ,
      963     6199    1         2 HLF2 UBIN(8) UNAL ;
      964     6200    1   DCL TEMP3U UBIN;
      965     6201    1   DCL TEMP3S REDEF TEMP3U SBIN;
      966     6202
      967     6203        /* Refs */
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:157  
      968     6204        %KV$VDOVLP_CG_MSGID (NAME=KNA_VDOVLP_CG_MSGID,STCLASS=SYMREF);
      969     6256        %KV$VDOVLP_CG_MSGTYP (NAME=KNA_VDOVLP_CG_MSGTYP,STCLASS=SYMREF);
      970     6308        %KV$VDOVLP_CG_STA (NAME=KNA_VDOVLP_CG_STA,STCLASS=SYMREF);
      971     6359        %KV$VDOVLP_DAT1 (NAME=KNA_VDOVLP_DAT1,STCLASS=SYMREF);
      972     6409        %KV$VDOVLP_DAT2 (NAME=KNA_VDOVLP_DAT2,STCLASS=SYMREF);
      973     6459        %KV$VDOVLP_ERR (NAME=KNA_VDOVLP_ERR,STCLASS=SYMREF);
      974     6556        %KV$VDOVLP_FLDID (NAME=KNA_VDOVLP_FLDID,STCLASS=SYMREF);
      975     6607        %KV$VDOVLP_KEY (NAME=KNA_VDOVLP_KEY,STCLASS=SYMREF);
      976     6657        %KV$VDOVLP_MRK (NAME=KNA_VDOVLP_MRK,STCLASS=SYMREF);
      977     6710        %KV_VDOBYTSIZ (NAME=KNA_VDOBYTSIZ,STCLASS=SYMREF);
      978     6730
      979     6731
      980     6732        %EJECT;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:158  
      981     6733
      982     6734
      983     6735
      984     6736    1      HDR$ = ADDR(HDR);
      985     6737    1      IF FUNCTION > %KV_VDO_FNC_HI
      986     6738    2      THEN DO;
      987     6739    2           RETURN;
      988     6740    2           END;
      989     6741    1      VDOSZ = KNA_VDOBYTSIZ(FUNCTION);
      990     6742        /*
      991     6743             HDR$->VDO = '0'B;
      992     6744                                          */
      993     6745    1      VDO1.WD1 = 0 ;
      994     6746    1      HDR$->KV$VDO.FNC = FUNCTION;
      995     6747    1      MSGSZ = K$RWPARM.MSGSZ;
      996     6748    1      HDR$->KV$VDO.STR = K$RWPARM.STR;
      997     6749
      998     6750    2      DO CASE (FUNCTION);
      999     6751
     1000     6752    2       CASE (%KV_VDO_FNC_BLKDAT);
     1001     6753    2         HDR$->KV$VDO_BLKDAT.RCRBYTSIZ = K$RWPARM.MAXRCRBYTSIZ/256*512 + MOD(K$RWPARM.
              6753                  MAXRCRBYTSIZ,256);
     1002     6754    2         VDO1.WD3 = 0 ;
     1003     6755    2         HDR$->KV$VDO_BLKDAT.RSN = K$RWPARM.RSN;
     1004     6756
     1005     6757    2       CASE (%KV_VDO_FNC_CLSSTR);
     1006     6758    2         VDO1.WD2 = 0 ;
     1007     6759    2         HDR$->KV$VDO_CLSSTR.DLT = K$RWPARM.VDOFLGS.DLTSTR;
     1008     6760    2         HDR$->KV$VDO_CLSSTR.NEWSSN = K$RWPARM.VDOFLGS.NEWSSN;
     1009     6761
     1010     6762
     1011     6763    2       CASE (%KV_VDO_FNC_DCLFLD);
     1012     6764    2         HDR$->KV$VDO_DCLFLD.LIN = FPT$DCLFLD_V.LIN;
     1013     6765    2         HDR$->KV$VDO_DCLFLD.CLM = FPT$DCLFLD_V.CLM;
     1014     6766    2         HDR$->KV$VDO_DCLFLD.WDT = FPT$DCLFLD_V.WDT;
     1015     6767    2         HDR$->KV$VDO_DCLFLD.ID = FPT$DCLFLD_V.ID;
     1016     6768    2         IF VLP$FLDATR.ABSGRPRND ~= 0
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:159  
     1017     6769    3         THEN DO;
     1018     6770    3              HDR$->KV$VDO_DCLFLD.GRPRND =
     1019     6771    3                BINBIT(VLP$FLDATR.ABSGRPRND,SIZEB(KV$VDO_DCLFLD.GRPRND));
     1020     6772    3              HDR$->KV$VDO_DCLFLD.GRPRND.ABS = '1'B;
     1021     6773    3              END;
     1022     6774    2         ELSE
     1023     6775    2              HDR$->KV$VDO_DCLFLD.GRPRND = VLP$FLDATR.GRPRND;
     1024     6776    2         HDR$->KV$VDO_DCLFLD.QLF = VLP$FLDATR.QLF;
     1025     6777
     1026     6778    2       CASE (%KV_VDO_FNC_DAT,%KV_VDO_FNC_DAT_IMD);
     1027     6779    2         VDO1.WD2 = 0 ;
     1028     6780    2         IF K$RWPARM.DVE.DVBYTE.VFC
     1029     6781    3         THEN DO;
     1030     6782    3              HDR$->KV$VDO_DAT.DATCTRCHRTYP = %KV_DATCTRCHRTYP_VFC;
     1031     6783    3              HDR$->KV$VDO_DAT.DATCTRCHR = K$RWPARM.DVE.VFC;
     1032     6784    3              END;
     1033     6785    2         IF K$RWPARM.EOM_EOR
     1034     6786    3         THEN DO;
     1035     6787    3              HDR$->KV$VDO_DAT.DATCTRCHRTYP = %KV_DATCTRCHRTYP_ACT;
     1036     6788    3              HDR$->KV$VDO_DAT.DATCTRCHR = K$RWPARM.DVE.EOMCHAR;
     1037     6789    3              END;
     1038     6790    2         IF K$RWPARM.DVE.DVBYTE.TRANS
     1039     6791    2         THEN HDR$->KV$VDO_DAT.DATMOD = %KV_DATMOD_TRN;
     1040     6792
     1041     6793    2       CASE (%KV_VDO_FNC_DLT);
     1042     6794    2         VDO1.WD2 = 0 ;
     1043     6795    2         HDR$->KV$VDO_DLT.CTLFLG = FPT$TRMPRG_V.CTLFLG;
     1044     6796
     1045     6797    2       CASE (%KV_VDO_FNC_DCLSTR);
     1046     6798    2         VDO1.WD2 = 0 ;
     1047     6799    2         HDR$->KV$VDO_DCLSTR.STRID = K$RWPARM.STRID;
     1048     6800
     1049     6801    2       CASE (%KV_VDO_FNC_ERS);
     1050     6802    2         VDO1.WD2 = 0 ;
     1051     6803    2         HDR$->KV$VDO_ERS.PRT = FPT$ERASE_V.PRT;
     1052     6804    2         HDR$->KV$VDO_ERS.CNS = FPT$ERASE_V.CNS;
     1053     6805
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:160  
     1054     6806    2       CASE (%KV_VDO_FNC_OPNSTR);
     1055     6807    2         VDO1.WD2 = 0 ;
     1056     6808    2         VDO1.WD3 = 0 ;
     1057     6809    2         HDR$->KV$VDO_OPNSTR.ORG = K$RWPARM.ORG;
     1058     6810
     1059     6811
     1060     6812    2       CASE (%KV_VDO_FNC_PRM_SET);
     1061     6813    2         MSGSZ = MSGSZ + K$RWPARM.VSZ;
     1062     6814
     1063     6815    2       CASE (%KV_VDO_FNC_RQSDAT);
     1064     6816    2         VDO1.WD5 = 0 ;
     1065     6817    2         HDR$->KV$VDO_RQSDAT.EOFNO_DAT = K$RWPARM.DVE.DVBYTE.NODAT;
     1066     6818    2         HDR$->KV$VDO_RQSDAT.RE_RED = K$RWPARM.DVE.DVBYTE.REREAD;
     1067     6819        /*    HDR$->KV$VDO_RQSDAT.BP = K$RWPARM.DVE.DVBYTE.BP; if ORG=SE ever works */
     1068     6820    2         HDR$->KV$VDO_RQSDAT.READMLT = K$RWPARM.READMLT;
     1069     6821    2         IF K$RWPARM.DVE.DVBYTE.TRANS
     1070     6822    2         THEN
     1071     6823    2              HDR$->KV$VDO_RQSDAT.DATMOD = %KV_DATMOD_TRN;
     1072     6824    2         HDR$->KV$VDO_RQSDAT.MAXNMBRCR = K$RWPARM.MAXNMBRCR;
     1073     6825    2         HDR$->KV$VDO_RQSDAT.MAXNMBBYT = K$RWPARM.MAXNMBBYT;
     1074     6826    2         HDR$->KV$VDO_RQSDAT.MAXRCRBYTSIZ = K$RWPARM.MAXRCRBYTSIZ;
     1075     6827    2         HDR$->KV$VDO_RQSDAT.WAT = K$RWPARM.VDOFLGS.WAIT;
     1076     6828
     1077     6829    2       CASE (%KV_VDO_FNC_RQSPRM);
     1078     6830    2         VDO1.WD2 = 0 ;
     1079     6831    2         HDR$->KV$VDO_RQSPRM.PRMID = K$RWPARM.PRMID;
     1080     6832    2         HDR$->KV$VDO_RQSPRM.MAXNMBBYT = K$RWPARM.MAXNMBBYT;
     1081     6833
     1082     6834    2       CASE (%KV_VDO_FNC_SLCGRPRND);
     1083     6835    2         VDO1.WD2 = 0 ;
     1084     6836    2         IF VLP$FLDATR.ABSGRPRND ~= 0
     1085     6837    3         THEN DO;
     1086     6838    3              HDR$->KV$VDO_SLCGRPRND.GRPRND =
     1087     6839    3                BINBIT(VLP$FLDATR.ABSGRPRND,SIZEB(KV$VDO_SLCGRPRND.GRPRND));
     1088     6840    3              HDR$->KV$VDO_SLCGRPRND.GRPRND.ABS = '1'B;
     1089     6841    3              END;
     1090     6842    2         ELSE
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:161  
     1091     6843    2              HDR$->KV$VDO_SLCGRPRND.GRPRND = VLP$FLDATR.GRPRND;
     1092     6844
     1093     6845    2       CASE (%KV_VDO_FNC_SLCQLF);
     1094     6846    2         VDO1.WD2 = 0 ;
     1095     6847    2         HDR$->KV$VDO_SLCQLF.QLF = VLP$FLDATR.QLF;
     1096     6848
     1097     6849    2       CASE (ELSE) ;
     1098     6850    2         IF VDOSZ > 2 THEN
     1099     6851    2              VDO1.WD2 =  0 ;
     1100     6852
     1101     6853
     1102     6854    2         END /* CASES */;
     1103     6855    1      LHDR$ = HDR$;
     1104     6856    1      HDR$ = PINCRW(HDR$,VDOSZ/2);
     1105     6857        /* CG message type */
     1106     6858    1      IF K$RWPARM.MSGTYP ~= ' '
     1107     6859    2      THEN DO;
     1108     6860    2           IF K$RWPARM.MSGID ~= 0
     1109     6861    3           THEN DO;
     1110     6862    3                HDR$->KV$VDOVLP_CG_MSGID = KNA_VDOVLP_CG_MSGID;
     1111     6863    3                HDR$->KV$VDOVLP_CG_MSGID.CG_MSGIDXT = K$RWPARM.MSGIDXT;
     1112     6864    3                HDR$->KV$VDOVLP_CG_MSGID.CG_MSGID=K$RWPARM.MSGID;
     1113     6865    3                HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_CG_MSGID));
     1114     6866    3                END;
     1115     6867    2           HDR$->KV$VDOVLP_CG_MSGTYP = KNA_VDOVLP_CG_MSGTYP;
     1116     6868    2           HDR$->KV$VDOVLP_CG_MSGTYP.CG_MSGTYP = K$RWPARM.MSGTYP;
     1117     6869    2           LHDR$ = HDR$;
     1118     6870    2           HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_CG_MSGTYP));
     1119     6871    2           END;
     1120     6872
     1121     6873    1      IF K$RWPARM.STATION ~= ' '
     1122     6874    2      THEN DO;
     1123     6875    2           HDR$->KV$VDOVLP_CG_STA = KNA_VDOVLP_CG_STA;
     1124     6876    2           HDR$->KV$VDOVLP_CG_STA.CG_STA = K$RWPARM.STATION;
     1125     6877    2           LHDR$ = HDR$;
     1126     6878    2           HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_CG_STA));
     1127     6879    2           END;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:162  
     1128     6880
     1129     6881    1      IF K$RWPARM.MSG_ERRCODE ~= '0'B
     1130     6882    2      THEN DO;
     1131     6883    2           HDR$->KV$VDOVLP_ERR = KNA_VDOVLP_ERR;
     1132     6884    2           HDR$->KV$VDOVLP_ERR.ERRCODE=K$RWPARM.MSG_ERRCODE;
     1133     6885    2           LHDR$ = HDR$;
     1134     6886    2           HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_ERR));
     1135     6887    2           END;
     1136     6888
     1137     6889    1      IF K$RWPARM.KEY$ ~= ADDR(NIL)
     1138     6890    1      THEN IF K$RWPARM.KEYTYPE = %G_KEYTYPE_FLDID#
     1139     6891    2           THEN DO;
     1140     6892    2                HDR$->KV$VDOVLP_FLDID = KNA_VDOVLP_FLDID;
     1141     6893    2                HDR$->KV$VDOVLP_FLDID.BYTSIZ = K$RWPARM.KEYSZ;
     1142     6894    2                HDR$->KV$VDOVLP_FLDID.FLDID = K$RWPARM.KEY$->FLDID;
     1143     6895    2                LHDR$ = HDR$;
     1144     6896    2                HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_FLDID));
     1145     6897    2                END;
     1146     6898    2           ELSE DO;
     1147     6899    2                HDR$->KV$VDOVLP_KEY = KNA_VDOVLP_KEY;
     1148     6900    2                HDR$->KV$VDOVLP_KEY.BYTSIZ = K$RWPARM.KEYSZ;
     1149     6901    2                IF K$RWPARM.KEYTYPE ~= %G_KEYTYPE_COORD#
     1150     6902    2                THEN
     1151     6903    2                     HDR$->KV$VDOVLP_KEY.TYP = %KV_VDOVLP_TYP_ENTSRD;
     1152     6904    2                LHDR$ = HDR$;
     1153     6905    2                HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_KEY));
     1154     6906    2                HDR$->KEY = K$RWPARM.KEY$->KEY;
     1155     6907    2                HDR$ = PINCRW(HDR$,(K$RWPARM.KEYSZ+1)/2);
     1156     6908    2                END;
     1157     6909
     1158     6910    1      IF K$RWPARM.MRKTYP ~= 0
     1159     6911    2      THEN DO;
     1160     6912    2           HDR$->VDOVLP_MRK = KNA_VDOVLP_MRK;
     1161     6913    2           HDR$->VDOVLP_MRK.MRKTYP = K$RWPARM.MRKTYP;
     1162     6914    2           IF FUNCTION = %KV_VDO_FNC_MRK
     1163     6915    2           THEN
     1164     6916    2                HDR$->VDOVLP_MRK.RSP = '1'B;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:163  
     1165     6917    2           IF K$RWPARM.MRKTYP = %KV_VDOMRKTYP_LSTRCRID
     1166     6918    3           THEN DO;
     1167     6919    3                HDR$->VDOVLP_MRK.BMRK.BLK# = K$RWPARM.BLKREC.BLKU#;
     1168     6920    3                HDR$->VDOVLP_MRK.BMRK.REC# = K$RWPARM.BLKREC.RECU#;
     1169     6921    3                HDR$->VDOVLP_MRK.BYTSIZ = LENGTHC(K$RWPARM.BLKREC);
     1170     6922    3                END;
     1171     6923    3           ELSE DO;
     1172     6924    3                HDR$->VDOVLP_MRK.ID = K$RWPARM.MARKER;
     1173     6925    3                HDR$->VDOVLP_MRK.BYTSIZ = SIZEC(HDR$->VDOVLP_MRK.ID);
     1174     6926    3                END;
     1175     6927    2           LHDR$ = HDR$;
     1176     6928    2           HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_MRK));
     1177     6929    2           END;
     1178     6930
     1179     6931    1      IF (FUNCTION = %KV_VDO_FNC_DAT OR FUNCTION = %KV_VDO_FNC_DAT_IMD
     1180     6932    1        OR FUNCTION = %KV_VDO_FNC_STT)
     1181     6933    1        AND NOT K$RWPARM.DVE.DVBYTE.BP AND NOT K$RWPARM.DVE.DVBYTE.TRANS
     1182     6934    1        AND K$RWPARM.MSGC$ ~= ADDR(NIL)
     1183     6935    1        AND K$RWPARM.MSGSZ > 2
     1184     6936    2      THEN DO;
     1185     6937    2           TEMP1U = K$RWPARM.MSGSZ - 1 ;
     1186     6938    2           TEMP3U = TEMP1U / 2 ;
     1187     6939    2           TEMP2S = 0 ;
     1188     6940    2           OP$ = PINCRC(K$RWPARM.MSGC$,TEMP1U);
     1189     6941    2           IF OP$1.HIBIT = '1'B
     1190     6942    3           THEN DO;
     1191     6943    3                OP$1.HIBIT = '0'B ;
     1192     6944    3                IF OPP$->UBNBSD ~= 8224 /* 32*256 + 32 */ THEN
     1193     6945    3                     GOTO LOUT ;
     1194     6946    3                GOTO LLUUP1 ;
     1195     6947    3                END ;
     1196     6948    2           IF OPP$->UBNBSD1.HLF1 ~= 32
     1197     6949    2           THEN GOTO LOUT;
     1198     6950    3           ELSE DO;
     1199     6951    3                MSGSZ = MSGSZ - 1;
     1200     6952    3                K$RWPARM.MSGSZ = TEMP1S ;
     1201     6953    3                IF TEMP1S < 3
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:164  
     1202     6954    3                THEN GOTO LOUT;
     1203     6955    3                END ;
     1204     6956    2   LLUUP:
     1205     6957    2           OPP$=PINCRW(OPP$,-1);
     1206     6958    2           IF OPP$->UBNBSD ~= 8224         /* 32*256 + 32                        */
     1207     6959    2           THEN GOTO LOUT1;
     1208     6960    2   LLUUP1:
     1209     6961    2           TEMP2S = TEMP2S + 1 ;
     1210     6962    2           IF TEMP2S < TEMP3S
     1211     6963    2           THEN GOTO LLUUP;
     1212     6964
     1213     6965    2   LOUT1:
     1214     6966    2           MSGSZ = MSGSZ - TEMP2S - TEMP2S ;
     1215     6967    2           K$RWPARM.MSGSZ = K$RWPARM.MSGSZ - TEMP2S - TEMP2S ;
     1216     6968
     1217     6969    2           END;
     1218     6970
     1219     6971    1   LOUT:
     1220     6972    1      IF MSGSZ > 0
     1221     6973    2      THEN DO;
     1222     6974    2           LHDR$ = HDR$;
     1223     6975    2           IF MSGSZ > 255
     1224     6976    3           THEN DO;
     1225     6977    3                HDR$->KV$VDOVLP_DAT2 = KNA_VDOVLP_DAT2;
     1226     6978    3                HDR$->KV$VDOVLP_DAT2.BYTSIZ = MSGSZ;
     1227     6979    3                HDR$ = PINCRC (HDR$,SIZEC(KNA_VDOVLP_DAT2));
     1228     6980    3                END;
     1229     6981    3           ELSE DO;
     1230     6982    3                HDR$->KV$VDOVLP_DAT1 = KNA_VDOVLP_DAT1;
     1231     6983    3                HDR$->KV$VDOVLP_DAT1.BYTSIZ = MSGSZ;
     1232     6984    3                HDR$ = PINCRC (HDR$,SIZEC(KNA_VDOVLP_DAT1));
     1233     6985    3                END;
     1234     6986    2           END;
     1235     6987    1      IF LHDR$ ~= ADDR(HDR)                /* vlps                               */
     1236     6988    2      THEN DO;
     1237     6989    2           ADDR(HDR)->KV$VDO.VLP = '1'B;
     1238     6990    2           LHDR$->KV$VDOVLP.LST = '1'B;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:165  
     1239     6991    2           END;
     1240     6992
     1241     6993    1      TEMP1U = 0 ;
     1242     6994    1      IF FUNCTION = %KV_VDO_FNC_PRM_SET    /* TL exists                          */
     1243     6995    2      THEN DO;
     1244     6996    2           HDR$->TL = K$RWPARM.V$->TL;
     1245     6997    2           TEMP1U = K$RWPARM.VSZ ;
     1246     6998    2           END;
     1247     6999
     1248     7000    1      K$RWPARM.UHDR$ = ADDR(HDR);
     1249     7001    1      TEMP2U = POFFW(HDR$,ADDR(HDR)) ;
     1250     7002    1      K$RWPARM.UHDRSZ = TEMP2U + TEMP2U + TEMP1U ;
     1251     7003    1      RETURN;
     1252     7004
     1253     7005    1   END KNA$BUILD_VDO;
     1254     7006        %EOD;

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:166  
--  Include file information  --

   KI$CP6V_C.:E05TOU  is referenced.
   K_CP6_M.:E05TOU  is referenced.
   KV_PRMID_E.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   K$RWPARM.:E05TOU  is referenced.
   KV$VDO.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$BUILD_VDO.

   Procedure KNA$BUILD_VDO requires 867 words for executable code.
   Procedure KNA$BUILD_VDO requires 22 words of local(AUTO) storage.

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:167  

 Object Unit name= KNA$BUILD_VDO                              File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 01:01:44.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none   867    363  KNA$BUILD_VDO
    1  RoData even  none     2      2  KNA$BUILD_VDO

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        3  KNA$BUILD_VDO

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_3
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KNA_VDOVLP_CG_MSGID                   KNA_VDOVLP_CG_MSGTYP                  KNA_VDOVLP_CG_STA
     KNA_VDOVLP_DAT1                       KNA_VDOVLP_DAT2                       KNA_VDOVLP_ERR
     KNA_VDOVLP_FLDID                      KNA_VDOVLP_KEY                        KNA_VDOVLP_MRK
     KNA_VDOBYTSIZ                    r    G$ROS$
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:168  


      894        1        /*T***********************************************************/
      895        2        /*T*                                                         */
      896        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      897        4        /*T*                                                         */
      898        5        /*T***********************************************************/
      899        6
      900        7        KNA$BUILD_VDO: PROC(FUNCTION,K$RWPARM,HDR);

      7   0 000000  D380 0000 0000  xent KNA$BUILD_VDO   LNJ,B5   X6A_AUTO_3
          0 000003       0016 0003                       DC       22,3

      901        8
      902        9        %INCLUDE KV$VDO;
      903     1024        %INCLUDE K$RWPARM;
      904     1410        %INCLUDE GU_LCP6_M;
      905     2338        %INCLUDE G_LCP6_E;
      906     2596        %INCLUDE KV_PRMID_E;
      907     2770        %KV_PRMID_E;
      908     2926        %INCLUDE K_CP6_M;
      909     3122        %INCLUDE KI$CP6V_C;
      910     3561
      911     3562        /* Parameters */
      912     3563    1   DCL FUNCTION UBIN;
      913     3564        %K$RWPARM (NAME=K$RWPARM);
      914     3880    1   DCL HDR CHAR(100) WALIGNED;
      915     3881
      916     3882        /* Based structures */
      917     3883        %KV_VDO_ALL;
      918     6026        %KV$VDOVLP_MRK (NAME=VDOVLP_MRK,STCLASS=BASED,LAST=",");
      919     6079    1         2 BMRK REDEF ID,
      920     6080    1           3 BLK# UBIN (16) UNAL,
      921     6081    1           3 REC# UBIN (16) UNAL;
      922     6082    1   DCL 1 VDO BASED,
      923     6083    1         2 * CHAR(VDOSZ);
      924     6084    1   DCL 1 VDO1 BASED(HDR$) WALIGNED ,
      925     6085    1         2 WD1 UBIN ,
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:169  
      926     6086    1         2 WD2 UBIN ,
      927     6087    1         2 WD3 UBIN ,
      928     6088    1         2 WD4 UBIN ,
      929     6089    1         2 WD5 UBIN ,
      930     6090    1         2 WD6 UBIN ;
      931     6091
      932     6092    1   DCL FLDID UBIN BASED;
      933     6093    1   DCL KEY CHAR(K$RWPARM.KEYSZ) BASED;
      934     6094        %FPT$DCLFLD_V(BASED="BASED(K$RWPARM.V$)");
      935     6114    1   DCL TL CHAR(K$RWPARM.VSZ) BASED(K$RWPARM.V$);
      936     6115        %FPT$ERASE_V(BASED="BASED(K$RWPARM.V$)");
      937     6131        %FPT$MDFFLD_V(BASED="BASED(K$RWPARM.V$)");
      938     6147        %VLP$FLDATR_V (FPTN=VLP$FLDATR,BASED="BASED(K$RWPARM.IP$)");
      939     6164        %FPT$TRMPRG_V (BASED="BASED(K$RWPARM.V$)");
      940     6176        /* Auto */
      941     6177    1   DCL HDR$ PTR;
      942     6178    1   DCL LHDR$ PTR;
      943     6179    1   DCL MSGSZ UBIN;
      944     6180    1   DCL VDOSZ UBIN;
      945     6181    1   DCL TEMP2U REDEF VDOSZ UBIN ;
      946     6182    1   DCL TEMP2S REDEF VDOSZ SBIN ;
      947     6183    1   DCL OP$ CPTR;
      948     6184    1   DCL 1 OP$1 REDEF OP$ ,
      949     6185    1         2 HIBIT BIT(1) UNAL ,
      950     6186    1         2 WAPTR BIT(31) UNAL ;
      951     6187    1   DCL OPP$ REDEF OP$ PTR;
      952     6188
      953     6189    1   DCL B$CHAR CHAR(1) BASED(OP$) UNAL;
      954     6190    1   DCL UBNBSD UBIN WORD BASED ALIGNED ;
      955     6191    1   DCL 1 UBNBSD1 REDEF UBNBSD ALIGNED ,
      956     6192    1         2 HLF1 UBIN(8) UNAL ,
      957     6193    1         2 HLF2 UBIN(8) UNAL ;
      958     6194
      959     6195    1   DCL TEMP1U UBIN ;
      960     6196    1   DCL TEMP1S REDEF TEMP1U SBIN ;
      961     6197    1   DCL 1 TEMP1STR REDEF TEMP1U ,
      962     6198    1         2 HLF1 UBIN(8) UNAL ,
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:170  
      963     6199    1         2 HLF2 UBIN(8) UNAL ;
      964     6200    1   DCL TEMP3U UBIN;
      965     6201    1   DCL TEMP3S REDEF TEMP3U SBIN;
      966     6202
      967     6203        /* Refs */
      968     6204        %KV$VDOVLP_CG_MSGID (NAME=KNA_VDOVLP_CG_MSGID,STCLASS=SYMREF);
      969     6256        %KV$VDOVLP_CG_MSGTYP (NAME=KNA_VDOVLP_CG_MSGTYP,STCLASS=SYMREF);
      970     6308        %KV$VDOVLP_CG_STA (NAME=KNA_VDOVLP_CG_STA,STCLASS=SYMREF);
      971     6359        %KV$VDOVLP_DAT1 (NAME=KNA_VDOVLP_DAT1,STCLASS=SYMREF);
      972     6409        %KV$VDOVLP_DAT2 (NAME=KNA_VDOVLP_DAT2,STCLASS=SYMREF);
      973     6459        %KV$VDOVLP_ERR (NAME=KNA_VDOVLP_ERR,STCLASS=SYMREF);
      974     6556        %KV$VDOVLP_FLDID (NAME=KNA_VDOVLP_FLDID,STCLASS=SYMREF);
      975     6607        %KV$VDOVLP_KEY (NAME=KNA_VDOVLP_KEY,STCLASS=SYMREF);
      976     6657        %KV$VDOVLP_MRK (NAME=KNA_VDOVLP_MRK,STCLASS=SYMREF);
      977     6710        %KV_VDOBYTSIZ (NAME=KNA_VDOBYTSIZ,STCLASS=SYMREF);
      978     6730
      979     6731
      980     6732        %EJECT;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:171  
      981     6733
      982     6734
      983     6735
      984     6736    1      HDR$ = ADDR(HDR);

   6736   0 000005  ECC7 0008                            LDB,B6   @HDR,AUTO
          0 000007  EFC7 000A                            STB,B6   HDR$,AUTO

      985     6737    1      IF FUNCTION > %KV_VDO_FNC_HI

   6737   0 000009  DCC7 0004                            LDB,B5   @FUNCTION,AUTO
          0 00000B  E805                                 LDR,R6   ,B5
          0 00000C  6D22                                 CMV,R6   34
          0 00000D  0381 0004                            BLE      s:6741,PREL

      986     6738    2      THEN DO;

      987     6739    2           RETURN;

   6739   0 00000F  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      988     6740    2           END;
      989     6741    1      VDOSZ = KNA_VDOBYTSIZ(FUNCTION);

   6741   0 000012  B856                                 LDR,R3   R6
          0 000013  D2B0 0000 0000  xsym                 LLH,R5   KNA_VDOBYTSIZ,R3
          0 000016  DF47 000F                            STR,R5   VDOSZ,AUTO

      990     6742        /*
      991     6743             HDR$->VDO = '0'B;
      992     6744                                          */
      993     6745    1      VDO1.WD1 = 0 ;

   6745   0 000018  8706                                 CL       ,B6

      994     6746    1      HDR$->KV$VDO.FNC = FUNCTION;

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:172  
   6746   0 000019  C805                                 LDR,R4   ,B5
          0 00001A  C786                                 STH,R4   ,B6

      995     6747    1      MSGSZ = K$RWPARM.MSGSZ;

   6747   0 00001B  CCC7 0006                            LDB,B4   @K$RWPARM,AUTO
          0 00001D  C844 0002                            LDR,R4   2,B4
          0 00001F  CF47 000E                            STR,R4   MSGSZ,AUTO

      996     6748    1      HDR$->KV$VDO.STR = K$RWPARM.STR;

   6748   0 000021  A844 001D                            LDR,R2   29,B4
          0 000023  AA86                                 SRM,R2,'007F'X    ,B6
          0 000024       007F

      997     6749
      998     6750    2      DO CASE (FUNCTION);

   6750   0 000025  A805                                 LDR,R2   ,B5
          0 000026  2D23                                 CMV,R2   35
          0 000027  0281 014E                            BGE      s:6850,PREL
          0 000029  9820 0000 002F  00                   LDR,R1   s:6750+10,R2
          0 00002C  8390 0000 0052  00                   JMP      s:6753,R1
          0 00002F       0124                            DC       s:6850,PREL
          0 000030       0124                            DC       s:6850,PREL
          0 000031       0000                            DC       s:6753,PREL
          0 000032       0124                            DC       s:6850,PREL
          0 000033       0124                            DC       s:6850,PREL
          0 000034       005F                            DC       s:6779,PREL
          0 000035       005F                            DC       s:6779,PREL
          0 000036       0025                            DC       s:6764,PREL
          0 000037       0097                            DC       s:6798,PREL
          0 000038       008B                            DC       s:6794,PREL
          0 000039       0124                            DC       s:6850,PREL
          0 00003A       0124                            DC       s:6850,PREL
          0 00003B       009F                            DC       s:6802,PREL
          0 00003C       0124                            DC       s:6850,PREL
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:173  
          0 00003D       0124                            DC       s:6850,PREL
          0 00003E       0124                            DC       s:6850,PREL
          0 00003F       0124                            DC       s:6850,PREL
          0 000040       0124                            DC       s:6850,PREL
          0 000041       0124                            DC       s:6850,PREL
          0 000042       00BB                            DC       s:6813,PREL
          0 000043       0124                            DC       s:6850,PREL
          0 000044       0124                            DC       s:6850,PREL
          0 000045       00C1                            DC       s:6816,PREL
          0 000046       00F2                            DC       s:6830,PREL
          0 000047       0124                            DC       s:6850,PREL
          0 000048       0124                            DC       s:6850,PREL
          0 000049       00FE                            DC       s:6835,PREL
          0 00004A       0118                            DC       s:6846,PREL
          0 00004B       0124                            DC       s:6850,PREL
          0 00004C       0124                            DC       s:6850,PREL
          0 00004D       0124                            DC       s:6850,PREL
          0 00004E       0124                            DC       s:6850,PREL
          0 00004F       0124                            DC       s:6850,PREL
          0 000050       00B1                            DC       s:6807,PREL
          0 000051       0015                            DC       s:6758,PREL

      999     6751
     1000     6752    2       CASE (%KV_VDO_FNC_BLKDAT);

     1001     6753    2         HDR$->KV$VDO_BLKDAT.RCRBYTSIZ = K$RWPARM.MAXRCRBYTSIZ/256*512 + MOD(K$RWPARM.
              6753                  MAXRCRBYTSIZ,256);

   6753   0 000052  E844 0020                            LDR,R6   32,B4
          0 000054  6048                                 SOR,R6   8
          0 000055  B844 0020                            LDR,R3   32,B4
          0 000057  B570 00FF                            AND,R3   255,IMO
          0 000059  6009                                 SOL,R6   9
          0 00005A  EA53                                 ADD,R6   R3
          0 00005B  EF46 0001                            STR,R6   1,B6

     1002     6754    2         VDO1.WD3 = 0 ;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:174  

   6754   0 00005D  8746 0002                            CL       2,B6

     1003     6755    2         HDR$->KV$VDO_BLKDAT.RSN = K$RWPARM.RSN;

   6755   0 00005F  B844 0010                            LDR,R3   16,B4
          0 000061  B570 00FF                            AND,R3   255,IMO
          0 000063  B7C6 0002                            STH,R3   2,B6
          0 000065  0F81 0115                            B        s:6855,PREL

     1004     6756
     1005     6757    2       CASE (%KV_VDO_FNC_CLSSTR);

     1006     6758    2         VDO1.WD2 = 0 ;

   6758   0 000067  8746 0001                            CL       1,B6

     1007     6759    2         HDR$->KV$VDO_CLSSTR.DLT = K$RWPARM.VDOFLGS.DLTSTR;

   6759   0 000069  A844 001C                            LDR,R2   28,B4
          0 00006B  2008                                 SOL,R2   8
          0 00006C  AAC6 0001                            SRM,R2,'8000'X    1,B6
          0 00006E       8000

     1008     6760    2         HDR$->KV$VDO_CLSSTR.NEWSSN = K$RWPARM.VDOFLGS.NEWSSN;

   6760   0 00006F  A844 001C                            LDR,R2   28,B4
          0 000071  2008                                 SOL,R2   8
          0 000072  AAC6 0001                            SRM,R2,'4000'X    1,B6
          0 000074       4000
          0 000075  0F81 0105                            B        s:6855,PREL

     1009     6761
     1010     6762
     1011     6763    2       CASE (%KV_VDO_FNC_DCLFLD);

     1012     6764    2         HDR$->KV$VDO_DCLFLD.LIN = FPT$DCLFLD_V.LIN;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:175  

   6764   0 000077  BCC4 0021                            LDB,B3   33,B4
          0 000079  E843 0001                            LDR,R6   1,B3
          0 00007B  EF46 0001                            STR,R6   1,B6

     1013     6765    2         HDR$->KV$VDO_DCLFLD.CLM = FPT$DCLFLD_V.CLM;

   6765   0 00007D  BCC4 0021                            LDB,B3   33,B4
          0 00007F  B843 0002                            LDR,R3   2,B3
          0 000081  BF46 0002                            STR,R3   2,B6

     1014     6766    2         HDR$->KV$VDO_DCLFLD.WDT = FPT$DCLFLD_V.WDT;

   6766   0 000083  BCC4 0021                            LDB,B3   33,B4
          0 000085  A2C3 0004                            LLH,R2   4,B3
          0 000087  AF46 0003                            STR,R2   3,B6

     1015     6767    2         HDR$->KV$VDO_DCLFLD.ID = FPT$DCLFLD_V.ID;

   6767   0 000089  BCC4 0021                            LDB,B3   33,B4
          0 00008B  9843 0003                            LDR,R1   3,B3
          0 00008D  9F46 0005                            STR,R1   5,B6

     1016     6768    2         IF VLP$FLDATR.ABSGRPRND ~= 0

   6768   0 00008F  BCC4 0013                            LDB,B3   19,B4
          0 000091  E2C3 0002                            LLH,R6   2,B3
          0 000093  6901 000D                            BEZ,R6   s:6775,PREL

     1017     6769    3         THEN DO;

     1018     6770    3              HDR$->KV$VDO_DCLFLD.GRPRND =

   6770   0 000095  E2C3 0002                            LLH,R6   2,B3
          0 000097  6008                                 SOL,R6   8
          0 000098  6048                                 SOR,R6   8
          0 000099  EAC6 0004                            SRM,R6,'00FF'X    4,B6
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:176  
          0 00009B       00FF

     1019     6771    3                BINBIT(VLP$FLDATR.ABSGRPRND,SIZEB(KV$VDO_DCLFLD.GRPRND));
     1020     6772    3              HDR$->KV$VDO_DCLFLD.GRPRND.ABS = '1'B;

   6772   0 00009C  8946 0004                            LBT,'0080'X       4,B6
   6772   0 00009E       0080

     1021     6773    3              END;

   6773   0 00009F  0F81 0007                            B        s:6776,PREL

     1022     6774    2         ELSE
     1023     6775    2              HDR$->KV$VDO_DCLFLD.GRPRND = VLP$FLDATR.GRPRND;

   6775   0 0000A1  E283                                 LLH,R6   ,B3
          0 0000A2  6008                                 SOL,R6   8
          0 0000A3  6048                                 SOR,R6   8
          0 0000A4  EAC6 0004                            SRM,R6,'00FF'X    4,B6
          0 0000A6       00FF

     1024     6776    2         HDR$->KV$VDO_DCLFLD.QLF = VLP$FLDATR.QLF;

   6776   0 0000A7  BCC4 0013                            LDB,B3   19,B4
          0 0000A9  E2C3 0001                            LLH,R6   1,B3
          0 0000AB  6008                                 SOL,R6   8
          0 0000AC  6048                                 SOR,R6   8
          0 0000AD  E7C6 0004                            STH,R6   4,B6
          0 0000AF  0F81 00CB                            B        s:6855,PREL

     1025     6777
     1026     6778    2       CASE (%KV_VDO_FNC_DAT,%KV_VDO_FNC_DAT_IMD);

     1027     6779    2         VDO1.WD2 = 0 ;

   6779   0 0000B1  8746 0001                            CL       1,B6

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:177  
     1028     6780    2         IF K$RWPARM.DVE.DVBYTE.VFC

   6780   0 0000B3  82C4 000F                            LB,'4000'X        15,B4
   6780   0 0000B5       4000
          0 0000B6  0581 000B                            BBF      s:6785,PREL

     1029     6781    3         THEN DO;

     1030     6782    3              HDR$->KV$VDO_DAT.DATCTRCHRTYP = %KV_DATCTRCHRTYP_VFC;

   6782   0 0000B8  A870 0800                            LDR,R2   2048,IMO
          0 0000BA  AAC6 0001                            SRM,R2,'0C00'X    1,B6
          0 0000BC       0C00

     1031     6783    3              HDR$->KV$VDO_DAT.DATCTRCHR = K$RWPARM.DVE.VFC;

   6783   0 0000BD  9844 000F                            LDR,R1   15,B4
          0 0000BF  9AC6 0001                            SRM,R1,'00FF'X    1,B6
          0 0000C1       00FF

     1032     6784    3              END;

     1033     6785    2         IF K$RWPARM.EOM_EOR

   6785   0 0000C2  82C4 0010                            LB,'2000'X        16,B4
   6785   0 0000C4       2000
          0 0000C5  0581 000B                            BBF      s:6790,PREL

     1034     6786    3         THEN DO;

     1035     6787    3              HDR$->KV$VDO_DAT.DATCTRCHRTYP = %KV_DATCTRCHRTYP_ACT;

   6787   0 0000C7  A870 0400                            LDR,R2   1024,IMO
          0 0000C9  AAC6 0001                            SRM,R2,'0C00'X    1,B6
          0 0000CB       0C00

     1036     6788    3              HDR$->KV$VDO_DAT.DATCTRCHR = K$RWPARM.DVE.EOMCHAR;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:178  

   6788   0 0000CC  9844 000F                            LDR,R1   15,B4
          0 0000CE  9AC6 0001                            SRM,R1,'00FF'X    1,B6
          0 0000D0       00FF

     1037     6789    3              END;

     1038     6790    2         IF K$RWPARM.DVE.DVBYTE.TRANS

   6790   0 0000D1  82C4 000F                            LB,'1000'X        15,B4
   6790   0 0000D3       1000
          0 0000D4  0581 00A6                            BBF      s:6855,PREL

     1039     6791    2         THEN HDR$->KV$VDO_DAT.DATMOD = %KV_DATMOD_TRN;

   6791   0 0000D6  A870 0100                            LDR,R2   256,IMO
          0 0000D8  AAC6 0001                            SRM,R2,'0300'X    1,B6
          0 0000DA       0300
          0 0000DB  0F81 009F                            B        s:6855,PREL

     1040     6792
     1041     6793    2       CASE (%KV_VDO_FNC_DLT);

     1042     6794    2         VDO1.WD2 = 0 ;

   6794   0 0000DD  8746 0001                            CL       1,B6

     1043     6795    2         HDR$->KV$VDO_DLT.CTLFLG = FPT$TRMPRG_V.CTLFLG;

   6795   0 0000DF  BCC4 0021                            LDB,B3   33,B4
          0 0000E1  A2C3 0001                            LLH,R2   1,B3
          0 0000E3  2008                                 SOL,R2   8
          0 0000E4  2048                                 SOR,R2   8
          0 0000E5  A7C6 0001                            STH,R2   1,B6
          0 0000E7  0F81 0093                            B        s:6855,PREL

     1044     6796
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:179  
     1045     6797    2       CASE (%KV_VDO_FNC_DCLSTR);

     1046     6798    2         VDO1.WD2 = 0 ;

   6798   0 0000E9  8746 0001                            CL       1,B6

     1047     6799    2         HDR$->KV$VDO_DCLSTR.STRID = K$RWPARM.STRID;

   6799   0 0000EB  A2C4 001C                            LLH,R2   28,B4
          0 0000ED  A7C6 0001                            STH,R2   1,B6
          0 0000EF  0F81 008B                            B        s:6855,PREL

     1048     6800
     1049     6801    2       CASE (%KV_VDO_FNC_ERS);

     1050     6802    2         VDO1.WD2 = 0 ;

   6802   0 0000F1  8746 0001                            CL       1,B6

     1051     6803    2         HDR$->KV$VDO_ERS.PRT = FPT$ERASE_V.PRT;

   6803   0 0000F3  BCC4 0021                            LDB,B3   33,B4
          0 0000F5  A843 0002                            LDR,R2   2,B3
          0 0000F7  AAC6 0001                            SRM,R2,'8000'X    1,B6
          0 0000F9       8000

     1052     6804    2         HDR$->KV$VDO_ERS.CNS = FPT$ERASE_V.CNS;

   6804   0 0000FA  BCC4 0021                            LDB,B3   33,B4
          0 0000FC  A843 0002                            LDR,R2   2,B3
          0 0000FE  AAC6 0001                            SRM,R2,'4000'X    1,B6
          0 000100       4000
          0 000101  0F81 0079                            B        s:6855,PREL

     1053     6805
     1054     6806    2       CASE (%KV_VDO_FNC_OPNSTR);

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:180  
     1055     6807    2         VDO1.WD2 = 0 ;

   6807   0 000103  8746 0001                            CL       1,B6

     1056     6808    2         VDO1.WD3 = 0 ;

   6808   0 000105  8746 0002                            CL       2,B6

     1057     6809    2         HDR$->KV$VDO_OPNSTR.ORG = K$RWPARM.ORG;

   6809   0 000107  A2C4 001C                            LLH,R2   28,B4
          0 000109  A7C6 0001                            STH,R2   1,B6
          0 00010B  0F81 006F                            B        s:6855,PREL

     1058     6810
     1059     6811
     1060     6812    2       CASE (%KV_VDO_FNC_PRM_SET);

     1061     6813    2         MSGSZ = MSGSZ + K$RWPARM.VSZ;

   6813   0 00010D  CA44 0025                            ADD,R4   37,B4
          0 00010F  CF47 000E                            STR,R4   MSGSZ,AUTO
          0 000111  0F81 0069                            B        s:6855,PREL

     1062     6814
     1063     6815    2       CASE (%KV_VDO_FNC_RQSDAT);

     1064     6816    2         VDO1.WD5 = 0 ;

   6816   0 000113  8746 0004                            CL       4,B6

     1065     6817    2         HDR$->KV$VDO_RQSDAT.EOFNO_DAT = K$RWPARM.DVE.DVBYTE.NODAT;

   6817   0 000115  A844 000F                            LDR,R2   15,B4
          0 000117  AAC6 0004                            SRM,R2,'0400'X    4,B6
          0 000119       0400

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:181  
     1066     6818    2         HDR$->KV$VDO_RQSDAT.RE_RED = K$RWPARM.DVE.DVBYTE.REREAD;

   6818   0 00011A  A844 000F                            LDR,R2   15,B4
          0 00011C  2041                                 SOR,R2   1
          0 00011D  AAC6 0004                            SRM,R2,'2000'X    4,B6
          0 00011F       2000

     1067     6819        /*    HDR$->KV$VDO_RQSDAT.BP = K$RWPARM.DVE.DVBYTE.BP; if ORG=SE ever works */
     1068     6820    2         HDR$->KV$VDO_RQSDAT.READMLT = K$RWPARM.READMLT;

   6820   0 000120  A844 0010                            LDR,R2   16,B4
          0 000122  2047                                 SOR,R2   7
          0 000123  AAC6 0004                            SRM,R2,'0080'X    4,B6
          0 000125       0080

     1069     6821    2         IF K$RWPARM.DVE.DVBYTE.TRANS

   6821   0 000126  82C4 000F                            LB,'1000'X        15,B4
   6821   0 000128       1000
          0 000129  0581 0006                            BBF      s:6824,PREL

     1070     6822    2         THEN
     1071     6823    2              HDR$->KV$VDO_RQSDAT.DATMOD = %KV_DATMOD_TRN;

   6823   0 00012B  A870 0800                            LDR,R2   2048,IMO
          0 00012D  AAC6 0004                            SRM,R2,'1800'X    4,B6
          0 00012F       1800

     1072     6824    2         HDR$->KV$VDO_RQSDAT.MAXNMBRCR = K$RWPARM.MAXNMBRCR;

   6824   0 000130  A844 001E                            LDR,R2   30,B4
          0 000132  AF46 0002                            STR,R2   2,B6

     1073     6825    2         HDR$->KV$VDO_RQSDAT.MAXNMBBYT = K$RWPARM.MAXNMBBYT;

   6825   0 000134  9844 001F                            LDR,R1   31,B4
          0 000136  9F46 0003                            STR,R1   3,B6
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:182  

     1074     6826    2         HDR$->KV$VDO_RQSDAT.MAXRCRBYTSIZ = K$RWPARM.MAXRCRBYTSIZ;

   6826   0 000138  E844 0020                            LDR,R6   32,B4
          0 00013A  EF46 0001                            STR,R6   1,B6

     1075     6827    2         HDR$->KV$VDO_RQSDAT.WAT = K$RWPARM.VDOFLGS.WAIT;

   6827   0 00013C  B844 001C                            LDR,R3   28,B4
          0 00013E  3005                                 SOL,R3   5
          0 00013F  BAC6 0004                            SRM,R3,'0200'X    4,B6
          0 000141       0200
          0 000142  0F81 0038                            B        s:6855,PREL

     1076     6828
     1077     6829    2       CASE (%KV_VDO_FNC_RQSPRM);

     1078     6830    2         VDO1.WD2 = 0 ;

   6830   0 000144  8746 0001                            CL       1,B6

     1079     6831    2         HDR$->KV$VDO_RQSPRM.PRMID = K$RWPARM.PRMID;

   6831   0 000146  A844 0026                            LDR,R2   38,B4
          0 000148  A7C6 0001                            STH,R2   1,B6

     1080     6832    2         HDR$->KV$VDO_RQSPRM.MAXNMBBYT = K$RWPARM.MAXNMBBYT;

   6832   0 00014A  A844 001F                            LDR,R2   31,B4
          0 00014C  AF46 0002                            STR,R2   2,B6
          0 00014E  0F81 002C                            B        s:6855,PREL

     1081     6833
     1082     6834    2       CASE (%KV_VDO_FNC_SLCGRPRND);

     1083     6835    2         VDO1.WD2 = 0 ;

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:183  
   6835   0 000150  8746 0001                            CL       1,B6

     1084     6836    2         IF VLP$FLDATR.ABSGRPRND ~= 0

   6836   0 000152  BCC4 0013                            LDB,B3   19,B4
          0 000154  A2C3 0002                            LLH,R2   2,B3
          0 000156  2901 000C                            BEZ,R2   s:6843,PREL

     1085     6837    3         THEN DO;

     1086     6838    3              HDR$->KV$VDO_SLCGRPRND.GRPRND =

   6838   0 000158  92C3 0002                            LLH,R1   2,B3
          0 00015A  1008                                 SOL,R1   8
          0 00015B  1048                                 SOR,R1   8
          0 00015C  97C6 0001                            STH,R1   1,B6

     1087     6839    3                BINBIT(VLP$FLDATR.ABSGRPRND,SIZEB(KV$VDO_SLCGRPRND.GRPRND));
     1088     6840    3              HDR$->KV$VDO_SLCGRPRND.GRPRND.ABS = '1'B;

   6840   0 00015E  8946 0001                            LBT,'8000'X       1,B6
   6840   0 000160       8000

     1089     6841    3              END;

   6841   0 000161  0F81 0019                            B        s:6855,PREL

     1090     6842    2         ELSE
     1091     6843    2              HDR$->KV$VDO_SLCGRPRND.GRPRND = VLP$FLDATR.GRPRND;

   6843   0 000163  9283                                 LLH,R1   ,B3
          0 000164  1008                                 SOL,R1   8
          0 000165  1048                                 SOR,R1   8
          0 000166  97C6 0001                            STH,R1   1,B6
          0 000168  0F81 0012                            B        s:6855,PREL

     1092     6844
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:184  
     1093     6845    2       CASE (%KV_VDO_FNC_SLCQLF);

     1094     6846    2         VDO1.WD2 = 0 ;

   6846   0 00016A  8746 0001                            CL       1,B6

     1095     6847    2         HDR$->KV$VDO_SLCQLF.QLF = VLP$FLDATR.QLF;

   6847   0 00016C  BCC4 0013                            LDB,B3   19,B4
          0 00016E  A2C3 0001                            LLH,R2   1,B3
          0 000170  2008                                 SOL,R2   8
          0 000171  2048                                 SOR,R2   8
          0 000172  A7C6 0001                            STH,R2   1,B6
          0 000174  0F81 0006                            B        s:6855,PREL

     1096     6848
     1097     6849    2       CASE (ELSE) ;

     1098     6850    2         IF VDOSZ > 2 THEN

   6850   0 000176  5D02                                 CMV,R5   2
          0 000177  0381 0003                            BLE      s:6855,PREL

     1099     6851    2              VDO1.WD2 =  0 ;

   6851   0 000179  8746 0001                            CL       1,B6

     1100     6852
     1101     6853
     1102     6854    2         END /* CASES */;

     1103     6855    1      LHDR$ = HDR$;

   6855   0 00017B  EFC7 000C                            STB,B6   LHDR$,AUTO

     1104     6856    1      HDR$ = PINCRW(HDR$,VDOSZ/2);

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:185  
   6856   0 00017D  5041                                 SOR,R5   1
          0 00017E  F855                                 LDR,R7   R5
          0 00017F  6C00                                 LDV,R6   0
          0 000180  8447 000A                            AID      HDR$,AUTO
          0 000182  8D47 000A                            SDI      HDR$,AUTO

     1105     6857        /* CG message type */
     1106     6858    1      IF K$RWPARM.MSGTYP ~= ' '

   6858   0 000184  BB80 0000 0000  01                   LAB,B3   0
          0 000187  0022                                 ACM      ;
          0 000188       4804 0007                                ALPHANUM(7,B4,,8,FILL),;
          0 00018A       4103 0000                                ALPHANUM(0,B3,,1,FILL)
          0 00018C  5381 0039                            CBE      s:6873,PREL

     1107     6859    2      THEN DO;

     1108     6860    2           IF K$RWPARM.MSGID ~= 0

   6860   0 00018E  8CC4 0011                            LDI      17,B4
          0 000190  84F0 0000 0000                       SID      0,IMO
          0 000193  6981 0003                            BNEZ,R6  s:6862,PREL
          0 000195  7901 0018                            BEZ,R7   s:6867,PREL

     1109     6861    3           THEN DO;

     1110     6862    3                HDR$->KV$VDOVLP_CG_MSGID = KNA_VDOVLP_CG_MSGID;

   6862   0 000197  AB80 0000 0000  xsym                 LAB,B2   KNA_VDOVLP_CG_MSGID
          0 00019A  2C00                                 LDV,R2   0
          0 00019B  6C0C                                 LDV,R6   12
          0 00019C  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 00019E  3C00                                 LDV,R3   0
          0 00019F  0008                                 MMM

     1111     6863    3                HDR$->KV$VDOVLP_CG_MSGID.CG_MSGIDXT = K$RWPARM.MSGIDXT;

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:186  
   6863   0 0001A0  8CC4 0013                            LDI      19,B4
          0 0001A2  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 0001A4  8D43 0004                            SDI      4,B3

     1112     6864    3                HDR$->KV$VDOVLP_CG_MSGID.CG_MSGID=K$RWPARM.MSGID;

   6864   0 0001A6  8CC4 0011                            LDI      17,B4
          0 0001A8  8D43 0002                            SDI      2,B3

     1113     6865    3                HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_CG_MSGID));

   6865   0 0001AA  ABC3 0006                            LAB,B2   6,B3
          0 0001AC  AFC7 000A                            STB,B2   HDR$,AUTO

     1114     6866    3                END;

     1115     6867    2           HDR$->KV$VDOVLP_CG_MSGTYP = KNA_VDOVLP_CG_MSGTYP;

   6867   0 0001AE  AB80 0000 0000  xsym                 LAB,B2   KNA_VDOVLP_CG_MSGTYP
          0 0001B1  2C00                                 LDV,R2   0
          0 0001B2  6C0C                                 LDV,R6   12
          0 0001B3  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 0001B5  3C00                                 LDV,R3   0
          0 0001B6  0008                                 MMM

     1116     6868    2           HDR$->KV$VDOVLP_CG_MSGTYP.CG_MSGTYP = K$RWPARM.MSGTYP;

   6868   0 0001B7  AB84                                 LAB,B2   ,B4
          0 0001B8  2C0E                                 LDV,R2   14
          0 0001B9  6C08                                 LDV,R6   8
          0 0001BA  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 0001BC  3C04                                 LDV,R3   4
          0 0001BD  0008                                 MMM

     1117     6869    2           LHDR$ = HDR$;

   6869   0 0001BE  BCC7 000A                            LDB,B3   HDR$,AUTO
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:187  
          0 0001C0  BFC7 000C                            STB,B3   LHDR$,AUTO

     1118     6870    2           HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_CG_MSGTYP));

   6870   0 0001C2  9BC3 0006                            LAB,B1   6,B3
          0 0001C4  9FC7 000A                            STB,B1   HDR$,AUTO

     1119     6871    2           END;

     1120     6872
     1121     6873    1      IF K$RWPARM.STATION ~= ' '

   6873   0 0001C6  BB80 0000 0000  01                   LAB,B3   0
          0 0001C9  0022                                 ACM      ;
          0 0001CA       4804 0003                                ALPHANUM(3,B4,,8,FILL),;
          0 0001CC       4103 0000                                ALPHANUM(0,B3,,1,FILL)
          0 0001CE  5381 0019                            CBE      s:6881,PREL

     1122     6874    2      THEN DO;

     1123     6875    2           HDR$->KV$VDOVLP_CG_STA = KNA_VDOVLP_CG_STA;

   6875   0 0001D0  AB80 0000 0000  xsym                 LAB,B2   KNA_VDOVLP_CG_STA
          0 0001D3  2C00                                 LDV,R2   0
          0 0001D4  6C0C                                 LDV,R6   12
          0 0001D5  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 0001D7  3C00                                 LDV,R3   0
          0 0001D8  0008                                 MMM

     1124     6876    2           HDR$->KV$VDOVLP_CG_STA.CG_STA = K$RWPARM.STATION;

   6876   0 0001D9  AB84                                 LAB,B2   ,B4
          0 0001DA  2C06                                 LDV,R2   6
          0 0001DB  6C08                                 LDV,R6   8
          0 0001DC  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 0001DE  3C04                                 LDV,R3   4
          0 0001DF  0008                                 MMM
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:188  

     1125     6877    2           LHDR$ = HDR$;

   6877   0 0001E0  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 0001E2  BFC7 000C                            STB,B3   LHDR$,AUTO

     1126     6878    2           HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_CG_STA));

   6878   0 0001E4  9BC3 0006                            LAB,B1   6,B3
          0 0001E6  9FC7 000A                            STB,B1   HDR$,AUTO

     1127     6879    2           END;

     1128     6880
     1129     6881    1      IF K$RWPARM.MSG_ERRCODE ~= '0'B

   6881   0 0001E8  BB80 0000 0000  01                   LAB,B3   0
          0 0001EB  5C01                                 LDV,R5   1
          0 0001EC  0022                                 ACM      ;
          0 0001ED       4404 001A                                ALPHANUM(26,B4,,4,FILL),;
          0 0001EF       4003 0001                                ALPHANUM(1,B3,,R5,FILL)
          0 0001F1  5381 0016                            CBE      s:6889,PREL

     1130     6882    2      THEN DO;

     1131     6883    2           HDR$->KV$VDOVLP_ERR = KNA_VDOVLP_ERR;

   6883   0 0001F3  AB80 0000 0000  xsym                 LAB,B2   KNA_VDOVLP_ERR
          0 0001F6  2C00                                 LDV,R2   0
          0 0001F7  6C06                                 LDV,R6   6
          0 0001F8  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 0001FA  3C00                                 LDV,R3   0
          0 0001FB  0008                                 MMM

     1132     6884    2           HDR$->KV$VDOVLP_ERR.ERRCODE=K$RWPARM.MSG_ERRCODE;

   6884   0 0001FC  8CC4 001A                            LDI      26,B4
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:189  
          0 0001FE  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 000200  8D43 0001                            SDI      1,B3

     1133     6885    2           LHDR$ = HDR$;

   6885   0 000202  BFC7 000C                            STB,B3   LHDR$,AUTO

     1134     6886    2           HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_ERR));

   6886   0 000204  ABC3 0003                            LAB,B2   3,B3
          0 000206  AFC7 000A                            STB,B2   HDR$,AUTO

     1135     6887    2           END;

     1136     6888
     1137     6889    1      IF K$RWPARM.KEY$ ~= ADDR(NIL)

   6889   0 000208  8DC4 0023                            CMN      35,B4
          0 00020A  0901 004E                            BE       s:6910,PREL

     1138     6890    1      THEN IF K$RWPARM.KEYTYPE = %G_KEYTYPE_FLDID#

   6890   0 00020C  E2C4 0028                            LLH,R6   40,B4
          0 00020E  6D01                                 CMV,R6   1
          0 00020F  0981 0018                            BNE      s:6899,PREL

     1139     6891    2           THEN DO;

     1140     6892    2                HDR$->KV$VDOVLP_FLDID = KNA_VDOVLP_FLDID;

   6892   0 000211  8C80 0000 0000  xsym                 LDI      KNA_VDOVLP_FLDID
          0 000214  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 000216  8D03                                 SDI      ,B3

     1141     6893    2                HDR$->KV$VDOVLP_FLDID.BYTSIZ = K$RWPARM.KEYSZ;

   6893   0 000217  C844 0028                            LDR,R4   40,B4
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:190  
          0 000219  CA83                                 SRM,R4,'00FF'X    ,B3
          0 00021A       00FF

     1142     6894    2                HDR$->KV$VDOVLP_FLDID.FLDID = K$RWPARM.KEY$->FLDID;

   6894   0 00021B  ACC4 0023                            LDB,B2   35,B4
          0 00021D  E802                                 LDR,R6   ,B2
          0 00021E  EF43 0001                            STR,R6   1,B3

     1143     6895    2                LHDR$ = HDR$;

   6895   0 000220  BFC7 000C                            STB,B3   LHDR$,AUTO

     1144     6896    2                HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_FLDID));

   6896   0 000222  ABC3 0002                            LAB,B2   2,B3
          0 000224  AFC7 000A                            STB,B2   HDR$,AUTO

     1145     6897    2                END;

   6897   0 000226  0F81 0032                            B        s:6910,PREL

     1146     6898    2           ELSE DO;

     1147     6899    2                HDR$->KV$VDOVLP_KEY = KNA_VDOVLP_KEY;

   6899   0 000228  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 00022A  C800 0000 0000  xsym                 LDR,R4   KNA_VDOVLP_KEY
          0 00022D  CF03                                 STR,R4   ,B3

     1148     6900    2                HDR$->KV$VDOVLP_KEY.BYTSIZ = K$RWPARM.KEYSZ;

   6900   0 00022E  E844 0028                            LDR,R6   40,B4
          0 000230  EA83                                 SRM,R6,'00FF'X    ,B3
          0 000231       00FF

     1149     6901    2                IF K$RWPARM.KEYTYPE ~= %G_KEYTYPE_COORD#
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:191  

   6901   0 000232  E2C4 0028                            LLH,R6   40,B4
          0 000234  6D02                                 CMV,R6   2
          0 000235  0901 0005                            BE       s:6904,PREL

     1150     6902    2                THEN
     1151     6903    2                     HDR$->KV$VDOVLP_KEY.TYP = %KV_VDOVLP_TYP_ENTSRD;

   6903   0 000237  C870 0A00                            LDR,R4   2560,IMO
          0 000239  CA83                                 SRM,R4,'7F00'X    ,B3
          0 00023A       7F00

     1152     6904    2                LHDR$ = HDR$;

   6904   0 00023B  BFC7 000C                            STB,B3   LHDR$,AUTO

     1153     6905    2                HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_KEY));

   6905   0 00023D  ABC3 0001                            LAB,B2   1,B3
          0 00023F  AFC7 000A                            STB,B2   HDR$,AUTO

     1154     6906    2                HDR$->KEY = K$RWPARM.KEY$->KEY;

   6906   0 000241  E844 0028                            LDR,R6   40,B4
          0 000243  E570 00FF                            AND,R6   255,IMO
          0 000245  9CC4 0023                            LDB,B1   35,B4
          0 000247  AB81                                 LAB,B2   ,B1
          0 000248  2C00                                 LDV,R2   0
          0 000249  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 00024B  3C00                                 LDV,R3   0
          0 00024C  0008                                 MMM

     1155     6907    2                HDR$ = PINCRW(HDR$,(K$RWPARM.KEYSZ+1)/2);

   6907   0 00024D  E844 0028                            LDR,R6   40,B4
          0 00024F  E570 00FF                            AND,R6   255,IMO
          0 000251  6E01                                 ADV,R6   1
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:192  
          0 000252  6041                                 SOR,R6   1
          0 000253  F856                                 LDR,R7   R6
          0 000254  6C00                                 LDV,R6   0
          0 000255  8447 000A                            AID      HDR$,AUTO
          0 000257  8D47 000A                            SDI      HDR$,AUTO

     1156     6908    2                END;

     1157     6909
     1158     6910    1      IF K$RWPARM.MRKTYP ~= 0

   6910   0 000259  E2C4 001D                            LLH,R6   29,B4
          0 00025B  6901 0037                            BEZ,R6   s:6931,PREL

     1159     6911    2      THEN DO;

     1160     6912    2           HDR$->VDOVLP_MRK = KNA_VDOVLP_MRK;

   6912   0 00025D  AB80 0000 0000  xsym                 LAB,B2   KNA_VDOVLP_MRK
          0 000260  2C00                                 LDV,R2   0
          0 000261  6C08                                 LDV,R6   8
          0 000262  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 000264  3C00                                 LDV,R3   0
          0 000265  0008                                 MMM

     1161     6913    2           HDR$->VDOVLP_MRK.MRKTYP = K$RWPARM.MRKTYP;

   6913   0 000266  E2C4 001D                            LLH,R6   29,B4
          0 000268  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 00026A  EAC3 0001                            SRM,R6,'00FF'X    1,B3
          0 00026C       00FF

     1162     6914    2           IF FUNCTION = %KV_VDO_FNC_MRK

   6914   0 00026D  E805                                 LDR,R6   ,B5
          0 00026E  6D1F                                 CMV,R6   31
          0 00026F  0981 0004                            BNE      s:6917,PREL
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:193  

     1163     6915    2           THEN
     1164     6916    2                HDR$->VDOVLP_MRK.RSP = '1'B;

   6916   0 000271  8943 0001                            LBT,'8000'X       1,B3
   6916   0 000273       8000

     1165     6917    2           IF K$RWPARM.MRKTYP = %KV_VDOMRKTYP_LSTRCRID

   6917   0 000274  E2C4 001D                            LLH,R6   29,B4
          0 000276  6D02                                 CMV,R6   2
          0 000277  0981 000E                            BNE      s:6924,PREL

     1166     6918    3           THEN DO;

     1167     6919    3                HDR$->VDOVLP_MRK.BMRK.BLK# = K$RWPARM.BLKREC.BLKU#;

   6919   0 000279  C844 000D                            LDR,R4   13,B4
          0 00027B  CF43 0002                            STR,R4   2,B3

     1168     6920    3                HDR$->VDOVLP_MRK.BMRK.REC# = K$RWPARM.BLKREC.RECU#;

   6920   0 00027D  E844 000E                            LDR,R6   14,B4
          0 00027F  EF43 0003                            STR,R6   3,B3

     1169     6921    3                HDR$->VDOVLP_MRK.BYTSIZ = LENGTHC(K$RWPARM.BLKREC);

   6921   0 000281  3C04                                 LDV,R3   4
          0 000282  BA83                                 SRM,R3,'00FF'X    ,B3
          0 000283       00FF

     1170     6922    3                END;

   6922   0 000284  0F81 0008                            B        s:6927,PREL

     1171     6923    3           ELSE DO;

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:194  
     1172     6924    3                HDR$->VDOVLP_MRK.ID = K$RWPARM.MARKER;

   6924   0 000286  8CC4 000D                            LDI      13,B4
          0 000288  8D43 0002                            SDI      2,B3

     1173     6925    3                HDR$->VDOVLP_MRK.BYTSIZ = SIZEC(HDR$->VDOVLP_MRK.ID);

   6925   0 00028A  4C04                                 LDV,R4   4
          0 00028B  CA83                                 SRM,R4,'00FF'X    ,B3
          0 00028C       00FF

     1174     6926    3                END;

     1175     6927    2           LHDR$ = HDR$;

   6927   0 00028D  BFC7 000C                            STB,B3   LHDR$,AUTO

     1176     6928    2           HDR$ = PINCRC(HDR$,SIZEC(KNA_VDOVLP_MRK));

   6928   0 00028F  ABC3 0004                            LAB,B2   4,B3
          0 000291  AFC7 000A                            STB,B2   HDR$,AUTO

     1177     6929    2           END;

     1178     6930
     1179     6931    1      IF (FUNCTION = %KV_VDO_FNC_DAT OR FUNCTION = %KV_VDO_FNC_DAT_IMD

   6931   0 000293  E805                                 LDR,R6   ,B5
          0 000294  6D05                                 CMV,R6   5
          0 000295  0901 0007                            BE       s:6931+10,PREL
          0 000297  6D06                                 CMV,R6   6
          0 000298  0901 0004                            BE       s:6931+10,PREL
          0 00029A  6D1D                                 CMV,R6   29
          0 00029B  0981 0069                            BNE      s:6969,PREL
          0 00029D  89C4 000F                            CMZ      15,B4
          0 00029F  0801 0065                            BAL      s:6969,PREL
          0 0002A1  82C4 000F                            LB,'1000'X        15,B4
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:195  
          0 0002A3       1000
          0 0002A4  0501 0060                            BBT      s:6969,PREL
          0 0002A6  8D84                                 CMN      ,B4
          0 0002A7  0901 005D                            BE       s:6969,PREL
          0 0002A9  C844 0002                            LDR,R4   2,B4
          0 0002AB  4D02                                 CMV,R4   2
          0 0002AC  0A81 0058                            BALE     s:6969,PREL

     1180     6932    1        OR FUNCTION = %KV_VDO_FNC_STT)
     1181     6933    1        AND NOT K$RWPARM.DVE.DVBYTE.BP AND NOT K$RWPARM.DVE.DVBYTE.TRANS
     1182     6934    1        AND K$RWPARM.MSGC$ ~= ADDR(NIL)
     1183     6935    1        AND K$RWPARM.MSGSZ > 2
     1184     6936    2      THEN DO;

     1185     6937    2           TEMP1U = K$RWPARM.MSGSZ - 1 ;

   6937   0 0002AE  4EFF                                 ADV,R4   -1
          0 0002AF  CF47 0012                            STR,R4   TEMP1U,AUTO

     1186     6938    2           TEMP3U = TEMP1U / 2 ;

   6938   0 0002B1  4041                                 SOR,R4   1
          0 0002B2  CF47 0013                            STR,R4   TEMP3U,AUTO

     1187     6939    2           TEMP2S = 0 ;

   6939   0 0002B4  8747 000F                            CL       VDOSZ,AUTO

     1188     6940    2           OP$ = PINCRC(K$RWPARM.MSGC$,TEMP1U);

   6940   0 0002B6  8C84                                 LDI      ,B4
          0 0002B7  7031                                 DCL,R7   1
          0 0002B8  8D47 0014                            SDI      TEMP3U+1,AUTO
          0 0002BA  F847 0012                            LDR,R7   TEMP1U,AUTO
          0 0002BC  6C00                                 LDV,R6   0
          0 0002BD  8447 0014                            AID      TEMP3U+1,AUTO
          0 0002BF  7071                                 DCR,R7   1
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:196  
          0 0002C0  8D47 0010                            SDI      OP$,AUTO

     1189     6941    2           IF OP$1.HIBIT = '1'B

   6941   0 0002C2  89C7 0010                            CMZ      OP$,AUTO
          0 0002C4  0881 000D                            BAGE     s:6948,PREL

     1190     6942    3           THEN DO;

     1191     6943    3                OP$1.HIBIT = '0'B ;

   6943   0 0002C6  8847 0010                            LBF,'8000'X       OP$,AUTO
   6943   0 0002C8       8000

     1192     6944    3                IF OPP$->UBNBSD ~= 8224 /* 32*256 + 32 */ THEN

   6944   0 0002C9  BCC7 0010                            LDB,B3   OP$,AUTO
          0 0002CB  E803                                 LDR,R6   ,B3
          0 0002CC  E970 2020                            CMR,R6   8224,IMO
          0 0002CE  0981 0036                            BNE      s:6969,PREL

     1193     6945    3                     GOTO LOUT ;
     1194     6946    3                GOTO LLUUP1 ;

   6946   0 0002D0  0F81 001B                            B        s:6961,PREL

     1195     6947    3                END ;
     1196     6948    2           IF OPP$->UBNBSD1.HLF1 ~= 32

   6948   0 0002D2  BCC7 0010                            LDB,B3   OP$,AUTO
          0 0002D4  B283                                 LLH,R3   ,B3
          0 0002D5  3D20                                 CMV,R3   32
          0 0002D6  0981 002E                            BNE      s:6969,PREL

     1197     6949    2           THEN GOTO LOUT;
     1198     6950    3           ELSE DO;

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:197  
     1199     6951    3                MSGSZ = MSGSZ - 1;

   6951   0 0002D8  88C7 000E                            DEC      MSGSZ,AUTO

     1200     6952    3                K$RWPARM.MSGSZ = TEMP1S ;

   6952   0 0002DA  A847 0012                            LDR,R2   TEMP1U,AUTO
          0 0002DC  AF44 0002                            STR,R2   2,B4

     1201     6953    3                IF TEMP1S < 3

   6953   0 0002DE  2D03                                 CMV,R2   3
          0 0002DF  0801 0025                            BAL      s:6969,PREL

     1202     6954    3                THEN GOTO LOUT;
     1203     6955    3                END ;

     1204     6956    2   LLUUP:
     1205     6957    2           OPP$=PINCRW(OPP$,-1);

   6957   0 0002E1  ECC7 0010            LLUUP           LDB,B6   OP$,AUTO
          0 0002E3  DBC6 FFFF                            LAB,B5   -1,B6
          0 0002E5  DFC7 0010                            STB,B5   OP$,AUTO

     1206     6958    2           IF OPP$->UBNBSD ~= 8224         /* 32*256 + 32                        */

   6958   0 0002E7  E805                                 LDR,R6   ,B5
          0 0002E8  E970 2020                            CMR,R6   8224,IMO
          0 0002EA  0981 0008                            BNE      s:6966,PREL

     1207     6959    2           THEN GOTO LOUT1;
     1208     6960    2   LLUUP1:
     1209     6961    2           TEMP2S = TEMP2S + 1 ;

   6961   0 0002EC  8AC7 000F            LLUUP1          INC      VDOSZ,AUTO

     1210     6962    2           IF TEMP2S < TEMP3S
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:198  

   6962   0 0002EE  E847 000F                            LDR,R6   VDOSZ,AUTO
          0 0002F0  E947 0013                            CMR,R6   TEMP3U,AUTO
          0 0002F2  086F                                 BAL      s:6955,SPREL

     1211     6963    2           THEN GOTO LLUUP;
     1212     6964
     1213     6965    2   LOUT1:
     1214     6966    2           MSGSZ = MSGSZ - TEMP2S - TEMP2S ;

   6966   0 0002F3  E847 000E            LOUT1           LDR,R6   MSGSZ,AUTO
          0 0002F5  E247 000F                            SUB,R6   VDOSZ,AUTO
          0 0002F7  E247 000F                            SUB,R6   VDOSZ,AUTO
          0 0002F9  EF47 000E                            STR,R6   MSGSZ,AUTO

     1215     6967    2           K$RWPARM.MSGSZ = K$RWPARM.MSGSZ - TEMP2S - TEMP2S ;

   6967   0 0002FB  ECC7 0006                            LDB,B6   @K$RWPARM,AUTO
          0 0002FD  D846 0002                            LDR,R5   2,B6
          0 0002FF  D247 000F                            SUB,R5   VDOSZ,AUTO
          0 000301  D247 000F                            SUB,R5   VDOSZ,AUTO
          0 000303  DF46 0002                            STR,R5   2,B6

     1216     6968
     1217     6969    2           END;

     1218     6970
     1219     6971    1   LOUT:
     1220     6972    1      IF MSGSZ > 0

   6972   0 000305  E847 000E            LOUT            LDR,R6   MSGSZ,AUTO
          0 000307  6901 0021                            BEZ,R6   s:6987,PREL

     1221     6973    2      THEN DO;

     1222     6974    2           LHDR$ = HDR$;

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:199  
   6974   0 000309  ECC7 000A                            LDB,B6   HDR$,AUTO
          0 00030B  EFC7 000C                            STB,B6   LHDR$,AUTO

     1223     6975    2           IF MSGSZ > 255

   6975   0 00030D  E970 00FF                            CMR,R6   255,IMO
          0 00030F  0381 000F                            BLE      s:6982,PREL

     1224     6976    3           THEN DO;

     1225     6977    3                HDR$->KV$VDOVLP_DAT2 = KNA_VDOVLP_DAT2;

   6977   0 000311  8C80 0000 0000  xsym                 LDI      KNA_VDOVLP_DAT2
          0 000314  8D06                                 SDI      ,B6

     1226     6978    3                HDR$->KV$VDOVLP_DAT2.BYTSIZ = MSGSZ;

   6978   0 000315  D847 000E                            LDR,R5   MSGSZ,AUTO
          0 000317  DF46 0001                            STR,R5   1,B6

     1227     6979    3                HDR$ = PINCRC (HDR$,SIZEC(KNA_VDOVLP_DAT2));

   6979   0 000319  DBC6 0002                            LAB,B5   2,B6
          0 00031B  DFC7 000A                            STB,B5   HDR$,AUTO

     1228     6980    3                END;

   6980   0 00031D  0F81 000B                            B        s:6987,PREL

     1229     6981    3           ELSE DO;

     1230     6982    3                HDR$->KV$VDOVLP_DAT1 = KNA_VDOVLP_DAT1;

   6982   0 00031F  D800 0000 0000  xsym                 LDR,R5   KNA_VDOVLP_DAT1
          0 000322  DF06                                 STR,R5   ,B6

     1231     6983    3                HDR$->KV$VDOVLP_DAT1.BYTSIZ = MSGSZ;
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:200  

   6983   0 000323  EA86                                 SRM,R6,'00FF'X    ,B6
   6983   0 000324       00FF

     1232     6984    3                HDR$ = PINCRC (HDR$,SIZEC(KNA_VDOVLP_DAT1));

   6984   0 000325  DBC6 0001                            LAB,B5   1,B6
          0 000327  DFC7 000A                            STB,B5   HDR$,AUTO

     1233     6985    3                END;

     1234     6986    2           END;

     1235     6987    1      IF LHDR$ ~= ADDR(HDR)                /* vlps                               */

   6987   0 000329  ECC7 000C                            LDB,B6   LHDR$,AUTO
          0 00032B  EDC7 0008                            CMB,B6   @HDR,AUTO
          0 00032D  0901 0007                            BE       s:6993,PREL

     1236     6988    2      THEN DO;

     1237     6989    2           ADDR(HDR)->KV$VDO.VLP = '1'B;

   6989   0 00032F  DCC7 0008                            LDB,B5   @HDR,AUTO
          0 000331  8905                                 LBT,'0080'X       ,B5
          0 000332       0080

     1238     6990    2           LHDR$->KV$VDOVLP.LST = '1'B;

   6990   0 000333  8906                                 LBT,'8000'X       ,B6
   6990   0 000334       8000

     1239     6991    2           END;

     1240     6992
     1241     6993    1      TEMP1U = 0 ;

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:201  
   6993   0 000335  8747 0012                            CL       TEMP1U,AUTO

     1242     6994    1      IF FUNCTION = %KV_VDO_FNC_PRM_SET    /* TL exists                          */

   6994   0 000337  DCC7 0004                            LDB,B5   @FUNCTION,AUTO
          0 000339  E805                                 LDR,R6   ,B5
          0 00033A  6D13                                 CMV,R6   19
          0 00033B  0981 0012                            BNE      s:7000,PREL

     1243     6995    2      THEN DO;

     1244     6996    2           HDR$->TL = K$RWPARM.V$->TL;

   6996   0 00033D  CCC7 0006                            LDB,B4   @K$RWPARM,AUTO
          0 00033F  D844 0025                            LDR,R5   37,B4
          0 000341  BCC4 0021                            LDB,B3   33,B4
          0 000343  AB83                                 LAB,B2   ,B3
          0 000344  2C00                                 LDV,R2   0
          0 000345  E855                                 LDR,R6   R5
          0 000346  BCC7 000A                            LDB,B3   HDR$,AUTO
          0 000348  3C00                                 LDV,R3   0
          0 000349  0008                                 MMM

     1245     6997    2           TEMP1U = K$RWPARM.VSZ ;

   6997   0 00034A  E844 0025                            LDR,R6   37,B4
          0 00034C  EF47 0012                            STR,R6   TEMP1U,AUTO

     1246     6998    2           END;

     1247     6999
     1248     7000    1      K$RWPARM.UHDR$ = ADDR(HDR);

   7000   0 00034E  ECC7 0008                            LDB,B6   @HDR,AUTO
          0 000350  CCC7 0006                            LDB,B4   @K$RWPARM,AUTO
          0 000352  EFC4 0017                            STB,B6   23,B4

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:202  
     1249     7001    1      TEMP2U = POFFW(HDR$,ADDR(HDR)) ;

   7001   0 000354  8CC7 000A                            LDI      HDR$,AUTO
          0 000356  84C7 0008                            SID      @HDR,AUTO
          0 000358  E857                                 LDR,R6   R7
          0 000359  EF47 000F                            STR,R6   VDOSZ,AUTO

     1250     7002    1      K$RWPARM.UHDRSZ = TEMP2U + TEMP2U + TEMP1U ;

   7002   0 00035B  6001                                 SOL,R6   1
          0 00035C  EA47 0012                            ADD,R6   TEMP1U,AUTO
          0 00035E  EF44 0019                            STR,R6   25,B4

     1251     7003    1      RETURN;

   7003   0 000360  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
     1252     7004
     1253     7005    1   END KNA$BUILD_VDO;
     1254     7006        %EOD;

PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:203  
--  Include file information  --

   KI$CP6V_C.:E05TOU  is referenced.
   K_CP6_M.:E05TOU  is referenced.
   KV_PRMID_E.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   K$RWPARM.:E05TOU  is referenced.
   KV$VDO.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$BUILD_VDO.
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:204  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @FUNCTION                  8-0-0/w PTR         r     1 @HDR
     6-0-0/w PTR         r     1 @K$RWPARM                 *0-0-0/w UBIN(16)    r     1 FUNCTION
    *0-0-0/w CHAR(100)   r     1 HDR                        A-0-0/w PTR         r     1 HDR$
    *0-0-0/w STRC(656)   r     1 K$RWPARM                   C-0-0/w PTR         r     1 LHDR$
     E-0-0/w UBIN(16)    r     1 MSGSZ                     10-0-0/w PTR         r     1 OP$
    10-0-0/w STRC(32)    r     1 OP$1                      10-0-0/w PTR         r     1 OPP$
    12-0-0/w SBIN(16)    r     1 TEMP1S                    12-0-0/w UBIN(16)    r     1 TEMP1U
     F-0-0/w SBIN(16)    r     1 TEMP2S                     F-0-0/w UBIN(16)    r     1 TEMP2U
    13-0-0/w SBIN(16)    r     1 TEMP3S                    13-0-0/w UBIN(16)    r     1 TEMP3U
     F-0-0/w UBIN(16)    r     1 VDOSZ

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c UBIN(8)     r     1 KNA_VDOBYTSIZ(0:34)
     0-0-0/w STRC(96)    r     1 KNA_VDOVLP_CG_MSGID        0-0-0/w STRC(96)    r     1 KNA_VDOVLP_CG_MSGTYP
     0-0-0/w STRC(96)    r     1 KNA_VDOVLP_CG_STA          0-0-0/w STRC(16)    r     1 KNA_VDOVLP_DAT1
     0-0-0/w STRC(32)    r     1 KNA_VDOVLP_DAT2            0-0-0/w STRC(48)    r     1 KNA_VDOVLP_ERR
     0-0-0/w STRC(32)    r     1 KNA_VDOVLP_FLDID           0-0-0/w STRC(16)    r     1 KNA_VDOVLP_KEY
     0-0-0/w STRC(64)    r     1 KNA_VDOVLP_MRK

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN(16)    r     1 FLDID                      0-0-0/w STRC(80)    r     1 FPT$DCLFLD_V
     0-0-0/w STRC(48)    r     1 FPT$ERASE_V                0-0-0/w STRC(32)    r     1 FPT$TRMPRG_V
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:205  
     0-0-0/c ACHR        r     1 KEY                        0-0-0/w STRC(16)    r     1 KV$VDO
     0-0-0/w STRC(16)    r     1 KV$VDOVLP                  0-0-0/w STRC(96)    r     1 KV$VDOVLP_CG_MSGID
     0-0-0/w STRC(96)    r     1 KV$VDOVLP_CG_MSGTYP        0-0-0/w STRC(96)    r     1 KV$VDOVLP_CG_STA
     0-0-0/w STRC(16)    r     1 KV$VDOVLP_DAT1             0-0-0/w STRC(32)    r     1 KV$VDOVLP_DAT2
     0-0-0/w STRC(48)    r     1 KV$VDOVLP_ERR              0-0-0/w STRC(32)    r     1 KV$VDOVLP_FLDID
     0-0-0/w STRC(16)    r     1 KV$VDOVLP_KEY              0-0-0/w STRC(48)    r     1 KV$VDO_BLKDAT
     0-0-0/w STRC(32)    r     1 KV$VDO_CLSSTR              0-0-0/w STRC(32)    r     1 KV$VDO_DAT
     0-0-0/w STRC(96)    r     1 KV$VDO_DCLFLD              0-0-0/w STRC(32)    r     1 KV$VDO_DCLSTR
     0-0-0/w STRC(32)    r     1 KV$VDO_DLT                 0-0-0/w STRC(32)    r     1 KV$VDO_ERS
     0-0-0/w STRC(48)    r     1 KV$VDO_OPNSTR              0-0-0/w STRC(80)    r     1 KV$VDO_RQSDAT
     0-0-0/w STRC(48)    r     1 KV$VDO_RQSPRM              0-0-0/w STRC(32)    r     1 KV$VDO_SLCGRPRND
     0-0-0/w STRC(32)    r     1 KV$VDO_SLCQLF              0-0-0/c ACHR        r     1 TL
     0-0-0/w UBIN(16)    r     1 UBNBSD                     0-0-0/w STRC(16)    r     1 UBNBSD1
     0-0-0/w STRC(96)    r     1 VDO1                       0-0-0/w STRC(64)    r     1 VDOVLP_MRK
     0-0-0/w STRC(48)    r     1 VLP$FLDATR


   Procedure KNA$BUILD_VDO requires 867 words for executable code.
   Procedure KNA$BUILD_VDO requires 22 words of local(AUTO) storage.
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:206  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:207  
          MINI XREF LISTING

FLDID
      6092**DCL      6894>>ASSIGN
FPT$DCLFLD_V.CLM
      6112**DCL      6765>>ASSIGN
FPT$DCLFLD_V.ID
      6112**DCL      6767>>ASSIGN
FPT$DCLFLD_V.LIN
      6111**DCL      6764>>ASSIGN
FPT$DCLFLD_V.WDT
      6112**DCL      6766>>ASSIGN
FPT$ERASE_V.CNS
      6129**DCL      6804>>ASSIGN
FPT$ERASE_V.PRT
      6129**DCL      6803>>ASSIGN
FPT$TRMPRG_V.CTLFLG
      6173**DCL      6795>>ASSIGN
FPT$TRMPRG_V.CTLFLG.RSTBRK
      6174**DCL      6174--REDEF
FUNCTION
      3563**DCL         7--PROC     6737>>IF       6741>>ASSIGN   6746>>ASSIGN   6750>>DOCASE   6914>>IF
      6931>>IF       6931>>IF       6931>>IF       6994>>IF
HDR
      3880**DCL         7--PROC     6736--ASSIGN   6987--IF       6989--ASSIGN   7000--ASSIGN   7001--ASSIGN
HDR$
      6177**DCL      6084--IMP-PTR  6736<<ASSIGN   6745>>ASSIGN   6746>>ASSIGN   6748>>ASSIGN   6753>>ASSIGN
      6754>>ASSIGN   6755>>ASSIGN   6758>>ASSIGN   6759>>ASSIGN   6760>>ASSIGN   6764>>ASSIGN   6765>>ASSIGN
      6766>>ASSIGN   6767>>ASSIGN   6770>>ASSIGN   6772>>ASSIGN   6775>>ASSIGN   6776>>ASSIGN   6779>>ASSIGN
      6782>>ASSIGN   6783>>ASSIGN   6787>>ASSIGN   6788>>ASSIGN   6791>>ASSIGN   6794>>ASSIGN   6795>>ASSIGN
      6798>>ASSIGN   6799>>ASSIGN   6802>>ASSIGN   6803>>ASSIGN   6804>>ASSIGN   6807>>ASSIGN   6808>>ASSIGN
      6809>>ASSIGN   6816>>ASSIGN   6817>>ASSIGN   6818>>ASSIGN   6820>>ASSIGN   6823>>ASSIGN   6824>>ASSIGN
      6825>>ASSIGN   6826>>ASSIGN   6827>>ASSIGN   6830>>ASSIGN   6831>>ASSIGN   6832>>ASSIGN   6835>>ASSIGN
      6838>>ASSIGN   6840>>ASSIGN   6843>>ASSIGN   6846>>ASSIGN   6847>>ASSIGN   6851>>ASSIGN   6855>>ASSIGN
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:208  
      6856<<ASSIGN   6856>>ASSIGN   6862>>ASSIGN   6863>>ASSIGN   6864>>ASSIGN   6865<<ASSIGN   6865>>ASSIGN
      6867>>ASSIGN   6868>>ASSIGN   6869>>ASSIGN   6870<<ASSIGN   6870>>ASSIGN   6875>>ASSIGN   6876>>ASSIGN
      6877>>ASSIGN   6878<<ASSIGN   6878>>ASSIGN   6883>>ASSIGN   6884>>ASSIGN   6885>>ASSIGN   6886<<ASSIGN
      6886>>ASSIGN   6892>>ASSIGN   6893>>ASSIGN   6894>>ASSIGN   6895>>ASSIGN   6896<<ASSIGN   6896>>ASSIGN
      6899>>ASSIGN   6900>>ASSIGN   6903>>ASSIGN   6904>>ASSIGN   6905<<ASSIGN   6905>>ASSIGN   6906>>ASSIGN
      6907<<ASSIGN   6907>>ASSIGN   6912>>ASSIGN   6913>>ASSIGN   6916>>ASSIGN   6919>>ASSIGN   6920>>ASSIGN
      6921>>ASSIGN   6924>>ASSIGN   6925>>ASSIGN   6925>>ASSIGN   6927>>ASSIGN   6928<<ASSIGN   6928>>ASSIGN
      6974>>ASSIGN   6977>>ASSIGN   6978>>ASSIGN   6979<<ASSIGN   6979>>ASSIGN   6982>>ASSIGN   6983>>ASSIGN
      6984<<ASSIGN   6984>>ASSIGN   6996>>ASSIGN   7001>>ASSIGN
K$RWPARM
      3581**DCL         7--PROC
K$RWPARM.BLKREC
      3611**DCL      3636--REDEF    6921--ASSIGN
K$RWPARM.BLKREC.BLKU#
      3612**DCL      6919>>ASSIGN
K$RWPARM.BLKREC.RECU#
      3624**DCL      6920>>ASSIGN
K$RWPARM.DVE.DVBYTE.BP
      3650**DCL      6931>>IF
K$RWPARM.DVE.DVBYTE.NODAT
      3656**DCL      6817>>ASSIGN
K$RWPARM.DVE.DVBYTE.REREAD
      3652**DCL      6818>>ASSIGN
K$RWPARM.DVE.DVBYTE.TRANS
      3654**DCL      6790>>IF       6821>>IF       6931>>IF
K$RWPARM.DVE.DVBYTE.VFC
      3651**DCL      3652--REDEF    6780>>IF
K$RWPARM.DVE.EOMCHAR
      3659**DCL      3663--REDEF    6788>>ASSIGN
K$RWPARM.DVE.VFC
      3663**DCL      6783>>ASSIGN
K$RWPARM.EOM_EOR
      3680**DCL      6785>>IF
K$RWPARM.ERR
      3723**DCL      3728--REDEF
K$RWPARM.FC
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:209  
      3687**DCL      3688--REDEF
K$RWPARM.FLDID
      3869**DCL      3870--REDEF
K$RWPARM.IP$
      3715**DCL      6160--IMP-PTR  6768>>IF       6770>>ASSIGN   6775>>ASSIGN   6776>>ASSIGN   6836>>IF
      6838>>ASSIGN   6843>>ASSIGN   6847>>ASSIGN
K$RWPARM.KEY$
      3867**DCL      6889>>IF       6894>>ASSIGN   6906>>ASSIGN
K$RWPARM.KEYSZ
      3878**DCL      6093--IMP-SIZ  6893>>ASSIGN   6900>>ASSIGN   6906>>ASSIGN   6906>>ASSIGN   6907>>ASSIGN
K$RWPARM.KEYTYPE
      3876**DCL      3877--REDEF    6890>>IF       6901>>IF
K$RWPARM.MARKER
      3636**DCL      6924>>ASSIGN
K$RWPARM.MAXNMBBYT
      3864**DCL      6825>>ASSIGN   6832>>ASSIGN
K$RWPARM.MAXNMBRCR
      3863**DCL      6824>>ASSIGN
K$RWPARM.MAXRCRBYTSIZ
      3865**DCL      6753>>ASSIGN   6753>>ASSIGN   6826>>ASSIGN
K$RWPARM.MRKTYP
      3861**DCL      6910>>IF       6913>>ASSIGN   6917>>IF
K$RWPARM.MSG$
      3582**DCL      3583--REDEF    3592--REDEF
K$RWPARM.MSGC$
      3583**DCL      6931>>IF       6940>>ASSIGN
K$RWPARM.MSGID
      3698**DCL      3703--REDEF    6860>>IF       6864>>ASSIGN
K$RWPARM.MSGIDXT
      3711**DCL      3715--REDEF    6863>>ASSIGN
K$RWPARM.MSGSZ
      3593**DCL      6747>>ASSIGN   6931>>IF       6937>>ASSIGN   6952<<ASSIGN   6967<<ASSIGN   6967>>ASSIGN
K$RWPARM.MSGTYP
      3602**DCL      6858>>IF       6868>>ASSIGN
K$RWPARM.MSG_ERRCODE
      3846**DCL      6881>>IF       6884>>ASSIGN
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:210  
K$RWPARM.ORG
      3847**DCL      3848--REDEF    6809>>ASSIGN
K$RWPARM.PRMID
      3870**DCL      6831>>ASSIGN
K$RWPARM.READMLT
      3671**DCL      6820>>ASSIGN
K$RWPARM.RSN
      3688**DCL      6755>>ASSIGN
K$RWPARM.STATION
      3597**DCL      6873>>IF       6876>>ASSIGN
K$RWPARM.STR
      3862**DCL      6748>>ASSIGN
K$RWPARM.STRID
      3848**DCL      6799>>ASSIGN
K$RWPARM.UHDR$
      3736**DCL      7000<<ASSIGN
K$RWPARM.UHDRSZ
      3741**DCL      7002<<ASSIGN
K$RWPARM.V$
      3866**DCL      6103--IMP-PTR  6114--IMP-PTR  6124--IMP-PTR  6140--IMP-PTR  6173--IMP-PTR  6764>>ASSIGN
      6765>>ASSIGN   6766>>ASSIGN   6767>>ASSIGN   6795>>ASSIGN   6803>>ASSIGN   6804>>ASSIGN   6996>>ASSIGN
K$RWPARM.VDOFLGS
      3849**DCL      3860--REDEF
K$RWPARM.VDOFLGS.DLTSTR
      3853**DCL      6759>>ASSIGN
K$RWPARM.VDOFLGS.NEWSSN
      3854**DCL      6760>>ASSIGN
K$RWPARM.VDOFLGS.WAIT
      3856**DCL      6827>>ASSIGN
K$RWPARM.VSZ
      3868**DCL      6114--IMP-SIZ  6813>>ASSIGN   6996>>ASSIGN   6996>>ASSIGN   6997>>ASSIGN
KEY
      6093**DCL      6906<<ASSIGN   6906>>ASSIGN
KNA_VDOBYTSIZ
      6723**DCL      6741>>ASSIGN
KNA_VDOVLP_CG_MSGID
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:211  
      6239**DCL      6862>>ASSIGN   6865--ASSIGN
KNA_VDOVLP_CG_MSGTYP
      6291**DCL      6867>>ASSIGN   6870--ASSIGN
KNA_VDOVLP_CG_STA
      6343**DCL      6875>>ASSIGN   6878--ASSIGN
KNA_VDOVLP_DAT1
      6394**DCL      6982>>ASSIGN   6984--ASSIGN
KNA_VDOVLP_DAT2
      6444**DCL      6977>>ASSIGN   6979--ASSIGN
KNA_VDOVLP_ERR
      6494**DCL      6883>>ASSIGN   6886--ASSIGN
KNA_VDOVLP_FLDID
      6591**DCL      6892>>ASSIGN   6896--ASSIGN
KNA_VDOVLP_KEY
      6642**DCL      6899>>ASSIGN   6905--ASSIGN
KNA_VDOVLP_MRK
      6692**DCL      6912>>ASSIGN   6928--ASSIGN
KV$VDO.FNC
      3988**DCL      6746<<ASSIGN
KV$VDO.STR
      3988**DCL      6748<<ASSIGN
KV$VDO.VLP
      3988**DCL      6989<<ASSIGN
KV$VDOVLP.LST
      5397**DCL      6990<<ASSIGN
KV$VDOVLP_CG_MSGID
      5495**DCL      6862<<ASSIGN
KV$VDOVLP_CG_MSGID.CG_MSGID
      5509**DCL      6864<<ASSIGN
KV$VDOVLP_CG_MSGID.CG_MSGIDXT
      5510**DCL      6863<<ASSIGN
KV$VDOVLP_CG_MSGTYP
      5548**DCL      6867<<ASSIGN
KV$VDOVLP_CG_MSGTYP.CG_MSGTYP
      5562**DCL      6868<<ASSIGN
KV$VDOVLP_CG_STA
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:212  
      5601**DCL      6875<<ASSIGN
KV$VDOVLP_CG_STA.CG_STA
      5615**DCL      6876<<ASSIGN
KV$VDOVLP_DAT1
      5653**DCL      6982<<ASSIGN
KV$VDOVLP_DAT1.BYTSIZ
      5659**DCL      6983<<ASSIGN
KV$VDOVLP_DAT2
      5704**DCL      6977<<ASSIGN
KV$VDOVLP_DAT2.BYTSIZ
      5712**DCL      6978<<ASSIGN
KV$VDOVLP_ERR
      5806**DCL      6883<<ASSIGN
KV$VDOVLP_ERR.ERRCODE
      5837**DCL      6884<<ASSIGN
KV$VDOVLP_FLDID
      5904**DCL      6892<<ASSIGN
KV$VDOVLP_FLDID.BYTSIZ
      5910**DCL      6893<<ASSIGN
KV$VDOVLP_FLDID.FLDID
      5918**DCL      6894<<ASSIGN
KV$VDOVLP_KEY
      5956**DCL      6899<<ASSIGN
KV$VDOVLP_KEY.BYTSIZ
      5962**DCL      6900<<ASSIGN
KV$VDOVLP_KEY.TYP
      5960**DCL      6903<<ASSIGN
KV$VDO_BLKDAT.RCRBYTSIZ
      4032**DCL      6753<<ASSIGN
KV$VDO_BLKDAT.RSN
      4032**DCL      6755<<ASSIGN
KV$VDO_CLSSTR.DLT
      4119**DCL      6759<<ASSIGN
KV$VDO_CLSSTR.NEWSSN
      4119**DCL      6760<<ASSIGN
KV$VDO_DAT.DATCTRCHR
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:213  
      4165**DCL      6783<<ASSIGN   6788<<ASSIGN
KV$VDO_DAT.DATCTRCHRTYP
      4164**DCL      6782<<ASSIGN   6787<<ASSIGN
KV$VDO_DAT.DATMOD
      4165**DCL      6791<<ASSIGN
KV$VDO_DCLFLD.CLM
      4209**DCL      6765<<ASSIGN
KV$VDO_DCLFLD.GRPRND
      4271**DCL      6770<<ASSIGN   6770--ASSIGN   6775<<ASSIGN
KV$VDO_DCLFLD.GRPRND.ABS
      4277**DCL      6772<<ASSIGN
KV$VDO_DCLFLD.ID
      4293**DCL      6767<<ASSIGN
KV$VDO_DCLFLD.LIN
      4209**DCL      6764<<ASSIGN
KV$VDO_DCLFLD.QLF
      4228**DCL      6776<<ASSIGN
KV$VDO_DCLFLD.WDT
      4210**DCL      6766<<ASSIGN
KV$VDO_DCLSTR.STRID
      4336**DCL      6799<<ASSIGN
KV$VDO_DLT.CTLFLG
      4380**DCL      6795<<ASSIGN
KV$VDO_ERS.CNS
      4469**DCL      6804<<ASSIGN
KV$VDO_ERS.PRT
      4469**DCL      6803<<ASSIGN
KV$VDO_OPNSTR.ORG
      4726**DCL      6809<<ASSIGN
KV$VDO_RQSDAT.DATMOD
      4899**DCL      6823<<ASSIGN
KV$VDO_RQSDAT.EOFNO_DAT
      4900**DCL      6817<<ASSIGN
KV$VDO_RQSDAT.MAXNMBBYT
      4897**DCL      6825<<ASSIGN
KV$VDO_RQSDAT.MAXNMBRCR
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:214  
      4896**DCL      6824<<ASSIGN
KV$VDO_RQSDAT.MAXRCRBYTSIZ
      4896**DCL      6826<<ASSIGN
KV$VDO_RQSDAT.READMLT
      4901**DCL      6820<<ASSIGN
KV$VDO_RQSDAT.RE_RED
      4899**DCL      6818<<ASSIGN
KV$VDO_RQSDAT.WAT
      4900**DCL      6827<<ASSIGN
KV$VDO_RQSPRM.MAXNMBBYT
      4987**DCL      6832<<ASSIGN
KV$VDO_RQSPRM.PRMID
      4987**DCL      6831<<ASSIGN
KV$VDO_SLCGRPRND.GRPRND
      5133**DCL      6838<<ASSIGN   6838--ASSIGN   6843<<ASSIGN
KV$VDO_SLCGRPRND.GRPRND.ABS
      5139**DCL      6840<<ASSIGN
KV$VDO_SLCQLF.QLF
      5216**DCL      6847<<ASSIGN
LHDR$
      6178**DCL      6855<<ASSIGN   6869<<ASSIGN   6877<<ASSIGN   6885<<ASSIGN   6895<<ASSIGN   6904<<ASSIGN
      6927<<ASSIGN   6974<<ASSIGN   6987>>IF       6990>>ASSIGN
LLUUP
      6957**LABEL    6963--GOTO
LLUUP1
      6961**LABEL    6946--GOTO
LOUT
      6972**LABEL    6945--GOTO     6949--GOTO     6954--GOTO
LOUT1
      6966**LABEL    6959--GOTO
MSGSZ
      6179**DCL      6747<<ASSIGN   6813<<ASSIGN   6813>>ASSIGN   6951<<ASSIGN   6951>>ASSIGN   6966<<ASSIGN
      6966>>ASSIGN   6972>>IF       6975>>IF       6978>>ASSIGN   6983>>ASSIGN
OP$
      6183**DCL      6184--REDEF    6187--REDEF    6189--IMP-PTR  6940<<ASSIGN
OP$1.HIBIT
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:215  
      6185**DCL      6941>>IF       6943<<ASSIGN
OPP$
      6187**DCL      6944>>IF       6948>>IF       6957<<ASSIGN   6957>>ASSIGN   6958>>IF
TEMP1S
      6196**DCL      6952>>ASSIGN   6953>>IF
TEMP1U
      6195**DCL      6196--REDEF    6197--REDEF    6937<<ASSIGN   6938>>ASSIGN   6940>>ASSIGN   6993<<ASSIGN
      6997<<ASSIGN   7002>>ASSIGN
TEMP2S
      6182**DCL      6939<<ASSIGN   6961<<ASSIGN   6961>>ASSIGN   6962>>IF       6966>>ASSIGN   6966>>ASSIGN
      6967>>ASSIGN   6967>>ASSIGN
TEMP2U
      6181**DCL      7001<<ASSIGN   7002>>ASSIGN   7002>>ASSIGN
TEMP3S
      6201**DCL      6962>>IF
TEMP3U
      6200**DCL      6201--REDEF    6938<<ASSIGN
TL
      6114**DCL      6996<<ASSIGN   6996>>ASSIGN
UBNBSD
      6190**DCL      6191--REDEF    6944>>IF       6958>>IF
UBNBSD1.HLF1
      6192**DCL      6948>>IF
VDO1.WD1
      6085**DCL      6745<<ASSIGN
VDO1.WD2
      6086**DCL      6758<<ASSIGN   6779<<ASSIGN   6794<<ASSIGN   6798<<ASSIGN   6802<<ASSIGN   6807<<ASSIGN
      6830<<ASSIGN   6835<<ASSIGN   6846<<ASSIGN   6851<<ASSIGN
VDO1.WD3
      6087**DCL      6754<<ASSIGN   6808<<ASSIGN
VDO1.WD5
      6089**DCL      6816<<ASSIGN
VDOSZ
      6180**DCL      6083--IMP-SIZ  6181--REDEF    6182--REDEF    6741<<ASSIGN   6850>>IF       6856>>ASSIGN
VDOVLP_MRK
      6061**DCL      6912<<ASSIGN
PL6.E3A0      #006=KNA$BUILD_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:01 Page:216  
VDOVLP_MRK.BMRK.BLK#
      6080**DCL      6919<<ASSIGN
VDOVLP_MRK.BMRK.REC#
      6081**DCL      6920<<ASSIGN
VDOVLP_MRK.BYTSIZ
      6067**DCL      6921<<ASSIGN   6925<<ASSIGN
VDOVLP_MRK.ID
      6076**DCL      6079--REDEF    6924<<ASSIGN   6925--ASSIGN
VDOVLP_MRK.MRKTYP
      6075**DCL      6913<<ASSIGN
VDOVLP_MRK.RSP
      6075**DCL      6916<<ASSIGN
VLP$FLDATR.ABSGRPRND
      6162**DCL      6768>>IF       6770>>ASSIGN   6836>>IF       6838>>ASSIGN
VLP$FLDATR.GRPRND
      6160**DCL      6775>>ASSIGN   6843>>ASSIGN
VLP$FLDATR.QLF
      6161**DCL      6776>>ASSIGN   6847>>ASSIGN

PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:217  
     1255        1        /*T***********************************************************/
     1256        2        /*T*                                                         */
     1257        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1258        4        /*T*                                                         */
     1259        5        /*T***********************************************************/
     1260        6        KNA$FCNO: PROC (FNC,KNA$SSN,K$RWPARM,ERR) ALTRET;
     1261        7
     1262        8        %INCLUDE K$RWPARM;
     1263      394        %INCLUDE KNA_MACRO_M;
     1264      470        %INCLUDE KN_DATA_M;
     1265     2256        %INCLUDE KNH_MACRO_C;                   /* for KNH_FCN_equs                   */
     1266     2539        %INCLUDE KN_ERRORS_C;
     1267     2603        %INCLUDE LCP_6;
     1268     6882
     1269     6883        %INCLUDE GH_SCHD_E;
     1270     6979        /* Parameters */
     1271     6980    1   DCL FNC UBIN;                           /* VDO function to be performed       */
     1272     6981        %K$RWPARM (NAME=K$RWPARM,STCLASS=PARAM);
     1273     7297        %KNA$SSN (FPTN=KNA$SSN,STCLASS=PARAM);
     1274     7380    1   DCL ERR UBIN;
     1275     7381
     1276     7382        /* Auto */
     1277     7383    1   DCL HDR CHAR(100);
     1278     7384        %KN$NETPARM;
     1279     7537    1   DCL USER BIT(1);
     1280     7538
     1281     7539        /* External Data */
     1282     7540        %KN$NETPARM (NAME=KN_NETPARM_INIT,STCLASS=SYMREF);
     1283     7693
     1284     7694        /* Error codes */
     1285     7695        %VLP_ERRCODE (FPTN=ERR_NOQ,FCG=KN,MID=A,MON='1'B,ERR#=%E$NOQ,SEV=G_SEV_ERROR#);
     1286     7741
     1287     7742        /* Entrys */
     1288     7743    1   DCL KNS$SEND ENTRY(1) ALTRET;
     1289     7744    1   DCL KNA$BUILD_VDO ENTRY(3);
     1290     7745    1   DCL KNA$REG_USER ENTRY(2) ALTRET;
     1291     7746
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:218  
     1292     7747        %EJECT;
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:219  
     1293     7748    1      USER = '0'B;
     1294     7749    1      GOTO COMMON_START;
     1295     7750
     1296     7751    1   KNA$FCNOU: ENTRY (FNC,KNA$SSN,K$RWPARM,ERR) ALTRET;
     1297     7752
     1298     7753    1      USER = '1'B;
     1299     7754
     1300     7755    1   COMMON_START: ;
     1301     7756
     1302     7757        /* If we are terminating altret */
     1303     7758    1      IF KNA$SSN.STATE = %KNA_STATE_TERM#
     1304     7759    1        OR KNA$SSN.STATE = %KNA_STATE_WTERM
     1305     7760    1      THEN ALTRETURN;
     1306     7761
     1307     7762    1      IF FNC ~= 0
     1308     7763    1      THEN CALL KNA$BUILD_VDO (FNC,K$RWPARM,HDR);
     1309     7764
     1310     7765    1      KN$NETPARM = KN_NETPARM_INIT;
     1311     7766    1      KN$NETPARM.FUNCTION = %KN_FCN_DATA;
     1312     7767    1      KN$NETPARM.UHDR$ = K$RWPARM.UHDR$;
     1313     7768    1      KN$NETPARM.UHDRSZ = K$RWPARM.UHDRSZ;
     1314     7769    1      KN$NETPARM.MSG$ = K$RWPARM.MSGC$;
     1315     7770    1      KN$NETPARM.MSGSZ = K$RWPARM.MSGSZ;
     1316     7771    1      ERR = 0;
     1317     7772    2      DO WHILE('1'B);
     1318     7773    2           KN$NETPARM.LDCT$ = KNA$SSN.LDCT$;
     1319     7774    2           KN$NETPARM.SLDCT$ = KN$NETPARM.LDCT$;
     1320     7775    2           CALL KNS$SEND(KN$NETPARM)
     1321     7776    3           WHENRETURN DO;
     1322     7777    3                RETURN;
     1323     7778    3                END;
     1324     7779    2           IF KN$NETPARM.ERRCODE ~= %KN_ERR_NOQ
     1325     7780    2             AND KN$NETPARM.ERRCODE ~= %KN_ERR_NOQ2 OR NOT USER
     1326     7781    3           THEN DO;
     1327     7782    3                ERR = KN$NETPARM.ERRCODE;
     1328     7783    3                KNA$SSN.ERROR = ERR_NOQ;
     1329     7784    3                ALTRETURN;
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:220  
     1330     7785    3                END;
     1331     7786        /*E* ERROR: KNA-E$NOQ-0
     1332     7787             MESSAGE: No circular queue available for this write
     1333     7788        */
     1334     7789
     1335     7790    2           KNA$SSN.FLAGS.CQ = '1'B;
     1336     7791    2           CALL KNA$REG_USER(%GH_EVCBL,ADDR(KNA$SSN));
     1337     7792    2           KNA$SSN.FLAGS.CQ = '0'B;
     1338     7793    2           END;
     1339     7794
     1340     7795
     1341     7796    1   END KNA$FCNO;
     1342     7797        %EOD;

PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:221  
--  Include file information  --

   GH_SCHD_E.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
   GT_LCP6_M.:E05TOU  is referenced.
   KI_CP6.:E05TOU  is referenced.
   GF_LCP6_M.:E05TOU  is referenced.
   GM_LCP6_M.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   GJ_LCP6_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KN_ERRORS_C.:E05TOU  is referenced.
   KNH_MACRO_C.:E05TOU  is referenced.
   KN_DATA_M.:E05TOU  is referenced.
   KNA_MACRO_M.:E05TOU  is referenced.
   K$RWPARM.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$FCNO.

   Procedure KNA$FCNO requires 160 words for executable code.
   Procedure KNA$FCNO requires 102 words of local(AUTO) storage.

PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:222  

 Object Unit name= KNA$FCNO                                   File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 01:03:13.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Data  even  none     2      2  KNA$FCNO
    1   Proc  even  none   160     A0  KNA$FCNO

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  KNA$FCNO
     1      9          yes     yes      Std        4  KNA$FCNOU

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 KNA$BUILD_VDO
 yes     yes           Std       1 KNS$SEND
 yes     yes           Std       2 KNA$REG_USER
                       nStd      0 X6A_AUTO_N
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KN_NETPARM_INIT                  r    G$ROS$
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:223  


     1255        1        /*T***********************************************************/
     1256        2        /*T*                                                         */
     1257        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1258        4        /*T*                                                         */
     1259        5        /*T***********************************************************/
     1260        6        KNA$FCNO: PROC (FNC,KNA$SSN,K$RWPARM,ERR) ALTRET;

      6   1 000000  D380 0000 0000  xent KNA$FCNO        LNJ,B5   X6A_AUTO_N
          1 000003       0066 0004                       DC       102,4

     1261        7
     1262        8        %INCLUDE K$RWPARM;
     1263      394        %INCLUDE KNA_MACRO_M;
     1264      470        %INCLUDE KN_DATA_M;
     1265     2256        %INCLUDE KNH_MACRO_C;                   /* for KNH_FCN_equs                   */
     1266     2539        %INCLUDE KN_ERRORS_C;
     1267     2603        %INCLUDE LCP_6;
     1268     6882
     1269     6883        %INCLUDE GH_SCHD_E;
     1270     6979        /* Parameters */
     1271     6980    1   DCL FNC UBIN;                           /* VDO function to be performed       */
     1272     6981        %K$RWPARM (NAME=K$RWPARM,STCLASS=PARAM);
     1273     7297        %KNA$SSN (FPTN=KNA$SSN,STCLASS=PARAM);
     1274     7380    1   DCL ERR UBIN;
     1275     7381
     1276     7382        /* Auto */
     1277     7383    1   DCL HDR CHAR(100);
     1278     7384        %KN$NETPARM;
     1279     7537    1   DCL USER BIT(1);
     1280     7538
     1281     7539        /* External Data */
     1282     7540        %KN$NETPARM (NAME=KN_NETPARM_INIT,STCLASS=SYMREF);
     1283     7693
     1284     7694        /* Error codes */
     1285     7695        %VLP_ERRCODE (FPTN=ERR_NOQ,FCG=KN,MID=A,MON='1'B,ERR#=%E$NOQ,SEV=G_SEV_ERROR#);
     1286     7741
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:224  
     1287     7742        /* Entrys */
     1288     7743    1   DCL KNS$SEND ENTRY(1) ALTRET;
     1289     7744    1   DCL KNA$BUILD_VDO ENTRY(3);
     1290     7745    1   DCL KNA$REG_USER ENTRY(2) ALTRET;
     1291     7746
     1292     7747        %EJECT;
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:225  
     1293     7748    1      USER = '0'B;

   7748   1 000005  8747 005F                            CL       USER,AUTO

     1294     7749    1      GOTO COMMON_START;

   7749   1 000007  0F81 0009                            B        s:7753,PREL

     1295     7750
     1296     7751    1   KNA$FCNOU: ENTRY (FNC,KNA$SSN,K$RWPARM,ERR) ALTRET;

   7751   1 000009  D380 0000 0000  xent KNA$FCNOU       LNJ,B5   X6A_AUTO_N
          1 00000C       0066 0004                       DC       102,4

     1297     7752
     1298     7753    1      USER = '1'B;

   7753   1 00000E  8947 005F                            LBT,'8000'X       USER,AUTO
   7753   1 000010       8000

   7753   1                              COMMON_START    null
     1299     7754
     1300     7755    1   COMMON_START: ;
     1301     7756
     1302     7757        /* If we are terminating altret */
     1303     7758    1      IF KNA$SSN.STATE = %KNA_STATE_TERM#

   7758   1 000011  ECC7 0006            COMMON_START    LDB,B6   @KNA$SSN,AUTO
          1 000013  E846 0013                            LDR,R6   19,B6
          1 000015  6D05                                 CMV,R6   5
          1 000016  0901 0004                            BE       s:7760,PREL
          1 000018  6D06                                 CMV,R6   6
          1 000019  0981 0004                            BNE      s:7762,PREL

     1304     7759    1        OR KNA$SSN.STATE = %KNA_STATE_WTERM
     1305     7760    1      THEN ALTRETURN;

PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:226  
   7760   1 00001B  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1306     7761
     1307     7762    1      IF FNC ~= 0

   7762   1 00001E  DCC7 0004                            LDB,B5   @FNC,AUTO
          1 000020  D805                                 LDR,R5   ,B5
          1 000021  5901 0013                            BEZ,R5   s:7765,PREL

     1308     7763    1      THEN CALL KNA$BUILD_VDO (FNC,K$RWPARM,HDR);

   7763   1 000023  CBC7 000C                            LAB,B4   HDR,AUTO
          1 000025  CFC7 0064                            STB,B4   USER+5,AUTO
          1 000027  BCC7 0008                            LDB,B3   @K$RWPARM,AUTO
          1 000029  BFC7 0062                            STB,B3   USER+3,AUTO
          1 00002B  DFC7 0060                            STB,B5   USER+1,AUTO
          1 00002D  BBC7 0060                            LAB,B3   USER+1,AUTO
          1 00002F  CBF0 0300                            LAB,B4   768,IMO
          1 000031  E380 0000 0000  xent                 LNJ,B6   KNA$BUILD_VDO
          1 000034       0001                            DC       s:7765,PREL

     1309     7764
     1310     7765    1      KN$NETPARM = KN_NETPARM_INIT;

   7765   1 000035  AB80 0000 0000  xsym                 LAB,B2   KN_NETPARM_INIT
          1 000038  2C00                                 LDV,R2   0
          1 000039  6C42                                 LDV,R6   66
          1 00003A  BB87                                 LAB,B3   ,AUTO
          1 00003B  3C7C                                 LDV,R3   124
          1 00003C  0008                                 MMM

     1311     7766    1      KN$NETPARM.FUNCTION = %KN_FCN_DATA;

   7766   1 00003D  6C05                                 LDV,R6   5
          1 00003E  EF47 0052                            STR,R6   KN$NETPARM+20,AUTO

     1312     7767    1      KN$NETPARM.UHDR$ = K$RWPARM.UHDR$;
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:227  

   7767   1 000040  ECC7 0008                            LDB,B6   @K$RWPARM,AUTO
          1 000042  DCC6 0017                            LDB,B5   23,B6
          1 000044  DFC7 0043                            STB,B5   KN$NETPARM+5,AUTO

     1313     7768    1      KN$NETPARM.UHDRSZ = K$RWPARM.UHDRSZ;

   7768   1 000046  D846 0019                            LDR,R5   25,B6
          1 000048  DF47 0045                            STR,R5   KN$NETPARM+7,AUTO

     1314     7769    1      KN$NETPARM.MSG$ = K$RWPARM.MSGC$;

   7769   1 00004A  8C86                                 LDI      ,B6
          1 00004B  8D47 0040                            SDI      KN$NETPARM+2,AUTO

     1315     7770    1      KN$NETPARM.MSGSZ = K$RWPARM.MSGSZ;

   7770   1 00004D  C846 0002                            LDR,R4   2,B6
          1 00004F  CF47 0042                            STR,R4   KN$NETPARM+4,AUTO

     1316     7771    1      ERR = 0;

   7771   1 000051  CCC7 000A                            LDB,B4   @ERR,AUTO
          1 000053  8704                                 CL       ,B4

     1317     7772    2      DO WHILE('1'B);

     1318     7773    2           KN$NETPARM.LDCT$ = KNA$SSN.LDCT$;

   7773   1 000054  ECC7 0006                            LDB,B6   @KNA$SSN,AUTO
          1 000056  DCC6 0004                            LDB,B5   4,B6
          1 000058  DFC7 003E                            STB,B5   KN$NETPARM,AUTO

     1319     7774    2           KN$NETPARM.SLDCT$ = KN$NETPARM.LDCT$;

   7774   1 00005A  DFC7 0055                            STB,B5   KN$NETPARM+23,AUTO

PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:228  
     1320     7775    2           CALL KNS$SEND(KN$NETPARM)

   7775   1 00005C  CBC7 003E                            LAB,B4   KN$NETPARM,AUTO
          1 00005E  CFC7 0060                            STB,B4   USER+1,AUTO
          1 000060  BBC7 0060                            LAB,B3   USER+1,AUTO
          1 000062  CBF0 0100                            LAB,B4   256,IMO
          1 000064  E380 0000 0000  xent                 LNJ,B6   KNS$SEND
          1 000067       0004                            DC       s:7779,PREL

     1321     7776    3           WHENRETURN DO;

     1322     7777    3                RETURN;

   7777   1 000068  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1323     7778    3                END;
     1324     7779    2           IF KN$NETPARM.ERRCODE ~= %KN_ERR_NOQ

   7779   1 00006B  E847 0054                            LDR,R6   KN$NETPARM+22,AUTO
          1 00006D  6D01                                 CMV,R6   1
          1 00006E  0901 0004                            BE       s:7779+8,PREL
          1 000070  6D07                                 CMV,R6   7
          1 000071  0981 0005                            BNE      s:7782,PREL
          1 000073  89C7 005F                            CMZ      USER,AUTO
          1 000075  0801 000E                            BAL      s:7790,PREL

     1325     7780    2             AND KN$NETPARM.ERRCODE ~= %KN_ERR_NOQ2 OR NOT USER
     1326     7781    3           THEN DO;

     1327     7782    3                ERR = KN$NETPARM.ERRCODE;

   7782   1 000077  ECC7 000A                            LDB,B6   @ERR,AUTO
          1 000079  EF06                                 STR,R6   ,B6

     1328     7783    3                KNA$SSN.ERROR = ERR_NOQ;

   7783   1 00007A  8C80 0000 0000  00                   LDI      ERR_NOQ
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:229  
          1 00007D  DCC7 0006                            LDB,B5   @KNA$SSN,AUTO
          1 00007F  8D45 0001                            SDI      1,B5

     1329     7784    3                ALTRETURN;

   7784   1 000081  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1330     7785    3                END;
     1331     7786        /*E* ERROR: KNA-E$NOQ-0
     1332     7787             MESSAGE: No circular queue available for this write
     1333     7788        */
     1334     7789
     1335     7790    2           KNA$SSN.FLAGS.CQ = '1'B;

   7790   1 000084  ECC7 0006                            LDB,B6   @KNA$SSN,AUTO
          1 000086  8906                                 LBT,'2000'X       ,B6
          1 000087       2000

     1336     7791    2           CALL KNA$REG_USER(%GH_EVCBL,ADDR(KNA$SSN));

   7791   1 000088  DBF0 0019                            LAB,B5   25,IMO
          1 00008A  EFC7 0060                            STB,B6   USER+1,AUTO
          1 00008C  CBC7 0060                            LAB,B4   USER+1,AUTO
          1 00008E  CFC7 0064                            STB,B4   USER+5,AUTO
          1 000090  DFC7 0062                            STB,B5   USER+3,AUTO
          1 000092  BBC7 0062                            LAB,B3   USER+3,AUTO
          1 000094  CBF0 0200                            LAB,B4   512,IMO
          1 000096  E380 0000 0000  xent                 LNJ,B6   KNA$REG_USER
          1 000099       0001                            DC       s:7792,PREL

     1337     7792    2           KNA$SSN.FLAGS.CQ = '0'B;

   7792   1 00009A  ECC7 0006                            LDB,B6   @KNA$SSN,AUTO
          1 00009C  8806                                 LBF,'2000'X       ,B6
          1 00009D       2000

     1338     7793    2           END;
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:230  

   7793   1 00009E  0F81 FFB5                            B        s:7773,PREL
     1339     7794
     1340     7795
     1341     7796    1   END KNA$FCNO;
     1342     7797        %EOD;

PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:231  
--  Include file information  --

   GH_SCHD_E.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
   GT_LCP6_M.:E05TOU  is referenced.
   KI_CP6.:E05TOU  is referenced.
   GF_LCP6_M.:E05TOU  is referenced.
   GM_LCP6_M.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   GJ_LCP6_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   KN_ERRORS_C.:E05TOU  is referenced.
   KNH_MACRO_C.:E05TOU  is referenced.
   KN_DATA_M.:E05TOU  is referenced.
   KNA_MACRO_M.:E05TOU  is referenced.
   K$RWPARM.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$FCNO.
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:232  

 **** Variables and constants ****

  ****  Section 000  Data  KNA$FCNO

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(32)    r     1 ERR_NOQ

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     A-0-0/w PTR         r     1 @ERR                       4-0-0/w PTR         r     1 @FNC
     8-0-0/w PTR         r     1 @K$RWPARM                  6-0-0/w PTR         r     1 @KNA$SSN
    *0-0-0/w UBIN(16)    r     1 ERR                       *0-0-0/w UBIN(16)    r     1 FNC
     C-0-0/c CHAR(100)   r     1 HDR                       *0-0-0/w STRC(656)   r     1 K$RWPARM
    3E-0-0/w STRC(528)   r     1 KN$NETPARM                *0-0-0/w STRC(400)   r     1 KNA$SSN
    5F-0-0/b BIT         r     1 USER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(528)   r     1 KN_NETPARM_INIT


   Procedure KNA$FCNO requires 160 words for executable code.
   Procedure KNA$FCNO requires 102 words of local(AUTO) storage.
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:233  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:234  
          MINI XREF LISTING

COMMON_START
      7753**LABEL    7749--GOTO
ERR
      7380**DCL         6--PROC     7751--ENTRY    7771<<ASSIGN   7782<<ASSIGN
ERR_NOQ
      7709**DCL      7783>>ASSIGN
FNC
      6980**DCL         6--PROC     7751--ENTRY    7762>>IF       7763<>CALL
HDR
      7383**DCL      7763<>CALL
K$RWPARM
      6998**DCL         6--PROC     7751--ENTRY    7763<>CALL
K$RWPARM.BLKREC
      7028**DCL      7053--REDEF
K$RWPARM.DVE.DVBYTE.VFC
      7068**DCL      7069--REDEF
K$RWPARM.DVE.EOMCHAR
      7076**DCL      7080--REDEF
K$RWPARM.ERR
      7140**DCL      7145--REDEF
K$RWPARM.FC
      7104**DCL      7105--REDEF
K$RWPARM.FLDID
      7286**DCL      7287--REDEF
K$RWPARM.KEYTYPE
      7293**DCL      7294--REDEF
K$RWPARM.MSG$
      6999**DCL      7000--REDEF    7009--REDEF
K$RWPARM.MSGC$
      7000**DCL      7769>>ASSIGN
K$RWPARM.MSGID
      7115**DCL      7120--REDEF
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:235  
K$RWPARM.MSGIDXT
      7128**DCL      7132--REDEF
K$RWPARM.MSGSZ
      7010**DCL      7770>>ASSIGN
K$RWPARM.ORG
      7264**DCL      7265--REDEF
K$RWPARM.UHDR$
      7153**DCL      7767>>ASSIGN
K$RWPARM.UHDRSZ
      7158**DCL      7768>>ASSIGN
K$RWPARM.VDOFLGS
      7266**DCL      7277--REDEF
KN$NETPARM
      7397**DCL      7765<<ASSIGN   7775<>CALL
KN$NETPARM.ERRCODE
      7504**DCL      7779>>IF       7779>>IF       7782>>ASSIGN
KN$NETPARM.FUNCTION
      7492**DCL      7766<<ASSIGN
KN$NETPARM.LDCT$
      7398**DCL      7773<<ASSIGN   7774>>ASSIGN
KN$NETPARM.MSG$
      7404**DCL      7409--REDEF    7769<<ASSIGN
KN$NETPARM.MSGSZ
      7415**DCL      7770<<ASSIGN
KN$NETPARM.NHDR$
      7456**DCL      7457--REDEF
KN$NETPARM.SHDR$
      7434**DCL      7435--REDEF
KN$NETPARM.SLDCT$
      7511**DCL      7774<<ASSIGN
KN$NETPARM.THDR$
      7445**DCL      7446--REDEF
KN$NETPARM.UHDR$
      7420**DCL      7421--REDEF    7767<<ASSIGN
KN$NETPARM.UHDRSZ
      7429**DCL      7768<<ASSIGN
PL6.E3A0      #007=KNA$FCNO File=KNA$SUBS.:E05TSI                                WED 07/30/97 01:03 Page:236  
KNA$BUILD_VDO
      7744**DCL-ENT  7763--CALL
KNA$REG_USER
      7745**DCL-ENT  7791--CALL
KNA$SSN
      7310**DCL         6--PROC     7751--ENTRY    7791--CALL
KNA$SSN.ERROR
      7336**DCL      7783<<ASSIGN
KNA$SSN.FLAGS.CQ
      7314**DCL      7790<<ASSIGN   7792<<ASSIGN
KNA$SSN.IOPRD$
      7372**DCL      7372--REDEF
KNA$SSN.LDCT$
      7369**DCL      7773>>ASSIGN
KNA$SSN.RLCID.NODE#
      7376**DCL      7376--REDEF
KNA$SSN.STATE
      7377**DCL      7758>>IF       7758>>IF
KNS$SEND
      7743**DCL-ENT  7775--CALL
KN_NETPARM_INIT
      7553**DCL      7765>>ASSIGN
KN_NETPARM_INIT.MSG$
      7560**DCL      7565--REDEF
KN_NETPARM_INIT.NHDR$
      7612**DCL      7613--REDEF
KN_NETPARM_INIT.SHDR$
      7590**DCL      7591--REDEF
KN_NETPARM_INIT.THDR$
      7601**DCL      7602--REDEF
KN_NETPARM_INIT.UHDR$
      7576**DCL      7577--REDEF
USER
      7537**DCL      7748<<ASSIGN   7753<<ASSIGN   7779>>IF

PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:237  
     1343        1        /*T***********************************************************/
     1344        2        /*T*                                                         */
     1345        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1346        4        /*T*                                                         */
     1347        5        /*T***********************************************************/
     1348        6        KNA$CONV_STR: PROC (WINDOW,ERROR) ALTRET;
     1349        7
     1350        8        /*F* NAME: KNA$CONV_STR
     1351        9             PURPOSE: To convert a stream name to a stream number
     1352       10             DESCRIPTION: This module validates the passed stream name and
     1353       11                          then converts the name to a number.  It does this
     1354       12                        by converting the name to a number.
     1355       13         */
     1356       14
     1357       15        /* Include files */
     1358       16        %INCLUDE F_ERRORS_C;
     1359      256        %INCLUDE LCP_6;
     1360     4535
     1361     4536        /* Parameters */
     1362     4537        %VLP_WINDOW (FPTN=WINDOW,STCLASS=PARAM);
     1363     4581    1   DCL ERROR BIT(32) ALIGNED;
     1364     4582
     1365     4583        /* Auto */
     1366     4584    1   DCL I UBIN;
     1367     4585
     1368     4586
     1369     4587        /* Error codes */
     1370     4588        %VLP_ERRCODE (FPTN=INVRES,ERR#=%E$INVRES,FCG=KN,MID=A,MON='1'B,SEV=%G_SEV_ERROR#);
     1371     4634
     1372     4635        %EJECT;
PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:238  
     1373     4636    1      IF WINDOW.FWINDOW = '    '
     1374     4637    2      THEN DO;
     1375     4638    2           WINDOW.FSTR.ID = 0;
     1376     4639    2           RETURN;
     1377     4640    2           END;
     1378     4641    1      IF SUBSTR(WINDOW.FWINDOW,0,2) ~= 'UC'
     1379     4642    2      THEN DO;
     1380     4643    2           ERROR = INVRES;
     1381     4644    2           ALTRETURN;
     1382     4645    2           END;
     1383     4646    1      CALL INDEX(I,SUBSTR(WINDOW.FWINDOW,2,1),'0123456789')
     1384     4647    2      WHENALTRETURN DO;
     1385     4648    2           ERROR = INVRES;
     1386     4649    2           ALTRETURN;
     1387     4650    2           END;
     1388     4651    1      CALL INDEX(I,SUBSTR(WINDOW.FWINDOW,3,1),'0123456789')
     1389     4652    2      WHENALTRETURN DO;
     1390     4653    2           ERROR = INVRES;
     1391     4654    2           ALTRETURN;
     1392     4655    2           END;
     1393     4656    1      CALL CHARBIN(I,SUBSTR(WINDOW.FWINDOW,2,2));
     1394     4657    1      WINDOW.FSTR.ID = I;
     1395     4658    1      RETURN;
     1396     4659
     1397     4660    1   END KNA$CONV_STR;
     1398     4661        %EOD;

PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:239  
--  Include file information  --

   G_LCP6_E.:E05TOU  is referenced.
   GT_LCP6_M.:E05TOU  is referenced.
   KI_CP6.:E05TOU  is referenced.
   GF_LCP6_M.:E05TOU  is referenced.
   GM_LCP6_M.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   GJ_LCP6_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$CONV_STR.

   Procedure KNA$CONV_STR requires 118 words for executable code.
   Procedure KNA$CONV_STR requires 12 words of local(AUTO) storage.

PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:240  

 Object Unit name= KNA$CONV_STR                               File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 01:03:42.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Data  even  none     2      2  KNA$CONV_STR
    1  RoData even  UTS      8      8  KNA$CONV_STR
    2   Proc  even  none   118     76  KNA$CONV_STR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  KNA$CONV_STR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_2
                       nStd      0 X6A_ARET
                       nStd      0 X6A_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$ROS$
PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:241  


     1343        1        /*T***********************************************************/
     1344        2        /*T*                                                         */
     1345        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1346        4        /*T*                                                         */
     1347        5        /*T***********************************************************/
     1348        6        KNA$CONV_STR: PROC (WINDOW,ERROR) ALTRET;

      6   2 000000  D380 0000 0000  xent KNA$CONV_STR    LNJ,B5   X6A_AUTO_2
          2 000003       000C 0002                       DC       12,2

     1349        7
     1350        8        /*F* NAME: KNA$CONV_STR
     1351        9             PURPOSE: To convert a stream name to a stream number
     1352       10             DESCRIPTION: This module validates the passed stream name and
     1353       11                          then converts the name to a number.  It does this
     1354       12                        by converting the name to a number.
     1355       13         */
     1356       14
     1357       15        /* Include files */
     1358       16        %INCLUDE F_ERRORS_C;
     1359      256        %INCLUDE LCP_6;
     1360     4535
     1361     4536        /* Parameters */
     1362     4537        %VLP_WINDOW (FPTN=WINDOW,STCLASS=PARAM);
     1363     4581    1   DCL ERROR BIT(32) ALIGNED;
     1364     4582
     1365     4583        /* Auto */
     1366     4584    1   DCL I UBIN;
     1367     4585
     1368     4586
     1369     4587        /* Error codes */
     1370     4588        %VLP_ERRCODE (FPTN=INVRES,ERR#=%E$INVRES,FCG=KN,MID=A,MON='1'B,SEV=%G_SEV_ERROR#);
     1371     4634
     1372     4635        %EJECT;
PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:242  
     1373     4636    1      IF WINDOW.FWINDOW = '    '

   4636   2 000005  ECC7 0004                            LDB,B6   @WINDOW,AUTO
          2 000007  DB80 0000 0000  01                   LAB,B5   0
          2 00000A  0022                                 ACM      ;
          2 00000B       4406 0000                                ALPHANUM(0,B6,,4,FILL),;
          2 00000D       4405 0000                                ALPHANUM(0,B5,,4,FILL)
          2 00000F  5301 0005                            CBNE     s:4641,PREL

     1374     4637    2      THEN DO;

     1375     4638    2           WINDOW.FSTR.ID = 0;

   4638   2 000011  8786                                 CLH      ,B6

     1376     4639    2           RETURN;

   4639   2 000012  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1377     4640    2           END;
     1378     4641    1      IF SUBSTR(WINDOW.FWINDOW,0,2) ~= 'UC'

   4641   2 000015  DB80 0000 0000  01                   LAB,B5   0
          2 000018  0022                                 ACM      ;
          2 000019       4206 0000                                ALPHANUM(0,B6,,2,FILL),;
          2 00001B       4205 0002                                ALPHANUM(2,B5,,2,FILL)
          2 00001D  5381 000A                            CBE      s:4646,PREL

     1379     4642    2      THEN DO;

     1380     4643    2           ERROR = INVRES;

   4643   2 00001F  8C80 0000 0000  00                   LDI      INVRES
          2 000022  DCC7 0006                            LDB,B5   @ERROR,AUTO
          2 000024  8D05                                 SDI      ,B5

     1381     4644    2           ALTRETURN;
PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:243  

   4644   2 000025  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1382     4645    2           END;
     1383     4646    1      CALL INDEX(I,SUBSTR(WINDOW.FWINDOW,2,1),'0123456789')

   4646   2 000028  DB80 0000 0000  01                   LAB,B5   0
          2 00002B  0028                                 SRH      ;
          2 00002C       4106 0001                                ALPHANUM(1,B6,,1),;
          2 00002E       4407 000A                                BINARY(I+2,AUTO,,4),;
          2 000030       4A05 0003                                ALPHANUM(3,B5,,10)
          2 000032  5381 0006                            CBE      s:4646+17,PREL
          2 000034  6C0A                                 LDV,R6   10
          2 000035  EF47 0008                            STR,R6   I,AUTO
          2 000037  0F81 0007                            B        s:4648,PREL
          2 000039  E847 000B                            LDR,R6   I+3,AUTO
          2 00003B  EF47 0008                            STR,R6   I,AUTO
          2 00003D  0F81 000A                            B        s:4651,PREL

     1384     4647    2      WHENALTRETURN DO;

     1385     4648    2           ERROR = INVRES;

   4648   2 00003F  8C80 0000 0000  00                   LDI      INVRES
          2 000042  ECC7 0006                            LDB,B6   @ERROR,AUTO
          2 000044  8D06                                 SDI      ,B6

     1386     4649    2           ALTRETURN;

   4649   2 000045  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1387     4650    2           END;
     1388     4651    1      CALL INDEX(I,SUBSTR(WINDOW.FWINDOW,3,1),'0123456789')

   4651   2 000048  DB80 0000 0000  01                   LAB,B5   0
          2 00004B  0028                                 SRH      ;
          2 00004C       C106 0001                                ALPHANUM(1,B6,1,1),;
PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:244  
          2 00004E       4407 000A                                BINARY(I+2,AUTO,,4),;
          2 000050       4A05 0003                                ALPHANUM(3,B5,,10)
          2 000052  5381 0006                            CBE      s:4651+17,PREL
          2 000054  6C0A                                 LDV,R6   10
          2 000055  EF47 0008                            STR,R6   I,AUTO
          2 000057  0F81 0007                            B        s:4653,PREL
          2 000059  E847 000B                            LDR,R6   I+3,AUTO
          2 00005B  EF47 0008                            STR,R6   I,AUTO
          2 00005D  0F81 000A                            B        s:4656,PREL

     1389     4652    2      WHENALTRETURN DO;

     1390     4653    2           ERROR = INVRES;

   4653   2 00005F  8C80 0000 0000  00                   LDI      INVRES
          2 000062  ECC7 0006                            LDB,B6   @ERROR,AUTO
          2 000064  8D06                                 SDI      ,B6

     1391     4654    2           ALTRETURN;

   4654   2 000065  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1392     4655    2           END;
     1393     4656    1      CALL CHARBIN(I,SUBSTR(WINDOW.FWINDOW,2,2));

   4656   2 000068  002A                                 CDB      ;
          2 000069       0206 0001                                UNPACKED(1,B6,,2,UNSIGNED),;
          2 00006B       0407 000A                                BINARY(I+2,AUTO,,4)
          2 00006D  437F                                 CSYNC    s:4656+4,SPREL
          2 00006E  E847 000B                            LDR,R6   I+3,AUTO
          2 000070  EF47 0008                            STR,R6   I,AUTO

     1394     4657    1      WINDOW.FSTR.ID = I;

   4657   2 000072  E786                                 STH,R6   ,B6

     1395     4658    1      RETURN;
PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:245  

   4658   2 000073  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
     1396     4659
     1397     4660    1   END KNA$CONV_STR;
     1398     4661        %EOD;

PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:246  
--  Include file information  --

   G_LCP6_E.:E05TOU  is referenced.
   GT_LCP6_M.:E05TOU  is referenced.
   KI_CP6.:E05TOU  is referenced.
   GF_LCP6_M.:E05TOU  is referenced.
   GM_LCP6_M.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   GJ_LCP6_M.:E05TOU  is referenced.
   GH_LCP6_M.:E05TOU  is referenced.
   LCP_6.:E05TOU  cannot be made into a system file and is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$CONV_STR.
PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:247  

 **** Variables and constants ****

  ****  Section 000  Data  KNA$CONV_STR

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(32)    r     1 INVRES

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @ERROR                     4-0-0/w PTR         r     1 @WINDOW
    *0-0-0/w BIT (32)    r     1 ERROR                      8-0-0/w UBIN(16)    r     1 I
    *0-0-0/w STRC(256)   r     1 WINDOW


   Procedure KNA$CONV_STR requires 118 words for executable code.
   Procedure KNA$CONV_STR requires 12 words of local(AUTO) storage.
PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:248  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=KNA$CONV_STR File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:03 Page:249  
          MINI XREF LISTING

ERROR
      4581**DCL         6--PROC     4643<<ASSIGN   4648<<ASSIGN   4653<<ASSIGN
I
      4584**DCL      4646<<CALLBLT  4651<<CALLBLT  4656<<CALLBLT  4657>>ASSIGN
INVRES
      4602**DCL      4643>>ASSIGN   4648>>ASSIGN   4653>>ASSIGN
WINDOW
      4555**DCL         6--PROC
WINDOW.FSTR.ID
      4555**DCL      4638<<ASSIGN   4657<<ASSIGN
WINDOW.FWINDOW
      4555**DCL      4555--REDEF    4556--REDEF    4636>>IF       4641>>IF       4646>>CALLBLT  4651>>CALLBLT
      4656>>CALLBLT

PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:250  
     1399        1        /*T***********************************************************/
     1400        2        /*T*                                                         */
     1401        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1402        4        /*T*                                                         */
     1403        5        /*T***********************************************************/
     1404        6        KNA$CHECK_VDO: PROC (K$RWPARM,ERR) ALTRET;
     1405        7
     1406        8        /*F*
     1407        9             NAME: KNA$CHECK_VDO
     1408       10             PURPOSE:
     1409       11                  This routine checks the buffer of  VDOs
     1410       12        */
     1411       13
     1412       14        %INCLUDE CP_6_SUBS;
     1413      554        %INCLUDE GU_LCP6_M;
     1414     1482        %INCLUDE G_LCP6_E;
     1415     1740        %INCLUDE KV$VDO;
     1416     2755        %INCLUDE K$RWPARM;
     1417     3141        %INCLUDE KN_ERRORS_C;
     1418     3205        %K$RWPARM(NAME=K$RWPARM,STCLASS=PARAM);
     1419     3521        %VLP_ERRCODE (FPTN=ERR,STCLASS=PARAM);
     1420     3567        %KV_VDO_E;
     1421     3603        %KV_VDOVLP_E;
     1422     3617        %KV_VDOMRKTYP_E;
     1423     3623        %KV_DATMOD_E;
     1424     3629        %KV_DATCTRCHRTYP_E;
     1425     3635
     1426     3636        /* Table size of all vdos */
     1427     3637        %KV_VDOBYTSIZ (NAME=KNA_VDOBYTSIZ,STCLASS=SYMREF);
     1428     3657        %KV$VDO (STCLASS="BASED(MSG$)");
     1429     3684        %KV$VDOVLP (STCLASS="BASED(MSG$)");
     1430     3720        %KV$VDOVLP_DAT1 (STCLASS="BASED(MSG$)",LAST=",");
     1431     3770    1         2 MSG CHAR(KV$VDOVLP_DAT1.BYTSIZ);
     1432     3771        %KV$VDOVLP_DAT2 (STCLASS="BASED(MSG$)",LAST=",");
     1433     3821    1         2 MSG CHAR(MSGSZ);
     1434     3822        %KV$VDOVLP_FLDID (STCLASS="BASED(MSG$)");
     1435     3873        %KV$VDOVLP_KEY (STCLASS="BASED(MSG$)",LAST=",");
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:251  
     1436     3923    1         2 KEY CHAR(KV$VDOVLP_KEY.BYTSIZ);
     1437     3924        %KV$VDOVLP_MRK (STCLASS="BASED(MSG$)");
     1438     3977
     1439     3978        /* Error codes */
     1440     3979        %VLP_ERRCODE (FPTN=ERR_ILGVDO,FCG=KN,MID=A,MON='1'B,ERR#=%E$ILGVDO,SEV=G_SEV_ERROR#)
              3979            ;
     1441     4025        %VLP_ERRCODE (FPTN=ERR_ILGMRK,FCG=KN,MID=A,MON='1'B,ERR#=%E$ILGMRK,SEV=G_SEV_ERROR#)
              4025            ;
     1442     4071        %VLP_ERRCODE (FPTN=ERR_ILGVDOVLP,FCG=KN,MID=A,MON='1'B,ERR#=%E$ILGVDOVLP,SEV=
              4071            G_SEV_ERROR#);
     1443     4117        %VLP_ERRCODE (FPTN=ERR_MALFORMED,FCG=KN,MID=A,MON='1'B,ERR#=%E$MALFORMED,SEV=
              4117            G_SEV_ERROR#);
     1444     4163
     1445     4164    1   DCL MSG$ CPTR;
     1446     4165    1   DCL MSGSZ UBIN;
     1447     4166    1   DCL B$HWORD UBIN(16) BASED CALIGNED;
     1448     4167    1   DCL TMP_SZ UBIN;
     1449     4168    1   DCL MARKER BIT(1);
     1450     4169    1   DCL VLP BIT(1);
     1451     4170    1   DCL LAST$ CPTR;
     1452     4171    1   DCL LAST BIT(1);
     1453     4172        %EJECT;
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:252  
     1454     4173
     1455     4174    1      MSG$ = K$RWPARM.UHDR$;
     1456     4175    1      TMP_SZ = K$RWPARM.UHDRSZ;
     1457     4176    1      MARKER = '0'B;
     1458     4177
     1459     4178    2      DO WHILE (TMP_SZ > 0 AND NOT MARKER);
     1460     4179
     1461     4180    2           VLP = KV$VDO.VLP;
     1462     4181    3           DO CASE (KV$VDO.FNC);
     1463     4182
     1464     4183    3            CASE (%KV_VDO_FNC_DAT,
     1465     4184    3             %KV_VDO_FNC_DCLFLD,%KV_VDO_FNC_ERS,%KV_VDO_FNC_RLSFLD,
     1466     4185    3             %KV_VDO_FNC_SLCFLD,%KV_VDO_FNC_SLCGRPRND,%KV_VDO_FNC_SLCQLF,
     1467     4186    3             %KV_VDO_FNC_UPDRELDVC);
     1468     4187
     1469     4188    3            CASE (%KV_VDO_FNC_RQSMRK);
     1470     4189    3              MARKER = '1'B;
     1471     4190
     1472     4191
     1473     4192    3            CASE (ELSE);
     1474     4193    3              ERR = ERR_ILGVDO;
     1475     4194    3              ALTRETURN;
     1476     4195        /*E* ERROR: KNA-E$ILGVDO
     1477     4196             MESSAGE: A illegal VDO function was passed on a M$WRTMLT.
     1478     4197        */
     1479     4198
     1480     4199
     1481     4200    3              END;                         /* End cases                          */
     1482     4201
     1483     4202    2           TMP_SZ = TMP_SZ - KNA_VDOBYTSIZ(KV$VDO.FNC);
     1484     4203    2           MSG$ = PINCRC(MSG$,KNA_VDOBYTSIZ(KV$VDO.FNC));
     1485     4204
     1486     4205    2           LAST = '0'B;
     1487     4206
     1488     4207    2           IF VLP
     1489     4208    2           THEN
     1490     4209    3           DO WHILE (TMP_SZ > 0 AND NOT LAST);
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:253  
     1491     4210
     1492     4211    3                LAST = KV$VDOVLP.LST;
     1493     4212
     1494     4213    3                LAST$ = MSG$;
     1495     4214
     1496     4215    4                DO CASE (MSG$->KV$VDOVLP.TYP);
     1497     4216
     1498     4217    4                 CASE (%KV_VDOVLP_TYP_DAT1);
     1499     4218    4                   MSGSZ = KV$VDOVLP_DAT1.BYTSIZ;
     1500     4219    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_DAT1);
     1501     4220    4                   MSG$ = PINCRC(MSG$,SIZEC(KV$VDOVLP_DAT1));
     1502     4221    4                   IF MOD(TMP_SZ,2) ~= 0
     1503     4222    5                   THEN DO;
     1504     4223    5                        TMP_SZ = TMP_SZ - 1;
     1505     4224    5                        MSG$ = PINCRC(MSG$,1);
     1506     4225    5                        END;
     1507     4226
     1508     4227    4                 CASE (%KV_VDOVLP_TYP_DAT2);
     1509     4228    4                   MSGSZ = KV$VDOVLP_DAT2.BYTSIZ;
     1510     4229    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_DAT2);
     1511     4230    4                   MSG$=PINCRC(MSG$,SIZEC(KV$VDOVLP_DAT2));
     1512     4231    4                   IF MOD(TMP_SZ,2) ~= 0
     1513     4232    5                   THEN DO;
     1514     4233    5                        TMP_SZ = TMP_SZ - 1;
     1515     4234    5                        MSG$ = PINCRC(MSG$,1);
     1516     4235    5                        END;
     1517     4236
     1518     4237    4                 CASE (%KV_VDOVLP_TYP_FLDID);
     1519     4238    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_FLDID);
     1520     4239    4                   MSG$=PINCRC(MSG$,SIZEC(KV$VDOVLP_FLDID));
     1521     4240
     1522     4241
     1523     4242    4                 CASE (%KV_VDOVLP_TYP_KEY);
     1524     4243    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_KEY);
     1525     4244    4                   MSG$=PINCRC(MSG$,SIZEC(KV$VDOVLP_KEY));
     1526     4245
     1527     4246    4                 CASE (%KV_VDOVLP_TYP_MRK);
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:254  
     1528     4247    4                   KV$VDOVLP_MRK.MRKTYP = %KV_VDOMRKTYP_ENDACK;
     1529     4248    4                   KV$VDOVLP_MRK.RSP = '0'B;
     1530     4249    4                   MSG$ = PINCRW(MSG$,SIZEW(KV$VDOVLP_MRK));
     1531     4250    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_MRK);
     1532     4251    4                   IF TMP_SZ ~= 0          /* Not last thing in buffer           */
     1533     4252    5                   THEN DO;
     1534     4253    5                        ERR = ERR_ILGMRK;
     1535     4254    5                        ALTRETURN;
     1536     4255    5                        END;
     1537     4256        /*E* ERROR: KNA-E$ILGMRK
     1538     4257             MESSAGE: Marker VLP is not last thing in the buffer.
     1539     4258        */
     1540     4259
     1541     4260
     1542     4261    4                 CASE (ELSE);
     1543     4262    4                   ERR = ERR_ILGVDOVLP;
     1544     4263    4                   ALTRETURN;
     1545     4264        /*E* ERROR: KNA-E$ILGVDOVLP
     1546     4265             MESSAGE: Illegal VDOVLP in M$WRTMLT buffer.
     1547     4266        */
     1548     4267
     1549     4268
     1550     4269    4                   END;                    /* End cases                          */
     1551     4270
     1552     4271    3                TMP_SZ = (TMP_SZ / 2) * 2;
     1553     4272    3                MSG$ = PINCRC(K$RWPARM.UHDR$,((POFFC(MSG$,K$RWPARM.UHDR$)+1)/2)*2);
     1554     4273    3                END;
     1555     4274
     1556     4275    2           END;
     1557     4276    1      IF TMP_SZ ~= 0
     1558     4277    2      THEN DO;
     1559     4278    2           ERR = ERR_MALFORMED;
     1560     4279    2           ALTRETURN;
     1561     4280    2           END;
     1562     4281        /*E* ERROR: KNA-E$MALFORMED
     1563     4282             MESSAGE: Malformed buffer on a M$WRTMLT.
     1564     4283             MESSAGE1: Either there was a malformed VDO or VDOVLP.
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:255  
     1565     4284        */
     1566     4285
     1567     4286    1      IF LAST$ = ADDR(NIL) OR LAST$->KV$VDOVLP.TYP ~= %KV_VDOVLP_TYP_MRK
     1568     4287    1        OR NOT MARKER
     1569     4288    2      THEN DO;
     1570     4289    2           ERR = ERR_ILGMRK;
     1571     4290    2           ALTRETURN;
     1572     4291    2           END;
     1573     4292
     1574     4293    1      RETURN;
     1575     4294
     1576     4295
     1577     4296
     1578     4297    1   END KNA$CHECK_VDO;
     1579     4298        %EOD;

PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:256  
--  Include file information  --

   KN_ERRORS_C.:E05TOU  is referenced.
   K$RWPARM.:E05TOU  is referenced.
   KV$VDO.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$CHECK_VDO.

   Procedure KNA$CHECK_VDO requires 389 words for executable code.
   Procedure KNA$CHECK_VDO requires 22 words of local(AUTO) storage.

PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:257  

 Object Unit name= KNA$CHECK_VDO                              File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 01:04:01.92 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Data  even  none     8      8  KNA$CHECK_VDO
    1   Proc  even  none   389    185  KNA$CHECK_VDO

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  KNA$CHECK_VDO

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_2
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     KNA_VDOBYTSIZ                    r    G$ROS$
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:258  


     1399        1        /*T***********************************************************/
     1400        2        /*T*                                                         */
     1401        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1402        4        /*T*                                                         */
     1403        5        /*T***********************************************************/
     1404        6        KNA$CHECK_VDO: PROC (K$RWPARM,ERR) ALTRET;

      6   1 000000  D380 0000 0000  xent KNA$CHECK_VDO   LNJ,B5   X6A_AUTO_2
          1 000003       0016 0002                       DC       22,2

     1405        7
     1406        8        /*F*
     1407        9             NAME: KNA$CHECK_VDO
     1408       10             PURPOSE:
     1409       11                  This routine checks the buffer of  VDOs
     1410       12        */
     1411       13
     1412       14        %INCLUDE CP_6_SUBS;
     1413      554        %INCLUDE GU_LCP6_M;
     1414     1482        %INCLUDE G_LCP6_E;
     1415     1740        %INCLUDE KV$VDO;
     1416     2755        %INCLUDE K$RWPARM;
     1417     3141        %INCLUDE KN_ERRORS_C;
     1418     3205        %K$RWPARM(NAME=K$RWPARM,STCLASS=PARAM);
     1419     3521        %VLP_ERRCODE (FPTN=ERR,STCLASS=PARAM);
     1420     3567        %KV_VDO_E;
     1421     3603        %KV_VDOVLP_E;
     1422     3617        %KV_VDOMRKTYP_E;
     1423     3623        %KV_DATMOD_E;
     1424     3629        %KV_DATCTRCHRTYP_E;
     1425     3635
     1426     3636        /* Table size of all vdos */
     1427     3637        %KV_VDOBYTSIZ (NAME=KNA_VDOBYTSIZ,STCLASS=SYMREF);
     1428     3657        %KV$VDO (STCLASS="BASED(MSG$)");
     1429     3684        %KV$VDOVLP (STCLASS="BASED(MSG$)");
     1430     3720        %KV$VDOVLP_DAT1 (STCLASS="BASED(MSG$)",LAST=",");
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:259  
     1431     3770    1         2 MSG CHAR(KV$VDOVLP_DAT1.BYTSIZ);
     1432     3771        %KV$VDOVLP_DAT2 (STCLASS="BASED(MSG$)",LAST=",");
     1433     3821    1         2 MSG CHAR(MSGSZ);
     1434     3822        %KV$VDOVLP_FLDID (STCLASS="BASED(MSG$)");
     1435     3873        %KV$VDOVLP_KEY (STCLASS="BASED(MSG$)",LAST=",");
     1436     3923    1         2 KEY CHAR(KV$VDOVLP_KEY.BYTSIZ);
     1437     3924        %KV$VDOVLP_MRK (STCLASS="BASED(MSG$)");
     1438     3977
     1439     3978        /* Error codes */
     1440     3979       %VLP_ERRCODE (FPTN=ERR_ILGVDO,FCG=KN,MID=A,MON='1'B,ERR#=%E$ILGVDO,SEV=G_SEV_ERROR#)
              3979            ;
     1441     4025       %VLP_ERRCODE (FPTN=ERR_ILGMRK,FCG=KN,MID=A,MON='1'B,ERR#=%E$ILGMRK,SEV=G_SEV_ERROR#)
              4025            ;
     1442     4071        %VLP_ERRCODE (FPTN=ERR_ILGVDOVLP,FCG=KN,MID=A,MON='1'B,ERR#=%E$ILGVDOVLP,SEV=
              4071            G_SEV_ERROR#);
     1443     4117        %VLP_ERRCODE (FPTN=ERR_MALFORMED,FCG=KN,MID=A,MON='1'B,ERR#=%E$MALFORMED,SEV=
              4117            G_SEV_ERROR#);
     1444     4163
     1445     4164    1   DCL MSG$ CPTR;
     1446     4165    1   DCL MSGSZ UBIN;
     1447     4166    1   DCL B$HWORD UBIN(16) BASED CALIGNED;
     1448     4167    1   DCL TMP_SZ UBIN;
     1449     4168    1   DCL MARKER BIT(1);
     1450     4169    1   DCL VLP BIT(1);
     1451     4170    1   DCL LAST$ CPTR;
     1452     4171    1   DCL LAST BIT(1);
     1453     4172        %EJECT;
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:260  
     1454     4173
     1455     4174    1      MSG$ = K$RWPARM.UHDR$;

   4174   1 000005  ECC7 0004                            LDB,B6   @K$RWPARM,AUTO
          1 000007  DCC6 0017                            LDB,B5   23,B6
          1 000009  DFC7 0008                            STB,B5   MSG$,AUTO

     1456     4175    1      TMP_SZ = K$RWPARM.UHDRSZ;

   4175   1 00000B  E846 0019                            LDR,R6   25,B6
          1 00000D  EF47 000B                            STR,R6   TMP_SZ,AUTO

     1457     4176    1      MARKER = '0'B;

   4176   1 00000F  8747 000C                            CL       MARKER,AUTO

     1458     4177
     1459     4178    2      DO WHILE (TMP_SZ > 0 AND NOT MARKER);

   4178   1 000011  0F81 0143                            B        s:4275,PREL

     1460     4179
     1461     4180    2           VLP = KV$VDO.VLP;

   4180   1 000013  ECC7 0008                            LDB,B6   MSG$,AUTO
          1 000015  E806                                 LDR,R6   ,B6
          1 000016  6008                                 SOL,R6   8
          1 000017  E570 8000                            AND,R6   -32768,IMO
          1 000019  EF47 000D                            STR,R6   VLP,AUTO

     1462     4181    3           DO CASE (KV$VDO.FNC);

   4181   1 00001B  B286                                 LLH,R3   ,B6
          1 00001C  3EFB                                 ADV,R3   -5
          1 00001D  3D1C                                 CMV,R3   28
          1 00001E  0281 0028                            BGE      s:4193,PREL
          1 000020  A830 0000 0026  01                   LDR,R2   s:4181+11,R3
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:261  
          1 000023  83A0 0000 0042  01                   JMP      s:4189,R2
          1 000026       000E                            DC       s:4202,PREL
          1 000027       0005                            DC       s:4193,PREL
          1 000028       000E                            DC       s:4202,PREL
          1 000029       0005                            DC       s:4193,PREL
          1 00002A       0005                            DC       s:4193,PREL
          1 00002B       0005                            DC       s:4193,PREL
          1 00002C       0005                            DC       s:4193,PREL
          1 00002D       000E                            DC       s:4202,PREL
          1 00002E       0005                            DC       s:4193,PREL
          1 00002F       0005                            DC       s:4193,PREL
          1 000030       0005                            DC       s:4193,PREL
          1 000031       0005                            DC       s:4193,PREL
          1 000032       0005                            DC       s:4193,PREL
          1 000033       0005                            DC       s:4193,PREL
          1 000034       0005                            DC       s:4193,PREL
          1 000035       000E                            DC       s:4202,PREL
          1 000036       0005                            DC       s:4193,PREL
          1 000037       0005                            DC       s:4193,PREL
          1 000038       0005                            DC       s:4193,PREL
          1 000039       0005                            DC       s:4193,PREL
          1 00003A       000E                            DC       s:4202,PREL
          1 00003B       000E                            DC       s:4202,PREL
          1 00003C       000E                            DC       s:4202,PREL
          1 00003D       0005                            DC       s:4193,PREL
          1 00003E       0005                            DC       s:4193,PREL
          1 00003F       000E                            DC       s:4202,PREL
          1 000040       0005                            DC       s:4193,PREL
          1 000041       0000                            DC       s:4189,PREL

     1463     4182
     1464     4183    3            CASE (%KV_VDO_FNC_DAT,

     1465     4184    3             %KV_VDO_FNC_DCLFLD,%KV_VDO_FNC_ERS,%KV_VDO_FNC_RLSFLD,
     1466     4185    3             %KV_VDO_FNC_SLCFLD,%KV_VDO_FNC_SLCGRPRND,%KV_VDO_FNC_SLCQLF,
     1467     4186    3             %KV_VDO_FNC_UPDRELDVC);
     1468     4187
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:262  
     1469     4188    3            CASE (%KV_VDO_FNC_RQSMRK);

     1470     4189    3              MARKER = '1'B;

   4189   1 000042  8947 000C                            LBT,'8000'X       MARKER,AUTO
   4189   1 000044       8000
          1 000045  0F81 000A                            B        s:4202,PREL

     1471     4190
     1472     4191
     1473     4192    3            CASE (ELSE);

     1474     4193    3              ERR = ERR_ILGVDO;

   4193   1 000047  8C80 0000 0000  00                   LDI      ERR_ILGVDO
          1 00004A  DCC7 0006                            LDB,B5   @ERR,AUTO
          1 00004C  8D05                                 SDI      ,B5

     1475     4194    3              ALTRETURN;

   4194   1 00004D  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1476     4195        /*E* ERROR: KNA-E$ILGVDO
     1477     4196             MESSAGE: A illegal VDO function was passed on a M$WRTMLT.
     1478     4197        */
     1479     4198
     1480     4199
     1481     4200    3              END;                         /* End cases                          */

     1482     4201
     1483     4202    2           TMP_SZ = TMP_SZ - KNA_VDOBYTSIZ(KV$VDO.FNC);

   4202   1 000050  9286                                 LLH,R1   ,B6
          1 000051  D290 0000 0000  xsym                 LLH,R5   KNA_VDOBYTSIZ,R1
          1 000054  D247 000B                            SUB,R5   TMP_SZ,AUTO
          1 000056  8255                                 NEG      R5
          1 000057  DF47 000B                            STR,R5   TMP_SZ,AUTO
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:263  

     1484     4203    2           MSG$ = PINCRC(MSG$,KNA_VDOBYTSIZ(KV$VDO.FNC));

   4203   1 000059  B290 0000 0000  xsym                 LLH,R3   KNA_VDOBYTSIZ,R1
          1 00005C  8CC7 0008                            LDI      MSG$,AUTO
          1 00005E  7031                                 DCL,R7   1
          1 00005F  8D47 0012                            SDI      LAST+2,AUTO
          1 000061  F853                                 LDR,R7   R3
          1 000062  6C00                                 LDV,R6   0
          1 000063  8447 0012                            AID      LAST+2,AUTO
          1 000065  7071                                 DCR,R7   1
          1 000066  8D47 0008                            SDI      MSG$,AUTO

     1485     4204
     1486     4205    2           LAST = '0'B;

   4205   1 000068  8747 0010                            CL       LAST,AUTO

     1487     4206
     1488     4207    2           IF VLP

   4207   1 00006A  89C7 000D                            CMZ      VLP,AUTO
          1 00006C  0881 00E8                            BAGE     s:4275,PREL

     1489     4208    2           THEN
     1490     4209    3           DO WHILE (TMP_SZ > 0 AND NOT LAST);

   4209   1 00006E  0F81 00E0                            B        s:4273,PREL

     1491     4210
     1492     4211    3                LAST = KV$VDOVLP.LST;

   4211   1 000070  ECC7 0008                            LDB,B6   MSG$,AUTO
          1 000072  E806                                 LDR,R6   ,B6
          1 000073  E570 8000                            AND,R6   -32768,IMO
          1 000075  EF47 0010                            STR,R6   LAST,AUTO

PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:264  
     1493     4212
     1494     4213    3                LAST$ = MSG$;

   4213   1 000077  8CC7 0008                            LDI      MSG$,AUTO
          1 000079  8D47 000E                            SDI      LAST$,AUTO

     1495     4214
     1496     4215    4                DO CASE (MSG$->KV$VDOVLP.TYP);

   4215   1 00007B  B806                                 LDR,R3   ,B6
          1 00007C  3048                                 SOR,R3   8
          1 00007D  B570 007F                            AND,R3   127,IMO
          1 00007F  3EFC                                 ADV,R3   -4
          1 000080  3D06                                 CMV,R3   6
          1 000081  0281 009F                            BGE      s:4262,PREL
          1 000083  A830 0000 0089  01                   LDR,R2   s:4215+14,R3
          1 000086  83A0 0000 008F  01                   JMP      s:4218,R2
          1 000089       0000                            DC       s:4218,PREL
          1 00008A       0029                            DC       s:4228,PREL
          1 00008B       0092                            DC       s:4262,PREL
          1 00008C       0050                            DC       s:4238,PREL
          1 00008D       005C                            DC       s:4243,PREL
          1 00008E       0076                            DC       s:4247,PREL

     1497     4216
     1498     4217    4                 CASE (%KV_VDOVLP_TYP_DAT1);

     1499     4218    4                   MSGSZ = KV$VDOVLP_DAT1.BYTSIZ;

   4218   1 00008F  D806                                 LDR,R5   ,B6
          1 000090  D570 00FF                            AND,R5   255,IMO
          1 000092  DF47 000A                            STR,R5   MSGSZ,AUTO

     1500     4219    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_DAT1);

   4219   1 000094  5003                                 SOL,R5   3
          1 000095  5E1F                                 ADV,R5   31
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:265  
          1 000096  5044                                 SOR,R5   4
          1 000097  5001                                 SOL,R5   1
          1 000098  8255                                 NEG      R5
          1 000099  DA47 000B                            ADD,R5   TMP_SZ,AUTO
          1 00009B  DF47 000B                            STR,R5   TMP_SZ,AUTO

     1501     4220    4                   MSG$ = PINCRC(MSG$,SIZEC(KV$VDOVLP_DAT1));

   4220   1 00009D  C806                                 LDR,R4   ,B6
          1 00009E  C570 00FF                            AND,R4   255,IMO
          1 0000A0  4003                                 SOL,R4   3
          1 0000A1  4E1F                                 ADV,R4   31
          1 0000A2  4044                                 SOR,R4   4
          1 0000A3  F854                                 LDR,R7   R4
          1 0000A4  6C00                                 LDV,R6   0
          1 0000A5  8447 0008                            AID      MSG$,AUTO
          1 0000A7  8D47 0008                            SDI      MSG$,AUTO

     1502     4221    4                   IF MOD(TMP_SZ,2) ~= 0

   4221   1 0000A9  D570 0001                            AND,R5   1,IMO
          1 0000AB  5901 007E                            BEZ,R5   s:4271,PREL

     1503     4222    5                   THEN DO;

     1504     4223    5                        TMP_SZ = TMP_SZ - 1;

   4223   1 0000AD  88C7 000B                            DEC      TMP_SZ,AUTO

     1505     4224    5                        MSG$ = PINCRC(MSG$,1);

   4224   1 0000AF  7031                                 DCL,R7   1
          1 0000B0  8470 0000 0001                       AID      1,IMO
          1 0000B3  7071                                 DCR,R7   1
          1 0000B4  8D47 0008                            SDI      MSG$,AUTO

     1506     4225    5                        END;
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:266  

   4225   1 0000B6  0F81 0073                            B        s:4271,PREL

     1507     4226
     1508     4227    4                 CASE (%KV_VDOVLP_TYP_DAT2);

     1509     4228    4                   MSGSZ = KV$VDOVLP_DAT2.BYTSIZ;

   4228   1 0000B8  D846 0001                            LDR,R5   1,B6
          1 0000BA  DF47 000A                            STR,R5   MSGSZ,AUTO

     1510     4229    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_DAT2);

   4229   1 0000BC  5003                                 SOL,R5   3
          1 0000BD  5E2F                                 ADV,R5   47
          1 0000BE  5044                                 SOR,R5   4
          1 0000BF  5001                                 SOL,R5   1
          1 0000C0  8255                                 NEG      R5
          1 0000C1  DA47 000B                            ADD,R5   TMP_SZ,AUTO
          1 0000C3  DF47 000B                            STR,R5   TMP_SZ,AUTO

     1511     4230    4                   MSG$=PINCRC(MSG$,SIZEC(KV$VDOVLP_DAT2));

   4230   1 0000C5  C847 000A                            LDR,R4   MSGSZ,AUTO
          1 0000C7  4003                                 SOL,R4   3
          1 0000C8  4E2F                                 ADV,R4   47
          1 0000C9  4044                                 SOR,R4   4
          1 0000CA  F854                                 LDR,R7   R4
          1 0000CB  6C00                                 LDV,R6   0
          1 0000CC  8447 0008                            AID      MSG$,AUTO
          1 0000CE  8D47 0008                            SDI      MSG$,AUTO

     1512     4231    4                   IF MOD(TMP_SZ,2) ~= 0

   4231   1 0000D0  D570 0001                            AND,R5   1,IMO
          1 0000D2  5901 0057                            BEZ,R5   s:4271,PREL

PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:267  
     1513     4232    5                   THEN DO;

     1514     4233    5                        TMP_SZ = TMP_SZ - 1;

   4233   1 0000D4  88C7 000B                            DEC      TMP_SZ,AUTO

     1515     4234    5                        MSG$ = PINCRC(MSG$,1);

   4234   1 0000D6  7031                                 DCL,R7   1
          1 0000D7  8470 0000 0001                       AID      1,IMO
          1 0000DA  7071                                 DCR,R7   1
          1 0000DB  8D47 0008                            SDI      MSG$,AUTO

     1516     4235    5                        END;

   4235   1 0000DD  0F81 004C                            B        s:4271,PREL

     1517     4236
     1518     4237    4                 CASE (%KV_VDOVLP_TYP_FLDID);

     1519     4238    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_FLDID);

   4238   1 0000DF  D847 000B                            LDR,R5   TMP_SZ,AUTO
          1 0000E1  5EFC                                 ADV,R5   -4
          1 0000E2  DF47 000B                            STR,R5   TMP_SZ,AUTO

     1520     4239    4                   MSG$=PINCRC(MSG$,SIZEC(KV$VDOVLP_FLDID));

   4239   1 0000E4  8470 0000 0002                       AID      2,IMO
          1 0000E7  8D47 0008                            SDI      MSG$,AUTO
          1 0000E9  0F81 0040                            B        s:4271,PREL

     1521     4240
     1522     4241
     1523     4242    4                 CASE (%KV_VDOVLP_TYP_KEY);

     1524     4243    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_KEY);
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:268  

   4243   1 0000EB  D806                                 LDR,R5   ,B6
          1 0000EC  D570 00FF                            AND,R5   255,IMO
          1 0000EE  5003                                 SOL,R5   3
          1 0000EF  5E1F                                 ADV,R5   31
          1 0000F0  5044                                 SOR,R5   4
          1 0000F1  5001                                 SOL,R5   1
          1 0000F2  8255                                 NEG      R5
          1 0000F3  DA47 000B                            ADD,R5   TMP_SZ,AUTO
          1 0000F5  DF47 000B                            STR,R5   TMP_SZ,AUTO

     1525     4244    4                   MSG$=PINCRC(MSG$,SIZEC(KV$VDOVLP_KEY));

   4244   1 0000F7  C806                                 LDR,R4   ,B6
          1 0000F8  C570 00FF                            AND,R4   255,IMO
          1 0000FA  4003                                 SOL,R4   3
          1 0000FB  4E1F                                 ADV,R4   31
          1 0000FC  4044                                 SOR,R4   4
          1 0000FD  F854                                 LDR,R7   R4
          1 0000FE  6C00                                 LDV,R6   0
          1 0000FF  8447 0008                            AID      MSG$,AUTO
          1 000101  8D47 0008                            SDI      MSG$,AUTO
          1 000103  0F81 0026                            B        s:4271,PREL

     1526     4245
     1527     4246    4                 CASE (%KV_VDOVLP_TYP_MRK);

     1528     4247    4                   KV$VDOVLP_MRK.MRKTYP = %KV_VDOMRKTYP_ENDACK;

   4247   1 000105  5C01                                 LDV,R5   1
          1 000106  DAC6 0001                            SRM,R5,'00FF'X    1,B6
          1 000108       00FF

     1529     4248    4                   KV$VDOVLP_MRK.RSP = '0'B;

   4248   1 000109  8846 0001                            LBF,'8000'X       1,B6
   4248   1 00010B       8000
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:269  

     1530     4249    4                   MSG$ = PINCRW(MSG$,SIZEW(KV$VDOVLP_MRK));

   4249   1 00010C  8470 0000 0004                       AID      4,IMO
          1 00010F  8D47 0008                            SDI      MSG$,AUTO

     1531     4250    4                   TMP_SZ = TMP_SZ - SIZEC(KV$VDOVLP_MRK);

   4250   1 000111  C847 000B                            LDR,R4   TMP_SZ,AUTO
          1 000113  4EF8                                 ADV,R4   -8
          1 000114  CF47 000B                            STR,R4   TMP_SZ,AUTO

     1532     4251    4                   IF TMP_SZ ~= 0          /* Not last thing in buffer           */

   4251   1 000116  4901 0013                            BEZ,R4   s:4271,PREL

     1533     4252    5                   THEN DO;

     1534     4253    5                        ERR = ERR_ILGMRK;

   4253   1 000118  8C80 0000 0002  00                   LDI      ERR_ILGMRK
          1 00011B  ECC7 0006                            LDB,B6   @ERR,AUTO
          1 00011D  8D06                                 SDI      ,B6

     1535     4254    5                        ALTRETURN;

   4254   1 00011E  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1536     4255    5                        END;
     1537     4256        /*E* ERROR: KNA-E$ILGMRK
     1538     4257             MESSAGE: Marker VLP is not last thing in the buffer.
     1539     4258        */
     1540     4259
     1541     4260
     1542     4261    4                 CASE (ELSE);

     1543     4262    4                   ERR = ERR_ILGVDOVLP;
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:270  

   4262   1 000121  8C80 0000 0004  00                   LDI      ERR_ILGVDOVLP
          1 000124  DCC7 0006                            LDB,B5   @ERR,AUTO
          1 000126  8D05                                 SDI      ,B5

     1544     4263    4                   ALTRETURN;

   4263   1 000127  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1545     4264        /*E* ERROR: KNA-E$ILGVDOVLP
     1546     4265             MESSAGE: Illegal VDOVLP in M$WRTMLT buffer.
     1547     4266        */
     1548     4267
     1549     4268
     1550     4269    4                   END;                    /* End cases                          */

     1551     4270
     1552     4271    3                TMP_SZ = (TMP_SZ / 2) * 2;

   4271   1 00012A  D847 000B                            LDR,R5   TMP_SZ,AUTO
          1 00012C  5041                                 SOR,R5   1
          1 00012D  5001                                 SOL,R5   1
          1 00012E  DF47 000B                            STR,R5   TMP_SZ,AUTO

     1553     4272    3                MSG$ = PINCRC(K$RWPARM.UHDR$,((POFFC(MSG$,K$RWPARM.UHDR$)+1)/2)*2);

   4272   1 000130  ECC7 0004                            LDB,B6   @K$RWPARM,AUTO
          1 000132  8CC6 0017                            LDI      23,B6
          1 000134  7031                                 DCL,R7   1
          1 000135  8D47 0012                            SDI      LAST+2,AUTO
          1 000137  8CC7 0008                            LDI      MSG$,AUTO
          1 000139  7031                                 DCL,R7   1
          1 00013A  84C7 0012                            SID      LAST+2,AUTO
          1 00013C  8470 0000 0001                       AID      1,IMO
          1 00013F  70E1                                 DAR,R7   1
          1 000140  6881 0006                            BGEZ,R6  s:4272+23,PREL
          1 000142  0681 0004                            BCF      s:4272+23,PREL
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:271  
          1 000144  8470 0000 0001                       AID      1,IMO
          1 000147  DCC6 0017                            LDB,B5   23,B6
          1 000149  DFC7 0014                            STB,B5   LAST+4,AUTO
          1 00014B  8447 0014                            AID      LAST+4,AUTO
          1 00014D  8D47 0008                            SDI      MSG$,AUTO

     1554     4273    3                END;

   4273   1 00014F  5901 0005                            BEZ,R5   s:4275,PREL
          1 000151  89C7 0010                            CMZ      LAST,AUTO
          1 000153  0881 FF1C                            BAGE     s:4211,PREL

     1555     4274
     1556     4275    2           END;

   4275   1 000155  E847 000B                            LDR,R6   TMP_SZ,AUTO
          1 000157  6901 0005                            BEZ,R6   s:4276,PREL
          1 000159  89C7 000C                            CMZ      MARKER,AUTO
          1 00015B  0881 FEB7                            BAGE     s:4180,PREL

     1557     4276    1      IF TMP_SZ ~= 0

   4276   1 00015D  6901 000A                            BEZ,R6   s:4286,PREL

     1558     4277    2      THEN DO;

     1559     4278    2           ERR = ERR_MALFORMED;

   4278   1 00015F  8C80 0000 0006  00                   LDI      ERR_MALFORMED
          1 000162  ECC7 0006                            LDB,B6   @ERR,AUTO
          1 000164  8D06                                 SDI      ,B6

     1560     4279    2           ALTRETURN;

   4279   1 000165  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1561     4280    2           END;
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:272  
     1562     4281        /*E* ERROR: KNA-E$MALFORMED
     1563     4282             MESSAGE: Malformed buffer on a M$WRTMLT.
     1564     4283             MESSAGE1: Either there was a malformed VDO or VDOVLP.
     1565     4284        */
     1566     4285
     1567     4286    1      IF LAST$ = ADDR(NIL) OR LAST$->KV$VDOVLP.TYP ~= %KV_VDOVLP_TYP_MRK

   4286   1 000168  8DC7 000E                            CMN      LAST$,AUTO
          1 00016A  0901 000E                            BE       s:4289,PREL
          1 00016C  ECC7 000E                            LDB,B6   LAST$,AUTO
          1 00016E  D806                                 LDR,R5   ,B6
          1 00016F  5048                                 SOR,R5   8
          1 000170  D570 007F                            AND,R5   127,IMO
          1 000172  5D09                                 CMV,R5   9
          1 000173  0981 0005                            BNE      s:4289,PREL
          1 000175  89C7 000C                            CMZ      MARKER,AUTO
          1 000177  0801 000A                            BAL      s:4293,PREL

     1568     4287    1        OR NOT MARKER
     1569     4288    2      THEN DO;

     1570     4289    2           ERR = ERR_ILGMRK;

   4289   1 000179  8C80 0000 0002  00                   LDI      ERR_ILGMRK
          1 00017C  ECC7 0006                            LDB,B6   @ERR,AUTO
          1 00017E  8D06                                 SDI      ,B6

     1571     4290    2           ALTRETURN;

   4290   1 00017F  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1572     4291    2           END;
     1573     4292
     1574     4293    1      RETURN;

   4293   1 000182  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
     1575     4294
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:273  
     1576     4295
     1577     4296
     1578     4297    1   END KNA$CHECK_VDO;
     1579     4298        %EOD;

PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:274  
--  Include file information  --

   KN_ERRORS_C.:E05TOU  is referenced.
   K$RWPARM.:E05TOU  is referenced.
   KV$VDO.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  is referenced.
   GU_LCP6_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
      No diagnostics issued in procedure KNA$CHECK_VDO.
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:275  

 **** Variables and constants ****

  ****  Section 000  Data  KNA$CHECK_VDO

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/w STRC(32)    r     1 ERR_ILGMRK                 0-0-0/w STRC(32)    r     1 ERR_ILGVDO
     4-0-0/w STRC(32)    r     1 ERR_ILGVDOVLP              6-0-0/w STRC(32)    r     1 ERR_MALFORMED

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @ERR                       4-0-0/w PTR         r     1 @K$RWPARM
    *0-0-0/w STRC(32)    r     1 ERR                       *0-0-0/w STRC(656)   r     1 K$RWPARM
    10-0-0/b BIT         r     1 LAST                       E-0-0/w PTR         r     1 LAST$
     C-0-0/b BIT         r     1 MARKER                     8-0-0/w PTR         r     1 MSG$
     A-0-0/w UBIN(16)    r     1 MSGSZ                      B-0-0/w UBIN(16)    r     1 TMP_SZ
     D-0-0/b BIT         r     1 VLP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c UBIN(8)     r     1 KNA_VDOBYTSIZ(0:34)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(16)    r     1 KV$VDO                     0-0-0/w STRC(16)    r     1 KV$VDOVLP
     0-0-0/w ASTR(16)    r     1 KV$VDOVLP_DAT1             0-0-0/w ASTR(32)    r     1 KV$VDOVLP_DAT2
     0-0-0/w STRC(32)    r     1 KV$VDOVLP_FLDID            0-0-0/w ASTR(16)    r     1 KV$VDOVLP_KEY
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:276  
     0-0-0/w STRC(64)    r     1 KV$VDOVLP_MRK


   Procedure KNA$CHECK_VDO requires 389 words for executable code.
   Procedure KNA$CHECK_VDO requires 22 words of local(AUTO) storage.
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:277  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:278  
          MINI XREF LISTING

ERR
      3535**DCL         6--PROC     4193<<ASSIGN   4253<<ASSIGN   4262<<ASSIGN   4278<<ASSIGN   4289<<ASSIGN
ERR_ILGMRK
      4039**DCL      4253>>ASSIGN   4289>>ASSIGN
ERR_ILGVDO
      3993**DCL      4193>>ASSIGN
ERR_ILGVDOVLP
      4085**DCL      4262>>ASSIGN
ERR_MALFORMED
      4131**DCL      4278>>ASSIGN
K$RWPARM
      3222**DCL         6--PROC
K$RWPARM.BLKREC
      3252**DCL      3277--REDEF
K$RWPARM.DVE.DVBYTE.VFC
      3292**DCL      3293--REDEF
K$RWPARM.DVE.EOMCHAR
      3300**DCL      3304--REDEF
K$RWPARM.ERR
      3364**DCL      3369--REDEF
K$RWPARM.FC
      3328**DCL      3329--REDEF
K$RWPARM.FLDID
      3510**DCL      3511--REDEF
K$RWPARM.KEYTYPE
      3517**DCL      3518--REDEF
K$RWPARM.MSG$
      3223**DCL      3224--REDEF    3233--REDEF
K$RWPARM.MSGID
      3339**DCL      3344--REDEF
K$RWPARM.MSGIDXT
      3352**DCL      3356--REDEF
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:279  
K$RWPARM.ORG
      3488**DCL      3489--REDEF
K$RWPARM.UHDR$
      3377**DCL      4174>>ASSIGN   4272>>ASSIGN   4272>>ASSIGN
K$RWPARM.UHDRSZ
      3382**DCL      4175>>ASSIGN
K$RWPARM.VDOFLGS
      3490**DCL      3501--REDEF
KNA_VDOBYTSIZ
      3650**DCL      4202>>ASSIGN   4203>>ASSIGN
KV$VDO.FNC
      3681**DCL      4181>>DOCASE   4202>>ASSIGN   4203>>ASSIGN
KV$VDO.VLP
      3681**DCL      4180>>ASSIGN
KV$VDOVLP.LST
      3710**DCL      4211>>ASSIGN
KV$VDOVLP.TYP
      3710**DCL      4215>>DOCASE   4286>>IF
KV$VDOVLP_DAT1
      3755**DCL      4219--ASSIGN   4220--ASSIGN
KV$VDOVLP_DAT1.BYTSIZ
      3761**DCL      3770--IMP-SIZ  4218>>ASSIGN   4219>>ASSIGN   4220>>ASSIGN
KV$VDOVLP_DAT2
      3806**DCL      4229--ASSIGN   4230--ASSIGN
KV$VDOVLP_DAT2.BYTSIZ
      3814**DCL      4228>>ASSIGN
KV$VDOVLP_FLDID
      3857**DCL      4238--ASSIGN   4239--ASSIGN
KV$VDOVLP_KEY
      3908**DCL      4243--ASSIGN   4244--ASSIGN
KV$VDOVLP_KEY.BYTSIZ
      3914**DCL      3923--IMP-SIZ  4243>>ASSIGN   4244>>ASSIGN
KV$VDOVLP_MRK
      3959**DCL      4249--ASSIGN   4250--ASSIGN
KV$VDOVLP_MRK.MRKTYP
      3973**DCL      4247<<ASSIGN
PL6.E3A0      #009=KNA$CHECK_VDO File=KNA$SUBS.:E05TSI                           WED 07/30/97 01:04 Page:280  
KV$VDOVLP_MRK.RSP
      3973**DCL      4248<<ASSIGN
LAST
      4171**DCL      4205<<ASSIGN   4209>>DOWHILE  4211<<ASSIGN
LAST$
      4170**DCL      4213<<ASSIGN   4286>>IF       4286>>IF
MARKER
      4168**DCL      4176<<ASSIGN   4178>>DOWHILE  4189<<ASSIGN   4286>>IF
MSG$
      4164**DCL      3677--IMP-PTR  3706--IMP-PTR  3755--IMP-PTR  3806--IMP-PTR  3857--IMP-PTR  3908--IMP-PTR
      3959--IMP-PTR  4174<<ASSIGN   4180>>ASSIGN   4181>>DOCASE   4202>>ASSIGN   4203<<ASSIGN   4203>>ASSIGN
      4203>>ASSIGN   4211>>ASSIGN   4213>>ASSIGN   4215>>DOCASE   4218>>ASSIGN   4219>>ASSIGN   4219>>ASSIGN
      4220<<ASSIGN   4220>>ASSIGN   4220>>ASSIGN   4220>>ASSIGN   4224<<ASSIGN   4224>>ASSIGN   4228>>ASSIGN
      4230<<ASSIGN   4230>>ASSIGN   4234<<ASSIGN   4234>>ASSIGN   4239<<ASSIGN   4239>>ASSIGN   4243>>ASSIGN
      4243>>ASSIGN   4244<<ASSIGN   4244>>ASSIGN   4244>>ASSIGN   4244>>ASSIGN   4247>>ASSIGN   4248>>ASSIGN
      4249<<ASSIGN   4249>>ASSIGN   4272<<ASSIGN   4272>>ASSIGN
MSGSZ
      4165**DCL      3821--IMP-SIZ  4218<<ASSIGN   4228<<ASSIGN   4229>>ASSIGN   4230>>ASSIGN
TMP_SZ
      4167**DCL      4175<<ASSIGN   4178>>DOWHILE  4202<<ASSIGN   4202>>ASSIGN   4209>>DOWHILE  4219<<ASSIGN
      4219>>ASSIGN   4221>>IF       4223<<ASSIGN   4223>>ASSIGN   4229<<ASSIGN   4229>>ASSIGN   4231>>IF
      4233<<ASSIGN   4233>>ASSIGN   4238<<ASSIGN   4238>>ASSIGN   4243<<ASSIGN   4243>>ASSIGN   4250<<ASSIGN
      4250>>ASSIGN   4251>>IF       4271<<ASSIGN   4271>>ASSIGN   4276>>IF
VLP
      4169**DCL      4180<<ASSIGN   4207>>IF

PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:281  
     1580        1        /*M* KNA$CHECKSUM - Build and check the checksum for the OSI layers. */
     1581        2        /*T***********************************************************/
     1582        3        /*T*                                                         */
     1583        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1584        5        /*T*                                                         */
     1585        6        /*T***********************************************************/
     1586        7        /*X* PLM=3,IND=5,ENU=0,ECU=0  */
     1587        8
     1588        9
     1589       10        /*D* NAME: KNA$CALC_CHKSUM
     1590       11
     1591       12             ENTRY: KNA$CHK_CHKSUM
     1592       13
     1593       14             PURPOSE:
     1594       15                  The KNA$CALC_CHKSUM routine computes the checksum bytes.
     1595       16                  The KNA$CHK_CHKSUM routine verifys the checksum bytes.
     1596       17
     1597       18             ENTRY:
     1598       19                   CALL KNA$CALC_CHKSUM (FRAG$, FRAGSIZE, CHKOFF)
     1599       20                   CALL KNA$CHK_CHKSUM (FRAG$, FRAGSIZE)
     1600       21
     1601       22             INPUT:
     1602       23                   FRAG$ - CPTR.  Contains the address of the first byte in
     1603       24                                  the data to be checksummed.
     1604       25                   FRAGSIZE - SBIN.  Contains the byte size of the data to
     1605       26                                   be checksummed (presumed to be <16k).
     1606       27                   CHKOFF - SBIN.  Contains the byte number of the first byte
     1607       28                                   of the checksum value, assuming the first
     1608       29                                   byte to be 1.  (or if you consider the first
     1609       30                                   byte to be 0, the index to the last byte of
     1610       31                                   the checksum.
     1611       32             DESCRIPTION:
     1612       33                    The two checksum bytes are computed using the ISO
     1613       34                    standard modulo 255 algorithm.
     1614       35        */
     1615       36        KNA$CHECKSUM: PROC (FRAG$,FRAGSIZE,CHKOFF) ALTRET;
     1616       37
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:282  
     1617       38    1   DCL FRAG$ CPTR;
     1618       39    1   DCL FRAGSIZE SBIN;
     1619       40    1   DCL CHKOFF SBIN;
     1620       41
     1621       42    1   DCL ITEMP SBIN WORD;
     1622       43    1   DCL SIZE SBIN WORD;
     1623       44    1   DCL C0 UBIN WORD;
     1624       45    1   DCL 1 C0X REDEF C0,2 * BIT(8),2 LO UBIN BYTE UNAL;
     1625       46    1   DCL C1 UBIN WORD;
     1626       47    1   DCL 1 C1X REDEF C1,2 SIGN BIT(1),2 * BIT(7),2 LO UBIN BYTE UNAL;
     1627       48    1   DCL CL1 REDEF C1 SBIN;
     1628       49    1   DCL CPTR$ CPTR;
     1629       50    1   DCL PTR$ REDEF CPTR$ PTR;
     1630       51    1   DCL 1 PTRX REDEF CPTR$,2 OFF UBIN(8) UNAL,2 * BIT(24);
     1631       52    1   DCL COFFS SBIN;
     1632       53    1   DCL XX SBIN;
     1633       54    1   DCL TEMP2 UBIN;
     1634       55    1   DCL 1 TEMP2X REDEF TEMP2,2 * BIT(8),2 LO UBIN BYTE UNAL;
     1635       56    1   DCL TEMP4 UBIN(32);
     1636       57    1   DCL 1 TEMP4X REDEF TEMP4,2 * BIT(24),2 LO UBIN BYTE UNAL;
     1637       58    1   DCL YY SBIN;
     1638       59
     1639       60    1   DCL UBNBSD UBIN BYTE BASED CALIGNED;
     1640       61    1   DCL 1 B$UBIN(0:0) UBIN(8) BASED CALIGNED;
     1641       62
     1642       63        %EJECT;
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:283  
     1643       64    1   KNA$CALC_CHKSUM: ENTRY (FRAG$,FRAGSIZE,CHKOFF) ALTRET;
     1644       65
     1645       66    1   KNA$CHK_CHKSUM: ENTRY(FRAG$,FRAGSIZE) ALTRET;
     1646       67
     1647       68    1      C0 = 0;
     1648       69    1      C1 = 0;
     1649       70    1      CPTR$ = FRAG$;
     1650       71    1      ITEMP = PTRX.OFF /128;
     1651       72    1      PTRX.OFF = 0;
     1652       73    1      COFFS = ITEMP;
     1653       74    1      SIZE = FRAGSIZE + ITEMP;
     1654       75
     1655       76    2      DO UNTIL ITEMP=SIZE;
     1656       77    2           C0 = C0 + PTR$->B$UBIN(ITEMP);
     1657       78    2           CL1 = CL1 + C0;
     1658       79    3           IF CL1 < 0 THEN DO;
     1659       80        /* Add the carries from a byte back in, but only when they're in danger
     1660       81           of being lost.  (This is equivalent to MOD-255 arithmetic). */
     1661       82    3                C1 = C1X.LO + C1 / 256;
     1662       83    3                C0 = C0 / 256 + C0X.LO;
     1663       84    3                END;
     1664       85    2           ITEMP = ITEMP + 1;
     1665       86    2           END;
     1666       87        /* Add the carry bits back in, reducing each to <=510. */
     1667       88    1      C0 = C0 / 256 + C0X.LO;
     1668       89    1      C1 = C1 / 256 + C1X.LO;
     1669       90    1      IF C0 > 254 THEN C0 = C0 - 255;
     1670       91    1      IF C1 > 254 THEN C1 = C1 - 255;
     1671       92
     1672       93    1      IF ADDR(CHKOFF)=ADDR(NIL)            /* Checksum verify.                   */
     1673       94    1      THEN IF ( C0 ~= 0 ) OR ( C1 ~= 0 )
     1674       95    1           THEN ALTRETURN;
     1675       96    1           ELSE RETURN;
     1676       97                                                /* Checksum compute.                  */
     1677       98
     1678       99    1      COFFS = COFFS + CHKOFF;
     1679      100    1      TEMP2 = SIZE - COFFS;
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:284  
     1680      101    1      TEMP4 = TEMP2 * C0;
     1681      102        /* Compute MOD(TEMP4,255).  Presuming that it has <23 bits nonzero */
     1682      103        /* First, add bytes 1-2 to byte 3, reducing the value to 16 bits. */
     1683      104    1      TEMP2 = TEMP4 / 256;
     1684      105    1      TEMP2 = TEMP2 + TEMP4X.LO;
     1685      106        /* Then, add those two bytes, reducing the value to 9 bits. */
     1686      107    1      TEMP2 = TEMP2 / 256 + TEMP2X.LO;
     1687      108        /* Finally, remove any remaining excess of 255 */
     1688      109    1      IF TEMP2 > 254 THEN TEMP2 = TEMP2 - 255;
     1689      110    1      XX = TEMP2 - C1;
     1690      111
     1691      112    1      IF XX < 0
     1692      113    1      THEN XX = XX + 255;
     1693      114
     1694      115    1      TEMP2 = TEMP2 + C0;
     1695      116    1      IF TEMP2 > 254 THEN TEMP2 = TEMP2 - 255;
     1696      117    1      YY = C1 - TEMP2;
     1697      118    1      IF YY < 0
     1698      119    1      THEN YY = YY + 255;
     1699      120
     1700      121    1      PTR$->B$UBIN(COFFS) = YY;
     1701      122    1      PTR$->B$UBIN(COFFS-1) = XX;
     1702      123    1      RETURN;
     1703      124
     1704      125    1   END KNA$CHECKSUM;

PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:285  
      No diagnostics issued in procedure KNA$CHECKSUM.

   Procedure KNA$CHECKSUM requires 215 words for executable code.
   Procedure KNA$CHECKSUM requires 22 words of local(AUTO) storage.

    No errors detected in file KNA$SUBS.:E05TSI    .

PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:286  

 Object Unit name= KNA$CHECKSUM                               File name= KNA$SUBS.:E05TOU
 UTS= JUL 30 '97 01:04:29.76 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0   Proc  even  none   215     D7  KNA$CHECKSUM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  KNA$CHECKSUM
     0      7          yes     yes      Std        3  KNA$CALC_CHKSUM
     0      E          yes     yes      Std        2  KNA$CHK_CHKSUM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X6A_AUTO_3
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    G$ROS$
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:287  


     1580        1        /*M* KNA$CHECKSUM - Build and check the checksum for the OSI layers. */
     1581        2        /*T***********************************************************/
     1582        3        /*T*                                                         */
     1583        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1584        5        /*T*                                                         */
     1585        6        /*T***********************************************************/
     1586        7        /*X* PLM=3,IND=5,ENU=0,ECU=0  */
     1587        8
     1588        9
     1589       10        /*D* NAME: KNA$CALC_CHKSUM
     1590       11
     1591       12             ENTRY: KNA$CHK_CHKSUM
     1592       13
     1593       14             PURPOSE:
     1594       15                  The KNA$CALC_CHKSUM routine computes the checksum bytes.
     1595       16                  The KNA$CHK_CHKSUM routine verifys the checksum bytes.
     1596       17
     1597       18             ENTRY:
     1598       19                   CALL KNA$CALC_CHKSUM (FRAG$, FRAGSIZE, CHKOFF)
     1599       20                   CALL KNA$CHK_CHKSUM (FRAG$, FRAGSIZE)
     1600       21
     1601       22             INPUT:
     1602       23                   FRAG$ - CPTR.  Contains the address of the first byte in
     1603       24                                  the data to be checksummed.
     1604       25                   FRAGSIZE - SBIN.  Contains the byte size of the data to
     1605       26                                   be checksummed (presumed to be <16k).
     1606       27                   CHKOFF - SBIN.  Contains the byte number of the first byte
     1607       28                                   of the checksum value, assuming the first
     1608       29                                   byte to be 1.  (or if you consider the first
     1609       30                                   byte to be 0, the index to the last byte of
     1610       31                                   the checksum.
     1611       32             DESCRIPTION:
     1612       33                    The two checksum bytes are computed using the ISO
     1613       34                    standard modulo 255 algorithm.
     1614       35        */
     1615       36        KNA$CHECKSUM: PROC (FRAG$,FRAGSIZE,CHKOFF) ALTRET;
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:288  

     36   0 000000  D380 0000 0000  xent KNA$CHECKSUM    LNJ,B5   X6A_AUTO_3
          0 000003       0016 0003                       DC       22,3
          0 000005  0F81 0006                            B        s:64+5,PREL

     1616       37
     1617       38    1   DCL FRAG$ CPTR;
     1618       39    1   DCL FRAGSIZE SBIN;
     1619       40    1   DCL CHKOFF SBIN;
     1620       41
     1621       42    1   DCL ITEMP SBIN WORD;
     1622       43    1   DCL SIZE SBIN WORD;
     1623       44    1   DCL C0 UBIN WORD;
     1624       45    1   DCL 1 C0X REDEF C0,2 * BIT(8),2 LO UBIN BYTE UNAL;
     1625       46    1   DCL C1 UBIN WORD;
     1626       47    1   DCL 1 C1X REDEF C1,2 SIGN BIT(1),2 * BIT(7),2 LO UBIN BYTE UNAL;
     1627       48    1   DCL CL1 REDEF C1 SBIN;
     1628       49    1   DCL CPTR$ CPTR;
     1629       50    1   DCL PTR$ REDEF CPTR$ PTR;
     1630       51    1   DCL 1 PTRX REDEF CPTR$,2 OFF UBIN(8) UNAL,2 * BIT(24);
     1631       52    1   DCL COFFS SBIN;
     1632       53    1   DCL XX SBIN;
     1633       54    1   DCL TEMP2 UBIN;
     1634       55    1   DCL 1 TEMP2X REDEF TEMP2,2 * BIT(8),2 LO UBIN BYTE UNAL;
     1635       56    1   DCL TEMP4 UBIN(32);
     1636       57    1   DCL 1 TEMP4X REDEF TEMP4,2 * BIT(24),2 LO UBIN BYTE UNAL;
     1637       58    1   DCL YY SBIN;
     1638       59
     1639       60    1   DCL UBNBSD UBIN BYTE BASED CALIGNED;
     1640       61    1   DCL 1 B$UBIN(0:0) UBIN(8) BASED CALIGNED;
     1641       62
     1642       63        %EJECT;
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:289  
     1643       64    1   KNA$CALC_CHKSUM: ENTRY (FRAG$,FRAGSIZE,CHKOFF) ALTRET;

     64   0 000007  D380 0000 0000  xent KNA$CALC_CHKSUM LNJ,B5   X6A_AUTO_3
          0 00000A       0016 0003                       DC       22,3
          0 00000C  0F81 0006                            B        s:68,PREL

     1644       65
     1645       66    1   KNA$CHK_CHKSUM: ENTRY(FRAG$,FRAGSIZE) ALTRET;

     66   0 00000E  D380 0000 0000  xent KNA$CHK_CHKSUM  LNJ,B5   X6A_AUTO_3
          0 000011       0016 0003                       DC       22,3

     1646       67
     1647       68    1      C0 = 0;

     68   0 000013  8747 000C                            CL       C0,AUTO

     1648       69    1      C1 = 0;

     69   0 000015  8747 000D                            CL       C1,AUTO

     1649       70    1      CPTR$ = FRAG$;

     70   0 000017  ECC7 0004                            LDB,B6   @FRAG$,AUTO
          0 000019  8C86                                 LDI      ,B6
          0 00001A  8D47 000E                            SDI      CPTR$,AUTO

     1650       71    1      ITEMP = PTRX.OFF /128;

     71   0 00001C  D2C7 000E                            LLH,R5   CPTR$,AUTO
          0 00001E  5047                                 SOR,R5   7
          0 00001F  DF47 000A                            STR,R5   ITEMP,AUTO

     1651       72    1      PTRX.OFF = 0;

     72   0 000021  87C7 000E                            CLH      CPTR$,AUTO

PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:290  
     1652       73    1      COFFS = ITEMP;

     73   0 000023  DF47 0010                            STR,R5   COFFS,AUTO

     1653       74    1      SIZE = FRAGSIZE + ITEMP;

     74   0 000025  DCC7 0006                            LDB,B5   @FRAGSIZE,AUTO
          0 000027  DA05                                 ADD,R5   ,B5
          0 000028  DF47 000B                            STR,R5   SIZE,AUTO

     1654       75
     1655       76    2      DO UNTIL ITEMP=SIZE;

     1656       77    2           C0 = C0 + PTR$->B$UBIN(ITEMP);

     77   0 00002A  ECC7 000E                            LDB,B6   CPTR$,AUTO
          0 00002C  B847 000A                            LDR,R3   ITEMP,AUTO
          0 00002E  E2B6                                 LLH,R6   ,B6,R3
          0 00002F  EA47 000C                            ADD,R6   C0,AUTO
          0 000031  EF47 000C                            STR,R6   C0,AUTO

     1657       78    2           CL1 = CL1 + C0;

     78   0 000033  EA47 000D                            ADD,R6   C1,AUTO
          0 000035  EF47 000D                            STR,R6   C1,AUTO

     1658       79    3           IF CL1 < 0 THEN DO;

     79   0 000037  6881 0015                            BGEZ,R6  s:85,PREL

     1659       80        /* Add the carries from a byte back in, but only when they're in danger
     1660       81           of being lost.  (This is equivalent to MOD-255 arithmetic). */
     1661       82    3                C1 = C1X.LO + C1 / 256;

     82   0 000039  D847 000D                            LDR,R5   C1,AUTO
          0 00003B  5048                                 SOR,R5   8
          0 00003C  C847 000D                            LDR,R4   C1,AUTO
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:291  
          0 00003E  C570 00FF                            AND,R4   255,IMO
          0 000040  CA55                                 ADD,R4   R5
          0 000041  CF47 000D                            STR,R4   C1,AUTO

     1662       83    3                C0 = C0 / 256 + C0X.LO;

     83   0 000043  E847 000C                            LDR,R6   C0,AUTO
          0 000045  6048                                 SOR,R6   8
          0 000046  D847 000C                            LDR,R5   C0,AUTO
          0 000048  D570 00FF                            AND,R5   255,IMO
          0 00004A  DA56                                 ADD,R5   R6
          0 00004B  DF47 000C                            STR,R5   C0,AUTO

     1663       84    3                END;

     1664       85    2           ITEMP = ITEMP + 1;

     85   0 00004D  8AC7 000A                            INC      ITEMP,AUTO

     1665       86    2           END;

     86   0 00004F  E847 000A                            LDR,R6   ITEMP,AUTO
          0 000051  E947 000B                            CMR,R6   SIZE,AUTO
          0 000053  09D7                                 BNE      s:77,SPREL

     1666       87        /* Add the carry bits back in, reducing each to <=510. */
     1667       88    1      C0 = C0 / 256 + C0X.LO;

     88   0 000054  D847 000C                            LDR,R5   C0,AUTO
          0 000056  5048                                 SOR,R5   8
          0 000057  C847 000C                            LDR,R4   C0,AUTO
          0 000059  C570 00FF                            AND,R4   255,IMO
          0 00005B  CA55                                 ADD,R4   R5
          0 00005C  CF47 000C                            STR,R4   C0,AUTO

     1668       89    1      C1 = C1 / 256 + C1X.LO;

PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:292  
     89   0 00005E  D847 000D                            LDR,R5   C1,AUTO
          0 000060  5048                                 SOR,R5   8
          0 000061  B847 000D                            LDR,R3   C1,AUTO
          0 000063  B570 00FF                            AND,R3   255,IMO
          0 000065  BA55                                 ADD,R3   R5
          0 000066  BF47 000D                            STR,R3   C1,AUTO

     1669       90    1      IF C0 > 254 THEN C0 = C0 - 255;

     90   0 000068  C970 00FE                            CMR,R4   254,IMO
          0 00006A  0381 0005                            BLE      s:91,PREL

     90   0 00006C  CA70 FF01                            ADD,R4   -255,IMO
          0 00006E  CF47 000C                            STR,R4   C0,AUTO

     1670       91    1      IF C1 > 254 THEN C1 = C1 - 255;

     91   0 000070  B970 00FE                            CMR,R3   254,IMO
          0 000072  0381 0005                            BLE      s:93,PREL

     91   0 000074  BA70 FF01                            ADD,R3   -255,IMO
          0 000076  BF47 000D                            STR,R3   C1,AUTO

     1671       92
     1672       93    1      IF ADDR(CHKOFF)=ADDR(NIL)            /* Checksum verify.                   */

     93   0 000078  DCC7 0008                            LDB,B5   @CHKOFF,AUTO
          0 00007A  8DD5                                 CMN      B5
          0 00007B  0981 000B                            BNE      s:99,PREL

     1673       94    1      THEN IF ( C0 ~= 0 ) OR ( C1 ~= 0 )

     94   0 00007D  4981 0003                            BNEZ,R4  s:95,PREL
          0 00007F  3901 0004                            BEZ,R3   s:96,PREL

     1674       95    1           THEN ALTRETURN;

PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:293  
     95   0 000081  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

     1675       96    1           ELSE RETURN;

     96   0 000084  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

     1676       97                                                /* Checksum compute.                  */
     1677       98
     1678       99    1      COFFS = COFFS + CHKOFF;

     99   0 000087  D847 0010                            LDR,R5   COFFS,AUTO
          0 000089  DA05                                 ADD,R5   ,B5
          0 00008A  DF47 0010                            STR,R5   COFFS,AUTO

     1679      100    1      TEMP2 = SIZE - COFFS;

    100   0 00008C  D247 000B                            SUB,R5   SIZE,AUTO
          0 00008E  8255                                 NEG      R5
          0 00008F  DF47 0012                            STR,R5   TEMP2,AUTO

     1680      101    1      TEMP4 = TEMP2 * C0;

    101   0 000091  F855                                 LDR,R7   R5
          0 000092  FB54                                 MUL,R7   R4
          0 000093  8D47 0013                            SDI      TEMP4,AUTO

     1681      102        /* Compute MOD(TEMP4,255).  Presuming that it has <23 bits nonzero */
     1682      103        /* First, add bytes 1-2 to byte 3, reducing the value to 16 bits. */
     1683      104    1      TEMP2 = TEMP4 / 256;

    104   0 000095  70C8                                 DOR,R7   8
          0 000096  D857                                 LDR,R5   R7
          0 000097  DF47 0012                            STR,R5   TEMP2,AUTO

     1684      105    1      TEMP2 = TEMP2 + TEMP4X.LO;

    105   0 000099  E847 0014                            LDR,R6   TEMP4+1,AUTO
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:294  
          0 00009B  E570 00FF                            AND,R6   255,IMO
          0 00009D  EA55                                 ADD,R6   R5
          0 00009E  D856                                 LDR,R5   R6
          0 00009F  DF47 0012                            STR,R5   TEMP2,AUTO

     1685      106        /* Then, add those two bytes, reducing the value to 9 bits. */
     1686      107    1      TEMP2 = TEMP2 / 256 + TEMP2X.LO;

    107   0 0000A1  5048                                 SOR,R5   8
          0 0000A2  E847 0012                            LDR,R6   TEMP2,AUTO
          0 0000A4  E570 00FF                            AND,R6   255,IMO
          0 0000A6  EA55                                 ADD,R6   R5
          0 0000A7  EF47 0012                            STR,R6   TEMP2,AUTO

     1687      108        /* Finally, remove any remaining excess of 255 */
     1688      109    1      IF TEMP2 > 254 THEN TEMP2 = TEMP2 - 255;

    109   0 0000A9  E970 00FE                            CMR,R6   254,IMO
          0 0000AB  0381 0005                            BLE      s:110,PREL

    109   0 0000AD  EA70 FF01                            ADD,R6   -255,IMO
          0 0000AF  EF47 0012                            STR,R6   TEMP2,AUTO

     1689      110    1      XX = TEMP2 - C1;

    110   0 0000B1  E253                                 SUB,R6   R3
          0 0000B2  EF47 0011                            STR,R6   XX,AUTO

     1690      111
     1691      112    1      IF XX < 0

    112   0 0000B4  6881 0005                            BGEZ,R6  s:115,PREL

     1692      113    1      THEN XX = XX + 255;

    113   0 0000B6  EA70 00FF                            ADD,R6   255,IMO
          0 0000B8  EF47 0011                            STR,R6   XX,AUTO
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:295  

     1693      114
     1694      115    1      TEMP2 = TEMP2 + C0;

    115   0 0000BA  CA47 0012                            ADD,R4   TEMP2,AUTO
          0 0000BC  CF47 0012                            STR,R4   TEMP2,AUTO

     1695      116    1      IF TEMP2 > 254 THEN TEMP2 = TEMP2 - 255;

    116   0 0000BE  C970 00FE                            CMR,R4   254,IMO
          0 0000C0  0381 0005                            BLE      s:117,PREL

    116   0 0000C2  CA70 FF01                            ADD,R4   -255,IMO
          0 0000C4  CF47 0012                            STR,R4   TEMP2,AUTO

     1696      117    1      YY = C1 - TEMP2;

    117   0 0000C6  B254                                 SUB,R3   R4
          0 0000C7  BF47 0015                            STR,R3   YY,AUTO

     1697      118    1      IF YY < 0

    118   0 0000C9  3881 0005                            BGEZ,R3  s:121,PREL

     1698      119    1      THEN YY = YY + 255;

    119   0 0000CB  BA70 00FF                            ADD,R3   255,IMO
          0 0000CD  BF47 0015                            STR,R3   YY,AUTO

     1699      120
     1700      121    1      PTR$->B$UBIN(COFFS) = YY;

    121   0 0000CF  A847 0010                            LDR,R2   COFFS,AUTO
          0 0000D1  B7A6                                 STH,R3   ,B6,R2

     1701      122    1      PTR$->B$UBIN(COFFS-1) = XX;

PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:296  
    122   0 0000D2  2EFF                                 ADV,R2   -1
          0 0000D3  E7A6                                 STH,R6   ,B6,R2

     1702      123    1      RETURN;

    123   0 0000D4  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
     1703      124
     1704      125    1   END KNA$CHECKSUM;

PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:297  
      No diagnostics issued in procedure KNA$CHECKSUM.
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:298  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     8-0-0/w PTR         r     1 @CHKOFF                    4-0-0/w PTR         r     1 @FRAG$
     6-0-0/w PTR         r     1 @FRAGSIZE                  C-0-0/w UBIN(16)    r     1 C0
     C-0-0/w STRC(16)    r     1 C0X                        D-0-0/w UBIN(16)    r     1 C1
     D-0-0/w STRC(16)    r     1 C1X                       *0-0-0/w SBIN(16)    r     1 CHKOFF
     D-0-0/w SBIN(16)    r     1 CL1                       10-0-0/w SBIN(16)    r     1 COFFS
     E-0-0/w PTR         r     1 CPTR$                     *0-0-0/w PTR         r     1 FRAG$
    *0-0-0/w SBIN(16)    r     1 FRAGSIZE                   A-0-0/w SBIN(16)    r     1 ITEMP
     E-0-0/w PTR         r     1 PTR$                       E-0-0/w STRC(32)    r     1 PTRX
     B-0-0/w SBIN(16)    r     1 SIZE                      12-0-0/w UBIN(16)    r     1 TEMP2
    12-0-0/w STRC(16)    r     1 TEMP2X                    13-0-0/w UBIN(32)    r     1 TEMP4
    13-0-0/w STRC(32)    r     1 TEMP4X                    11-0-0/w SBIN(16)    r     1 XX
    15-0-0/w SBIN(16)    r     1 YY

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c UBIN(8)     r     1 B$UBIN(0:0)


   Procedure KNA$CHECKSUM requires 215 words for executable code.
   Procedure KNA$CHECKSUM requires 22 words of local(AUTO) storage.

    No errors detected in file KNA$SUBS.:E05TSI    .
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:299  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:300  
          MINI XREF LISTING

B$UBIN
        61**DCL        77>>ASSIGN    121<<ASSIGN    122<<ASSIGN
C0
        44**DCL        45--REDEF      68<<ASSIGN     77<<ASSIGN     77>>ASSIGN     78>>ASSIGN     83<<ASSIGN
        83>>ASSIGN     88<<ASSIGN     88>>ASSIGN     90>>IF         90<<ASSIGN     90>>ASSIGN     94>>IF
       101>>ASSIGN    115>>ASSIGN
C0X.LO
        45**DCL        83>>ASSIGN     88>>ASSIGN
C1
        46**DCL        47--REDEF      48--REDEF      69<<ASSIGN     82<<ASSIGN     82>>ASSIGN     89<<ASSIGN
        89>>ASSIGN     91>>IF         91<<ASSIGN     91>>ASSIGN     94>>IF        110>>ASSIGN    117>>ASSIGN
C1X.LO
        47**DCL        82>>ASSIGN     89>>ASSIGN
CHKOFF
        40**DCL        36--PROC       64--ENTRY      93--IF         99>>ASSIGN
CL1
        48**DCL        78<<ASSIGN     78>>ASSIGN     79>>IF
COFFS
        52**DCL        73<<ASSIGN     99<<ASSIGN     99>>ASSIGN    100>>ASSIGN    121>>ASSIGN    122>>ASSIGN
CPTR$
        49**DCL        50--REDEF      51--REDEF      70<<ASSIGN
FRAG$
        38**DCL        36--PROC       64--ENTRY      66--ENTRY      70>>ASSIGN
FRAGSIZE
        39**DCL        36--PROC       64--ENTRY      66--ENTRY      74>>ASSIGN
ITEMP
        42**DCL        71<<ASSIGN     73>>ASSIGN     74>>ASSIGN     76>>DOUNTIL    77>>ASSIGN     85<<ASSIGN
        85>>ASSIGN
PTR$
        50**DCL        77>>ASSIGN    121>>ASSIGN    122>>ASSIGN
PTRX.OFF
        51**DCL        71>>ASSIGN     72<<ASSIGN
PL6.E3A0      #010=KNA$CHECKSUM File=KNA$SUBS.:E05TSI                            WED 07/30/97 01:04 Page:301  
SIZE
        43**DCL        74<<ASSIGN     76>>DOUNTIL   100>>ASSIGN
TEMP2
        54**DCL        55--REDEF     100<<ASSIGN    101>>ASSIGN    104<<ASSIGN    105<<ASSIGN    105>>ASSIGN
       107<<ASSIGN    107>>ASSIGN    109>>IF        109<<ASSIGN    109>>ASSIGN    110>>ASSIGN    115<<ASSIGN
       115>>ASSIGN    116>>IF        116<<ASSIGN    116>>ASSIGN    117>>ASSIGN
TEMP2X.LO
        55**DCL       107>>ASSIGN
TEMP4
        56**DCL        57--REDEF     101<<ASSIGN    104>>ASSIGN
TEMP4X.LO
        57**DCL       105>>ASSIGN
XX
        53**DCL       110<<ASSIGN    112>>IF        113<<ASSIGN    113>>ASSIGN    122>>ASSIGN
YY
        58**DCL       117<<ASSIGN    118>>IF        119<<ASSIGN    119>>ASSIGN    121>>ASSIGN
