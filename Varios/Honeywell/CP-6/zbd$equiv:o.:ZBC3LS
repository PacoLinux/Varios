

CC.C03    File=zbg$equiv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=1  
        1         1             #ifndef NORCSID
        2         2             static char rcsid[] = "$Header: equiv.c,v 0.2 87/03/10 01:00:56 ceriel Exp $";

        3         3             #endif
        4         4
        5         5             #include "assert:h"
        6         6             #include "equiv:h"
        7         7             #include "param:h"
        8         8             #include "tables:h"
        9         9             #include "types:h"
       10        10             #include <cgg_cg:h>
       11        11             #include "data:h"
       12        12             #include "result:h"
       13        13             #include "extern:h"
       14        14
       15        15             /*
       16        16              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
       17        17              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
       18        18              *
       19        19              * Author: Hans van Staveren
       20        20              */
       21        21
       22        22             extern string myalloc();
       23        23
       24        24             int rar[MAXCREG];
       25        25             rl_p *lar = 0;
       26        26             int maxindex;
       27        27             int regclass[NREGS];
       28        28             struct perm *perms = 0;
       29        29
       30        30             struct perm *
       31        31             tuples(regls,nregneeded) rl_p *regls; {
       32        32    1         int class=0;
       33        33    1         register i,j;
       34        34    1
       35        35    1         /*
CC.C03    File=zbg$equiv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=2  
       36        36    1          * First compute equivalence classes of registers.
       37        37    1          */
       38        38    1
       39        39    1         for (i=0;i<NREGS;i++) {
       40        40    2            regclass[i] = class++;
       41        41    2            if (getrefcount(i) == 0) {
       42        42    3               for (j=0;j<i;j++) {
       43        43    4                  if (eqregclass(i,j) &&
       44        44    4                      eqtoken(&machregs[i].r_contents,
       45        45    4                         &machregs[j].r_contents)) {
       46        46    5                     regclass[i] = regclass[j];
       47        47    5                     break;
       48        48    5                  }
       49        49    4               }
       50        50    3            }
       51        51    2         }
       52        52    1
       53        53    1         /*
       54        54    1          * Now create tuples through a recursive function
       55        55    1          */
       56        56    1
       57        57    1         maxindex = nregneeded;
       58        58    1         lar = regls;
       59        59    1         perms = 0;
       60        60    1         permute(0);
       61        61    1         return(perms);
       62        62    1        }
       63        63
       64        64             permute(index) {
       65        65    1         register struct perm *pp;
       66        66    1         register rl_p rlp;
       67        67    1         register i,j;
       68        68    1
       69        69    1         if (index == maxindex) {
       70        70    2            for (pp=perms; pp != 0; pp=pp->p_next) {
       71        71    3               for (i=0; i<maxindex; i++)
       72        72    3                  if (regclass[rar[i]] != regclass[pp->p_rar[i]])
CC.C03    File=zbg$equiv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=3  
       73        73    3                     goto diff;
       74        74    3               for (i=0; i<maxindex; i++)
       75        75    3                  for (j=0; j<i; j++)
       76        76    3                     if (clash(rar[i],rar[j]) !=
       77        77    3                         clash(pp->p_rar[i],pp->p_rar[j]))
       78        78    3                        goto diff;
       79        79    3               return;
       80        80    3                diff: ;
       81        81    3            }
       82        82    2            pp = (struct perm *) myalloc(sizeof ( *pp ));
       83        83    2            pp->p_next = perms;
       84        84    2            for (i=0; i<maxindex; i++)
       85        85    2               pp->p_rar[i] = rar[i];
       86        86    2            perms = pp;
       87        87    2         } else {
       88        88    2            rlp=lar[index];
       89        89    2            for (i=rlp->rl_n-1; i>=0; i--) {
       90        90    3               rar[index] = rlp->rl_list[i];
       91        91    3               permute(index+1);
       92        92    3            }
       93        93    2         }
       94        94    1        }
       95        95
---  Include file information  ---

   zbg$assert:h.:ZBC3TOU. is referenced
   zbg$equiv:h.:ZBC3TOU. is referenced
   zbg$param:h.:ZBC3TOU. is referenced
   tables:h.:ZBC3TOU. is referenced
   zbg$types:h.:ZBC3TOU. is referenced
   cgg_cg:h.:ZBC3TOU. is referenced
   zbg$data:h.:ZBC3TOU. is referenced
   zbg$result:h.:ZBC3TOU. is referenced
   zbg$extern:h.:ZBC3TOU. is referenced

CC.C03    File=zbg$equiv:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=4  
No diagnostics were issued in the file zbg$equiv:c.:ZBC3TSI
