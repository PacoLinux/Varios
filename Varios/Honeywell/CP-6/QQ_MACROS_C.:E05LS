

15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        1    
    1      /*M* QQ_MACROS_C - TPA assorted macros */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7       /* CMD_FLAGS - This macro is used to define the characteristics
    8          of each TP command.  The information defined by the macro
    9          is used by a number of routines including QQA$CMD to processs
   10          commands */
   11
   12      %MACRO CMD_FLAGS(
   13                       STCLASS=STATIC,
   14                       NOTIMP(YES='1'B,NO='0'B)='0'B,
   15                       PRIVREQ(YES='1'B,NO='0'B)='0'B,
   16                       INITONLY(YES='1'B,NO='0'B)='0'B,
   17                       RUNONLY(YES='1'B,NO='0'B)='0'B,
   18                       PASS=0,
   19                       ONCEONLY(YES='1'B,NO='0'B)='0'B,
   20                       CONSOLESOK(YES='1'B,NO='0'B)='1'B,
   21                       CONSOLESONLY(YES='1'B,NO='0'B)='0'B,
   22                       BEENUSED='0'B,
   23                       TREE=0,
   24                       LEN=0,
   25                       INHIBPRINT(YES='1'B,NO='0'B)='0'B,
   26                       TYPE(LOGL=1,UBIN=2,CHAR=3,TEXTC=4)=0,
   27                       DATA$=NIL,
   28                       LVL=4,
   29                       LAST=",");
   30      %LSET LISTDIR='0'B;
   31      %LSET LISTEXP='1'B;
   32      %LSET LISTCOM='0'B;
   33      %LSET LISTSUB='1'B;
   34      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   35      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
   36      %LSET INIT=CHARTEXT('INIT');
   37      %ELSE;
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        2    
   38      %LSET INIT=CHARTEXT('/*');
   39      %ENDIF;
   40      %IF LVL=4;
   41      3 *,
   42      %ENDIF;
   43      %LVL NOTIMP# BIT(1) UNAL %INIT(NOTIMP) %CHARTEXT('/**/'),
   44       /* Not implemented can't be used by anyone */
   45      %LVL PRIVREQ# BIT(1) UNAL %INIT(PRIVREQ) %CHARTEXT('/**/'),
   46       /* Privilege required to use this command */
   47      %LVL INITONLY# BIT(1) UNAL %INIT(INITONLY) %CHARTEXT('/**/'),
   48       /* Used at initialization time only */
   49      %LVL RUNONLY# BIT(1) UNAL %INIT(RUNONLY) %CHARTEXT('/**/'),
   50       /* Used at run time only (after initialization) */
   51      %LVL PASS# UBIN(1) UNAL %INIT(PASS) %CHARTEXT('/**/'),
   52       /* Pass during initialization that the command should get executed */
   53      %LVL ONCEONLY# BIT(1) UNAL %INIT(ONCEONLY) %CHARTEXT('/**/'),
   54       /* Can be used only once (warn if used more often) */
   55      %LVL CONSOLESOK# BIT(1) UNAL %INIT(CONSOLESOK) %CHARTEXT('/**/'),
   56       /* OK for consoles to use this command */
   57      %LVL CONSOLESONLY# BIT(1) UNAL %INIT(CONSOLESONLY) %CHARTEXT('/**/'),
   58      /* Only consoles may issue this command */
   59      %LVL BEENUSED# BIT(1) UNAL %INIT(BEENUSED) %CHARTEXT('/**/'),
   60       /* Command has been used by someone */
   61      %LVL TREE# UBIN(3) UNAL %INIT(TREE) %CHARTEXT('/**/'),
   62       /* Parse tree to use for secondary syntax check 0 = don't parse again */
   63      %LVL LEN# UBIN(8) UNAL %INIT(LEN) %CHARTEXT('/**/'),
   64       /* Length of the data item associated with this command (Lets only) */
   65      %LVL INHIBPRINT# BIT(1) UNAL %INIT(INHIBPRINT) %CHARTEXT('/**/'),
   66       /* Don't print a data item when in QQB$DISPLAY */
   67      %LVL TYPE# UBIN(8) UNAL %INIT(TYPE) %CHARTEXT('/**/'),
   68       /* Type of datem e.g., logical, ubin ... */
   69      %LVL * BIT(12) UNAL %INIT('0'B) %CHARTEXT('/**/'),
   70       /* Spares */
   71      %LVL DATA$# PTR %INIT(ADDR(DATA$)) % CHARTEXT('/**/') LAST
   72       /* Ptr -> to datem related to this command */
   73      %MEND;
   74
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        3    
   75      /* TP$STATION - Macro defining the station context block for a
   76         TP station.  There is one context block for every TP station
   77         that is connected to the instance of TP */
   78
   79      %MACRO TP$STATION(FPTN="TP$STATION",
   80                        STCLASS="BASED(S$)",
   81                        USERID=' ',
   82                        PRIVILEGED(YES='1'B, NO='0'B)='0'B);
   83      %LSET LISTDIR='0'B;
   84      %LSET LISTEXP='1'B;
   85      %LSET LISTCOM='0'B;
   86      %LSET LISTSUB='1'B;
   87      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   88      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
   89      %LSET INIT=CHARTEXT('INIT');
   90      %ELSE;
   91      %LSET INIT=CHARTEXT('/*');
   92      %ENDIF;
   93      %IF (SUBSTR(TEXTCHAR(STCLASS),0,5) = 'BASED');
   94      DCL S$ PTR;
   95      %ENDIF;
   96      DCL 1 FPTN STCLASS ALIGNED,
   97            2 ID CHAR(8) %INIT(USERID) %CHARTEXT('/**/'),
   98       /* Device ID that the station connect to the instance with */
   99            2 FP CHAR(8) %INIT(' ') %CHARTEXT('/**/'),
  100       /* Current forms program msgtyp if load by name then it is "(name)" */
  101             2 DFLT_FP CHAR(8) %INIT('*DFLT') %CHARTEXT('/**/'),
  102                /* Default forms program type */
  103             2 PEND_FP CHAR(8) %INIT(' ') %CHARTEXT('/**/'),
  104                /* Pending type - Between QQA$BYTYPE and QQA$SETFP */
  105            2 LOGON_UTS UBIN WORD %INIT(0) %CHARTEXT('/**/'),
  106       /* UTS of device connect */
  107            2 WHO,   /* identification of the connecting entity */
  108              3 ACCT CHAR(8) %INIT(' ') %CHARTEXT('/**/'),
  109      /* Logon ACCOUNT for this terminal - B$CGAUCI.WHO.ACCT */
  110              3 NAME CHAR(8) %INIT(' ') %CHARTEXT('/**/'),
  111      /* Logon NAME for this terminal (8 chars only) - B$CGAUCI.WHO.NAME */
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        4    
  112            2 QT$FORM$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/'),
  113       /* Ptr -> TRADER file record for current BEGIN or DEBUG */
  114            2 FIRST_CMD$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/'),
  115       /* Ptr -> text of first command which must be saved until *IAMRDY */
  116            2 FPLDTRC$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/'),
  117       /* Ptr -> text constituting VLP_FPRG info passed on CG_FPLDTRC */
  118            2 MAJOR_ERR BIT(36) %INIT('0'B) %CHARTEXT('/**/'),
  119       /* Comes from QQ_CMDBLK */
  120            2 MINOR_ERR BIT(36) %INIT('0'B) %CHARTEXT('/**/'),
  121       /* Comes from QQ_CMDBLK */
  122            2 FLAGS,
  123       /* Random flags */
  124              3 PRIV BIT(1) UNAL %INIT(PRIVILEGED) %CHARTEXT('/**/'),
  125       /* Station is privileged */
  126              3 MCT BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  127       /* Station is a MCT */
  128              3 MAJOR_ERR_USED BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  129       /* Comes from QQ_CMDBLK */
  130              3 ASSIST BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  131       /* Set if ASSIST is on (unused) */
  132              3 DISCONNECT BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  133       /* Set if BYE, OFF or KILL has been used on this station */
  134              3 SET_DEBUG BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  135       /* Set if we are supposed to set debug for next M$SETFP */
  136              3 IS_DEBUGGING BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  137       /* Set if we did set debug on last M$SETFP */
  138              3 READ BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  139       /* Set if doing a READ command */
  140              3 IS_QT$FORM BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  141      /* Set if QT$FORM$ points to a trader forms program name */
  142              3 * BIT(27) UNAL %INIT('0'B) %CHARTEXT('/**/'),/* spares */
  143              3 UNDER_SET BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  144      /* Under command issued for this station */
  145              3 * BIT(26) UNAL %INIT('0'B) %CHARTEXT('/**/'),/* spares */
  146       /* Spares */
  147       /* Spares */
  148            2 DFLT_PRIO UBIN(9) UNAL %INIT(1) %CHARTEXT('/**/'),
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        5    
  149       /* Default station prio obtained from *AUEV connect message */
  150            2 CURR_PRIO UBIN(9) UNAL %INIT(0) %CHARTEXT('/**/'),
  151       /* Current prio for the station */
  152            2 LINE_INFO CHAR(20) CALIGNED %INIT(' ') %CHARTEXT('/**/');
  153       /* Current line info for the station */
  154      %MEND;
  155
  156      /* MSGBLK - This macro generates a data structure used to send
  157         a message to someone.  The routines QQC$BLDMSGBLK &
  158         QQC$BLDMSG_ERRBLK are the only two routines which fill in
  159         the data of this structure.  QQC$BLDMSG & QQC$SNDMSG are the
  160         two routines which use the information in the MSGBLK to
  161         build the message and route it to the proper place. */
  162
  163      %MACRO MSGBLK(
  164                    FPTN=MSGBLK,
  165                    STCLASS=);
  166      DCL 1 FPTN STCLASS,
  167            2 ID CHAR(8),
  168       /* ID of the station to send the message to */
  169            2 FLAGS,
  170       /* Various flags */
  171      %HDR_FLAGS;
  172              3 DEST,
  173       /* Possible destinations to send a message to */
  174                4 STATION BIT(1) UNAL,
  175       /* Send it to MSGBLK.ID */
  176                4 CSCG BIT(1) UNAL,
  177       /* Send it to CSCG */
  178                4 MCT BIT(1) UNAL,
  179       /* Send it to all MCTs */
  180                4 DODCB BIT(1) UNAL,
  181       /* Write it to the M$DO DCB */
  182                4 HISTORY BIT(1) UNAL,
  183       /* Send it to the history file (unused) */
  184                4 ONECONSOLE BIT(1) UNAL,
  185       /* Send it to MSGBLK.CADDR via CSCG */
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        6    
  186                4 * BIT(1) UNAL,
  187       /* Spare */
  188              3 FOUND BIT(1) UNAL /* Used by QQB$QUEST */,
  189       /* Set if message is found for printing (unused) */
  190              3 MSGLINE BIT(1) UNAL,
  191       /* (unused) */
  192              3 REPORT BIT(1) UNAL,
  193       /* Set to send a report rather than a response */
  194              3 MSG_SENT BIT(1) UNAL,
  195       /* Set when the message is sent */
  196              3 INHIB_CSCG BIT(1) UNAL,
  197       /* Set to inhibit writing a message to CSCG see MSG_EVENT in QQA$PROCESS */
  198              3 * BIT(13) UNAL /* Spares */,
  199              2 ARS UBIN(18) UNAL,
  200       /* Actual record size of the message being sent */
  201              2 CODECNT UBIN(9) UNAL,
  202       /* # of error codes to print */
  203              2 CADDR BIT(18) UNAL,
  204       /* Console address of console that gets this message */
  205              2 * UBIN(27) UNAL /* Alignment */,
  206              2 TEXT$ PTR,
  207       /* Ptr -> to text of message to print */
  208              2 ERRINFO(0:1),
  209       /* Use these when printing CP6 error codes */
  210                3 ERR BIT(36) UNAL,
  211       /* CP6 error code */
  212                3 DCB# UBIN(9) UNAL,
  213       /* DCB# taken from B$TCB$->B$TCB.ATL$->B$ALT.DCB# */
  214                3 FIELD1 BIT(72) UNAL,
  215       /* FIELD1 for M$ERRMSG */
  216                3 FIELD2 BIT(72) UNAL,
  217       /* FIELD2 for M$ERRMSG */
  218                3 FIELD3 BIT(72) UNAL;
  219       /* FIELD3 for M$ERRMSG */
  220      %MEND;
  221
  222      /* TP$EVENT - Macro Defining the structure of a TP event queue
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        7    
  223         element.  Part of this structure has been copied from B$NWIO.
  224         Note that included within this structure is a VLP_STATION */
  225
  226      %MACRO TP$EVENT(
  227                      FPTN=TP$EVENT,
  228                      STCLASS=BASED);
  229            DCL 1 FPTN STCLASS,
  230                  2 BLINK$ PTR,
  231       /* Ptr -> back link in event queue chain */
  232                  2 FLINK$ PTR,
  233       /* Ptr -> foward link of event queue chain */
  234                  2 * UBIN(18) UNAL,
  235                  2 SUBC UBIN(18) UNAL,
  236                  2 EVID UBIN WORD,
  237       /* Event ID of the completed event */
  238                  2 ERR BIT(36),
  239       /* CP6 error code ~'0'B only if an error occurred */
  240            2 P# UBIN,
  241                          /*K* B$NWIO.P# = VALUE-UBIN(36).  Contains the number
  242                          of words of parameters that follow. */
  243
  244            2 TYC BIT(36),
  245                          /*K* B$NWIO.TYC = VALUE-BIT(36).  Contains the
  246                          type of completion.  See M$DCB.TYC. */
  247
  248            2 ARS UBIN,
  249                          /*K* B$NWIO.ARS = VALUE-UBIN(36).  Contains the
  250                          actual record size.  See M$DCB.ARS.  */
  251
  252            2 DVE,
  253              3 DVBYTE,
  254                          /*K* B$NWIO.DVE.DVBYTE is returned on reads
  255                          and contains information about the nature of
  256                          the item read.  See M$DCB.  This field contains
  257                          the following sub-fields: */
  258
  259                4 * BIT(2),
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        8    
  260                4 VFC BIT(1),
  261                          /*K* B$NWIO.DVE.DVBYTE.VFC = VALUE-BIT(1). */
  262
  263                4 BIN BIT(1),
  264                          /*K* B$NWIO.DVE.DVBYTE.BIN = VALUE-BIT(1). */
  265
  266                4 TRANS BIT(1),
  267                          /*K* B$NWIO.DVE.DVBYTE.TRANS = VALUE-BIT(1). */
  268
  269                4 * BIT(3),
  270              3 * BIT(1),
  271              3 EOMCHAR CHAR(1),
  272                          /*K* B$NWIO.DVE.EOMCHAR = CHAR(1).  Contains
  273                           the activation character on reads. */
  274
  275            2 * UBIN(18) UNAL,
  276
  277            %VLP_STATION (LVL=2,STCLASS=STCLASS,LAST=";");
  278       /* Info about who this read came from */
  279      %MEND;
  280
  281      /* TPU$INFO - This macro defines the data structure used to keep
  282         track of running TPUs.  This structure is used as an element
  283         of a linked list.  Note that all DCBs that are connected to the
  284         comgroup are kept in this list.  If the list element is from
  285         a TPU it is built by QQC$START_TPU.  If it is from a stranger's
  286         DCB it is built by QQA$DCB_CON  */
  287
  288      %MACRO TPU$INFO(FPTN=TPU$INFO,
  289                      STCLASS="BASED(T$)");
  290      DCL T$ PTR;
  291      DCL 1 FPTN STCLASS,
  292            2 BLINK$ PTR,
  293       /* Ptr -> backwards link of TPU linked list */
  294            2 FLINK$ PTR,
  295       /* Ptr -> foward link of TPU linked list */
  296            2 SYSID UBIN WORD,
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        9    
  297       /* Sysid of the connected DCB */
  298            2 UTS UBIN WORD,
  299       /* UTS of the connection */
  300            2 STATION CHAR(8),
  301       /* Station name of the connected DCB */
  302            2 MSGTYP CHAR(8),
  303       /* MSGTYP that a TPU is processing */
  304            2 TIMEOUT UBIN WORD,
  305       /* EOFTIME in minutes -- 0 is default */
  306            2 FLAGS,
  307       /* Random flags */
  308              3 CONNECT BIT(1),
  309       /* Set if the DCB was M$ACTIVATEd */
  310              3 DISCONNECT BIT(1),
  311       /* Set if the DCB has been asked to leave (KILL or TRANS) */
  312              3 TPU BIT(1),
  313       /* Set if this is a TPUs DCB */
  314              3 STRANGER BIT(1),
  315       /* Set if this is a stranger's DCB */
  316              2 * BIT(33) /* SPARES */;
  317      %MEND;
  318
  319      /* DISAB$INFO - This macro defines an element of the DISABLED items
  320         linked list.  When an item gets disabled by a DISABLE command
  321         it is inserted into this list */
  322
  323      %MACRO DISAB$INFO(FPTN=DISAB$INFO,
  324                      STCLASS="BASED(D$)");
  325      DCL D$ PTR;
  326      DCL 1 FPTN STCLASS,
  327            2 BLINK$ PTR,
  328       /* Ptr -> backwards link of DISABLED item list */
  329            2 FLINK$ PTR,
  330       /* Ptr -> foward link of DISABLED item list */
  331            2 TYPE UBIN WORD,
  332       /* Type of item that is diabled STATION or FP */
  333            2 UTS UBIN WORD,
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        10   
  334       /* UTS at time of DISABLE */
  335            2 ID CHAR(8),
  336       /* ID of the station that disabled the item */
  337            2 ITEM CHAR(8);
  338       /* Item name of thing that got disabled */
  339      %MEND;
  340
  341      /* HDR_FLAGS - This macro defines a group of bits that belong to
  342         the MSGBLK. You will notice that this macro is envoked in the
  343         flags section of that macro.  These particular flags are only
  344         used by TPCP in QXC$BLDMSG.  TPCP uses these flags to decide
  345         what information to include in the message that it is going
  346         to send to TPA when a TPAP aborts. */
  347
  348      %MACRO HDR_FLAGS(
  349                       STCLASS=,
  350                       FPTN=HDR,
  351                       TYPE(YES='1'B,NO='0'B)='0'B,
  352                       ID(YES='1'B,NO='0'B)='0'B,
  353                       SOA(YES='1'B,NO='0'B)='0'B,
  354                       FROM(YES='1'B,NO='0'B)='0'B,
  355                       TIME(YES='1'B,NO='0'B)='0'B,
  356                       MSG(UNDEF_XACT=1,TPAP_ABORT=2,YCPMME_ABORT=3)=0,
  357                       USRERR(YES='1'B,NO='0'B)='0'B,
  358                       USRDCB(YES='1'B,NO='0'B)='0'B,
  359                       USRIC(YES='1'B,NO='0'B)='0'B,
  360                       LVL=3,
  361                       LAST=",");
  362      %LSET LISTDIR='0'B;
  363      %LSET LISTEXP='1'B;
  364      %LSET LISTCOM='0'B;
  365      %LSET LISTSUB='1'B;
  366      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  367      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  368      %LSET INIT=CHARTEXT('INIT');
  369      %ELSE;
  370      %LSET INIT=CHARTEXT('/*');
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        11   
  371      %ENDIF;
  372      %IF LVL=1;
  373      DCL 1 FPTN STCLASS,
  374      %ELSE;
  375          %LVL FPTN,
  376      %ENDIF;
  377      %(LVL + 1) TYPE# BIT(1) UNAL %INIT(TYPE) %CHARTEXT('/**/'),
  378       /* Include the msgtyp from VLP_STATION */
  379      %(LVL + 1) ID# BIT(1) UNAL %INIT(ID) %CHARTEXT('/**/'),
  380       /* Include the xaction id from VLP_STATION */
  381      %(LVL + 1) SOA# BIT(1) UNAL %INIT(SOA) %CHARTEXT('/**/'),
  382       /* Include the station of origin from VLP_STATION */
  383      %(LVL + 1) FROM# BIT(1) UNAL %INIT(FROM) %CHARTEXT('/**/'),
  384       /* Include B$JIT.UNAME of TPU sending this message */
  385      %(LVL + 1) TIME# BIT(1) UNAL %INIT(TIME) %CHARTEXT('/**/'),
  386       /* Include the time of day of this event */
  387      %(LVL + 1) MSG# UBIN(3) UNAL %INIT(MSG) %CHARTEXT('/**/'),
  388       /* Type of error this is */
  389      %(LVL + 1) USRERR# BIT(1) UNAL %INIT(USRERR) %CHARTEXT('/**/'),
  390       /* Include B$JIT.USRERR */
  391      %(LVL + 1) USRDCB# BIT(1) UNAL %INIT(USRDCB) %CHARTEXT('/**/'),
  392       /* Include B$JIT.USRDCB */
  393      %(LVL + 1) USRIC# BIT(1) UNAL %INIT(USRIC) %CHARTEXT('/**/') LAST
  394       /* Include B$JIT.USRIC */
  395      %MEND;
  396
  397      /* QQ_STATS - Macro to define TP statistics structure.  This macro
  398         is used to define the statistics area in two places.  In
  399         QQ_GLOBAL and in the statistics area of the shared data
  400         segment file that TPA and CONTROL use */
  401
  402      %MACRO QQ_STATS(FPTN=STATS, STCLASS=STCLASS, LVL=2, LAST_LAST=";");
  403      %VLR_CGSTATS(FPTN=FPTN, STCLASS=STCLASS, LVL=LVL, LAST=",");
  404       /* Invoke comgroup statistics macro to include in my stats area */
  405           %(LVL + 1) FPREQ SBIN WORD,
  406       /* # of forms program requests */
  407           %(LVL + 1) TPU SBIN WORD,
15:14 JUL 28 '97 QQ_MACROS_C.:E05SI                                        12   
  408       /* # of TPUs currently running */
  409           %(LVL + 1) EVENT SBIN WORD,
  410       /* # of events processed */
  411           %(LVL + 1) CMD SBIN WORD,
  412       /* # of commands processed */
  413           %(LVL + 1) *(0:27) SBIN WORD LAST_LAST
  414       /* Spares */
  415      %MEND;
  416               /***************************************/
  417               /*          FPERR                      */
  418               /***************************************/
  419      %MACRO FPERR;
  420      %EQU FPERR_NOERR#   = 0;    /* For convenience only. No error.               */
  421      %EQU FPERR_NOAUTH#  = 1;    /* Not authorized for that type.                 */
  422      %EQU FPERR_UNKNOWN# = 2;    /* That type is unknown to this instance.        */
  423      %EQU FPERR_DISABLED#= 3;    /* That type is disabled                         */
  424      %MEND;

