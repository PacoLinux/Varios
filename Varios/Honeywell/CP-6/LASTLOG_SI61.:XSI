/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/* LASTLOG  -  TELLS WHEN THIS ACCOUNT LAST LOGGED ON, ETC. */
 
/********************************************************************/
 
LASTLOG: PROC MAIN;
 
/********************************************************************/
 
%EQU COMMAND_PROCESSOR='0'B; /* SET TO '1'B IF YOU WANT TO RUN IN CP MODE */
%INCLUDE CP_6;
%INCLUDE AS_SUPER_C;
%INCLUDE B$JIT;
 
%F$DCB;
 
DCL F$USERS# UBIN WORD AUTO;
DCL M$LO# UBIN WORD AUTO;
 
%FPT_GETDCB (FPTN = A$GETDCB,
      STCLASS = AUTO);
%VLP_NAME (FPTN = C$F$USERS_NAME,
      STCLASS = CONSTANT,
      NAME = 'F$USERS',
      LEN = 7);
%VLP_NAME (FPTN = C$M$LO_NAME,
      STCLASS = CONSTANT,
      NAME = 'M$LO',
      LEN = 4);
 
DCL 1 LINE,
      2 FILL1 CHAR(22),          /* LAST ON AT */
      2 LASTLOG_TIME CHAR(5),
      2 FILL2 CHAR(4),               /* ON */
      2 LASTLOG_WEEKDAY CHAR(3),
      2 FILL3 CHAR(1),           /*SPACE*/
      2 LASTLOG_DATE CHAR(10),
      2 FILL4 CHAR(2),           /* THERE HAVE BEEN */
      2 FAIL_COUNT CHAR(4),
      2 FILL5 CHAR(27);           /* FAILED LOGONS SINCE YOU LAST LOGGED OFF.*/
 
%FPT_OPEN (FPTN=C$OPEN_USERS,    /* to open the :USERS file */
      STCLASS = CONSTANT,
      FUN = IN,
      SHARE = ALL,
      ACS = DIRECT,
      ASN = FILE,
      NAME = C$USERS_NAME,
      ACCT = C$SYS_ACCT,
      REASSIGN = NO,
      SCRUB = YES);
%FPT_OPEN (FPTN = A$OPEN_USERS,
      STCLASS = AUTO);
%VLP_NAME (FPTN = C$USERS_NAME,
      STCLASS = CONSTANT,
      NAME = ':USERS');
%VLP_ACCT (FPTN = C$SYS_ACCT,
      STCLASS = CONSTANT,
      ACCT = ':SYS    ');
 
%FPT_WRITE (FPTN = C$WRITE_LINE,   /* to write the report line */
      STCLASS = CONSTANT);
%FPT_WRITE (FPTN = A$WRITE_LINE,
      STCLASS = AUTO);                 /* must init BUF_, V.DCB#, V_ */
 
%FPT_READ (FPTN = C$READ_USERS,      /* to read the :USERS record */
      STCLASS = CONSTANT,
      KEYS = YES);                     /* must init BUF_, KEY_ and V.DCB# */
%FPT_READ (FPTN = A$READ_USERS,
      STCLASS = AUTO);
%VLP_NAME (FPTN = A$USERS_KEY,
      STCLASS = AUTO,
      LEN = 20);
%AS_USERS (STR_NAME = AS_USERS,
      STCLASS = AUTO);
 
DCL B$JIT$ PTR SYMREF;
%B$TCB;
%B$ALT;
DCL B$TCB$ PTR SYMREF;
 
%FPT_CLOSE (FPTN = C$CLOSE_USERS,   /* close :USERS to be neat */
      STCLASS = CONSTANT,
      DISP = SAVE);
%FPT_CLOSE (FPTN = A$CLOSE_USERS,
      STCLASS = AUTO);             /* INIT V.DCB#, V_ */
 
/*  - - -   to convert the UTS from :USERS   - - - */
 
%FPT_TIME (FPTN = C$UTS_TO_EXT,
      STCLASS = CONSTANT,
      SOURCE = UTS,
      DEST = EXT);         /* must init DAY_, DATE_, TIME_, TIMESTAMP_ */
%FPT_TIME (FPTN = A$UTS_TO_EXT,
      STCLASS = AUTO);
DCL UTS BIT(36) AUTO;
 
/* - - -   to figure out if s/he was on today   - - - */
 
%FPT_TIME (FPTN = C$GET_TODAY,
      STCLASS = CONSTANT,
      SOURCE = CLOCK,
      DEST = EXT);         /* must init DATE_ */
%FPT_TIME (FPTN = A$GET_TODAY,
      STCLASS = AUTO);
DCL TODAY CHAR(10) AUTO;
 
DCL I SBIN;
 
/* - - -   how to leave this program   - - - */
 
%IF COMMAND_PROCESSOR;
%FPT_CPEXIT (FPTN = C$EXIT_TO_IBEX,
      STCLASS = CONSTANT,
      NAME = C$IBEX_NAME,
      ACCT = C$SYS_ACCT);  /* FROM OPEN */
%VLP_NAME (FPTN = C$IBEX_NAME,
      STCLASS = CONSTANT,
      NAME = 'IBEX',
      LEN = 4);
 
%FPT_CPEXIT (FPTN = C$LOG_OFF,
      STCLASS = CONSTANT,
      CPOFF = YES);
%FPT_CPEXIT (FPTN = A$LOG_OFF,
      STCLASS = AUTO);
%ELSE;
%FPT_EXIT (FPTN = FPT_EXIT);
%ENDIF;
 
/* - - -   command variable stuff   - - - */
 
%FPT_CMDVAR (FPTN = C$STORE,
      STCLASS = CONSTANT,
      FUN = STORE);
%FPT_CMDVAR (FPTN = A$STORE,
      STCLASS = AUTO);
%VLP_NAME (FPTN = TEXTC,
      STCLASS = AUTO,
      LEN = 255);
%VLP_NAME (FPTN = LAST_TIME,
      STCLASS = CONSTANT,
      NAME = 'LASTLOG_TIME');
%VLP_NAME (FPTN = LAST_DATE,
      STCLASS = CONSTANT,
      NAME = 'LASTLOG_DATE');
 
/*------------------------------------------------------------------*/
 
START:
 
A$USERS_KEY.NAME# = B$JIT$->B$JIT.ACCN;
SUBSTR(A$USERS_KEY.NAME#,8) = B$JIT$->B$JIT.UNAME;
 
/* FIX THE LENGTH BYTE */
 
A$USERS_KEY.L# = 20;
DO WHILE (SUBSTR(A$USERS_KEY.NAME#,A$USERS_KEY.L#-1,1) = ' ');
      A$USERS_KEY.L# = A$USERS_KEY.L# - 1;
END/*WHILE*/;
 
/* - - -   GET THE DCBS I'LL NEED   - - - */
 
A$GETDCB.V_ = VECTOR(A$GETDCB.V);
%IF COMMAND_PROCESSOR;
      A$GETDCB.V.DCB# = 5;
%ELSE;
      A$GETDCB.V.DCB# = 0;
%ENDIF;
A$GETDCB.DCBNUM_ = VECTOR(F$USERS#);
A$GETDCB.DCBNAME_ = VECTOR(C$F$USERS_NAME);
CALL M$GETDCB (A$GETDCB) ALTRET(OOPS);
 
%IF COMMAND_PROCESSOR;
      A$GETDCB.V.DCB# = 6;
%ELSE;
      A$GETDCB.V.DCB# = 0;
%ENDIF;
A$GETDCB.DCBNUM_ = VECTOR(M$LO#);
A$GETDCB.DCBNAME_ = VECTOR(C$M$LO_NAME);
CALL M$GETDCB (A$GETDCB) ALTRET (OOPS);
 
/* OPEN :USERS.:SYS */
 
A$OPEN_USERS = C$OPEN_USERS;
A$OPEN_USERS.V_ = VECTOR(A$OPEN_USERS.V);
A$OPEN_USERS.V.DCB# = F$USERS#;
 
CALL M$OPEN (A$OPEN_USERS) ALTRET (OOPS);
 
/* READ THE USER'S RECORD */
 
A$READ_USERS = C$READ_USERS;
A$READ_USERS.V_ = VECTOR(A$READ_USERS.V);
A$READ_USERS.V.DCB# = F$USERS#;
A$READ_USERS.BUF_ = VECTOR(AS_USERS);
A$READ_USERS.KEY_ = VECTOR(A$USERS_KEY);
CALL M$READ (A$READ_USERS) ALTRET (OOPS);
 
A$CLOSE_USERS = C$CLOSE_USERS;
A$CLOSE_USERS.V_ = VECTOR(A$CLOSE_USERS.V);
A$CLOSE_USERS.V.DCB# = F$USERS#;
CALL M$CLOSE (A$CLOSE_USERS);
 
/* TRANSLATE THE TIME */
 
UTS = AS_USERS.LAST_LOGON_TIME;
 
A$UTS_TO_EXT            = C$UTS_TO_EXT;
A$UTS_TO_EXT.V_         = VECTOR(A$UTS_TO_EXT.V);
A$UTS_TO_EXT.DAY_       = VECTOR(LINE.LASTLOG_WEEKDAY);
A$UTS_TO_EXT.DATE_      = VECTOR(LINE.LASTLOG_DATE);
A$UTS_TO_EXT.TIME_      = VECTOR(LINE.LASTLOG_TIME);
A$UTS_TO_EXT.TSTAMP_ = VECTOR(UTS);
CALL M$TIME (A$UTS_TO_EXT) ALTRET (OOPS);
 
/* PUT THE VALUES INTO LINE IF WE'RE GOING TO PRINT THEN */
IF B$JIT$->B$JIT.PRFLAGS.LIST THEN DO;
 
   LINE.FILL1 = 'You last logged on at ';
   LINE.FILL2 = ' on ';
   LINE.FILL3 = ' ';
 
   IF AS_USERS.CUR_BAD_LOGON_CNT > 0 THEN DO;  /* THERE HAVE BEEN BAD LOGONS */
         LINE.FILL4 = ' (';
         CALL BINCHAR (LINE.FAIL_COUNT, AS_USERS.CUR_BAD_LOGON_CNT);
         LINE.FILL5 = ' failed logons since then)';
/* blank leading zeros */
         I = 0;
         DO WHILE (SUBSTR(LINE.FAIL_COUNT,I,1) = '0');
            SUBSTR(LINE.FAIL_COUNT,I,1) = ' ';
            I = I + 1;
         END/*WHILE ZERO*/;
         END;
   ELSE DO ;  /* NO BAD LOGONS */
         LINE.FILL4 = ' ';
         LINE.FAIL_COUNT = ' ';
         LINE.FILL5 = ' ';
   END/*IF BAD LOGONS*/;
 
   A$WRITE_LINE = C$WRITE_LINE;
   A$WRITE_LINE.BUF_ = VECTOR(LINE);
   A$WRITE_LINE.V_ = VECTOR(A$WRITE_LINE.V);
   A$WRITE_LINE.V.DCB# = M$LO#;
   CALL M$WRITE (A$WRITE_LINE);
END/*IF*/;
 
/* - - -   SET SOME COMMAND VARIABLES   - - - */
 
TEXTC.NAME# = LINE.LASTLOG_TIME;
TEXTC.L# = 5;
A$STORE = C$STORE;
A$STORE.V_ = VECTOR(A$STORE.V);
A$STORE.NAME_ = VECTOR(LAST_TIME);
A$STORE.VALUE_ = VECTOR(TEXTC);
CALL M$CMDVAR (A$STORE) ALTRET(OOPS);
 
TEXTC.NAME# = LINE.LASTLOG_DATE;
TEXTC.L# = 10;
A$STORE.NAME_ = VECTOR(LAST_DATE);
CALL M$CMDVAR (A$STORE) ALTRET(OOPS);
 
/* - - -   THE NORMAL END   - - - */
 
%IF COMMAND_PROCESSOR;
CALL M$CPEXIT (C$EXIT_TO_IBEX);
%ELSE;
 
/* - - -   was the user on today?   - - - */
 
A$GET_TODAY = C$GET_TODAY;
A$GET_TODAY.V_ = VECTOR(A$GET_TODAY.V);
A$GET_TODAY.DATE_ = VECTOR(TODAY);
CALL M$TIME (A$GET_TODAY) ALTRET(OOPS);
IF TODAY = LINE.LASTLOG_DATE THEN DO;
      FPT_EXIT.V.STEPCC# = 1;
      END;
ELSE DO;
      FPT_EXIT.V.STEPCC# = 0;
      END;
CALL M$EXIT (FPT_EXIT);
%ENDIF;
 
/* - - -   THE BAD END   - - - */
 
OOPS:
 
%IF COMMAND_PROCESSOR;
A$LOG_OFF = C$LOG_OFF;
A$LOG_OFF.V_ = VECTOR (A$LOG_OFF.V);
A$LOG_OFF.V.JERR = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
CALL M$CPEXIT (A$LOG_OFF);
 
%ELSE;
CALL M$XXX;
%ENDIF;
 
END LASTLOG;
