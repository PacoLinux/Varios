VERSION E05

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:1    
        1        1        /*M* TOU$GET_CARD     DEckfile Editor Routine IFAD Record Verifier */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        TOU$GET_CARD
       12       12              AUTHOR:      D. Augustine
       13       13              PURPOSE:     DEckfile Editor Routine IFAD Record Fetch
       14       14              DESCRIPTION: The entry points of this program call TOU$DEBLOCKER
       15       15                           to obtain input records from IFAD  and  then verify
       16       16                           the records and return them to the calling module.
       17       17                           +----------------------------------------------+
       18       18                           |                Record Sizes                  |
       19       19                           +----------------------------------------------+
       20       20                           |Size| Type   | Description                    |
       21       21                           +----+--------+--------------------------------+
       22       22                           |  0 |        | End of File Signalled          |
       23       23                           | 14 | BCD    | $OBJECT, PATCH, or $DKEND card |
       24       24                           | 27 | BINARY | Binary card for object deck    |
       25       25                           +----+--------+--------------------------------+
       26       26              REFERENCE:   CP-6 Release C01B
       27       27              LAST UPDATE: 05/28/85
       28       28        */
       29       29        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:2    
       30       30        /*F*  NAME:        TOU$GET_CARD
       31       31              DESCRIPTION: Procedure Nesting Hierarchy
       32       32
       33       33              TOU$GET_CARD: procedure ALTRET
       34       34
       35       35              TOU$GET_CP6_OBJECT: entry
       36       36              TOU$GET_BINARY_CARDS: entry ALTRET
       37       37              TOU$GET_BCD_CARDS: entry ALTRET
       38       38              TOU$GET_PATCH_CARDS: entry ALTRET
       39       39              TOU$GET_HEADER: entry ALTRET
       40       40              TOU$GET_DIRECTORY: entry ALTRET
       41       41              TOU$GET_FILE: entry ALTRET
       42       42              TOU$MAKE_OBJECT_CARD: entry ALTRET
       43       43              TOU$MAKE_DKEND_CARD: entry ALTRET
       44       44              TOU$MAKE_DIR_OBJECT_CARD: entry ALTRET
       45       45              TOU$MAKE_HDR_OBJECT_CARD: entry ALTRET
       46       46
       47       47                 GC_GET_CP6_OBJECT: procedure ALTRET
       48       48                 GC_GET_BINARY_CARDS: procedure ALTRET
       49       49                    GC_CHECK_APPLICABILITY: procedure
       50       50                 GC_GET_BCD_CARDS: procedure ALTRET
       51       51                 GC_GET_PATCH_CARDS: procedure ALTRET
       52       52                    GC_FORM_HEX_CARD: procedure
       53       53                    GC_FORM_OCTAL_CARD: procedure
       54       54                    GC_STORE_PATCH_CARD: procedure
       55       55                 GC_CONVERT_BCD_CARD: procedure
       56       56                 GC_OBJECT_CHECKS: procedure ALTRET
       57       57                 GC_CONVERT_BINARY_CARD: procedure ALTRET
       58       58                 GC_BINARY_CHECKS: procedure ALTRET
       59       59                    GC_PREFACE_CHECKS: procedure ALTRET
       60       60                 GC_SET_ID_BLOCK: procedure
       61       61                    GC_SET_FROM_BINARY_CARDS: procedure
       62       62                    GC_SET_FROM_DKEND: procedure
       63       63                 GC_PATCH_CHECKS: procedure ALTRET
       64       64                    GC_OCTAL_CHECKS: procedure ALTRET
       65       65                       GC_VERIFY_VALUE: procedure (START, STOP) ALTRET
       66       66                    GC_HEX_CHECKS: procedure ALTRET
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:3    
       67       67                       GC_VERIFY_VALUE: procedure (V, B) ALTRET
       68       68                 GC_DKEND_CHECKS: procedure ALTRET
       69       69                 GC_GET_HEADER: procedure ALTRET
       70       70                 GC_GET_DIRECTORY: procedure ALTRET
       71       71                 GC_GET_FILE: procedure ALTRET
       72       72                 GC_ADDR: procedure (I, O)
       73       73                 GC_MAKE_OBJECT_CARD: procedure (T) ALTRET
       74       74                 GC_MAKE_DKEND_CARD: procedure ALTRET
       75       75                 GC_CONVERT_8_TO_9: procedure ALTRET
       76       76                 GC_ERR_MSG: procedure
       77       77        */
       78       78        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:4    
       79       79        TOU$GET_CARD: PROC ALTRET ;
       80       80
       81       81        /* Include Files */
       82       82
       83       83           %INCLUDE B_ERRORS_C ;
       84     1210           %INCLUDE CP_6 ;
       85     6769           %INCLUDE CP_6_SUBS ;
       86     7309           %INCLUDE TOU_DEER_M ;
       87     8720           %INCLUDE TOU_RQSTS_E ;
       88     8795           %INCLUDE TO_PERR_C ;
       89     9380           %INCLUDE XU_MACRO_C ;
       90    12486           %INCLUDE XUR_ENTRY ;
       91    12518
       92    12519        /* Macros and redefs of macros */
       93    12520
       94    12521           %DUP (STCLASS = SYMREF) ;
       95    12664           %BCD_B (STCLASS = "BASED (DUP.BCD_V.PTR$)") ;
       96    12676           %BCD_CARD (STCLASS = STATIC SYMDEF) ;
       97    12696    1      DCL 1 BCD_ARRAY REDEF BCD_CARD ALIGNED,
       98    12697    1            2 DATA   (0:79) CHAR (1)  UNAL,
       99    12698    1            2 *      UBIN WORD ALIGNED ;
      100    12699           %BINARY_B (STCLASS = "BASED (DUP.BINARY_V.PTR$)") ;
      101    12713           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:5    
      102    12714           %BINARY_CARD (STCLASS = "STATIC SYMDEF") ;
      103    12741    1      DCL 1 PREFACE REDEF BINARY_CARD,
      104    12742    1            2 WD1,
      105    12743    1              3 TYPE         UBIN (3) UNAL,
      106    12744    1              3 V_COUNT      UBIN (6) UNAL,
      107    12745    1              3 *            UBIN (3) UNAL,
      108    12746    1              3 WOREAD_COUNT   UBIN (6) UNAL,
      109    12747    1              3 SIZE         UBIN HALF UNAL,
      110    12748    1            2 CHECKSUM       UBIN WORD ALIGNED,
      111    12749    1            2 CONTROL,
      112    12750    1              3 BLANK_COMMON UBIN  (18) UNAL,
      113    12751    1              3 MOD_8        BIT  (1) UNAL,
      114    12752    1              3 *            BIT  (2) UNAL,
      115    12753    1              3 ENTRY_COUNT  UBIN (15) UNAL,
      116    12754    1            2 ENTRY_ (0:9),
      117    12755    1              3 NAME         CHAR (4) UNAL,
      118    12756    1              3 ADDRESS      UBIN HALF UNAL,
      119    12757    1              3 *            UBIN (15) UNAL,
      120    12758    1              3 TYPE         UBIN (3) UNAL,
      121    12759    1            2 *              CHAR (12) UNAL;
      122    12760           %DKEND (STCLASS = SYMREF) ;
      123    12784           %ID (STCLASS = "STATIC SYMDEF") ;
      124    12801    1      DCL ID_ (0:17) REDEF ID CHAR (1) UNAL ;
      125    12802           %LAST (STCLASS = SYMREF) ;
      126    12815           %MCA_B (STCLASS = "BASED (DUP.BINARY_V.PTR$)") ;
      127    12885           %OBJECT (STCLASS = SYMREF) ;
      128    12948           %RECORD (STCLASS = SYMREF) ;
      129    12975           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:6    
      130    12976        /* Variables */
      131    12977
      132    12978    1      DCL BCD_ASCII_TABLE CHAR (64) CONSTANT SYMDEF CALIGNED INIT
      133    12979    1           ('0123456789[#@:>? ABCDEFGHI&.](<\^JKLMNOPQR-$*);''+/STUVWXYZ_,%="!') ;
      134    12980    1      DCL BCD_ASCII (0:63) REDEF BCD_ASCII_TABLE CHAR (1) CALIGNED ;
      135    12981    1      DCL BCD#   UBIN WORD SYMREF ALIGNED;
      136    12982    1      DCL CUR#   UBIN WORD SYMREF ALIGNED;
      137    12983    1      DCL BIN#   UBIN WORD SYMREF ALIGNED;
      138    12984    1      DCL BLOCK_SEQ CHAR (4) STATIC SYMDEF ALIGNED INIT (' ');
      139    12985    1      DCL CARD_SEQ UBIN WORD;
      140    12986    1      DCL FILE_EOF                   UBIN WORD SYMREF ALIGNED ;
      141    12987    1      DCL BINARY_TABLE (0:63) CONSTANT BIT (12) UNAL INIT
      142    12988    1                  ('001000000000'B,
      143    12989    1                   '000100000000'B,
      144    12990    1                   '000010000000'B,
      145    12991    1                   '000001000000'B,
      146    12992    1                   '000000100000'B,
      147    12993    1                   '000000010000'B,
      148    12994    1                   '000000001000'B,
      149    12995    1                   '000000000100'B,
      150    12996    1                   '000000000010'B,
      151    12997    1                   '000000000001'B,
      152    12998    1                   '000010000010'B,
      153    12999    1                   '000001000010'B,
      154    13000    1                   '000000100010'B,
      155    13001    1                   '000000010010'B,
      156    13002    1                   '000000001010'B,
      157    13003    1                   '000000000110'B,
      158    13004    1                   '000000000000'B,
      159    13005    1                   '100100000000'B,
      160    13006    1                   '100010000000'B,
      161    13007    1                   '100001000000'B,
      162    13008    1                   '100000100000'B,
      163    13009    1                   '100000010000'B,
      164    13010    1                   '100000001000'B,
      165    13011    1                   '100000000100'B,
      166    13012    1                   '100000000010'B,
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:7    
      167    13013    1                   '100000000001'B,
      168    13014    1                   '100000000000'B,
      169    13015    1                   '100001000010'B,
      170    13016    1                   '100000100010'B,
      171    13017    1                   '100000010010'B,
      172    13018    1                   '100000001010'B,
      173    13019    1                   '100000000110'B,
      174    13020    1                   '011000000000'B,
      175    13021    1                   '010100000000'B,
      176    13022    1                   '010010000000'B,
      177    13023    1                   '010001000000'B,
      178    13024    1                   '010000100000'B,
      179    13025    1                   '010000010000'B,
      180    13026    1                   '010000001000'B,
      181    13027    1                   '010000000100'B,
      182    13028    1                   '010000000010'B,
      183    13029    1                   '010000000001'B,
      184    13030    1                   '010000000000'B,
      185    13031    1                   '010001000010'B,
      186    13032    1                   '010000100010'B,
      187    13033    1                   '010000010010'B,
      188    13034    1                   '010000001010'B,
      189    13035    1                   '010000000110'B,
      190    13036    1                   '101000000000'B,
      191    13037    1                   '001100000000'B,
      192    13038    1                   '001010000000'B,
      193    13039    1                   '001001000000'B,
      194    13040    1                   '001000100000'B,
      195    13041    1                   '001000010000'B,
      196    13042    1                   '001000001000'B,
      197    13043    1                   '001000000100'B,
      198    13044    1                   '001000000010'B,
      199    13045    1                   '001000000001'B,
      200    13046    1                   '001010000010'B,
      201    13047    1                   '001001000010'B,
      202    13048    1                   '001000100010'B,
      203    13049    1                   '001000010010'B,
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:8    
      204    13050    1                   '001000001010'B,
      205    13051    1                   '001000000110'B) ;
      206    13052    1      DCL ID_BLOCK_SET       BIT (1) CALIGNED;
      207    13053    1      DCL PREFACE_FOUND      BIT (1) CALIGNED;
      208    13054    1      DCL SEQ                UBIN WORD STATIC ALIGNED INIT (0);
      209    13055
      210    13056        /* Data Control Blocks */
      211    13057
      212    13058    1      DCL M$SI               DCB ;
      213    13059    1      DCL M$IFAD             DCB ;
      214    13060    1      DCL M$DO               DCB ;
      215    13061
      216    13062        /* External Entry Points */
      217    13063
      218    13064    1      DCL TOU$DU_USER_WRITE          ENTRY ALTRET ;
      219    13065    1      DCL TOU$CHECK_CARD_CHECKSUM    ENTRY (4) ALTRET ;
      220    13066    1      DCL TOU$DEBLOCKER              ENTRY ALTRET ;
      221    13067    1      DCL TOU$CLEAR_BLOCK            ENTRY ALTRET ;
      222    13068    1      DCL TOU$READ_MCA_DATA          ENTRY ALTRET ;
      223    13069    1      DCL TOU$CHECKSUM               ENTRY (4) ALTRET ;
      224    13070           %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:9    
      225    13071        /*D*  NAME:        TOU$GET_CP6_OBJECT
      226    13072              ENTRY:
      227    13073              AUTHOR:      Scott S. Sheppard
      228    13074              INTERFACE:   GC_GET_CP6_OBJECT
      229    13075              DESCRIPTION: This entry point calls procedure GC_GET_CP6_OBJECT
      230    13076                           to return object cards to other modules.
      231    13077        */
      232    13078
      233    13079    1   TOU$GET_CP6_OBJECT: ENTRY ALTRET ;
      234    13080
      235    13081    1      CALL GC_GET_CP6_OBJECT ALTRET (TOU$GC_ALTRETURN) ;
      236    13082    1      RETURN ;
      237    13083
      238    13084        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:10   
      239    13085        /*D*  NAME:        TOU$GET_BINARY_CARDS
      240    13086              ENTRY:
      241    13087              AUTHOR:      Scott S. Sheppard
      242    13088              INTERFACE:   GC_GET_BINARY_CARDS
      243    13089              DESCRIPTION: This entry point calls procedure GC_GET_BINARY_CARDS
      244    13090                           to return binary cards to other modules.
      245    13091        */
      246    13092
      247    13093    1   TOU$GET_BINARY_CARDS: ENTRY ALTRET ;
      248    13094
      249    13095    1      CALL GC_GET_BINARY_CARDS ALTRET (TOU$GC_ALTRETURN) ;
      250    13096    1      RETURN ;
      251    13097
      252    13098        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:11   
      253    13099        /*D*  NAME:        TOU$GET_BCD_CARDS
      254    13100              ENTRY:
      255    13101              AUTHOR:      Scott S. Sheppard
      256    13102              INTERFACE:   GC_GET_BCD_CARDS
      257    13103              DESCRIPTION: This entry point calls procedure GC_GET_BCD_CARDS
      258    13104                           to return BCD cards to other modules.
      259    13105        */
      260    13106
      261    13107    1   TOU$GET_BCD_CARDS: ENTRY ALTRET ;
      262    13108
      263    13109    1      CALL GC_GET_BCD_CARDS ALTRET (TOU$GC_ALTRETURN) ;
      264    13110    1      RETURN ;
      265    13111
      266    13112        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:12   
      267    13113        /*D*  NAME:        TOU$GET_PATCH_CARDS
      268    13114              ENTRY:
      269    13115              AUTHOR:      Scott S. Sheppard
      270    13116              INTERFACE:   GC_GET_PATCH_CARDS
      271    13117              DESCRIPTION: This entry point calls procedure GC_GET_PATCH_CARDS
      272    13118                           to return PATCH cards to other modules.
      273    13119        */
      274    13120
      275    13121    1   TOU$GET_PATCH_CARDS: ENTRY ALTRET ;
      276    13122
      277    13123    1      CALL GC_GET_PATCH_CARDS ALTRET (TOU$GC_ALTRETURN) ;
      278    13124    1      RETURN ;
      279    13125
      280    13126        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:13   
      281    13127        /*D*  NAME:        TOU$GET_CONFIG
      282    13128              ENTRY:
      283    13129              AUTHOR:      Kirk J. Dixon (Nov. 89)
      284    13130              INTERFACE:   GC_GET_CONFIG
      285    13131              DESCRIPTION: This entry point calls procedure GC_GET_CONFIG
      286    13132                           to return the MCA config to TOU$MERGE.
      287    13133        */
      288    13134
      289    13135    1   TOU$GET_CONFIG: ENTRY ALTRET ;
      290    13136
      291    13137    1      CALL GC_GET_CONFIG ALTRET (TOU$GC_ALTRETURN) ;
      292    13138    1      RETURN ;
      293    13139
      294    13140        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:14   
      295    13141        /*D*  NAME:        TOU$GET_HEADER
      296    13142              ENTRY:
      297    13143              AUTHOR:      Scott S. Sheppard
      298    13144              INTERFACE:   GC_GET_HEADER
      299    13145              DESCRIPTION: This entry point calls procedure GC_GET_HEADER
      300    13146                           to return diskette headers to other modules.
      301    13147        */
      302    13148
      303    13149    1   TOU$GET_HEADER: ENTRY ALTRET ;
      304    13150
      305    13151    1      CALL GC_GET_HEADER ALTRET (TOU$GC_ALTRETURN) ;
      306    13152    1      RETURN ;
      307    13153
      308    13154        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:15   
      309    13155        /*D*  NAME:        TOU$GET_DIRECTORY
      310    13156              ENTRY:
      311    13157              AUTHOR:      Scott S. Sheppard
      312    13158              INTERFACE:   GC_GET_DIRECTORY
      313    13159              DESCRIPTION: This entry point calls procedure GC_GET_DIRECTORY
      314    13160                           to return a diskette directory to other modules.
      315    13161        */
      316    13162
      317    13163    1   TOU$GET_DIRECTORY: ENTRY ALTRET ;
      318    13164
      319    13165    1      CALL GC_GET_DIRECTORY ALTRET (TOU$GC_ALTRETURN) ;
      320    13166    1      RETURN ;
      321    13167
      322    13168        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:16   
      323    13169        /*D*  NAME:        TOU$GET_FILE
      324    13170              ENTRY:
      325    13171              AUTHOR:      Scott S. Sheppard
      326    13172              INTERFACE:   GC_GET_FILE
      327    13173              DESCRIPTION: This entry point calls procedure GC_GET_FILE
      328    13174                           to return a diskette file to other modules.
      329    13175        */
      330    13176
      331    13177    1   TOU$GET_FILE: ENTRY ALTRET ;
      332    13178
      333    13179    1      CALL GC_GET_FILE ALTRET (TOU$GC_ALTRETURN) ;
      334    13180    1      RETURN ;
      335    13181
      336    13182        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:17   
      337    13183        /*D*  NAME:        TOU$MAKE_OBJECT_CARD
      338    13184              ENTRY:
      339    13185              AUTHOR:      Scott S. Sheppard
      340    13186              INTERFACE:   GC_MAKE_OBJECT_CARD
      341    13187              DESCRIPTION: This entry point calls procedure GC_MAKE_OBJECT_CARD
      342    13188                           to construct an object card for DIPPER data.
      343    13189        */
      344    13190
      345    13191    1   TOU$MAKE_OBJECT_CARD: ENTRY ALTRET ;
      346    13192
      347    13193    1      CALL GC_MAKE_OBJECT_CARD ('FILE     ') ;
      348    13194    1      RETURN ;
      349    13195
      350    13196        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:18   
      351    13197        /*D*  NAME:        TOU$MAKE_DKEND_CARD
      352    13198              ENTRY:
      353    13199              AUTHOR:      Scott S. Sheppard
      354    13200              INTERFACE:   GC_MAKE_DKEND_CARD
      355    13201              DESCRIPTION: This entry point calls procedure GC_MAKE_DKEND_CARD
      356    13202                           to construct a deck end card for DIPPER data.
      357    13203        */
      358    13204
      359    13205    1   TOU$MAKE_DKEND_CARD: ENTRY ALTRET ;
      360    13206
      361    13207    1      CALL GC_MAKE_DKEND_CARD ;
      362    13208    1      RETURN ;
      363    13209
      364    13210        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:19   
      365    13211        /*D*  NAME:        TOU$MAKE_DIR_OBJECT_CARD
      366    13212              ENTRY:
      367    13213              AUTHOR:      Scott S. Sheppard
      368    13214              INTERFACE:   GC_MAKE_OBJECT_CARD
      369    13215              DESCRIPTION: This entry point calls procedure GC_MAKE_OBJECT_CARD
      370    13216                           to construct an object card for DIPPER data.
      371    13217        */
      372    13218
      373    13219    1   TOU$MAKE_DIR_OBJECT_CARD: ENTRY ALTRET ;
      374    13220
      375    13221    1      CALL GC_MAKE_OBJECT_CARD ('DIRECTORY') ;
      376    13222    1      RETURN ;
      377    13223
      378    13224        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:20   
      379    13225        /*D*  NAME:        TOU$MAKE_HDR_OBJECT_CARD
      380    13226              ENTRY:
      381    13227              AUTHOR:      Kathy Larkin
      382    13228              INTERFACE:   GC_MAKE_OBJECT_CARD
      383    13229              DESCRIPTION: This entry point calls procedure GC_MAKE_OBJECT_CARD
      384    13230                           to construct an object card for a DIPPER header file.
      385    13231        */
      386    13232
      387    13233    1   TOU$MAKE_HDR_OBJECT_CARD: ENTRY ALTRET ;
      388    13234
      389    13235    1      CALL GC_MAKE_OBJECT_CARD ('HEADER   ') ;
      390    13236    1      RETURN ;
      391    13237
      392    13238        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:21   
      393    13239        /*D*  NAME:        TOU$GC_ALTRETURN
      394    13240              LABEL:
      395    13241              AUTHOR:      Scott S. Sheppard
      396    13242              DESCRIPTION: This  label  is  where  entry  points  into
      397    13243                           TOU$GET_CARD altret to so any errors may be
      398    13244                           altreturned back to the caller.
      399    13245        */
      400    13246
      401    13247    1   TOU$GC_ALTRETURN:
      402    13248
      403    13249    1      ALTRETURN ;
      404    13250
      405    13251        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:22   
      406    13252        /*I*  NAME:        GC_GET_CP6_OBJECT
      407    13253              AUTHORS:     David M. Augustine
      408    13254                           Scott S. Sheppard
      409    13255              PURPOSE:     Gets A $OBJECT card
      410    13256              INTERFACE:   TOU$DEBLOCKER
      411    13257                           TOU$CLEAR_BLOCK
      412    13258                           GC_CHECK_APPLICABILITY
      413    13259              INPUT:       RECORD.SIZE
      414    13260                           BCD_CARD.BCD.TYPE
      415    13261                           APPLICABLE
      416    13262                           FILE_EOF
      417    13263                           DECK_SAVED
      418    13264              OUTPUT:      OBJECT structure receives $Object card
      419    13265              DESCRIPTION: This procedure loops, accepting records from the IFAD
      420    13266                           source until a $OBJECT card which applies to  CP-6 is
      421    13267                           encountered or an end-of-file mark is encountered for
      422    13268                           a file that has had a deck saved from it.
      423    13269                           This  procedure  usually  returns  (RECORD.SIZE = 14)
      424    13270                           for a CP-6 $OBJECT card. However, an end-of-file mark
      425    13271                           (RECORD.SIZE = 0) is returned if the  file being read
      426    13272                           contained an object deck that has been  saved  in the
      427    13273                           deckfile. In this way, files which contain  no object
      428    13274                           decks for CP-6 are ignored  & save catalog processing
      429    13275                           is done only for the applicable files.
      430    13276        */
      431    13277
      432    13278    1   GC_GET_CP6_OBJECT: PROC ALTRET ;
      433    13279
      434    13280    2      DCL OBJECT_FOUND  BIT (1) CALIGNED;
      435    13281    2      DCL DECK_SAVED    BIT (1) SYMREF CALIGNED ;
      436    13282    2      DCL APPLICABLE    BIT (1) CALIGNED;
      437    13283           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:23   
      438    13284        /* Code */
      439    13285
      440    13286    2      OBJECT_FOUND = %FALSE ;
      441    13287    3      DO WHILE (FILE_EOF < 2 AND ~OBJECT_FOUND) ;
      442    13288    3         CALL TOU$DEBLOCKER ALTRET (ERROR) ;
      443    13289    4         DO CASE (RECORD.SIZE) ;
      444    13290    4            CASE (14) ;
      445    13291    4               CALL GC_CONVERT_BCD_CARD ;
      446    13292    4               IF BCD_CARD.BCD.TYPE = 'OBJECT'
      447    13293    5               THEN DO ;
      448    13294    5                       OBJECT.BCD_ = BCD_CARD.BCD_ ;
      449    13295    5                       CALL GC_CHECK_APPLICABILITY (APPLICABLE);
      450    13296    5                       IF APPLICABLE
      451    13297    6                       THEN DO ;
      452    13298    6                               OBJECT_FOUND = %TRUE ;
      453    13299    6                               OBJECT.DECK_CHECKSUM = 0 ;
      454    13300    6                               OBJECT.LOAD_SIZE = 0 ;
      455    13301    6                               CALL GC_OBJECT_CHECKS ALTRET (ERROR) ;
      456    13302    6                            END /* THEN */ ;
      457    13303    5                       ELSE CALL TOU$CLEAR_BLOCK ;
      458    13304    5                    END /* THEN */ ;
      459    13305    4               ELSE CALL TOU$CLEAR_BLOCK ;
      460    13306    4            CASE (27) ;
      461    13307    4               CALL TOU$CLEAR_BLOCK ;
      462    13308    4            CASE (0) ;
      463    13309    4               OBJECT_FOUND = DECK_SAVED ;
      464    13310    4         END /* CASE */ ;
      465    13311    3      END /* WHILE */ ;
      466    13312    2      RETURN;
      467    13313
      468    13314    2   ERROR:
      469    13315    2      ALTRETURN ;
      470    13316
      471    13317        /* END GC_GET_CP6_OBJECT */
      472    13318        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:24   
      473    13319        /*I* NAME:         GC_CHECK_APPLICABILITY
      474    13320             AUTHOR:       Kathy Larkin
      475    13321             PURPOSE:      Determine applicability of object deck
      476    13322             INTERFACE:    None called.
      477    13323             PARAMETERS:   APPLICABLE - output - set if deck found applicable
      478    13324             DATA:         OBJECT.BCD.DONT_APPLY.CP6 - blank if applies to CP-6
      479    13325                           OBJECT.BCD.DONT_APPLY.DPS90 - blank if applies to DPS90
      480    13326                           DUP.CPU_TYPE - set to type of master cpu
      481    13327             DESCRIPTION:  Checks  the  DONT_APPLY.CP6  character  of the
      482    13328                           object  card  to  determine  if  the  deck  is
      483    13329                           applicable  to  CP-6  systems.  Further checks
      484    13330                           the   DONT_APPLY.DPS90   character   if  we're
      485    13331                           running   on   a   DPS90,   as  determined  by
      486    13332                           DUP.CPU_TYPE.
      487    13333        */
      488    13334    2   GC_CHECK_APPLICABILITY: PROC (APPLICABLE);
      489    13335
      490    13336    3      DCL APPLICABLE  BIT (1) CALIGNED;
      491    13337
      492    13338        /* Code */
      493    13339
      494    13340    3      IF (OBJECT.BCD.DONT_APPLY.CP6 = ' ')
      495    13341    4      THEN DO CASE (DUP.CPU_TYPE) ;
      496    13342    4              CASE (%DPS90, %DPS90XA) ;
      497    13343    4                 IF (OBJECT.BCD.DONT_APPLY.DPS90 = ' ')
      498    13344    4                 THEN APPLICABLE = %TRUE;
      499    13345    4                 ELSE APPLICABLE = %FALSE;
      500    13346    4              CASE (%DPS8000) ;
      501    13347    4                 IF (OBJECT.BCD.DONT_APPLY.DPS8000 = ' ')
      502    13348    4                 THEN APPLICABLE = %TRUE;
      503    13349    4                 ELSE APPLICABLE = %FALSE;
      504    13350    4              CASE (ELSE) ;
      505    13351    4                 APPLICABLE = %TRUE;
      506    13352    4           END /* DO CASE */ ;
      507    13353    3      ELSE APPLICABLE = %FALSE;
      508    13354
      509    13355    3   END GC_CHECK_APPLICABILITY;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:25   
      510    13356    2   END GC_GET_CP6_OBJECT;
      511    13357        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:26   
      512    13358        /*I*  NAME:        GC_GET_BINARY_CARDS
      513    13359              AUTHORS:     David M. Augustine
      514    13360                           Scott S. Sheppard
      515    13361              PURPOSE:     Gets Binary cards
      516    13362              INTERFACE:   GC_ERR_MSG
      517    13363                           TOU$DEBLOCKER
      518    13364                           TOU$CHECKSUM
      519    13365              INPUT:       RECORD.SIZE
      520    13366                           BINARY_CARD
      521    13367                           BIN#
      522    13368              OUTPUT:      BINARY_B
      523    13369                           BIN#
      524    13370                           OBJECT.DECK_CHECKSUM
      525    13371              DESCRIPTION: This procedure gets all of the binary cards for
      526    13372                           the deck to be added from the IFAD input source
      527    13373                           The binary cards are stored in the BINARY_B array
      528    13374        */
      529    13375        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:27   
      530    13376    1   GC_GET_BINARY_CARDS: PROC ALTRET ;
      531    13377
      532    13378        /* Code */
      533    13379
      534    13380    2      CALL TOU$DEBLOCKER ALTRET (ERROR) ;
      535    13381    2      BIN# = 0 ;
      536    13382    3      DO WHILE (RECORD.SIZE = 27) ;
      537    13383    3         CALL GC_CONVERT_BINARY_CARD ALTRET (ERROR) ;
      538    13384    3         CALL GC_BINARY_CHECKS ALTRET (ERROR) ;
      539    13385    3         BINARY_B(BIN#) = BINARY_CARD_;
      540    13386    3         BIN# = BIN# + 1 ;
      541    13387    3         CALL TOU$CHECKSUM (OBJECT.DECK_CHECKSUM, ADDR(BINARY_CARD.CHECKSUM), 1,
      542    13388    3                 OBJECT.DECK_CHECKSUM);
      543    13389    3         CALL TOU$DEBLOCKER ALTRET (ERROR) ;
      544    13390    3      END /* WHILE */ ;
      545    13391
      546    13392    2      IF BIN# > 0
      547    13393    2      THEN RETURN ;
      548    13394    3      ELSE DO ;
      549    13395    3              CALL GC_ERR_MSG (%E$GGBC_NO_BINS) ;
      550    13396    3   ERROR:
      551    13397    3              ALTRETURN ;
      552    13398    3           END /* ELSE */ ;
      553    13399
      554    13400    2   END GC_GET_BINARY_CARDS ;
      555    13401        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:28   
      556    13402        /*I*  NAME:        GC_GET_BCD_CARDS
      557    13403              AUTHORS:     David M. Augustine
      558    13404                           Scott S. Sheppard
      559    13405              PURPOSE:     Gets BCD cards
      560    13406              INTERFACE:   GC_ERR_MSG
      561    13407                           TOU$DEBLOCKER
      562    13408                           TOU$CHECKSUM
      563    13409              INPUT:       RECORD.SIZE
      564    13410                           BCD_CARD
      565    13411                           BCD#
      566    13412              OUTPUT:      BCD_B
      567    13413                           BCD#
      568    13414                           OBJECT.DECK_CHECKSUM
      569    13415              DESCRIPTION: This procedure gets all of the  BCD   cards for
      570    13416                           the deck to be added from the IFAD input source
      571    13417                           The BCD cards are stored in the array  vectored
      572    13418                           by the DUP.BCD_V vector.
      573    13419                           BCD_B is an array template for the buffer.
      574    13420        */
      575    13421        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:29   
      576    13422    1   GC_GET_BCD_CARDS: PROC ALTRET ;
      577    13423
      578    13424        /* Code */
      579    13425
      580    13426    2      BCD# = 0 ;
      581    13427    2      CALL GC_CONVERT_BCD_CARD ;
      582    13428    3      DO WHILE (RECORD.SIZE = 14  &  BCD_CARD.BCD.TYPE ~= 'DKEND') ;
      583    13429    3         CALL GC_SET_ID_BLOCK ;
      584    13430    3         CALL GC_PATCH_CHECKS ALTRET (ERROR) ;
      585    13431    3         CALL TOU$CHECKSUM (0, ADDR (BCD_CARD.BCD_), 20, BCD_CARD.CHECKSUM) ;
      586    13432    3         BCD_B(BCD#) = BCD_CARD_ ;
      587    13433    3         BCD# = BCD# + 1 ;
      588    13434    3         CALL TOU$CHECKSUM (OBJECT.DECK_CHECKSUM, ADDR (BCD_CARD.CHECKSUM), 1,
      589    13435    3                 OBJECT.DECK_CHECKSUM) ;
      590    13436    3         CALL TOU$DEBLOCKER ALTRET (ERROR) ;
      591    13437    3         CALL GC_CONVERT_BCD_CARD ;
      592    13438    3      END /* WHILE */ ;
      593    13439
      594    13440    2      IF BCD_CARD.BCD.TYPE = 'DKEND'
      595    13441    3      THEN DO ;
      596    13442    3              CALL GC_SET_ID_BLOCK ;
      597    13443    3              CALL GC_DKEND_CHECKS ALTRET (ERROR) ;
      598    13444    3              CALL TOU$CHECKSUM (0, ADDR (BCD_CARD.BCD_), 20, BCD_CARD.CHECKSUM) ;
      599    13445    3              BCD_B(BCD#) = BCD_CARD_ ;
      600    13446    3              BCD# = BCD# + 1 ;
      601    13447    3              RETURN ;
      602    13448    3           END /* THEN */ ;
      603    13449    3      ELSE DO ;
      604    13450    3              CALL GC_ERR_MSG (%E$GGBC_NO_DKEND) ;
      605    13451    3   ERROR:
      606    13452    3              ALTRETURN ;
      607    13453    3           END /* ELSE */ ;
      608    13454
      609    13455    2   END GC_GET_BCD_CARDS ;
      610    13456        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:30   
      611    13457        /*I*  NAME:        GC_GET_PATCH_CARDS
      612    13458              AUTHOR:      Scott S. Sheppard
      613    13459              PURPOSE:     Gets PATCH cards
      614    13460              INTERFACE:   GC_FORM_HEX_CARD
      615    13461                           GC_FORM_OCTAL_CARD
      616    13462                           GC_STORE_PATCH_CARD
      617    13463                           TOU$DU_USER_WRITE
      618    13464              INPUT:       PATCH$ - pointer to the PCB for the PATCH input
      619    13465                           FILE_EOF
      620    13466              OUTPUT:      FILE_EOF
      621    13467                           DUP.MSG_CODE
      622    13468              DESCRIPTION: This procedure gets all of the PATCH  cards
      623    13469                           to be added to the object deck.
      624    13470        */
      625    13471        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:31   
      626    13472    1   GC_GET_PATCH_CARDS: PROC ALTRET ;
      627    13473
      628    13474    2      DCL PATCH$                     PTR ALIGNED ;
      629    13475    2      DCL B$TCB$                     PTR SYMREF ;
      630    13476    2      DCL PATCH_ROOT_NODE            SBIN SYMREF ;
      631    13477    2      DCL 1 PATCH_CARD CALIGNED,
      632    13478    2            2 BCD,
      633    13479    2              3 ADDRESS              CHAR (6) UNAL,
      634    13480    2              3 CS_RW                CHAR (1) UNAL,
      635    13481    2              3 TYPE                 CHAR (8) UNAL,
      636    13482    2              3 OCTAL_               CHAR (51) UNAL,
      637    13483    2              3 HEX_ REDEF OCTAL_,
      638    13484    2                4 INSTR1             CHAR (4) UNAL,
      639    13485    2                4 INSTR2             CHAR (4) UNAL,
      640    13486    2                4 *                  CHAR (43) UNAL,
      641    13487    2              3 REVLBL,
      642    13488    2                4 REVISION           CHAR (6) UNAL,
      643    13489    2                4 LABEL              CHAR (4) UNAL,
      644    13490    2              3 REVLBL_ REDEF REVLBL CHAR (10) UNAL,
      645    13491    2              3 *                    CHAR (4) UNAL,
      646    13492    2            2 BCD_ REDEF BCD CHAR (80) UNAL ;
      647    13493    2      DCL ZEROES                     CHAR (6) CONSTANT CALIGNED INIT ('000000') ;
      648    13494           %PARSE$OUT (STCLASS = BASED) ;
      649    13539           %B$TCB ;
      650    13542           %B$ALT ;
      651    13550           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:32   
      652    13551        /* Code */
      653    13552
      654    13553    2      CALL XUR$SETDCBS (DCBNUM (M$IFAD)) ;
      655    13554    3      DO WHILE (FILE_EOF = 0) ;
      656    13555    3         CALL XUR$GETCMD (PATCH_ROOT_NODE, PATCH$) WHENRETURN
      657    13556    4              DO ;
      658    13557    5                 DO CASE (PATCH$ -> OUT$BLK.CODE) ;
      659    13558    5                    CASE (%HEX_CARD) ;
      660    13559    5                       CALL GC_FORM_HEX_CARD ;
      661    13560    5                       CALL GC_STORE_PATCH_CARD ;
      662    13561    5                       CALL GC_PATCH_CHECKS ALTRET (ERROR) ;
      663    13562    5                    CASE (%OCTAL_CARD) ;
      664    13563    5                       CALL GC_FORM_OCTAL_CARD ;
      665    13564    5                       CALL GC_STORE_PATCH_CARD ;
      666    13565    5                       CALL GC_PATCH_CHECKS ALTRET (ERROR) ;
      667    13566    5                    CASE (%NULL, %END) ;
      668    13567    5                       FILE_EOF = 1 ;
      669    13568    5                 END /* CASE */ ;
      670    13569    4              END /* WHENRETURN */ ;
      671    13570           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:33   
      672    13571    3         WHENALTRETURN
      673    13572    4              DO ;
      674    13573    4                 IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.ERR# = %E$EOF
      675    13574    4                 THEN FILE_EOF = 1 ;
      676    13575    5                 ELSE DO ;
      677    13576    5                         DUP.MSG_CODE = %E$GGPC_BAD_INPUT ;
      678    13577    5                         CALL TOU$DU_USER_WRITE ;
      679    13578    5                         CALL XUR$ECHOLAST (DCBNUM (M$DO)) ;
      680    13579    5                         CALL XUR$ERRPTR (, DCBNUM (M$DO)) ;
      681    13580    5                         CALL XUR$ERRMSG (PATCH$) ;
      682    13581    5   ERROR:
      683    13582    5                         CALL XUR$SETDCBS (DCBNUM (M$SI)) ;
      684    13583    5                         ALTRETURN ;
      685    13584    5                      END /* ELSE */ ;
      686    13585    4              END /* WHENALTRETURN */ ;
      687    13586    3      END /* WHILE */ ;
      688    13587    2      CALL XUR$SETDCBS (DCBNUM (M$SI)) ;
      689    13588    2      RETURN ;
      690    13589
      691    13590        /* END GC_GET_PATCH_CARDS */
      692    13591        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:34   
      693    13592    2   GC_FORM_HEX_CARD: PROC ;
      694    13593
      695    13594    3      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      696    13595    3      DCL OUTBLK$                    PTR ALIGNED ;
      697    13596           %PARSE$OUT (STCLASS = BASED) ;
      698    13641           %PARSE$SYM (STCLASS = "BASED (OUTBLK$)") ;
      699    13679
      700    13680    3      PATCH_CARD.BCD_ = ' ' ;
      701    13681    3      PATCH_CARD.BCD.TYPE = 'HEX' ;
      702    13682    4      DO OUTBLK# = 0 TO PATCH$ -> OUT$BLK.NSUBLKS - 1 ;
      703    13683    4         OUTBLK$ = PATCH$ -> OUT$BLK.SUBLK$(OUTBLK#) ;
      704    13684    5         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;
      705    13685    5            CASE (%ADDRESS) ;
      706    13686    5               CALL CONCAT (PATCH_CARD.BCD.ADDRESS,
      707    13687    5                       SUBSTR (ZEROES, 0, 4 - OUT$SYM.COUNT),
      708    13688    5                       SUBSTR (OUT$SYM.TEXT, 0, OUT$SYM.COUNT)) ;
      709    13689    5            CASE (%CONTROL_STORE) ;
      710    13690    5               PATCH_CARD.BCD.CS_RW = 'C' ;
      711    13691    5            CASE (%READ_WRITE) ;
      712    13692    5               PATCH_CARD.BCD.CS_RW = 'R' ;
      713    13693    5            CASE (%INSTR1) ;
      714    13694    5               PATCH_CARD.BCD.HEX_.INSTR1 = OUT$SYM.TEXT ;
      715    13695    5            CASE (%INSTR2) ;
      716    13696    5               PATCH_CARD.BCD.HEX_.INSTR2 = OUT$SYM.TEXT ;
      717    13697    5            CASE (%INSTRB) ;
      718    13698    5               PATCH_CARD.BCD.OCTAL_ = OUT$SYM.TEXT ; /* entire HEX */
      719    13699    5            CASE (%REV) ;
      720    13700    5               PATCH_CARD.BCD.REVLBL.REVISION = OUT$SYM.TEXT ;
      721    13701    5            CASE (%LABEL) ;
      722    13702    5               PATCH_CARD.BCD.REVLBL.LABEL = OUT$SYM.TEXT ;
      723    13703    5            CASE (%REVLBL) ;
      724    13704    5               PATCH_CARD.BCD.REVLBL_ = OUT$SYM.TEXT ;
      725    13705    5         END /* CASE */ ;
      726    13706    4      END /* DO */ ;
      727    13707    3      RETURN ;
      728    13708    3   END GC_FORM_HEX_CARD ;
      729    13709        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:35   
      730    13710    2   GC_FORM_OCTAL_CARD: PROC ;
      731    13711
      732    13712    3      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      733    13713    3      DCL OUTBLK$                    PTR ALIGNED ;
      734    13714           %PARSE$OUT (STCLASS = BASED) ;
      735    13759           %PARSE$SYM (STCLASS = "BASED (OUTBLK$)") ;
      736    13797
      737    13798        /* Code */
      738    13799
      739    13800    3      PATCH_CARD.BCD_ = ' ' ;
      740    13801    3      PATCH_CARD.BCD.TYPE = 'OCTAL' ;
      741    13802    4      DO OUTBLK# = 0 TO PATCH$ -> OUT$BLK.NSUBLKS - 1 ;
      742    13803    4         OUTBLK$ = PATCH$ -> OUT$BLK.SUBLK$(OUTBLK#) ;
      743    13804    5         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;
      744    13805    5            CASE (%ADDRESS) ;
      745    13806    5               CALL CONCAT (PATCH_CARD.BCD.ADDRESS,
      746    13807    5                       SUBSTR (ZEROES, 0, 6 - OUT$SYM.COUNT),
      747    13808    5                       SUBSTR (OUT$SYM.TEXT, 0, OUT$SYM.COUNT)) ;
      748    13809    5            CASE (%FIELD) ;
      749    13810    5               PATCH_CARD.BCD.OCTAL_ = OUT$SYM.TEXT ;
      750    13811    5            CASE (%REV) ;
      751    13812    5               PATCH_CARD.BCD.REVLBL.REVISION = OUT$SYM.TEXT ;
      752    13813    5            CASE (%LABEL) ;
      753    13814    5               PATCH_CARD.BCD.REVLBL.LABEL = OUT$SYM.TEXT ;
      754    13815    5            CASE (%REVLBL) ;
      755    13816    5               PATCH_CARD.BCD.REVLBL_ = OUT$SYM.TEXT ;
      756    13817    5         END /* CASE */ ;
      757    13818    4      END /* DO */ ;
      758    13819    3      RETURN ;
      759    13820
      760    13821    3   END GC_FORM_OCTAL_CARD ;
      761    13822        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:36   
      762    13823    2   GC_STORE_PATCH_CARD: PROC ;
      763    13824
      764    13825        /* Code */
      765    13826
      766    13827    3      BCD_CARD.BCD_ = PATCH_CARD.BCD_ ;
      767    13828    3      CALL TOU$CHECKSUM (0, ADDR (BCD_CARD), 20, BCD_CARD.CHECKSUM) ;
      768    13829    3      CUR# = BCD# ;
      769    13830    3      BCD_B(BCD#) = BCD_CARD_ ;
      770    13831    3      BCD# = BCD# + 1 ;
      771    13832    3      RETURN ;
      772    13833
      773    13834    3   END GC_STORE_PATCH_CARD ;
      774    13835    2   END GC_GET_PATCH_CARDS ;
      775    13836        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:37   
      776    13837    1   GC_CONVERT_BCD_CARD: PROC;
      777    13838
      778    13839        /* Code */
      779    13840
      780    13841    3      DO CUR# = 0 TO 79;
      781    13842    3         BCD_ARRAY.DATA(CUR#) = BCD_ASCII(RECORD.BCD.DATA(CUR#));
      782    13843    3      END /* DO */ ;
      783    13844    2      BLOCK_SEQ = BCD_CARD.BCD.SEQ ;
      784    13845    2      RETURN;
      785    13846
      786    13847    2   END GC_CONVERT_BCD_CARD;
      787    13848        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:38   
      788    13849    1   GC_OBJECT_CHECKS: PROC ALTRET ;
      789    13850
      790    13851        /* Code */
      791    13852
      792    13853    2      IF OBJECT.BCD.CONTROL = '$'
      793    13854    2      THEN IF OBJECT.BCD.SEQ = '0000'
      794    13855    3         THEN DO ;
      795    13856    4                 DO SELECT (OBJECT.BCD.ASSEMBLER) ;
      796    13857    4                    SELECT ('B', 'G', 'L', 'M', 'P') ;
      797    13858    4                    PREFACE_FOUND = %FALSE ;
      798    13859    4                    ID_BLOCK_SET = %FALSE ;
      799    13860    4                    SEQ = 0;
      800    13861    4                    SELECT (ELSE) ;
      801    13862    4                 CALL GC_ERR_MSG (%E$GOC_OBJ_ASSEMBLER) ;
      802    13863    4                 ALTRETURN ;
      803    13864    4                 END /* SELECT */ ;
      804    13865    3              END /* THEN */ ;
      805    13866    3         ELSE DO ;
      806    13867    3                 CALL GC_ERR_MSG (%E$GOC_OBJ_SEQ) ;
      807    13868    3                 ALTRETURN ;
      808    13869    3              END /* ELSE */ ;
      809    13870    3      ELSE DO ;
      810    13871    3              CALL GC_ERR_MSG (%E$GOC_OBJ_CONTROL) ;
      811    13872    3              ALTRETURN ;
      812    13873    3           END /* ELSE */ ;
      813    13874    2      RETURN;
      814    13875
      815    13876    2   END GC_OBJECT_CHECKS;
      816    13877        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:39   
      817    13878    1   GC_CONVERT_BINARY_CARD: PROC ALTRET ;
      818    13879
      819    13880    2      DCL FOUND      BIT (1) CALIGNED;
      820    13881    2      DCL TABLE_INX  UBIN WORD ALIGNED ;
      821    13882
      822    13883        /* Code */
      823    13884
      824    13885    2      BINARY_CARD_.DATA = RECORD.BINARY.DATA.BINARY;
      825    13886
      826    13887           /* Convert Label Field */
      827    13888    3      DO CUR# = 0 TO 3 ;
      828    13889    3         TABLE_INX = 0 ;
      829    13890    3         FOUND = %FALSE ;
      830    13891    4         DO WHILE (~FOUND & TABLE_INX < 64) ;
      831    13892    4            IF BINARY_TABLE(TABLE_INX) = RECORD.BINARY.DATA.LBL_SEQ(CUR#)
      832    13893    4            THEN FOUND = %TRUE ;
      833    13894    4            ELSE TABLE_INX = TABLE_INX + 1 ;
      834    13895    4         END /* WHILE */ ;
      835    13896    3         IF FOUND
      836    13897    3         THEN BINARY_CARD.LBL_SEQ(CUR#) = BCD_ASCII(TABLE_INX) ;
      837    13898    4         ELSE DO ;
      838    13899    4                 CALL GC_ERR_MSG (%E$GCBC_BIN_LBL_SEQ) ;
      839    13900    4                 ALTRETURN ;
      840    13901    4              END /* ELSE */ ;
      841    13902    3      END /* DO */ ;
      842    13903           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:40   
      843    13904           /* Convert Sequence Field */
      844    13905    3      DO CUR# = 4 TO 7 ;
      845    13906    3         TABLE_INX = 0 ;
      846    13907    3         FOUND = %FALSE ;
      847    13908    4         DO WHILE (~FOUND & TABLE_INX < 10) ;
      848    13909    4            IF BINARY_TABLE(TABLE_INX) = RECORD.BINARY.DATA.LBL_SEQ(CUR#)
      849    13910    4            THEN FOUND = %TRUE ;
      850    13911    4            ELSE TABLE_INX = TABLE_INX + 1 ;
      851    13912    4         END /* WHILE */ ;
      852    13913    3         IF FOUND
      853    13914    3         THEN BINARY_CARD.LBL_SEQ(CUR#) = BCD_ASCII(TABLE_INX) ;
      854    13915    4         ELSE DO ;
      855    13916    4                 CALL GC_ERR_MSG (%E$GCBC_BIN_SEQ) ;
      856    13917    4                 ALTRETURN ;
      857    13918    4              END /* ELSE */ ;
      858    13919    3      END /* DO */ ;
      859    13920
      860    13921    2      BLOCK_SEQ = BINARY_CARD.LABEL_.SEQ ;
      861    13922    2      RETURN;
      862    13923
      863    13924    2   END GC_CONVERT_BINARY_CARD;
      864    13925        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:41   
      865    13926    1   GC_BINARY_CHECKS: PROC ALTRET ;
      866    13927
      867    13928        /* Code */
      868    13929
      869    13930    2      IF BINARY_CARD.LABEL_.LBL = OBJECT.BCD.LBL
      870    13931    3      THEN DO ;
      871    13932    3              SEQ = SEQ + 1 ;
      872    13933    3              CALL CHARBIN (CARD_SEQ, BINARY_CARD.LABEL_.SEQ);
      873    13934    3              IF CARD_SEQ = SEQ
      874    13935    4              THEN DO ;
      875    13936    4                      CALL TOU$CHECK_CARD_CHECKSUM (RECORD.BINARY.DATA.CS.WD1,
      876    13937    4                              ADDR (RECORD.BINARY.DATA.CS.DATA),
      877    13938    4                              22,
      878    13939    4                              RECORD.BINARY.DATA.CS.CHECKSUM) ALTRET (ERROR) ;
      879    13940    4                      IF BINARY_CARD.WD1.TYPE = 4
      880    13941    4                      THEN CALL GC_PREFACE_CHECKS ALTRET (ERROR) ;
      881    13942    4                      ELSE IF BINARY_CARD.WD1.TYPE = 2
      882    13943    4                         THEN /* Do Nothing */ ;
      883    13944    5                         ELSE DO ;
      884    13945    5                                 CALL GC_ERR_MSG (%E$GBC_BIN_TYPE) ;
      885    13946    5                                 ALTRETURN ;
      886    13947    5                              END /* ELSE */ ;
      887    13948    4                   END /* THEN */ ;
      888    13949    4              ELSE DO ;
      889    13950    4                      CALL GC_ERR_MSG (%E$GBC_BIN_SEQ) ;
      890    13951    4                      ALTRETURN ;
      891    13952    4                   END /* ELSE */ ;
      892    13953    3           END /* THEN */ ;
      893    13954    3      ELSE DO ;
      894    13955    3              CALL GC_ERR_MSG (%E$GBC_BIN_LBL) ;
      895    13956    3              ALTRETURN ;
      896    13957    3           END /* ELSE */ ;
      897    13958           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:42   
      898    13959    2      IF BIN# < %MAX_BINARY
      899    13960    2      THEN RETURN ;
      900    13961    3      ELSE DO ;
      901    13962    3              CALL GC_ERR_MSG (%E$GBC_TOO_MANY_BCARDS) ;
      902    13963    3   ERROR:
      903    13964    3              ALTRETURN ;
      904    13965    3           END /* ELSE */ ;
      905    13966
      906    13967        /* END GC_BINARY_CHECKS */
      907    13968        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:43   
      908    13969    2   GC_PREFACE_CHECKS: PROC ALTRET ;
      909    13970
      910    13971        /* Code */
      911    13972
      912    13973    3      IF PREFACE_FOUND
      913    13974    3      THEN /* Do Nothing */ ;
      914    13975    3      ELSE IF PREFACE.WD1.WOREAD_COUNT > 2  &  PREFACE.ENTRY_.TYPE(0) = 0
      915    13976    4         THEN DO ;
      916    13977    4                 PREFACE_FOUND = %TRUE ;
      917    13978    4                 IF OBJECT.BCD.LOAD_TYPE = 'R'
      918    13979    4                 THEN OBJECT.LOAD_SIZE = PREFACE.WD1.SIZE + 72;
      919    13980    4                 ELSE IF OBJECT.BCD.ASSEMBLER = 'M'
      920    13981    4                    THEN OBJECT.LOAD_SIZE = PREFACE.WD1.SIZE + 10;
      921    13982    4                    ELSE OBJECT.LOAD_SIZE = PREFACE.WD1.SIZE;
      922    13983    4              END /* THEN */ ;
      923    13984    4         ELSE DO ;
      924    13985    4                 CALL GC_ERR_MSG (%E$GPC_BIN_NO_PRIM) ;
      925    13986    4                 ALTRETURN ;
      926    13987    4              END /* ELSE */ ;
      927    13988    3      RETURN;
      928    13989
      929    13990    3   END GC_PREFACE_CHECKS;
      930    13991    2   END GC_BINARY_CHECKS;
      931    13992        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:44   
      932    13993    1   GC_SET_ID_BLOCK: PROC;
      933    13994
      934    13995        /* Code */
      935    13996
      936    13997    2      IF OBJECT.BCD.LIBRARY = 'HMPCJ1'
      937    13998    2      THEN IF ID_BLOCK_SET
      938    13999    2         THEN /* Do Nothing */ ;
      939    14000    2         ELSE CALL GC_SET_FROM_BINARY_CARDS ;
      940    14001    2      ELSE IF BCD_CARD.BCD.TYPE = 'DKEND'
      941    14002    2         THEN CALL GC_SET_FROM_DKEND ;
      942    14003    2         ELSE /* Do Nothing */ ;
      943    14004    2      RETURN ;
      944    14005
      945    14006        /* END GC_SET_ID_BLOCK */
      946    14007        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:45   
      947    14008    2   GC_SET_FROM_BINARY_CARDS: PROC ;
      948    14009
      949    14010    3      DCL ID_LOC UBIN HALF ALIGNED;
      950    14011    3      DCL 1 ID_RECORDS STATIC ALIGNED,
      951    14012    3            2 FIRST  CHAR (80) ALIGNED,
      952    14013    3            2 SECOND CHAR (80) ALIGNED,
      953    14014    3            2 *      UBIN WORD ALIGNED INIT (0) ;
      954    14015    3      DCL 1 ID_RECORDS_ (0:40)     REDEF ID_RECORDS ALIGNED,
      955    14016    3            2 *       UBIN WORD  ALIGNED;
      956    14017    3      DCL 1 ID_RECORD (0:40)     ALIGNED,
      957    14018    3            2 *       UBIN WORD  ALIGNED;
      958    14019    3      DCL ID_DATA_ (0:245) REDEF ID_RECORD UBIN (6) UNAL;
      959    14020    3      DCL 1 LOAD ALIGNED,
      960    14021    3            2 TYPE          UBIN (3) UNAL,
      961    14022    3            2 SYMBOL_OFFSET UBIN (6) UNAL,
      962    14023    3            2 *             UBIN (3) UNAL,
      963    14024    3            2 SIZE          UBIN (6) UNAL,
      964    14025    3            2 ADDRESS       UBIN HALF UNAL;
      965    14026    3      DCL LOAD_INX   UBIN HALF ALIGNED;
      966    14027    3      DCL L          UBIN WORD ALIGNED ;
      967    14028           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:46   
      968    14029        /* Code */
      969    14030
      970    14031    3      ID_RECORD = '0'B;
      971    14032    3      LOAD_INX = 0;
      972    14033    3      LOAD = '0'B;
      973    14034    3      BINARY_CARD = BINARY_B(0) ;
      974    14035    3      ID_LOC = PREFACE.WD1.SIZE - 10;
      975    14036    3      BINARY_CARD = BINARY_B(BIN# - 2);
      976    14037
      977    14038    3      CALL CONCAT (ID_RECORDS.FIRST,
      978    14039    3              BINARY_CARD.WRD_CHAR,
      979    14040    3              BINARY_CARD.DATA_CHAR);
      980    14041
      981    14042    3      BINARY_CARD = BINARY_B(BIN# - 1);
      982    14043
      983    14044    3      CALL CONCAT (ID_RECORDS.SECOND,
      984    14045    3              BINARY_CARD.WRD_CHAR,
      985    14046    3              BINARY_CARD.DATA_CHAR);
      986    14047
      987    14048    4      DO WHILE (LOAD.ADDRESS + LOAD.SIZE < ID_LOC + 1);
      988    14049    4         LOAD_INX = LOAD_INX + LOAD.SIZE + 1;
      989    14050    4         LOAD = ID_RECORDS_ (LOAD_INX - 1);
      990    14051    4      END /* WHILE */ ;
      991    14052           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:47   
      992    14053    4      DO WHILE (LOAD) ;
      993    14054    4         IF LOAD.ADDRESS < ID_LOC
      994    14055    5         THEN DO ;
      995    14056    5                 LOAD_INX = LOAD_INX + ID_LOC - LOAD.ADDRESS;
      996    14057    5                 LOAD.SIZE = LOAD.SIZE - ID_LOC + LOAD.ADDRESS;
      997    14058    5                 CUR# = 0;
      998    14059    5              END /* THEN */ ;
      999    14060    4         ELSE CUR# = LOAD.ADDRESS - ID_LOC;
     1000    14061    5         DO L = 0 TO LOAD.SIZE - 1;
     1001    14062    5            ID_RECORD(CUR# + L) = ID_RECORDS_(LOAD_INX + L);
     1002    14063    5         END /* DO */ ;
     1003    14064    4         LOAD_INX = LOAD_INX + LOAD.SIZE + 1;
     1004    14065    4         IF (ID_RECORDS_ (LOAD_INX - 1) = '0'B & LOAD_INX < 40)
     1005    14066    4         THEN LOAD_INX = LOAD_INX + 1;
     1006    14067    4         ELSE /* Don't advance */ ;
     1007    14068    4         LOAD = ID_RECORDS_ (LOAD_INX - 1);
     1008    14069    4      END /* WHILE */ ;
     1009    14070
     1010    14071    4      DO CUR# = 0 TO 17;
     1011    14072    4         ID_(CUR#) = BCD_ASCII(ID_DATA_(CUR#));
     1012    14073    4      END /* DO */ ;
     1013    14074
     1014    14075    3      ID_BLOCK_SET = %TRUE ;
     1015    14076    3      RETURN;
     1016    14077
     1017    14078    3   END GC_SET_FROM_BINARY_CARDS ;
     1018    14079        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:48   
     1019    14080    2   GC_SET_FROM_DKEND: PROC ;
     1020    14081
     1021    14082        /* Code */
     1022    14083
     1023    14084    3      DKEND.BCD_ = BCD_CARD.BCD_ ;
     1024    14085    3      ID.REVISION = DKEND.BCD.REVISION ;
     1025    14086    3      RETURN ;
     1026    14087
     1027    14088    3   END GC_SET_FROM_DKEND ;
     1028    14089    2   END GC_SET_ID_BLOCK;
     1029    14090        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:49   
     1030    14091    1   GC_PATCH_CHECKS: PROC ALTRET ;
     1031    14092
     1032    14093        /* Code */
     1033    14094
     1034    14095    3      DO SELECT (BCD_CARD.BCD.TYPE) ;
     1035    14096    3         SELECT ('OCTAL') ;
     1036    14097    3         CALL GC_OCTAL_CHECKS ALTRET (ERROR) ;
     1037    14098    3         SELECT ('HEX') ;
     1038    14099    3         CALL GC_HEX_CHECKS ALTRET (ERROR) ;
     1039    14100    3         SELECT ('OBJECT') ;
     1040    14101    3         CALL GC_ERR_MSG (%E$GPC_NO_DKEND) ;
     1041    14102    3         ALTRETURN ;
     1042    14103    3         SELECT (ELSE) ;
     1043    14104    3      CALL GC_ERR_MSG (%E$GPC_BCD_TYPE) ;
     1044    14105    3      ALTRETURN ;
     1045    14106    3      END /* SELECT */ ;
     1046    14107
     1047    14108    2      IF BCD# < %MAX_PATCHES
     1048    14109    2      THEN RETURN ;
     1049    14110    3      ELSE DO ;
     1050    14111    3              CALL GC_ERR_MSG (%E$GPC_TOO_MANY_PCARDS) ;
     1051    14112    3   ERROR:
     1052    14113    3              ALTRETURN ;
     1053    14114    3           END /* ELSE */ ;
     1054    14115
     1055    14116    2   /* END GC_PATCH_CHECKS */ ;
     1056    14117        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:50   
     1057    14118    2   GC_OCTAL_CHECKS: PROC ALTRET ;
     1058    14119
     1059    14120    3      DCL I                          UBIN WORD ALIGNED ;
     1060    14121    3      DCL 1 OCTAL_CARD CALIGNED,
     1061    14122    3            2 BCD,
     1062    14123    3              3 ADDRESS   CHAR (6) UNAL,
     1063    14124    3              3 ADDRESS_  (0:5) REDEF ADDRESS CHAR (1) UNAL,
     1064    14125    3              3 *         CHAR (1) UNAL,
     1065    14126    3              3 TYPE      CHAR (8) UNAL,
     1066    14127    3              3 FIELD     CHAR (51) UNAL,
     1067    14128    3              3 FIELD_    (0:50) REDEF FIELD CHAR (1) UNAL,
     1068    14129    3              3 REVISION  CHAR (6) UNAL,
     1069    14130    3              3 LABEL     CHAR (4) UNAL,
     1070    14131    3              3 *         CHAR (4) UNAL,
     1071    14132    3            2 BCD_ REDEF BCD CHAR (80) UNAL ;
     1072    14133    3      DCL CUR#                       UBIN WORD ALIGNED ;
     1073    14134    3      DCL POS#                       UBIN WORD ALIGNED ;
     1074    14135    3      DCL FIELD_LGTH                 UBIN WORD ALIGNED ;
     1075    14136           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:51   
     1076    14137        /* Code */
     1077    14138
     1078    14139    3      OCTAL_CARD.BCD_ = BCD_CARD.BCD_ ;
     1079    14140
     1080    14141    4      DO I = 0 TO 5 ;
     1081    14142    4         IF OCTAL_CARD.BCD.ADDRESS_(I) < '0' | OCTAL_CARD.BCD.ADDRESS_(I) > '7'
     1082    14143    5         THEN DO ;
     1083    14144    5                 CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_OCTAL) ;
     1084    14145    5                 ALTRETURN ;
     1085    14146    5              END /* THEN */ ;
     1086    14147    4         ELSE /* Address contains a legal octal digit in position I */ ;
     1087    14148    4      END /* DO */ ;
     1088    14149
     1089    14150    3      CUR# = 0 ;
     1090    14151    4      DO I = 0 TO 5 ;
     1091    14152    4         CALL CHARBIN (POS#, OCTAL_CARD.BCD.ADDRESS_(I)) ;
     1092    14153    4         CUR# = (CUR# * 8) + POS# ;
     1093    14154    4      END /* DO */ ;
     1094    14155    3      IF OBJECT.LOAD_SIZE < CUR#
     1095    14156    3      THEN OBJECT.LOAD_SIZE = CUR# ;
     1096    14157    3      ELSE /* Patch is for an internal location. */ ;
     1097    14158           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:52   
     1098    14159           /* Bound card value field and validate */
     1099    14160    3      CUR# = 0 ;
     1100    14161    3      CALL INDEX (FIELD_LGTH, ' ', OCTAL_CARD.BCD.FIELD, 0) ;
     1101    14162    3      CALL INDEX (POS#, ',', OCTAL_CARD.BCD.FIELD, CUR#) ;
     1102    14163    4      DO WHILE (POS# < FIELD_LGTH) ;
     1103    14164    4         CALL GC_VERIFY_VALUE (CUR#, POS#-1) ALTRET (ERROR) ;
     1104    14165    4         CUR# = POS# + 1 ;
     1105    14166    4         CALL INDEX (POS#, ',', OCTAL_CARD.BCD.FIELD, CUR#) ;
     1106    14167    4      END /* WHILE */ ;
     1107    14168    3      CALL GC_VERIFY_VALUE (CUR#, FIELD_LGTH-1) ALTRET (ERROR) ;
     1108    14169
     1109    14170    3      IF OBJECT.BCD.LIBRARY = 'HTND'
     1110    14171    3      THEN IF OCTAL_CARD.BCD.REVISION = OBJECT.BCD.DATE
     1111    14172    3         THEN /* Title Date and Patch Card value match */ ;
     1112    14173    4         ELSE DO ;
     1113    14174    4                 CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_DATE) ;
     1114    14175    4                 ALTRETURN ;
     1115    14176    4              END /* ELSE */ ;
     1116    14177    3      ELSE IF OCTAL_CARD.BCD.REVISION = ID.REVISION
     1117    14178    3         THEN /* REV.xx and Patch Card value match */ ;
     1118    14179    4         ELSE DO ;
     1119    14180    4                 CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_REV) ;
     1120    14181    4                 ALTRETURN ;
     1121    14182    4              END /* ELSE */ ;
     1122    14183
     1123    14184    3      IF OCTAL_CARD.BCD.LABEL = OBJECT.BCD.LBL
     1124    14185    3      THEN /* Edit Name of Deck and Patch Card match. */ ;
     1125    14186    4      ELSE DO ;
     1126    14187    4              CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_LBL) ;
     1127    14188    4   ERROR:
     1128    14189    4              ALTRETURN ;
     1129    14190    4           END /* ELSE */ ;
     1130    14191    3      RETURN ;
     1131    14192
     1132    14193        /* END GC_OCTAL_CHECKS */
     1133    14194        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:53   
     1134    14195    3   GC_VERIFY_VALUE: PROC (START#, STOP#) ALTRET ;
     1135    14196
     1136    14197    4      DCL START#      UBIN WORD ALIGNED ;
     1137    14198    4      DCL STOP#       UBIN WORD ALIGNED ;
     1138    14199    4      DCL VAL_INX     UBIN WORD ALIGNED ;
     1139    14200
     1140    14201    4      IF STOP# - START# < 14
     1141    14202    4      THEN IF START# <= STOP#
     1142    14203    5         THEN DO ;
     1143    14204    5                 IF OCTAL_CARD.BCD.FIELD_(START#) = 'R'
     1144    14205    5                 THEN START# = START# + 1 ;
     1145    14206    5                 IF OCTAL_CARD.BCD.FIELD_(STOP#) = 'R'
     1146    14207    5                 THEN STOP# = STOP# - 1 ;
     1147    14208    6                 DO VAL_INX = START# TO STOP# ;
     1148    14209    6                    IF OCTAL_CARD.BCD.FIELD_(VAL_INX) < '0' |
     1149    14210    6                            OCTAL_CARD.BCD.FIELD_(VAL_INX) > '7'
     1150    14211    7                    THEN DO ;
     1151    14212    7                            CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_OCTAL) ;
     1152    14213    7                            ALTRETURN ;
     1153    14214    7                         END /* ELSE */ ;
     1154    14215    6                    ELSE /* The Patch Card Value has no errors. */ ;
     1155    14216    6                 END /* DO */ ;
     1156    14217    5              END /* THEN */ ;
     1157    14218    5         ELSE DO ;
     1158    14219    5                 CALL GC_ERR_MSG (%E$GVV_PTCH_NULL_VAL) ;
     1159    14220    5                 ALTRETURN ;
     1160    14221    5              END /* ELSE */ ;
     1161    14222    5      ELSE DO ;
     1162    14223    5              CALL GC_ERR_MSG (%E$GVV_PTCH_G12) ;
     1163    14224    5              ALTRETURN ;
     1164    14225    5           END /* ELSE */ ;
     1165    14226    4      RETURN;
     1166    14227
     1167    14228    4   END GC_VERIFY_VALUE;
     1168    14229    3   END GC_OCTAL_CHECKS ;
     1169    14230        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:54   
     1170    14231    2   GC_HEX_CHECKS: PROC ALTRET ;
     1171    14232
     1172    14233    3      DCL 1 HEX_CARD CALIGNED,
     1173    14234    3            2 BCD,
     1174    14235    3              3 ADDRESS              CHAR (4) UNAL,
     1175    14236    3              3 *                    CHAR (2) UNAL,
     1176    14237    3              3 HEX_TYPE             CHAR (1) UNAL,
     1177    14238    3              3 TYPE                 CHAR (8) UNAL,
     1178    14239    3              3 INSTR1               CHAR (4) UNAL,
     1179    14240    3              3 INSTR2               CHAR (4) UNAL,
     1180    14241    3              3 ORIG1                CHAR (4) UNAL,
     1181    14242    3              3 ORIG2                CHAR (4) UNAL,
     1182    14243    3              3 REVERSED             CHAR (1) UNAL,
     1183    14244    3              3 *                    CHAR (10) UNAL,
     1184    14245    3              3 PROGRAM_ID           CHAR (12) UNAL,
     1185    14246    3              3 *                    CHAR (12) UNAL,
     1186    14247    3              3 REVISION             CHAR (6) UNAL,
     1187    14248    3              3 LABEL                CHAR (4) UNAL,
     1188    14249    3              3 *                    CHAR (4) UNAL,
     1189    14250    3            2 BCD_ REDEF BCD CHAR (80) UNAL ;
     1190    14251    3      DCL ADDRESS_VALUE              UBIN WORD ALIGNED ;
     1191    14252    3      DCL BLANKS_OK                  BIT (1) CONSTANT UNAL INIT ('1'B) ;
     1192    14253    3      DCL NO_BLANKS                  BIT (1) CONSTANT UNAL INIT ('0'B) ;
     1193    14254
     1194    14255        /* Code */
     1195    14256
     1196    14257    3      HEX_CARD.BCD_ = BCD_CARD.BCD_ ;
     1197    14258
     1198    14259    3      IF OBJECT.BCD.ASSEMBLER = 'M'
     1199    14260    3      THEN /* Hex patches are allowed for this object deck. */ ;
     1200    14261    4      ELSE DO ;
     1201    14262    4              CALL GC_ERR_MSG (%E$GHC_HEX_INVALID) ;
     1202    14263    4              ALTRETURN ;
     1203    14264    4           END /* ELSE */ ;
     1204    14265           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:55   
     1205    14266    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.ADDRESS, NO_BLANKS) ALTRET (ERROR) ;
     1206    14267    3      CALL CHARBIN (ADDRESS_VALUE, HEX_CARD.BCD.ADDRESS) ;
     1207    14268    3      IF MOD (ADDRESS_VALUE, 2) = 1 & HEX_CARD.BCD.INSTR2 ~= ' '
     1208    14269    4      THEN DO ;
     1209    14270    4              CALL GC_ERR_MSG (%E$GHC_PTCH_TWO_ON_ODD) ;
     1210    14271    4              ALTRETURN ;
     1211    14272    4           END /* THEN */ ;
     1212    14273    3      ELSE /* No 2 patch values for an odd address */ ;
     1213    14274
     1214    14275    3      IF HEX_CARD.BCD.HEX_TYPE = 'C' | HEX_CARD.BCD.TYPE = 'R'
     1215    14276    3      THEN /* Control Store / Read Write flag ok */ ;
     1216    14277    4      ELSE DO ;
     1217    14278    4              CALL GC_ERR_MSG (%E$GHC_PTCH_HEX_TYPE) ;
     1218    14279    4              ALTRETURN ;
     1219    14280    4           END /* ELSE */ ;
     1220    14281
     1221    14282    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.INSTR1, BLANKS_OK) ALTRET (ERROR) ;
     1222    14283    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.INSTR2, BLANKS_OK) ALTRET (ERROR) ;
     1223    14284    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.ORIG1, BLANKS_OK) ALTRET (ERROR) ;
     1224    14285    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.ORIG2, BLANKS_OK) ALTRET (ERROR) ;
     1225    14286
     1226    14287    3      IF HEX_CARD.BCD.REVERSED = 'R' | HEX_CARD.BCD.REVERSED = ' '
     1227    14288    3      THEN /* Patch reversed field is ok */ ;
     1228    14289    4      ELSE DO ;
     1229    14290    4              CALL GC_ERR_MSG (%E$GHC_PTCH_HEX_REVERSE) ;
     1230    14291    4              ALTRETURN ;
     1231    14292    4           END /* ELSE */ ;
     1232    14293           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:56   
     1233    14294    3      IF HEX_CARD.BCD.REVISION = ID.REVISION
     1234    14295    3      THEN /* TTL Date of Deck and Patch Card match. */ ;
     1235    14296    4      ELSE DO ;
     1236    14297    4              CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_REV) ;
     1237    14298    4              ALTRETURN ;
     1238    14299    4           END /* ELSE */ ;
     1239    14300
     1240    14301    3      IF HEX_CARD.BCD.LABEL = OBJECT.BCD.LBL
     1241    14302    3      THEN /* Edit Name of Deck and Patch Card match. */ ;
     1242    14303    4      ELSE DO ;
     1243    14304    4              CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_LBL) ;
     1244    14305    4   ERROR:
     1245    14306    4              ALTRETURN ;
     1246    14307    4           END /* ELSE */ ;
     1247    14308    3      RETURN ;
     1248    14309
     1249    14310        /* END GC_HEX_CHECKS */
     1250    14311        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:57   
     1251    14312    3   GC_VERIFY_VALUE: PROC (VALUE, BLANK_VALID) ALTRET ;
     1252    14313
     1253    14314    4      DCL VALUE       CHAR (4) CALIGNED ;
     1254    14315    4      DCL BLANK_VALID BIT (1) CALIGNED ;
     1255    14316    4      DCL I           UBIN WORD ALIGNED ;
     1256    14317
     1257    14318        /* Code */
     1258    14319
     1259    14320    4      IF VALUE = '    '
     1260    14321    4      THEN IF BLANK_VALID
     1261    14322    4         THEN /* All blanks are acceptable. */ ;
     1262    14323    5         ELSE DO ;
     1263    14324    5                 CALL GC_ERR_MSG (%E$GVV_PTCH_BAD_HEX) ;
     1264    14325    5                 ALTRETURN ;
     1265    14326    5              END /* ELSE */ ;
     1266    14327    5      ELSE DO I = 0 TO 3 ;
     1267    14328    6              DO SELECT (SUBSTR (VALUE, 0, I)) ;
     1268    14329    6                 SELECT ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') ;
     1269    14330                         /* legal numeric digit */
     1270    14331    6                 SELECT ('A', 'B', 'C', 'D', 'E', 'F') ;
     1271    14332                         /* legal additional HEX digit */
     1272    14333    6                 SELECT (ELSE) ;
     1273    14334    6              CALL GC_ERR_MSG (%E$GVV_PTCH_BAD_HEX) ;
     1274    14335    6              ALTRETURN ;
     1275    14336    6              END /* SELECT */ ;
     1276    14337    5           END /* ELSE */ ;
     1277    14338    4      RETURN ;
     1278    14339
     1279    14340    4   END GC_VERIFY_VALUE ;
     1280    14341    3   END GC_HEX_CHECKS ;
     1281    14342    2   END GC_PATCH_CHECKS ;
     1282    14343        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:58   
     1283    14344    1   GC_DKEND_CHECKS: PROC ALTRET ;
     1284    14345
     1285    14346        /* Code */
     1286    14347
     1287    14348    2      IF BCD_CARD.BCD.CONTROL = '$'
     1288    14349    2      THEN IF BCD_CARD.BCD.LBL = OBJECT.BCD.LBL
     1289    14350    3         THEN DO ;
     1290    14351    4                 DO CUR# = 0 TO 3;
     1291    14352    4                    IF SUBSTR (BCD_CARD.BCD.SEQ, CUR#, 1) < '0' |
     1292    14353    4                            SUBSTR (BCD_CARD.BCD.SEQ, CUR#, 1) > '9'
     1293    14354    5                    THEN DO ;
     1294    14355    5                            CALL GC_ERR_MSG (%E$GDC_DKE_NON_NUMERIC) ;
     1295    14356    5                            ALTRETURN ;
     1296    14357    5                         END /* THEN */ ;
     1297    14358    4                    ELSE /* Do Nothing */ ;
     1298    14359    4                 END /* DO */ ;
     1299    14360    3                 SEQ = SEQ + 1;
     1300    14361    3                 CALL CHARBIN (CARD_SEQ, BCD_CARD.BCD.SEQ);
     1301    14362    3                 IF CARD_SEQ = SEQ
     1302    14363    3                 THEN /* Do Nothing */ ;
     1303    14364    4                 ELSE DO ;
     1304    14365    4                         CALL GC_ERR_MSG (%E$GDC_DKE_SEQ) ;
     1305    14366    4                         ALTRETURN ;
     1306    14367    4                      END /* ELSE */ ;
     1307    14368    3                 RETURN ;
     1308    14369    3              END /* THEN */ ;
     1309    14370    3         ELSE DO ;
     1310    14371    3                 CALL GC_ERR_MSG (%E$GDC_DKE_LBL) ;
     1311    14372    3                 ALTRETURN ;
     1312    14373    3              END /* ELSE */ ;
     1313    14374    3      ELSE DO ;
     1314    14375    3              CALL GC_ERR_MSG (%E$GDC_DKE_CONTROL) ;
     1315    14376    3              ALTRETURN ;
     1316    14377    3           END /* ELSE */ ;
     1317    14378
     1318    14379    2   END GC_DKEND_CHECKS;
     1319    14380        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:59   
     1320    14381    1   GC_GET_CONFIG: PROC ALTRET ;
     1321    14382
     1322    14383    2      DCL HDR$ PTR ALIGNED ;
     1323    14384           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1324    14411           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1325    14447    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1326    14448
     1327    14449        /* Code */
     1328    14450
     1329    14451           /* set up MCA command */
     1330    14452    2      HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;
     1331    14453    2      HDR_BLK.DEFINER = 7 ;
     1332    14454    2      HDR_BLK.RD_FLPY = '000000001'B;
     1333    14455    2      MCA_B.DCW_LIST.IDCW1 = '130000724002'O ;
     1334    14456    2      MCA_B.DCW_LIST.IDCW2 = '030000700001'O ;
     1335    14457    2      HDR_BLK.IO_PARAM_BLK.DEST_LEN = 12 ;
     1336    14458    2      MCA_B.COMMAND.DATA = 'READ CONFIG ';
     1337    14459
     1338    14460           /* set up DCW list */
     1339    14461    2      CALL GC_ADDR (ADDR(MCA_B.COMMAND), MCA_B.DCW_LIST.DCW1.ADDRESS) ;
     1340    14462    2      MCA_B.DCW_LIST.DCW1.COUNT = 11 ;
     1341    14463    2      CALL GC_ADDR (ADDR(MCA_B.CONFIG), MCA_B.DCW_LIST.DCW2.ADDRESS) ;
     1342    14464    2      MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8;
     1343    14465
     1344    14466           /* perform the I/O */
     1345    14467    2      HDR$ = ADDR(MCA_B.CONFIG) ;
     1346    14468    2      FACTORY_TEST = %TRUE ;
     1347    14469    3      DO UNTIL (NOT FACTORY_TEST) ;
     1348    14470    3         CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;
     1349    14471    3         CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, HDR$) ;
     1350    14472    3      END /* DO UNTIL */ ;
     1351    14473    2      CALL GC_DUMMY_READ ALTRET (ERROR) ;
     1352    14474    2      RETURN ;
     1353    14475
     1354    14476    2   ERROR:
     1355    14477    2      ALTRETURN ;
     1356    14478
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:60   
     1357    14479    2   END GC_GET_CONFIG ;
     1358    14480        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:61   
     1359    14481        /*I* NAME:         GC_GET_HEADER
     1360    14482             AUTHOR:       Scott S. Sheppard
     1361    14483             PURPOSE:      Obtains an MCA diskette header
     1362    14484             INTERFACE:    ADDR function
     1363    14485                           GC_ADDR
     1364    14486                           TOU$READ_MCA_DATA
     1365    14487                           GC_DUMMY_READ
     1366    14488             PARAMETERS:   None passed.
     1367    14489             DATA:         DUP.IFAD.DRIVE_NUMBER - input
     1368    14490                           MCA_B.DISKETTE_HEADER (address) - input
     1369    14491                           MCA_B.COMMAND.HDR_BLK - output
     1370    14492                           MCA_B.COMMAND.DATA - output
     1371    14493                           MCA_B.DCW_LIST.DCW1.ADDRESS - output
     1372    14494                           MCA_B.DCW_LIST.DCW1.COUNT - output
     1373    14495                           MCA_B.DCW_LIST.DCW2.ADDRESS - output
     1374    14496                           MCA_B.DCW_LIST.DCW2.COUNT - output
     1375    14497             DESCRIPTION:  This  procedure reads  a diskette  header from
     1376    14498                           the  diskette  on  the  drive specified by the
     1377    14499                           IFAD  drive number in  the IMU associated with
     1378    14500                           the M$IFAD dcb.
     1379    14501        */
     1380    14502        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:62   
     1381    14503    1   GC_GET_HEADER: PROC ALTRET ;
     1382    14504
     1383    14505    2      DCL HDR$ PTR ALIGNED ;
     1384    14506           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1385    14533    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1386    14534
     1387    14535        /* Code */
     1388    14536
     1389    14537           /* set up MCA command */
     1390    14538    2      HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;
     1391    14539    2      HDR_BLK.DEFINER = 7 ;
     1392    14540    2      HDR_BLK.RD_FLPY = '000000001'B;
     1393    14541    2      MCA_B.DCW_LIST.IDCW1 = '130000720002'O ;
     1394    14542    2      HDR_BLK.IO_PARAM_BLK.DEST_LEN = 10 ;
     1395    14543    2      CALL CONCAT (MCA_B.COMMAND.DATA, 'READ HDR,', DUP.IFAD.DRIVE_NUMBER) ;
     1396    14544
     1397    14545           /* set up DCW list */
     1398    14546    2      CALL GC_ADDR (ADDR(MCA_B.COMMAND), MCA_B.DCW_LIST.DCW1.ADDRESS) ;
     1399    14547    2      MCA_B.DCW_LIST.DCW1.COUNT = 11 ;
     1400    14548    2      CALL GC_ADDR (ADDR(MCA_B.DISKETTE_HEADER), MCA_B.DCW_LIST.DCW2.ADDRESS) ;
     1401    14549    2      MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8;
     1402    14550
     1403    14551           /* perform the I/O */
     1404    14552    2      HDR$ = ADDR(MCA_B.DISKETTE_HEADER) ;
     1405    14553    2      FACTORY_TEST = %TRUE ;
     1406    14554    3      DO UNTIL (NOT FACTORY_TEST) ;
     1407    14555    3         CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;
     1408    14556    3         CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, HDR$) ;
     1409    14557    3      END /* DO UNTIL */ ;
     1410    14558    2      CALL GC_DUMMY_READ ALTRET (ERROR) ;
     1411    14559    2      RETURN ;
     1412    14560
     1413    14561    2   ERROR:
     1414    14562    2      ALTRETURN ;
     1415    14563
     1416    14564    2   END GC_GET_HEADER ;
     1417    14565        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:63   
     1418    14566        /*I* NAME:         GC_GET_DIRECTORY
     1419    14567             AUTHOR:       Scott S. Sheppard
     1420    14568             PURPOSE:      Obtains an MCA diskette directory
     1421    14569             INTERFACE:    ADDR function
     1422    14570                           GC_ADDR
     1423    14571                           TOU$READ_MCA_DATA
     1424    14572                           GC_DUMMY_READ
     1425    14573             PARAMETERS:   None passed.
     1426    14574             DATA:         DUP.IFAD.DRIVE_NUMBER - input
     1427    14575                           MCA_B.DIRECTORY (address) - input
     1428    14576                           MCA_B.COMMAND.HDR_BLK - output
     1429    14577                           MCA_B.COMMAND.DATA - output
     1430    14578                           MCA_B.DCW_LIST.DCW1.ADDRESS - output
     1431    14579                           MCA_B.DCW_LIST.DCW1.COUNT - output
     1432    14580                           MCA_B.DCW_LIST.DCW2.ADDRESS - output
     1433    14581                           MCA_B.DCW_LIST.DCW2.COUNT - output
     1434    14582                           MCA_B.DIRECTORY.SIZE - output
     1435    14583             DESCRIPTION:  This procedure reads a diskette directory from
     1436    14584                           the  diskette  on  the  drive specified by the
     1437    14585                           IFAD  drive number in  the IMU associated with
     1438    14586                           the M$IFAD dcb.
     1439    14587        */
     1440    14588        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:64   
     1441    14589    1   GC_GET_DIRECTORY: PROC ALTRET ;
     1442    14590
     1443    14591    2      DCL HDR$ PTR ALIGNED ;
     1444    14592           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1445    14619           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1446    14655    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1447    14656
     1448    14657        /* Code */
     1449    14658
     1450    14659           /* set up MCA command */
     1451    14660    2      HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;
     1452    14661    2      HDR_BLK.DEFINER = 7 ;
     1453    14662    2      HDR_BLK.RD_FLPY = '000000001'B;
     1454    14663    2      MCA_B.DCW_LIST.IDCW1 = '130000720002'O ;
     1455    14664    2      HDR_BLK.IO_PARAM_BLK.DEST_LEN = 16 ;
     1456    14665    2      CALL CONCAT (MCA_B.COMMAND.DATA, 'READ DIRECTORY,', DUP.IFAD.DRIVE_NUMBER) ;
     1457    14666
     1458    14667           /* set up DCW list */
     1459    14668    2      CALL GC_ADDR (ADDR(MCA_B.COMMAND), MCA_B.DCW_LIST.DCW1.ADDRESS) ;
     1460    14669    2      MCA_B.DCW_LIST.DCW1.COUNT = 12 ;
     1461    14670    2      CALL GC_ADDR (ADDR(MCA_B.DIRECTORY), MCA_B.DCW_LIST.DCW2.ADDRESS) ;
     1462    14671    2      MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8;
     1463    14672
     1464    14673           /* perform the I/O */
     1465    14674    2      HDR$ = ADDR(MCA_B.DIRECTORY) ;
     1466    14675    2      FACTORY_TEST = %TRUE ;
     1467    14676    3      DO UNTIL (NOT FACTORY_TEST) ;
     1468    14677    3         CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;
     1469    14678    3         CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, HDR$) ;
     1470    14679    3      END /* DO UNTIL */ ;
     1471    14680    2      HDR$ = ADDR (MCA_B.DISKETTE_HEADER.DATA) ;
     1472    14681    2      CALL GC_CONVERT_8_TO_9 (BINBIT (DISKETTE_HEADER.DIR_SIZE, 36),
     1473    14682    2              MCA_B.DIRECTORY.SIZE) ;
     1474    14683    2      CALL GC_DUMMY_READ ALTRET (ERROR) ;
     1475    14684    2      RETURN ;
     1476    14685
     1477    14686    2   ERROR:
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:65   
     1478    14687    2      ALTRETURN ;
     1479    14688
     1480    14689    2   END GC_GET_DIRECTORY ;
     1481    14690        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:66   
     1482    14691        /*I* NAME:         GC_DUMMY_READ
     1483    14692             AUTHOR:       Kathy Larkin
     1484    14693             PURPOSE:      Clear MCA with dummy read
     1485    14694             INTERFACE:    GC_CHECK_FOR_NORM_STATUS
     1486    14695                           TOU$READ_MCA_DATA
     1487    14696             PARAMETERS:   None passed.
     1488    14697             DATA:         MCA_B.STATUS - input
     1489    14698                           MCA_B.DCW_LIST.DCW2.COUNT - output
     1490    14699                           READ_COMPLETE - input
     1491    14700             DESCRIPTION:  This procedure performs  a 'dummy' read to the
     1492    14701                           MCA to complete the current read.  The size of
     1493    14702                           the buffer for this read is set to the size of
     1494    14703                           the header block which will be returned by the
     1495    14704                           MCA (8 words).  The ALTRETURN will be taken if
     1496    14705                           the end-of-session was  not received, or if an
     1497    14706                           abnormal status was received, as determined by
     1498    14707                           GC_CHECK_FOR_NORM_STATUS.
     1499    14708        */
     1500    14709        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:67   
     1501    14710    1   GC_DUMMY_READ: PROC ALTRET ;
     1502    14711
     1503    14712    2      DCL READ_COMPLETE BIT (1) CALIGNED ;
     1504    14713    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1505    14714    2      DCL HDR$ PTR ALIGNED ;
     1506    14715           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1507    14742    2      DCL DATA$ PTR ALIGNED ;
     1508    14743           %DISKETTE_READ_BUFFER (STCLASS = "BASED (DATA$)") ;
     1509    14755
     1510    14756        /* Code */
     1511    14757
     1512    14758    2      CALL GC_CHECK_FOR_NORM_STATUS (READ_COMPLETE) ALTRET (ERROR) ;
     1513    14759    2      IF READ_COMPLETE
     1514    14760    2      THEN RETURN ;
     1515    14761    3      ELSE DO /* perform extra read */ ;
     1516    14762    3              HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;
     1517    14763    3              MCA_B.DCW_LIST.IDCW1 = '150000720002'O ;
     1518    14764    3              HDR_BLK.DEFINER = 9 ;
     1519    14765    3              MCA_B.DCW_LIST.DCW1.COUNT = 8 ;
     1520    14766    3              MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8 ;
     1521    14767    3              DATA$ = ADDR(MCA_B.DUMMY_BUFFER);
     1522    14768    3              CALL GC_ADDR (DATA$,MCA_B.DCW_LIST.DCW2.ADDRESS) ;
     1523    14769    3              FACTORY_TEST = %TRUE ;
     1524    14770    4              DO UNTIL (NOT FACTORY_TEST) ;
     1525    14771    4                 CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;
     1526    14772    4                 CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, DATA$) ;
     1527    14773    4              END /* DO UNTIL */ ;
     1528    14774    3              CALL GC_CHECK_FOR_NORM_STATUS (READ_COMPLETE) ALTRET (ERROR) ;
     1529    14775    3              IF READ_COMPLETE
     1530    14776    3              THEN RETURN ;
     1531    14777    3              ELSE /* fall through to ALTRETURN */ ;
     1532    14778    3           END /* ELSE DO */ ;
     1533    14779    2   ERROR:
     1534    14780    2      ALTRETURN ;
     1535    14781
     1536    14782    2   END GC_DUMMY_READ ;
     1537    14783        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:68   
     1538    14784        /*I* NAME:         GC_GET_FILE
     1539    14785             AUTHOR:       Scott S. Sheppard
     1540    14786                           Kathy Larkin
     1541    14787             PURPOSE:      Obtains an MCA diskette file
     1542    14788             INTERFACE:    ADDR function
     1543    14789                           GC_ADDR
     1544    14790                           TOU$READ_MCA_DATA
     1545    14791             PARAMETERS:   None passed.
     1546    14792             DATA:         DUP.IFAD.DRIVE_NUMBER - input
     1547    14793                           MCA_B.DIRECTORY (address) - input
     1548    14794                           MCA_B.COMMAND.HDR_BLK - output
     1549    14795                           MCA_B.COMMAND.DATA - output
     1550    14796                           MCA_B.DCW_LIST.DCW1.ADDRESS - output
     1551    14797                           MCA_B.DCW_LIST.DCW1.COUNT - output
     1552    14798                           MCA_B.DCW_LIST.DCW2.ADDRESS - output
     1553    14799                           MCA_B.DCW_LIST.DCW2.COUNT - output
     1554    14800                           MCA_B.FILE.SIZE - output
     1555    14801             DESCRIPTION:  This  procedure  reads  a  diskette file  from
     1556    14802                           the  diskette  on  the  drive specified by the
     1557    14803                           IFAD  drive number in  the IMU associated with
     1558    14804                           the M$IFAD dcb.
     1559    14805        */
     1560    14806
     1561    14807    1   GC_GET_FILE: PROC ALTRET ;
     1562    14808
     1563    14809    2      DCL HDR$ PTR ALIGNED ;
     1564    14810           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1565    14837    2      DCL DIR$ PTR ALIGNED ;
     1566    14838           %DIRECTORY_ENTRY (STCLASS = "BASED (DIR$)") ;
     1567    14865    2      DCL SAVE_8_UNDER_HDR (0:7) UBIN WORD ALIGNED ;
     1568    14866    2      DCL BYTES_TO_READ UBIN WORD ALIGNED ;
     1569    14867    2      DCL FIRST_READ BIT (1) CALIGNED ;
     1570    14868    2      DCL READ_COMPLETE BIT (1) CALIGNED ;
     1571    14869    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1572    14870    2      DCL FILER$ PTR ALIGNED ;
     1573    14871    2      DCL FILE_DATA$  PTR ALIGNED ;
     1574    14872           %DISKETTE_READ_BUFFER (STCLASS = "BASED (FILE_DATA$)") ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:69   
     1575    14884        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:70   
     1576    14885        /* Code */
     1577    14886
     1578    14887           /* set up MCA command */
     1579    14888    2      HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;
     1580    14889    2      HDR_BLK.DEFINER = 7 ;
     1581    14890    2      HDR_BLK.RD_FLPY = '000000001'B;
     1582    14891    2      MCA_B.DCW_LIST.IDCW1 = '130000720002'O ;
     1583    14892    2      HDR_BLK.IO_PARAM_BLK.DEST_LEN = 17 ;
     1584    14893    2      DIR$ = ADDR (MCA_B.DIRECTORY.CURRENT) ;
     1585    14894    2      CALL CONCAT (MCA_B.COMMAND.DATA, 'READ P=', DIRECTORY_ENTRY.PATH_NAME,
     1586    14895    2              ',', DUP.IFAD.DRIVE_NUMBER) ;
     1587    14896
     1588    14897    2      CALL GC_ADDR (ADDR(MCA_B.COMMAND), MCA_B.DCW_LIST.DCW1.ADDRESS) ;
     1589    14898    2      MCA_B.DCW_LIST.DCW1.COUNT = 13 ;
     1590    14899    2      CALL GC_ADDR (ADDR(MCA_B.FILE), MCA_B.DCW_LIST.DCW2.ADDRESS) ;
     1591    14900    2      CALL GC_CONVERT_8_TO_9 (BINBIT (DIRECTORY_ENTRY.FILE_SIZE, 36),
     1592    14901    2              MCA_B.FILE.SIZE) ;
     1593    14902    2      FILE_DATA$ = ADDR (MCA_B.FILE.DATA) ;
     1594    14903    2      MCA_B.FILE.BYTES_READ = 0 ;
     1595    14904    2      BYTES_TO_READ = MCA_B.FILE.SIZE ;
     1596    14905    2      FIRST_READ = %TRUE ;
     1597    14906    2      READ_COMPLETE = %FALSE ;
     1598    14907    2      HDR$ = ADDR (MCA_B.FILE) ;
     1599    14908
     1600    14909    3      DO UNTIL READ_COMPLETE ;
     1601    14910    3         MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8 ;
     1602    14911    3         CALL GC_ADDR (HDR$, MCA_B.DCW_LIST.DCW2.ADDRESS) ;
     1603    14912    3         FACTORY_TEST = %TRUE ;
     1604    14913    4         DO UNTIL (NOT FACTORY_TEST) ;
     1605    14914    4            CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;
     1606    14915    4            CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, HDR$) ;
     1607    14916    4         END /* DO UNTIL */ ;
     1608    14917    3         CALL GC_PROCESS_READ ALTRET (ERROR) ;
     1609    14918    3         HDR$ = ADDR (MCA_B.DUMMY_BUFFER) ;
     1610    14919    3      END /* DO UNTIL */ ;
     1611    14920
     1612    14921    2      IF MCA_B.FILE.SIZE = MCA_B.FILE.BYTES_READ
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:71   
     1613    14922    2      THEN RETURN ;
     1614    14923    2      ELSE /* fall through to ALTRETURN */ ;
     1615    14924
     1616    14925    2   ERROR:
     1617    14926    2      ALTRETURN ;
     1618    14927        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:72   
     1619    14928        /*I* NAME:         GC_PROCESS_READ
     1620    14929             AUTHOR:       Kathy Larkin
     1621    14930             PURPOSE:      Process last read, set up for next
     1622    14931             INTERFACE:    GC_CONVERT_8_TO_9
     1623    14932                           PINCRC function
     1624    14933                           BINBIT function
     1625    14934             PARAMETERS:   None passed.
     1626    14935             DATA:         HDR$ - input/output
     1627    14936                           FIRST_READ - input/output
     1628    14937                           SAVE_8_UNDER_HDR - input/output
     1629    14938                           BYTES_TO_READ - input/output
     1630    14939                           READ_COMPLETE - input
     1631    14940                           HDR_BLK.SOURCE_LEN - input
     1632    14941                           MCA_B.FILE.BYTES_READ - output
     1633    14942                           BYTES_THIS_READ - output
     1634    14943             DESCRIPTION:  This  procedure will  determine if  the entire
     1635    14944                           file has been successfully read and the proper
     1636    14945                           status has been  received.  If another read is
     1637    14946                           to be performed, the buffer pointer (HDR$), is
     1638    14947                           incremented.   Number of bytes  read and to be
     1639    14948                           read  are  determined.   The  eight file words
     1640    14949                           which  were saved  prior to  the last read are
     1641    14950                           restored  for all  reads after  the first (the
     1642    14951                           header block of  8 words overwrites the bottom
     1643    14952                           of  the  data  buffer  at  each read after the
     1644    14953                           first).   For the last  'dummy' read (data has
     1645    14954                           all been read, but  another read has been done
     1646    14955                           to  clear  the  MCA),  READ_COMPLETE must have
     1647    14956                           been  set  or  this  procedure will ALTRETURN,
     1648    14957                           aborting the DEER MERGE command.
     1649    14958        */
     1650    14959        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:73   
     1651    14960    2   GC_PROCESS_READ: PROC ALTRET ;
     1652    14961
     1653    14962    3      DCL BYTES_THIS_READ UBIN WORD ALIGNED ;
     1654    14963    3      DCL I  UBIN WORD ALIGNED ;
     1655    14964
     1656    14965    3      CALL GC_CHECK_FOR_NORM_STATUS (READ_COMPLETE) ALTRET (ERROR) ;
     1657    14966    3      CALL GC_CONVERT_8_TO_9_NO (BINBIT (HDR_BLK.IO_PARAM_BLK.SOURCE_LEN, 36),
     1658    14967    3              BYTES_THIS_READ) ;
     1659    14968    3      IF FIRST_READ
     1660    14969    4      THEN DO ;
     1661    14970    4              FILER$ = ADDR(MCA_B.COMMAND.HDR_BLK) ;
     1662    14971    4              MCA_B.DCW_LIST.DCW1.COUNT = 8 ;
     1663    14972    4              MCA_B.DCW_LIST.IDCW1 = '150000720002'O ;
     1664    14973    4              FILER$->HDR_BLK.DEFINER = 9 ;
     1665    14974    4              FIRST_READ = %FALSE ;
     1666    14975    4           END /* DO */ ;
     1667    14976    4      ELSE DO ;
     1668    14977    4              HDR_BLK = SAVE_8_UNDER_HDR ;
     1669    14978
     1670    14979    5              DO I = 0 TO %(MCA_READ_SZ - 9) ;
     1671    14980    5                 FILE_DATA$ -> DISKETTE_READ_BUFFER.DATA_WORD(I) =
     1672    14981    5                         MCA_B.DUMMY_BUFFER.DATA_WORDS(I) ;
     1673    14982    5              END /* DO */ ;
     1674    14983    4           END /* ELSE DO */ ;
     1675    14984    3      MCA_B.FILE.BYTES_READ = MCA_B.FILE.BYTES_READ + BYTES_THIS_READ ;
     1676    14985    3      BYTES_TO_READ = MCA_B.FILE.SIZE - MCA_B.FILE.BYTES_READ ;
     1677    14986    3      FILE_DATA$ = PINCRC (FILE_DATA$, BYTES_THIS_READ) ;
     1678    14987    3      SAVE_8_UNDER_HDR = HDR_BLK ;
     1679    14988
     1680    14989    3      IF BYTES_TO_READ = 0
     1681    14990    3      THEN IF READ_COMPLETE
     1682    14991    3         THEN RETURN ;
     1683    14992    4         ELSE DO ;
     1684    14993    4                 CALL GC_DUMMY_READ ALTRET (ERROR) ;
     1685    14994    4                 CALL GC_CHECK_FOR_NORM_STATUS (READ_COMPLETE) ALTRET (ERROR) ;
     1686    14995    4              END /* ELSE DO */ ;
     1687    14996    3      RETURN ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:74   
     1688    14997    3   ERROR:
     1689    14998    3      ALTRETURN ;
     1690    14999    3   END GC_PROCESS_READ ;
     1691    15000    2   END GC_GET_FILE ;
     1692    15001        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:75   
     1693    15002        /*I* NAME:         GC_CHECK_FOR_NORM_STATUS
     1694    15003             AUTHOR:       Kathy Larkin
     1695    15004             PURPOSE:      Validate status received from MCA
     1696    15005             INTERFACE:    None called.
     1697    15006             PARAMETERS:   READ_COMPLETE - output
     1698    15007             DATA:         MCA_B.STATUS - input
     1699    15008             DESCRIPTION:  This  procedure checks the  status returned by
     1700    15009                           the    MCA.     READ_COMPLETE    is   set   if
     1701    15010                           SESS_NORM_TERM sub-status  is received.  If an
     1702    15011                           abnormal  status  is  received, this procedure
     1703    15012                           will ALTRETURN.
     1704    15013        */
     1705    15014
     1706    15015    1   GC_CHECK_FOR_NORM_STATUS: PROC (READ_COMPLETE) ALTRET ;
     1707    15016
     1708    15017    2      DCL READ_COMPLETE BIT (1) CALIGNED ;
     1709    15018
     1710    15019        /* Code */
     1711    15020
     1712    15021    2      IF MCA_B.STATUS.MAJOR = %CHAN_READY
     1713    15022    3      THEN DO SELECT (MCA_B.STATUS.SUB.VALUE) ;
     1714    15023    3              SELECT (%NORM_TERM) ;
     1715    15024    3              READ_COMPLETE = %FALSE ;
     1716    15025    3              SELECT (%SESS_NORM_TERM) ;
     1717    15026    3              READ_COMPLETE = %TRUE ;
     1718    15027    3              SELECT (ELSE) ;
     1719    15028    3      ALTRETURN ;
     1720    15029    3           END /* THEN DO SELECT */ ;
     1721    15030    2      ELSE ALTRETURN ;
     1722    15031    2      RETURN ;
     1723    15032    2   END GC_CHECK_FOR_NORM_STATUS ;
     1724    15033        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:76   
     1725    15034        /*I* NAME:         GC_CHECK_FACTORY_TEST
     1726    15035             PURPOSE:      Check for the factory test data string
     1727    15036             INTERFACE:    None called.
     1728    15037             PARAMETERS:   FACTORY_TEST - output
     1729    15038             DATA:         DATA$ - input
     1730    15039             DESCRIPTION:  Check to see if  factory test code has been returned.
     1731    15040                           If yes return the FACTORY_TEST as true, meaning that the
     1732    15041                           data returned by the MCA was not diskette data, but a
     1733    15042                           factory test code, which is to be ignored, and another
     1734    15043                           read diskette must be issued to the MCA.
     1735    15044        */
     1736    15045
     1737    15046    1   GC_CHECK_FACTORY_TEST: PROC (FACTORY_TEST, DATA$) ;
     1738    15047
     1739    15048    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1740    15049    2      DCL HDR$ PTR ALIGNED ;
     1741    15050           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1742    15077    2      DCL DATA$ PTR ALIGNED ;
     1743    15078           %DISKETTE_READ_BUFFER (STCLASS = "BASED (DATA$)") ;
     1744    15090
     1745    15091        /* Code */
     1746    15092
     1747    15093    2      FACTORY_TEST = %FALSE ;
     1748    15094
     1749    15095    2      IF (MCA_B.STATUS.MAJOR = %CHAN_READY) AND
     1750    15096    2              (MCA_B.STATUS.SUB.VALUE = %NORM_TERM)
     1751    15097    2      THEN IF DISKETTE_READ_BUFFER.DATA_WORD(8) = %CRLF
     1752    15098    3         THEN DO;
     1753    15099    3                 HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;
     1754    15100    3                 DISKETTE_READ_BUFFER.DATA_WORD(8) = '000000000000'O ;
     1755    15101    3                 FACTORY_TEST = %TRUE ;
     1756    15102    3                 MCA_B.DCW_LIST.IDCW1 = '150000720002'O ;
     1757    15103    3                 HDR_BLK.DEFINER = 9 ;
     1758    15104    3              END /* THEN DO */ ;
     1759    15105    2         ELSE /* FACTORY_TEST = FALSE */ ;
     1760    15106
     1761    15107    2      ELSE /* FACTORY_TEST = FALSE */ ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:77   
     1762    15108
     1763    15109    2      RETURN ;
     1764    15110
     1765    15111    2   END GC_CHECK_FACTORY_TEST ;
     1766    15112        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:78   
     1767    15113        /*I* NAME:         GC_ADDR
     1768    15114             AUTHOR:       Scott S. Sheppard
     1769    15115             PURPOSE:      Assigns an Address Field
     1770    15116             INTERFACE:    None called.
     1771    15117             PARAMETERS:   ITEM$ - pointer value (input)
     1772    15118                           TARGET - address field (output)
     1773    15119             DATA:         No external data accessed.
     1774    15120             DESCRIPTION:  This procedure assigns  the address portion of
     1775    15121                           a pointer to an address field. The use of this
     1776    15122                           small   procedure   saves   this  module  from
     1777    15123                           requiring  numerous  pointer  redefinitions to
     1778    15124                           achieve the same effect.
     1779    15125        */
     1780    15126
     1781    15127    1   GC_ADDR: PROC (ITEM$, TARGET) ;
     1782    15128
     1783    15129    2      DCL 1 ITEM$ ALIGNED,
     1784    15130    2            2 ADDRESS BIT (18) UNAL,
     1785    15131    2            2 SEGID   BIT (18) UNAL ;
     1786    15132    2      DCL TARGET      BIT (18) CALIGNED ;
     1787    15133
     1788    15134        /* Code */
     1789    15135
     1790    15136    2      TARGET = ITEM$.ADDRESS ;
     1791    15137    2      RETURN ;
     1792    15138
     1793    15139    2   END GC_ADDR ;
     1794    15140        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:79   
     1795    15141        /*I* NAME:         GC_MAKE_OBJECT_CARD
     1796    15142             AUTHOR:       Scott S. Sheppard
     1797    15143             PURPOSE:      sets up a $OBJECT card
     1798    15144             INTERFACE:    ADDR function
     1799    15145             PARAMETERS:   TYPE - type of object deck (input)
     1800    15146             DATA:         MCA_B.DISKETTE_HEADER.DATA - input
     1801    15147                           MCA_B.DIRECTORY.CURRENT - input
     1802    15148                           MCA_B.FILE.DATA - input
     1803    15149             DESCRIPTION:  When test modules are  read from an IFAD tape,
     1804    15150                           they have the following format:
     1805    15151                              $OBJECT card
     1806    15152                              n binary cards
     1807    15153                              m patch cards
     1808    15154                              $DKEND  card
     1809    15155                                            Information  read from DIPPER
     1810    15156                           diskettes  is not in  this format. To maintain
     1811    15157                           consistency in the deckfile, so that the LIST,
     1812    15158                           SHOWDECK,  and other functions  still work (as
     1813    15159                           well  as the TOLTS  LOADER), dummy $OBJECT and
     1814    15160                           $DKEND cards are being created for the modules
     1815    15161                           read  from  DIPPER  diskettes.  This procedure
     1816    15162                           performs that function.
     1817    15163
     1818    15164                           There are two types  of decks. Files read from
     1819    15165                           the  diskettes and the  directory blocks. Each
     1820    15166                           are  handled  separately  based  on  the  TYPE
     1821    15167                           parameter  passed. In  addition, there  is one
     1822    15168                           file,  the  DPSFILE,  which  is a special file
     1823    15169                           that is treated differently.
     1824    15170        */
     1825    15171        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:80   
     1826    15172    1   GC_MAKE_OBJECT_CARD: PROC (TYPE) ;
     1827    15173
     1828    15174    2      DCL TYPE        CHAR (9) CALIGNED ;
     1829    15175    2      DCL HDR$        PTR ALIGNED ;
     1830    15176    2      DCL DIR$        PTR ALIGNED ;
     1831    15177    2      DCL FILE$       PTR ALIGNED ;
     1832    15178           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1833    15214           %DIRECTORY_ENTRY (STCLASS = "BASED (DIR$)") ;
     1834    15241           %DISKETTE_FILE (STCLASS = "BASED (FILE$)") ;
     1835    15283
     1836    15284        /* Code */
     1837    15285
     1838    15286           /* set up pointers to information read from the diskette */
     1839    15287    2      HDR$ = ADDR (MCA_B.DISKETTE_HEADER.DATA) ;
     1840    15288    2      DIR$ = ADDR (MCA_B.DIRECTORY.CURRENT) ;
     1841    15289    2      FILE$ = ADDR (MCA_B.FILE.DATA) ;
     1842    15290
     1843    15291           /* set up the constant part of the $OBJECT card */
     1844    15292    2      OBJECT.BCD_ = ' ' ;
     1845    15293    2      OBJECT.NIO_BCD.CONTROL = '$' ;
     1846    15294    2      OBJECT.NIO_BCD.TYPE = 'OBJECT' ;
     1847    15295    2      OBJECT.NIO_BCD.LIBRARY = 'HNIOA0' ;
     1848    15296    2      OBJECT.NIO_BCD.LOAD_TYPE = 'D' ;
     1849    15297    2      OBJECT.NIO_BCD.DATA = 'DATA' ;
     1850    15298    2      CALL CONCAT (OBJECT.NIO_BCD.EQUIP_TYPE,
     1851    15299    2              DISKETTE_HEADER.EQUIP_TYPE,
     1852    15300    2              '.') ;
     1853    15301    2      OBJECT.NIO_BCD.ASSEMBLER = '.' ;
     1854    15302    2      CALL CONCAT (OBJECT.NIO_BCD.PRD_NUM_TAB,
     1855    15303    2              DISKETTE_HEADER.IPI_NUM.PRD_NUM_TAB,
     1856    15304    2              '.') ;
     1857    15305    2      OBJECT.NIO_BCD.LBL = LAST.EDIT_NAME ;
     1858    15306    2      OBJECT.NIO_BCD.SEQ = '0000' ;
     1859    15307    2      CALL CONCAT (OBJECT.NIO_BCD.X_OF_N_, '.',
     1860    15308    2              DISKETTE_HEADER.X_OF_N.X, '.',
     1861    15309    2              DISKETTE_HEADER.X_OF_N.N) ;
     1862    15310           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:81   
     1863    15311           /* set up the rest of the card based on the diskette data */
     1864    15312    3      DO SELECT (TYPE) ;
     1865    15313    3         SELECT ('FILE') ;
     1866    15314    3         OBJECT.NIO_BCD.CLASS = 'F' ;
     1867    15315    3         OBJECT.NIO_BCD.FILE_NAME = DIRECTORY_ENTRY.PATH_NAME ;
     1868    15316    3         OBJECT.NIO_BCD.PRG_NUM_TAB = SUBSTR (DISKETTE_FILE.HDR.MOD_DWG_NUM, 9, 3) ;
     1869    15317    3         SELECT ('DIRECTORY') ;
     1870    15318    3         OBJECT.NIO_BCD.CLASS = 'F' ;
     1871    15319    3         OBJECT.NIO_BCD.FILE_NAME = 'DIRECTRY' ;
     1872    15320    3         OBJECT.NIO_BCD.PRG_NUM_TAB = '000' ;
     1873    15321    3         SELECT ('HEADER') ;
     1874    15322    3         OBJECT.NIO_BCD.CLASS = 'H' ;
     1875    15323    3         OBJECT.NIO_BCD.FILE_NAME = DISKETTE_HEADER.UNIQUE_ID ;
     1876    15324    3         OBJECT.NIO_BCD.PRG_NUM_TAB = '000' ;
     1877    15325    3      END /* SELECT */ ;
     1878    15326    2      RETURN ;
     1879    15327
     1880    15328    2   END GC_MAKE_OBJECT_CARD ;
     1881    15329        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:82   
     1882    15330        /*I* NAME:         GC_MAKE_DKEND_CARD
     1883    15331             AUTHOR:       Scott S. Sheppard
     1884    15332             PURPOSE:      sets up a $DKEND card
     1885    15333             INTERFACE:    ADDR function
     1886    15334             PARAMETERS:   None passed.
     1887    15335             DATA:         MCA_B.FILE.DATA - input
     1888    15336                           MCA_B.DIRECTORY.TOTAL - input
     1889    15337                           MCA_B.FILE.SIZE - input
     1890    15338                           OBJECT.BCD.FILENAME - input
     1891    15339                           DKEND.BCD_ - output
     1892    15340                           DKEND.CHECKSUM - output
     1893    15341                           BCD_B(0) - output
     1894    15342                           BCD# - output
     1895    15343             DESCRIPTION:  This procedure sets up a dummy $DKEND card for
     1896    15344                           DIPPER object decks.
     1897    15345        */
     1898    15346
     1899    15347    1   GC_MAKE_DKEND_CARD: PROC ;
     1900    15348
     1901    15349    2      DCL FILE$        PTR ALIGNED ;
     1902    15350           %DISKETTE_FILE   (STCLASS = "BASED (FILE$)") ;
     1903    15392    2      DCL HDR$         PTR ALIGNED ;
     1904    15393           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1905    15429           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:83   
     1906    15430        /* Code */
     1907    15431
     1908    15432           /* set up the constant part of the $DKEND card */
     1909    15433    2      DKEND.BCD_ = ' ' ;
     1910    15434    2      DKEND.BCD.CONTROL = '$' ;
     1911    15435    2      DKEND.BCD.TYPE = 'DKEND' ;
     1912    15436    2      DKEND.BCD.DATE = DISKETTE_HEADER.DATE_CREATED ;
     1913    15437    2      DKEND.BCD.MOD_DATE = DISKETTE_HEADER.DATE_CHANGED ;
     1914    15438    2      DKEND.BCD.LBL = OBJECT.BCD.LBL ;
     1915    15439
     1916    15440           /* set up the rest of the card based on the diskette data */
     1917    15441    3      DO SELECT (OBJECT.NIO_BCD.CLASS) ;
     1918    15442    3         SELECT ('H') /* header */ ;
     1919    15443    3         DKEND.BCD.REVISION = 'REV.00' ;
     1920    15444    3         DKEND.BCD.SEQ = '0002' ;
     1921    15445    3         SELECT ('F') /* directory or file */ ;
     1922    15446    3         IF OBJECT.NIO_BCD.FILE_NAME = 'DIRECTRY'
     1923    15447    4         THEN DO ;
     1924    15448    4                 DKEND.BCD.REVISION = 'REV.00' ;
     1925    15449    4                 CALL BINCHAR (DKEND.BCD.SEQ, ((MCA_B.DIRECTORY.SIZE + 255)/256) + 1) ;
     1926    15450    4              END /* THEN */ ;
     1927    15451    4         ELSE DO ;
     1928    15452    4                 FILE$ = ADDR (MCA_B.FILE.DATA) ;
     1929    15453    4                 CALL CONCAT (DKEND.BCD.REVISION, 'REV.0', DISKETTE_FILE.HDR.PGM_REV) ;
     1930    15454    4                 CALL BINCHAR (DKEND.BCD.SEQ, ((MCA_B.FILE.SIZE + 255) / 256) + 1) ;
     1931    15455    4              END /* ELSE */ ;
     1932    15456    3      END /* SELECT */ ;
     1933    15457
     1934    15458           /* finish up and place the card in the BCD card buffer */
     1935    15459    2      CALL TOU$CHECKSUM (0, ADDR (DKEND.BCD_), 20, DKEND.CHECKSUM) ;
     1936    15460    2      BCD_B(0) = DKEND_ ;
     1937    15461    2      BCD# = 1 ;
     1938    15462    2      RETURN ;
     1939    15463
     1940    15464    2   END GC_MAKE_DKEND_CARD ;
     1941    15465        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:84   
     1942    15466        /*I* NAME:         GC_CONVERT_8_TO_9
     1943    15467             AUTHOR:       Scott S. Sheppard
     1944    15468             PURPOSE:      Converts 8 bit half word to 9 bit half word
     1945    15469             INTERFACE:    None called.
     1946    15470             PARAMETERS:   MCA_DATA - input
     1947    15471                                      data originally stored with 8 bit bytes,
     1948    15472                                      but when transferred, changed to 9 bit
     1949    15473                           HOST_DATA - output
     1950    15474             DATA:         No external data accessed.
     1951    15475             DESCRIPTION:  When data is read from the MCA, the binary data
     1952    15476                           values are transferred as ASCII data.  Thus the
     1953    15477                           bytes are padded with an extra zero. This makes
     1954    15478                           the data represent incorrect  numerical values.
     1955    15479                           This procedure converts a field  received  from
     1956    15480                           the MCA so that it may be used by the HOST.
     1957    15481        */
     1958    15482
     1959    15483    1   GC_CONVERT_8_TO_9: PROC (MCA_DATA, HOST_DATA) ;
     1960    15484
     1961    15485    2      DCL 1 MCA_DATA ALIGNED,
     1962    15486    2            2 *       UBIN (18) UNAL,
     1963    15487    2            2 UP_BIT  BIT (1) UNAL,
     1964    15488    2            2 UPPER   UBIN (8) UNAL,
     1965    15489    2            2 LW_BIT  BIT (1) UNAL,
     1966    15490    2            2 LOWER   UBIN (8)  UNAL ;
     1967    15491    2      DCL 1 HOST_DATA ALIGNED,
     1968    15492    2            2 FILLER  UBIN (20) UNAL,
     1969    15493    2            2 UPPER   UBIN (8) UNAL,
     1970    15494    2            2 LOWER   UBIN (8)  UNAL ;
     1971    15495
     1972    15496        /* Code */
     1973    15497
     1974    15498    2      HOST_DATA.UPPER = MCA_DATA.LOWER ;
     1975    15499    2      HOST_DATA.LOWER = MCA_DATA.UPPER ;
     1976    15500    2      HOST_DATA.FILLER = 0 ;
     1977    15501    2      RETURN ;
     1978    15502
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:85   
     1979    15503    2   END GC_CONVERT_8_TO_9 ;
     1980    15504        /*I* NAME:         GC_CONVERT_8_TO_9_NO
     1981    15505             AUTHOR:       Scott S. Sheppard
     1982    15506             PURPOSE:      Converts 8 bit half word to 9 bit half word with
     1983    15507                           no byte swapping like GC_CONVERT_8_TO_9
     1984    15508             INTERFACE:    None called.
     1985    15509             PARAMETERS:   MCA_DATA - input
     1986    15510                                      data originally stored with 8 bit bytes,
     1987    15511                                      but when transferred, changed to 9 bit
     1988    15512                           HOST_DATA - output
     1989    15513             DATA:         No external data accessed.
     1990    15514             DESCRIPTION:  When data is read from the MCA, the binary data
     1991    15515                           values are transferred as ASCII data.  Thus the
     1992    15516                           bytes are padded with an extra zero. This makes
     1993    15517                           the data represent incorrect  numerical values.
     1994    15518                           This procedure converts a field  received  from
     1995    15519                           the MCA so that it may be used by the HOST.
     1996    15520        */
     1997    15521
     1998    15522    1   GC_CONVERT_8_TO_9_NO: PROC (MCA_DATA, HOST_DATA) ;
     1999    15523
     2000    15524    2      DCL 1 MCA_DATA ALIGNED,
     2001    15525    2            2 *       UBIN (18) UNAL,
     2002    15526    2            2 UPPER   UBIN (10) UNAL,
     2003    15527    2            2 LOWER   UBIN (8)  UNAL ;
     2004    15528    2      DCL 1 HOST_DATA ALIGNED,
     2005    15529    2            2 *       UBIN (18) UNAL,
     2006    15530    2            2 UPPER   UBIN (10) UNAL,
     2007    15531    2            2 LOWER   UBIN (8)  UNAL ;
     2008    15532
     2009    15533        /* Code */
     2010    15534
     2011    15535    2      HOST_DATA = MCA_DATA ;
     2012    15536    2      HOST_DATA.UPPER = HOST_DATA.UPPER / 2 ;
     2013    15537    2      RETURN ;
     2014    15538
     2015    15539    2   END GC_CONVERT_8_TO_9_NO ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:86   
     2016    15540        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:87   
     2017    15541    1   GC_ERR_MSG: PROC (MSG_CODE) ;
     2018    15542
     2019    15543    2      DCL MSG_CODE                   UBIN WORD ALIGNED ;
     2020    15544
     2021    15545        /* Code */
     2022    15546
     2023    15547    2      DUP.MSG_CODE = MSG_CODE ;
     2024    15548    2      CALL TOU$DU_USER_WRITE ;
     2025    15549    2      RETURN ;
     2026    15550
     2027    15551    2   END GC_ERR_MSG ;
     2028    15552    1   END TOU$GET_CARD ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:88   
--  Include file information  --

   XUR_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOU_RQSTS_E.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOU$GET_CARD.

   Procedure TOU$GET_CARD requires 2598 words for executable code.
   Procedure TOU$GET_CARD requires 84 words of local(AUTO) storage.

    No errors detected in file TOU$GET_CARD.:E05TSI    .

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:89   

 Object Unit name= TOU$GET_CARD                               File name= TOU$GET_CARD.:E05TOU
 UTS= JUL 30 '97 06:45:34.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    95    137  TOU$GET_CARD
    2  RoData even  UTS     87    127  TOU$GET_CARD
    3   DCB   even  none     0      0  M$SI
    4   DCB   even  none     0      0  M$IFAD
    5   DCB   even  none     0      0  M$DO
    6   Proc  even  none  2598   5046  TOU$GET_CARD
    7  RoData even  none   108    154  TOU$GET_CARD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     6      0   yes    yes     yes      Std        0  TOU$GET_CARD
     6      3          yes     yes      Std        0  TOU$GET_CP6_OBJECT
     6     10          yes     yes      Std        0  TOU$GET_BINARY_CARDS
     6     15          yes     yes      Std        0  TOU$GET_BCD_CARDS
     6     22          yes     yes      Std        0  TOU$GET_PATCH_CARDS
     6     27          yes     yes      Std        0  TOU$GET_CONFIG
     6     34          yes     yes      Std        0  TOU$GET_HEADER
     6     41          yes     yes      Std        0  TOU$GET_DIRECTORY
     6     46          yes     yes      Std        0  TOU$GET_FILE
     6     53          yes     yes      Std        0  TOU$MAKE_OBJECT_CARD
     6     62          yes     yes      Std        0  TOU$MAKE_DKEND_CARD
     6     67          yes     yes      Std        0  TOU$MAKE_DIR_OBJECT_CARD
     6     76          yes     yes      Std        0  TOU$MAKE_HDR_OBJECT_CARD
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:90   

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1      0  BCD_CARD                           1     25  BINARY_CARD
    1     57  ID                                 2      0  BCD_ASCII_TABLE
    1     64  BLOCK_SEQ

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       0 TOU$DEBLOCKER
 yes     yes           Std       0 TOU$CLEAR_BLOCK
 yes     yes           Std       4 TOU$CHECKSUM
 yes     yes           Std       4 XUR$SETDCBS
 yes     yes           Std       6 XUR$GETCMD
 yes     yes           Std       0 TOU$DU_USER_WRITE
 yes     yes           Std       1 XUR$ECHOLAST
 yes     yes           Std       2 XUR$ERRPTR
 yes     yes           Std       7 XUR$ERRMSG
 yes     yes           Std       4 TOU$CHECK_CARD_CHECKSUM
 yes     yes           Std       0 TOU$READ_MCA_DATA
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:91   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  DUP                                   DKEND
     LAST                                  OBJECT                                RECORD
     BCD#                                  CUR#                                  BIN#
     FILE_EOF                              M$SI                                  M$IFAD
     M$DO                                  DECK_SAVED                            B$TCB$
     PATCH_ROOT_NODE                       B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:92   


        1        1        /*M* TOU$GET_CARD     DEckfile Editor Routine IFAD Record Verifier */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        TOU$GET_CARD
       12       12              AUTHOR:      D. Augustine
       13       13              PURPOSE:     DEckfile Editor Routine IFAD Record Fetch
       14       14              DESCRIPTION: The entry points of this program call TOU$DEBLOCKER
       15       15                           to obtain input records from IFAD  and  then verify
       16       16                           the records and return them to the calling module.
       17       17                           +----------------------------------------------+
       18       18                           |                Record Sizes                  |
       19       19                           +----------------------------------------------+
       20       20                           |Size| Type   | Description                    |
       21       21                           +----+--------+--------------------------------+
       22       22                           |  0 |        | End of File Signalled          |
       23       23                           | 14 | BCD    | $OBJECT, PATCH, or $DKEND card |
       24       24                           | 27 | BINARY | Binary card for object deck    |
       25       25                           +----+--------+--------------------------------+
       26       26              REFERENCE:   CP-6 Release C01B
       27       27              LAST UPDATE: 05/28/85
       28       28        */
       29       29        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:93   
       30       30        /*F*  NAME:        TOU$GET_CARD
       31       31              DESCRIPTION: Procedure Nesting Hierarchy
       32       32
       33       33              TOU$GET_CARD: procedure ALTRET
       34       34
       35       35              TOU$GET_CP6_OBJECT: entry
       36       36              TOU$GET_BINARY_CARDS: entry ALTRET
       37       37              TOU$GET_BCD_CARDS: entry ALTRET
       38       38              TOU$GET_PATCH_CARDS: entry ALTRET
       39       39              TOU$GET_HEADER: entry ALTRET
       40       40              TOU$GET_DIRECTORY: entry ALTRET
       41       41              TOU$GET_FILE: entry ALTRET
       42       42              TOU$MAKE_OBJECT_CARD: entry ALTRET
       43       43              TOU$MAKE_DKEND_CARD: entry ALTRET
       44       44              TOU$MAKE_DIR_OBJECT_CARD: entry ALTRET
       45       45              TOU$MAKE_HDR_OBJECT_CARD: entry ALTRET
       46       46
       47       47                 GC_GET_CP6_OBJECT: procedure ALTRET
       48       48                 GC_GET_BINARY_CARDS: procedure ALTRET
       49       49                    GC_CHECK_APPLICABILITY: procedure
       50       50                 GC_GET_BCD_CARDS: procedure ALTRET
       51       51                 GC_GET_PATCH_CARDS: procedure ALTRET
       52       52                    GC_FORM_HEX_CARD: procedure
       53       53                    GC_FORM_OCTAL_CARD: procedure
       54       54                    GC_STORE_PATCH_CARD: procedure
       55       55                 GC_CONVERT_BCD_CARD: procedure
       56       56                 GC_OBJECT_CHECKS: procedure ALTRET
       57       57                 GC_CONVERT_BINARY_CARD: procedure ALTRET
       58       58                 GC_BINARY_CHECKS: procedure ALTRET
       59       59                    GC_PREFACE_CHECKS: procedure ALTRET
       60       60                 GC_SET_ID_BLOCK: procedure
       61       61                    GC_SET_FROM_BINARY_CARDS: procedure
       62       62                    GC_SET_FROM_DKEND: procedure
       63       63                 GC_PATCH_CHECKS: procedure ALTRET
       64       64                    GC_OCTAL_CHECKS: procedure ALTRET
       65       65                       GC_VERIFY_VALUE: procedure (START, STOP) ALTRET
       66       66                    GC_HEX_CHECKS: procedure ALTRET
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:94   
       67       67                       GC_VERIFY_VALUE: procedure (V, B) ALTRET
       68       68                 GC_DKEND_CHECKS: procedure ALTRET
       69       69                 GC_GET_HEADER: procedure ALTRET
       70       70                 GC_GET_DIRECTORY: procedure ALTRET
       71       71                 GC_GET_FILE: procedure ALTRET
       72       72                 GC_ADDR: procedure (I, O)
       73       73                 GC_MAKE_OBJECT_CARD: procedure (T) ALTRET
       74       74                 GC_MAKE_DKEND_CARD: procedure ALTRET
       75       75                 GC_CONVERT_8_TO_9: procedure ALTRET
       76       76                 GC_ERR_MSG: procedure
       77       77        */
       78       78        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:95   
       79       79        TOU$GET_CARD: PROC ALTRET ;

     79  6 000000   000000 700200 xent  TOU$GET_CARD TSX0  ! X66_AUTO_0
         6 000001   000124 000000                    ZERO    84,0
         6 000002   000005 710000 6                  TRA     s:13081

       80       80
       81       81        /* Include Files */
       82       82
       83       83           %INCLUDE B_ERRORS_C ;
       84     1210           %INCLUDE CP_6 ;
       85     6769           %INCLUDE CP_6_SUBS ;
       86     7309           %INCLUDE TOU_DEER_M ;
       87     8720           %INCLUDE TOU_RQSTS_E ;
       88     8795           %INCLUDE TO_PERR_C ;
       89     9380           %INCLUDE XU_MACRO_C ;
       90    12486           %INCLUDE XUR_ENTRY ;
       91    12518
       92    12519        /* Macros and redefs of macros */
       93    12520
       94    12521           %DUP (STCLASS = SYMREF) ;
       95    12664           %BCD_B (STCLASS = "BASED (DUP.BCD_V.PTR$)") ;
       96    12676           %BCD_CARD (STCLASS = STATIC SYMDEF) ;
       97    12696    1      DCL 1 BCD_ARRAY REDEF BCD_CARD ALIGNED,
       98    12697    1            2 DATA   (0:79) CHAR (1)  UNAL,
       99    12698    1            2 *      UBIN WORD ALIGNED ;
      100    12699           %BINARY_B (STCLASS = "BASED (DUP.BINARY_V.PTR$)") ;
      101    12713           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:96   
      102    12714           %BINARY_CARD (STCLASS = "STATIC SYMDEF") ;
      103    12741    1      DCL 1 PREFACE REDEF BINARY_CARD,
      104    12742    1            2 WD1,
      105    12743    1              3 TYPE         UBIN (3) UNAL,
      106    12744    1              3 V_COUNT      UBIN (6) UNAL,
      107    12745    1              3 *            UBIN (3) UNAL,
      108    12746    1              3 WOREAD_COUNT   UBIN (6) UNAL,
      109    12747    1              3 SIZE         UBIN HALF UNAL,
      110    12748    1            2 CHECKSUM       UBIN WORD ALIGNED,
      111    12749    1            2 CONTROL,
      112    12750    1              3 BLANK_COMMON UBIN  (18) UNAL,
      113    12751    1              3 MOD_8        BIT  (1) UNAL,
      114    12752    1              3 *            BIT  (2) UNAL,
      115    12753    1              3 ENTRY_COUNT  UBIN (15) UNAL,
      116    12754    1            2 ENTRY_ (0:9),
      117    12755    1              3 NAME         CHAR (4) UNAL,
      118    12756    1              3 ADDRESS      UBIN HALF UNAL,
      119    12757    1              3 *            UBIN (15) UNAL,
      120    12758    1              3 TYPE         UBIN (3) UNAL,
      121    12759    1            2 *              CHAR (12) UNAL;
      122    12760           %DKEND (STCLASS = SYMREF) ;
      123    12784           %ID (STCLASS = "STATIC SYMDEF") ;
      124    12801    1      DCL ID_ (0:17) REDEF ID CHAR (1) UNAL ;
      125    12802           %LAST (STCLASS = SYMREF) ;
      126    12815           %MCA_B (STCLASS = "BASED (DUP.BINARY_V.PTR$)") ;
      127    12885           %OBJECT (STCLASS = SYMREF) ;
      128    12948           %RECORD (STCLASS = SYMREF) ;
      129    12975           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:97   
      130    12976        /* Variables */
      131    12977
      132    12978    1      DCL BCD_ASCII_TABLE CHAR (64) CONSTANT SYMDEF CALIGNED INIT
      133    12979    1           ('0123456789[#@:>? ABCDEFGHI&.](<\^JKLMNOPQR-$*);''+/STUVWXYZ_,%="!') ;
      134    12980    1      DCL BCD_ASCII (0:63) REDEF BCD_ASCII_TABLE CHAR (1) CALIGNED ;
      135    12981    1      DCL BCD#   UBIN WORD SYMREF ALIGNED;
      136    12982    1      DCL CUR#   UBIN WORD SYMREF ALIGNED;
      137    12983    1      DCL BIN#   UBIN WORD SYMREF ALIGNED;
      138    12984    1      DCL BLOCK_SEQ CHAR (4) STATIC SYMDEF ALIGNED INIT (' ');
      139    12985    1      DCL CARD_SEQ UBIN WORD;
      140    12986    1      DCL FILE_EOF                   UBIN WORD SYMREF ALIGNED ;
      141    12987    1      DCL BINARY_TABLE (0:63) CONSTANT BIT (12) UNAL INIT
      142    12988    1                  ('001000000000'B,
      143    12989    1                   '000100000000'B,
      144    12990    1                   '000010000000'B,
      145    12991    1                   '000001000000'B,
      146    12992    1                   '000000100000'B,
      147    12993    1                   '000000010000'B,
      148    12994    1                   '000000001000'B,
      149    12995    1                   '000000000100'B,
      150    12996    1                   '000000000010'B,
      151    12997    1                   '000000000001'B,
      152    12998    1                   '000010000010'B,
      153    12999    1                   '000001000010'B,
      154    13000    1                   '000000100010'B,
      155    13001    1                   '000000010010'B,
      156    13002    1                   '000000001010'B,
      157    13003    1                   '000000000110'B,
      158    13004    1                   '000000000000'B,
      159    13005    1                   '100100000000'B,
      160    13006    1                   '100010000000'B,
      161    13007    1                   '100001000000'B,
      162    13008    1                   '100000100000'B,
      163    13009    1                   '100000010000'B,
      164    13010    1                   '100000001000'B,
      165    13011    1                   '100000000100'B,
      166    13012    1                   '100000000010'B,
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:98   
      167    13013    1                   '100000000001'B,
      168    13014    1                   '100000000000'B,
      169    13015    1                   '100001000010'B,
      170    13016    1                   '100000100010'B,
      171    13017    1                   '100000010010'B,
      172    13018    1                   '100000001010'B,
      173    13019    1                   '100000000110'B,
      174    13020    1                   '011000000000'B,
      175    13021    1                   '010100000000'B,
      176    13022    1                   '010010000000'B,
      177    13023    1                   '010001000000'B,
      178    13024    1                   '010000100000'B,
      179    13025    1                   '010000010000'B,
      180    13026    1                   '010000001000'B,
      181    13027    1                   '010000000100'B,
      182    13028    1                   '010000000010'B,
      183    13029    1                   '010000000001'B,
      184    13030    1                   '010000000000'B,
      185    13031    1                   '010001000010'B,
      186    13032    1                   '010000100010'B,
      187    13033    1                   '010000010010'B,
      188    13034    1                   '010000001010'B,
      189    13035    1                   '010000000110'B,
      190    13036    1                   '101000000000'B,
      191    13037    1                   '001100000000'B,
      192    13038    1                   '001010000000'B,
      193    13039    1                   '001001000000'B,
      194    13040    1                   '001000100000'B,
      195    13041    1                   '001000010000'B,
      196    13042    1                   '001000001000'B,
      197    13043    1                   '001000000100'B,
      198    13044    1                   '001000000010'B,
      199    13045    1                   '001000000001'B,
      200    13046    1                   '001010000010'B,
      201    13047    1                   '001001000010'B,
      202    13048    1                   '001000100010'B,
      203    13049    1                   '001000010010'B,
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:99   
      204    13050    1                   '001000001010'B,
      205    13051    1                   '001000000110'B) ;
      206    13052    1      DCL ID_BLOCK_SET       BIT (1) CALIGNED;
      207    13053    1      DCL PREFACE_FOUND      BIT (1) CALIGNED;
      208    13054    1      DCL SEQ                UBIN WORD STATIC ALIGNED INIT (0);
      209    13055
      210    13056        /* Data Control Blocks */
      211    13057
      212    13058    1      DCL M$SI               DCB ;
      213    13059    1      DCL M$IFAD             DCB ;
      214    13060    1      DCL M$DO               DCB ;
      215    13061
      216    13062        /* External Entry Points */
      217    13063
      218    13064    1      DCL TOU$DU_USER_WRITE          ENTRY ALTRET ;
      219    13065    1      DCL TOU$CHECK_CARD_CHECKSUM    ENTRY (4) ALTRET ;
      220    13066    1      DCL TOU$DEBLOCKER              ENTRY ALTRET ;
      221    13067    1      DCL TOU$CLEAR_BLOCK            ENTRY ALTRET ;
      222    13068    1      DCL TOU$READ_MCA_DATA          ENTRY ALTRET ;
      223    13069    1      DCL TOU$CHECKSUM               ENTRY (4) ALTRET ;
      224    13070           %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:100  
      225    13071        /*D*  NAME:        TOU$GET_CP6_OBJECT
      226    13072              ENTRY:
      227    13073              AUTHOR:      Scott S. Sheppard
      228    13074              INTERFACE:   GC_GET_CP6_OBJECT
      229    13075              DESCRIPTION: This entry point calls procedure GC_GET_CP6_OBJECT
      230    13076                           to return object cards to other modules.
      231    13077        */
      232    13078
      233    13079    1   TOU$GET_CP6_OBJECT: ENTRY ALTRET ;

  13079  6 000003   000000 700200 xent  TOU$GET_CP6* TSX0  ! X66_AUTO_0
         6 000004   000124 000000                    ZERO    84,0

      234    13080
      235    13081    1      CALL GC_GET_CP6_OBJECT ALTRET (TOU$GC_ALTRETURN) ;

  13081  6 000005   000106 701000 6                  TSX1    GC_GET_CP6_OBJECT
         6 000006   000105 702000 6                  TSX2    TOU$GC_ALTRETURN

      236    13082    1      RETURN ;

  13082  6 000007   000000 702200 xent               TSX2  ! X66_ARET

      237    13083
      238    13084        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:101  
      239    13085        /*D*  NAME:        TOU$GET_BINARY_CARDS
      240    13086              ENTRY:
      241    13087              AUTHOR:      Scott S. Sheppard
      242    13088              INTERFACE:   GC_GET_BINARY_CARDS
      243    13089              DESCRIPTION: This entry point calls procedure GC_GET_BINARY_CARDS
      244    13090                           to return binary cards to other modules.
      245    13091        */
      246    13092
      247    13093    1   TOU$GET_BINARY_CARDS: ENTRY ALTRET ;

  13093  6 000010   000000 700200 xent  TOU$GET_BIN* TSX0  ! X66_AUTO_0
         6 000011   000124 000000                    ZERO    84,0

      248    13094
      249    13095    1      CALL GC_GET_BINARY_CARDS ALTRET (TOU$GC_ALTRETURN) ;

  13095  6 000012   000322 701000 6                  TSX1    GC_GET_BINARY_CARDS
         6 000013   000105 702000 6                  TSX2    TOU$GC_ALTRETURN

      250    13096    1      RETURN ;

  13096  6 000014   000000 702200 xent               TSX2  ! X66_ARET

      251    13097
      252    13098        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:102  
      253    13099        /*D*  NAME:        TOU$GET_BCD_CARDS
      254    13100              ENTRY:
      255    13101              AUTHOR:      Scott S. Sheppard
      256    13102              INTERFACE:   GC_GET_BCD_CARDS
      257    13103              DESCRIPTION: This entry point calls procedure GC_GET_BCD_CARDS
      258    13104                           to return BCD cards to other modules.
      259    13105        */
      260    13106
      261    13107    1   TOU$GET_BCD_CARDS: ENTRY ALTRET ;

  13107  6 000015   000000 700200 xent  TOU$GET_BCD* TSX0  ! X66_AUTO_0
         6 000016   000124 000000                    ZERO    84,0

      262    13108
      263    13109    1      CALL GC_GET_BCD_CARDS ALTRET (TOU$GC_ALTRETURN) ;

  13109  6 000017   000403 701000 6                  TSX1    GC_GET_BCD_CARDS
         6 000020   000105 702000 6                  TSX2    TOU$GC_ALTRETURN

      264    13110    1      RETURN ;

  13110  6 000021   000000 702200 xent               TSX2  ! X66_ARET

      265    13111
      266    13112        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:103  
      267    13113        /*D*  NAME:        TOU$GET_PATCH_CARDS
      268    13114              ENTRY:
      269    13115              AUTHOR:      Scott S. Sheppard
      270    13116              INTERFACE:   GC_GET_PATCH_CARDS
      271    13117              DESCRIPTION: This entry point calls procedure GC_GET_PATCH_CARDS
      272    13118                           to return PATCH cards to other modules.
      273    13119        */
      274    13120
      275    13121    1   TOU$GET_PATCH_CARDS: ENTRY ALTRET ;

  13121  6 000022   000000 700200 xent  TOU$GET_PAT* TSX0  ! X66_AUTO_0
         6 000023   000124 000000                    ZERO    84,0

      276    13122
      277    13123    1      CALL GC_GET_PATCH_CARDS ALTRET (TOU$GC_ALTRETURN) ;

  13123  6 000024   000547 701000 6                  TSX1    GC_GET_PATCH_CARDS
         6 000025   000105 702000 6                  TSX2    TOU$GC_ALTRETURN

      278    13124    1      RETURN ;

  13124  6 000026   000000 702200 xent               TSX2  ! X66_ARET

      279    13125
      280    13126        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:104  
      281    13127        /*D*  NAME:        TOU$GET_CONFIG
      282    13128              ENTRY:
      283    13129              AUTHOR:      Kirk J. Dixon (Nov. 89)
      284    13130              INTERFACE:   GC_GET_CONFIG
      285    13131              DESCRIPTION: This entry point calls procedure GC_GET_CONFIG
      286    13132                           to return the MCA config to TOU$MERGE.
      287    13133        */
      288    13134
      289    13135    1   TOU$GET_CONFIG: ENTRY ALTRET ;

  13135  6 000027   000000 700200 xent  TOU$GET_CON* TSX0  ! X66_AUTO_0
         6 000030   000124 000000                    ZERO    84,0

      290    13136
      291    13137    1      CALL GC_GET_CONFIG ALTRET (TOU$GC_ALTRETURN) ;

  13137  6 000031   003354 701000 6                  TSX1    GC_GET_CONFIG
         6 000032   000105 702000 6                  TSX2    TOU$GC_ALTRETURN

      292    13138    1      RETURN ;

  13138  6 000033   000000 702200 xent               TSX2  ! X66_ARET

      293    13139
      294    13140        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:105  
      295    13141        /*D*  NAME:        TOU$GET_HEADER
      296    13142              ENTRY:
      297    13143              AUTHOR:      Scott S. Sheppard
      298    13144              INTERFACE:   GC_GET_HEADER
      299    13145              DESCRIPTION: This entry point calls procedure GC_GET_HEADER
      300    13146                           to return diskette headers to other modules.
      301    13147        */
      302    13148
      303    13149    1   TOU$GET_HEADER: ENTRY ALTRET ;

  13149  6 000034   000000 700200 xent  TOU$GET_HEA* TSX0  ! X66_AUTO_0
         6 000035   000124 000000                    ZERO    84,0

      304    13150
      305    13151    1      CALL GC_GET_HEADER ALTRET (TOU$GC_ALTRETURN) ;

  13151  6 000036   003466 701000 6                  TSX1    GC_GET_HEADER
         6 000037   000105 702000 6                  TSX2    TOU$GC_ALTRETURN

      306    13152    1      RETURN ;

  13152  6 000040   000000 702200 xent               TSX2  ! X66_ARET

      307    13153
      308    13154        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:106  
      309    13155        /*D*  NAME:        TOU$GET_DIRECTORY
      310    13156              ENTRY:
      311    13157              AUTHOR:      Scott S. Sheppard
      312    13158              INTERFACE:   GC_GET_DIRECTORY
      313    13159              DESCRIPTION: This entry point calls procedure GC_GET_DIRECTORY
      314    13160                           to return a diskette directory to other modules.
      315    13161        */
      316    13162
      317    13163    1   TOU$GET_DIRECTORY: ENTRY ALTRET ;

  13163  6 000041   000000 700200 xent  TOU$GET_DIR* TSX0  ! X66_AUTO_0
         6 000042   000124 000000                    ZERO    84,0

      318    13164
      319    13165    1      CALL GC_GET_DIRECTORY ALTRET (TOU$GC_ALTRETURN) ;

  13165  6 000043   003601 701000 6                  TSX1    GC_GET_DIRECTORY
         6 000044   000105 702000 6                  TSX2    TOU$GC_ALTRETURN

      320    13166    1      RETURN ;

  13166  6 000045   000000 702200 xent               TSX2  ! X66_ARET

      321    13167
      322    13168        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:107  
      323    13169        /*D*  NAME:        TOU$GET_FILE
      324    13170              ENTRY:
      325    13171              AUTHOR:      Scott S. Sheppard
      326    13172              INTERFACE:   GC_GET_FILE
      327    13173              DESCRIPTION: This entry point calls procedure GC_GET_FILE
      328    13174                           to return a diskette file to other modules.
      329    13175        */
      330    13176
      331    13177    1   TOU$GET_FILE: ENTRY ALTRET ;

  13177  6 000046   000000 700200 xent  TOU$GET_FILE TSX0  ! X66_AUTO_0
         6 000047   000124 000000                    ZERO    84,0

      332    13178
      333    13179    1      CALL GC_GET_FILE ALTRET (TOU$GC_ALTRETURN) ;

  13179  6 000050   004026 701000 6                  TSX1    GC_GET_FILE
         6 000051   000105 702000 6                  TSX2    TOU$GC_ALTRETURN

      334    13180    1      RETURN ;

  13180  6 000052   000000 702200 xent               TSX2  ! X66_ARET

      335    13181
      336    13182        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:108  
      337    13183        /*D*  NAME:        TOU$MAKE_OBJECT_CARD
      338    13184              ENTRY:
      339    13185              AUTHOR:      Scott S. Sheppard
      340    13186              INTERFACE:   GC_MAKE_OBJECT_CARD
      341    13187              DESCRIPTION: This entry point calls procedure GC_MAKE_OBJECT_CARD
      342    13188                           to construct an object card for DIPPER data.
      343    13189        */
      344    13190
      345    13191    1   TOU$MAKE_OBJECT_CARD: ENTRY ALTRET ;

  13191  6 000053   000000 700200 xent  TOU$MAKE_OB* TSX0  ! X66_AUTO_0
         6 000054   000124 000000                    ZERO    84,0

      346    13192
      347    13193    1      CALL GC_MAKE_OBJECT_CARD ('FILE     ') ;

  13193  6 000055   000000 236000 7                  LDQ     0
         6 000056   200007 756100                    STQ     PREFACE_FOUND+2,,AUTO
         6 000057   004464 701000 6                  TSX1    GC_MAKE_OBJECT_CARD
         6 000060   000000 011000                    NOP     0

      348    13194    1      RETURN ;

  13194  6 000061   000000 702200 xent               TSX2  ! X66_ARET

      349    13195
      350    13196        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:109  
      351    13197        /*D*  NAME:        TOU$MAKE_DKEND_CARD
      352    13198              ENTRY:
      353    13199              AUTHOR:      Scott S. Sheppard
      354    13200              INTERFACE:   GC_MAKE_DKEND_CARD
      355    13201              DESCRIPTION: This entry point calls procedure GC_MAKE_DKEND_CARD
      356    13202                           to construct a deck end card for DIPPER data.
      357    13203        */
      358    13204
      359    13205    1   TOU$MAKE_DKEND_CARD: ENTRY ALTRET ;

  13205  6 000062   000000 700200 xent  TOU$MAKE_DK* TSX0  ! X66_AUTO_0
         6 000063   000124 000000                    ZERO    84,0

      360    13206
      361    13207    1      CALL GC_MAKE_DKEND_CARD ;

  13207  6 000064   004633 701000 6                  TSX1    GC_MAKE_DKEND_CARD
         6 000065   000000 011000                    NOP     0

      362    13208    1      RETURN ;

  13208  6 000066   000000 702200 xent               TSX2  ! X66_ARET

      363    13209
      364    13210        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:110  
      365    13211        /*D*  NAME:        TOU$MAKE_DIR_OBJECT_CARD
      366    13212              ENTRY:
      367    13213              AUTHOR:      Scott S. Sheppard
      368    13214              INTERFACE:   GC_MAKE_OBJECT_CARD
      369    13215              DESCRIPTION: This entry point calls procedure GC_MAKE_OBJECT_CARD
      370    13216                           to construct an object card for DIPPER data.
      371    13217        */
      372    13218
      373    13219    1   TOU$MAKE_DIR_OBJECT_CARD: ENTRY ALTRET ;

  13219  6 000067   000000 700200 xent  TOU$MAKE_DI* TSX0  ! X66_AUTO_0
         6 000070   000124 000000                    ZERO    84,0

      374    13220
      375    13221    1      CALL GC_MAKE_OBJECT_CARD ('DIRECTORY') ;

  13221  6 000071   000001 236000 7                  LDQ     1
         6 000072   200007 756100                    STQ     PREFACE_FOUND+2,,AUTO
         6 000073   004464 701000 6                  TSX1    GC_MAKE_OBJECT_CARD
         6 000074   000000 011000                    NOP     0

      376    13222    1      RETURN ;

  13222  6 000075   000000 702200 xent               TSX2  ! X66_ARET

      377    13223
      378    13224        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:111  
      379    13225        /*D*  NAME:        TOU$MAKE_HDR_OBJECT_CARD
      380    13226              ENTRY:
      381    13227              AUTHOR:      Kathy Larkin
      382    13228              INTERFACE:   GC_MAKE_OBJECT_CARD
      383    13229              DESCRIPTION: This entry point calls procedure GC_MAKE_OBJECT_CARD
      384    13230                           to construct an object card for a DIPPER header file.
      385    13231        */
      386    13232
      387    13233    1   TOU$MAKE_HDR_OBJECT_CARD: ENTRY ALTRET ;

  13233  6 000076   000000 700200 xent  TOU$MAKE_HD* TSX0  ! X66_AUTO_0
         6 000077   000124 000000                    ZERO    84,0

      388    13234
      389    13235    1      CALL GC_MAKE_OBJECT_CARD ('HEADER   ') ;

  13235  6 000100   000002 236000 7                  LDQ     2
         6 000101   200007 756100                    STQ     PREFACE_FOUND+2,,AUTO
         6 000102   004464 701000 6                  TSX1    GC_MAKE_OBJECT_CARD
         6 000103   000000 011000                    NOP     0

      390    13236    1      RETURN ;

  13236  6 000104   000000 702200 xent               TSX2  ! X66_ARET

      391    13237
      392    13238        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:112  
      393    13239        /*D*  NAME:        TOU$GC_ALTRETURN
      394    13240              LABEL:
      395    13241              AUTHOR:      Scott S. Sheppard
      396    13242              DESCRIPTION: This  label  is  where  entry  points  into
      397    13243                           TOU$GET_CARD altret to so any errors may be
      398    13244                           altreturned back to the caller.
      399    13245        */
      400    13246
      401    13247    1   TOU$GC_ALTRETURN:
      402    13248
      403    13249    1      ALTRETURN ;

  13249  6 000105   000000 702200 xent  TOU$GC_ALTR* TSX2  ! X66_AALT

      404    13250
      405    13251        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:113  
      406    13252        /*I*  NAME:        GC_GET_CP6_OBJECT
      407    13253              AUTHORS:     David M. Augustine
      408    13254                           Scott S. Sheppard
      409    13255              PURPOSE:     Gets A $OBJECT card
      410    13256              INTERFACE:   TOU$DEBLOCKER
      411    13257                           TOU$CLEAR_BLOCK
      412    13258                           GC_CHECK_APPLICABILITY
      413    13259              INPUT:       RECORD.SIZE
      414    13260                           BCD_CARD.BCD.TYPE
      415    13261                           APPLICABLE
      416    13262                           FILE_EOF
      417    13263                           DECK_SAVED
      418    13264              OUTPUT:      OBJECT structure receives $Object card
      419    13265              DESCRIPTION: This procedure loops, accepting records from the IFAD
      420    13266                           source until a $OBJECT card which applies to  CP-6 is
      421    13267                           encountered or an end-of-file mark is encountered for
      422    13268                           a file that has had a deck saved from it.
      423    13269                           This  procedure  usually  returns  (RECORD.SIZE = 14)
      424    13270                           for a CP-6 $OBJECT card. However, an end-of-file mark
      425    13271                           (RECORD.SIZE = 0) is returned if the  file being read
      426    13272                           contained an object deck that has been  saved  in the
      427    13273                           deckfile. In this way, files which contain  no object
      428    13274                           decks for CP-6 are ignored  & save catalog processing
      429    13275                           is done only for the applicable files.
      430    13276        */
      431    13277
      432    13278    1   GC_GET_CP6_OBJECT: PROC ALTRET ;

  13278  6 000106   200006 741300       GC_GET_CP6_* STX1  ! PREFACE_FOUND+1,,AUTO

      433    13279
      434    13280    2      DCL OBJECT_FOUND  BIT (1) CALIGNED;
      435    13281    2      DCL DECK_SAVED    BIT (1) SYMREF CALIGNED ;
      436    13282    2      DCL APPLICABLE    BIT (1) CALIGNED;
      437    13283           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:114  
      438    13284        /* Code */
      439    13285
      440    13286    2      OBJECT_FOUND = %FALSE ;

  13286  6 000107   200007 450100                    STZ     OBJECT_FOUND,,AUTO

      441    13287    3      DO WHILE (FILE_EOF < 2 AND ~OBJECT_FOUND) ;

  13287  6 000110   000222 710000 6                  TRA     s:13311

      442    13288    3         CALL TOU$DEBLOCKER ALTRET (ERROR) ;

  13288  6 000111   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000112   000000 701000 xent               TSX1    TOU$DEBLOCKER
         6 000113   000233 702000 6                  TSX2    ERROR

      443    13289    4         DO CASE (RECORD.SIZE) ;

  13289  6 000114   000000 220000 xsym               LDX0    RECORD
         6 000115   000034 100003                    CMPX0   28,DU
         6 000116   000120 602010 6                  TNC     s:13289+4,X0
         6 000117   000222 710000 6                  TRA     s:13311
         6 000120   000217 710000 6                  TRA     s:13309
         6 000121   000222 710000 6                  TRA     s:13311
         6 000122   000222 710000 6                  TRA     s:13311
         6 000123   000222 710000 6                  TRA     s:13311
         6 000124   000222 710000 6                  TRA     s:13311
         6 000125   000222 710000 6                  TRA     s:13311
         6 000126   000222 710000 6                  TRA     s:13311
         6 000127   000222 710000 6                  TRA     s:13311
         6 000130   000222 710000 6                  TRA     s:13311
         6 000131   000222 710000 6                  TRA     s:13311
         6 000132   000222 710000 6                  TRA     s:13311
         6 000133   000222 710000 6                  TRA     s:13311
         6 000134   000222 710000 6                  TRA     s:13311
         6 000135   000222 710000 6                  TRA     s:13311
         6 000136   000154 710000 6                  TRA     s:13291
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:115  
         6 000137   000222 710000 6                  TRA     s:13311
         6 000140   000222 710000 6                  TRA     s:13311
         6 000141   000222 710000 6                  TRA     s:13311
         6 000142   000222 710000 6                  TRA     s:13311
         6 000143   000222 710000 6                  TRA     s:13311
         6 000144   000222 710000 6                  TRA     s:13311
         6 000145   000222 710000 6                  TRA     s:13311
         6 000146   000222 710000 6                  TRA     s:13311
         6 000147   000222 710000 6                  TRA     s:13311
         6 000150   000222 710000 6                  TRA     s:13311
         6 000151   000222 710000 6                  TRA     s:13311
         6 000152   000222 710000 6                  TRA     s:13311
         6 000153   000213 710000 6                  TRA     s:13307

      444    13290    4            CASE (14) ;

      445    13291    4               CALL GC_CONVERT_BCD_CARD ;

  13291  6 000154   001301 701000 6                  TSX1    GC_CONVERT_BCD_CARD
         6 000155   000000 011000                    NOP     0

      446    13292    4               IF BCD_CARD.BCD.TYPE = 'OBJECT'

  13292  6 000156   040000 106400                    CMPC    fill='040'O
         6 000157   000001 600010 1                  ADSC9   BCD_CARD+1               cn=3,n=8
         6 000160   000063 000006 2                  ADSC9   NO_BLANKS+10             cn=0,n=6
         6 000161   000207 601000 6                  TNZ     s:13305

      447    13293    5               THEN DO ;

      448    13294    5                       OBJECT.BCD_ = BCD_CARD.BCD_ ;

  13294  6 000162   040000 100400                    MLR     fill='040'O
         6 000163   000000 000120 1                  ADSC9   BCD_CARD                 cn=0,n=80
         6 000164   000000 000120 xsym               ADSC9   OBJECT                   cn=0,n=80

      449    13295    5                       CALL GC_CHECK_APPLICABILITY (APPLICABLE);
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:116  

  13295  6 000165   200010 630500                    EPPR0   APPLICABLE,,AUTO
         6 000166   200013 450500                    STP0    FILE$+1,,AUTO
         6 000167   000235 701000 6                  TSX1    GC_CHECK_APPLICABILITY
         6 000170   000000 011000                    NOP     0

      450    13296    5                       IF APPLICABLE

  13296  6 000171   200010 234100                    SZN     APPLICABLE,,AUTO
         6 000172   000203 605000 6                  TPL     s:13303

      451    13297    6                       THEN DO ;

      452    13298    6                               OBJECT_FOUND = %TRUE ;

  13298  6 000173   400000 236003                    LDQ     -131072,DU
         6 000174   200007 756100                    STQ     OBJECT_FOUND,,AUTO

      453    13299    6                               OBJECT.DECK_CHECKSUM = 0 ;

  13299  6 000175   000026 450000 xsym               STZ     OBJECT+22

      454    13300    6                               OBJECT.LOAD_SIZE = 0 ;

  13300  6 000176   000000 220003                    LDX0    0,DU
         6 000177   000025 440000 xsym               SXL0    OBJECT+21

      455    13301    6                               CALL GC_OBJECT_CHECKS ALTRET (ERROR) ;

  13301  6 000200   001323 701000 6                  TSX1    GC_OBJECT_CHECKS
         6 000201   000233 702000 6                  TSX2    ERROR

      456    13302    6                            END /* THEN */ ;

  13302  6 000202   000222 710000 6                  TRA     s:13311

      457    13303    5                       ELSE CALL TOU$CLEAR_BLOCK ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:117  

  13303  6 000203   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000204   000000 701000 xent               TSX1    TOU$CLEAR_BLOCK
         6 000205   000000 011000                    NOP     0

      458    13304    5                    END /* THEN */ ;

  13304  6 000206   000222 710000 6                  TRA     s:13311

      459    13305    4               ELSE CALL TOU$CLEAR_BLOCK ;

  13305  6 000207   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000210   000000 701000 xent               TSX1    TOU$CLEAR_BLOCK
         6 000211   000000 011000                    NOP     0
         6 000212   000222 710000 6                  TRA     s:13311

      460    13306    4            CASE (27) ;

      461    13307    4               CALL TOU$CLEAR_BLOCK ;

  13307  6 000213   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000214   000000 701000 xent               TSX1    TOU$CLEAR_BLOCK
         6 000215   000000 011000                    NOP     0
         6 000216   000222 710000 6                  TRA     s:13311

      462    13308    4            CASE (0) ;

      463    13309    4               OBJECT_FOUND = DECK_SAVED ;

  13309  6 000217   000000 236000 xsym               LDQ     DECK_SAVED
         6 000220   400000 376003                    ANQ     -131072,DU
         6 000221   200007 756100                    STQ     OBJECT_FOUND,,AUTO

      464    13310    4         END /* CASE */ ;

      465    13311    3      END /* WHILE */ ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:118  
  13311  6 000222   000000 235000 xsym               LDA     FILE_EOF
         6 000223   000002 115007                    CMPA    2,DL
         6 000224   000231 603000 6                  TRC     s:13312
         6 000225   200007 236100                    LDQ     OBJECT_FOUND,,AUTO
         6 000226   400000 376003                    ANQ     -131072,DU
         6 000227   400000 676003                    ERQ     -131072,DU
         6 000230   000111 601000 6                  TNZ     s:13288

      466    13312    2      RETURN;

  13312  6 000231   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 000232   000001 702211                    TSX2  ! 1,X1

      467    13313
      468    13314    2   ERROR:
      469    13315    2      ALTRETURN ;

  13315  6 000233   200006 221300       ERROR        LDX1  ! PREFACE_FOUND+1,,AUTO
         6 000234   000000 702211                    TSX2  ! 0,X1

      470    13316
      471    13317        /* END GC_GET_CP6_OBJECT */
      472    13318        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:119  
      473    13319        /*I* NAME:         GC_CHECK_APPLICABILITY
      474    13320             AUTHOR:       Kathy Larkin
      475    13321             PURPOSE:      Determine applicability of object deck
      476    13322             INTERFACE:    None called.
      477    13323             PARAMETERS:   APPLICABLE - output - set if deck found applicable
      478    13324             DATA:         OBJECT.BCD.DONT_APPLY.CP6 - blank if applies to CP-6
      479    13325                           OBJECT.BCD.DONT_APPLY.DPS90 - blank if applies to DPS90
      480    13326                           DUP.CPU_TYPE - set to type of master cpu
      481    13327             DESCRIPTION:  Checks  the  DONT_APPLY.CP6  character  of the
      482    13328                           object  card  to  determine  if  the  deck  is
      483    13329                           applicable  to  CP-6  systems.  Further checks
      484    13330                           the   DONT_APPLY.DPS90   character   if  we're
      485    13331                           running   on   a   DPS90,   as  determined  by
      486    13332                           DUP.CPU_TYPE.
      487    13333        */
      488    13334    2   GC_CHECK_APPLICABILITY: PROC (APPLICABLE);

  13334  6 000235   200012 741300       GC_CHECK_AP* STX1  ! DIR$+1,,AUTO

      489    13335
      490    13336    3      DCL APPLICABLE  BIT (1) CALIGNED;
      491    13337
      492    13338        /* Code */
      493    13339
      494    13340    3      IF (OBJECT.BCD.DONT_APPLY.CP6 = ' ')

  13340  6 000236   000006 236000 xsym               LDQ     OBJECT+6
         6 000237   777000 376003                    ANQ     -512,DU
         6 000240   040000 116003                    CMPQ    16384,DU
         6 000241   000314 601000 6                  TNZ     s:13353

      495    13341    4      THEN DO CASE (DUP.CPU_TYPE) ;

  13341  6 000242   000220 236000 xsym               LDQ     DUP+144
         6 000243   000033 772000                    QRL     27
         6 000244   000004 136007                    SBLQ    4,DL
         6 000245   000003 116007                    CMPQ    3,DL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:120  
         6 000246   000250 602006 6                  TNC     s:13341+6,QL
         6 000247   000307 710000 6                  TRA     s:13351
         6 000250   000253 710000 6                  TRA     s:13343
         6 000251   000253 710000 6                  TRA     s:13343
         6 000252   000271 710000 6                  TRA     s:13347

      496    13342    4              CASE (%DPS90, %DPS90XA) ;

      497    13343    4                 IF (OBJECT.BCD.DONT_APPLY.DPS90 = ' ')

  13343  6 000253   000007 236000 xsym               LDQ     OBJECT+7
         6 000254   000777 376003                    ANQ     511,DU
         6 000255   000040 116003                    CMPQ    32,DU
         6 000256   000264 601000 6                  TNZ     s:13345

      498    13344    4                 THEN APPLICABLE = %TRUE;

  13344  6 000257   200013 470500                    LDP0    @APPLICABLE,,AUTO
         6 000260   003100 060400                    CSL     bolr='003'O
         6 000261   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         6 000262   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         6 000263   000320 710000 6                  TRA     s:13355

      499    13345    4                 ELSE APPLICABLE = %FALSE;

  13345  6 000264   200013 470500                    LDP0    @APPLICABLE,,AUTO
         6 000265   003100 060400                    CSL     bolr='003'O
         6 000266   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         6 000267   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         6 000270   000320 710000 6                  TRA     s:13355

      500    13346    4              CASE (%DPS8000) ;

      501    13347    4                 IF (OBJECT.BCD.DONT_APPLY.DPS8000 = ' ')

  13347  6 000271   000007 236000 xsym               LDQ     OBJECT+7
         6 000272   777000 376007                    ANQ     -512,DL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:121  
         6 000273   040000 116007                    CMPQ    16384,DL
         6 000274   000302 601000 6                  TNZ     s:13349

      502    13348    4                 THEN APPLICABLE = %TRUE;

  13348  6 000275   200013 470500                    LDP0    @APPLICABLE,,AUTO
         6 000276   003100 060400                    CSL     bolr='003'O
         6 000277   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         6 000300   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         6 000301   000320 710000 6                  TRA     s:13355

      503    13349    4                 ELSE APPLICABLE = %FALSE;

  13349  6 000302   200013 470500                    LDP0    @APPLICABLE,,AUTO
         6 000303   003100 060400                    CSL     bolr='003'O
         6 000304   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         6 000305   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         6 000306   000320 710000 6                  TRA     s:13355

      504    13350    4              CASE (ELSE) ;

      505    13351    4                 APPLICABLE = %TRUE;

  13351  6 000307   200013 470500                    LDP0    @APPLICABLE,,AUTO
         6 000310   003100 060400                    CSL     bolr='003'O
         6 000311   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         6 000312   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1

      506    13352    4           END /* DO CASE */ ;

  13352  6 000313   000320 710000 6                  TRA     s:13355

      507    13353    3      ELSE APPLICABLE = %FALSE;

  13353  6 000314   200013 470500                    LDP0    @APPLICABLE,,AUTO
         6 000315   003100 060400                    CSL     bolr='003'O
         6 000316   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:122  
         6 000317   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1

      508    13354
      509    13355    3   END GC_CHECK_APPLICABILITY;

  13355  6 000320   200012 221300                    LDX1  ! DIR$+1,,AUTO
         6 000321   000001 702211                    TSX2  ! 1,X1

      510    13356    2   END GC_GET_CP6_OBJECT;
      511    13357        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:123  
      512    13358        /*I*  NAME:        GC_GET_BINARY_CARDS
      513    13359              AUTHORS:     David M. Augustine
      514    13360                           Scott S. Sheppard
      515    13361              PURPOSE:     Gets Binary cards
      516    13362              INTERFACE:   GC_ERR_MSG
      517    13363                           TOU$DEBLOCKER
      518    13364                           TOU$CHECKSUM
      519    13365              INPUT:       RECORD.SIZE
      520    13366                           BINARY_CARD
      521    13367                           BIN#
      522    13368              OUTPUT:      BINARY_B
      523    13369                           BIN#
      524    13370                           OBJECT.DECK_CHECKSUM
      525    13371              DESCRIPTION: This procedure gets all of the binary cards for
      526    13372                           the deck to be added from the IFAD input source
      527    13373                           The binary cards are stored in the BINARY_B array
      528    13374        */
      529    13375        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:124  
      530    13376    1   GC_GET_BINARY_CARDS: PROC ALTRET ;

  13376  6 000322   200006 741300       GC_GET_BINA* STX1  ! PREFACE_FOUND+1,,AUTO

      531    13377
      532    13378        /* Code */
      533    13379
      534    13380    2      CALL TOU$DEBLOCKER ALTRET (ERROR) ;

  13380  6 000323   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000324   000000 701000 xent               TSX1    TOU$DEBLOCKER
         6 000325   000401 702000 6                  TSX2    ERROR

      535    13381    2      BIN# = 0 ;

  13381  6 000326   000000 450000 xsym               STZ     BIN#

      536    13382    3      DO WHILE (RECORD.SIZE = 27) ;

  13382  6 000327   000000 220000 xsym               LDX0    RECORD
         6 000330   000033 100003                    CMPX0   27,DU
         6 000331   000371 601000 6                  TNZ     s:13392

      537    13383    3         CALL GC_CONVERT_BINARY_CARD ALTRET (ERROR) ;

  13383  6 000332   001421 701000 6                  TSX1    GC_CONVERT_BINARY_CARD
         6 000333   000401 702000 6                  TSX2    ERROR

      538    13384    3         CALL GC_BINARY_CHECKS ALTRET (ERROR) ;

  13384  6 000334   001570 701000 6                  TSX1    GC_BINARY_CHECKS
         6 000335   000401 702000 6                  TSX2    ERROR

      539    13385    3         BINARY_B(BIN#) = BINARY_CARD_;

  13385  6 000336   000000 236000 xsym               LDQ     BIN#
         6 000337   000150 402007                    MPY     104,DL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:125  
         6 000340   000101 470400 xsym               LDP0    DUP+65
         6 000341   000106 100400                    MLR     fill='000'O
         6 000342   000025 000150 1                  ADSC9   BINARY_CARD              cn=0,n=104
         6 000343   000000 000150                    ADSC9   0,Q,PR0                  cn=0,n=104

      540    13386    3         BIN# = BIN# + 1 ;

  13386  6 000344   000000 235000 xsym               LDA     BIN#
         6 000345   000001 035007                    ADLA    1,DL
         6 000346   000000 755000 xsym               STA     BIN#

      541    13387    3         CALL TOU$CHECKSUM (OBJECT.DECK_CHECKSUM, ADDR(BINARY_CARD.CHECKSUM), 1,

  13387  6 000347   000003 236000 7                  LDQ     3
         6 000350   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000351   000004 237000 7                  LDAQ    4
         6 000352   200102 757100                    STAQ    @MSG_CODE+5,,AUTO
         6 000353   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000354   200101 450500                    STP0    @MSG_CODE+4,,AUTO
         6 000355   000005 236000 7                  LDQ     5
         6 000356   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 000357   200100 630500                    EPPR0   @MSG_CODE+3,,AUTO
         6 000360   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 000361   000000 701000 xent               TSX1    TOU$CHECKSUM
         6 000362   000000 011000                    NOP     0

      542    13388    3                 OBJECT.DECK_CHECKSUM);
      543    13389    3         CALL TOU$DEBLOCKER ALTRET (ERROR) ;

  13389  6 000363   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000364   000000 701000 xent               TSX1    TOU$DEBLOCKER
         6 000365   000401 702000 6                  TSX2    ERROR

      544    13390    3      END /* WHILE */ ;

  13390  6 000366   000000 220000 xsym               LDX0    RECORD
         6 000367   000033 100003                    CMPX0   27,DU
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:126  
         6 000370   000332 600000 6                  TZE     s:13383

      545    13391
      546    13392    2      IF BIN# > 0

  13392  6 000371   000000 235000 xsym               LDA     BIN#
         6 000372   000375 600000 6                  TZE     s:13395

      547    13393    2      THEN RETURN ;

  13393  6 000373   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 000374   000001 702211                    TSX2  ! 1,X1

      548    13394    3      ELSE DO ;

      549    13395    3              CALL GC_ERR_MSG (%E$GGBC_NO_BINS) ;

  13395  6 000375   000007 236000 7                  LDQ     7
         6 000376   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 000377   005035 701000 6                  TSX1    GC_ERR_MSG
         6 000400   000000 011000                    NOP     0

      550    13396    3   ERROR:
      551    13397    3              ALTRETURN ;

  13397  6 000401   200006 221300       ERROR        LDX1  ! PREFACE_FOUND+1,,AUTO
         6 000402   000000 702211                    TSX2  ! 0,X1

      552    13398    3           END /* ELSE */ ;
      553    13399
      554    13400    2   END GC_GET_BINARY_CARDS ;
      555    13401        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:127  
      556    13402        /*I*  NAME:        GC_GET_BCD_CARDS
      557    13403              AUTHORS:     David M. Augustine
      558    13404                           Scott S. Sheppard
      559    13405              PURPOSE:     Gets BCD cards
      560    13406              INTERFACE:   GC_ERR_MSG
      561    13407                           TOU$DEBLOCKER
      562    13408                           TOU$CHECKSUM
      563    13409              INPUT:       RECORD.SIZE
      564    13410                           BCD_CARD
      565    13411                           BCD#
      566    13412              OUTPUT:      BCD_B
      567    13413                           BCD#
      568    13414                           OBJECT.DECK_CHECKSUM
      569    13415              DESCRIPTION: This procedure gets all of the  BCD   cards for
      570    13416                           the deck to be added from the IFAD input source
      571    13417                           The BCD cards are stored in the array  vectored
      572    13418                           by the DUP.BCD_V vector.
      573    13419                           BCD_B is an array template for the buffer.
      574    13420        */
      575    13421        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:128  
      576    13422    1   GC_GET_BCD_CARDS: PROC ALTRET ;

  13422  6 000403   200006 741300       GC_GET_BCD_* STX1  ! PREFACE_FOUND+1,,AUTO

      577    13423
      578    13424        /* Code */
      579    13425
      580    13426    2      BCD# = 0 ;

  13426  6 000404   000000 450000 xsym               STZ     BCD#

      581    13427    2      CALL GC_CONVERT_BCD_CARD ;

  13427  6 000405   001301 701000 6                  TSX1    GC_CONVERT_BCD_CARD
         6 000406   000000 011000                    NOP     0

      582    13428    3      DO WHILE (RECORD.SIZE = 14  &  BCD_CARD.BCD.TYPE ~= 'DKEND') ;

  13428  6 000407   000462 710000 6                  TRA     s:13438

      583    13429    3         CALL GC_SET_ID_BLOCK ;

  13429  6 000410   001750 701000 6                  TSX1    GC_SET_ID_BLOCK
         6 000411   000000 011000                    NOP     0

      584    13430    3         CALL GC_PATCH_CHECKS ALTRET (ERROR) ;

  13430  6 000412   002244 701000 6                  TSX1    GC_PATCH_CHECKS
         6 000413   000545 702000 6                  TSX2    ERROR

      585    13431    3         CALL TOU$CHECKSUM (0, ADDR (BCD_CARD.BCD_), 20, BCD_CARD.CHECKSUM) ;

  13431  6 000414   000010 236000 7                  LDQ     8
         6 000415   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000416   000012 237000 7                  LDAQ    10
         6 000417   200102 757100                    STAQ    @MSG_CODE+5,,AUTO
         6 000420   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:129  
         6 000421   200101 450500                    STP0    @MSG_CODE+4,,AUTO
         6 000422   000014 236000 7                  LDQ     12
         6 000423   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 000424   200100 630500                    EPPR0   @MSG_CODE+3,,AUTO
         6 000425   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 000426   000000 701000 xent               TSX1    TOU$CHECKSUM
         6 000427   000000 011000                    NOP     0

      586    13432    3         BCD_B(BCD#) = BCD_CARD_ ;

  13432  6 000430   000000 236000 xsym               LDQ     BCD#
         6 000431   000124 402007                    MPY     84,DL
         6 000432   000103 470400 xsym               LDP0    DUP+67
         6 000433   040106 100400                    MLR     fill='040'O
         6 000434   000000 000124 1                  ADSC9   BCD_CARD                 cn=0,n=84
         6 000435   000000 000124                    ADSC9   0,Q,PR0                  cn=0,n=84

      587    13433    3         BCD# = BCD# + 1 ;

  13433  6 000436   000000 235000 xsym               LDA     BCD#
         6 000437   000001 035007                    ADLA    1,DL
         6 000440   000000 755000 xsym               STA     BCD#

      588    13434    3         CALL TOU$CHECKSUM (OBJECT.DECK_CHECKSUM, ADDR (BCD_CARD.CHECKSUM), 1,

  13434  6 000441   000013 236000 7                  LDQ     11
         6 000442   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000443   000004 237000 7                  LDAQ    4
         6 000444   200102 757100                    STAQ    @MSG_CODE+5,,AUTO
         6 000445   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000446   200101 450500                    STP0    @MSG_CODE+4,,AUTO
         6 000447   000005 236000 7                  LDQ     5
         6 000450   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 000451   200100 630500                    EPPR0   @MSG_CODE+3,,AUTO
         6 000452   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 000453   000000 701000 xent               TSX1    TOU$CHECKSUM
         6 000454   000000 011000                    NOP     0
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:130  

      589    13435    3                 OBJECT.DECK_CHECKSUM) ;
      590    13436    3         CALL TOU$DEBLOCKER ALTRET (ERROR) ;

  13436  6 000455   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000456   000000 701000 xent               TSX1    TOU$DEBLOCKER
         6 000457   000545 702000 6                  TSX2    ERROR

      591    13437    3         CALL GC_CONVERT_BCD_CARD ;

  13437  6 000460   001301 701000 6                  TSX1    GC_CONVERT_BCD_CARD
         6 000461   000000 011000                    NOP     0

      592    13438    3      END /* WHILE */ ;

  13438  6 000462   400000 220003                    LDX0    -131072,DU
         6 000463   000000 221000 xsym               LDX1    RECORD
         6 000464   000016 101003                    CMPX1   14,DU
         6 000465   000467 600000 6                  TZE     s:13438+5
         6 000466   000000 220003                    LDX0    0,DU
         6 000467   400000 222003                    LDX2    -131072,DU
         6 000470   040000 106400                    CMPC    fill='040'O
         6 000471   000001 600010 1                  ADSC9   BCD_CARD+1               cn=3,n=8
         6 000472   000065 000005 2                  ADSC9   NO_BLANKS+12             cn=0,n=5
         6 000473   000475 601000 6                  TNZ     s:13438+11
         6 000474   000000 222003                    LDX2    0,DU
         6 000475   000000 636012                    EAQ     0,X2
         6 000476   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000477   000000 636010                    EAQ     0,X0
         6 000500   200076 376100                    ANQ     @MSG_CODE+1,,AUTO
         6 000501   000410 601000 6                  TNZ     s:13429

      593    13439
      594    13440    2      IF BCD_CARD.BCD.TYPE = 'DKEND'

  13440  6 000502   040000 106400                    CMPC    fill='040'O
         6 000503   000001 600010 1                  ADSC9   BCD_CARD+1               cn=3,n=8
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:131  
         6 000504   000065 000005 2                  ADSC9   NO_BLANKS+12             cn=0,n=5
         6 000505   000541 601000 6                  TNZ     s:13450

      595    13441    3      THEN DO ;

      596    13442    3              CALL GC_SET_ID_BLOCK ;

  13442  6 000506   001750 701000 6                  TSX1    GC_SET_ID_BLOCK
         6 000507   000000 011000                    NOP     0

      597    13443    3              CALL GC_DKEND_CHECKS ALTRET (ERROR) ;

  13443  6 000510   003251 701000 6                  TSX1    GC_DKEND_CHECKS
         6 000511   000545 702000 6                  TSX2    ERROR

      598    13444    3              CALL TOU$CHECKSUM (0, ADDR (BCD_CARD.BCD_), 20, BCD_CARD.CHECKSUM) ;

  13444  6 000512   000010 236000 7                  LDQ     8
         6 000513   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000514   000012 237000 7                  LDAQ    10
         6 000515   200102 757100                    STAQ    @MSG_CODE+5,,AUTO
         6 000516   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000517   200101 450500                    STP0    @MSG_CODE+4,,AUTO
         6 000520   000014 236000 7                  LDQ     12
         6 000521   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 000522   200100 630500                    EPPR0   @MSG_CODE+3,,AUTO
         6 000523   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 000524   000000 701000 xent               TSX1    TOU$CHECKSUM
         6 000525   000000 011000                    NOP     0

      599    13445    3              BCD_B(BCD#) = BCD_CARD_ ;

  13445  6 000526   000000 236000 xsym               LDQ     BCD#
         6 000527   000124 402007                    MPY     84,DL
         6 000530   000103 470400 xsym               LDP0    DUP+67
         6 000531   040106 100400                    MLR     fill='040'O
         6 000532   000000 000124 1                  ADSC9   BCD_CARD                 cn=0,n=84
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:132  
         6 000533   000000 000124                    ADSC9   0,Q,PR0                  cn=0,n=84

      600    13446    3              BCD# = BCD# + 1 ;

  13446  6 000534   000000 235000 xsym               LDA     BCD#
         6 000535   000001 035007                    ADLA    1,DL
         6 000536   000000 755000 xsym               STA     BCD#

      601    13447    3              RETURN ;

  13447  6 000537   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 000540   000001 702211                    TSX2  ! 1,X1

      602    13448    3           END /* THEN */ ;
      603    13449    3      ELSE DO ;

      604    13450    3              CALL GC_ERR_MSG (%E$GGBC_NO_DKEND) ;

  13450  6 000541   000016 236000 7                  LDQ     14
         6 000542   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 000543   005035 701000 6                  TSX1    GC_ERR_MSG
         6 000544   000000 011000                    NOP     0

      605    13451    3   ERROR:
      606    13452    3              ALTRETURN ;

  13452  6 000545   200006 221300       ERROR        LDX1  ! PREFACE_FOUND+1,,AUTO
         6 000546   000000 702211                    TSX2  ! 0,X1

      607    13453    3           END /* ELSE */ ;
      608    13454
      609    13455    2   END GC_GET_BCD_CARDS ;
      610    13456        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:133  
      611    13457        /*I*  NAME:        GC_GET_PATCH_CARDS
      612    13458              AUTHOR:      Scott S. Sheppard
      613    13459              PURPOSE:     Gets PATCH cards
      614    13460              INTERFACE:   GC_FORM_HEX_CARD
      615    13461                           GC_FORM_OCTAL_CARD
      616    13462                           GC_STORE_PATCH_CARD
      617    13463                           TOU$DU_USER_WRITE
      618    13464              INPUT:       PATCH$ - pointer to the PCB for the PATCH input
      619    13465                           FILE_EOF
      620    13466              OUTPUT:      FILE_EOF
      621    13467                           DUP.MSG_CODE
      622    13468              DESCRIPTION: This procedure gets all of the PATCH  cards
      623    13469                           to be added to the object deck.
      624    13470        */
      625    13471        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:134  
      626    13472    1   GC_GET_PATCH_CARDS: PROC ALTRET ;

  13472  6 000547   200006 741300       GC_GET_PATC* STX1  ! PREFACE_FOUND+1,,AUTO

      627    13473
      628    13474    2      DCL PATCH$                     PTR ALIGNED ;
      629    13475    2      DCL B$TCB$                     PTR SYMREF ;
      630    13476    2      DCL PATCH_ROOT_NODE            SBIN SYMREF ;
      631    13477    2      DCL 1 PATCH_CARD CALIGNED,
      632    13478    2            2 BCD,
      633    13479    2              3 ADDRESS              CHAR (6) UNAL,
      634    13480    2              3 CS_RW                CHAR (1) UNAL,
      635    13481    2              3 TYPE                 CHAR (8) UNAL,
      636    13482    2              3 OCTAL_               CHAR (51) UNAL,
      637    13483    2              3 HEX_ REDEF OCTAL_,
      638    13484    2                4 INSTR1             CHAR (4) UNAL,
      639    13485    2                4 INSTR2             CHAR (4) UNAL,
      640    13486    2                4 *                  CHAR (43) UNAL,
      641    13487    2              3 REVLBL,
      642    13488    2                4 REVISION           CHAR (6) UNAL,
      643    13489    2                4 LABEL              CHAR (4) UNAL,
      644    13490    2              3 REVLBL_ REDEF REVLBL CHAR (10) UNAL,
      645    13491    2              3 *                    CHAR (4) UNAL,
      646    13492    2            2 BCD_ REDEF BCD CHAR (80) UNAL ;
      647    13493    2      DCL ZEROES                     CHAR (6) CONSTANT CALIGNED INIT ('000000') ;
      648    13494           %PARSE$OUT (STCLASS = BASED) ;
      649    13539           %B$TCB ;
      650    13542           %B$ALT ;
      651    13550           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:135  
      652    13551        /* Code */
      653    13552
      654    13553    2      CALL XUR$SETDCBS (DCBNUM (M$IFAD)) ;

  13553  6 000550   000000 236007 xsym               LDQ     M$IFAD,DL
         6 000551   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000552   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000553   200077 450500                    STP0    @MSG_CODE+2,,AUTO
         6 000554   200077 630500                    EPPR0   @MSG_CODE+2,,AUTO
         6 000555   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000556   000000 701000 xent               TSX1    XUR$SETDCBS
         6 000557   000000 011000                    NOP     0

      655    13554    3      DO WHILE (FILE_EOF = 0) ;

  13554  6 000560   000000 235000 xsym               LDA     FILE_EOF
         6 000561   000722 601000 6                  TNZ     s:13587

      656    13555    3         CALL XUR$GETCMD (PATCH_ROOT_NODE, PATCH$) WHENRETURN

  13555  6 000562   200007 630500                    EPPR0   PATCH$,,AUTO
         6 000563   200077 450500                    STP0    @MSG_CODE+2,,AUTO
         6 000564   000017 236000 7                  LDQ     15
         6 000565   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000566   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000567   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 000570   000000 701000 xent               TSX1    XUR$GETCMD
         6 000571   000640 702000 6                  TSX2    s:13573

      657    13556    4              DO ;

      658    13557    5                 DO CASE (PATCH$ -> OUT$BLK.CODE) ;

  13557  6 000572   200007 470500                    LDP0    PATCH$,,AUTO
         6 000573   000000 720100                    LXL0    0,,PR0
         6 000574   000020 100003                    CMPX0   16,DU
         6 000575   000577 602010 6                  TNC     s:13557+5,X0
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:136  
         6 000576   000637 710000 6                  TRA     s:13569
         6 000577   000635 710000 6                  TRA     s:13567
         6 000600   000617 710000 6                  TRA     s:13559
         6 000601   000626 710000 6                  TRA     s:13563
         6 000602   000637 710000 6                  TRA     s:13569
         6 000603   000637 710000 6                  TRA     s:13569
         6 000604   000637 710000 6                  TRA     s:13569
         6 000605   000637 710000 6                  TRA     s:13569
         6 000606   000637 710000 6                  TRA     s:13569
         6 000607   000637 710000 6                  TRA     s:13569
         6 000610   000637 710000 6                  TRA     s:13569
         6 000611   000637 710000 6                  TRA     s:13569
         6 000612   000637 710000 6                  TRA     s:13569
         6 000613   000637 710000 6                  TRA     s:13569
         6 000614   000637 710000 6                  TRA     s:13569
         6 000615   000637 710000 6                  TRA     s:13569
         6 000616   000635 710000 6                  TRA     s:13567

      659    13558    5                    CASE (%HEX_CARD) ;

      660    13559    5                       CALL GC_FORM_HEX_CARD ;

  13559  6 000617   000734 701000 6                  TSX1    GC_FORM_HEX_CARD
         6 000620   000000 011000                    NOP     0

      661    13560    5                       CALL GC_STORE_PATCH_CARD ;

  13560  6 000621   001244 701000 6                  TSX1    GC_STORE_PATCH_CARD
         6 000622   000000 011000                    NOP     0

      662    13561    5                       CALL GC_PATCH_CHECKS ALTRET (ERROR) ;

  13561  6 000623   002244 701000 6                  TSX1    GC_PATCH_CHECKS
         6 000624   000706 702000 6                  TSX2    ERROR
         6 000625   000637 710000 6                  TRA     s:13569

      663    13562    5                    CASE (%OCTAL_CARD) ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:137  

      664    13563    5                       CALL GC_FORM_OCTAL_CARD ;

  13563  6 000626   001112 701000 6                  TSX1    GC_FORM_OCTAL_CARD
         6 000627   000000 011000                    NOP     0

      665    13564    5                       CALL GC_STORE_PATCH_CARD ;

  13564  6 000630   001244 701000 6                  TSX1    GC_STORE_PATCH_CARD
         6 000631   000000 011000                    NOP     0

      666    13565    5                       CALL GC_PATCH_CHECKS ALTRET (ERROR) ;

  13565  6 000632   002244 701000 6                  TSX1    GC_PATCH_CHECKS
         6 000633   000706 702000 6                  TSX2    ERROR
         6 000634   000637 710000 6                  TRA     s:13569

      667    13566    5                    CASE (%NULL, %END) ;

      668    13567    5                       FILE_EOF = 1 ;

  13567  6 000635   000001 235007                    LDA     1,DL
         6 000636   000000 755000 xsym               STA     FILE_EOF

      669    13568    5                 END /* CASE */ ;

      670    13569    4              END /* WHENRETURN */ ;

  13569  6 000637   000720 710000 6                  TRA     s:13586

      671    13570           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:138  
      672    13571    3         WHENALTRETURN
      673    13572    4              DO ;

      674    13573    4                 IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.ERR# = %E$EOF

  13573  6 000640   000000 470400 xsym               LDP0    B$TCB$
         6 000641   000000 471500                    LDP1    0,,PR0
         6 000642   100102 236100                    LDQ     66,,PR1
         6 000643   377770 376007                    ANQ     131064,DL
         6 000644   000060 116007                    CMPQ    48,DL
         6 000645   000651 601000 6                  TNZ     s:13576

      675    13574    4                 THEN FILE_EOF = 1 ;

  13574  6 000646   000001 235007                    LDA     1,DL
         6 000647   000000 755000 xsym               STA     FILE_EOF
         6 000650   000720 710000 6                  TRA     s:13586

      676    13575    5                 ELSE DO ;

      677    13576    5                         DUP.MSG_CODE = %E$GGPC_BAD_INPUT ;

  13576  6 000651   000526 235007                    LDA     342,DL
         6 000652   000020 755000 xsym               STA     DUP+16

      678    13577    5                         CALL TOU$DU_USER_WRITE ;

  13577  6 000653   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 000654   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         6 000655   000000 011000                    NOP     0

      679    13578    5                         CALL XUR$ECHOLAST (DCBNUM (M$DO)) ;

  13578  6 000656   000000 236007 xsym               LDQ     M$DO,DL
         6 000657   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000660   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000661   200077 450500                    STP0    @MSG_CODE+2,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:139  
         6 000662   200077 630500                    EPPR0   @MSG_CODE+2,,AUTO
         6 000663   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000664   000000 701000 xent               TSX1    XUR$ECHOLAST
         6 000665   000000 011000                    NOP     0

      680    13579    5                         CALL XUR$ERRPTR (, DCBNUM (M$DO)) ;

  13579  6 000666   000000 236007 xsym               LDQ     M$DO,DL
         6 000667   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000670   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000671   200101 450500                    STP0    @MSG_CODE+4,,AUTO
         6 000672   000001 236000 xsym               LDQ     B_VECTNIL+1
         6 000673   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 000674   200100 630500                    EPPR0   @MSG_CODE+3,,AUTO
         6 000675   000020 631400 xsym               EPPR1   B_VECTNIL+16
         6 000676   000000 701000 xent               TSX1    XUR$ERRPTR
         6 000677   000000 011000                    NOP     0

      681    13580    5                         CALL XUR$ERRMSG (PATCH$) ;

  13580  6 000700   200007 630500                    EPPR0   PATCH$,,AUTO
         6 000701   200076 450500                    STP0    @MSG_CODE+1,,AUTO
         6 000702   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000703   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000704   000000 701000 xent               TSX1    XUR$ERRMSG
         6 000705   000000 011000                    NOP     0

      682    13581    5   ERROR:
      683    13582    5                         CALL XUR$SETDCBS (DCBNUM (M$SI)) ;

  13582  6 000706   000000 236007 xsym  ERROR        LDQ     M$SI,DL
         6 000707   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000710   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000711   200077 450500                    STP0    @MSG_CODE+2,,AUTO
         6 000712   200077 630500                    EPPR0   @MSG_CODE+2,,AUTO
         6 000713   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000714   000000 701000 xent               TSX1    XUR$SETDCBS
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:140  
         6 000715   000000 011000                    NOP     0

      684    13583    5                         ALTRETURN ;

  13583  6 000716   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 000717   000000 702211                    TSX2  ! 0,X1

      685    13584    5                      END /* ELSE */ ;
      686    13585    4              END /* WHENALTRETURN */ ;
      687    13586    3      END /* WHILE */ ;

  13586  6 000720   000000 235000 xsym               LDA     FILE_EOF
         6 000721   000562 600000 6                  TZE     s:13555

      688    13587    2      CALL XUR$SETDCBS (DCBNUM (M$SI)) ;

  13587  6 000722   000000 236007 xsym               LDQ     M$SI,DL
         6 000723   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 000724   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 000725   200077 450500                    STP0    @MSG_CODE+2,,AUTO
         6 000726   200077 630500                    EPPR0   @MSG_CODE+2,,AUTO
         6 000727   000017 631400 xsym               EPPR1   B_VECTNIL+15
         6 000730   000000 701000 xent               TSX1    XUR$SETDCBS
         6 000731   000000 011000                    NOP     0

      689    13588    2      RETURN ;

  13588  6 000732   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 000733   000001 702211                    TSX2  ! 1,X1

      690    13589
      691    13590        /* END GC_GET_PATCH_CARDS */
      692    13591        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:141  
      693    13592    2   GC_FORM_HEX_CARD: PROC ;

  13592  6 000734   200034 741300       GC_FORM_HEX* STX1  ! @HOST_DATA+2,,AUTO

      694    13593
      695    13594    3      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      696    13595    3      DCL OUTBLK$                    PTR ALIGNED ;
      697    13596           %PARSE$OUT (STCLASS = BASED) ;
      698    13641           %PARSE$SYM (STCLASS = "BASED (OUTBLK$)") ;
      699    13679
      700    13680    3      PATCH_CARD.BCD_ = ' ' ;

  13680  6 000735   040100 100400                    MLR     fill='040'O
         6 000736   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         6 000737   200010 000120                    ADSC9   PATCH_CARD,,AUTO         cn=0,n=80

      701    13681    3      PATCH_CARD.BCD.TYPE = 'HEX' ;

  13681  6 000740   040100 100400                    MLR     fill='040'O
         6 000741   000067 000003 2                  ADSC9   NO_BLANKS+14             cn=0,n=3
         6 000742   200011 600010                    ADSC9   HDR$+1,,AUTO             cn=3,n=8

      702    13682    4      DO OUTBLK# = 0 TO PATCH$ -> OUT$BLK.NSUBLKS - 1 ;

  13682  6 000743   200035 450100                    STZ     OUTBLK#,,AUTO
         6 000744   001102 710000 6                  TRA     s:13706+3

      703    13683    4         OUTBLK$ = PATCH$ -> OUT$BLK.SUBLK$(OUTBLK#) ;

  13683  6 000745   200007 470500                    LDP0    PATCH$,,AUTO
         6 000746   200035 720100                    LXL0    OUTBLK#,,AUTO
         6 000747   000003 236110                    LDQ     3,X0,PR0
         6 000750   200036 756100                    STQ     OUTBLK$,,AUTO

      704    13684    5         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;

  13684  6 000751   200036 471500                    LDP1    OUTBLK$,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:142  
         6 000752   100000 721100                    LXL1    0,,PR1
         6 000753   000015 101003                    CMPX1   13,DU
         6 000754   000756 602011 6                  TNC     s:13684+5,X1
         6 000755   001077 710000 6                  TRA     s:13706
         6 000756   001077 710000 6                  TRA     s:13706
         6 000757   001077 710000 6                  TRA     s:13706
         6 000760   001077 710000 6                  TRA     s:13706
         6 000761   000773 710000 6                  TRA     s:13686
         6 000762   001020 710000 6                  TRA     s:13690
         6 000763   001023 710000 6                  TRA     s:13692
         6 000764   001026 710000 6                  TRA     s:13694
         6 000765   001035 710000 6                  TRA     s:13696
         6 000766   001044 710000 6                  TRA     s:13698
         6 000767   001053 710000 6                  TRA     s:13700
         6 000770   001062 710000 6                  TRA     s:13702
         6 000771   001077 710000 6                  TRA     s:13706
         6 000772   001071 710000 6                  TRA     s:13704

      705    13685    5            CASE (%ADDRESS) ;

      706    13686    5               CALL CONCAT (PATCH_CARD.BCD.ADDRESS,

  13686  6 000773   100004 236100                    LDQ     4,,PR1
         6 000774   000033 772000                    QRL     27
         6 000775   777773 622006                    EAX2    -5,QL
         6 000776   777777 662003                    ERX2    -1,DU
         6 000777   040100 100440                    MLR     fill='040'O
         6 001000   000046 000012 2                  ADSC9   ZEROES                   cn=0,n=*X2
         6 001001   200010 000006                    ADSC9   PATCH_CARD,,AUTO         cn=0,n=6
         6 001002   000000 623006                    EAX3    0,QL
         6 001003   000000 636012                    EAQ     0,X2
         6 001004   000022 772000                    QRL     18
         6 001005   000006 116007                    CMPQ    6,DL
         6 001006   001017 603000 6                  TRC     s:13686+20
         6 001007   200076 742100                    STX2    @MSG_CODE+1,,AUTO
         6 001010   777771 622012                    EAX2    -7,X2
         6 001011   777777 662003                    ERX2    -1,DU
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:143  
         6 001012   200076 235100                    LDA     @MSG_CODE+1,,AUTO
         6 001013   000022 771000                    ARL     18
         6 001014   040145 100540                    MLR     fill='040'O
         6 001015   100004 200013                    ADSC9   4,,PR1                   cn=1,n=*X3
         6 001016   200010 000012                    ADSC9   PATCH_CARD,A,AUTO        cn=0,n=*X2
         6 001017   001077 710000 6                  TRA     s:13706

      707    13687    5                       SUBSTR (ZEROES, 0, 4 - OUT$SYM.COUNT),
      708    13688    5                       SUBSTR (OUT$SYM.TEXT, 0, OUT$SYM.COUNT)) ;
      709    13689    5            CASE (%CONTROL_STORE) ;

      710    13690    5               PATCH_CARD.BCD.CS_RW = 'C' ;

  13690  6 001020   103000 236007                    LDQ     34304,DL
         6 001021   200011 552110                    STBQ    HDR$+1,'10'O,AUTO
         6 001022   001077 710000 6                  TRA     s:13706

      711    13691    5            CASE (%READ_WRITE) ;

      712    13692    5               PATCH_CARD.BCD.CS_RW = 'R' ;

  13692  6 001023   122000 236007                    LDQ     41984,DL
         6 001024   200011 552110                    STBQ    HDR$+1,'10'O,AUTO
         6 001025   001077 710000 6                  TRA     s:13706

      713    13693    5            CASE (%INSTR1) ;

      714    13694    5               PATCH_CARD.BCD.HEX_.INSTR1 = OUT$SYM.TEXT ;

  13694  6 001026   100004 236100                    LDQ     4,,PR1
         6 001027   000033 772000                    QRL     27
         6 001030   000000 622006                    EAX2    0,QL
         6 001031   040100 100540                    MLR     fill='040'O
         6 001032   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001033   200013 600004                    ADSC9   @APPLICABLE,,AUTO        cn=3,n=4
         6 001034   001077 710000 6                  TRA     s:13706

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:144  
      715    13695    5            CASE (%INSTR2) ;

      716    13696    5               PATCH_CARD.BCD.HEX_.INSTR2 = OUT$SYM.TEXT ;

  13696  6 001035   100004 236100                    LDQ     4,,PR1
         6 001036   000033 772000                    QRL     27
         6 001037   000000 622006                    EAX2    0,QL
         6 001040   040100 100540                    MLR     fill='040'O
         6 001041   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001042   200014 600004                    ADSC9   ID_LOC+1,,AUTO           cn=3,n=4
         6 001043   001077 710000 6                  TRA     s:13706

      717    13697    5            CASE (%INSTRB) ;

      718    13698    5               PATCH_CARD.BCD.OCTAL_ = OUT$SYM.TEXT ; /* entire HEX */

  13698  6 001044   100004 236100                    LDQ     4,,PR1
         6 001045   000033 772000                    QRL     27
         6 001046   000000 622006                    EAX2    0,QL
         6 001047   040100 100540                    MLR     fill='040'O
         6 001050   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001051   200013 600063                    ADSC9   @APPLICABLE,,AUTO        cn=3,n=51
         6 001052   001077 710000 6                  TRA     s:13706

      719    13699    5            CASE (%REV) ;

      720    13700    5               PATCH_CARD.BCD.REVLBL.REVISION = OUT$SYM.TEXT ;

  13700  6 001053   100004 236100                    LDQ     4,,PR1
         6 001054   000033 772000                    QRL     27
         6 001055   000000 622006                    EAX2    0,QL
         6 001056   040100 100540                    MLR     fill='040'O
         6 001057   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001060   200030 400006                    ADSC9   FILE_DATA$+2,,AUTO       cn=2,n=6
         6 001061   001077 710000 6                  TRA     s:13706

      721    13701    5            CASE (%LABEL) ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:145  

      722    13702    5               PATCH_CARD.BCD.REVLBL.LABEL = OUT$SYM.TEXT ;

  13702  6 001062   100004 236100                    LDQ     4,,PR1
         6 001063   000033 772000                    QRL     27
         6 001064   000000 622006                    EAX2    0,QL
         6 001065   040100 100540                    MLR     fill='040'O
         6 001066   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001067   200032 000004                    ADSC9   @MCA_DATA+1,,AUTO        cn=0,n=4
         6 001070   001077 710000 6                  TRA     s:13706

      723    13703    5            CASE (%REVLBL) ;

      724    13704    5               PATCH_CARD.BCD.REVLBL_ = OUT$SYM.TEXT ;

  13704  6 001071   100004 236100                    LDQ     4,,PR1
         6 001072   000033 772000                    QRL     27
         6 001073   000000 622006                    EAX2    0,QL
         6 001074   040100 100540                    MLR     fill='040'O
         6 001075   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001076   200030 400012                    ADSC9   FILE_DATA$+2,,AUTO       cn=2,n=10

      725    13705    5         END /* CASE */ ;

      726    13706    4      END /* DO */ ;

  13706  6 001077   200035 235100                    LDA     OUTBLK#,,AUTO
         6 001100   000001 035007                    ADLA    1,DL
         6 001101   200035 755100                    STA     OUTBLK#,,AUTO
         6 001102   200007 470500                    LDP0    PATCH$,,AUTO
         6 001103   000001 236100                    LDQ     1,,PR0
         6 001104   000022 772000                    QRL     18
         6 001105   200035 116100                    CMPQ    OUTBLK#,,AUTO
         6 001106   001110 600000 6                  TZE     s:13707
         6 001107   000745 603000 6                  TRC     s:13683

      727    13707    3      RETURN ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:146  

  13707  6 001110   200034 221300                    LDX1  ! @HOST_DATA+2,,AUTO
         6 001111   000001 702211                    TSX2  ! 1,X1

      728    13708    3   END GC_FORM_HEX_CARD ;
      729    13709        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:147  
      730    13710    2   GC_FORM_OCTAL_CARD: PROC ;

  13710  6 001112   200034 741300       GC_FORM_OCT* STX1  ! @HOST_DATA+2,,AUTO

      731    13711
      732    13712    3      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      733    13713    3      DCL OUTBLK$                    PTR ALIGNED ;
      734    13714           %PARSE$OUT (STCLASS = BASED) ;
      735    13759           %PARSE$SYM (STCLASS = "BASED (OUTBLK$)") ;
      736    13797
      737    13798        /* Code */
      738    13799
      739    13800    3      PATCH_CARD.BCD_ = ' ' ;

  13800  6 001113   040100 100400                    MLR     fill='040'O
         6 001114   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         6 001115   200010 000120                    ADSC9   PATCH_CARD,,AUTO         cn=0,n=80

      740    13801    3      PATCH_CARD.BCD.TYPE = 'OCTAL' ;

  13801  6 001116   040100 100400                    MLR     fill='040'O
         6 001117   000070 000005 2                  ADSC9   NO_BLANKS+15             cn=0,n=5
         6 001120   200011 600010                    ADSC9   HDR$+1,,AUTO             cn=3,n=8

      741    13802    4      DO OUTBLK# = 0 TO PATCH$ -> OUT$BLK.NSUBLKS - 1 ;

  13802  6 001121   200035 450100                    STZ     OUTBLK#,,AUTO
         6 001122   001234 710000 6                  TRA     s:13818+3

      742    13803    4         OUTBLK$ = PATCH$ -> OUT$BLK.SUBLK$(OUTBLK#) ;

  13803  6 001123   200007 470500                    LDP0    PATCH$,,AUTO
         6 001124   200035 720100                    LXL0    OUTBLK#,,AUTO
         6 001125   000003 236110                    LDQ     3,X0,PR0
         6 001126   200036 756100                    STQ     OUTBLK$,,AUTO

      743    13804    5         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:148  

  13804  6 001127   200036 471500                    LDP1    OUTBLK$,,AUTO
         6 001130   100000 721100                    LXL1    0,,PR1
         6 001131   000015 101003                    CMPX1   13,DU
         6 001132   001134 602011 6                  TNC     s:13804+5,X1
         6 001133   001231 710000 6                  TRA     s:13818
         6 001134   001231 710000 6                  TRA     s:13818
         6 001135   001231 710000 6                  TRA     s:13818
         6 001136   001231 710000 6                  TRA     s:13818
         6 001137   001151 710000 6                  TRA     s:13806
         6 001140   001231 710000 6                  TRA     s:13818
         6 001141   001231 710000 6                  TRA     s:13818
         6 001142   001231 710000 6                  TRA     s:13818
         6 001143   001231 710000 6                  TRA     s:13818
         6 001144   001231 710000 6                  TRA     s:13818
         6 001145   001205 710000 6                  TRA     s:13812
         6 001146   001214 710000 6                  TRA     s:13814
         6 001147   001176 710000 6                  TRA     s:13810
         6 001150   001223 710000 6                  TRA     s:13816

      744    13805    5            CASE (%ADDRESS) ;

      745    13806    5               CALL CONCAT (PATCH_CARD.BCD.ADDRESS,

  13806  6 001151   100004 236100                    LDQ     4,,PR1
         6 001152   000033 772000                    QRL     27
         6 001153   777771 622006                    EAX2    -7,QL
         6 001154   777777 662003                    ERX2    -1,DU
         6 001155   040100 100440                    MLR     fill='040'O
         6 001156   000046 000012 2                  ADSC9   ZEROES                   cn=0,n=*X2
         6 001157   200010 000006                    ADSC9   PATCH_CARD,,AUTO         cn=0,n=6
         6 001160   000000 623006                    EAX3    0,QL
         6 001161   000000 636012                    EAQ     0,X2
         6 001162   000022 772000                    QRL     18
         6 001163   000006 116007                    CMPQ    6,DL
         6 001164   001175 603000 6                  TRC     s:13806+20
         6 001165   200076 742100                    STX2    @MSG_CODE+1,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:149  
         6 001166   777771 622012                    EAX2    -7,X2
         6 001167   777777 662003                    ERX2    -1,DU
         6 001170   200076 235100                    LDA     @MSG_CODE+1,,AUTO
         6 001171   000022 771000                    ARL     18
         6 001172   040145 100540                    MLR     fill='040'O
         6 001173   100004 200013                    ADSC9   4,,PR1                   cn=1,n=*X3
         6 001174   200010 000012                    ADSC9   PATCH_CARD,A,AUTO        cn=0,n=*X2
         6 001175   001231 710000 6                  TRA     s:13818

      746    13807    5                       SUBSTR (ZEROES, 0, 6 - OUT$SYM.COUNT),
      747    13808    5                       SUBSTR (OUT$SYM.TEXT, 0, OUT$SYM.COUNT)) ;
      748    13809    5            CASE (%FIELD) ;

      749    13810    5               PATCH_CARD.BCD.OCTAL_ = OUT$SYM.TEXT ;

  13810  6 001176   100004 236100                    LDQ     4,,PR1
         6 001177   000033 772000                    QRL     27
         6 001200   000000 622006                    EAX2    0,QL
         6 001201   040100 100540                    MLR     fill='040'O
         6 001202   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001203   200013 600063                    ADSC9   @APPLICABLE,,AUTO        cn=3,n=51
         6 001204   001231 710000 6                  TRA     s:13818

      750    13811    5            CASE (%REV) ;

      751    13812    5               PATCH_CARD.BCD.REVLBL.REVISION = OUT$SYM.TEXT ;

  13812  6 001205   100004 236100                    LDQ     4,,PR1
         6 001206   000033 772000                    QRL     27
         6 001207   000000 622006                    EAX2    0,QL
         6 001210   040100 100540                    MLR     fill='040'O
         6 001211   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001212   200030 400006                    ADSC9   FILE_DATA$+2,,AUTO       cn=2,n=6
         6 001213   001231 710000 6                  TRA     s:13818

      752    13813    5            CASE (%LABEL) ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:150  
      753    13814    5               PATCH_CARD.BCD.REVLBL.LABEL = OUT$SYM.TEXT ;

  13814  6 001214   100004 236100                    LDQ     4,,PR1
         6 001215   000033 772000                    QRL     27
         6 001216   000000 622006                    EAX2    0,QL
         6 001217   040100 100540                    MLR     fill='040'O
         6 001220   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001221   200032 000004                    ADSC9   @MCA_DATA+1,,AUTO        cn=0,n=4
         6 001222   001231 710000 6                  TRA     s:13818

      754    13815    5            CASE (%REVLBL) ;

      755    13816    5               PATCH_CARD.BCD.REVLBL_ = OUT$SYM.TEXT ;

  13816  6 001223   100004 236100                    LDQ     4,,PR1
         6 001224   000033 772000                    QRL     27
         6 001225   000000 622006                    EAX2    0,QL
         6 001226   040100 100540                    MLR     fill='040'O
         6 001227   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
         6 001230   200030 400012                    ADSC9   FILE_DATA$+2,,AUTO       cn=2,n=10

      756    13817    5         END /* CASE */ ;

      757    13818    4      END /* DO */ ;

  13818  6 001231   200035 235100                    LDA     OUTBLK#,,AUTO
         6 001232   000001 035007                    ADLA    1,DL
         6 001233   200035 755100                    STA     OUTBLK#,,AUTO
         6 001234   200007 470500                    LDP0    PATCH$,,AUTO
         6 001235   000001 236100                    LDQ     1,,PR0
         6 001236   000022 772000                    QRL     18
         6 001237   200035 116100                    CMPQ    OUTBLK#,,AUTO
         6 001240   001242 600000 6                  TZE     s:13819
         6 001241   001123 603000 6                  TRC     s:13803

      758    13819    3      RETURN ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:151  
  13819  6 001242   200034 221300                    LDX1  ! @HOST_DATA+2,,AUTO
         6 001243   000001 702211                    TSX2  ! 1,X1

      759    13820
      760    13821    3   END GC_FORM_OCTAL_CARD ;
      761    13822        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:152  
      762    13823    2   GC_STORE_PATCH_CARD: PROC ;

  13823  6 001244   200034 741300       GC_STORE_PA* STX1  ! @HOST_DATA+2,,AUTO

      763    13824
      764    13825        /* Code */
      765    13826
      766    13827    3      BCD_CARD.BCD_ = PATCH_CARD.BCD_ ;

  13827  6 001245   040000 100500                    MLR     fill='040'O
         6 001246   200010 000120                    ADSC9   PATCH_CARD,,AUTO         cn=0,n=80
         6 001247   000000 000120 1                  ADSC9   BCD_CARD                 cn=0,n=80

      767    13828    3      CALL TOU$CHECKSUM (0, ADDR (BCD_CARD), 20, BCD_CARD.CHECKSUM) ;

  13828  6 001250   000010 236000 7                  LDQ     8
         6 001251   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 001252   000012 237000 7                  LDAQ    10
         6 001253   200102 757100                    STAQ    @MSG_CODE+5,,AUTO
         6 001254   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 001255   200101 450500                    STP0    @MSG_CODE+4,,AUTO
         6 001256   000014 236000 7                  LDQ     12
         6 001257   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 001260   200100 630500                    EPPR0   @MSG_CODE+3,,AUTO
         6 001261   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 001262   000000 701000 xent               TSX1    TOU$CHECKSUM
         6 001263   000000 011000                    NOP     0

      768    13829    3      CUR# = BCD# ;

  13829  6 001264   000000 235000 xsym               LDA     BCD#
         6 001265   000000 755000 xsym               STA     CUR#

      769    13830    3      BCD_B(BCD#) = BCD_CARD_ ;

  13830  6 001266   000000 236000 xsym               LDQ     BCD#
         6 001267   000124 402007                    MPY     84,DL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:153  
         6 001270   000103 470400 xsym               LDP0    DUP+67
         6 001271   040106 100400                    MLR     fill='040'O
         6 001272   000000 000124 1                  ADSC9   BCD_CARD                 cn=0,n=84
         6 001273   000000 000124                    ADSC9   0,Q,PR0                  cn=0,n=84

      770    13831    3      BCD# = BCD# + 1 ;

  13831  6 001274   000000 235000 xsym               LDA     BCD#
         6 001275   000001 035007                    ADLA    1,DL
         6 001276   000000 755000 xsym               STA     BCD#

      771    13832    3      RETURN ;

  13832  6 001277   200034 221300                    LDX1  ! @HOST_DATA+2,,AUTO
         6 001300   000001 702211                    TSX2  ! 1,X1

      772    13833
      773    13834    3   END GC_STORE_PATCH_CARD ;
      774    13835    2   END GC_GET_PATCH_CARDS ;
      775    13836        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:154  
      776    13837    1   GC_CONVERT_BCD_CARD: PROC;

  13837  6 001301   200012 741300       GC_CONVERT_* STX1  ! DIR$+1,,AUTO

      777    13838
      778    13839        /* Code */
      779    13840
      780    13841    3      DO CUR# = 0 TO 79;

  13841  6 001302   000000 450000 xsym               STZ     CUR#

      781    13842    3         BCD_ARRAY.DATA(CUR#) = BCD_ASCII(RECORD.BCD.DATA(CUR#));

  13842  6 001303   000000 235000 xsym               LDA     CUR#
         6 001304   000100 101405                    MRL     fill='000'O
         6 001305   000001 020001 xsym               ADSC6   RECORD+1,A               cn=0,n=1
         6 001306   200076 020006                    ADSC6   @MSG_CODE+1,,AUTO        cn=0,n=6
         6 001307   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 001310   040005 100406                    MLR     fill='040'O
         6 001311   000000 000001 2                  ADSC9   BCD_ASCII_TABLE,Q        cn=0,n=1
         6 001312   000000 000001 1                  ADSC9   BCD_CARD,A               cn=0,n=1

      782    13843    3      END /* DO */ ;

  13843  6 001313   000001 035007                    ADLA    1,DL
         6 001314   000000 755000 xsym               STA     CUR#
         6 001315   000120 115007                    CMPA    80,DL
         6 001316   001303 602000 6                  TNC     s:13842

      783    13844    2      BLOCK_SEQ = BCD_CARD.BCD.SEQ ;

  13844  6 001317   000023 236000 1                  LDQ     BCD_CARD+19
         6 001320   000064 756000 1                  STQ     BLOCK_SEQ

      784    13845    2      RETURN;

  13845  6 001321   200012 221300                    LDX1  ! DIR$+1,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:155  
         6 001322   000001 702211                    TSX2  ! 1,X1

      785    13846
      786    13847    2   END GC_CONVERT_BCD_CARD;
      787    13848        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:156  
      788    13849    1   GC_OBJECT_CHECKS: PROC ALTRET ;

  13849  6 001323   200012 741300       GC_OBJECT_C* STX1  ! DIR$+1,,AUTO

      789    13850
      790    13851        /* Code */
      791    13852
      792    13853    2      IF OBJECT.BCD.CONTROL = '$'

  13853  6 001324   040000 106400                    CMPC    fill='040'O
         6 001325   000000 000007 xsym               ADSC9   OBJECT                   cn=0,n=7
         6 001326   000020 000001 7                  ADSC9   16                       cn=0,n=1
         6 001327   001412 601000 6                  TNZ     s:13871

      793    13854    2      THEN IF OBJECT.BCD.SEQ = '0000'

  13854  6 001330   000023 236000 xsym               LDQ     OBJECT+19
         6 001331   000072 116000 2                  CMPQ    NO_BLANKS+17
         6 001332   001404 601000 6                  TNZ     s:13867

      794    13855    3         THEN DO ;

      795    13856    4                 DO SELECT (OBJECT.BCD.ASSEMBLER) ;

  13856  6 001333   000016 236000 xsym               LDQ     OBJECT+14
         6 001334   000777 376007                    ANQ     511,DL
         6 001335   000107 116007                    CMPQ    71,DL
         6 001336   001365 602000 6                  TNC     s:13856+26
         6 001337   000016 236000 xsym               LDQ     OBJECT+14
         6 001340   000777 376007                    ANQ     511,DL
         6 001341   000107 116007                    CMPQ    71,DL
         6 001342   001372 600000 6                  TZE     s:13858
         6 001343   000016 236000 xsym               LDQ     OBJECT+14
         6 001344   000777 376007                    ANQ     511,DL
         6 001345   000115 116007                    CMPQ    77,DL
         6 001346   001360 602000 6                  TNC     s:13856+21
         6 001347   000016 236000 xsym               LDQ     OBJECT+14
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:157  
         6 001350   000777 376007                    ANQ     511,DL
         6 001351   000115 116007                    CMPQ    77,DL
         6 001352   001372 600000 6                  TZE     s:13858
         6 001353   000016 236000 xsym               LDQ     OBJECT+14
         6 001354   000777 376007                    ANQ     511,DL
         6 001355   000120 116007                    CMPQ    80,DL
         6 001356   001376 601000 6                  TNZ     s:13862
         6 001357   001372 710000 6                  TRA     s:13858
         6 001360   000016 236000 xsym               LDQ     OBJECT+14
         6 001361   000777 376007                    ANQ     511,DL
         6 001362   000114 116007                    CMPQ    76,DL
         6 001363   001376 601000 6                  TNZ     s:13862
         6 001364   001372 710000 6                  TRA     s:13858
         6 001365   000016 236000 xsym               LDQ     OBJECT+14
         6 001366   000777 376007                    ANQ     511,DL
         6 001367   000102 116007                    CMPQ    66,DL
         6 001370   001376 601000 6                  TNZ     s:13862
         6 001371   001372 710000 6                  TRA     s:13858

      796    13857    4                    SELECT ('B', 'G', 'L', 'M', 'P') ;

      797    13858    4                    PREFACE_FOUND = %FALSE ;

  13858  6 001372   200005 450100                    STZ     PREFACE_FOUND,,AUTO

      798    13859    4                    ID_BLOCK_SET = %FALSE ;

  13859  6 001373   200004 450100                    STZ     ID_BLOCK_SET,,AUTO

      799    13860    4                    SEQ = 0;

  13860  6 001374   000065 450000 1                  STZ     SEQ
         6 001375   001420 710000 6                  TRA     s:13874

      800    13861    4                    SELECT (ELSE) ;

      801    13862    4                 CALL GC_ERR_MSG (%E$GOC_OBJ_ASSEMBLER) ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:158  

  13862  6 001376   000022 236000 7                  LDQ     18
         6 001377   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001400   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001401   000000 011000                    NOP     0

      802    13863    4                 ALTRETURN ;

  13863  6 001402   200012 221300                    LDX1  ! DIR$+1,,AUTO
         6 001403   000000 702211                    TSX2  ! 0,X1

      803    13864    4                 END /* SELECT */ ;

      804    13865    3              END /* THEN */ ;
      805    13866    3         ELSE DO ;

      806    13867    3                 CALL GC_ERR_MSG (%E$GOC_OBJ_SEQ) ;

  13867  6 001404   000024 236000 7                  LDQ     20
         6 001405   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001406   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001407   000000 011000                    NOP     0

      807    13868    3                 ALTRETURN ;

  13868  6 001410   200012 221300                    LDX1  ! DIR$+1,,AUTO
         6 001411   000000 702211                    TSX2  ! 0,X1

      808    13869    3              END /* ELSE */ ;
      809    13870    3      ELSE DO ;

      810    13871    3              CALL GC_ERR_MSG (%E$GOC_OBJ_CONTROL) ;

  13871  6 001412   000026 236000 7                  LDQ     22
         6 001413   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001414   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001415   000000 011000                    NOP     0
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:159  

      811    13872    3              ALTRETURN ;

  13872  6 001416   200012 221300                    LDX1  ! DIR$+1,,AUTO
         6 001417   000000 702211                    TSX2  ! 0,X1

      812    13873    3           END /* ELSE */ ;
      813    13874    2      RETURN;

  13874  6 001420   000001 702211                    TSX2  ! 1,X1

      814    13875
      815    13876    2   END GC_OBJECT_CHECKS;
      816    13877        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:160  
      817    13878    1   GC_CONVERT_BINARY_CARD: PROC ALTRET ;

  13878  6 001421   200010 741300       GC_CONVERT_* STX1  ! PATCH_CARD,,AUTO

      818    13879
      819    13880    2      DCL FOUND      BIT (1) CALIGNED;
      820    13881    2      DCL TABLE_INX  UBIN WORD ALIGNED ;
      821    13882
      822    13883        /* Code */
      823    13884
      824    13885    2      BINARY_CARD_.DATA = RECORD.BINARY.DATA.BINARY;

  13885  6 001422   040000 100400                    MLR     fill='040'O
         6 001423   000001 000140 xsym               ADSC9   RECORD+1                 cn=0,n=96
         6 001424   000025 000150 1                  ADSC9   BINARY_CARD              cn=0,n=104

      825    13886
      826    13887           /* Convert Label Field */
      827    13888    3      DO CUR# = 0 TO 3 ;

  13888  6 001425   000000 450000 xsym               STZ     CUR#

      828    13889    3         TABLE_INX = 0 ;

  13889  6 001426   200012 450100                    STZ     TABLE_INX,,AUTO

      829    13890    3         FOUND = %FALSE ;

  13890  6 001427   200011 450100                    STZ     FOUND,,AUTO

      830    13891    4         DO WHILE (~FOUND & TABLE_INX < 64) ;

  13891  6 001430   001447 710000 6                  TRA     s:13895

      831    13892    4            IF BINARY_TABLE(TABLE_INX) = RECORD.BINARY.DATA.LBL_SEQ(CUR#)

  13892  6 001431   200012 235100                    LDA     TABLE_INX,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:161  
         6 001432   000001 735000                    ALS     1
         6 001433   000000 236000 xsym               LDQ     CUR#
         6 001434   000001 736000                    QLS     1
         6 001435   000006 106405                    CMPC    fill='000'O
         6 001436   000020 020002 2                  ADSC6   BINARY_TABLE,A           cn=0,n=2
         6 001437   000031 020002 xsym               ADSC6   RECORD+25,Q              cn=0,n=2
         6 001440   001444 601000 6                  TNZ     s:13894

      832    13893    4            THEN FOUND = %TRUE ;

  13893  6 001441   400000 236003                    LDQ     -131072,DU
         6 001442   200011 756100                    STQ     FOUND,,AUTO
         6 001443   001447 710000 6                  TRA     s:13895

      833    13894    4            ELSE TABLE_INX = TABLE_INX + 1 ;

  13894  6 001444   200012 235100                    LDA     TABLE_INX,,AUTO
         6 001445   000001 035007                    ADLA    1,DL
         6 001446   200012 755100                    STA     TABLE_INX,,AUTO

      834    13895    4         END /* WHILE */ ;

  13895  6 001447   400000 220003                    LDX0    -131072,DU
         6 001450   200012 235100                    LDA     TABLE_INX,,AUTO
         6 001451   000100 115007                    CMPA    64,DL
         6 001452   001454 602000 6                  TNC     s:13895+5
         6 001453   000000 220003                    LDX0    0,DU
         6 001454   200011 236100                    LDQ     FOUND,,AUTO
         6 001455   400000 376003                    ANQ     -131072,DU
         6 001456   400000 676003                    ERQ     -131072,DU
         6 001457   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 001460   000000 636010                    EAQ     0,X0
         6 001461   200076 376100                    ANQ     @MSG_CODE+1,,AUTO
         6 001462   001431 601000 6                  TNZ     s:13892

      835    13896    3         IF FOUND

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:162  
  13896  6 001463   200011 234100                    SZN     FOUND,,AUTO
         6 001464   001472 605000 6                  TPL     s:13899

      836    13897    3         THEN BINARY_CARD.LBL_SEQ(CUR#) = BCD_ASCII(TABLE_INX) ;

  13897  6 001465   000000 236000 xsym               LDQ     CUR#
         6 001466   040006 100405                    MLR     fill='040'O
         6 001467   000000 000001 2                  ADSC9   BCD_ASCII_TABLE,A        cn=0,n=1
         6 001470   000055 000001 1                  ADSC9   BINARY_CARD+24,Q         cn=0,n=1
         6 001471   001500 710000 6                  TRA     s:13902

      837    13898    4         ELSE DO ;

      838    13899    4                 CALL GC_ERR_MSG (%E$GCBC_BIN_LBL_SEQ) ;

  13899  6 001472   000030 236000 7                  LDQ     24
         6 001473   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001474   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001475   000000 011000                    NOP     0

      839    13900    4                 ALTRETURN ;

  13900  6 001476   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 001477   000000 702211                    TSX2  ! 0,X1

      840    13901    4              END /* ELSE */ ;
      841    13902    3      END /* DO */ ;

  13902  6 001500   000001 036007                    ADLQ    1,DL
         6 001501   000000 756000 xsym               STQ     CUR#
         6 001502   000004 116007                    CMPQ    4,DL
         6 001503   001426 602000 6                  TNC     s:13889

      842    13903           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:163  
      843    13904           /* Convert Sequence Field */
      844    13905    3      DO CUR# = 4 TO 7 ;

  13905  6 001504   000004 235007                    LDA     4,DL
         6 001505   000000 755000 xsym               STA     CUR#

      845    13906    3         TABLE_INX = 0 ;

  13906  6 001506   200012 450100                    STZ     TABLE_INX,,AUTO

      846    13907    3         FOUND = %FALSE ;

  13907  6 001507   200011 450100                    STZ     FOUND,,AUTO

      847    13908    4         DO WHILE (~FOUND & TABLE_INX < 10) ;

  13908  6 001510   001527 710000 6                  TRA     s:13912

      848    13909    4            IF BINARY_TABLE(TABLE_INX) = RECORD.BINARY.DATA.LBL_SEQ(CUR#)

  13909  6 001511   200012 235100                    LDA     TABLE_INX,,AUTO
         6 001512   000001 735000                    ALS     1
         6 001513   000000 236000 xsym               LDQ     CUR#
         6 001514   000001 736000                    QLS     1
         6 001515   000006 106405                    CMPC    fill='000'O
         6 001516   000020 020002 2                  ADSC6   BINARY_TABLE,A           cn=0,n=2
         6 001517   000031 020002 xsym               ADSC6   RECORD+25,Q              cn=0,n=2
         6 001520   001524 601000 6                  TNZ     s:13911

      849    13910    4            THEN FOUND = %TRUE ;

  13910  6 001521   400000 236003                    LDQ     -131072,DU
         6 001522   200011 756100                    STQ     FOUND,,AUTO
         6 001523   001527 710000 6                  TRA     s:13912

      850    13911    4            ELSE TABLE_INX = TABLE_INX + 1 ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:164  
  13911  6 001524   200012 235100                    LDA     TABLE_INX,,AUTO
         6 001525   000001 035007                    ADLA    1,DL
         6 001526   200012 755100                    STA     TABLE_INX,,AUTO

      851    13912    4         END /* WHILE */ ;

  13912  6 001527   400000 220003                    LDX0    -131072,DU
         6 001530   200012 235100                    LDA     TABLE_INX,,AUTO
         6 001531   000012 115007                    CMPA    10,DL
         6 001532   001534 602000 6                  TNC     s:13912+5
         6 001533   000000 220003                    LDX0    0,DU
         6 001534   200011 236100                    LDQ     FOUND,,AUTO
         6 001535   400000 376003                    ANQ     -131072,DU
         6 001536   400000 676003                    ERQ     -131072,DU
         6 001537   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 001540   000000 636010                    EAQ     0,X0
         6 001541   200076 376100                    ANQ     @MSG_CODE+1,,AUTO
         6 001542   001511 601000 6                  TNZ     s:13909

      852    13913    3         IF FOUND

  13913  6 001543   200011 234100                    SZN     FOUND,,AUTO
         6 001544   001552 605000 6                  TPL     s:13916

      853    13914    3         THEN BINARY_CARD.LBL_SEQ(CUR#) = BCD_ASCII(TABLE_INX) ;

  13914  6 001545   000000 236000 xsym               LDQ     CUR#
         6 001546   040006 100405                    MLR     fill='040'O
         6 001547   000000 000001 2                  ADSC9   BCD_ASCII_TABLE,A        cn=0,n=1
         6 001550   000055 000001 1                  ADSC9   BINARY_CARD+24,Q         cn=0,n=1
         6 001551   001560 710000 6                  TRA     s:13919

      854    13915    4         ELSE DO ;

      855    13916    4                 CALL GC_ERR_MSG (%E$GCBC_BIN_SEQ) ;

  13916  6 001552   000032 236000 7                  LDQ     26
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:165  
         6 001553   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001554   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001555   000000 011000                    NOP     0

      856    13917    4                 ALTRETURN ;

  13917  6 001556   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 001557   000000 702211                    TSX2  ! 0,X1

      857    13918    4              END /* ELSE */ ;
      858    13919    3      END /* DO */ ;

  13919  6 001560   000001 036007                    ADLQ    1,DL
         6 001561   000000 756000 xsym               STQ     CUR#
         6 001562   000010 116007                    CMPQ    8,DL
         6 001563   001506 602000 6                  TNC     s:13906

      859    13920
      860    13921    2      BLOCK_SEQ = BINARY_CARD.LABEL_.SEQ ;

  13921  6 001564   000056 236000 1                  LDQ     BINARY_CARD+25
         6 001565   000064 756000 1                  STQ     BLOCK_SEQ

      861    13922    2      RETURN;

  13922  6 001566   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 001567   000001 702211                    TSX2  ! 1,X1

      862    13923
      863    13924    2   END GC_CONVERT_BINARY_CARD;
      864    13925        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:166  
      865    13926    1   GC_BINARY_CHECKS: PROC ALTRET ;

  13926  6 001570   200010 741300       GC_BINARY_C* STX1  ! PATCH_CARD,,AUTO

      866    13927
      867    13928        /* Code */
      868    13929
      869    13930    2      IF BINARY_CARD.LABEL_.LBL = OBJECT.BCD.LBL

  13930  6 001571   000055 236000 1                  LDQ     BINARY_CARD+24
         6 001572   000022 116000 xsym               CMPQ    OBJECT+18
         6 001573   001650 601000 6                  TNZ     s:13955

      870    13931    3      THEN DO ;

      871    13932    3              SEQ = SEQ + 1 ;

  13932  6 001574   000065 235000 1                  LDA     SEQ
         6 001575   000001 035007                    ADLA    1,DL
         6 001576   000065 755000 1                  STA     SEQ

      872    13933    3              CALL CHARBIN (CARD_SEQ, BINARY_CARD.LABEL_.SEQ);

  13933  6 001577   000100 305400                    DTB
         6 001600   000056 030004 1                  NDSC9   BINARY_CARD+25           cn=0,s=nosgn,sf=0,n=4
         6 001601   200076 000010                    NDSC9   @MSG_CODE+1,,AUTO        cn=0,s=lsgnf,sf=0,n=8
         6 001602   200077 235100                    LDA     @MSG_CODE+2,,AUTO
         6 001603   200003 755100                    STA     CARD_SEQ,,AUTO

      873    13934    3              IF CARD_SEQ = SEQ

  13934  6 001604   200003 236100                    LDQ     CARD_SEQ,,AUTO
         6 001605   000065 116000 1                  CMPQ    SEQ
         6 001606   001642 601000 6                  TNZ     s:13950

      874    13935    4              THEN DO ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:167  
      875    13936    4                      CALL TOU$CHECK_CARD_CHECKSUM (RECORD.BINARY.DATA.CS.WD1,

  13936  6 001607   000033 236000 7                  LDQ     27
         6 001610   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 001611   000036 237000 7                  LDAQ    30
         6 001612   200102 757100                    STAQ    @MSG_CODE+5,,AUTO
         6 001613   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 001614   200101 450500                    STP0    @MSG_CODE+4,,AUTO
         6 001615   000035 236000 7                  LDQ     29
         6 001616   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 001617   200100 630500                    EPPR0   @MSG_CODE+3,,AUTO
         6 001620   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 001621   000000 701000 xent               TSX1    TOU$CHECK_CARD_CHECKSUM
         6 001622   001667 702000 6                  TSX2    ERROR

      876    13937    4                              ADDR (RECORD.BINARY.DATA.CS.DATA),
      877    13938    4                              22,
      878    13939    4                              RECORD.BINARY.DATA.CS.CHECKSUM) ALTRET (ERROR) ;
      879    13940    4                      IF BINARY_CARD.WD1.TYPE = 4

  13940  6 001623   000025 236000 1                  LDQ     BINARY_CARD
         6 001624   700000 376003                    ANQ     -32768,DU
         6 001625   400000 116003                    CMPQ    -131072,DU
         6 001626   001632 601000 6                  TNZ     s:13942

      880    13941    4                      THEN CALL GC_PREFACE_CHECKS ALTRET (ERROR) ;

  13941  6 001627   001671 701000 6                  TSX1    GC_PREFACE_CHECKS
         6 001630   001667 702000 6                  TSX2    ERROR
         6 001631   001656 710000 6                  TRA     s:13959

      881    13942    4                      ELSE IF BINARY_CARD.WD1.TYPE = 2

  13942  6 001632   200000 116003                    CMPQ    65536,DU
         6 001633   001656 600000 6                  TZE     s:13959

      882    13943    4                         THEN /* Do Nothing */ ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:168  
      883    13944    5                         ELSE DO ;

      884    13945    5                                 CALL GC_ERR_MSG (%E$GBC_BIN_TYPE) ;

  13945  6 001634   000041 236000 7                  LDQ     33
         6 001635   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001636   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001637   000000 011000                    NOP     0

      885    13946    5                                 ALTRETURN ;

  13946  6 001640   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 001641   000000 702211                    TSX2  ! 0,X1

      886    13947    5                              END /* ELSE */ ;
      887    13948    4                   END /* THEN */ ;
      888    13949    4              ELSE DO ;

      889    13950    4                      CALL GC_ERR_MSG (%E$GBC_BIN_SEQ) ;

  13950  6 001642   000043 236000 7                  LDQ     35
         6 001643   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001644   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001645   000000 011000                    NOP     0

      890    13951    4                      ALTRETURN ;

  13951  6 001646   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 001647   000000 702211                    TSX2  ! 0,X1

      891    13952    4                   END /* ELSE */ ;
      892    13953    3           END /* THEN */ ;
      893    13954    3      ELSE DO ;

      894    13955    3              CALL GC_ERR_MSG (%E$GBC_BIN_LBL) ;

  13955  6 001650   000045 236000 7                  LDQ     37
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:169  
         6 001651   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001652   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001653   000000 011000                    NOP     0

      895    13956    3              ALTRETURN ;

  13956  6 001654   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 001655   000000 702211                    TSX2  ! 0,X1

      896    13957    3           END /* ELSE */ ;
      897    13958           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:170  
      898    13959    2      IF BIN# < %MAX_BINARY

  13959  6 001656   000000 235000 xsym               LDA     BIN#
         6 001657   002000 115007                    CMPA    1024,DL
         6 001660   001663 603000 6                  TRC     s:13962

      899    13960    2      THEN RETURN ;

  13960  6 001661   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 001662   000001 702211                    TSX2  ! 1,X1

      900    13961    3      ELSE DO ;

      901    13962    3              CALL GC_ERR_MSG (%E$GBC_TOO_MANY_BCARDS) ;

  13962  6 001663   000047 236000 7                  LDQ     39
         6 001664   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001665   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001666   000000 011000                    NOP     0

      902    13963    3   ERROR:
      903    13964    3              ALTRETURN ;

  13964  6 001667   200010 221300       ERROR        LDX1  ! PATCH_CARD,,AUTO
         6 001670   000000 702211                    TSX2  ! 0,X1

      904    13965    3           END /* ELSE */ ;
      905    13966
      906    13967        /* END GC_BINARY_CHECKS */
      907    13968        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:171  
      908    13969    2   GC_PREFACE_CHECKS: PROC ALTRET ;

  13969  6 001671   200012 741300       GC_PREFACE_* STX1  ! TABLE_INX,,AUTO

      909    13970
      910    13971        /* Code */
      911    13972
      912    13973    3      IF PREFACE_FOUND

  13973  6 001672   200005 234100                    SZN     PREFACE_FOUND,,AUTO
         6 001673   001747 604000 6                  TMI     s:13988

      913    13974    3      THEN /* Do Nothing */ ;
      914    13975    3      ELSE IF PREFACE.WD1.WOREAD_COUNT > 2  &  PREFACE.ENTRY_.TYPE(0) = 0

  13975  6 001674   400000 220003                    LDX0    -131072,DU
         6 001675   000025 236000 1                  LDQ     BINARY_CARD
         6 001676   000077 376003                    ANQ     63,DU
         6 001677   000003 116003                    CMPQ    3,DU
         6 001700   001702 603000 6                  TRC     s:13975+6
         6 001701   000000 220003                    LDX0    0,DU
         6 001702   400000 222003                    LDX2    -131072,DU
         6 001703   000031 236000 1                  LDQ     BINARY_CARD+4
         6 001704   000007 316007                    CANQ    7,DL
         6 001705   001707 600000 6                  TZE     s:13975+11
         6 001706   000000 222003                    LDX2    0,DU
         6 001707   000000 636012                    EAQ     0,X2
         6 001710   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 001711   000000 636010                    EAQ     0,X0
         6 001712   200076 376100                    ANQ     @MSG_CODE+1,,AUTO
         6 001713   001741 600000 6                  TZE     s:13985

      915    13976    4         THEN DO ;

      916    13977    4                 PREFACE_FOUND = %TRUE ;

  13977  6 001714   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:172  
         6 001715   200005 756100                    STQ     PREFACE_FOUND,,AUTO

      917    13978    4                 IF OBJECT.BCD.LOAD_TYPE = 'R'

  13978  6 001716   000005 236000 xsym               LDQ     OBJECT+5
         6 001717   000777 376003                    ANQ     511,DU
         6 001720   000122 116003                    CMPQ    82,DU
         6 001721   001726 601000 6                  TNZ     s:13980

      918    13979    4                 THEN OBJECT.LOAD_SIZE = PREFACE.WD1.SIZE + 72;

  13979  6 001722   000025 720000 1                  LXL0    BINARY_CARD
         6 001723   000110 622010                    EAX2    72,X0
         6 001724   000025 442000 xsym               SXL2    OBJECT+21
         6 001725   001747 710000 6                  TRA     s:13988

      919    13980    4                 ELSE IF OBJECT.BCD.ASSEMBLER = 'M'

  13980  6 001726   000016 236000 xsym               LDQ     OBJECT+14
         6 001727   000777 376007                    ANQ     511,DL
         6 001730   000115 116007                    CMPQ    77,DL
         6 001731   001736 601000 6                  TNZ     s:13982

      920    13981    4                    THEN OBJECT.LOAD_SIZE = PREFACE.WD1.SIZE + 10;

  13981  6 001732   000025 720000 1                  LXL0    BINARY_CARD
         6 001733   000012 622010                    EAX2    10,X0
         6 001734   000025 442000 xsym               SXL2    OBJECT+21
         6 001735   001747 710000 6                  TRA     s:13988

      921    13982    4                    ELSE OBJECT.LOAD_SIZE = PREFACE.WD1.SIZE;

  13982  6 001736   000025 720000 1                  LXL0    BINARY_CARD
         6 001737   000025 440000 xsym               SXL0    OBJECT+21

      922    13983    4              END /* THEN */ ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:173  
  13983  6 001740   001747 710000 6                  TRA     s:13988

      923    13984    4         ELSE DO ;

      924    13985    4                 CALL GC_ERR_MSG (%E$GPC_BIN_NO_PRIM) ;

  13985  6 001741   000051 236000 7                  LDQ     41
         6 001742   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 001743   005035 701000 6                  TSX1    GC_ERR_MSG
         6 001744   000000 011000                    NOP     0

      925    13986    4                 ALTRETURN ;

  13986  6 001745   200012 221300                    LDX1  ! TABLE_INX,,AUTO
         6 001746   000000 702211                    TSX2  ! 0,X1

      926    13987    4              END /* ELSE */ ;
      927    13988    3      RETURN;

  13988  6 001747   000001 702211                    TSX2  ! 1,X1

      928    13989
      929    13990    3   END GC_PREFACE_CHECKS;
      930    13991    2   END GC_BINARY_CHECKS;
      931    13992        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:174  
      932    13993    1   GC_SET_ID_BLOCK: PROC;

  13993  6 001750   200010 741300       GC_SET_ID_B* STX1  ! PATCH_CARD,,AUTO

      933    13994
      934    13995        /* Code */
      935    13996
      936    13997    2      IF OBJECT.BCD.LIBRARY = 'HMPCJ1'

  13997  6 001751   040000 106400                    CMPC    fill='040'O
         6 001752   000003 600006 xsym               ADSC9   OBJECT+3                 cn=3,n=6
         6 001753   000073 000006 2                  ADSC9   NO_BLANKS+18             cn=0,n=6
         6 001754   001762 601000 6                  TNZ     s:14001

      937    13998    2      THEN IF ID_BLOCK_SET

  13998  6 001755   200004 234100                    SZN     ID_BLOCK_SET,,AUTO
         6 001756   001770 604000 6                  TMI     s:14004

      938    13999    2         THEN /* Do Nothing */ ;
      939    14000    2         ELSE CALL GC_SET_FROM_BINARY_CARDS ;

  14000  6 001757   001772 701000 6                  TSX1    GC_SET_FROM_BINARY_CARDS
         6 001760   000000 011000                    NOP     0
         6 001761   001770 710000 6                  TRA     s:14004

      940    14001    2      ELSE IF BCD_CARD.BCD.TYPE = 'DKEND'

  14001  6 001762   040000 106400                    CMPC    fill='040'O
         6 001763   000001 600010 1                  ADSC9   BCD_CARD+1               cn=3,n=8
         6 001764   000065 000005 2                  ADSC9   NO_BLANKS+12             cn=0,n=5
         6 001765   001770 601000 6                  TNZ     s:14004

      941    14002    2         THEN CALL GC_SET_FROM_DKEND ;

  14002  6 001766   002234 701000 6                  TSX1    GC_SET_FROM_DKEND
         6 001767   000000 011000                    NOP     0
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:175  

      942    14003    2         ELSE /* Do Nothing */ ;
      943    14004    2      RETURN ;

  14004  6 001770   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 001771   000001 702211                    TSX2  ! 1,X1

      944    14005
      945    14006        /* END GC_SET_ID_BLOCK */
      946    14007        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:176  
      947    14008    2   GC_SET_FROM_BINARY_CARDS: PROC ;

  14008  6 001772   200012 741300       GC_SET_FROM* STX1  ! TABLE_INX,,AUTO

      948    14009
      949    14010    3      DCL ID_LOC UBIN HALF ALIGNED;
      950    14011    3      DCL 1 ID_RECORDS STATIC ALIGNED,
      951    14012    3            2 FIRST  CHAR (80) ALIGNED,
      952    14013    3            2 SECOND CHAR (80) ALIGNED,
      953    14014    3            2 *      UBIN WORD ALIGNED INIT (0) ;
      954    14015    3      DCL 1 ID_RECORDS_ (0:40)     REDEF ID_RECORDS ALIGNED,
      955    14016    3            2 *       UBIN WORD  ALIGNED;
      956    14017    3      DCL 1 ID_RECORD (0:40)     ALIGNED,
      957    14018    3            2 *       UBIN WORD  ALIGNED;
      958    14019    3      DCL ID_DATA_ (0:245) REDEF ID_RECORD UBIN (6) UNAL;
      959    14020    3      DCL 1 LOAD ALIGNED,
      960    14021    3            2 TYPE          UBIN (3) UNAL,
      961    14022    3            2 SYMBOL_OFFSET UBIN (6) UNAL,
      962    14023    3            2 *             UBIN (3) UNAL,
      963    14024    3            2 SIZE          UBIN (6) UNAL,
      964    14025    3            2 ADDRESS       UBIN HALF UNAL;
      965    14026    3      DCL LOAD_INX   UBIN HALF ALIGNED;
      966    14027    3      DCL L          UBIN WORD ALIGNED ;
      967    14028           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:177  
      968    14029        /* Code */
      969    14030
      970    14031    3      ID_RECORD = '0'B;

  14031  6 001773   000100 100400                    MLR     fill='000'O
         6 001774   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         6 001775   200014 000244                    ADSC9   ID_RECORD,,AUTO          cn=0,n=164

      971    14032    3      LOAD_INX = 0;

  14032  6 001776   000000 220003                    LDX0    0,DU
         6 001777   200066 740100                    STX0    LOAD_INX,,AUTO

      972    14033    3      LOAD = '0'B;

  14033  6 002000   200065 450100                    STZ     LOAD,,AUTO

      973    14034    3      BINARY_CARD = BINARY_B(0) ;

  14034  6 002001   000101 470400 xsym               LDP0    DUP+65
         6 002002   000000 100500                    MLR     fill='000'O
         6 002003   000000 000150                    ADSC9   0,,PR0                   cn=0,n=104
         6 002004   000025 000150 1                  ADSC9   BINARY_CARD              cn=0,n=104

      974    14035    3      ID_LOC = PREFACE.WD1.SIZE - 10;

  14035  6 002005   000025 722000 1                  LXL2    BINARY_CARD
         6 002006   777766 623012                    EAX3    -10,X2
         6 002007   200013 743100                    STX3    ID_LOC,,AUTO

      975    14036    3      BINARY_CARD = BINARY_B(BIN# - 2);

  14036  6 002010   000000 236000 xsym               LDQ     BIN#
         6 002011   000150 402007                    MPY     104,DL
         6 002012   000000 100506                    MLR     fill='000'O
         6 002013   077714 000150                    ADSC9   -52,Q,PR0                cn=0,n=104
         6 002014   000025 000150 1                  ADSC9   BINARY_CARD              cn=0,n=104
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:178  

      976    14037
      977    14038    3      CALL CONCAT (ID_RECORDS.FIRST,

  14038  6 002015   000025 236000 1                  LDQ     BINARY_CARD
         6 002016   000066 756000 1                  STQ     ID_RECORDS
         6 002017   040000 100400                    MLR     fill='040'O
         6 002020   000032 000114 1                  ADSC9   BINARY_CARD+5            cn=0,n=76
         6 002021   000067 000114 1                  ADSC9   ID_RECORDS+1             cn=0,n=76

      978    14039    3              BINARY_CARD.WRD_CHAR,
      979    14040    3              BINARY_CARD.DATA_CHAR);
      980    14041
      981    14042    3      BINARY_CARD = BINARY_B(BIN# - 1);

  14042  6 002022   000000 236000 xsym               LDQ     BIN#
         6 002023   000150 402007                    MPY     104,DL
         6 002024   000101 470400 xsym               LDP0    DUP+65
         6 002025   000000 100506                    MLR     fill='000'O
         6 002026   077746 000150                    ADSC9   -26,Q,PR0                cn=0,n=104
         6 002027   000025 000150 1                  ADSC9   BINARY_CARD              cn=0,n=104

      982    14043
      983    14044    3      CALL CONCAT (ID_RECORDS.SECOND,

  14044  6 002030   000025 236000 1                  LDQ     BINARY_CARD
         6 002031   000112 756000 1                  STQ     ID_RECORDS+20
         6 002032   040000 100400                    MLR     fill='040'O
         6 002033   000032 000114 1                  ADSC9   BINARY_CARD+5            cn=0,n=76
         6 002034   000113 000114 1                  ADSC9   ID_RECORDS+21            cn=0,n=76

      984    14045    3              BINARY_CARD.WRD_CHAR,
      985    14046    3              BINARY_CARD.DATA_CHAR);
      986    14047
      987    14048    4      DO WHILE (LOAD.ADDRESS + LOAD.SIZE < ID_LOC + 1);

  14048  6 002035   002051 710000 6                  TRA     s:14051
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:179  

      988    14049    4         LOAD_INX = LOAD_INX + LOAD.SIZE + 1;

  14049  6 002036   200065 236100                    LDQ     LOAD,,AUTO
         6 002037   000022 772000                    QRL     18
         6 002040   000077 376007                    ANQ     63,DL
         6 002041   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 002042   200066 236100                    LDQ     LOAD_INX,,AUTO
         6 002043   000022 772000                    QRL     18
         6 002044   200076 036100                    ADLQ    @MSG_CODE+1,,AUTO
         6 002045   000001 620006                    EAX0    1,QL
         6 002046   200066 740100                    STX0    LOAD_INX,,AUTO

      989    14050    4         LOAD = ID_RECORDS_ (LOAD_INX - 1);

  14050  6 002047   000065 236010 1                  LDQ     SEQ,X0
         6 002050   200065 756100                    STQ     LOAD,,AUTO

      990    14051    4      END /* WHILE */ ;

  14051  6 002051   200065 236100                    LDQ     LOAD,,AUTO
         6 002052   000022 772000                    QRL     18
         6 002053   000077 376007                    ANQ     63,DL
         6 002054   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 002055   200065 236100                    LDQ     LOAD,,AUTO
         6 002056   777777 376007                    ANQ     -1,DL
         6 002057   200076 036100                    ADLQ    @MSG_CODE+1,,AUTO
         6 002060   200077 756100                    STQ     @MSG_CODE+2,,AUTO
         6 002061   200013 236100                    LDQ     ID_LOC,,AUTO
         6 002062   000022 772000                    QRL     18
         6 002063   200077 116100                    CMPQ    @MSG_CODE+2,,AUTO
         6 002064   002036 603000 6                  TRC     s:14049

      991    14052           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:180  
      992    14053    4      DO WHILE (LOAD) ;

  14053  6 002065   200065 235100                    LDA     LOAD,,AUTO
         6 002066   002213 600000 6                  TZE     s:14071

      993    14054    4         IF LOAD.ADDRESS < ID_LOC

  14054  6 002067   200065 720100                    LXL0    LOAD,,AUTO
         6 002070   200013 100100                    CMPX0   ID_LOC,,AUTO
         6 002071   002127 603000 6                  TRC     s:14060

      994    14055    5         THEN DO ;

      995    14056    5                 LOAD_INX = LOAD_INX + ID_LOC - LOAD.ADDRESS;

  14056  6 002072   200013 235100                    LDA     ID_LOC,,AUTO
         6 002073   000022 771000                    ARL     18
         6 002074   200076 755100                    STA     @MSG_CODE+1,,AUTO
         6 002075   200066 236100                    LDQ     LOAD_INX,,AUTO
         6 002076   000022 772000                    QRL     18
         6 002077   200076 036100                    ADLQ    @MSG_CODE+1,,AUTO
         6 002100   200077 756100                    STQ     @MSG_CODE+2,,AUTO
         6 002101   200065 236100                    LDQ     LOAD,,AUTO
         6 002102   777777 376007                    ANQ     -1,DL
         6 002103   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 002104   200077 236100                    LDQ     @MSG_CODE+2,,AUTO
         6 002105   200100 136100                    SBLQ    @MSG_CODE+3,,AUTO
         6 002106   000000 621006                    EAX1    0,QL
         6 002107   200066 741100                    STX1    LOAD_INX,,AUTO

      996    14057    5                 LOAD.SIZE = LOAD.SIZE - ID_LOC + LOAD.ADDRESS;

  14057  6 002110   200076 755100                    STA     @MSG_CODE+1,,AUTO
         6 002111   200065 236100                    LDQ     LOAD,,AUTO
         6 002112   000022 772000                    QRL     18
         6 002113   000077 376007                    ANQ     63,DL
         6 002114   200076 136100                    SBLQ    @MSG_CODE+1,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:181  
         6 002115   200077 756100                    STQ     @MSG_CODE+2,,AUTO
         6 002116   200065 236100                    LDQ     LOAD,,AUTO
         6 002117   777777 376007                    ANQ     -1,DL
         6 002120   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 002121   200077 236100                    LDQ     @MSG_CODE+2,,AUTO
         6 002122   200100 036100                    ADLQ    @MSG_CODE+3,,AUTO
         6 002123   000022 736000                    QLS     18
         6 002124   200065 752110                    STCQ    LOAD,'10'O,AUTO

      997    14058    5                 CUR# = 0;

  14058  6 002125   000000 450000 xsym               STZ     CUR#

      998    14059    5              END /* THEN */ ;

  14059  6 002126   002136 710000 6                  TRA     s:14061

      999    14060    4         ELSE CUR# = LOAD.ADDRESS - ID_LOC;

  14060  6 002127   200013 235100                    LDA     ID_LOC,,AUTO
         6 002130   000022 771000                    ARL     18
         6 002131   200076 755100                    STA     @MSG_CODE+1,,AUTO
         6 002132   200065 236100                    LDQ     LOAD,,AUTO
         6 002133   777777 376007                    ANQ     -1,DL
         6 002134   200076 136100                    SBLQ    @MSG_CODE+1,,AUTO
         6 002135   000000 756000 xsym               STQ     CUR#

     1000    14061    5         DO L = 0 TO LOAD.SIZE - 1;

  14061  6 002136   200067 450100                    STZ     L,,AUTO
         6 002137   002154 710000 6                  TRA     s:14063+3

     1001    14062    5            ID_RECORD(CUR# + L) = ID_RECORDS_(LOAD_INX + L);

  14062  6 002140   000000 236000 xsym               LDQ     CUR#
         6 002141   200067 036100                    ADLQ    L,,AUTO
         6 002142   200076 756100                    STQ     @MSG_CODE+1,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:182  
         6 002143   200066 236100                    LDQ     LOAD_INX,,AUTO
         6 002144   000022 772000                    QRL     18
         6 002145   200067 036100                    ADLQ    L,,AUTO
         6 002146   000066 236006 1                  LDQ     ID_RECORDS,QL
         6 002147   200076 720100                    LXL0    @MSG_CODE+1,,AUTO
         6 002150   200014 756110                    STQ     ID_RECORD,X0,AUTO

     1002    14063    5         END /* DO */ ;

  14063  6 002151   200067 235100                    LDA     L,,AUTO
         6 002152   000001 035007                    ADLA    1,DL
         6 002153   200067 755100                    STA     L,,AUTO
         6 002154   200065 236100                    LDQ     LOAD,,AUTO
         6 002155   000022 772000                    QRL     18
         6 002156   000077 376007                    ANQ     63,DL
         6 002157   200067 116100                    CMPQ    L,,AUTO
         6 002160   002162 600000 6                  TZE     s:14064
         6 002161   002140 603000 6                  TRC     s:14062

     1003    14064    4         LOAD_INX = LOAD_INX + LOAD.SIZE + 1;

  14064  6 002162   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 002163   200066 236100                    LDQ     LOAD_INX,,AUTO
         6 002164   000022 772000                    QRL     18
         6 002165   200076 036100                    ADLQ    @MSG_CODE+1,,AUTO
         6 002166   000001 620006                    EAX0    1,QL
         6 002167   200066 740100                    STX0    LOAD_INX,,AUTO

     1004    14065    4         IF (ID_RECORDS_ (LOAD_INX - 1) = '0'B & LOAD_INX < 40)

  14065  6 002170   400000 221003                    LDX1    -131072,DU
         6 002171   000065 235010 1                  LDA     SEQ,X0
         6 002172   002174 600000 6                  TZE     s:14065+4
         6 002173   000000 221003                    LDX1    0,DU
         6 002174   400000 222003                    LDX2    -131072,DU
         6 002175   000050 100003                    CMPX0   40,DU
         6 002176   002200 602000 6                  TNC     s:14065+8
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:183  
         6 002177   000000 222003                    LDX2    0,DU
         6 002200   000000 636012                    EAQ     0,X2
         6 002201   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 002202   000000 636011                    EAQ     0,X1
         6 002203   200076 376100                    ANQ     @MSG_CODE+1,,AUTO
         6 002204   002207 600000 6                  TZE     s:14068

     1005    14066    4         THEN LOAD_INX = LOAD_INX + 1;

  14066  6 002205   000001 621010                    EAX1    1,X0
         6 002206   200066 741100                    STX1    LOAD_INX,,AUTO

     1006    14067    4         ELSE /* Don't advance */ ;
     1007    14068    4         LOAD = ID_RECORDS_ (LOAD_INX - 1);

  14068  6 002207   200066 220100                    LDX0    LOAD_INX,,AUTO
         6 002210   000065 236010 1                  LDQ     SEQ,X0
         6 002211   200065 756100                    STQ     LOAD,,AUTO

     1008    14069    4      END /* WHILE */ ;

  14069  6 002212   002067 601000 6                  TNZ     s:14054

     1009    14070
     1010    14071    4      DO CUR# = 0 TO 17;

  14071  6 002213   000000 450000 xsym               STZ     CUR#

     1011    14072    4         ID_(CUR#) = BCD_ASCII(ID_DATA_(CUR#));

  14072  6 002214   000000 235000 xsym               LDA     CUR#
         6 002215   000100 101505                    MRL     fill='000'O
         6 002216   200014 020001                    ADSC6   ID_RECORD,A,AUTO         cn=0,n=1
         6 002217   200076 020006                    ADSC6   @MSG_CODE+1,,AUTO        cn=0,n=6
         6 002220   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 002221   040005 100406                    MLR     fill='040'O
         6 002222   000000 000001 2                  ADSC9   BCD_ASCII_TABLE,Q        cn=0,n=1
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:184  
         6 002223   000057 000001 1                  ADSC9   ID,A                     cn=0,n=1

     1012    14073    4      END /* DO */ ;

  14073  6 002224   000001 035007                    ADLA    1,DL
         6 002225   000000 755000 xsym               STA     CUR#
         6 002226   000022 115007                    CMPA    18,DL
         6 002227   002214 602000 6                  TNC     s:14072

     1013    14074
     1014    14075    3      ID_BLOCK_SET = %TRUE ;

  14075  6 002230   400000 236003                    LDQ     -131072,DU
         6 002231   200004 756100                    STQ     ID_BLOCK_SET,,AUTO

     1015    14076    3      RETURN;

  14076  6 002232   200012 221300                    LDX1  ! TABLE_INX,,AUTO
         6 002233   000001 702211                    TSX2  ! 1,X1

     1016    14077
     1017    14078    3   END GC_SET_FROM_BINARY_CARDS ;
     1018    14079        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:185  
     1019    14080    2   GC_SET_FROM_DKEND: PROC ;

  14080  6 002234   200012 741300       GC_SET_FROM* STX1  ! TABLE_INX,,AUTO

     1020    14081
     1021    14082        /* Code */
     1022    14083
     1023    14084    3      DKEND.BCD_ = BCD_CARD.BCD_ ;

  14084  6 002235   040000 100400                    MLR     fill='040'O
         6 002236   000000 000120 1                  ADSC9   BCD_CARD                 cn=0,n=80
         6 002237   000000 000120 xsym               ADSC9   DKEND                    cn=0,n=80

     1024    14085    3      ID.REVISION = DKEND.BCD.REVISION ;

  14085  6 002240   040000 100400                    MLR     fill='040'O
         6 002241   000020 400006 xsym               ADSC9   DKEND+16                 cn=2,n=6
         6 002242   000060 400006 1                  ADSC9   ID+1                     cn=2,n=6

     1025    14086    3      RETURN ;

  14086  6 002243   000001 702211                    TSX2  ! 1,X1

     1026    14087
     1027    14088    3   END GC_SET_FROM_DKEND ;
     1028    14089    2   END GC_SET_ID_BLOCK;
     1029    14090        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:186  
     1030    14091    1   GC_PATCH_CHECKS: PROC ALTRET ;

  14091  6 002244   200034 741300       GC_PATCH_CH* STX1  ! @HOST_DATA+2,,AUTO

     1031    14092
     1032    14093        /* Code */
     1033    14094
     1034    14095    3      DO SELECT (BCD_CARD.BCD.TYPE) ;

  14095  6 002245   040000 106400                    CMPC    fill='040'O
         6 002246   000001 600010 1                  ADSC9   BCD_CARD+1               cn=3,n=8
         6 002247   000063 000006 2                  ADSC9   NO_BLANKS+10             cn=0,n=6
         6 002250   002257 602000 6                  TNC     s:14095+10
         6 002251   002272 600000 6                  TZE     s:14101
         6 002252   040000 106400                    CMPC    fill='040'O
         6 002253   000001 600010 1                  ADSC9   BCD_CARD+1               cn=3,n=8
         6 002254   000070 000005 2                  ADSC9   NO_BLANKS+15             cn=0,n=5
         6 002255   002300 601000 6                  TNZ     s:14104
         6 002256   002264 710000 6                  TRA     s:14097
         6 002257   040000 106400                    CMPC    fill='040'O
         6 002260   000001 600010 1                  ADSC9   BCD_CARD+1               cn=3,n=8
         6 002261   000067 000003 2                  ADSC9   NO_BLANKS+14             cn=0,n=3
         6 002262   002300 601000 6                  TNZ     s:14104
         6 002263   002267 710000 6                  TRA     s:14099

     1035    14096    3         SELECT ('OCTAL') ;

     1036    14097    3         CALL GC_OCTAL_CHECKS ALTRET (ERROR) ;

  14097  6 002264   002321 701000 6                  TSX1    GC_OCTAL_CHECKS
         6 002265   002317 702000 6                  TSX2    ERROR
         6 002266   002306 710000 6                  TRA     s:14108

     1037    14098    3         SELECT ('HEX') ;

     1038    14099    3         CALL GC_HEX_CHECKS ALTRET (ERROR) ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:187  
  14099  6 002267   002643 701000 6                  TSX1    GC_HEX_CHECKS
         6 002270   002317 702000 6                  TSX2    ERROR
         6 002271   002306 710000 6                  TRA     s:14108

     1039    14100    3         SELECT ('OBJECT') ;

     1040    14101    3         CALL GC_ERR_MSG (%E$GPC_NO_DKEND) ;

  14101  6 002272   000053 236000 7                  LDQ     43
         6 002273   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002274   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002275   000000 011000                    NOP     0

     1041    14102    3         ALTRETURN ;

  14102  6 002276   200034 221300                    LDX1  ! @HOST_DATA+2,,AUTO
         6 002277   000000 702211                    TSX2  ! 0,X1

     1042    14103    3         SELECT (ELSE) ;

     1043    14104    3      CALL GC_ERR_MSG (%E$GPC_BCD_TYPE) ;

  14104  6 002300   000055 236000 7                  LDQ     45
         6 002301   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002302   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002303   000000 011000                    NOP     0

     1044    14105    3      ALTRETURN ;

  14105  6 002304   200034 221300                    LDX1  ! @HOST_DATA+2,,AUTO
         6 002305   000000 702211                    TSX2  ! 0,X1

     1045    14106    3      END /* SELECT */ ;

     1046    14107
     1047    14108    2      IF BCD# < %MAX_PATCHES

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:188  
  14108  6 002306   000000 235000 xsym               LDA     BCD#
         6 002307   000310 115007                    CMPA    200,DL
         6 002310   002313 603000 6                  TRC     s:14111

     1048    14109    2      THEN RETURN ;

  14109  6 002311   200034 221300                    LDX1  ! @HOST_DATA+2,,AUTO
         6 002312   000001 702211                    TSX2  ! 1,X1

     1049    14110    3      ELSE DO ;

     1050    14111    3              CALL GC_ERR_MSG (%E$GPC_TOO_MANY_PCARDS) ;

  14111  6 002313   000057 236000 7                  LDQ     47
         6 002314   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002315   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002316   000000 011000                    NOP     0

     1051    14112    3   ERROR:
     1052    14113    3              ALTRETURN ;

  14113  6 002317   200034 221300       ERROR        LDX1  ! @HOST_DATA+2,,AUTO
         6 002320   000000 702211                    TSX2  ! 0,X1

     1053    14114    3           END /* ELSE */ ;
     1054    14115
     1055    14116    2   /* END GC_PATCH_CHECKS */ ;
     1056    14117        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:189  
     1057    14118    2   GC_OCTAL_CHECKS: PROC ALTRET ;

  14118  6 002321   200036 741300       GC_OCTAL_CH* STX1  ! OUTBLK$,,AUTO

     1058    14119
     1059    14120    3      DCL I                          UBIN WORD ALIGNED ;
     1060    14121    3      DCL 1 OCTAL_CARD CALIGNED,
     1061    14122    3            2 BCD,
     1062    14123    3              3 ADDRESS   CHAR (6) UNAL,
     1063    14124    3              3 ADDRESS_  (0:5) REDEF ADDRESS CHAR (1) UNAL,
     1064    14125    3              3 *         CHAR (1) UNAL,
     1065    14126    3              3 TYPE      CHAR (8) UNAL,
     1066    14127    3              3 FIELD     CHAR (51) UNAL,
     1067    14128    3              3 FIELD_    (0:50) REDEF FIELD CHAR (1) UNAL,
     1068    14129    3              3 REVISION  CHAR (6) UNAL,
     1069    14130    3              3 LABEL     CHAR (4) UNAL,
     1070    14131    3              3 *         CHAR (4) UNAL,
     1071    14132    3            2 BCD_ REDEF BCD CHAR (80) UNAL ;
     1072    14133    3      DCL CUR#                       UBIN WORD ALIGNED ;
     1073    14134    3      DCL POS#                       UBIN WORD ALIGNED ;
     1074    14135    3      DCL FIELD_LGTH                 UBIN WORD ALIGNED ;
     1075    14136           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:190  
     1076    14137        /* Code */
     1077    14138
     1078    14139    3      OCTAL_CARD.BCD_ = BCD_CARD.BCD_ ;

  14139  6 002322   040100 100400                    MLR     fill='040'O
         6 002323   000000 000120 1                  ADSC9   BCD_CARD                 cn=0,n=80
         6 002324   200040 000120                    ADSC9   OCTAL_CARD,,AUTO         cn=0,n=80

     1079    14140
     1080    14141    4      DO I = 0 TO 5 ;

  14141  6 002325   200037 450100                    STZ     I,,AUTO

     1081    14142    4         IF OCTAL_CARD.BCD.ADDRESS_(I) < '0' | OCTAL_CARD.BCD.ADDRESS_(I) > '7'

  14142  6 002326   400000 220003                    LDX0    -131072,DU
         6 002327   200037 235100                    LDA     I,,AUTO
         6 002330   040000 106505                    CMPC    fill='040'O
         6 002331   200040 000001                    ADSC9   OCTAL_CARD,A,AUTO        cn=0,n=1
         6 002332   000060 000001 7                  ADSC9   48                       cn=0,n=1
         6 002333   002335 602000 6                  TNC     s:14142+7
         6 002334   000000 220003                    LDX0    0,DU
         6 002335   400000 221003                    LDX1    -131072,DU
         6 002336   040105 106400                    CMPC    fill='040'O
         6 002337   000061 000001 7                  ADSC9   49                       cn=0,n=1
         6 002340   200040 000001                    ADSC9   OCTAL_CARD,A,AUTO        cn=0,n=1
         6 002341   002343 602000 6                  TNC     s:14142+13
         6 002342   000000 221003                    LDX1    0,DU
         6 002343   000000 636011                    EAQ     0,X1
         6 002344   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 002345   000000 636010                    EAQ     0,X0
         6 002346   200076 276100                    ORQ     @MSG_CODE+1,,AUTO
         6 002347   002356 600000 6                  TZE     s:14148

     1082    14143    5         THEN DO ;

     1083    14144    5                 CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_OCTAL) ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:191  

  14144  6 002350   000063 236000 7                  LDQ     51
         6 002351   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002352   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002353   000000 011000                    NOP     0

     1084    14145    5                 ALTRETURN ;

  14145  6 002354   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 002355   000000 702211                    TSX2  ! 0,X1

     1085    14146    5              END /* THEN */ ;
     1086    14147    4         ELSE /* Address contains a legal octal digit in position I */ ;
     1087    14148    4      END /* DO */ ;

  14148  6 002356   000001 035007                    ADLA    1,DL
         6 002357   200037 755100                    STA     I,,AUTO
         6 002360   000006 115007                    CMPA    6,DL
         6 002361   002326 602000 6                  TNC     s:14142

     1088    14149
     1089    14150    3      CUR# = 0 ;

  14150  6 002362   200064 450100                    STZ     CUR#,,AUTO

     1090    14151    4      DO I = 0 TO 5 ;

  14151  6 002363   200037 450100                    STZ     I,,AUTO

     1091    14152    4         CALL CHARBIN (POS#, OCTAL_CARD.BCD.ADDRESS_(I)) ;

  14152  6 002364   200037 235100                    LDA     I,,AUTO
         6 002365   000100 305505                    DTB
         6 002366   200040 030001                    NDSC9   OCTAL_CARD,A,AUTO        cn=0,s=nosgn,sf=0,n=1
         6 002367   200065 000004                    NDSC9   POS#,,AUTO               cn=0,s=lsgnf,sf=0,n=4

     1092    14153    4         CUR# = (CUR# * 8) + POS# ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:192  

  14153  6 002370   200064 236100                    LDQ     CUR#,,AUTO
         6 002371   000003 736000                    QLS     3
         6 002372   200065 036100                    ADLQ    POS#,,AUTO
         6 002373   200064 756100                    STQ     CUR#,,AUTO

     1093    14154    4      END /* DO */ ;

  14154  6 002374   000001 035007                    ADLA    1,DL
         6 002375   200037 755100                    STA     I,,AUTO
         6 002376   000006 115007                    CMPA    6,DL
         6 002377   002364 602000 6                  TNC     s:14152

     1094    14155    3      IF OBJECT.LOAD_SIZE < CUR#

  14155  6 002400   000025 236000 xsym               LDQ     OBJECT+21
         6 002401   777777 376007                    ANQ     -1,DL
         6 002402   200064 116100                    CMPQ    CUR#,,AUTO
         6 002403   002406 603000 6                  TRC     s:14160

     1095    14156    3      THEN OBJECT.LOAD_SIZE = CUR# ;

  14156  6 002404   200064 720100                    LXL0    CUR#,,AUTO
         6 002405   000025 440000 xsym               SXL0    OBJECT+21

     1096    14157    3      ELSE /* Patch is for an internal location. */ ;
     1097    14158           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:193  
     1098    14159           /* Bound card value field and validate */
     1099    14160    3      CUR# = 0 ;

  14160  6 002406   200064 450100                    STZ     CUR#,,AUTO

     1100    14161    3      CALL INDEX (FIELD_LGTH, ' ', OCTAL_CARD.BCD.FIELD, 0) ;

  14161  6 002407   000000 124500                    SCM     mask='000'O
         6 002410   200043 600063                    ADSC9   DATA$+3,,AUTO            cn=3,n=51
         6 002411   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         6 002412   200066 000100                    ARG     FIELD_LGTH,,AUTO

     1101    14162    3      CALL INDEX (POS#, ',', OCTAL_CARD.BCD.FIELD, CUR#) ;

  14162  6 002413   200064 720100                    LXL0    CUR#,,AUTO
         6 002414   777714 620010                    EAX0    -52,X0
         6 002415   777777 660003                    ERX0    -1,DU
         6 002416   200064 236100                    LDQ     CUR#,,AUTO
         6 002417   200064 235100                    LDA     CUR#,,AUTO
         6 002420   000000 124545                    SCM     mask='000'O
         6 002421   200043 600010                    ADSC9   DATA$+3,A,AUTO           cn=3,n=*X0
         6 002422   000064 000001 7                  ADSC9   52                       cn=0,n=1
         6 002423   200065 000100                    ARG     POS#,,AUTO
         6 002424   200065 056100                    ASQ     POS#,,AUTO

     1102    14163    4      DO WHILE (POS# < FIELD_LGTH) ;

  14163  6 002425   200065 236100                    LDQ     POS#,,AUTO
         6 002426   200066 116100                    CMPQ    FIELD_LGTH,,AUTO
         6 002427   002457 603000 6                  TRC     s:14168

     1103    14164    4         CALL GC_VERIFY_VALUE (CUR#, POS#-1) ALTRET (ERROR) ;

  14164  6 002430   200065 235100                    LDA     POS#,,AUTO
         6 002431   000001 135007                    SBLA    1,DL
         6 002432   200104 755100                    STA     @MSG_CODE+7,,AUTO
         6 002433   200104 630500                    EPPR0   @MSG_CODE+7,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:194  
         6 002434   200072 450500                    STP0    @START#+1,,AUTO
         6 002435   200064 631500                    EPPR1   CUR#,,AUTO
         6 002436   200071 451500                    STP1    I+2,,AUTO
         6 002437   002533 701000 6                  TSX1    GC_VERIFY_VALUE
         6 002440   002527 702000 6                  TSX2    ERROR

     1104    14165    4         CUR# = POS# + 1 ;

  14165  6 002441   200065 235100                    LDA     POS#,,AUTO
         6 002442   000001 035007                    ADLA    1,DL
         6 002443   200064 755100                    STA     CUR#,,AUTO

     1105    14166    4         CALL INDEX (POS#, ',', OCTAL_CARD.BCD.FIELD, CUR#) ;

  14166  6 002444   777714 620005                    EAX0    -52,AL
         6 002445   777777 660003                    ERX0    -1,DU
         6 002446   200064 236100                    LDQ     CUR#,,AUTO
         6 002447   000000 124545                    SCM     mask='000'O
         6 002450   200043 600010                    ADSC9   DATA$+3,A,AUTO           cn=3,n=*X0
         6 002451   000064 000001 7                  ADSC9   52                       cn=0,n=1
         6 002452   200065 000100                    ARG     POS#,,AUTO
         6 002453   200065 056100                    ASQ     POS#,,AUTO

     1106    14167    4      END /* WHILE */ ;

  14167  6 002454   200065 236100                    LDQ     POS#,,AUTO
         6 002455   200066 116100                    CMPQ    FIELD_LGTH,,AUTO
         6 002456   002430 602000 6                  TNC     s:14164

     1107    14168    3      CALL GC_VERIFY_VALUE (CUR#, FIELD_LGTH-1) ALTRET (ERROR) ;

  14168  6 002457   200066 235100                    LDA     FIELD_LGTH,,AUTO
         6 002460   000001 135007                    SBLA    1,DL
         6 002461   200105 755100                    STA     @MSG_CODE+8,,AUTO
         6 002462   200105 630500                    EPPR0   @MSG_CODE+8,,AUTO
         6 002463   200072 450500                    STP0    @START#+1,,AUTO
         6 002464   200064 631500                    EPPR1   CUR#,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:195  
         6 002465   200071 451500                    STP1    I+2,,AUTO
         6 002466   002533 701000 6                  TSX1    GC_VERIFY_VALUE
         6 002467   002527 702000 6                  TSX2    ERROR

     1108    14169
     1109    14170    3      IF OBJECT.BCD.LIBRARY = 'HTND'

  14170  6 002470   040000 106400                    CMPC    fill='040'O
         6 002471   000003 600006 xsym               ADSC9   OBJECT+3                 cn=3,n=6
         6 002472   000075 000004 2                  ADSC9   NO_BLANKS+20             cn=0,n=4
         6 002473   002506 601000 6                  TNZ     s:14177

     1110    14171    3      THEN IF OCTAL_CARD.BCD.REVISION = OBJECT.BCD.DATE

  14171  6 002474   040000 106500                    CMPC    fill='040'O
         6 002475   200060 400006                    ADSC9   HDR$+11,,AUTO            cn=2,n=6
         6 002476   000020 400006 xsym               ADSC9   OBJECT+16                cn=2,n=6
         6 002477   002520 600000 6                  TZE     s:14184

     1111    14172    3         THEN /* Title Date and Patch Card value match */ ;
     1112    14173    4         ELSE DO ;

     1113    14174    4                 CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_DATE) ;

  14174  6 002500   000066 236000 7                  LDQ     54
         6 002501   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002502   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002503   000000 011000                    NOP     0

     1114    14175    4                 ALTRETURN ;

  14175  6 002504   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 002505   000000 702211                    TSX2  ! 0,X1

     1115    14176    4              END /* ELSE */ ;
     1116    14177    3      ELSE IF OCTAL_CARD.BCD.REVISION = ID.REVISION

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:196  
  14177  6 002506   040000 106500                    CMPC    fill='040'O
         6 002507   200060 400006                    ADSC9   HDR$+11,,AUTO            cn=2,n=6
         6 002510   000060 400006 1                  ADSC9   ID+1                     cn=2,n=6
         6 002511   002520 600000 6                  TZE     s:14184

     1117    14178    3         THEN /* REV.xx and Patch Card value match */ ;
     1118    14179    4         ELSE DO ;

     1119    14180    4                 CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_REV) ;

  14180  6 002512   000070 236000 7                  LDQ     56
         6 002513   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002514   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002515   000000 011000                    NOP     0

     1120    14181    4                 ALTRETURN ;

  14181  6 002516   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 002517   000000 702211                    TSX2  ! 0,X1

     1121    14182    4              END /* ELSE */ ;
     1122    14183
     1123    14184    3      IF OCTAL_CARD.BCD.LABEL = OBJECT.BCD.LBL

  14184  6 002520   200062 236100                    LDQ     HDR$+13,,AUTO
         6 002521   000022 116000 xsym               CMPQ    OBJECT+18
         6 002522   002531 600000 6                  TZE     s:14191

     1124    14185    3      THEN /* Edit Name of Deck and Patch Card match. */ ;
     1125    14186    4      ELSE DO ;

     1126    14187    4              CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_LBL) ;

  14187  6 002523   000072 236000 7                  LDQ     58
         6 002524   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002525   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002526   000000 011000                    NOP     0
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:197  

     1127    14188    4   ERROR:
     1128    14189    4              ALTRETURN ;

  14189  6 002527   200036 221300       ERROR        LDX1  ! OUTBLK$,,AUTO
         6 002530   000000 702211                    TSX2  ! 0,X1

     1129    14190    4           END /* ELSE */ ;
     1130    14191    3      RETURN ;

  14191  6 002531   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 002532   000001 702211                    TSX2  ! 1,X1

     1131    14192
     1132    14193        /* END GC_OCTAL_CHECKS */
     1133    14194        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:198  
     1134    14195    3   GC_VERIFY_VALUE: PROC (START#, STOP#) ALTRET ;

  14195  6 002533   200070 741300       GC_VERIFY_V* STX1  ! I+1,,AUTO

     1135    14196
     1136    14197    4      DCL START#      UBIN WORD ALIGNED ;
     1137    14198    4      DCL STOP#       UBIN WORD ALIGNED ;
     1138    14199    4      DCL VAL_INX     UBIN WORD ALIGNED ;
     1139    14200
     1140    14201    4      IF STOP# - START# < 14

  14201  6 002534   200071 470500                    LDP0    @START#,,AUTO
         6 002535   200072 471500                    LDP1    @STOP#,,AUTO
         6 002536   100000 236100                    LDQ     0,,PR1
         6 002537   000000 136100                    SBLQ    0,,PR0
         6 002540   000016 116007                    CMPQ    14,DL
         6 002541   002633 605000 6                  TPL     s:14223

     1141    14202    4      THEN IF START# <= STOP#

  14202  6 002542   100000 236100                    LDQ     0,,PR1
         6 002543   000000 116100                    CMPQ    0,,PR0
         6 002544   002625 602000 6                  TNC     s:14219

     1142    14203    5         THEN DO ;

     1143    14204    5                 IF OCTAL_CARD.BCD.FIELD_(START#) = 'R'

  14204  6 002545   000000 235100                    LDA     0,,PR0
         6 002546   040000 106505                    CMPC    fill='040'O
         6 002547   200043 600001                    ADSC9   DATA$+3,A,AUTO           cn=3,n=1
         6 002550   000073 000001 7                  ADSC9   59                       cn=0,n=1
         6 002551   002554 601000 6                  TNZ     s:14206

     1144    14205    5                 THEN START# = START# + 1 ;

  14205  6 002552   000001 035007                    ADLA    1,DL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:199  
         6 002553   000000 755100                    STA     0,,PR0

     1145    14206    5                 IF OCTAL_CARD.BCD.FIELD_(STOP#) = 'R'

  14206  6 002554   100000 235100                    LDA     0,,PR1
         6 002555   040000 106505                    CMPC    fill='040'O
         6 002556   200043 600001                    ADSC9   DATA$+3,A,AUTO           cn=3,n=1
         6 002557   000073 000001 7                  ADSC9   59                       cn=0,n=1
         6 002560   002563 601000 6                  TNZ     s:14208

     1146    14207    5                 THEN STOP# = STOP# - 1 ;

  14207  6 002561   000001 135007                    SBLA    1,DL
         6 002562   100000 755100                    STA     0,,PR1

     1147    14208    6                 DO VAL_INX = START# TO STOP# ;

  14208  6 002563   000000 235100                    LDA     0,,PR0
         6 002564   200073 755100                    STA     VAL_INX,,AUTO
         6 002565   002620 710000 6                  TRA     s:14216+2

     1148    14209    6                    IF OCTAL_CARD.BCD.FIELD_(VAL_INX) < '0' |

  14209  6 002566   400000 220003                    LDX0    -131072,DU
         6 002567   200073 235100                    LDA     VAL_INX,,AUTO
         6 002570   040000 106505                    CMPC    fill='040'O
         6 002571   200043 600001                    ADSC9   DATA$+3,A,AUTO           cn=3,n=1
         6 002572   000060 000001 7                  ADSC9   48                       cn=0,n=1
         6 002573   002575 602000 6                  TNC     s:14209+7
         6 002574   000000 220003                    LDX0    0,DU
         6 002575   400000 221003                    LDX1    -131072,DU
         6 002576   040105 106400                    CMPC    fill='040'O
         6 002577   000061 000001 7                  ADSC9   49                       cn=0,n=1
         6 002600   200043 600001                    ADSC9   DATA$+3,A,AUTO           cn=3,n=1
         6 002601   002603 602000 6                  TNC     s:14209+13
         6 002602   000000 221003                    LDX1    0,DU
         6 002603   000000 636011                    EAQ     0,X1
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:200  
         6 002604   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 002605   000000 636010                    EAQ     0,X0
         6 002606   200076 276100                    ORQ     @MSG_CODE+1,,AUTO
         6 002607   002616 600000 6                  TZE     s:14216

     1149    14210    6                            OCTAL_CARD.BCD.FIELD_(VAL_INX) > '7'
     1150    14211    7                    THEN DO ;

     1151    14212    7                            CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_OCTAL) ;

  14212  6 002610   000063 236000 7                  LDQ     51
         6 002611   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002612   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002613   000000 011000                    NOP     0

     1152    14213    7                            ALTRETURN ;

  14213  6 002614   200070 221300                    LDX1  ! I+1,,AUTO
         6 002615   000000 702211                    TSX2  ! 0,X1

     1153    14214    7                         END /* ELSE */ ;
     1154    14215    6                    ELSE /* The Patch Card Value has no errors. */ ;
     1155    14216    6                 END /* DO */ ;

  14216  6 002616   000001 035007                    ADLA    1,DL
         6 002617   200073 755100                    STA     VAL_INX,,AUTO
         6 002620   200072 470500                    LDP0    @STOP#,,AUTO
         6 002621   000000 236100                    LDQ     0,,PR0
         6 002622   200073 116100                    CMPQ    VAL_INX,,AUTO
         6 002623   002566 603000 6                  TRC     s:14209

     1156    14217    5              END /* THEN */ ;

  14217  6 002624   002641 710000 6                  TRA     s:14226

     1157    14218    5         ELSE DO ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:201  
     1158    14219    5                 CALL GC_ERR_MSG (%E$GVV_PTCH_NULL_VAL) ;

  14219  6 002625   000075 236000 7                  LDQ     61
         6 002626   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002627   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002630   000000 011000                    NOP     0

     1159    14220    5                 ALTRETURN ;

  14220  6 002631   200070 221300                    LDX1  ! I+1,,AUTO
         6 002632   000000 702211                    TSX2  ! 0,X1

     1160    14221    5              END /* ELSE */ ;
     1161    14222    5      ELSE DO ;

     1162    14223    5              CALL GC_ERR_MSG (%E$GVV_PTCH_G12) ;

  14223  6 002633   000077 236000 7                  LDQ     63
         6 002634   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002635   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002636   000000 011000                    NOP     0

     1163    14224    5              ALTRETURN ;

  14224  6 002637   200070 221300                    LDX1  ! I+1,,AUTO
         6 002640   000000 702211                    TSX2  ! 0,X1

     1164    14225    5           END /* ELSE */ ;
     1165    14226    4      RETURN;

  14226  6 002641   200070 221300                    LDX1  ! I+1,,AUTO
         6 002642   000001 702211                    TSX2  ! 1,X1

     1166    14227
     1167    14228    4   END GC_VERIFY_VALUE;
     1168    14229    3   END GC_OCTAL_CHECKS ;
     1169    14230        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:202  
     1170    14231    2   GC_HEX_CHECKS: PROC ALTRET ;

  14231  6 002643   200036 741300       GC_HEX_CHEC* STX1  ! OUTBLK$,,AUTO

     1171    14232
     1172    14233    3      DCL 1 HEX_CARD CALIGNED,
     1173    14234    3            2 BCD,
     1174    14235    3              3 ADDRESS              CHAR (4) UNAL,
     1175    14236    3              3 *                    CHAR (2) UNAL,
     1176    14237    3              3 HEX_TYPE             CHAR (1) UNAL,
     1177    14238    3              3 TYPE                 CHAR (8) UNAL,
     1178    14239    3              3 INSTR1               CHAR (4) UNAL,
     1179    14240    3              3 INSTR2               CHAR (4) UNAL,
     1180    14241    3              3 ORIG1                CHAR (4) UNAL,
     1181    14242    3              3 ORIG2                CHAR (4) UNAL,
     1182    14243    3              3 REVERSED             CHAR (1) UNAL,
     1183    14244    3              3 *                    CHAR (10) UNAL,
     1184    14245    3              3 PROGRAM_ID           CHAR (12) UNAL,
     1185    14246    3              3 *                    CHAR (12) UNAL,
     1186    14247    3              3 REVISION             CHAR (6) UNAL,
     1187    14248    3              3 LABEL                CHAR (4) UNAL,
     1188    14249    3              3 *                    CHAR (4) UNAL,
     1189    14250    3            2 BCD_ REDEF BCD CHAR (80) UNAL ;
     1190    14251    3      DCL ADDRESS_VALUE              UBIN WORD ALIGNED ;
     1191    14252    3      DCL BLANKS_OK                  BIT (1) CONSTANT UNAL INIT ('1'B) ;
     1192    14253    3      DCL NO_BLANKS                  BIT (1) CONSTANT UNAL INIT ('0'B) ;
     1193    14254
     1194    14255        /* Code */
     1195    14256
     1196    14257    3      HEX_CARD.BCD_ = BCD_CARD.BCD_ ;

  14257  6 002644   040100 100400                    MLR     fill='040'O
         6 002645   000000 000120 1                  ADSC9   BCD_CARD                 cn=0,n=80
         6 002646   200037 000120                    ADSC9   HEX_CARD,,AUTO           cn=0,n=80

     1197    14258
     1198    14259    3      IF OBJECT.BCD.ASSEMBLER = 'M'
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:203  

  14259  6 002647   000016 236000 xsym               LDQ     OBJECT+14
         6 002650   000777 376007                    ANQ     511,DL
         6 002651   000115 116007                    CMPQ    77,DL
         6 002652   002661 600000 6                  TZE     s:14266

     1199    14260    3      THEN /* Hex patches are allowed for this object deck. */ ;
     1200    14261    4      ELSE DO ;

     1201    14262    4              CALL GC_ERR_MSG (%E$GHC_HEX_INVALID) ;

  14262  6 002653   000101 236000 7                  LDQ     65
         6 002654   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002655   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002656   000000 011000                    NOP     0

     1202    14263    4              ALTRETURN ;

  14263  6 002657   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 002660   000000 702211                    TSX2  ! 0,X1

     1203    14264    4           END /* ELSE */ ;
     1204    14265           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:204  
     1205    14266    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.ADDRESS, NO_BLANKS) ALTRET (ERROR) ;

  14266  6 002661   000102 236000 7                  LDQ     66
         6 002662   200066 756100                    STQ     FIELD_LGTH,,AUTO
         6 002663   200037 630500                    EPPR0   HEX_CARD,,AUTO
         6 002664   200065 450500                    STP0    POS#,,AUTO
         6 002665   003066 701000 6                  TSX1    GC_VERIFY_VALUE
         6 002666   003062 702000 6                  TSX2    ERROR

     1206    14267    3      CALL CHARBIN (ADDRESS_VALUE, HEX_CARD.BCD.ADDRESS) ;

  14267  6 002667   000100 305500                    DTB
         6 002670   200037 030004                    NDSC9   HEX_CARD,,AUTO           cn=0,s=nosgn,sf=0,n=4
         6 002671   200076 000010                    NDSC9   @MSG_CODE+1,,AUTO        cn=0,s=lsgnf,sf=0,n=8
         6 002672   200077 235100                    LDA     @MSG_CODE+2,,AUTO
         6 002673   200063 755100                    STA     ADDRESS_VALUE,,AUTO

     1207    14268    3      IF MOD (ADDRESS_VALUE, 2) = 1 & HEX_CARD.BCD.INSTR2 ~= ' '

  14268  6 002674   200063 236100                    LDQ     ADDRESS_VALUE,,AUTO
         6 002675   000001 376007                    ANQ     1,DL
         6 002676   400000 220003                    LDX0    -131072,DU
         6 002677   000001 116007                    CMPQ    1,DL
         6 002700   002702 600000 6                  TZE     s:14268+6
         6 002701   000000 220003                    LDX0    0,DU
         6 002702   400000 221003                    LDX1    -131072,DU
         6 002703   040000 106500                    CMPC    fill='040'O
         6 002704   200043 600004                    ADSC9   DATA$+3,,AUTO            cn=3,n=4
         6 002705   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         6 002706   002710 601000 6                  TNZ     s:14268+12
         6 002707   000000 221003                    LDX1    0,DU
         6 002710   000000 636011                    EAQ     0,X1
         6 002711   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 002712   000000 636010                    EAQ     0,X0
         6 002713   200076 376100                    ANQ     @MSG_CODE+1,,AUTO
         6 002714   002723 600000 6                  TZE     s:14275

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:205  
     1208    14269    4      THEN DO ;

     1209    14270    4              CALL GC_ERR_MSG (%E$GHC_PTCH_TWO_ON_ODD) ;

  14270  6 002715   000104 236000 7                  LDQ     68
         6 002716   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002717   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002720   000000 011000                    NOP     0

     1210    14271    4              ALTRETURN ;

  14271  6 002721   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 002722   000000 702211                    TSX2  ! 0,X1

     1211    14272    4           END /* THEN */ ;
     1212    14273    3      ELSE /* No 2 patch values for an odd address */ ;
     1213    14274
     1214    14275    3      IF HEX_CARD.BCD.HEX_TYPE = 'C' | HEX_CARD.BCD.TYPE = 'R'

  14275  6 002723   400000 220003                    LDX0    -131072,DU
         6 002724   200040 236100                    LDQ     OCTAL_CARD,,AUTO
         6 002725   777000 376007                    ANQ     -512,DL
         6 002726   103000 116007                    CMPQ    34304,DL
         6 002727   002731 600000 6                  TZE     s:14275+6
         6 002730   000000 220003                    LDX0    0,DU
         6 002731   400000 221003                    LDX1    -131072,DU
         6 002732   040000 106500                    CMPC    fill='040'O
         6 002733   200040 600010                    ADSC9   OCTAL_CARD,,AUTO         cn=3,n=8
         6 002734   000073 000001 7                  ADSC9   59                       cn=0,n=1
         6 002735   002737 600000 6                  TZE     s:14275+12
         6 002736   000000 221003                    LDX1    0,DU
         6 002737   000000 636011                    EAQ     0,X1
         6 002740   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 002741   000000 636010                    EAQ     0,X0
         6 002742   200076 276100                    ORQ     @MSG_CODE+1,,AUTO
         6 002743   002752 601000 6                  TNZ     s:14282

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:206  
     1215    14276    3      THEN /* Control Store / Read Write flag ok */ ;
     1216    14277    4      ELSE DO ;

     1217    14278    4              CALL GC_ERR_MSG (%E$GHC_PTCH_HEX_TYPE) ;

  14278  6 002744   000106 236000 7                  LDQ     70
         6 002745   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 002746   005035 701000 6                  TSX1    GC_ERR_MSG
         6 002747   000000 011000                    NOP     0

     1218    14279    4              ALTRETURN ;

  14279  6 002750   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 002751   000000 702211                    TSX2  ! 0,X1

     1219    14280    4           END /* ELSE */ ;
     1220    14281
     1221    14282    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.INSTR1, BLANKS_OK) ALTRET (ERROR) ;

  14282  6 002752   000107 236000 7                  LDQ     71
         6 002753   200066 756100                    STQ     FIELD_LGTH,,AUTO
         6 002754   200076 452500                    STP2    @MSG_CODE+1,,AUTO
         6 002755   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 002756   000110 036000 7                  ADLQ    72
         6 002757   200065 756100                    STQ     POS#,,AUTO
         6 002760   003066 701000 6                  TSX1    GC_VERIFY_VALUE
         6 002761   003062 702000 6                  TSX2    ERROR

     1222    14283    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.INSTR2, BLANKS_OK) ALTRET (ERROR) ;

  14283  6 002762   000107 236000 7                  LDQ     71
         6 002763   200066 756100                    STQ     FIELD_LGTH,,AUTO
         6 002764   200076 452500                    STP2    @MSG_CODE+1,,AUTO
         6 002765   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 002766   000111 036000 7                  ADLQ    73
         6 002767   200065 756100                    STQ     POS#,,AUTO
         6 002770   003066 701000 6                  TSX1    GC_VERIFY_VALUE
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:207  
         6 002771   003062 702000 6                  TSX2    ERROR

     1223    14284    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.ORIG1, BLANKS_OK) ALTRET (ERROR) ;

  14284  6 002772   000107 236000 7                  LDQ     71
         6 002773   200066 756100                    STQ     FIELD_LGTH,,AUTO
         6 002774   200076 452500                    STP2    @MSG_CODE+1,,AUTO
         6 002775   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 002776   000112 036000 7                  ADLQ    74
         6 002777   200065 756100                    STQ     POS#,,AUTO
         6 003000   003066 701000 6                  TSX1    GC_VERIFY_VALUE
         6 003001   003062 702000 6                  TSX2    ERROR

     1224    14285    3      CALL GC_VERIFY_VALUE (HEX_CARD.BCD.ORIG2, BLANKS_OK) ALTRET (ERROR) ;

  14285  6 003002   000107 236000 7                  LDQ     71
         6 003003   200066 756100                    STQ     FIELD_LGTH,,AUTO
         6 003004   200076 452500                    STP2    @MSG_CODE+1,,AUTO
         6 003005   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 003006   000113 036000 7                  ADLQ    75
         6 003007   200065 756100                    STQ     POS#,,AUTO
         6 003010   003066 701000 6                  TSX1    GC_VERIFY_VALUE
         6 003011   003062 702000 6                  TSX2    ERROR

     1225    14286
     1226    14287    3      IF HEX_CARD.BCD.REVERSED = 'R' | HEX_CARD.BCD.REVERSED = ' '

  14287  6 003012   400000 220003                    LDX0    -131072,DU
         6 003013   200046 236100                    LDQ     HDR$+1,,AUTO
         6 003014   000777 376007                    ANQ     511,DL
         6 003015   000122 116007                    CMPQ    82,DL
         6 003016   003020 600000 6                  TZE     s:14287+6
         6 003017   000000 220003                    LDX0    0,DU
         6 003020   400000 221003                    LDX1    -131072,DU
         6 003021   200046 236100                    LDQ     HDR$+1,,AUTO
         6 003022   000777 376007                    ANQ     511,DL
         6 003023   000040 116007                    CMPQ    32,DL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:208  
         6 003024   003026 600000 6                  TZE     s:14287+12
         6 003025   000000 221003                    LDX1    0,DU
         6 003026   000000 636011                    EAQ     0,X1
         6 003027   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 003030   000000 636010                    EAQ     0,X0
         6 003031   200076 276100                    ORQ     @MSG_CODE+1,,AUTO
         6 003032   003041 601000 6                  TNZ     s:14294

     1227    14288    3      THEN /* Patch reversed field is ok */ ;
     1228    14289    4      ELSE DO ;

     1229    14290    4              CALL GC_ERR_MSG (%E$GHC_PTCH_HEX_REVERSE) ;

  14290  6 003033   000115 236000 7                  LDQ     77
         6 003034   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 003035   005035 701000 6                  TSX1    GC_ERR_MSG
         6 003036   000000 011000                    NOP     0

     1230    14291    4              ALTRETURN ;

  14291  6 003037   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 003040   000000 702211                    TSX2  ! 0,X1

     1231    14292    4           END /* ELSE */ ;
     1232    14293           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:209  
     1233    14294    3      IF HEX_CARD.BCD.REVISION = ID.REVISION

  14294  6 003041   040000 106500                    CMPC    fill='040'O
         6 003042   200057 400006                    ADSC9   HDR$+10,,AUTO            cn=2,n=6
         6 003043   000060 400006 1                  ADSC9   ID+1                     cn=2,n=6
         6 003044   003053 600000 6                  TZE     s:14301

     1234    14295    3      THEN /* TTL Date of Deck and Patch Card match. */ ;
     1235    14296    4      ELSE DO ;

     1236    14297    4              CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_REV) ;

  14297  6 003045   000070 236000 7                  LDQ     56
         6 003046   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 003047   005035 701000 6                  TSX1    GC_ERR_MSG
         6 003050   000000 011000                    NOP     0

     1237    14298    4              ALTRETURN ;

  14298  6 003051   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 003052   000000 702211                    TSX2  ! 0,X1

     1238    14299    4           END /* ELSE */ ;
     1239    14300
     1240    14301    3      IF HEX_CARD.BCD.LABEL = OBJECT.BCD.LBL

  14301  6 003053   200061 236100                    LDQ     HDR$+12,,AUTO
         6 003054   000022 116000 xsym               CMPQ    OBJECT+18
         6 003055   003064 600000 6                  TZE     s:14308

     1241    14302    3      THEN /* Edit Name of Deck and Patch Card match. */ ;
     1242    14303    4      ELSE DO ;

     1243    14304    4              CALL GC_ERR_MSG (%E$GOC_PTCH_BAD_LBL) ;

  14304  6 003056   000072 236000 7                  LDQ     58
         6 003057   200075 756100                    STQ     VAL_INX+2,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:210  
         6 003060   005035 701000 6                  TSX1    GC_ERR_MSG
         6 003061   000000 011000                    NOP     0

     1244    14305    4   ERROR:
     1245    14306    4              ALTRETURN ;

  14306  6 003062   200036 221300       ERROR        LDX1  ! OUTBLK$,,AUTO
         6 003063   000000 702211                    TSX2  ! 0,X1

     1246    14307    4           END /* ELSE */ ;
     1247    14308    3      RETURN ;

  14308  6 003064   200036 221300                    LDX1  ! OUTBLK$,,AUTO
         6 003065   000001 702211                    TSX2  ! 1,X1

     1248    14309
     1249    14310        /* END GC_HEX_CHECKS */
     1250    14311        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:211  
     1251    14312    3   GC_VERIFY_VALUE: PROC (VALUE, BLANK_VALID) ALTRET ;

  14312  6 003066   200064 741300       GC_VERIFY_V* STX1  ! CUR#,,AUTO

     1252    14313
     1253    14314    4      DCL VALUE       CHAR (4) CALIGNED ;
     1254    14315    4      DCL BLANK_VALID BIT (1) CALIGNED ;
     1255    14316    4      DCL I           UBIN WORD ALIGNED ;
     1256    14317
     1257    14318        /* Code */
     1258    14319
     1259    14320    4      IF VALUE = '    '

  14320  6 003067   200065 470500                    LDP0    @VALUE,,AUTO
         6 003070   040000 106500                    CMPC    fill='040'O
         6 003071   000000 000004                    ADSC9   0,,PR0                   cn=0,n=4
         6 003072   000053 000004 2                  ADSC9   NO_BLANKS+2              cn=0,n=4
         6 003073   003107 601000 6                  TNZ     s:14327

     1260    14321    4      THEN IF BLANK_VALID

  14321  6 003074   200066 471500                    LDP1    @BLANK_VALID,,AUTO
         6 003075   000000 066500                    CMPB    filb='0'B
         6 003076   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
         6 003077   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         6 003100   003247 601000 6                  TNZ     s:14338

     1261    14322    4         THEN /* All blanks are acceptable. */ ;
     1262    14323    5         ELSE DO ;

     1263    14324    5                 CALL GC_ERR_MSG (%E$GVV_PTCH_BAD_HEX) ;

  14324  6 003101   000117 236000 7                  LDQ     79
         6 003102   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 003103   005035 701000 6                  TSX1    GC_ERR_MSG
         6 003104   000000 011000                    NOP     0

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:212  
     1264    14325    5                 ALTRETURN ;

  14325  6 003105   200064 221300                    LDX1  ! CUR#,,AUTO
         6 003106   000000 702211                    TSX2  ! 0,X1

     1265    14326    5              END /* ELSE */ ;
     1266    14327    5      ELSE DO I = 0 TO 3 ;

  14327  6 003107   200067 450100                    STZ     I,,AUTO

     1267    14328    6              DO SELECT (SUBSTR (VALUE, 0, I)) ;

  14328  6 003110   200065 470500                    LDP0    @VALUE,,AUTO
         6 003111   200067 720100                    LXL0    I,,AUTO
         6 003112   040000 106540                    CMPC    fill='040'O
         6 003113   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003114   000061 000001 7                  ADSC9   49                       cn=0,n=1
         6 003115   003167 602000 6                  TNC     s:14328+47
         6 003116   003232 600000 6                  TZE     s:14329
         6 003117   040000 106540                    CMPC    fill='040'O
         6 003120   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003121   000120 000001 7                  ADSC9   80                       cn=0,n=1
         6 003122   003150 602000 6                  TNC     s:14328+32
         6 003123   003233 600000 6                  TZE     s:14331
         6 003124   040000 106540                    CMPC    fill='040'O
         6 003125   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003126   000121 000001 7                  ADSC9   81                       cn=0,n=1
         6 003127   003143 602000 6                  TNC     s:14328+27
         6 003130   003233 600000 6                  TZE     s:14331
         6 003131   040000 106540                    CMPC    fill='040'O
         6 003132   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003133   000122 000001 7                  ADSC9   82                       cn=0,n=1
         6 003134   003234 602000 6                  TNC     s:14334
         6 003135   003233 600000 6                  TZE     s:14331
         6 003136   040000 106540                    CMPC    fill='040'O
         6 003137   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003140   000123 000001 7                  ADSC9   83                       cn=0,n=1
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:213  
         6 003141   003234 601000 6                  TNZ     s:14334
         6 003142   003233 710000 6                  TRA     s:14331
         6 003143   040000 106540                    CMPC    fill='040'O
         6 003144   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003145   000124 000001 7                  ADSC9   84                       cn=0,n=1
         6 003146   003234 601000 6                  TNZ     s:14334
         6 003147   003233 710000 6                  TRA     s:14331
         6 003150   040000 106540                    CMPC    fill='040'O
         6 003151   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003152   000125 000001 7                  ADSC9   85                       cn=0,n=1
         6 003153   003162 602000 6                  TNC     s:14328+42
         6 003154   003232 600000 6                  TZE     s:14329
         6 003155   040000 106540                    CMPC    fill='040'O
         6 003156   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003157   000126 000001 7                  ADSC9   86                       cn=0,n=1
         6 003160   003234 601000 6                  TNZ     s:14334
         6 003161   003233 710000 6                  TRA     s:14331
         6 003162   040000 106540                    CMPC    fill='040'O
         6 003163   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003164   000127 000001 7                  ADSC9   87                       cn=0,n=1
         6 003165   003234 601000 6                  TNZ     s:14334
         6 003166   003232 710000 6                  TRA     s:14329
         6 003167   040000 106540                    CMPC    fill='040'O
         6 003170   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003171   000130 000001 7                  ADSC9   88                       cn=0,n=1
         6 003172   003213 602000 6                  TNC     s:14328+67
         6 003173   003232 600000 6                  TZE     s:14329
         6 003174   040000 106540                    CMPC    fill='040'O
         6 003175   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003176   000131 000001 7                  ADSC9   89                       cn=0,n=1
         6 003177   003206 602000 6                  TNC     s:14328+62
         6 003200   003232 600000 6                  TZE     s:14329
         6 003201   040000 106540                    CMPC    fill='040'O
         6 003202   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003203   000132 000001 7                  ADSC9   90                       cn=0,n=1
         6 003204   003234 601000 6                  TNZ     s:14334
         6 003205   003232 710000 6                  TRA     s:14329
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:214  
         6 003206   040000 106540                    CMPC    fill='040'O
         6 003207   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003210   000133 000001 7                  ADSC9   91                       cn=0,n=1
         6 003211   003234 601000 6                  TNZ     s:14334
         6 003212   003232 710000 6                  TRA     s:14329
         6 003213   040000 106540                    CMPC    fill='040'O
         6 003214   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003215   000134 000001 7                  ADSC9   92                       cn=0,n=1
         6 003216   003225 602000 6                  TNC     s:14328+77
         6 003217   003232 600000 6                  TZE     s:14329
         6 003220   040000 106540                    CMPC    fill='040'O
         6 003221   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003222   000135 000001 7                  ADSC9   93                       cn=0,n=1
         6 003223   003234 601000 6                  TNZ     s:14334
         6 003224   003232 710000 6                  TRA     s:14329
         6 003225   040000 106540                    CMPC    fill='040'O
         6 003226   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         6 003227   000060 000001 7                  ADSC9   48                       cn=0,n=1
         6 003230   003234 601000 6                  TNZ     s:14334
         6 003231   003232 710000 6                  TRA     s:14329

     1268    14329    6                 SELECT ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') ;

  14329  6 003232   003242 710000 6                  TRA     s:14337

     1269    14330                         /* legal numeric digit */
     1270    14331    6                 SELECT ('A', 'B', 'C', 'D', 'E', 'F') ;

  14331  6 003233   003242 710000 6                  TRA     s:14337

     1271    14332                         /* legal additional HEX digit */
     1272    14333    6                 SELECT (ELSE) ;

     1273    14334    6              CALL GC_ERR_MSG (%E$GVV_PTCH_BAD_HEX) ;

  14334  6 003234   000117 236000 7                  LDQ     79
         6 003235   200075 756100                    STQ     VAL_INX+2,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:215  
         6 003236   005035 701000 6                  TSX1    GC_ERR_MSG
         6 003237   000000 011000                    NOP     0

     1274    14335    6              ALTRETURN ;

  14335  6 003240   200064 221300                    LDX1  ! CUR#,,AUTO
         6 003241   000000 702211                    TSX2  ! 0,X1

     1275    14336    6              END /* SELECT */ ;

     1276    14337    5           END /* ELSE */ ;

  14337  6 003242   200067 235100                    LDA     I,,AUTO
         6 003243   000001 035007                    ADLA    1,DL
         6 003244   200067 755100                    STA     I,,AUTO
         6 003245   000004 115007                    CMPA    4,DL
         6 003246   003110 602000 6                  TNC     s:14328

     1277    14338    4      RETURN ;

  14338  6 003247   200064 221300                    LDX1  ! CUR#,,AUTO
         6 003250   000001 702211                    TSX2  ! 1,X1

     1278    14339
     1279    14340    4   END GC_VERIFY_VALUE ;
     1280    14341    3   END GC_HEX_CHECKS ;
     1281    14342    2   END GC_PATCH_CHECKS ;
     1282    14343        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:216  
     1283    14344    1   GC_DKEND_CHECKS: PROC ALTRET ;

  14344  6 003251   200010 741300       GC_DKEND_CH* STX1  ! PATCH_CARD,,AUTO

     1284    14345
     1285    14346        /* Code */
     1286    14347
     1287    14348    2      IF BCD_CARD.BCD.CONTROL = '$'

  14348  6 003252   040000 106400                    CMPC    fill='040'O
         6 003253   000000 000007 1                  ADSC9   BCD_CARD                 cn=0,n=7
         6 003254   000020 000001 7                  ADSC9   16                       cn=0,n=1
         6 003255   003346 601000 6                  TNZ     s:14375

     1288    14349    2      THEN IF BCD_CARD.BCD.LBL = OBJECT.BCD.LBL

  14349  6 003256   000022 236000 1                  LDQ     BCD_CARD+18
         6 003257   000022 116000 xsym               CMPQ    OBJECT+18
         6 003260   003340 601000 6                  TNZ     s:14371

     1289    14350    3         THEN DO ;

     1290    14351    4                 DO CUR# = 0 TO 3;

  14351  6 003261   000000 450000 xsym               STZ     CUR#

     1291    14352    4                    IF SUBSTR (BCD_CARD.BCD.SEQ, CUR#, 1) < '0' |

  14352  6 003262   400000 220003                    LDX0    -131072,DU
         6 003263   000000 235000 xsym               LDA     CUR#
         6 003264   040000 106405                    CMPC    fill='040'O
         6 003265   000023 000001 1                  ADSC9   BCD_CARD+19,A            cn=0,n=1
         6 003266   000060 000001 7                  ADSC9   48                       cn=0,n=1
         6 003267   003271 602000 6                  TNC     s:14352+7
         6 003270   000000 220003                    LDX0    0,DU
         6 003271   400000 221003                    LDX1    -131072,DU
         6 003272   040005 106400                    CMPC    fill='040'O
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:217  
         6 003273   000125 000001 7                  ADSC9   85                       cn=0,n=1
         6 003274   000023 000001 1                  ADSC9   BCD_CARD+19,A            cn=0,n=1
         6 003275   003277 602000 6                  TNC     s:14352+13
         6 003276   000000 221003                    LDX1    0,DU
         6 003277   000000 636011                    EAQ     0,X1
         6 003300   200076 756100                    STQ     @MSG_CODE+1,,AUTO
         6 003301   000000 636010                    EAQ     0,X0
         6 003302   200076 276100                    ORQ     @MSG_CODE+1,,AUTO
         6 003303   003312 600000 6                  TZE     s:14359

     1292    14353    4                            SUBSTR (BCD_CARD.BCD.SEQ, CUR#, 1) > '9'
     1293    14354    5                    THEN DO ;

     1294    14355    5                            CALL GC_ERR_MSG (%E$GDC_DKE_NON_NUMERIC) ;

  14355  6 003304   000137 236000 7                  LDQ     95
         6 003305   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 003306   005035 701000 6                  TSX1    GC_ERR_MSG
         6 003307   000000 011000                    NOP     0

     1295    14356    5                            ALTRETURN ;

  14356  6 003310   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 003311   000000 702211                    TSX2  ! 0,X1

     1296    14357    5                         END /* THEN */ ;
     1297    14358    4                    ELSE /* Do Nothing */ ;
     1298    14359    4                 END /* DO */ ;

  14359  6 003312   000001 035007                    ADLA    1,DL
         6 003313   000000 755000 xsym               STA     CUR#
         6 003314   000004 115007                    CMPA    4,DL
         6 003315   003262 602000 6                  TNC     s:14352

     1299    14360    3                 SEQ = SEQ + 1;

  14360  6 003316   000065 236000 1                  LDQ     SEQ
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:218  
         6 003317   000001 036007                    ADLQ    1,DL
         6 003320   000065 756000 1                  STQ     SEQ

     1300    14361    3                 CALL CHARBIN (CARD_SEQ, BCD_CARD.BCD.SEQ);

  14361  6 003321   000100 305400                    DTB
         6 003322   000023 030004 1                  NDSC9   BCD_CARD+19              cn=0,s=nosgn,sf=0,n=4
         6 003323   200076 000010                    NDSC9   @MSG_CODE+1,,AUTO        cn=0,s=lsgnf,sf=0,n=8
         6 003324   200077 235100                    LDA     @MSG_CODE+2,,AUTO
         6 003325   200003 755100                    STA     CARD_SEQ,,AUTO

     1301    14362    3                 IF CARD_SEQ = SEQ

  14362  6 003326   200003 116100                    CMPQ    CARD_SEQ,,AUTO
         6 003327   003336 600000 6                  TZE     s:14368

     1302    14363    3                 THEN /* Do Nothing */ ;
     1303    14364    4                 ELSE DO ;

     1304    14365    4                         CALL GC_ERR_MSG (%E$GDC_DKE_SEQ) ;

  14365  6 003330   000141 236000 7                  LDQ     97
         6 003331   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 003332   005035 701000 6                  TSX1    GC_ERR_MSG
         6 003333   000000 011000                    NOP     0

     1305    14366    4                         ALTRETURN ;

  14366  6 003334   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 003335   000000 702211                    TSX2  ! 0,X1

     1306    14367    4                      END /* ELSE */ ;
     1307    14368    3                 RETURN ;

  14368  6 003336   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 003337   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:219  
     1308    14369    3              END /* THEN */ ;
     1309    14370    3         ELSE DO ;

     1310    14371    3                 CALL GC_ERR_MSG (%E$GDC_DKE_LBL) ;

  14371  6 003340   000143 236000 7                  LDQ     99
         6 003341   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 003342   005035 701000 6                  TSX1    GC_ERR_MSG
         6 003343   000000 011000                    NOP     0

     1311    14372    3                 ALTRETURN ;

  14372  6 003344   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 003345   000000 702211                    TSX2  ! 0,X1

     1312    14373    3              END /* ELSE */ ;
     1313    14374    3      ELSE DO ;

     1314    14375    3              CALL GC_ERR_MSG (%E$GDC_DKE_CONTROL) ;

  14375  6 003346   000145 236000 7                  LDQ     101
         6 003347   200075 756100                    STQ     VAL_INX+2,,AUTO
         6 003350   005035 701000 6                  TSX1    GC_ERR_MSG
         6 003351   000000 011000                    NOP     0

     1315    14376    3              ALTRETURN ;

  14376  6 003352   200010 221300                    LDX1  ! PATCH_CARD,,AUTO
         6 003353   000000 702211                    TSX2  ! 0,X1

     1316    14377    3           END /* ELSE */ ;
     1317    14378
     1318    14379    2   END GC_DKEND_CHECKS;
     1319    14380        %EJECT;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:220  
     1320    14381    1   GC_GET_CONFIG: PROC ALTRET ;

  14381  6 003354   200006 741300       GC_GET_CONF* STX1  ! PREFACE_FOUND+1,,AUTO

     1321    14382
     1322    14383    2      DCL HDR$ PTR ALIGNED ;
     1323    14384           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1324    14411           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1325    14447    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1326    14448
     1327    14449        /* Code */
     1328    14450
     1329    14451           /* set up MCA command */
     1330    14452    2      HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;

  14452  6 003355   000101 236000 xsym               LDQ     DUP+65
         6 003356   000004 036003                    ADLQ    4,DU
         6 003357   200007 756100                    STQ     HDR$,,AUTO

     1331    14453    2      HDR_BLK.DEFINER = 7 ;

  14453  6 003360   200007 470500                    LDP0    HDR$,,AUTO
         6 003361   000100 101400                    MRL     fill='000'O
         6 003362   000011 000004 xsym               ADSC9   B_VECTNIL+9              cn=0,n=4
         6 003363   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1

     1332    14454    2      HDR_BLK.RD_FLPY = '000000001'B;

  14454  6 003364   200007 470500                    LDP0    HDR$,,AUTO
         6 003365   000100 100400                    MLR     fill='000'O
         6 003366   000033 000001 xsym               ADSC9   B_VECTNIL+27             cn=0,n=1
         6 003367   000001 400001                    ADSC9   1,,PR0                   cn=2,n=1

     1333    14455    2      MCA_B.DCW_LIST.IDCW1 = '130000724002'O ;

  14455  6 003370   000076 236000 2                  LDQ     NO_BLANKS+21
         6 003371   000101 470400 xsym               LDP0    DUP+65
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:221  
         6 003372   000000 756100                    STQ     0,,PR0

     1334    14456    2      MCA_B.DCW_LIST.IDCW2 = '030000700001'O ;

  14456  6 003373   000077 236000 2                  LDQ     NO_BLANKS+22
         6 003374   000101 470400 xsym               LDP0    DUP+65
         6 003375   000002 756100                    STQ     2,,PR0

     1335    14457    2      HDR_BLK.IO_PARAM_BLK.DEST_LEN = 12 ;

  14457  6 003376   200007 470500                    LDP0    HDR$,,AUTO
         6 003377   000100 101400                    MRL     fill='000'O
         6 003400   000146 000004 7                  ADSC9   102                      cn=0,n=4
         6 003401   000007 400002                    ADSC9   7,,PR0                   cn=2,n=2

     1336    14458    2      MCA_B.COMMAND.DATA = 'READ CONFIG ';

  14458  6 003402   000101 470400 xsym               LDP0    DUP+65
         6 003403   040100 100400                    MLR     fill='040'O
         6 003404   000100 000014 2                  ADSC9   NO_BLANKS+23             cn=0,n=12
         6 003405   000014 000040                    ADSC9   12,,PR0                  cn=0,n=32

     1337    14459
     1338    14460           /* set up DCW list */
     1339    14461    2      CALL GC_ADDR (ADDR(MCA_B.COMMAND), MCA_B.DCW_LIST.DCW1.ADDRESS) ;

  14461  6 003406   000101 236000 xsym               LDQ     DUP+65
         6 003407   000004 036003                    ADLQ    4,DU
         6 003410   200106 756100                    STQ     @MSG_CODE+9,,AUTO
         6 003411   000101 236000 xsym               LDQ     DUP+65
         6 003412   000001 036003                    ADLQ    1,DU
         6 003413   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 003414   200106 630500                    EPPR0   @MSG_CODE+9,,AUTO
         6 003415   200043 450500                    STP0    DATA$+3,,AUTO
         6 003416   004454 701000 6                  TSX1    GC_ADDR
         6 003417   000000 011000                    NOP     0

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:222  
     1340    14462    2      MCA_B.DCW_LIST.DCW1.COUNT = 11 ;

  14462  6 003420   000013 220003                    LDX0    11,DU
         6 003421   000101 470400 xsym               LDP0    DUP+65
         6 003422   000001 440100                    SXL0    1,,PR0

     1341    14463    2      CALL GC_ADDR (ADDR(MCA_B.CONFIG), MCA_B.DCW_LIST.DCW2.ADDRESS) ;

  14463  6 003423   000101 236000 xsym               LDQ     DUP+65
         6 003424   051237 036003                    ADLQ    21151,DU
         6 003425   200107 756100                    STQ     @MSG_CODE+10,,AUTO
         6 003426   000101 236000 xsym               LDQ     DUP+65
         6 003427   000003 036003                    ADLQ    3,DU
         6 003430   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 003431   200107 630500                    EPPR0   @MSG_CODE+10,,AUTO
         6 003432   200043 450500                    STP0    DATA$+3,,AUTO
         6 003433   004454 701000 6                  TSX1    GC_ADDR
         6 003434   000000 011000                    NOP     0

     1342    14464    2      MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8;

  14464  6 003435   007710 220003                    LDX0    4040,DU
         6 003436   000101 470400 xsym               LDP0    DUP+65
         6 003437   000003 440100                    SXL0    3,,PR0

     1343    14465
     1344    14466           /* perform the I/O */
     1345    14467    2      HDR$ = ADDR(MCA_B.CONFIG) ;

  14467  6 003440   000101 236000 xsym               LDQ     DUP+65
         6 003441   051237 036003                    ADLQ    21151,DU
         6 003442   200007 756100                    STQ     HDR$,,AUTO

     1346    14468    2      FACTORY_TEST = %TRUE ;

  14468  6 003443   400000 236003                    LDQ     -131072,DU
         6 003444   200010 756100                    STQ     FACTORY_TEST,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:223  

     1347    14469    3      DO UNTIL (NOT FACTORY_TEST) ;

     1348    14470    3         CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;

  14470  6 003445   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 003446   000000 701000 xent               TSX1    TOU$READ_MCA_DATA
         6 003447   003464 702000 6                  TSX2    ERROR

     1349    14471    3         CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, HDR$) ;

  14471  6 003450   200007 630500                    EPPR0   HDR$,,AUTO
         6 003451   200044 450500                    STP0    @ITEM$+1,,AUTO
         6 003452   200010 631500                    EPPR1   FACTORY_TEST,,AUTO
         6 003453   200043 451500                    STP1    DATA$+3,,AUTO
         6 003454   004411 701000 6                  TSX1    GC_CHECK_FACTORY_TEST
         6 003455   000000 011000                    NOP     0

     1350    14472    3      END /* DO UNTIL */ ;

  14472  6 003456   200010 234100                    SZN     FACTORY_TEST,,AUTO
         6 003457   003445 604000 6                  TMI     s:14470

     1351    14473    2      CALL GC_DUMMY_READ ALTRET (ERROR) ;

  14473  6 003460   003734 701000 6                  TSX1    GC_DUMMY_READ
         6 003461   003464 702000 6                  TSX2    ERROR

     1352    14474    2      RETURN ;

  14474  6 003462   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 003463   000001 702211                    TSX2  ! 1,X1

     1353    14475
     1354    14476    2   ERROR:
     1355    14477    2      ALTRETURN ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:224  
  14477  6 003464   200006 221300       ERROR        LDX1  ! PREFACE_FOUND+1,,AUTO
         6 003465   000000 702211                    TSX2  ! 0,X1

     1356    14478
     1357    14479    2   END GC_GET_CONFIG ;
     1358    14480        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:225  
     1359    14481        /*I* NAME:         GC_GET_HEADER
     1360    14482             AUTHOR:       Scott S. Sheppard
     1361    14483             PURPOSE:      Obtains an MCA diskette header
     1362    14484             INTERFACE:    ADDR function
     1363    14485                           GC_ADDR
     1364    14486                           TOU$READ_MCA_DATA
     1365    14487                           GC_DUMMY_READ
     1366    14488             PARAMETERS:   None passed.
     1367    14489             DATA:         DUP.IFAD.DRIVE_NUMBER - input
     1368    14490                           MCA_B.DISKETTE_HEADER (address) - input
     1369    14491                           MCA_B.COMMAND.HDR_BLK - output
     1370    14492                           MCA_B.COMMAND.DATA - output
     1371    14493                           MCA_B.DCW_LIST.DCW1.ADDRESS - output
     1372    14494                           MCA_B.DCW_LIST.DCW1.COUNT - output
     1373    14495                           MCA_B.DCW_LIST.DCW2.ADDRESS - output
     1374    14496                           MCA_B.DCW_LIST.DCW2.COUNT - output
     1375    14497             DESCRIPTION:  This  procedure reads  a diskette  header from
     1376    14498                           the  diskette  on  the  drive specified by the
     1377    14499                           IFAD  drive number in  the IMU associated with
     1378    14500                           the M$IFAD dcb.
     1379    14501        */
     1380    14502        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:226  
     1381    14503    1   GC_GET_HEADER: PROC ALTRET ;

  14503  6 003466   200006 741300       GC_GET_HEAD* STX1  ! PREFACE_FOUND+1,,AUTO

     1382    14504
     1383    14505    2      DCL HDR$ PTR ALIGNED ;
     1384    14506           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1385    14533    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1386    14534
     1387    14535        /* Code */
     1388    14536
     1389    14537           /* set up MCA command */
     1390    14538    2      HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;

  14538  6 003467   000101 236000 xsym               LDQ     DUP+65
         6 003470   000004 036003                    ADLQ    4,DU
         6 003471   200007 756100                    STQ     HDR$,,AUTO

     1391    14539    2      HDR_BLK.DEFINER = 7 ;

  14539  6 003472   200007 470500                    LDP0    HDR$,,AUTO
         6 003473   000100 101400                    MRL     fill='000'O
         6 003474   000011 000004 xsym               ADSC9   B_VECTNIL+9              cn=0,n=4
         6 003475   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1

     1392    14540    2      HDR_BLK.RD_FLPY = '000000001'B;

  14540  6 003476   200007 470500                    LDP0    HDR$,,AUTO
         6 003477   000100 100400                    MLR     fill='000'O
         6 003500   000033 000001 xsym               ADSC9   B_VECTNIL+27             cn=0,n=1
         6 003501   000001 400001                    ADSC9   1,,PR0                   cn=2,n=1

     1393    14541    2      MCA_B.DCW_LIST.IDCW1 = '130000720002'O ;

  14541  6 003502   000103 236000 2                  LDQ     NO_BLANKS+26
         6 003503   000101 470400 xsym               LDP0    DUP+65
         6 003504   000000 756100                    STQ     0,,PR0
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:227  

     1394    14542    2      HDR_BLK.IO_PARAM_BLK.DEST_LEN = 10 ;

  14542  6 003505   200007 470500                    LDP0    HDR$,,AUTO
         6 003506   000100 101400                    MRL     fill='000'O
         6 003507   000014 000004 xsym               ADSC9   B_VECTNIL+12             cn=0,n=4
         6 003510   000007 400002                    ADSC9   7,,PR0                   cn=2,n=2

     1395    14543    2      CALL CONCAT (MCA_B.COMMAND.DATA, 'READ HDR,', DUP.IFAD.DRIVE_NUMBER) ;

  14543  6 003511   000101 470400 xsym               LDP0    DUP+65
         6 003512   040100 100400                    MLR     fill='040'O
         6 003513   000104 000011 2                  ADSC9   NO_BLANKS+27             cn=0,n=9
         6 003514   000014 000011                    ADSC9   12,,PR0                  cn=0,n=9
         6 003515   000101 470400 xsym               LDP0    DUP+65
         6 003516   040100 100400                    MLR     fill='040'O
         6 003517   000063 000001 xsym               ADSC9   DUP+51                   cn=0,n=1
         6 003520   000016 200027                    ADSC9   14,,PR0                  cn=1,n=23

     1396    14544
     1397    14545           /* set up DCW list */
     1398    14546    2      CALL GC_ADDR (ADDR(MCA_B.COMMAND), MCA_B.DCW_LIST.DCW1.ADDRESS) ;

  14546  6 003521   000101 236000 xsym               LDQ     DUP+65
         6 003522   000004 036003                    ADLQ    4,DU
         6 003523   200110 756100                    STQ     @MSG_CODE+11,,AUTO
         6 003524   000101 236000 xsym               LDQ     DUP+65
         6 003525   000001 036003                    ADLQ    1,DU
         6 003526   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 003527   200110 630500                    EPPR0   @MSG_CODE+11,,AUTO
         6 003530   200043 450500                    STP0    DATA$+3,,AUTO
         6 003531   004454 701000 6                  TSX1    GC_ADDR
         6 003532   000000 011000                    NOP     0

     1399    14547    2      MCA_B.DCW_LIST.DCW1.COUNT = 11 ;

  14547  6 003533   000013 220003                    LDX0    11,DU
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:228  
         6 003534   000101 470400 xsym               LDP0    DUP+65
         6 003535   000001 440100                    SXL0    1,,PR0

     1400    14548    2      CALL GC_ADDR (ADDR(MCA_B.DISKETTE_HEADER), MCA_B.DCW_LIST.DCW2.ADDRESS) ;

  14548  6 003536   000101 236000 xsym               LDQ     DUP+65
         6 003537   000026 036003                    ADLQ    22,DU
         6 003540   200111 756100                    STQ     @MSG_CODE+12,,AUTO
         6 003541   000101 236000 xsym               LDQ     DUP+65
         6 003542   000003 036003                    ADLQ    3,DU
         6 003543   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 003544   200111 630500                    EPPR0   @MSG_CODE+12,,AUTO
         6 003545   200043 450500                    STP0    DATA$+3,,AUTO
         6 003546   004454 701000 6                  TSX1    GC_ADDR
         6 003547   000000 011000                    NOP     0

     1401    14549    2      MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8;

  14549  6 003550   007710 220003                    LDX0    4040,DU
         6 003551   000101 470400 xsym               LDP0    DUP+65
         6 003552   000003 440100                    SXL0    3,,PR0

     1402    14550
     1403    14551           /* perform the I/O */
     1404    14552    2      HDR$ = ADDR(MCA_B.DISKETTE_HEADER) ;

  14552  6 003553   000101 236000 xsym               LDQ     DUP+65
         6 003554   000026 036003                    ADLQ    22,DU
         6 003555   200007 756100                    STQ     HDR$,,AUTO

     1405    14553    2      FACTORY_TEST = %TRUE ;

  14553  6 003556   400000 236003                    LDQ     -131072,DU
         6 003557   200010 756100                    STQ     FACTORY_TEST,,AUTO

     1406    14554    3      DO UNTIL (NOT FACTORY_TEST) ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:229  
     1407    14555    3         CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;

  14555  6 003560   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 003561   000000 701000 xent               TSX1    TOU$READ_MCA_DATA
         6 003562   003577 702000 6                  TSX2    ERROR

     1408    14556    3         CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, HDR$) ;

  14556  6 003563   200007 630500                    EPPR0   HDR$,,AUTO
         6 003564   200044 450500                    STP0    @ITEM$+1,,AUTO
         6 003565   200010 631500                    EPPR1   FACTORY_TEST,,AUTO
         6 003566   200043 451500                    STP1    DATA$+3,,AUTO
         6 003567   004411 701000 6                  TSX1    GC_CHECK_FACTORY_TEST
         6 003570   000000 011000                    NOP     0

     1409    14557    3      END /* DO UNTIL */ ;

  14557  6 003571   200010 234100                    SZN     FACTORY_TEST,,AUTO
         6 003572   003560 604000 6                  TMI     s:14555

     1410    14558    2      CALL GC_DUMMY_READ ALTRET (ERROR) ;

  14558  6 003573   003734 701000 6                  TSX1    GC_DUMMY_READ
         6 003574   003577 702000 6                  TSX2    ERROR

     1411    14559    2      RETURN ;

  14559  6 003575   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 003576   000001 702211                    TSX2  ! 1,X1

     1412    14560
     1413    14561    2   ERROR:
     1414    14562    2      ALTRETURN ;

  14562  6 003577   200006 221300       ERROR        LDX1  ! PREFACE_FOUND+1,,AUTO
         6 003600   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:230  
     1415    14563
     1416    14564    2   END GC_GET_HEADER ;
     1417    14565        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:231  
     1418    14566        /*I* NAME:         GC_GET_DIRECTORY
     1419    14567             AUTHOR:       Scott S. Sheppard
     1420    14568             PURPOSE:      Obtains an MCA diskette directory
     1421    14569             INTERFACE:    ADDR function
     1422    14570                           GC_ADDR
     1423    14571                           TOU$READ_MCA_DATA
     1424    14572                           GC_DUMMY_READ
     1425    14573             PARAMETERS:   None passed.
     1426    14574             DATA:         DUP.IFAD.DRIVE_NUMBER - input
     1427    14575                           MCA_B.DIRECTORY (address) - input
     1428    14576                           MCA_B.COMMAND.HDR_BLK - output
     1429    14577                           MCA_B.COMMAND.DATA - output
     1430    14578                           MCA_B.DCW_LIST.DCW1.ADDRESS - output
     1431    14579                           MCA_B.DCW_LIST.DCW1.COUNT - output
     1432    14580                           MCA_B.DCW_LIST.DCW2.ADDRESS - output
     1433    14581                           MCA_B.DCW_LIST.DCW2.COUNT - output
     1434    14582                           MCA_B.DIRECTORY.SIZE - output
     1435    14583             DESCRIPTION:  This procedure reads a diskette directory from
     1436    14584                           the  diskette  on  the  drive specified by the
     1437    14585                           IFAD  drive number in  the IMU associated with
     1438    14586                           the M$IFAD dcb.
     1439    14587        */
     1440    14588        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:232  
     1441    14589    1   GC_GET_DIRECTORY: PROC ALTRET ;

  14589  6 003601   200006 741300       GC_GET_DIRE* STX1  ! PREFACE_FOUND+1,,AUTO

     1442    14590
     1443    14591    2      DCL HDR$ PTR ALIGNED ;
     1444    14592           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1445    14619           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1446    14655    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1447    14656
     1448    14657        /* Code */
     1449    14658
     1450    14659           /* set up MCA command */
     1451    14660    2      HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;

  14660  6 003602   000101 236000 xsym               LDQ     DUP+65
         6 003603   000004 036003                    ADLQ    4,DU
         6 003604   200007 756100                    STQ     HDR$,,AUTO

     1452    14661    2      HDR_BLK.DEFINER = 7 ;

  14661  6 003605   200007 470500                    LDP0    HDR$,,AUTO
         6 003606   000100 101400                    MRL     fill='000'O
         6 003607   000011 000004 xsym               ADSC9   B_VECTNIL+9              cn=0,n=4
         6 003610   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1

     1453    14662    2      HDR_BLK.RD_FLPY = '000000001'B;

  14662  6 003611   200007 470500                    LDP0    HDR$,,AUTO
         6 003612   000100 100400                    MLR     fill='000'O
         6 003613   000033 000001 xsym               ADSC9   B_VECTNIL+27             cn=0,n=1
         6 003614   000001 400001                    ADSC9   1,,PR0                   cn=2,n=1

     1454    14663    2      MCA_B.DCW_LIST.IDCW1 = '130000720002'O ;

  14663  6 003615   000103 236000 2                  LDQ     NO_BLANKS+26
         6 003616   000101 470400 xsym               LDP0    DUP+65
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:233  
         6 003617   000000 756100                    STQ     0,,PR0

     1455    14664    2      HDR_BLK.IO_PARAM_BLK.DEST_LEN = 16 ;

  14664  6 003620   200007 470500                    LDP0    HDR$,,AUTO
         6 003621   000100 101400                    MRL     fill='000'O
         6 003622   000147 000004 7                  ADSC9   103                      cn=0,n=4
         6 003623   000007 400002                    ADSC9   7,,PR0                   cn=2,n=2

     1456    14665    2      CALL CONCAT (MCA_B.COMMAND.DATA, 'READ DIRECTORY,', DUP.IFAD.DRIVE_NUMBER) ;

  14665  6 003624   000101 470400 xsym               LDP0    DUP+65
         6 003625   040100 100400                    MLR     fill='040'O
         6 003626   000107 000017 2                  ADSC9   NO_BLANKS+30             cn=0,n=15
         6 003627   000014 000017                    ADSC9   12,,PR0                  cn=0,n=15
         6 003630   000101 470400 xsym               LDP0    DUP+65
         6 003631   040100 100400                    MLR     fill='040'O
         6 003632   000063 000001 xsym               ADSC9   DUP+51                   cn=0,n=1
         6 003633   000017 600021                    ADSC9   15,,PR0                  cn=3,n=17

     1457    14666
     1458    14667           /* set up DCW list */
     1459    14668    2      CALL GC_ADDR (ADDR(MCA_B.COMMAND), MCA_B.DCW_LIST.DCW1.ADDRESS) ;

  14668  6 003634   000101 236000 xsym               LDQ     DUP+65
         6 003635   000004 036003                    ADLQ    4,DU
         6 003636   200112 756100                    STQ     @MSG_CODE+13,,AUTO
         6 003637   000101 236000 xsym               LDQ     DUP+65
         6 003640   000001 036003                    ADLQ    1,DU
         6 003641   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 003642   200112 630500                    EPPR0   @MSG_CODE+13,,AUTO
         6 003643   200043 450500                    STP0    DATA$+3,,AUTO
         6 003644   004454 701000 6                  TSX1    GC_ADDR
         6 003645   000000 011000                    NOP     0

     1460    14669    2      MCA_B.DCW_LIST.DCW1.COUNT = 12 ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:234  
  14669  6 003646   000014 220003                    LDX0    12,DU
         6 003647   000101 470400 xsym               LDP0    DUP+65
         6 003650   000001 440100                    SXL0    1,,PR0

     1461    14670    2      CALL GC_ADDR (ADDR(MCA_B.DIRECTORY), MCA_B.DCW_LIST.DCW2.ADDRESS) ;

  14670  6 003651   000101 236000 xsym               LDQ     DUP+65
         6 003652   000100 036003                    ADLQ    64,DU
         6 003653   200113 756100                    STQ     @MSG_CODE+14,,AUTO
         6 003654   000101 236000 xsym               LDQ     DUP+65
         6 003655   000003 036003                    ADLQ    3,DU
         6 003656   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 003657   200113 630500                    EPPR0   @MSG_CODE+14,,AUTO
         6 003660   200043 450500                    STP0    DATA$+3,,AUTO
         6 003661   004454 701000 6                  TSX1    GC_ADDR
         6 003662   000000 011000                    NOP     0

     1462    14671    2      MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8;

  14671  6 003663   007710 220003                    LDX0    4040,DU
         6 003664   000101 470400 xsym               LDP0    DUP+65
         6 003665   000003 440100                    SXL0    3,,PR0

     1463    14672
     1464    14673           /* perform the I/O */
     1465    14674    2      HDR$ = ADDR(MCA_B.DIRECTORY) ;

  14674  6 003666   000101 236000 xsym               LDQ     DUP+65
         6 003667   000100 036003                    ADLQ    64,DU
         6 003670   200007 756100                    STQ     HDR$,,AUTO

     1466    14675    2      FACTORY_TEST = %TRUE ;

  14675  6 003671   400000 236003                    LDQ     -131072,DU
         6 003672   200010 756100                    STQ     FACTORY_TEST,,AUTO

     1467    14676    3      DO UNTIL (NOT FACTORY_TEST) ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:235  

     1468    14677    3         CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;

  14677  6 003673   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 003674   000000 701000 xent               TSX1    TOU$READ_MCA_DATA
         6 003675   003732 702000 6                  TSX2    ERROR

     1469    14678    3         CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, HDR$) ;

  14678  6 003676   200007 630500                    EPPR0   HDR$,,AUTO
         6 003677   200044 450500                    STP0    @ITEM$+1,,AUTO
         6 003700   200010 631500                    EPPR1   FACTORY_TEST,,AUTO
         6 003701   200043 451500                    STP1    DATA$+3,,AUTO
         6 003702   004411 701000 6                  TSX1    GC_CHECK_FACTORY_TEST
         6 003703   000000 011000                    NOP     0

     1470    14679    3      END /* DO UNTIL */ ;

  14679  6 003704   200010 234100                    SZN     FACTORY_TEST,,AUTO
         6 003705   003673 604000 6                  TMI     s:14677

     1471    14680    2      HDR$ = ADDR (MCA_B.DISKETTE_HEADER.DATA) ;

  14680  6 003706   000101 236000 xsym               LDQ     DUP+65
         6 003707   000036 036003                    ADLQ    30,DU
         6 003710   200007 756100                    STQ     HDR$,,AUTO

     1472    14681    2      CALL GC_CONVERT_8_TO_9 (BINBIT (DISKETTE_HEADER.DIR_SIZE, 36),

  14681  6 003711   200007 470500                    LDP0    HDR$,,AUTO
         6 003712   000100 101500                    MRL     fill='000'O
         6 003713   000027 200002                    ADSC9   23,,PR0                  cn=1,n=2
         6 003714   200076 000004                    ADSC9   @MSG_CODE+1,,AUTO        cn=0,n=4
         6 003715   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 003716   200114 756100                    STQ     @MSG_CODE+15,,AUTO
         6 003717   000101 236000 xsym               LDQ     DUP+65
         6 003720   001310 036003                    ADLQ    712,DU
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:236  
         6 003721   200032 756100                    STQ     @MCA_DATA+1,,AUTO
         6 003722   200114 631500                    EPPR1   @MSG_CODE+15,,AUTO
         6 003723   200031 451500                    STP1    FILE_DATA$+3,,AUTO
         6 003724   004775 701000 6                  TSX1    GC_CONVERT_8_TO_9
         6 003725   000000 011000                    NOP     0

     1473    14682    2              MCA_B.DIRECTORY.SIZE) ;
     1474    14683    2      CALL GC_DUMMY_READ ALTRET (ERROR) ;

  14683  6 003726   003734 701000 6                  TSX1    GC_DUMMY_READ
         6 003727   003732 702000 6                  TSX2    ERROR

     1475    14684    2      RETURN ;

  14684  6 003730   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 003731   000001 702211                    TSX2  ! 1,X1

     1476    14685
     1477    14686    2   ERROR:
     1478    14687    2      ALTRETURN ;

  14687  6 003732   200006 221300       ERROR        LDX1  ! PREFACE_FOUND+1,,AUTO
         6 003733   000000 702211                    TSX2  ! 0,X1

     1479    14688
     1480    14689    2   END GC_GET_DIRECTORY ;
     1481    14690        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:237  
     1482    14691        /*I* NAME:         GC_DUMMY_READ
     1483    14692             AUTHOR:       Kathy Larkin
     1484    14693             PURPOSE:      Clear MCA with dummy read
     1485    14694             INTERFACE:    GC_CHECK_FOR_NORM_STATUS
     1486    14695                           TOU$READ_MCA_DATA
     1487    14696             PARAMETERS:   None passed.
     1488    14697             DATA:         MCA_B.STATUS - input
     1489    14698                           MCA_B.DCW_LIST.DCW2.COUNT - output
     1490    14699                           READ_COMPLETE - input
     1491    14700             DESCRIPTION:  This procedure performs  a 'dummy' read to the
     1492    14701                           MCA to complete the current read.  The size of
     1493    14702                           the buffer for this read is set to the size of
     1494    14703                           the header block which will be returned by the
     1495    14704                           MCA (8 words).  The ALTRETURN will be taken if
     1496    14705                           the end-of-session was  not received, or if an
     1497    14706                           abnormal status was received, as determined by
     1498    14707                           GC_CHECK_FOR_NORM_STATUS.
     1499    14708        */
     1500    14709        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:238  
     1501    14710    1   GC_DUMMY_READ: PROC ALTRET ;

  14710  6 003734   200034 741300       GC_DUMMY_RE* STX1  ! @HOST_DATA+2,,AUTO

     1502    14711
     1503    14712    2      DCL READ_COMPLETE BIT (1) CALIGNED ;
     1504    14713    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1505    14714    2      DCL HDR$ PTR ALIGNED ;
     1506    14715           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1507    14742    2      DCL DATA$ PTR ALIGNED ;
     1508    14743           %DISKETTE_READ_BUFFER (STCLASS = "BASED (DATA$)") ;
     1509    14755
     1510    14756        /* Code */
     1511    14757
     1512    14758    2      CALL GC_CHECK_FOR_NORM_STATUS (READ_COMPLETE) ALTRET (ERROR) ;

  14758  6 003735   200035 630500                    EPPR0   READ_COMPLETE,,AUTO
         6 003736   200043 450500                    STP0    DATA$+3,,AUTO
         6 003737   004355 701000 6                  TSX1    GC_CHECK_FOR_NORM_STATUS
         6 003740   004024 702000 6                  TSX2    ERROR

     1513    14759    2      IF READ_COMPLETE

  14759  6 003741   200035 234100                    SZN     READ_COMPLETE,,AUTO
         6 003742   003745 605000 6                  TPL     s:14762

     1514    14760    2      THEN RETURN ;

  14760  6 003743   200034 221300                    LDX1  ! @HOST_DATA+2,,AUTO
         6 003744   000001 702211                    TSX2  ! 1,X1

     1515    14761    3      ELSE DO /* perform extra read */ ;

     1516    14762    3              HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;

  14762  6 003745   000101 236000 xsym               LDQ     DUP+65
         6 003746   000004 036003                    ADLQ    4,DU
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:239  
         6 003747   200037 756100                    STQ     HDR$,,AUTO

     1517    14763    3              MCA_B.DCW_LIST.IDCW1 = '150000720002'O ;

  14763  6 003750   000113 236000 2                  LDQ     NO_BLANKS+34
         6 003751   000101 470400 xsym               LDP0    DUP+65
         6 003752   000000 756100                    STQ     0,,PR0

     1518    14764    3              HDR_BLK.DEFINER = 9 ;

  14764  6 003753   200037 470500                    LDP0    HDR$,,AUTO
         6 003754   000100 101400                    MRL     fill='000'O
         6 003755   000013 000004 xsym               ADSC9   B_VECTNIL+11             cn=0,n=4
         6 003756   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1

     1519    14765    3              MCA_B.DCW_LIST.DCW1.COUNT = 8 ;

  14765  6 003757   000010 220003                    LDX0    8,DU
         6 003760   000101 471400 xsym               LDP1    DUP+65
         6 003761   100001 440100                    SXL0    1,,PR1

     1520    14766    3              MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8 ;

  14766  6 003762   007710 221003                    LDX1    4040,DU
         6 003763   000101 471400 xsym               LDP1    DUP+65
         6 003764   100003 441100                    SXL1    3,,PR1

     1521    14767    3              DATA$ = ADDR(MCA_B.DUMMY_BUFFER);

  14767  6 003765   000101 236000 xsym               LDQ     DUP+65
         6 003766   041327 036003                    ADLQ    17111,DU
         6 003767   200040 756100                    STQ     DATA$,,AUTO

     1522    14768    3              CALL GC_ADDR (DATA$,MCA_B.DCW_LIST.DCW2.ADDRESS) ;

  14768  6 003770   000101 236000 xsym               LDQ     DUP+65
         6 003771   000003 036003                    ADLQ    3,DU
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:240  
         6 003772   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 003773   200040 631500                    EPPR1   DATA$,,AUTO
         6 003774   200043 451500                    STP1    DATA$+3,,AUTO
         6 003775   004454 701000 6                  TSX1    GC_ADDR
         6 003776   000000 011000                    NOP     0

     1523    14769    3              FACTORY_TEST = %TRUE ;

  14769  6 003777   400000 236003                    LDQ     -131072,DU
         6 004000   200036 756100                    STQ     FACTORY_TEST,,AUTO

     1524    14770    4              DO UNTIL (NOT FACTORY_TEST) ;

     1525    14771    4                 CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;

  14771  6 004001   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 004002   000000 701000 xent               TSX1    TOU$READ_MCA_DATA
         6 004003   004024 702000 6                  TSX2    ERROR

     1526    14772    4                 CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, DATA$) ;

  14772  6 004004   200040 630500                    EPPR0   DATA$,,AUTO
         6 004005   200044 450500                    STP0    @ITEM$+1,,AUTO
         6 004006   200036 631500                    EPPR1   FACTORY_TEST,,AUTO
         6 004007   200043 451500                    STP1    DATA$+3,,AUTO
         6 004010   004411 701000 6                  TSX1    GC_CHECK_FACTORY_TEST
         6 004011   000000 011000                    NOP     0

     1527    14773    4              END /* DO UNTIL */ ;

  14773  6 004012   200036 234100                    SZN     FACTORY_TEST,,AUTO
         6 004013   004001 604000 6                  TMI     s:14771

     1528    14774    3              CALL GC_CHECK_FOR_NORM_STATUS (READ_COMPLETE) ALTRET (ERROR) ;

  14774  6 004014   200035 630500                    EPPR0   READ_COMPLETE,,AUTO
         6 004015   200043 450500                    STP0    DATA$+3,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:241  
         6 004016   004355 701000 6                  TSX1    GC_CHECK_FOR_NORM_STATUS
         6 004017   004024 702000 6                  TSX2    ERROR

     1529    14775    3              IF READ_COMPLETE

  14775  6 004020   200035 234100                    SZN     READ_COMPLETE,,AUTO
         6 004021   004024 605000 6                  TPL     ERROR

     1530    14776    3              THEN RETURN ;

  14776  6 004022   200034 221300                    LDX1  ! @HOST_DATA+2,,AUTO
         6 004023   000001 702211                    TSX2  ! 1,X1

     1531    14777    3              ELSE /* fall through to ALTRETURN */ ;
     1532    14778    3           END /* ELSE DO */ ;
     1533    14779    2   ERROR:
     1534    14780    2      ALTRETURN ;

  14780  6 004024   200034 221300       ERROR        LDX1  ! @HOST_DATA+2,,AUTO
         6 004025   000000 702211                    TSX2  ! 0,X1

     1535    14781
     1536    14782    2   END GC_DUMMY_READ ;
     1537    14783        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:242  
     1538    14784        /*I* NAME:         GC_GET_FILE
     1539    14785             AUTHOR:       Scott S. Sheppard
     1540    14786                           Kathy Larkin
     1541    14787             PURPOSE:      Obtains an MCA diskette file
     1542    14788             INTERFACE:    ADDR function
     1543    14789                           GC_ADDR
     1544    14790                           TOU$READ_MCA_DATA
     1545    14791             PARAMETERS:   None passed.
     1546    14792             DATA:         DUP.IFAD.DRIVE_NUMBER - input
     1547    14793                           MCA_B.DIRECTORY (address) - input
     1548    14794                           MCA_B.COMMAND.HDR_BLK - output
     1549    14795                           MCA_B.COMMAND.DATA - output
     1550    14796                           MCA_B.DCW_LIST.DCW1.ADDRESS - output
     1551    14797                           MCA_B.DCW_LIST.DCW1.COUNT - output
     1552    14798                           MCA_B.DCW_LIST.DCW2.ADDRESS - output
     1553    14799                           MCA_B.DCW_LIST.DCW2.COUNT - output
     1554    14800                           MCA_B.FILE.SIZE - output
     1555    14801             DESCRIPTION:  This  procedure  reads  a  diskette file  from
     1556    14802                           the  diskette  on  the  drive specified by the
     1557    14803                           IFAD  drive number in  the IMU associated with
     1558    14804                           the M$IFAD dcb.
     1559    14805        */
     1560    14806
     1561    14807    1   GC_GET_FILE: PROC ALTRET ;

  14807  6 004026   200006 741300       GC_GET_FILE  STX1  ! PREFACE_FOUND+1,,AUTO

     1562    14808
     1563    14809    2      DCL HDR$ PTR ALIGNED ;
     1564    14810           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1565    14837    2      DCL DIR$ PTR ALIGNED ;
     1566    14838           %DIRECTORY_ENTRY (STCLASS = "BASED (DIR$)") ;
     1567    14865    2      DCL SAVE_8_UNDER_HDR (0:7) UBIN WORD ALIGNED ;
     1568    14866    2      DCL BYTES_TO_READ UBIN WORD ALIGNED ;
     1569    14867    2      DCL FIRST_READ BIT (1) CALIGNED ;
     1570    14868    2      DCL READ_COMPLETE BIT (1) CALIGNED ;
     1571    14869    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:243  
     1572    14870    2      DCL FILER$ PTR ALIGNED ;
     1573    14871    2      DCL FILE_DATA$  PTR ALIGNED ;
     1574    14872           %DISKETTE_READ_BUFFER (STCLASS = "BASED (FILE_DATA$)") ;
     1575    14884        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:244  
     1576    14885        /* Code */
     1577    14886
     1578    14887           /* set up MCA command */
     1579    14888    2      HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;

  14888  6 004027   000101 236000 xsym               LDQ     DUP+65
         6 004030   000004 036003                    ADLQ    4,DU
         6 004031   200007 756100                    STQ     HDR$,,AUTO

     1580    14889    2      HDR_BLK.DEFINER = 7 ;

  14889  6 004032   200007 470500                    LDP0    HDR$,,AUTO
         6 004033   000100 101400                    MRL     fill='000'O
         6 004034   000011 000004 xsym               ADSC9   B_VECTNIL+9              cn=0,n=4
         6 004035   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1

     1581    14890    2      HDR_BLK.RD_FLPY = '000000001'B;

  14890  6 004036   200007 470500                    LDP0    HDR$,,AUTO
         6 004037   000100 100400                    MLR     fill='000'O
         6 004040   000033 000001 xsym               ADSC9   B_VECTNIL+27             cn=0,n=1
         6 004041   000001 400001                    ADSC9   1,,PR0                   cn=2,n=1

     1582    14891    2      MCA_B.DCW_LIST.IDCW1 = '130000720002'O ;

  14891  6 004042   000103 236000 2                  LDQ     NO_BLANKS+26
         6 004043   000101 470400 xsym               LDP0    DUP+65
         6 004044   000000 756100                    STQ     0,,PR0

     1583    14892    2      HDR_BLK.IO_PARAM_BLK.DEST_LEN = 17 ;

  14892  6 004045   200007 470500                    LDP0    HDR$,,AUTO
         6 004046   000100 101400                    MRL     fill='000'O
         6 004047   000150 000004 7                  ADSC9   104                      cn=0,n=4
         6 004050   000007 400002                    ADSC9   7,,PR0                   cn=2,n=2

     1584    14893    2      DIR$ = ADDR (MCA_B.DIRECTORY.CURRENT) ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:245  

  14893  6 004051   000101 236000 xsym               LDQ     DUP+65
         6 004052   001311 036003                    ADLQ    713,DU
         6 004053   200010 756100                    STQ     DIR$,,AUTO

     1585    14894    2      CALL CONCAT (MCA_B.COMMAND.DATA, 'READ P=', DIRECTORY_ENTRY.PATH_NAME,

  14894  6 004054   000101 470400 xsym               LDP0    DUP+65
         6 004055   040100 100400                    MLR     fill='040'O
         6 004056   000114 000007 2                  ADSC9   NO_BLANKS+35             cn=0,n=7
         6 004057   000014 000007                    ADSC9   12,,PR0                  cn=0,n=7
         6 004060   200010 470500                    LDP0    DIR$,,AUTO
         6 004061   000101 471400 xsym               LDP1    DUP+65
         6 004062   040100 100500                    MLR     fill='040'O
         6 004063   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         6 004064   100015 600010                    ADSC9   13,,PR1                  cn=3,n=8
         6 004065   000101 471400 xsym               LDP1    DUP+65
         6 004066   000054 236007                    LDQ     44,DL
         6 004067   100017 552104                    STBQ    15,'04'O,PR1
         6 004070   000101 471400 xsym               LDP1    DUP+65
         6 004071   040100 100400                    MLR     fill='040'O
         6 004072   000063 000001 xsym               ADSC9   DUP+51                   cn=0,n=1
         6 004073   100020 000020                    ADSC9   16,,PR1                  cn=0,n=16

     1586    14895    2              ',', DUP.IFAD.DRIVE_NUMBER) ;
     1587    14896
     1588    14897    2      CALL GC_ADDR (ADDR(MCA_B.COMMAND), MCA_B.DCW_LIST.DCW1.ADDRESS) ;

  14897  6 004074   000101 236000 xsym               LDQ     DUP+65
         6 004075   000004 036003                    ADLQ    4,DU
         6 004076   200116 756100                    STQ     @MSG_CODE+17,,AUTO
         6 004077   000101 236000 xsym               LDQ     DUP+65
         6 004100   000001 036003                    ADLQ    1,DU
         6 004101   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 004102   200116 630500                    EPPR0   @MSG_CODE+17,,AUTO
         6 004103   200043 450500                    STP0    DATA$+3,,AUTO
         6 004104   004454 701000 6                  TSX1    GC_ADDR
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:246  
         6 004105   000000 011000                    NOP     0

     1589    14898    2      MCA_B.DCW_LIST.DCW1.COUNT = 13 ;

  14898  6 004106   000015 220003                    LDX0    13,DU
         6 004107   000101 470400 xsym               LDP0    DUP+65
         6 004110   000001 440100                    SXL0    1,,PR0

     1590    14899    2      CALL GC_ADDR (ADDR(MCA_B.FILE), MCA_B.DCW_LIST.DCW2.ADDRESS) ;

  14899  6 004111   000101 236000 xsym               LDQ     DUP+65
         6 004112   001315 036003                    ADLQ    717,DU
         6 004113   200117 756100                    STQ     @MSG_CODE+18,,AUTO
         6 004114   000101 236000 xsym               LDQ     DUP+65
         6 004115   000003 036003                    ADLQ    3,DU
         6 004116   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 004117   200117 630500                    EPPR0   @MSG_CODE+18,,AUTO
         6 004120   200043 450500                    STP0    DATA$+3,,AUTO
         6 004121   004454 701000 6                  TSX1    GC_ADDR
         6 004122   000000 011000                    NOP     0

     1591    14900    2      CALL GC_CONVERT_8_TO_9 (BINBIT (DIRECTORY_ENTRY.FILE_SIZE, 36),

  14900  6 004123   200010 470500                    LDP0    DIR$,,AUTO
         6 004124   000100 101500                    MRL     fill='000'O
         6 004125   000002 400002                    ADSC9   2,,PR0                   cn=2,n=2
         6 004126   200076 000004                    ADSC9   @MSG_CODE+1,,AUTO        cn=0,n=4
         6 004127   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 004130   200120 756100                    STQ     @MSG_CODE+19,,AUTO
         6 004131   000101 236000 xsym               LDQ     DUP+65
         6 004132   041325 036003                    ADLQ    17109,DU
         6 004133   200032 756100                    STQ     @MCA_DATA+1,,AUTO
         6 004134   200120 631500                    EPPR1   @MSG_CODE+19,,AUTO
         6 004135   200031 451500                    STP1    FILE_DATA$+3,,AUTO
         6 004136   004775 701000 6                  TSX1    GC_CONVERT_8_TO_9
         6 004137   000000 011000                    NOP     0

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:247  
     1592    14901    2              MCA_B.FILE.SIZE) ;
     1593    14902    2      FILE_DATA$ = ADDR (MCA_B.FILE.DATA) ;

  14902  6 004140   000101 236000 xsym               LDQ     DUP+65
         6 004141   001325 036003                    ADLQ    725,DU
         6 004142   200026 756100                    STQ     FILE_DATA$,,AUTO

     1594    14903    2      MCA_B.FILE.BYTES_READ = 0 ;

  14903  6 004143   000101 470400 xsym               LDP0    DUP+65
         6 004144   040000 220003                    LDX0    16384,DU
         6 004145   001326 450110                    STZ     726,X0,PR0

     1595    14904    2      BYTES_TO_READ = MCA_B.FILE.SIZE ;

  14904  6 004146   000101 470400 xsym               LDP0    DUP+65
         6 004147   001325 235110                    LDA     725,X0,PR0
         6 004150   200021 755100                    STA     BYTES_TO_READ,,AUTO

     1596    14905    2      FIRST_READ = %TRUE ;

  14905  6 004151   400000 236003                    LDQ     -131072,DU
         6 004152   200022 756100                    STQ     FIRST_READ,,AUTO

     1597    14906    2      READ_COMPLETE = %FALSE ;

  14906  6 004153   200023 450100                    STZ     READ_COMPLETE,,AUTO

     1598    14907    2      HDR$ = ADDR (MCA_B.FILE) ;

  14907  6 004154   000101 236000 xsym               LDQ     DUP+65
         6 004155   001315 036003                    ADLQ    717,DU
         6 004156   200007 756100                    STQ     HDR$,,AUTO

     1599    14908
     1600    14909    3      DO UNTIL READ_COMPLETE ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:248  
     1601    14910    3         MCA_B.DCW_LIST.DCW2.COUNT = 4096-64+8 ;

  14910  6 004157   007710 220003                    LDX0    4040,DU
         6 004160   000101 470400 xsym               LDP0    DUP+65
         6 004161   000003 440100                    SXL0    3,,PR0

     1602    14911    3         CALL GC_ADDR (HDR$, MCA_B.DCW_LIST.DCW2.ADDRESS) ;

  14911  6 004162   000101 236000 xsym               LDQ     DUP+65
         6 004163   000003 036003                    ADLQ    3,DU
         6 004164   200044 756100                    STQ     @ITEM$+1,,AUTO
         6 004165   200007 630500                    EPPR0   HDR$,,AUTO
         6 004166   200043 450500                    STP0    DATA$+3,,AUTO
         6 004167   004454 701000 6                  TSX1    GC_ADDR
         6 004170   000000 011000                    NOP     0

     1603    14912    3         FACTORY_TEST = %TRUE ;

  14912  6 004171   400000 236003                    LDQ     -131072,DU
         6 004172   200024 756100                    STQ     FACTORY_TEST,,AUTO

     1604    14913    4         DO UNTIL (NOT FACTORY_TEST) ;

     1605    14914    4            CALL TOU$READ_MCA_DATA ALTRET (ERROR) ;

  14914  6 004173   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 004174   000000 701000 xent               TSX1    TOU$READ_MCA_DATA
         6 004175   004224 702000 6                  TSX2    ERROR

     1606    14915    4            CALL GC_CHECK_FACTORY_TEST(FACTORY_TEST, HDR$) ;

  14915  6 004176   200007 630500                    EPPR0   HDR$,,AUTO
         6 004177   200044 450500                    STP0    @ITEM$+1,,AUTO
         6 004200   200024 631500                    EPPR1   FACTORY_TEST,,AUTO
         6 004201   200043 451500                    STP1    DATA$+3,,AUTO
         6 004202   004411 701000 6                  TSX1    GC_CHECK_FACTORY_TEST
         6 004203   000000 011000                    NOP     0
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:249  

     1607    14916    4         END /* DO UNTIL */ ;

  14916  6 004204   200024 234100                    SZN     FACTORY_TEST,,AUTO
         6 004205   004173 604000 6                  TMI     s:14914

     1608    14917    3         CALL GC_PROCESS_READ ALTRET (ERROR) ;

  14917  6 004206   004226 701000 6                  TSX1    GC_PROCESS_READ
         6 004207   004224 702000 6                  TSX2    ERROR

     1609    14918    3         HDR$ = ADDR (MCA_B.DUMMY_BUFFER) ;

  14918  6 004210   000101 236000 xsym               LDQ     DUP+65
         6 004211   041327 036003                    ADLQ    17111,DU
         6 004212   200007 756100                    STQ     HDR$,,AUTO

     1610    14919    3      END /* DO UNTIL */ ;

  14919  6 004213   200023 234100                    SZN     READ_COMPLETE,,AUTO
         6 004214   004157 605000 6                  TPL     s:14910

     1611    14920
     1612    14921    2      IF MCA_B.FILE.SIZE = MCA_B.FILE.BYTES_READ

  14921  6 004215   000101 470400 xsym               LDP0    DUP+65
         6 004216   040000 220003                    LDX0    16384,DU
         6 004217   001325 236110                    LDQ     725,X0,PR0
         6 004220   001326 116110                    CMPQ    726,X0,PR0
         6 004221   004224 601000 6                  TNZ     ERROR

     1613    14922    2      THEN RETURN ;

  14922  6 004222   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 004223   000001 702211                    TSX2  ! 1,X1

     1614    14923    2      ELSE /* fall through to ALTRETURN */ ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:250  
     1615    14924
     1616    14925    2   ERROR:
     1617    14926    2      ALTRETURN ;

  14926  6 004224   200006 221300       ERROR        LDX1  ! PREFACE_FOUND+1,,AUTO
         6 004225   000000 702211                    TSX2  ! 0,X1

     1618    14927        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:251  
     1619    14928        /*I* NAME:         GC_PROCESS_READ
     1620    14929             AUTHOR:       Kathy Larkin
     1621    14930             PURPOSE:      Process last read, set up for next
     1622    14931             INTERFACE:    GC_CONVERT_8_TO_9
     1623    14932                           PINCRC function
     1624    14933                           BINBIT function
     1625    14934             PARAMETERS:   None passed.
     1626    14935             DATA:         HDR$ - input/output
     1627    14936                           FIRST_READ - input/output
     1628    14937                           SAVE_8_UNDER_HDR - input/output
     1629    14938                           BYTES_TO_READ - input/output
     1630    14939                           READ_COMPLETE - input
     1631    14940                           HDR_BLK.SOURCE_LEN - input
     1632    14941                           MCA_B.FILE.BYTES_READ - output
     1633    14942                           BYTES_THIS_READ - output
     1634    14943             DESCRIPTION:  This  procedure will  determine if  the entire
     1635    14944                           file has been successfully read and the proper
     1636    14945                           status has been  received.  If another read is
     1637    14946                           to be performed, the buffer pointer (HDR$), is
     1638    14947                           incremented.   Number of bytes  read and to be
     1639    14948                           read  are  determined.   The  eight file words
     1640    14949                           which  were saved  prior to  the last read are
     1641    14950                           restored  for all  reads after  the first (the
     1642    14951                           header block of  8 words overwrites the bottom
     1643    14952                           of  the  data  buffer  at  each read after the
     1644    14953                           first).   For the last  'dummy' read (data has
     1645    14954                           all been read, but  another read has been done
     1646    14955                           to  clear  the  MCA),  READ_COMPLETE must have
     1647    14956                           been  set  or  this  procedure will ALTRETURN,
     1648    14957                           aborting the DEER MERGE command.
     1649    14958        */
     1650    14959        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:252  
     1651    14960    2   GC_PROCESS_READ: PROC ALTRET ;

  14960  6 004226   200030 741300       GC_PROCESS_* STX1  ! FILE_DATA$+2,,AUTO

     1652    14961
     1653    14962    3      DCL BYTES_THIS_READ UBIN WORD ALIGNED ;
     1654    14963    3      DCL I  UBIN WORD ALIGNED ;
     1655    14964
     1656    14965    3      CALL GC_CHECK_FOR_NORM_STATUS (READ_COMPLETE) ALTRET (ERROR) ;

  14965  6 004227   200023 630500                    EPPR0   READ_COMPLETE,,AUTO
         6 004230   200043 450500                    STP0    DATA$+3,,AUTO
         6 004231   004355 701000 6                  TSX1    GC_CHECK_FOR_NORM_STATUS
         6 004232   004353 702000 6                  TSX2    ERROR

     1657    14966    3      CALL GC_CONVERT_8_TO_9_NO (BINBIT (HDR_BLK.IO_PARAM_BLK.SOURCE_LEN, 36),

  14966  6 004233   200007 470500                    LDP0    HDR$,,AUTO
         6 004234   000100 101500                    MRL     fill='000'O
         6 004235   000006 000002                    ADSC9   6,,PR0                   cn=0,n=2
         6 004236   200076 000004                    ADSC9   @MSG_CODE+1,,AUTO        cn=0,n=4
         6 004237   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 004240   200122 756100                    STQ     @MSG_CODE+21,,AUTO
         6 004241   200031 631500                    EPPR1   BYTES_THIS_READ,,AUTO
         6 004242   200036 451500                    STP1    FACTORY_TEST,,AUTO
         6 004243   200122 633500                    EPPR3   @MSG_CODE+21,,AUTO
         6 004244   200035 453500                    STP3    READ_COMPLETE,,AUTO
         6 004245   005016 701000 6                  TSX1    GC_CONVERT_8_TO_9_NO
         6 004246   000000 011000                    NOP     0

     1658    14967    3              BYTES_THIS_READ) ;
     1659    14968    3      IF FIRST_READ

  14968  6 004247   200022 234100                    SZN     FIRST_READ,,AUTO
         6 004250   004270 605000 6                  TPL     s:14977

     1660    14969    4      THEN DO ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:253  

     1661    14970    4              FILER$ = ADDR(MCA_B.COMMAND.HDR_BLK) ;

  14970  6 004251   000101 236000 xsym               LDQ     DUP+65
         6 004252   000004 036003                    ADLQ    4,DU
         6 004253   200025 756100                    STQ     FILER$,,AUTO

     1662    14971    4              MCA_B.DCW_LIST.DCW1.COUNT = 8 ;

  14971  6 004254   000010 220003                    LDX0    8,DU
         6 004255   000101 470400 xsym               LDP0    DUP+65
         6 004256   000001 440100                    SXL0    1,,PR0

     1663    14972    4              MCA_B.DCW_LIST.IDCW1 = '150000720002'O ;

  14972  6 004257   000113 236000 2                  LDQ     NO_BLANKS+34
         6 004260   000101 470400 xsym               LDP0    DUP+65
         6 004261   000000 756100                    STQ     0,,PR0

     1664    14973    4              FILER$->HDR_BLK.DEFINER = 9 ;

  14973  6 004262   200025 470500                    LDP0    FILER$,,AUTO
         6 004263   000100 101400                    MRL     fill='000'O
         6 004264   000013 000004 xsym               ADSC9   B_VECTNIL+11             cn=0,n=4
         6 004265   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1

     1665    14974    4              FIRST_READ = %FALSE ;

  14974  6 004266   200022 450100                    STZ     FIRST_READ,,AUTO

     1666    14975    4           END /* DO */ ;

  14975  6 004267   004314 710000 6                  TRA     s:14984

     1667    14976    4      ELSE DO ;

     1668    14977    4              HDR_BLK = SAVE_8_UNDER_HDR ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:254  

  14977  6 004270   200007 470500                    LDP0    HDR$,,AUTO
         6 004271   000100 100500                    MLR     fill='000'O
         6 004272   200011 000040                    ADSC9   SAVE_8_UNDER_HDR,,AUTO   cn=0,n=32
         6 004273   000000 000040                    ADSC9   0,,PR0                   cn=0,n=32

     1669    14978
     1670    14979    5              DO I = 0 TO %(MCA_READ_SZ - 9) ;

  14979  6 004274   200032 450100                    STZ     I,,AUTO

     1671    14980    5                 FILE_DATA$ -> DISKETTE_READ_BUFFER.DATA_WORD(I) =

  14980  6 004275   200032 235100                    LDA     I,,AUTO
         6 004276   000002 735000                    ALS     2
         6 004277   000101 470400 xsym               LDP0    DUP+65
         6 004300   200076 755100                    STA     @MSG_CODE+1,,AUTO
         6 004301   200000 035007                    ADLA    65536,DL
         6 004302   200026 471500                    LDP1    FILE_DATA$,,AUTO
         6 004303   200076 236100                    LDQ     @MSG_CODE+1,,AUTO
         6 004304   000106 100505                    MLR     fill='000'O
         6 004305   001337 000004                    ADSC9   735,A,PR0                cn=0,n=4
         6 004306   100000 000004                    ADSC9   0,Q,PR1                  cn=0,n=4

     1672    14981    5                         MCA_B.DUMMY_BUFFER.DATA_WORDS(I) ;
     1673    14982    5              END /* DO */ ;

  14982  6 004307   200032 235100                    LDA     I,,AUTO
         6 004310   000001 035007                    ADLA    1,DL
         6 004311   200032 755100                    STA     I,,AUTO
         6 004312   007700 115007                    CMPA    4032,DL
         6 004313   004275 602000 6                  TNC     s:14980

     1674    14983    4           END /* ELSE DO */ ;

     1675    14984    3      MCA_B.FILE.BYTES_READ = MCA_B.FILE.BYTES_READ + BYTES_THIS_READ ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:255  
  14984  6 004314   000101 470400 xsym               LDP0    DUP+65
         6 004315   040000 220003                    LDX0    16384,DU
         6 004316   001326 236110                    LDQ     726,X0,PR0
         6 004317   200031 036100                    ADLQ    BYTES_THIS_READ,,AUTO
         6 004320   001326 756110                    STQ     726,X0,PR0

     1676    14985    3      BYTES_TO_READ = MCA_B.FILE.SIZE - MCA_B.FILE.BYTES_READ ;

  14985  6 004321   000101 470400 xsym               LDP0    DUP+65
         6 004322   001325 236110                    LDQ     725,X0,PR0
         6 004323   001326 136110                    SBLQ    726,X0,PR0
         6 004324   200021 756100                    STQ     BYTES_TO_READ,,AUTO

     1677    14986    3      FILE_DATA$ = PINCRC (FILE_DATA$, BYTES_THIS_READ) ;

  14986  6 004325   200031 236100                    LDQ     BYTES_THIS_READ,,AUTO
         6 004326   000020 736000                    QLS     16
         6 004327   200026 036100                    ADLQ    FILE_DATA$,,AUTO
         6 004330   200026 756100                    STQ     FILE_DATA$,,AUTO

     1678    14987    3      SAVE_8_UNDER_HDR = HDR_BLK ;

  14987  6 004331   200007 471500                    LDP1    HDR$,,AUTO
         6 004332   000100 100500                    MLR     fill='000'O
         6 004333   100000 000040                    ADSC9   0,,PR1                   cn=0,n=32
         6 004334   200011 000040                    ADSC9   SAVE_8_UNDER_HDR,,AUTO   cn=0,n=32

     1679    14988
     1680    14989    3      IF BYTES_TO_READ = 0

  14989  6 004335   200021 235100                    LDA     BYTES_TO_READ,,AUTO
         6 004336   004351 601000 6                  TNZ     s:14996

     1681    14990    3      THEN IF READ_COMPLETE

  14990  6 004337   200023 234100                    SZN     READ_COMPLETE,,AUTO
         6 004340   004343 605000 6                  TPL     s:14993
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:256  

     1682    14991    3         THEN RETURN ;

  14991  6 004341   200030 221300                    LDX1  ! FILE_DATA$+2,,AUTO
         6 004342   000001 702211                    TSX2  ! 1,X1

     1683    14992    4         ELSE DO ;

     1684    14993    4                 CALL GC_DUMMY_READ ALTRET (ERROR) ;

  14993  6 004343   003734 701000 6                  TSX1    GC_DUMMY_READ
         6 004344   004353 702000 6                  TSX2    ERROR

     1685    14994    4                 CALL GC_CHECK_FOR_NORM_STATUS (READ_COMPLETE) ALTRET (ERROR) ;

  14994  6 004345   200023 630500                    EPPR0   READ_COMPLETE,,AUTO
         6 004346   200043 450500                    STP0    DATA$+3,,AUTO
         6 004347   004355 701000 6                  TSX1    GC_CHECK_FOR_NORM_STATUS
         6 004350   004353 702000 6                  TSX2    ERROR

     1686    14995    4              END /* ELSE DO */ ;

     1687    14996    3      RETURN ;

  14996  6 004351   200030 221300                    LDX1  ! FILE_DATA$+2,,AUTO
         6 004352   000001 702211                    TSX2  ! 1,X1

     1688    14997    3   ERROR:
     1689    14998    3      ALTRETURN ;

  14998  6 004353   200030 221300       ERROR        LDX1  ! FILE_DATA$+2,,AUTO
         6 004354   000000 702211                    TSX2  ! 0,X1

     1690    14999    3   END GC_PROCESS_READ ;
     1691    15000    2   END GC_GET_FILE ;
     1692    15001        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:257  
     1693    15002        /*I* NAME:         GC_CHECK_FOR_NORM_STATUS
     1694    15003             AUTHOR:       Kathy Larkin
     1695    15004             PURPOSE:      Validate status received from MCA
     1696    15005             INTERFACE:    None called.
     1697    15006             PARAMETERS:   READ_COMPLETE - output
     1698    15007             DATA:         MCA_B.STATUS - input
     1699    15008             DESCRIPTION:  This  procedure checks the  status returned by
     1700    15009                           the    MCA.     READ_COMPLETE    is   set   if
     1701    15010                           SESS_NORM_TERM sub-status  is received.  If an
     1702    15011                           abnormal  status  is  received, this procedure
     1703    15012                           will ALTRETURN.
     1704    15013        */
     1705    15014
     1706    15015    1   GC_CHECK_FOR_NORM_STATUS: PROC (READ_COMPLETE) ALTRET ;

  15015  6 004355   200042 741300       GC_CHECK_FO* STX1  ! DATA$+2,,AUTO

     1707    15016
     1708    15017    2      DCL READ_COMPLETE BIT (1) CALIGNED ;
     1709    15018
     1710    15019        /* Code */
     1711    15020
     1712    15021    2      IF MCA_B.STATUS.MAJOR = %CHAN_READY

  15021  6 004356   000101 470400 xsym               LDP0    DUP+65
         6 004357   000024 236100                    LDQ     20,,PR0
         6 004360   170000 316003                    CANQ    61440,DU
         6 004361   004406 601000 6                  TNZ     s:15030

     1713    15022    3      THEN DO SELECT (MCA_B.STATUS.SUB.VALUE) ;

  15022  6 004362   003700 376003                    ANQ     1984,DU
         6 004363   000000 116003                    CMPQ    0,DU
         6 004364   004373 602000 6                  TNC     s:15024
         6 004365   004373 600000 6                  TZE     s:15024
         6 004366   000024 236100                    LDQ     20,,PR0
         6 004367   003700 376003                    ANQ     1984,DU
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:258  
         6 004370   000200 116003                    CMPQ    128,DU
         6 004371   004405 601000 6                  TNZ     s:15028
         6 004372   004400 710000 6                  TRA     s:15026

     1714    15023    3              SELECT (%NORM_TERM) ;

     1715    15024    3              READ_COMPLETE = %FALSE ;

  15024  6 004373   200043 471500                    LDP1    @READ_COMPLETE,,AUTO
         6 004374   003100 060400                    CSL     bolr='003'O
         6 004375   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         6 004376   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
         6 004377   004407 710000 6                  TRA     s:15031

     1716    15025    3              SELECT (%SESS_NORM_TERM) ;

     1717    15026    3              READ_COMPLETE = %TRUE ;

  15026  6 004400   200043 471500                    LDP1    @READ_COMPLETE,,AUTO
         6 004401   003100 060400                    CSL     bolr='003'O
         6 004402   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         6 004403   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
         6 004404   004407 710000 6                  TRA     s:15031

     1718    15027    3              SELECT (ELSE) ;

     1719    15028    3      ALTRETURN ;

  15028  6 004405   000000 702211                    TSX2  ! 0,X1

     1720    15029    3           END /* THEN DO SELECT */ ;

     1721    15030    2      ELSE ALTRETURN ;

  15030  6 004406   000000 702211                    TSX2  ! 0,X1

     1722    15031    2      RETURN ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:259  

  15031  6 004407   200042 221300                    LDX1  ! DATA$+2,,AUTO
         6 004410   000001 702211                    TSX2  ! 1,X1

     1723    15032    2   END GC_CHECK_FOR_NORM_STATUS ;
     1724    15033        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:260  
     1725    15034        /*I* NAME:         GC_CHECK_FACTORY_TEST
     1726    15035             PURPOSE:      Check for the factory test data string
     1727    15036             INTERFACE:    None called.
     1728    15037             PARAMETERS:   FACTORY_TEST - output
     1729    15038             DATA:         DATA$ - input
     1730    15039             DESCRIPTION:  Check to see if  factory test code has been returned.
     1731    15040                           If yes return the FACTORY_TEST as true, meaning that the
     1732    15041                           data returned by the MCA was not diskette data, but a
     1733    15042                           factory test code, which is to be ignored, and another
     1734    15043                           read diskette must be issued to the MCA.
     1735    15044        */
     1736    15045
     1737    15046    1   GC_CHECK_FACTORY_TEST: PROC (FACTORY_TEST, DATA$) ;

  15046  6 004411   200042 741300       GC_CHECK_FA* STX1  ! DATA$+2,,AUTO

     1738    15047
     1739    15048    2      DCL FACTORY_TEST BIT (1) CALIGNED ;
     1740    15049    2      DCL HDR$ PTR ALIGNED ;
     1741    15050           %HDR_BLK (STCLASS = "BASED (HDR$)") ;
     1742    15077    2      DCL DATA$ PTR ALIGNED ;
     1743    15078           %DISKETTE_READ_BUFFER (STCLASS = "BASED (DATA$)") ;
     1744    15090
     1745    15091        /* Code */
     1746    15092
     1747    15093    2      FACTORY_TEST = %FALSE ;

  15093  6 004412   200043 470500                    LDP0    @FACTORY_TEST,,AUTO
         6 004413   003100 060400                    CSL     bolr='003'O
         6 004414   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         6 004415   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1

     1748    15094
     1749    15095    2      IF (MCA_B.STATUS.MAJOR = %CHAN_READY) AND

  15095  6 004416   000101 471400 xsym               LDP1    DUP+65
         6 004417   100024 236100                    LDQ     20,,PR1
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:261  
         6 004420   170000 316003                    CANQ    61440,DU
         6 004421   004452 601000 6                  TNZ     s:15109
         6 004422   003700 316003                    CANQ    1984,DU
         6 004423   004452 601000 6                  TNZ     s:15109

     1750    15096    2              (MCA_B.STATUS.SUB.VALUE = %NORM_TERM)
     1751    15097    2      THEN IF DISKETTE_READ_BUFFER.DATA_WORD(8) = %CRLF

  15097  6 004424   200044 473500                    LDP3    @DATA$,,AUTO
         6 004425   300000 474500                    LDP4    0,,PR3
         6 004426   000000 106500                    CMPC    fill='000'O
         6 004427   400010 000004                    ADSC9   8,,PR4                   cn=0,n=4
         6 004430   000116 000004 2                  ADSC9   NO_BLANKS+37             cn=0,n=4
         6 004431   004452 601000 6                  TNZ     s:15109

     1752    15098    3         THEN DO;

     1753    15099    3                 HDR$ = ADDR (MCA_B.COMMAND.HDR_BLK) ;

  15099  6 004432   000101 236000 xsym               LDQ     DUP+65
         6 004433   000004 036003                    ADLQ    4,DU
         6 004434   200045 756100                    STQ     HDR$,,AUTO

     1754    15100    3                 DISKETTE_READ_BUFFER.DATA_WORD(8) = '000000000000'O ;

  15100  6 004435   000100 100400                    MLR     fill='000'O
         6 004436   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
         6 004437   400010 000004                    ADSC9   8,,PR4                   cn=0,n=4

     1755    15101    3                 FACTORY_TEST = %TRUE ;

  15101  6 004440   003100 060400                    CSL     bolr='003'O
         6 004441   000030 000001 xsym               BDSC    B_VECTNIL+24             by=0,bit=0,n=1
         6 004442   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1

     1756    15102    3                 MCA_B.DCW_LIST.IDCW1 = '150000720002'O ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:262  
  15102  6 004443   000113 236000 2                  LDQ     NO_BLANKS+34
         6 004444   000101 471400 xsym               LDP1    DUP+65
         6 004445   100000 756100                    STQ     0,,PR1

     1757    15103    3                 HDR_BLK.DEFINER = 9 ;

  15103  6 004446   200045 471500                    LDP1    HDR$,,AUTO
         6 004447   000100 101400                    MRL     fill='000'O
         6 004450   000013 000004 xsym               ADSC9   B_VECTNIL+11             cn=0,n=4
         6 004451   100000 200001                    ADSC9   0,,PR1                   cn=1,n=1

     1758    15104    3              END /* THEN DO */ ;

     1759    15105    2         ELSE /* FACTORY_TEST = FALSE */ ;
     1760    15106
     1761    15107    2      ELSE /* FACTORY_TEST = FALSE */ ;
     1762    15108
     1763    15109    2      RETURN ;

  15109  6 004452   200042 221300                    LDX1  ! DATA$+2,,AUTO
         6 004453   000001 702211                    TSX2  ! 1,X1

     1764    15110
     1765    15111    2   END GC_CHECK_FACTORY_TEST ;
     1766    15112        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:263  
     1767    15113        /*I* NAME:         GC_ADDR
     1768    15114             AUTHOR:       Scott S. Sheppard
     1769    15115             PURPOSE:      Assigns an Address Field
     1770    15116             INTERFACE:    None called.
     1771    15117             PARAMETERS:   ITEM$ - pointer value (input)
     1772    15118                           TARGET - address field (output)
     1773    15119             DATA:         No external data accessed.
     1774    15120             DESCRIPTION:  This procedure assigns  the address portion of
     1775    15121                           a pointer to an address field. The use of this
     1776    15122                           small   procedure   saves   this  module  from
     1777    15123                           requiring  numerous  pointer  redefinitions to
     1778    15124                           achieve the same effect.
     1779    15125        */
     1780    15126
     1781    15127    1   GC_ADDR: PROC (ITEM$, TARGET) ;

  15127  6 004454   200042 741300       GC_ADDR      STX1  ! DATA$+2,,AUTO

     1782    15128
     1783    15129    2      DCL 1 ITEM$ ALIGNED,
     1784    15130    2            2 ADDRESS BIT (18) UNAL,
     1785    15131    2            2 SEGID   BIT (18) UNAL ;
     1786    15132    2      DCL TARGET      BIT (18) CALIGNED ;
     1787    15133
     1788    15134        /* Code */
     1789    15135
     1790    15136    2      TARGET = ITEM$.ADDRESS ;

  15136  6 004455   200043 470500                    LDP0    @ITEM$,,AUTO
         6 004456   200044 471500                    LDP1    @TARGET,,AUTO
         6 004457   000100 100500                    MLR     fill='000'O
         6 004460   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         6 004461   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

     1791    15137    2      RETURN ;

  15137  6 004462   200042 221300                    LDX1  ! DATA$+2,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:264  
         6 004463   000001 702211                    TSX2  ! 1,X1

     1792    15138
     1793    15139    2   END GC_ADDR ;
     1794    15140        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:265  
     1795    15141        /*I* NAME:         GC_MAKE_OBJECT_CARD
     1796    15142             AUTHOR:       Scott S. Sheppard
     1797    15143             PURPOSE:      sets up a $OBJECT card
     1798    15144             INTERFACE:    ADDR function
     1799    15145             PARAMETERS:   TYPE - type of object deck (input)
     1800    15146             DATA:         MCA_B.DISKETTE_HEADER.DATA - input
     1801    15147                           MCA_B.DIRECTORY.CURRENT - input
     1802    15148                           MCA_B.FILE.DATA - input
     1803    15149             DESCRIPTION:  When test modules are  read from an IFAD tape,
     1804    15150                           they have the following format:
     1805    15151                              $OBJECT card
     1806    15152                              n binary cards
     1807    15153                              m patch cards
     1808    15154                              $DKEND  card
     1809    15155                                            Information  read from DIPPER
     1810    15156                           diskettes  is not in  this format. To maintain
     1811    15157                           consistency in the deckfile, so that the LIST,
     1812    15158                           SHOWDECK,  and other functions  still work (as
     1813    15159                           well  as the TOLTS  LOADER), dummy $OBJECT and
     1814    15160                           $DKEND cards are being created for the modules
     1815    15161                           read  from  DIPPER  diskettes.  This procedure
     1816    15162                           performs that function.
     1817    15163
     1818    15164                           There are two types  of decks. Files read from
     1819    15165                           the  diskettes and the  directory blocks. Each
     1820    15166                           are  handled  separately  based  on  the  TYPE
     1821    15167                           parameter  passed. In  addition, there  is one
     1822    15168                           file,  the  DPSFILE,  which  is a special file
     1823    15169                           that is treated differently.
     1824    15170        */
     1825    15171        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:266  
     1826    15172    1   GC_MAKE_OBJECT_CARD: PROC (TYPE) ;

  15172  6 004464   200006 741300       GC_MAKE_OBJ* STX1  ! PREFACE_FOUND+1,,AUTO

     1827    15173
     1828    15174    2      DCL TYPE        CHAR (9) CALIGNED ;
     1829    15175    2      DCL HDR$        PTR ALIGNED ;
     1830    15176    2      DCL DIR$        PTR ALIGNED ;
     1831    15177    2      DCL FILE$       PTR ALIGNED ;
     1832    15178           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1833    15214           %DIRECTORY_ENTRY (STCLASS = "BASED (DIR$)") ;
     1834    15241           %DISKETTE_FILE (STCLASS = "BASED (FILE$)") ;
     1835    15283
     1836    15284        /* Code */
     1837    15285
     1838    15286           /* set up pointers to information read from the diskette */
     1839    15287    2      HDR$ = ADDR (MCA_B.DISKETTE_HEADER.DATA) ;

  15287  6 004465   000101 236000 xsym               LDQ     DUP+65
         6 004466   000036 036003                    ADLQ    30,DU
         6 004467   200010 756100                    STQ     HDR$,,AUTO

     1840    15288    2      DIR$ = ADDR (MCA_B.DIRECTORY.CURRENT) ;

  15288  6 004470   000101 236000 xsym               LDQ     DUP+65
         6 004471   001311 036003                    ADLQ    713,DU
         6 004472   200011 756100                    STQ     DIR$,,AUTO

     1841    15289    2      FILE$ = ADDR (MCA_B.FILE.DATA) ;

  15289  6 004473   000101 236000 xsym               LDQ     DUP+65
         6 004474   001325 036003                    ADLQ    725,DU
         6 004475   200012 756100                    STQ     FILE$,,AUTO

     1842    15290
     1843    15291           /* set up the constant part of the $OBJECT card */
     1844    15292    2      OBJECT.BCD_ = ' ' ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:267  

  15292  6 004476   040000 100400                    MLR     fill='040'O
         6 004477   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         6 004500   000000 000120 xsym               ADSC9   OBJECT                   cn=0,n=80

     1845    15293    2      OBJECT.NIO_BCD.CONTROL = '$' ;

  15293  6 004501   040000 100400                    MLR     fill='040'O
         6 004502   000020 000001 7                  ADSC9   16                       cn=0,n=1
         6 004503   000000 000007 xsym               ADSC9   OBJECT                   cn=0,n=7

     1846    15294    2      OBJECT.NIO_BCD.TYPE = 'OBJECT' ;

  15294  6 004504   040000 100400                    MLR     fill='040'O
         6 004505   000063 000006 2                  ADSC9   NO_BLANKS+10             cn=0,n=6
         6 004506   000001 600010 xsym               ADSC9   OBJECT+1                 cn=3,n=8

     1847    15295    2      OBJECT.NIO_BCD.LIBRARY = 'HNIOA0' ;

  15295  6 004507   040000 100400                    MLR     fill='040'O
         6 004510   000117 000006 2                  ADSC9   NO_BLANKS+38             cn=0,n=6
         6 004511   000003 600006 xsym               ADSC9   OBJECT+3                 cn=3,n=6

     1848    15296    2      OBJECT.NIO_BCD.LOAD_TYPE = 'D' ;

  15296  6 004512   000104 236003                    LDQ     68,DU
         6 004513   000005 552020 xsym               STBQ    OBJECT+5,'20'O

     1849    15297    2      OBJECT.NIO_BCD.DATA = 'DATA' ;

  15297  6 004514   040000 100400                    MLR     fill='040'O
         6 004515   000121 000004 2                  ADSC9   NO_BLANKS+40             cn=0,n=4
         6 004516   000010 400004 xsym               ADSC9   OBJECT+8                 cn=2,n=4

     1850    15298    2      CALL CONCAT (OBJECT.NIO_BCD.EQUIP_TYPE,

  15298  6 004517   200010 470500                    LDP0    HDR$,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:268  
         6 004520   040000 100500                    MLR     fill='040'O
         6 004521   000032 400004                    ADSC9   26,,PR0                  cn=2,n=4
         6 004522   000012 400004 xsym               ADSC9   OBJECT+10                cn=2,n=4
         6 004523   056000 236007                    LDQ     23552,DL
         6 004524   000013 552010 xsym               STBQ    OBJECT+11,'10'O

     1851    15299    2              DISKETTE_HEADER.EQUIP_TYPE,
     1852    15300    2              '.') ;
     1853    15301    2      OBJECT.NIO_BCD.ASSEMBLER = '.' ;

  15301  6 004525   000056 236007                    LDQ     46,DL
         6 004526   000016 552004 xsym               STBQ    OBJECT+14,'04'O

     1854    15302    2      CALL CONCAT (OBJECT.NIO_BCD.PRD_NUM_TAB,

  15302  6 004527   200010 470500                    LDP0    HDR$,,AUTO
         6 004530   040000 100500                    MLR     fill='040'O
         6 004531   000035 600003                    ADSC9   29,,PR0                  cn=3,n=3
         6 004532   000017 000003 xsym               ADSC9   OBJECT+15                cn=0,n=3
         6 004533   000017 552004 xsym               STBQ    OBJECT+15,'04'O

     1855    15303    2              DISKETTE_HEADER.IPI_NUM.PRD_NUM_TAB,
     1856    15304    2              '.') ;
     1857    15305    2      OBJECT.NIO_BCD.LBL = LAST.EDIT_NAME ;

  15305  6 004534   000000 235000 xsym               LDA     LAST
         6 004535   000001 236000 xsym               LDQ     LAST+1
         6 004536   000022 773000                    LRL     18
         6 004537   000027 376000 xsym               ANQ     B_VECTNIL+23
         6 004540   000022 756000 xsym               STQ     OBJECT+18

     1858    15306    2      OBJECT.NIO_BCD.SEQ = '0000' ;

  15306  6 004541   000072 236000 2                  LDQ     NO_BLANKS+17
         6 004542   000023 756000 xsym               STQ     OBJECT+19

     1859    15307    2      CALL CONCAT (OBJECT.NIO_BCD.X_OF_N_, '.',
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:269  

  15307  6 004543   000056 236007                    LDQ     46,DL
         6 004544   000015 552004 xsym               STBQ    OBJECT+13,'04'O
         6 004545   200010 470500                    LDP0    HDR$,,AUTO
         6 004546   040000 100500                    MLR     fill='040'O
         6 004547   000041 400001                    ADSC9   33,,PR0                  cn=2,n=1
         6 004550   000016 000001 xsym               ADSC9   OBJECT+14                cn=0,n=1
         6 004551   000056 236003                    LDQ     46,DU
         6 004552   000016 552020 xsym               STBQ    OBJECT+14,'20'O
         6 004553   040000 100500                    MLR     fill='040'O
         6 004554   000041 600001                    ADSC9   33,,PR0                  cn=3,n=1
         6 004555   000016 400001 xsym               ADSC9   OBJECT+14                cn=2,n=1

     1860    15308    2              DISKETTE_HEADER.X_OF_N.X, '.',
     1861    15309    2              DISKETTE_HEADER.X_OF_N.N) ;
     1862    15310           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:270  
     1863    15311           /* set up the rest of the card based on the diskette data */
     1864    15312    3      DO SELECT (TYPE) ;

  15312  6 004556   200007 470500                    LDP0    @TYPE,,AUTO
         6 004557   040000 106500                    CMPC    fill='040'O
         6 004560   000000 000011                    ADSC9   0,,PR0                   cn=0,n=9
         6 004561   000052 000004 2                  ADSC9   NO_BLANKS+1              cn=0,n=4
         6 004562   004571 602000 6                  TNC     s:15312+11
         6 004563   004576 600000 6                  TZE     s:15314
         6 004564   040000 106500                    CMPC    fill='040'O
         6 004565   000000 000011                    ADSC9   0,,PR0                   cn=0,n=9
         6 004566   000060 000006 2                  ADSC9   NO_BLANKS+7              cn=0,n=6
         6 004567   004631 601000 6                  TNZ     s:15326
         6 004570   004621 710000 6                  TRA     s:15322
         6 004571   040000 106500                    CMPC    fill='040'O
         6 004572   000000 000011                    ADSC9   0,,PR0                   cn=0,n=9
         6 004573   000055 000011 2                  ADSC9   NO_BLANKS+4              cn=0,n=9
         6 004574   004631 601000 6                  TNZ     s:15326
         6 004575   004611 710000 6                  TRA     s:15318

     1865    15313    3         SELECT ('FILE') ;

     1866    15314    3         OBJECT.NIO_BCD.CLASS = 'F' ;

  15314  6 004576   106000 236007                    LDQ     35840,DL
         6 004577   000005 552010 xsym               STBQ    OBJECT+5,'10'O

     1867    15315    3         OBJECT.NIO_BCD.FILE_NAME = DIRECTORY_ENTRY.PATH_NAME ;

  15315  6 004600   200011 471500                    LDP1    DIR$,,AUTO
         6 004601   040000 100500                    MLR     fill='040'O
         6 004602   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         6 004603   000013 600010 xsym               ADSC9   OBJECT+11                cn=3,n=8

     1868    15316    3         OBJECT.NIO_BCD.PRG_NUM_TAB = SUBSTR (DISKETTE_FILE.HDR.MOD_DWG_NUM, 9, 3) ;

  15316  6 004604   200012 473500                    LDP3    FILE$,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:271  
         6 004605   040000 100500                    MLR     fill='040'O
         6 004606   300006 200003                    ADSC9   6,,PR3                   cn=1,n=3
         6 004607   000020 000003 xsym               ADSC9   OBJECT+16                cn=0,n=3
         6 004610   004631 710000 6                  TRA     s:15326

     1869    15317    3         SELECT ('DIRECTORY') ;

     1870    15318    3         OBJECT.NIO_BCD.CLASS = 'F' ;

  15318  6 004611   106000 236007                    LDQ     35840,DL
         6 004612   000005 552010 xsym               STBQ    OBJECT+5,'10'O

     1871    15319    3         OBJECT.NIO_BCD.FILE_NAME = 'DIRECTRY' ;

  15319  6 004613   040000 100400                    MLR     fill='040'O
         6 004614   000122 000010 2                  ADSC9   NO_BLANKS+41             cn=0,n=8
         6 004615   000013 600010 xsym               ADSC9   OBJECT+11                cn=3,n=8

     1872    15320    3         OBJECT.NIO_BCD.PRG_NUM_TAB = '000' ;

  15320  6 004616   000072 236000 2                  LDQ     NO_BLANKS+17
         6 004617   000020 552070 xsym               STBQ    OBJECT+16,'70'O
         6 004620   004631 710000 6                  TRA     s:15326

     1873    15321    3         SELECT ('HEADER') ;

     1874    15322    3         OBJECT.NIO_BCD.CLASS = 'H' ;

  15322  6 004621   110000 236007                    LDQ     36864,DL
         6 004622   000005 552010 xsym               STBQ    OBJECT+5,'10'O

     1875    15323    3         OBJECT.NIO_BCD.FILE_NAME = DISKETTE_HEADER.UNIQUE_ID ;

  15323  6 004623   200010 471500                    LDP1    HDR$,,AUTO
         6 004624   040000 100500                    MLR     fill='040'O
         6 004625   100017 600010                    ADSC9   15,,PR1                  cn=3,n=8
         6 004626   000013 600010 xsym               ADSC9   OBJECT+11                cn=3,n=8
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:272  

     1876    15324    3         OBJECT.NIO_BCD.PRG_NUM_TAB = '000' ;

  15324  6 004627   000072 236000 2                  LDQ     NO_BLANKS+17
         6 004630   000020 552070 xsym               STBQ    OBJECT+16,'70'O

     1877    15325    3      END /* SELECT */ ;

     1878    15326    2      RETURN ;

  15326  6 004631   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 004632   000001 702211                    TSX2  ! 1,X1

     1879    15327
     1880    15328    2   END GC_MAKE_OBJECT_CARD ;
     1881    15329        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:273  
     1882    15330        /*I* NAME:         GC_MAKE_DKEND_CARD
     1883    15331             AUTHOR:       Scott S. Sheppard
     1884    15332             PURPOSE:      sets up a $DKEND card
     1885    15333             INTERFACE:    ADDR function
     1886    15334             PARAMETERS:   None passed.
     1887    15335             DATA:         MCA_B.FILE.DATA - input
     1888    15336                           MCA_B.DIRECTORY.TOTAL - input
     1889    15337                           MCA_B.FILE.SIZE - input
     1890    15338                           OBJECT.BCD.FILENAME - input
     1891    15339                           DKEND.BCD_ - output
     1892    15340                           DKEND.CHECKSUM - output
     1893    15341                           BCD_B(0) - output
     1894    15342                           BCD# - output
     1895    15343             DESCRIPTION:  This procedure sets up a dummy $DKEND card for
     1896    15344                           DIPPER object decks.
     1897    15345        */
     1898    15346
     1899    15347    1   GC_MAKE_DKEND_CARD: PROC ;

  15347  6 004633   200006 741300       GC_MAKE_DKE* STX1  ! PREFACE_FOUND+1,,AUTO

     1900    15348
     1901    15349    2      DCL FILE$        PTR ALIGNED ;
     1902    15350           %DISKETTE_FILE   (STCLASS = "BASED (FILE$)") ;
     1903    15392    2      DCL HDR$         PTR ALIGNED ;
     1904    15393           %DISKETTE_HEADER (STCLASS = "BASED (HDR$)") ;
     1905    15429           %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:274  
     1906    15430        /* Code */
     1907    15431
     1908    15432           /* set up the constant part of the $DKEND card */
     1909    15433    2      DKEND.BCD_ = ' ' ;

  15433  6 004634   040000 100400                    MLR     fill='040'O
         6 004635   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         6 004636   000000 000120 xsym               ADSC9   DKEND                    cn=0,n=80

     1910    15434    2      DKEND.BCD.CONTROL = '$' ;

  15434  6 004637   040000 100400                    MLR     fill='040'O
         6 004640   000020 000001 7                  ADSC9   16                       cn=0,n=1
         6 004641   000000 000007 xsym               ADSC9   DKEND                    cn=0,n=7

     1911    15435    2      DKEND.BCD.TYPE = 'DKEND' ;

  15435  6 004642   040000 100400                    MLR     fill='040'O
         6 004643   000065 000005 2                  ADSC9   NO_BLANKS+12             cn=0,n=5
         6 004644   000001 600010 xsym               ADSC9   DKEND+1                  cn=3,n=8

     1912    15436    2      DKEND.BCD.DATE = DISKETTE_HEADER.DATE_CREATED ;

  15436  6 004645   200010 470500                    LDP0    HDR$,,AUTO
         6 004646   040000 100500                    MLR     fill='040'O
         6 004647   000021 600006                    ADSC9   17,,PR0                  cn=3,n=6
         6 004650   000017 000006 xsym               ADSC9   DKEND+15                 cn=0,n=6

     1913    15437    2      DKEND.BCD.MOD_DATE = DISKETTE_HEADER.DATE_CHANGED ;

  15437  6 004651   040000 100500                    MLR     fill='040'O
         6 004652   000023 200006                    ADSC9   19,,PR0                  cn=1,n=6
         6 004653   000015 400006 xsym               ADSC9   DKEND+13                 cn=2,n=6

     1914    15438    2      DKEND.BCD.LBL = OBJECT.BCD.LBL ;

  15438  6 004654   000022 236000 xsym               LDQ     OBJECT+18
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:275  
         6 004655   000022 756000 xsym               STQ     DKEND+18

     1915    15439
     1916    15440           /* set up the rest of the card based on the diskette data */
     1917    15441    3      DO SELECT (OBJECT.NIO_BCD.CLASS) ;

  15441  6 004656   000005 236000 xsym               LDQ     OBJECT+5
         6 004657   777000 376007                    ANQ     -512,DL
         6 004660   110000 116007                    CMPQ    36864,DL
         6 004661   004667 602000 6                  TNC     s:15441+9
         6 004662   000005 236000 xsym               LDQ     OBJECT+5
         6 004663   777000 376007                    ANQ     -512,DL
         6 004664   110000 116007                    CMPQ    36864,DL
         6 004665   004674 600000 6                  TZE     s:15443
         6 004666   004751 710000 6                  TRA     s:15459
         6 004667   000005 236000 xsym               LDQ     OBJECT+5
         6 004670   777000 376007                    ANQ     -512,DL
         6 004671   106000 116007                    CMPQ    35840,DL
         6 004672   004751 601000 6                  TNZ     s:15459
         6 004673   004702 710000 6                  TRA     s:15446

     1918    15442    3         SELECT ('H') /* header */ ;

     1919    15443    3         DKEND.BCD.REVISION = 'REV.00' ;

  15443  6 004674   040000 100400                    MLR     fill='040'O
         6 004675   000124 000006 2                  ADSC9   NO_BLANKS+43             cn=0,n=6
         6 004676   000020 400006 xsym               ADSC9   DKEND+16                 cn=2,n=6

     1920    15444    3         DKEND.BCD.SEQ = '0002' ;

  15444  6 004677   000126 236000 2                  LDQ     NO_BLANKS+45
         6 004700   000023 756000 xsym               STQ     DKEND+19
         6 004701   004751 710000 6                  TRA     s:15459

     1921    15445    3         SELECT ('F') /* directory or file */ ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:276  
     1922    15446    3         IF OBJECT.NIO_BCD.FILE_NAME = 'DIRECTRY'

  15446  6 004702   040000 106400                    CMPC    fill='040'O
         6 004703   000013 600010 xsym               ADSC9   OBJECT+11                cn=3,n=8
         6 004704   000122 000010 2                  ADSC9   NO_BLANKS+41             cn=0,n=8
         6 004705   004724 601000 6                  TNZ     s:15452

     1923    15447    4         THEN DO ;

     1924    15448    4                 DKEND.BCD.REVISION = 'REV.00' ;

  15448  6 004706   040000 100400                    MLR     fill='040'O
         6 004707   000124 000006 2                  ADSC9   NO_BLANKS+43             cn=0,n=6
         6 004710   000020 400006 xsym               ADSC9   DKEND+16                 cn=2,n=6

     1925    15449    4                CALL BINCHAR (DKEND.BCD.SEQ, ((MCA_B.DIRECTORY.SIZE + 255)/256) + 1) ;

  15449  6 004711   000101 471400 xsym               LDP1    DUP+65
         6 004712   101310 236100                    LDQ     712,,PR1
         6 004713   000377 036007                    ADLQ    255,DL
         6 004714   000010 772000                    QRL     8
         6 004715   000001 036007                    ADLQ    1,DL
         6 004716   000000 235003                    LDA     0,DU
         6 004717   200076 757100                    STAQ    @MSG_CODE+1,,AUTO
         6 004720   000000 301500                    BTD
         6 004721   200076 000010                    NDSC9   @MSG_CODE+1,,AUTO        cn=0,s=lsgnf,sf=0,n=8
         6 004722   000023 030004 xsym               NDSC9   DKEND+19                 cn=0,s=nosgn,sf=0,n=4

     1926    15450    4              END /* THEN */ ;

  15450  6 004723   004751 710000 6                  TRA     s:15459

     1927    15451    4         ELSE DO ;

     1928    15452    4                 FILE$ = ADDR (MCA_B.FILE.DATA) ;

  15452  6 004724   000101 236000 xsym               LDQ     DUP+65
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:277  
         6 004725   001325 036003                    ADLQ    725,DU
         6 004726   200007 756100                    STQ     FILE$,,AUTO

     1929    15453    4                CALL CONCAT (DKEND.BCD.REVISION, 'REV.0', DISKETTE_FILE.HDR.PGM_REV) ;

  15453  6 004727   040000 100400                    MLR     fill='040'O
         6 004730   000124 000005 2                  ADSC9   NO_BLANKS+43             cn=0,n=5
         6 004731   000020 400005 xsym               ADSC9   DKEND+16                 cn=2,n=5
         6 004732   200007 471500                    LDP1    FILE$,,AUTO
         6 004733   040000 100500                    MLR     fill='040'O
         6 004734   100010 400001                    ADSC9   8,,PR1                   cn=2,n=1
         6 004735   000021 600001 xsym               ADSC9   DKEND+17                 cn=3,n=1

     1930    15454    4                 CALL BINCHAR (DKEND.BCD.SEQ, ((MCA_B.FILE.SIZE + 255) / 256) + 1) ;

  15454  6 004736   000101 470400 xsym               LDP0    DUP+65
         6 004737   040000 220003                    LDX0    16384,DU
         6 004740   001325 236110                    LDQ     725,X0,PR0
         6 004741   000377 036007                    ADLQ    255,DL
         6 004742   000010 772000                    QRL     8
         6 004743   000001 036007                    ADLQ    1,DL
         6 004744   000000 235003                    LDA     0,DU
         6 004745   200076 757100                    STAQ    @MSG_CODE+1,,AUTO
         6 004746   000000 301500                    BTD
         6 004747   200076 000010                    NDSC9   @MSG_CODE+1,,AUTO        cn=0,s=lsgnf,sf=0,n=8
         6 004750   000023 030004 xsym               NDSC9   DKEND+19                 cn=0,s=nosgn,sf=0,n=4

     1931    15455    4              END /* ELSE */ ;

     1932    15456    3      END /* SELECT */ ;

     1933    15457
     1934    15458           /* finish up and place the card in the BCD card buffer */
     1935    15459    2      CALL TOU$CHECKSUM (0, ADDR (DKEND.BCD_), 20, DKEND.CHECKSUM) ;

  15459  6 004751   000151 236000 7                  LDQ     105
         6 004752   200076 756100                    STQ     @MSG_CODE+1,,AUTO
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:278  
         6 004753   000152 237000 7                  LDAQ    106
         6 004754   200102 757100                    STAQ    @MSG_CODE+5,,AUTO
         6 004755   200076 630500                    EPPR0   @MSG_CODE+1,,AUTO
         6 004756   200101 450500                    STP0    @MSG_CODE+4,,AUTO
         6 004757   000014 236000 7                  LDQ     12
         6 004760   200100 756100                    STQ     @MSG_CODE+3,,AUTO
         6 004761   200100 630500                    EPPR0   @MSG_CODE+3,,AUTO
         6 004762   000022 631400 xsym               EPPR1   B_VECTNIL+18
         6 004763   000000 701000 xent               TSX1    TOU$CHECKSUM
         6 004764   000000 011000                    NOP     0

     1936    15460    2      BCD_B(0) = DKEND_ ;

  15460  6 004765   000103 470400 xsym               LDP0    DUP+67
         6 004766   040100 100400                    MLR     fill='040'O
         6 004767   000000 000124 xsym               ADSC9   DKEND                    cn=0,n=84
         6 004770   000000 000124                    ADSC9   0,,PR0                   cn=0,n=84

     1937    15461    2      BCD# = 1 ;

  15461  6 004771   000001 235007                    LDA     1,DL
         6 004772   000000 755000 xsym               STA     BCD#

     1938    15462    2      RETURN ;

  15462  6 004773   200006 221300                    LDX1  ! PREFACE_FOUND+1,,AUTO
         6 004774   000001 702211                    TSX2  ! 1,X1

     1939    15463
     1940    15464    2   END GC_MAKE_DKEND_CARD ;
     1941    15465        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:279  
     1942    15466        /*I* NAME:         GC_CONVERT_8_TO_9
     1943    15467             AUTHOR:       Scott S. Sheppard
     1944    15468             PURPOSE:      Converts 8 bit half word to 9 bit half word
     1945    15469             INTERFACE:    None called.
     1946    15470             PARAMETERS:   MCA_DATA - input
     1947    15471                                      data originally stored with 8 bit bytes,
     1948    15472                                      but when transferred, changed to 9 bit
     1949    15473                           HOST_DATA - output
     1950    15474             DATA:         No external data accessed.
     1951    15475             DESCRIPTION:  When data is read from the MCA, the binary data
     1952    15476                           values are transferred as ASCII data.  Thus the
     1953    15477                           bytes are padded with an extra zero. This makes
     1954    15478                           the data represent incorrect  numerical values.
     1955    15479                           This procedure converts a field  received  from
     1956    15480                           the MCA so that it may be used by the HOST.
     1957    15481        */
     1958    15482
     1959    15483    1   GC_CONVERT_8_TO_9: PROC (MCA_DATA, HOST_DATA) ;

  15483  6 004775   200030 741300       GC_CONVERT_* STX1  ! FILE_DATA$+2,,AUTO

     1960    15484
     1961    15485    2      DCL 1 MCA_DATA ALIGNED,
     1962    15486    2            2 *       UBIN (18) UNAL,
     1963    15487    2            2 UP_BIT  BIT (1) UNAL,
     1964    15488    2            2 UPPER   UBIN (8) UNAL,
     1965    15489    2            2 LW_BIT  BIT (1) UNAL,
     1966    15490    2            2 LOWER   UBIN (8)  UNAL ;
     1967    15491    2      DCL 1 HOST_DATA ALIGNED,
     1968    15492    2            2 FILLER  UBIN (20) UNAL,
     1969    15493    2            2 UPPER   UBIN (8) UNAL,
     1970    15494    2            2 LOWER   UBIN (8)  UNAL ;
     1971    15495
     1972    15496        /* Code */
     1973    15497
     1974    15498    2      HOST_DATA.UPPER = MCA_DATA.LOWER ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:280  
  15498  6 004776   200031 470500                    LDP0    @MCA_DATA,,AUTO
         6 004777   200032 471500                    LDP1    @HOST_DATA,,AUTO
         6 005000   000000 236100                    LDQ     0,,PR0
         6 005001   000010 736000                    QLS     8
         6 005002   100000 676100                    ERQ     0,,PR1
         6 005003   177400 376007                    ANQ     65280,DL
         6 005004   100000 656100                    ERSQ    0,,PR1

     1975    15499    2      HOST_DATA.LOWER = MCA_DATA.UPPER ;

  15499  6 005005   000000 236100                    LDQ     0,,PR0
         6 005006   000011 772000                    QRL     9
         6 005007   100000 676100                    ERQ     0,,PR1
         6 005010   000377 376007                    ANQ     255,DL
         6 005011   100000 656100                    ERSQ    0,,PR1

     1976    15500    2      HOST_DATA.FILLER = 0 ;

  15500  6 005012   177777 236007                    LDQ     65535,DL
         6 005013   100000 356100                    ANSQ    0,,PR1

     1977    15501    2      RETURN ;

  15501  6 005014   200030 221300                    LDX1  ! FILE_DATA$+2,,AUTO
         6 005015   000001 702211                    TSX2  ! 1,X1

     1978    15502
     1979    15503    2   END GC_CONVERT_8_TO_9 ;
     1980    15504        /*I* NAME:         GC_CONVERT_8_TO_9_NO
     1981    15505             AUTHOR:       Scott S. Sheppard
     1982    15506             PURPOSE:      Converts 8 bit half word to 9 bit half word with
     1983    15507                           no byte swapping like GC_CONVERT_8_TO_9
     1984    15508             INTERFACE:    None called.
     1985    15509             PARAMETERS:   MCA_DATA - input
     1986    15510                                      data originally stored with 8 bit bytes,
     1987    15511                                      but when transferred, changed to 9 bit
     1988    15512                           HOST_DATA - output
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:281  
     1989    15513             DATA:         No external data accessed.
     1990    15514             DESCRIPTION:  When data is read from the MCA, the binary data
     1991    15515                           values are transferred as ASCII data.  Thus the
     1992    15516                           bytes are padded with an extra zero. This makes
     1993    15517                           the data represent incorrect  numerical values.
     1994    15518                           This procedure converts a field  received  from
     1995    15519                           the MCA so that it may be used by the HOST.
     1996    15520        */
     1997    15521
     1998    15522    1   GC_CONVERT_8_TO_9_NO: PROC (MCA_DATA, HOST_DATA) ;

  15522  6 005016   200034 741300       GC_CONVERT_* STX1  ! @HOST_DATA+2,,AUTO

     1999    15523
     2000    15524    2      DCL 1 MCA_DATA ALIGNED,
     2001    15525    2            2 *       UBIN (18) UNAL,
     2002    15526    2            2 UPPER   UBIN (10) UNAL,
     2003    15527    2            2 LOWER   UBIN (8)  UNAL ;
     2004    15528    2      DCL 1 HOST_DATA ALIGNED,
     2005    15529    2            2 *       UBIN (18) UNAL,
     2006    15530    2            2 UPPER   UBIN (10) UNAL,
     2007    15531    2            2 LOWER   UBIN (8)  UNAL ;
     2008    15532
     2009    15533        /* Code */
     2010    15534
     2011    15535    2      HOST_DATA = MCA_DATA ;

  15535  6 005017   200035 470500                    LDP0    @MCA_DATA,,AUTO
         6 005020   000000 236100                    LDQ     0,,PR0
         6 005021   200036 471500                    LDP1    @HOST_DATA,,AUTO
         6 005022   100000 756100                    STQ     0,,PR1

     2012    15536    2      HOST_DATA.UPPER = HOST_DATA.UPPER / 2 ;

  15536  6 005023   100000 236100                    LDQ     0,,PR1
         6 005024   000010 772000                    QRL     8
         6 005025   001777 376007                    ANQ     1023,DL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:282  
         6 005026   000001 772000                    QRL     1
         6 005027   000010 736000                    QLS     8
         6 005030   100000 676100                    ERQ     0,,PR1
         6 005031   777400 376007                    ANQ     -256,DL
         6 005032   100000 656100                    ERSQ    0,,PR1

     2013    15537    2      RETURN ;

  15537  6 005033   200034 221300                    LDX1  ! @HOST_DATA+2,,AUTO
         6 005034   000001 702211                    TSX2  ! 1,X1

     2014    15538
     2015    15539    2   END GC_CONVERT_8_TO_9_NO ;
     2016    15540        %EJECT ;
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:283  
     2017    15541    1   GC_ERR_MSG: PROC (MSG_CODE) ;

  15541  6 005035   200074 741300       GC_ERR_MSG   STX1  ! VAL_INX+1,,AUTO

     2018    15542
     2019    15543    2      DCL MSG_CODE                   UBIN WORD ALIGNED ;
     2020    15544
     2021    15545        /* Code */
     2022    15546
     2023    15547    2      DUP.MSG_CODE = MSG_CODE ;

  15547  6 005036   200075 470500                    LDP0    @MSG_CODE,,AUTO
         6 005037   000000 235100                    LDA     0,,PR0
         6 005040   000020 755000 xsym               STA     DUP+16

     2024    15548    2      CALL TOU$DU_USER_WRITE ;

  15548  6 005041   000002 631400 xsym               EPPR1   B_VECTNIL+2
         6 005042   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         6 005043   000000 011000                    NOP     0

     2025    15549    2      RETURN ;

  15549  6 005044   200074 221300                    LDX1  ! VAL_INX+1,,AUTO
         6 005045   000001 702211                    TSX2  ! 1,X1

BCD_CARD
 Sect OctLoc
   1     000   040040 040040   040040 040040   040040 040040   040040 040040
   1     024*  000000 000000                                                    ....

BINARY_CARD
 Sect OctLoc
   1     025   000000 000000   000000 000000   000000 000000   000000 000000    ................
   1     055*  040040 040040   040040 040040

ID
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:284  
 Sect OctLoc
   1     057   040040 040040   040040 040040   040040 040040   040040 040040
   1     063   040040 040040

BLOCK_SEQ
 Sect OctLoc
   1     064   040040 040040

SEQ
 Sect OctLoc
   1     065   000000 000000                                                    ....

ID_RECORDS
 Sect OctLoc
   1     066   ****** ******   ****** ******   ****** ******   ****** ******    ................
   1     136*  000000 000000                                                    ....

BCD_ASCII_TABLE
 Sect OctLoc
   2     000   060061 062063   064065 066067   070071 133043   100072 076077    0123456789[#@:>?
   2     004   040101 102103   104105 106107   110111 046056   135050 074134     ABCDEFGHI&.](<\
   2     010   136112 113114   115116 117120   121122 055044   052051 073047    ^JKLMNOPQR-$*);'
   2     014   053057 123124   125126 127130   131132 137054   045075 042041    +/STUVWXYZ_,%="!

BINARY_TABLE
 Sect OctLoc
   2     020   100004 000200   010000 400020   001000 040002   000102 020102    @......... ..B.B
   2     024   004200 220012   000600 004400   420041 004040   402040 104004    .........!. . D.
   2     030   400240 014000   410240 424022   401240 063000   240022 002100    ..........3....@
   2     034   204020 202010   200420 022001   200021 022042   202220 122006    ..........."..R.
   2     040   500014 001200   110010 401020   101010 041002   100112 021102    ....H...A.!.@J.B
   2     044   104210 221012   1006** ******                                    D...@...

ZEROES
 Sect OctLoc
   2     046   060060 060060   060060 ******                                    000000..

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:285  
BLANKS_OK
 Sect OctLoc
   2     050   4***** ******                                                    ....

NO_BLANKS
 Sect OctLoc
   2     051   0***** ******                                                    ....

(unnamed)
 Sect OctLoc
   2     052   106111 114105   040040 040040   040040 040040   104111 122105    FILE        DIRE
   2     056   103124 117122   131040 040040   110105 101104   105122 040040    CTORY   HEADER
   2     062   040040 040040   117102 112105   103124 040040   104113 105116        OBJECT  DKEN
   2     066   104040 040040   110105 130040   117103 124101   114040 040040    D   HEX OCTAL
   2     072   060060 060060   110115 120103   112061 040040   110124 116104    0000HMPCJ1  HTND
   2     076   130000 724002   030000 700001   122105 101104   040103 117116    X.......READ CON
   2     102   106111 107040   130000 720002   122105 101104   040110 104122    FIG X...READ HDR
   2     106   054040 040040   122105 101104   040104 111122   105103 124117    ,   READ DIRECTO
   2     112   122131 054040   150000 720002   122105 101104   040120 075040    RY, h...READ P=
   2     116   015012 074074   110116 111117   101060 040040   104101 124101    ..<<HNIOA0  DATA
   2     122   104111 122105   103124 122131   122105 126056   060060 040040    DIRECTRYREV.00
   2     126   060060 060062                                                    0002

(unnamed)
 Sect OctLoc
   7     000   000052 006000   000055 006000   000060 006000   000026 006000    .*...-...0......
   7     004   000003 006000   000026 006000   000000 000524   000006 006000    ................
   7     010   000000 006000   000000 000024   000011 006000   000024 006000    ................
   7     014   000002 006000   000000 000525   000015 006000   000000 006000    ................
   7     020   044040 040040   000000 000527   000021 006000   000000 000530    $   ............
   7     024   000023 006000   000000 000531   000025 006000   000000 000532    ................
   7     030   000027 006000   000000 000533   000031 006000   000003 006000    ................
   7     034   000000 000026   000001 006000   000034 006000   000002 006000    ................
   7     040   000000 000534   000040 006000   000000 000535   000042 006000    ..... ......."..
   7     044   000000 000536   000044 006000   000000 000537   000046 006000    .....$.......&..
   7     050   000000 000540   000050 006000   000000 000541   000052 006000    .....(.......*..
   7     054   000000 000542   000054 006000   000000 000543   000056 006000    .....,..........
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:286  
   7     060   060040 040040   067040 040040   000000 000544   000062 006000    0   7   .....2..
   7     064   054040 040040   000000 000545   000065 006000   000000 000546    ,   .....5......
   7     070   000067 006000   000000 000547   000071 006000   122040 040040    .7.......9..R
   7     074   000000 000550   000074 006000   000000 000551   000076 006000    .....<.......>..
   7     100   000000 000552   000100 006000   000051 006000   000000 000553    .....@...)......
   7     104   000103 006000   000000 000554   000105 006000   000050 006000    .C.......E...(..
   7     110   000042 600000   000043 600000   000044 600000   000045 600000    ."...#...$...%..
   7     114   000000 000555   000114 006000   000000 000556   000116 006000    .....L.......N..
   7     120   102040 040040   104040 040040   105040 040040   106040 040040    B   D   E   F
   7     124   103040 040040   071040 040040   101040 040040   070040 040040    C   9   A   8
   7     130   063040 040040   065040 040040   066040 040040   064040 040040    3   5   6   4
   7     134   061040 040040   062040 040040   000000 000557   000136 006000    1   2   .....^..
   7     140   000000 000560   000140 006000   000000 000561   000142 006000    .....`.......b..
   7     144   000000 000562   000144 006000   000000 000014   000000 000020    .....d..........
   7     150   000000 000021   000000 006000   000011 006000   000024 006000    ................
     2026    15550
     2027    15551    2   END GC_ERR_MSG ;
     2028    15552    1   END TOU$GET_CARD ;

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:287  
--  Include file information  --

   XUR_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOU_RQSTS_E.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
      No diagnostics issued in procedure TOU$GET_CARD.
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:288  

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    79- 15552    747   144     6      0  y y y    0   1 TOU$GET_CARD
                                  6      3    y y    0     TOU$GET_CP6_OBJECT
                                  6     10    y y    0     TOU$GET_BINARY_CARDS
                                  6     15    y y    0     TOU$GET_BCD_CARDS
                                  6     22    y y    0     TOU$GET_PATCH_CARDS
                                  6     27    y y    0     TOU$GET_CONFIG
                                  6     34    y y    0     TOU$GET_HEADER
                                  6     41    y y    0     TOU$GET_DIRECTORY
                                  6     46    y y    0     TOU$GET_FILE
                                  6     53    y y    0     TOU$MAKE_OBJECT_CARD
                                  6     62    y y    0     TOU$MAKE_DKEND_CARD
                                  6     67    y y    0     TOU$MAKE_DIR_OBJECT_CARD
                                  6     76    y y    0     TOU$MAKE_HDR_OBJECT_CARD
  1 13278- 13356     45     3     6    106  y y y    0     2 GC_GET_CP6_OBJECT
  2 13334- 13355     16     2     6    235  y   y    1      3 GC_CHECK_APPLICABILITY
  3 13376- 13400     16     0     6    322  y y y    0     2 GC_GET_BINARY_CARDS
  4 13422- 13455     24     0     6    403  y y y    0     2 GC_GET_BCD_CARDS
  5 13472- 13835     85    25     6    547  y y y    0     2 GC_GET_PATCH_CARDS
  6 13592- 13708     27     9     6    734  y   y    0      3 GC_FORM_HEX_CARD
  7 13710- 13821     19     9     6   1112  y   y    0      3 GC_FORM_OCTAL_CARD
  8 13823- 13834      7     0     6   1244  y   y    0      3 GC_STORE_PATCH_CARD
  9 13837- 13847      6     0     6   1301  y   y    0     2 GC_CONVERT_BCD_CARD
 10 13849- 13876     20     0     6   1323  y y y    0     2 GC_OBJECT_CHECKS
 11 13878- 13924     32     2     6   1421  y y y    0     2 GC_CONVERT_BINARY_CARD
 12 13926- 13991     40     0     6   1570  y y y    0     2 GC_BINARY_CHECKS
 13 13969- 13990     15     0     6   1671  y y y    0      3 GC_PREFACE_CHECKS
 14 13993- 14089     46     0     6   1750  y   y    0     2 GC_SET_ID_BLOCK
 15 14008- 14078     35    12     6   1772  y   y    0      3 GC_SET_FROM_BINARY_CARDS
 16 14080- 14088      4     0     6   2234  y   y    0      3 GC_SET_FROM_DKEND
 17 14091- 14342    128     0     6   2244  y y y    0     2 GC_PATCH_CHECKS
 18 14118- 14229     60    12     6   2321  y y y    0      3 GC_OCTAL_CHECKS
 19 14195- 14228     22     5     6   2533  y y y    2       4 GC_VERIFY_VALUE
 20 14231- 14341     49    16     6   2643  y y y    0      3 GC_HEX_CHECKS
 21 14312- 14340     16     5     6   3066  y y y    2       4 GC_VERIFY_VALUE
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:289  
 22 14344- 14379     23     0     6   3251  y y y    0     2 GC_DKEND_CHECKS
 23 14381- 14479     21     7     6   3354  y y y    0     2 GC_GET_CONFIG
 24 14503- 14564     20     7     6   3466  y y y    0     2 GC_GET_HEADER
 25 14589- 14689     22     9     6   3601  y y y    0     2 GC_GET_DIRECTORY
 26 14710- 14782     21     6     6   3734  y y y    0     2 GC_DUMMY_READ
 27 14807- 15000     62    20     6   4026  y y y    0     2 GC_GET_FILE
 28 14960- 14999     30     2     6   4226  y y y    0      3 GC_PROCESS_READ
 29 15015- 15032     12     2     6   4355  y y y    1     2 GC_CHECK_FOR_NORM_STATUS
 30 15046- 15111     12     9     6   4411  y   y    2     2 GC_CHECK_FACTORY_TEST
 31 15127- 15139      3     5     6   4454  y   y    2     2 GC_ADDR
 32 15172- 15328     31    18     6   4464  y   y    1     2 GC_MAKE_OBJECT_CARD
 33 15347- 15464     27     8     6   4633  y   y    0     2 GC_MAKE_DKEND_CARD
 34 15483- 15503      5     9     6   4775  y   y    2     2 GC_CONVERT_8_TO_9
 35 15522- 15539      4     5     6   5016  y   y    2     2 GC_CONVERT_8_TO_9_NO
 36 15541- 15551      4     2     6   5035  y   y    1     2 GC_ERR_MSG
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:290  

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              79   6      0 Proc    0                             13079   6      3 Entry   0
           13081   6      5 Call    0                             13082   6      7 Return  0
           13093   6     10 Entry   0                             13095   6     12 Call    0
           13096   6     14 Return  0                             13107   6     15 Entry   0
           13109   6     17 Call    0                             13110   6     21 Return  0
           13121   6     22 Entry   0                             13123   6     24 Call    0
           13124   6     26 Return  0                             13135   6     27 Entry   0
           13137   6     31 Call    0                             13138   6     33 Return  0
           13149   6     34 Entry   0                             13151   6     36 Call    0
           13152   6     40 Return  0                             13163   6     41 Entry   0
           13165   6     43 Call    0                             13166   6     45 Return  0
           13177   6     46 Entry   0                             13179   6     50 Call    0
           13180   6     52 Return  0                             13191   6     53 Entry   0
           13193   6     55 Call    0                             13194   6     61 Return  0
           13205   6     62 Entry   0                             13207   6     64 Call    0
           13208   6     66 Return  0                             13219   6     67 Entry   0
           13221   6     71 Call    0                             13222   6     75 Return  0
           13233   6     76 Entry   0                             13235   6    100 Call    0
           13236   6    104 Return  0                             13249   6    105 Altret  0 TOU$GC_ALTRETURN
           13278   6    106 Proc    1                             13286   6    107 Assign  1
           13287   6    110 DoWhil  1                             13288   6    111 Call    1
$$$$$$$$$$ 13289   6    114 DoCase  1                             13290   6    154 Case    1
           13291   6    154 Call    1                             13292   6    156 If      1
           13293   6    162 Do      1                             13294   6    162 Assign  1
           13295   6    165 Call    1                             13296   6    171 If      1
           13297   6    173 Do      1                             13298   6    173 Assign  1
           13299   6    175 Assign  1                             13300   6    176 Assign  1
           13301   6    200 Call    1                             13302   6    202 EndDo   1
           13303   6    203 Call    1                             13304   6    206 EndDo   1
           13305   6    207 Call    1                             13306   6    213 Case    1
           13307   6    213 Call    1                             13308   6    217 Case    1
           13309   6    217 Assign  1                             13310   6    222 EndCse  1
         $ 13311   6    222 EndWhi  1                             13312   6    231 Return  1
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:291  
           13315   6    233 Altret  1 ERROR                       13334   6    235 Proc    2
           13340   6    236 If      2                          $$ 13341   6    242 DoCase  2
           13342   6    253 Case    2                             13343   6    253 If      2
       $$$ 13344   6    257 Assign  2                         $$$ 13345   6    264 Assign  2
           13346   6    271 Case    2                             13347   6    271 If      2
       $$$ 13348   6    275 Assign  2                         $$$ 13349   6    302 Assign  2
           13350   6    307 Case    2                         $$$ 13351   6    307 Assign  2
           13352   6    313 EndCse  2                         $$$ 13353   6    314 Assign  2
           13355   6    320 EndPrc  2                             13376   6    322 Proc    3
           13380   6    323 Call    3                             13381   6    326 Assign  3
           13382   6    327 DoWhil  3                             13383   6    332 Call    3
           13384   6    334 Call    3                         $$$ 13385   6    336 Assign  3
           13386   6    344 Assign  3                         $$$ 13387   6    347 Call    3
           13389   6    363 Call    3                             13390   6    366 EndWhi  3
           13392   6    371 If      3                             13393   6    373 Return  3
           13394   6    375 Do      3                             13395   6    375 Call    3
           13397   6    401 Altret  3 ERROR                       13422   6    403 Proc    4
           13426   6    404 Assign  4                             13427   6    405 Call    4
           13428   6    407 DoWhil  4                             13429   6    410 Call    4
           13430   6    412 Call    4                         $$$ 13431   6    414 Call    4
       $$$ 13432   6    430 Assign  4                             13433   6    436 Assign  4
       $$$ 13434   6    441 Call    4                             13436   6    455 Call    4
           13437   6    460 Call    4                        $$$$ 13438   6    462 EndWhi  4
           13440   6    502 If      4                             13441   6    506 Do      4
           13442   6    506 Call    4                             13443   6    510 Call    4
       $$$ 13444   6    512 Call    4                         $$$ 13445   6    526 Assign  4
           13446   6    534 Assign  4                             13447   6    537 Return  4
           13449   6    541 Do      4                             13450   6    541 Call    4
           13452   6    545 Altret  4 ERROR                       13472   6    547 Proc    5
        $$ 13553   6    550 Call    5                             13554   6    560 DoWhil  5
        $$ 13555   6    562 Call    5                             13556   6    572 Do      5
  $$$$$$$$ 13557   6    572 DoCase  5                             13558   6    617 Case    5
           13559   6    617 Call    5                             13560   6    621 Call    5
           13561   6    623 Call    5                             13562   6    626 Case    5
           13563   6    626 Call    5                             13564   6    630 Call    5
           13565   6    632 Call    5                             13566   6    635 Case    5
           13567   6    635 Assign  5                             13568   6    637 EndCse  5
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:292  
           13569   6    637 EndDo   5                             13572   6    640 Do      5
        $$ 13573   6    640 If      5                             13574   6    646 Assign  5
           13575   6    651 Do      5                             13576   6    651 Assign  5
           13577   6    653 Call    5                          $$ 13578   6    656 Call    5
        $$ 13579   6    666 Call    5                           $ 13580   6    700 Call    5
        $$ 13582   6    706 Call    5 ERROR                       13583   6    716 Altret  5
           13586   6    720 EndWhi  5                          $$ 13587   6    722 Call    5
           13588   6    732 Return  5                             13592   6    734 Proc    6
           13680   6    735 Assign  6                             13681   6    740 Assign  6
           13682   6    743 DoIndx  6                           $ 13683   6    745 Assign  6
   $$$$$$$ 13684   6    751 DoCase  6                             13685   6    773 Case    6
    $$$$$$ 13686   6    773 IntCal  6                             13689   6   1020 Case    6
           13690   6   1020 Assign  6                             13691   6   1023 Case    6
           13692   6   1023 Assign  6                             13693   6   1026 Case    6
         $ 13694   6   1026 Assign  6                             13695   6   1035 Case    6
         $ 13696   6   1035 Assign  6                             13697   6   1044 Case    6
         $ 13698   6   1044 Assign  6                             13699   6   1053 Case    6
         $ 13700   6   1053 Assign  6                             13701   6   1062 Case    6
         $ 13702   6   1062 Assign  6                             13703   6   1071 Case    6
         $ 13704   6   1071 Assign  6                             13705   6   1077 EndCse  6
        $$ 13706   6   1077 EndInd  6                             13707   6   1110 Return  6
           13710   6   1112 Proc    7                             13800   6   1113 Assign  7
           13801   6   1116 Assign  7                             13802   6   1121 DoIndx  7
         $ 13803   6   1123 Assign  7                     $$$$$$$ 13804   6   1127 DoCase  7
           13805   6   1151 Case    7                      $$$$$$ 13806   6   1151 IntCal  7
           13809   6   1176 Case    7                           $ 13810   6   1176 Assign  7
           13811   6   1205 Case    7                           $ 13812   6   1205 Assign  7
           13813   6   1214 Case    7                           $ 13814   6   1214 Assign  7
           13815   6   1223 Case    7                           $ 13816   6   1223 Assign  7
           13817   6   1231 EndCse  7                          $$ 13818   6   1231 EndInd  7
           13819   6   1242 Return  7                             13823   6   1244 Proc    8
           13827   6   1245 Assign  8                         $$$ 13828   6   1250 Call    8
           13829   6   1264 Assign  8                         $$$ 13830   6   1266 Assign  8
           13831   6   1274 Assign  8                             13832   6   1277 Return  8
           13837   6   1301 Proc    9                             13841   6   1302 DoIndx  9
       $$$ 13842   6   1303 Assign  9                             13843   6   1313 EndInd  9
           13844   6   1317 Assign  9                             13845   6   1321 Return  9
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:293  
           13849   6   1323 Proc   10                             13853   6   1324 If     10
           13854   6   1330 If     10                             13855   6   1333 Do     10
  $$$$$$$$ 13856   6   1333 Do Sel 10                             13857   6   1372 Select 10
           13858   6   1372 Assign 10                             13859   6   1373 Assign 10
           13860   6   1374 Assign 10                             13861   6   1376 Select 10
           13862   6   1376 Call   10                             13863   6   1402 Altret 10
           13864   6   1404 EndSel 10                             13866   6   1404 Do     10
           13867   6   1404 Call   10                             13868   6   1410 Altret 10
           13870   6   1412 Do     10                             13871   6   1412 Call   10
           13872   6   1416 Altret 10                             13874   6   1420 Return 10
           13878   6   1421 Proc   11                             13885   6   1422 Assign 11
           13888   6   1425 DoIndx 11                             13889   6   1426 Assign 11
           13890   6   1427 Assign 11                             13891   6   1430 DoWhil 11
        $$ 13892   6   1431 If     11                             13893   6   1441 Assign 11
           13894   6   1444 Assign 11                          $$ 13895   6   1447 EndWhi 11
           13896   6   1463 If     11                           $ 13897   6   1465 Assign 11
           13898   6   1472 Do     11                             13899   6   1472 Call   11
           13900   6   1476 Altret 11                             13902   6   1500 EndInd 11
           13905   6   1504 DoIndx 11                             13906   6   1506 Assign 11
           13907   6   1507 Assign 11                             13908   6   1510 DoWhil 11
        $$ 13909   6   1511 If     11                             13910   6   1521 Assign 11
           13911   6   1524 Assign 11                          $$ 13912   6   1527 EndWhi 11
           13913   6   1543 If     11                           $ 13914   6   1545 Assign 11
           13915   6   1552 Do     11                             13916   6   1552 Call   11
           13917   6   1556 Altret 11                             13919   6   1560 EndInd 11
           13921   6   1564 Assign 11                             13922   6   1566 Return 11
           13926   6   1570 Proc   12                             13930   6   1571 If     12
           13931   6   1574 Do     12                             13932   6   1574 Assign 12
   $$$$$$$ 13933   6   1577 IntCal 12                             13934   6   1604 If     12
           13935   6   1607 Do     12                         $$$ 13936   6   1607 Call   12
           13940   6   1623 If     12                             13941   6   1627 Call   12
           13942   6   1632 If     12                             13944   6   1634 Do     12
           13945   6   1634 Call   12                             13946   6   1640 Altret 12
           13949   6   1642 Do     12                             13950   6   1642 Call   12
           13951   6   1646 Altret 12                             13954   6   1650 Do     12
           13955   6   1650 Call   12                             13956   6   1654 Altret 12
           13959   6   1656 If     12                             13960   6   1661 Return 12
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:294  
           13961   6   1663 Do     12                             13962   6   1663 Call   12
           13964   6   1667 Altret 12 ERROR                       13969   6   1671 Proc   13
           13973   6   1672 If     13                         $$$ 13975   6   1674 If     13
           13976   6   1714 Do     13                             13977   6   1714 Assign 13
           13978   6   1716 If     13                             13979   6   1722 Assign 13
           13980   6   1726 If     13                             13981   6   1732 Assign 13
           13982   6   1736 Assign 13                             13983   6   1740 EndDo  13
           13984   6   1741 Do     13                             13985   6   1741 Call   13
           13986   6   1745 Altret 13                             13988   6   1747 Return 13
           13993   6   1750 Proc   14                             13997   6   1751 If     14
           13998   6   1755 If     14                             14000   6   1757 Call   14
           14001   6   1762 If     14                             14002   6   1766 Call   14
           14004   6   1770 Return 14                             14008   6   1772 Proc   15
           14031   6   1773 Assign 15                             14032   6   1776 Assign 15
           14033   6   2000 Assign 15                           $ 14034   6   2001 Assign 15
           14035   6   2005 Assign 15                          $$ 14036   6   2010 Assign 15
         $ 14038   6   2015 IntCal 15                         $$$ 14042   6   2022 Assign 15
         $ 14044   6   2030 IntCal 15                             14048   6   2035 DoWhil 15
        $$ 14049   6   2036 Assign 15                             14050   6   2047 Assign 15
       $$$ 14051   6   2051 EndWhi 15                             14053   6   2065 DoWhil 15
           14054   6   2067 If     15                             14055   6   2072 Do     15
      $$$$ 14056   6   2072 Assign 15                         $$$ 14057   6   2110 Assign 15
           14058   6   2125 Assign 15                             14059   6   2126 EndDo  15
         $ 14060   6   2127 Assign 15                             14061   6   2136 DoIndx 15
        $$ 14062   6   2140 Assign 15                          $$ 14063   6   2151 EndInd 15
         $ 14064   6   2162 Assign 15                          $$ 14065   6   2170 If     15
           14066   6   2205 Assign 15                             14068   6   2207 Assign 15
           14069   6   2212 EndWhi 15                             14071   6   2213 DoIndx 15
       $$$ 14072   6   2214 Assign 15                             14073   6   2224 EndInd 15
           14075   6   2230 Assign 15                             14076   6   2232 Return 15
           14080   6   2234 Proc   16                             14084   6   2235 Assign 16
           14085   6   2240 Assign 16                             14086   6   2243 Return 16
           14091   6   2244 Proc   17                       $$$$$ 14095   6   2245 Do Sel 17
           14096   6   2264 Select 17                             14097   6   2264 Call   17
           14098   6   2267 Select 17                             14099   6   2267 Call   17
           14100   6   2272 Select 17                             14101   6   2272 Call   17
           14102   6   2276 Altret 17                             14103   6   2300 Select 17
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:295  
           14104   6   2300 Call   17                             14105   6   2304 Altret 17
           14106   6   2306 EndSel 17                             14108   6   2306 If     17
           14109   6   2311 Return 17                             14110   6   2313 Do     17
           14111   6   2313 Call   17                             14113   6   2317 Altret 17 ERROR
           14103   6   2321 Null   17                             14118   6   2321 Proc   18
           14139   6   2322 Assign 18                             14141   6   2325 DoIndx 18
     $$$$$ 14142   6   2326 If     18                             14143   6   2350 Do     18
           14144   6   2350 Call   18                             14145   6   2354 Altret 18
           14148   6   2356 EndInd 18                             14150   6   2362 Assign 18
           14151   6   2363 DoIndx 18                     $$$$$$$ 14152   6   2364 IntCal 18
           14153   6   2370 Assign 18                             14154   6   2374 EndInd 18
           14155   6   2400 If     18                             14156   6   2404 Assign 18
           14160   6   2406 Assign 18                          $$ 14161   6   2407 IntCal 18
      $$$$ 14162   6   2413 IntCal 18                             14163   6   2425 DoWhil 18
        $$ 14164   6   2430 Call   18                             14165   6   2441 Assign 18
       $$$ 14166   6   2444 IntCal 18                             14167   6   2454 EndWhi 18
        $$ 14168   6   2457 Call   18                             14170   6   2470 If     18
           14171   6   2474 If     18                             14173   6   2500 Do     18
           14174   6   2500 Call   18                             14175   6   2504 Altret 18
           14177   6   2506 If     18                             14179   6   2512 Do     18
           14180   6   2512 Call   18                             14181   6   2516 Altret 18
           14184   6   2520 If     18                             14186   6   2523 Do     18
           14187   6   2523 Call   18                             14189   6   2527 Altret 18 ERROR
           14191   6   2531 Return 18                             14195   6   2533 Proc   19
        $$ 14201   6   2534 If     19                             14202   6   2542 If     19
           14203   6   2545 Do     19                           $ 14204   6   2545 If     19
           14205   6   2552 Assign 19                           $ 14206   6   2554 If     19
           14207   6   2561 Assign 19                             14208   6   2563 DoIndx 19
     $$$$$ 14209   6   2566 If     19                             14211   6   2610 Do     19
           14212   6   2610 Call   19                             14213   6   2614 Altret 19
         $ 14216   6   2616 EndInd 19                             14217   6   2624 EndDo  19
           14218   6   2625 Do     19                             14219   6   2625 Call   19
           14220   6   2631 Altret 19                             14222   6   2633 Do     19
           14223   6   2633 Call   19                             14224   6   2637 Altret 19
           14226   6   2641 Return 19                             14231   6   2643 Proc   20
           14257   6   2644 Assign 20                             14259   6   2647 If     20
           14261   6   2653 Do     20                             14262   6   2653 Call   20
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:296  
           14263   6   2657 Altret 20                           $ 14266   6   2661 Call   20
   $$$$$$$ 14267   6   2667 IntCal 20                        $$$$ 14268   6   2674 If     20
           14269   6   2715 Do     20                             14270   6   2715 Call   20
           14271   6   2721 Altret 20                        $$$$ 14275   6   2723 If     20
           14277   6   2744 Do     20                             14278   6   2744 Call   20
           14279   6   2750 Altret 20                          $$ 14282   6   2752 Call   20
        $$ 14283   6   2762 Call   20                          $$ 14284   6   2772 Call   20
        $$ 14285   6   3002 Call   20                        $$$$ 14287   6   3012 If     20
           14289   6   3033 Do     20                             14290   6   3033 Call   20
           14291   6   3037 Altret 20                             14294   6   3041 If     20
           14296   6   3045 Do     20                             14297   6   3045 Call   20
           14298   6   3051 Altret 20                             14301   6   3053 If     20
           14303   6   3056 Do     20                             14304   6   3056 Call   20
           14306   6   3062 Altret 20 ERROR                       14308   6   3064 Return 20
           14312   6   3066 Proc   21                          $$ 14320   6   3067 If     21
        $$ 14321   6   3074 If     21                             14323   6   3101 Do     21
           14324   6   3101 Call   21                             14325   6   3105 Altret 21
           14327   6   3107 DoIndx 21                  $$$$$$$$$$ 14328   6   3110 Do Sel 21
           14329   6   3232 Select 21                             14331   6   3233 Select 21
           14333   6   3234 Select 21                             14334   6   3234 Call   21
           14335   6   3240 Altret 21                             14336   6   3242 EndSel 21
           14337   6   3242 EndInd 21                             14338   6   3247 Return 21
           14344   6   3251 Proc   22                             14348   6   3252 If     22
           14349   6   3256 If     22                             14350   6   3261 Do     22
           14351   6   3261 DoIndx 22                       $$$$$ 14352   6   3262 If     22
           14354   6   3304 Do     22                             14355   6   3304 Call   22
           14356   6   3310 Altret 22                             14359   6   3312 EndInd 22
           14360   6   3316 Assign 22                     $$$$$$$ 14361   6   3321 IntCal 22
           14362   6   3326 If     22                             14364   6   3330 Do     22
           14365   6   3330 Call   22                             14366   6   3334 Altret 22
           14368   6   3336 Return 22                             14370   6   3340 Do     22
           14371   6   3340 Call   22                             14372   6   3344 Altret 22
           14374   6   3346 Do     22                             14375   6   3346 Call   22
           14376   6   3352 Altret 22                             14381   6   3354 Proc   23
           14452   6   3355 Assign 23                          $$ 14453   6   3360 Assign 23
         $ 14454   6   3364 Assign 23                             14455   6   3370 Assign 23
           14456   6   3373 Assign 23                          $$ 14457   6   3376 Assign 23
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:297  
         $ 14458   6   3402 Assign 23                          $$ 14461   6   3406 Call   23
           14462   6   3420 Assign 23                          $$ 14463   6   3423 Call   23
           14464   6   3435 Assign 23                             14467   6   3440 Assign 23
           14468   6   3443 Assign 23                             14469   6   3445 DoUntl 23
           14470   6   3445 Call   23                           $ 14471   6   3450 Call   23
           14472   6   3456 EndUnt 23                             14473   6   3460 Call   23
           14474   6   3462 Return 23                             14477   6   3464 Altret 23 ERROR
           14503   6   3466 Proc   24                             14538   6   3467 Assign 24
        $$ 14539   6   3472 Assign 24                           $ 14540   6   3476 Assign 24
           14541   6   3502 Assign 24                          $$ 14542   6   3505 Assign 24
      $$$$ 14543   6   3511 IntCal 24                          $$ 14546   6   3521 Call   24
           14547   6   3533 Assign 24                          $$ 14548   6   3536 Call   24
           14549   6   3550 Assign 24                             14552   6   3553 Assign 24
           14553   6   3556 Assign 24                             14554   6   3560 DoUntl 24
           14555   6   3560 Call   24                           $ 14556   6   3563 Call   24
           14557   6   3571 EndUnt 24                             14558   6   3573 Call   24
           14559   6   3575 Return 24                             14562   6   3577 Altret 24 ERROR
           14589   6   3601 Proc   25                             14660   6   3602 Assign 25
        $$ 14661   6   3605 Assign 25                           $ 14662   6   3611 Assign 25
           14663   6   3615 Assign 25                          $$ 14664   6   3620 Assign 25
      $$$$ 14665   6   3624 IntCal 25                          $$ 14668   6   3634 Call   25
           14669   6   3646 Assign 25                          $$ 14670   6   3651 Call   25
           14671   6   3663 Assign 25                             14674   6   3666 Assign 25
           14675   6   3671 Assign 25                             14676   6   3673 DoUntl 25
           14677   6   3673 Call   25                           $ 14678   6   3676 Call   25
           14679   6   3704 EndUnt 25                             14680   6   3706 Assign 25
     $$$$$ 14681   6   3711 Call   25                             14683   6   3726 Call   25
           14684   6   3730 Return 25                             14687   6   3732 Altret 25 ERROR
           14710   6   3734 Proc   26                             14758   6   3735 Call   26
           14759   6   3741 If     26                             14760   6   3743 Return 26
           14761   6   3745 Do     26                             14762   6   3745 Assign 26
           14763   6   3750 Assign 26                          $$ 14764   6   3753 Assign 26
           14765   6   3757 Assign 26                             14766   6   3762 Assign 26
           14767   6   3765 Assign 26                           $ 14768   6   3770 Call   26
           14769   6   3777 Assign 26                             14770   6   4001 DoUntl 26
           14771   6   4001 Call   26                           $ 14772   6   4004 Call   26
           14773   6   4012 EndUnt 26                             14774   6   4014 Call   26
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:298  
           14775   6   4020 If     26                             14776   6   4022 Return 26
           14780   6   4024 Altret 26 ERROR                       14807   6   4026 Proc   27
           14888   6   4027 Assign 27                          $$ 14889   6   4032 Assign 27
         $ 14890   6   4036 Assign 27                             14891   6   4042 Assign 27
        $$ 14892   6   4045 Assign 27                             14893   6   4051 Assign 27
$$$$$$$$$$ 14894   6   4054 IntCal 27                          $$ 14897   6   4074 Call   27
           14898   6   4106 Assign 27                          $$ 14899   6   4111 Call   27
     $$$$$ 14900   6   4123 Call   27                             14902   6   4140 Assign 27
           14903   6   4143 Assign 27                             14904   6   4146 Assign 27
           14905   6   4151 Assign 27                             14906   6   4153 Assign 27
           14907   6   4154 Assign 27                             14909   6   4157 DoUntl 27
           14910   6   4157 Assign 27                           $ 14911   6   4162 Call   27
           14912   6   4171 Assign 27                             14913   6   4173 DoUntl 27
           14914   6   4173 Call   27                           $ 14915   6   4176 Call   27
           14916   6   4204 EndUnt 27                             14917   6   4206 Call   27
           14918   6   4210 Assign 27                             14919   6   4213 EndUnt 27
         $ 14921   6   4215 If     27                             14922   6   4222 Return 27
           14926   6   4224 Altret 27 ERROR                       14960   6   4226 Proc   28
           14965   6   4227 Call   28                       $$$$$ 14966   6   4233 Call   28
           14968   6   4247 If     28                             14969   6   4251 Do     28
           14970   6   4251 Assign 28                             14971   6   4254 Assign 28
           14972   6   4257 Assign 28                          $$ 14973   6   4262 Assign 28
           14974   6   4266 Assign 28                             14975   6   4267 EndDo  28
           14976   6   4270 Do     28                           $ 14977   6   4270 Assign 28
           14979   6   4274 DoIndx 28                        $$$$ 14980   6   4275 Assign 28
           14982   6   4307 EndInd 28                             14983   6   4314 EndDo  28
         $ 14984   6   4314 Assign 28                           $ 14985   6   4321 Assign 28
           14986   6   4325 Assign 28                           $ 14987   6   4331 Assign 28
           14989   6   4335 If     28                             14990   6   4337 If     28
           14991   6   4341 Return 28                             14992   6   4343 Do     28
           14993   6   4343 Call   28                             14994   6   4345 Call   28
           14995   6   4351 EndDo  28                             14996   6   4351 Return 28
           14998   6   4353 Altret 28 ERROR                       15015   6   4355 Proc   29
         $ 15021   6   4356 If     29                           $ 15022   6   4362 Do Sel 29
           15023   6   4373 Select 29                         $$$ 15024   6   4373 Assign 29
           15025   6   4400 Select 29                         $$$ 15026   6   4400 Assign 29
           15027   6   4405 Select 29                             15028   6   4405 Altret 29
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:299  
           15029   6   4406 EndSel 29                             15030   6   4406 Altret 29
           15031   6   4407 Return 29                             15046   6   4411 Proc   30
       $$$ 15093   6   4412 Assign 30                           $ 15095   6   4416 If     30
       $$$ 15097   6   4424 If     30                             15098   6   4432 Do     30
           15099   6   4432 Assign 30                             15100   6   4435 Assign 30
        $$ 15101   6   4440 Assign 30                             15102   6   4443 Assign 30
        $$ 15103   6   4446 Assign 30                             15104   6   4452 EndDo  30
           15109   6   4452 Return 30                             15127   6   4454 Proc   31
        $$ 15136   6   4455 Assign 31                             15137   6   4462 Return 31
           15172   6   4464 Proc   32                             15287   6   4465 Assign 32
           15288   6   4470 Assign 32                             15289   6   4473 Assign 32
           15292   6   4476 Assign 32                             15293   6   4501 Assign 32
           15294   6   4504 Assign 32                             15295   6   4507 Assign 32
           15296   6   4512 Assign 32                             15297   6   4514 Assign 32
        $$ 15298   6   4517 IntCal 32                             15301   6   4525 Assign 32
        $$ 15302   6   4527 IntCal 32                             15305   6   4534 Assign 32
           15306   6   4541 Assign 32                        $$$$ 15307   6   4543 IntCal 32
   $$$$$$$ 15312   6   4556 Do Sel 32                             15313   6   4576 Select 32
           15314   6   4576 Assign 32                           $ 15315   6   4600 Assign 32
        $$ 15316   6   4604 Assign 32                             15317   6   4611 Select 32
           15318   6   4611 Assign 32                             15319   6   4613 Assign 32
           15320   6   4616 Assign 32                             15321   6   4621 Select 32
           15322   6   4621 Assign 32                           $ 15323   6   4623 Assign 32
           15324   6   4627 Assign 32                             15325   6   4631 EndSel 32
           15326   6   4631 Return 32                             15347   6   4633 Proc   33
           15433   6   4634 Assign 33                             15434   6   4637 Assign 33
           15435   6   4642 Assign 33                           $ 15436   6   4645 Assign 33
           15437   6   4651 Assign 33                             15438   6   4654 Assign 33
       $$$ 15441   6   4656 Do Sel 33                             15442   6   4674 Select 33
           15443   6   4674 Assign 33                             15444   6   4677 Assign 33
           15445   6   4702 Select 33                             15446   6   4702 If     33
           15447   6   4706 Do     33                             15448   6   4706 Assign 33
$$$$$$$$$$ 15449   6   4711 IntCal 33                             15450   6   4723 EndDo  33
           15451   6   4724 Do     33                             15452   6   4724 Assign 33
       $$$ 15453   6   4727 IntCal 33                  $$$$$$$$$$ 15454   6   4736 IntCal 33
           15455   6   4751 EndDo  33                             15456   6   4751 EndSel 33
       $$$ 15459   6   4751 Call   33                           $ 15460   6   4765 Assign 33
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:300  
           15461   6   4771 Assign 33                             15462   6   4773 Return 33
           15483   6   4775 Proc   34                         $$$ 15498   6   4776 Assign 34
           15499   6   5005 Assign 34                             15500   6   5012 Assign 34
           15501   6   5014 Return 34                             15522   6   5016 Proc   35
        $$ 15535   6   5017 Assign 35                          $$ 15536   6   5023 Assign 35
           15537   6   5033 Return 35                             15541   6   5035 Proc   36
           15547   6   5036 Assign 36                             15548   6   5041 Call   36
           15549   6   5044 Return 36

  **** Statement type totals  ****

     1 Null     210 Assign   130 Call      62 If        23 Case      49 Return
    45 Altret    20 IntCal     6 Do Sel     6 EndSel    17 Select     6 DoUntl
    13 DoIndx     9 DoWhil     5 DoCase    50 Do         6 EndUnt    13 EndInd
     9 EndWhi     5 EndCse    12 EndDo     37 Proc       1 EndPrc    12 Entry
    15 Labels

 # major stmts=  578 Code/major= 4.49 # stmts=  747 Code/stmt= 3.47  Point total=114.0
 Cost/major stmt=  4.1 Cost/stmt=  3.1 Total cost=   2372.3

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$$$$
   6-8  $$$$$$$$
  8-10  $$$$
 10-12  $
 12-14  $
 14-16
 16-18  $
 18-20
 20-22
 22-??
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:301  

 **** Variables and constants ****

  ****  Section 001  Data  TOU$GET_CARD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(84)    r     1 BCD_CARD_                 64-0-0/w CHAR(4)     r     1 BLOCK_SEQ
    57-0-0/c CHAR        r     1 ID_(0:17)
    66-0-0/w STRC        r     1 ID_RECORDS_(0:40)
    65-0-0/w UBIN        r     1 SEQ

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(756)   r     1 BCD_ARRAY
     0-0-0/c CHAR        r         2 DATA(0:79)

     0-0-0/w STRC(756)   r     1 BCD_CARD
     0-0-0/c STRC(720)   r         2 BCD
     0-0-0/c CHAR(7)     r          3 CONTROL
     1-3-0/c CHAR(8)     r          3 TYPE
    22-0-0/c CHAR(4)     r          3 LBL
    23-0-0/c CHAR(4)     r          3 SEQ
     0-0-0/c CHAR(80)    r         2 BCD_
    24-0-0/b UBIN        r         2 CHECKSUM

    25-0-0/w STRC(936)   r     1 BINARY_CARD
    25-0-0/w STRC        r         2 WD1
    25-0-0/b UBIN(3)     r          3 TYPE
    25-0-0/w CHAR(4)     r         2 WRD_CHAR
    26-0-0/w UBIN        r         2 CHECKSUM
    32-0-0/c CHAR(76)    r         2 DATA_CHAR
    55-0-0/w CHAR        r         2 LBL_SEQ(0:7)
    55-0-0/w STRC(72)    r         2 LABEL_
    55-0-0/w CHAR(4)     r          3 LBL
    56-0-0/w CHAR(4)     r          3 SEQ
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:302  

    25-0-0/w STRC(936)   r     1 BINARY_CARD_
    25-0-0/w CHAR(104)   r         2 DATA

    57-0-0/c STRC(162)   r     1 ID
    60-2-0/c CHAR(6)     r         2 REVISION

    66-0-0/w STRC(1476)  r     1 ID_RECORDS
    66-0-0/w CHAR(80)    r         2 FIRST
   112-0-0/w CHAR(80)    r         2 SECOND

    25-0-0/w STRC(936)   r     1 PREFACE
    25-0-0/b STRC        r         2 WD1
    25-1-3/b UBIN(6)     r          3 WOREAD_COUNT
    25-2-0/b UBIN(18)    r          3 SIZE
    30-0-0/c STRC(72)    r         2 ENTRY_(0:9)
    31-3-6/b UBIN(3)     r          3 TYPE


  ****  Section 002 RoData TOU$GET_CARD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR        r     1 BCD_ASCII(0:63)
     0-0-0/c CHAR(64)    r     1 BCD_ASCII_TABLE
    20-0-0/b BIT (12)    r     1 BINARY_TABLE(0:63)
    50-0-0/b BIT         r     1 BLANKS_OK                 51-0-0/b BIT         r     1 NO_BLANKS
    46-0-0/c CHAR(6)     r     1 ZEROES

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    13-0-0/w PTR         r     1 @APPLICABLE               66-0-0/w PTR         r     1 @BLANK_VALID
    44-0-0/w PTR         r     1 @DATA$                    43-0-0/w PTR         r     1 @FACTORY_TEST
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:303  
    32-0-0/w PTR         r     1 @HOST_DATA                36-0-0/w PTR         r     1 @HOST_DATA
    43-0-0/w PTR         r     1 @ITEM$                    31-0-0/w PTR         r     1 @MCA_DATA
    35-0-0/w PTR         r     1 @MCA_DATA                 75-0-0/w PTR         r     1 @MSG_CODE
    43-0-0/w PTR         r     1 @READ_COMPLETE            71-0-0/w PTR         r     1 @START#
    72-0-0/w PTR         r     1 @STOP#                    44-0-0/w PTR         r     1 @TARGET
     7-0-0/w PTR         r     1 @TYPE                     65-0-0/w PTR         r     1 @VALUE
    63-0-0/w UBIN        r     1 ADDRESS_VALUE             10-0-0/c BIT         r     1 APPLICABLE
    *0-0-0/c BIT         r     1 APPLICABLE                *0-0-0/c BIT         r     1 BLANK_VALID
    31-0-0/w UBIN        r     1 BYTES_THIS_READ           21-0-0/w UBIN        r     1 BYTES_TO_READ
     3-0-0/w UBIN        r     1 CARD_SEQ                  64-0-0/w UBIN        r     1 CUR#
    40-0-0/w PTR         r     1 DATA$                     *0-0-0/w PTR         r     1 DATA$
    10-0-0/w PTR         r     1 DIR$                      11-0-0/w PTR         r     1 DIR$
    10-0-0/c BIT         r     1 FACTORY_TEST              10-0-0/c BIT         r     1 FACTORY_TEST
    10-0-0/c BIT         r     1 FACTORY_TEST              36-0-0/c BIT         r     1 FACTORY_TEST
    24-0-0/c BIT         r     1 FACTORY_TEST              *0-0-0/c BIT         r     1 FACTORY_TEST
    66-0-0/w UBIN        r     1 FIELD_LGTH                12-0-0/w PTR         r     1 FILE$
     7-0-0/w PTR         r     1 FILE$                     25-0-0/w PTR         r     1 FILER$
    26-0-0/w PTR         r     1 FILE_DATA$                22-0-0/c BIT         r     1 FIRST_READ
    11-0-0/c BIT         r     1 FOUND                      7-0-0/w PTR         r     1 HDR$
     7-0-0/w PTR         r     1 HDR$                       7-0-0/w PTR         r     1 HDR$
    37-0-0/w PTR         r     1 HDR$                       7-0-0/w PTR         r     1 HDR$
    45-0-0/w PTR         r     1 HDR$                      10-0-0/w PTR         r     1 HDR$
    10-0-0/w PTR         r     1 HDR$                      37-0-0/w UBIN        r     1 I
    67-0-0/w UBIN        r     1 I                         32-0-0/w UBIN        r     1 I
     4-0-0/c BIT         r     1 ID_BLOCK_SET              14-0-0/w UBIN(6)     r     1 ID_DATA_(0:245)
    13-0-0/w UBIN(18)    r     1 ID_LOC
    14-0-0/w STRC        r     1 ID_RECORD(0:40)
    67-0-0/w UBIN        r     1 L                         66-0-0/w UBIN(18)    r     1 LOAD_INX
    *0-0-0/w STRC        r     1 MCA_DATA                  *0-0-0/w UBIN        r     1 MSG_CODE
     7-0-0/c BIT         r     1 OBJECT_FOUND              35-0-0/w UBIN        r     1 OUTBLK#
    35-0-0/w UBIN        r     1 OUTBLK#                   36-0-0/w PTR         r     1 OUTBLK$
    36-0-0/w PTR         r     1 OUTBLK$                    7-0-0/w PTR         r     1 PATCH$
    65-0-0/w UBIN        r     1 POS#                       5-0-0/c BIT         r     1 PREFACE_FOUND
    35-0-0/c BIT         r     1 READ_COMPLETE             23-0-0/c BIT         r     1 READ_COMPLETE
    *0-0-0/c BIT         r     1 READ_COMPLETE
    11-0-0/w UBIN        r     1 SAVE_8_UNDER_HDR(0:7)
    *0-0-0/w UBIN        r     1 START#                    *0-0-0/w UBIN        r     1 STOP#
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:304  
    12-0-0/w UBIN        r     1 TABLE_INX                 *0-0-0/c BIT (18)    r     1 TARGET
    *0-0-0/c CHAR(9)     r     1 TYPE                      *0-0-0/c CHAR(4)     r     1 VALUE
    73-0-0/w UBIN        r     1 VAL_INX

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    37-0-0/c STRC(720)   r     1 HEX_CARD
    37-0-0/c STRC(720)   r         2 BCD
    37-0-0/c CHAR(4)     r          3 ADDRESS
    40-2-0/c CHAR        r          3 HEX_TYPE
    40-3-0/c CHAR(8)     r          3 TYPE
    42-3-0/c CHAR(4)     r          3 INSTR1
    43-3-0/c CHAR(4)     r          3 INSTR2
    44-3-0/c CHAR(4)     r          3 ORIG1
    45-3-0/c CHAR(4)     r          3 ORIG2
    46-3-0/c CHAR        r          3 REVERSED
    57-2-0/c CHAR(6)     r          3 REVISION
    61-0-0/c CHAR(4)     r          3 LABEL
    37-0-0/c CHAR(80)    r         2 BCD_

    *0-0-0/w STRC        r     1 HOST_DATA
     0-0-0/b UBIN(20)    r         2 FILLER
     0-2-2/b UBIN(8)     r         2 UPPER
     0-3-1/b UBIN(8)     r         2 LOWER

    *0-0-0/w STRC        r     1 HOST_DATA
     0-2-0/b UBIN(10)    r         2 UPPER

    *0-0-0/w STRC        r     1 ITEM$
     0-0-0/b BIT (18)    r         2 ADDRESS

    65-0-0/w STRC        r     1 LOAD
    65-1-3/b UBIN(6)     r         2 SIZE
    65-2-0/b UBIN(18)    r         2 ADDRESS

    *0-0-0/w STRC        r     1 MCA_DATA
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:305  
     0-2-1/b UBIN(8)     r         2 UPPER
     0-3-1/b UBIN(8)     r         2 LOWER

    40-0-0/c STRC(720)   r     1 OCTAL_CARD
    40-0-0/c STRC(720)   r         2 BCD
    40-0-0/c CHAR        r          3 ADDRESS_(0:5)
    43-3-0/c CHAR(51)    r          3 FIELD
    43-3-0/c CHAR        r          3 FIELD_(0:50)
    60-2-0/c CHAR(6)     r          3 REVISION
    62-0-0/c CHAR(4)     r          3 LABEL
    40-0-0/c CHAR(80)    r         2 BCD_

    10-0-0/c STRC(720)   r     1 PATCH_CARD
    10-0-0/c STRC(720)   r         2 BCD
    10-0-0/c CHAR(6)     r          3 ADDRESS
    11-2-0/c CHAR        r          3 CS_RW
    11-3-0/c CHAR(8)     r          3 TYPE
    13-3-0/c CHAR(51)    r          3 OCTAL_
    13-3-0/c STRC(459)   r          3 HEX_
    13-3-0/c CHAR(4)     r           4 INSTR1
    14-3-0/c CHAR(4)     r           4 INSTR2
    30-2-0/c STRC(90)    r          3 REVLBL
    30-2-0/c CHAR(6)     r           4 REVISION
    32-0-0/c CHAR(4)     r           4 LABEL
    30-2-0/c CHAR(10)    r          3 REVLBL_
    10-0-0/c CHAR(80)    r         2 BCD_


  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w UBIN        r     1 BCD#
     0-0-0/w UBIN        r     1 BIN#                       0-0-0/w UBIN        r     1 CUR#
     0-0-0/c BIT         r     1 DECK_SAVED                 0-0-0/w CHAR(84)    r     1 DKEND_
     0-0-0/w UBIN        r     1 FILE_EOF                   0-0-0/w SBIN        r     1 PATCH_ROOT_NODE
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:306  

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(756)   r     1 DKEND
     0-0-0/c STRC(720)   r         2 BCD
     0-0-0/c CHAR(7)     r          3 CONTROL
     1-3-0/c CHAR(8)     r          3 TYPE
    15-2-0/c CHAR(6)     r          3 MOD_DATE
    17-0-0/c CHAR(6)     r          3 DATE
    20-2-0/c CHAR(6)     r          3 REVISION
    22-0-0/c CHAR(4)     r          3 LBL
    23-0-0/c CHAR(4)     r          3 SEQ
     0-0-0/c CHAR(80)    r         2 BCD_
    24-0-0/w UBIN        r         2 CHECKSUM

     0-0-0/d STRC(5220)  r     1 DUP
    20-0-0/w UBIN        r         2 MSG_CODE
    57-0-0/w STRC(576)   r         2 IFAD
    63-0-0/c CHAR        r          3 DRIVE_NUMBER
   100-0-0/d STRC(72)    r         2 BINARY_V
   101-0-0/b PTR         r          3 PTR$
   102-0-0/d STRC(72)    r         2 BCD_V
   103-0-0/b PTR         r          3 PTR$
   220-0-0/w UBIN(9)     r         2 CPU_TYPE

     0-0-0/c STRC(54)    r     1 LAST
     0-2-0/c CHAR(4)     r         2 EDIT_NAME

     0-0-0/w STRC(864)   r     1 OBJECT
     0-0-0/w STRC(720)   r         2 BCD
     0-0-0/c CHAR(7)     r          3 CONTROL
     3-3-0/c CHAR(6)     r          3 LIBRARY
     5-1-0/c CHAR        r          3 LOAD_TYPE
     5-3-0/c STRC(99)    r          3 DONT_APPLY
     6-0-0/c CHAR        r           4 CP6
     7-1-0/c CHAR        r           4 DPS90
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:307  
     7-2-0/c CHAR        r           4 DPS8000
    16-3-0/c CHAR        r          3 ASSEMBLER
    20-2-0/c CHAR(6)     r          3 DATE
    22-0-0/c CHAR(4)     r          3 LBL
    23-0-0/c CHAR(4)     r          3 SEQ
     0-0-0/c STRC(720)   r         2 NIO_BCD
     0-0-0/c CHAR(7)     r          3 CONTROL
     1-3-0/c CHAR(8)     r          3 TYPE
     3-3-0/c CHAR(6)     r          3 LIBRARY
     5-1-0/c CHAR        r          3 LOAD_TYPE
     5-2-0/c CHAR        r          3 CLASS
    10-2-0/c CHAR(4)     r          3 DATA
    12-2-0/c CHAR(5)     r          3 EQUIP_TYPE
    13-3-0/c CHAR(8)     r          3 FILE_NAME
    15-3-0/c CHAR(4)     r          3 X_OF_N_
    16-3-0/c CHAR        r          3 ASSEMBLER
    17-0-0/c CHAR(4)     r          3 PRD_NUM_TAB
    20-0-0/c CHAR(3)     r          3 PRG_NUM_TAB
    22-0-0/c CHAR(4)     r          3 LBL
    23-0-0/c CHAR(4)     r          3 SEQ
     0-0-0/w CHAR(80)    r         2 BCD_
    25-2-0/b UBIN(18)    r         2 LOAD_SIZE
    26-0-0/w UBIN        r         2 DECK_CHECKSUM

     0-0-0/w STRC(1008)  r     1 RECORD
     0-0-0/b UBIN(18)    r         2 SIZE
     1-0-0/w STRC(972)   r         2 BCD
     1-0-0/b UBIN(6)     r          3 DATA(0:79)
     1-0-0/w STRC(972)   r         2 BINARY
     1-0-0/w STRC(972)   r          3 DATA
     1-0-0/w CHAR(96)    r           4 BINARY
     1-0-0/w STRC(864)   r           4 CS
     1-0-0/w UBIN        r            5 WD1
     2-0-0/w UBIN        r            5 CHECKSUM
     3-0-0/w CHAR(88)    r            5 DATA
    31-0-0/b BIT (12)    r           4 LBL_SEQ(0:7)

PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:308  

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(84)    r     1 BCD_B(0:199)               0-0-0/w STRC(936)   r     1 BINARY_B(0:1023)
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$IFAD
     0-0-0N  NULL        r     1 M$SI

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT
   102-0-0/b STRC        r         2 ERR
   102-2-1/b UBIN(14)    r          3 ERR#

     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w PTR         r         2 ALT$

     0-0-0/c STRC(144)   r     1 DIRECTORY_ENTRY
     0-0-0/c CHAR(8)     r         2 PATH_NAME
     2-2-0/b UBIN(18)    r         2 FILE_SIZE

     0-0-0/c STRC(144)   r     1 DIRECTORY_ENTRY
     0-0-0/c CHAR(8)     r         2 PATH_NAME

     0-0-0/c STRC(65536) r     1 DISKETTE_FILE
     0-0-0/c STRC(2304)  r         2 HDR
     4-0-0/c CHAR(12)    r          3 MOD_DWG_NUM

     0-0-0/c STRC(65536) r     1 DISKETTE_FILE
     0-0-0/c STRC(2304)  r         2 HDR
    10-2-0/c CHAR        r          3 PGM_REV

     0-0-0/c STRC(1224)  r     1 DISKETTE_HEADER
    27-1-0/b UBIN(18)    r         2 DIR_SIZE
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:309  

     0-0-0/c STRC(1224)  r     1 DISKETTE_HEADER
    17-3-0/c CHAR(8)     r         2 UNIQUE_ID
    32-2-0/c CHAR(4)     r         2 EQUIP_TYPE
    33-2-0/c STRC(108)   r         2 IPI_NUM
    35-3-0/c CHAR(3)     r          3 PRD_NUM_TAB
    41-2-0/c STRC(18)    r         2 X_OF_N
    41-2-0/c CHAR        r          3 X
    41-3-0/c CHAR        r          3 N

     0-0-0/c STRC(1224)  r     1 DISKETTE_HEADER
    21-3-0/c CHAR(6)     r         2 DATE_CREATED
    23-1-0/c CHAR(6)     r         2 DATE_CHANGED

     0-0-0/c STRC)       r     1 DISKETTE_READ_BUFFER
     0-0-0/b BIT         r         2 DATA_WORD(0:4039)

     0-0-0/c STRC)       r     1 DISKETTE_READ_BUFFER
     0-0-0/b BIT         r         2 DATA_WORD(0:4039)

     0-0-0/c STRC(288)   r     1 HDR_BLK
     0-1-0/b UBIN(9)     r         2 DEFINER
     1-2-0/b BIT (9)     r         2 RD_FLPY
     1-3-0/c STRC(225)   r         2 IO_PARAM_BLK
     7-2-0/b UBIN(18)    r          3 DEST_LEN

     0-0-0/c STRC(288)   r     1 HDR_BLK
     0-1-0/b UBIN(9)     r         2 DEFINER
     1-2-0/b BIT (9)     r         2 RD_FLPY
     1-3-0/c STRC(225)   r         2 IO_PARAM_BLK
     7-2-0/b UBIN(18)    r          3 DEST_LEN

     0-0-0/c STRC(288)   r     1 HDR_BLK
     0-1-0/b UBIN(9)     r         2 DEFINER
     1-2-0/b BIT (9)     r         2 RD_FLPY
     1-3-0/c STRC(225)   r         2 IO_PARAM_BLK
     7-2-0/b UBIN(18)    r          3 DEST_LEN
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:310  

     0-0-0/c STRC(288)   r     1 HDR_BLK
     0-1-0/b UBIN(9)     r         2 DEFINER

     0-0-0/c STRC(288)   r     1 HDR_BLK
     0-1-0/b UBIN(9)     r         2 DEFINER
     1-2-0/b BIT (9)     r         2 RD_FLPY
     1-3-0/c STRC(225)   r         2 IO_PARAM_BLK
     6-0-0/b UBIN(18)    r          3 SOURCE_LEN
     7-2-0/b UBIN(18)    r          3 DEST_LEN

     0-0-0/c STRC(288)   r     1 HDR_BLK
     0-1-0/b UBIN(9)     r         2 DEFINER

     0-0-0/d STRC)       r     1 MCA_B
     0-0-0/w STRC(144)   r         2 DCW_LIST
     0-0-0/b BIT         r          3 IDCW1
     1-0-0/b STRC        r          3 DCW1
     1-0-0/b BIT (18)    r           4 ADDRESS
     1-2-0/b UBIN(18)    r           4 COUNT
     2-0-0/b BIT         r          3 IDCW2
     3-0-0/b STRC        r          3 DCW2
     3-0-0/b BIT (18)    r           4 ADDRESS
     3-2-0/b UBIN(18)    r           4 COUNT
     4-0-0/w STRC(576)   r         2 COMMAND
     4-0-0/c CHAR(32)    r          3 HDR_BLK
    14-0-0/c CHAR(32)    r          3 DATA
    24-0-0/w STRC(72)    r         2 STATUS
    24-0-2/b BIT (4)     r          3 MAJOR
    24-0-6/b STRC(6)     r          3 SUB
    24-0-7/b BIT (5)     r           4 VALUE
    26-0-0/w STRC(1512)  r         2 DISKETTE_HEADER
    36-0-0/c CHAR(136)   r          3 DATA
   100-0-0/w STRC(23508) r         2 DIRECTORY
  1310-0-0/w UBIN        r          3 SIZE
  1311-0-0/c CHAR(16)    r          3 CURRENT
  1315-0-0/w STRC(65896) r         2 FILE
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:311  
  1325-0-0/c STRC(65536) r          3 DATA
 41325-0-0/w UBIN        r          3 SIZE
 41326-0-0/w UBIN        r          3 BYTES_READ
 41327-0-0/w STRC)       r         2 DUMMY_BUFFER
 41337-0-0/b BIT         r          3 DATA_WORDS(0:4031)
 51237-0-0/w STRC(1512)  r         2 CONFIG

     0-0-0/w STRC(144)   r     1 OUT$BLK
     0-2-0/h UBIN(18)    r         2 CODE

     0-0-0/w STRC(144)   r     1 OUT$BLK
     0-2-0/h UBIN(18)    r         2 CODE
     1-0-0/h UBIN(18)    r         2 NSUBLKS
     3-0-0/b PTR         r         2 SUBLK$(0:0)

     0-0-0/w STRC(144)   r     1 OUT$BLK
     0-2-0/h UBIN(18)    r         2 CODE
     1-0-0/h UBIN(18)    r         2 NSUBLKS
     3-0-0/b PTR         r         2 SUBLK$(0:0)

     0-0-0/w ASTR(153)   r     1 OUT$SYM
     4-0-0/c UBIN(9)     r         2 COUNT
     4-1-0/c ACHR        r         2 TEXT

     0-0-0/w ASTR(153)   r     1 OUT$SYM
     4-0-0/c UBIN(9)     r         2 COUNT
     4-1-0/c ACHR        r         2 TEXT



   Procedure TOU$GET_CARD requires 2598 words for executable code.
   Procedure TOU$GET_CARD requires 84 words of local(AUTO) storage.

    No errors detected in file TOU$GET_CARD.:E05TSI    .
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:312  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:313  
          MINI XREF LISTING

ADDRESS_VALUE IN PROCEDURE GC_HEX_CHECKS
     14251**DCL     14267<<CALLBLT 14268>>IF
APPLICABLE IN PROCEDURE GC_CHECK_APPLICABILITY
     13336**DCL     13334--PROC    13344<<ASSIGN  13345<<ASSIGN  13348<<ASSIGN  13349<<ASSIGN  13351<<ASSIGN
     13353<<ASSIGN
APPLICABLE IN PROCEDURE GC_GET_CP6_OBJECT
     13282**DCL     13295<>CALL    13296>>IF
B$ALT.CODE IN PROCEDURE GC_GET_PATCH_CARDS
     13544**DCL     13544--REDEF   13545--REDEF   13545--REDEF
B$ALT.ERR.ERR# IN PROCEDURE GC_GET_PATCH_CARDS
     13546**DCL     13546--REDEF   13573>>IF
B$ALT.EVID IN PROCEDURE GC_GET_PATCH_CARDS
     13545**DCL     13545--REDEF   13545--REDEF
B$TCB.ALT$ IN PROCEDURE GC_GET_PATCH_CARDS
     13540**DCL     13573>>IF
B$TCB$ IN PROCEDURE GC_GET_PATCH_CARDS
     13475**DCL     13573>>IF
BCD#
     12981**DCL     13426<<ASSIGN  13432>>ASSIGN  13433<<ASSIGN  13433>>ASSIGN  13445>>ASSIGN  13446<<ASSIGN
     13446>>ASSIGN  13829>>ASSIGN  13830>>ASSIGN  13831<<ASSIGN  13831>>ASSIGN  14108>>IF      15461<<ASSIGN
BCD_ARRAY.DATA
     12697**DCL     13842<<ASSIGN
BCD_ASCII
     12980**DCL     13842>>ASSIGN  13897>>ASSIGN  13914>>ASSIGN  14072>>ASSIGN
BCD_ASCII_TABLE
     12978**DCL     12980--REDEF
BCD_B
     12673**DCL     13432<<ASSIGN  13445<<ASSIGN  13830<<ASSIGN  15460<<ASSIGN
BCD_CARD
     12685**DCL     12694--REDEF   12696--REDEF   13828--CALL
BCD_CARD.BCD
     12686**DCL     12692--REDEF
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:314  
BCD_CARD.BCD.CONTROL
     12687**DCL     14348>>IF
BCD_CARD.BCD.LBL
     12690**DCL     14349>>IF
BCD_CARD.BCD.SEQ
     12691**DCL     13844>>ASSIGN  14352>>IF      14352>>IF      14361>>CALLBLT
BCD_CARD.BCD.TYPE
     12688**DCL     13292>>IF      13428>>DOWHILE 13440>>IF      14001>>IF      14095>>DOSELCT
BCD_CARD.BCD_
     12692**DCL     13294>>ASSIGN  13431--CALL    13444--CALL    13827<<ASSIGN  14084>>ASSIGN  14139>>ASSIGN
     14257>>ASSIGN
BCD_CARD.CHECKSUM
     12693**DCL     13431<>CALL    13434--CALL    13444<>CALL    13828<>CALL
BCD_CARD_
     12694**DCL     13432>>ASSIGN  13445>>ASSIGN  13830>>ASSIGN
BIN#
     12983**DCL     13381<<ASSIGN  13385>>ASSIGN  13386<<ASSIGN  13386>>ASSIGN  13392>>IF      13959>>IF
     14036>>ASSIGN  14042>>ASSIGN
BINARY_B
     12708**DCL     13385<<ASSIGN  14034>>ASSIGN  14036>>ASSIGN  14042>>ASSIGN
BINARY_CARD
     12723**DCL     12738--REDEF   12741--REDEF   14034<<ASSIGN  14036<<ASSIGN  14042<<ASSIGN
BINARY_CARD.CHECKSUM
     12730**DCL     13387--CALL
BINARY_CARD.DATA
     12732**DCL     12733--REDEF
BINARY_CARD.DATA_CHAR
     12733**DCL     14038>>CALLBLT 14044>>CALLBLT
BINARY_CARD.LABEL_.LBL
     12736**DCL     13930>>IF
BINARY_CARD.LABEL_.SEQ
     12737**DCL     13921>>ASSIGN  13933>>CALLBLT
BINARY_CARD.LBL_SEQ
     12734**DCL     12735--REDEF   13897<<ASSIGN  13914<<ASSIGN
BINARY_CARD.WD1
     12724**DCL     12729--REDEF
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:315  
BINARY_CARD.WD1.TYPE
     12725**DCL     13940>>IF      13942>>IF
BINARY_CARD.WRD_CHAR
     12729**DCL     14038>>CALLBLT 14044>>CALLBLT
BINARY_CARD_
     12738**DCL     13385>>ASSIGN
BINARY_CARD_.DATA
     12739**DCL     13885<<ASSIGN
BINARY_TABLE
     12987**DCL     13892>>IF      13909>>IF
BLANKS_OK IN PROCEDURE GC_HEX_CHECKS
     14252**DCL     14282<>CALL    14283<>CALL    14284<>CALL    14285<>CALL
BLANK_VALID IN PROCEDURE GC_VERIFY_VALUE
     14315**DCL     14312--PROC    14321>>IF
BLOCK_SEQ
     12984**DCL     13844<<ASSIGN  13921<<ASSIGN
BYTES_THIS_READ IN PROCEDURE GC_PROCESS_READ
     14962**DCL     14966<>CALL    14984>>ASSIGN  14986>>ASSIGN
BYTES_TO_READ IN PROCEDURE GC_GET_FILE
     14866**DCL     14904<<ASSIGN  14985<<ASSIGN  14989>>IF
CARD_SEQ
     12985**DCL     13933<<CALLBLT 13934>>IF      14361<<CALLBLT 14362>>IF
CUR#
     12982**DCL     13829<<ASSIGN  13841<<DOINDEX 13842>>ASSIGN  13842>>ASSIGN  13888<<DOINDEX 13892>>IF
     13897>>ASSIGN  13905<<DOINDEX 13909>>IF      13914>>ASSIGN  14058<<ASSIGN  14060<<ASSIGN  14062>>ASSIGN
     14071<<DOINDEX 14072>>ASSIGN  14072>>ASSIGN  14351<<DOINDEX 14352>>IF      14352>>IF
CUR# IN PROCEDURE GC_OCTAL_CHECKS
     14133**DCL     14150<<ASSIGN  14153<<ASSIGN  14153>>ASSIGN  14155>>IF      14156>>ASSIGN  14160<<ASSIGN
     14162>>CALLBLT 14164<>CALL    14165<<ASSIGN  14166>>CALLBLT 14168<>CALL
DATA$ IN PROCEDURE GC_CHECK_FACTORY_TEST
     15077**DCL     15046--PROC    15087--IMP-PTR 15097>>IF      15100>>ASSIGN
DATA$ IN PROCEDURE GC_DUMMY_READ
     14742**DCL     14752--IMP-PTR 14767<<ASSIGN  14768<>CALL    14772<>CALL
DECK_SAVED IN PROCEDURE GC_GET_CP6_OBJECT
     13281**DCL     13309>>ASSIGN
DIR$ IN PROCEDURE GC_GET_FILE
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:316  
     14837**DCL     14847--IMP-PTR 14893<<ASSIGN  14894>>CALLBLT 14900>>CALL
DIR$ IN PROCEDURE GC_MAKE_OBJECT_CARD
     15176**DCL     15223--IMP-PTR 15288<<ASSIGN  15315>>ASSIGN
DIRECTORY_ENTRY.ATTRIBUTES_ IN PROCEDURE GC_GET_FILE
     14857**DCL     14859--REDEF
DIRECTORY_ENTRY.FILE_SIZE IN PROCEDURE GC_GET_FILE
     14853**DCL     14900>>CALL
DIRECTORY_ENTRY.PATH_NAME IN PROCEDURE GC_GET_FILE
     14848**DCL     14850--REDEF   14894>>CALLBLT
DIRECTORY_ENTRY.ATTRIBUTES_ IN PROCEDURE GC_MAKE_OBJECT_CARD
     15233**DCL     15235--REDEF
DIRECTORY_ENTRY.PATH_NAME IN PROCEDURE GC_MAKE_OBJECT_CARD
     15224**DCL     15226--REDEF   15315>>ASSIGN
DISKETTE_FILE.HDR.PGM_REV IN PROCEDURE GC_MAKE_DKEND_CARD
     15366**DCL     15453>>CALLBLT
DISKETTE_FILE.HDR.MOD_DWG_NUM IN PROCEDURE GC_MAKE_OBJECT_CARD
     15255**DCL     15316>>ASSIGN
DISKETTE_HEADER.IPI_NUM IN PROCEDURE GC_GET_CONFIG
     14437**DCL     14440--REDEF
DISKETTE_HEADER.X_OF_N IN PROCEDURE GC_GET_CONFIG
     14442**DCL     14445--REDEF
DISKETTE_HEADER.DIR_SIZE IN PROCEDURE GC_GET_DIRECTORY
     14639**DCL     14681>>CALL
DISKETTE_HEADER.IPI_NUM IN PROCEDURE GC_GET_DIRECTORY
     14645**DCL     14648--REDEF
DISKETTE_HEADER.X_OF_N IN PROCEDURE GC_GET_DIRECTORY
     14650**DCL     14653--REDEF
DISKETTE_HEADER.DATE_CHANGED IN PROCEDURE GC_MAKE_DKEND_CARD
     15407**DCL     15437>>ASSIGN
DISKETTE_HEADER.DATE_CREATED IN PROCEDURE GC_MAKE_DKEND_CARD
     15406**DCL     15436>>ASSIGN
DISKETTE_HEADER.IPI_NUM IN PROCEDURE GC_MAKE_DKEND_CARD
     15419**DCL     15422--REDEF
DISKETTE_HEADER.X_OF_N IN PROCEDURE GC_MAKE_DKEND_CARD
     15424**DCL     15427--REDEF
DISKETTE_HEADER.EQUIP_TYPE IN PROCEDURE GC_MAKE_OBJECT_CARD
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:317  
     15203**DCL     15298>>CALLBLT
DISKETTE_HEADER.IPI_NUM IN PROCEDURE GC_MAKE_OBJECT_CARD
     15204**DCL     15207--REDEF
DISKETTE_HEADER.IPI_NUM.PRD_NUM_TAB IN PROCEDURE GC_MAKE_OBJECT_CARD
     15206**DCL     15302>>CALLBLT
DISKETTE_HEADER.UNIQUE_ID IN PROCEDURE GC_MAKE_OBJECT_CARD
     15190**DCL     15323>>ASSIGN
DISKETTE_HEADER.X_OF_N IN PROCEDURE GC_MAKE_OBJECT_CARD
     15209**DCL     15212--REDEF
DISKETTE_HEADER.X_OF_N.N IN PROCEDURE GC_MAKE_OBJECT_CARD
     15211**DCL     15307>>CALLBLT
DISKETTE_HEADER.X_OF_N.X IN PROCEDURE GC_MAKE_OBJECT_CARD
     15210**DCL     15307>>CALLBLT
DISKETTE_READ_BUFFER.DATA_WORD IN PROCEDURE GC_CHECK_FACTORY_TEST
     15088**DCL     15097>>IF      15100<<ASSIGN
DISKETTE_READ_BUFFER.DATA_WORD IN PROCEDURE GC_GET_FILE
     14882**DCL     14980<<ASSIGN
DKEND
     12769**DCL     12782--REDEF
DKEND.BCD
     12770**DCL     12780--REDEF
DKEND.BCD.CONTROL
     12771**DCL     15434<<ASSIGN
DKEND.BCD.DATE
     12776**DCL     15436<<ASSIGN
DKEND.BCD.LBL
     12778**DCL     15438<<ASSIGN
DKEND.BCD.MOD_DATE
     12775**DCL     15437<<ASSIGN
DKEND.BCD.REVISION
     12777**DCL     14085>>ASSIGN  15443<<ASSIGN  15448<<ASSIGN  15453<<CALLBLT
DKEND.BCD.SEQ
     12779**DCL     15444<<ASSIGN  15449<<CALLBLT 15454<<CALLBLT
DKEND.BCD.TYPE
     12772**DCL     15435<<ASSIGN
DKEND.BCD_
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:318  
     12780**DCL     14084<<ASSIGN  15433<<ASSIGN  15459--CALL
DKEND.CHECKSUM
     12781**DCL     15459<>CALL
DKEND_
     12782**DCL     15460>>ASSIGN
DUP.BCD_V.PTR$
     12604**DCL     12673--IMP-PTR 13432>>ASSIGN  13445>>ASSIGN  13830>>ASSIGN  15460>>ASSIGN
DUP.BINARY_V.PTR$
     12599**DCL     12708--IMP-PTR 12824--IMP-PTR 13385>>ASSIGN  14034>>ASSIGN  14036>>ASSIGN  14042>>ASSIGN
     14452>>ASSIGN  14455>>ASSIGN  14456>>ASSIGN  14458>>ASSIGN  14461>>CALL    14461>>CALL    14462>>ASSIGN
     14463>>CALL    14463>>CALL    14464>>ASSIGN  14467>>ASSIGN  14538>>ASSIGN  14541>>ASSIGN  14543>>CALLBLT
     14546>>CALL    14546>>CALL    14547>>ASSIGN  14548>>CALL    14548>>CALL    14549>>ASSIGN  14552>>ASSIGN
     14660>>ASSIGN  14663>>ASSIGN  14665>>CALLBLT 14668>>CALL    14668>>CALL    14669>>ASSIGN  14670>>CALL
     14670>>CALL    14671>>ASSIGN  14674>>ASSIGN  14680>>ASSIGN  14681>>CALL    14762>>ASSIGN  14763>>ASSIGN
     14765>>ASSIGN  14766>>ASSIGN  14767>>ASSIGN  14768>>CALL    14888>>ASSIGN  14891>>ASSIGN  14893>>ASSIGN
     14894>>CALLBLT 14897>>CALL    14897>>CALL    14898>>ASSIGN  14899>>CALL    14899>>CALL    14900>>CALL
     14902>>ASSIGN  14903>>ASSIGN  14904>>ASSIGN  14907>>ASSIGN  14910>>ASSIGN  14911>>CALL    14918>>ASSIGN
     14921>>IF      14921>>IF      14970>>ASSIGN  14971>>ASSIGN  14972>>ASSIGN  14980>>ASSIGN  14984>>ASSIGN
     14984>>ASSIGN  14985>>ASSIGN  14985>>ASSIGN  15021>>IF      15022>>DOSELCT 15095>>IF      15095>>IF
     15099>>ASSIGN  15102>>ASSIGN  15287>>ASSIGN  15288>>ASSIGN  15289>>ASSIGN  15449>>CALLBLT 15452>>ASSIGN
     15454>>CALLBLT
DUP.CPU_TYPE
     12661**DCL     13341>>DOCASE
DUP.IFAD.DRIVE_NUMBER
     12590**DCL     14543>>CALLBLT 14665>>CALLBLT 14894>>CALLBLT
DUP.LOG_V
     12630**DCL     12635--REDEF
DUP.MSG_CODE
     12551**DCL     13576<<ASSIGN  15547<<ASSIGN
ERROR IN PROCEDURE GC_BINARY_CHECKS
     13964**LABEL   13936--CALLALT 13941--CALLALT
ERROR IN PROCEDURE GC_DUMMY_READ
     14780**LABEL   14758--CALLALT 14771--CALLALT 14774--CALLALT
ERROR IN PROCEDURE GC_GET_BCD_CARDS
     13452**LABEL   13430--CALLALT 13436--CALLALT 13443--CALLALT
ERROR IN PROCEDURE GC_GET_BINARY_CARDS
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:319  
     13397**LABEL   13380--CALLALT 13383--CALLALT 13384--CALLALT 13389--CALLALT
ERROR IN PROCEDURE GC_GET_CONFIG
     14477**LABEL   14470--CALLALT 14473--CALLALT
ERROR IN PROCEDURE GC_GET_CP6_OBJECT
     13315**LABEL   13288--CALLALT 13301--CALLALT
ERROR IN PROCEDURE GC_GET_DIRECTORY
     14687**LABEL   14677--CALLALT 14683--CALLALT
ERROR IN PROCEDURE GC_GET_FILE
     14926**LABEL   14914--CALLALT 14917--CALLALT
ERROR IN PROCEDURE GC_GET_HEADER
     14562**LABEL   14555--CALLALT 14558--CALLALT
ERROR IN PROCEDURE GC_GET_PATCH_CARDS
     13582**LABEL   13561--CALLALT 13565--CALLALT
ERROR IN PROCEDURE GC_HEX_CHECKS
     14306**LABEL   14266--CALLALT 14282--CALLALT 14283--CALLALT 14284--CALLALT 14285--CALLALT
ERROR IN PROCEDURE GC_OCTAL_CHECKS
     14189**LABEL   14164--CALLALT 14168--CALLALT
ERROR IN PROCEDURE GC_PATCH_CHECKS
     14113**LABEL   14097--CALLALT 14099--CALLALT
ERROR IN PROCEDURE GC_PROCESS_READ
     14998**LABEL   14965--CALLALT 14993--CALLALT 14994--CALLALT
FACTORY_TEST IN PROCEDURE GC_CHECK_FACTORY_TEST
     15048**DCL     15046--PROC    15093<<ASSIGN  15101<<ASSIGN
FACTORY_TEST IN PROCEDURE GC_DUMMY_READ
     14713**DCL     14769<<ASSIGN  14770>>DOUNTIL 14772<>CALL
FACTORY_TEST IN PROCEDURE GC_GET_CONFIG
     14447**DCL     14468<<ASSIGN  14469>>DOUNTIL 14471<>CALL
FACTORY_TEST IN PROCEDURE GC_GET_DIRECTORY
     14655**DCL     14675<<ASSIGN  14676>>DOUNTIL 14678<>CALL
FACTORY_TEST IN PROCEDURE GC_GET_FILE
     14869**DCL     14912<<ASSIGN  14913>>DOUNTIL 14915<>CALL
FACTORY_TEST IN PROCEDURE GC_GET_HEADER
     14533**DCL     14553<<ASSIGN  14554>>DOUNTIL 14556<>CALL
FIELD_LGTH IN PROCEDURE GC_OCTAL_CHECKS
     14135**DCL     14161<<CALLBLT 14163>>DOWHILE 14168>>CALL
FILE$ IN PROCEDURE GC_MAKE_DKEND_CARD
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:320  
     15349**DCL     15359--IMP-PTR 15452<<ASSIGN  15453>>CALLBLT
FILE$ IN PROCEDURE GC_MAKE_OBJECT_CARD
     15177**DCL     15250--IMP-PTR 15289<<ASSIGN  15316>>ASSIGN
FILER$ IN PROCEDURE GC_GET_FILE
     14870**DCL     14970<<ASSIGN  14973>>ASSIGN
FILE_DATA$ IN PROCEDURE GC_GET_FILE
     14871**DCL     14881--IMP-PTR 14902<<ASSIGN  14980>>ASSIGN  14986<<ASSIGN  14986>>ASSIGN
FILE_EOF
     12986**DCL     13287>>DOWHILE 13554>>DOWHILE 13567<<ASSIGN  13574<<ASSIGN
FIRST_READ IN PROCEDURE GC_GET_FILE
     14867**DCL     14905<<ASSIGN  14968>>IF      14974<<ASSIGN
FOUND IN PROCEDURE GC_CONVERT_BINARY_CARD
     13880**DCL     13890<<ASSIGN  13891>>DOWHILE 13893<<ASSIGN  13896>>IF      13907<<ASSIGN  13908>>DOWHILE
     13910<<ASSIGN  13913>>IF
GC_ADDR
     15127**PROC    14461--CALL    14463--CALL    14546--CALL    14548--CALL    14668--CALL    14670--CALL
     14768--CALL    14897--CALL    14899--CALL    14911--CALL
GC_BINARY_CHECKS
     13926**PROC    13384--CALL
GC_CHECK_APPLICABILITY IN PROCEDURE GC_GET_CP6_OBJECT
     13334**PROC    13295--CALL
GC_CHECK_FACTORY_TEST
     15046**PROC    14471--CALL    14556--CALL    14678--CALL    14772--CALL    14915--CALL
GC_CHECK_FOR_NORM_STATUS
     15015**PROC    14758--CALL    14774--CALL    14965--CALL    14994--CALL
GC_CONVERT_8_TO_9
     15483**PROC    14681--CALL    14900--CALL
GC_CONVERT_8_TO_9_NO
     15522**PROC    14966--CALL
GC_CONVERT_BCD_CARD
     13837**PROC    13291--CALL    13427--CALL    13437--CALL
GC_CONVERT_BINARY_CARD
     13878**PROC    13383--CALL
GC_DKEND_CHECKS
     14344**PROC    13443--CALL
GC_DUMMY_READ
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:321  
     14710**PROC    14473--CALL    14558--CALL    14683--CALL    14993--CALL
GC_ERR_MSG
     15541**PROC    13395--CALL    13450--CALL    13862--CALL    13867--CALL    13871--CALL    13899--CALL
     13916--CALL    13945--CALL    13950--CALL    13955--CALL    13962--CALL    13985--CALL    14101--CALL
     14104--CALL    14111--CALL    14144--CALL    14174--CALL    14180--CALL    14187--CALL    14212--CALL
     14219--CALL    14223--CALL    14262--CALL    14270--CALL    14278--CALL    14290--CALL    14297--CALL
     14304--CALL    14324--CALL    14334--CALL    14355--CALL    14365--CALL    14371--CALL    14375--CALL
GC_FORM_HEX_CARD IN PROCEDURE GC_GET_PATCH_CARDS
     13592**PROC    13559--CALL
GC_FORM_OCTAL_CARD IN PROCEDURE GC_GET_PATCH_CARDS
     13710**PROC    13563--CALL
GC_GET_BCD_CARDS
     13422**PROC    13109--CALL
GC_GET_BINARY_CARDS
     13376**PROC    13095--CALL
GC_GET_CONFIG
     14381**PROC    13137--CALL
GC_GET_CP6_OBJECT
     13278**PROC    13081--CALL
GC_GET_DIRECTORY
     14589**PROC    13165--CALL
GC_GET_FILE
     14807**PROC    13179--CALL
GC_GET_HEADER
     14503**PROC    13151--CALL
GC_GET_PATCH_CARDS
     13472**PROC    13123--CALL
GC_HEX_CHECKS IN PROCEDURE GC_PATCH_CHECKS
     14231**PROC    14099--CALL
GC_MAKE_DKEND_CARD
     15347**PROC    13207--CALL
GC_MAKE_OBJECT_CARD
     15172**PROC    13193--CALL    13221--CALL    13235--CALL
GC_OBJECT_CHECKS
     13849**PROC    13301--CALL
GC_OCTAL_CHECKS IN PROCEDURE GC_PATCH_CHECKS
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:322  
     14118**PROC    14097--CALL
GC_PATCH_CHECKS
     14091**PROC    13430--CALL    13561--CALL    13565--CALL
GC_PREFACE_CHECKS IN PROCEDURE GC_BINARY_CHECKS
     13969**PROC    13941--CALL
GC_PROCESS_READ IN PROCEDURE GC_GET_FILE
     14960**PROC    14917--CALL
GC_SET_FROM_BINARY_CARDS IN PROCEDURE GC_SET_ID_BLOCK
     14008**PROC    14000--CALL
GC_SET_FROM_DKEND IN PROCEDURE GC_SET_ID_BLOCK
     14080**PROC    14002--CALL
GC_SET_ID_BLOCK
     13993**PROC    13429--CALL    13442--CALL
GC_STORE_PATCH_CARD IN PROCEDURE GC_GET_PATCH_CARDS
     13823**PROC    13560--CALL    13564--CALL
GC_VERIFY_VALUE IN PROCEDURE GC_HEX_CHECKS
     14312**PROC    14266--CALL    14282--CALL    14283--CALL    14284--CALL    14285--CALL
GC_VERIFY_VALUE IN PROCEDURE GC_OCTAL_CHECKS
     14195**PROC    14164--CALL    14168--CALL
HDR$ IN PROCEDURE GC_CHECK_FACTORY_TEST
     15049**DCL     15059--IMP-PTR 15099<<ASSIGN  15103>>ASSIGN
HDR$ IN PROCEDURE GC_DUMMY_READ
     14714**DCL     14724--IMP-PTR 14762<<ASSIGN  14764>>ASSIGN
HDR$ IN PROCEDURE GC_GET_CONFIG
     14383**DCL     14393--IMP-PTR 14420--IMP-PTR 14452<<ASSIGN  14453>>ASSIGN  14454>>ASSIGN  14457>>ASSIGN
     14467<<ASSIGN  14471<>CALL
HDR$ IN PROCEDURE GC_GET_DIRECTORY
     14591**DCL     14601--IMP-PTR 14628--IMP-PTR 14660<<ASSIGN  14661>>ASSIGN  14662>>ASSIGN  14664>>ASSIGN
     14674<<ASSIGN  14678<>CALL    14680<<ASSIGN  14681>>CALL
HDR$ IN PROCEDURE GC_GET_FILE
     14809**DCL     14819--IMP-PTR 14888<<ASSIGN  14889>>ASSIGN  14890>>ASSIGN  14892>>ASSIGN  14907<<ASSIGN
     14911<>CALL    14915<>CALL    14918<<ASSIGN  14966>>CALL    14977>>ASSIGN  14987>>ASSIGN
HDR$ IN PROCEDURE GC_GET_HEADER
     14505**DCL     14515--IMP-PTR 14538<<ASSIGN  14539>>ASSIGN  14540>>ASSIGN  14542>>ASSIGN  14552<<ASSIGN
     14556<>CALL
HDR$ IN PROCEDURE GC_MAKE_DKEND_CARD
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:323  
     15392**DCL     15402--IMP-PTR 15436>>ASSIGN  15437>>ASSIGN
HDR$ IN PROCEDURE GC_MAKE_OBJECT_CARD
     15175**DCL     15187--IMP-PTR 15287<<ASSIGN  15298>>CALLBLT 15302>>CALLBLT 15307>>CALLBLT 15307>>CALLBLT
     15323>>ASSIGN
HDR_BLK.DEFINER IN PROCEDURE GC_CHECK_FACTORY_TEST
     15061**DCL     15103<<ASSIGN
HDR_BLK.DEFINER IN PROCEDURE GC_DUMMY_READ
     14726**DCL     14764<<ASSIGN
HDR_BLK.DEFINER IN PROCEDURE GC_GET_CONFIG
     14395**DCL     14453<<ASSIGN
HDR_BLK.IO_PARAM_BLK.DEST_LEN IN PROCEDURE GC_GET_CONFIG
     14409**DCL     14457<<ASSIGN
HDR_BLK.RD_FLPY IN PROCEDURE GC_GET_CONFIG
     14398**DCL     14454<<ASSIGN
HDR_BLK.DEFINER IN PROCEDURE GC_GET_DIRECTORY
     14603**DCL     14661<<ASSIGN
HDR_BLK.IO_PARAM_BLK.DEST_LEN IN PROCEDURE GC_GET_DIRECTORY
     14617**DCL     14664<<ASSIGN
HDR_BLK.RD_FLPY IN PROCEDURE GC_GET_DIRECTORY
     14606**DCL     14662<<ASSIGN
HDR_BLK IN PROCEDURE GC_GET_FILE
     14819**DCL     14977<<ASSIGN  14987>>ASSIGN
HDR_BLK.DEFINER IN PROCEDURE GC_GET_FILE
     14821**DCL     14889<<ASSIGN  14973<<ASSIGN
HDR_BLK.IO_PARAM_BLK.DEST_LEN IN PROCEDURE GC_GET_FILE
     14835**DCL     14892<<ASSIGN
HDR_BLK.IO_PARAM_BLK.SOURCE_LEN IN PROCEDURE GC_GET_FILE
     14832**DCL     14966>>CALL
HDR_BLK.RD_FLPY IN PROCEDURE GC_GET_FILE
     14824**DCL     14890<<ASSIGN
HDR_BLK.DEFINER IN PROCEDURE GC_GET_HEADER
     14517**DCL     14539<<ASSIGN
HDR_BLK.IO_PARAM_BLK.DEST_LEN IN PROCEDURE GC_GET_HEADER
     14531**DCL     14542<<ASSIGN
HDR_BLK.RD_FLPY IN PROCEDURE GC_GET_HEADER
     14520**DCL     14540<<ASSIGN
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:324  
HEX_CARD.BCD IN PROCEDURE GC_HEX_CHECKS
     14234**DCL     14250--REDEF
HEX_CARD.BCD.ADDRESS IN PROCEDURE GC_HEX_CHECKS
     14235**DCL     14266<>CALL    14267>>CALLBLT
HEX_CARD.BCD.HEX_TYPE IN PROCEDURE GC_HEX_CHECKS
     14237**DCL     14275>>IF
HEX_CARD.BCD.INSTR1 IN PROCEDURE GC_HEX_CHECKS
     14239**DCL     14282<>CALL
HEX_CARD.BCD.INSTR2 IN PROCEDURE GC_HEX_CHECKS
     14240**DCL     14268>>IF      14283<>CALL
HEX_CARD.BCD.LABEL IN PROCEDURE GC_HEX_CHECKS
     14248**DCL     14301>>IF
HEX_CARD.BCD.ORIG1 IN PROCEDURE GC_HEX_CHECKS
     14241**DCL     14284<>CALL
HEX_CARD.BCD.ORIG2 IN PROCEDURE GC_HEX_CHECKS
     14242**DCL     14285<>CALL
HEX_CARD.BCD.REVERSED IN PROCEDURE GC_HEX_CHECKS
     14243**DCL     14287>>IF      14287>>IF
HEX_CARD.BCD.REVISION IN PROCEDURE GC_HEX_CHECKS
     14247**DCL     14294>>IF
HEX_CARD.BCD.TYPE IN PROCEDURE GC_HEX_CHECKS
     14238**DCL     14275>>IF
HEX_CARD.BCD_ IN PROCEDURE GC_HEX_CHECKS
     14250**DCL     14257<<ASSIGN
HOST_DATA IN PROCEDURE GC_CONVERT_8_TO_9
     15491**DCL     15483--PROC
HOST_DATA.FILLER IN PROCEDURE GC_CONVERT_8_TO_9
     15492**DCL     15500<<ASSIGN
HOST_DATA.LOWER IN PROCEDURE GC_CONVERT_8_TO_9
     15494**DCL     15499<<ASSIGN
HOST_DATA.UPPER IN PROCEDURE GC_CONVERT_8_TO_9
     15493**DCL     15498<<ASSIGN
HOST_DATA IN PROCEDURE GC_CONVERT_8_TO_9_NO
     15528**DCL     15522--PROC    15535<<ASSIGN
HOST_DATA.UPPER IN PROCEDURE GC_CONVERT_8_TO_9_NO
     15530**DCL     15536<<ASSIGN  15536>>ASSIGN
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:325  
I IN PROCEDURE GC_OCTAL_CHECKS
     14120**DCL     14141<<DOINDEX 14142>>IF      14142>>IF      14151<<DOINDEX 14152>>CALLBLT
I IN PROCEDURE GC_PROCESS_READ
     14963**DCL     14979<<DOINDEX 14980>>ASSIGN  14980>>ASSIGN
I IN PROCEDURE GC_VERIFY_VALUE
     14316**DCL     14327<<DOINDEX 14328>>DOSELCT
ID
     12793**DCL     12801--REDEF
ID.REVISION
     12795**DCL     12796--REDEF   14085<<ASSIGN  14177>>IF      14294>>IF
ID_
     12801**DCL     14072<<ASSIGN
ID_BLOCK_SET
     13052**DCL     13859<<ASSIGN  13998>>IF      14075<<ASSIGN
ID_DATA_ IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14019**DCL     14072>>ASSIGN
ID_LOC IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14010**DCL     14035<<ASSIGN  14048>>DOWHILE 14054>>IF      14056>>ASSIGN  14057>>ASSIGN  14060>>ASSIGN
ID_RECORD IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14017**DCL     14019--REDEF   14031<<ASSIGN  14062<<ASSIGN
ID_RECORDS IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14011**DCL     14015--REDEF
ID_RECORDS.FIRST IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14012**DCL     14038<<CALLBLT
ID_RECORDS.SECOND IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14013**DCL     14044<<CALLBLT
ID_RECORDS_ IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14015**DCL     14050>>ASSIGN  14062>>ASSIGN  14065>>IF      14068>>ASSIGN
ITEM$ IN PROCEDURE GC_ADDR
     15129**DCL     15127--PROC
ITEM$.ADDRESS IN PROCEDURE GC_ADDR
     15130**DCL     15136>>ASSIGN
L IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14027**DCL     14061<<DOINDEX 14062>>ASSIGN  14062>>ASSIGN
LAST.EDIT_NAME
     12813**DCL     15305>>ASSIGN
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:326  
LOAD IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14020**DCL     14033<<ASSIGN  14050<<ASSIGN  14053>>DOWHILE 14068<<ASSIGN
LOAD.ADDRESS IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14025**DCL     14048>>DOWHILE 14054>>IF      14056>>ASSIGN  14057>>ASSIGN  14060>>ASSIGN
LOAD.SIZE IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14024**DCL     14048>>DOWHILE 14049>>ASSIGN  14057<<ASSIGN  14057>>ASSIGN  14061>>DOINDEX 14064>>ASSIGN
LOAD_INX IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14026**DCL     14032<<ASSIGN  14049<<ASSIGN  14049>>ASSIGN  14050>>ASSIGN  14056<<ASSIGN  14056>>ASSIGN
     14062>>ASSIGN  14064<<ASSIGN  14064>>ASSIGN  14065>>IF      14065>>IF      14066<<ASSIGN  14066>>ASSIGN
     14068>>ASSIGN
M$DO
     13060**DCL     13578<>CALL    13579<>CALL
M$IFAD
     13059**DCL     13553<>CALL
M$SI
     13058**DCL     13582<>CALL    13587<>CALL
MCA_B.COMMAND
     12834**DCL     14461--CALL    14546--CALL    14668--CALL    14897--CALL
MCA_B.COMMAND.DATA
     12836**DCL     14458<<ASSIGN  14543<<CALLBLT 14665<<CALLBLT 14894<<CALLBLT
MCA_B.COMMAND.HDR_BLK
     12835**DCL     14452--ASSIGN  14538--ASSIGN  14660--ASSIGN  14762--ASSIGN  14888--ASSIGN  14970--ASSIGN
     15099--ASSIGN
MCA_B.CONFIG
     12877**DCL     14463--CALL    14467--ASSIGN
MCA_B.CONFIG.DATA
     12879**DCL     12880--REDEF
MCA_B.DCW_LIST.DCW1.ADDRESS
     12828**DCL     14461<>CALL    14546<>CALL    14668<>CALL    14897<>CALL
MCA_B.DCW_LIST.DCW1.COUNT
     12829**DCL     14462<<ASSIGN  14547<<ASSIGN  14669<<ASSIGN  14765<<ASSIGN  14898<<ASSIGN  14971<<ASSIGN
MCA_B.DCW_LIST.DCW2.ADDRESS
     12832**DCL     14463<>CALL    14548<>CALL    14670<>CALL    14768<>CALL    14899<>CALL    14911<>CALL
MCA_B.DCW_LIST.DCW2.COUNT
     12833**DCL     14464<<ASSIGN  14549<<ASSIGN  14671<<ASSIGN  14766<<ASSIGN  14910<<ASSIGN
MCA_B.DCW_LIST.IDCW1
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:327  
     12826**DCL     14455<<ASSIGN  14541<<ASSIGN  14663<<ASSIGN  14763<<ASSIGN  14891<<ASSIGN  14972<<ASSIGN
     15102<<ASSIGN
MCA_B.DCW_LIST.IDCW2
     12830**DCL     14456<<ASSIGN
MCA_B.DIRECTORY
     12858**DCL     14670--CALL    14674--ASSIGN
MCA_B.DIRECTORY.CURRENT
     12863**DCL     14893--ASSIGN  15288--ASSIGN
MCA_B.DIRECTORY.SIZE
     12862**DCL     14681<>CALL    15449>>CALLBLT
MCA_B.DISKETTE_HEADER
     12855**DCL     14548--CALL    14552--ASSIGN
MCA_B.DISKETTE_HEADER.DATA
     12857**DCL     14680--ASSIGN  15287--ASSIGN
MCA_B.DUMMY_BUFFER
     12873**DCL     14767--ASSIGN  14918--ASSIGN
MCA_B.DUMMY_BUFFER.DATA_WORDS
     12875**DCL     14980>>ASSIGN
MCA_B.FILE
     12864**DCL     14899--CALL    14907--ASSIGN
MCA_B.FILE.BYTES_READ
     12872**DCL     14903<<ASSIGN  14921>>IF      14984<<ASSIGN  14984>>ASSIGN  14985>>ASSIGN
MCA_B.FILE.DATA
     12866**DCL     14902--ASSIGN  15289--ASSIGN  15452--ASSIGN
MCA_B.FILE.SIZE
     12871**DCL     14900<>CALL    14904>>ASSIGN  14921>>IF      14985>>ASSIGN  15454>>CALLBLT
MCA_B.STATUS.MAJOR
     12840**DCL     15021>>IF      15095>>IF
MCA_B.STATUS.SUB.VALUE
     12843**DCL     15022>>DOSELCT 15095>>IF
MCA_DATA IN PROCEDURE GC_CONVERT_8_TO_9
     15485**DCL     15483--PROC
MCA_DATA.LOWER IN PROCEDURE GC_CONVERT_8_TO_9
     15490**DCL     15498>>ASSIGN
MCA_DATA.UPPER IN PROCEDURE GC_CONVERT_8_TO_9
     15488**DCL     15499>>ASSIGN
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:328  
MCA_DATA IN PROCEDURE GC_CONVERT_8_TO_9_NO
     15524**DCL     15522--PROC    15535>>ASSIGN
MSG_CODE IN PROCEDURE GC_ERR_MSG
     15543**DCL     15541--PROC    15547>>ASSIGN
NO_BLANKS IN PROCEDURE GC_HEX_CHECKS
     14253**DCL     14266<>CALL
OBJECT.BCD
     12895**DCL     12917--REDEF   12940--REDEF
OBJECT.BCD.ASSEMBLER
     12912**DCL     13856>>DOSELCT 13980>>IF      14259>>IF
OBJECT.BCD.CONTROL
     12896**DCL     13853>>IF
OBJECT.BCD.DATE
     12914**DCL     14171>>IF
OBJECT.BCD.DONT_APPLY.CP6
     12903**DCL     13340>>IF
OBJECT.BCD.DONT_APPLY.DPS8000
     12906**DCL     13347>>IF
OBJECT.BCD.DONT_APPLY.DPS90
     12905**DCL     13343>>IF
OBJECT.BCD.LBL
     12915**DCL     13930>>IF      14184>>IF      14301>>IF      14349>>IF      15438>>ASSIGN
OBJECT.BCD.LIBRARY
     12898**DCL     13997>>IF      14170>>IF
OBJECT.BCD.LOAD_TYPE
     12899**DCL     13978>>IF
OBJECT.BCD.SEQ
     12916**DCL     13854>>IF
OBJECT.BCD_
     12940**DCL     13294<<ASSIGN  15292<<ASSIGN
OBJECT.DECK_CHECKSUM
     12945**DCL     13299<<ASSIGN  13387<>CALL    13387<>CALL    13434<>CALL    13434<>CALL
OBJECT.LOAD_SIZE
     12944**DCL     13300<<ASSIGN  13979<<ASSIGN  13981<<ASSIGN  13982<<ASSIGN  14155>>IF      14156<<ASSIGN
OBJECT.NIO_BCD.ASSEMBLER
     12934**DCL     15301<<ASSIGN
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:329  
OBJECT.NIO_BCD.CLASS
     12922**DCL     15314<<ASSIGN  15318<<ASSIGN  15322<<ASSIGN  15441>>DOSELCT
OBJECT.NIO_BCD.CONTROL
     12918**DCL     15293<<ASSIGN
OBJECT.NIO_BCD.DATA
     12924**DCL     15297<<ASSIGN
OBJECT.NIO_BCD.EQUIP_TYPE
     12926**DCL     15298<<CALLBLT
OBJECT.NIO_BCD.FILE_NAME
     12927**DCL     15315<<ASSIGN  15319<<ASSIGN  15323<<ASSIGN  15446>>IF
OBJECT.NIO_BCD.LBL
     12938**DCL     15305<<ASSIGN
OBJECT.NIO_BCD.LIBRARY
     12920**DCL     15295<<ASSIGN
OBJECT.NIO_BCD.LOAD_TYPE
     12921**DCL     15296<<ASSIGN
OBJECT.NIO_BCD.PRD_NUM_TAB
     12935**DCL     15302<<CALLBLT
OBJECT.NIO_BCD.PRG_NUM_TAB
     12936**DCL     15316<<ASSIGN  15320<<ASSIGN  15324<<ASSIGN
OBJECT.NIO_BCD.SEQ
     12939**DCL     15306<<ASSIGN
OBJECT.NIO_BCD.TYPE
     12919**DCL     15294<<ASSIGN
OBJECT.NIO_BCD.X_OF_N
     12928**DCL     12933--REDEF
OBJECT.NIO_BCD.X_OF_N_
     12933**DCL     15307<<CALLBLT
OBJECT_FOUND IN PROCEDURE GC_GET_CP6_OBJECT
     13280**DCL     13286<<ASSIGN  13287>>DOWHILE 13298<<ASSIGN  13309<<ASSIGN
OCTAL_CARD.BCD IN PROCEDURE GC_OCTAL_CHECKS
     14122**DCL     14132--REDEF
OCTAL_CARD.BCD.ADDRESS IN PROCEDURE GC_OCTAL_CHECKS
     14123**DCL     14124--REDEF
OCTAL_CARD.BCD.ADDRESS_ IN PROCEDURE GC_OCTAL_CHECKS
     14124**DCL     14142>>IF      14142>>IF      14152>>CALLBLT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:330  
OCTAL_CARD.BCD.FIELD IN PROCEDURE GC_OCTAL_CHECKS
     14127**DCL     14128--REDEF   14161>>CALLBLT 14162>>CALLBLT 14166>>CALLBLT
OCTAL_CARD.BCD.FIELD_ IN PROCEDURE GC_OCTAL_CHECKS
     14128**DCL     14204>>IF      14206>>IF      14209>>IF      14209>>IF
OCTAL_CARD.BCD.LABEL IN PROCEDURE GC_OCTAL_CHECKS
     14130**DCL     14184>>IF
OCTAL_CARD.BCD.REVISION IN PROCEDURE GC_OCTAL_CHECKS
     14129**DCL     14171>>IF      14177>>IF
OCTAL_CARD.BCD_ IN PROCEDURE GC_OCTAL_CHECKS
     14132**DCL     14139<<ASSIGN
OUT$BLK.CODE IN PROCEDURE GC_FORM_HEX_CARD
     13610**DCL     13684>>DOCASE
OUT$BLK.NSUBLKS IN PROCEDURE GC_FORM_HEX_CARD
     13614**DCL     13682>>DOINDEX
OUT$BLK.SUBLK$ IN PROCEDURE GC_FORM_HEX_CARD
     13635**DCL     13683>>ASSIGN
OUT$BLK.CODE IN PROCEDURE GC_FORM_OCTAL_CARD
     13728**DCL     13804>>DOCASE
OUT$BLK.NSUBLKS IN PROCEDURE GC_FORM_OCTAL_CARD
     13732**DCL     13802>>DOINDEX
OUT$BLK.SUBLK$ IN PROCEDURE GC_FORM_OCTAL_CARD
     13753**DCL     13803>>ASSIGN
OUT$BLK.CODE IN PROCEDURE GC_GET_PATCH_CARDS
     13508**DCL     13557>>DOCASE
OUT$SYM.COUNT IN PROCEDURE GC_FORM_HEX_CARD
     13671**DCL     13674--IMP-SIZ 13686>>CALLBLT 13686>>CALLBLT 13686>>CALLBLT 13694>>ASSIGN  13696>>ASSIGN
     13698>>ASSIGN  13700>>ASSIGN  13702>>ASSIGN  13704>>ASSIGN
OUT$SYM.TEXT IN PROCEDURE GC_FORM_HEX_CARD
     13674**DCL     13686>>CALLBLT 13694>>ASSIGN  13696>>ASSIGN  13698>>ASSIGN  13700>>ASSIGN  13702>>ASSIGN
     13704>>ASSIGN
OUT$SYM.COUNT IN PROCEDURE GC_FORM_OCTAL_CARD
     13789**DCL     13792--IMP-SIZ 13806>>CALLBLT 13806>>CALLBLT 13806>>CALLBLT 13810>>ASSIGN  13812>>ASSIGN
     13814>>ASSIGN  13816>>ASSIGN
OUT$SYM.TEXT IN PROCEDURE GC_FORM_OCTAL_CARD
     13792**DCL     13806>>CALLBLT 13810>>ASSIGN  13812>>ASSIGN  13814>>ASSIGN  13816>>ASSIGN
OUTBLK# IN PROCEDURE GC_FORM_HEX_CARD
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:331  
     13594**DCL     13682<<DOINDEX 13683>>ASSIGN
OUTBLK# IN PROCEDURE GC_FORM_OCTAL_CARD
     13712**DCL     13802<<DOINDEX 13803>>ASSIGN
OUTBLK$ IN PROCEDURE GC_FORM_HEX_CARD
     13595**DCL     13648--IMP-PTR 13683<<ASSIGN  13684>>DOCASE  13686>>CALLBLT 13686>>CALLBLT 13686>>CALLBLT
     13686>>CALLBLT 13694>>ASSIGN  13694>>ASSIGN  13696>>ASSIGN  13696>>ASSIGN  13698>>ASSIGN  13698>>ASSIGN
     13700>>ASSIGN  13700>>ASSIGN  13702>>ASSIGN  13702>>ASSIGN  13704>>ASSIGN  13704>>ASSIGN
OUTBLK$ IN PROCEDURE GC_FORM_OCTAL_CARD
     13713**DCL     13766--IMP-PTR 13803<<ASSIGN  13804>>DOCASE  13806>>CALLBLT 13806>>CALLBLT 13806>>CALLBLT
     13806>>CALLBLT 13810>>ASSIGN  13810>>ASSIGN  13812>>ASSIGN  13812>>ASSIGN  13814>>ASSIGN  13814>>ASSIGN
     13816>>ASSIGN  13816>>ASSIGN
PATCH$ IN PROCEDURE GC_GET_PATCH_CARDS
     13474**DCL     13555<>CALL    13557>>DOCASE  13580<>CALL    13682>>DOINDEX 13683>>ASSIGN  13802>>DOINDEX
     13803>>ASSIGN
PATCH_CARD.BCD IN PROCEDURE GC_GET_PATCH_CARDS
     13478**DCL     13492--REDEF
PATCH_CARD.BCD.ADDRESS IN PROCEDURE GC_GET_PATCH_CARDS
     13479**DCL     13686<<CALLBLT 13806<<CALLBLT
PATCH_CARD.BCD.CS_RW IN PROCEDURE GC_GET_PATCH_CARDS
     13480**DCL     13690<<ASSIGN  13692<<ASSIGN
PATCH_CARD.BCD.HEX_.INSTR1 IN PROCEDURE GC_GET_PATCH_CARDS
     13484**DCL     13694<<ASSIGN
PATCH_CARD.BCD.HEX_.INSTR2 IN PROCEDURE GC_GET_PATCH_CARDS
     13485**DCL     13696<<ASSIGN
PATCH_CARD.BCD.OCTAL_ IN PROCEDURE GC_GET_PATCH_CARDS
     13482**DCL     13483--REDEF   13698<<ASSIGN  13810<<ASSIGN
PATCH_CARD.BCD.REVLBL IN PROCEDURE GC_GET_PATCH_CARDS
     13487**DCL     13490--REDEF
PATCH_CARD.BCD.REVLBL.LABEL IN PROCEDURE GC_GET_PATCH_CARDS
     13489**DCL     13702<<ASSIGN  13814<<ASSIGN
PATCH_CARD.BCD.REVLBL.REVISION IN PROCEDURE GC_GET_PATCH_CARDS
     13488**DCL     13700<<ASSIGN  13812<<ASSIGN
PATCH_CARD.BCD.REVLBL_ IN PROCEDURE GC_GET_PATCH_CARDS
     13490**DCL     13704<<ASSIGN  13816<<ASSIGN
PATCH_CARD.BCD.TYPE IN PROCEDURE GC_GET_PATCH_CARDS
     13481**DCL     13681<<ASSIGN  13801<<ASSIGN
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:332  
PATCH_CARD.BCD_ IN PROCEDURE GC_GET_PATCH_CARDS
     13492**DCL     13680<<ASSIGN  13800<<ASSIGN  13827>>ASSIGN
PATCH_ROOT_NODE IN PROCEDURE GC_GET_PATCH_CARDS
     13476**DCL     13555<>CALL
POS# IN PROCEDURE GC_OCTAL_CHECKS
     14134**DCL     14152<<CALLBLT 14153>>ASSIGN  14162<<CALLBLT 14163>>DOWHILE 14164>>CALL    14165>>ASSIGN
     14166<<CALLBLT
PREFACE.ENTRY_.TYPE
     12758**DCL     13975>>IF
PREFACE.WD1.SIZE
     12747**DCL     13979>>ASSIGN  13981>>ASSIGN  13982>>ASSIGN  14035>>ASSIGN
PREFACE.WD1.WOREAD_COUNT
     12746**DCL     13975>>IF
PREFACE_FOUND
     13053**DCL     13858<<ASSIGN  13973>>IF      13977<<ASSIGN
READ_COMPLETE IN PROCEDURE GC_CHECK_FOR_NORM_STATUS
     15017**DCL     15015--PROC    15024<<ASSIGN  15026<<ASSIGN
READ_COMPLETE IN PROCEDURE GC_DUMMY_READ
     14712**DCL     14758<>CALL    14759>>IF      14774<>CALL    14775>>IF
READ_COMPLETE IN PROCEDURE GC_GET_FILE
     14868**DCL     14906<<ASSIGN  14909>>DOUNTIL 14965<>CALL    14990>>IF      14994<>CALL
RECORD.BCD
     12960**DCL     12964--REDEF   12973--REDEF
RECORD.BCD.DATA
     12961**DCL     13842>>ASSIGN
RECORD.BINARY.DATA.BINARY
     12966**DCL     12967--REDEF   13885>>ASSIGN
RECORD.BINARY.DATA.CS.CHECKSUM
     12969**DCL     13936<>CALL
RECORD.BINARY.DATA.CS.DATA
     12970**DCL     13936--CALL
RECORD.BINARY.DATA.CS.WD1
     12968**DCL     13936<>CALL
RECORD.BINARY.DATA.LBL_SEQ
     12971**DCL     13892>>IF      13909>>IF
RECORD.SIZE
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:333  
     12958**DCL     13289>>DOCASE  13382>>DOWHILE 13428>>DOWHILE
SAVE_8_UNDER_HDR IN PROCEDURE GC_GET_FILE
     14865**DCL     14977>>ASSIGN  14987<<ASSIGN
SEQ
     13054**DCL     13860<<ASSIGN  13932<<ASSIGN  13932>>ASSIGN  13934>>IF      14360<<ASSIGN  14360>>ASSIGN
     14362>>IF
START# IN PROCEDURE GC_VERIFY_VALUE
     14197**DCL     14195--PROC    14201>>IF      14202>>IF      14204>>IF      14205<<ASSIGN  14205>>ASSIGN
     14208>>DOINDEX
STOP# IN PROCEDURE GC_VERIFY_VALUE
     14198**DCL     14195--PROC    14201>>IF      14202>>IF      14206>>IF      14207<<ASSIGN  14207>>ASSIGN
     14208>>DOINDEX
TABLE_INX IN PROCEDURE GC_CONVERT_BINARY_CARD
     13881**DCL     13889<<ASSIGN  13891>>DOWHILE 13892>>IF      13894<<ASSIGN  13894>>ASSIGN  13897>>ASSIGN
     13906<<ASSIGN  13908>>DOWHILE 13909>>IF      13911<<ASSIGN  13911>>ASSIGN  13914>>ASSIGN
TARGET IN PROCEDURE GC_ADDR
     15132**DCL     15127--PROC    15136<<ASSIGN
TOU$CHECKSUM
     13069**DCL-ENT 13387--CALL    13431--CALL    13434--CALL    13444--CALL    13828--CALL    15459--CALL
TOU$CHECK_CARD_CHECKSUM
     13065**DCL-ENT 13936--CALL
TOU$CLEAR_BLOCK
     13067**DCL-ENT 13303--CALL    13305--CALL    13307--CALL
TOU$DEBLOCKER
     13066**DCL-ENT 13288--CALL    13380--CALL    13389--CALL    13436--CALL
TOU$DU_USER_WRITE
     13064**DCL-ENT 13577--CALL    15548--CALL
TOU$GC_ALTRETURN
     13249**LABEL   13081--CALLALT 13095--CALLALT 13109--CALLALT 13123--CALLALT 13137--CALLALT 13151--CALLALT
     13165--CALLALT 13179--CALLALT
TOU$READ_MCA_DATA
     13068**DCL-ENT 14470--CALL    14555--CALL    14677--CALL    14771--CALL    14914--CALL
TYPE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15174**DCL     15172--PROC    15312>>DOSELCT
VALUE IN PROCEDURE GC_VERIFY_VALUE
     14314**DCL     14312--PROC    14320>>IF      14328>>DOSELCT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:334  
VAL_INX IN PROCEDURE GC_VERIFY_VALUE
     14199**DCL     14208<<DOINDEX 14209>>IF      14209>>IF
XUR$ECHOLAST
     12500**DCL-ENT 13578--CALL
XUR$ERRMSG
     12501**DCL-ENT 13580--CALL
XUR$ERRPTR
     12494**DCL-ENT 13579--CALL
XUR$GETCMD
     12493**DCL-ENT 13555--CALL
XUR$SETDCBS
     12497**DCL-ENT 13553--CALL    13582--CALL    13587--CALL
ZEROES IN PROCEDURE GC_GET_PATCH_CARDS
     13493**DCL     13686>>CALLBLT 13806>>CALLBLT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:335  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:336  
              FULL UREF LISTING

B$ALT IN PROCEDURE GC_GET_PATCH_CARDS
     13544**DCL
B$ALT.BRKCNT IN PROCEDURE GC_GET_PATCH_CARDS
     13545**DCL
B$ALT.DCB# IN PROCEDURE GC_GET_PATCH_CARDS
     13545**DCL
B$ALT.ERR IN PROCEDURE GC_GET_PATCH_CARDS
     13545**DCL
B$ALT.ERR.CODE IN PROCEDURE GC_GET_PATCH_CARDS
     13546**DCL
B$ALT.ERR.FCG IN PROCEDURE GC_GET_PATCH_CARDS
     13546**DCL
B$ALT.ERR.MID IN PROCEDURE GC_GET_PATCH_CARDS
     13546**DCL
B$ALT.ERR.MON IN PROCEDURE GC_GET_PATCH_CARDS
     13546**DCL
B$ALT.ERR.SEV IN PROCEDURE GC_GET_PATCH_CARDS
     13546**DCL
B$ALT.EVSC IN PROCEDURE GC_GET_PATCH_CARDS
     13545**DCL
B$ALT.FPT IN PROCEDURE GC_GET_PATCH_CARDS
     13544**DCL
B$ALT.FPT.FCG IN PROCEDURE GC_GET_PATCH_CARDS
     13544**DCL
B$ALT.FPT.PMME IN PROCEDURE GC_GET_PATCH_CARDS
     13544**DCL
B$ALT.P# IN PROCEDURE GC_GET_PATCH_CARDS
     13548**DCL
B$ALT.SSFRAME IN PROCEDURE GC_GET_PATCH_CARDS
     13544**DCL
B$ALT.SUBC IN PROCEDURE GC_GET_PATCH_CARDS
     13545**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:337  
B$TCB IN PROCEDURE GC_GET_PATCH_CARDS
     13540**DCL
B$TCB.CURRSZ IN PROCEDURE GC_GET_PATCH_CARDS
     13540**DCL
B$TCB.STK$ IN PROCEDURE GC_GET_PATCH_CARDS
     13540**DCL
B$TCB.TCBAVSZ IN PROCEDURE GC_GET_PATCH_CARDS
     13540**DCL
BCD_ARRAY
     12696**DCL
BCD_CARD.BCD.DATA
     12689**DCL
BINARY_B.LBL
     12710**DCL
BINARY_B.OBJ
     12709**DCL
BINARY_B.SEQ
     12711**DCL
BINARY_CARD.LABEL_
     12735**DCL
BINARY_CARD.RELOCATION
     12731**DCL
BINARY_CARD.WD1.ADDRESS
     12728**DCL
BINARY_CARD.WD1.SIZE
     12727**DCL
DIRECTORY_ENTRY IN PROCEDURE GC_GET_FILE
     14847**DCL
DIRECTORY_ENTRY.ATTRIBUTES IN PROCEDURE GC_GET_FILE
     14859**DCL
DIRECTORY_ENTRY.ATTRIBUTES.LSB IN PROCEDURE GC_GET_FILE
     14861**DCL
DIRECTORY_ENTRY.PATH_NULL IN PROCEDURE GC_GET_FILE
     14850**DCL
DIRECTORY_ENTRY.SECTOR_ADDR IN PROCEDURE GC_GET_FILE
     14851**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:338  
DIRECTORY_ENTRY IN PROCEDURE GC_MAKE_OBJECT_CARD
     15223**DCL
DIRECTORY_ENTRY.ATTRIBUTES IN PROCEDURE GC_MAKE_OBJECT_CARD
     15235**DCL
DIRECTORY_ENTRY.ATTRIBUTES.LSB IN PROCEDURE GC_MAKE_OBJECT_CARD
     15237**DCL
DIRECTORY_ENTRY.FILE_SIZE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15229**DCL
DIRECTORY_ENTRY.PATH_NULL IN PROCEDURE GC_MAKE_OBJECT_CARD
     15226**DCL
DIRECTORY_ENTRY.SECTOR_ADDR IN PROCEDURE GC_MAKE_OBJECT_CARD
     15227**DCL
DISKETTE_FILE IN PROCEDURE GC_MAKE_DKEND_CARD
     15359**DCL
DISKETTE_FILE.HDR IN PROCEDURE GC_MAKE_DKEND_CARD
     15360**DCL
DISKETTE_FILE.HDR.DISK_TAB IN PROCEDURE GC_MAKE_DKEND_CARD
     15367**DCL
DISKETTE_FILE.HDR.EQUIP_TYPE IN PROCEDURE GC_MAKE_DKEND_CARD
     15362**DCL
DISKETTE_FILE.HDR.HEADER_LGTH IN PROCEDURE GC_MAKE_DKEND_CARD
     15368**DCL
DISKETTE_FILE.HDR.MODULE_TYPE IN PROCEDURE GC_MAKE_DKEND_CARD
     15361**DCL
DISKETTE_FILE.HDR.MOD_DWG_NUM IN PROCEDURE GC_MAKE_DKEND_CARD
     15364**DCL
DISKETTE_FILE.HDR.TTL_DATE IN PROCEDURE GC_MAKE_DKEND_CARD
     15365**DCL
DISKETTE_FILE.HDR.UNIQUE_NAME IN PROCEDURE GC_MAKE_DKEND_CARD
     15363**DCL
DISKETTE_FILE.LD_CTL IN PROCEDURE GC_MAKE_DKEND_CARD
     15370**DCL
DISKETTE_FILE.LD_CTL.CODE_TYPE IN PROCEDURE GC_MAKE_DKEND_CARD
     15373**DCL
DISKETTE_FILE.LD_CTL.DIR_ENTRIES IN PROCEDURE GC_MAKE_DKEND_CARD
     15374**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:339  
DISKETTE_FILE.LD_CTL.EXEC_CS IN PROCEDURE GC_MAKE_DKEND_CARD
     15377**DCL
DISKETTE_FILE.LD_CTL.EXEC_IP IN PROCEDURE GC_MAKE_DKEND_CARD
     15378**DCL
DISKETTE_FILE.LD_CTL.FRAME IN PROCEDURE GC_MAKE_DKEND_CARD
     15381**DCL
DISKETTE_FILE.LD_CTL.FRAME.ADR_LOWER IN PROCEDURE GC_MAKE_DKEND_CARD
     15384**DCL
DISKETTE_FILE.LD_CTL.FRAME.ADR_UPPER IN PROCEDURE GC_MAKE_DKEND_CARD
     15382**DCL
DISKETTE_FILE.LD_CTL.FRAME.SIZE IN PROCEDURE GC_MAKE_DKEND_CARD
     15386**DCL
DISKETTE_FILE.LD_CTL.FRAME_COUNT IN PROCEDURE GC_MAKE_DKEND_CARD
     15380**DCL
DISKETTE_FILE.LD_CTL.LD_CTL_CKSUM IN PROCEDURE GC_MAKE_DKEND_CARD
     15379**DCL
DISKETTE_FILE.LD_CTL.NEXT_ALTER IN PROCEDURE GC_MAKE_DKEND_CARD
     15376**DCL
DISKETTE_FILE.LD_CTL.REC_LEN IN PROCEDURE GC_MAKE_DKEND_CARD
     15372**DCL
DISKETTE_FILE.LD_CTL.REC_TYPE IN PROCEDURE GC_MAKE_DKEND_CARD
     15371**DCL
DISKETTE_FILE.SECTORS IN PROCEDURE GC_MAKE_DKEND_CARD
     15389**DCL
DISKETTE_FILE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15250**DCL
DISKETTE_FILE.HDR IN PROCEDURE GC_MAKE_OBJECT_CARD
     15251**DCL
DISKETTE_FILE.HDR.DISK_TAB IN PROCEDURE GC_MAKE_OBJECT_CARD
     15258**DCL
DISKETTE_FILE.HDR.EQUIP_TYPE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15253**DCL
DISKETTE_FILE.HDR.HEADER_LGTH IN PROCEDURE GC_MAKE_OBJECT_CARD
     15259**DCL
DISKETTE_FILE.HDR.MODULE_TYPE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15252**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:340  
DISKETTE_FILE.HDR.PGM_REV IN PROCEDURE GC_MAKE_OBJECT_CARD
     15257**DCL
DISKETTE_FILE.HDR.TTL_DATE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15256**DCL
DISKETTE_FILE.HDR.UNIQUE_NAME IN PROCEDURE GC_MAKE_OBJECT_CARD
     15254**DCL
DISKETTE_FILE.LD_CTL IN PROCEDURE GC_MAKE_OBJECT_CARD
     15261**DCL
DISKETTE_FILE.LD_CTL.CODE_TYPE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15264**DCL
DISKETTE_FILE.LD_CTL.DIR_ENTRIES IN PROCEDURE GC_MAKE_OBJECT_CARD
     15265**DCL
DISKETTE_FILE.LD_CTL.EXEC_CS IN PROCEDURE GC_MAKE_OBJECT_CARD
     15268**DCL
DISKETTE_FILE.LD_CTL.EXEC_IP IN PROCEDURE GC_MAKE_OBJECT_CARD
     15269**DCL
DISKETTE_FILE.LD_CTL.FRAME IN PROCEDURE GC_MAKE_OBJECT_CARD
     15272**DCL
DISKETTE_FILE.LD_CTL.FRAME.ADR_LOWER IN PROCEDURE GC_MAKE_OBJECT_CARD
     15275**DCL
DISKETTE_FILE.LD_CTL.FRAME.ADR_UPPER IN PROCEDURE GC_MAKE_OBJECT_CARD
     15273**DCL
DISKETTE_FILE.LD_CTL.FRAME.SIZE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15277**DCL
DISKETTE_FILE.LD_CTL.FRAME_COUNT IN PROCEDURE GC_MAKE_OBJECT_CARD
     15271**DCL
DISKETTE_FILE.LD_CTL.LD_CTL_CKSUM IN PROCEDURE GC_MAKE_OBJECT_CARD
     15270**DCL
DISKETTE_FILE.LD_CTL.NEXT_ALTER IN PROCEDURE GC_MAKE_OBJECT_CARD
     15267**DCL
DISKETTE_FILE.LD_CTL.REC_LEN IN PROCEDURE GC_MAKE_OBJECT_CARD
     15263**DCL
DISKETTE_FILE.LD_CTL.REC_TYPE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15262**DCL
DISKETTE_FILE.SECTORS IN PROCEDURE GC_MAKE_OBJECT_CARD
     15280**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:341  
DISKETTE_HEADER IN PROCEDURE GC_GET_CONFIG
     14420**DCL
DISKETTE_HEADER.CONFIG_NAME IN PROCEDURE GC_GET_CONFIG
     14432**DCL
DISKETTE_HEADER.CPR IN PROCEDURE GC_GET_CONFIG
     14421**DCL
DISKETTE_HEADER.DATE_CHANGED IN PROCEDURE GC_GET_CONFIG
     14425**DCL
DISKETTE_HEADER.DATE_CREATED IN PROCEDURE GC_GET_CONFIG
     14424**DCL
DISKETTE_HEADER.DIR_ADR IN PROCEDURE GC_GET_CONFIG
     14429**DCL
DISKETTE_HEADER.DIR_SIZE IN PROCEDURE GC_GET_CONFIG
     14431**DCL
DISKETTE_HEADER.DISK_DWG_NUM IN PROCEDURE GC_GET_CONFIG
     14441**DCL
DISKETTE_HEADER.DISK_TYPE IN PROCEDURE GC_GET_CONFIG
     14434**DCL
DISKETTE_HEADER.EQUIP_TYPE IN PROCEDURE GC_GET_CONFIG
     14436**DCL
DISKETTE_HEADER.IPI_NUM.IPI_NUM_VAL IN PROCEDURE GC_GET_CONFIG
     14438**DCL
DISKETTE_HEADER.IPI_NUM.PRD_NUM_TAB IN PROCEDURE GC_GET_CONFIG
     14439**DCL
DISKETTE_HEADER.IPI_NUM_ IN PROCEDURE GC_GET_CONFIG
     14440**DCL
DISKETTE_HEADER.SPACE_ADR IN PROCEDURE GC_GET_CONFIG
     14426**DCL
DISKETTE_HEADER.SPACE_SIZE IN PROCEDURE GC_GET_CONFIG
     14428**DCL
DISKETTE_HEADER.TITLE IN PROCEDURE GC_GET_CONFIG
     14422**DCL
DISKETTE_HEADER.UNIQUE_ID IN PROCEDURE GC_GET_CONFIG
     14423**DCL
DISKETTE_HEADER.X_OF_N.N IN PROCEDURE GC_GET_CONFIG
     14444**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:342  
DISKETTE_HEADER.X_OF_N.X IN PROCEDURE GC_GET_CONFIG
     14443**DCL
DISKETTE_HEADER.X_OF_N_ IN PROCEDURE GC_GET_CONFIG
     14445**DCL
DISKETTE_HEADER IN PROCEDURE GC_GET_DIRECTORY
     14628**DCL
DISKETTE_HEADER.CONFIG_NAME IN PROCEDURE GC_GET_DIRECTORY
     14640**DCL
DISKETTE_HEADER.CPR IN PROCEDURE GC_GET_DIRECTORY
     14629**DCL
DISKETTE_HEADER.DATE_CHANGED IN PROCEDURE GC_GET_DIRECTORY
     14633**DCL
DISKETTE_HEADER.DATE_CREATED IN PROCEDURE GC_GET_DIRECTORY
     14632**DCL
DISKETTE_HEADER.DIR_ADR IN PROCEDURE GC_GET_DIRECTORY
     14637**DCL
DISKETTE_HEADER.DISK_DWG_NUM IN PROCEDURE GC_GET_DIRECTORY
     14649**DCL
DISKETTE_HEADER.DISK_TYPE IN PROCEDURE GC_GET_DIRECTORY
     14642**DCL
DISKETTE_HEADER.EQUIP_TYPE IN PROCEDURE GC_GET_DIRECTORY
     14644**DCL
DISKETTE_HEADER.IPI_NUM.IPI_NUM_VAL IN PROCEDURE GC_GET_DIRECTORY
     14646**DCL
DISKETTE_HEADER.IPI_NUM.PRD_NUM_TAB IN PROCEDURE GC_GET_DIRECTORY
     14647**DCL
DISKETTE_HEADER.IPI_NUM_ IN PROCEDURE GC_GET_DIRECTORY
     14648**DCL
DISKETTE_HEADER.SPACE_ADR IN PROCEDURE GC_GET_DIRECTORY
     14634**DCL
DISKETTE_HEADER.SPACE_SIZE IN PROCEDURE GC_GET_DIRECTORY
     14636**DCL
DISKETTE_HEADER.TITLE IN PROCEDURE GC_GET_DIRECTORY
     14630**DCL
DISKETTE_HEADER.UNIQUE_ID IN PROCEDURE GC_GET_DIRECTORY
     14631**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:343  
DISKETTE_HEADER.X_OF_N.N IN PROCEDURE GC_GET_DIRECTORY
     14652**DCL
DISKETTE_HEADER.X_OF_N.X IN PROCEDURE GC_GET_DIRECTORY
     14651**DCL
DISKETTE_HEADER.X_OF_N_ IN PROCEDURE GC_GET_DIRECTORY
     14653**DCL
DISKETTE_HEADER IN PROCEDURE GC_MAKE_DKEND_CARD
     15402**DCL
DISKETTE_HEADER.CONFIG_NAME IN PROCEDURE GC_MAKE_DKEND_CARD
     15414**DCL
DISKETTE_HEADER.CPR IN PROCEDURE GC_MAKE_DKEND_CARD
     15403**DCL
DISKETTE_HEADER.DIR_ADR IN PROCEDURE GC_MAKE_DKEND_CARD
     15411**DCL
DISKETTE_HEADER.DIR_SIZE IN PROCEDURE GC_MAKE_DKEND_CARD
     15413**DCL
DISKETTE_HEADER.DISK_DWG_NUM IN PROCEDURE GC_MAKE_DKEND_CARD
     15423**DCL
DISKETTE_HEADER.DISK_TYPE IN PROCEDURE GC_MAKE_DKEND_CARD
     15416**DCL
DISKETTE_HEADER.EQUIP_TYPE IN PROCEDURE GC_MAKE_DKEND_CARD
     15418**DCL
DISKETTE_HEADER.IPI_NUM.IPI_NUM_VAL IN PROCEDURE GC_MAKE_DKEND_CARD
     15420**DCL
DISKETTE_HEADER.IPI_NUM.PRD_NUM_TAB IN PROCEDURE GC_MAKE_DKEND_CARD
     15421**DCL
DISKETTE_HEADER.IPI_NUM_ IN PROCEDURE GC_MAKE_DKEND_CARD
     15422**DCL
DISKETTE_HEADER.SPACE_ADR IN PROCEDURE GC_MAKE_DKEND_CARD
     15408**DCL
DISKETTE_HEADER.SPACE_SIZE IN PROCEDURE GC_MAKE_DKEND_CARD
     15410**DCL
DISKETTE_HEADER.TITLE IN PROCEDURE GC_MAKE_DKEND_CARD
     15404**DCL
DISKETTE_HEADER.UNIQUE_ID IN PROCEDURE GC_MAKE_DKEND_CARD
     15405**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:344  
DISKETTE_HEADER.X_OF_N.N IN PROCEDURE GC_MAKE_DKEND_CARD
     15426**DCL
DISKETTE_HEADER.X_OF_N.X IN PROCEDURE GC_MAKE_DKEND_CARD
     15425**DCL
DISKETTE_HEADER.X_OF_N_ IN PROCEDURE GC_MAKE_DKEND_CARD
     15427**DCL
DISKETTE_HEADER IN PROCEDURE GC_MAKE_OBJECT_CARD
     15187**DCL
DISKETTE_HEADER.CONFIG_NAME IN PROCEDURE GC_MAKE_OBJECT_CARD
     15199**DCL
DISKETTE_HEADER.CPR IN PROCEDURE GC_MAKE_OBJECT_CARD
     15188**DCL
DISKETTE_HEADER.DATE_CHANGED IN PROCEDURE GC_MAKE_OBJECT_CARD
     15192**DCL
DISKETTE_HEADER.DATE_CREATED IN PROCEDURE GC_MAKE_OBJECT_CARD
     15191**DCL
DISKETTE_HEADER.DIR_ADR IN PROCEDURE GC_MAKE_OBJECT_CARD
     15196**DCL
DISKETTE_HEADER.DIR_SIZE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15198**DCL
DISKETTE_HEADER.DISK_DWG_NUM IN PROCEDURE GC_MAKE_OBJECT_CARD
     15208**DCL
DISKETTE_HEADER.DISK_TYPE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15201**DCL
DISKETTE_HEADER.IPI_NUM.IPI_NUM_VAL IN PROCEDURE GC_MAKE_OBJECT_CARD
     15205**DCL
DISKETTE_HEADER.IPI_NUM_ IN PROCEDURE GC_MAKE_OBJECT_CARD
     15207**DCL
DISKETTE_HEADER.SPACE_ADR IN PROCEDURE GC_MAKE_OBJECT_CARD
     15193**DCL
DISKETTE_HEADER.SPACE_SIZE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15195**DCL
DISKETTE_HEADER.TITLE IN PROCEDURE GC_MAKE_OBJECT_CARD
     15189**DCL
DISKETTE_HEADER.X_OF_N_ IN PROCEDURE GC_MAKE_OBJECT_CARD
     15212**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:345  
DISKETTE_READ_BUFFER IN PROCEDURE GC_CHECK_FACTORY_TEST
     15087**DCL
DISKETTE_READ_BUFFER IN PROCEDURE GC_DUMMY_READ
     14752**DCL
DISKETTE_READ_BUFFER.DATA_WORD IN PROCEDURE GC_DUMMY_READ
     14753**DCL
DISKETTE_READ_BUFFER IN PROCEDURE GC_GET_FILE
     14881**DCL
DKEND.BCD.TTL_DATE
     12774**DCL
DUP
     12530**DCL
DUP.BATCH_MODE
     12532**DCL
DUP.BCD_V
     12601**DCL
DUP.BINARY_V
     12596**DCL
DUP.BOTTOM_LINE#
     12568**DCL
DUP.BREAK_DISABLED
     12650**DCL
DUP.BREAK_RETURN
     12652**DCL
DUP.BREAK_TERMINATE
     12648**DCL
DUP.CMD$
     12548**DCL
DUP.CURRENT_LINE#
     12566**DCL
DUP.CURRENT_PAGE#
     12564**DCL
DUP.DF
     12607**DCL
DUP.DF.CLOSE_TYPE
     12616**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:346  
DUP.DF.ENTERED
     12608**DCL
DUP.DF.FID
     12618**DCL
DUP.DF.FID_LGTH
     12620**DCL
DUP.DF.NO_EXIST
     12610**DCL
DUP.DF.OPEN_TYPE
     12614**DCL
DUP.DF.REPORT_ERROR
     12612**DCL
DUP.DS_V
     12541**DCL
DUP.ERROR_IMAGE
     12570**DCL
DUP.FAULT_ERROR
     12536**DCL
DUP.FORCE_NEW_PAGE
     12572**DCL
DUP.HDR_CODE
     12553**DCL
DUP.HOLD_AREA
     12643**DCL
DUP.HOLD_AREA_LGTH
     12645**DCL
DUP.IFAD
     12575**DCL
DUP.IFAD.CONFIG_TAB
     12584**DCL
DUP.IFAD.DEVICE_INPUT
     12580**DCL
DUP.IFAD.ENTERED
     12578**DCL
DUP.IFAD.FID
     12592**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:347  
DUP.IFAD.FID_LGTH
     12594**DCL
DUP.IFAD.IMU_NUMBER
     12588**DCL
DUP.IFAD.IMU_TAB
     12582**DCL
DUP.IFAD.ME_ALLOWED
     12576**DCL
DUP.IFAD.NUM_VOLUMES
     12586**DCL
DUP.LINE_VFC
     12562**DCL
DUP.LOG
     12623**DCL
DUP.LOG.CATALOG
     12626**DCL
DUP.LOG.DECK
     12628**DCL
DUP.LOG.TYPE
     12624**DCL
DUP.LOG_V.PTR$
     12633**DCL
DUP.LOG_V_
     12635**DCL
DUP.MSG_V
     12557**DCL
DUP.MSG_V.PTR$
     12560**DCL
DUP.NUM_LINES
     12555**DCL
DUP.NUM_WORDS
     12539**DCL
DUP.PROCESS_COMPLETE
     12534**DCL
DUP.RESPONSE
     12544**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:348  
DUP.RESPONSE_LGTH
     12546**DCL
DUP.SITE_ID
     12659**DCL
DUP.SITE_NAME
     12654**DCL
DUP.SITE_NAME.LGTH
     12655**DCL
DUP.SITE_NAME.TEXT
     12657**DCL
DUP.TEMP
     12637**DCL
DUP.TEMP.CLOSE_TYPE
     12640**DCL
DUP.TEMP.OPEN_TYPE
     12638**DCL
HDR_BLK IN PROCEDURE GC_CHECK_FACTORY_TEST
     15059**DCL
HDR_BLK.CTL_SW IN PROCEDURE GC_CHECK_FACTORY_TEST
     15062**DCL
HDR_BLK.HOST_STS IN PROCEDURE GC_CHECK_FACTORY_TEST
     15063**DCL
HDR_BLK.IO_PARAM_BLK IN PROCEDURE GC_CHECK_FACTORY_TEST
     15065**DCL
HDR_BLK.IO_PARAM_BLK.BLK_CT IN PROCEDURE GC_CHECK_FACTORY_TEST
     15074**DCL
HDR_BLK.IO_PARAM_BLK.CMD IN PROCEDURE GC_CHECK_FACTORY_TEST
     15067**DCL
HDR_BLK.IO_PARAM_BLK.DEST_LEN IN PROCEDURE GC_CHECK_FACTORY_TEST
     15075**DCL
HDR_BLK.IO_PARAM_BLK.DEST_PTR IN PROCEDURE GC_CHECK_FACTORY_TEST
     15073**DCL
HDR_BLK.IO_PARAM_BLK.FILE_NAME IN PROCEDURE GC_CHECK_FACTORY_TEST
     15069**DCL
HDR_BLK.IO_PARAM_BLK.OPN IN PROCEDURE GC_CHECK_FACTORY_TEST
     15066**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:349  
HDR_BLK.IO_PARAM_BLK.OPTIONS IN PROCEDURE GC_CHECK_FACTORY_TEST
     15070**DCL
HDR_BLK.IO_PARAM_BLK.SOURCE_LEN IN PROCEDURE GC_CHECK_FACTORY_TEST
     15072**DCL
HDR_BLK.IO_PARAM_BLK.SOURCE_PTR IN PROCEDURE GC_CHECK_FACTORY_TEST
     15071**DCL
HDR_BLK.IO_PARAM_BLK.STS_PTR IN PROCEDURE GC_CHECK_FACTORY_TEST
     15068**DCL
HDR_BLK.RD_FLPY IN PROCEDURE GC_CHECK_FACTORY_TEST
     15064**DCL
HDR_BLK.TYPE IN PROCEDURE GC_CHECK_FACTORY_TEST
     15060**DCL
HDR_BLK IN PROCEDURE GC_DUMMY_READ
     14724**DCL
HDR_BLK.CTL_SW IN PROCEDURE GC_DUMMY_READ
     14727**DCL
HDR_BLK.HOST_STS IN PROCEDURE GC_DUMMY_READ
     14728**DCL
HDR_BLK.IO_PARAM_BLK IN PROCEDURE GC_DUMMY_READ
     14730**DCL
HDR_BLK.IO_PARAM_BLK.BLK_CT IN PROCEDURE GC_DUMMY_READ
     14739**DCL
HDR_BLK.IO_PARAM_BLK.CMD IN PROCEDURE GC_DUMMY_READ
     14732**DCL
HDR_BLK.IO_PARAM_BLK.DEST_LEN IN PROCEDURE GC_DUMMY_READ
     14740**DCL
HDR_BLK.IO_PARAM_BLK.DEST_PTR IN PROCEDURE GC_DUMMY_READ
     14738**DCL
HDR_BLK.IO_PARAM_BLK.FILE_NAME IN PROCEDURE GC_DUMMY_READ
     14734**DCL
HDR_BLK.IO_PARAM_BLK.OPN IN PROCEDURE GC_DUMMY_READ
     14731**DCL
HDR_BLK.IO_PARAM_BLK.OPTIONS IN PROCEDURE GC_DUMMY_READ
     14735**DCL
HDR_BLK.IO_PARAM_BLK.SOURCE_LEN IN PROCEDURE GC_DUMMY_READ
     14737**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:350  
HDR_BLK.IO_PARAM_BLK.SOURCE_PTR IN PROCEDURE GC_DUMMY_READ
     14736**DCL
HDR_BLK.IO_PARAM_BLK.STS_PTR IN PROCEDURE GC_DUMMY_READ
     14733**DCL
HDR_BLK.RD_FLPY IN PROCEDURE GC_DUMMY_READ
     14729**DCL
HDR_BLK.TYPE IN PROCEDURE GC_DUMMY_READ
     14725**DCL
HDR_BLK IN PROCEDURE GC_GET_CONFIG
     14393**DCL
HDR_BLK.CTL_SW IN PROCEDURE GC_GET_CONFIG
     14396**DCL
HDR_BLK.HOST_STS IN PROCEDURE GC_GET_CONFIG
     14397**DCL
HDR_BLK.IO_PARAM_BLK IN PROCEDURE GC_GET_CONFIG
     14399**DCL
HDR_BLK.IO_PARAM_BLK.BLK_CT IN PROCEDURE GC_GET_CONFIG
     14408**DCL
HDR_BLK.IO_PARAM_BLK.CMD IN PROCEDURE GC_GET_CONFIG
     14401**DCL
HDR_BLK.IO_PARAM_BLK.DEST_PTR IN PROCEDURE GC_GET_CONFIG
     14407**DCL
HDR_BLK.IO_PARAM_BLK.FILE_NAME IN PROCEDURE GC_GET_CONFIG
     14403**DCL
HDR_BLK.IO_PARAM_BLK.OPN IN PROCEDURE GC_GET_CONFIG
     14400**DCL
HDR_BLK.IO_PARAM_BLK.OPTIONS IN PROCEDURE GC_GET_CONFIG
     14404**DCL
HDR_BLK.IO_PARAM_BLK.SOURCE_LEN IN PROCEDURE GC_GET_CONFIG
     14406**DCL
HDR_BLK.IO_PARAM_BLK.SOURCE_PTR IN PROCEDURE GC_GET_CONFIG
     14405**DCL
HDR_BLK.IO_PARAM_BLK.STS_PTR IN PROCEDURE GC_GET_CONFIG
     14402**DCL
HDR_BLK.TYPE IN PROCEDURE GC_GET_CONFIG
     14394**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:351  
HDR_BLK IN PROCEDURE GC_GET_DIRECTORY
     14601**DCL
HDR_BLK.CTL_SW IN PROCEDURE GC_GET_DIRECTORY
     14604**DCL
HDR_BLK.HOST_STS IN PROCEDURE GC_GET_DIRECTORY
     14605**DCL
HDR_BLK.IO_PARAM_BLK IN PROCEDURE GC_GET_DIRECTORY
     14607**DCL
HDR_BLK.IO_PARAM_BLK.BLK_CT IN PROCEDURE GC_GET_DIRECTORY
     14616**DCL
HDR_BLK.IO_PARAM_BLK.CMD IN PROCEDURE GC_GET_DIRECTORY
     14609**DCL
HDR_BLK.IO_PARAM_BLK.DEST_PTR IN PROCEDURE GC_GET_DIRECTORY
     14615**DCL
HDR_BLK.IO_PARAM_BLK.FILE_NAME IN PROCEDURE GC_GET_DIRECTORY
     14611**DCL
HDR_BLK.IO_PARAM_BLK.OPN IN PROCEDURE GC_GET_DIRECTORY
     14608**DCL
HDR_BLK.IO_PARAM_BLK.OPTIONS IN PROCEDURE GC_GET_DIRECTORY
     14612**DCL
HDR_BLK.IO_PARAM_BLK.SOURCE_LEN IN PROCEDURE GC_GET_DIRECTORY
     14614**DCL
HDR_BLK.IO_PARAM_BLK.SOURCE_PTR IN PROCEDURE GC_GET_DIRECTORY
     14613**DCL
HDR_BLK.IO_PARAM_BLK.STS_PTR IN PROCEDURE GC_GET_DIRECTORY
     14610**DCL
HDR_BLK.TYPE IN PROCEDURE GC_GET_DIRECTORY
     14602**DCL
HDR_BLK.CTL_SW IN PROCEDURE GC_GET_FILE
     14822**DCL
HDR_BLK.HOST_STS IN PROCEDURE GC_GET_FILE
     14823**DCL
HDR_BLK.IO_PARAM_BLK IN PROCEDURE GC_GET_FILE
     14825**DCL
HDR_BLK.IO_PARAM_BLK.BLK_CT IN PROCEDURE GC_GET_FILE
     14834**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:352  
HDR_BLK.IO_PARAM_BLK.CMD IN PROCEDURE GC_GET_FILE
     14827**DCL
HDR_BLK.IO_PARAM_BLK.DEST_PTR IN PROCEDURE GC_GET_FILE
     14833**DCL
HDR_BLK.IO_PARAM_BLK.FILE_NAME IN PROCEDURE GC_GET_FILE
     14829**DCL
HDR_BLK.IO_PARAM_BLK.OPN IN PROCEDURE GC_GET_FILE
     14826**DCL
HDR_BLK.IO_PARAM_BLK.OPTIONS IN PROCEDURE GC_GET_FILE
     14830**DCL
HDR_BLK.IO_PARAM_BLK.SOURCE_PTR IN PROCEDURE GC_GET_FILE
     14831**DCL
HDR_BLK.IO_PARAM_BLK.STS_PTR IN PROCEDURE GC_GET_FILE
     14828**DCL
HDR_BLK.TYPE IN PROCEDURE GC_GET_FILE
     14820**DCL
HDR_BLK IN PROCEDURE GC_GET_HEADER
     14515**DCL
HDR_BLK.CTL_SW IN PROCEDURE GC_GET_HEADER
     14518**DCL
HDR_BLK.HOST_STS IN PROCEDURE GC_GET_HEADER
     14519**DCL
HDR_BLK.IO_PARAM_BLK IN PROCEDURE GC_GET_HEADER
     14521**DCL
HDR_BLK.IO_PARAM_BLK.BLK_CT IN PROCEDURE GC_GET_HEADER
     14530**DCL
HDR_BLK.IO_PARAM_BLK.CMD IN PROCEDURE GC_GET_HEADER
     14523**DCL
HDR_BLK.IO_PARAM_BLK.DEST_PTR IN PROCEDURE GC_GET_HEADER
     14529**DCL
HDR_BLK.IO_PARAM_BLK.FILE_NAME IN PROCEDURE GC_GET_HEADER
     14525**DCL
HDR_BLK.IO_PARAM_BLK.OPN IN PROCEDURE GC_GET_HEADER
     14522**DCL
HDR_BLK.IO_PARAM_BLK.OPTIONS IN PROCEDURE GC_GET_HEADER
     14526**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:353  
HDR_BLK.IO_PARAM_BLK.SOURCE_LEN IN PROCEDURE GC_GET_HEADER
     14528**DCL
HDR_BLK.IO_PARAM_BLK.SOURCE_PTR IN PROCEDURE GC_GET_HEADER
     14527**DCL
HDR_BLK.IO_PARAM_BLK.STS_PTR IN PROCEDURE GC_GET_HEADER
     14524**DCL
HDR_BLK.TYPE IN PROCEDURE GC_GET_HEADER
     14516**DCL
HEX_CARD IN PROCEDURE GC_HEX_CHECKS
     14233**DCL
HEX_CARD.BCD.PROGRAM_ID IN PROCEDURE GC_HEX_CHECKS
     14245**DCL
HOST_DATA.LOWER IN PROCEDURE GC_CONVERT_8_TO_9_NO
     15531**DCL
ID.ID
     12794**DCL
ID.REV
     12796**DCL
ID.REV.LEVEL
     12798**DCL
ID.USAGE
     12799**DCL
ITEM$.SEGID IN PROCEDURE GC_ADDR
     15131**DCL
LAST
     12811**DCL
LAST.DECK#
     12812**DCL
LOAD.SYMBOL_OFFSET IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14022**DCL
LOAD.TYPE IN PROCEDURE GC_SET_FROM_BINARY_CARDS
     14021**DCL
M$ACCT
      6714**DCL-ENT
M$ACTIVATE
      6717**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:354  
M$ALIB
      6710**DCL-ENT
M$ASUSER
      6712**DCL-ENT
M$ATTACH
      6719**DCL-ENT
M$BADPP
      6737**DCL-ENT
M$CGCTL
      6718**DCL-ENT
M$CGINFO
      6718**DCL-ENT
M$CHECK
      6699**DCL-ENT
M$CHGUNIT
      6757**DCL-ENT
M$CLOSE
      6697**DCL-ENT
M$CLRSTK
      6755**DCL-ENT
M$CMDVAR
      6766**DCL-ENT
M$CONFIG
      6727**DCL-ENT
M$CORRES
      6702**DCL-ENT
M$CPEXIT
      6711**DCL-ENT
M$CVM
      6735**DCL-ENT
M$CVOL
      6700**DCL-ENT
M$DCLFLD
      6727**DCL-ENT
M$DEACTIVATE
      6717**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:355  
M$DELREC
      6699**DCL-ENT
M$DEQ
      6764**DCL-ENT
M$DETACH
      6719**DCL-ENT
M$DEVICE
      6701**DCL-ENT
M$DISPLAY
      6764**DCL-ENT
M$DISPRES
      6704**DCL-ENT
M$DLIB
      6710**DCL-ENT
M$DRIBBLE
      6727**DCL-ENT
M$DRTN
      6755**DCL-ENT
M$DSUSER
      6712**DCL-ENT
M$ENQ
      6763**DCL-ENT
M$EOM
      6722**DCL-ENT
M$ERASE
      6728**DCL-ENT
M$ERR
      6709**DCL-ENT
M$ERRMSG
      6760**DCL-ENT
M$EVENT
      6752**DCL-ENT
M$EXHUME
      6761**DCL-ENT
M$EXIT
      6709**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:356  
M$EXTEND
      6701**DCL-ENT
M$FDP
      6733**DCL-ENT
M$FDS
      6732**DCL-ENT
M$FEBOOT
      6725**DCL-ENT
M$FECTL
      6726**DCL-ENT
M$FEDUMP
      6725**DCL-ENT
M$FID
      6760**DCL-ENT
M$FINDPROC
      6714**DCL-ENT
M$FSUSER
      6712**DCL-ENT
M$FVP
      6734**DCL-ENT
M$FWCG
      6718**DCL-ENT
M$GBPL
      6738**DCL-ENT
M$GDDL
      6734**DCL-ENT
M$GDP
      6733**DCL-ENT
M$GDS
      6732**DCL-ENT
M$GETDCB
      6703**DCL-ENT
M$GETMOUSE
      6743**DCL-ENT
M$GETPM
      6744**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:357  
M$GJOB
      6762**DCL-ENT
M$GLINEATTR
      6722**DCL-ENT
M$GOODPP
      6737**DCL-ENT
M$GPLATEN
      6730**DCL-ENT
M$GPROMPT
      6729**DCL-ENT
M$GTRMATTR
      6723**DCL-ENT
M$GTRMCTL
      6721**DCL-ENT
M$GTRMTAB
      6724**DCL-ENT
M$GVP
      6733**DCL-ENT
M$HELP
      6760**DCL-ENT
M$INT
      6752**DCL-ENT
M$INTRTN
      6713**DCL-ENT
M$IOQ
      6748**DCL-ENT
M$JOBSTATS
      6762**DCL-ENT
M$KEYIN
      6702**DCL-ENT
M$LDEV
      6697**DCL-ENT
M$LDTRC
      6710**DCL-ENT
M$LIMIT
      6703**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:358  
M$LINES
      6702**DCL-ENT
M$LINK
      6709**DCL-ENT
M$MADMUCK
      6705**DCL-ENT
M$MAKUSER
      6736**DCL-ENT
M$MBS
      6704**DCL-ENT
M$MDFFLD
      6728**DCL-ENT
M$MERC
      6753**DCL-ENT
M$MERCS
      6754**DCL-ENT
M$MIRROR
      6748**DCL-ENT
M$MONINFO
      6765**DCL-ENT
M$MPL
      6738**DCL-ENT
M$NODEINFO
      6729**DCL-ENT
M$NXTUSR
      6763**DCL-ENT
M$OCMSG
      6761**DCL-ENT
M$OLAY
      6709**DCL-ENT
M$OPEN
      6697**DCL-ENT
M$PAS
      6738**DCL-ENT
M$PATHCON
      6761**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:359  
M$PDS
      6732**DCL-ENT
M$PFIL
      6699**DCL-ENT
M$PLATEN
      6723**DCL-ENT
M$PRECORD
      6701**DCL-ENT
M$PROCNAME
      6714**DCL-ENT
M$PROFILE
      6725**DCL-ENT
M$PROMPT
      6721**DCL-ENT
M$RACST
      6705**DCL-ENT
M$RDSYSLOG
      6746**DCL-ENT
M$READ
      6698**DCL-ENT
M$RELDCB
      6703**DCL-ENT
M$RELRES
      6704**DCL-ENT
M$RELSTARF
      6706**DCL-ENT
M$REM
      6706**DCL-ENT
M$RENV
      6753**DCL-ENT
M$REQUIRE
      6705**DCL-ENT
M$RETRY
      6754**DCL-ENT
M$RETRYS
      6754**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:360  
M$REW
      6700**DCL-ENT
M$RLSFLD
      6728**DCL-ENT
M$RPRIV
      6756**DCL-ENT
M$RSPP
      6735**DCL-ENT
M$RSWITCH
      6757**DCL-ENT
M$RUE
      6763**DCL-ENT
M$SAD
      6736**DCL-ENT
M$SAVE
      6712**DCL-ENT
M$SCON
      6713**DCL-ENT
M$SCREECH
      6711**DCL-ENT
M$SENV
      6753**DCL-ENT
M$SETFMA
      6697**DCL-ENT
M$SETFP
      6726**DCL-ENT
M$SINPUT
      6724**DCL-ENT
M$SLCFLD
      6729**DCL-ENT
M$SMOUSE
      6743**DCL-ENT
M$SMPRT
      6735**DCL-ENT
M$SPRIV
      6756**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:361  
M$SSC
      6736**DCL-ENT
M$SSWITCH
      6756**DCL-ENT
M$STATE
      6765**DCL-ENT
M$STD
      6737**DCL-ENT
M$STIMER
      6751**DCL-ENT
M$STLPP
      6734**DCL-ENT
M$STRAP
      6751**DCL-ENT
M$STRMATTR
      6723**DCL-ENT
M$STRMCTL
      6721**DCL-ENT
M$STRMTAB
      6724**DCL-ENT
M$SYMBIO
      6762**DCL-ENT
M$SYSCON
      6748**DCL-ENT
M$SYSID
      6766**DCL-ENT
M$TDCLOSE
      6747**DCL-ENT
M$TDIO
      6747**DCL-ENT
M$TDOPEN
      6746**DCL-ENT
M$TDREQCPU
      6747**DCL-ENT
M$TEMPWROC
      6741**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:362  
M$TIME
      6764**DCL-ENT
M$TRAP
      6751**DCL-ENT
M$TRMISC
      6726**DCL-ENT
M$TRMPRG
      6722**DCL-ENT
M$TRTN
      6755**DCL-ENT
M$TRUNC
      6698**DCL-ENT
M$TTIMER
      6751**DCL-ENT
M$UC
      6721**DCL
M$UMPL
      6738**DCL-ENT
M$UNFID
      6760**DCL-ENT
M$UNLATCH
      6717**DCL-ENT
M$UNSHARE
      6714**DCL-ENT
M$USRFIELD
      6757**DCL-ENT
M$VIRTUAL
      6732**DCL-ENT
M$WAIT
      6755**DCL-ENT
M$WEOF
      6700**DCL-ENT
M$WRITE
      6698**DCL-ENT
M$WRSYSLOG
      6746**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:363  
M$XCON
      6752**DCL-ENT
M$XCONRTN
      6713**DCL-ENT
M$XEQTIME
      6765**DCL-ENT
M$XFLUSH
      6706**DCL-ENT
M$XMOUSE
      6743**DCL-ENT
M$XXX
      6709**DCL-ENT
M$YC
      6711**DCL-ENT
MCA_B
     12824**DCL
MCA_B.CONFIG.DATA1
     12880**DCL
MCA_B.CONFIG.DATA1.NUMTAB
     12882**DCL
MCA_B.CONFIG.HDR_BLK
     12878**DCL
MCA_B.DCW_LIST
     12825**DCL
MCA_B.DCW_LIST.DCW1
     12827**DCL
MCA_B.DCW_LIST.DCW2
     12831**DCL
MCA_B.DIRECTORY.DATA
     12860**DCL
MCA_B.DIRECTORY.HDR_BLK
     12859**DCL
MCA_B.DISKETTE_HEADER.HDR_BLK
     12856**DCL
MCA_B.DUMMY_BUFFER.HDR_BLK
     12874**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:364  
MCA_B.FILE.DATA.HDR
     12867**DCL
MCA_B.FILE.DATA.LD_CTL
     12868**DCL
MCA_B.FILE.DATA.SECTORS
     12869**DCL
MCA_B.FILE.HDR_BLK
     12865**DCL
MCA_B.STATUS
     12837**DCL
MCA_B.STATUS.ADAPTER
     12849**DCL
MCA_B.STATUS.IIOC
     12854**DCL
MCA_B.STATUS.INITIATE
     12847**DCL
MCA_B.STATUS.MARKER
     12845**DCL
MCA_B.STATUS.ODD_WORD
     12844**DCL
MCA_B.STATUS.POWER
     12839**DCL
MCA_B.STATUS.RESIDUE
     12853**DCL
MCA_B.STATUS.SUB
     12841**DCL
MCA_B.STATUS.SUB.RDP
     12842**DCL
MCA_B.STATUS.TERMINATE
     12838**DCL
MCA_B.STATUS.TERM_POS
     12852**DCL
MCA_B.STATUS.WAS_R_W
     12851**DCL
MCA_DATA.LW_BIT IN PROCEDURE GC_CONVERT_8_TO_9
     15489**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:365  
MCA_DATA.UP_BIT IN PROCEDURE GC_CONVERT_8_TO_9
     15487**DCL
MCA_DATA.LOWER IN PROCEDURE GC_CONVERT_8_TO_9_NO
     15527**DCL
MCA_DATA.UPPER IN PROCEDURE GC_CONVERT_8_TO_9_NO
     15526**DCL
OBJECT
     12894**DCL
OBJECT.BCD.CLASS
     12900**DCL
OBJECT.BCD.DONT_APPLY
     12901**DCL
OBJECT.BCD.FILENAME
     12910**DCL
OBJECT.BCD.GECALL
     12913**DCL
OBJECT.BCD.MODEL
     12909**DCL
OBJECT.BCD.TYPE
     12897**DCL
OBJECT.BINARY_COUNT
     12942**DCL
OBJECT.CHECKSUM
     12946**DCL
OBJECT.DECK#
     12941**DCL
OBJECT.NIO_BCD
     12917**DCL
OBJECT.NIO_BCD.X_OF_N.N
     12932**DCL
OBJECT.NIO_BCD.X_OF_N.X
     12930**DCL
OBJECT.TOTAL_COUNT
     12943**DCL
OCTAL_CARD IN PROCEDURE GC_OCTAL_CHECKS
     14121**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:366  
OCTAL_CARD.BCD.TYPE IN PROCEDURE GC_OCTAL_CHECKS
     14126**DCL
OUT$BLK IN PROCEDURE GC_FORM_HEX_CARD
     13602**DCL
OUT$BLK.CPOS IN PROCEDURE GC_FORM_HEX_CARD
     13628**DCL
OUT$BLK.NDTYPE IN PROCEDURE GC_FORM_HEX_CARD
     13605**DCL
OUT$BLK.SCRITCH IN PROCEDURE GC_FORM_HEX_CARD
     13618**DCL
OUT$BLK.TEMP IN PROCEDURE GC_FORM_HEX_CARD
     13603**DCL
OUT$BLK IN PROCEDURE GC_FORM_OCTAL_CARD
     13720**DCL
OUT$BLK.CPOS IN PROCEDURE GC_FORM_OCTAL_CARD
     13746**DCL
OUT$BLK.NDTYPE IN PROCEDURE GC_FORM_OCTAL_CARD
     13723**DCL
OUT$BLK.SCRITCH IN PROCEDURE GC_FORM_OCTAL_CARD
     13736**DCL
OUT$BLK.TEMP IN PROCEDURE GC_FORM_OCTAL_CARD
     13721**DCL
OUT$BLK IN PROCEDURE GC_GET_PATCH_CARDS
     13500**DCL
OUT$BLK.CPOS IN PROCEDURE GC_GET_PATCH_CARDS
     13526**DCL
OUT$BLK.NDTYPE IN PROCEDURE GC_GET_PATCH_CARDS
     13503**DCL
OUT$BLK.NSUBLKS IN PROCEDURE GC_GET_PATCH_CARDS
     13512**DCL
OUT$BLK.SCRITCH IN PROCEDURE GC_GET_PATCH_CARDS
     13516**DCL
OUT$BLK.SUBLK$ IN PROCEDURE GC_GET_PATCH_CARDS
     13533**DCL
OUT$BLK.TEMP IN PROCEDURE GC_GET_PATCH_CARDS
     13501**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:367  
OUT$SYM IN PROCEDURE GC_FORM_HEX_CARD
     13648**DCL
OUT$SYM.CODE IN PROCEDURE GC_FORM_HEX_CARD
     13654**DCL
OUT$SYM.CPOS IN PROCEDURE GC_FORM_HEX_CARD
     13663**DCL
OUT$SYM.NDTYPE IN PROCEDURE GC_FORM_HEX_CARD
     13651**DCL
OUT$SYM.NSUBLKS IN PROCEDURE GC_FORM_HEX_CARD
     13657**DCL
OUT$SYM.SCRITCH IN PROCEDURE GC_FORM_HEX_CARD
     13660**DCL
OUT$SYM.TEMP IN PROCEDURE GC_FORM_HEX_CARD
     13649**DCL
OUT$SYM.TEXTC$ IN PROCEDURE GC_FORM_HEX_CARD
     13666**DCL
OUT$SYM IN PROCEDURE GC_FORM_OCTAL_CARD
     13766**DCL
OUT$SYM.CODE IN PROCEDURE GC_FORM_OCTAL_CARD
     13772**DCL
OUT$SYM.CPOS IN PROCEDURE GC_FORM_OCTAL_CARD
     13781**DCL
OUT$SYM.NDTYPE IN PROCEDURE GC_FORM_OCTAL_CARD
     13769**DCL
OUT$SYM.NSUBLKS IN PROCEDURE GC_FORM_OCTAL_CARD
     13775**DCL
OUT$SYM.SCRITCH IN PROCEDURE GC_FORM_OCTAL_CARD
     13778**DCL
OUT$SYM.TEMP IN PROCEDURE GC_FORM_OCTAL_CARD
     13767**DCL
OUT$SYM.TEXTC$ IN PROCEDURE GC_FORM_OCTAL_CARD
     13784**DCL
PATCH_CARD IN PROCEDURE GC_GET_PATCH_CARDS
     13477**DCL
PATCH_CARD.BCD.HEX_ IN PROCEDURE GC_GET_PATCH_CARDS
     13483**DCL
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:368  
PREFACE
     12741**DCL
PREFACE.CHECKSUM
     12748**DCL
PREFACE.CONTROL
     12749**DCL
PREFACE.CONTROL.BLANK_COMMON
     12750**DCL
PREFACE.CONTROL.ENTRY_COUNT
     12753**DCL
PREFACE.CONTROL.MOD_8
     12751**DCL
PREFACE.ENTRY_
     12754**DCL
PREFACE.ENTRY_.ADDRESS
     12756**DCL
PREFACE.ENTRY_.NAME
     12755**DCL
PREFACE.WD1
     12742**DCL
PREFACE.WD1.TYPE
     12743**DCL
PREFACE.WD1.V_COUNT
     12744**DCL
RECORD
     12957**DCL
RECORD.BINARY
     12964**DCL
RECORD.BINARY.DATA
     12965**DCL
RECORD.BINARY.DATA.CS
     12967**DCL
RECORD.DATA
     12973**DCL
TOU$GET_BCD_CARDS
     13107**ENTRY
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:369  
TOU$GET_BINARY_CARDS
     13093**ENTRY
TOU$GET_CARD
        79**PROC
TOU$GET_CONFIG
     13135**ENTRY
TOU$GET_CP6_OBJECT
     13079**ENTRY
TOU$GET_DIRECTORY
     13163**ENTRY
TOU$GET_FILE
     13177**ENTRY
TOU$GET_HEADER
     13149**ENTRY
TOU$GET_PATCH_CARDS
     13121**ENTRY
TOU$MAKE_DIR_OBJECT_CARD
     13219**ENTRY
TOU$MAKE_DKEND_CARD
     13205**ENTRY
TOU$MAKE_HDR_OBJECT_CARD
     13233**ENTRY
TOU$MAKE_OBJECT_CARD
     13191**ENTRY
XUR$ALLMSG
     12512**DCL-ENT
XUR$BREAK
     12505**DCL-ENT
XUR$CLOSE_DCBS
     12504**DCL-ENT
XUR$CLRENABLE
     12508**DCL-ENT
XUR$CORRES
     12499**DCL-ENT
XUR$DISABLE
     12506**DCL-ENT
PL6.E3A0      #001=TOU$GET_CARD File=TOU$GET_CARD.:E05TSI                        WED 07/30/97 06:45 Page:370  
XUR$ECHO
     12496**DCL-ENT
XUR$ECHOIF
     12495**DCL-ENT
XUR$ENABLE
     12507**DCL-ENT
XUR$ERRCNVRT
     12516**DCL-ENT
XUR$ERRTOLCP6
     12517**DCL-ENT
XUR$FINDDCB
     12513**DCL-ENT
XUR$GETDCB
     12514**DCL-ENT
XUR$HELP
     12510**DCL-ENT
XUR$INFOMSG
     12502**DCL-ENT
XUR$INIT
     12498**DCL-ENT
XUR$MOREMSG
     12511**DCL-ENT
XUR$OPENOUT
     12515**DCL-ENT
XUR$SETERRMSG
     12503**DCL-ENT
XUR$SIMULATE_BREAK
     12509**DCL-ENT
