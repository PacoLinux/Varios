

CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /*M*
        2         2                   name: ou$static
        3         3                   purpose: This  module contians functions for the handling
        4         4                   of static module building and setting up information for the
        5         5                   generation of C object units.
        6         6
        7         7             */
        8         8             #include <stdio:h>
        9         9             /* #include <dcb:h> */
       10        10             #include "zbk$ougen:h"
       11        11             #include "zbk$tables:h"
       12        12
       13        13             #define pl6str(_s_)  ( *(int *) zbk_buf =0,\
       14        13                   strcpy( &zbk_buf[2], _s_ ),\
       15        13                   *(int *)zbk_buf |= strlen( &zbk_buf[2] ) << 18)
       16        16
       17        17             #define  pl6str2(_s_)  ( *(int *) zbk_buf =0,\
       18        17                   strcpy( &zbk_buf[1], _s_ ),\
       19        17                   *(int *)zbk_buf |= strlen( &zbk_buf[1] ) << 27)
       20        20             #define POS_MASK 0377777777777
       21        21
       22        22             static char zbk_buf[512] ;
       23        23
       24        24             char zbk_static_name[65];
       25        25             char zbk_static_total_name[70];
       26        26             int zbk_static_func_count;
       27        27             static_funcs_p  zbk_static_p;
       28        28
       29        29             int zbk_have_static_flag;
       30        30
       31        31             extern int *zbk$myalloc();
       32        32             extern void zbk$errhandler() ;
       33        33             extern int zbk_zeroinit ;
       34        34             extern char zbk_blanks_32[];
       35        35             extern void zbk$set_reloc_stuff();
       36        36             extern char B_VERSION[];
       37        37             extern char zbk_static_func_suffix[];
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       38        38             extern void ZB_CLOSE_OU_FILE ();
       39        39
       40        40             /*i*
       41        41                   name: zbk$set_static_name
       42        42                   purpose: This routine sets the name for the static control
       43        43                   setics that are to be generated for each compilation file.
       44        44
       45        45             */
       46        46             zbk$set_static_name(char *sname) {
       47        47    1
       48        48    1              strcpy (zbk_static_name, sname);
       49        49    1
       50        50    1
       51        51    1              zbk_have_static_flag=-1;
       52        52    1
       53        53    1              return;
       54        54    1              }
       55        55
       56        56             /*i*
       57        57                   name: zbk$note_static_functions
       58        58                   purpose: This fucntion sets scans that names of the static
       59        59                   functions that are contained in this compile file, and puts
       60        60                   them into a table. The names are then compared with the name
       61        61                   of functions and external references as then are processed.
       62        62                   when matches are found, the static name is appended to the
       63        63                   function name.
       64        64
       65        65             */
       66        66             zbk$note_static_functions(char *str)  {
       67        67    1        int count,c ;
"zbk$static:c.:ZBC3TSI", line 67: (warning) identifier "c" is not used
       68        68    1        FILE *infile;
"zbk$static:c.:ZBC3TSI", line 68: (warning) identifier "infile" is not used
       69        69    1        int hash_value;
       70        70    1        struct zbk_static_funcs *p, *last_p;
       71        71    1
       72        72    1              if (zbk_static_p == (static_funcs_p) 0) {
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       73        73    2                p = (struct zbk_static_funcs *) zbk$myalloc(sizeof(struct zbk_static_f
                               uncs) * 50);
       74        74    2                zbk_static_p = p;
       75        75    2                zbk_static_func_count = 0;
       76        76    2                last_p = NULL;
       77        77    2              } else {
       78        78    2                p = zbk_static_p;
       79        79    2                for (count = 0; count < zbk_static_func_count; count++) {
       80        80    3                   last_p = p;
       81        81    3                   p++; }
       82        82    2              }
       83        83    1
       84        84    1
       85        85    1                strcpy (p->name_field.name, zbk_blanks_32);
       86        86    1                strcpy (p->name_field.name, str);
       87        87    1                zbk_static_func_count++;
       88        88    1                if (last_p != NULL) {
       89        89    2                   last_p->next = p; }
       90        90    1                last_p = p;
       91        91    1                p->next = NULL;
       92        92    1                hash_value = p->name_field.int_name[0] + p->name_field.int_name[1] +
       93        93    1                             p->name_field.int_name[2] ;
       94        94    1                hash_value = hash_value * hash_value ;
       95        95    1                hash_value = (hash_value & POS_MASK) % 601;
       96        96    1                p->hash = hash_value ;
       97        97    1
       98        98    1              }  /* end of the function note_static_fucntions.  */
       99        99
      100       100
      101       101
      102       102             /*i*
      103       103                   name: zbk$check_if_first_call
      104       104                   purpose: this routine is checking for very first USE pseudo
      105       105                   op in the program. If found this signals that static, and
      106       106                   constant (also static) o.u. module is to be generated.
      107       107                   This causes us to do the initial calls to the o.u. generator
      108       108                   routines for the building of the object unit.
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      109       109
      110       110             */
      111       111             zbk$check_if_first_call()  {
      112       112    1        int length;
      113       113    1        int i;
      114       114    1        int schema;
      115       115    1        struct v_num {
      116       116    2              unsigned lett :9;
      117       117    2              unsigned release :9;
      118       118    2              }  version;
      119       119    1        int ii;
      120       120    1        int name_offset, dname_offset, cname_offset;
      121       121    1        void *entptr;
      122       122    1        void zbk$errhandler();
      123       123    1
      124       124    1              if (zbk_static_first_use_flag == 0) return;
      125       125    1                zbk_static_first_use_flag =0;
      126       126    1
      127       127    1              /* at this point the o.u. for the data only i.u. is initiated.
      128       128    1              */
      129       129    1
      130       130    1
      131       131    1              /* setup names for the static section. */
      132       132    1
      133       133    1              strcpy (&zbk_progname[1], zbk_static_name);
      134       134    1              length = strlen(zbk_static_name);
      135       135    1              strcpy (zbk_static_data_name, zbk_static_name);
      136       136    1              strcpy (zbk_static_con_name, zbk_static_name);
      137       137    1              zbk_static_data_name[length] = '#';
      138       138    1              zbk_static_data_name[length+1] = 's';
      139       139    1              zbk_static_data_name[length+2] = '\0';
      140       140    1              zbk_static_con_name[length] = '#';
      141       141    1              zbk_static_con_name[length+1] = 'c';
      142       142    1              zbk_static_con_name[length+2] = '\0';
      143       143    1
      144       144    1        /* >>>>>>>>>>>>>>>>>> TEMP FIX <<<<<<<<<<<<<<<<<<<<< */
      145       145    1              length = strlen (zbk_static_name) ;
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      146       146    1              if (length >= 27) {
      147       147    2                length = 27; }
      148       148    1        /*  >>>>>>>>>>>>>>>>>> END OF TEMP FIX <<<<<<<<<<<<< */
      149       149    1              zbk_progname[length+1] = '#';
      150       150    1              zbk_progname[length+2] = 'f';
      151       151    1              zbk_progname[length+3] = '#';
      152       152    1              zbk_progname[length+4] = '\0';
      153       153    1              zbk_progname[0] = '_';
      154       154    1
      155       155    1              ii=-1;
      156       156    1              i = 0;
      157       157    1              schema=0;
      158       158    1              pl6str2 (":SHARED_C");
      159       159    1
      160       160    1              entptr = (void (*)()) zbk$errhandler ;
      161       161    1              version.lett = B_VERSION[1];
      162       162    1              version.release = 0 ;
      163       163    1              XUO$OUINIT(&zbk_oudcbnum,&i,&schema,&zbk_compiler_id,&version ,
      164       164    1                  zbk_buf, N, &entptr , N, &ii);
      165       165    1
      166       166    1              pl6str (zbk_static_data_name);
      167       167    1
      168       168    1              XUO$DNAME(zbk_buf, &dname_offset);
      169       169    1              XUO$SECTBUILD( &zbk_datasect, &dname_offset, &zbk_datasec, &zbk_zeroinit
                               , &zbk_evenbound);
      170       170    1              XUO$SDEF( &dname_offset, &zbk_datasec, &zbk_zero_val);
      171       171    1
      172       172    1              pl6str (zbk_static_con_name);
      173       173    1
      174       174    1              XUO$DNAME(zbk_buf, &cname_offset);
      175       175    1              XUO$SECTBUILD( &zbk_conssect, &cname_offset, &zbk_conssec, &zbk_zeroinit
                               , &zbk_evenbound);
      176       176    1              XUO$SDEF( &cname_offset, &zbk_conssec, &zbk_zero_val);
      177       177    1
      178       178    1              strcpy (zbk_static_total_name, zbk_progname);
      179       179    1              pl6str (zbk_progname);
      180       180    1              XUO$DNAME (zbk_buf, &name_offset);
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      181       181    1              XUO$EDEF (&zbk_conssec, &zbk_zero_val, &name_offset, &zbk_zero_val,
      182       182    1                  &zbk_zero_val, &zbk_zero_val, &zbk_std_call, &zbk_zero_val);
      183       183    1
      184       184    1              zbk_s_s_table[zbk_procsec].size = 0;
      185       185    1              zbk_s_s_table[zbk_datasec].size = 0;
      186       186    1              zbk_s_s_table[zbk_conssec].size = 0;
      187       187    1
      188       188    1              zbk_s_s_table[zbk_procsec].curr_offset = 0;
      189       189    1              zbk_s_s_table[zbk_datasec].curr_offset = 0;
      190       190    1              zbk_s_s_table[zbk_conssec].curr_offset = 0;
      191       191    1
      192       192    1              pl6str ("ISSID");
      193       193    1              XUO$RNAME( zbk_buf, &name_offset);
      194       194    1              XUO$SEGREF ( &name_offset, &xbo_seg_ref_id);
      195       195    1
      196       196    1              zbk_forward_ref_count = 0;
      197       197    1              zbk_forward_ref_flag  = 0;
      198       198    1              zbk_ref_name_flag = 0;
      199       199    1              zbk_curr_con_section = 0;
      200       200    1              zbk_first_func_flag = 0;
      201       201    1              zbk_lbl_tbl_ptr = NULL ;
      202       202    1              zbk_line_tbl_ptr = NULL ;
      203       203    1              zbk_first_lbl_tbl_ptr = NULL;
      204       204    1              zbk_first_sym_tbl_ptr = NULL;
      205       205    1              zbk_sym_tbl_ptr = NULL ;
      206       206    1              zbk_string_ptr = NULL;
      207       207    1              for (i=0; i < 601; i++) {
      208       208    2                zbk_label_hash[i] = NULL ;
      209       209    2                zbk_symbol_hash[i] = NULL ;
      210       210    2              }  /* end of the for loop. */
      211       211    1
      212       212    1              return;
      213       213    1              }
      214       214
      215       215
      216       216
      217       217             /*i*
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      218       218                   name: check_for_static_terminate
      219       219                   purpose: This routine is the one to generate the termination
      220       220                   code for the data only module for the c compile unit.
      221       221                   */
      222       222             zbk$check_for_static_terminate() {
      223       223    1        int sect_size;
      224       224    1        int *dcbptr ;
      225       225    1        void zbk$forward_ref_process ();
      226       226    1        void *ent_ptr;
      227       227    1
      228       228    1
      229       229    1              if (zbk_static_data_flag == 0) return;
      230       230    1
      231       231    1              zbk_static_data_flag = 0;
      232       232    1              /* terminate the current o.u. */
      233       233    1
      234       234    1              zbk_static_terminate_flag = -1;
      235       235    1
      236       236    1              if (zbk_static_first_use_flag != 0) {
      237       237    2                 zbk_static_first_use_flag =0;
      238       238    2                 return; }
      239       239    1
      240       240    1
      241       241    1              if (zbk_s_s_table[zbk_procsec].curr_offset != 0) {
      242       242    2                sect_size = zbk_s_s_table[zbk_datasec].curr_offset + 1;
      243       243    2                XUO$SECTSIZE (&zbk_procsec, &sect_size );
      244       244    2                }
      245       245    1              sect_size = zbk_s_s_table[zbk_conssec].curr_offset + 1;
      246       246    1              XUO$SECTSIZE (&zbk_conssec, &sect_size );
      247       247    1              sect_size = zbk_s_s_table[zbk_datasec].curr_offset + 1;
      248       248    1              XUO$SECTSIZE (&zbk_datasec, &sect_size );
      249       249    1
      250       250    1              if (zbk_forward_ref_count != 0) {  /* have forward refs in the prog. */
      251       251    2                dcbptr = zbk_oudcbptr;
      252       252    2                ent_ptr = (void (*)()) zbk$forward_ref_process ;
      253       253    2                if (zbk_s_s_table[zbk_conssec].curr_offset != 0) {
      254       254    3                  XUO$FRWD_REF (&zbk_conssec, &ent_ptr ,
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      255       255    3                       &dcbptr );  }
      256       256    2                if (zbk_s_s_table[zbk_datasec].curr_offset != 0) {
      257       257    3                  XUO$FRWD_REF (&zbk_datasec, &ent_ptr ,
      258       258    3                       &dcbptr );  }
      259       259    2                /*  do the forward ref processing.   */
      260       260    2              }  /* enof of the forward ref processing. */
      261       261    1              pl6str (zbk_progname);
      262       262    1
      263       263    1              XUO$HEADNAME ( zbk_buf );
      264       264    1
      265       265    1              XUO$HEAD_SEVERITY (&zbk_error_severity);
      266       266    1
      267       267    1              XUO$OUTERM () ;  /* finsih the o.u building .   */
      268       268    1
      269       269    1              ZB_CLOSE_OU_FILE (&zbk_oudcbnum);
      270       270    1
      271       271    1              strcpy (zbk_progname, zbk_static_name);
      272       272    1              zbk_static_con_size = zbk_s_s_table[zbk_conssec].curr_offset;
      273       273    1              zbk_static_data_size = zbk_s_s_table[zbk_datasec].curr_offset;
      274       274    1              if (strcmp(zbk_static_func_suffix, "    ") != 0) {
      275       275    2                 strcpy(zbk_static_name, zbk_static_func_suffix); }
      276       276    1
      277       277    1              zbk$walk_lbls();
      278       278    1              zbk$walk_vars();
      279       279    1
      280       280    1              return;
      281       281    1              }
      282       282
      283       283
      284       284             /*i*
      285       285                   name: zbk$walk_lbls
      286       286                   purpose: This routine walks tha lbl table thread and releases
      287       287                   all local lbls. It also resets the ou_set_flag for global
      288       288                   labels and changes symdefs to symrefs.
      289       289             */
      290       290             zbk$walk_lbls()  {
      291       291    1        struct zbk_labels *p, *last_p, *next, *prev , *next_p;
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      292       292    1        line_tbl_p lt, lt_next;
      293       293    1
      294       294    1              if (zbk_line_tbl_ptr != NULL) { /* walk debug line # tbl release tbl ent
                               ries. */
      295       295    2                for (lt = zbk_line_tbl_ptr; lt != (line_tbl_p) 0; lt = lt_next) {
      296       296    3                  lt_next = lt->next ;
      297       297    3                  Free (lt);
      298       298    3                }
      299       299    2                zbk_line_tbl_ptr = (line_tbl_p) 0;
      300       300    2              }   /* end of the releasing of the line # table. */
      301       301    1
      302       302    1              if (zbk_first_lbl_tbl_ptr == NULL) return;
      303       303    1
      304       304    1              /* now walk the label thread and set symdefs to symrefs
      305       305    1                 and release local labels. */
      306       306    1              p = zbk_first_lbl_tbl_ptr;
      307       307    1
      308       308    1              while (p->lbl_type == LOCAL_LBL) {
      309       309    2                next = p;
      310       310    2                if (p->previous == NULL) {
      311       311    3                  if (p->next == NULL) {
      312       312    4                    zbk_label_hash[p->hash_value] = NULL; }
      313       313    3                  else {
      314       314    4                    zbk_label_hash[p->hash_value] = (int *)p->next; }
      315       315    3                } else {
      316       316    3                  prev = p->previous;
      317       317    3                 while (prev->deleted != 0 && prev->previous != NULL) {
      318       318    4                   prev = prev->previous; }
      319       319    3                  prev->next = p->next; }
      320       320    2                p = p->next_lbl_entry ;
      321       321    2                next->deleted = -1;
      322       322    2                Free(next);
      323       323    2                if (p == NULL) {
      324       324    3                   zbk_first_lbl_tbl_ptr = p;
      325       325    3                   zbk_lbl_tbl_ptr = p;
      326       326    3                   return; }
      327       327    2                }  /* end of while test on local label test. */
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      328       328    1              zbk_first_lbl_tbl_ptr = p;
      329       329    1              zbk_lbl_tbl_ptr = p;
      330       330    1
      331       331    1              last_p = zbk_first_lbl_tbl_ptr;
      332       332    1              for (p = zbk_first_lbl_tbl_ptr; p != NULL; p=next) {
      333       333    2                next = p->next_lbl_entry;
      334       334    2                if(p->lbl_type == SYM_DEF_LBL ) {
      335       335    3                   p->lbl_type = SYM_REF_LBL;
      336       336    3                   p->ou_set_flag = 0;
      337       337    3                   last_p = p; }
      338       338    2                else {
      339       339    3                   if (p->lbl_type == LOCAL_LBL ) {
      340       340    4                      last_p->next_lbl_entry = p->next_lbl_entry;
      341       341    4                      if (p->previous == NULL) {
      342       342    5                        if (p->next == NULL) {
      343       343    6                          zbk_label_hash[p->hash_value] = NULL; }
      344       344    5                        else {
      345       345    6                          zbk_label_hash[p->hash_value] = (int *)p->next; }
      346       346    5                      } else {
      347       347    5                        prev = p->previous;
      348       348    5                        while (prev != NULL) {
      349       349    6                           if (prev->deleted == 0 ) break;
      350       350    6                           prev = prev->previous; }
      351       351    5                        if (prev != NULL) {
      352       352    6                          next_p = p->next ;
      353       353    6                          if (next_p != NULL) {
      354       354    7                            next_p->previous = prev; }
      355       355    6                          prev->next = p->next; }
      356       356    5                        else {
      357       357    6                          next_p = p->next ;
      358       358    6                          if (next_p != NULL) {
      359       359    7                            next_p->previous = NULL; }
      360       360    6                          else {
      361       361    7                            zbk_label_hash[p->hash_value] = NULL; }
      362       362    6                        }
      363       363    5                       }
      364       364    4                      p->deleted = -1;
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      365       365    4                      Free (p); }
      366       366    3                   else {
      367       367    4                      zbk_lbl_tbl_ptr = p;
      368       368    4                      last_p = p; }
      369       369    3                }  /* end of the else close. */
      370       370    2              }   /* end of the for loop. */
      371       371    1              return;
      372       372    1              }  /* enf of the function zbk$walk_lbls. */
      373       373             /*i*
      374       374                   name: zbk$walk_vars
      375       375                   purpose: This routine walks the sym tbl table thread and
      376       376                   releases all local ids, and esets the ou_set_flag, and
      377       377                   changes symdefs to symrefs.
      378       378             */
      379       379             zbk$walk_vars()  {
      380       380    1        struct zbk_sym_tbl *p, *next, *last_p, *prev, *next_p;
      381       381    1        struct zbk_sym_debug_tbl *d;
      382       382    1
      383       383    1              if (zbk_first_sym_tbl_ptr == NULL ) return;
      384       384    1              p = zbk_first_sym_tbl_ptr;
      385       385    1
      386       386    1              while (p->storage_class == AUTO_STORAGE ||
      387       387    1                     p->storage_class == LOCAL_STATIC_STORAGE ||
      388       388    1                     (p->reloc_type == ENTREF_TYPE && p->sym_class != FUNCTION_CLASS)
                               ) {
      389       389    2                next = p;
      390       390    2                if (p->previous == NULL) {
      391       391    3                  if (p->next == NULL) {
      392       392    4                    zbk_symbol_hash[p->hash_value] = NULL; }
      393       393    3                  else {
      394       394    4                    zbk_symbol_hash[p->hash_value] = (int *) p->next; }
      395       395    3                } else {
      396       396    3                  prev = p->previous;
      397       397    3                  while (prev->deleted != 0 && prev->previous != NULL) {
      398       398    4                    prev = prev->previous; }
      399       399    3                  prev->next = p->next ; }
      400       400    2
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      401       401    2                p = p->next_sym_entry ;
      402       402    2                next->deleted = -1;
      403       403    2                Free(next);  }
      404       404    1
      405       405    1              zbk_sym_tbl_ptr = p;
      406       406    1              zbk_first_sym_tbl_ptr = p;
      407       407    1              last_p = p;
      408       408    1
      409       409    1              for(p = zbk_first_sym_tbl_ptr; p!= NULL; p = next) {
      410       410    2                next = p->next_sym_entry;
      411       411    2                if (p->storage_class ==AUTO_STORAGE ||
      412       412    2                    p->storage_class == LOCAL_STATIC_STORAGE ||
      413       413    2                    (p->reloc_type == ENTREF_TYPE && p->sym_class != FUNCTION_CLASS) )
                                {
      414       414    3                   last_p->next_sym_entry = p->next_sym_entry;
      415       415    3                   if (p->previous == NULL) {
      416       416    4                     if (p->next == NULL) {
      417       417    5                       zbk_symbol_hash[p->hash_value] = NULL; }
      418       418    4                     else {
      419       419    5                       zbk_symbol_hash[p->hash_value] = (int *) p->next; }
      420       420    4                   } else {
      421       421    4                     prev = p->previous;
      422       422    4                     while (prev != NULL) {
      423       423    5                       if(prev->deleted == 0) break;
      424       424    5                        prev = prev->previous; }
      425       425    4                     if (prev != NULL) {
      426       426    5                       next_p = p->next ;
      427       427    5                       if (next_p != NULL) {
      428       428    6                         next_p->previous = prev; }
      429       429    5                       prev->next = p->next; }
      430       430    4                     else {
      431       431    5                       next_p = p->next ;
      432       432    5                       if (next_p != NULL) {
      433       433    6                         next_p->previous = NULL; }
      434       434    5                       else {
      435       435    6                         zbk_symbol_hash[p->hash_value] = NULL; }
      436       436    5                     }
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      437       437    4                    }
      438       438    3                   p->deleted = -1;
      439       439    3                   Free (p);
      440       440    3                   }
      441       441    2                 else {
      442       442    3                   p->ou_set_flag = 0;
      443       443    3                   zbk_sym_tbl_ptr = p;
      444       444    3                   if (p->storage_class == GLOBAL_STORAGE) {
      445       445    4                      p->addr_type = SYMREF_TYPE;
      446       446    4                      p->offset = 0;
      447       447    4                      d = p->debug;
      448       448    4                      if ( d != NULL ) {
      449       449    5                        d->addr_type = SYMREF_TYPE;  }
      450       450    4                    }
      451       451    3                   else {
      452       452    4                    if (p->sym_class == FUNCTION_CLASS &&  (p->reloc_type == ENTREF_TY
                               PE || p->addr_type == STATIC_TYPE)) {
      453       453    5                      p->reloc_section = -1;
      454       454    5                      p->ou_set_flag = 0; } }
      455       455    3                   last_p = p;
      456       456    3                 }
      457       457    2              }  /* end of the for loop. */
      458       458    1              /* release all the dflost ant int constant storage area at
      459       459    1                 this point. */
      460       460    1              return;
      461       461    1              }   /* end of the function zbk$walk_vars. */
      462       462
      463       463
      464       464             /*i*
      465       465                   name: zbk$set_con_ref_num
      466       466                   purpose: This routine sets the correct reloc type and current
      467       467                   entry number for the global ids in the symbol table.
      468       468             */
      469       469             zbk$set_con_ref_num() {
      470       470    1        struct zbk_labels *l, *next_l;
      471       471    1
      472       472    1
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=14 
      473       473    1              if (zbk_first_lbl_tbl_ptr != NULL) {
      474       474    2                for (l = zbk_first_lbl_tbl_ptr; l != NULL; l = next_l) {
      475       475    3                  next_l = l->next_lbl_entry;
      476       476    3                  if (l->lbl_type == GLOBAL_STATIC_LBL) {
      477       477    4                    l->reloc_type = SYMREF_TYPE;
      478       478    4                    if (l->def_use == ROM_USE) {
      479       479    5                      l->reloc_section = zbk_static_con_ref_num; }
      480       480    4                    else {
      481       481    5                      l->reloc_section = zbk_static_data_ref_num; }
      482       482    4                  }
      483       483    3                }
      484       484    2              }
      485       485    1
      486       486    1              return;
      487       487    1              }  /* end of the function zbk$set_con_ref_num. */
      488       488
      489       489
      490       490             /*i*
      491       491                   name: zbk$set_data_ref_num
      492       492                   purpose: This routine sets the symbol tables to be sym
      493       493                   refs, and also sets the relocation info for global
      494       494                   static ids.
      495       495             */
      496       496             zbk$set_data_ref_num()  {
      497       497    1        struct zbk_sym_tbl *s, *next_s;
      498       498    1        struct zbk_sym_debug_tbl *d;
      499       499    1
      500       500    1              if (zbk_first_sym_tbl_ptr != NULL) {
      501       501    2                for (s = zbk_first_sym_tbl_ptr; s != NULL; s = next_s) {
      502       502    3                  next_s = s->next_sym_entry;
      503       503    3                  if (s->storage_class == GLOBAL_STATIC_STORAGE) {
      504       504    4                    s->reloc_type = SYMREF_TYPE;
      505       505    4                    if (s->def_use == ROM_USE) {
      506       506    5                      s->reloc_section = zbk_static_con_ref_num; }
      507       507    4                    else {
      508       508    5                      s->reloc_section = zbk_static_data_ref_num; } }
      509       509    3                  else {
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=15 
      510       510    4                    if (s->storage_class == GLOBAL_STORAGE) {
      511       511    5                      s->addr_type = SYMREF_TYPE;
      512       512    5                      s->offset = 0;
      513       513    5                      d = s->debug;
      514       514    5                      if (d != NULL) { /* make sure it is not null ptr. */
      515       515    6                        d->addr_type = SYMREF_TYPE; } }
      516       516    4                  }
      517       517    3                }
      518       518    2              }
      519       519    1
      520       520    1              return;
      521       521    1              }  /* end of the function zbk$set_data_ref_num. */
      522       522
      523       523             /*i*
      524       524                   name: zbk$set_global_debug_vars
      525       525                   purpose: This routine walks the thread of global ids for the
      526       526                   C program and generates debug schema for all the global ids
      527       527                   in the current C function that is having o.u. code generated
      528       528                   for it.
      529       529             */
      530       530             zbk$set_global_debug_vars ()  {
      531       531    1        int i;
      532       532    1        struct zbk_sym_tbl *s, *next_s , *s1, *next;
      533       533    1
      534       534    1              if (zbk_first_sym_tbl_ptr != NULL)  {
      535       535    2                for (s = zbk_first_sym_tbl_ptr; s != NULL; s = next_s)  {
      536       536    3                  next_s = s->next_sym_entry;
      537       537    3                  if (s->debug != NULL && s->addr_type != AUTO_TYPE) {
      538       538    4                    if (s->addr_type == SYMREF_TYPE && s->debug->level_no == 1) {
      539       539    5                       zbk$set_reloc_stuff(s);
      540       540    5                       s->ou_set_flag = -1; }
      541       541    4                    if (s->reloc_type != ENTREF_TYPE ) {
      542       542    5                    if (s->next != NULL) {
      543       543    6                      for(s1= s; s1 != NULL; s1 = next) {
      544       544    7                        next = s1->next;
      545       545    7                        if((i=strcmp(s1->name, s->name)) == 0 && s1->debug != NULL) {
      546       546    8                          if (s1->debug->level_no == 1 &&
CC.C03    File=zbk$static:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=16 
      547       547    8                              s->debug->level_no == 1 &&
      548       548    8                              s1->debug->addr_type == 2 /* auto */) {goto no_global;}
      549       549    8                        }
      550       550    7                      }
      551       551    6                    }  /* end of the if test on s->next  .. */
      552       552    5                    zbk$build_debug(s); }
      553       553    4                  }  /* end of the test for debug record. */
      554       554    3                 else {  /* test for auto structrure. */
      555       555    4                  if (s->debug != NULL && s->addr_type == AUTO_TYPE) {
      556       556    5                    if (s->debug->level_no == 1 && s->debug->data_type == STRUCTURE_DA
                               TA_TYPE) {
      557       557    6                      while (next_s != NULL && next_s->debug->level_no != 1) {
      558       558    7                        next_s = next_s->next_sym_entry; }
      559       559    6                    }
      560       560    5                  }
      561       561    4                 } /* end of else clause on debug record check. */
      562       562    3        no_global: ;  /* lbl branched to when name scope conflict. */
      563       563    3                 }  /*  end of the for loop. */
      564       564    2              }  /* end of the if test on the first sym tbl ptr. */
      565       565    1              return;
      566       566    1              }  /* end of the routine zbk$set_global_debug_vars. */
      567       567
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbk$ougen:h.:ZBC3TOU. is referenced
   zbk$tables:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbk$static:c.:ZBC3TSI
