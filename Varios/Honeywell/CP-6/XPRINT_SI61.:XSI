/*M* XPRINT - remote printer kludge */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: J.L.Joseph, LADC
                                        Date: 08/88
                                                                  */
%SET LISTSUB='1'B;
 
XPRINT: PROC MAIN;
 
                                   /*
                                        Locally needed %SUBs
                                                                  */
%SUB TRUE#='1'B /*TRUE#*/;
%SUB FALSE#='0'B /*FALSE#*/;
%SUB BUFLEN#=140/*BUFLEN#*/;
 
                                   /*
                                        INCLUDEs here
                                                                  */
     %INCLUDE CP_6;
     %INCLUDE CP_6_SUBS;
 
     %INCLUDE XU_MACRO_C;
     %INCLUDE XU_SUBS_C;
     %INCLUDE XU_PERR_C;
 
     %INCLUDE B$JIT_C;
     %INCLUDE B_ERRORS_C;
 
                                   /*
                                        DCBs defined here
                                                                  */
DCL M$SI DCB;
DCL M$OU DCB;
DCL M$LO DCB;
DCL M$DO DCB;
 
                                   /*
                                        EXTERNALs
                                                                  */
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
                                   /*
                                        CONSTANT definitions here
                                                                  */
%VLP_NAME (FPTN=PASS_NAME,
               NAME='XPRINT_X_PASS');
 
 
 
 
                                   /*
                                        Local STATIC storage
                                                                  */
DCL BUF1 CHAR(160) STATIC INIT(' ');
DCL BUF1SV CHAR(160) STATIC INIT(' ');
DCL BUF1ARS UBIN WORD STATIC INIT(0);
 
DCL MY_ERROR_BUF CHAR(140) STATIC;
DCL 1 DEST STATIC CALIGNED,
       2 * CHAR(13) INIT ('!C ME(NH) TO '),
       2 DVNN CHAR(2),
       2 * CHAR(1) INIT ('@'),
       2 WSNN CHAR(8),
       2 VFC_OPT CHAR(20) INIT (' (VFC,FORM=''STDLP '')');
DCL DEST_CHARX REDEF DEST CHAR(44);
 
DCL TEXT6 CHAR(6) BASED;                /* PICKUP FORMNAME FROM DCB.FORM$ */
 
%VLP_NAME (FPTN=PASS_VAL,
               LEN=31,NAME=' ');
 
                              /*
                                   internal status flags
                                                                  */
DCL END_OF_FILE BIT(1) ALIGNED STATIC INIT(FALSE#);
 
 
                              /*
                                   mysterious and misused temps
                                                                  */
DCL I SBIN WORD STATIC ALIGNED INIT(0);
DCL J SBIN WORD STATIC ALIGNED INIT(0);
DCL K SBIN WORD STATIC ALIGNED INIT(0);
 
 
DCL PARSE$ PTR STATIC;
 
 
DCL M$SI$ PTR STATIC;
DCL M$OU$ PTR STATIC;
DCL M$LO$ PTR STATIC;
 
%EJECT;
                                   /*
                                        I/O FPTs here
                                                                  */
     %FPT_OPEN      (FPTN=OPEN_SI_IN,
                         FUN=IN,
                         ACS=SEQUEN,
                         DCB=M$SI);
 
     %FPT_OPEN      (FPTN=OPEN_SI_TEST,
                         TEST=YES,
                         DCB=M$SI);
 
     %FPT_READ      (FPTN=READ_BUF1,
                         DCB=M$SI,
                         BUF=BUF1,
                         WAIT=YES);
 
 
     %FPT_WRITE     (FPTN=WRITE_LO_BUF1,
                         ONEWKEY=YES,
                         DCB=M$LO,
                         BUF=BUF1,
                         WAIT=YES);
 
     %FPT_CLOSE     (FPTN=CLOSE_SI_SAVE,
                         DISP=SAVE,
                         DCB=M$SI);
 
     %FPT_CLOSE     (FPTN=CLOSE_LO_SAVE,
                         DISP=SAVE,
                         DCB=M$LO);
 
     %FPT_OPEN      (FPTN=OPEN_LO_OUT,
                         EXIST=NEWFILE,
                         FUN=CREATE,
                         ACS=SEQUEN,
                         ORG=CONSEC,
                         DCB=M$LO);
 
     %FPT_OPEN      (FPTN=SET_LO_DCB_JE,
                         SETDCB=YES,
                         ASN=DEVICE,
                         RES='JE',
                         WSN=DEST_WSN,
                         FORM=DEST_FORM,
                         DCB=M$LO);
 
DCL DEST_WSN CHAR(8) STATIC INIT('--------');
DCL DEST_FORM CHAR(6) CONSTANT INIT('STDNX ');
 
     %FPT_ERRMSG    (FPTN=ERROR_PRINT,
                         BUF=MY_ERROR_BUF,
                         DCB=M$SI,
                         OUTDCB1=M$DO,
                         CODE=NIL);
 
     %FPT_CMDVAR (FPTN=GET_PASS,
                    FUN=FETCH,
                    NAME=PASS_NAME,
                    VALUE=PASS_VAL);
 
 
     %FPT_MONINFO   (FPTN=GET_MONINFO,
                         SITEINFO=SITE_INFO);
          %VLR_SITEINFO (FPTN=SITE_INFO);
 
                                   /*
                                        BASED definitions
                                                                  */
     %F$DCB;
 
     %B$JIT0;
     %U$JIT1;
     %A$JIT6X;
 
     %B$TCB;
 
     %B$ALT;
 
%SUB B$ALT=B$TCB$->B$TCB.ALT$->B$ALT;
 
%EJECT;
 
/* ************************************************************
   ***                                                      ***
   ***  Begin   XPRINT main program                         ***
   ***                                                      ***
   ************************************************************ */
 
     M$SI$ = DCBADDR(DCBNUM(M$SI));
     M$OU$ = DCBADDR(DCBNUM(M$OU));
     M$LO$ = DCBADDR(DCBNUM(M$LO));
 
     CALL M$MONINFO (GET_MONINFO)
     WHENALTRETURN
     DO;
        GOTO MXXX;
        END;
 
     DEST_WSN = 'UNKNOWN';
 
     IF SUBSTR(SITE_INFO.SITE_NAME#.C,0,9) = 'LADC L66B'
     THEN
        DEST_WSN = 'L66A';
     IF SUBSTR(SITE_INFO.SITE_NAME#.C,0,9) = 'LADC L66A'
     THEN
        DEST_WSN = 'L66B';
 
%EJECT;
/* ************************************************************
   ***                                                      ***
   ***  Process the file                                    ***
   ***                                                      ***
   ************************************************************ */
 
     CALL  M$CMDVAR (GET_PASS)
     WHENALTRETURN DO;
        CALL PARSE_ERROR (2);
        GOTO GET_GONE;
        END;
 
     CALL M$OPEN (OPEN_SI_TEST) ALTRET (MXXX);
 
     CALL M$OPEN (OPEN_SI_IN) ALTRET (XSERR);
 
     IF M$SI$->F$DCB.ASN# ~= %FILE#
     THEN
     DO;
        CALL PARSE_ERROR (4);
        GOTO GET_GONE;
        END;                            /* DO IF INPUT ~ FILE */
 
 
     BUF1 = ' ';
     CALL M$READ (READ_BUF1) ALTRET (MUST_BE_EOF);
     BUF1SV=BUF1;
 
     IF NOT M$LO$->F$DCB.AMR#
     THEN
        CALL M$OPEN (SET_LO_DCB_JE)
        WHENALTRETURN
        DO;
           GOTO MXXX;
           END;
     CALL M$OPEN (OPEN_LO_OUT) ALTRET (MXXX);
 
     IF M$OU$->F$DCB.AMR#
     THEN DO;
        IF M$OU$->F$DCB.ASN# ~= %DEVICE#
        THEN DO;
           CALL PARSE_ERROR (1);
           GOTO GET_GONE;
           END;
        DEST.DVNN=SUBSTR(M$OU$->F$DCB.RES#,0,2);
        DEST.WSNN=M$OU$->F$DCB.WSN#;
        END;                            /* DO IF ASSIGNED */
     ELSE DO;
        DEST.DVNN='LP';
        DEST.WSNN='        ';
        END;
 
                                        /* START BUILDING JCL */
     CALL INDEX (I,',',PASS_VAL.NAME#)
     WHENRETURN DO;
                                        /* found a comma, assume full logon */
        CALL CONCAT (BUF1,'!JOB ',PASS_VAL.NAME#);
        BUF1ARS = SIZEC('!JOB ')+PASS_VAL.L#;
        END;
     WHENALTRETURN DO;
                                        /* no comma, assume password only */
        CALL CONCAT (BUF1,'!JOB ',B$JIT$->B$JIT.ACCN,',',
           B$JIT$->B$JIT.UNAME,',',PASS_VAL.NAME#);
        BUF1ARS=SIZEC('!JOB ,,')+SIZEC(B$JIT.ACCN)+SIZEC(B$JIT.ACCN)+
           SIZEC(B$JIT.UNAME);
        END;
 
     CALL DUMP_BUF1 ALTRET (MXXX);
 
     BUF1='!RES MEM=255,TIME=10';
     BUF1ARS=SIZEC('!RES MEM=255,TIME=10');
     CALL DUMP_BUF1 ALTRET (MXXX);
 
     IF M$SI$->F$DCB.ORG# ~= %UR#
     THEN DO;
        DEST.VFC_OPT = ' ';
        END;                            /* DO IF NOT UR FILE */
     ELSE DO;
        SUBSTR(DEST.VFC_OPT,12,6)=M$SI$->F$DCB.FORM$->TEXT6;
        END;
 
     BUF1=DEST_CHARX;
     BUF1ARS=SIZEC(DEST);
     CALL DUMP_BUF1 ALTRET (MXXX);
 
                                   /* should be one record read
                                      already */
     BUF1ARS = M$SI$->F$DCB.ARS#;
     BUF1 = BUF1SV;
 
     DO WHILE (~END_OF_FILE);
 
        IF SUBSTR(BUF1,0,1)='!'
        THEN DO;
                                   /* Special code to double-up the
                                      !'s in column 1 so that the
                                      resultant batch job won't croak
                                      horribly. */
           BUF1SV=BUF1;
           CALL CONCAT (BUF1,'!',BUF1SV);
           BUF1ARS = BUF1ARS+1;
           END;
 
        IF BUF1ARS = 0
        THEN
           GOTO MXXX;
 
        CALL DUMP_BUF1 ALTRET (MXXX);
 
        BUF1 = ' ';
        CALL M$READ (READ_BUF1) ALTRET (MUST_BE_EOF);
        BUF1ARS = M$SI$->F$DCB.ARS#;
 
        DO WHILE (FALSE#);
 
MUST_BE_EOF: ;
 
           IF B$ALT.ERR.CODE ~= %E$EOF
           THEN
              GOTO XSERR;
 
           BUF1 = '!IF STEPCC=0 THEN SET M$LL NO';
           BUF1ARS =SIZEC( '!IF STEPCC=0 THEN SET M$LL NO');
           CALL DUMP_BUF1 ALTRET (MXXX);
 
           BUF1 = '!IF STEPCC=0 THEN LDEV LP01,ERASE,REMOVE';
           BUF1ARS = SIZEC('!IF STEPCC=0 THEN LDEV LP01,ERASE,REMOVE');
           CALL DUMP_BUF1 ALTRET (MXXX);
 
 
           CALL M$CLOSE (CLOSE_LO_SAVE) ALTRET (MXXX);
           CALL M$CLOSE (CLOSE_SI_SAVE) ALTRET (XSERR);
 
           END_OF_FILE = TRUE#;
 
           END;                         /* DO WHILE IN EOF ROUTINE */
 
        END;                            /* DO WHILE ~END_OF_FILE */
 
     CALL M$EXIT;
 
     DO WHILE (FALSE#);
XSERR:  ;
        ERROR_PRINT.CODE_ = VECTOR(B$ALT.ERR);
        GOTO PRINTERR;
 
MXXX:   ;
 
        ERROR_PRINT.CODE_ = VECTOR(B$ALT.ERR);
 
PRINTERR:
        CALL M$ERRMSG (ERROR_PRINT) ALTRET (HMMM);
HMMM:   ;
GET_GONE: ;
        CALL M$XXX;
 
        END;                            /* DO WHILE ALTRETTING */
 
 
%EJECT;
%EJECT;
DUMP_BUF1: PROC ALTRET;
 
 
     IF BUF1ARS <= 0
     THEN
        RETURN;
 
     DO WHILE (SUBSTR(BUF1,BUF1ARS-1,1) = ' ');
 
        BUF1ARS = BUF1ARS - 1;
 
        END;                            /* DO WHILE STRIPPING BLANKS */
 
     IF BUF1ARS = 0
     THEN
        BUF1ARS = 1;
 
 
     WRITE_LO_BUF1.BUF_.BOUND = BUF1ARS - 1;
     CALL M$WRITE (WRITE_LO_BUF1)
     WHENALTRETURN
     DO;
        ALTRETURN;
        END;
 
     BUF1 = ' ';
     BUF1ARS = 0;
 
     RETURN;
 
END DUMP_BUF1;
 
%EJECT;
 
%EJECT;
 
%EJECT;
 
PARSE_ERROR: PROC (INDEX_);
 
DCL INDEX_ SBIN WORD;
 
     %FPT_WRITE     (FPTN=WRITE_PARSE_ERROR,
                         DCB=M$DO,
                         BUF=NIL,
                         WAIT=YES);
 
DCL DEV_ERROR CHAR(0) STATIC INIT(' **** Destination must be device');
DCL CMD_ERROR CHAR(0) STATIC INIT (' **** Can''t find XPRINT CMDVAR');
DCL SIZ_ERROR CHAR(0) STATIC INIT(' **** LEN/GTH is out of range');
DCL FIL_ERROR CHAR(0) STATIC INIT(' **** Input must be disk file');
 
     IF INDEX_ = 1
     THEN
        WRITE_PARSE_ERROR.BUF_ = VECTOR (DEV_ERROR);
 
     IF INDEX_ = 2
     THEN
        WRITE_PARSE_ERROR.BUF_ = VECTOR (CMD_ERROR);
 
     IF INDEX_ = 3
     THEN
        WRITE_PARSE_ERROR.BUF_ = VECTOR(SIZ_ERROR);
 
     IF INDEX_ = 4
     THEN
        WRITE_PARSE_ERROR.BUF_ = VECTOR (FIL_ERROR);
 
     CALL M$WRITE (WRITE_PARSE_ERROR)
     WHENALTRETURN DO; END;
     RETURN;
 
END PARSE_ERROR;
 
%EJECT;
 
END XPRINT;
