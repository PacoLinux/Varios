

11:09 JAN 06 '95 xb_vheap_i6.:XBC3TSI                                      1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /*
    7       * OK, let's define something simple, the AV (available space)
    8       * structure.  It ALWAYS points to the next allocatable block.
    9       * Each block is then divided up as per the boundary tag method
   10       * (see .s6 source) and addressed via pointer offsets.
   11       */
   12
   13      /*
   14       * Use the following as the BASE for the AV pointer (Available list)
   15       */
   16
   17      %MACRO HEAP_VIRT_SYMDEF;
   18         DCL   XBI$VIRT_ASCUR             STATIC SYMDEF SBIN INIT (0);
   19         DCL   XBI$VIRT_LAST_ASPTR$       STATIC SYMDEF PTR INIT (ADDR (NIL));
   20         DCL 1 XBI$LAST_ASPTR$_exposed REDEF XBI$VIRT_LAST_ASPTR$,
   21            2  word_offset          UBIN (24) UNAL,
   22            2  segid                UBIN (12) UNAL;
   23         DCL   XBI$VIRT_ASINFO$           STATIC SYMDEF PTR INIT (ADDR (NIL));
   24         DCL   XBI$VIRT_AV                STATIC SYMDEF PTR INIT (ADDR (NIL));
   25         DCL   XBI$VIRT_First_AV          STATIC SYMDEF PTR INIT (ADDR (NIL));
   26         DCL   XBI$VIRT_Last_AV           STATIC SYMDEF PTR INIT (ADDR (NIL));
   27         DCL 1 XBI$VIRT_allocation_heap   STATIC SYMDEF,
   28            2  Heap_                ALIGNED,
   29               3  Size#             UBIN (18) UNAL INIT (0), /* size in 256k segments */
   30               3  *                 UBIN (18) UNAL INIT (0),
   31               3  Base$             PTR            INIT (ADDR (NIL)),
   32               3  Base REDEF Base$,
   33                  4  Word_Offset    UBIN (18) UNAL,
   34                  4  Byte_Bit_Segid UBIN (18) UNAL,
   35            2  Initialized          BIT (1)        INIT ('0'B);
   36      %MEND;
   37
11:09 JAN 06 '95 xb_vheap_i6.:XBC3TSI                                      2    
   38      %MACRO HEAP_VIRT_SYMREF;
   39         DCL   XBI$VIRT_ASCUR             SYMREF SBIN;
   40         DCL   XBI$VIRT_LAST_ASPTR$       SYMREF PTR;
   41         DCL 1 XBI$LAST_ASPTR$_exposed REDEF XBI$VIRT_LAST_ASPTR$,
   42            2  word_offset          UBIN (24) UNAL,
   43            2  segid                UBIN (12) UNAL;
   44         DCL   XBI$VIRT_ASINFO$           SYMREF PTR;
   45         DCL   XBI$VIRT_AV                SYMREF PTR;
   46         DCL   XBI$VIRT_First_AV          SYMREF PTR;
   47         DCL   XBI$VIRT_Last_AV           SYMREF PTR;
   48         DCL 1 XBI$VIRT_allocation_heap   SYMREF,
   49            2  Heap_                ALIGNED,
   50               3  Size#             UBIN (18) UNAL, /* size in words */
   51               3  *                 UBIN (18) UNAL,
   52               3  Base$             PTR,
   53               3  Base REDEF Base$,
   54                  4  Word_Offset    UBIN (18) UNAL,
   55                  4  Byte_Bit_Segid UBIN (18) UNAL,
   56            2  Initialized          BIT (1);
   57      %MEND;
   58
   59      /* This structure is what the first piece of virtual memory allocation
   60         contains.  It keeps track of all the AS ptrs that have been used
   61         for the virtual segment.  This is necessary so that a quick
   62         reclaim can be done on to free all currently allocated virtual
   63         memory                                                           */
   64
   65      DCL 1    ASINFO   BASED,
   66               2  MAXSEGS     SBIN,
   67               2  CURSEGS     SBIN,
   68               2  ASPTR$(0:0) PTR;
   69
   70      %EQU XBI$VIRT_MIN_AS = bitbin ('4000'O);
   71      %EQU XBI$VIRT_MAX_AS = bitbin ('4300'O);
   72      %EQU XBI$VIRT_SEG_BOUND = bitbin ('0'B);

