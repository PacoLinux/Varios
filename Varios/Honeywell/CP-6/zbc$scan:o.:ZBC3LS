

CC.C03    File=zbc$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: scan.c,v 3.4 87/03/10 17:42:25 ceriel Exp $ */
        6         6             /* PREPROCESSOR: SCANNER FOR THE ACTUAL PARAMETERS OF MACROS */
        7         7
        8         8             #include "nopp:h"
        9         9
       10        10             #ifndef NOPP
       11        11             /*  This file contains the function getactuals() which scans an actual
       12        12              parameter list and splits it up into a list of strings, each one
       13        13              representing an actual parameter.
       14        14             */
       15        15
       16        16             #include "lapbuf:h"   /* UF */
       17        17             #include "nparams:h"  /* UF */
       18        18
       19        19             #include "input:h"
       20        20             #include "class:h"
       21        21             #include "idf:h"
       22        22             #include "macro:h"
       23        23             #include "interface:h"
       24        24
       25        25             #define   EOS      '\0'
       26        26             #define   overflow()  (fatal("actual parameter buffer overflow"))
       27        27
       28        28             PRIVATE char apbuf[LAPBUF]; /* temporary storage for actual parameters */
       29        29             PRIVATE char *actparams[NPARAMS]; /* pointers to the text of the actuals */
       30        30             PRIVATE char *aptr = 0;  /* pointer to last inserted character in apbuf */
       31        31
       32        32             #define   copy(ch) ((aptr < &apbuf[LAPBUF]) ? (*aptr++ = ch) : overflow())
       33        33
       34        34             PRIVATE int nr_of_params;   /* number of actuals read until now */
       35        35
       36        36             PRIVATE char **
CC.C03    File=zbc$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37             getactuals(idef)
       38        38              register struct idf *idef;
       39        39             {
       40        40    1         /* getactuals() collects the actual parameters and turns them
       41        41    1            into a list of strings, a pointer to which is returned.
       42        42    1         */
       43        43    1         register acnt = idef->id_macro->mc_nps;
       44        44    1
       45        45    1         nr_of_params = 0;
       46        46    1         actparams[0] = aptr = &apbuf[0];
       47        47    1         copyact('(', ')', 0);   /* read the actual parameters */
       48        48    1         copy(EOS);     /* mark the end of it all  */
       49        49    1
       50        50    1         if (!nr_of_params++) {     /* 0 or 1 parameter  */
       51        51    2            /* there could be a ( <spaces, comment, ...> )
       52        52    2            */
       53        53    2            register char *p = actparams[0];
       54        54    2
       55        55    2            while ((class(*p) == STSKIP) || (*p == '\n')) {
       56        56    3                  ++p;
       57        57    3            }
       58        58    2
       59        59    2            if (!*p) {  /* the case () : 0 parameters */
       60        60    3               nr_of_params--;
       61        61    3            }
       62        62    2         }
       63        63    1
       64        64    1         if (nr_of_params != acnt)  {
       65        65    2            /* argument mismatch: too many or too few
       66        66    2               actual parameters.
       67        67    2            */
       68        68    2            lexwarning("argument mismatch, %s", idef->id_text);
       69        69    2
       70        70    2            while (nr_of_params < acnt) {
       71        71    3               /* too few paraeters: remaining actuals are ""
       72        72    3               */
       73        73    3               actparams[nr_of_params++] = "";
CC.C03    File=zbc$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74    3            }
       75        75    2         }
       76        76    1
       77        77    1         return actparams;
       78        78    1        }
       79        79
       80        80             PRIVATE
       81        81             copyact(ch1, ch2, level)
       82        82              char ch1, ch2;
       83        83              int level;
       84        84             {
       85        85    1         /* copyact() is taken from Ceriel Jacobs' LLgen, with
       86        86    1            permission.  Its task is to build a list of actuals
       87        87    1            parameters, which list is surrounded by '(' and ')' and in
       88        88    1            which the parameters are separated by ',' if there are
       89        89    1            more than 1. The balancing of '(',')' and '[',']' and
       90        90    1            '{','}' is taken care of by calling this function
       91        91    1            recursively. At each level, copyact() reads the input,
       92        92    1            upto the corresponding closing bracket.
       93        93    1
       94        94    1            Opening bracket is ch1, closing bracket is ch2. If
       95        95    1            level != 0, copy opening and closing parameters too.
       96        96    1         */
       97        97    1         register int ch;     /* Current char */
       98        98    1         register int match;     /* used to read strings */
       99        99    1
      100       100    1         if (level) {
      101       101    2            copy(ch1);
      102       102    2         }
      103       103    1
      104       104    1         for (;;) {
      105       105    2            LoadChar(ch);
      106       106    2
      107       107    2            if (ch == ch2) {
      108       108    3               if (level) {
      109       109    4                  copy(ch);
      110       110    4               }
CC.C03    File=zbc$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      111       111    3               return;
      112       112    3            }
      113       113    2
      114       114    2            switch(ch)  {
      115       115    3
      116       116    3            case ')':
      117       117    3            case '}':
      118       118    3            case ']':
      119       119    3               lexerror("unbalanced parenthesis");
      120       120    3               break;
      121       121    3
      122       122    3            case '(':
      123       123    3               copyact('(', ')', level+1);
      124       124    3               break;
      125       125    3
      126       126    3            case '{':
      127       127    3               /* example:
      128       128    3                     #define declare(v, t)   t v
      129       129    3                     declare(v, union{int i, j; float r;});
      130       130    3               */
      131       131    3               copyact('{', '}', level+1);
      132       132    3               break;
      133       133    3
      134       134    3            case '[':
      135       135    3               copyact('[', ']', level+1);
      136       136    3               break;
      137       137    3
      138       138    3            case '\n':
      139       139    3           while (LoadChar(ch), ch = skipspaces(ch), ch == '#') {
      140       140    4                  /* This piece of code needs some
      141       141    4                     explanation: consider the call of
      142       142    4                     the macro defined as:
      143       143    4                        #define sum(b,c) (b + c)
      144       144    4                     in the following form:
      145       145    4                        sum(
      146       146    4                        #include my_phone_number
      147       147    4                        ,2)
CC.C03    File=zbc$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      148       148    4                     in which case the include must be
      149       149    4                     interpreted as such.
      150       150    4                  */
      151       151    4                  domacro();  /* has read nl, vt or ff */
      152       152    4                  /* Loop, for another control line */
      153       153    4               }
      154       154    3
      155       155    3               PushBack();
      156       156    3               copy('\n');
      157       157    3               break;
      158       158    3
      159       159    3            case '/':
      160       160    3               LoadChar(ch);
      161       161    3
      162       162    3               if (ch == '*') {  /* skip comment   */
      163       163    4                  skipcomment();
      164       164    4                  continue;
      165       165    4               }
      166       166    3
      167       167    3               PushBack();
      168       168    3               copy('/');
      169       169    3               break;
      170       170    3
      171       171    3            case ',':
      172       172    3               if (!level) {
      173       173    4                  /* next parameter encountered */
      174       174    4                  copy(EOS);
      175       175    4
      176       176    4                  if (++nr_of_params >= NPARAMS) {
      177       177    5                     fatal("(getact) too many actuals");
      178       178    5                  }
      179       179    4
      180       180    4                  actparams[nr_of_params] = aptr;
      181       181    4               }
      182       182    3               else  {
      183       183    4                  copy(ch);
      184       184    4               }
CC.C03    File=zbc$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      185       185    3               break;
      186       186    3
      187       187    3            case '\'':
      188       188    3            case '"' :
      189       189    3               /* watch out for brackets in strings, they do
      190       190    3                  not count !
      191       191    3               */
      192       192    3               match = ch;
      193       193    3               copy(ch);
      194       194    3               while (LoadChar(ch), ch != EOI)  {
      195       195    4                  if (ch == match) {
      196       196    5                     break;
      197       197    5                  }
      198       198    4
      199       199    4                  if (ch == '\\')   {
      200       200    5                     copy(ch);
      201       201    5                     LoadChar(ch);
      202       202    5                  }
      203       203    4                  else
      204       204    4                  if (ch == '\n')   {
      205       205    5                     lexerror("newline in string");
      206       206    5                     copy(match);
      207       207    5                     break;
      208       208    5                  }
      209       209    4
      210       210    4                  copy(ch);
      211       211    4               }
      212       212    3
      213       213    3               if (ch == match)  {
      214       214    4                  copy(ch);
      215       215    4                  break;
      216       216    4               }
      217       217    3               /* Fall through */
      218       218    3
      219       219    3            case EOI :
      220       220    3               lexerror("unterminated macro call");
      221       221    3               return;
CC.C03    File=zbc$scan:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      222       222    3
      223       223    3            default:
      224       224    3               copy(ch);
      225       225    3               break;
      226       226    3            }
      227       227    2         }
      228       228    1        }
      229       229             #else
      230       230   *S*
      231       231   *S*       const int zbc_scan_dummy = 0;
      232       232   *S*
      233       233   *S*       #endif NOPP
      234       234
---  Include file information  ---

   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$lapbuf:h.:ZBC3TOU. is referenced
   zbc$nparams:h.:ZBC3TOU. is referenced
   zbc$input:h.:ZBC3TOU. is referenced
   inp_pkg:spec.:ZBC3TOU. is referenced
   zbc$class:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$macro:h.:ZBC3TOU. is referenced
   zbc$interface:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$scan:c.:ZBC3TSI
