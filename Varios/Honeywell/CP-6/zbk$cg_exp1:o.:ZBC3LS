

CC.C03    File=zbk$cg_exp1:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             #include <assert.h>
        2         2             #include <string.h>
        3         3             #include "em_mnem.h"
        4         4             #include "cg_tree.h"
        5         5             #include "cg_inst.h"
        6         6             #include "cg_funs.h"
        7         7
        8         8                    void zbk_negate_reg (int);
        9         9                    void zbk_div_unsigned (int, ADR);
       10        10                    void zbk_enter_var_tbl (char *, long, int, int);
       11        11                    struct VAR_TBL * zbk_var_tbl_search (char *, long);
       12        12                    void zbk_enter_msreg_tbl (long, long);
       13        13
       14        14             /*---------------------------------------------------------
       15        15             -----     Negation     ------------------------------------
       16        16             ---------------------------------------------------------*/
       17        17
       18        18             void zbk_negate_reg (int reg)
       19        19             {
       20        20    1           if (reg == REG_A)
       21        21    1              instruc (INST_NEG, 0L);
       22        22    1           else {
       23        23    2              assert (reg==REG_Q);
       24        24    2              if (zbk_Areg_useable())
       25        25    2                 instruc (INST_NEGL, 0L);
       26        26    2              else {
       27        27    3                 instruc (-1,
       28        28    3                    INST_ERa, RC,   reg, -1L,
       29        29    3                    INST_ADLa,RNT,  reg, 1, TAG_DL,
       30        30    3                    -1);
       31        31    3              }
       32        32    2           }
       33        33    1        }
       34        34
       35        35             /*---------------------------------------------------------
       36        36             -----     Unsigned Divide & Modulus     -------------------
       37        37             ---------------------------------------------------------*/
CC.C03    File=zbk$cg_exp1:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       38        38
       39        39             /* Notes ---
       40        40                Let M == 2^35 (sign bit: 4000000000000 in hex).
       41        41                As unsigned integers, we have 0 <= N < 2M,
       42        42                                      and     0 <= D < 2M.
       43        43
       44        44                We compare N:M and D:M by testing N & D sign bits.
       45        45                If N< M & D< M,  use DIV to get Q & R;
       46        46                if N< M & D>=M,  we know that Q==0 & R==N;
       47        47                if N>=M & D==1,  we know that Q==N & R==0;
       48        48                if N>=M & D< M,  use DFV (with long numerator) to get Q & R;
       49        49                if N>=M & D>=M & N< D,  we know that Q==0 & R==N;
       50        50                if N>=M & D>=M & N>=D,  we know that Q==1 & R==N-D.
       51        51
       52        52                Code to be genned for dvu & rmu ---
       53        53
       54        54                  dvu--------|---rmu---:     (A): (Q):
       55        55
       56        56                     ldq  N                   -    N
       57        57                     tpl  L2
       58        58                     lda  D                   D    N    N<0
       59        59                     tmi  L1
       60        60                     cmpa 1,dl                D    N    N<0 & D>=0
       61        61                     tze  L5|L3                         if D==1, Q=N & R=0
       62        62                     lda  0,dl                          D>=2 with long numerator
       63        63                     lls  1                                  use DVF to get Q,R.
       64        64                     dvf  D                   Q    R
       65        65                  lrs 36     |   ---          -    Q|R
       66        66                     tra  L5
       67        67               L1:   cmpq D                   D    N    N<0 & D<0, compare N:D
       68        68                     tnc  L3|L5                         if N<D, Q=0 & R=N
       69        69                  ldq  1,dl  |   sblq D                 if N>=D, Q=1 & R=N-D
       70        70                     tra  L5
       71        71               L2:   lda  D                   D    N    N>=0
       72        72                     tpl  L4                            if D>=0, use ordinary DIV to get R,
                               Q.
       73        73                  ---        |   tmi L5       D    N
CC.C03    File=zbk$cg_exp1:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74               L3:   ldq  0,dl
       75        75                     tra  L5
       76        76               L4:   div  D                   R    Q    N>=0 & D>=0
       77        77                  ---        |   lrs 36       -    Q|R
       78        78               L5:                            -    Q|R
       79        79             */
       80        80
       81        81             void zbk_div_unsigned (int op, ADR div)
       82        82             {
       83        83    1        /*    op==0 for dvu, op==1 for rmu.
       84        84    1              Numerator is in Q,
       85        85    1              divisor addressable via 'div',
       86        86    1              result will be in Q (for both ops).
       87        87    1              A is useable.
       88        88    1        */
       89        89    1           if (op==0) /*--- dvu ---*/ {
       90        90    2              instruc (-1,
       91        91    2
       92        92    2        /*       inst       form reg     adr   ofs    tag */
       93        93    2
       94        94    2        /*       INST_LDa,  RA,  REG_Q,  num,             */
       95        95    2                 INST_TPL,  NT,                14,    TAG_IC, /*L2*/
       96        96    2                 INST_LDa,  RA,  REG_A,  div,
       97        97    2                 INST_TMI,  NT,                8,     TAG_IC, /*L1*/
       98        98    2                 INST_CMPa, RNT, REG_A,        1,     TAG_DL,
       99        99    2                 INST_TZE,  NT,                15,    TAG_IC, /*L5*/
      100       100    2                 INST_LDa,  RT,  REG_A,               TAG_DL,
      101       101    2                 INST_LLS,  N,                 1,
      102       102    2                 INST_DVF,  A,           div,
      103       103    2                 INST_LRS,  N,                 36,
      104       104    2                 INST_TRA,  NT,                10,    TAG_IC, /*L5*/
      105       105    2        /*L1:*/  INST_CMPa, RA,  REG_Q,  div,
      106       106    2                 INST_TNC,  NT,                5,     TAG_IC, /*L3*/
      107       107    2                 INST_LDa,  RNT, REG_Q,        1,     TAG_DL,
      108       108    2                 INST_TRA,  NT,                6,     TAG_IC, /*L5*/
      109       109    2        /*L2:*/  INST_LDa,  RA,  REG_A,  div,
      110       110    2                 INST_TPL,  NT,                3,     TAG_IC, /*L4*/
CC.C03    File=zbk$cg_exp1:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111    2        /*L3:*/  INST_LDa,  RT,  REG_Q,               TAG_DL,
      112       112    2                 INST_TRA,  NT,                2,     TAG_IC, /*L5*/
      113       113    2        /*L4:*/  INST_DIV,  A,           div,
      114       114    2        /*L5:*/
      115       115    2                 -1);
      116       116    2           }
      117       117    1
      118       118    1        /********/
      119       119    1
      120       120    1           else       /*--- rmu ---*/ {
      121       121    2              instruc (-1,
      122       122    2
      123       123    2        /*       inst       form reg     adr   ofs    tag */
      124       124    2
      125       125    2        /*       INST_LDa,  RA,  REG_Q,  num,      */
      126       126    2                 INST_TPL,  NT,                13,    TAG_IC, /*L2*/
      127       127    2                 INST_LDa,  RA,  REG_A,  div,
      128       128    2                 INST_TMI,  NT,                7,     TAG_IC, /*L1*/
      129       129    2                 INST_CMPa, RNT, REG_A,        1,     TAG_DL,
      130       130    2                 INST_TZE,  NT,                12,    TAG_IC, /*L3*/
      131       131    2                 INST_LDa,  RT,  REG_A,               TAG_DL,
      132       132    2                 INST_LLS,  N,                 1,
      133       133    2                 INST_DVF,  A,           div,
      134       134    2                 INST_TRA,  NT,                12,    TAG_IC, /*L5*/
      135       135    2        /*L1:*/  INST_CMPa, RA,  REG_Q,  div,
      136       136    2                 INST_TNC,  NT,                10,    TAG_IC, /*L5*/
      137       137    2                 INST_SBLa, RA,  REG_Q,  div,
      138       138    2                 INST_TRA,  NT,                8,     TAG_IC, /*L5*/
      139       139    2        /*L2:*/  INST_LDa,  RA,  REG_A,  div,
      140       140    2                 INST_TPL,  NT,                4,     TAG_IC, /*L4*/
      141       141    2                 INST_TMI,  NT,                5,     TAG_IC, /*L5*/
      142       142    2        /*L3:*/  INST_LDa,  RT,  REG_Q,               TAG_DL,
      143       143    2                 INST_TRA,  NT,                3,     TAG_IC, /*L5*/
      144       144    2        /*L4:*/  INST_DIV,  A,           div,
      145       145    2                 INST_LRS,  N,                 36,
      146       146    2        /*L5:*/
      147       147    2                 -1);
CC.C03    File=zbk$cg_exp1:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    2           }
      149       149    1        }
      150       150
      151       151             /*==============================*/
      152       152
      153       153             #define VAR_TBL_SIZE 100
      154       154             struct  VAR_TBL var_tbl[VAR_TBL_SIZE], *var_tbl_top=var_tbl;
      155       155
      156       156             void zbk_enter_var_tbl (char *sym, long ofs, int depth, int align)
      157       157             {
      158       158    1           if (var_tbl_top >= var_tbl+VAR_TBL_SIZE) return;
      159       159    1
      160       160    1           if (sym) sym = zbk_append_dict (sym);
      161       161    1           var_tbl_top->sym = sym;
      162       162    1           var_tbl_top->ofs = ofs;
      163       163    1           var_tbl_top->depth = depth;
      164       164    1           var_tbl_top->align = align;
      165       165    1           var_tbl_top ++;
      166       166    1        }
      167       167
      168       168             struct VAR_TBL * zbk_var_tbl_search (char *sym, long ofs)
      169       169             {
      170       170    1           struct VAR_TBL *p;
      171       171    1           for (p=var_tbl; p<var_tbl_top; p++) {
      172       172    2              if (ofs!=p->ofs) continue;
      173       173    2              if (!sym && !p->sym) return p;
      174       174    2              if ( sym &&  p->sym && 0==strcmp(sym,p->sym)) return p;
      175       175    2           }
      176       176    1           return 0; /* not found */
      177       177    1        }
      178       178
      179       179             /*==============================*/
      180       180
      181       181             #define MSREG_TBL_SIZE 100
      182       182             struct  MSREG_TBL {
      183       183    1           long   ofs;
      184       184    1           long   size;
CC.C03    File=zbk$cg_exp1:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185    1        } msreg_tbl[MSREG_TBL_SIZE], *msreg_tbl_top=msreg_tbl;
      186       186
      187       187             void zbk_enter_msreg_tbl (long ofs, long size)
      188       188             {
      189       189    1           if (msreg_tbl_top >= msreg_tbl+MSREG_TBL_SIZE) return;
      190       190    1
      191       191    1           msreg_tbl_top->ofs = ofs;
      192       192    1           msreg_tbl_top->size = size;
      193       193    1           msreg_tbl_top ++;
      194       194    1        }
      195       195
---  Include file information  ---

   assert:h.:LIBRARY. is referenced
   string:h.:LIBRARY. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   zbk$cg_tree:h.:ZBC3TOU. is referenced
   zbk$cg_inst:h.:ZBC3TOU. is referenced
   zbk$cg_funs:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbk$cg_exp1:c.:ZBC3TSI
