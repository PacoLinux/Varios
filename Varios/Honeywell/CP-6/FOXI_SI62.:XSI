/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/********************************************************************
*                                                                   *
* This program  is a gratuitous contribution and  is offered as is. *
* Zenith  makes  no  representations  or  warranties  of  any kind, *
* express  or  implied,  relating  to  freedom  from  infringement, *
* accuracy,  error-freedom  or   performance,  and  shall  have  no *
* liability  or responsibility  to users  for damages  of any kind, *
* including special, indirect or consequential damages, arising out *
* of  or resulting  from use,  modification or  reproduction of the *
* program.                                                          *
*                                                                   *
* No  warranty  is  made  by  the  contributor  as to the accuracy, *
* maintenance, and functioning of the program and related material. *
* No  responsibility is  assumed by  the contributor  in connection *
* therewith.                                                        *
*                                                                   *
********************************************************************/
%Eject;
Find$Dcb:  Proc (Unit, Dcb_Number, Create_Flag, Merge_Flag)
           AltRet;
/*
       Find$Dcb returns a Dcb number, given any one of:
 
         a) A Fortran unit number, e.g. 100 (for F$100);
         b) A blank-terminated Text Dcb name;
         c) A Dcb number in the upper halfword (COBOL FIB).
 
       The Dcb number is returned as an integer (Sbin Word); if the Dcb
       does not exist (or cannot be created, if Create is specified), we
       return -1.  The default is to create the Dcb if it does not already
       exist; to override, specify Create_Flag as '0'B (.FALSE.) at run time.
 
       Andrew E. Birner, 30 Oct, '87
*/
/*
**       Parameters:
*/
       Dcl 1 Unit Param Caligned,
             2 Byte1 Ubin Byte Caligned,
             2 Byte2 Ubin Byte Caligned,
             2 Half2 Ubin Half Caligned,
             2 * Char (28) Caligned;
 
       Dcl Text_Name Redef Unit Char (32);
 
       Dcl Dcb_Number Param SBin Word;
       Dcl Create_Flag Param Bit (1) Aligned;
       Dcl Merge_Flag Param Bit (1) Aligned;
/*
**       Monitor stuff (DCB creation), etc.
*/
       %CP6$Ents;
       %Include CP_6_SUBS;
 
       %Fpt_GetDcb (Fptn=Find_it,
                    DcbName=TextC_Name,
                    DcbNum=DcbNum_Returned,
                    Test=No);
 
       %Vlp_Name (Fptn=TextC_Name,
                  Len=31);
       Dcl TextC_Name$ Ptr Constant Init (Addr (TextC_Name));
       %Vlp_NameV (Fptn=TextC_NameV,
                   StClass="Based (TextC_Name$)");
 
       Dcl DcbNum_Returned Ubin Word Static;
 
       Dcl Non_Zero_Table (0:57) Constant Bit (9) Caligned Init (
         '001'O*48, '000'O, '001'O*9 );
/*
**       Misc local storage
*/
       Dcl I Ubin;
       Dcl J Ubin;
       Dcl Unit_Text Char (6);
%Eject;
Start:;
/*
**       Figure out what we've got here . . .
*/
       If  Unit.Byte1 ~= 0  then Do;
/*
**         This should be a blank-terminated text Dcb name!
*/
         Call  Index (I, ' ', Text_Name)  WhenReturn Do;
           TextC_Name.L# = I;
           TextC_Name.Name# = SubStr (Text_Name, 0, I);
 
           Call  Get_the_Dcb_Number  WhenAltReturn Do;
             AltReturn;
           End;
          End; WhenAltReturn Do;
           Dcb_Number = -1;
           AltReturn;
         End;
        End; Else Do;
         If  Unit.Byte2 ~= 0  then Do;
/*
**           This is a FIB; DCB number is in upper halfword (i.e. Byte2)
*/
           If  DcbAddr (Unit.Byte2) ~= DcbAddr (0)  then Do;
             Dcb_Number = Unit.Byte2;
            End; Else Do;
             Dcb_Number = -1;
             AltReturn;
           End;
          End; Else Do;
/*
**           This is a Fortran-style Unit number!
*/
           Call  BinChar  (Unit_Text, Unit.Half2);
           Call  Search  (I, J, Non_Zero_Table, Unit_Text)  WhenReturn Do;
             Call  ConCat  (TextC_Name.Name#, 'F$', SubStr (Unit_Text, I));
             TextC_Name.L# = 2 + (LengthC (Unit_Text) - I);
             Call  Get_the_Dcb_Number  WhenAltReturn Do;
               AltReturn;
             End;
            End; WhenAltReturn Do;
             Dcb_Number = -1;   /* Don't allow F$0 */
             AltReturn;
           End;
 
         End;
       End;
 
       Return;
%Eject;
Get_the_Dcb_Number:  Proc  AltRet;
 
       Dcl B$ROS$ Ptr SymRef;
       %Include B$ROSEG;
       %F$DCB;
 
       %Equ  DcbTable$ = CharText ('B$ROS$->B$ROSeg.DcbPtr$->B$RODcb$');
 
       Dcl I Ubin;
Start:;
/*
**       First, look for the DCB ourselves.  (TextC_NameV maps onto TextC_Name.)
*/
       Do  I = %M$1STDCB# to B$ROS$->B$ROSeg.NumDcbs;
         If  %DcbTable$( I ) ~= Addr( Nil )  then Do;
           If  %DcbTable$( I )->F$DCB.DcbName.N = TextC_NameV.Name#  then Do;
             Dcb_Number = I;
             Return;
           End;
         End;
       End;
/*
**       Not found; Create it?
*/
       If  Addr (Create_Flag) ~= Addr (Nil)  then Do;
         If  ~Create_Flag  then Do;
           AltReturn;  /* Don't Create */
         End;
       End;
/*
**       Try to create; set Merge first . . .
*/
       If  Addr (Merge_Flag) ~= Addr (Nil)  then Do;
         Find_it.V.Merge# = Merge_Flag;
        End; Else Do;
         Find_it.V.Merge# = %No#;
       End;
 
       Call  M$GetDcb  (Find_it)  WhenReturn Do;
         If  DcbNum_Returned = 0  then Do;
           Dcb_Number = -1;
           AltReturn;
          End; Else Do;
           Dcb_Number = DcbNum_Returned;
         End;
        End; WhenAltReturn Do;
         Dcb_Number = -1;
         AltReturn;
       End;
 
       Return;
 
End    Get_the_Dcb_Number;
 
End    Find$Dcb;
