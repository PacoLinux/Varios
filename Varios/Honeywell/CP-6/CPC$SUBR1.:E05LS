VERSION E05

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:1    
        1        1        /*M* CPC$GETDCB, CPC$RELDCB, CPC$GETSEG, CPC$RELSEG */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DFC   */
        8        8        /**********************************************************************/
        9        9        /*F*   NAME:   CPC$GETDCB
       10       10               PURPOSE: To obtain a specified dcb
       11       11               DESCRIPTION: CPC$GETDCB gets a dcb specified by the passed parameters
       12       12        */
       13       13        /*D*   NAME:   CPC$GETDCB
       14       14               CALL:   CALL CPC$GETDCB(dcb#, dcbname);
       15       15               INTERFACE:
       16       16               INPUT: DCB# - number of dcb to be obtained
       17       17                      DCBNAME - name of dcb in TEXTC format
       18       18               OUTPUT:SEG$2.LLDCB# - number of M$LL dcb if thats which one was
       19       19                                     requested.
       20       20               DESCRIPTION: The specified dcb is obtained using the M$GETDCB pmme
       21       21                       and associated with the specified dcb pointer entry.
       22       22                       In the case of IBEX, IBEX1 and IBEX2, these are
       23       23                       reserved by the system for IBEX'S use and should always be
       24       24                       obtainable. A request for M$LL doesn't give a consistent
       25       25                       dcb number, which will be stored in SEG$2.LLDCB#.
       26       26        ***********************************************************************/
       27       27        CPC$GETDCB: PROC(P_DCB#, P_DCBN);
       28       28                   %INCLUDE B$JIT;
       29      318                   %INCLUDE B_MACROS_C;
       30      429                   %INCLUDE CP_6;
       31      510                   %INCLUDE CP_6_SUBS;
       32     1050                   %INCLUDE CP_MACROS_C;
       33     1802                   %INCLUDE CP_PERR_C;
       34     2140                   %INCLUDE CP_SUBS_C;
       35     3057                   %INCLUDE F_ERRORS_C;
       36     3297                   %INCLUDE XU_MACRO_C;
       37     6403                   %INCLUDE CP_DATA_R;
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:2    
       38     8966        /***** fpts *****/
       39     8967        %FPT_GETDCB(FPTN=FPT_GETDCB, STCLASS=AUTO);
       40     8982        %FPT_RELDCB(FPTN=FPT_RELDCB, STCLASS=AUTO);
       41     8996        %FPT_CLOSE (FPTN=FPT_CLOSE, STCLASS=AUTO);
       42     9038        %FPT_PROMPT (FPTN=CONT_PROMPT, PROMPT=ASK_CONTINUE, STCLASS=CONSTANT);
       43     9066    1   DCL ASK_CONTINUE CHAR(0) CONSTANT INIT ('Enter ''C'' to continue!');
       44     9067        %ERR_CODE (NAME=E_NODCBSPACE,MID#=CPC$SUBRMID,CODE#=E$NODCBSPACE,STCLASS=CONSTANT);
       45     9087        %ERR_CODE (NAME=E_DOQUIT,MID#=CPC$SUBRMID,CODE#=E$DOQUIT,STCLASS=CONSTANT);
       46     9107        /**** auto ****/
       47     9108    1   DCL RETURN_DCB# UBIN;
       48     9109    1   DCL TEMPBUF CHAR(80);
       49     9110    1   DCL ARS SBIN;
       50     9111    1   DCL DCB# SBIN;
       51     9112        /***** parameters *****/
       52     9113    1   DCL   P_DCB#    UBIN;
       53     9114        %TEXTC(NAME=P_DCBN, STCLASS=PARAM);
       54     9119        /***** Based structures *****/
       55     9120        %B$TCB (STCLASS="BASED(B$TCB$)");
       56     9123        %B$ALT;
       57     9131        %F$DCB;
       58     9188        %SEG$2;
       59     9248        %FPT_READ (STCLASS=BASED);
       60     9287        /**** entry points ****/
       61     9288    1   DCL CPA$FLUSH ENTRY;
       62     9289    1   DCL CPA$GO ENTRY(1) ALTRET;
       63     9290    1   DCL CPC$QUIT ENTRY ALTRET;
       64     9291    1   DCL CPC$SCREECH ENTRY(2);
       65     9292    1   DCL CPC$WRITEMSGE ENTRY(6);
       66     9293    1   DCL CXP$POSTERR ENTRY(5);
       67     9294        /**/
       68     9295    1           DCB# = P_DCB#;
       69     9296    1           FPT_GETDCB = CFPT_GETDCB;
       70     9297    1           FPT_GETDCB.V_ = VECTOR(FPT_GETDCB.V);
       71     9298    1           FPT_GETDCB.V.DCB# = DCB#;
       72     9299    1           FPT_GETDCB.V.MERGE# = %YES#;
       73     9300    1           FPT_GETDCB.DCBNUM_ = VECTOR(RETURN_DCB#);
       74     9301    1           FPT_GETDCB.DCBNAME_ = VECTOR(P_DCBN);
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:3    
       75     9302    1           IF DCB# = M$LL_NUM
       76     9303    2             THEN DO;
       77     9304    2               FPT_GETDCB.V.TEST# = %YES#;
       78     9305    2               CALL M$GETDCB(FPT_GETDCB) ALTRET (CANT_GET_M$LL);
       79     9306    2               IF RETURN_DCB# = 0  /* M$LL doesn't exist yet */
       80     9307    2                 THEN
       81     9308    2                   SEG$2.FLAGS.IBEX_OWNS_M$LL = %YES#;
       82     9309    2                 ELSE
       83     9310    3   CANT_GET_M$LL:  DO;
       84     9311    3                     DCB# = M$IBEX2_NUM;
       85     9312    3                     FPT_GETDCB.V.DCB# = DCB#;
       86     9313    3                     FPT_GETDCB.DCBNAME_ = VECTOR(IBEX2TXTC);
       87     9314    3                   END;
       88     9315    2               FPT_GETDCB.V.TEST# = %NO#;
       89     9316    2             END;
       90     9317    1           CALL M$GETDCB(FPT_GETDCB)
       91     9318    2             WHENALTRETURN DO;
       92     9319    2               IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$DCBHERE THEN GOTO RET;
       93     9320    2               IF DCB# = M$LL_NUM THEN GOTO CANT_GET_M$LL;
       94     9321        /*
       95     9322          ***** Couldn't get the dcb - BAD NEWS - because it's reserved.
       96     9323        */
       97     9324    2               IF NOT (B$JIT.CPFLAGS1 & %CP_JSTEP#)
       98     9325    3                 THEN DO;     /* if this happens at JOB STEP - trouble */
       99     9326    3                   SEG$2.LLDCB# = M$UC_NUM;  /* can't try using M$LL ! */
      100     9327        /*E*      ERROR: CPC-E$NODCBSPACE-C
      101     9328                  MESSAGE: Could not allocate space for %U1 DCB
      102     9329                  DESCRIPTION: There is no more room left in the ROSEG for
      103     9330                      this DCB, the process we're "over" took it all.
      104     9331        */
      105     9332    3                   CALL CPC$WRITEMSGE (E_NODCBSPACE,, P_DCBN);
      106     9333    3                   IF B$JIT.MODE = %M_INT# AND
      107     9334    3                      B$JIT.CPFLAGS1 & (%CP_YC# | %CP_YCPMME#)
      108     9335    3                     THEN
      109     9336    4                       DO;  /* if we can continue - see if we should */
      110     9337    4                         SEG$2.FPT_READUC$->FPT_READ.BUF_ = VECTOR(TEMPBUF);
      111     9338    5                         CALL M$PROMPT (CONT_PROMPT) WHENRETURN DO;
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:4    
      112     9339    6                           CALL M$READ (SEG$2.FPT_READUC$->FPT_READ) WHENRETURN DO;
      113     9340    6                             ARS = DCBADDR(M$UC_NUM)->F$DCB.ARS#;
      114     9341    6                             IF (SUBSTR (TEMPBUF, 0, ARS) = 'C') OR
      115     9342    6                                (SUBSTR (TEMPBUF, 0, ARS) = 'c')
      116     9343    6                               THEN
      117     9344    6                                 CALL CPA$GO;
      118     9345    6                           END;
      119     9346    5                         END;
      120     9347    4                       END;
      121     9348    3                   CALL CPA$FLUSH;
      122     9349    3                   SEG$2.FLAGS.CMD_STR_INT = %NO#;
      123     9350    3                   SEG$2.FLAGS.CPBUFFULL_AT_CSINT = %NO#;
      124     9351        /*E*      ERROR: CPC-E$DOQUIT-C
      125     9352                  MESSAGE: Doing a QUIT to retrieve space for %U1.
      126     9353                  DESCRIPTION: Quitting the current process is the only way
      127     9354                      to free up space in the ROSEG for this DCB.
      128     9355        */
      129     9356    3                   CALL CPC$WRITEMSGE (E_DOQUIT,, P_DCBN);
      130     9357    3                   CALL CPC$QUIT;
      131     9358    3                 END;
      132     9359    2               B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;
      133     9360    2               CALL CPC$SCREECH (E$SUAGDCB,CPC$SUBRMID);
      134     9361    2             END;  /* WHENALTRETURN DO */
      135     9362    1   RET:    IF P_DCB# = M$LL_NUM THEN SEG$2.LLDCB# = RETURN_DCB#;
      136     9363    1           RETURN;
      137     9364        %EJECT;
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:5    
      138     9365        /**********************************************************************/
      139     9366        /*F*   NAME:   CPC$RELDCB
      140     9367               PURPOSE: To release a specified dcb
      141     9368               DESCRIPTION: CPC$RELDCB releases the specified dcb
      142     9369        */
      143     9370        /*D*   NAME:   CPC$RELDCB
      144     9371               CALL: CALL CPC$RELDCB(dcb#)
      145     9372               INTERFACE: M$RELDCB
      146     9373               INPUT:  dcb# - number of dcb to be released
      147     9374               OUTPUT: none
      148     9375               DESCRIPTION: The specified dcb which are obtained by IBEX,
      149     9376                       are closed if open and then released via the M$RELDCB
      150     9377                       pmme.  If M$LL, also resets SEG$2.LLDCB#.
      151     9378        */
      152     9379        /**********************************************************************/
      153     9380    1   CPC$RELDCB: ENTRY(P_DCB#);
      154     9381        /**/
      155     9382    1           FPT_RELDCB = CFPT_RELDCB;
      156     9383    1           FPT_RELDCB.V_ = VECTOR(FPT_RELDCB.V);
      157     9384    1           FPT_RELDCB.V.DCB# = P_DCB#;
      158     9385    1           IF P_DCB# = M$LL_NUM
      159     9386    2             THEN DO;
      160     9387    2               FPT_RELDCB.V.DCB# = SEG$2.LLDCB#;
      161     9388    2               SEG$2.LLDCB# = 0;
      162     9389    2               SEG$2.FLAGS.IBEX_OWNS_M$LL = %NO#;
      163     9390    2             END;
      164     9391        /*
      165     9392             ***** If the dcb is currently open, close it...
      166     9393        */
      167     9394        /**/
      168     9395    1           IF DCBADDR(FPT_RELDCB.V.DCB#) ~= ADDR(NIL)
      169     9396    2             THEN DO;
      170     9397    2               IF DCBADDR(FPT_RELDCB.V.DCB#) -> F$DCB.FCD#
      171     9398    3                 THEN DO; /* dcb is still open */
      172     9399    3                   FPT_CLOSE = CFPT_CLOSE;
      173     9400    3                   FPT_CLOSE.V_ = VECTOR (FPT_CLOSE.V);
      174     9401    3                   FPT_CLOSE.V.DCB# = FPT_RELDCB.V.DCB#;
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:6    
      175     9402    3                   IF DCBADDR(FPT_CLOSE.V.DCB#) -> F$DCB.NRECS# ~= 0
      176     9403    3                   THEN /* only save if there's something to save */
      177     9404    3                     FPT_CLOSE.V.DISP# = %SAVE#;
      178     9405    4                   CALL M$CLOSE(FPT_CLOSE) WHENALTRETURN DO; END;
      179     9406    3                 END;
      180     9407    2               CALL M$RELDCB(FPT_RELDCB)
      181     9408    3                 WHENALTRETURN DO;
      182     9409    3                   B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;
      183     9410    3                   CALL CPC$SCREECH (E$SUAGDCB, CPC$SUBRMID);
      184     9411    3                 END;
      185     9412    2             END;
      186     9413    1           RETURN;
      187     9414    1   END CPC$GETDCB;
      188     9415                   %EOD;

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:7    
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPC$GETDCB.

   Procedure CPC$GETDCB requires 236 words for executable code.
   Procedure CPC$GETDCB requires 76 words of local(AUTO) storage.

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:8    

 Object Unit name= CPC$GETDCB                                 File name= CPC$SUBR1.:E05TOU
 UTS= JUL 29 '97 11:26:00.44 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     21     25  CPC$GETDCB
    2   Proc  even  none   236    354  CPC$GETDCB
    3  RoData even  none    18     22  CPC$GETDCB

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        2  CPC$GETDCB
     2    252                  yes      Std        1  CPC$RELDCB

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       6 CPC$WRITEMSGE
 yes     yes           Std       0 CPC$QUIT
         yes           Std       2 CPC$SCREECH
 yes     yes           Std       1 CPA$GO
         yes           Std       0 CPA$FLUSH
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:9    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CFPT_CLOSE                            CFPT_GETDCB
     CFPT_RELDCB                      r    SEG2$                            r    B$JIT$
r    B$TCB$                                M$UC_NUM                              M$IBEX2_NUM
     M$LL_NUM                              IBEX2TXTC                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:10   


        1        1        /*M* CPC$GETDCB, CPC$RELDCB, CPC$GETSEG, CPC$RELSEG */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*  DMC,DFC   */
        8        8        /**********************************************************************/
        9        9        /*F*   NAME:   CPC$GETDCB
       10       10               PURPOSE: To obtain a specified dcb
       11       11               DESCRIPTION: CPC$GETDCB gets a dcb specified by the passed parameters
       12       12        */
       13       13        /*D*   NAME:   CPC$GETDCB
       14       14               CALL:   CALL CPC$GETDCB(dcb#, dcbname);
       15       15               INTERFACE:
       16       16               INPUT: DCB# - number of dcb to be obtained
       17       17                      DCBNAME - name of dcb in TEXTC format
       18       18               OUTPUT:SEG$2.LLDCB# - number of M$LL dcb if thats which one was
       19       19                                     requested.
       20       20               DESCRIPTION: The specified dcb is obtained using the M$GETDCB pmme
       21       21                       and associated with the specified dcb pointer entry.
       22       22                       In the case of IBEX, IBEX1 and IBEX2, these are
       23       23                       reserved by the system for IBEX'S use and should always be
       24       24                       obtainable. A request for M$LL doesn't give a consistent
       25       25                       dcb number, which will be stored in SEG$2.LLDCB#.
       26       26        ***********************************************************************/
       27       27        CPC$GETDCB: PROC(P_DCB#, P_DCBN);

     27  2 000000   000000 700200 xent  CPC$GETDCB   TSX0  ! X66_AUTO_2
         2 000001   000114 000002                    ZERO    76,2

       28       28                   %INCLUDE B$JIT;
       29      318                   %INCLUDE B_MACROS_C;
       30      429                   %INCLUDE CP_6;
       31      510                   %INCLUDE CP_6_SUBS;
       32     1050                   %INCLUDE CP_MACROS_C;
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:11   
       33     1802                   %INCLUDE CP_PERR_C;
       34     2140                   %INCLUDE CP_SUBS_C;
       35     3057                   %INCLUDE F_ERRORS_C;
       36     3297                   %INCLUDE XU_MACRO_C;
       37     6403                   %INCLUDE CP_DATA_R;
       38     8966        /***** fpts *****/
       39     8967        %FPT_GETDCB(FPTN=FPT_GETDCB, STCLASS=AUTO);
       40     8982        %FPT_RELDCB(FPTN=FPT_RELDCB, STCLASS=AUTO);
       41     8996        %FPT_CLOSE (FPTN=FPT_CLOSE, STCLASS=AUTO);
       42     9038        %FPT_PROMPT (FPTN=CONT_PROMPT, PROMPT=ASK_CONTINUE, STCLASS=CONSTANT);
       43     9066    1   DCL ASK_CONTINUE CHAR(0) CONSTANT INIT ('Enter ''C'' to continue!');
       44     9067        %ERR_CODE (NAME=E_NODCBSPACE,MID#=CPC$SUBRMID,CODE#=E$NODCBSPACE,STCLASS=CONSTANT);
       45     9087        %ERR_CODE (NAME=E_DOQUIT,MID#=CPC$SUBRMID,CODE#=E$DOQUIT,STCLASS=CONSTANT);
       46     9107        /**** auto ****/
       47     9108    1   DCL RETURN_DCB# UBIN;
       48     9109    1   DCL TEMPBUF CHAR(80);
       49     9110    1   DCL ARS SBIN;
       50     9111    1   DCL DCB# SBIN;
       51     9112        /***** parameters *****/
       52     9113    1   DCL   P_DCB#    UBIN;
       53     9114        %TEXTC(NAME=P_DCBN, STCLASS=PARAM);
       54     9119        /***** Based structures *****/
       55     9120        %B$TCB (STCLASS="BASED(B$TCB$)");
       56     9123        %B$ALT;
       57     9131        %F$DCB;
       58     9188        %SEG$2;
       59     9248        %FPT_READ (STCLASS=BASED);
       60     9287        /**** entry points ****/
       61     9288    1   DCL CPA$FLUSH ENTRY;
       62     9289    1   DCL CPA$GO ENTRY(1) ALTRET;
       63     9290    1   DCL CPC$QUIT ENTRY ALTRET;
       64     9291    1   DCL CPC$SCREECH ENTRY(2);
       65     9292    1   DCL CPC$WRITEMSGE ENTRY(6);
       66     9293    1   DCL CXP$POSTERR ENTRY(5);
       67     9294        /**/
       68     9295    1           DCB# = P_DCB#;

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:12   
   9295  2 000002   200003 470500                    LDP0    @P_DCB#,,AUTO
         2 000003   000000 235100                    LDA     0,,PR0
         2 000004   200106 755100                    STA     DCB#,,AUTO

       69     9296    1           FPT_GETDCB = CFPT_GETDCB;

   9296  2 000005   000100 100400                    MLR     fill='000'O
         2 000006   000000 000040 xsym               ADSC9   CFPT_GETDCB              cn=0,n=32
         2 000007   200006 000040                    ADSC9   FPT_GETDCB,,AUTO         cn=0,n=32

       70     9297    1           FPT_GETDCB.V_ = VECTOR(FPT_GETDCB.V);

   9297  2 000010   000000 235000 3                  LDA     0
         2 000011   200110 452500                    STP2    DCB#+2,,AUTO
         2 000012   200110 236100                    LDQ     DCB#+2,,AUTO
         2 000013   000014 036003                    ADLQ    12,DU
         2 000014   200006 757100                    STAQ    FPT_GETDCB,,AUTO

       71     9298    1           FPT_GETDCB.V.DCB# = DCB#;

   9298  2 000015   200106 720100                    LXL0    DCB#,,AUTO
         2 000016   200014 740100                    STX0    FPT_GETDCB+6,,AUTO

       72     9299    1           FPT_GETDCB.V.MERGE# = %YES#;

   9299  2 000017   400000 236007                    LDQ     -131072,DL
         2 000020   200014 256100                    ORSQ    FPT_GETDCB+6,,AUTO

       73     9300    1           FPT_GETDCB.DCBNUM_ = VECTOR(RETURN_DCB#);

   9300  2 000021   777640 235007                    LDA     -96,DL
         2 000022   200110 452500                    STP2    DCB#+2,,AUTO
         2 000023   200110 236100                    LDQ     DCB#+2,,AUTO
         2 000024   000060 036003                    ADLQ    48,DU
         2 000025   200012 757100                    STAQ    FPT_GETDCB+4,,AUTO

       74     9301    1           FPT_GETDCB.DCBNAME_ = VECTOR(P_DCBN);
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:13   

   9301  2 000026   200004 471500                    LDP1    @P_DCBN,,AUTO
         2 000027   000100 101500                    MRL     fill='000'O
         2 000030   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 000031   200110 000002                    ADSC9   DCB#+2,,AUTO             cn=0,n=2
         2 000032   200110 221100                    LDX1    DCB#+2,,AUTO
         2 000033   000001 622011                    EAX2    1,X1
         2 000034   000000 635012                    EAA     0,X2
         2 000035   000002 771000                    ARL     2
         2 000036   000140 135007                    SBLA    96,DL
         2 000037   200004 236100                    LDQ     @P_DCBN,,AUTO
         2 000040   200010 757100                    STAQ    FPT_GETDCB+2,,AUTO

       75     9302    1           IF DCB# = M$LL_NUM

   9302  2 000041   200106 236100                    LDQ     DCB#,,AUTO
         2 000042   000071 604000 2                  TMI     s:9317
         2 000043   000000 116000 xsym               CMPQ    M$LL_NUM
         2 000044   000071 601000 2                  TNZ     s:9317

       76     9303    2             THEN DO;

       77     9304    2               FPT_GETDCB.V.TEST# = %YES#;

   9304  2 000045   200000 236007                    LDQ     65536,DL
         2 000046   200014 256100                    ORSQ    FPT_GETDCB+6,,AUTO

       78     9305    2               CALL M$GETDCB(FPT_GETDCB) ALTRET (CANT_GET_M$LL);

   9305  2 000047   200006 630500                    EPPR0   FPT_GETDCB,,AUTO
         2 000050   460002 713400                    CLIMB   alt,+24578
         2 000051   401000 401760                    pmme    nvectors=3
         2 000052   000061 702000 2                  TSX2    CANT_GET_M$LL

       79     9306    2               IF RETURN_DCB# = 0  /* M$LL doesn't exist yet */

   9306  2 000053   200060 235100                    LDA     RETURN_DCB#,,AUTO
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:14   
         2 000054   000061 601000 2                  TNZ     CANT_GET_M$LL

       80     9307    2                 THEN
       81     9308    2                   SEG$2.FLAGS.IBEX_OWNS_M$LL = %YES#;

   9308  2 000055   000000 470400 xsym               LDP0    SEG2$
         2 000056   000004 236003                    LDQ     4,DU
         2 000057   000000 256100                    ORSQ    0,,PR0
         2 000060   000067 710000 2                  TRA     s:9315

       82     9309    2                 ELSE
       83     9310    3   CANT_GET_M$LL:  DO;

   9310  2 000061                       CANT_GET_M$* null
       84     9311    3                     DCB# = M$IBEX2_NUM;

   9311  2 000061   000000 235000 xsym               LDA     M$IBEX2_NUM
         2 000062   200106 755100                    STA     DCB#,,AUTO

       85     9312    3                     FPT_GETDCB.V.DCB# = DCB#;

   9312  2 000063   000000 620005                    EAX0    0,AL
         2 000064   200014 740100                    STX0    FPT_GETDCB+6,,AUTO

       86     9313    3                     FPT_GETDCB.DCBNAME_ = VECTOR(IBEX2TXTC);

   9313  2 000065   000002 237000 3                  LDAQ    2
         2 000066   200010 757100                    STAQ    FPT_GETDCB+2,,AUTO

       87     9314    3                   END;

       88     9315    2               FPT_GETDCB.V.TEST# = %NO#;

   9315  2 000067   000001 236000 3                  LDQ     1
         2 000070   200014 356100                    ANSQ    FPT_GETDCB+6,,AUTO

       89     9316    2             END;
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:15   

       90     9317    1           CALL M$GETDCB(FPT_GETDCB)

   9317  2 000071   200006 630500                    EPPR0   FPT_GETDCB,,AUTO
         2 000072   460002 713400                    CLIMB   alt,+24578
         2 000073   401000 401760                    pmme    nvectors=3
         2 000074   000076 702000 2                  TSX2    s:9319
         2 000075   000242 710000 2                  TRA     RET

       91     9318    2             WHENALTRETURN DO;

       92     9319    2               IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$DCBHERE THEN GOTO RET;

   9319  2 000076   000000 470400 xsym               LDP0    B$TCB$
         2 000077   000000 471500                    LDP1    0,,PR0
         2 000100   100102 236100                    LDQ     66,,PR1
         2 000101   377770 376007                    ANQ     131064,DL
         2 000102   001470 116007                    CMPQ    824,DL
         2 000103   000242 600000 2                  TZE     RET

       93     9320    2               IF DCB# = M$LL_NUM THEN GOTO CANT_GET_M$LL;

   9320  2 000104   200106 236100                    LDQ     DCB#,,AUTO
         2 000105   000110 604000 2                  TMI     s:9324
         2 000106   000000 116000 xsym               CMPQ    M$LL_NUM
         2 000107   000061 600000 2                  TZE     CANT_GET_M$LL

       94     9321        /*
       95     9322          ***** Couldn't get the dcb - BAD NEWS - because it's reserved.
       96     9323        */
       97     9324    2               IF NOT (B$JIT.CPFLAGS1 & %CP_JSTEP#)

   9324  2 000110   000000 473400 xsym               LDP3    B$JIT$
         2 000111   300143 236100                    LDQ     99,,PR3
         2 000112   000022 376000 1                  ANQ     E_DOQUIT+1
         2 000113   000231 601000 2                  TNZ     s:9359

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:16   
       98     9325    3                 THEN DO;     /* if this happens at JOB STEP - trouble */

       99     9326    3                   SEG$2.LLDCB# = M$UC_NUM;  /* can't try using M$LL ! */

   9326  2 000114   000000 720000 xsym               LXL0    M$UC_NUM
         2 000115   000000 474400 xsym               LDP4    SEG2$
         2 000116   400000 440100                    SXL0    0,,PR4

      100     9327        /*E*      ERROR: CPC-E$NODCBSPACE-C
      101     9328                  MESSAGE: Could not allocate space for %U1 DCB
      102     9329                  DESCRIPTION: There is no more room left in the ROSEG for
      103     9330                      this DCB, the process we're "over" took it all.
      104     9331        */
      105     9332    3                   CALL CPC$WRITEMSGE (E_NODCBSPACE,, P_DCBN);

   9332  2 000117   200004 236100                    LDQ     @P_DCBN,,AUTO
         2 000120   200112 756100                    STQ     DCB#+4,,AUTO
         2 000121   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000122   000004 235000 3                  LDA     4
         2 000123   200110 757100                    STAQ    DCB#+2,,AUTO
         2 000124   200110 630500                    EPPR0   DCB#+2,,AUTO
         2 000125   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000126   000000 701000 xent               TSX1    CPC$WRITEMSGE
         2 000127   000000 011000                    NOP     0

      106     9333    3                   IF B$JIT.MODE = %M_INT# AND

   9333  2 000130   000000 470400 xsym               LDP0    B$JIT$
         2 000131   000000 236100                    LDQ     0,,PR0
         2 000132   740000 376003                    ANQ     -16384,DU
         2 000133   140000 116003                    CMPQ    49152,DU
         2 000134   000205 601000 2                  TNZ     s:9348
         2 000135   000023 236000 1                  LDQ     E_DOQUIT+2
         2 000136   000024 276000 1                  ORQ     E_DOQUIT+3
         2 000137   000143 376100                    ANQ     99,,PR0
         2 000140   000205 600000 2                  TZE     s:9348

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:17   
      107     9334    3                      B$JIT.CPFLAGS1 & (%CP_YC# | %CP_YCPMME#)
      108     9335    3                     THEN
      109     9336    4                       DO;  /* if we can continue - see if we should */

      110     9337    4                         SEG$2.FPT_READUC$->FPT_READ.BUF_ = VECTOR(TEMPBUF);

   9337  2 000141   000000 471400 xsym               LDP1    SEG2$
         2 000142   100156 473500                    LDP3    110,,PR1
         2 000143   000005 235000 3                  LDA     5
         2 000144   200110 452500                    STP2    DCB#+2,,AUTO
         2 000145   200110 236100                    LDQ     DCB#+2,,AUTO
         2 000146   000061 036003                    ADLQ    49,DU
         2 000147   300004 757100                    STAQ    4,,PR3

      111     9338    5                         CALL M$PROMPT (CONT_PROMPT) WHENRETURN DO;

   9338  2 000150   000000 630400 1                  EPPR0   CONT_PROMPT
         2 000151   560002 713400                    CLIMB   alt,+57346
         2 000152   401000 401760                    pmme    nvectors=3
         2 000153   000205 702000 2                  TSX2    s:9348

      112     9339    6                           CALL M$READ (SEG$2.FPT_READUC$->FPT_READ) WHENRETURN DO;

   9339  2 000154   000000 470400 xsym               LDP0    SEG2$
         2 000155   000156 471500                    LDP1    110,,PR0
         2 000156   100000 630500                    EPPR0   0,,PR1
         2 000157   440000 713400                    CLIMB   alt,read
         2 000160   401400 401760                    pmme    nvectors=4
         2 000161   000205 702000 2                  TSX2    s:9348

      113     9340    6                             ARS = DCBADDR(M$UC_NUM)->F$DCB.ARS#;

   9340  2 000162   000006 470400 3                  LDP0    6
         2 000163   000000 471500                    LDP1    0,,PR0
         2 000164   000000 720000 xsym               LXL0    M$UC_NUM
         2 000165   100000 473510                    LDP3    0,X0,PR1
         2 000166   300000 235100                    LDA     0,,PR3
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:18   
         2 000167   200105 755100                    STA     ARS,,AUTO

      114     9341    6                             IF (SUBSTR (TEMPBUF, 0, ARS) = 'C') OR

   9341  2 000170   000000 621005                    EAX1    0,AL
         2 000171   040000 106540                    CMPC    fill='040'O
         2 000172   200061 000011                    ADSC9   TEMPBUF,,AUTO            cn=0,n=*X1
         2 000173   000007 000001 3                  ADSC9   7                        cn=0,n=1
         2 000174   000202 600000 2                  TZE     s:9344
         2 000175   200105 721100                    LXL1    ARS,,AUTO
         2 000176   040000 106540                    CMPC    fill='040'O
         2 000177   200061 000011                    ADSC9   TEMPBUF,,AUTO            cn=0,n=*X1
         2 000200   000010 000001 3                  ADSC9   8                        cn=0,n=1
         2 000201   000205 601000 2                  TNZ     s:9348

      115     9342    6                                (SUBSTR (TEMPBUF, 0, ARS) = 'c')
      116     9343    6                               THEN
      117     9344    6                                 CALL CPA$GO;

   9344  2 000202   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000203   000000 701000 xent               TSX1    CPA$GO
         2 000204   000000 011000                    NOP     0

      118     9345    6                           END;

      119     9346    5                         END;

      120     9347    4                       END;

      121     9348    3                   CALL CPA$FLUSH;

   9348  2 000205   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000206   000000 701000 xent               TSX1    CPA$FLUSH
         2 000207   000000 011000                    NOP     0

      122     9349    3                   SEG$2.FLAGS.CMD_STR_INT = %NO#;

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:19   
   9349  2 000210   000000 470400 xsym               LDP0    SEG2$
         2 000211   000011 236000 3                  LDQ     9
         2 000212   000000 356100                    ANSQ    0,,PR0

      123     9350    3                   SEG$2.FLAGS.CPBUFFULL_AT_CSINT = %NO#;

   9350  2 000213   000012 236000 3                  LDQ     10
         2 000214   000000 356100                    ANSQ    0,,PR0

      124     9351        /*E*      ERROR: CPC-E$DOQUIT-C
      125     9352                  MESSAGE: Doing a QUIT to retrieve space for %U1.
      126     9353                  DESCRIPTION: Quitting the current process is the only way
      127     9354                      to free up space in the ROSEG for this DCB.
      128     9355        */
      129     9356    3                   CALL CPC$WRITEMSGE (E_DOQUIT,, P_DCBN);

   9356  2 000215   200004 236100                    LDQ     @P_DCBN,,AUTO
         2 000216   200112 756100                    STQ     DCB#+4,,AUTO
         2 000217   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000220   000013 235000 3                  LDA     11
         2 000221   200110 757100                    STAQ    DCB#+2,,AUTO
         2 000222   200110 630500                    EPPR0   DCB#+2,,AUTO
         2 000223   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000224   000000 701000 xent               TSX1    CPC$WRITEMSGE
         2 000225   000000 011000                    NOP     0

      130     9357    3                   CALL CPC$QUIT;

   9357  2 000226   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000227   000000 701000 xent               TSX1    CPC$QUIT
         2 000230   000000 011000                    NOP     0

      131     9358    3                 END;

      132     9359    2               B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;

   9359  2 000231   000000 470400 xsym               LDP0    B$TCB$
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:20   
         2 000232   000000 471500                    LDP1    0,,PR0
         2 000233   100102 236100                    LDQ     66,,PR1
         2 000234   000000 473400 xsym               LDP3    B$JIT$
         2 000235   300144 756100                    STQ     100,,PR3

      133     9360    2               CALL CPC$SCREECH (E$SUAGDCB,CPC$SUBRMID);

   9360  2 000236   000016 630400 3                  EPPR0   14
         2 000237   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000240   000000 701000 xent               TSX1    CPC$SCREECH
         2 000241   000000 011000                    NOP     0

      134     9361    2             END;  /* WHENALTRETURN DO */

      135     9362    1   RET:    IF P_DCB# = M$LL_NUM THEN SEG$2.LLDCB# = RETURN_DCB#;

   9362  2 000242   200003 470500       RET          LDP0    @P_DCB#,,AUTO
         2 000243   000000 236100                    LDQ     0,,PR0
         2 000244   000000 116000 xsym               CMPQ    M$LL_NUM
         2 000245   000251 601000 2                  TNZ     s:9363

   9362  2 000246   200060 720100                    LXL0    RETURN_DCB#,,AUTO
         2 000247   000000 471400 xsym               LDP1    SEG2$
         2 000250   100000 440100                    SXL0    0,,PR1

      136     9363    1           RETURN;

   9363  2 000251   000000 702200 xent               TSX2  ! X66_ARET

      137     9364        %EJECT;
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:21   
      138     9365        /**********************************************************************/
      139     9366        /*F*   NAME:   CPC$RELDCB
      140     9367               PURPOSE: To release a specified dcb
      141     9368               DESCRIPTION: CPC$RELDCB releases the specified dcb
      142     9369        */
      143     9370        /*D*   NAME:   CPC$RELDCB
      144     9371               CALL: CALL CPC$RELDCB(dcb#)
      145     9372               INTERFACE: M$RELDCB
      146     9373               INPUT:  dcb# - number of dcb to be released
      147     9374               OUTPUT: none
      148     9375               DESCRIPTION: The specified dcb which are obtained by IBEX,
      149     9376                       are closed if open and then released via the M$RELDCB
      150     9377                       pmme.  If M$LL, also resets SEG$2.LLDCB#.
      151     9378        */
      152     9379        /**********************************************************************/
      153     9380    1   CPC$RELDCB: ENTRY(P_DCB#);

   9380  2 000252   000000 700200 xent  CPC$RELDCB   TSX0  ! X66_AUTO_2
         2 000253   000114 000002                    ZERO    76,2

      154     9381        /**/
      155     9382    1           FPT_RELDCB = CFPT_RELDCB;

   9382  2 000254   000100 100400                    MLR     fill='000'O
         2 000255   000000 000020 xsym               ADSC9   CFPT_RELDCB              cn=0,n=16
         2 000256   200016 000020                    ADSC9   FPT_RELDCB,,AUTO         cn=0,n=16

      156     9383    1           FPT_RELDCB.V_ = VECTOR(FPT_RELDCB.V);

   9383  2 000257   000000 235000 3                  LDA     0
         2 000260   200110 452500                    STP2    DCB#+2,,AUTO
         2 000261   200110 236100                    LDQ     DCB#+2,,AUTO
         2 000262   000020 036003                    ADLQ    16,DU
         2 000263   200016 757100                    STAQ    FPT_RELDCB,,AUTO

      157     9384    1           FPT_RELDCB.V.DCB# = P_DCB#;

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:22   
   9384  2 000264   200003 470500                    LDP0    @P_DCB#,,AUTO
         2 000265   000000 720100                    LXL0    0,,PR0
         2 000266   200020 740100                    STX0    FPT_RELDCB+2,,AUTO

      158     9385    1           IF P_DCB# = M$LL_NUM

   9385  2 000267   000000 236100                    LDQ     0,,PR0
         2 000270   000000 116000 xsym               CMPQ    M$LL_NUM
         2 000271   000301 601000 2                  TNZ     s:9395

      159     9386    2             THEN DO;

      160     9387    2               FPT_RELDCB.V.DCB# = SEG$2.LLDCB#;

   9387  2 000272   000000 471400 xsym               LDP1    SEG2$
         2 000273   100000 721100                    LXL1    0,,PR1
         2 000274   200020 741100                    STX1    FPT_RELDCB+2,,AUTO

      161     9388    2               SEG$2.LLDCB# = 0;

   9388  2 000275   000000 220003                    LDX0    0,DU
         2 000276   100000 440100                    SXL0    0,,PR1

      162     9389    2               SEG$2.FLAGS.IBEX_OWNS_M$LL = %NO#;

   9389  2 000277   000020 236000 3                  LDQ     16
         2 000300   100000 356100                    ANSQ    0,,PR1

      163     9390    2             END;

      164     9391        /*
      165     9392             ***** If the dcb is currently open, close it...
      166     9393        */
      167     9394        /**/
      168     9395    1           IF DCBADDR(FPT_RELDCB.V.DCB#) ~= ADDR(NIL)

   9395  2 000301   000006 471400 3                  LDP1    6
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:23   
         2 000302   100000 473500                    LDP3    0,,PR1
         2 000303   200020 220100                    LDX0    FPT_RELDCB+2,,AUTO
         2 000304   300000 236110                    LDQ     0,X0,PR3
         2 000305   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000306   000353 600000 2                  TZE     s:9413

      169     9396    2             THEN DO;

      170     9397    2               IF DCBADDR(FPT_RELDCB.V.DCB#) -> F$DCB.FCD#

   9397  2 000307   300000 474510                    LDP4    0,X0,PR3
         2 000310   400031 236100                    LDQ     25,,PR4
         2 000311   020000 316007                    CANQ    8192,DL
         2 000312   000335 600000 2                  TZE     s:9407

      171     9398    3                 THEN DO; /* dcb is still open */

      172     9399    3                   FPT_CLOSE = CFPT_CLOSE;

   9399  2 000313   000100 100400                    MLR     fill='000'O
         2 000314   000000 000170 xsym               ADSC9   CFPT_CLOSE               cn=0,n=120
         2 000315   200022 000170                    ADSC9   FPT_CLOSE,,AUTO          cn=0,n=120

      173     9400    3                   FPT_CLOSE.V_ = VECTOR (FPT_CLOSE.V);

   9400  2 000316   000021 235000 3                  LDA     17
         2 000317   200110 452500                    STP2    DCB#+2,,AUTO
         2 000320   200110 236100                    LDQ     DCB#+2,,AUTO
         2 000321   000054 036003                    ADLQ    44,DU
         2 000322   200022 757100                    STAQ    FPT_CLOSE,,AUTO

      174     9401    3                   FPT_CLOSE.V.DCB# = FPT_RELDCB.V.DCB#;

   9401  2 000323   200054 740100                    STX0    FPT_CLOSE+26,,AUTO

      175     9402    3                   IF DCBADDR(FPT_CLOSE.V.DCB#) -> F$DCB.NRECS# ~= 0

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:24   
   9402  2 000324   400042 235100                    LDA     34,,PR4
         2 000325   000330 600000 2                  TZE     s:9405

      176     9403    3                   THEN /* only save if there's something to save */
      177     9404    3                     FPT_CLOSE.V.DISP# = %SAVE#;

   9404  2 000326   000002 236007                    LDQ     2,DL
         2 000327   200054 552104                    STBQ    FPT_CLOSE+26,'04'O,AUTO

      178     9405    4                   CALL M$CLOSE(FPT_CLOSE) WHENALTRETURN DO; END;

   9405  2 000330   200022 630500                    EPPR0   FPT_CLOSE,,AUTO
         2 000331   450001 713400                    CLIMB   alt,close
         2 000332   406000 401760                    pmme    nvectors=13
         2 000333   000335 702000 2                  TSX2    s:9407
         2 000334   000335 710000 2                  TRA     s:9407

      179     9406    3                 END;

      180     9407    2               CALL M$RELDCB(FPT_RELDCB)

   9407  2 000335   200016 630500                    EPPR0   FPT_RELDCB,,AUTO
         2 000336   460003 713400                    CLIMB   alt,+24579
         2 000337   400000 401760                    pmme    nvectors=1
         2 000340   000342 702000 2                  TSX2    s:9409
         2 000341   000353 710000 2                  TRA     s:9413

      181     9408    3                 WHENALTRETURN DO;

      182     9409    3                   B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;

   9409  2 000342   000000 470400 xsym               LDP0    B$TCB$
         2 000343   000000 471500                    LDP1    0,,PR0
         2 000344   100102 236100                    LDQ     66,,PR1
         2 000345   000000 473400 xsym               LDP3    B$JIT$
         2 000346   300144 756100                    STQ     100,,PR3

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:25   
      183     9410    3                   CALL CPC$SCREECH (E$SUAGDCB, CPC$SUBRMID);

   9410  2 000347   000016 630400 3                  EPPR0   14
         2 000350   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 000351   000000 701000 xent               TSX1    CPC$SCREECH
         2 000352   000000 011000                    NOP     0

      184     9411    3                 END;

      185     9412    2             END;

      186     9413    1           RETURN;

   9413  2 000353   000000 702200 xent               TSX2  ! X66_ARET
      187     9414    1   END CPC$GETDCB;
      188     9415                   %EOD;

PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:26   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   CP_SUBS_C.:E05TOU  is referenced.
   CP_PERR_C.:E05TOU  is referenced.
   CP_MACROS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPC$GETDCB.
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:27   

 **** Variables and constants ****

  ****  Section 001 RoData CPC$GETDCB

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    12-0-0/c CHAR(22)    r     1 ASK_CONTINUE               0-0-0/d STRC(360)   r     1 CONT_PROMPT
    21-0-0/w STRC        r     1 E_DOQUIT                  20-0-0/w STRC        r     1 E_NODCBSPACE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @P_DCB#                    4-0-0/w PTR         r     1 @P_DCBN
   105-0-0/w SBIN        r     1 ARS                      106-0-0/w SBIN        r     1 DCB#
    22-0-0/d STRC(1080)  r     1 FPT_CLOSE                  6-0-0/d STRC(288)   r     1 FPT_GETDCB
    16-0-0/d STRC(144)   r     1 FPT_RELDCB                *0-0-0/w UBIN        r     1 P_DCB#
    *0-0-0/c ASTR(9)     r     1 P_DCBN                    60-0-0/w UBIN        r     1 RETURN_DCB#
    61-0-0/c CHAR(80)    r     1 TEMPBUF

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/d STRC(1080)  r     1 CFPT_CLOSE                 0-0-0/d STRC(288)   r     1 CFPT_GETDCB
     0-0-0/d STRC(144)   r     1 CFPT_RELDCB                0-0-0/d STRC(72)    r     1 IBEX2TXTC
     0-0-0/w UBIN        r     1 M$IBEX2_NUM                0-0-0/w UBIN        r     1 M$LL_NUM
     0-0-0/w UBIN        r     1 M$UC_NUM                   0-0-0/w PTR         r     1 SEG2$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:28   

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/d STRC(504)   r     1 FPT_READ                   0-0-0N  NULL        r     1 M$UC
     0-0-0/w STRC(6264)  r     1 SEG$2


   Procedure CPC$GETDCB requires 236 words for executable code.
   Procedure CPC$GETDCB requires 76 words of local(AUTO) storage.
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:29   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:30   
          MINI XREF LISTING

ARS
      9110**DCL      9340<<ASSIGN   9341>>IF       9341>>IF
ASK_CONTINUE
      9066**DCL      9060--DCLINIT
B$ALT.CODE
      9125**DCL      9125--REDEF    9126--REDEF    9126--REDEF
B$ALT.ERR
      9126**DCL      9359>>ASSIGN   9409>>ASSIGN
B$ALT.ERR.CODE
      9127**DCL      9319>>IF
B$ALT.ERR.ERR#
      9127**DCL      9127--REDEF
B$ALT.EVID
      9126**DCL      9126--REDEF    9126--REDEF
B$JIT.CPFLAGS1
       131**DCL      9324>>IF       9333>>IF
B$JIT.CPFLAGS1.SLEAZE
       136**DCL       136--REDEF
B$JIT.ERR.MID
        43**DCL        43--REDEF
B$JIT.JRESPEAK
       204**DCL       205--REDEF
B$JIT.MODE
        37**DCL      9333>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
       313**DCL       313--REDEF     314--REDEF
B$JIT.PNR
       217**DCL       217--REDEF
B$JIT.TSLINE
       311**DCL       312--REDEF
B$JIT.USRERR
       178**DCL      9359<<ASSIGN   9409<<ASSIGN
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:31   
B$JIT$
      8899**DCL        37--IMP-PTR  9324>>IF       9333>>IF       9333>>IF       9359>>ASSIGN   9409>>ASSIGN
B$TCB.ALT$
      9121**DCL      9319>>IF       9359>>ASSIGN   9409>>ASSIGN
B$TCB$
      8901**DCL      9121--IMP-PTR  9319>>IF       9359>>ASSIGN   9409>>ASSIGN
CAMR_REC.ACSVEH_
      7938**DCL      7939--REDEF
CAMR_REC.ALTKEYS_
      7944**DCL      7945--REDEF    7945--REDEF
CAMR_REC.HDR_
      7943**DCL      7944--REDEF
CAMR_REC.TAB_
      7942**DCL      7943--REDEF
CAMR_REC.UHL_
      7936**DCL      7937--REDEF    7937--REDEF
CAMR_REC.V.FSN#
      7976**DCL      7976--REDEF    7976--REDEF
CAMR_REC.WSN_
      7942**DCL      7942--REDEF
CANT_GET_M$LL
      9310**LABEL    9305--CALLALT  9320--GOTO
CFPT_CLOSE
      6780**DCL      9399>>ASSIGN
CFPT_CLOSE.SN_
      6780**DCL      6780--REDEF
CFPT_CLOSE.UTL_
      6781**DCL      6781--REDEF
CFPT_CLOSE.V.EXPIRE#
      6795**DCL      6795--REDEF
CFPT_CLOSE.V.TYPE#
      6793**DCL      6793--REDEF
CFPT_CLOSE.V.XTNSIZE#
      6790**DCL      6790--REDEF    6792--REDEF
CFPT_GETDCB
      6938**DCL      9296>>ASSIGN
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:32   
CFPT_OPEN.ACSVEH_
      6715**DCL      6716--REDEF
CFPT_OPEN.ALTKEYS_
      6721**DCL      6722--REDEF    6722--REDEF
CFPT_OPEN.HDR_
      6720**DCL      6721--REDEF
CFPT_OPEN.TAB_
      6719**DCL      6720--REDEF
CFPT_OPEN.UHL_
      6713**DCL      6714--REDEF    6714--REDEF
CFPT_OPEN.V.FSN#
      6753**DCL      6753--REDEF    6753--REDEF
CFPT_OPEN.WSN_
      6719**DCL      6719--REDEF
CFPT_READ.STATION_
      6819**DCL      6820--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      6831**DCL      6831--REDEF
CFPT_READ.V.INDX#
      6829**DCL      6829--REDEF
CFPT_READUC.STATION_
      7189**DCL      7190--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      7201**DCL      7201--REDEF
CFPT_READUC.V.INDX#
      7199**DCL      7199--REDEF
CFPT_RELDCB
      6953**DCL      9382>>ASSIGN
CFPT_TRTN.V.IR#
      7425**DCL      7426--REDEF
CFPT_WRITE.STATION_
      6857**DCL      6857--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      6864**DCL      6864--REDEF
CFPT_WRITEUC.STATION_
      7157**DCL      7157--REDEF
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:33   
CFPT_WRITEUC.V.DVBYTE.VFC#
      7164**DCL      7164--REDEF
CFPT_XXX.V.STEPCC#
      8137**DCL      8137--REDEF
CGETCMD.OUT$
      8158**DCL      8164--REDEF
CONT_PROMPT
      9054**DCL      9338<>CALL
CONT_PROMPT.V
      9062**DCL      9056--DCLINIT
CPA$FLUSH
      9288**DCL-ENT  9348--CALL
CPA$GO
      9289**DCL-ENT  9344--CALL
CPC$QUIT
      9290**DCL-ENT  9357--CALL
CPC$SCREECH
      9291**DCL-ENT  9360--CALL     9410--CALL
CPC$WRITEMSGE
      9292**DCL-ENT  9332--CALL     9356--CALL
CVLP_TRMCTL.BREAKCOUNT
      7749**DCL      7750--REDEF
CVLP_WINDOW.FWINDOW#
      7845**DCL      7845--REDEF    7846--REDEF
DCB#
      9111**DCL      9295<<ASSIGN   9298>>ASSIGN   9302>>IF       9311<<ASSIGN   9312>>ASSIGN   9320>>IF
E_DOQUIT
      9100**DCL      9356<>CALL
E_NODCBSPACE
      9080**DCL      9332<>CALL
F$DCB.ACTPOS
      9164**DCL      9164--REDEF
F$DCB.ARS#
      9138**DCL      9138--REDEF    9340>>ASSIGN
F$DCB.ATTR
      9157**DCL      9158--REDEF
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:34   
F$DCB.BORROW
      9172**DCL      9172--REDEF    9172--REDEF    9172--REDEF
F$DCB.DCBNAME.L
      9186**DCL      9186--IMP-SIZ
F$DCB.EOMCHAR#
      9142**DCL      9142--REDEF
F$DCB.FCD#
      9151**DCL      9397>>IF
F$DCB.FLDID
      9167**DCL      9167--REDEF
F$DCB.FORM$
      9161**DCL      9161--REDEF
F$DCB.FSECT
      9177**DCL      9177--REDEF
F$DCB.FSN#
      9154**DCL      9154--REDEF    9154--REDEF    9155--REDEF
F$DCB.HEADER$
      9160**DCL      9160--REDEF
F$DCB.IXTNSIZE#
      9158**DCL      9158--REDEF
F$DCB.LASTSTA$
      9147**DCL      9147--REDEF
F$DCB.LVL
      9173**DCL      9173--REDEF
F$DCB.NAME#.C
      9148**DCL      9148--REDEF
F$DCB.NOEOF
      9170**DCL      9170--REDEF
F$DCB.NRECS#
      9159**DCL      9159--REDEF    9402>>IF
F$DCB.NRECX
      9178**DCL      9178--REDEF
F$DCB.OHDR
      9170**DCL      9170--REDEF
F$DCB.ORG#
      9153**DCL      9153--REDEF
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:35   
F$DCB.PRECNO
      9176**DCL      9176--REDEF
F$DCB.RCSZ
      9182**DCL      9182--REDEF
F$DCB.RES#
      9149**DCL      9149--REDEF
F$DCB.SETX
      9161**DCL      9161--REDEF
F$DCB.TAB$
      9161**DCL      9161--REDEF
F$DCB.TDA
      9175**DCL      9176--REDEF
F$DCB.WSN#
      9149**DCL      9149--REDEF
FPT_CLOSE
      9019**DCL      9399<<ASSIGN   9405<>CALL
FPT_CLOSE.SN_
      9019**DCL      9019--REDEF
FPT_CLOSE.UTL_
      9020**DCL      9020--REDEF
FPT_CLOSE.V
      9024**DCL      9400--ASSIGN
FPT_CLOSE.V.DCB#
      9025**DCL      9401<<ASSIGN   9402--IF
FPT_CLOSE.V.DISP#
      9028**DCL      9404<<ASSIGN
FPT_CLOSE.V.EXPIRE#
      9034**DCL      9034--REDEF
FPT_CLOSE.V.TYPE#
      9032**DCL      9032--REDEF
FPT_CLOSE.V.XTNSIZE#
      9029**DCL      9029--REDEF    9031--REDEF
FPT_CLOSE.V_
      9019**DCL      9400<<ASSIGN
FPT_GETDCB
      8978**DCL      9296<<ASSIGN   9305<>CALL     9317<>CALL
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:36   
FPT_GETDCB.DCBNAME_
      8978**DCL      9301<<ASSIGN   9313<<ASSIGN
FPT_GETDCB.DCBNUM_
      8978**DCL      9300<<ASSIGN
FPT_GETDCB.V
      8979**DCL      9297--ASSIGN
FPT_GETDCB.V.DCB#
      8979**DCL      9298<<ASSIGN   9312<<ASSIGN
FPT_GETDCB.V.MERGE#
      8979**DCL      9299<<ASSIGN
FPT_GETDCB.V.TEST#
      8980**DCL      9304<<ASSIGN   9315<<ASSIGN
FPT_GETDCB.V_
      8978**DCL      9297<<ASSIGN
FPT_READ
      9265**DCL      9339<>CALL
FPT_READ.BUF_
      9267**DCL      9337<<ASSIGN
FPT_READ.STATION_
      9268**DCL      9269--REDEF
FPT_READ.V.DVBYTE.REREAD#
      9280**DCL      9280--REDEF
FPT_READ.V.INDX#
      9278**DCL      9278--REDEF
FPT_RELDCB
      8993**DCL      9382<<ASSIGN   9407<>CALL
FPT_RELDCB.V
      8993**DCL      9383--ASSIGN
FPT_RELDCB.V.DCB#
      8993**DCL      9384<<ASSIGN   9387<<ASSIGN   9395--IF       9397--IF       9401>>ASSIGN
FPT_RELDCB.V_
      8993**DCL      9383<<ASSIGN
IBEX2TXTC
      8914**DCL      9313--ASSIGN
M$CLOSE
       438**DCL-ENT  9405--CALL
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:37   
M$GETDCB
       444**DCL-ENT  9305--CALL     9317--CALL
M$IBEX2_NUM
      8906**DCL      9311>>ASSIGN
M$LL_NUM
      8907**DCL      9302>>IF       9320>>IF       9362>>IF       9385>>IF
M$PROMPT
       462**DCL-ENT  9338--CALL
M$READ
       439**DCL-ENT  9339--CALL
M$RELDCB
       444**DCL-ENT  9407--CALL
M$UC_NUM
      8902**DCL      9326>>ASSIGN   9340--ASSIGN
P_DCB#
      9113**DCL        27--PROC     9295>>ASSIGN   9362>>IF       9380--ENTRY    9384>>ASSIGN   9385>>IF
P_DCBN
      9115**DCL        27--PROC     9301--ASSIGN   9332<>CALL     9356<>CALL
P_DCBN.SIZ
      9116**DCL      9117--IMP-SIZ  9301>>ASSIGN   9332>>CALL     9356>>CALL
RET
      9362**LABEL    9319--GOTO
RETURN_DCB#
      9108**DCL      9300--ASSIGN   9306>>IF       9362>>ASSIGN
SEG$2.FLAGS.CMD_STR_INT
      9201**DCL      9349<<ASSIGN
SEG$2.FLAGS.CPBUFFULL_AT_CSINT
      9203**DCL      9350<<ASSIGN
SEG$2.FLAGS.IBEX_OWNS_M$LL
      9206**DCL      9308<<ASSIGN   9389<<ASSIGN
SEG$2.FPT_READUC$
      9222**DCL      9337>>ASSIGN   9339>>CALL
SEG$2.LLDCB#
      9209**DCL      9326<<ASSIGN   9362<<ASSIGN   9387>>ASSIGN   9388<<ASSIGN
SEG2$
      8892**DCL      9189--IMP-PTR  9308>>ASSIGN   9326>>ASSIGN   9337>>ASSIGN   9339>>CALL     9349>>ASSIGN
PL6.E3A0      #001=CPC$GETDCB File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:38   
      9350>>ASSIGN   9362>>ASSIGN   9387>>ASSIGN   9388>>ASSIGN   9389>>ASSIGN
TEMPBUF
      9109**DCL      9337--ASSIGN   9341>>IF       9341>>IF

PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:39   
      189        1        /*T***********************************************************/
      190        2        /*T*                                                         */
      191        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      192        4        /*T*                                                         */
      193        5        /*T***********************************************************/
      194        6        /**********************************************************************/
      195        7        /*F*   NAME:   CPC$GETSEG
      196        8               PURPOSE: Get a data segment
      197        9               DESCRIPTION: CPC$GETSEG gets a specified data segment
      198       10        */
      199       11        /*D*   NAME:   CPC$GETSEG
      200       12               CALL:   CALL CPC$GETSEG(seg$,segsize)
      201       13               INTERFACE:
      202       14               INPUT:  seg$ - segment to be obtained
      203       15                       segsize - number of words in data segment
      204       16               OUTPUT: segment obtained
      205       17               DESCRIPTION: The specified segment is acquired. If the segment
      206       18                       can't be acquired, an ALTRET is taken to the calling routine.
      207       19                       If the segment size is not specified, a default size of
      208       20                       1024 words is assumed.
      209       21        */
      210       22        /***********************************************************************/
      211       23        CPC$GETSEG: PROC(SEG$,SEGSIZE) ALTRET;
      212       24                   %INCLUDE B_MACROS_C;
      213      135                   %INCLUDE CP_6;
      214      216                   %INCLUDE B$JIT;
      215      506                   %INCLUDE XU_MACRO_C;
      216     3612                   %INCLUDE CP_DATA_R;
      217     6175        /***** fpts *****/
      218     6176        %FPT_GDS(FPTN = FPT_GDS,STCLASS = AUTO);
      219     6192        %VLP_VECTOR(FPTN = GDS_RESULTS,STCLASS = AUTO);
      220     6207        /***** parameters *****/
      221     6208    1   DCL 1 SEG$ PTR;                         /*SEGMENT*/
      222     6209    1   DCL SEGSIZE SBIN WORD;                  /*SEGMENT SIZE*/
      223     6210        /***** Based structures *****/
      224     6211        %B$TCB (STCLASS="BASED(B$TCB$)");
      225     6214        %B$ALT;
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:40   
      226     6222        /**/
      227     6223    1           FPT_GDS = CFPT_GDS;
      228     6224    1           FPT_GDS.V_ = VECTOR(FPT_GDS.V);
      229     6225    1           IF (ADDR(SEGSIZE) ~= ADDR(NIL)) THEN   /*WAS SIZE SPEC'D*/
      230     6226    1              FPT_GDS.V.SEGSIZE# = SEGSIZE;
      231     6227    1           ELSE
      232     6228    1              FPT_GDS.V.SEGSIZE# = 1024; /*SET DEFAULT*/
      233     6229    1           FPT_GDS.RESULTS_ = VECTOR(GDS_RESULTS);
      234     6230    1           GDS_RESULTS.PTR$ = SEG$;
      235     6231    1           CALL M$GDS(FPT_GDS) ALTRET(E_GDS);
      236     6232    1           RETURN;
      237     6233    1   E_GDS:
      238     6234    1           B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;
      239     6235    1           ALTRETURN;
      240     6236    1   END CPC$GETSEG;
      241     6237                   %EOD;

PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:41   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPC$GETSEG.

   Procedure CPC$GETSEG requires 38 words for executable code.
   Procedure CPC$GETSEG requires 16 words of local(AUTO) storage.

PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:42   

 Object Unit name= CPC$GETSEG                                 File name= CPC$SUBR1.:E05TOU
 UTS= JUL 29 '97 11:26:55.44 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    38     46  CPC$GETSEG
    2  RoData even  none     1      1  CPC$GETSEG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  CPC$GETSEG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CFPT_GDS                         r    B$JIT$
r    B$TCB$                                B_VECTNIL
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:43   


      189        1        /*T***********************************************************/
      190        2        /*T*                                                         */
      191        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      192        4        /*T*                                                         */
      193        5        /*T***********************************************************/
      194        6        /**********************************************************************/
      195        7        /*F*   NAME:   CPC$GETSEG
      196        8               PURPOSE: Get a data segment
      197        9               DESCRIPTION: CPC$GETSEG gets a specified data segment
      198       10        */
      199       11        /*D*   NAME:   CPC$GETSEG
      200       12               CALL:   CALL CPC$GETSEG(seg$,segsize)
      201       13               INTERFACE:
      202       14               INPUT:  seg$ - segment to be obtained
      203       15                       segsize - number of words in data segment
      204       16               OUTPUT: segment obtained
      205       17               DESCRIPTION: The specified segment is acquired. If the segment
      206       18                       can't be acquired, an ALTRET is taken to the calling routine.
      207       19                       If the segment size is not specified, a default size of
      208       20                       1024 words is assumed.
      209       21        */
      210       22        /***********************************************************************/
      211       23        CPC$GETSEG: PROC(SEG$,SEGSIZE) ALTRET;

     23  1 000000   000000 700200 xent  CPC$GETSEG   TSX0  ! X66_AUTO_2
         1 000001   000020 000002                    ZERO    16,2

      212       24                   %INCLUDE B_MACROS_C;
      213      135                   %INCLUDE CP_6;
      214      216                   %INCLUDE B$JIT;
      215      506                   %INCLUDE XU_MACRO_C;
      216     3612                   %INCLUDE CP_DATA_R;
      217     6175        /***** fpts *****/
      218     6176        %FPT_GDS(FPTN = FPT_GDS,STCLASS = AUTO);
      219     6192        %VLP_VECTOR(FPTN = GDS_RESULTS,STCLASS = AUTO);
      220     6207        /***** parameters *****/
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:44   
      221     6208    1   DCL 1 SEG$ PTR;                         /*SEGMENT*/
      222     6209    1   DCL SEGSIZE SBIN WORD;                  /*SEGMENT SIZE*/
      223     6210        /***** Based structures *****/
      224     6211        %B$TCB (STCLASS="BASED(B$TCB$)");
      225     6214        %B$ALT;
      226     6222        /**/
      227     6223    1           FPT_GDS = CFPT_GDS;

   6223  1 000002   000100 100400                    MLR     fill='000'O
         1 000003   000000 000030 xsym               ADSC9   CFPT_GDS                 cn=0,n=24
         1 000004   200006 000030                    ADSC9   FPT_GDS,,AUTO            cn=0,n=24

      228     6224    1           FPT_GDS.V_ = VECTOR(FPT_GDS.V);

   6224  1 000005   000000 235000 2                  LDA     0
         1 000006   200016 452500                    STP2    GDS_RESULTS+2,,AUTO
         1 000007   200016 236100                    LDQ     GDS_RESULTS+2,,AUTO
         1 000010   000012 036003                    ADLQ    10,DU
         1 000011   200006 757100                    STAQ    FPT_GDS,,AUTO

      229     6225    1           IF (ADDR(SEGSIZE) ~= ADDR(NIL)) THEN   /*WAS SIZE SPEC'D*/

   6225  1 000012   200004 236100                    LDQ     @SEGSIZE,,AUTO
         1 000013   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000014   000021 600000 1                  TZE     s:6228

      230     6226    1              FPT_GDS.V.SEGSIZE# = SEGSIZE;

   6226  1 000015   200004 470500                    LDP0    @SEGSIZE,,AUTO
         1 000016   000000 720100                    LXL0    0,,PR0
         1 000017   200012 440100                    SXL0    FPT_GDS+4,,AUTO
         1 000020   000023 710000 1                  TRA     s:6229

      231     6227    1           ELSE
      232     6228    1              FPT_GDS.V.SEGSIZE# = 1024; /*SET DEFAULT*/

   6228  1 000021   002000 220003                    LDX0    1024,DU
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:45   
         1 000022   200012 440100                    SXL0    FPT_GDS+4,,AUTO

      233     6229    1           FPT_GDS.RESULTS_ = VECTOR(GDS_RESULTS);

   6229  1 000023   000000 235000 2                  LDA     0
         1 000024   200016 452500                    STP2    GDS_RESULTS+2,,AUTO
         1 000025   200016 236100                    LDQ     GDS_RESULTS+2,,AUTO
         1 000026   000014 036003                    ADLQ    12,DU
         1 000027   200010 757100                    STAQ    FPT_GDS+2,,AUTO

      234     6230    1           GDS_RESULTS.PTR$ = SEG$;

   6230  1 000030   200003 470500                    LDP0    @SEG$,,AUTO
         1 000031   000000 236100                    LDQ     0,,PR0
         1 000032   200015 756100                    STQ     GDS_RESULTS+1,,AUTO

      235     6231    1           CALL M$GDS(FPT_GDS) ALTRET(E_GDS);

   6231  1 000033   200006 630500                    EPPR0   FPT_GDS,,AUTO
         1 000034   430001 713400                    CLIMB   alt,gds
         1 000035   400400 401760                    pmme    nvectors=2
         1 000036   000040 702000 1                  TSX2    E_GDS

      236     6232    1           RETURN;

   6232  1 000037   000000 702200 xent               TSX2  ! X66_ARET

      237     6233    1   E_GDS:
      238     6234    1           B$JIT.USRERR = B$TCB.ALT$ -> B$ALT.ERR;

   6234  1 000040   000000 470400 xsym  E_GDS        LDP0    B$TCB$
         1 000041   000000 471500                    LDP1    0,,PR0
         1 000042   100102 236100                    LDQ     66,,PR1
         1 000043   000000 473400 xsym               LDP3    B$JIT$
         1 000044   300144 756100                    STQ     100,,PR3

      239     6235    1           ALTRETURN;
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:46   

   6235  1 000045   000000 702200 xent               TSX2  ! X66_AALT
      240     6236    1   END CPC$GETSEG;
      241     6237                   %EOD;

PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:47   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B_MACROS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPC$GETSEG.
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:48   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @SEG$                      4-0-0/w PTR         r     1 @SEGSIZE
     6-0-0/d STRC(216)   r     1 FPT_GDS                   14-0-0/d STRC(72)    r     1 GDS_RESULTS
    *0-0-0/w PTR         r     1 SEG$                      *0-0-0/w SBIN        r     1 SEGSIZE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/d STRC(216)   r     1 CFPT_GDS

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB


   Procedure CPC$GETSEG requires 38 words for executable code.
   Procedure CPC$GETSEG requires 16 words of local(AUTO) storage.
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:49   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:50   
          MINI XREF LISTING

B$ALT.CODE
      6216**DCL      6216--REDEF    6217--REDEF    6217--REDEF
B$ALT.ERR
      6217**DCL      6234>>ASSIGN
B$ALT.ERR.ERR#
      6218**DCL      6218--REDEF
B$ALT.EVID
      6217**DCL      6217--REDEF    6217--REDEF
B$JIT.CPFLAGS1.SLEAZE
       324**DCL       324--REDEF
B$JIT.ERR.MID
       231**DCL       231--REDEF
B$JIT.JRESPEAK
       392**DCL       393--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       501**DCL       501--REDEF     502--REDEF
B$JIT.PNR
       405**DCL       405--REDEF
B$JIT.TSLINE
       499**DCL       500--REDEF
B$JIT.USRERR
       366**DCL      6234<<ASSIGN
B$JIT$
      6108**DCL       225--IMP-PTR  6234>>ASSIGN
B$TCB.ALT$
      6212**DCL      6234>>ASSIGN
B$TCB$
      6110**DCL      6212--IMP-PTR  6234>>ASSIGN
CAMR_REC.ACSVEH_
      5147**DCL      5148--REDEF
CAMR_REC.ALTKEYS_
      5153**DCL      5154--REDEF    5154--REDEF
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:51   
CAMR_REC.HDR_
      5152**DCL      5153--REDEF
CAMR_REC.TAB_
      5151**DCL      5152--REDEF
CAMR_REC.UHL_
      5145**DCL      5146--REDEF    5146--REDEF
CAMR_REC.V.FSN#
      5185**DCL      5185--REDEF    5185--REDEF
CAMR_REC.WSN_
      5151**DCL      5151--REDEF
CFPT_CLOSE.SN_
      3989**DCL      3989--REDEF
CFPT_CLOSE.UTL_
      3990**DCL      3990--REDEF
CFPT_CLOSE.V.EXPIRE#
      4004**DCL      4004--REDEF
CFPT_CLOSE.V.TYPE#
      4002**DCL      4002--REDEF
CFPT_CLOSE.V.XTNSIZE#
      3999**DCL      3999--REDEF    4001--REDEF
CFPT_GDS
      4089**DCL      6223>>ASSIGN
CFPT_OPEN.ACSVEH_
      3924**DCL      3925--REDEF
CFPT_OPEN.ALTKEYS_
      3930**DCL      3931--REDEF    3931--REDEF
CFPT_OPEN.HDR_
      3929**DCL      3930--REDEF
CFPT_OPEN.TAB_
      3928**DCL      3929--REDEF
CFPT_OPEN.UHL_
      3922**DCL      3923--REDEF    3923--REDEF
CFPT_OPEN.V.FSN#
      3962**DCL      3962--REDEF    3962--REDEF
CFPT_OPEN.WSN_
      3928**DCL      3928--REDEF
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:52   
CFPT_READ.STATION_
      4028**DCL      4029--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      4040**DCL      4040--REDEF
CFPT_READ.V.INDX#
      4038**DCL      4038--REDEF
CFPT_READUC.STATION_
      4398**DCL      4399--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      4410**DCL      4410--REDEF
CFPT_READUC.V.INDX#
      4408**DCL      4408--REDEF
CFPT_TRTN.V.IR#
      4634**DCL      4635--REDEF
CFPT_WRITE.STATION_
      4066**DCL      4066--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      4073**DCL      4073--REDEF
CFPT_WRITEUC.STATION_
      4366**DCL      4366--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      4373**DCL      4373--REDEF
CFPT_XXX.V.STEPCC#
      5346**DCL      5346--REDEF
CGETCMD.OUT$
      5367**DCL      5373--REDEF
CVLP_TRMCTL.BREAKCOUNT
      4958**DCL      4959--REDEF
CVLP_WINDOW.FWINDOW#
      5054**DCL      5054--REDEF    5055--REDEF
E_GDS
      6234**LABEL    6231--CALLALT
FPT_GDS
      6187**DCL      6223<<ASSIGN   6231<>CALL
FPT_GDS.RESULTS_
      6187**DCL      6229<<ASSIGN
PL6.E3A0      #002=CPC$GETSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:26 Page:53   
FPT_GDS.V
      6187**DCL      6224--ASSIGN
FPT_GDS.V.SEGSIZE#
      6190**DCL      6226<<ASSIGN   6228<<ASSIGN
FPT_GDS.V_
      6187**DCL      6224<<ASSIGN
GDS_RESULTS
      6203**DCL      6229--ASSIGN
GDS_RESULTS.PTR$
      6205**DCL      6230<<ASSIGN
GDS_RESULTS.W2
      6204**DCL      6205--REDEF
M$GDS
       179**DCL-ENT  6231--CALL
SEG$
      6208**DCL        23--PROC     6230>>ASSIGN
SEGSIZE
      6209**DCL        23--PROC     6225--IF       6226>>ASSIGN

PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:54   
      242        1        /*T***********************************************************/
      243        2        /*T*                                                         */
      244        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      245        4        /*T*                                                         */
      246        5        /*T***********************************************************/
      247        6        /**********************************************************************/
      248        7        /*F*   NAME:   CPC$RELSEG
      249        8               PURPOSE: Release a data segment
      250        9               DESCRIPTION: CPC$RELSEG releases a specified data segment
      251       10        */
      252       11        /*D*   NAME:   CPC$RELSEG
      253       12               CALL:   CALL CPC$RELSEG(seg$)
      254       13               INTERFACE:
      255       14               INPUT:  seg$ - segment to be released
      256       15               OUTPUT: segment released
      257       16               DESCRIPTION: The specified data segment is released.
      258       17        */
      259       18        /**********************************************************************/
      260       19        CPC$RELSEG: PROC(SEG$);
      261       20                   %INCLUDE CP_6;
      262      101                   %INCLUDE XU_MACRO_C;
      263     3207                   %INCLUDE CP_DATA_R;
      264     5770        /***** fpts *****/
      265     5771        %FPT_FDS(FPTN = FPT_FDS,STCLASS = AUTO);
      266     5786        %VLP_VECTOR (FPTN = FDS_RESULTS,STCLASS = AUTO);
      267     5801        /***** parameters *****/
      268     5802    1   DCL 1 SEG$ PTR;                         /*SEGMENT POINTER*/
      269     5803        /**/
      270     5804    1           FPT_FDS = CFPT_FDS;
      271     5805    1           FPT_FDS.V_ = VECTOR(FPT_FDS.V);
      272     5806    1           FPT_FDS.V.SEGSIZE# = 1024;
      273     5807    1           FPT_FDS.RESULTS_ = VECTOR(FDS_RESULTS);
      274     5808    1           FDS_RESULTS.PTR$ = SEG$;
      275     5809    1           CALL M$FDS (FPT_FDS);
      276     5810        /*
      277     5811             ***** When M$FDS is called it returns the size
      278     5812                   of the remaining data segment (if any) in
PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:55   
      279     5813                   the results field. If any words remain then
      280     5814                   call M$FDS once again to release the remainder ...
      281     5815        */
      282     5816    1           IF FDS_RESULTS.W1.VSIZE# ~= 0
      283     5817    1              THEN   /* Still something around */
      284     5818    2                 DO;
      285     5819    2                    FPT_FDS.V.SEGSIZE# = (FDS_RESULTS.W1.VSIZE#+1)/4;
      286     5820    2                    CALL M$FDS (FPT_FDS);
      287     5821    2                 END;
      288     5822    1           RETURN;
      289     5823    1   END CPC$RELSEG;

PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:56   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPC$RELSEG.

   Procedure CPC$RELSEG requires 36 words for executable code.
   Procedure CPC$RELSEG requires 14 words of local(AUTO) storage.

    No errors detected in file CPC$SUBR1.:E05TSI    .

PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:57   

 Object Unit name= CPC$RELSEG                                 File name= CPC$SUBR1.:E05TOU
 UTS= JUL 29 '97 11:27:41.24 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none    36     44  CPC$RELSEG
    2  RoData even  none     1      1  CPC$RELSEG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        1  CPC$RELSEG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CFPT_FDS                              B_VECTNIL
PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:58   


      242        1        /*T***********************************************************/
      243        2        /*T*                                                         */
      244        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      245        4        /*T*                                                         */
      246        5        /*T***********************************************************/
      247        6        /**********************************************************************/
      248        7        /*F*   NAME:   CPC$RELSEG
      249        8               PURPOSE: Release a data segment
      250        9               DESCRIPTION: CPC$RELSEG releases a specified data segment
      251       10        */
      252       11        /*D*   NAME:   CPC$RELSEG
      253       12               CALL:   CALL CPC$RELSEG(seg$)
      254       13               INTERFACE:
      255       14               INPUT:  seg$ - segment to be released
      256       15               OUTPUT: segment released
      257       16               DESCRIPTION: The specified data segment is released.
      258       17        */
      259       18        /**********************************************************************/
      260       19        CPC$RELSEG: PROC(SEG$);

     19  1 000000   000000 700200 xent  CPC$RELSEG   TSX0  ! X66_AUTO_1
         1 000001   000016 000001                    ZERO    14,1

      261       20                   %INCLUDE CP_6;
      262      101                   %INCLUDE XU_MACRO_C;
      263     3207                   %INCLUDE CP_DATA_R;
      264     5770        /***** fpts *****/
      265     5771        %FPT_FDS(FPTN = FPT_FDS,STCLASS = AUTO);
      266     5786        %VLP_VECTOR (FPTN = FDS_RESULTS,STCLASS = AUTO);
      267     5801        /***** parameters *****/
      268     5802    1   DCL 1 SEG$ PTR;                         /*SEGMENT POINTER*/
      269     5803        /**/
      270     5804    1           FPT_FDS = CFPT_FDS;

   5804  1 000002   000100 100400                    MLR     fill='000'O
         1 000003   000000 000030 xsym               ADSC9   CFPT_FDS                 cn=0,n=24
PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:59   
         1 000004   200004 000030                    ADSC9   FPT_FDS,,AUTO            cn=0,n=24

      271     5805    1           FPT_FDS.V_ = VECTOR(FPT_FDS.V);

   5805  1 000005   000000 235000 2                  LDA     0
         1 000006   200014 452500                    STP2    FDS_RESULTS+2,,AUTO
         1 000007   200014 236100                    LDQ     FDS_RESULTS+2,,AUTO
         1 000010   000010 036003                    ADLQ    8,DU
         1 000011   200004 757100                    STAQ    FPT_FDS,,AUTO

      272     5806    1           FPT_FDS.V.SEGSIZE# = 1024;

   5806  1 000012   002000 220003                    LDX0    1024,DU
         1 000013   200010 440100                    SXL0    FPT_FDS+4,,AUTO

      273     5807    1           FPT_FDS.RESULTS_ = VECTOR(FDS_RESULTS);

   5807  1 000014   000000 235000 2                  LDA     0
         1 000015   200014 452500                    STP2    FDS_RESULTS+2,,AUTO
         1 000016   200014 236100                    LDQ     FDS_RESULTS+2,,AUTO
         1 000017   000012 036003                    ADLQ    10,DU
         1 000020   200006 757100                    STAQ    FPT_FDS+2,,AUTO

      274     5808    1           FDS_RESULTS.PTR$ = SEG$;

   5808  1 000021   200003 470500                    LDP0    @SEG$,,AUTO
         1 000022   000000 236100                    LDQ     0,,PR0
         1 000023   200013 756100                    STQ     FDS_RESULTS+1,,AUTO

      275     5809    1           CALL M$FDS (FPT_FDS);

   5809  1 000024   200004 630500                    EPPR0   FPT_FDS,,AUTO
         1 000025   030002 713400                    CLIMB   fds
         1 000026   400400 401760                    pmme    nvectors=2

      276     5810        /*
      277     5811             ***** When M$FDS is called it returns the size
PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:60   
      278     5812                   of the remaining data segment (if any) in
      279     5813                   the results field. If any words remain then
      280     5814                   call M$FDS once again to release the remainder ...
      281     5815        */
      282     5816    1           IF FDS_RESULTS.W1.VSIZE# ~= 0

   5816  1 000027   200012 236100                    LDQ     FDS_RESULTS,,AUTO
         1 000030   000034 316000 xsym               CANQ    B_VECTNIL+28
         1 000031   000043 600000 1                  TZE     s:5822

      283     5817    1              THEN   /* Still something around */
      284     5818    2                 DO;

      285     5819    2                    FPT_FDS.V.SEGSIZE# = (FDS_RESULTS.W1.VSIZE#+1)/4;

   5819  1 000032   200012 236100                    LDQ     FDS_RESULTS,,AUTO
         1 000033   000020 772000                    QRL     16
         1 000034   000001 036007                    ADLQ    1,DL
         1 000035   000002 772000                    QRL     2
         1 000036   000000 620006                    EAX0    0,QL
         1 000037   200010 440100                    SXL0    FPT_FDS+4,,AUTO

      286     5820    2                    CALL M$FDS (FPT_FDS);

   5820  1 000040   200004 630500                    EPPR0   FPT_FDS,,AUTO
         1 000041   030002 713400                    CLIMB   fds
         1 000042   400400 401760                    pmme    nvectors=2

      287     5821    2                 END;

      288     5822    1           RETURN;

   5822  1 000043   000000 702200 xent               TSX2  ! X66_ARET
      289     5823    1   END CPC$RELSEG;

PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:61   
--  Include file information  --

   CP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure CPC$RELSEG.
PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:62   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @SEG$                     12-0-0/d STRC(72)    r     1 FDS_RESULTS
     4-0-0/d STRC(216)   r     1 FPT_FDS                   *0-0-0/w PTR         r     1 SEG$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 CFPT_FDS


   Procedure CPC$RELSEG requires 36 words for executable code.
   Procedure CPC$RELSEG requires 14 words of local(AUTO) storage.

    No errors detected in file CPC$SUBR1.:E05TSI    .
PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:63   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:64   
          MINI XREF LISTING

CAMR_REC.ACSVEH_
      4742**DCL      4743--REDEF
CAMR_REC.ALTKEYS_
      4748**DCL      4749--REDEF    4749--REDEF
CAMR_REC.HDR_
      4747**DCL      4748--REDEF
CAMR_REC.TAB_
      4746**DCL      4747--REDEF
CAMR_REC.UHL_
      4740**DCL      4741--REDEF    4741--REDEF
CAMR_REC.V.FSN#
      4780**DCL      4780--REDEF    4780--REDEF
CAMR_REC.WSN_
      4746**DCL      4746--REDEF
CFPT_CLOSE.SN_
      3584**DCL      3584--REDEF
CFPT_CLOSE.UTL_
      3585**DCL      3585--REDEF
CFPT_CLOSE.V.EXPIRE#
      3599**DCL      3599--REDEF
CFPT_CLOSE.V.TYPE#
      3597**DCL      3597--REDEF
CFPT_CLOSE.V.XTNSIZE#
      3594**DCL      3594--REDEF    3596--REDEF
CFPT_FDS
      3700**DCL      5804>>ASSIGN
CFPT_OPEN.ACSVEH_
      3519**DCL      3520--REDEF
CFPT_OPEN.ALTKEYS_
      3525**DCL      3526--REDEF    3526--REDEF
CFPT_OPEN.HDR_
      3524**DCL      3525--REDEF
PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:65   
CFPT_OPEN.TAB_
      3523**DCL      3524--REDEF
CFPT_OPEN.UHL_
      3517**DCL      3518--REDEF    3518--REDEF
CFPT_OPEN.V.FSN#
      3557**DCL      3557--REDEF    3557--REDEF
CFPT_OPEN.WSN_
      3523**DCL      3523--REDEF
CFPT_READ.STATION_
      3623**DCL      3624--REDEF
CFPT_READ.V.DVBYTE.REREAD#
      3635**DCL      3635--REDEF
CFPT_READ.V.INDX#
      3633**DCL      3633--REDEF
CFPT_READUC.STATION_
      3993**DCL      3994--REDEF
CFPT_READUC.V.DVBYTE.REREAD#
      4005**DCL      4005--REDEF
CFPT_READUC.V.INDX#
      4003**DCL      4003--REDEF
CFPT_TRTN.V.IR#
      4229**DCL      4230--REDEF
CFPT_WRITE.STATION_
      3661**DCL      3661--REDEF
CFPT_WRITE.V.DVBYTE.VFC#
      3668**DCL      3668--REDEF
CFPT_WRITEUC.STATION_
      3961**DCL      3961--REDEF
CFPT_WRITEUC.V.DVBYTE.VFC#
      3968**DCL      3968--REDEF
CFPT_XXX.V.STEPCC#
      4941**DCL      4941--REDEF
CGETCMD.OUT$
      4962**DCL      4968--REDEF
CVLP_TRMCTL.BREAKCOUNT
      4553**DCL      4554--REDEF
PL6.E3A0      #003=CPC$RELSEG File=CPC$SUBR1.:E05TSI                             TUE 07/29/97 11:27 Page:66   
CVLP_WINDOW.FWINDOW#
      4649**DCL      4649--REDEF    4650--REDEF
FDS_RESULTS
      5797**DCL      5807--ASSIGN
FDS_RESULTS.PTR$
      5799**DCL      5808<<ASSIGN
FDS_RESULTS.W1.VSIZE#
      5797**DCL      5816>>IF       5819>>ASSIGN
FDS_RESULTS.W2
      5798**DCL      5799--REDEF
FPT_FDS
      5782**DCL      5804<<ASSIGN   5809<>CALL     5820<>CALL
FPT_FDS.RESULTS_
      5782**DCL      5807<<ASSIGN
FPT_FDS.V
      5782**DCL      5805--ASSIGN
FPT_FDS.V.SEGSIZE#
      5784**DCL      5806<<ASSIGN   5819<<ASSIGN
FPT_FDS.V_
      5782**DCL      5805<<ASSIGN
M$FDS
        64**DCL-ENT  5809--CALL     5820--CALL
SEG$
      5802**DCL        19--PROC     5808>>ASSIGN
