

CC.C03    File=zbe$sr_cand:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: sr_cand.c,v 1.3 87/03/10 11:41:55 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  S T R E N G T H   R E D U C T I O N
        7         7              *
        8         8              *  S R _ C A N D . C
        9         9              */
       10        10
       11        11
       12        12             #include "types:h"
       13        13             #include "em_mnem:h"
       14        14             #include "em_pseu:h"
       15        15             #include "lset:h"
       16        16             #include "cset:h"
       17        17             #include "debug:h"
       18        18             #include "global:h"
       19        19             #include "map:h"
       20        20             #include "aux:h"
       21        21             #include "sr:h"
       22        22             #include "sr_aux:h"
       23        23             #include "sr_cand:h"
       24        24
       25        25
       26        26             /* A candidate induction variable of a loop (hereafter called candidate) is a
       27        27              * local variable (of the current procedure) that is assigned a value
       28        28              * precisely once within the loop. Furthermore, this assignment must
       29        29              * take place in a firm block of the loop.
       30        30              * We determine those locals that are assigned precisely once, within
       31        31              * a firm block;
       32        32              *
       33        33              * We represent a local variable via an instruction that references it,
       34        34              * e.g. LOL -6 represents the local variable at offset -6 with size=wordsize.
       35        35              * We keep track of two sets:
       36        36              *  cand     - the set of all candidate variables
CC.C03    File=zbe$sr_cand:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37              *  dismiss  - a set of variables that may not be made a candidate
       38        38              *     (because they are assigned more than once, or because
       39        39              *      they are assigned outside a firm block).
       40        40              * Only local variables for which a register message is given are considered.
       41        41              */
       42        42
       43        43
       44        44             STATIC lset cand,     /* set of candidates */
       45        45                  dism;      /* set of dismissed variables */
       46        46
       47        47
       48        48             #define ALL_LINES(lnp,list) lnp = list; lnp != (line_p) 0; lnp = lnp->l_next
       49        49
       50        50
       51        51
       52        52             STATIC un_cand(lnp)
       53        53              line_p lnp;
       54        54             {
       55        55    1         /* remove the variable stored into by lnp from the list of
       56        56    1          * candidates (if it was there anyway).
       57        57    1          */
       58        58    1
       59        59    1         Lindex i, next;
       60        60    1
       61        61    1         for (i = Lfirst(cand); i != (Lindex) 0; i = next) {
       62        62    2            next = Lnext(i,cand);
       63        63    2            if (same_local(lnp,Lelem(i))) {
       64        64    3               OUTTRACE("remove candidate",0);
       65        65    3               Lremove(Lelem(i), &cand);
       66        66    3            }
       67        67    2         }
       68        68    1        }
       69        69
       70        70
       71        71             STATIC bool is_cand(lnp)
       72        72              line_p lnp;
       73        73             {
CC.C03    File=zbe$sr_cand:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74    1         /* see if the variable stored into by lnp is a candate */
       75        75    1
       76        76    1         Lindex i;
       77        77    1
       78        78    1         for (i = Lfirst(cand); i != (Lindex) 0; i = Lnext(i,cand)) {
       79        79    2            if (same_local(lnp,Lelem(i))) {
       80        80    3               return TRUE;
       81        81    3            }
       82        82    2         }
       83        83    1         return FALSE;
       84        84    1        }
       85        85
       86        86
       87        87             STATIC make_cand(lnp)
       88        88              line_p lnp;
       89        89             {
       90        90    1         /* make the variable stored into by lnp a candidate */
       91        91    1
       92        92    1
       93        93    1         OUTTRACE("add a new candidate",0);
       94        94    1         Ladd(lnp,&cand);
       95        95    1        }
       96        96
       97        97
       98        98
       99        99             STATIC do_dismiss(lnp)
      100       100              line_p lnp;
      101       101             {
      102       102    1         Ladd(lnp,&dism);
      103       103    1        }
      104       104
      105       105
      106       106             STATIC dismiss(lnp)
      107       107              line_p lnp;
      108       108             {
      109       109    1         /* The variable referenced by lnp is turned definitely into
      110       110    1          * a non-candidate.
CC.C03    File=zbe$sr_cand:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111    1          */
      112       112    1
      113       113    1         un_cand(lnp);  /* remove it from the candidate set,
      114       114    1                * if it was there in the first place.
      115       115    1                */
      116       116    1         do_dismiss(lnp); /* add it to the set of dismissed variables */
      117       117    1        }
      118       118
      119       119
      120       120             STATIC bool not_dismissed(lnp)
      121       121              line_p lnp;
      122       122             {
      123       123    1         Lindex i;
      124       124    1
      125       125    1         for (i = Lfirst(dism); i != (Lindex) 0; i = Lnext(i,dism)) {
      126       126    2            if (same_local(Lelem(i),lnp)) {
      127       127    3               return FALSE; /* variable was dismissed */
      128       128    3            }
      129       129    2         }
      130       130    1         return TRUE;
      131       131    1        }
      132       132
      133       133
      134       134             STATIC try_cand(lnp,b)
      135       135              line_p lnp;
      136       136              bblock_p b;
      137       137             {
      138       138    1         /* If the variable stored into by lnp was not already a candidate
      139       139    1          * and was not dismissed, then it is made a candidate
      140       140    1          * (unless the assignment takes places in a block that is not firm).
      141       141    1          */
      142       142    1
      143       143    1         if (!is_regvar(off_set(lnp))) return;
      144       144    1         if (is_cand(lnp) || !IS_FIRM(b)) {
      145       145    2            dismiss(lnp);
      146       146    2         } else {
      147       147    2            if (not_dismissed(lnp)) {
CC.C03    File=zbe$sr_cand:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    3               make_cand(lnp);
      149       149    3            }
      150       150    2         }
      151       151    1        }
      152       152
      153       153
      154       154             candidates(lp,cand_out,vars_out)
      155       155              loop_p lp;
      156       156              lset   *cand_out, *vars_out;
      157       157             {
      158       158    1         /* Find the candidate induction variables.
      159       159    1          */
      160       160    1
      161       161    1         bblock_p b;
      162       162    1         line_p lnp;
      163       163    1         Lindex i;
      164       164    1
      165       165    1         OUTTRACE("find candidates of loop %d",lp->lp_id);
      166       166    1         cand = Lempty_set();
      167       167    1         dism = Lempty_set();
      168       168    1
      169       169    1         for (i = Lfirst(lp->LP_BLOCKS); i != (Lindex) 0;
      170       170    1                       i = Lnext(i,lp->LP_BLOCKS)) {
      171       171    2            b = (bblock_p) Lelem(i);
      172       172    2            for ( ALL_LINES(lnp, b->b_start)) {
      173       173    3               OUTTRACE("inspect instruction %d",INSTR(lnp));
      174       174    3               switch(INSTR(lnp)) {
      175       175    4                  case op_stl:
      176       176    4                  case op_inl:
      177       177    4                  case op_del:
      178       178    4                     OUTTRACE("it's a store local",0);
      179       179    4                     try_cand(lnp,b);
      180       180    4                     break;
      181       181    4                  case op_zrl:
      182       182    4                     OUTTRACE("it's a destroy local",0);
      183       183    4                     if (is_regvar(off_set(lnp))) {
      184       184    5                        dismiss(lnp);
CC.C03    File=zbe$sr_cand:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185    5                     }
      186       186    4                     break;
      187       187    4               }
      188       188    3            }
      189       189    2         }
      190       190    1         *cand_out = cand;
      191       191    1         *vars_out = dism;
      192       192    1        }
      193       193
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$sr:h.:ZBC3TOU. is referenced
   zbe$sr_aux:h.:ZBC3TOU. is referenced
   zbe$sr_cand:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$sr_cand:c.:ZBC3TSI
