/******************************************************************************/
/*********            BASED STORAGE DCLS                             **********/
/******************************************************************************/
 
/*** VECTORS OF UNIFORM DATA TYPE ***/
DCL   BIT#(0:0)        BIT(1)    UNAL      BASED;
DCL   CHAR#(0:0)       CHAR(1)   UNAL      BASED;
DCL   UBIN9#(0:0)      UBIN(9)   UNAL      BASED;
DCL   HALF#(0:0)       SBIN HALF UNAL      BASED;
DCL   WORD#(0:0)       SBIN WORD ALIGNED   BASED;
DCL   PTR#$(0:0)       PTR       ALIGNED   BASED;
 
/***   CHARACTER AND BIT STRINGS ***/
DCL   CHARS CHAR(TEMP1) UNAL BASED;
DCL   BITS BIT(TEMP1) UNAL BASED;
 
/*** SINGLE ELEMENTS ***/
DCL   BT1#              BIT(1)    UNAL      BASED;
DCL   BT36#             BIT(36)   UNAL      BASED;
DCL   BT72#             BIT(72)   DALIGNED  BASED;
DCL   CHR#              CHAR(1)   UNAL      BASED;
DCL   UBN9#             UBIN(9)   UNAL      BASED;
DCL   HLF#              SBIN HALF UNAL      BASED;
DCL   WRD#              SBIN WORD ALIGNED   BASED;
DCL   PR#$              PTR       ALIGNED   BASED;
 
/******************************************************************************/
/*********         BASED STRUCTURES                                  **********/
/******************************************************************************/
 
/*** FILER FORM OF TEXTC ***/
DCL 1 TXTCNAM ALIGNED BASED,
      2 LENGTH SBIN WORD UNAL,
      2 CHR(0:0) CHAR(1) UNAL;
 
/*** BLOCK HEADER ***/
DCL 1 BLK ALIGNED BASED,
      2 ID UBIN(10) UNAL,
                                   /* ID (NUMBER) OF ASSOCIATED DESCRIPTOR    */
      2 SIZE UBIN(26) UNAL;             /* NUMBER OF WORDS IN BLOCK           */
 
/*** BLOCK FOOTER (ONLY FOR IN USE BLOCKS)--LAST WORD HAS SAME FMT AS HEADER ***/
DCL 1 BLK_FTR ALIGNED BASED,
      2 * BIT(10) UNAL,
      2 SIZE UBIN(26) UNAL,             /* NUMBER OF WORDS IN BLOCK           */
      2 ID UBIN(10) UNAL,
                                   /* ID (NUMBER) OF ASSOCIATED DESCRIPTOR    */
      2 NUNUSED UBIN(26) UNAL;          /* NUMBER OF UNUSED WORDS IN BLOCK    */
 
/*** BUFFER AND VALUE DESCRIPTOR ***/
DCL 1 BUF ALIGNED BASED,
      2 OPT_USAGE UBIN(27) UNAL,
                         /* INDEX OF PARAMETER FPT USAGE IF BUFFER OR VALUE   */
      2 TYPE UBIN(9) UNAL,
                    /* 0=UNUSED, 1=VALUE, 2=FIXED BUFFER, 3=VARIABLE BUFFER   */
                    /* 4=COMMAND BUFFER, 5=FPT BUFFER, 6=Z-REGISTER BUFFER    */
                                        /* 10= DCB, 11=MAPPED                 */
      2 IX SBIN WORD UNAL,
               /* INDEX OF ASSOCIATED BLOCK OR ADDRESS IF MAPPED TYPE OR DCB  */
      2 BLK$ PTR UNAL,
                              /* POINTER TO DATA PORTION OF ASSOCIATED BLOCK  */
      2 WIDTH SBIN WORD UNAL,
                                   /* NUMBER OF BITS IN USE IF BUFFER TYPE    */
      2 ID UBIN(10) UNAL,               /* DESCRIPTOR ID NUMBER               */
      2 LOCK UBIN(26) UNAL;
                         /* COUNT OF NUMBER OF UNDERTAKES FROM THIS BUFFER    */
                              /* PLACE, ZEROED WHENEVER BLOCK IS ACCESSED     */
 
/******************************************************************************/
/*********         TEMPORARIES                                       **********/
/******************************************************************************/
 
DCL   TPTR1$            PTR       ALIGNED   SYMREF;
DCL 1 PTR_ANAT1 REDEF TPTR1$,
      2 WRD_OFST BIT(18) UNAL,
      2 BYT_OFST BIT(2) UNAL,
      2 BIT_OFST BIT(4) UNAL,
      2 * BIT(12) UNAL;
DCL   TPTR2$            PTR       ALIGNED   SYMREF;
DCL 1 PTR_ANAT2 REDEF TPTR2$,
      2 WRD_OFST BIT(18) UNAL,
      2 BYT_OFST BIT(2) UNAL,
      2 BIT_OFST BIT(4) UNAL,
      2 * BIT(12) UNAL;
DCL   TIX1              SBIN WORD ALIGNED   SYMREF;
DCL   TIX2              SBIN WORD ALIGNED   SYMREF;
DCL   TEMP1             SBIN WORD ALIGNED   SYMREF;
DCL   TEMP2             SBIN WORD ALIGNED   SYMREF;
 
/******************************************************************************/
/*********         CONSTANTS                                         **********/
/******************************************************************************/
 
/*** SPECIAL BUFFER ID FOR FIRST AND LAST BLOCKS OF BLOCK SPACE ***/
DCL   SPL_BUF_ID        SBIN WORD ALIGNED   SYMREF;
                                        /* EQUAL TO MAX ID - 1                */
 
/*** BUFFER ID INDICATING UNUSED BLOCK ***/
DCL   UNUSED_BUF_ID     SBIN WORD ALIGNED   SYMREF;
                         /* EQUAL TO MAX ID = (2**10 - 1) LIMITED BY BLK.ID   */
 
/*** BUFFER DESCRIPTOR SIZE IN WORDS ***/
DCL   BUF_DESC_SIZE     SBIN WORD ALIGNED   SYMREF;
 
/*** MAXIMUM BLOCK SIZE LIMITED BY 26 BIT FIELD ***/
DCL   MAX_BLK_SIZE      SBIN WORD ALIGNED   SYMREF;
                                        /* 2**26 - 1 LIMITED BY BLK.SIZE      */
 
/*** LAST BLOCK HEADER: ID=SPL_BUF_ID, SIZE=1 ***/
DCL 1 END_BLK ALIGNED SYMREF,
      2 * UBIN(10) UNAL,
                                        /* SPECIAL END BLOCK ID               */
      2 * UBIN(26) UNAL;
                                        /* SIZE = 1 WORD                      */
 
/***   Z-REGISTER Y FLAGS   ***/
DCL   ZYF_DONT_GOSSIP   BIT(36)   ALIGNED   SYMREF;
                                   /* TELL FILER NOT TO REPORT MINOR DETAILS  */
DCL   ZYF_DONT_TALTRET  BIT(36)   ALIGNED   SYMREF;
                                   /* TELL FILER NOT TO GIVE ALTRET MESSAGE   */
DCL ZYF_ABORT_ON_ALTRET BIT(36) ALIGNED SYMREF;
                              /* Tell FILER to abort if M$ ALTRETs */
DCL ZYF_DONT_USE_ERRMSG BIT(36) ALIGNED SYMREF;
                                        /* Tell FILER don't use M$ERRMSG       */
/*** BUFFER/VALUE TYPES ***/
DCL   BT_UNUSED         SBIN WORD ALIGNED   SYMREF;
DCL   BT_VALUE          SBIN WORD ALIGNED   SYMREF;
DCL   BT_FIX_BUF        SBIN WORD ALIGNED   SYMREF;
DCL   BT_VAR_BUF        SBIN WORD ALIGNED   SYMREF;
DCL   BT_CMND_BUF       SBIN WORD ALIGNED   SYMREF;
DCL   BT_FPT_BUF        SBIN WORD ALIGNED   SYMREF;
DCL   BT_ZREG_BUF       SBIN WORD ALIGNED   SYMREF;
DCL   BT_DCB            SBIN WORD ALIGNED   SYMREF;
DCL   BT_MAPPED         SBIN WORD ALIGNED   SYMREF;
 
/*** RESOLUTION WIDTHS: BIT, CHAR, WORD ***/
DCL   RES_WIDTH(0:2)    SBIN WORD ALIGNED   SYMREF;
 
/******************************************************************************/
/*********                BLOCK SPACE                        ******************/
/******************************************************************************/
 
DCL   NBR_PAGES_USED    SBIN WORD ALIGNED   SYMREF;
                                        /* TRACKS PAGE UTILIZATION            */
 
DCL   DATA_BASE$        PTR       ALIGNED   SYMREF;
                                        /* POINTER TO START OF BLOCK SPACE    */
 
DCL   OUT_BUF_IX        SBIN WORD ALIGNED   SYMREF;
                                        /* INDEX OF OUTPUT BUFFER             */
 
DCL   OUT_BUF$          PTR       ALIGNED   SYMREF;
                                        /* POINTER TO OUTPUT BUFFER           */
 
DCL   OUT_CHARX         SBIN WORD ALIGNED   SYMREF;
                                        /* NUMBER OF CHARS IN OUTPUT BUFFER   */
DCL   CR_CHARX          SBIN WORD ALIGNED   SYMREF;
                              /* POSITION+1 OF LAST CR IN CURRENT STRING$     */
DCL   CR_COUNT          SBIN WORD ALIGNED   SYMREF;
                                        /* COUNT OF CR'S IN CURRENT STRING$   */
DCL   Z_REG_IX          SBIN WORD ALIGNED   SYMREF;
                                        /* INDEX OF Z REGISTER BUFFER         */
 
DCL   Z_REG$            PTR       ALIGNED   SYMREF;
                                        /* POINTER TO Z-REGISTERS             */
DCL   STRT_BUF_DESC_IX  SBIN WORD ALIGNED   SYMREF;
                                        /* INDEX OF FIRST BUFFER DESCRIPTOR   */
 
DCL   STRT_BUF_DESC$    PTR       ALIGNED   SYMREF;
                                        /* POINTER TO BUFFER DESCRIPTORS      */
DCL   STRT_VAL_DESC_IX  SBIN WORD ALIGNED   SYMREF;
                                        /* INDEX OF FIRST VALUE DESCRIPTOR    */
 
DCL   END_VAL_DESC_IX   SBIN WORD ALIGNED   SYMREF;
                                        /* INDEX OF LAST VALUE DESCRIPTOR     */
 
DCL   LAST_VAL_DESC_IX  SBIN WORD ALIGNED   SYMREF;
                                        /* INDEX OF LAST VALUE DESCRIPTOR     */
 
DCL   STRT_BLK_IX       SBIN WORD ALIGNED   SYMREF;
                                   /* INDEX OF FIRST BLOCK OF BLOCK SPACE     */
 
DCL   END_BLK_IX        SBIN WORD ALIGNED   SYMREF;
                              /* INDEX OF LAST (END) BLOCK OF BLOCK SPACE     */
 
DCL   LAST_FREE_IX      SBIN WORD ALIGNED   SYMREF;
                                        /* INDEX OF LAST WORD OF BLOCK SPACE  */
 
DCL   LOWEST_DEALLOC_IX SBIN WORD ALIGNED   SYMREF;
                              /* HOLDS IX OF DEALLOCATED BLOCK WITH LOWEST IX */
 
/******************************************************************************/
/*********       UNTIL M$GDP AND M$FDP WORK                          **********/
/******************************************************************************/
/***   THE PAGES   ***/
DCL   FREE_PAGES(0:1023)  SBIN WORD DALIGNED SYMREF;
 
DCL   LAST_FREE_PAGE_IX SBIN WORD ALIGNED   SYMREF;
 
/***   FLAG INDICATING WHETHER M$GDP AND M$FDP WORK   ***/
DCL   LOCAL_PAGES       SBIN WORD ALIGNED   SYMREF;
 
/******************************************************************************/
/*********       SHOULD BE CONSTANT BUT CAN'T INIT                   **********/
/******************************************************************************/
 
/*** TABLE OF POWERS OF TWO INDEXED BY EXPONENT ***/
DCL   TWO_POWER (0:35)  SBIN WORD ALIGNED   SYMREF;
 
/*** TABLE OF RIGHT JUSTIFIED MASKS INDEXED BY NUMBER OF BITS ***/
DCL   MASKR (0:36)      SBIN WORD ALIGNED   SYMREF;
 
 
/******************************************************************************/
/*********                  CURRENTS                                 **********/
/******************************************************************************/
 
DCL   DESC$             PTR       ALIGNED   SYMREF;
                                   /* CURRENT VALUE/BUFFER DESCRIPTOR POINTER */
 
DCL   DWIDTH            SBIN WORD ALIGNED   SYMREF;
                                        /* WIDTH OF CURRENT VALUE/BUFFER      */
 
DCL   STRING$           PTR       ALIGNED   SYMREF;
                                        /* CURRENT STRING POINTER             */
 
DCL   CHAR$             PTR       ALIGNED   SYMREF;
                                        /* CURRENT CHAR POINTER               */
 
DCL   CHARX             SBIN WORD ALIGNED   SYMREF;
                                        /* CURRENT CHAR INDEX                 */
 
DCL   CHARX_MAX         SBIN WORD ALIGNED   SYMREF;
                                        /* LENGTH OF CURRENT STRING - 1       */
 
DCL   C                 SBIN WORD ALIGNED   SYMREF;
                                        /* CURRENT CHAR                       */
DCL   PREV_C            SBIN WORD ALIGNED   SYMREF;
                                        /* PREVIOUS CHAR                      */
 
DCL   VAL_FAULT         SBIN WORD ALIGNED   SYMREF;
                         /* MULTI_VALUED FLAG SET WHEN ERRORS ARE DETECTED    */
DCL   BRK_FLAG          SBIN WORD ALIGNED   SYMREF;
                    /* FLAG SET TO INDICATE THAT THE BREAK KEY HAS BEEN HIT   */
                         /* WHILE VALUES ARE BEING CONVERTED TO INTERNAL REP  */
 
DCL   VALUE_LEVEL       SBIN WORD ALIGNED   SYMREF;
                         /* HELPS SIMULATE RECURSION DURING VALUE CONVERSION  */
                                        /* LEVEL OF CONVERSION                */
 
DCL   VALUE_DESC$(0:15) PTR       ALIGNED   SYMREF;
          /* HOLDS POINTERS TO VALUES AWAITING CONVERSION OF OTHER VALUES     */
 
DCL   VALUE_DWIDTH(0:15) SBIN WORD ALIGNED  SYMREF;
               /* HOLDS WIDTHS OF VALUES AWAITING CONVERSION OF OTHER VALUES  */
 
DCL   VALUE_STACK_MAX   SBIN WORD ALIGNED   SYMREF;
                                        /* MAXIMUM INDEX OF VALUE STACKS      */
 
DCL   DFLT_BASE         SBIN WORD ALIGNED   SYMREF;
                                        /* BASE FOR BASED VALUE CONVERSION    */
 
DCL   DFLT_BASE_WIDTH   SBIN WORD ALIGNED   SYMREF;
                                        /* LOG BASE 2 OF DFLT_BASE            */
 
DCL 1 CRNT_NAME ALIGNED SYMREF,
                                        /* CURRENT NAME USED DURING LOOKUPS   */
      2 LENGTH SBIN WORD UNAL,          /* NUMBER OF BYTES IN NAME            */
      2 CHR(0:79) UBIN(9) UNAL,
      2 CHARS REDEF CHR CHAR(80) UNAL;
 
DCL   CRNT_NAME$        PTR       ALIGNED   SYMREF;
 
DCL   CRNT_VAL$         PTR       ALIGNED   SYMREF;
                                   /* POINTER TO CURRENT VALUE DESCRIPTOR     */
 
DCL   CRNT_VAL_BLK_IX   SBIN WORD ALIGNED   SYMREF;
                                        /* INDEX OF CURRENT VALUE BLOCK       */
                                        /* POINTER TO CURRENT NAME            */
 
DCL 1 PSBL_ERRS(0:15) ALIGNED SYMREF,
                              /* SAVES POSSIBLE ERROR CODES AND POSITIONS     */
      2 CHARX SBIN WORD UNAL,           /* CHARX WHERE ERROR WAS FOUND        */
      2 CR_CHARX SBIN WORD UNAL,        /* CHARX WHERE LAST CR WAS FOUND      */
      2 CR_COUNT SBIN WORD UNAL,        /* NUMBER OF CRS FOUND IN CURRENT     */
      2 BID SBIN WORD UNAL,             /* BUFFER ID OF CURRENT STRING        */
      2 CODE SBIN WORD UNAL;            /* ERROR CODE                         */
 
DCL   PSBL_ERR_IX       SBIN WORD ALIGNED   SYMREF;
                                        /* INDEX INTO PSBL_ERRS               */
 
DCL   NBR_PSBL_ERRS     SBIN WORD ALIGNED   SYMREF;
                                        /* COUNTS THEM                        */
 
DCL   MAX_PSBL_ERR_IX   SBIN WORD ALIGNED   SYMREF;
                                        /* HIGHEST IX OF SAVED ERROR          */
DCL   DFLT_DT           SBIN WORD ALIGNED   SYMREF;
                                        /* DEFAULT DISPLAY TYPE               */
DCL   LINE_WID          SBIN WORD ALIGNED   SYMREF;
                                        /* LINE WIDTH FOR OUTPUT              */
DCL   X_CMND_BUF$       PTR       ALIGNED   SYMREF;
                                        /* POINTER TO X BUFFER DESCRIPTOR     */
DCL   Y_FPT_BUF$        PTR       ALIGNED   SYMREF;
                                        /* POINTER TO Y BUFFER DESCRIPTOR     */
DCL   ZX$               PTR       ALIGNED   SYMREF;
                                        /* POINTER TO Z REGISTER X            */
DCL   ZY$               PTR       ALIGNED   SYMREF;
                                        /* POINTER TO Z REGISTER Y            */
DCL   ZZ$               PTR       ALIGNED   SYMREF;
                                        /* POINTER TO Z REGISTER Z            */
DCL   READ_FILE         SBIN WORD ALIGNED   SYMREF;
                         /* FLAG INDICATING IF FILE INPUT (1) OR TERMINAL (0) */
DCL   ECHO              SBIN WORD ALIGNED   SYMREF;
                  /* Set if XEQ or batch */
DCL   FILE_RCOUNT       SBIN WORD ALIGNED   SYMREF;
                                   /* COUNT OF RECORDS READ FROM CURRENT FILE */
DCL   UPSHIFT_FLAG      SBIN WORD ALIGNED   SYMREF;
                                   /* 1 IF UPSHIFT TO BE DONE, 0 OTHERWISE    */
DCL ECHO_XEQ_FLAG       SBIN WORD ALIGNED   SYMREF;
                                   /* 1 if ECHO XEQ files, 0 if not           */
DCL 1 FILE_STACK(0:4) SYMREF,
                                   /* STACK FOR CALLS TO ADDITIONAL FILES     */
      2 NAME,
        3 LENGTH UBIN(9) UNAL,          /* LENGTH OF FILE NAME                */
        3 CHR CHAR(31) UNAL,            /* FILE NAME ON STACK                 */
      2 ACCT CHAR(8) UNAL,
      2 RCOUNT SBIN WORD ALIGNED;       /* NEXT RECORD #                      */
 
DCL   FILE_STK_IX       SBIN      WORD ALIGNED   SYMREF;
                                        /* STACK POINTER FOR FILE STACK       */
 
DCL   FILE_STK_IX_MAX   SBIN      WORD ALIGNED   SYMREF;
                              /* MAX. NUMBER OF FILES POSSIBLE ON STACK -1    */
 
 
/*********************************************************************/
/******************          M$GDP, M$FDP RESULTS   ******************/
/*********************************************************************/
 
DCL FPT_RESULTSV VECTOR DALIGNED SYMREF;
 
DCL 1 FPT_RESULTS REDEF FPT_RESULTSV,
                                        /*  FPT RESULT VECTOR                 */
      2 BOUND UBIN(20) UNAL,
      2 FLAGSV UBIN(11) UNAL,
      2 * BIT(5),
      2 DATA$ PTR UNAL;
 
