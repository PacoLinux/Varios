/*M*   SHOW JIT TIMES*/
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* */
ST:     PROC MAIN;
DCL B$JIT$ PTR SYMREF;
DCL JIT$ PTR;
%INCLUDE B$JIT_C;
%B$JIT0(STCLASS="BASED(JIT$)");
%U$JIT1;
%M$JIT2;
%F$JIT3;
%S$JIT4;
%J$JIT5;
%A$JIT6;
/*
*/
DCL OLD(0:13) SBIN STATIC INIT(0*14);
DCL NEW(0:13) SBIN STATIC;
/*
*/
DCL 1 MSG STATIC,
      2 L1,
        3 HD CHAR(0) INIT('Job total   '),
        3 * CHAR(0) INIT(' #Pmmes='),
        3 PMME CHAR(9),
        3 * CHAR(0) INIT('   #IO''S='),
        3 IOS CHAR(9),
        3 * CHAR(0) INIT('   UTS='),
        3 UTS CHAR(13),
/*
        3 * CHAR(0) INIT(' TMR='),
        3 TIMER CHAR(17),
*/
      2 L1X,
        3 * CHAR(0) INIT('    M$EXEC='),
        3 EX CHAR(15),
        3 * CHAR(0) INIT(' M$SERV= '),
        3 SV CHAR(12),
      2 L2,
        3 PU CHAR(0) INIT(' Proc exec='),
        3 EX1 CHAR(15),
        3 * CHAR(0) INIT(' Serv='),
        3 SV1 CHAR(15),
        3 * CHAR(0) INIT(' Page-secs='),
        3 MEM1 CHAR(11),
      2 L3,
        3 U CHAR(0) INIT(' User exec='),
        3 EX1 CHAR(15),
        3 * CHAR(0) INIT(' Serv='),
        3 SV1 CHAR(15),
        3 * CHAR(0) INIT(' Page-secs='),
        3 MEM1 CHAR(11);
/*
*/
DCL TOF CHAR(1) CONSTANT INIT('0');
DCL BLNK CHAR(1) CONSTANT INIT(' ');
DCL 1 TD STATIC,
      2 D CHAR(0) INIT('DAY. '),
      2 DT CHAR(0) INIT('MON DD ''YY '),
      2 TM CHAR(0) INIT('HH:MM:SS.SS'),
      2 MEM,
        3 * CHAR(0) INIT(' Mem(max='),
        3 MAX CHAR(4),
        3 * CHAR(0) INIT(', spk='),
        3 SPEAK CHAR(4),
        3 * CHAR(0) INIT(', jpk='),
        3 JPEAK CHAR(4),
        3 * CHAR(0) INIT('),Steps='),
      2 STEP CHAR(3);
DCL 1 ULINE STATIC,
      2 ACCN CHAR(9),
      2 UNAME CHAR(13),
      2 * CHAR(0) INIT('Sysid='),
      2 SYSID CHAR(6);
DCL 1 MEMMSG STATIC,
      2 MODE CHAR(2),
      2 ACCN CHAR(8),
      2 SYSID CHAR(6),
      2 JPEAK CHAR(4),
      2 MAXCORE CHAR(4),
      2 CURRCORE CHAR(4),
      2 PPC CHAR(4),
      2 OK CHAR(1),
      2 PCP CHAR(4),
      2 SHAR CHAR(1),
      2 PCD CHAR(4),
      2 PCDS CHAR(4),
      2 PCC CHAR(4),
      2 PCROS CHAR(4),
      2 PCDD CHAR(4),
      2 PCDADS CHAR(4),
      2 FBUC CHAR(3),
      2 FBPP CHAR(3),
      2 FBUL CHAR(3),
      2 * CHAR(1) INIT(' '),
      2 CCBUF CHAR(45),
      2 UNAME CHAR(12);
DCL 1 MEMTOT STATIC,
      2 * CHAR(0) INIT('Total user pages = '),
      2 TOTU CHAR(4),
      2 * CHAR(0) INIT('    Ming pages = '),
      2 TOTM CHAR(3),
      2 * CHAR(0) INIT('    Number of users = '),
      2 NUMU CHAR(3);
DCL 1 MEMTOT1 STATIC,
      2 * CHAR(0) INIT('Pages per user = '),
      2 PPU CHAR(3),
      2 * CHAR(0) INIT('    Pages per real (non-ming) user = '),
      2 PPNGU CHAR(3);
DCL UTSL SBIN STATIC INIT(69696969);
DCL BADUM CHAR(0) CONSTANT INIT('Bad User#/Sysid');
DCL NOPRIVM CHAR(0) CONSTANT INIT('You''re not privileged to do that!');
DCL OPTS CHAR(0) CONSTANT INIT('0123456789Uu.BbOoGgTtAaMmHh');
DCL MEMHDR1 CHAR(0) CONSTANT INIT(
'M Acct     SysidPeak  Resco Phys Proc Data Dyn Con  RO Dyn Dbg  Fpool   CCBF');
DCL MEMHDR2 CHAR(0) CONSTANT INIT(
'                 Job Max Cur Pgs  Pgs  Pgs Seg txt Pgs Pgs+Asl VP PPlim');
DCL TMR CHAR(72) STATIC;
DCL MODES (0:4) CHAR(2) CONSTANT INIT ('**','B ','G ','O ','T ');
DCL MODES1 CHAR(9) CONSTANT INIT ('~BGOTbgot');
DCL NTIMS SBIN STATIC INIT(0);
DCL NRPTS SBIN STATIC INIT(-1);
DCL TIM1 SBIN STATIC INIT(0);
DCL TIM2 SBIN STATIC INIT(0);
DCL TIM3 SBIN STATIC INIT(0);
DCL TIM4 SBIN STATIC INIT(0);
DCL MEMOPT BIT(1) STATIC INIT('0'B);
/*
*/
DCL TEMPC1 CHAR(10) STATIC;
DCL TEMPC6 CHAR(6);
DCL TEMPC9 CHAR(9);
DCL TEMPC11 CHAR(11) STATIC;
DCL TEMPC12 CHAR(12);
DCL TEMPC14 CHAR(14);
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL H UBIN HALF;
DCL FPP SBIN;
DCL STOPT SBIN;
DCL ENDOPT SBIN;
DCL THISUSER SBIN;
DCL USERNO SBIN STATIC INIT(0);
DCL SYSID SBIN STATIC INIT(0);
DCL BOGFLG SBIN;
DCL PGCNT UBIN STATIC INIT(0);
DCL TOTUMEM UBIN STATIC INIT(0);
DCL TOTMINGMEM UBIN STATIC INIT(0);
DCL TOTU UBIN STATIC INIT(0);
%SET MING=13;
/*
*/
%INCLUDE SS_SCHED_C;
%INCLUDE B$USER;
%INCLUDE B_SEGIDS_C;
DCL OFFS SBIN HALF BASED;
DCL 1 B$USERX STATIC,
      2 WD SBIN HALF UNAL INIT(0),
      2 * BIT(6) INIT('0'B),
      2 * BIT(12) INIT(%SPCL1SID);
DCL B$USER$ REDEF B$USERX PTR;
DCL 1 USRS(0:511) BASED (VECT.P$),
      2 SYSID UBIN HALF HALIGNED,
      2 MEM UBIN HALF HALIGNED,
      2 IOS UBIN HALF HALIGNED,
      2 PMMES UBIN HALF HALIGNED,
      2 TIME UBIN;
DCL 1 THOGS(0:5) STATIC ,
      2 SYSID UBIN HALF HALIGNED INIT (0*0),
      2 MEM UBIN (14) UNAL INIT (0*0),
      2 MODE UBIN (4) UNAL INIT (0*0),
      2 TIME UBIN INIT (0*0),
      2 IOS UBIN HALF HALIGNED INIT (0*0),
      2 PMMES UBIN HALF HALIGNED INIT (0*0),
      2 ACCT CHAR(8),
      2 NAME CHAR(12),
      2 CCBUF CHAR(27);
DCL 1 MHOGS(0:5) STATIC ,
      2 SYSID UBIN HALF HALIGNED INIT (0*0),
      2 MEM UBIN (14) UNAL INIT (0*0),
      2 MODE UBIN (4) UNAL INIT (0*0),
      2 TIME UBIN INIT (0*0),
      2 IOS UBIN HALF HALIGNED INIT (0*0),
      2 PMMES UBIN HALF HALIGNED INIT (0*0),
      2 ACCT CHAR(8),
      2 NAME CHAR(12),
      2 CCBUF CHAR(27);
DCL 1 IOHOGS(0:5) STATIC ,
      2 SYSID UBIN HALF HALIGNED INIT (0*0),
      2 MEM UBIN (14) UNAL INIT (0*0),
      2 MODE UBIN (4) UNAL INIT (0*0),
      2 TIME UBIN INIT (0*0),
      2 IOS UBIN HALF HALIGNED INIT (0*0),
      2 PMMES UBIN HALF HALIGNED INIT (0*0),
      2 ACCT CHAR(8),
      2 NAME CHAR(12),
      2 CCBUF CHAR(27);
/*
*/
DCL MOP6(0:1) BIT(9) CONSTANT INIT('105'O,'327'O /*MVZB5,MVC7*/);
DCL MOP9(0:1) BIT(9) CONSTANT INIT('110'O,'327'O /*MVZB8,MVC7*/);
DCL MOP4(0:2) BIT(9) CONSTANT INIT('306'O,'103'O,'327'O /*IGN6,MVZB3,MVC7*/);
DCL MOP3(0:2) BIT(9) CONSTANT INIT('307'O,'102'O,'327'O /*IGN7,MVZB2,MVC7*/);
DCL MOP8P2(0:3) BIT(9) CONSTANT INIT
('107'O,'321'O,'267'O,'322'O /*MVZB7,MVC1,INSP7,MVC2*/);
DCL MOP10P2(0:3) BIT(9) CONSTANT INIT
('111'O,'321'O,'267'O,'322'O);
DCL MOP8P6(0:3) BIT(9) CONSTANT INIT
('107'O,'321'O,'267'O,'326'O);
DCL MOP4P3(0:4) BIT(9) CONSTANT INIT
('304'O,'103'O,'321'O,'267'O,'326'O);
DCL MOP5P6(0:3) BIT(9) CONSTANT INIT
('104'O,'321'O,'267'O,'326'O);
/*
*/
DCL M$LO DCB;
DCL X1 DCB;
%INCLUDE CP_6;
%VLP_NAME(FPTN=FNM,NAME='*X1');
DCL 1 K1 STATIC,
      2 * UBIN BYTE UNAL INIT(3),
      2 SYSID UBIN(27) UNAL;
%FPT_TIME(FPTN=TM,STCLASS=CONSTANT,DATE=TD.DT,TIME=TD.TM,DAY=TD.D,TSTAMP=UTSL);
%FPT_XEQTIME(FPTN=XEQT,STCLASS=CONSTANT,BUF=OLD);
%FPT_WRITE(FPTN=WRTIM,BUF=TD,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=WRULINE,BUF=ULINE,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=WRTOF,BUF=TOF,DCB=M$LO,STCLASS=CONSTANT,VFC=YES);
%FPT_WRITE(FPTN=WRBLNK,BUF=BLNK,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=WR1,BUF=MSG.L1,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=WR1X,BUF=MSG.L1X,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=WR2,BUF=MSG.L2,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=WR3,BUF=MSG.L3,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=WRTMR,BUF=TMR,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=BADU,BUF=BADUM,DCB=M$LO,STCLASS=CONSTANT);
%FPT_OPEN(FPTN=OPOLD,DCB=X1,NAME=FNM,DISP=NAMED,FUN=CREATE,EXIST=OLDFILE,
ASN=FILE,ORG=KEYED,ACS=DIRECT,STCLASS=CONSTANT);
%FPT_CLOSE(FPTN=CLOSE,DCB=X1,DISP=SAVE,STCLASS=CONSTANT);
%FPT_CLOSE(FPTN=CLLO,DCB=M$LO,DISP=SAVE,STCLASS=CONSTANT);
%FPT_READ(FPTN=RDOLD,BUF=OLD,DCB=X1,KEY=K1,KEYS=YES,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=WRNEW,DCB=X1,BUF=NEW,KEY=K1,STCLASS=CONSTANT);
%FPT_SAD(FPTN=SADTIGR,USERSID=%SPCL1SID,MONSID=%TIGRSID,STCLASS=CONSTANT);
%FPT_WRITE(FPTN=NOPRIV,BUF=NOPRIVM,DCB=M$LO,STCLASS=CONSTANT);
%FPT_PRIV(FPTN=SPRIV,PRIV=%PR_SPCLMM#,AUTH=YES,STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WMEMHDR1,BUF=MEMHDR1,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WMEMHDR2,BUF=MEMHDR2,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WMEMMSG,BUF=MEMMSG,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WMEMTOT,BUF=MEMTOT,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WMEMTOT1,BUF=MEMTOT1,DCB=M$LO,STCLASS=CONSTANT);
%FPT_GDS (FPTN=GDS,SEGSIZE=2048,RESULTS=VECT,STCLASS=CONSTANT);
%FPT_WAIT (FPTN=WAIT,UNITS=30,STCLASS=CONSTANT);
%FPT_MONINFO (STCLASS=CONSTANT,MONPTRS=MPTRS,MONINFO=INFO,SITEINFO=SITE);
%VLR_SITEINFO (FPTN=SITE);
%VLR_MONPTRS (FPTN = MPTRS);
%VLR_MONINFO (FPTN=INFO);
DCL 1 VECT STATIC,
      2 * UBIN,
      2 P$ PTR INIT(ADDR(NIL));
%EJECT;
        JIT$=B$JIT$;
        CALL M$WRITE(WRTOF);
        CALL M$OPEN(OPOLD);
        CALL INDEX (STOPT,'(',B$JIT.CCBUF) ALTRET(NOOPT);
        STOPT=STOPT+1;
        CALL INDEX (ENDOPT,')',SUBSTR(B$JIT.CCBUF,STOPT)) ALTRET(NOUSER);
OPTIONS:
        THISUSER=B$JIT.USER;
        CALL INDEX (I,SUBSTR(B$JIT.CCBUF,STOPT,1),OPTS);
        CALL M$SPRIV(SPRIV) ALTRET(CANTDO);
        CALL M$SAD(SADTIGR);
        CALL M$MONINFO (FPT_MONINFO) ALTRET (CANTDO);
        BOGFLG = 7;
        DO CASE(I);
         CASE(0,1,2,3,4,5,6,7,8,9);
           CALL CHARBIN(SYSID,SUBSTR(B$JIT.CCBUF,STOPT,ENDOPT));
           DO WHILE(USERNO<INFO.MUAIS#);
              USERNO=USERNO+1;
              CALL GETU ALTRET(NOTTHIS);
              IF B$USER$->B$U.SYSID=SYSID
              THEN DO;
                 CALL GETJIT;
                 CALL SHOWTIME;
                 GOTO CLOSEUP;
                 END;
NOTTHIS:      END;
         CASE(10,11,12);
           DO WHILE (ENDOPT>1);
              STOPT=STOPT+1;
              USERNO=USERNO*8+ASCBIN(SUBSTR(B$JIT.CCBUF,STOPT,1))-ASCBIN('0');
              ENDOPT=ENDOPT-1;
              END;
           CALL GETU ALTRET(NOUSER);
           CALL GETJIT;
           CALL SHOWTIME;
           GOTO CLOSEUP;
         CASE(13,14);
           BOGFLG=%M_BATCH#;
           GOTO BOGLOOP;
         CASE(15,16);
           BOGFLG=%M_INT#;
           GOTO BOGLOOP;
         CASE(17,18);
           BOGFLG=%M_GHOST#;
           GOTO BOGLOOP;
         CASE(19,20);
           BOGFLG=%M_TP#;
           GOTO BOGLOOP;
         CASE(21,22);
BOGLOOP:   DO WHILE (USERNO<INFO.MUAIS#);
              USERNO=USERNO+1;
              CALL GETU ALTRET(NOTTHIS1);
              CALL GETJIT;
              IF MEMOPT
              THEN DO;
                 PGCNT=PGCNT+1;
                 IF PGCNT > 10
                 THEN DO;
                    PGCNT=0;
                    CALL M$WRITE(WMEMHDR1);
                    CALL M$WRITE(WMEMHDR2);
                    END;
                 CALL SHOWMEM;
                 END;
              ELSE
                 CALL SHOWTIME;
NOTTHIS1:     END;
           IF MEMOPT AND BOGFLG = 7
           THEN DO;
              CALL BINCHAR (MEMTOT.TOTU,TOTUMEM);
              CALL BINCHAR (MEMTOT.TOTM,TOTMINGMEM);
              CALL BINCHAR (MEMTOT.NUMU,TOTU);
              CALL BINCHAR (MEMTOT1.PPU,(TOTU/2+TOTUMEM)/TOTU);
              TOTU=TOTU-%MING;
              CALL BINCHAR (MEMTOT1.PPNGU,(TOTU/2+TOTUMEM-TOTMINGMEM)/TOTU);
              CALL M$WRITE (WMEMTOT);
              CALL M$WRITE (WMEMTOT1);
              END;
           GOTO CLOSEUP;
         CASE(23,24);
           CALL INDEX (I,SUBSTR(B$JIT.CCBUF,STOPT+1,1),MODES1)
           WHENRETURN DO;
              BOGFLG = I;
              IF BOGFLG > 4
              THEN
                 BOGFLG = BOGFLG - 4;
              END;
           MEMOPT='1'B;
           CALL M$WRITE(WRTOF);
           CALL M$WRITE(WMEMHDR1);
           CALL M$WRITE(WMEMHDR2);
           GOTO BOGLOOP;
         CASE(25,26);
           CALL INDEX (I,SUBSTR(B$JIT.CCBUF,STOPT+1,1),MODES1)
           WHENRETURN DO;
              BOGFLG = I;
              IF BOGFLG > 4
              THEN
                 BOGFLG = BOGFLG - 4;
              END;
           CALL M$GDS (GDS);
           USRS = '0'B;
DOUSRS1:   DO USERNO = 1 TO INFO.MUAIS#;
              CALL GETU ALTRET (NOHOG);
              CALL GETJIT;
              USRS.SYSID(USERNO) = B$JIT.SYSID;
              USRS.MEM(USERNO) = B$JIT.PPC;
              USRS.IOS (USERNO) = B$JIT.ACCESS.PACKS;
              USRS.PMMES (USERNO) = B$JIT.CALCNT;
              USRS.TIME(USERNO) = (B$JIT.TPEXT
                +B$JIT.TPSVT
                +B$JIT.TUEXT
                +B$JIT.TUSVT) * 10000
                +B$JIT.EXTUS
                +B$JIT.SVTUS
                +B$JIT.XTIME
                +B$JIT.STIME ;
NOHOG:        END DOUSRS1;
           CALL M$WAIT (WAIT);
DOUSR2:    DO USERNO = 1 TO INFO.MUAIS#;
              CALL GETU ALTRET (NOHOG1);
              CALL GETJIT;
              IF B$JIT.SYSID = USRS.SYSID (USERNO)
              THEN DO;
                 I = -USRS.TIME (USERNO)
                   +(B$JIT.TPEXT
                   +B$JIT.TPSVT
                   +B$JIT.TUEXT
                   +B$JIT.TUSVT) * 10000
                   +B$JIT.EXTUS
                   +B$JIT.SVTUS
                   +B$JIT.XTIME
                   +B$JIT.STIME ;
                 J = MAXIMUM (B$JIT.PPC , USRS.MEM (USERNO));
                 H = B$JIT.ACCESS.PACKS;
                 K = H - USRS.IOS (USERNO);
                 TIM3 = B$JIT.CALCNT - USRS.PMMES (USERNO);
                 STOPT = 5;
                 TIM1 = I;
                 TIM2 = K;
                 PGCNT = J;
WHILEGR:         DO WHILE (STOPT >= 0);
                    CALL SETHOG (THOGS);
                    CALL SETHOG (MHOGS);
                    CALL SETHOG (IOHOGS);
                    STOPT = STOPT - 1;
                    END WHILEGR;
                 END ;
NOHOG1:       END DOUSR2;
           CALL SHHOG (THOGS,'(CPU)   ');
           CALL SHHOG (MHOGS,'(Memory)');
           CALL SHHOG (IOHOGS,'(I/O)   ');
           RETURN;
         CASE(ELSE);
         END;
NOUSER: CALL M$WRITE(BADU);
        CALL M$ERR;
CANTDO: CALL M$WRITE(NOPRIV);
        CALL M$ERR;
NOOPT:  CALL INDEX (STOPT,' ',B$JIT.CCBUF) ALTRET(NOOPT1);
        STOPT = STOPT + 1;
        CALL INDEX (ENDOPT,' ',SUBSTR(B$JIT.CCBUF,STOPT)) ALTRET(NOOPT1);
        IF ENDOPT > 0 THEN GOTO OPTIONS;
NOOPT1: CALL SHOWTIME;
CLOSEUP:
        CALL M$CLOSE(CLOSE);
        CALL M$CLOSE(CLLO);
        RETURN;
%EJECT;
SHOWTIME: PROC;
DCL XUD$UTS_DIFF ENTRY(3) ALTRET;
        ULINE.UNAME=B$JIT.UNAME;
        ULINE.ACCN=B$JIT.ACCN;
        CALL BINCHAR(TEMPC6,B$JIT.SYSID);
        CALL EDITCHAR(ULINE.SYSID,,,MOP6,TEMPC6);
        CALL M$WRITE(WRULINE);
        K1.SYSID=B$JIT.SYSID;
        NEW(0)=B$JIT.CALCNT;
        DO INHIBIT;
           IF B$JIT.RUNFLAGS & %RUN_PROC# THEN
           DO;
              NEW(3)=B$JIT.TPEXT*10000+B$JIT.EXTUS+B$JIT.XTIME;
              NEW(4)=B$JIT.TPSVT*10000+B$JIT.SVTUS+B$JIT.STIME;
              NEW(6)=B$JIT.TUEXT*10000;
              NEW(7)=B$JIT.TUSVT*10000;
              END;
           ELSE
           DO;
              NEW(3)=B$JIT.TPEXT*10000;
              NEW(4)=B$JIT.TPSVT*10000;
              NEW(6)=B$JIT.TUEXT*10000+B$JIT.EXTUS+B$JIT.XTIME;
              NEW(7)=B$JIT.TUSVT*10000+B$JIT.SVTUS+B$JIT.STIME;
              END;
           END;
        NEW(5)=B$JIT.PMEMTIM/10;
        NEW(8)=B$JIT.UMEMTIM/10;
        NEW(12)=B$JIT.ACCESS.PACKS;
        CALL M$TIME(TM);
        CALL XUD$UTS_DIFF( NEW(9), UTSL, B$JIT.LOGONTIME );
        CALL M$XEQTIME(XEQT);
        NEW(1)=OLD(1);
        NEW(2)=OLD(3);
        CALL BINCHAR(TD.MEM.MAX,B$JIT.MAXCORE);
        CALL BINCHAR(TD.MEM.SPEAK,B$JIT.SPEAK);
        CALL BINCHAR(TD.MEM.JPEAK,B$JIT.JPEAK);
        CALL BINCHAR(TD.STEP,B$JIT.STEPS);
        CALL M$WRITE(WRTIM);
        MSG.L1.HD='Job total';
        CALL STSUB(NEW);
        CALL M$READ(RDOLD) ALTRET(NOOLD);
        DO I = 0 TO 13;
           OLD(I)=NEW(I)-OLD(I);
           END;
        IF OLD(11)<0
        THEN DO;
           OLD(11)=OLD(11)+10000;
           OLD(10)=OLD(10)-1;
           END;
        MSG.L1.HD='Incremental';
        CALL STSUB(OLD);
NOOLD:  CALL M$WRITE(WRNEW);
        CALL M$WRITE(WRBLNK);
        RETURN;
%EJECT;
STSUB:  PROC(JVALS);
DCL JVALS(0:13) SBIN;
        CALL BINCHAR(TEMPC9,JVALS(0)/*CALCNT*/);
        CALL EDITCHAR(MSG.L1.PMME,,,MOP9,TEMPC9);
        CALL BINCHAR(TEMPC9,JVALS(12)/*DSKIOS*/);
        CALL EDITCHAR(MSG.L1.IOS,,,MOP9,TEMPC9);
        CALL BINCHAR(TEMPC12,JVALS(9)/*UTS*/);
        CALL EDITCHAR(MSG.L1.UTS,0,13,MOP10P2,TEMPC12);
        CALL M$WRITE(WR1);
        CALL BINCHAR(TEMPC14,JVALS(3)) /*TPEXT*/;
        CALL EDITCHAR(MSG.L2.EX1,0,15,MOP8P6,TEMPC14);
        CALL BINCHAR(TEMPC14,JVALS(4)) /*TPSVT*/;
        CALL EDITCHAR(MSG.L2.SV1,0,15,MOP8P6,TEMPC14);
        CALL BINCHAR(TEMPC1,JVALS(5)) /*PMEMTIM*/;
        CALL EDITCHAR(MSG.L2.MEM1,0,11,MOP8P2,TEMPC1);
        CALL M$WRITE(WR2);
        CALL BINCHAR(TEMPC14,JVALS(6)) /*TUEXT*/;
        CALL EDITCHAR(MSG.L3.EX1,0,15,MOP8P6,TEMPC14);
        CALL BINCHAR(TEMPC14,JVALS(7)) /*TUSVT*/;
        CALL EDITCHAR(MSG.L3.SV1,0,15,MOP8P6,TEMPC14);
        CALL BINCHAR(TEMPC1,JVALS(8)) /*UMEMTIM*/;
        CALL EDITCHAR(MSG.L3.MEM1,0,11,MOP8P2,TEMPC1);
        CALL M$WRITE(WR3);
        CALL BINCHAR(TEMPC14,JVALS(1));
        CALL EDITCHAR(MSG.L1X.EX,0,15,MOP8P6,TEMPC14);
        CALL BINCHAR(TEMPC11,JVALS(2));
        CALL EDITCHAR(MSG.L1X.SV,0,12,MOP5P6,TEMPC11);
        IF NTIMS<0 THEN
           CALL M$WRITE(WR1X);
        RETURN;
END STSUB;
END SHOWTIME;
%EJECT;
SHOWMEM: PROC;
DCL PPC SBIN;
DCL VAL SBIN;
        MEMMSG.MODE = MODES (B$JIT.MODE);
        MEMMSG.ACCN=B$JIT.ACCN;
        MEMMSG.UNAME=B$JIT.UNAME;
        MEMMSG.CCBUF=B$JIT.CCBUF;
        CALL BINCHAR(TEMPC6,B$JIT.SYSID);
        CALL EDITCHAR(MEMMSG.SYSID,,,MOP6,TEMPC6);
        %MACRO MFLD (XX=YY , ZZ=4);
        VAL = B$JIT.XX;
        CALL CVT (MEMMSG.XX , VAL , ZZ);
%MEND;
        %MFLD (XX=JPEAK);
        %MFLD (XX=MAXCORE);
        %MFLD (XX=CURRCORE);
        %MFLD (XX=PPC);
        PPC = 0;
        TOTU=TOTU+1;
        TOTUMEM=TOTUMEM+B$JIT.PPC;
        IF USERNO<=%MING
        THEN
           TOTMINGMEM=TOTMINGMEM+B$JIT.PPC;
        %MFLD (XX=PCP);
        IF B$USER$ -> B$U.APR = 0
        THEN
           MEMMSG.SHAR = ' ';
        ELSE DO;
           MEMMSG.SHAR = 'S';
           PPC = 0;
           END;
        %MFLD (XX=PCD);
        %MFLD (XX=PCDS);
        %MFLD (XX=PCC);
        %MFLD (XX=PCROS);
        PPC = PPC - 1;
        %MFLD (XX=PCDD);
        VAL = B$JIT.PCDDS + B$JIT.PCADS + B$JIT.PCL;
        CALL CVT (MEMMSG.PCDADS , VAL , 4);
        %MFLD (XX=FBUC , ZZ = 3);
        PPC = PPC - VAL;
        %MFLD (XX=FBUL , ZZ = 3);
        PPC = PPC - VAL;
        CALL CVT (MEMMSG.FBPP , FPP , 3);
        IF PPC = B$JIT.PPC
        THEN MEMMSG.OK = ' ';
        ELSE MEMMSG.OK = '*';
        CALL M$WRITE (WMEMMSG);
        RETURN;
CVT:    PROC (DEST , SRCE , N);
DCL DEST CHAR (4);
DCL SRCE UBIN;
DCL N UBIN;
 
        PPC = PPC + SRCE;
        CALL BINCHAR (TEMPC1 , SRCE);
        IF N = 4
        THEN
           CALL EDITCHAR (DEST , , , MOP4 , TEMPC1);
        ELSE
           CALL EDITCHAR (DEST , , 3 , MOP3 , TEMPC1);
END CVT;
END SHOWMEM;
%EJECT;
SETHOG: PROC (HOGS,WHICH);
DCL 1 HOGS(0:5),
/**/
      2 SYSID UBIN HALF HALIGNED,
      2 MEM UBIN (14) UNAL,
      2 MODE UBIN (4) UNAL,
      2 TIME UBIN,
      2 IOS UBIN HALF HALIGNED,
      2 PMMES UBIN HALF HALIGNED,
      2 ACCT CHAR(8),
      2 NAME CHAR(12),
      2 CCBUF CHAR(27);
DCL WHICH CHAR(8);
DCL HGHD CHAR(0) STATIC INIT(
'M Account Name         Sysid    CPU  Mem  IOs Pmmes CCBUF            ');
%FPT_WRITE (FPTN=WHOGHD,BUF=HGHD,DCB=M$LO,STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WHOGBF,BUF=HGBF,DCB=M$LO,STCLASS=CONSTANT);
DCL 1 HGBF STATIC,
      2 MODE CHAR(2),
      2 ACCT CHAR(8),
      2 NAME CHAR(12),
      2 SYSID CHAR(6),
      2 TIME CHAR(8),
      2 MEM CHAR(4),
      2 * CHAR(1) INIT(' '),
      2 IOS CHAR(4),
      2 PMMES CHAR(6),
      2 * CHAR(1) INIT(' '),
      2 CCBUF CHAR(27);
 
        IF ADDR(HOGS) = ADDR(THOGS)
        THEN DO;
           IF I > HOGS.TIME(STOPT)
           THEN DO;
              ENDOPT = 0;
              DO WHILE (ENDOPT < STOPT);
                 HOGS (ENDOPT) = HOGS (ENDOPT+1);
                 ENDOPT = ENDOPT + 1;
                 END;
              CALL SET;
              I = 0;
              END;
           END;
        ELSE IF ADDR(HOGS) = ADDR(MHOGS)
           THEN DO;
              IF J > HOGS.MEM (STOPT)
              THEN DO;
                 ENDOPT = 0;
                 DO WHILE (ENDOPT < STOPT);
                    HOGS (ENDOPT) = HOGS (ENDOPT+1);
                    ENDOPT = ENDOPT + 1;
                    END;
                 CALL SET;
                 J = 0;
                 END;
              END;
           ELSE DO;
              IF K > HOGS.IOS (STOPT)
              THEN DO;
                 ENDOPT = 0;
                 DO WHILE (ENDOPT < STOPT);
                    HOGS (ENDOPT) = HOGS (ENDOPT+1);
                    ENDOPT = ENDOPT + 1;
                    END;
                 CALL SET;
                 K = 0;
                 END;
              END;
        RETURN;
 
SET:    PROC;
 
        HOGS.SYSID (STOPT) = B$JIT.SYSID;
        HOGS.MEM (STOPT) = PGCNT;
        HOGS.TIME (STOPT) = TIM1;
        HOGS.IOS (STOPT) = TIM2;
        HOGS.PMMES (STOPT) = TIM3;
        HOGS.ACCT (STOPT) = B$JIT.ACCN;
        HOGS.MODE (STOPT) = B$JIT.MODE;
        HOGS.NAME (STOPT) = B$JIT.UNAME;
        HOGS.CCBUF (STOPT) = B$JIT.CCBUF;
END SET;
 
SHHOG:  ENTRY (HOGS,WHICH);
 
        SUBSTR (HGHD,60,8) = WHICH;
        CALL M$WRITE (WRBLNK);
        CALL M$WRITE (WHOGHD);
        DO I = 0 TO 5;
           HGBF.ACCT = HOGS.ACCT(I);
           HGBF.MODE = MODES(HOGS.MODE(I));
           HGBF.NAME = HOGS.NAME(I);
           HGBF.CCBUF = HOGS.CCBUF(I);
           CALL BINCHAR (TEMPC1 , HOGS.MEM (I) );
           CALL EDITCHAR (HGBF.MEM , 0 , 4 , MOP4,TEMPC1);
           CALL BINCHAR (TEMPC6 , HOGS.SYSID (I) );
           CALL EDITCHAR (HGBF.SYSID , 0 , 6 , MOP6,TEMPC6);
           CALL BINCHAR (TEMPC1 , HOGS.IOS (I) );
           CALL EDITCHAR (HGBF.IOS , 0 , 4 , MOP4,TEMPC1);
           CALL BINCHAR (TEMPC6 , HOGS.PMMES (I) );
           CALL EDITCHAR (HGBF.PMMES , 0 , 6 , MOP6,TEMPC6);
           CALL BINCHAR (TEMPC14 , HOGS.TIME(I));
           CALL EDITCHAR (HGBF.TIME,0,8,MOP4P3,TEMPC14);
           IF HOGS.SYSID(I) > 0
           THEN
              CALL M$WRITE (WHOGBF);
           END;
END SETHOG;
%EJECT;
GETJIT: PROC ALTRET;
%FPT_CVM(FPTN=CVM,VPNO=100,WSQFLG=NO);
DCL 1 B$ISX CONSTANT,
      2 * BIT(24) INIT('0'B),
      2 * BIT(12) INIT(%ISSID);
DCL B$IS$ REDEF B$ISX PTR;
DCL 1 PT BASED,
      2 *(0:10) SBIN,
      2 JIT UBIN HALF,
      2 * (0:3) SBIN,
      2 FBUF (0:31) ALIGNED,
        3 * BIT (25),
        3 FB BIT (1),
        3 * BIT (10);
/*
*/
        IF SITE.CPU_TYPE# >= 5
        THEN
           CVM.V.PPNO#=B$USER$->B$U.PT;
        ELSE
           CVM.V.PPNO#=B$USER$->B$U.PT*64/1024;
        CALL M$CVM(CVM);
        JIT$=PINCRW(B$IS$,1024*100);
        FPP = 0;
        DO I = 0 TO 30;
           IF JIT$ -> PT.FBUF.FB (I)
           THEN
              FPP = FPP + 1;
           END;
        CVM.V.PPNO#=JIT$->PT.JIT;
        CALL M$CVM(CVM);
        RETURN;
END GETJIT;
GETU:   PROC ALTRET;
        B$USERX.WD=(USERNO)*SIZEW(B$USER$->B$U)+ADDR(MPTRS.B$USRT$)->OFFS;
        IF B$USER$ -> B$U.US >= %SS_SNULL
        THEN ALTRETURN;
        IF BOGFLG ~= 7 AND BOGFLG ~= B$USER$ -> B$U.MODE
        THEN
           ALTRETURN;
        RETURN;
END GETU;
END ST;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
DUMDEFS: PROC;
DCL B$USRT$ PTR CONSTANT SYMDEF;
DCL S$CU$ PTR CONSTANT SYMDEF;
END;
