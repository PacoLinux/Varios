
PL6.E3A0      #001=XBI$LINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        XBI$LINK_FILE_HEADER: PROC (F);
        7        7           /*I*  NAME: XBI$LINK_FILE_HEADER
        8        8                 CALL: CALL XBI$LINK_FILE_HEADER (F);
        9        9                 INPUT: F file_header;
       10       10                 PURPOSE: Links the stream F into the chain of open streams.
       11       11           */
       12       12
       13       13           %INCLUDE xb_stdio_i6;
       14      256           %INCLUDE xb_errors_i6;
       15      327
       16      328    1      DCL STDIN_P                        PTR SYMREF;
       17      329    1      DCL STDOUT_P                       PTR SYMREF;
       18      330    1      DCL STDERR_P                       PTR SYMREF;
       19      331
       20      332           %File_Header (Name=F, STCLASS=" ");
       21      444
       22      445    1      DCL F$               PTR;
       23      446    1      DCL P$               PTR;
       24      447    1      DCL NEXT$            PTR;
       25      448           %File_Header (Name=F_based, STCLASS="BASED");
       26      560
       27      561    1      DCL XBI_SET_ERRNO    ENTRY (1);
       28      562    1      DCL XB_IO_ERROR      ENTRY;
       29      563    1      DCL XBI$PROTECT_POINTER    ENTRY (1);
       30      564
       31      565    1      F$ = ADDR(F);
       32      566
       33      567           /* check to see if stdin, stdout or stderr are trying to be
       34      568              linked in they should not be so just return                   */
       35      569
       36      570    1      IF (F$ = STDIN_P OR F$ = STDOUT_P OR F$ = STDERR_P) THEN
       37      571    1         RETURN;
PL6.E3A0      #001=XBI$LINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:2    
       38      572           /* sanity check */
       39      573
       40      574    2      IF NOT F.is_open THEN DO;
       41      575    2         CALL XBI_SET_ERRNO (ERR$ASSERTION_FAILURE);
       42      576    2         CALL XB_IO_ERROR;
       43      577    2      END;
       44      578
       45      579           /* link the new file header into the file chain */
       46      580
       47      581    1      F.NEXT_FILE_HEADER = ADDR(NIL);
       48      582    2      IF XBI$FIRST_FILE_HEADER = ADDR(NIL) THEN DO;
       49      583    2         XBI$FIRST_FILE_HEADER = F$;
       50      584    2         STDIN_P->F_BASED.NEXT_FILE_HEADER = XBI$FIRST_FILE_HEADER;
       51      585    2         CALL XBI$PROTECT_POINTER (F$);
       52      586    2         RETURN;
       53      587    2      END;
       54      588    2      DO INHIBIT;
       55      589    2         P$ = XBI$FIRST_FILE_HEADER;
       56      590    2         XBI$FIRST_FILE_HEADER = F$;
       57      591    2         F$ -> F_BASED.NEXT_FILE_HEADER = P$;
       58      592    2         STDIN_P->F_based.NEXT_FILE_HEADER = XBI$FIRST_FILE_HEADER;
       59      593    2      END /* INHIBIT */;
       60      594    1      CALL XBI$PROTECT_POINTER (F$);
       61      595    1   END XBI$LINK_FILE_HEADER;
       62      596        %EOD;

PL6.E3A0      #001=XBI$LINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:3    
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$LINK_FILE_HEADER.

   Procedure XBI$LINK_FILE_HEADER requires 55 words for executable code.
   Procedure XBI$LINK_FILE_HEADER requires 10 words of local(AUTO) storage.

PL6.E3A0      #001=XBI$LINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:4    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XBI$LINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:5    
          MINI XREF LISTING

F
       333**DCL         6--PROC      565--ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       395**DCL       396--REDEF
F.FPT_READ.V.INDX#
       388**DCL       389--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       433**DCL       434--REDEF
F.IS_OPEN
       341**DCL       574>>IF
F.NEXT_FILE_HEADER
       361**DCL       581<<ASSIGN
F$
       445**DCL       565<<ASSIGN    570>>IF        570>>IF        570>>IF        583>>ASSIGN    585<>CALL
       590>>ASSIGN    591>>ASSIGN    594<>CALL
F_BASED.FPT_READ.V.DVBYTE.REREAD#
       511**DCL       512--REDEF
F_BASED.FPT_READ.V.INDX#
       504**DCL       505--REDEF
F_BASED.FPT_WRITE.V.DVBYTE.VFC#
       549**DCL       550--REDEF
F_BASED.NEXT_FILE_HEADER
       477**DCL       584<<ASSIGN    591<<ASSIGN    592<<ASSIGN
P$
       446**DCL       589<<ASSIGN    591>>ASSIGN
STDERR_P
       330**DCL       570>>IF
STDIN_P
       328**DCL       570>>IF        584>>ASSIGN    592>>ASSIGN
STDOUT_P
       329**DCL       570>>IF
XB$ERR$ASSERTION_FAILURE
PL6.E3A0      #001=XBI$LINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:6    
       301**DCL       575<>CALL
XBI$FIRST_FILE_HEADER
        31**DCL       582>>IF        583<<ASSIGN    584>>ASSIGN    589>>ASSIGN    590<<ASSIGN    592>>ASSIGN
XBI$PROTECT_POINTER
       563**DCL-ENT   585--CALL      594--CALL
XBI_SET_ERRNO
       561**DCL-ENT   575--CALL
XB_IO_ERROR
       562**DCL-ENT   576--CALL

PL6.E3A0      #002=XBI$UNLINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI            WED 08/20/97 14:25 Page:7    
       63        1        /*T***********************************************************/
       64        2        /*T*                                                         */
       65        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
       66        4        /*T*                                                         */
       67        5        /*T***********************************************************/
       68        6
       69        7        XBI$UNLINK_FILE_HEADER: PROC (F);
       70        8           /*I*  NAME: XBI$UNLINK_FILE_HEADER
       71        9                 CALL: CALL XBI$UNLINK_FILE_HEADER (F);
       72       10                 INPUT: F file_header;
       73       11                 PURPOSE: Unlinks the stream F from the chain of open streams.
       74       12           */
       75       13
       76       14           %INCLUDE xb_stdio_i6;
       77      257           %INCLUDE xb_errors_i6;
       78      328
       79      329    1      DCL STDIN_P                        PTR SYMREF;
       80      330    1      DCL STDOUT_P                       PTR SYMREF;
       81      331    1      DCL STDERR_P                       PTR SYMREF;
       82      332
       83      333           %File_Header (Name=F, STCLASS=" ");
       84      445
       85      446    1      DCL F$               PTR;
       86      447    1      DCL C$               PTR;
       87      448    1      DCL LAST$            PTR;
       88      449           %File_Header (Name=F_based, STCLASS="BASED");
       89      561
       90      562    1      DCL XBI_SET_ERRNO    ENTRY (1);
       91      563    1      DCL XB_IO_ERROR      ENTRY;
       92      564    1      DCL XBI$UNPROTECT_POINTER     ENTRY (1);
       93      565    1      DCL XBI_FREE                  ENTRY (1);
       94      566
       95      567    1      F$ = ADDR(F);
       96      568
       97      569           /* check to see if stdin, stdout or stderr are trying to be
       98      570              unlinked in they should never have been linked so just return */
       99      571
PL6.E3A0      #002=XBI$UNLINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI            WED 08/20/97 14:25 Page:8    
      100      572    1      IF (F$ = STDIN_P OR F$ = STDOUT_P OR F$ = STDERR_P) THEN
      101      573    1         RETURN;
      102      574           /* sanity check */
      103      575
      104      576    2      IF XBI$FIRST_FILE_HEADER = ADDR(NIL) OR F.is_open THEN DO;
      105      577    2         CALL XBI_SET_ERRNO (ERR$ASSERTION_FAILURE);
      106      578    2         CALL XB_IO_ERROR;
      107      579    2      END;
      108      580
      109      581    2      DO INHIBIT;
      110      582    2         C$ = XBI$FIRST_FILE_HEADER;
      111      583    2         LAST$ = ADDR(NIL);
      112      584    3         DO WHILE C$ ~= F$;
      113      585    3            LAST$ = C$;
      114      586    3            C$ = C$ -> F_BASED.NEXT_FILE_HEADER;
      115      587    4            IF C$ = ADDR(NIL) THEN DO;
      116      588    4               CALL XBI_SET_ERRNO (ERR$ASSERTION_FAILURE);
      117      589    4               CALL XB_IO_ERROR;
      118      590    4            END;
      119      591    3         END;
      120      592    3         IF LAST$ = ADDR(NIL) THEN DO;
      121      593    3            XBI$FIRST_FILE_HEADER = F.NEXT_FILE_HEADER;
      122      594    3            STDIN_P->F_based.NEXT_FILE_HEADER = XBI$FIRST_FILE_HEADER;
      123      595    3         END;
      124      596    2         ELSE
      125      597    2            LAST$ -> F_BASED.NEXT_FILE_HEADER = F.NEXT_FILE_HEADER;
      126      598    2         F.NEXT_FILE_HEADER = ADDR(NIL);
      127      599    2      END /* INHIBIT */;
      128      600    1      CALL XBI$UNPROTECT_POINTER (F$);
      129      601    1      CALL XBI_FREE (F$);
      130      602    1   END XBI$UNLINK_FILE_HEADER;
      131      603        %EOD;

PL6.E3A0      #002=XBI$UNLINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI            WED 08/20/97 14:25 Page:9    
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$UNLINK_FILE_HEADER.

   Procedure XBI$UNLINK_FILE_HEADER requires 77 words for executable code.
   Procedure XBI$UNLINK_FILE_HEADER requires 10 words of local(AUTO) storage.

PL6.E3A0      #002=XBI$UNLINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI            WED 08/20/97 14:25 Page:10   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XBI$UNLINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI            WED 08/20/97 14:25 Page:11   
          MINI XREF LISTING

C$
       447**DCL       582<<ASSIGN    584>>DOWHILE   585>>ASSIGN    586<<ASSIGN    586>>ASSIGN    587>>IF
F
       334**DCL         7--PROC      567--ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       396**DCL       397--REDEF
F.FPT_READ.V.INDX#
       389**DCL       390--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       434**DCL       435--REDEF
F.IS_OPEN
       342**DCL       576>>IF
F.NEXT_FILE_HEADER
       362**DCL       593>>ASSIGN    597>>ASSIGN    598<<ASSIGN
F$
       446**DCL       567<<ASSIGN    572>>IF        572>>IF        572>>IF        584>>DOWHILE   600<>CALL
       601<>CALL
F_BASED.FPT_READ.V.DVBYTE.REREAD#
       512**DCL       513--REDEF
F_BASED.FPT_READ.V.INDX#
       505**DCL       506--REDEF
F_BASED.FPT_WRITE.V.DVBYTE.VFC#
       550**DCL       551--REDEF
F_BASED.NEXT_FILE_HEADER
       478**DCL       586>>ASSIGN    594<<ASSIGN    597<<ASSIGN
LAST$
       448**DCL       583<<ASSIGN    585<<ASSIGN    592>>IF        597>>ASSIGN
STDERR_P
       331**DCL       572>>IF
STDIN_P
       329**DCL       572>>IF        594>>ASSIGN
STDOUT_P
PL6.E3A0      #002=XBI$UNLINK_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI            WED 08/20/97 14:25 Page:12   
       330**DCL       572>>IF
XB$ERR$ASSERTION_FAILURE
       302**DCL       577<>CALL      588<>CALL
XBI$FIRST_FILE_HEADER
        32**DCL       576>>IF        582>>ASSIGN    593<<ASSIGN    594>>ASSIGN
XBI$UNPROTECT_POINTER
       564**DCL-ENT   600--CALL
XBI_FREE
       565**DCL-ENT   601--CALL
XBI_SET_ERRNO
       562**DCL-ENT   577--CALL      588--CALL
XB_IO_ERROR
       563**DCL-ENT   578--CALL      589--CALL

PL6.E3A0      #003=XBI$TRY_UNBUFFERED File=xbi_io_misc:6.:XBC3TSI                WED 08/20/97 14:25 Page:13   
      132        1        /*T***********************************************************/
      133        2        /*T*                                                         */
      134        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      135        4        /*T*                                                         */
      136        5        /*T***********************************************************/
      137        6
      138        7        XBI$TRY_UNBUFFERED: PROC (F);
      139        8           /*I*  NAME: XBI$TRY_UNBUFFERED
      140        9                 CALL: CALL XBI$TRY_UNBUFFERED (F);
      141       10                 INPUT: F file_header;
      142       11                 PURPOSE: Makes the stream F unbuffered if possible.
      143       12           */
      144       13
      145       14           %INCLUDE xb_stdio_i6;
      146      257           %INCLUDE CP_6;
      147     5817           %INCLUDE CP_6_SUBS;
      148     6357
      149     6358           %File_Header (Name=F, Stclass=" ");
      150     6470
      151     6471    1      DCL DCB$                         PTR;
      152     6472
      153     6473           %F$DCB (STCLASS="BASED (DCB$)");
      154     6530
      155     6531           %FPT_OPEN (FPTN=OPEN_CONST, STCLASS=CONSTANT, ASN=DEVICE, ORG=TERMINAL,
      156     6532              FUN=UPDATE);
      157     6641           %FPT_OPEN (FPTN=OPEN, STCLASS=AUTO);
      158     6750
      159     6751           %FPT_TRMCTL (FPTN=TRMCTL_CONST, STCLASS=CONSTANT, TRMCTL=VLP_TRMCTL);
      160     6778           %FPT_TRMCTL (FPTN=TRMCTL, STCLASS=AUTO);
      161     6805           %VLP_TRMCTL (STCLASS=CONSTANT, ACTONTRN=YES);
      162     6845
      163     6846    1      DCL XBI_SET_STREAM_ERRNO         ENTRY (2);
      164     6847    1      DCL XBI$CLOSE_FILE               ENTRY (1) ALTRET;
      165     6848    1      DCL XB_IO_ERROR                  ENTRY;
      166     6849
      167     6850    1      DCB$ = DCBADDR (F.fpt_read.v.dcb#);
      168     6851    2      IF F$DCB.ASN# = %DEVICE# AND F$DCB.DDEV.IC# = '1'b THEN DO;
PL6.E3A0      #003=XBI$TRY_UNBUFFERED File=xbi_io_misc:6.:XBC3TSI                WED 08/20/97 14:25 Page:14   
      169     6852    2         F.is_partly_open = '0'B;
      170     6853    2         CALL XBI$CLOSE_FILE (F); /* ignore close errors */
      171     6854    2         F.is_partly_open = '1'B;
      172     6855    2         OPEN = OPEN_CONST;
      173     6856    2         OPEN.V_ = VECTOR (OPEN.V);
      174     6857    2         OPEN.V.DCB# = F.fpt_read.v.dcb#;
      175     6858    2         CALL M$OPEN (OPEN)
      176     6859    3            WHENALTRETURN DO;
      177     6860    3               CALL XBI_SET_STREAM_ERRNO (F);
      178     6861    3               CALL XB_IO_ERROR;
      179     6862    3            END;
      180     6863    2         F.is_unbuffered = '1'B;
      181     6864    3         IF ~F.is_text THEN DO;
      182     6865    3            TRMCTL = TRMCTL_CONST;
      183     6866    3            TRMCTL.V_ = VECTOR (TRMCTL.V);
      184     6867    3            TRMCTL.V.DCB# = F.fpt_read.v.dcb#;
      185     6868    3            CALL M$STRMCTL (TRMCTL)
      186     6869    4               WHENALTRETURN DO;
      187     6870    4                  CALL XBI_SET_STREAM_ERRNO (F);
      188     6871    4                  CALL XB_IO_ERROR;
      189     6872    4               END;
      190     6873    3         END;
      191     6874    2      END;
      192     6875    1   END XBI$TRY_UNBUFFERED;
      193     6876        %EOD;

PL6.E3A0      #003=XBI$TRY_UNBUFFERED File=xbi_io_misc:6.:XBC3TSI                WED 08/20/97 14:25 Page:15   
--  Include file information  --

   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$TRY_UNBUFFERED.

   Procedure XBI$TRY_UNBUFFERED requires 77 words for executable code.
   Procedure XBI$TRY_UNBUFFERED requires 74 words of local(AUTO) storage.

PL6.E3A0      #003=XBI$TRY_UNBUFFERED File=xbi_io_misc:6.:XBC3TSI                WED 08/20/97 14:25 Page:16   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XBI$TRY_UNBUFFERED File=xbi_io_misc:6.:XBC3TSI                WED 08/20/97 14:25 Page:17   
          MINI XREF LISTING

DCB$
      6471**DCL      6474--IMP-PTR  6850<<ASSIGN   6851>>IF       6851>>IF
F
      6359**DCL         7--PROC     6853<>CALL     6860<>CALL     6870<>CALL
F.FPT_READ.V.DCB#
      6404**DCL      6850--ASSIGN   6857>>ASSIGN   6867>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
      6421**DCL      6422--REDEF
F.FPT_READ.V.INDX#
      6414**DCL      6415--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      6459**DCL      6460--REDEF
F.IS_PARTLY_OPEN
      6371**DCL      6852<<ASSIGN   6854<<ASSIGN
F.IS_TEXT
      6360**DCL      6864>>IF
F.IS_UNBUFFERED
      6370**DCL      6863<<ASSIGN
F$DCB.ACTPOS
      6506**DCL      6506--REDEF
F$DCB.ARS#
      6480**DCL      6480--REDEF
F$DCB.ASN#
      6495**DCL      6851>>IF
F$DCB.ATTR
      6499**DCL      6500--REDEF
F$DCB.BORROW
      6514**DCL      6514--REDEF    6514--REDEF    6514--REDEF
F$DCB.DCBNAME.L
      6528**DCL      6528--IMP-SIZ
F$DCB.DDEV.IC#
      6486**DCL      6851>>IF
PL6.E3A0      #003=XBI$TRY_UNBUFFERED File=xbi_io_misc:6.:XBC3TSI                WED 08/20/97 14:25 Page:18   
F$DCB.EOMCHAR#
      6484**DCL      6484--REDEF
F$DCB.FLDID
      6509**DCL      6509--REDEF
F$DCB.FORM$
      6503**DCL      6503--REDEF
F$DCB.FSECT
      6519**DCL      6519--REDEF
F$DCB.FSN#
      6496**DCL      6496--REDEF    6496--REDEF    6497--REDEF
F$DCB.HEADER$
      6502**DCL      6502--REDEF
F$DCB.IXTNSIZE#
      6500**DCL      6500--REDEF
F$DCB.LASTSTA$
      6489**DCL      6489--REDEF
F$DCB.LVL
      6515**DCL      6515--REDEF
F$DCB.NAME#.C
      6490**DCL      6490--REDEF
F$DCB.NOEOF
      6512**DCL      6512--REDEF
F$DCB.NRECS#
      6501**DCL      6501--REDEF
F$DCB.NRECX
      6520**DCL      6520--REDEF
F$DCB.OHDR
      6512**DCL      6512--REDEF
F$DCB.ORG#
      6495**DCL      6495--REDEF
F$DCB.PRECNO
      6518**DCL      6518--REDEF
F$DCB.RCSZ
      6524**DCL      6524--REDEF
F$DCB.RES#
      6491**DCL      6491--REDEF
PL6.E3A0      #003=XBI$TRY_UNBUFFERED File=xbi_io_misc:6.:XBC3TSI                WED 08/20/97 14:25 Page:19   
F$DCB.SETX
      6503**DCL      6503--REDEF
F$DCB.TAB$
      6503**DCL      6503--REDEF
F$DCB.TDA
      6517**DCL      6518--REDEF
F$DCB.WSN#
      6491**DCL      6491--REDEF
M$OPEN
      5745**DCL-ENT  6858--CALL
M$STRMCTL
      5769**DCL-ENT  6868--CALL
OPEN
      6706**DCL      6855<<ASSIGN   6858<>CALL
OPEN.ACSVEH_
      6708**DCL      6709--REDEF
OPEN.ALTKEYS_
      6714**DCL      6715--REDEF    6715--REDEF
OPEN.HDR_
      6713**DCL      6714--REDEF
OPEN.TAB_
      6712**DCL      6713--REDEF
OPEN.UHL_
      6706**DCL      6707--REDEF    6707--REDEF
OPEN.V
      6715**DCL      6856--ASSIGN
OPEN.V.DCB#
      6715**DCL      6857<<ASSIGN
OPEN.V.FSN#
      6746**DCL      6746--REDEF    6746--REDEF
OPEN.V_
      6706**DCL      6856<<ASSIGN
OPEN.WSN_
      6712**DCL      6712--REDEF
OPEN_CONST
      6597**DCL      6855>>ASSIGN
PL6.E3A0      #003=XBI$TRY_UNBUFFERED File=xbi_io_misc:6.:XBC3TSI                WED 08/20/97 14:25 Page:20   
OPEN_CONST.ACSVEH_
      6599**DCL      6600--REDEF
OPEN_CONST.ALTKEYS_
      6605**DCL      6606--REDEF    6606--REDEF
OPEN_CONST.HDR_
      6604**DCL      6605--REDEF
OPEN_CONST.TAB_
      6603**DCL      6604--REDEF
OPEN_CONST.UHL_
      6597**DCL      6598--REDEF    6598--REDEF
OPEN_CONST.V
      6606**DCL      6597--DCLINIT
OPEN_CONST.V.FSN#
      6637**DCL      6637--REDEF    6637--REDEF
OPEN_CONST.WSN_
      6603**DCL      6603--REDEF
TRMCTL
      6794**DCL      6865<<ASSIGN   6868<>CALL
TRMCTL.V
      6802**DCL      6866--ASSIGN
TRMCTL.V.DCB#
      6802**DCL      6867<<ASSIGN
TRMCTL.V_
      6796**DCL      6866<<ASSIGN
TRMCTL_CONST
      6767**DCL      6865>>ASSIGN
TRMCTL_CONST.V
      6775**DCL      6769--DCLINIT
VLP_TRMCTL
      6822**DCL      6773--DCLINIT
VLP_TRMCTL.BREAKCOUNT
      6834**DCL      6834--REDEF
XBI$CLOSE_FILE
      6847**DCL-ENT  6853--CALL
XBI_SET_STREAM_ERRNO
      6846**DCL-ENT  6860--CALL     6870--CALL
PL6.E3A0      #003=XBI$TRY_UNBUFFERED File=xbi_io_misc:6.:XBC3TSI                WED 08/20/97 14:25 Page:21   
XB_IO_ERROR
      6848**DCL-ENT  6861--CALL     6871--CALL

PL6.E3A0      #004=XBI$COMPLETE_OPEN File=xbi_io_misc:6.:XBC3TSI                 WED 08/20/97 14:25 Page:22   
      194        1        /*T***********************************************************/
      195        2        /*T*                                                         */
      196        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      197        4        /*T*                                                         */
      198        5        /*T***********************************************************/
      199        6
      200        7        XBI$COMPLETE_OPEN: PROC (F) ALTRET;
      201        8           /*I*  NAME: XBI$COMPLETE_OPEN
      202        9                 CALL: CALL XBI$COMPLETE_OPEN (F);
      203       10                 INPUT: F file_header;
      204       11                 PURPOSE: Does whatever last minute things are needed before i/o
      205       12                    can be done on a stream.  These include allocating a buffer and
      206       13                    positioning the file.
      207       14           */
      208       15
      209       16           %INCLUDE xb_stdio_i6;
      210      259           %INCLUDE CP_6_SUBS;
      211      799           %INCLUDE XS_MACRO_C;
      212      843
      213      844           %File_Header (Name=F, Stclass=" ");
      214      956
      215      957           %XSA_PARAM (STCLASS="BASED (XSA$) ");
      216      987
      217      988    1      DCL XSA$                         PTR;
      218      989
      219      990    1      DCL XBI_MALLOC                   ENTRY (2);
      220      991    1      DCL XBI$PROTECT_POINTER          ENTRY (1);
      221      992    1      DCL XBI$UNPROTECT_POINTER        ENTRY (1);
      222      993    1      DCL XBI_FREE                     ENTRY (1);
      223      994    1      DCL XBI$GET_STREAM_BUFFER        ENTRY (1) ALTRET;
      224      995    1      DCL XBI$READ_AFTER_POSITIONING   ENTRY (1) ALTRET;
      225      996
      226      997           /* clear the is_partly_open flag immediately to avoid infinite recursion
      227      998              with XBI$READ_NEXT_RECORD.
      228      999           */
      229     1000
      230     1001
PL6.E3A0      #004=XBI$COMPLETE_OPEN File=xbi_io_misc:6.:XBC3TSI                 WED 08/20/97 14:25 Page:23   
      231     1002    1      IF F.buffer$ = ADDR(NIL) THEN
      232     1003    1         CALL XBI$GET_STREAM_BUFFER (F) ALTRET (error_return);
      233     1004    1      ELSE
      234     1005    1         F.ars = 0;
      235     1006
      236     1007           /* Allocate xsa buffers, if necessary */
      237     1008
      238     1009    2      IF F.xsa$ ~= ADDR(NIL) AND ~F.cancel_xsa THEN DO;
      239     1010    2         xsa$ = F.xsa$;
      240     1011    2         CALL XBI_MALLOC (4096, XSA_PARAM.BBUF_.BUF$);
      241     1012    2         CALL XBI$PROTECT_POINTER (XSA_PARAM.BBUF_.BUF$);
      242     1013    2         IF XSA_PARAM.BBUF_.BUF$ ~= ADDR(NIL) THEN
      243     1014    2            XSA_PARAM.BBUF_.BOUND = 4096 - 1;
      244     1015    3         IF XSA_PARAM.ORG = %KEYED# THEN DO;
      245     1016    3            CALL XBI_MALLOC (4096, XSA_PARAM.KBUF_.BUF$);
      246     1017    3            CALL XBI$PROTECT_POINTER (XSA_PARAM.KBUF_.BUF$);
      247     1018    3            IF XSA_PARAM.KBUF_.BUF$ ~= ADDR(NIL) THEN
      248     1019    3               XSA_PARAM.KBUF_.BOUND = 4096 - 1;
      249     1020    3         END;
      250     1021    1      END; ELSE
      251     1022    1         F.cancel_xsa = '0'B;
      252     1023    1      F.is_partly_open = '0'B;
      253     1024
      254     1025    1      IF F.is_write_at_eof THEN  /* a, ab, a+ or ab+ mode */
      255     1026    1         IF (F.is_text) THEN
      256     1027    1            F.record_position = F.last_record + 1;
      257     1028    2         ELSE DO;
      258     1029    3            IF F.last_record = 0 THEN DO;
      259     1030                    /* file didn't exist before and is therefore empty */
      260     1031    3               F.record_position = 1;
      261     1032    3               F.ars = 0;
      262     1033    3               F.character_position = 0;
      263     1034    3               F.is_eof = '1'B;
      264     1035    3            END; ELSE DO;
      265     1036    3               F.record_position = F.last_record - 1;
      266     1037    3               F.is_eof = '0'B;
      267     1038    3               CALL XBI$READ_AFTER_POSITIONING (F) ALTRET (error_return);
PL6.E3A0      #004=XBI$COMPLETE_OPEN File=xbi_io_misc:6.:XBC3TSI                 WED 08/20/97 14:25 Page:24   
      268     1039                    /* The last record may be full */
      269     1040    4               IF F.ars = F.buffer_size THEN DO;
      270     1041    4                  F.record_position = F.last_record + 1;
      271     1042    4                  F.ars = 0;
      272     1043    4               END;
      273     1044    3               F.character_position = F.ars;
      274     1045    3               F.is_eof = '1'B;
      275     1046    3            END;
      276     1047    2         END;
      277     1048    1      ELSE IF ~F.is_eof AND F.is_writes_ok THEN   /* r+ or rb+ mode */
      278     1049    1         CALL XBI$READ_AFTER_POSITIONING (F) ALTRET (error_return);
      279     1050
      280     1051    1      RETURN;
      281     1052
      282     1053    1   error_return:
      283     1054    1      ALTRETURN;
      284     1055    1   END XBI$COMPLETE_OPEN;
      285     1056        %EOD;

PL6.E3A0      #004=XBI$COMPLETE_OPEN File=xbi_io_misc:6.:XBC3TSI                 WED 08/20/97 14:25 Page:25   
--  Include file information  --

   XS_MACRO_C.:LIB_E04  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$COMPLETE_OPEN.

   Procedure XBI$COMPLETE_OPEN requires 131 words for executable code.
   Procedure XBI$COMPLETE_OPEN requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=XBI$COMPLETE_OPEN File=xbi_io_misc:6.:XBC3TSI                 WED 08/20/97 14:25 Page:26   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=XBI$COMPLETE_OPEN File=xbi_io_misc:6.:XBC3TSI                 WED 08/20/97 14:25 Page:27   
          MINI XREF LISTING

ERROR_RETURN
      1054**LABEL    1003--CALLALT  1038--CALLALT  1049--CALLALT
F
       845**DCL         7--PROC     1003<>CALL     1038<>CALL     1049<>CALL
F.ARS
       867**DCL      1005<<ASSIGN   1032<<ASSIGN   1040>>IF       1042<<ASSIGN   1044>>ASSIGN
F.BUFFER$
       869**DCL      1002>>IF
F.BUFFER_SIZE
       870**DCL      1040>>IF
F.CANCEL_XSA
       858**DCL      1009>>IF       1022<<ASSIGN
F.CHARACTER_POSITION
       865**DCL      1033<<ASSIGN   1044<<ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       907**DCL       908--REDEF
F.FPT_READ.V.INDX#
       900**DCL       901--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       945**DCL       946--REDEF
F.IS_EOF
       847**DCL      1034<<ASSIGN   1037<<ASSIGN   1045<<ASSIGN   1048>>IF
F.IS_PARTLY_OPEN
       857**DCL      1023<<ASSIGN
F.IS_TEXT
       846**DCL      1026>>IF
F.IS_WRITES_OK
       850**DCL      1048>>IF
F.IS_WRITE_AT_EOF
       851**DCL      1025>>IF
F.LAST_RECORD
       868**DCL      1027>>ASSIGN   1029>>IF       1036>>ASSIGN   1041>>ASSIGN
PL6.E3A0      #004=XBI$COMPLETE_OPEN File=xbi_io_misc:6.:XBC3TSI                 WED 08/20/97 14:25 Page:28   
F.RECORD_POSITION
       864**DCL      1027<<ASSIGN   1031<<ASSIGN   1036<<ASSIGN   1041<<ASSIGN
F.XSA$
       871**DCL      1009>>IF       1010>>ASSIGN
XBI$GET_STREAM_BUFFER
       994**DCL-ENT  1003--CALL
XBI$PROTECT_POINTER
       991**DCL-ENT  1012--CALL     1017--CALL
XBI$READ_AFTER_POSITIONING
       995**DCL-ENT  1038--CALL     1049--CALL
XBI_MALLOC
       990**DCL-ENT  1011--CALL     1016--CALL
XSA$
       988**DCL       965--IMP-PTR  1010<<ASSIGN   1011>>CALL     1012>>CALL     1013>>IF       1014>>ASSIGN
      1015>>IF       1016>>CALL     1017>>CALL     1018>>IF       1019>>ASSIGN
XSA_PARAM.BBUF_.BOUND
       973**DCL      1014<<ASSIGN
XSA_PARAM.BBUF_.BUF$
       974**DCL      1011<>CALL     1012<>CALL     1013>>IF
XSA_PARAM.EOMCHAR#
       981**DCL       982--REDEF
XSA_PARAM.KBUF_.BOUND
       971**DCL      1019<<ASSIGN
XSA_PARAM.KBUF_.BUF$
       972**DCL      1016<>CALL     1017<>CALL     1018>>IF
XSA_PARAM.ORG
       980**DCL      1015>>IF
XSA_PARAM.SIG1
       975**DCL       975--REDEF
XSA_PARAM.SIG2
       975**DCL       976--REDEF

PL6.E3A0      #005=XBI$GET_STREAM_BUFFER File=xbi_io_misc:6.:XBC3TSI             WED 08/20/97 14:25 Page:29   
      286        1        /*T***********************************************************/
      287        2        /*T*                                                         */
      288        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      289        4        /*T*                                                         */
      290        5        /*T***********************************************************/
      291        6
      292        7        XBI$GET_STREAM_BUFFER: PROC (F) ALTRET;
      293        8           /*I*  NAME: XBI$GET_STREAM_BUFFER
      294        9                 CALL: CALL XBI$GET_STREAM_BUFFER (F) ALTRETURN (...);
      295       10                 INPUT: F file_header;
      296       11                 PURPOSE: Allocates a buffer for the stream F.  Altreturns if
      297       12                    memory cannot be allocated.
      298       13           */
      299       14
      300       15           %INCLUDE xb_stdio_i6;
      301      258
      302      259           %File_Header (Name=F, Stclass=" ");
      303      371           %Buffer;
      304      374    1      DCL   tptr$ PTR;
      305      375    1      DCL   size  SBIN;
      306      376    1      DCL   tbuffer  CHAR(size) BASED (tptr$);
      307      377
      308      378    1      DCL XBI_MALLOC                ENTRY (2);
      309      379    1      DCL XBI$PROTECT_POINTER       ENTRY (1);
      310      380    1      DCL XBI_FREE                  ENTRY (1);
      311      381    1      DCL XBI$UNPROTECT_POINTER     ENTRY (1);
      312      382    1      DCL XBI$READ_NEXT_RECORD      ENTRY (1) ALTRET;
      313      383
      314      384    1      IF (F.is_text) OR (NOT F.is_reads_ok) OR (F.last_record <= 0) OR
      315      385    2         (F.xsa$ ~= ADDR(nil)) OR (F.ars = 0 OR F.ars = 1) THEN DO;
      316      386    2         CALL XBI_MALLOC (%BUFSIZ, F.buffer$);
      317      387    2         IF F.buffer$ = ADDR(NIL) THEN ALTRETURN;
      318      388    2         CALL XBI$PROTECT_POINTER (F.buffer$);
      319      389    2         F.buffer_size = %BUFSIZ;
      320      390    2         F.has_auto_buffer = '1'B;
      321      391    2         F.ars = 0;
      322      392    2      END;
PL6.E3A0      #005=XBI$GET_STREAM_BUFFER File=xbi_io_misc:6.:XBC3TSI             WED 08/20/97 14:25 Page:30   
      323      393    2      ELSE DO;
      324      394
      325      395        /*    Try to actually compute the size of the maximum record size
      326      396              for the binary file.  This is going to be done as follows:
      327      397                 1) F.ars contains the operating systems best guess of a size
      328      398                 2) Allocate a buffer this size and read the first record in
      329      399                 3) Now we actually have the real record size in F.ars we
      330      400                    allocate a new buffer if necessary of the correct size
      331      401                    copy the data from the read, and release the temporary
      332      402                    buffer
      333      403        */
      334      404
      335      405    2         CALL XBI_MALLOC (F.ars, F.buffer$);
      336      406    2         IF F.buffer$ = ADDR(NIL) THEN ALTRETURN;
      337      407    2         CALL XBI$PROTECT_POINTER (F.buffer$);
      338      408    2         F.buffer_size = F.ars;
      339      409    2         F.has_auto_buffer = '1'B;
      340      410    2         F.is_partly_open = '0'B;
      341      411    2         F.fpt_read.buf_ = VECTOR (SUBSTR (buffer, 0, F.buffer_size));
      342      412    3         CALL XBI$READ_NEXT_RECORD (F) WHENALTRETURN DO; ALTRETURN; END;
      343      413    3         IF (F.ars < F.buffer_size) THEN DO; /* buffer too big */
      344      414    3            tptr$ = F.buffer$;
      345      415    3            IF (F.last_record = 1) THEN
      346      416    3               size = MAXIMUM(%BUFSIZ, F.ars);
      347      417    3            ELSE
      348      418    3               size = F.ars;
      349      419    3            CALL XBI_MALLOC(size, F.buffer$);
      350      420    3            IF F.buffer$ = ADDR(NIL) THEN ALTRETURN;
      351      421    3            CALL XBI$PROTECT_POINTER (F.buffer$);
      352      422    3            F.buffer_size = size;
      353      423    3            Buffer = tbuffer;
      354      424    3            CALL XBI$UNPROTECT_POINTER (tptr$);
      355      425    3            CALL XBI_FREE (tptr$);
      356      426    3         END;
      357      427    2      END;
      358      428    1      IF F.is_text THEN
      359      429              /* save space for a trailing newline */
PL6.E3A0      #005=XBI$GET_STREAM_BUFFER File=xbi_io_misc:6.:XBC3TSI             WED 08/20/97 14:25 Page:31   
      360      430    1         F.fpt_read.buf_ = VECTOR (SUBSTR (buffer, 0, F.buffer_size-1));
      361      431    1      ELSE
      362      432    1         F.fpt_read.buf_ = VECTOR (SUBSTR (buffer, 0, F.buffer_size));
      363      433    1   END XBI$GET_STREAM_BUFFER;
      364      434        %EOD;

PL6.E3A0      #005=XBI$GET_STREAM_BUFFER File=xbi_io_misc:6.:XBC3TSI             WED 08/20/97 14:25 Page:32   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$GET_STREAM_BUFFER.

   Procedure XBI$GET_STREAM_BUFFER requires 169 words for executable code.
   Procedure XBI$GET_STREAM_BUFFER requires 8 words of local(AUTO) storage.

PL6.E3A0      #005=XBI$GET_STREAM_BUFFER File=xbi_io_misc:6.:XBC3TSI             WED 08/20/97 14:25 Page:33   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=XBI$GET_STREAM_BUFFER File=xbi_io_misc:6.:XBC3TSI             WED 08/20/97 14:25 Page:34   
          MINI XREF LISTING

BUFFER
       372**DCL       411--ASSIGN    423<<ASSIGN    430--ASSIGN    432--ASSIGN
F
       260**DCL         7--PROC      412<>CALL
F.ARS
       282**DCL       384>>IF        384>>IF        391<<ASSIGN    405<>CALL      408>>ASSIGN    413>>IF
       416>>ASSIGN    418>>ASSIGN
F.BUFFER$
       284**DCL       372--IMP-PTR   386<>CALL      387>>IF        388<>CALL      405<>CALL      406>>IF
       407<>CALL      411>>ASSIGN    414>>ASSIGN    419<>CALL      420>>IF        421<>CALL      423>>ASSIGN
       430>>ASSIGN    432>>ASSIGN
F.BUFFER_SIZE
       285**DCL       372--IMP-SIZ   389<<ASSIGN    408<<ASSIGN    411>>ASSIGN    411>>ASSIGN    413>>IF
       422<<ASSIGN    423>>ASSIGN    430>>ASSIGN    430>>ASSIGN    432>>ASSIGN    432>>ASSIGN
F.FPT_READ.BUF_
       302**DCL       411<<ASSIGN    430<<ASSIGN    432<<ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       322**DCL       323--REDEF
F.FPT_READ.V.INDX#
       315**DCL       316--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       360**DCL       361--REDEF
F.HAS_AUTO_BUFFER
       269**DCL       390<<ASSIGN    409<<ASSIGN
F.IS_PARTLY_OPEN
       272**DCL       410<<ASSIGN
F.IS_READS_OK
       270**DCL       384>>IF
F.IS_TEXT
       261**DCL       384>>IF        428>>IF
F.LAST_RECORD
       283**DCL       384>>IF        415>>IF
PL6.E3A0      #005=XBI$GET_STREAM_BUFFER File=xbi_io_misc:6.:XBC3TSI             WED 08/20/97 14:25 Page:35   
F.XSA$
       286**DCL       384>>IF
SIZE
       375**DCL       376--IMP-SIZ   416<<ASSIGN    418<<ASSIGN    419<>CALL      422>>ASSIGN    423>>ASSIGN
TBUFFER
       376**DCL       423>>ASSIGN
TPTR$
       374**DCL       376--IMP-PTR   414<<ASSIGN    423>>ASSIGN    424<>CALL      425<>CALL
XBI$PROTECT_POINTER
       379**DCL-ENT   388--CALL      407--CALL      421--CALL
XBI$READ_NEXT_RECORD
       382**DCL-ENT   412--CALL
XBI$UNPROTECT_POINTER
       381**DCL-ENT   424--CALL
XBI_FREE
       380**DCL-ENT   425--CALL
XBI_MALLOC
       378**DCL-ENT   386--CALL      405--CALL      419--CALL

PL6.E3A0      #006=XBI$GET_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI               WED 08/20/97 14:25 Page:36   
      365        1        /*T***********************************************************/
      366        2        /*T*                                                         */
      367        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      368        4        /*T*                                                         */
      369        5        /*T***********************************************************/
      370        6
      371        7        XBI$GET_FILE_HEADER: PROC (F$) ALTRET;
      372        8           /*I*  NAME: XBI$GET_FILE_HEADER
      373        9                 CALL: CALL XBI$GET_FILE_HEADER (F) ALTRETURN (..);
      374       10                 OUTPUT: F$ PTR to a file_header;
      375       11                 PURPOSE: Allocates a file header.  Altreturns if memory is not
      376       12                    available.
      377       13           */
      378       14
      379       15           %INCLUDE xb_stdio_i6;
      380      258
      381      259    1      DCL F$               PTR;
      382      260           %File_Header (Name=F, STCLASS="BASED (F$)");
      383      372
      384      373    1      DCL XBI_MALLOC       ENTRY (2);
      385      374    1      DCL XBI$INIT_FILE_HEADER ENTRY (1);
      386      375
      387      376    1      CALL XBI_MALLOC (SIZEC (F), F$);
      388      377    1      IF F$ = ADDR (NIL) THEN ALTRETURN; /* malloc has already set ERRNO */
      389      378
      390      379           /* initialize the array of file headers as insurance against
      391      380              `accidental' accesses to unitialized fields. */
      392      381
      393      382    1      CALL XBI$INIT_FILE_HEADER (F);
      394      383    1   END XBI$GET_FILE_HEADER;
      395      384        %EOD;

PL6.E3A0      #006=XBI$GET_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI               WED 08/20/97 14:25 Page:37   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$GET_FILE_HEADER.

   Procedure XBI$GET_FILE_HEADER requires 21 words for executable code.
   Procedure XBI$GET_FILE_HEADER requires 6 words of local(AUTO) storage.

PL6.E3A0      #006=XBI$GET_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI               WED 08/20/97 14:25 Page:38   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=XBI$GET_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI               WED 08/20/97 14:25 Page:39   
          MINI XREF LISTING

F
       261**DCL       376--CALL      382<>CALL
F.FPT_READ.V.DVBYTE.REREAD#
       323**DCL       324--REDEF
F.FPT_READ.V.INDX#
       316**DCL       317--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       361**DCL       362--REDEF
F$
       259**DCL         7--PROC      261--IMP-PTR   376<>CALL      377>>IF        382>>CALL
XBI$INIT_FILE_HEADER
       374**DCL-ENT   382--CALL
XBI_MALLOC
       373**DCL-ENT   376--CALL

PL6.E3A0      #007=XBI$INIT_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:40   
      396        1        /*T***********************************************************/
      397        2        /*T*                                                         */
      398        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      399        4        /*T*                                                         */
      400        5        /*T***********************************************************/
      401        6
      402        7        XBI$INIT_FILE_HEADER: PROC (F);
      403        8           /*I*  NAME: XBI$INIT_FILE_HEADER
      404        9                 CALL: CALL XBI$INIT_FILE_HEADER (F);
      405       10                 INPUT: F file_header;
      406       11                 PURPOSE: Initializes the file header F.
      407       12           */
      408       13
      409       14           %INCLUDE CP_6;
      410     5574           %INCLUDE xb_stdio_i6;
      411     5817
      412     5818           %File_Header (Name=F);
      413     5930
      414     5931           %FPT_READ (FPTN=DEFAULT_FPT_READ, STCLASS=CONSTANT);
      415     5970
      416     5971           %FPT_WRITE (FPTN=DEFAULT_FPT_WRITE, STCLASS=CONSTANT);
      417     6002
      418     6003    1      F.IS_TEXT = '1'B;
      419     6004    1      F.IS_EOF = '0'B;
      420     6005    1      F.IS_SAVED_CHAR = '0'B;
      421     6006    1      F.IS_BUFFER_MODIFIED = '0'B;
      422     6007    1      F.IS_WRITES_OK = '0'B;
      423     6008    1      F.IS_READS_OK = '0'B;
      424     6009    1      F.IS_WRITE_AT_EOF = '0'B;
      425     6010    1      F.IS_ERROR = '0'B;
      426     6011    1      F.IS_OPEN = '0'B;
      427     6012    1      F.IS_UNBUFFERED = '0'B;
      428     6013    1      F.IS_PARTLY_OPEN = '1'B;
      429     6014    1      F.HAS_AUTO_BUFFER = '0'B;
      430     6015    1      F.CANCEL_XSA = '0'B;
      431     6016    1      F.SAVED_CHAR = 0;
      432     6017    1      F.RECORD_POSITION = 0;
PL6.E3A0      #007=XBI$INIT_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:41   
      433     6018    1      F.CHARACTER_POSITION = 0;
      434     6019    1      F.CONTINUED_IOS = 0;
      435     6020    1      F.ARS = 0;
      436     6021    1      F.LAST_RECORD = 0;
      437     6022    1      F.BUFFER$ = ADDR(NIL);
      438     6023    1      F.BUFFER_SIZE = 0;
      439     6024    1      F.XSA$ = ADDR(NIL);
      440     6025    1      F.STATE = %F_UNDEFINED_STATE;
      441     6026    1      F.AUXIO$ = ADDR(NIL);
      442     6027    1      F.MOD_TIME = -1;
      443     6028    1      F.CREATE_TIME = -1;
      444     6029    1      F.USER = 0;
      445     6030    1      F.RFU1 = 0;
      446     6031    1      F.RFU2 = 0;
      447     6032    1      F.NEXT_FILE_HEADER = ADDR(NIL);
      448     6033    1      F.FPT_READ = DEFAULT_FPT_READ;
      449     6034    1      F.FPT_WRITE = DEFAULT_FPT_WRITE;
      450     6035    1      F.KEY.LEN = 3;
      451     6036    1      F.KEY.RECORD = 0;
      452     6037    1      F.FPT_READ.V_ = VECTOR (F.FPT_READ.V);
      453     6038    1      F.FPT_WRITE.V_ = VECTOR (F.FPT_WRITE.V);
      454     6039    1   END XBI$INIT_FILE_HEADER;
      455     6040        %EOD;

PL6.E3A0      #007=XBI$INIT_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:42   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$INIT_FILE_HEADER.

   Procedure XBI$INIT_FILE_HEADER requires 70 words for executable code.
   Procedure XBI$INIT_FILE_HEADER requires 4 words of local(AUTO) storage.

PL6.E3A0      #007=XBI$INIT_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:43   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=XBI$INIT_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:44   
          MINI XREF LISTING

DEFAULT_FPT_READ
      5948**DCL      6033>>ASSIGN
DEFAULT_FPT_READ.STATION_
      5951**DCL      5952--REDEF
DEFAULT_FPT_READ.V
      5952**DCL      5948--DCLINIT
DEFAULT_FPT_READ.V.DVBYTE.REREAD#
      5963**DCL      5963--REDEF
DEFAULT_FPT_READ.V.INDX#
      5961**DCL      5961--REDEF
DEFAULT_FPT_WRITE
      5988**DCL      6034>>ASSIGN
DEFAULT_FPT_WRITE.STATION_
      5990**DCL      5990--REDEF
DEFAULT_FPT_WRITE.V
      5991**DCL      5988--DCLINIT
DEFAULT_FPT_WRITE.V.DVBYTE.VFC#
      5997**DCL      5997--REDEF
F
      5819**DCL         7--PROC
F.ARS
      5841**DCL      6020<<ASSIGN
F.AUXIO$
      5851**DCL      6026<<ASSIGN
F.BUFFER$
      5843**DCL      6022<<ASSIGN
F.BUFFER_SIZE
      5844**DCL      6023<<ASSIGN
F.CANCEL_XSA
      5832**DCL      6015<<ASSIGN
F.CHARACTER_POSITION
      5839**DCL      6018<<ASSIGN
PL6.E3A0      #007=XBI$INIT_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:45   
F.CONTINUED_IOS
      5840**DCL      6019<<ASSIGN
F.CREATE_TIME
      5853**DCL      6028<<ASSIGN
F.FPT_READ
      5858**DCL      6033<<ASSIGN
F.FPT_READ.V
      5863**DCL      6037--ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
      5881**DCL      5882--REDEF
F.FPT_READ.V.INDX#
      5874**DCL      5875--REDEF
F.FPT_READ.V_
      5859**DCL      6037<<ASSIGN
F.FPT_WRITE
      5895**DCL      6034<<ASSIGN
F.FPT_WRITE.V
      5900**DCL      6038--ASSIGN
F.FPT_WRITE.V.DVBYTE.VFC#
      5919**DCL      5920--REDEF
F.FPT_WRITE.V_
      5896**DCL      6038<<ASSIGN
F.HAS_AUTO_BUFFER
      5828**DCL      6014<<ASSIGN
F.IS_BUFFER_MODIFIED
      5823**DCL      6006<<ASSIGN
F.IS_EOF
      5821**DCL      6004<<ASSIGN
F.IS_ERROR
      5826**DCL      6010<<ASSIGN
F.IS_OPEN
      5827**DCL      6011<<ASSIGN
F.IS_PARTLY_OPEN
      5831**DCL      6013<<ASSIGN
F.IS_READS_OK
      5829**DCL      6008<<ASSIGN
PL6.E3A0      #007=XBI$INIT_FILE_HEADER File=xbi_io_misc:6.:XBC3TSI              WED 08/20/97 14:25 Page:46   
F.IS_SAVED_CHAR
      5822**DCL      6005<<ASSIGN
F.IS_TEXT
      5820**DCL      6003<<ASSIGN
F.IS_UNBUFFERED
      5830**DCL      6012<<ASSIGN
F.IS_WRITES_OK
      5824**DCL      6007<<ASSIGN
F.IS_WRITE_AT_EOF
      5825**DCL      6009<<ASSIGN
F.KEY.LEN
      5849**DCL      6035<<ASSIGN
F.KEY.RECORD
      5850**DCL      6036<<ASSIGN
F.LAST_RECORD
      5842**DCL      6021<<ASSIGN
F.MOD_TIME
      5852**DCL      6027<<ASSIGN
F.NEXT_FILE_HEADER
      5847**DCL      6032<<ASSIGN
F.RECORD_POSITION
      5838**DCL      6017<<ASSIGN
F.RFU1
      5855**DCL      6030<<ASSIGN
F.RFU2
      5856**DCL      6031<<ASSIGN
F.SAVED_CHAR
      5837**DCL      6016<<ASSIGN
F.STATE
      5846**DCL      6025<<ASSIGN
F.USER
      5854**DCL      6029<<ASSIGN
F.XSA$
      5845**DCL      6024<<ASSIGN

PL6.E3A0      #008=XBI_INITIALIZE_FILE_SYSTEM File=xbi_io_misc:6.:XBC3TSI        WED 08/20/97 14:25 Page:47   
      456        1        /*T***********************************************************/
      457        2        /*T*                                                         */
      458        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      459        4        /*T*                                                         */
      460        5        /*T***********************************************************/
      461        6
      462        7        XBI_INITIALIZE_FILE_SYSTEM: PROC;
      463        8           /*I*  NAME: XBI_INITIALIZE_FILE_SYSTEM
      464        9                 CALL: CALL XBI_INITIALIZE_FILE_SYSTEM;
      465       10                 PURPOSE: Initializes the file system.
      466       11           */
      467       12
      468       13           %INCLUDE CP_6;
      469     5573           %INCLUDE xb_stdio_i6;
      470     5816           %INCLUDE B$ROSEG;
      471     5879
      472     5880    1      DCL   B$ROS$                        PTR   SYMREF   READONLY;
      473     5881
      474     5882           %FPT_MERC(FPTN=FPT_MERC, STCLASS="");
      475     5895           %VLP_ERRCODE(FPTN=FAILCODE, STCLASS="");
      476     5940           %B$TCB;
      477     5943           %B$ALT;
      478     5951
      479     5952    1      DCL B$TCB$    PTR SYMREF;
      480     5953
      481     5954    1      DCL STDERR_P                       PTR SYMREF;
      482     5955    1      DCL XBI$MIN_RELEASE_DCBNUM    SBIN SYMREF;
      483     5956
      484     5957           %File_Header (Name=STDERR_FILE, STCLASS="BASED (F$)");
      485     6069
      486     6070    1      DCL M$DO          DCB;
      487     6071    1      DCL F$            PTR;
      488     6072
      489     6073    1      DCL XB_IO_ERROR               ENTRY (0);
      490     6074    1      DCL XBI$INIT_FILE_HEADER      ENTRY (1);
      491     6075    1      DCL XBI$LINK_FILE_HEADER      ENTRY (1);
      492     6076    1      DCL XBI$GET_STREAM_BUFFER     ENTRY (1)   ALTRET;
PL6.E3A0      #008=XBI_INITIALIZE_FILE_SYSTEM File=xbi_io_misc:6.:XBC3TSI        WED 08/20/97 14:25 Page:48   
      493     6077
      494     6078    1      XBI$FIRST_FILE_HEADER = ADDR(NIL);
      495     6079
      496     6080           /* connect STDERR stream to M$DO DCB */
      497     6081
      498     6082    1      F$ = stderr_p;
      499     6083    1      CALL XBI$INIT_FILE_HEADER (STDERR_FILE);
      500     6084    1      STDERR_FILE.IS_OPEN = '1'B;
      501     6085    1      STDERR_FILE.FPT_WRITE.V.DCB# = DCBNUM (M$DO);
      502     6086    1      STDERR_FILE.FPT_READ.V.DCB# = DCBNUM (M$DO);
      503     6087           /* the M$DO dcb is opened automatically at program invocation */
      504     6088    1      STDERR_FILE.IS_TEXT = '1'B;
      505     6089    1      STDERR_FILE.IS_EOF = '1'B;
      506     6090    1      STDERR_FILE.IS_WRITES_OK = '1'B;
      507     6091    1      STDERR_FILE.RECORD_POSITION = 1;
      508     6092    1      STDERR_FILE.CHARACTER_POSITION = 0;
      509     6093    1      STDERR_FILE.ARS = 0;
      510     6094    1      STDERR_FILE.STATE = %F_writing_state;
      511     6095    1      STDERR_FILE.AUXIO$ = ADDR(NIL);
      512     6096    1      STDERR_FILE.MOD_TIME = -1;
      513     6097    1      STDERR_FILE.CREATE_TIME = -1;
      514     6098    1      STDERR_FILE.USER = 0;
      515     6099    1      STDERR_FILE.RFU1 = 0;
      516     6100    1      STDERR_FILE.RFU2 = 0;
      517     6101    2      CALL XBI$GET_STREAM_BUFFER (STDERR_FILE) whenaltreturn do;
      518     6102    2         FAILCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      519     6103    2         FAILCODE.SEV = 3;
      520     6104    2         FPT_MERC.JERR_ = vector(FAILCODE);
      521     6105    2         call M$MERC(FPT_MERC);
      522     6106    2         end;
      523     6107
      524     6108        /*    We need to set the high water mark for largest DCB linked
      525     6109              into the run unit.  To do this loop through the array of
      526     6110              DCBS and check for the largest on not allocated.              */
      527     6111
      528     6112    1      XBI$MIN_RELEASE_DCBNUM = 10;
      529     6113
PL6.E3A0      #008=XBI_INITIALIZE_FILE_SYSTEM File=xbi_io_misc:6.:XBC3TSI        WED 08/20/97 14:25 Page:49   
      530     6114    2      DO WHILE (B$ROS$->B$ROSEG.DCBPTR$->B$RODCB$(XBI$MIN_RELEASE_DCBNUM) ~= ADDR(NIL)
              6114               AND
      531     6115    2             XBI$MIN_RELEASE_DCBNUM <= B$ROS$->B$ROSEG.NUMDCBS);
      532     6116    2         XBI$MIN_RELEASE_DCBNUM  = XBI$MIN_RELEASE_DCBNUM + 1;
      533     6117    2      END;
      534     6118           /* link STDERR into the file chain */
      535     6119
      536     6120    1      CALL XBI$LINK_FILE_HEADER (STDERR_FILE);
      537     6121    1   END XBI_INITIALIZE_FILE_SYSTEM;
      538     6122        %EOD;

PL6.E3A0      #008=XBI_INITIALIZE_FILE_SYSTEM File=xbi_io_misc:6.:XBC3TSI        WED 08/20/97 14:25 Page:50   
--  Include file information  --

   B$ROSEG.:LIB_E04  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI_INITIALIZE_FILE_SYSTEM.

   Procedure XBI_INITIALIZE_FILE_SYSTEM requires 77 words for executable code.
   Procedure XBI_INITIALIZE_FILE_SYSTEM requires 10 words of local(AUTO) storage.

PL6.E3A0      #008=XBI_INITIALIZE_FILE_SYSTEM File=xbi_io_misc:6.:XBC3TSI        WED 08/20/97 14:25 Page:51   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=XBI_INITIALIZE_FILE_SYSTEM File=xbi_io_misc:6.:XBC3TSI        WED 08/20/97 14:25 Page:52   
          MINI XREF LISTING

B$ALT.CODE
      5945**DCL      5945--REDEF    5946--REDEF    5946--REDEF
B$ALT.ERR
      5946**DCL      6102>>ASSIGN
B$ALT.ERR.ERR#
      5947**DCL      5947--REDEF
B$ALT.EVID
      5946**DCL      5946--REDEF    5946--REDEF
B$RODCB$
      5863**DCL      6114>>DOWHILE
B$ROS$
      5880**DCL      6114>>DOWHILE  6114>>DOWHILE
B$ROSEG.DCBPTR$
      5827**DCL      6114>>DOWHILE
B$ROSEG.NUMDCBS
      5829**DCL      6114>>DOWHILE
B$TCB.ALT$
      5941**DCL      6102>>ASSIGN
B$TCB$
      5952**DCL      6102>>ASSIGN
F$
      6071**DCL      5958--IMP-PTR  6082<<ASSIGN   6083>>CALL     6084>>ASSIGN   6085>>ASSIGN   6086>>ASSIGN
      6088>>ASSIGN   6089>>ASSIGN   6090>>ASSIGN   6091>>ASSIGN   6092>>ASSIGN   6093>>ASSIGN   6094>>ASSIGN
      6095>>ASSIGN   6096>>ASSIGN   6097>>ASSIGN   6098>>ASSIGN   6099>>ASSIGN   6100>>ASSIGN   6101>>CALL
      6120>>CALL
FAILCODE
      5907**DCL      6102<<ASSIGN   6104--ASSIGN
FAILCODE.SEV
      5937**DCL      6103<<ASSIGN
FPT_MERC
      5893**DCL      6105<>CALL
FPT_MERC.JERR_
PL6.E3A0      #008=XBI_INITIALIZE_FILE_SYSTEM File=xbi_io_misc:6.:XBC3TSI        WED 08/20/97 14:25 Page:53   
      5893**DCL      6104<<ASSIGN
M$DO
      6070**DCL      6085>>ASSIGN   6086>>ASSIGN
M$MERC
      5557**DCL-ENT  6105--CALL
STDERR_FILE
      5958**DCL      6083<>CALL     6101<>CALL     6120<>CALL
STDERR_FILE.ARS
      5980**DCL      6093<<ASSIGN
STDERR_FILE.AUXIO$
      5990**DCL      6095<<ASSIGN
STDERR_FILE.CHARACTER_POSITION
      5978**DCL      6092<<ASSIGN
STDERR_FILE.CREATE_TIME
      5992**DCL      6097<<ASSIGN
STDERR_FILE.FPT_READ.V.DCB#
      6003**DCL      6086<<ASSIGN
STDERR_FILE.FPT_READ.V.DVBYTE.REREAD#
      6020**DCL      6021--REDEF
STDERR_FILE.FPT_READ.V.INDX#
      6013**DCL      6014--REDEF
STDERR_FILE.FPT_WRITE.V.DCB#
      6040**DCL      6085<<ASSIGN
STDERR_FILE.FPT_WRITE.V.DVBYTE.VFC#
      6058**DCL      6059--REDEF
STDERR_FILE.IS_EOF
      5960**DCL      6089<<ASSIGN
STDERR_FILE.IS_OPEN
      5966**DCL      6084<<ASSIGN
STDERR_FILE.IS_TEXT
      5959**DCL      6088<<ASSIGN
STDERR_FILE.IS_WRITES_OK
      5963**DCL      6090<<ASSIGN
STDERR_FILE.MOD_TIME
      5991**DCL      6096<<ASSIGN
STDERR_FILE.RECORD_POSITION
PL6.E3A0      #008=XBI_INITIALIZE_FILE_SYSTEM File=xbi_io_misc:6.:XBC3TSI        WED 08/20/97 14:25 Page:54   
      5977**DCL      6091<<ASSIGN
STDERR_FILE.RFU1
      5994**DCL      6099<<ASSIGN
STDERR_FILE.RFU2
      5995**DCL      6100<<ASSIGN
STDERR_FILE.STATE
      5985**DCL      6094<<ASSIGN
STDERR_FILE.USER
      5993**DCL      6098<<ASSIGN
STDERR_P
      5954**DCL      6082>>ASSIGN
XBI$FIRST_FILE_HEADER
      5591**DCL      6078<<ASSIGN
XBI$GET_STREAM_BUFFER
      6076**DCL-ENT  6101--CALL
XBI$INIT_FILE_HEADER
      6074**DCL-ENT  6083--CALL
XBI$LINK_FILE_HEADER
      6075**DCL-ENT  6120--CALL
XBI$MIN_RELEASE_DCBNUM
      5955**DCL      6112<<ASSIGN   6114>>DOWHILE  6114>>DOWHILE  6116<<ASSIGN   6116>>ASSIGN

PL6.E3A0      #009=XBI$EXECUTE_OPEN File=xbi_io_misc:6.:XBC3TSI                  WED 08/20/97 14:25 Page:55   
      539        1        /*T***********************************************************/
      540        2        /*T*                                                         */
      541        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      542        4        /*T*                                                         */
      543        5        /*T***********************************************************/
      544        6
      545        7        XBI$EXECUTE_OPEN: PROC (F, OPEN_FPT) ALTRET;
      546        8           /*I*  NAME: XBI$EXECUTE_OPEN
      547        9                 CALL: CALL XBI$EXECUTE_OPEN (F, OPEN_FPT) ALTRETURN (..);
      548       10                 INPUT: F file_header;
      549       11                        OPEN_FPT an M$OPEN fpt.
      550       12                 PURPOSE: The stream F is opened by calling XSA$OPEN.  If an error
      551       13                    occurs, the routine ALTRETURN's.  XSA buffers are not allocated
      552       14                    by this routine, that is done later by XBI$COMPLETE_OPEN.
      553       15           */
      554       16
      555       17           %INCLUDE CP_6;
      556     5577           %INCLUDE XS_MACRO_C;
      557     5621           %INCLUDE xb_stdio_i6;
      558     5864
      559     5865           %File_Header (Name=F, Stclass=" ");
      560     5977           %FPT_OPEN (FPTN=OPEN_FPT, STCLASS=" ");
      561     6086
      562     6087           %XSA_PARAM (STCLASS="BASED (XSA$) ");
      563     6117           %XSA_PARAM (FPTN=XSA_PARAM_CONSTANT, STCLASS=CONSTANT);
      564     6147
      565     6148    1      DCL XSA$                   PTR;
      566     6149    1      DCL XBI_MALLOC             ENTRY (2);
      567     6150    1      DCL XBI$PROTECT_POINTER    ENTRY (1);
      568     6151    1      DCL XBI_FREE               ENTRY (1);
      569     6152    1      DCL XBI_SET_STREAM_ERRNO   ENTRY (2);
      570     6153           %XSA_ENTRIES;
      571     6157
      572     6158    1      CALL XBI_MALLOC (SIZEC (XSA_PARAM), XSA$);
      573     6159    1      XSA_PARAM = XSA_PARAM_CONSTANT;
      574     6160    1      CALL XSA$OPEN (OPEN_FPT, XSA_PARAM)
      575     6161    2         WHENALTRETURN DO;
PL6.E3A0      #009=XBI$EXECUTE_OPEN File=xbi_io_misc:6.:XBC3TSI                  WED 08/20/97 14:25 Page:56   
      576     6162    2            CALL XBI_SET_STREAM_ERRNO (F, XSA_PARAM.ERR);
      577     6163    2            F.IS_ERROR = '1'B;
      578     6164    2            CALL XBI_FREE(XSA$);
      579     6165    2            ALTRETURN;
      580     6166    2         END;
      581     6167
      582     6168    1      IF XSA_PARAM.ORG = 0 THEN
      583     6169    1         CALL XBI_FREE (XSA$);
      584     6170    2      ELSE DO;
      585     6171    2         CALL XBI$PROTECT_POINTER (XSA$);
      586     6172    2         F.XSA$ = XSA$;
      587     6173    2      END;
      588     6174    1   END XBI$EXECUTE_OPEN;
      589     6175        %EOD;

PL6.E3A0      #009=XBI$EXECUTE_OPEN File=xbi_io_misc:6.:XBC3TSI                  WED 08/20/97 14:25 Page:57   
--  Include file information  --

   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   XS_MACRO_C.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XBI$EXECUTE_OPEN.

   Procedure XBI$EXECUTE_OPEN requires 58 words for executable code.
   Procedure XBI$EXECUTE_OPEN requires 8 words of local(AUTO) storage.

PL6.E3A0      #009=XBI$EXECUTE_OPEN File=xbi_io_misc:6.:XBC3TSI                  WED 08/20/97 14:25 Page:58   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=XBI$EXECUTE_OPEN File=xbi_io_misc:6.:XBC3TSI                  WED 08/20/97 14:25 Page:59   
          MINI XREF LISTING

F
      5866**DCL         7--PROC     6162<>CALL
F.FPT_READ.V.DVBYTE.REREAD#
      5928**DCL      5929--REDEF
F.FPT_READ.V.INDX#
      5921**DCL      5922--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
      5966**DCL      5967--REDEF
F.IS_ERROR
      5873**DCL      6163<<ASSIGN
F.XSA$
      5892**DCL      6172<<ASSIGN
OPEN_FPT
      6042**DCL         7--PROC     6160<>CALL
OPEN_FPT.ACSVEH_
      6044**DCL      6045--REDEF
OPEN_FPT.ALTKEYS_
      6050**DCL      6051--REDEF    6051--REDEF
OPEN_FPT.HDR_
      6049**DCL      6050--REDEF
OPEN_FPT.TAB_
      6048**DCL      6049--REDEF
OPEN_FPT.UHL_
      6042**DCL      6043--REDEF    6043--REDEF
OPEN_FPT.V.FSN#
      6082**DCL      6082--REDEF    6082--REDEF
OPEN_FPT.WSN_
      6048**DCL      6048--REDEF
XBI$PROTECT_POINTER
      6150**DCL-ENT  6171--CALL
XBI_FREE
      6151**DCL-ENT  6164--CALL     6169--CALL
PL6.E3A0      #009=XBI$EXECUTE_OPEN File=xbi_io_misc:6.:XBC3TSI                  WED 08/20/97 14:25 Page:60   
XBI_MALLOC
      6149**DCL-ENT  6158--CALL
XBI_SET_STREAM_ERRNO
      6152**DCL-ENT  6162--CALL
XSA$
      6148**DCL      6095--IMP-PTR  6158<>CALL     6159>>ASSIGN   6160>>CALL     6162>>CALL     6164<>CALL
      6168>>IF       6169<>CALL     6171<>CALL     6172>>ASSIGN
XSA$OPEN
      6154**DCL-ENT  6160--CALL
XSA_PARAM
      6095**DCL      6158--CALL     6159<<ASSIGN   6160<>CALL
XSA_PARAM.EOMCHAR#
      6111**DCL      6112--REDEF
XSA_PARAM.ERR
      6099**DCL      6162<>CALL
XSA_PARAM.ORG
      6110**DCL      6168>>IF
XSA_PARAM.SIG1
      6105**DCL      6105--REDEF
XSA_PARAM.SIG2
      6105**DCL      6106--REDEF
XSA_PARAM_CONSTANT
      6125**DCL      6159>>ASSIGN
XSA_PARAM_CONSTANT.EOMCHAR#
      6141**DCL      6142--REDEF
XSA_PARAM_CONSTANT.SIG1
      6135**DCL      6135--REDEF
XSA_PARAM_CONSTANT.SIG2
      6135**DCL      6136--REDEF

PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:61   
      590        1        /*T***********************************************************/
      591        2        /*T*                                                         */
      592        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      593        4        /*T*                                                         */
      594        5        /*T***********************************************************/
      595        6
      596        7        create_tmpfile: PROC (pfx, dir, maxnum_P, cur_calls, result);
      597        8
      598        9        /*D* NAME: create_tmpfile
      599       10             PROTOTYPE:   int  create_tmpfile(char *pfx, char *dir,
      600       11                                    int maxnum, int *cur_calls, char *result);
      601       12             DESCRIPTION: generates a unique filename that currently does not
      602       13                          exist in the file dir.  If dir is null then it
      603       14                          creates the file in the current working directory.
      604       15                          The file name is created by taking the contents of
      605       16                          what is pointed at by pfx and concatenating the
      606       17                          maxnum to it, and test opening files backwards until
      607       18                          the lowest number file is found.  Result must point
      608       19                          to at least N characters (strlen(pfx) + strlen(dir)
      609       20                          + strlen(binchar(maxnum)) + 2).
      610       21
      611       22                          Upon successful completion zero is returned,
      612       23                          otherwise non-zero is returned.
      613       24              WGE April 30, 1990
      614       25        */
      615       26
      616       27        %INCLUDE CP_6;
      617     5587        %INCLUDE CP_6_SUBS;
      618     6127
      619     6128        /*    Parameter declarations  */
      620     6129
      621     6130    1   DCL   pfx            CHAR(pfx_len);
      622     6131    1   DCL   dir            CHAR(dir_len);
      623     6132    1   DCL   maxnum_P       UBIN;
      624     6133    1   DCL   cur_calls      SBIN;
      625     6134    1   DCL   result         CHAR(result_len);
      626     6135
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:62   
      627     6136        /*    Function declarations   */
      628     6137
      629     6138    1   DCL XB_RETURN_ORDINAL_RESULT  ENTRY (1);
      630     6139    1   DCL XBI$STRLEN                ENTRY (2);
      631     6140
      632     6141        /*    Local declarations      */
      633     6142
      634     6143    1   DCL dcb_number       UBIN WORD;
      635     6144    1   DCL dcb$             PTR;
      636     6145    1   DCL next_file_number SBIN WORD;
      637     6146    1   DCL last_file_number SBIN;
      638     6147    1   DCL   pfx_len        SBIN;
      639     6148    1   DCL   dir_len        SBIN;
      640     6149    1   DCL   result_len     SBIN;
      641     6150    1   DCL   maxnum_len     SBIN;
      642     6151    1   DCL   maxnum_as_ptr  PTR;
      643     6152    1   DCL   maxnum         REDEF    maxnum_as_ptr  SBIN;
      644     6153    1   DCL   div_val        SBIN;
      645     6154
      646     6155        /*    Monitor declarations    */
      647     6156
      648     6157        %VLP_NAME (FPTN=Last_Possible_File, STCLASS=AUTO);
      649     6184        %VLP_ACCT (FPTN=acct_name, STCLASS=AUTO);
      650     6197        %FPT_GETDCB (STCLASS=CONSTANT,FPTN=constant_getdcb);
      651     6212        %FPT_GETDCB (STCLASS=AUTO,FPTN=auto_getdcb);
      652     6227        %FPT_RELDCB (STCLASS=CONSTANT,FPTN=constant_reldcb);
      653     6241        %FPT_RELDCB (STCLASS=AUTO,FPTN=auto_reldcb);
      654     6255        %FPT_OPEN (FPTN=OPEN_CONST,
      655     6256                   STCLASS=CONSTANT,
      656     6257                   ASN=FILE,
      657     6258                   TEST=YES,
      658     6259                   NXTF=YES,
      659     6260                   THISF=YES,
      660     6261                   REV=YES);
      661     6370        %FPT_OPEN (FPTN=OPEN, STCLASS=AUTO);
      662     6479        %F$DCB (STCLASS="BASED (dcb$)");
      663     6536
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:63   
      664     6537        /*    Usual kludge to get parameters and get length of arguments    */
      665     6538
      666     6539    1      maxnum_as_ptr = ADDR(maxnum_P);
      667     6540    1      CALL XBI$STRLEN(pfx, pfx_len);
      668     6541    1      IF (ADDR(dir) ~= ADDR(NIL)) THEN
      669     6542    1         CALL XBI$STRLEN(dir, dir_len);
      670     6543    1      ELSE
      671     6544    1         dir_len = 0;
      672     6545
      673     6546    1      maxnum_len = 1;
      674     6547    1      div_val = maxnum;
      675     6548    2      DO WHILE (div_val >= 10);
      676     6549    2         div_val = div_val / 10;
      677     6550    2         maxnum_len = maxnum_len + 1;
      678     6551    2      END;
      679     6552
      680     6553    1      result_len = pfx_len + maxnum_len + dir_len + 2;
      681     6554
      682     6555    1      IF (ADDR(result) = ADDR(NIL)) OR (maxnum <= 0) THEN
      683     6556    1         CALL XB_RETURN_ORDINAL_RESULT(-1);
      684     6557
      685     6558    1      last_file_number = cur_calls;
      686     6559
      687     6560        /* We need a temporary dcb */
      688     6561
      689     6562    1      auto_getdcb = constant_getdcb;
      690     6563    1      auto_getdcb.v_ = VECTOR(auto_getdcb.v);
      691     6564    1      auto_getdcb.dcbnum_ = VECTOR(dcb_number);
      692     6565    1      CALL M$GETDCB (auto_getdcb)
      693     6566    2      WHENALTRETURN DO;
      694     6567    2         CALL XB_RETURN_ORDINAL_RESULT(-1);
      695     6568    2      END;
      696     6569    1      dcb$ = DCBADDR(dcb_number);
      697     6570
      698     6571        /*    Create the last possible file name                            */
      699     6572
      700     6573    1      SUBSTR(Last_Possible_File.name#,0,pfx_len) = SUBSTR(pfx,0,pfx_len);
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:64   
      701     6574    1      CALL BINCHAR(SUBSTR(Last_Possible_File.name#,pfx_len,maxnum_len), maxnum);
      702     6575    1      Last_Possible_File.l# = pfx_len + maxnum_len;
      703     6576
      704     6577        /* Open the last file in the range, using a reverse search */
      705     6578
      706     6579    1      OPEN = OPEN_CONST;
      707     6580    1      OPEN.V_ = VECTOR (OPEN.V);
      708     6581    1      OPEN.V.DCB# = dcb_number;
      709     6582    2      IF (dir_len ~= 0) THEN DO;
      710     6583    2         substr(acct_name.acct#, 0, 8) = SUBSTR(dir, 0, dir_len);
      711     6584    2         OPEN.ACCT_ = VECTOR(acct_name);
      712     6585    2      END;
      713     6586    1      OPEN.NAME_ = VECTOR(Last_Possible_File);
      714     6587    1      CALL M$OPEN (OPEN)
      715     6588    2      WHENRETURN DO;
      716     6589    2         IF SUBSTR (F$DCB.NAME#.C, 0, MINIMUM (pfx_len, F$DCB.NAME#.L)) = SUBSTR(pfx,0,
              6589                  pfx_len)
      717     6590    3         THEN DO;
      718     6591    3            CALL CHARBIN (next_file_number, SUBSTR (F$DCB.NAME#.C, pfx_len, maxnum_len)
              6591                     );
      719     6592    3            next_file_number = next_file_number + 1;
      720     6593    3         END;
      721     6594    3         ELSE DO;
      722     6595    3            next_file_number = 0;
      723     6596    3         END;
      724     6597    2      END;
      725     6598    2      WHENALTRETURN DO;
      726     6599              /* there were no files in the range probably no access to dir */
      727     6600    2         next_file_number = 0;
      728     6601    2      END;
      729     6602
      730     6603        /* release the temporary dcb */
      731     6604
      732     6605    1      auto_reldcb = constant_reldcb;
      733     6606    1      auto_reldcb.v_ = VECTOR(auto_reldcb.v);
      734     6607    1      auto_reldcb.v.dcb# = dcb_number;
      735     6608    2      CALL M$RELDCB (auto_reldcb) WHENALTRETURN DO; END;
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:65   
      736     6609
      737     6610        /* are we out of file numbers? */
      738     6611
      739     6612    2      IF (MAXIMUM(next_file_number, last_file_number) > maxnum) THEN DO;
      740     6613    2         CALL XB_RETURN_ORDINAL_RESULT(-1);
      741     6614    2      END;
      742     6615
      743     6616    1      SUBSTR(result, 0, pfx_len) = SUBSTR(pfx, 0, pfx_len);
      744     6617    1      CALL BINCHAR (SUBSTR (result, pfx_len, maxnum_len), MAXIMUM (last_file_number,
              6617               next_file_number));
      745     6618    2      IF (dir_len ~= 0) THEN DO;
      746     6619    2         SUBSTR(result,pfx_len+maxnum_len,1) = '.';
      747     6620    2         SUBSTR(result,pfx_len+maxnum_len+1, dir_len) = SUBSTR(dir,0,dir_len);
      748     6621    2         maxnum_len = maxnum_len + dir_len + 1;
      749     6622    2      END;
      750     6623    1      SUBSTR(result,pfx_len+maxnum_len,1) = BINASC(0);  /* C's trailing null */
      751     6624
      752     6625    1      if last_file_number < next_file_number then
      753     6626    1         cur_calls = next_file_number + 1;
      754     6627    1      else
      755     6628    1         cur_calls = last_file_number + 1;
      756     6629    1      CALL XB_RETURN_ORDINAL_RESULT(0);
      757     6630
      758     6631    1   END create_tmpfile;

PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:66   
--  Include file information  --

   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure CREATE_TMPFILE.

   Procedure CREATE_TMPFILE requires 229 words for executable code.
   Procedure CREATE_TMPFILE requires 100 words of local(AUTO) storage.

    No errors detected in file xbi_io_misc:6.:XBC3TSI    .

PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:67   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:68   
          MINI XREF LISTING

ACCT_NAME
      6195**DCL      6584--ASSIGN
ACCT_NAME.ACCT#
      6195**DCL      6583<<ASSIGN
AUTO_GETDCB
      6223**DCL      6562<<ASSIGN   6565<>CALL
AUTO_GETDCB.DCBNUM_
      6223**DCL      6564<<ASSIGN
AUTO_GETDCB.V
      6224**DCL      6563--ASSIGN
AUTO_GETDCB.V_
      6223**DCL      6563<<ASSIGN
AUTO_RELDCB
      6252**DCL      6605<<ASSIGN   6608<>CALL
AUTO_RELDCB.V
      6252**DCL      6606--ASSIGN
AUTO_RELDCB.V.DCB#
      6252**DCL      6607<<ASSIGN
AUTO_RELDCB.V_
      6252**DCL      6606<<ASSIGN
CONSTANT_GETDCB
      6208**DCL      6562>>ASSIGN
CONSTANT_GETDCB.V
      6209**DCL      6208--DCLINIT
CONSTANT_RELDCB
      6238**DCL      6605>>ASSIGN
CONSTANT_RELDCB.V
      6238**DCL      6238--DCLINIT
CUR_CALLS
      6133**DCL         7--PROC     6558>>ASSIGN   6626<<ASSIGN   6628<<ASSIGN
DCB$
      6144**DCL      6480--IMP-PTR  6569<<ASSIGN   6589>>IF       6589>>IF       6591>>CALLBLT
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:69   
DCB_NUMBER
      6143**DCL      6564--ASSIGN   6569--ASSIGN   6581>>ASSIGN   6607>>ASSIGN
DIR
      6131**DCL         7--PROC     6541--IF       6542<>CALL     6583>>ASSIGN   6620>>ASSIGN
DIR_LEN
      6148**DCL      6131--IMP-SIZ  6542>>CALL     6542<>CALL     6544<<ASSIGN   6553>>ASSIGN   6582>>IF
      6583>>ASSIGN   6583>>ASSIGN   6618>>IF       6620>>ASSIGN   6620>>ASSIGN   6620>>ASSIGN   6621>>ASSIGN
DIV_VAL
      6153**DCL      6547<<ASSIGN   6548>>DOWHILE  6549<<ASSIGN   6549>>ASSIGN
F$DCB.ACTPOS
      6512**DCL      6512--REDEF
F$DCB.ARS#
      6486**DCL      6486--REDEF
F$DCB.ATTR
      6505**DCL      6506--REDEF
F$DCB.BORROW
      6520**DCL      6520--REDEF    6520--REDEF    6520--REDEF
F$DCB.DCBNAME.L
      6534**DCL      6534--IMP-SIZ
F$DCB.EOMCHAR#
      6490**DCL      6490--REDEF
F$DCB.FLDID
      6515**DCL      6515--REDEF
F$DCB.FORM$
      6509**DCL      6509--REDEF
F$DCB.FSECT
      6525**DCL      6525--REDEF
F$DCB.FSN#
      6502**DCL      6502--REDEF    6502--REDEF    6503--REDEF
F$DCB.HEADER$
      6508**DCL      6508--REDEF
F$DCB.IXTNSIZE#
      6506**DCL      6506--REDEF
F$DCB.LASTSTA$
      6495**DCL      6495--REDEF
F$DCB.LVL
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:70   
      6521**DCL      6521--REDEF
F$DCB.NAME#.C
      6496**DCL      6496--REDEF    6589>>IF       6591>>CALLBLT
F$DCB.NAME#.L
      6496**DCL      6589>>IF
F$DCB.NOEOF
      6518**DCL      6518--REDEF
F$DCB.NRECS#
      6507**DCL      6507--REDEF
F$DCB.NRECX
      6526**DCL      6526--REDEF
F$DCB.OHDR
      6518**DCL      6518--REDEF
F$DCB.ORG#
      6501**DCL      6501--REDEF
F$DCB.PRECNO
      6524**DCL      6524--REDEF
F$DCB.RCSZ
      6530**DCL      6530--REDEF
F$DCB.RES#
      6497**DCL      6497--REDEF
F$DCB.SETX
      6509**DCL      6509--REDEF
F$DCB.TAB$
      6509**DCL      6509--REDEF
F$DCB.TDA
      6523**DCL      6524--REDEF
F$DCB.WSN#
      6497**DCL      6497--REDEF
LAST_FILE_NUMBER
      6146**DCL      6558<<ASSIGN   6612>>IF       6617>>CALLBLT  6625>>IF       6628>>ASSIGN
LAST_POSSIBLE_FILE
      6182**DCL      6586--ASSIGN
LAST_POSSIBLE_FILE.L#
      6182**DCL      6575<<ASSIGN
LAST_POSSIBLE_FILE.NAME#
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:71   
      6182**DCL      6573<<ASSIGN   6574<<CALLBLT
M$GETDCB
      5521**DCL-ENT  6565--CALL
M$OPEN
      5515**DCL-ENT  6587--CALL
M$RELDCB
      5521**DCL-ENT  6608--CALL
MAXNUM
      6152**DCL      6547>>ASSIGN   6555>>IF       6574>>CALLBLT  6612>>IF
MAXNUM_AS_PTR
      6151**DCL      6152--REDEF    6539<<ASSIGN
MAXNUM_LEN
      6150**DCL      6546<<ASSIGN   6550<<ASSIGN   6550>>ASSIGN   6553>>ASSIGN   6574>>CALLBLT  6575>>ASSIGN
      6591>>CALLBLT  6617>>CALLBLT  6619>>ASSIGN   6620>>ASSIGN   6621<<ASSIGN   6621>>ASSIGN   6623>>ASSIGN
MAXNUM_P
      6132**DCL         7--PROC     6539--ASSIGN
NEXT_FILE_NUMBER
      6145**DCL      6591<<CALLBLT  6592<<ASSIGN   6592>>ASSIGN   6595<<ASSIGN   6600<<ASSIGN   6612>>IF
      6617>>CALLBLT  6625>>IF       6626>>ASSIGN
OPEN
      6435**DCL      6579<<ASSIGN   6587<>CALL
OPEN.ACCT_
      6439**DCL      6584<<ASSIGN
OPEN.ACSVEH_
      6437**DCL      6438--REDEF
OPEN.ALTKEYS_
      6443**DCL      6444--REDEF    6444--REDEF
OPEN.HDR_
      6442**DCL      6443--REDEF
OPEN.NAME_
      6436**DCL      6586<<ASSIGN
OPEN.TAB_
      6441**DCL      6442--REDEF
OPEN.UHL_
      6435**DCL      6436--REDEF    6436--REDEF
OPEN.V
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:72   
      6444**DCL      6580--ASSIGN
OPEN.V.DCB#
      6444**DCL      6581<<ASSIGN
OPEN.V.FSN#
      6475**DCL      6475--REDEF    6475--REDEF
OPEN.V_
      6435**DCL      6580<<ASSIGN
OPEN.WSN_
      6441**DCL      6441--REDEF
OPEN_CONST
      6326**DCL      6579>>ASSIGN
OPEN_CONST.ACSVEH_
      6328**DCL      6329--REDEF
OPEN_CONST.ALTKEYS_
      6334**DCL      6335--REDEF    6335--REDEF
OPEN_CONST.HDR_
      6333**DCL      6334--REDEF
OPEN_CONST.TAB_
      6332**DCL      6333--REDEF
OPEN_CONST.UHL_
      6326**DCL      6327--REDEF    6327--REDEF
OPEN_CONST.V
      6335**DCL      6326--DCLINIT
OPEN_CONST.V.FSN#
      6366**DCL      6366--REDEF    6366--REDEF
OPEN_CONST.WSN_
      6332**DCL      6332--REDEF
PFX
      6130**DCL         7--PROC     6540<>CALL     6573>>ASSIGN   6589>>IF       6616>>ASSIGN
PFX_LEN
      6147**DCL      6130--IMP-SIZ  6540>>CALL     6540<>CALL     6553>>ASSIGN   6573>>ASSIGN   6573>>ASSIGN
      6573>>ASSIGN   6574>>CALLBLT  6575>>ASSIGN   6589>>IF       6589>>IF       6589>>IF       6591>>CALLBLT
      6616>>ASSIGN   6616>>ASSIGN   6616>>ASSIGN   6617>>CALLBLT  6619>>ASSIGN   6620>>ASSIGN   6623>>ASSIGN
RESULT
      6134**DCL         7--PROC     6555--IF       6616<<ASSIGN   6617<<CALLBLT  6619<<ASSIGN   6620<<ASSIGN
      6623<<ASSIGN
PL6.E3A0      #010=CREATE_TMPFILE File=xbi_io_misc:6.:XBC3TSI                    WED 08/20/97 14:26 Page:73   
RESULT_LEN
      6149**DCL      6134--IMP-SIZ  6553<<ASSIGN   6616>>ASSIGN   6617>>CALLBLT  6619>>ASSIGN   6620>>ASSIGN
      6623>>ASSIGN
XBI$STRLEN
      6139**DCL-ENT  6540--CALL     6542--CALL
XB_RETURN_ORDINAL_RESULT
      6138**DCL-ENT  6556--CALL     6567--CALL     6613--CALL     6629--CALL
