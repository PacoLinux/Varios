.*M*
HELP file for: PMDISP
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                                            
PMDISP is used to display performance data that has been gathered via PMON.X OR
PM.X.
.*B*
Command line syntax:
 
!PMDISP.X ru_fid [,pm_data_fid] [ON , lsfid] [(option,...)]
 
The ru_fid specified must be the run unit PMON or PM collected performance data
on, and should have full debug schema.
 
The default pm_data_fid is *PM_DATA.  If you have specified the performance
data file to be otherwise when you run PMON or PM, then you have to give that
file name here, or you can set M$UI to the pm_data_fid before invoking PMDISP.
 
All statistics output from PMDISP goes out through M$LO.  If you want the
output to go to a file, you must specify lsfid, or you can set M$LO before
invoking PMDISP.
.*B*
The options for PMDISP.X are:
 
M=external-proc
.*R*
          specifies that a detailed execution profile is to be generated for
each external procedure specified.  If more than one procedure name is
specified, the list of procedure names must be enclosed by parenthesis.  You
can specify  any number of external procedures, and procedure names can be
wildcarded with a trailing '?'.
 
MN
.*R*
          causes a summary to be made indicating the percentage of time spent
in each external procedure and internal procedures.  (This is the default.)
 
NM
.*R*
          suppresses the display of the percentage of time spent in each
external procedure.  It overrides MN option.
 
ND
.*R*
          causes a display of the percentage of time spent for each node.
 
.*B*
PM
.*R*
          is used to indicate that the performance data came from a PMON or
PM.X run.
 
CT
.*R*
          specifies data is from COMTEN device.
 
R=(r0-r1,r2-r3)
.*R*
          creates an additional report on a specific range of instructions.  Up
to three ranges may be monitored.  This is useful for monitoring large external
procedures that have no schema or for monitoring GMAP modules.  The ranges are
input of instruction addresses in octal as in: R=(17550-17625).
.*B*
 
RO
.*R*
          requests PMDISP to save its internal tables that describe the
run-unit for another PMDISP run with the same options (except RI in place of
RO).  The internal run-unit tables are written out to the fid assigned to the
M$RU DCB.
 
RI
.*R*
          requests PMDISP to use the internal run-unit tables saved from a
previous PMDISP run.  This can cut the run time of PMDISP in half for large
run-units.  The M= option is not permitted if this option is specified.
 
It is important that the run-unit used must be the same as the one for which
the data was obtained.  M$RU must be assigned to the fid containing data
previously saved by the RO option.
.*B*
ST
.*R*
          causes a summary to be made before the report is displayed containing
the percentages of execution, service time, total data points and total time
used.  This is a default.
 
NS
.*R*
          overrides ST.
 
.*B*
PMDISP is capable of calculating several kinds of statistics at different
levels.  However, to get a reasonable printout, you should have at least a
thousand data points collected.  Since this is not a hardware monitor, the
figures given are only approximations.  Several points are discussed later on
regarding to this kind of limitation.
 
The following set of statistics is available:
 
1.  PM EXECUTION RUN STATISTICS  (*DEFAULT)
 
It includes percentages of execution time, service time, total data points and
total time used.
 
2.  LIST OF NODES
 
It gives a list of the percentages of time spent for all nodes of a program.
 
3.  LIST OF MODULES  (*DEFAULT)
 
The printout will list each external procedure and the percent of time used by
that procedure.  If that external procedure has internal procedures (a la PL6),
the printout will show the internal procedure with both the percent of total
program time and percent of external procedure time.  It will also show the
lexical level of that internal procedure.  Note that the time given for any
internal procedure includes the time used in any internal procedure nested
inside it.
 
4.  LIST OF STATEMENTS
 
It is possible to get a detailed printout for any number of external procedures
by specifying (M=(module_name,...)) on the PMDISP invocation.  Note that
module_name can be wildcarded with a trailing '?'.  The time spent in a
statement may not appear on that statement, due to hardware limitations.
(Transfer instructions or instructions located on an even-word boundary are not
interruptable).  In general the detail on the printout will be reasonable.
Time for statements is given both as percent of total time, and percent of
external procedure time.  (When a percent is of the external procedure time, it
appears in parenthesis).
 
5.  LIST OF SPECIFIED RANGES
 
The printout will list each range and the percentage of time spent in each one
of them.
 
.*B*
DCB Usage:
 
M$SI is set to the run unit PMON or PM collects performance data on.
.*R*
M$UI is set to the performance data file (default is *PM_DATA)
.*R*
M$LO is set to the destination of statistics output
.*R*
M$RU is set to the run-unit-data file (default is *RU_NAME)
.*R*
 
In order to calculate the statistics, PMDISP has to first collect information
of the run unit run under PMON.  This information is based on the run unit
schema, and PMDISP stores these information in 4 arrays.  Since it takes a lot
of time to build these 4 arrays each time you run PMDISP, it will save you a
lot of time if you run PMDISP once and specify by the RO option to save all
these information into a run-unit-data file.  (see options RI and RO).
 
.*B*
Following is a list of factors users should be aware of :
 
1.  Note that the time counts both user execution and monitor service time, and
therefore routines that use lots of service time (I/O routines, etc.) will come
out high on the list.
 
2.  Effect of PMMEs:
 
Since monitor calls are not interruptable, if any timer interval runs out
during a monitor call, the timer interrupt will be delayed until returns to the
next statement immediately following the monitor call in the user program.
Therefore, for any monitor call, no matter how long it takes, only one timer
run-out will be recorded.  As a result, it is possible that a procedure with a
lot of PMMEs actually takes up more percentage of the total time than the
statistics shows.  Note that the statistics is calculated based on data points
instead of actual time spent.
 
3.  The time spent in the calling sequence setup routine (6AAUTO, 6PREGS,
XFF_9SET, etc.) will be charged to the routine that is doing the setup, rather
than being listed separately.
 
4.  Effect of system load:
 
The amount of system load can be reflected in the speed of monitor service.
Therefore, if a user has a lot of monitor calls, service time used may vary
according to the load of the system.
 
Some Restrictions:
 
User programs are restricted to 1501 internal procedures, 20 nodes, with no
particular limit (except memory) to the number of external procedures.
 
 
.*K* DCBS
M$SI is set to the run unit PMON or PM collects performance data on.
.*R*
M$UI is set to the performance data file (default is *PM_DATA)
.*R*
M$LO is set to the destination of statistics output
.*R*
M$RU is set to the run-unit-data file (default is *RU_NAME)
 
.*K* OPTIONS
The options for PMDISP.X are:
 
M=external-proc
.*R*
          specifies that a detailed execution profile is to be generated for
each external procedure specified.  If more than one procedure name is
specified, the list of procedure names must be enclosed by parenthesis.  You
can specify  any number of external procedures, and procedure names can be
wildcarded with a trailing '?'.
 
MN
.*R*
          causes a summary to be made indicating the percentage of time spent
in each external procedure and internal procedures.  (This is the default.)
 
NM
.*R*
          suppresses the display of the percentage of time spent in each
external procedure.  It overrides MN option.
 
ND
.*R*
          causes a display of the percentage of time spent for each node.
 
.*B*
PM
.*R*
          is used to indicate that the performance data came from a PMON or
PM.X run.
 
CT
.*R*
          specifies data is from COMTEN device.
 
R=(r0-r1,r2-r3)
.*R*
          creates an additional report on a specific range of instructions.  Up
to three ranges may be monitored.  This is useful for monitoring large external
procedures that have no schema or for monitoring GMAP modules.  The ranges are
input of instruction addresses in octal as in: R=(17550-17625).
.*B*
 
RO
.*R*
          requests PMDISP to save its internal tables that describe the
run-unit for another PMDISP run with the same options (except RI in place of
RO).  The internal run-unit tables are written out to the fid assigned to the
M$RU DCB.
 
RI
.*R*
          requests PMDISP to use the internal run-unit tables saved from a
previous PMDISP run.  This can cut the run time of PMDISP in half for large
run-units.  The M= option is not permitted if this option is specified.
 
It is important that the run-unit used must be the same as the one for which
the data was obtained.  M$RU must be assigned to the fid containing data
previously saved by the RO option.
.*B*
ST
.*R*
          causes a summary to be made before the report is displayed containing
the percentages of execution, service time, total data points and total time
used.  This is a default.
 
NS
.*R*
          overrides ST.
 
.*K* XINDEX
PMDISP.X
.*R*
AID=PROGRAMMING
.*R*
PERFORMANCE
.*R*
.*K* XINDEX_ABSTRACT
TOOL=PMDISP
.*R*
Displays performance data gathered via PMON.X or PM.X.
.*K* CHANGES Changes changes
870214 . JLJ
.*R*
Changes made per star 32365.  Some overlay data was not being reported
properly.
.*B*
8/8/84
.*R*
Make PMDISP dynamically allocate memory for the external names record to allow
large rununits to be processed.  Also make EPN array dynamic, for same reason.
Fixed star #16795.
 
Implemented fix to WRITE_NODES from star #21084.
.*K* OWNER
Carol Walter, LADC
