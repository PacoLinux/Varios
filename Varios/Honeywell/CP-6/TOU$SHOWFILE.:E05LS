VERSION E05

PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:1    
        1        1        /*M* TOU$SHOWFILE     DEckfile Editor Routine SHOWFILE Function */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        TOU$SHOWFILE
       12       12              AUTHOR:      Scott S. Sheppard
       13       13              PURPOSE:     DEckfile Editor Routine SHOWFILE Function
       14       14              DESCRIPTION: This program is called when the SHOWFILE function
       15       15                           is invoked by the  CP-6  deckfile editor  driver.
       16       16                           This program shows  the  deckfile history log  to
       17       17                           user or prints it to the edit listing,  depending
       18       18                           on the run mode (batch or on-line).
       19       19              REFERENCE:   CP-6 Release C0M0
       20       20              LAST UPDATE: 10/27/83
       21       21        */
       22       22
       23       23        /*F*  NAME:        TOU$SHOWFILE
       24       24              DESCRIPTION: Procedure Nesting Hierarchy
       25       25
       26       26              TOU$SHOWFILE: procedure
       27       27                 SF_INIT_DUP: procedure
       28       28                 SF_COMMAND_SETUP: procedure ALTRET
       29       29                 SF_SHOW_LOG: procedure ALTRET
       30       30                 SF_SHOW_MATCHES: procedure ALTRET
       31       31                    SF_CHECK_MATCH: procedure (LOG#) ALTRET
       32       32                 SF_WRITE_MSG: procedure ALTRET
       33       33        */
       34       34        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:2    
       35       35        TOU$SHOWFILE: PROC ;
       36       36
       37       37        /* Include Files */
       38       38
       39       39           %INCLUDE TOU_DEER_M ;
       40     1450           %INCLUDE TOU_RQSTS_E ;
       41     1525           %INCLUDE TO_PERR_C ;
       42     2110           %INCLUDE XU_MACRO_C ;
       43     5216
       44     5217        /* Macros */
       45     5218
       46     5219           %DUP (STCLASS = SYMREF) ;
       47     5362           %LOG_B (STCLASS = "BASED (DUP.LOG_V.PTR$)") ;
       48     5388           %OBJECT_KEY (STCLASS = SYMREF) ;
       49     5401
       50     5402        /* Variables */
       51     5403
       52     5404    1      DCL LOG#           UBIN WORD STATIC SYMDEF ALIGNED INIT (0) ;
       53     5405    1      DCL SHOW_ALL       BIT (1) CALIGNED ;
       54     5406    1      DCL CMPR_LGTH      UBIN WORD ALIGNED ;
       55     5407
       56     5408        /* External Entry Points */
       57     5409
       58     5410    1      DCL TOU$DU_SET_DF_FID              ENTRY ALTRET ;
       59     5411    1      DCL TOU$DU_OPEN_DF                 ENTRY ALTRET ;
       60     5412    1      DCL TOU$DU_CLOSE_DF                ENTRY ALTRET ;
       61     5413
       62     5414    1      DCL TOU$DU_USER_WRITE              ENTRY ALTRET ;
       63     5415    1      DCL TOU$DU_PRINTER_WRITE           ENTRY ALTRET ;
       64     5416    1      DCL TOU$DU_GET_SITE                ENTRY ALTRET ;
       65     5417
       66     5418    1      DCL TOU$DFU_DF_RD_LOG              ENTRY ALTRET ;
       67     5419    1      DCL TOU$L_SHOW_DCB                 ENTRY ;
       68     5420           %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:3    
       69     5421        /* ********************
       70     5422           ********************
       71     5423           **  Main Program  **
       72     5424           ********************
       73     5425           ******************** */
       74     5426
       75     5427    1      CALL SF_INIT_DUP ;
       76     5428    1      CALL SF_COMMAND_SETUP ALTRET (ERROR_RETURN) ;
       77     5429    1      CALL TOU$L_SHOW_DCB ;
       78     5430    1      CALL TOU$DU_GET_SITE ALTRET (ERROR_RETURN) ;
       79     5431
       80     5432    1      CALL TOU$DU_OPEN_DF ALTRET (ERROR_RETURN) ;
       81     5433    1      CALL TOU$DFU_DF_RD_LOG ALTRET (ERROR_RETURN) ;
       82     5434    1      IF SHOW_ALL
       83     5435    1      THEN CALL SF_SHOW_LOG ALTRET (ERROR_RETURN) ;
       84     5436    1      ELSE CALL SF_SHOW_MATCHES ALTRET (ERROR_RETURN) ;
       85     5437    1      CALL TOU$DU_CLOSE_DF ALTRET (ERROR_RETURN) ;
       86     5438
       87     5439        /* NORMAL_RETURN: */
       88     5440    1      DUP.MSG_CODE = %T$SF_SUCCESS;
       89     5441    1      CALL TOU$DU_USER_WRITE ;
       90     5442    1      RETURN ;
       91     5443
       92     5444    1   ERROR_RETURN:
       93     5445    1      CALL TOU$DU_CLOSE_DF ;
       94     5446    1      DUP.MSG_CODE = %T$SF_FAILURE;
       95     5447    1      CALL TOU$DU_USER_WRITE ;
       96     5448    1      RETURN ;
       97     5449
       98     5450        /* ********************
       99     5451           ********************
      100     5452           **  End Of  Main  **
      101     5453           ********************
      102     5454           ******************** */
      103     5455        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:4    
      104     5456        /*I*  NAME:        SF_INIT_DUP
      105     5457              AUTHOR:      Scott S. Sheppard
      106     5458              PURPOSE:     Initilization
      107     5459              INTERFACE:   None called.
      108     5460              INPUT:       Set of system equates.
      109     5461              OUTPUT:      DUP
      110     5462              DESCRIPTION: This procedure initializes variables to
      111     5463                           appropriate starting values.
      112     5464        */
      113     5465
      114     5466    1   SF_INIT_DUP: PROC ;
      115     5467
      116     5468        /* Code */
      117     5469
      118     5470    2      DUP.HDR_CODE = %H$SHOWFILE ;
      119     5471    2      DUP.FORCE_NEW_PAGE = %TRUE ;
      120     5472    2      DUP.DF.ENTERED = %FALSE ;
      121     5473    2      DUP.DF.OPEN_TYPE = %READ_FILE ;
      122     5474    2      DUP.DF.REPORT_ERROR = %TRUE ;
      123     5475    2      DUP.DF.CLOSE_TYPE = %SAVE_FILE ;
      124     5476    2      RETURN ;
      125     5477
      126     5478    2   END SF_INIT_DUP ;
      127     5479        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:5    
      128     5480        /*I*  NAME:        SF_COMMAND_SETUP
      129     5481              AUTHOR:      Scott S. Sheppard
      130     5482              PURPOSE:     Sets up SHOWFILE Command
      131     5483              INTERFACE:   TOU$DU_SET_DF_FID
      132     5484              INPUT:       DUP.CMD$ - pointer to the parse control block
      133     5485              OUTPUT:      DUP.DF.HOLD_AREA
      134     5486                           DUP.DF.HOLD_AREA_LGTH
      135     5487                           OBJECT_KEY.DATA
      136     5488                           CMPR_LGTH
      137     5489                           DUP.DF.ENTERED
      138     5490                           SHOW_ALL
      139     5491              DESCRIPTION: This procedure sets up the SHOWFILE command  from
      140     5492                           the information entered by the user.DUP.CMD$ is a
      141     5493                           pointer to a   parse control block  that contains
      142     5494                           the tokens entered by the user.
      143     5495                           COMMAND FORMS:
      144     5496              Case 1: SF
      145     5497              Case 2: SF <search string>
      146     5498              Case 3: SF FROM <deckfile fid>
      147     5499              Case 4: SF <search string> FROM <deckfile fid>
      148     5500        */
      149     5501        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:6    
      150     5502    1   SF_COMMAND_SETUP: PROC ALTRET ;
      151     5503
      152     5504    2      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      153     5505    2      DCL OUTBLK$                    PTR ALIGNED ;
      154     5506           %PARSE$OUT (STCLASS = BASED) ;
      155     5551           %PARSE$SYM (STCLASS = BASED) ;
      156     5589
      157     5590        /* Code */
      158     5591
      159     5592    2      SHOW_ALL = %TRUE ;
      160     5593    2      OBJECT_KEY.DATA = 'the entire deckfile' ;
      161     5594    3      DO OUTBLK# = 0 TO DUP.CMD$ -> OUT$BLK.NSUBLKS - 1 ;
      162     5595    3         OUTBLK$ = DUP.CMD$ -> OUT$BLK.SUBLK$(OUTBLK#) ;
      163     5596    4         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;
      164     5597    4            CASE (%LOGSRCH_STRING) ;
      165     5598    4               OBJECT_KEY.DATA = OUTBLK$ -> OUT$SYM.TEXT ;
      166     5599    4               CMPR_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;
      167     5600    4               SHOW_ALL = %FALSE ;
      168     5601    4            CASE (%DECKFILE_FID) ;
      169     5602    4               DUP.DF.ENTERED = %TRUE ;
      170     5603    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;
      171     5604    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;
      172     5605    4               CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;
      173     5606    4         END /* CASE */ ;
      174     5607    3      END /* DO */ ;
      175     5608
      176     5609    2      IF DUP.DF.ENTERED
      177     5610    2      THEN /* FID set from DEER command */ ;
      178     5611    2      ELSE CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;
      179     5612    2      RETURN ;
      180     5613
      181     5614    2   ERROR:
      182     5615    2      ALTRETURN ;
      183     5616
      184     5617    2   END SF_COMMAND_SETUP ;
      185     5618        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:7    
      186     5619        /*I*  NAME:        SF_SHOW_LOG
      187     5620              AUTHOR:      Scott S. Sheppard
      188     5621              PURPOSE:     prints all history log records
      189     5622              INTERFACE:   SF_WRITE_MSG
      190     5623              INPUT:       LOG_B
      191     5624              OUTPUT:      Records are routed through SF_WRITE_MSG
      192     5625                           LOG#
      193     5626              DESCRIPTION: This procedure is a driver routine used to step
      194     5627                           through  the  records of the  deckfile  history
      195     5628                           log and print all of the records.
      196     5629        */
      197     5630
      198     5631    1   SF_SHOW_LOG: PROC ALTRET ;
      199     5632
      200     5633    2      DCL MSG_CODE UBIN WORD ALIGNED ;
      201     5634
      202     5635        /* Code */
      203     5636
      204     5637    2      DUP.BREAK_TERMINATE = %TRUE ;
      205     5638    2      CALL SF_WRITE_MSG (%T$SD_SEPARATOR) ALTRET (ERROR) ;
      206     5639    2      CALL SF_WRITE_MSG (%T$SF_SITE) ALTRET (ERROR) ;
      207     5640    3      DO LOG# = 0 TO LOG_B.COUNT - 1 ;
      208     5641    3         MSG_CODE = LOG_B.ACCESSES.TYPE(LOG#) ;
      209     5642    3         CALL SF_WRITE_MSG (MSG_CODE) ALTRET (ERROR) ;
      210     5643    3      END /* DO */ ;
      211     5644    2      CALL SF_WRITE_MSG (%T$SD_SEPARATOR) ALTRET (ERROR) ;
      212     5645    2      DUP.BREAK_TERMINATE = %FALSE ;
      213     5646    2      RETURN ;
      214     5647
      215     5648    2   ERROR:
      216     5649    2      DUP.BREAK_TERMINATE = %FALSE ;
      217     5650    2      ALTRETURN ;
      218     5651
      219     5652    2   END SF_SHOW_LOG ;
      220     5653        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:8    
      221     5654        /*I*  NAME:        SF_SHOW_MATCHES
      222     5655              AUTHOR:      Scott S. Sheppard
      223     5656              PURPOSE:     prints requested history log records
      224     5657              INTERFACE:   SF_CHECK_MATCH
      225     5658                           SF_WRITE_MSG
      226     5659                           TOU$DU_USER_WRITE
      227     5660              INPUT:       LOG_B
      228     5661              OUTPUT:      Records are routed through SF_WRITE_MSG
      229     5662                           LOG#
      230     5663              DESCRIPTION: This procedure is a driver routine used to step
      231     5664                           through  the  records of the  deckfile  history
      232     5665                           log (one record at a time)  and determine which
      233     5666                           records should be displayed.  If no records get
      234     5667                           selected, an error message is produced.
      235     5668        */
      236     5669
      237     5670    1   SF_SHOW_MATCHES: PROC ALTRET ;
      238     5671
      239     5672    2      DCL FOUND_AT_LEAST_1  BIT (1) CALIGNED ;
      240     5673    2      DCL MSG_CODE          UBIN WORD ALIGNED ;
      241     5674           %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:9    
      242     5675        /* Code */
      243     5676
      244     5677    2      DUP.BREAK_TERMINATE = %TRUE ;
      245     5678    2      FOUND_AT_LEAST_1 = %FALSE ;
      246     5679    3      DO LOG# = 0 TO LOG_B.COUNT - 1 ;
      247     5680    3         CALL SF_CHECK_MATCH (LOG#) WHENRETURN
      248     5681    4              DO ;
      249     5682    4                 IF FOUND_AT_LEAST_1
      250     5683    4                 THEN /* Don't write the header. */ ;
      251     5684    4                 ELSE CALL SF_WRITE_MSG (%T$SD_SEPARATOR) ;
      252     5685    4                 MSG_CODE = LOG_B.ACCESSES.TYPE(LOG#) ;
      253     5686    4                 CALL SF_WRITE_MSG (MSG_CODE) ALTRET (ERROR) ;
      254     5687    4                 FOUND_AT_LEAST_1 = %TRUE ;
      255     5688    4              END /* WHENRETURN */ ;
      256     5689    3      END /* DO */ ;
      257     5690    2      IF FOUND_AT_LEAST_1
      258     5691    3      THEN DO ;
      259     5692    3              CALL SF_WRITE_MSG (%T$SD_SEPARATOR) ALTRET (ERROR) ;
      260     5693    3              DUP.BREAK_TERMINATE = %FALSE ;
      261     5694    3              RETURN ;
      262     5695    3           END /* THEN */ ;
      263     5696    3      ELSE DO ;
      264     5697    3              DUP.MSG_CODE = %E$SSM_NO_MATCHES ;
      265     5698    3              CALL TOU$DU_USER_WRITE ;
      266     5699    3   ERROR:
      267     5700    3              DUP.BREAK_TERMINATE = %FALSE ;
      268     5701    3              ALTRETURN ;
      269     5702    3           END /* ELSE */ ;
      270     5703
      271     5704        /* END SF_SHOW_MATCHES */
      272     5705        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:10   
      273     5706        /*I*  NAME:        SF_CHECK_MATCH
      274     5707              AUTHOR:      Scott S. Sheppard
      275     5708              PURPOSE:     determines if an entry should be printed
      276     5709              INTERFACE:   INDEX function
      277     5710              INPUT:       LOG#
      278     5711                           OBJECT_KEY.DATA
      279     5712                           CMPR_LGTH
      280     5713                           LOG_B.ACCESSES.CATALOG
      281     5714                           LOG_B.ACCESSES.DECK
      282     5715                           LOG_B.ACCESSES.IFAD
      283     5716              OUTPUT:      RETURN | ALTRETURN indicates match or not
      284     5717              DESCRIPTION: This procedure determines if an entry in the
      285     5718                           history log should be displayed.  The search
      286     5719                           string entered as part of the SF command  is
      287     5720                           tested against the catalog affected,  object
      288     5721                           deck affected, and IFAD file used   for  the
      289     5722                           history entry to see if the search string is
      290     5723                           a substring of one of the tested items.   If
      291     5724                           the search string is a subset of any of  the
      292     5725                           items the procedure does a normal return. If
      293     5726                           the search string is not found in all of the
      294     5727                           items this procedure altreturns.
      295     5728        */
      296     5729
      297     5730    2   SF_CHECK_MATCH: PROC (LOG#) ALTRET ;
      298     5731
      299     5732    3      DCL LOG#     UBIN WORD ALIGNED ;
      300     5733    3      DCL FOUND    UBIN WORD ALIGNED ;
      301     5734           %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:11   
      302     5735        /* Code */
      303     5736
      304     5737           /* Is search string a subset of the affected catalog? */
      305     5738    3      CALL INDEX (FOUND,
      306     5739    3              SUBSTR (OBJECT_KEY.DATA, 0, CMPR_LGTH),
      307     5740    3              LOG_B.ACCESSES.CATALOG(LOG#), 0) WHENRETURN
      308     5741    4           DO ;
      309     5742    4              RETURN ;
      310     5743    4           END /* WHENRETURN */ ;
      311     5744
      312     5745           /* Is search string a subset of the affected object deck? */
      313     5746    3      CALL INDEX (FOUND,
      314     5747    3              SUBSTR (OBJECT_KEY.DATA, 0, CMPR_LGTH),
      315     5748    3              LOG_B.ACCESSES.DECK(LOG#), 0) WHENRETURN
      316     5749    4           DO ;
      317     5750    4              RETURN ;
      318     5751    4           END /* WHENRETURN */ ;
      319     5752
      320     5753           /* Is search string a subset of the IFAD fid used? */
      321     5754    3      CALL INDEX (FOUND,
      322     5755    3              SUBSTR (OBJECT_KEY.DATA, 0, CMPR_LGTH),
      323     5756    3              LOG_B.ACCESSES.IFAD(LOG#), 0) WHENRETURN
      324     5757    4           DO ;
      325     5758    4              RETURN ;
      326     5759    4           END /* WHENRETURN */ ;
      327     5760
      328     5761           /* The search string was not contained in the history log entry. */
      329     5762    3      ALTRETURN ;
      330     5763
      331     5764    3   END SF_CHECK_MATCH ;
      332     5765    2   END SF_SHOW_MATCHES ;
      333     5766        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:12   
      334     5767        /*I*  NAME:        SF_WRITE_MSG
      335     5768              AUTHOR:      Scott S. Sheppard
      336     5769              PURPOSE:     Routes output to proper routine
      337     5770              INTERFACE:   TOU$DU_USER_WRITE
      338     5771                           TOU$DU_PRINTER_WRITE
      339     5772              INPUT:       DUP.BATCH_MODE
      340     5773                           MSG_CODE
      341     5774              OUTPUT:      DUP.MSG_CODE
      342     5775              DESCRIPTION: This procedure causes a SHOWFILE request to be
      343     5776                           printed on the user's terminal in on-line mode
      344     5777                           and on the edit listing in batch.
      345     5778        */
      346     5779
      347     5780    1   SF_WRITE_MSG: PROC (MSG_CODE) ALTRET ;
      348     5781
      349     5782    2      DCL MSG_CODE UBIN WORD ALIGNED ;
      350     5783
      351     5784        /* Code */
      352     5785
      353     5786    2      DUP.MSG_CODE = MSG_CODE ;
      354     5787    2      IF DUP.BATCH_MODE
      355     5788    2      THEN CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;
      356     5789    2      ELSE CALL TOU$DU_USER_WRITE ;
      357     5790    2      RETURN ;
      358     5791
      359     5792    2   ERROR:
      360     5793    2      ALTRETURN ;
      361     5794
      362     5795    2   END SF_WRITE_MSG ;
      363     5796    1   END TOU$SHOWFILE ;

PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:13   
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOU_RQSTS_E.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
      No diagnostics issued in procedure TOU$SHOWFILE.

   Procedure TOU$SHOWFILE requires 300 words for executable code.
   Procedure TOU$SHOWFILE requires 16 words of local(AUTO) storage.

    No errors detected in file TOU$SHOWFILE.:E05TSI    .

PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:14   

 Object Unit name= TOU$SHOWFILE                               File name= TOU$SHOWFILE.:E05TOU
 UTS= JUL 30 '97 06:51:52.60 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     1      1  TOU$SHOWFILE
    1  RoData even  UTS      5      5  TOU$SHOWFILE
    2   Proc  even  none   300    454  TOU$SHOWFILE
    3  RoData even  none     5      5  TOU$SHOWFILE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  TOU$SHOWFILE

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  LOG#
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:15   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       0 TOU$DU_GET_SITE
 yes     yes           Std       0 TOU$DU_CLOSE_DF
         yes           Std       0 TOU$L_SHOW_DCB
 yes     yes           Std       0 TOU$DU_OPEN_DF
 yes     yes           Std       0 TOU$DFU_DF_RD_LOG
 yes     yes           Std       0 TOU$DU_USER_WRITE
 yes     yes           Std       0 TOU$DU_SET_DF_FID
 yes     yes           Std       0 TOU$DU_PRINTER_WRITE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_INDEX

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     DUP                                   OBJECT_KEY                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:16   


        1        1        /*M* TOU$SHOWFILE     DEckfile Editor Routine SHOWFILE Function */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P*  NAME:        TOU$SHOWFILE
       12       12              AUTHOR:      Scott S. Sheppard
       13       13              PURPOSE:     DEckfile Editor Routine SHOWFILE Function
       14       14              DESCRIPTION: This program is called when the SHOWFILE function
       15       15                           is invoked by the  CP-6  deckfile editor  driver.
       16       16                           This program shows  the  deckfile history log  to
       17       17                           user or prints it to the edit listing,  depending
       18       18                           on the run mode (batch or on-line).
       19       19              REFERENCE:   CP-6 Release C0M0
       20       20              LAST UPDATE: 10/27/83
       21       21        */
       22       22
       23       23        /*F*  NAME:        TOU$SHOWFILE
       24       24              DESCRIPTION: Procedure Nesting Hierarchy
       25       25
       26       26              TOU$SHOWFILE: procedure
       27       27                 SF_INIT_DUP: procedure
       28       28                 SF_COMMAND_SETUP: procedure ALTRET
       29       29                 SF_SHOW_LOG: procedure ALTRET
       30       30                 SF_SHOW_MATCHES: procedure ALTRET
       31       31                    SF_CHECK_MATCH: procedure (LOG#) ALTRET
       32       32                 SF_WRITE_MSG: procedure ALTRET
       33       33        */
       34       34        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:17   
       35       35        TOU$SHOWFILE: PROC ;

     35  2 000000   000000 700200 xent  TOU$SHOWFILE TSX0  ! X66_AUTO_0
         2 000001   000020 000000                    ZERO    16,0

       36       36
       37       37        /* Include Files */
       38       38
       39       39           %INCLUDE TOU_DEER_M ;
       40     1450           %INCLUDE TOU_RQSTS_E ;
       41     1525           %INCLUDE TO_PERR_C ;
       42     2110           %INCLUDE XU_MACRO_C ;
       43     5216
       44     5217        /* Macros */
       45     5218
       46     5219           %DUP (STCLASS = SYMREF) ;
       47     5362           %LOG_B (STCLASS = "BASED (DUP.LOG_V.PTR$)") ;
       48     5388           %OBJECT_KEY (STCLASS = SYMREF) ;
       49     5401
       50     5402        /* Variables */
       51     5403
       52     5404    1      DCL LOG#           UBIN WORD STATIC SYMDEF ALIGNED INIT (0) ;
       53     5405    1      DCL SHOW_ALL       BIT (1) CALIGNED ;
       54     5406    1      DCL CMPR_LGTH      UBIN WORD ALIGNED ;
       55     5407
       56     5408        /* External Entry Points */
       57     5409
       58     5410    1      DCL TOU$DU_SET_DF_FID              ENTRY ALTRET ;
       59     5411    1      DCL TOU$DU_OPEN_DF                 ENTRY ALTRET ;
       60     5412    1      DCL TOU$DU_CLOSE_DF                ENTRY ALTRET ;
       61     5413
       62     5414    1      DCL TOU$DU_USER_WRITE              ENTRY ALTRET ;
       63     5415    1      DCL TOU$DU_PRINTER_WRITE           ENTRY ALTRET ;
       64     5416    1      DCL TOU$DU_GET_SITE                ENTRY ALTRET ;
       65     5417
       66     5418    1      DCL TOU$DFU_DF_RD_LOG              ENTRY ALTRET ;
       67     5419    1      DCL TOU$L_SHOW_DCB                 ENTRY ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:18   
       68     5420           %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:19   
       69     5421        /* ********************
       70     5422           ********************
       71     5423           **  Main Program  **
       72     5424           ********************
       73     5425           ******************** */
       74     5426
       75     5427    1      CALL SF_INIT_DUP ;

   5427  2 000002   000053 701000 2                  TSX1    SF_INIT_DUP
         2 000003   000000 011000                    NOP     0

       76     5428    1      CALL SF_COMMAND_SETUP ALTRET (ERROR_RETURN) ;

   5428  2 000004   000070 701000 2                  TSX1    SF_COMMAND_SETUP
         2 000005   000042 702000 2                  TSX2    ERROR_RETURN

       77     5429    1      CALL TOU$L_SHOW_DCB ;

   5429  2 000006   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000007   000000 701000 xent               TSX1    TOU$L_SHOW_DCB
         2 000010   000000 011000                    NOP     0

       78     5430    1      CALL TOU$DU_GET_SITE ALTRET (ERROR_RETURN) ;

   5430  2 000011   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000012   000000 701000 xent               TSX1    TOU$DU_GET_SITE
         2 000013   000042 702000 2                  TSX2    ERROR_RETURN

       79     5431
       80     5432    1      CALL TOU$DU_OPEN_DF ALTRET (ERROR_RETURN) ;

   5432  2 000014   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000015   000000 701000 xent               TSX1    TOU$DU_OPEN_DF
         2 000016   000042 702000 2                  TSX2    ERROR_RETURN

       81     5433    1      CALL TOU$DFU_DF_RD_LOG ALTRET (ERROR_RETURN) ;

PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:20   
   5433  2 000017   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000020   000000 701000 xent               TSX1    TOU$DFU_DF_RD_LOG
         2 000021   000042 702000 2                  TSX2    ERROR_RETURN

       82     5434    1      IF SHOW_ALL

   5434  2 000022   200003 234100                    SZN     SHOW_ALL,,AUTO
         2 000023   000027 605000 2                  TPL     s:5436

       83     5435    1      THEN CALL SF_SHOW_LOG ALTRET (ERROR_RETURN) ;

   5435  2 000024   000172 701000 2                  TSX1    SF_SHOW_LOG
         2 000025   000042 702000 2                  TSX2    ERROR_RETURN
         2 000026   000031 710000 2                  TRA     s:5437

       84     5436    1      ELSE CALL SF_SHOW_MATCHES ALTRET (ERROR_RETURN) ;

   5436  2 000027   000250 701000 2                  TSX1    SF_SHOW_MATCHES
         2 000030   000042 702000 2                  TSX2    ERROR_RETURN

       85     5437    1      CALL TOU$DU_CLOSE_DF ALTRET (ERROR_RETURN) ;

   5437  2 000031   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000032   000000 701000 xent               TSX1    TOU$DU_CLOSE_DF
         2 000033   000042 702000 2                  TSX2    ERROR_RETURN

       86     5438
       87     5439        /* NORMAL_RETURN: */
       88     5440    1      DUP.MSG_CODE = %T$SF_SUCCESS;

   5440  2 000034   000106 235007                    LDA     70,DL
         2 000035   000020 755000 xsym               STA     DUP+16

       89     5441    1      CALL TOU$DU_USER_WRITE ;

   5441  2 000036   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000037   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:21   
         2 000040   000000 011000                    NOP     0

       90     5442    1      RETURN ;

   5442  2 000041   000000 702200 xent               TSX2  ! X66_ARET

       91     5443
       92     5444    1   ERROR_RETURN:
       93     5445    1      CALL TOU$DU_CLOSE_DF ;

   5445  2 000042   000002 631400 xsym  ERROR_RETURN EPPR1   B_VECTNIL+2
         2 000043   000000 701000 xent               TSX1    TOU$DU_CLOSE_DF
         2 000044   000000 011000                    NOP     0

       94     5446    1      DUP.MSG_CODE = %T$SF_FAILURE;

   5446  2 000045   000107 235007                    LDA     71,DL
         2 000046   000020 755000 xsym               STA     DUP+16

       95     5447    1      CALL TOU$DU_USER_WRITE ;

   5447  2 000047   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000050   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000051   000000 011000                    NOP     0

       96     5448    1      RETURN ;

   5448  2 000052   000000 702200 xent               TSX2  ! X66_ARET

       97     5449
       98     5450        /* ********************
       99     5451           ********************
      100     5452           **  End Of  Main  **
      101     5453           ********************
      102     5454           ******************** */
      103     5455        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:22   
      104     5456        /*I*  NAME:        SF_INIT_DUP
      105     5457              AUTHOR:      Scott S. Sheppard
      106     5458              PURPOSE:     Initilization
      107     5459              INTERFACE:   None called.
      108     5460              INPUT:       Set of system equates.
      109     5461              OUTPUT:      DUP
      110     5462              DESCRIPTION: This procedure initializes variables to
      111     5463                           appropriate starting values.
      112     5464        */
      113     5465
      114     5466    1   SF_INIT_DUP: PROC ;

   5466  2 000053   200006 741300       SF_INIT_DUP  STX1  ! CMPR_LGTH+2,,AUTO

      115     5467
      116     5468        /* Code */
      117     5469
      118     5470    2      DUP.HDR_CODE = %H$SHOWFILE ;

   5470  2 000054   001344 235007                    LDA     740,DL
         2 000055   000021 755000 xsym               STA     DUP+17

      119     5471    2      DUP.FORCE_NEW_PAGE = %TRUE ;

   5471  2 000056   400000 236003                    LDQ     -131072,DU
         2 000057   000056 756000 xsym               STQ     DUP+46

      120     5472    2      DUP.DF.ENTERED = %FALSE ;

   5472  2 000060   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000061   000104 356000 xsym               ANSQ    DUP+68

      121     5473    2      DUP.DF.OPEN_TYPE = %READ_FILE ;

   5473  2 000062   000002 235007                    LDA     2,DL
         2 000063   000105 755000 xsym               STA     DUP+69

PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:23   
      122     5474    2      DUP.DF.REPORT_ERROR = %TRUE ;

   5474  2 000064   400000 236007                    LDQ     -131072,DL
         2 000065   000104 256000 xsym               ORSQ    DUP+68

      123     5475    2      DUP.DF.CLOSE_TYPE = %SAVE_FILE ;

   5475  2 000066   000106 450000 xsym               STZ     DUP+70

      124     5476    2      RETURN ;

   5476  2 000067   000001 702211                    TSX2  ! 1,X1

      125     5477
      126     5478    2   END SF_INIT_DUP ;
      127     5479        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:24   
      128     5480        /*I*  NAME:        SF_COMMAND_SETUP
      129     5481              AUTHOR:      Scott S. Sheppard
      130     5482              PURPOSE:     Sets up SHOWFILE Command
      131     5483              INTERFACE:   TOU$DU_SET_DF_FID
      132     5484              INPUT:       DUP.CMD$ - pointer to the parse control block
      133     5485              OUTPUT:      DUP.DF.HOLD_AREA
      134     5486                           DUP.DF.HOLD_AREA_LGTH
      135     5487                           OBJECT_KEY.DATA
      136     5488                           CMPR_LGTH
      137     5489                           DUP.DF.ENTERED
      138     5490                           SHOW_ALL
      139     5491              DESCRIPTION: This procedure sets up the SHOWFILE command  from
      140     5492                           the information entered by the user.DUP.CMD$ is a
      141     5493                           pointer to a   parse control block  that contains
      142     5494                           the tokens entered by the user.
      143     5495                           COMMAND FORMS:
      144     5496              Case 1: SF
      145     5497              Case 2: SF <search string>
      146     5498              Case 3: SF FROM <deckfile fid>
      147     5499              Case 4: SF <search string> FROM <deckfile fid>
      148     5500        */
      149     5501        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:25   
      150     5502    1   SF_COMMAND_SETUP: PROC ALTRET ;

   5502  2 000070   200006 741300       SF_COMMAND_* STX1  ! CMPR_LGTH+2,,AUTO

      151     5503
      152     5504    2      DCL OUTBLK#                    UBIN WORD ALIGNED ;
      153     5505    2      DCL OUTBLK$                    PTR ALIGNED ;
      154     5506           %PARSE$OUT (STCLASS = BASED) ;
      155     5551           %PARSE$SYM (STCLASS = BASED) ;
      156     5589
      157     5590        /* Code */
      158     5591
      159     5592    2      SHOW_ALL = %TRUE ;

   5592  2 000071   400000 236003                    LDQ     -131072,DU
         2 000072   200003 756100                    STQ     SHOW_ALL,,AUTO

      160     5593    2      OBJECT_KEY.DATA = 'the entire deckfile' ;

   5593  2 000073   040000 100400                    MLR     fill='040'O
         2 000074   000000 000023 1                  ADSC9   0                        cn=0,n=19
         2 000075   000000 200027 xsym               ADSC9   OBJECT_KEY               cn=1,n=23

      161     5594    3      DO OUTBLK# = 0 TO DUP.CMD$ -> OUT$BLK.NSUBLKS - 1 ;

   5594  2 000076   200007 450100                    STZ     OUTBLK#,,AUTO
         2 000077   000153 710000 2                  TRA     s:5607+3

      162     5595    3         OUTBLK$ = DUP.CMD$ -> OUT$BLK.SUBLK$(OUTBLK#) ;

   5595  2 000100   000017 470400 xsym               LDP0    DUP+15
         2 000101   200007 720100                    LXL0    OUTBLK#,,AUTO
         2 000102   000003 236110                    LDQ     3,X0,PR0
         2 000103   200010 756100                    STQ     OUTBLK$,,AUTO

      163     5596    4         DO CASE (OUTBLK$ -> OUT$BLK.CODE) ;

PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:26   
   5596  2 000104   200010 471500                    LDP1    OUTBLK$,,AUTO
         2 000105   100000 236100                    LDQ     0,,PR1
         2 000106   777777 376007                    ANQ     -1,DL
         2 000107   000004 136007                    SBLQ    4,DL
         2 000110   000004 116007                    CMPQ    4,DL
         2 000111   000113 602006 2                  TNC     s:5596+7,QL
         2 000112   000150 710000 2                  TRA     s:5607
         2 000113   000132 710000 2                  TRA     s:5602
         2 000114   000150 710000 2                  TRA     s:5607
         2 000115   000150 710000 2                  TRA     s:5607
         2 000116   000117 710000 2                  TRA     s:5598

      164     5597    4            CASE (%LOGSRCH_STRING) ;

      165     5598    4               OBJECT_KEY.DATA = OUTBLK$ -> OUT$SYM.TEXT ;

   5598  2 000117   100004 236100                    LDQ     4,,PR1
         2 000120   000033 772000                    QRL     27
         2 000121   000000 621006                    EAX1    0,QL
         2 000122   040000 100540                    MLR     fill='040'O
         2 000123   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         2 000124   000000 200027 xsym               ADSC9   OBJECT_KEY               cn=1,n=23

      166     5599    4               CMPR_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;

   5599  2 000125   100004 236100                    LDQ     4,,PR1
         2 000126   000033 772000                    QRL     27
         2 000127   200004 756100                    STQ     CMPR_LGTH,,AUTO

      167     5600    4               SHOW_ALL = %FALSE ;

   5600  2 000130   200003 450100                    STZ     SHOW_ALL,,AUTO
         2 000131   000150 710000 2                  TRA     s:5607

      168     5601    4            CASE (%DECKFILE_FID) ;

      169     5602    4               DUP.DF.ENTERED = %TRUE ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:27   

   5602  2 000132   400000 236003                    LDQ     -131072,DU
         2 000133   000104 256000 xsym               ORSQ    DUP+68

      170     5603    4               DUP.HOLD_AREA = OUTBLK$ -> OUT$SYM.TEXT ;

   5603  2 000134   100004 236100                    LDQ     4,,PR1
         2 000135   000033 772000                    QRL     27
         2 000136   000000 621006                    EAX1    0,QL
         2 000137   040000 100540                    MLR     fill='040'O
         2 000140   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         2 000141   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40

      171     5604    4               DUP.HOLD_AREA_LGTH = OUTBLK$ -> OUT$SYM.COUNT ;

   5604  2 000142   100004 236100                    LDQ     4,,PR1
         2 000143   000033 772000                    QRL     27
         2 000144   000154 756000 xsym               STQ     DUP+108

      172     5605    4               CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;

   5605  2 000145   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000146   000000 701000 xent               TSX1    TOU$DU_SET_DF_FID
         2 000147   000170 702000 2                  TSX2    ERROR

      173     5606    4         END /* CASE */ ;

      174     5607    3      END /* DO */ ;

   5607  2 000150   200007 235100                    LDA     OUTBLK#,,AUTO
         2 000151   000001 035007                    ADLA    1,DL
         2 000152   200007 755100                    STA     OUTBLK#,,AUTO
         2 000153   000017 470400 xsym               LDP0    DUP+15
         2 000154   000001 236100                    LDQ     1,,PR0
         2 000155   000022 772000                    QRL     18
         2 000156   200007 116100                    CMPQ    OUTBLK#,,AUTO
         2 000157   000161 600000 2                  TZE     s:5609
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:28   
         2 000160   000100 603000 2                  TRC     s:5595

      175     5608
      176     5609    2      IF DUP.DF.ENTERED

   5609  2 000161   000104 234000 xsym               SZN     DUP+68
         2 000162   000166 604000 2                  TMI     s:5612

      177     5610    2      THEN /* FID set from DEER command */ ;
      178     5611    2      ELSE CALL TOU$DU_SET_DF_FID ALTRET (ERROR) ;

   5611  2 000163   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000164   000000 701000 xent               TSX1    TOU$DU_SET_DF_FID
         2 000165   000170 702000 2                  TSX2    ERROR

      179     5612    2      RETURN ;

   5612  2 000166   200006 221300                    LDX1  ! CMPR_LGTH+2,,AUTO
         2 000167   000001 702211                    TSX2  ! 1,X1

      180     5613
      181     5614    2   ERROR:
      182     5615    2      ALTRETURN ;

   5615  2 000170   200006 221300       ERROR        LDX1  ! CMPR_LGTH+2,,AUTO
         2 000171   000000 702211                    TSX2  ! 0,X1

      183     5616
      184     5617    2   END SF_COMMAND_SETUP ;
      185     5618        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:29   
      186     5619        /*I*  NAME:        SF_SHOW_LOG
      187     5620              AUTHOR:      Scott S. Sheppard
      188     5621              PURPOSE:     prints all history log records
      189     5622              INTERFACE:   SF_WRITE_MSG
      190     5623              INPUT:       LOG_B
      191     5624              OUTPUT:      Records are routed through SF_WRITE_MSG
      192     5625                           LOG#
      193     5626              DESCRIPTION: This procedure is a driver routine used to step
      194     5627                           through  the  records of the  deckfile  history
      195     5628                           log and print all of the records.
      196     5629        */
      197     5630
      198     5631    1   SF_SHOW_LOG: PROC ALTRET ;

   5631  2 000172   200006 741300       SF_SHOW_LOG  STX1  ! CMPR_LGTH+2,,AUTO

      199     5632
      200     5633    2      DCL MSG_CODE UBIN WORD ALIGNED ;
      201     5634
      202     5635        /* Code */
      203     5636
      204     5637    2      DUP.BREAK_TERMINATE = %TRUE ;

   5637  2 000173   400000 236003                    LDQ     -131072,DU
         2 000174   000155 256000 xsym               ORSQ    DUP+109

      205     5638    2      CALL SF_WRITE_MSG (%T$SD_SEPARATOR) ALTRET (ERROR) ;

   5638  2 000175   000001 236000 3                  LDQ     1
         2 000176   200013 756100                    STQ     MSG_CODE+3,,AUTO
         2 000177   000433 701000 2                  TSX1    SF_WRITE_MSG
         2 000200   000244 702000 2                  TSX2    ERROR

      206     5639    2      CALL SF_WRITE_MSG (%T$SF_SITE) ALTRET (ERROR) ;

   5639  2 000201   000003 236000 3                  LDQ     3
         2 000202   200013 756100                    STQ     MSG_CODE+3,,AUTO
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:30   
         2 000203   000433 701000 2                  TSX1    SF_WRITE_MSG
         2 000204   000244 702000 2                  TSX2    ERROR

      207     5640    3      DO LOG# = 0 TO LOG_B.COUNT - 1 ;

   5640  2 000205   000000 450000 0                  STZ     LOG#
         2 000206   000224 710000 2                  TRA     s:5643+3

      208     5641    3         MSG_CODE = LOG_B.ACCESSES.TYPE(LOG#) ;

   5641  2 000207   000000 236000 0                  LDQ     LOG#
         2 000210   000150 402007                    MPY     104,DL
         2 000211   000137 470400 xsym               LDP0    DUP+95
         2 000212   000100 101506                    MRL     fill='000'O
         2 000213   000000 200001                    ADSC9   0,Q,PR0                  cn=1,n=1
         2 000214   200007 000004                    ADSC9   MSG_CODE,,AUTO           cn=0,n=4

      209     5642    3         CALL SF_WRITE_MSG (MSG_CODE) ALTRET (ERROR) ;

   5642  2 000215   200007 631500                    EPPR1   MSG_CODE,,AUTO
         2 000216   200013 451500                    STP1    MSG_CODE+3,,AUTO
         2 000217   000433 701000 2                  TSX1    SF_WRITE_MSG
         2 000220   000244 702000 2                  TSX2    ERROR

      210     5643    3      END /* DO */ ;

   5643  2 000221   000000 235000 0                  LDA     LOG#
         2 000222   000001 035007                    ADLA    1,DL
         2 000223   000000 755000 0                  STA     LOG#
         2 000224   000137 470400 xsym               LDP0    DUP+95
         2 000225   000100 101500                    MRL     fill='000'O
         2 000226   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000227   200016 000004                    ADSC9   FOUND+2,,AUTO            cn=0,n=4
         2 000230   200016 236100                    LDQ     FOUND+2,,AUTO
         2 000231   000000 116000 0                  CMPQ    LOG#
         2 000232   000234 600000 2                  TZE     s:5644
         2 000233   000207 603000 2                  TRC     s:5641
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:31   

      211     5644    2      CALL SF_WRITE_MSG (%T$SD_SEPARATOR) ALTRET (ERROR) ;

   5644  2 000234   000001 236000 3                  LDQ     1
         2 000235   200013 756100                    STQ     MSG_CODE+3,,AUTO
         2 000236   000433 701000 2                  TSX1    SF_WRITE_MSG
         2 000237   000244 702000 2                  TSX2    ERROR

      212     5645    2      DUP.BREAK_TERMINATE = %FALSE ;

   5645  2 000240   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000241   000155 356000 xsym               ANSQ    DUP+109

      213     5646    2      RETURN ;

   5646  2 000242   200006 221300                    LDX1  ! CMPR_LGTH+2,,AUTO
         2 000243   000001 702211                    TSX2  ! 1,X1

      214     5647
      215     5648    2   ERROR:
      216     5649    2      DUP.BREAK_TERMINATE = %FALSE ;

   5649  2 000244   000031 236000 xsym  ERROR        LDQ     B_VECTNIL+25
         2 000245   000155 356000 xsym               ANSQ    DUP+109

      217     5650    2      ALTRETURN ;

   5650  2 000246   200006 221300                    LDX1  ! CMPR_LGTH+2,,AUTO
         2 000247   000000 702211                    TSX2  ! 0,X1

      218     5651
      219     5652    2   END SF_SHOW_LOG ;
      220     5653        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:32   
      221     5654        /*I*  NAME:        SF_SHOW_MATCHES
      222     5655              AUTHOR:      Scott S. Sheppard
      223     5656              PURPOSE:     prints requested history log records
      224     5657              INTERFACE:   SF_CHECK_MATCH
      225     5658                           SF_WRITE_MSG
      226     5659                           TOU$DU_USER_WRITE
      227     5660              INPUT:       LOG_B
      228     5661              OUTPUT:      Records are routed through SF_WRITE_MSG
      229     5662                           LOG#
      230     5663              DESCRIPTION: This procedure is a driver routine used to step
      231     5664                           through  the  records of the  deckfile  history
      232     5665                           log (one record at a time)  and determine which
      233     5666                           records should be displayed.  If no records get
      234     5667                           selected, an error message is produced.
      235     5668        */
      236     5669
      237     5670    1   SF_SHOW_MATCHES: PROC ALTRET ;

   5670  2 000250   200006 741300       SF_SHOW_MAT* STX1  ! CMPR_LGTH+2,,AUTO

      238     5671
      239     5672    2      DCL FOUND_AT_LEAST_1  BIT (1) CALIGNED ;
      240     5673    2      DCL MSG_CODE          UBIN WORD ALIGNED ;
      241     5674           %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:33   
      242     5675        /* Code */
      243     5676
      244     5677    2      DUP.BREAK_TERMINATE = %TRUE ;

   5677  2 000251   400000 236003                    LDQ     -131072,DU
         2 000252   000155 256000 xsym               ORSQ    DUP+109

      245     5678    2      FOUND_AT_LEAST_1 = %FALSE ;

   5678  2 000253   200007 450100                    STZ     FOUND_AT_LEAST_1,,AUTO

      246     5679    3      DO LOG# = 0 TO LOG_B.COUNT - 1 ;

   5679  2 000254   000000 450000 0                  STZ     LOG#
         2 000255   000307 710000 2                  TRA     s:5689+3

      247     5680    3         CALL SF_CHECK_MATCH (LOG#) WHENRETURN

   5680  2 000256   000004 236000 3                  LDQ     4
         2 000257   200013 756100                    STQ     MSG_CODE+3,,AUTO
         2 000260   000342 701000 2                  TSX1    SF_CHECK_MATCH
         2 000261   000304 702000 2                  TSX2    s:5689

      248     5681    4              DO ;

      249     5682    4                 IF FOUND_AT_LEAST_1

   5682  2 000262   200007 234100                    SZN     FOUND_AT_LEAST_1,,AUTO
         2 000263   000270 604000 2                  TMI     s:5685

      250     5683    4                 THEN /* Don't write the header. */ ;
      251     5684    4                 ELSE CALL SF_WRITE_MSG (%T$SD_SEPARATOR) ;

   5684  2 000264   000001 236000 3                  LDQ     1
         2 000265   200013 756100                    STQ     MSG_CODE+3,,AUTO
         2 000266   000433 701000 2                  TSX1    SF_WRITE_MSG
         2 000267   000000 011000                    NOP     0
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:34   

      252     5685    4                 MSG_CODE = LOG_B.ACCESSES.TYPE(LOG#) ;

   5685  2 000270   000000 236000 0                  LDQ     LOG#
         2 000271   000150 402007                    MPY     104,DL
         2 000272   000137 470400 xsym               LDP0    DUP+95
         2 000273   000100 101506                    MRL     fill='000'O
         2 000274   000000 200001                    ADSC9   0,Q,PR0                  cn=1,n=1
         2 000275   200010 000004                    ADSC9   MSG_CODE,,AUTO           cn=0,n=4

      253     5686    4                 CALL SF_WRITE_MSG (MSG_CODE) ALTRET (ERROR) ;

   5686  2 000276   200010 631500                    EPPR1   MSG_CODE,,AUTO
         2 000277   200013 451500                    STP1    MSG_CODE+3,,AUTO
         2 000300   000433 701000 2                  TSX1    SF_WRITE_MSG
         2 000301   000336 702000 2                  TSX2    ERROR

      254     5687    4                 FOUND_AT_LEAST_1 = %TRUE ;

   5687  2 000302   400000 236003                    LDQ     -131072,DU
         2 000303   200007 756100                    STQ     FOUND_AT_LEAST_1,,AUTO

      255     5688    4              END /* WHENRETURN */ ;

      256     5689    3      END /* DO */ ;

   5689  2 000304   000000 235000 0                  LDA     LOG#
         2 000305   000001 035007                    ADLA    1,DL
         2 000306   000000 755000 0                  STA     LOG#
         2 000307   000137 470400 xsym               LDP0    DUP+95
         2 000310   000100 101500                    MRL     fill='000'O
         2 000311   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         2 000312   200016 000004                    ADSC9   FOUND+2,,AUTO            cn=0,n=4
         2 000313   200016 236100                    LDQ     FOUND+2,,AUTO
         2 000314   000000 116000 0                  CMPQ    LOG#
         2 000315   000317 600000 2                  TZE     s:5690
         2 000316   000256 603000 2                  TRC     s:5680
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:35   

      257     5690    2      IF FOUND_AT_LEAST_1

   5690  2 000317   200007 234100                    SZN     FOUND_AT_LEAST_1,,AUTO
         2 000320   000331 605000 2                  TPL     s:5697

      258     5691    3      THEN DO ;

      259     5692    3              CALL SF_WRITE_MSG (%T$SD_SEPARATOR) ALTRET (ERROR) ;

   5692  2 000321   000001 236000 3                  LDQ     1
         2 000322   200013 756100                    STQ     MSG_CODE+3,,AUTO
         2 000323   000433 701000 2                  TSX1    SF_WRITE_MSG
         2 000324   000336 702000 2                  TSX2    ERROR

      260     5693    3              DUP.BREAK_TERMINATE = %FALSE ;

   5693  2 000325   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000326   000155 356000 xsym               ANSQ    DUP+109

      261     5694    3              RETURN ;

   5694  2 000327   200006 221300                    LDX1  ! CMPR_LGTH+2,,AUTO
         2 000330   000001 702211                    TSX2  ! 1,X1

      262     5695    3           END /* THEN */ ;
      263     5696    3      ELSE DO ;

      264     5697    3              DUP.MSG_CODE = %E$SSM_NO_MATCHES ;

   5697  2 000331   000644 235007                    LDA     420,DL
         2 000332   000020 755000 xsym               STA     DUP+16

      265     5698    3              CALL TOU$DU_USER_WRITE ;

   5698  2 000333   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000334   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:36   
         2 000335   000000 011000                    NOP     0

      266     5699    3   ERROR:
      267     5700    3              DUP.BREAK_TERMINATE = %FALSE ;

   5700  2 000336   000031 236000 xsym  ERROR        LDQ     B_VECTNIL+25
         2 000337   000155 356000 xsym               ANSQ    DUP+109

      268     5701    3              ALTRETURN ;

   5701  2 000340   200006 221300                    LDX1  ! CMPR_LGTH+2,,AUTO
         2 000341   000000 702211                    TSX2  ! 0,X1

      269     5702    3           END /* ELSE */ ;
      270     5703
      271     5704        /* END SF_SHOW_MATCHES */
      272     5705        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:37   
      273     5706        /*I*  NAME:        SF_CHECK_MATCH
      274     5707              AUTHOR:      Scott S. Sheppard
      275     5708              PURPOSE:     determines if an entry should be printed
      276     5709              INTERFACE:   INDEX function
      277     5710              INPUT:       LOG#
      278     5711                           OBJECT_KEY.DATA
      279     5712                           CMPR_LGTH
      280     5713                           LOG_B.ACCESSES.CATALOG
      281     5714                           LOG_B.ACCESSES.DECK
      282     5715                           LOG_B.ACCESSES.IFAD
      283     5716              OUTPUT:      RETURN | ALTRETURN indicates match or not
      284     5717              DESCRIPTION: This procedure determines if an entry in the
      285     5718                           history log should be displayed.  The search
      286     5719                           string entered as part of the SF command  is
      287     5720                           tested against the catalog affected,  object
      288     5721                           deck affected, and IFAD file used   for  the
      289     5722                           history entry to see if the search string is
      290     5723                           a substring of one of the tested items.   If
      291     5724                           the search string is a subset of any of  the
      292     5725                           items the procedure does a normal return. If
      293     5726                           the search string is not found in all of the
      294     5727                           items this procedure altreturns.
      295     5728        */
      296     5729
      297     5730    2   SF_CHECK_MATCH: PROC (LOG#) ALTRET ;

   5730  2 000342   200012 741300       SF_CHECK_MA* STX1  ! MSG_CODE+2,,AUTO

      298     5731
      299     5732    3      DCL LOG#     UBIN WORD ALIGNED ;
      300     5733    3      DCL FOUND    UBIN WORD ALIGNED ;
      301     5734           %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:38   
      302     5735        /* Code */
      303     5736
      304     5737           /* Is search string a subset of the affected catalog? */
      305     5738    3      CALL INDEX (FOUND,

   5738  2 000343   200013 470500                    LDP0    @LOG#,,AUTO
         2 000344   000000 236100                    LDQ     0,,PR0
         2 000345   000150 402007                    MPY     104,DL
         2 000346   200014 631500                    EPPR1   FOUND,,AUTO
         2 000347   000000 633400 xsym               EPPR3   OBJECT_KEY
         2 000350   000001 220003                    LDX0    1,DU
         2 000351   300000 500510                    A9BD    0,X0,PR3
         2 000352   200004 723100                    LXL3    CMPR_LGTH,,AUTO
         2 000353   000137 470400 xsym               LDP0    DUP+95
         2 000354   200016 756100                    STQ     FOUND+2,,AUTO
         2 000355   000025 036007                    ADLQ    21,DL
         2 000356   000000 500506                    A9BD    0,QL,PR0
         2 000357   000025 220003                    LDX0    21,DU
         2 000360   000000 236003                    LDQ     0,DU
         2 000361   000000 701000 xent               TSX1    X66_INDEX
         2 000362   000365 710000 2                  TRA     s:5746

      306     5739    3              SUBSTR (OBJECT_KEY.DATA, 0, CMPR_LGTH),
      307     5740    3              LOG_B.ACCESSES.CATALOG(LOG#), 0) WHENRETURN
      308     5741    4           DO ;

      309     5742    4              RETURN ;

   5742  2 000363   200012 221300                    LDX1  ! MSG_CODE+2,,AUTO
         2 000364   000001 702211                    TSX2  ! 1,X1

      310     5743    4           END /* WHENRETURN */ ;
      311     5744
      312     5745           /* Is search string a subset of the affected object deck? */
      313     5746    3      CALL INDEX (FOUND,

   5746  2 000365   200013 470500                    LDP0    @LOG#,,AUTO
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:39   
         2 000366   000000 236100                    LDQ     0,,PR0
         2 000367   000150 402007                    MPY     104,DL
         2 000370   200014 631500                    EPPR1   FOUND,,AUTO
         2 000371   000000 633400 xsym               EPPR3   OBJECT_KEY
         2 000372   000001 220003                    LDX0    1,DU
         2 000373   300000 500510                    A9BD    0,X0,PR3
         2 000374   200004 723100                    LXL3    CMPR_LGTH,,AUTO
         2 000375   000137 470400 xsym               LDP0    DUP+95
         2 000376   200016 756100                    STQ     FOUND+2,,AUTO
         2 000377   000052 036007                    ADLQ    42,DL
         2 000400   000000 500506                    A9BD    0,QL,PR0
         2 000401   000027 220003                    LDX0    23,DU
         2 000402   000000 236003                    LDQ     0,DU
         2 000403   000000 701000 xent               TSX1    X66_INDEX
         2 000404   000407 710000 2                  TRA     s:5754

      314     5747    3              SUBSTR (OBJECT_KEY.DATA, 0, CMPR_LGTH),
      315     5748    3              LOG_B.ACCESSES.DECK(LOG#), 0) WHENRETURN
      316     5749    4           DO ;

      317     5750    4              RETURN ;

   5750  2 000405   200012 221300                    LDX1  ! MSG_CODE+2,,AUTO
         2 000406   000001 702211                    TSX2  ! 1,X1

      318     5751    4           END /* WHENRETURN */ ;
      319     5752
      320     5753           /* Is search string a subset of the IFAD fid used? */
      321     5754    3      CALL INDEX (FOUND,

   5754  2 000407   200013 470500                    LDP0    @LOG#,,AUTO
         2 000410   000000 236100                    LDQ     0,,PR0
         2 000411   000150 402007                    MPY     104,DL
         2 000412   200014 631500                    EPPR1   FOUND,,AUTO
         2 000413   000000 633400 xsym               EPPR3   OBJECT_KEY
         2 000414   000001 220003                    LDX0    1,DU
         2 000415   300000 500510                    A9BD    0,X0,PR3
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:40   
         2 000416   200004 723100                    LXL3    CMPR_LGTH,,AUTO
         2 000417   000137 470400 xsym               LDP0    DUP+95
         2 000420   200016 756100                    STQ     FOUND+2,,AUTO
         2 000421   000101 036007                    ADLQ    65,DL
         2 000422   000000 500506                    A9BD    0,QL,PR0
         2 000423   000050 220003                    LDX0    40,DU
         2 000424   000000 236003                    LDQ     0,DU
         2 000425   000000 701000 xent               TSX1    X66_INDEX
         2 000426   000431 710000 2                  TRA     s:5762

      322     5755    3              SUBSTR (OBJECT_KEY.DATA, 0, CMPR_LGTH),
      323     5756    3              LOG_B.ACCESSES.IFAD(LOG#), 0) WHENRETURN
      324     5757    4           DO ;

      325     5758    4              RETURN ;

   5758  2 000427   200012 221300                    LDX1  ! MSG_CODE+2,,AUTO
         2 000430   000001 702211                    TSX2  ! 1,X1

      326     5759    4           END /* WHENRETURN */ ;
      327     5760
      328     5761           /* The search string was not contained in the history log entry. */
      329     5762    3      ALTRETURN ;

   5762  2 000431   200012 221300                    LDX1  ! MSG_CODE+2,,AUTO
         2 000432   000000 702211                    TSX2  ! 0,X1

      330     5763
      331     5764    3   END SF_CHECK_MATCH ;
      332     5765    2   END SF_SHOW_MATCHES ;
      333     5766        %EJECT ;
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:41   
      334     5767        /*I*  NAME:        SF_WRITE_MSG
      335     5768              AUTHOR:      Scott S. Sheppard
      336     5769              PURPOSE:     Routes output to proper routine
      337     5770              INTERFACE:   TOU$DU_USER_WRITE
      338     5771                           TOU$DU_PRINTER_WRITE
      339     5772              INPUT:       DUP.BATCH_MODE
      340     5773                           MSG_CODE
      341     5774              OUTPUT:      DUP.MSG_CODE
      342     5775              DESCRIPTION: This procedure causes a SHOWFILE request to be
      343     5776                           printed on the user's terminal in on-line mode
      344     5777                           and on the edit listing in batch.
      345     5778        */
      346     5779
      347     5780    1   SF_WRITE_MSG: PROC (MSG_CODE) ALTRET ;

   5780  2 000433   200012 741300       SF_WRITE_MSG STX1  ! MSG_CODE+2,,AUTO

      348     5781
      349     5782    2      DCL MSG_CODE UBIN WORD ALIGNED ;
      350     5783
      351     5784        /* Code */
      352     5785
      353     5786    2      DUP.MSG_CODE = MSG_CODE ;

   5786  2 000434   200013 470500                    LDP0    @MSG_CODE,,AUTO
         2 000435   000000 235100                    LDA     0,,PR0
         2 000436   000020 755000 xsym               STA     DUP+16

      354     5787    2      IF DUP.BATCH_MODE

   5787  2 000437   000000 234000 xsym               SZN     DUP
         2 000440   000445 605000 2                  TPL     s:5789

      355     5788    2      THEN CALL TOU$DU_PRINTER_WRITE ALTRET (ERROR) ;

   5788  2 000441   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000442   000000 701000 xent               TSX1    TOU$DU_PRINTER_WRITE
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:42   
         2 000443   000452 702000 2                  TSX2    ERROR
         2 000444   000450 710000 2                  TRA     s:5790

      356     5789    2      ELSE CALL TOU$DU_USER_WRITE ;

   5789  2 000445   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000446   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         2 000447   000000 011000                    NOP     0

      357     5790    2      RETURN ;

   5790  2 000450   200012 221300                    LDX1  ! MSG_CODE+2,,AUTO
         2 000451   000001 702211                    TSX2  ! 1,X1

      358     5791
      359     5792    2   ERROR:
      360     5793    2      ALTRETURN ;

   5793  2 000452   200012 221300       ERROR        LDX1  ! MSG_CODE+2,,AUTO
         2 000453   000000 702211                    TSX2  ! 0,X1
      361     5794
      362     5795    2   END SF_WRITE_MSG ;
      363     5796    1   END TOU$SHOWFILE ;

PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:43   
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOU_RQSTS_E.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
      No diagnostics issued in procedure TOU$SHOWFILE.
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:44   

 **** Variables and constants ****

  ****  Section 000  Data  TOU$SHOWFILE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 LOG#

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    13-0-0/w PTR         r     1 @LOG#                     13-0-0/w PTR         r     1 @MSG_CODE
     4-0-0/w UBIN        r     1 CMPR_LGTH                 14-0-0/w UBIN        r     1 FOUND
     7-0-0/c BIT         r     1 FOUND_AT_LEAST_1          *0-0-0/w UBIN        r     1 LOG#
     7-0-0/w UBIN        r     1 MSG_CODE                  10-0-0/w UBIN        r     1 MSG_CODE
    *0-0-0/w UBIN        r     1 MSG_CODE                   7-0-0/w UBIN        r     1 OUTBLK#
    10-0-0/w PTR         r     1 OUTBLK$                    3-0-0/c BIT         r     1 SHOW_ALL

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(5220)  r     1 DUP                        0-0-0/w STRC(216)   r     1 OBJECT_KEY

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(18665) r     1 LOG_B                      0-0-0/w STRC(144)   r     1 OUT$BLK
     0-0-0/w ASTR(153)   r     1 OUT$SYM

PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:45   

   Procedure TOU$SHOWFILE requires 300 words for executable code.
   Procedure TOU$SHOWFILE requires 16 words of local(AUTO) storage.

    No errors detected in file TOU$SHOWFILE.:E05TSI    .
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:46   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:47   
          MINI XREF LISTING

CMPR_LGTH
      5406**DCL      5599<<ASSIGN   5738>>CALLBLT  5746>>CALLBLT  5754>>CALLBLT
DUP.BATCH_MODE
      5230**DCL      5787>>IF
DUP.BREAK_TERMINATE
      5346**DCL      5637<<ASSIGN   5645<<ASSIGN   5649<<ASSIGN   5677<<ASSIGN   5693<<ASSIGN   5700<<ASSIGN
DUP.CMD$
      5246**DCL      5594>>DOINDEX  5595>>ASSIGN
DUP.DF.CLOSE_TYPE
      5314**DCL      5475<<ASSIGN
DUP.DF.ENTERED
      5306**DCL      5472<<ASSIGN   5602<<ASSIGN   5609>>IF
DUP.DF.OPEN_TYPE
      5312**DCL      5473<<ASSIGN
DUP.DF.REPORT_ERROR
      5310**DCL      5474<<ASSIGN
DUP.FORCE_NEW_PAGE
      5270**DCL      5471<<ASSIGN
DUP.HDR_CODE
      5251**DCL      5470<<ASSIGN
DUP.HOLD_AREA
      5341**DCL      5603<<ASSIGN
DUP.HOLD_AREA_LGTH
      5343**DCL      5604<<ASSIGN
DUP.LOG_V
      5328**DCL      5333--REDEF
DUP.LOG_V.PTR$
      5331**DCL      5371--IMP-PTR  5640>>DOINDEX  5641>>ASSIGN   5679>>DOINDEX  5685>>ASSIGN   5738>>CALLBLT
      5746>>CALLBLT  5754>>CALLBLT
DUP.MSG_CODE
      5249**DCL      5440<<ASSIGN   5446<<ASSIGN   5697<<ASSIGN   5786<<ASSIGN
ERROR IN PROCEDURE SF_COMMAND_SETUP
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:48   
      5615**LABEL    5605--CALLALT  5611--CALLALT
ERROR IN PROCEDURE SF_SHOW_LOG
      5649**LABEL    5638--CALLALT  5639--CALLALT  5642--CALLALT  5644--CALLALT
ERROR IN PROCEDURE SF_SHOW_MATCHES
      5700**LABEL    5686--CALLALT  5692--CALLALT
ERROR IN PROCEDURE SF_WRITE_MSG
      5793**LABEL    5788--CALLALT
ERROR_RETURN
      5445**LABEL    5428--CALLALT  5430--CALLALT  5432--CALLALT  5433--CALLALT  5435--CALLALT  5436--CALLALT
      5437--CALLALT
FOUND IN PROCEDURE SF_CHECK_MATCH
      5733**DCL      5738<<CALLBLT  5746<<CALLBLT  5754<<CALLBLT
FOUND_AT_LEAST_1 IN PROCEDURE SF_SHOW_MATCHES
      5672**DCL      5678<<ASSIGN   5682>>IF       5687<<ASSIGN   5690>>IF
LOG#
      5404**DCL      5640<<DOINDEX  5641>>ASSIGN   5679<<DOINDEX  5680<>CALL     5685>>ASSIGN
LOG# IN PROCEDURE SF_CHECK_MATCH
      5732**DCL      5730--PROC     5738>>CALLBLT  5746>>CALLBLT  5754>>CALLBLT
LOG_B.ACCESSES.CATALOG
      5381**DCL      5738>>CALLBLT
LOG_B.ACCESSES.DECK
      5383**DCL      5746>>CALLBLT
LOG_B.ACCESSES.IFAD
      5385**DCL      5754>>CALLBLT
LOG_B.ACCESSES.TYPE
      5375**DCL      5641>>ASSIGN   5685>>ASSIGN
LOG_B.COUNT
      5372**DCL      5640>>DOINDEX  5679>>DOINDEX
MSG_CODE IN PROCEDURE SF_SHOW_LOG
      5633**DCL      5641<<ASSIGN   5642<>CALL
MSG_CODE IN PROCEDURE SF_SHOW_MATCHES
      5673**DCL      5685<<ASSIGN   5686<>CALL
MSG_CODE IN PROCEDURE SF_WRITE_MSG
      5782**DCL      5780--PROC     5786>>ASSIGN
OBJECT_KEY.DATA
      5399**DCL      5593<<ASSIGN   5598<<ASSIGN   5738>>CALLBLT  5746>>CALLBLT  5754>>CALLBLT
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:49   
OUT$BLK.CODE IN PROCEDURE SF_COMMAND_SETUP
      5520**DCL      5596>>DOCASE
OUT$BLK.NSUBLKS IN PROCEDURE SF_COMMAND_SETUP
      5524**DCL      5594>>DOINDEX
OUT$BLK.SUBLK$ IN PROCEDURE SF_COMMAND_SETUP
      5545**DCL      5595>>ASSIGN
OUT$SYM.COUNT IN PROCEDURE SF_COMMAND_SETUP
      5581**DCL      5584--IMP-SIZ  5598>>ASSIGN   5599>>ASSIGN   5603>>ASSIGN   5604>>ASSIGN
OUT$SYM.TEXT IN PROCEDURE SF_COMMAND_SETUP
      5584**DCL      5598>>ASSIGN   5603>>ASSIGN
OUTBLK# IN PROCEDURE SF_COMMAND_SETUP
      5504**DCL      5594<<DOINDEX  5595>>ASSIGN
OUTBLK$ IN PROCEDURE SF_COMMAND_SETUP
      5505**DCL      5595<<ASSIGN   5596>>DOCASE   5598>>ASSIGN   5598>>ASSIGN   5599>>ASSIGN   5603>>ASSIGN
      5603>>ASSIGN   5604>>ASSIGN
SF_CHECK_MATCH IN PROCEDURE SF_SHOW_MATCHES
      5730**PROC     5680--CALL
SF_COMMAND_SETUP
      5502**PROC     5428--CALL
SF_INIT_DUP
      5466**PROC     5427--CALL
SF_SHOW_LOG
      5631**PROC     5435--CALL
SF_SHOW_MATCHES
      5670**PROC     5436--CALL
SF_WRITE_MSG
      5780**PROC     5638--CALL     5639--CALL     5642--CALL     5644--CALL     5684--CALL     5686--CALL
      5692--CALL
SHOW_ALL
      5405**DCL      5434>>IF       5592<<ASSIGN   5600<<ASSIGN
TOU$DFU_DF_RD_LOG
      5418**DCL-ENT  5433--CALL
TOU$DU_CLOSE_DF
      5412**DCL-ENT  5437--CALL     5445--CALL
TOU$DU_GET_SITE
      5416**DCL-ENT  5430--CALL
PL6.E3A0      #001=TOU$SHOWFILE File=TOU$SHOWFILE.:E05TSI                        WED 07/30/97 06:51 Page:50   
TOU$DU_OPEN_DF
      5411**DCL-ENT  5432--CALL
TOU$DU_PRINTER_WRITE
      5415**DCL-ENT  5788--CALL
TOU$DU_SET_DF_FID
      5410**DCL-ENT  5605--CALL     5611--CALL
TOU$DU_USER_WRITE
      5414**DCL-ENT  5441--CALL     5447--CALL     5698--CALL     5789--CALL
TOU$L_SHOW_DCB
      5419**DCL-ENT  5429--CALL
