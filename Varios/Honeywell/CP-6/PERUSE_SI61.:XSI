/*M* PERUSE - PROGRAM TO LOOK STUFF UP IN PROOF_DIC */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
 
%SET LISTSUB='1'B;
 
 
 
 
LOOKUP: PROC (STRINGER,IQUEST);
 
%INCLUDE CP_6;
 
     %FPT_OPEN (FPTN=OPEN_PROOF,
                    DCB=M$DIC,
                    ASN=FILE,
                    NAME=FILE_N,
                    ACCT=FILE_ACCT,
                    SHARE=IN,
                    FUN=IN);
 
          %VLP_NAME (FPTN=FILE_N,
                         STCLASS="STATIC SYMDEF",
                         L=31);
 
          %VLP_ACCT (FPTN=FILE_ACCT,
                         STCLASS="STATIC SYMDEF",
                         ACCT='X');
 
     %FPT_READ (FPTN=READ_KEY,
                    DCB=M$DIC,
                    BUF=BUF_,
                    KEY=KEY_,
                    KEYR=YES);
 
     %FPT_PRECORD (FPTN=POS_KEY,
                    DCB=M$DIC,
                    KEYR = YES,
                    KEYS=YES);
 
 
DCL 1 BUF_ STATIC SYMDEF,
         2 * CHAR(2048);
 
DCL 1 KEY_ STATIC SYMDEF CALIGNED,
         2 ARS_ UBIN BYTE CALIGNED,
         2 KEYV_ CHAR(255) CALIGNED;
 
DCL KEY$ PTR STATIC SYMDEF INIT (ADDR(KEY_));
 
DCL 1 KEY BASED (KEY$),
         2 CNT_ UBIN BYTE CALIGNED,
         2 TXT_ CHAR(KEY.CNT_) CALIGNED;
 
DCL 1 OVERKEY BASED (KEY$),
         2 CNT_ UBIN BYTE CALIGNED,
         2 TXT_ (0:80) UBIN BYTE UNAL;
 
DCL STRING_ CHAR(80) STATIC SYMDEF CALIGNED;
DCL STRINGER CHAR(79);
DCL IQUEST SBIN;
 
DCL STRING$ PTR STATIC SYMDEF INIT (ADDR(STRING_));
 
DCL 1 OLDSTRING CALIGNED,
         2 CNT_ UBIN BYTE CALIGNED,
         2 TXT_ CHAR(255) CALIGNED;
 
DCL 1 STRING BASED(STRING$) CALIGNED,
         2 CNT_ UBIN BYTE CALIGNED,
         2 TXT_ CHAR(70) CALIGNED;
 
DCL 1 OVERSTRING BASED(STRING$) UNAL,
         2 NUM (0:79) UBIN BYTE UNAL;
 
DCL 1 UPPERS CONSTANT,
         2 * CHAR(32) INIT('                                '),
         2 * CHAR(32) INIT('       ''     -  0123456789      '),
         2 * CHAR(32) INIT(' ABCDEFGHIJKLMNOPQRSTUVWXYZ     '),
         2 * CHAR(32) INIT(' ABCDEFGHIJKLMNOPQRSTUVWXYZ     ');
 
DCL LLEN UBIN(1) STATIC SYMDEF INIT(0);
DCL II UBIN STATIC;
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL IPASS SBIN;
DCL LEADING BIT(1) ALIGNED STATIC SYMDEF INIT('0'B);
 
DCL M$DIC DCB;
 
DCL GET_STRING ENTRY(1);
DCL PUT_STRING ENTRY(2);
 
%INCLUDE XUW_MACRO_C;
 
     %XUW_ENTRIES;
 
     %XUW_WILDCARD;
 
%EJECT;
 
     STRING.CNT_ = 79;
     STRING.TXT_ = STRINGER;
 
     K=55;
 
     DO WHILE (SUBSTR(STRING.TXT_,K,1)=' ' AND K>0);
          K=K - 1;
        END;
 
 
     STRING.CNT_ = K + 1;
     CALL M$OPEN (OPEN_PROOF);
 
     I = 0;
     IF SUBSTR(STRING.TXT_,0,1)~='?'
     THEN
     DO;
          IF SUBSTR(STRING.TXT_, STRING.CNT_ - 1, 1)='?'
          THEN
          DO;
               STRING.CNT_ = STRING.CNT_ - 1;
               POS_KEY.KEY_ = VECTOR(STRING);
               LEADING='1'B;
             END;
          OLDSTRING.TXT_ = STRING.TXT_;
          OLDSTRING.CNT_ = STRING.CNT_;
          STRING.CNT_ = STRING.CNT_ + 1;
          OVERSTRING.NUM(STRING.CNT_) = 0;
          POS_KEY.KEY_ = VECTOR(STRING);
          CALL M$PRECORD (POS_KEY)
          WHENRETURN
          DO;
               K=0;
             END;
          WHENALTRETURN
          DO;
               IF OLDSTRING.TXT_ = SUBSTR(STRING.TXT_,0,OLDSTRING.CNT_)
               THEN K=0;
               ELSE DO;
                    K = 99;
                    STRING.TXT_ = OLDSTRING.TXT_;
                    STRING.CNT_ = OLDSTRING.CNT_;
                  END;
             END;
          IF K=0 AND IQUEST=0
          THEN
          DO;
               IF OVERSTRING.NUM(STRING.CNT_) = 1 THEN
                    OVERSTRING.NUM(1) = OVERSTRING.NUM(1) - 32;
               IF OVERSTRING.NUM(STRING.CNT_) = 2 THEN
                    CALL XLATE(STRING.TXT_,UPPERS,STRING.TXT_);
               IQUEST = STRING.CNT_ - 1;
               CALL PUT_STRING (STRING.TXT_, IQUEST);
               CALL PUT_STRING (KEY.TXT_,-1);
               RETURN;
             END;
          IF K=99 AND IQUEST=0
          THEN
          DO;
               CALL PUT_STRING (KEY.TXT_,-1);
               RETURN;
             END;
          IF LEADING
          THEN DO;
               STRING.TXT_ = OLDSTRING.TXT_;
               STRING.CNT_ = OLDSTRING.CNT_ + 1;
             END;
          LEADING='1'B;
          I=0;
          DO K=0 TO STRING.CNT_ - 1;
               IF SUBSTR(STRING.TXT_,K,1)='?'
               THEN
               DO;
                    LEADING='0'B;
                    IF I=0
                    THEN
                         I=K ;
                  END;
             END;
 
        END;
 
     DO WHILE('1'B);
          KEY.CNT_=60;
          KEY.TXT_=' ';
          CALL M$READ (READ_KEY)
          WHENALTRETURN
          DO;
               CALL PUT_STRING (KEY.TXT_, -1);
               RETURN;
             END;
 
 
          XUW_WILDCARD.PATTERN_ = VECTOR(STRING.TXT_);
          XUW_WILDCARD.INPUT_ = VECTOR (KEY.TXT_);
          XUW_WILDCARD.INPUT_.BOUND = KEY.CNT_ - 2;
          XUW_WILDCARD.PATTERN_.BOUND = STRING.CNT_ - 1;
 
          IF LLEN = 0 THEN GOTO SKIP;
          IF (XUW_WILDCARD.INPUT_.BOUND ~= XUW_WILDCARD.PATTERN_.BOUND) THEN
               GOTO CCCON;
 
          DO II = 0 TO XUW_WILDCARD.PATTERN_.BOUND;
               IF (SUBSTR(STRING.TXT_,II,1) ~= SUBSTR(KEY.TXT_,II,1))
                    AND (SUBSTR(STRING.TXT_,II,1) ~= '?') THEN
                    GOTO CCCON;
             END;
SKIP:
 
          CALL X$WILDCMP(XUW_WILDCARD)
          WHENRETURN
          DO;
               KEY.CNT_ = KEY.CNT_ - 1;
               IPASS = KEY.CNT_;
               IF OVERKEY.TXT_(KEY.CNT_) = 1
                    AND
                    OVERKEY.TXT_(0) > 96 /*`*/ THEN
                    OVERKEY.TXT_(0) = OVERKEY.TXT_(0) - 32;
               IF OVERKEY.TXT_(KEY.CNT_) = 2 THEN
                    CALL XLATE(KEY.TXT_,UPPERS,KEY.TXT_);
               CALL PUT_STRING (KEY.TXT_,IPASS);
             END;
          WHENALTRETURN
          DO;
               IF I>0
               THEN
               DO;
/*                  IF KEY.CNT_ >= I
                         AND   */
                    IF   SUBSTR(KEY.TXT_,0,I) > SUBSTR(STRING.TXT_,0,I)
                    THEN
                    DO;
                         CALL PUT_STRING(STRING.TXT_, -1);
                         RETURN;
                       END;
                  END;
/*             IF LEADING
               THEN
               DO;
                    CALL PUT_STRING (KEY.TXT_, -1);
                    RETURN;
                  END; */
             END;
 
CCCON:
        END;                            /* DO WHILE */
 
END LOOKUP;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
GET_WORD:PROC(STRING_, OPT1, OPT2);
 
DCL STRING_ CHAR(80);
 
     %INCLUDE CP_6;
     %INCLUDE B$JIT_C;
     %INCLUDE XU_MACRO_C;
     %INCLUDE XU_SUBS_C;
     %INCLUDE XU_PERR_C;
 
%F$DCB;
 
DCL LLEN UBIN(1) SYMREF;
DCL M$SI DCB;
DCL M$UI DCB;
DCL OPT1 SBIN;
DCL OPT2 SBIN;
DCL I SBIN;
DCL PERUSE_WORKSPACE (0:50) SBIN STATIC;
 
DCL B$JIT$ PTR SYMREF;
DCL ERRMSG ENTRY (1);
DCL X$PARSE ENTRY(1) ALTRET;
DCL PERUSE_NODES SBIN SYMREF;
 
     %P_PCB         (NAME=PERUSE_PCB,
                         STCLASS="STATIC SYMDEF",
                         R=PERUSE_NODES,
                         W=PERUSE_WORKSPACE,
                         U$=NIL,
                         WSZ=51,
                         N#=0);
 
     %PARSE$SYM     (NAME=PERUSE$SYM,
                         STCLASS="BASED");
 
     %PARSE$OUT     (NAME=PERUSE$OUTBLK,
                         STCLASS="BASED");
 
     %B$JIT0;
     %U$JIT1;
     %A$JIT6X;
 
          %VLP_NAME (FPTN=FILE_N,
                         STCLASS="SYMREF");
 
          %VLP_ACCT (FPTN=FILE_ACCT,
                         STCLASS="SYMREF");
 
     STRING_ = DCBADDR(DCBNUM(M$SI))->F$DCB.NAME#.C;
     OPT1 = 80;                         /* DEFAULT "PLATEN WIDTH" */
     OPT2 = 0;                          /* DONT SUGGEST CHANGES */
 
     IF B$JIT$->B$JIT.CCARS > B$JIT$->B$JIT.CCDISP
     THEN
     DO;                                /* MUST BE OPTIONS ON CMD LINE */
 
          PERUSE_PCB.TEXT$ = PINCRC(ADDR(B$JIT.CCBUF),B$JIT.CCDISP+1);
          PERUSE_PCB.NCHARS = B$JIT.CCARS - B$JIT.CCDISP - 1;
 
          CALL X$PARSE (PERUSE_PCB) WHENALTRETURN DO;
               CALL ERRMSG (0);
               CALL M$EXIT;
             END;                       /* DO IF ALTRETURN */
          DO I = 0 TO PERUSE_PCB.OUT$ -> PERUSE$OUTBLK.NSUBLKS - 1;
 
               DO CASE (PERUSE_PCB.OUT$ -> PERUSE$OUTBLK.SUBLK$(I) ->
                    PERUSE$OUTBLK.CODE);
 
               CASE (2);
                  OPT2 = 1;             /* SUGGEST CORRECTIONS */
 
               CASE (9);
                  LLEN = 1;
 
               CASE (1);
                  CALL CHARBIN(OPT1,
                       PERUSE_PCB.OUT$->PERUSE$OUTBLK.SUBLK$(I) ->
                       PERUSE$OUTBLK.SUBLK$(0) -> PERUSE$SYM.TEXT);
 
                  IF OPT1 > 132 THEN
                       OPT1=132;
 
                  IF OPT1<=0 THEN
                       OPT1=10;
 
               END;                     /* DO CASE ON PARSE.NCODE */
 
             END;                       /* DO I = 0 TO NSUBLKS - 1 */
        END;                            /* DO IF STUFF ON COMMAND LINE */
 
     FILE_N.NAME# = 'PROOF_DIC';
     FILE_N.L# = 9;
     IF DCBADDR(DCBNUM(M$UI))->F$DCB.AMR#
     THEN
     DO;
          FILE_N.L# = DCBADDR(DCBNUM(M$UI))->F$DCB.NAME#.L;
          FILE_N.NAME# = DCBADDR(DCBNUM(M$UI))->F$DCB.NAME#.C;
          FILE_ACCT.ACCT# = DCBADDR(DCBNUM(M$UI))->F$DCB.ACCT#;
        END;                            /* DO IF M$UI USED */
     RETURN;
END GET_WORD;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
SUGGEST: PROC (WORD_);
 
DCL WORD_ CHAR(79);
DCL WORD_TEMP CHAR(79) CALIGNED STATIC;
DCL I SBIN STATIC;
DCL WORD_L SBIN STATIC;
DCL DICT_WORD_L SBIN STATIC;
DCL MIN_ SBIN STATIC;
DCL SAVE_CHAR CHAR(1) CALIGNED STATIC;
 
DCL 1 DICT_WORD STATIC CALIGNED,
         2 LEN_ UBIN BYTE CALIGNED,
         2 TXT_ CHAR(79) CALIGNED;
 
DCL OVERWORD (0:79) REDEF DICT_WORD UBIN BYTE UNAL;
DCL CHECK UBIN BYTE UNAL;
DCL BUF_ CHAR(80) STATIC;
 
DCL 1 UPPERS CONSTANT,
         2 * CHAR(32) INIT('                                '),
         2 * CHAR(32) INIT('       ''     -  0123456789      '),
         2 * CHAR(32) INIT(' ABCDEFGHIJKLMNOPQRSTUVWXYZ     '),
         2 * CHAR(32) INIT(' ABCDEFGHIJKLMNOPQRSTUVWXYZ     ');
DCL PUT_STRING ENTRY(2);
DCL 1 STRING BASED(STRING$) CALIGNED,
         2 CNT_ UBIN BYTE CALIGNED,
         2 TXT_ CHAR(STRING.CNT_) CALIGNED;
DCL STRING$ PTR STATIC INIT (ADDR(DICT_WORD));
 
%INCLUDE CP_6;
 
DCL M$DIC DCB;
 
     %FPT_OPEN (FPTN=OPEN_PROOF,
                    DCB=M$DIC,
                    ASN=FILE,
                    NAME=FILE_N,
                    ACCT=FILE_ACCT,
                    SHARE=IN,
                    FUN=IN);
 
          %VLP_NAME (FPTN=FILE_N, STCLASS="SYMREF");
 
          %VLP_ACCT (FPTN=FILE_ACCT, STCLASS="SYMREF");
 
 
     %FPT_READ (FPTN=READ_KEY,
                    DCB=M$DIC,
                    BUF=BUF_,
                    KEY=DICT_WORD,
                    KEYR=YES);
 
     %FPT_PRECORD (FPTN=POS_KEY,
                    DCB=M$DIC,
                    KEYS=YES);
 
     DO WORD_L = 0 TO 79;
 
          IF SUBSTR(WORD_,WORD_L,1)=' '
          THEN
               EXIT;
 
        END;                            /* SIZING STRING */
 
 
     OPEN_PROOF.NAME_ = VECTOR (ADDR(FILE_N)->STRING);
     CALL M$OPEN (OPEN_PROOF)
     WHENALTRETURN
     DO;
          CALL M$MERC;
          CALL M$EXIT;
        END;
     DICT_WORD.TXT_ = SUBSTR(WORD_,0,1);
     DICT_WORD.LEN_ = 1;
     POS_KEY.KEY_ = VECTOR(STRING);
     CALL M$PRECORD (POS_KEY)
     WHENALTRETURN
     DO;
        END;
 
     DO WHILE('1'B);
 
TOP:      ;
          DICT_WORD.TXT_ = ' ';
          CALL M$READ (READ_KEY)
          WHENALTRETURN
          DO;
               CALL PUT_STRING (DICT_WORD.TXT_,-1);
               RETURN;
             END;
          DICT_WORD_L = DICT_WORD.LEN_ - 1;
          CHECK = OVERWORD(DICT_WORD.LEN_);
          OVERWORD(DICT_WORD.LEN_) = 32;
 
          IF SUBSTR(DICT_WORD.TXT_,0,1) ~= SUBSTR(WORD_,0,1)
          THEN
          DO;
               CALL PUT_STRING (DICT_WORD.TXT_,-1);
               RETURN;
             END;
 
          I = WORD_L - DICT_WORD_L;
          IF I<0                        /* "ABSOLUTE VALUE" FUNCTION */
          THEN
               I = -(I);
 
          IF I>1
          THEN
               GOTO TOP;
 
          MIN_ = MINIMUM(WORD_L,DICT_WORD_L);
 
          IF SUBSTR(WORD_,0,MIN_-1) = SUBSTR(DICT_WORD.TXT_,0,MIN_-1)
          THEN
               GOTO REPORT;
 
          DO I = 1 TO WORD_L-2;
 
               WORD_TEMP = WORD_;
               SAVE_CHAR=SUBSTR(WORD_TEMP,I,1);
               SUBSTR(WORD_TEMP,I,1)=SUBSTR(WORD_TEMP,I+1,1);
               SUBSTR(WORD_TEMP,I+1,1)=SAVE_CHAR;
 
               IF WORD_TEMP = DICT_WORD.TXT_
               THEN
                    GOTO REPORT;
 
               IF SUBSTR(WORD_TEMP,0,MIN_) = SUBSTR(DICT_WORD.TXT_,0,MIN_)
               THEN
                    GOTO REPORT;
 
             END;                       /* DO I WHILE TRANSPOSING */
 
          DO I=1 TO MIN_;
 
               IF SUBSTR(WORD_,I,1) ~= SUBSTR(DICT_WORD.TXT_,I,1)
               THEN
               DO;
 
                    IF SUBSTR(WORD_,I,MIN_-I+1) =
                         SUBSTR(DICT_WORD.TXT_,I+1,MIN_-I+1)
                    THEN
                         GOTO REPORT;
 
                    IF SUBSTR(WORD_,I+1,MIN_-I+1) =
                         SUBSTR(DICT_WORD.TXT_,I,MIN_-I+1)
                    THEN
                         GOTO REPORT;
 
                    IF SUBSTR(WORD_,I+1,MIN_-I+1) =
                         SUBSTR(DICT_WORD.TXT_,I+1,MIN_-I+1)
                    THEN
                         GOTO REPORT;
 
                    GOTO TOP;
 
                  END;
 
             END;                       /* DO SEARCHING FOR BAD CHARACTER */
 
REPORT:   ;
 
          IF CHECK = 1 AND OVERWORD(1)>96 THEN
               OVERWORD(1) = OVERWORD(1) -32;
          IF CHECK = 2 THEN
               CALL XLATE(DICT_WORD.TXT_,UPPERS,DICT_WORD.TXT_);
          CALL PUT_STRING (DICT_WORD.TXT_, DICT_WORD_L);
 
        END;                            /* DO FOREVER */
 
END SUGGEST;
