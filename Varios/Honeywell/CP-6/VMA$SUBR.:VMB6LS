VERSION B06

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:1    
        1        1        /*M* VMA$SUBR - Routines necessary to resolve addresses */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        8        8        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        9        9        /*F*
       10       10             NAME: VMA$ADDRESS
       11       11             PURPOSE:
       12       12                  To transform an ADDRESS into its internal form.
       13       13             DESCRIPTION:
       14       14                  This routine will accept a parse tree and turn it into
       15       15                  an address list.
       16       16
       17       17                  This list will then be used by VMA$EXPAND_ADDRESS.
       18       18
       19       19                  This routine has 4 parameters:
       20       20                   TREE$ - ptr to list of N addresses.
       21       21                   USER_NAME - info for defaults
       22       22                   VM_SEARCH_INFO - contains the SEARCH LIST  for resolving addresses.
       23       23                   EXPAND_FULL# - full address expansion(YES/NO) (optional. Default=NO)
       24       24              EXPAND_USER# - expand user def(YES/NO) (optional. Default=YES if EXPAND_FULL#)
       25       25        */
       26       26        VMA$ADDRESS: PROC (TREE$,USER_NAME,VM_SEARCH_INFO,EXPAND_FULL#,EXPAND_USER#) ALTRET;
       27       27        /***** Include files *****/
       28       28          %INCLUDE CP_6;
       29     5587          %INCLUDE CP_6_SUBS;
       30     6127          %INCLUDE VM_MACRO_C;
       31     7395          %INCLUDE VM_PERR_C;
       32     7690          %INCLUDE VM_SUBS_C;
       33     7950          %INCLUDE VM_DATA_R;
       34     8381          %INCLUDE VW_NODEATER_E;
       35     8437          %INCLUDE XU_MACRO_C;
       36    11543          %INCLUDE XU_SUBS_C;
       37    11635          %INCLUDE XUM_MACRO_C;
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:2    
       38    11662            %include B$TABLES_C;
       39    11770          %B$XL_UPPER(NAME=lower_UPPER);
       40    11774        /***** Parameters *****/
       41    11775    1   DCL TREE$ PTR;
       42    11776          %TEXTC (NAME=USER_NAME,STCLASS=" ");
       43    11781          %VM_SEARCH_INFO (STCLASS=" ");
       44    11808    1   DCL EXPAND_FULL# BIT(1);
       45    11809    1   DCL EXPAND_USER# BIT(1);
       46    11810        /***** Mail structures *****/
       47    11811          %VM_ADDTYPES;
       48    11815          %VM_ADD_HEAD;
       49    11844          %VM_UADDRESS (STCLASS=AUTO);
       50    11881        /***** Based structures *****/
       51    11882          %PARSE$OUT (NAME=P$B,STCLASS=BASED);
       52    11927          %PARSE$SYM (NAME=P$S,STCLASS=BASED);
       53    11965        /***** External routines *****/
       54    11966    1   DCL VMA$ADD_RENTRY ENTRY(6) ALTRET;
       55    11967    1   DCL VMA$ADD_UENTRY ENTRY(6) ALTRET;
       56    11968    1   DCL VMA$EXPAND_LIST ENTRY(5) ALTRET;
       57    11969    1   DCL VMA$EXPAND_LIST_GLOBAL ENTRY(5) ALTRET;
       58    11970    1   DCL VMA$ERRMSG ENTRY(5);
       59    11971    1   DCL VMA$GET_SITE_NAME ENTRY(4) ALTRET;
       60    11972        /***** Local variables *****/
       61    11973    1   DCL BLK1$ PTR STATIC;
       62    11974    1   DCL BLK2$ PTR STATIC;
       63    11975    1   DCL DOMAIN$ PTR;
       64    11976    1   DCL SITE$ PTR;
       65    11977    1   DCL SITETYPE UBIN;
       66    11978    1   DCL INDX1 SBIN WORD STATIC;
       67    11979    1   DCL INDX2 SBIN WORD STATIC;
       68    11980         %VLP_SN (FPTN=PSID,STCLASS=STATIC,N=1);
       69    11993          %VLP_ACCT (FPTN=ACCT,STCLASS=STATIC);
       70    12006          %VLP_NAME (FPTN=NAME,LEN=%SIZ_LISTNAME,STCLASS=STATIC);
       71    12033    1   DCL FOLDER CHAR(%SIZ_FOLDER) STATIC;
       72    12034          %VLP_PASS (FPTN=PASSWORD,STCLASS=STATIC);
       73    12047    1   DCL SITENAME CHAR(%SIZ_SITENAME) STATIC;
       74    12048          %VLP_NAME (FPTN=ERR_TEXT,LEN=31,NAME=' ');
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:3    
       75    12075    1   DCL SITE CHAR(8) STATIC;
       76    12076        /***** Error codes *****/
       77    12077          %VLP_ERRCODE (FPTN=E_BADWSN,FCG="VM",MID="A",
       78    12078                        ERR#=%E$BADWSN,STCLASS=CONSTANT);
       79    12123        /*E*    ERROR: VMA-E$BADWSN-0
       80    12124                MESSAGE: Site %U1 is undefined.
       81    12125        */
       82    12126              %VLP_ERRCODE (FPTN=E_BADDOMAIN, FCG="VM", MID="A",
       83    12127              ERR#=%E$BADDOMAIN, STCLASS=CONSTANT);
       84    12172        /*E*  ERROR: VMA-E$BADDOMAIN-0
       85    12173              MESSAGE: Domain %U1 is unknown or illegal.
       86    12174        */
       87    12175              %VLP_ERRCODE (FPTN=E_PSIDFOLDERTOOLONG,FCG="VM",MID="A",
       88    12176              ERR#=%E$PSIDFOLDERTOOLONG,STCLASS=CONSTANT);
       89    12221        /*E*     ERROR: VMA-E$PSIDFOLDERTOOLONG
       90    12222                 MESSAGE: This folder name is too long.  For mailboxes stored in
       91    12223                          nonpublic accounts, the length of the folder name may not
       92    12224                          exceed 18 characters.
       93    12225        */
       94    12226        %EJECT;
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:4    
       95    12227        /*
       96    12228             ***** Initialize VM_ADD_HEAD ...
       97    12229        */
       98    12230    1         VM_ADD_HEAD.NUM_ENTRIES = 0;
       99    12231    1       VM_ADD_HEAD.FLAGS = %NO#;
      100    12232        /*
      101    12233             ***** Expand an address list ...
      102    12234        */
      103    12235    2       DO INDX1 = 0 TO TREE$ -> P$B.NSUBLKS - 1;
      104    12236    2           BLK1$ = TREE$ -> P$B.SUBLK$(INDX1);
      105    12237        /*
      106    12238             ***** Init acct, USER_NAME, folder, password and sitename ...
      107    12239        */
      108    12240    2           PSID.SN#(0) = ' ';
      109    12241    2           ACCT.ACCT# = ' ';
      110    12242    2           NAME.L# = 0;
      111    12243    2           NAME.NAME# = ' ';
      112    12244    2           PASSWORD.PASS# = ' ';
      113    12245    2           SITENAME = ' ';
      114    12246    2           SITE = ' ';
      115    12247    2           DOMAIN$ = ADDR(NIL);
      116    12248    2           SITE$ = ADDR(NIL);
      117    12249    2           FOLDER = ' ';
      118    12250        /**/
      119    12251    3           DO INDX2 = 0 TO BLK1$ -> P$B.NSUBLKS - 1;
      120    12252    3               BLK2$ = BLK1$ -> P$B.SUBLK$(INDX2);
      121    12253    4               DO CASE (BLK2$ -> P$B.CODE);
      122    12254    4               CASE (%ADD_ACCT);
      123    12255    4                   ACCT.ACCT# = BLK2$ -> P$S.TEXT;
      124    12256    4               CASE(%ADD_PSID);
      125    12257    4                   PSID.SN#(0) = BLK2$ -> P$S.TEXT;
      126    12258    4               CASE (%ADD_FOLDER);
      127    12259    4                   FOLDER = BLK2$ -> P$S.TEXT;
      128    12260    4               CASE (%ADD_NAME);
      129    12261    4                   NAME.L# = BLK2$ -> P$S.COUNT;
      130    12262    4                   NAME.NAME# = BLK2$ -> P$S.TEXT;
      131    12263    4               CASE (%ADD_PASS);
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:5    
      132    12264    4                   PASSWORD.PASS# = BLK2$ -> P$S.TEXT;
      133    12265    4               CASE (%ADD_SITE);
      134    12266    4                   SITE$ = BLK2$;
      135    12267    4               CASE (%ADD_DOMAIN);
      136    12268    4                   DOMAIN$ = BLK2$;
      137    12269    4               END;                  /* Do case ... end */
      138    12270    3           END;                       /* Do INDX2 ... end */
      139    12271        /*
      140    12272              ***** Check to make sure that the folder name and packset id don't
      141    12273                    collide.
      142    12274        */
      143    12275
      144    12276    2           IF PSID.SN#(0) ~= ' '
      145    12277    3           THEN DO;
      146    12278
      147    12279    3               VM_UADDRESS.FOLDER = FOLDER;
      148    12280
      149    12281    3               IF VM_UADDRESS.NOMAD.DELIM ~= ' '
      150    12282    4               THEN DO;
      151    12283
      152    12284    4                   CALL VMA$ERRMSG (E_PSIDFOLDERTOOLONG);
      153    12285    4                   GOTO ERR;
      154    12286
      155    12287    4               END;
      156    12288
      157    12289    3               VM_UADDRESS.NOMAD.PSID = PSID.SN#(0);
      158    12290    3               FOLDER = VM_UADDRESS.FOLDER;
      159    12291
      160    12292    3           END;
      161    12293
      162    12294        /*
      163    12295              ***** If a domain was specified, check to make sure that the outermost
      164    12296                    subdomain can be mapped into a node name;  reject otherwise.  Then
      165    12297                    map the domain-name structure into the corresponding CP-6
      166    12298                    equivalent (e.g. "name@sd1.sd2.sd3" -> "name%sd1.sd2@sd3").
      167    12299        */
      168    12300    2           IF DOMAIN$ ~= ADDR(NIL)
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:6    
      169    12301    3           THEN DO;
      170    12302    3               SITE$ = DOMAIN$ -> P$B.SUBLK$(DOMAIN$ -> P$B.NSUBLKS - 1);
      171    12303    3               IF SITE$ -> P$S.COUNT > LENGTHC(SITENAME)
      172    12304    4               THEN DO;
      173    12305    4                   IF SITE$ -> P$S.COUNT < 32
      174    12306    5                   THEN DO;
      175    12307    5                       ERR_TEXT.NAME# = SITE$ -> P$S.TEXT;
      176    12308    5                       ERR_TEXT.L# = SITE$ -> P$S.COUNT;
      177    12309    5                   END;
      178    12310    5                   ELSE DO;
      179    12311    5                       CALL CONCAT (ERR_TEXT.NAME#, SUBSTR (SITE$ -> P$S.TEXT, 0, 28),
             12311                                '...');
      180    12312    5                       ERR_TEXT.L# = 31;
      181    12313    5                   END;
      182    12314    4                   CALL VMA$ERRMSG (E_BADDOMAIN,,VECTOR(ERR_TEXT));
      183    12315    4                   GOTO ERR;
      184    12316    4               END;
      185    12317    4               DO INDX2 = 0 TO DOMAIN$ -> P$B.NSUBLKS - 2;
      186    12318    4                   IF INDX2 = 0
      187    12319    4                   THEN
      188    12320    4                       CALL INSERT (NAME.NAME#, NAME.L#, , '%', DOMAIN$ -> P$B.SUBLK$(
             12320                                INDX2) -> P$S.TEXT);
      189    12321    4                   ELSE
      190    12322    4                       CALL INSERT (NAME.NAME#, NAME.L#, , '.', DOMAIN$ -> P$B.SUBLK$(
             12322                                INDX2) -> P$S.TEXT);
      191    12323    4                   NAME.L# = NAME.L# + DOMAIN$ -> P$B.SUBLK$(INDX2) -> P$S.COUNT + 1;
      192    12324    4               END;
      193    12325    3           END;
      194    12326        /*
      195    12327             ***** If a sitename was specified,
      196    12328                   verify that it is legal ...
      197    12329        */
      198    12330    2           IF SITE$ ~= ADDR(NIL)
      199    12331    3           THEN DO;
      200    12332    3               SITENAME = SITE$ -> P$S.TEXT;
      201    12333    3               CALL XLATE (SITE, LOWER_UPPER, SITENAME);
      202    12334    3               IF SITE = VM_SITENAME
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:7    
      203    12335    3               THEN
      204    12336    3                   IF DOMAIN$ ~= ADDR(NIL)
      205    12337    3                   THEN
      206    12338    3                       GOTO BAD_SITE;
      207    12339    3                   ELSE;
      208    12340    4               ELSE DO;
      209    12341    4                   CALL VMA$GET_SITE_NAME (SITENAME, SITE, SITETYPE)
      210    12342    5                   WHENALTRETURN DO;
      211    12343    5   BAD_SITE:           ERR_TEXT.NAME# = SITENAME;
      212    12344    5                       ERR_TEXT.L# = SITE$ -> P$S.COUNT;
      213    12345    5                       IF DOMAIN$ = ADDR(NIL)
      214    12346    5                       THEN
      215    12347    5                           CALL VMA$ERRMSG (E_BADWSN,,VECTOR(ERR_TEXT));
      216    12348    5                       ELSE
      217    12349    5                           CALL VMA$ERRMSG (E_BADDOMAIN,,VECTOR(ERR_TEXT));
      218    12350    5                       GOTO ERR;
      219    12351    5                   END;
      220    12352    5                   if SITETYPE ~= %N_EXTERNAL# then do;
      221    12353    5                       SITENAME = SITE;
      222    12354    5                       if DOMAIN$ ~= ADDR(NIL)
      223    12355    5                       THEN
      224    12356    5                           GOTO BAD_SITE;
      225    12357    5                   end; /* if sitetype ~= external site */
      226    12358    4               END;
      227    12359    3           END;
      228    12360        /*
      229    12361             ***** If neither an account nor user name was specified,
      230    12362                   then fill in the apropriate default information ...
      231    12363        */
      232    12364    2           IF ACCT.ACCT# = ' '
      233    12365    2             AND NAME.NAME# = ' '
      234    12366    2           THEN                       /* Fill in default */
      235    12367    3           DO;
      236    12368    3               IF SUBSTR(USER_NAME.TEXT,0,1) = '.'
      237    12369    3               THEN            /* User is not registered */
      238    12370    4               DO;
      239    12371    4                   ACCT.ACCT# = SUBSTR(USER_NAME.TEXT,1);
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:8    
      240    12372    4                   NAME.L# = 0;
      241    12373    4                   NAME.NAME# = ' ';
      242    12374    4               END;
      243    12375    3               ELSE            /* User is registered */
      244    12376    4               DO;
      245    12377    4                   ACCT.ACCT# = ' ';
      246    12378    4                   NAME.L# = USER_NAME.SIZ;
      247    12379    4                   NAME.NAME# = USER_NAME.TEXT;
      248    12380    4               END;
      249    12381    3           END;
      250    12382        /*
      251    12383             ***** If a user name (rather than an account) was specified,
      252    12384                   then resolve and add to address list ...
      253    12385        */
      254    12386    2           IF ACCT.ACCT# = ' '
      255    12387    2             AND NAME.NAME# ~= ' '
      256    12388    2           THEN
      257    12389    3           DO;
      258    12390    3               VM_UADDRESS.FOLDER = FOLDER;
      259    12391    3               VM_UADDRESS.PASS = PASSWORD.PASS#;
      260    12392    3               CALL XLATE (VM_UADDRESS.SITENAME, LOWER_UPPER, SITENAME);
      261    12393    3               VM_UADDRESS.USER_NAME.COUNT = NAME.L#;
      262    12394    3               VM_UADDRESS.USER_NAME.TEXT = NAME.NAME#;
      263    12395    3               IF ADDR(EXPAND_FULL#) ~= ADDR(NIL)
      264    12396    3                 AND EXPAND_FULL# = %YES#
      265    12397    3               THEN
      266    12398    3                   CALL VMA$EXPAND_LIST_GLOBAL (VM_UADDRESS,VBASE(VM_WORK_),
      267    12399    3                     VM_SEARCH_INFO,0,EXPAND_USER#) ALTRET(E_PMME);
      268    12400    3               ELSE
      269    12401    3                   CALL VMA$EXPAND_LIST (VM_UADDRESS,VBASE(VM_WORK_),
      270    12402    3                     VM_SEARCH_INFO,0,EXPAND_USER#) ALTRET(E_PMME);
      271    12403    3           END;                  /* Resolve name loop */
      272    12404        /*
      273    12405             ***** If an account was specified,
      274    12406                   then add to address list ...
      275    12407        */
      276    12408    2           IF ACCT.ACCT# ~= ' '
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:9    
      277    12409    2             AND NAME.NAME# = ' '
      278    12410    2           THEN
      279    12411    3           DO;
      280    12412    3               CALL VMA$ADD_RENTRY (ACCT,FOLDER,PASSWORD,SITE) ALTRET(E_PMME);
      281    12413    3           END;
      282    12414    3           DO NEVER;
      283    12415    3   ERR:        ;
      284    12416    3               VM_ADD_HEAD.FLAGS.ERR# = %YES#;
      285    12417    3           END;
      286    12418    2       END;                            /* Do INDX1 ... end */
      287    12419        /*
      288    12420             ***** If there are any errors in the address list
      289    12421                   then altreturn so they can be reported ...
      290    12422        */
      291    12423    1       IF VM_ADD_HEAD.FLAGS.ERR#
      292    12424    1       THEN
      293    12425    1           ALTRETURN;
      294    12426    1       ELSE
      295    12427    1           RETURN;
      296    12428        /**/
      297    12429    1   E_PMME:
      298    12430    1       ALTRETURN;
      299    12431    1   END VMA$ADDRESS;
      300    12432        %EOD;

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:10   
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   XUM_MACRO_C.:LIB_E05  is referenced.
   XU_SUBS_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   VW_NODEATER_E.:VMB6TOU  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ADDRESS.

   Procedure VMA$ADDRESS requires 439 words for executable code.
   Procedure VMA$ADDRESS requires 86 words of local(AUTO) storage.

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:11   

 Object Unit name= VMA$ADDRESS                                File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:01:59.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    82    122  VMA$ADDRESS
   12  RoData even  UTS      4      4  VMA$ADDRESS
   13   Proc  even  none   439    667  VMA$ADDRESS
   14  RoData even  none    25     31  VMA$ADDRESS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        5  VMA$ADDRESS
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:12   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
         yes           Std       5 VMA$ERRMSG
 yes     yes           Std       5 VMA$EXPAND_LIST_GLOBAL
 yes     yes           Std       5 VMA$EXPAND_LIST
 yes     yes           Std       6 VMA$ADD_RENTRY
 yes     yes           Std       4 VMA$GET_SITE_NAME
                       nStd      0 X66_AUTO_5
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:13   
     VM_SITENAME                           VM_MAILCG_SETSTA                 r    B$XL_UPPER$

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:14   


        1        1        /*M* VMA$SUBR - Routines necessary to resolve addresses */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        8        8        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        9        9        /*F*
       10       10             NAME: VMA$ADDRESS
       11       11             PURPOSE:
       12       12                  To transform an ADDRESS into its internal form.
       13       13             DESCRIPTION:
       14       14                  This routine will accept a parse tree and turn it into
       15       15                  an address list.
       16       16
       17       17                  This list will then be used by VMA$EXPAND_ADDRESS.
       18       18
       19       19                  This routine has 4 parameters:
       20       20                   TREE$ - ptr to list of N addresses.
       21       21                   USER_NAME - info for defaults
       22       22                   VM_SEARCH_INFO - contains the SEARCH LIST  for resolving addresses.
       23       23                   EXPAND_FULL# - full address expansion(YES/NO) (optional. Default=NO)
       24       24             EXPAND_USER# - expand user def(YES/NO) (optional. Default=YES if EXPAND_FULL#)
       25       25        */
       26       26       VMA$ADDRESS: PROC (TREE$,USER_NAME,VM_SEARCH_INFO,EXPAND_FULL#,EXPAND_USER#) ALTRET;

     26 13 000000   000000 700200 xent  VMA$ADDRESS  TSX0  ! X66_AUTO_5
        13 000001   000126 000005                    ZERO    86,5

       27       27        /***** Include files *****/
       28       28          %INCLUDE CP_6;
       29     5587          %INCLUDE CP_6_SUBS;
       30     6127          %INCLUDE VM_MACRO_C;
       31     7395          %INCLUDE VM_PERR_C;
       32     7690          %INCLUDE VM_SUBS_C;
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:15   
       33     7950          %INCLUDE VM_DATA_R;
       34     8381          %INCLUDE VW_NODEATER_E;
       35     8437          %INCLUDE XU_MACRO_C;
       36    11543          %INCLUDE XU_SUBS_C;
       37    11635          %INCLUDE XUM_MACRO_C;
       38    11662            %include B$TABLES_C;
       39    11770          %B$XL_UPPER(NAME=lower_UPPER);
       40    11774        /***** Parameters *****/
       41    11775    1   DCL TREE$ PTR;
       42    11776          %TEXTC (NAME=USER_NAME,STCLASS=" ");
       43    11781          %VM_SEARCH_INFO (STCLASS=" ");
       44    11808    1   DCL EXPAND_FULL# BIT(1);
       45    11809    1   DCL EXPAND_USER# BIT(1);
       46    11810        /***** Mail structures *****/
       47    11811          %VM_ADDTYPES;
       48    11815          %VM_ADD_HEAD;
       49    11844          %VM_UADDRESS (STCLASS=AUTO);
       50    11881        /***** Based structures *****/
       51    11882          %PARSE$OUT (NAME=P$B,STCLASS=BASED);
       52    11927          %PARSE$SYM (NAME=P$S,STCLASS=BASED);
       53    11965        /***** External routines *****/
       54    11966    1   DCL VMA$ADD_RENTRY ENTRY(6) ALTRET;
       55    11967    1   DCL VMA$ADD_UENTRY ENTRY(6) ALTRET;
       56    11968    1   DCL VMA$EXPAND_LIST ENTRY(5) ALTRET;
       57    11969    1   DCL VMA$EXPAND_LIST_GLOBAL ENTRY(5) ALTRET;
       58    11970    1   DCL VMA$ERRMSG ENTRY(5);
       59    11971    1   DCL VMA$GET_SITE_NAME ENTRY(4) ALTRET;
       60    11972        /***** Local variables *****/
       61    11973    1   DCL BLK1$ PTR STATIC;
       62    11974    1   DCL BLK2$ PTR STATIC;
       63    11975    1   DCL DOMAIN$ PTR;
       64    11976    1   DCL SITE$ PTR;
       65    11977    1   DCL SITETYPE UBIN;
       66    11978    1   DCL INDX1 SBIN WORD STATIC;
       67    11979    1   DCL INDX2 SBIN WORD STATIC;
       68    11980         %VLP_SN (FPTN=PSID,STCLASS=STATIC,N=1);
       69    11993          %VLP_ACCT (FPTN=ACCT,STCLASS=STATIC);
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:16   
       70    12006          %VLP_NAME (FPTN=NAME,LEN=%SIZ_LISTNAME,STCLASS=STATIC);
       71    12033    1   DCL FOLDER CHAR(%SIZ_FOLDER) STATIC;
       72    12034          %VLP_PASS (FPTN=PASSWORD,STCLASS=STATIC);
       73    12047    1   DCL SITENAME CHAR(%SIZ_SITENAME) STATIC;
       74    12048          %VLP_NAME (FPTN=ERR_TEXT,LEN=31,NAME=' ');
       75    12075    1   DCL SITE CHAR(8) STATIC;
       76    12076        /***** Error codes *****/
       77    12077          %VLP_ERRCODE (FPTN=E_BADWSN,FCG="VM",MID="A",
       78    12078                        ERR#=%E$BADWSN,STCLASS=CONSTANT);
       79    12123        /*E*    ERROR: VMA-E$BADWSN-0
       80    12124                MESSAGE: Site %U1 is undefined.
       81    12125        */
       82    12126              %VLP_ERRCODE (FPTN=E_BADDOMAIN, FCG="VM", MID="A",
       83    12127              ERR#=%E$BADDOMAIN, STCLASS=CONSTANT);
       84    12172        /*E*  ERROR: VMA-E$BADDOMAIN-0
       85    12173              MESSAGE: Domain %U1 is unknown or illegal.
       86    12174        */
       87    12175              %VLP_ERRCODE (FPTN=E_PSIDFOLDERTOOLONG,FCG="VM",MID="A",
       88    12176              ERR#=%E$PSIDFOLDERTOOLONG,STCLASS=CONSTANT);
       89    12221        /*E*     ERROR: VMA-E$PSIDFOLDERTOOLONG
       90    12222                 MESSAGE: This folder name is too long.  For mailboxes stored in
       91    12223                          nonpublic accounts, the length of the folder name may not
       92    12224                          exceed 18 characters.
       93    12225        */
       94    12226        %EJECT;
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:17   
       95    12227        /*
       96    12228             ***** Initialize VM_ADD_HEAD ...
       97    12229        */
       98    12230    1         VM_ADD_HEAD.NUM_ENTRIES = 0;

  12230 13 000002   000000 470400 xsym               LDP0    VM_ADDLIST$
        13 000003   000001 450100                    STZ     1,,PR0

       99    12231    1       VM_ADD_HEAD.FLAGS = %NO#;

  12231 13 000004   000002 450100                    STZ     2,,PR0

      100    12232        /*
      101    12233             ***** Expand an address list ...
      102    12234        */
      103    12235    2       DO INDX1 = 0 TO TREE$ -> P$B.NSUBLKS - 1;

  12235 13 000005   000002 450000 11                 STZ     INDX1
        13 000006   000653 710000 13                 TRA     s:12418+1

      104    12236    2           BLK1$ = TREE$ -> P$B.SUBLK$(INDX1);

  12236 13 000007   200003 470500                    LDP0    @TREE$,,AUTO
        13 000010   000000 471500                    LDP1    0,,PR0
        13 000011   000002 720000 11                 LXL0    INDX1
        13 000012   100003 236110                    LDQ     3,X0,PR1
        13 000013   000000 756000 11                 STQ     BLK1$

      105    12237        /*
      106    12238             ***** Init acct, USER_NAME, folder, password and sitename ...
      107    12239        */
      108    12240    2           PSID.SN#(0) = ' ';

  12240 13 000014   040000 100400                    MLR     fill='040'O
        13 000015   000000 000001 14                 ADSC9   0                        cn=0,n=1
        13 000016   000005 000006 11                 ADSC9   PSID+1                   cn=0,n=6

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:18   
      109    12241    2           ACCT.ACCT# = ' ';

  12241 13 000017   000000 235000 14                 LDA     0
        13 000020   000000 236000 14                 LDQ     0
        13 000021   000010 757000 11                 STAQ    ACCT

      110    12242    2           NAME.L# = 0;

  12242 13 000022   000000 236003                    LDQ     0,DU
        13 000023   000012 552040 11                 STBQ    NAME,'40'O

      111    12243    2           NAME.NAME# = ' ';

  12243 13 000024   040000 100400                    MLR     fill='040'O
        13 000025   000000 000001 14                 ADSC9   0                        cn=0,n=1
        13 000026   000012 200310 11                 ADSC9   NAME                     cn=1,n=200

      112    12244    2           PASSWORD.PASS# = ' ';

  12244 13 000027   000000 235000 14                 LDA     0
        13 000030   000000 236000 14                 LDQ     0
        13 000031   000104 757000 11                 STAQ    PASSWORD

      113    12245    2           SITENAME = ' ';

  12245 13 000032   000000 235000 14                 LDA     0
        13 000033   000000 236000 14                 LDQ     0
        13 000034   000106 757000 11                 STAQ    SITENAME

      114    12246    2           SITE = ' ';

  12246 13 000035   000000 235000 14                 LDA     0
        13 000036   000000 236000 14                 LDQ     0
        13 000037   000120 757000 11                 STAQ    SITE

      115    12247    2           DOMAIN$ = ADDR(NIL);

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:19   
  12247 13 000040   000001 236000 14                 LDQ     1
        13 000041   200114 756100                    STQ     DOMAIN$,,AUTO

      116    12248    2           SITE$ = ADDR(NIL);

  12248 13 000042   200115 756100                    STQ     SITE$,,AUTO

      117    12249    2           FOLDER = ' ';

  12249 13 000043   040000 100400                    MLR     fill='040'O
        13 000044   000000 000001 14                 ADSC9   0                        cn=0,n=1
        13 000045   000075 000031 11                 ADSC9   FOLDER                   cn=0,n=25

      118    12250        /**/
      119    12251    3           DO INDX2 = 0 TO BLK1$ -> P$B.NSUBLKS - 1;

  12251 13 000046   000003 450000 11                 STZ     INDX2
        13 000047   000144 710000 13                 TRA     s:12270+1

      120    12252    3               BLK2$ = BLK1$ -> P$B.SUBLK$(INDX2);

  12252 13 000050   000000 470400 11                 LDP0    BLK1$
        13 000051   000003 720000 11                 LXL0    INDX2
        13 000052   000003 236110                    LDQ     3,X0,PR0
        13 000053   000001 756000 11                 STQ     BLK2$

      121    12253    4               DO CASE (BLK2$ -> P$B.CODE);

  12253 13 000054   000001 471400 11                 LDP1    BLK2$
        13 000055   100000 721100                    LXL1    0,,PR1
        13 000056   000012 101003                    CMPX1   10,DU
        13 000057   000061 602011 13                 TNC     s:12253+5,X1
        13 000060   000143 710000 13                 TRA     s:12270
        13 000061   000143 710000 13                 TRA     s:12270
        13 000062   000143 710000 13                 TRA     s:12270
        13 000063   000073 710000 13                 TRA     s:12255
        13 000064   000111 710000 13                 TRA     s:12259
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:20   
        13 000065   000120 710000 13                 TRA     s:12261
        13 000066   000131 710000 13                 TRA     s:12264
        13 000067   000140 710000 13                 TRA     s:12266
        13 000070   000143 710000 13                 TRA     s:12270
        13 000071   000102 710000 13                 TRA     s:12257
        13 000072   000142 710000 13                 TRA     s:12268

      122    12254    4               CASE (%ADD_ACCT);

      123    12255    4                   ACCT.ACCT# = BLK2$ -> P$S.TEXT;

  12255 13 000073   100004 236100                    LDQ     4,,PR1
        13 000074   000033 772000                    QRL     27
        13 000075   000000 622006                    EAX2    0,QL
        13 000076   040000 100540                    MLR     fill='040'O
        13 000077   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
        13 000100   000010 000010 11                 ADSC9   ACCT                     cn=0,n=8
        13 000101   000143 710000 13                 TRA     s:12270

      124    12256    4               CASE(%ADD_PSID);

      125    12257    4                   PSID.SN#(0) = BLK2$ -> P$S.TEXT;

  12257 13 000102   100004 236100                    LDQ     4,,PR1
        13 000103   000033 772000                    QRL     27
        13 000104   000000 622006                    EAX2    0,QL
        13 000105   040000 100540                    MLR     fill='040'O
        13 000106   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
        13 000107   000005 000006 11                 ADSC9   PSID+1                   cn=0,n=6
        13 000110   000143 710000 13                 TRA     s:12270

      126    12258    4               CASE (%ADD_FOLDER);

      127    12259    4                   FOLDER = BLK2$ -> P$S.TEXT;

  12259 13 000111   100004 236100                    LDQ     4,,PR1
        13 000112   000033 772000                    QRL     27
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:21   
        13 000113   000000 622006                    EAX2    0,QL
        13 000114   040000 100540                    MLR     fill='040'O
        13 000115   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
        13 000116   000075 000031 11                 ADSC9   FOLDER                   cn=0,n=25
        13 000117   000143 710000 13                 TRA     s:12270

      128    12260    4               CASE (%ADD_NAME);

      129    12261    4                   NAME.L# = BLK2$ -> P$S.COUNT;

  12261 13 000120   100004 236100                    LDQ     4,,PR1
        13 000121   000012 552040 11                 STBQ    NAME,'40'O

      130    12262    4                   NAME.NAME# = BLK2$ -> P$S.TEXT;

  12262 13 000122   100004 236100                    LDQ     4,,PR1
        13 000123   000033 772000                    QRL     27
        13 000124   000000 622006                    EAX2    0,QL
        13 000125   040000 100540                    MLR     fill='040'O
        13 000126   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
        13 000127   000012 200310 11                 ADSC9   NAME                     cn=1,n=200
        13 000130   000143 710000 13                 TRA     s:12270

      131    12263    4               CASE (%ADD_PASS);

      132    12264    4                   PASSWORD.PASS# = BLK2$ -> P$S.TEXT;

  12264 13 000131   100004 236100                    LDQ     4,,PR1
        13 000132   000033 772000                    QRL     27
        13 000133   000000 622006                    EAX2    0,QL
        13 000134   040000 100540                    MLR     fill='040'O
        13 000135   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
        13 000136   000104 000010 11                 ADSC9   PASSWORD                 cn=0,n=8
        13 000137   000143 710000 13                 TRA     s:12270

      133    12265    4               CASE (%ADD_SITE);

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:22   
      134    12266    4                   SITE$ = BLK2$;

  12266 13 000140   200115 756100                    STQ     SITE$,,AUTO
        13 000141   000143 710000 13                 TRA     s:12270

      135    12267    4               CASE (%ADD_DOMAIN);

      136    12268    4                   DOMAIN$ = BLK2$;

  12268 13 000142   200114 756100                    STQ     DOMAIN$,,AUTO

      137    12269    4               END;                  /* Do case ... end */

      138    12270    3           END;                       /* Do INDX2 ... end */

  12270 13 000143   000003 054000 11                 AOS     INDX2
        13 000144   000000 470400 11                 LDP0    BLK1$
        13 000145   000001 236100                    LDQ     1,,PR0
        13 000146   000022 772000                    QRL     18
        13 000147   000003 116000 11                 CMPQ    INDX2
        13 000150   000050 605400 13                 TPNZ    s:12252

      139    12271        /*
      140    12272              ***** Check to make sure that the folder name and packset id don't
      141    12273                    collide.
      142    12274        */
      143    12275
      144    12276    2           IF PSID.SN#(0) ~= ' '

  12276 13 000151   040000 106400                    CMPC    fill='040'O
        13 000152   000005 000006 11                 ADSC9   PSID+1                   cn=0,n=6
        13 000153   000000 000001 14                 ADSC9   0                        cn=0,n=1
        13 000154   000177 600000 13                 TZE     s:12300

      145    12277    3           THEN DO;

      146    12278
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:23   
      147    12279    3               VM_UADDRESS.FOLDER = FOLDER;

  12279 13 000155   040100 100400                    MLR     fill='040'O
        13 000156   000075 000031 11                 ADSC9   FOLDER                   cn=0,n=25
        13 000157   200017 400031                    ADSC9   VM_UADDRESS+7,,AUTO      cn=2,n=25

      148    12280
      149    12281    3               IF VM_UADDRESS.NOMAD.DELIM ~= ' '

  12281 13 000160   200024 236100                    LDQ     VM_UADDRESS+12,,AUTO
        13 000161   777000 376003                    ANQ     -512,DU
        13 000162   040000 116003                    CMPQ    16384,DU
        13 000163   000171 600000 13                 TZE     s:12289

      150    12282    4               THEN DO;

      151    12283
      152    12284    4                   CALL VMA$ERRMSG (E_PSIDFOLDERTOOLONG);

  12284 13 000164   000003 630400 14                 EPPR0   3
        13 000165   000002 631400 14                 EPPR1   2
        13 000166   000000 701000 xent               TSX1    VMA$ERRMSG
        13 000167   000000 011000                    NOP     0

      153    12285    4                   GOTO ERR;

  12285 13 000170   000647 710000 13                 TRA     ERR

      154    12286
      155    12287    4               END;
      156    12288
      157    12289    3               VM_UADDRESS.NOMAD.PSID = PSID.SN#(0);

  12289 13 000171   040100 100400                    MLR     fill='040'O
        13 000172   000005 000006 11                 ADSC9   PSID+1                   cn=0,n=6
        13 000173   200024 200006                    ADSC9   VM_UADDRESS+12,,AUTO     cn=1,n=6

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:24   
      158    12290    3               FOLDER = VM_UADDRESS.FOLDER;

  12290 13 000174   040000 100500                    MLR     fill='040'O
        13 000175   200017 400031                    ADSC9   VM_UADDRESS+7,,AUTO      cn=2,n=25
        13 000176   000075 000031 11                 ADSC9   FOLDER                   cn=0,n=25

      159    12291
      160    12292    3           END;

      161    12293
      162    12294        /*
      163    12295              ***** If a domain was specified, check to make sure that the outermost
      164    12296                    subdomain can be mapped into a node name;  reject otherwise.  Then
      165    12297                    map the domain-name structure into the corresponding CP-6
      166    12298                    equivalent (e.g. "name@sd1.sd2.sd3" -> "name%sd1.sd2@sd3").
      167    12299        */
      168    12300    2           IF DOMAIN$ ~= ADDR(NIL)

  12300 13 000177   200114 236100                    LDQ     DOMAIN$,,AUTO
        13 000200   000001 116000 14                 CMPQ    1
        13 000201   000360 600000 13                 TZE     s:12330

      169    12301    3           THEN DO;

      170    12302    3               SITE$ = DOMAIN$ -> P$B.SUBLK$(DOMAIN$ -> P$B.NSUBLKS - 1);

  12302 13 000202   200114 471500                    LDP1    DOMAIN$,,AUTO
        13 000203   100001 220100                    LDX0    1,,PR1
        13 000204   100002 236110                    LDQ     2,X0,PR1
        13 000205   200115 756100                    STQ     SITE$,,AUTO

      171    12303    3               IF SITE$ -> P$S.COUNT > LENGTHC(SITENAME)

  12303 13 000206   200115 473500                    LDP3    SITE$,,AUTO
        13 000207   300004 236100                    LDQ     4,,PR3
        13 000210   777000 376003                    ANQ     -512,DU
        13 000211   011000 116003                    CMPQ    4608,DU
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:25   
        13 000212   000252 602000 13                 TNC     s:12317

      172    12304    4               THEN DO;

      173    12305    4                   IF SITE$ -> P$S.COUNT < 32

  12305 13 000213   040000 116003                    CMPQ    16384,DU
        13 000214   000226 603000 13                 TRC     s:12311

      174    12306    5                   THEN DO;

      175    12307    5                       ERR_TEXT.NAME# = SITE$ -> P$S.TEXT;

  12307 13 000215   300004 236100                    LDQ     4,,PR3
        13 000216   000033 772000                    QRL     27
        13 000217   000000 621006                    EAX1    0,QL
        13 000220   040000 100540                    MLR     fill='040'O
        13 000221   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
        13 000222   000110 200037 11                 ADSC9   ERR_TEXT                 cn=1,n=31

      176    12308    5                       ERR_TEXT.L# = SITE$ -> P$S.COUNT;

  12308 13 000223   300004 236100                    LDQ     4,,PR3
        13 000224   000110 552040 11                 STBQ    ERR_TEXT,'40'O

      177    12309    5                   END;

  12309 13 000225   000240 710000 13                 TRA     s:12314

      178    12310    5                   ELSE DO;

      179    12311    5                       CALL CONCAT (ERR_TEXT.NAME#, SUBSTR (SITE$ -> P$S.TEXT, 0, 28),
             12311                                '...');

  12311 13 000226   300004 236100                    LDQ     4,,PR3
        13 000227   000033 772000                    QRL     27
        13 000230   040000 100500                    MLR     fill='040'O
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:26   
        13 000231   300004 200034                    ADSC9   4,,PR3                   cn=1,n=28
        13 000232   000110 200034 11                 ADSC9   ERR_TEXT                 cn=1,n=28
        13 000233   000003 236000 12                 LDQ     E_PSIDFOLDERTOOLONG+1
        13 000234   000011 772000                    QRL     9
        13 000235   000117 552034 11                 STBQ    ERR_TEXT+7,'34'O

      180    12312    5                       ERR_TEXT.L# = 31;

  12312 13 000236   037000 236003                    LDQ     15872,DU
        13 000237   000110 552040 11                 STBQ    ERR_TEXT,'40'O

      181    12313    5                   END;

      182    12314    4                   CALL VMA$ERRMSG (E_BADDOMAIN,,VECTOR(ERR_TEXT));

  12314 13 000240   000007 236000 14                 LDQ     7
        13 000241   200122 756100                    STQ     SITETYPE+4,,AUTO
        13 000242   000001 236000 14                 LDQ     1
        13 000243   000010 235000 14                 LDA     8
        13 000244   200120 757100                    STAQ    SITETYPE+2,,AUTO
        13 000245   200120 630500                    EPPR0   SITETYPE+2,,AUTO
        13 000246   000006 631400 14                 EPPR1   6
        13 000247   000000 701000 xent               TSX1    VMA$ERRMSG
        13 000250   000000 011000                    NOP     0

      183    12315    4                   GOTO ERR;

  12315 13 000251   000647 710000 13                 TRA     ERR

      184    12316    4               END;
      185    12317    4               DO INDX2 = 0 TO DOMAIN$ -> P$B.NSUBLKS - 2;

  12317 13 000252   000003 450000 11                 STZ     INDX2
        13 000253   000352 710000 13                 TRA     s:12324+1

      186    12318    4                   IF INDX2 = 0

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:27   
  12318 13 000254   000003 235000 11                 LDA     INDX2
        13 000255   000307 601000 13                 TNZ     s:12322

      187    12319    4                   THEN
      188    12320    4                       CALL INSERT (NAME.NAME#, NAME.L#, , '%', DOMAIN$ -> P$B.SUBLK$(
             12320                                INDX2) -> P$S.TEXT);

  12320 13 000256   200114 470500                    LDP0    DOMAIN$,,AUTO
        13 000257   000003 471505                    LDP1    3,AL,PR0
        13 000260   000003 720000 11                 LXL0    INDX2
        13 000261   000003 473510                    LDP3    3,X0,PR0
        13 000262   100004 236100                    LDQ     4,,PR1
        13 000263   000033 772000                    QRL     27
        13 000264   000000 621006                    EAX1    0,QL
        13 000265   000012 236000 11                 LDQ     NAME
        13 000266   000033 772000                    QRL     27
        13 000267   777467 622006                    EAX2    -201,QL
        13 000270   777777 662003                    ERX2    -1,DU
        13 000271   040046 100400                    MLR     fill='040'O
        13 000272   000011 000001 14                 ADSC9   9                        cn=0,n=1
        13 000273   000012 200012 11                 ADSC9   NAME,Q                   cn=1,n=*X2
        13 000274   200120 756100                    STQ     SITETYPE+2,,AUTO
        13 000275   000000 636012                    EAQ     0,X2
        13 000276   000022 772000                    QRL     18
        13 000277   000002 116007                    CMPQ    2,DL
        13 000300   000306 602000 13                 TNC     s:12320+24
        13 000301   777777 623012                    EAX3    -1,X2
        13 000302   200120 235100                    LDA     SITETYPE+2,,AUTO
        13 000303   040045 100540                    MLR     fill='040'O
        13 000304   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
        13 000305   000012 400013 11                 ADSC9   NAME,A                   cn=2,n=*X3
        13 000306   000337 710000 13                 TRA     s:12323

      189    12321    4                   ELSE
      190    12322    4                       CALL INSERT (NAME.NAME#, NAME.L#, , '.', DOMAIN$ -> P$B.SUBLK$(
             12322                                INDX2) -> P$S.TEXT);

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:28   
  12322 13 000307   200114 470500                    LDP0    DOMAIN$,,AUTO
        13 000310   000003 471505                    LDP1    3,AL,PR0
        13 000311   000003 720000 11                 LXL0    INDX2
        13 000312   000003 473510                    LDP3    3,X0,PR0
        13 000313   100004 236100                    LDQ     4,,PR1
        13 000314   000033 772000                    QRL     27
        13 000315   000000 621006                    EAX1    0,QL
        13 000316   000012 236000 11                 LDQ     NAME
        13 000317   000033 772000                    QRL     27
        13 000320   777467 622006                    EAX2    -201,QL
        13 000321   777777 662003                    ERX2    -1,DU
        13 000322   040046 100400                    MLR     fill='040'O
        13 000323   000012 000001 14                 ADSC9   10                       cn=0,n=1
        13 000324   000012 200012 11                 ADSC9   NAME,Q                   cn=1,n=*X2
        13 000325   200120 756100                    STQ     SITETYPE+2,,AUTO
        13 000326   000000 636012                    EAQ     0,X2
        13 000327   000022 772000                    QRL     18
        13 000330   000002 116007                    CMPQ    2,DL
        13 000331   000337 602000 13                 TNC     s:12323
        13 000332   777777 623012                    EAX3    -1,X2
        13 000333   200120 235100                    LDA     SITETYPE+2,,AUTO
        13 000334   040045 100540                    MLR     fill='040'O
        13 000335   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
        13 000336   000012 400013 11                 ADSC9   NAME,A                   cn=2,n=*X3

      191    12323    4                   NAME.L# = NAME.L# + DOMAIN$ -> P$B.SUBLK$(INDX2) -> P$S.COUNT + 1;

  12323 13 000337   000003 471510                    LDP1    3,X0,PR0
        13 000340   100004 236100                    LDQ     4,,PR1
        13 000341   000033 772000                    QRL     27
        13 000342   200120 756100                    STQ     SITETYPE+2,,AUTO
        13 000343   000012 236000 11                 LDQ     NAME
        13 000344   000033 772000                    QRL     27
        13 000345   200120 036100                    ADLQ    SITETYPE+2,,AUTO
        13 000346   000001 036007                    ADLQ    1,DL
        13 000347   000033 736000                    QLS     27
        13 000350   000012 552040 11                 STBQ    NAME,'40'O
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:29   

      192    12324    4               END;

  12324 13 000351   000003 054000 11                 AOS     INDX2
        13 000352   200114 470500                    LDP0    DOMAIN$,,AUTO
        13 000353   000001 236100                    LDQ     1,,PR0
        13 000354   000022 772000                    QRL     18
        13 000355   000002 136007                    SBLQ    2,DL
        13 000356   000003 116000 11                 CMPQ    INDX2
        13 000357   000254 605000 13                 TPL     s:12318

      193    12325    3           END;

      194    12326        /*
      195    12327             ***** If a sitename was specified,
      196    12328                   verify that it is legal ...
      197    12329        */
      198    12330    2           IF SITE$ ~= ADDR(NIL)

  12330 13 000360   200115 236100                    LDQ     SITE$,,AUTO
        13 000361   000001 116000 14                 CMPQ    1
        13 000362   000465 600000 13                 TZE     s:12364

      199    12331    3           THEN DO;

      200    12332    3               SITENAME = SITE$ -> P$S.TEXT;

  12332 13 000363   200115 470500                    LDP0    SITE$,,AUTO
        13 000364   000004 236100                    LDQ     4,,PR0
        13 000365   000033 772000                    QRL     27
        13 000366   000000 620006                    EAX0    0,QL
        13 000367   040000 100540                    MLR     fill='040'O
        13 000370   000004 200010                    ADSC9   4,,PR0                   cn=1,n=*X0
        13 000371   000106 000010 11                 ADSC9   SITENAME                 cn=0,n=8

      201    12333    3               CALL XLATE (SITE, LOWER_UPPER, SITENAME);

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:30   
  12333 13 000372   000000 471400 xsym               LDP1    B$XL_UPPER$
        13 000373   040000 160400                    MVT     fill='040'O
        13 000374   000106 000010 11                 ADSC9   SITENAME                 cn=0,n=8
        13 000375   000120 000010 11                 ADSC9   SITE                     cn=0,n=8
        13 000376   100000 000100                    ARG     0,,PR1

      202    12334    3               IF SITE = VM_SITENAME

  12334 13 000377   040000 106400                    CMPC    fill='040'O
        13 000400   000120 000010 11                 ADSC9   SITE                     cn=0,n=8
        13 000401   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        13 000402   000407 601000 13                 TNZ     s:12341

      203    12335    3               THEN
      204    12336    3                   IF DOMAIN$ ~= ADDR(NIL)

  12336 13 000403   200114 236100                    LDQ     DOMAIN$,,AUTO
        13 000404   000001 116000 14                 CMPQ    1
        13 000405   000420 601000 13                 TNZ     BAD_SITE
        13 000406   000465 710000 13                 TRA     s:12364

      205    12337    3                   THEN
      206    12338    3                       GOTO BAD_SITE;
      207    12339    3                   ELSE;
      208    12340    4               ELSE DO;

      209    12341    4                   CALL VMA$GET_SITE_NAME (SITENAME, SITE, SITETYPE)

  12341 13 000407   200116 633500                    EPPR3   SITETYPE,,AUTO
        13 000410   200122 453500                    STP3    SITETYPE+4,,AUTO
        13 000411   000014 237000 14                 LDAQ    12
        13 000412   200120 757100                    STAQ    SITETYPE+2,,AUTO
        13 000413   200120 630500                    EPPR0   SITETYPE+2,,AUTO
        13 000414   000006 631400 14                 EPPR1   6
        13 000415   000000 701000 xent               TSX1    VMA$GET_SITE_NAME
        13 000416   000420 702000 13                 TSX2    BAD_SITE
        13 000417   000455 710000 13                 TRA     s:12352
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:31   

      210    12342    5                   WHENALTRETURN DO;

      211    12343    5   BAD_SITE:           ERR_TEXT.NAME# = SITENAME;

  12343 13 000420   040000 100400       BAD_SITE     MLR     fill='040'O
        13 000421   000106 000010 11                 ADSC9   SITENAME                 cn=0,n=8
        13 000422   000110 200037 11                 ADSC9   ERR_TEXT                 cn=1,n=31

      212    12344    5                       ERR_TEXT.L# = SITE$ -> P$S.COUNT;

  12344 13 000423   200115 470500                    LDP0    SITE$,,AUTO
        13 000424   000004 236100                    LDQ     4,,PR0
        13 000425   000110 552040 11                 STBQ    ERR_TEXT,'40'O

      213    12345    5                       IF DOMAIN$ = ADDR(NIL)

  12345 13 000426   200114 236100                    LDQ     DOMAIN$,,AUTO
        13 000427   000001 116000 14                 CMPQ    1
        13 000430   000443 601000 13                 TNZ     s:12349

      214    12346    5                       THEN
      215    12347    5                           CALL VMA$ERRMSG (E_BADWSN,,VECTOR(ERR_TEXT));

  12347 13 000431   000007 236000 14                 LDQ     7
        13 000432   200122 756100                    STQ     SITETYPE+4,,AUTO
        13 000433   000001 236000 14                 LDQ     1
        13 000434   000013 235000 14                 LDA     11
        13 000435   200120 757100                    STAQ    SITETYPE+2,,AUTO
        13 000436   200120 630500                    EPPR0   SITETYPE+2,,AUTO
        13 000437   000006 631400 14                 EPPR1   6
        13 000440   000000 701000 xent               TSX1    VMA$ERRMSG
        13 000441   000000 011000                    NOP     0
        13 000442   000454 710000 13                 TRA     s:12350

      216    12348    5                       ELSE
      217    12349    5                           CALL VMA$ERRMSG (E_BADDOMAIN,,VECTOR(ERR_TEXT));
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:32   

  12349 13 000443   000007 236000 14                 LDQ     7
        13 000444   200122 756100                    STQ     SITETYPE+4,,AUTO
        13 000445   000001 236000 14                 LDQ     1
        13 000446   000010 235000 14                 LDA     8
        13 000447   200120 757100                    STAQ    SITETYPE+2,,AUTO
        13 000450   200120 630500                    EPPR0   SITETYPE+2,,AUTO
        13 000451   000006 631400 14                 EPPR1   6
        13 000452   000000 701000 xent               TSX1    VMA$ERRMSG
        13 000453   000000 011000                    NOP     0

      218    12350    5                       GOTO ERR;

  12350 13 000454   000647 710000 13                 TRA     ERR

      219    12351    5                   END;
      220    12352    5                   if SITETYPE ~= %N_EXTERNAL# then do;

  12352 13 000455   200116 235100                    LDA     SITETYPE,,AUTO
        13 000456   000157 115007                    CMPA    111,DL
        13 000457   000465 600000 13                 TZE     s:12364

      221    12353    5                       SITENAME = SITE;

  12353 13 000460   000120 237000 11                 LDAQ    SITE
        13 000461   000106 757000 11                 STAQ    SITENAME

      222    12354    5                       if DOMAIN$ ~= ADDR(NIL)

  12354 13 000462   200114 236100                    LDQ     DOMAIN$,,AUTO
        13 000463   000001 116000 14                 CMPQ    1
        13 000464   000420 601000 13                 TNZ     BAD_SITE

      223    12355    5                       THEN
      224    12356    5                           GOTO BAD_SITE;
      225    12357    5                   end; /* if sitetype ~= external site */

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:33   
      226    12358    4               END;

      227    12359    3           END;

      228    12360        /*
      229    12361             ***** If neither an account nor user name was specified,
      230    12362                   then fill in the apropriate default information ...
      231    12363        */
      232    12364    2           IF ACCT.ACCT# = ' '

  12364 13 000465   000010 237000 11                 LDAQ    ACCT
        13 000466   000016 117000 14                 CMPAQ   14
        13 000467   000540 601000 13                 TNZ     s:12386
        13 000470   040000 106400                    CMPC    fill='040'O
        13 000471   000012 200310 11                 ADSC9   NAME                     cn=1,n=200
        13 000472   000000 000001 14                 ADSC9   0                        cn=0,n=1
        13 000473   000540 601000 13                 TNZ     s:12386

      233    12365    2             AND NAME.NAME# = ' '
      234    12366    2           THEN                       /* Fill in default */
      235    12367    3           DO;

      236    12368    3               IF SUBSTR(USER_NAME.TEXT,0,1) = '.'

  12368 13 000474   200004 470500                    LDP0    @USER_NAME,,AUTO
        13 000475   000100 101500                    MRL     fill='000'O
        13 000476   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        13 000477   200120 000002                    ADSC9   SITETYPE+2,,AUTO         cn=0,n=2
        13 000500   200120 220100                    LDX0    SITETYPE+2,,AUTO
        13 000501   040000 106500                    CMPC    fill='040'O
        13 000502   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1
        13 000503   000012 000001 14                 ADSC9   10                       cn=0,n=1
        13 000504   000523 601000 13                 TNZ     s:12377

      237    12369    3               THEN            /* User is not registered */
      238    12370    4               DO;

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:34   
      239    12371    4                   ACCT.ACCT# = SUBSTR(USER_NAME.TEXT,1);

  12371 13 000505   000100 101500                    MRL     fill='000'O
        13 000506   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        13 000507   200120 000002                    ADSC9   SITETYPE+2,,AUTO         cn=0,n=2
        13 000510   200120 220100                    LDX0    SITETYPE+2,,AUTO
        13 000511   777777 621010                    EAX1    -1,X0
        13 000512   040000 100540                    MLR     fill='040'O
        13 000513   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
        13 000514   000010 000010 11                 ADSC9   ACCT                     cn=0,n=8

      240    12372    4                   NAME.L# = 0;

  12372 13 000515   000000 236003                    LDQ     0,DU
        13 000516   000012 552040 11                 STBQ    NAME,'40'O

      241    12373    4                   NAME.NAME# = ' ';

  12373 13 000517   040000 100400                    MLR     fill='040'O
        13 000520   000000 000001 14                 ADSC9   0                        cn=0,n=1
        13 000521   000012 200310 11                 ADSC9   NAME                     cn=1,n=200

      242    12374    4               END;

  12374 13 000522   000540 710000 13                 TRA     s:12386

      243    12375    3               ELSE            /* User is registered */
      244    12376    4               DO;

      245    12377    4                   ACCT.ACCT# = ' ';

  12377 13 000523   000000 235000 14                 LDA     0
        13 000524   000000 236000 14                 LDQ     0
        13 000525   000010 757000 11                 STAQ    ACCT

      246    12378    4                   NAME.L# = USER_NAME.SIZ;

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:35   
  12378 13 000526   000000 100500                    MLR     fill='000'O
        13 000527   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        13 000530   000012 000001 11                 ADSC9   NAME                     cn=0,n=1

      247    12379    4                   NAME.NAME# = USER_NAME.TEXT;

  12379 13 000531   000100 101500                    MRL     fill='000'O
        13 000532   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        13 000533   200120 000002                    ADSC9   SITETYPE+2,,AUTO         cn=0,n=2
        13 000534   200120 220100                    LDX0    SITETYPE+2,,AUTO
        13 000535   040000 100540                    MLR     fill='040'O
        13 000536   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
        13 000537   000012 200310 11                 ADSC9   NAME                     cn=1,n=200

      248    12380    4               END;

      249    12381    3           END;

      250    12382        /*
      251    12383             ***** If a user name (rather than an account) was specified,
      252    12384                   then resolve and add to address list ...
      253    12385        */
      254    12386    2           IF ACCT.ACCT# = ' '

  12386 13 000540   000010 237000 11                 LDAQ    ACCT
        13 000541   000016 117000 14                 CMPAQ   14
        13 000542   000633 601000 13                 TNZ     s:12408
        13 000543   040000 106400                    CMPC    fill='040'O
        13 000544   000012 200310 11                 ADSC9   NAME                     cn=1,n=200
        13 000545   000000 000001 14                 ADSC9   0                        cn=0,n=1
        13 000546   000633 600000 13                 TZE     s:12408

      255    12387    2             AND NAME.NAME# ~= ' '
      256    12388    2           THEN
      257    12389    3           DO;

      258    12390    3               VM_UADDRESS.FOLDER = FOLDER;
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:36   

  12390 13 000547   040100 100400                    MLR     fill='040'O
        13 000550   000075 000031 11                 ADSC9   FOLDER                   cn=0,n=25
        13 000551   200017 400031                    ADSC9   VM_UADDRESS+7,,AUTO      cn=2,n=25

      259    12391    3               VM_UADDRESS.PASS = PASSWORD.PASS#;

  12391 13 000552   040100 100400                    MLR     fill='040'O
        13 000553   000104 000010 11                 ADSC9   PASSWORD                 cn=0,n=8
        13 000554   200025 600010                    ADSC9   VM_UADDRESS+13,,AUTO     cn=3,n=8

      260    12392    3               CALL XLATE (VM_UADDRESS.SITENAME, LOWER_UPPER, SITENAME);

  12392 13 000555   000000 470400 xsym               LDP0    B$XL_UPPER$
        13 000556   040100 160400                    MVT     fill='040'O
        13 000557   000106 000010 11                 ADSC9   SITENAME                 cn=0,n=8
        13 000560   200027 600010                    ADSC9   VM_UADDRESS+15,,AUTO     cn=3,n=8
        13 000561   000000 000100                    ARG     0,,PR0

      261    12393    3               VM_UADDRESS.USER_NAME.COUNT = NAME.L#;

  12393 13 000562   000012 236000 11                 LDQ     NAME
        13 000563   000033 772000                    QRL     27
        13 000564   200031 552104                    STBQ    VM_UADDRESS+17,'04'O,AUTO

      262    12394    3               VM_UADDRESS.USER_NAME.TEXT = NAME.NAME#;

  12394 13 000565   040100 100400                    MLR     fill='040'O
        13 000566   000012 200310 11                 ADSC9   NAME                     cn=1,n=200
        13 000567   200032 000310                    ADSC9   VM_UADDRESS+18,,AUTO     cn=0,n=200

      263    12395    3               IF ADDR(EXPAND_FULL#) ~= ADDR(NIL)

  12395 13 000570   200006 236100                    LDQ     @EXPAND_FULL#,,AUTO
        13 000571   000001 116000 14                 CMPQ    1
        13 000572   000616 600000 13                 TZE     s:12401
        13 000573   200006 471500                    LDP1    @EXPAND_FULL#,,AUTO
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:37   
        13 000574   000000 066500                    CMPB    filb='0'B
        13 000575   100000 000001                    BDSC    0,,PR1                   by=0,bit=0,n=1
        13 000576   000020 000022 14                 BDSC    16                       by=0,bit=0,n=18
        13 000577   000616 600000 13                 TZE     s:12401

      264    12396    3                 AND EXPAND_FULL# = %YES#
      265    12397    3               THEN
      266    12398    3                   CALL VMA$EXPAND_LIST_GLOBAL (VM_UADDRESS,VBASE(VM_WORK_),

  12398 13 000600   200007 236100                    LDQ     @EXPAND_USER#,,AUTO
        13 000601   200124 756100                    STQ     SITETYPE+6,,AUTO
        13 000602   000022 236000 14                 LDQ     18
        13 000603   200005 235100                    LDA     @VM_SEARCH_INFO,,AUTO
        13 000604   200122 757100                    STAQ    SITETYPE+4,,AUTO
        13 000605   000023 236000 14                 LDQ     19
        13 000606   200121 756100                    STQ     SITETYPE+3,,AUTO
        13 000607   200010 633500                    EPPR3   VM_UADDRESS,,AUTO
        13 000610   200120 453500                    STP3    SITETYPE+2,,AUTO
        13 000611   200120 630500                    EPPR0   SITETYPE+2,,AUTO
        13 000612   000021 631400 14                 EPPR1   17
        13 000613   000000 701000 xent               TSX1    VMA$EXPAND_LIST_GLOBAL
        13 000614   000666 702000 13                 TSX2    E_PMME
        13 000615   000633 710000 13                 TRA     s:12408

      267    12399    3                     VM_SEARCH_INFO,0,EXPAND_USER#) ALTRET(E_PMME);
      268    12400    3               ELSE
      269    12401    3                   CALL VMA$EXPAND_LIST (VM_UADDRESS,VBASE(VM_WORK_),

  12401 13 000616   200007 236100                    LDQ     @EXPAND_USER#,,AUTO
        13 000617   200124 756100                    STQ     SITETYPE+6,,AUTO
        13 000620   000022 236000 14                 LDQ     18
        13 000621   200005 235100                    LDA     @VM_SEARCH_INFO,,AUTO
        13 000622   200122 757100                    STAQ    SITETYPE+4,,AUTO
        13 000623   000023 236000 14                 LDQ     19
        13 000624   200121 756100                    STQ     SITETYPE+3,,AUTO
        13 000625   200010 631500                    EPPR1   VM_UADDRESS,,AUTO
        13 000626   200120 451500                    STP1    SITETYPE+2,,AUTO
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:38   
        13 000627   200120 630500                    EPPR0   SITETYPE+2,,AUTO
        13 000630   000021 631400 14                 EPPR1   17
        13 000631   000000 701000 xent               TSX1    VMA$EXPAND_LIST
        13 000632   000666 702000 13                 TSX2    E_PMME

      270    12402    3                     VM_SEARCH_INFO,0,EXPAND_USER#) ALTRET(E_PMME);
      271    12403    3           END;                  /* Resolve name loop */

      272    12404        /*
      273    12405             ***** If an account was specified,
      274    12406                   then add to address list ...
      275    12407        */
      276    12408    2           IF ACCT.ACCT# ~= ' '

  12408 13 000633   000010 237000 11                 LDAQ    ACCT
        13 000634   000016 117000 14                 CMPAQ   14
        13 000635   000646 600000 13                 TZE     s:12414
        13 000636   040000 106400                    CMPC    fill='040'O
        13 000637   000012 200310 11                 ADSC9   NAME                     cn=1,n=200
        13 000640   000000 000001 14                 ADSC9   0                        cn=0,n=1
        13 000641   000646 601000 13                 TNZ     s:12414

      277    12409    2             AND NAME.NAME# = ' '
      278    12410    2           THEN
      279    12411    3           DO;

      280    12412    3               CALL VMA$ADD_RENTRY (ACCT,FOLDER,PASSWORD,SITE) ALTRET(E_PMME);

  12412 13 000642   000025 630400 14                 EPPR0   21
        13 000643   000024 631400 14                 EPPR1   20
        13 000644   000000 701000 xent               TSX1    VMA$ADD_RENTRY
        13 000645   000666 702000 13                 TSX2    E_PMME

      281    12413    3           END;

      282    12414    3           DO NEVER;

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:39   
  12414 13 000646   000652 710000 13                 TRA     s:12418

  12409 13 000647                       ERR          null
      283    12415    3   ERR:        ;
      284    12416    3               VM_ADD_HEAD.FLAGS.ERR# = %YES#;

  12416 13 000647   000000 470400 xsym               LDP0    VM_ADDLIST$
        13 000650   400000 236003                    LDQ     -131072,DU
        13 000651   000002 256100                    ORSQ    2,,PR0

      285    12417    3           END;

      286    12418    2       END;                            /* Do INDX1 ... end */

  12418 13 000652   000002 054000 11                 AOS     INDX1
        13 000653   200003 470500                    LDP0    @TREE$,,AUTO
        13 000654   000000 471500                    LDP1    0,,PR0
        13 000655   100001 236100                    LDQ     1,,PR1
        13 000656   000022 772000                    QRL     18
        13 000657   000002 116000 11                 CMPQ    INDX1
        13 000660   000007 605400 13                 TPNZ    s:12236

      287    12419        /*
      288    12420             ***** If there are any errors in the address list
      289    12421                   then altreturn so they can be reported ...
      290    12422        */
      291    12423    1       IF VM_ADD_HEAD.FLAGS.ERR#

  12423 13 000661   000000 473400 xsym               LDP3    VM_ADDLIST$
        13 000662   300002 234100                    SZN     2,,PR3
        13 000663   000665 605000 13                 TPL     s:12427

      292    12424    1       THEN
      293    12425    1           ALTRETURN;

  12425 13 000664   000000 702200 xent               TSX2  ! X66_AALT

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:40   
      294    12426    1       ELSE
      295    12427    1           RETURN;

  12427 13 000665   000000 702200 xent               TSX2  ! X66_ARET

      296    12428        /**/
      297    12429    1   E_PMME:
      298    12430    1       ALTRETURN;

  12430 13 000666   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

PSID
 Sect OctLoc
  11     004   000000 000001   040040 040040   040040 ******                    ....      ..

ACCT
 Sect OctLoc
  11     010   040040 040040   040040 040040

NAME
 Sect OctLoc
  11     012   037040 040040   040040 040040   040040 040040   040040 040040    .
  11     016   040040 040040   040040 040040   040040 040040   040040 040040
  11     072*  040040 040040   040040 040040   040*** ******                             ...

FOLDER
 Sect OctLoc
  11     075   ****** ******   ****** ******   ****** ******   ****** ******    ................

PASSWORD
 Sect OctLoc
  11     104   040040 040040   040040 040040

ERR_TEXT
 Sect OctLoc
  11     110   001040 040040   040040 040040   040040 040040   040040 040040    .
  11     114   040040 040040   040040 040040   040040 040040   040040 040040
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:41   

E_BADWSN
 Sect OctLoc
  12     000   261501 000030                                                    ....

E_BADDOMAIN
 Sect OctLoc
  12     001   261501 001730                                                    ....

E_PSIDFOLDERTOOLONG
 Sect OctLoc
  12     002   261501 001720                                                    ....

(unnamed)
 Sect OctLoc
  12     003   056056 056040                                                    ...

(unnamed)
 Sect OctLoc
  14     000   040040 040040   000000 006014   000001 000000   000002 006000        ............
  14     004   000007 777640   000110 006000   000003 000000   000004 006000    .....H..........
  14     010   000001 006000   045040 040040   056040 040040   000000 006000    ....%   .   ....
  14     014   000106 006000   000120 006000   040040 040040   040040 040040    .F...P..
  14     020   000000 000000   000005 000000   000020 006000   000001 006000    ................
  14     024   000004 000000   000010 006000   000075 006000   000104 006000    .........=...D..
  14     030   000120 006000                                                    .P..
      299    12431    1   END VMA$ADDRESS;
      300    12432        %EOD;

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:42   
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   XUM_MACRO_C.:LIB_E05  is referenced.
   XU_SUBS_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   VW_NODEATER_E.:VMB6TOU  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ADDRESS.
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:43   

 **** Variables and constants ****

  ****  Section 011  Data  VMA$ADDRESS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    10-0-0/c STRC(72)    r     1 ACCT                       0-0-0/w PTR         r     1 BLK1$
     1-0-0/w PTR         r     1 BLK2$                    110-0-0/c STRC(288)   r     1 ERR_TEXT
    75-0-0/c CHAR(25)    r     1 FOLDER                     2-0-0/w SBIN        r     1 INDX1
     3-0-0/w SBIN        r     1 INDX2                     12-0-0/c STRC(1809)  r     1 NAME
   104-0-0/c STRC(72)    r     1 PASSWORD                   4-0-0/d STRC(90)    r     1 PSID
   120-0-0/c CHAR(8)     r     1 SITE                     106-0-0/c CHAR(8)     r     1 SITENAME

  ****  Section 012 RoData VMA$ADDRESS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w STRC        r     1 E_BADDOMAIN                0-0-0/w STRC        r     1 E_BADWSN
     2-0-0/w STRC        r     1 E_PSIDFOLDERTOOLONG

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @EXPAND_FULL#              7-0-0/w PTR         r     1 @EXPAND_USER#
     3-0-0/w PTR         r     1 @TREE$                     4-0-0/w PTR         r     1 @USER_NAME
     5-0-0/w PTR         r     1 @VM_SEARCH_INFO          114-0-0/w PTR         r     1 DOMAIN$
    *0-0-0/b BIT         r     1 EXPAND_FULL#              *0-0-0/b BIT         r     1 EXPAND_USER#
   115-0-0/w PTR         r     1 SITE$                    116-0-0/w UBIN        r     1 SITETYPE
    *0-0-0/w PTR         r     1 TREE$                     *0-0-0/c ASTR(9)     r     1 USER_NAME
    *0-0-0/w STRC(1260)  r     1 VM_SEARCH_INFO            10-0-0/w STRC(2448)  r     1 VM_UADDRESS

  ****  SYMREF variables  ****

PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:44   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/c ASTR(9)     r     1 ERRMSG_FID
     0-0-0/w UBIN              1 M$DO_NUM                   0-0-0/w UBIN              1 M$LO_NUM
     0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM         0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM
     0-0-0/w UBIN              1 M$MAIL_FILE_NUM            0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM
     0-0-0/w UBIN              1 M$ME_NUM                   0-0-0/w UBIN              1 M$NODE_NUM
     0-0-0/w UBIN              1 M$SI_NUM                   0-0-0/w UBIN              1 M$WORK_NUM
     0-0-0/w PTR         r     1 VM_ADDLIST$                0-0-0/d VECT              1 VM_ADDLIST_
     0-0-0/w PTR               1 VM_ADDREC$                 0-0-0/d VECT              1 VM_ADDREC_
     0-0-0/w PTR               1 VM_COPY$                   0-0-0/d VECT              1 VM_COPY_
     0-0-0/w PTR               1 VM_ENCLLIST$               0-0-0/d VECT              1 VM_ENCLLIST_
     0-0-0/w PTR               1 VM_ENCLREC$                0-0-0/d VECT              1 VM_ENCLREC_
     0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME       0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME
     0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS       0-0-0/w PTR               1 VM_HEADER$
     0-0-0/d VECT              1 VM_HEADER_                 0-0-0/d VECT              1 VM_HEADER_INIT_
     0-0-0/w PTR               1 VM_INPUT$                  0-0-0/d VECT              1 VM_INPUT_
     0-0-0/c STRC(72)          1 VM_MAILCG_NAME             0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA
     0-0-0/c STRC(72)          1 VM_MAIL_ACCT               0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME
     0-0-0/w PTR               1 VM_PARSEAREA$              0-0-0/d VECT              1 VM_PARSEAREA_
     0-0-0/w PTR               1 VM_PROFILE$                0-0-0/d VECT              1 VM_PROFILE_
     0-0-0/w PTR               1 VM_SELECT$                 0-0-0/d VECT              1 VM_SELECT_
     0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME          0-0-0/c CHAR(8)     r     1 VM_SITENAME
     0-0-0/w PTR               1 VM_WORK$                   0-0-0/d VECT        r     1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 LOWER_UPPER                0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:45   
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/w STRC(144)   r     1 P$B                        0-0-0/w ASTR(153)   r     1 P$S
     0-0-0/w STRC(252)   r     1 VM_ADD_HEAD                0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$ADDRESS requires 439 words for executable code.
   Procedure VMA$ADDRESS requires 86 words of local(AUTO) storage.
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:46   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:47   
          MINI XREF LISTING

ACCT
     12004**DCL     12412<>CALL
ACCT.ACCT#
     12004**DCL     12241<<ASSIGN  12255<<ASSIGN  12364>>IF      12371<<ASSIGN  12377<<ASSIGN  12386>>IF
     12408>>IF
B$XL_UPPER$
     11771**DCL     11772--IMP-PTR 12333>>CALLBLT 12392>>CALLBLT
BAD_SITE
     12343**LABEL   12338--GOTO    12356--GOTO
BLK1$
     11973**DCL     12236<<ASSIGN  12251>>DOINDEX 12252>>ASSIGN
BLK2$
     11974**DCL     12252<<ASSIGN  12253>>DOCASE  12255>>ASSIGN  12255>>ASSIGN  12257>>ASSIGN  12257>>ASSIGN
     12259>>ASSIGN  12259>>ASSIGN  12261>>ASSIGN  12262>>ASSIGN  12262>>ASSIGN  12264>>ASSIGN  12264>>ASSIGN
     12266>>ASSIGN  12268>>ASSIGN
DOMAIN$
     11975**DCL     12247<<ASSIGN  12268<<ASSIGN  12300>>IF      12302>>ASSIGN  12302>>ASSIGN  12317>>DOINDEX
     12320>>CALLBLT 12320>>CALLBLT 12322>>CALLBLT 12322>>CALLBLT 12323>>ASSIGN  12336>>IF      12345>>IF
     12354>>IF
ERR
     12409**LABEL   12285--GOTO    12315--GOTO    12350--GOTO
ERRMSG_FID.L#
      8226**DCL      8226--IMP-SIZ
ERR_TEXT
     12073**DCL     12314--CALL    12347--CALL    12349--CALL
ERR_TEXT.L#
     12073**DCL     12308<<ASSIGN  12312<<ASSIGN  12344<<ASSIGN
ERR_TEXT.NAME#
     12073**DCL     12307<<ASSIGN  12311<<CALLBLT 12343<<ASSIGN
EXPAND_FULL#
     11808**DCL        26--PROC    12395--IF      12395>>IF
EXPAND_USER#
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:48   
     11809**DCL        26--PROC    12398<>CALL    12401<>CALL
E_BADDOMAIN
     12139**DCL     12314<>CALL    12349<>CALL
E_BADWSN
     12090**DCL     12347<>CALL
E_PMME
     12430**LABEL   12398--CALLALT 12401--CALLALT 12412--CALLALT
E_PSIDFOLDERTOOLONG
     12188**DCL     12284<>CALL
FOLDER
     12033**DCL     12249<<ASSIGN  12259<<ASSIGN  12279>>ASSIGN  12290<<ASSIGN  12390>>ASSIGN  12412<>CALL
INDX1
     11978**DCL     12235<<DOINDEX 12236>>ASSIGN
INDX2
     11979**DCL     12251<<DOINDEX 12252>>ASSIGN  12317<<DOINDEX 12318>>IF      12320>>CALLBLT 12320>>CALLBLT
     12322>>CALLBLT 12322>>CALLBLT 12323>>ASSIGN
LOWER_UPPER
     11772**DCL     12333>>CALLBLT 12392>>CALLBLT
NAME.L#
     12031**DCL     12242<<ASSIGN  12261<<ASSIGN  12320>>CALLBLT 12322>>CALLBLT 12323<<ASSIGN  12323>>ASSIGN
     12372<<ASSIGN  12378<<ASSIGN  12393>>ASSIGN
NAME.NAME#
     12031**DCL     12243<<ASSIGN  12262<<ASSIGN  12320<<CALLBLT 12322<<CALLBLT 12364>>IF      12373<<ASSIGN
     12379<<ASSIGN  12386>>IF      12394>>ASSIGN  12408>>IF
P$B.CODE
     11896**DCL     12253>>DOCASE
P$B.NSUBLKS
     11900**DCL     12235>>DOINDEX 12251>>DOINDEX 12302>>ASSIGN  12317>>DOINDEX
P$B.SUBLK$
     11921**DCL     12236>>ASSIGN  12252>>ASSIGN  12302>>ASSIGN  12320>>CALLBLT 12320>>CALLBLT 12322>>CALLBLT
     12322>>CALLBLT 12323>>ASSIGN
P$S.COUNT
     11957**DCL     11960--IMP-SIZ 12255>>ASSIGN  12257>>ASSIGN  12259>>ASSIGN  12261>>ASSIGN  12262>>ASSIGN
     12264>>ASSIGN  12303>>IF      12305>>IF      12307>>ASSIGN  12308>>ASSIGN  12311>>CALLBLT 12320>>CALLBLT
     12322>>CALLBLT 12323>>ASSIGN  12332>>ASSIGN  12344>>ASSIGN
P$S.TEXT
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:49   
     11960**DCL     12255>>ASSIGN  12257>>ASSIGN  12259>>ASSIGN  12262>>ASSIGN  12264>>ASSIGN  12307>>ASSIGN
     12311>>CALLBLT 12320>>CALLBLT 12322>>CALLBLT 12332>>ASSIGN
PASSWORD
     12045**DCL     12412<>CALL
PASSWORD.PASS#
     12045**DCL     12244<<ASSIGN  12264<<ASSIGN  12391>>ASSIGN
PSID.SN#
     11991**DCL     12240<<ASSIGN  12257<<ASSIGN  12276>>IF      12289>>ASSIGN
SITE
     12075**DCL     12246<<ASSIGN  12333<<CALLBLT 12334>>IF      12341<>CALL    12353>>ASSIGN  12412<>CALL
SITE$
     11976**DCL     12248<<ASSIGN  12266<<ASSIGN  12302<<ASSIGN  12303>>IF      12305>>IF      12307>>ASSIGN
     12307>>ASSIGN  12308>>ASSIGN  12311>>CALLBLT 12311>>CALLBLT 12330>>IF      12332>>ASSIGN  12332>>ASSIGN
     12344>>ASSIGN
SITENAME
     12047**DCL     12245<<ASSIGN  12303--IF      12332<<ASSIGN  12333>>CALLBLT 12341<>CALL    12343>>ASSIGN
     12353<<ASSIGN  12392>>CALLBLT
SITETYPE
     11977**DCL     12341<>CALL    12352>>IF
TREE$
     11775**DCL        26--PROC    12235>>DOINDEX 12236>>ASSIGN
USER_NAME
     11777**DCL        26--PROC
USER_NAME.SIZ
     11778**DCL     11779--IMP-SIZ 12368>>IF      12371>>ASSIGN  12378>>ASSIGN  12379>>ASSIGN
USER_NAME.TEXT
     11779**DCL     12368>>IF      12371>>ASSIGN  12379>>ASSIGN
VMA$ADD_RENTRY
     11966**DCL-ENT 12412--CALL
VMA$ERRMSG
     11970**DCL-ENT 12284--CALL    12314--CALL    12347--CALL    12349--CALL
VMA$EXPAND_LIST
     11968**DCL-ENT 12401--CALL
VMA$EXPAND_LIST_GLOBAL
     11969**DCL-ENT 12398--CALL
VMA$GET_SITE_NAME
PL6.E3A0      #001=VMA$ADDRESS File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:01 Page:50   
     11971**DCL-ENT 12341--CALL
VM_ADDLIST$
      8080**DCL     11825--IMP-PTR 12230>>ASSIGN  12231>>ASSIGN  12416>>ASSIGN  12423>>IF
VM_ADD_HEAD.FLAGS
     11830**DCL     12231<<ASSIGN
VM_ADD_HEAD.FLAGS.ERR#
     11831**DCL     12416<<ASSIGN  12423>>IF
VM_ADD_HEAD.NUM_ENTRIES
     11828**DCL     12230<<ASSIGN
VM_SEARCH_INFO
     11791**DCL        26--PROC    12398<>CALL    12401<>CALL
VM_SITENAME
      8349**DCL     12334>>IF
VM_UADDRESS
     11854**DCL     12398<>CALL    12401<>CALL
VM_UADDRESS.FOLDER
     11869**DCL     11870--REDEF   12279<<ASSIGN  12290>>ASSIGN  12390<<ASSIGN
VM_UADDRESS.NOMAD.DELIM
     11872**DCL     12281>>IF
VM_UADDRESS.NOMAD.PSID
     11873**DCL     12289<<ASSIGN
VM_UADDRESS.PASS
     11874**DCL     12391<<ASSIGN
VM_UADDRESS.SITENAME
     11876**DCL     12392<<CALLBLT
VM_UADDRESS.USER_NAME.COUNT
     11878**DCL     12393<<ASSIGN
VM_UADDRESS.USER_NAME.TEXT
     11879**DCL     12394<<ASSIGN
VM_WORK_
      8106**DCL     12398<>CALL    12401<>CALL
X$STRING.SIZ
      8072**DCL      8073--IMP-SIZ

PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:51   
      301        1        /*T***********************************************************/
      302        2        /*T*                                                         */
      303        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      304        4        /*T*                                                         */
      305        5        /*T***********************************************************/
      306        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      307        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      308        8        /*F*
      309        9             NAME: VMA$EXPAND_LIST
      310       10             PURPOSE:
      311       11                   This routine will resolve a LIST definition into GLOBAL info.
      312       12             DESCRIPTION:
      313       13                   This routine will resolve an address definition into a
      314       14                   list of GLOBAL address LISTs, REGISTERED NAMES, or accounts.
      315       15                   The ADDR_SPEC is assumed to be an address LIST. If it is
      316       16                   determined that it is not, then it must be a REGISTERED NAME
      317       17                   or account specification. Otherwise, an error will result.
      318       18
      319       19                   Once a globally defined address LIST is found, processing
      320       20                   will stop. This is so that space may be saved in the storage
      321       21                   of address specification lists.
      322       22
      323       23                   NOTE: This routine depends upon the calling routine setting
      324       24                         certain variables in the VM_ADD_HEAD structure in
      325       25                         order that correct performance will result.
      326       26
      327       27                         VM_ADD_HEAD.NUM_ENTRIES = 0;
      328       28                         VM_ADD_HEAD.FLAGS = '0'B;
      329       29
      330       30                   This routine has four parameters.
      331       31
      332       32                   ADDR_SPEC    - address to resolve.
      333       33                   WORK$        - ptr to next address in work area to be
      334       34                                  used for holding the new address LIST.
      335       35                                  VM_WORK_ describes the work area.
      336       36                   SEARCH_INFO  - array of DCB numbers which are open to
      337       37                                 folders to be used to resolve address LISTs.
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:52   
      338       38                                 The last entry in this structure must point
      339       39                                 to the GLOBAL set of address LIST definitions.
      340       40                   SEARCH_LEVEL - starting index to use into SEARCH_INFO.
      341       41                                  Normally 0, but when recursion is found
      342       42                                  this number reflects the new level to
      343       43                                  start looking for the ADDR_SPEC.
      344       44                   EXPAND_USER# - Copy the user def to the finished list?
      345       45                                  (Optional. Only meaningful when EXPAND_FULL
      346       46                                  is specified. Default=YES.)
      347       47        */
      348       48        VMA$EXPAND_LIST: PROC (ADDR_SPEC,WORK$,VM_SEARCH_INFO,SEARCH_LEVEL,EXPAND_USER#)
                48            ALTRET;
      349       49        /***** Include files *****/
      350       50          %INCLUDE B_ERRORS_C;
      351     1177          %INCLUDE CP_6;
      352     6736          %INCLUDE CP_6_SUBS;
      353     7276          %INCLUDE VM_MACRO_C;
      354     8544          %INCLUDE VM_SUBS_C;
      355     8804          %INCLUDE VM_DATA_R;
      356     9235            %include B$TABLES_C;
      357     9343          %B$XL_UPPER(NAME=LOWER_UPPER);
      358     9347        /***** Parameters *****/
      359     9348          %VM_ADDTYPES;
      360     9352          %VM_KEYTYPES;
      361     9373          %VM_UADDRESS (NAME=ADDR_SPEC,STCLASS=" ");
      362     9410    1   DCL WORK$ PTR;
      363     9411          %VM_SEARCH_INFO (STCLASS=" ");
      364     9438    1   DCL SEARCH_LEVEL SBIN WORD;
      365     9439    1   DCL EXPAND_USER# BIT(1);
      366     9440        /***** External routines *****/
      367     9441    1   DCL VMA$ADD_RENTRY ENTRY(6) ALTRET;
      368     9442    1   DCL VMA$ADD_UENTRY ENTRY(6) ALTRET;
      369     9443    1   DCL VMA$GET_LIST ENTRY(3) ALTRET;
      370     9444    1   DCL VMA$GET_NEXT_ENTRY ENTRY(4) ALTRET;
      371     9445    1   DCL VMA$GET_SITE_NAME ENTRY (4) ALTRET;
      372     9446        /***** Local variables *****/
      373     9447    1   DCL NEXT$ PTR AUTO;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:53   
      374     9448    1   DCL SEARCH_INDX SBIN WORD AUTO;
      375     9449    1   DCL NEW_WORK$ PTR AUTO;
      376     9450    1   DCL NEW_SEARCH_LEVEL SBIN WORD AUTO;
      377     9451    1   DCL EXPAND# UBIN WORD AUTO;
      378     9452    1   DCL SITENAME CHAR (8);
      379     9453        /***** Based structures *****/
      380     9454          %B$TCB (STCLASS="BASED(B$TCB$)");
      381     9457          %B$ALT;
      382     9465        /***** Mail structures *****/
      383     9466        %SET LISTMAC='1'B;
      384     9467        %SET LISTEXP='1'B;
      385     9468        %SET LISTSUB='1'B;
      386     9469          %VM_ADD_HEAD (STCLASS="BASED(WORK$)");
              9470        %LSET LISTDIR='0'B;
              9479    1   DCL 1 VM_ADD_HEAD BASED(WORK$),
              9480    1         2 ADDRESS_SIZE UBIN WORD /*(0)/**/,
              9481                               /* Number of words in this address list */
              9482    1         2 NUM_ENTRIES UBIN WORD /*(0)/**/,
              9483                               /* Number of entries in list */
              9484    1         2 FLAGS,
              9485    1           3 ERR# BIT(1) UNAL /*('0'B)/**/,
              9486                               /* Some error found in address list */
              9487    1           3 RESERVED BIT(35) UNAL /*('0'B)/**/,
              9488                               /* Reserved for future expansion */
              9489    1         2 HEAD$ PTR /*(ADDR(NIL))/**/,
              9490                               /* Head of link list */
              9491    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
              9492                               /* Ptr to first entry in free block list */
              9493    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
              9494                               /* Ptr to next available word in work area */
              9495    1         2 WORK_AREA UBIN WORD;
              9496                               /* First word of work area. */
      387     9498          %VM_RADDRESS (STCLASS=AUTO);
              9499        %LSET LISTDIR='0'B;
              9508    1   DCL 1 VM_RADDRESS AUTO,
              9509    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
              9510                               /* Ptr to next entry on list */
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:54   
              9511    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
              9512                               /* Ptr to previous entry on list */
              9513    1         2 FLAGS,
              9514    1           3 UNDEF# BIT (1) UNAL /*('0'B)/**/,
              9515                               /* This entry is not valid. Report as an error */
              9516    1           3 USER# BIT(1) UNAL /*('0'B)/**/,
              9517                               /* USER def, not LIST */
              9518    1           3 RESERVED BIT(7) UNAL /*('0'B)/**/,
              9519                               /* Reserved for future use */
              9520    1         2 TYPE UBIN BYTE UNAL /*(1)/**/,
              9521    1         2 NAME_KEY CHAR(20) CALIGNED /*(' ')/**/,
              9522                               /* Used only for USER definitions */
              9523    1         2 FOLDER CHAR(25) CALIGNED /*(' '*0)/**/,
              9524    1         2 NOMAD REDEF FOLDER,
              9525    1           3 FOLDER CHAR (18) CALIGNED,
              9526    1           3 DELIM CHAR (1) CALIGNED,
              9527    1           3 PSID CHAR (6) CALIGNED,
              9528    1         2 PASS CHAR(8) CALIGNED /*(' '*0)/**/,
              9529                               /* NOTE: Passwords are encrypted */
              9530    1         2 SITENAME CHAR(8) CALIGNED /*(' '*0)/**/,
              9531    1         2 ACCT CHAR(8) CALIGNED /*(' '*0)/**/;
      388     9533          %VM_UADDRESS (STCLASS=AUTO);
              9534        %LSET LISTDIR='0'B;
              9543    1   DCL 1 VM_UADDRESS AUTO,
              9544    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
              9545                               /* Ptr to next entry on list */
              9546    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
              9547                               /* Ptr to previous entry on list */
              9548    1         2 FLAGS,
              9549    1           3 UNDEF# BIT (1) UNAL /*('0'B)/**/,
              9550                               /* This entry is not valid. Report as an error */
              9551    1           3 USER# BIT(1) UNAL /*('0'B)/**/,
              9552                               /* USER def, not LIST */
              9553    1           3 RESERVED BIT(7) UNAL /*('0'B)/**/,
              9554                               /* Reserved for future use */
              9555    1         2 TYPE UBIN BYTE UNAL /*(2)/**/,
              9556    1         2 NAME_KEY CHAR(20) CALIGNED /*(' ')/**/,
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:55   
              9557                               /* Used only for USER definitions */
              9558    1         2 FOLDER CHAR(25) CALIGNED /*(' '*0)/**/,
              9559    1         2 NOMAD REDEF FOLDER,
              9560    1           3 FOLDER CHAR (18) CALIGNED,
              9561    1           3 DELIM CHAR (1) CALIGNED,
              9562    1           3 PSID CHAR (6) CALIGNED,
              9563    1         2 PASS CHAR(8) CALIGNED /*(' '*0)/**/,
              9564                               /* NOTE: Passwords are encrypted */
              9565    1         2 SITENAME CHAR(8) CALIGNED /*(' '*0)/**/,
              9566    1         2 USER_NAME,
              9567    1           3 COUNT UBIN BYTE CALIGNED /*(0)/**/,
              9568    1           3 TEXT CHAR(200) CALIGNED /*(' ')/**/;
      389     9570          %VM_LISTKEY (STCLASS=STATIC);
              9571        %LSET LISTDIR='0'B;
              9580    1   DCL 1 VM_LISTKEY STATIC,
              9581    1         2 COUNT UBIN BYTE CALIGNED INIT(201)/**/,
              9582    1         2 TYPE UBIN BYTE CALIGNED INIT(60)/**/,
              9583                        /* The type of the record to be accessed. */
              9584    1         2 TEXT CHAR(200) CALIGNED;
      390     9586          %VM_USERKEY (STCLASS=STATIC);
              9587        %LSET LISTDIR='0'B;
              9596    1   DCL 1 VM_USERKEY STATIC,
              9597    1         2 COUNT UBIN BYTE CALIGNED INIT(201)/**/,
              9598    1         2 TYPE UBIN BYTE CALIGNED INIT(80)/**/,
              9599                        /* The type of the record to be accessed. */
              9600    1         2 TEXT CHAR(200) CALIGNED;
      391     9602        %SET LISTMAC='0'B;
      392     9603        %SET LISTEXP='0'B;
      393     9604        %SET LISTSUB='0'B;
      394     9605          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
      395     9640          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS=BASED);
      396     9677        /***** Local substitutions *****/
      397     9678          %EQU EXPAND_FULL = 1;
      398     9679          %EQU EXPAND_LOCAL = 2;
      399     9680          %EQU EXPAND_GLOBAL = 3;
      400     9681        %EJECT;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:56   
      401     9682        /*
      402     9683             ***** Set the flag that determines whether to do a full
      403     9684                   or partial expansion ...
      404     9685        */
      405     9686    1       EXPAND# = %EXPAND_LOCAL;
      406     9687    1       GOTO EXPAND;
      407     9688        %EJECT;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:57   
      408     9689        /*F*
      409     9690             NAME: VMA$EXPAND_LIST_GLOBAL
      410     9691             PURPOSE:
      411     9692                   This routine will resolve a LIST definition to a user list.
      412     9693             DESCRIPTION:
      413     9694                   This routine works just as VMA$EXPAND_LIST does. The
      414     9695                   only difference is that it will not resolve the global
      415     9696                   USER specifications; instead, it returns the user names.
      416     9697        */
      417     9698    1   VMA$EXPAND_LIST_GLOBAL: ENTRY (ADDR_SPEC,WORK$,VM_SEARCH_INFO,SEARCH_LEVEL,
              9698            EXPAND_USER#) ALTRET;
      418     9699        /*
      419     9700             ***** Set the flag that determines whether to do a full
      420     9701                   or partial expansion ...
      421     9702        */
      422     9703    1       EXPAND# = %EXPAND_GLOBAL;
      423     9704    1       GOTO EXPAND;
      424     9705        %EJECT;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:58   
      425     9706        /*F*
      426     9707             NAME: VMA$EXPAND_LIST_FULL
      427     9708             PURPOSE:
      428     9709                   This routine will fully resolve a LIST definition.
      429     9710             DESCRIPTION:
      430     9711                   This routine works just as VMA$EXPAND_LIST does. The
      431     9712                   only difference is that it will resolve the address
      432     9713                   LIST specification into individual REGISTERED NAMES or
      433     9714                   accounts, rather just into GLOBAL LIST definitions,
      434     9715                   REGISTERED NAMES, or accounts.
      435     9716        */
      436     9717    1   VMA$EXPAND_LIST_FULL: ENTRY (ADDR_SPEC,WORK$,VM_SEARCH_INFO,SEARCH_LEVEL,
              9717            EXPAND_USER#) ALTRET;
      437     9718        /*
      438     9719             ***** Set the flag that determines whether to do a full
      439     9720                   or partial expansion ...
      440     9721        */
      441     9722    1       EXPAND# = %EXPAND_FULL;
      442     9723    1       GOTO EXPAND;
      443     9724        %EJECT;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:59   
      444     9725        /*
      445     9726             ***** Unless the address spec that is about to be expanded
      446     9727                   refers to the local site (primary or synonymous name)
      447     9728                   it must be copied exactly as is to the address list for
      448     9729                   later processing ...
      449     9730        */
      450     9731    1   EXPAND:
      451     9732    1       CALL VMA$GET_SITE_NAME (ADDR_SPEC.SITENAME, SITENAME)
      452     9733    2       WHENALTRETURN DO;
      453     9734    2           call xlate( SITENAME, LOWER_UPPER, ADDR_SPEC.SITENAME );
      454     9735    2       END;
      455     9736    1       IF SITENAME ~= ' ' AND SITENAME ~= VM_SITENAME
      456     9737    1       THEN                            /* Not a local definition */
      457     9738    2       DO;                          /* Copy ADDR_SPEC unchanged */
      458     9739    2           GOTO STORE_ADDRESS;
      459     9740    2       END;
      460     9741        /*
      461     9742             ***** Try to find a list definition for this ADDR_SPEC ...
      462     9743        */
      463     9744    1       VM_LISTKEY.TEXT = SUBSTR(ADDR_SPEC.USER_NAME.TEXT,0,ADDR_SPEC.USER_NAME.COUNT);
      464     9745    1       IF ADDR(SEARCH_LEVEL) ~= ADDR(NIL)
      465     9746    1       THEN
      466     9747    1           SEARCH_INDX = SEARCH_LEVEL;
      467     9748    1       ELSE                            /* Start at bottom */
      468     9749    1           SEARCH_INDX = 0;
      469     9750    1       IF (SEARCH_INDX + 1) > VM_SEARCH_INFO.NUM_ENTRIES
      470     9751    1       THEN                            /* Not that many levels available */
      471     9752    1           GOTO STORE_ERR_ADDRESS;
      472     9753    1   TRY_AGAIN:
      473     9754    1       CALL VMA$GET_LIST (VM_LISTKEY,WORK$,
      474     9755    1         VM_SEARCH_INFO.DCB#(SEARCH_INDX)) ALTRET(E_READ);
      475     9756    2       DO NEVER;
      476     9757    2   E_READ:
      477     9758    2           IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOKEY
      478     9759    2           THEN
      479     9760    3           DO;                    /* Search another folder */
      480     9761    3               SEARCH_INDX = SEARCH_INDX + 1;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:60   
      481     9762    3               IF SEARCH_INDX = VM_SEARCH_INFO.NUM_ENTRIES
      482     9763    3               THEN            /* Must not be defined as a list */
      483     9764    4               DO;
      484     9765        /*
      485     9766             ***** See if it is a registered name ...
      486     9767        */
      487     9768    4                   VM_USERKEY.TEXT = VM_LISTKEY.TEXT;
      488     9769    4                   CALL VMA$GET_LIST (VM_USERKEY,WORK$,
      489     9770    4                     M$MAIL_GLOBAL_NUM) ALTRET(STORE_ERR_ADDRESS);
      490     9771    4                   IF EXPAND# ~= %EXPAND_FULL
      491     9772    4                   THEN /* Don't expand user def */
      492     9773    4                       GOTO STORE_ADDRESS;
      493     9774    4                   IF ADDR(EXPAND_USER#) ~= ADDR(NIL)
      494     9775    4                     AND EXPAND_USER# = %NO#
      495     9776    4                   THEN /* Don't expand user def */
      496     9777    4                       GOTO STORE_ADDRESS;
      497     9778    4                   ELSE
      498     9779    4                       GOTO MOVE_USER_DEF;
      499     9780    4               END;
      500     9781    3               GOTO TRY_AGAIN;
      501     9782    3           END;
      502     9783        /*
      503     9784             ***** Otherwise, some other bad error. Abort processing ...
      504     9785        */
      505     9786    2           ALTRETURN;
      506     9787    2       END;                            /* Do never ... end */
      507     9788        /*
      508     9789             ***** If the address list contains no entries,
      509     9790                   then this is an error. Report it...
      510     9791        */
      511     9792    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0
      512     9793    1       THEN
      513     9794    2       DO;
      514     9795    2           GOTO STORE_ERR_ADDRESS;
      515     9796    2       END;
      516     9797        /*
      517     9798             ***** A definition was found.
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:61   
      518     9799                   If the definition is the global address list
      519     9800                   definition then it must not be expanded any further,
      520     9801                   unless, EXPAND_FULL was specified.
      521     9802                   If not, then expand this definition ...
      522     9803        */
      523     9804    1       IF VM_SEARCH_INFO.DCB#(SEARCH_INDX) = M$MAIL_GLOBAL_NUM
      524     9805    1         AND EXPAND# = %EXPAND_LOCAL
      525     9806    1       THEN
      526     9807    2       DO;                          /* Expand no further */
      527     9808    2           GOTO STORE_ADDRESS;
      528     9809    2       END;
      529     9810        /*
      530     9811             ***** Try to resolve it further ...
      531     9812        */
      532     9813    1       NEXT$ = VM_ADD_HEAD.HEAD$;        /* First list def */
      533     9814    2       DO FOREVER;
      534     9815    2           CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS,VM_RADDRESS,NEXT$,WORK$) ALTRET(
              9815                    END_LOOP);
      535     9816    2           IF VM_UADDRESS.TYPE = %VM_ADD_RESOLVED
      536     9817    2           THEN                       /* No further resolution needed */
      537     9818    3           DO;
      538     9819    3               CALL VMA$ADD_RENTRY (VM_RADDRESS.ACCT,VM_RADDRESS.FOLDER,
      539     9820    3                 VM_RADDRESS.PASS,VM_RADDRESS.SITENAME) ALTRET(E_PMME);
      540     9821    3           END;
      541     9822    2           ELSE                       /* Need to resolve this further */
      542     9823    3           DO;
      543     9824    3               NEW_WORK$ = PINCRW(WORK$,VM_ADD_HEAD.ADDRESS_SIZE);
      544     9825        /*
      545     9826             ***** If this entry is the same as the name of the
      546     9827                   ADDRESS_SPEC, then we have a recursive definition.
      547     9828                   Further expansion of this entry must take place at
      548     9829                   a higher level so as to avoid loops ...
      549     9830        */
      550     9831    3               IF SUBSTR(VM_UADDRESS.USER_NAME.TEXT,0,VM_UADDRESS.USER_NAME.COUNT) =
      551     9832    3                 SUBSTR(ADDR_SPEC.USER_NAME.TEXT,0,ADDR_SPEC.USER_NAME.COUNT)
      552     9833    3               THEN
      553     9834    3                   NEW_SEARCH_LEVEL = SEARCH_INDX + 1;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:62   
      554     9835    3               ELSE
      555     9836    3                   NEW_SEARCH_LEVEL = 0;
      556     9837                                                /*
      557     9838                                                     ***** If ADDR_SPEC contains a folder or
      558     9839                                           password spec, copy them into new address ...
      559     9840                                           */
      560     9841    3               IF ADDR_SPEC.FOLDER ~= ' '
      561     9842    3               THEN
      562     9843    3                   VM_UADDRESS.FOLDER = ADDR_SPEC.FOLDER;
      563     9844    3               IF ADDR_SPEC.PASS ~= ' '
      564     9845    3               THEN
      565     9846    3                   VM_UADDRESS.PASS = ADDR_SPEC.PASS;
      566     9847    3               IF EXPAND# = %EXPAND_FULL
      567     9848    3               THEN
      568     9849    3                   CALL VMA$EXPAND_LIST_FULL (VM_UADDRESS,NEW_WORK$,
      569     9850    3                     VM_SEARCH_INFO,NEW_SEARCH_LEVEL) ALTRET(NOT_DEFINED);
      570     9851    4               ELSE DO;
      571     9852    4                   IF EXPAND# = %EXPAND_GLOBAL
      572     9853    5                   THEN DO;
      573     9854        /*
      574     9855                ***** If we're not doing a FULL expansion, see if this resolves
      575     9856                      to a USER, and avoid further expansion if it does.
      576     9857        */
      577     9858    5                       VM_USERKEY.TEXT = SUBSTR (VM_UADDRESS.USER_NAME.TEXT, 0,
      578     9859    5                         VM_UADDRESS.USER_NAME.COUNT);
      579     9860    5                       CALL VMA$GET_LIST (VM_USERKEY,NEW_WORK$,M$MAIL_GLOBAL_NUM)
      580     9861    6                       WHENRETURN DO;
      581     9862    6                           CALL VMA$ADD_UENTRY (VM_UADDRESS.USER_NAME, VM_UADDRESS.
              9862                                    FOLDER,
      582     9863    6                             VM_UADDRESS.PASS, VM_UADDRESS.SITENAME, %NO#)
      583     9864    6                             ALTRET(E_PMME);
      584     9865    6                       END;
      585     9866    6                       WHENALTRETURN DO;
      586     9867    6                           CALL VMA$EXPAND_LIST_GLOBAL (VM_UADDRESS,NEW_WORK$,
      587     9868    6                             VM_SEARCH_INFO,NEW_SEARCH_LEVEL) ALTRET(NOT_DEFINED);
      588     9869    6                       END;
      589     9870    5                   END;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:63   
      590     9871    5                   ELSE DO;
      591     9872    5                       CALL VMA$EXPAND_LIST (VM_UADDRESS,NEW_WORK$,
      592     9873    5                         VM_SEARCH_INFO,NEW_SEARCH_LEVEL) ALTRET(NOT_DEFINED);
      593     9874    5                   END;
      594     9875    4               END;
      595     9876    3           END;
      596     9877    3           DO NEVER;
      597     9878    3   NOT_DEFINED: ;
      598     9879    3               ALTRETURN;
      599     9880    3           END;                       /* Do never ... end */
      600     9881    2       END;                            /* Do forever ... end */
      601     9882    1   END_LOOP:
      602     9883    1       RETURN;
      603     9884        /**/
      604     9885    1   E_PMME:
      605     9886    1       ALTRETURN;
      606     9887        /**/
      607     9888    1   MOVE_USER_DEF:
      608     9889    1       NEXT$ = VM_ADD_HEAD.HEAD$;
      609     9890    2       DO FOREVER;
      610     9891    2           CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS,VM_RADDRESS,NEXT$,WORK$) ALTRET(
              9891                    END_MOVE_USER);
      611     9892        /*
      612     9893             ***** If ADDR_SPEC contains a folder or
      613     9894                   password spec, copy them into new address ...
      614     9895        */
      615     9896    2           IF ADDR_SPEC.FOLDER ~= ' '
      616     9897    2           THEN
      617     9898    3           DO;
      618     9899    3               VM_RADDRESS.FOLDER = ADDR_SPEC.FOLDER;
      619     9900    3               VM_UADDRESS.FOLDER = ADDR_SPEC.FOLDER;
      620     9901    3           END;
      621     9902    2           IF ADDR_SPEC.PASS ~= ' '
      622     9903    2           THEN
      623     9904    3           DO;
      624     9905    3               VM_RADDRESS.PASS = ADDR_SPEC.PASS;
      625     9906    3               VM_UADDRESS.PASS = ADDR_SPEC.PASS;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:64   
      626     9907    3           END;
      627     9908    2           IF VM_UADDRESS.TYPE = %VM_ADD_RESOLVED AND VM_RADDRESS.ACCT ~= ' '
      628     9909    2           THEN
      629     9910    2               CALL VMA$ADD_RENTRY (VM_RADDRESS.ACCT,VM_RADDRESS.FOLDER,
      630     9911    2                 VM_RADDRESS.PASS,VM_RADDRESS.SITENAME,%NO#,
      631     9912    2                 VM_RADDRESS.NAME_KEY) ALTRET(E_PMME);
      632     9913    3           ELSE DO;
      633     9914    3               IF VM_UADDRESS.TYPE = %VM_ADD_RESOLVED
      634     9915
      635     9916                                                /* User is defined only as (,,@site) */
      636     9917    3               THEN VM_UADDRESS.USER_NAME = ADDR_SPEC.USER_NAME;
      637     9918    3               CALL VMA$ADD_UENTRY (VM_UADDRESS.USER_NAME,VM_UADDRESS.FOLDER,
      638     9919    3                 VM_UADDRESS.PASS,VM_UADDRESS.SITENAME,%NO#,
      639     9920    3                 VM_UADDRESS.NAME_KEY) ALTRET(E_PMME);
      640     9921    3           END;
      641     9922        /*
      642     9923             ***** Depend upon VM_ADD_HEAD.HEAD$ to point
      643     9924                   to the entry just added ...
      644     9925        */
      645     9926    2           VM_ADDLIST$ -> VM_ADD_HEAD.HEAD$ -> VM$RADDRESS.FLAGS.USER# = %YES#;
      646     9927    2       END;                            /* Do forever ... end */
      647     9928    1   END_MOVE_USER:
      648     9929    1       RETURN;
      649     9930        /**/
      650     9931    1   STORE_ADDRESS:
      651     9932    1       CALL VMA$ADD_UENTRY (ADDR_SPEC.USER_NAME,ADDR_SPEC.FOLDER,
      652     9933    1         ADDR_SPEC.PASS,ADDR_SPEC.SITENAME,%NO#) ALTRET(E_PMME);
      653     9934    1       RETURN;
      654     9935        /**/
      655     9936    1   STORE_ERR_ADDRESS:
      656     9937    1       CALL VMA$ADD_UENTRY (ADDR_SPEC.USER_NAME,ADDR_SPEC.FOLDER,
      657     9938    1         ADDR_SPEC.PASS,ADDR_SPEC.SITENAME,%YES#) ALTRET(E_PMME);
      658     9939    1       RETURN;                           /** Used to altret **/
      659     9940    1   END VMA$EXPAND_LIST;
      660     9941        %EOD;

PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:65   
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$EXPAND_LIST.

   Procedure VMA$EXPAND_LIST requires 426 words for executable code.
   Procedure VMA$EXPAND_LIST requires 116 words of local(AUTO) storage.

PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:66   

 Object Unit name= VMA$EXPAND_LIST                            File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:02:23.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none   102    146  VMA$EXPAND_LIST
   12   Proc  even  none   426    652  VMA$EXPAND_LIST
   13  RoData even  none    28     34  VMA$EXPAND_LIST

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        5  VMA$EXPAND_LIST
    12      5          yes     yes      Std        5  VMA$EXPAND_LIST_GLOBAL
    12     12          yes     yes      Std        5  VMA$EXPAND_LIST_FULL
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:67   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       4 VMA$GET_NEXT_ENTRY
 yes     yes           Std       4 VMA$GET_SITE_NAME
 yes     yes           Std       3 VMA$GET_LIST
 yes     yes           Std       6 VMA$ADD_RENTRY
 yes     yes           Std       6 VMA$ADD_UENTRY
                       nStd      0 X66_AUTO_5
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:68   
     VM_SITENAME                           VM_MAILCG_SETSTA                 r    B$XL_UPPER$

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:69   


      301        1        /*T***********************************************************/
      302        2        /*T*                                                         */
      303        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      304        4        /*T*                                                         */
      305        5        /*T***********************************************************/
      306        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      307        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      308        8        /*F*
      309        9             NAME: VMA$EXPAND_LIST
      310       10             PURPOSE:
      311       11                   This routine will resolve a LIST definition into GLOBAL info.
      312       12             DESCRIPTION:
      313       13                   This routine will resolve an address definition into a
      314       14                   list of GLOBAL address LISTs, REGISTERED NAMES, or accounts.
      315       15                   The ADDR_SPEC is assumed to be an address LIST. If it is
      316       16                   determined that it is not, then it must be a REGISTERED NAME
      317       17                   or account specification. Otherwise, an error will result.
      318       18
      319       19                   Once a globally defined address LIST is found, processing
      320       20                   will stop. This is so that space may be saved in the storage
      321       21                   of address specification lists.
      322       22
      323       23                   NOTE: This routine depends upon the calling routine setting
      324       24                         certain variables in the VM_ADD_HEAD structure in
      325       25                         order that correct performance will result.
      326       26
      327       27                         VM_ADD_HEAD.NUM_ENTRIES = 0;
      328       28                         VM_ADD_HEAD.FLAGS = '0'B;
      329       29
      330       30                   This routine has four parameters.
      331       31
      332       32                   ADDR_SPEC    - address to resolve.
      333       33                   WORK$        - ptr to next address in work area to be
      334       34                                  used for holding the new address LIST.
      335       35                                  VM_WORK_ describes the work area.
      336       36                   SEARCH_INFO  - array of DCB numbers which are open to
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:70   
      337       37                                 folders to be used to resolve address LISTs.
      338       38                                 The last entry in this structure must point
      339       39                                 to the GLOBAL set of address LIST definitions.
      340       40                   SEARCH_LEVEL - starting index to use into SEARCH_INFO.
      341       41                                  Normally 0, but when recursion is found
      342       42                                  this number reflects the new level to
      343       43                                  start looking for the ADDR_SPEC.
      344       44                   EXPAND_USER# - Copy the user def to the finished list?
      345       45                                  (Optional. Only meaningful when EXPAND_FULL
      346       46                                  is specified. Default=YES.)
      347       47        */
      348       48        VMA$EXPAND_LIST: PROC (ADDR_SPEC,WORK$,VM_SEARCH_INFO,SEARCH_LEVEL,EXPAND_USER#)
                48            ALTRET;

     48 12 000000   000000 700200 xent  VMA$EXPAND_* TSX0  ! X66_AUTO_5
        12 000001   000164 000005                    ZERO    116,5

      349       49        /***** Include files *****/
      350       50          %INCLUDE B_ERRORS_C;
      351     1177          %INCLUDE CP_6;
      352     6736          %INCLUDE CP_6_SUBS;
      353     7276          %INCLUDE VM_MACRO_C;
      354     8544          %INCLUDE VM_SUBS_C;
      355     8804          %INCLUDE VM_DATA_R;
      356     9235            %include B$TABLES_C;
      357     9343          %B$XL_UPPER(NAME=LOWER_UPPER);
      358     9347        /***** Parameters *****/
      359     9348          %VM_ADDTYPES;
      360     9352          %VM_KEYTYPES;
      361     9373          %VM_UADDRESS (NAME=ADDR_SPEC,STCLASS=" ");
      362     9410    1   DCL WORK$ PTR;
      363     9411          %VM_SEARCH_INFO (STCLASS=" ");
      364     9438    1   DCL SEARCH_LEVEL SBIN WORD;
      365     9439    1   DCL EXPAND_USER# BIT(1);
      366     9440        /***** External routines *****/
      367     9441    1   DCL VMA$ADD_RENTRY ENTRY(6) ALTRET;
      368     9442    1   DCL VMA$ADD_UENTRY ENTRY(6) ALTRET;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:71   
      369     9443    1   DCL VMA$GET_LIST ENTRY(3) ALTRET;
      370     9444    1   DCL VMA$GET_NEXT_ENTRY ENTRY(4) ALTRET;
      371     9445    1   DCL VMA$GET_SITE_NAME ENTRY (4) ALTRET;
      372     9446        /***** Local variables *****/
      373     9447    1   DCL NEXT$ PTR AUTO;
      374     9448    1   DCL SEARCH_INDX SBIN WORD AUTO;
      375     9449    1   DCL NEW_WORK$ PTR AUTO;
      376     9450    1   DCL NEW_SEARCH_LEVEL SBIN WORD AUTO;
      377     9451    1   DCL EXPAND# UBIN WORD AUTO;
      378     9452    1   DCL SITENAME CHAR (8);
      379     9453        /***** Based structures *****/
      380     9454          %B$TCB (STCLASS="BASED(B$TCB$)");
      381     9457          %B$ALT;
      382     9465        /***** Mail structures *****/
      383     9466        %SET LISTMAC='1'B;
      384     9467        %SET LISTEXP='1'B;
      385     9468        %SET LISTSUB='1'B;
      386     9469          %VM_ADD_HEAD (STCLASS="BASED(WORK$)");
              9470        %LSET LISTDIR='0'B;
              9479    1   DCL 1 VM_ADD_HEAD BASED(WORK$),
              9480    1         2 ADDRESS_SIZE UBIN WORD /*(0)/**/,
              9481                               /* Number of words in this address list */
              9482    1         2 NUM_ENTRIES UBIN WORD /*(0)/**/,
              9483                               /* Number of entries in list */
              9484    1         2 FLAGS,
              9485    1           3 ERR# BIT(1) UNAL /*('0'B)/**/,
              9486                               /* Some error found in address list */
              9487    1           3 RESERVED BIT(35) UNAL /*('0'B)/**/,
              9488                               /* Reserved for future expansion */
              9489    1         2 HEAD$ PTR /*(ADDR(NIL))/**/,
              9490                               /* Head of link list */
              9491    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
              9492                               /* Ptr to first entry in free block list */
              9493    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
              9494                               /* Ptr to next available word in work area */
              9495    1         2 WORK_AREA UBIN WORD;
              9496                               /* First word of work area. */
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:72   
      387     9498          %VM_RADDRESS (STCLASS=AUTO);
              9499        %LSET LISTDIR='0'B;
              9508    1   DCL 1 VM_RADDRESS AUTO,
              9509    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
              9510                               /* Ptr to next entry on list */
              9511    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
              9512                               /* Ptr to previous entry on list */
              9513    1         2 FLAGS,
              9514    1           3 UNDEF# BIT (1) UNAL /*('0'B)/**/,
              9515                               /* This entry is not valid. Report as an error */
              9516    1           3 USER# BIT(1) UNAL /*('0'B)/**/,
              9517                               /* USER def, not LIST */
              9518    1           3 RESERVED BIT(7) UNAL /*('0'B)/**/,
              9519                               /* Reserved for future use */
              9520    1         2 TYPE UBIN BYTE UNAL /*(1)/**/,
              9521    1         2 NAME_KEY CHAR(20) CALIGNED /*(' ')/**/,
              9522                               /* Used only for USER definitions */
              9523    1         2 FOLDER CHAR(25) CALIGNED /*(' '*0)/**/,
              9524    1         2 NOMAD REDEF FOLDER,
              9525    1           3 FOLDER CHAR (18) CALIGNED,
              9526    1           3 DELIM CHAR (1) CALIGNED,
              9527    1           3 PSID CHAR (6) CALIGNED,
              9528    1         2 PASS CHAR(8) CALIGNED /*(' '*0)/**/,
              9529                               /* NOTE: Passwords are encrypted */
              9530    1         2 SITENAME CHAR(8) CALIGNED /*(' '*0)/**/,
              9531    1         2 ACCT CHAR(8) CALIGNED /*(' '*0)/**/;
      388     9533          %VM_UADDRESS (STCLASS=AUTO);
              9534        %LSET LISTDIR='0'B;
              9543    1   DCL 1 VM_UADDRESS AUTO,
              9544    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
              9545                               /* Ptr to next entry on list */
              9546    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
              9547                               /* Ptr to previous entry on list */
              9548    1         2 FLAGS,
              9549    1           3 UNDEF# BIT (1) UNAL /*('0'B)/**/,
              9550                               /* This entry is not valid. Report as an error */
              9551    1           3 USER# BIT(1) UNAL /*('0'B)/**/,
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:73   
              9552                               /* USER def, not LIST */
              9553    1           3 RESERVED BIT(7) UNAL /*('0'B)/**/,
              9554                               /* Reserved for future use */
              9555    1         2 TYPE UBIN BYTE UNAL /*(2)/**/,
              9556    1         2 NAME_KEY CHAR(20) CALIGNED /*(' ')/**/,
              9557                               /* Used only for USER definitions */
              9558    1         2 FOLDER CHAR(25) CALIGNED /*(' '*0)/**/,
              9559    1         2 NOMAD REDEF FOLDER,
              9560    1           3 FOLDER CHAR (18) CALIGNED,
              9561    1           3 DELIM CHAR (1) CALIGNED,
              9562    1           3 PSID CHAR (6) CALIGNED,
              9563    1         2 PASS CHAR(8) CALIGNED /*(' '*0)/**/,
              9564                               /* NOTE: Passwords are encrypted */
              9565    1         2 SITENAME CHAR(8) CALIGNED /*(' '*0)/**/,
              9566    1         2 USER_NAME,
              9567    1           3 COUNT UBIN BYTE CALIGNED /*(0)/**/,
              9568    1           3 TEXT CHAR(200) CALIGNED /*(' ')/**/;
      389     9570          %VM_LISTKEY (STCLASS=STATIC);
              9571        %LSET LISTDIR='0'B;
              9580    1   DCL 1 VM_LISTKEY STATIC,
              9581    1         2 COUNT UBIN BYTE CALIGNED INIT(201)/**/,
              9582    1         2 TYPE UBIN BYTE CALIGNED INIT(60)/**/,
              9583                        /* The type of the record to be accessed. */
              9584    1         2 TEXT CHAR(200) CALIGNED;
      390     9586          %VM_USERKEY (STCLASS=STATIC);
              9587        %LSET LISTDIR='0'B;
              9596    1   DCL 1 VM_USERKEY STATIC,
              9597    1         2 COUNT UBIN BYTE CALIGNED INIT(201)/**/,
              9598    1         2 TYPE UBIN BYTE CALIGNED INIT(80)/**/,
              9599                        /* The type of the record to be accessed. */
              9600    1         2 TEXT CHAR(200) CALIGNED;
      391     9602        %SET LISTMAC='0'B;
      392     9603        %SET LISTEXP='0'B;
      393     9604        %SET LISTSUB='0'B;
      394     9605          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
      395     9640          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS=BASED);
      396     9677        /***** Local substitutions *****/
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:74   
      397     9678          %EQU EXPAND_FULL = 1;
      398     9679          %EQU EXPAND_LOCAL = 2;
      399     9680          %EQU EXPAND_GLOBAL = 3;
      400     9681        %EJECT;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:75   
      401     9682        /*
      402     9683             ***** Set the flag that determines whether to do a full
      403     9684                   or partial expansion ...
      404     9685        */
      405     9686    1       EXPAND# = %EXPAND_LOCAL;

   9686 12 000002   000002 235007                    LDA     2,DL
        12 000003   200014 755100                    STA     EXPAND#,,AUTO

      406     9687    1       GOTO EXPAND;

   9687 12 000004   000017 710000 12                 TRA     EXPAND

      407     9688        %EJECT;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:76   
      408     9689        /*F*
      409     9690             NAME: VMA$EXPAND_LIST_GLOBAL
      410     9691             PURPOSE:
      411     9692                   This routine will resolve a LIST definition to a user list.
      412     9693             DESCRIPTION:
      413     9694                   This routine works just as VMA$EXPAND_LIST does. The
      414     9695                   only difference is that it will not resolve the global
      415     9696                   USER specifications; instead, it returns the user names.
      416     9697        */
      417     9698    1   VMA$EXPAND_LIST_GLOBAL: ENTRY (ADDR_SPEC,WORK$,VM_SEARCH_INFO,SEARCH_LEVEL,
              9698            EXPAND_USER#) ALTRET;

   9698 12 000005   000000 700200 xent  VMA$EXPAND_* TSX0  ! X66_AUTO_5
        12 000006   000164 000005                    ZERO    116,5

      418     9699        /*
      419     9700             ***** Set the flag that determines whether to do a full
      420     9701                   or partial expansion ...
      421     9702        */
      422     9703    1       EXPAND# = %EXPAND_GLOBAL;

   9703 12 000007   000003 235007                    LDA     3,DL
        12 000010   200014 755100                    STA     EXPAND#,,AUTO

      423     9704    1       GOTO EXPAND;

   9704 12 000011   000017 710000 12                 TRA     EXPAND

      424     9705        %EJECT;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:77   
      425     9706        /*F*
      426     9707             NAME: VMA$EXPAND_LIST_FULL
      427     9708             PURPOSE:
      428     9709                   This routine will fully resolve a LIST definition.
      429     9710             DESCRIPTION:
      430     9711                   This routine works just as VMA$EXPAND_LIST does. The
      431     9712                   only difference is that it will resolve the address
      432     9713                   LIST specification into individual REGISTERED NAMES or
      433     9714                   accounts, rather just into GLOBAL LIST definitions,
      434     9715                   REGISTERED NAMES, or accounts.
      435     9716        */
      436     9717    1   VMA$EXPAND_LIST_FULL: ENTRY (ADDR_SPEC,WORK$,VM_SEARCH_INFO,SEARCH_LEVEL,
              9717            EXPAND_USER#) ALTRET;

   9717 12 000012   000000 700200 xent  VMA$EXPAND_* TSX0  ! X66_AUTO_5
        12 000013   000164 000005                    ZERO    116,5

      437     9718        /*
      438     9719             ***** Set the flag that determines whether to do a full
      439     9720                   or partial expansion ...
      440     9721        */
      441     9722    1       EXPAND# = %EXPAND_FULL;

   9722 12 000014   000001 235007                    LDA     1,DL
        12 000015   200014 755100                    STA     EXPAND#,,AUTO

      442     9723    1       GOTO EXPAND;

   9723 12 000016   000017 710000 12                 TRA     EXPAND

      443     9724        %EJECT;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:78   
      444     9725        /*
      445     9726             ***** Unless the address spec that is about to be expanded
      446     9727                   refers to the local site (primary or synonymous name)
      447     9728                   it must be copied exactly as is to the address list for
      448     9729                   later processing ...
      449     9730        */
      450     9731    1   EXPAND:
      451     9732    1       CALL VMA$GET_SITE_NAME (ADDR_SPEC.SITENAME, SITENAME)

   9732 12 000017   200015 630500       EXPAND       EPPR0   SITENAME,,AUTO
        12 000020   200151 450500                    STP0    VM_UADDRESS+70,,AUTO
        12 000021   200003 236100                    LDQ     @ADDR_SPEC,,AUTO
        12 000022   000001 036000 13                 ADLQ    1
        12 000023   200150 756100                    STQ     VM_UADDRESS+69,,AUTO
        12 000024   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000025   000000 631400 13                 EPPR1   0
        12 000026   000000 701000 xent               TSX1    VMA$GET_SITE_NAME
        12 000027   000031 702000 12                 TSX2    s:9734
        12 000030   000037 710000 12                 TRA     s:9736

      452     9733    2       WHENALTRETURN DO;

      453     9734    2           call xlate( SITENAME, LOWER_UPPER, ADDR_SPEC.SITENAME );

   9734 12 000031   200003 470500                    LDP0    @ADDR_SPEC,,AUTO
        12 000032   000000 471400 xsym               LDP1    B$XL_UPPER$
        12 000033   040100 160500                    MVT     fill='040'O
        12 000034   000017 600010                    ADSC9   15,,PR0                  cn=3,n=8
        12 000035   200015 000010                    ADSC9   SITENAME,,AUTO           cn=0,n=8
        12 000036   100000 000100                    ARG     0,,PR1

      454     9735    2       END;

      455     9736    1       IF SITENAME ~= ' ' AND SITENAME ~= VM_SITENAME

   9736 12 000037   040000 106500                    CMPC    fill='040'O
        12 000040   200015 000010                    ADSC9   SITENAME,,AUTO           cn=0,n=8
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:79   
        12 000041   000002 000001 13                 ADSC9   2                        cn=0,n=1
        12 000042   000050 600000 12                 TZE     s:9744
        12 000043   040000 106500                    CMPC    fill='040'O
        12 000044   200015 000010                    ADSC9   SITENAME,,AUTO           cn=0,n=8
        12 000045   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        12 000046   000050 600000 12                 TZE     s:9744

      456     9737    1       THEN                            /* Not a local definition */
      457     9738    2       DO;                          /* Copy ADDR_SPEC unchanged */

      458     9739    2           GOTO STORE_ADDRESS;

   9739 12 000047   000604 710000 12                 TRA     STORE_ADDRESS

      459     9740    2       END;
      460     9741        /*
      461     9742             ***** Try to find a list definition for this ADDR_SPEC ...
      462     9743        */
      463     9744    1       VM_LISTKEY.TEXT = SUBSTR(ADDR_SPEC.USER_NAME.TEXT,0,ADDR_SPEC.USER_NAME.COUNT);

   9744 12 000050   200003 470500                    LDP0    @ADDR_SPEC,,AUTO
        12 000051   000021 720100                    LXL0    17,,PR0
        12 000052   000777 360003                    ANX0    511,DU
        12 000053   040000 100540                    MLR     fill='040'O
        12 000054   000022 000010                    ADSC9   18,,PR0                  cn=0,n=*X0
        12 000055   000000 400310 11                 ADSC9   VM_LISTKEY               cn=2,n=200

      464     9745    1       IF ADDR(SEARCH_LEVEL) ~= ADDR(NIL)

   9745 12 000056   200006 236100                    LDQ     @SEARCH_LEVEL,,AUTO
        12 000057   000003 116000 13                 CMPQ    3
        12 000060   000065 600000 12                 TZE     s:9749

      465     9746    1       THEN
      466     9747    1           SEARCH_INDX = SEARCH_LEVEL;

   9747 12 000061   200006 471500                    LDP1    @SEARCH_LEVEL,,AUTO
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:80   
        12 000062   100000 235100                    LDA     0,,PR1
        12 000063   200011 755100                    STA     SEARCH_INDX,,AUTO
        12 000064   000066 710000 12                 TRA     s:9750

      467     9748    1       ELSE                            /* Start at bottom */
      468     9749    1           SEARCH_INDX = 0;

   9749 12 000065   200011 450100                    STZ     SEARCH_INDX,,AUTO

      469     9750    1       IF (SEARCH_INDX + 1) > VM_SEARCH_INFO.NUM_ENTRIES

   9750 12 000066   200005 471500                    LDP1    @VM_SEARCH_INFO,,AUTO
        12 000067   200011 236100                    LDQ     SEARCH_INDX,,AUTO
        12 000070   000073 604000 12                 TMI     TRY_AGAIN
        12 000071   100000 116100                    CMPQ    0,,PR1
        12 000072   000627 603000 12                 TRC     STORE_ERR_ADDRESS

      470     9751    1       THEN                            /* Not that many levels available */
      471     9752    1           GOTO STORE_ERR_ADDRESS;
      472     9753    1   TRY_AGAIN:
      473     9754    1       CALL VMA$GET_LIST (VM_LISTKEY,WORK$,

   9754 12 000073   200011 236100       TRY_AGAIN    LDQ     SEARCH_INDX,,AUTO
        12 000074   000022 736000                    QLS     18
        12 000075   000001 036003                    ADLQ    1,DU
        12 000076   200005 036100                    ADLQ    @VM_SEARCH_INFO,,AUTO
        12 000077   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000100   200004 236100                    LDQ     @WORK$,,AUTO
        12 000101   000005 235000 13                 LDA     5
        12 000102   200150 757100                    STAQ    VM_UADDRESS+69,,AUTO
        12 000103   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000104   000004 631400 13                 EPPR1   4
        12 000105   000000 701000 xent               TSX1    VMA$GET_LIST
        12 000106   000110 702000 12                 TSX2    E_READ

      474     9755    1         VM_SEARCH_INFO.DCB#(SEARCH_INDX)) ALTRET(E_READ);
      475     9756    2       DO NEVER;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:81   

   9756 12 000107   000156 710000 12                 TRA     s:9792

      476     9757    2   E_READ:
      477     9758    2           IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOKEY

   9758 12 000110   000000 470400 xsym  E_READ       LDP0    B$TCB$
        12 000111   000000 471500                    LDP1    0,,PR0
        12 000112   100102 236100                    LDQ     66,,PR1
        12 000113   377770 376007                    ANQ     131064,DL
        12 000114   001020 116007                    CMPQ    528,DL
        12 000115   000155 601000 12                 TNZ     s:9786

      478     9759    2           THEN
      479     9760    3           DO;                    /* Search another folder */

      480     9761    3               SEARCH_INDX = SEARCH_INDX + 1;

   9761 12 000116   200011 054100                    AOS     SEARCH_INDX,,AUTO

      481     9762    3               IF SEARCH_INDX = VM_SEARCH_INFO.NUM_ENTRIES

   9762 12 000117   200005 473500                    LDP3    @VM_SEARCH_INFO,,AUTO
        12 000120   200011 236100                    LDQ     SEARCH_INDX,,AUTO
        12 000121   000154 604000 12                 TMI     s:9781
        12 000122   300000 116100                    CMPQ    0,,PR3
        12 000123   000154 601000 12                 TNZ     s:9781

      482     9763    3               THEN            /* Must not be defined as a list */
      483     9764    4               DO;

      484     9765        /*
      485     9766             ***** See if it is a registered name ...
      486     9767        */
      487     9768    4                   VM_USERKEY.TEXT = VM_LISTKEY.TEXT;

   9768 12 000124   040000 100400                    MLR     fill='040'O
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:82   
        12 000125   000000 400310 11                 ADSC9   VM_LISTKEY               cn=2,n=200
        12 000126   000063 400310 11                 ADSC9   VM_USERKEY               cn=2,n=200

      488     9769    4                   CALL VMA$GET_LIST (VM_USERKEY,WORK$,

   9769 12 000127   000006 236000 13                 LDQ     6
        12 000130   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000131   200004 236100                    LDQ     @WORK$,,AUTO
        12 000132   000007 235000 13                 LDA     7
        12 000133   200150 757100                    STAQ    VM_UADDRESS+69,,AUTO
        12 000134   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000135   000004 631400 13                 EPPR1   4
        12 000136   000000 701000 xent               TSX1    VMA$GET_LIST
        12 000137   000627 702000 12                 TSX2    STORE_ERR_ADDRESS

      489     9770    4                     M$MAIL_GLOBAL_NUM) ALTRET(STORE_ERR_ADDRESS);
      490     9771    4                   IF EXPAND# ~= %EXPAND_FULL

   9771 12 000140   200014 235100                    LDA     EXPAND#,,AUTO
        12 000141   000001 115007                    CMPA    1,DL
        12 000142   000604 601000 12                 TNZ     STORE_ADDRESS

      491     9772    4                   THEN /* Don't expand user def */
      492     9773    4                       GOTO STORE_ADDRESS;
      493     9774    4                   IF ADDR(EXPAND_USER#) ~= ADDR(NIL)

   9774 12 000143   200007 236100                    LDQ     @EXPAND_USER#,,AUTO
        12 000144   000003 116000 13                 CMPQ    3
        12 000145   000153 600000 12                 TZE     s:9779
        12 000146   200007 470500                    LDP0    @EXPAND_USER#,,AUTO
        12 000147   000000 066500                    CMPB    filb='0'B
        12 000150   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        12 000151   000010 000022 13                 BDSC    8                        by=0,bit=0,n=18
        12 000152   000604 600000 12                 TZE     STORE_ADDRESS

      494     9775    4                     AND EXPAND_USER# = %NO#
      495     9776    4                   THEN /* Don't expand user def */
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:83   
      496     9777    4                       GOTO STORE_ADDRESS;
      497     9778    4                   ELSE
      498     9779    4                       GOTO MOVE_USER_DEF;

   9779 12 000153   000431 710000 12                 TRA     MOVE_USER_DEF

      499     9780    4               END;
      500     9781    3               GOTO TRY_AGAIN;

   9781 12 000154   000073 710000 12                 TRA     TRY_AGAIN

      501     9782    3           END;
      502     9783        /*
      503     9784             ***** Otherwise, some other bad error. Abort processing ...
      504     9785        */
      505     9786    2           ALTRETURN;

   9786 12 000155   000000 702200 xent               TSX2  ! X66_AALT

      506     9787    2       END;                            /* Do never ... end */

      507     9788        /*
      508     9789             ***** If the address list contains no entries,
      509     9790                   then this is an error. Report it...
      510     9791        */
      511     9792    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0

   9792 12 000156   200004 470500                    LDP0    @WORK$,,AUTO
        12 000157   000000 471500                    LDP1    0,,PR0
        12 000160   100001 235100                    LDA     1,,PR1
        12 000161   000163 601000 12                 TNZ     s:9804

      512     9793    1       THEN
      513     9794    2       DO;

      514     9795    2           GOTO STORE_ERR_ADDRESS;

PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:84   
   9795 12 000162   000627 710000 12                 TRA     STORE_ERR_ADDRESS

      515     9796    2       END;
      516     9797        /*
      517     9798             ***** A definition was found.
      518     9799                   If the definition is the global address list
      519     9800                   definition then it must not be expanded any further,
      520     9801                   unless, EXPAND_FULL was specified.
      521     9802                   If not, then expand this definition ...
      522     9803        */
      523     9804    1       IF VM_SEARCH_INFO.DCB#(SEARCH_INDX) = M$MAIL_GLOBAL_NUM

   9804 12 000163   200005 473500                    LDP3    @VM_SEARCH_INFO,,AUTO
        12 000164   200011 720100                    LXL0    SEARCH_INDX,,AUTO
        12 000165   300001 236110                    LDQ     1,X0,PR3
        12 000166   000000 116000 xsym               CMPQ    M$MAIL_GLOBAL_NUM
        12 000167   000174 601000 12                 TNZ     s:9813
        12 000170   200014 235100                    LDA     EXPAND#,,AUTO
        12 000171   000002 115007                    CMPA    2,DL
        12 000172   000174 601000 12                 TNZ     s:9813

      524     9805    1         AND EXPAND# = %EXPAND_LOCAL
      525     9806    1       THEN
      526     9807    2       DO;                          /* Expand no further */

      527     9808    2           GOTO STORE_ADDRESS;

   9808 12 000173   000604 710000 12                 TRA     STORE_ADDRESS

      528     9809    2       END;
      529     9810        /*
      530     9811             ***** Try to resolve it further ...
      531     9812        */
      532     9813    1       NEXT$ = VM_ADD_HEAD.HEAD$;        /* First list def */

   9813 12 000174   100003 236100                    LDQ     3,,PR1
        12 000175   200010 756100                    STQ     NEXT$,,AUTO
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:85   

      533     9814    2       DO FOREVER;

      534     9815    2           CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS,VM_RADDRESS,NEXT$,WORK$) ALTRET(
              9815                    END_LOOP);

   9815 12 000176   200004 236100                    LDQ     @WORK$,,AUTO
        12 000177   200153 756100                    STQ     VM_UADDRESS+72,,AUTO
        12 000200   200010 630500                    EPPR0   NEXT$,,AUTO
        12 000201   200152 450500                    STP0    VM_UADDRESS+71,,AUTO
        12 000202   200017 631500                    EPPR1   VM_RADDRESS,,AUTO
        12 000203   200151 451500                    STP1    VM_UADDRESS+70,,AUTO
        12 000204   200043 633500                    EPPR3   VM_UADDRESS,,AUTO
        12 000205   200150 453500                    STP3    VM_UADDRESS+69,,AUTO
        12 000206   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000207   000011 631400 13                 EPPR1   9
        12 000210   000000 701000 xent               TSX1    VMA$GET_NEXT_ENTRY
        12 000211   000427 702000 12                 TSX2    END_LOOP

      535     9816    2           IF VM_UADDRESS.TYPE = %VM_ADD_RESOLVED

   9816 12 000212   200045 236100                    LDQ     VM_UADDRESS+2,,AUTO
        12 000213   000777 376003                    ANQ     511,DU
        12 000214   000001 116003                    CMPQ    1,DU
        12 000215   000243 601000 12                 TNZ     s:9824

      536     9817    2           THEN                       /* No further resolution needed */
      537     9818    3           DO;

      538     9819    3               CALL VMA$ADD_RENTRY (VM_RADDRESS.ACCT,VM_RADDRESS.FOLDER,

   9819 12 000216   200154 452500                    STP2    VM_UADDRESS+73,,AUTO
        12 000217   200154 236100                    LDQ     VM_UADDRESS+73,,AUTO
        12 000220   000012 036000 13                 ADLQ    10
        12 000221   200153 756100                    STQ     VM_UADDRESS+72,,AUTO
        12 000222   200155 452500                    STP2    VM_UADDRESS+74,,AUTO
        12 000223   200155 236100                    LDQ     VM_UADDRESS+74,,AUTO
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:86   
        12 000224   000013 036000 13                 ADLQ    11
        12 000225   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000226   200156 452500                    STP2    VM_UADDRESS+75,,AUTO
        12 000227   200156 236100                    LDQ     VM_UADDRESS+75,,AUTO
        12 000230   000014 036000 13                 ADLQ    12
        12 000231   200151 756100                    STQ     VM_UADDRESS+70,,AUTO
        12 000232   200157 452500                    STP2    VM_UADDRESS+76,,AUTO
        12 000233   200157 236100                    LDQ     VM_UADDRESS+76,,AUTO
        12 000234   000015 036000 13                 ADLQ    13
        12 000235   200150 756100                    STQ     VM_UADDRESS+69,,AUTO
        12 000236   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000237   000011 631400 13                 EPPR1   9
        12 000240   000000 701000 xent               TSX1    VMA$ADD_RENTRY
        12 000241   000430 702000 12                 TSX2    E_PMME

      539     9820    3                 VM_RADDRESS.PASS,VM_RADDRESS.SITENAME) ALTRET(E_PMME);
      540     9821    3           END;

   9821 12 000242   000425 710000 12                 TRA     s:9877

      541     9822    2           ELSE                       /* Need to resolve this further */
      542     9823    3           DO;

      543     9824    3               NEW_WORK$ = PINCRW(WORK$,VM_ADD_HEAD.ADDRESS_SIZE);

   9824 12 000243   200004 470500                    LDP0    @WORK$,,AUTO
        12 000244   000000 471500                    LDP1    0,,PR0
        12 000245   100000 720100                    LXL0    0,,PR1
        12 000246   100000 633510                    EPPR3   0,X0,PR1
        12 000247   200012 453500                    STP3    NEW_WORK$,,AUTO

      544     9825        /*
      545     9826             ***** If this entry is the same as the name of the
      546     9827                   ADDRESS_SPEC, then we have a recursive definition.
      547     9828                   Further expansion of this entry must take place at
      548     9829                   a higher level so as to avoid loops ...
      549     9830        */
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:87   
      550     9831    3               IF SUBSTR(VM_UADDRESS.USER_NAME.TEXT,0,VM_UADDRESS.USER_NAME.COUNT) =

   9831 12 000250   200064 720100                    LXL0    VM_UADDRESS+17,,AUTO
        12 000251   000777 360003                    ANX0    511,DU
        12 000252   200003 471500                    LDP1    @ADDR_SPEC,,AUTO
        12 000253   100021 721100                    LXL1    17,,PR1
        12 000254   000777 361003                    ANX1    511,DU
        12 000255   040140 106540                    CMPC    fill='040'O
        12 000256   200065 000010                    ADSC9   VM_UADDRESS+18,,AUTO     cn=0,n=*X0
        12 000257   100022 000011                    ADSC9   18,,PR1                  cn=0,n=*X1
        12 000260   000265 601000 12                 TNZ     s:9836

      551     9832    3                 SUBSTR(ADDR_SPEC.USER_NAME.TEXT,0,ADDR_SPEC.USER_NAME.COUNT)
      552     9833    3               THEN
      553     9834    3                   NEW_SEARCH_LEVEL = SEARCH_INDX + 1;

   9834 12 000261   200011 235100                    LDA     SEARCH_INDX,,AUTO
        12 000262   000001 035007                    ADLA    1,DL
        12 000263   200013 755100                    STA     NEW_SEARCH_LEVEL,,AUTO
        12 000264   000266 710000 12                 TRA     s:9841

      554     9835    3               ELSE
      555     9836    3                   NEW_SEARCH_LEVEL = 0;

   9836 12 000265   200013 450100                    STZ     NEW_SEARCH_LEVEL,,AUTO

      556     9837                                                /*
      557     9838                                                    ***** If ADDR_SPEC contains a folder or
      558     9839                                           password spec, copy them into new address ...
      559     9840                                           */
      560     9841    3               IF ADDR_SPEC.FOLDER ~= ' '

   9841 12 000266   040000 106500                    CMPC    fill='040'O
        12 000267   100007 400031                    ADSC9   7,,PR1                   cn=2,n=25
        12 000270   000002 000001 13                 ADSC9   2                        cn=0,n=1
        12 000271   000275 600000 12                 TZE     s:9844

PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:88   
      561     9842    3               THEN
      562     9843    3                   VM_UADDRESS.FOLDER = ADDR_SPEC.FOLDER;

   9843 12 000272   040100 100500                    MLR     fill='040'O
        12 000273   100007 400031                    ADSC9   7,,PR1                   cn=2,n=25
        12 000274   200052 400031                    ADSC9   VM_UADDRESS+7,,AUTO      cn=2,n=25

      563     9844    3               IF ADDR_SPEC.PASS ~= ' '

   9844 12 000275   040000 106500                    CMPC    fill='040'O
        12 000276   100015 600010                    ADSC9   13,,PR1                  cn=3,n=8
        12 000277   000002 000001 13                 ADSC9   2                        cn=0,n=1
        12 000300   000304 600000 12                 TZE     s:9847

      564     9845    3               THEN
      565     9846    3                   VM_UADDRESS.PASS = ADDR_SPEC.PASS;

   9846 12 000301   040100 100500                    MLR     fill='040'O
        12 000302   100015 600010                    ADSC9   13,,PR1                  cn=3,n=8
        12 000303   200060 600010                    ADSC9   VM_UADDRESS+13,,AUTO     cn=3,n=8

      566     9847    3               IF EXPAND# = %EXPAND_FULL

   9847 12 000304   200014 235100                    LDA     EXPAND#,,AUTO
        12 000305   000001 115007                    CMPA    1,DL
        12 000306   000324 601000 12                 TNZ     s:9852

      567     9848    3               THEN
      568     9849    3                   CALL VMA$EXPAND_LIST_FULL (VM_UADDRESS,NEW_WORK$,

   9849 12 000307   200013 634500                    EPPR4   NEW_SEARCH_LEVEL,,AUTO
        12 000310   200153 454500                    STP4    VM_UADDRESS+72,,AUTO
        12 000311   200005 236100                    LDQ     @VM_SEARCH_INFO,,AUTO
        12 000312   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000313   200012 635500                    EPPR5   NEW_WORK$,,AUTO
        12 000314   200151 455500                    STP5    VM_UADDRESS+70,,AUTO
        12 000315   200043 636500                    EPPR6   VM_UADDRESS,,AUTO
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:89   
        12 000316   200150 456500                    STP6    VM_UADDRESS+69,,AUTO
        12 000317   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000320   000011 631400 13                 EPPR1   9
        12 000321   000012 701000 12                 TSX1    s:9717
        12 000322   000426 702000 12                 TSX2    NOT_DEFINED
        12 000323   000425 710000 12                 TRA     s:9877

      569     9850    3                     VM_SEARCH_INFO,NEW_SEARCH_LEVEL) ALTRET(NOT_DEFINED);
      570     9851    4               ELSE DO;

      571     9852    4                   IF EXPAND# = %EXPAND_GLOBAL

   9852 12 000324   000003 115007                    CMPA    3,DL
        12 000325   000411 601000 12                 TNZ     s:9872

      572     9853    5                   THEN DO;

      573     9854        /*
      574     9855                ***** If we're not doing a FULL expansion, see if this resolves
      575     9856                      to a USER, and avoid further expansion if it does.
      576     9857        */
      577     9858    5                       VM_USERKEY.TEXT = SUBSTR (VM_UADDRESS.USER_NAME.TEXT, 0,

   9858 12 000326   200064 720100                    LXL0    VM_UADDRESS+17,,AUTO
        12 000327   000777 360003                    ANX0    511,DU
        12 000330   040000 100540                    MLR     fill='040'O
        12 000331   200065 000010                    ADSC9   VM_UADDRESS+18,,AUTO     cn=0,n=*X0
        12 000332   000063 400310 11                 ADSC9   VM_USERKEY               cn=2,n=200

      578     9859    5                         VM_UADDRESS.USER_NAME.COUNT);
      579     9860    5                       CALL VMA$GET_LIST (VM_USERKEY,NEW_WORK$,M$MAIL_GLOBAL_NUM)

   9860 12 000333   000006 236000 13                 LDQ     6
        12 000334   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000335   200012 634500                    EPPR4   NEW_WORK$,,AUTO
        12 000336   200151 454500                    STP4    VM_UADDRESS+70,,AUTO
        12 000337   000007 236000 13                 LDQ     7
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:90   
        12 000340   200150 756100                    STQ     VM_UADDRESS+69,,AUTO
        12 000341   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000342   000004 631400 13                 EPPR1   4
        12 000343   000000 701000 xent               TSX1    VMA$GET_LIST
        12 000344   000374 702000 12                 TSX2    s:9867

      580     9861    6                       WHENRETURN DO;

      581     9862    6                           CALL VMA$ADD_UENTRY (VM_UADDRESS.USER_NAME, VM_UADDRESS.
              9862                                    FOLDER,

   9862 12 000345   000017 236000 13                 LDQ     15
        12 000346   200154 756100                    STQ     VM_UADDRESS+73,,AUTO
        12 000347   200155 452500                    STP2    VM_UADDRESS+74,,AUTO
        12 000350   200155 236100                    LDQ     VM_UADDRESS+74,,AUTO
        12 000351   000020 036000 13                 ADLQ    16
        12 000352   200153 756100                    STQ     VM_UADDRESS+72,,AUTO
        12 000353   200156 452500                    STP2    VM_UADDRESS+75,,AUTO
        12 000354   200156 236100                    LDQ     VM_UADDRESS+75,,AUTO
        12 000355   000021 036000 13                 ADLQ    17
        12 000356   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000357   200157 452500                    STP2    VM_UADDRESS+76,,AUTO
        12 000360   200157 236100                    LDQ     VM_UADDRESS+76,,AUTO
        12 000361   000022 036000 13                 ADLQ    18
        12 000362   200151 756100                    STQ     VM_UADDRESS+70,,AUTO
        12 000363   200160 452500                    STP2    VM_UADDRESS+77,,AUTO
        12 000364   200160 236100                    LDQ     VM_UADDRESS+77,,AUTO
        12 000365   000023 036000 13                 ADLQ    19
        12 000366   200150 756100                    STQ     VM_UADDRESS+69,,AUTO
        12 000367   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000370   000016 631400 13                 EPPR1   14
        12 000371   000000 701000 xent               TSX1    VMA$ADD_UENTRY
        12 000372   000430 702000 12                 TSX2    E_PMME

      582     9863    6                             VM_UADDRESS.PASS, VM_UADDRESS.SITENAME, %NO#)
      583     9864    6                             ALTRET(E_PMME);
      584     9865    6                       END;
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:91   

   9865 12 000373   000410 710000 12                 TRA     s:9870

      585     9866    6                       WHENALTRETURN DO;

      586     9867    6                           CALL VMA$EXPAND_LIST_GLOBAL (VM_UADDRESS,NEW_WORK$,

   9867 12 000374   200013 630500                    EPPR0   NEW_SEARCH_LEVEL,,AUTO
        12 000375   200153 450500                    STP0    VM_UADDRESS+72,,AUTO
        12 000376   200005 236100                    LDQ     @VM_SEARCH_INFO,,AUTO
        12 000377   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000400   200012 631500                    EPPR1   NEW_WORK$,,AUTO
        12 000401   200151 451500                    STP1    VM_UADDRESS+70,,AUTO
        12 000402   200043 633500                    EPPR3   VM_UADDRESS,,AUTO
        12 000403   200150 453500                    STP3    VM_UADDRESS+69,,AUTO
        12 000404   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000405   000011 631400 13                 EPPR1   9
        12 000406   000005 701000 12                 TSX1    s:9698
        12 000407   000426 702000 12                 TSX2    NOT_DEFINED

      587     9868    6                             VM_SEARCH_INFO,NEW_SEARCH_LEVEL) ALTRET(NOT_DEFINED);
      588     9869    6                       END;

      589     9870    5                   END;

   9870 12 000410   000425 710000 12                 TRA     s:9877

      590     9871    5                   ELSE DO;

      591     9872    5                       CALL VMA$EXPAND_LIST (VM_UADDRESS,NEW_WORK$,

   9872 12 000411   200013 634500                    EPPR4   NEW_SEARCH_LEVEL,,AUTO
        12 000412   200153 454500                    STP4    VM_UADDRESS+72,,AUTO
        12 000413   200005 236100                    LDQ     @VM_SEARCH_INFO,,AUTO
        12 000414   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000415   200012 635500                    EPPR5   NEW_WORK$,,AUTO
        12 000416   200151 455500                    STP5    VM_UADDRESS+70,,AUTO
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:92   
        12 000417   200043 636500                    EPPR6   VM_UADDRESS,,AUTO
        12 000420   200150 456500                    STP6    VM_UADDRESS+69,,AUTO
        12 000421   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000422   000011 631400 13                 EPPR1   9
        12 000423   000000 701000 12                 TSX1    s:48
        12 000424   000426 702000 12                 TSX2    NOT_DEFINED

      592     9873    5                         VM_SEARCH_INFO,NEW_SEARCH_LEVEL) ALTRET(NOT_DEFINED);
      593     9874    5                   END;

      594     9875    4               END;

      595     9876    3           END;

      596     9877    3           DO NEVER;

   9877 12 000425   000176 710000 12                 TRA     s:9815

   9870 12 000426                       NOT_DEFINED  null
      597     9878    3   NOT_DEFINED: ;
      598     9879    3               ALTRETURN;

   9879 12 000426   000000 702200 xent               TSX2  ! X66_AALT

      599     9880    3           END;                       /* Do never ... end */

      600     9881    2       END;                            /* Do forever ... end */

      601     9882    1   END_LOOP:
      602     9883    1       RETURN;

   9883 12 000427   000000 702200 xent  END_LOOP     TSX2  ! X66_ARET

      603     9884        /**/
      604     9885    1   E_PMME:
      605     9886    1       ALTRETURN;

PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:93   
   9886 12 000430   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

      606     9887        /**/
      607     9888    1   MOVE_USER_DEF:
      608     9889    1       NEXT$ = VM_ADD_HEAD.HEAD$;

   9889 12 000431   200004 470500       MOVE_USER_D* LDP0    @WORK$,,AUTO
        12 000432   000000 471500                    LDP1    0,,PR0
        12 000433   100003 236100                    LDQ     3,,PR1
        12 000434   200010 756100                    STQ     NEXT$,,AUTO

      609     9890    2       DO FOREVER;

      610     9891    2           CALL VMA$GET_NEXT_ENTRY (VM_UADDRESS,VM_RADDRESS,NEXT$,WORK$) ALTRET(
              9891                    END_MOVE_USER);

   9891 12 000435   200004 236100                    LDQ     @WORK$,,AUTO
        12 000436   200153 756100                    STQ     VM_UADDRESS+72,,AUTO
        12 000437   200010 630500                    EPPR0   NEXT$,,AUTO
        12 000440   200152 450500                    STP0    VM_UADDRESS+71,,AUTO
        12 000441   200017 631500                    EPPR1   VM_RADDRESS,,AUTO
        12 000442   200151 451500                    STP1    VM_UADDRESS+70,,AUTO
        12 000443   200043 633500                    EPPR3   VM_UADDRESS,,AUTO
        12 000444   200150 453500                    STP3    VM_UADDRESS+69,,AUTO
        12 000445   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000446   000011 631400 13                 EPPR1   9
        12 000447   000000 701000 xent               TSX1    VMA$GET_NEXT_ENTRY
        12 000450   000603 702000 12                 TSX2    END_MOVE_USER

      611     9892        /*
      612     9893             ***** If ADDR_SPEC contains a folder or
      613     9894                   password spec, copy them into new address ...
      614     9895        */
      615     9896    2           IF ADDR_SPEC.FOLDER ~= ' '

   9896 12 000451   200003 470500                    LDP0    @ADDR_SPEC,,AUTO
        12 000452   040000 106500                    CMPC    fill='040'O
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:94   
        12 000453   000007 400031                    ADSC9   7,,PR0                   cn=2,n=25
        12 000454   000002 000001 13                 ADSC9   2                        cn=0,n=1
        12 000455   000464 600000 12                 TZE     s:9902

      616     9897    2           THEN
      617     9898    3           DO;

      618     9899    3               VM_RADDRESS.FOLDER = ADDR_SPEC.FOLDER;

   9899 12 000456   040100 100500                    MLR     fill='040'O
        12 000457   000007 400031                    ADSC9   7,,PR0                   cn=2,n=25
        12 000460   200026 400031                    ADSC9   VM_RADDRESS+7,,AUTO      cn=2,n=25

      619     9900    3               VM_UADDRESS.FOLDER = ADDR_SPEC.FOLDER;

   9900 12 000461   040100 100500                    MLR     fill='040'O
        12 000462   000007 400031                    ADSC9   7,,PR0                   cn=2,n=25
        12 000463   200052 400031                    ADSC9   VM_UADDRESS+7,,AUTO      cn=2,n=25

      620     9901    3           END;

      621     9902    2           IF ADDR_SPEC.PASS ~= ' '

   9902 12 000464   040000 106500                    CMPC    fill='040'O
        12 000465   000015 600010                    ADSC9   13,,PR0                  cn=3,n=8
        12 000466   000002 000001 13                 ADSC9   2                        cn=0,n=1
        12 000467   000476 600000 12                 TZE     s:9908

      622     9903    2           THEN
      623     9904    3           DO;

      624     9905    3               VM_RADDRESS.PASS = ADDR_SPEC.PASS;

   9905 12 000470   040100 100500                    MLR     fill='040'O
        12 000471   000015 600010                    ADSC9   13,,PR0                  cn=3,n=8
        12 000472   200034 600010                    ADSC9   VM_RADDRESS+13,,AUTO     cn=3,n=8

PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:95   
      625     9906    3               VM_UADDRESS.PASS = ADDR_SPEC.PASS;

   9906 12 000473   040100 100500                    MLR     fill='040'O
        12 000474   000015 600010                    ADSC9   13,,PR0                  cn=3,n=8
        12 000475   200060 600010                    ADSC9   VM_UADDRESS+13,,AUTO     cn=3,n=8

      626     9907    3           END;

      627     9908    2           IF VM_UADDRESS.TYPE = %VM_ADD_RESOLVED AND VM_RADDRESS.ACCT ~= ' '

   9908 12 000476   200045 236100                    LDQ     VM_UADDRESS+2,,AUTO
        12 000477   000777 376003                    ANQ     511,DU
        12 000500   000001 116003                    CMPQ    1,DU
        12 000501   000540 601000 12                 TNZ     s:9914
        12 000502   040000 106500                    CMPC    fill='040'O
        12 000503   200040 600010                    ADSC9   VM_RADDRESS+17,,AUTO     cn=3,n=8
        12 000504   000002 000001 13                 ADSC9   2                        cn=0,n=1
        12 000505   000540 600000 12                 TZE     s:9914

      628     9909    2           THEN
      629     9910    2               CALL VMA$ADD_RENTRY (VM_RADDRESS.ACCT,VM_RADDRESS.FOLDER,

   9910 12 000506   200156 452500                    STP2    VM_UADDRESS+75,,AUTO
        12 000507   200156 236100                    LDQ     VM_UADDRESS+75,,AUTO
        12 000510   000025 036000 13                 ADLQ    21
        12 000511   000017 235000 13                 LDA     15
        12 000512   200154 757100                    STAQ    VM_UADDRESS+73,,AUTO
        12 000513   200157 452500                    STP2    VM_UADDRESS+76,,AUTO
        12 000514   200157 236100                    LDQ     VM_UADDRESS+76,,AUTO
        12 000515   000012 036000 13                 ADLQ    10
        12 000516   200153 756100                    STQ     VM_UADDRESS+72,,AUTO
        12 000517   200160 452500                    STP2    VM_UADDRESS+77,,AUTO
        12 000520   200160 236100                    LDQ     VM_UADDRESS+77,,AUTO
        12 000521   000013 036000 13                 ADLQ    11
        12 000522   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000523   200161 452500                    STP2    VM_UADDRESS+78,,AUTO
        12 000524   200161 236100                    LDQ     VM_UADDRESS+78,,AUTO
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:96   
        12 000525   000014 036000 13                 ADLQ    12
        12 000526   200151 756100                    STQ     VM_UADDRESS+70,,AUTO
        12 000527   200162 452500                    STP2    VM_UADDRESS+79,,AUTO
        12 000530   200162 236100                    LDQ     VM_UADDRESS+79,,AUTO
        12 000531   000015 036000 13                 ADLQ    13
        12 000532   200150 756100                    STQ     VM_UADDRESS+69,,AUTO
        12 000533   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000534   000024 631400 13                 EPPR1   20
        12 000535   000000 701000 xent               TSX1    VMA$ADD_RENTRY
        12 000536   000430 702000 12                 TSX2    E_PMME
        12 000537   000576 710000 12                 TRA     s:9926

      630     9911    2                 VM_RADDRESS.PASS,VM_RADDRESS.SITENAME,%NO#,
      631     9912    2                 VM_RADDRESS.NAME_KEY) ALTRET(E_PMME);
      632     9913    3           ELSE DO;

      633     9914    3               IF VM_UADDRESS.TYPE = %VM_ADD_RESOLVED

   9914 12 000540   000001 116003                    CMPQ    1,DU
        12 000541   000545 601000 12                 TNZ     s:9918

      634     9915
      635     9916                                                /* User is defined only as (,,@site) */
      636     9917    3               THEN VM_UADDRESS.USER_NAME = ADDR_SPEC.USER_NAME;

   9917 12 000542   000100 100500                    MLR     fill='000'O
        12 000543   000021 600311                    ADSC9   17,,PR0                  cn=3,n=201
        12 000544   200064 600311                    ADSC9   VM_UADDRESS+17,,AUTO     cn=3,n=201

      637     9918    3               CALL VMA$ADD_UENTRY (VM_UADDRESS.USER_NAME,VM_UADDRESS.FOLDER,

   9918 12 000545   200156 452500                    STP2    VM_UADDRESS+75,,AUTO
        12 000546   200156 236100                    LDQ     VM_UADDRESS+75,,AUTO
        12 000547   000026 036000 13                 ADLQ    22
        12 000550   000017 235000 13                 LDA     15
        12 000551   200154 757100                    STAQ    VM_UADDRESS+73,,AUTO
        12 000552   200157 452500                    STP2    VM_UADDRESS+76,,AUTO
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:97   
        12 000553   200157 236100                    LDQ     VM_UADDRESS+76,,AUTO
        12 000554   000020 036000 13                 ADLQ    16
        12 000555   200153 756100                    STQ     VM_UADDRESS+72,,AUTO
        12 000556   200160 452500                    STP2    VM_UADDRESS+77,,AUTO
        12 000557   200160 236100                    LDQ     VM_UADDRESS+77,,AUTO
        12 000560   000021 036000 13                 ADLQ    17
        12 000561   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000562   200161 452500                    STP2    VM_UADDRESS+78,,AUTO
        12 000563   200161 236100                    LDQ     VM_UADDRESS+78,,AUTO
        12 000564   000022 036000 13                 ADLQ    18
        12 000565   200151 756100                    STQ     VM_UADDRESS+70,,AUTO
        12 000566   200162 452500                    STP2    VM_UADDRESS+79,,AUTO
        12 000567   200162 236100                    LDQ     VM_UADDRESS+79,,AUTO
        12 000570   000023 036000 13                 ADLQ    19
        12 000571   200150 756100                    STQ     VM_UADDRESS+69,,AUTO
        12 000572   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000573   000024 631400 13                 EPPR1   20
        12 000574   000000 701000 xent               TSX1    VMA$ADD_UENTRY
        12 000575   000430 702000 12                 TSX2    E_PMME

      638     9919    3                 VM_UADDRESS.PASS,VM_UADDRESS.SITENAME,%NO#,
      639     9920    3                 VM_UADDRESS.NAME_KEY) ALTRET(E_PMME);
      640     9921    3           END;

      641     9922        /*
      642     9923             ***** Depend upon VM_ADD_HEAD.HEAD$ to point
      643     9924                   to the entry just added ...
      644     9925        */
      645     9926    2           VM_ADDLIST$ -> VM_ADD_HEAD.HEAD$ -> VM$RADDRESS.FLAGS.USER# = %YES#;

   9926 12 000576   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000577   000003 471500                    LDP1    3,,PR0
        12 000600   200000 236003                    LDQ     65536,DU
        12 000601   100002 256100                    ORSQ    2,,PR1

      646     9927    2       END;                            /* Do forever ... end */

PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:98   
   9927 12 000602   000435 710000 12                 TRA     s:9891

      647     9928    1   END_MOVE_USER:
      648     9929    1       RETURN;

   9929 12 000603   000000 702200 xent  END_MOVE_US* TSX2  ! X66_ARET

      649     9930        /**/
      650     9931    1   STORE_ADDRESS:
      651     9932    1       CALL VMA$ADD_UENTRY (ADDR_SPEC.USER_NAME,ADDR_SPEC.FOLDER,

   9932 12 000604   000017 236000 13    STORE_ADDRE* LDQ     15
        12 000605   200154 756100                    STQ     VM_UADDRESS+73,,AUTO
        12 000606   200003 236100                    LDQ     @ADDR_SPEC,,AUTO
        12 000607   000001 036000 13                 ADLQ    1
        12 000610   200153 756100                    STQ     VM_UADDRESS+72,,AUTO
        12 000611   200003 236100                    LDQ     @ADDR_SPEC,,AUTO
        12 000612   000027 036000 13                 ADLQ    23
        12 000613   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000614   200003 236100                    LDQ     @ADDR_SPEC,,AUTO
        12 000615   000030 036000 13                 ADLQ    24
        12 000616   200151 756100                    STQ     VM_UADDRESS+70,,AUTO
        12 000617   200003 236100                    LDQ     @ADDR_SPEC,,AUTO
        12 000620   000031 036000 13                 ADLQ    25
        12 000621   200150 756100                    STQ     VM_UADDRESS+69,,AUTO
        12 000622   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000623   000016 631400 13                 EPPR1   14
        12 000624   000000 701000 xent               TSX1    VMA$ADD_UENTRY
        12 000625   000430 702000 12                 TSX2    E_PMME

      652     9933    1         ADDR_SPEC.PASS,ADDR_SPEC.SITENAME,%NO#) ALTRET(E_PMME);
      653     9934    1       RETURN;

   9934 12 000626   000000 702200 xent               TSX2  ! X66_ARET

      654     9935        /**/
      655     9936    1   STORE_ERR_ADDRESS:
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:99   
      656     9937    1       CALL VMA$ADD_UENTRY (ADDR_SPEC.USER_NAME,ADDR_SPEC.FOLDER,

   9937 12 000627   000033 236000 13    STORE_ERR_A* LDQ     27
        12 000630   200154 756100                    STQ     VM_UADDRESS+73,,AUTO
        12 000631   200003 236100                    LDQ     @ADDR_SPEC,,AUTO
        12 000632   000001 036000 13                 ADLQ    1
        12 000633   200153 756100                    STQ     VM_UADDRESS+72,,AUTO
        12 000634   200003 236100                    LDQ     @ADDR_SPEC,,AUTO
        12 000635   000027 036000 13                 ADLQ    23
        12 000636   200152 756100                    STQ     VM_UADDRESS+71,,AUTO
        12 000637   200003 236100                    LDQ     @ADDR_SPEC,,AUTO
        12 000640   000030 036000 13                 ADLQ    24
        12 000641   200151 756100                    STQ     VM_UADDRESS+70,,AUTO
        12 000642   200003 236100                    LDQ     @ADDR_SPEC,,AUTO
        12 000643   000031 036000 13                 ADLQ    25
        12 000644   200150 756100                    STQ     VM_UADDRESS+69,,AUTO
        12 000645   200150 630500                    EPPR0   VM_UADDRESS+69,,AUTO
        12 000646   000016 631400 13                 EPPR1   14
        12 000647   000000 701000 xent               TSX1    VMA$ADD_UENTRY
        12 000650   000430 702000 12                 TSX2    E_PMME

      657     9938    1         ADDR_SPEC.PASS,ADDR_SPEC.SITENAME,%YES#) ALTRET(E_PMME);
      658     9939    1       RETURN;                           /** Used to altret **/

   9939 12 000651   000000 702200 xent               TSX2  ! X66_ARET

VM_LISTKEY
 Sect OctLoc
  11     000   311074 ******   ****** ******   ****** ******   ****** ******    .<..............
  11     060*  ****** ******   ****** ******   ****** ******                    ............

VM_USERKEY
 Sect OctLoc
  11     063   311120 ******   ****** ******   ****** ******   ****** ******    .P..............
  11     143*  ****** ******   ****** ******   ****** ******                    ............

(unnamed)
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:100  
 Sect OctLoc
  13     000   000002 000000   000017 600000   040040 040040   000000 006014    ........    ....
  13     004   000003 000000   000000 006000   000000 006000   000063 006000    .............3..
  13     010   000000 000000   000004 000000   000036 600000   000034 600000    ................
  13     014   000026 400000   000040 600000   000005 000000   000010 006000    ..... ..........
  13     020   000062 600000   000060 600000   000052 400000   000064 600000    .2...0...*...4..
  13     024   000006 000000   000021 400000   000045 400000   000015 600000    .........%......
  13     030   000007 400000   000021 600000   400000 000000   000032 006000    ................
      659     9940    1   END VMA$EXPAND_LIST;
      660     9941        %EOD;

PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:101  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$EXPAND_LIST.
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:102  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$EXPAND_LIST

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(1818)  r     1 VM_LISTKEY                63-0-0/c STRC(1818)  r     1 VM_USERKEY

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ADDR_SPEC                 7-0-0/w PTR         r     1 @EXPAND_USER#
     6-0-0/w PTR         r     1 @SEARCH_LEVEL              5-0-0/w PTR         r     1 @VM_SEARCH_INFO
     4-0-0/w PTR         r     1 @WORK$                    *0-0-0/w STRC(2448)  r     1 ADDR_SPEC
    14-0-0/w UBIN        r     1 EXPAND#                   *0-0-0/b BIT         r     1 EXPAND_USER#
    13-0-0/w SBIN        r     1 NEW_SEARCH_LEVEL          12-0-0/w PTR         r     1 NEW_WORK$
    10-0-0/w PTR         r     1 NEXT$                     11-0-0/w SBIN        r     1 SEARCH_INDX
    *0-0-0/w SBIN        r     1 SEARCH_LEVEL              15-0-0/c CHAR(8)     r     1 SITENAME
    17-0-0/w STRC(711)   r     1 VM_RADDRESS               *0-0-0/w STRC(1260)  r     1 VM_SEARCH_INFO
    43-0-0/w STRC(2448)  r     1 VM_UADDRESS               *0-0-0/w PTR         r     1 WORK$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/c ASTR(9)     r     1 ERRMSG_FID
     0-0-0/w UBIN              1 M$DO_NUM                   0-0-0/w UBIN              1 M$LO_NUM
     0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM         0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM
     0-0-0/w UBIN              1 M$MAIL_FILE_NUM            0-0-0/w UBIN        r     1 M$MAIL_GLOBAL_NUM
     0-0-0/w UBIN              1 M$ME_NUM                   0-0-0/w UBIN              1 M$NODE_NUM
     0-0-0/w UBIN              1 M$SI_NUM                   0-0-0/w UBIN              1 M$WORK_NUM
     0-0-0/w PTR         r     1 VM_ADDLIST$                0-0-0/d VECT              1 VM_ADDLIST_
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:103  
     0-0-0/w PTR               1 VM_ADDREC$                 0-0-0/d VECT              1 VM_ADDREC_
     0-0-0/w PTR               1 VM_COPY$                   0-0-0/d VECT              1 VM_COPY_
     0-0-0/w PTR               1 VM_ENCLLIST$               0-0-0/d VECT              1 VM_ENCLLIST_
     0-0-0/w PTR               1 VM_ENCLREC$                0-0-0/d VECT              1 VM_ENCLREC_
     0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME       0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME
     0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS       0-0-0/w PTR               1 VM_HEADER$
     0-0-0/d VECT              1 VM_HEADER_                 0-0-0/d VECT              1 VM_HEADER_INIT_
     0-0-0/w PTR               1 VM_INPUT$                  0-0-0/d VECT              1 VM_INPUT_
     0-0-0/c STRC(72)          1 VM_MAILCG_NAME             0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA
     0-0-0/c STRC(72)          1 VM_MAIL_ACCT               0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME
     0-0-0/w PTR               1 VM_PARSEAREA$              0-0-0/d VECT              1 VM_PARSEAREA_
     0-0-0/w PTR               1 VM_PROFILE$                0-0-0/d VECT              1 VM_PROFILE_
     0-0-0/w PTR               1 VM_SELECT$                 0-0-0/d VECT              1 VM_SELECT_
     0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME          0-0-0/c CHAR(8)     r     1 VM_SITENAME
     0-0-0/w PTR               1 VM_WORK$                   0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d STRC(4608)  r     1 LOWER_UPPER                0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/w STRC(711)   r     1 VM$RADDRESS                0-0-0/w STRC(2448)        1 VM$UADDRESS
     0-0-0/w STRC(252)   r     1 VM_ADD_HEAD                0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$EXPAND_LIST requires 426 words for executable code.
   Procedure VMA$EXPAND_LIST requires 116 words of local(AUTO) storage.
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:104  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:105  
          MINI XREF LISTING

ADDR_SPEC
      9383**DCL        48--PROC     9698--ENTRY    9717--ENTRY
ADDR_SPEC.FOLDER
      9398**DCL      9399--REDEF    9841>>IF       9843>>ASSIGN   9896>>IF       9899>>ASSIGN   9900>>ASSIGN
      9932<>CALL     9937<>CALL
ADDR_SPEC.PASS
      9403**DCL      9844>>IF       9846>>ASSIGN   9902>>IF       9905>>ASSIGN   9906>>ASSIGN   9932<>CALL
      9937<>CALL
ADDR_SPEC.SITENAME
      9405**DCL      9732<>CALL     9734>>CALLBLT  9932<>CALL     9937<>CALL
ADDR_SPEC.USER_NAME
      9406**DCL      9917>>ASSIGN   9932<>CALL     9937<>CALL
ADDR_SPEC.USER_NAME.COUNT
      9407**DCL      9744>>ASSIGN   9831>>IF
ADDR_SPEC.USER_NAME.TEXT
      9408**DCL      9744>>ASSIGN   9831>>IF
B$ALT.CODE
      9459**DCL      9459--REDEF    9460--REDEF    9460--REDEF
B$ALT.ERR.CODE
      9461**DCL      9758>>IF
B$ALT.ERR.ERR#
      9461**DCL      9461--REDEF
B$ALT.EVID
      9460**DCL      9460--REDEF    9460--REDEF
B$TCB.ALT$
      9455**DCL      9758>>IF
B$TCB$
      9012**DCL      9455--IMP-PTR  9758>>IF
B$XL_UPPER$
      9344**DCL      9345--IMP-PTR  9734>>CALLBLT
END_LOOP
      9883**LABEL    9815--CALLALT
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:106  
END_MOVE_USER
      9929**LABEL    9891--CALLALT
ERRMSG_FID.L#
      9080**DCL      9080--IMP-SIZ
EXPAND
      9732**LABEL    9687--GOTO     9704--GOTO     9723--GOTO
EXPAND#
      9451**DCL      9686<<ASSIGN   9703<<ASSIGN   9722<<ASSIGN   9771>>IF       9804>>IF       9847>>IF
      9852>>IF
EXPAND_USER#
      9439**DCL        48--PROC     9698--ENTRY    9717--ENTRY    9774--IF       9774>>IF
E_PMME
      9886**LABEL    9819--CALLALT  9862--CALLALT  9910--CALLALT  9918--CALLALT  9932--CALLALT  9937--CALLALT
E_READ
      9758**LABEL    9754--CALLALT
LOWER_UPPER
      9345**DCL      9734>>CALLBLT
M$MAIL_GLOBAL_NUM
      8995**DCL      9769<>CALL     9804>>IF       9860<>CALL
MOVE_USER_DEF
      9889**LABEL    9779--GOTO
NEW_SEARCH_LEVEL
      9450**DCL      9834<<ASSIGN   9836<<ASSIGN   9849<>CALL     9867<>CALL     9872<>CALL
NEW_WORK$
      9449**DCL      9824<<ASSIGN   9849<>CALL     9860<>CALL     9867<>CALL     9872<>CALL
NEXT$
      9447**DCL      9813<<ASSIGN   9815<>CALL     9889<<ASSIGN   9891<>CALL
NOT_DEFINED
      9870**LABEL    9849--CALLALT  9867--CALLALT  9872--CALLALT
SEARCH_INDX
      9448**DCL      9747<<ASSIGN   9749<<ASSIGN   9750>>IF       9754>>CALL     9761<<ASSIGN   9761>>ASSIGN
      9762>>IF       9804>>IF       9834>>ASSIGN
SEARCH_LEVEL
      9438**DCL        48--PROC     9698--ENTRY    9717--ENTRY    9745--IF       9747>>ASSIGN
SITENAME
      9452**DCL      9732<>CALL     9734<<CALLBLT  9736>>IF       9736>>IF
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:107  
STORE_ADDRESS
      9932**LABEL    9739--GOTO     9773--GOTO     9777--GOTO     9808--GOTO
STORE_ERR_ADDRESS
      9937**LABEL    9752--GOTO     9769--CALLALT  9795--GOTO
TRY_AGAIN
      9754**LABEL    9781--GOTO
VM$RADDRESS.FLAGS.USER#
      9623**DCL      9926<<ASSIGN
VM$RADDRESS.FOLDER
      9630**DCL      9631--REDEF
VM$UADDRESS.FOLDER
      9665**DCL      9666--REDEF
VMA$ADD_RENTRY
      9441**DCL-ENT  9819--CALL     9910--CALL
VMA$ADD_UENTRY
      9442**DCL-ENT  9862--CALL     9918--CALL     9932--CALL     9937--CALL
VMA$EXPAND_LIST
        48**PROC     9872--CALL
VMA$EXPAND_LIST_FULL
      9717**ENTRY    9849--CALL
VMA$EXPAND_LIST_GLOBAL
      9698**ENTRY    9867--CALL
VMA$GET_LIST
      9443**DCL-ENT  9754--CALL     9769--CALL     9860--CALL
VMA$GET_NEXT_ENTRY
      9444**DCL-ENT  9815--CALL     9891--CALL
VMA$GET_SITE_NAME
      9445**DCL-ENT  9732--CALL
VM_ADDLIST$
      8934**DCL      9926>>ASSIGN
VM_ADD_HEAD.ADDRESS_SIZE
      9480**DCL      9824>>ASSIGN
VM_ADD_HEAD.HEAD$
      9489**DCL      9813>>ASSIGN   9889>>ASSIGN   9926>>ASSIGN
VM_ADD_HEAD.NUM_ENTRIES
      9482**DCL      9792>>IF
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:108  
VM_LISTKEY
      9580**DCL      9754<>CALL
VM_LISTKEY.TEXT
      9584**DCL      9744<<ASSIGN   9768>>ASSIGN
VM_RADDRESS
      9508**DCL      9815<>CALL     9891<>CALL
VM_RADDRESS.ACCT
      9531**DCL      9819<>CALL     9908>>IF       9910<>CALL
VM_RADDRESS.FOLDER
      9523**DCL      9524--REDEF    9819<>CALL     9899<<ASSIGN   9910<>CALL
VM_RADDRESS.NAME_KEY
      9521**DCL      9910<>CALL
VM_RADDRESS.PASS
      9528**DCL      9819<>CALL     9905<<ASSIGN   9910<>CALL
VM_RADDRESS.SITENAME
      9530**DCL      9819<>CALL     9910<>CALL
VM_SEARCH_INFO
      9421**DCL        48--PROC     9698--ENTRY    9717--ENTRY    9849<>CALL     9867<>CALL     9872<>CALL
VM_SEARCH_INFO.DCB#
      9424**DCL      9754<>CALL     9804>>IF
VM_SEARCH_INFO.NUM_ENTRIES
      9422**DCL      9750>>IF       9762>>IF
VM_SITENAME
      9203**DCL      9736>>IF
VM_UADDRESS
      9543**DCL      9815<>CALL     9849<>CALL     9867<>CALL     9872<>CALL     9891<>CALL
VM_UADDRESS.FOLDER
      9558**DCL      9559--REDEF    9843<<ASSIGN   9862<>CALL     9900<<ASSIGN   9918<>CALL
VM_UADDRESS.NAME_KEY
      9556**DCL      9918<>CALL
VM_UADDRESS.PASS
      9563**DCL      9846<<ASSIGN   9862<>CALL     9906<<ASSIGN   9918<>CALL
VM_UADDRESS.SITENAME
      9565**DCL      9862<>CALL     9918<>CALL
VM_UADDRESS.TYPE
      9555**DCL      9816>>IF       9908>>IF       9914>>IF
PL6.E3A0      #002=VMA$EXPAND_LIST File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:02 Page:109  
VM_UADDRESS.USER_NAME
      9566**DCL      9862<>CALL     9917<<ASSIGN   9918<>CALL
VM_UADDRESS.USER_NAME.COUNT
      9567**DCL      9831>>IF       9858>>ASSIGN
VM_UADDRESS.USER_NAME.TEXT
      9568**DCL      9831>>IF       9858>>ASSIGN
VM_USERKEY
      9596**DCL      9769<>CALL     9860<>CALL
VM_USERKEY.TEXT
      9600**DCL      9768<<ASSIGN   9858<<ASSIGN
WORK$
      9410**DCL        48--PROC     9479--IMP-PTR  9698--ENTRY    9717--ENTRY    9754<>CALL     9769<>CALL
      9792>>IF       9813>>ASSIGN   9815<>CALL     9824>>ASSIGN   9824>>ASSIGN   9889>>ASSIGN   9891<>CALL
X$STRING.SIZ
      8926**DCL      8927--IMP-SIZ

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:110  
      661        1        /*T***********************************************************/
      662        2        /*T*                                                         */
      663        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      664        4        /*T*                                                         */
      665        5        /*T***********************************************************/
      666        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      667        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      668        8        /*F*
      669        9             NAME: VMA$ADD_RENTRY
      670       10             PURPOSE:
      671       11                   To add a RESOLVED address entry to the VM_ADD_HEAD structure.
      672       12             DESCRIPTION:
      673       13                   This routine has four parameters:
      674       14
      675       15                      ACCT       - account number of this address.
      676       16                      FOLDER     - folder name of this address.
      677       17                      PASSWORD   - password for this address.
      678       18                      SITENAME   - sitename where this address resides.
      679       19
      680       20                   This routine will take these items, at least one is required,
      681       21                   and create a new entry in the address structure described
      682       22                   by VM_ADD_HEAD and VM_RADDRESS.
      683       23
      684       24                   This routine will not resue blocks on the FREED BLOCKS CHAIN.
      685       25                   This routine was built to run at the maximum speed possible
      686       26                   and therefore should only be used when space is not at
      687       27                   a premium and a specific order is not necessary.
      688       28                   VM_ADD_HEAD must be the last object in the data segment.
      689       29                   Everything after it will be stomped on.
      690       30        */
      691       31        VMA$ADD_RENTRY: PROC (ACCT,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;
      692       32        /***** Include files *****/
      693       33          %INCLUDE CP_6;
      694     5592          %INCLUDE CP_6_SUBS;
      695     6132          %INCLUDE VM_MACRO_C;
      696     7400          %INCLUDE VM_SUBS_C;
      697     7660          %INCLUDE VM_DATA_R;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:111  
      698     8091          %INCLUDE XUM_MACRO_C;
      699     8118        /***** Parameters *****/
      700     8119          %VLP_ACCT (FPTN=ACCT,STCLASS=" ");
      701     8132    1   DCL FOLDER CHAR(%SIZ_FOLDER);
      702     8133          %VLP_PASS (FPTN=PASSWORD,STCLASS=" ");
      703     8146    1   DCL SITENAME CHAR(%SIZ_SITENAME);
      704     8147    1   DCL ERR# BIT(1);
      705     8148    1   DCL NAME_KEY CHAR(20);
      706     8149        /***** Mail structures *****/
      707     8150          %VM_ADDTYPES;
      708     8154          %VM_ADD_HEAD;
      709     8183          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
      710     8218          %XUM$MCB (NAME=X$MCB,STCLASS=STATIC);
      711     8222        /***** Local variables *****/
      712     8223    1   DCL SITE CHAR(%SIZ_SITENAME);
      713     8224    1   DCL PTR$ PTR STATIC;
      714     8225    1   DCL LINK1$ PTR STATIC;
      715     8226    1   DCL LINK2$ PTR STATIC;
      716     8227        /***** External routines *****/
      717     8228    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
      718     8229    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
      719     8230    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
      720     8231        %EJECT;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:112  
      721     8232        /*
      722     8233             ***** Is this the first entry???
      723     8234        */
      724     8235    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0
      725     8236    1       THEN
      726     8237    2       DO;
      727     8238    2           VM_ADD_HEAD.HEAD$ = ADDR(NIL);
      728     8239    2           VM_ADD_HEAD.FREE$ = ADDR(NIL);
      729     8240    2           VM_ADD_HEAD.NEXT$ = ADDR(VM_ADD_HEAD.WORK_AREA);
      730     8241    2       END;
      731     8242        /*
      732     8243             ***** Allocate space for this entry ...
      733     8244        */
      734     8245    1       X$MCB.TYPE = 0;
      735     8246    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);
      736     8247    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);
      737     8248    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;
      738     8249    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;
      739     8250    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;
      740     8251    1       X$MCB.SIZE = SIZEC(VM$RADDRESS);
      741     8252    1       CALL X$ALLOCATE (X$MCB)
      742     8253    1       WHENALTRETURN
      743     8254    2       DO;
      744     8255    2           CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_) ALTRET(E_ADD);
      745     8256    2           X$MCB.WKSZ = X$MCB.WKSZ + 1024;
      746     8257    2           CALL X$ALLOCATE (X$MCB) ALTRET(E_ADD);
      747     8258    2       END;
      748     8259    1       PTR$ = X$MCB.ADDRESS$;
      749     8260    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;
      750     8261    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;
      751     8262        /*
      752     8263             ***** Add new entry.
      753     8264                   Go for speed. Do not sort...
      754     8265        */
      755     8266    1       IF SITENAME = ' '
      756     8267    1       THEN                            /* Supply local sitename */
      757     8268    1           SITE = VM_SITENAME;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:113  
      758     8269    1       ELSE
      759     8270    1           SITE = SITENAME;
      760     8271    1       PTR$ -> VM$RADDRESS.NEXT$ = VM_ADD_HEAD.HEAD$;
      761     8272    1       PTR$ -> VM$RADDRESS.PREV$ = ADDR(NIL);
      762     8273    1       PTR$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED;
      763     8274    1       PTR$ -> VM$RADDRESS.ACCT = ACCT.ACCT#;
      764     8275    1       PTR$ -> VM$RADDRESS.FOLDER = FOLDER;
      765     8276    1       PTR$ -> VM$RADDRESS.PASS = PASSWORD.PASS#;
      766     8277    1       PTR$ -> VM$RADDRESS.SITENAME = SITE;
      767     8278    1       PTR$ -> VM$RADDRESS.FLAGS = %NO#;
      768     8279    1       IF ADDR(NAME_KEY) ~= ADDR(NIL)
      769     8280    1       THEN                            /* Use supplied value */
      770     8281    1           PTR$ -> VM$RADDRESS.NAME_KEY = NAME_KEY;
      771     8282    1       ELSE                            /* Use blanks */
      772     8283    1           PTR$ -> VM$RADDRESS.NAME_KEY = ' ';
      773     8284    1       IF ADDR(ERR#) ~= ADDR(NIL)
      774     8285    1       THEN
      775     8286    1           PTR$ -> VM$RADDRESS.FLAGS.UNDEF# = ERR#;
      776     8287    1       VM_ADD_HEAD.HEAD$ = PTR$;
      777     8288        /*
      778     8289             ***** Update NEXT$, NUM_ENTRIES and ADDRESS_SIZE ...
      779     8290        */
      780     8291    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;
      781     8292    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;
      782     8293    1       VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES + 1;
      783     8294    1       VM_ADD_HEAD.ADDRESS_SIZE = POFFW(VM_ADD_HEAD.NEXT$,VM_ADDLIST$);
      784     8295    1       IF PTR$ -> VM$RADDRESS.FLAGS.UNDEF#
      785     8296    1       THEN
      786     8297    1           VM_ADD_HEAD.FLAGS.ERR# = %YES#;
      787     8298    1       RETURN;
      788     8299        /**/
      789     8300    1   E_ADD:
      790     8301    1       ALTRETURN;
      791     8302        %EJECT;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:114  
      792     8303        /*F*
      793     8304             NAME: VMA$ADD_RENTRY_SORTED
      794     8305             PURPOSE:
      795     8306                   To add a RESOLVED addres entry in sorted order.
      796     8307             DESCRIPTION:
      797     8308                   This routine will do the same thing as VMA$ADD_RENTRY,
      798     8309                   except the entries will be in sorted order based on
      799     8310                   ACCT. These entries will be sorted after any UNRESOLVED
      800     8311                   entries.
      801     8312
      802     8313                   This routine will reuse blocks on the FREED BLOCKS CHAIN
      803     8314                   pointed to by VM_ADD_HEAD.FREE$ whenever possible.
      804     8315        */
      805     8316    1   VMA$ADD_RENTRY_SORTED: ENTRY (ACCT,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;
      806     8317        %EJECT;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:115  
      807     8318        /*
      808     8319             ***** Is this the first entry???
      809     8320        */
      810     8321    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0
      811     8322    1       THEN
      812     8323    2       DO;
      813     8324    2           VM_ADD_HEAD.HEAD$ = ADDR(NIL);
      814     8325    2           VM_ADD_HEAD.FREE$ = ADDR(NIL);
      815     8326    2           VM_ADD_HEAD.NEXT$ = ADDR(VM_ADD_HEAD.WORK_AREA);
      816     8327    2       END;
      817     8328        /*
      818     8329             ***** Check for duplicate entry
      819     8330        */
      820     8331    1       LINK1$ = VM_ADD_HEAD.HEAD$;
      821     8332    2       DO WHILE LINK1$ ~= ADDR(NIL);
      822     8333    2           IF LINK1$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED
      823     8334    2             AND LINK1$ -> VM$RADDRESS.ACCT = ACCT.ACCT#
      824     8335    2             AND LINK1$ -> VM$RADDRESS.FOLDER = FOLDER
      825     8336    2             AND LINK1$ -> VM$RADDRESS.SITENAME = SITENAME
      826     8337    2             AND LINK1$ -> VM$RADDRESS.PASS = PASSWORD.PASS#
      827     8338    2           THEN
      828     8339    2               IF ADDR(NAME_KEY) = ADDR(NIL)
      829     8340    3               THEN DO;
      830     8341    3                   IF LINK1$ -> VM$RADDRESS.NAME_KEY = ' '
      831     8342    3                   THEN
      832     8343    3                       RETURN;
      833     8344    3               END;
      834     8345    3               ELSE DO;
      835     8346    3                   IF LINK1$ -> VM$RADDRESS.NAME_KEY = NAME_KEY
      836     8347    3                   THEN
      837     8348    3                       RETURN;
      838     8349    3               END;
      839     8350    2           LINK1$ = LINK1$ -> VM$RADDRESS.NEXT$;
      840     8351    2       END;
      841     8352        /*
      842     8353             ***** Allocate space for this entry ...
      843     8354        */
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:116  
      844     8355    1       X$MCB.TYPE = 0;
      845     8356    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);
      846     8357    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);
      847     8358    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;
      848     8359    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;
      849     8360    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;
      850     8361    1       X$MCB.SIZE = SIZEC(VM$RADDRESS);
      851     8362    1       CALL X$ALLOCATE (X$MCB)
      852     8363    1       WHENALTRETURN
      853     8364    2       DO;
      854     8365    2           CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_) ALTRET(E_ADD);
      855     8366    2           X$MCB.WKSZ = X$MCB.WKSZ + 1024;
      856     8367    2           CALL X$ALLOCATE (X$MCB) ALTRET(E_ADD);
      857     8368    2       END;
      858     8369    1       PTR$ = X$MCB.ADDRESS$;
      859     8370    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;
      860     8371    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;
      861     8372        /*
      862     8373             ***** Store info ...
      863     8374        */
      864     8375    1       PTR$ -> VM$RADDRESS.NEXT$ = ADDR(NIL);
      865     8376    1       PTR$ -> VM$RADDRESS.PREV$ = ADDR(NIL);
      866     8377    1       PTR$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED;
      867     8378    1       PTR$ -> VM$RADDRESS.ACCT = ACCT.ACCT#;
      868     8379    1       PTR$ -> VM$RADDRESS.FOLDER = FOLDER;
      869     8380    1       PTR$ -> VM$RADDRESS.PASS = PASSWORD.PASS#;
      870     8381    1       PTR$ -> VM$RADDRESS.SITENAME = SITENAME;
      871     8382    1       PTR$ -> VM$RADDRESS.FLAGS = %NO#;
      872     8383    1       IF ADDR(NAME_KEY) ~= ADDR(NIL)
      873     8384    1       THEN                            /* Use supplied value */
      874     8385    1           PTR$ -> VM$RADDRESS.NAME_KEY = NAME_KEY;
      875     8386    1       ELSE                            /* Use blanks */
      876     8387    1           PTR$ -> VM$RADDRESS.NAME_KEY = ' ';
      877     8388    1       IF ADDR(ERR#) ~= ADDR(NIL)
      878     8389    1       THEN
      879     8390    1           PTR$ -> VM$RADDRESS.FLAGS.UNDEF# = ERR#;
      880     8391        /*
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:117  
      881     8392             ***** First entry?
      882     8393        */
      883     8394    1       IF VM_ADD_HEAD.HEAD$ = ADDR(NIL)
      884     8395    1       THEN
      885     8396    2       DO;
      886     8397    2           VM_ADD_HEAD.HEAD$ = PTR$;
      887     8398    2           GOTO UPDATE_RENTRY;
      888     8399    2       END;
      889     8400        /*
      890     8401             ***** New first entry?
      891     8402        */
      892     8403    1       IF VM_ADD_HEAD.HEAD$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED
      893     8404    1         AND VM_ADD_HEAD.HEAD$ -> VM$RADDRESS.ACCT > ACCT.ACCT#
      894     8405    1       THEN
      895     8406    2       DO;
      896     8407    2           PTR$ -> VM$RADDRESS.NEXT$ = VM_ADD_HEAD.HEAD$;
      897     8408    2           VM_ADD_HEAD.HEAD$ -> VM$RADDRESS.PREV$ = PTR$;
      898     8409    2           VM_ADD_HEAD.HEAD$ = PTR$;
      899     8410    2           GOTO UPDATE_RENTRY;
      900     8411    2       END;
      901     8412        /*
      902     8413             ***** Insert at end of list ...
      903     8414        */
      904     8415    1       LINK1$ = VM_ADD_HEAD.HEAD$;
      905     8416    1       LINK2$ = ADDR(NIL);               /* Points to previous entry */
      906     8417    2       DO WHILE (LINK1$ ~= ADDR(NIL));
      907     8418    2           IF LINK1$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED
      908     8419    2             AND LINK1$ -> VM$RADDRESS.ACCT > ACCT.ACCT#
      909     8420    2           THEN                       /* Insert now */
      910     8421    2               EXIT;
      911     8422    2           LINK2$ = LINK1$;
      912     8423    2           LINK1$ = LINK1$ -> VM$RADDRESS.NEXT$;
      913     8424    2       END;                            /* Do while ... end */
      914     8425    1       IF LINK1$ = ADDR(NIL)
      915     8426    1       THEN                            /* Insert at end */
      916     8427    2       DO;
      917     8428    2           PTR$ -> VM$RADDRESS.PREV$ = LINK2$;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:118  
      918     8429    2           LINK2$ -> VM$RADDRESS.NEXT$ = PTR$;
      919     8430    2           GOTO UPDATE_RENTRY;
      920     8431    2       END;
      921     8432    1       ELSE                            /* Insert in middle */
      922     8433    2       DO;
      923     8434    2           PTR$ -> VM$RADDRESS.PREV$ = LINK1$ -> VM$RADDRESS.PREV$;
      924     8435    2           PTR$ -> VM$RADDRESS.NEXT$ = LINK1$;
      925     8436    2           LINK1$ -> VM$RADDRESS.PREV$ = PTR$;
      926     8437    2           IF LINK2$ ~= ADDR(NIL)
      927     8438    2           THEN                  /* Previous node exists */
      928     8439    2               LINK2$ -> VM$RADDRESS.NEXT$ = PTR$;
      929     8440    2       END;
      930     8441        /*
      931     8442             ***** Update NEXT$, NUM_ENTRIES and ADDRESS_SIZE ...
      932     8443        */
      933     8444    1   UPDATE_RENTRY:
      934     8445    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;
      935     8446    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;
      936     8447    1       VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES + 1;
      937     8448    1       VM_ADD_HEAD.ADDRESS_SIZE = POFFW(VM_ADD_HEAD.NEXT$,VM_ADDLIST$);
      938     8449    1       IF PTR$ -> VM$RADDRESS.FLAGS.UNDEF#
      939     8450    1       THEN
      940     8451    1           VM_ADD_HEAD.FLAGS.ERR# = %YES#;
      941     8452    1       RETURN;
      942     8453        %EJECT;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:119  
      943     8454        /*F*
      944     8455             NAME: VMA$DEL_RENTRY
      945     8456             PURPOSE:
      946     8457                   To delete a RESOLVED address entry from the address list.
      947     8458             DESCRIPTION:
      948     8459                   This routine will search the address list described
      949     8460                   by VM_ADD_HEAD to find an entry where the ACCT,
      950     8461                   FOLDER and SITENAME match the passed parameters.
      951     8462                   All other parameters will be ignored.
      952     8463
      953     8464                   NOTE: An ALTRETURN means that the entry was not found.
      954     8465        */
      955     8466    1   VMA$DEL_RENTRY: ENTRY (ACCT,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;
      956     8467        /*
      957     8468             ***** No entries?
      958     8469        */
      959     8470    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0
      960     8471    1       THEN
      961     8472    1           ALTRETURN;
      962     8473    1       IF SITENAME = ' '
      963     8474    1       THEN                    /* supply local sitename */
      964     8475    1           SITE = VM_SITENAME;
      965     8476    1       ELSE
      966     8477    1           SITE = SITENAME;
      967     8478        /*
      968     8479             ***** Initialize ...
      969     8480        */
      970     8481    1       X$MCB.TYPE = 0;
      971     8482    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);
      972     8483    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);
      973     8484    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;
      974     8485    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;
      975     8486    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;
      976     8487        /*
      977     8488             ***** Search ...
      978     8489        */
      979     8490    1       LINK2$ = ADDR(NIL);
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:120  
      980     8491    1       LINK1$ = VM_ADD_HEAD.HEAD$;
      981     8492    2       DO WHILE (LINK1$ ~= ADDR(NIL));
      982     8493    2           IF LINK1$ -> VM$RADDRESS.FOLDER ~= FOLDER
      983     8494    2           THEN                     /* No match */
      984     8495    2               GOTO END_DEL_SRCH;
      985     8496    2           IF LINK1$ -> VM$RADDRESS.ACCT ~= ACCT.ACCT#
      986     8497    2           THEN
      987     8498    2               GOTO END_DEL_SRCH;
      988     8499    2           IF LINK1$ -> VM$RADDRESS.SITENAME ~= ' '
      989     8500    3           THEN DO;
      990     8501    3               IF SITE ~= LINK1$ -> VM$RADDRESS.SITENAME
      991     8502    3               THEN
      992     8503    3                   GOTO END_DEL_SRCH;
      993     8504    3           END;
      994     8505    3           ELSE DO;
      995     8506    3               IF SITE ~= VM_SITENAME
      996     8507    3               THEN
      997     8508    3                   GOTO END_DEL_SRCH;
      998     8509    3           END;
      999     8510    2           IF LINK2$ ~= ADDR(NIL)
     1000     8511    2           THEN
     1001     8512    2               LINK2$ -> VM$RADDRESS.NEXT$ =
     1002     8513    2                 LINK1$ -> VM$RADDRESS.NEXT$;
     1003     8514    2           ELSE
     1004     8515    2               VM_ADD_HEAD.HEAD$ = LINK1$ -> VM$RADDRESS.NEXT$;
     1005     8516    2           IF LINK1$ -> VM$RADDRESS.NEXT$ ~= ADDR(NIL)
     1006     8517    2           THEN
     1007     8518    2               LINK1$ -> VM$RADDRESS.NEXT$ ->
     1008     8519    2                 VM$RADDRESS.PREV$ = LINK2$;
     1009     8520    2           X$MCB.ADDRESS$ = LINK1$;
     1010     8521    2           CALL X$DEALLOCATE (X$MCB);
     1011     8522    2           VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES - 1;
     1012     8523    2           VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;
     1013     8524    2           VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;
     1014     8525    2           RETURN;
     1015     8526    2   END_DEL_SRCH: ;
     1016     8527    2           LINK2$ = LINK1$;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:121  
     1017     8528    2           LINK1$ = LINK1$ -> VM$RADDRESS.NEXT$;
     1018     8529    2       END;                            /* Do while ... end */
     1019     8530        /*
     1020     8531             ***** If we fell out,
     1021     8532                   then the entry must not be defined ...
     1022     8533        */
     1023     8534    1       ALTRETURN;
     1024     8535    1   END VMA$ADD_RENTRY;
     1025     8536        %EOD;

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:122  
--  Include file information  --

   XUM_MACRO_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ADD_RENTRY.

   Procedure VMA$ADD_RENTRY requires 452 words for executable code.
   Procedure VMA$ADD_RENTRY requires 14 words of local(AUTO) storage.

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:123  

 Object Unit name= VMA$ADD_RENTRY                             File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:02:45.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    12     14  VMA$ADD_RENTRY
   12   Proc  even  none   452    704  VMA$ADD_RENTRY
   13  RoData even  none     5      5  VMA$ADD_RENTRY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        6  VMA$ADD_RENTRY
    12    175          yes     yes      Std        6  VMA$ADD_RENTRY_SORTED
    12    541          yes     yes      Std        6  VMA$DEL_RENTRY
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:124  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 X$ALLOCATE
 yes     yes           Std       1 X$DEALLOCATE
 yes     yes           Std       2 VMA$ENLARGE_SEGMENT
                       nStd      0 X66_AUTO_N
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:125  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:126  


      661        1        /*T***********************************************************/
      662        2        /*T*                                                         */
      663        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      664        4        /*T*                                                         */
      665        5        /*T***********************************************************/
      666        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      667        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
      668        8        /*F*
      669        9             NAME: VMA$ADD_RENTRY
      670       10             PURPOSE:
      671       11                   To add a RESOLVED address entry to the VM_ADD_HEAD structure.
      672       12             DESCRIPTION:
      673       13                   This routine has four parameters:
      674       14
      675       15                      ACCT       - account number of this address.
      676       16                      FOLDER     - folder name of this address.
      677       17                      PASSWORD   - password for this address.
      678       18                      SITENAME   - sitename where this address resides.
      679       19
      680       20                   This routine will take these items, at least one is required,
      681       21                   and create a new entry in the address structure described
      682       22                   by VM_ADD_HEAD and VM_RADDRESS.
      683       23
      684       24                   This routine will not resue blocks on the FREED BLOCKS CHAIN.
      685       25                   This routine was built to run at the maximum speed possible
      686       26                   and therefore should only be used when space is not at
      687       27                   a premium and a specific order is not necessary.
      688       28                   VM_ADD_HEAD must be the last object in the data segment.
      689       29                   Everything after it will be stomped on.
      690       30        */
      691       31        VMA$ADD_RENTRY: PROC (ACCT,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;

     31 12 000000   000000 700200 xent  VMA$ADD_REN* TSX0  ! X66_AUTO_N
        12 000001   000016 000006                    ZERO    14,6

      692       32        /***** Include files *****/
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:127  
      693       33          %INCLUDE CP_6;
      694     5592          %INCLUDE CP_6_SUBS;
      695     6132          %INCLUDE VM_MACRO_C;
      696     7400          %INCLUDE VM_SUBS_C;
      697     7660          %INCLUDE VM_DATA_R;
      698     8091          %INCLUDE XUM_MACRO_C;
      699     8118        /***** Parameters *****/
      700     8119          %VLP_ACCT (FPTN=ACCT,STCLASS=" ");
      701     8132    1   DCL FOLDER CHAR(%SIZ_FOLDER);
      702     8133          %VLP_PASS (FPTN=PASSWORD,STCLASS=" ");
      703     8146    1   DCL SITENAME CHAR(%SIZ_SITENAME);
      704     8147    1   DCL ERR# BIT(1);
      705     8148    1   DCL NAME_KEY CHAR(20);
      706     8149        /***** Mail structures *****/
      707     8150          %VM_ADDTYPES;
      708     8154          %VM_ADD_HEAD;
      709     8183          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
      710     8218          %XUM$MCB (NAME=X$MCB,STCLASS=STATIC);
      711     8222        /***** Local variables *****/
      712     8223    1   DCL SITE CHAR(%SIZ_SITENAME);
      713     8224    1   DCL PTR$ PTR STATIC;
      714     8225    1   DCL LINK1$ PTR STATIC;
      715     8226    1   DCL LINK2$ PTR STATIC;
      716     8227        /***** External routines *****/
      717     8228    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
      718     8229    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
      719     8230    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
      720     8231        %EJECT;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:128  
      721     8232        /*
      722     8233             ***** Is this the first entry???
      723     8234        */
      724     8235    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0

   8235 12 000002   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000003   000001 235100                    LDA     1,,PR0
        12 000004   000013 601000 12                 TNZ     s:8245

      725     8236    1       THEN
      726     8237    2       DO;

      727     8238    2           VM_ADD_HEAD.HEAD$ = ADDR(NIL);

   8238 12 000005   000000 236000 13                 LDQ     0
        12 000006   000003 756100                    STQ     3,,PR0

      728     8239    2           VM_ADD_HEAD.FREE$ = ADDR(NIL);

   8239 12 000007   000004 756100                    STQ     4,,PR0

      729     8240    2           VM_ADD_HEAD.NEXT$ = ADDR(VM_ADD_HEAD.WORK_AREA);

   8240 12 000010   000000 236000 xsym               LDQ     VM_ADDLIST$
        12 000011   000006 036003                    ADLQ    6,DU
        12 000012   000005 756100                    STQ     5,,PR0

      730     8241    2       END;

      731     8242        /*
      732     8243             ***** Allocate space for this entry ...
      733     8244        */
      734     8245    1       X$MCB.TYPE = 0;

   8245 12 000013   000005 450000 11                 STZ     X$MCB+5

      735     8246    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:129  

   8246 12 000014   000120 235007                    LDA     80,DL
        12 000015   000007 755000 11                 STA     X$MCB+7

      736     8247    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);

   8247 12 000016   000001 236000 xsym               LDQ     VM_ADDLIST_+1
        12 000017   000002 756000 11                 STQ     X$MCB+2

      737     8248    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;

   8248 12 000020   000005 236100                    LDQ     5,,PR0
        12 000021   000003 756000 11                 STQ     X$MCB+3

      738     8249    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;

   8249 12 000022   000004 236100                    LDQ     4,,PR0
        12 000023   000001 756000 11                 STQ     X$MCB+1

      739     8250    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;

   8250 12 000024   000000 236000 xsym               LDQ     VM_ADDLIST_
        12 000025   000020 772000                    QRL     16
        12 000026   000001 036007                    ADLQ    1,DL
        12 000027   000002 772000                    QRL     2
        12 000030   000004 756000 11                 STQ     X$MCB+4

      740     8251    1       X$MCB.SIZE = SIZEC(VM$RADDRESS);

   8251 12 000031   000006 755000 11                 STA     X$MCB+6

      741     8252    1       CALL X$ALLOCATE (X$MCB)

   8252 12 000032   000002 630400 13                 EPPR0   2
        12 000033   000001 631400 13                 EPPR1   1
        12 000034   000000 701000 xent               TSX1    X$ALLOCATE
        12 000035   000037 702000 12                 TSX2    s:8255
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:130  
        12 000036   000052 710000 12                 TRA     s:8259

      742     8253    1       WHENALTRETURN
      743     8254    2       DO;

      744     8255    2           CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_) ALTRET(E_ADD);

   8255 12 000037   000003 630400 13                 EPPR0   3
        12 000040   000001 631400 13                 EPPR1   1
        12 000041   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        12 000042   000174 702000 12                 TSX2    E_ADD

      745     8256    2           X$MCB.WKSZ = X$MCB.WKSZ + 1024;

   8256 12 000043   000004 235000 11                 LDA     X$MCB+4
        12 000044   002000 035007                    ADLA    1024,DL
        12 000045   000004 755000 11                 STA     X$MCB+4

      746     8257    2           CALL X$ALLOCATE (X$MCB) ALTRET(E_ADD);

   8257 12 000046   000002 630400 13                 EPPR0   2
        12 000047   000001 631400 13                 EPPR1   1
        12 000050   000000 701000 xent               TSX1    X$ALLOCATE
        12 000051   000174 702000 12                 TSX2    E_ADD

      747     8258    2       END;

      748     8259    1       PTR$ = X$MCB.ADDRESS$;

   8259 12 000052   000000 236000 11                 LDQ     X$MCB
        12 000053   000011 756000 11                 STQ     PTR$

      749     8260    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;

   8260 12 000054   000003 236000 11                 LDQ     X$MCB+3
        12 000055   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000056   000005 756100                    STQ     5,,PR0
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:131  

      750     8261    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;

   8261 12 000057   000001 236000 11                 LDQ     X$MCB+1
        12 000060   000004 756100                    STQ     4,,PR0

      751     8262        /*
      752     8263             ***** Add new entry.
      753     8264                   Go for speed. Do not sort...
      754     8265        */
      755     8266    1       IF SITENAME = ' '

   8266 12 000061   200006 471500                    LDP1    @SITENAME,,AUTO
        12 000062   040000 106500                    CMPC    fill='040'O
        12 000063   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
        12 000064   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000065   000072 601000 12                 TNZ     s:8270

      756     8267    1       THEN                            /* Supply local sitename */
      757     8268    1           SITE = VM_SITENAME;

   8268 12 000066   040100 100400                    MLR     fill='040'O
        12 000067   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        12 000070   200011 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
        12 000071   000075 710000 12                 TRA     s:8271

      758     8269    1       ELSE
      759     8270    1           SITE = SITENAME;

   8270 12 000072   040100 100500                    MLR     fill='040'O
        12 000073   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
        12 000074   200011 000010                    ADSC9   SITE,,AUTO               cn=0,n=8

      760     8271    1       PTR$ -> VM$RADDRESS.NEXT$ = VM_ADD_HEAD.HEAD$;

   8271 12 000075   000003 236100                    LDQ     3,,PR0
        12 000076   000011 473400 11                 LDP3    PTR$
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:132  
        12 000077   300000 756100                    STQ     0,,PR3

      761     8272    1       PTR$ -> VM$RADDRESS.PREV$ = ADDR(NIL);

   8272 12 000100   000000 236000 13                 LDQ     0
        12 000101   300001 756100                    STQ     1,,PR3

      762     8273    1       PTR$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED;

   8273 12 000102   000001 236003                    LDQ     1,DU
        12 000103   300002 552120                    STBQ    2,'20'O,PR3

      763     8274    1       PTR$ -> VM$RADDRESS.ACCT = ACCT.ACCT#;

   8274 12 000104   200003 474500                    LDP4    @ACCT,,AUTO
        12 000105   040100 100500                    MLR     fill='040'O
        12 000106   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
        12 000107   300021 600010                    ADSC9   17,,PR3                  cn=3,n=8

      764     8275    1       PTR$ -> VM$RADDRESS.FOLDER = FOLDER;

   8275 12 000110   200004 475500                    LDP5    @FOLDER,,AUTO
        12 000111   040100 100500                    MLR     fill='040'O
        12 000112   500000 000031                    ADSC9   0,,PR5                   cn=0,n=25
        12 000113   300007 400031                    ADSC9   7,,PR3                   cn=2,n=25

      765     8276    1       PTR$ -> VM$RADDRESS.PASS = PASSWORD.PASS#;

   8276 12 000114   200005 476500                    LDP6    @PASSWORD,,AUTO
        12 000115   040100 100500                    MLR     fill='040'O
        12 000116   600000 000010                    ADSC9   0,,PR6                   cn=0,n=8
        12 000117   300015 600010                    ADSC9   13,,PR3                  cn=3,n=8

      766     8277    1       PTR$ -> VM$RADDRESS.SITENAME = SITE;

   8277 12 000120   040100 100500                    MLR     fill='040'O
        12 000121   200011 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:133  
        12 000122   300017 600010                    ADSC9   15,,PR3                  cn=3,n=8

      767     8278    1       PTR$ -> VM$RADDRESS.FLAGS = %NO#;

   8278 12 000123   000000 236003                    LDQ     0,DU
        12 000124   300002 552140                    STBQ    2,'40'O,PR3

      768     8279    1       IF ADDR(NAME_KEY) ~= ADDR(NIL)

   8279 12 000125   200010 236100                    LDQ     @NAME_KEY,,AUTO
        12 000126   000000 116000 13                 CMPQ    0
        12 000127   000135 600000 12                 TZE     s:8283

      769     8280    1       THEN                            /* Use supplied value */
      770     8281    1           PTR$ -> VM$RADDRESS.NAME_KEY = NAME_KEY;

   8281 12 000130   200010 477500                    LDP7    @NAME_KEY,,AUTO
        12 000131   040100 100500                    MLR     fill='040'O
        12 000132   700000 000024                    ADSC9   0,,PR7                   cn=0,n=20
        12 000133   300002 400024                    ADSC9   2,,PR3                   cn=2,n=20
        12 000134   000140 710000 12                 TRA     s:8284

      771     8282    1       ELSE                            /* Use blanks */
      772     8283    1           PTR$ -> VM$RADDRESS.NAME_KEY = ' ';

   8283 12 000135   040100 100400                    MLR     fill='040'O
        12 000136   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000137   300002 400024                    ADSC9   2,,PR3                   cn=2,n=20

      773     8284    1       IF ADDR(ERR#) ~= ADDR(NIL)

   8284 12 000140   200007 236100                    LDQ     @ERR#,,AUTO
        12 000141   000000 116000 13                 CMPQ    0
        12 000142   000147 600000 12                 TZE     s:8287

      774     8285    1       THEN
      775     8286    1           PTR$ -> VM$RADDRESS.FLAGS.UNDEF# = ERR#;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:134  

   8286 12 000143   200007 477500                    LDP7    @ERR#,,AUTO
        12 000144   003100 060500                    CSL     bolr='003'O
        12 000145   700000 000001                    BDSC    0,,PR7                   by=0,bit=0,n=1
        12 000146   300002 000001                    BDSC    2,,PR3                   by=0,bit=0,n=1

      776     8287    1       VM_ADD_HEAD.HEAD$ = PTR$;

   8287 12 000147   000011 236000 11                 LDQ     PTR$
        12 000150   000003 756100                    STQ     3,,PR0

      777     8288        /*
      778     8289             ***** Update NEXT$, NUM_ENTRIES and ADDRESS_SIZE ...
      779     8290        */
      780     8291    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;

   8291 12 000151   000003 236000 11                 LDQ     X$MCB+3
        12 000152   000005 756100                    STQ     5,,PR0

      781     8292    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;

   8292 12 000153   000001 236000 11                 LDQ     X$MCB+1
        12 000154   000004 756100                    STQ     4,,PR0

      782     8293    1       VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES + 1;

   8293 12 000155   000001 235100                    LDA     1,,PR0
        12 000156   000001 035007                    ADLA    1,DL
        12 000157   000001 755100                    STA     1,,PR0

      783     8294    1       VM_ADD_HEAD.ADDRESS_SIZE = POFFW(VM_ADD_HEAD.NEXT$,VM_ADDLIST$);

   8294 12 000160   000000 235000 xsym               LDA     VM_ADDLIST$
        12 000161   000022 771000                    ARL     18
        12 000162   200014 755100                    STA     SITE+3,,AUTO
        12 000163   000005 236100                    LDQ     5,,PR0
        12 000164   000022 772000                    QRL     18
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:135  
        12 000165   200014 136100                    SBLQ    SITE+3,,AUTO
        12 000166   000000 756100                    STQ     0,,PR0

      784     8295    1       IF PTR$ -> VM$RADDRESS.FLAGS.UNDEF#

   8295 12 000167   300002 234100                    SZN     2,,PR3
        12 000170   000173 605000 12                 TPL     s:8298

      785     8296    1       THEN
      786     8297    1           VM_ADD_HEAD.FLAGS.ERR# = %YES#;

   8297 12 000171   400000 236003                    LDQ     -131072,DU
        12 000172   000002 256100                    ORSQ    2,,PR0

      787     8298    1       RETURN;

   8298 12 000173   000000 702200 xent               TSX2  ! X66_ARET

      788     8299        /**/
      789     8300    1   E_ADD:
      790     8301    1       ALTRETURN;

   8301 12 000174   000000 702200 xent  E_ADD        TSX2  ! X66_AALT

      791     8302        %EJECT;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:136  
      792     8303        /*F*
      793     8304             NAME: VMA$ADD_RENTRY_SORTED
      794     8305             PURPOSE:
      795     8306                   To add a RESOLVED addres entry in sorted order.
      796     8307             DESCRIPTION:
      797     8308                   This routine will do the same thing as VMA$ADD_RENTRY,
      798     8309                   except the entries will be in sorted order based on
      799     8310                   ACCT. These entries will be sorted after any UNRESOLVED
      800     8311                   entries.
      801     8312
      802     8313                   This routine will reuse blocks on the FREED BLOCKS CHAIN
      803     8314                   pointed to by VM_ADD_HEAD.FREE$ whenever possible.
      804     8315        */
      805     8316    1   VMA$ADD_RENTRY_SORTED: ENTRY (ACCT,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;

   8316 12 000175   000000 700200 xent  VMA$ADD_REN* TSX0  ! X66_AUTO_N
        12 000176   000016 000006                    ZERO    14,6

      806     8317        %EJECT;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:137  
      807     8318        /*
      808     8319             ***** Is this the first entry???
      809     8320        */
      810     8321    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0

   8321 12 000177   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000200   000001 235100                    LDA     1,,PR0
        12 000201   000210 601000 12                 TNZ     s:8331

      811     8322    1       THEN
      812     8323    2       DO;

      813     8324    2           VM_ADD_HEAD.HEAD$ = ADDR(NIL);

   8324 12 000202   000000 236000 13                 LDQ     0
        12 000203   000003 756100                    STQ     3,,PR0

      814     8325    2           VM_ADD_HEAD.FREE$ = ADDR(NIL);

   8325 12 000204   000004 756100                    STQ     4,,PR0

      815     8326    2           VM_ADD_HEAD.NEXT$ = ADDR(VM_ADD_HEAD.WORK_AREA);

   8326 12 000205   000000 236000 xsym               LDQ     VM_ADDLIST$
        12 000206   000006 036003                    ADLQ    6,DU
        12 000207   000005 756100                    STQ     5,,PR0

      816     8327    2       END;

      817     8328        /*
      818     8329             ***** Check for duplicate entry
      819     8330        */
      820     8331    1       LINK1$ = VM_ADD_HEAD.HEAD$;

   8331 12 000210   000003 236100                    LDQ     3,,PR0
        12 000211   000012 756000 11                 STQ     LINK1$

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:138  
      821     8332    2       DO WHILE LINK1$ ~= ADDR(NIL);

   8332 12 000212   000264 710000 12                 TRA     s:8351

      822     8333    2           IF LINK1$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED

   8333 12 000213   000012 470400 11                 LDP0    LINK1$
        12 000214   000002 236100                    LDQ     2,,PR0
        12 000215   000777 376003                    ANQ     511,DU
        12 000216   000001 116003                    CMPQ    1,DU
        12 000217   000262 601000 12                 TNZ     s:8350
        12 000220   200003 471500                    LDP1    @ACCT,,AUTO
        12 000221   040100 106500                    CMPC    fill='040'O
        12 000222   000021 600010                    ADSC9   17,,PR0                  cn=3,n=8
        12 000223   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
        12 000224   000262 601000 12                 TNZ     s:8350
        12 000225   200004 473500                    LDP3    @FOLDER,,AUTO
        12 000226   040100 106500                    CMPC    fill='040'O
        12 000227   000007 400031                    ADSC9   7,,PR0                   cn=2,n=25
        12 000230   300000 000031                    ADSC9   0,,PR3                   cn=0,n=25
        12 000231   000262 601000 12                 TNZ     s:8350
        12 000232   200006 474500                    LDP4    @SITENAME,,AUTO
        12 000233   040100 106500                    CMPC    fill='040'O
        12 000234   000017 600010                    ADSC9   15,,PR0                  cn=3,n=8
        12 000235   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
        12 000236   000262 601000 12                 TNZ     s:8350
        12 000237   200005 475500                    LDP5    @PASSWORD,,AUTO
        12 000240   040100 106500                    CMPC    fill='040'O
        12 000241   000015 600010                    ADSC9   13,,PR0                  cn=3,n=8
        12 000242   500000 000010                    ADSC9   0,,PR5                   cn=0,n=8
        12 000243   000262 601000 12                 TNZ     s:8350

      823     8334    2             AND LINK1$ -> VM$RADDRESS.ACCT = ACCT.ACCT#
      824     8335    2             AND LINK1$ -> VM$RADDRESS.FOLDER = FOLDER
      825     8336    2             AND LINK1$ -> VM$RADDRESS.SITENAME = SITENAME
      826     8337    2             AND LINK1$ -> VM$RADDRESS.PASS = PASSWORD.PASS#
      827     8338    2           THEN
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:139  
      828     8339    2               IF ADDR(NAME_KEY) = ADDR(NIL)

   8339 12 000244   200010 236100                    LDQ     @NAME_KEY,,AUTO
        12 000245   000000 116000 13                 CMPQ    0
        12 000246   000254 601000 12                 TNZ     s:8346

      829     8340    3               THEN DO;

      830     8341    3                   IF LINK1$ -> VM$RADDRESS.NAME_KEY = ' '

   8341 12 000247   040000 106500                    CMPC    fill='040'O
        12 000250   000002 400024                    ADSC9   2,,PR0                   cn=2,n=20
        12 000251   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000252   000262 601000 12                 TNZ     s:8350

      831     8342    3                   THEN
      832     8343    3                       RETURN;

   8343 12 000253   000000 702200 xent               TSX2  ! X66_ARET

      833     8344    3               END;
      834     8345    3               ELSE DO;

      835     8346    3                   IF LINK1$ -> VM$RADDRESS.NAME_KEY = NAME_KEY

   8346 12 000254   200010 476500                    LDP6    @NAME_KEY,,AUTO
        12 000255   040100 106500                    CMPC    fill='040'O
        12 000256   000002 400024                    ADSC9   2,,PR0                   cn=2,n=20
        12 000257   600000 000024                    ADSC9   0,,PR6                   cn=0,n=20
        12 000260   000262 601000 12                 TNZ     s:8350

      836     8347    3                   THEN
      837     8348    3                       RETURN;

   8348 12 000261   000000 702200 xent               TSX2  ! X66_ARET

      838     8349    3               END;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:140  
      839     8350    2           LINK1$ = LINK1$ -> VM$RADDRESS.NEXT$;

   8350 12 000262   000000 236100                    LDQ     0,,PR0
        12 000263   000012 756000 11                 STQ     LINK1$

      840     8351    2       END;

   8351 12 000264   000000 116000 13                 CMPQ    0
        12 000265   000213 601000 12                 TNZ     s:8333

      841     8352        /*
      842     8353             ***** Allocate space for this entry ...
      843     8354        */
      844     8355    1       X$MCB.TYPE = 0;

   8355 12 000266   000005 450000 11                 STZ     X$MCB+5

      845     8356    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);

   8356 12 000267   000120 235007                    LDA     80,DL
        12 000270   000007 755000 11                 STA     X$MCB+7

      846     8357    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);

   8357 12 000271   000001 236000 xsym               LDQ     VM_ADDLIST_+1
        12 000272   000002 756000 11                 STQ     X$MCB+2

      847     8358    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;

   8358 12 000273   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000274   000005 236100                    LDQ     5,,PR0
        12 000275   000003 756000 11                 STQ     X$MCB+3

      848     8359    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;

   8359 12 000276   000004 236100                    LDQ     4,,PR0
        12 000277   000001 756000 11                 STQ     X$MCB+1
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:141  

      849     8360    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;

   8360 12 000300   000000 236000 xsym               LDQ     VM_ADDLIST_
        12 000301   000020 772000                    QRL     16
        12 000302   000001 036007                    ADLQ    1,DL
        12 000303   000002 772000                    QRL     2
        12 000304   000004 756000 11                 STQ     X$MCB+4

      850     8361    1       X$MCB.SIZE = SIZEC(VM$RADDRESS);

   8361 12 000305   000006 755000 11                 STA     X$MCB+6

      851     8362    1       CALL X$ALLOCATE (X$MCB)

   8362 12 000306   000002 630400 13                 EPPR0   2
        12 000307   000001 631400 13                 EPPR1   1
        12 000310   000000 701000 xent               TSX1    X$ALLOCATE
        12 000311   000313 702000 12                 TSX2    s:8365
        12 000312   000326 710000 12                 TRA     s:8369

      852     8363    1       WHENALTRETURN
      853     8364    2       DO;

      854     8365    2           CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_) ALTRET(E_ADD);

   8365 12 000313   000003 630400 13                 EPPR0   3
        12 000314   000001 631400 13                 EPPR1   1
        12 000315   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        12 000316   000174 702000 12                 TSX2    E_ADD

      855     8366    2           X$MCB.WKSZ = X$MCB.WKSZ + 1024;

   8366 12 000317   000004 235000 11                 LDA     X$MCB+4
        12 000320   002000 035007                    ADLA    1024,DL
        12 000321   000004 755000 11                 STA     X$MCB+4

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:142  
      856     8367    2           CALL X$ALLOCATE (X$MCB) ALTRET(E_ADD);

   8367 12 000322   000002 630400 13                 EPPR0   2
        12 000323   000001 631400 13                 EPPR1   1
        12 000324   000000 701000 xent               TSX1    X$ALLOCATE
        12 000325   000174 702000 12                 TSX2    E_ADD

      857     8368    2       END;

      858     8369    1       PTR$ = X$MCB.ADDRESS$;

   8369 12 000326   000000 236000 11                 LDQ     X$MCB
        12 000327   000011 756000 11                 STQ     PTR$

      859     8370    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;

   8370 12 000330   000003 236000 11                 LDQ     X$MCB+3
        12 000331   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000332   000005 756100                    STQ     5,,PR0

      860     8371    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;

   8371 12 000333   000001 236000 11                 LDQ     X$MCB+1
        12 000334   000004 756100                    STQ     4,,PR0

      861     8372        /*
      862     8373             ***** Store info ...
      863     8374        */
      864     8375    1       PTR$ -> VM$RADDRESS.NEXT$ = ADDR(NIL);

   8375 12 000335   000000 236000 13                 LDQ     0
        12 000336   000011 471400 11                 LDP1    PTR$
        12 000337   100000 756100                    STQ     0,,PR1

      865     8376    1       PTR$ -> VM$RADDRESS.PREV$ = ADDR(NIL);

   8376 12 000340   000000 236000 13                 LDQ     0
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:143  
        12 000341   100001 756100                    STQ     1,,PR1

      866     8377    1       PTR$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED;

   8377 12 000342   000001 236003                    LDQ     1,DU
        12 000343   100002 552120                    STBQ    2,'20'O,PR1

      867     8378    1       PTR$ -> VM$RADDRESS.ACCT = ACCT.ACCT#;

   8378 12 000344   200003 473500                    LDP3    @ACCT,,AUTO
        12 000345   040100 100500                    MLR     fill='040'O
        12 000346   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
        12 000347   100021 600010                    ADSC9   17,,PR1                  cn=3,n=8

      868     8379    1       PTR$ -> VM$RADDRESS.FOLDER = FOLDER;

   8379 12 000350   200004 474500                    LDP4    @FOLDER,,AUTO
        12 000351   040100 100500                    MLR     fill='040'O
        12 000352   400000 000031                    ADSC9   0,,PR4                   cn=0,n=25
        12 000353   100007 400031                    ADSC9   7,,PR1                   cn=2,n=25

      869     8380    1       PTR$ -> VM$RADDRESS.PASS = PASSWORD.PASS#;

   8380 12 000354   200005 475500                    LDP5    @PASSWORD,,AUTO
        12 000355   040100 100500                    MLR     fill='040'O
        12 000356   500000 000010                    ADSC9   0,,PR5                   cn=0,n=8
        12 000357   100015 600010                    ADSC9   13,,PR1                  cn=3,n=8

      870     8381    1       PTR$ -> VM$RADDRESS.SITENAME = SITENAME;

   8381 12 000360   200006 476500                    LDP6    @SITENAME,,AUTO
        12 000361   040100 100500                    MLR     fill='040'O
        12 000362   600000 000010                    ADSC9   0,,PR6                   cn=0,n=8
        12 000363   100017 600010                    ADSC9   15,,PR1                  cn=3,n=8

      871     8382    1       PTR$ -> VM$RADDRESS.FLAGS = %NO#;

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:144  
   8382 12 000364   000000 236003                    LDQ     0,DU
        12 000365   100002 552140                    STBQ    2,'40'O,PR1

      872     8383    1       IF ADDR(NAME_KEY) ~= ADDR(NIL)

   8383 12 000366   200010 236100                    LDQ     @NAME_KEY,,AUTO
        12 000367   000000 116000 13                 CMPQ    0
        12 000370   000376 600000 12                 TZE     s:8387

      873     8384    1       THEN                            /* Use supplied value */
      874     8385    1           PTR$ -> VM$RADDRESS.NAME_KEY = NAME_KEY;

   8385 12 000371   200010 477500                    LDP7    @NAME_KEY,,AUTO
        12 000372   040100 100500                    MLR     fill='040'O
        12 000373   700000 000024                    ADSC9   0,,PR7                   cn=0,n=20
        12 000374   100002 400024                    ADSC9   2,,PR1                   cn=2,n=20
        12 000375   000401 710000 12                 TRA     s:8388

      875     8386    1       ELSE                            /* Use blanks */
      876     8387    1           PTR$ -> VM$RADDRESS.NAME_KEY = ' ';

   8387 12 000376   040100 100400                    MLR     fill='040'O
        12 000377   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000400   100002 400024                    ADSC9   2,,PR1                   cn=2,n=20

      877     8388    1       IF ADDR(ERR#) ~= ADDR(NIL)

   8388 12 000401   200007 236100                    LDQ     @ERR#,,AUTO
        12 000402   000000 116000 13                 CMPQ    0
        12 000403   000410 600000 12                 TZE     s:8394

      878     8389    1       THEN
      879     8390    1           PTR$ -> VM$RADDRESS.FLAGS.UNDEF# = ERR#;

   8390 12 000404   200007 477500                    LDP7    @ERR#,,AUTO
        12 000405   003100 060500                    CSL     bolr='003'O
        12 000406   700000 000001                    BDSC    0,,PR7                   by=0,bit=0,n=1
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:145  
        12 000407   100002 000001                    BDSC    2,,PR1                   by=0,bit=0,n=1

      880     8391        /*
      881     8392             ***** First entry?
      882     8393        */
      883     8394    1       IF VM_ADD_HEAD.HEAD$ = ADDR(NIL)

   8394 12 000410   000003 236100                    LDQ     3,,PR0
        12 000411   000000 116000 13                 CMPQ    0
        12 000412   000416 601000 12                 TNZ     s:8403

      884     8395    1       THEN
      885     8396    2       DO;

      886     8397    2           VM_ADD_HEAD.HEAD$ = PTR$;

   8397 12 000413   000011 236000 11                 LDQ     PTR$
        12 000414   000003 756100                    STQ     3,,PR0

      887     8398    2           GOTO UPDATE_RENTRY;

   8398 12 000415   000514 710000 12                 TRA     UPDATE_RENTRY

      888     8399    2       END;
      889     8400        /*
      890     8401             ***** New first entry?
      891     8402        */
      892     8403    1       IF VM_ADD_HEAD.HEAD$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED

   8403 12 000416   000003 477500                    LDP7    3,,PR0
        12 000417   700002 236100                    LDQ     2,,PR7
        12 000420   000777 376003                    ANQ     511,DU
        12 000421   000001 116003                    CMPQ    1,DU
        12 000422   000436 601000 12                 TNZ     s:8415
        12 000423   040100 106500                    CMPC    fill='040'O
        12 000424   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
        12 000425   700021 600010                    ADSC9   17,,PR7                  cn=3,n=8
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:146  
        12 000426   000436 603000 12                 TRC     s:8415

      893     8404    1         AND VM_ADD_HEAD.HEAD$ -> VM$RADDRESS.ACCT > ACCT.ACCT#
      894     8405    1       THEN
      895     8406    2       DO;

      896     8407    2           PTR$ -> VM$RADDRESS.NEXT$ = VM_ADD_HEAD.HEAD$;

   8407 12 000427   000003 236100                    LDQ     3,,PR0
        12 000430   100000 756100                    STQ     0,,PR1

      897     8408    2           VM_ADD_HEAD.HEAD$ -> VM$RADDRESS.PREV$ = PTR$;

   8408 12 000431   000003 477500                    LDP7    3,,PR0
        12 000432   000011 236000 11                 LDQ     PTR$
        12 000433   700001 756100                    STQ     1,,PR7

      898     8409    2           VM_ADD_HEAD.HEAD$ = PTR$;

   8409 12 000434   000003 756100                    STQ     3,,PR0

      899     8410    2           GOTO UPDATE_RENTRY;

   8410 12 000435   000514 710000 12                 TRA     UPDATE_RENTRY

      900     8411    2       END;
      901     8412        /*
      902     8413             ***** Insert at end of list ...
      903     8414        */
      904     8415    1       LINK1$ = VM_ADD_HEAD.HEAD$;

   8415 12 000436   000003 236100                    LDQ     3,,PR0
        12 000437   000012 756000 11                 STQ     LINK1$

      905     8416    1       LINK2$ = ADDR(NIL);               /* Points to previous entry */

   8416 12 000440   000000 236000 13                 LDQ     0
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:147  
        12 000441   000013 756000 11                 STQ     LINK2$

      906     8417    2       DO WHILE (LINK1$ ~= ADDR(NIL));

   8417 12 000442   000461 710000 12                 TRA     s:8424

      907     8418    2           IF LINK1$ -> VM$RADDRESS.TYPE = %VM_ADD_RESOLVED

   8418 12 000443   000012 470400 11                 LDP0    LINK1$
        12 000444   000002 236100                    LDQ     2,,PR0
        12 000445   000777 376003                    ANQ     511,DU
        12 000446   000001 116003                    CMPQ    1,DU
        12 000447   000455 601000 12                 TNZ     s:8422
        12 000450   200003 471500                    LDP1    @ACCT,,AUTO
        12 000451   040100 106500                    CMPC    fill='040'O
        12 000452   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
        12 000453   000021 600010                    ADSC9   17,,PR0                  cn=3,n=8
        12 000454   000464 602000 12                 TNC     s:8425

      908     8419    2             AND LINK1$ -> VM$RADDRESS.ACCT > ACCT.ACCT#
      909     8420    2           THEN                       /* Insert now */
      910     8421    2               EXIT;
      911     8422    2           LINK2$ = LINK1$;

   8422 12 000455   000012 236000 11                 LDQ     LINK1$
        12 000456   000013 756000 11                 STQ     LINK2$

      912     8423    2           LINK1$ = LINK1$ -> VM$RADDRESS.NEXT$;

   8423 12 000457   000000 236100                    LDQ     0,,PR0
        12 000460   000012 756000 11                 STQ     LINK1$

      913     8424    2       END;                            /* Do while ... end */

   8424 12 000461   000012 236000 11                 LDQ     LINK1$
        12 000462   000000 116000 13                 CMPQ    0
        12 000463   000443 601000 12                 TNZ     s:8418
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:148  

      914     8425    1       IF LINK1$ = ADDR(NIL)

   8425 12 000464   000012 236000 11                 LDQ     LINK1$
        12 000465   000000 116000 13                 CMPQ    0
        12 000466   000476 601000 12                 TNZ     s:8434

      915     8426    1       THEN                            /* Insert at end */
      916     8427    2       DO;

      917     8428    2           PTR$ -> VM$RADDRESS.PREV$ = LINK2$;

   8428 12 000467   000013 236000 11                 LDQ     LINK2$
        12 000470   000011 470400 11                 LDP0    PTR$
        12 000471   000001 756100                    STQ     1,,PR0

      918     8429    2           LINK2$ -> VM$RADDRESS.NEXT$ = PTR$;

   8429 12 000472   000011 236000 11                 LDQ     PTR$
        12 000473   000013 471400 11                 LDP1    LINK2$
        12 000474   100000 756100                    STQ     0,,PR1

      919     8430    2           GOTO UPDATE_RENTRY;

   8430 12 000475   000514 710000 12                 TRA     UPDATE_RENTRY

      920     8431    2       END;
      921     8432    1       ELSE                            /* Insert in middle */
      922     8433    2       DO;

      923     8434    2           PTR$ -> VM$RADDRESS.PREV$ = LINK1$ -> VM$RADDRESS.PREV$;

   8434 12 000476   000012 470400 11                 LDP0    LINK1$
        12 000477   000001 236100                    LDQ     1,,PR0
        12 000500   000011 471400 11                 LDP1    PTR$
        12 000501   100001 756100                    STQ     1,,PR1

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:149  
      924     8435    2           PTR$ -> VM$RADDRESS.NEXT$ = LINK1$;

   8435 12 000502   000012 236000 11                 LDQ     LINK1$
        12 000503   100000 756100                    STQ     0,,PR1

      925     8436    2           LINK1$ -> VM$RADDRESS.PREV$ = PTR$;

   8436 12 000504   000011 236000 11                 LDQ     PTR$
        12 000505   000001 756100                    STQ     1,,PR0

      926     8437    2           IF LINK2$ ~= ADDR(NIL)

   8437 12 000506   000013 236000 11                 LDQ     LINK2$
        12 000507   000000 116000 13                 CMPQ    0
        12 000510   000514 600000 12                 TZE     UPDATE_RENTRY

      927     8438    2           THEN                  /* Previous node exists */
      928     8439    2               LINK2$ -> VM$RADDRESS.NEXT$ = PTR$;

   8439 12 000511   000011 236000 11                 LDQ     PTR$
        12 000512   000013 473400 11                 LDP3    LINK2$
        12 000513   300000 756100                    STQ     0,,PR3

      929     8440    2       END;

      930     8441        /*
      931     8442             ***** Update NEXT$, NUM_ENTRIES and ADDRESS_SIZE ...
      932     8443        */
      933     8444    1   UPDATE_RENTRY:
      934     8445    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;

   8445 12 000514   000003 236000 11    UPDATE_RENT* LDQ     X$MCB+3
        12 000515   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000516   000005 756100                    STQ     5,,PR0

      935     8446    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:150  
   8446 12 000517   000001 236000 11                 LDQ     X$MCB+1
        12 000520   000004 756100                    STQ     4,,PR0

      936     8447    1       VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES + 1;

   8447 12 000521   000001 235100                    LDA     1,,PR0
        12 000522   000001 035007                    ADLA    1,DL
        12 000523   000001 755100                    STA     1,,PR0

      937     8448    1       VM_ADD_HEAD.ADDRESS_SIZE = POFFW(VM_ADD_HEAD.NEXT$,VM_ADDLIST$);

   8448 12 000524   000000 235000 xsym               LDA     VM_ADDLIST$
        12 000525   000022 771000                    ARL     18
        12 000526   200014 755100                    STA     SITE+3,,AUTO
        12 000527   000005 236100                    LDQ     5,,PR0
        12 000530   000022 772000                    QRL     18
        12 000531   200014 136100                    SBLQ    SITE+3,,AUTO
        12 000532   000000 756100                    STQ     0,,PR0

      938     8449    1       IF PTR$ -> VM$RADDRESS.FLAGS.UNDEF#

   8449 12 000533   000011 471400 11                 LDP1    PTR$
        12 000534   100002 234100                    SZN     2,,PR1
        12 000535   000540 605000 12                 TPL     s:8452

      939     8450    1       THEN
      940     8451    1           VM_ADD_HEAD.FLAGS.ERR# = %YES#;

   8451 12 000536   400000 236003                    LDQ     -131072,DU
        12 000537   000002 256100                    ORSQ    2,,PR0

      941     8452    1       RETURN;

   8452 12 000540   000000 702200 xent               TSX2  ! X66_ARET

      942     8453        %EJECT;
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:151  
      943     8454        /*F*
      944     8455             NAME: VMA$DEL_RENTRY
      945     8456             PURPOSE:
      946     8457                   To delete a RESOLVED address entry from the address list.
      947     8458             DESCRIPTION:
      948     8459                   This routine will search the address list described
      949     8460                   by VM_ADD_HEAD to find an entry where the ACCT,
      950     8461                   FOLDER and SITENAME match the passed parameters.
      951     8462                   All other parameters will be ignored.
      952     8463
      953     8464                   NOTE: An ALTRETURN means that the entry was not found.
      954     8465        */
      955     8466    1   VMA$DEL_RENTRY: ENTRY (ACCT,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;

   8466 12 000541   000000 700200 xent  VMA$DEL_REN* TSX0  ! X66_AUTO_N
        12 000542   000016 000006                    ZERO    14,6

      956     8467        /*
      957     8468             ***** No entries?
      958     8469        */
      959     8470    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0

   8470 12 000543   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000544   000001 235100                    LDA     1,,PR0
        12 000545   000547 601000 12                 TNZ     s:8473

      960     8471    1       THEN
      961     8472    1           ALTRETURN;

   8472 12 000546   000000 702200 xent               TSX2  ! X66_AALT

      962     8473    1       IF SITENAME = ' '

   8473 12 000547   200006 471500                    LDP1    @SITENAME,,AUTO
        12 000550   040000 106500                    CMPC    fill='040'O
        12 000551   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
        12 000552   000004 000001 13                 ADSC9   4                        cn=0,n=1
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:152  
        12 000553   000560 601000 12                 TNZ     s:8477

      963     8474    1       THEN                    /* supply local sitename */
      964     8475    1           SITE = VM_SITENAME;

   8475 12 000554   040100 100400                    MLR     fill='040'O
        12 000555   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        12 000556   200011 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
        12 000557   000563 710000 12                 TRA     s:8481

      965     8476    1       ELSE
      966     8477    1           SITE = SITENAME;

   8477 12 000560   040100 100500                    MLR     fill='040'O
        12 000561   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
        12 000562   200011 000010                    ADSC9   SITE,,AUTO               cn=0,n=8

      967     8478        /*
      968     8479             ***** Initialize ...
      969     8480        */
      970     8481    1       X$MCB.TYPE = 0;

   8481 12 000563   000005 450000 11                 STZ     X$MCB+5

      971     8482    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);

   8482 12 000564   000120 235007                    LDA     80,DL
        12 000565   000007 755000 11                 STA     X$MCB+7

      972     8483    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);

   8483 12 000566   000001 236000 xsym               LDQ     VM_ADDLIST_+1
        12 000567   000002 756000 11                 STQ     X$MCB+2

      973     8484    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;

   8484 12 000570   000005 236100                    LDQ     5,,PR0
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:153  
        12 000571   000003 756000 11                 STQ     X$MCB+3

      974     8485    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;

   8485 12 000572   000004 236100                    LDQ     4,,PR0
        12 000573   000001 756000 11                 STQ     X$MCB+1

      975     8486    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;

   8486 12 000574   000000 236000 xsym               LDQ     VM_ADDLIST_
        12 000575   000020 772000                    QRL     16
        12 000576   000001 036007                    ADLQ    1,DL
        12 000577   000002 772000                    QRL     2
        12 000600   000004 756000 11                 STQ     X$MCB+4

      976     8487        /*
      977     8488             ***** Search ...
      978     8489        */
      979     8490    1       LINK2$ = ADDR(NIL);

   8490 12 000601   000000 236000 13                 LDQ     0
        12 000602   000013 756000 11                 STQ     LINK2$

      980     8491    1       LINK1$ = VM_ADD_HEAD.HEAD$;

   8491 12 000603   000003 236100                    LDQ     3,,PR0
        12 000604   000012 756000 11                 STQ     LINK1$

      981     8492    2       DO WHILE (LINK1$ ~= ADDR(NIL));

   8492 12 000605   000701 710000 12                 TRA     s:8529

      982     8493    2           IF LINK1$ -> VM$RADDRESS.FOLDER ~= FOLDER

   8493 12 000606   000012 470400 11                 LDP0    LINK1$
        12 000607   200004 471500                    LDP1    @FOLDER,,AUTO
        12 000610   040100 106500                    CMPC    fill='040'O
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:154  
        12 000611   000007 400031                    ADSC9   7,,PR0                   cn=2,n=25
        12 000612   100000 000031                    ADSC9   0,,PR1                   cn=0,n=25
        12 000613   000675 601000 12                 TNZ     END_DEL_SRCH

      983     8494    2           THEN                     /* No match */
      984     8495    2               GOTO END_DEL_SRCH;
      985     8496    2           IF LINK1$ -> VM$RADDRESS.ACCT ~= ACCT.ACCT#

   8496 12 000614   200003 473500                    LDP3    @ACCT,,AUTO
        12 000615   040100 106500                    CMPC    fill='040'O
        12 000616   000021 600010                    ADSC9   17,,PR0                  cn=3,n=8
        12 000617   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
        12 000620   000675 601000 12                 TNZ     END_DEL_SRCH

      986     8497    2           THEN
      987     8498    2               GOTO END_DEL_SRCH;
      988     8499    2           IF LINK1$ -> VM$RADDRESS.SITENAME ~= ' '

   8499 12 000621   040000 106500                    CMPC    fill='040'O
        12 000622   000017 600010                    ADSC9   15,,PR0                  cn=3,n=8
        12 000623   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000624   000632 600000 12                 TZE     s:8506

      989     8500    3           THEN DO;

      990     8501    3               IF SITE ~= LINK1$ -> VM$RADDRESS.SITENAME

   8501 12 000625   040100 106500                    CMPC    fill='040'O
        12 000626   200011 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
        12 000627   000017 600010                    ADSC9   15,,PR0                  cn=3,n=8
        12 000630   000675 601000 12                 TNZ     END_DEL_SRCH

      991     8502    3               THEN
      992     8503    3                   GOTO END_DEL_SRCH;
      993     8504    3           END;

   8504 12 000631   000636 710000 12                 TRA     s:8510
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:155  

      994     8505    3           ELSE DO;

      995     8506    3               IF SITE ~= VM_SITENAME

   8506 12 000632   040000 106500                    CMPC    fill='040'O
        12 000633   200011 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
        12 000634   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        12 000635   000675 601000 12                 TNZ     END_DEL_SRCH

      996     8507    3               THEN
      997     8508    3                   GOTO END_DEL_SRCH;
      998     8509    3           END;

      999     8510    2           IF LINK2$ ~= ADDR(NIL)

   8510 12 000636   000013 236000 11                 LDQ     LINK2$
        12 000637   000000 116000 13                 CMPQ    0
        12 000640   000645 600000 12                 TZE     s:8515

     1000     8511    2           THEN
     1001     8512    2               LINK2$ -> VM$RADDRESS.NEXT$ =

   8512 12 000641   000000 236100                    LDQ     0,,PR0
        12 000642   000013 474400 11                 LDP4    LINK2$
        12 000643   400000 756100                    STQ     0,,PR4
        12 000644   000650 710000 12                 TRA     s:8516

     1002     8513    2                 LINK1$ -> VM$RADDRESS.NEXT$;
     1003     8514    2           ELSE
     1004     8515    2               VM_ADD_HEAD.HEAD$ = LINK1$ -> VM$RADDRESS.NEXT$;

   8515 12 000645   000000 236100                    LDQ     0,,PR0
        12 000646   000000 474400 xsym               LDP4    VM_ADDLIST$
        12 000647   400003 756100                    STQ     3,,PR4

     1005     8516    2           IF LINK1$ -> VM$RADDRESS.NEXT$ ~= ADDR(NIL)
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:156  

   8516 12 000650   000000 236100                    LDQ     0,,PR0
        12 000651   000000 116000 13                 CMPQ    0
        12 000652   000656 600000 12                 TZE     s:8520

     1006     8517    2           THEN
     1007     8518    2               LINK1$ -> VM$RADDRESS.NEXT$ ->

   8518 12 000653   000000 474500                    LDP4    0,,PR0
        12 000654   000013 236000 11                 LDQ     LINK2$
        12 000655   400001 756100                    STQ     1,,PR4

     1008     8519    2                 VM$RADDRESS.PREV$ = LINK2$;
     1009     8520    2           X$MCB.ADDRESS$ = LINK1$;

   8520 12 000656   000012 236000 11                 LDQ     LINK1$
        12 000657   000000 756000 11                 STQ     X$MCB

     1010     8521    2           CALL X$DEALLOCATE (X$MCB);

   8521 12 000660   000002 630400 13                 EPPR0   2
        12 000661   000001 631400 13                 EPPR1   1
        12 000662   000000 701000 xent               TSX1    X$DEALLOCATE
        12 000663   000000 011000                    NOP     0

     1011     8522    2           VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES - 1;

   8522 12 000664   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000665   000001 235100                    LDA     1,,PR0
        12 000666   000001 135007                    SBLA    1,DL
        12 000667   000001 755100                    STA     1,,PR0

     1012     8523    2           VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;

   8523 12 000670   000003 236000 11                 LDQ     X$MCB+3
        12 000671   000005 756100                    STQ     5,,PR0

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:157  
     1013     8524    2           VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;

   8524 12 000672   000001 236000 11                 LDQ     X$MCB+1
        12 000673   000004 756100                    STQ     4,,PR0

     1014     8525    2           RETURN;

   8525 12 000674   000000 702200 xent               TSX2  ! X66_ARET

   8524 12 000675                       END_DEL_SRCH null
     1015     8526    2   END_DEL_SRCH: ;
     1016     8527    2           LINK2$ = LINK1$;

   8527 12 000675   000012 236000 11                 LDQ     LINK1$
        12 000676   000013 756000 11                 STQ     LINK2$

     1017     8528    2           LINK1$ = LINK1$ -> VM$RADDRESS.NEXT$;

   8528 12 000677   000000 236100                    LDQ     0,,PR0
        12 000700   000012 756000 11                 STQ     LINK1$

     1018     8529    2       END;                            /* Do while ... end */

   8529 12 000701   000000 116000 13                 CMPQ    0
        12 000702   000606 601000 12                 TNZ     s:8493

     1019     8530        /*
     1020     8531             ***** If we fell out,
     1021     8532                   then the entry must not be defined ...
     1022     8533        */
     1023     8534    1       ALTRETURN;

   8534 12 000703   000000 702200 xent               TSX2  ! X66_AALT

X$MCB
 Sect OctLoc
  11     000   ****** ******   ****** ******   ****** ******   ****** ******    ................
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:158  

(unnamed)
 Sect OctLoc
  13     000   000000 006014   000001 000000   000000 006000   000000 006000    ................
  13     004   040040 040040
     1024     8535    1   END VMA$ADD_RENTRY;
     1025     8536        %EOD;

PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:159  
--  Include file information  --

   XUM_MACRO_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ADD_RENTRY.
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:160  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$ADD_RENTRY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    12-0-0/w PTR         r     1 LINK1$                    13-0-0/w PTR         r     1 LINK2$
    11-0-0/w PTR         r     1 PTR$                       0-0-0/w STRC(324)   r     1 X$MCB

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ACCT                      7-0-0/w PTR         r     1 @ERR#
     4-0-0/w PTR         r     1 @FOLDER                   10-0-0/w PTR         r     1 @NAME_KEY
     5-0-0/w PTR         r     1 @PASSWORD                  6-0-0/w PTR         r     1 @SITENAME
    *0-0-0/c STRC(72)    r     1 ACCT                      *0-0-0/b BIT         r     1 ERR#
    *0-0-0/c CHAR(25)    r     1 FOLDER                    *0-0-0/c CHAR(20)    r     1 NAME_KEY
    *0-0-0/c STRC(72)    r     1 PASSWORD                  11-0-0/c CHAR(8)     r     1 SITE
    *0-0-0/c CHAR(8)     r     1 SITENAME

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR         r     1 VM_ADDLIST$
     0-0-0/d VECT        r     1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:161  
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)     r     1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/w STRC(711)   r     1 VM$RADDRESS
     0-0-0/w STRC(252)   r     1 VM_ADD_HEAD                0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$ADD_RENTRY requires 452 words for executable code.
   Procedure VMA$ADD_RENTRY requires 14 words of local(AUTO) storage.
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:162  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:163  
          MINI XREF LISTING

ACCT
      8130**DCL        31--PROC     8316--ENTRY    8466--ENTRY
ACCT.ACCT#
      8130**DCL      8274>>ASSIGN   8333>>IF       8378>>ASSIGN   8403>>IF       8418>>IF       8496>>IF
END_DEL_SRCH
      8524**LABEL    8495--GOTO     8498--GOTO     8503--GOTO     8508--GOTO
ERR#
      8147**DCL        31--PROC     8284--IF       8286>>ASSIGN   8316--ENTRY    8388--IF       8390>>ASSIGN
      8466--ENTRY
ERRMSG_FID.L#
      7936**DCL      7936--IMP-SIZ
E_ADD
      8301**LABEL    8255--CALLALT  8257--CALLALT  8365--CALLALT  8367--CALLALT
FOLDER
      8132**DCL        31--PROC     8275>>ASSIGN   8316--ENTRY    8333>>IF       8379>>ASSIGN   8466--ENTRY
      8493>>IF
LINK1$
      8225**DCL      8331<<ASSIGN   8332>>DOWHILE  8333>>IF       8333>>IF       8333>>IF       8333>>IF
      8333>>IF       8341>>IF       8346>>IF       8350<<ASSIGN   8350>>ASSIGN   8415<<ASSIGN   8417>>DOWHILE
      8418>>IF       8418>>IF       8422>>ASSIGN   8423<<ASSIGN   8423>>ASSIGN   8425>>IF       8434>>ASSIGN
      8435>>ASSIGN   8436>>ASSIGN   8491<<ASSIGN   8492>>DOWHILE  8493>>IF       8496>>IF       8499>>IF
      8501>>IF       8512>>ASSIGN   8515>>ASSIGN   8516>>IF       8518>>ASSIGN   8520>>ASSIGN   8527>>ASSIGN
      8528<<ASSIGN   8528>>ASSIGN
LINK2$
      8226**DCL      8416<<ASSIGN   8422<<ASSIGN   8428>>ASSIGN   8429>>ASSIGN   8437>>IF       8439>>ASSIGN
      8490<<ASSIGN   8510>>IF       8512>>ASSIGN   8518>>ASSIGN   8527<<ASSIGN
NAME_KEY
      8148**DCL        31--PROC     8279--IF       8281>>ASSIGN   8316--ENTRY    8339--IF       8346>>IF
      8383--IF       8385>>ASSIGN   8466--ENTRY
PASSWORD
      8144**DCL        31--PROC     8316--ENTRY    8466--ENTRY
PASSWORD.PASS#
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:164  
      8144**DCL      8276>>ASSIGN   8333>>IF       8380>>ASSIGN
PTR$
      8224**DCL      8259<<ASSIGN   8271>>ASSIGN   8272>>ASSIGN   8273>>ASSIGN   8274>>ASSIGN   8275>>ASSIGN
      8276>>ASSIGN   8277>>ASSIGN   8278>>ASSIGN   8281>>ASSIGN   8283>>ASSIGN   8286>>ASSIGN   8287>>ASSIGN
      8295>>IF       8369<<ASSIGN   8375>>ASSIGN   8376>>ASSIGN   8377>>ASSIGN   8378>>ASSIGN   8379>>ASSIGN
      8380>>ASSIGN   8381>>ASSIGN   8382>>ASSIGN   8385>>ASSIGN   8387>>ASSIGN   8390>>ASSIGN   8397>>ASSIGN
      8407>>ASSIGN   8408>>ASSIGN   8409>>ASSIGN   8428>>ASSIGN   8429>>ASSIGN   8434>>ASSIGN   8435>>ASSIGN
      8436>>ASSIGN   8439>>ASSIGN   8449>>IF
SITE
      8223**DCL      8268<<ASSIGN   8270<<ASSIGN   8277>>ASSIGN   8475<<ASSIGN   8477<<ASSIGN   8501>>IF
      8506>>IF
SITENAME
      8146**DCL        31--PROC     8266>>IF       8270>>ASSIGN   8316--ENTRY    8333>>IF       8381>>ASSIGN
      8466--ENTRY    8473>>IF       8477>>ASSIGN
UPDATE_RENTRY
      8445**LABEL    8398--GOTO     8410--GOTO     8430--GOTO
VM$RADDRESS
      8193**DCL      8246--ASSIGN   8251--ASSIGN   8356--ASSIGN   8361--ASSIGN   8482--ASSIGN
VM$RADDRESS.ACCT
      8216**DCL      8274<<ASSIGN   8333>>IF       8378<<ASSIGN   8403>>IF       8418>>IF       8496>>IF
VM$RADDRESS.FLAGS
      8198**DCL      8278<<ASSIGN   8382<<ASSIGN
VM$RADDRESS.FLAGS.UNDEF#
      8199**DCL      8286<<ASSIGN   8295>>IF       8390<<ASSIGN   8449>>IF
VM$RADDRESS.FOLDER
      8208**DCL      8209--REDEF    8275<<ASSIGN   8333>>IF       8379<<ASSIGN   8493>>IF
VM$RADDRESS.NAME_KEY
      8206**DCL      8281<<ASSIGN   8283<<ASSIGN   8341>>IF       8346>>IF       8385<<ASSIGN   8387<<ASSIGN
VM$RADDRESS.NEXT$
      8194**DCL      8271<<ASSIGN   8350>>ASSIGN   8375<<ASSIGN   8407<<ASSIGN   8423>>ASSIGN   8429<<ASSIGN
      8435<<ASSIGN   8439<<ASSIGN   8512<<ASSIGN   8512>>ASSIGN   8515>>ASSIGN   8516>>IF       8518>>ASSIGN
      8528>>ASSIGN
VM$RADDRESS.PASS
      8213**DCL      8276<<ASSIGN   8333>>IF       8380<<ASSIGN
VM$RADDRESS.PREV$
      8196**DCL      8272<<ASSIGN   8376<<ASSIGN   8408<<ASSIGN   8428<<ASSIGN   8434<<ASSIGN   8434>>ASSIGN
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:165  
      8436<<ASSIGN   8518<<ASSIGN
VM$RADDRESS.SITENAME
      8215**DCL      8277<<ASSIGN   8333>>IF       8381<<ASSIGN   8499>>IF       8501>>IF
VM$RADDRESS.TYPE
      8205**DCL      8273<<ASSIGN   8333>>IF       8377<<ASSIGN   8403>>IF       8418>>IF
VMA$ENLARGE_SEGMENT
      8228**DCL-ENT  8255--CALL     8365--CALL
VM_ADDLIST$
      7790**DCL      8164--IMP-PTR  8235>>IF       8238>>ASSIGN   8239>>ASSIGN   8240>>ASSIGN   8240>>ASSIGN
      8248>>ASSIGN   8249>>ASSIGN   8260>>ASSIGN   8261>>ASSIGN   8271>>ASSIGN   8287>>ASSIGN   8291>>ASSIGN
      8292>>ASSIGN   8293>>ASSIGN   8293>>ASSIGN   8294>>ASSIGN   8294>>ASSIGN   8294>>ASSIGN   8297>>ASSIGN
      8321>>IF       8324>>ASSIGN   8325>>ASSIGN   8326>>ASSIGN   8326>>ASSIGN   8331>>ASSIGN   8358>>ASSIGN
      8359>>ASSIGN   8370>>ASSIGN   8371>>ASSIGN   8394>>IF       8397>>ASSIGN   8403>>IF       8403>>IF
      8407>>ASSIGN   8408>>ASSIGN   8409>>ASSIGN   8415>>ASSIGN   8445>>ASSIGN   8446>>ASSIGN   8447>>ASSIGN
      8447>>ASSIGN   8448>>ASSIGN   8448>>ASSIGN   8448>>ASSIGN   8451>>ASSIGN   8470>>IF       8484>>ASSIGN
      8485>>ASSIGN   8491>>ASSIGN   8515>>ASSIGN   8522>>ASSIGN   8522>>ASSIGN   8523>>ASSIGN   8524>>ASSIGN
VM_ADDLIST_
      7814**DCL      8247>>ASSIGN   8250>>ASSIGN   8255<>CALL     8357>>ASSIGN   8360>>ASSIGN   8365<>CALL
      8483>>ASSIGN   8486>>ASSIGN
VM_ADD_HEAD.ADDRESS_SIZE
      8165**DCL      8294<<ASSIGN   8448<<ASSIGN
VM_ADD_HEAD.FLAGS.ERR#
      8170**DCL      8297<<ASSIGN   8451<<ASSIGN
VM_ADD_HEAD.FREE$
      8176**DCL      8239<<ASSIGN   8249>>ASSIGN   8261<<ASSIGN   8292<<ASSIGN   8325<<ASSIGN   8359>>ASSIGN
      8371<<ASSIGN   8446<<ASSIGN   8485>>ASSIGN   8524<<ASSIGN
VM_ADD_HEAD.HEAD$
      8174**DCL      8238<<ASSIGN   8271>>ASSIGN   8287<<ASSIGN   8324<<ASSIGN   8331>>ASSIGN   8394>>IF
      8397<<ASSIGN   8403>>IF       8403>>IF       8407>>ASSIGN   8408>>ASSIGN   8409<<ASSIGN   8415>>ASSIGN
      8491>>ASSIGN   8515<<ASSIGN
VM_ADD_HEAD.NEXT$
      8178**DCL      8240<<ASSIGN   8248>>ASSIGN   8260<<ASSIGN   8291<<ASSIGN   8294>>ASSIGN   8326<<ASSIGN
      8358>>ASSIGN   8370<<ASSIGN   8445<<ASSIGN   8448>>ASSIGN   8484>>ASSIGN   8523<<ASSIGN
VM_ADD_HEAD.NUM_ENTRIES
      8167**DCL      8235>>IF       8293<<ASSIGN   8293>>ASSIGN   8321>>IF       8447<<ASSIGN   8447>>ASSIGN
      8470>>IF       8522<<ASSIGN   8522>>ASSIGN
PL6.E3A0      #003=VMA$ADD_RENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:02 Page:166  
VM_ADD_HEAD.WORK_AREA
      8180**DCL      8240--ASSIGN   8326--ASSIGN
VM_SITENAME
      8059**DCL      8268>>ASSIGN   8475>>ASSIGN   8506>>IF
X$ALLOCATE
      8229**DCL-ENT  8252--CALL     8257--CALL     8362--CALL     8367--CALL
X$DEALLOCATE
      8230**DCL-ENT  8521--CALL
X$MCB
      8219**DCL      8252<>CALL     8257<>CALL     8362<>CALL     8367<>CALL     8521<>CALL
X$MCB.ADDRESS$
      8219**DCL      8259>>ASSIGN   8369>>ASSIGN   8520<<ASSIGN
X$MCB.FREE_HEAD$
      8219**DCL      8249<<ASSIGN   8261>>ASSIGN   8292>>ASSIGN   8359<<ASSIGN   8371>>ASSIGN   8446>>ASSIGN
      8485<<ASSIGN   8524>>ASSIGN
X$MCB.HI_SEGMENT$
      8219**DCL      8248<<ASSIGN   8260>>ASSIGN   8291>>ASSIGN   8358<<ASSIGN   8370>>ASSIGN   8445>>ASSIGN
      8484<<ASSIGN   8523>>ASSIGN
X$MCB.MIN_SIZE
      8220**DCL      8246<<ASSIGN   8356<<ASSIGN   8482<<ASSIGN
X$MCB.SEGMENT_BASE$
      8219**DCL      8247<<ASSIGN   8357<<ASSIGN   8483<<ASSIGN
X$MCB.SIZE
      8219**DCL      8251<<ASSIGN   8361<<ASSIGN
X$MCB.TYPE
      8219**DCL      8245<<ASSIGN   8355<<ASSIGN   8481<<ASSIGN
X$MCB.WKSZ
      8219**DCL      8250<<ASSIGN   8256<<ASSIGN   8256>>ASSIGN   8360<<ASSIGN   8366<<ASSIGN   8366>>ASSIGN
      8486<<ASSIGN
X$STRING.SIZ
      7782**DCL      7783--IMP-SIZ

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:167  
     1026        1        /*T***********************************************************/
     1027        2        /*T*                                                         */
     1028        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1029        4        /*T*                                                         */
     1030        5        /*T***********************************************************/
     1031        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1032        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1033        8        /*F*
     1034        9             NAME: VMA$ADD_UENTRY
     1035       10             PURPOSE:
     1036       11                   To add an UNRESOLVED address entry to the VM_ADD_HEAD structure.
     1037       12             DESCRIPTION:
     1038       13                   This routine has five parameters:
     1039       14
     1040       15                      NAME       - name of user for this address.
     1041       16                      FOLDER     - folder name of this address.
     1042       17                      PASSWORD   - password for this address.
     1043       18                      SITENAME   - sitename where this address resides.
     1044       19                      ERR#       - this address entry is an error.
     1045       20
     1046       21                   This routine will take these items, at least one is required,
     1047       22                   and create a new entry in the address structure described
     1048       23                   by VM_ADD_HEAD and VM_UADDRESS.
     1049       24
     1050       25                   This routine will not resue blocks on the FREED BLOCKS CHAIN.
     1051       26                   This routine was built to run at the maximum speed possible
     1052       27                   and therefore should only be used when space is not at
     1053       28                   a premium and a specific order is not necessary.
     1054       29                   VM_ADD_HEAD must be the last object in the data segment.
     1055       30                   Everything after it will be stomped on.
     1056       31        */
     1057       32        VMA$ADD_UENTRY: PROC (NAME,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;
     1058       33        /***** Include files *****/
     1059       34          %INCLUDE CP_6;
     1060     5593          %INCLUDE CP_6_SUBS;
     1061     6133          %INCLUDE VM_MACRO_C;
     1062     7401          %INCLUDE VM_SUBS_C;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:168  
     1063     7661          %INCLUDE VM_DATA_R;
     1064     8092          %INCLUDE XUM_MACRO_C;
     1065     8119            %include B$TABLES_C;
     1066     8227          %B$XL_UPPER(NAME=lower_UPPER);
     1067     8231        /***** Parameters *****/
     1068     8232          %TEXTC (NAME=NAME,STCLASS=" ");
     1069     8237    1   DCL FOLDER CHAR(%SIZ_FOLDER);
     1070     8238          %VLP_PASS (FPTN=PASSWORD,STCLASS=" ");
     1071     8251    1   DCL SITENAME CHAR(%SIZ_SITENAME);
     1072     8252    1   DCL ERR# BIT(1);
     1073     8253    1   DCL NAME_KEY CHAR(20);
     1074     8254    1   DCL TEMPBUF CHAR(%SIZ_LISTNAME) AUTO;   /* Same size as VM_LISTKEY.TEXT */
     1075     8255        /***** Mail structures *****/
     1076     8256          %VM_ADDTYPES;
     1077     8260          %VM_ADD_HEAD;
     1078     8289          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS=BASED);
     1079     8326          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
     1080     8361        /***** Local variables *****/
     1081     8362    1   DCL SITE CHAR(%SIZ_SITENAME);
     1082     8363    1   DCL PTR$ PTR STATIC;
     1083     8364    1   DCL LINK1$ PTR STATIC;
     1084     8365    1   DCL LINK2$ PTR STATIC;
     1085     8366    1   DCL CHARN CHAR(NAME.SIZ) BASED;
     1086     8367          %TEXTC (NAME=TEXTC,STCLASS=BASED);
     1087     8372          %XUM$MCB (NAME=X$MCB,STCLASS=STATIC);
     1088     8376        /***** External routines *****/
     1089     8377    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
     1090     8378    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
     1091     8379    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
     1092     8380        %EJECT;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:169  
     1093     8381        /*
     1094     8382             ***** Is this the first entry???
     1095     8383        */
     1096     8384    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0
     1097     8385    1       THEN
     1098     8386    2       DO;
     1099     8387    2           VM_ADD_HEAD.HEAD$ = ADDR(NIL);
     1100     8388    2           VM_ADD_HEAD.FREE$ = ADDR(NIL);
     1101     8389    2           VM_ADD_HEAD.NEXT$ = ADDR(VM_ADD_HEAD.WORK_AREA);
     1102     8390    2       END;
     1103     8391        /*
     1104     8392             ***** Allocate space for this entry ...
     1105     8393        */
     1106     8394    1       X$MCB.TYPE = 0;
     1107     8395    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);
     1108     8396    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);
     1109     8397    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;
     1110     8398    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;
     1111     8399    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;
     1112     8400    1       X$MCB.SIZE = SIZEC(VM$UADDRESS) - SIZEC(VM$UADDRESS.USER_NAME.TEXT)
     1113     8401    1         + NAME.SIZ;
     1114     8402    1       CALL X$ALLOCATE (X$MCB)
     1115     8403    1       WHENALTRETURN
     1116     8404    2       DO;
     1117     8405    2           CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_) ALTRET(E_ADD);
     1118     8406    2           X$MCB.WKSZ = X$MCB.WKSZ + 1024;
     1119     8407    2           CALL X$ALLOCATE (X$MCB) ALTRET(E_ADD);
     1120     8408    2       END;
     1121     8409    1       PTR$ = X$MCB.ADDRESS$;
     1122     8410    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;
     1123     8411    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;
     1124     8412        /*
     1125     8413             ***** Add new entry ...
     1126     8414        */
     1127     8415    1       IF SITENAME = ' '
     1128     8416    1       THEN                            /* Supply local sitename */
     1129     8417    1           SITE = VM_SITENAME;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:170  
     1130     8418    1       ELSE
     1131     8419    1           SITE = SITENAME;
     1132     8420    1       PTR$ -> VM$UADDRESS.NEXT$ = VM_ADD_HEAD.HEAD$;
     1133     8421    1       PTR$ -> VM$UADDRESS.PREV$ = ADDR(NIL);
     1134     8422    1       PTR$ -> VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED;
     1135     8423    1       PTR$ -> VM$UADDRESS.USER_NAME.COUNT = NAME.SIZ;
     1136     8424    1       ADDR(PTR$ -> VM$UADDRESS.USER_NAME.TEXT) -> CHARN =NAME.TEXT;
     1137     8425    1       PTR$ -> VM$UADDRESS.FOLDER = FOLDER;
     1138     8426    1       PTR$ -> VM$UADDRESS.PASS = PASSWORD.PASS#;
     1139     8427    1       PTR$ -> VM$UADDRESS.SITENAME = SITE;
     1140     8428    1       PTR$ -> VM$UADDRESS.FLAGS = %NO#;
     1141     8429    1       IF ADDR(NAME_KEY) ~= ADDR(NIL)
     1142     8430    1       THEN                            /* Use supplied value */
     1143     8431    1           PTR$ -> VM$UADDRESS.NAME_KEY = NAME_KEY;
     1144     8432    1       ELSE                            /* Use blanks */
     1145     8433    1           PTR$ -> VM$UADDRESS.NAME_KEY = ' ';
     1146     8434    1       IF ADDR(ERR#) ~= ADDR(NIL)
     1147     8435    1       THEN
     1148     8436    1           PTR$ -> VM$UADDRESS.FLAGS.UNDEF# = ERR#;
     1149     8437    1       VM_ADD_HEAD.HEAD$ = PTR$;
     1150     8438        /*
     1151     8439             ***** Update NEXT$, NUM_ENTRIES and ADDRESS_SIZE ...
     1152     8440        */
     1153     8441    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;
     1154     8442    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;
     1155     8443    1       VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES + 1;
     1156     8444    1       VM_ADD_HEAD.ADDRESS_SIZE = POFFW(VM_ADD_HEAD.NEXT$,VM_ADDLIST$);
     1157     8445    1       IF PTR$ -> VM$UADDRESS.FLAGS.UNDEF#
     1158     8446    1       THEN
     1159     8447    1           VM_ADD_HEAD.FLAGS.ERR# = %YES#;
     1160     8448    1       RETURN;
     1161     8449        /**/
     1162     8450    1   E_ADD:
     1163     8451    1       ALTRETURN;
     1164     8452        %EJECT;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:171  
     1165     8453        /*F*
     1166     8454             NAME: VMA$ADD_UENTRY_SORTED
     1167     8455             PURPOSE:
     1168     8456                   To add an UNRESOLVED address entry in sorted order.
     1169     8457             DESCRIPTION:
     1170     8458                   This routine does about the same thing as VMA$ADD_UENTRY
     1171     8459                   except the entries are inserted into the address list
     1172     8460                   sorted by USER NAME. RESOLVED addresses (i.e. ACCT etc)
     1173     8461                   be sorted behind these entries.
     1174     8462
     1175     8463                   This routine will reuse blocks on the FREED BLOCKS CHAIN
     1176     8464                   pointed to by VM_ADD_HEAD.FREE$ whenever possible.
     1177     8465        */
     1178     8466        %EJECT;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:172  
     1179     8467    1   VMA$ADD_UENTRY_SORTED: ENTRY (NAME,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;
     1180     8468        /*
     1181     8469             ***** Is this the first entry???
     1182     8470        */
     1183     8471    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0
     1184     8472    1       THEN
     1185     8473    2       DO;
     1186     8474    2           VM_ADD_HEAD.HEAD$ = ADDR(NIL);
     1187     8475    2           VM_ADD_HEAD.FREE$ = ADDR(NIL);
     1188     8476    2           VM_ADD_HEAD.NEXT$ = ADDR(VM_ADD_HEAD.WORK_AREA);
     1189     8477    2       END;
     1190     8478        /*
     1191     8479             ***** Check for duplicate entry
     1192     8480        */
     1193     8481    1       LINK1$ = VM_ADD_HEAD.HEAD$;
     1194     8482    2       DO WHILE LINK1$ ~= ADDR(NIL);
     1195     8483    2           IF LINK1$ -> VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED
     1196     8484    2             AND ADDR(LINK1$ -> VM$UADDRESS.USER_NAME) -> TEXTC.TEXT = NAME.TEXT
     1197     8485    2             AND LINK1$ -> VM$UADDRESS.FOLDER = FOLDER
     1198     8486    2             AND LINK1$ -> VM$UADDRESS.SITENAME = SITENAME
     1199     8487    2             AND LINK1$ -> VM$UADDRESS.PASS = PASSWORD.PASS#
     1200     8488    2           THEN
     1201     8489    2               IF ADDR(NAME_KEY) = ADDR(NIL)
     1202     8490    3               THEN DO;
     1203     8491    3                   IF LINK1$ -> VM$UADDRESS.NAME_KEY = ' '
     1204     8492    3                   THEN
     1205     8493    3                       RETURN;
     1206     8494    3               END;
     1207     8495    3               ELSE DO;
     1208     8496    3                   IF LINK1$ -> VM$UADDRESS.NAME_KEY = NAME_KEY
     1209     8497    3                   THEN
     1210     8498    3                       RETURN;
     1211     8499    3               END;
     1212     8500    2           LINK1$ = LINK1$ -> VM$UADDRESS.NEXT$;
     1213     8501    2       END;
     1214     8502        /*
     1215     8503             ***** Allocate space for this entry ...
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:173  
     1216     8504        */
     1217     8505    1       X$MCB.TYPE = 0;
     1218     8506    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);
     1219     8507    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);
     1220     8508    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;
     1221     8509    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;
     1222     8510    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;
     1223     8511    1       X$MCB.SIZE = SIZEC(VM$UADDRESS) - SIZEC(VM$UADDRESS.USER_NAME.TEXT)
     1224     8512    1         + NAME.SIZ;
     1225     8513    1       CALL X$ALLOCATE (X$MCB)
     1226     8514    1       WHENALTRETURN
     1227     8515    2       DO;
     1228     8516    2           CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_) ALTRET(E_ADD);
     1229     8517    2           X$MCB.WKSZ = X$MCB.WKSZ + 1024;
     1230     8518    2           CALL X$ALLOCATE (X$MCB) ALTRET(E_ADD);
     1231     8519    2       END;
     1232     8520    1       PTR$ = X$MCB.ADDRESS$;
     1233     8521        /*
     1234     8522             ***** Add new entry ...
     1235     8523        */
     1236     8524    1       PTR$ -> VM$UADDRESS.NEXT$ = ADDR(NIL);
     1237     8525    1       PTR$ -> VM$UADDRESS.PREV$ = ADDR(NIL);
     1238     8526    1       PTR$ -> VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED;
     1239     8527    1       PTR$ -> VM$UADDRESS.USER_NAME.COUNT = NAME.SIZ;
     1240     8528    1       ADDR(PTR$ -> VM$UADDRESS.USER_NAME.TEXT) -> CHARN = NAME.TEXT;
     1241     8529    1       PTR$ -> VM$UADDRESS.FOLDER = FOLDER;
     1242     8530    1       PTR$ -> VM$UADDRESS.PASS = PASSWORD.PASS#;
     1243     8531    1       PTR$ -> VM$UADDRESS.SITENAME = SITENAME;
     1244     8532    1       PTR$ -> VM$UADDRESS.FLAGS = %NO#;
     1245     8533    1       IF ADDR(NAME_KEY) ~= ADDR(NIL)
     1246     8534    1       THEN                            /* Use supplied value */
     1247     8535    1           PTR$ -> VM$UADDRESS.NAME_KEY = NAME_KEY;
     1248     8536    1       ELSE                            /* Use blanks */
     1249     8537    1           PTR$ -> VM$UADDRESS.NAME_KEY = ' ';
     1250     8538    1       IF ADDR(ERR#) ~= ADDR(NIL)
     1251     8539    1       THEN
     1252     8540    1           PTR$ -> VM$UADDRESS.FLAGS.UNDEF# = ERR#;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:174  
     1253     8541        /*
     1254     8542             ***** First entry?
     1255     8543        */
     1256     8544    1       IF VM_ADD_HEAD.HEAD$ = ADDR(NIL)
     1257     8545    1       THEN
     1258     8546    2       DO;
     1259     8547    2           VM_ADD_HEAD.HEAD$ = PTR$;
     1260     8548    2           GOTO UPDATE_UENTRY;
     1261     8549    2       END;
     1262     8550        /*
     1263     8551             ***** New first entry?
     1264     8552        */
     1265     8553    1       IF VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.TYPE = %VM_ADD_RESOLVED
     1266     8554    1         OR NAME.SIZ = 0
     1267     8555    1         OR (VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED
     1268     8556    1         AND VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.USER_NAME.COUNT > 0
     1269     8557    1         AND VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.USER_NAME.TEXT > NAME.TEXT)
     1270     8558    1       THEN
     1271     8559    2       DO;
     1272     8560    2           PTR$ -> VM$UADDRESS.NEXT$ = VM_ADD_HEAD.HEAD$;
     1273     8561    2           VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.PREV$ = PTR$;
     1274     8562    2           VM_ADD_HEAD.HEAD$ = PTR$;
     1275     8563    2           GOTO UPDATE_UENTRY;
     1276     8564    2       END;
     1277     8565        /*
     1278     8566             ***** Insert at end of list ...
     1279     8567        */
     1280     8568    1       LINK1$ = VM_ADD_HEAD.HEAD$;
     1281     8569    1       LINK2$ = ADDR(NIL);               /* Points to previous entry */
     1282     8570    2       DO WHILE (LINK1$ ~= ADDR(NIL));
     1283     8571    2           IF LINK1$ -> VM$UADDRESS.TYPE = %VM_ADD_RESOLVED
     1284     8572    2           THEN                       /* Insert before this entry */
     1285     8573    2               EXIT;
     1286     8574    2           IF LINK1$ -> VM$UADDRESS.USER_NAME.COUNT > 0
     1287     8575    2             AND LINK1$ -> VM$UADDRESS.USER_NAME.TEXT > NAME.TEXT
     1288     8576    2           THEN                       /* Insert now */
     1289     8577    2               EXIT;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:175  
     1290     8578    2           LINK2$ = LINK1$;
     1291     8579    2           LINK1$ = LINK1$ -> VM$UADDRESS.NEXT$;
     1292     8580    2       END;                            /* Do while ... end */
     1293     8581    1       IF LINK1$ = ADDR(NIL)
     1294     8582    1       THEN                            /* Insert at end */
     1295     8583    2       DO;
     1296     8584    2           PTR$ -> VM$UADDRESS.PREV$ = LINK2$;
     1297     8585    2           LINK2$ -> VM$UADDRESS.NEXT$ = PTR$;
     1298     8586    2           GOTO UPDATE_UENTRY;
     1299     8587    2       END;
     1300     8588    1       ELSE                            /* Insert in middle */
     1301     8589    2       DO;
     1302     8590    2           PTR$ -> VM$UADDRESS.PREV$ = LINK1$ -> VM$UADDRESS.PREV$;
     1303     8591    2           PTR$ -> VM$UADDRESS.NEXT$ = LINK1$;
     1304     8592    2           LINK1$ -> VM$UADDRESS.PREV$ = PTR$;
     1305     8593    2           IF LINK2$ ~= ADDR(NIL)
     1306     8594    2           THEN                  /* Previous node exists */
     1307     8595    2               LINK2$ -> VM$UADDRESS.NEXT$ = PTR$;
     1308     8596    2       END;
     1309     8597        /*
     1310     8598             ***** Update NEXT$, NUM_ENTRIES and ADDRESS_SIZE ...
     1311     8599        */
     1312     8600    1   UPDATE_UENTRY:
     1313     8601    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;
     1314     8602    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;
     1315     8603    1       VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES + 1;
     1316     8604    1       VM_ADD_HEAD.ADDRESS_SIZE = POFFW(VM_ADD_HEAD.NEXT$,VM_ADDLIST$);
     1317     8605    1       IF PTR$ -> VM$UADDRESS.FLAGS.UNDEF#
     1318     8606    1       THEN
     1319     8607    1           VM_ADD_HEAD.FLAGS.ERR# = %YES#;
     1320     8608    1       RETURN;
     1321     8609        %EJECT;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:176  
     1322     8610        /*F*
     1323     8611             NAME: VMA$DEL_UENTRY
     1324     8612             PURPOSE:
     1325     8613                   To delete a UNRESOLVED address entry from the address list.
     1326     8614             DESCRIPTION:
     1327     8615                   This routine will search the address list described
     1328     8616                   by VM_ADD_HEAD to find an entry where the NAME,
     1329     8617                   FOLDER and SITENAME match the passed parameters.
     1330     8618                   All other parameters will be ignored.
     1331     8619
     1332     8620                   NOTE: An ALTRETURN means that the entry was not found.
     1333     8621        */
     1334     8622    1   VMA$DEL_UENTRY: ENTRY (NAME,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;
     1335     8623        /*
     1336     8624             ***** No entries?
     1337     8625        */
     1338     8626    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0
     1339     8627    1       THEN
     1340     8628    1           ALTRETURN;
     1341     8629    1       IF SITENAME = ' '
     1342     8630    1       THEN                            /* Assume local site */
     1343     8631    1           SITE = VM_SITENAME;
     1344     8632    1       ELSE
     1345     8633    1           SITE = SITENAME;
     1346     8634        /*
     1347     8635             ***** Initialize ...
     1348     8636        */
     1349     8637    1       X$MCB.TYPE = 0;
     1350     8638    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);
     1351     8639    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);
     1352     8640    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;
     1353     8641    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;
     1354     8642    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;
     1355     8643        /*
     1356     8644             ***** Search ...
     1357     8645        */
     1358     8646    1       LINK2$ = ADDR(NIL);
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:177  
     1359     8647    1       LINK1$ = VM_ADD_HEAD.HEAD$;
     1360     8648    2       DO WHILE (LINK1$ ~= ADDR(NIL));
     1361     8649    2           CALL XLATE(TEMPBUF,LOWER_UPPER,SUBSTR(LINK1$->VM$UADDRESS.
     1362     8650    2             USER_NAME.TEXT,0,LINK1$->VM$UADDRESS.USER_NAME.COUNT));
     1363     8651    2           IF SUBSTR(TEMPBUF,0,LINK1$->VM$UADDRESS.USER_NAME.COUNT) ~=
     1364     8652    2             SUBSTR(NAME.TEXT,0,NAME.SIZ)
     1365     8653    2           THEN
     1366     8654    2               GOTO END_DEL_SRCH;
     1367     8655    2           IF LINK1$ -> VM$UADDRESS.FOLDER ~= FOLDER
     1368     8656    2           THEN
     1369     8657    2               GOTO END_DEL_SRCH;
     1370     8658    2           IF LINK1$ -> VM$UADDRESS.SITENAME ~= ' '
     1371     8659    3           THEN DO;
     1372     8660    3               IF SITE ~= LINK1$ -> VM$UADDRESS.SITENAME
     1373     8661    3               THEN
     1374     8662    3                   GOTO END_DEL_SRCH;
     1375     8663    3           END;
     1376     8664    3           ELSE DO;
     1377     8665    3               IF SITE ~= VM_SITENAME
     1378     8666    3               THEN
     1379     8667    3                   GOTO END_DEL_SRCH;
     1380     8668    3           END;
     1381     8669        /*
     1382     8670             ***** Username, folder and sitename match.
     1383     8671                   Delete this entry ...
     1384     8672        */
     1385     8673    2           IF LINK2$ ~= ADDR(NIL)
     1386     8674    2           THEN
     1387     8675    2               LINK2$ -> VM$UADDRESS.NEXT$ =
     1388     8676    2                 LINK1$ -> VM$UADDRESS.NEXT$;
     1389     8677    2           ELSE
     1390     8678    2               VM_ADD_HEAD.HEAD$ = LINK1$ -> VM$UADDRESS.NEXT$;
     1391     8679    2           IF LINK1$ -> VM$UADDRESS.NEXT$ ~= ADDR(NIL)
     1392     8680    2           THEN
     1393     8681    2               LINK1$ -> VM$UADDRESS.NEXT$ ->
     1394     8682    2                 VM$UADDRESS.PREV$ = LINK2$;
     1395     8683    2           X$MCB.ADDRESS$ = LINK1$;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:178  
     1396     8684    2           CALL X$DEALLOCATE (X$MCB);
     1397     8685    2           VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES - 1;
     1398     8686    2           VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;
     1399     8687    2           VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;
     1400     8688    2           RETURN;
     1401     8689    2   END_DEL_SRCH:
     1402     8690    2           LINK2$ = LINK1$;
     1403     8691    2           LINK1$ = LINK1$ -> VM$UADDRESS.NEXT$;
     1404     8692    2       END;                            /* Do while ... end */
     1405     8693        /*
     1406     8694             ***** If we fell out,
     1407     8695                   then the entry must not be defined ...
     1408     8696        */
     1409     8697    1       ALTRETURN;
     1410     8698    1   END VMA$ADD_UENTRY;
     1411     8699        %EOD;

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:179  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   XUM_MACRO_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ADD_UENTRY.

   Procedure VMA$ADD_UENTRY requires 530 words for executable code.
   Procedure VMA$ADD_UENTRY requires 64 words of local(AUTO) storage.

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:180  

 Object Unit name= VMA$ADD_UENTRY                             File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:03:05.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    12     14  VMA$ADD_UENTRY
   12   Proc  even  none   530   1022  VMA$ADD_UENTRY
   13  RoData even  none     5      5  VMA$ADD_UENTRY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        6  VMA$ADD_UENTRY
    12    216          yes     yes      Std        6  VMA$ADD_UENTRY_SORTED
    12    636          yes     yes      Std        6  VMA$DEL_UENTRY
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:181  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       1 X$ALLOCATE
 yes     yes           Std       1 X$DEALLOCATE
 yes     yes           Std       2 VMA$ENLARGE_SEGMENT
                       nStd      0 X66_AUTO_N
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA                 r    B$XL_UPPER$
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:182  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:183  


     1026        1        /*T***********************************************************/
     1027        2        /*T*                                                         */
     1028        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1029        4        /*T*                                                         */
     1030        5        /*T***********************************************************/
     1031        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1032        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1033        8        /*F*
     1034        9             NAME: VMA$ADD_UENTRY
     1035       10             PURPOSE:
     1036       11                   To add an UNRESOLVED address entry to the VM_ADD_HEAD structure.
     1037       12             DESCRIPTION:
     1038       13                   This routine has five parameters:
     1039       14
     1040       15                      NAME       - name of user for this address.
     1041       16                      FOLDER     - folder name of this address.
     1042       17                      PASSWORD   - password for this address.
     1043       18                      SITENAME   - sitename where this address resides.
     1044       19                      ERR#       - this address entry is an error.
     1045       20
     1046       21                   This routine will take these items, at least one is required,
     1047       22                   and create a new entry in the address structure described
     1048       23                   by VM_ADD_HEAD and VM_UADDRESS.
     1049       24
     1050       25                   This routine will not resue blocks on the FREED BLOCKS CHAIN.
     1051       26                   This routine was built to run at the maximum speed possible
     1052       27                   and therefore should only be used when space is not at
     1053       28                   a premium and a specific order is not necessary.
     1054       29                   VM_ADD_HEAD must be the last object in the data segment.
     1055       30                   Everything after it will be stomped on.
     1056       31        */
     1057       32        VMA$ADD_UENTRY: PROC (NAME,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;

     32 12 000000   000000 700200 xent  VMA$ADD_UEN* TSX0  ! X66_AUTO_N
        12 000001   000100 000006                    ZERO    64,6

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:184  
     1058       33        /***** Include files *****/
     1059       34          %INCLUDE CP_6;
     1060     5593          %INCLUDE CP_6_SUBS;
     1061     6133          %INCLUDE VM_MACRO_C;
     1062     7401          %INCLUDE VM_SUBS_C;
     1063     7661          %INCLUDE VM_DATA_R;
     1064     8092          %INCLUDE XUM_MACRO_C;
     1065     8119            %include B$TABLES_C;
     1066     8227          %B$XL_UPPER(NAME=lower_UPPER);
     1067     8231        /***** Parameters *****/
     1068     8232          %TEXTC (NAME=NAME,STCLASS=" ");
     1069     8237    1   DCL FOLDER CHAR(%SIZ_FOLDER);
     1070     8238          %VLP_PASS (FPTN=PASSWORD,STCLASS=" ");
     1071     8251    1   DCL SITENAME CHAR(%SIZ_SITENAME);
     1072     8252    1   DCL ERR# BIT(1);
     1073     8253    1   DCL NAME_KEY CHAR(20);
     1074     8254    1   DCL TEMPBUF CHAR(%SIZ_LISTNAME) AUTO;   /* Same size as VM_LISTKEY.TEXT */
     1075     8255        /***** Mail structures *****/
     1076     8256          %VM_ADDTYPES;
     1077     8260          %VM_ADD_HEAD;
     1078     8289          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS=BASED);
     1079     8326          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
     1080     8361        /***** Local variables *****/
     1081     8362    1   DCL SITE CHAR(%SIZ_SITENAME);
     1082     8363    1   DCL PTR$ PTR STATIC;
     1083     8364    1   DCL LINK1$ PTR STATIC;
     1084     8365    1   DCL LINK2$ PTR STATIC;
     1085     8366    1   DCL CHARN CHAR(NAME.SIZ) BASED;
     1086     8367          %TEXTC (NAME=TEXTC,STCLASS=BASED);
     1087     8372          %XUM$MCB (NAME=X$MCB,STCLASS=STATIC);
     1088     8376        /***** External routines *****/
     1089     8377    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
     1090     8378    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
     1091     8379    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
     1092     8380        %EJECT;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:185  
     1093     8381        /*
     1094     8382             ***** Is this the first entry???
     1095     8383        */
     1096     8384    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0

   8384 12 000002   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000003   000001 235100                    LDA     1,,PR0
        12 000004   000013 601000 12                 TNZ     s:8394

     1097     8385    1       THEN
     1098     8386    2       DO;

     1099     8387    2           VM_ADD_HEAD.HEAD$ = ADDR(NIL);

   8387 12 000005   000000 236000 13                 LDQ     0
        12 000006   000003 756100                    STQ     3,,PR0

     1100     8388    2           VM_ADD_HEAD.FREE$ = ADDR(NIL);

   8388 12 000007   000004 756100                    STQ     4,,PR0

     1101     8389    2           VM_ADD_HEAD.NEXT$ = ADDR(VM_ADD_HEAD.WORK_AREA);

   8389 12 000010   000000 236000 xsym               LDQ     VM_ADDLIST$
        12 000011   000006 036003                    ADLQ    6,DU
        12 000012   000005 756100                    STQ     5,,PR0

     1102     8390    2       END;

     1103     8391        /*
     1104     8392             ***** Allocate space for this entry ...
     1105     8393        */
     1106     8394    1       X$MCB.TYPE = 0;

   8394 12 000013   000010 450000 11                 STZ     X$MCB+5

     1107     8395    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:186  

   8395 12 000014   000120 235007                    LDA     80,DL
        12 000015   000012 755000 11                 STA     X$MCB+7

     1108     8396    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);

   8396 12 000016   000001 236000 xsym               LDQ     VM_ADDLIST_+1
        12 000017   000005 756000 11                 STQ     X$MCB+2

     1109     8397    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;

   8397 12 000020   000005 236100                    LDQ     5,,PR0
        12 000021   000006 756000 11                 STQ     X$MCB+3

     1110     8398    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;

   8398 12 000022   000004 236100                    LDQ     4,,PR0
        12 000023   000004 756000 11                 STQ     X$MCB+1

     1111     8399    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;

   8399 12 000024   000000 236000 xsym               LDQ     VM_ADDLIST_
        12 000025   000020 772000                    QRL     16
        12 000026   000001 036007                    ADLQ    1,DL
        12 000027   000002 772000                    QRL     2
        12 000030   000007 756000 11                 STQ     X$MCB+4

     1112     8400    1       X$MCB.SIZE = SIZEC(VM$UADDRESS) - SIZEC(VM$UADDRESS.USER_NAME.TEXT)

   8400 12 000031   200003 471500                    LDP1    @NAME,,AUTO
        12 000032   000100 101500                    MRL     fill='000'O
        12 000033   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 000034   200076 000004                    ADSC9   SITE+3,,AUTO             cn=0,n=4
        12 000035   200076 236100                    LDQ     SITE+3,,AUTO
        12 000036   000110 036007                    ADLQ    72,DL
        12 000037   000011 756000 11                 STQ     X$MCB+6

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:187  
     1113     8401    1         + NAME.SIZ;
     1114     8402    1       CALL X$ALLOCATE (X$MCB)

   8402 12 000040   000002 630400 13                 EPPR0   2
        12 000041   000001 631400 13                 EPPR1   1
        12 000042   000000 701000 xent               TSX1    X$ALLOCATE
        12 000043   000045 702000 12                 TSX2    s:8405
        12 000044   000060 710000 12                 TRA     s:8409

     1115     8403    1       WHENALTRETURN
     1116     8404    2       DO;

     1117     8405    2           CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_) ALTRET(E_ADD);

   8405 12 000045   000003 630400 13                 EPPR0   3
        12 000046   000001 631400 13                 EPPR1   1
        12 000047   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        12 000050   000215 702000 12                 TSX2    E_ADD

     1118     8406    2           X$MCB.WKSZ = X$MCB.WKSZ + 1024;

   8406 12 000051   000007 235000 11                 LDA     X$MCB+4
        12 000052   002000 035007                    ADLA    1024,DL
        12 000053   000007 755000 11                 STA     X$MCB+4

     1119     8407    2           CALL X$ALLOCATE (X$MCB) ALTRET(E_ADD);

   8407 12 000054   000002 630400 13                 EPPR0   2
        12 000055   000001 631400 13                 EPPR1   1
        12 000056   000000 701000 xent               TSX1    X$ALLOCATE
        12 000057   000215 702000 12                 TSX2    E_ADD

     1120     8408    2       END;

     1121     8409    1       PTR$ = X$MCB.ADDRESS$;

   8409 12 000060   000003 236000 11                 LDQ     X$MCB
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:188  
        12 000061   000000 756000 11                 STQ     PTR$

     1122     8410    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;

   8410 12 000062   000006 236000 11                 LDQ     X$MCB+3
        12 000063   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000064   000005 756100                    STQ     5,,PR0

     1123     8411    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;

   8411 12 000065   000004 236000 11                 LDQ     X$MCB+1
        12 000066   000004 756100                    STQ     4,,PR0

     1124     8412        /*
     1125     8413             ***** Add new entry ...
     1126     8414        */
     1127     8415    1       IF SITENAME = ' '

   8415 12 000067   200006 471500                    LDP1    @SITENAME,,AUTO
        12 000070   040000 106500                    CMPC    fill='040'O
        12 000071   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
        12 000072   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000073   000100 601000 12                 TNZ     s:8419

     1128     8416    1       THEN                            /* Supply local sitename */
     1129     8417    1           SITE = VM_SITENAME;

   8417 12 000074   040100 100400                    MLR     fill='040'O
        12 000075   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        12 000076   200073 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
        12 000077   000103 710000 12                 TRA     s:8420

     1130     8418    1       ELSE
     1131     8419    1           SITE = SITENAME;

   8419 12 000100   040100 100500                    MLR     fill='040'O
        12 000101   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:189  
        12 000102   200073 000010                    ADSC9   SITE,,AUTO               cn=0,n=8

     1132     8420    1       PTR$ -> VM$UADDRESS.NEXT$ = VM_ADD_HEAD.HEAD$;

   8420 12 000103   000003 236100                    LDQ     3,,PR0
        12 000104   000000 473400 11                 LDP3    PTR$
        12 000105   300000 756100                    STQ     0,,PR3

     1133     8421    1       PTR$ -> VM$UADDRESS.PREV$ = ADDR(NIL);

   8421 12 000106   000000 236000 13                 LDQ     0
        12 000107   300001 756100                    STQ     1,,PR3

     1134     8422    1       PTR$ -> VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED;

   8422 12 000110   000002 236003                    LDQ     2,DU
        12 000111   300002 552120                    STBQ    2,'20'O,PR3

     1135     8423    1       PTR$ -> VM$UADDRESS.USER_NAME.COUNT = NAME.SIZ;

   8423 12 000112   200003 474500                    LDP4    @NAME,,AUTO
        12 000113   000100 100500                    MLR     fill='000'O
        12 000114   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        12 000115   300021 600001                    ADSC9   17,,PR3                  cn=3,n=1

     1136     8424    1       ADDR(PTR$ -> VM$UADDRESS.USER_NAME.TEXT) -> CHARN =NAME.TEXT;

   8424 12 000116   000100 101500                    MRL     fill='000'O
        12 000117   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        12 000120   200076 000002                    ADSC9   SITE+3,,AUTO             cn=0,n=2
        12 000121   200076 220100                    LDX0    SITE+3,,AUTO
        12 000122   000100 101500                    MRL     fill='000'O
        12 000123   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        12 000124   200077 000002                    ADSC9   SITE+4,,AUTO             cn=0,n=2
        12 000125   200077 221100                    LDX1    SITE+4,,AUTO
        12 000126   040140 100540                    MLR     fill='040'O
        12 000127   400000 200011                    ADSC9   0,,PR4                   cn=1,n=*X1
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:190  
        12 000130   300022 000010                    ADSC9   18,,PR3                  cn=0,n=*X0

     1137     8425    1       PTR$ -> VM$UADDRESS.FOLDER = FOLDER;

   8425 12 000131   200004 475500                    LDP5    @FOLDER,,AUTO
        12 000132   040100 100500                    MLR     fill='040'O
        12 000133   500000 000031                    ADSC9   0,,PR5                   cn=0,n=25
        12 000134   300007 400031                    ADSC9   7,,PR3                   cn=2,n=25

     1138     8426    1       PTR$ -> VM$UADDRESS.PASS = PASSWORD.PASS#;

   8426 12 000135   200005 476500                    LDP6    @PASSWORD,,AUTO
        12 000136   040100 100500                    MLR     fill='040'O
        12 000137   600000 000010                    ADSC9   0,,PR6                   cn=0,n=8
        12 000140   300015 600010                    ADSC9   13,,PR3                  cn=3,n=8

     1139     8427    1       PTR$ -> VM$UADDRESS.SITENAME = SITE;

   8427 12 000141   040100 100500                    MLR     fill='040'O
        12 000142   200073 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
        12 000143   300017 600010                    ADSC9   15,,PR3                  cn=3,n=8

     1140     8428    1       PTR$ -> VM$UADDRESS.FLAGS = %NO#;

   8428 12 000144   000000 236003                    LDQ     0,DU
        12 000145   300002 552140                    STBQ    2,'40'O,PR3

     1141     8429    1       IF ADDR(NAME_KEY) ~= ADDR(NIL)

   8429 12 000146   200010 236100                    LDQ     @NAME_KEY,,AUTO
        12 000147   000000 116000 13                 CMPQ    0
        12 000150   000156 600000 12                 TZE     s:8433

     1142     8430    1       THEN                            /* Use supplied value */
     1143     8431    1           PTR$ -> VM$UADDRESS.NAME_KEY = NAME_KEY;

   8431 12 000151   200010 477500                    LDP7    @NAME_KEY,,AUTO
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:191  
        12 000152   040100 100500                    MLR     fill='040'O
        12 000153   700000 000024                    ADSC9   0,,PR7                   cn=0,n=20
        12 000154   300002 400024                    ADSC9   2,,PR3                   cn=2,n=20
        12 000155   000161 710000 12                 TRA     s:8434

     1144     8432    1       ELSE                            /* Use blanks */
     1145     8433    1           PTR$ -> VM$UADDRESS.NAME_KEY = ' ';

   8433 12 000156   040100 100400                    MLR     fill='040'O
        12 000157   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000160   300002 400024                    ADSC9   2,,PR3                   cn=2,n=20

     1146     8434    1       IF ADDR(ERR#) ~= ADDR(NIL)

   8434 12 000161   200007 236100                    LDQ     @ERR#,,AUTO
        12 000162   000000 116000 13                 CMPQ    0
        12 000163   000170 600000 12                 TZE     s:8437

     1147     8435    1       THEN
     1148     8436    1           PTR$ -> VM$UADDRESS.FLAGS.UNDEF# = ERR#;

   8436 12 000164   200007 477500                    LDP7    @ERR#,,AUTO
        12 000165   003100 060500                    CSL     bolr='003'O
        12 000166   700000 000001                    BDSC    0,,PR7                   by=0,bit=0,n=1
        12 000167   300002 000001                    BDSC    2,,PR3                   by=0,bit=0,n=1

     1149     8437    1       VM_ADD_HEAD.HEAD$ = PTR$;

   8437 12 000170   000000 236000 11                 LDQ     PTR$
        12 000171   000003 756100                    STQ     3,,PR0

     1150     8438        /*
     1151     8439             ***** Update NEXT$, NUM_ENTRIES and ADDRESS_SIZE ...
     1152     8440        */
     1153     8441    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;

   8441 12 000172   000006 236000 11                 LDQ     X$MCB+3
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:192  
        12 000173   000005 756100                    STQ     5,,PR0

     1154     8442    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;

   8442 12 000174   000004 236000 11                 LDQ     X$MCB+1
        12 000175   000004 756100                    STQ     4,,PR0

     1155     8443    1       VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES + 1;

   8443 12 000176   000001 235100                    LDA     1,,PR0
        12 000177   000001 035007                    ADLA    1,DL
        12 000200   000001 755100                    STA     1,,PR0

     1156     8444    1       VM_ADD_HEAD.ADDRESS_SIZE = POFFW(VM_ADD_HEAD.NEXT$,VM_ADDLIST$);

   8444 12 000201   000000 235000 xsym               LDA     VM_ADDLIST$
        12 000202   000022 771000                    ARL     18
        12 000203   200076 755100                    STA     SITE+3,,AUTO
        12 000204   000005 236100                    LDQ     5,,PR0
        12 000205   000022 772000                    QRL     18
        12 000206   200076 136100                    SBLQ    SITE+3,,AUTO
        12 000207   000000 756100                    STQ     0,,PR0

     1157     8445    1       IF PTR$ -> VM$UADDRESS.FLAGS.UNDEF#

   8445 12 000210   300002 234100                    SZN     2,,PR3
        12 000211   000214 605000 12                 TPL     s:8448

     1158     8446    1       THEN
     1159     8447    1           VM_ADD_HEAD.FLAGS.ERR# = %YES#;

   8447 12 000212   400000 236003                    LDQ     -131072,DU
        12 000213   000002 256100                    ORSQ    2,,PR0

     1160     8448    1       RETURN;

   8448 12 000214   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:193  

     1161     8449        /**/
     1162     8450    1   E_ADD:
     1163     8451    1       ALTRETURN;

   8451 12 000215   000000 702200 xent  E_ADD        TSX2  ! X66_AALT

     1164     8452        %EJECT;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:194  
     1165     8453        /*F*
     1166     8454             NAME: VMA$ADD_UENTRY_SORTED
     1167     8455             PURPOSE:
     1168     8456                   To add an UNRESOLVED address entry in sorted order.
     1169     8457             DESCRIPTION:
     1170     8458                   This routine does about the same thing as VMA$ADD_UENTRY
     1171     8459                   except the entries are inserted into the address list
     1172     8460                   sorted by USER NAME. RESOLVED addresses (i.e. ACCT etc)
     1173     8461                   be sorted behind these entries.
     1174     8462
     1175     8463                   This routine will reuse blocks on the FREED BLOCKS CHAIN
     1176     8464                   pointed to by VM_ADD_HEAD.FREE$ whenever possible.
     1177     8465        */
     1178     8466        %EJECT;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:195  
     1179     8467    1   VMA$ADD_UENTRY_SORTED: ENTRY (NAME,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;

   8467 12 000216   000000 700200 xent  VMA$ADD_UEN* TSX0  ! X66_AUTO_N
        12 000217   000100 000006                    ZERO    64,6

     1180     8468        /*
     1181     8469             ***** Is this the first entry???
     1182     8470        */
     1183     8471    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0

   8471 12 000220   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000221   000001 235100                    LDA     1,,PR0
        12 000222   000231 601000 12                 TNZ     s:8481

     1184     8472    1       THEN
     1185     8473    2       DO;

     1186     8474    2           VM_ADD_HEAD.HEAD$ = ADDR(NIL);

   8474 12 000223   000000 236000 13                 LDQ     0
        12 000224   000003 756100                    STQ     3,,PR0

     1187     8475    2           VM_ADD_HEAD.FREE$ = ADDR(NIL);

   8475 12 000225   000004 756100                    STQ     4,,PR0

     1188     8476    2           VM_ADD_HEAD.NEXT$ = ADDR(VM_ADD_HEAD.WORK_AREA);

   8476 12 000226   000000 236000 xsym               LDQ     VM_ADDLIST$
        12 000227   000006 036003                    ADLQ    6,DU
        12 000230   000005 756100                    STQ     5,,PR0

     1189     8477    2       END;

     1190     8478        /*
     1191     8479             ***** Check for duplicate entry
     1192     8480        */
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:196  
     1193     8481    1       LINK1$ = VM_ADD_HEAD.HEAD$;

   8481 12 000231   000003 236100                    LDQ     3,,PR0
        12 000232   000001 756000 11                 STQ     LINK1$

     1194     8482    2       DO WHILE LINK1$ ~= ADDR(NIL);

   8482 12 000233   000313 710000 12                 TRA     s:8501

     1195     8483    2           IF LINK1$ -> VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED

   8483 12 000234   000001 470400 11                 LDP0    LINK1$
        12 000235   000002 236100                    LDQ     2,,PR0
        12 000236   000777 376003                    ANQ     511,DU
        12 000237   000002 116003                    CMPQ    2,DU
        12 000240   000311 601000 12                 TNZ     s:8500
        12 000241   000021 720100                    LXL0    17,,PR0
        12 000242   000777 360003                    ANX0    511,DU
        12 000243   200003 471500                    LDP1    @NAME,,AUTO
        12 000244   000100 101500                    MRL     fill='000'O
        12 000245   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 000246   200076 000002                    ADSC9   SITE+3,,AUTO             cn=0,n=2
        12 000247   200076 221100                    LDX1    SITE+3,,AUTO
        12 000250   040140 106540                    CMPC    fill='040'O
        12 000251   000022 000010                    ADSC9   18,,PR0                  cn=0,n=*X0
        12 000252   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
        12 000253   000311 601000 12                 TNZ     s:8500
        12 000254   200004 473500                    LDP3    @FOLDER,,AUTO
        12 000255   040100 106500                    CMPC    fill='040'O
        12 000256   000007 400031                    ADSC9   7,,PR0                   cn=2,n=25
        12 000257   300000 000031                    ADSC9   0,,PR3                   cn=0,n=25
        12 000260   000311 601000 12                 TNZ     s:8500
        12 000261   200006 474500                    LDP4    @SITENAME,,AUTO
        12 000262   040100 106500                    CMPC    fill='040'O
        12 000263   000017 600010                    ADSC9   15,,PR0                  cn=3,n=8
        12 000264   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
        12 000265   000311 601000 12                 TNZ     s:8500
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:197  
        12 000266   200005 475500                    LDP5    @PASSWORD,,AUTO
        12 000267   040100 106500                    CMPC    fill='040'O
        12 000270   000015 600010                    ADSC9   13,,PR0                  cn=3,n=8
        12 000271   500000 000010                    ADSC9   0,,PR5                   cn=0,n=8
        12 000272   000311 601000 12                 TNZ     s:8500

     1196     8484    2             AND ADDR(LINK1$ -> VM$UADDRESS.USER_NAME) -> TEXTC.TEXT = NAME.TEXT
     1197     8485    2             AND LINK1$ -> VM$UADDRESS.FOLDER = FOLDER
     1198     8486    2             AND LINK1$ -> VM$UADDRESS.SITENAME = SITENAME
     1199     8487    2             AND LINK1$ -> VM$UADDRESS.PASS = PASSWORD.PASS#
     1200     8488    2           THEN
     1201     8489    2               IF ADDR(NAME_KEY) = ADDR(NIL)

   8489 12 000273   200010 236100                    LDQ     @NAME_KEY,,AUTO
        12 000274   000000 116000 13                 CMPQ    0
        12 000275   000303 601000 12                 TNZ     s:8496

     1202     8490    3               THEN DO;

     1203     8491    3                   IF LINK1$ -> VM$UADDRESS.NAME_KEY = ' '

   8491 12 000276   040000 106500                    CMPC    fill='040'O
        12 000277   000002 400024                    ADSC9   2,,PR0                   cn=2,n=20
        12 000300   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000301   000311 601000 12                 TNZ     s:8500

     1204     8492    3                   THEN
     1205     8493    3                       RETURN;

   8493 12 000302   000000 702200 xent               TSX2  ! X66_ARET

     1206     8494    3               END;
     1207     8495    3               ELSE DO;

     1208     8496    3                   IF LINK1$ -> VM$UADDRESS.NAME_KEY = NAME_KEY

   8496 12 000303   200010 476500                    LDP6    @NAME_KEY,,AUTO
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:198  
        12 000304   040100 106500                    CMPC    fill='040'O
        12 000305   000002 400024                    ADSC9   2,,PR0                   cn=2,n=20
        12 000306   600000 000024                    ADSC9   0,,PR6                   cn=0,n=20
        12 000307   000311 601000 12                 TNZ     s:8500

     1209     8497    3                   THEN
     1210     8498    3                       RETURN;

   8498 12 000310   000000 702200 xent               TSX2  ! X66_ARET

     1211     8499    3               END;
     1212     8500    2           LINK1$ = LINK1$ -> VM$UADDRESS.NEXT$;

   8500 12 000311   000000 236100                    LDQ     0,,PR0
        12 000312   000001 756000 11                 STQ     LINK1$

     1213     8501    2       END;

   8501 12 000313   000000 116000 13                 CMPQ    0
        12 000314   000234 601000 12                 TNZ     s:8483

     1214     8502        /*
     1215     8503             ***** Allocate space for this entry ...
     1216     8504        */
     1217     8505    1       X$MCB.TYPE = 0;

   8505 12 000315   000010 450000 11                 STZ     X$MCB+5

     1218     8506    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);

   8506 12 000316   000120 235007                    LDA     80,DL
        12 000317   000012 755000 11                 STA     X$MCB+7

     1219     8507    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);

   8507 12 000320   000001 236000 xsym               LDQ     VM_ADDLIST_+1
        12 000321   000005 756000 11                 STQ     X$MCB+2
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:199  

     1220     8508    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;

   8508 12 000322   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000323   000005 236100                    LDQ     5,,PR0
        12 000324   000006 756000 11                 STQ     X$MCB+3

     1221     8509    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;

   8509 12 000325   000004 236100                    LDQ     4,,PR0
        12 000326   000004 756000 11                 STQ     X$MCB+1

     1222     8510    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;

   8510 12 000327   000000 236000 xsym               LDQ     VM_ADDLIST_
        12 000330   000020 772000                    QRL     16
        12 000331   000001 036007                    ADLQ    1,DL
        12 000332   000002 772000                    QRL     2
        12 000333   000007 756000 11                 STQ     X$MCB+4

     1223     8511    1       X$MCB.SIZE = SIZEC(VM$UADDRESS) - SIZEC(VM$UADDRESS.USER_NAME.TEXT)

   8511 12 000334   200003 471500                    LDP1    @NAME,,AUTO
        12 000335   000100 101500                    MRL     fill='000'O
        12 000336   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 000337   200076 000004                    ADSC9   SITE+3,,AUTO             cn=0,n=4
        12 000340   200076 236100                    LDQ     SITE+3,,AUTO
        12 000341   000110 036007                    ADLQ    72,DL
        12 000342   000011 756000 11                 STQ     X$MCB+6

     1224     8512    1         + NAME.SIZ;
     1225     8513    1       CALL X$ALLOCATE (X$MCB)

   8513 12 000343   000002 630400 13                 EPPR0   2
        12 000344   000001 631400 13                 EPPR1   1
        12 000345   000000 701000 xent               TSX1    X$ALLOCATE
        12 000346   000350 702000 12                 TSX2    s:8516
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:200  
        12 000347   000363 710000 12                 TRA     s:8520

     1226     8514    1       WHENALTRETURN
     1227     8515    2       DO;

     1228     8516    2           CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_) ALTRET(E_ADD);

   8516 12 000350   000003 630400 13                 EPPR0   3
        12 000351   000001 631400 13                 EPPR1   1
        12 000352   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        12 000353   000215 702000 12                 TSX2    E_ADD

     1229     8517    2           X$MCB.WKSZ = X$MCB.WKSZ + 1024;

   8517 12 000354   000007 235000 11                 LDA     X$MCB+4
        12 000355   002000 035007                    ADLA    1024,DL
        12 000356   000007 755000 11                 STA     X$MCB+4

     1230     8518    2           CALL X$ALLOCATE (X$MCB) ALTRET(E_ADD);

   8518 12 000357   000002 630400 13                 EPPR0   2
        12 000360   000001 631400 13                 EPPR1   1
        12 000361   000000 701000 xent               TSX1    X$ALLOCATE
        12 000362   000215 702000 12                 TSX2    E_ADD

     1231     8519    2       END;

     1232     8520    1       PTR$ = X$MCB.ADDRESS$;

   8520 12 000363   000003 236000 11                 LDQ     X$MCB
        12 000364   000000 756000 11                 STQ     PTR$

     1233     8521        /*
     1234     8522             ***** Add new entry ...
     1235     8523        */
     1236     8524    1       PTR$ -> VM$UADDRESS.NEXT$ = ADDR(NIL);

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:201  
   8524 12 000365   000000 236000 13                 LDQ     0
        12 000366   000000 470400 11                 LDP0    PTR$
        12 000367   000000 756100                    STQ     0,,PR0

     1237     8525    1       PTR$ -> VM$UADDRESS.PREV$ = ADDR(NIL);

   8525 12 000370   000000 236000 13                 LDQ     0
        12 000371   000001 756100                    STQ     1,,PR0

     1238     8526    1       PTR$ -> VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED;

   8526 12 000372   000002 236003                    LDQ     2,DU
        12 000373   000002 552120                    STBQ    2,'20'O,PR0

     1239     8527    1       PTR$ -> VM$UADDRESS.USER_NAME.COUNT = NAME.SIZ;

   8527 12 000374   200003 471500                    LDP1    @NAME,,AUTO
        12 000375   000100 100500                    MLR     fill='000'O
        12 000376   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 000377   000021 600001                    ADSC9   17,,PR0                  cn=3,n=1

     1240     8528    1       ADDR(PTR$ -> VM$UADDRESS.USER_NAME.TEXT) -> CHARN = NAME.TEXT;

   8528 12 000400   000100 101500                    MRL     fill='000'O
        12 000401   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 000402   200076 000002                    ADSC9   SITE+3,,AUTO             cn=0,n=2
        12 000403   200076 220100                    LDX0    SITE+3,,AUTO
        12 000404   000100 101500                    MRL     fill='000'O
        12 000405   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 000406   200077 000002                    ADSC9   SITE+4,,AUTO             cn=0,n=2
        12 000407   200077 221100                    LDX1    SITE+4,,AUTO
        12 000410   040140 100540                    MLR     fill='040'O
        12 000411   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
        12 000412   000022 000010                    ADSC9   18,,PR0                  cn=0,n=*X0

     1241     8529    1       PTR$ -> VM$UADDRESS.FOLDER = FOLDER;

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:202  
   8529 12 000413   200004 473500                    LDP3    @FOLDER,,AUTO
        12 000414   040100 100500                    MLR     fill='040'O
        12 000415   300000 000031                    ADSC9   0,,PR3                   cn=0,n=25
        12 000416   000007 400031                    ADSC9   7,,PR0                   cn=2,n=25

     1242     8530    1       PTR$ -> VM$UADDRESS.PASS = PASSWORD.PASS#;

   8530 12 000417   200005 474500                    LDP4    @PASSWORD,,AUTO
        12 000420   040100 100500                    MLR     fill='040'O
        12 000421   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
        12 000422   000015 600010                    ADSC9   13,,PR0                  cn=3,n=8

     1243     8531    1       PTR$ -> VM$UADDRESS.SITENAME = SITENAME;

   8531 12 000423   200006 475500                    LDP5    @SITENAME,,AUTO
        12 000424   040100 100500                    MLR     fill='040'O
        12 000425   500000 000010                    ADSC9   0,,PR5                   cn=0,n=8
        12 000426   000017 600010                    ADSC9   15,,PR0                  cn=3,n=8

     1244     8532    1       PTR$ -> VM$UADDRESS.FLAGS = %NO#;

   8532 12 000427   000000 236003                    LDQ     0,DU
        12 000430   000002 552140                    STBQ    2,'40'O,PR0

     1245     8533    1       IF ADDR(NAME_KEY) ~= ADDR(NIL)

   8533 12 000431   200010 236100                    LDQ     @NAME_KEY,,AUTO
        12 000432   000000 116000 13                 CMPQ    0
        12 000433   000441 600000 12                 TZE     s:8537

     1246     8534    1       THEN                            /* Use supplied value */
     1247     8535    1           PTR$ -> VM$UADDRESS.NAME_KEY = NAME_KEY;

   8535 12 000434   200010 476500                    LDP6    @NAME_KEY,,AUTO
        12 000435   040100 100500                    MLR     fill='040'O
        12 000436   600000 000024                    ADSC9   0,,PR6                   cn=0,n=20
        12 000437   000002 400024                    ADSC9   2,,PR0                   cn=2,n=20
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:203  
        12 000440   000444 710000 12                 TRA     s:8538

     1248     8536    1       ELSE                            /* Use blanks */
     1249     8537    1           PTR$ -> VM$UADDRESS.NAME_KEY = ' ';

   8537 12 000441   040100 100400                    MLR     fill='040'O
        12 000442   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000443   000002 400024                    ADSC9   2,,PR0                   cn=2,n=20

     1250     8538    1       IF ADDR(ERR#) ~= ADDR(NIL)

   8538 12 000444   200007 236100                    LDQ     @ERR#,,AUTO
        12 000445   000000 116000 13                 CMPQ    0
        12 000446   000453 600000 12                 TZE     s:8544

     1251     8539    1       THEN
     1252     8540    1           PTR$ -> VM$UADDRESS.FLAGS.UNDEF# = ERR#;

   8540 12 000447   200007 476500                    LDP6    @ERR#,,AUTO
        12 000450   003100 060500                    CSL     bolr='003'O
        12 000451   600000 000001                    BDSC    0,,PR6                   by=0,bit=0,n=1
        12 000452   000002 000001                    BDSC    2,,PR0                   by=0,bit=0,n=1

     1253     8541        /*
     1254     8542             ***** First entry?
     1255     8543        */
     1256     8544    1       IF VM_ADD_HEAD.HEAD$ = ADDR(NIL)

   8544 12 000453   000000 476400 xsym               LDP6    VM_ADDLIST$
        12 000454   600003 236100                    LDQ     3,,PR6
        12 000455   000000 116000 13                 CMPQ    0
        12 000456   000462 601000 12                 TNZ     s:8553

     1257     8545    1       THEN
     1258     8546    2       DO;

     1259     8547    2           VM_ADD_HEAD.HEAD$ = PTR$;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:204  

   8547 12 000457   000000 236000 11                 LDQ     PTR$
        12 000460   600003 756100                    STQ     3,,PR6

     1260     8548    2           GOTO UPDATE_UENTRY;

   8548 12 000461   000611 710000 12                 TRA     UPDATE_UENTRY

     1261     8549    2       END;
     1262     8550        /*
     1263     8551             ***** New first entry?
     1264     8552        */
     1265     8553    1       IF VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.TYPE = %VM_ADD_RESOLVED

   8553 12 000462   600003 477500                    LDP7    3,,PR6
        12 000463   700002 236100                    LDQ     2,,PR7
        12 000464   000777 376003                    ANQ     511,DU
        12 000465   000001 116003                    CMPQ    1,DU
        12 000466   000515 600000 12                 TZE     s:8560
        12 000467   000100 101500                    MRL     fill='000'O
        12 000470   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 000471   200076 000004                    ADSC9   SITE+3,,AUTO             cn=0,n=4
        12 000472   200076 236100                    LDQ     SITE+3,,AUTO
        12 000473   000000 116003                    CMPQ    0,DU
        12 000474   000515 600000 12                 TZE     s:8560
        12 000475   600003 477500                    LDP7    3,,PR6
        12 000476   700002 236100                    LDQ     2,,PR7
        12 000477   000777 376003                    ANQ     511,DU
        12 000500   000002 116003                    CMPQ    2,DU
        12 000501   000524 601000 12                 TNZ     s:8568
        12 000502   700021 236100                    LDQ     17,,PR7
        12 000503   000777 316007                    CANQ    511,DL
        12 000504   000524 600000 12                 TZE     s:8568
        12 000505   000100 101500                    MRL     fill='000'O
        12 000506   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 000507   200077 000002                    ADSC9   SITE+4,,AUTO             cn=0,n=2
        12 000510   200077 220100                    LDX0    SITE+4,,AUTO
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:205  
        12 000511   040100 106540                    CMPC    fill='040'O
        12 000512   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        12 000513   700022 000310                    ADSC9   18,,PR7                  cn=0,n=200
        12 000514   000524 603000 12                 TRC     s:8568

     1266     8554    1         OR NAME.SIZ = 0
     1267     8555    1         OR (VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED
     1268     8556    1         AND VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.USER_NAME.COUNT > 0
     1269     8557    1         AND VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.USER_NAME.TEXT > NAME.TEXT)
     1270     8558    1       THEN
     1271     8559    2       DO;

     1272     8560    2           PTR$ -> VM$UADDRESS.NEXT$ = VM_ADD_HEAD.HEAD$;

   8560 12 000515   600003 236100                    LDQ     3,,PR6
        12 000516   000000 756100                    STQ     0,,PR0

     1273     8561    2           VM_ADD_HEAD.HEAD$ -> VM$UADDRESS.PREV$ = PTR$;

   8561 12 000517   600003 477500                    LDP7    3,,PR6
        12 000520   000000 236000 11                 LDQ     PTR$
        12 000521   700001 756100                    STQ     1,,PR7

     1274     8562    2           VM_ADD_HEAD.HEAD$ = PTR$;

   8562 12 000522   600003 756100                    STQ     3,,PR6

     1275     8563    2           GOTO UPDATE_UENTRY;

   8563 12 000523   000611 710000 12                 TRA     UPDATE_UENTRY

     1276     8564    2       END;
     1277     8565        /*
     1278     8566             ***** Insert at end of list ...
     1279     8567        */
     1280     8568    1       LINK1$ = VM_ADD_HEAD.HEAD$;

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:206  
   8568 12 000524   600003 236100                    LDQ     3,,PR6
        12 000525   000001 756000 11                 STQ     LINK1$

     1281     8569    1       LINK2$ = ADDR(NIL);               /* Points to previous entry */

   8569 12 000526   000000 236000 13                 LDQ     0
        12 000527   000002 756000 11                 STQ     LINK2$

     1282     8570    2       DO WHILE (LINK1$ ~= ADDR(NIL));

   8570 12 000530   000556 710000 12                 TRA     s:8580

     1283     8571    2           IF LINK1$ -> VM$UADDRESS.TYPE = %VM_ADD_RESOLVED

   8571 12 000531   000001 470400 11                 LDP0    LINK1$
        12 000532   000002 236100                    LDQ     2,,PR0
        12 000533   000777 376003                    ANQ     511,DU
        12 000534   000001 116003                    CMPQ    1,DU
        12 000535   000561 600000 12                 TZE     s:8581

     1284     8572    2           THEN                       /* Insert before this entry */
     1285     8573    2               EXIT;
     1286     8574    2           IF LINK1$ -> VM$UADDRESS.USER_NAME.COUNT > 0

   8574 12 000536   000021 236100                    LDQ     17,,PR0
        12 000537   000777 316007                    CANQ    511,DL
        12 000540   000552 600000 12                 TZE     s:8578
        12 000541   200003 471500                    LDP1    @NAME,,AUTO
        12 000542   000100 101500                    MRL     fill='000'O
        12 000543   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        12 000544   200076 000002                    ADSC9   SITE+3,,AUTO             cn=0,n=2
        12 000545   200076 220100                    LDX0    SITE+3,,AUTO
        12 000546   040100 106540                    CMPC    fill='040'O
        12 000547   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        12 000550   000022 000310                    ADSC9   18,,PR0                  cn=0,n=200
        12 000551   000561 602000 12                 TNC     s:8581

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:207  
     1287     8575    2             AND LINK1$ -> VM$UADDRESS.USER_NAME.TEXT > NAME.TEXT
     1288     8576    2           THEN                       /* Insert now */
     1289     8577    2               EXIT;
     1290     8578    2           LINK2$ = LINK1$;

   8578 12 000552   000001 236000 11                 LDQ     LINK1$
        12 000553   000002 756000 11                 STQ     LINK2$

     1291     8579    2           LINK1$ = LINK1$ -> VM$UADDRESS.NEXT$;

   8579 12 000554   000000 236100                    LDQ     0,,PR0
        12 000555   000001 756000 11                 STQ     LINK1$

     1292     8580    2       END;                            /* Do while ... end */

   8580 12 000556   000001 236000 11                 LDQ     LINK1$
        12 000557   000000 116000 13                 CMPQ    0
        12 000560   000531 601000 12                 TNZ     s:8571

     1293     8581    1       IF LINK1$ = ADDR(NIL)

   8581 12 000561   000001 236000 11                 LDQ     LINK1$
        12 000562   000000 116000 13                 CMPQ    0
        12 000563   000573 601000 12                 TNZ     s:8590

     1294     8582    1       THEN                            /* Insert at end */
     1295     8583    2       DO;

     1296     8584    2           PTR$ -> VM$UADDRESS.PREV$ = LINK2$;

   8584 12 000564   000002 236000 11                 LDQ     LINK2$
        12 000565   000000 470400 11                 LDP0    PTR$
        12 000566   000001 756100                    STQ     1,,PR0

     1297     8585    2           LINK2$ -> VM$UADDRESS.NEXT$ = PTR$;

   8585 12 000567   000000 236000 11                 LDQ     PTR$
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:208  
        12 000570   000002 471400 11                 LDP1    LINK2$
        12 000571   100000 756100                    STQ     0,,PR1

     1298     8586    2           GOTO UPDATE_UENTRY;

   8586 12 000572   000611 710000 12                 TRA     UPDATE_UENTRY

     1299     8587    2       END;
     1300     8588    1       ELSE                            /* Insert in middle */
     1301     8589    2       DO;

     1302     8590    2           PTR$ -> VM$UADDRESS.PREV$ = LINK1$ -> VM$UADDRESS.PREV$;

   8590 12 000573   000001 470400 11                 LDP0    LINK1$
        12 000574   000001 236100                    LDQ     1,,PR0
        12 000575   000000 471400 11                 LDP1    PTR$
        12 000576   100001 756100                    STQ     1,,PR1

     1303     8591    2           PTR$ -> VM$UADDRESS.NEXT$ = LINK1$;

   8591 12 000577   000001 236000 11                 LDQ     LINK1$
        12 000600   100000 756100                    STQ     0,,PR1

     1304     8592    2           LINK1$ -> VM$UADDRESS.PREV$ = PTR$;

   8592 12 000601   000000 236000 11                 LDQ     PTR$
        12 000602   000001 756100                    STQ     1,,PR0

     1305     8593    2           IF LINK2$ ~= ADDR(NIL)

   8593 12 000603   000002 236000 11                 LDQ     LINK2$
        12 000604   000000 116000 13                 CMPQ    0
        12 000605   000611 600000 12                 TZE     UPDATE_UENTRY

     1306     8594    2           THEN                  /* Previous node exists */
     1307     8595    2               LINK2$ -> VM$UADDRESS.NEXT$ = PTR$;

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:209  
   8595 12 000606   000000 236000 11                 LDQ     PTR$
        12 000607   000002 473400 11                 LDP3    LINK2$
        12 000610   300000 756100                    STQ     0,,PR3

     1308     8596    2       END;

     1309     8597        /*
     1310     8598             ***** Update NEXT$, NUM_ENTRIES and ADDRESS_SIZE ...
     1311     8599        */
     1312     8600    1   UPDATE_UENTRY:
     1313     8601    1       VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;

   8601 12 000611   000006 236000 11    UPDATE_UENT* LDQ     X$MCB+3
        12 000612   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000613   000005 756100                    STQ     5,,PR0

     1314     8602    1       VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;

   8602 12 000614   000004 236000 11                 LDQ     X$MCB+1
        12 000615   000004 756100                    STQ     4,,PR0

     1315     8603    1       VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES + 1;

   8603 12 000616   000001 235100                    LDA     1,,PR0
        12 000617   000001 035007                    ADLA    1,DL
        12 000620   000001 755100                    STA     1,,PR0

     1316     8604    1       VM_ADD_HEAD.ADDRESS_SIZE = POFFW(VM_ADD_HEAD.NEXT$,VM_ADDLIST$);

   8604 12 000621   000000 235000 xsym               LDA     VM_ADDLIST$
        12 000622   000022 771000                    ARL     18
        12 000623   200076 755100                    STA     SITE+3,,AUTO
        12 000624   000005 236100                    LDQ     5,,PR0
        12 000625   000022 772000                    QRL     18
        12 000626   200076 136100                    SBLQ    SITE+3,,AUTO
        12 000627   000000 756100                    STQ     0,,PR0

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:210  
     1317     8605    1       IF PTR$ -> VM$UADDRESS.FLAGS.UNDEF#

   8605 12 000630   000000 471400 11                 LDP1    PTR$
        12 000631   100002 234100                    SZN     2,,PR1
        12 000632   000635 605000 12                 TPL     s:8608

     1318     8606    1       THEN
     1319     8607    1           VM_ADD_HEAD.FLAGS.ERR# = %YES#;

   8607 12 000633   400000 236003                    LDQ     -131072,DU
        12 000634   000002 256100                    ORSQ    2,,PR0

     1320     8608    1       RETURN;

   8608 12 000635   000000 702200 xent               TSX2  ! X66_ARET

     1321     8609        %EJECT;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:211  
     1322     8610        /*F*
     1323     8611             NAME: VMA$DEL_UENTRY
     1324     8612             PURPOSE:
     1325     8613                   To delete a UNRESOLVED address entry from the address list.
     1326     8614             DESCRIPTION:
     1327     8615                   This routine will search the address list described
     1328     8616                   by VM_ADD_HEAD to find an entry where the NAME,
     1329     8617                   FOLDER and SITENAME match the passed parameters.
     1330     8618                   All other parameters will be ignored.
     1331     8619
     1332     8620                   NOTE: An ALTRETURN means that the entry was not found.
     1333     8621        */
     1334     8622    1   VMA$DEL_UENTRY: ENTRY (NAME,FOLDER,PASSWORD,SITENAME,ERR#,NAME_KEY) ALTRET;

   8622 12 000636   000000 700200 xent  VMA$DEL_UEN* TSX0  ! X66_AUTO_N
        12 000637   000100 000006                    ZERO    64,6

     1335     8623        /*
     1336     8624             ***** No entries?
     1337     8625        */
     1338     8626    1       IF VM_ADD_HEAD.NUM_ENTRIES = 0

   8626 12 000640   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 000641   000001 235100                    LDA     1,,PR0
        12 000642   000644 601000 12                 TNZ     s:8629

     1339     8627    1       THEN
     1340     8628    1           ALTRETURN;

   8628 12 000643   000000 702200 xent               TSX2  ! X66_AALT

     1341     8629    1       IF SITENAME = ' '

   8629 12 000644   200006 471500                    LDP1    @SITENAME,,AUTO
        12 000645   040000 106500                    CMPC    fill='040'O
        12 000646   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
        12 000647   000004 000001 13                 ADSC9   4                        cn=0,n=1
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:212  
        12 000650   000655 601000 12                 TNZ     s:8633

     1342     8630    1       THEN                            /* Assume local site */
     1343     8631    1           SITE = VM_SITENAME;

   8631 12 000651   040100 100400                    MLR     fill='040'O
        12 000652   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        12 000653   200073 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
        12 000654   000660 710000 12                 TRA     s:8637

     1344     8632    1       ELSE
     1345     8633    1           SITE = SITENAME;

   8633 12 000655   040100 100500                    MLR     fill='040'O
        12 000656   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
        12 000657   200073 000010                    ADSC9   SITE,,AUTO               cn=0,n=8

     1346     8634        /*
     1347     8635             ***** Initialize ...
     1348     8636        */
     1349     8637    1       X$MCB.TYPE = 0;

   8637 12 000660   000010 450000 11                 STZ     X$MCB+5

     1350     8638    1       X$MCB.MIN_SIZE = SIZEC(VM$RADDRESS);

   8638 12 000661   000120 235007                    LDA     80,DL
        12 000662   000012 755000 11                 STA     X$MCB+7

     1351     8639    1       X$MCB.SEGMENT_BASE$ = VBASE(VM_ADDLIST_);

   8639 12 000663   000001 236000 xsym               LDQ     VM_ADDLIST_+1
        12 000664   000005 756000 11                 STQ     X$MCB+2

     1352     8640    1       X$MCB.HI_SEGMENT$ = VM_ADD_HEAD.NEXT$;

   8640 12 000665   000005 236100                    LDQ     5,,PR0
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:213  
        12 000666   000006 756000 11                 STQ     X$MCB+3

     1353     8641    1       X$MCB.FREE_HEAD$ = VM_ADD_HEAD.FREE$;

   8641 12 000667   000004 236100                    LDQ     4,,PR0
        12 000670   000004 756000 11                 STQ     X$MCB+1

     1354     8642    1       X$MCB.WKSZ = (VBOUND(VM_ADDLIST_)+1)/4;

   8642 12 000671   000000 236000 xsym               LDQ     VM_ADDLIST_
        12 000672   000020 772000                    QRL     16
        12 000673   000001 036007                    ADLQ    1,DL
        12 000674   000002 772000                    QRL     2
        12 000675   000007 756000 11                 STQ     X$MCB+4

     1355     8643        /*
     1356     8644             ***** Search ...
     1357     8645        */
     1358     8646    1       LINK2$ = ADDR(NIL);

   8646 12 000676   000000 236000 13                 LDQ     0
        12 000677   000002 756000 11                 STQ     LINK2$

     1359     8647    1       LINK1$ = VM_ADD_HEAD.HEAD$;

   8647 12 000700   000003 236100                    LDQ     3,,PR0
        12 000701   000001 756000 11                 STQ     LINK1$

     1360     8648    2       DO WHILE (LINK1$ ~= ADDR(NIL));

   8648 12 000702   001017 710000 12                 TRA     s:8692

     1361     8649    2           CALL XLATE(TEMPBUF,LOWER_UPPER,SUBSTR(LINK1$->VM$UADDRESS.

   8649 12 000703   000001 470400 11                 LDP0    LINK1$
        12 000704   000021 720100                    LXL0    17,,PR0
        12 000705   000777 360003                    ANX0    511,DU
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:214  
        12 000706   000000 471400 xsym               LDP1    B$XL_UPPER$
        12 000707   040100 160540                    MVT     fill='040'O
        12 000710   000022 000010                    ADSC9   18,,PR0                  cn=0,n=*X0
        12 000711   200011 000310                    ADSC9   TEMPBUF,,AUTO            cn=0,n=200
        12 000712   100000 000100                    ARG     0,,PR1

     1362     8650    2             USER_NAME.TEXT,0,LINK1$->VM$UADDRESS.USER_NAME.COUNT));
     1363     8651    2           IF SUBSTR(TEMPBUF,0,LINK1$->VM$UADDRESS.USER_NAME.COUNT) ~=

   8651 12 000713   000021 720100                    LXL0    17,,PR0
        12 000714   000777 360003                    ANX0    511,DU
        12 000715   200003 473500                    LDP3    @NAME,,AUTO
        12 000716   000100 101500                    MRL     fill='000'O
        12 000717   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        12 000720   200076 000002                    ADSC9   SITE+3,,AUTO             cn=0,n=2
        12 000721   200076 221100                    LDX1    SITE+3,,AUTO
        12 000722   000100 101500                    MRL     fill='000'O
        12 000723   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        12 000724   200077 000002                    ADSC9   SITE+4,,AUTO             cn=0,n=2
        12 000725   200077 222100                    LDX2    SITE+4,,AUTO
        12 000726   040140 106540                    CMPC    fill='040'O
        12 000727   200011 000010                    ADSC9   TEMPBUF,,AUTO            cn=0,n=*X0
        12 000730   300000 200012                    ADSC9   0,,PR3                   cn=1,n=*X2
        12 000731   001013 601000 12                 TNZ     END_DEL_SRCH

     1364     8652    2             SUBSTR(NAME.TEXT,0,NAME.SIZ)
     1365     8653    2           THEN
     1366     8654    2               GOTO END_DEL_SRCH;
     1367     8655    2           IF LINK1$ -> VM$UADDRESS.FOLDER ~= FOLDER

   8655 12 000732   200004 474500                    LDP4    @FOLDER,,AUTO
        12 000733   040100 106500                    CMPC    fill='040'O
        12 000734   000007 400031                    ADSC9   7,,PR0                   cn=2,n=25
        12 000735   400000 000031                    ADSC9   0,,PR4                   cn=0,n=25
        12 000736   001013 601000 12                 TNZ     END_DEL_SRCH

     1368     8656    2           THEN
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:215  
     1369     8657    2               GOTO END_DEL_SRCH;
     1370     8658    2           IF LINK1$ -> VM$UADDRESS.SITENAME ~= ' '

   8658 12 000737   040000 106500                    CMPC    fill='040'O
        12 000740   000017 600010                    ADSC9   15,,PR0                  cn=3,n=8
        12 000741   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000742   000750 600000 12                 TZE     s:8665

     1371     8659    3           THEN DO;

     1372     8660    3               IF SITE ~= LINK1$ -> VM$UADDRESS.SITENAME

   8660 12 000743   040100 106500                    CMPC    fill='040'O
        12 000744   200073 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
        12 000745   000017 600010                    ADSC9   15,,PR0                  cn=3,n=8
        12 000746   001013 601000 12                 TNZ     END_DEL_SRCH

     1373     8661    3               THEN
     1374     8662    3                   GOTO END_DEL_SRCH;
     1375     8663    3           END;

   8663 12 000747   000754 710000 12                 TRA     s:8673

     1376     8664    3           ELSE DO;

     1377     8665    3               IF SITE ~= VM_SITENAME

   8665 12 000750   040000 106500                    CMPC    fill='040'O
        12 000751   200073 000010                    ADSC9   SITE,,AUTO               cn=0,n=8
        12 000752   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        12 000753   001013 601000 12                 TNZ     END_DEL_SRCH

     1378     8666    3               THEN
     1379     8667    3                   GOTO END_DEL_SRCH;
     1380     8668    3           END;

     1381     8669        /*
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:216  
     1382     8670             ***** Username, folder and sitename match.
     1383     8671                   Delete this entry ...
     1384     8672        */
     1385     8673    2           IF LINK2$ ~= ADDR(NIL)

   8673 12 000754   000002 236000 11                 LDQ     LINK2$
        12 000755   000000 116000 13                 CMPQ    0
        12 000756   000763 600000 12                 TZE     s:8678

     1386     8674    2           THEN
     1387     8675    2               LINK2$ -> VM$UADDRESS.NEXT$ =

   8675 12 000757   000000 236100                    LDQ     0,,PR0
        12 000760   000002 475400 11                 LDP5    LINK2$
        12 000761   500000 756100                    STQ     0,,PR5
        12 000762   000766 710000 12                 TRA     s:8679

     1388     8676    2                 LINK1$ -> VM$UADDRESS.NEXT$;
     1389     8677    2           ELSE
     1390     8678    2               VM_ADD_HEAD.HEAD$ = LINK1$ -> VM$UADDRESS.NEXT$;

   8678 12 000763   000000 236100                    LDQ     0,,PR0
        12 000764   000000 475400 xsym               LDP5    VM_ADDLIST$
        12 000765   500003 756100                    STQ     3,,PR5

     1391     8679    2           IF LINK1$ -> VM$UADDRESS.NEXT$ ~= ADDR(NIL)

   8679 12 000766   000000 236100                    LDQ     0,,PR0
        12 000767   000000 116000 13                 CMPQ    0
        12 000770   000774 600000 12                 TZE     s:8683

     1392     8680    2           THEN
     1393     8681    2               LINK1$ -> VM$UADDRESS.NEXT$ ->

   8681 12 000771   000000 475500                    LDP5    0,,PR0
        12 000772   000002 236000 11                 LDQ     LINK2$
        12 000773   500001 756100                    STQ     1,,PR5
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:217  

     1394     8682    2                 VM$UADDRESS.PREV$ = LINK2$;
     1395     8683    2           X$MCB.ADDRESS$ = LINK1$;

   8683 12 000774   000001 236000 11                 LDQ     LINK1$
        12 000775   000003 756000 11                 STQ     X$MCB

     1396     8684    2           CALL X$DEALLOCATE (X$MCB);

   8684 12 000776   000002 630400 13                 EPPR0   2
        12 000777   000001 631400 13                 EPPR1   1
        12 001000   000000 701000 xent               TSX1    X$DEALLOCATE
        12 001001   000000 011000                    NOP     0

     1397     8685    2           VM_ADD_HEAD.NUM_ENTRIES = VM_ADD_HEAD.NUM_ENTRIES - 1;

   8685 12 001002   000000 470400 xsym               LDP0    VM_ADDLIST$
        12 001003   000001 235100                    LDA     1,,PR0
        12 001004   000001 135007                    SBLA    1,DL
        12 001005   000001 755100                    STA     1,,PR0

     1398     8686    2           VM_ADD_HEAD.NEXT$ = X$MCB.HI_SEGMENT$;

   8686 12 001006   000006 236000 11                 LDQ     X$MCB+3
        12 001007   000005 756100                    STQ     5,,PR0

     1399     8687    2           VM_ADD_HEAD.FREE$ = X$MCB.FREE_HEAD$;

   8687 12 001010   000004 236000 11                 LDQ     X$MCB+1
        12 001011   000004 756100                    STQ     4,,PR0

     1400     8688    2           RETURN;

   8688 12 001012   000000 702200 xent               TSX2  ! X66_ARET

     1401     8689    2   END_DEL_SRCH:
     1402     8690    2           LINK2$ = LINK1$;
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:218  

   8690 12 001013   000001 236000 11    END_DEL_SRCH LDQ     LINK1$
        12 001014   000002 756000 11                 STQ     LINK2$

     1403     8691    2           LINK1$ = LINK1$ -> VM$UADDRESS.NEXT$;

   8691 12 001015   000000 236100                    LDQ     0,,PR0
        12 001016   000001 756000 11                 STQ     LINK1$

     1404     8692    2       END;                            /* Do while ... end */

   8692 12 001017   000000 116000 13                 CMPQ    0
        12 001020   000703 601000 12                 TNZ     s:8649

     1405     8693        /*
     1406     8694             ***** If we fell out,
     1407     8695                   then the entry must not be defined ...
     1408     8696        */
     1409     8697    1       ALTRETURN;

   8697 12 001021   000000 702200 xent               TSX2  ! X66_AALT

X$MCB
 Sect OctLoc
  11     003   ****** ******   ****** ******   ****** ******   ****** ******    ................

(unnamed)
 Sect OctLoc
  13     000   000000 006014   000001 000000   000003 006000   000000 006000    ................
  13     004   040040 040040
     1410     8698    1   END VMA$ADD_UENTRY;
     1411     8699        %EOD;

PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:219  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   XUM_MACRO_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ADD_UENTRY.
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:220  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$ADD_UENTRY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w PTR         r     1 LINK1$                     2-0-0/w PTR         r     1 LINK2$
     0-0-0/w PTR         r     1 PTR$                       3-0-0/w STRC(324)   r     1 X$MCB

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @ERR#                      4-0-0/w PTR         r     1 @FOLDER
     3-0-0/w PTR         r     1 @NAME                     10-0-0/w PTR         r     1 @NAME_KEY
     5-0-0/w PTR         r     1 @PASSWORD                  6-0-0/w PTR         r     1 @SITENAME
    *0-0-0/b BIT         r     1 ERR#                      *0-0-0/c CHAR(25)    r     1 FOLDER
    *0-0-0/c ASTR(9)     r     1 NAME                      *0-0-0/c CHAR(20)    r     1 NAME_KEY
    *0-0-0/c STRC(72)    r     1 PASSWORD                  73-0-0/c CHAR(8)     r     1 SITE
    *0-0-0/c CHAR(8)     r     1 SITENAME                  11-0-0/c CHAR(200)   r     1 TEMPBUF

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/c ASTR(9)     r     1 ERRMSG_FID
     0-0-0/w UBIN              1 M$DO_NUM                   0-0-0/w UBIN              1 M$LO_NUM
     0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM         0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM
     0-0-0/w UBIN              1 M$MAIL_FILE_NUM            0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM
     0-0-0/w UBIN              1 M$ME_NUM                   0-0-0/w UBIN              1 M$NODE_NUM
     0-0-0/w UBIN              1 M$SI_NUM                   0-0-0/w UBIN              1 M$WORK_NUM
     0-0-0/w PTR         r     1 VM_ADDLIST$                0-0-0/d VECT        r     1 VM_ADDLIST_
     0-0-0/w PTR               1 VM_ADDREC$                 0-0-0/d VECT              1 VM_ADDREC_
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:221  
     0-0-0/w PTR               1 VM_COPY$                   0-0-0/d VECT              1 VM_COPY_
     0-0-0/w PTR               1 VM_ENCLLIST$               0-0-0/d VECT              1 VM_ENCLLIST_
     0-0-0/w PTR               1 VM_ENCLREC$                0-0-0/d VECT              1 VM_ENCLREC_
     0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME       0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME
     0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS       0-0-0/w PTR               1 VM_HEADER$
     0-0-0/d VECT              1 VM_HEADER_                 0-0-0/d VECT              1 VM_HEADER_INIT_
     0-0-0/w PTR               1 VM_INPUT$                  0-0-0/d VECT              1 VM_INPUT_
     0-0-0/c STRC(72)          1 VM_MAILCG_NAME             0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA
     0-0-0/c STRC(72)          1 VM_MAIL_ACCT               0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME
     0-0-0/w PTR               1 VM_PARSEAREA$              0-0-0/d VECT              1 VM_PARSEAREA_
     0-0-0/w PTR               1 VM_PROFILE$                0-0-0/d VECT              1 VM_PROFILE_
     0-0-0/w PTR               1 VM_SELECT$                 0-0-0/d VECT              1 VM_SELECT_
     0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME          0-0-0/c CHAR(8)     r     1 VM_SITENAME
     0-0-0/w PTR               1 VM_WORK$                   0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ACHR        r     1 CHARN                      0-0-0/d STRC(4608)  r     1 LOWER_UPPER
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(9)     r     1 TEXTC
     0-0-0/w STRC(711)   r     1 VM$RADDRESS                0-0-0/w STRC(2448)  r     1 VM$UADDRESS
     0-0-0/w STRC(252)   r     1 VM_ADD_HEAD                0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$ADD_UENTRY requires 530 words for executable code.
   Procedure VMA$ADD_UENTRY requires 64 words of local(AUTO) storage.
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:222  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:223  
          MINI XREF LISTING

B$XL_UPPER$
      8228**DCL      8229--IMP-PTR  8649>>CALLBLT
CHARN
      8366**DCL      8424<<ASSIGN   8528<<ASSIGN
END_DEL_SRCH
      8690**LABEL    8654--GOTO     8657--GOTO     8662--GOTO     8667--GOTO
ERR#
      8252**DCL        32--PROC     8434--IF       8436>>ASSIGN   8467--ENTRY    8538--IF       8540>>ASSIGN
      8622--ENTRY
ERRMSG_FID.L#
      7937**DCL      7937--IMP-SIZ
E_ADD
      8451**LABEL    8405--CALLALT  8407--CALLALT  8516--CALLALT  8518--CALLALT
FOLDER
      8237**DCL        32--PROC     8425>>ASSIGN   8467--ENTRY    8483>>IF       8529>>ASSIGN   8622--ENTRY
      8655>>IF
LINK1$
      8364**DCL      8481<<ASSIGN   8482>>DOWHILE  8483>>IF       8483>>IF       8483>>IF       8483>>IF
      8483>>IF       8483>>IF       8491>>IF       8496>>IF       8500<<ASSIGN   8500>>ASSIGN   8568<<ASSIGN
      8570>>DOWHILE  8571>>IF       8574>>IF       8574>>IF       8578>>ASSIGN   8579<<ASSIGN   8579>>ASSIGN
      8581>>IF       8590>>ASSIGN   8591>>ASSIGN   8592>>ASSIGN   8647<<ASSIGN   8648>>DOWHILE  8649>>CALLBLT
      8649>>CALLBLT  8651>>IF       8655>>IF       8658>>IF       8660>>IF       8675>>ASSIGN   8678>>ASSIGN
      8679>>IF       8681>>ASSIGN   8683>>ASSIGN   8690>>ASSIGN   8691<<ASSIGN   8691>>ASSIGN
LINK2$
      8365**DCL      8569<<ASSIGN   8578<<ASSIGN   8584>>ASSIGN   8585>>ASSIGN   8593>>IF       8595>>ASSIGN
      8646<<ASSIGN   8673>>IF       8675>>ASSIGN   8681>>ASSIGN   8690<<ASSIGN
LOWER_UPPER
      8229**DCL      8649>>CALLBLT
NAME
      8233**DCL        32--PROC     8467--ENTRY    8622--ENTRY
NAME.SIZ
      8234**DCL      8235--IMP-SIZ  8366--IMP-SIZ  8400>>ASSIGN   8423>>ASSIGN   8424>>ASSIGN   8424>>ASSIGN
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:224  
      8483>>IF       8511>>ASSIGN   8527>>ASSIGN   8528>>ASSIGN   8528>>ASSIGN   8553>>IF       8553>>IF
      8574>>IF       8651>>IF       8651>>IF
NAME.TEXT
      8235**DCL      8424>>ASSIGN   8483>>IF       8528>>ASSIGN   8553>>IF       8574>>IF       8651>>IF
NAME_KEY
      8253**DCL        32--PROC     8429--IF       8431>>ASSIGN   8467--ENTRY    8489--IF       8496>>IF
      8533--IF       8535>>ASSIGN   8622--ENTRY
PASSWORD
      8249**DCL        32--PROC     8467--ENTRY    8622--ENTRY
PASSWORD.PASS#
      8249**DCL      8426>>ASSIGN   8483>>IF       8530>>ASSIGN
PTR$
      8363**DCL      8409<<ASSIGN   8420>>ASSIGN   8421>>ASSIGN   8422>>ASSIGN   8423>>ASSIGN   8424>>ASSIGN
      8425>>ASSIGN   8426>>ASSIGN   8427>>ASSIGN   8428>>ASSIGN   8431>>ASSIGN   8433>>ASSIGN   8436>>ASSIGN
      8437>>ASSIGN   8445>>IF       8520<<ASSIGN   8524>>ASSIGN   8525>>ASSIGN   8526>>ASSIGN   8527>>ASSIGN
      8528>>ASSIGN   8529>>ASSIGN   8530>>ASSIGN   8531>>ASSIGN   8532>>ASSIGN   8535>>ASSIGN   8537>>ASSIGN
      8540>>ASSIGN   8547>>ASSIGN   8560>>ASSIGN   8561>>ASSIGN   8562>>ASSIGN   8584>>ASSIGN   8585>>ASSIGN
      8590>>ASSIGN   8591>>ASSIGN   8592>>ASSIGN   8595>>ASSIGN   8605>>IF
SITE
      8362**DCL      8417<<ASSIGN   8419<<ASSIGN   8427>>ASSIGN   8631<<ASSIGN   8633<<ASSIGN   8660>>IF
      8665>>IF
SITENAME
      8251**DCL        32--PROC     8415>>IF       8419>>ASSIGN   8467--ENTRY    8483>>IF       8531>>ASSIGN
      8622--ENTRY    8629>>IF       8633>>ASSIGN
TEMPBUF
      8254**DCL      8649<<CALLBLT  8651>>IF
TEXTC.SIZ
      8369**DCL      8370--IMP-SIZ  8483>>IF
TEXTC.TEXT
      8370**DCL      8483>>IF
UPDATE_UENTRY
      8601**LABEL    8548--GOTO     8563--GOTO     8586--GOTO
VM$RADDRESS
      8336**DCL      8395--ASSIGN   8506--ASSIGN   8638--ASSIGN
VM$RADDRESS.FOLDER
      8351**DCL      8352--REDEF
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:225  
VM$UADDRESS
      8299**DCL      8400--ASSIGN   8511--ASSIGN
VM$UADDRESS.FLAGS
      8304**DCL      8428<<ASSIGN   8532<<ASSIGN
VM$UADDRESS.FLAGS.UNDEF#
      8305**DCL      8436<<ASSIGN   8445>>IF       8540<<ASSIGN   8605>>IF
VM$UADDRESS.FOLDER
      8314**DCL      8315--REDEF    8425<<ASSIGN   8483>>IF       8529<<ASSIGN   8655>>IF
VM$UADDRESS.NAME_KEY
      8312**DCL      8431<<ASSIGN   8433<<ASSIGN   8491>>IF       8496>>IF       8535<<ASSIGN   8537<<ASSIGN
VM$UADDRESS.NEXT$
      8300**DCL      8420<<ASSIGN   8500>>ASSIGN   8524<<ASSIGN   8560<<ASSIGN   8579>>ASSIGN   8585<<ASSIGN
      8591<<ASSIGN   8595<<ASSIGN   8675<<ASSIGN   8675>>ASSIGN   8678>>ASSIGN   8679>>IF       8681>>ASSIGN
      8691>>ASSIGN
VM$UADDRESS.PASS
      8319**DCL      8426<<ASSIGN   8483>>IF       8530<<ASSIGN
VM$UADDRESS.PREV$
      8302**DCL      8421<<ASSIGN   8525<<ASSIGN   8561<<ASSIGN   8584<<ASSIGN   8590<<ASSIGN   8590>>ASSIGN
      8592<<ASSIGN   8681<<ASSIGN
VM$UADDRESS.SITENAME
      8321**DCL      8427<<ASSIGN   8483>>IF       8531<<ASSIGN   8658>>IF       8660>>IF
VM$UADDRESS.TYPE
      8311**DCL      8422<<ASSIGN   8483>>IF       8526<<ASSIGN   8553>>IF       8553>>IF       8571>>IF
VM$UADDRESS.USER_NAME
      8322**DCL      8483--IF       8483--IF
VM$UADDRESS.USER_NAME.COUNT
      8323**DCL      8423<<ASSIGN   8527<<ASSIGN   8553>>IF       8574>>IF       8649>>CALLBLT  8651>>IF
VM$UADDRESS.USER_NAME.TEXT
      8324**DCL      8400--ASSIGN   8424--ASSIGN   8511--ASSIGN   8528--ASSIGN   8553>>IF       8574>>IF
      8649>>CALLBLT
VMA$ENLARGE_SEGMENT
      8377**DCL-ENT  8405--CALL     8516--CALL
VM_ADDLIST$
      7791**DCL      8270--IMP-PTR  8384>>IF       8387>>ASSIGN   8388>>ASSIGN   8389>>ASSIGN   8389>>ASSIGN
      8397>>ASSIGN   8398>>ASSIGN   8410>>ASSIGN   8411>>ASSIGN   8420>>ASSIGN   8437>>ASSIGN   8441>>ASSIGN
      8442>>ASSIGN   8443>>ASSIGN   8443>>ASSIGN   8444>>ASSIGN   8444>>ASSIGN   8444>>ASSIGN   8447>>ASSIGN
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:226  
      8471>>IF       8474>>ASSIGN   8475>>ASSIGN   8476>>ASSIGN   8476>>ASSIGN   8481>>ASSIGN   8508>>ASSIGN
      8509>>ASSIGN   8544>>IF       8547>>ASSIGN   8553>>IF       8553>>IF       8553>>IF       8553>>IF
      8560>>ASSIGN   8561>>ASSIGN   8562>>ASSIGN   8568>>ASSIGN   8601>>ASSIGN   8602>>ASSIGN   8603>>ASSIGN
      8603>>ASSIGN   8604>>ASSIGN   8604>>ASSIGN   8604>>ASSIGN   8607>>ASSIGN   8626>>IF       8640>>ASSIGN
      8641>>ASSIGN   8647>>ASSIGN   8678>>ASSIGN   8685>>ASSIGN   8685>>ASSIGN   8686>>ASSIGN   8687>>ASSIGN
VM_ADDLIST_
      7815**DCL      8396>>ASSIGN   8399>>ASSIGN   8405<>CALL     8507>>ASSIGN   8510>>ASSIGN   8516<>CALL
      8639>>ASSIGN   8642>>ASSIGN
VM_ADD_HEAD.ADDRESS_SIZE
      8271**DCL      8444<<ASSIGN   8604<<ASSIGN
VM_ADD_HEAD.FLAGS.ERR#
      8276**DCL      8447<<ASSIGN   8607<<ASSIGN
VM_ADD_HEAD.FREE$
      8282**DCL      8388<<ASSIGN   8398>>ASSIGN   8411<<ASSIGN   8442<<ASSIGN   8475<<ASSIGN   8509>>ASSIGN
      8602<<ASSIGN   8641>>ASSIGN   8687<<ASSIGN
VM_ADD_HEAD.HEAD$
      8280**DCL      8387<<ASSIGN   8420>>ASSIGN   8437<<ASSIGN   8474<<ASSIGN   8481>>ASSIGN   8544>>IF
      8547<<ASSIGN   8553>>IF       8553>>IF       8553>>IF       8553>>IF       8560>>ASSIGN   8561>>ASSIGN
      8562<<ASSIGN   8568>>ASSIGN   8647>>ASSIGN   8678<<ASSIGN
VM_ADD_HEAD.NEXT$
      8284**DCL      8389<<ASSIGN   8397>>ASSIGN   8410<<ASSIGN   8441<<ASSIGN   8444>>ASSIGN   8476<<ASSIGN
      8508>>ASSIGN   8601<<ASSIGN   8604>>ASSIGN   8640>>ASSIGN   8686<<ASSIGN
VM_ADD_HEAD.NUM_ENTRIES
      8273**DCL      8384>>IF       8443<<ASSIGN   8443>>ASSIGN   8471>>IF       8603<<ASSIGN   8603>>ASSIGN
      8626>>IF       8685<<ASSIGN   8685>>ASSIGN
VM_ADD_HEAD.WORK_AREA
      8286**DCL      8389--ASSIGN   8476--ASSIGN
VM_SITENAME
      8060**DCL      8417>>ASSIGN   8631>>ASSIGN   8665>>IF
X$ALLOCATE
      8378**DCL-ENT  8402--CALL     8407--CALL     8513--CALL     8518--CALL
X$DEALLOCATE
      8379**DCL-ENT  8684--CALL
X$MCB
      8373**DCL      8402<>CALL     8407<>CALL     8513<>CALL     8518<>CALL     8684<>CALL
X$MCB.ADDRESS$
PL6.E3A0      #004=VMA$ADD_UENTRY File=VMA$SUBR.:VMB6TSI                         WED 08/20/97 15:03 Page:227  
      8373**DCL      8409>>ASSIGN   8520>>ASSIGN   8683<<ASSIGN
X$MCB.FREE_HEAD$
      8373**DCL      8398<<ASSIGN   8411>>ASSIGN   8442>>ASSIGN   8509<<ASSIGN   8602>>ASSIGN   8641<<ASSIGN
      8687>>ASSIGN
X$MCB.HI_SEGMENT$
      8373**DCL      8397<<ASSIGN   8410>>ASSIGN   8441>>ASSIGN   8508<<ASSIGN   8601>>ASSIGN   8640<<ASSIGN
      8686>>ASSIGN
X$MCB.MIN_SIZE
      8374**DCL      8395<<ASSIGN   8506<<ASSIGN   8638<<ASSIGN
X$MCB.SEGMENT_BASE$
      8373**DCL      8396<<ASSIGN   8507<<ASSIGN   8639<<ASSIGN
X$MCB.SIZE
      8373**DCL      8400<<ASSIGN   8511<<ASSIGN
X$MCB.TYPE
      8373**DCL      8394<<ASSIGN   8505<<ASSIGN   8637<<ASSIGN
X$MCB.WKSZ
      8373**DCL      8399<<ASSIGN   8406<<ASSIGN   8406>>ASSIGN   8510<<ASSIGN   8517<<ASSIGN   8517>>ASSIGN
      8642<<ASSIGN
X$STRING.SIZ
      7783**DCL      7784--IMP-SIZ

PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:228  
     1412        1        /*T***********************************************************/
     1413        2        /*T*                                                         */
     1414        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1415        4        /*T*                                                         */
     1416        5        /*T***********************************************************/
     1417        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1418        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1419        8        /*F*
     1420        9             NAME: VMA$GET_NEXT_ENTRY
     1421       10             PURPOSE:
     1422       11                  To retrieve the next address spec. from the address list.
     1423       12             DESCRIPTION:
     1424       13                  This routine will return the next address spec. in the address
     1425       14                  list. It handles pointers that do not point to the correct
     1426       15                  addresses, only offsets.
     1427       16
     1428       17                  This routine has four parameters:
     1429       18                   VM_UADDRESS - return information.
     1430       19                   VM_RADDRESS - return information.
     1431       20                   NEXT$       - pointer to the next entry on the address list.
     1432       21                                 This pointer is based upon the original record,
     1433       22                                 and has no relation to the current location
     1434       23                                 of this entry in memory.
     1435       24                   WORK$       - pointer to the frame of memory that contains
     1436       25                                 the address list to retrieve the entry from.
     1437       26        */
     1438       27        VMA$GET_NEXT_ENTRY: PROC (VM_UADDRESS,VM_RADDRESS,NEXT$,WORK$) ALTRET;
     1439       28        /***** Include files *****/
     1440       29          %INCLUDE B_ERRORS_C;
     1441     1156          %INCLUDE CP_6;
     1442     6715          %INCLUDE CP_6_SUBS;
     1443     7255          %INCLUDE VM_MACRO_C;
     1444     8523          %INCLUDE VM_SUBS_C;
     1445     8783          %INCLUDE VM_DATA_R;
     1446     9214        /***** Parameters *****/
     1447     9215          %VM_ADDTYPES;
     1448     9219          %VM_UADDRESS (STCLASS=" ");
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:229  
     1449     9256          %VM_RADDRESS (STCLASS=" ");
     1450     9291    1   DCL NEXT$ PTR;
     1451     9292    1   DCL WORK$ PTR;
     1452     9293        /***** Local variables *****/
     1453     9294    1   DCL OFFSET UBIN WORD AUTO;
     1454     9295    1   DCL PTR$ PTR AUTO;
     1455     9296    1   DCL TEMP$ PTR AUTO;
     1456     9297          %POINTER (NAME=TEMP_PTR,STCLASS="REDEF TEMP$");
     1457     9302    1   DCL TMP UBIN STATIC;
     1458     9303    1   DCL CHARN CHAR(TMP) BASED;
     1459     9304        /***** Mail structures *****/
     1460     9305          %VM_ADD_HEAD (STCLASS="BASED(WORK$)");
     1461     9334          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS=BASED);
     1462     9371          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
     1463     9406        %EJECT;
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:230  
     1464     9407        /*
     1465     9408             ***** If no more entries, then altreturn ...
     1466     9409        */
     1467     9410    1       IF NEXT$ = ADDR(NIL)
     1468     9411    1       THEN
     1469     9412    1           ALTRETURN;
     1470     9413        /*
     1471     9414             ***** Calculate the offset from the beginning of the
     1472     9415                   original structure to the entry in question ...
     1473     9416        */
     1474     9417    1       TEMP$ = NEXT$;
     1475     9418    1       TEMP_PTR.OFFSET = 0;
     1476     9419    1       OFFSET = POFFW(NEXT$,TEMP$);
     1477     9420        /*
     1478     9421             ***** Calculate the address of the new structure ...
     1479     9422        */
     1480     9423    1       PTR$ = PINCRW(WORK$,OFFSET);
     1481     9424        /*
     1482     9425             ***** Get the next entry ...
     1483     9426        */
     1484     9427        /*
     1485     9428            Avoid trapping out near end of segment */
     1486     9429
     1487     9430    1       VM_RADDRESS = PTR$->VM$RADDRESS;
     1488     9431    1       IF VM_RADDRESS.TYPE = %VM_ADD_UNRESOLVED
     1489     9432    2       THEN DO;
     1490     9433    2           TMP = SIZEC(VM_UADDRESS) - SIZEC(VM_UADDRESS.USER_NAME.TEXT)
     1491     9434    2             + PTR$->VM$UADDRESS.USER_NAME.COUNT;
     1492     9435    2           ADDR(VM_UADDRESS)->CHARN = PTR$->CHARN;
     1493     9436    2       END;
     1494     9437    1       ELSE VM_UADDRESS = VM_RADDRESS; /* Stuff as much as possible */
     1495     9438    1       NEXT$ = VM_RADDRESS.NEXT$;
     1496     9439    1       RETURN;
     1497     9440    1   END VMA$GET_NEXT_ENTRY;
     1498     9441        %EOD;

PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:231  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$GET_NEXT_ENTRY.

   Procedure VMA$GET_NEXT_ENTRY requires 47 words for executable code.
   Procedure VMA$GET_NEXT_ENTRY requires 12 words of local(AUTO) storage.

PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:232  

 Object Unit name= VMA$GET_NEXT_ENTRY                         File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:03:26.08 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none     1      1  VMA$GET_NEXT_ENTRY
   12   Proc  even  none    47     57  VMA$GET_NEXT_ENTRY
   13  RoData even  none     1      1  VMA$GET_NEXT_ENTRY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        4  VMA$GET_NEXT_ENTRY
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:233  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:234  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:235  


     1412        1        /*T***********************************************************/
     1413        2        /*T*                                                         */
     1414        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1415        4        /*T*                                                         */
     1416        5        /*T***********************************************************/
     1417        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1418        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1419        8        /*F*
     1420        9             NAME: VMA$GET_NEXT_ENTRY
     1421       10             PURPOSE:
     1422       11                  To retrieve the next address spec. from the address list.
     1423       12             DESCRIPTION:
     1424       13                  This routine will return the next address spec. in the address
     1425       14                  list. It handles pointers that do not point to the correct
     1426       15                  addresses, only offsets.
     1427       16
     1428       17                  This routine has four parameters:
     1429       18                   VM_UADDRESS - return information.
     1430       19                   VM_RADDRESS - return information.
     1431       20                   NEXT$       - pointer to the next entry on the address list.
     1432       21                                 This pointer is based upon the original record,
     1433       22                                 and has no relation to the current location
     1434       23                                 of this entry in memory.
     1435       24                   WORK$       - pointer to the frame of memory that contains
     1436       25                                 the address list to retrieve the entry from.
     1437       26        */
     1438       27        VMA$GET_NEXT_ENTRY: PROC (VM_UADDRESS,VM_RADDRESS,NEXT$,WORK$) ALTRET;

     27 12 000000   000000 700200 xent  VMA$GET_NEX* TSX0  ! X66_AUTO_4
        12 000001   000014 000004                    ZERO    12,4

     1439       28        /***** Include files *****/
     1440       29          %INCLUDE B_ERRORS_C;
     1441     1156          %INCLUDE CP_6;
     1442     6715          %INCLUDE CP_6_SUBS;
     1443     7255          %INCLUDE VM_MACRO_C;
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:236  
     1444     8523          %INCLUDE VM_SUBS_C;
     1445     8783          %INCLUDE VM_DATA_R;
     1446     9214        /***** Parameters *****/
     1447     9215          %VM_ADDTYPES;
     1448     9219          %VM_UADDRESS (STCLASS=" ");
     1449     9256          %VM_RADDRESS (STCLASS=" ");
     1450     9291    1   DCL NEXT$ PTR;
     1451     9292    1   DCL WORK$ PTR;
     1452     9293        /***** Local variables *****/
     1453     9294    1   DCL OFFSET UBIN WORD AUTO;
     1454     9295    1   DCL PTR$ PTR AUTO;
     1455     9296    1   DCL TEMP$ PTR AUTO;
     1456     9297          %POINTER (NAME=TEMP_PTR,STCLASS="REDEF TEMP$");
     1457     9302    1   DCL TMP UBIN STATIC;
     1458     9303    1   DCL CHARN CHAR(TMP) BASED;
     1459     9304        /***** Mail structures *****/
     1460     9305          %VM_ADD_HEAD (STCLASS="BASED(WORK$)");
     1461     9334          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS=BASED);
     1462     9371          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
     1463     9406        %EJECT;
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:237  
     1464     9407        /*
     1465     9408             ***** If no more entries, then altreturn ...
     1466     9409        */
     1467     9410    1       IF NEXT$ = ADDR(NIL)

   9410 12 000002   200005 470500                    LDP0    @NEXT$,,AUTO
        12 000003   000000 236100                    LDQ     0,,PR0
        12 000004   000000 116000 13                 CMPQ    0
        12 000005   000007 601000 12                 TNZ     s:9417

     1468     9411    1       THEN
     1469     9412    1           ALTRETURN;

   9412 12 000006   000000 702200 xent               TSX2  ! X66_AALT

     1470     9413        /*
     1471     9414             ***** Calculate the offset from the beginning of the
     1472     9415                   original structure to the entry in question ...
     1473     9416        */
     1474     9417    1       TEMP$ = NEXT$;

   9417 12 000007   200011 756100                    STQ     TEMP$,,AUTO

     1475     9418    1       TEMP_PTR.OFFSET = 0;

   9418 12 000010   000000 236003                    LDQ     0,DU
        12 000011   200011 752174                    STCQ    TEMP$,'74'O,AUTO

     1476     9419    1       OFFSET = POFFW(NEXT$,TEMP$);

   9419 12 000012   200011 235100                    LDA     TEMP$,,AUTO
        12 000013   000022 771000                    ARL     18
        12 000014   200012 755100                    STA     TEMP$+1,,AUTO
        12 000015   000000 236100                    LDQ     0,,PR0
        12 000016   000022 772000                    QRL     18
        12 000017   200012 136100                    SBLQ    TEMP$+1,,AUTO
        12 000020   200007 756100                    STQ     OFFSET,,AUTO
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:238  

     1477     9420        /*
     1478     9421             ***** Calculate the address of the new structure ...
     1479     9422        */
     1480     9423    1       PTR$ = PINCRW(WORK$,OFFSET);

   9423 12 000021   200006 471500                    LDP1    @WORK$,,AUTO
        12 000022   100000 473500                    LDP3    0,,PR1
        12 000023   300000 634506                    EPPR4   0,QL,PR3
        12 000024   200010 454500                    STP4    PTR$,,AUTO

     1481     9424        /*
     1482     9425             ***** Get the next entry ...
     1483     9426        */
     1484     9427        /*
     1485     9428            Avoid trapping out near end of segment */
     1486     9429
     1487     9430    1       VM_RADDRESS = PTR$->VM$RADDRESS;

   9430 12 000025   200004 475500                    LDP5    @VM_RADDRESS,,AUTO
        12 000026   000100 100500                    MLR     fill='000'O
        12 000027   400000 000117                    ADSC9   0,,PR4                   cn=0,n=79
        12 000030   500000 000117                    ADSC9   0,,PR5                   cn=0,n=79

     1488     9431    1       IF VM_RADDRESS.TYPE = %VM_ADD_UNRESOLVED

   9431 12 000031   500002 236100                    LDQ     2,,PR5
        12 000032   000777 376003                    ANQ     511,DU
        12 000033   000002 116003                    CMPQ    2,DU
        12 000034   000050 601000 12                 TNZ     s:9437

     1489     9432    2       THEN DO;

     1490     9433    2           TMP = SIZEC(VM_UADDRESS) - SIZEC(VM_UADDRESS.USER_NAME.TEXT)

   9433 12 000035   400021 236100                    LDQ     17,,PR4
        12 000036   000777 376007                    ANQ     511,DL
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:239  
        12 000037   000110 036007                    ADLQ    72,DL
        12 000040   000000 756000 11                 STQ     TMP

     1491     9434    2             + PTR$->VM$UADDRESS.USER_NAME.COUNT;
     1492     9435    2           ADDR(VM_UADDRESS)->CHARN = PTR$->CHARN;

   9435 12 000041   000000 620006                    EAX0    0,QL
        12 000042   200003 473500                    LDP3    @VM_UADDRESS,,AUTO
        12 000043   000000 721000 11                 LXL1    TMP
        12 000044   040140 100540                    MLR     fill='040'O
        12 000045   400000 000010                    ADSC9   0,,PR4                   cn=0,n=*X0
        12 000046   300000 000011                    ADSC9   0,,PR3                   cn=0,n=*X1

     1493     9436    2       END;

   9436 12 000047   000054 710000 12                 TRA     s:9438

     1494     9437    1       ELSE VM_UADDRESS = VM_RADDRESS; /* Stuff as much as possible */

   9437 12 000050   200003 473500                    LDP3    @VM_UADDRESS,,AUTO
        12 000051   000100 100500                    MLR     fill='000'O
        12 000052   500000 000117                    ADSC9   0,,PR5                   cn=0,n=79
        12 000053   300000 000420                    ADSC9   0,,PR3                   cn=0,n=272

     1495     9438    1       NEXT$ = VM_RADDRESS.NEXT$;

   9438 12 000054   500000 236100                    LDQ     0,,PR5
        12 000055   000000 756100                    STQ     0,,PR0

     1496     9439    1       RETURN;

   9439 12 000056   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
  13     000   000000 006014                                                    ....
     1497     9440    1   END VMA$GET_NEXT_ENTRY;
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:240  
     1498     9441        %EOD;

PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:241  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$GET_NEXT_ENTRY.
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:242  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$GET_NEXT_ENTRY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 TMP

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @NEXT$                     4-0-0/w PTR         r     1 @VM_RADDRESS
     3-0-0/w PTR         r     1 @VM_UADDRESS               6-0-0/w PTR         r     1 @WORK$
    *0-0-0/w PTR         r     1 NEXT$                      7-0-0/w UBIN        r     1 OFFSET
    10-0-0/w PTR         r     1 PTR$                      11-0-0/w PTR         r     1 TEMP$
    11-0-0/w STRC        r     1 TEMP_PTR                  *0-0-0/w STRC(711)   r     1 VM_RADDRESS
    *0-0-0/w STRC(2448)  r     1 VM_UADDRESS               *0-0-0/w PTR         r     1 WORK$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:243  
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ACHR        r     1 CHARN                      0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/w STRC(711)   r     1 VM$RADDRESS                0-0-0/w STRC(2448)  r     1 VM$UADDRESS
     0-0-0/w STRC(252)         1 VM_ADD_HEAD                0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$GET_NEXT_ENTRY requires 47 words for executable code.
   Procedure VMA$GET_NEXT_ENTRY requires 12 words of local(AUTO) storage.
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:244  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:245  
          MINI XREF LISTING

CHARN
      9303**DCL      9435<<ASSIGN   9435>>ASSIGN
ERRMSG_FID.L#
      9059**DCL      9059--IMP-SIZ
NEXT$
      9291**DCL        27--PROC     9410>>IF       9417>>ASSIGN   9419>>ASSIGN   9438<<ASSIGN
OFFSET
      9294**DCL      9419<<ASSIGN   9423>>ASSIGN
PTR$
      9295**DCL      9423<<ASSIGN   9430>>ASSIGN   9433>>ASSIGN   9435>>ASSIGN
TEMP$
      9296**DCL      9298--REDEF    9417<<ASSIGN   9419>>ASSIGN
TEMP_PTR.OFFSET
      9299**DCL      9418<<ASSIGN
TMP
      9302**DCL      9303--IMP-SIZ  9433<<ASSIGN   9435>>ASSIGN   9435>>ASSIGN
VM$RADDRESS
      9381**DCL      9430>>ASSIGN
VM$RADDRESS.FOLDER
      9396**DCL      9397--REDEF
VM$UADDRESS.FOLDER
      9359**DCL      9360--REDEF
VM$UADDRESS.USER_NAME.COUNT
      9368**DCL      9433>>ASSIGN
VM_RADDRESS
      9266**DCL        27--PROC     9430<<ASSIGN   9437>>ASSIGN
VM_RADDRESS.FOLDER
      9281**DCL      9282--REDEF
VM_RADDRESS.NEXT$
      9267**DCL      9438>>ASSIGN
VM_RADDRESS.TYPE
      9278**DCL      9431>>IF
PL6.E3A0      #005=VMA$GET_NEXT_ENTRY File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:03 Page:246  
VM_UADDRESS
      9229**DCL        27--PROC     9433--ASSIGN   9435--ASSIGN   9437<<ASSIGN
VM_UADDRESS.FOLDER
      9244**DCL      9245--REDEF
VM_UADDRESS.USER_NAME.TEXT
      9254**DCL      9433--ASSIGN
WORK$
      9292**DCL        27--PROC     9315--IMP-PTR  9423>>ASSIGN
X$STRING.SIZ
      8905**DCL      8906--IMP-SIZ

PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:247  
     1499        1        /*T***********************************************************/
     1500        2        /*T*                                                         */
     1501        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1502        4        /*T*                                                         */
     1503        5        /*T***********************************************************/
     1504        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1505        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1506        8        /*F*
     1507        9             NAME: VMA$GET_LIST
     1508       10             PURPOSE:
     1509       11                  To read the specified LIST definition into a data segment.
     1510       12             DESCRIPTION:
     1511       13                  The LIST definition will be read from the currently open folder
     1512       14                  into the data segment based on BUF$. The structure VM_ADD_HEAD
     1513       15                  describes the structure to be written/read.
     1514       16
     1515       17                  Since part of the USER definition is in the same form as
     1516       18                  a LIST definition, this routine may also be used to
     1517       19                  read a specified USER definition. The only difference
     1518       20                  between the two definitions is the TYPE field in the KEY.
     1519       21        */
     1520       22        VMA$GET_LIST: PROC (VM_LISTKEY,BUF$,DCB#) ALTRET;
     1521       23        /***** Include files *****/
     1522       24          %INCLUDE B_ERRORS_C;
     1523     1151          %INCLUDE CP_6;
     1524     6710          %INCLUDE CP_6_SUBS;
     1525     7250          %INCLUDE VM_MACRO_C;
     1526     8518          %INCLUDE VM_SUBS_C;
     1527     8778          %INCLUDE VM_DATA_R;
     1528     9209            %include B$TABLES_C;
     1529     9317          %B$XL_UPPER(NAME=lower_UPPER);
     1530     9321        /***** Parameters *****/
     1531     9322          %VM_KEYTYPES;
     1532     9343          %VM_LISTKEY (STCLASS=" ");
     1533     9359    1   DCL BUF$ PTR;                           /* Ptr to buffer to read into */
     1534     9360    1   DCL DCB# UBIN WORD;                     /* Open to current folder */
     1535     9361        /***** External routines *****/
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:248  
     1536     9362    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
     1537     9363    1   DCL VMA$COMPRESS_BLANKS ENTRY(1);
     1538     9364        /***** Local variables *****/
     1539     9365    1   DCL BUF_ VECTOR AUTO;
     1540     9366    1   DCL LEN UBIN WORD AUTO;
     1541     9367    1   DCL TEMPBUF CHAR(%SIZ_LISTNAME) AUTO;   /* Same size as VM_LISTKEY.TEXT */
     1542     9368    1   DCL TYPE UBIN WORD AUTO;
     1543     9369        /***** Based structures *****/
     1544     9370          %B$TCB (STCLASS="BASED(B$TCB$)");
     1545     9373          %B$ALT;
     1546     9381        /***** Fpts *****/
     1547     9382          %FPT_DELREC (FPTN=DELETE_LIST,STCLASS=STATIC);
     1548     9401          %FPT_READ (FPTN=READ_LIST,KEYS=YES,STCLASS=STATIC);
     1549     9440          %FPT_READ (FPTN=READ_NEXT,KEYR=YES,KEYS=NO);
     1550     9479          %FPT_PRECORD (FPTN=MOVE_LIST,STCLASS=STATIC);
     1551     9500          %FPT_WRITE (FPTN=WRITE_LIST,ONEWKEY=YES,STCLASS=STATIC);
     1552     9531        /***** Mail structures *****/
     1553     9532          %VM_ADD_HEAD (STCLASS="BASED(BUF$)");
     1554     9561        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:249  
     1555     9562        /*
     1556     9563             ***** Initialization ...
     1557     9564        */
     1558     9565    1       CALL SETUP_KEY;
     1559     9566    1   READ_AGAIN:
     1560     9567    1       CALL SETUP_BUFFER;
     1561     9568    1       READ_LIST.V.DCB# = DCB#;
     1562     9569    1       READ_LIST.KEY_ = VECTOR(VM_LISTKEY);
     1563     9570    1       READ_LIST.BUF_ = BUF_;
     1564     9571    1       CALL M$READ (READ_LIST) ALTRET(E_READ);
     1565     9572    1       RETURN;
     1566     9573        /**/
     1567     9574    1   E_READ:
     1568     9575    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD
     1569     9576    1       THEN
     1570     9577    2       DO;                          /* Enlarge the segment and try again */
     1571     9578    2           IF BUF$ = VM_ADDLIST$ THEN CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_,1024)
              9578                    ALTRET(E_PMME);
     1572     9579    2           ELSE
     1573     9580    2               CALL VMA$ENLARGE_SEGMENT (VM_WORK_,1024) ALTRET(E_PMME);
     1574     9581    2           GOTO READ_AGAIN;
     1575     9582    2       END;
     1576     9583    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOFILE
     1577     9584    1       THEN
     1578     9585    2       DO;                          /* Report that folder doesn't exist */
     1579     9586    2           ALTRETURN;
     1580     9587    2       END;
     1581     9588        /**/
     1582     9589    1   E_PMME:
     1583     9590    1       ALTRETURN;
     1584     9591        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:250  
     1585     9592        /*F*
     1586     9593             NAME: VMA$GET_LIST_NEXT
     1587     9594             PURPOSE:
     1588     9595                   To read the next LIST definition after the one specified.
     1589     9596             DESCRIPTION:
     1590     9597                   This routine will read the next LIST definition record
     1591     9598                   after the one specified in VM_LISTKEY. VM_LISTKEY after
     1592     9599                   the read will contain the new LIST name. Therefore,
     1593     9600                   VM_LISTKEY may not be a constant.
     1594     9601        */
     1595     9602    1   VMA$GET_LIST_NEXT: ENTRY (VM_LISTKEY,BUF$,DCB#) ALTRET;
     1596     9603        /*
     1597     9604             ***** Initialization ...
     1598     9605        */
     1599     9606    1       CALL SETUP_BUFFER;
     1600     9607    1       CALL SETUP_KEY;
     1601     9608        /*
     1602     9609             ***** Save the type of VM_LISTKEY.
     1603     9610                   Since this routine handles VM_TYPE_LIST and
     1604     9611                   VM_TYPE_USER it is necessary to know which type
     1605     9612                   was requested in order to determine when a record
     1606     9613                   has been read that does not match the requested type ...
     1607     9614        */
     1608     9615    1       TYPE = VM_LISTKEY.TYPE;
     1609     9616        /*
     1610     9617             ***** Position to the specified record ...
     1611     9618        */
     1612     9619    1       MOVE_LIST.V.DCB# = DCB#;
     1613     9620    1       MOVE_LIST.KEY_ = VECTOR(VM_LISTKEY);
     1614     9621    1       MOVE_LIST.V.KEYS# = %YES#;
     1615     9622    1       MOVE_LIST.V.N# = 0;               /* Position to specified key */
     1616     9623    1       CALL M$PRECORD (MOVE_LIST)
     1617     9624    2       WHENRETURN DO;
     1618     9625    2           MOVE_LIST.V.KEYS# = %NO#; /* if there, position to the one after it */
     1619     9626    2           MOVE_LIST.V.N# = 1;
     1620     9627    3           CALL M$PRECORD (MOVE_LIST) WHENALTRETURN DO; END;
     1621     9628    2       END;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:251  
     1622     9629    1       READ_NEXT.V.DCB# = DCB#;
     1623     9630    1       READ_NEXT.KEY_ = VECTOR(VM_LISTKEY);
     1624     9631    1       READ_NEXT.BUF_ = BUF_;
     1625     9632        /*
     1626     9633             ***** Blank out the key ...
     1627     9634        */
     1628     9635    1       VM_LISTKEY.COUNT = LENGTHC(VM_LISTKEY.TEXT);
     1629     9636    1       VM_LISTKEY.TEXT = ' ';
     1630     9637    1       CALL M$READ (READ_NEXT) ALTRET(E_READ);
     1631     9638        /*
     1632     9639             ***** If the type of this record does not match the
     1633     9640                   type of the requested record, then altreturn ...
     1634     9641        */
     1635     9642    1       IF TYPE ~= VM_LISTKEY.TYPE
     1636     9643    1       THEN
     1637     9644    2       DO;
     1638     9645    2           VM_LISTKEY.TYPE = TYPE; /* Restore the type */
     1639     9646    2           VM_LISTKEY.TEXT = ' ';
     1640     9647    2           VM_LISTKEY.COUNT = LENGTHC(VM_LISTKEY);
     1641     9648    2           ALTRETURN;
     1642     9649    2       END;
     1643     9650        /**/
     1644     9651    1       RETURN;
     1645     9652        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:252  
     1646     9653        /*F*
     1647     9654             NAME: VMA$PUT_LIST
     1648     9655             PURPOSE:
     1649     9656                  To write the specified LIST definition into the correct folder.
     1650     9657             DESCRIPTION:
     1651     9658                  This routine will write the definition for a LIST into the
     1652     9659                  currently open folder.
     1653     9660        */
     1654     9661    1   VMA$PUT_LIST: ENTRY (VM_LISTKEY,BUF$,DCB#) ALTRET;
     1655     9662        /*
     1656     9663             ***** Initialization ...
     1657     9664        */
     1658     9665    1       CALL SETUP_BUFFER;
     1659     9666    1       CALL SETUP_KEY;
     1660     9667    1       WRITE_LIST.BUF_ = BUF_;
     1661     9668    1       WRITE_LIST.BUF_.BOUND = (VM_ADD_HEAD.ADDRESS_SIZE * 4) - 1;
     1662     9669        /*
     1663     9670             ***** Write it ...
     1664     9671        */
     1665     9672    1       WRITE_LIST.V.DCB# = DCB#;
     1666     9673    1       WRITE_LIST.KEY_ = VECTOR(VM_LISTKEY);
     1667     9674    1       CALL M$WRITE (WRITE_LIST) ALTRET(E_WRITE);
     1668     9675    1       RETURN;
     1669     9676        /**/
     1670     9677    1   E_WRITE:
     1671     9678    1       ALTRETURN;
     1672     9679        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:253  
     1673     9680        /*F*
     1674     9681             NAME: VMA$DEL_LIST
     1675     9682             PURPOSE:
     1676     9683                   To delete the specified LIST definition.
     1677     9684             DESCRIPTION:
     1678     9685                   This routine will delete the definition for the specified
     1679     9686                   LIST from the specified folder.
     1680     9687        */
     1681     9688    1   VMA$DEL_LIST: ENTRY (VM_LISTKEY,BUF$,DCB#) ALTRET;
     1682     9689        /*
     1683     9690             ***** Setup the correct key ...
     1684     9691        */
     1685     9692    1       CALL SETUP_KEY;
     1686     9693    1       DELETE_LIST.KEY_ = VECTOR(VM_LISTKEY);
     1687     9694        /*
     1688     9695             ***** Do it!
     1689     9696        */
     1690     9697    1       DELETE_LIST.V.DCB# = DCB#;
     1691     9698    1       CALL M$DELREC (DELETE_LIST) ALTRET(E_PMME);
     1692     9699    1       RETURN;
     1693     9700        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:254  
     1694     9701    1   SETUP_KEY: PROC;
     1695     9702        /*
     1696     9703             ***** Translate lower case to upper (just in case) ...
     1697     9704        */
     1698     9705    2       TEMPBUF = VM_LISTKEY.TEXT;
     1699     9706    2       CALL XLATE (VM_LISTKEY.TEXT,LOWER_UPPER,TEMPBUF);
     1700     9707    2       VM_LISTKEY.COUNT = LENGTHC(VM_LISTKEY.TEXT);
     1701     9708    2       CALL VMA$COMPRESS_BLANKS (ADDR(VM_LISTKEY));
     1702     9709    2       RETURN;
     1703     9710    2   END SETUP_KEY;
     1704     9711        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:255  
     1705     9712    1   SETUP_BUFFER: PROC;
     1706     9713    2   DCL TVEC_ VECTOR;
     1707     9714        /*
     1708     9715             ***** Determine the buffer to read into/write from ...
     1709     9716        */
     1710     9717    2       IF BUF$ = VM_ADDLIST$ THEN TVEC_ = VM_ADDLIST_;
     1711     9718    2       ELSE TVEC_ = VM_WORK_;
     1712     9719    2       BUF_ = TVEC_;
     1713     9720    2       VBOUND(BUF_) = POFFC(PINCRC(VBASE(TVEC_),VBOUND(TVEC_)),BUF$)-1;
     1714     9721    2       VBASE(BUF_) = BUF$;
     1715     9722    2       RETURN;
     1716     9723    2   END SETUP_BUFFER;
     1717     9724    1   END VMA$GET_LIST;
     1718     9725        %EOD;

PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:256  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$GET_LIST.

   Procedure VMA$GET_LIST requires 210 words for executable code.
   Procedure VMA$GET_LIST requires 66 words of local(AUTO) storage.

PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:257  

 Object Unit name= VMA$GET_LIST                               File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:03:41.04 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    60     74  VMA$GET_LIST
   12   Proc  even  none   210    322  VMA$GET_LIST
   13  RoData even  none    14     16  VMA$GET_LIST

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        3  VMA$GET_LIST
    12     53          yes     yes      Std        3  VMA$GET_LIST_NEXT
    12    160          yes     yes      Std        3  VMA$PUT_LIST
    12    215          yes     yes      Std        3  VMA$DEL_LIST
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:258  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       2 VMA$ENLARGE_SEGMENT
         yes           Std       1 VMA$COMPRESS_BLANKS
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA                 r    B$XL_UPPER$
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:259  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:260  


     1499        1        /*T***********************************************************/
     1500        2        /*T*                                                         */
     1501        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1502        4        /*T*                                                         */
     1503        5        /*T***********************************************************/
     1504        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1505        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1506        8        /*F*
     1507        9             NAME: VMA$GET_LIST
     1508       10             PURPOSE:
     1509       11                  To read the specified LIST definition into a data segment.
     1510       12             DESCRIPTION:
     1511       13                  The LIST definition will be read from the currently open folder
     1512       14                  into the data segment based on BUF$. The structure VM_ADD_HEAD
     1513       15                  describes the structure to be written/read.
     1514       16
     1515       17                  Since part of the USER definition is in the same form as
     1516       18                  a LIST definition, this routine may also be used to
     1517       19                  read a specified USER definition. The only difference
     1518       20                  between the two definitions is the TYPE field in the KEY.
     1519       21        */
     1520       22        VMA$GET_LIST: PROC (VM_LISTKEY,BUF$,DCB#) ALTRET;

     22 12 000000   000000 700200 xent  VMA$GET_LIST TSX0  ! X66_AUTO_3
        12 000001   000102 000003                    ZERO    66,3

     1521       23        /***** Include files *****/
     1522       24          %INCLUDE B_ERRORS_C;
     1523     1151          %INCLUDE CP_6;
     1524     6710          %INCLUDE CP_6_SUBS;
     1525     7250          %INCLUDE VM_MACRO_C;
     1526     8518          %INCLUDE VM_SUBS_C;
     1527     8778          %INCLUDE VM_DATA_R;
     1528     9209            %include B$TABLES_C;
     1529     9317          %B$XL_UPPER(NAME=lower_UPPER);
     1530     9321        /***** Parameters *****/
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:261  
     1531     9322          %VM_KEYTYPES;
     1532     9343          %VM_LISTKEY (STCLASS=" ");
     1533     9359    1   DCL BUF$ PTR;                           /* Ptr to buffer to read into */
     1534     9360    1   DCL DCB# UBIN WORD;                     /* Open to current folder */
     1535     9361        /***** External routines *****/
     1536     9362    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
     1537     9363    1   DCL VMA$COMPRESS_BLANKS ENTRY(1);
     1538     9364        /***** Local variables *****/
     1539     9365    1   DCL BUF_ VECTOR AUTO;
     1540     9366    1   DCL LEN UBIN WORD AUTO;
     1541     9367    1   DCL TEMPBUF CHAR(%SIZ_LISTNAME) AUTO;   /* Same size as VM_LISTKEY.TEXT */
     1542     9368    1   DCL TYPE UBIN WORD AUTO;
     1543     9369        /***** Based structures *****/
     1544     9370          %B$TCB (STCLASS="BASED(B$TCB$)");
     1545     9373          %B$ALT;
     1546     9381        /***** Fpts *****/
     1547     9382          %FPT_DELREC (FPTN=DELETE_LIST,STCLASS=STATIC);
     1548     9401          %FPT_READ (FPTN=READ_LIST,KEYS=YES,STCLASS=STATIC);
     1549     9440          %FPT_READ (FPTN=READ_NEXT,KEYR=YES,KEYS=NO);
     1550     9479          %FPT_PRECORD (FPTN=MOVE_LIST,STCLASS=STATIC);
     1551     9500          %FPT_WRITE (FPTN=WRITE_LIST,ONEWKEY=YES,STCLASS=STATIC);
     1552     9531        /***** Mail structures *****/
     1553     9532          %VM_ADD_HEAD (STCLASS="BASED(BUF$)");
     1554     9561        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:262  
     1555     9562        /*
     1556     9563             ***** Initialization ...
     1557     9564        */
     1558     9565    1       CALL SETUP_KEY;

   9565 12 000002   000234 701000 12                 TSX1    SETUP_KEY
        12 000003   000000 011000                    NOP     0

     1559     9566    1   READ_AGAIN:
     1560     9567    1       CALL SETUP_BUFFER;

   9567 12 000004   000263 701000 12    READ_AGAIN   TSX1    SETUP_BUFFER
        12 000005   000000 011000                    NOP     0

     1561     9568    1       READ_LIST.V.DCB# = DCB#;

   9568 12 000006   200005 470500                    LDP0    @DCB#,,AUTO
        12 000007   000000 720100                    LXL0    0,,PR0
        12 000010   000022 740000 11                 STX0    READ_LIST+8

     1562     9569    1       READ_LIST.KEY_ = VECTOR(VM_LISTKEY);

   9569 12 000011   000000 235000 13                 LDA     0
        12 000012   200003 236100                    LDQ     @VM_LISTKEY,,AUTO
        12 000013   000014 757000 11                 STAQ    READ_LIST+2

     1563     9570    1       READ_LIST.BUF_ = BUF_;

   9570 12 000014   200006 237100                    LDAQ    BUF_,,AUTO
        12 000015   000016 757000 11                 STAQ    READ_LIST+4

     1564     9571    1       CALL M$READ (READ_LIST) ALTRET(E_READ);

   9571 12 000016   000012 630400 11                 EPPR0   READ_LIST
        12 000017   440000 713400                    CLIMB   alt,read
        12 000020   401400 401760                    pmme    nvectors=4
        12 000021   000023 702000 12                 TSX2    E_READ
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:263  

     1565     9572    1       RETURN;

   9572 12 000022   000000 702200 xent               TSX2  ! X66_ARET

     1566     9573        /**/
     1567     9574    1   E_READ:
     1568     9575    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD

   9575 12 000023   000000 470400 xsym  E_READ       LDP0    B$TCB$
        12 000024   000000 471500                    LDP1    0,,PR0
        12 000025   100102 236100                    LDQ     66,,PR1
        12 000026   377770 376007                    ANQ     131064,DL
        12 000027   000070 116007                    CMPQ    56,DL
        12 000030   000047 601000 12                 TNZ     s:9583

     1569     9576    1       THEN
     1570     9577    2       DO;                          /* Enlarge the segment and try again */

     1571     9578    2           IF BUF$ = VM_ADDLIST$ THEN CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_,1024)
              9578                    ALTRET(E_PMME);

   9578 12 000031   200004 473500                    LDP3    @BUF$,,AUTO
        12 000032   300000 236100                    LDQ     0,,PR3
        12 000033   000000 116000 xsym               CMPQ    VM_ADDLIST$
        12 000034   000042 601000 12                 TNZ     s:9580

   9578 12 000035   000003 630400 13                 EPPR0   3
        12 000036   000001 631400 13                 EPPR1   1
        12 000037   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        12 000040   000052 702000 12                 TSX2    E_PMME
        12 000041   000046 710000 12                 TRA     s:9581

     1572     9579    2           ELSE
     1573     9580    2               CALL VMA$ENLARGE_SEGMENT (VM_WORK_,1024) ALTRET(E_PMME);

   9580 12 000042   000005 630400 13                 EPPR0   5
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:264  
        12 000043   000001 631400 13                 EPPR1   1
        12 000044   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        12 000045   000052 702000 12                 TSX2    E_PMME

     1574     9581    2           GOTO READ_AGAIN;

   9581 12 000046   000004 710000 12                 TRA     READ_AGAIN

     1575     9582    2       END;
     1576     9583    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOFILE

   9583 12 000047   001610 116007                    CMPQ    904,DL
        12 000050   000052 601000 12                 TNZ     E_PMME

     1577     9584    1       THEN
     1578     9585    2       DO;                          /* Report that folder doesn't exist */

     1579     9586    2           ALTRETURN;

   9586 12 000051   000000 702200 xent               TSX2  ! X66_AALT

     1580     9587    2       END;
     1581     9588        /**/
     1582     9589    1   E_PMME:
     1583     9590    1       ALTRETURN;

   9590 12 000052   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

     1584     9591        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:265  
     1585     9592        /*F*
     1586     9593             NAME: VMA$GET_LIST_NEXT
     1587     9594             PURPOSE:
     1588     9595                   To read the next LIST definition after the one specified.
     1589     9596             DESCRIPTION:
     1590     9597                   This routine will read the next LIST definition record
     1591     9598                   after the one specified in VM_LISTKEY. VM_LISTKEY after
     1592     9599                   the read will contain the new LIST name. Therefore,
     1593     9600                   VM_LISTKEY may not be a constant.
     1594     9601        */
     1595     9602    1   VMA$GET_LIST_NEXT: ENTRY (VM_LISTKEY,BUF$,DCB#) ALTRET;

   9602 12 000053   000000 700200 xent  VMA$GET_LIS* TSX0  ! X66_AUTO_3
        12 000054   000102 000003                    ZERO    66,3

     1596     9603        /*
     1597     9604             ***** Initialization ...
     1598     9605        */
     1599     9606    1       CALL SETUP_BUFFER;

   9606 12 000055   000263 701000 12                 TSX1    SETUP_BUFFER
        12 000056   000000 011000                    NOP     0

     1600     9607    1       CALL SETUP_KEY;

   9607 12 000057   000234 701000 12                 TSX1    SETUP_KEY
        12 000060   000000 011000                    NOP     0

     1601     9608        /*
     1602     9609             ***** Save the type of VM_LISTKEY.
     1603     9610                   Since this routine handles VM_TYPE_LIST and
     1604     9611                   VM_TYPE_USER it is necessary to know which type
     1605     9612                   was requested in order to determine when a record
     1606     9613                   has been read that does not match the requested type ...
     1607     9614        */
     1608     9615    1       TYPE = VM_LISTKEY.TYPE;

PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:266  
   9615 12 000061   200003 470500                    LDP0    @VM_LISTKEY,,AUTO
        12 000062   000100 101500                    MRL     fill='000'O
        12 000063   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1
        12 000064   200073 000004                    ADSC9   TYPE,,AUTO               cn=0,n=4

     1609     9616        /*
     1610     9617             ***** Position to the specified record ...
     1611     9618        */
     1612     9619    1       MOVE_LIST.V.DCB# = DCB#;

   9619 12 000065   200005 471500                    LDP1    @DCB#,,AUTO
        12 000066   100000 720100                    LXL0    0,,PR1
        12 000067   000054 740000 11                 STX0    MOVE_LIST+6

     1613     9620    1       MOVE_LIST.KEY_ = VECTOR(VM_LISTKEY);

   9620 12 000070   000000 235000 13                 LDA     0
        12 000071   200003 236100                    LDQ     @VM_LISTKEY,,AUTO
        12 000072   000050 757000 11                 STAQ    MOVE_LIST+2

     1614     9621    1       MOVE_LIST.V.KEYS# = %YES#;

   9621 12 000073   400000 236007                    LDQ     -131072,DL
        12 000074   000054 256000 11                 ORSQ    MOVE_LIST+6

     1615     9622    1       MOVE_LIST.V.N# = 0;               /* Position to specified key */

   9622 12 000075   000055 450000 11                 STZ     MOVE_LIST+7

     1616     9623    1       CALL M$PRECORD (MOVE_LIST)

   9623 12 000076   000046 630400 11                 EPPR0   MOVE_LIST
        12 000077   440003 713400                    CLIMB   alt,+16387
        12 000100   401000 401760                    pmme    nvectors=3
        12 000101   000113 702000 12                 TSX2    s:9629

     1617     9624    2       WHENRETURN DO;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:267  

     1618     9625    2           MOVE_LIST.V.KEYS# = %NO#; /* if there, position to the one after it */

   9625 12 000102   000007 236000 13                 LDQ     7
        12 000103   000054 356000 11                 ANSQ    MOVE_LIST+6

     1619     9626    2           MOVE_LIST.V.N# = 1;

   9626 12 000104   000001 235007                    LDA     1,DL
        12 000105   000055 755000 11                 STA     MOVE_LIST+7

     1620     9627    3           CALL M$PRECORD (MOVE_LIST) WHENALTRETURN DO; END;

   9627 12 000106   000046 630400 11                 EPPR0   MOVE_LIST
        12 000107   440003 713400                    CLIMB   alt,+16387
        12 000110   401000 401760                    pmme    nvectors=3
        12 000111   000113 702000 12                 TSX2    s:9629
        12 000112   000113 710000 12                 TRA     s:9629

     1621     9628    2       END;

     1622     9629    1       READ_NEXT.V.DCB# = DCB#;

   9629 12 000113   200005 470500                    LDP0    @DCB#,,AUTO
        12 000114   000000 720100                    LXL0    0,,PR0
        12 000115   000040 740000 11                 STX0    READ_NEXT+8

     1623     9630    1       READ_NEXT.KEY_ = VECTOR(VM_LISTKEY);

   9630 12 000116   000000 235000 13                 LDA     0
        12 000117   200003 236100                    LDQ     @VM_LISTKEY,,AUTO
        12 000120   000032 757000 11                 STAQ    READ_NEXT+2

     1624     9631    1       READ_NEXT.BUF_ = BUF_;

   9631 12 000121   200006 237100                    LDAQ    BUF_,,AUTO
        12 000122   000034 757000 11                 STAQ    READ_NEXT+4
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:268  

     1625     9632        /*
     1626     9633             ***** Blank out the key ...
     1627     9634        */
     1628     9635    1       VM_LISTKEY.COUNT = LENGTHC(VM_LISTKEY.TEXT);

   9635 12 000123   200003 471500                    LDP1    @VM_LISTKEY,,AUTO
        12 000124   000100 101400                    MRL     fill='000'O
        12 000125   000011 000004 13                 ADSC9   9                        cn=0,n=4
        12 000126   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     1629     9636    1       VM_LISTKEY.TEXT = ' ';

   9636 12 000127   040100 100400                    MLR     fill='040'O
        12 000130   000012 000001 13                 ADSC9   10                       cn=0,n=1
        12 000131   100000 400310                    ADSC9   0,,PR1                   cn=2,n=200

     1630     9637    1       CALL M$READ (READ_NEXT) ALTRET(E_READ);

   9637 12 000132   000030 630400 11                 EPPR0   READ_NEXT
        12 000133   440000 713400                    CLIMB   alt,read
        12 000134   401400 401760                    pmme    nvectors=4
        12 000135   000023 702000 12                 TSX2    E_READ

     1631     9638        /*
     1632     9639             ***** If the type of this record does not match the
     1633     9640                   type of the requested record, then altreturn ...
     1634     9641        */
     1635     9642    1       IF TYPE ~= VM_LISTKEY.TYPE

   9642 12 000136   200003 470500                    LDP0    @VM_LISTKEY,,AUTO
        12 000137   000100 101500                    MRL     fill='000'O
        12 000140   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1
        12 000141   200100 000004                    ADSC9   TVEC_+2,,AUTO            cn=0,n=4
        12 000142   200100 236100                    LDQ     TVEC_+2,,AUTO
        12 000143   200073 116100                    CMPQ    TYPE,,AUTO
        12 000144   000157 600000 12                 TZE     s:9651
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:269  

     1636     9643    1       THEN
     1637     9644    2       DO;

     1638     9645    2           VM_LISTKEY.TYPE = TYPE; /* Restore the type */

   9645 12 000145   000100 101500                    MRL     fill='000'O
        12 000146   200073 000004                    ADSC9   TYPE,,AUTO               cn=0,n=4
        12 000147   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1

     1639     9646    2           VM_LISTKEY.TEXT = ' ';

   9646 12 000150   040100 100400                    MLR     fill='040'O
        12 000151   000012 000001 13                 ADSC9   10                       cn=0,n=1
        12 000152   000000 400310                    ADSC9   0,,PR0                   cn=2,n=200

     1640     9647    2           VM_LISTKEY.COUNT = LENGTHC(VM_LISTKEY);

   9647 12 000153   000100 101400                    MRL     fill='000'O
        12 000154   000013 000004 13                 ADSC9   11                       cn=0,n=4
        12 000155   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     1641     9648    2           ALTRETURN;

   9648 12 000156   000000 702200 xent               TSX2  ! X66_AALT

     1642     9649    2       END;
     1643     9650        /**/
     1644     9651    1       RETURN;

   9651 12 000157   000000 702200 xent               TSX2  ! X66_ARET

     1645     9652        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:270  
     1646     9653        /*F*
     1647     9654             NAME: VMA$PUT_LIST
     1648     9655             PURPOSE:
     1649     9656                  To write the specified LIST definition into the correct folder.
     1650     9657             DESCRIPTION:
     1651     9658                  This routine will write the definition for a LIST into the
     1652     9659                  currently open folder.
     1653     9660        */
     1654     9661    1   VMA$PUT_LIST: ENTRY (VM_LISTKEY,BUF$,DCB#) ALTRET;

   9661 12 000160   000000 700200 xent  VMA$PUT_LIST TSX0  ! X66_AUTO_3
        12 000161   000102 000003                    ZERO    66,3

     1655     9662        /*
     1656     9663             ***** Initialization ...
     1657     9664        */
     1658     9665    1       CALL SETUP_BUFFER;

   9665 12 000162   000263 701000 12                 TSX1    SETUP_BUFFER
        12 000163   000000 011000                    NOP     0

     1659     9666    1       CALL SETUP_KEY;

   9666 12 000164   000234 701000 12                 TSX1    SETUP_KEY
        12 000165   000000 011000                    NOP     0

     1660     9667    1       WRITE_LIST.BUF_ = BUF_;

   9667 12 000166   200006 237100                    LDAQ    BUF_,,AUTO
        12 000167   000064 757000 11                 STAQ    WRITE_LIST+4

     1661     9668    1       WRITE_LIST.BUF_.BOUND = (VM_ADD_HEAD.ADDRESS_SIZE * 4) - 1;

   9668 12 000170   200004 470500                    LDP0    @BUF$,,AUTO
        12 000171   000000 471500                    LDP1    0,,PR0
        12 000172   100000 236100                    LDQ     0,,PR1
        12 000173   000002 736000                    QLS     2
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:271  
        12 000174   000001 136007                    SBLQ    1,DL
        12 000175   000020 736000                    QLS     16
        12 000176   000064 676000 11                 ERQ     WRITE_LIST+4
        12 000177   000014 376000 13                 ANQ     12
        12 000200   000064 656000 11                 ERSQ    WRITE_LIST+4

     1662     9669        /*
     1663     9670             ***** Write it ...
     1664     9671        */
     1665     9672    1       WRITE_LIST.V.DCB# = DCB#;

   9672 12 000201   200005 471500                    LDP1    @DCB#,,AUTO
        12 000202   100000 720100                    LXL0    0,,PR1
        12 000203   000070 740000 11                 STX0    WRITE_LIST+8

     1666     9673    1       WRITE_LIST.KEY_ = VECTOR(VM_LISTKEY);

   9673 12 000204   000000 235000 13                 LDA     0
        12 000205   200003 236100                    LDQ     @VM_LISTKEY,,AUTO
        12 000206   000062 757000 11                 STAQ    WRITE_LIST+2

     1667     9674    1       CALL M$WRITE (WRITE_LIST) ALTRET(E_WRITE);

   9674 12 000207   000060 630400 11                 EPPR0   WRITE_LIST
        12 000210   440001 713400                    CLIMB   alt,write
        12 000211   401400 401760                    pmme    nvectors=4
        12 000212   000214 702000 12                 TSX2    E_WRITE

     1668     9675    1       RETURN;

   9675 12 000213   000000 702200 xent               TSX2  ! X66_ARET

     1669     9676        /**/
     1670     9677    1   E_WRITE:
     1671     9678    1       ALTRETURN;

   9678 12 000214   000000 702200 xent  E_WRITE      TSX2  ! X66_AALT
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:272  

     1672     9679        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:273  
     1673     9680        /*F*
     1674     9681             NAME: VMA$DEL_LIST
     1675     9682             PURPOSE:
     1676     9683                   To delete the specified LIST definition.
     1677     9684             DESCRIPTION:
     1678     9685                   This routine will delete the definition for the specified
     1679     9686                   LIST from the specified folder.
     1680     9687        */
     1681     9688    1   VMA$DEL_LIST: ENTRY (VM_LISTKEY,BUF$,DCB#) ALTRET;

   9688 12 000215   000000 700200 xent  VMA$DEL_LIST TSX0  ! X66_AUTO_3
        12 000216   000102 000003                    ZERO    66,3

     1682     9689        /*
     1683     9690             ***** Setup the correct key ...
     1684     9691        */
     1685     9692    1       CALL SETUP_KEY;

   9692 12 000217   000234 701000 12                 TSX1    SETUP_KEY
        12 000220   000000 011000                    NOP     0

     1686     9693    1       DELETE_LIST.KEY_ = VECTOR(VM_LISTKEY);

   9693 12 000221   000000 235000 13                 LDA     0
        12 000222   200003 236100                    LDQ     @VM_LISTKEY,,AUTO
        12 000223   000002 757000 11                 STAQ    DELETE_LIST+2

     1687     9694        /*
     1688     9695             ***** Do it!
     1689     9696        */
     1690     9697    1       DELETE_LIST.V.DCB# = DCB#;

   9697 12 000224   200005 470500                    LDP0    @DCB#,,AUTO
        12 000225   000000 720100                    LXL0    0,,PR0
        12 000226   000010 740000 11                 STX0    DELETE_LIST+8

     1691     9698    1       CALL M$DELREC (DELETE_LIST) ALTRET(E_PMME);
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:274  

   9698 12 000227   000000 630400 11                 EPPR0   DELETE_LIST
        12 000230   440002 713400                    CLIMB   alt,+16386
        12 000231   401400 401760                    pmme    nvectors=4
        12 000232   000052 702000 12                 TSX2    E_PMME

     1692     9699    1       RETURN;

   9699 12 000233   000000 702200 xent               TSX2  ! X66_ARET

     1693     9700        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:275  
     1694     9701    1   SETUP_KEY: PROC;

   9701 12 000234   200074 741300       SETUP_KEY    STX1  ! TYPE+1,,AUTO

     1695     9702        /*
     1696     9703             ***** Translate lower case to upper (just in case) ...
     1697     9704        */
     1698     9705    2       TEMPBUF = VM_LISTKEY.TEXT;

   9705 12 000235   200003 470500                    LDP0    @VM_LISTKEY,,AUTO
        12 000236   040100 100500                    MLR     fill='040'O
        12 000237   000000 400310                    ADSC9   0,,PR0                   cn=2,n=200
        12 000240   200011 000310                    ADSC9   TEMPBUF,,AUTO            cn=0,n=200

     1699     9706    2       CALL XLATE (VM_LISTKEY.TEXT,LOWER_UPPER,TEMPBUF);

   9706 12 000241   000000 471400 xsym               LDP1    B$XL_UPPER$
        12 000242   040100 160500                    MVT     fill='040'O
        12 000243   200011 000310                    ADSC9   TEMPBUF,,AUTO            cn=0,n=200
        12 000244   000000 400310                    ADSC9   0,,PR0                   cn=2,n=200
        12 000245   100000 000100                    ARG     0,,PR1

     1700     9707    2       VM_LISTKEY.COUNT = LENGTHC(VM_LISTKEY.TEXT);

   9707 12 000246   000100 101400                    MRL     fill='000'O
        12 000247   000011 000004 13                 ADSC9   9                        cn=0,n=4
        12 000250   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     1701     9708    2       CALL VMA$COMPRESS_BLANKS (ADDR(VM_LISTKEY));

   9708 12 000251   200003 236100                    LDQ     @VM_LISTKEY,,AUTO
        12 000252   200100 756100                    STQ     TVEC_+2,,AUTO
        12 000253   200100 633500                    EPPR3   TVEC_+2,,AUTO
        12 000254   200101 453500                    STP3    TVEC_+3,,AUTO
        12 000255   200101 630500                    EPPR0   TVEC_+3,,AUTO
        12 000256   000015 631400 13                 EPPR1   13
        12 000257   000000 701000 xent               TSX1    VMA$COMPRESS_BLANKS
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:276  
        12 000260   000000 011000                    NOP     0

     1702     9709    2       RETURN;

   9709 12 000261   200074 221300                    LDX1  ! TYPE+1,,AUTO
        12 000262   000001 702211                    TSX2  ! 1,X1

     1703     9710    2   END SETUP_KEY;
     1704     9711        %EJECT;
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:277  
     1705     9712    1   SETUP_BUFFER: PROC;

   9712 12 000263   200074 741300       SETUP_BUFFER STX1  ! TYPE+1,,AUTO

     1706     9713    2   DCL TVEC_ VECTOR;
     1707     9714        /*
     1708     9715             ***** Determine the buffer to read into/write from ...
     1709     9716        */
     1710     9717    2       IF BUF$ = VM_ADDLIST$ THEN TVEC_ = VM_ADDLIST_;

   9717 12 000264   200004 470500                    LDP0    @BUF$,,AUTO
        12 000265   000000 236100                    LDQ     0,,PR0
        12 000266   000000 116000 xsym               CMPQ    VM_ADDLIST$
        12 000267   000273 601000 12                 TNZ     s:9718

   9717 12 000270   000000 237000 xsym               LDAQ    VM_ADDLIST_
        12 000271   200076 757100                    STAQ    TVEC_,,AUTO
        12 000272   000275 710000 12                 TRA     s:9719

     1711     9718    2       ELSE TVEC_ = VM_WORK_;

   9718 12 000273   000000 237000 xsym               LDAQ    VM_WORK_
        12 000274   200076 757100                    STAQ    TVEC_,,AUTO

     1712     9719    2       BUF_ = TVEC_;

   9719 12 000275   200076 237100                    LDAQ    TVEC_,,AUTO
        12 000276   200006 757100                    STAQ    BUF_,,AUTO

     1713     9720    2       VBOUND(BUF_) = POFFC(PINCRC(VBASE(TVEC_),VBOUND(TVEC_)),BUF$)-1;

   9720 12 000277   200076 236100                    LDQ     TVEC_,,AUTO
        12 000300   000020 772000                    QRL     16
        12 000301   000020 736000                    QLS     16
        12 000302   200077 036100                    ADLQ    TVEC_+1,,AUTO
        12 000303   000020 772000                    QRL     16
        12 000304   200100 756100                    STQ     TVEC_+2,,AUTO
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:278  
        12 000305   000000 236100                    LDQ     0,,PR0
        12 000306   000020 772000                    QRL     16
        12 000307   200101 756100                    STQ     TVEC_+3,,AUTO
        12 000310   200100 236100                    LDQ     TVEC_+2,,AUTO
        12 000311   200101 136100                    SBLQ    TVEC_+3,,AUTO
        12 000312   000001 136007                    SBLQ    1,DL
        12 000313   000020 736000                    QLS     16
        12 000314   200006 676100                    ERQ     BUF_,,AUTO
        12 000315   000014 376000 13                 ANQ     12
        12 000316   200006 656100                    ERSQ    BUF_,,AUTO

     1714     9721    2       VBASE(BUF_) = BUF$;

   9721 12 000317   000000 236100                    LDQ     0,,PR0
        12 000320   200007 756100                    STQ     BUF_+1,,AUTO

     1715     9722    2       RETURN;

   9722 12 000321   000001 702211                    TSX2  ! 1,X1

DELETE_LIST
 Sect OctLoc
  11     000   000001 777640   000010 006000   000000 177640   000000 006014    ................
  11     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     010   000000 000000   000000 000000                                    ........

READ_LIST
 Sect OctLoc
  11     012   000005 777640   000022 006000   000000 177640   000000 006014    ................
  11     016   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     022   000000 600000   000000 000000   000000 000000   000000 000000    ................
  11     026   000000 000000   000000 000000                                    ........

READ_NEXT
 Sect OctLoc
  11     030   000005 777640   000040 006000   000000 177640   000000 006014    ..... ..........
  11     034   000000 177640   000000 006014   000000 177640   000000 006014    ................
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:279  
  11     040   000000 500000   000000 000000   000000 000000   000000 000000    ................
  11     044   000000 000000   000000 000000                                    ........

MOVE_LIST
 Sect OctLoc
  11     046   000003 777640   000054 006000   000000 177640   000000 006014    .....,..........
  11     052   000000 177640   000000 006014   000000 000000   000000 000000    ................
  11     056   000000 000000   0***** ******                                    ........

WRITE_LIST
 Sect OctLoc
  11     060   000003 777640   000070 006000   000000 177640   000000 006014    .....8..........
  11     064   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     070   000000 400400   000000 000000   000000 000000   000000 000000    ................

(unnamed)
 Sect OctLoc
  13     000   000062 377640   000002 000000   000000 002000   000000 006000    .2..............
  13     004   000002 006000   000000 006000   000002 006000   777777 377777    ................
  13     010   000000 006014   000000 000310   040040 040040   000000 000312    ........    ....
  13     014   777777 600000   000001 000000                                    ........
     1716     9723    2   END SETUP_BUFFER;
     1717     9724    1   END VMA$GET_LIST;
     1718     9725        %EOD;

PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:280  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$GET_LIST.
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:281  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$GET_LIST

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 DELETE_LIST               46-0-0/d STRC(360)   r     1 MOVE_LIST
    12-0-0/d STRC(504)   r     1 READ_LIST                 30-0-0/d STRC(504)   r     1 READ_NEXT
    60-0-0/d STRC(432)   r     1 WRITE_LIST

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BUF$                      5-0-0/w PTR         r     1 @DCB#
     3-0-0/w PTR         r     1 @VM_LISTKEY               *0-0-0/w PTR         r     1 BUF$
     6-0-0/d VECT        r     1 BUF_                      *0-0-0/w UBIN        r     1 DCB#
    10-0-0/w UBIN              1 LEN                       11-0-0/c CHAR(200)   r     1 TEMPBUF
    76-0-0/d VECT        r     1 TVEC_                     73-0-0/w UBIN        r     1 TYPE
    *0-0-0/c STRC(1818)  r     1 VM_LISTKEY

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/c ASTR(9)     r     1 ERRMSG_FID
     0-0-0/w UBIN              1 M$DO_NUM                   0-0-0/w UBIN              1 M$LO_NUM
     0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM         0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM
     0-0-0/w UBIN              1 M$MAIL_FILE_NUM            0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM
     0-0-0/w UBIN              1 M$ME_NUM                   0-0-0/w UBIN              1 M$NODE_NUM
     0-0-0/w UBIN              1 M$SI_NUM                   0-0-0/w UBIN              1 M$WORK_NUM
     0-0-0/w PTR         r     1 VM_ADDLIST$                0-0-0/d VECT        r     1 VM_ADDLIST_
     0-0-0/w PTR               1 VM_ADDREC$                 0-0-0/d VECT              1 VM_ADDREC_
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:282  
     0-0-0/w PTR               1 VM_COPY$                   0-0-0/d VECT              1 VM_COPY_
     0-0-0/w PTR               1 VM_ENCLLIST$               0-0-0/d VECT              1 VM_ENCLLIST_
     0-0-0/w PTR               1 VM_ENCLREC$                0-0-0/d VECT              1 VM_ENCLREC_
     0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME       0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME
     0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS       0-0-0/w PTR               1 VM_HEADER$
     0-0-0/d VECT              1 VM_HEADER_                 0-0-0/d VECT              1 VM_HEADER_INIT_
     0-0-0/w PTR               1 VM_INPUT$                  0-0-0/d VECT              1 VM_INPUT_
     0-0-0/c STRC(72)          1 VM_MAILCG_NAME             0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA
     0-0-0/c STRC(72)          1 VM_MAIL_ACCT               0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME
     0-0-0/w PTR               1 VM_PARSEAREA$              0-0-0/d VECT              1 VM_PARSEAREA_
     0-0-0/w PTR               1 VM_PROFILE$                0-0-0/d VECT              1 VM_PROFILE_
     0-0-0/w PTR               1 VM_SELECT$                 0-0-0/d VECT              1 VM_SELECT_
     0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME          0-0-0/c CHAR(8)           1 VM_SITENAME
     0-0-0/w PTR               1 VM_WORK$                   0-0-0/d VECT        r     1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d STRC(4608)  r     1 LOWER_UPPER                0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/w STRC(252)   r     1 VM_ADD_HEAD                0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$GET_LIST requires 210 words for executable code.
   Procedure VMA$GET_LIST requires 66 words of local(AUTO) storage.
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:283  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:284  
          MINI XREF LISTING

B$ALT.CODE
      9375**DCL      9375--REDEF    9376--REDEF    9376--REDEF
B$ALT.ERR.CODE
      9377**DCL      9575>>IF       9583>>IF
B$ALT.ERR.ERR#
      9377**DCL      9377--REDEF
B$ALT.EVID
      9376**DCL      9376--REDEF    9376--REDEF
B$TCB.ALT$
      9371**DCL      9575>>IF       9583>>IF
B$TCB$
      8986**DCL      9371--IMP-PTR  9575>>IF       9583>>IF
B$XL_UPPER$
      9318**DCL      9319--IMP-PTR  9706>>CALLBLT
BUF$
      9359**DCL        22--PROC     9542--IMP-PTR  9578>>IF       9602--ENTRY    9661--ENTRY    9668>>ASSIGN
      9688--ENTRY    9717>>IF       9720>>ASSIGN   9721>>ASSIGN
BUF_
      9365**DCL      9570>>ASSIGN   9631>>ASSIGN   9667>>ASSIGN   9719<<ASSIGN   9720<<ASSIGN   9721<<ASSIGN
DCB#
      9360**DCL        22--PROC     9568>>ASSIGN   9602--ENTRY    9619>>ASSIGN   9629>>ASSIGN   9661--ENTRY
      9672>>ASSIGN   9688--ENTRY    9697>>ASSIGN
DELETE_LIST
      9393**DCL      9698<>CALL
DELETE_LIST.KEY_
      9393**DCL      9693<<ASSIGN
DELETE_LIST.V
      9396**DCL      9393--DCLINIT
DELETE_LIST.V.DCB#
      9397**DCL      9697<<ASSIGN
ERRMSG_FID.L#
      9054**DCL      9054--IMP-SIZ
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:285  
E_PMME
      9590**LABEL    9578--CALLALT  9580--CALLALT  9698--CALLALT
E_READ
      9575**LABEL    9571--CALLALT  9637--CALLALT
E_WRITE
      9678**LABEL    9674--CALLALT
LOWER_UPPER
      9319**DCL      9706>>CALLBLT
M$DELREC
      6640**DCL-ENT  9698--CALL
M$PRECORD
      6642**DCL-ENT  9623--CALL     9627--CALL
M$READ
      6639**DCL-ENT  9571--CALL     9637--CALL
M$WRITE
      6639**DCL-ENT  9674--CALL
MOVE_LIST
      9490**DCL      9623<>CALL     9627<>CALL
MOVE_LIST.KEY_
      9490**DCL      9620<<ASSIGN
MOVE_LIST.V
      9492**DCL      9490--DCLINIT
MOVE_LIST.V.DCB#
      9492**DCL      9619<<ASSIGN
MOVE_LIST.V.KEYS#
      9493**DCL      9621<<ASSIGN   9625<<ASSIGN
MOVE_LIST.V.N#
      9496**DCL      9622<<ASSIGN   9626<<ASSIGN
READ_AGAIN
      9567**LABEL    9581--GOTO
READ_LIST
      9418**DCL      9571<>CALL
READ_LIST.BUF_
      9420**DCL      9570<<ASSIGN
READ_LIST.KEY_
      9418**DCL      9569<<ASSIGN
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:286  
READ_LIST.STATION_
      9421**DCL      9422--REDEF
READ_LIST.V
      9422**DCL      9418--DCLINIT
READ_LIST.V.DCB#
      9422**DCL      9568<<ASSIGN
READ_LIST.V.DVBYTE.REREAD#
      9433**DCL      9433--REDEF
READ_LIST.V.INDX#
      9431**DCL      9431--REDEF
READ_NEXT
      9457**DCL      9637<>CALL
READ_NEXT.BUF_
      9459**DCL      9631<<ASSIGN
READ_NEXT.KEY_
      9457**DCL      9630<<ASSIGN
READ_NEXT.STATION_
      9460**DCL      9461--REDEF
READ_NEXT.V
      9461**DCL      9457--DCLINIT
READ_NEXT.V.DCB#
      9461**DCL      9629<<ASSIGN
READ_NEXT.V.DVBYTE.REREAD#
      9472**DCL      9472--REDEF
READ_NEXT.V.INDX#
      9470**DCL      9470--REDEF
SETUP_BUFFER
      9712**PROC     9567--CALL     9606--CALL     9665--CALL
SETUP_KEY
      9701**PROC     9565--CALL     9607--CALL     9666--CALL     9692--CALL
TEMPBUF
      9367**DCL      9705<<ASSIGN   9706>>CALLBLT
TVEC_ IN PROCEDURE SETUP_BUFFER
      9713**DCL      9717<<ASSIGN   9718<<ASSIGN   9719>>ASSIGN   9720>>ASSIGN   9720>>ASSIGN
TYPE
      9368**DCL      9615<<ASSIGN   9642>>IF       9645>>ASSIGN
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:287  
VMA$COMPRESS_BLANKS
      9363**DCL-ENT  9708--CALL
VMA$ENLARGE_SEGMENT
      9362**DCL-ENT  9578--CALL     9580--CALL
VM_ADDLIST$
      8908**DCL      9578>>IF       9717>>IF
VM_ADDLIST_
      8932**DCL      9578<>CALL     9717>>ASSIGN
VM_ADD_HEAD.ADDRESS_SIZE
      9543**DCL      9668>>ASSIGN
VM_LISTKEY
      9353**DCL        22--PROC     9569--ASSIGN   9602--ENTRY    9620--ASSIGN   9630--ASSIGN   9647--ASSIGN
      9661--ENTRY    9673--ASSIGN   9688--ENTRY    9693--ASSIGN   9708--CALL
VM_LISTKEY.COUNT
      9354**DCL      9635<<ASSIGN   9647<<ASSIGN   9707<<ASSIGN
VM_LISTKEY.TEXT
      9357**DCL      9635--ASSIGN   9636<<ASSIGN   9646<<ASSIGN   9705>>ASSIGN   9706<<CALLBLT  9707--ASSIGN
VM_LISTKEY.TYPE
      9355**DCL      9615>>ASSIGN   9642>>IF       9645<<ASSIGN
VM_WORK_
      8934**DCL      9580<>CALL     9718>>ASSIGN
WRITE_LIST
      9517**DCL      9674<>CALL
WRITE_LIST.BUF_
      9517**DCL      9667<<ASSIGN
WRITE_LIST.BUF_.BOUND
      9517**DCL      9668<<ASSIGN
WRITE_LIST.KEY_
      9517**DCL      9673<<ASSIGN
WRITE_LIST.STATION_
      9519**DCL      9519--REDEF
WRITE_LIST.V
      9520**DCL      9517--DCLINIT
WRITE_LIST.V.DCB#
      9520**DCL      9672<<ASSIGN
WRITE_LIST.V.DVBYTE.VFC#
PL6.E3A0      #006=VMA$GET_LIST File=VMA$SUBR.:VMB6TSI                           WED 08/20/97 15:03 Page:288  
      9526**DCL      9526--REDEF
X$STRING.SIZ
      8900**DCL      8901--IMP-SIZ

PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:289  
     1719        1        /*T***********************************************************/
     1720        2        /*T*                                                         */
     1721        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1722        4        /*T*                                                         */
     1723        5        /*T***********************************************************/
     1724        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1725        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1726        8        /*F*
     1727        9             NAME: VMA$GET_ADD_RECORD
     1728       10             PURPOSE:
     1729       11                   To read the specified address record from the specified file.
     1730       12             DESCRIPTION:
     1731       13                   The purpose of these routines is to manipulate ADDRESS
     1732       14                   records. That is, records passed between SEND and MAILMAN
     1733       15                   with a TYPE of VM_TYPE_TO, VM_TYPE_C and VM_TYPE_BC.
     1734       16
     1735       17                   This routine has three parameters:
     1736       18                      TYPE   - type of record to read.
     1737       19                      BUF_   - vector of area to read/write info to/from.
     1738       20                      DCB#   - dcb which points to the file to access.
     1739       21                       NUMBER - Optional message number, default is 0.
     1740       22        */
     1741       23        VMA$GET_ADD_RECORD: PROC (TYPE,BUF_,DCB#,NUMBER) ALTRET;
     1742       24        /***** Include files *****/
     1743       25          %INCLUDE B_ERRORS_C;
     1744     1152          %INCLUDE CP_6;
     1745     6711          %INCLUDE CP_6_SUBS;
     1746     7251          %INCLUDE VM_MACRO_C;
     1747     8519          %INCLUDE VM_DATA_R;
     1748     8950        /***** Parameters *****/
     1749     8951    1   DCL TYPE UBIN WORD;
     1750     8952    1   DCL BUF_ VECTOR;
     1751     8953    1   DCL DCB# UBIN WORD;
     1752     8954    1   DCL NUMBER UBIN WORD;
     1753     8955        /***** Based structures *****/
     1754     8956          %B$TCB (STCLASS="BASED(B$TCB$)");
     1755     8959          %B$ALT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:290  
     1756     8967        /***** External routines *****/
     1757     8968    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
     1758     8969        /***** Fpts *****/
     1759     8970          %FPT_DELREC (FPTN=DELETE_ADDRESS,KEY=VM_INFOKEY);
     1760     8989          %FPT_READ (FPTN=READ_ADDRESS,KEYS=YES,KEY=VM_INFOKEY);
     1761     9028          %FPT_WRITE (FPTN=WRITE_ADDRESS,ONEWKEY=YES,KEY=VM_INFOKEY);
     1762     9059        /***** Mail structures *****/
     1763     9060          %VM_KEYTYPES;
     1764     9081          %VM_INFOKEY (STCLASS=STATIC);
     1765     9098          %VM_ADD_HEAD (STCLASS=BASED);
     1766     9127        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:291  
     1767     9128        /*
     1768     9129             ***** Setup the key ...
     1769     9130        */
     1770     9131    1       CALL SETUP_KEY;
     1771     9132        /*
     1772     9133             ***** Read the address record ...
     1773     9134        */
     1774     9135    1       READ_ADDRESS.BUF_ = BUF_;
     1775     9136    1       READ_ADDRESS.V.DCB# = DCB#;
     1776     9137    1   READ_AGAIN:
     1777     9138    1       CALL M$READ (READ_ADDRESS) ALTRET(E_READ);
     1778     9139    1       RETURN;
     1779     9140        /**/
     1780     9141    1   E_READ:
     1781     9142    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD
     1782     9143    1       THEN
     1783     9144    2       DO;                          /* Enlarge the segment and try again */
     1784     9145    2           CALL VMA$ENLARGE_SEGMENT (BUF_,1024) ALTRET(E_PMME);
     1785     9146    2           READ_ADDRESS.BUF_ = BUF_;
     1786     9147    2           GOTO READ_AGAIN;
     1787     9148    2       END;
     1788     9149    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOFILE
     1789     9150    1       THEN
     1790     9151    2       DO;                          /* Report that folder doesn't exist */
     1791     9152    2           ALTRETURN;
     1792     9153    2       END;
     1793     9154        /**/
     1794     9155    1   E_PMME:
     1795     9156    1       ALTRETURN;
     1796     9157        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:292  
     1797     9158        /*F*
     1798     9159             NAME: VMA$PUT_ADD_RECORD
     1799     9160             PURPOSE:
     1800     9161                   To write the specified address record into the specified file.
     1801     9162             DESCRIPTION:
     1802     9163                   This routine has three parameters:
     1803     9164                      TYPE   - type of record to write.
     1804     9165                      BUF_   - vector of area to read/write info to/from.
     1805     9166                      DCB#   - dcb which points to the file to access.
     1806     9167                       NUMBER - Optional message number, default is 0.
     1807     9168        */
     1808     9169    1   VMA$PUT_ADD_RECORD: ENTRY(TYPE,BUF_,DCB#,NUMBER) ALTRET;
     1809     9170        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:293  
     1810     9171        /*
     1811     9172             ***** Setup the key ...
     1812     9173        */
     1813     9174    1       CALL SETUP_KEY;
     1814     9175        /*
     1815     9176             ***** Write the address record ...
     1816     9177        */
     1817     9178    1       WRITE_ADDRESS.BUF_ = BUF_;
     1818     9179    1       WRITE_ADDRESS.BUF_.BOUND = (VBASE(BUF_) -> VM_ADD_HEAD.ADDRESS_SIZE * 4) - 1;
     1819     9180    1       WRITE_ADDRESS.V.DCB# = DCB#;
     1820     9181    1       CALL M$WRITE (WRITE_ADDRESS) ALTRET(E_WRITE);
     1821     9182    1       RETURN;
     1822     9183        /**/
     1823     9184    1   E_WRITE:
     1824     9185    1       ALTRETURN;
     1825     9186        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:294  
     1826     9187        /*F*
     1827     9188             NAME: VMA$DEL_ADD_RECORD
     1828     9189             PURPOSE:
     1829     9190                   To delete the specified address record from the specified file.
     1830     9191             DESCRIPTION:
     1831     9192                   This routine has three parameters:
     1832     9193                      TYPE   - type of record to delete.
     1833     9194                      BUF_   - unused.
     1834     9195                      DCB#   - dcb which points to the file to access.
     1835     9196                       NUMBER - Optional message number, default is 0.
     1836     9197        */
     1837     9198    1   VMA$DEL_ADD_RECORD: ENTRY(TYPE,BUF_,DCB#,NUMBER) ALTRET;
     1838     9199        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:295  
     1839     9200        /*
     1840     9201             ***** Setup the key ...
     1841     9202        */
     1842     9203    1       CALL SETUP_KEY;
     1843     9204        /*
     1844     9205             ***** Delete the address record ...
     1845     9206        */
     1846     9207    1       DELETE_ADDRESS.V.DCB# = DCB#;
     1847     9208    1       CALL M$DELREC (DELETE_ADDRESS) ALTRET(E_DELETE);
     1848     9209    1       RETURN;
     1849     9210        /**/
     1850     9211    1   E_DELETE:
     1851     9212    1       ALTRETURN;
     1852     9213        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:296  
     1853     9214    1   SETUP_KEY: PROC;
     1854     9215    2       VM_INFOKEY.TYPE = TYPE;
     1855     9216    2       IF ADDR(NUMBER) = ADDR(NIL) THEN VM_INFOKEY.MESSAGE_NUMBER = 0;
     1856     9217    2       ELSE VM_INFOKEY.MESSAGE_NUMBER = NUMBER;
     1857     9218    2       RETURN;
     1858     9219    2   END SETUP_KEY;
     1859     9220    1   END VMA$GET_ADD_RECORD;
     1860     9221        %EOD;

PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:297  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$GET_ADD_RECORD.

   Procedure VMA$GET_ADD_RECORD requires 90 words for executable code.
   Procedure VMA$GET_ADD_RECORD requires 12 words of local(AUTO) storage.

PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:298  

 Object Unit name= VMA$GET_ADD_RECORD                         File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:04:00.36 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    38     46  VMA$GET_ADD_RECORD
   12   Proc  even  none    90    132  VMA$GET_ADD_RECORD
   13  RoData even  none     6      6  VMA$GET_ADD_RECORD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes    yes     yes      Std        4  VMA$GET_ADD_RECORD
    12     44          yes     yes      Std        4  VMA$PUT_ADD_RECORD
    12     74          yes     yes      Std        4  VMA$DEL_ADD_RECORD
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:299  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VMA$ENLARGE_SEGMENT
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:300  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:301  


     1719        1        /*T***********************************************************/
     1720        2        /*T*                                                         */
     1721        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1722        4        /*T*                                                         */
     1723        5        /*T***********************************************************/
     1724        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1725        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1726        8        /*F*
     1727        9             NAME: VMA$GET_ADD_RECORD
     1728       10             PURPOSE:
     1729       11                   To read the specified address record from the specified file.
     1730       12             DESCRIPTION:
     1731       13                   The purpose of these routines is to manipulate ADDRESS
     1732       14                   records. That is, records passed between SEND and MAILMAN
     1733       15                   with a TYPE of VM_TYPE_TO, VM_TYPE_C and VM_TYPE_BC.
     1734       16
     1735       17                   This routine has three parameters:
     1736       18                      TYPE   - type of record to read.
     1737       19                      BUF_   - vector of area to read/write info to/from.
     1738       20                      DCB#   - dcb which points to the file to access.
     1739       21                       NUMBER - Optional message number, default is 0.
     1740       22        */
     1741       23        VMA$GET_ADD_RECORD: PROC (TYPE,BUF_,DCB#,NUMBER) ALTRET;

     23 12 000000   000000 700200 xent  VMA$GET_ADD* TSX0  ! X66_AUTO_4
        12 000001   000014 000004                    ZERO    12,4

     1742       24        /***** Include files *****/
     1743       25          %INCLUDE B_ERRORS_C;
     1744     1152          %INCLUDE CP_6;
     1745     6711          %INCLUDE CP_6_SUBS;
     1746     7251          %INCLUDE VM_MACRO_C;
     1747     8519          %INCLUDE VM_DATA_R;
     1748     8950        /***** Parameters *****/
     1749     8951    1   DCL TYPE UBIN WORD;
     1750     8952    1   DCL BUF_ VECTOR;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:302  
     1751     8953    1   DCL DCB# UBIN WORD;
     1752     8954    1   DCL NUMBER UBIN WORD;
     1753     8955        /***** Based structures *****/
     1754     8956          %B$TCB (STCLASS="BASED(B$TCB$)");
     1755     8959          %B$ALT;
     1756     8967        /***** External routines *****/
     1757     8968    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
     1758     8969        /***** Fpts *****/
     1759     8970          %FPT_DELREC (FPTN=DELETE_ADDRESS,KEY=VM_INFOKEY);
     1760     8989          %FPT_READ (FPTN=READ_ADDRESS,KEYS=YES,KEY=VM_INFOKEY);
     1761     9028          %FPT_WRITE (FPTN=WRITE_ADDRESS,ONEWKEY=YES,KEY=VM_INFOKEY);
     1762     9059        /***** Mail structures *****/
     1763     9060          %VM_KEYTYPES;
     1764     9081          %VM_INFOKEY (STCLASS=STATIC);
     1765     9098          %VM_ADD_HEAD (STCLASS=BASED);
     1766     9127        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:303  
     1767     9128        /*
     1768     9129             ***** Setup the key ...
     1769     9130        */
     1770     9131    1       CALL SETUP_KEY;

   9131 12 000002   000111 701000 12                 TSX1    SETUP_KEY
        12 000003   000000 011000                    NOP     0

     1771     9132        /*
     1772     9133             ***** Read the address record ...
     1773     9134        */
     1774     9135    1       READ_ADDRESS.BUF_ = BUF_;

   9135 12 000004   200004 470500                    LDP0    @BUF_,,AUTO
        12 000005   000000 237100                    LDAQ    0,,PR0
        12 000006   000016 757000 11                 STAQ    READ_ADDRESS+4

     1775     9136    1       READ_ADDRESS.V.DCB# = DCB#;

   9136 12 000007   200005 471500                    LDP1    @DCB#,,AUTO
        12 000010   100000 720100                    LXL0    0,,PR1
        12 000011   000022 740000 11                 STX0    READ_ADDRESS+8

     1776     9137    1   READ_AGAIN:
     1777     9138    1       CALL M$READ (READ_ADDRESS) ALTRET(E_READ);

   9138 12 000012   000012 630400 11    READ_AGAIN   EPPR0   READ_ADDRESS
        12 000013   440000 713400                    CLIMB   alt,read
        12 000014   401400 401760                    pmme    nvectors=4
        12 000015   000017 702000 12                 TSX2    E_READ

     1778     9139    1       RETURN;

   9139 12 000016   000000 702200 xent               TSX2  ! X66_ARET

     1779     9140        /**/
     1780     9141    1   E_READ:
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:304  
     1781     9142    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$LD

   9142 12 000017   000000 470400 xsym  E_READ       LDP0    B$TCB$
        12 000020   000000 471500                    LDP1    0,,PR0
        12 000021   100102 236100                    LDQ     66,,PR1
        12 000022   377770 376007                    ANQ     131064,DL
        12 000023   000070 116007                    CMPQ    56,DL
        12 000024   000040 601000 12                 TNZ     s:9149

     1782     9143    1       THEN
     1783     9144    2       DO;                          /* Enlarge the segment and try again */

     1784     9145    2           CALL VMA$ENLARGE_SEGMENT (BUF_,1024) ALTRET(E_PMME);

   9145 12 000025   000002 236000 13                 LDQ     2
        12 000026   200004 235100                    LDA     @BUF_,,AUTO
        12 000027   200012 757100                    STAQ    @NUMBER+4,,AUTO
        12 000030   200012 630500                    EPPR0   @NUMBER+4,,AUTO
        12 000031   000000 631400 13                 EPPR1   0
        12 000032   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        12 000033   000043 702000 12                 TSX2    E_PMME

     1785     9146    2           READ_ADDRESS.BUF_ = BUF_;

   9146 12 000034   200004 470500                    LDP0    @BUF_,,AUTO
        12 000035   000000 237100                    LDAQ    0,,PR0
        12 000036   000016 757000 11                 STAQ    READ_ADDRESS+4

     1786     9147    2           GOTO READ_AGAIN;

   9147 12 000037   000012 710000 12                 TRA     READ_AGAIN

     1787     9148    2       END;
     1788     9149    1       IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$NOFILE

   9149 12 000040   001610 116007                    CMPQ    904,DL
        12 000041   000043 601000 12                 TNZ     E_PMME
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:305  

     1789     9150    1       THEN
     1790     9151    2       DO;                          /* Report that folder doesn't exist */

     1791     9152    2           ALTRETURN;

   9152 12 000042   000000 702200 xent               TSX2  ! X66_AALT

     1792     9153    2       END;
     1793     9154        /**/
     1794     9155    1   E_PMME:
     1795     9156    1       ALTRETURN;

   9156 12 000043   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

     1796     9157        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:306  
     1797     9158        /*F*
     1798     9159             NAME: VMA$PUT_ADD_RECORD
     1799     9160             PURPOSE:
     1800     9161                   To write the specified address record into the specified file.
     1801     9162             DESCRIPTION:
     1802     9163                   This routine has three parameters:
     1803     9164                      TYPE   - type of record to write.
     1804     9165                      BUF_   - vector of area to read/write info to/from.
     1805     9166                      DCB#   - dcb which points to the file to access.
     1806     9167                       NUMBER - Optional message number, default is 0.
     1807     9168        */
     1808     9169    1   VMA$PUT_ADD_RECORD: ENTRY(TYPE,BUF_,DCB#,NUMBER) ALTRET;

   9169 12 000044   000000 700200 xent  VMA$PUT_ADD* TSX0  ! X66_AUTO_4
        12 000045   000014 000004                    ZERO    12,4

     1809     9170        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:307  
     1810     9171        /*
     1811     9172             ***** Setup the key ...
     1812     9173        */
     1813     9174    1       CALL SETUP_KEY;

   9174 12 000046   000111 701000 12                 TSX1    SETUP_KEY
        12 000047   000000 011000                    NOP     0

     1814     9175        /*
     1815     9176             ***** Write the address record ...
     1816     9177        */
     1817     9178    1       WRITE_ADDRESS.BUF_ = BUF_;

   9178 12 000050   200004 470500                    LDP0    @BUF_,,AUTO
        12 000051   000000 237100                    LDAQ    0,,PR0
        12 000052   000034 757000 11                 STAQ    WRITE_ADDRESS+4

     1818     9179    1       WRITE_ADDRESS.BUF_.BOUND = (VBASE(BUF_) -> VM_ADD_HEAD.ADDRESS_SIZE * 4) - 1;

   9179 12 000053   000001 471500                    LDP1    1,,PR0
        12 000054   100000 236100                    LDQ     0,,PR1
        12 000055   000002 736000                    QLS     2
        12 000056   000001 136007                    SBLQ    1,DL
        12 000057   000020 736000                    QLS     16
        12 000060   000034 676000 11                 ERQ     WRITE_ADDRESS+4
        12 000061   000003 376000 13                 ANQ     3
        12 000062   000034 656000 11                 ERSQ    WRITE_ADDRESS+4

     1819     9180    1       WRITE_ADDRESS.V.DCB# = DCB#;

   9180 12 000063   200005 471500                    LDP1    @DCB#,,AUTO
        12 000064   100000 720100                    LXL0    0,,PR1
        12 000065   000040 740000 11                 STX0    WRITE_ADDRESS+8

     1820     9181    1       CALL M$WRITE (WRITE_ADDRESS) ALTRET(E_WRITE);

   9181 12 000066   000030 630400 11                 EPPR0   WRITE_ADDRESS
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:308  
        12 000067   440001 713400                    CLIMB   alt,write
        12 000070   401400 401760                    pmme    nvectors=4
        12 000071   000073 702000 12                 TSX2    E_WRITE

     1821     9182    1       RETURN;

   9182 12 000072   000000 702200 xent               TSX2  ! X66_ARET

     1822     9183        /**/
     1823     9184    1   E_WRITE:
     1824     9185    1       ALTRETURN;

   9185 12 000073   000000 702200 xent  E_WRITE      TSX2  ! X66_AALT

     1825     9186        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:309  
     1826     9187        /*F*
     1827     9188             NAME: VMA$DEL_ADD_RECORD
     1828     9189             PURPOSE:
     1829     9190                   To delete the specified address record from the specified file.
     1830     9191             DESCRIPTION:
     1831     9192                   This routine has three parameters:
     1832     9193                      TYPE   - type of record to delete.
     1833     9194                      BUF_   - unused.
     1834     9195                      DCB#   - dcb which points to the file to access.
     1835     9196                       NUMBER - Optional message number, default is 0.
     1836     9197        */
     1837     9198    1   VMA$DEL_ADD_RECORD: ENTRY(TYPE,BUF_,DCB#,NUMBER) ALTRET;

   9198 12 000074   000000 700200 xent  VMA$DEL_ADD* TSX0  ! X66_AUTO_4
        12 000075   000014 000004                    ZERO    12,4

     1838     9199        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:310  
     1839     9200        /*
     1840     9201             ***** Setup the key ...
     1841     9202        */
     1842     9203    1       CALL SETUP_KEY;

   9203 12 000076   000111 701000 12                 TSX1    SETUP_KEY
        12 000077   000000 011000                    NOP     0

     1843     9204        /*
     1844     9205             ***** Delete the address record ...
     1845     9206        */
     1846     9207    1       DELETE_ADDRESS.V.DCB# = DCB#;

   9207 12 000100   200005 470500                    LDP0    @DCB#,,AUTO
        12 000101   000000 720100                    LXL0    0,,PR0
        12 000102   000010 740000 11                 STX0    DELETE_ADDRESS+8

     1847     9208    1       CALL M$DELREC (DELETE_ADDRESS) ALTRET(E_DELETE);

   9208 12 000103   000000 630400 11                 EPPR0   DELETE_ADDRESS
        12 000104   440002 713400                    CLIMB   alt,+16386
        12 000105   401400 401760                    pmme    nvectors=4
        12 000106   000110 702000 12                 TSX2    E_DELETE

     1848     9209    1       RETURN;

   9209 12 000107   000000 702200 xent               TSX2  ! X66_ARET

     1849     9210        /**/
     1850     9211    1   E_DELETE:
     1851     9212    1       ALTRETURN;

   9212 12 000110   000000 702200 xent  E_DELETE     TSX2  ! X66_AALT

     1852     9213        %EJECT;
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:311  
     1853     9214    1   SETUP_KEY: PROC;

   9214 12 000111   200010 741300       SETUP_KEY    STX1  ! @NUMBER+2,,AUTO

     1854     9215    2       VM_INFOKEY.TYPE = TYPE;

   9215 12 000112   200003 470500                    LDP0    @TYPE,,AUTO
        12 000113   000000 236100                    LDQ     0,,PR0
        12 000114   000022 736000                    QLS     18
        12 000115   000044 552020 11                 STBQ    VM_INFOKEY,'20'O

     1855     9216    2       IF ADDR(NUMBER) = ADDR(NIL) THEN VM_INFOKEY.MESSAGE_NUMBER = 0;

   9216 12 000116   200006 236100                    LDQ     @NUMBER,,AUTO
        12 000117   000004 116000 13                 CMPQ    4
        12 000120   000125 601000 12                 TNZ     s:9217

   9216 12 000121   000000 100400                    MLR     fill='000'O
        12 000122   000005 000004 13                 ADSC9   5                        cn=0,n=4
        12 000123   000044 400004 11                 ADSC9   VM_INFOKEY               cn=2,n=4
        12 000124   000131 710000 12                 TRA     s:9218

     1856     9217    2       ELSE VM_INFOKEY.MESSAGE_NUMBER = NUMBER;

   9217 12 000125   200006 471500                    LDP1    @NUMBER,,AUTO
        12 000126   000000 100500                    MLR     fill='000'O
        12 000127   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
        12 000130   000044 400004 11                 ADSC9   VM_INFOKEY               cn=2,n=4

     1857     9218    2       RETURN;

   9218 12 000131   000001 702211                    TSX2  ! 1,X1

DELETE_ADDRESS
 Sect OctLoc
  11     000   000001 777640   000010 006000   000001 377640   000044 006000    .............$..
  11     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:312  
  11     010   000000 000000   000000 000000                                    ........

READ_ADDRESS
 Sect OctLoc
  11     012   000005 777640   000022 006000   000001 377640   000044 006000    .............$..
  11     016   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     022   000000 600000   000000 000000   000000 000000   000000 000000    ................
  11     026   000000 000000   000000 000000                                    ........

WRITE_ADDRESS
 Sect OctLoc
  11     030   000003 777640   000040 006000   000001 377640   000044 006000    ..... .......$..
  11     034   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     040   000000 400400   000000 000000   000000 000000   000000 000000    ................

VM_INFOKEY
 Sect OctLoc
  11     044   005000 000000   000000 ******                                    ........

(unnamed)
 Sect OctLoc
  13     000   000002 000000   000000 002000   000001 006000   777777 600000    ................
  13     004   000000 006014   000000 000000                                    ........
     1858     9219    2   END SETUP_KEY;
     1859     9220    1   END VMA$GET_ADD_RECORD;
     1860     9221        %EOD;

PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:313  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$GET_ADD_RECORD.
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:314  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$GET_ADD_RECORD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 DELETE_ADDRESS            12-0-0/d STRC(504)   r     1 READ_ADDRESS
    44-0-0/c STRC(54)    r     1 VM_INFOKEY                30-0-0/d STRC(432)   r     1 WRITE_ADDRESS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BUF_                      5-0-0/w PTR         r     1 @DCB#
     6-0-0/w PTR         r     1 @NUMBER                    3-0-0/w PTR         r     1 @TYPE
    *0-0-0/d VECT        r     1 BUF_                      *0-0-0/w UBIN        r     1 DCB#
    *0-0-0/w UBIN        r     1 NUMBER                    *0-0-0/w UBIN        r     1 TYPE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:315  
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/w STRC(252)   r     1 VM_ADD_HEAD
     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$GET_ADD_RECORD requires 90 words for executable code.
   Procedure VMA$GET_ADD_RECORD requires 12 words of local(AUTO) storage.
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:316  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:317  
          MINI XREF LISTING

B$ALT.CODE
      8961**DCL      8961--REDEF    8962--REDEF    8962--REDEF
B$ALT.ERR.CODE
      8963**DCL      9142>>IF       9149>>IF
B$ALT.ERR.ERR#
      8963**DCL      8963--REDEF
B$ALT.EVID
      8962**DCL      8962--REDEF    8962--REDEF
B$TCB.ALT$
      8957**DCL      9142>>IF       9149>>IF
B$TCB$
      8727**DCL      8957--IMP-PTR  9142>>IF       9149>>IF
BUF_
      8952**DCL        23--PROC     9135>>ASSIGN   9145<>CALL     9146>>ASSIGN   9169--ENTRY    9178>>ASSIGN
      9179>>ASSIGN   9198--ENTRY
DCB#
      8953**DCL        23--PROC     9136>>ASSIGN   9169--ENTRY    9180>>ASSIGN   9198--ENTRY    9207>>ASSIGN
DELETE_ADDRESS
      8981**DCL      9208<>CALL
DELETE_ADDRESS.V
      8984**DCL      8981--DCLINIT
DELETE_ADDRESS.V.DCB#
      8985**DCL      9207<<ASSIGN
ERRMSG_FID.L#
      8795**DCL      8795--IMP-SIZ
E_DELETE
      9212**LABEL    9208--CALLALT
E_PMME
      9156**LABEL    9145--CALLALT
E_READ
      9142**LABEL    9138--CALLALT
E_WRITE
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:318  
      9185**LABEL    9181--CALLALT
M$DELREC
      6641**DCL-ENT  9208--CALL
M$READ
      6640**DCL-ENT  9138--CALL
M$WRITE
      6640**DCL-ENT  9181--CALL
NUMBER
      8954**DCL        23--PROC     9169--ENTRY    9198--ENTRY    9216--IF       9217>>ASSIGN
READ_ADDRESS
      9006**DCL      9138<>CALL
READ_ADDRESS.BUF_
      9008**DCL      9135<<ASSIGN   9146<<ASSIGN
READ_ADDRESS.STATION_
      9009**DCL      9010--REDEF
READ_ADDRESS.V
      9010**DCL      9006--DCLINIT
READ_ADDRESS.V.DCB#
      9010**DCL      9136<<ASSIGN
READ_ADDRESS.V.DVBYTE.REREAD#
      9021**DCL      9021--REDEF
READ_ADDRESS.V.INDX#
      9019**DCL      9019--REDEF
READ_AGAIN
      9138**LABEL    9147--GOTO
SETUP_KEY
      9214**PROC     9131--CALL     9174--CALL     9203--CALL
TYPE
      8951**DCL        23--PROC     9169--ENTRY    9198--ENTRY    9215>>ASSIGN
VMA$ENLARGE_SEGMENT
      8968**DCL-ENT  9145--CALL
VM_ADD_HEAD.ADDRESS_SIZE
      9109**DCL      9179>>ASSIGN
VM_INFOKEY
      9091**DCL      8981--DCLINIT  8982--DCLINIT  9006--DCLINIT  9007--DCLINIT  9045--DCLINIT
VM_INFOKEY.MESSAGE_NUMBER
PL6.E3A0      #007=VMA$GET_ADD_RECORD File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:04 Page:319  
      9095**DCL      9216<<ASSIGN   9217<<ASSIGN
VM_INFOKEY.TYPE
      9093**DCL      9215<<ASSIGN
WRITE_ADDRESS
      9045**DCL      9181<>CALL
WRITE_ADDRESS.BUF_
      9045**DCL      9178<<ASSIGN
WRITE_ADDRESS.BUF_.BOUND
      9045**DCL      9179<<ASSIGN
WRITE_ADDRESS.STATION_
      9047**DCL      9047--REDEF
WRITE_ADDRESS.V
      9048**DCL      9045--DCLINIT
WRITE_ADDRESS.V.DCB#
      9048**DCL      9180<<ASSIGN
WRITE_ADDRESS.V.DVBYTE.VFC#
      9054**DCL      9054--REDEF
X$STRING.SIZ
      8641**DCL      8642--IMP-SIZ

PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:320  
     1861        1        /*T***********************************************************/
     1862        2        /*T*                                                         */
     1863        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1864        4        /*T*                                                         */
     1865        5        /*T***********************************************************/
     1866        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1867        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1868        8        /*F*
     1869        9             NAME: VMA$ENLARGE_SEGMENT
     1870       10             PURPOSE:
     1871       11                   To get memory in a specified data segment.
     1872       12             DESCRIPTION:
     1873       13                   This routine has two parameters.
     1874       14
     1875       15                   VECTOR_  - vector describing data segment to be enlarged.
     1876       16                   SIZE     - number of words to acquire. (optional. Default 1024)
     1877       17        */
     1878       18        VMA$ENLARGE_SEGMENT: PROC (VECTOR_, SIZE) ALTRET;
     1879       19        /***** Include files *****/
     1880       20          %INCLUDE CP_6;
     1881     5579          %INCLUDE CP_6_SUBS;
     1882     6119        /***** Parameters *****/
     1883     6120          %VLP_VECTOR(FPTN=VECTOR_,STCLASS=" ");
     1884     6135    1   DCL SIZE SBIN WORD;
     1885     6136        /***** Fpts *****/
     1886     6137          %FPT_GDS (FPTN=GET_MEMORY);
     1887     6153          %FPT_FDS (FPTN=REL_MEMORY);
     1888     6168        %EJECT;
PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:321  
     1889     6169    1       IF ADDR(SIZE) = ADDR(NIL)
     1890     6170    1       THEN                            /* Assume 1 page */
     1891     6171    1           GET_MEMORY.V.SEGSIZE# = 1024;
     1892     6172    1       ELSE                            /* Get as many as requested */
     1893     6173    1           GET_MEMORY.V.SEGSIZE# = SIZE;
     1894     6174    1       GET_MEMORY.RESULTS_ = VECTOR(VECTOR_);
     1895     6175    1       CALL M$GDS (GET_MEMORY) ALTRET(E_PMME);
     1896     6176    1       RETURN;
     1897     6177        %EJECT;
PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:322  
     1898     6178        /*F*
     1899     6179             NAME: VMA$SHRINK_SEGMENT
     1900     6180             PURPOSE:
     1901     6181                   To release memory in a specified data segment.
     1902     6182             DESCRIPTION:
     1903     6183                   This routine has two parameters.
     1904     6184
     1905     6185                   VECTOR_  - vector describing data segment to be shrunk.
     1906     6186                   SIZE     - number of words to release. (optional. Default all)
     1907     6187        */
     1908     6188    1   VMA$SHRINK_SEGMENT: ENTRY (VECTOR_, SIZE) ALTRET;
     1909     6189        /**/
     1910     6190    1       IF ADDR(SIZE) = ADDR(NIL)
     1911     6191    1       THEN                            /* Release entire segment */
     1912     6192    1           REL_MEMORY.V.SEGSIZE# = (VECTOR_.W1.VSIZE#+1)/4;
     1913     6193    1       ELSE                       /* Only release requested number of words */
     1914     6194    1           REL_MEMORY.V.SEGSIZE# = SIZE;
     1915     6195    1       REL_MEMORY.RESULTS_ = VECTOR(VECTOR_);
     1916     6196    1       CALL M$FDS (REL_MEMORY) ALTRET(E_PMME);
     1917     6197    1       RETURN;
     1918     6198        /**/
     1919     6199    1   E_PMME:
     1920     6200    1       ALTRETURN;
     1921     6201    1   END VMA$ENLARGE_SEGMENT;
     1922     6202        %EOD;

PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:323  
--  Include file information  --

   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ENLARGE_SEGMENT.

   Procedure VMA$ENLARGE_SEGMENT requires 44 words for executable code.
   Procedure VMA$ENLARGE_SEGMENT requires 6 words of local(AUTO) storage.

PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:324  

 Object Unit name= VMA$ENLARGE_SEGMENT                        File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:04:16.44 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    12     14  VMA$ENLARGE_SEGMENT
    2   Proc  even  none    44     54  VMA$ENLARGE_SEGMENT
    3  RoData even  none     2      2  VMA$ENLARGE_SEGMENT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  VMA$ENLARGE_SEGMENT
     2     23          yes     yes      Std        2  VMA$SHRINK_SEGMENT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC
PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:325  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:326  


     1861        1        /*T***********************************************************/
     1862        2        /*T*                                                         */
     1863        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1864        4        /*T*                                                         */
     1865        5        /*T***********************************************************/
     1866        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1867        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1868        8        /*F*
     1869        9             NAME: VMA$ENLARGE_SEGMENT
     1870       10             PURPOSE:
     1871       11                   To get memory in a specified data segment.
     1872       12             DESCRIPTION:
     1873       13                   This routine has two parameters.
     1874       14
     1875       15                   VECTOR_  - vector describing data segment to be enlarged.
     1876       16                   SIZE     - number of words to acquire. (optional. Default 1024)
     1877       17        */
     1878       18        VMA$ENLARGE_SEGMENT: PROC (VECTOR_, SIZE) ALTRET;

     18  2 000000   000000 700200 xent  VMA$ENLARGE* TSX0  ! X66_AUTO_2
         2 000001   000006 000002                    ZERO    6,2

     1879       19        /***** Include files *****/
     1880       20          %INCLUDE CP_6;
     1881     5579          %INCLUDE CP_6_SUBS;
     1882     6119        /***** Parameters *****/
     1883     6120          %VLP_VECTOR(FPTN=VECTOR_,STCLASS=" ");
     1884     6135    1   DCL SIZE SBIN WORD;
     1885     6136        /***** Fpts *****/
     1886     6137          %FPT_GDS (FPTN=GET_MEMORY);
     1887     6153          %FPT_FDS (FPTN=REL_MEMORY);
     1888     6168        %EJECT;
PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:327  
     1889     6169    1       IF ADDR(SIZE) = ADDR(NIL)

   6169  2 000002   200004 236100                    LDQ     @SIZE,,AUTO
         2 000003   000000 116000 3                  CMPQ    0
         2 000004   000010 601000 2                  TNZ     s:6173

     1890     6170    1       THEN                            /* Assume 1 page */
     1891     6171    1           GET_MEMORY.V.SEGSIZE# = 1024;

   6171  2 000005   002000 220003                    LDX0    1024,DU
         2 000006   000004 440000 1                  SXL0    GET_MEMORY+4
         2 000007   000013 710000 2                  TRA     s:6174

     1892     6172    1       ELSE                            /* Get as many as requested */
     1893     6173    1           GET_MEMORY.V.SEGSIZE# = SIZE;

   6173  2 000010   200004 470500                    LDP0    @SIZE,,AUTO
         2 000011   000000 720100                    LXL0    0,,PR0
         2 000012   000004 440000 1                  SXL0    GET_MEMORY+4

     1894     6174    1       GET_MEMORY.RESULTS_ = VECTOR(VECTOR_);

   6174  2 000013   000001 235000 3                  LDA     1
         2 000014   200003 236100                    LDQ     @VECTOR_,,AUTO
         2 000015   000002 757000 1                  STAQ    GET_MEMORY+2

     1895     6175    1       CALL M$GDS (GET_MEMORY) ALTRET(E_PMME);

   6175  2 000016   000000 630400 1                  EPPR0   GET_MEMORY
         2 000017   430001 713400                    CLIMB   alt,gds
         2 000020   400400 401760                    pmme    nvectors=2
         2 000021   000053 702000 2                  TSX2    E_PMME

     1896     6176    1       RETURN;

   6176  2 000022   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:328  
     1897     6177        %EJECT;
PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:329  
     1898     6178        /*F*
     1899     6179             NAME: VMA$SHRINK_SEGMENT
     1900     6180             PURPOSE:
     1901     6181                   To release memory in a specified data segment.
     1902     6182             DESCRIPTION:
     1903     6183                   This routine has two parameters.
     1904     6184
     1905     6185                   VECTOR_  - vector describing data segment to be shrunk.
     1906     6186                   SIZE     - number of words to release. (optional. Default all)
     1907     6187        */
     1908     6188    1   VMA$SHRINK_SEGMENT: ENTRY (VECTOR_, SIZE) ALTRET;

   6188  2 000023   000000 700200 xent  VMA$SHRINK_* TSX0  ! X66_AUTO_2
         2 000024   000006 000002                    ZERO    6,2

     1909     6189        /**/
     1910     6190    1       IF ADDR(SIZE) = ADDR(NIL)

   6190  2 000025   200004 236100                    LDQ     @SIZE,,AUTO
         2 000026   000000 116000 3                  CMPQ    0
         2 000027   000040 601000 2                  TNZ     s:6194

     1911     6191    1       THEN                            /* Release entire segment */
     1912     6192    1           REL_MEMORY.V.SEGSIZE# = (VECTOR_.W1.VSIZE#+1)/4;

   6192  2 000030   200003 470500                    LDP0    @VECTOR_,,AUTO
         2 000031   000000 236100                    LDQ     0,,PR0
         2 000032   000020 772000                    QRL     16
         2 000033   000001 036007                    ADLQ    1,DL
         2 000034   000002 772000                    QRL     2
         2 000035   000000 620006                    EAX0    0,QL
         2 000036   000012 440000 1                  SXL0    REL_MEMORY+4
         2 000037   000043 710000 2                  TRA     s:6195

     1913     6193    1       ELSE                       /* Only release requested number of words */
     1914     6194    1           REL_MEMORY.V.SEGSIZE# = SIZE;

PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:330  
   6194  2 000040   200004 470500                    LDP0    @SIZE,,AUTO
         2 000041   000000 720100                    LXL0    0,,PR0
         2 000042   000012 440000 1                  SXL0    REL_MEMORY+4

     1915     6195    1       REL_MEMORY.RESULTS_ = VECTOR(VECTOR_);

   6195  2 000043   000001 235000 3                  LDA     1
         2 000044   200003 236100                    LDQ     @VECTOR_,,AUTO
         2 000045   000010 757000 1                  STAQ    REL_MEMORY+2

     1916     6196    1       CALL M$FDS (REL_MEMORY) ALTRET(E_PMME);

   6196  2 000046   000006 630400 1                  EPPR0   REL_MEMORY
         2 000047   430002 713400                    CLIMB   alt,fds
         2 000050   400400 401760                    pmme    nvectors=2
         2 000051   000053 702000 2                  TSX2    E_PMME

     1917     6197    1       RETURN;

   6197  2 000052   000000 702200 xent               TSX2  ! X66_ARET

     1918     6198        /**/
     1919     6199    1   E_PMME:
     1920     6200    1       ALTRETURN;

   6200  2 000053   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

GET_MEMORY
 Sect OctLoc
   1     000   000001 777640   000004 006000   000000 177640   000000 006014    ................
   1     004   000600 000000   ****** ******                                    ........

REL_MEMORY
 Sect OctLoc
   1     006   000001 777640   000012 006000   000000 177640   000000 006014    ................
   1     012   000000 000000   ****** ******                                    ........

PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:331  
(unnamed)
 Sect OctLoc
   3     000   000000 006014   000001 777640                                    ........
     1921     6201    1   END VMA$ENLARGE_SEGMENT;
     1922     6202        %EOD;

PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:332  
--  Include file information  --

   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ENLARGE_SEGMENT.
PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:333  

 **** Variables and constants ****

  ****  Section 001  Data  VMA$ENLARGE_SEGMENT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 GET_MEMORY                 6-0-0/d STRC(216)   r     1 REL_MEMORY

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @SIZE                      3-0-0/w PTR         r     1 @VECTOR_
    *0-0-0/w SBIN        r     1 SIZE                      *0-0-0/d STRC(72)    r     1 VECTOR_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$UC


   Procedure VMA$ENLARGE_SEGMENT requires 44 words for executable code.
   Procedure VMA$ENLARGE_SEGMENT requires 6 words of local(AUTO) storage.
PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:334  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=VMA$ENLARGE_SEGMENT File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:04 Page:335  
          MINI XREF LISTING

E_PMME
      6200**LABEL    6175--CALLALT  6196--CALLALT
GET_MEMORY
      6148**DCL      6175<>CALL
GET_MEMORY.RESULTS_
      6148**DCL      6174<<ASSIGN
GET_MEMORY.V
      6148**DCL      6148--DCLINIT
GET_MEMORY.V.SEGSIZE#
      6151**DCL      6171<<ASSIGN   6173<<ASSIGN
M$FDS
      5542**DCL-ENT  6196--CALL
M$GDS
      5542**DCL-ENT  6175--CALL
REL_MEMORY
      6164**DCL      6196<>CALL
REL_MEMORY.RESULTS_
      6164**DCL      6195<<ASSIGN
REL_MEMORY.V
      6164**DCL      6164--DCLINIT
REL_MEMORY.V.SEGSIZE#
      6166**DCL      6192<<ASSIGN   6194<<ASSIGN
SIZE
      6135**DCL        18--PROC     6169--IF       6173>>ASSIGN   6188--ENTRY    6190--IF       6194>>ASSIGN
VECTOR_
      6131**DCL        18--PROC     6174--ASSIGN   6188--ENTRY    6195--ASSIGN
VECTOR_.W1.VSIZE#
      6131**DCL      6192>>ASSIGN
VECTOR_.W2
      6132**DCL      6133--REDEF

PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:336  
     1923        1        /*T***********************************************************/
     1924        2        /*T*                                                         */
     1925        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1926        4        /*T*                                                         */
     1927        5        /*T***********************************************************/
     1928        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1929        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1930        8        /*F*
     1931        9             NAME: VMA$GET_SITE_NAME
     1932       10             PURPOSE:
     1933       11                   To get the name of the local site.
     1934       12             DESCRIPTION.
     1935       13                   Look in the :NODES file in :SYS for name of desired site.
     1936       14        */
     1937       15        VMA$GET_SITE_NAME: PROC (KEY_VALUE, SITENAME, NODETYPE, EXTERNAL) ALTRET;
     1938       16        /***** Include files *****/
     1939       17          %INCLUDE CP_6;
     1940     5576          %INCLUDE CP_6_SUBS;
     1941     6116          %INCLUDE VM_DATA_R;
     1942     6547          %INCLUDE VW_NODEATER_E;
     1943     6603            %include B$TABLES_C;
     1944     6711          %B$XL_UPPER(NAME=lower_UPPER);
     1945     6715        /***** Parameters *****/
     1946     6716    1   DCL KEY_VALUE CHAR(8);
     1947     6717    1   DCL SITENAME  CHAR(8);
     1948     6718    1   DCL NODETYPE UBIN WORD;
     1949     6719    1   DCL 1 EXTERNAL,
     1950     6720    1         2 SITENAME CHAR (8),
     1951     6721    1         2 ACCT CHAR (8);
     1952     6722        /***** Working storage *****/
     1953     6723    1   DCL 1 NODEOVR AUTO,
     1954     6724    1         2 PATH_NAME           CHAR(8),
     1955     6725    1         2 ACCT REDEF PATH_NAME CHAR (8),
     1956     6726    1         2 NODE_NAME           CHAR(8),
     1957     6727    1         2 TYPE_DEST UNAL      UBIN BYTE,
     1958     6728    1         2 MODE UNAL           UBIN BYTE,
     1959     6729    1         2 TYPE_PATH UNAL      UBIN BYTE,
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:337  
     1960     6730    1         2 SPEED UNAL          UBIN BYTE,
     1961     6731    1         2 TIME UNAL           UBIN HALF;
     1962     6732          %VLP_NAME (FPTN=IN_KEY,LEN=8,NAME=' ');
     1963     6759    1   DCL INDX UBIN WORD AUTO;
     1964     6760        /***** Fpts *****/
     1965     6761        %FPT_OPEN (FPTN=OPEN_SITE,
     1966     6762                       ASN=FILE,
     1967     6763                       FUN=IN,
     1968     6764                       ACCT=VM_NODE_ACCT,
     1969     6765                       NAME=SITE_MAP_NAME);
     1970     6874
     1971     6875        %VLP_NAME (FPTN=SITE_MAP_NAME,
     1972     6876                       NAME=':NODES');
     1973     6903
     1974     6904        %VLP_NAME (FPTN=KEY_IAM,
     1975     6905                       NAME='*IAM    ');
     1976     6932
     1977     6933        %FPT_READ (FPTN=READ_SITE,
     1978     6934                       DCB=M$WORK,
     1979     6935                       KEYS=YES,
     1980     6936                       KEYR=NO,
     1981     6937                       KEY=IN_KEY,
     1982     6938                       WAIT=YES);
     1983     6977
     1984     6978        %VLP_ACCT (FPTN=VM_NODE_ACCT,STCLASS="CONSTANT SYMDEF",ACCT=':SYS    ');
     1985     6991
     1986     6992        %F$DCB;
     1987     7049        %EJECT;
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:338  
     1988     7050    1       OPEN_SITE.V.DCB# = M$NODE_NUM;
     1989     7051    1       READ_SITE.V.DCB# = M$NODE_NUM;
     1990     7052        /**/
     1991     7053    1       CALL XLATE (IN_KEY.NAME#, LOWER_UPPER, KEY_VALUE);
     1992     7054    1       READ_SITE.BUF_ = VECTOR (NODEOVR);
     1993     7055    1       IN_KEY.L# = LENGTHC(IN_KEY.NAME#); /* All keys in :NODES are 8 bytes */
     1994     7056        /*
     1995     7057             ***** If :NODES is not yet open, then open it.
     1996     7058                   Then read the definition. Leave :NODES open ...
     1997     7059        */
     1998     7060    1       IF DCBADDR(M$NODE_NUM) -> F$DCB.FCD# = %NO#
     1999     7061    1       THEN                            /* :NODES is not open yet */
     2000     7062    1           CALL M$OPEN(OPEN_SITE) ALTRET(E_SITE);
     2001     7063
     2002     7064    1   READ_NODE:
     2003     7065
     2004     7066    1       CALL M$READ(READ_SITE) ALTRET(E_SITE);
     2005     7067        /*
     2006     7068          ***** If a synonym record(8 bytes) is read, then the record contains
     2007     7069          ***** the node/site name. Otherwise, the key is the node/site name.
     2008     7070          ***** This type of record is 22 bytes in length.
     2009     7071        */
     2010     7072        /*
     2011     7073          ***** Check for synon.  If we find one, move the primary name into the key
     2012     7074          ***** and go read again (unless we were simply identifying this site,
     2013     7075          ***** in which case we can return.
     2014     7076        */
     2015     7077    1       IF DCBADDR(M$NODE_NUM) -> F$DCB.ARS# = 8
     2016     7078    2       THEN DO;
     2017     7079    2           IF KEY_VALUE = '*IAM'
     2018     7080    3           THEN DO;
     2019     7081    3               SITENAME = NODEOVR.PATH_NAME;
     2020     7082    3               RETURN;
     2021     7083    3           END;
     2022     7084    2           IN_KEY.NAME# = NODEOVR.PATH_NAME;
     2023     7085    2           IF IN_KEY.NAME# ~= VM_SITENAME
     2024     7086    2           THEN
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:339  
     2025     7087    2               GOTO READ_NODE;
     2026     7088        /*
     2027     7089          ***** If synonym for local site, fall thru to return information.
     2028     7090        */
     2029     7091    2           NODEOVR.TYPE_DEST = %N_CP6ND#;
     2030     7092    2           IF IN_KEY.NAME# ~= VM_SITENAME
     2031     7093    2           THEN
     2032     7094    2               GOTO READ_NODE;
     2033     7095        /*
     2034     7096          ***** If synonym for local site, fall thru to return information.
     2035     7097        */
     2036     7098    2           NODEOVR.TYPE_DEST = %N_CP6ND#;
     2037     7099    2       END;
     2038     7100        /*
     2039     7101          ***** Not a synon (or it's a synon that we've resolved).
     2040     7102        */
     2041     7103    1       SITENAME = IN_KEY.NAME#;
     2042     7104        /*
     2043     7105          ***** Return optional info if requested.
     2044     7106        */
     2045     7107    1       IF ADDR(NODETYPE) ~= ADDR(NIL)
     2046     7108    1       THEN
     2047     7109    1           NODETYPE = NODEOVR.TYPE_DEST;
     2048     7110    1       IF ADDR(EXTERNAL) ~= ADDR(NIL)
     2049     7111    2       THEN DO;
     2050     7112    2           IF NODEOVR.TYPE_DEST = %N_EXTERNAL#
     2051     7113    3           THEN DO;
     2052     7114    3               EXTERNAL.SITENAME = NODEOVR.NODE_NAME;
     2053     7115    3               EXTERNAL.ACCT = NODEOVR.ACCT;
     2054     7116    3           END;
     2055     7117    3           ELSE DO;
     2056     7118    3               EXTERNAL.SITENAME = ' ';
     2057     7119    3               EXTERNAL.ACCT = ' ';
     2058     7120    3           END;
     2059     7121    2       END;
     2060     7122        /*
     2061     7123          ***** All done; bye bye.
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:340  
     2062     7124        */
     2063     7125    1       RETURN;
     2064     7126        /*
     2065     7127             ***** If no :NODES, or it is screwed up
     2066     7128                   then assume ' '. (looks better than local) ...
     2067     7129        */
     2068     7130    1   E_SITE:
     2069     7131    1       IF IN_KEY.NAME# = KEY_IAM.NAME#
     2070     7132    1       THEN                            /* Assume local */
     2071     7133    2       DO;
     2072     7134    2           SITENAME = ' ';
     2073     7135    2           RETURN;
     2074     7136    2       END;
     2075     7137    1       ELSE                            /* Error */
     2076     7138    1           ALTRETURN;
     2077     7139        /*
     2078     7140             ***** Must be trouble ...
     2079     7141        */
     2080     7142    1   END VMA$GET_SITE_NAME;
     2081     7143        %EOD;

PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:341  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   VW_NODEATER_E.:VMB6TOU  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$GET_SITE_NAME.

   Procedure VMA$GET_SITE_NAME requires 107 words for executable code.
   Procedure VMA$GET_SITE_NAME requires 16 words of local(AUTO) storage.

PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:342  

 Object Unit name= VMA$GET_SITE_NAME                          File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:04:26.12 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    82    122  VMA$GET_SITE_NAME
   12  RoData even  UTS      3      3  VMA$GET_SITE_NAME
   13   Proc  even  none   107    153  VMA$GET_SITE_NAME
   14  RoData even  none     4      4  VMA$GET_SITE_NAME

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        4  VMA$GET_SITE_NAME

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
   12      0  VM_NODE_ACCT
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:343  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
                       nStd      0 X66_AUTO_4
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA                 r    B$XL_UPPER$
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:344  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:345  


     1923        1        /*T***********************************************************/
     1924        2        /*T*                                                         */
     1925        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1926        4        /*T*                                                         */
     1927        5        /*T***********************************************************/
     1928        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1929        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     1930        8        /*F*
     1931        9             NAME: VMA$GET_SITE_NAME
     1932       10             PURPOSE:
     1933       11                   To get the name of the local site.
     1934       12             DESCRIPTION.
     1935       13                   Look in the :NODES file in :SYS for name of desired site.
     1936       14        */
     1937       15        VMA$GET_SITE_NAME: PROC (KEY_VALUE, SITENAME, NODETYPE, EXTERNAL) ALTRET;

     15 13 000000   000000 700200 xent  VMA$GET_SIT* TSX0  ! X66_AUTO_4
        13 000001   000020 000004                    ZERO    16,4

     1938       16        /***** Include files *****/
     1939       17          %INCLUDE CP_6;
     1940     5576          %INCLUDE CP_6_SUBS;
     1941     6116          %INCLUDE VM_DATA_R;
     1942     6547          %INCLUDE VW_NODEATER_E;
     1943     6603            %include B$TABLES_C;
     1944     6711          %B$XL_UPPER(NAME=lower_UPPER);
     1945     6715        /***** Parameters *****/
     1946     6716    1   DCL KEY_VALUE CHAR(8);
     1947     6717    1   DCL SITENAME  CHAR(8);
     1948     6718    1   DCL NODETYPE UBIN WORD;
     1949     6719    1   DCL 1 EXTERNAL,
     1950     6720    1         2 SITENAME CHAR (8),
     1951     6721    1         2 ACCT CHAR (8);
     1952     6722        /***** Working storage *****/
     1953     6723    1   DCL 1 NODEOVR AUTO,
     1954     6724    1         2 PATH_NAME           CHAR(8),
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:346  
     1955     6725    1         2 ACCT REDEF PATH_NAME CHAR (8),
     1956     6726    1         2 NODE_NAME           CHAR(8),
     1957     6727    1         2 TYPE_DEST UNAL      UBIN BYTE,
     1958     6728    1         2 MODE UNAL           UBIN BYTE,
     1959     6729    1         2 TYPE_PATH UNAL      UBIN BYTE,
     1960     6730    1         2 SPEED UNAL          UBIN BYTE,
     1961     6731    1         2 TIME UNAL           UBIN HALF;
     1962     6732          %VLP_NAME (FPTN=IN_KEY,LEN=8,NAME=' ');
     1963     6759    1   DCL INDX UBIN WORD AUTO;
     1964     6760        /***** Fpts *****/
     1965     6761        %FPT_OPEN (FPTN=OPEN_SITE,
     1966     6762                       ASN=FILE,
     1967     6763                       FUN=IN,
     1968     6764                       ACCT=VM_NODE_ACCT,
     1969     6765                       NAME=SITE_MAP_NAME);
     1970     6874
     1971     6875        %VLP_NAME (FPTN=SITE_MAP_NAME,
     1972     6876                       NAME=':NODES');
     1973     6903
     1974     6904        %VLP_NAME (FPTN=KEY_IAM,
     1975     6905                       NAME='*IAM    ');
     1976     6932
     1977     6933        %FPT_READ (FPTN=READ_SITE,
     1978     6934                       DCB=M$WORK,
     1979     6935                       KEYS=YES,
     1980     6936                       KEYR=NO,
     1981     6937                       KEY=IN_KEY,
     1982     6938                       WAIT=YES);
     1983     6977
     1984     6978        %VLP_ACCT (FPTN=VM_NODE_ACCT,STCLASS="CONSTANT SYMDEF",ACCT=':SYS    ');
     1985     6991
     1986     6992        %F$DCB;
     1987     7049        %EJECT;
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:347  
     1988     7050    1       OPEN_SITE.V.DCB# = M$NODE_NUM;

   7050 13 000002   000000 720000 xsym               LXL0    M$NODE_NUM
        13 000003   000050 740000 11                 STX0    OPEN_SITE+36

     1989     7051    1       READ_SITE.V.DCB# = M$NODE_NUM;

   7051 13 000004   000114 740000 11                 STX0    READ_SITE+8

     1990     7052        /**/
     1991     7053    1       CALL XLATE (IN_KEY.NAME#, LOWER_UPPER, KEY_VALUE);

   7053 13 000005   200003 470500                    LDP0    @KEY_VALUE,,AUTO
        13 000006   000000 471400 xsym               LDP1    B$XL_UPPER$
        13 000007   040000 160500                    MVT     fill='040'O
        13 000010   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
        13 000011   000000 200010 11                 ADSC9   IN_KEY                   cn=1,n=8
        13 000012   100000 000100                    ARG     0,,PR1

     1992     7054    1       READ_SITE.BUF_ = VECTOR (NODEOVR);

   7054 13 000013   000000 235000 14                 LDA     0
        13 000014   200016 452500                    STP2    INDX+1,,AUTO
        13 000015   200016 236100                    LDQ     INDX+1,,AUTO
        13 000016   000007 036003                    ADLQ    7,DU
        13 000017   000110 757000 11                 STAQ    READ_SITE+4

     1993     7055    1       IN_KEY.L# = LENGTHC(IN_KEY.NAME#); /* All keys in :NODES are 8 bytes */

   7055 13 000020   010000 236003                    LDQ     4096,DU
        13 000021   000000 552040 11                 STBQ    IN_KEY,'40'O

     1994     7056        /*
     1995     7057             ***** If :NODES is not yet open, then open it.
     1996     7058                   Then read the definition. Leave :NODES open ...
     1997     7059        */
     1998     7060    1       IF DCBADDR(M$NODE_NUM) -> F$DCB.FCD# = %NO#
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:348  

   7060 13 000022   000001 473400 14                 LDP3    1
        13 000023   300000 474500                    LDP4    0,,PR3
        13 000024   400000 475510                    LDP5    0,X0,PR4
        13 000025   500031 236100                    LDQ     25,,PR5
        13 000026   020000 316007                    CANQ    8192,DL
        13 000027   000034 601000 13                 TNZ     READ_NODE

     1999     7061    1       THEN                            /* :NODES is not open yet */
     2000     7062    1           CALL M$OPEN(OPEN_SITE) ALTRET(E_SITE);

   7062 13 000030   000004 630400 11                 EPPR0   OPEN_SITE
        13 000031   450000 713400                    CLIMB   alt,open
        13 000032   410400 401760                    pmme    nvectors=18
        13 000033   000141 702000 13                 TSX2    E_SITE

     2001     7063
     2002     7064    1   READ_NODE:
     2003     7065
     2004     7066    1       CALL M$READ(READ_SITE) ALTRET(E_SITE);

   7066 13 000034   000104 630400 11    READ_NODE    EPPR0   READ_SITE
        13 000035   440000 713400                    CLIMB   alt,read
        13 000036   401400 401760                    pmme    nvectors=4
        13 000037   000141 702000 13                 TSX2    E_SITE

     2005     7067        /*
     2006     7068          ***** If a synonym record(8 bytes) is read, then the record contains
     2007     7069          ***** the node/site name. Otherwise, the key is the node/site name.
     2008     7070          ***** This type of record is 22 bytes in length.
     2009     7071        */
     2010     7072        /*
     2011     7073          ***** Check for synon.  If we find one, move the primary name into the key
     2012     7074          ***** and go read again (unless we were simply identifying this site,
     2013     7075          ***** in which case we can return.
     2014     7076        */
     2015     7077    1       IF DCBADDR(M$NODE_NUM) -> F$DCB.ARS# = 8
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:349  

   7077 13 000040   000001 470400 14                 LDP0    1
        13 000041   000000 471500                    LDP1    0,,PR0
        13 000042   000000 720000 xsym               LXL0    M$NODE_NUM
        13 000043   100000 473510                    LDP3    0,X0,PR1
        13 000044   300000 235100                    LDA     0,,PR3
        13 000045   000010 115007                    CMPA    8,DL
        13 000046   000077 601000 13                 TNZ     s:7103

     2016     7078    2       THEN DO;

     2017     7079    2           IF KEY_VALUE = '*IAM'

   7079 13 000047   200003 474500                    LDP4    @KEY_VALUE,,AUTO
        13 000050   040000 106500                    CMPC    fill='040'O
        13 000051   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
        13 000052   000002 000004 12                 ADSC9   VM_NODE_ACCT+2           cn=0,n=4
        13 000053   000061 601000 13                 TNZ     s:7084

     2018     7080    3           THEN DO;

     2019     7081    3               SITENAME = NODEOVR.PATH_NAME;

   7081 13 000054   200004 475500                    LDP5    @SITENAME,,AUTO
        13 000055   040100 100500                    MLR     fill='040'O
        13 000056   200007 000010                    ADSC9   NODEOVR,,AUTO            cn=0,n=8
        13 000057   500000 000010                    ADSC9   0,,PR5                   cn=0,n=8

     2020     7082    3               RETURN;

   7082 13 000060   000000 702200 xent               TSX2  ! X66_ARET

     2021     7083    3           END;
     2022     7084    2           IN_KEY.NAME# = NODEOVR.PATH_NAME;

   7084 13 000061   040000 100500                    MLR     fill='040'O
        13 000062   200007 000010                    ADSC9   NODEOVR,,AUTO            cn=0,n=8
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:350  
        13 000063   000000 200010 11                 ADSC9   IN_KEY                   cn=1,n=8

     2023     7085    2           IF IN_KEY.NAME# ~= VM_SITENAME

   7085 13 000064   040000 106400                    CMPC    fill='040'O
        13 000065   000000 200010 11                 ADSC9   IN_KEY                   cn=1,n=8
        13 000066   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        13 000067   000034 601000 13                 TNZ     READ_NODE

     2024     7086    2           THEN
     2025     7087    2               GOTO READ_NODE;
     2026     7088        /*
     2027     7089          ***** If synonym for local site, fall thru to return information.
     2028     7090        */
     2029     7091    2           NODEOVR.TYPE_DEST = %N_CP6ND#;

   7091 13 000070   147000 236003                    LDQ     52736,DU
        13 000071   200013 552140                    STBQ    NODEOVR+4,'40'O,AUTO

     2030     7092    2           IF IN_KEY.NAME# ~= VM_SITENAME

   7092 13 000072   040000 106400                    CMPC    fill='040'O
        13 000073   000000 200010 11                 ADSC9   IN_KEY                   cn=1,n=8
        13 000074   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        13 000075   000034 601000 13                 TNZ     READ_NODE

     2031     7093    2           THEN
     2032     7094    2               GOTO READ_NODE;
     2033     7095        /*
     2034     7096          ***** If synonym for local site, fall thru to return information.
     2035     7097        */
     2036     7098    2           NODEOVR.TYPE_DEST = %N_CP6ND#;

   7098 13 000076   200013 552140                    STBQ    NODEOVR+4,'40'O,AUTO

     2037     7099    2       END;

PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:351  
     2038     7100        /*
     2039     7101          ***** Not a synon (or it's a synon that we've resolved).
     2040     7102        */
     2041     7103    1       SITENAME = IN_KEY.NAME#;

   7103 13 000077   200004 474500                    LDP4    @SITENAME,,AUTO
        13 000100   040100 100400                    MLR     fill='040'O
        13 000101   000000 200010 11                 ADSC9   IN_KEY                   cn=1,n=8
        13 000102   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8

     2042     7104        /*
     2043     7105          ***** Return optional info if requested.
     2044     7106        */
     2045     7107    1       IF ADDR(NODETYPE) ~= ADDR(NIL)

   7107 13 000103   200005 236100                    LDQ     @NODETYPE,,AUTO
        13 000104   000002 116000 14                 CMPQ    2
        13 000105   000112 600000 13                 TZE     s:7110

     2046     7108    1       THEN
     2047     7109    1           NODETYPE = NODEOVR.TYPE_DEST;

   7109 13 000106   200005 473500                    LDP3    @NODETYPE,,AUTO
        13 000107   200013 236100                    LDQ     NODEOVR+4,,AUTO
        13 000110   000033 772000                    QRL     27
        13 000111   300000 756100                    STQ     0,,PR3

     2048     7110    1       IF ADDR(EXTERNAL) ~= ADDR(NIL)

   7110 13 000112   200006 236100                    LDQ     @EXTERNAL,,AUTO
        13 000113   000002 116000 14                 CMPQ    2
        13 000114   000140 600000 13                 TZE     s:7125

     2049     7111    2       THEN DO;

     2050     7112    2           IF NODEOVR.TYPE_DEST = %N_EXTERNAL#

PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:352  
   7112 13 000115   200013 236100                    LDQ     NODEOVR+4,,AUTO
        13 000116   777000 376003                    ANQ     -512,DU
        13 000117   157000 116003                    CMPQ    56832,DU
        13 000120   000131 601000 13                 TNZ     s:7118

     2051     7113    3           THEN DO;

     2052     7114    3               EXTERNAL.SITENAME = NODEOVR.NODE_NAME;

   7114 13 000121   200006 473500                    LDP3    @EXTERNAL,,AUTO
        13 000122   040100 100500                    MLR     fill='040'O
        13 000123   200011 000010                    ADSC9   NODEOVR+2,,AUTO          cn=0,n=8
        13 000124   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8

     2053     7115    3               EXTERNAL.ACCT = NODEOVR.ACCT;

   7115 13 000125   040100 100500                    MLR     fill='040'O
        13 000126   200007 000010                    ADSC9   NODEOVR,,AUTO            cn=0,n=8
        13 000127   300002 000010                    ADSC9   2,,PR3                   cn=0,n=8

     2054     7116    3           END;

   7116 13 000130   000140 710000 13                 TRA     s:7125

     2055     7117    3           ELSE DO;

     2056     7118    3               EXTERNAL.SITENAME = ' ';

   7118 13 000131   200006 473500                    LDP3    @EXTERNAL,,AUTO
        13 000132   040100 100400                    MLR     fill='040'O
        13 000133   000003 000001 14                 ADSC9   3                        cn=0,n=1
        13 000134   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8

     2057     7119    3               EXTERNAL.ACCT = ' ';

   7119 13 000135   040100 100400                    MLR     fill='040'O
        13 000136   000003 000001 14                 ADSC9   3                        cn=0,n=1
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:353  
        13 000137   300002 000010                    ADSC9   2,,PR3                   cn=0,n=8

     2058     7120    3           END;

     2059     7121    2       END;

     2060     7122        /*
     2061     7123          ***** All done; bye bye.
     2062     7124        */
     2063     7125    1       RETURN;

   7125 13 000140   000000 702200 xent               TSX2  ! X66_ARET

     2064     7126        /*
     2065     7127             ***** If no :NODES, or it is screwed up
     2066     7128                   then assume ' '. (looks better than local) ...
     2067     7129        */
     2068     7130    1   E_SITE:
     2069     7131    1       IF IN_KEY.NAME# = KEY_IAM.NAME#

   7131 13 000141   040000 106400       E_SITE       CMPC    fill='040'O
        13 000142   000000 200010 11                 ADSC9   IN_KEY                   cn=1,n=8
        13 000143   000100 200010 11                 ADSC9   KEY_IAM                  cn=1,n=8
        13 000144   000152 601000 13                 TNZ     s:7138

     2070     7132    1       THEN                            /* Assume local */
     2071     7133    2       DO;

     2072     7134    2           SITENAME = ' ';

   7134 13 000145   200004 470500                    LDP0    @SITENAME,,AUTO
        13 000146   040100 100400                    MLR     fill='040'O
        13 000147   000003 000001 14                 ADSC9   3                        cn=0,n=1
        13 000150   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

     2073     7135    2           RETURN;

PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:354  
   7135 13 000151   000000 702200 xent               TSX2  ! X66_ARET

     2074     7136    2       END;
     2075     7137    1       ELSE                            /* Error */
     2076     7138    1           ALTRETURN;

   7138 13 000152   000000 702200 xent               TSX2  ! X66_AALT

IN_KEY
 Sect OctLoc
  11     000   001040 040040   040040 040040   040*** ******                    .        ...

OPEN_SITE
 Sect OctLoc
  11     004   000025 777640   000050 006000   000000 177640   000000 006014    .....(..........
  11     010   000000 177640   000000 006014   000001 577640   000076 006000    .............>..
  11     014   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     030*  000001 777640   000000 006000   000000 177640   000000 006014    ................
  11     034   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     050*  000000 000042   000000 002001   252525 000000   000040 252520    ..."......... ..
  11     054   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  11     060   000000 000000   000000 000000   000000 000000   000000 000000    ................
  11     064   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  11     070   040040 040040   000000 000000   000000 000000   000000 000000        ............
  11     074   000000 000000   ****** ******                                    ........

SITE_MAP_NAME
 Sect OctLoc
  11     076   006072 116117   104105 123***                                    .:NODES.

KEY_IAM
 Sect OctLoc
  11     100   010052 111101   115040 040040   040*** ******                    .*IAM    ...

READ_SITE
 Sect OctLoc
  11     104   000005 777640   000114 006000   000002 177640   000000 006000    .....L..........
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:355  
  11     110   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     114   000000 600000   000000 000000   000000 000000   000000 000000    ................
  11     120   000000 000000   000000 000000                                    ........

VM_NODE_ACCT
 Sect OctLoc
  12     000   072123 131123   040040 040040                                    :SYS

(unnamed)
 Sect OctLoc
  12     002   052111 101115                                                    *IAM

(unnamed)
 Sect OctLoc
  14     000   000005 377640   000000 006003   000000 006014   040040 040040    ............
     2077     7139        /*
     2078     7140             ***** Must be trouble ...
     2079     7141        */
     2080     7142    1   END VMA$GET_SITE_NAME;
     2081     7143        %EOD;

PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:356  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   VW_NODEATER_E.:VMB6TOU  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$GET_SITE_NAME.
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:357  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$GET_SITE_NAME

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(81)    r     1 IN_KEY                   100-0-0/c STRC(81)    r     1 KEY_IAM
     4-0-0/d STRC(2088)  r     1 OPEN_SITE                104-0-0/d STRC(504)   r     1 READ_SITE
    76-0-0/c STRC(63)    r     1 SITE_MAP_NAME

  ****  Section 012 RoData VMA$GET_SITE_NAME

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(72)    r     1 VM_NODE_ACCT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w PTR         r     1 @EXTERNAL                  3-0-0/w PTR         r     1 @KEY_VALUE
     5-0-0/w PTR         r     1 @NODETYPE                  4-0-0/w PTR         r     1 @SITENAME
    *0-0-0/c STRC(144)   r     1 EXTERNAL                  15-0-0/w UBIN              1 INDX
    *0-0-0/c CHAR(8)     r     1 KEY_VALUE                  7-0-0/c STRC(198)   r     1 NODEOVR
    *0-0-0/w UBIN        r     1 NODETYPE                  *0-0-0/c CHAR(8)     r     1 SITENAME

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/w PTR         r     1 B$XL_UPPER$                0-0-0/c ASTR(9)     r     1 ERRMSG_FID
     0-0-0/w UBIN              1 M$DO_NUM                   0-0-0/w UBIN              1 M$LO_NUM
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:358  
     0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM         0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM
     0-0-0/w UBIN              1 M$MAIL_FILE_NUM            0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM
     0-0-0/w UBIN              1 M$ME_NUM                   0-0-0/w UBIN        r     1 M$NODE_NUM
     0-0-0/w UBIN              1 M$SI_NUM                   0-0-0/w UBIN              1 M$WORK_NUM
     0-0-0/w PTR               1 VM_ADDLIST$                0-0-0/d VECT              1 VM_ADDLIST_
     0-0-0/w PTR               1 VM_ADDREC$                 0-0-0/d VECT              1 VM_ADDREC_
     0-0-0/w PTR               1 VM_COPY$                   0-0-0/d VECT              1 VM_COPY_
     0-0-0/w PTR               1 VM_ENCLLIST$               0-0-0/d VECT              1 VM_ENCLLIST_
     0-0-0/w PTR               1 VM_ENCLREC$                0-0-0/d VECT              1 VM_ENCLREC_
     0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME       0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME
     0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS       0-0-0/w PTR               1 VM_HEADER$
     0-0-0/d VECT              1 VM_HEADER_                 0-0-0/d VECT              1 VM_HEADER_INIT_
     0-0-0/w PTR               1 VM_INPUT$                  0-0-0/d VECT              1 VM_INPUT_
     0-0-0/c STRC(72)          1 VM_MAILCG_NAME             0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA
     0-0-0/c STRC(72)          1 VM_MAIL_ACCT               0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME
     0-0-0/w PTR               1 VM_PARSEAREA$              0-0-0/d VECT              1 VM_PARSEAREA_
     0-0-0/w PTR               1 VM_PROFILE$                0-0-0/d VECT              1 VM_PROFILE_
     0-0-0/w PTR               1 VM_SELECT$                 0-0-0/d VECT              1 VM_SELECT_
     0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME          0-0-0/c CHAR(8)     r     1 VM_SITENAME
     0-0-0/w PTR               1 VM_WORK$                   0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/d STRC(4608)  r     1 LOWER_UPPER
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$GET_SITE_NAME requires 107 words for executable code.
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:359  
   Procedure VMA$GET_SITE_NAME requires 16 words of local(AUTO) storage.
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:360  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:361  
          MINI XREF LISTING

B$XL_UPPER$
      6712**DCL      6713--IMP-PTR  7053>>CALLBLT
ERRMSG_FID.L#
      6392**DCL      6392--IMP-SIZ
EXTERNAL
      6719**DCL        15--PROC     7110--IF
EXTERNAL.ACCT
      6721**DCL      7115<<ASSIGN   7119<<ASSIGN
EXTERNAL.SITENAME
      6720**DCL      7114<<ASSIGN   7118<<ASSIGN
E_SITE
      7131**LABEL    7062--CALLALT  7066--CALLALT
F$DCB.ACTPOS
      7025**DCL      7025--REDEF
F$DCB.ARS#
      6999**DCL      6999--REDEF    7077>>IF
F$DCB.ATTR
      7018**DCL      7019--REDEF
F$DCB.BORROW
      7033**DCL      7033--REDEF    7033--REDEF    7033--REDEF
F$DCB.DCBNAME.L
      7047**DCL      7047--IMP-SIZ
F$DCB.EOMCHAR#
      7003**DCL      7003--REDEF
F$DCB.FCD#
      7012**DCL      7060>>IF
F$DCB.FLDID
      7028**DCL      7028--REDEF
F$DCB.FORM$
      7022**DCL      7022--REDEF
F$DCB.FSECT
      7038**DCL      7038--REDEF
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:362  
F$DCB.FSN#
      7015**DCL      7015--REDEF    7015--REDEF    7016--REDEF
F$DCB.HEADER$
      7021**DCL      7021--REDEF
F$DCB.IXTNSIZE#
      7019**DCL      7019--REDEF
F$DCB.LASTSTA$
      7008**DCL      7008--REDEF
F$DCB.LVL
      7034**DCL      7034--REDEF
F$DCB.NAME#.C
      7009**DCL      7009--REDEF
F$DCB.NOEOF
      7031**DCL      7031--REDEF
F$DCB.NRECS#
      7020**DCL      7020--REDEF
F$DCB.NRECX
      7039**DCL      7039--REDEF
F$DCB.OHDR
      7031**DCL      7031--REDEF
F$DCB.ORG#
      7014**DCL      7014--REDEF
F$DCB.PRECNO
      7037**DCL      7037--REDEF
F$DCB.RCSZ
      7043**DCL      7043--REDEF
F$DCB.RES#
      7010**DCL      7010--REDEF
F$DCB.SETX
      7022**DCL      7022--REDEF
F$DCB.TAB$
      7022**DCL      7022--REDEF
F$DCB.TDA
      7036**DCL      7037--REDEF
F$DCB.WSN#
      7010**DCL      7010--REDEF
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:363  
IN_KEY
      6757**DCL      6955--DCLINIT  6956--DCLINIT
IN_KEY.L#
      6757**DCL      7055<<ASSIGN
IN_KEY.NAME#
      6757**DCL      7053<<CALLBLT  7055--ASSIGN   7084<<ASSIGN   7085>>IF       7092>>IF       7103>>ASSIGN
      7131>>IF
KEY_IAM.NAME#
      6930**DCL      7131>>IF
KEY_VALUE
      6716**DCL        15--PROC     7053>>CALLBLT  7079>>IF
LOWER_UPPER
      6713**DCL      7053>>CALLBLT
M$NODE_NUM
      6320**DCL      7050>>ASSIGN   7051>>ASSIGN   7060--IF       7077--IF
M$OPEN
      5504**DCL-ENT  7062--CALL
M$READ
      5505**DCL-ENT  7066--CALL
NODEOVR
      6723**DCL      7054--ASSIGN
NODEOVR.ACCT
      6725**DCL      7115>>ASSIGN
NODEOVR.NODE_NAME
      6726**DCL      7114>>ASSIGN
NODEOVR.PATH_NAME
      6724**DCL      6725--REDEF    7081>>ASSIGN   7084>>ASSIGN
NODEOVR.TYPE_DEST
      6727**DCL      7091<<ASSIGN   7098<<ASSIGN   7109>>ASSIGN   7112>>IF
NODETYPE
      6718**DCL        15--PROC     7107--IF       7109<<ASSIGN
OPEN_SITE
      6830**DCL      7062<>CALL
OPEN_SITE.ACSVEH_
      6832**DCL      6833--REDEF
OPEN_SITE.ALTKEYS_
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:364  
      6838**DCL      6839--REDEF    6839--REDEF
OPEN_SITE.HDR_
      6837**DCL      6838--REDEF
OPEN_SITE.TAB_
      6836**DCL      6837--REDEF
OPEN_SITE.UHL_
      6830**DCL      6831--REDEF    6831--REDEF
OPEN_SITE.V
      6839**DCL      6830--DCLINIT
OPEN_SITE.V.DCB#
      6839**DCL      7050<<ASSIGN
OPEN_SITE.V.FSN#
      6870**DCL      6870--REDEF    6870--REDEF
OPEN_SITE.WSN_
      6836**DCL      6836--REDEF
READ_NODE
      7066**LABEL    7087--GOTO     7094--GOTO
READ_SITE
      6955**DCL      7066<>CALL
READ_SITE.BUF_
      6957**DCL      7054<<ASSIGN
READ_SITE.STATION_
      6958**DCL      6959--REDEF
READ_SITE.V
      6959**DCL      6955--DCLINIT
READ_SITE.V.DCB#
      6959**DCL      7051<<ASSIGN
READ_SITE.V.DVBYTE.REREAD#
      6970**DCL      6970--REDEF
READ_SITE.V.INDX#
      6968**DCL      6968--REDEF
SITENAME
      6717**DCL        15--PROC     7081<<ASSIGN   7103<<ASSIGN   7134<<ASSIGN
SITE_MAP_NAME
      6901**DCL      6831--DCLINIT
VM_NODE_ACCT
PL6.E3A0      #009=VMA$GET_SITE_NAME File=VMA$SUBR.:VMB6TSI                      WED 08/20/97 15:04 Page:365  
      6989**DCL      6835--DCLINIT
VM_SITENAME
      6515**DCL      7085>>IF       7092>>IF
X$STRING.SIZ
      6238**DCL      6239--IMP-SIZ

PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:366  
     2082        1        /*T***********************************************************/
     2083        2        /*T*                                                         */
     2084        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2085        4        /*T*                                                         */
     2086        5        /*T***********************************************************/
     2087        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2088        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2089        8        /*F*
     2090        9            NAME: VMA$MOREMEM
     2091       10            PURPOSE:
     2092       11                  To get more memory for ADAPT
     2093       12            DESCRIPTION:
     2094       13                  This routine has three parameters:
     2095       14
     2096       15                  SIZE - number of words to acquire (optional: default is 1024)
     2097       16                  VECT_ - vector framing allocated memory.
     2098       17                  ERRCODE - error code which contains error code if altret is
     2099       18                            taken while trying to get memory.
     2100       19        */
     2101       20        VMA$MOREMEM: PROC (SIZE, VECT_, ERRCODE) ALTRET;
     2102       21        /***** Include files *****/
     2103       22        %INCLUDE CP_6;
     2104     5581        %INCLUDE CP_6_SUBS;
     2105     6121        %INCLUDE B$JIT;
     2106     6724        %INCLUDE VM_DATA_R;
     2107     7155        /***** Paramaters *****/
     2108     7156    1   DCL SIZE SBIN WORD;
     2109     7157        %VLP_VECTOR(FPTN=VECT_,STCLASS=" ");
     2110     7172        %VLP_ERRCODE(FPTN=ERRCODE,STCLASS=" ");
     2111     7217        /***** entry points *****/
     2112     7218    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
     2113     7219    1   DCL VMA$SHRINK_SEGMENT ENTRY(2) ALTRET;
     2114     7220        /***** Macros *****/
     2115     7221        %B$TCB(STCLASS="BASED(B$TCB$)");
     2116     7224        %B$ALT;
     2117     7232        %EJECT;
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:367  
     2118     7233    2       IF SIZE < 0 THEN DO; /* if size parameter given is negative */
     2119     7234    2           SIZE = - SIZE; /* convert it to its positive value */
     2120     7235    2           CALL VMA$SHRINK_SEGMENT(VM_PARSEAREA_,SIZE) ALTRET(E_PMME);
     2121     7236    2           VECT_.PTR$ = ADDR(NIL);
     2122     7237    2           VECT_.W1.VSIZE# = 0;
     2123     7238    2       END; /* if size is negative */
     2124     7239    2       ELSE DO; /* if size is positive */
     2125     7240    2           VECT_.PTR$ = PINCRC(VBASE(VM_PARSEAREA_),VBOUND(VM_PARSEAREA_) + 1);
     2126     7241    2           CALL VMA$ENLARGE_SEGMENT (VM_PARSEAREA_,SIZE) ALTRET(E_PMME);
     2127     7242    2           VECT_.W1.VSIZE# = (SIZE * 4) - 1; /* set vector bound */
     2128     7243    2       END; /* if size is positive */
     2129     7244    1       RETURN;
     2130     7245    1   E_PMME:
     2131     7246    1       ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     2132     7247    1       ALTRETURN;
     2133     7248    1   END VMA$MOREMEM;
     2134     7249        %EOD;

PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:368  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:LIB_E05  is referenced.
   B$JIT.:LIB_E05  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$MOREMEM.

   Procedure VMA$MOREMEM requires 51 words for executable code.
   Procedure VMA$MOREMEM requires 8 words of local(AUTO) storage.

PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:369  

 Object Unit name= VMA$MOREMEM                                File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:04:43.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Proc  even  none    51     63  VMA$MOREMEM
   12  RoData even  none     4      4  VMA$MOREMEM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes    yes     yes      Std        3  VMA$MOREMEM
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:370  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VMA$SHRINK_SEGMENT
 yes     yes           Std       2 VMA$ENLARGE_SEGMENT
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:371  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:372  


     2082        1        /*T***********************************************************/
     2083        2        /*T*                                                         */
     2084        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2085        4        /*T*                                                         */
     2086        5        /*T***********************************************************/
     2087        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2088        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2089        8        /*F*
     2090        9            NAME: VMA$MOREMEM
     2091       10            PURPOSE:
     2092       11                  To get more memory for ADAPT
     2093       12            DESCRIPTION:
     2094       13                  This routine has three parameters:
     2095       14
     2096       15                  SIZE - number of words to acquire (optional: default is 1024)
     2097       16                  VECT_ - vector framing allocated memory.
     2098       17                  ERRCODE - error code which contains error code if altret is
     2099       18                            taken while trying to get memory.
     2100       19        */
     2101       20        VMA$MOREMEM: PROC (SIZE, VECT_, ERRCODE) ALTRET;

     20 11 000000   000000 700200 xent  VMA$MOREMEM  TSX0  ! X66_AUTO_3
        11 000001   000010 000003                    ZERO    8,3

     2102       21        /***** Include files *****/
     2103       22        %INCLUDE CP_6;
     2104     5581        %INCLUDE CP_6_SUBS;
     2105     6121        %INCLUDE B$JIT;
     2106     6724        %INCLUDE VM_DATA_R;
     2107     7155        /***** Paramaters *****/
     2108     7156    1   DCL SIZE SBIN WORD;
     2109     7157        %VLP_VECTOR(FPTN=VECT_,STCLASS=" ");
     2110     7172        %VLP_ERRCODE(FPTN=ERRCODE,STCLASS=" ");
     2111     7217        /***** entry points *****/
     2112     7218    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
     2113     7219    1   DCL VMA$SHRINK_SEGMENT ENTRY(2) ALTRET;
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:373  
     2114     7220        /***** Macros *****/
     2115     7221        %B$TCB(STCLASS="BASED(B$TCB$)");
     2116     7224        %B$ALT;
     2117     7232        %EJECT;
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:374  
     2118     7233    2       IF SIZE < 0 THEN DO; /* if size parameter given is negative */

   7233 11 000002   200003 470500                    LDP0    @SIZE,,AUTO
        11 000003   000000 235100                    LDA     0,,PR0
        11 000004   000025 605000 11                 TPL     s:7240

     2119     7234    2           SIZE = - SIZE; /* convert it to its positive value */

   7234 11 000005   000000 235100                    LDA     0,,PR0
        11 000006   000000 531000                    NEG     0
        11 000007   000000 755100                    STA     0,,PR0

     2120     7235    2           CALL VMA$SHRINK_SEGMENT(VM_PARSEAREA_,SIZE) ALTRET(E_PMME);

   7235 11 000010   200003 236100                    LDQ     @SIZE,,AUTO
        11 000011   000001 235000 12                 LDA     1
        11 000012   200006 757100                    STAQ    @ERRCODE+1,,AUTO
        11 000013   200006 630500                    EPPR0   @ERRCODE+1,,AUTO
        11 000014   000000 631400 12                 EPPR1   0
        11 000015   000000 701000 xent               TSX1    VMA$SHRINK_SEGMENT
        11 000016   000055 702000 11                 TSX2    E_PMME

     2121     7236    2           VECT_.PTR$ = ADDR(NIL);

   7236 11 000017   000002 236000 12                 LDQ     2
        11 000020   200004 470500                    LDP0    @VECT_,,AUTO
        11 000021   000001 756100                    STQ     1,,PR0

     2122     7237    2           VECT_.W1.VSIZE# = 0;

   7237 11 000022   177777 236007                    LDQ     65535,DL
        11 000023   000000 356100                    ANSQ    0,,PR0

     2123     7238    2       END; /* if size is negative */

   7238 11 000024   000054 710000 11                 TRA     s:7244

PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:375  
     2124     7239    2       ELSE DO; /* if size is positive */

     2125     7240    2           VECT_.PTR$ = PINCRC(VBASE(VM_PARSEAREA_),VBOUND(VM_PARSEAREA_) + 1);

   7240 11 000025   000000 236000 xsym               LDQ     VM_PARSEAREA_
        11 000026   000020 772000                    QRL     16
        11 000027   000020 736000                    QLS     16
        11 000030   200000 036007                    ADLQ    65536,DL
        11 000031   000001 036000 xsym               ADLQ    VM_PARSEAREA_+1
        11 000032   200004 471500                    LDP1    @VECT_,,AUTO
        11 000033   100001 756100                    STQ     1,,PR1

     2126     7241    2           CALL VMA$ENLARGE_SEGMENT (VM_PARSEAREA_,SIZE) ALTRET(E_PMME);

   7241 11 000034   200003 236100                    LDQ     @SIZE,,AUTO
        11 000035   000001 235000 12                 LDA     1
        11 000036   200006 757100                    STAQ    @ERRCODE+1,,AUTO
        11 000037   200006 630500                    EPPR0   @ERRCODE+1,,AUTO
        11 000040   000000 631400 12                 EPPR1   0
        11 000041   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        11 000042   000055 702000 11                 TSX2    E_PMME

     2127     7242    2           VECT_.W1.VSIZE# = (SIZE * 4) - 1; /* set vector bound */

   7242 11 000043   200004 470500                    LDP0    @VECT_,,AUTO
        11 000044   200003 471500                    LDP1    @SIZE,,AUTO
        11 000045   100000 236100                    LDQ     0,,PR1
        11 000046   000002 736000                    QLS     2
        11 000047   000001 136007                    SBLQ    1,DL
        11 000050   000020 736000                    QLS     16
        11 000051   000000 676100                    ERQ     0,,PR0
        11 000052   000003 376000 12                 ANQ     3
        11 000053   000000 656100                    ERSQ    0,,PR0

     2128     7243    2       END; /* if size is positive */

     2129     7244    1       RETURN;
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:376  

   7244 11 000054   000000 702200 xent               TSX2  ! X66_ARET

     2130     7245    1   E_PMME:
     2131     7246    1       ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   7246 11 000055   000000 470400 xsym  E_PMME       LDP0    B$TCB$
        11 000056   000000 471500                    LDP1    0,,PR0
        11 000057   100102 236100                    LDQ     66,,PR1
        11 000060   200005 473500                    LDP3    @ERRCODE,,AUTO
        11 000061   300000 756100                    STQ     0,,PR3

     2132     7247    1       ALTRETURN;

   7247 11 000062   000000 702200 xent               TSX2  ! X66_AALT

(unnamed)
 Sect OctLoc
  12     000   000002 000000   000000 006000   000000 006014   777777 600000    ................
     2133     7248    1   END VMA$MOREMEM;
     2134     7249        %EOD;

PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:377  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:LIB_E05  is referenced.
   B$JIT.:LIB_E05  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$MOREMEM.
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:378  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @ERRCODE                   3-0-0/w PTR         r     1 @SIZE
     4-0-0/w PTR         r     1 @VECT_                    *0-0-0/w STRC        r     1 ERRCODE
    *0-0-0/w SBIN        r     1 SIZE                      *0-0-0/d STRC(72)    r     1 VECT_

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT        r     1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:379  
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)        1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$MOREMEM requires 51 words for executable code.
   Procedure VMA$MOREMEM requires 8 words of local(AUTO) storage.
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:380  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:381  
          MINI XREF LISTING

B$ALT.CODE
      7226**DCL      7226--REDEF    7227--REDEF    7227--REDEF
B$ALT.ERR
      7227**DCL      7246>>ASSIGN
B$ALT.ERR.ERR#
      7228**DCL      7228--REDEF
B$ALT.EVID
      7227**DCL      7227--REDEF    7227--REDEF
B$JIT.CPFLAGS1.SLEAZE
      6542**DCL      6542--REDEF
B$JIT.ERR.MID
      6449**DCL      6449--REDEF
B$JIT.JRESPEAK
      6610**DCL      6611--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      6719**DCL      6719--REDEF    6720--REDEF
B$JIT.PNR
      6623**DCL      6623--REDEF
B$JIT.TSLINE
      6717**DCL      6718--REDEF
B$JIT$
      6931**DCL      6443--IMP-PTR
B$TCB.ALT$
      7222**DCL      7246>>ASSIGN
B$TCB$
      6932**DCL      7222--IMP-PTR  7246>>ASSIGN
ERRCODE
      7184**DCL        20--PROC     7246<<ASSIGN
ERRMSG_FID.L#
      7000**DCL      7000--IMP-SIZ
E_PMME
      7246**LABEL    7235--CALLALT  7241--CALLALT
PL6.E3A0      #010=VMA$MOREMEM File=VMA$SUBR.:VMB6TSI                            WED 08/20/97 15:04 Page:382  
SIZE
      7156**DCL        20--PROC     7233>>IF       7234<<ASSIGN   7234>>ASSIGN   7235<>CALL     7241<>CALL
      7242>>ASSIGN
VECT_
      7168**DCL        20--PROC
VECT_.PTR$
      7170**DCL      7236<<ASSIGN   7240<<ASSIGN
VECT_.W1.VSIZE#
      7168**DCL      7237<<ASSIGN   7242<<ASSIGN
VECT_.W2
      7169**DCL      7170--REDEF
VMA$ENLARGE_SEGMENT
      7218**DCL-ENT  7241--CALL
VMA$SHRINK_SEGMENT
      7219**DCL-ENT  7235--CALL
VM_PARSEAREA_
      6882**DCL      7235<>CALL     7240>>ASSIGN   7240>>ASSIGN   7241<>CALL
X$STRING.SIZ
      6846**DCL      6847--IMP-SIZ

PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:383  
     2135        1        /*T***********************************************************/
     2136        2        /*T*                                                         */
     2137        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2138        4        /*T*                                                         */
     2139        5        /*T***********************************************************/
     2140        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2141        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2142        8        /*F*
     2143        9             NAME: VMA$OPEN_FOLDER
     2144       10             PURPOSE:
     2145       11                   This routine will take an address and open the correct file.
     2146       12             DESCRIPTION:
     2147       13                   This routine will accept an address specification that
     2148       14                   has been resolved to a USER NAME or ACCOUNT along with
     2149       15                   FOLDER, PASSWORD and SITENAME and open the correct folder
     2150       16                   if possible.
     2151       17
     2152       18                   This routine will use defaults if fields are not filled in.
     2153       19                   Either an ACCOUNT or REGISTERED NAME must be supplied.
     2154       20                   The defaults are:
     2155       21
     2156       22                   FIELD         DEFAULT SUPPLIED
     2157       23                   -----         ----------------
     2158       24                   FOLDER        central folder for this user.
     2159       25                                 If an account was specified, then 'CENTRAL'.
     2160       26                   PASSWORD      none
     2161       27                   SITENAME      local sitename
     2162       28
     2163       29
     2164       30                   This routine has the following parameters:
     2165       31
     2166       32                      VM_FOLDER_INFO - place to store information describing
     2167       33                                       the folder that was opened.
     2168       34
     2169       35                      VM_RADDRESS   - The RESOLVED address describing the
     2170       36                                      folder to open.
     2171       37                      VM_UADDRESS   - The UNRESOLVED address describing the
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:384  
     2172       38                                      folder to open.
     2173       39
     2174       40                      DCB#          - DCB to open the folder with.
     2175       41
     2176       42                      EXIST         - Value to use for OPEN.V.EXIST# (optional)
     2177       43                                      Default value is OLDFILE.
     2178       44
     2179       45                      FUN           - Value to use for OPEN.V.FUN# (optional)
     2180       46                                      Default value is IN.
     2181       47        */
     2182       48        VMA$OPEN_FOLDER: PROC (VM_FOLDER_INFO,ADDRESS$,DCB#,EXIST,FUN) ALTRET;
     2183       49        /***** Include files *****/
     2184       50          %INCLUDE B$JIT;
     2185      653          %INCLUDE CP_6;
     2186     6212          %INCLUDE CP_6_SUBS;
     2187     6752          %INCLUDE FM$FIT;
     2188     6973          %INCLUDE VM_MACRO_C;
     2189     8241          %INCLUDE VM_SUBS_C;
     2190     8501          %INCLUDE VM_DATA_R;
     2191     8932        /***** Parameters *****/
     2192     8933          %VM_FOLDER_INFO (STCLASS=" ");
     2193     8985    1   DCL ADDRESS$ PTR;
     2194     8986    1   DCL DCB# UBIN WORD;
     2195     8987    1   DCL EXIST UBIN WORD;
     2196     8988    1   DCL FUN UBIN WORD;
     2197     8989        /***** Fpts *****/
     2198     8990          %FPT_OPEN (ACS=DIRECT,ASN=FILE,SCRUB=YES,ORG=KEYED,SHARE=ALL,SPARE=100);
     2199     9099          %FPT_MADMUCK (READ=YES, WRITE=NO, DELETE=NO);
     2200     9115          %VLP_ATTR (FPTN=FOLDER_ACCESS);
     2201     9129             %VLP_ACCESS (ACCT='ALL',NOLIST=YES,LAST=";");
     2202     9146        /*
     2203     9147           Change 1859 to the following when the folder-access-control
     2204     9148           stuff is implemented.  Not 'til then, though, cause it would
     2205     9149           lead to a security breach.
     2206     9150             %VLP_ACCESS (ACCT='?',nolist=yes,exec=yes,last=";");
     2207     9151          %VLP_ATTR (FPTN=FOLDER_VEHICLES);
     2208     9152             %VLP_ACSVEH (vehicle='mail?',delf=yes,delr=yes,read=yes,reattr=yes,
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:385  
     2209     9153                          upd=yes,wnew=yes);
     2210     9154             %VLP_ACSVEH (vehicle='send?',delf=yes,delr=yes,read=yes,reattr=yes,
     2211     9155                          upd=yes,wnew=yes);
     2212     9156             %VLP_ACSVEH (vehicle='calendar?',delf=yes,delr=yes,read=yes,reattr=yes,
     2213     9157                          upd=yes,wnew=yes,last=";");
     2214     9158        */
     2215     9159        /***** Mail structures *****/
     2216     9160              %VM_ADDTYPES;
     2217     9164            %VM_KEYTYPES;
     2218     9185        /***** Based structures *****/
     2219     9186            %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS="BASED(ADDRESS$)");
     2220     9221          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS="BASED(ADDRESS$)");
     2221     9258        /***** Other macros *****/
     2222     9259        %FPT_CLOSE (FPTN=CLOSE_SAVE, STCLASS=STATIC,
     2223     9260                  DISP=SAVE);
     2224     9302          %CODE03;
     2225     9309          %CODE04;
     2226     9317              %VLP_NAME (FPTN=FID_NAME,STCLASS=STATIC);
     2227     9344          %VLP_SN (FPTN=PACKSET,N=1,STCLASS=AUTO);
     2228     9357          %F$DCB;
     2229     9414        /***** External routines *****/
     2230     9415    1   DCL XSF$LOCCODE ENTRY(2) ALTRET;
     2231     9416        /***** Local variables *****/
     2232     9417    1   DCL FIT$ PTR STATIC;
     2233     9418    1   DCL CODE UBIN WORD STATIC;
     2234     9419    1   DCL I UBIN WORD AUTO;
     2235     9420    1   DCL FIT_AREA                                 (0:1023) UBIN WORD AUTO DALIGNED;
     2236     9421        %EJECT;
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:386  
     2237     9422    1       IF ADDR(ADDRESS$) ~= ADDR(NIL) THEN
     2238     9423    1           IF VM$RADDRESS.TYPE = %VM_ADD_UNRESOLVED
     2239     9424    1           THEN
     2240     9425    2           DO;               /* Error!!! */
     2241     9426    2               ALTRETURN;
     2242     9427    2           END;
     2243     9428        /*
     2244     9429             ***** Initialize open fpt ...
     2245     9430        */
     2246     9431    1       FPT_OPEN.V.DCB# = DCB#;
     2247     9432    1       IF ADDR(EXIST) ~= ADDR(NIL)
     2248     9433    1       THEN                            /* Use the passed value */
     2249     9434    1           FPT_OPEN.V.EXIST# = EXIST;
     2250     9435    1       ELSE                            /* Use default */
     2251     9436    1           FPT_OPEN.V.EXIST# = %OLDFILE#;
     2252     9437    1       IF ADDR(FUN) ~= ADDR(NIL)
     2253     9438    1       THEN                            /* Use the passed value */
     2254     9439    1           FPT_OPEN.V.FUN# = FUN;
     2255     9440    1       ELSE                            /* Use default */
     2256     9441    1           FPT_OPEN.V.FUN# = %IN#;
     2257     9442    1       FPT_OPEN.FPARAM_ = VECTOR(FIT_AREA);
     2258     9443    1       FPT_OPEN.NAME_ = VECTOR(FID_NAME);
     2259     9444    1       FPT_OPEN.ACCT_ = VECTOR(VM_FOLDER_INFO.ACCT);
     2260     9445    1       FPT_OPEN.PASS_ = VECTOR(VM_FOLDER_INFO.PASS);
     2261     9446        /*
     2262     9447             ***** Is this address fully resolved?
     2263     9448                   or is more work necessary first ...
     2264     9449        */
     2265     9450    1       IF ADDR(ADDRESS$) = ADDR(NIL) THEN GOTO GOT_SPEC;
     2266     9451    1       IF VM$RADDRESS.NOMAD.DELIM = ' '
     2267     9452    1         AND VM$RADDRESS.NOMAD.PSID ~= ' '
     2268     9453    2       THEN DO;
     2269     9454    2           VM_FOLDER_INFO.FOLDER = VM$RADDRESS.NOMAD.FOLDER;
     2270     9455    2           VM_FOLDER_INFO.PSID = VM$RADDRESS.NOMAD.PSID;
     2271     9456    2       END;
     2272     9457    2       ELSE DO;
     2273     9458    2           VM_FOLDER_INFO.FOLDER = VM$RADDRESS.FOLDER;
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:387  
     2274     9459    2           VM_FOLDER_INFO.PSID = ' ';
     2275     9460    2       END;
     2276     9461
     2277     9462    1       IF VM_FOLDER_INFO.FOLDER = ' '
     2278     9463    1       THEN
     2279     9464    1           VM_FOLDER_INFO.FOLDER = 'CENTRAL';
     2280     9465        /**/
     2281     9466    1       IF VM$RADDRESS.ACCT ~= ' '
     2282     9467    1       THEN
     2283     9468    2       DO;                          /* Folder name supplied */
     2284     9469    2           VM_FOLDER_INFO.ACCT = VM$RADDRESS.ACCT;
     2285     9470    2       END;
     2286     9471    1       ELSE                            /* Default used */
     2287     9472    1           VM_FOLDER_INFO.ACCT = B$JIT.FACCN;
     2288     9473        /**/
     2289     9474    1       VM_FOLDER_INFO.PASS = VM$RADDRESS.PASS;
     2290     9475        /**/
     2291     9476    1       IF VM$RADDRESS.SITENAME ~= ' '
     2292     9477    1       THEN
     2293     9478    2       DO;                          /* Sitename supplied */
     2294     9479    2           VM_FOLDER_INFO.SITENAME = VM$RADDRESS.SITENAME;
     2295     9480    2       END;
     2296     9481    1       ELSE                            /* Default used */
     2297     9482    1           VM_FOLDER_INFO.SITENAME = VM_SITENAME;
     2298     9483        /*
     2299     9484             ***** Translate the folder name into a file name ...
     2300     9485        */
     2301     9486    1   GOT_SPEC:
     2302     9487        /*
     2303     9488             ***** Set up the packset name, if necessary.
     2304     9489        */
     2305     9490    1       IF VM_FOLDER_INFO.PSID = ' '
     2306     9491    1       THEN
     2307     9492    1           FPT_OPEN.SN_ = VECTOR (NIL);
     2308     9493    2       ELSE DO;
     2309     9494    2           PACKSET.NUM# = 1;
     2310     9495    2           PACKSET.SN#(0) = VM_FOLDER_INFO.PSID;
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:388  
     2311     9496    2           FPT_OPEN.SN_ = VECTOR (PACKSET);
     2312     9497    2       END;
     2313     9498    1       CALL CONCAT (FID_NAME.NAME#,':MAIL_',VM_FOLDER_INFO.FOLDER);
     2314     9499    1       CALL INDEX (I,' ',FID_NAME.NAME#);
     2315     9500    1       FID_NAME.L# = I;
     2316     9501        /*
     2317     9502             ***** If fun=create then supply access controls ...
     2318     9503        */
     2319     9504    1       IF FPT_OPEN.V.FUN# = %CREATE#
     2320     9505    1       THEN
     2321     9506    2       DO;
     2322     9507    2           FPT_OPEN.ACCESS_ = VECTOR(FOLDER_ACCESS);
     2323     9508        /*             FPT_OPEN.ACSVEH_ = VECTOR(FOLDER_VEHICLES); */
     2324     9509    2       END;
     2325     9510    2       ELSE DO;
     2326     9511    2           FPT_OPEN.ACCESS_ = VECTOR(NIL);
     2327     9512    2           FPT_OPEN.ACSVEH_ = VECTOR(NIL);
     2328     9513    2       END;
     2329     9514        /* If the folder is open, close it.  This covers the use command
     2330     9515           use where we are still using the old folder to resolve the address
     2331     9516           of the new folder. */
     2332     9517    1       IF DCBADDR(DCB#)->F$DCB.FCD#
     2333     9518    2       THEN DO;
     2334     9519    2           CLOSE_SAVE.V.DCB# = DCB#;
     2335     9520    3           CALL M$CLOSE (CLOSE_SAVE) WHENALTRETURN DO;
     2336     9521    3           END;
     2337     9522    2       END;
     2338     9523        /*
     2339     9524             ***** Open the file ...
     2340     9525        */
     2341     9526    1       CALL M$OPEN (FPT_OPEN) ALTRET(E_OPEN);
     2342     9527        /*
     2343     9528
     2344     9529             ***** Check to see if we need to fill in the current user's home
     2345     9530                   packset... this occurs if the folder_info did not contain
     2346     9531                   packset information, and the specified account is not in
     2347     9532                   the master account directory.
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:389  
     2348     9533        */
     2349     9534    1       IF VM_FOLDER_INFO.PSID = ' '
     2350     9535    2       THEN DO;
     2351     9536
     2352     9537    2           IF DCBADDR(DCB#) -> F$DCB.PSN# = ' '
     2353     9538    3           THEN DO;
     2354     9539
     2355     9540    3               FPT_MADMUCK.ACCT_ = VECTOR (DCBADDR(DCB#) -> F$DCB.ACCT#);
     2356     9541    3               FPT_MADMUCK.SN_ = VECTOR (PACKSET);
     2357     9542
     2358     9543    3               CALL M$MADMUCK (FPT_MADMUCK)
     2359     9544    4               WHENALTRETURN DO;
     2360     9545
     2361     9546    4                   VM_FOLDER_INFO.PSID = B$JIT.HPSN;
     2362     9547
     2363     9548    4               END;
     2364     9549
     2365     9550    3           END;
     2366     9551
     2367     9552    2           ELSE
     2368     9553    2               VM_FOLDER_INFO.PSID = DCBADDR(DCB#) -> F$DCB.PSN#;
     2369     9554
     2370     9555    2       END;
     2371     9556        /*
     2372     9557             ***** Set appropriate flags ...
     2373     9558        */
     2374     9559    1       VM_FOLDER_INFO.FLAGS.OPEN = %YES#;
     2375     9560    1       VM_FOLDER_INFO.FLAGS.UPDATE = DCBADDR(DCB#) -> F$DCB.FFLG.UPD#;
     2376     9561        /*
     2377     9562             ***** Is this user the owner of this file ...
     2378     9563        */
     2379     9564    1       VM_FOLDER_INFO.FLAGS.OWNER = DCBADDR(DCB#) -> F$DCB.OWNER;
     2380     9565        /*
     2381     9566             ***** Get various useful time stamps ...
     2382     9567        */
     2383     9568    1       CODE = 4;                         /* Look in CODE04 of the fit */
     2384     9569    1       FIT$ = ADDR(FIT_AREA);
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:390  
     2385     9570    1       CALL XSF$LOCCODE (FIT$,CODE) ALTRET(E_LOCCODE);
     2386     9571    1       VM_FOLDER_INFO.TIME.ACCESS = FIT$ -> CODE04.ACCESS.TIME;
     2387     9572    1       VM_FOLDER_INFO.TIME.CREATION = FIT$ -> CODE04.CREATION.TIME;
     2388     9573    1       VM_FOLDER_INFO.TIME.MODIFY = FIT$ -> CODE04.MODIFY.TIME;
     2389     9574        /*
     2390     9575             ***** Find out how many granules are unused ...
     2391     9576        */
     2392     9577    1       CODE = 3;
     2393     9578    1       FIT$ = ADDR(FIT_AREA);
     2394     9579    1       CALL XSF$LOCCODE (FIT$,CODE) ALTRET(E_LOCCODE);
     2395     9580    1       VM_FOLDER_INFO.NRECS = FIT$ -> CODE03.NRECS;
     2396     9581    1       VM_FOLDER_INFO.UGRANS = FIT$ -> CODE03.UGRANS;
     2397     9582    1       RETURN;
     2398     9583        /**/
     2399     9584    1   E_OPEN:
     2400     9585    1       ALTRETURN;
     2401     9586        /**/
     2402     9587    1   E_LOCCODE:
     2403     9588    1       RETURN;
     2404     9589    1   END VMA$OPEN_FOLDER;
     2405     9590        %EOD;

PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:391  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   FM$FIT.:LIB_E05  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B$JIT_C.:LIB_E05  is referenced.
   B$JIT.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$OPEN_FOLDER.

   Procedure VMA$OPEN_FOLDER requires 274 words for executable code.
   Procedure VMA$OPEN_FOLDER requires 2064 words of local(AUTO) storage.

PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:392  

 Object Unit name= VMA$OPEN_FOLDER                            File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:04:56.84 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none   110    156  VMA$OPEN_FOLDER
   12  RoData even  UTS      4      4  VMA$OPEN_FOLDER
   13   Proc  even  none   274    422  VMA$OPEN_FOLDER
   14  RoData even  none    19     23  VMA$OPEN_FOLDER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        5  VMA$OPEN_FOLDER
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:393  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSF$LOCCODE
                       nStd      0 X66_AUTO_5
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:394  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:395  


     2135        1        /*T***********************************************************/
     2136        2        /*T*                                                         */
     2137        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2138        4        /*T*                                                         */
     2139        5        /*T***********************************************************/
     2140        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2141        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2142        8        /*F*
     2143        9             NAME: VMA$OPEN_FOLDER
     2144       10             PURPOSE:
     2145       11                   This routine will take an address and open the correct file.
     2146       12             DESCRIPTION:
     2147       13                   This routine will accept an address specification that
     2148       14                   has been resolved to a USER NAME or ACCOUNT along with
     2149       15                   FOLDER, PASSWORD and SITENAME and open the correct folder
     2150       16                   if possible.
     2151       17
     2152       18                   This routine will use defaults if fields are not filled in.
     2153       19                   Either an ACCOUNT or REGISTERED NAME must be supplied.
     2154       20                   The defaults are:
     2155       21
     2156       22                   FIELD         DEFAULT SUPPLIED
     2157       23                   -----         ----------------
     2158       24                   FOLDER        central folder for this user.
     2159       25                                 If an account was specified, then 'CENTRAL'.
     2160       26                   PASSWORD      none
     2161       27                   SITENAME      local sitename
     2162       28
     2163       29
     2164       30                   This routine has the following parameters:
     2165       31
     2166       32                      VM_FOLDER_INFO - place to store information describing
     2167       33                                       the folder that was opened.
     2168       34
     2169       35                      VM_RADDRESS   - The RESOLVED address describing the
     2170       36                                      folder to open.
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:396  
     2171       37                      VM_UADDRESS   - The UNRESOLVED address describing the
     2172       38                                      folder to open.
     2173       39
     2174       40                      DCB#          - DCB to open the folder with.
     2175       41
     2176       42                      EXIST         - Value to use for OPEN.V.EXIST# (optional)
     2177       43                                      Default value is OLDFILE.
     2178       44
     2179       45                      FUN           - Value to use for OPEN.V.FUN# (optional)
     2180       46                                      Default value is IN.
     2181       47        */
     2182       48        VMA$OPEN_FOLDER: PROC (VM_FOLDER_INFO,ADDRESS$,DCB#,EXIST,FUN) ALTRET;

     48 13 000000   000000 700200 xent  VMA$OPEN_FO* TSX0  ! X66_AUTO_5
        13 000001   004020 000005                    ZERO    2064,5

     2183       49        /***** Include files *****/
     2184       50          %INCLUDE B$JIT;
     2185      653          %INCLUDE CP_6;
     2186     6212          %INCLUDE CP_6_SUBS;
     2187     6752          %INCLUDE FM$FIT;
     2188     6973          %INCLUDE VM_MACRO_C;
     2189     8241          %INCLUDE VM_SUBS_C;
     2190     8501          %INCLUDE VM_DATA_R;
     2191     8932        /***** Parameters *****/
     2192     8933          %VM_FOLDER_INFO (STCLASS=" ");
     2193     8985    1   DCL ADDRESS$ PTR;
     2194     8986    1   DCL DCB# UBIN WORD;
     2195     8987    1   DCL EXIST UBIN WORD;
     2196     8988    1   DCL FUN UBIN WORD;
     2197     8989        /***** Fpts *****/
     2198     8990          %FPT_OPEN (ACS=DIRECT,ASN=FILE,SCRUB=YES,ORG=KEYED,SHARE=ALL,SPARE=100);
     2199     9099          %FPT_MADMUCK (READ=YES, WRITE=NO, DELETE=NO);
     2200     9115          %VLP_ATTR (FPTN=FOLDER_ACCESS);
     2201     9129             %VLP_ACCESS (ACCT='ALL',NOLIST=YES,LAST=";");
     2202     9146        /*
     2203     9147           Change 1859 to the following when the folder-access-control
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:397  
     2204     9148           stuff is implemented.  Not 'til then, though, cause it would
     2205     9149           lead to a security breach.
     2206     9150             %VLP_ACCESS (ACCT='?',nolist=yes,exec=yes,last=";");
     2207     9151          %VLP_ATTR (FPTN=FOLDER_VEHICLES);
     2208     9152             %VLP_ACSVEH (vehicle='mail?',delf=yes,delr=yes,read=yes,reattr=yes,
     2209     9153                          upd=yes,wnew=yes);
     2210     9154             %VLP_ACSVEH (vehicle='send?',delf=yes,delr=yes,read=yes,reattr=yes,
     2211     9155                          upd=yes,wnew=yes);
     2212     9156             %VLP_ACSVEH (vehicle='calendar?',delf=yes,delr=yes,read=yes,reattr=yes,
     2213     9157                          upd=yes,wnew=yes,last=";");
     2214     9158        */
     2215     9159        /***** Mail structures *****/
     2216     9160              %VM_ADDTYPES;
     2217     9164            %VM_KEYTYPES;
     2218     9185        /***** Based structures *****/
     2219     9186            %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS="BASED(ADDRESS$)");
     2220     9221          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS="BASED(ADDRESS$)");
     2221     9258        /***** Other macros *****/
     2222     9259        %FPT_CLOSE (FPTN=CLOSE_SAVE, STCLASS=STATIC,
     2223     9260                  DISP=SAVE);
     2224     9302          %CODE03;
     2225     9309          %CODE04;
     2226     9317              %VLP_NAME (FPTN=FID_NAME,STCLASS=STATIC);
     2227     9344          %VLP_SN (FPTN=PACKSET,N=1,STCLASS=AUTO);
     2228     9357          %F$DCB;
     2229     9414        /***** External routines *****/
     2230     9415    1   DCL XSF$LOCCODE ENTRY(2) ALTRET;
     2231     9416        /***** Local variables *****/
     2232     9417    1   DCL FIT$ PTR STATIC;
     2233     9418    1   DCL CODE UBIN WORD STATIC;
     2234     9419    1   DCL I UBIN WORD AUTO;
     2235     9420    1   DCL FIT_AREA                                 (0:1023) UBIN WORD AUTO DALIGNED;
     2236     9421        %EJECT;
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:398  
     2237     9422    1       IF ADDR(ADDRESS$) ~= ADDR(NIL) THEN

   9422 13 000002   200004 236100                    LDQ     @ADDRESS$,,AUTO
        13 000003   000000 116000 14                 CMPQ    0
        13 000004   000014 600000 13                 TZE     s:9431

     2238     9423    1           IF VM$RADDRESS.TYPE = %VM_ADD_UNRESOLVED

   9423 13 000005   200004 470500                    LDP0    @ADDRESS$,,AUTO
        13 000006   000000 471500                    LDP1    0,,PR0
        13 000007   100002 236100                    LDQ     2,,PR1
        13 000010   000777 376003                    ANQ     511,DU
        13 000011   000002 116003                    CMPQ    2,DU
        13 000012   000014 601000 13                 TNZ     s:9431

     2239     9424    1           THEN
     2240     9425    2           DO;               /* Error!!! */

     2241     9426    2               ALTRETURN;

   9426 13 000013   000000 702200 xent               TSX2  ! X66_AALT

     2242     9427    2           END;
     2243     9428        /*
     2244     9429             ***** Initialize open fpt ...
     2245     9430        */
     2246     9431    1       FPT_OPEN.V.DCB# = DCB#;

   9431 13 000014   200005 470500                    LDP0    @DCB#,,AUTO
        13 000015   000000 720100                    LXL0    0,,PR0
        13 000016   000044 740000 11                 STX0    FPT_OPEN+36

     2247     9432    1       IF ADDR(EXIST) ~= ADDR(NIL)

   9432 13 000017   200006 236100                    LDQ     @EXIST,,AUTO
        13 000020   000000 116000 14                 CMPQ    0
        13 000021   000031 600000 13                 TZE     s:9436
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:399  

     2248     9433    1       THEN                            /* Use the passed value */
     2249     9434    1           FPT_OPEN.V.EXIST# = EXIST;

   9434 13 000022   200006 471500                    LDP1    @EXIST,,AUTO
        13 000023   100000 236100                    LDQ     0,,PR1
        13 000024   000007 736000                    QLS     7
        13 000025   000044 676000 11                 ERQ     FPT_OPEN+36
        13 000026   000600 376007                    ANQ     384,DL
        13 000027   000044 656000 11                 ERSQ    FPT_OPEN+36
        13 000030   000035 710000 13                 TRA     s:9437

     2250     9435    1       ELSE                            /* Use default */
     2251     9436    1           FPT_OPEN.V.EXIST# = %OLDFILE#;

   9436 13 000031   000044 236000 11                 LDQ     FPT_OPEN+36
        13 000032   000001 376000 14                 ANQ     1
        13 000033   000400 276007                    ORQ     256,DL
        13 000034   000044 756000 11                 STQ     FPT_OPEN+36

     2252     9437    1       IF ADDR(FUN) ~= ADDR(NIL)

   9437 13 000035   200007 236100                    LDQ     @FUN,,AUTO
        13 000036   000000 116000 14                 CMPQ    0
        13 000037   000045 600000 13                 TZE     s:9441

     2253     9438    1       THEN                            /* Use the passed value */
     2254     9439    1           FPT_OPEN.V.FUN# = FUN;

   9439 13 000040   200007 471500                    LDP1    @FUN,,AUTO
        13 000041   100000 236100                    LDQ     0,,PR1
        13 000042   000011 736000                    QLS     9
        13 000043   000045 552010 11                 STBQ    FPT_OPEN+37,'10'O
        13 000044   000047 710000 13                 TRA     s:9442

     2255     9440    1       ELSE                            /* Use default */
     2256     9441    1           FPT_OPEN.V.FUN# = %IN#;
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:400  

   9441 13 000045   002000 236007                    LDQ     1024,DL
        13 000046   000045 552010 11                 STBQ    FPT_OPEN+37,'10'O

     2257     9442    1       FPT_OPEN.FPARAM_ = VECTOR(FIT_AREA);

   9442 13 000047   000002 235000 14                 LDA     2
        13 000050   204016 452500                    STP2    FIT_AREA+2048,,AUTO
        13 000051   204016 236100                    LDQ     FIT_AREA+2048,,AUTO
        13 000052   000016 036003                    ADLQ    14,DU
        13 000053   000030 757000 11                 STAQ    FPT_OPEN+24

     2258     9443    1       FPT_OPEN.NAME_ = VECTOR(FID_NAME);

   9443 13 000054   000004 237000 14                 LDAQ    4
        13 000055   000006 757000 11                 STAQ    FPT_OPEN+6

     2259     9444    1       FPT_OPEN.ACCT_ = VECTOR(VM_FOLDER_INFO.ACCT);

   9444 13 000056   000003 235000 14                 LDA     3
        13 000057   200003 236100                    LDQ     @VM_FOLDER_INFO,,AUTO
        13 000060   000006 036000 14                 ADLQ    6
        13 000061   000024 757000 11                 STAQ    FPT_OPEN+20

     2260     9445    1       FPT_OPEN.PASS_ = VECTOR(VM_FOLDER_INFO.PASS);

   9445 13 000062   000003 235000 14                 LDA     3
        13 000063   200003 236100                    LDQ     @VM_FOLDER_INFO,,AUTO
        13 000064   000007 036000 14                 ADLQ    7
        13 000065   000010 757000 11                 STAQ    FPT_OPEN+8

     2261     9446        /*
     2262     9447             ***** Is this address fully resolved?
     2263     9448                   or is more work necessary first ...
     2264     9449        */
     2265     9450    1       IF ADDR(ADDRESS$) = ADDR(NIL) THEN GOTO GOT_SPEC;

PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:401  
   9450 13 000066   200004 236100                    LDQ     @ADDRESS$,,AUTO
        13 000067   000000 116000 14                 CMPQ    0
        13 000070   000167 600000 13                 TZE     GOT_SPEC

     2266     9451    1       IF VM$RADDRESS.NOMAD.DELIM = ' '

   9451 13 000071   200004 471500                    LDP1    @ADDRESS$,,AUTO
        13 000072   100000 473500                    LDP3    0,,PR1
        13 000073   300014 236100                    LDQ     12,,PR3
        13 000074   777000 376003                    ANQ     -512,DU
        13 000075   040000 116003                    CMPQ    16384,DU
        13 000076   000114 601000 13                 TNZ     s:9458
        13 000077   040000 106500                    CMPC    fill='040'O
        13 000100   300014 200006                    ADSC9   12,,PR3                  cn=1,n=6
        13 000101   000010 000001 14                 ADSC9   8                        cn=0,n=1
        13 000102   000114 600000 13                 TZE     s:9458

     2267     9452    1         AND VM$RADDRESS.NOMAD.PSID ~= ' '
     2268     9453    2       THEN DO;

     2269     9454    2           VM_FOLDER_INFO.FOLDER = VM$RADDRESS.NOMAD.FOLDER;

   9454 13 000103   200003 474500                    LDP4    @VM_FOLDER_INFO,,AUTO
        13 000104   040100 100500                    MLR     fill='040'O
        13 000105   300007 400022                    ADSC9   7,,PR3                   cn=2,n=18
        13 000106   400003 400031                    ADSC9   3,,PR4                   cn=2,n=25

     2270     9455    2           VM_FOLDER_INFO.PSID = VM$RADDRESS.NOMAD.PSID;

   9455 13 000107   100000 473500                    LDP3    0,,PR1
        13 000110   040100 100500                    MLR     fill='040'O
        13 000111   300014 200006                    ADSC9   12,,PR3                  cn=1,n=6
        13 000112   400000 000006                    ADSC9   0,,PR4                   cn=0,n=6

     2271     9456    2       END;

   9456 13 000113   000123 710000 13                 TRA     s:9462
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:402  

     2272     9457    2       ELSE DO;

     2273     9458    2           VM_FOLDER_INFO.FOLDER = VM$RADDRESS.FOLDER;

   9458 13 000114   200003 474500                    LDP4    @VM_FOLDER_INFO,,AUTO
        13 000115   040100 100500                    MLR     fill='040'O
        13 000116   300007 400031                    ADSC9   7,,PR3                   cn=2,n=25
        13 000117   400003 400031                    ADSC9   3,,PR4                   cn=2,n=25

     2274     9459    2           VM_FOLDER_INFO.PSID = ' ';

   9459 13 000120   040100 100400                    MLR     fill='040'O
        13 000121   000010 000001 14                 ADSC9   8                        cn=0,n=1
        13 000122   400000 000006                    ADSC9   0,,PR4                   cn=0,n=6

     2275     9460    2       END;

     2276     9461
     2277     9462    1       IF VM_FOLDER_INFO.FOLDER = ' '

   9462 13 000123   040000 106500                    CMPC    fill='040'O
        13 000124   400003 400031                    ADSC9   3,,PR4                   cn=2,n=25
        13 000125   000010 000001 14                 ADSC9   8                        cn=0,n=1
        13 000126   000132 601000 13                 TNZ     s:9466

     2278     9463    1       THEN
     2279     9464    1           VM_FOLDER_INFO.FOLDER = 'CENTRAL';

   9464 13 000127   040100 100400                    MLR     fill='040'O
        13 000130   000000 000007 12                 ADSC9   0                        cn=0,n=7
        13 000131   400003 400031                    ADSC9   3,,PR4                   cn=2,n=25

     2280     9465        /**/
     2281     9466    1       IF VM$RADDRESS.ACCT ~= ' '

   9466 13 000132   100000 473500                    LDP3    0,,PR1
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:403  
        13 000133   040000 106500                    CMPC    fill='040'O
        13 000134   300021 600010                    ADSC9   17,,PR3                  cn=3,n=8
        13 000135   000010 000001 14                 ADSC9   8                        cn=0,n=1
        13 000136   000143 600000 13                 TZE     s:9472

     2282     9467    1       THEN
     2283     9468    2       DO;                          /* Folder name supplied */

     2284     9469    2           VM_FOLDER_INFO.ACCT = VM$RADDRESS.ACCT;

   9469 13 000137   040100 100500                    MLR     fill='040'O
        13 000140   300021 600010                    ADSC9   17,,PR3                  cn=3,n=8
        13 000141   400001 400010                    ADSC9   1,,PR4                   cn=2,n=8

     2285     9470    2       END;

   9470 13 000142   000147 710000 13                 TRA     s:9474

     2286     9471    1       ELSE                            /* Default used */
     2287     9472    1           VM_FOLDER_INFO.ACCT = B$JIT.FACCN;

   9472 13 000143   000000 475400 xsym               LDP5    B$JIT$
        13 000144   040100 100500                    MLR     fill='040'O
        13 000145   500006 000010                    ADSC9   6,,PR5                   cn=0,n=8
        13 000146   400001 400010                    ADSC9   1,,PR4                   cn=2,n=8

     2288     9473        /**/
     2289     9474    1       VM_FOLDER_INFO.PASS = VM$RADDRESS.PASS;

   9474 13 000147   100000 473500                    LDP3    0,,PR1
        13 000150   040100 100500                    MLR     fill='040'O
        13 000151   300015 600010                    ADSC9   13,,PR3                  cn=3,n=8
        13 000152   400011 600010                    ADSC9   9,,PR4                   cn=3,n=8

     2290     9475        /**/
     2291     9476    1       IF VM$RADDRESS.SITENAME ~= ' '

PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:404  
   9476 13 000153   100000 473500                    LDP3    0,,PR1
        13 000154   040000 106500                    CMPC    fill='040'O
        13 000155   300017 600010                    ADSC9   15,,PR3                  cn=3,n=8
        13 000156   000010 000001 14                 ADSC9   8                        cn=0,n=1
        13 000157   000164 600000 13                 TZE     s:9482

     2292     9477    1       THEN
     2293     9478    2       DO;                          /* Sitename supplied */

     2294     9479    2           VM_FOLDER_INFO.SITENAME = VM$RADDRESS.SITENAME;

   9479 13 000160   040100 100500                    MLR     fill='040'O
        13 000161   300017 600010                    ADSC9   15,,PR3                  cn=3,n=8
        13 000162   400013 600010                    ADSC9   11,,PR4                  cn=3,n=8

     2295     9480    2       END;

   9480 13 000163   000167 710000 13                 TRA     GOT_SPEC

     2296     9481    1       ELSE                            /* Default used */
     2297     9482    1           VM_FOLDER_INFO.SITENAME = VM_SITENAME;

   9482 13 000164   040100 100400                    MLR     fill='040'O
        13 000165   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        13 000166   400013 600010                    ADSC9   11,,PR4                  cn=3,n=8

     2298     9483        /*
     2299     9484             ***** Translate the folder name into a file name ...
     2300     9485        */
     2301     9486    1   GOT_SPEC:
     2302     9487        /*
     2303     9488             ***** Set up the packset name, if necessary.
     2304     9489        */
     2305     9490    1       IF VM_FOLDER_INFO.PSID = ' '

   9490 13 000167   200003 471500       GOT_SPEC     LDP1    @VM_FOLDER_INFO,,AUTO
        13 000170   040000 106500                    CMPC    fill='040'O
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:405  
        13 000171   100000 000006                    ADSC9   0,,PR1                   cn=0,n=6
        13 000172   000010 000001 14                 ADSC9   8                        cn=0,n=1
        13 000173   000177 601000 13                 TNZ     s:9494

     2306     9491    1       THEN
     2307     9492    1           FPT_OPEN.SN_ = VECTOR (NIL);

   9492 13 000174   000012 237000 14                 LDAQ    10
        13 000175   000002 757000 11                 STAQ    FPT_OPEN+2
        13 000176   000211 710000 13                 TRA     s:9498

     2308     9493    2       ELSE DO;

     2309     9494    2           PACKSET.NUM# = 1;

   9494 13 000177   000001 235007                    LDA     1,DL
        13 000200   200010 755100                    STA     PACKSET,,AUTO

     2310     9495    2           PACKSET.SN#(0) = VM_FOLDER_INFO.PSID;

   9495 13 000201   040100 100500                    MLR     fill='040'O
        13 000202   100000 000006                    ADSC9   0,,PR1                   cn=0,n=6
        13 000203   200011 000006                    ADSC9   PACKSET+1,,AUTO          cn=0,n=6

     2311     9496    2           FPT_OPEN.SN_ = VECTOR (PACKSET);

   9496 13 000204   000011 235000 14                 LDA     9
        13 000205   204016 452500                    STP2    FIT_AREA+2048,,AUTO
        13 000206   204016 236100                    LDQ     FIT_AREA+2048,,AUTO
        13 000207   000010 036003                    ADLQ    8,DU
        13 000210   000002 757000 11                 STAQ    FPT_OPEN+2

     2312     9497    2       END;

     2313     9498    1       CALL CONCAT (FID_NAME.NAME#,':MAIL_',VM_FOLDER_INFO.FOLDER);

   9498 13 000211   040000 100400                    MLR     fill='040'O
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:406  
        13 000212   000002 000006 12                 ADSC9   2                        cn=0,n=6
        13 000213   000144 200006 11                 ADSC9   FID_NAME                 cn=1,n=6
        13 000214   040000 100500                    MLR     fill='040'O
        13 000215   100003 400031                    ADSC9   3,,PR1                   cn=2,n=25
        13 000216   000145 600031 11                 ADSC9   FID_NAME+1               cn=3,n=25

     2314     9499    1       CALL INDEX (I,' ',FID_NAME.NAME#);

   9499 13 000217   000000 124400                    SCM     mask='000'O
        13 000220   000144 200037 11                 ADSC9   FID_NAME                 cn=1,n=31
        13 000221   000010 000001 14                 ADSC9   8                        cn=0,n=1
        13 000222   200014 000100                    ARG     I,,AUTO

     2315     9500    1       FID_NAME.L# = I;

   9500 13 000223   200014 236100                    LDQ     I,,AUTO
        13 000224   000033 736000                    QLS     27
        13 000225   000144 552040 11                 STBQ    FID_NAME,'40'O

     2316     9501        /*
     2317     9502             ***** If fun=create then supply access controls ...
     2318     9503        */
     2319     9504    1       IF FPT_OPEN.V.FUN# = %CREATE#

   9504 13 000226   000045 236000 11                 LDQ     FPT_OPEN+37
        13 000227   777000 376007                    ANQ     -512,DL
        13 000230   003000 116007                    CMPQ    1536,DL
        13 000231   000235 601000 13                 TNZ     s:9511

     2320     9505    1       THEN
     2321     9506    2       DO;

     2322     9507    2           FPT_OPEN.ACCESS_ = VECTOR(FOLDER_ACCESS);

   9507 13 000232   000014 237000 14                 LDAQ    12
        13 000233   000012 757000 11                 STAQ    FPT_OPEN+10

PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:407  
     2323     9508        /*             FPT_OPEN.ACSVEH_ = VECTOR(FOLDER_VEHICLES); */
     2324     9509    2       END;

   9509 13 000234   000241 710000 13                 TRA     s:9517

     2325     9510    2       ELSE DO;

     2326     9511    2           FPT_OPEN.ACCESS_ = VECTOR(NIL);

   9511 13 000235   000012 237000 14                 LDAQ    10
        13 000236   000012 757000 11                 STAQ    FPT_OPEN+10

     2327     9512    2           FPT_OPEN.ACSVEH_ = VECTOR(NIL);

   9512 13 000237   000012 237000 14                 LDAQ    10
        13 000240   000014 757000 11                 STAQ    FPT_OPEN+12

     2328     9513    2       END;

     2329     9514        /* If the folder is open, close it.  This covers the use command
     2330     9515           use where we are still using the old folder to resolve the address
     2331     9516           of the new folder. */
     2332     9517    1       IF DCBADDR(DCB#)->F$DCB.FCD#

   9517 13 000241   000016 470400 14                 LDP0    14
        13 000242   000000 471500                    LDP1    0,,PR0
        13 000243   200005 473500                    LDP3    @DCB#,,AUTO
        13 000244   300000 720100                    LXL0    0,,PR3
        13 000245   100000 474510                    LDP4    0,X0,PR1
        13 000246   400031 236100                    LDQ     25,,PR4
        13 000247   020000 316007                    CANQ    8192,DL
        13 000250   000257 600000 13                 TZE     s:9526

     2333     9518    2       THEN DO;

     2334     9519    2           CLOSE_SAVE.V.DCB# = DCB#;

PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:408  
   9519 13 000251   000140 740000 11                 STX0    CLOSE_SAVE+26

     2335     9520    3           CALL M$CLOSE (CLOSE_SAVE) WHENALTRETURN DO;

   9520 13 000252   000106 630400 11                 EPPR0   CLOSE_SAVE
        13 000253   450001 713400                    CLIMB   alt,close
        13 000254   406000 401760                    pmme    nvectors=13
        13 000255   000257 702000 13                 TSX2    s:9526
        13 000256   000257 710000 13                 TRA     s:9526

     2336     9521    3           END;

     2337     9522    2       END;

     2338     9523        /*
     2339     9524             ***** Open the file ...
     2340     9525        */
     2341     9526    1       CALL M$OPEN (FPT_OPEN) ALTRET(E_OPEN);

   9526 13 000257   000000 630400 11                 EPPR0   FPT_OPEN
        13 000260   450000 713400                    CLIMB   alt,open
        13 000261   410400 401760                    pmme    nvectors=18
        13 000262   000420 702000 13                 TSX2    E_OPEN

     2342     9527        /*
     2343     9528
     2344     9529             ***** Check to see if we need to fill in the current user's home
     2345     9530                   packset... this occurs if the folder_info did not contain
     2346     9531                   packset information, and the specified account is not in
     2347     9532                   the master account directory.
     2348     9533        */
     2349     9534    1       IF VM_FOLDER_INFO.PSID = ' '

   9534 13 000263   200003 470500                    LDP0    @VM_FOLDER_INFO,,AUTO
        13 000264   040000 106500                    CMPC    fill='040'O
        13 000265   000000 000006                    ADSC9   0,,PR0                   cn=0,n=6
        13 000266   000010 000001 14                 ADSC9   8                        cn=0,n=1
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:409  
        13 000267   000331 601000 13                 TNZ     s:9559

     2350     9535    2       THEN DO;

     2351     9536
     2352     9537    2           IF DCBADDR(DCB#) -> F$DCB.PSN# = ' '

   9537 13 000270   000016 471400 14                 LDP1    14
        13 000271   100000 473500                    LDP3    0,,PR1
        13 000272   200005 474500                    LDP4    @DCB#,,AUTO
        13 000273   400000 720100                    LXL0    0,,PR4
        13 000274   300000 475510                    LDP5    0,X0,PR3
        13 000275   040000 106500                    CMPC    fill='040'O
        13 000276   500024 000006                    ADSC9   20,,PR5                  cn=0,n=6
        13 000277   000010 000001 14                 ADSC9   8                        cn=0,n=1
        13 000300   000326 601000 13                 TNZ     s:9553

     2353     9538    3           THEN DO;

     2354     9539
     2355     9540    3               FPT_MADMUCK.ACCT_ = VECTOR (DCBADDR(DCB#) -> F$DCB.ACCT#);

   9540 13 000301   000003 235000 14                 LDA     3
        13 000302   204016 455500                    STP5    FIT_AREA+2048,,AUTO
        13 000303   204016 236100                    LDQ     FIT_AREA+2048,,AUTO
        13 000304   000020 036003                    ADLQ    16,DU
        13 000305   000074 757000 11                 STAQ    FPT_MADMUCK+2

     2356     9541    3               FPT_MADMUCK.SN_ = VECTOR (PACKSET);

   9541 13 000306   000011 235000 14                 LDA     9
        13 000307   204016 452500                    STP2    FIT_AREA+2048,,AUTO
        13 000310   204016 236100                    LDQ     FIT_AREA+2048,,AUTO
        13 000311   000010 036003                    ADLQ    8,DU
        13 000312   000076 757000 11                 STAQ    FPT_MADMUCK+4

     2357     9542
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:410  
     2358     9543    3               CALL M$MADMUCK (FPT_MADMUCK)

   9543 13 000313   000072 630400 11                 EPPR0   FPT_MADMUCK
        13 000314   460005 713400                    CLIMB   alt,+24581
        13 000315   401000 401760                    pmme    nvectors=3
        13 000316   000320 702000 13                 TSX2    s:9546
        13 000317   000325 710000 13                 TRA     s:9550

     2359     9544    4               WHENALTRETURN DO;

     2360     9545
     2361     9546    4                   VM_FOLDER_INFO.PSID = B$JIT.HPSN;

   9546 13 000320   000000 470400 xsym               LDP0    B$JIT$
        13 000321   200003 471500                    LDP1    @VM_FOLDER_INFO,,AUTO
        13 000322   040100 100500                    MLR     fill='040'O
        13 000323   000234 000006                    ADSC9   156,,PR0                 cn=0,n=6
        13 000324   100000 000006                    ADSC9   0,,PR1                   cn=0,n=6

     2362     9547
     2363     9548    4               END;

     2364     9549
     2365     9550    3           END;

   9550 13 000325   000331 710000 13                 TRA     s:9559

     2366     9551
     2367     9552    2           ELSE
     2368     9553    2               VM_FOLDER_INFO.PSID = DCBADDR(DCB#) -> F$DCB.PSN#;

   9553 13 000326   040100 100500                    MLR     fill='040'O
        13 000327   500024 000006                    ADSC9   20,,PR5                  cn=0,n=6
        13 000330   000000 000006                    ADSC9   0,,PR0                   cn=0,n=6

     2369     9554
     2370     9555    2       END;
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:411  

     2371     9556        /*
     2372     9557             ***** Set appropriate flags ...
     2373     9558        */
     2374     9559    1       VM_FOLDER_INFO.FLAGS.OPEN = %YES#;

   9559 13 000331   200003 470500                    LDP0    @VM_FOLDER_INFO,,AUTO
        13 000332   010000 236003                    LDQ     4096,DU
        13 000333   000023 256100                    ORSQ    19,,PR0

     2375     9560    1       VM_FOLDER_INFO.FLAGS.UPDATE = DCBADDR(DCB#) -> F$DCB.FFLG.UPD#;

   9560 13 000334   000016 471400 14                 LDP1    14
        13 000335   100000 473500                    LDP3    0,,PR1
        13 000336   200005 474500                    LDP4    @DCB#,,AUTO
        13 000337   400000 720100                    LXL0    0,,PR4
        13 000340   300000 475510                    LDP5    0,X0,PR3
        13 000341   500004 236100                    LDQ     4,,PR5
        13 000342   000003 736000                    QLS     3
        13 000343   000023 676100                    ERQ     19,,PR0
        13 000344   400000 376003                    ANQ     -131072,DU
        13 000345   000023 656100                    ERSQ    19,,PR0

     2376     9561        /*
     2377     9562             ***** Is this user the owner of this file ...
     2378     9563        */
     2379     9564    1       VM_FOLDER_INFO.FLAGS.OWNER = DCBADDR(DCB#) -> F$DCB.OWNER;

   9564 13 000346   400000 720100                    LXL0    0,,PR4
        13 000347   300000 475510                    LDP5    0,X0,PR3
        13 000350   500064 236100                    LDQ     52,,PR5
        13 000351   000024 736000                    QLS     20
        13 000352   000023 676100                    ERQ     19,,PR0
        13 000353   200000 376003                    ANQ     65536,DU
        13 000354   000023 656100                    ERSQ    19,,PR0

     2380     9565        /*
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:412  
     2381     9566             ***** Get various useful time stamps ...
     2382     9567        */
     2383     9568    1       CODE = 4;                         /* Look in CODE04 of the fit */

   9568 13 000355   000004 235007                    LDA     4,DL
        13 000356   000155 755000 11                 STA     CODE

     2384     9569    1       FIT$ = ADDR(FIT_AREA);

   9569 13 000357   200016 635500                    EPPR5   FIT_AREA,,AUTO
        13 000360   000154 455400 11                 STP5    FIT$

     2385     9570    1       CALL XSF$LOCCODE (FIT$,CODE) ALTRET(E_LOCCODE);

   9570 13 000361   000020 630400 14                 EPPR0   16
        13 000362   000017 631400 14                 EPPR1   15
        13 000363   000000 701000 xent               TSX1    XSF$LOCCODE
        13 000364   000421 702000 13                 TSX2    E_LOCCODE

     2386     9571    1       VM_FOLDER_INFO.TIME.ACCESS = FIT$ -> CODE04.ACCESS.TIME;

   9571 13 000365   000154 470400 11                 LDP0    FIT$
        13 000366   200003 471500                    LDP1    @VM_FOLDER_INFO,,AUTO
        13 000367   000000 235100                    LDA     0,,PR0
        13 000370   100016 755100                    STA     14,,PR1

     2387     9572    1       VM_FOLDER_INFO.TIME.CREATION = FIT$ -> CODE04.CREATION.TIME;

   9572 13 000371   000154 470400 11                 LDP0    FIT$
        13 000372   000002 235100                    LDA     2,,PR0
        13 000373   100017 755100                    STA     15,,PR1

     2388     9573    1       VM_FOLDER_INFO.TIME.MODIFY = FIT$ -> CODE04.MODIFY.TIME;

   9573 13 000374   000154 470400 11                 LDP0    FIT$
        13 000375   000001 235100                    LDA     1,,PR0
        13 000376   100020 755100                    STA     16,,PR1
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:413  

     2389     9574        /*
     2390     9575             ***** Find out how many granules are unused ...
     2391     9576        */
     2392     9577    1       CODE = 3;

   9577 13 000377   000003 236007                    LDQ     3,DL
        13 000400   000155 756000 11                 STQ     CODE

     2393     9578    1       FIT$ = ADDR(FIT_AREA);

   9578 13 000401   200016 630500                    EPPR0   FIT_AREA,,AUTO
        13 000402   000154 450400 11                 STP0    FIT$

     2394     9579    1       CALL XSF$LOCCODE (FIT$,CODE) ALTRET(E_LOCCODE);

   9579 13 000403   000020 630400 14                 EPPR0   16
        13 000404   000017 631400 14                 EPPR1   15
        13 000405   000000 701000 xent               TSX1    XSF$LOCCODE
        13 000406   000421 702000 13                 TSX2    E_LOCCODE

     2395     9580    1       VM_FOLDER_INFO.NRECS = FIT$ -> CODE03.NRECS;

   9580 13 000407   000154 470400 11                 LDP0    FIT$
        13 000410   000002 235100                    LDA     2,,PR0
        13 000411   200003 471500                    LDP1    @VM_FOLDER_INFO,,AUTO
        13 000412   100021 755100                    STA     17,,PR1

     2396     9581    1       VM_FOLDER_INFO.UGRANS = FIT$ -> CODE03.UGRANS;

   9581 13 000413   000154 470400 11                 LDP0    FIT$
        13 000414   000000 236100                    LDQ     0,,PR0
        13 000415   000022 376000 14                 ANQ     18
        13 000416   100022 756100                    STQ     18,,PR1

     2397     9582    1       RETURN;

PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:414  
   9582 13 000417   000000 702200 xent               TSX2  ! X66_ARET

     2398     9583        /**/
     2399     9584    1   E_OPEN:
     2400     9585    1       ALTRETURN;

   9585 13 000420   000000 702200 xent  E_OPEN       TSX2  ! X66_AALT

     2401     9586        /**/
     2402     9587    1   E_LOCCODE:
     2403     9588    1       RETURN;

   9588 13 000421   000000 702200 xent  E_LOCCODE    TSX2  ! X66_ARET

FPT_OPEN
 Sect OctLoc
  11     000   000025 777640   000044 006000   000000 177640   000000 006014    .....$..........
  11     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     044*  000000 400052   000000 000001   252525 002002   000040 252520    ...*......... ..
  11     050   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  11     054   000144 000000   000000 000000   000000 000000   000000 000000    .d..............
  11     060   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  11     064   040040 040040   000000 000000   000000 000000   000000 000000        ............
  11     070   000000 000000   ****** ******                                    ........

FPT_MADMUCK
 Sect OctLoc
  11     072   000001 777640   000100 006000   000000 177640   000000 006014    .....@..........
  11     076   000000 177640   000000 006014   000000 400000   000000 000000    ................

FOLDER_ACCESS
 Sect OctLoc
  11     102   000000 000003   010000 101114   114040 040040   040040 ******    ......ALL     ..

CLOSE_SAVE
 Sect OctLoc
  11     106   000003 777640   000140 006000   000000 177640   000000 006014    .....`..........
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:415  
  11     112   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     136*  000000 177640   000000 006014   000000 000002   000000 000040    ...............
  11     142   000220 000000   000000 000000                                    ........

FID_NAME
 Sect OctLoc
  11     144   037040 040040   040040 040040   040040 040040   040040 040040    .
  11     150   040040 040040   040040 040040   040040 040040   040040 040040

(unnamed)
 Sect OctLoc
  12     000   103105 116124   122101 114040   072115 101111   114137 040040    CENTRAL :MAIL_

(unnamed)
 Sect OctLoc
  14     000   000000 006014   777777 777177   003777 777640   000001 777640    ................
  14     004   000007 777640   000144 006000   000001 400000   000011 600000    .....d..........
  14     010   040040 040040   000003 777640   000000 177640   000000 006014        ............
  14     014   000003 777640   000102 006000   000000 006003   000002 000000    .....B..........
  14     020   000154 006000   000155 006000   000777 777777                    .l...m......
     2404     9589    1   END VMA$OPEN_FOLDER;
     2405     9590        %EOD;

PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:416  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   FM$FIT.:LIB_E05  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B$JIT_C.:LIB_E05  is referenced.
   B$JIT.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$OPEN_FOLDER.
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:417  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$OPEN_FOLDER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   106-0-0/d STRC(1080)  r     1 CLOSE_SAVE               155-0-0/w UBIN        r     1 CODE
   144-0-0/c STRC(288)   r     1 FID_NAME                 154-0-0/w PTR         r     1 FIT$
   102-0-0/w STRC(126)   r     1 FOLDER_ACCESS             72-0-0/d STRC(288)   r     1 FPT_MADMUCK
     0-0-0/d STRC(2088)  r     1 FPT_OPEN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ADDRESS$                  5-0-0/w PTR         r     1 @DCB#
     6-0-0/w PTR         r     1 @EXIST                     7-0-0/w PTR         r     1 @FUN
     3-0-0/w PTR         r     1 @VM_FOLDER_INFO           *0-0-0/w PTR         r     1 ADDRESS$
    *0-0-0/w UBIN        r     1 DCB#                      *0-0-0/w UBIN        r     1 EXIST
    16-0-0/d UBIN        r     1 FIT_AREA(0:1023)          *0-0-0/w UBIN        r     1 FUN
    14-0-0/w UBIN        r     1 I                         10-0-0/d STRC(90)    r     1 PACKSET
    *0-0-0/w STRC(2529)  r     1 VM_FOLDER_INFO

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:418  
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)     r     1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/w STRC(324)   r     1 CODE03
     0-0-0/w STRC(396)   r     1 CODE04                     0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/w STRC(711)   r     1 VM$RADDRESS
     0-0-0/w STRC(2448)        1 VM$UADDRESS                0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$OPEN_FOLDER requires 274 words for executable code.
   Procedure VMA$OPEN_FOLDER requires 2064 words of local(AUTO) storage.
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:419  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:420  
          MINI XREF LISTING

ADDRESS$
      8985**DCL        48--PROC     9196--IMP-PTR  9231--IMP-PTR  9422--IF       9423>>IF       9450--IF
      9451>>IF       9451>>IF       9454>>ASSIGN   9455>>ASSIGN   9458>>ASSIGN   9466>>IF       9469>>ASSIGN
      9474>>ASSIGN   9476>>IF       9479>>ASSIGN
B$JIT.CPFLAGS1.SLEAZE
       471**DCL       471--REDEF
B$JIT.ERR.MID
       378**DCL       378--REDEF
B$JIT.FACCN
       377**DCL      9472>>ASSIGN
B$JIT.HPSN
       545**DCL      9546>>ASSIGN
B$JIT.JRESPEAK
       539**DCL       540--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
       648**DCL       648--REDEF     649--REDEF
B$JIT.PNR
       552**DCL       552--REDEF
B$JIT.TSLINE
       646**DCL       647--REDEF
B$JIT$
      8708**DCL       372--IMP-PTR  9472>>ASSIGN   9546>>ASSIGN
CLOSE_SAVE
      9283**DCL      9520<>CALL
CLOSE_SAVE.SN_
      9283**DCL      9283--REDEF
CLOSE_SAVE.UTL_
      9284**DCL      9284--REDEF
CLOSE_SAVE.V
      9288**DCL      9283--DCLINIT
CLOSE_SAVE.V.DCB#
      9289**DCL      9519<<ASSIGN
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:421  
CLOSE_SAVE.V.EXPIRE#
      9298**DCL      9298--REDEF
CLOSE_SAVE.V.TYPE#
      9296**DCL      9296--REDEF
CLOSE_SAVE.V.XTNSIZE#
      9293**DCL      9293--REDEF    9295--REDEF
CODE
      9418**DCL      9568<<ASSIGN   9570<>CALL     9577<<ASSIGN   9579<>CALL
CODE03.NRECS
      9305**DCL      9580>>ASSIGN
CODE03.UGRANS
      9303**DCL      9581>>ASSIGN
CODE04.ACCESS.TIME
      9314**DCL      9571>>ASSIGN
CODE04.CREATION.TIME
      9314**DCL      9572>>ASSIGN
CODE04.MODIFY.TIME
      9314**DCL      9573>>ASSIGN
DCB#
      8986**DCL        48--PROC     9431>>ASSIGN   9517--IF       9519>>ASSIGN   9537--IF       9540--ASSIGN
      9553--ASSIGN   9560--ASSIGN   9564--ASSIGN
ERRMSG_FID.L#
      8777**DCL      8777--IMP-SIZ
EXIST
      8987**DCL        48--PROC     9432--IF       9434>>ASSIGN
E_LOCCODE
      9588**LABEL    9570--CALLALT  9579--CALLALT
E_OPEN
      9585**LABEL    9526--CALLALT
F$DCB.ACCT#
      9374**DCL      9540--ASSIGN
F$DCB.ACTPOS
      9390**DCL      9390--REDEF
F$DCB.ARS#
      9364**DCL      9364--REDEF
F$DCB.ATTR
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:422  
      9383**DCL      9384--REDEF
F$DCB.BORROW
      9398**DCL      9398--REDEF    9398--REDEF    9398--REDEF
F$DCB.DCBNAME.L
      9412**DCL      9412--IMP-SIZ
F$DCB.EOMCHAR#
      9368**DCL      9368--REDEF
F$DCB.FCD#
      9377**DCL      9517>>IF
F$DCB.FFLG.UPD#
      9369**DCL      9560>>ASSIGN
F$DCB.FLDID
      9393**DCL      9393--REDEF
F$DCB.FORM$
      9387**DCL      9387--REDEF
F$DCB.FSECT
      9403**DCL      9403--REDEF
F$DCB.FSN#
      9380**DCL      9380--REDEF    9380--REDEF    9381--REDEF
F$DCB.HEADER$
      9386**DCL      9386--REDEF
F$DCB.IXTNSIZE#
      9384**DCL      9384--REDEF
F$DCB.LASTSTA$
      9373**DCL      9373--REDEF
F$DCB.LVL
      9399**DCL      9399--REDEF
F$DCB.NAME#.C
      9374**DCL      9374--REDEF
F$DCB.NOEOF
      9396**DCL      9396--REDEF
F$DCB.NRECS#
      9385**DCL      9385--REDEF
F$DCB.NRECX
      9404**DCL      9404--REDEF
F$DCB.OHDR
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:423  
      9396**DCL      9396--REDEF
F$DCB.ORG#
      9379**DCL      9379--REDEF
F$DCB.OWNER
      9396**DCL      9564>>ASSIGN
F$DCB.PRECNO
      9402**DCL      9402--REDEF
F$DCB.PSN#
      9374**DCL      9537>>IF       9553>>ASSIGN
F$DCB.RCSZ
      9408**DCL      9408--REDEF
F$DCB.RES#
      9375**DCL      9375--REDEF
F$DCB.SETX
      9387**DCL      9387--REDEF
F$DCB.TAB$
      9387**DCL      9387--REDEF
F$DCB.TDA
      9401**DCL      9402--REDEF
F$DCB.WSN#
      9375**DCL      9375--REDEF
FID_NAME
      9342**DCL      9443--ASSIGN
FID_NAME.L#
      9342**DCL      9500<<ASSIGN
FID_NAME.NAME#
      9342**DCL      9498<<CALLBLT  9499>>CALLBLT
FIT$
      9417**DCL      9569<<ASSIGN   9570<>CALL     9571>>ASSIGN   9572>>ASSIGN   9573>>ASSIGN   9578<<ASSIGN
      9579<>CALL     9580>>ASSIGN   9581>>ASSIGN
FIT_AREA
      9420**DCL      9442--ASSIGN   9569--ASSIGN   9578--ASSIGN
FOLDER_ACCESS
      9126**DCL      9507--ASSIGN
FOLDER_ACCESS.Q
      9127**DCL      9126--DCLINIT
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:424  
FPT_MADMUCK
      9110**DCL      9543<>CALL
FPT_MADMUCK.ACCT_
      9110**DCL      9540<<ASSIGN
FPT_MADMUCK.SN_
      9110**DCL      9541<<ASSIGN
FPT_MADMUCK.V
      9111**DCL      9110--DCLINIT
FPT_OPEN
      9055**DCL      9526<>CALL
FPT_OPEN.ACCESS_
      9057**DCL      9507<<ASSIGN   9511<<ASSIGN
FPT_OPEN.ACCT_
      9059**DCL      9444<<ASSIGN
FPT_OPEN.ACSVEH_
      9057**DCL      9058--REDEF    9512<<ASSIGN
FPT_OPEN.ALTKEYS_
      9063**DCL      9064--REDEF    9064--REDEF
FPT_OPEN.FPARAM_
      9060**DCL      9442<<ASSIGN
FPT_OPEN.HDR_
      9062**DCL      9063--REDEF
FPT_OPEN.NAME_
      9056**DCL      9443<<ASSIGN
FPT_OPEN.PASS_
      9057**DCL      9445<<ASSIGN
FPT_OPEN.SN_
      9055**DCL      9492<<ASSIGN   9496<<ASSIGN
FPT_OPEN.TAB_
      9061**DCL      9062--REDEF
FPT_OPEN.UHL_
      9055**DCL      9056--REDEF    9056--REDEF
FPT_OPEN.V
      9064**DCL      9055--DCLINIT
FPT_OPEN.V.DCB#
      9064**DCL      9431<<ASSIGN
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:425  
FPT_OPEN.V.EXIST#
      9068**DCL      9434<<ASSIGN   9436<<ASSIGN
FPT_OPEN.V.FSN#
      9095**DCL      9095--REDEF    9095--REDEF
FPT_OPEN.V.FUN#
      9074**DCL      9439<<ASSIGN   9441<<ASSIGN   9504>>IF
FPT_OPEN.WSN_
      9061**DCL      9061--REDEF
FUN
      8988**DCL        48--PROC     9437--IF       9439>>ASSIGN
GOT_SPEC
      9490**LABEL    9450--GOTO
I
      9419**DCL      9499<<CALLBLT  9500>>ASSIGN
M$CLOSE
      6140**DCL-ENT  9520--CALL
M$MADMUCK
      6148**DCL-ENT  9543--CALL
M$OPEN
      6140**DCL-ENT  9526--CALL
PACKSET
      9355**DCL      9496--ASSIGN   9541--ASSIGN
PACKSET.NUM#
      9355**DCL      9494<<ASSIGN
PACKSET.SN#
      9355**DCL      9495<<ASSIGN
VM$RADDRESS.ACCT
      9219**DCL      9466>>IF       9469>>ASSIGN
VM$RADDRESS.FOLDER
      9211**DCL      9212--REDEF    9458>>ASSIGN
VM$RADDRESS.NOMAD.DELIM
      9214**DCL      9451>>IF
VM$RADDRESS.NOMAD.FOLDER
      9213**DCL      9454>>ASSIGN
VM$RADDRESS.NOMAD.PSID
      9215**DCL      9451>>IF       9455>>ASSIGN
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:426  
VM$RADDRESS.PASS
      9216**DCL      9474>>ASSIGN
VM$RADDRESS.SITENAME
      9218**DCL      9476>>IF       9479>>ASSIGN
VM$RADDRESS.TYPE
      9208**DCL      9423>>IF
VM$UADDRESS.FOLDER
      9246**DCL      9247--REDEF
VM_FOLDER_INFO
      8943**DCL        48--PROC
VM_FOLDER_INFO.ACCT
      8946**DCL      9444--ASSIGN   9469<<ASSIGN   9472<<ASSIGN
VM_FOLDER_INFO.FLAGS.OPEN
      8977**DCL      9559<<ASSIGN
VM_FOLDER_INFO.FLAGS.OWNER
      8969**DCL      9564<<ASSIGN
VM_FOLDER_INFO.FLAGS.UPDATE
      8967**DCL      9560<<ASSIGN
VM_FOLDER_INFO.FOLDER
      8948**DCL      9454<<ASSIGN   9458<<ASSIGN   9462>>IF       9464<<ASSIGN   9498>>CALLBLT
VM_FOLDER_INFO.NRECS
      8962**DCL      9580<<ASSIGN
VM_FOLDER_INFO.PASS
      8950**DCL      9445--ASSIGN   9474<<ASSIGN
VM_FOLDER_INFO.PSID
      8944**DCL      9455<<ASSIGN   9459<<ASSIGN   9490>>IF       9495>>ASSIGN   9534>>IF       9546<<ASSIGN
      9553<<ASSIGN
VM_FOLDER_INFO.SITENAME
      8952**DCL      9479<<ASSIGN   9482<<ASSIGN
VM_FOLDER_INFO.TIME.ACCESS
      8956**DCL      9571<<ASSIGN
VM_FOLDER_INFO.TIME.CREATION
      8958**DCL      9572<<ASSIGN
VM_FOLDER_INFO.TIME.MODIFY
      8960**DCL      9573<<ASSIGN
VM_FOLDER_INFO.UGRANS
PL6.E3A0      #011=VMA$OPEN_FOLDER File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:04 Page:427  
      8964**DCL      9581<<ASSIGN
VM_SITENAME
      8900**DCL      9482>>ASSIGN
X$STRING.SIZ
      8623**DCL      8624--IMP-SIZ
XSF$LOCCODE
      9415**DCL-ENT  9570--CALL     9579--CALL

PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:428  
     2406        1        /*T***********************************************************/
     2407        2        /*T*                                                         */
     2408        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2409        4        /*T*                                                         */
     2410        5        /*T***********************************************************/
     2411        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2412        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2413        8        /*F*
     2414        9             NAME: VMA$OPEN_GLOBAL
     2415       10             PURPOSE:
     2416       11                   To open the folder containing the GLOBAL LIST definitions.
     2417       12             DESCRIPTION:
     2418       13                   This routine will open :MAIL_CENTRAL.:MAIL
     2419       14                   This file contains the GLOBAL definitions for mailing
     2420       15                   LISTS which are used when resolving addresses. This file
     2421       16                   will be opened INPUT only. Whenever a definition needs to
     2422       17                   be updated the user must USE .:MAIL/CENTRAL and have
     2423       18                   write access.
     2424       19
     2425       20                   This routine has only one parameter.
     2426       21
     2427       22                      DCB# - number of DCB to open the file with.
     2428       23        */
     2429       24        VMA$OPEN_GLOBAL: PROC (DCB#) ALTRET;
     2430       25        /***** Include files *****/
     2431       26          %INCLUDE B_ERRORS_C;
     2432     1153          %INCLUDE CP_6;
     2433     6712          %INCLUDE CP_6_SUBS;
     2434     7252          %INCLUDE VM_DATA_R;
     2435     7683        /***** Parameters *****/
     2436     7684    1   DCL DCB# UBIN WORD;
     2437     7685        /***** Fpts *****/
     2438     7686          %FPT_OPEN (FPTN=OPEN_GLOBAL,
     2439     7687                     ACCT=VM_MAIL_ACCT,
     2440     7688                     ASN=FILE,
     2441     7689                     EXIST=OLDFILE,
     2442     7690                     FUN=IN,
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:429  
     2443     7691                     NAME=GLOBAL_NAME,
     2444     7692                     SCRUB=YES,
     2445     7693                     SHARE=ALL,
     2446     7694                      STCLASS=STATIC);
     2447     7803          %VLP_NAME (FPTN=GLOBAL_NAME,NAME=':MAIL_CENTRAL',STCLASS=CONSTANT);
     2448     7830        %EJECT;
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:430  
     2449     7831        /*
     2450     7832             ***** Open the file ...
     2451     7833        */
     2452     7834    1       OPEN_GLOBAL.V.DCB# = DCB#;
     2453     7835    1       CALL M$OPEN (OPEN_GLOBAL) ALTRET(E_PMME);
     2454     7836    1       RETURN;
     2455     7837        /**/
     2456     7838    1   E_PMME:
     2457     7839    1       ALTRETURN;
     2458     7840    1   END VMA$OPEN_GLOBAL;
     2459     7841        %EOD;

PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:431  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$OPEN_GLOBAL.

   Procedure VMA$OPEN_GLOBAL requires 11 words for executable code.
   Procedure VMA$OPEN_GLOBAL requires 4 words of local(AUTO) storage.

PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:432  

 Object Unit name= VMA$OPEN_GLOBAL                            File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:05:32.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    58     72  VMA$OPEN_GLOBAL
   12  RoData even  UTS      4      4  VMA$OPEN_GLOBAL
   13   Proc  even  none    11     13  VMA$OPEN_GLOBAL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        1  VMA$OPEN_GLOBAL
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:433  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:434  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:435  


     2406        1        /*T***********************************************************/
     2407        2        /*T*                                                         */
     2408        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2409        4        /*T*                                                         */
     2410        5        /*T***********************************************************/
     2411        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2412        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2413        8        /*F*
     2414        9             NAME: VMA$OPEN_GLOBAL
     2415       10             PURPOSE:
     2416       11                   To open the folder containing the GLOBAL LIST definitions.
     2417       12             DESCRIPTION:
     2418       13                   This routine will open :MAIL_CENTRAL.:MAIL
     2419       14                   This file contains the GLOBAL definitions for mailing
     2420       15                   LISTS which are used when resolving addresses. This file
     2421       16                   will be opened INPUT only. Whenever a definition needs to
     2422       17                   be updated the user must USE .:MAIL/CENTRAL and have
     2423       18                   write access.
     2424       19
     2425       20                   This routine has only one parameter.
     2426       21
     2427       22                      DCB# - number of DCB to open the file with.
     2428       23        */
     2429       24        VMA$OPEN_GLOBAL: PROC (DCB#) ALTRET;

     24 13 000000   000000 700200 xent  VMA$OPEN_GL* TSX0  ! X66_AUTO_1
        13 000001   000004 000001                    ZERO    4,1

     2430       25        /***** Include files *****/
     2431       26          %INCLUDE B_ERRORS_C;
     2432     1153          %INCLUDE CP_6;
     2433     6712          %INCLUDE CP_6_SUBS;
     2434     7252          %INCLUDE VM_DATA_R;
     2435     7683        /***** Parameters *****/
     2436     7684    1   DCL DCB# UBIN WORD;
     2437     7685        /***** Fpts *****/
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:436  
     2438     7686          %FPT_OPEN (FPTN=OPEN_GLOBAL,
     2439     7687                     ACCT=VM_MAIL_ACCT,
     2440     7688                     ASN=FILE,
     2441     7689                     EXIST=OLDFILE,
     2442     7690                     FUN=IN,
     2443     7691                     NAME=GLOBAL_NAME,
     2444     7692                     SCRUB=YES,
     2445     7693                     SHARE=ALL,
     2446     7694                      STCLASS=STATIC);
     2447     7803          %VLP_NAME (FPTN=GLOBAL_NAME,NAME=':MAIL_CENTRAL',STCLASS=CONSTANT);
     2448     7830        %EJECT;
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:437  
     2449     7831        /*
     2450     7832             ***** Open the file ...
     2451     7833        */
     2452     7834    1       OPEN_GLOBAL.V.DCB# = DCB#;

   7834 13 000002   200003 470500                    LDP0    @DCB#,,AUTO
        13 000003   000000 720100                    LXL0    0,,PR0
        13 000004   000044 740000 11                 STX0    OPEN_GLOBAL+36

     2453     7835    1       CALL M$OPEN (OPEN_GLOBAL) ALTRET(E_PMME);

   7835 13 000005   000000 630400 11                 EPPR0   OPEN_GLOBAL
        13 000006   450000 713400                    CLIMB   alt,open
        13 000007   410400 401760                    pmme    nvectors=18
        13 000010   000012 702000 13                 TSX2    E_PMME

     2454     7836    1       RETURN;

   7836 13 000011   000000 702200 xent               TSX2  ! X66_ARET

     2455     7837        /**/
     2456     7838    1   E_PMME:
     2457     7839    1       ALTRETURN;

   7839 13 000012   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

OPEN_GLOBAL
 Sect OctLoc
  11     000   000025 777640   000044 006000   000000 177640   000000 006014    .....$..........
  11     004   000000 177640   000000 006014   000003 377640   000000 006000    ................
  11     010   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     024*  000001 777640   000000 006000   000000 177640   000000 006014    ................
  11     030   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     044*  000000 400452   000000 002001   252525 000000   000040 252520    ............. ..
  11     050   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  11     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
  11     060   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:438  
  11     064   040040 040040   000000 000000   000000 000000   000000 000000        ............
  11     070   000000 000000   ****** ******                                    ........

GLOBAL_NAME
 Sect OctLoc
  12     000   015072 115101   111114 137103   105116 124122   101114 ******    .:MAIL_CENTRAL..
     2458     7840    1   END VMA$OPEN_GLOBAL;
     2459     7841        %EOD;

PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:439  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$OPEN_GLOBAL.
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:440  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$OPEN_GLOBAL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(2088)  r     1 OPEN_GLOBAL

  ****  Section 012 RoData VMA$OPEN_GLOBAL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(126)   r     1 GLOBAL_NAME

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DCB#                     *0-0-0/w UBIN        r     1 DCB#

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:441  
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)    r     1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$OPEN_GLOBAL requires 11 words for executable code.
   Procedure VMA$OPEN_GLOBAL requires 4 words of local(AUTO) storage.
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:442  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:443  
          MINI XREF LISTING

DCB#
      7684**DCL        24--PROC     7834>>ASSIGN
ERRMSG_FID.L#
      7528**DCL      7528--IMP-SIZ
E_PMME
      7839**LABEL    7835--CALLALT
GLOBAL_NAME
      7828**DCL      7760--DCLINIT
M$OPEN
      6640**DCL-ENT  7835--CALL
OPEN_GLOBAL
      7759**DCL      7835<>CALL
OPEN_GLOBAL.ACSVEH_
      7761**DCL      7762--REDEF
OPEN_GLOBAL.ALTKEYS_
      7767**DCL      7768--REDEF    7768--REDEF
OPEN_GLOBAL.HDR_
      7766**DCL      7767--REDEF
OPEN_GLOBAL.TAB_
      7765**DCL      7766--REDEF
OPEN_GLOBAL.UHL_
      7759**DCL      7760--REDEF    7760--REDEF
OPEN_GLOBAL.V
      7768**DCL      7759--DCLINIT
OPEN_GLOBAL.V.DCB#
      7768**DCL      7834<<ASSIGN
OPEN_GLOBAL.V.FSN#
      7799**DCL      7799--REDEF    7799--REDEF
OPEN_GLOBAL.WSN_
      7765**DCL      7765--REDEF
VM_MAIL_ACCT
      7474**DCL      7764--DCLINIT
PL6.E3A0      #012=VMA$OPEN_GLOBAL File=VMA$SUBR.:VMB6TSI                        WED 08/20/97 15:05 Page:444  
X$STRING.SIZ
      7374**DCL      7375--IMP-SIZ

PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:445  
     2460        1        /*T***********************************************************/
     2461        2        /*T*                                                         */
     2462        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2463        4        /*T*                                                         */
     2464        5        /*T***********************************************************/
     2465        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2466        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2467        8        /*F*
     2468        9             NAME: VMA$OPEN_SRCH_LIST
     2469       10             PURPOSE:
     2470       11                   This routine will setup VM_SEARCH_INFO using the search list.
     2471       12             DESCRIPTION:
     2472       13                   This routine will setup the search info list with the DCB
     2473       14                   numbers of all folders to be searched.  GETDCB is called
     2474       15                   where needed.
     2475       16        */
     2476       17        VMA$OPEN_SRCH_LIST: PROC (VM_SEARCH_INFO) ALTRET;
     2477       18        /***** Include files *****/
     2478       19          %INCLUDE CP_6;
     2479     5578          %INCLUDE CP_6_SUBS;
     2480     6118          %INCLUDE VM_MACRO_C;
     2481     7386          %INCLUDE VM_SUBS_C;
     2482     7646          %INCLUDE VM_PERR_C;
     2483     7941          %INCLUDE VM_DATA_R;
     2484     8372          %VM_PROFILE;
     2485     8459          %VM_ADDTYPES;
     2486     8463          %VM_ADD_HEAD;
     2487     8492        /***** Parameters *****/
     2488     8493          %VM_SEARCH_INFO (STCLASS=" ");
     2489     8520        /***** Fpts *****/
     2490     8521          %FPT_GETDCB (STCLASS=STATIC);
     2491     8536          %FPT_CORRES (STCLASS=STATIC);
     2492     8550        /***** Based structures *****/
     2493     8551          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS="BASED(PTR$)");
     2494     8586          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS="BASED(PTR$)");
     2495     8623          %VM_FOLDER_INFO (STCLASS=AUTO);
     2496     8675          %VLP_NAME (FPTN=ADDRESS_TEXT,LEN=256,STCLASS=AUTO);
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:446  
     2497     8702        /***** External routines *****/
     2498     8703    1   DCL VMA$EXPAND_LIST_FULL ENTRY(5) ALTRET;
     2499     8704    1   DCL VMA$ERRMSG ENTRY(5);
     2500     8705    1   DCL VMA$ADD_RENTRY ENTRY(6) ALTRET;
     2501     8706    1   DCL VMB$USE_SRCH ENTRY(7) ALTRET;
     2502     8707    1   DCL VMF$MAKE_ADDRESS2 ENTRY(3);
     2503     8708        /***** Local variables *****/
     2504     8709    1   DCL I UBIN WORD AUTO;
     2505     8710    1   DCL J UBIN WORD AUTO;
     2506     8711    1   DCL PTR$ PTR AUTO;
     2507     8712        %VLP_ERRCODE (FPTN=E_BADSRCH,FCG="VM",MID="A",
     2508     8713                       ERR#=%E$BADSRCH,STCLASS=CONSTANT);
     2509     8758        /*E*      ERROR: VMA-E$BADSRCH-0
     2510     8759                  MESSAGE: Error on SRCH folder %U1, this folder ignored
     2511     8760        */
     2512     8761        %EJECT;
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:447  
     2513     8762    1         J=0;
     2514     8763    1       IF VM_SEARCH_INFO.CURRENT
     2515     8764    2       THEN DO;
     2516     8765    2           FPT_CORRES.V.DCB1# = M$MAIL_FILE_NUM; /* Open to same file */
     2517     8766    2           FPT_CORRES.V.DCB2# = M$MAIL_GLOBAL_NUM;
     2518     8767    2           CALL M$CORRES (FPT_CORRES) ALTRET(E_O_SLIST1);
     2519     8768    2           VM_SEARCH_INFO.DCB#(J) = M$MAIL_FILE_NUM;
     2520     8769    2           J=J+1;
     2521     8770    2       END;
     2522     8771    1   E_O_SLIST1:
     2523     8772    1       IF VM_SEARCH_INFO.GLOBAL
     2524     8773    2       THEN DO;
     2525     8774    2           VM_SEARCH_INFO.DCB#(J)=M$MAIL_GLOBAL_NUM;
     2526     8775    2           J=J+1;
     2527     8776    2       END;
     2528     8777    2       DO I=0 TO %VM_MAX_SRCH-1;
     2529     8778    2           IF VM_PROFILE.SEARCH_LIST$(I) ~= ADDR(NIL)
     2530     8779    3           THEN DO;
     2531     8780    3               PTR$ = VM_PROFILE.SEARCH_LIST$(I);
     2532     8781    3               IF VM_SEARCH_INFO.GETDCB#(J) = 0
     2533     8782    4               THEN DO;        /* Get a dcb for this slot */
     2534     8783    4                   FPT_GETDCB.DCBNUM_ = VECTOR(VM_SEARCH_INFO.GETDCB#(J));
     2535     8784    4                   CALL M$GETDCB(FPT_GETDCB) ALTRET(BADSRCH);
     2536     8785    4               END;
     2537     8786    3               VM_ADD_HEAD.NUM_ENTRIES = 0;
     2538     8787    3               VM_ADD_HEAD.FLAGS = '0'B;
     2539     8788    3               IF VM$RADDRESS.TYPE = %VM_ADD_RESOLVED
     2540     8789    3               THEN
     2541     8790    3                   CALL VMA$ADD_RENTRY (VM$RADDRESS.ACCT,VM$RADDRESS.FOLDER,
     2542     8791    3                     VM$RADDRESS.PASS,VM$RADDRESS.SITENAME,%NO#,
     2543     8792    3                     VM$RADDRESS.NAME_KEY) ALTRET(BADSRCH);
     2544     8793    3               ELSE
     2545     8794    3                   CALL VMA$EXPAND_LIST_FULL (VM$UADDRESS,VBASE(VM_WORK_),
     2546     8795    3                     VM_SEARCH_INFO,0,'0'B) ALTRET(BADSRCH);
     2547     8796    3               CALL VMB$USE_SRCH(,,VM_FOLDER_INFO,VM_SEARCH_INFO.GETDCB#(J),
     2548     8797    3                 VM_SEARCH_INFO,%IN#) ALTRET(BADSRCH);
     2549     8798                                                /* Shuffle dcbs */
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:448  
     2550     8799    3               VM_SEARCH_INFO.DCB#(J) = VM_SEARCH_INFO.DCB#(J-1);
     2551     8800    3               VM_SEARCH_INFO.DCB#(J-1) = VM_SEARCH_INFO.GETDCB#(J);
     2552     8801    3               VM_SEARCH_INFO.MAP(J-1) = I;
     2553     8802    3               J=J+1;
     2554     8803    3               VM_SEARCH_INFO.NUM_ENTRIES = J;
     2555     8804    4               DO NEVER;
     2556     8805    4   BADSRCH:
     2557     8806    4                   ADDRESS_TEXT.L# = LENGTHC(ADDRESS_TEXT.NAME#);
     2558     8807    4                   CALL VMF$MAKE_ADDRESS2 (ADDRESS_TEXT,VM_PROFILE.SEARCH_LIST$(I)->
              8807                            VM$RADDRESS);
     2559     8808    4                   CALL VMA$ERRMSG(E_BADSRCH,,VECTOR(ADDRESS_TEXT));
     2560     8809    4               END;
     2561     8810    3           END;                  /* If not nil */
     2562     8811    2       END;                            /* Do i */
     2563     8812    1       VM_SEARCH_INFO.NUM_ENTRIES = J;
     2564     8813    1       VM_SEARCH_INFO.ACTIVE = '1'B;
     2565     8814    1       RETURN;
     2566     8815    1   END VMA$OPEN_SRCH_LIST;
     2567     8816        %EOD;

PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:449  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$OPEN_SRCH_LIST.

   Procedure VMA$OPEN_SRCH_LIST requires 162 words for executable code.
   Procedure VMA$OPEN_SRCH_LIST requires 152 words of local(AUTO) storage.

PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:450  

 Object Unit name= VMA$OPEN_SRCH_LIST                         File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:05:48.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none    12     14  VMA$OPEN_SRCH_LIST
   12  RoData even  UTS      1      1  VMA$OPEN_SRCH_LIST
   13   Proc  even  none   162    242  VMA$OPEN_SRCH_LIST
   14  RoData even  none    17     21  VMA$OPEN_SRCH_LIST

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes    yes     yes      Std        1  VMA$OPEN_SRCH_LIST
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:451  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       6 VMA$ADD_RENTRY
 yes     yes           Std       5 VMA$EXPAND_LIST_FULL
 yes     yes           Std       7 VMB$USE_SRCH
         yes           Std       5 VMA$ERRMSG
         yes           Std       3 VMF$MAKE_ADDRESS2
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:452  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:453  


     2460        1        /*T***********************************************************/
     2461        2        /*T*                                                         */
     2462        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2463        4        /*T*                                                         */
     2464        5        /*T***********************************************************/
     2465        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2466        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2467        8        /*F*
     2468        9             NAME: VMA$OPEN_SRCH_LIST
     2469       10             PURPOSE:
     2470       11                   This routine will setup VM_SEARCH_INFO using the search list.
     2471       12             DESCRIPTION:
     2472       13                   This routine will setup the search info list with the DCB
     2473       14                   numbers of all folders to be searched.  GETDCB is called
     2474       15                   where needed.
     2475       16        */
     2476       17        VMA$OPEN_SRCH_LIST: PROC (VM_SEARCH_INFO) ALTRET;

     17 13 000000   000000 700200 xent  VMA$OPEN_SR* TSX0  ! X66_AUTO_1
        13 000001   000230 000001                    ZERO    152,1

     2477       18        /***** Include files *****/
     2478       19          %INCLUDE CP_6;
     2479     5578          %INCLUDE CP_6_SUBS;
     2480     6118          %INCLUDE VM_MACRO_C;
     2481     7386          %INCLUDE VM_SUBS_C;
     2482     7646          %INCLUDE VM_PERR_C;
     2483     7941          %INCLUDE VM_DATA_R;
     2484     8372          %VM_PROFILE;
     2485     8459          %VM_ADDTYPES;
     2486     8463          %VM_ADD_HEAD;
     2487     8492        /***** Parameters *****/
     2488     8493          %VM_SEARCH_INFO (STCLASS=" ");
     2489     8520        /***** Fpts *****/
     2490     8521          %FPT_GETDCB (STCLASS=STATIC);
     2491     8536          %FPT_CORRES (STCLASS=STATIC);
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:454  
     2492     8550        /***** Based structures *****/
     2493     8551          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS="BASED(PTR$)");
     2494     8586          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS="BASED(PTR$)");
     2495     8623          %VM_FOLDER_INFO (STCLASS=AUTO);
     2496     8675          %VLP_NAME (FPTN=ADDRESS_TEXT,LEN=256,STCLASS=AUTO);
     2497     8702        /***** External routines *****/
     2498     8703    1   DCL VMA$EXPAND_LIST_FULL ENTRY(5) ALTRET;
     2499     8704    1   DCL VMA$ERRMSG ENTRY(5);
     2500     8705    1   DCL VMA$ADD_RENTRY ENTRY(6) ALTRET;
     2501     8706    1   DCL VMB$USE_SRCH ENTRY(7) ALTRET;
     2502     8707    1   DCL VMF$MAKE_ADDRESS2 ENTRY(3);
     2503     8708        /***** Local variables *****/
     2504     8709    1   DCL I UBIN WORD AUTO;
     2505     8710    1   DCL J UBIN WORD AUTO;
     2506     8711    1   DCL PTR$ PTR AUTO;
     2507     8712        %VLP_ERRCODE (FPTN=E_BADSRCH,FCG="VM",MID="A",
     2508     8713                       ERR#=%E$BADSRCH,STCLASS=CONSTANT);
     2509     8758        /*E*      ERROR: VMA-E$BADSRCH-0
     2510     8759                  MESSAGE: Error on SRCH folder %U1, this folder ignored
     2511     8760        */
     2512     8761        %EJECT;
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:455  
     2513     8762    1         J=0;

   8762 13 000002   200215 450100                    STZ     J,,AUTO

     2514     8763    1       IF VM_SEARCH_INFO.CURRENT

   8763 13 000003   200003 470500                    LDP0    @VM_SEARCH_INFO,,AUTO
        13 000004   000042 236100                    LDQ     34,,PR0
        13 000005   100000 316003                    CANQ    32768,DU
        13 000006   000026 600000 13                 TZE     E_O_SLIST1

     2515     8764    2       THEN DO;

     2516     8765    2           FPT_CORRES.V.DCB1# = M$MAIL_FILE_NUM; /* Open to same file */

   8765 13 000007   000000 720000 xsym               LXL0    M$MAIL_FILE_NUM
        13 000010   000012 740000 11                 STX0    FPT_CORRES+2

     2517     8766    2           FPT_CORRES.V.DCB2# = M$MAIL_GLOBAL_NUM;

   8766 13 000011   000000 721000 xsym               LXL1    M$MAIL_GLOBAL_NUM
        13 000012   000012 441000 11                 SXL1    FPT_CORRES+2

     2518     8767    2           CALL M$CORRES (FPT_CORRES) ALTRET(E_O_SLIST1);

   8767 13 000013   000010 630400 11                 EPPR0   FPT_CORRES
        13 000014   460000 713400                    CLIMB   alt,+24576
        13 000015   400000 401760                    pmme    nvectors=1
        13 000016   000026 702000 13                 TSX2    E_O_SLIST1

     2519     8768    2           VM_SEARCH_INFO.DCB#(J) = M$MAIL_FILE_NUM;

   8768 13 000017   200003 470500                    LDP0    @VM_SEARCH_INFO,,AUTO
        13 000020   200215 720100                    LXL0    J,,AUTO
        13 000021   000000 235000 xsym               LDA     M$MAIL_FILE_NUM
        13 000022   000001 755110                    STA     1,X0,PR0

PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:456  
     2520     8769    2           J=J+1;

   8769 13 000023   200215 236100                    LDQ     J,,AUTO
        13 000024   000001 036007                    ADLQ    1,DL
        13 000025   200215 756100                    STQ     J,,AUTO

     2521     8770    2       END;

     2522     8771    1   E_O_SLIST1:
     2523     8772    1       IF VM_SEARCH_INFO.GLOBAL

   8772 13 000026   200003 470500       E_O_SLIST1   LDP0    @VM_SEARCH_INFO,,AUTO
        13 000027   000042 236100                    LDQ     34,,PR0
        13 000030   200000 316003                    CANQ    65536,DU
        13 000031   000040 600000 13                 TZE     s:8777

     2524     8773    2       THEN DO;

     2525     8774    2           VM_SEARCH_INFO.DCB#(J)=M$MAIL_GLOBAL_NUM;

   8774 13 000032   200215 720100                    LXL0    J,,AUTO
        13 000033   000000 235000 xsym               LDA     M$MAIL_GLOBAL_NUM
        13 000034   000001 755110                    STA     1,X0,PR0

     2526     8775    2           J=J+1;

   8775 13 000035   200215 236100                    LDQ     J,,AUTO
        13 000036   000001 036007                    ADLQ    1,DL
        13 000037   200215 756100                    STQ     J,,AUTO

     2527     8776    2       END;

     2528     8777    2       DO I=0 TO %VM_MAX_SRCH-1;

   8777 13 000040   200214 450100                    STZ     I,,AUTO
        13 000041   000231 710000 13                 TRA     s:8811+3

PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:457  
     2529     8778    2           IF VM_PROFILE.SEARCH_LIST$(I) ~= ADDR(NIL)

   8778 13 000042   000000 470400 xsym               LDP0    VM_PROFILE$
        13 000043   200214 720100                    LXL0    I,,AUTO
        13 000044   000115 236110                    LDQ     77,X0,PR0
        13 000045   000000 116000 14                 CMPQ    0
        13 000046   000226 600000 13                 TZE     s:8811

     2530     8779    3           THEN DO;

     2531     8780    3               PTR$ = VM_PROFILE.SEARCH_LIST$(I);

   8780 13 000047   200216 756100                    STQ     PTR$,,AUTO

     2532     8781    3               IF VM_SEARCH_INFO.GETDCB#(J) = 0

   8781 13 000050   200003 471500                    LDP1    @VM_SEARCH_INFO,,AUTO
        13 000051   200215 721100                    LXL1    J,,AUTO
        13 000052   100027 235111                    LDA     23,X1,PR1
        13 000053   000066 601000 13                 TNZ     s:8786

     2533     8782    4               THEN DO;        /* Get a dcb for this slot */

     2534     8783    4                   FPT_GETDCB.DCBNUM_ = VECTOR(VM_SEARCH_INFO.GETDCB#(J));

   8783 13 000054   777640 235007                    LDA     -96,DL
        13 000055   200215 236100                    LDQ     J,,AUTO
        13 000056   000022 736000                    QLS     18
        13 000057   000027 036003                    ADLQ    23,DU
        13 000060   200003 036100                    ADLQ    @VM_SEARCH_INFO,,AUTO
        13 000061   000004 757000 11                 STAQ    FPT_GETDCB+4

     2535     8784    4                   CALL M$GETDCB(FPT_GETDCB) ALTRET(BADSRCH);

   8784 13 000062   000000 630400 11                 EPPR0   FPT_GETDCB
        13 000063   460002 713400                    CLIMB   alt,+24578
        13 000064   401000 401760                    pmme    nvectors=3
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:458  
        13 000065   000174 702000 13                 TSX2    BADSRCH

     2536     8785    4               END;

     2537     8786    3               VM_ADD_HEAD.NUM_ENTRIES = 0;

   8786 13 000066   000000 470400 xsym               LDP0    VM_ADDLIST$
        13 000067   000001 450100                    STZ     1,,PR0

     2538     8787    3               VM_ADD_HEAD.FLAGS = '0'B;

   8787 13 000070   000002 450100                    STZ     2,,PR0

     2539     8788    3               IF VM$RADDRESS.TYPE = %VM_ADD_RESOLVED

   8788 13 000071   200216 471500                    LDP1    PTR$,,AUTO
        13 000072   100002 236100                    LDQ     2,,PR1
        13 000073   000777 376003                    ANQ     511,DU
        13 000074   000001 116003                    CMPQ    1,DU
        13 000075   000123 601000 13                 TNZ     s:8794

     2540     8789    3               THEN
     2541     8790    3                   CALL VMA$ADD_RENTRY (VM$RADDRESS.ACCT,VM$RADDRESS.FOLDER,

   8790 13 000076   200216 236100                    LDQ     PTR$,,AUTO
        13 000077   000003 036000 14                 ADLQ    3
        13 000100   000004 235000 14                 LDA     4
        13 000101   200224 757100                    STAQ    PTR$+6,,AUTO
        13 000102   200216 236100                    LDQ     PTR$,,AUTO
        13 000103   000005 036000 14                 ADLQ    5
        13 000104   200223 756100                    STQ     PTR$+5,,AUTO
        13 000105   200216 236100                    LDQ     PTR$,,AUTO
        13 000106   000006 036000 14                 ADLQ    6
        13 000107   200222 756100                    STQ     PTR$+4,,AUTO
        13 000110   200216 236100                    LDQ     PTR$,,AUTO
        13 000111   000007 036000 14                 ADLQ    7
        13 000112   200221 756100                    STQ     PTR$+3,,AUTO
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:459  
        13 000113   200216 236100                    LDQ     PTR$,,AUTO
        13 000114   000010 036000 14                 ADLQ    8
        13 000115   200220 756100                    STQ     PTR$+2,,AUTO
        13 000116   200220 630500                    EPPR0   PTR$+2,,AUTO
        13 000117   000001 631400 14                 EPPR1   1
        13 000120   000000 701000 xent               TSX1    VMA$ADD_RENTRY
        13 000121   000174 702000 13                 TSX2    BADSRCH
        13 000122   000136 710000 13                 TRA     s:8796

     2542     8791    3                     VM$RADDRESS.PASS,VM$RADDRESS.SITENAME,%NO#,
     2543     8792    3                     VM$RADDRESS.NAME_KEY) ALTRET(BADSRCH);
     2544     8793    3               ELSE
     2545     8794    3                   CALL VMA$EXPAND_LIST_FULL (VM$UADDRESS,VBASE(VM_WORK_),

   8794 13 000123   000004 236000 14                 LDQ     4
        13 000124   200224 756100                    STQ     PTR$+6,,AUTO
        13 000125   200003 235100                    LDA     @VM_SEARCH_INFO,,AUTO
        13 000126   200222 757100                    STAQ    PTR$+4,,AUTO
        13 000127   000012 236000 14                 LDQ     10
        13 000130   200216 235100                    LDA     PTR$,,AUTO
        13 000131   200220 757100                    STAQ    PTR$+2,,AUTO
        13 000132   200220 630500                    EPPR0   PTR$+2,,AUTO
        13 000133   000011 631400 14                 EPPR1   9
        13 000134   000000 701000 xent               TSX1    VMA$EXPAND_LIST_FULL
        13 000135   000174 702000 13                 TSX2    BADSRCH

     2546     8795    3                     VM_SEARCH_INFO,0,'0'B) ALTRET(BADSRCH);
     2547     8796    3               CALL VMB$USE_SRCH(,,VM_FOLDER_INFO,VM_SEARCH_INFO.GETDCB#(J),

   8796 13 000136   000014 236000 14                 LDQ     12
        13 000137   200003 235100                    LDA     @VM_SEARCH_INFO,,AUTO
        13 000140   200224 757100                    STAQ    PTR$+6,,AUTO
        13 000141   200215 236100                    LDQ     J,,AUTO
        13 000142   000022 736000                    QLS     18
        13 000143   000027 036003                    ADLQ    23,DU
        13 000144   200003 036100                    ADLQ    @VM_SEARCH_INFO,,AUTO
        13 000145   200223 756100                    STQ     PTR$+5,,AUTO
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:460  
        13 000146   200004 630500                    EPPR0   VM_FOLDER_INFO,,AUTO
        13 000147   200222 450500                    STP0    PTR$+4,,AUTO
        13 000150   000000 236000 14                 LDQ     0
        13 000151   000000 235000 14                 LDA     0
        13 000152   200220 757100                    STAQ    PTR$+2,,AUTO
        13 000153   200220 630500                    EPPR0   PTR$+2,,AUTO
        13 000154   000001 631400 14                 EPPR1   1
        13 000155   000000 701000 xent               TSX1    VMB$USE_SRCH
        13 000156   000174 702000 13                 TSX2    BADSRCH

     2548     8797    3                 VM_SEARCH_INFO,%IN#) ALTRET(BADSRCH);
     2549     8798                                                /* Shuffle dcbs */
     2550     8799    3               VM_SEARCH_INFO.DCB#(J) = VM_SEARCH_INFO.DCB#(J-1);

   8799 13 000157   200003 470500                    LDP0    @VM_SEARCH_INFO,,AUTO
        13 000160   200215 720100                    LXL0    J,,AUTO
        13 000161   000000 235110                    LDA     0,X0,PR0
        13 000162   000001 755110                    STA     1,X0,PR0

     2551     8800    3               VM_SEARCH_INFO.DCB#(J-1) = VM_SEARCH_INFO.GETDCB#(J);

   8800 13 000163   000027 235110                    LDA     23,X0,PR0
        13 000164   000000 755110                    STA     0,X0,PR0

     2552     8801    3               VM_SEARCH_INFO.MAP(J-1) = I;

   8801 13 000165   200214 236100                    LDQ     I,,AUTO
        13 000166   000013 756110                    STQ     11,X0,PR0

     2553     8802    3               J=J+1;

   8802 13 000167   200215 235100                    LDA     J,,AUTO
        13 000170   000001 035007                    ADLA    1,DL
        13 000171   200215 755100                    STA     J,,AUTO

     2554     8803    3               VM_SEARCH_INFO.NUM_ENTRIES = J;

PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:461  
   8803 13 000172   000000 755100                    STA     0,,PR0

     2555     8804    4               DO NEVER;

   8804 13 000173   000226 710000 13                 TRA     s:8811

     2556     8805    4   BADSRCH:
     2557     8806    4                   ADDRESS_TEXT.L# = LENGTHC(ADDRESS_TEXT.NAME#);

   8806 13 000174   400000 236003       BADSRCH      LDQ     -131072,DU
        13 000175   200113 552140                    STBQ    ADDRESS_TEXT,'40'O,AUTO

     2558     8807    4                   CALL VMF$MAKE_ADDRESS2 (ADDRESS_TEXT,VM_PROFILE.SEARCH_LIST$(I)->
              8807                            VM$RADDRESS);

   8807 13 000176   000000 470400 xsym               LDP0    VM_PROFILE$
        13 000177   200214 720100                    LXL0    I,,AUTO
        13 000200   000115 471510                    LDP1    77,X0,PR0
        13 000201   200221 451500                    STP1    PTR$+3,,AUTO
        13 000202   200113 633500                    EPPR3   ADDRESS_TEXT,,AUTO
        13 000203   200220 453500                    STP3    PTR$+2,,AUTO
        13 000204   200220 630500                    EPPR0   PTR$+2,,AUTO
        13 000205   000015 631400 14                 EPPR1   13
        13 000206   000000 701000 xent               TSX1    VMF$MAKE_ADDRESS2
        13 000207   000000 011000                    NOP     0

     2559     8808    4                   CALL VMA$ERRMSG(E_BADSRCH,,VECTOR(ADDRESS_TEXT));

   8808 13 000210   000016 235000 14                 LDA     14
        13 000211   200220 452500                    STP2    PTR$+2,,AUTO
        13 000212   200220 236100                    LDQ     PTR$+2,,AUTO
        13 000213   000113 036003                    ADLQ    75,DU
        13 000214   200222 757100                    STAQ    PTR$+4,,AUTO
        13 000215   200222 630500                    EPPR0   PTR$+4,,AUTO
        13 000216   200226 450500                    STP0    PTR$+8,,AUTO
        13 000217   000000 236000 14                 LDQ     0
        13 000220   000020 235000 14                 LDA     16
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:462  
        13 000221   200224 757100                    STAQ    PTR$+6,,AUTO
        13 000222   200224 630500                    EPPR0   PTR$+6,,AUTO
        13 000223   000017 631400 14                 EPPR1   15
        13 000224   000000 701000 xent               TSX1    VMA$ERRMSG
        13 000225   000000 011000                    NOP     0

     2560     8809    4               END;

     2561     8810    3           END;                  /* If not nil */

     2562     8811    2       END;                            /* Do i */

   8811 13 000226   200214 235100                    LDA     I,,AUTO
        13 000227   000001 035007                    ADLA    1,DL
        13 000230   200214 755100                    STA     I,,AUTO
        13 000231   200214 235100                    LDA     I,,AUTO
        13 000232   000004 115007                    CMPA    4,DL
        13 000233   000042 602000 13                 TNC     s:8778

     2563     8812    1       VM_SEARCH_INFO.NUM_ENTRIES = J;

   8812 13 000234   200003 470500                    LDP0    @VM_SEARCH_INFO,,AUTO
        13 000235   200215 236100                    LDQ     J,,AUTO
        13 000236   000000 756100                    STQ     0,,PR0

     2564     8813    1       VM_SEARCH_INFO.ACTIVE = '1'B;

   8813 13 000237   400000 236003                    LDQ     -131072,DU
        13 000240   000042 256100                    ORSQ    34,,PR0

     2565     8814    1       RETURN;

   8814 13 000241   000000 702200 xent               TSX2  ! X66_ARET

FPT_GETDCB
 Sect OctLoc
  11     000   000001 777640   000006 006000   000000 177640   000000 006014    ................
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:463  
  11     004   000000 177640   000000 006014   000000 000000   000000 000000    ................

FPT_CORRES
 Sect OctLoc
  11     010   000001 777640   000012 006000   000000 000000   ****** ******    ................

E_BADSRCH
 Sect OctLoc
  12     000   261501 001570                                                    ....

(unnamed)
 Sect OctLoc
  14     000   000000 006014   000006 000000   000000 000000   000002 400000    ................
  14     004   000002 006000   000017 600000   000015 600000   000007 400000    ................
  14     010   000021 600000   000005 000000   000001 006000   000000 000002    ................
  14     014   000013 006000   000002 000000   000100 177640   000003 000000    .........@......
  14     020   000000 006000                                                    ....
     2566     8815    1   END VMA$OPEN_SRCH_LIST;
     2567     8816        %EOD;

PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:464  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$OPEN_SRCH_LIST.
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:465  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$OPEN_SRCH_LIST

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    10-0-0/d STRC(144)   r     1 FPT_CORRES                 0-0-0/d STRC(288)   r     1 FPT_GETDCB

  ****  Section 012 RoData VMA$OPEN_SRCH_LIST

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 E_BADSRCH

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @VM_SEARCH_INFO          113-0-0/c STRC(2313)  r     1 ADDRESS_TEXT
   214-0-0/w UBIN        r     1 I                        215-0-0/w UBIN        r     1 J
   216-0-0/w PTR         r     1 PTR$                       4-0-0/w STRC(2529)  r     1 VM_FOLDER_INFO
    *0-0-0/w STRC(1260)  r     1 VM_SEARCH_INFO

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN        r     1 M$MAIL_FILE_NUM
     0-0-0/w UBIN        r     1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:466  
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR         r     1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR         r     1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT        r     1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/w STRC(711)   r     1 VM$RADDRESS
     0-0-0/w STRC(2448)  r     1 VM$UADDRESS                0-0-0/w STRC(252)   r     1 VM_ADD_HEAD
     0-0-0/w STRC(4068)  r     1 VM_PROFILE                 0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$OPEN_SRCH_LIST requires 162 words for executable code.
   Procedure VMA$OPEN_SRCH_LIST requires 152 words of local(AUTO) storage.
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:467  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:468  
          MINI XREF LISTING

ADDRESS_TEXT
      8700**DCL      8807<>CALL     8808--CALL
ADDRESS_TEXT.L#
      8700**DCL      8806<<ASSIGN
ADDRESS_TEXT.NAME#
      8700**DCL      8806--ASSIGN
BADSRCH
      8806**LABEL    8784--CALLALT  8790--CALLALT  8794--CALLALT  8796--CALLALT
ERRMSG_FID.L#
      8217**DCL      8217--IMP-SIZ
E_BADSRCH
      8725**DCL      8808<>CALL
E_O_SLIST1
      8772**LABEL    8767--CALLALT
FPT_CORRES
      8547**DCL      8767<>CALL
FPT_CORRES.V
      8547**DCL      8547--DCLINIT
FPT_CORRES.V.DCB1#
      8547**DCL      8765<<ASSIGN
FPT_CORRES.V.DCB2#
      8548**DCL      8766<<ASSIGN
FPT_GETDCB
      8532**DCL      8784<>CALL
FPT_GETDCB.DCBNUM_
      8532**DCL      8783<<ASSIGN
FPT_GETDCB.V
      8533**DCL      8532--DCLINIT
I
      8709**DCL      8777<<DOINDEX  8778>>IF       8780>>ASSIGN   8801>>ASSIGN   8807>>CALL
J
      8710**DCL      8762<<ASSIGN   8768>>ASSIGN   8769<<ASSIGN   8769>>ASSIGN   8774>>ASSIGN   8775<<ASSIGN
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:469  
      8775>>ASSIGN   8781>>IF       8783>>ASSIGN   8796>>CALL     8799>>ASSIGN   8799>>ASSIGN   8800>>ASSIGN
      8800>>ASSIGN   8801>>ASSIGN   8802<<ASSIGN   8802>>ASSIGN   8803>>ASSIGN   8812>>ASSIGN
M$CORRES
      5511**DCL-ENT  8767--CALL
M$GETDCB
      5512**DCL-ENT  8784--CALL
M$MAIL_FILE_NUM
      8128**DCL      8765>>ASSIGN   8768>>ASSIGN
M$MAIL_GLOBAL_NUM
      8132**DCL      8766>>ASSIGN   8774>>ASSIGN
PTR$
      8711**DCL      8561--IMP-PTR  8596--IMP-PTR  8780<<ASSIGN   8788>>IF       8790>>CALL     8790>>CALL
      8790>>CALL     8790>>CALL     8790>>CALL     8794>>CALL
VM$RADDRESS
      8561**DCL      8807<>CALL
VM$RADDRESS.ACCT
      8584**DCL      8790<>CALL
VM$RADDRESS.FOLDER
      8576**DCL      8577--REDEF    8790<>CALL
VM$RADDRESS.NAME_KEY
      8574**DCL      8790<>CALL
VM$RADDRESS.PASS
      8581**DCL      8790<>CALL
VM$RADDRESS.SITENAME
      8583**DCL      8790<>CALL
VM$RADDRESS.TYPE
      8573**DCL      8788>>IF
VM$UADDRESS
      8596**DCL      8794<>CALL
VM$UADDRESS.FOLDER
      8611**DCL      8612--REDEF
VMA$ADD_RENTRY
      8705**DCL-ENT  8790--CALL
VMA$ERRMSG
      8704**DCL-ENT  8808--CALL
VMA$EXPAND_LIST_FULL
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:470  
      8703**DCL-ENT  8794--CALL
VMB$USE_SRCH
      8706**DCL-ENT  8796--CALL
VMF$MAKE_ADDRESS2
      8707**DCL-ENT  8807--CALL
VM_ADDLIST$
      8071**DCL      8473--IMP-PTR  8786>>ASSIGN   8787>>ASSIGN
VM_ADD_HEAD.FLAGS
      8478**DCL      8787<<ASSIGN
VM_ADD_HEAD.NUM_ENTRIES
      8476**DCL      8786<<ASSIGN
VM_FOLDER_INFO
      8633**DCL      8796<>CALL
VM_PROFILE.SEARCH_LIST$
      8437**DCL      8778>>IF       8780>>ASSIGN   8807>>CALL
VM_PROFILE$
      8069**DCL      8382--IMP-PTR  8778>>IF       8780>>ASSIGN   8807>>CALL
VM_SEARCH_INFO
      8503**DCL        17--PROC     8794<>CALL     8796<>CALL
VM_SEARCH_INFO.ACTIVE
      8512**DCL      8813<<ASSIGN
VM_SEARCH_INFO.CURRENT
      8516**DCL      8763>>IF
VM_SEARCH_INFO.DCB#
      8506**DCL      8768<<ASSIGN   8774<<ASSIGN   8799<<ASSIGN   8799>>ASSIGN   8800<<ASSIGN
VM_SEARCH_INFO.GETDCB#
      8510**DCL      8781>>IF       8783--ASSIGN   8796<>CALL     8800>>ASSIGN
VM_SEARCH_INFO.GLOBAL
      8514**DCL      8772>>IF
VM_SEARCH_INFO.MAP
      8508**DCL      8801<<ASSIGN
VM_SEARCH_INFO.NUM_ENTRIES
      8504**DCL      8803<<ASSIGN   8812<<ASSIGN
VM_WORK_
      8097**DCL      8794<>CALL
X$STRING.SIZ
PL6.E3A0      #013=VMA$OPEN_SRCH_LIST File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:05 Page:471  
      8063**DCL      8064--IMP-SIZ

PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:472  
     2568        1        /*T***********************************************************/
     2569        2        /*T*                                                         */
     2570        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2571        4        /*T*                                                         */
     2572        5        /*T***********************************************************/
     2573        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2574        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2575        8        /*F*
     2576        9             NAME: VMA$COMPRESS_BLANKS
     2577       10             PURPOSE:
     2578       11                   To remove unnecessary blanks from a textc string.
     2579       12             DESCRIPTION:
     2580       13                   This routine will strip leading and trailing blanks and
     2581       14                   turn multiple interior blanks into a single blank.
     2582       15        */
     2583       16        VMA$COMPRESS_BLANKS: PROC (PTR$);
     2584       17          %INCLUDE B_MACROS_C;
     2585      128          %INCLUDE VM_SUBS_C;
     2586      388            %include B$TABLES_C;
     2587      496          %TEXTC (NAME=X$STRING);
     2588      501    1   DCL PTR$ PTR;
     2589      502    1   DCL INDX1 SBIN WORD AUTO;
     2590      503    1   DCL INDX2 SBIN WORD AUTO;
     2591      504    1   DCL DUMMY SBIN WORD AUTO;
     2592      505        %B$SR_NON_BLANK( NAME = NON_BLANKS );
     2593      509    1   DCL TEMPBUF CHAR(256) AUTO;
     2594      510        %EJECT;
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:473  
     2595      511    1       IF PTR$ -> X$STRING.TEXT = ' '
     2596      512    1       THEN                            /* All blanks */
     2597      513    2       DO;                          /* Return a null string */
     2598      514    2           PTR$ -> X$STRING.SIZ = 0;
     2599      515    2           RETURN;
     2600      516    2       END;
     2601      517        /*
     2602      518             ***** Search for first non-blank character
     2603      519                   starting at right end of string ...
     2604      520        */
     2605      521    1       CALL SEARCHR (INDX1,DUMMY,NON_BLANKS,PTR$->X$STRING.TEXT);
     2606      522    1       INDX1 = INDX1 + 1;
     2607      523    1       IF INDX1 < PTR$ -> X$STRING.SIZ
     2608      524    1       THEN                            /* Blank found */
     2609      525    1           IF SUBSTR(PTR$->X$STRING.TEXT,INDX1) = ' '
     2610      526    1           THEN                  /* Not an imbedded blank */
     2611      527    2           DO;               /* Strip them */
     2612      528    2               PTR$ -> X$STRING.SIZ = INDX1;
     2613      529    2           END;
     2614      530        /*
     2615      531             ***** Search for first non-blank character
     2616      532                   starting at left end of string ...
     2617      533        */
     2618      534    1       CALL SEARCH (INDX1,DUMMY,NON_BLANKS,PTR$->X$STRING.TEXT);
     2619      535    1       IF INDX1 = 0
     2620      536    1       THEN                            /* First character is non-blank */
     2621      537    1           GOTO COMPRESS_INTERIOR;
     2622      538    1       IF SUBSTR(PTR$ -> X$STRING.TEXT,0,INDX1-1) = ' '
     2623      539    1       THEN                            /* There were leading blanks */
     2624      540    2       DO;                          /* Strip them */
     2625      541    2           PTR$ -> X$STRING.TEXT = SUBSTR(PTR$ -> X$STRING.TEXT,INDX1);
     2626      542    2           PTR$ -> X$STRING.SIZ = PTR$ -> X$STRING.SIZ - INDX1;
     2627      543    2       END;
     2628      544        /*
     2629      545             ***** Now compress interior blanks ...
     2630      546        */
     2631      547    1   COMPRESS_INTERIOR:
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:474  
     2632      548    1       INDX2 = 0;
     2633      549    2       DO FOREVER;
     2634      550    2           CALL INDEX(INDX1,' ',PTR$->X$STRING.TEXT,INDX2) ALTRET(NO_BLANKS);
     2635      551    2           CALL SEARCH (INDX2,DUMMY,NON_BLANKS,PTR$->X$STRING.TEXT,INDX1);
     2636      552    2           IF INDX2 > INDX1 + 1
     2637      553    2           THEN                       /* More than 1 blank */
     2638      554    3           DO;                    /* Compress */
     2639      555    3               TEMPBUF = SUBSTR(PTR$ -> X$STRING.TEXT,INDX2);
     2640      556    3               CALL INSERT (PTR$ -> X$STRING.TEXT,INDX1+1,,TEMPBUF);
     2641      557    3               PTR$ -> X$STRING.SIZ = PTR$ -> X$STRING.SIZ -(INDX2-INDX1) + 1;
     2642      558    3           END;
     2643      559    2           INDX2 = INDX1 + 1;
     2644      560    2       END;                            /* Do forever ... end */
     2645      561    1   NO_BLANKS:
     2646      562    1       RETURN;
     2647      563    1   END VMA$COMPRESS_BLANKS;
     2648      564        %EOD;

PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:475  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$COMPRESS_BLANKS.

   Procedure VMA$COMPRESS_BLANKS requires 205 words for executable code.
   Procedure VMA$COMPRESS_BLANKS requires 76 words of local(AUTO) storage.

PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:476  

 Object Unit name= VMA$COMPRESS_BLANKS                        File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:06:03.96 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   205    315  VMA$COMPRESS_BLANKS
    1  RoData even  none     2      2  VMA$COMPRESS_BLANKS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        1  VMA$COMPRESS_BLANKS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    B$SR_NON_BLANK$
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:477  


     2568        1        /*T***********************************************************/
     2569        2        /*T*                                                         */
     2570        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2571        4        /*T*                                                         */
     2572        5        /*T***********************************************************/
     2573        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2574        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2575        8        /*F*
     2576        9             NAME: VMA$COMPRESS_BLANKS
     2577       10             PURPOSE:
     2578       11                   To remove unnecessary blanks from a textc string.
     2579       12             DESCRIPTION:
     2580       13                   This routine will strip leading and trailing blanks and
     2581       14                   turn multiple interior blanks into a single blank.
     2582       15        */
     2583       16        VMA$COMPRESS_BLANKS: PROC (PTR$);

     16  0 000000   000000 700200 xent  VMA$COMPRES* TSX0  ! X66_AUTO_1
         0 000001   000114 000001                    ZERO    76,1

     2584       17          %INCLUDE B_MACROS_C;
     2585      128          %INCLUDE VM_SUBS_C;
     2586      388            %include B$TABLES_C;
     2587      496          %TEXTC (NAME=X$STRING);
     2588      501    1   DCL PTR$ PTR;
     2589      502    1   DCL INDX1 SBIN WORD AUTO;
     2590      503    1   DCL INDX2 SBIN WORD AUTO;
     2591      504    1   DCL DUMMY SBIN WORD AUTO;
     2592      505        %B$SR_NON_BLANK( NAME = NON_BLANKS );
     2593      509    1   DCL TEMPBUF CHAR(256) AUTO;
     2594      510        %EJECT;
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:478  
     2595      511    1       IF PTR$ -> X$STRING.TEXT = ' '

    511  0 000002   200003 470500                    LDP0    @PTR$,,AUTO
         0 000003   000000 471500                    LDP1    0,,PR0
         0 000004   000100 101500                    MRL     fill='000'O
         0 000005   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000006   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
         0 000007   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000010   040000 106540                    CMPC    fill='040'O
         0 000011   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         0 000012   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000013   000021 601000 0                  TNZ     s:521

     2596      512    1       THEN                            /* All blanks */
     2597      513    2       DO;                          /* Return a null string */

     2598      514    2           PTR$ -> X$STRING.SIZ = 0;

    514  0 000014   000000 471500                    LDP1    0,,PR0
         0 000015   000100 101400                    MRL     fill='000'O
         0 000016   000001 000004 1                  ADSC9   1                        cn=0,n=4
         0 000017   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     2599      515    2           RETURN;

    515  0 000020   000000 702200 xent               TSX2  ! X66_ARET

     2600      516    2       END;
     2601      517        /*
     2602      518             ***** Search for first non-blank character
     2603      519                   starting at right end of string ...
     2604      520        */
     2605      521    1       CALL SEARCHR (INDX1,DUMMY,NON_BLANKS,PTR$->X$STRING.TEXT);

    521  0 000021   000000 471500                    LDP1    0,,PR0
         0 000022   000100 101500                    MRL     fill='000'O
         0 000023   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:479  
         0 000024   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
         0 000025   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000026   000000 636010                    EAQ     0,X0
         0 000027   000022 772000                    QRL     18
         0 000030   000000 473400 xsym               LDP3    B$SR_NON_BLANK$
         0 000031   000000 165540                    TCTR
         0 000032   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         0 000033   300000 000100                    ARG     0,,PR3
         0 000034   200004 000100                    ARG     INDX1,,AUTO
         0 000035   200004 235100                    LDA     INDX1,,AUTO
         0 000036   000033 771000                    ARL     27
         0 000037   200006 755100                    STA     DUMMY,,AUTO
         0 000040   200004 551140                    STBA    INDX1,'40'O,AUTO
         0 000041   000044 606400 0                  TTN     s:522
         0 000042   200004 054100                    AOS     INDX1,,AUTO
         0 000043   200004 156100                    SSQ     INDX1,,AUTO

     2606      522    1       INDX1 = INDX1 + 1;

    522  0 000044   200004 054100                    AOS     INDX1,,AUTO

     2607      523    1       IF INDX1 < PTR$ -> X$STRING.SIZ

    523  0 000045   000000 471500                    LDP1    0,,PR0
         0 000046   000100 101500                    MRL     fill='000'O
         0 000047   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000050   200110 000004                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=4
         0 000051   200110 236100                    LDQ     TEMPBUF+65,,AUTO
         0 000052   200004 116100                    CMPQ    INDX1,,AUTO
         0 000053   000076 604400 0                  TMOZ    s:534

     2608      524    1       THEN                            /* Blank found */
     2609      525    1           IF SUBSTR(PTR$->X$STRING.TEXT,INDX1) = ' '

    525  0 000054   000000 471500                    LDP1    0,,PR0
         0 000055   000100 101500                    MRL     fill='000'O
         0 000056   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:480  
         0 000057   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
         0 000060   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000061   000000 636010                    EAQ     0,X0
         0 000062   000022 772000                    QRL     18
         0 000063   200004 136100                    SBLQ    INDX1,,AUTO
         0 000064   000000 621006                    EAX1    0,QL
         0 000065   200004 236100                    LDQ     INDX1,,AUTO
         0 000066   040000 106546                    CMPC    fill='040'O
         0 000067   100000 200011                    ADSC9   0,Q,PR1                  cn=1,n=*X1
         0 000070   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000071   000076 601000 0                  TNZ     s:534

     2610      526    1           THEN                  /* Not an imbedded blank */
     2611      527    2           DO;               /* Strip them */

     2612      528    2               PTR$ -> X$STRING.SIZ = INDX1;

    528  0 000072   000000 471500                    LDP1    0,,PR0
         0 000073   000100 101500                    MRL     fill='000'O
         0 000074   200004 000004                    ADSC9   INDX1,,AUTO              cn=0,n=4
         0 000075   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     2613      529    2           END;

     2614      530        /*
     2615      531             ***** Search for first non-blank character
     2616      532                   starting at left end of string ...
     2617      533        */
     2618      534    1       CALL SEARCH (INDX1,DUMMY,NON_BLANKS,PTR$->X$STRING.TEXT);

    534  0 000076   000000 471500                    LDP1    0,,PR0
         0 000077   000100 101500                    MRL     fill='000'O
         0 000100   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000101   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
         0 000102   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000103   000000 164540                    TCT
         0 000104   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:481  
         0 000105   300000 000100                    ARG     0,,PR3
         0 000106   200004 000100                    ARG     INDX1,,AUTO
         0 000107   200004 236100                    LDQ     INDX1,,AUTO
         0 000110   000044 737000                    LLS     36
         0 000111   000033 771000                    ARL     27
         0 000112   200006 755100                    STA     DUMMY,,AUTO
         0 000113   200004 551140                    STBA    INDX1,'40'O,AUTO

     2619      535    1       IF INDX1 = 0

    535  0 000114   200004 236100                    LDQ     INDX1,,AUTO
         0 000115   000164 600000 0                  TZE     COMPRESS_INTERIOR

     2620      536    1       THEN                            /* First character is non-blank */
     2621      537    1           GOTO COMPRESS_INTERIOR;
     2622      538    1       IF SUBSTR(PTR$ -> X$STRING.TEXT,0,INDX1-1) = ' '

    538  0 000116   000000 471500                    LDP1    0,,PR0
         0 000117   000100 101500                    MRL     fill='000'O
         0 000120   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000121   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
         0 000122   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000123   777777 621006                    EAX1    -1,QL
         0 000124   040000 106540                    CMPC    fill='040'O
         0 000125   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         0 000126   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000127   000164 601000 0                  TNZ     COMPRESS_INTERIOR

     2623      539    1       THEN                            /* There were leading blanks */
     2624      540    2       DO;                          /* Strip them */

     2625      541    2           PTR$ -> X$STRING.TEXT = SUBSTR(PTR$ -> X$STRING.TEXT,INDX1);

    541  0 000130   000000 471500                    LDP1    0,,PR0
         0 000131   000100 101500                    MRL     fill='000'O
         0 000132   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000133   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:482  
         0 000134   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000135   000000 474500                    LDP4    0,,PR0
         0 000136   000100 101500                    MRL     fill='000'O
         0 000137   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
         0 000140   200111 000002                    ADSC9   TEMPBUF+66,,AUTO         cn=0,n=2
         0 000141   200111 222100                    LDX2    TEMPBUF+66,,AUTO
         0 000142   000000 636012                    EAQ     0,X2
         0 000143   000022 772000                    QRL     18
         0 000144   200004 136100                    SBLQ    INDX1,,AUTO
         0 000145   000000 623006                    EAX3    0,QL
         0 000146   200004 236100                    LDQ     INDX1,,AUTO
         0 000147   040140 100546                    MLR     fill='040'O
         0 000150   400000 200013                    ADSC9   0,Q,PR4                  cn=1,n=*X3
         0 000151   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0

     2626      542    2           PTR$ -> X$STRING.SIZ = PTR$ -> X$STRING.SIZ - INDX1;

    542  0 000152   000000 471500                    LDP1    0,,PR0
         0 000153   000100 101500                    MRL     fill='000'O
         0 000154   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000155   200110 000004                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=4
         0 000156   200110 236100                    LDQ     TEMPBUF+65,,AUTO
         0 000157   200004 136100                    SBLQ    INDX1,,AUTO
         0 000160   200111 756100                    STQ     TEMPBUF+66,,AUTO
         0 000161   000100 101500                    MRL     fill='000'O
         0 000162   200111 000004                    ADSC9   TEMPBUF+66,,AUTO         cn=0,n=4
         0 000163   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     2627      543    2       END;

     2628      544        /*
     2629      545             ***** Now compress interior blanks ...
     2630      546        */
     2631      547    1   COMPRESS_INTERIOR:
     2632      548    1       INDX2 = 0;

    548  0 000164   200005 450100       COMPRESS_IN* STZ     INDX2,,AUTO
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:483  

     2633      549    2       DO FOREVER;

     2634      550    2           CALL INDEX(INDX1,' ',PTR$->X$STRING.TEXT,INDX2) ALTRET(NO_BLANKS);

    550  0 000165   200003 470500                    LDP0    @PTR$,,AUTO
         0 000166   000000 471500                    LDP1    0,,PR0
         0 000167   000100 101500                    MRL     fill='000'O
         0 000170   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000171   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
         0 000172   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000173   000000 636010                    EAQ     0,X0
         0 000174   000022 772000                    QRL     18
         0 000175   200005 136100                    SBLQ    INDX2,,AUTO
         0 000176   200111 756100                    STQ     TEMPBUF+66,,AUTO
         0 000177   200005 236100                    LDQ     INDX2,,AUTO
         0 000200   200111 721100                    LXL1    TEMPBUF+66,,AUTO
         0 000201   200005 235100                    LDA     INDX2,,AUTO
         0 000202   000000 124545                    SCM     mask='000'O
         0 000203   100000 200011                    ADSC9   0,A,PR1                  cn=1,n=*X1
         0 000204   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000205   200004 000100                    ARG     INDX1,,AUTO
         0 000206   200004 056100                    ASQ     INDX1,,AUTO
         0 000207   000314 606400 0                  TTN     NO_BLANKS

     2635      551    2           CALL SEARCH (INDX2,DUMMY,NON_BLANKS,PTR$->X$STRING.TEXT,INDX1);

    551  0 000210   000000 471500                    LDP1    0,,PR0
         0 000211   000100 101500                    MRL     fill='000'O
         0 000212   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000213   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
         0 000214   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000215   000000 636010                    EAQ     0,X0
         0 000216   000022 772000                    QRL     18
         0 000217   200004 136100                    SBLQ    INDX1,,AUTO
         0 000220   200111 756100                    STQ     TEMPBUF+66,,AUTO
         0 000221   200004 236100                    LDQ     INDX1,,AUTO
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:484  
         0 000222   000000 473400 xsym               LDP3    B$SR_NON_BLANK$
         0 000223   200111 721100                    LXL1    TEMPBUF+66,,AUTO
         0 000224   000000 164546                    TCT
         0 000225   100000 200011                    ADSC9   0,Q,PR1                  cn=1,n=*X1
         0 000226   300000 000100                    ARG     0,,PR3
         0 000227   200005 000100                    ARG     INDX2,,AUTO
         0 000230   200005 235100                    LDA     INDX2,,AUTO
         0 000231   000033 771000                    ARL     27
         0 000232   200006 755100                    STA     DUMMY,,AUTO
         0 000233   200005 551140                    STBA    INDX2,'40'O,AUTO
         0 000234   200005 056100                    ASQ     INDX2,,AUTO

     2636      552    2           IF INDX2 > INDX1 + 1

    552  0 000235   000001 036007                    ADLQ    1,DL
         0 000236   200005 116100                    CMPQ    INDX2,,AUTO
         0 000237   000310 605000 0                  TPL     s:559

     2637      553    2           THEN                       /* More than 1 blank */
     2638      554    3           DO;                    /* Compress */

     2639      555    3               TEMPBUF = SUBSTR(PTR$ -> X$STRING.TEXT,INDX2);

    555  0 000240   000000 471500                    LDP1    0,,PR0
         0 000241   000100 101500                    MRL     fill='000'O
         0 000242   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000243   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
         0 000244   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000245   000000 636010                    EAQ     0,X0
         0 000246   000022 772000                    QRL     18
         0 000247   200005 136100                    SBLQ    INDX2,,AUTO
         0 000250   000000 621006                    EAX1    0,QL
         0 000251   200005 236100                    LDQ     INDX2,,AUTO
         0 000252   040100 100546                    MLR     fill='040'O
         0 000253   100000 200011                    ADSC9   0,Q,PR1                  cn=1,n=*X1
         0 000254   200007 000400                    ADSC9   TEMPBUF,,AUTO            cn=0,n=256

PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:485  
     2640      556    3               CALL INSERT (PTR$ -> X$STRING.TEXT,INDX1+1,,TEMPBUF);

    556  0 000255   000000 471500                    LDP1    0,,PR0
         0 000256   000100 101500                    MRL     fill='000'O
         0 000257   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000260   200110 000002                    ADSC9   TEMPBUF+65,,AUTO         cn=0,n=2
         0 000261   200110 220100                    LDX0    TEMPBUF+65,,AUTO
         0 000262   000000 636010                    EAQ     0,X0
         0 000263   000022 772000                    QRL     18
         0 000264   200004 136100                    SBLQ    INDX1,,AUTO
         0 000265   777777 621006                    EAX1    -1,QL
         0 000266   200004 236100                    LDQ     INDX1,,AUTO
         0 000267   040146 100500                    MLR     fill='040'O
         0 000270   200007 000400                    ADSC9   TEMPBUF,,AUTO            cn=0,n=256
         0 000271   100000 400011                    ADSC9   0,Q,PR1                  cn=2,n=*X1

     2641      557    3               PTR$ -> X$STRING.SIZ = PTR$ -> X$STRING.SIZ -(INDX2-INDX1) + 1;

    557  0 000272   000000 471500                    LDP1    0,,PR0
         0 000273   200005 236100                    LDQ     INDX2,,AUTO
         0 000274   200004 136100                    SBLQ    INDX1,,AUTO
         0 000275   200110 756100                    STQ     TEMPBUF+65,,AUTO
         0 000276   000100 101500                    MRL     fill='000'O
         0 000277   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         0 000300   200111 000004                    ADSC9   TEMPBUF+66,,AUTO         cn=0,n=4
         0 000301   200111 236100                    LDQ     TEMPBUF+66,,AUTO
         0 000302   200110 136100                    SBLQ    TEMPBUF+65,,AUTO
         0 000303   000001 036007                    ADLQ    1,DL
         0 000304   200112 756100                    STQ     TEMPBUF+67,,AUTO
         0 000305   000100 101500                    MRL     fill='000'O
         0 000306   200112 000004                    ADSC9   TEMPBUF+67,,AUTO         cn=0,n=4
         0 000307   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     2642      558    3           END;

     2643      559    2           INDX2 = INDX1 + 1;

PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:486  
    559  0 000310   200004 236100                    LDQ     INDX1,,AUTO
         0 000311   000001 036007                    ADLQ    1,DL
         0 000312   200005 756100                    STQ     INDX2,,AUTO

     2644      560    2       END;                            /* Do forever ... end */

    560  0 000313   000165 710000 0                  TRA     s:550

     2645      561    1   NO_BLANKS:
     2646      562    1       RETURN;

    562  0 000314   000000 702200 xent  NO_BLANKS    TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   1     000   040040 040040   000000 000000                                        ....
     2647      563    1   END VMA$COMPRESS_BLANKS;
     2648      564        %EOD;

PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:487  
--  Include file information  --

   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   VM_SUBS_C.:VMB6TOU  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
      No diagnostics issued in procedure VMA$COMPRESS_BLANKS.
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:488  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PTR$                      6-0-0/w SBIN        r     1 DUMMY
     4-0-0/w SBIN        r     1 INDX1                      5-0-0/w SBIN        r     1 INDX2
    *0-0-0/w PTR         r     1 PTR$                       7-0-0/c CHAR(256)   r     1 TEMPBUF

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$SR_NON_BLANK$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(4608)  r     1 NON_BLANKS                 0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$COMPRESS_BLANKS requires 205 words for executable code.
   Procedure VMA$COMPRESS_BLANKS requires 76 words of local(AUTO) storage.
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:489  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #014=VMA$COMPRESS_BLANKS File=VMA$SUBR.:VMB6TSI                    WED 08/20/97 15:06 Page:490  
          MINI XREF LISTING

B$SR_NON_BLANK$
       506**DCL       507--IMP-PTR   521>>CALLBLT   534>>CALLBLT   551>>CALLBLT
COMPRESS_INTERIOR
       548**LABEL     537--GOTO
DUMMY
       504**DCL       521<<CALLBLT   534<<CALLBLT   551<<CALLBLT
INDX1
       502**DCL       521<<CALLBLT   522<<ASSIGN    522>>ASSIGN    523>>IF        525>>IF        528>>ASSIGN
       534<<CALLBLT   535>>IF        538>>IF        541>>ASSIGN    542>>ASSIGN    550<<CALLBLT   551>>CALLBLT
       552>>IF        556>>CALLBLT   557>>ASSIGN    559>>ASSIGN
INDX2
       503**DCL       548<<ASSIGN    550>>CALLBLT   551<<CALLBLT   552>>IF        555>>ASSIGN    557>>ASSIGN
       559<<ASSIGN
NON_BLANKS
       507**DCL       521>>CALLBLT   534>>CALLBLT   551>>CALLBLT
NO_BLANKS
       562**LABEL     550--CALLALT
PTR$
       501**DCL        16--PROC      511>>IF        511>>IF        514>>ASSIGN    521>>CALLBLT   521>>CALLBLT
       523>>IF        525>>IF        525>>IF        528>>ASSIGN    534>>CALLBLT   534>>CALLBLT   538>>IF
       538>>IF        541>>ASSIGN    541>>ASSIGN    541>>ASSIGN    541>>ASSIGN    542>>ASSIGN    542>>ASSIGN
       550>>CALLBLT   550>>CALLBLT   551>>CALLBLT   551>>CALLBLT   555>>ASSIGN    555>>ASSIGN    556>>CALLBLT
       556>>CALLBLT   557>>ASSIGN    557>>ASSIGN
TEMPBUF
       509**DCL       555<<ASSIGN    556>>CALLBLT
X$STRING.SIZ
       498**DCL       499--IMP-SIZ   511>>IF        514<<ASSIGN    521>>CALLBLT   523>>IF        525>>IF
       528<<ASSIGN    534>>CALLBLT   538>>IF        541>>ASSIGN    541>>ASSIGN    542<<ASSIGN    542>>ASSIGN
       550>>CALLBLT   551>>CALLBLT   555>>ASSIGN    556>>CALLBLT   557<<ASSIGN    557>>ASSIGN
X$STRING.TEXT
       499**DCL       511>>IF        521>>CALLBLT   525>>IF        534>>CALLBLT   538>>IF        541<<ASSIGN
       541>>ASSIGN    550>>CALLBLT   551>>CALLBLT   555>>ASSIGN    556<<CALLBLT

PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:491  
     2649        1        /*T***********************************************************/
     2650        2        /*T*                                                         */
     2651        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2652        4        /*T*                                                         */
     2653        5        /*T***********************************************************/
     2654        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2655        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2656        8        /*F*
     2657        9             NAME: VMA$ERRMSG
     2658       10             PURPOSE:
     2659       11                   To diagnose errors for procedures called by SEND.
     2660       12             DESCRIPTION:
     2661       13                   If SEND is running in gateway mode (ie, if the GATEWAY
     2662       14                   option was specified on the invocation command), errors
     2663       15                   are indicated by calling M$ERR to pass the error code back
     2664       16                   to the invoking program.
     2665       17                   Otherwise, diagnostics are issued normally via XUR$ERRMSG.
     2666       18                   All procedures included in SEND should call this routine
     2667       19                   to avoid the possibility of diagnostics being written to
     2668       20                   the output stream in gateway mode, since this tends to
     2669       21                   wreak havoc on gateway programs.
     2670       22        */
     2671       23        VMA$ERRMSG: PROC (ERROR, ERRDCB, U1_, U2_, U3_);
     2672       24        /***** Include files *****/
     2673       25        %INCLUDE CP_6;
     2674     5584        %INCLUDE VM_DATA_R;
     2675     6015        %INCLUDE XUR_ENTRY;
     2676     6047        /***** Parameters *****/
     2677     6048        %VLP_ERRCODE (FPTN=ERROR, STCLASS=PARAM);
     2678     6093    1   DCL ERRDCB UBIN PARAM;
     2679     6094    1   DCL U1_ VECTOR PARAM;
     2680     6095    1   DCL U2_ VECTOR PARAM;
     2681     6096    1   DCL U3_ VECTOR PARAM;
     2682     6097        /***** Fpts *****/
     2683     6098        %FPT_ERR (FPTN=GATEWAY_ERROR, STEPCC=ERROR, CODE=ERRCODE);
     2684     6113        %VLP_ERRCODE (FPTN=ERRCODE);
     2685     6158        /***** Global data *****/
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:492  
     2686     6159    1   DCL GATEWAY BIT(1) STATIC SYMDEF INIT('0'B);
     2687     6160        %EJECT;
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:493  
     2688     6161    1       IF GATEWAY
     2689     6162    2       THEN DO;
     2690     6163    2           ERRCODE = ERROR;
     2691     6164    2           ERRCODE.SEV = MAXIMUM (ERRCODE.SEV, 4);
     2692     6165    2           CALL M$ERR (GATEWAY_ERROR);
     2693     6166    2       END;
     2694     6167
     2695     6168    1       CALL XUR$ERRMSG (ERROR, ERRDCB,, U1_, U2_, U3_);
     2696     6169    1       RETURN;
     2697     6170
     2698     6171    1   END VMA$ERRMSG;
     2699     6172        %EOD;

PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:494  
--  Include file information  --

   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ERRMSG.

   Procedure VMA$ERRMSG requires 31 words for executable code.
   Procedure VMA$ERRMSG requires 14 words of local(AUTO) storage.

PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:495  

 Object Unit name= VMA$ERRMSG                                 File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:06:08.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none     8     10  VMA$ERRMSG
   12   Proc  even  none    31     37  VMA$ERRMSG
   13  RoData even  none     2      2  VMA$ERRMSG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        5  VMA$ERRMSG

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
   11      7  GATEWAY
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:496  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       7 XUR$ERRMSG
                       nStd      0 X66_AUTO_5
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:497  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:498  


     2649        1        /*T***********************************************************/
     2650        2        /*T*                                                         */
     2651        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2652        4        /*T*                                                         */
     2653        5        /*T***********************************************************/
     2654        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2655        7        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     2656        8        /*F*
     2657        9             NAME: VMA$ERRMSG
     2658       10             PURPOSE:
     2659       11                   To diagnose errors for procedures called by SEND.
     2660       12             DESCRIPTION:
     2661       13                   If SEND is running in gateway mode (ie, if the GATEWAY
     2662       14                   option was specified on the invocation command), errors
     2663       15                   are indicated by calling M$ERR to pass the error code back
     2664       16                   to the invoking program.
     2665       17                   Otherwise, diagnostics are issued normally via XUR$ERRMSG.
     2666       18                   All procedures included in SEND should call this routine
     2667       19                   to avoid the possibility of diagnostics being written to
     2668       20                   the output stream in gateway mode, since this tends to
     2669       21                   wreak havoc on gateway programs.
     2670       22        */
     2671       23        VMA$ERRMSG: PROC (ERROR, ERRDCB, U1_, U2_, U3_);

     23 12 000000   000000 700200 xent  VMA$ERRMSG   TSX0  ! X66_AUTO_5
        12 000001   000016 000005                    ZERO    14,5

     2672       24        /***** Include files *****/
     2673       25        %INCLUDE CP_6;
     2674     5584        %INCLUDE VM_DATA_R;
     2675     6015        %INCLUDE XUR_ENTRY;
     2676     6047        /***** Parameters *****/
     2677     6048        %VLP_ERRCODE (FPTN=ERROR, STCLASS=PARAM);
     2678     6093    1   DCL ERRDCB UBIN PARAM;
     2679     6094    1   DCL U1_ VECTOR PARAM;
     2680     6095    1   DCL U2_ VECTOR PARAM;
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:499  
     2681     6096    1   DCL U3_ VECTOR PARAM;
     2682     6097        /***** Fpts *****/
     2683     6098        %FPT_ERR (FPTN=GATEWAY_ERROR, STEPCC=ERROR, CODE=ERRCODE);
     2684     6113        %VLP_ERRCODE (FPTN=ERRCODE);
     2685     6158        /***** Global data *****/
     2686     6159    1   DCL GATEWAY BIT(1) STATIC SYMDEF INIT('0'B);
     2687     6160        %EJECT;
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:500  
     2688     6161    1       IF GATEWAY

   6161 12 000002   000007 234000 11                 SZN     GATEWAY
        12 000003   000022 605000 12                 TPL     s:6168

     2689     6162    2       THEN DO;

     2690     6163    2           ERRCODE = ERROR;

   6163 12 000004   200003 470500                    LDP0    @ERROR,,AUTO
        12 000005   000000 236100                    LDQ     0,,PR0
        12 000006   000006 756000 11                 STQ     ERRCODE

     2691     6164    2           ERRCODE.SEV = MAXIMUM (ERRCODE.SEV, 4);

   6164 12 000007   000006 236000 11                 LDQ     ERRCODE
        12 000010   000007 376007                    ANQ     7,DL
        12 000011   000004 116007                    CMPQ    4,DL
        12 000012   000014 603000 12                 TRC     s:6164+5
        12 000013   000004 236007                    LDQ     4,DL
        12 000014   000006 676000 11                 ERQ     ERRCODE
        12 000015   000007 376007                    ANQ     7,DL
        12 000016   000006 656000 11                 ERSQ    ERRCODE

     2692     6165    2           CALL M$ERR (GATEWAY_ERROR);

   6165 12 000017   000000 630400 11                 EPPR0   GATEWAY_ERROR
        12 000020   000002 713400                    CLIMB   err
        12 000021   400400 401760                    pmme    nvectors=2

     2693     6166    2       END;

     2694     6167
     2695     6168    1       CALL XUR$ERRMSG (ERROR, ERRDCB,, U1_, U2_, U3_);

   6168 12 000022   200006 237100                    LDAQ    @U2_,,AUTO
        12 000023   200014 757100                    STAQ    @U3_+5,,AUTO
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:501  
        12 000024   200005 236100                    LDQ     @U1_,,AUTO
        12 000025   000001 235000 13                 LDA     1
        12 000026   200012 757100                    STAQ    @U3_+3,,AUTO
        12 000027   200004 236100                    LDQ     @ERRDCB,,AUTO
        12 000030   200003 235100                    LDA     @ERROR,,AUTO
        12 000031   200010 757100                    STAQ    @U3_+1,,AUTO
        12 000032   200010 630500                    EPPR0   @U3_+1,,AUTO
        12 000033   000000 631400 13                 EPPR1   0
        12 000034   000000 701000 xent               TSX1    XUR$ERRMSG
        12 000035   000000 011000                    NOP     0

     2696     6169    1       RETURN;

   6169 12 000036   000000 702200 xent               TSX2  ! X66_ARET

GATEWAY_ERROR
 Sect OctLoc
  11     000   000001 777640   000004 006000   000000 777640   000006 006000    ................
  11     004   004000 000000   000000 000000                                    ........

ERRCODE
 Sect OctLoc
  11     006   000000 000000                                                    ....

GATEWAY
 Sect OctLoc
  11     007   0***** ******                                                    ....

(unnamed)
 Sect OctLoc
  13     000   000006 000000   000000 006014                                    ........
     2697     6170
     2698     6171    1   END VMA$ERRMSG;
     2699     6172        %EOD;

PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:502  
--  Include file information  --

   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$ERRMSG.
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:503  

 **** Variables and constants ****

  ****  Section 011  Data  VMA$ERRMSG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w STRC        r     1 ERRCODE                    7-0-0/b BIT         r     1 GATEWAY
     0-0-0/d STRC(216)   r     1 GATEWAY_ERROR

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ERRDCB                    3-0-0/w PTR         r     1 @ERROR
     5-0-0/w PTR         r     1 @U1_                       6-0-0/w PTR         r     1 @U2_
     7-0-0/w PTR         r     1 @U3_                      *0-0-0/w UBIN        r     1 ERRDCB
    *0-0-0/w STRC        r     1 ERROR                     *0-0-0/d VECT        r     1 U1_
    *0-0-0/d VECT        r     1 U2_                       *0-0-0/d VECT        r     1 U3_

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:504  
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VMA$ERRMSG requires 31 words for executable code.
   Procedure VMA$ERRMSG requires 14 words of local(AUTO) storage.
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:505  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #015=VMA$ERRMSG File=VMA$SUBR.:VMB6TSI                             WED 08/20/97 15:06 Page:506  
          MINI XREF LISTING

ERRCODE
      6125**DCL      6109--DCLINIT  6163<<ASSIGN
ERRCODE.SEV
      6155**DCL      6164<<ASSIGN   6164>>ASSIGN
ERRDCB
      6093**DCL        23--PROC     6168<>CALL
ERRMSG_FID.L#
      5860**DCL      5860--IMP-SIZ
ERROR
      6060**DCL        23--PROC     6163>>ASSIGN   6168<>CALL
GATEWAY
      6159**DCL      6161>>IF
GATEWAY_ERROR
      6109**DCL      6165<>CALL
GATEWAY_ERROR.V
      6109**DCL      6109--DCLINIT
GATEWAY_ERROR.V.STEPCC#
      6110**DCL      6110--REDEF
M$ERR
      5524**DCL-ENT  6165--CALL
U1_
      6094**DCL        23--PROC     6168<>CALL
U2_
      6095**DCL        23--PROC     6168<>CALL
U3_
      6096**DCL        23--PROC     6168<>CALL
X$STRING.SIZ
      5706**DCL      5707--IMP-SIZ
XUR$ERRMSG
      6030**DCL-ENT  6168--CALL

PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:507  
     2700        1        /*T***********************************************************/
     2701        2        /*T*                                                         */
     2702        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2703        4        /*T*                                                         */
     2704        5        /*T***********************************************************/
     2705        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,MCI,DCI=4 */
     2706        7        /*F*
     2707        8             NAME: VMA$OPEN_ENCL_SEGS
     2708        9             PURPOSE:
     2709       10                   To open virtual data segments to hold the enclosure
     2710       11                   context record and enclosure data records.
     2711       12             DESCRIPTION:
     2712       13        */
     2713       14        VMA$OPEN_ENCL_SEGS: PROC ALTRET;
     2714       15        /***** Include files *****/
     2715       16        %INCLUDE CP_6;
     2716     5575        %INCLUDE VM_DATA_R;
     2717     6006        %INCLUDE CP_6_SUBS;
     2718     6546        /***** Parameters *****/
     2719     6547        /***** Fpts *****/
     2720     6548        %FPT_OPEN (FPTN = OPEN_VIRT_ENCLLIST_CONS, STCLASS = CONSTANT);
     2721     6657        %FPT_OPEN (FPTN = OPEN_VIRT_ENCLREC_CONS, STCLASS = CONSTANT);
     2722     6766
     2723     6767        %FPT_OPEN (FPTN = OPEN_VIRT_ENCLLIST, STCLASS = AUTO);
     2724     6876        %FPT_OPEN (FPTN = OPEN_VIRT_ENCLREC, STCLASS = AUTO);
     2725     6985
     2726     6986        %VLP_VIRTUAL (FPTN = VIRT_ENCLLIST_CONS, STCLASS = CONSTANT,
     2727     6987                      INITIALIZE = NO,
     2728     6988                      PHYSICAL = 20,
     2729     6989                      SEGNUM = VS1,
     2730     6990                      SEGSIZE = 1048576);
     2731     7010        %VLP_VIRTUAL (FPTN = VIRT_ENCLLIST, STCLASS = AUTO);
     2732     7030
     2733     7031        %VLP_VIRTUAL (FPTN = VIRT_ENCLREC_CONS, STCLASS = CONSTANT,
     2734     7032                      INITIALIZE = NO,
     2735     7033                      PHYSICAL = 20,
     2736     7034                      SEGNUM = VS2,
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:508  
     2737     7035                      SEGSIZE = 1048576);
     2738     7055        %VLP_VIRTUAL (FPTN = VIRT_ENCLREC, STCLASS = AUTO);
     2739     7075
     2740     7076        %FPT_CLOSE (FPTN = CLOSE_VIRT_ENCLLIST_CONS, STCLASS = CONSTANT);
     2741     7118        %FPT_CLOSE (FPTN = CLOSE_VIRT_ENCLLIST,
     2742     7119                    STCLASS = AUTO,
     2743     7120                    DCB = M$VIRT1);
     2744     7162
     2745     7163        %FPT_CLOSE (FPTN = CLOSE_VIRT_ENCLREC_CONS, STCLASS = CONSTANT);
     2746     7205        %FPT_CLOSE (FPTN = CLOSE_VIRT_ENCLREC,
     2747     7206                    STCLASS = AUTO,
     2748     7207                    DCB = M$VIRT2);
     2749     7249
     2750     7250        /***** External Routines *****/
     2751     7251    1   DCL VMX$SHRINK_PTR ENTRY(4);
     2752     7252
     2753     7253        /***** DCBs *****/
     2754     7254    1   DCL M$VIRT1 DCB;
     2755     7255    1   DCL M$VIRT2 DCB;
     2756     7256
     2757     7257        /***** Static *****/
     2758     7258    1   DCL OFFSET SBIN WORD STATIC INIT(0);
     2759     7259    1   DCL SIZE   SBIN WORD STATIC INIT(1048576);
     2760     7260    1   DCL PAGESIZE SBIN WORD STATIC INIT(4096);
     2761     7261        %EJECT;
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:509  
     2762     7262    1       VIRT_ENCLLIST = VIRT_ENCLLIST_CONS;
     2763     7263    1       VIRT_ENCLREC = VIRT_ENCLREC_CONS;
     2764     7264
     2765     7265    1       OPEN_VIRT_ENCLLIST = OPEN_VIRT_ENCLLIST_CONS;
     2766     7266    1       OPEN_VIRT_ENCLLIST.V_ = VECTOR(OPEN_VIRT_ENCLLIST.V);
     2767     7267    1       OPEN_VIRT_ENCLLIST.V.FUN# = %CREATE#;
     2768     7268    1       OPEN_VIRT_ENCLLIST.V.ORG# = %KEYED#;
     2769     7269    1       OPEN_VIRT_ENCLLIST.V.ASN# = %FILE#;
     2770     7270    1       OPEN_VIRT_ENCLLIST.V.DISP# = %SCRATCH#;
     2771     7271    1       OPEN_VIRT_ENCLLIST.V.DCB# = DCBNUM(M$VIRT1);
     2772     7272    1       OPEN_VIRT_ENCLLIST.VIRTUAL_ = VECTOR(VIRT_ENCLLIST);
     2773     7273    1       CALL M$OPEN (OPEN_VIRT_ENCLLIST) ALTRET (E_PMME);
     2774     7274    1       CALL VMX$SHRINK_PTR (VIRT_ENCLLIST.PTR$,OFFSET,SIZE,VM_ENCLLIST$);
     2775     7275    1       VBASE(VM_ENCLLIST_) = VM_ENCLLIST$;
     2776     7276    1       VBOUND(VM_ENCLLIST_) = PAGESIZE-1;
     2777     7277
     2778     7278    1       OPEN_VIRT_ENCLREC = OPEN_VIRT_ENCLREC_CONS;
     2779     7279    1       OPEN_VIRT_ENCLREC.V_ = VECTOR(OPEN_VIRT_ENCLREC.V);
     2780     7280    1       OPEN_VIRT_ENCLREC.V.FUN# = %CREATE#;
     2781     7281    1       OPEN_VIRT_ENCLREC.V.ORG# = %KEYED#;
     2782     7282    1       OPEN_VIRT_ENCLREC.V.ASN# = %FILE#;
     2783     7283    1       OPEN_VIRT_ENCLREC.V.DISP# = %SCRATCH#;
     2784     7284    1       OPEN_VIRT_ENCLREC.V.DCB# = DCBNUM(M$VIRT2);
     2785     7285    1       OPEN_VIRT_ENCLREC.VIRTUAL_ = VECTOR(VIRT_ENCLREC);
     2786     7286    1       CALL M$OPEN (OPEN_VIRT_ENCLREC) ALTRET (E_PMME);
     2787     7287    1       CALL VMX$SHRINK_PTR (VIRT_ENCLREC.PTR$,OFFSET,SIZE,VM_ENCLREC$);
     2788     7288    1       VBASE(VM_ENCLREC_) = VM_ENCLREC$;
     2789     7289    1       VBOUND(VM_ENCLREC_) = PAGESIZE-1;
     2790     7290
     2791     7291    1       RETURN;
     2792     7292
     2793     7293        %EJECT;
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:510  
     2794     7294    1   VMA$CLOSE_ENCL_SEGS: ENTRY ALTRET;
     2795     7295
     2796     7296    1       CLOSE_VIRT_ENCLLIST = CLOSE_VIRT_ENCLLIST_CONS;
     2797     7297    1       CLOSE_VIRT_ENCLLIST.V_ = VECTOR(CLOSE_VIRT_ENCLLIST.V);
     2798     7298    1       CLOSE_VIRT_ENCLLIST.V.DCB# = DCBNUM(M$VIRT1);
     2799     7299
     2800     7300    1       CLOSE_VIRT_ENCLREC = CLOSE_VIRT_ENCLREC_CONS;
     2801     7301    1       CLOSE_VIRT_ENCLREC.V_ = VECTOR(CLOSE_VIRT_ENCLREC.V);
     2802     7302    1       CLOSE_VIRT_ENCLREC.V.DCB# = DCBNUM(M$VIRT1);
     2803     7303
     2804     7304    1       CALL M$CLOSE (CLOSE_VIRT_ENCLLIST) ALTRET (E_PMME);
     2805     7305    1       CALL M$CLOSE (CLOSE_VIRT_ENCLREC) ALTRET (E_PMME);
     2806     7306
     2807     7307    1       RETURN;
     2808     7308
     2809     7309    1   E_PMME:
     2810     7310
     2811     7311    1       ALTRETURN;
     2812     7312
     2813     7313    1   END VMA$OPEN_ENCL_SEGS;

PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:511  
--  Include file information  --

   CP_6_SUBS.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$OPEN_ENCL_SEGS.

   Procedure VMA$OPEN_ENCL_SEGS requires 133 words for executable code.
   Procedure VMA$OPEN_ENCL_SEGS requires 208 words of local(AUTO) storage.

    No errors detected in file VMA$SUBR.:VMB6TSI    .

PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:512  

 Object Unit name= VMA$OPEN_ENCL_SEGS                         File name= VMA$SUBR.:VMB6TOU
 UTS= AUG 20 '97 15:06:18.64 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11  RoData even  UTS    200    310  VMA$OPEN_ENCL_SEGS
   12   DCB   even  none     0      0  M$VIRT1
   13   DCB   even  none     0      0  M$VIRT2
   14   Data  even  none     3      3  VMA$OPEN_ENCL_SEGS
   15   Proc  even  none   133    205  VMA$OPEN_ENCL_SEGS
   16  RoData even  none    10     12  VMA$OPEN_ENCL_SEGS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    15      0   yes    yes     yes      Std        0  VMA$OPEN_ENCL_SEGS
    15    143          yes     yes      Std        0  VMA$CLOSE_ENCL_SEGS
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:513  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VMX$SHRINK_PTR
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA                      M$VIRT1
     M$VIRT2
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:514  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:515  


     2700        1        /*T***********************************************************/
     2701        2        /*T*                                                         */
     2702        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2703        4        /*T*                                                         */
     2704        5        /*T***********************************************************/
     2705        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,MCI,DCI=4 */
     2706        7        /*F*
     2707        8             NAME: VMA$OPEN_ENCL_SEGS
     2708        9             PURPOSE:
     2709       10                   To open virtual data segments to hold the enclosure
     2710       11                   context record and enclosure data records.
     2711       12             DESCRIPTION:
     2712       13        */
     2713       14        VMA$OPEN_ENCL_SEGS: PROC ALTRET;

     14 15 000000   000000 700200 xent  VMA$OPEN_EN* TSX0  ! X66_AUTO_0
        15 000001   000320 000000                    ZERO    208,0

     2714       15        /***** Include files *****/
     2715       16        %INCLUDE CP_6;
     2716     5575        %INCLUDE VM_DATA_R;
     2717     6006        %INCLUDE CP_6_SUBS;
     2718     6546        /***** Parameters *****/
     2719     6547        /***** Fpts *****/
     2720     6548        %FPT_OPEN (FPTN = OPEN_VIRT_ENCLLIST_CONS, STCLASS = CONSTANT);
     2721     6657        %FPT_OPEN (FPTN = OPEN_VIRT_ENCLREC_CONS, STCLASS = CONSTANT);
     2722     6766
     2723     6767        %FPT_OPEN (FPTN = OPEN_VIRT_ENCLLIST, STCLASS = AUTO);
     2724     6876        %FPT_OPEN (FPTN = OPEN_VIRT_ENCLREC, STCLASS = AUTO);
     2725     6985
     2726     6986        %VLP_VIRTUAL (FPTN = VIRT_ENCLLIST_CONS, STCLASS = CONSTANT,
     2727     6987                      INITIALIZE = NO,
     2728     6988                      PHYSICAL = 20,
     2729     6989                      SEGNUM = VS1,
     2730     6990                      SEGSIZE = 1048576);
     2731     7010        %VLP_VIRTUAL (FPTN = VIRT_ENCLLIST, STCLASS = AUTO);
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:516  
     2732     7030
     2733     7031        %VLP_VIRTUAL (FPTN = VIRT_ENCLREC_CONS, STCLASS = CONSTANT,
     2734     7032                      INITIALIZE = NO,
     2735     7033                      PHYSICAL = 20,
     2736     7034                      SEGNUM = VS2,
     2737     7035                      SEGSIZE = 1048576);
     2738     7055        %VLP_VIRTUAL (FPTN = VIRT_ENCLREC, STCLASS = AUTO);
     2739     7075
     2740     7076        %FPT_CLOSE (FPTN = CLOSE_VIRT_ENCLLIST_CONS, STCLASS = CONSTANT);
     2741     7118        %FPT_CLOSE (FPTN = CLOSE_VIRT_ENCLLIST,
     2742     7119                    STCLASS = AUTO,
     2743     7120                    DCB = M$VIRT1);
     2744     7162
     2745     7163        %FPT_CLOSE (FPTN = CLOSE_VIRT_ENCLREC_CONS, STCLASS = CONSTANT);
     2746     7205        %FPT_CLOSE (FPTN = CLOSE_VIRT_ENCLREC,
     2747     7206                    STCLASS = AUTO,
     2748     7207                    DCB = M$VIRT2);
     2749     7249
     2750     7250        /***** External Routines *****/
     2751     7251    1   DCL VMX$SHRINK_PTR ENTRY(4);
     2752     7252
     2753     7253        /***** DCBs *****/
     2754     7254    1   DCL M$VIRT1 DCB;
     2755     7255    1   DCL M$VIRT2 DCB;
     2756     7256
     2757     7257        /***** Static *****/
     2758     7258    1   DCL OFFSET SBIN WORD STATIC INIT(0);
     2759     7259    1   DCL SIZE   SBIN WORD STATIC INIT(1048576);
     2760     7260    1   DCL PAGESIZE SBIN WORD STATIC INIT(4096);
     2761     7261        %EJECT;
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:517  
     2762     7262    1       VIRT_ENCLLIST = VIRT_ENCLLIST_CONS;

   7262 15 000002   000100 100400                    MLR     fill='000'O
        15 000003   000164 000060 11                 ADSC9   VIRT_ENCLLIST_CONS       cn=0,n=48
        15 000004   200170 000060                    ADSC9   VIRT_ENCLLIST,,AUTO      cn=0,n=48

     2763     7263    1       VIRT_ENCLREC = VIRT_ENCLREC_CONS;

   7263 15 000005   000100 100400                    MLR     fill='000'O
        15 000006   000200 000060 11                 ADSC9   VIRT_ENCLREC_CONS        cn=0,n=48
        15 000007   200204 000060                    ADSC9   VIRT_ENCLREC,,AUTO       cn=0,n=48

     2764     7264
     2765     7265    1       OPEN_VIRT_ENCLLIST = OPEN_VIRT_ENCLLIST_CONS;

   7265 15 000010   000100 100400                    MLR     fill='000'O
        15 000011   000000 000350 11                 ADSC9   OPEN_VIRT_ENCLLIST_CONS  cn=0,n=232
        15 000012   200004 000350                    ADSC9   OPEN_VIRT_ENCLLIST,,AUTO cn=0,n=232

     2766     7266    1       OPEN_VIRT_ENCLLIST.V_ = VECTOR(OPEN_VIRT_ENCLLIST.V);

   7266 15 000013   000000 235000 16                 LDA     0
        15 000014   200314 452500                    STP2    CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000015   200314 236100                    LDQ     CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000016   000050 036003                    ADLQ    40,DU
        15 000017   200004 757100                    STAQ    OPEN_VIRT_ENCLLIST,,AUTO

     2767     7267    1       OPEN_VIRT_ENCLLIST.V.FUN# = %CREATE#;

   7267 15 000020   003000 236007                    LDQ     1536,DL
        15 000021   200051 552110                    STBQ    OPEN_VIRT_ENCLLIST+37,'10'O,AUTO

     2768     7268    1       OPEN_VIRT_ENCLLIST.V.ORG# = %KEYED#;

   7268 15 000022   002000 236007                    LDQ     1024,DL
        15 000023   200052 552110                    STBQ    OPEN_VIRT_ENCLLIST+38,'10'O,AUTO

PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:518  
     2769     7269    1       OPEN_VIRT_ENCLLIST.V.ASN# = %FILE#;

   7269 15 000024   000001 236007                    LDQ     1,DL
        15 000025   200051 552104                    STBQ    OPEN_VIRT_ENCLLIST+37,'04'O,AUTO

     2770     7270    1       OPEN_VIRT_ENCLLIST.V.DISP# = %SCRATCH#;

   7270 15 000026   200055 552104                    STBQ    OPEN_VIRT_ENCLLIST+41,'04'O,AUTO

     2771     7271    1       OPEN_VIRT_ENCLLIST.V.DCB# = DCBNUM(M$VIRT1);

   7271 15 000027   000000 236007 xsym               LDQ     M$VIRT1,DL
        15 000030   000000 620006                    EAX0    0,QL
        15 000031   200050 740100                    STX0    OPEN_VIRT_ENCLLIST+36,,AUTO

     2772     7272    1       OPEN_VIRT_ENCLLIST.VIRTUAL_ = VECTOR(VIRT_ENCLLIST);

   7272 15 000032   000001 235000 16                 LDA     1
        15 000033   200314 452500                    STP2    CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000034   200314 236100                    LDQ     CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000035   000170 036003                    ADLQ    120,DU
        15 000036   200010 757100                    STAQ    OPEN_VIRT_ENCLLIST+4,,AUTO

     2773     7273    1       CALL M$OPEN (OPEN_VIRT_ENCLLIST) ALTRET (E_PMME);

   7273 15 000037   200004 630500                    EPPR0   OPEN_VIRT_ENCLLIST,,AUTO
        15 000040   450000 713400                    CLIMB   alt,open
        15 000041   410400 401760                    pmme    nvectors=18
        15 000042   000204 702000 15                 TSX2    E_PMME

     2774     7274    1       CALL VMX$SHRINK_PTR (VIRT_ENCLLIST.PTR$,OFFSET,SIZE,VM_ENCLLIST$);

   7274 15 000043   000004 237000 16                 LDAQ    4
        15 000044   200316 757100                    STAQ    CLOSE_VIRT_ENCLREC+32,,AUTO
        15 000045   000003 236000 16                 LDQ     3
        15 000046   200315 756100                    STQ     CLOSE_VIRT_ENCLREC+31,,AUTO
        15 000047   200174 630500                    EPPR0   VIRT_ENCLLIST+4,,AUTO
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:519  
        15 000050   200314 450500                    STP0    CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000051   200314 630500                    EPPR0   CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000052   000002 631400 16                 EPPR1   2
        15 000053   000000 701000 xent               TSX1    VMX$SHRINK_PTR
        15 000054   000000 011000                    NOP     0

     2775     7275    1       VBASE(VM_ENCLLIST_) = VM_ENCLLIST$;

   7275 15 000055   000000 236000 xsym               LDQ     VM_ENCLLIST$
        15 000056   000001 756000 xsym               STQ     VM_ENCLLIST_+1

     2776     7276    1       VBOUND(VM_ENCLLIST_) = PAGESIZE-1;

   7276 15 000057   000002 236000 14                 LDQ     PAGESIZE
        15 000060   000001 136007                    SBLQ    1,DL
        15 000061   000020 736000                    QLS     16
        15 000062   000000 676000 xsym               ERQ     VM_ENCLLIST_
        15 000063   000006 376000 16                 ANQ     6
        15 000064   000000 656000 xsym               ERSQ    VM_ENCLLIST_

     2777     7277
     2778     7278    1       OPEN_VIRT_ENCLREC = OPEN_VIRT_ENCLREC_CONS;

   7278 15 000065   000100 100400                    MLR     fill='000'O
        15 000066   000072 000350 11                 ADSC9   OPEN_VIRT_ENCLREC_CONS   cn=0,n=232
        15 000067   200076 000350                    ADSC9   OPEN_VIRT_ENCLREC,,AUTO  cn=0,n=232

     2779     7279    1       OPEN_VIRT_ENCLREC.V_ = VECTOR(OPEN_VIRT_ENCLREC.V);

   7279 15 000070   000000 235000 16                 LDA     0
        15 000071   200314 452500                    STP2    CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000072   200314 236100                    LDQ     CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000073   000142 036003                    ADLQ    98,DU
        15 000074   200076 757100                    STAQ    OPEN_VIRT_ENCLREC,,AUTO

     2780     7280    1       OPEN_VIRT_ENCLREC.V.FUN# = %CREATE#;

PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:520  
   7280 15 000075   003000 236007                    LDQ     1536,DL
        15 000076   200143 552110                    STBQ    OPEN_VIRT_ENCLREC+37,'10'O,AUTO

     2781     7281    1       OPEN_VIRT_ENCLREC.V.ORG# = %KEYED#;

   7281 15 000077   002000 236007                    LDQ     1024,DL
        15 000100   200144 552110                    STBQ    OPEN_VIRT_ENCLREC+38,'10'O,AUTO

     2782     7282    1       OPEN_VIRT_ENCLREC.V.ASN# = %FILE#;

   7282 15 000101   000001 236007                    LDQ     1,DL
        15 000102   200143 552104                    STBQ    OPEN_VIRT_ENCLREC+37,'04'O,AUTO

     2783     7283    1       OPEN_VIRT_ENCLREC.V.DISP# = %SCRATCH#;

   7283 15 000103   200147 552104                    STBQ    OPEN_VIRT_ENCLREC+41,'04'O,AUTO

     2784     7284    1       OPEN_VIRT_ENCLREC.V.DCB# = DCBNUM(M$VIRT2);

   7284 15 000104   000000 236007 xsym               LDQ     M$VIRT2,DL
        15 000105   000000 620006                    EAX0    0,QL
        15 000106   200142 740100                    STX0    OPEN_VIRT_ENCLREC+36,,AUTO

     2785     7285    1       OPEN_VIRT_ENCLREC.VIRTUAL_ = VECTOR(VIRT_ENCLREC);

   7285 15 000107   000001 235000 16                 LDA     1
        15 000110   200314 452500                    STP2    CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000111   200314 236100                    LDQ     CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000112   000204 036003                    ADLQ    132,DU
        15 000113   200102 757100                    STAQ    OPEN_VIRT_ENCLREC+4,,AUTO

     2786     7286    1       CALL M$OPEN (OPEN_VIRT_ENCLREC) ALTRET (E_PMME);

   7286 15 000114   200076 630500                    EPPR0   OPEN_VIRT_ENCLREC,,AUTO
        15 000115   450000 713400                    CLIMB   alt,open
        15 000116   410400 401760                    pmme    nvectors=18
        15 000117   000204 702000 15                 TSX2    E_PMME
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:521  

     2787     7287    1       CALL VMX$SHRINK_PTR (VIRT_ENCLREC.PTR$,OFFSET,SIZE,VM_ENCLREC$);

   7287 15 000120   000010 237000 16                 LDAQ    8
        15 000121   200316 757100                    STAQ    CLOSE_VIRT_ENCLREC+32,,AUTO
        15 000122   000003 236000 16                 LDQ     3
        15 000123   200315 756100                    STQ     CLOSE_VIRT_ENCLREC+31,,AUTO
        15 000124   200210 630500                    EPPR0   VIRT_ENCLREC+4,,AUTO
        15 000125   200314 450500                    STP0    CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000126   200314 630500                    EPPR0   CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000127   000002 631400 16                 EPPR1   2
        15 000130   000000 701000 xent               TSX1    VMX$SHRINK_PTR
        15 000131   000000 011000                    NOP     0

     2788     7288    1       VBASE(VM_ENCLREC_) = VM_ENCLREC$;

   7288 15 000132   000000 236000 xsym               LDQ     VM_ENCLREC$
        15 000133   000001 756000 xsym               STQ     VM_ENCLREC_+1

     2789     7289    1       VBOUND(VM_ENCLREC_) = PAGESIZE-1;

   7289 15 000134   000002 236000 14                 LDQ     PAGESIZE
        15 000135   000001 136007                    SBLQ    1,DL
        15 000136   000020 736000                    QLS     16
        15 000137   000000 676000 xsym               ERQ     VM_ENCLREC_
        15 000140   000006 376000 16                 ANQ     6
        15 000141   000000 656000 xsym               ERSQ    VM_ENCLREC_

     2790     7290
     2791     7291    1       RETURN;

   7291 15 000142   000000 702200 xent               TSX2  ! X66_ARET

     2792     7292
     2793     7293        %EJECT;
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:522  
     2794     7294    1   VMA$CLOSE_ENCL_SEGS: ENTRY ALTRET;

   7294 15 000143   000000 700200 xent  VMA$CLOSE_E* TSX0  ! X66_AUTO_0
        15 000144   000320 000000                    ZERO    208,0

     2795     7295
     2796     7296    1       CLOSE_VIRT_ENCLLIST = CLOSE_VIRT_ENCLLIST_CONS;

   7296 15 000145   000100 100400                    MLR     fill='000'O
        15 000146   000214 000170 11                 ADSC9   CLOSE_VIRT_ENCLLIST_CONS cn=0,n=120
        15 000147   200220 000170                    ADSC9   CLOSE_VIRT_ENCLLIST,,AUTO cn=0,n=120

     2797     7297    1       CLOSE_VIRT_ENCLLIST.V_ = VECTOR(CLOSE_VIRT_ENCLLIST.V);

   7297 15 000150   000007 235000 16                 LDA     7
        15 000151   200314 452500                    STP2    CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000152   200314 236100                    LDQ     CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000153   000252 036003                    ADLQ    170,DU
        15 000154   200220 757100                    STAQ    CLOSE_VIRT_ENCLLIST,,AUTO

     2798     7298    1       CLOSE_VIRT_ENCLLIST.V.DCB# = DCBNUM(M$VIRT1);

   7298 15 000155   000000 236007 xsym               LDQ     M$VIRT1,DL
        15 000156   000000 620006                    EAX0    0,QL
        15 000157   200252 740100                    STX0    CLOSE_VIRT_ENCLLIST+26,,AUTO

     2799     7299
     2800     7300    1       CLOSE_VIRT_ENCLREC = CLOSE_VIRT_ENCLREC_CONS;

   7300 15 000160   000100 100400                    MLR     fill='000'O
        15 000161   000252 000170 11                 ADSC9   CLOSE_VIRT_ENCLREC_CONS  cn=0,n=120
        15 000162   200256 000170                    ADSC9   CLOSE_VIRT_ENCLREC,,AUTO cn=0,n=120

     2801     7301    1       CLOSE_VIRT_ENCLREC.V_ = VECTOR(CLOSE_VIRT_ENCLREC.V);

   7301 15 000163   000007 235000 16                 LDA     7
        15 000164   200314 452500                    STP2    CLOSE_VIRT_ENCLREC+30,,AUTO
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:523  
        15 000165   200314 236100                    LDQ     CLOSE_VIRT_ENCLREC+30,,AUTO
        15 000166   000310 036003                    ADLQ    200,DU
        15 000167   200256 757100                    STAQ    CLOSE_VIRT_ENCLREC,,AUTO

     2802     7302    1       CLOSE_VIRT_ENCLREC.V.DCB# = DCBNUM(M$VIRT1);

   7302 15 000170   000000 236007 xsym               LDQ     M$VIRT1,DL
        15 000171   000000 621006                    EAX1    0,QL
        15 000172   200310 741100                    STX1    CLOSE_VIRT_ENCLREC+26,,AUTO

     2803     7303
     2804     7304    1       CALL M$CLOSE (CLOSE_VIRT_ENCLLIST) ALTRET (E_PMME);

   7304 15 000173   200220 630500                    EPPR0   CLOSE_VIRT_ENCLLIST,,AUTO
        15 000174   450001 713400                    CLIMB   alt,close
        15 000175   406000 401760                    pmme    nvectors=13
        15 000176   000204 702000 15                 TSX2    E_PMME

     2805     7305    1       CALL M$CLOSE (CLOSE_VIRT_ENCLREC) ALTRET (E_PMME);

   7305 15 000177   200256 630500                    EPPR0   CLOSE_VIRT_ENCLREC,,AUTO
        15 000200   450001 713400                    CLIMB   alt,close
        15 000201   406000 401760                    pmme    nvectors=13
        15 000202   000204 702000 15                 TSX2    E_PMME

     2806     7306
     2807     7307    1       RETURN;

   7307 15 000203   000000 702200 xent               TSX2  ! X66_ARET

     2808     7308
     2809     7309    1   E_PMME:
     2810     7310
     2811     7311    1       ALTRETURN;

   7311 15 000204   000000 702200 xent  E_PMME       TSX2  ! X66_AALT

PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:524  
OPEN_VIRT_ENCLLIST_CONS
 Sect OctLoc
  11     000   000025 777640   000044 006000   000000 177640   000000 006014    .....$..........
  11     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     044*  000000 000042   000000 000000   252525 000000   000040 252520    ..."......... ..
  11     050   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  11     054   000000 000000   000000 000000   000000 000000   000000 000000    ................
  11     060   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  11     064   040040 040040   000000 000000   000000 000000   000000 000000        ............
  11     070   000000 000000   ****** ******                                    ........

OPEN_VIRT_ENCLREC_CONS
 Sect OctLoc
  11     072   000025 777640   000136 006000   000000 177640   000000 006014    .....^..........
  11     076   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     136*  000000 000042   000000 000000   252525 000000   000040 252520    ..."......... ..
  11     142   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  11     146   000000 000000   000000 000000   000000 000000   000000 000000    ................
  11     152   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  11     156   040040 040040   000000 000000   000000 000000   000000 000000        ............
  11     162   000000 000000   ****** ******                                    ........

VIRT_ENCLLIST_CONS
 Sect OctLoc
  11     164   000000 000001   000000 000000   000004 000000   000024 000012    ................
  11     170   000000 006014   000000 000000   000000 000000   000000 000000    ................
  11     174   000000 000000   000000 000000   000000 000000   000000 000000    ................

VIRT_ENCLREC_CONS
 Sect OctLoc
  11     200   000000 000002   000000 000000   000004 000000   000024 000012    ................
  11     204   000000 006014   000000 000000   000000 000000   000000 000000    ................
  11     210   000000 000000   000000 000000   000000 000000   000000 000000    ................

CLOSE_VIRT_ENCLLIST_CONS
 Sect OctLoc
  11     214   000003 777640   000246 006000   000000 177640   000000 006014    ................
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:525  
  11     220   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     244*  000000 177640   000000 006014   000000 000000   000000 000040    ...............
  11     250   000220 000000   000000 000000                                    ........

CLOSE_VIRT_ENCLREC_CONS
 Sect OctLoc
  11     252   000003 777640   000304 006000   000000 177640   000000 006014    ................
  11     256   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     302*  000000 177640   000000 006014   000000 000000   000000 000040    ...............
  11     306   000220 000000   000000 000000                                    ........

OFFSET
 Sect OctLoc
  14     000   000000 000000                                                    ....

SIZE
 Sect OctLoc
  14     001   000004 000000                                                    ....

PAGESIZE
 Sect OctLoc
  14     002   000000 010000                                                    ....

(unnamed)
 Sect OctLoc
  16     000   000025 777640   000013 777640   000004 000000   000000 006000    ................
  16     004   000001 006000   000000 006000   777777 600000   000003 777640    ................
  16     010   000001 006000   000000 006000                                    ........
     2812     7312
     2813     7313    1   END VMA$OPEN_ENCL_SEGS;

PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:526  
--  Include file information  --

   CP_6_SUBS.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VMA$OPEN_ENCL_SEGS.
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:527  

 **** Variables and constants ****

  ****  Section 011 RoData VMA$OPEN_ENCL_SEGS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   214-0-0/d STRC(1080)  r     1 CLOSE_VIRT_ENCLLIST_CONS
   252-0-0/d STRC(1080)  r     1 CLOSE_VIRT_ENCLREC_CONS
     0-0-0/d STRC(2088)  r     1 OPEN_VIRT_ENCLLIST_CONS
    72-0-0/d STRC(2088)  r     1 OPEN_VIRT_ENCLREC_CONS
   164-0-0/w STRC(432)   r     1 VIRT_ENCLLIST_CONS       200-0-0/w STRC(432)   r     1 VIRT_ENCLREC_CONS

  ****  Section 014  Data  VMA$OPEN_ENCL_SEGS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 OFFSET                     2-0-0/w SBIN        r     1 PAGESIZE
     1-0-0/w SBIN        r     1 SIZE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   220-0-0/d STRC(1080)  r     1 CLOSE_VIRT_ENCLLIST      256-0-0/d STRC(1080)  r     1 CLOSE_VIRT_ENCLREC
     4-0-0/d STRC(2088)  r     1 OPEN_VIRT_ENCLLIST        76-0-0/d STRC(2088)  r     1 OPEN_VIRT_ENCLREC
   170-0-0/w STRC(432)   r     1 VIRT_ENCLLIST            204-0-0/w STRC(432)   r     1 VIRT_ENCLREC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:528  
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN              1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR         r     1 VM_ENCLLIST$
     0-0-0/d VECT        r     1 VM_ENCLLIST_               0-0-0/w PTR         r     1 VM_ENCLREC$
     0-0-0/d VECT        r     1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$VIRT1                    0-0-0N  NULL        r     1 M$VIRT2
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(9)     r     1 X$STRING

PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:529  

   Procedure VMA$OPEN_ENCL_SEGS requires 133 words for executable code.
   Procedure VMA$OPEN_ENCL_SEGS requires 208 words of local(AUTO) storage.

    No errors detected in file VMA$SUBR.:VMB6TSI    .
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:530  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:531  
          MINI XREF LISTING

CLOSE_VIRT_ENCLLIST
      7143**DCL      7296<<ASSIGN   7304<>CALL
CLOSE_VIRT_ENCLLIST.SN_
      7143**DCL      7143--REDEF
CLOSE_VIRT_ENCLLIST.UTL_
      7144**DCL      7144--REDEF
CLOSE_VIRT_ENCLLIST.V
      7148**DCL      7297--ASSIGN
CLOSE_VIRT_ENCLLIST.V.DCB#
      7149**DCL      7298<<ASSIGN
CLOSE_VIRT_ENCLLIST.V.EXPIRE#
      7158**DCL      7158--REDEF
CLOSE_VIRT_ENCLLIST.V.TYPE#
      7156**DCL      7156--REDEF
CLOSE_VIRT_ENCLLIST.V.XTNSIZE#
      7153**DCL      7153--REDEF    7155--REDEF
CLOSE_VIRT_ENCLLIST.V_
      7143**DCL      7297<<ASSIGN
CLOSE_VIRT_ENCLLIST_CONS
      7099**DCL      7296>>ASSIGN
CLOSE_VIRT_ENCLLIST_CONS.SN_
      7099**DCL      7099--REDEF
CLOSE_VIRT_ENCLLIST_CONS.UTL_
      7100**DCL      7100--REDEF
CLOSE_VIRT_ENCLLIST_CONS.V
      7104**DCL      7099--DCLINIT
CLOSE_VIRT_ENCLLIST_CONS.V.EXPIRE#
      7114**DCL      7114--REDEF
CLOSE_VIRT_ENCLLIST_CONS.V.TYPE#
      7112**DCL      7112--REDEF
CLOSE_VIRT_ENCLLIST_CONS.V.XTNSIZE#
      7109**DCL      7109--REDEF    7111--REDEF
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:532  
CLOSE_VIRT_ENCLREC
      7230**DCL      7300<<ASSIGN   7305<>CALL
CLOSE_VIRT_ENCLREC.SN_
      7230**DCL      7230--REDEF
CLOSE_VIRT_ENCLREC.UTL_
      7231**DCL      7231--REDEF
CLOSE_VIRT_ENCLREC.V
      7235**DCL      7301--ASSIGN
CLOSE_VIRT_ENCLREC.V.DCB#
      7236**DCL      7302<<ASSIGN
CLOSE_VIRT_ENCLREC.V.EXPIRE#
      7245**DCL      7245--REDEF
CLOSE_VIRT_ENCLREC.V.TYPE#
      7243**DCL      7243--REDEF
CLOSE_VIRT_ENCLREC.V.XTNSIZE#
      7240**DCL      7240--REDEF    7242--REDEF
CLOSE_VIRT_ENCLREC.V_
      7230**DCL      7301<<ASSIGN
CLOSE_VIRT_ENCLREC_CONS
      7186**DCL      7300>>ASSIGN
CLOSE_VIRT_ENCLREC_CONS.SN_
      7186**DCL      7186--REDEF
CLOSE_VIRT_ENCLREC_CONS.UTL_
      7187**DCL      7187--REDEF
CLOSE_VIRT_ENCLREC_CONS.V
      7191**DCL      7186--DCLINIT
CLOSE_VIRT_ENCLREC_CONS.V.EXPIRE#
      7201**DCL      7201--REDEF
CLOSE_VIRT_ENCLREC_CONS.V.TYPE#
      7199**DCL      7199--REDEF
CLOSE_VIRT_ENCLREC_CONS.V.XTNSIZE#
      7196**DCL      7196--REDEF    7198--REDEF
ERRMSG_FID.L#
      5851**DCL      5851--IMP-SIZ
E_PMME
      7311**LABEL    7273--CALLALT  7286--CALLALT  7304--CALLALT  7305--CALLALT
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:533  
M$CLOSE
      5503**DCL-ENT  7304--CALL     7305--CALL
M$OPEN
      5503**DCL-ENT  7273--CALL     7286--CALL
M$VIRT1
      7254**DCL      7271>>ASSIGN   7298>>ASSIGN   7302>>ASSIGN
M$VIRT2
      7255**DCL      7284>>ASSIGN
OFFSET
      7258**DCL      7274<>CALL     7287<>CALL
OPEN_VIRT_ENCLLIST
      6832**DCL      7265<<ASSIGN   7273<>CALL
OPEN_VIRT_ENCLLIST.ACSVEH_
      6834**DCL      6835--REDEF
OPEN_VIRT_ENCLLIST.ALTKEYS_
      6840**DCL      6841--REDEF    6841--REDEF
OPEN_VIRT_ENCLLIST.HDR_
      6839**DCL      6840--REDEF
OPEN_VIRT_ENCLLIST.TAB_
      6838**DCL      6839--REDEF
OPEN_VIRT_ENCLLIST.UHL_
      6832**DCL      6833--REDEF    6833--REDEF
OPEN_VIRT_ENCLLIST.V
      6841**DCL      7266--ASSIGN
OPEN_VIRT_ENCLLIST.V.ASN#
      6851**DCL      7269<<ASSIGN
OPEN_VIRT_ENCLLIST.V.DCB#
      6841**DCL      7271<<ASSIGN
OPEN_VIRT_ENCLLIST.V.DISP#
      6857**DCL      7270<<ASSIGN
OPEN_VIRT_ENCLLIST.V.FSN#
      6872**DCL      6872--REDEF    6872--REDEF
OPEN_VIRT_ENCLLIST.V.FUN#
      6851**DCL      7267<<ASSIGN
OPEN_VIRT_ENCLLIST.V.ORG#
      6852**DCL      7268<<ASSIGN
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:534  
OPEN_VIRT_ENCLLIST.VIRTUAL_
      6833**DCL      7272<<ASSIGN
OPEN_VIRT_ENCLLIST.V_
      6832**DCL      7266<<ASSIGN
OPEN_VIRT_ENCLLIST.WSN_
      6838**DCL      6838--REDEF
OPEN_VIRT_ENCLLIST_CONS
      6613**DCL      7265>>ASSIGN
OPEN_VIRT_ENCLLIST_CONS.ACSVEH_
      6615**DCL      6616--REDEF
OPEN_VIRT_ENCLLIST_CONS.ALTKEYS_
      6621**DCL      6622--REDEF    6622--REDEF
OPEN_VIRT_ENCLLIST_CONS.HDR_
      6620**DCL      6621--REDEF
OPEN_VIRT_ENCLLIST_CONS.TAB_
      6619**DCL      6620--REDEF
OPEN_VIRT_ENCLLIST_CONS.UHL_
      6613**DCL      6614--REDEF    6614--REDEF
OPEN_VIRT_ENCLLIST_CONS.V
      6622**DCL      6613--DCLINIT
OPEN_VIRT_ENCLLIST_CONS.V.FSN#
      6653**DCL      6653--REDEF    6653--REDEF
OPEN_VIRT_ENCLLIST_CONS.WSN_
      6619**DCL      6619--REDEF
OPEN_VIRT_ENCLREC
      6941**DCL      7278<<ASSIGN   7286<>CALL
OPEN_VIRT_ENCLREC.ACSVEH_
      6943**DCL      6944--REDEF
OPEN_VIRT_ENCLREC.ALTKEYS_
      6949**DCL      6950--REDEF    6950--REDEF
OPEN_VIRT_ENCLREC.HDR_
      6948**DCL      6949--REDEF
OPEN_VIRT_ENCLREC.TAB_
      6947**DCL      6948--REDEF
OPEN_VIRT_ENCLREC.UHL_
      6941**DCL      6942--REDEF    6942--REDEF
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:535  
OPEN_VIRT_ENCLREC.V
      6950**DCL      7279--ASSIGN
OPEN_VIRT_ENCLREC.V.ASN#
      6960**DCL      7282<<ASSIGN
OPEN_VIRT_ENCLREC.V.DCB#
      6950**DCL      7284<<ASSIGN
OPEN_VIRT_ENCLREC.V.DISP#
      6966**DCL      7283<<ASSIGN
OPEN_VIRT_ENCLREC.V.FSN#
      6981**DCL      6981--REDEF    6981--REDEF
OPEN_VIRT_ENCLREC.V.FUN#
      6960**DCL      7280<<ASSIGN
OPEN_VIRT_ENCLREC.V.ORG#
      6961**DCL      7281<<ASSIGN
OPEN_VIRT_ENCLREC.VIRTUAL_
      6942**DCL      7285<<ASSIGN
OPEN_VIRT_ENCLREC.V_
      6941**DCL      7279<<ASSIGN
OPEN_VIRT_ENCLREC.WSN_
      6947**DCL      6947--REDEF
OPEN_VIRT_ENCLREC_CONS
      6722**DCL      7278>>ASSIGN
OPEN_VIRT_ENCLREC_CONS.ACSVEH_
      6724**DCL      6725--REDEF
OPEN_VIRT_ENCLREC_CONS.ALTKEYS_
      6730**DCL      6731--REDEF    6731--REDEF
OPEN_VIRT_ENCLREC_CONS.HDR_
      6729**DCL      6730--REDEF
OPEN_VIRT_ENCLREC_CONS.TAB_
      6728**DCL      6729--REDEF
OPEN_VIRT_ENCLREC_CONS.UHL_
      6722**DCL      6723--REDEF    6723--REDEF
OPEN_VIRT_ENCLREC_CONS.V
      6731**DCL      6722--DCLINIT
OPEN_VIRT_ENCLREC_CONS.V.FSN#
      6762**DCL      6762--REDEF    6762--REDEF
PL6.E3A0      #016=VMA$OPEN_ENCL_SEGS File=VMA$SUBR.:VMB6TSI                     WED 08/20/97 15:06 Page:536  
OPEN_VIRT_ENCLREC_CONS.WSN_
      6728**DCL      6728--REDEF
PAGESIZE
      7260**DCL      7276>>ASSIGN   7289>>ASSIGN
SIZE
      7259**DCL      7274<>CALL     7287<>CALL
VIRT_ENCLLIST
      7021**DCL      7262<<ASSIGN   7272--ASSIGN
VIRT_ENCLLIST.PTR$
      7025**DCL      7274<>CALL
VIRT_ENCLLIST_CONS
      7001**DCL      7262>>ASSIGN
VIRT_ENCLREC
      7066**DCL      7263<<ASSIGN   7285--ASSIGN
VIRT_ENCLREC.PTR$
      7070**DCL      7287<>CALL
VIRT_ENCLREC_CONS
      7046**DCL      7263>>ASSIGN
VMX$SHRINK_PTR
      7251**DCL-ENT  7274--CALL     7287--CALL
VM_ENCLLIST$
      5720**DCL      7274<>CALL     7275>>ASSIGN
VM_ENCLLIST_
      5736**DCL      7275<<ASSIGN   7276<<ASSIGN
VM_ENCLREC$
      5722**DCL      7287<>CALL     7288>>ASSIGN
VM_ENCLREC_
      5737**DCL      7288<<ASSIGN   7289<<ASSIGN
X$STRING.SIZ
      5697**DCL      5698--IMP-SIZ
