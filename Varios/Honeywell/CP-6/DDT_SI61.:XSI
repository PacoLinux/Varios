/*M* DDT - Lists Defective track table for a physical disk. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/**/
DDT: PROC MAIN;
%INCLUDE DDT_C61;
%INCLUDE DDT_CN1;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B_SEGIDS_C;
%B$TCB;
DCL B$TCB$ PTR SYMREF;
%B$ALT;
%INCLUDE B$JIT;
DCL B$JIT$ PTR SYMREF;
%NI$DCT (NAME=N$DCT);
%INCLUDE XU_MACRO_C;
%XUR_INIT (SYNTAX=YES,PCB=P_PCB);
%P_PCB (NAME=P_PCB,STCLASS=STATIC);
%PARSE$OUT (NAME=OUT$BLK,STCLASS="BASED (OUT$)");
%PARSE$SYM (NAME=SYM$BLK,STCLASS="BASED (OUT$)");
%INCLUDE XUH_MACRO_C;
%INCLUDE XUF_ENTRY;
%INCLUDE B_ERRORS_C;
DCL 1 DDT_FID STATIC,
      2 * UBIN(9) UNAL INIT(79),
      2 TXT CHAR(79) UNAL INIT(' ');
%FPT_UNFID(DCB=M$LM,TEXTFID=DDT_FID.TXT);
%F$DCB;
DCL DDT_COMMANDS UBIN SYMREF;
%XUH_PARAM (PROCNAME=DDTNAME,PROCACCT=DDTACCT,OUTDCB1=M$DO,OUTDCB2=M$LO);
%VLP_NAME (FPTN=DDTNAME,NAME='DDT');
%VLP_ACCT (FPTN=DDTACCT,ACCT='X');
DCL M$LO DCB;
DCL M$DO DCB;
DCL M$VID DCB;
DCL M$SI DCB;
DCL M$ME DCB;
DCL M$LM DCB;
DCL 1 TEXTC BASED,
      2 CNT UBIN BYTE UNAL,
      2 TXT CHAR(4);
DCL PRMPT CHAR(0) CONSTANT INIT('Device Name: ');
DCL FMTBUF CHAR(144) STATIC ALIGNED;
DCL DEVNM CHAR(4) ALIGNED;
DCL ONE_TIME_FLG BIT(1) STATIC INIT('0'B);
DCL OUT$ PTR;
DCL 1 PARSERR REDEF OUT$,
      2 FCG BIT(12) UNAL,
      2 MID BIT(6) UNAL,
      2 MON BIT(1) UNAL,
      2 CODE UBIN(14) UNAL,
      2 SEV UBIN(3) UNAL;
DCL 1 DDT_ERROR STATIC ALIGNED,
      2 FCG BIT(12) INIT('0404'O),
      2 MID BIT(6) INIT('24'O),
      2 MON BIT(1) INIT('0'B),
      2 CODE UBIN(14) UNAL INIT(0),
      2 SEV UBIN(3) UNAL INIT(0);
%INCLUDE XUR_ENTRY;
%INCLUDE XU_FORMAT_C;
%F_FDS (DCB=M$ME,STCLASS=STATIC,BUF=FMTBUF);
/**/
%FPT_IOQ (FPTN=RD_VID,
          BPMIR=YES,
          DCB=M$VID,
          DRELADDR=0,
          FC=%DT_N_RDBIN,
          BUF=VID);
%FPT_IOQ (FPTN=GET_STATUS,
          BPMIR=YES,
          DCB=M$VID,
          DRELADDR=0,
          FC=%DT_N_RQSTAT,
          BUF=STATUS_BUF);
DCL STATUS_BUF(0:3) BIT(72) STATIC DALIGNED INIT('0'B);
DCL 1 STATUS REDEF STATUS_BUF DALIGNED,
      2 PRESENCE BIT(1) UNAL,
      2 POWEROFF BIT(1) UNAL,
      2 MAJOR UBIN(4) UNAL,
      2 SUB UBIN(6) UNAL,
      2 * BIT(60) UNAL,
      2 * (0:2) BIT(72) UNAL;
%VID (STCLASS=STATIC);
/**/
%FPT_MONINFO (FPTN=DCTPTR,
              MONPTRS=VLR_MONPTRS);
%VLR_MONPTRS;
%FPT_SAD (FPTN=SAD_TIGR,
          MONSID=%TIGRSID,
          USERSID=%SPCL1SID);
DCL N$DCT$$ PTR;
DCL 1 N$DCT$PTR REDEF N$DCT$$,
      2 * UBIN(24) UNAL,
      2 SEGID BIT(12) UNAL;
DCL 1 N$DCTPTR STATIC ALIGNED,
      2 ADR UBIN(18) UNAL,
      2 * BIT(6) UNAL INIT('0'B),
      2 * BIT(12) UNAL INIT(%SPCL1SID);
DCL N$DCT$ REDEF N$DCTPTR PTR ALIGNED;
DCL 1 N$PTRS(0:0) BASED ALIGNED,
      2 ADR UBIN(18) UNAL,
      2 * BIT(6) UNAL,
      2 SEGID BIT(12) UNAL;
DCL I UBIN;
%EJECT;
/**/
/* Code */
/**/
        DDTACCT.ACCT# = DCBADDR(DCBNUM(M$LM))->F$DCB.ACCT#;
        CALL M$MONINFO(DCTPTR) ALTRET(BAD_PMME);
        CALL M$SAD(SAD_TIGR) ALTRET(BAD_PMME);
        CALL M$UNFID(FPT_UNFID) ALTRET(BAD_PMME);
        N$DCT$$=VLR_MONPTRS.N$DCT$$;
        N$DCT$PTR.SEGID=%SPCL1SID;
        CALL XUR$INIT(XUR_INIT);
        IF DCBADDR(DCBNUM(M$SI))->F$DCB.RES#~='CR' THEN DO;
           ONE_TIME_FLG = '1'B;
           IF SUBSTR(DCBADDR(DCBNUM(M$SI))->F$DCB.RES#,0,2)='DP' AND
              SUBSTR(DCBADDR(DCBNUM(M$SI))->F$DCB.RES#,2,2)~=' ' THEN DO;
                 IF SUBSTR(DCBADDR(DCBNUM(M$SI))->F$DCB.RES#,3,1)=' ' THEN
                    CALL CONCAT(DEVNM,'DP0',SUBSTR(DCBADDR(DCBNUM(M$SI))->F$DCB.RES#,2,1));
                 ELSE DEVNM=DCBADDR(DCBNUM(M$SI))->F$DCB.RES#;
                 I=1;
                 GOTO ONE_TIME;
              END /* IF DPNN */;
           ELSE DO;
              DDT_ERROR.CODE = %DT_E$BADDEV;
              CALL XUR$SETERRMSG(DDT_FID);
              CALL ERRMSG(DDT_ERROR);
/*E*    ERROR: DDT-DT_E$BADDEV-0
        MESSAGE: That's not a legal device.
*/
              END /* ELSE */;
           END /* IF ~CR */;
        DO WHILE ('1'B);
READ_CMD:
           IF ONE_TIME_FLG THEN DO;
              CALL XUR$CLOSE_DCBS;
              CALL M$EXIT;
              END;
           CALL XUR$GETCMD(DDT_COMMANDS,OUT$,VECTOR(PRMPT)) ALTRET(PARSE_ERR);
           DO CASE(OUT$BLK.CODE);
              CASE(%DT_DP);
                 I=1;
                 IF OUT$BLK.SUBLK$(0)->SYM$BLK.TEXTC$->TEXTC.CNT<2 THEN
                    CALL CONCAT(DEVNM,'DP0',SUBSTR(OUT$BLK.SUBLK$(0)->SYM$BLK.TEXTC$->TEXTC.TXT,0,1));
                 ELSE CALL CONCAT(DEVNM,'DP',SUBSTR(OUT$BLK.SUBLK$(0)->SYM$BLK.TEXTC$->TEXTC.TXT,0,2));
ONE_TIME:
                 DO WHILE N$DCT$$->N$PTRS.SEGID(I)=%TIGRSID;
                 N$DCTPTR.ADR=N$DCT$$->N$PTRS.ADR(I);
                    IF SUBSTR(N$DCT$->N$DCT.DEVNM,0,4)=DEVNM THEN DO;
                       CALL GET_VID(I) ALTRET(READ_CMD);
                       CALL REPORT_DTT;
                       IF ONE_TIME_FLG THEN DO;
                          CALL XUR$CLOSE_DCBS;
                          CALL M$EXIT;
                          END;
                       GOTO READ_CMD;
                       END;
                    ELSE I=I+1;
                    END;
                 DDT_ERROR.CODE=%DT_E$NODEV;
                 CALL XUR$SETERRMSG(DDT_FID);
                 CALL ERRMSG(DDT_ERROR);
/*E*    ERROR: DDT-DT_E$NODEV-0
        MESSAGE: That disk is not configured.
*/
                 IF ONE_TIME_FLG THEN DO;
                    CALL XUR$CLOSE_DCBS;
                    CALL M$EXIT;
                    END;
              CASE(%DT_QUIT,%DT_NULL);
                 CALL XUR$CLOSE_DCBS;
                 CALL M$EXIT;
              CASE(%DT_HELP);
                 XUH_PARAM.HELP$=OUT$BLK.SUBLK$(0)->SYM$BLK.TEXTC$;
                 CALL XUR$HELP(XUH_PARAM);
              CASE(%DT_Q2);
                 CALL XUR$ALLMSG(XUH_PARAM) ALTRET(NO_MORE);
                 DO WHILE('0'B);
NO_MORE:         DDT_ERROR.CODE=%DT_E$NO_MORE;
                 CALL XUR$SETERRMSG(DDT_FID);
                 CALL ERRMSG(DDT_ERROR);
/*E*    ERROR: DDT-DT_E$NO_MORE
        MESSAGE: No messages available
*/
                    END;
              CASE(%DT_Q1);
                 CALL XUR$MOREMSG(XUH_PARAM) ALTRET(NO_MORE);
              END /* CASE */;
           END /* WHILE */;
/**/
PARSE_ERR:
        I=P_PCB.HI_CHAR;
        CALL XUR$SETERRMSG;
        IF PARSERR.MON THEN
           IF PARSERR.CODE~=%E$EOF THEN I=0;
        IF I>0 THEN DO;
           CALL ERRMSG(PARSERR,DCBNUM(NIL),I);
           END;
        ELSE DO;
           CALL ERRMSG(PARSERR,DCBNUM(NIL));
           END;
        GOTO READ_CMD;
BAD_PMME:
        CALL XUR$SETERRMSG;
        CALL ERRMSG;
        CALL XUR$CLOSE_DCBS;
        CALL M$EXIT;
%EJECT;
/**/
/* Subroutines */
/**/
GET_VID: PROC (DCTX) ALTRET;
/**/
DCL DCTX UBIN;
/**/
        VID='0'B;
        STATUS_BUF='0'B;
        GET_STATUS.V.DLA.DCTX#=DCTX;
        CALL M$IOQ(GET_STATUS) ALTRET(BAD_IOQ);
        IF ~STATUS.PRESENCE OR STATUS.POWEROFF OR STATUS.MAJOR~=0 THEN DO;
           DDT_ERROR.CODE=%DT_E$BADSTATUS;
           CALL XUR$SETERRMSG(DDT_FID);
           CALL ERRMSG(DDT_ERROR);
/*E*    ERROR: DDT-DT_E$BADSTATUS
        MESSAGE: Can't access that disk (not present, poweroff, etc.).
*/
           ALTRETURN;
           END;
        RD_VID.V.DLA.DCTX#=DCTX;
        CALL M$IOQ(RD_VID) ALTRET(BAD_IOQ);
        IF VID.ID~='CP6 ' THEN DO;
           DDT_ERROR.CODE=%DT_E$NOTCP6;
           CALL XUR$SETERRMSG(DDT_FID);
           CALL ERRMSG(DDT_ERROR);
/*E*    ERROR: DDT-DT_E$NOTCP6-0
        MESSAGE: This disk has not been formatted for CP-6.
*/
           ALTRETURN;
           END;
        RETURN;
BAD_IOQ:
        CALL XUR$SETERRMSG;
        CALL ERRMSG;
        ALTRETURN;
END GET_VID;
%EJECT;
REPORT_DTT: PROC;
/**/
DCL I UBIN;
DCL J UBIN;
DCL 1 TT STATIC ALIGNED,
      2 CYL UBIN,
      2 HD UBIN;
DCL HDR1 CHAR(0) CONSTANT INIT('Defective Track Table for %4A');
DCL HDR2 CHAR(0) CONSTANT INIT('   Cylinder     Head');
DCL FMT1 CHAR(0) CONSTANT INIT('%5X%4D%6X%4D');
DCL TRAILER CHAR(0) CONSTANT INIT('%D defective track(s) found');
/**/
        J=0;
        DO I=0 TO 62;
           IF VID.D#.TRACK(I)~=-1 THEN DO;
           IF J=0 THEN DO;
              CALL X$WRITE(F_FDS,VECTOR(HDR1),VECTOR(DEVNM));
              CALL X$WRITE(F_FDS,VECTOR(HDR2));
              END;
              TT.CYL=VID.DT.CYL(I);
              TT.HD=VID.DT.HD(I);
              CALL X$WRITE(F_FDS,VECTOR(FMT1),VECTOR(TT));
              J=J+1;
              VID.D#.TRACK(I)=-1;
              END;
           END;
        CALL X$WRITE(F_FDS,VECTOR(TRAILER),VECTOR(J));
        RETURN;
END REPORT_DTT;
%EJECT;
ERRMSG: PROC(C#,EDCB,CPOS,FLAGLEV);
DCL C# BIT(36);
DCL 1 CODE,
      2 FCG BIT(18),
      2 N UBIN(18) UNAL;
DCL EDCB UBIN;
DCL D# SBIN;
DCL CPOS UBIN;
DCL FLAGLEV SBIN;
DCL 1 ECODE STATIC,
      2 FCG BIT(18) INIT('040424'O),
      2 MON BIT(1) INIT('0'B),
      2 CODE UBIN(14) UNAL,
      2 SEV UBIN(3) UNAL INIT(0);
/**/
/**/
/**/
        D#=DCBNUM(NIL);
        IF ADDR(C#)=ADDR(NIL) THEN DO;
           CODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
           D#=B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
           END;
        ELSE DO;
           CODE=C#;
           END;
        IF ADDR(EDCB)~=ADDR(NIL) THEN D#=EDCB;
        IF ADDR(CPOS)~=ADDR(NIL) THEN DO;
           CALL XUR$ERRPTR(CPOS,DCBNUM(M$DO));
           END;
        IF CODE.FCG THEN DO;
           CALL XUR$ERRMSG(CODE,D#,,,,,FLAGLEV);
           END;
        ELSE DO;
           ECODE.CODE=CODE.N;
           CALL XUR$ERRMSG(ECODE,D#,,,,,FLAGLEV);
           END;
        RETURN;
END ERRMSG;
END DDT;
