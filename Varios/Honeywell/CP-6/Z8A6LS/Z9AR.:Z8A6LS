VERSION A06

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:1    
        1        1        /*M* Z9AR -- Module that performs memory management functions on CP-6. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8
        9        9        /*P*
       10       10              NAME: Z9AR
       11       11
       12       12           AUTHORS: Yawackum Schwartz
       13       13
       14       14           PURPOSE: (1) GET_DYNAMIC_SEGMENT -- Get page for IL or XUU$READ.
       15       15                    (2) FREE_DYNAMIC_SEGMENT -- Free IL table pages.
       16       16                    (3) ALLOCATE -- Get a page for XUU$READ for Fast I/O.
       17       17                    (4) RELEASE -- Free a page for XUU$READ Fast I/O.
       18       18
       19       19        */
       20       20
       21       21        /*D*   NAME: Z9AR$GET_DYNAMIC_SEGMENT
       22       22
       23       23               CALL: CALL Z9AR$GET_DYNAMIC_SEGMENT (Returned_Pointer) ;
       24       24
       25       25          INTERFACE:
       26       26          CP-6     : Calls M$GDP to get another logical page.
       27       27                     Uses M$GDS when the ISR space is exhausted.
       28       28          GCOS     : Calls ZVG$GDS to get another logical page.
       29       29
       30       30             OUTPUT: PTR$ (arg#1) -- points to page obtained.
       31       31
       32       32        DESCRIPTION:
       33       33                     Uses ISR space (via M$GDP) until this is all used up.
       34       34                     The first call to M$GDS gets a free segment of
       35       35                     the system's choosing.  Subsequent calls to this
       36       36                     routine will then simply grow that segment by
       37       37                     %BLOCK_SIZE word increments.  The variable PTR$
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:2    
       38       38                     points to the allocated page upon exit.
       39       39                     If one dynamic segment is not enough, more are allocated.
       40       40        */
       41       41
       42       42        Z9AR$GET_DYNAMIC_SEGMENT:PROC(/*->*/ PTR$) NOAUTO ALTRET;
       43       43
       44       44        %EQU PHASE = 0;
       45       45        %INCLUDE Z8A_DEFC;
       46      113        %INCLUDE Z8A_COMCOM;
       47      763        %INCLUDE Z8A_SYS_FILE;
       48     7038
       49     7039    1        DCL PTR$ PTR;
       50     7040    1        DCL FIRST_CALL BIT(1) ALIGNED STATIC INIT('1'B);
       51     7041    1        DCL OUT_OF_ISR_SPACE BIT (1) ALIGNED STATIC INIT ('0'B) ;
       52     7042    1        DCL Z9AT$TERMINATOR ENTRY;
       53     7043    1        DCL Z9AL$WRITE_TERMINAL ENTRY ;
       54     7044    1        DCL Z9HF$OBJ_DUMP ENTRY ALTRET;
       55     7045    1        DCL Z9HF$GET_OBJ_PAGE ENTRY;
       56     7046    1        DCL OBUF  CHAR (120) EXT ;
       57     7047    1        DCL VS_OFFSET SBIN WORD;
       58     7048    1        DCL VS_BLOCKS SBIN WORD STATIC INIT (0);
       59     7049    1        DCL VS_INDEX  SBIN WORD STATIC INIT (0);
       60     7050    1        DCL Z9AM$GET_VIRTUAL_SPACE2  ENTRY;
       61     7051
       62     7052
       63     7053        %FPT_GDP(RESULTS=VLR_GDS,PAGES=%PAGES_PER_BLOCK) ;
       64     7067        %FPT_GDS(RESULTS=VLR_GDS,FREE=YES,SEGSIZE=%BLOCK_SIZE);
       65     7083        %VLR_GDS(LOGSIZE=%#256K,REALSIZE=10240);
       66     7111        %VLR_GDS(FPTN=LAST_VECTOR,LOGSIZE=%#256K,REALSIZE=10240);
       67     7139
       68     7140
       69     7141    1        IF COMCOM.OB.VIRTUAL THEN
       70     7142    2          DO;
       71     7143    2            IF VS_BLOCKS > 31 THEN
       72     7144    3              DO;
       73     7145    3                VS_BLOCKS = 0;
       74     7146    3                VS_INDEX = VS_INDEX + 1;
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:3    
       75     7147
       76     7148    3                IF VS_INDEX = 8 THEN
       77     7149    3                  CALL Z9AM$GET_VIRTUAL_SPACE2;
       78     7150
       79     7151    3              END;
       80     7152
       81     7153    2            VS_OFFSET = VS_BLOCKS * %BLOCK_SIZE;
       82     7154    2            PTR$ = PINCRW (COMCOM.VS_PTR$(VS_INDEX), VS_OFFSET);
       83     7155    2            VS_BLOCKS = VS_BLOCKS + 1;
       84     7156
       85     7157    2            RETURN;
       86     7158    2          END;
       87     7159
       88     7160    2        IF OUT_OF_ISR_SPACE THEN DO ;
       89     7161    2          CALL M$GDS (FPT_GDS)
       90     7162    3          WHENALTRETURN DO ; /* No more space */
       91     7163    3            GET_SPACE:
       92     7164    3            VLR_GDS.VECT.PTR$ = ADDR(NIL) ; /* Start new segment */
       93     7165    3            CALL M$GDS (FPT_GDS)
       94     7166    4               WHENALTRETURN DO;
       95     7167    4                 CALL Z9HF$OBJ_DUMP ALTRET (OOPS);
       96     7168    4                 CALL Z9HF$GET_OBJ_PAGE;
       97     7169
       98     7170    4                 IF COMCOM.FREE$ ~= ADDR(NIL) THEN
       99     7171    5                   DO;
      100     7172    5                     PTR$ = COMCOM.FREE$;
      101     7173    5                     COMCOM.FREE$ = COMCOM.FREE$ -> PAGE.NEXT;
      102     7174    5                     ALTRETURN;
      103     7175    5                   END;
      104     7176    4                 ELSE
      105     7177    4                   GOTO GET_SPACE;
      106     7178    4               END;
      107     7179    3            FIRST_CALL = '1'B ;
      108     7180    3          END ;
      109     7181    2        END ;
      110     7182    2        ELSE DO ; /* Continue using ISR space until exhausted */
      111     7183
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:4    
      112     7184    2          CALL M$GDP (FPT_GDP)
      113     7185    3          WHENALTRETURN DO ; /* M$GDP ALTRET */
      114     7186    3            OUT_OF_ISR_SPACE = '1'B ;
      115     7187    3            VLR_GDS.VECT.PTR$ = ADDR(NIL) ; /* Start new segment */
      116     7188    3            CALL M$GDS (FPT_GDS) ALTRET (OOPS) ;
      117     7189    3            FIRST_CALL = '1'B ;
      118     7190    3          END ;
      119     7191    2        END ;
      120     7192
      121     7193    2        IF FIRST_CALL THEN DO ;
      122     7194    2          FIRST_CALL = '0'B;
      123     7195    2          PTR$ = VLR_GDS.VECT.PTR$;
      124     7196    2        END;
      125     7197    2        ELSE DO ;
      126     7198    2          PTR$ = PINCRC (LAST_VECTOR.VECT.PTR$, LAST_VECTOR.VECT.W1.VSIZE# + 1);
      127     7199    2        END ;
      128     7200
      129     7201    1        LAST_VECTOR = VLR_GDS;
      130     7202
      131     7203    1        RETURN ;
      132     7204
      133     7205    1   OOPS: ;
      134     7206    1        OBUF = 'Not enough memory to compile; up MEM or use VIRTUAL opt.';
      135     7207    1        CALL Z9AL$WRITE_TERMINAL ;
      136     7208    1        CALL M$ERR ;
      137     7209    1        RETURN ;
      138     7210
      139     7211        %EJECT;
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:5    
      140     7212        /*D*   NAME: Z9AR$FREE_DYNAMIC_SEGMENT
      141     7213
      142     7214               CALL: CALL Z9AR$FREE_DYNAMIC_SEGMENT ;
      143     7215
      144     7216          INTERFACE: Calls M$FDS
      145     7217
      146     7218        DESCRIPTION: This entry point is called at compiler wrapup
      147     7219                     to free the I.L. table space that was obtained
      148     7220                     thru Z9AR$GET_DYNAMIC_SEGMENT.
      149     7221                     In CP-6 and GCOS no action is needed because it will be done
      150     7222                     automatically by the system. On Multics that may not hold true.
      151     7223        */
      152     7224
      153     7225    1   Z9AR$FREE_DYNAMIC_SEGMENT:ENTRY ALTRET;
      154     7226
      155     7227        /*N*
      156     7228              For Multics,if necessary,add code here to free all dynamically
      157     7229              acquired space.
      158     7230        */
      159     7231    1        RETURN;
      160     7232
      161     7233    1   END Z9AR$GET_DYNAMIC_SEGMENT;
      162     7234        %EOD;

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:6    
--  Include file information  --

   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9AR$GET_DYNAMIC_SEGMENT.

   Procedure Z9AR$GET_DYNAMIC_SEGMENT requires 107 words for executable code.
   Procedure Z9AR$GET_DYNAMIC_SEGMENT is declared NOAUTO and requires 28 words of local(STATIC) storage.

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:7    

 Object Unit name= Z9AR$GET_DYNAMIC_SEGMENT                   File name= Z9AR.:Z8A6TOU
 UTS= AUG 09 '97 09:44:42.16 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    28     34  Z9AR$GET_DYNAMIC_SEGMENT
    1  LblCom even  none     1      1  ITERATION
    2   DCB   even  none     0      0  M$UC
    3  LblCom even  none    30     36  OBUF
    4  RoData even  UTS     14     16  Z9AR$GET_DYNAMIC_SEGMENT
    5   Proc  even  none   107    153  Z9AR$GET_DYNAMIC_SEGMENT
    6  RoData even  none     2      2  Z9AR$GET_DYNAMIC_SEGMENT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     5      0   yes    yes     yes      Std        1  Z9AR$GET_DYNAMIC_SEGMENT
     5    147          yes     yes      Std        0  Z9AR$FREE_DYNAMIC_SEGMENT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 Z9AM$GET_VIRTUAL_SPACE2
 yes     yes           Std       0 Z9HF$OBJ_DUMP
         yes           Std       0 Z9HF$GET_OBJ_PAGE
         yes           Std       0 Z9AL$WRITE_TERMINAL
                       nStd      0 X66_STATIC_1
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:8    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     COMCOM                                M$UC

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:9    


        1        1        /*M* Z9AR -- Module that performs memory management functions on CP-6. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8
        9        9        /*P*
       10       10              NAME: Z9AR
       11       11
       12       12           AUTHORS: Yawackum Schwartz
       13       13
       14       14           PURPOSE: (1) GET_DYNAMIC_SEGMENT -- Get page for IL or XUU$READ.
       15       15                    (2) FREE_DYNAMIC_SEGMENT -- Free IL table pages.
       16       16                    (3) ALLOCATE -- Get a page for XUU$READ for Fast I/O.
       17       17                    (4) RELEASE -- Free a page for XUU$READ Fast I/O.
       18       18
       19       19        */
       20       20
       21       21        /*D*   NAME: Z9AR$GET_DYNAMIC_SEGMENT
       22       22
       23       23               CALL: CALL Z9AR$GET_DYNAMIC_SEGMENT (Returned_Pointer) ;
       24       24
       25       25          INTERFACE:
       26       26          CP-6     : Calls M$GDP to get another logical page.
       27       27                     Uses M$GDS when the ISR space is exhausted.
       28       28          GCOS     : Calls ZVG$GDS to get another logical page.
       29       29
       30       30             OUTPUT: PTR$ (arg#1) -- points to page obtained.
       31       31
       32       32        DESCRIPTION:
       33       33                     Uses ISR space (via M$GDP) until this is all used up.
       34       34                     The first call to M$GDS gets a free segment of
       35       35                     the system's choosing.  Subsequent calls to this
       36       36                     routine will then simply grow that segment by
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:10   
       37       37                     %BLOCK_SIZE word increments.  The variable PTR$
       38       38                     points to the allocated page upon exit.
       39       39                     If one dynamic segment is not enough, more are allocated.
       40       40        */
       41       41
       42       42        Z9AR$GET_DYNAMIC_SEGMENT:PROC(/*->*/ PTR$) NOAUTO ALTRET;

     42  5 000000   000000 700200 xent  Z9AR$GET_DY* TSX0  ! X66_STATIC_1
         5 000001   000000 000001 0                  ZERO    0,1

       43       43
       44       44        %EQU PHASE = 0;
       45       45        %INCLUDE Z8A_DEFC;
       46      113        %INCLUDE Z8A_COMCOM;
       47      763        %INCLUDE Z8A_SYS_FILE;
       48     7038
       49     7039    1        DCL PTR$ PTR;
       50     7040    1        DCL FIRST_CALL BIT(1) ALIGNED STATIC INIT('1'B);
       51     7041    1        DCL OUT_OF_ISR_SPACE BIT (1) ALIGNED STATIC INIT ('0'B) ;
       52     7042    1        DCL Z9AT$TERMINATOR ENTRY;
       53     7043    1        DCL Z9AL$WRITE_TERMINAL ENTRY ;
       54     7044    1        DCL Z9HF$OBJ_DUMP ENTRY ALTRET;
       55     7045    1        DCL Z9HF$GET_OBJ_PAGE ENTRY;
       56     7046    1        DCL OBUF  CHAR (120) EXT ;
       57     7047    1        DCL VS_OFFSET SBIN WORD;
       58     7048    1        DCL VS_BLOCKS SBIN WORD STATIC INIT (0);
       59     7049    1        DCL VS_INDEX  SBIN WORD STATIC INIT (0);
       60     7050    1        DCL Z9AM$GET_VIRTUAL_SPACE2  ENTRY;
       61     7051
       62     7052
       63     7053        %FPT_GDP(RESULTS=VLR_GDS,PAGES=%PAGES_PER_BLOCK) ;
       64     7067        %FPT_GDS(RESULTS=VLR_GDS,FREE=YES,SEGSIZE=%BLOCK_SIZE);
       65     7083        %VLR_GDS(LOGSIZE=%#256K,REALSIZE=10240);
       66     7111        %VLR_GDS(FPTN=LAST_VECTOR,LOGSIZE=%#256K,REALSIZE=10240);
       67     7139
       68     7140
       69     7141    1        IF COMCOM.OB.VIRTUAL THEN
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:11   

   7141  5 000002   000110 234000 xsym               SZN     COMCOM+72
         5 000003   000032 605000 5                  TPL     s:7160

       70     7142    2          DO;

       71     7143    2            IF VS_BLOCKS > 31 THEN

   7143  5 000004   000005 235000 0                  LDA     VS_BLOCKS
         5 000005   000037 115007                    CMPA    31,DL
         5 000006   000017 604400 5                  TMOZ    s:7153

       72     7144    3              DO;

       73     7145    3                VS_BLOCKS = 0;

   7145  5 000007   000005 450000 0                  STZ     VS_BLOCKS

       74     7146    3                VS_INDEX = VS_INDEX + 1;

   7146  5 000010   000006 054000 0                  AOS     VS_INDEX

       75     7147
       76     7148    3                IF VS_INDEX = 8 THEN

   7148  5 000011   000006 235000 0                  LDA     VS_INDEX
         5 000012   000010 115007                    CMPA    8,DL
         5 000013   000017 601000 5                  TNZ     s:7153

       77     7149    3                  CALL Z9AM$GET_VIRTUAL_SPACE2;

   7149  5 000014   000000 631400 6                  EPPR1   0
         5 000015   000000 701000 xent               TSX1    Z9AM$GET_VIRTUAL_SPACE2
         5 000016   000000 011000                    NOP     0

       78     7150
       79     7151    3              END;
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:12   

       80     7152
       81     7153    2            VS_OFFSET = VS_BLOCKS * %BLOCK_SIZE;

   7153  5 000017   000005 235000 0                  LDA     VS_BLOCKS
         5 000020   000015 735000                    ALS     13
         5 000021   000004 755000 0                  STA     VS_OFFSET

       82     7154    2            PTR$ = PINCRW (COMCOM.VS_PTR$(VS_INDEX), VS_OFFSET);

   7154  5 000022   000006 720000 0                  LXL0    VS_INDEX
         5 000023   000513 470410 xsym               LDP0    COMCOM+331,X0
         5 000024   000000 631505                    EPPR1   0,AL,PR0
         5 000025   000001 473400 0                  LDP3    @PTR$
         5 000026   300000 451500                    STP1    0,,PR3

       83     7155    2            VS_BLOCKS = VS_BLOCKS + 1;

   7155  5 000027   000005 054000 0                  AOS     VS_BLOCKS

       84     7156
       85     7157    2            RETURN;

   7157  5 000030   000000 221200 0                  LDX1  ! 0
         5 000031   000001 702211                    TSX2  ! 1,X1

       86     7158    2          END;
       87     7159
       88     7160    2        IF OUT_OF_ISR_SPACE THEN DO ;

   7160  5 000032   000003 234000 0                  SZN     OUT_OF_ISR_SPACE
         5 000033   000073 605000 5                  TPL     s:7184

       89     7161    2          CALL M$GDS (FPT_GDS)

   7161  5 000034   000016 630400 0                  EPPR0   FPT_GDS
         5 000035   430001 713400                    CLIMB   alt,gds
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:13   
         5 000036   400400 401760                    pmme    nvectors=2
         5 000037   000041 702000 5                  TSX2    GET_SPACE
         5 000040   000072 710000 5                  TRA     s:7181

       90     7162    3          WHENALTRETURN DO ; /* No more space */

       91     7163    3            GET_SPACE:
       92     7164    3            VLR_GDS.VECT.PTR$ = ADDR(NIL) ; /* Start new segment */

   7164  5 000041   000001 236000 6     GET_SPACE    LDQ     1
         5 000042   000025 756000 0                  STQ     VLR_GDS+1

       93     7165    3            CALL M$GDS (FPT_GDS)

   7165  5 000043   000016 630400 0                  EPPR0   FPT_GDS
         5 000044   430001 713400                    CLIMB   alt,gds
         5 000045   400400 401760                    pmme    nvectors=2
         5 000046   000050 702000 5                  TSX2    s:7167
         5 000047   000070 710000 5                  TRA     s:7179

       94     7166    4               WHENALTRETURN DO;

       95     7167    4                 CALL Z9HF$OBJ_DUMP ALTRET (OOPS);

   7167  5 000050   000000 631400 6                  EPPR1   0
         5 000051   000000 701000 xent               TSX1    Z9HF$OBJ_DUMP
         5 000052   000135 702000 5                  TSX2    OOPS

       96     7168    4                 CALL Z9HF$GET_OBJ_PAGE;

   7168  5 000053   000000 631400 6                  EPPR1   0
         5 000054   000000 701000 xent               TSX1    Z9HF$GET_OBJ_PAGE
         5 000055   000000 011000                    NOP     0

       97     7169
       98     7170    4                 IF COMCOM.FREE$ ~= ADDR(NIL) THEN

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:14   
   7170  5 000056   000425 236000 xsym               LDQ     COMCOM+277
         5 000057   000001 116000 6                  CMPQ    1
         5 000060   000041 600000 5                  TZE     GET_SPACE

       99     7171    5                   DO;

      100     7172    5                     PTR$ = COMCOM.FREE$;

   7172  5 000061   000001 470400 0                  LDP0    @PTR$
         5 000062   000000 756100                    STQ     0,,PR0

      101     7173    5                     COMCOM.FREE$ = COMCOM.FREE$ -> PAGE.NEXT;

   7173  5 000063   000425 471400 xsym               LDP1    COMCOM+277
         5 000064   101777 236100                    LDQ     1023,,PR1
         5 000065   000425 756000 xsym               STQ     COMCOM+277

      102     7174    5                     ALTRETURN;

   7174  5 000066   000000 221200 0                  LDX1  ! 0
         5 000067   000000 702211                    TSX2  ! 0,X1

      103     7175    5                   END;
      104     7176    4                 ELSE
      105     7177    4                   GOTO GET_SPACE;
      106     7178    4               END;
      107     7179    3            FIRST_CALL = '1'B ;

   7179  5 000070   400000 236003                    LDQ     -131072,DU
         5 000071   000002 756000 0                  STQ     FIRST_CALL

      108     7180    3          END ;

      109     7181    2        END ;

   7181  5 000072   000112 710000 5                  TRA     s:7193

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:15   
      110     7182    2        ELSE DO ; /* Continue using ISR space until exhausted */

      111     7183
      112     7184    2          CALL M$GDP (FPT_GDP)

   7184  5 000073   000010 630400 0                  EPPR0   FPT_GDP
         5 000074   430003 713400                    CLIMB   alt,+12291
         5 000075   400400 401760                    pmme    nvectors=2
         5 000076   000100 702000 5                  TSX2    s:7186
         5 000077   000112 710000 5                  TRA     s:7193

      113     7185    3          WHENALTRETURN DO ; /* M$GDP ALTRET */

      114     7186    3            OUT_OF_ISR_SPACE = '1'B ;

   7186  5 000100   400000 236003                    LDQ     -131072,DU
         5 000101   000003 756000 0                  STQ     OUT_OF_ISR_SPACE

      115     7187    3            VLR_GDS.VECT.PTR$ = ADDR(NIL) ; /* Start new segment */

   7187  5 000102   000001 236000 6                  LDQ     1
         5 000103   000025 756000 0                  STQ     VLR_GDS+1

      116     7188    3            CALL M$GDS (FPT_GDS) ALTRET (OOPS) ;

   7188  5 000104   000016 630400 0                  EPPR0   FPT_GDS
         5 000105   430001 713400                    CLIMB   alt,gds
         5 000106   400400 401760                    pmme    nvectors=2
         5 000107   000135 702000 5                  TSX2    OOPS

      117     7189    3            FIRST_CALL = '1'B ;

   7189  5 000110   400000 236003                    LDQ     -131072,DU
         5 000111   000002 756000 0                  STQ     FIRST_CALL

      118     7190    3          END ;

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:16   
      119     7191    2        END ;

      120     7192
      121     7193    2        IF FIRST_CALL THEN DO ;

   7193  5 000112   000002 234000 0                  SZN     FIRST_CALL
         5 000113   000121 605000 5                  TPL     s:7198

      122     7194    2          FIRST_CALL = '0'B;

   7194  5 000114   000002 450000 0                  STZ     FIRST_CALL

      123     7195    2          PTR$ = VLR_GDS.VECT.PTR$;

   7195  5 000115   000025 236000 0                  LDQ     VLR_GDS+1
         5 000116   000001 470400 0                  LDP0    @PTR$
         5 000117   000000 756100                    STQ     0,,PR0

      124     7196    2        END;

   7196  5 000120   000130 710000 5                  TRA     s:7201

      125     7197    2        ELSE DO ;

      126     7198    2          PTR$ = PINCRC (LAST_VECTOR.VECT.PTR$, LAST_VECTOR.VECT.W1.VSIZE# + 1);

   7198  5 000121   000030 236000 0                  LDQ     LAST_VECTOR
         5 000122   000020 772000                    QRL     16
         5 000123   000020 736000                    QLS     16
         5 000124   200000 036007                    ADLQ    65536,DL
         5 000125   000031 036000 0                  ADLQ    LAST_VECTOR+1
         5 000126   000001 470400 0                  LDP0    @PTR$
         5 000127   000000 756100                    STQ     0,,PR0

      127     7199    2        END ;

      128     7200
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:17   
      129     7201    1        LAST_VECTOR = VLR_GDS;

   7201  5 000130   000000 100400                    MLR     fill='000'O
         5 000131   000024 000020 0                  ADSC9   VLR_GDS                  cn=0,n=16
         5 000132   000030 000020 0                  ADSC9   LAST_VECTOR              cn=0,n=16

      130     7202
      131     7203    1        RETURN ;

   7203  5 000133   000000 221200 0                  LDX1  ! 0
         5 000134   000001 702211                    TSX2  ! 1,X1

   7201  5 000135                       OOPS         null
      132     7204
      133     7205    1   OOPS: ;
      134     7206    1        OBUF = 'Not enough memory to compile; up MEM or use VIRTUAL opt.';

   7206  5 000135   040000 100400                    MLR     fill='040'O
         5 000136   000000 000070 4                  ADSC9   0                        cn=0,n=56
         5 000137   000000 000170 3                  ADSC9   OBUF                     cn=0,n=120

      135     7207    1        CALL Z9AL$WRITE_TERMINAL ;

   7207  5 000140   000000 631400 6                  EPPR1   0
         5 000141   000000 701000 xent               TSX1    Z9AL$WRITE_TERMINAL
         5 000142   000000 011000                    NOP     0

      136     7208    1        CALL M$ERR ;

   7208  5 000143   000002 713400                    CLIMB   err
         5 000144   000000 401760                    pmme    nvectors=0

      137     7209    1        RETURN ;

   7209  5 000145   000000 221200 0                  LDX1  ! 0
         5 000146   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:18   
      138     7210
      139     7211        %EJECT;
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:19   
      140     7212        /*D*   NAME: Z9AR$FREE_DYNAMIC_SEGMENT
      141     7213
      142     7214               CALL: CALL Z9AR$FREE_DYNAMIC_SEGMENT ;
      143     7215
      144     7216          INTERFACE: Calls M$FDS
      145     7217
      146     7218        DESCRIPTION: This entry point is called at compiler wrapup
      147     7219                     to free the I.L. table space that was obtained
      148     7220                     thru Z9AR$GET_DYNAMIC_SEGMENT.
      149     7221                     In CP-6 and GCOS no action is needed because it will be done
      150     7222                     automatically by the system. On Multics that may not hold true.
      151     7223        */
      152     7224
      153     7225    1   Z9AR$FREE_DYNAMIC_SEGMENT:ENTRY ALTRET;

   7225  5 000147   000000 700200 xent  Z9AR$FREE_D* TSX0  ! X66_STATIC_1
         5 000150   000000 000001 0                  ZERO    0,1

      154     7226
      155     7227        /*N*
      156     7228              For Multics,if necessary,add code here to free all dynamically
      157     7229              acquired space.
      158     7230        */
      159     7231    1        RETURN;

   7231  5 000151   000000 221200 0                  LDX1  ! 0
         5 000152   000001 702211                    TSX2  ! 1,X1
      160     7232
      161     7233    1   END Z9AR$GET_DYNAMIC_SEGMENT;
      162     7234        %EOD;

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:20   
--  Include file information  --

   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9AR$GET_DYNAMIC_SEGMENT.
PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:21   

 **** Variables and constants ****

  ****  Section 000  Data  Z9AR$GET_DYNAMIC_SEGMENT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w PTR         r     1 @PTR$                      2-0-0/w BIT         r     1 FIRST_CALL
    10-0-0/d STRC(216)   r     1 FPT_GDP                   16-0-0/d STRC(216)   r     1 FPT_GDS
    30-0-0/d STRC(144)   r     1 LAST_VECTOR                3-0-0/w BIT         r     1 OUT_OF_ISR_SPACE
    *0-0-0/w PTR         r     1 PTR$                      24-0-0/d STRC(144)   r     1 VLR_GDS
     5-0-0/w SBIN        r     1 VS_BLOCKS                  6-0-0/w SBIN        r     1 VS_INDEX
     4-0-0/w SBIN        r     1 VS_OFFSET

  ****  Section 001 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 003 LblCom OBUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(120)   r     1 OBUF

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248) r     1 COMCOM

  ****  BASED and DCB variables  ****

PL6.E3A0      #001=Z9AR$GET_DYNAMIC_SEGMENT File=Z9AR.:Z8A6TSI                   SAT 08/09/97 09:44 Page:22   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0N  NULL        r     1 M$UC                       0-0-0/w STRC(36864) r     1 PAGE


   Procedure Z9AR$GET_DYNAMIC_SEGMENT requires 107 words for executable code.
   Procedure Z9AR$GET_DYNAMIC_SEGMENT is declared NOAUTO and requires 28 words of local(STATIC) storage.

PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:23   
      163        1        /*T***********************************************************/
      164        2        /*T*                                                         */
      165        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      166        4        /*T*                                                         */
      167        5        /*T***********************************************************/
      168        6        /*D*       NAME: Z9AR$ALLOCATE
      169        7
      170        8                   CALL: %XUU_PARAM (ALLOCATE = "Z9AR$ALLOCATE") ;
      171        9
      172       10              INTERFACE: Calls Z8AR$GET_SPACE.
      173       11
      174       12                  INPUT: None.
      175       13
      176       14                 OUTPUT: A Vector (XUU_VECTOR).
      177       15
      178       16            DESCRIPTION: This routine is called by XUU$READ to allocate
      179       17                         space for doing "Fast I/O".  It will be called
      180       18                         three times for each file required to be fast.
      181       19                         Thus, this routine will be called a maximum of
      182       20                         nine (9) times (Source, Updates, Includes).
      183       21                         To get its space, this routine calls Z8AR$GET_
      184       22                         SPACE, which is an entry into the same routine that
      185       23                         Z8AR$RESERVER uses to get Compiler IL space.
      186       24                         (Module is used only in CP-6 at this time.)
      187       25
      188       26        */
      189       27
      190       28        Z9AR$ALLOCATE: PROC (XUU_VECTOR) ; /* Called by XUU$READ */
      191       29
      192       30        %EQU PHASE = 0 ;
      193       31        %INCLUDE Z8A_DEFC ;
      194       99        %INCLUDE Z9A_FLAGS;
      195      113        %INCLUDE Z8A_COMCOM;
      196      763
      197      764    1   DCL 1 XUU_VECTOR DALIGNED,
      198      765    1       2 *          BIT (36),
      199      766    1       2 PTR$       PTR ;
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:24   
      200      767
      201      768    1   DCL  SPACE (0:%(PAGE_SIZE-1)) BIT(36) ALIGNED BASED (XUU_VECTOR.PTR$);
      202      769
      203      770    1   DCL   Z8AR$GET_SPACE           ENTRY (1) ;
      204      771    1   DCL   Z8AR$FREE_SPACE          ENTRY (1) ;
      205      772
      206      773
      207      774    1      IF COMCOM.OB.VIRTUAL THEN
      208      775    2        DO;
      209      776    2          XUU_VECTOR.PTR$ = COMCOM.VS_FREE$;
      210      777    2          COMCOM.VS_FREE$ = COMCOM.VS_FREE$ -> PAGE.NEXT;
      211      778    2          SPACE = '0'B;
      212      779    2        END;
      213      780    1      ELSE
      214      781    1        CALL Z8AR$GET_SPACE (XUU_VECTOR.PTR$) ;
      215      782
      216      783    1      XUU_VECTOR = VECTOR (SPACE) ;
      217      784
      218      785    1   RETURN ;
      219      786
      220      787        %EJECT;
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:25   
      221      788        /*D*       NAME: Z9AR$RELEASE
      222      789
      223      790                   CALL: %XUU_PARAM (RELEASE = "Z9AR$RELEASE", ...) ;
      224      791
      225      792              INTERFACE: Calls Z8AR$FREE_SPACE.
      226      793
      227      794                  INPUT: XUU_VECTOR -- A Vector of the space to release.
      228      795
      229      796                 OUTPUT: See Z8AR$FREE_SPACE.
      230      797
      231      798            DESCRIPTION: This routine is called by XUU$READ when it is
      232      799                         finished with the space that it allocated via
      233      800                         Z9AR$ALLOCATE.  This routine calls Z8AR$FREE_
      234      801                         SPACE to do the actual releasing.
      235      802                         (Module is used only in CP-6 at this time.)
      236      803
      237      804        */
      238      805
      239      806    1   Z9AR$RELEASE: ENTRY (XUU_VECTOR) ;
      240      807
      241      808    1        IF COMCOM.OB.VIRTUAL THEN
      242      809    2          DO;
      243      810    2            XUU_VECTOR.PTR$ -> PAGE.NEXT = COMCOM.VS_FREE$;
      244      811    2            COMCOM.VS_FREE$ = XUU_VECTOR.PTR$;
      245      812    2          END;
      246      813    1        ELSE
      247      814    1          CALL Z8AR$FREE_SPACE (XUU_VECTOR.PTR$) ;
      248      815
      249      816    1   END Z9AR$ALLOCATE ;

PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:26   
--  Include file information  --

   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9AR$ALLOCATE.

   Procedure Z9AR$ALLOCATE requires 49 words for executable code.
   Procedure Z9AR$ALLOCATE requires 6 words of local(AUTO) storage.

    No errors detected in file Z9AR.:Z8A6TSI    .

PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:27   

 Object Unit name= Z9AR$ALLOCATE                              File name= Z9AR.:Z8A6TOU
 UTS= AUG 09 '97 09:45:40.24 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1   Proc  even  none    49     61  Z9AR$ALLOCATE
    2  RoData even  none     3      3  Z9AR$ALLOCATE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        1  Z9AR$ALLOCATE
     1     36                  yes      Std        1  Z9AR$RELEASE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 Z8AR$GET_SPACE
         yes           Std       1 Z8AR$FREE_SPACE
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     COMCOM
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:28   


      163        1        /*T***********************************************************/
      164        2        /*T*                                                         */
      165        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      166        4        /*T*                                                         */
      167        5        /*T***********************************************************/
      168        6        /*D*       NAME: Z9AR$ALLOCATE
      169        7
      170        8                   CALL: %XUU_PARAM (ALLOCATE = "Z9AR$ALLOCATE") ;
      171        9
      172       10              INTERFACE: Calls Z8AR$GET_SPACE.
      173       11
      174       12                  INPUT: None.
      175       13
      176       14                 OUTPUT: A Vector (XUU_VECTOR).
      177       15
      178       16            DESCRIPTION: This routine is called by XUU$READ to allocate
      179       17                         space for doing "Fast I/O".  It will be called
      180       18                         three times for each file required to be fast.
      181       19                         Thus, this routine will be called a maximum of
      182       20                         nine (9) times (Source, Updates, Includes).
      183       21                         To get its space, this routine calls Z8AR$GET_
      184       22                         SPACE, which is an entry into the same routine that
      185       23                         Z8AR$RESERVER uses to get Compiler IL space.
      186       24                         (Module is used only in CP-6 at this time.)
      187       25
      188       26        */
      189       27
      190       28        Z9AR$ALLOCATE: PROC (XUU_VECTOR) ; /* Called by XUU$READ */

     28  1 000000   000000 700200 xent  Z9AR$ALLOCA* TSX0  ! X66_AUTO_1
         1 000001   000006 000001                    ZERO    6,1

      191       29
      192       30        %EQU PHASE = 0 ;
      193       31        %INCLUDE Z8A_DEFC ;
      194       99        %INCLUDE Z9A_FLAGS;
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:29   
      195      113        %INCLUDE Z8A_COMCOM;
      196      763
      197      764    1   DCL 1 XUU_VECTOR DALIGNED,
      198      765    1       2 *          BIT (36),
      199      766    1       2 PTR$       PTR ;
      200      767
      201      768    1   DCL  SPACE (0:%(PAGE_SIZE-1)) BIT(36) ALIGNED BASED (XUU_VECTOR.PTR$);
      202      769
      203      770    1   DCL   Z8AR$GET_SPACE           ENTRY (1) ;
      204      771    1   DCL   Z8AR$FREE_SPACE          ENTRY (1) ;
      205      772
      206      773
      207      774    1      IF COMCOM.OB.VIRTUAL THEN

    774  1 000002   000110 234000 xsym               SZN     COMCOM+72
         1 000003   000020 605000 1                  TPL     s:781

      208      775    2        DO;

      209      776    2          XUU_VECTOR.PTR$ = COMCOM.VS_FREE$;

    776  1 000004   000543 236000 xsym               LDQ     COMCOM+355
         1 000005   200003 470500                    LDP0    @XUU_VECTOR,,AUTO
         1 000006   000001 756100                    STQ     1,,PR0

      210      777    2          COMCOM.VS_FREE$ = COMCOM.VS_FREE$ -> PAGE.NEXT;

    777  1 000007   000543 471400 xsym               LDP1    COMCOM+355
         1 000010   101777 236100                    LDQ     1023,,PR1
         1 000011   000543 756000 xsym               STQ     COMCOM+355

      211      778    2          SPACE = '0'B;

    778  1 000012   000001 471500                    LDP1    1,,PR0
         1 000013   010000 220003                    LDX0    4096,DU
         1 000014   000140 100400                    MLR     fill='000'O
         1 000015   000000 000001 2                  ADSC9   0                        cn=0,n=1
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:30   
         1 000016   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0

      212      779    2        END;

    779  1 000017   000027 710000 1                  TRA     s:783

      213      780    1      ELSE
      214      781    1        CALL Z8AR$GET_SPACE (XUU_VECTOR.PTR$) ;

    781  1 000020   200003 236100                    LDQ     @XUU_VECTOR,,AUTO
         1 000021   000001 036003                    ADLQ    1,DU
         1 000022   200004 756100                    STQ     @XUU_VECTOR+1,,AUTO
         1 000023   200004 630500                    EPPR0   @XUU_VECTOR+1,,AUTO
         1 000024   000001 631400 2                  EPPR1   1
         1 000025   000000 701000 xent               TSX1    Z8AR$GET_SPACE
         1 000026   000000 011000                    NOP     0

      215      782
      216      783    1      XUU_VECTOR = VECTOR (SPACE) ;

    783  1 000027   200003 470500                    LDP0    @XUU_VECTOR,,AUTO
         1 000030   000001 471500                    LDP1    1,,PR0
         1 000031   000002 235000 2                  LDA     2
         1 000032   200004 451500                    STP1    @XUU_VECTOR+1,,AUTO
         1 000033   200004 236100                    LDQ     @XUU_VECTOR+1,,AUTO
         1 000034   000000 757100                    STAQ    0,,PR0

      217      784
      218      785    1   RETURN ;

    785  1 000035   000000 702200 xent               TSX2  ! X66_ARET

      219      786
      220      787        %EJECT;
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:31   
      221      788        /*D*       NAME: Z9AR$RELEASE
      222      789
      223      790                   CALL: %XUU_PARAM (RELEASE = "Z9AR$RELEASE", ...) ;
      224      791
      225      792              INTERFACE: Calls Z8AR$FREE_SPACE.
      226      793
      227      794                  INPUT: XUU_VECTOR -- A Vector of the space to release.
      228      795
      229      796                 OUTPUT: See Z8AR$FREE_SPACE.
      230      797
      231      798            DESCRIPTION: This routine is called by XUU$READ when it is
      232      799                         finished with the space that it allocated via
      233      800                         Z9AR$ALLOCATE.  This routine calls Z8AR$FREE_
      234      801                         SPACE to do the actual releasing.
      235      802                         (Module is used only in CP-6 at this time.)
      236      803
      237      804        */
      238      805
      239      806    1   Z9AR$RELEASE: ENTRY (XUU_VECTOR) ;

    806  1 000036   000000 700200 xent  Z9AR$RELEASE TSX0  ! X66_AUTO_1
         1 000037   000006 000001                    ZERO    6,1

      240      807
      241      808    1        IF COMCOM.OB.VIRTUAL THEN

    808  1 000040   000110 234000 xsym               SZN     COMCOM+72
         1 000041   000051 605000 1                  TPL     s:814

      242      809    2          DO;

      243      810    2            XUU_VECTOR.PTR$ -> PAGE.NEXT = COMCOM.VS_FREE$;

    810  1 000042   200003 470500                    LDP0    @XUU_VECTOR,,AUTO
         1 000043   000001 471500                    LDP1    1,,PR0
         1 000044   000543 236000 xsym               LDQ     COMCOM+355
         1 000045   101777 756100                    STQ     1023,,PR1
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:32   

      244      811    2            COMCOM.VS_FREE$ = XUU_VECTOR.PTR$;

    811  1 000046   000001 236100                    LDQ     1,,PR0
         1 000047   000543 756000 xsym               STQ     COMCOM+355

      245      812    2          END;

    812  1 000050   000060 710000 1                  TRA     s:816

      246      813    1        ELSE
      247      814    1          CALL Z8AR$FREE_SPACE (XUU_VECTOR.PTR$) ;

    814  1 000051   200003 236100                    LDQ     @XUU_VECTOR,,AUTO
         1 000052   000001 036003                    ADLQ    1,DU
         1 000053   200004 756100                    STQ     @XUU_VECTOR+1,,AUTO
         1 000054   200004 630500                    EPPR0   @XUU_VECTOR+1,,AUTO
         1 000055   000001 631400 2                  EPPR1   1
         1 000056   000000 701000 xent               TSX1    Z8AR$FREE_SPACE
         1 000057   000000 011000                    NOP     0

      248      815
      249      816    1   END Z9AR$ALLOCATE ;

    816  1 000060   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:33   
--  Include file information  --

   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z9AR$ALLOCATE.
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:34   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @XUU_VECTOR               *0-0-0/d STRC(72)    r     1 XUU_VECTOR

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248) r     1 COMCOM

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(36864) r     1 PAGE                       0-0-0/w BIT         r     1 SPACE(0:1023)


   Procedure Z9AR$ALLOCATE requires 49 words for executable code.
   Procedure Z9AR$ALLOCATE requires 6 words of local(AUTO) storage.
PL6.E3A0      #002=Z9AR$ALLOCATE File=Z9AR.:Z8A6TSI                              SAT 08/09/97 09:45 Page:35   

    No errors detected in file Z9AR.:Z8A6TSI    .
