VERSION A06

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:1    
        1        1        /*M*  Z8FA$STORAGE_ALLOCATOR  Allocates storage for 01's and 77's.   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8               NAME:  Z8FA$STORAGE_ALLOCATOR
        9        9             AUTHOR:  Greg Myers
       10       10            PURPOSE:  Allocate storage for 01's and 77's if they are referenced
       11       11                      or defined and create escape triads.
       12       12        */
       13       13
       14       14        /*D*
       15       15               NAME:  Z8FA$STORAGE_ALLOCATOR
       16       16               CALL:  CALL Z8FA$STORAGE_ALLOCATOR;
       17       17          INTERFACE:  This procedure calls Z8FC$S_A_UPDATE(QUAL$) and
       18       18                      calls Z8AS$SR_ETT to create escape triads.
       19       19                      It calls Z8AE$ERROR to report errors.
       20       20
       21       21              INPUT:  The QLT, ETT$, ST, COMCOM.BLOCK$, and LTS are accessed.
       22       22             OUTPUT:  ST.SA       Storage address
       23       23                      ST.SIZE     Block size
       24       24            SCRATCH:  LTS$                   LTS pointer
       25       25                      COMCOM.CURRENT.LINE    For error messages
       26       26                      COMCOM.CURRENT.COLUMN  For error messages
       27       27
       28       28        DESCRIPTION:  This procedure uses a loop to step thru the 01's and 77's by
       29       29                      using the QLT.BROTHER pointer.  The item is set to a double word
       30       30                      boundary or word boundary depending on its type (all GDI's are
       31       31                      set to double word). If the item is a group item, Z8FC$S_A_UPDATE
       32       32                      is called to set the SA fields of the interior members of the
       33       33                      structure.  The storage counter is incremented by the size of the
       34       34                      variable and the next item is then processed.  If the storage
       35       35                      counter goes beyond the data limit, an error message is produced
       36       36                      and the counter is reset.  When an external item is encountered,
       37       37                      the items are stored in the next available block and the block
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:2    
       38       38                      size is stored. These blocks are also checked to make sure they
       39       39                      do not go over the data limit.
       40       40        */
       41       41        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:3    
       42       42        Z8FA$STORAGE_ALLOCATOR: PROC  NOAUTO ;
       43       43        %EQU PHASE = 2 ;
       44       44        %INCLUDE Z8A_DEFC ;
       45      112        %INCLUDE Z9A_FLAGS;
       46      126        %INCLUDE Z8A_SUPP_MAC ;
       47     2526        %INCLUDE Z8A_DNT;
       48     2747        %INCLUDE Z8A_QLT ;
       49     2853        %INCLUDE Z8A_ST ;
       50     6512        %INCLUDE Z8A_TYPES ;
       51     6686        %INCLUDE Z8A_LTS ;
       52     8763        %INCLUDE Z8A_COMCOM ;
       53     9413        %INCLUDE Z8F_O2COM ;
       54     9523        %INCLUDE Z8A_ERR_NUMS ;
       55    10287        %INCLUDE Z8A_ETT ;
       56    10588        %INCLUDE Z8A_SRCH ;
       57    10637
       58    10638        /*B*
       59    10639            QUAL$ -- Used as a pointer to the QUAL entry in the QLT.
       60    10640        */
       61    10641
       62    10642    1   DCL   Z8AE$ERROR     ENTRY (12) ; /* ERROR STATEMENTS             */
       63    10643    1   DCL   Z8AS$SR_ETT    ENTRY (1) ; /* Search triad onto the ETT */
       64    10644    1   DCL   Z8FC$S_A_UPDATE ENTRY (1) ; /* Update SAs of 02s, 03s, etc. */
       65    10645
       66    10646    1   DCL   SYM$           PTR STATIC ;
       67    10647    1   DCL   CURRENT_PROC$  PTR ; /* PROC_ item pointer for current ST item */
       68    10648    1   DCL   QUAL$          PTR STATIC ;
       69    10649    1   DCL   LTS$$          PTR ;
       70    10650    1   DCL   LONG$          PTR ; /* PTR to a LONG item in the LTS */
       71    10651    1   DCL   SAVE_LTS$      PTR ; /* LTS pointer for FD */
       72    10652    1   DCL   LAST_COUNT     UBIN ; /* Sequence number of last data block */
       73    10653    1   DCL   NEXT_AVAILABLE$ PTR ; /* PTR to info on last data block */
       74    10654    1   DCL   BLKNAME        CHAR (28) ; /* Name of WORKING-STORAGE continuation segment */
       75    10655    1   DCL   BLOCKSIZE      UBIN ; /* Full word copy of NEXT_AVAILABLE$->BLOCK.SIZE */
       76    10656    1   DCL   REDEF_NEXT_AVAIL UBIN WORD STATIC ;  /* Starting storage loc for redef's */
       77    10657    1   DCL   REDEF_MAX_SIZE UBIN WORD STATIC ;    /* Maximum size of vars in redef    */
       78    10658    1   DCL   RECSIZE        UBIN ; /* Size of FD items with SAME RECORD clause */
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:4    
       79    10659    1   DCL   LINAGE_NUM     UBIN ; /* In SAME RECORD group how many have LINAGE */
       80    10660    1   DCL   LINAGE_ADDR    UBIN ; /* FD.SA for a LINAGE COUNTER */
       81    10661    1   DCL   SEARCH_ST$     PTR       STATIC ; /* Ptr used to search thru redef's   */
       82    10662    1   DCL   TEMP_UBIN      UBIN ;
       83    10663    1   DCL   TEMP_CHAR      CHAR (4) ;
       84    10664    1   DCL   TEMP$          PTR ;
       85    10665    1   DCL   SEGMENT$$  (0:99)  PTR;
       86    10666        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:5    
       87    10667        /*E*
       88    10668              ERROR:  REDEF_SUB_VAR_OCCUR
       89    10669            MESSAGE:  A data item being redefined may not contain a variable occurs
       90    10670                      clause.
       91    10671        DESCRIPTION:  This message is flagged when a data item contains a variable
       92    10672                      occurs clause or if it's a group item then no items inside may
       93    10673                      contain a variable occurs clause.  A variable occurs clause
       94    10674                      is 'INDEXED BY data-name DEPENDING ON data-name'.
       95    10675        */
       96    10676
       97    10677        /*E*
       98    10678              ERROR:  REDEF_OBJ_VAR_OCCUR
       99    10679            MESSAGE:  A data item with a redefines clause may not contain a variable
      100    10680                      occurs clause.
      101    10681        DESCRIPTION:  This message is flagged when a data item contains a variable
      102    10682                      occurs clause or if it's a group item then no items inside may
      103    10683                      contain a variable occurs clause.  A variable occurs clause
      104    10684                      is 'INDEXED BY data-name DEPENDING ON data-name'.
      105    10685        */
      106    10686        /*V*
      107    10687            VARIABLE_OCCURS_CHECK -- Neither an object nor a subject of a redefines
      108    10688                                     clause may contain a variable occurs clause,
      109    10689                                     i.e. 'INDEXED BY A DEPENDING ON B'. This macro
      110    10690                                     checks if the item contains a variable occurs
      111    10691                                     clause and calls Z8AE$ERROR to flag the error.
      112    10692        */
      113    10693
      114    10694        %MACRO VARIABLE_OCCURS_CHECK(@ERROR_NO=%E$REDEF_OBJ_VAR_OCCUR) ;
      115    10695             DO ;
      116    10696               IF SYM$->VARIABLE.B.OCCURS_DEPENDING THEN DO ;
      117    10697                 COMCOM.CURRENT.LINE = SYM$->VARIABLE.LINE_NO ;
      118    10698                 CALL Z8AE$ERROR(@ERROR_NO) ;
      119    10699               END ;
      120    10700             END ;
      121    10701        %MEND ;
      122    10702
      123    10703
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:6    
      124    10704        %MACRO GET_MAIN_BASE_LTS;
      125    10705          DO;
      126    10706            %GET_LTS (@ID = %BASE_LTS,
      127    10707                      @ST$ = QUAL$ -> QLT.ST$,
      128    10708                      @RETURN$ = LTS$$);
      129    10709
      130    10710            IF QUAL$ -> QLT.ST$ -> SCALAR.B.REDEF_SUB THEN
      131    10711              LTS$$ = LTS$$ -> BASE_LTS.POINTER$ -> SCALAR.LTS$;
      132    10712
      133    10713          END;
      134    10714        %MEND;
      135    10715
      136    10716        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:7    
      137    10717    1   ESCAPE_INIT:PROC ;
      138    10718
      139    10719    2   DCL BASE$       PTR ; /* Used to loop thru BASE chain */
      140    10720    2   DCL NEXT_BASE$  PTR ; /* Ptr to next BASE item in list */
      141    10721    2   DCL ESCAPE_ZERO PTR ; /* Ptr to zero block ESCAPE triad */
      142    10722    2   DCL DONE_FLAG   BOOLEAN ;
      143    10723    2   DCL DONE_FLAG1  BOOLEAN ;
      144    10724
      145    10725
      146    10726                                                      /*#34918*/
      147    10727    2          ARGP_INIT : PROC;
      148    10728
      149    10729                           /* create or assign an %ARGP ETT item for the */
      150    10730                           /* Linkage Section item no matter if it is on */
      151    10731                           /* the USING list or not. Phase 1 already     */
      152    10732                           /* identified the sequence number for the     */
      153    10733                           /* %ARGP item. Also for a redefines subject   */
      154    10734                           /* item, assign its redefines obj's ARGP      */
      155    10735
      156    10736                         %GET_MAIN_BASE_LTS;
      157    10787
      158    10788    3                    IF LTS$$ -> BASE_LTS.ARGP$ ~= ADDR(NIL) AND
      159    10789    3                      SRCH.ESCINF.BLK# = 0 THEN
      160    10790    3                      BASE$ -> ETT.ROP = LTS$$ -> BASE_LTS.ARGP$;
      161    10791    3                    ELSE
      162    10792    4                      DO;
      163    10793    4                        SRCH.ESCINF.ARG# = LTS$$ -> BASE_LTS.SEQ# - 1;
      164    10794    4                        SRCH.LOP = LTS$$ -> BASE_LTS.ST$;
      165    10795    4                        CALL Z8AS$SR_ETT (BASE$ -> ETT.ROP);
      166    10796    4                        IF SRCH.ESCINF.BLK# = 0 THEN
      167    10797    4                          LTS$$ -> BASE_LTS.ARGP$ = BASE$ -> ETT.ROP;
      168    10798    4                      END;
      169    10799
      170    10800    3          END ARGP_INIT;
      171    10801        %EJECT;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:8    
      172    10802        /*V*
      173    10803            ESCAPE_INITIALIZATION -- Create a zero escape triad because most data items
      174    10804                                     will be in the first 16K of storage.  This will
      175    10805                                     cut down on the time needed to create the escapes
      176    10806                                     as the base item can be checked to see if it is
      177    10807                                     block zero instead of calling Z8AS$SR_ETT every
      178    10808                                     time.  Also assign the loop pointer so it equals
      179    10809                                     the top of the base chain.  Escapes are
      180    10810                                     created only if they are needed.
      181    10811        */
      182    10812
      183    10813    2          SRCH.ID = %ESC ;
      184    10814    2          SRCH.LOP = COMCOM.BLOCK$ ;
      185    10815    2          BASE$ = COMCOM.H_BASE ;
      186    10816
      187    10817    2          IF BASE$ ~= ADDR(NIL) THEN
      188    10818    3            DO ;
      189    10819    3              SRCH.ROPCON = 0 ;
      190    10820    3              CALL Z8AS$SR_ETT (ESCAPE_ZERO) ;
      191    10821        /*V*
      192    10822            CHECK_ESCAPES -- Step thru the base items and check if they are in
      193    10823                             block zero as this escape is already created.  If not
      194    10824                             then call Z8AS$SR_ETT to search the ETT to see if
      195    10825                             the escape has been created.  If it has then assign
      196    10826                             the BASE's right operand the pointer to that escape
      197    10827                             otherwise create the escape and assign the pointer.
      198    10828        */
      199    10829    4              DO WHILE (BASE$ ~= ADDR(NIL)) ;
      200    10830    4                NEXT_BASE$ = BASE$->ETT.ROP ;
      201    10831    4                SRCH.ESCINF.BLK# = BASE$->ETT.LOP->VARIABLE.SA / %#16K ;
      202    10832
      203    10833    4                IF BASE$->ETT.LOP->ST.ID ~= %PARA AND
      204    10834    4                    BASE$->ETT.LOP->ST.ID ~= %SECTION AND
      205    10835    4                    BASE$->ETT.LOP->VARIABLE.B.LINKAGE THEN
      206    10836                       /* PARA and SECTION are formatted differently,
      207    10837                          no LINKAGE bit. */
      208    10838    5   PROCESS_LINKAGE: DO ; /* Variable in LINKAGE SECTION; create ARGP, not ESC */
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:9    
      209    10839
      210    10840    5                  IF BASE$ -> ETT.LOP -> VARIABLE.B.COMPILER_CREATED AND
      211    10841    5                    BASE$ -> ETT.LOP -> VARIABLE.TYPE = %TYP THEN
      212    10842    6                    DO;
      213    10843                               /* This must be a base pointer, we need  */
      214    10844                               /* to create an %AUTO ETT for it.        */
      215    10845
      216    10846    6                      BASE$ -> ETT.ROP = COMCOM.AUTO$;
      217    10847    6                      EXIT PROCESS_LINKAGE;
      218    10848    6                    END;
      219    10849
      220    10850    5                  SRCH.ID = %ARGP ;
      221    10851    5                  QUAL$ = BASE$->ETT.LOP->VARIABLE.QLT$ ;
      222    10852    6                  DO WHILE QUAL$->QLT.LEVEL_NO > 1 ;
      223    10853    6                    QUAL$ = QUAL$->QLT.FATHER ;
      224    10854    6                  END ;
      225    10855    5                  LTS$ = BASE$->ETT.LOP->VARIABLE.PROC$->PROC_.PROC_DEF$->
      226    10856    5                         SYMDEF_.ARGLIST$ ;
      227    10857    6                  IF LTS$ = ADDR (NIL) THEN DO ;
      228    10858    6                    IF COMCOM.OB.FIPS.LEVEL >= %HIGH_LEV OR
      229    10859    6                      COMCOM.OB.COBOL_74 THEN
      230    10860    7                      DO;
      231    10861    7                        COMCOM.CURRENT.LINE = BASE$->ETT.LOP->VARIABLE.LINE_NO ;
      232    10862    7                        COMCOM.CURRENT.COLUMN = 0 ;
      233    10863    7                        CALL Z8AE$ERROR (%E$NOT_IN_USING_LIST) ;
      234    10864    7                      END;
      235    10865        /*E*
      236    10866              ERROR: NOT_IN_USING_LIST  -- ANSI or COBOL_74
      237    10867            MESSAGE: Variables appearing in the LINKAGE SECTION must appear in the
      238    10868                     PROCEDURE DIVISION USING list.
      239    10869        DESCRIPTION: A variable is defined in the LINKAGE SECTION, but it (or the
      240    10870                     structure that contains it) is not in the variables list in the
      241    10871                     USING clause on the PROCEDURE DIVISION statement.
      242    10872        */
      243    10873
      244    10874    6                    CALL ARGP_INIT;
      245    10875
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:10   
      246    10876    6                    SRCH.ID = %ESC;
      247    10877    6                    EXIT PROCESS_LINKAGE ;
      248    10878    6                  END ;
      249    10879
      250    10880    5                  TEMP_UBIN = 0;
      251    10881                       /* See if variable (or 01 level) is in USING list */
      252    10882    5                  DONE_FLAG = FALSE ; /* No match found yet in ARGLIST */
      253    10883    6                  DO UNTIL DONE_FLAG ;
      254    10884    6                    SYM$ = LTS$->ARGLIST.ARG$ (TEMP_UBIN) ;
      255    10885    6                    DONE_FLAG1 = FALSE ; /* None found in REDEFINES chain */
      256    10886    6                    IF SYM$ = QUAL$->QLT.ST$ THEN DONE_FLAG = TRUE ;
      257    10887                                                  /* Match in ARGLIST */
      258    10888    7                    ELSE IF SYM$->VARIABLE.B.REDEF_OBJ THEN DO UNTIL DONE_FLAG1 ;
      259    10889                           /* Search REDEFINES chain */
      260    10890    7                      SYM$ = SYM$->VARIABLE.QLT$->QLT.BROTHER->QLT.ST$ ;
      261    10891    8                      IF SYM$->VARIABLE.B.REDEF_SUB THEN DO ;
      262    10892    9                        IF SYM$ = QUAL$->QLT.ST$ THEN DO ;
      263    10893    9                          DONE_FLAG1 = TRUE ; /* Found match among REDEFINES */
      264    10894    9                          DONE_FLAG = TRUE ; /* Found match */
      265    10895    9                        END ;
      266    10896    8                      END ;
      267    10897    8                      ELSE DO ;
      268    10898    8                        TEMP_UBIN = TEMP_UBIN + 1 ;
      269    10899    8                        DONE_FLAG1 = TRUE ; /* Done searching REDEFINES,no luck */
      270    10900    8                      END ;
      271    10901    7                    END ;
      272    10902    6                    ELSE TEMP_UBIN = TEMP_UBIN + 1 ;
      273    10903    7                    IF TEMP_UBIN + 2 > LTS$->ARGLIST.N THEN DO ;
      274    10904    7                      IF COMCOM.OB.FIPS.LEVEL >= %HIGH_LEV OR
      275    10905    7                        COMCOM.OB.COBOL_74 THEN
      276    10906    8                        DO;
      277    10907    8                          COMCOM.CURRENT.LINE = BASE$->ETT.LOP->VARIABLE.LINE_NO ;
      278    10908    8                          COMCOM.CURRENT.COLUMN = 0 ;
      279    10909    8                          CALL Z8AE$ERROR (%E$NOT_IN_USING_LIST) ;
      280    10910    8                        END;
      281    10911
      282    10912    7                      CALL ARGP_INIT;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:11   
      283    10913
      284    10914    7                      SRCH.ID = %ESC;
      285    10915    7                      EXIT PROCESS_LINKAGE ;
      286    10916    7                    END ;
      287    10917    6                  END ;
      288    10918
      289    10919    5                  CALL ARGP_INIT;
      290    10920
      291    10921    5                  SRCH.ID = %ESC;
      292    10922    5                END ;
      293    10923    5                ELSE DO ;
      294    10924
      295    10925    5                  SRCH.ESCINF.ARG# = 0 ; /* Not in LINKAGE SECTION */
      296    10926    5                  IF BASE$->ETT.LOP->VARIABLE.R > 1 THEN /* In .DATA. */
      297    10927    6                    DO ;
      298    10928    6                      IF SRCH.ESCINF.BLK# = 0 AND
      299    10929    6                        BASE$->ETT.LOP->VARIABLE.COUNT = 1 THEN
      300    10930    6                          BASE$->ETT.ROP = ESCAPE_ZERO ;
      301    10931    7                      ELSE DO ; /* Search and create ETT entry if necessary */
      302    10932    7                        SRCH.LOP = COMCOM.BLOCK$ ;
      303    10933    8                        DO TEMP_UBIN = BASE$->ETT.LOP->VARIABLE.COUNT DOWNTO 2 ;
      304    10934    8                          SRCH.LOP = SRCH.LOP->BLOCK.NEXT ;
      305    10935    8                        END ;
      306    10936    7                        CALL Z8AS$SR_ETT(BASE$->ETT.ROP) ;
      307    10937    7                      END ;
      308    10938    6                    END ;
      309    10939    6                    ELSE DO ; /* In .PROC. */
      310    10940    6                      SRCH.ROP = BASE$->ETT.LOP ;
      311    10941
      312    10942    6                      IF COMCOM.SEGMENTC > 1 AND
      313    10943    6                        (BASE$->ETT.LOP->ST.ID = %PARA OR
      314    10944    6                         BASE$->ETT.LOP->ST.ID = %SECTION) AND
      315    10945    6                        BASE$->ETT.LOP->LABEL.B.USE_BASE_POINTER THEN
      316    10946    7                        DO;  /* Kluge, in case the label is in a   */
      317    10947                                  /* different segment, a base pointer  */
      318    10948                                  /* containing the address is needed   */
      319    10949                                  /* and the base item is hiding in the */
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:12   
      320    10950                                  /* LABEL.LINK, see virtual Z9A_SUPP_M */
      321    10951    7                          SRCH.LOP = BASE$->ETT.LOP->LABEL.LINK;
      322    10952                                  /* Restore the LINK field             */
      323    10953    7                          BASE$->ETT.LOP->LABEL.LINK =
      324    10954    7                               SRCH.LOP->ETT.LOP->VARIABLE.LTS$;
      325    10955    7                        END;
      326    10956    6                      ELSE
      327    10957    6                        SRCH.LOP = SEGMENT$$(BASE$->ETT.LOP->VARIABLE.COUNT) ;
      328    10958    6                      CALL Z8AS$SR_ETT(BASE$->ETT.ROP) ;
      329    10959    6                    END ;
      330    10960    5                  END ;
      331    10961    4                BASE$ = NEXT_BASE$ ;
      332    10962    4              END ;
      333    10963    3              SRCH.LOP = COMCOM.BLOCK$ ;
      334    10964    3            END ;
      335    10965
      336    10966        /*V*
      337    10967            ASSIGN_FINAL_ESCAPE -- COMCOM.ESC points to the ESC triad that the
      338    10968                                   next available data location is in.  This
      339    10969                                   is used by the generator when creating
      340    10970                                   temporary data items.
      341    10971        */
      342    10972
      343    10973    3          DO TEMP_UBIN = O2COM.WORK_STOR_BLKNUM DOWNTO 2 ;
      344    10974    3            SRCH.LOP = SRCH.LOP -> BLOCK.NEXT ;
      345    10975    3          END ;
      346    10976    2          SRCH.ROPCON = SRCH.LOP->BLOCK.SIZE / %#16K ;
      347    10977    2          COMCOM.LAST_BLOCK$ = SRCH.LOP ;
      348    10978    2          CALL Z8AS$SR_ETT (COMCOM.ESC) ;
      349    10979    2   END ESCAPE_INIT ;
      350    10980        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:13   
      351    10981    1   RECORD_SIZE: PROC (ST$$, RECSIZE);
      352    10982        /*V*
      353    10983            GET_SIZE_AND_INCREMENT -- The size of the variable is extracted from
      354    10984                                      ST.NDSC.N if it is numeric and from ST.ADSC.N or
      355    10985                                      LONG.LENGTH if it is alphabetic.  The size is in
      356    10986                                      LONG.LENGTH if the item's size did not fit in the
      357    10987                                      ST (size > 4095 bytes).  The size of the variable
      358    10988                                      is then added to the storage counters to get the
      359    10989                                      next available location.
      360    10990        */
      361    10991    2   DCL ST$$ PTR;
      362    10992    2   DCL RECSIZE UBIN;
      363    10993
      364    10994    3                DO CASE (ST$$->VARIABLE.TYPE) ;
      365    10995    3                  CASE (%TYA, %TYN, %TYE) ;
      366    10996    3                    IF  ST$$->VARIABLE.B.LENGTH_4096 THEN
      367    10997    4                      DO ;
      368    10998                             %GET_LTS (@ID = %LONG, @ST$ = ST$$, @RETURN$ = LONG$) ;
      369    11041    4                        RECSIZE =
      370    11042    4                            (LONG$->LONG.LENGTH + 3) / 4 ;
      371    11043    4                      END ;
      372    11044    3                    ELSE      /* length stored in symbol table */
      373    11045    3                      RECSIZE = (ST$$->VARIABLE.ADSC.N + 3) / 4 ;
      374    11046    3                  CASE (%TYB) ;
      375    11047    3                    IF  ST$$->VARIABLE.B.LENGTH_4096 THEN
      376    11048    4                      DO ;
      377    11049                             %GET_LTS (@ID = %LONG, @ST$ = ST$$, @RETURN$ = LONG$) ;
      378    11092    4                        RECSIZE =
      379    11093    4                            (LONG$->LONG.LENGTH + 5) / 6 ;
      380    11094    4                      END ;
      381    11095    3                    ELSE      /* length stored in symbol table */
      382    11096    3                      RECSIZE = (ST$$->VARIABLE.ADSC.N + 5) / 6 ;
      383    11097    3                  CASE (%TYC) ;
      384    11098    3                    RECSIZE = (ST$$->VARIABLE.NDSC.N + 5) / 6 ;
      385    11099    3                  CASE (ELSE) ;
      386    11100    3                    IF ST$$->VARIABLE.TYPE = %TYD AND ST$$ -> VARIABLE.NDSC.TN THEN
      387    11101    3                      RECSIZE = (ST$$->VARIABLE.NDSC.N + 7) / 8 ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:14   
      388    11102    3                    ELSE
      389    11103    3                      RECSIZE = (ST$$->VARIABLE.NDSC.N + 3) / 4 ;
      390    11104    3                END ;
      391    11105    2   END RECORD_SIZE;
      392    11106        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:15   
      393    11107        /*N*
      394    11108            FINAL_PROGRAM_CHNGS -- Remember DEFINED and REFERENCED bits.
      395    11109                                   Check TOP_QLT to make sure it's a data item
      396    11110        */
      397    11111               %TOP_QLT (POINTER = QUAL$) ;
      398    11116
      399    11117        /*V*
      400    11118            ALIGN_STORAGE_COUNTER -- All level 1 or 77 items are either on a double word
      401    11119                                     or a single word boundary.  If we are not at a
      402    11120                                     double word boundary and one is required then
      403    11121                                     filler is added for the needed alignment.
      404    11122
      405    11123                                       Double word aligned items:
      406    11124                                           TYQ  (COMP12, COMP14)
      407    11125                                           TYX  (INDEX item)
      408    11126                                           TYA  when 5<= (size in bytes) <= 8
      409    11127                                           TYA  all group data items.
      410    11128
      411    11129                                       Single word aligned items:
      412    11130                                           all others
      413    11131        */
      414    11132
      415    11133        /*V*
      416    11134             At this time the COMCOM.SEGMENT$ array is not ready yet for
      417    11135             overlayable segment, so create a temporary SEGMENT$$ array
      418    11136             to save the information needed in this module.
      419    11137        */
      420    11138
      421    11139    1          IF COMCOM.SEGMENTC > 1 THEN
      422    11140    2            DO;
      423    11141    2              TEMP$ = COMCOM.SEGMENT$(0);  /* root segment */
      424    11142
      425    11143    3              DO WHILE (TEMP$ ~= ADDR(NIL));
      426    11144
      427    11145    3                SEGMENT$$ (TEMP$ -> SEGMENT.COUNT) = TEMP$;
      428    11146    3                TEMP$ = TEMP$ -> SEGMENT.NEXT;
      429    11147
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:16   
      430    11148    3              END;
      431    11149    2            END;
      432    11150    1          ELSE
      433    11151    1            SEGMENT$$(0) = COMCOM.SEGMENT$(0);  /* root segment */
      434    11152
      435    11153
      436    11154    1          COMCOM.CURRENT.COLUMN = 0 ;
      437    11155    1          LAST_COUNT = 1 ; /* Set it up for .DATA. */
      438    11156    1          NEXT_AVAILABLE$ = COMCOM.BLOCK$ ;
      439    11157    1          CURRENT_PROC$ = ADDR (NIL) ;
      440    11158    1          O2COM.NEXT_AVAILABLE$ = COMCOM.BLOCK$ ;
      441    11159    2          DO WHILE (QUAL$ ~= ADDR(NIL)) ;
      442    11160    2            SYM$ = QUAL$->QLT.ST$ ;
      443    11161
      444    11162    3   CASE_STMT: DO CASE (SYM$->ST.ID) ;
      445    11163    3             CASE(
      446    11164                   %ST_ITEMS_WITH_STORAGE ;
      447    11176    3              ) ;
      448    11177    3              IF SYM$->ST.ID = %FD OR
      449    11178    4                 SYM$->ST.ID = %SD THEN DO ;
      450    11179                     %GET_LTS (@ID=%FILE_LTS, @ST$=SYM$, @RETURN$=LTS$) ;
      451    11222    4                SAVE_LTS$ = LTS$ ;
      452    11223    4                IF SYM$->ST.ID = %SD THEN
      453    11224    5                  IF LTS$->FILE_LTS.B.SAME_AREA THEN DO ;
      454    11225    5                    COMCOM.CURRENT.LINE = SYM$->SD.LINE_NO ;
      455    11226    5                    CALL Z8AE$ERROR (%E$SORT_FILE_SAME_AREA) ;
      456    11227        /*E*
      457    11228              ERROR:  SORT_FILE_SAME_AREA
      458    11229            MESSAGE:  Sort or merge files must not appear in a SAME clause without
      459    11230                      a SORT, SORT-MERGE, or RECORD phrase.
      460    11231        DESCRIPTION:  The standard specifies that a SORT file can appear in a
      461    11232                      SAME AREA clause only if one of these three phrases occurs
      462    11233                      in the clause.
      463    11234        */
      464    11235    5                  END ;
      465    11236    4                IF SYM$->SCALAR.B.EXTERNAL THEN
      466    11237    4                  IF LTS$->FILE_LTS.B.SAME_AREA OR LTS$->FILE_LTS.B.SAME_RECORD
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:17   
      467    11238    5                    OR LTS$->FILE_LTS.B.SAME_SORT_AREA THEN DO ;
      468    11239    5                      COMCOM.CURRENT.LINE = SYM$->SCALAR.LINE_NO ;
      469    11240    5                      CALL Z8AE$ERROR (%E$EXTERNAL_SAME_AREA) ;
      470    11241        /*E*
      471    11242              ERROR:  EXTERNAL_SAME_AREA
      472    11243            MESSAGE:  EXTERNAL files must not appear in a SAME AREA clause.
      473    11244        DESCRIPTION:  File names in a SAME AREA, SAME RECORD AREA, SAME SORT AREA,
      474    11245                      or SAME SORT-MERGE AREA clause cannot reference external
      475    11246                      file connectors.
      476    11247        */
      477    11248    5                    END ;
      478    11249    4                IF LTS$->FILE_LTS.B.SAME_RECORD
      479    11250    4                    AND LTS$->FILE_LTS.REPORT$ ~= ADDR (NIL) THEN
      480    11251    4                  IF LTS$->FILE_LTS.REPORT$->REPORT_LTS.LINE_COUNTER$
      481    11252    5                      ~= ADDR (NIL) THEN DO ;
      482    11253    5                    COMCOM.CURRENT.LINE = SYM$->SCALAR.LINE_NO ;
      483    11254    5                    CALL Z8AE$ERROR (%E$REPORT_SAME_RECORD) ;
      484    11255        /*E*
      485    11256              ERROR: REPORT_SAME_RECORD
      486    11257            MESSAGE: REPORT files must not appear in a SAME clause with the RECORD phrase.
      487    11258        DESCRIPTION: It is legal for REPORT files to appear in SAME clauses
      488    11259                     only if the RECORD phrase is omitted.
      489    11260        */
      490    11261    5                  END ;
      491    11262    4                IF LTS$->FILE_LTS.SAME_RECORD.HEAD$ ~= ADDR (NIL) THEN
      492    11263                       /* Allocate this on reaching the item for which
      493    11264                          LTS$->FILE_LTS.SAME_RECORD.HEAD$ = ADDR (NIL) */
      494    11265    4                  EXIT CASE_STMT ;
      495    11266    4              END ;
      496    11267    4              IF SYM$->VARIABLE.B.LINKAGE THEN DO;
      497    11268                     /* Do not allocate storage for anything in LINKAGE SECTION */
      498    11269    5   IS_IT_PARAM: DO;
      499    11270    5                  IF
      500    11271                         %IF GCOS;
      503    11274                         %ENDIF;
      504    11275    6                    COMCOM.OB.COBOL_74 THEN DO;
      505    11276    6                      LTS$ = SYM$->VARIABLE.PROC$->PROC_.PROC_DEF$->SYMDEF_.ARGLIST$;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:18   
      506    11277    7                      IF LTS$ ~= ADDR(NIL) THEN DO; /* There are parameter(s) */
      507    11278    7                        TEMP_UBIN = 0;
      508    11279    8                        DO UNTIL TEMP_UBIN+2 > LTS$->ARGLIST.N;
      509    11280    8                          ST$ = LTS$->ARGLIST.ARG$(TEMP_UBIN);
      510    11281    8                          IF SYM$ = ST$ THEN EXIT IS_IT_PARAM; /* Parameter */
      511    11282    8                          IF ST$->VARIABLE.B.REDEF_OBJ AND SYM$->VARIABLE.B.REDEF_SUB
             11282                                   THEN
      512    11283    9                            DO WHILE '1'B; /* Until exit -- check for REDEF */
      513    11284    9                              ST$ = ST$->VARIABLE.QLT$->QLT.BROTHER->QLT.ST$;
      514    11285    9                              IF NOT ST$->VARIABLE.B.REDEF_SUB THEN EXIT;
      515    11286    9                              IF SYM$ = ST$ THEN EXIT IS_IT_PARAM;
      516    11287    9                            END;
      517    11288    8                          TEMP_UBIN = TEMP_UBIN + 1;
      518    11289    8                        END;
      519    11290    7                      END; /* LTS$ ~= ADDR(NIL) */
      520    11291    6                    END; /* COBOL74 option, etc. */
      521    11292    5                  EXIT CASE_STMT; /* Based variable */
      522    11293    5                END; /* IS_IT_PARAM */
      523    11294                     /* If parameter, maybe adjust alignment */
      524    11295    4                IF SYM$->VARIABLE.TYPE = %TYD THEN /* Check alignment */
      525    11296    4                  IF SYM$->VARIABLE.NDSC.TN /* Packed */ THEN
      526    11297    4                    IF NOT SYM$->VARIABLE.B.DIGIT /* Byte-, not digit-, aligned */ THEN
      527    11298    4                      IF MOD (SYM$->VARIABLE.NDSC.N, 2) ~= 0 /* Odd length */ THEN
      528    11299    4                        SYM$->VARIABLE.NDSC.CN = 1;
      529    11300                             /* Start at digit 1 so it will end on byte boundary. */
      530    11301    4                EXIT CASE_STMT ;
      531    11302    4              END ;
      532    11303    3              IF SYM$ -> VARIABLE.B.DML_UWA    THEN
      533    11304    3                  EXIT CASE_STMT;  /* No allocation for DML User Work Area */
      534    11305    3              IF SYM$->VARIABLE.R = 1
      535    11306    3                THEN NEXT_AVAILABLE$ = SEGMENT$$(SYM$->VARIABLE.COUNT) ;
      536    11307    4              ELSE DO ;
      537    11308    4                IF SYM$->VARIABLE.COUNT = 1
      538    11309    4                  THEN SYM$->VARIABLE.COUNT = O2COM.WORK_STOR_BLKNUM ;
      539    11310    4                IF SYM$->VARIABLE.COUNT = LAST_COUNT
      540    11311    4                  THEN NEXT_AVAILABLE$ = O2COM.NEXT_AVAILABLE$ ;
      541    11312    5                  ELSE DO ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:19   
      542    11313    6                    IF SYM$->VARIABLE.COUNT < LAST_COUNT THEN DO ;
      543    11314    6                      NEXT_AVAILABLE$ = COMCOM.BLOCK$ ;
      544    11315    6                      LAST_COUNT = 1 ;
      545    11316    6                    END ;
      546    11317    6                    DO WHILE SYM$->VARIABLE.COUNT > LAST_COUNT ;
      547    11318    6                      LAST_COUNT = LAST_COUNT + 1 ;
      548    11319    6                      NEXT_AVAILABLE$ = NEXT_AVAILABLE$->BLOCK.NEXT ;
      549    11320    6                    END ;
      550    11321    5                    O2COM.NEXT_AVAILABLE$ = NEXT_AVAILABLE$ ;
      551    11322    5                  END ;
      552    11323    5                  IF CURRENT_PROC$ ~= SYM$->VARIABLE.PROC$ THEN DO ;
      553    11324    5                    TEMP$ = COMCOM.BLOCK$ ;
      554    11325    6                    DO WHILE TEMP$ ~= ADDR (NIL) ;
      555    11326    7                      IF SUBSTR(TEMP$->BLOCK.DNT$->DNT.TEXT.NAME,0,4) = 'BLCK' THEN DO
             11326                               ;
      556    11327    7                        TEMP$->BLOCK.SIZE1 = MAXIMUM (TEMP$->
      557    11328    7                            BLOCK.SIZE1, TEMP$->BLOCK.SIZE) ;
      558    11329    7                        TEMP$->BLOCK.SIZE = 0 ;
      559    11330    7                      END ;
      560    11331    6                      TEMP$ = TEMP$->BLOCK.NEXT ;
      561    11332    6                    END ;
      562    11333    5                    CURRENT_PROC$ = SYM$->VARIABLE.PROC$ ;
      563    11334    5                    IF SYM$->VARIABLE.R = %START_BLK
      564    11335    5                      THEN SYM$->VARIABLE.R = %BLOCK_ ;
      565    11336    5                  END ;
      566    11337    5                  ELSE IF SYM$->VARIABLE.R = %START_BLK THEN DO ;
      567    11338    5                    IF NEXT_AVAILABLE$->BLOCK.SIZE1 < NEXT_AVAILABLE$->BLOCK.SIZE
      568    11339    5                      THEN NEXT_AVAILABLE$->BLOCK.SIZE1 = NEXT_AVAILABLE$->BLOCK.SIZE ;
      569    11340    5                    NEXT_AVAILABLE$->BLOCK.SIZE = 0 ;
      570    11341    5                    SYM$->VARIABLE.R = %BLOCK_ ;
      571    11342    5                  END ;
      572    11343    4                END ;
      573    11344    4              IF SYM$->VARIABLE.B.ALLOCATED THEN DO ;
      574    11345                     /* If duplicate declaration of EXTERNAL variable, do not need
      575    11346                        to allocate storage for this copy, but may have to set
      576    11347                        REDEF_NEXT_AVAIL and BLOCK.SIZE in case the EXTERNAL
      577    11348                        variable is redefined. */
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:20   
      578    11349    5                IF SYM$->VARIABLE.B.REDEF_OBJ THEN DO ;
      579    11350    5                  IF NEXT_AVAILABLE$->BLOCK.B.SIZE_256K THEN
      580    11351    5                    REDEF_MAX_SIZE = %#256K;
      581    11352    5                  ELSE
      582    11353    5                    REDEF_MAX_SIZE = NEXT_AVAILABLE$->BLOCK.SIZE;
      583    11354    5                  REDEF_NEXT_AVAIL = 0 ;
      584    11355    5                  CALL RECORD_SIZE (SYM$, RECSIZE);
      585    11356    5                  IF REDEF_MAX_SIZE < RECSIZE THEN
      586    11357    5                    REDEF_MAX_SIZE = RECSIZE;
      587    11358
      588    11359    5                  SEARCH_ST$ = QUAL$->QLT.BROTHER->QLT.ST$;
      589    11360    5   SEARCH_EXT_REDEFS:
      590    11361    6                  DO WHILE SEARCH_ST$->VARIABLE.B.REDEF_SUB;
      591    11362    6                    CALL RECORD_SIZE (SEARCH_ST$, RECSIZE);
      592    11363    6                    IF REDEF_MAX_SIZE < RECSIZE THEN
      593    11364    6                      REDEF_MAX_SIZE = RECSIZE;
      594    11365    6                    IF SEARCH_ST$->VARIABLE.QLT$->QLT.BROTHER = ADDR(NIL) THEN
      595    11366    6                      EXIT SEARCH_EXT_REDEFS;
      596    11367    6                    SEARCH_ST$ = SEARCH_ST$->VARIABLE.QLT$->QLT.BROTHER->QLT.ST$;
      597    11368    6                  END SEARCH_EXT_REDEFS;
      598    11369
      599    11370    5                  IF REDEF_MAX_SIZE > %#256K THEN
      600    11371    6                    DO;
      601    11372    6                      TEMP$ = COMCOM.BLOCK$;
      602    11373    7                      DO TEMP_UBIN = 2 TO SYM$->VARIABLE.COUNT;
      603    11374    7                        TEMP$ = TEMP$->BLOCK.NEXT;
      604    11375    7                      END;
      605    11376    6                      TEMP_UBIN = SYM$->VARIABLE.LINE_NO;
      606    11377    6                      CALL Z8AE$ERROR (%E$BLOCK_DATA_LIMIT,
      607    11378    6                                       TEMP_UBIN,,
      608    11379    6                                       TEMP$->BLOCK.DNT$);
      609    11380    6                      COMCOM.DATA_LIMIT_ERROR_FLAGGED = TRUE;
      610    11381    6                      COMCOM.OB.CHECK = TRUE;
      611    11382    6                    END;
      612    11383    5                  ELSE IF REDEF_MAX_SIZE = %#256K THEN
      613    11384    5                    NEXT_AVAILABLE$->BLOCK.B.SIZE_256K = TRUE;
      614    11385    5                  ELSE IF REDEF_MAX_SIZE > NEXT_AVAILABLE$->BLOCK.SIZE THEN
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:21   
      615    11386    5                    NEXT_AVAILABLE$->BLOCK.SIZE = REDEF_MAX_SIZE;
      616    11387    5                END ; /* REDEF_OBJ */
      617    11388    4                EXIT CASE_STMT ;
      618    11389    4              END ; /* Duplicate declaration of EXTERNAL variable */
      619    11390    3              IF NEXT_AVAILABLE$->BLOCK.B.SIZE_256K
      620    11391    3                THEN BLOCKSIZE = %#256K ;
      621    11392    3                ELSE BLOCKSIZE = NEXT_AVAILABLE$->BLOCK.SIZE ;
      622    11393
      623    11394    3              IF (SYM$->VARIABLE.TYPE = %TYQ OR SYM$ -> VARIABLE.TYPE = %TYX OR
      624    11395    3                 (SYM$->VARIABLE.TYPE = %TYA AND SYM$->VARIABLE.ADSC.N >= 5 AND SYM$->
             11395                          VARIABLE.ADSC.N <= 8) OR
      625    11396    3                 (SYM$->VARIABLE.TYPE = %TYD AND (NOT SYM$->VARIABLE.NDSC.TN) AND
      626    11397    3                    MOD (SYM$->VARIABLE.NDSC.N,8) = 0) OR      /*#32757*/
      627    11398    3                  SYM$->VARIABLE.B.MOD_2 OR                 /*#29142*/
      628    11399    3                    NOT QUAL$->QLT.ST$->VARIABLE.B.ELEMENTARY)
      629    11400    3                   AND MOD (BLOCKSIZE,2) = 1 THEN
      630    11401
      631    11402                             /* increment to even word */
      632    11403
      633    11404    4                DO ;
      634    11405    4                  BLOCKSIZE = BLOCKSIZE + 1 ;
      635    11406    4                  IF BLOCKSIZE >= %#256K THEN
      636    11407    4                    NEXT_AVAILABLE$->BLOCK.B.SIZE_256K = TRUE ;
      637    11408    4                END ;
      638    11409    3              IF SYM$->VARIABLE.TYPE = %TYD THEN
      639    11410    3                IF SYM$->VARIABLE.NDSC.TN /* Packed */ THEN
      640    11411    3                  IF NOT SYM$->VARIABLE.B.DIGIT /* Byte-, not digit-, aligned */ THEN
      641    11412    3                    IF MOD (SYM$->VARIABLE.NDSC.N, 2) ~= 0 /* Odd length */ THEN
      642    11413    3                      SYM$->VARIABLE.NDSC.CN = 1;
      643    11414                           /* Start at character 1 so it will end on byte boundary. */
      644    11415    3              IF SYM$->VARIABLE.B.MOD_8 THEN
      645    11416    4                DO ;
      646    11417    4                  BLOCKSIZE = ((BLOCKSIZE + 7) / 8) * 8 ; /* Force to mod 8 bound */
      647    11418    4                  IF BLOCKSIZE >= %#256K THEN
      648    11419    4                    NEXT_AVAILABLE$->BLOCK.B.SIZE_256K = TRUE ;
      649    11420    4                END ;
      650    11421        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:22   
      651    11422        /*V*
      652    11423            REDEFINITION -- If the variable is the object of a redefines clause,
      653    11424                            the initial setting of the redefinition variables is done.
      654    11425                            This is accomplished by searching thru the data items
      655    11426                            that redefine the object.  If one of them is double word
      656    11427                            aligned then all of the items are double word aligned and
      657    11428                            filler may have to be added.
      658    11429
      659    11430                            If the item is the subject of a redefinition then the item's
      660    11431                            position in .DATA. is set to the position of the object.
      661    11432        */
      662    11433         %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:23   
      663    11434    3              IF SYM$->VARIABLE.B.REDEF_SUB THEN
      664    11435    4                DO;
      665    11436    4                  IF COMCOM.OB.FIPS.LEVEL >= %HIGH_LEV THEN
      666    11437                         %VARIABLE_OCCURS_CHECK(@ERROR_NO=%E$REDEF_SUB_VAR_OCCUR) ;
      667    11445    4                  SYM$->VARIABLE.SA = REDEF_NEXT_AVAIL;
      668    11446    4                END;
      669    11447    3              ELSE
      670    11448    4              DO;
      671    11449    4               IF SYM$->VARIABLE.B.REDEF_OBJ THEN
      672    11450    5                DO ;
      673    11451
      674    11452    5                  IF COMCOM.OB.FIPS.LEVEL >= %HIGH_LEV THEN
      675    11453                         %VARIABLE_OCCURS_CHECK(@ERROR_NO=%E$REDEF_OBJ_VAR_OCCUR) ;
      676    11461
      677    11462    5                  CALL RECORD_SIZE (SYM$, RECSIZE);
      678    11463    5                  REDEF_MAX_SIZE = RECSIZE;
      679    11464
      680    11465    5                  SEARCH_ST$ = QUAL$->QLT.BROTHER->QLT.ST$ ;
      681    11466
      682    11467    5                    SEARCH_REDEF_SUBJECTS:
      683    11468    6                      DO WHILE SEARCH_ST$->VARIABLE.B.REDEF_SUB ;
      684    11469
      685    11470    6                        CALL RECORD_SIZE (SEARCH_ST$, RECSIZE);
      686    11471    6                        IF REDEF_MAX_SIZE < RECSIZE THEN
      687    11472    6                          REDEF_MAX_SIZE = RECSIZE;
      688    11473
      689    11474    6                        IF (SEARCH_ST$->VARIABLE.TYPE = %TYQ OR SEARCH_ST$ -> VARIABLE.
             11474                                 TYPE = %TYX OR
      690    11475    6                           (SEARCH_ST$->VARIABLE.TYPE = %TYA AND SEARCH_ST$->VARIABLE.
             11475                                    ADSC.N >= 5
      691    11476    6                                                             AND SEARCH_ST$->VARIABLE.
             11476                                                                      ADSC.N <= 8)
      692    11477    6                            OR (SEARCH_ST$->VARIABLE.TYPE = %TYD AND (NOT SEARCH_ST$->
             11477                                     VARIABLE.NDSC.TN) AND
      693    11478    6                                   MOD (SEARCH_ST$->VARIABLE.NDSC.N,8) = 0)
      694    11479    6                            OR NOT SEARCH_ST$->VARIABLE.B.ELEMENTARY) THEN
      695    11480    6                          BLOCKSIZE = (BLOCKSIZE + 1) / 2 * 2;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:24   
      696    11481    6                        IF SEARCH_ST$->VARIABLE.QLT$->QLT.BROTHER
      697    11482    6                            = ADDR (NIL) THEN
      698    11483    6                          EXIT SEARCH_REDEF_SUBJECTS ;
      699    11484    6                        SEARCH_ST$ = SEARCH_ST$->VARIABLE.QLT$->QLT.BROTHER->QLT.ST$ ;
      700    11485
      701    11486    6                      END SEARCH_REDEF_SUBJECTS ;
      702    11487
      703    11488    5                  RECSIZE = REDEF_MAX_SIZE ;
      704    11489    5                  REDEF_NEXT_AVAIL = BLOCKSIZE ;
      705    11490    5                END ;
      706    11491        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:25   
      707    11492        /*V*
      708    11493            SAME_RECORD_CHECK -- For FD items with the SAME RECORD clause, check all
      709    11494                                 items this one is linked with, to find the biggest,
      710    11495                                 and add 1 for each LINAGE COUNTER. The next available
      711    11496                                 location counter is updated.
      712    11497        */
      713    11498    4              ELSE IF (SYM$->ST.ID = %FD OR SYM$->ST.ID = %SD) AND
      714    11499    5                  LTS$->FILE_LTS.SAME_RECORD.LINK ~= ADDR (NIL) THEN DO ;
      715    11500    5                RECSIZE = 0;
      716    11501    5                LINAGE_NUM = 0;
      717    11502    6                DO UNTIL LTS$ = ADDR (NIL) ;
      718    11503                       /* The first SON is INFO_RECORD# whose size is that of the FD
      719    11504                          excluding the LINAGE COUNTER if any. */
      720    11505    6                  ST$ = LTS$->FILE_LTS.ST$->VARIABLE.QLT$->QLT.SON->QLT.ST$ ;
      721    11506                       /* Assume VARIABLE.TYPE = %TYA for now.
      722    11507                          Z8FC$S_A_UPDATE will check if this is true. */
      723    11508    6                  IF ST$->VARIABLE.B.LENGTH_4096 THEN
      724    11509    7                    DO ;
      725    11510                           %GET_LTS (@ID=%LONG, @ST$=ST$, @RETURN$=LONG$) ;
      726    11553    7                      RECSIZE = MAXIMUM (RECSIZE,
      727    11554    7                          (LONG$->LONG.LENGTH + 3) / 4) ;
      728    11555    7                    END ;
      729    11556    6                  ELSE RECSIZE = MAXIMUM (RECSIZE,
      730    11557    6                      (ST$->VARIABLE.ADSC.N + 3) / 4) ;
      731    11558    6                  IF LTS$->FILE_LTS.LINAGE_COUNTER$ ~= ADDR (NIL) THEN
      732    11559    6                    LINAGE_NUM = LINAGE_NUM + 1 ;
      733    11560    6                  LTS$ = LTS$->FILE_LTS.SAME_RECORD.LINK ;
      734    11561    6                END ;
      735    11562    5                RECSIZE = RECSIZE + LINAGE_NUM ;
      736    11563    5              END ;
      737    11564    4             ELSE
      738    11565    4               CALL RECORD_SIZE (SYM$, RECSIZE);
      739    11566        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:26   
      740    11567        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:27   
      741    11568        /*E*
      742    11569              ERROR:  DATA_LIMIT
      743    11570         MESSAGE:  WORKING-STORAGE data limit of 256K has been exceeded, code generation has
             11570         been suspended.
      744    11571        DESCRIPTION:  This error is produced when the main storage counter goes
      745    11572                      beyond 256K words.  The counters are reset to zero.
      746    11573        */
      747    11574
      748    11575    4              IF BLOCKSIZE + RECSIZE >= %#256K THEN
      749    11576    4   BLOCK_OVERFLOW:
      750    11577    5                DO ;
      751    11578
      752    11579    5                  IF NOT(COMCOM.DATA_LIMIT_ERROR_FLAGGED) THEN
      753    11580    6                    DO ;
      754    11581    6                      COMCOM.CURRENT.LINE = SYM$->VARIABLE.LINE_NO ;
      755    11582    6                      IF SYM$->VARIABLE.COUNT = O2COM.WORK_STOR_BLKNUM THEN
      756    11583    7                        DO ;
      757    11584    7                          IF RECSIZE > %#256K OR NOT COMCOM.OB.MS_DATA
      758    11585    7                            THEN CALL Z8AE$ERROR (%E$DATA_LIMIT) ;
      759    11586    8                          ELSE IF BLOCKSIZE ~= 0 THEN DO ;
      760    11587    8                            BLKNAME = COMCOM.BLOCK$ -> BLOCK.DNT$ -> DNT.TEXT.NAME ;
      761    11588    8                            CALL BINCHAR (TEMP_CHAR, COMCOM.BLOCKC + 1) ;
      762    11589    8                            IF COMCOM.BLOCKC < 9 THEN TEMP_UBIN = 4 ;
      763    11590    8                            ELSE IF COMCOM.BLOCKC < 99 THEN TEMP_UBIN = 3 ;
      764    11591    8                            ELSE TEMP_UBIN = 2 ;
      765    11592    8                            CALL INSERT (BLKNAME, TEMP_UBIN, 5 - TEMP_UBIN,
      766    11593    8                                SUBSTR (TEMP_CHAR, TEMP_UBIN - 1)) ;
      767    11594                                 %NEW_DNT (@SIZE =
             11594                                     "COMCOM.BLOCK$ -> BLOCK.DNT$ -> DNT.TEXT.LENGTH",
      768    11595                                           @NAME = BLKNAME) ;
      769    11653                                 %NEW_BLOCK (@R = %BLOCK_, @DNT$ = DNT$) ;
      770    11717    8                            NEXT_AVAILABLE$ -> BLOCK.SIZE = BLOCKSIZE ;
      771    11718    9                            DO TEMP_UBIN = O2COM.WORK_STOR_BLKNUM + 2 TO COMCOM.BLOCKC
             11718                                     ;
      772    11719    9                              NEXT_AVAILABLE$ = NEXT_AVAILABLE$ -> BLOCK.NEXT ;
      773    11720    9                            END ;
      774    11721    8                            NEXT_AVAILABLE$ -> BLOCK.NEXT = ST$ ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:28   
      775    11722    8                            NEXT_AVAILABLE$ = ST$ ;
      776    11723    8                            O2COM.NEXT_AVAILABLE$ = ST$ ;
      777    11724    8                            O2COM.WORK_STOR_BLKNUM = COMCOM.BLOCKC ;
      778    11725    8                            LAST_COUNT = COMCOM.BLOCKC ;
      779    11726    8                            SYM$ -> VARIABLE.COUNT = COMCOM.BLOCKC ;
      780    11727    8                            SYM$->VARIABLE.SA = 0 ;
      781    11728    8                            REDEF_NEXT_AVAIL = 0 ;
      782    11729    8                            BLOCKSIZE = 0 ;
      783    11730    8                            NEXT_AVAILABLE$ -> BLOCK.SIZE = RECSIZE ;
      784    11731    8                            IF RECSIZE = %#256K THEN
      785    11732    8                              NEXT_AVAILABLE$ -> BLOCK.B.SIZE_256K = TRUE ;
      786    11733    8                            EXIT BLOCK_OVERFLOW ; /* Recovery done */
      787    11734    8                          END ; /* BLOCKSIZE ~= 0 */
      788    11735    8                          ELSE DO ; /* Not error after all */
      789    11736    8                            NEXT_AVAILABLE$ -> BLOCK.B.SIZE_256K = TRUE ;
      790    11737    8                            EXIT BLOCK_OVERFLOW ;
      791    11738    8                          END ;
      792    11739    7                        END ;
      793    11740    7                      ELSE DO ;
      794    11741    7                        IF BLOCKSIZE + RECSIZE = %#256K
      795    11742    7                          THEN NEXT_AVAILABLE$->BLOCK.B.SIZE_256K = TRUE;
      796    11743    7                          ELSE CALL Z8AE$ERROR (%E$BLOCK_DATA_LIMIT,,,
      797    11744    7                                                NEXT_AVAILABLE$->BLOCK.DNT$) ;
      798    11745        /*E*
      799    11746              ERROR:  BLOCK_DATA_LIMIT
      800    11747         MESSAGE:  !0 data limit of 256K has been exceeded, code generation has been suspend
             11747        ed.
      801    11748        DESCRIPTION:  This error is produced when the storage counter for an
      802    11749                      external data block goes past 256K words. The counters are
      803    11750                      reset to zero.
      804    11751        */
      805    11752    7                      END ;
      806    11753    6                      COMCOM.DATA_LIMIT_ERROR_FLAGGED = TRUE ;
      807    11754    6                      COMCOM.OB.CHECK = '1'B ; /* Avoid Phase 5 Error */
      808    11755    6                    END ;
      809    11756
      810    11757    5                  SYM$->VARIABLE.SA = 0 ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:29   
      811    11758    5                  NEXT_AVAILABLE$->BLOCK.SIZE = 0 ;
      812    11759    5                END ; /* BLOCK_OVERFLOW */
      813    11760    5                ELSE DO ;
      814    11761    5                  SYM$->VARIABLE.SA = BLOCKSIZE ;
      815    11762    5                  BLOCKSIZE = BLOCKSIZE + RECSIZE ;
      816    11763    5                  NEXT_AVAILABLE$->BLOCK.SIZE = BLOCKSIZE ;
      817    11764    5                END ;
      818    11765        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:30   
      819    11766    4              IF SYM$->VARIABLE.B.REDEF_OBJ THEN
      820    11767    5                DO ;
      821    11768                       /* Set the REDEF SUB item's count as the same as the REDEF OBJ  */
      822    11769
      823    11770    5                  SEARCH_ST$ = QUAL$ -> QLT.BROTHER -> QLT.ST$;
      824    11771    6                  DO UNTIL NOT (SEARCH_ST$ -> VARIABLE.B.REDEF_SUB);
      825    11772    6                    SEARCH_ST$ -> VARIABLE.COUNT = SYM$ -> VARIABLE.COUNT;
      826    11773    6                    SEARCH_ST$ = SEARCH_ST$ -> VARIABLE.QLT$ -> QLT.BROTHER -> QLT.ST$;
      827    11774    6                  END; /* Do until */
      828    11775    5                 END; /* REDEF_OBJ */
      829    11776    4                END ; /* Not REDEF_SUB */
      830    11777
      831    11778        /*V*
      832    11779            GROUP_SA_UPDATE -- If the item is a group data item then Z8FC$S_A_UPDATE is
      833    11780                               called to assign the word locations of the internal items.
      834    11781        */
      835    11782
      836    11783    3              IF NOT QUAL$->QLT.ST$->VARIABLE.B.ELEMENTARY THEN
      837    11784    4                DO ;
      838    11785    4                  O2COM.POPS_SA = SYM$->VARIABLE.SA ;
      839    11786    4                  IF SYM$->ST.ID ~= %FD AND SYM$->ST.ID ~= %SD THEN
      840    11787                          /* Alas! LINAGE is illegal for SD, but a SORT file can
      841    11788                             be linked with a sequential file with LINAGE. */
      842    11789    4                    CALL Z8FC$S_A_UPDATE (QUAL$) ;
      843    11790    5                  ELSE DO ;
      844    11791    5                    LINAGE_ADDR = SYM$->VARIABLE.SA + RECSIZE ;
      845    11792    5                    LTS$ = SAVE_LTS$ ;
      846    11793    5                    IF LTS$->FILE_LTS.SAME_RECORD.LINK = ADDR (NIL)
      847    11794    5                      THEN CALL Z8FC$S_A_UPDATE (QUAL$) ;
      848    11795    6                      ELSE DO UNTIL LTS$ = ADDR (NIL) ;
      849    11796    6                        ST$ = LTS$->FILE_LTS.ST$ ;
      850    11797    6                        QLT$ = ST$->FD.QLT$ ;
      851    11798    6                        ST$->FD.SA = O2COM.POPS_SA ;
      852    11799    6                        CALL Z8FC$S_A_UPDATE (QLT$) ;
      853    11800    7                        IF LTS$->FILE_LTS.LINAGE_COUNTER$ ~= ADDR (NIL) THEN DO ;
      854    11801        /*KLUDGE*
      855    11802            SET_LINAGE_ADDRESS -- Each LINAGE COUNTER needs its own address, and all
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:31   
      856    11803                                  must appear after the end of the largest FD of those
      857    11804                                  that are overlayed thru the SAME RECORD clause.
      858    11805        */
      859    11806    7                          LTS$->FILE_LTS.LINAGE_COUNTER$->VARIABLE.SA =
      860    11807    7                              LINAGE_ADDR ;
      861    11808    7                          LINAGE_ADDR = LINAGE_ADDR + 1 ;
      862    11809    7                        END ;
      863    11810    6                        LTS$ = LTS$->FILE_LTS.SAME_RECORD.LINK ;
      864    11811    6                      END ;
      865    11812    5                  END ;
      866    11813    4                END ;
      867    11814
      868    11815    3            END CASE_STMT ;
      869    11816
      870    11817    2            QUAL$ = QUAL$->QLT.BROTHER ;
      871    11818
      872    11819    2          END ;
      873    11820
      874    11821    1          NEXT_AVAILABLE$ = COMCOM.BLOCK$;
      875    11822    2          DO WHILE NEXT_AVAILABLE$ ~= ADDR(NIL);
      876    11823    2            IF SUBSTR(NEXT_AVAILABLE$->BLOCK.DNT$->DNT.TEXT.NAME,0,4) = 'BLCK' THEN
      877    11824    2              NEXT_AVAILABLE$->BLOCK.SIZE = MAXIMUM (
      878    11825    2                  NEXT_AVAILABLE$->BLOCK.SIZE,NEXT_AVAILABLE$->BLOCK.SIZE1);
      879    11826    2            NEXT_AVAILABLE$ = NEXT_AVAILABLE$->BLOCK.NEXT;
      880    11827    2          END;
      881    11828        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:32   
      882    11829        /*V*
      883    11830            STORAGE_ALLOCATION_WRAPUP -- ESCAPE_INIT is called to create the escape
      884    11831                                         triads for all the BASE items.
      885    11832        */
      886    11833
      887    11834    1          CALL ESCAPE_INIT ;
      888    11835    1   END Z8FA$STORAGE_ALLOCATOR ;

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:33   
--  Include file information  --

   Z8A_SRCH.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   Z8F_O2COM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_TYPES.:Z8A6TOU  is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_QLT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DNT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8FA$STORAGE_ALLOCATOR.

   Procedure Z8FA$STORAGE_ALLOCATOR requires 1467 words for executable code.
   Procedure Z8FA$STORAGE_ALLOCATOR is declared NOAUTO and requires 140 words of local(STATIC) storage.

    No errors detected in file Z8FA.:Z8A6TSI    .

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:34   

 Object Unit name= Z8FA$STORAGE_ALLOCATOR                     File name= Z8FA.:Z8A6TOU
 UTS= AUG 09 '97 13:02:14.76 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none   140    214  Z8FA$STORAGE_ALLOCATOR
    1  LblCom even  none     1      1  ITERATION
    2  LblCom even  none     1      1  DNT$
    3  LblCom even  none     5      5  DNT_
    4  LblCom even  none     1      1  DNT_BUCKET_NUMBER
    5  LblCom even  none     1      1  DNT_OF_1$
    6  LblCom even  none     1      1  QLT$
    7  LblCom even  none     1      1  PREV_01_QLT$
    8  LblCom even  none     5      5  QLT_
    9  LblCom even  none     1      1  ST$
   10  LblCom even  none     5      5  ST_
   11  LblCom even  none     1      1  LTS$
   12  LblCom even  none     5      5  LTS_
   13  LblCom even  none    12     14  O2COM
   14  LblCom even  none     1      1  ETT$
   15  LblCom even  none     1      1  HEAD_ETT$
   16  LblCom even  none   512   1000  ETT_BUCKETS
   17  LblCom even  none     5      5  ETT_
   18  LblCom even  none     3      3  SRCH
   19  RoData even  UTS      1      1  Z8FA$STORAGE_ALLOCATOR
   20   Proc  even  none  1467   2673  Z8FA$STORAGE_ALLOCATOR
   21  RoData even  none    32     40  Z8FA$STORAGE_ALLOCATOR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    20      0   yes            yes      Std        0  Z8FA$STORAGE_ALLOCATOR
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:35   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std      12 Z8AE$ERROR
         yes           Std       1 Z8FC$S_A_UPDATE
         yes           Std       1 Z8AR$RESERVER
         yes           Std       1 Z8AS$SR_ETT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    LTS_STEP                              COMCOM

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:36   


        1        1        /*M*  Z8FA$STORAGE_ALLOCATOR  Allocates storage for 01's and 77's.   */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*
        8        8               NAME:  Z8FA$STORAGE_ALLOCATOR
        9        9             AUTHOR:  Greg Myers
       10       10            PURPOSE:  Allocate storage for 01's and 77's if they are referenced
       11       11                      or defined and create escape triads.
       12       12        */
       13       13
       14       14        /*D*
       15       15               NAME:  Z8FA$STORAGE_ALLOCATOR
       16       16               CALL:  CALL Z8FA$STORAGE_ALLOCATOR;
       17       17          INTERFACE:  This procedure calls Z8FC$S_A_UPDATE(QUAL$) and
       18       18                      calls Z8AS$SR_ETT to create escape triads.
       19       19                      It calls Z8AE$ERROR to report errors.
       20       20
       21       21              INPUT:  The QLT, ETT$, ST, COMCOM.BLOCK$, and LTS are accessed.
       22       22             OUTPUT:  ST.SA       Storage address
       23       23                      ST.SIZE     Block size
       24       24            SCRATCH:  LTS$                   LTS pointer
       25       25                      COMCOM.CURRENT.LINE    For error messages
       26       26                      COMCOM.CURRENT.COLUMN  For error messages
       27       27
       28       28        DESCRIPTION:  This procedure uses a loop to step thru the 01's and 77's by
       29       29                      using the QLT.BROTHER pointer.  The item is set to a double word
       30       30                      boundary or word boundary depending on its type (all GDI's are
       31       31                      set to double word). If the item is a group item, Z8FC$S_A_UPDATE
       32       32                      is called to set the SA fields of the interior members of the
       33       33                      structure.  The storage counter is incremented by the size of the
       34       34                      variable and the next item is then processed.  If the storage
       35       35                      counter goes beyond the data limit, an error message is produced
       36       36                      and the counter is reset.  When an external item is encountered,
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:37   
       37       37                      the items are stored in the next available block and the block
       38       38                      size is stored. These blocks are also checked to make sure they
       39       39                      do not go over the data limit.
       40       40        */
       41       41        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:38   
       42       42        Z8FA$STORAGE_ALLOCATOR: PROC  NOAUTO ;

     42 20 000000   000000 741200 0     Z8FA$STORAG* STX1  ! 0
        20 000001   000703 710000 20                 TRA     s:11113

       43       43        %EQU PHASE = 2 ;
       44       44        %INCLUDE Z8A_DEFC ;
       45      112        %INCLUDE Z9A_FLAGS;
       46      126        %INCLUDE Z8A_SUPP_MAC ;
       47     2526        %INCLUDE Z8A_DNT;
       48     2747        %INCLUDE Z8A_QLT ;
       49     2853        %INCLUDE Z8A_ST ;
       50     6512        %INCLUDE Z8A_TYPES ;
       51     6686        %INCLUDE Z8A_LTS ;
       52     8763        %INCLUDE Z8A_COMCOM ;
       53     9413        %INCLUDE Z8F_O2COM ;
       54     9523        %INCLUDE Z8A_ERR_NUMS ;
       55    10287        %INCLUDE Z8A_ETT ;
       56    10588        %INCLUDE Z8A_SRCH ;
       57    10637
       58    10638        /*B*
       59    10639            QUAL$ -- Used as a pointer to the QUAL entry in the QLT.
       60    10640        */
       61    10641
       62    10642    1   DCL   Z8AE$ERROR     ENTRY (12) ; /* ERROR STATEMENTS             */
       63    10643    1   DCL   Z8AS$SR_ETT    ENTRY (1) ; /* Search triad onto the ETT */
       64    10644    1   DCL   Z8FC$S_A_UPDATE ENTRY (1) ; /* Update SAs of 02s, 03s, etc. */
       65    10645
       66    10646    1   DCL   SYM$           PTR STATIC ;
       67    10647    1   DCL   CURRENT_PROC$  PTR ; /* PROC_ item pointer for current ST item */
       68    10648    1   DCL   QUAL$          PTR STATIC ;
       69    10649    1   DCL   LTS$$          PTR ;
       70    10650    1   DCL   LONG$          PTR ; /* PTR to a LONG item in the LTS */
       71    10651    1   DCL   SAVE_LTS$      PTR ; /* LTS pointer for FD */
       72    10652    1   DCL   LAST_COUNT     UBIN ; /* Sequence number of last data block */
       73    10653    1   DCL   NEXT_AVAILABLE$ PTR ; /* PTR to info on last data block */
       74    10654    1   DCL   BLKNAME        CHAR (28) ; /* Name of WORKING-STORAGE continuation segment */
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:39   
       75    10655    1   DCL   BLOCKSIZE      UBIN ; /* Full word copy of NEXT_AVAILABLE$->BLOCK.SIZE */
       76    10656    1   DCL   REDEF_NEXT_AVAIL UBIN WORD STATIC ;  /* Starting storage loc for redef's */
       77    10657    1   DCL   REDEF_MAX_SIZE UBIN WORD STATIC ;    /* Maximum size of vars in redef    */
       78    10658    1   DCL   RECSIZE        UBIN ; /* Size of FD items with SAME RECORD clause */
       79    10659    1   DCL   LINAGE_NUM     UBIN ; /* In SAME RECORD group how many have LINAGE */
       80    10660    1   DCL   LINAGE_ADDR    UBIN ; /* FD.SA for a LINAGE COUNTER */
       81    10661    1   DCL   SEARCH_ST$     PTR       STATIC ; /* Ptr used to search thru redef's   */
       82    10662    1   DCL   TEMP_UBIN      UBIN ;
       83    10663    1   DCL   TEMP_CHAR      CHAR (4) ;
       84    10664    1   DCL   TEMP$          PTR ;
       85    10665    1   DCL   SEGMENT$$  (0:99)  PTR;
       86    10666        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:40   
       87    10667        /*E*
       88    10668              ERROR:  REDEF_SUB_VAR_OCCUR
       89    10669            MESSAGE:  A data item being redefined may not contain a variable occurs
       90    10670                      clause.
       91    10671        DESCRIPTION:  This message is flagged when a data item contains a variable
       92    10672                      occurs clause or if it's a group item then no items inside may
       93    10673                      contain a variable occurs clause.  A variable occurs clause
       94    10674                      is 'INDEXED BY data-name DEPENDING ON data-name'.
       95    10675        */
       96    10676
       97    10677        /*E*
       98    10678              ERROR:  REDEF_OBJ_VAR_OCCUR
       99    10679            MESSAGE:  A data item with a redefines clause may not contain a variable
      100    10680                      occurs clause.
      101    10681        DESCRIPTION:  This message is flagged when a data item contains a variable
      102    10682                      occurs clause or if it's a group item then no items inside may
      103    10683                      contain a variable occurs clause.  A variable occurs clause
      104    10684                      is 'INDEXED BY data-name DEPENDING ON data-name'.
      105    10685        */
      106    10686        /*V*
      107    10687            VARIABLE_OCCURS_CHECK -- Neither an object nor a subject of a redefines
      108    10688                                     clause may contain a variable occurs clause,
      109    10689                                     i.e. 'INDEXED BY A DEPENDING ON B'. This macro
      110    10690                                     checks if the item contains a variable occurs
      111    10691                                     clause and calls Z8AE$ERROR to flag the error.
      112    10692        */
      113    10693
      114    10694        %MACRO VARIABLE_OCCURS_CHECK(@ERROR_NO=%E$REDEF_OBJ_VAR_OCCUR) ;
      115    10695             DO ;
      116    10696               IF SYM$->VARIABLE.B.OCCURS_DEPENDING THEN DO ;
      117    10697                 COMCOM.CURRENT.LINE = SYM$->VARIABLE.LINE_NO ;
      118    10698                 CALL Z8AE$ERROR(@ERROR_NO) ;
      119    10699               END ;
      120    10700             END ;
      121    10701        %MEND ;
      122    10702
      123    10703
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:41   
      124    10704        %MACRO GET_MAIN_BASE_LTS;
      125    10705          DO;
      126    10706            %GET_LTS (@ID = %BASE_LTS,
      127    10707                      @ST$ = QUAL$ -> QLT.ST$,
      128    10708                      @RETURN$ = LTS$$);
      129    10709
      130    10710            IF QUAL$ -> QLT.ST$ -> SCALAR.B.REDEF_SUB THEN
      131    10711              LTS$$ = LTS$$ -> BASE_LTS.POINTER$ -> SCALAR.LTS$;
      132    10712
      133    10713          END;
      134    10714        %MEND;
      135    10715
      136    10716        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:42   
      137    10717    1   ESCAPE_INIT:PROC ;

  10717 20 000002   000176 741200 0     ESCAPE_INIT  STX1  ! SEGMENT$$+100
        20 000003   000076 710000 20                 TRA     s:10813

      138    10718
      139    10719    2   DCL BASE$       PTR ; /* Used to loop thru BASE chain */
      140    10720    2   DCL NEXT_BASE$  PTR ; /* Ptr to next BASE item in list */
      141    10721    2   DCL ESCAPE_ZERO PTR ; /* Ptr to zero block ESCAPE triad */
      142    10722    2   DCL DONE_FLAG   BOOLEAN ;
      143    10723    2   DCL DONE_FLAG1  BOOLEAN ;
      144    10724
      145    10725
      146    10726                                                      /*#34918*/
      147    10727    2          ARGP_INIT : PROC;

  10727 20 000004   000204 741200 0     ARGP_INIT    STX1  ! DONE_FLAG1+1

      148    10728
      149    10729                           /* create or assign an %ARGP ETT item for the */
      150    10730                           /* Linkage Section item no matter if it is on */
      151    10731                           /* the USING list or not. Phase 1 already     */
      152    10732                           /* identified the sequence number for the     */
      153    10733                           /* %ARGP item. Also for a redefines subject   */
      154    10734                           /* item, assign its redefines obj's ARGP      */
      155    10735
      156    10736                         %GET_MAIN_BASE_LTS;

  10742 20 000005   000003 470400 0                  LDP0    QUAL$
        20 000006   000004 471500                    LDP1    4,,PR0
        20 000007   100005 236100                    LDQ     5,,PR1
        20 000010   000000 116000 21                 CMPQ    0
        20 000011   000021 600000 20                 TZE     s:10776
        20 000012   100005 473500                    LDP3    5,,PR1
        20 000013   300000 220100                    LDX0    0,,PR3
        20 000014   001105 100003                    CMPX0   581,DU
        20 000015   000021 601000 20                 TNZ     s:10776
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:43   

  10770 20 000016   300010 236100                    LDQ     8,,PR3
        20 000017   000004 756000 0                  STQ     LTS$$

  10774 20 000020   000033 710000 20                 TRA     s:10783

  10776 20 000021   000000 116000 21                 CMPQ    0
        20 000022   000031 600000 20                 TZE     s:10780
        20 000023   100005 473500                    LDP3    5,,PR1
        20 000024   300000 220100                    LDX0    0,,PR3
        20 000025   001066 100003                    CMPX0   566,DU
        20 000026   000031 601000 20                 TNZ     s:10780

  10778 20 000027   000004 756000 0                  STQ     LTS$$
        20 000030   000033 710000 20                 TRA     s:10783

  10780 20 000031   000000 236000 21                 LDQ     0
        20 000032   000004 756000 0                  STQ     LTS$$

  10783 20 000033   100003 430100                    FSZN    3,,PR1
        20 000034   000041 605000 20                 TPL     s:10788

  10784 20 000035   000004 473400 0                  LDP3    LTS$$
        20 000036   300002 474500                    LDP4    2,,PR3
        20 000037   400005 236100                    LDQ     5,,PR4
        20 000040   000004 756000 0                  STQ     LTS$$

      157    10787
      158    10788    3                    IF LTS$$ -> BASE_LTS.ARGP$ ~= ADDR(NIL) AND

  10788 20 000041   000004 473400 0                  LDP3    LTS$$
        20 000042   300007 236100                    LDQ     7,,PR3
        20 000043   000000 116000 21                 CMPQ    0
        20 000044   000052 600000 20                 TZE     s:10793
        20 000045   000002 720000 18                 LXL0    SRCH+2
        20 000046   000052 601000 20                 TNZ     s:10793

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:44   
      159    10789    3                      SRCH.ESCINF.BLK# = 0 THEN
      160    10790    3                      BASE$ -> ETT.ROP = LTS$$ -> BASE_LTS.ARGP$;

  10790 20 000047   000177 474400 0                  LDP4    BASE$
        20 000050   400002 756100                    STQ     2,,PR4
        20 000051   000074 710000 20                 TRA     s:10800

      161    10791    3                    ELSE
      162    10792    4                      DO;

      163    10793    4                        SRCH.ESCINF.ARG# = LTS$$ -> BASE_LTS.SEQ# - 1;

  10793 20 000052   300003 720100                    LXL0    3,,PR3
        20 000053   777777 622010                    EAX2    -1,X0
        20 000054   000002 742000 18                 STX2    SRCH+2

      164    10794    4                        SRCH.LOP = LTS$$ -> BASE_LTS.ST$;

  10794 20 000055   300001 236100                    LDQ     1,,PR3
        20 000056   000001 756000 18                 STQ     SRCH+1

      165    10795    4                        CALL Z8AS$SR_ETT (BASE$ -> ETT.ROP);

  10795 20 000057   000177 236000 0                  LDQ     BASE$
        20 000060   000002 036003                    ADLQ    2,DU
        20 000061   000210 756000 0                  STQ     @RECSIZE+1
        20 000062   000210 630400 0                  EPPR0   @RECSIZE+1
        20 000063   000001 631400 21                 EPPR1   1
        20 000064   000000 701000 xent               TSX1    Z8AS$SR_ETT
        20 000065   000000 011000                    NOP     0

      166    10796    4                        IF SRCH.ESCINF.BLK# = 0 THEN

  10796 20 000066   000002 720000 18                 LXL0    SRCH+2
        20 000067   000074 601000 20                 TNZ     s:10800

      167    10797    4                          LTS$$ -> BASE_LTS.ARGP$ = BASE$ -> ETT.ROP;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:45   

  10797 20 000070   000177 470400 0                  LDP0    BASE$
        20 000071   000002 236100                    LDQ     2,,PR0
        20 000072   000004 471400 0                  LDP1    LTS$$
        20 000073   100007 756100                    STQ     7,,PR1

      168    10798    4                      END;

      169    10799
      170    10800    3          END ARGP_INIT;

  10800 20 000074   000204 221200 0                  LDX1  ! DONE_FLAG1+1
        20 000075   000001 702211                    TSX2  ! 1,X1

      171    10801        %EJECT;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:46   
      172    10802        /*V*
      173    10803            ESCAPE_INITIALIZATION -- Create a zero escape triad because most data items
      174    10804                                     will be in the first 16K of storage.  This will
      175    10805                                     cut down on the time needed to create the escapes
      176    10806                                     as the base item can be checked to see if it is
      177    10807                                     block zero instead of calling Z8AS$SR_ETT every
      178    10808                                     time.  Also assign the loop pointer so it equals
      179    10809                                     the top of the base chain.  Escapes are
      180    10810                                     created only if they are needed.
      181    10811        */
      182    10812
      183    10813    2          SRCH.ID = %ESC ;

  10813 20 000076   000017 235007                    LDA     15,DL
        20 000077   000000 755000 18                 STA     SRCH

      184    10814    2          SRCH.LOP = COMCOM.BLOCK$ ;

  10814 20 000100   000145 236000 xsym               LDQ     COMCOM+101
        20 000101   000001 756000 18                 STQ     SRCH+1

      185    10815    2          BASE$ = COMCOM.H_BASE ;

  10815 20 000102   000323 236000 xsym               LDQ     COMCOM+211
        20 000103   000177 756000 0                  STQ     BASE$

      186    10816
      187    10817    2          IF BASE$ ~= ADDR(NIL) THEN

  10817 20 000104   000000 116000 21                 CMPQ    0
        20 000105   000456 600000 20                 TZE     s:10973

      188    10818    3            DO ;

      189    10819    3              SRCH.ROPCON = 0 ;

  10819 20 000106   000002 450000 18                 STZ     SRCH+2
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:47   

      190    10820    3              CALL Z8AS$SR_ETT (ESCAPE_ZERO) ;

  10820 20 000107   000002 630400 21                 EPPR0   2
        20 000110   000001 631400 21                 EPPR1   1
        20 000111   000000 701000 xent               TSX1    Z8AS$SR_ETT
        20 000112   000000 011000                    NOP     0

      191    10821        /*V*
      192    10822            CHECK_ESCAPES -- Step thru the base items and check if they are in
      193    10823                             block zero as this escape is already created.  If not
      194    10824                             then call Z8AS$SR_ETT to search the ETT to see if
      195    10825                             the escape has been created.  If it has then assign
      196    10826                             the BASE's right operand the pointer to that escape
      197    10827                             otherwise create the escape and assign the pointer.
      198    10828        */
      199    10829    4              DO WHILE (BASE$ ~= ADDR(NIL)) ;

  10829 20 000113   000451 710000 20                 TRA     s:10962

      200    10830    4                NEXT_BASE$ = BASE$->ETT.ROP ;

  10830 20 000114   000177 470400 0                  LDP0    BASE$
        20 000115   000002 236100                    LDQ     2,,PR0
        20 000116   000200 756000 0                  STQ     NEXT_BASE$

      201    10831    4                SRCH.ESCINF.BLK# = BASE$->ETT.LOP->VARIABLE.SA / %#16K ;

  10831 20 000117   000001 471500                    LDP1    1,,PR0
        20 000120   100001 236100                    LDQ     1,,PR1
        20 000121   000022 772000                    QRL     18
        20 000122   000016 772000                    QRL     14
        20 000123   000000 620006                    EAX0    0,QL
        20 000124   000002 440000 18                 SXL0    SRCH+2

      202    10832
      203    10833    4                IF BASE$->ETT.LOP->ST.ID ~= %PARA AND
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:48   

  10833 20 000125   000001 471500                    LDP1    1,,PR0
        20 000126   100000 221100                    LDX1    0,,PR1
        20 000127   000771 101003                    CMPX1   505,DU
        20 000130   000335 600000 20                 TZE     s:10925
        20 000131   000770 101003                    CMPX1   504,DU
        20 000132   000335 600000 20                 TZE     s:10925
        20 000133   100003 236100                    LDQ     3,,PR1
        20 000134   000002 316003                    CANQ    2,DU
        20 000135   000335 600000 20                 TZE     s:10925

      204    10834    4                    BASE$->ETT.LOP->ST.ID ~= %SECTION AND
      205    10835    4                    BASE$->ETT.LOP->VARIABLE.B.LINKAGE THEN
      206    10836                       /* PARA and SECTION are formatted differently,
      207    10837                          no LINKAGE bit. */
      208    10838    5   PROCESS_LINKAGE: DO ; /* Variable in LINKAGE SECTION; create ARGP, not ESC */

  10838 20 000136                       PROCESS_LIN* null
      209    10839
      210    10840    5                  IF BASE$ -> ETT.LOP -> VARIABLE.B.COMPILER_CREATED AND

  10840 20 000136   100000 316003                    CANQ    32768,DU
        20 000137   000146 600000 20                 TZE     s:10850
        20 000140   100002 222100                    LDX2    2,,PR1
        20 000141   000022 102003                    CMPX2   18,DU
        20 000142   000146 601000 20                 TNZ     s:10850

      211    10841    5                    BASE$ -> ETT.LOP -> VARIABLE.TYPE = %TYP THEN
      212    10842    6                    DO;

      213    10843                               /* This must be a base pointer, we need  */
      214    10844                               /* to create an %AUTO ETT for it.        */
      215    10845
      216    10846    6                      BASE$ -> ETT.ROP = COMCOM.AUTO$;

  10846 20 000143   000555 236000 xsym               LDQ     COMCOM+365
        20 000144   000002 756100                    STQ     2,,PR0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:49   

      217    10847    6                      EXIT PROCESS_LINKAGE;

  10847 20 000145   000334 710000 20                 TRA     s:10922

      218    10848    6                    END;
      219    10849
      220    10850    5                  SRCH.ID = %ARGP ;

  10850 20 000146   000016 235007                    LDA     14,DL
        20 000147   000000 755000 18                 STA     SRCH

      221    10851    5                  QUAL$ = BASE$->ETT.LOP->VARIABLE.QLT$ ;

  10851 20 000150   100007 236100                    LDQ     7,,PR1
        20 000151   000003 756000 0                  STQ     QUAL$

      222    10852    6                  DO WHILE QUAL$->QLT.LEVEL_NO > 1 ;

  10852 20 000152   000003 471400 0                  LDP1    QUAL$
        20 000153   100000 236100                    LDQ     0,,PR1
        20 000154   000777 376007                    ANQ     511,DL
        20 000155   000002 116007                    CMPQ    2,DL
        20 000156   000167 602000 20                 TNC     s:10855

      223    10853    6                    QUAL$ = QUAL$->QLT.FATHER ;

  10853 20 000157   000003 470400 0                  LDP0    QUAL$
        20 000160   000001 236100                    LDQ     1,,PR0
        20 000161   000003 756000 0                  STQ     QUAL$

      224    10854    6                  END ;

  10854 20 000162   000003 470400 0                  LDP0    QUAL$
        20 000163   000000 236100                    LDQ     0,,PR0
        20 000164   000777 376007                    ANQ     511,DL
        20 000165   000002 116007                    CMPQ    2,DL
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:50   
        20 000166   000157 603000 20                 TRC     s:10853

      225    10855    5                  LTS$ = BASE$->ETT.LOP->VARIABLE.PROC$->PROC_.PROC_DEF$->

  10855 20 000167   000177 470400 0                  LDP0    BASE$
        20 000170   000001 471500                    LDP1    1,,PR0
        20 000171   100011 473500                    LDP3    9,,PR1
        20 000172   300006 474500                    LDP4    6,,PR3
        20 000173   400005 236100                    LDQ     5,,PR4
        20 000174   000000 756000 11                 STQ     LTS$

      226    10856    5                         SYMDEF_.ARGLIST$ ;
      227    10857    6                  IF LTS$ = ADDR (NIL) THEN DO ;

  10857 20 000175   000000 116000 21                 CMPQ    0
        20 000176   000220 601000 20                 TNZ     s:10880

      228    10858    6                    IF COMCOM.OB.FIPS.LEVEL >= %HIGH_LEV OR

  10858 20 000177   000036 720000 xsym               LXL0    COMCOM+30
        20 000200   000203 605400 20                 TPNZ    s:10861
        20 000201   000015 234000 xsym               SZN     COMCOM+13
        20 000202   000213 605000 20                 TPL     s:10874

      229    10859    6                      COMCOM.OB.COBOL_74 THEN
      230    10860    7                      DO;

      231    10861    7                        COMCOM.CURRENT.LINE = BASE$->ETT.LOP->VARIABLE.LINE_NO ;

  10861 20 000203   100002 236100                    LDQ     2,,PR1
        20 000204   777777 376007                    ANQ     -1,DL
        20 000205   000133 756000 xsym               STQ     COMCOM+91

      232    10862    7                        COMCOM.CURRENT.COLUMN = 0 ;

  10862 20 000206   000134 450000 xsym               STZ     COMCOM+92

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:51   
      233    10863    7                        CALL Z8AE$ERROR (%E$NOT_IN_USING_LIST) ;

  10863 20 000207   000004 630400 21                 EPPR0   4
        20 000210   000001 631400 21                 EPPR1   1
        20 000211   000000 701000 xent               TSX1    Z8AE$ERROR
        20 000212   000000 011000                    NOP     0

      234    10864    7                      END;

      235    10865        /*E*
      236    10866              ERROR: NOT_IN_USING_LIST  -- ANSI or COBOL_74
      237    10867            MESSAGE: Variables appearing in the LINKAGE SECTION must appear in the
      238    10868                     PROCEDURE DIVISION USING list.
      239    10869        DESCRIPTION: A variable is defined in the LINKAGE SECTION, but it (or the
      240    10870                     structure that contains it) is not in the variables list in the
      241    10871                     USING clause on the PROCEDURE DIVISION statement.
      242    10872        */
      243    10873
      244    10874    6                    CALL ARGP_INIT;

  10874 20 000213   000004 701000 20                 TSX1    ARGP_INIT
        20 000214   000000 011000                    NOP     0

      245    10875
      246    10876    6                    SRCH.ID = %ESC;

  10876 20 000215   000017 235007                    LDA     15,DL
        20 000216   000000 755000 18                 STA     SRCH

      247    10877    6                    EXIT PROCESS_LINKAGE ;

  10877 20 000217   000334 710000 20                 TRA     s:10922

      248    10878    6                  END ;
      249    10879
      250    10880    5                  TEMP_UBIN = 0;

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:52   
  10880 20 000220   000027 450000 0                  STZ     TEMP_UBIN

      251    10881                       /* See if variable (or 01 level) is in USING list */
      252    10882    5                  DONE_FLAG = FALSE ; /* No match found yet in ARGLIST */

  10882 20 000221   000202 450000 0                  STZ     DONE_FLAG

      253    10883    6                  DO UNTIL DONE_FLAG ;

      254    10884    6                    SYM$ = LTS$->ARGLIST.ARG$ (TEMP_UBIN) ;

  10884 20 000222   000000 470400 11                 LDP0    LTS$
        20 000223   000027 720000 0                  LXL0    TEMP_UBIN
        20 000224   000001 236110                    LDQ     1,X0,PR0
        20 000225   000001 756000 0                  STQ     SYM$

      255    10885    6                    DONE_FLAG1 = FALSE ; /* None found in REDEFINES chain */

  10885 20 000226   000203 450000 0                  STZ     DONE_FLAG1

      256    10886    6                    IF SYM$ = QUAL$->QLT.ST$ THEN DONE_FLAG = TRUE ;

  10886 20 000227   000003 471400 0                  LDP1    QUAL$
        20 000230   100004 116100                    CMPQ    4,,PR1
        20 000231   000235 601000 20                 TNZ     s:10888

  10886 20 000232   400000 236003                    LDQ     -131072,DU
        20 000233   000202 756000 0                  STQ     DONE_FLAG
        20 000234   000273 710000 20                 TRA     s:10903

      257    10887                                                  /* Match in ARGLIST */
      258    10888    7                    ELSE IF SYM$->VARIABLE.B.REDEF_OBJ THEN DO UNTIL DONE_FLAG1 ;

  10888 20 000235   000001 473400 0                  LDP3    SYM$
        20 000236   300003 236100                    LDQ     3,,PR3
        20 000237   000400 316003                    CANQ    256,DU
        20 000240   000270 600000 20                 TZE     s:10902
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:53   

      259    10889                           /* Search REDEFINES chain */
      260    10890    7                      SYM$ = SYM$->VARIABLE.QLT$->QLT.BROTHER->QLT.ST$ ;

  10890 20 000241   000001 470400 0                  LDP0    SYM$
        20 000242   000007 471500                    LDP1    7,,PR0
        20 000243   100002 473500                    LDP3    2,,PR1
        20 000244   300004 236100                    LDQ     4,,PR3
        20 000245   000001 756000 0                  STQ     SYM$

      261    10891    8                      IF SYM$->VARIABLE.B.REDEF_SUB THEN DO ;

  10891 20 000246   000001 470400 0                  LDP0    SYM$
        20 000247   000003 430100                    FSZN    3,,PR0
        20 000250   000260 605000 20                 TPL     s:10898

      262    10892    9                        IF SYM$ = QUAL$->QLT.ST$ THEN DO ;

  10892 20 000251   000003 471400 0                  LDP1    QUAL$
        20 000252   100004 116100                    CMPQ    4,,PR1
        20 000253   000265 601000 20                 TNZ     s:10901

      263    10893    9                          DONE_FLAG1 = TRUE ; /* Found match among REDEFINES */

  10893 20 000254   400000 236003                    LDQ     -131072,DU
        20 000255   000203 756000 0                  STQ     DONE_FLAG1

      264    10894    9                          DONE_FLAG = TRUE ; /* Found match */

  10894 20 000256   000202 756000 0                  STQ     DONE_FLAG

      265    10895    9                        END ;

      266    10896    8                      END ;

  10896 20 000257   000265 710000 20                 TRA     s:10901

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:54   
      267    10897    8                      ELSE DO ;

      268    10898    8                        TEMP_UBIN = TEMP_UBIN + 1 ;

  10898 20 000260   000027 235000 0                  LDA     TEMP_UBIN
        20 000261   000001 035007                    ADLA    1,DL
        20 000262   000027 755000 0                  STA     TEMP_UBIN

      269    10899    8                        DONE_FLAG1 = TRUE ; /* Done searching REDEFINES,no luck */

  10899 20 000263   400000 236003                    LDQ     -131072,DU
        20 000264   000203 756000 0                  STQ     DONE_FLAG1

      270    10900    8                      END ;

      271    10901    7                    END ;

  10901 20 000265   000203 234000 0                  SZN     DONE_FLAG1
        20 000266   000241 605000 20                 TPL     s:10890
        20 000267   000273 710000 20                 TRA     s:10903

      272    10902    6                    ELSE TEMP_UBIN = TEMP_UBIN + 1 ;

  10902 20 000270   000027 235000 0                  LDA     TEMP_UBIN
        20 000271   000001 035007                    ADLA    1,DL
        20 000272   000027 755000 0                  STA     TEMP_UBIN

      273    10903    7                    IF TEMP_UBIN + 2 > LTS$->ARGLIST.N THEN DO ;

  10903 20 000273   000027 235000 0                  LDA     TEMP_UBIN
        20 000274   000002 035007                    ADLA    2,DL
        20 000275   000210 755000 0                  STA     @RECSIZE+1
        20 000276   000000 470400 11                 LDP0    LTS$
        20 000277   000000 236100                    LDQ     0,,PR0
        20 000300   777777 376007                    ANQ     -1,DL
        20 000301   000210 116000 0                  CMPQ    @RECSIZE+1
        20 000302   000326 603000 20                 TRC     s:10917
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:55   

      274    10904    7                      IF COMCOM.OB.FIPS.LEVEL >= %HIGH_LEV OR

  10904 20 000303   000036 720000 xsym               LXL0    COMCOM+30
        20 000304   000307 605400 20                 TPNZ    s:10907
        20 000305   000015 234000 xsym               SZN     COMCOM+13
        20 000306   000321 605000 20                 TPL     s:10912

      275    10905    7                        COMCOM.OB.COBOL_74 THEN
      276    10906    8                        DO;

      277    10907    8                          COMCOM.CURRENT.LINE = BASE$->ETT.LOP->VARIABLE.LINE_NO ;

  10907 20 000307   000177 471400 0                  LDP1    BASE$
        20 000310   100001 473500                    LDP3    1,,PR1
        20 000311   300002 236100                    LDQ     2,,PR3
        20 000312   777777 376007                    ANQ     -1,DL
        20 000313   000133 756000 xsym               STQ     COMCOM+91

      278    10908    8                          COMCOM.CURRENT.COLUMN = 0 ;

  10908 20 000314   000134 450000 xsym               STZ     COMCOM+92

      279    10909    8                          CALL Z8AE$ERROR (%E$NOT_IN_USING_LIST) ;

  10909 20 000315   000004 630400 21                 EPPR0   4
        20 000316   000001 631400 21                 EPPR1   1
        20 000317   000000 701000 xent               TSX1    Z8AE$ERROR
        20 000320   000000 011000                    NOP     0

      280    10910    8                        END;

      281    10911
      282    10912    7                      CALL ARGP_INIT;

  10912 20 000321   000004 701000 20                 TSX1    ARGP_INIT
        20 000322   000000 011000                    NOP     0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:56   

      283    10913
      284    10914    7                      SRCH.ID = %ESC;

  10914 20 000323   000017 235007                    LDA     15,DL
        20 000324   000000 755000 18                 STA     SRCH

      285    10915    7                      EXIT PROCESS_LINKAGE ;

  10915 20 000325   000334 710000 20                 TRA     s:10922

      286    10916    7                    END ;
      287    10917    6                  END ;

  10917 20 000326   000202 234000 0                  SZN     DONE_FLAG
        20 000327   000222 605000 20                 TPL     s:10884

      288    10918
      289    10919    5                  CALL ARGP_INIT;

  10919 20 000330   000004 701000 20                 TSX1    ARGP_INIT
        20 000331   000000 011000                    NOP     0

      290    10920
      291    10921    5                  SRCH.ID = %ESC;

  10921 20 000332   000017 235007                    LDA     15,DL
        20 000333   000000 755000 18                 STA     SRCH

      292    10922    5                END ;

  10922 20 000334   000447 710000 20                 TRA     s:10961

      293    10923    5                ELSE DO ;

      294    10924
      295    10925    5                  SRCH.ESCINF.ARG# = 0 ; /* Not in LINKAGE SECTION */
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:57   

  10925 20 000335   000000 222003                    LDX2    0,DU
        20 000336   000002 742000 18                 STX2    SRCH+2

      296    10926    5                  IF BASE$->ETT.LOP->VARIABLE.R > 1 THEN /* In .DATA. */

  10926 20 000337   000001 471500                    LDP1    1,,PR0
        20 000340   100000 236100                    LDQ     0,,PR1
        20 000341   777000 376007                    ANQ     -512,DL
        20 000342   002000 116007                    CMPQ    1024,DL
        20 000343   000405 602000 20                 TNC     s:10940

      297    10927    6                    DO ;

      298    10928    6                      IF SRCH.ESCINF.BLK# = 0 AND

  10928 20 000344   000000 100003                    CMPX0   0,DU
        20 000345   000355 601000 20                 TNZ     s:10932
        20 000346   100000 236100                    LDQ     0,,PR1
        20 000347   000777 376007                    ANQ     511,DL
        20 000350   000001 116007                    CMPQ    1,DL
        20 000351   000355 601000 20                 TNZ     s:10932

      299    10929    6                        BASE$->ETT.LOP->VARIABLE.COUNT = 1 THEN
      300    10930    6                          BASE$->ETT.ROP = ESCAPE_ZERO ;

  10930 20 000352   000201 236000 0                  LDQ     ESCAPE_ZERO
        20 000353   000002 756100                    STQ     2,,PR0
        20 000354   000447 710000 20                 TRA     s:10961

      301    10931    7                      ELSE DO ; /* Search and create ETT entry if necessary */

      302    10932    7                        SRCH.LOP = COMCOM.BLOCK$ ;

  10932 20 000355   000145 236000 xsym               LDQ     COMCOM+101
        20 000356   000001 756000 18                 STQ     SRCH+1

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:58   
      303    10933    8                        DO TEMP_UBIN = BASE$->ETT.LOP->VARIABLE.COUNT DOWNTO 2 ;

  10933 20 000357   000001 471500                    LDP1    1,,PR0
        20 000360   100000 236100                    LDQ     0,,PR1
        20 000361   000777 376007                    ANQ     511,DL
        20 000362   000027 756000 0                  STQ     TEMP_UBIN
        20 000363   000372 710000 20                 TRA     s:10935+3

      304    10934    8                          SRCH.LOP = SRCH.LOP->BLOCK.NEXT ;

  10934 20 000364   000001 470400 18                 LDP0    SRCH+1
        20 000365   000004 236100                    LDQ     4,,PR0
        20 000366   000001 756000 18                 STQ     SRCH+1

      305    10935    8                        END ;

  10935 20 000367   000027 235000 0                  LDA     TEMP_UBIN
        20 000370   000001 135007                    SBLA    1,DL
        20 000371   000027 755000 0                  STA     TEMP_UBIN
        20 000372   000027 235000 0                  LDA     TEMP_UBIN
        20 000373   000002 115007                    CMPA    2,DL
        20 000374   000364 603000 20                 TRC     s:10934

      306    10936    7                        CALL Z8AS$SR_ETT(BASE$->ETT.ROP) ;

  10936 20 000375   000177 236000 0                  LDQ     BASE$
        20 000376   000002 036003                    ADLQ    2,DU
        20 000377   000210 756000 0                  STQ     @RECSIZE+1
        20 000400   000210 630400 0                  EPPR0   @RECSIZE+1
        20 000401   000001 631400 21                 EPPR1   1
        20 000402   000000 701000 xent               TSX1    Z8AS$SR_ETT
        20 000403   000000 011000                    NOP     0

      307    10937    7                      END ;

      308    10938    6                    END ;

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:59   
  10938 20 000404   000447 710000 20                 TRA     s:10961

      309    10939    6                    ELSE DO ; /* In .PROC. */

      310    10940    6                      SRCH.ROP = BASE$->ETT.LOP ;

  10940 20 000405   000001 236100                    LDQ     1,,PR0
        20 000406   000002 756000 18                 STQ     SRCH+2

      311    10941
      312    10942    6                      IF COMCOM.SEGMENTC > 1 AND

  10942 20 000407   000314 235000 xsym               LDA     COMCOM+204
        20 000410   000001 115007                    CMPA    1,DL
        20 000411   000433 604400 20                 TMOZ    s:10957
        20 000412   000001 471500                    LDP1    1,,PR0
        20 000413   100000 220100                    LDX0    0,,PR1
        20 000414   000771 100003                    CMPX0   505,DU
        20 000415   000420 600000 20                 TZE     s:10942+9
        20 000416   000770 100003                    CMPX0   504,DU
        20 000417   000433 601000 20                 TNZ     s:10957
        20 000420   100003 236100                    LDQ     3,,PR1
        20 000421   010000 316007                    CANQ    4096,DL
        20 000422   000433 600000 20                 TZE     s:10957

      313    10943    6                        (BASE$->ETT.LOP->ST.ID = %PARA OR
      314    10944    6                         BASE$->ETT.LOP->ST.ID = %SECTION) AND
      315    10945    6                        BASE$->ETT.LOP->LABEL.B.USE_BASE_POINTER THEN
      316    10946    7                        DO;  /* Kluge, in case the label is in a   */

      317    10947                                  /* different segment, a base pointer  */
      318    10948                                  /* containing the address is needed   */
      319    10949                                  /* and the base item is hiding in the */
      320    10950                                  /* LABEL.LINK, see virtual Z9A_SUPP_M */
      321    10951    7                          SRCH.LOP = BASE$->ETT.LOP->LABEL.LINK;

  10951 20 000423   100012 236100                    LDQ     10,,PR1
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:60   
        20 000424   000001 756000 18                 STQ     SRCH+1

      322    10952                                  /* Restore the LINK field             */
      323    10953    7                          BASE$->ETT.LOP->LABEL.LINK =

  10953 20 000425   000001 471500                    LDP1    1,,PR0
        20 000426   000001 473400 18                 LDP3    SRCH+1
        20 000427   300001 474500                    LDP4    1,,PR3
        20 000430   400005 236100                    LDQ     5,,PR4
        20 000431   100012 756100                    STQ     10,,PR1

      324    10954    7                               SRCH.LOP->ETT.LOP->VARIABLE.LTS$;
      325    10955    7                        END;

  10955 20 000432   000440 710000 20                 TRA     s:10958

      326    10956    6                      ELSE
      327    10957    6                        SRCH.LOP = SEGMENT$$(BASE$->ETT.LOP->VARIABLE.COUNT) ;

  10957 20 000433   000001 471500                    LDP1    1,,PR0
        20 000434   100000 720100                    LXL0    0,,PR1
        20 000435   000777 360003                    ANX0    511,DU
        20 000436   000032 236010 0                  LDQ     SEGMENT$$,X0
        20 000437   000001 756000 18                 STQ     SRCH+1

      328    10958    6                      CALL Z8AS$SR_ETT(BASE$->ETT.ROP) ;

  10958 20 000440   000177 236000 0                  LDQ     BASE$
        20 000441   000002 036003                    ADLQ    2,DU
        20 000442   000210 756000 0                  STQ     @RECSIZE+1
        20 000443   000210 630400 0                  EPPR0   @RECSIZE+1
        20 000444   000001 631400 21                 EPPR1   1
        20 000445   000000 701000 xent               TSX1    Z8AS$SR_ETT
        20 000446   000000 011000                    NOP     0

      329    10959    6                    END ;

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:61   
      330    10960    5                  END ;

      331    10961    4                BASE$ = NEXT_BASE$ ;

  10961 20 000447   000200 236000 0                  LDQ     NEXT_BASE$
        20 000450   000177 756000 0                  STQ     BASE$

      332    10962    4              END ;

  10962 20 000451   000177 236000 0                  LDQ     BASE$
        20 000452   000000 116000 21                 CMPQ    0
        20 000453   000114 601000 20                 TNZ     s:10830

      333    10963    3              SRCH.LOP = COMCOM.BLOCK$ ;

  10963 20 000454   000145 236000 xsym               LDQ     COMCOM+101
        20 000455   000001 756000 18                 STQ     SRCH+1

      334    10964    3            END ;

      335    10965
      336    10966        /*V*
      337    10967            ASSIGN_FINAL_ESCAPE -- COMCOM.ESC points to the ESC triad that the
      338    10968                                   next available data location is in.  This
      339    10969                                   is used by the generator when creating
      340    10970                                   temporary data items.
      341    10971        */
      342    10972
      343    10973    3          DO TEMP_UBIN = O2COM.WORK_STOR_BLKNUM DOWNTO 2 ;

  10973 20 000456   000012 235000 13                 LDA     O2COM+10
        20 000457   000027 755000 0                  STA     TEMP_UBIN
        20 000460   000467 710000 20                 TRA     s:10975+3

      344    10974    3            SRCH.LOP = SRCH.LOP -> BLOCK.NEXT ;

  10974 20 000461   000001 470400 18                 LDP0    SRCH+1
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:62   
        20 000462   000004 236100                    LDQ     4,,PR0
        20 000463   000001 756000 18                 STQ     SRCH+1

      345    10975    3          END ;

  10975 20 000464   000027 235000 0                  LDA     TEMP_UBIN
        20 000465   000001 135007                    SBLA    1,DL
        20 000466   000027 755000 0                  STA     TEMP_UBIN
        20 000467   000002 115007                    CMPA    2,DL
        20 000470   000461 603000 20                 TRC     s:10974

      346    10976    2          SRCH.ROPCON = SRCH.LOP->BLOCK.SIZE / %#16K ;

  10976 20 000471   000001 470400 18                 LDP0    SRCH+1
        20 000472   000002 236100                    LDQ     2,,PR0
        20 000473   000022 772000                    QRL     18
        20 000474   000016 772000                    QRL     14
        20 000475   000002 756000 18                 STQ     SRCH+2

      347    10977    2          COMCOM.LAST_BLOCK$ = SRCH.LOP ;

  10977 20 000476   000001 236000 18                 LDQ     SRCH+1
        20 000477   000375 756000 xsym               STQ     COMCOM+253

      348    10978    2          CALL Z8AS$SR_ETT (COMCOM.ESC) ;

  10978 20 000500   000005 630400 21                 EPPR0   5
        20 000501   000001 631400 21                 EPPR1   1
        20 000502   000000 701000 xent               TSX1    Z8AS$SR_ETT
        20 000503   000000 011000                    NOP     0

      349    10979    2   END ESCAPE_INIT ;

  10979 20 000504   000176 221200 0                  LDX1  ! SEGMENT$$+100
        20 000505   000001 702211                    TSX2  ! 1,X1

      350    10980        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:63   
      351    10981    1   RECORD_SIZE: PROC (ST$$, RECSIZE);

  10981 20 000506   000205 741200 0     RECORD_SIZE  STX1  ! DONE_FLAG1+2

      352    10982        /*V*
      353    10983            GET_SIZE_AND_INCREMENT -- The size of the variable is extracted from
      354    10984                                      ST.NDSC.N if it is numeric and from ST.ADSC.N or
      355    10985                                      LONG.LENGTH if it is alphabetic.  The size is in
      356    10986                                      LONG.LENGTH if the item's size did not fit in the
      357    10987                                      ST (size > 4095 bytes).  The size of the variable
      358    10988                                      is then added to the storage counters to get the
      359    10989                                      next available location.
      360    10990        */
      361    10991    2   DCL ST$$ PTR;
      362    10992    2   DCL RECSIZE UBIN;
      363    10993
      364    10994    3                DO CASE (ST$$->VARIABLE.TYPE) ;

  10994 20 000507   000206 470400 0                  LDP0    @ST$$
        20 000510   000000 471500                    LDP1    0,,PR0
        20 000511   100002 236100                    LDQ     2,,PR1
        20 000512   000022 772000                    QRL     18
        20 000513   000006 136007                    SBLQ    6,DL
        20 000514   000016 116007                    CMPQ    14,DL
        20 000515   000517 602006 20                 TNC     s:10994+8,QL
        20 000516   000657 710000 20                 TRA     s:11100
        20 000517   000535 710000 20                 TRA     s:10996
        20 000520   000657 710000 20                 TRA     s:11100
        20 000521   000535 710000 20                 TRA     s:10996
        20 000522   000657 710000 20                 TRA     s:11100
        20 000523   000657 710000 20                 TRA     s:11100
        20 000524   000657 710000 20                 TRA     s:11100
        20 000525   000602 710000 20                 TRA     s:11047
        20 000526   000657 710000 20                 TRA     s:11100
        20 000527   000535 710000 20                 TRA     s:10996
        20 000530   000657 710000 20                 TRA     s:11100
        20 000531   000657 710000 20                 TRA     s:11100
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:64   
        20 000532   000657 710000 20                 TRA     s:11100
        20 000533   000657 710000 20                 TRA     s:11100
        20 000534   000650 710000 20                 TRA     s:11098

      365    10995    3                  CASE (%TYA, %TYN, %TYE) ;

      366    10996    3                    IF  ST$$->VARIABLE.B.LENGTH_4096 THEN

  10996 20 000535   100003 236100                    LDQ     3,,PR1
        20 000536   004000 316003                    CANQ    2048,DU
        20 000537   000573 600000 20                 TZE     s:11045

      367    10997    4                      DO ;

      368    10998                             %GET_LTS (@ID = %LONG, @ST$ = ST$$, @RETURN$ = LONG$) ;

  11000 20 000540   100005 236100                    LDQ     5,,PR1
        20 000541   000000 116000 21                 CMPQ    0
        20 000542   000552 600000 20                 TZE     s:11034
        20 000543   100005 473500                    LDP3    5,,PR1
        20 000544   300000 220100                    LDX0    0,,PR3
        20 000545   001105 100003                    CMPX0   581,DU
        20 000546   000552 601000 20                 TNZ     s:11034

  11008 20 000547   300003 236100                    LDQ     3,,PR3
        20 000550   000005 756000 0                  STQ     LONG$

  11032 20 000551   000564 710000 20                 TRA     s:11041

  11034 20 000552   000000 116000 21                 CMPQ    0
        20 000553   000562 600000 20                 TZE     s:11038
        20 000554   100005 473500                    LDP3    5,,PR1
        20 000555   300000 220100                    LDX0    0,,PR3
        20 000556   001110 100003                    CMPX0   584,DU
        20 000557   000562 601000 20                 TNZ     s:11038

  11036 20 000560   000005 756000 0                  STQ     LONG$
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:65   
        20 000561   000564 710000 20                 TRA     s:11041

  11038 20 000562   000000 236000 21                 LDQ     0
        20 000563   000005 756000 0                  STQ     LONG$

      369    11041    4                        RECSIZE =

  11041 20 000564   000005 473400 0                  LDP3    LONG$
        20 000565   300001 236100                    LDQ     1,,PR3
        20 000566   000003 036007                    ADLQ    3,DL
        20 000567   000002 772000                    QRL     2
        20 000570   000207 474400 0                  LDP4    @RECSIZE
        20 000571   400000 756100                    STQ     0,,PR4

      370    11042    4                            (LONG$->LONG.LENGTH + 3) / 4 ;
      371    11043    4                      END ;

  11043 20 000572   000701 710000 20                 TRA     s:11105

      372    11044    3                    ELSE      /* length stored in symbol table */
      373    11045    3                      RECSIZE = (ST$$->VARIABLE.ADSC.N + 3) / 4 ;

  11045 20 000573   100001 236100                    LDQ     1,,PR1
        20 000574   007777 376007                    ANQ     4095,DL
        20 000575   000003 036007                    ADLQ    3,DL
        20 000576   000002 772000                    QRL     2
        20 000577   000207 473400 0                  LDP3    @RECSIZE
        20 000600   300000 756100                    STQ     0,,PR3
        20 000601   000701 710000 20                 TRA     s:11105

      374    11046    3                  CASE (%TYB) ;

      375    11047    3                    IF  ST$$->VARIABLE.B.LENGTH_4096 THEN

  11047 20 000602   100003 236100                    LDQ     3,,PR1
        20 000603   004000 316003                    CANQ    2048,DU
        20 000604   000641 600000 20                 TZE     s:11096
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:66   

      376    11048    4                      DO ;

      377    11049                             %GET_LTS (@ID = %LONG, @ST$ = ST$$, @RETURN$ = LONG$) ;

  11051 20 000605   100005 236100                    LDQ     5,,PR1
        20 000606   000000 116000 21                 CMPQ    0
        20 000607   000617 600000 20                 TZE     s:11085
        20 000610   100005 473500                    LDP3    5,,PR1
        20 000611   300000 220100                    LDX0    0,,PR3
        20 000612   001105 100003                    CMPX0   581,DU
        20 000613   000617 601000 20                 TNZ     s:11085

  11059 20 000614   300003 236100                    LDQ     3,,PR3
        20 000615   000005 756000 0                  STQ     LONG$

  11083 20 000616   000631 710000 20                 TRA     s:11092

  11085 20 000617   000000 116000 21                 CMPQ    0
        20 000620   000627 600000 20                 TZE     s:11089
        20 000621   100005 473500                    LDP3    5,,PR1
        20 000622   300000 220100                    LDX0    0,,PR3
        20 000623   001110 100003                    CMPX0   584,DU
        20 000624   000627 601000 20                 TNZ     s:11089

  11087 20 000625   000005 756000 0                  STQ     LONG$
        20 000626   000631 710000 20                 TRA     s:11092

  11089 20 000627   000000 236000 21                 LDQ     0
        20 000630   000005 756000 0                  STQ     LONG$

      378    11092    4                        RECSIZE =

  11092 20 000631   000005 473400 0                  LDP3    LONG$
        20 000632   300001 236100                    LDQ     1,,PR3
        20 000633   000005 036007                    ADLQ    5,DL
        20 000634   000001 772000                    QRL     1
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:67   
        20 000635   000003 506007                    DIV     3,DL
        20 000636   000207 474400 0                  LDP4    @RECSIZE
        20 000637   400000 756100                    STQ     0,,PR4

      379    11093    4                            (LONG$->LONG.LENGTH + 5) / 6 ;
      380    11094    4                      END ;

  11094 20 000640   000701 710000 20                 TRA     s:11105

      381    11095    3                    ELSE      /* length stored in symbol table */
      382    11096    3                      RECSIZE = (ST$$->VARIABLE.ADSC.N + 5) / 6 ;

  11096 20 000641   100001 236100                    LDQ     1,,PR1
        20 000642   007777 376007                    ANQ     4095,DL
        20 000643   000005 036007                    ADLQ    5,DL
        20 000644   000006 506007                    DIV     6,DL
        20 000645   000207 473400 0                  LDP3    @RECSIZE
        20 000646   300000 756100                    STQ     0,,PR3
        20 000647   000701 710000 20                 TRA     s:11105

      383    11097    3                  CASE (%TYC) ;

      384    11098    3                    RECSIZE = (ST$$->VARIABLE.NDSC.N + 5) / 6 ;

  11098 20 000650   100001 236100                    LDQ     1,,PR1
        20 000651   000077 376007                    ANQ     63,DL
        20 000652   000005 036007                    ADLQ    5,DL
        20 000653   000006 506007                    DIV     6,DL
        20 000654   000207 473400 0                  LDP3    @RECSIZE
        20 000655   300000 756100                    STQ     0,,PR3
        20 000656   000701 710000 20                 TRA     s:11105

      385    11099    3                  CASE (ELSE) ;

      386    11100    3                    IF ST$$->VARIABLE.TYPE = %TYD AND ST$$ -> VARIABLE.NDSC.TN THEN

  11100 20 000657   100002 220100                    LDX0    2,,PR1
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:68   
        20 000660   000673 601000 20                 TNZ     s:11103
        20 000661   100001 236100                    LDQ     1,,PR1
        20 000662   040000 316007                    CANQ    16384,DL
        20 000663   000673 600000 20                 TZE     s:11103

      387    11101    3                      RECSIZE = (ST$$->VARIABLE.NDSC.N + 7) / 8 ;

  11101 20 000664   100001 236100                    LDQ     1,,PR1
        20 000665   000077 376007                    ANQ     63,DL
        20 000666   000007 036007                    ADLQ    7,DL
        20 000667   000003 772000                    QRL     3
        20 000670   000207 473400 0                  LDP3    @RECSIZE
        20 000671   300000 756100                    STQ     0,,PR3
        20 000672   000701 710000 20                 TRA     s:11105

      388    11102    3                    ELSE
      389    11103    3                      RECSIZE = (ST$$->VARIABLE.NDSC.N + 3) / 4 ;

  11103 20 000673   100001 236100                    LDQ     1,,PR1
        20 000674   000077 376007                    ANQ     63,DL
        20 000675   000003 036007                    ADLQ    3,DL
        20 000676   000002 772000                    QRL     2
        20 000677   000207 473400 0                  LDP3    @RECSIZE
        20 000700   300000 756100                    STQ     0,,PR3

      390    11104    3                END ;

      391    11105    2   END RECORD_SIZE;

  11105 20 000701   000205 221200 0                  LDX1  ! DONE_FLAG1+2
        20 000702   000001 702211                    TSX2  ! 1,X1

      392    11106        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:69   
      393    11107        /*N*
      394    11108            FINAL_PROGRAM_CHNGS -- Remember DEFINED and REFERENCED bits.
      395    11109                                   Check TOP_QLT to make sure it's a data item
      396    11110        */
      397    11111               %TOP_QLT (POINTER = QUAL$) ;

  11113 20 000703   000000 236000 8                  LDQ     QLT_
        20 000704   000003 756000 0                  STQ     QUAL$

      398    11116
      399    11117        /*V*
      400    11118            ALIGN_STORAGE_COUNTER -- All level 1 or 77 items are either on a double word
      401    11119                                     or a single word boundary.  If we are not at a
      402    11120                                     double word boundary and one is required then
      403    11121                                     filler is added for the needed alignment.
      404    11122
      405    11123                                       Double word aligned items:
      406    11124                                           TYQ  (COMP12, COMP14)
      407    11125                                           TYX  (INDEX item)
      408    11126                                           TYA  when 5<= (size in bytes) <= 8
      409    11127                                           TYA  all group data items.
      410    11128
      411    11129                                       Single word aligned items:
      412    11130                                           all others
      413    11131        */
      414    11132
      415    11133        /*V*
      416    11134             At this time the COMCOM.SEGMENT$ array is not ready yet for
      417    11135             overlayable segment, so create a temporary SEGMENT$$ array
      418    11136             to save the information needed in this module.
      419    11137        */
      420    11138
      421    11139    1          IF COMCOM.SEGMENTC > 1 THEN

  11139 20 000705   000314 235000 xsym               LDA     COMCOM+204
        20 000706   000001 115007                    CMPA    1,DL
        20 000707   000725 604400 20                 TMOZ    s:11151
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:70   

      422    11140    2            DO;

      423    11141    2              TEMP$ = COMCOM.SEGMENT$(0);  /* root segment */

  11141 20 000710   000150 236000 xsym               LDQ     COMCOM+104
        20 000711   000031 756000 0                  STQ     TEMP$

      424    11142
      425    11143    3              DO WHILE (TEMP$ ~= ADDR(NIL));

  11143 20 000712   000722 710000 20                 TRA     s:11148

      426    11144
      427    11145    3                SEGMENT$$ (TEMP$ -> SEGMENT.COUNT) = TEMP$;

  11145 20 000713   000031 470400 0                  LDP0    TEMP$
        20 000714   000000 720100                    LXL0    0,,PR0
        20 000715   000777 360003                    ANX0    511,DU
        20 000716   000031 236000 0                  LDQ     TEMP$
        20 000717   000032 756010 0                  STQ     SEGMENT$$,X0

      428    11146    3                TEMP$ = TEMP$ -> SEGMENT.NEXT;

  11146 20 000720   000010 236100                    LDQ     8,,PR0
        20 000721   000031 756000 0                  STQ     TEMP$

      429    11147
      430    11148    3              END;

  11148 20 000722   000000 116000 21                 CMPQ    0
        20 000723   000713 601000 20                 TNZ     s:11145

      431    11149    2            END;

  11149 20 000724   000727 710000 20                 TRA     s:11154

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:71   
      432    11150    1          ELSE
      433    11151    1            SEGMENT$$(0) = COMCOM.SEGMENT$(0);  /* root segment */

  11151 20 000725   000150 236000 xsym               LDQ     COMCOM+104
        20 000726   000032 756000 0                  STQ     SEGMENT$$

      434    11152
      435    11153
      436    11154    1          COMCOM.CURRENT.COLUMN = 0 ;

  11154 20 000727   000134 450000 xsym               STZ     COMCOM+92

      437    11155    1          LAST_COUNT = 1 ; /* Set it up for .DATA. */

  11155 20 000730   000001 235007                    LDA     1,DL
        20 000731   000007 755000 0                  STA     LAST_COUNT

      438    11156    1          NEXT_AVAILABLE$ = COMCOM.BLOCK$ ;

  11156 20 000732   000145 236000 xsym               LDQ     COMCOM+101
        20 000733   000010 756000 0                  STQ     NEXT_AVAILABLE$

      439    11157    1          CURRENT_PROC$ = ADDR (NIL) ;

  11157 20 000734   000000 236000 21                 LDQ     0
        20 000735   000002 756000 0                  STQ     CURRENT_PROC$

      440    11158    1          O2COM.NEXT_AVAILABLE$ = COMCOM.BLOCK$ ;

  11158 20 000736   000145 236000 xsym               LDQ     COMCOM+101
        20 000737   000006 756000 13                 STQ     O2COM+6

      441    11159    2          DO WHILE (QUAL$ ~= ADDR(NIL)) ;

  11159 20 000740   002634 710000 20                 TRA     s:11819

      442    11160    2            SYM$ = QUAL$->QLT.ST$ ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:72   

  11160 20 000741   000003 470400 0                  LDP0    QUAL$
        20 000742   000004 236100                    LDQ     4,,PR0
        20 000743   000001 756000 0                  STQ     SYM$

      443    11161
      444    11162    3   CASE_STMT: DO CASE (SYM$->ST.ID) ;

  11162 20 000744   000001 471400 0     CASE_STMT    LDP1    SYM$
        20 000745   100000 236100                    LDQ     0,,PR1
        20 000746   000022 772000                    QRL     18
        20 000747   000751 136007                    SBLQ    489,DL
        20 000750   000035 116007                    CMPQ    29,DL
        20 000751   000753 602006 20                 TNC     CASE_STMT+7,QL
        20 000752   002631 710000 20                 TRA     s:11817
        20 000753   001010 710000 20                 TRA     s:11177
        20 000754   002631 710000 20                 TRA     s:11817
        20 000755   002631 710000 20                 TRA     s:11817
        20 000756   002631 710000 20                 TRA     s:11817
        20 000757   002631 710000 20                 TRA     s:11817
        20 000760   002631 710000 20                 TRA     s:11817
        20 000761   002631 710000 20                 TRA     s:11817
        20 000762   001010 710000 20                 TRA     s:11177
        20 000763   002631 710000 20                 TRA     s:11817
        20 000764   002631 710000 20                 TRA     s:11817
        20 000765   002631 710000 20                 TRA     s:11817
        20 000766   002631 710000 20                 TRA     s:11817
        20 000767   001010 710000 20                 TRA     s:11177
        20 000770   001010 710000 20                 TRA     s:11177
        20 000771   001010 710000 20                 TRA     s:11177
        20 000772   002631 710000 20                 TRA     s:11817
        20 000773   002631 710000 20                 TRA     s:11817
        20 000774   002631 710000 20                 TRA     s:11817
        20 000775   002631 710000 20                 TRA     s:11817
        20 000776   002631 710000 20                 TRA     s:11817
        20 000777   002631 710000 20                 TRA     s:11817
        20 001000   002631 710000 20                 TRA     s:11817
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:73   
        20 001001   001010 710000 20                 TRA     s:11177
        20 001002   002631 710000 20                 TRA     s:11817
        20 001003   002631 710000 20                 TRA     s:11817
        20 001004   001010 710000 20                 TRA     s:11177
        20 001005   001010 710000 20                 TRA     s:11177
        20 001006   001010 710000 20                 TRA     s:11177
        20 001007   001010 710000 20                 TRA     s:11177

      445    11163    3             CASE(

      446    11164                   %ST_ITEMS_WITH_STORAGE ;
      447    11176    3              ) ;
      448    11177    3              IF SYM$->ST.ID = %FD OR

  11177 20 001010   100000 220100                    LDX0    0,,PR1
        20 001011   001002 100003                    CMPX0   514,DU
        20 001012   001015 600000 20                 TZE     s:11181
        20 001013   001003 100003                    CMPX0   515,DU
        20 001014   001132 601000 20                 TNZ     s:11267

      449    11178    4                 SYM$->ST.ID = %SD THEN DO ;

      450    11179                     %GET_LTS (@ID=%FILE_LTS, @ST$=SYM$, @RETURN$=LTS$) ;

  11181 20 001015   100005 236100                    LDQ     5,,PR1
        20 001016   000000 116000 21                 CMPQ    0
        20 001017   001027 600000 20                 TZE     s:11215
        20 001020   100005 473500                    LDP3    5,,PR1
        20 001021   300000 221100                    LDX1    0,,PR3
        20 001022   001105 101003                    CMPX1   581,DU
        20 001023   001027 601000 20                 TNZ     s:11215

  11195 20 001024   300006 236100                    LDQ     6,,PR3
        20 001025   000000 756000 11                 STQ     LTS$

  11213 20 001026   001041 710000 20                 TRA     s:11222

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:74   
  11215 20 001027   000000 116000 21                 CMPQ    0
        20 001030   001037 600000 20                 TZE     s:11219
        20 001031   100005 473500                    LDP3    5,,PR1
        20 001032   300000 221100                    LDX1    0,,PR3
        20 001033   001121 101003                    CMPX1   593,DU
        20 001034   001037 601000 20                 TNZ     s:11219

  11217 20 001035   000000 756000 11                 STQ     LTS$
        20 001036   001041 710000 20                 TRA     s:11222

  11219 20 001037   000000 236000 21                 LDQ     0
        20 001040   000000 756000 11                 STQ     LTS$

      451    11222    4                SAVE_LTS$ = LTS$ ;

  11222 20 001041   000006 756000 0                  STQ     SAVE_LTS$

      452    11223    4                IF SYM$->ST.ID = %SD THEN

  11223 20 001042   100000 220100                    LDX0    0,,PR1
        20 001043   001003 100003                    CMPX0   515,DU
        20 001044   001060 601000 20                 TNZ     s:11236

      453    11224    5                  IF LTS$->FILE_LTS.B.SAME_AREA THEN DO ;

  11224 20 001045   000000 473400 11                 LDP3    LTS$
        20 001046   300017 236100                    LDQ     15,,PR3
        20 001047   040000 316007                    CANQ    16384,DL
        20 001050   001060 600000 20                 TZE     s:11236

      454    11225    5                    COMCOM.CURRENT.LINE = SYM$->SD.LINE_NO ;

  11225 20 001051   100002 236100                    LDQ     2,,PR1
        20 001052   777777 376007                    ANQ     -1,DL
        20 001053   000133 756000 xsym               STQ     COMCOM+91

      455    11226    5                    CALL Z8AE$ERROR (%E$SORT_FILE_SAME_AREA) ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:75   

  11226 20 001054   000007 630400 21                 EPPR0   7
        20 001055   000001 631400 21                 EPPR1   1
        20 001056   000000 701000 xent               TSX1    Z8AE$ERROR
        20 001057   000000 011000                    NOP     0

      456    11227        /*E*
      457    11228              ERROR:  SORT_FILE_SAME_AREA
      458    11229            MESSAGE:  Sort or merge files must not appear in a SAME clause without
      459    11230                      a SORT, SORT-MERGE, or RECORD phrase.
      460    11231        DESCRIPTION:  The standard specifies that a SORT file can appear in a
      461    11232                      SAME AREA clause only if one of these three phrases occurs
      462    11233                      in the clause.
      463    11234        */
      464    11235    5                  END ;

      465    11236    4                IF SYM$->SCALAR.B.EXTERNAL THEN

  11236 20 001060   000001 470400 0                  LDP0    SYM$
        20 001061   000003 236100                    LDQ     3,,PR0
        20 001062   000004 316003                    CANQ    4,DU
        20 001063   001103 600000 20                 TZE     s:11249

      466    11237    4                  IF LTS$->FILE_LTS.B.SAME_AREA OR LTS$->FILE_LTS.B.SAME_RECORD

  11237 20 001064   000000 471400 11                 LDP1    LTS$
        20 001065   100017 236100                    LDQ     15,,PR1
        20 001066   040000 316007                    CANQ    16384,DL
        20 001067   001074 601000 20                 TNZ     s:11239
        20 001070   100000 316007                    CANQ    32768,DL
        20 001071   001074 601000 20                 TNZ     s:11239
        20 001072   000400 316007                    CANQ    256,DL
        20 001073   001103 600000 20                 TZE     s:11249

      467    11238    5                    OR LTS$->FILE_LTS.B.SAME_SORT_AREA THEN DO ;

      468    11239    5                      COMCOM.CURRENT.LINE = SYM$->SCALAR.LINE_NO ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:76   

  11239 20 001074   000002 236100                    LDQ     2,,PR0
        20 001075   777777 376007                    ANQ     -1,DL
        20 001076   000133 756000 xsym               STQ     COMCOM+91

      469    11240    5                      CALL Z8AE$ERROR (%E$EXTERNAL_SAME_AREA) ;

  11240 20 001077   000011 630400 21                 EPPR0   9
        20 001100   000001 631400 21                 EPPR1   1
        20 001101   000000 701000 xent               TSX1    Z8AE$ERROR
        20 001102   000000 011000                    NOP     0

      470    11241        /*E*
      471    11242              ERROR:  EXTERNAL_SAME_AREA
      472    11243            MESSAGE:  EXTERNAL files must not appear in a SAME AREA clause.
      473    11244        DESCRIPTION:  File names in a SAME AREA, SAME RECORD AREA, SAME SORT AREA,
      474    11245                      or SAME SORT-MERGE AREA clause cannot reference external
      475    11246                      file connectors.
      476    11247        */
      477    11248    5                    END ;

      478    11249    4                IF LTS$->FILE_LTS.B.SAME_RECORD

  11249 20 001103   000000 470400 11                 LDP0    LTS$
        20 001104   000017 236100                    LDQ     15,,PR0
        20 001105   100000 316007                    CANQ    32768,DL
        20 001106   001126 600000 20                 TZE     s:11262
        20 001107   000040 236100                    LDQ     32,,PR0
        20 001110   000000 116000 21                 CMPQ    0
        20 001111   001126 600000 20                 TZE     s:11262

      479    11250    4                    AND LTS$->FILE_LTS.REPORT$ ~= ADDR (NIL) THEN
      480    11251    4                  IF LTS$->FILE_LTS.REPORT$->REPORT_LTS.LINE_COUNTER$

  11251 20 001112   000040 471500                    LDP1    32,,PR0
        20 001113   100020 236100                    LDQ     16,,PR1
        20 001114   000000 116000 21                 CMPQ    0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:77   
        20 001115   001126 600000 20                 TZE     s:11262

      481    11252    5                      ~= ADDR (NIL) THEN DO ;

      482    11253    5                    COMCOM.CURRENT.LINE = SYM$->SCALAR.LINE_NO ;

  11253 20 001116   000001 473400 0                  LDP3    SYM$
        20 001117   300002 236100                    LDQ     2,,PR3
        20 001120   777777 376007                    ANQ     -1,DL
        20 001121   000133 756000 xsym               STQ     COMCOM+91

      483    11254    5                    CALL Z8AE$ERROR (%E$REPORT_SAME_RECORD) ;

  11254 20 001122   000013 630400 21                 EPPR0   11
        20 001123   000001 631400 21                 EPPR1   1
        20 001124   000000 701000 xent               TSX1    Z8AE$ERROR
        20 001125   000000 011000                    NOP     0

      484    11255        /*E*
      485    11256              ERROR: REPORT_SAME_RECORD
      486    11257            MESSAGE: REPORT files must not appear in a SAME clause with the RECORD phrase.
      487    11258        DESCRIPTION: It is legal for REPORT files to appear in SAME clauses
      488    11259                     only if the RECORD phrase is omitted.
      489    11260        */
      490    11261    5                  END ;

      491    11262    4                IF LTS$->FILE_LTS.SAME_RECORD.HEAD$ ~= ADDR (NIL) THEN

  11262 20 001126   000000 470400 11                 LDP0    LTS$
        20 001127   000042 236100                    LDQ     34,,PR0
        20 001130   000000 116000 21                 CMPQ    0
        20 001131   002631 601000 20                 TNZ     s:11817

      492    11263                       /* Allocate this on reaching the item for which
      493    11264                          LTS$->FILE_LTS.SAME_RECORD.HEAD$ = ADDR (NIL) */
      494    11265    4                  EXIT CASE_STMT ;
      495    11266    4              END ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:78   

      496    11267    4              IF SYM$->VARIABLE.B.LINKAGE THEN DO;

  11267 20 001132   000001 470400 0                  LDP0    SYM$
        20 001133   000003 236100                    LDQ     3,,PR0
        20 001134   000002 316003                    CANQ    2,DU
        20 001135   001234 600000 20                 TZE     s:11303

      497    11268                     /* Do not allocate storage for anything in LINKAGE SECTION */
      498    11269    5   IS_IT_PARAM: DO;

  11269 20 001136                       IS_IT_PARAM  null
      499    11270    5                  IF

  11270 20 001136   000015 234000 xsym               SZN     COMCOM+13
        20 001137   001211 605000 20                 TPL     s:11292

      500    11271                         %IF GCOS;
      503    11274                         %ENDIF;
      504    11275    6                    COMCOM.OB.COBOL_74 THEN DO;

      505    11276    6                      LTS$ = SYM$->VARIABLE.PROC$->PROC_.PROC_DEF$->SYMDEF_.ARGLIST$;

  11276 20 001140   000011 471500                    LDP1    9,,PR0
        20 001141   100006 473500                    LDP3    6,,PR1
        20 001142   300005 236100                    LDQ     5,,PR3
        20 001143   000000 756000 11                 STQ     LTS$

      506    11277    7                      IF LTS$ ~= ADDR(NIL) THEN DO; /* There are parameter(s) */

  11277 20 001144   000000 116000 21                 CMPQ    0
        20 001145   001211 600000 20                 TZE     s:11292

      507    11278    7                        TEMP_UBIN = 0;

  11278 20 001146   000027 450000 0                  STZ     TEMP_UBIN

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:79   
      508    11279    8                        DO UNTIL TEMP_UBIN+2 > LTS$->ARGLIST.N;

      509    11280    8                          ST$ = LTS$->ARGLIST.ARG$(TEMP_UBIN);

  11280 20 001147   000000 470400 11                 LDP0    LTS$
        20 001150   000027 720000 0                  LXL0    TEMP_UBIN
        20 001151   000001 236110                    LDQ     1,X0,PR0
        20 001152   000000 756000 9                  STQ     ST$

      510    11281    8                          IF SYM$ = ST$ THEN EXIT IS_IT_PARAM; /* Parameter */

  11281 20 001153   000001 116000 0                  CMPQ    SYM$
        20 001154   001212 600000 20                 TZE     s:11295

      511    11282    8                          IF ST$->VARIABLE.B.REDEF_OBJ AND SYM$->VARIABLE.B.REDEF_SUB
             11282                                   THEN

  11282 20 001155   000000 471400 9                  LDP1    ST$
        20 001156   100003 236100                    LDQ     3,,PR1
        20 001157   000400 316003                    CANQ    256,DU
        20 001160   001177 600000 20                 TZE     s:11288
        20 001161   000001 473400 0                  LDP3    SYM$
        20 001162   300003 430100                    FSZN    3,,PR3
        20 001163   001177 605000 20                 TPL     s:11288

      512    11283    9                            DO WHILE '1'B; /* Until exit -- check for REDEF */

      513    11284    9                              ST$ = ST$->VARIABLE.QLT$->QLT.BROTHER->QLT.ST$;

  11284 20 001164   000000 470400 9                  LDP0    ST$
        20 001165   000007 471500                    LDP1    7,,PR0
        20 001166   100002 473500                    LDP3    2,,PR1
        20 001167   300004 236100                    LDQ     4,,PR3
        20 001170   000000 756000 9                  STQ     ST$

      514    11285    9                              IF NOT ST$->VARIABLE.B.REDEF_SUB THEN EXIT;

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:80   
  11285 20 001171   000000 470400 9                  LDP0    ST$
        20 001172   000003 430100                    FSZN    3,,PR0
        20 001173   001177 605000 20                 TPL     s:11288

      515    11286    9                              IF SYM$ = ST$ THEN EXIT IS_IT_PARAM;

  11286 20 001174   000001 116000 0                  CMPQ    SYM$
        20 001175   001212 600000 20                 TZE     s:11295

      516    11287    9                            END;

  11287 20 001176   001164 710000 20                 TRA     s:11284

      517    11288    8                          TEMP_UBIN = TEMP_UBIN + 1;

  11288 20 001177   000027 235000 0                  LDA     TEMP_UBIN
        20 001200   000001 035007                    ADLA    1,DL
        20 001201   000027 755000 0                  STA     TEMP_UBIN

      518    11289    8                        END;

  11289 20 001202   000002 035007                    ADLA    2,DL
        20 001203   000210 755000 0                  STA     @RECSIZE+1
        20 001204   000000 470400 11                 LDP0    LTS$
        20 001205   000000 236100                    LDQ     0,,PR0
        20 001206   777777 376007                    ANQ     -1,DL
        20 001207   000210 116000 0                  CMPQ    @RECSIZE+1
        20 001210   001147 603000 20                 TRC     s:11280

      519    11290    7                      END; /* LTS$ ~= ADDR(NIL) */

      520    11291    6                    END; /* COBOL74 option, etc. */

      521    11292    5                  EXIT CASE_STMT; /* Based variable */

  11292 20 001211   002631 710000 20                 TRA     s:11817

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:81   
      522    11293    5                END; /* IS_IT_PARAM */
      523    11294                     /* If parameter, maybe adjust alignment */
      524    11295    4                IF SYM$->VARIABLE.TYPE = %TYD THEN /* Check alignment */

  11295 20 001212   000001 470400 0                  LDP0    SYM$
        20 001213   000002 220100                    LDX0    2,,PR0
        20 001214   001233 601000 20                 TNZ     s:11301

      525    11296    4                  IF SYM$->VARIABLE.NDSC.TN /* Packed */ THEN

  11296 20 001215   000001 236100                    LDQ     1,,PR0
        20 001216   040000 316007                    CANQ    16384,DL
        20 001217   001233 600000 20                 TZE     s:11301

      526    11297    4                   IF NOT SYM$->VARIABLE.B.DIGIT /* Byte-, not digit-, aligned */ THEN

  11297 20 001220   000003 236100                    LDQ     3,,PR0
        20 001221   000200 316007                    CANQ    128,DL
        20 001222   001233 601000 20                 TNZ     s:11301

      527    11298    4                      IF MOD (SYM$->VARIABLE.NDSC.N, 2) ~= 0 /* Odd length */ THEN

  11298 20 001223   000001 236100                    LDQ     1,,PR0
        20 001224   000077 376007                    ANQ     63,DL
        20 001225   000001 376007                    ANQ     1,DL
        20 001226   001233 600000 20                 TZE     s:11301

      528    11299    4                        SYM$->VARIABLE.NDSC.CN = 1;

  11299 20 001227   000001 236100                    LDQ     1,,PR0
        20 001230   000014 376000 21                 ANQ     12
        20 001231   100000 276007                    ORQ     32768,DL
        20 001232   000001 756100                    STQ     1,,PR0

      529    11300                             /* Start at digit 1 so it will end on byte boundary. */
      530    11301    4                EXIT CASE_STMT ;

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:82   
  11301 20 001233   002631 710000 20                 TRA     s:11817

      531    11302    4              END ;
      532    11303    3              IF SYM$ -> VARIABLE.B.DML_UWA    THEN

  11303 20 001234   200000 316007                    CANQ    65536,DL
        20 001235   002631 601000 20                 TNZ     s:11817

      533    11304    3                  EXIT CASE_STMT;  /* No allocation for DML User Work Area */
      534    11305    3              IF SYM$->VARIABLE.R = 1

  11305 20 001236   000000 236100                    LDQ     0,,PR0
        20 001237   777000 376007                    ANQ     -512,DL
        20 001240   001000 116007                    CMPQ    512,DL
        20 001241   001247 601000 20                 TNZ     s:11308

      535    11306    3                THEN NEXT_AVAILABLE$ = SEGMENT$$(SYM$->VARIABLE.COUNT) ;

  11306 20 001242   000000 720100                    LXL0    0,,PR0
        20 001243   000777 360003                    ANX0    511,DU
        20 001244   000032 236010 0                  LDQ     SEGMENT$$,X0
        20 001245   000010 756000 0                  STQ     NEXT_AVAILABLE$
        20 001246   001402 710000 20                 TRA     s:11344

      536    11307    4              ELSE DO ;

      537    11308    4                IF SYM$->VARIABLE.COUNT = 1

  11308 20 001247   000000 236100                    LDQ     0,,PR0
        20 001250   000777 376007                    ANQ     511,DL
        20 001251   000001 116007                    CMPQ    1,DL
        20 001252   001255 601000 20                 TNZ     s:11310

      538    11309    4                  THEN SYM$->VARIABLE.COUNT = O2COM.WORK_STOR_BLKNUM ;

  11309 20 001253   000012 236000 13                 LDQ     O2COM+10
        20 001254   000000 552104                    STBQ    0,'04'O,PR0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:83   

      539    11310    4                IF SYM$->VARIABLE.COUNT = LAST_COUNT

  11310 20 001255   000001 470400 0                  LDP0    SYM$
        20 001256   000000 236100                    LDQ     0,,PR0
        20 001257   000777 376007                    ANQ     511,DL
        20 001260   000007 116000 0                  CMPQ    LAST_COUNT
        20 001261   001265 601000 20                 TNZ     s:11313

      540    11311    4                  THEN NEXT_AVAILABLE$ = O2COM.NEXT_AVAILABLE$ ;

  11311 20 001262   000006 236000 13                 LDQ     O2COM+6
        20 001263   000010 756000 0                  STQ     NEXT_AVAILABLE$
        20 001264   001315 710000 20                 TRA     s:11323

      541    11312    5                  ELSE DO ;

      542    11313    6                    IF SYM$->VARIABLE.COUNT < LAST_COUNT THEN DO ;

  11313 20 001265   001272 603000 20                 TRC     s:11317

      543    11314    6                      NEXT_AVAILABLE$ = COMCOM.BLOCK$ ;

  11314 20 001266   000145 236000 xsym               LDQ     COMCOM+101
        20 001267   000010 756000 0                  STQ     NEXT_AVAILABLE$

      544    11315    6                      LAST_COUNT = 1 ;

  11315 20 001270   000001 235007                    LDA     1,DL
        20 001271   000007 755000 0                  STA     LAST_COUNT

      545    11316    6                    END ;

      546    11317    6                    DO WHILE SYM$->VARIABLE.COUNT > LAST_COUNT ;

  11317 20 001272   000000 236100                    LDQ     0,,PR0
        20 001273   000777 376007                    ANQ     511,DL
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:84   
        20 001274   000007 116000 0                  CMPQ    LAST_COUNT
        20 001275   001313 602000 20                 TNC     s:11321
        20 001276   001313 600000 20                 TZE     s:11321

      547    11318    6                      LAST_COUNT = LAST_COUNT + 1 ;

  11318 20 001277   000007 235000 0                  LDA     LAST_COUNT
        20 001300   000001 035007                    ADLA    1,DL
        20 001301   000007 755000 0                  STA     LAST_COUNT

      548    11319    6                      NEXT_AVAILABLE$ = NEXT_AVAILABLE$->BLOCK.NEXT ;

  11319 20 001302   000010 470400 0                  LDP0    NEXT_AVAILABLE$
        20 001303   000004 236100                    LDQ     4,,PR0
        20 001304   000010 756000 0                  STQ     NEXT_AVAILABLE$

      549    11320    6                    END ;

  11320 20 001305   000001 470400 0                  LDP0    SYM$
        20 001306   000000 236100                    LDQ     0,,PR0
        20 001307   000777 376007                    ANQ     511,DL
        20 001310   000007 116000 0                  CMPQ    LAST_COUNT
        20 001311   001313 600000 20                 TZE     s:11321
        20 001312   001277 603000 20                 TRC     s:11318

      550    11321    5                    O2COM.NEXT_AVAILABLE$ = NEXT_AVAILABLE$ ;

  11321 20 001313   000010 236000 0                  LDQ     NEXT_AVAILABLE$
        20 001314   000006 756000 13                 STQ     O2COM+6

      551    11322    5                  END ;

      552    11323    5                  IF CURRENT_PROC$ ~= SYM$->VARIABLE.PROC$ THEN DO ;

  11323 20 001315   000002 236000 0                  LDQ     CURRENT_PROC$
        20 001316   000011 116100                    CMPQ    9,,PR0
        20 001317   001364 600000 20                 TZE     s:11337
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:85   

      553    11324    5                    TEMP$ = COMCOM.BLOCK$ ;

  11324 20 001320   000145 236000 xsym               LDQ     COMCOM+101
        20 001321   000031 756000 0                  STQ     TEMP$

      554    11325    6                    DO WHILE TEMP$ ~= ADDR (NIL) ;

  11325 20 001322   001350 710000 20                 TRA     s:11332

      555    11326    7                      IF SUBSTR(TEMP$->BLOCK.DNT$->DNT.TEXT.NAME,0,4) = 'BLCK' THEN DO
             11326                               ;

  11326 20 001323   000031 470400 0                  LDP0    TEMP$
        20 001324   000006 471500                    LDP1    6,,PR0
        20 001325   100004 220100                    LDX0    4,,PR1
        20 001326   040000 106500                    CMPC    fill='040'O
        20 001327   100004 400004                    ADSC9   4,,PR1                   cn=2,n=4
        20 001330   000000 000004 19                 ADSC9   0                        cn=0,n=4
        20 001331   001346 601000 20                 TNZ     s:11331

      556    11327    7                        TEMP$->BLOCK.SIZE1 = MAXIMUM (TEMP$->

  11327 20 001332   000002 236100                    LDQ     2,,PR0
        20 001333   000022 772000                    QRL     18
        20 001334   000210 756000 0                  STQ     @RECSIZE+1
        20 001335   000010 236100                    LDQ     8,,PR0
        20 001336   000022 772000                    QRL     18
        20 001337   000210 116000 0                  CMPQ    @RECSIZE+1
        20 001340   001342 603000 20                 TRC     s:11327+8
        20 001341   000210 236000 0                  LDQ     @RECSIZE+1
        20 001342   000000 620006                    EAX0    0,QL
        20 001343   000010 740100                    STX0    8,,PR0

      557    11328    7                            BLOCK.SIZE1, TEMP$->BLOCK.SIZE) ;
      558    11329    7                        TEMP$->BLOCK.SIZE = 0 ;

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:86   
  11329 20 001344   000000 221003                    LDX1    0,DU
        20 001345   000002 741100                    STX1    2,,PR0

      559    11330    7                      END ;

      560    11331    6                      TEMP$ = TEMP$->BLOCK.NEXT ;

  11331 20 001346   000004 236100                    LDQ     4,,PR0
        20 001347   000031 756000 0                  STQ     TEMP$

      561    11332    6                    END ;

  11332 20 001350   000000 116000 21                 CMPQ    0
        20 001351   001323 601000 20                 TNZ     s:11326

      562    11333    5                    CURRENT_PROC$ = SYM$->VARIABLE.PROC$ ;

  11333 20 001352   000001 470400 0                  LDP0    SYM$
        20 001353   000011 236100                    LDQ     9,,PR0
        20 001354   000002 756000 0                  STQ     CURRENT_PROC$

      563    11334    5                    IF SYM$->VARIABLE.R = %START_BLK

  11334 20 001355   000000 236100                    LDQ     0,,PR0
        20 001356   777000 376007                    ANQ     -512,DL
        20 001357   004000 116007                    CMPQ    2048,DL
        20 001360   001402 601000 20                 TNZ     s:11344

      564    11335    5                      THEN SYM$->VARIABLE.R = %BLOCK_ ;

  11335 20 001361   003000 236007                    LDQ     1536,DL
        20 001362   000000 552110                    STBQ    0,'10'O,PR0

      565    11336    5                  END ;

  11336 20 001363   001402 710000 20                 TRA     s:11344

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:87   
      566    11337    5                  ELSE IF SYM$->VARIABLE.R = %START_BLK THEN DO ;

  11337 20 001364   000000 236100                    LDQ     0,,PR0
        20 001365   777000 376007                    ANQ     -512,DL
        20 001366   004000 116007                    CMPQ    2048,DL
        20 001367   001402 601000 20                 TNZ     s:11344

      567    11338    5                    IF NEXT_AVAILABLE$->BLOCK.SIZE1 < NEXT_AVAILABLE$->BLOCK.SIZE

  11338 20 001370   000010 471400 0                  LDP1    NEXT_AVAILABLE$
        20 001371   100010 220100                    LDX0    8,,PR1
        20 001372   100002 100100                    CMPX0   2,,PR1
        20 001373   001376 603000 20                 TRC     s:11340

      568    11339    5                     THEN NEXT_AVAILABLE$->BLOCK.SIZE1 = NEXT_AVAILABLE$->BLOCK.SIZE ;

  11339 20 001374   100002 221100                    LDX1    2,,PR1
        20 001375   100010 741100                    STX1    8,,PR1

      569    11340    5                    NEXT_AVAILABLE$->BLOCK.SIZE = 0 ;

  11340 20 001376   000000 220003                    LDX0    0,DU
        20 001377   100002 740100                    STX0    2,,PR1

      570    11341    5                    SYM$->VARIABLE.R = %BLOCK_ ;

  11341 20 001400   003000 236007                    LDQ     1536,DL
        20 001401   000000 552110                    STBQ    0,'10'O,PR0

      571    11342    5                  END ;

      572    11343    4                END ;

      573    11344    4              IF SYM$->VARIABLE.B.ALLOCATED THEN DO ;

  11344 20 001402   000001 470400 0                  LDP0    SYM$
        20 001403   000003 236100                    LDQ     3,,PR0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:88   
        20 001404   000001 316003                    CANQ    1,DU
        20 001405   001551 600000 20                 TZE     s:11390

      574    11345                     /* If duplicate declaration of EXTERNAL variable, do not need
      575    11346                        to allocate storage for this copy, but may have to set
      576    11347                        REDEF_NEXT_AVAIL and BLOCK.SIZE in case the EXTERNAL
      577    11348                        variable is redefined. */
      578    11349    5                IF SYM$->VARIABLE.B.REDEF_OBJ THEN DO ;

  11349 20 001406   000400 316003                    CANQ    256,DU
        20 001407   001550 600000 20                 TZE     s:11388

      579    11350    5                  IF NEXT_AVAILABLE$->BLOCK.B.SIZE_256K THEN

  11350 20 001410   000010 471400 0                  LDP1    NEXT_AVAILABLE$
        20 001411   100003 236100                    LDQ     3,,PR1
        20 001412   100000 316003                    CANQ    32768,DU
        20 001413   001417 600000 20                 TZE     s:11353

      580    11351    5                    REDEF_MAX_SIZE = %#256K;

  11351 20 001414   000001 235003                    LDA     1,DU
        20 001415   000022 755000 0                  STA     REDEF_MAX_SIZE
        20 001416   001422 710000 20                 TRA     s:11354

      581    11352    5                  ELSE
      582    11353    5                    REDEF_MAX_SIZE = NEXT_AVAILABLE$->BLOCK.SIZE;

  11353 20 001417   100002 236100                    LDQ     2,,PR1
        20 001420   000022 772000                    QRL     18
        20 001421   000022 756000 0                  STQ     REDEF_MAX_SIZE

      583    11354    5                  REDEF_NEXT_AVAIL = 0 ;

  11354 20 001422   000021 450000 0                  STZ     REDEF_NEXT_AVAIL

      584    11355    5                  CALL RECORD_SIZE (SYM$, RECSIZE);
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:89   

  11355 20 001423   000016 237000 21                 LDAQ    14
        20 001424   000206 757000 0                  STAQ    DONE_FLAG1+3
        20 001425   000506 701000 20                 TSX1    RECORD_SIZE
        20 001426   000000 011000                    NOP     0

      585    11356    5                  IF REDEF_MAX_SIZE < RECSIZE THEN

  11356 20 001427   000022 236000 0                  LDQ     REDEF_MAX_SIZE
        20 001430   000023 116000 0                  CMPQ    RECSIZE
        20 001431   001434 603000 20                 TRC     s:11359

      586    11357    5                    REDEF_MAX_SIZE = RECSIZE;

  11357 20 001432   000023 235000 0                  LDA     RECSIZE
        20 001433   000022 755000 0                  STA     REDEF_MAX_SIZE

      587    11358
      588    11359    5                  SEARCH_ST$ = QUAL$->QLT.BROTHER->QLT.ST$;

  11359 20 001434   000003 470400 0                  LDP0    QUAL$
        20 001435   000002 471500                    LDP1    2,,PR0
        20 001436   100004 236100                    LDQ     4,,PR1
        20 001437   000026 756000 0                  STQ     SEARCH_ST$

      589    11360    5   SEARCH_EXT_REDEFS:
      590    11361    6                  DO WHILE SEARCH_ST$->VARIABLE.B.REDEF_SUB;

  11361 20 001440   000026 471400 0     SEARCH_EXT_* LDP1    SEARCH_ST$
        20 001441   100003 430100                    FSZN    3,,PR1
        20 001442   001467 605000 20                 TPL     s:11370

      591    11362    6                    CALL RECORD_SIZE (SEARCH_ST$, RECSIZE);

  11362 20 001443   000020 237000 21                 LDAQ    16
        20 001444   000206 757000 0                  STAQ    DONE_FLAG1+3
        20 001445   000506 701000 20                 TSX1    RECORD_SIZE
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:90   
        20 001446   000000 011000                    NOP     0

      592    11363    6                    IF REDEF_MAX_SIZE < RECSIZE THEN

  11363 20 001447   000022 236000 0                  LDQ     REDEF_MAX_SIZE
        20 001450   000023 116000 0                  CMPQ    RECSIZE
        20 001451   001454 603000 20                 TRC     s:11365

      593    11364    6                      REDEF_MAX_SIZE = RECSIZE;

  11364 20 001452   000023 235000 0                  LDA     RECSIZE
        20 001453   000022 755000 0                  STA     REDEF_MAX_SIZE

      594    11365    6                    IF SEARCH_ST$->VARIABLE.QLT$->QLT.BROTHER = ADDR(NIL) THEN

  11365 20 001454   000026 470400 0                  LDP0    SEARCH_ST$
        20 001455   000007 471500                    LDP1    7,,PR0
        20 001456   100002 236100                    LDQ     2,,PR1
        20 001457   000000 116000 21                 CMPQ    0
        20 001460   001467 600000 20                 TZE     s:11370

      595    11366    6                      EXIT SEARCH_EXT_REDEFS;
      596    11367    6                    SEARCH_ST$ = SEARCH_ST$->VARIABLE.QLT$->QLT.BROTHER->QLT.ST$;

  11367 20 001461   100002 473500                    LDP3    2,,PR1
        20 001462   300004 236100                    LDQ     4,,PR3
        20 001463   000026 756000 0                  STQ     SEARCH_ST$

      597    11368    6                  END SEARCH_EXT_REDEFS;

  11368 20 001464   000026 470400 0                  LDP0    SEARCH_ST$
        20 001465   000003 430100                    FSZN    3,,PR0
        20 001466   001443 604000 20                 TMI     s:11362

      598    11369
      599    11370    5                  IF REDEF_MAX_SIZE > %#256K THEN

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:91   
  11370 20 001467   000022 235000 0                  LDA     REDEF_MAX_SIZE
        20 001470   000015 115000 21                 CMPA    13
        20 001471   001533 602000 20                 TNC     s:11383

      600    11371    6                    DO;

      601    11372    6                      TEMP$ = COMCOM.BLOCK$;

  11372 20 001472   000145 236000 xsym               LDQ     COMCOM+101
        20 001473   000031 756000 0                  STQ     TEMP$

      602    11373    7                      DO TEMP_UBIN = 2 TO SYM$->VARIABLE.COUNT;

  11373 20 001474   000002 235007                    LDA     2,DL
        20 001475   000027 755000 0                  STA     TEMP_UBIN
        20 001476   001505 710000 20                 TRA     s:11375+3

      603    11374    7                        TEMP$ = TEMP$->BLOCK.NEXT;

  11374 20 001477   000031 470400 0                  LDP0    TEMP$
        20 001500   000004 236100                    LDQ     4,,PR0
        20 001501   000031 756000 0                  STQ     TEMP$

      604    11375    7                      END;

  11375 20 001502   000027 235000 0                  LDA     TEMP_UBIN
        20 001503   000001 035007                    ADLA    1,DL
        20 001504   000027 755000 0                  STA     TEMP_UBIN
        20 001505   000001 470400 0                  LDP0    SYM$
        20 001506   000000 236100                    LDQ     0,,PR0
        20 001507   000777 376007                    ANQ     511,DL
        20 001510   000027 116000 0                  CMPQ    TEMP_UBIN
        20 001511   001477 603000 20                 TRC     s:11374

      605    11376    6                      TEMP_UBIN = SYM$->VARIABLE.LINE_NO;

  11376 20 001512   000002 236100                    LDQ     2,,PR0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:92   
        20 001513   777777 376007                    ANQ     -1,DL
        20 001514   000027 756000 0                  STQ     TEMP_UBIN

      606    11377    6                      CALL Z8AE$ERROR (%E$BLOCK_DATA_LIMIT,

  11377 20 001515   000031 236000 0                  LDQ     TEMP$
        20 001516   000006 036003                    ADLQ    6,DU
        20 001517   000000 235000 21                 LDA     0
        20 001520   000212 757000 0                  STAQ    @RECSIZE+3
        20 001521   000024 237000 21                 LDAQ    20
        20 001522   000210 757000 0                  STAQ    @RECSIZE+1
        20 001523   000210 630400 0                  EPPR0   @RECSIZE+1
        20 001524   000022 631400 21                 EPPR1   18
        20 001525   000000 701000 xent               TSX1    Z8AE$ERROR
        20 001526   000000 011000                    NOP     0

      607    11378    6                                       TEMP_UBIN,,
      608    11379    6                                       TEMP$->BLOCK.DNT$);
      609    11380    6                      COMCOM.DATA_LIMIT_ERROR_FLAGGED = TRUE;

  11380 20 001527   400000 236003                    LDQ     -131072,DU
        20 001530   000506 756000 xsym               STQ     COMCOM+326

      610    11381    6                      COMCOM.OB.CHECK = TRUE;

  11381 20 001531   000072 256000 xsym               ORSQ    COMCOM+58

      611    11382    6                    END;

  11382 20 001532   001550 710000 20                 TRA     s:11388

      612    11383    5                  ELSE IF REDEF_MAX_SIZE = %#256K THEN

  11383 20 001533   000001 115003                    CMPA    1,DU
        20 001534   001541 601000 20                 TNZ     s:11385

      613    11384    5                    NEXT_AVAILABLE$->BLOCK.B.SIZE_256K = TRUE;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:93   

  11384 20 001535   000010 470400 0                  LDP0    NEXT_AVAILABLE$
        20 001536   100000 236003                    LDQ     32768,DU
        20 001537   000003 256100                    ORSQ    3,,PR0
        20 001540   001550 710000 20                 TRA     s:11388

      614    11385    5                  ELSE IF REDEF_MAX_SIZE > NEXT_AVAILABLE$->BLOCK.SIZE THEN

  11385 20 001541   000010 470400 0                  LDP0    NEXT_AVAILABLE$
        20 001542   000002 236100                    LDQ     2,,PR0
        20 001543   000022 772000                    QRL     18
        20 001544   000022 116000 0                  CMPQ    REDEF_MAX_SIZE
        20 001545   001550 603000 20                 TRC     s:11388

      615    11386    5                    NEXT_AVAILABLE$->BLOCK.SIZE = REDEF_MAX_SIZE;

  11386 20 001546   000000 620005                    EAX0    0,AL
        20 001547   000002 740100                    STX0    2,,PR0

      616    11387    5                END ; /* REDEF_OBJ */

      617    11388    4                EXIT CASE_STMT ;

  11388 20 001550   002631 710000 20                 TRA     s:11817

      618    11389    4              END ; /* Duplicate declaration of EXTERNAL variable */
      619    11390    3              IF NEXT_AVAILABLE$->BLOCK.B.SIZE_256K

  11390 20 001551   000010 471400 0                  LDP1    NEXT_AVAILABLE$
        20 001552   100003 236100                    LDQ     3,,PR1
        20 001553   100000 316003                    CANQ    32768,DU
        20 001554   001560 600000 20                 TZE     s:11392

      620    11391    3                THEN BLOCKSIZE = %#256K ;

  11391 20 001555   000001 235003                    LDA     1,DU
        20 001556   000020 755000 0                  STA     BLOCKSIZE
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:94   
        20 001557   001563 710000 20                 TRA     s:11394

      621    11392    3                ELSE BLOCKSIZE = NEXT_AVAILABLE$->BLOCK.SIZE ;

  11392 20 001560   100002 236100                    LDQ     2,,PR1
        20 001561   000022 772000                    QRL     18
        20 001562   000020 756000 0                  STQ     BLOCKSIZE

      622    11393
      623    11394    3              IF (SYM$->VARIABLE.TYPE = %TYQ OR SYM$ -> VARIABLE.TYPE = %TYX OR

  11394 20 001563   000002 220100                    LDX0    2,,PR0
        20 001564   000005 100003                    CMPX0   5,DU
        20 001565   001621 600000 20                 TZE     s:11394+30
        20 001566   000011 100003                    CMPX0   9,DU
        20 001567   001621 600000 20                 TZE     s:11394+30
        20 001570   000010 100003                    CMPX0   8,DU
        20 001571   001600 601000 20                 TNZ     s:11394+13
        20 001572   000001 236100                    LDQ     1,,PR0
        20 001573   007777 376007                    ANQ     4095,DL
        20 001574   000005 116007                    CMPQ    5,DL
        20 001575   001600 602000 20                 TNC     s:11394+13
        20 001576   000011 116007                    CMPQ    9,DL
        20 001577   001621 602000 20                 TNC     s:11394+30
        20 001600   000000 100003                    CMPX0   0,DU
        20 001601   001611 601000 20                 TNZ     s:11394+22
        20 001602   000001 236100                    LDQ     1,,PR0
        20 001603   040000 316007                    CANQ    16384,DL
        20 001604   001611 601000 20                 TNZ     s:11394+22
        20 001605   000001 236100                    LDQ     1,,PR0
        20 001606   000077 376007                    ANQ     63,DL
        20 001607   000007 376007                    ANQ     7,DL
        20 001610   001621 600000 20                 TZE     s:11394+30
        20 001611   000003 236100                    LDQ     3,,PR0
        20 001612   000010 316007                    CANQ    8,DL
        20 001613   001621 601000 20                 TNZ     s:11394+30
        20 001614   000003 473400 0                  LDP3    QUAL$
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:95   
        20 001615   300004 474500                    LDP4    4,,PR3
        20 001616   400003 236100                    LDQ     3,,PR4
        20 001617   010000 316003                    CANQ    4096,DU
        20 001620   001634 601000 20                 TNZ     s:11409
        20 001621   000020 236000 0                  LDQ     BLOCKSIZE
        20 001622   000001 376007                    ANQ     1,DL
        20 001623   000001 116007                    CMPQ    1,DL
        20 001624   001634 601000 20                 TNZ     s:11409

      624    11395    3                 (SYM$->VARIABLE.TYPE = %TYA AND SYM$->VARIABLE.ADSC.N >= 5 AND SYM$->
             11395                          VARIABLE.ADSC.N <= 8) OR
      625    11396    3                 (SYM$->VARIABLE.TYPE = %TYD AND (NOT SYM$->VARIABLE.NDSC.TN) AND
      626    11397    3                    MOD (SYM$->VARIABLE.NDSC.N,8) = 0) OR      /*#32757*/
      627    11398    3                  SYM$->VARIABLE.B.MOD_2 OR                 /*#29142*/
      628    11399    3                    NOT QUAL$->QLT.ST$->VARIABLE.B.ELEMENTARY)
      629    11400    3                   AND MOD (BLOCKSIZE,2) = 1 THEN
      630    11401
      631    11402                             /* increment to even word */
      632    11403
      633    11404    4                DO ;

      634    11405    4                  BLOCKSIZE = BLOCKSIZE + 1 ;

  11405 20 001625   000020 235000 0                  LDA     BLOCKSIZE
        20 001626   000001 035007                    ADLA    1,DL
        20 001627   000020 755000 0                  STA     BLOCKSIZE

      635    11406    4                  IF BLOCKSIZE >= %#256K THEN

  11406 20 001630   000001 115003                    CMPA    1,DU
        20 001631   001634 602000 20                 TNC     s:11409

      636    11407    4                    NEXT_AVAILABLE$->BLOCK.B.SIZE_256K = TRUE ;

  11407 20 001632   100000 236003                    LDQ     32768,DU
        20 001633   100003 256100                    ORSQ    3,,PR1

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:96   
      637    11408    4                END ;

      638    11409    3              IF SYM$->VARIABLE.TYPE = %TYD THEN

  11409 20 001634   000002 220100                    LDX0    2,,PR0
        20 001635   001654 601000 20                 TNZ     s:11415

      639    11410    3                IF SYM$->VARIABLE.NDSC.TN /* Packed */ THEN

  11410 20 001636   000001 236100                    LDQ     1,,PR0
        20 001637   040000 316007                    CANQ    16384,DL
        20 001640   001654 600000 20                 TZE     s:11415

      640    11411    3                  IF NOT SYM$->VARIABLE.B.DIGIT /* Byte-, not digit-, aligned */ THEN

  11411 20 001641   000003 236100                    LDQ     3,,PR0
        20 001642   000200 316007                    CANQ    128,DL
        20 001643   001654 601000 20                 TNZ     s:11415

      641    11412    3                    IF MOD (SYM$->VARIABLE.NDSC.N, 2) ~= 0 /* Odd length */ THEN

  11412 20 001644   000001 236100                    LDQ     1,,PR0
        20 001645   000077 376007                    ANQ     63,DL
        20 001646   000001 376007                    ANQ     1,DL
        20 001647   001654 600000 20                 TZE     s:11415

      642    11413    3                      SYM$->VARIABLE.NDSC.CN = 1;

  11413 20 001650   000001 236100                    LDQ     1,,PR0
        20 001651   000014 376000 21                 ANQ     12
        20 001652   100000 276007                    ORQ     32768,DL
        20 001653   000001 756100                    STQ     1,,PR0

      643    11414                           /* Start at character 1 so it will end on byte boundary. */
      644    11415    3              IF SYM$->VARIABLE.B.MOD_8 THEN

  11415 20 001654   000001 470400 0                  LDP0    SYM$
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:97   
        20 001655   000003 236100                    LDQ     3,,PR0
        20 001656   000400 316007                    CANQ    256,DL
        20 001657   001671 600000 20                 TZE     s:11434

      645    11416    4                DO ;

      646    11417    4                  BLOCKSIZE = ((BLOCKSIZE + 7) / 8) * 8 ; /* Force to mod 8 bound */

  11417 20 001660   000020 236000 0                  LDQ     BLOCKSIZE
        20 001661   000007 036007                    ADLQ    7,DL
        20 001662   000003 772000                    QRL     3
        20 001663   000003 736000                    QLS     3
        20 001664   000020 756000 0                  STQ     BLOCKSIZE

      647    11418    4                  IF BLOCKSIZE >= %#256K THEN

  11418 20 001665   000001 116003                    CMPQ    1,DU
        20 001666   001671 602000 20                 TNC     s:11434

      648    11419    4                    NEXT_AVAILABLE$->BLOCK.B.SIZE_256K = TRUE ;

  11419 20 001667   100000 236003                    LDQ     32768,DU
        20 001670   100003 256100                    ORSQ    3,,PR1

      649    11420    4                END ;

      650    11421        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:98   
      651    11422        /*V*
      652    11423            REDEFINITION -- If the variable is the object of a redefines clause,
      653    11424                            the initial setting of the redefinition variables is done.
      654    11425                            This is accomplished by searching thru the data items
      655    11426                            that redefine the object.  If one of them is double word
      656    11427                            aligned then all of the items are double word aligned and
      657    11428                            filler may have to be added.
      658    11429
      659    11430                            If the item is the subject of a redefinition then the item's
      660    11431                            position in .DATA. is set to the position of the object.
      661    11432        */
      662    11433         %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:99   
      663    11434    3              IF SYM$->VARIABLE.B.REDEF_SUB THEN

  11434 20 001671   000003 430100                    FSZN    3,,PR0
        20 001672   001713 605000 20                 TPL     s:11449

      664    11435    4                DO;

      665    11436    4                  IF COMCOM.OB.FIPS.LEVEL >= %HIGH_LEV THEN

  11436 20 001673   000036 720000 xsym               LXL0    COMCOM+30
        20 001674   001707 604400 20                 TMOZ    s:11445

      666    11437                         %VARIABLE_OCCURS_CHECK(@ERROR_NO=%E$REDEF_SUB_VAR_OCCUR) ;

  11439 20 001675   000003 236100                    LDQ     3,,PR0
        20 001676   000200 316003                    CANQ    128,DU
        20 001677   001707 600000 20                 TZE     s:11445

  11440 20 001700   000002 236100                    LDQ     2,,PR0
        20 001701   777777 376007                    ANQ     -1,DL
        20 001702   000133 756000 xsym               STQ     COMCOM+91

  11441 20 001703   000027 630400 21                 EPPR0   23
        20 001704   000001 631400 21                 EPPR1   1
        20 001705   000000 701000 xent               TSX1    Z8AE$ERROR
        20 001706   000000 011000                    NOP     0

      667    11445    4                  SYM$->VARIABLE.SA = REDEF_NEXT_AVAIL;

  11445 20 001707   000021 720000 0                  LXL0    REDEF_NEXT_AVAIL
        20 001710   000001 470400 0                  LDP0    SYM$
        20 001711   000001 740100                    STX0    1,,PR0

      668    11446    4                END;

  11446 20 001712   002537 710000 20                 TRA     s:11783

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:100  
      669    11447    3              ELSE
      670    11448    4              DO;

      671    11449    4               IF SYM$->VARIABLE.B.REDEF_OBJ THEN

  11449 20 001713   000003 236100                    LDQ     3,,PR0
        20 001714   000400 316003                    CANQ    256,DU
        20 001715   002035 600000 20                 TZE     s:11498

      672    11450    5                DO ;

      673    11451
      674    11452    5                  IF COMCOM.OB.FIPS.LEVEL >= %HIGH_LEV THEN

  11452 20 001716   000036 720000 xsym               LXL0    COMCOM+30
        20 001717   001731 604400 20                 TMOZ    s:11462

      675    11453                         %VARIABLE_OCCURS_CHECK(@ERROR_NO=%E$REDEF_OBJ_VAR_OCCUR) ;

  11455 20 001720   000200 316003                    CANQ    128,DU
        20 001721   001731 600000 20                 TZE     s:11462

  11456 20 001722   000002 236100                    LDQ     2,,PR0
        20 001723   777777 376007                    ANQ     -1,DL
        20 001724   000133 756000 xsym               STQ     COMCOM+91

  11457 20 001725   000031 630400 21                 EPPR0   25
        20 001726   000001 631400 21                 EPPR1   1
        20 001727   000000 701000 xent               TSX1    Z8AE$ERROR
        20 001730   000000 011000                    NOP     0

      676    11461
      677    11462    5                  CALL RECORD_SIZE (SYM$, RECSIZE);

  11462 20 001731   000016 237000 21                 LDAQ    14
        20 001732   000206 757000 0                  STAQ    DONE_FLAG1+3
        20 001733   000506 701000 20                 TSX1    RECORD_SIZE
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:101  
        20 001734   000000 011000                    NOP     0

      678    11463    5                  REDEF_MAX_SIZE = RECSIZE;

  11463 20 001735   000023 235000 0                  LDA     RECSIZE
        20 001736   000022 755000 0                  STA     REDEF_MAX_SIZE

      679    11464
      680    11465    5                  SEARCH_ST$ = QUAL$->QLT.BROTHER->QLT.ST$ ;

  11465 20 001737   000003 470400 0                  LDP0    QUAL$
        20 001740   000002 471500                    LDP1    2,,PR0
        20 001741   100004 236100                    LDQ     4,,PR1
        20 001742   000026 756000 0                  STQ     SEARCH_ST$

      681    11466
      682    11467    5                    SEARCH_REDEF_SUBJECTS:
      683    11468    6                      DO WHILE SEARCH_ST$->VARIABLE.B.REDEF_SUB ;

  11468 20 001743   000026 471400 0     SEARCH_REDE* LDP1    SEARCH_ST$
        20 001744   100003 430100                    FSZN    3,,PR1
        20 001745   002030 605000 20                 TPL     s:11488

      684    11469
      685    11470    6                        CALL RECORD_SIZE (SEARCH_ST$, RECSIZE);

  11470 20 001746   000020 237000 21                 LDAQ    16
        20 001747   000206 757000 0                  STAQ    DONE_FLAG1+3
        20 001750   000506 701000 20                 TSX1    RECORD_SIZE
        20 001751   000000 011000                    NOP     0

      686    11471    6                        IF REDEF_MAX_SIZE < RECSIZE THEN

  11471 20 001752   000022 236000 0                  LDQ     REDEF_MAX_SIZE
        20 001753   000023 116000 0                  CMPQ    RECSIZE
        20 001754   001757 603000 20                 TRC     s:11474

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:102  
      687    11472    6                          REDEF_MAX_SIZE = RECSIZE;

  11472 20 001755   000023 235000 0                  LDA     RECSIZE
        20 001756   000022 755000 0                  STA     REDEF_MAX_SIZE

      688    11473
      689    11474    6                       IF (SEARCH_ST$->VARIABLE.TYPE = %TYQ OR SEARCH_ST$ -> VARIABLE.
             11474                                 TYPE = %TYX OR

  11474 20 001757   000026 470400 0                  LDP0    SEARCH_ST$
        20 001760   000002 220100                    LDX0    2,,PR0
        20 001761   000005 100003                    CMPX0   5,DU
        20 001762   002011 600000 20                 TZE     s:11480
        20 001763   000011 100003                    CMPX0   9,DU
        20 001764   002011 600000 20                 TZE     s:11480
        20 001765   000010 100003                    CMPX0   8,DU
        20 001766   001775 601000 20                 TNZ     s:11474+14
        20 001767   000001 236100                    LDQ     1,,PR0
        20 001770   007777 376007                    ANQ     4095,DL
        20 001771   000005 116007                    CMPQ    5,DL
        20 001772   001775 602000 20                 TNC     s:11474+14
        20 001773   000011 116007                    CMPQ    9,DL
        20 001774   002011 602000 20                 TNC     s:11480
        20 001775   000000 100003                    CMPX0   0,DU
        20 001776   002006 601000 20                 TNZ     s:11474+23
        20 001777   000001 236100                    LDQ     1,,PR0
        20 002000   040000 316007                    CANQ    16384,DL
        20 002001   002006 601000 20                 TNZ     s:11474+23
        20 002002   000001 236100                    LDQ     1,,PR0
        20 002003   000077 376007                    ANQ     63,DL
        20 002004   000007 376007                    ANQ     7,DL
        20 002005   002011 600000 20                 TZE     s:11480
        20 002006   000003 236100                    LDQ     3,,PR0
        20 002007   010000 316003                    CANQ    4096,DU
        20 002010   002016 601000 20                 TNZ     s:11481

      690    11475    6                           (SEARCH_ST$->VARIABLE.TYPE = %TYA AND SEARCH_ST$->VARIABLE.
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:103  
             11475                                    ADSC.N >= 5
      691    11476    6                                                             AND SEARCH_ST$->VARIABLE.
             11476                                                                      ADSC.N <= 8)
      692    11477    6                            OR (SEARCH_ST$->VARIABLE.TYPE = %TYD AND (NOT SEARCH_ST$->
             11477                                     VARIABLE.NDSC.TN) AND
      693    11478    6                                   MOD (SEARCH_ST$->VARIABLE.NDSC.N,8) = 0)
      694    11479    6                            OR NOT SEARCH_ST$->VARIABLE.B.ELEMENTARY) THEN
      695    11480    6                          BLOCKSIZE = (BLOCKSIZE + 1) / 2 * 2;

  11480 20 002011   000020 236000 0                  LDQ     BLOCKSIZE
        20 002012   000001 036007                    ADLQ    1,DL
        20 002013   000001 772000                    QRL     1
        20 002014   000001 736000                    QLS     1
        20 002015   000020 756000 0                  STQ     BLOCKSIZE

      696    11481    6                        IF SEARCH_ST$->VARIABLE.QLT$->QLT.BROTHER

  11481 20 002016   000007 471500                    LDP1    7,,PR0
        20 002017   100002 236100                    LDQ     2,,PR1
        20 002020   000000 116000 21                 CMPQ    0
        20 002021   002030 600000 20                 TZE     s:11488

      697    11482    6                            = ADDR (NIL) THEN
      698    11483    6                          EXIT SEARCH_REDEF_SUBJECTS ;
      699    11484    6                        SEARCH_ST$ = SEARCH_ST$->VARIABLE.QLT$->QLT.BROTHER->QLT.ST$ ;

  11484 20 002022   100002 473500                    LDP3    2,,PR1
        20 002023   300004 236100                    LDQ     4,,PR3
        20 002024   000026 756000 0                  STQ     SEARCH_ST$

      700    11485
      701    11486    6                      END SEARCH_REDEF_SUBJECTS ;

  11486 20 002025   000026 470400 0                  LDP0    SEARCH_ST$
        20 002026   000003 430100                    FSZN    3,,PR0
        20 002027   001746 604000 20                 TMI     s:11470

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:104  
      702    11487
      703    11488    5                  RECSIZE = REDEF_MAX_SIZE ;

  11488 20 002030   000022 235000 0                  LDA     REDEF_MAX_SIZE
        20 002031   000023 755000 0                  STA     RECSIZE

      704    11489    5                  REDEF_NEXT_AVAIL = BLOCKSIZE ;

  11489 20 002032   000020 236000 0                  LDQ     BLOCKSIZE
        20 002033   000021 756000 0                  STQ     REDEF_NEXT_AVAIL

      705    11490    5                END ;

  11490 20 002034   002151 710000 20                 TRA     s:11575

      706    11491        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:105  
      707    11492        /*V*
      708    11493            SAME_RECORD_CHECK -- For FD items with the SAME RECORD clause, check all
      709    11494                                 items this one is linked with, to find the biggest,
      710    11495                                 and add 1 for each LINAGE COUNTER. The next available
      711    11496                                 location counter is updated.
      712    11497        */
      713    11498    4              ELSE IF (SYM$->ST.ID = %FD OR SYM$->ST.ID = %SD) AND

  11498 20 002035   000000 220100                    LDX0    0,,PR0
        20 002036   001002 100003                    CMPX0   514,DU
        20 002037   002042 600000 20                 TZE     s:11498+5
        20 002040   001003 100003                    CMPX0   515,DU
        20 002041   002145 601000 20                 TNZ     s:11565
        20 002042   000000 473400 11                 LDP3    LTS$
        20 002043   300043 236100                    LDQ     35,,PR3
        20 002044   000000 116000 21                 CMPQ    0
        20 002045   002145 600000 20                 TZE     s:11565

      714    11499    5                  LTS$->FILE_LTS.SAME_RECORD.LINK ~= ADDR (NIL) THEN DO ;

      715    11500    5                RECSIZE = 0;

  11500 20 002046   000023 450000 0                  STZ     RECSIZE

      716    11501    5                LINAGE_NUM = 0;

  11501 20 002047   000024 450000 0                  STZ     LINAGE_NUM

      717    11502    6                DO UNTIL LTS$ = ADDR (NIL) ;

      718    11503                       /* The first SON is INFO_RECORD# whose size is that of the FD
      719    11504                          excluding the LINAGE COUNTER if any. */
      720    11505    6                  ST$ = LTS$->FILE_LTS.ST$->VARIABLE.QLT$->QLT.SON->QLT.ST$ ;

  11505 20 002050   000000 470400 11                 LDP0    LTS$
        20 002051   000001 471500                    LDP1    1,,PR0
        20 002052   100007 473500                    LDP3    7,,PR1
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:106  
        20 002053   300003 474500                    LDP4    3,,PR3
        20 002054   400004 236100                    LDQ     4,,PR4
        20 002055   000000 756000 9                  STQ     ST$

      721    11506                       /* Assume VARIABLE.TYPE = %TYA for now.
      722    11507                          Z8FC$S_A_UPDATE will check if this is true. */
      723    11508    6                  IF ST$->VARIABLE.B.LENGTH_4096 THEN

  11508 20 002056   000000 475400 9                  LDP5    ST$
        20 002057   500003 236100                    LDQ     3,,PR5
        20 002060   004000 316003                    CANQ    2048,DU
        20 002061   002117 600000 20                 TZE     s:11556

      724    11509    7                    DO ;

      725    11510                           %GET_LTS (@ID=%LONG, @ST$=ST$, @RETURN$=LONG$) ;

  11512 20 002062   500005 236100                    LDQ     5,,PR5
        20 002063   000000 116000 21                 CMPQ    0
        20 002064   002074 600000 20                 TZE     s:11546
        20 002065   500005 476500                    LDP6    5,,PR5
        20 002066   600000 220100                    LDX0    0,,PR6
        20 002067   001105 100003                    CMPX0   581,DU
        20 002070   002074 601000 20                 TNZ     s:11546

  11520 20 002071   600003 236100                    LDQ     3,,PR6
        20 002072   000005 756000 0                  STQ     LONG$

  11544 20 002073   002106 710000 20                 TRA     s:11553

  11546 20 002074   000000 116000 21                 CMPQ    0
        20 002075   002104 600000 20                 TZE     s:11550
        20 002076   500005 476500                    LDP6    5,,PR5
        20 002077   600000 220100                    LDX0    0,,PR6
        20 002100   001110 100003                    CMPX0   584,DU
        20 002101   002104 601000 20                 TNZ     s:11550

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:107  
  11548 20 002102   000005 756000 0                  STQ     LONG$
        20 002103   002106 710000 20                 TRA     s:11553

  11550 20 002104   000000 236000 21                 LDQ     0
        20 002105   000005 756000 0                  STQ     LONG$

      726    11553    7                      RECSIZE = MAXIMUM (RECSIZE,

  11553 20 002106   000005 476400 0                  LDP6    LONG$
        20 002107   600001 236100                    LDQ     1,,PR6
        20 002110   000003 036007                    ADLQ    3,DL
        20 002111   000002 772000                    QRL     2
        20 002112   000023 116000 0                  CMPQ    RECSIZE
        20 002113   002115 603000 20                 TRC     s:11553+7
        20 002114   000023 236000 0                  LDQ     RECSIZE
        20 002115   000023 756000 0                  STQ     RECSIZE

      727    11554    7                          (LONG$->LONG.LENGTH + 3) / 4) ;
      728    11555    7                    END ;

  11555 20 002116   002127 710000 20                 TRA     s:11558

      729    11556    6                  ELSE RECSIZE = MAXIMUM (RECSIZE,

  11556 20 002117   500001 236100                    LDQ     1,,PR5
        20 002120   007777 376007                    ANQ     4095,DL
        20 002121   000003 036007                    ADLQ    3,DL
        20 002122   000002 772000                    QRL     2
        20 002123   000023 116000 0                  CMPQ    RECSIZE
        20 002124   002126 603000 20                 TRC     s:11556+7
        20 002125   000023 236000 0                  LDQ     RECSIZE
        20 002126   000023 756000 0                  STQ     RECSIZE

      730    11557    6                      (ST$->VARIABLE.ADSC.N + 3) / 4) ;
      731    11558    6                  IF LTS$->FILE_LTS.LINAGE_COUNTER$ ~= ADDR (NIL) THEN

  11558 20 002127   000054 236100                    LDQ     44,,PR0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:108  
        20 002130   000000 116000 21                 CMPQ    0
        20 002131   002135 600000 20                 TZE     s:11560

      732    11559    6                    LINAGE_NUM = LINAGE_NUM + 1 ;

  11559 20 002132   000024 235000 0                  LDA     LINAGE_NUM
        20 002133   000001 035007                    ADLA    1,DL
        20 002134   000024 755000 0                  STA     LINAGE_NUM

      733    11560    6                  LTS$ = LTS$->FILE_LTS.SAME_RECORD.LINK ;

  11560 20 002135   000043 236100                    LDQ     35,,PR0
        20 002136   000000 756000 11                 STQ     LTS$

      734    11561    6                END ;

  11561 20 002137   000000 116000 21                 CMPQ    0
        20 002140   002050 601000 20                 TNZ     s:11505

      735    11562    5                RECSIZE = RECSIZE + LINAGE_NUM ;

  11562 20 002141   000023 236000 0                  LDQ     RECSIZE
        20 002142   000024 036000 0                  ADLQ    LINAGE_NUM
        20 002143   000023 756000 0                  STQ     RECSIZE

      736    11563    5              END ;

  11563 20 002144   002151 710000 20                 TRA     s:11575

      737    11564    4             ELSE
      738    11565    4               CALL RECORD_SIZE (SYM$, RECSIZE);

  11565 20 002145   000016 237000 21                 LDAQ    14
        20 002146   000206 757000 0                  STAQ    DONE_FLAG1+3
        20 002147   000506 701000 20                 TSX1    RECORD_SIZE
        20 002150   000000 011000                    NOP     0

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:109  
      739    11566        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:110  
      740    11567        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:111  
      741    11568        /*E*
      742    11569              ERROR:  DATA_LIMIT
      743    11570         MESSAGE: WORKING-STORAGE data limit of 256K has been exceeded, code generation has
             11570         been suspended.
      744    11571        DESCRIPTION:  This error is produced when the main storage counter goes
      745    11572                      beyond 256K words.  The counters are reset to zero.
      746    11573        */
      747    11574
      748    11575    4              IF BLOCKSIZE + RECSIZE >= %#256K THEN

  11575 20 002151   000020 236000 0                  LDQ     BLOCKSIZE
        20 002152   000023 036000 0                  ADLQ    RECSIZE
        20 002153   000001 116003                    CMPQ    1,DU
        20 002154   002502 602000 20                 TNC     s:11761

      749    11576    4   BLOCK_OVERFLOW:
      750    11577    5                DO ;

  11577 20 002155                       BLOCK_OVERF* null
      751    11578
      752    11579    5                  IF NOT(COMCOM.DATA_LIMIT_ERROR_FLAGGED) THEN

  11579 20 002155   000506 234000 xsym               SZN     COMCOM+326
        20 002156   002474 604000 20                 TMI     s:11757

      753    11580    6                    DO ;

      754    11581    6                      COMCOM.CURRENT.LINE = SYM$->VARIABLE.LINE_NO ;

  11581 20 002157   000001 470400 0                  LDP0    SYM$
        20 002160   000002 236100                    LDQ     2,,PR0
        20 002161   777777 376007                    ANQ     -1,DL
        20 002162   000133 756000 xsym               STQ     COMCOM+91

      755    11582    6                      IF SYM$->VARIABLE.COUNT = O2COM.WORK_STOR_BLKNUM THEN

  11582 20 002163   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:112  
        20 002164   000777 376007                    ANQ     511,DL
        20 002165   000012 116000 13                 CMPQ    O2COM+10
        20 002166   002446 601000 20                 TNZ     s:11741

      756    11583    7                        DO ;

      757    11584    7                          IF RECSIZE > %#256K OR NOT COMCOM.OB.MS_DATA

  11584 20 002167   000023 235000 0                  LDA     RECSIZE
        20 002170   000015 115000 21                 CMPA    13
        20 002171   002174 603000 20                 TRC     s:11585
        20 002172   000074 234000 xsym               SZN     COMCOM+60
        20 002173   002201 604000 20                 TMI     s:11586

      758    11585    7                            THEN CALL Z8AE$ERROR (%E$DATA_LIMIT) ;

  11585 20 002174   000033 630400 21                 EPPR0   27
        20 002175   000001 631400 21                 EPPR1   1
        20 002176   000000 701000 xent               TSX1    Z8AE$ERROR
        20 002177   000000 011000                    NOP     0
        20 002200   002471 710000 20                 TRA     s:11753

      759    11586    8                          ELSE IF BLOCKSIZE ~= 0 THEN DO ;

  11586 20 002201   000020 235000 0                  LDA     BLOCKSIZE
        20 002202   002442 600000 20                 TZE     s:11736

      760    11587    8                            BLKNAME = COMCOM.BLOCK$ -> BLOCK.DNT$ -> DNT.TEXT.NAME ;

  11587 20 002203   000145 471400 xsym               LDP1    COMCOM+101
        20 002204   100006 473500                    LDP3    6,,PR1
        20 002205   300004 220100                    LDX0    4,,PR3
        20 002206   040000 100540                    MLR     fill='040'O
        20 002207   300004 400010                    ADSC9   4,,PR3                   cn=2,n=*X0
        20 002210   000011 000034 0                  ADSC9   BLKNAME                  cn=0,n=28

      761    11588    8                            CALL BINCHAR (TEMP_CHAR, COMCOM.BLOCKC + 1) ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:113  

  11588 20 002211   000144 235000 xsym               LDA     COMCOM+100
        20 002212   000001 035007                    ADLA    1,DL
        20 002213   000210 755000 0                  STA     @RECSIZE+1
        20 002214   000000 301400                    BTD
        20 002215   000210 000004 0                  NDSC9   @RECSIZE+1               cn=0,s=lsgnf,sf=0,n=4
        20 002216   000030 030004 0                  NDSC9   TEMP_CHAR                cn=0,s=nosgn,sf=0,n=4

      762    11589    8                            IF COMCOM.BLOCKC < 9 THEN TEMP_UBIN = 4 ;

  11589 20 002217   000144 236000 xsym               LDQ     COMCOM+100
        20 002220   000011 116007                    CMPQ    9,DL
        20 002221   002225 605000 20                 TPL     s:11590

  11589 20 002222   000004 235007                    LDA     4,DL
        20 002223   000027 755000 0                  STA     TEMP_UBIN
        20 002224   002234 710000 20                 TRA     s:11592

      763    11590    8                            ELSE IF COMCOM.BLOCKC < 99 THEN TEMP_UBIN = 3 ;

  11590 20 002225   000143 116007                    CMPQ    99,DL
        20 002226   002232 605000 20                 TPL     s:11591

  11590 20 002227   000003 235007                    LDA     3,DL
        20 002230   000027 755000 0                  STA     TEMP_UBIN
        20 002231   002234 710000 20                 TRA     s:11592

      764    11591    8                            ELSE TEMP_UBIN = 2 ;

  11591 20 002232   000002 235007                    LDA     2,DL
        20 002233   000027 755000 0                  STA     TEMP_UBIN

      765    11592    8                            CALL INSERT (BLKNAME, TEMP_UBIN, 5 - TEMP_UBIN,

  11592 20 002234   777772 620005                    EAX0    -6,AL
        20 002235   777777 660003                    ERX0    -1,DU
        20 002236   040045 100445                    MLR     fill='040'O
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:114  
        20 002237   000027 600010 0                  ADSC9   TEMP_UBIN,A              cn=3,n=*X0
        20 002240   000011 000010 0                  ADSC9   BLKNAME,A                cn=0,n=*X0

      766    11593    8                                SUBSTR (TEMP_CHAR, TEMP_UBIN - 1)) ;
      767    11594                                 %NEW_DNT (@SIZE =
             11594                                     "COMCOM.BLOCK$ -> BLOCK.DNT$ -> DNT.TEXT.LENGTH",
      768    11595                                           @NAME = BLKNAME) ;

  11598 20 002241   100006 473500                    LDP3    6,,PR1
        20 002242   300004 236100                    LDQ     4,,PR3
        20 002243   000022 772000                    QRL     18
        20 002244   000025 036007                    ADLQ    21,DL
        20 002245   000002 772000                    QRL     2
        20 002246   000000 756000 1                  STQ     ITERATION

  11599 20 002247   000002 036000 3                  ADLQ    DNT_+2
        20 002250   002263 604000 20                 TMI     s:11601
        20 002251   000003 116000 3                  CMPQ    DNT_+3
        20 002252   002263 602000 20                 TNC     s:11601

  11600 20 002253   000034 236000 21                 LDQ     28
        20 002254   000210 756000 0                  STQ     @RECSIZE+1
        20 002255   000210 633400 0                  EPPR3   @RECSIZE+1
        20 002256   000211 453400 0                  STP3    @RECSIZE+2
        20 002257   000211 630400 0                  EPPR0   @RECSIZE+2
        20 002260   000001 631400 21                 EPPR1   1
        20 002261   000000 701000 xent               TSX1    Z8AR$RESERVER
        20 002262   000000 011000                    NOP     0

  11601 20 002263   000002 236000 3                  LDQ     DNT_+2
        20 002264   000022 736000                    QLS     18
        20 002265   000001 036000 3                  ADLQ    DNT_+1
        20 002266   000000 756000 2                  STQ     DNT$

  11602 20 002267   000002 236000 3                  LDQ     DNT_+2
        20 002270   000000 036000 1                  ADLQ    ITERATION
        20 002271   000002 756000 3                  STQ     DNT_+2
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:115  

  11603 20 002272   001046 220003                    LDX0    550,DU
        20 002273   000000 470400 2                  LDP0    DNT$
        20 002274   000000 740100                    STX0    0,,PR0

  11604 20 002275   000000 721000 1                  LXL1    ITERATION
        20 002276   000000 470400 2                  LDP0    DNT$
        20 002277   000000 441100                    SXL1    0,,PR0

  11605 20 002300   000145 470400 xsym               LDP0    COMCOM+101
        20 002301   000006 471500                    LDP1    6,,PR0
        20 002302   100004 221100                    LDX1    4,,PR1
        20 002303   000000 473400 2                  LDP3    DNT$
        20 002304   300004 741100                    STX1    4,,PR3

  11608 20 002305   000000 236000 21                 LDQ     0
        20 002306   300001 756100                    STQ     1,,PR3

  11609 20 002307   300002 756100                    STQ     2,,PR3

  11610 20 002310   000000 222003                    LDX2    0,DU
        20 002311   300003 742100                    STX2    3,,PR3

  11611 20 002312   000000 223003                    LDX3    0,DU
        20 002313   300003 443100                    SXL3    3,,PR3

  11612 20 002314   040140 100400                    MLR     fill='040'O
        20 002315   000011 000034 0                  ADSC9   BLKNAME                  cn=0,n=28
        20 002316   300004 400011                    ADSC9   4,,PR3                   cn=2,n=*X1

      769    11653                                 %NEW_BLOCK (@R = %BLOCK_, @DNT$ = DNT$) ;

  11657 20 002317   000002 236000 10                 LDQ     ST_+2
        20 002320   000013 036007                    ADLQ    11,DL
        20 002321   000003 116000 10                 CMPQ    ST_+3
        20 002322   002333 604000 20                 TMI     s:11659

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:116  
  11658 20 002323   000035 236000 21                 LDQ     29
        20 002324   000210 756000 0                  STQ     @RECSIZE+1
        20 002325   000210 630400 0                  EPPR0   @RECSIZE+1
        20 002326   000211 450400 0                  STP0    @RECSIZE+2
        20 002327   000211 630400 0                  EPPR0   @RECSIZE+2
        20 002330   000001 631400 21                 EPPR1   1
        20 002331   000000 701000 xent               TSX1    Z8AR$RESERVER
        20 002332   000000 011000                    NOP     0

  11659 20 002333   000002 236000 10                 LDQ     ST_+2
        20 002334   000022 736000                    QLS     18
        20 002335   000001 036000 10                 ADLQ    ST_+1
        20 002336   000000 756000 9                  STQ     ST$

  11660 20 002337   000013 236007                    LDQ     11,DL
        20 002340   000002 056000 10                 ASQ     ST_+2

  11664 20 002341   000144 054000 xsym               AOS     COMCOM+100

  11665 20 002342   000000 470400 9                  LDP0    ST$
        20 002343   000144 236000 xsym               LDQ     COMCOM+100
        20 002344   000000 552104                    STBQ    0,'04'O,PR0

  11673 20 002345   000774 220003                    LDX0    508,DU
        20 002346   000000 470400 9                  LDP0    ST$
        20 002347   000000 740100                    STX0    0,,PR0

  11674 20 002350   000000 470400 9                  LDP0    ST$
        20 002351   003000 236007                    LDQ     1536,DL
        20 002352   000000 552110                    STBQ    0,'10'O,PR0

  11675 20 002353   000000 221003                    LDX1    0,DU
        20 002354   000000 470400 9                  LDP0    ST$
        20 002355   000002 741100                    STX1    2,,PR0

  11676 20 002356   000133 722000 xsym               LXL2    COMCOM+91
        20 002357   000002 442100                    SXL2    2,,PR0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:117  

  11677 20 002360   000003 450100                    STZ     3,,PR0

  11678 20 002361   000000 236000 21                 LDQ     0
        20 002362   000004 756100                    STQ     4,,PR0

  11679 20 002363   000000 236000 2                  LDQ     DNT$
        20 002364   000006 756100                    STQ     6,,PR0

  11680 20 002365   000000 236000 21                 LDQ     0
        20 002366   000007 756100                    STQ     7,,PR0

  11690 20 002367   000012 756100                    STQ     10,,PR0

      770    11717    8                            NEXT_AVAILABLE$ -> BLOCK.SIZE = BLOCKSIZE ;

  11717 20 002370   000020 723000 0                  LXL3    BLOCKSIZE
        20 002371   000010 471400 0                  LDP1    NEXT_AVAILABLE$
        20 002372   100002 743100                    STX3    2,,PR1

      771    11718    9                            DO TEMP_UBIN = O2COM.WORK_STOR_BLKNUM + 2 TO COMCOM.BLOCKC
             11718                                     ;

  11718 20 002373   000012 235000 13                 LDA     O2COM+10
        20 002374   000002 035007                    ADLA    2,DL
        20 002375   000027 755000 0                  STA     TEMP_UBIN
        20 002376   002405 710000 20                 TRA     s:11720+3

      772    11719    9                              NEXT_AVAILABLE$ = NEXT_AVAILABLE$ -> BLOCK.NEXT ;

  11719 20 002377   000010 470400 0                  LDP0    NEXT_AVAILABLE$
        20 002400   000004 236100                    LDQ     4,,PR0
        20 002401   000010 756000 0                  STQ     NEXT_AVAILABLE$

      773    11720    9                            END ;

  11720 20 002402   000027 235000 0                  LDA     TEMP_UBIN
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:118  
        20 002403   000001 035007                    ADLA    1,DL
        20 002404   000027 755000 0                  STA     TEMP_UBIN
        20 002405   000027 236000 0                  LDQ     TEMP_UBIN
        20 002406   002411 604000 20                 TMI     s:11721
        20 002407   000144 116000 xsym               CMPQ    COMCOM+100
        20 002410   002377 604400 20                 TMOZ    s:11719

      774    11721    8                            NEXT_AVAILABLE$ -> BLOCK.NEXT = ST$ ;

  11721 20 002411   000000 236000 9                  LDQ     ST$
        20 002412   000010 470400 0                  LDP0    NEXT_AVAILABLE$
        20 002413   000004 756100                    STQ     4,,PR0

      775    11722    8                            NEXT_AVAILABLE$ = ST$ ;

  11722 20 002414   000010 756000 0                  STQ     NEXT_AVAILABLE$

      776    11723    8                            O2COM.NEXT_AVAILABLE$ = ST$ ;

  11723 20 002415   000006 756000 13                 STQ     O2COM+6

      777    11724    8                            O2COM.WORK_STOR_BLKNUM = COMCOM.BLOCKC ;

  11724 20 002416   000144 235000 xsym               LDA     COMCOM+100
        20 002417   000012 755000 13                 STA     O2COM+10

      778    11725    8                            LAST_COUNT = COMCOM.BLOCKC ;

  11725 20 002420   000007 755000 0                  STA     LAST_COUNT

      779    11726    8                            SYM$ -> VARIABLE.COUNT = COMCOM.BLOCKC ;

  11726 20 002421   000001 470400 0                  LDP0    SYM$
        20 002422   000144 236000 xsym               LDQ     COMCOM+100
        20 002423   000000 552104                    STBQ    0,'04'O,PR0

      780    11727    8                            SYM$->VARIABLE.SA = 0 ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:119  

  11727 20 002424   000000 220003                    LDX0    0,DU
        20 002425   000001 470400 0                  LDP0    SYM$
        20 002426   000001 740100                    STX0    1,,PR0

      781    11728    8                            REDEF_NEXT_AVAIL = 0 ;

  11728 20 002427   000021 450000 0                  STZ     REDEF_NEXT_AVAIL

      782    11729    8                            BLOCKSIZE = 0 ;

  11729 20 002430   000020 450000 0                  STZ     BLOCKSIZE

      783    11730    8                            NEXT_AVAILABLE$ -> BLOCK.SIZE = RECSIZE ;

  11730 20 002431   000023 721000 0                  LXL1    RECSIZE
        20 002432   000010 470400 0                  LDP0    NEXT_AVAILABLE$
        20 002433   000002 741100                    STX1    2,,PR0

      784    11731    8                            IF RECSIZE = %#256K THEN

  11731 20 002434   000023 236000 0                  LDQ     RECSIZE
        20 002435   000001 116003                    CMPQ    1,DU
        20 002436   002441 601000 20                 TNZ     s:11733

      785    11732    8                              NEXT_AVAILABLE$ -> BLOCK.B.SIZE_256K = TRUE ;

  11732 20 002437   100000 236003                    LDQ     32768,DU
        20 002440   000003 256100                    ORSQ    3,,PR0

      786    11733    8                            EXIT BLOCK_OVERFLOW ; /* Recovery done */

  11733 20 002441   002501 710000 20                 TRA     s:11759

      787    11734    8                          END ; /* BLOCKSIZE ~= 0 */
      788    11735    8                          ELSE DO ; /* Not error after all */

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:120  
      789    11736    8                            NEXT_AVAILABLE$ -> BLOCK.B.SIZE_256K = TRUE ;

  11736 20 002442   000010 471400 0                  LDP1    NEXT_AVAILABLE$
        20 002443   100000 236003                    LDQ     32768,DU
        20 002444   100003 256100                    ORSQ    3,,PR1

      790    11737    8                            EXIT BLOCK_OVERFLOW ;

  11737 20 002445   002501 710000 20                 TRA     s:11759

      791    11738    8                          END ;
      792    11739    7                        END ;
      793    11740    7                      ELSE DO ;

      794    11741    7                        IF BLOCKSIZE + RECSIZE = %#256K

  11741 20 002446   000020 236000 0                  LDQ     BLOCKSIZE
        20 002447   000023 036000 0                  ADLQ    RECSIZE
        20 002450   000001 116003                    CMPQ    1,DU
        20 002451   002456 601000 20                 TNZ     s:11743

      795    11742    7                          THEN NEXT_AVAILABLE$->BLOCK.B.SIZE_256K = TRUE;

  11742 20 002452   000010 471400 0                  LDP1    NEXT_AVAILABLE$
        20 002453   100000 236003                    LDQ     32768,DU
        20 002454   100003 256100                    ORSQ    3,,PR1
        20 002455   002471 710000 20                 TRA     s:11753

      796    11743    7                          ELSE CALL Z8AE$ERROR (%E$BLOCK_DATA_LIMIT,,,

  11743 20 002456   000010 236000 0                  LDQ     NEXT_AVAILABLE$
        20 002457   000006 036003                    ADLQ    6,DU
        20 002460   000000 235000 21                 LDA     0
        20 002461   000212 757000 0                  STAQ    @RECSIZE+3
        20 002462   000000 236000 21                 LDQ     0
        20 002463   000024 235000 21                 LDA     20
        20 002464   000210 757000 0                  STAQ    @RECSIZE+1
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:121  
        20 002465   000210 630400 0                  EPPR0   @RECSIZE+1
        20 002466   000022 631400 21                 EPPR1   18
        20 002467   000000 701000 xent               TSX1    Z8AE$ERROR
        20 002470   000000 011000                    NOP     0

      797    11744    7                                                NEXT_AVAILABLE$->BLOCK.DNT$) ;
      798    11745        /*E*
      799    11746              ERROR:  BLOCK_DATA_LIMIT
      800    11747         MESSAGE: !0 data limit of 256K has been exceeded, code generation has been suspend
             11747        ed.
      801    11748        DESCRIPTION:  This error is produced when the storage counter for an
      802    11749                      external data block goes past 256K words. The counters are
      803    11750                      reset to zero.
      804    11751        */
      805    11752    7                      END ;

      806    11753    6                      COMCOM.DATA_LIMIT_ERROR_FLAGGED = TRUE ;

  11753 20 002471   400000 236003                    LDQ     -131072,DU
        20 002472   000506 756000 xsym               STQ     COMCOM+326

      807    11754    6                      COMCOM.OB.CHECK = '1'B ; /* Avoid Phase 5 Error */

  11754 20 002473   000072 256000 xsym               ORSQ    COMCOM+58

      808    11755    6                    END ;

      809    11756
      810    11757    5                  SYM$->VARIABLE.SA = 0 ;

  11757 20 002474   000000 220003                    LDX0    0,DU
        20 002475   000001 470400 0                  LDP0    SYM$
        20 002476   000001 740100                    STX0    1,,PR0

      811    11758    5                  NEXT_AVAILABLE$->BLOCK.SIZE = 0 ;

  11758 20 002477   000010 470400 0                  LDP0    NEXT_AVAILABLE$
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:122  
        20 002500   000002 740100                    STX0    2,,PR0

      812    11759    5                END ; /* BLOCK_OVERFLOW */

  11759 20 002501   002513 710000 20                 TRA     s:11766

      813    11760    5                ELSE DO ;

      814    11761    5                  SYM$->VARIABLE.SA = BLOCKSIZE ;

  11761 20 002502   000020 720000 0                  LXL0    BLOCKSIZE
        20 002503   000001 470400 0                  LDP0    SYM$
        20 002504   000001 740100                    STX0    1,,PR0

      815    11762    5                  BLOCKSIZE = BLOCKSIZE + RECSIZE ;

  11762 20 002505   000020 236000 0                  LDQ     BLOCKSIZE
        20 002506   000023 036000 0                  ADLQ    RECSIZE
        20 002507   000020 756000 0                  STQ     BLOCKSIZE

      816    11763    5                  NEXT_AVAILABLE$->BLOCK.SIZE = BLOCKSIZE ;

  11763 20 002510   000000 620006                    EAX0    0,QL
        20 002511   000010 470400 0                  LDP0    NEXT_AVAILABLE$
        20 002512   000002 740100                    STX0    2,,PR0

      817    11764    5                END ;

      818    11765        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:123  
      819    11766    4              IF SYM$->VARIABLE.B.REDEF_OBJ THEN

  11766 20 002513   000001 470400 0                  LDP0    SYM$
        20 002514   000003 236100                    LDQ     3,,PR0
        20 002515   000400 316003                    CANQ    256,DU
        20 002516   002537 600000 20                 TZE     s:11783

      820    11767    5                DO ;

      821    11768                       /* Set the REDEF SUB item's count as the same as the REDEF OBJ  */
      822    11769
      823    11770    5                  SEARCH_ST$ = QUAL$ -> QLT.BROTHER -> QLT.ST$;

  11770 20 002517   000003 471400 0                  LDP1    QUAL$
        20 002520   100002 473500                    LDP3    2,,PR1
        20 002521   300004 236100                    LDQ     4,,PR3
        20 002522   000026 756000 0                  STQ     SEARCH_ST$

      824    11771    6                  DO UNTIL NOT (SEARCH_ST$ -> VARIABLE.B.REDEF_SUB);

      825    11772    6                    SEARCH_ST$ -> VARIABLE.COUNT = SYM$ -> VARIABLE.COUNT;

  11772 20 002523   000001 470400 0                  LDP0    SYM$
        20 002524   000026 471400 0                  LDP1    SEARCH_ST$
        20 002525   000000 236100                    LDQ     0,,PR0
        20 002526   100000 552104                    STBQ    0,'04'O,PR1

      826    11773    6                   SEARCH_ST$ = SEARCH_ST$ -> VARIABLE.QLT$ -> QLT.BROTHER -> QLT.ST$;

  11773 20 002527   000026 470400 0                  LDP0    SEARCH_ST$
        20 002530   000007 471500                    LDP1    7,,PR0
        20 002531   100002 473500                    LDP3    2,,PR1
        20 002532   300004 236100                    LDQ     4,,PR3
        20 002533   000026 756000 0                  STQ     SEARCH_ST$

      827    11774    6                  END; /* Do until */

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:124  
  11774 20 002534   000026 470400 0                  LDP0    SEARCH_ST$
        20 002535   000003 430100                    FSZN    3,,PR0
        20 002536   002523 604000 20                 TMI     s:11772

      828    11775    5                 END; /* REDEF_OBJ */

      829    11776    4                END ; /* Not REDEF_SUB */

      830    11777
      831    11778        /*V*
      832    11779            GROUP_SA_UPDATE -- If the item is a group data item then Z8FC$S_A_UPDATE is
      833    11780                               called to assign the word locations of the internal items.
      834    11781        */
      835    11782
      836    11783    3              IF NOT QUAL$->QLT.ST$->VARIABLE.B.ELEMENTARY THEN

  11783 20 002537   000003 470400 0                  LDP0    QUAL$
        20 002540   000004 471500                    LDP1    4,,PR0
        20 002541   100003 236100                    LDQ     3,,PR1
        20 002542   010000 316003                    CANQ    4096,DU
        20 002543   002631 601000 20                 TNZ     s:11817

      837    11784    4                DO ;

      838    11785    4                  O2COM.POPS_SA = SYM$->VARIABLE.SA ;

  11785 20 002544   000001 473400 0                  LDP3    SYM$
        20 002545   300001 236100                    LDQ     1,,PR3
        20 002546   000022 772000                    QRL     18
        20 002547   000000 756000 13                 STQ     O2COM

      839    11786    4                  IF SYM$->ST.ID ~= %FD AND SYM$->ST.ID ~= %SD THEN

  11786 20 002550   300000 220100                    LDX0    0,,PR3
        20 002551   001002 100003                    CMPX0   514,DU
        20 002552   002562 600000 20                 TZE     s:11791
        20 002553   001003 100003                    CMPX0   515,DU
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:125  
        20 002554   002562 600000 20                 TZE     s:11791

      840    11787                          /* Alas! LINAGE is illegal for SD, but a SORT file can
      841    11788                             be linked with a sequential file with LINAGE. */
      842    11789    4                    CALL Z8FC$S_A_UPDATE (QUAL$) ;

  11789 20 002555   000036 630400 21                 EPPR0   30
        20 002556   000001 631400 21                 EPPR1   1
        20 002557   000000 701000 xent               TSX1    Z8FC$S_A_UPDATE
        20 002560   000000 011000                    NOP     0
        20 002561   002631 710000 20                 TRA     s:11817

      843    11790    5                  ELSE DO ;

      844    11791    5                    LINAGE_ADDR = SYM$->VARIABLE.SA + RECSIZE ;

  11791 20 002562   000023 036000 0                  ADLQ    RECSIZE
        20 002563   000025 756000 0                  STQ     LINAGE_ADDR

      845    11792    5                    LTS$ = SAVE_LTS$ ;

  11792 20 002564   000006 236000 0                  LDQ     SAVE_LTS$
        20 002565   000000 756000 11                 STQ     LTS$

      846    11793    5                    IF LTS$->FILE_LTS.SAME_RECORD.LINK = ADDR (NIL)

  11793 20 002566   000000 474400 11                 LDP4    LTS$
        20 002567   400043 236100                    LDQ     35,,PR4
        20 002570   000000 116000 21                 CMPQ    0
        20 002571   002577 601000 20                 TNZ     s:11796

      847    11794    5                      THEN CALL Z8FC$S_A_UPDATE (QUAL$) ;

  11794 20 002572   000036 630400 21                 EPPR0   30
        20 002573   000001 631400 21                 EPPR1   1
        20 002574   000000 701000 xent               TSX1    Z8FC$S_A_UPDATE
        20 002575   000000 011000                    NOP     0
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:126  
        20 002576   002631 710000 20                 TRA     s:11817

      848    11795    6                      ELSE DO UNTIL LTS$ = ADDR (NIL) ;

      849    11796    6                        ST$ = LTS$->FILE_LTS.ST$ ;

  11796 20 002577   000000 470400 11                 LDP0    LTS$
        20 002600   000001 236100                    LDQ     1,,PR0
        20 002601   000000 756000 9                  STQ     ST$

      850    11797    6                        QLT$ = ST$->FD.QLT$ ;

  11797 20 002602   000000 471400 9                  LDP1    ST$
        20 002603   100007 236100                    LDQ     7,,PR1
        20 002604   000000 756000 6                  STQ     QLT$

      851    11798    6                        ST$->FD.SA = O2COM.POPS_SA ;

  11798 20 002605   000000 720000 13                 LXL0    O2COM
        20 002606   100001 740100                    STX0    1,,PR1

      852    11799    6                        CALL Z8FC$S_A_UPDATE (QLT$) ;

  11799 20 002607   000037 630400 21                 EPPR0   31
        20 002610   000001 631400 21                 EPPR1   1
        20 002611   000000 701000 xent               TSX1    Z8FC$S_A_UPDATE
        20 002612   000000 011000                    NOP     0

      853    11800    7                        IF LTS$->FILE_LTS.LINAGE_COUNTER$ ~= ADDR (NIL) THEN DO ;

  11800 20 002613   000000 470400 11                 LDP0    LTS$
        20 002614   000054 236100                    LDQ     44,,PR0
        20 002615   000000 116000 21                 CMPQ    0
        20 002616   002625 600000 20                 TZE     s:11810

      854    11801        /*KLUDGE*
      855    11802            SET_LINAGE_ADDRESS -- Each LINAGE COUNTER needs its own address, and all
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:127  
      856    11803                                  must appear after the end of the largest FD of those
      857    11804                                  that are overlayed thru the SAME RECORD clause.
      858    11805        */
      859    11806    7                          LTS$->FILE_LTS.LINAGE_COUNTER$->VARIABLE.SA =

  11806 20 002617   000054 471500                    LDP1    44,,PR0
        20 002620   000025 720000 0                  LXL0    LINAGE_ADDR
        20 002621   100001 740100                    STX0    1,,PR1

      860    11807    7                              LINAGE_ADDR ;
      861    11808    7                          LINAGE_ADDR = LINAGE_ADDR + 1 ;

  11808 20 002622   000025 235000 0                  LDA     LINAGE_ADDR
        20 002623   000001 035007                    ADLA    1,DL
        20 002624   000025 755000 0                  STA     LINAGE_ADDR

      862    11809    7                        END ;

      863    11810    6                        LTS$ = LTS$->FILE_LTS.SAME_RECORD.LINK ;

  11810 20 002625   000043 236100                    LDQ     35,,PR0
        20 002626   000000 756000 11                 STQ     LTS$

      864    11811    6                      END ;

  11811 20 002627   000000 116000 21                 CMPQ    0
        20 002630   002577 601000 20                 TNZ     s:11796

      865    11812    5                  END ;

      866    11813    4                END ;

      867    11814
      868    11815    3            END CASE_STMT ;

      869    11816
      870    11817    2            QUAL$ = QUAL$->QLT.BROTHER ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:128  

  11817 20 002631   000003 470400 0                  LDP0    QUAL$
        20 002632   000002 236100                    LDQ     2,,PR0
        20 002633   000003 756000 0                  STQ     QUAL$

      871    11818
      872    11819    2          END ;

  11819 20 002634   000003 236000 0                  LDQ     QUAL$
        20 002635   000000 116000 21                 CMPQ    0
        20 002636   000741 601000 20                 TNZ     s:11160

      873    11820
      874    11821    1          NEXT_AVAILABLE$ = COMCOM.BLOCK$;

  11821 20 002637   000145 236000 xsym               LDQ     COMCOM+101
        20 002640   000010 756000 0                  STQ     NEXT_AVAILABLE$

      875    11822    2          DO WHILE NEXT_AVAILABLE$ ~= ADDR(NIL);

  11822 20 002641   002665 710000 20                 TRA     s:11827

      876    11823    2            IF SUBSTR(NEXT_AVAILABLE$->BLOCK.DNT$->DNT.TEXT.NAME,0,4) = 'BLCK' THEN

  11823 20 002642   000010 470400 0                  LDP0    NEXT_AVAILABLE$
        20 002643   000006 471500                    LDP1    6,,PR0
        20 002644   100004 220100                    LDX0    4,,PR1
        20 002645   040000 106500                    CMPC    fill='040'O
        20 002646   100004 400004                    ADSC9   4,,PR1                   cn=2,n=4
        20 002647   000000 000004 19                 ADSC9   0                        cn=0,n=4
        20 002650   002663 601000 20                 TNZ     s:11826

      877    11824    2              NEXT_AVAILABLE$->BLOCK.SIZE = MAXIMUM (

  11824 20 002651   000010 236100                    LDQ     8,,PR0
        20 002652   000022 772000                    QRL     18
        20 002653   000210 756000 0                  STQ     @RECSIZE+1
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:129  
        20 002654   000002 236100                    LDQ     2,,PR0
        20 002655   000022 772000                    QRL     18
        20 002656   000210 116000 0                  CMPQ    @RECSIZE+1
        20 002657   002661 603000 20                 TRC     s:11824+8
        20 002660   000210 236000 0                  LDQ     @RECSIZE+1
        20 002661   000000 620006                    EAX0    0,QL
        20 002662   000002 740100                    STX0    2,,PR0

      878    11825    2                  NEXT_AVAILABLE$->BLOCK.SIZE,NEXT_AVAILABLE$->BLOCK.SIZE1);
      879    11826    2            NEXT_AVAILABLE$ = NEXT_AVAILABLE$->BLOCK.NEXT;

  11826 20 002663   000004 236100                    LDQ     4,,PR0
        20 002664   000010 756000 0                  STQ     NEXT_AVAILABLE$

      880    11827    2          END;

  11827 20 002665   000000 116000 21                 CMPQ    0
        20 002666   002642 601000 20                 TNZ     s:11823

      881    11828        %EJECT ;
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:130  
      882    11829        /*V*
      883    11830            STORAGE_ALLOCATION_WRAPUP -- ESCAPE_INIT is called to create the escape
      884    11831                                         triads for all the BASE items.
      885    11832        */
      886    11833
      887    11834    1          CALL ESCAPE_INIT ;

  11834 20 002667   000002 701000 20                 TSX1    ESCAPE_INIT
        20 002670   000000 011000                    NOP     0

      888    11835    1   END Z8FA$STORAGE_ALLOCATOR ;

  11835 20 002671   000000 221200 0                  LDX1  ! 0
        20 002672   000001 702211                    TSX2  ! 1,X1

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:131  
--  Include file information  --

   Z8A_SRCH.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   Z8F_O2COM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_TYPES.:Z8A6TOU  is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_QLT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DNT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8FA$STORAGE_ALLOCATOR.
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:132  

 **** Variables and constants ****

  ****  Section 000  Data  Z8FA$STORAGE_ALLOCATOR

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   207-0-0/w PTR         r     1 @RECSIZE                 206-0-0/w PTR         r     1 @ST$$
   177-0-0/w PTR         r     1 BASE$                     11-0-0/c CHAR(28)    r     1 BLKNAME
    20-0-0/w UBIN        r     1 BLOCKSIZE                  2-0-0/w PTR         r     1 CURRENT_PROC$
   202-0-0/b BIT         r     1 DONE_FLAG                203-0-0/b BIT         r     1 DONE_FLAG1
   201-0-0/w PTR         r     1 ESCAPE_ZERO                7-0-0/w UBIN        r     1 LAST_COUNT
    25-0-0/w UBIN        r     1 LINAGE_ADDR               24-0-0/w UBIN        r     1 LINAGE_NUM
     5-0-0/w PTR         r     1 LONG$                      4-0-0/w PTR         r     1 LTS$$
    10-0-0/w PTR         r     1 NEXT_AVAILABLE$          200-0-0/w PTR         r     1 NEXT_BASE$
     3-0-0/w PTR         r     1 QUAL$                     23-0-0/w UBIN        r     1 RECSIZE
    *0-0-0/w UBIN        r     1 RECSIZE                   22-0-0/w UBIN        r     1 REDEF_MAX_SIZE
    21-0-0/w UBIN        r     1 REDEF_NEXT_AVAIL           6-0-0/w PTR         r     1 SAVE_LTS$
    26-0-0/w PTR         r     1 SEARCH_ST$
    32-0-0/w PTR         r     1 SEGMENT$$(0:99)
    *0-0-0/w PTR         r     1 ST$$                       1-0-0/w PTR         r     1 SYM$
    31-0-0/w PTR         r     1 TEMP$                     30-0-0/c CHAR(4)     r     1 TEMP_CHAR
    27-0-0/w UBIN        r     1 TEMP_UBIN

  ****  Section 001 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 ITERATION

  ****  Section 002 LblCom DNT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 DNT$
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:133  

  ****  Section 003 LblCom DNT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 DNT_

  ****  Section 004 LblCom DNT_BUCKET_NUMBER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 DNT_BUCKET_NUMBER

  ****  Section 005 LblCom DNT_OF_1$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 DNT_OF_1$

  ****  Section 006 LblCom QLT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 QLT$

  ****  Section 007 LblCom PREV_01_QLT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 PREV_01_QLT$

  ****  Section 008 LblCom QLT_
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:134  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 QLT_

  ****  Section 009 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 010 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 ST_

  ****  Section 011 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 012 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_

  ****  Section 013 LblCom O2COM

  ****  Scalars and arrays  ****
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:135  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(432)   r     1 O2COM

  ****  Section 014 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 015 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 016 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 017 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

  ****  Section 018 LblCom SRCH

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:136  
     0-0-0/w STRC(108)   r     1 SRCH

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248) r     1 COMCOM
     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)         1 ALPHABET                   0-0-0/w STRC(144)         1 ALTER_LTS
     0-0-0/w STRC(3672)        1 ALT_KEY                    0-0-0/w STRC(36864) r     1 ARGLIST
     0-0-0/w STRC(396)         1 ARRAY                      0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS
     0-0-0/w STRC(288)   r     1 BASE_LTS                   0-0-0/w STRC(396)   r     1 BLOCK
     0-0-0/w STRC(144)         1 BT                         0-0-0/w STRC(396)         1 CD
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(396)         1 CLASS                      0-0-0/w STRC(396)         1 CONDITION
     0-0-0/w STRC(396)         1 CONST                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(540)         1 CONTROL_NAME_LTS           0-0-0/w STRC(1872)        1 COPY_FILE
     0-0-0/w STRC(396)         1 DB                         0-0-0/w STRC(396)         1 DCB_
     0-0-0/w STRC(108)         1 DEPENDING_SIZE             0-0-0/w STRC(5472)        1 DIMS
     0-0-0/w STRC(396)         1 DML_ITEM                   0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w ASTR(180)   r     1 DNT                        0-0-0/w STRC(180)   r     1 ETT
     0-0-0/w STRC(73836)       1 EVALUATE                   0-0-0/w STRC(396)   r     1 FD
     0-0-0/w STRC(1692)  r     1 FILE_LTS                   0-0-0/w STRC(108)         1 INDEXES
     0-0-0/w STRC(360)         1 INIT_LTS                   0-0-0/w STRC(396)         1 INTDEF
     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN           0-0-0/w STRC(144)         1 KEY
     0-0-0/w STRC(396)   r     1 LABEL                      0-0-0/w STRC(36864)       1 LCNST
     0-0-0/w STRC(72)    r     1 LONG                       0-0-0/w STRC        r     1 LTS
     0-0-0/w STRC(360)   r     1 LTSS                       0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY
     0-0-0/w STRC(396)         1 MNEMONIC                   0-0-0/w STRC(144)         1 NEL
     0-0-0/w STRC(216)         1 OPEN_LTS                   0-0-0/w STRC(36864)       1 PAGE
PL6.E3A0      #001=Z8FA$STORAGE_ALLOCATOR File=Z8FA.:Z8A6TSI                     SAT 08/09/97 13:02 Page:137  
     0-0-0/w STRC(396)         1 PARA                       0-0-0/w STRC(144)         1 PRIME
     0-0-0/w STRC(396)   r     1 PROC_                      0-0-0/w STRC(396)         1 PROC_DEF
     0-0-0/w STRC(900)         1 PROC_SUPP                  0-0-0/w STRC(216)   r     1 QLT
     0-0-0/w STRC(396)         1 RD                         0-0-0/w STRC(216)         1 REF
     0-0-0/w STRC(108)         1 RENAMES                    0-0-0/w STRC(720)         1 REPORT_01_LTS
     0-0-0/w STRC(432)         1 REPORT_ELEM_LTS            0-0-0/w STRC(252)         1 REPORT_GRP_LTS
     0-0-0/w STRC(1332)  r     1 REPORT_LTS                 0-0-0/w STRC(144)         1 RVA_LTS
     0-0-0/w STRC(396)   r     1 SCALAR                     0-0-0/w STRC(396)   r     1 SD
     0-0-0/w STRC(396)         1 SECTION                    0-0-0/w STRC(396)   r     1 SEGMENT
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(396)   r     1 ST
     0-0-0/w STRC(252)         1 SUM_LTS                    0-0-0/w STRC(396)         1 SWITCH
     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR              0-0-0/w STRC(396)   r     1 SYMDEF_
     0-0-0/w STRC(396)         1 SYMREF_                    0-0-0/w STRC(396)         1 TEMP
     0-0-0/d STRC(612)         1 USE                        0-0-0/w STRC(252)         1 USE_SUPP
     0-0-0/w STRC(396)   r     1 VARIABLE


   Procedure Z8FA$STORAGE_ALLOCATOR requires 1467 words for executable code.
   Procedure Z8FA$STORAGE_ALLOCATOR is declared NOAUTO and requires 140 words of local(STATIC) storage.

    No errors detected in file Z8FA.:Z8A6TSI    .
