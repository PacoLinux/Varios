

09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6          %INCLUDE Z8A_NAMES;
    7          %INCLUDE X8A_COM_MACS;
    8
    9
   10      %EQU NO_SIGN_VALUE    = 0;
   11      %EQU PLUS_SIGN_VALUE  = 1;
   12      %EQU MINUS_SIGN_VALUE = 2;
   13
   14      %MACRO DCL_NUM_DESC (@STRN = NUM_DESC);
   15
   16         DCL 1 @STRN                ALIGNED,
   17              2 DIGITS_LEFT         SBIN WORD,
   18              2 DIGITS_RIGHT        SBIN WORD,
   19              2 DIGITS_EXPONENT     SBIN WORD,
   20              2 MANTISSA_SIGN_VALUE SBIN WORD,
   21              2 EXPONENT_SIGN_VALUE SBIN WORD,
   22              2 COMMA_PRESENT       BIT(1) ALIGNED;
   23
   24      %MEND;
   25
   26      %MACRO FISH(TRIAD=,RTN=);
   27
   28           DO;
   29             RTN = TRIAD;
   30
   31             DO WHILE(RTN -> ETT.ID < %FIRST_ST);
   32               RTN = RTN -> ETT.LOP;
   33             END;
   34           END;
   35
   36      %MEND;
   37
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                2    
   38      %MACRO FISH_TO_BASE (TRIAD=, RTN=) ;
   39
   40             DO ;
   41               RTN = TRIAD ;
   42               DO WHILE (RTN->ETT.ID ~= %BASE) ;
   43                 RTN = RTN -> ETT.LOP ;
   44               END ;
   45             END ;
   46
   47      %MEND ;
   48
   49      %MACRO FISH_TO_LTSS (ITEM = LTSS.DIMS$, LTS_ST$ = ST$, POINTER = LTS$) ;
   50
   51             DO ;
   52               %ERROR (TRUE,
   53                 'You FOOL !!! There is a macro GET_LTS to do this for you!!',
   54                 4);
   55             END;
   56
   57      %MEND ;
   58      %EJECT ;

09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                3    
   59
   60
   61      %MACRO REMOVE_FROM_DL_LIST (PTR=, ITEM=, HEAD=, NEXT=NEXT, LAST=LAST);
   62
   63           DO;
   64             IF PTR -> ITEM.NEXT = ADDR(NIL) THEN
   65               DO;
   66                 IF PTR -> ITEM.LAST = ADDR(NIL) THEN
   67                   HEAD = ADDR(NIL);
   68                 ELSE
   69                   PTR -> ITEM.LAST -> ITEM.NEXT = ADDR(NIL);
   70               END;
   71             ELSE
   72               IF PTR = HEAD THEN
   73                 DO;
   74                   PTR -> ITEM.NEXT -> ITEM.LAST = ADDR(NIL);
   75                   HEAD = PTR -> ITEM.NEXT;
   76                 END;
   77               ELSE
   78                 DO;
   79                   PTR -> ITEM.NEXT -> ITEM.LAST = PTR -> ITEM.LAST;
   80                   PTR -> ITEM.LAST -> ITEM.NEXT = PTR -> ITEM.NEXT;
   81                 END;
   82           END;
   83
   84      %MEND;
   85
   86
   87
   88      %MACRO REMOVE_FROM_SL_LIST (PTR=, ITEM=, HEAD=, PREV="ADDR(NIL)",
   89                                  NEXT = NEXT) ;
   90
   91           %IF TEXTCHAR(PREV) = 'ADDR(NIL)';
   92             DO;
   93               PTR = HEAD;
   94               HEAD = HEAD -> ITEM.NEXT;
   95             END;
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                4    
   96           %ELSE;
   97             DO;
   98               PTR = PREV -> ITEM.NEXT;
   99               PREV -> ITEM.NEXT = PTR -> ITEM.NEXT;
  100             END;
  101           %ENDIF;
  102
  103      %MEND;
  104
  105
  106
  107      %MACRO INSERT_INTO_DL_LIST (PTR=, ITEM=, HEAD=, PREV="ADDR(NIL)",
  108                                  NEXT=NEXT, LAST=LAST) ;
  109
  110           %IF TEXTCHAR(PREV) = 'ADDR(NIL)';
  111             DO;
  112               PTR -> ITEM.NEXT = HEAD;
  113               PTR -> ITEM.LAST = ADDR(NIL);
  114               IF HEAD ~= ADDR(NIL) THEN
  115                 HEAD -> ITEM.LAST = PTR;
  116               HEAD = PTR;
  117             END;
  118           %ELSE;
  119             DO;
  120               IF PREV = ADDR(NIL) THEN DO ;
  121                 PTR -> ITEM.NEXT = HEAD ;
  122                 PTR -> ITEM.LAST = ADDR(NIL) ;
  123                 IF HEAD ~= ADDR(NIL) THEN
  124                   HEAD -> ITEM.LAST = PTR ;
  125                 HEAD = PTR ;
  126               END ;
  127               ELSE DO ; /* PREV <> Nil */
  128                 PTR -> ITEM.NEXT = PREV -> ITEM.NEXT;
  129                 PTR -> ITEM.LAST = PREV;
  130                 IF PREV -> ITEM.NEXT ~= ADDR(NIL) THEN
  131                   PREV -> ITEM.NEXT -> ITEM.LAST = PTR;
  132                 PREV -> ITEM.NEXT = PTR;
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                5    
  133               END ;
  134             END;
  135           %ENDIF;
  136
  137      %MEND;
  138
  139
  140
  141      %MACRO INSERT_INTO_SL_LIST (PTR=, ITEM=, HEAD=, PREV="ADDR(NIL)",
  142                                  NEXT=NEXT) ;
  143
  144           %IF TEXTCHAR(PREV) = 'ADDR(NIL)';
  145             DO;
  146               PTR -> ITEM.NEXT = HEAD;
  147               HEAD = PTR;
  148             END;
  149           %ELSE;
  150             DO;
  151               PTR -> ITEM.NEXT = PREV -> ITEM.NEXT;
  152               PREV -> ITEM.NEXT = PTR;
  153             END;
  154           %ENDIF;
  155
  156      %MEND;
  157
  158
  159
  160      %MACRO BUILD_BINARY_DESC ( @DESC = , @LENGTH = );
  161
  162           %ERROR(TEXTCHAR(@DESC) = '', 'Missing DESC parameter', 2);
  163           %ERROR(TEXTCHAR(@LENGTH) = '', 'Missing LENGTH parameter', 2);
  164
  165           DO;
  166             @DESC = '0'O;
  167
  168             @DESC.NDSC.N = @LENGTH;
  169           END;
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                6    
  170
  171      %MEND;
  172
  173
  174
  175      %MACRO UNPACK_NDSC ( @DESC      = ,
  176                           @TYPE      = %TYD,
  177                           @SA        = ,
  178                           @LENGTH    = ,
  179                           @CN        = ,
  180                           @TN        = ,
  181                           @SIGN      = ,
  182                           @SCALE     = );
  183
  184           %LSET OK1 = (TEXTCHAR(@DESC) ~= '');
  185
  186           %IF ~OK1;
  187             %ERROR(~OK1,'Missing DESC parameter',2);
  188           %ELSE;
  189             DO;
  190               %IF (TEXTCHAR(@LENGTH) ~= '');
  191                 DO CASE(BITBIN(@DESC.NDSC.S));
  192                   CASE(%(BITBIN(%NO_SIGN)));
  193                     @LENGTH = @DESC.NDSC.N;
  194
  195                   CASE(%(BITBIN(%TRAILING_SIGN)),%(BITBIN(%LEADING_SIGN)));
  196                     %IF TEXTCHAR(@TYPE) = TEXTCHAR(%TYO);
  197                       @LENGTH = @DESC.NDSC.N;
  198                     %ELSEIF TEXTCHAR(@TYPE) = TEXTCHAR(%TYD);
  199                       @LENGTH = @DESC.NDSC.N - 1;
  200                     %ELSEIF TEXTCHAR(@TYPE) = TEXTCHAR(%TYF) OR TEXTCHAR(@TYPE) = TEXTCHAR(%TYC);
  201                       IF @DESC.NDSC.TN = %NDSC4 /* Overpunched */ THEN
  202                         @LENGTH = @DESC.NDSC.N;
  203                       ELSE
  204                         @LENGTH = @DESC.NDSC.N - 1;
  205                     %ELSE;
  206                       IF @TYPE = %TYO THEN
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                7    
  207                         @LENGTH = @DESC.NDSC.N;
  208                       ELSE IF @TYPE = %TYD THEN
  209                         @LENGTH = @DESC.NDSC.N - 1;
  210                       ELSE IF @DESC.NDSC.TN = %NDSC4 /* Overpunched */ THEN
  211                         @LENGTH = @DESC.NDSC.N;
  212                       ELSE
  213                         @LENGTH = @DESC.NDSC.N - 1;
  214                     %ENDIF;
  215
  216                   CASE(%(BITBIN(%FLOATING_POINT_LEADING_SIGN)));
  217                     IF @DESC.NDSC.TN = %NDSC4 THEN
  218                       @LENGTH = @DESC.NDSC.N - 3;
  219                     ELSE
  220                       @LENGTH = @DESC.NDSC.N - 2;
  221
  222                 END /* Case */;
  223               %ENDIF;
  224
  225               %IF (TEXTCHAR(@SA) ~= '');
  226                 @SA = @DESC.SA;
  227               %ENDIF;
  228
  229               %IF (TEXTCHAR(@CN) ~= '');
  230                 @CN = @DESC.NDSC.CN;
  231               %ENDIF;
  232
  233               %IF (TEXTCHAR(@TN) ~= '');
  234                 @TN = @DESC.NDSC.TN;
  235               %ENDIF;
  236
  237               %IF (TEXTCHAR(@SCALE) ~= '');
  238                 @SCALE = @DESC.NDSC.SF;
  239               %ENDIF;
  240
  241               %IF (TEXTCHAR(@SIGN) ~= '');
  242                 @SIGN = @DESC.NDSC.S;
  243               %ENDIF;
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                8    
  244             END;
  245           %ENDIF;
  246
  247      %MEND;
  248
  249
  250
  251
  252      %MACRO UNPACK_ADSC ( @DESC      = ,
  253                           @SA        = ,
  254                           @LENGTH    = ,
  255                           @CN        = ,
  256                           @TA        = );
  257
  258           %LSET OK1 = (TEXTCHAR(@DESC) ~= '');
  259
  260           %IF ~OK1;
  261             %ERROR(~OK1,'Missing DESC parameter',2);
  262           %ELSE;
  263             DO;
  264               %IF (TEXTCHAR(@SA) ~= '');
  265                 @SA = @DESC.SA;
  266               %ENDIF;
  267
  268               %IF (TEXTCHAR(@LENGTH) ~= '');
  269                 @LENGTH = @DESC.ADSC.N;
  270               %ENDIF;
  271
  272               %IF (TEXTCHAR(@CN) ~= '');
  273    *            IF @DESC.ADSC.TA = %ADSC9
  274    *              THEN @CN = @DESC.ADSC.CN;
  275    *              ELSE @CN = @DESC.NDSC.CN;
  276               %ENDIF;
  277
  278               %IF (TEXTCHAR(@TA) ~= '');
  279                 @TA = @DESC.ADSC.TA;
  280               %ENDIF;
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                9    
  281             END;
  282           %ENDIF;
  283
  284      %MEND;
  285
  286
  287
  288      %MACRO PACK_ADSC ( @DESC    = ,
  289                         @SA      = 0 ,
  290                         @LENGTH  = ,
  291                         @CN      = 0 ,
  292                         @TA      = %ADSC9 );
  293
  294           %ERROR(TEXTCHAR(@DESC) = '','Missing DESC parameter',2);
  295           %ERROR(TEXTCHAR(@LENGTH) = '','Missing LENGTH parameter',2);
  296
  297           DO;
  298             @DESC.SA = @SA;
  299    *        %IF (TEXTCHAR(@TA)) = 'ADSC9';
  300             @DESC.ADSC.CN = @CN;
  301             @DESC.ADSC.MBZ1 = '0'B;
  302    *        %ELSEIF (TEXTCHAR(@TA)) = 'ADSC4' OR (TEXTCHAR(@TA)) = 'ADSC6';
  303    *        @DESC.NDSC.CN = @CN;
  304    *        %ELSE;
  305    *        IF @TA = %ADSC9 THEN
  306    *          DO;
  307    *            @DESC.ADSC.CN = @CN;
  308    *            @DESC.ADSC.MBZ1 = '0'B;
  309    *          END;
  310    *        ELSE
  311    *          @DESC.NDSC.CN = @CN;
  312    *        %ENDIF;
  313    *        @DESC.ADSC.TA = @TA;
  314             @DESC.ADSC.MBZ2 = '0'B;
  315             @DESC.ADSC.N = @LENGTH;
  316           END;
  317
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                10   
  318      %MEND;
  319
  320
  321
  322      %MACRO GET_ADSC_LEN(ST$=,RTN=);
  323
  324           DO;
  325             IF ST$ -> SCALAR.B.LENGTH_4096 THEN
  326               IF ST$ -> SCALAR.LTS$ -> LTS.ID = %LTSS THEN
  327                 RTN = ST$ -> SCALAR.LTS$ -> LTSS.LONG$ -> LONG.LENGTH;
  328               ELSE
  329                 RTN = ST$ -> SCALAR.LTS$ -> LONG.LENGTH;
  330             ELSE
  331               RTN = ST$ -> SCALAR.ADSC.N;
  332           END;
  333
  334      %MEND;
  335
  336
  337
  338      %MACRO GET_CN(@ST$=,@ST1$=,@RTN=);
  339
  340           DO;
  341             IF @ST1$ -> SCALAR.TYPE = %TYB OR
  342                @ST1$ -> SCALAR.TYPE = %TYC OR
  343                  (@ST1$ -> SCALAR.TYPE = %TYD AND
  344                   @ST$ -> SCALAR.NDSC.TN = %NDSC4) THEN
  345               @RTN = @ST$ -> SCALAR.NDSC.CN;
  346             ELSE
  347               @RTN = @ST$ -> SCALAR.ADSC.CN;
  348           END;
  349
  350      %MEND;
  351
  352
  353
  354      %MACRO GET_CONSTANT_ADDRESS ( @CONSTANT=, @STRING= ) ;
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                11   
  355
  356           DO;
  357             IF @CONSTANT -> CONST.B.LONG_CONSTANT THEN
  358               @STRING = ADDR(@CONSTANT -> CONST.CONST$.PTR$ -> LCNST.CONST);
  359             ELSE
  360               @STRING = ADDR(@CONSTANT -> CONST.CONSTI);
  361           END;
  362
  363      %MEND;
  364
  365
  366      %MACRO REVERSE_RELATE_OP_CODE(OP_CODE=O1COM.RELATE_OP_CODE,
  367                                    @CLASS(NO='0'B,YES='1'B)="'0'B") ;
  368      /* @CLASS is yes only if there is a possibility that a class comparison
  369         might be reversed. */
  370             DO ;
  371
  372               DO CASE(OP_CODE) ;
  373
  374                 CASE(%GO_LESS_THAN_ARITH) ;
  375                   OP_CODE = %GO_GREATER_THAN_OR_EQUAL_ARITH ;
  376
  377                 CASE(%GO_LESS_THAN_ALPHA) ;
  378                   OP_CODE = %GO_GREATER_THAN_OR_EQUAL_ALPHA ;
  379
  380                 CASE(%GO_GREATER_THAN_ARITH) ;
  381                   OP_CODE = %GO_LESS_THAN_OR_EQUAL_ARITH ;
  382
  383                 CASE(%GO_GREATER_THAN_ALPHA) ;
  384                   OP_CODE = %GO_LESS_THAN_OR_EQUAL_ALPHA ;
  385
  386                 CASE(%GO_LESS_THAN_OR_EQUAL_ARITH) ;
  387                   OP_CODE = %GO_GREATER_THAN_ARITH ;
  388
  389                 CASE(%GO_LESS_THAN_OR_EQUAL_ALPHA) ;
  390                   OP_CODE = %GO_GREATER_THAN_ALPHA ;
  391
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                12   
  392                 CASE(%GO_GREATER_THAN_OR_EQUAL_ARITH) ;
  393                   OP_CODE = %GO_LESS_THAN_ARITH ;
  394
  395                 CASE(%GO_GREATER_THAN_OR_EQUAL_ALPHA) ;
  396                   OP_CODE = %GO_LESS_THAN_ALPHA ;
  397
  398                 CASE(%GO_EQUAL) ;
  399                   OP_CODE = %GO_NOT_EQUAL ;
  400
  401                 CASE(%GO_NOT_EQUAL) ;
  402                   OP_CODE = %GO_EQUAL ;
  403
  404    *            CASE(%GO_SWITCH_ON) ;
  405    *              OP_CODE = %GO_SWITCH_OFF ;
  406    *
  407    *            CASE(%GO_SWITCH_OFF) ;
  408    *              OP_CODE = %GO_SWITCH_ON ;
  409    *
  410                 %IF @CLASS;
  411                 CASE(%GO_CLASS) ;
  412                   OP_CODE = %GO_NOT_CLASS ;
  413
  414                 CASE(%GO_NOT_CLASS) ;
  415                   OP_CODE = %GO_CLASS ;
  416
  417                 %ENDIF;
  418               END ;
  419
  420             END ;
  421      %MEND ;
  422      %EJECT ;

09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                13   
  423         %MACRO GET_LTS (@ID      = %DIMS,
  424                         @ST$     = ST$,
  425                         @RETURN$ = LTS$);
  426
  427             DO;
  428               IF @ST$ -> VARIABLE.LTS$ ~= ADDR(NIL) AND
  429                  @ST$ -> VARIABLE.LTS$ -> LTS.ID = %LTSS THEN
  430                 DO;
  431                   %IF @ID = %DIMS;
  432                     @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.DIMS$;
  433                   %ELSEIF @ID = %NEL;
  434                       @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.NEL$;
  435                     %ELSEIF @ID = %LONG;
  436                         @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.LONG$;
  437                       %ELSEIF @ID = %KEY;
  438                           @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.KEY$;
  439                         %ELSEIF @ID = %DEPENDING_SIZE;
  440                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.DEPENDING_SIZE$;
  441                         %ELSEIF @ID = %FILE_LTS;
  442                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.FILE_LTS$;
  443                         %ELSEIF @ID = %REPORT_LTS;
  444                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
  445                         %ELSEIF @ID = %REPORT_01_LTS;
  446                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
  447                         %ELSEIF @ID = %REPORT_GRP_LTS;
  448                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
  449                         %ELSEIF @ID = %REPORT_ELEM_LTS;
  450                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
  451                         %ELSEIF @ID = %DML_REC;
  452                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.DML_REC$;
  453                         %ELSEIF @ID = %CD_LTS;
  454                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.CD_LTS$;
  455                         %ELSEIF @ID = %BASE_LTS;
  456                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.BASE_LTS$;
  457    *                    %ELSEIF @ID = %INIT_LTS;
  458    *                        @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.INIT_LTS$;
  459                   %ENDIF;
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                14   
  460                 END;
  461               ELSE
  462                 IF @ST$ -> VARIABLE.LTS$ ~= ADDR(NIL)
  463                     AND @ST$ -> VARIABLE.LTS$ -> LTS.ID = @ID THEN
  464                   @RETURN$ = @ST$ -> VARIABLE.LTS$;
  465                 ELSE
  466                   @RETURN$ = ADDR(NIL);
  467             END;
  468
  469         %MEND;
  470
  471
  472
  473         %MACRO UPDATE_PREV_QLT$ (@NEW_QLT$ = QLT$);
  474
  475           DO;
  476             IF COMCOM.PREV_QLT$ ~= ADDR(NIL) THEN
  477               COMCOM.PREV_QLT$ -> QLT.BROTHER = @NEW_QLT$;
  478
  479             COMCOM.PREV_QLT$ = @NEW_QLT$;
  480           END;
  481
  482         %MEND;
  483
  484
  485
  486         %MACRO GET_TYPE_DESC_ADSC_LEN (@TYPE_DESC = , @LENGTH = );
  487
  488           DO;
  489             IF @TYPE_DESC.SIZ$ = ADDR(NIL) THEN
  490               @LENGTH = @TYPE_DESC.DESC.ADSC.N;
  491             ELSE
  492               @LENGTH = @TYPE_DESC.SIZ$ -> ETT.LOP -> CONST.CONSTI.WORD1;
  493           END;
  494
  495         %MEND;
  496
09:13 AUG 09 '97 Z8A_SUPP_MAC.:Z8A6SI/Z8A_SUPP_MAC.:Z8A6TUI                15   
  497

