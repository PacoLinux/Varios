

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /* INCLUDE FILE "ST" (ACCOUNT NAME IS C80C80) */
    7
    8
    9      DCL   ST$    PTR EXT ;
   10
   11      DCL 1 ST_    EXT,
   12          2 TOP    PTR INIT (ADDR(NIL)),
   13          2 FIRST  PTR,               /* FIRST ITEM IN PAGE  */
   14          2 BOTTOM SBIN INIT(0),      /* NEXT AVAILABLE      */
   15          2 FLOOR  SBIN INIT(0),      /* LAST WORD IN PAGE   */
   16          2 SIZE   SBIN INIT(0) ;     /* Size in #pages.     */
   17
   18
   19      %MACRO RESERVE_ST (POINTER=ST$) ;
   20
   21           DO;
   22             IF ST_.BOTTOM + SIZEW(ST) >= ST_.FLOOR THEN
   23               CALL Z8AR$RESERVER(ADDR(ST_));
   24
   25             POINTER = PINCRW(ST_.FIRST, ST_.BOTTOM);
   26             ST_.BOTTOM = ST_.BOTTOM + SIZEW(ST);
   27           END;
   28
   29      %MEND;
   30
   31      %MACRO TOP_ST (POINTER = ST$) ;
   32
   33           DO;
   34             POINTER = ST_.TOP;
   35           END;
   36
   37      %MEND ;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            2    
   38
   39      %MACRO STEP_ST (POINTER = ST$) ;
   40
   41           DO;
   42             POINTER = PINCRW(POINTER, SIZEW(ST));
   43
   44             IF POINTER = PINCRW(ST_.FIRST, ST_.BOTTOM) THEN
   45               POINTER = ADDR(NIL);
   46             ELSE
   47               IF POINTER -> ST.ID = %CONTINUE THEN
   48                 POINTER = POINTER -> CONT.NEXT;
   49           END;
   50
   51      %MEND ;
   52
   53
   54      %MACRO ADD_ST_TO_LIST_TAIL (@PROC$ = ,
   55                                  @FROM_ST$ = );
   56
   57         DO;
   58           IF @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ = ADDR(NIL) THEN
   59             DO;
   60               @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.HEAD$ = @FROM_ST$;
   61               @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ = @FROM_ST$;
   62             END;
   63           ELSE
   64             DO;
   65               @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ -> ST.LINK = @FROM_ST$;
   66               @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ = @FROM_ST$;
   67             END;
   68         END;
   69
   70      %MEND;
   71
   72
   73      %MACRO UPDATE_PROC_LINK (@TEMPLATE = ST, @ST$ = , @PROC$ = );
   74
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            3    
   75               %IF (TEXTCHAR(@TEMPLATE) = '') OR (TEXTCHAR(@ST$) = '');
   76               %ENDIF;
   77
   78               @ST$ -> @TEMPLATE.LINK = ADDR(NIL);
   79
   80               %IF (TEXTCHAR(@PROC$) = '');
   81                 %IF PHASE = 1;
   82                   @ST$ -> @TEMPLATE.PROC$ = O1COM.CURRENT_PROC$;
   83                   IF O1COM.CURRENT_PROC$ ~= ADDR(NIL) THEN
   84                     %ADD_ST_TO_LIST_TAIL (@PROC$ = O1COM.CURRENT_PROC$,
   85                                           @FROM_ST$ = @ST$);
   86                 %ELSEIF PHASE = 0;
   87                   IF COMCOM.CURRENT.PHASE = 1 THEN
   88                     DO;
   89                       @ST$ -> @TEMPLATE.PROC$ = O1COM.CURRENT_PROC$;
   90                       IF O1COM.CURRENT_PROC$ ~= ADDR(NIL) THEN
   91                         %ADD_ST_TO_LIST_TAIL (@PROC$ = O1COM.CURRENT_PROC$,
   92                                               @FROM_ST$ = @ST$);
   93                     END;
   94                   ELSE
   95                     @ST$ -> @TEMPLATE.PROC$ = ADDR(NIL);
   96                 %ENDIF;
   97               %ELSE;
   98                 @ST$ -> @TEMPLATE.PROC$ = @PROC$;
   99                 IF @PROC$ ~= ADDR(NIL) THEN
  100                   %ADD_ST_TO_LIST_TAIL (@PROC$ = @PROC$,
  101                                         @FROM_ST$ = @ST$);
  102               %ENDIF;
  103      %MEND;
  104
  105      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            4    
  106      DCL 1 ST     BASED (ST$) ALIGNED,
  107
  108          2 ID                     UBIN (18) UNAL, /* Operation code */
  109          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
  110          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
  111
  112          %DESCRIPTOR(LVL=2);
  113          2 OU_INDEX REDEF DESCL SBIN HALF HALIGNED,
  114
  115          2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
  116          2 LINE_NO                UBIN HALF UNAL,
  117
  118          2 ATTR                   BIT  (36),      /* ATTRIBUTE BITS     */
  119          2 B REDEF ATTR,
  120              3 * (0:35)           BOOLEAN,
  121
  122          2 NEXT                   PTR,            /* SEARCH THREAD      */
  123
  124          2 *                      PTR,
  125
  126          2 DNT$                   PTR,
  127
  128          2 *                      PTR,
  129
  130          2 X_SORT_SYM$            PTR,            /* Used by phase 5 only */
  131
  132          2 X_REF_LIST$           PTR,             /* Used by phase 5 only */
  133          2 LINK                  PTR;             /* Links all ST's in a given proc */
  134
  135
  136      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            5    
  137      %MACRO SCALAR_ST_LAYOUT;
  138
  139          2 ID                     UBIN (18) UNAL, /* Operation code */
  140          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
  141          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
  142
  143          %DESCRIPTOR(LVL=2);
  144
  145          2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
  146          2 LINE_NO                UBIN HALF UNAL,
  147
  148          2 ATTR                   BIT  (36),      /* ATTRIBUTE BITS     */
  149          2 B REDEF ATTR,
  150              3 REFERENCED         BOOLEAN,
  151              3 DEFINED            BOOLEAN,
  152              3 COMPILER_CREATED   BOOLEAN,
  153              3 JUSTIFIED          BOOLEAN,
  154              3 GREATER_256K       BOOLEAN,
  155              3 ELEMENTARY         BOOLEAN,
  156              3 LENGTH_4096        BOOLEAN,
  157              3 COMP6_NONOP        BOOLEAN,
  158              3 REDEF_SUB          BOOLEAN,
  159              3 REDEF_OBJ          BOOLEAN,
  160              3 OCCURS_DEPENDING   BOOLEAN,
  161              3 ASTERISK_SUPRESS   BOOLEAN,
  162              3 RECORD_AREA        BOOLEAN,
  163              3 P                  BOOLEAN, /* P field in an EIS instr */
  164              3 GLOBAL             BOOLEAN,
  165              3 EXTERNAL           BOOLEAN,
  166              3 LINKAGE            BOOLEAN,
  167              3 ALLOCATED          BOOLEAN,
  168              3 RENAMED            BOOLEAN,
  169              3 DML_UWA            BOOLEAN,
  170              3 DML_TYPE           UBIN(3) UNAL,
  171              3 REPORT_ITEM        BOOLEAN,
  172              3 SUM_COUNTER        BOOLEAN,
  173              3 DML_RVA            BOOLEAN,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            6    
  174              3 KANJI              BOOLEAN,
  175              3 MOD_8              BOOLEAN,
  176              3 DIGIT              BOOLEAN,
  177              3 FAB_FIB_BUILT      BOOLEAN,
  178              3 NON_STORAGE        BOOLEAN,
  179              3 ARRAY_PRESET       BOOLEAN,
  180              3 MOD_2              BOOLEAN,
  181              3 CLASS              UBIN(3) UNAL,
  182              3 SUB_CLASS REDEF CLASS,
  183                4 EDITED           BOOLEAN,
  184                4 TYPE             UBIN(2) UNAL,
  185
  186          2 NEXT                   PTR,            /* SEARCH THREAD      */
  187
  188          2 LTS$                   PTR,
  189
  190          2 DNT$                   PTR,
  191
  192          2 QLT$                   PTR,
  193
  194          2 SEQ#,
  195            3 FD                   UBIN HALF HALIGNED,
  196            3 BD                   UBIN HALF HALIGNED,
  197
  198          2 PROC$                  PTR,
  199          2 LINK                   PTR;
  200
  201      %MEND;
  202
  203
  204      DCL 1 SCALAR BASED(ST$) ALIGNED,
  205            %SCALAR_ST_LAYOUT;
  206
  207      DCL 1 ARRAY BASED(ST$) ALIGNED,
  208            %SCALAR_ST_LAYOUT;
  209
  210      DCL 1 VARIABLE BASED(ST$) ALIGNED,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            7    
  211            %SCALAR_ST_LAYOUT;
  212
  213      DCL 1 FD BASED(ST$) ALIGNED,
  214            %SCALAR_ST_LAYOUT;
  215
  216      DCL 1 SD BASED(ST$) ALIGNED,
  217            %SCALAR_ST_LAYOUT;
  218
  219      DCL 1 CD BASED(ST$) ALIGNED,
  220            %SCALAR_ST_LAYOUT;
  221
  222      DCL 1 RD BASED(ST$) ALIGNED,
  223            %SCALAR_ST_LAYOUT;
  224
  225      DCL 1 DB BASED(ST$) ALIGNED,
  226            %SCALAR_ST_LAYOUT;
  227
  228
  229      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            8    
  230      %MACRO INIT_SCALAR ( @ST$   = ST$,
  231                           @ID    = %SCALAR,
  232                          @R     = %BLOCK_,
  233                          @COUNT = %DATA,
  234                          @SA    = 0,
  235                          @DESCL = 0,
  236                          @TYPE  =  ,
  237                          @LINE_NO  = COMCOM.CURRENT.LINE,
  238                          @ATTR  = FALSE,
  239                          @NEXT  = "ADDR(NIL)",
  240                          @LTS$  = "ADDR(NIL)",
  241                          @DNT$  =  ,
  242                          @QLT$  = "ADDR(NIL)",
  243                          @FD    = 0,
  244                          @BD    = %MAX_SEQ#,
  245                          @PROC$ = ,
  246                          @REFERENCED       = ,
  247                          @DEFINED          = ,
  248                          @JUSTIFIED        = ,
  249                          @GREATER_256K     = ,
  250                          @ELEMENTARY       = ,
  251                          @LENGTH_4096      = ,
  252                          @COMP6_NONOP      = ,
  253                          @COMPILER_CREATED = ,
  254                          @REDEF_SUB        = ,
  255                          @REDEF_OBJ        = ,
  256                          @ASTERISK_SUPRESS = ,
  257                          @RECORD_AREA      = ,
  258                          @OCCURS_DEPENDING = ,
  259                          @P                = ,
  260                          @EXTERNAL         = ,
  261                          @GLOBAL           = ,
  262                          @LINKAGE          = ,
  263                          @ALLOCATED        = ,
  264                          @KANJI            = ,
  265                          @DIGIT            = ,
  266                          @MOD_8            = ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            9    
  267                          @DML_UWA          = ,
  268                          @DML_TYPE         = ,
  269                          @REPORT_ITEM      = ,
  270                          @SUM_COUNTER      = ,
  271                          @CLASS            = );
  272
  273             %LSET OK1 = (TEXTCHAR(@TYPE) ~= '');
  274             %LSET OK2 = (TEXTCHAR(@DNT$) ~= '');
  275
  276             DO;
  277
  278               @ST$ -> SCALAR.ID    = @ID;
  279               @ST$ -> SCALAR.R     = @R;
  280               @ST$ -> SCALAR.COUNT = @COUNT;
  281               @ST$ -> SCALAR.SA    = @SA;
  282               @ST$ -> SCALAR.DESCL = @DESCL;
  283               @ST$ -> SCALAR.LINE_NO  = @LINE_NO;
  284               @ST$ -> SCALAR.ATTR  = @ATTR;
  285               @ST$ -> SCALAR.NEXT  = @NEXT;
  286               @ST$ -> SCALAR.LTS$  = @LTS$;
  287               @ST$ -> SCALAR.QLT$  = @QLT$;
  288               @ST$ -> SCALAR.SEQ#.FD = @FD;
  289               @ST$ -> SCALAR.SEQ#.BD = @BD;
  290
  291               %UPDATE_PROC_LINK (@TEMPLATE = SCALAR, @ST$ = @ST$, @PROC$ = @PROC$);
  292
  293               %IF OK1;
  294                 @ST$ -> SCALAR.TYPE = @TYPE;
  295               %ELSE;
  296                 %ERROR(~OK1,'Missing TYPE parameter',2);
  297               %ENDIF;
  298
  299               %IF OK2;
  300                 @ST$ -> SCALAR.DNT$ = @DNT$;
  301               %ELSE;
  302                 %ERROR(~OK2,'Missing DNT parameter',2);
  303               %ENDIF;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            10   
  304
  305               %IF (TEXTCHAR(@REFERENCED) ~= '');
  306                 @ST$ -> SCALAR.B.REFERENCED = @REFERENCED;
  307               %ENDIF;
  308               %IF (TEXTCHAR(@DEFINED) ~= '');
  309                 @ST$ -> SCALAR.B.DEFINED    = @DEFINED;
  310               %ENDIF;
  311               %IF (TEXTCHAR(@JUSTIFIED) ~= '');
  312                 @ST$ -> SCALAR.B.JUSTIFIED  = @JUSTIFIED;
  313               %ENDIF;
  314               %IF (TEXTCHAR(@GREATER_256K) ~= '');
  315                 @ST$ -> SCALAR.B.GREATER_256K = @GREATER_256K;
  316               %ENDIF;
  317               %IF (TEXTCHAR(@ELEMENTARY) ~= '');
  318                 @ST$ -> SCALAR.B.ELEMENTARY = @ELEMENTARY;
  319               %ENDIF;
  320               %IF (TEXTCHAR(@LENGTH_4096) ~= '');
  321                 @ST$ -> SCALAR.B.LENGTH_4096= @LENGTH_4096;
  322               %ENDIF;
  323               %IF (TEXTCHAR(@COMP6_NONOP) ~= '');
  324                 @ST$ -> SCALAR.B.COMP6_NONOP= @COMP6_NONOP;
  325               %ENDIF;
  326               %IF (TEXTCHAR(@COMPILER_CREATED) ~= '');
  327                 @ST$ -> SCALAR.B.COMPILER_CREATED = @COMPILER_CREATED;
  328               %ENDIF;
  329               %IF (TEXTCHAR(@REDEF_SUB) ~= '');
  330                 @ST$ -> SCALAR.B.REDEF_SUB  = @REDEF_SUB;
  331               %ENDIF;
  332               %IF (TEXTCHAR(@REDEF_OBJ) ~= '');
  333                 @ST$ -> SCALAR.B.REDEF_OBJ  = @REDEF_OBJ;
  334               %ENDIF;
  335               %IF (TEXTCHAR(@OCCURS_DEPENDING) ~= '');
  336                 @ST$ -> SCALAR.B.OCCURS_DEPENDING = @OCCURS_DEPENDING;
  337               %ENDIF;
  338               %IF (TEXTCHAR(@ASTERISK_SUPRESS) ~= '');
  339                 @ST$ -> SCALAR.B.ASTERISK_SUPRESS = @ASTERISK_SUPRESS;
  340               %ENDIF;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            11   
  341               %IF (TEXTCHAR(@RECORD_AREA) ~= '');
  342                 @ST$ -> SCALAR.B.RECORD_AREA = @RECORD_AREA;
  343               %ENDIF;
  344               %IF (TEXTCHAR(@P) ~= '');
  345                 @ST$ -> SCALAR.B.P = @P;
  346               %ENDIF;
  347               %IF (TEXTCHAR(@EXTERNAL) ~= '');
  348                 @ST$ -> SCALAR.B.EXTERNAL = @EXTERNAL;
  349               %ENDIF;
  350               %IF (TEXTCHAR(@GLOBAL) ~= '');
  351                 @ST$ -> SCALAR.B.GLOBAL = @GLOBAL;
  352               %ENDIF;
  353               %IF (TEXTCHAR(@LINKAGE) ~= '');
  354                 @ST$ -> SCALAR.B.LINKAGE = @LINKAGE;
  355               %ENDIF;
  356               %IF (TEXTCHAR(@ALLOCATED) ~= '');
  357                 @ST$ -> SCALAR.B.ALLOCATED = @ALLOCATED;
  358               %ENDIF;
  359               %IF (TEXTCHAR(@REPORT_ITEM) ~= '');
  360                 @ST$ -> SCALAR.B.REPORT_ITEM = @REPORT_ITEM;
  361               %ENDIF;
  362               %IF (TEXTCHAR(@SUM_COUNTER) ~= '');
  363                 @ST$ -> SCALAR.B.SUM_COUNTER = @SUM_COUNTER;
  364               %ENDIF;
  365               %IF (TEXTCHAR(@CLASS) ~= '');
  366                 @ST$ -> SCALAR.B.CLASS      = @CLASS;
  367               %ENDIF;
  368               %IF (TEXTCHAR(@DML_TYPE) ~= '');
  369                 @ST$ -> SCALAR.B.DML_TYPE   = @DML_TYPE;
  370               %ENDIF;
  371               %IF (TEXTCHAR(@DML_UWA) ~= '');
  372                 @ST$ -> SCALAR.B.DML_UWA    = @DML_UWA;
  373               %ENDIF;
  374               %IF (TEXTCHAR(@KANJI) ~= '') ;
  375                 @ST$ -> SCALAR.B.KANJI      = @KANJI ;
  376               %ENDIF ;
  377               %IF (TEXTCHAR(@DIGIT) ~= '') ;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            12   
  378                 @ST$ -> SCALAR.B.DIGIT      = @DIGIT ;
  379               %ENDIF ;
  380               %IF (TEXTCHAR(@MOD_8) ~= '') ;
  381                 @ST$ -> SCALAR.B.MOD_8      = @MOD_8 ;
  382               %ENDIF ;
  383
  384             END;
  385      %MEND;
  386
  387
  388      %MACRO NEW_SCALAR ( @ST$ = ST$,
  389                          @R     = %BLOCK_,
  390                          @COUNT = %DATA,
  391                          @SA    = 0,
  392                          @DESCL = 0,
  393                          @TYPE  =  ,
  394                          @LINE_NO  = COMCOM.CURRENT.LINE,
  395                          @ATTR  = FALSE,
  396                          @NEXT  = "ADDR(NIL)",
  397                          @LTS$  = "ADDR(NIL)",
  398                          @DNT$  =  ,
  399                          @QLT$  = "ADDR(NIL)",
  400                          @FD    = 0,
  401                          @BD    = %MAX_SEQ#,
  402                          @PROC$ = ,
  403                          @REFERENCED       = ,
  404                          @DEFINED          = ,
  405                          @JUSTIFIED        = ,
  406                          @GREATER_256K     = ,
  407                          @ELEMENTARY       = ,
  408                          @LENGTH_4096      = ,
  409                          @COMP6_NONOP      = ,
  410                          @COMPILER_CREATED = ,
  411                          @REDEF_SUB        = ,
  412                          @REDEF_OBJ        = ,
  413                          @OCCURS_DEPENDING = ,
  414                          @ASTERISK_SUPRESS = ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            13   
  415                          @RECORD_AREA      = ,
  416                          @P                = ,
  417                          @EXTERNAL         = ,
  418                          @GLOBAL           = ,
  419                          @LINKAGE          = ,
  420                          @ALLOCATED        = ,
  421                          @KANJI            = ,
  422                          @DIGIT            = ,
  423                          @MOD_8            = ,
  424                          @DML_UWA          = ,
  425                          @DML_TYPE         = ,
  426                          @REPORT_ITEM      = ,
  427                          @SUM_COUNTER      = ,
  428                          @CLASS            = );
  429        DO;
  430          %RESERVE_ST(POINTER = @ST$);
  431
  432          %INIT_SCALAR (@ST$                = @ST$,
  433                        @ID                 = %SCALAR,
  434                        @R                  = @R,
  435                        @COUNT              = @COUNT,
  436                        @SA                 = @SA,
  437                        @DESCL              = @DESCL,
  438                        @TYPE               = @TYPE,
  439                        @LINE_NO            = @LINE_NO,
  440                        @ATTR               = @ATTR,
  441                        @NEXT               = @NEXT,
  442                        @LTS$               = @LTS$,
  443                        @DNT$               = @DNT$,
  444                        @QLT$               = @QLT$,
  445                        @FD                 = @FD,
  446                        @BD                 = @BD,
  447                        @PROC$              = @PROC$,
  448                        @REFERENCED         = @REFERENCED,
  449                        @DEFINED            = @DEFINED,
  450                        @JUSTIFIED          = @JUSTIFIED,
  451                        @GREATER_256K       = @GREATER_256K,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            14   
  452                        @ELEMENTARY         = @ELEMENTARY,
  453                        @LENGTH_4096        = @LENGTH_4096,
  454                        @COMP6_NONOP        = @COMP6_NONOP,
  455                        @COMPILER_CREATED   = @COMPILER_CREATED,
  456                        @REDEF_SUB          = @REDEF_SUB,
  457                        @REDEF_OBJ          = @REDEF_OBJ,
  458                        @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
  459                        @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
  460                        @RECORD_AREA        = @RECORD_AREA,
  461                        @P                  = @P,
  462                        @EXTERNAL           = @EXTERNAL,
  463                        @GLOBAL             = @GLOBAL,
  464                        @LINKAGE            = @LINKAGE,
  465                        @ALLOCATED          = @ALLOCATED,
  466                        @KANJI              = @KANJI,
  467                        @DIGIT              = @DIGIT,
  468                        @MOD_8              = @MOD_8,
  469                        @DML_UWA            = @DML_UWA,
  470                        @DML_TYPE           = @DML_TYPE,
  471                        @REPORT_ITEM        = @REPORT_ITEM,
  472                        @SUM_COUNTER        = @SUM_COUNTER,
  473                        @CLASS              = @CLASS);
  474        END;
  475      %MEND;
  476
  477
  478      %MACRO NEW_ARRAY ( @ST$               = ST$,
  479                          @R                = %BLOCK_,
  480                          @COUNT            = %DATA,
  481                          @SA               = 0,
  482                          @DESCL            = 0,
  483                          @TYPE             =  ,
  484                          @LINE_NO             = COMCOM.CURRENT.LINE,
  485                          @ATTR             = FALSE,
  486                          @NEXT             = "ADDR(NIL)",
  487                          @LTS$             = "ADDR(NIL)",
  488                          @DNT$             =  ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            15   
  489                          @QLT$             = "ADDR(NIL)",
  490                          @FD               = 0,
  491                          @BD               = %MAX_SEQ#,
  492                          @PROC$            = ,
  493                          @REFERENCED       = ,
  494                          @DEFINED          = ,
  495                          @JUSTIFIED        = ,
  496                          @GREATER_256K     = ,
  497                          @ELEMENTARY       = ,
  498                          @LENGTH_4096      = ,
  499                          @COMP6_NONOP      = ,
  500                          @COMPILER_CREATED = ,
  501                          @REDEF_SUB        = ,
  502                          @REDEF_OBJ        = ,
  503                          @OCCURS_DEPENDING = ,
  504                          @ASTERISK_SUPRESS = ,
  505                          @RECORD_AREA      = ,
  506                          @P                = ,
  507                          @EXTERNAL         = ,
  508                          @GLOBAL           = ,
  509                          @LINKAGE          = ,
  510                         @ALLOCATED         = ,
  511                          @CLASS            = );
  512        DO;
  513          %RESERVE_ST(POINTER               = @ST$);
  514
  515          %INIT_SCALAR (@ST$                = @ST$,
  516                        @ID                 = %ARRAY,
  517                        @R                  = @R,
  518                        @COUNT              = @COUNT,
  519                        @SA                 = @SA,
  520                        @DESCL              = @DESCL,
  521                        @TYPE               = @TYPE,
  522                        @LINE_NO               = @LINE_NO,
  523                        @ATTR               = @ATTR,
  524                        @NEXT               = @NEXT,
  525                        @LTS$               = @LTS$,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            16   
  526                        @DNT$               = @DNT$,
  527                        @QLT$               = @QLT$,
  528                        @FD                 = @FD,
  529                        @BD                 = @BD,
  530                        @PROC$              = @PROC$,
  531                        @REFERENCED         = @REFERENCED,
  532                        @DEFINED            = @DEFINED,
  533                        @JUSTIFIED          = @JUSTIFIED,
  534                        @GREATER_256K       = @GREATER_256K,
  535                        @ELEMENTARY         = @ELEMENTARY,
  536                        @LENGTH_4096        = @LENGTH_4096,
  537                        @COMP6_NONOP        = @COMP6_NONOP,
  538                        @COMPILER_CREATED   = @COMPILER_CREATED,
  539                        @REDEF_SUB          = @REDEF_SUB,
  540                        @REDEF_OBJ          = @REDEF_OBJ,
  541                        @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
  542                        @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
  543                        @RECORD_AREA        = @RECORD_AREA,
  544                        @P                  = @P,
  545                        @EXTERNAL           = @EXTERNAL,
  546                        @GLOBAL             = @GLOBAL,
  547                        @LINKAGE            = @LINKAGE,
  548                        @ALLOCATED          = @ALLOCATED,
  549                        @CLASS              = @CLASS);
  550        END;
  551      %MEND;
  552
  553
  554      %MACRO NEW_RD     ( @ST$ = ST$,
  555                          @R     = %BLOCK_,
  556                          @COUNT = %DATA,
  557                          @SA    = 0,
  558                          @DESCL = 0,
  559                          @TYPE  =  ,
  560                          @LINE_NO  = COMCOM.CURRENT.LINE,
  561                          @ATTR  = FALSE,
  562                          @NEXT  = "ADDR(NIL)",
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            17   
  563                          @LTS$  = "ADDR(NIL)",
  564                          @DNT$  =  ,
  565                          @QLT$  = "ADDR(NIL)",
  566                          @FD    = 0,
  567                          @BD    = %MAX_SEQ#,
  568                          @PROC$ = ,
  569                          @REFERENCED       = ,
  570                          @DEFINED          = ,
  571                          @JUSTIFIED        = ,
  572                          @GREATER_256K     = ,
  573                          @ELEMENTARY       = ,
  574                          @LENGTH_4096      = ,
  575                          @COMP6_NONOP      = ,
  576                          @COMPILER_CREATED = ,
  577                          @REDEF_SUB        = ,
  578                          @REDEF_OBJ        = ,
  579                          @OCCURS_DEPENDING = ,
  580                          @ASTERISK_SUPRESS = ,
  581                          @RECORD_AREA      = ,
  582                          @P                = ,
  583                          @EXTERNAL         = ,
  584                          @GLOBAL           = ,
  585                          @LINKAGE          = ,
  586                          @ALLOCATED        = ,
  587                          @CLASS            = );
  588        DO;
  589          %RESERVE_ST(POINTER = @ST$);
  590
  591          %INIT_SCALAR (@ST$                = @ST$,
  592                        @ID                 = %RD,
  593                        @R                  = @R,
  594                        @COUNT              = @COUNT,
  595                        @SA                 = @SA,
  596                        @DESCL              = @DESCL,
  597                        @TYPE               = @TYPE,
  598                        @LINE_NO               = @LINE_NO,
  599                        @ATTR               = @ATTR,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            18   
  600                        @NEXT               = @NEXT,
  601                        @LTS$               = @LTS$,
  602                        @DNT$               = @DNT$,
  603                        @QLT$               = @QLT$,
  604                        @FD                 = @FD,
  605                        @BD                 = @BD,
  606                        @PROC$              = @PROC$,
  607                        @REFERENCED         = @REFERENCED,
  608                        @DEFINED            = @DEFINED,
  609                        @JUSTIFIED          = @JUSTIFIED,
  610                        @GREATER_256K       = @GREATER_256K,
  611                        @ELEMENTARY         = @ELEMENTARY,
  612                        @LENGTH_4096        = @LENGTH_4096,
  613                        @COMP6_NONOP        = @COMP6_NONOP,
  614                        @COMPILER_CREATED   = @COMPILER_CREATED,
  615                        @REDEF_SUB          = @REDEF_SUB,
  616                        @REDEF_OBJ          = @REDEF_OBJ,
  617                        @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
  618                        @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
  619                        @RECORD_AREA        = @RECORD_AREA,
  620                        @P                  = @P,
  621                        @EXTERNAL           = @EXTERNAL,
  622                        @GLOBAL             = @GLOBAL,
  623                        @LINKAGE            = @LINKAGE,
  624                        @ALLOCATED          = @ALLOCATED,
  625                        @CLASS              = @CLASS);
  626        END;
  627      %MEND;
  628
  629
  630
  631      %MACRO NEW_FD     ( @ST$ = ST$,
  632                          @R     = %BLOCK_,
  633                          @COUNT = %DATA,
  634                          @SA    = 0,
  635                          @DESCL = 0,
  636                          @TYPE  =  ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            19   
  637                          @LINE_NO  = COMCOM.CURRENT.LINE,
  638                          @ATTR  = FALSE,
  639                          @NEXT  = "ADDR(NIL)",
  640                          @LTS$  = "ADDR(NIL)",
  641                          @DNT$  =  ,
  642                          @QLT$  = "ADDR(NIL)",
  643                          @FD    = 0,
  644                          @BD    = %MAX_SEQ#,
  645                          @PROC$ = ,
  646                          @REFERENCED       = ,
  647                          @DEFINED          = ,
  648                          @JUSTIFIED        = ,
  649                          @GREATER_256K     = ,
  650                          @ELEMENTARY       = ,
  651                          @LENGTH_4096      = ,
  652                          @COMP6_NONOP      = ,
  653                          @COMPILER_CREATED = ,
  654                          @REDEF_SUB        = ,
  655                          @REDEF_OBJ        = ,
  656                          @OCCURS_DEPENDING = ,
  657                          @ASTERISK_SUPRESS = ,
  658                          @RECORD_AREA      = ,
  659                          @P                = ,
  660                          @EXTERNAL         = ,
  661                          @GLOBAL           = ,
  662                          @LINKAGE          = ,
  663                         @ALLOCATED         = ,
  664                          @CLASS            = );
  665        DO;
  666          %RESERVE_ST(POINTER = @ST$);
  667
  668          %INIT_SCALAR (@ST$                = @ST$,
  669                        @ID                 = %FD,
  670                        @R                  = @R,
  671                        @COUNT              = @COUNT,
  672                        @SA                 = @SA,
  673                        @DESCL              = @DESCL,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            20   
  674                        @TYPE               = @TYPE,
  675                        @LINE_NO               = @LINE_NO,
  676                        @ATTR               = @ATTR,
  677                        @NEXT               = @NEXT,
  678                        @LTS$               = @LTS$,
  679                        @DNT$               = @DNT$,
  680                        @QLT$               = @QLT$,
  681                        @FD                 = @FD,
  682                        @BD                 = @BD,
  683                        @PROC$              = @PROC$,
  684                        @REFERENCED         = @REFERENCED,
  685                        @DEFINED            = @DEFINED,
  686                        @JUSTIFIED          = @JUSTIFIED,
  687                        @GREATER_256K       = @GREATER_256K,
  688                        @ELEMENTARY         = @ELEMENTARY,
  689                        @LENGTH_4096        = @LENGTH_4096,
  690                        @COMP6_NONOP        = @COMP6_NONOP,
  691                        @COMPILER_CREATED   = @COMPILER_CREATED,
  692                        @REDEF_SUB          = @REDEF_SUB,
  693                        @REDEF_OBJ          = @REDEF_OBJ,
  694                        @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
  695                        @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
  696                        @RECORD_AREA        = @RECORD_AREA,
  697                        @P                  = @P,
  698                        @EXTERNAL           = @EXTERNAL,
  699                        @GLOBAL             = @GLOBAL,
  700                        @LINKAGE            = @LINKAGE,
  701                        @ALLOCATED          = @ALLOCATED,
  702                        @CLASS              = @CLASS);
  703        END;
  704      %MEND;
  705      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            21   
  706      DCL 1 DML_ITEM BASED(ST$) ALIGNED,
  707
  708          2 ID                     UBIN (18) UNAL, /* Operation code    */
  709          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
  710          2 COUNT                  UBIN  (9) UNAL, /* Block/symref #     */
  711
  712          2 INTERNAL_NAME          UBIN (36) UNAL, /* DML internal name  */
  713
  714          2 TYPE                   UBIN HALF UNAL, /* %TYG               */
  715          2 LINE_NO                UBIN HALF UNAL,
  716
  717          2 ATTR                   BIT (36)  UNAL,
  718          2 B REDEF ATTR,
  719            3 *         UBIN(14)  UNAL,
  720            3 GLOBAL       BOOLEAN,
  721            3 EXTERNAL     BOOLEAN,
  722            3 *            UBIN(9)  UNAL,
  723            3 DML_RVA   BOOLEAN,
  724            3 TEMP         BOOLEAN,
  725            3 *            BOOLEAN,
  726            3 INDEXED_REALM BOOLEAN,
  727            3 *         UBIN(7)  UNAL,
  728
  729          2 NEXT                   PTR,
  730          2 LTS$                   PTR,
  731          2 DNT$                   PTR,
  732          2 QLT$                   PTR,
  733          2 SEQ#,
  734            3 FD                   UBIN HALF HALIGNED,
  735            3 BD                   UBIN HALF HALIGNED,
  736          2 PROC$                  PTR,
  737          2 LINK                   PTR;
  738
  739
  740      %MACRO NEW_DML_ITEM  (  @ST$   = ST$,
  741                              @ID    =    ,
  742                              @TEMP  =  ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            22   
  743                              @INDEXED_REALM = FALSE,
  744                              @R    = %BLOCK_,
  745                              @COUNT = %DATA,
  746                              @INT_NAME = ,
  747                              @TYPE  = %TYG,
  748                              @LINE_NO  = COMCOM.CURRENT.LINE,
  749                              @ATTR  = FALSE,
  750                              @NEXT  = "ADDR(NIL)",
  751                              @LTS$  = "ADDR(NIL)",
  752                              @DNT$  =    ,
  753                              @QLT$  = "ADDR(NIL)",
  754                              @FD    = 0,
  755                              @BD    = %MAX_SEQ#,
  756                              @PROC$ =    );
  757
  758          DO;
  759              %RESERVE_ST(POINTER = @ST$);
  760
  761              @ST$ -> DML_ITEM.ID             = @ID;
  762              @ST$ -> DML_ITEM.R              = @R;
  763              @ST$ -> DML_ITEM.COUNT          = @COUNT;
  764              @ST$ -> DML_ITEM.INTERNAL_NAME  = @INT_NAME;
  765              @ST$ -> DML_ITEM.ATTR           = @ATTR;
  766              @ST$ -> DML_ITEM.B.TEMP         = @TEMP;
  767              @ST$ -> DML_ITEM.B.GLOBAL       = %TRUE;
  768              @ST$ -> DML_ITEM.B.EXTERNAL     = %TRUE;
  769              @ST$ -> DML_ITEM.B.INDEXED_REALM = @INDEXED_REALM;
  770              @ST$ -> DML_ITEM.TYPE           = @TYPE;
  771              @ST$ -> DML_ITEM.LINE_NO        = @LINE_NO;
  772              @ST$ -> DML_ITEM.NEXT           = @NEXT;
  773              @ST$ -> DML_ITEM.LTS$           = @LTS$;
  774              @ST$ -> DML_ITEM.DNT$           = @DNT$;
  775              @ST$ -> DML_ITEM.QLT$           = @QLT$;
  776              @ST$ -> DML_ITEM.SEQ#.FD        = @FD;
  777              @ST$ -> DML_ITEM.SEQ#.BD        = @BD;
  778
  779              %UPDATE_PROC_LINK(@TEMPLATE = DML_ITEM, @ST$ = @ST$,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            23   
  780                                                      @PROC$ = @PROC$);
  781
  782          END;
  783      %MEND;
  784      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            24   
  785      DCL 1 CONST BASED(ST$) ALIGNED,
  786
  787          2 ID                     UBIN (18) UNAL, /* Operation code */
  788          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
  789          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
  790
  791          %DESCRIPTOR(LVL=2);
  792
  793          2 TYPE                   UBIN HALF HALIGNED,
  794          2 *                      UBIN HALF HALIGNED,
  795
  796          2 ATTR BIT(36),
  797          2 B REDEF ATTR,
  798            3 LONG_CONSTANT        BOOLEAN,
  799            3 TWO_WORD             BOOLEAN,
  800            3 MOD_2                BOOLEAN,
  801            3 ALL                  BOOLEAN,
  802            3 ALLOCATED            BOOLEAN,
  803    *       3 * (0: 7)             BOOLEAN,
  804    *       3 P                    BOOLEAN,
  805    *       3 * (0:11)             BOOLEAN,
  806            3 KANJI                BOOLEAN,
  807    *       3 * (0: 8)             BOOLEAN,
  808
  809          2 NEXT                   PTR,
  810
  811          2 ALLOC_LINK             PTR,            /* Generator use only */
  812
  813          2 DNT$                   PTR,
  814
  815          2 *                      PTR,            /* Filler */
  816
  817          2 CONSTI UNAL,
  818             3 WORD1               SBIN WORD,      /* Fullword constant */
  819             3 WORD2               SBIN WORD,
  820
  821           2 CONSTS REDEF CONSTI,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            25   
  822             3 UPPER               SBIN(18) UNAL,
  823             3 LOWER               SBIN(18) UNAL,
  824             3 *                   UBIN WORD,
  825
  826           2 CONSTU REDEF CONSTI,
  827             3 UPPER               UBIN(18) UNAL,
  828             3 LOWER               UBIN(18) UNAL,
  829             3 *                   UBIN WORD,
  830
  831           2 CONST$ REDEF CONSTI,
  832             3 PTR$                PTR,
  833             3 *                   UBIN WORD,
  834
  835           2 CONSTA REDEF CONSTI
  836                          CHAR(8) UNAL,
  837
  838           2 CONSTR REDEF CONSTI,
  839             3 EXP                 SBIN(8) UNAL,
  840             3 MANTISSA            SBIN(28) UNAL,
  841             3 *                   UBIN WORD,
  842
  843           2 CONSTD REDEF CONSTI,
  844             3 ARG_COUNT           SBIN(18) UNAL,
  845             3 DESC_COUNT          SBIN(18) UNAL,
  846             3 DESC           UNAL,
  847               4 TYPE              UBIN(6) UNAL,
  848               4 *                 UBIN(6) UNAL,
  849               4 ADSC         UNAL,
  850                 5 LENGTH          SBIN(24) UNAL,
  851               4 NDSC         REDEF ADSC,
  852                 5 SCALE_FACTOR    SBIN(12) UNAL,
  853                 5 LENGTH          SBIN(12) UNAL,
  854
  855           2 CONSTB (0:11) REDEF CONSTI BIT(6),
  856
  857          2 *                      PTR; /* Link field not applicable */
  858
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            26   
  859
  860      %MACRO NEW_CONST ( @ST$                = ST$,
  861                         @R                  = %PROGRAM,
  862                         @COUNT              = O1COM.CURRENT_SEGMENTC,
  863                         @TYPE               = %TYI,
  864                         @ATTR               = FALSE,
  865                         @NEXT               = "ADDR(NIL)",
  866                         @ALLOC_LINK         = "ADDR(NIL)",
  867                         @DNT$               = "ADDR(NIL)",
  868                         @LONG_CONSTANT      = ,
  869                         @TWO_WORD           = ,
  870                         @MOD_2              = ,
  871                         @ALL                = ,
  872    *                    @P                  = ,
  873                         @KANJI              = ,
  874                         @ALLOCATED          = );
  875        DO;
  876          %RESERVE_ST (POINTER               = @ST$);
  877
  878          @ST$ -> CONST.ID                   = %CONST;
  879          @ST$ -> CONST.R                    = @R;
  880          @ST$ -> CONST.COUNT                = @COUNT;
  881          @ST$ -> CONST.TYPE                 = @TYPE;
  882          @ST$ -> CONST.ATTR                 = @ATTR;
  883          @ST$ -> CONST.NEXT                 = @NEXT;
  884          @ST$ -> CONST.ALLOC_LINK           = @ALLOC_LINK;
  885          @ST$ -> CONST.DNT$                 = @DNT$;
  886
  887          %IF (TEXTCHAR(@LONG_CONSTANT) ~= '');
  888            @ST$ -> CONST.B.LONG_CONSTANT    = @LONG_CONSTANT;
  889          %ENDIF;
  890          %IF (TEXTCHAR(@TWO_WORD) ~= '');
  891            @ST$ -> CONST.B.TWO_WORD         = @TWO_WORD;
  892          %ENDIF;
  893          %IF (TEXTCHAR(@MOD_2) ~= '');
  894            @ST$ -> CONST.B.MOD_2            = @MOD_2;
  895          %ENDIF;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            27   
  896          %IF (TEXTCHAR(@ALL) ~= '');
  897            @ST$ -> CONST.B.ALL              = @ALL;
  898          %ENDIF;
  899          %IF (TEXTCHAR(@KANJI) ~= '');
  900            @ST$ -> CONST.B.KANJI            = @KANJI;
  901          %ENDIF;
  902    *     %IF (TEXTCHAR(@P) ~= '');
  903    *       @ST$ -> CONST.B.P                = @P;
  904    *     %ENDIF;
  905          %IF (TEXTCHAR(@ALLOCATED) ~= '');
  906            @ST$ -> CONST.B.ALLOCATED        = @ALLOCATED;
  907          %ENDIF;
  908        END;
  909      %MEND;
  910      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            28   
  911      %MACRO PARA_ST_LAYOUT;
  912
  913          2 ID                     UBIN (18) UNAL, /* Operation code */
  914          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
  915          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
  916
  917          2 DESC,
  918            %DESCRIPTOR(LVL=3);
  919          2 P_END$ REDEF DESC      PTR,
  920          2 P_START$ REDEF DESC    PTR,
  921          2 XR_TEMP REDEF DESC     PTR,
  922
  923          2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
  924          2 LINE_NO                UBIN HALF UNAL,
  925
  926          2 ATTR                   BIT  (36),      /* ATTRIBUTE BITS     */
  927          2 B REDEF ATTR,
  928            3 REFERENCED           BOOLEAN,
  929            3 DEFINED              BOOLEAN,
  930            3 COMPILER_CREATED     BOOLEAN,
  931            3 GOTO_LABEL           BOOLEAN,
  932            3 DUPLICATE            BOOLEAN,
  933            3 ONE_REF              BOOLEAN,
  934            3 PHASE_2              BOOLEAN,
  935            3 FALL_THRU            BOOLEAN,
  936            3 INIT_PROC            BOOLEAN,
  937            3 PFORM_START          BOOLEAN,
  938            3 PFORM_END            BOOLEAN,
  939            3 PFORM_NESTED         BOOLEAN,
  940            3 ALTER_CHECK          BOOLEAN,
  941            3 COBOL_74_PFORM       BOOLEAN,
  942            3 PFORM_74_END         BOOLEAN,
  943            3 GO_VECTOR_START      BOOLEAN,
  944            3 ENTRY_POINT          BOOLEAN,
  945            3 INTERIOR_PFORM_LBL   BOOLEAN,
  946            3 DATA_REF             BOOLEAN,
  947            3 BACKWARD_PFORM       BOOLEAN,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            29   
  948            3 ALLOCATED            BOOLEAN,
  949            3 ON_SIZE_ERROR        BOOLEAN,
  950            3 GO_ALTERED           BOOLEAN,
  951            3 USE_BASE_POINTER     BOOLEAN,
  952            3 USE_GLOBAL           BOOLEAN,
  953            3 USE_ALREADY_FLAGGED  BOOLEAN,
  954            3 USE_PROC             BOOLEAN,
  955            3 PFORM_END_LBL        BOOLEAN,
  956            3 EXIT_PROG_LABEL      BOOLEAN,
  957    *       3 LABEL_AFTER_USE      BOOLEAN,
  958    *       3 * (0:5)              BOOLEAN,
  959
  960          2 NEXT                   PTR,            /* SEARCH THREAD      */
  961
  962          2 POINTER$                PTR,
  963
  964          2 DNT$                   PTR,
  965
  966          2 SECTION$               PTR,
  967          2 SEGMENT$ REDEF SECTION$ PTR,
  968
  969          2 PREV_ILS$              PTR,
  970
  971          2 PROC$                  PTR,
  972          2 LINK                   PTR;
  973
  974      %MEND;
  975
  976
  977      DCL 1 PARA BASED(ST$) ALIGNED,
  978            %PARA_ST_LAYOUT;
  979
  980      DCL 1 SECTION BASED(ST$) ALIGNED,
  981            %PARA_ST_LAYOUT;
  982
  983      DCL 1 LABEL BASED(ST$) ALIGNED,
  984          %PARA_ST_LAYOUT;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            30   
  985
  986
  987      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            31   
  988      %MACRO INIT_PARA (@ST$                 = ST$,
  989                        @ID                  = %PARA,
  990                        @R                   = %PROGRAM,
  991                        @COUNT               = %PROC,
  992                        @P_END$              = "ADDR(NIL)",
  993                        @TYPE                = %TYI,
  994                        @LINE_NO             = COMCOM.CURRENT.LINE,
  995                        @ATTR                = FALSE,
  996                        @NEXT                = "ADDR(NIL)",
  997                        @POINTER$            = "ADDR(NIL)",
  998                        @DNT$                = "ADDR(NIL)",
  999                        @SECTION$            = ,
 1000                        @SEGMENT$            = ,
 1001                        @PROC$               = ,
 1002                        @PREV_ILS$           = "ADDR(NIL)",
 1003                        @REFERENCED          = ,
 1004                        @DEFINED             = ,
 1005                        @COMPILER_CREATED    = ,
 1006                        @GOTO_LABEL          = ,
 1007                        @DUPLICATE           = ,
 1008                        @ONE_REF             = ,
 1009                        @PHASE_2             = ,
 1010                        @FALL_THRU           = ,
 1011                        @INIT_PROC           = ,
 1012                        @PFORM_START         = ,
 1013                        @PFORM_END           = ,
 1014                        @PFORM_NESTED        = ,
 1015                        @ALTER_CHECK         = ,
 1016                        @COBOL_74_PFORM      = ,
 1017                        @PFORM_74_END        = ,
 1018                        @GO_VECTOR_START     = ,
 1019                        @ENTRY_POINT         = ,
 1020                        @INTERIOR_PFORM_LBL  = ,
 1021                        @DATA_REF            = ,
 1022                        @BACKWARD_PFORM      = ,
 1023                        @ALLOCATED           = ,
 1024                        @ON_SIZE_ERROR       = ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            32   
 1025                        @GO_ALTERED          = ,
 1026                        @USE_BASE_POINTER    = ,
 1027                        @USE_GLOBAL          = ,
 1028                        @USE_ALREADY_FLAGGED = ,
 1029                        @USE_PROC            = ,
 1030                        @PFORM_END_LBL       = ,
 1031    *                   @LABEL_AFTER_USE     = ,
 1032                        @EXIT_PROG_LABEL     = );
 1033        DO;
 1034          @ST$ -> PARA.ID                    = @ID;
 1035          @ST$ -> PARA.R                     = @R;
 1036          @ST$ -> PARA.COUNT                 = @COUNT;
 1037          @ST$ -> PARA.P_END$                = @P_END$;
 1038          @ST$ -> PARA.TYPE                  = @TYPE;
 1039          @ST$ -> PARA.LINE_NO               = @LINE_NO;
 1040          @ST$ -> PARA.ATTR                  = @ATTR;
 1041          @ST$ -> PARA.NEXT                  = @NEXT;
 1042          @ST$ -> PARA.POINTER$               = @POINTER$;
 1043          @ST$ -> PARA.DNT$                  = @DNT$;
 1044
 1045          %IF (TEXTCHAR(@SECTION$) ~= '');
 1046           @ST$ -> PARA.SECTION$             = @SECTION$;
 1047          %ELSEIF (TEXTCHAR(@SEGMENT$) ~= '');
 1048           @ST$ -> PARA.SEGMENT$             = @SEGMENT$;
 1049          %ELSE;
 1050           @ST$ -> PARA.SECTION$             = ADDR(NIL);
 1051          %ENDIF;
 1052
 1053
 1054          %UPDATE_PROC_LINK (@TEMPLATE = PARA, @ST$ = @ST$, @PROC$ = @PROC$);
 1055          @ST$ -> PARA.PREV_ILS$             = @PREV_ILS$;
 1056
 1057          %IF (TEXTCHAR(@REFERENCED) ~= '');
 1058            @ST$ -> PARA.B.REFERENCED        = @REFERENCED;
 1059          %ENDIF;
 1060          %IF (TEXTCHAR(@DEFINED) ~= '');
 1061            @ST$ -> PARA.B.DEFINED           = @DEFINED;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            33   
 1062          %ENDIF;
 1063          %IF (TEXTCHAR(@COMPILER_CREATED) ~= '');
 1064            @ST$ -> PARA.B.COMPILER_CREATED  = @COMPILER_CREATED;
 1065          %ENDIF;
 1066          %IF (TEXTCHAR(@GOTO_LABEL) ~= '');
 1067            @ST$ -> PARA.B.GOTO_LABEL        = @GOTO_LABEL;
 1068          %ENDIF;
 1069          %IF (TEXTCHAR(@DUPLICATE) ~= '');
 1070            @ST$ -> PARA.B.DUPLICATE         = @DUPLICATE;
 1071          %ENDIF;
 1072          %IF (TEXTCHAR(@ONE_REF) ~= '');
 1073            @ST$ -> PARA.B.ONE_REF           = @ONE_REF;
 1074          %ENDIF;
 1075          %IF (TEXTCHAR(@PHASE_2) ~= '');
 1076            @ST$ -> PARA.B.PHASE_2           = @PHASE_2;
 1077          %ENDIF;
 1078          %IF (TEXTCHAR(@FALL_THRU) ~= '');
 1079            @ST$ -> PARA.B.FALL_THRU         = @FALL_THRU;
 1080          %ENDIF;
 1081          %IF (TEXTCHAR(@INIT_PROC) ~= '');
 1082            @ST$ -> PARA.B.INIT_PROC         = @INIT_PROC;
 1083          %ENDIF;
 1084          %IF (TEXTCHAR(@PFORM_START) ~= '');
 1085            @ST$ -> PARA.B.PFORM_START       = @PFORM_START;
 1086          %ENDIF;
 1087          %IF (TEXTCHAR(@PFORM_END) ~= '');
 1088            @ST$ -> PARA.B.PFORM_END         = @PFORM_END;
 1089          %ENDIF;
 1090          %IF (TEXTCHAR(@PFORM_NESTED) ~= '');
 1091            @ST$ -> PARA.B.PFORM_NESTED      = @PFORM_NESTED;
 1092          %ENDIF;
 1093          %IF (TEXTCHAR(@ALTER_CHECK) ~= '');
 1094            @ST$ -> PARA.B.ALTER_CHECK       = @ALTER_CHECK;
 1095          %ENDIF;
 1096          %IF (TEXTCHAR(@COBOL_74_PFORM) ~= '');
 1097            @ST$ -> PARA.B.COBOL_74_PFORM    = @COBOL_74_PFORM;
 1098          %ENDIF;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            34   
 1099          %IF (TEXTCHAR(@PFORM_74_END) ~= '');
 1100            @ST$ -> PARA.B.PFORM_74_END      = @PFORM_74_END;
 1101          %ENDIF;
 1102          %IF (TEXTCHAR(@GO_VECTOR_START) ~= '');
 1103            @ST$ -> PARA.B.GO_VECTOR_START   = @GO_VECTOR_START;
 1104          %ENDIF;
 1105           %IF (TEXTCHAR(@ENTRY_POINT) ~= '');
 1106             @ST$ -> PARA.B.ENTRY_POINT      = @ENTRY_POINT;
 1107           %ENDIF;
 1108          %IF (TEXTCHAR(@INTERIOR_PFORM_LBL) ~= '');
 1109            @ST$ -> PARA.B.INTERIOR_PFORM_LBL = @INTERIOR_PFORM_LBL;
 1110          %ENDIF;
 1111          %IF (TEXTCHAR(@DATA_REF) ~= '');
 1112            @ST$ -> PARA.B.DATA_REF          = @DATA_REF;
 1113          %ENDIF;
 1114          %IF (TEXTCHAR(@BACKWARD_PFORM) ~= '');
 1115            @ST$ -> PARA.B.BACKWARD_PFORM    = @BACKWARD_PFORM;
 1116          %ENDIF;
 1117          %IF (TEXTCHAR(@ALLOCATED) ~= '');
 1118            @ST$ -> PARA.B.ALLOCATED         = @ALLOCATED;
 1119          %ENDIF;
 1120          %IF (TEXTCHAR(@ON_SIZE_ERROR) ~= '');
 1121            @ST$ -> PARA.B.ON_SIZE_ERROR     = @ON_SIZE_ERROR;
 1122          %ENDIF;
 1123          %IF (TEXTCHAR(@GO_ALTERED) ~= '');
 1124            @ST$ -> PARA.B.GO_ALTERED        = @GO_ALTERED;
 1125          %ENDIF;
 1126          %IF (TEXTCHAR(@USE_BASE_POINTER) ~= '');
 1127            @ST$ -> PARA.B.USE_BASE_POINTER  = @USE_BASE_POINTER;
 1128          %ENDIF;
 1129          %IF (TEXTCHAR(@USE_GLOBAL) ~= '');
 1130            @ST$ -> PARA.B.USE_GLOBAL        = @USE_GLOBAL;
 1131          %ENDIF;
 1132          %IF (TEXTCHAR(@USE_ALREADY_FLAGGED) ~= '');
 1133            @ST$ -> PARA.B.USE_ALREADY_FLAGGED = @USE_ALREADY_FLAGGED;
 1134          %ENDIF;
 1135          %IF (TEXTCHAR(@USE_PROC) ~= '');
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            35   
 1136            @ST$ -> PARA.B.USE_PROC          = @USE_PROC;
 1137          %ENDIF;
 1138          %IF (TEXTCHAR(@PFORM_END_LBL) ~= '');
 1139            @ST$ -> PARA.B.PFORM_END_LBL     = @PFORM_END_LBL;
 1140          %ENDIF;
 1141          %IF (TEXTCHAR(@EXIT_PROG_LABEL) ~= '');
 1142            @ST$ -> PARA.B.EXIT_PROG_LABEL   = @EXIT_PROG_LABEL;
 1143          %ENDIF;
 1144    *     %IF (TEXTCHAR(@LABEL_AFTER_USE) ~= '');
 1145    *       @ST$ -> PARA.B.LABEL_AFTER_USE   = @LABEL_AFTER_USE;
 1146    *     %ENDIF;
 1147        END;
 1148
 1149      %MEND;
 1150
 1151
 1152      %MACRO NEW_PARA ( @ST$                 = ST$,
 1153                        @R                   = %PROGRAM,
 1154                        @COUNT               = %PROC,
 1155                        @P_END$              = "ADDR(NIL)",
 1156                        @TYPE                = %TYI,
 1157                        @LINE_NO             = COMCOM.CURRENT.LINE,
 1158                        @ATTR                = FALSE,
 1159                        @NEXT                = "ADDR(NIL)",
 1160                        @POINTER$            = "ADDR(NIL)",
 1161                        @DNT$                = "ADDR(NIL)",
 1162                        @SECTION$            = ,
 1163                        @PROC$               = ,
 1164                        @PREV_ILS$           = "ADDR(NIL)",
 1165                        @REFERENCED          = ,
 1166                        @DEFINED             = ,
 1167                        @COMPILER_CREATED    = ,
 1168                        @GOTO_LABEL          = ,
 1169                        @DUPLICATE           = ,
 1170                        @ONE_REF             = ,
 1171                        @PHASE_2             = ,
 1172                        @FALL_THRU           = ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            36   
 1173                        @INIT_PROC           = ,
 1174                        @PFORM_START         = ,
 1175                        @PFORM_END           = ,
 1176                        @PFORM_NESTED        = ,
 1177                        @ALTER_CHECK         = ,
 1178                        @COBOL_74_PFORM      = ,
 1179                        @PFORM_74_END        = ,
 1180                        @GO_VECTOR_START     = ,
 1181                        @ENTRY_POINT         = ,
 1182                        @INTERIOR_PFORM_LBL  = ,
 1183                        @DATA_REF            = ,
 1184                        @BACKWARD_PFORM      = ,
 1185                        @ALLOCATED           = ,
 1186                        @ON_SIZE_ERROR       = ,
 1187                        @GO_ALTERED          = ,
 1188                        @USE_BASE_POINTER    = ,
 1189                        @USE_GLOBAL          = ,
 1190                        @USE_ALREADY_FLAGGED = ,
 1191                        @USE_PROC            = ,
 1192                        @PFORM_END_LBL       = ,
 1193    *                   @LABEL_AFTER_USE     = ,
 1194                        @EXIT_PROG_LABEL     = );
 1195        DO;
 1196          %RESERVE_ST (POINTER               = @ST$);
 1197
 1198          %INIT_PARA (@ST$                   = @ST$,
 1199                      @ID                    = %PARA,
 1200                      @R                     = @R,
 1201                      @COUNT                 = @COUNT,
 1202                      @P_END$                = @P_END$,
 1203                      @TYPE                  = @TYPE,
 1204                      @LINE_NO               = @LINE_NO,
 1205                      @ATTR                  = @ATTR,
 1206                      @NEXT                  = @NEXT,
 1207                      @POINTER$              = @POINTER$,
 1208                      @DNT$                  = @DNT$,
 1209                      @SECTION$              = @SECTION$,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            37   
 1210                      @PROC$                 = @PROC$,
 1211                      @PREV_ILS$             = @PREV_ILS$,
 1212                      @REFERENCED            = @REFERENCED,
 1213                      @DEFINED               = @DEFINED,
 1214    *                 @COMPILER_CREATED       = @COMPILER_CREATED,
 1215    *                 @GOTO_LABEL             = @GOTO_LABEL,
 1216    *                 @DUPLICATE              = @DUPLICATE,
 1217    *                 @ONE_REF                = @ONE_REF,
 1218    *                 @PHASE_2                = @PHASE_2,
 1219    *                 @FALL_THRU              = @FALL_THRU,
 1220    *                 @INIT_PROC              = @INIT_PROC,
 1221    *                 @PFORM_START            = @PFORM_START,
 1222    *                 @PFORM_END              = @PFORM_END,
 1223    *                 @PFORM_NESTED           = @PFORM_NESTED,
 1224    *                 @ALTER_CHECK            = @ALTER_CHECK,
 1225    *                 @COBOL_74_PFORM         = @COBOL_74_PFORM,
 1226    *                 @PFORM_74_END           = @PFORM_74_END,
 1227    *                 @GO_VECTOR_START        = @GO_VECTOR_START,
 1228    *                 @ENTRY_POINT            = @ENTRY_POINT,
 1229    *                 @INTERIOR_PFORM_LBL     = @INTERIOR_PFORM_LBL,
 1230    *                 @DATA_REF               = @DATA_REF,
 1231    *                 @BACKWARD_PFORM         = @BACKWARD_PFORM,
 1232    *                 @ALLOCATED              = @ALLOCATED,
 1233    *                 @ON_SIZE_ERROR          = @ON_SIZE_ERROR,
 1234    *                 @GO_ALTERED             = @GO_ALTERED,
 1235    *                 @USE_BASE_POINTER       = @USE_BASE_POINTER,
 1236    *                 @USE_GLOBAL             = @USE_GLOBAL,
 1237    *                 @USE_ALREADY_FLAGGED    = @USE_ALREADY_FLAGGED,
 1238    *                 @USE_PROC               = @USE_PROC,
 1239    *                 @PFORM_END_LBL          = @PFORM_END_LBL,
 1240    *                 @LABEL_AFTER_USE       = @LABEL_AFTER_USE,
 1241    *                 @EXIT_PROG_LABEL        = @EXIT_PROG_LABEL);
 1242        END;
 1243      %MEND;
 1244
 1245
 1246
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            38   
 1247
 1248      %MACRO NEW_SECTION ( @ST$                 = ST$,
 1249                        @R                   = %PROGRAM,
 1250                        @COUNT               = %PROC,
 1251                        @P_END$              = "ADDR(NIL)",
 1252                        @TYPE                = %TYI,
 1253                        @LINE_NO             = COMCOM.CURRENT.LINE,
 1254                        @ATTR                = FALSE,
 1255                        @NEXT                = "ADDR(NIL)",
 1256                        @POINTER$            = "ADDR(NIL)",
 1257                        @DNT$                = "ADDR(NIL)",
 1258                        @SEGMENT$            = ,
 1259                        @PROC$               = ,
 1260                        @PREV_ILS$           = "ADDR(NIL)",
 1261                        @REFERENCED          = ,
 1262                        @DEFINED             = ,
 1263                        @COMPILER_CREATED    = ,
 1264                        @GOTO_LABEL          = ,
 1265                        @DUPLICATE           = ,
 1266                        @ONE_REF             = ,
 1267                        @PHASE_2             = ,
 1268                        @FALL_THRU           = ,
 1269                        @INIT_PROC           = ,
 1270                        @PFORM_START         = ,
 1271                        @PFORM_END           = ,
 1272                        @PFORM_NESTED        = ,
 1273                        @ALTER_CHECK         = ,
 1274                        @COBOL_74_PFORM      = ,
 1275                        @PFORM_74_END        = ,
 1276                        @GO_VECTOR_START     = ,
 1277                        @ENTRY_POINT         = ,
 1278                        @INTERIOR_PFORM_LBL  = ,
 1279                        @DATA_REF            = ,
 1280                        @BACKWARD_PFORM      = ,
 1281                        @ALLOCATED           = ,
 1282                        @ON_SIZE_ERROR       = ,
 1283                        @GO_ALTERED          = ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            39   
 1284                        @USE_BASE_POINTER    = ,
 1285                        @USE_GLOBAL          = ,
 1286                        @USE_ALREADY_FLAGGED = ,
 1287                        @USE_PROC            = ,
 1288                        @PFORM_END_LBL       = ,
 1289    *                   @LABEL_AFTER_USE     = ,
 1290                        @EXIT_PROG_LABEL     = );
 1291        DO;
 1292          %RESERVE_ST (POINTER               = @ST$);
 1293
 1294          %INIT_PARA (@ST$                   = @ST$,
 1295                      @ID                    = %SECTION,
 1296                      @R                     = @R,
 1297                      @COUNT                 = @COUNT,
 1298                      @P_END$                = @P_END$,
 1299                      @TYPE                  = @TYPE,
 1300                      @LINE_NO               = @LINE_NO,
 1301                      @ATTR                  = @ATTR,
 1302                      @NEXT                  = @NEXT,
 1303                      @POINTER$              = @POINTER$,
 1304                      @DNT$                  = @DNT$,
 1305                      @SEGMENT$              = @SEGMENT$,
 1306                      @PROC$                 = @PROC$,
 1307                      @PREV_ILS$             = @PREV_ILS$,
 1308                      @REFERENCED            = @REFERENCED,
 1309                      @DEFINED               = @DEFINED,
 1310    *                 @COMPILER_CREATED      = @COMPILER_CREATED,
 1311    *                 @GOTO_LABEL            = @GOTO_LABEL,
 1312    *                 @DUPLICATE             = @DUPLICATE,
 1313    *                 @ONE_REF               = @ONE_REF,
 1314    *                 @PHASE_2               = @PHASE_2,
 1315    *                 @FALL_THRU             = @FALL_THRU,
 1316    *                 @INIT_PROC             = @INIT_PROC,
 1317    *                 @PFORM_START           = @PFORM_START,
 1318    *                 @PFORM_END             = @PFORM_END,
 1319    *                 @PFORM_NESTED          = @PFORM_NESTED,
 1320    *                 @ALTER_CHECK           = @ALTER_CHECK,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            40   
 1321    *                 @COBOL_74_PFORM        = @COBOL_74_PFORM,
 1322    *                 @PFORM_74_END          = @PFORM_74_END,
 1323    *                 @GO_VECTOR_START       = @GO_VECTOR_START,
 1324    *                 @ENTRY_POINT           = @ENTRY_POINT,
 1325    *                 @INTERIOR_PFORM_LBL    = @INTERIOR_PFORM_LBL,
 1326    *                 @DATA_REF              = @DATA_REF,
 1327    *                 @BACKWARD_PFORM        = @BACKWARD_PFORM,
 1328    *                 @ALLOCATED             = @ALLOCATED,
 1329    *                 @ON_SIZE_ERROR         = @ON_SIZE_ERROR,
 1330    *                 @GO_ALTERED            = @GO_ALTERED,
 1331    *                 @USE_BASE_POINTER      = @USE_BASE_POINTER,
 1332    *                 @USE_GLOBAL            = @USE_GLOBAL,
 1333    *                 @USE_ALREADY_FLAGGED   = @USE_ALREADY_FLAGGED,
 1334    *                 @USE_PROC              = @USE_PROC,
 1335    *                 @PFORM_END_LBL         = @PFORM_END_LBL,
 1336    *                 @LABEL_AFTER_USE       = @LABEL_AFTER_USE,
 1337    *                 @EXIT_PROG_LABEL       = @EXIT_PROG_LABEL);
 1338        END;
 1339      %MEND;
 1340
 1341
 1342      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            41   
 1343      DCL 1 TEMP BASED (ST$) ALIGNED,
 1344
 1345          2 ID                     UBIN (18) UNAL, /* Operation code */
 1346          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
 1347          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
 1348
 1349          %DESCRIPTOR(LVL=2);
 1350
 1351          2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
 1352          2 DEFINED_LOOP_LEVEL     SBIN HALF UNAL,
 1353
 1354          2 ATTR BIT(36),
 1355          2 B REDEF ATTR,
 1356            3 NOT_REUSABLE       BOOLEAN,
 1357    *       3 GREATER_256K       BOOLEAN,
 1358    *       3 * (0:33)           BOOLEAN,
 1359
 1360          2 REFERENCES           SBIN HALF UNAL,  /* Remaining references */
 1361
 1362          2 LENGTH               SBIN HALF UNAL,
 1363
 1364          2 LTS$                 PTR, /* Used by Z9IO */
 1365
 1366          2 DNT$                 PTR,
 1367
 1368          2 QLT$                 PTR,
 1369
 1370          2 NEXT                 PTR,
 1371          2 LAST                 PTR,
 1372          2 *                    PTR;
 1373
 1374
 1375      %MACRO NEW_TEMP (@ST$                   = ST$,
 1376                       @R                     = %BLOCK_,
 1377                       @COUNT                 = %DATA,
 1378                       @SA                    = 0,
 1379                       @DESCL                 = 0,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            42   
 1380                       @TYPE                  = %TYI,
 1381                       @DEFINED_LOOP_LEVEL     = 0,
 1382                       @ATTR                  = FALSE,
 1383                       @REFERENCES            = 0,
 1384                       @LENGTH                = 0,
 1385                       @LTS$                  = "ADDR(NIL)",
 1386                       @DNT$                  = "ADDR(NIL)",
 1387                       @QLT$                  = "ADDR(NIL)",
 1388                       @NEXT                  = "ADDR(NIL)",
 1389                       @LAST                  = "ADDR(NIL)",
 1390    *                  @GREATER_256K          = ,
 1391    *                  @NOT_REUSABLE          = );
 1392        DO;
 1393          %RESERVE_ST (POINTER = @ST$);
 1394
 1395          @ST$ -> TEMP.ID                       = %TEMP;
 1396          @ST$ -> TEMP.R                        = @R;
 1397          @ST$ -> TEMP.COUNT                    = @COUNT;
 1398          @ST$ -> TEMP.SA                       = @SA;
 1399          @ST$ -> TEMP.DESCL                    = @DESCL;
 1400          @ST$ -> TEMP.TYPE                     = @TYPE;
 1401          @ST$ -> TEMP.DEFINED_LOOP_LEVEL       = @DEFINED_LOOP_LEVEL;
 1402          @ST$ -> TEMP.ATTR                     = @ATTR;
 1403          @ST$ -> TEMP.REFERENCES               = @REFERENCES;
 1404          @ST$ -> TEMP.LENGTH                   = @LENGTH;
 1405          @ST$ -> TEMP.LTS$                     = @LTS$ ;
 1406          @ST$ -> TEMP.DNT$                     = @DNT$;
 1407          @ST$ -> TEMP.QLT$                     = @QLT$;
 1408          @ST$ -> TEMP.NEXT                     = @NEXT;
 1409          @ST$ -> TEMP.LAST                     = @LAST;
 1410
 1411          %IF (TEXTCHAR(@NOT_REUSABLE) ~= '');
 1412            @ST$ -> TEMP.B.NOT_REUSABLE         = @NOT_REUSABLE;
 1413          %ENDIF;
 1414    *     %IF (TEXTCHAR(@GREATER_256K) ~= '');
 1415    *       @ST$ -> TEMP.B.GREATER_256K         = @GREATER_256K;
 1416    *     %ENDIF;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            43   
 1417        END;
 1418      %MEND;
 1419
 1420      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            44   
 1421      DCL 1 CONDITION            BASED (ST$)ALIGNED,
 1422
 1423          2 ID                     UBIN (18) UNAL, /* Operation code */
 1424          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
 1425          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
 1426
 1427          2 NEXT_CONDITION$        PTR,
 1428
 1429          2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
 1430          2 LINE_NO                UBIN HALF UNAL,
 1431
 1432          2 ATTR BIT(36),
 1433          2 B                  REDEF ATTR,
 1434           3 LINKAGE           BOOLEAN,
 1435           3 EXTERNAL          BOOLEAN,
 1436           3 GLOBAL            BOOLEAN,
 1437           3 *                 (0:32) BOOLEAN,
 1438
 1439          2 NEXT                   PTR,
 1440
 1441          2 VALUE_LIST$            PTR,
 1442
 1443          2 DNT$                   PTR,
 1444
 1445          2 QLT$                   PTR,
 1446
 1447          2 ASSOC_VAR$             PTR,
 1448
 1449          2 PROC$                  PTR,
 1450          2 LINK                   PTR;
 1451
 1452
 1453
 1454
 1455
 1456      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            45   
 1457      %MACRO NEW_CONDITION      (@ST$         = ST$,
 1458                                 @R           = %BLOCK_,
 1459                                 @COUNT       = %DATA,
 1460                                 @NEXT_COND$  = "ADDR(NIL)",
 1461                                 @TYPE        = %TYG,
 1462                                 @LINE_NO        = COMCOM.CURRENT.LINE,
 1463                                 @ATTR        = FALSE,
 1464                                 @EXTERNAL    = ,
 1465                                 @GLOBAL      = ,
 1466                                 @LINKAGE     = ,
 1467                                 @NEXT        = "ADDR(NIL)",
 1468                                 @VALUE_LIST$ = "ADDR(NIL)",
 1469                                 @DNT$        = DNT$,
 1470                                 @QLT$        = QLT$,
 1471                                 @ASSOC_VAR$  = ,
 1472                                 @PROC$       = );
 1473
 1474           DO;
 1475
 1476             %IF TEXTCHAR(@ASSOC_VAR$) = '';
 1477               %ERROR (TRUE, 'Missing @ASSOC_VAR$ parameter.',2);
 1478             %ENDIF;
 1479
 1480             %RESERVE_ST (POINTER = @ST$);
 1481
 1482             @ST$ -> CONDITION.ID          = %CONDITION;
 1483             @ST$ -> CONDITION.R           = @R;
 1484             @ST$ -> CONDITION.COUNT       = @COUNT;
 1485             @ST$ -> CONDITION.NEXT_CONDITION$ = @NEXT_COND$;
 1486             @ST$ -> CONDITION.TYPE        = @TYPE;
 1487             @ST$ -> CONDITION.LINE_NO     = @LINE_NO;
 1488             @ST$ -> CONDITION.ATTR        = @ATTR;
 1489             @ST$ -> CONDITION.NEXT        = @NEXT;
 1490             @ST$ -> CONDITION.VALUE_LIST$ = @VALUE_LIST$;
 1491             @ST$ -> CONDITION.DNT$        = @DNT$;
 1492             @ST$ -> CONDITION.QLT$        = @QLT$;
 1493             @ST$ -> CONDITION.ASSOC_VAR$  = @ASSOC_VAR$;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            46   
 1494
 1495               %UPDATE_PROC_LINK (@TEMPLATE = CONDITION, @ST$ = @ST$, @PROC$ = @PROC$);
 1496             %IF (TEXTCHAR(@LINKAGE) ~= '');
 1497               @ST$ -> CONDITION.B.LINKAGE = @LINKAGE;
 1498             %ENDIF;
 1499             %IF (TEXTCHAR(@GLOBAL) ~= '');
 1500               @ST$ -> CONDITION.B.GLOBAL = @GLOBAL;
 1501             %ENDIF;
 1502             %IF (TEXTCHAR(@EXTERNAL) ~= '');
 1503               @ST$ -> CONDITION.B.EXTERNAL = @EXTERNAL;
 1504             %ENDIF;
 1505           END;
 1506
 1507      %MEND;
 1508
 1509      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            47   
 1510      DCL 1 INTDEF           BASED (ST$) ALIGNED,
 1511           2 ID              UBIN HALF UNAL,
 1512           2 R               UBIN BYTE UNAL,
 1513           2 COUNT           UBIN BYTE UNAL,
 1514
 1515           %DESCRIPTOR       (LVL = 2);
 1516
 1517           2 TYPE            UBIN HALF UNAL,
 1518           2 LINE_NO         UBIN HALF UNAL,
 1519
 1520           2 ATTR            BIT(36) UNAL,
 1521           2 B               REDEF ATTR,
 1522            3 *              (0:35) BOOLEAN,
 1523
 1524           2 NEXT            PTR,
 1525
 1526           2 ARGLIST$        PTR,
 1527           2 DNT$            PTR,
 1528
 1529           2 ENTRYS$         PTR,   /* Links the entry points */
 1530           2 *               PTR,
 1531           2 PROC$           PTR,
 1532           2 LINK            PTR;
 1533
 1534
 1535      %MACRO NEW_INTDEF  (@ST$        = ST$,
 1536                          @R          = %PROGRAM, /*N* IS R AND COUNT RIGHT */
 1537                          @COUNT      = %PROC,
 1538                          @TYPE       = %TYG,
 1539                          @LINE_NO    = COMCOM.CURRENT.LINE,
 1540                          @ATTR       = FALSE,
 1541                          @ARGLIST$   = "ADDR(NIL)",
 1542                          @PROC$      = ,
 1543                          @ENTRYS$    = "ADDR(NIL)",
 1544                          @NEXT       = "ADDR(NIL)",
 1545                          @DNT$       = "ADDR(NIL)");
 1546
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            48   
 1547           DO;
 1548             %RESERVE_ST (POINTER = @ST$);
 1549
 1550             @ST$ -> INTDEF.ID                 = %INTDEF;
 1551             @ST$ -> INTDEF.R                  = @R;
 1552             @ST$ -> INTDEF.COUNT              = @COUNT;
 1553             @ST$ -> INTDEF.TYPE               = @TYPE;
 1554             @ST$ -> INTDEF.LINE_NO            = @LINE_NO;
 1555             @ST$ -> INTDEF.ATTR               = @ATTR;
 1556             @ST$ -> INTDEF.ARGLIST$           = @ARGLIST$;
 1557             @ST$ -> INTDEF.ENTRYS$            = @ENTRYS$;
 1558             @ST$ -> INTDEF.DNT$               = @DNT$;
 1559             @ST$ -> INTDEF.NEXT               = @NEXT;
 1560
 1561               %UPDATE_PROC_LINK (@TEMPLATE = INTDEF, @ST$ = @ST$, @PROC$ = @PROC$);
 1562           END;
 1563         %MEND;
 1564
 1565
 1566         %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            49   
 1567      DCL 1 PROC_            BASED (ST$) ALIGNED,
 1568           2 ID              UBIN HALF UNAL,
 1569           2 LEVEL           UBIN HALF UNAL, /* Nesting level */
 1570
 1571           2 PROC_SUPP$      PTR,
 1572
 1573           2 LINE_START      UBIN HALF UNAL,
 1574           2 LINE_END        UBIN HALF UNAL,
 1575
 1576           2 ATTR            BIT (36) UNAL,
 1577           2 B               REDEF ATTR,
 1578            3 COMMON         BOOLEAN,
 1579            3 INITIAL        BOOLEAN,
 1580            3 CANCELED       BOOLEAN,
 1581            3 MANAGED        BOOLEAN,
 1582            3 INITIAL_RELATIVE BOOLEAN,
 1583            3 COMMA_IS_DECIMAL BOOLEAN,
 1584            3 CURRENCY_SIGN    BOOLEAN,
 1585            3 OBJECT_IS_COMMA  BOOLEAN,
 1586            3 INLINE         BOOLEAN,
 1587            3 MAIN_PROG      BOOLEAN,
 1588            3 SUB_SCHEMA     BOOLEAN,
 1589            3 *              (0:6) BOOLEAN,
 1590            3 ARG_COUNT      SBIN (18) UNAL,
 1591
 1592           2 PSEUDO_STACK$   PTR,  /* To base for return addr and args */
 1593           2 LOG_BLK_NUMBER  REDEF PSEUDO_STACK$ SBIN, /* PH5 only */
 1594
 1595           2 CSIB$           PTR, /* Ptr to CSIB ST item */
 1596
 1597           2 PROC_DEF$       PTR,
 1598
 1599           2 SON             PTR,
 1600
 1601           2 BROTHER         PTR,
 1602
 1603    *      2 FATHER          PTR,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            50   
 1604    *
 1605    *      2 *               PTR;
 1606
 1607
 1608      %MACRO NEW_PROC_ (@ST$        = ST$,
 1609                        @LEVEL      = 1,
 1610                        @LINE_START = COMCOM.CURRENT.LINE,
 1611                        @LINE_END   = COMCOM.CURRENT.LINE,
 1612                        @ATTR       = FALSE,
 1613                        @PROC_SUPP$ = "ADDR(NIL)",
 1614                        @PSEUDO_STACK$       = "ADDR(NIL)",
 1615                        @CSIB$      = "ADDR(NIL)",
 1616                        @PROC_DEF$  = "ADDR(NIL)",
 1617                        @FATHER     = "ADDR(NIL)",
 1618                        @BROTHER    = "ADDR(NIL)",
 1619                        @SON        = "ADDR(NIL)",
 1620                        @COMMON     = ,
 1621                        @INITIAL    = ,
 1622                        @CANCELED   = ,
 1623                        @MANAGED    = ,
 1624                        @INITIAL_RELATIVE = ,
 1625                        @COMMA_IS_DECIMAL = ,
 1626                        @CURRENCY_SIGN = ,
 1627                        @OBJECT_IS_COMMA = ,
 1628                        @INLINE     = ,
 1629                        @MAIN_PROG  = ,
 1630                        @SUB_SCHEMA = );
 1631
 1632           DO;
 1633             %RESERVE_ST (POINTER = @ST$);
 1634
 1635             @ST$ -> PROC_.ID         = %PROC_;
 1636             @ST$ -> PROC_.LEVEL      = @LEVEL;
 1637             @ST$ -> PROC_.LINE_START = @LINE_START;
 1638             @ST$ -> PROC_.LINE_END   = @LINE_END;
 1639             @ST$ -> PROC_.ATTR       = @ATTR;
 1640             @ST$ -> PROC_.PROC_SUPP$ = @PROC_SUPP$;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            51   
 1641             @ST$ -> PROC_.PSEUDO_STACK$      = @PSEUDO_STACK$;
 1642             @ST$ -> PROC_.CSIB$      = @CSIB$;
 1643             @ST$ -> PROC_.PROC_DEF$  = @PROC_DEF$;
 1644             @ST$ -> PROC_.FATHER     = @FATHER;
 1645             @ST$ -> PROC_.BROTHER    = @BROTHER;
 1646             @ST$ -> PROC_.SON        = @SON;
 1647
 1648             %IF (TEXTCHAR(@COMMON) ~= '');
 1649               @ST$ -> PROC_.B.COMMON = @COMMON;
 1650             %ENDIF;
 1651             %IF (TEXTCHAR(@INITIAL) ~= '');
 1652               @ST$ -> PROC_.B.INITIAL = @INITIAL;
 1653             %ENDIF;
 1654             %IF (TEXTCHAR(@CANCELED) ~= '');
 1655               @ST$ -> PROC_.B.CANCELED = @CANCELED;
 1656             %ENDIF;
 1657             %IF (TEXTCHAR(@MANAGED) ~= '');
 1658               @ST$ -> PROC_.B.MANAGED = @MANAGED;
 1659             %ENDIF;
 1660             %IF (TEXTCHAR(@INITIAL_RELATIVE) ~= '');
 1661               @ST$ -> PROC_.B.INITIAL_RELATIVE = @INITIAL_RELATIVE;
 1662             %ENDIF;
 1663             %IF (TEXTCHAR(@COMMA_IS_DECIMAL) ~= '');
 1664               @ST$ -> PROC_.B.COMMA_IS_DECIMAL = @COMMA_IS_DECIMAL;
 1665             %ENDIF;
 1666             %IF (TEXTCHAR(@CURRENCY_SIGN) ~= '');
 1667               @ST$ -> PROC_.B.CURRENCY_SIGN = @CURRENCY_SIGN;
 1668             %ENDIF;
 1669             %IF (TEXTCHAR(@OBJECT_IS_COMMA) ~= '');
 1670               @ST$ -> PROC_.B.OBJECT_IS_COMMA = @OBJECT_IS_COMMA;
 1671             %ENDIF;
 1672             %IF (TEXTCHAR(@INLINE) ~= '');
 1673               @ST$ -> PROC_.B.INLINE = @INLINE;
 1674             %ENDIF;
 1675             %IF (TEXTCHAR(@MAIN_PROG) ~= '');
 1676               @ST$ -> PROC_.B.MAIN_PROG = @MAIN_PROG;
 1677             %ENDIF;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            52   
 1678             %IF (TEXTCHAR(@SUB_SCHEMA) ~= '');
 1679               @ST$ -> PROC_.B.SUB_SCHEMA = @SUB_SCHEMA;
 1680             %ENDIF;
 1681           END;
 1682      %MEND;
 1683
 1684
 1685      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            53   
 1686      /*
 1687         This next template PROC_DEF is to keep symdef and intdef
 1688         the same, it is for referencing the same fields in both
 1689         to eliminate special casing each reference.  This violates
 1690         the "strong typing" ethics, but saves code that at THIS POINT
 1691         need not be different all over.  It is mostly used when accessing
 1692         ARGLIST$, and ENTRYS$.
 1693      */
 1694      DCL 1 PROC_DEF BASED (ST$) ALIGNED,
 1695
 1696          2 ID                     UBIN (18) UNAL, /* Operation code */
 1697          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
 1698          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
 1699
 1700          %DESCRIPTOR(LVL=2);
 1701
 1702          2 TYPE                   UBIN HALF HALIGNED,
 1703          2 LINE_NO                UBIN HALF HALIGNED,
 1704
 1705          2 ATTR BIT(36),
 1706          2 B                  REDEF ATTR,
 1707            3 * (0:35) BOOLEAN,
 1708
 1709          2 *                      PTR,
 1710
 1711          2 ARGLIST$               PTR,
 1712
 1713          2 DNT$                   PTR,
 1714
 1715          2 ENTRYS$                PTR,
 1716
 1717          2 *                      PTR,
 1718
 1719          2 PROC$                  PTR,
 1720          2 LINK                   PTR;
 1721
 1722
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            54   
 1723      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            55   
 1724      DCL 1 SYMDEF_ BASED (ST$) ALIGNED,
 1725
 1726          2 ID                     UBIN (18) UNAL, /* Operation code */
 1727          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
 1728          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
 1729
 1730          %DESCRIPTOR(LVL=2);
 1731
 1732          2 TYPE                   UBIN HALF HALIGNED,
 1733          2 LINE_NO                UBIN HALF HALIGNED,
 1734
 1735          2 ATTR BIT(36),
 1736          2 B                  REDEF ATTR,
 1737            3 MAIN_PROGRAM          BOOLEAN,
 1738            3 * (0:34) BOOLEAN,
 1739
 1740          2 NEXT                   PTR,
 1741
 1742          2 ARGLIST$               PTR,
 1743
 1744          2 DNT$                   PTR,
 1745
 1746          2 ENTRYS$                PTR,
 1747
 1748          2 *                      PTR,
 1749
 1750          2 PROC$                  PTR,
 1751          2 LINK                   PTR;
 1752
 1753
 1754      %MACRO NEW_SYMDEF_ ( @ST$              = ST$,
 1755                           @R                = %PROGRAM,
 1756                           @COUNT            = %PROC,
 1757                           @TYPE             = %TYG,
 1758                           @LINE_NO          = COMCOM.CURRENT.LINE,
 1759                           @ATTR             = FALSE,
 1760                           @MAIN_PROGRAM     = ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            56   
 1761                           @ARGLIST$         = "ADDR(NIL)",
 1762                           @PROC$            = ,
 1763                           @ENTRYS$         = "ADDR(NIL)",
 1764                           @NEXT       = ,
 1765                           @DNT$             = "ADDR(NIL)");
 1766        DO;
 1767          %RESERVE_ST (POINTER = @ST$);
 1768
 1769          @ST$ -> SYMDEF_.ID                 = %SYMDEF_;
 1770          @ST$ -> SYMDEF_.R                  = @R;
 1771          @ST$ -> SYMDEF_.COUNT              = @COUNT;
 1772          @ST$ -> SYMDEF_.TYPE               = @TYPE;
 1773          @ST$ -> SYMDEF_.LINE_NO            = @LINE_NO;
 1774          @ST$ -> SYMDEF_.ATTR               = @ATTR;
 1775          @ST$ -> SYMDEF_.ARGLIST$           = @ARGLIST$;
 1776          @ST$ -> SYMDEF_.ENTRYS$         = @ENTRYS$;
 1777          @ST$ -> SYMDEF_.DNT$               = @DNT$;
 1778
 1779          %IF TEXTCHAR(@NEXT) = '';
 1780             @ST$ -> SYMDEF_.NEXT = COMCOM.SYMDEF$;
 1781             COMCOM.SYMDEF$ = @ST$;
 1782             COMCOM.SYMDEFC = COMCOM.SYMDEFC + 1;
 1783          %ELSE;
 1784             @ST$ -> SYMDEF_.NEXT = @NEXT;
 1785          %ENDIF;
 1786
 1787          %UPDATE_PROC_LINK (@TEMPLATE = SYMDEF_, @ST$ = @ST$, @PROC$ = @PROC$);
 1788          %IF (TEXTCHAR(@MAIN_PROGRAM) ~= '');
 1789            @ST$ -> SYMDEF_.MAIN_PROGRAM = @MAIN_PROGRAM;
 1790          %ENDIF;
 1791        END;
 1792      %MEND;
 1793
 1794
 1795      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            57   
 1796      DCL 1 SYMREF_ BASED (ST$) ALIGNED,
 1797
 1798          2 ID                     UBIN (18) UNAL, /* Operation code */
 1799          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
 1800          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
 1801
 1802          %DESCRIPTOR(LVL=2);
 1803
 1804          2 TYPE                   UBIN HALF HALIGNED,
 1805          2 LINE_NO                UBIN HALF HALIGNED,
 1806
 1807          2 ATTR BIT(36),
 1808          2 B                  REDEF ATTR,
 1809            3 * (0:25) BOOLEAN,
 1810            3 SCOUNT               UBIN (9) UNAL, /* For Segmentation */
 1811            3 NO_BASE_PTR          BOOLEAN,
 1812
 1813          2 NEXT                   PTR,
 1814
 1815          2 *                      PTR,
 1816
 1817          2 DNT$                   PTR,
 1818
 1819          2 *                      PTR,
 1820
 1821          2 REF_COUNT              SBIN,
 1822
 1823          2 PROC$                  PTR,
 1824          2 LINK                   PTR;
 1825
 1826
 1827      %MACRO NEW_SYMREF_ ( @ST$              = ST$,
 1828                           @R                = %PROGRAM,
 1829                           @COUNT            = %PROC,
 1830                           @TYPE             = %TYG,
 1831                           @LINE_NO          = COMCOM.CURRENT.LINE,
 1832                           @NEXT             = "ADDR(NIL)",
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            58   
 1833                           @ATTR             = FALSE,
 1834    *                      @NO_BASE_PTR      = TRUE,
 1835                           @REF_COUNT        = 1,
 1836                           @PROC$            = ,
 1837                           @DNT$             = "ADDR(NIL)");
 1838        DO;
 1839          %RESERVE_ST (POINTER = @ST$);
 1840
 1841          @ST$ -> SYMREF_.ID                 = %SYMREF_;
 1842          @ST$ -> SYMREF_.R                  = @R;
 1843          @ST$ -> SYMREF_.COUNT              = @COUNT;
 1844          @ST$ -> SYMREF_.REF_COUNT          = @REF_COUNT;
 1845          @ST$ -> SYMREF_.TYPE               = @TYPE;
 1846          @ST$ -> SYMREF_.LINE_NO            = @LINE_NO;
 1847    *     @ST$ -> SYMREF_.NEXT               = @NEXT;
 1848          @ST$ -> SYMREF_.ATTR               = @ATTR;
 1849    *     %IF @NO_BASE_PTR;
 1850    *     @ST$ -> SYMREF_.B.NO_BASE_PTR      = @NO_BASE_PTR;
 1851    *     %ENDIF;
 1852          @ST$ -> SYMREF_.DNT$               = @DNT$;
 1853
 1854               %UPDATE_PROC_LINK (@TEMPLATE = SYMREF_, @ST$ = @ST$, @PROC$ = @PROC$);
 1855        END;
 1856      %MEND;
 1857
 1858      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            59   
 1859
 1860      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            60   
 1861      DCL 1 SEGMENT BASED (ST$) ALIGNED,
 1862
 1863          2 ID                     UBIN (18) UNAL, /* Operation code */
 1864          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
 1865          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
 1866
 1867          %DESCRIPTOR(LVL=2);
 1868
 1869          2 SIZE                   UBIN HALF HALIGNED,
 1870          2 LINE_NO                UBIN HALF HALIGNED,
 1871
 1872          2 ATTR BIT(36),
 1873          2 B                  REDEF ATTR,
 1874            3 * (0:35) BOOLEAN,
 1875
 1876          2 *                      PTR,
 1877
 1878          2 *                      PTR,
 1879
 1880          2 DNT$                   PTR,
 1881
 1882          2 BCD_ST$                PTR,
 1883
 1884          2 NEXT                   PTR,
 1885
 1886          2 PROC$                  PTR,
 1887          2 LINK                   PTR;
 1888
 1889
 1890      %MACRO NEW_SEGMENT ( @ST$              = ST$,
 1891                           @R                = %PROGRAM,
 1892                           @COUNT            = %PROC,
 1893                           @SIZE             = 0,
 1894                           @LINE_NO          = COMCOM.CURRENT.LINE,
 1895                           @ATTR             = FALSE,
 1896                           @BCD_ST$          = "ADDR(NIL)",
 1897                           @NEXT             = "ADDR(NIL)",
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            61   
 1898                           @PROC$            = ,
 1899                           @DNT$             = "ADDR(NIL)");
 1900        DO;
 1901          %RESERVE_ST (POINTER = @ST$);
 1902
 1903          @ST$ -> SEGMENT.ID                 = %SEGMENT;
 1904          @ST$ -> SEGMENT.R                  = @R;
 1905          @ST$ -> SEGMENT.COUNT              = @COUNT;
 1906          @ST$ -> SEGMENT.SIZE               = @SIZE;
 1907          @ST$ -> SEGMENT.LINE_NO            = @LINE_NO;
 1908          @ST$ -> SEGMENT.ATTR               = @ATTR;
 1909          @ST$ -> SEGMENT.DNT$               = @DNT$;
 1910          @ST$ -> SEGMENT.BCD_ST$            = @BCD_ST$;
 1911          @ST$ -> SEGMENT.NEXT               = @NEXT;
 1912
 1913               %UPDATE_PROC_LINK (@TEMPLATE = SEGMENT, @ST$ = @ST$, @PROC$ = @PROC$);
 1914        END;
 1915      %MEND;
 1916
 1917
 1918
 1919      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            62   
 1920      DCL 1 BLOCK BASED (ST$) ALIGNED,
 1921
 1922          2 ID                     UBIN (18) UNAL, /* Operation code */
 1923          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
 1924          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
 1925
 1926          %DESCRIPTOR(LVL=2);
 1927
 1928          2 SIZE                   UBIN HALF HALIGNED,
 1929          2 LINE_NO                UBIN HALF HALIGNED,
 1930
 1931          2 ATTR BIT(36),
 1932          2 B                  REDEF ATTR,
 1933            3 REDEFINED            BOOLEAN,  /* two or more in this block */
 1934            3 CSIB                 BOOLEAN,
 1935            3 SIZE_256K            BOOLEAN,
 1936            3 * (0:23) BOOLEAN,
 1937            3 SCOUNT               UBIN (9) UNAL, /* For segmentation */
 1938
 1939          2 NEXT                   PTR,
 1940
 1941          2 *                      PTR,
 1942
 1943          2 DNT$                   PTR,
 1944
 1945          2 QLT$                   PTR,
 1946
 1947          2 SIZE1                  UBIN HALF HALIGNED,
 1948          2 *                      BIT(18),
 1949
 1950          2 PROC$                  PTR,
 1951          2 LINK                   PTR;
 1952
 1953
 1954      %MACRO NEW_BLOCK ( @ST$              = ST$,
 1955                           @R                = %BLOCK_,
 1956                           @COUNT            = ,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            63   
 1957                           @SIZE             = 0,
 1958                           @LINE_NO          = COMCOM.CURRENT.LINE,
 1959                           @ATTR             = FALSE,
 1960    *                      @REDEFINED         = ,
 1961    *                      @CSIB              = ,
 1962                           @NEXT             = "ADDR(NIL)",
 1963                           @DNT$             = "ADDR(NIL)",
 1964                           @PROC$            = ,
 1965                           @QLT$             = "ADDR(NIL)");
 1966        DO;
 1967          %RESERVE_ST (POINTER = @ST$);
 1968
 1969          %IF (TEXTCHAR(@COUNT) = '');
 1970            COMCOM.BLOCKC = COMCOM.BLOCKC + 1;
 1971            @ST$ -> BLOCK.COUNT = COMCOM.BLOCKC;
 1972            %IF PHASE = 1;
 1973              O1COM.LAST_BLOCK$ -> BLOCK.NEXT = @ST$;
 1974              O1COM.LAST_BLOCK$ = @ST$;
 1975            %ENDIF;
 1976          %ELSE;
 1977            @ST$ -> BLOCK.COUNT = @COUNT;
 1978          %ENDIF;
 1979
 1980          @ST$ -> BLOCK.ID                 = %BLOCK;
 1981          @ST$ -> BLOCK.R                  = @R;
 1982          @ST$ -> BLOCK.SIZE               = @SIZE;
 1983          @ST$ -> BLOCK.LINE_NO            = @LINE_NO;
 1984          @ST$ -> BLOCK.ATTR               = @ATTR;
 1985          @ST$ -> BLOCK.NEXT               = @NEXT;
 1986          @ST$ -> BLOCK.DNT$               = @DNT$;
 1987          @ST$ -> BLOCK.QLT$               = @QLT$;
 1988    *     %IF (TEXTCHAR(@REDEFINED) ~= '');
 1989    *       @ST$ -> BLOCK.B.REDEFINED      = @REDEFINED;
 1990    *     %ENDIF;
 1991    *     %IF (TEXTCHAR(@CSIB) ~= '');
 1992    *       @ST$ -> BLOCK.B.CSIB           = @CSIB;
 1993    *     %ENDIF;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            64   
 1994
 1995               %UPDATE_PROC_LINK (@TEMPLATE = BLOCK, @ST$ = @ST$, @PROC$ = @PROC$);
 1996        END;
 1997      %MEND;
 1998      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            65   
 1999      DCL 1 DCB_ BASED (ST$) ALIGNED,
 2000
 2001          2 ID                     UBIN (18) UNAL, /* Operation code */
 2002          2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
 2003          2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
 2004
 2005          %DESCRIPTOR(LVL=2);
 2006
 2007          2 SIZE                   UBIN HALF HALIGNED,
 2008          2 LINE_NO                UBIN HALF HALIGNED,
 2009
 2010          2 ATTR BIT(36),
 2011          2 B                  REDEF ATTR,
 2012            3 * (0:35) BOOLEAN,
 2013
 2014          2 NEXT                   PTR,
 2015
 2016          2 LTS$                   PTR,
 2017
 2018          2 DNT$                   PTR,
 2019
 2020          2 QLT$                   PTR,
 2021
 2022          2 *                      PTR,
 2023
 2024          2 PROC$                  PTR,
 2025          2 LINK                   PTR;
 2026
 2027
 2028      %MACRO NEW_DCB  ( @ST$              = ST$,
 2029                           @R                = %BLOCK_,
 2030                           @COUNT            = %DATA,
 2031                           @SIZE             = 0,
 2032                           @LINE_NO          = COMCOM.CURRENT.LINE,
 2033                           @ATTR             = FALSE,
 2034                           @NEXT             = "ADDR(NIL)",
 2035                           @DNT$             = "ADDR(NIL)",
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            66   
 2036                           @PROC$            = ,
 2037                           @QLT$             = "ADDR(NIL)");
 2038        DO;
 2039          %RESERVE_ST (POINTER = @ST$);
 2040
 2041          @ST$ -> DCB_.ID                 = %DCB_;
 2042          @ST$ -> DCB_.R                  = @R;
 2043          @ST$ -> DCB_.COUNT              = @COUNT;
 2044          @ST$ -> DCB_.SIZE               = @SIZE;
 2045          @ST$ -> DCB_.LINE_NO            = @LINE_NO;
 2046          @ST$ -> DCB_.ATTR               = @ATTR;
 2047          @ST$ -> DCB_.NEXT               = @NEXT;
 2048          @ST$ -> DCB_.DNT$               = @DNT$;
 2049          @ST$ -> DCB_.QLT$               = @QLT$;
 2050
 2051               %UPDATE_PROC_LINK (@TEMPLATE = DCB_, @ST$ = @ST$, @PROC$ = @PROC$);
 2052        END;
 2053      %MEND;
 2054      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            67   
 2055
 2056      DCL 1 MNEMONIC                BASED (ST$) ALIGNED,
 2057
 2058           2 ID                     UBIN HALF UNAL,
 2059           2 *                      UBIN HALF UNAL,
 2060
 2061           2 NAME                   UBIN WORD UNAL, /* Rsv wrd # */
 2062           2 VFC                    REDEF NAME,
 2063             3 CHAR_                CHAR (1) UNAL,
 2064             3 *                    CHAR (3) UNAL,
 2065           2 CHANNEL#               REDEF NAME UBIN UNAL,
 2066
 2067           2 TYPE                   UBIN HALF UNAL,
 2068           2 LINE_NO                UBIN HALF UNAL,
 2069
 2070           2 ATTR                   BIT (36),
 2071           2 B                      REDEF ATTR,
 2072             3 VFC_CHAR             BOOLEAN,
 2073             3 CHANNEL              BOOLEAN,
 2074             3 MNEMONIC_NAME        BOOLEAN,
 2075             3 *                    (0:32) BOOLEAN,
 2076
 2077           2 NEXT                   PTR,
 2078
 2079           2 *                      PTR,
 2080
 2081           2 DNT$                   PTR,
 2082
 2083           2 QLT$                   PTR,
 2084
 2085           2 *                      PTR,
 2086
 2087           2 PROC$                  PTR,
 2088           2 LINK                   PTR;
 2089
 2090
 2091      %MACRO NEW_MNEMONIC (@ST$         = ST$,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            68   
 2092                           @NAME        = ,
 2093                           @CHANNEL#    = ,
 2094                           @VFC_CHAR_   = ,
 2095                           @TYPE        = %TYG,
 2096                           @LINE_NO     = COMCOM.CURRENT.LINE,
 2097                           @ATTR        = '0'B,
 2098                           @CHANNEL     = ,
 2099                           @VFC_CHAR    = ,
 2100                           @MNEMONIC_NAME=,
 2101                           @NEXT        = "ADDR(NIL)",
 2102                           @DNT$        = "ADDR(NIL)",
 2103                           @PROC$       = ,
 2104                           @QLT$        = "ADDR(NIL)");
 2105
 2106             DO;
 2107               %RESERVE_ST (POINTER = @ST$);
 2108
 2109               @ST$ -> MNEMONIC.ID          = %MNEMONIC;
 2110               @ST$ -> MNEMONIC.TYPE        = @TYPE;
 2111               @ST$ -> MNEMONIC.LINE_NO     = @LINE_NO;
 2112               @ST$ -> MNEMONIC.ATTR        = @ATTR;
 2113               @ST$ -> MNEMONIC.NEXT        = @NEXT;
 2114               @ST$ -> MNEMONIC.DNT$        = @DNT$;
 2115               @ST$ -> MNEMONIC.QLT$        = @QLT$;
 2116
 2117               %UPDATE_PROC_LINK (@TEMPLATE = MNEMONIC, @ST$ = @ST$, @PROC$ = @PROC$);
 2118
 2119               %IF TEXTCHAR(@NAME) ~= '';
 2120                 @ST$ -> MNEMONIC.NAME      = @NAME;
 2121                 %ELSEIF TEXTCHAR(@VFC_CHAR_) ~= '';
 2122                   @ST$ -> MNEMONIC.VFC       = FALSE;
 2123                   @ST$ -> MNEMONIC.VFC.CHAR_ = @VFC_CHAR_;
 2124                 %ELSE;
 2125                     @ST$ -> MNEMONIC.CHANNEL# = @CHANNEL#;
 2126               %ENDIF;
 2127
 2128               %IF TEXTCHAR(@VFC_CHAR) ~= '';
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            69   
 2129                 @ST$ -> MNEMONIC.B.VFC_CHAR = @VFC_CHAR;
 2130               %ENDIF;
 2131               %IF TEXTCHAR(@MNEMONIC_NAME) ~= '';
 2132                 @ST$ -> MNEMONIC.B.MNEMONIC_NAME = @MNEMONIC_NAME;
 2133               %ENDIF;
 2134               %IF TEXTCHAR(@CHANNEL) ~= '';
 2135                 @ST$ -> MNEMONIC.B.CHANNEL = @CHANNEL;
 2136               %ENDIF;
 2137
 2138             END;
 2139
 2140      %MEND;
 2141      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            70   
 2142
 2143      DCL 1 SWITCH                  BASED (ST$) ALIGNED,
 2144
 2145           2 ID                     UBIN HALF UNAL,
 2146           2 *                      UBIN HALF UNAL,
 2147
 2148           2 OFF$                   PTR,
 2149
 2150           2 TYPE                   UBIN HALF UNAL,
 2151           2 LINE_NO                UBIN HALF UNAL,
 2152
 2153           2 ATTR                   BIT (18),
 2154           2 B                      REDEF ATTR,
 2155             3 *                    (0:17) BOOLEAN,
 2156           2 SWITCH#                UBIN HALF UNAL,
 2157
 2158           2 NEXT                   PTR,
 2159
 2160           2 ON$                    PTR,
 2161
 2162           2 DNT$                   PTR,
 2163
 2164           2 QLT$                   PTR,
 2165
 2166           2 *                      PTR,
 2167
 2168           2 PROC$                  PTR,
 2169           2 LINK                   PTR;
 2170
 2171
 2172      %MACRO NEW_SWITCH (@ST$       = ST$,
 2173                         @TYPE      = %TYG,
 2174                         @LINE_NO   = COMCOM.CURRENT.LINE,
 2175                         @ATTR      = FALSE,
 2176                         @NEXT      = "ADDR(NIL)",
 2177                         @SWITCH#   = 0,
 2178                         @DNT$      = "ADDR(NIL)",
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            71   
 2179                         @QLT$      = "ADDR(NIL)",
 2180                         @PROC$     = ,
 2181                         @ON$       = "ADDR(NIL)",
 2182                         @OFF$      = "ADDR(NIL)");
 2183
 2184             DO;
 2185               %RESERVE_ST   (POINTER = @ST$);
 2186
 2187               @ST$ -> SWITCH.ID        = %SWITCH;
 2188               @ST$ -> SWITCH.TYPE      = @TYPE;
 2189               @ST$ -> SWITCH.LINE_NO   = @LINE_NO;
 2190               @ST$ -> SWITCH.ATTR      = @ATTR;
 2191               @ST$ -> SWITCH.NEXT      = @NEXT;
 2192               @ST$ -> SWITCH.SWITCH#   = @SWITCH#;
 2193               @ST$ -> SWITCH.DNT$      = @DNT$;
 2194               @ST$ -> SWITCH.QLT$      = @QLT$;
 2195
 2196               %UPDATE_PROC_LINK (@TEMPLATE = SWITCH, @ST$ = @ST$, @PROC$ = @PROC$);
 2197               @ST$ -> SWITCH.ON$       = @ON$;
 2198               @ST$ -> SWITCH.OFF$      = @OFF$;
 2199             END;
 2200
 2201      %MEND;
 2202      %EJECT;
 2203
 2204
 2205      %EJECT;
 2206
 2207         DCL 1 ALPHABET      BASED (ST$) ALIGNED,
 2208               2 ID          UBIN HALF UNAL,
 2209               2 *           UBIN HALF UNAL,
 2210
 2211               2 TABLE_ETT$  PTR,
 2212
 2213               2 TYPE        UBIN HALF UNAL,
 2214               2 LINE_NO     UBIN HALF UNAL,
 2215               2 ATTR        BIT (36),
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            72   
 2216               2 B           REDEF ATTR,
 2217                 3 ALSO      BOOLEAN,
 2218                 3 SET_LOW_VALUE    BOOLEAN,
 2219                 3 GTR_255   BOOLEAN,
 2220                 3 *         (0:23) BOOLEAN,
 2221                 3 CODE      UBIN (9) UNAL,
 2222
 2223               2 NEXT        PTR,
 2224               2 TABLE$      PTR,
 2225               2 DNT$        PTR,
 2226               2 HIGH_VALUE  UBIN BYTE UNAL,
 2227               2 LOW_VALUE   UBIN BYTE UNAL,
 2228               2 NUM_VALUES  UBIN HALF UNAL,
 2229               2 *           PTR,
 2230               2 PROC$       PTR,
 2231               2 LINK        PTR;
 2232
 2233
 2234         %MACRO NEW_ALPHABET (@ST$         = ST$,
 2235                              @ATTR        = FALSE,
 2236                              @ALSO        = FALSE,
 2237                              @SET_LOW_VALUE = FALSE,
 2238                              @GTR_255     = FALSE,
 2239                              @LINE_NO     = COMCOM.CURRENT.LINE,
 2240                              @NEXT        = "ADDR(NIL)",
 2241                              @TYPE        = %TYG,
 2242                              @CODE        = %ASCII,
 2243                              @DNT$        = "ADDR(NIL)",
 2244                              @PROC$       = ,
 2245                              @HIGH_VALUE  = 127,
 2246                              @LOW_VALUE   = 0,
 2247                              @TABLE_ETT$  = "ADDR(NIL)",
 2248                              @NUM_VALUES  = 0,
 2249                              @TABLE$      = "ADDR(NIL)");
 2250
 2251             DO;
 2252               %RESERVE_ST (POINTER = @ST$);
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            73   
 2253
 2254               @ST$ -> ALPHABET.ID         = %ALPHABET;
 2255               @ST$ -> ALPHABET.LINE_NO    = @LINE_NO;
 2256               @ST$ -> ALPHABET.TYPE       = @TYPE;
 2257               @ST$ -> ALPHABET.ATTR       = @ATTR;
 2258               @ST$ -> ALPHABET.B.CODE     = @CODE;
 2259               @ST$ -> ALPHABET.NEXT       = @NEXT;
 2260               @ST$ -> ALPHABET.DNT$       = @DNT$;
 2261
 2262               %UPDATE_PROC_LINK (@TEMPLATE = ALPHABET, @ST$ = @ST$, @PROC$ = @PROC$);
 2263               @ST$ -> ALPHABET.HIGH_VALUE = @HIGH_VALUE;
 2264               @ST$ -> ALPHABET.LOW_VALUE  = @LOW_VALUE;
 2265               @ST$ -> ALPHABET.TABLE$     = @TABLE$;
 2266               @ST$ -> ALPHABET.NUM_VALUES = @NUM_VALUES;
 2267               @ST$ -> ALPHABET.TABLE_ETT$ = @TABLE_ETT$;
 2268
 2269               %IF (TEXTCHAR (@ALSO) ~= '');
 2270                 @ST$ -> ALPHABET.B.ALSO = @ALSO;
 2271               %ENDIF;
 2272               %IF (TEXTCHAR (@SET_LOW_VALUE) ~= '');
 2273                 @ST$ -> ALPHABET.B.SET_LOW_VALUE = @SET_LOW_VALUE;
 2274               %ENDIF;
 2275               %IF (TEXTCHAR (@GTR_255) ~= '');
 2276                 @ST$ -> ALPHABET.B.GTR_255 = @GTR_255;
 2277               %ENDIF;
 2278             END;
 2279
 2280         %MEND;
 2281
 2282
 2283         DCL 1 CLASS                BASED (ST$) ALIGNED,
 2284               2 ID                 UBIN HALF UNAL,
 2285               2 *                  UBIN HALF UNAL,
 2286
 2287               2 TABLE$             PTR,
 2288
 2289               2 TYPE               UBIN HALF UNAL,
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            74   
 2290               2 LINE_NO            UBIN HALF UNAL,
 2291               2 ATTR               BIT (36),
 2292               2 B                  REDEF ATTR,
 2293                 3 *                (0:35) BOOLEAN,
 2294
 2295               2 NEXT               PTR,
 2296               2 *                  PTR,
 2297               2 DNT$               PTR,
 2298               2 QLT$               PTR,
 2299               2 *                  PTR,
 2300               2 PROC$              PTR,
 2301               2 LINK               PTR;
 2302
 2303
 2304         %MACRO NEW_CLASS (@ST$ = ST$,
 2305                           @TABLE$  = "ADDR(NIL)",
 2306                           @TYPE    = %TYG,
 2307                           @LINE_NO = COMCOM.CURRENT.LINE,
 2308                           @ATTR    = FALSE,
 2309                           @NEXT    = "ADDR(NIL)",
 2310                           @DNT$    = "ADDR(NIL)",
 2311                           @PROC$   = ,
 2312                           @QLT$    = "ADDR(NIL)");
 2313
 2314           DO;
 2315             %RESERVE_ST (POINTER = @ST$);
 2316
 2317             @ST$ -> CLASS.ID       = %CLASS;
 2318             @ST$ -> CLASS.TABLE$   = @TABLE$;
 2319             @ST$ -> CLASS.TYPE     = @TYPE;
 2320             @ST$ -> CLASS.LINE_NO  = @LINE_NO;
 2321             @ST$ -> CLASS.ATTR     = @ATTR;
 2322             @ST$ -> CLASS.NEXT     = @NEXT;
 2323             @ST$ -> CLASS.DNT$     = @DNT$;
 2324             @ST$ -> CLASS.QLT$     = @QLT$;
 2325
 2326               %UPDATE_PROC_LINK (@TEMPLATE = CLASS, @ST$ = @ST$, @PROC$ = @PROC$);
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            75   
 2327           END;
 2328         %MEND;
 2329
 2330
 2331
 2332         DCL 1 SYMBOLIC_CHAR        BASED (ST$) ALIGNED,
 2333               2 ID                 UBIN HALF UNAL,
 2334               2 *                  UBIN HALF UNAL,
 2335               2 *                  UBIN WORD UNAL,
 2336
 2337               2 TYPE               UBIN HALF UNAL,
 2338               2 LINE_NO            UBIN HALF UNAL,
 2339               2 ATTR               BIT (36),
 2340               2 B                  REDEF ATTR,
 2341                 3 *                (0:35) BOOLEAN,
 2342
 2343               2 NEXT               PTR,
 2344               2 CONST$             PTR,
 2345               2 DNT$               PTR,
 2346               2 QLT$               PTR,
 2347               2 *                  PTR,
 2348               2 PROC$              PTR,
 2349               2 LINK               PTR;
 2350
 2351
 2352         %MACRO NEW_SYM_CHAR (@ST$         = ST$,
 2353                              @ATTR        = FALSE,
 2354                              @LINE_NO     = COMCOM.CURRENT.LINE,
 2355                              @TYPE        = %TYG,
 2356                              @NEXT        = "ADDR(NIL)",
 2357                              @DNT$        = "ADDR(NIL)",
 2358                              @QLT$        = "ADDR(NIL)",
 2359                              @PROC$       = ,
 2360                              @CONST$      = "ADDR(NIL)");
 2361
 2362             DO;
 2363               %RESERVE_ST (POINTER = @ST$);
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            76   
 2364
 2365               @ST$ -> SYMBOLIC_CHAR.ID         = %SYM_CHAR;
 2366               @ST$ -> SYMBOLIC_CHAR.LINE_NO    = @LINE_NO;
 2367               @ST$ -> SYMBOLIC_CHAR.TYPE       = @TYPE;
 2368               @ST$ -> SYMBOLIC_CHAR.ATTR       = @ATTR;
 2369               @ST$ -> SYMBOLIC_CHAR.NEXT       = @NEXT;
 2370               @ST$ -> SYMBOLIC_CHAR.DNT$       = @DNT$;
 2371               @ST$ -> SYMBOLIC_CHAR.QLT$       = @QLT$;
 2372
 2373               %UPDATE_PROC_LINK (@TEMPLATE = SYMBOLIC_CHAR, @ST$ = @ST$, @PROC$ = @PROC$);
 2374               @ST$ -> SYMBOLIC_CHAR.CONST$     = @CONST$;
 2375             END;
 2376
 2377         %MEND;
 2378
 2379
 2380      %EJECT;

09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            77   
 2381
 2382
 2383      %MACRO SET_OF_ST_ITEMS;
 2384
 2385           %TEMP,
 2386           %MNEMONIC,
 2387           %SWITCH,
 2388           %ALPHABET,
 2389           %CONDITION,
 2390           %ARRAY,
 2391           %SCALAR,
 2392    *      %CSIB,
 2393           %CONST,
 2394           %SECTION,
 2395           %PARA,
 2396           %SYMREF_,
 2397           %SYMDEF_,
 2398           %BLOCK,
 2399           %INDUCT,
 2400           %INTDEF,
 2401           %POINTER,
 2402           %SEGMENT,
 2403           %FD,
 2404           %SD,
 2405           %CD,
 2406           %RD,
 2407           %DB,
 2408           %CLASS,
 2409           %DCB_,
 2410           %REALM,
 2411           %DML_SET,
 2412           %DML_KEY,
 2413           %PRIVACY_KEY
 2414
 2415      %MEND;
 2416
 2417      %MACRO SET_OF_FILE_DESCRIPTIONS;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            78   
 2418
 2419           %FD,
 2420           %SD,
 2421           %RD
 2422
 2423      %MEND;
 2424
 2425
 2426      %MACRO ST_ITEMS_WITH_STORAGE ;
 2427           %TEMP,
 2428           %ARRAY,
 2429           %SCALAR,
 2430    *      %CSIB,
 2431           %CONST,
 2432           %FD,
 2433           %SD,
 2434           %RD,
 2435           %CD,
 2436           %POINTER
 2437      %MEND;
 2438
 2439
 2440
 2441
 2442      %EQU COMP1_LENGTH = 2 ; /* Length in terms of bytes */
 2443      %EQU COMP2_LENGTH = 4 ;
 2444      %EQU COMP6_LENGTH = 4 ;
 2445      %EQU COMP7_LENGTH = 2 ;
 2446      %EQU COMP11_13_LENGTH = 4 ;
 2447      %EQU COMP12_14_LENGTH = 8 ;
 2448
 2449      %EQU FLOATING_POINT_LEADING_SIGN = '00'B;
 2450      %EQU LEADING_SIGN = '01'B;
 2451      %EQU TRAILING_SIGN = '10'B;
 2452      %EQU NO_SIGN = '11'B;
 2453      %EQU OVP_LEADING_SIGN = '00'B;
 2454      %EQU OVP_TRAILING_SIGN = '11'B;
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            79   
 2455
 2456      %EQU ADSC4 = '10'B;
 2457      %EQU ADSC6 = '01'B;
 2458      %EQU ADSC9 = '00'B;
 2459
 2460      %EQU NDSC4 = TRUE;
 2461      %EQU NDSC9 = FALSE;
 2462
 2463      %EQU ABSOLUTE = 0;
 2464      %EQU PROGRAM  = 1;
 2465      %EQU EXT_PROGRAM = 2;
 2466      %EQU BLOCK_   = 3;
 2467      %EQU START_BLK = 4;
 2468
 2469
 2470      /* Preprocessor values for SCALAR CLASS */
 2471
 2472      %EQU CLASS_EDITED               = 4;
 2473      %EQU CLASS_ALPHANUMERIC         = 3;
 2474      %EQU CLASS_ALPHABETIC           = 2;
 2475      %EQU CLASS_NUMERIC              = 1;
 2476      %EQU CLASS_NUMERIC_EDITED       = %(CLASS_NUMERIC + CLASS_EDITED);
 2477      %EQU CLASS_ALPHANUMERIC_EDITED  = %(CLASS_ALPHANUMERIC + CLASS_EDITED);
 2478      %EQU CLASS_ALPHABETIC_EDITED    = %(CLASS_ALPHABETIC + CLASS_EDITED);
 2479      %EQU CLASS_UNDEFINED            = 0;
 2480      %EQU CLASS_POINTER              = 0; /* Same as UNDEFINED */
 2481
 2482      /* Preprocessor values for ALPHABET types (CODE) */
 2483
 2484      %EQU ASCII             = 0;
 2485      %EQU JIS               = 1;
 2486      %EQU GRAPHIC           = 2;
 2487      %EQU EBCDIC            = 3;
 2488      %EQU GBCD              = 4;
 2489      %EQU HBCD              = 5;
 2490      %EQU USER_DEFINED      = 6;
 2491
09:13 AUG 09 '97 Z8A_ST.:Z8A6SI/Z8A_ST.:Z8A6TUI                            80   
 2492
 2493      /* Channel numbers */
 2494      %EQU CPS =  0;
 2495      %EQU C01 =  1;
 2496      %EQU C02 =  2;
 2497      %EQU C03 =  3;
 2498      %EQU C04 =  4;
 2499      %EQU C05 =  5;
 2500      %EQU C06 =  6;
 2501      %EQU C07 =  7;
 2502      %EQU C08 =  8;
 2503      %EQU C09 =  9;
 2504      %EQU C10 = 10;
 2505      %EQU C11 = 11;
 2506      %EQU C12 = 12;
 2507      %EQU C13 = 13;
 2508      %EQU C14 = 14;
 2509      %EQU C15 = 15;
 2510
 2511      %EJECT;


