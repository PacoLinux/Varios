

09:22 AUG 09 '97 Z8I_ERR_BUF.:Z8A6SI                                       1    
    1      /*M* Z8I_ERROR_BUFFER */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*P*
    9               NAME: Z8I_ERROR_BUFFER
   10            PURPOSE: The table structure for buffering error messages is defined here.
   11                     Buffering of error messages is required due to the way UNGMAP
   12                     requests listing lines to be passed, and the fact that error lines
   13                     can be longer than one normal print line.
   14      */
   15
   16
   17      DCL BERR$ PTR EXT;
   18
   19      DCL  1  BERR_   EXT ALIGNED,
   20            2 TOP     PTR INIT(ADDR(NIL)),
   21            2 FIRST   PTR,
   22            2 BOTTOM  UBIN INIT(0),
   23            2 FLOOR   UBIN INIT(0),
   24            2 SIZE    UBIN INIT(0);
   25
   26      DCL 1 BERR BASED(BERR$) ALIGNED,
   27            2 ID      UBIN HALF HALIGNED,
   28            2 N       UBIN HALF HALIGNED,
   29            2 TEXT,
   30              3 LENGTH UBIN HALF HALIGNED,
   31              3 BODY  CHAR(BERR.TEXT.LENGTH) UNAL;
   32
   33      %MACRO RESERVE_BERR (POINTER=BERR$, SIZE=1);
   34
   35        DO;
   36          ITERATION = (SIZE + 9) / 4;
   37          IF BERR_.BOTTOM + ITERATION >= BERR_.FLOOR THEN
09:22 AUG 09 '97 Z8I_ERR_BUF.:Z8A6SI                                       2    
   38            CALL Z8AR$RESERVER(ADDR(BERR_));
   39          POINTER = PINCRW(BERR_.FIRST, BERR_.BOTTOM);
   40          BERR_.BOTTOM = BERR_.BOTTOM + ITERATION;
   41          POINTER -> BERR.ID = 1;
   42          POINTER -> BERR.N = ITERATION;
   43          POINTER -> BERR.TEXT.LENGTH = SIZE;
   44        END;
   45
   46      %MEND;
   47
   48
   49      %MACRO TOP_BERR(POINTER = BERR$);
   50        POINTER = BERR_.TOP;
   51      %MEND;
   52
   53
   54      %MACRO STEP_BERR(POINTER = BERR$);
   55        DO;
   56          POINTER = PINCRW(POINTER, POINTER -> BERR.N);
   57          IF POINTER = PINCRW(BERR_.FIRST, BERR_.BOTTOM) THEN
   58            POINTER = ADDR(NIL);
   59          ELSE
   60            IF POINTER -> BERR.ID = %CONTINUE THEN
   61              POINTER = POINTER -> CONT.NEXT;
   62        END;
   63      %MEND;

