VERSION A06

PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        Z8DD$DOCUMENT: PROC NOAUTO ;
        7        7        /*M*  Z8DD$DOCUMENT -- Phase 1 Storage allocation overview */
        8        8
        9        9        %SET LISTINC = '1'B ;
       10       10
       11       11        /*P*
       12       12               NAME:  Z8DD$DOCUMENT
       13       13            PURPOSE:  Explains the functions of preliminary storage allocation and
       14       14                      span calculations done during Phase 1.
       15       15        */
       16       16
       17       17        /*F*
       18       18               NAME:  PURPOSE
       19       19             AUTHOR:  GK Myers  (6/05/81)
       20       20          REFERENCE:  Frank Helwig's article 'Storage Allocation'
       21       21
       22       22                      Phase 1 storage allocation calculates all of the offsets within
       23       23                      an 01 structure and calculates the span of all array entries.
       24       24                      The offsets are then stored for later usage by Phase 2 which
       25       25                      calculates the storage location by adding the offset of the 01
       26       26                      item to the variable's offset within the 01 structure to get
       27       27                      the actual location.  The span fields of an array are the actual
       28       28                      length of each dimension of the item.  This is used to
       29       29                      calculate locations of subscripted values of array items.
       30       30        */
       31       31        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:2    
       32       32        /*F*
       33       33               NAME:  METHOD
       34       34             AUTHOR:  GK Myers (06/05/81)
       35       35
       36       36                      The code for these modules is in PL-6.  The master module
       37       37                      (Z8DA$STORAGE_ALLOCATION) is called by Phase 1 upon reaching
       38       38                      the end of the DATA DIVISION.  The master module then calls
       39       39                      the procedures to calculate the sizes and spans of variables
       40       40                      within a 01 data structure.
       41       41
       42       42                      The modules and their relationships are described in the
       43       43                      following diagram:
       44       44
       45       45                          ******************************      ********************
       46       46                          !                            !----->!                  !<-----
       47       47        Z8EM$SEMANTICS    !                            !      !  Z8DC$SIZE_CALC  !     !
       48       48                  ------->!                            !      !    (Recursive)   !     !
       49       49                          !                            !      !                  !------
       50       50                          !  Z8DA$STORAGE_ALLOCATION   !      ********************
       51       51                          !                            !      ********************
       52       52                          !                            !----->!                  !<-----
       53       53                          !                            !      !  Z8DS$SPAN_CALC  !     !
       54       54                          !                            !      !    (Recursive)   !     !
       55       55                          !                            !      !                  !------
       56       56                          ******************************      ********************
       57       57
       58       58            Z8EM$SEMANTICS_DATA_DIV  Phase 1 SEMANTICS routine calls Z8DA upon reaching
       59       59                                     the end of the DATA DIVISION.
       60       60
       61       61            Z8DA$STORAGE_ALLOCATION  Storage allocation root.  Calls Z8DC$SIZE_CALC,
       62       62                                     Z8DS$SPAN_CALC and does initialization for all
       63       63                                     data structures as it steps through the QLT.
       64       64
       65       65            Z8DC$SIZE_CALC           Calculates the size and alignment of each variable
       66       66                                     within a structure.  It starts with the 02's and
       67       67                                     then is called recursively to calculate the 03's,
       68       68                                     04's, etc. until all of the variables are
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:3    
       69       69                                     calculated.
       70       70
       71       71            Z8DS$SPAN_CALC           Calculates the spans for each variable within a
       72       72                                     structure.  As in Z8DC it starts with the 02's and
       73       73                                     then is called recursively to calculate the other
       74       74                                     levels within the structure.
       75       75        */
       76       76        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:4    
       77       77        /*F*
       78       78               NAME:  FORMAT_OF_INPUT
       79       79            CHAPTER:  Overview
       80       80             AUTHOR:  GK Myers (06/08/81)
       81       81
       82       82                      The information needed for storage allocation and span calculation
       83       83                      is stored in three tables.  When Phase 1 allocates a data item, it
       84       84                      creates an entry in the symbol table, qualifier links table, and
       85       85                      if the item is dimensioned a LTS entry.  A brief description
       86       86                      of the three tables follows.
       87       87
       88       88                         LTS  - Long Term Supplement.  This table gives information
       89       89                                for array entries, edited entries, items with lengths
       90       90                                greater than the ST.ADSC.N field, and a controller
       91       91                                entry if needed.  This table is accessed via pointers
       92       92                                in the ST.
       93       93
       94       94                         QLT  - Qualifier Links Table.  This table contains bits
       95       95                                giving further information about a symbol table
       96       96                                item and also details the entry's father,
       97       97                                brother, and son if one exists.  The table is accessed
       98       98                                sequentially or by pointers in the ST.
       99       99
      100      100                          ST  - Symbol Table.  This table is comprised of items
      101      101                                representing encoded versions of data names, file
      102      102                                names, labels, etc.  The information concerning
      103      103                                the items location, type, and length is contained
      104      104                                here.  This table is accessed sequentially or by
      105      105                                pointers in the QLT.
      106      106        */
      107      107
      108      108        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:5    
      109      109        /*F*
      110      110               NAME:  FORMAT_OF_INPUT
      111      111            CHAPTER:  LTS_table
      112      112
      113      113                      Whenever an item has an occurs clause or if it is an
      114      114                      edited item, Phase 1 will set up an LTS entry.  The type
      115      115                      of entry is dependent on which clause is used.  If more
      116      116                      than one clause is used an LTSS item is created which
      117      117                      holds pointers to the various LTS entries.  Another entry
      118      118                      is set up if the variable's size is greater than 4095 as its
      119      119                      size can't be stored in the symbol table.
      120      120
      121      121                      (1) The dimensioned entry consists of
      122      122
      123      123                          DIMS.ID            identification code
      124      124                          DIMS.N             length of entry in words
      125      125                          DIMS.DN2           pointer to dataname it depends on or nill
      126      126                          DIMS.D.DIM(0:49)   number of items in kth dimension
      127      127                          DIMS.D.SPAN(0:49)  span of item
      128      128                          DIMS.D.INDEX(0:49) pointer to kth index or nill
      129      129
      130      130                DIMS
      131      131                0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      132      132               I-----------------I-----------------I-----------------I-----------------I
      133      133              0!ID                                 !N                                  !
      134      134               I-----------------I-----------------I-----------------I-----------------I
      135      135              1!DN2                                                                    !
      136      136               I-----------------I-----------------I-----------------I-----------------I
      137      137              2!SPAN                                                                   !
      138      138               I-----------------I-----------------I-----------------I-----------------I
      139      139              3!DIM                                                                    !
      140      140               I-----------------I-----------------I-----------------I-----------------I
      141      141              4!INDEX$                                                                 !
      142      142               I-----------------I-----------------I-----------------I-----------------I
      143      143                ARRAY:'  62'O ENTRIES TOTAL.
      144      144               I-----------------I-----------------I-----------------I-----------------I
      145      145
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:6    
      146      146                      (2) We are not concerned with the edited entry.
      147      147
      148      148                      (3) The long entry consists of
      149      149
      150      150                          LONG.ID            identification code
      151      151                          LONG.LENGTH        length of item
      152      152
      153      153                LONG
      154      154                0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      155      155               I-----------------I-----------------I-----------------I-----------------I
      156      156              0!ID                                 !*                                  !
      157      157               I-----------------I-----------------I-----------------I-----------------I
      158      158              1!LENGTH                                                                 !
      159      159               I-----------------I-----------------I-----------------I-----------------I
      160      160
      161      161                      (4) LTSS entry to manage multiple Lts entries.
      162      162
      163      163                          LTSS.ID            identification code
      164      164                          LTSS.DIMS$         pointer to dimensioned entry
      165      165                          LTSS.NEL$          pointer to edited entry
      166      166                          LTSS.LONG$         pointer to long entry
      167      167
      168      168                LTSS
      169      169                0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      170      170               I-----------------I-----------------I-----------------I-----------------I
      171      171              0!ID                                 !*                                  !
      172      172               I-----------------I-----------------I-----------------I-----------------I
      173      173              1!DIMS$                                                                  !
      174      174               I-----------------I-----------------I-----------------I-----------------I
      175      175              2!NEL$                                                                   !
      176      176               I-----------------I-----------------I-----------------I-----------------I
      177      177              3!LONG$                                                                  !
      178      178               I-----------------I-----------------I-----------------I-----------------I
      179      179        */
      180      180        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:7    
      181      181        /*F*
      182      182               NAME:  FORMAT_OF_INPUT
      183      183            CHAPTER:  QLT table
      184      184
      185      185                      A qualifier item is set up for every array, scalar, or label
      186      186                      item in the symbol table.
      187      187
      188      188                          QLT.FATHER        pointer to father or nill
      189      189                          QLT.BROTHER       pointer to brother or nill
      190      190                          QLT.SON           pointer to son or nill
      191      191                          QLT.ST$           pointer to ST entry
      192      192
      193      193                        Attribute bits:
      194      194
      195      195                          QLT.B.OCCURS      item has an occurs clause
      196      196                          QLT.B.SYNC        item has synchronized clause
      197      197                          QLT.B.DIGIT       COMP-4 or (COMP-8 when not synchronized)
      198      198
      199      199                QLT
      200      200                0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      201      201               I-----------------I-----------------I-----------------I-----------------I
      202      202              0!ID                                 !. . . . . . . . . . . . . . . . . .!
      203      203               I-----------------I-----------------I-----------------I-----------------I
      204      204              0!. . . . . . . . . . . . . . . . . .!O!S!D!*                            !
      205      205               I-----------------I-----------------I-----------------I-----------------I
      206      206              1!FATHER                                                                 !
      207      207               I-----------------I-----------------I-----------------I-----------------I
      208      208              2!BROTHER                                                                !
      209      209               I-----------------I-----------------I-----------------I-----------------I
      210      210              3!SON                                                                    !
      211      211               I-----------------I-----------------I-----------------I-----------------I
      212      212              4!ST$                                                                    !
      213      213               I-----------------I-----------------I-----------------I-----------------I
      214      214              5!DNT$                                                                   !
      215      215               I-----------------I-----------------I-----------------I-----------------I
      216      216        */
      217      217        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:8    
      218      218        /*F*
      219      219               NAME:  FORMAT_OF_INPUT
      220      220            CHAPTER:  ST
      221      221
      222      222                      A symbol table item is set up for every block, label, array,
      223      223                      constant, or scalar item.  Some of the items in this
      224      224                      table are redefined for generator usage.
      225      225
      226      226                          ST.ID             identification code
      227      227                          ST.R              relocation: 1 for labels, 3 for variables
      228      228                          ST.COUNT          block number
      229      229                          ST.SA             storage address
      230      230                          ST.TYPE           data type ie. COMP-6, COMP-7, etc.
      231      231                          ST.LINE_NO        line number of declaration
      232      232
      233      233                      A descriptor field is set up with information depending on the
      234      234                      item being numeric (NDSC), alphabetic (ADSC), or bit (BDSC).
      235      235
      236      236                        Alpha Descriptor
      237      237                          ST.ADSC.CN        byte position within word
      238      238                          ST.ADSC.N         length of item in bytes (if > 4095 then
      239      239                                            stored in LONG.LENGTH in LTS table)
      240      240
      241      241                        Bit Descriptor
      242      242
      243      243                          ST.BDSC.C         character position in word
      244      244                          ST.BDSC.B         bit within byte
      245      245                          ST.BDSC.N         length in bits
      246      246
      247      247                        Numeric Descriptor
      248      248
      249      249                          ST.NDSC.CN        digit position within word
      250      250                          ST.NDSC.TN        '0'B = 9 bit, '1'B = 4 bit
      251      251                          ST.NDSC.S         signed number, '11'b = no sign
      252      252                          ST.NDSC.SF        scale factor
      253      253                          ST.NDSC.N         length in digits is st.ndsc.tn, else bytes
      254      254
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:9    
      255      255                        Attribute bits
      256      256
      257      257                          ST.B.REFERENCED   item is referenced
      258      258                          ST.B.DEFINED      item is defined
      259      259                          ST.B.ARG          item is used as an argument
      260      260                          ST.B.DUPLICATE    defined more than once
      261      261                          ST.B.EDITED       item is in edited format
      262      262                          ST.B.ONE_REF      item is referenced only once
      263      263                          ST.B.TOOBIG       size greater than 256K
      264      264                          ST.B.LONG_CONSTANT
      265      265                          ST.B.ELEMENTARY   item has no sons
      266      266                          ST.B.DIMENSIONED  item has an DIMS entry in LTS
      267      267                          ST.B.TOO_MUCH     item has more than 1 LTS entry
      268      268                          ST.B.LENGTH_4096  item's length is stored in LONG.LENGTH
      269      269                          ST.B.COMP6_NONOP  item can't be optimized into COMP-6
      270      270                          ST.B.PHASE_2      label has been read by Phase 2
      271      271                          ST.B.FALL_THRU    label may be reached by falling thru
      272      272
      273      273                        Pointers
      274      274
      275      275                          ST.NEXT           pointer to next entry if duplicate
      276      276                          ST.LTS$           pointer to LTS entry
      277      277                          ST.ILS$           pointer to ILS entry
      278      278                          ST.DNT$           pointer to DNT entry
      279      279                          ST.QLT$           pointer to QLT
      280      280
      281      281              ST                            WALIGNED
      282      282              0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      283      283             I-----------------I-----------------I-----------------I-----------------I
      284      284            0!ID                                 !R                !COUNT            !W
      285      285             I-----------------I-----------------I-----------------I-----------------I
      286      286            1!SA                                 !. . . . . . . . . . . . . . . . . .!
      287      287             I-----------------I-----------------I-----------------I-----------------I
      288      288            1!SA_BIT                             !DESCL                              !
      289      289             I-----------------I-----------------I-----------------I-----------------I
      290      290              LVL2=BDSC
      291      291            1!. . . . . . . . . . . . . . . . . .!C  !B      !N                      !B
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:10   
      292      292             I-----------------I-----------------I-----------------I-----------------I
      293      293              LVL2=BDSC        LVL3=LEN
      294      294            1!. . . . . . . . . . . . . . . . . . . . . . . .!*              !REG    !B
      295      295             I-----------------I-----------------I-----------------I-----------------I
      296      296              LVL2=ADSC
      297      297            1!. . . . . . . . . . . . . . . . . .!CN !M!TA !M!N                      !B
      298      298             I-----------------I-----------------I-----------------I-----------------I
      299      299              LVL2=ADSC        LVL3=LEN
      300      300            1!. . . . . . . . . . . . . . . . . . . . . . . .!*              !REG    !B
      301      301             I-----------------I-----------------I-----------------I-----------------I
      302      302              LVL2=NDSC
      303      303            1!. . . . . . . . . . . . . . . . . .!CN   !T!S  !SF         !N          !B
      304      304             I-----------------I-----------------I-----------------I-----------------I
      305      305            2!TYPE or SIZE                       !LINE_NO                            !
      306      306             I-----------------I-----------------I-----------------I-----------------I
      307      307              LVL2=REF         LVL3=MF
      308      308            2!. . . . . . . . . . . . . . . . . .!A!R!I!TAG    !. . . . . . . . . . .!B
      309      309             I-----------------I-----------------I-----------------I-----------------I
      310      310              LVL2=REF
      311      311            2!. . . . . . . . . . . . . . . . . . . . . . . . .!ARF  !C!*            !
      312      312             I-----------------I-----------------I-----------------I-----------------I
      313      313            3!ATTR                                                                   !
      314      314             I-----------------I-----------------I-----------------I-----------------I
      315      315              LVL2=B
      316      316            3!R!D!A!D!E!O!T!L!E!D!T!L!C!P!F!*                                        !B
      317      317             I-----------------I-----------------I-----------------I-----------------I
      318      318
      319      319              0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      320      320             I-----------------I-----------------I-----------------I-----------------I
      321      321            4!NEXT                                                                   !
      322      322             I-----------------I-----------------I-----------------I-----------------I
      323      323            5!LTS$ or POINTER$ or ILS$                                                !
      324      324             I-----------------I-----------------I-----------------I-----------------I
      325      325            6!DNT$                                                                   !
      326      326             I-----------------I-----------------I-----------------I-----------------I
      327      327            6!CONSTI                                                                 !
      328      328             I-----------------I-----------------I-----------------I-----------------I
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:11   
      329      329            6!LAST                                                                   !
      330      330             I-----------------I-----------------I-----------------I-----------------I
      331      331            7!QLT$                                                                   !
      332      332             I-----------------I-----------------I-----------------I-----------------I
      333      333            7!ST_PTR                                                                 !
      334      334             I-----------------I-----------------I-----------------I-----------------I
      335      335            7!ASS_TRIAD                                                              !
      336      336             I-----------------I-----------------I-----------------I-----------------I
      337      337            7!SEGMENT$                                                               !
      338      338             I-----------------I-----------------I-----------------I-----------------I
      339      339            7!SECTION$                                                               !
      340      340             I-----------------I-----------------I-----------------I-----------------I
      341      341           10!FDP                                !BDP                                !
      342      342             I-----------------I-----------------I-----------------I-----------------I
      343      343           11!PROC$                                                                  !
      344      344             I-----------------I-----------------I-----------------I-----------------I
      345      345           11!REF_TRIAD                                                              !
      346      346             I-----------------I-----------------I-----------------I-----------------I
      347      347         */
      348      348        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:12   
      349      349        /*F*
      350      350               NAME:  PROGRAM_DESCRIPTIONS
      351      351            CHAPTER:  Z8DA$STORAGE_ALLOCATION
      352      352             AUTHOR:  GK Myers
      353      353
      354      354                      Z8DA acts as a control procedure for the size calculation and
      355      355                      span calculation procedures.  This procedure starts at the top
      356      356                      of the QLT and then loops through the QLT by retrieving each
      357      357                      entry's brother until all the 01's and 77's have been looked at.
      358      358
      359      359                      If the entry is an elementary 01 or a 77 then it is passed by as
      360      360                      Phase 2 will handle it.  When a 01 is accessed that is a structure
      361      361                      then the data variables for offsets within structures are
      362      362                      initialized to zero.  Z8DC and Z8DS are then called.  A pseudo
      363      363                      program is below to show the program flow.
      364      364
      365      365
      366      366                           Get pointer to top of QLT
      367      367                           Do while QLT pointer isn't nill
      368      368                             If element is non-elementary then
      369      369                               Initialize offset counters
      370      370                               Call Z8DC
      371      371                               Call Z8DS
      372      372                             Get QLT entry's brother
      373      373                           End
      374      374        */
      375      375        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:13   
      376      376        /*F*
      377      377               NAME:  PROGRAM_DESCRIPTIONS
      378      378            CHAPTER:  Z8DC$SIZE_CALC
      379      379
      380      380                      This routine receives an 01 data item which is the top of a
      381      381                      structure.  The alignments and sizes of the variables within are
      382      382                      calculated and stored for usage by Phase 2.  A pseudo program
      383      383                      is below to show the program flow.
      384      384
      385      385
      386      386                           If element is non-elementary then
      387      387                             Initialize structure variables
      388      388                             Do while element's son is not nill
      389      389                               Align variable
      390      390                               If son is elementary then
      391      391                                 Get size of son from ST
      392      392                               Else
      393      393                                 Call Z8DC
      394      394                               If son has an occurs clause then
      395      395                                 Expand size to include dimensions
      396      396                               Increment offset and storage counters
      397      397                               Get son's brother
      398      398                             End
      399      399                             Assign size of structure
      400      400
      401      401
      402      402                      The procedure has a do-loop after the initialization of the
      403      403                      structure variables.  This loop goes through the sons of a
      404      404                      structure by the QLT.BROTHER pointer.  If the son is non-
      405      405                      elementary then it locates the first elementary item within
      406      406                      the structure to decide on the alignment.  The alignment is
      407      407                      done according to the conventions described in Frank Helwig's
      408      408                      article by calling a macro that does the alignment and calculates
      409      409                      the filler used.  After the alignment has been done the offsets
      410      410                      are stored in the variable's SA field.  If the offset counters
      411      411                      step beyond the data storage limit (256K) the counters are reset
      412      412                      to zero.
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:14   
      413      413
      414      414                      The son is then processed differently depending on it being
      415      415                      an elementary item or not.  If it is elementary then the size is
      416      416                      pulled from the length field of the ST.  If it is non-elementary
      417      417                      then Z8DC is called to operate on that structure within that
      418      418                      element.  The maximum alignment boundary of this structure is
      419      419                      checked against the outer structure's boundary to assign the
      420      420                      larger value.
      421      421
      422      422                      When the item has an occurs clause the size of the variable is
      423      423                      expanded out to the size of one element multiplied by the number
      424      424                      of items in the array.  The size of the variable is also checked
      425      425                      to make sure it is not larger than the data storage limit.
      426      426
      427      427                      The storage counters and the size of the structure are incremented
      428      428                      by the size and the amount of filler needed to align the variable.
      429      429                      The element's brother is then determined and the program goes
      430      430                      to the top of the loop.
      431      431
      432      432                      The size of the structure that was processed in the loop is
      433      433                      checked to make sure it is a multiple of the maximum boundary
      434      434                      needed inside the structure (see Frank Helwig's article).  If
      435      435                      it is not then filler is used to make it so.  The size is
      436      436                      then stored in ST.ADSC.N if it will fit (less than 4095 bytes)
      437      437                      otherwise a LONG item is created in the LTS table and the size
      438      438                      is stored in LONG.LENGTH.
      439      439        */
      440      440        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:15   
      441      441        /*F*
      442      442               NAME:  PROGRAM_DESCRIPTIONS
      443      443            CHAPTER:  Z8DS$SPAN_CALC
      444      444
      445      445                      This procedure is passed the structure's son to calculate the span
      446      446                      of that son and other members of the structure.  The span of an
      447      447                      array item is the length of one element of the array.  This is
      448      448                      used to calculate the storage locations for members of array
      449      449                      items.  A pseudo program follows to explain the program flow.
      450      450
      451      451
      452      452                           Find innermost father that has occurs clause
      453      453                           If item has occurs clause then
      454      454                             Copy inherited spans
      455      455                             Calculate span of item and convert spans to proper units
      456      456                           Else
      457      457                             Copy inherited spans and convert to proper units
      458      458                           Calculate offset for OFF triad
      459      459                           If item has a son then
      460      460                             Call Z8DS passing the son as the parameter
      461      461                           If item has a brother then
      462      462                             Call Z8DS passing the brother as the parameter
      463      463
      464      464
      465      465                      The innermost father that has an occurs clause is determined so
      466      466                      that the outer spans of an item can be copied over.
      467      467
      468      468                      If the item has an occurs clause then all the spans of the
      469      469                      father are copied over.  The span of the item is then calculated
      470      470                      by using the size of that item.  All of the spans are then
      471      471                      converted according to the proper units (words, bytes, or
      472      472                      digits) depending on the type of data item.
      473      473
      474      474                      If there is no occurs clause then the spans of the father are
      475      475                      copied over and converted to the correct units as done above.
      476      476
      477      477                      The fudge offset for the OFF triad is calculated by summing up
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:16   
      478      478                      all of the span fields for an item and storing it in the SPAN(0)
      479      479                      field.
      480      480
      481      481                      If the item has a son then Z8DS is called with the son passed
      482      482                      as a parameter.  The item is then checked to see if it has a
      483      483                      brother and if it does then Z8DS is called with the brother
      484      484                      passsed as the parameter.
      485      485        */
      486      486        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:17   
      487      487        %EQU PHASE = 1;
      488      488        %INCLUDE Z8A_DEFC ;
        1+     489        /*T***********************************************************/
        2+     490        /*T*                                                         */
        3+     491        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+     492        /*T*                                                         */
        5+     493        /*T***********************************************************/
        6+     494        /* DEFC -- DEFINE COMPILER COMMON THINGS */
        7+     495
        8+     496        /*
        9+     497             The following flag is *very* important.  It is used to determine
       10+     498        whether to compile the initialization section of a declaration or
       11+     499        not.  Distinction between SYMDEF and SYMREF attributes can be made
       12+     500        using this variable as well.
       13+     501
       14+     502        */
       15+     503
       16+     504        %SET INITIALIZE = '0'B;
       17+     505
       18+     506        %EQU SUCCESSFUL_CALL = '1'B;
       19+     507        %EQU SUCCESSFUL_CALLS = '1'B;
       20+     508        %EQU OPTIMIZE_THIS_CASE = 0;
       21+     509        %SET INCLUDE_ENT_DEFS = '1'B;
       22+     510        %EQU OPTIMIZATION = 0;
       23+     511        %EQU OPTIMIZED = 0;
       24+     512        %EQU PAGE_SIZE = 1024;
       25+     513        %EQU PAGES_PER_BLOCK = 8 ;
       26+     514        %EQU BLOCK_SIZE      = 8192 ;  /* PAGE_SIZE * PAGES_PER_BLOCK */
       27+     515        %EQU #4K = BITBIN('010000'O);
       28+     516        %EQU #16K = BITBIN('040000'O);
       29+     517        %EQU #128K = BITBIN('0400000'O);
       30+     518        %EQU #256K = BITBIN('1000000'O);
       31+     519        %EQU MAX_ARGS = 1020 ;
       32+     520        %EQU MAX_SEQ# = BITBIN('777777'O) ; /* 256K - 1 */
       33+     521        %EQU Z8A_NAMES_SIZE = 599;  /* Maximum valid ID */
       34+     522
       35+     523        %EQU KANJI_SPACE = BITASC ('241'O) ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:18   
       36+     524        %EQU KANJI_START = BITASC ('216'O) ;
       37+     525        %EQU KANJI_END   = BITASC ('217'O) ;
       38+     526        %EQU LENGTH_OF_LX_ITEM = 8 ; /* See LENGTH_LX_ITEM in Z8E_STACKS */
       39+     527        %EQU HIGH_LEV = 1;
       40+     528        %EQU INT_LEV  = 2;
       41+     529        %EQU LOW_LEV  = 3;
       42+     530
       43+     531        /* Special %SUBs for perhaps more understandable code */
       44+     532
       45+     533        %SUB NEVER    = "WHILE('0'B)";
       46+     534        %SUB FOREVER  = "WHILE('1'B)";
       47+     535        %SUB BOOLEAN  = "BIT(1) UNAL";
       48+     536
       49+     537        %SUB TRUE     = "'1'B";
       50+     538        %SUB FALSE    = "'0'B";
       51+     539
       52+     540    1   DCL 1 PAGE BASED ALIGNED,
       53+     541    1         2 * (0:%(PAGE_SIZE - 2)) UBIN WORD UNAL,
       54+     542    1         2 NEXT PTR;
       55+     543
       56+     544    1   DCL 1 CONT BASED ALIGNED,
       57+     545    1         2 ID UBIN HALF UNAL,
       58+     546    1         2 * UBIN HALF UNAL,
       59+     547    1         2 NEXT PTR;
       60+     548
       61+     549    1   DCL ITERATION SBIN WORD EXT ; /* USED TO RSV VARIABLE ITEMS */
       62+     550
       63+     551    1   DCL CHARS CHAR(%(PAGE_SIZE * 4)) ALIGNED BASED ;
       64+     552
       65+     553        %IF PHASE ~= 0 ;
       66+     554    1   DCL Z8AR$RESERVER ENTRY(1);
       67+     555        %ENDIF;
      489      556        %INCLUDE Z8A_SUPP_MAC ;
        1+     557        /*T***********************************************************/
        2+     558        /*T*                                                         */
        3+     559        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+     560        /*T*                                                         */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:19   
        5+     561        /*T***********************************************************/
        6+     562            %INCLUDE Z8A_NAMES;
        1+     563        /*T***********************************************************/
        2+     564        /*T*                                                         */
        3+     565        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+     566        /*T*                                                         */
        5+     567        /*T***********************************************************/
        6+     568        /* INCLUDE FILE Z8A_NAMES */
        7+     569
        8+     570                       %IF PHASE = 6;
       15+     577                       %ENDIF;
       16+     578
       17+     579        %EQU CONTINUE   =   0; /* '0000'O */
       18+     580                               %IF INITIALIZE AND PHASE = 6;
       20+     582                               %ENDIF;
       21+     583
       22+     584        %EQU FIRST_ETT  =   1; /* '0001'O */
       23+     585        %EQU BASE       =   1; /* '0001'O         lop is based on rop       */
       24+     586                               %IF INITIALIZE AND PHASE = 6;
       26+     588                               %ENDIF;
       27+     589
       28+     590        %EQU FISS       =   2; /* '0002'O         fission of lop            */
       29+     591                               %IF INITIALIZE AND PHASE = 6; /* (size = ropcon )          */
       31+     593                               %ENDIF;
       32+     594
       33+     595        %EQU OFF        =   3; /* '0003'O         offset: lop = "BASE"      */
       34+     596                               %IF INITIALIZE AND PHASE = 6;
       36+     598                               %ENDIF;
       37+     599
       38+     600        %EQU SIZ        =   4; /* '0004'O         size(lop) = rop           */
       39+     601                               %IF INITIALIZE AND PHASE = 6;
       41+     603                               %ENDIF;
       42+     604
       43+     605        %EQU SSOP       =   5; /* '0005'O         subscript(lop) = rop      */
       44+     606                               %IF INITIALIZE AND PHASE = 6;
       46+     608                               %ENDIF;
       47+     609
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:20   
       48+     610        %EQU DAN        =   6; /* '0006'O         conversion tya to tyd     */
       49+     611                               %IF INITIALIZE AND PHASE = 6;
       51+     613                               %ENDIF;
       52+     614
       53+     615        %EQU DNA        =   7; /* '0007'O         descriptor conversion     */
       54+     616                               %IF INITIALIZE AND PHASE = 6; /*         N -> A            */
       56+     618                               %ENDIF;
       57+     619
       58+     620        %EQU DESC       =   8; /* '0010'O         new complete descriptor   */
       59+     621                               %IF INITIALIZE AND PHASE = 6;
       61+     623                               %ENDIF;
       62+     624
       63+     625        %EQU D96        =   9; /* '0011'O         conversion tya to tyb     */
       64+     626                               %IF INITIALIZE AND PHASE = 6;
       66+     628                               %ENDIF;
       67+     629                                                                    /*#28637*/
       68+     630        %EQU REFMOD     =  10; /* '0012'O         Reference Modification    */
       69+     631                               %IF INITIALIZE AND PHASE = 6;
       71+     633                               %ENDIF;
       72+     634
       73+     635        /*-------------------------------------------------------*/ /*#28637*/
       74+     636        /*      Room  for  item  here                                       */
       75+     637        /*------------------------------------------------------------------*/
       76+     638
       77+     639                               %IF INITIALIZE AND PHASE = 6;
       79+     641                               %ENDIF;
       80+     642
       81+     643        %EQU MPD10      =  12; /* '0014'O         multiply decimal power 10 */
       82+     644                               %IF INITIALIZE AND PHASE = 6;
       84+     646                               %ENDIF;
       85+     647
       86+     648        %EQU TRIAD      =  13; /* '0015'O         lop is a const item       */
       87+     649                               %IF INITIALIZE AND PHASE = 6;
       89+     651                               %ENDIF;
       90+     652
       91+     653        %EQU ARGP       =  14; /* '0016'O         argument pointer         */
       92+     654                               %IF INITIALIZE AND PHASE = 6; /*       lop is an st item   */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:21   
       94+     656                               %ENDIF;
       95+     657
       96+     658        %EQU ESC        =  15; /* '0017'O         escape ptr, lop is block  */
       97+     659                               %IF INITIALIZE AND PHASE = 6;
       99+     661                               %ENDIF;
      100+     662
      101+     663        %EQU CVDF       =  16; /* '0020'O         convert tyd ==> tyf       */
      102+     664                               %IF INITIALIZE AND PHASE = 6;
      104+     666                               %ENDIF;
      105+     667
      106+     668        %EQU MODI       =  17; /* '0021'O         mod(lop,rop) tyi          */
      107+     669                               %IF INITIALIZE AND PHASE = 6;
      109+     671                               %ENDIF;
      110+     672
      111+     673        %EQU ASC_BIN    =  18; /* '0022'O         convert tya(pic x) => tyi */
      112+     674                               %IF INITIALIZE AND PHASE = 6;
      114+     676                               %ENDIF;
      115+     677
      116+     678        %EQU CVIK       =  19; /* '0023'O         convert tyi ==> tyk       */
      117+     679                               %IF INITIALIZE AND PHASE = 6;
      119+     681                               %ENDIF;
      120+     682
      121+     683        %EQU CVKI       =  20; /* '0024'O         convert tyk ==> tyi       */
      122+     684                               %IF INITIALIZE AND PHASE = 6;
      124+     686                               %ENDIF;
      125+     687
      126+     688        %EQU CFILL      =  21; /* '0025'O         compare alphanumeric to a */
      127+     689                               %IF INITIALIZE AND PHASE = 6; /*        fill character     */
      129+     691                               %ENDIF;
      130+     692
      131+     693        %EQU CVDDD      =  22; /* '0026'O         convert decimal to        */
      132+     694                               %IF INITIALIZE AND PHASE = 6; /* decimal with de-editing   */
      134+     696                               %ENDIF;
      135+     697
      136+     698        %EQU SBCHK      =  23; /* '0027'O         subscript check           */
      137+     699                               %IF INITIALIZE AND PHASE = 6;
      139+     701                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:22   
      140+     702
      141+     703        %EQU OCCHK      =  24; /* '0030'O         occurs depending check    */
      142+     704                               %IF INITIALIZE AND PHASE = 6;
      144+     706                               %ENDIF;
      145+     707
      146+     708        %EQU CMGR       =  25; /* '0031'O         compare magnitude tyr     */
      147+     709                               %IF INITIALIZE AND PHASE = 6;
      149+     711                               %ENDIF;
      150+     712
      151+     713        %EQU CMGQ       =  26; /* '0032'O         compare magnitude tyq     */
      152+     714                               %IF INITIALIZE AND PHASE = 6;
      154+     716                               %ENDIF;
      155+     717
      156+     718        %EQU CMPQ       =  27; /* '0033'O         compare real tyq lop:rop  */
      157+     719                               %IF INITIALIZE AND PHASE = 6;
      159+     721                               %ENDIF;
      160+     722
      161+     723        %EQU ANDI       =  28; /* '0034'O         and rop & lop together    */
      162+     724                               %IF INITIALIZE AND PHASE = 6;
      164+     726                               %ENDIF;
      165+     727
      166+     728        %EQU CVIH       =  29; /* '0035'O         convert tyi ==> tyh       */
      167+     729                               %IF INITIALIZE AND PHASE = 6; /*        (unused)           */
      169+     731                               %ENDIF;
      170+     732
      171+     733        %EQU CVID9      =  30; /* '0036'O         convert tyi ==> tyd 9-bit */
      172+     734                               %IF INITIALIZE AND PHASE = 6;
      174+     736                               %ENDIF;
      175+     737
      176+     738        %EQU CVDSF      =  31; /* '0037'O         convert tyd ==> tyd       */
      177+     739                               %IF INITIALIZE AND PHASE = 6; /* without scale factor      */
      179+     741                               %ENDIF;
      180+     742
      181+     743        %EQU RNDQ       =  32; /* '0040'O         round double prec. real   */
      182+     744                               %IF INITIALIZE AND PHASE = 6;
      184+     746                               %ENDIF;
      185+     747
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:23   
      186+     748        %EQU EXRR       =  33; /* '0041'O         exponentiation: R ** R    */
      187+     749                               %IF INITIALIZE AND PHASE = 6;
      189+     751                               %ENDIF;
      190+     752
      191+     753        %EQU EXRI       =  34; /* '0042'O         exponentiation: R ** I    */
      192+     754                               %IF INITIALIZE AND PHASE = 6;
      194+     756                               %ENDIF;
      195+     757
      196+     758        %EQU EXQQ       =  35; /* '0043'O         exponentiation: Q ** Q    */
      197+     759                               %IF INITIALIZE AND PHASE = 6;
      199+     761                               %ENDIF;
      200+     762
      201+     763        %EQU EXQI       =  36; /* '0044'O         exponentiation: Q ** I    */
      202+     764                               %IF INITIALIZE AND PHASE = 6;
      204+     766                               %ENDIF;
      205+     767
      206+     768        %EQU ADQ        =  37; /* '0045'O         adq double precision      */
      207+     769                               %IF INITIALIZE AND PHASE = 6;
      209+     771                               %ENDIF;
      210+     772
      211+     773        %EQU SBQ        =  38; /* '0046'O         sbq double precision      */
      212+     774                               %IF INITIALIZE AND PHASE = 6;
      214+     776                               %ENDIF;
      215+     777
      216+     778        %EQU MPQ        =  39; /* '0047'O         mpq double precision      */
      217+     779                               %IF INITIALIZE AND PHASE = 6;
      219+     781                               %ENDIF;
      220+     782
      221+     783        %EQU DVQ        =  40; /* '0050'O         dvq double precision      */
      222+     784                               %IF INITIALIZE AND PHASE = 6;
      224+     786                               %ENDIF;
      225+     787
      226+     788        %EQU USQ        =  41; /* '0051'O         usq double precision      */
      227+     789                               %IF INITIALIZE AND PHASE = 6;
      229+     791                               %ENDIF;
      230+     792
      231+     793        %EQU MPI2       =  42; /* '0052'O         mp2i integer: lop to      */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:24   
      232+     794                               %IF INITIALIZE AND PHASE = 6; /*      power of 2           */
      234+     796                               %ENDIF;
      235+     797
      236+     798        %EQU ADD        =  43; /* '0053'O         add decimal: lop + rop    */
      237+     799                               %IF INITIALIZE AND PHASE = 6;
      239+     801                               %ENDIF;
      240+     802
      241+     803        %EQU ADI        =  44; /* '0054'O         add integer: lop + rop    */
      242+     804                               %IF INITIALIZE AND PHASE = 6;
      244+     806                               %ENDIF;
      245+     807
      246+     808        %EQU SBD        =  45; /* '0055'O         subtract decimal: lop-rop */
      247+     809                               %IF INITIALIZE AND PHASE = 6;
      249+     811                               %ENDIF;
      250+     812
      251+     813        %EQU SBI        =  46; /* '0056'O         subtract integer: lop-rop */
      252+     814                               %IF INITIALIZE AND PHASE = 6;
      254+     816                               %ENDIF;
      255+     817
      256+     818        %EQU MPD        =  47; /* '0057'O         multiply decimal: lop*rop */
      257+     819                               %IF INITIALIZE AND PHASE = 6;
      259+     821                               %ENDIF;
      260+     822
      261+     823        %EQU MPI        =  48; /* '0060'O         multiply integer: lop*rop */
      262+     824                               %IF INITIALIZE AND PHASE = 6;
      264+     826                               %ENDIF;
      265+     827
      266+     828        %EQU DVD        =  49; /* '0061'O         divide   decimal: lop/rop */
      267+     829                               %IF INITIALIZE AND PHASE = 6;
      269+     831                               %ENDIF;
      270+     832
      271+     833        %EQU DVI        =  50; /* '0062'O         divide   decimal: lop/rop */
      272+     834                               %IF INITIALIZE AND PHASE = 6;
      274+     836                               %ENDIF;
      275+     837
      276+     838        %EQU DVDR       =  51; /* '0063'O         divide decimal rounded    */
      277+     839                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:25   
      279+     841                               %ENDIF;
      280+     842
      281+     843        %EQU EXDIO      =  52; /* '0064'O         inline exponentiation:    */
      282+     844                               %IF INITIALIZE AND PHASE = 6; /*       D ** I              */
      284+     846                               %ENDIF;
      285+     847
      286+     848        %EQU USD        =  53; /* '0065'O         unary subtract decimal    */
      287+     849                               %IF INITIALIZE AND PHASE = 6;
      289+     851                               %ENDIF;
      290+     852
      291+     853        %EQU USI        =  54; /* '0066'O         unary subtract integer    */
      292+     854                               %IF INITIALIZE AND PHASE = 6;
      294+     856                               %ENDIF;
      295+     857
      296+     858        %EQU ADR        =  55; /* '0067'O         add real: lop + rop       */
      297+     859                               %IF INITIALIZE AND PHASE = 6;
      299+     861                               %ENDIF;
      300+     862
      301+     863        %EQU SBR        =  56; /* '0070'O         subtract real: lop - rop  */
      302+     864                               %IF INITIALIZE AND PHASE = 6;
      304+     866                               %ENDIF;
      305+     867
      306+     868        %EQU MPR        =  57; /* '0071'O         multiply real: lop * rop  */
      307+     869                               %IF INITIALIZE AND PHASE = 6;
      309+     871                               %ENDIF;
      310+     872
      311+     873        %EQU DVR        =  58; /* '0072'O         divide real: lop / rop    */
      312+     874                               %IF INITIALIZE AND PHASE = 6;
      314+     876                               %ENDIF;
      315+     877
      316+     878        %EQU USR        =  59; /* '0073'O         unary subtract:  - lop    */
      317+     879                               %IF INITIALIZE AND PHASE = 6;
      319+     881                               %ENDIF;
      320+     882
      321+     883        %EQU CVDO       =  60; /* '0074'O         convert tyd ==> tyo       */
      322+     884                               %IF INITIALIZE AND PHASE = 6;
      324+     886                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:26   
      325+     887
      326+     888        %EQU EXII       =  61; /* '0075'O         exponentiation: I ** I    */
      327+     889                               %IF INITIALIZE AND PHASE = 6;
      329+     891                               %ENDIF;
      330+     892
      331+     893        %EQU EXDI       =  62; /* '0076'O         exponentiation: D ** I    */
      332+     894                               %IF INITIALIZE AND PHASE = 6;
      334+     896                               %ENDIF;
      335+     897
      336+     898        %EQU EXDD       =  63; /* '0077'O         exponentiation: D ** D    */
      337+     899                               %IF INITIALIZE AND PHASE = 6;
      339+     901                               %ENDIF;
      340+     902
      341+     903        %EQU CVII       =  64; /* '0100'O         move integer to int. temp */
      342+     904                               %IF INITIALIZE AND PHASE = 6;
      344+     906                               %ENDIF;
      345+     907
      346+     908        %EQU CVDD       =  65; /* '0101'O         move decimal to dec. temp */
      347+     909                               %IF INITIALIZE AND PHASE = 6;
      349+     911                               %ENDIF;
      350+     912
      351+     913        %EQU RNDD       =  66; /* '0102'O         move dec to dec temp round*/
      352+     914                               %IF INITIALIZE AND PHASE = 6;
      354+     916                               %ENDIF;
      355+     917
      356+     918        %EQU CVRR       =  67; /* '0103'O         move real to real         */
      357+     919                               %IF INITIALIZE AND PHASE = 6;
      359+     921                               %ENDIF;
      360+     922
      361+     923        %EQU RNDR       =  68; /* '0104'O         round single prec real    */
      362+     924                               %IF INITIALIZE AND PHASE = 6;
      364+     926                               %ENDIF;
      365+     927
      366+     928        %EQU TRN        =  69; /* '0105'O         truncate                  */
      367+     929                               %IF INITIALIZE AND PHASE = 6;
      369+     931                               %ENDIF;
      370+     932
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:27   
      371+     933        %EQU CMPI       =  70; /* '0106'O         compare integer lop : rop */
      372+     934                               %IF INITIALIZE AND PHASE = 6;
      374+     936                               %ENDIF;
      375+     937
      376+     938        %EQU CMPD       =  71; /* '0107'O         compare decimal lop : rop */
      377+     939                               %IF INITIALIZE AND PHASE = 6;
      379+     941                               %ENDIF;
      380+     942
      381+     943        %EQU CMPC       =  72; /* '0110'O         compare class             */
      382+     944                               %IF INITIALIZE AND PHASE = 6;
      384+     946                               %ENDIF;
      385+     947
      386+     948        %EQU CMPA       =  73; /* '0111'O         compare alphanumeric      */
      387+     949                               %IF INITIALIZE AND PHASE = 6;
      389+     951                               %ENDIF;
      390+     952
      391+     953        %EQU CMPR       =  74; /* '0112'O         compare real  lop : rop   */
      392+     954                               %IF INITIALIZE AND PHASE = 6;
      394+     956                               %ENDIF;
      395+     957
      396+     958        %EQU CMGP       =  75; /* '0113'O         compare go pointer */
      397+     959                               %IF INITIALIZE AND PHASE = 6;
      399+     961                               %ENDIF;
      400+     962
      401+     963        %EQU DVI2       =  76; /* '0114'O         divide integer power of 2 */
      402+     964                               %IF INITIALIZE AND PHASE = 6;
      404+     966                               %ENDIF;
      405+     967
      406+     968        %EQU CVT        =  77; /* '0115'O         convert & transliterate   */
      407+     969                               %IF INITIALIZE AND PHASE = 6;
      409+     971                               %ENDIF;
      410+     972
      411+     973        %EQU CMPAA      =  78; /* '0116'O         compare alphanumeric all  */
      412+     974                               %IF INITIALIZE AND PHASE = 6;
      414+     976                               %ENDIF;
      415+     977
      416+     978        %EQU CMEE       =  79; /* '0117'O         compare 2-words even even */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:28   
      417+     979                               %IF INITIALIZE AND PHASE = 6;
      419+     981                               %ENDIF;
      420+     982
      421+     983        %EQU CMOE       =  80; /* '0120'O         compare 2-words odd  even */
      422+     984                               %IF INITIALIZE AND PHASE = 6;
      424+     986                               %ENDIF;
      425+     987
      426+     988        %EQU CMPAO      =  81; /* '0121'O         compare alpha optimized   */
      427+     989                               %IF INITIALIZE AND PHASE = 6;
      429+     991                               %ENDIF;
      430+     992
      431+     993        %EQU CMPAS      =  82; /* '0122'O         compare alpha supplement  */
      432+     994                               %IF INITIALIZE AND PHASE = 6;
      434+     996                               %ENDIF;
      435+     997
      436+     998        %EQU CMGI       =  83; /* '0123'O         compare magnitude tyi     */
      437+     999                               %IF INITIALIZE AND PHASE = 6;
      439+    1001                               %ENDIF;
      440+    1002
      441+    1003        %EQU CVAA       =  84; /* '0124'O         move alphanumeric to      */
      442+    1004                               %IF INITIALIZE AND PHASE = 6; /*      alphanumeric temp    */
      444+    1006                               %ENDIF;
      445+    1007
      446+    1008        %EQU CV49       =  85; /* '0125'O         convert 4-bit to 9-bit    */
      447+    1009                               %IF INITIALIZE AND PHASE = 6;
      449+    1011                               %ENDIF;
      450+    1012
      451+    1013        %EQU CVID4      =  86; /* '0126'O         convert integer to decimal*/
      452+    1014                               %IF INITIALIZE AND PHASE = 6;
      454+    1016                               %ENDIF;
      455+    1017
      456+    1018        %EQU CVOD4      =  87; /* '0127'O         convert overpunched to    */
      457+    1019                               %IF INITIALIZE AND PHASE = 6; /*         decimal           */
      459+    1021                               %ENDIF;
      460+    1022
      461+    1023        %EQU CVRD4      =  88; /* '0130'O         convert real to decimal   */
      462+    1024                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:29   
      464+    1026                               %ENDIF;
      465+    1027
      466+    1028        %EQU CVQD4      =  89; /* '0131'O         convert double precision  */
      467+    1029                               %IF INITIALIZE AND PHASE = 6; /*       real to decimal     */
      469+    1031                               %ENDIF;
      470+    1032
      471+    1033        %EQU CVDI       =  90; /* '0132'O         convert decimal to integer*/
      472+    1034                               %IF INITIALIZE AND PHASE = 6;
      474+    1036                               %ENDIF;
      475+    1037
      476+    1038        %EQU CVJI       =  91; /* '0133'O         convert 16/32 to integer  */
      477+    1039                               %IF INITIALIZE AND PHASE = 6;
      479+    1041                               %ENDIF;
      480+    1042
      481+    1043        %EQU CVHI       =  92; /* '0134'O         convert comp-7 to integer */
      482+    1044                               %IF INITIALIZE AND PHASE = 6;
      484+    1046                               %ENDIF;
      485+    1047
      486+    1048        %EQU CVRI       =  93; /* '0135'O         convert real to integer   */
      487+    1049                               %IF INITIALIZE AND PHASE = 6;
      489+    1051                               %ENDIF;
      490+    1052
      491+    1053        %EQU CVQI       =  94; /* '0136'O         convert double-real to int*/
      492+    1054                               %IF INITIALIZE AND PHASE = 6;
      494+    1056                               %ENDIF;
      495+    1057
      496+    1058        %EQU CVDRR      =  95; /* '0137'O         convert decimal to real   */
      497+    1059                               %IF INITIALIZE AND PHASE = 6;
      499+    1061                               %ENDIF;
      500+    1062
      501+    1063        %EQU CVIR       =  96; /* '0140'O         convert integer to real   */
      502+    1064                               %IF INITIALIZE AND PHASE = 6;
      504+    1066                               %ENDIF;
      505+    1067
      506+    1068        %EQU CVQR       =  97; /* '0141'O         convert double-real to    */
      507+    1069                               %IF INITIALIZE AND PHASE = 6; /*         real              */
      509+    1071                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:30   
      510+    1072
      511+    1073        %EQU CVDQR      =  98; /* '0142'O         convert dec to double real*/
      512+    1074                               %IF INITIALIZE AND PHASE = 6;
      514+    1076                               %ENDIF;
      515+    1077
      516+    1078        %EQU CVIQ       =  99; /* '0143'O         convert int to double-real*/
      517+    1079                               %IF INITIALIZE AND PHASE = 6;
      519+    1081                               %ENDIF;
      520+    1082
      521+    1083        %EQU CVRQ       = 100; /* '0144'O         convert real  double-real */
      522+    1084                               %IF INITIALIZE AND PHASE = 6;
      524+    1086                               %ENDIF;
      525+    1087
      526+    1088        %EQU CVIJ       = 101; /* '0145'O         convert tyi to tyj        */
      527+    1089                               %IF INITIALIZE AND PHASE = 6;
      529+    1091                               %ENDIF;
      530+    1092
      531+    1093        %EQU ORI        = 102; /* '0146'O         or lop & rop together     */
      532+    1094                               %IF INITIALIZE AND PHASE = 6;
      534+    1096                               %ENDIF;
      535+    1097
      536+    1098        %EQU CVOD9      = 103; /* '0147'O         convert tyo to 9-bit      */
      537+    1099                               %IF INITIALIZE AND PHASE = 6;
      539+    1101                               %ENDIF;
      540+    1102
      541+    1103        %EQU CVQD9      = 104; /* '0150'O         convert tyq to 9-bit tyd  */
      542+    1104                               %IF INITIALIZE AND PHASE = 6;
      544+    1106                               %ENDIF;
      545+    1107
      546+    1108        %EQU CVRD9      = 105; /* '0151'O         convert tyr to 9-bit tyd  */
      547+    1109                               %IF INITIALIZE AND PHASE = 6;
      549+    1111                               %ENDIF;
      550+    1112
      551+    1113        %EQU INDEX      = 106; /* '0152'O         index primitive           */
      552+    1114                               %IF INITIALIZE AND PHASE = 6;
      554+    1116                               %ENDIF;
      555+    1117
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:31   
      556+    1118        %EQU MINI       = 107; /* '0153'O         minimum integer primitive */
      557+    1119                               %IF INITIALIZE AND PHASE = 6;
      559+    1121                               %ENDIF;
      560+    1122
      561+    1123        %EQU MIND       = 108; /* '0154'O         minimum decimal primitive */
      562+    1124                               %IF INITIALIZE AND PHASE = 6;
      564+    1126                               %ENDIF;
      565+    1127
      566+    1128        %EQU MINR       = 109; /* '0155'O         minimum real primitive    */
      567+    1129                               %IF INITIALIZE AND PHASE = 6;
      569+    1131                               %ENDIF;
      570+    1132
      571+    1133        %EQU MINQ       = 110; /* '0156'O         minimum double primitive  */
      572+    1134                               %IF INITIALIZE AND PHASE = 6;
      574+    1136                               %ENDIF;
      575+    1137
      576+    1138        %EQU BIN_ASC    = 111; /* '0157'O         convert binary to         */
      577+    1139                               %IF INITIALIZE AND PHASE = 6; /*         tya ( pic x )     */
      579+    1141                               %ENDIF;
      580+    1142
      581+    1143        %EQU CFILLR     = 112; /* '0160'O         compare alphanumeric to   */
      582+    1144                               %IF INITIALIZE AND PHASE = 6; /*       a fill character    */
      584+    1146                               %ENDIF;
      585+    1147
      586+    1148        %EQU SHIFT_L    = 113; /* '0161'O         shift lop left ropcon bits*/
      587+    1149                               %IF INITIALIZE AND PHASE = 6;
      589+    1151                               %ENDIF;
      590+    1152
      591+    1153        %EQU SHIFT_R    = 114; /* '0162'O         shift lop right (rop) bits*/
      592+    1154                               %IF INITIALIZE AND PHASE = 6;
      594+    1156                               %ENDIF;
      595+    1157
      596+    1158        %EQU ADO        = 115; /* '0163'O         add overpunch: lop + rop  */
      597+    1159                               %IF INITIALIZE AND PHASE = 6;
      599+    1161                               %ENDIF;
      600+    1162
      601+    1163        %EQU SBO        = 116; /* '0164'O         subtract overpunch lop-rop*/
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:32   
      602+    1164                               %IF INITIALIZE AND PHASE = 6;
      604+    1166                               %ENDIF;
      605+    1167
      606+    1168        %EQU MPO        = 117; /* '0165'O         divide overpunch: lop/rop */
      607+    1169                               %IF INITIALIZE AND PHASE = 6;
      609+    1171                               %ENDIF;
      610+    1172
      611+    1173        %EQU DVO        = 118; /* '0166'O         divide overpunch: lop/rop */
      612+    1174                               %IF INITIALIZE AND PHASE = 6;
      614+    1176                               %ENDIF;
      615+    1177
      616+    1178        %EQU DVOR       = 119; /* '0167'O         divide overpunch: lop/rop */
      617+    1179                               %IF INITIALIZE AND PHASE = 6; /*        rounded            */
      619+    1181                               %ENDIF;
      620+    1182
      621+    1183        %EQU CMPO       = 120; /* '0170'O         compare overpunch: lop:rop*/
      622+    1184                               %IF INITIALIZE AND PHASE = 6;
      624+    1186                               %ENDIF;
      625+    1187
      626+    1188        %EQU EVAL       = 121; /* '0171'O         evaluate non-optimized triad */
      627+    1189                               %IF INITIALIZE AND PHASE = 6;
      629+    1191                               %ENDIF;
      630+    1192
      631+    1193        %EQU USO        = 122; /* '0172'O         unary subtract:  - lop */
      632+    1194                               %IF INITIALIZE AND PHASE = 6;
      634+    1196                               %ENDIF;
      635+    1197
      636+    1198        %EQU MINO       = 123; /* '0173'O         minimum overpunched primitive */
      637+    1199                               %IF INITIALIZE AND PHASE = 6;
      639+    1201                               %ENDIF;
      640+    1202
      641+    1203        %EQU RNDO       = 124; /* '0174'O         Round overpunched */
      642+    1204                               %IF INITIALIZE AND PHASE = 6;
      644+    1206                               %ENDIF;
      645+    1207
      646+    1208        %EQU ADDR       = 125; /* '0175'O   address triad                 */
      647+    1209                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:33   
      649+    1211                               %ENDIF;
      650+    1212
      651+    1213        %EQU AUTO       = 126; /* '0176'O   auto storage item       */
      652+    1214                               %IF INITIALIZE AND PHASE = 6;
      654+    1216                               %ENDIF;
      655+    1217
      656+    1218        %EQU CMK        = 127; /* '0177'O   compare masked                */
      657+    1219                               %IF INITIALIZE AND PHASE = 6;
      659+    1221                               %ENDIF;
      660+    1222
      661+    1223        %EQU CMK1       = 128; /* '0200'O   compare masked, mask    */
      662+    1224                               %IF INITIALIZE AND PHASE = 6;
      664+    1226                               %ENDIF;
      665+    1227
      666+    1228        %EQU CMPT       = 129; /* '0201'O   compare with translation */
      667+    1229                               %IF INITIALIZE AND PHASE = 6;
      669+    1231                               %ENDIF;
      670+    1232
      671+    1233        %EQU LAST_ETT   = 129; /* '0201'O       update as items are added.*/
      672+    1234
      673+    1235        /*------------------------------------------------------------------*
      674+    1236                     Room for item(s) here
      675+    1237         *------------------------------------------------------------------*/
      676+    1238
      677+    1239                               %IF INITIALIZE AND PHASE = 6;
      679+    1241                               %ENDIF;
      680+    1242        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:34   
      681+    1243        %EQU FIRST_ILL  = 150; /* '0226'O         update as items are added.*/
      682+    1244
      683+    1245        %EQU AD2D       = 150; /* '0226'O         lop = lop + rop           */
      684+    1246                               %IF INITIALIZE AND PHASE = 6;
      686+    1248                               %ENDIF;
      687+    1249
      688+    1250        %EQU AD2DR      = 151; /* '0227'O         lop = lop + rop rounded   */
      689+    1251                               %IF INITIALIZE AND PHASE = 6;
      691+    1253                               %ENDIF;
      692+    1254
      693+    1255        %EQU AD2I       = 152; /* '0230'O         lop = lop + rop comp-6    */
      694+    1256                               %IF INITIALIZE AND PHASE = 6;
      696+    1258                               %ENDIF;
      697+    1259
      698+    1260        %EQU SB2D       = 153; /* '0231'O         lop = lop - rop decimal   */
      699+    1261                               %IF INITIALIZE AND PHASE = 6;
      701+    1263                               %ENDIF;
      702+    1264
      703+    1265        %EQU SB2DR      = 154; /* '0232'O         lop = lop - rop rounded   */
      704+    1266                               %IF INITIALIZE AND PHASE = 6;
      706+    1268                               %ENDIF;
      707+    1269
      708+    1270        %EQU SB2I       = 155; /* '0233'O         lop = lop - rop  comp-6   */
      709+    1271                               %IF INITIALIZE AND PHASE = 6;
      711+    1273                               %ENDIF;
      712+    1274
      713+    1275        %EQU MP2D       = 156; /* '0234'O         lop = lop * rop decimal   */
      714+    1276                               %IF INITIALIZE AND PHASE = 6;
      716+    1278                               %ENDIF;
      717+    1279
      718+    1280        %EQU MP2DR      = 157; /* '0235'O         lop = lop * rop rounded   */
      719+    1281                               %IF INITIALIZE AND PHASE = 6;
      721+    1283                               %ENDIF;
      722+    1284
      723+    1285        %EQU MP2I       = 158; /* '0236'O         lop = lop * rop comp-6    */
      724+    1286                               %IF INITIALIZE AND PHASE = 6;
      726+    1288                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:35   
      727+    1289
      728+    1290        %EQU DV2D       = 159; /* '0237'O         lop = lop / rop  decimal  */
      729+    1291                               %IF INITIALIZE AND PHASE = 6;
      731+    1293                               %ENDIF;
      732+    1294
      733+    1295        %EQU DV2DR      = 160; /* '0240'O         lop = lop / rop  rounded  */
      734+    1296                               %IF INITIALIZE AND PHASE = 6;
      736+    1298                               %ENDIF;
      737+    1299
      738+    1300        %EQU DV2I       = 161; /* '0241'O         lop = lop / rop  comp-6   */
      739+    1301                               %IF INITIALIZE AND PHASE = 6;
      741+    1303                               %ENDIF;
      742+    1304
      743+    1305        %EQU DV2IR      = 162; /* '0242'O         lop = lop / rop rounded   */
      744+    1306                               %IF INITIALIZE AND PHASE = 6;
      746+    1308                               %ENDIF;
      747+    1309
      748+    1310        %EQU MVDD       = 163; /* '0243'O         lop = rop        decimal  */
      749+    1311                               %IF INITIALIZE AND PHASE = 6;
      751+    1313                               %ENDIF;
      752+    1314
      753+    1315        %EQU MVDDR      = 164; /* '0244'O         lop = rop        rounded  */
      754+    1316                               %IF INITIALIZE AND PHASE = 6;
      756+    1318                               %ENDIF;
      757+    1319
      758+    1320        %EQU MVII       = 165; /* '0245'O         lop = rop        comp-6   */
      759+    1321                               %IF INITIALIZE AND PHASE = 6;
      761+    1323                               %ENDIF;
      762+    1324
      763+    1325        %EQU MVRR       = 166; /* '0246'O         lop = rop real  (comp-13) */
      764+    1326                               %IF INITIALIZE AND PHASE = 6;
      766+    1328                               %ENDIF;
      767+    1329
      768+    1330        %EQU MVQQ       = 167; /* '0247'O         lop = rop d.p.  (comp-14) */
      769+    1331                               %IF INITIALIZE AND PHASE = 6;
      771+    1333                               %ENDIF;
      772+    1334
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:36   
      773+    1335        %EQU MVRL       = 168; /* '0250'O         lop = rop right-to-left   */
      774+    1336                               %IF INITIALIZE AND PHASE = 6;
      776+    1338                               %ENDIF;
      777+    1339
      778+    1340        %EQU MVHH       = 169; /* '0251'O                   half word       */
      779+    1341                               %IF INITIALIZE AND PHASE = 6;
      781+    1343                               %ENDIF;
      782+    1344
      783+    1345        %EQU MVID       = 170; /* '0252'O         comp-6 = decimal          */
      784+    1346                               %IF INITIALIZE AND PHASE = 6;
      786+    1348                               %ENDIF;
      787+    1349
      788+    1350        %EQU MVIH       = 171; /* '0253'O         comp-6 = half word        */
      789+    1351                               %IF INITIALIZE AND PHASE = 6;
      791+    1353                               %ENDIF;
      792+    1354
      793+    1355        %EQU MVAN       = 172; /* '0254'O         lop = rop  alphanumeric   */
      794+    1356                               %IF INITIALIZE AND PHASE = 6;
      796+    1358                               %ENDIF;
      797+    1359
      798+    1360        %EQU MVANO      = 173; /* '0255'O         Mvan optimized            */
      799+    1361                               %IF INITIALIZE AND PHASE = 6;
      801+    1363                               %ENDIF;
      802+    1364
      803+    1365        %EQU MVIJ       = 174; /* '0256'O         comp-6 = comp-1 or comp-2 */
      804+    1366                               %IF INITIALIZE AND PHASE = 6;
      806+    1368                               %ENDIF;
      807+    1369
      808+    1370        %EQU MVOD       = 175; /* '0257'O         overpunched = decimal     */
      809+    1371                               %IF INITIALIZE AND PHASE = 6;
      811+    1373                               %ENDIF;
      812+    1374
      813+    1375        %EQU MVQD       = 176; /* '0260'O         double-prec = decimal     */
      814+    1376                               %IF INITIALIZE AND PHASE = 6;
      816+    1378                               %ENDIF;
      817+    1379
      818+    1380        %EQU MVRD       = 177; /* '0261'O         real = decimal            */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:37   
      819+    1381                               %IF INITIALIZE AND PHASE = 6;
      821+    1383                               %ENDIF;
      822+    1384
      823+    1385        %EQU MVJJ       = 178; /* '0262'O         lop = rop  comp-1         */
      824+    1386                               %IF INITIALIZE AND PHASE = 6;
      826+    1388                               %ENDIF;
      827+    1389
      828+    1390        %EQU MVDO       = 179; /* '0263'O         decimal = overpunched     */
      829+    1391                               %IF INITIALIZE AND PHASE = 6;
      831+    1393                               %ENDIF;
      832+    1394
      833+    1395        %EQU MVDQ       = 180; /* '0264'O         decimal = double real     */
      834+    1396                               %IF INITIALIZE AND PHASE = 6;
      836+    1398                               %ENDIF;
      837+    1399
      838+    1400        %EQU MVDR       = 181; /* '0265'O         decimal = real            */
      839+    1401                               %IF INITIALIZE AND PHASE = 6;
      841+    1403                               %ENDIF;
      842+    1404
      843+    1405        %EQU MVDI       = 182; /* '0266'O         decimal = comp-6          */
      844+    1406                               %IF INITIALIZE AND PHASE = 6;
      846+    1408                               %ENDIF;
      847+    1409
      848+    1410        %EQU MVKK       = 183; /* '0267'O         lop = rop comp-2          */
      849+    1411                               %IF INITIALIZE AND PHASE = 6;
      851+    1413                               %ENDIF;
      852+    1414
      853+    1415        %EQU MFILL      = 184; /* '0270'O         alpha = fill character    */
      854+    1416                               %IF INITIALIZE AND PHASE = 6;
      856+    1418                               %ENDIF;
      857+    1419
      858+    1420        %EQU MVIK       = 185; /* '0271'O         move tyi ==> tyk          */
      859+    1421                               %IF INITIALIZE AND PHASE = 6;
      861+    1423                               %ENDIF;
      862+    1424
      863+    1425        %EQU MVKI       = 186; /* '0272'O        move tyk ==> tyi          */
      864+    1426                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:38   
      866+    1428                               %ENDIF;
      867+    1429
      868+    1430        %EQU MVJI       = 187; /* '0273'O        move tyj ==> tyi          */
      869+    1431                               %IF INITIALIZE AND PHASE = 6;
      871+    1433                               %ENDIF;
      872+    1434
      873+    1435        %EQU PINC       = 188; /* '0274'O        pointer increment         */
      874+    1436                               %IF INITIALIZE AND PHASE = 6;
      876+    1438                               %ENDIF;
      877+    1439
      878+    1440        %EQU MVPP       = 189; /* '0275'O        move typ ==> typ          */
      879+    1441                               %IF INITIALIZE AND PHASE = 6;
      881+    1443                               %ENDIF;
      882+    1444
      883+    1445        /*------------------------------------------------------------------*
      884+    1446                    Room  for  item(s)  here
      885+    1447         *------------------------------------------------------------------*/
      886+    1448
      887+    1449                               %IF INITIALIZE AND PHASE = 6;
      889+    1451                               %ENDIF;
      890+    1452
      891+    1453        %EQU REMEM     = 203;  /* '0313'O     Remember Argument            */
      892+    1454                               %IF INITIALIZE AND PHASE = 6;
      894+    1456                               %ENDIF;
      895+    1457        %EQU STP2      = 204;  /* '0314'O     STP2 to lop                   */
      896+    1458                               %IF INITIALIZE AND PHASE = 6;
      898+    1460                               %ENDIF;
      899+    1461
      900+    1462        %EQU MVDDD      = 205; /* '0315'O         to_ = lop  de-edited      */
      901+    1463                               %IF INITIALIZE AND PHASE = 6;
      903+    1465                               %ENDIF;
      904+    1466
      905+    1467        %EQU MVEAL      = 206; /* '0316'O         move edited alpha > 63    */
      906+    1468                               %IF INITIALIZE AND PHASE = 6;
      908+    1470                               %ENDIF;
      909+    1471
      910+    1472        %EQU MVEAN      = 207; /* '0317'O         move edited alphanumeric  */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:39   
      911+    1473                               %IF INITIALIZE AND PHASE = 6;
      913+    1475                               %ENDIF;
      914+    1476
      915+    1477        %EQU MVEDD      = 208; /* '0310'O         move edited decimal       */
      916+    1478                               %IF INITIALIZE AND PHASE = 6;
      918+    1480                               %ENDIF;
      919+    1481
      920+    1482        %EQU AD3D       = 209; /* '0321'O         to_ = lop + rop deciaml   */
      921+    1483                               %IF INITIALIZE AND PHASE = 6;
      923+    1485                               %ENDIF;
      924+    1486
      925+    1487        %EQU AD3DR      = 210; /* '0322'O         to_ = lop + rop rounded   */
      926+    1488                               %IF INITIALIZE AND PHASE = 6;
      928+    1490                               %ENDIF;
      929+    1491
      930+    1492        %EQU SB3D       = 211; /* '0323'O         to_ = lop - rop decimal   */
      931+    1493                               %IF INITIALIZE AND PHASE = 6;
      933+    1495                               %ENDIF;
      934+    1496
      935+    1497        %EQU SB3DR      = 212; /* '0324'O         to_ = lop - rop rounded   */
      936+    1498                               %IF INITIALIZE AND PHASE = 6;
      938+    1500                               %ENDIF;
      939+    1501
      940+    1502        %EQU MP3D       = 213; /* '0325'O         to_ = lop * rop  decimal  */
      941+    1503                               %IF INITIALIZE AND PHASE = 6;
      943+    1505                               %ENDIF;
      944+    1506
      945+    1507        %EQU MP3DR      = 214; /* '0326'O         to_ = lop * rop rounded   */
      946+    1508                               %IF INITIALIZE AND PHASE = 6;
      948+    1510                               %ENDIF;
      949+    1511
      950+    1512        %EQU DV3D       = 215; /* '0327'O         to_ = lop / rop deciaml   */
      951+    1513                               %IF INITIALIZE AND PHASE = 6;
      953+    1515                               %ENDIF;
      954+    1516
      955+    1517        %EQU DV3DR      = 216; /* '0330'O         to_ = lop / rop rounded   */
      956+    1518                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:40   
      958+    1520                               %ENDIF;
      959+    1521
      960+    1522                               %IF INITIALIZE AND PHASE = 6;
      962+    1524                               %ENDIF;
      963+    1525
      964+    1526        %EQU DV4I       = 218; /* '0332'O         to_ = lop/rop remainder   */
      965+    1527                               %IF INITIALIZE AND PHASE = 6;
      967+    1529                               %ENDIF;
      968+    1530
      969+    1531        /*------------------------------------------------------------------*
      970+    1532                    Room  for item(s)  here
      971+    1533         *------------------------------------------------------------------*/
      972+    1534
      973+    1535                               %IF INITIALIZE AND PHASE = 6;
      975+    1537                               %ENDIF;
      976+    1538
      977+    1539        %EQU P_P_PRESET = 222; /* '0336'O        PTR PTR Preset            */
      978+    1540                               %IF INITIALIZE AND PHASE = 6;
      980+    1542                               %ENDIF;
      981+    1543
      982+    1544        %EQU STOP       = 223; /* '0337'O         stop run                  */
      983+    1545                               %IF INITIALIZE AND PHASE = 6;
      985+    1547                               %ENDIF;
      986+    1548
      987+    1549        %EQU STOPL      = 224; /* '0340'O         stop literal              */
      988+    1550                               %IF INITIALIZE AND PHASE = 6;
      990+    1552                               %ENDIF;
      991+    1553
      992+    1554        %EQU EVALP      = 225; /* '0341'O         evaluate primary          */
      993+    1555                               %IF INITIALIZE AND PHASE = 6;
      995+    1557                               %ENDIF;
      996+    1558
      997+    1559        %EQU CCOSU      = 226; /* '0342'O         compute common subexpr.   */
      998+    1560                               %IF INITIALIZE AND PHASE = 6;
     1000+    1562                               %ENDIF;
     1001+    1563
     1002+    1564        %EQU PTR_SET    = 227; /* '0343'O         preset pointer            */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:41   
     1003+    1565                               %IF INITIALIZE AND PHASE = 6;
     1005+    1567                               %ENDIF;
     1006+    1568
     1007+    1569        %EQU GO         = 228; /* '0344'O         go to                     */
     1008+    1570                               %IF INITIALIZE AND PHASE = 6;
     1010+    1572                               %ENDIF;
     1011+    1573
     1012+    1574        %EQU MULTI_GO   = 229; /* '0345'O         Multi label go            */
     1013+    1575                               %IF INITIALIZE AND PHASE = 6;
     1015+    1577                               %ENDIF;
     1016+    1578
     1017+    1579        %EQU DEFLB      = 230; /* '0346'O         define label              */
     1018+    1580                               %IF INITIALIZE AND PHASE = 6;
     1020+    1582                               %ENDIF;
     1021+    1583
     1022+    1584        %EQU INITV      = 231; /* '0347'O         initialize value (dn#15)  */
     1023+    1585                               %IF INITIALIZE AND PHASE = 6;
     1025+    1587                               %ENDIF;
     1026+    1588
     1027+    1589        %EQU INCRV      = 232; /* '0350'O         increment value (dn#15)   */
     1028+    1590                               %IF INITIALIZE AND PHASE = 6;
     1030+    1592                               %ENDIF;
     1031+    1593
     1032+    1594                               %IF INITIALIZE AND PHASE = 6; /*  2 MORE HERE*/
     1034+    1596                               %ENDIF;
     1035+    1597
     1036+    1598        %EQU ENTRY      = 235; /* '0353'O         entry point               */
     1037+    1599                               %IF INITIALIZE AND PHASE = 6;
     1039+    1601                               %ENDIF;
     1040+    1602
     1041+    1603        %EQU ON_SWITCH  = 236; /* '0354'O         set switch on             */
     1042+    1604                               %IF INITIALIZE AND PHASE = 6;
     1044+    1606                               %ENDIF;
     1045+    1607
     1046+    1608        %EQU OFF_SWITCH = 237; /* '0355'O         set switch off            */
     1047+    1609                               %IF INITIALIZE AND PHASE = 6;
     1049+    1611                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:42   
     1050+    1612
     1051+    1613        %EQU GO_SUB     = 238; /* '0356'O         perform optimized         */
     1052+    1614                               %IF INITIALIZE AND PHASE = 6;
     1054+    1616                               %ENDIF;
     1055+    1617
     1056+    1618        %EQU SUB_ENTRY  = 239; /* '0357'O         perform entry             */
     1057+    1619                               %IF INITIALIZE AND PHASE = 6;
     1059+    1621                               %ENDIF;
     1060+    1622
     1061+    1623        %EQU SUB_END    = 240; /* '0360'O         perform exit              */
     1062+    1624                               %IF INITIALIZE AND PHASE = 6;
     1064+    1626                               %ENDIF;
     1065+    1627
     1066+    1628        %EQU SUB_PREP   = 241; /* '0361'O         perform fall thru         */
     1067+    1629                               %IF INITIALIZE AND PHASE = 6;
     1069+    1631                               %ENDIF;
     1070+    1632
     1071+    1633        %EQU OS_CALL    = 242; /* '0362'O         procedure call through    */
     1072+    1634                               %IF INITIALIZE AND PHASE = 6; /* the operator segment X9OS */
     1074+    1636                               %ENDIF;
     1075+    1637
     1076+    1638        %EQU USER_CALL  = 243; /* '0363'O         proc call to user routine */
     1077+    1639                               %IF INITIALIZE AND PHASE = 6;
     1079+    1641                               %ENDIF;
     1080+    1642
     1081+    1643        %EQU USE_ENTRY  = 244; /* '0364'O         USE section entry         */
     1082+    1644                               %IF INITIALIZE AND PHASE = 6;
     1084+    1646                               %ENDIF;
     1085+    1647
     1086+    1648        %EQU USE_END    = 245; /* '0365'O         USE section return        */
     1087+    1649                               %IF INITIALIZE AND PHASE = 6;
     1089+    1651                               %ENDIF;
     1090+    1652
     1091+    1653        %EQU EXIT_PROG  = 246; /* '0366'O         EXIT PROGRAM              */
     1092+    1654                               %IF INITIALIZE AND PHASE = 6;
     1094+    1656                               %ENDIF;
     1095+    1657
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:43   
     1096+    1658        %EQU VAL        = 247; /* '0367'O         VALue frozen              */
     1097+    1659                               %IF INITIALIZE AND PHASE = 6;
     1099+    1661                               %ENDIF;
     1100+    1662
     1101+    1663        %EQU VAL_END    = 248; /* '0370'O         VALue frozen END          */
     1102+    1664                               %IF INITIALIZE AND PHASE = 6;
     1104+    1666                               %ENDIF;
     1105+    1667
     1106+    1668        %EQU ACCEP      = 249; /* '0371'O         accept                    */
     1107+    1669                               %IF INITIALIZE AND PHASE = 6;
     1109+    1671                               %ENDIF;
     1110+    1672
     1111+    1673        %EQU DISPL      = 250; /* '0372'          display                   */
     1112+    1674                               %IF INITIALIZE AND PHASE = 6;
     1114+    1676                               %ENDIF;
     1115+    1677
     1116+    1678        %EQU LINOI      = 251; /* '0373'O         line number item          */
     1117+    1679                               %IF INITIALIZE AND PHASE = 6;
     1119+    1681                               %ENDIF;
     1120+    1682
     1121+    1683        %EQU END        = 252; /* '0374'O         end program               */
     1122+    1684                               %IF INITIALIZE AND PHASE = 6;
     1124+    1686                               %ENDIF;
     1125+    1687
     1126+    1688        %EQU DO1        = 253; /* '0375'O         in-line perform           */
     1127+    1689                               %IF INITIALIZE AND PHASE = 6;
     1129+    1691                               %ENDIF;
     1130+    1692
     1131+    1693        %EQU DO2        = 254; /* '0376'O                                   */
     1132+    1694                               %IF INITIALIZE AND PHASE = 6;
     1134+    1696                               %ENDIF;
     1135+    1697
     1136+    1698        %EQU DO3        = 255; /* '0377'O                                   */
     1137+    1699                               %IF INITIALIZE AND PHASE = 6;
     1139+    1701                               %ENDIF;
     1140+    1702
     1141+    1703        %EQU DO4        = 256; /* '0400'O                                   */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:44   
     1142+    1704                               %IF INITIALIZE AND PHASE = 6;
     1144+    1706                               %ENDIF;
     1145+    1707
     1146+    1708        %EQU DO5        = 257; /* '0401'O         in-line perform           */
     1147+    1709                               %IF INITIALIZE AND PHASE = 6;
     1149+    1711                               %ENDIF;
     1150+    1712
     1151+    1713        %EQU MVFIL      = 258; /* '0402'O         Move with fill */
     1152+    1714                               %IF INITIALIZE AND PHASE = 6;
     1154+    1716                               %ENDIF;
     1155+    1717
     1156+    1718        %EQU DOEND      = 259; /* '0403'O         end in-line perform       */
     1157+    1719                               %IF INITIALIZE AND PHASE = 6;
     1159+    1721                               %ENDIF;
     1160+    1722
     1161+    1723        %EQU PFORM      = 260; /* '0404'O         out-of-line perform       */
     1162+    1724                               %IF INITIALIZE AND PHASE = 6;
     1164+    1726                               %ENDIF;
     1165+    1727
     1166+    1728                               %IF INITIALIZE AND PHASE = 6; /*  2 MORE HERE*/
     1168+    1730                               %ENDIF;
     1169+    1731
     1170+    1732        %EQU EVALU      = 263; /* '407'O          evaluate statement        */
     1171+    1733                               %IF INITIALIZE AND PHASE = 6;
     1173+    1735                               %ENDIF;
     1174+    1736
     1175+    1737        %EQU WHEN       = 264; /* '0410'O         when sub-statement        */
     1176+    1738                               %IF INITIALIZE AND PHASE = 6;
     1178+    1740                               %ENDIF;
     1179+    1741
     1180+    1742        %EQU OR2I       = 265; /* '0411'O         lop = lop OR rop  comp-6  */
     1181+    1743                               %IF INITIALIZE AND PHASE = 6;
     1183+    1745                               %ENDIF;
     1184+    1746
     1185+    1747        %EQU ALTER      = 266; /* '0412'O         alter statement           */
     1186+    1748                               %IF INITIALIZE AND PHASE = 6;
     1188+    1750                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:45   
     1189+    1751
     1190+    1752        %EQU SEARCH     = 267; /* '0413'O         search primitive          */
     1191+    1753                               %IF INITIALIZE AND PHASE = 6;
     1193+    1755                               %ENDIF;
     1194+    1756
     1195+    1757        %EQU MVT        = 268; /* '0414'O         move and translate        */
     1196+    1758                               %IF INITIALIZE AND PHASE = 6;
     1198+    1760                               %ENDIF;
     1199+    1761
     1200+    1762        %EQU MVOOR      = 269; /* '0415'O         move overpunched rounded  */
     1201+    1763                               %IF INITIALIZE AND PHASE = 6;
     1203+    1765                               %ENDIF;
     1204+    1766
     1205+    1767        %EQU MVDOR      = 270; /* '0416'O         move dec to over rounded  */
     1206+    1768                               %IF INITIALIZE AND PHASE = 6;
     1208+    1770                               %ENDIF;
     1209+    1771
     1210+    1772        %EQU MVODR      = 271; /* '0417'O         move over to dec rounded  */
     1211+    1773                               %IF INITIALIZE AND PHASE = 6;
     1213+    1775                               %ENDIF;
     1214+    1776
     1215+    1777        %EQU PREOFF     = 272; /* '0420'O         Preset w/offset in words  */
     1216+    1778                               %IF INITIALIZE AND PHASE = 6;
     1218+    1780                               %ENDIF;
     1219+    1781
     1220+    1782        %EQU PEND       = 273; /* '0421'O         end of data divisions     */
     1221+    1783                               %IF INITIALIZE AND PHASE = 6; /*        presets            */
     1223+    1785                               %ENDIF;
     1224+    1786
     1225+    1787        %EQU PRESET     = 274; /* '0422'O         data preset               */
     1226+    1788                               %IF INITIALIZE AND PHASE = 6;
     1228+    1790                               %ENDIF;
     1229+    1791
     1230+    1792        %EQU MVOO       = 275; /* '0423'O         lop = rop overpunch       */
     1231+    1793                               %IF INITIALIZE AND PHASE = 6;
     1233+    1795                               %ENDIF;
     1234+    1796
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:46   
     1235+    1797        %EQU AD2O       = 276; /* '0424'O         lop = lop + rop overpunch */
     1236+    1798                               %IF INITIALIZE AND PHASE = 6;
     1238+    1800                               %ENDIF;
     1239+    1801
     1240+    1802        %EQU AD2OR      = 277; /* '0425'O         lop = lop + rop overpunch */
     1241+    1803                               %IF INITIALIZE AND PHASE = 6; /*             rounded       */
     1243+    1805                               %ENDIF;
     1244+    1806
     1245+    1807        %EQU AD3O       = 278; /* '0426'O         to_ = lop + rop overpunch */
     1246+    1808                               %IF INITIALIZE AND PHASE = 6;
     1248+    1810                               %ENDIF;
     1249+    1811
     1250+    1812        %EQU AD3OR      = 279; /* '0427'O         to_ = lop + rop overpunch */
     1251+    1813                               %IF INITIALIZE AND PHASE = 6; /*                 rounded   */
     1253+    1815                               %ENDIF;
     1254+    1816
     1255+    1817        %EQU MP2O       = 280; /* '0430'O         lop = lop * rop overpunch */
     1256+    1818                               %IF INITIALIZE AND PHASE = 6;
     1258+    1820                               %ENDIF;
     1259+    1821
     1260+    1822        %EQU MP2OR      = 281; /* '0431'O         lop = lop * rop overpunch */
     1261+    1823                               %IF INITIALIZE AND PHASE = 6; /*                 rounded   */
     1263+    1825                               %ENDIF;
     1264+    1826
     1265+    1827        %EQU MP3O       = 282; /* '0432'O         to_ = lop * rop overpunch */
     1266+    1828                               %IF INITIALIZE AND PHASE = 6;
     1268+    1830                               %ENDIF;
     1269+    1831
     1270+    1832        %EQU MP3OR      = 283; /* '0433'O         to_ = lop * rop overpunch */
     1271+    1833                               %IF INITIALIZE AND PHASE = 6; /*                 rounded   */
     1273+    1835                               %ENDIF;
     1274+    1836
     1275+    1837        %EQU DV2O       = 284; /* '0434'O         lop = lop / rop overpunch */
     1276+    1838                               %IF INITIALIZE AND PHASE = 6;
     1278+    1840                               %ENDIF;
     1279+    1841
     1280+    1842        %EQU DV2OR      = 285; /* '0435'O         lop = lop / rop overpunch */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:47   
     1281+    1843                               %IF INITIALIZE AND PHASE = 6; /*                 rounded   */
     1283+    1845                               %ENDIF;
     1284+    1846
     1285+    1847        %EQU DV3O       = 286; /* '0436'O         to_ = lop / rop overpunch */
     1286+    1848                               %IF INITIALIZE AND PHASE = 6;
     1288+    1850                               %ENDIF;
     1289+    1851
     1290+    1852        %EQU DV3OR      = 287; /* '0437'O         to_ = lop / rop overpunch */
     1291+    1853                               %IF INITIALIZE AND PHASE = 6; /*                 rounded   */
     1293+    1855                               %ENDIF;
     1294+    1856
     1295+    1857        %EQU SB2O       = 288; /* '0440'O         lop = lop - rop overpunch */
     1296+    1858                               %IF INITIALIZE AND PHASE = 6;
     1298+    1860                               %ENDIF;
     1299+    1861
     1300+    1862        %EQU SB2OR      = 289; /* '0441'O         lop = lop - rop overpunch */
     1301+    1863                               %IF INITIALIZE AND PHASE = 6; /*                 rounded   */
     1303+    1865                               %ENDIF;
     1304+    1866
     1305+    1867        %EQU SB3O       = 290; /* '0442'O         to_ = lop - rop overpunch */
     1306+    1868                               %IF INITIALIZE AND PHASE = 6;
     1308+    1870                               %ENDIF;
     1309+    1871
     1310+    1872        %EQU SB3OR      = 291; /* '0443'O         to_ = lop - rop overpunch */
     1311+    1873                               %IF INITIALIZE AND PHASE = 6; /*                 rounded   */
     1313+    1875                               %ENDIF;
     1314+    1876
     1315+    1877        %EQU END_PROG   = 292; /* '0444'O         similar to %EOD           */
     1316+    1878                                %IF INITIALIZE AND PHASE = 6;
     1318+    1880                                %ENDIF;
     1319+    1881        %EQU SCOPE      = 293; /* '0445'O         Defines begin of scope    */
     1320+    1882                                %IF INITIALIZE AND PHASE = 6;
     1322+    1884                                %ENDIF;
     1323+    1885
     1324+    1886        %EQU P_A_PRESET = 294; /* '0446'O        Pointer/Absolute preset   */
     1325+    1887                                %IF INITIALIZE AND PHASE = 6;
     1327+    1889                                %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:48   
     1328+    1890
     1329+    1891        %EQU LAST_ILL   = 294; /* '0446'O         Update as items are added */
     1330+    1892
     1331+    1893        /*-----------------------------------------------------------------*
     1332+    1894                   Room  for  more  item(s)  here
     1333+    1895         *------------------------------------------------------------------*/
     1334+    1896
     1335+    1897                               %IF INITIALIZE AND PHASE = 6;
     1337+    1899                               %ENDIF;
     1338+    1900        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:49   
     1339+    1901        %EQU FIRST_ILS  = 480; /* '0740'O         update as items are added */
     1340+    1902
     1341+    1903        %EQU OPN        = 480; /* '0740'O                                   */
     1342+    1904                               %IF INITIALIZE AND PHASE = 6;
     1344+    1906                               %ENDIF;
     1345+    1907
     1346+    1908        %EQU OPV        = 481; /* '0741'O                                   */
     1347+    1909                               %IF INITIALIZE AND PHASE = 6;
     1349+    1911                               %ENDIF;
     1350+    1912
     1351+    1913        %EQU OPA        = 482; /* '0742'O                                   */
     1352+    1914                               %IF INITIALIZE AND PHASE = 6;
     1354+    1916                               %ENDIF;
     1355+    1917
     1356+    1918        %EQU LAST_ILS   = 482; /* '0742'O         update as items are added */
     1357+    1919
     1358+    1920        %EJECT
     1359+    1921        %EQU DPI        = 483; /* '0743'O                                   */
     1360+    1922                               %IF INITIALIZE AND PHASE = 6;
     1362+    1924                               %ENDIF;
     1363+    1925
     1364+    1926                               %IF INITIALIZE AND PHASE = 6;
     1366+    1928                               %ENDIF;
     1367+    1929        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:50   
     1368+    1930        %EQU FIRST_ERR  = 488; /* '0750'O                                   */
     1369+    1931
     1370+    1932        %EQU ERROR      = 488; /* '0750'O                                   */
     1371+    1933                               %IF INITIALIZE AND PHASE = 6;
     1373+    1935                               %ENDIF;
     1374+    1936
     1375+    1937        %EQU LAST_ERR   = 488; /* '0750'O                                   */
     1376+    1938        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:51   
     1377+    1939        %EQU FIRST_ST   = 489; /* '0751'O                                   */
     1378+    1940
     1379+    1941        %EQU CSIB       = 489; /* '0751'O                                   */
     1380+    1942                               %IF INITIALIZE AND PHASE = 6;
     1382+    1944                               %ENDIF;
     1383+    1945
     1384+    1946        %EQU REALM      = 490; /* '0752'O                                   */
     1385+    1947                               %IF INITIALIZE AND PHASE = 6;
     1387+    1949                               %ENDIF;
     1388+    1950
     1389+    1951        %EQU DML_SET    = 491; /* '0753'O                                   */
     1390+    1952                               %IF INITIALIZE AND PHASE = 6;
     1392+    1954                               %ENDIF;
     1393+    1955
     1394+    1956        %EQU DML_KEY    = 492; /* '0754'O                                   */
     1395+    1957                               %IF INITIALIZE AND PHASE = 6;
     1397+    1959                               %ENDIF;
     1398+    1960
     1399+    1961        %EQU PRIVACY_KEY =493; /* '0755'O                                   */
     1400+    1962                               %IF INITIALIZE AND PHASE = 6;
     1402+    1964                               %ENDIF;
     1403+    1965
     1404+    1966        %EQU PROC_      = 494; /* '0756'O    Proc st item                   */
     1405+    1967                               %IF INITIALIZE AND PHASE = 6;
     1407+    1969                               %ENDIF;
     1408+    1970
     1409+    1971        %EQU CLASS      = 495; /* '0757'O    User defined class             */
     1410+    1972                               %IF INITIALIZE AND PHASE = 6;
     1412+    1974                               %ENDIF;
     1413+    1975
     1414+    1976        %EQU TEMP       = 496; /* '0760'O                                   */
     1415+    1977                               %IF INITIALIZE AND PHASE = 6;
     1417+    1979                               %ENDIF;
     1418+    1980
     1419+    1981        %EQU MNEMONIC   = 497; /* '0761'O                                   */
     1420+    1982                               %IF INITIALIZE AND PHASE = 6;
     1422+    1984                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:52   
     1423+    1985
     1424+    1986        %EQU SWITCH     = 498; /* '0762'O                                   */
     1425+    1987                               %IF INITIALIZE AND PHASE = 6;
     1427+    1989                               %ENDIF;
     1428+    1990
     1429+    1991        %EQU ALPHABET   = 499; /* '0763'O                                   */
     1430+    1992                               %IF INITIALIZE AND PHASE = 6;
     1432+    1994                               %ENDIF;
     1433+    1995
     1434+    1996        %EQU CONDITION  = 500; /* '0764'O                                   */
     1435+    1997                               %IF INITIALIZE AND PHASE = 6;
     1437+    1999                               %ENDIF;
     1438+    2000
     1439+    2001        %EQU ARRAY      = 501; /* '0765'O                                   */
     1440+    2002                               %IF INITIALIZE AND PHASE = 6;
     1442+    2004                               %ENDIF;
     1443+    2005
     1444+    2006        %EQU SCALAR     = 502; /* '0766'O                                   */
     1445+    2007                               %IF INITIALIZE AND PHASE = 6;
     1447+    2009                               %ENDIF;
     1448+    2010
     1449+    2011        %EQU CONST      = 503; /* '0767'O                                   */
     1450+    2012                               %IF INITIALIZE AND PHASE = 6;
     1452+    2014                               %ENDIF;
     1453+    2015
     1454+    2016        %EQU SECTION    = 504; /* '0770'O                                   */
     1455+    2017                               %IF INITIALIZE AND PHASE = 6;
     1457+    2019                               %ENDIF;
     1458+    2020
     1459+    2021        %EQU PARA       = 505; /* '0771'O                                   */
     1460+    2022                               %IF INITIALIZE AND PHASE = 6;
     1462+    2024                               %ENDIF;
     1463+    2025
     1464+    2026        %EQU SYMREF_    = 506; /* '0772'O                                   */
     1465+    2027                               %IF INITIALIZE AND PHASE = 6;
     1467+    2029                               %ENDIF;
     1468+    2030
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:53   
     1469+    2031        %EQU SYMDEF_    = 507; /* '0773'O                                   */
     1470+    2032                               %IF INITIALIZE AND PHASE = 6;
     1472+    2034                               %ENDIF;
     1473+    2035
     1474+    2036        %EQU BLOCK      = 508; /* '0774'O                                   */
     1475+    2037                               %IF INITIALIZE AND PHASE = 6;
     1477+    2039                               %ENDIF;
     1478+    2040
     1479+    2041        %EQU INDUCT     = 509; /* '0775'O                                   */
     1480+    2042                               %IF INITIALIZE AND PHASE = 6;
     1482+    2044                               %ENDIF;
     1483+    2045
     1484+    2046        %EQU INTDEF     = 510; /* '0776'O                                   */
     1485+    2047                               %IF INITIALIZE AND PHASE = 6;
     1487+    2049                               %ENDIF;
     1488+    2050
     1489+    2051        %EQU POINTER    = 511; /* '0777'O                                   */
     1490+    2052                               %IF INITIALIZE AND PHASE = 6;
     1492+    2054                               %ENDIF;
     1493+    2055
     1494+    2056        %EQU SEGMENT    = 512; /* '1000'O                                   */
     1495+    2057                               %IF INITIALIZE AND PHASE = 6;
     1497+    2059                               %ENDIF;
     1498+    2060
     1499+    2061        %EQU SYM_CHAR   = 513; /* '1001'O                                   */
     1500+    2062                               %IF INITIALIZE AND PHASE = 6;
     1502+    2064                               %ENDIF;
     1503+    2065
     1504+    2066        %EQU FD         = 514; /* '1002'O                                   */
     1505+    2067                               %IF INITIALIZE AND PHASE = 6;
     1507+    2069                               %ENDIF;
     1508+    2070
     1509+    2071        %EQU SD         = 515; /* '1003'O                                   */
     1510+    2072                               %IF INITIALIZE AND PHASE = 6;
     1512+    2074                               %ENDIF;
     1513+    2075
     1514+    2076        %EQU CD         = 516; /* '1004'O                                   */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:54   
     1515+    2077                               %IF INITIALIZE AND PHASE = 6;
     1517+    2079                               %ENDIF;
     1518+    2080
     1519+    2081        %EQU RD         = 517; /* '1005'O                                   */
     1520+    2082                               %IF INITIALIZE AND PHASE = 6;
     1522+    2084                               %ENDIF;
     1523+    2085
     1524+    2086        %EQU DB         = 518; /* '1006'O                                   */
     1525+    2087                               %IF INITIALIZE AND PHASE = 6;
     1527+    2089                               %ENDIF;
     1528+    2090
     1529+    2091        %EQU DCB_       = 519; /* '1007'O                                   */
     1530+    2092                               %IF INITIALIZE AND PHASE = 6;
     1532+    2094                               %ENDIF;
     1533+    2095
     1534+    2096        %EQU LAST_ST    = 519; /* '1007'O         add at the front          */
     1535+    2097        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:55   
     1536+    2098        %EQU FIRST_OBJ  = 520; /* '1010'O                                   */
     1537+    2099
     1538+    2100        %EQU LINE       = 520; /* '1010'O                                   */
     1539+    2101                               %IF INITIALIZE AND PHASE = 6;
     1541+    2103                               %ENDIF;
     1542+    2104
     1543+    2105        %EQU LAB        = 521; /* '1011'O                                   */
     1544+    2106                               %IF INITIALIZE AND PHASE = 6;
     1546+    2108                               %ENDIF;
     1547+    2109
     1548+    2110        %EQU WORD       = 522; /* '1012'O                                   */
     1549+    2111                               %IF INITIALIZE AND PHASE = 6;
     1551+    2113                               %ENDIF;
     1552+    2114
     1553+    2115        %EQU ORG        = 523; /* '1013'O                                   */
     1554+    2116                               %IF INITIALIZE AND PHASE = 6;
     1556+    2118                               %ENDIF;
     1557+    2119
     1558+    2120        %EQU OBJ_SCOPE  = 524; /*  '1014'O                                  */
     1559+    2121                               %IF INITIALIZE AND PHASE = 6;
     1561+    2123                               %ENDIF;
     1562+    2124
     1563+    2125        %EQU LAST_OBJ   = 524; /* '1014'O         update as items are added */
     1564+    2126
     1565+    2127                               %IF INITIALIZE AND PHASE = 6;
     1567+    2129                               %ENDIF;
     1568+    2130        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:56   
     1569+    2131        %EQU FIRST_DNT  = 550; /* '1046'O                                   */
     1570+    2132
     1571+    2133        %EQU LEXEME     = 550; /* '1046'O                                   */
     1572+    2134                               %IF INITIALIZE AND PHASE = 6;
     1574+    2136                               %ENDIF;
     1575+    2137
     1576+    2138        %EQU LAST_DNT   = 550; /* '1046'O                                   */
     1577+    2139
     1578+    2140                               %IF INITIALIZE AND PHASE = 6;
     1580+    2142                               %ENDIF;
     1581+    2143
     1582+    2144        %EQU FIRST_QLT  = 555; /* '1053'O                                   */
     1583+    2145
     1584+    2146        %EQU QUAL       = 555; /* '1053'O                                   */
     1585+    2147                               %IF INITIALIZE AND PHASE = 6;
     1587+    2149                               %ENDIF;
     1588+    2150
     1589+    2151        %EQU LAST_QLT   = 555; /* '1053'O                                   */
     1590+    2152
     1591+    2153                               %IF INITIALIZE AND PHASE = 6;
     1593+    2155                               %ENDIF;
     1594+    2156        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:57   
     1595+    2157        %EQU FIRST_GST  = 557; /* '1055'O                                   */
     1596+    2158
     1597+    2159        %EQU GSA        = 557; /* '1055'O                                   */
     1598+    2160                               %IF INITIALIZE AND PHASE = 6;
     1600+    2162                               %ENDIF;
     1601+    2163
     1602+    2164        %EQU LAST_GST   = 557; /* '1055'O                                   */
     1603+    2165
     1604+    2166                               %IF INITIALIZE AND PHASE = 6;
     1606+    2168                               %ENDIF;
     1607+    2169        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:58   
     1608+    2170        %EQU FIRST_LTS  = 562; /* '1062'O                                  */
     1609+    2171        %EQU INIT_LTS   = 562; /* '1062'O    Information for INITIALIZE    */
     1610+    2172                               %IF INITIALIZE AND PHASE = 6;
     1612+    2174                               %ENDIF;
     1613+    2175        %EQU BT         = 563; /* '1063'O    Binary tree for GCOS XREF     */
     1614+    2176                               %IF INITIALIZE AND PHASE = 6;
     1616+    2178                               %ENDIF;
     1617+    2179        %EQU USE_SUPP   = 564; /* '1064'O         USE supplement for COMMON program */
     1618+    2180                               %IF INITIALIZE AND PHASE = 6;
     1620+    2182                               %ENDIF;
     1621+    2183        %EQU COPY_FILE  = 565; /* '1065'0                                  */
     1622+    2184                               %IF INITIALIZE AND PHASE = 6;
     1624+    2186                               %ENDIF;
     1625+    2187        %EQU BASE_LTS         = 566; /* '1066'O  LTS for based variable    */
     1626+    2188                               %IF INITIALIZE AND PHASE = 6;
     1628+    2190                               %ENDIF;
     1629+    2191        %EQU IO_RESTORE_CHAIN = 567; /* '1067'O    Restore at EXIT PROGRAM */
     1630+    2192                               %IF INITIALIZE AND PHASE = 6;
     1632+    2194                               %ENDIF;
     1633+    2195        %EQU ARRAY_PRESET_LTS = 568; /* '1070'O    Array preset LTS        */
     1634+    2196                               %IF INITIALIZE AND PHASE = 6;
     1636+    2198                               %ENDIF;
     1637+    2199        %EQU OPEN_LTS    = 569; /* '1071'O    Open LTS                     */
     1638+    2200                               %IF INITIALIZE AND PHASE = 6;
     1640+    2202                               %ENDIF;
     1641+    2203        %EQU CD_LTS      = 570; /* '1072'O     CD entry LTS                */
     1642+    2204                               %IF INITIALIZE AND PHASE = 6;
     1644+    2206                               %ENDIF;
     1645+    2207
     1646+    2208        %EQU ALTER_LTS   = 571; /* '1073'O     alter pointer LTS           */
     1647+    2209                               %IF INITIALIZE AND PHASE = 6;
     1649+    2211                               %ENDIF;
     1650+    2212
     1651+    2213        %EQU SEGMENT_LTS = 572; /* '1074'O         segment LTS             */
     1652+    2214                               %IF INITIALIZE AND PHASE = 6;
     1654+    2216                               %ENDIF;
     1655+    2217
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:59   
     1656+    2218        %EQU RVA              = 573; /* '1075'O                            */
     1657+    2219                                     %IF INITIALIZE AND PHASE = 6;
     1659+    2221                                     %ENDIF;
     1660+    2222
     1661+    2223        %EQU SUM_LTS    = 574; /* '1076'O         sum counter LTS          */
     1662+    2224                               %IF INITIALIZE AND PHASE = 6;
     1664+    2226                               %ENDIF;
     1665+    2227
     1666+    2228
     1667+    2229        %EQU CONTROL_NAME_LTS = 575; /* '1077'O         control name LTS   */
     1668+    2230                               %IF INITIALIZE AND PHASE = 6;
     1670+    2232                               %ENDIF;
     1671+    2233
     1672+    2234        %EQU USE_LTS    = 576; /* '1100'O                                  */
     1673+    2235                               %IF INITIALIZE AND PHASE = 6;
     1675+    2237                               %ENDIF;
     1676+    2238
     1677+    2239
     1678+    2240        %EQU REPORT_01_LTS = 577; /* '1101'O         report_01_entry       */
     1679+    2241                               %IF INITIALIZE AND PHASE = 6;
     1681+    2243                               %ENDIF;
     1682+    2244
     1683+    2245        %EQU REPORT_ELEM_LTS = 578; /* '1102'O    report elementary entry   */
     1684+    2246                               %IF INITIALIZE AND PHASE = 6;
     1686+    2248                               %ENDIF;
     1687+    2249
     1688+    2250        %EQU REPORT_GRP_LTS = 579; /* '1103'O       report group entry      */
     1689+    2251                               %IF INITIALIZE AND PHASE = 6;
     1691+    2253                               %ENDIF;
     1692+    2254
     1693+    2255        %EQU DIMS       = 580; /* '1104'O         dimensions                */
     1694+    2256                               %IF INITIALIZE AND PHASE = 6;
     1696+    2258                               %ENDIF;
     1697+    2259
     1698+    2260        %EQU LTSS       = 581; /* '1105'O         lts supplement item       */
     1699+    2261                               %IF INITIALIZE AND PHASE = 6;
     1701+    2263                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:60   
     1702+    2264
     1703+    2265        %EQU LCNST      = 582; /* '1106'O         long constant             */
     1704+    2266                               %IF INITIALIZE AND PHASE = 6;
     1706+    2268                               %ENDIF;
     1707+    2269
     1708+    2270        %EQU PRIME      = 583; /* '1107'O         prime item(generator only)*/
     1709+    2271                               %IF INITIALIZE AND PHASE = 6;
     1711+    2273                               %ENDIF;
     1712+    2274
     1713+    2275        %EQU LONG       = 584; /* '1110'O         length of item            */
     1714+    2276                               %IF INITIALIZE AND PHASE = 6;
     1716+    2278                               %ENDIF;
     1717+    2279
     1718+    2280        %EQU REF        = 585; /* '1111'O         modified reference to ST  */
     1719+    2281                               %IF INITIALIZE AND PHASE = 6;
     1721+    2283                               %ENDIF;
     1722+    2284
     1723+    2285        %EQU ARGLIST    = 586; /* '1112'O         list of args              */
     1724+    2286                               %IF INITIALIZE AND PHASE = 6;
     1726+    2288                               %ENDIF;
     1727+    2289
     1728+    2290        %EQU EVALUATE   = 587; /* '1113'O         evaluate sorting          */
     1729+    2291                               %IF INITIALIZE AND PHASE = 6;
     1731+    2293                               %ENDIF;
     1732+    2294
     1733+    2295        %EQU KEY        = 588; /* '1114'O         key item                  */
     1734+    2296                               %IF INITIALIZE AND PHASE = 6;
     1736+    2298                               %ENDIF;
     1737+    2299
     1738+    2300        %EQU NEL        = 589; /* '1115'O         nel item                  */
     1739+    2301                               %IF INITIALIZE AND PHASE = 6;
     1741+    2303                               %ENDIF;
     1742+    2304
     1743+    2305        %EQU INDEXES    = 590; /* '1116'O         indexes item              */
     1744+    2306                               %IF INITIALIZE AND PHASE = 6;
     1746+    2308                               %ENDIF;
     1747+    2309
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:61   
     1748+    2310        %EQU RENAMES    = 591; /* '1117'O         renames item              */
     1749+    2311                               %IF INITIALIZE AND PHASE = 6;
     1751+    2313                               %ENDIF;
     1752+    2314
     1753+    2315        %EQU DEPENDING_SIZE = 592; /* '1120'O     size depending            */
     1754+    2316                               %IF INITIALIZE AND PHASE = 6;
     1756+    2318                               %ENDIF;
     1757+    2319
     1758+    2320        %EQU FILE_LTS   = 593; /* '1121'O         file item             */
     1759+    2321                               %IF INITIALIZE AND PHASE = 6;
     1761+    2323                               %ENDIF;
     1762+    2324
     1763+    2325        %EQU LTS_PTR_ARRAY = 594; /* '1122'O      generic list item(array)  */
     1764+    2326                               %IF INITIALIZE AND PHASE = 6;
     1766+    2328                               %ENDIF;
     1767+    2329
     1768+    2330        %EQU ALT_KEY    = 595; /* '1123'O         alternate key structure   */
     1769+    2331                               %IF INITIALIZE AND PHASE = 6;
     1771+    2333                               %ENDIF;
     1772+    2334
     1773+    2335        %EQU PROC_SUPP  = 596; /* '1124'O         Proc ST item supplement   */
     1774+    2336                               %IF INITIALIZE AND PHASE = 6;
     1776+    2338                               %ENDIF;
     1777+    2339        %EQU DML_REC    = 597; /* '1125'O                                   */
     1778+    2340                               %IF INITIALIZE AND PHASE = 6;
     1780+    2342                               %ENDIF;
     1781+    2343
     1782+    2344        %EQU REPORT_LTS = 598; /* '1126'O         Report item               */
     1783+    2345                               %IF INITIALIZE AND PHASE = 6;
     1785+    2347                               %ENDIF;
     1786+    2348        %EQU DEFERED_ACTION_LTS = 599; /* '1127'O  Defered_action item  */
     1787+    2349                               %IF INITIALIZE AND PHASE = 6;
     1789+    2351                               %ENDIF;
     1790+    2352        %EQU LAST_LTS   = 599; /* '1127'O         update as items are added */
     1791+    2353
     1792+    2354        /*------------------------------------------------------------------*
     1793+    2355                     NO room  for  more  item(s)  here!
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:62   
     1794+    2356         *------------------------------------------------------------------*/
     1795+    2357
     1796+    2358                               %IF INITIALIZE AND PHASE = 6;
     1798+    2360                               %ENDIF;
     1799+    2361         %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:63   
        7+    2362            %INCLUDE X8A_COM_MACS;
        1+    2363        /*T***********************************************************/
        2+    2364        /*T*                                                         */
        3+    2365        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    2366        /*T*                                                         */
        5+    2367        /*T***********************************************************/
        6+    2368        /*  X8A_COM_MACS:   Library and Compiler  common macros             */
        7+    2369
        8+    2370        %MACRO DESCRIPTOR(LVL=2, ENDING(YES='1'B,NO='0'B)='0'B);
        9+    2371
       10+    2372            %(LVL) SA     UBIN HALF UNAL, /* STORAGE ADDRESS    */
       11+    2373            %(LVL) SA_BIT REDEF SA BIT(18) UNAL, /* FOR BOOLEAN */
       12+    2374            %(LVL) SIGNED_SA REDEF SA SBIN HALF UNAL, /* Use carefully!!!   */
       13+    2375            %(LVL) P      REDEF SA BIT(1) HALIGNED, /* EIS descr. P bit */
       14+    2376            %(LVL) DESCL  UBIN HALF UNAL, /* DESCRIPTOR LOWER HALF */
       15+    2377
       16+    2378            %(LVL) BDSC   REDEF DESCL,    /* BIT DESCRIPTOR     */
       17+    2379            %(LVL+1) C      UBIN  (2) UNAL, /* CHARACTER POSITION */
       18+    2380            %(LVL+1) B      UBIN  (4) UNAL, /* BIT WITHIN BYTE    */
       19+    2381            %(LVL+1) N      UBIN (12) UNAL, /* LENGTH             */
       20+    2382            %(LVL) ADSC   REDEF DESCL,    /* ALPHA DESCRIPTOR   */
       21+    2383            %(LVL+1) CN     UBIN  (2) UNAL, /* CHARACTER NUMBER   */
       22+    2384            %(LVL+1) MBZ1   BIT   (1) UNAL, /* MBZ FOR 9-BIT      */
       23+    2385            %(LVL+1) TA     BIT   (2) UNAL, /* TYPE (00 = 9-BIT)  */
       24+    2386            %(LVL+1) MBZ2   BIT   (1) UNAL, /* MUST BE ZERO       */
       25+    2387            %(LVL+1) N      UBIN (12) UNAL, /* LENGTH             */
       26+    2388            %(LVL) NDSC   REDEF DESCL,    /* NUMERIC DESCRIPTOR */
       27+    2389            %(LVL+1) CN     UBIN  (3) UNAL, /* CHARACTER NUMBER   */
       28+    2390            %(LVL+1) TN     BIT   (1) UNAL, /* 0=9-BIT, 1=4-BIT   */
       29+    2391            %(LVL+1) S      BIT   (2) UNAL, /* SIGN: 11=NO-SIGN   */
       30+    2392            %(LVL+1) SF     SBIN  (6) UNAL, /* SCALE FACTOR       */
       31+    2393            %(LVL+1) N      UBIN  (6) UNAL  /* LENGTH             */
       32+    2394                                          %IF ENDING;
       33+    2395                                            ;
       34+    2396                                          %ELSE;
       35+    2397                                            ,
       36+    2398                                          %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:64   
       37+    2399
       38+    2400        %MEND;
       39+    2401        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:65   
       40+    2402        %MACRO PACK_NDSC ( @DESC    = ,
       41+    2403                           @SA      = 0 ,
       42+    2404                           @LENGTH  = ,
       43+    2405                           @TYPE    = %TYD,
       44+    2406                           @SIGN    = ,
       45+    2407                           @CN      = 0 ,
       46+    2408                           @TN      = %NDSC4 ,
       47+    2409                           @SCALE   = 0 );
       48+    2410
       49+    2411             %ERROR(TEXTCHAR(@DESC) = '','Missing DESC parameter',2);
       50+    2412             %ERROR(TEXTCHAR(@LENGTH) = '','Missing LENGTH parameter',2);
       51+    2413             %ERROR(TEXTCHAR(@SIGN) = '','Missing SIGN parameter', 2);
       52+    2414
       53+    2415             DO;
       54+    2416               @DESC.SA = @SA;
       55+    2417               @DESC.NDSC.CN = @CN;
       56+    2418               @DESC.NDSC.TN = @TN;
       57+    2419               @DESC.NDSC.S = @SIGN;
       58+    2420               @DESC.NDSC.SF = @SCALE;
       59+    2421
       60+    2422               DO CASE(BITBIN(@SIGN));
       61+    2423                 CASE(%(BITBIN(%NO_SIGN)));
       62+    2424                   @DESC.NDSC.N = @LENGTH;
       63+    2425
       64+    2426                 CASE(%(BITBIN(%TRAILING_SIGN)),%(BITBIN(%LEADING_SIGN)));
       65+    2427                   %IF TEXTCHAR(@TYPE) = 'TYO';
       66+    2428                     @DESC.NDSC.N = @LENGTH;
       67+    2429                   %ELSEIF TEXTCHAR(@TYPE) = 'TYD';
       68+    2430                     @DESC.NDSC.N = @LENGTH + 1;
       69+    2431                   %ELSEIF TEXTCHAR(@TYPE) = 'TYF' OR TEXTCHAR(@TYPE) = 'TYC';
       70+    2432                      IF @TN = %NDSC4 /* Overpunched */ THEN
       71+    2433                        @DESC.NDSC.N = @LENGTH;
       72+    2434                      ELSE
       73+    2435                        @DESC.NDSC.N = @LENGTH + 1;
       74+    2436                   %ELSE;
       75+    2437                     IF @TYPE = %TYO THEN
       76+    2438                       @DESC.NDSC.N = @LENGTH;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:66   
       77+    2439                     ELSE IF @TYPE = %TYD THEN
       78+    2440                       @DESC.NDSC.N = @LENGTH + 1;
       79+    2441                     ELSE IF @TN = %NDSC4 /* Overpunched */ THEN
       80+    2442                       @DESC.NDSC.N = @LENGTH;
       81+    2443                     ELSE
       82+    2444                       @DESC.NDSC.N = @LENGTH + 1;
       83+    2445                   %ENDIF;
       84+    2446
       85+    2447                 CASE(%(BITBIN(%FLOATING_POINT_LEADING_SIGN)));
       86+    2448                   %IF TEXTCHAR(@TN) ~= 'NDSC4';
       87+    2449                     %IF TEXTCHAR(@TN) ~= 'NDSC9';
       88+    2450                       IF @TN = %NDSC4 THEN
       89+    2451                         @DESC.NDSC.N = @LENGTH + 3;
       90+    2452                       ELSE
       91+    2453                         @DESC.NDSC.N = @LENGTH + 2;
       92+    2454                     %ELSE;
       93+    2455                       @DESC.NDSC.N = @LENGTH + 2;
       94+    2456                     %ENDIF;
       95+    2457                   %ELSE;
       96+    2458                     @DESC.NDSC.N = @LENGTH + 3;
       97+    2459                   %ENDIF;
       98+    2460
       99+    2461               END /* Case */;
      100+    2462             END;
      101+    2463
      102+    2464        %MEND;
      103+    2465        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:67   
        8+    2466
        9+    2467
       10+    2468        %EQU NO_SIGN_VALUE    = 0;
       11+    2469        %EQU PLUS_SIGN_VALUE  = 1;
       12+    2470        %EQU MINUS_SIGN_VALUE = 2;
       13+    2471
       14+    2472        %MACRO DCL_NUM_DESC (@STRN = NUM_DESC);
       15+    2473
       16+    2474           DCL 1 @STRN                ALIGNED,
       17+    2475                2 DIGITS_LEFT         SBIN WORD,
       18+    2476                2 DIGITS_RIGHT        SBIN WORD,
       19+    2477                2 DIGITS_EXPONENT     SBIN WORD,
       20+    2478                2 MANTISSA_SIGN_VALUE SBIN WORD,
       21+    2479                2 EXPONENT_SIGN_VALUE SBIN WORD,
       22+    2480                2 COMMA_PRESENT       BIT(1) ALIGNED;
       23+    2481
       24+    2482        %MEND;
       25+    2483
       26+    2484        %MACRO FISH(TRIAD=,RTN=);
       27+    2485
       28+    2486             DO;
       29+    2487               RTN = TRIAD;
       30+    2488
       31+    2489               DO WHILE(RTN -> ETT.ID < %FIRST_ST);
       32+    2490                 RTN = RTN -> ETT.LOP;
       33+    2491               END;
       34+    2492             END;
       35+    2493
       36+    2494        %MEND;
       37+    2495
       38+    2496        %MACRO FISH_TO_BASE (TRIAD=, RTN=) ;
       39+    2497
       40+    2498               DO ;
       41+    2499                 RTN = TRIAD ;
       42+    2500                 DO WHILE (RTN->ETT.ID ~= %BASE) ;
       43+    2501                   RTN = RTN -> ETT.LOP ;
       44+    2502                 END ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:68   
       45+    2503               END ;
       46+    2504
       47+    2505        %MEND ;
       48+    2506
       49+    2507        %MACRO FISH_TO_LTSS (ITEM = LTSS.DIMS$, LTS_ST$ = ST$, POINTER = LTS$) ;
       50+    2508
       51+    2509               DO ;
       52+    2510                 %ERROR (TRUE,
       53+    2511                   'You FOOL !!! There is a macro GET_LTS to do this for you!!',
       54+    2512                   4);
       55+    2513               END;
       56+    2514
       57+    2515        %MEND ;
       58+    2516        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:69   
       59+    2517
       60+    2518
       61+    2519        %MACRO REMOVE_FROM_DL_LIST (PTR=, ITEM=, HEAD=, NEXT=NEXT, LAST=LAST);
       62+    2520
       63+    2521             DO;
       64+    2522               IF PTR -> ITEM.NEXT = ADDR(NIL) THEN
       65+    2523                 DO;
       66+    2524                   IF PTR -> ITEM.LAST = ADDR(NIL) THEN
       67+    2525                     HEAD = ADDR(NIL);
       68+    2526                   ELSE
       69+    2527                     PTR -> ITEM.LAST -> ITEM.NEXT = ADDR(NIL);
       70+    2528                 END;
       71+    2529               ELSE
       72+    2530                 IF PTR = HEAD THEN
       73+    2531                   DO;
       74+    2532                     PTR -> ITEM.NEXT -> ITEM.LAST = ADDR(NIL);
       75+    2533                     HEAD = PTR -> ITEM.NEXT;
       76+    2534                   END;
       77+    2535                 ELSE
       78+    2536                   DO;
       79+    2537                     PTR -> ITEM.NEXT -> ITEM.LAST = PTR -> ITEM.LAST;
       80+    2538                     PTR -> ITEM.LAST -> ITEM.NEXT = PTR -> ITEM.NEXT;
       81+    2539                   END;
       82+    2540             END;
       83+    2541
       84+    2542        %MEND;
       85+    2543
       86+    2544
       87+    2545
       88+    2546        %MACRO REMOVE_FROM_SL_LIST (PTR=, ITEM=, HEAD=, PREV="ADDR(NIL)",
       89+    2547                                    NEXT = NEXT) ;
       90+    2548
       91+    2549             %IF TEXTCHAR(PREV) = 'ADDR(NIL)';
       92+    2550               DO;
       93+    2551                 PTR = HEAD;
       94+    2552                 HEAD = HEAD -> ITEM.NEXT;
       95+    2553               END;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:70   
       96+    2554             %ELSE;
       97+    2555               DO;
       98+    2556                 PTR = PREV -> ITEM.NEXT;
       99+    2557                 PREV -> ITEM.NEXT = PTR -> ITEM.NEXT;
      100+    2558               END;
      101+    2559             %ENDIF;
      102+    2560
      103+    2561        %MEND;
      104+    2562
      105+    2563
      106+    2564
      107+    2565        %MACRO INSERT_INTO_DL_LIST (PTR=, ITEM=, HEAD=, PREV="ADDR(NIL)",
      108+    2566                                    NEXT=NEXT, LAST=LAST) ;
      109+    2567
      110+    2568             %IF TEXTCHAR(PREV) = 'ADDR(NIL)';
      111+    2569               DO;
      112+    2570                 PTR -> ITEM.NEXT = HEAD;
      113+    2571                 PTR -> ITEM.LAST = ADDR(NIL);
      114+    2572                 IF HEAD ~= ADDR(NIL) THEN
      115+    2573                   HEAD -> ITEM.LAST = PTR;
      116+    2574                 HEAD = PTR;
      117+    2575               END;
      118+    2576             %ELSE;
      119+    2577               DO;
      120+    2578                 IF PREV = ADDR(NIL) THEN DO ;
      121+    2579                   PTR -> ITEM.NEXT = HEAD ;
      122+    2580                   PTR -> ITEM.LAST = ADDR(NIL) ;
      123+    2581                   IF HEAD ~= ADDR(NIL) THEN
      124+    2582                     HEAD -> ITEM.LAST = PTR ;
      125+    2583                   HEAD = PTR ;
      126+    2584                 END ;
      127+    2585                 ELSE DO ; /* PREV <> Nil */
      128+    2586                   PTR -> ITEM.NEXT = PREV -> ITEM.NEXT;
      129+    2587                   PTR -> ITEM.LAST = PREV;
      130+    2588                   IF PREV -> ITEM.NEXT ~= ADDR(NIL) THEN
      131+    2589                     PREV -> ITEM.NEXT -> ITEM.LAST = PTR;
      132+    2590                   PREV -> ITEM.NEXT = PTR;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:71   
      133+    2591                 END ;
      134+    2592               END;
      135+    2593             %ENDIF;
      136+    2594
      137+    2595        %MEND;
      138+    2596
      139+    2597
      140+    2598
      141+    2599        %MACRO INSERT_INTO_SL_LIST (PTR=, ITEM=, HEAD=, PREV="ADDR(NIL)",
      142+    2600                                    NEXT=NEXT) ;
      143+    2601
      144+    2602             %IF TEXTCHAR(PREV) = 'ADDR(NIL)';
      145+    2603               DO;
      146+    2604                 PTR -> ITEM.NEXT = HEAD;
      147+    2605                 HEAD = PTR;
      148+    2606               END;
      149+    2607             %ELSE;
      150+    2608               DO;
      151+    2609                 PTR -> ITEM.NEXT = PREV -> ITEM.NEXT;
      152+    2610                 PREV -> ITEM.NEXT = PTR;
      153+    2611               END;
      154+    2612             %ENDIF;
      155+    2613
      156+    2614        %MEND;
      157+    2615
      158+    2616
      159+    2617
      160+    2618        %MACRO BUILD_BINARY_DESC ( @DESC = , @LENGTH = );
      161+    2619
      162+    2620             %ERROR(TEXTCHAR(@DESC) = '', 'Missing DESC parameter', 2);
      163+    2621             %ERROR(TEXTCHAR(@LENGTH) = '', 'Missing LENGTH parameter', 2);
      164+    2622
      165+    2623             DO;
      166+    2624               @DESC = '0'O;
      167+    2625
      168+    2626               @DESC.NDSC.N = @LENGTH;
      169+    2627             END;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:72   
      170+    2628
      171+    2629        %MEND;
      172+    2630
      173+    2631
      174+    2632
      175+    2633        %MACRO UNPACK_NDSC ( @DESC      = ,
      176+    2634                             @TYPE      = %TYD,
      177+    2635                             @SA        = ,
      178+    2636                             @LENGTH    = ,
      179+    2637                             @CN        = ,
      180+    2638                             @TN        = ,
      181+    2639                             @SIGN      = ,
      182+    2640                             @SCALE     = );
      183+    2641
      184+    2642             %LSET OK1 = (TEXTCHAR(@DESC) ~= '');
      185+    2643
      186+    2644             %IF ~OK1;
      187+    2645               %ERROR(~OK1,'Missing DESC parameter',2);
      188+    2646             %ELSE;
      189+    2647               DO;
      190+    2648                 %IF (TEXTCHAR(@LENGTH) ~= '');
      191+    2649                   DO CASE(BITBIN(@DESC.NDSC.S));
      192+    2650                     CASE(%(BITBIN(%NO_SIGN)));
      193+    2651                       @LENGTH = @DESC.NDSC.N;
      194+    2652
      195+    2653                     CASE(%(BITBIN(%TRAILING_SIGN)),%(BITBIN(%LEADING_SIGN)));
      196+    2654                       %IF TEXTCHAR(@TYPE) = TEXTCHAR(%TYO);
      197+    2655                         @LENGTH = @DESC.NDSC.N;
      198+    2656                       %ELSEIF TEXTCHAR(@TYPE) = TEXTCHAR(%TYD);
      199+    2657                         @LENGTH = @DESC.NDSC.N - 1;
      200+    2658               %ELSEIF TEXTCHAR(@TYPE) = TEXTCHAR(%TYF) OR TEXTCHAR(@TYPE) = TEXTCHAR(%TYC);
      201+    2659                         IF @DESC.NDSC.TN = %NDSC4 /* Overpunched */ THEN
      202+    2660                           @LENGTH = @DESC.NDSC.N;
      203+    2661                         ELSE
      204+    2662                           @LENGTH = @DESC.NDSC.N - 1;
      205+    2663                       %ELSE;
      206+    2664                         IF @TYPE = %TYO THEN
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:73   
      207+    2665                           @LENGTH = @DESC.NDSC.N;
      208+    2666                         ELSE IF @TYPE = %TYD THEN
      209+    2667                           @LENGTH = @DESC.NDSC.N - 1;
      210+    2668                         ELSE IF @DESC.NDSC.TN = %NDSC4 /* Overpunched */ THEN
      211+    2669                           @LENGTH = @DESC.NDSC.N;
      212+    2670                         ELSE
      213+    2671                           @LENGTH = @DESC.NDSC.N - 1;
      214+    2672                       %ENDIF;
      215+    2673
      216+    2674                     CASE(%(BITBIN(%FLOATING_POINT_LEADING_SIGN)));
      217+    2675                       IF @DESC.NDSC.TN = %NDSC4 THEN
      218+    2676                         @LENGTH = @DESC.NDSC.N - 3;
      219+    2677                       ELSE
      220+    2678                         @LENGTH = @DESC.NDSC.N - 2;
      221+    2679
      222+    2680                   END /* Case */;
      223+    2681                 %ENDIF;
      224+    2682
      225+    2683                 %IF (TEXTCHAR(@SA) ~= '');
      226+    2684                   @SA = @DESC.SA;
      227+    2685                 %ENDIF;
      228+    2686
      229+    2687                 %IF (TEXTCHAR(@CN) ~= '');
      230+    2688                   @CN = @DESC.NDSC.CN;
      231+    2689                 %ENDIF;
      232+    2690
      233+    2691                 %IF (TEXTCHAR(@TN) ~= '');
      234+    2692                   @TN = @DESC.NDSC.TN;
      235+    2693                 %ENDIF;
      236+    2694
      237+    2695                 %IF (TEXTCHAR(@SCALE) ~= '');
      238+    2696                   @SCALE = @DESC.NDSC.SF;
      239+    2697                 %ENDIF;
      240+    2698
      241+    2699                 %IF (TEXTCHAR(@SIGN) ~= '');
      242+    2700                   @SIGN = @DESC.NDSC.S;
      243+    2701                 %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:74   
      244+    2702               END;
      245+    2703             %ENDIF;
      246+    2704
      247+    2705        %MEND;
      248+    2706
      249+    2707
      250+    2708
      251+    2709
      252+    2710        %MACRO UNPACK_ADSC ( @DESC      = ,
      253+    2711                             @SA        = ,
      254+    2712                             @LENGTH    = ,
      255+    2713                             @CN        = ,
      256+    2714                             @TA        = );
      257+    2715
      258+    2716             %LSET OK1 = (TEXTCHAR(@DESC) ~= '');
      259+    2717
      260+    2718             %IF ~OK1;
      261+    2719               %ERROR(~OK1,'Missing DESC parameter',2);
      262+    2720             %ELSE;
      263+    2721               DO;
      264+    2722                 %IF (TEXTCHAR(@SA) ~= '');
      265+    2723                   @SA = @DESC.SA;
      266+    2724                 %ENDIF;
      267+    2725
      268+    2726                 %IF (TEXTCHAR(@LENGTH) ~= '');
      269+    2727                   @LENGTH = @DESC.ADSC.N;
      270+    2728                 %ENDIF;
      271+    2729
      272+    2730                 %IF (TEXTCHAR(@CN) ~= '');
      273+    2731                   IF @DESC.ADSC.TA = %ADSC9
      274+    2732                     THEN @CN = @DESC.ADSC.CN;
      275+    2733                     ELSE @CN = @DESC.NDSC.CN;
      276+    2734                 %ENDIF;
      277+    2735
      278+    2736                 %IF (TEXTCHAR(@TA) ~= '');
      279+    2737                   @TA = @DESC.ADSC.TA;
      280+    2738                 %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:75   
      281+    2739               END;
      282+    2740             %ENDIF;
      283+    2741
      284+    2742        %MEND;
      285+    2743
      286+    2744
      287+    2745
      288+    2746        %MACRO PACK_ADSC ( @DESC    = ,
      289+    2747                           @SA      = 0 ,
      290+    2748                           @LENGTH  = ,
      291+    2749                           @CN      = 0 ,
      292+    2750                           @TA      = %ADSC9 );
      293+    2751
      294+    2752             %ERROR(TEXTCHAR(@DESC) = '','Missing DESC parameter',2);
      295+    2753             %ERROR(TEXTCHAR(@LENGTH) = '','Missing LENGTH parameter',2);
      296+    2754
      297+    2755             DO;
      298+    2756               @DESC.SA = @SA;
      299+    2757               %IF (TEXTCHAR(@TA)) = 'ADSC9';
      300+    2758               @DESC.ADSC.CN = @CN;
      301+    2759               @DESC.ADSC.MBZ1 = '0'B;
      302+    2760               %ELSEIF (TEXTCHAR(@TA)) = 'ADSC4' OR (TEXTCHAR(@TA)) = 'ADSC6';
      303+    2761               @DESC.NDSC.CN = @CN;
      304+    2762               %ELSE;
      305+    2763               IF @TA = %ADSC9 THEN
      306+    2764                 DO;
      307+    2765                   @DESC.ADSC.CN = @CN;
      308+    2766                   @DESC.ADSC.MBZ1 = '0'B;
      309+    2767                 END;
      310+    2768               ELSE
      311+    2769                 @DESC.NDSC.CN = @CN;
      312+    2770               %ENDIF;
      313+    2771               @DESC.ADSC.TA = @TA;
      314+    2772               @DESC.ADSC.MBZ2 = '0'B;
      315+    2773               @DESC.ADSC.N = @LENGTH;
      316+    2774             END;
      317+    2775
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:76   
      318+    2776        %MEND;
      319+    2777
      320+    2778
      321+    2779
      322+    2780        %MACRO GET_ADSC_LEN(ST$=,RTN=);
      323+    2781
      324+    2782             DO;
      325+    2783               IF ST$ -> SCALAR.B.LENGTH_4096 THEN
      326+    2784                 IF ST$ -> SCALAR.LTS$ -> LTS.ID = %LTSS THEN
      327+    2785                   RTN = ST$ -> SCALAR.LTS$ -> LTSS.LONG$ -> LONG.LENGTH;
      328+    2786                 ELSE
      329+    2787                   RTN = ST$ -> SCALAR.LTS$ -> LONG.LENGTH;
      330+    2788               ELSE
      331+    2789                 RTN = ST$ -> SCALAR.ADSC.N;
      332+    2790             END;
      333+    2791
      334+    2792        %MEND;
      335+    2793
      336+    2794
      337+    2795
      338+    2796        %MACRO GET_CN(@ST$=,@ST1$=,@RTN=);
      339+    2797
      340+    2798             DO;
      341+    2799               IF @ST1$ -> SCALAR.TYPE = %TYB OR
      342+    2800                  @ST1$ -> SCALAR.TYPE = %TYC OR
      343+    2801                    (@ST1$ -> SCALAR.TYPE = %TYD AND
      344+    2802                     @ST$ -> SCALAR.NDSC.TN = %NDSC4) THEN
      345+    2803                 @RTN = @ST$ -> SCALAR.NDSC.CN;
      346+    2804               ELSE
      347+    2805                 @RTN = @ST$ -> SCALAR.ADSC.CN;
      348+    2806             END;
      349+    2807
      350+    2808        %MEND;
      351+    2809
      352+    2810
      353+    2811
      354+    2812        %MACRO GET_CONSTANT_ADDRESS ( @CONSTANT=, @STRING= ) ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:77   
      355+    2813
      356+    2814             DO;
      357+    2815               IF @CONSTANT -> CONST.B.LONG_CONSTANT THEN
      358+    2816                 @STRING = ADDR(@CONSTANT -> CONST.CONST$.PTR$ -> LCNST.CONST);
      359+    2817               ELSE
      360+    2818                 @STRING = ADDR(@CONSTANT -> CONST.CONSTI);
      361+    2819             END;
      362+    2820
      363+    2821        %MEND;
      364+    2822
      365+    2823
      366+    2824        %MACRO REVERSE_RELATE_OP_CODE(OP_CODE=O1COM.RELATE_OP_CODE,
      367+    2825                                      @CLASS(NO='0'B,YES='1'B)="'0'B") ;
      368+    2826        /* @CLASS is yes only if there is a possibility that a class comparison
      369+    2827           might be reversed. */
      370+    2828               DO ;
      371+    2829
      372+    2830                 DO CASE(OP_CODE) ;
      373+    2831
      374+    2832                   CASE(%GO_LESS_THAN_ARITH) ;
      375+    2833                     OP_CODE = %GO_GREATER_THAN_OR_EQUAL_ARITH ;
      376+    2834
      377+    2835                   CASE(%GO_LESS_THAN_ALPHA) ;
      378+    2836                     OP_CODE = %GO_GREATER_THAN_OR_EQUAL_ALPHA ;
      379+    2837
      380+    2838                   CASE(%GO_GREATER_THAN_ARITH) ;
      381+    2839                     OP_CODE = %GO_LESS_THAN_OR_EQUAL_ARITH ;
      382+    2840
      383+    2841                   CASE(%GO_GREATER_THAN_ALPHA) ;
      384+    2842                     OP_CODE = %GO_LESS_THAN_OR_EQUAL_ALPHA ;
      385+    2843
      386+    2844                   CASE(%GO_LESS_THAN_OR_EQUAL_ARITH) ;
      387+    2845                     OP_CODE = %GO_GREATER_THAN_ARITH ;
      388+    2846
      389+    2847                   CASE(%GO_LESS_THAN_OR_EQUAL_ALPHA) ;
      390+    2848                     OP_CODE = %GO_GREATER_THAN_ALPHA ;
      391+    2849
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:78   
      392+    2850                   CASE(%GO_GREATER_THAN_OR_EQUAL_ARITH) ;
      393+    2851                     OP_CODE = %GO_LESS_THAN_ARITH ;
      394+    2852
      395+    2853                   CASE(%GO_GREATER_THAN_OR_EQUAL_ALPHA) ;
      396+    2854                     OP_CODE = %GO_LESS_THAN_ALPHA ;
      397+    2855
      398+    2856                   CASE(%GO_EQUAL) ;
      399+    2857                     OP_CODE = %GO_NOT_EQUAL ;
      400+    2858
      401+    2859                   CASE(%GO_NOT_EQUAL) ;
      402+    2860                     OP_CODE = %GO_EQUAL ;
      403+    2861
      404+    2862                   CASE(%GO_SWITCH_ON) ;
      405+    2863                     OP_CODE = %GO_SWITCH_OFF ;
      406+    2864
      407+    2865                   CASE(%GO_SWITCH_OFF) ;
      408+    2866                     OP_CODE = %GO_SWITCH_ON ;
      409+    2867
      410+    2868                   %IF @CLASS;
      411+    2869                   CASE(%GO_CLASS) ;
      412+    2870                     OP_CODE = %GO_NOT_CLASS ;
      413+    2871
      414+    2872                   CASE(%GO_NOT_CLASS) ;
      415+    2873                     OP_CODE = %GO_CLASS ;
      416+    2874
      417+    2875                   %ENDIF;
      418+    2876                 END ;
      419+    2877
      420+    2878               END ;
      421+    2879        %MEND ;
      422+    2880        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:79   
      423+    2881           %MACRO GET_LTS (@ID      = %DIMS,
      424+    2882                           @ST$     = ST$,
      425+    2883                           @RETURN$ = LTS$);
      426+    2884
      427+    2885               DO;
      428+    2886                 IF @ST$ -> VARIABLE.LTS$ ~= ADDR(NIL) AND
      429+    2887                    @ST$ -> VARIABLE.LTS$ -> LTS.ID = %LTSS THEN
      430+    2888                   DO;
      431+    2889                     %IF @ID = %DIMS;
      432+    2890                       @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.DIMS$;
      433+    2891                     %ELSEIF @ID = %NEL;
      434+    2892                         @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.NEL$;
      435+    2893                       %ELSEIF @ID = %LONG;
      436+    2894                           @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.LONG$;
      437+    2895                         %ELSEIF @ID = %KEY;
      438+    2896                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.KEY$;
      439+    2897                           %ELSEIF @ID = %DEPENDING_SIZE;
      440+    2898                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.DEPENDING_SIZE$;
      441+    2899                           %ELSEIF @ID = %FILE_LTS;
      442+    2900                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.FILE_LTS$;
      443+    2901                           %ELSEIF @ID = %REPORT_LTS;
      444+    2902                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
      445+    2903                           %ELSEIF @ID = %REPORT_01_LTS;
      446+    2904                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
      447+    2905                           %ELSEIF @ID = %REPORT_GRP_LTS;
      448+    2906                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
      449+    2907                           %ELSEIF @ID = %REPORT_ELEM_LTS;
      450+    2908                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
      451+    2909                           %ELSEIF @ID = %DML_REC;
      452+    2910                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.DML_REC$;
      453+    2911                           %ELSEIF @ID = %CD_LTS;
      454+    2912                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.CD_LTS$;
      455+    2913                           %ELSEIF @ID = %BASE_LTS;
      456+    2914                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.BASE_LTS$;
      457+    2915                           %ELSEIF @ID = %INIT_LTS;
      458+    2916                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.INIT_LTS$;
      459+    2917                     %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:80   
      460+    2918                   END;
      461+    2919                 ELSE
      462+    2920                   IF @ST$ -> VARIABLE.LTS$ ~= ADDR(NIL)
      463+    2921                       AND @ST$ -> VARIABLE.LTS$ -> LTS.ID = @ID THEN
      464+    2922                     @RETURN$ = @ST$ -> VARIABLE.LTS$;
      465+    2923                   ELSE
      466+    2924                     @RETURN$ = ADDR(NIL);
      467+    2925               END;
      468+    2926
      469+    2927           %MEND;
      470+    2928
      471+    2929
      472+    2930
      473+    2931           %MACRO UPDATE_PREV_QLT$ (@NEW_QLT$ = QLT$);
      474+    2932
      475+    2933             DO;
      476+    2934               IF COMCOM.PREV_QLT$ ~= ADDR(NIL) THEN
      477+    2935                 COMCOM.PREV_QLT$ -> QLT.BROTHER = @NEW_QLT$;
      478+    2936
      479+    2937               COMCOM.PREV_QLT$ = @NEW_QLT$;
      480+    2938             END;
      481+    2939
      482+    2940           %MEND;
      483+    2941
      484+    2942
      485+    2943
      486+    2944           %MACRO GET_TYPE_DESC_ADSC_LEN (@TYPE_DESC = , @LENGTH = );
      487+    2945
      488+    2946             DO;
      489+    2947               IF @TYPE_DESC.SIZ$ = ADDR(NIL) THEN
      490+    2948                 @LENGTH = @TYPE_DESC.DESC.ADSC.N;
      491+    2949               ELSE
      492+    2950                 @LENGTH = @TYPE_DESC.SIZ$ -> ETT.LOP -> CONST.CONSTI.WORD1;
      493+    2951             END;
      494+    2952
      495+    2953           %MEND;
      496+    2954
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:81   
      497+    2955
      490     2956        %INCLUDE Z8A_COMCOM ;
        1+    2957        /*T***********************************************************/
        2+    2958        /*T*                                                         */
        3+    2959        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    2960        /*T*                                                         */
        5+    2961        /*T***********************************************************/
        6+    2962        /* %INCLUDE COMCOM -- COMMON VARIABLES USED BY EVERYBODY */
        7+    2963
        8+    2964        %EQU PROC = 0;           /*/ .PROC. BLOCK /*/
        9+    2965        %EQU DATA = 1;           /*/ .DATA. BLOCK /*/
       10+    2966        %EQU LIT  = 2;           /*/ .LIT.  BLOCK /*/
       11+    2967        %EQU LINK = 3;           /*/ .LINK. BLOCK /*/
       12+    2968
       13+    2969        %EQU DEFAULT_FATAL_ERROR_LIMIT = 25;
       14+    2970
       15+    2971
       16+    2972    1   DCL 1 COMCOM         DALIGNED
       17+    2973                           %IF INITIALIZE;
       19+    2975                           %ELSE;
       20+    2976    1                        SYMREF
       21+    2977                           %ENDIF;
       22+    2978
       23+    2979    1        ,2 *                 BIT (1) ALIGNED
       24+    2980                              %IF INITIALIZE;
       26+    2982                              %ENDIF;
       27+    2983
       28+    2984    1        ,2 ALMOST_ONE PTR              /* TWO WORD FLOATING POINT CONST., ALMOST ONE */
       29+    2985
       30+    2986    1        ,2 MAX_ERROR   SBIN WORD           /* Will replace MAX_ERROR_GENERATED */
       31+    2987                              %IF INITIALIZE;
       33+    2989                              %ENDIF;
       34+    2990
       35+    2991    1        ,2 NO_OF_ERRORS SBIN WORD          /* Number of ERR items */
       36+    2992                              %IF INITIALIZE;
       38+    2994                              %ENDIF;
       39+    2995
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:82   
       40+    2996    1        ,2 ARGS1 PTR                       /* used for 1 argument call */
       41+    2997                              %IF INITIALIZE;
       43+    2999                              %ENDIF;
       44+    3000
       45+    3001    1        ,2 ARGS2 PTR                       /* used for 2 argument call */
       46+    3002                              %IF INITIALIZE;
       48+    3004                              %ENDIF;
       49+    3005
       50+    3006    1        ,2 ARGS3 PTR                       /* used for 3 argument call */
       51+    3007                              %IF INITIALIZE;
       53+    3009                              %ENDIF;
       54+    3010
       55+    3011    1        ,2 ESC PTR                         /* last 16k block allocated */
       56+    3012                              %IF INITIALIZE;
       58+    3014                              %ENDIF;
       59+    3015
       60+    3016    1        ,2 FIRST_ILS PTR                   /* First item in ILS table */
       61+    3017                              %IF INITIALIZE;
       63+    3019                              %ENDIF;
       64+    3020
       65+    3021    1        ,2 OPTION_BITS(0:71) BIT(1) ALIGNED  /* OPTIONS */
       66+    3022                              %IF INITIALIZE;
       68+    3024                              %ENDIF;
       69+    3025    1        ,2 OB          REDEF OPTION_BITS
       70+    3026    1          ,3 ALTNO       BIT (1) ALIGNED  /* LISTING OF COMDK OUTPUT  */
       71+    3027    1          ,3 BINARYWS    BIT (1) HALIGNED /* SET DEFAULT PICTURE TO BINARY */
       72+    3028    1          ,3 BINARYWS_FLAG BIT (1) HALIGNED /* APPLY BINARYWS ONLY TO CERTAIN 01'S */
       73+    3029    1          ,3 ASCIIPRT    BIT (1) ALIGNED  /* COMPILER P* TO ASCII PRINTER (GCOS) */
       74+    3030    1          ,3 OPTZ        BIT (1) ALIGNED  /* Do PERFORM optimizations */
       75+    3031    1          ,3 COBOL_74    BIT (1) ALIGNED  /* APPLY COBOL-74 SEMANTICS */
       76+    3032    1          ,3 COMDK       BIT (1) ALIGNED  /* "SO" ON CP-6             */
       77+    3033    1          ,3 LU          BIT (1) ALIGNED  /* List Update input file */
       78+    3034    1          ,3 SUBCHK      BIT (1) ALIGNED  /* SUBSCRIPT CHECKING       */
       79+    3035    1          ,3 INITIAL     BIT (1) ALIGNED  /* Initialize all WORKING-STORAGE */
       80+    3036    1          ,3 DECK        BIT (1) ALIGNED  /* USED TO BE C*            */
       81+    3037    1          ,3 DSE         BIT (1) ALIGNED  /* DSA FLAGGING (LEVEL-6)   */
       82+    3038    1          ,3 DSS         BIT (1) ALIGNED  /* DEBUG SUPPORT SCHEMA     */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:83   
       83+    3039    1          ,3 *           BIT (1) ALIGNED  /*                          */
       84+    3040    1          ,3 ELS        BIT (1) ALIGNED
              3040                   /* Object computer will execute ELS2 instructions (overpunched) */
       85+    3041                           /* ELS bit is set if machine is DPS88, DPS90, DPS8000, DPS9000 */
       86+    3042    1          ,3 HEX         BIT (1) ALIGNED  /* HEX EXPONENT             */
       87+    3043    1          ,3 HEX_SBIN    REDEF HEX SBIN WORD /* Used by phase 4 to ref. hex */
       88+    3044    1          ,3 FORMAT      BIT (1) ALIGNED  /* Free Format (or FMT)     */
       89+    3045    1          ,3 SSPROC      BIT (1) ALIGNED  /* IGNORE SEGMENTATION     */
       90+    3046    1          ,3 IBM         BIT (1) ALIGNED  /* IBM SEMANTICS & SYNTAX  */
       91+    3047    1          ,3 IDSLIST     BIT (1) ALIGNED  /* LIST SUB-SCHEMA         */
       92+    3048    1          ,3 INFO        BIT (1) ALIGNED  /* GIVE INFO DIAGNOSTICS   */
       93+    3049    1          ,3 INHIB       BIT (1) ALIGNED  /* INHIBIT TEST OPTIMIZATIONS */
       94+    3050    1          ,3 FIPS                ALIGNED  /* FIPS LEVEL CHECKS       */
       95+    3051    1             ,4 OBS      BIT (1)          /* OBSOLETE FEATURE FLAGGING */
       96+    3052    1             ,4 SEG1     BIT (1)          /* SEGMENTATION LOW LEVEL */
       97+    3053    1             ,4 SEG2     BIT (1)          /* SEGMENTATION HIGH LEVEL */
       98+    3054    1             ,4 RPW      BIT (1)          /* REPORT WRITER FLAGGING */
       99+    3055    1             ,4 *        BIT (14)
      100+    3056    1             ,4 LEVEL    SBIN HALF HALIGNED /* LOW, INT, HIGH OR ANSI */
      101+    3057    1          ,3 LNRSM       BIT (1) ALIGNED  /* LIST NON-REFERENCED SYMBOLS */
      102+    3058    1          ,3 LISTIN      BIT (1) ALIGNED  /* LIST SOURCE INPUT       */
      103+    3059    1          ,3 LISTOUT     ALIGNED          /* LIST OU INSTRUCTIONS    */
      104+    3060    1             ,4 CODE     BIT(1) UNAL
      105+    3061    1             ,4 DATA     BIT(1) UNAL
      106+    3062    1             ,4 *        BIT(34) UNAL
      107+    3063    1          ,3 MAP         BIT (1) ALIGNED  /* STORAGE MAP             */
      108+    3064    1          ,3 KANJI       BIT (1) ALIGNED  /* For Accept/Display      */
      109+    3065    1          ,3 CLIST      BIT (1) ALIGNED  /* MINI COPY/REPLACE LIST  */
      110+    3066    1          ,3 MAIN_PROG   BIT (1) ALIGNED  /* Program is main         */
      111+    3067    1          ,3 NRESET      BIT (1) ALIGNED  /* EXECUTE ANYWAY          */
      112+    3068    1          ,3 NWARN       BIT (1) ALIGNED  /* DON'T ISSUE WARNINGS    */
      113+    3069    1          ,3 SV3         REDEF NWARN BIT(1) ALIGNED
      114+    3070    1          ,3 TP8         BIT (1) ALIGNED  /* TP8 TPR                 */
      115+    3071    1          ,3 RESEQ       BIT (1) ALIGNED  /* RESEQUENCE COLS. 1-6    */
      116+    3072    1          ,3 STATS       BIT (1) ALIGNED  /* COMPILER STATISTICS     */
      117+    3073    1          ,3 TP          BIT (1) ALIGNED  /* THIS IS A TPR           */
      118+    3074    1          ,3 TSS         BIT (1) ALIGNED  /* EXECUTE UNDER TSS       */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:84   
      119+    3075    1          ,3 XREF        BIT (1) ALIGNED  /* SYMBOLIC CROSS REFERENCE*/
      120+    3076    1          ,3 O1DUMP      BIT (1) ALIGNED  /* PHASE 1 DUMP            */
      121+    3077    1          ,3 O2DUMP      BIT (1) ALIGNED  /* PHASE 2 DUMP            */
      122+    3078    1          ,3 O3DUMP      BIT (1) ALIGNED  /* PHASE 3 DUMP            */
      123+    3079    1          ,3 O4DUMP      BIT (1) ALIGNED  /* PHASE 4 DUMP            */
      124+    3080    1          ,3 SUB         BIT (1) ALIGNED  /* THIS IS A SUBROUTINE.   */
      125+    3081    1          ,3 NOCANCEL    BIT (1) ALIGNED  /* NO CANCELs executed     */
      126+    3082    1          ,3 PM          ALIGNED          /* Procedure Map (CP-6)    */
      127+    3083    1             ,4 FULL BIT(1) UNAL
      128+    3084    1             ,4 MINI BIT(1) UNAL
      129+    3085    1             ,4 *        BIT(34) UNAL
      130+    3086    1          ,3 DM          ALIGNED          /* Data Map (CP-6)         */
      131+    3087    1             ,4 STATIC_  BIT(1) UNAL
      132+    3088    1             ,4 AUTO_    BIT(1) UNAL
      133+    3089    1             ,4 SYMREF_  BIT(1) UNAL
      134+    3090    1             ,4 BASED_   BIT(1) UNAL
      135+    3091    1             ,4 *        BIT(32) UNAL
      136+    3092    1          ,3 MDM         ALIGNED          /* Mini Data Map (CP-6)    */
      137+    3093    1             ,4 STATIC_  BIT(1) UNAL
      138+    3094    1             ,4 AUTO_    BIT(1) UNAL
      139+    3095    1             ,4 SYMREF_  BIT(1) UNAL
      140+    3096    1             ,4 BASED_   BIT(1) UNAL
      141+    3097    1             ,4 *        BIT(32) UNAL
      142+    3098    1          ,3 NMESS       BIT (1) ALIGNED  /* Suppress all diagnostics */
      143+    3099    1          ,3 SV4         BIT (1) ALIGNED  /* Don't print sev 1-3     */
      144+    3100    1          ,3 SV5         BIT (1) ALIGNED  /* Don't print sev 1-4     */
      145+    3101    1          ,3 CHECK       BIT (1) ALIGNED  /* Bypass Phases 3 and 4   */
      146+    3102    1          ,3 SEQ         BIT (1) ALIGNED  /* Sequence check line numbers (GCOS only) */
      147+    3103    1          ,3 MS_DATA     BIT (1) ALIGNED  /* Multiple Data Segments */
      148+    3104    1          ,3 ARRAY_PRESET BIT (1) ALIGNED /* Keep QLT for array preset */
      149+    3105    1          ,3 LEXEMES     BIT (1) ALIGNED  /* Dump LEXEME items       */
      150+    3106    1          ,3 WRN73       BIT (1) ALIGNED  /* Verify columns 73-80 blank (GCOS only) */
      151+    3107    1          ,3 CONTINUE    BIT (1) ALIGNED  /* Continue execution on IPR */
      152+    3108    1          ,3 LO          ALIGNED          /* UnGmap report (CP-6 only) */
      153+    3109    1             ,4 CODE     BIT(1) UNAL
      154+    3110    1             ,4 DATA     BIT(1) UNAL
      155+    3111    1             ,4 *        BIT(34) UNAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:85   
      156+    3112    1          ,3 SQLLIST REDEF LO BIT(1) ALIGNED /* List expanded SQL (GCOS only) */
      157+    3113    1          ,3 OBJ         BIT (1) ALIGNED  /* Dump OBJ table          */
      158+    3114    1          ,3 STARK       BIT (1) ALIGNED  /* Output updated source   */
      159+    3115    1          ,3 IT          BIT (1) ALIGNED  /* Interactive Tree        */
      160+    3116    1          ,3 KEEP_OM     BIT (1) ALIGNED  /* Keep old OM if fatal err (GCOS) */
      161+    3117    1          ,3 UI          BIT (1) ALIGNED  /* Updates Included        */
      162+    3118    1          ,3 ABDUMP      BIT (1) ALIGNED  /* Dump Tables on abort    */
      163+    3119    1          ,3 VIRTUAL     BIT (1) ALIGNED /* use CP-6 virtual space   */
      164+    3120    1          ,3 SQL REDEF VIRTUAL ALIGNED /* SQL-related bits (GCOS) */
      165+    3121    1            ,4 SQL       BIT (1) HALIGNED /* Invoke SQL preprocessor (GCOS) */
      166+    3122    1            ,4 SQLCODE   BIT (1) HALIGNED /* Use SQLCODE, not SQLCA (GCOS) */
      167+    3123    1          ,3 DPS88       BIT(1)  ALIGNED   /* Compile for DPS88 */
      168+    3124    1          ,3 COUNT               ALIGNED   /* COUNT option */
      169+    3125    1            ,4 COUNT     BIT(1)  HALIGNED
              3125                     /* Count entries into programs and paragraphs */
      170+    3126    1            ,4 RSCR_FLAG BIT(1)  HALIGNED  /* Use RSCR instruction for COUNT */
      171+    3127    1          ,3 OPTUI       BIT(1)  ALIGNED  /* Optional UI file (CP-6)  */
      172+    3128    1          ,3 DEBUG REDEF OPTUI BIT(1) ALIGNED /* DEBUG option (GCOS) */
      173+    3129    1          ,3 ACOMDK      BIT (1) ALIGNED  /* ASCII comdk (GCOS only) */
      174+    3130    1          ,3 PARAMETER_CHECK   BIT (1) ALIGNED
              3130                   /* Check COBOL85 parameters at runtime */
      175+    3131    1          ,3 LIBRARY_OPSEG      BIT (1) ALIGNED  /* GCOS ONLY         */
      176+    3132    1          ,3 N6UPD       BIT (1) ALIGNED  /* Do not update 6* file   */
      177+    3133    1          ,3 *           BIT (1) ALIGNED  /* FILLER                  */
      178+    3134
      179+    3135    1        ,2 D_ONE       PTR                 /* Decimal One          */
      180+    3136                              %IF INITIALIZE;
      182+    3138                              %ENDIF;
      183+    3139
      184+    3140    1        ,2 EIS           ALIGNED
      185+    3141    1          ,3 FILL        CHAR (1)  UNAL    /* EIS FILL CHARACTER      */
      186+    3142                              %IF INITIALIZE;
      188+    3144                              %ENDIF;
      189+    3145    1          ,3 *           UBIN (27) UNAL    /* Not available */
      190+    3146                              %IF INITIALIZE;
      192+    3148                              %ENDIF;
      193+    3149    1        ,2 FILL_SBIN   REDEF EIS SBIN WORD
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:86   
      194+    3150
      195+    3151    1        ,2 D_ZERO      PTR                 /* Decimal Zero */
      196+    3152                              %IF INITIALIZE;
      198+    3154                              %ENDIF;
      199+    3155
      200+    3156    1        ,2 ARGS0       PTR                 /* Used for a no argument call */
      201+    3157                              %IF INITIALIZE;
      203+    3159                              %ENDIF;
      204+    3160    1        ,2 VALUE_0     REDEF ARGS0 PTR     /* Used fo the value 0 */
      205+    3161    1        ,2 FALSE$      REDEF ARGS0 PTR     /* Used for constant comparisons */
      206+    3162
      207+    3163    1        ,2 VALUE_1     PTR                 /* Used for the value 1 */
      208+    3164                              %IF INITIALIZE;
      210+    3166                              %ENDIF;
      211+    3167    1        ,2 TRUE$       REDEF VALUE_1 PTR   /* Used for constant comparisons */
      212+    3168
      213+    3169    1        ,2 H_PFORM     PTR                 /* Ptr to top of PFORM linked list */
      214+    3170                              %IF INITIALIZE;
      216+    3172                              %ENDIF;
      217+    3173
      218+    3174    1        ,2 DO_REQ      BIT (1) ALIGNED     /* DO output required              */
      219+    3175
      220+    3176    1        ,2 *           BIT (1) ALIGNED
      221+    3177
      222+    3178    1        ,2 LINES
      223+    3179    1          ,3 SOURCE      SBIN WORD         /* # OF SOURCE LINES       */
      224+    3180                              %IF INITIALIZE;
      226+    3182                              %ENDIF;
      227+    3183
      228+    3184    1        ,2 CURRENT
      229+    3185    1          ,3 PHASE       UBIN WORD         /* CURRENT PHASE# (0->6)   */
      230+    3186    1          ,3 LINE        SBIN WORD         /* CURRENT LINE#           */
      231+    3187                              %IF INITIALIZE;
      233+    3189                              %ENDIF;
      234+    3190    1          ,3 COLUMN      SBIN WORD         /* CURRENT COLUMN #        */
      235+    3191                              %IF INITIALIZE;
      237+    3193                              %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:87   
      238+    3194
      239+    3195    1        ,2 ARGS4 PTR                       /* used for 4 argument call */
      240+    3196
      241+    3197    1        ,2 FIRST_PROC$   PTR               /* To the first PROC_ ST item */
      242+    3198                              %IF INITIALIZE;
      244+    3200                              %ENDIF;
      245+    3201
      246+    3202    1        ,2 COMPILE
      247+    3203    1            ,3 UTS       SBIN WORD         /* Time stamp for compile start */
      248+    3204    1            ,3 DATE      CHAR (8) UNAL     /* Date that compile started */
      249+    3205    1            ,3 TIME      CHAR (6) UNAL     /* Time that compile started */
      250+    3206    1            ,3 *         CHAR (2) UNAL     /* Filler for word alignment */
      251+    3207
      252+    3208    1        ,2 BLOCKC      SBIN WORD           /* No. of BLOCK items      */
      253+    3209                              %IF INITIALIZE;
      255+    3211                              %ENDIF;
      256+    3212
      257+    3213    1        ,2 BLOCK$      PTR                 /* BLOCK Head Link         */
      258+    3214                              %IF INITIALIZE;
      260+    3216                              %ENDIF;
      261+    3217
      262+    3218    1        ,2 OU_EXTERNAL_NAME$ PTR           /* program-id LEXEME */
      263+    3219                              %IF INITIALIZE;
      265+    3221                              %ENDIF;
      266+    3222
      267+    3223    1        ,2 PROC_END    SBIN WORD           /* loc of last gen instr   */
      268+    3224
      269+    3225    1        ,2 SEGMENT$(0:99) PTR              /* PTR TO PROC ITEMS */
      270+    3226                              %IF INITIALIZE;
      272+    3228                              %ENDIF;
      273+    3229
      274+    3230    1        ,2 SEGMENTC       SBIN WORD        /* NUMBER OF SEGMENTS */
      275+    3231                              %IF INITIALIZE;
      277+    3233                              %ENDIF;
      278+    3234
      279+    3235    1        ,2 SYMDEFC     SBIN WORD           /* Number of SYMDEFs       */
      280+    3236                              %IF INITIALIZE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:88   
      282+    3238                              %ENDIF;
      283+    3239
      284+    3240    1        ,2 SYMDEF$     PTR                 /* Head Link of SYMDEFs    */
      285+    3241                              %IF INITIALIZE;
      287+    3243                              %ENDIF;
      288+    3244
      289+    3245    1        ,2 MAX_ARGS    SBIN WORD           /* Maximum # of args passed */
      290+    3246                              %IF INITIALIZE;
      292+    3248                              %ENDIF;
      293+    3249
      294+    3250    1        ,2 MAX_PARAMS  SBIN WORD           /* Maximum #args received   */
      295+    3251                              %IF INITIALIZE;
      297+    3253                              %ENDIF;
      298+    3254
      299+    3255    1        ,2 H_LBL       PTR                 /* Head link of DEFLBs  */
      300+    3256                              %IF INITIALIZE;
      302+    3258                              %ENDIF;
      303+    3259
      304+    3260    1        ,2 PLUGS_USED  SBIN WORD           /* 0 = No Plugin Errors */
      305+    3261                              %IF INITIALIZE;
      307+    3263                              %ENDIF;
      308+    3264
      309+    3265    1        ,2 H_BASE      PTR                 /* Head link of BASE triads */
      310+    3266                              %IF INITIALIZE;
      312+    3268                              %ENDIF;
      313+    3269
      314+    3270    1        ,2 IL_SPACE    (0:5) SBIN WORD     /* #Words of IL */
      315+    3271                              %IF INITIALIZE;
      317+    3273                              %ENDIF;
      318+    3274
      319+    3275    1        ,2 H_DO        PTR                 /* Head link of DO entries */
      320+    3276                              %IF INITIALIZE;
      322+    3278                              %ENDIF;
      323+    3279
      324+    3280    1        ,2 H_BRANCH    PTR                 /* Head link of branch instructions */
      325+    3281                              %IF INITIALIZE;
      327+    3283                              %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:89   
      328+    3284
      329+    3285    1        ,2 LINE1       CHAR (80)           /* First line of COBOL85 invocation */
      330+    3286                                                                    /*#28761*/
      331+    3287    1        ,2 MAX_RECEIVING_ITEMS  SBIN WORD
      332+    3288                              %IF INITIALIZE;
      334+    3290                              %ENDIF;
      335+    3291                                                                    /*#28761*/
      336+    3292    1        ,2 INT_SUB$             PTR     /* Internal subroutine list.   */
      337+    3293                              %IF INITIALIZE;
      339+    3295                              %ENDIF;
      340+    3296
      341+    3297    1        ,2 SORT_MEM UBIN WORD          /* OPTION = SORT_MEM=nnn */
      342+    3298                              %IF INITIALIZE;
      344+    3300                              %ENDIF;
      345+    3301
      346+    3302    1        ,2 SR CHAR (4)                    /*  Software release (GCOS only) */
      347+    3303                              %IF INITIALIZE;
      349+    3305                              %ENDIF;
      350+    3306
      351+    3307    1        ,2 SQL_NOT_AVAILABLE   BIT(1) ALIGNED
              3307                 /* Set if any SQL token detected but customer does not have SQL */
      352+    3308                              %IF INITIALIZE;
      354+    3310                              %ENDIF;
      355+    3311
      356+    3312    1        ,2 TIMES(0:5) UBIN WORD            /* PHASE TIMINGS */
      357+    3313                              %IF INITIALIZE;
      359+    3315                              %ENDIF;
      360+    3316
      361+    3317    1        ,2 COMMON_REDEF UBIN WORD          /* Seq# of last CALL or PFORM */
      362+    3318                              %IF INITIALIZE;
      364+    3320                              %ENDIF;
      365+    3321
      366+    3322
      367+    3323    1        ,2 SEVERITY    UBIN WORD           /* Minimum error severity */
      368+    3324                              %IF INITIALIZE;
      370+    3326                              %ENDIF;
      371+    3327
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:90   
      372+    3328    1        ,2 LAST_BLOCK$    PTR              /* Block in which storage being allocated */
      373+    3329                              %IF INITIALIZE;
      375+    3331                              %ENDIF;
      376+    3332
      377+    3333    1        ,2 TREE_LINE CHAR (84)             /* Text from TREE option */
      378+    3334                              %IF INITIALIZE;
      380+    3336                              %ENDIF;
      381+    3337
      382+    3338    1        ,2 H_ENTRY$    PTR                 /* Ptr to last ENTRY ILS */
      383+    3339                              %IF INITIALIZE;
      385+    3341                              %ENDIF;
      386+    3342
      387+    3343    1        ,2 PREV_QLT$    PTR                /* Ptr to previous level 1 data item */
      388+    3344                              %IF INITIALIZE;
      390+    3346                              %ENDIF;
      391+    3347
      392+    3348    1        ,2 FREE$       PTR                 /* Head of FREE pages */
      393+    3349                              %IF INITIALIZE;
      395+    3351                              %ENDIF;
      396+    3352
      397+    3353    1        ,2 OPERATOR_SEGMENT$     PTR
      398+    3354                              %IF INITIALIZE;
      400+    3356                              %ENDIF;
      401+    3357
      402+    3358    1        ,2 MAX_TEMP_LENGTH    SBIN WORD    /* Max # of digits (precision) in temps */
      403+    3359                              %IF INITIALIZE;
      405+    3361                              %ENDIF;
      406+    3362
      407+    3363    1        ,2 CURRENCY_SIGN CHAR (1) ALIGNED
      408+    3364                              %IF INITIALIZE;
      410+    3366                              %ENDIF;
      411+    3367
      412+    3368    1        ,2 HIGH_VALUE    CHAR (1) ALIGNED
      413+    3369                              %IF INITIALIZE;
      415+    3371                              %ENDIF;
      416+    3372
      417+    3373    1        ,2 MAX_SEQ#      UBIN
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:91   
      418+    3374                              %IF INITIALIZE;
      420+    3376                              %ENDIF;
      421+    3377
      422+    3378    1        ,2 DATE_COMPILED_LINE SBIN WORD
      423+    3379                              %IF INITIALIZE;
      425+    3381                              %ENDIF;
      426+    3382
      427+    3383    1        ,2 FILE_LTS_CHAIN$ PTR             /* Ptr to linked list of FILE_LTSs */
      428+    3384                              %IF INITIALIZE;
      430+    3386                              %ENDIF;
      431+    3387    1        ,2 NO_OF_SEQ_RANGES UBIN           /* Incr. whenever ILS.SEQNO reset to 1 */
      432+    3388                              %IF INITIALIZE;
      434+    3390                              %ENDIF;
      435+    3391    1        ,2 SYMREF$       PTR              /* Head link of SYMREF chain */
      436+    3392                              %IF INITIALIZE;
      438+    3394                              %ENDIF;
      439+    3395
      440+    3396    1        ,2 SYMREFC       SBIN WORD         /* No. of SYMREF items */
      441+    3397                              %IF INITIALIZE;
      443+    3399                              %ENDIF;
      444+    3400
      445+    3401    1        ,2 FIRST_ENTRY_SEQ_NUM  SBIN WORD  /* Sequence Number */
      446+    3402                              %IF INITIALIZE;
      448+    3404                              %ENDIF;
      449+    3405
      450+    3406    1        ,2 NO_OF_GLOBAL_PRS     SBIN WORD  /* Set by Phase 3 for Ph4 */
      451+    3407                              %IF INITIALIZE;
      453+    3409                              %ENDIF;
      454+    3410    1        ,2 IN_DECLARATIVES       BIT(1) ALIGNED
      455+    3411                                        %IF INITIALIZE;
      457+    3413                                        %ENDIF;
      458+    3414    1        ,2 USE_BLOCK_ST$         PTR
      459+    3415                                        %IF INITIALIZE;
      461+    3417                                        %ENDIF;
      462+    3418    1        ,2 PROG_ID_DNT$          PTR /* GCOS only */
      463+    3419                                        %IF INITIALIZE;
      465+    3421                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:92   
      466+    3422    1        ,2 MAIN_ENCOUNTERED      BIT(1) ALIGNED
      467+    3423                                        %IF INITIALIZE;
      469+    3425                                        %ENDIF;
      470+    3426    1        ,2 BREAK                 BIT(1)
      471+    3427                                        %IF INITIALIZE;
      473+    3429                                        %ENDIF;
      474+    3430    1        ,2 BREAK_EXIT            BIT(1)
      475+    3431                                        %IF INITIALIZE;
      477+    3433                                        %ENDIF;
      478+    3434    1        ,2 WRAP                  BIT(1)
      479+    3435                                        %IF INITIALIZE;
      481+    3437                                        %ENDIF;
      482+    3438    1        ,2 WRAP_EXIT             BIT(1)
      483+    3439                                        %IF INITIALIZE;
      485+    3441                                        %ENDIF;
      486+    3442    1        ,2 *                     BIT (32)
      487+    3443                                        %IF INITIALIZE;
      489+    3445                                        %ENDIF;
      490+    3446    1        ,2 PRIVACY_LINE          UBIN
      491+    3447                                        %IF INITIALIZE;
      493+    3449                                        %ENDIF;
      494+    3450    1        ,2 PRIVACY_COL           SBIN
      495+    3451                                        %IF INITIALIZE;
      497+    3453                                        %ENDIF;
      498+    3454    1        ,2 BINARYWS$             PTR
      499+    3455                                        %IF INITIALIZE;
      501+    3457                                        %ENDIF;
      502+    3458    1        ,2 PLATFORM              BIT (1) ALIGNED /* Option such as DPS90 specified */
      503+    3459                                        %IF INITIALIZE;
      505+    3461                                        %ENDIF;
      506+    3462    1        ,2 ON_SIZE               BIT(1) ALIGNED
      507+    3463                                        %IF INITIALIZE;
      509+    3465                                        %ENDIF;
      510+    3466             %EQU SOURCE_FILE_NAME_LENGTH = 27;
      511+    3467    1        ,2 SOURCE_FILE_NAME CHAR(%SOURCE_FILE_NAME_LENGTH) ALIGNED
      512+    3468                                        %IF INITIALIZE;
      514+    3470                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:93   
      515+    3471    1        ,2 CANCEL_ID     BIT(1) ALIGNED   /* Set if program contains */
      516+    3472                                %IF INITIALIZE;    /* CANCEL IDENTIFIER */
      518+    3474                                %ENDIF;
      519+    3475
      520+    3476    1        ,2 X66_STATIC_0$ PTR               /* Entry operator          */
      521+    3477                              %IF INITIALIZE;
      523+    3479                              %ENDIF;
      524+    3480    1        ,2 X66_STATIC_1$ PTR               /* Entry operator           */
      525+    3481                              %IF INITIALIZE;
      527+    3483                              %ENDIF;
      528+    3484    1        ,2 X66_STATIC_2$ PTR               /* Entry operator           */
      529+    3485                              %IF INITIALIZE;
      531+    3487                              %ENDIF;
      532+    3488    1        ,2 X66_STATIC_3$ PTR               /* Entry operator           */
      533+    3489                              %IF INITIALIZE;
      535+    3491                              %ENDIF;
      536+    3492    1        ,2 X66_STATIC_N$ PTR               /* Entry operator           */
      537+    3493                              %IF INITIALIZE;
      539+    3495                              %ENDIF;
      540+    3496    1        ,2 COMMA_DECIMAL_PRESENT BIT(1) ALIGNED /* Set if program  */
      541+    3497                                %IF INITIALIZE;    /* has COMMA IS DECIMAL */
      543+    3499                                %ENDIF;
      544+    3500
      545+    3501    1        ,2 LOGICAL_BLOCK_CNT UBIN WORD    /* Set by PH4 for PH5      */
      546+    3502                                %IF INITIALIZE;
      548+    3504                                %ENDIF;        /* of records allowed      */
      549+    3505
      550+    3506    1        ,2 LIBCOM#COM$ PTR               /* Pts to BASE over LIBCOMCOM */
      551+    3507    1        ,2 ERRLIM         SBIN   /* The limit on FATAL errors */
      552+    3508                                 %IF INITIALIZE;
      554+    3510                                 %ENDIF;
      555+    3511    1        ,2 RD_RECOVERY_FILE$   PTR
      556+    3512                                      %IF INITIALIZE;
      558+    3514                                      %ENDIF;
      559+    3515
      560+    3516
      561+    3517    1        ,2 USE_PROC_CHAIN$   PTR         /* Ptr to LTS chain of USE PROC labels  */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:94   
      562+    3518                              %IF INITIALIZE;
      564+    3520                              %ENDIF;
      565+    3521
      566+    3522    1       ,2 IDS_SUB_SCHEMA     BIT(1) ALIGNED /* Set if program contains */
      567+    3523                                  %IF INITIALIZE; /*    DML Sub-Schema     */
      569+    3525                                  %ENDIF;
      570+    3526
      571+    3527    1        ,2 INSTALLATION$       PTR
      572+    3528                                      %IF INITIALIZE;
      574+    3530                                      %ENDIF;
      575+    3531
      576+    3532    1        ,2 E_L_WORD            PTR
      577+    3533                                      %IF INITIALIZE;
      579+    3535                                      %ENDIF;
      580+    3536
      581+    3537    1        ,2 SEG_LIMIT           SBIN WORD
      582+    3538                                      %IF INITIALIZE;
      584+    3540                                      %ENDIF;
      585+    3541
      586+    3542    1        ,2 SEG_SYMREF$         PTR
      587+    3543                                      %IF INITIALIZE;
      589+    3545                                      %ENDIF;
      590+    3546
      591+    3547
      592+    3548    1        ,2 FILE_POSITION    SBIN WORD
      593+    3549                                   %IF INITIALIZE;
      595+    3551                                   %ENDIF;
      596+    3552    1        ,2 AUTHOR$          PTR
      597+    3553                                   %IF INITIALIZE;
      599+    3555                                   %ENDIF;
      600+    3556    1        ,2 DATA_LIMIT_ERROR_FLAGGED BIT(1) ALIGNED
      601+    3557                                  %IF INITIALIZE;
      603+    3559                                  %ENDIF;
      604+    3560    1        ,2 VERSION
      605+    3561    1          ,3 LENGTH         SBIN WORD
      606+    3562                                   %IF INITIALIZE;
      608+    3564                                   %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:95   
      609+    3565    1          ,3 NAME           CHAR (10)
      610+    3566                                   %IF INITIALIZE;
      612+    3568                                   %ENDIF;
      613+    3569    1        ,2 VS_PTR$ (0:23)   PTR
      614+    3570                                   %IF INITIALIZE;
      616+    3572                                   %ENDIF;
      617+    3573    1        ,2 VS_FREE$         PTR     /* Free real space for F.S. I/O */
      618+    3574                                  %IF INITIALIZE;
      620+    3576                                  %ENDIF;
      621+    3577    1        ,2 VS_DCB#          SBIN WORD
      622+    3578                                  %IF INITIALIZE;
      624+    3580                                   %ENDIF;
      625+    3581
      626+    3582    1        ,2 ESC_LIST (0:3)      ALIGNED
      627+    3583    1         ,3 ESC$               PTR
      628+    3584                                      %IF INITIALIZE;
      630+    3586                                      %ENDIF;
      631+    3587    1         ,3 PR#                SBIN HALF HALIGNED
      632+    3588                                      %IF INITIALIZE;
      634+    3590                                      %ENDIF;
      635+    3591    1         ,3 OPTION             SBIN HALF HALIGNED
      636+    3592                                      %IF INITIALIZE;
      638+    3594                                      %ENDIF;
      639+    3595    1        ,2 AUTO$               PTR
      640+    3596                                     %IF INITIALIZE;
      642+    3598                                     %ENDIF;
      643+    3599    1        ,2 NULL_PTR$           PTR      /* to a Null ptr const ETT */
      644+    3600                                     %IF INITIALIZE;
      646+    3602                                     %ENDIF;
      647+    3603
      648+    3604    1        ,2 LAST        PTR ;               /* LAST WORD IN COMCOM     */
      649+    3605        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:96   
      491     3606        %INCLUDE Z8A_ERR_NUMS ;
        1+    3607        /*M* Z8A_ERR_NUMS */
        2+    3608        /*T***********************************************************/
        3+    3609        /*T*                                                         */
        4+    3610        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+    3611        /*T*                                                         */
        6+    3612        /*T***********************************************************/
        7+    3613
        8+    3614        /*P*
        9+    3615
       10+    3616                 NAME: Z8A_ERR_NUMS
       11+    3617              PURPOSE: List of all error numbers used throughout the compiler.
       12+    3618                       The Annotator uses these numbers to obtain the actual
       13+    3619                       error text from Z8I_ERR_TXT.
       14+    3620
       15+    3621        */
       16+    3622
       17+    3623
       18+    3624        /* WHEN ADDING ENTRIES TO THESE TABLES, MAKE SURE YOU UPDATE
       19+    3625           THE TEXT FOR THE MESSAGE IN ANN_ERROR_TEXT.
       20+    3626           ALSO, MAKE SURE THAT LAST_XXX_MSG_NO IS UPDATED TO THE
       21+    3627           LAST ENTRY IN EACH TABLE.
       22+    3628        */
       23+    3629
       24+    3630
       25+    3631
       26+    3632        /* -------------- */
       27+    3633        /* ERRORS 000-099 - Informational messages */
       28+    3634        /* -------------- */
       29+    3635        %EQU E$UNEXP_EOF_DURING_RECOVERY = 0;
       30+    3636        %EQU E$PARSING_RESUMED               = 1;
       31+    3637        %EQU E$CORRES_INFO                   = 2;
       32+    3638        %EQU E$RECURSIVE_PERFORM             = 3;
       33+    3639        %EQU E$POSSIBLE_TRUNCATION           = 4;
       34+    3640        %EQU E$POSSIBLE_LEFT_TRUNCATION      = 5;
       35+    3641        %EQU E$POSSIBLE_RIGHT_TRUNCATION     = 6;
       36+    3642        %EQU E$SIGN_TRUNCATION               = 7;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:97   
       37+    3643        %EQU E$INDEX_FILE_CODE               = 8;
       38+    3644        %EQU E$COPYBOOK_NOT_FOUND            = 9;
       39+    3645        %EQU E$NO_DATA_IN_COPYBOOK           = 10;
       40+    3646        %EQU E$DUPL_DEFIN_ERR                = 11;
       41+    3647        %EQU E$OPERANDS_OVERLAP              = 12;
       42+    3648        %EQU E$COMP2_TOO_LONG                = 13;
       43+    3649        %EQU E$LAST_000_MSG_NO               = 13;
       44+    3650
       45+    3651
       46+    3652
       47+    3653        /* -------------- */
       48+    3654        /* ERRORS 100-199 - Warning messages */
       49+    3655        /* -------------- */
       50+    3656        %EQU E$DEAD_CODE               = 100 ;
       51+    3657        %EQU E$NULL_PFORM_WARNING      = 101 ;
       52+    3658        %EQU E$ILLEGAL_OPTION          = 102 ;
       53+    3659        %EQU E$REDEF_SIZE_WARN         = 103 ;
       54+    3660        %EQU E$USELESS_IF              = 104 ;
       55+    3661        %EQU E$RW_USED_AS_DATA_NAME    = 105 ;
       56+    3662        %EQU E$USERWORD_TOO_LONG       = 106 ;
       57+    3663        %EQU E$MUST_BE_DISK            = 107 ;
       58+    3664        %EQU E$RENAMES_DIGIT_BOUND_WARN= 108 ;
       59+    3665        %EQU E$MISSING_DELIMITER       = 109 ;
       60+    3666        %EQU E$INTERNAL_CALL_ALTRET    = 110;
       61+    3667        %EQU E$ERR_COMMENT_ENTRY_CONTINUE = 111;
       62+    3668        %EQU E$OCCURS_ORDERING_ERROR   = 112;
       63+    3669        %EQU E$CONVERT_COMP1_TO_COMP2  = 113;
       64+    3670        %EQU E$NO_CORRES_FIELDS        = 114;
       65+    3671        %EQU E$NO_INITIALIZE_VALUES    = 115;
       66+    3672        %EQU E$EVAL_WHEN_NEVER_SELECTED = 116;
       67+    3673        %EQU E$FILE_ORG_NOT_SUPPORTED  = 117;
       68+    3674        %EQU E$FEATURE_NOT_SUPPORTED   = 118;
       69+    3675        %EQU E$NO_ASSIGN_CLAUSE        = 119;
       70+    3676        %EQU E$EXTEND_WITH_LINAGE      = 120;
       71+    3677        %EQU E$EXTEND_MULTI_FILE_TAPE  = 121;
       72+    3678        %EQU E$EXTEND_MUST_BE_SEQ      = 122;
       73+    3679        %EQU E$CANT_EXIT               = 123;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:98   
       74+    3680        %EQU E$AREA_A_ERROR            = 124;
       75+    3681        %EQU E$VALUE_OVERFLOW          = 125;
       76+    3682        %EQU E$TRUNCATION_WARN         = 126;
       77+    3683        %EQU E$ASSIGN_ADV_POS          = 127;
       78+    3684        %EQU E$ASSIGN_OPEN_INPUT       = 128;
       79+    3685        %EQU E$ASSIGN_OPEN_OUTPUT      = 129;
       80+    3686        %EQU E$ASSIGN_OPEN_IO          = 130;
       81+    3687        %EQU E$ASSIGN_OPEN_EXTEND      = 131;
       82+    3688        %EQU E$MUST_BE_IN_AREA_A       = 132;
       83+    3689        %EQU E$RECORD_CONTAINS_WARN    = 133;
       84+    3690        %EQU E$COMPUTER_NOT_KNOWN      = 134;
       85+    3691        %EQU E$DUPLICATE_ON_PHRASE     = 135;
       86+    3692        %EQU E$PRIVACY_KEY_TO_LONG     = 136;
       87+    3693        %EQU E$USAGE_NOT_DISPLAY       = 137;
       88+    3694        %EQU E$POINTER_EQUALITY_ERROR  = 138;
       89+    3695        %EQU E$SET_PRIVACY             = 139;
       90+    3696        %EQU E$ITEM_PRIVACY            = 140;
       91+    3697        %EQU E$LINE_LENGTH_GT_80       = 141;
       92+    3698        %EQU E$NOT_DISPLAY_SEPARATE_SIGN = 142;
       93+    3699        %EQU E$CLAUSE_INVALID_IN_SORT  = 143;
       94+    3700        %EQU E$NOT_IN_USING_LIST       = 144;
       95+    3701        %EQU E$SYNC_NOT_ELEMENTARY     = 145;
       96+    3702        %EQU E$VALUE_NOT_VALID_IN_CONTEXT = 146;
       97+    3703        %EQU E$REPORT_DISK_ERROR       = 147;
       98+    3704        %EQU E$SIGN_CLAUSE_NOT_NUMERIC = 148;
       99+    3705        %EQU E$SEQ_ERROR               = 149;
      100+    3706        %EQU E$WRN73                   = 150;
      101+    3707        %EQU E$IMPROPER_HOST_VARIABLE  = 151;
      102+    3708        %EQU E$CANNOT_CONNECT_TO_IRDS  = 152;
      103+    3709        %EQU E$CANNOT_CONTINUE_IN_IRDS = 153;
      104+    3710        %EQU E$DEPENDING_REQUIRES_RANGE= 154;
      105+    3711        %EQU E$DUPLICATE_RERUN         = 155;
      106+    3712        %EQU E$DML_PRECALC_GCOS_ONLY   = 156;
      107+    3713        %EQU E$AT_END_OR_INVALID_REQ   = 157;
      108+    3714        %EQU E$MISSING_MINREC_ON_VLR   = 158;
      109+    3715        %EQU E$CONVERT_COMP6_TO_11_12  = 159;
      110+    3716
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:99   
      111+    3717        %EQU E$DUPLICATE_INSERT        = 160;
      112+    3718        %EQU E$INSERT_OVERLAPS_DELETE  = 161;
      113+    3719        %EQU E$SHOULD_BE_INTEGER       = 162;
      114+    3720        %EQU E$GROUP_MOVE              = 163;
      115+    3721        %EQU E$EXAMINE_NOT_1_BYTE      = 164;
      116+    3722        %EQU E$FLR_ILLEGAL             = 165;
      117+    3723        %EQU E$IBM_INITIAL_ILLEGAL     = 166;
      118+    3724        %EQU E$LAST_100_MSG_NO         = 166;
      119+    3725
      120+    3726
      121+    3727
      122+    3728        /* -------------- */
      123+    3729        /* ERRORS 200-299 - Level check messages */
      124+    3730        /* -------------- */
      125+    3731
      126+    3732        /* FIRST ANSI */
      127+    3733
      128+    3734        %EQU FIRST_ANSI                = 200;
      129+    3735        %EQU E$ANSI_LARGE_NUMERIC_ITEM = 200;
      130+    3736        %EQU E$USERWORD_ANSI_ERROR     = 201;
      131+    3737        %EQU E$ANSI_FLOATING_POINT     = 202;
      132+    3738        %EQU E$ANSI_MAX_PIC_DIGITS     = 203;
      133+    3739        %EQU E$REDEF_SUB_VAR_OCCUR     = 204;
      134+    3740        %EQU E$COMP_AND_DISPLAY_IN_ANSI= 205;
      135+    3741        %EQU E$ALPHABET_VALUE_GTR_128  = 206;
      136+    3742        %EQU E$IDEN_PGPH_SEQ_ERR       = 207;
      137+    3743        %EQU E$VALUE_IN_CONTEXT_NOT_ANSI = 208;
      138+    3744        %EQU E$SET_NOT_ANSI            = 209;
      139+    3745        %EQU E$SUBSCRIPT_EXPECTED_ANSI = 210;
      140+    3746        %EQU E$LEVEL_CHECK             = 211;
      141+    3747        %EQU E$OBSOLETE                = 212;
      142+    3748        %EQU E$NON_ANSI_FILE_ORG       = 213;
      143+    3749        %EQU E$NON_ANSI_FILE_ATTR      = 214;
      144+    3750        %EQU E$ALPHABET_OMITTED_ANSI   = 215;
      145+    3751        %EQU E$NON_ANSI_STATEMENT      = 216;
      146+    3752        %EQU E$BLOCK_NON_ANSI          = 217;
      147+    3753        %EQU E$ANSI_LEVEL_SEQ_ERROR    = 218;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:100  
      148+    3754        %EQU E$REDEF_OBJ_VAR_OCCUR     = 219;
      149+    3755        %EQU E$NON_ANSI_ORDINAL        = 220;
      150+    3756        %EQU E$9_NOT_LEGAL_AFTER_DEC_PT= 221;
      151+    3757        %EQU E$CONT_COL_8_11_ERROR     = 222;
      152+    3758        %EQU E$LAST_200_MSG_NO         = 222;
      153+    3759
      154+    3760
      155+    3761        /* -------------- */
      156+    3762        /* ERRORS 300-399 - Fatal error messages */
      157+    3763        /* -------------- */
      158+    3764        /* FIRST FATAL */
      159+    3765
      160+    3766        %EQU FIRST_FATAL               = 300;
      161+    3767
      162+    3768        %EQU E$DUPLICATE_CURSOR_NAME  = 300 ;
      163+    3769        %EQU E$CURSOR_NOT_DEFINED     = 301;
      164+    3770        %EQU E$ITEM_NOT_CURSOR        = 302;
      165+    3771        %EQU E$INVALID_CURSOR_NAME    = 303 ;
      166+    3772        %EQU E$HOST_NOT_DEFINED       = 304 ;
      167+    3773        %EQU E$ILLEGAL_PIC_STRING     = 305 ;
      168+    3774        %EQU E$MISSING_SIGN_CLAUSE    = 306 ;
      169+    3775        %EQU E$ILLEGAL_LEVEL_NUMBER   = 307 ;
      170+    3776        %EQU E$SQL_NOT_AVAILABLE      = 308 ;
      171+    3777        %EQU E$USE_SQL_OPTION         = 309 ;
      172+    3778        %EQU E$SQL_HEX                = 310 ;
      173+    3779        %EQU E$DUPLICATED_INCLUDE_SQLCA = 311;
      174+    3780        %EQU E$INCLUDE_SQLCA_NOT_EXIST = 312;
      175+    3781        %EQU E$INTERNAL_BUFFER_OVERFLOW = 313;
      176+    3782        %EQU E$USING_WITH_DYNAMIC_SQL_ONLY = 314;
      177+    3783        %EQU E$WRONG_ARG_NUM            = 315;
      178+    3784        %EQU E$INCORRECT_FUNCTION_NAME  = 316;
      179+    3785        %EQU E$INVALID_TYPE             = 317;
      180+    3786        %EQU E$WRONG_ORDER              = 318;
      181+    3787        %EQU E$REPORT_CODE_DEVICE_ERR   = 319;
      182+    3788        %EQU E$ILLEGAL_KEY_TYPE         = 320;
      183+    3789        %EQU E$INCOMPATIBLE_ATTRIB      = 321;
      184+    3790        %EQU E$ILLEGAL_TYPE_31_32_RECORD = 322;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:101  
      185+    3791        %EQU E$LITERAL_ILLEGAL_HERE     = 323;
      186+    3792        %EQU E$REPLACING_WHAT           = 324;
      187+    3793        %EQU E$NOT_IN_REALM             = 325;
      188+    3794        %EQU E$DB_REG_EQUALITY_ERROR    = 326;
      189+    3795        %EQU E$LAST_300_MSG_NO         = 326;
      190+    3796
      191+    3797
      192+    3798        /* -------------- */
      193+    3799        /* ERRORS 400-499 - Fatal error messages (cont) */
      194+    3800        /* -------------- */
      195+    3801        %EQU E$UNDER_SCORE_ILLEGAL     = 400;
      196+    3802        %EQU E$PARSE_ERROR             = 401;
      197+    3803        %EQU E$SUBSCRIPT_OUT_OF_BOUNDS = 402 ;
      198+    3804        %EQU E$SUB_SCHEMA_NOT_RANDOM   = 403;
      199+    3805        %EQU E$KEY_TOO_LONG            = 404;
      200+    3806        %EQU E$NO_LABEL                = 405 ;
      201+    3807        %EQU E$NO_LABEL_DATA           = 406 ;
      202+    3808        %EQU E$DUP_LABEL               = 407 ;
      203+    3809        %EQU E$SORT_FILE_SAME_AREA     = 408 ;
      204+    3810        %EQU E$REDEFINES_OVERFLOW      = 409 ;
      205+    3811        %EQU E$LABEL_DATA_USAGE        = 410 ;
      206+    3812        %EQU E$PARA_DATA_USAGE         = 411 ;
      207+    3813        %EQU E$SECTION_DATA_USAGE      = 412 ;
      208+    3814        %EQU E$SECTION_PARA_USAGE      = 413 ;
      209+    3815        %EQU E$NO_LABEL_IN_SECTION     = 414 ;
      210+    3816        %EQU E$SYNTAX_INS              = 415 ;
      211+    3817        %EQU E$SYNTAX_DEL              = 416 ;
      212+    3818        %EQU E$SYNTAX_REP              = 417 ;
      213+    3819        %EQU E$INVALID_LEVEL_NUMBER    = 418 ;
      214+    3820        %EQU E$EXTRA_END_PROGRAM      = 419;
      215+    3821        %EQU E$END_PROGRAM_INSERTED   = 420;
      216+    3822        %EQU E$WRONG_END_PROGRAM = 421;
      217+    3823        %EQU E$AMBIGUOUS_REFERENCE     = 422 ;
      218+    3824        %EQU E$UNDECLARED_DATA_NAME    = 423 ;
      219+    3825        %EQU E$NOT_IMPLEMENTED       = 424 ;
      220+    3826        %EQU E$ITEM_IN_MULTIPLE_BLOCKS = 425;
      221+    3827        %EQU E$MISSING_DATA_PIC_CLAUSE = 426 ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:102  
      222+    3828        %EQU E$INVALID_DISPLAY_CONST   = 427 ;
      223+    3829        %EQU E$INSPECT_ID3_N_NE_ID5_N  = 428 ;
      224+    3830        %EQU E$INSPECT_NOT_1_BYTE      = 429 ;
      225+    3831        %EQU E$INSPECT_ID6_N_NE_ID7_N  = 430 ;
      226+    3832        %EQU E$INSPECT_LIT4_SAME_CHAR  = 431 ;
      227+    3833        %EQU E$LEVEL_MUST_BE_01_OR_77  = 432;
      228+    3834        %EQU E$NULL_QUOTE_STRING       = 433 ;
      229+    3835        %EQU E$CONFLICT_USAGE_CLAUSES  = 434 ;
      230+    3836        %EQU E$NO_PIC_USAGE_OR_GROUP   = 435 ;
      231+    3837        %EQU E$CONSOLE_ADV_ERROR       = 436 ;
      232+    3838        %EQU E$RENAMES_VAR_OCCR_ERR    = 437 ;
      233+    3839        %EQU E$WRONG_BLOCK_ORDER       = 438 ;
      234+    3840        %EQU E$EXTERNAL_AND_BLOCK      = 439 ;
      235+    3841        %EQU E$TOO_LARGE_NUM_EXP       = 440 ;
      236+    3842        %EQU E$FILE_NOT_DEFINED        = 441 ;
      237+    3843        %EQU E$MOVE_NON_INT_TO_TYA     = 442 ;
      238+    3844        %EQU E$MOVE_NUM_TO_ALPHABETIC  = 443 ;
      239+    3845        %EQU E$NO_LETTER_USERWORD      = 444 ;
      240+    3846        %EQU E$USERWORD_END_DASH_ERROR = 445 ;
      241+    3847        %EQU E$ONLY_IN_REP_CNT         = 446 ;
      242+    3848        %EQU E$INVALID_CHARACTER       = 447 ;
      243+    3849        %EQU E$END_UNEXPECTED          = 448 ;
      244+    3850        %EQU E$ZERO_LENGTH_PICTURE     = 449 ;
      245+    3851        %EQU E$PIC_LENGTH_MAX          = 450 ;
      246+    3852        %EQU E$CHAR_ILLEGAL_IN_REP_CNT = 451 ;
      247+    3853        %EQU E$ZERO_REP_COUNT_LENGTH   = 452 ;
      248+    3854        %EQU E$REP_CNT_GTR_ZERO        = 453 ;
      249+    3855        %EQU E$CR_DB_AT_END_ONLY       = 454 ;
      250+    3856        %EQU E$BEGINNING_CR_DB_ILL     = 455 ;
      251+    3857        %EQU E$E_NOT_IN_VALID_CONTEXT  = 456 ;
      252+    3858        %EQU E$CHAR_ONLY_APPEAR_ONCE   = 457 ;
      253+    3859        %EQU E$V_AND_DOT_IN_SAME_PIC   = 458 ;
      254+    3860        %EQU E$REFMOD_OUT_OF_BOUNDS    = 459 ;
      255+    3861        %EQU E$ONLY_ONE_SIGN_PER_PIC   = 460 ;
      256+    3862        %EQU E$ONLY_ONE_SUPPRESS_TYPE  = 461 ;
      257+    3863        %EQU E$P_AND_DOT_IN_SAME_PIC   = 462 ;
      258+    3864        %EQU E$DOT_AND_P_IN_SAME_PIC   = 463 ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:103  
      259+    3865        %EQU E$INVALID_CHAR_IN_EXRAD   = 464 ;
      260+    3866        %EQU E$EXRAD_MUST_BE_LAST      = 465 ;
      261+    3867        %EQU E$CHAR_IN_WRONG_CONTEXT   = 466 ;
      262+    3868        %EQU E$ILL_CHAR_FOR_ANE_PIC    = 467 ;
      263+    3869        %EQU E$ILL_CHAR_FOR_N_PIC      = 468 ;
      264+    3870        %EQU E$ILL_CHAR_FOR_NE_PIC     = 469 ;
      265+    3871        %EQU E$CHAR_ONLY_FOR_NE_PIC    = 470 ;
      266+    3872        %EQU E$CHAR_ONLY_FOR_AN_ANE_PIC= 471 ;
      267+    3873        %EQU E$CHAR_ONLY_FOR_ALPHA     = 472 ;
      268+    3874        %EQU E$CHAR_ONLY_FOR_N_PIC     = 473 ;
      269+    3875        %EQU E$CHAR_ONLY_FOR_N_NE_PIC  = 474 ;
      270+    3876        %EQU E$LDG_SIGN_MUST_BE_FIRST  = 475 ;
      271+    3877        %EQU E$LDG_S_MUST_BE_FIRST     = 476 ;
      272+    3878        %EQU E$V_ILL_AFTER_LDG_P       = 477 ;
      273+    3879        %EQU E$TRL_P_ILL_AFTER_V       = 478 ;
      274+    3880        %EQU E$CHAR_ILL_AFTER_P        = 479 ;
      275+    3881        %EQU E$PLUS_EXPECTED_AFTER_E   = 480 ;
      276+    3882        %EQU E$SIGN_EXPECTED_AFTER_E   = 481 ;
      277+    3883        %EQU E$SUPRESS_NOT_LEGAL_HERE  = 482 ;
      278+    3884        %EQU E$TOO_MANY_LITERALS       = 483 ;
      279+    3885        %EQU E$TRL_S_MUST_BE_LAST      = 484 ;
      280+    3886        %EQU E$TRL_PLUS_OR_MINUS_LAST  = 485 ;
      281+    3887        %EQU E$PIC_NEEDS_NO_SOURCE     = 486 ;
      282+    3888        %EQU E$FATAL_SYSTEM_ERR        = 487;
      283+    3889        %EQU E$ALTER_SECTION_ERROR     = 488 ;
      284+    3890        %EQU E$ALTER_PARA_ERROR        = 489 ;
      285+    3891        %EQU E$BAD_ORDINAL_CHARACTER   = 490 ;
      286+    3892        %EQU E$TYPE_4_FIND_ILLEGAL     = 491 ;
      287+    3893        %EQU E$SAME_GLOBAL_NAMES       = 492;
      288+    3894        %EQU E$OCCURS_IN_REDEF         = 493 ;
      289+    3895        %EQU E$NON_MATCH_REDEF_LEVEL   = 494 ;
      290+    3896        %EQU E$NON_ADJACENT_REDEF      = 495 ;
      291+    3897        %EQU E$INVALID_TO_SUBSCRIPT    = 496;
      292+    3898        %EQU E$DATA_NAME_QUAL_ERROR    = 497 ;
      293+    3899        %EQU E$ILLEGAL_CHARS_IN_VALUE  = 498 ;
      294+    3900        %EQU E$VALUE_AND_REDEFINES     = 499 ;
      295+    3901
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:104  
      296+    3902        %EQU E$LAST_400_MSG_NO         = 499 ;
      297+    3903
      298+    3904
      299+    3905
      300+    3906        /* -------------- */
      301+    3907        /* ERRORS 500-599 - Fatal error messages (cont) */
      302+    3908        /* -------------- */
      303+    3909        %EQU E$VALUE_AND_OCCURS        = 500;
      304+    3910        %EQU E$CANNOT_REDEFINE         = 501;
      305+    3911        %EQU E$USING_VARS_ONLY_ONCE    = 502;
      306+    3912        %EQU E$MUST_BE_IN_LINKAGE      = 503;
      307+    3913        %EQU E$MOVE_ALPHA_TYAE_TO_NUM  = 504;
      308+    3914        %EQU E$NON_INTEGER_ERROR       = 505 ;
      309+    3915        %EQU E$QUOTED_STRING_EXPECTED  = 506;
      310+    3916        %EQU E$ONLY_66_IN_RENAMES      = 507;
      311+    3917        %EQU E$ILL_START_LEVEL_RENAMES = 508;
      312+    3918        %EQU E$ILL_END_LEVEL_RENAMES   = 509;
      313+    3919        %EQU E$END_RENAMES_FOUND_FIRST = 510;
      314+    3920        %EQU E$RENAME_MUST_FOLLOW_01   = 511;
      315+    3921        %EQU E$OCCURS_IN_RENAMES       = 512;
      316+    3922        %EQU E$RENAME_START_CONTAIN_END= 513;
      317+    3923        %EQU E$INCONSISTENT_ARGS       = 514;
      318+    3924        %EQU E$NUMERIC_ITEM_TOO_LONG   = 515;
      319+    3925        %EQU E$MULTIPLE_VALUE_IS       = 516;
      320+    3926        %EQU E$TWO_PROCS_SAME_NAME     = 517;
      321+    3927        %EQU E$ONLY_1_66_77_88         = 518;
      322+    3928        %EQU E$ENTRY_ON_MAIN_PROG      = 519;
      323+    3929        %EQU E$CLAUSE_MUST_IN_INTL_PROC= 520;
      324+    3930        %EQU E$MULTIPLE_SECTIONS       = 521;
      325+    3931        %EQU E$LEVEL_77_TO_01          = 522;
      326+    3932        %EQU E$DEPEND_ATTR_NOT_MATCH_OCCURS = 523;
      327+    3933        %EQU E$DEPENDING_MISSING       = 524;
      328+    3934        %EQU E$EXTERNAL_SAME_AREA      = 525;
      329+    3935        %EQU E$SAME_EXTERNAL_NAMES     = 526;
      330+    3936        %EQU E$NO_VALUE_FOR_EXTERNAL   = 527;
      331+    3937        %EQU E$MISPOSITION_OF_88      = 528;
      332+    3938        %EQU E$NO_VALUE_FOR_INDEX      = 529;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:105  
      333+    3939        %EQU E$ONLY_UNSIGNED_TYA_TO_NUM= 530;
      334+    3940        %EQU E$SYMBOL_TOO_LARGE        = 531;
      335+    3941        %EQU E$JUST_SYNC_IN_COND_GROUP = 532;
      336+    3942        %EQU E$DISPLAY_ONLY_IN_COND_GROUP = 533;
      337+    3943        %EQU E$ILLEGAL_SYMBOL          = 534;
      338+    3944        %EQU E$INITIALIZE_RENAMES      = 535;
      339+    3945        %EQU E$SEGMENT_LIMIT_ERROR     = 536;
      340+    3946        %EQU E$REPORT_SAME_RECORD      = 537;
      341+    3947        %EQU E$SEGMENT_NUMBER_ERROR    = 538;
      342+    3948        %EQU E$ERR_ACCESS_W_REPORT     = 539;
      343+    3949        %EQU E$DUP_SEC_W_DIFF_SEG#     = 540;
      344+    3950        %EQU E$ALTER_IND_GOTO          = 541;
      345+    3951        %EQU E$ERROR_DATA_NAME         = 542;
      346+    3952        %EQU E$NO_PIC_ALLOWED_ON_GROUP = 543;
      347+    3953        %EQU E$CATALOG_NAME_TOO_LONG   = 544;
      348+    3954        %EQU E$OCCURS_ON_LEVEL_1       = 545;
      349+    3955        %EQU E$LEVEL_1_OR_77_AT_TOP    = 546;
      350+    3956        %EQU E$PERFORM_BY_ZERO         = 547;
      351+    3957        %EQU E$SYNC_IN_INDEX           = 548 ;
      352+    3958        %EQU E$VALUE_NUMERIC_ERR  = 549;
      353+    3959        %EQU E$COMMA_IN_NUMBER         = 550;
      354+    3960        %EQU E$USING_SCALAR_W_SUBSCRIPT = 551;
      355+    3961        %EQU E$REPLACE_BY_EXPECTED     = 552;
      356+    3962        %EQU E$REPLACE_PERIOD_EXPECTED = 553;
      357+    3963        %EQU E$REPLACE_NULL_SPEC       = 554;
      358+    3964        %EQU E$COPY_PERIOD_EXPECTED    = 555;
      359+    3965        %EQU E$REPLACING_BY_WHAT       = 556;
      360+    3966        %EQU E$INVALID_SUBSCRIPT       = 557;
      361+    3967        %EQU E$OPEN_OPTIONAL_OUTPUT       = 558;
      362+    3968        %EQU E$REDEFINES_ORDER_ERR     = 559;
      363+    3969        %EQU E$DUP_DD_CLAUSE           = 560;
      364+    3970        %EQU E$PIC_ON_INDEX            = 561;
      365+    3971        %EQU E$PIC_STR_TOO_LONG        = 562;
      366+    3972        %EQU E$ALPHA_PIC_ON_NUMERIC_ITEM = 563;
      367+    3973        %EQU E$BWZ_AND_ASTERISK        = 564;
      368+    3974        %EQU E$LVL_77_NOT_VALID_HERE   = 565;
      369+    3975        %EQU E$INVALID_NUMERIC_LIMIT   = 566;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:106  
      370+    3976        %EQU E$ONLY_INT_EXPR_FOR_REFMOD= 567;
      371+    3977        %EQU E$NUMERIC_TYPE_EXPECTED   = 568;
      372+    3978        %EQU E$INVALID_ACCEPT_TYPE     = 569;
      373+    3979        %EQU E$INVALID_MOVE_OPERANDS   = 570;
      374+    3980        %EQU E$INVALID_MATH_OPERANDS   = 571;
      375+    3981        %EQU E$INVALID_COMP_OPERANDS   = 572;
      376+    3982        %EQU E$JUSTIFIED_NOT_ON_ALPHA  = 573;
      377+    3983        %EQU E$JUSTIFIED_NOT_ELEMENTARY= 574;
      378+    3984        %EQU E$VALUE_REDUNDANT         = 575; /* Moved from 138 */
      379+    3985        %EQU E$BWZ_NOT_ELEMENTARY      = 576;
      380+    3986        %EQU E$NO_PIC_WITH_BWZ         = 577;
      381+    3987        %EQU E$BWZ_MUST_BE_DISPLAY     = 578;
      382+    3988        %EQU E$EXTERNAL_IN_WRONG_CONTEXT=579;
      383+    3989        %EQU E$EXT_GLOBAL_NO_DATA_NAME = 580;
      384+    3990        %EQU E$EXTERNAL_AND_REDEFINES  = 581;
      385+    3991        %EQU E$GLOBAL_IN_WRONG_CONTEXT = 582;
      386+    3992        %EQU E$JUST_SYNC_UNDER_VALUE   = 583;
      387+    3993        %EQU E$INVALID_LEVEL#_FOR_REDEF= 584;
      388+    3994        %EQU E$REDEF_IN_FD_OR_CD       = 585;
      389+    3995        %EQU E$PIC_MUST_HAVE_SIGN      = 586;
      390+    3996        %EQU E$NUM_CONST_W_ALPHA_ITEM  = 587;
      391+    3997        %EQU E$CONSTANT_REQUIRES_VALUE = 588;
      392+    3998        %EQU E$MULTIPLE_VALUES_ONLY_FOR_88 = 589;
      393+    3999        %EQU E$THRU_CLAUSE_BUT_NOT_88  = 590;
      394+    4000        %EQU E$DUPLICATE_USER_LABEL_PROC = 591;
      395+    4001        %EQU E$INCORRECT_PARA_NAME     = 592;
      396+    4002        %EQU E$INVALID_CORRES_ID      = 593;
      397+    4003        %EQU E$AMBIGUOUS_CORRES_REF    = 594;
      398+    4004        %EQU E$INDEX_MUST_BE_UNIQUE    = 595;
      399+    4005        %EQU E$INDEX_MUST_HAVE_OCCURS  = 596;
      400+    4006        %EQU E$CONDITION_EXPECTED      = 597;
      401+    4007        %EQU E$SUB_IN_WRONG_ORDER      = 598;
      402+    4008        %EQU E$WRONG_#_OF_SUBS         = 599;
      403+    4009
      404+    4010        %EQU E$LAST_500_MSG_NO         = 599;
      405+    4011
      406+    4012
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:107  
      407+    4013        /* -------------- */
      408+    4014        /* ERRORS 600-699 - Fatal error messages (cont) */
      409+    4015        /* -------------- */
      410+    4016        %EQU E$INVALID_SET             = 600;
      411+    4017        %EQU E$SUBSCRIPT_EXPECTED      = 601;
      412+    4018        %EQU E$NO_SIGN_S_FOUND         = 602;
      413+    4019        %EQU E$WRONG_SIGN_TYPE         = 603;
      414+    4020        %EQU E$SPARE_604               = 604;
      415+    4021        %EQU E$INT2_LSS_INT1    = 605;
      416+    4022        %EQU E$SEG_NUM_OVER_49         = 606;
      417+    4023        %EQU E$INDEX_IN_INITIALIZE     = 607;
      418+    4024        %EQU E$REDEFINES_NOT_DEFINED   = 608;
      419+    4025        %EQU E$MUST_BE_DISPLAY         = 609;
      420+    4026        %EQU E$MUST_BE_INTEGER         = 610;
      421+    4027        %EQU E$NO_P_IN_PICTURE         = 611;
      422+    4028        %EQU E$INSUFFICIENT_SIGNIFICANCE = 612;
      423+    4029        %EQU E$EDITED_INVALID          = 613;
      424+    4030        %EQU E$JUSTIFIED_INVALID       = 614;
      425+    4031        %EQU E$DEPEND_IS_UNDER_OCCURS  = 615;
      426+    4032        %EQU E$INITIALIZE_WITH_DEPENDING = 616;
      427+    4033        %EQU E$ONLY_VALUE_ON_COND_NAME = 617;
      428+    4034        %EQU E$CONDITION_NAME_EXPECTED = 618;
      429+    4035        %EQU E$SEARCH_ID_ERROR         = 619;
      430+    4036        %EQU E$MNEMONIC_NAME_EXPECTED  = 620;
      431+    4037        %EQU E$INVALID_SUBSCRIPT_CONTEXT = 621;
      432+    4038        %EQU E$OCCURS_BETWEEN_KEY_AND_ARRAY = 622;
      433+    4039        %EQU E$KEY_MUST_BE_IN_GROUP    = 623;
      434+    4040        %EQU E$KEY_IS_ARRAY            = 624;
      435+    4041        %EQU E$INVALID_DISPLAY_UPON    = 625;
      436+    4042        %EQU E$ERROR_IN_ALPHABET_LITERAL = 626;
      437+    4043        %EQU E$LITERAL_GTR_1_CHAR       = 627;
      438+    4044        %EQU E$SEARCH_KEY_TYPE         = 628;
      439+    4045        %EQU E$SEARCH_COMP_VALUE_MISSING = 629;
      440+    4046        %EQU E$SEARCH_SINGLE_COND_VALUE = 630;
      441+    4047        %EQU E$SEARCH_EXTRA_COMP_VALUE = 631;
      442+    4048        %EQU E$SEARCH_CONSEC_KEYS      = 632;
      443+    4049        %EQU E$SEARCH_NO_TABLE_KEY_INDEX = 633;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:108  
      444+    4050        %EQU E$ALPHABET_NOT_DEFINED    = 634;
      445+    4051        %EQU E$DIFF_#_INTS_AND_DNS     = 635;
      446+    4052        %EQU E$NUMBER_GTR_512          = 636;
      447+    4053        %EQU E$SYMBOLIC_CHAR_NOT_UNIQUE= 637;
      448+    4054        %EQU E$REPORT_DEVICE_ERROR    = 638;
      449+    4055        %EQU E$EVAL_INCOMPATIBLE_TYPES = 639;
      450+    4056        %EQU E$EVAL_NOT_EXPR_ILLEGAL = 640;
      451+    4057        %EQU E$EVAL_EXPR_COUNT_ERROR = 641;
      452+    4058        %EQU E$CLASS_ON_NON_IDENTIFIER = 642;
      453+    4059        %EQU E$CLASS_ALPHABETIC_NOT_TYA = 643;
      454+    4060        %EQU E$CLASS_NUMERIC_ON_ALPHABETIC = 644;
      455+    4061        %EQU E$NON_SEQUENTIAL_ALPHA_CLAUSE = 645;
      456+    4062        %EQU E$INVALID_CURRENCY_SIGN       = 646;
      457+    4063        %EQU E$EMBEDDED_QUOTES          = 647;
      458+    4064        %EQU E$MULTIPLE_CURRENCY_SIGNS  = 648;
      459+    4065        %EQU E$INVALID_ACCEPT_FROM      = 649;
      460+    4066        %EQU E$ALPHABET_VALUE_GTR_512   = 650;
      461+    4067        %EQU E$TOO_MANY_ALPHABET_VALUES = 651;
      462+    4068        %EQU E$ILLEGAL_DELIMITER_CLAUSE = 652 ;
      463+    4069        %EQU E$ILLEGAL_COUNT_CLAUSE     = 653 ;
      464+    4070        %EQU E$ALPHANUMERIC_TYPE_EXPECTED = 654 ;
      465+    4071        %EQU E$ID7_TOO_SMALL            = 655 ;
      466+    4072        %EQU E$INDEX_IN_CONSTANT_SECT   = 656;
      467+    4073        %EQU E$RENAMES_WITH_PIC         = 657;
      468+    4074        %EQU E$CLAUSE_NOT_VALID        = 658;
      469+    4075        %EQU E$KEY_MUST_HAVE_OCCURS    = 659;
      470+    4076        %EQU E$REDEF_REDEF_ERROR       = 660;
      471+    4077        %EQU E$OCC_DEP_MUST_BE_LAST    = 661;
      472+    4078        %EQU E$NON_UNIQUE_FILENAME     = 662;
      473+    4079        %EQU E$ILLEGAL_DEVICE          = 663;
      474+    4080        %EQU E$ACCESS_AND_ORG_DIFF     = 664;
      475+    4081        %EQU E$MUST_BE_TAPE            = 665;
      476+    4082        %EQU E$DUPLICATES_NO_KEY       = 666;
      477+    4083        %EQU E$ALPHABET_CONTAINS_LITERAL = 667;
      478+    4084        %EQU E$FILE_NOT_SELECTED       = 668;
      479+    4085        %EQU E$NO_KEY_SPECIFIED        = 669;
      480+    4086        %EQU E$INVALID_CALL_ARGUMENT   = 670;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:109  
      481+    4087        %EQU E$2_FILES_REQUIRED        = 671;
      482+    4088        %EQU E$FILE_TYPE_EXPECTED      = 672;
      483+    4089        %EQU E$MUST_BE_1_CHAR_LONG     = 673;
      484+    4090        %EQU E$MUST_BE_IN_WORK_STORAGE = 674;
      485+    4091        %EQU E$CLAUSE_INVALID_WITH_ORG = 675;
      486+    4092        %EQU E$MUST_BE_2_CHAR_LONG     = 676;
      487+    4093        %EQU E$MUST_BE_GTR_ZERO        = 677;
      488+    4094        %EQU E$MUST_BE_ELEMENTARY      = 678;
      489+    4095        %EQU E$FOOTING_GTR_LINES       = 679;
      490+    4096        %EQU E$LINES_MUST_BE_SPECIFIED = 680;
      491+    4097        %EQU E$MUST_BE_UNSIGNED        = 681;
      492+    4098        %EQU E$RECORD_DEFN_LSS_REC_CLAUSE = 682;
      493+    4099        %EQU E$RECORD_DEFN_GTR_REC_CLAUSE = 683;
      494+    4100        %EQU E$CLAUSE_NOT_VALID_WITH_ORG  = 684;
      495+    4101        %EQU E$REL_KEY_IN_FD              = 685;
      496+    4102        %EQU E$READ_KEY_FOR_SEQ           = 686;
      497+    4103        %EQU E$READ_KEY_INDEXED_KEYED_ONLY = 687;
      498+    4104        %EQU E$KEY_NOT_IN_FILE_DESC        = 688;
      499+    4105        %EQU E$ORG_NOT_SEQ_WITH_CLAUSE     = 689;
      500+    4106        %EQU E$WRONG_ORG_WITH_KEY          = 690;
      501+    4107        %EQU E$OCCURS_DEPEND_UNDER_OCCURS  = 691;
      502+    4108        %EQU E$GLOBAL_INVALID_IN_USE       = 692;
      503+    4109        %EQU E$ONLY_ONE_USE_OF_TYPE        = 693;
      504+    4110        %EQU E$ONLY_ONE_USE_PER_FILE       = 694;
      505+    4111        %EQU E$NEXT_WITH_INVALID           = 695;
      506+    4112        %EQU E$INVALID_WITH_SEQ            = 696;
      507+    4113        %EQU E$MUST_BE_COMP_6              = 697;
      508+    4114        %EQU E$READ_KEY_NOT_VALID          = 698;
      509+    4115        %EQU E$FILE_RECORD_REQ             = 699;
      510+    4116
      511+    4117        %EQU E$LAST_600_MSG_NO             = 699;
      512+    4118
      513+    4119
      514+    4120
      515+    4121        /* -------------- */
      516+    4122        /* ERRORS 700-799 - Fatal error messages (cont) */
      517+    4123        /* -------------- */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:110  
      518+    4124        %EQU E$NEXT_WITH_RANDOM            = 700;
      519+    4125        %EQU E$AT_END_FOR_RANDOM           = 701;
      520+    4126        %EQU E$NEXT_REQ_FOR_DYNAMIC        = 702;
      521+    4127        %EQU E$ADVANCING_SEQ_ONLY          = 703;
      522+    4128        %EQU E$WRITE_EOP_SEQ_ONLY          = 704;
      523+    4129        %EQU E$WRITE_ADV_EOP               = 705;
      524+    4130        %EQU E$WRITE_EOP_LINAGE            = 706;
      525+    4131        %EQU E$INVALID_SEQ_ORGANIZATION           = 707;
      526+    4132        %EQU E$WRITE_INVALID_OR_USE_PROC   = 708;
      527+    4133        %EQU E$WRITE_ADVANCING_LINAGE      = 709;
      528+    4134        %EQU E$POSITIVE_INTEGER_EXPECTED  = 710;
      529+    4135        %EQU E$NOT_VALID_IN_CONTEXT        = 711;
      530+    4136        %EQU E$OPEN_CLOSE_SEQ_ONLY         = 712;
      531+    4137        %EQU E$NON_NEGATIVE_INTEGER_EXP    = 713;
      532+    4138        %EQU E$ILLEGAL_CHANNEL#            = 714;
      533+    4139        %EQU E$INVALID_ADVANCING_TYPE      = 715;
      534+    4140        %EQU E$NO_FD_SPECIFIED             = 716;
      535+    4141        %EQU E$INVALID_RETENTION_ITEM      = 717;
      536+    4142        %EQU E$FILE_NAME_TOO_LONG          = 718;
      537+    4143        %EQU E$DELETE_FOR_SEQ_FILE         = 719;
      538+    4144        %EQU E$INVALID_SEQ_ACCESS          = 720;
      539+    4145        %EQU E$REWRITE_INVALID_REL_SEQ     = 721;
      540+    4146        %EQU E$START_FOR_RANDOM            = 722;
      541+    4147        %EQU E$RELATIVE_START_KEY          = 723;
      542+    4148        %EQU E$START_KEY_NOT_ALPHANUMERIC  = 724;
      543+    4149        %EQU E$START_INDEXED_KEY           = 725;
      544+    4150        %EQU E$START_SEQUENTIAL            = 726;
      545+    4151        %EQU E$NO_VARIABLE_OCCURRENCE      = 727;
      546+    4152        %EQU E$FILE_IN_SAME_CLAUSE_TWICE   = 728;
      547+    4153        %EQU E$NOM_KEY_WITH_REL_KEY        = 729;
      548+    4154        %EQU E$SWITCH_EXPECTED             = 730;
      549+    4155        %EQU E$WRITE_POS_IDENT             = 731;
      550+    4156        %EQU E$WRITE_POS_SEQ_ONLY          = 732;
      551+    4157        %EQU E$WRITE_POS_LINAGE            = 733;
      552+    4158        %EQU E$WRITE_POS_EOP_CLAUSE        = 734;
      553+    4159        %EQU E$FD_ALREADY_EXISTS           = 735;
      554+    4160        %EQU E$ALPHABET_EXPECTED           = 736;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:111  
      555+    4161        %EQU E$KEY_IN_FILE_RECORD          = 737;
      556+    4162        %EQU E$KEY_WITH_OCCURS             = 738;
      557+    4163        %EQU E$SD_RECORD_REQ               = 739;
      558+    4164        %EQU E$RECORD_COUNT_NON_TYA        = 740;
      559+    4165        %EQU E$CLASS_EXPECTED              = 741;
      560+    4166        %EQU E$START_KEYED_KEY             = 742;
      561+    4167        %EQU E$INVALID_DISPLAY_TYPE       = 743;
      562+    4168        %EQU E$MISSING_COPY_FILE1          = 744;
      563+    4169        %EQU E$MISSING_COPY_FILE2          = 745;
      564+    4170        %EQU E$REPLACE_SYNTAX_ERROR        = 746;
      565+    4171        %EQU E$SUB_SCHEMA_NOT_PRESENT      = 747;
      566+    4172        %EQU E$ERROR_READING_SUB_SCHEMA    = 748;
      567+    4173        %EQU E$SUB_SCHEMA_NOT_TRANSLATED   = 749;
      568+    4174        %EQU E$SCHEMA_NOT_KNOWN            = 750;
      569+    4175        %EQU E$SUB_SCHEMA_NOT_KNOWN        = 751;
      570+    4176        %EQU E$PRIVACY_KEY_MISSING         = 752;
      571+    4177        %EQU E$PRIVACY_KEY_NO_MATCH        = 753;
      572+    4178        %EQU E$WRITE_ERROR                 = 754;
      573+    4179        %EQU E$DML_SET_SENDER_ERROR        = 755;
      574+    4180        %EQU E$DML_SET_RECEIVER_ERROR      = 756;
      575+    4181        %EQU E$DB_EXCEPTION_ALL_ERROR      = 757;
      576+    4182        %EQU E$DB_EXCEPT_OTHER_ERROR       = 758;
      577+    4183        %EQU E$DB_EXCEPT_DUPLICATE         = 759;
      578+    4184        %EQU E$DB_EXCEPT_NOT_VALID         = 760;
      579+    4185        %EQU E$NO_VALID_SUB_SCHEMA         = 761;
      580+    4186        %EQU E$DUPLICATE_RECORD_ALL        = 762;
      581+    4187        %EQU E$DUPLICATE_SET_ALL           = 763;
      582+    4188        %EQU E$ITEM_NOT_REALM              = 764;
      583+    4189        %EQU E$ERROR_TEMP_REALM_RETRIEVAL  = 765;
      584+    4190        %EQU E$GET_LIST_IGNORED            = 766;
      585+    4191        %EQU E$ITEM_NOT_FIELD              = 767;
      586+    4192        %EQU E$ITEM_NOT_DB_KEY             = 768;
      587+    4193        %EQU E$ITEM_NOT_A_RECORD           = 769;
      588+    4194        %EQU E$ITEM_NOT_REALM_OR_SET       = 770;
      589+    4195        %EQU E$LOCATION_MODE_NOT_CALC      = 771;
      590+    4196        %EQU E$ITEM_NOT_A_SET              = 772;
      591+    4197        %EQU E$INVALID_CLAUSE_FOR_DB_KEY   = 773;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:112  
      592+    4198        %EQU E$INVALID_MEMBER              = 774;
      593+    4199        %EQU E$REALM_CURRENCY_ERROR        = 775;
      594+    4200        %EQU E$RECORD_CURRENCY_ERROR       = 776;
      595+    4201        %EQU E$DB_KEY_CURRENCY_ERROR       = 777;
      596+    4202        %EQU E$CURRENCY_ERROR              = 778;
      597+    4203        %EQU E$DB_KEY_CURRENCY_ERROR_2     = 779;
      598+    4204        %EQU E$ELEMENTARY_CURRENCY_ERROR   = 780;
      599+    4205        %EQU E$ITEM_NOT_RECORD_FIELD       = 781;
      600+    4206        %EQU E$USE_PRIVACY_TYPE_ERROR      = 782;
      601+    4207        %EQU E$DB_KEY_EQUALITY_ERROR       = 783;
      602+    4208        %EQU E$DB_KEY_COMPARISON_ERROR     = 784;
      603+    4209        %EQU E$ITEM_NOT_A_KEY              = 785;
      604+    4210        %EQU E$MULTIPLE_SET_CONDITIONS         = 786;
      605+    4211        %EQU E$MULTIPLE_FILE_ERROR         = 787;
      606+    4212        %EQU E$DUPLICATE_SUB_SCHEMA_SECTION = 788;
      607+    4213        %EQU E$ILLEGAL_DML_REF             = 789;
      608+    4214        %EQU E$DB_KEY_CURRENCY_ERROR_3     = 790;
      609+    4215        %EQU E$FIELD_NOT_IN_RECORD         = 791;
      610+    4216        %EQU E$ILLEGAL_GRAPHIC_LITERAL     = 792;
      611+    4217        %EQU E$GRAPHIC_LITERAL_ODD         = 793;
      612+    4218        %EQU E$GRAPHIC_LITERAL_KE_KS_ERROR = 794;
      613+    4219        %EQU E$MIXING_TYN_WITH_TYA         = 795;
      614+    4220        %EQU E$PIC_N_ILLEGAL               = 796;
      615+    4221        %EQU E$ILLEGAL_GRAPHIC_CHARACTER   = 797;
      616+    4222        %EQU E$ARG_MISMATCH                = 798;
      617+    4223        %EQU E$INTERNAL_COPY               = 799;
      618+    4224
      619+    4225        %EQU E$LAST_700_MSG_NO             = 799;
      620+    4226
      621+    4227
      622+    4228
      623+    4229        /* -------------- */
      624+    4230        /* ERRORS 800-899 - Fatal error messages (cont) */
      625+    4231        /* -------------- */
      626+    4232        %EQU E$ERR_CLAUSE_IN_REP_01_ENTRY    = 800;
      627+    4233        %EQU E$TYPE_CLAUSE_MISSING     = 801;
      628+    4234        %EQU E$ERR_LEVEL_AND_01_ASSUMED = 802;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:113  
      629+    4235        %EQU E$ERR_LEVEL_AND_49_ASSUMED = 803;
      630+    4236        %EQU E$SEPARATE_MUST_SPECIFIED = 804;
      631+    4237        %EQU E$ERR_CLAUSE_IN_GROUP_ENTRY = 805;
      632+    4238        %EQU E$ERR_CLAUSE1_WITH_CLAUSE2   = 806;
      633+    4239        %EQU E$SUM_MUST_BE_NUMERIC     = 807;
      634+    4240        %EQU E$SUM_MUST_IN_CF          = 808;
      635+    4241        %EQU E$ERR_RESET_IN_SUM        = 809;
      636+    4242        %EQU E$GROUP_IND_IN_DETAIL_ONLY  = 810;
      637+    4243        %EQU E$GROUP_IND_IN_PRINTABLE_ONLY  = 811;
      638+    4244        %EQU E$TYPE_IN_01_ONLY         = 812;
      639+    4245        %EQU E$ONE_REPORT_HEADING_ONLY = 813;
      640+    4246        %EQU E$ONE_PAGE_HEADING_ONLY   = 814;
      641+    4247        %EQU E$ONE_PAGE_FOOTING_ONLY   = 815;
      642+    4248        %EQU E$ONE_REPORT_FOOTING_ONLY = 816;
      643+    4249        %EQU E$ONE_CONTROL_FOOT_FINAL_ONLY = 817;
      644+    4250        %EQU E$ONE_CONTROL_HEAD_FINAL_ONLY = 818;
      645+    4251        %EQU E$ONLY_W_PAGE_IN_RD       = 819;
      646+    4252        %EQU E$ONLY_CONTROL_FINAL_IN_RD = 820;
      647+    4253        %EQU E$REPORT_FILE_W_01_ENTRY  = 821;
      648+    4254        %EQU E$RECORD_MISS_FROM_FD     = 822;
      649+    4255        %EQU E$REPORT_NAME_NOT_DECL    = 823;
      650+    4256        %EQU E$RD_ALREADY_EXISTS       = 824;
      651+    4257        %EQU E$INT_MUST_GTR_EQU_1      = 825;
      652+    4258        %EQU E$NUM_IS_TOO_SMALL        = 826;
      653+    4259        %EQU E$NUM_EXCEED_999          = 827;
      654+    4260        %EQU E$ERR_NAME_IN_CONTROL     = 828;
      655+    4261        %EQU E$DUP_CONTROL_NAME        = 829;
      656+    4262        %EQU E$DCL_IN_REPORT           = 830;
      657+    4263        %EQU E$VAR_OCCUR_NAME          = 831;
      658+    4264        %EQU E$ERR_NEXT_PAGE           = 832;
      659+    4265        %EQU E$NAME_NOT_IN_CONTROL_CLAUSE = 833;
      660+    4266        %EQU E$DUP_REF_CONTROL_NAME    = 834;
      661+    4267        %EQU E$LINE_UNDER_LINE         = 835;
      662+    4268        %EQU E$LINE_W_NO_PAGE          = 836;
      663+    4269        %EQU E$ABSOLUTE_FOLLOW_RELATIVE = 837;
      664+    4270        %EQU E$ABSOLUTE_NOT_ASCENDING  = 838;
      665+    4271        %EQU E$NEXT_PAGE_NOT_FIRST     = 839;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:114  
      666+    4272        %EQU E$NEXT_PAGE_IN_WRONG_GRP  = 840;
      667+    4273        %EQU E$NEXT_GROUP_NOT_IN_01    = 841;
      668+    4274        %EQU E$NEXT_GROUP_IN_WRONG_GRP = 842;
      669+    4275        %EQU E$NEXT_GROUP_PAGE_IN_PF   = 843;
      670+    4276        %EQU E$NEXT_GROUP_W_NO_PAGE    = 844;
      671+    4277        %EQU E$NO_LINE_FOR_COLUMN      = 845;
      672+    4278        %EQU E$FIELD_OVERLAPPED        = 846;
      673+    4279        %EQU E$NEXT_GROUP_W_NO_LINE    = 847;
      674+    4280        %EQU E$LINE_NOT_ABS_IN_PF      = 848;
      675+    4281        %EQU E$FIT_IN_ERROR            = 849;
      676+    4282        %EQU E$NEXT_GROUP_FIT_ERROR    = 850;
      677+    4283        %EQU E$DETAIL_REPORT_GROUP_EXPECTED = 851;
      678+    4284        %EQU E$WRONG_GEN_REPORT        = 852;
      679+    4285        %EQU E$REPORT_DESC_NOT_DEFINED = 853;
      680+    4286        %EQU E$REPORT_NAME_EXPECTED    = 854;
      681+    4287        %EQU E$MUST_SUM_IN_SAME_REPORT = 855;
      682+    4288        %EQU E$WRONG_DATA_NAME_IN_REP  = 856;
      683+    4289        %EQU E$NO_LINAGE_IN_REP        = 857;
      684+    4290        %EQU E$REP_ITEM_W_UPON         = 858;
      685+    4291        %EQU E$MUST_BE_DETAIL_GROUP    = 859;
      686+    4292        %EQU E$SUM_IN_SAME_REPORT      = 860;
      687+    4293        %EQU E$EQU_OR_LOWER_LVL_SUM    = 861;
      688+    4294        %EQU E$CODE_FOR_ALL_REPORT     = 862;
      689+    4295        %EQU E$OPEN_ERR_FOR_REPORT_FILE = 863;
      690+    4296        %EQU E$SUPPRESS_ERROR          = 864;
      691+    4297        %EQU E$ERR_STMT_IN_USE_REPORTING = 865;
      692+    4298        %EQU E$DUP_NAME_IN_USE_REPORTING = 866;
      693+    4299        %EQU E$MUST_BE_REPORT_GROUP    = 867;
      694+    4300        %EQU E$DUP_USE_BEFORE_REPORTING = 868;
      695+    4301        %EQU E$MORE_THEN_ONE_INITIAL   = 869;
      696+    4302        %EQU E$NAME_LIST_OVERFLOW      = 870;
      697+    4303        %EQU E$THIS_CD_NEED_01_ENTRY   = 871;
      698+    4304        %EQU E$BUFFER_LENGTH_ERROR     = 872;
      699+    4305        %EQU E$ONLY_FIRST_MAY_HAVE_VALUE = 873;
      700+    4306        %EQU E$MUST_BE_CD_I_O          = 874;
      701+    4307        %EQU E$MUST_NO_SIGN_ONE_CHAR_INT = 875;
      702+    4308        %EQU E$NOT_ALLOWED_IN_DM4_TP   = 876;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:115  
      703+    4309        %EQU E$USING_WITH_INITIAL      = 877;
      704+    4310        %EQU E$MUST_SAME_LIMIT_AS_MAIN = 878;
      705+    4311        %EQU E$DUPLICATE_ERROR_PHRASES = 879;
      706+    4312        %EQU E$MULTIPLE_ERROR_PHRASES  = 880;
      707+    4313        %EQU E$MISSING_NOT_CLAUSE      = 881;
      708+    4314        %EQU E$MISSING_WITH_CLAUSE     = 882;
      709+    4315        %EQU E$USER_LABEL_NAME_ERROR   = 883;
      710+    4316        %EQU E$USER_LABEL_ASSIGN_ERROR = 884;
      711+    4317        %EQU E$DUPLICATE_NAME          = 885;
      712+    4318        %EQU E$UNPOOLED_PRIMES         = 886;
      713+    4319        %EQU E$UNPOOLED_REFS           = 887;
      714+    4320        %EQU E$UNPOOLED_TEMPS          = 888;
      715+    4321        %EQU E$HEAP_NOT_RETURNED       = 889;
      716+    4322        %EQU E$POINTER_INCOMPATIBLE    = 890;
      717+    4323        %EQU E$ERROR_IN_ADDRESS_OF     = 891;
      718+    4324        %EQU E$ITEM_NOT_IN_SCHEMA      = 892;
      719+    4325        %EQU E$GOTO_NO_DEST            = 893;
      720+    4326        %EQU E$DUPLICATE_DCB_NAME      = 894; /* GCOS E$GET_BUFFER_ERR  */
      721+    4327        %EQU E$BUSY_FILE               = 895; /* GCOS TS8 only */
      722+    4328        %EQU E$CANNOT_ACCESS_FILE      = 896; /* GCOS TS8 only */
      723+    4329        %EQU E$LAST_800_MSG_NO         = 896;
      724+    4330
      725+    4331
      726+    4332
      727+    4333        /* -------------- */
      728+    4334        /* ERRORS 900-999 - Compiler abort messages */
      729+    4335        /* -------------- */
      730+    4336        %EQU E$ERROR_LIMIT_EXCEEDED    = 900;
      731+    4337        %EQU E$BLOCK_DATA_LIMIT        = 901;
      732+    4338        %EQU E$COMPILER_ABORT          = 902;
      733+    4339        %EQU E$PARSE_STACK_OVERFLOW_ERROR = 903;
      734+    4340        %EQU E$SEMANTIC_TOKEN_STACK_OVERFLW = 904;
      735+    4341        %EQU E$RED_STACK_OVERFLOW_ERROR = 905;
      736+    4342        %EQU E$CORRECTION_FAILURE      = 906;
      737+    4343        %EQU E$ANNOTATOR_ABORT         = 907;
      738+    4344        %EQU E$LX_STACK_OVERFLOW_ERROR = 908;
      739+    4345        %EQU E$DML_STACK_OVERFLOW_ERROR= 909;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:116  
      740+    4346        %EQU E$TOO_MANY_LINES          = 910; /* GCOS only */
      741+    4347        %EQU E$AUTO_STACK_OVERFLOW_ERROR = 911;
      742+    4348        %EQU E$CODE_LIMIT              = 912;
      743+    4349        %EQU E$INVALID_CODE            = 913;
      744+    4350        %EQU E$SPARE_914               = 914;
      745+    4351        %EQU E$EVALP_NOT_DELETED       = 915;
      746+    4352        %EQU E$BAD_PIC_TYPE            = 916 ;
      747+    4353        %EQU E$BAD_NUM_PIC_TYPE        = 917 ;
      748+    4354        %EQU E$SEQ_NO_OVERFLOW         = 918 ;
      749+    4355        %EQU E$DATA_LIMIT              = 919;
      750+    4356        %EQU E$INPUT_FILE_OPEN_ERROR   = 920;
      751+    4357        %EQU E$SCANNER_FAILURE         = 921;
      752+    4358        %EQU E$INVALID_COMPILER_LITERAL = 922;
      753+    4359        %EQU E$SPARE_923               = 923;
      754+    4360        %EQU E$ACTION_NOT_PRESENT      = 924;
      755+    4361        %EQU E$UNEXPECTED_CASE         = 925;
      756+    4362        %EQU E$BAD_STRUCTURE_TYPE      = 926;
      757+    4363        %EQU E$PRESET_BUFFER_NOT_EMPTY = 927;
      758+    4364        %EQU E$NON_CURRENT_FAB         = 928;
      759+    4365        %EQU E$SCHEMA_SUB_SCHEMA_ERROR = 929;
      760+    4366
      761+    4367        %EQU E$LAST_900_MSG_NO         = 929;
      762+    4368
      763+    4369        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:117  
      492     4370        %INCLUDE Z8A_TYPES;
        1+    4371        /*T***********************************************************/
        2+    4372        /*T*                                                         */
        3+    4373        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    4374        /*T*                                                         */
        5+    4375        /*T***********************************************************/
        6+    4376
        7+    4377        %EQU TYD = 0 ; /* DECIMAL (COMP, COMP-3, ETC) */
        8+    4378        %EQU TYI = 1 ; /* INTEGER (COMP-6) */
        9+    4379        %EQU TYJ = 2 ; /* 16 Bit - Comp-1                    */
       10+    4380        %EQU TYO = 3 ; /* OVERPUNCHED (PIC S99 DISPLAY) */
       11+    4381        %EQU TYR = 4 ; /* REAL (COMP-11) */
       12+    4382        %EQU TYQ = 5 ; /* D.P. (COMP-12) */
       13+    4383        %EQU TYE = 6 ; /* EBCDIC (DISPLAY-1) */
       14+    4384        %EQU TYH = 7 ; /* COMP-7 (HALF WORD) */
       15+    4385        %EQU TYA = 8 ; /* ASCII ALPHANUMERIC */
       16+    4386        %EQU TYX = 9 ; /* INDEX */
       17+    4387        %EQU TYY =10 ; /* INDEX (IBM) */
       18+    4388        %EQU TYF = 11 ; /* EBCDIC numeric */
       19+    4389        %EQU TYB = 12 ; /* GBCD */
       20+    4390        %EQU TYT = 13 ; /* Typeless for various scratch uses */
       21+    4391        %EQU TYN = 14 ; /* Kanji variable (PIC N)            */
       22+    4392        %EQU TYK = 15 ; /* 32 Bit - Comp-2                   */
       23+    4393        %EQU TYG = 16 ; /* Generic type, ie. Weird so that ST.ID must be checked */
       24+    4394        %EQU TYM = 17 ; /* Micro-op string for editing       */
       25+    4395        %EQU TYP = 18 ; /* Pointer variable                  */
       26+    4396        %EQU TYC = 19 ; /* GBCD numeric                      */
       27+    4397
       28+    4398        /* Sets of types for use in case statements */
       29+    4399
       30+    4400        %MACRO SET_OF_NUMERIC_TYPES;
       31+    4401
       32+    4402          %TYD, %TYI, %TYJ, %TYO, %TYR, %TYQ, %TYH, %TYK, %TYF, %TYC
       33+    4403
       34+    4404        %MEND;
       35+    4405
       36+    4406
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:118  
       37+    4407        /* Lengths for each type (if applicable) */
       38+    4408
       39+    4409        %EQU TYH_LENGTH  = 2;
       40+    4410        %EQU TYI_LENGTH  = 4;
       41+    4411        %EQU TYJ_LENGTH  = 2;
       42+    4412        %EQU TYK_LENGTH  = 4;
       43+    4413        %EQU TYQ_LENGTH  = 8;
       44+    4414        %EQU TYR_LENGTH  = 4;
       45+    4415        %EQU TYX_LENGTH  = 8;
       46+    4416        %EQU TYY_LENGTH  = 6;
       47+    4417
       48+    4418
       49+    4419        /* Type significance -- This is different from the length in that
       50+    4420                                the length is what is in the ST descriptor
       51+    4421                                and the storage it consumes, whereas the
       52+    4422                                significance is the digits of precision
       53+    4423                                that particular type can represent.      */
       54+    4424
       55+    4425        %EQU TYH_SIGNIFICANCE = 6;
       56+    4426        %EQU TYI_SIGNIFICANCE = 11;
       57+    4427        %EQU TYJ_SIGNIFICANCE = 5;
       58+    4428        %EQU TYK_SIGNIFICANCE = 10;
       59+    4429        %EQU TYQ_SIGNIFICANCE = 26;
       60+    4430        %EQU TYR_SIGNIFICANCE = 26;
       61+    4431
       62+    4432        /* Maximum values */
       63+    4433
       64+    4434        %EQU TYH_MAX_VALUE = 131071; /* Min value is - (%TYH_MAX_VALUE + 1) */
       65+    4435        %EQU TYJ_MAX_VALUE = 32767 ; /* Min value is - (%TYJ_MAX_VALUE + 1) */
       66+    4436        %EQU TYK_MAX_VALUE = 2147483647; /* Min value is
       67+    4437                                            - (%TYK_MAX_VALUE + 1)          */
       68+    4438        %EQU TYI_MAX_VALUE = 34359738367;/* Min value is
       69+    4439                                            - (%TYI_MAX_VALUE + 1)          */
       70+    4440
       71+    4441
       72+    4442        %EQU CONTEXT_NUMERIC       = 00;
       73+    4443        %EQU CONTEXT_ALPHA_NUMERIC = 01;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:119  
       74+    4444        %EQU CONTEXT_UNKNOWN       = 02;
       75+    4445        %EQU CONTEXT_KANJI         = 03;
       76+    4446
       77+    4447             %SET TYPE_MATRIX_SIZE = 191;
       78+    4448
       79+    4449        %MACRO TYPE_MATRIX_BEGIN ( @NAME = );
       80+    4450
       81+    4451             %SET TYPE_MATRIX_ENTRIES = 0;
       82+    4452                  DCL 1 @NAME ALIGNED CONSTANT,
       83+    4453
       84+    4454        %MEND;
       85+    4455
       86+    4456
       87+    4457        %MACRO TYPE_MATRIX_ENTRY ( @LOP = , @ROP = , @LOP_BECOMES = , @ROP_BECOMES = );
       88+    4458
       89+    4459             2 * BIT(1)   UNAL INIT('0'B),
       90+    4460             2 * UBIN(4)  UNAL INIT(@LOP),
       91+    4461             2 * UBIN(4)  UNAL INIT(@ROP),
       92+    4462             2 * BIT(1)   UNAL INIT('1'B),
       93+    4463             2 * UBIN(4)  UNAL INIT(@LOP_BECOMES),
       94+    4464             2 * UBIN(4)  UNAL INIT(@ROP_BECOMES),
       95+    4465
       96+    4466             %SET TYPE_MATRIX_ENTRIES = TYPE_MATRIX_ENTRIES + 1;
       97+    4467
       98+    4468        %MEND;
       99+    4469
      100+    4470
      101+    4471        %MACRO TYPE_MATRIX_END;
      102+    4472
      103+    4473
      104+    4474        %SET FILLER = (TYPE_MATRIX_SIZE - TYPE_MATRIX_ENTRIES);
      105+    4475
      106+    4476             2 * (0:%(FILLER - 1)),
      107+    4477                3 * BIT(1) UNAL INIT('0'B * %FILLER),
      108+    4478                3 * UBIN(4) UNAL INIT(0 * %FILLER),
      109+    4479                3 * UBIN(4) UNAL INIT(0 * %FILLER),
      110+    4480                3 * BIT(1) UNAL INIT('1'B * %FILLER),
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:120  
      111+    4481                3 * UBIN(8) UNAL INIT(0 * %FILLER);
      112+    4482
      113+    4483        %MEND;
      114+    4484
      115+    4485        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:121  
      116+    4486        %MACRO TYPE_DESC;
      117+    4487
      118+    4488             2 TYPE     SBIN WORD UNAL,
      119+    4489             2 DESC,
      120+    4490               %DESCRIPTOR (LVL = 3);
      121+    4491             2 SIZ$     PTR,
      122+    4492             2 SSOP$    PTR;
      123+    4493
      124+    4494        %MEND;
      125+    4495
      126+    4496
      127+    4497
      128+    4498        %MACRO INIT_TYPE_DESC (@TYPE_DESC = ,
      129+    4499                               @TYPE      = %TYI,
      130+    4500                               @SIZ$      = "ADDR(NIL)",
      131+    4501                               @SSOP$     = "ADDR(NIL)",
      132+    4502                               @DESC      = );
      133+    4503
      134+    4504             DO;
      135+    4505               %LSET @DESCRIPTOR@ = CHARTEXT(CONCAT(TEXTCHAR(@TYPE_DESC), '.DESC'));
      136+    4506
      137+    4507               %IF TEXTCHAR(@TYPE) = 'TYI';
      138+    4508                 %IF (TEXTCHAR(@DESC) = '');
      139+    4509                   %BUILD_BINARY_DESC(@DESC = %@DESCRIPTOR@ ,
      140+    4510                                      @LENGTH = %TYI_LENGTH );
      141+    4511                 %ELSE;
      142+    4512                   @TYPE_DESC.DESC = @DESC;
      143+    4513                 %ENDIF;
      144+    4514
      145+    4515                 @TYPE_DESC.TYPE = @TYPE;
      146+    4516                 @TYPE_DESC.SIZ$ = @SIZ$;
      147+    4517                 @TYPE_DESC.SSOP$ = @SSOP$;
      148+    4518               %ELSEIF TEXTCHAR(@TYPE) = 'TYD';
      149+    4519                 %IF (TEXTCHAR(@DESC) = '');
      150+    4520                   %PACK_NDSC( @DESC     = %@DESCRIPTOR@ ,
      151+    4521                               @LENGTH   = COMCOM.MAX_TEMP_LENGTH ,
      152+    4522                               @TN       = %NDSC9 ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:122  
      153+    4523                               @SIGN     = %NO_SIGN );
      154+    4524                 %ELSE;
      155+    4525                   @TYPE_DESC.DESC = @DESC;
      156+    4526                 %ENDIF;
      157+    4527
      158+    4528                 @TYPE_DESC.TYPE = @TYPE;
      159+    4529                 @TYPE_DESC.SIZ$ = @SIZ$;
      160+    4530                 @TYPE_DESC.SSOP$ = @SSOP$;
      161+    4531               %ELSE;
      162+    4532                 %IF (TEXTCHAR(@DESC) = '');
      163+    4533                   %ERROR (TRUE, 'DESC parameter missing in INIT_TYPE_DESC',2);
      164+    4534                 %ELSE;
      165+    4535                   @TYPE_DESC.DESC  = @DESC;
      166+    4536                   @TYPE_DESC.SSOP$ = @SSOP$;
      167+    4537                   @TYPE_DESC.SIZ$  = @SIZ$;
      168+    4538                   @TYPE_DESC.TYPE  = @TYPE;
      169+    4539                 %ENDIF;
      170+    4540               %ENDIF;
      171+    4541             END;
      172+    4542
      173+    4543        %MEND;
      493     4544        %INCLUDE Z8E_STACKS;
        1+    4545        /*M* LEX_STACKS  -- Parser stack and redefs for typed stack elements */
        2+    4546        /*T***********************************************************/
        3+    4547        /*T*                                                         */
        4+    4548        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+    4549        /*T*                                                         */
        6+    4550        /*T***********************************************************/
        7+    4551
        8+    4552        /* Communications between LEX, PARSER, & SEMANTICS */
        9+    4553
       10+    4554        %EQU LX_MAX = 2000 ;                                      /*#29032*/
       11+    4555        %EQU LA_MAX = 70;
       12+    4556
       13+    4557
       14+    4558        %MACRO LA_STK_INFO(LVL=2);
       15+    4559            %(LVL)      ID      UBIN HALF UNAL,    /* identification number */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:123  
       16+    4560            %(LVL)      B       UNAL,
       17+    4561              %(LVL+1)      ERROR   BOOLEAN,
       18+    4562              %(LVL+1)      ROUND   BOOLEAN,
       19+    4563              %(LVL+1)      INTEGER BOOLEAN,
       20+    4564              %(LVL+1)      ALL     BOOLEAN,
       21+    4565              %(LVL+1)      NEGATE  BOOLEAN,
       22+    4566              %(LVL+1)      *       BIT (1) ,
       23+    4567              %(LVL+1)      HIGH_LEV BOOLEAN,
       24+    4568              %(LVL+1)      *       BIT (11) ,
       25+    4569            %(LVL)      FLAGS REDEF B BIT(18) UNAL,
       26+    4570
       27+    4571            %(LVL)      ST$     PTR,               /* PTR TO ST ITEM (EG, SCALAR)*/
       28+    4572            %(LVL)      DNT$    PTR,               /* PTR TO LEXEME ITEM (IN DNT)*/
       29+    4573            %(LVL)      SYMBOL  SBIN WORD,    /* TERMINAL NUMBER (IE, RW#)  */
       30+    4574            %(LVL)      TYPE    UBIN WORD,    /* TYPE (EG, %TYI, %TYA, ETC) */
       31+    4575            %(LVL)      LINE    UBIN WORD,    /* LINE# OF THIS OCCURRENCE    */
       32+    4576            %(LVL)      COLUMN  UBIN WORD,    /* COL # OF THIS OCCURRENCE    */
       33+    4577
       34+    4578        %MEND;
       35+    4579
       36+    4580    1   DCL 1 LA_ITEM  BASED ALIGNED,
       37+    4581              %LA_STK_INFO;
       38+    4600    1         2 LINK    UBIN WORD ;   /* MAKES LOOK_AHEAD CIRCULAR  */
       39+    4601
       40+    4602    1   DCL 1 LX_ITEM BASED ALIGNED,
       41+    4603              %LA_STK_INFO;
       42+    4622    1         2 LINK     PTR;
       43+    4623
       44+    4624        %EQU LENGTH_LX_ITEM = 8;   /* length of the LX_ITEM structure */
       45+    4625
       46+    4626        %MACRO DCL_AUTO_LX_ITEM (@NAME = );
       47+    4627
       48+    4628          DCL 1 @NAME DALIGNED,
       49+    4629                2 * (0:%(LENGTH_LX_ITEM - 1)) SBIN WORD ALIGNED;
       50+    4630
       51+    4631        %MEND;
       52+    4632
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:124  
       53+    4633
       54+    4634        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:125  
       55+    4635
       56+    4636        /* Data structures which represent the abstract syntax tree */
       57+    4637
       58+    4638        /*V* Several conventions have been adopted for abstract syntax tree
       59+    4639             data structures:
       60+    4640
       61+    4641              1) ID => Each node in the abstract syntax tree must contain
       62+    4642                         an ID field which uniquely identifies the node.
       63+    4643                         The ID field must be the first 18 bits of the
       64+    4644                         structure.  Terminal symbols, for example, have an
       65+    4645                         ID of %TERMINAL(0).  LX_LIST nodes have an
       66+    4646                         ID of %LX_LIST.
       67+    4647
       68+    4648              2) LENGTH => Each node in the abstract syntax tree is
       69+    4649                         "LENGTHW(LX_ITEM)" words (8) by convention.
       70+    4650                         This is to allow manipulation of these nodes on
       71+    4651                         the semantic stack without regard to node type.
       72+    4652                         If you define a structure which differs in length
       73+    4653                         from this convention, you must be responsible for
       74+    4654                         all manipulations of this structure.  In particular,
       75+    4655                         it must not be referenced on the semantic stack.
       76+    4656
       77+    4657              3) LINK => Most abstract syntax tree nodes may be linked into
       78+    4658                         lists.  By convention, the link to the next node in
       79+    4659                         the list must be kept in the last word of the node.
       80+    4660                         This allows common routines to manipulate lists
       81+    4661                         without regard to the node type on the list.
       82+    4662
       83+    4663              4) LIST NODE => One universal list structure has been defined -
       84+    4664                         LX_LIST.  This list structure should be used
       85+    4665                         whenever possible, so that common list processing can be
       86+    4666                         performed on abstract syntax tree nodes.
       87+    4667
       88+    4668              5) B.ERROR => Most nodes in the abstract syntax tree contain
       89+    4669                         an error bit, B.ERROR.  This flag signifies that
       90+    4670                         a syntactic or semantic error has already occurred,
       91+    4671                         so further cascaded semantic errors may result.
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:126  
       92+    4672                         This bit is propagated up the semantic tree.  As
       93+    4673                         each semantic error is detected, the associated error
       94+    4674                         message should be suppressed, although semantic
       95+    4675                         recovery must still be initiated.
       96+    4676        */
       97+    4677
       98+    4678
       99+    4679        /*V*
      100+    4680            All access to the abstract syntax tree is provided through the
      101+    4681            "semantic stack".  In particular, semantic actions have access
      102+    4682            to abstract syntax tree nodes for each terminal and non-terminal
      103+    4683            on the right hand side of each reduction.  This is accomplished
      104+    4684            by referring to the LX_STK stack items down from the value of
      105+    4685            LX_TOP.  For example, the production
      106+    4686
      107+    4687                         P ::= A B C {ACTION}
      108+    4688
      109+    4689            will be represented on the LX_STK when the semantic action
      110+    4690            "ACTION" is executed by
      111+    4691
      112+    4692                         C <- LX_TOP
      113+    4693                         B <- LX_TOP - 1
      114+    4694                         A <- LX_TOP - 2
      115+    4695
      116+    4696            Each terminal symbol on the right hand side of a production is
      117+    4697            represented by an abstract syntax tree node with an ID of %TERMIANL.
      118+    4698            Non-terminals may have an arbitrary type of node, since the creation
      119+    4699            of the node for each non-terminal is handled by the semantic actions.
      120+    4700
      121+    4701            Propagation of abstract syntax tree nodes up the tree  is  done by
      122+    4702            using the left-most abstract syntax tree node on the right hand side
      123+    4703            of the production for the node associated with the left hand side
      124+    4704            non-terminal.  In the above example, the node associated with "A"
      125+    4705            is at LX_STK(LX_TOP - 2) after the semantic action completes will
      126+    4706            be used for the non-terminal "P".  It is the responsibility of the
      127+    4707            semantic actions to set up the nodes for non-terminals, so that
      128+    4708            node propagation will occur correctly.  Note that if the node for the
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:127  
      129+    4709            left-most symbol on the right hand side is not changed, it is propagated
      130+    4710            up the tree for the left hand side non-terminal.
      131+    4711
      132+    4712            Propagation of information up the abstract syntax tree is the method
      133+    4713            of choice for semantic analysis.  As semantic checking and information
      134+    4714            gathering is completed for each portion of the tree, the internal
      135+    4715            language for this section of the program is then generated.
      136+    4716
      137+    4717        */
      138+    4718
      139+    4719
      140+    4720
      141+    4721        /* LX_ITEM.ID values for distinguishing tree nodes */
      142+    4722
      143+    4723        %EQU LX_TERMINAL   = 0;   /* for all terminal symbols returned by LEX */
      144+    4724        %EQU LX_LARGE      = 1;
      145+    4725        %EQU LX_LIST       = 2;
      146+    4726        %EQU LX_REC_DECL   = 3;
      147+    4727        %EQU NO_EXCEPTION_CLAUSE = 0;
      148+    4728        %EQU LX_ETT_ITEM   = 4;
      149+    4729        %EQU BINARY_OP     = 5;
      150+    4730        %EQU UNARY_OP      = 6;
      151+    4731        %EQU ILS_LIST      = 7;
      152+    4732        %EQU COMPUTE_STMT  = 8;
      153+    4733        %EQU ADD_STMT      = 9;
      154+    4734        %EQU SUBTRACT_STMT = 10;
      155+    4735        %EQU MULTIPLY_STMT = 11;
      156+    4736        %EQU DIVIDE_STMT   = 12;
      157+    4737        %EQU DEFERED_QUAL_ID = 13;
      158+    4738        %EQU STRING_STMT = 14;
      159+    4739        %EQU UNSTRING_STMT = 15;
      160+    4740        %EQU CALL_STMT = 16;
      161+    4741        %EQU READ_STMT = 17;
      162+    4742        %EQU WRITE_STMT = 18;
      163+    4743        %EQU DELETE_STMT = 19;
      164+    4744        %EQU REWRITE_STMT = 20;
      165+    4745        %EQU START_STMT = 21;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:128  
      166+    4746
      167+    4747         %EQU LX_REPORT_REC = 22;
      168+    4748         %EQU DEFERED_ACTION = 23;
      169+    4749         %EQU DEFERED_IDENTIFIER = 24;
      170+    4750         %EQU DEFERED_SUM_CLAUSE_LIST = 25;
      171+    4751         %EQU DEFERED_SUM_CLAUSE = 26;
      172+    4752         %EQU DEFERED_ID_TREE = 27;
      173+    4753
      174+    4754         %EQU MIN_DEFERED_ACTION_SIZE = 6;
      175+    4755         %EQU REPORT_REC_MAX_FIELD = 14;
      176+    4756         %EQU NO_REPORT_TYPE = 0;
      177+    4757         %EQU REPORT_HEADING = 1;
      178+    4758         %EQU PAGE_HEADING = 2;
      179+    4759         %EQU CONTROL_HEADING = 3;
      180+    4760         %EQU CONTROL_HEADING_FINAL = 4;
      181+    4761         %EQU TYPE_DETAIL = 5;
      182+    4762         %EQU CONTROL_FOOTING = 6;
      183+    4763         %EQU CONTROL_FOOTING_FINAL =7;
      184+    4764         %EQU PAGE_FOOTING = 8;
      185+    4765         %EQU REPORT_FOOTING = 9;
      186+    4766         %EQU REPORT_LINE_INT = 1;
      187+    4767         %EQU REPORT_LINE_PLUS = 2;
      188+    4768         %EQU REPORT_LINE_NEXT_PAGE = 3;
      189+    4769         %EQU NEXT_GROUP_INT = 1;
      190+    4770         %EQU NEXT_GROUP_PLUS = 2;
      191+    4771         %EQU NEXT_GROUP_NEXT_PAGE = 3;
      192+    4772         %EQU PRE_NEXT_PAGE = 31;
      193+    4773         %EQU REP_ACT_ID         = 0;
      194+    4774         %EQU REP_ACT_ID_REF     = 1;
      195+    4775         %EQU REP_ACT_ID_SUB     = 2;
      196+    4776         %EQU REP_ACT_ID_SUB_REF = 3;
      197+    4777
      198+    4778         %EQU LX_CD_INPUT      = 28;
      199+    4779         %EQU LX_CD_OUTPUT     = 29;
      200+    4780         %EQU LX_CD_I_O        = 30;
      201+    4781         %EQU CD_INPUT_OPTION  = 11;
      202+    4782         %EQU CD_OUTPUT_OPTION = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:129  
      203+    4783         %EQU CD_I_O_OPTION    = 6;
      204+    4784
      205+    4785
      206+    4786
      207+    4787        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:130  
      208+    4788        /* Correspondence of non-terminals with abstract syntax tree nodes */
      209+    4789
      210+    4790        /* DATA DIVISION NODES
      211+    4791
      212+    4792        <ACCESS_mode_is>
      213+    4793        <AREA_AREAS_opt>             => LX_TERMINAL
      214+    4794        <AREA_opt>                   => LX_TERMINAL
      215+    4795        <ARE_opt>                    => LX_TERMINAL
      216+    4796        <ASCENDING_or_DESCENDING>    => LX_TERMINAL
      217+    4797        <AT_opt>                     => LX_TERMINAL
      218+    4798        <BY_opt>                     => LX_TERMINAL
      219+    4799        <CATALOG-NAME_is>
      220+    4800        <CD_I-O_clause>
      221+    4801        <CD_I-O_clause_list>
      222+    4802        <CD_input_clause>
      223+    4803        <CD_input_clause_list>
      224+    4804        <CD_mode_clause>
      225+    4805        <CD_output_clause>
      226+    4806        <CD_output_clause_list>
      227+    4807        <CHARACTERS_opt>             => LX_TERMINAL
      228+    4808        <CHARACTER_opt>              => LX_TERMINAL
      229+    4809        <CLOSE_opt>                  => LX_TERMINAL
      230+    4810        <COLLATING_opt>
      231+    4811        <COMMA_DECIMAL-POINT>
      232+    4812        <CONTAINS_opt>               => LX_TERMINAL
      233+    4813        <CONTROL_is>
      234+    4814        <EVERY_opt>                  => LX_TERMINAL
      235+    4815        <FD_access_clause>
      236+    4816        <FD_clause>
      237+    4817        <FD_clause_list>
      238+    4818        <FD_clause_list_opt>
      239+    4819        <FILE_opt>                   => LX_TERMINAL
      240+    4820        <FILLER_opt>                 => LX_TERMINAL
      241+    4821        <FOR_opt>                    => LX_TERMINAL
      242+    4822        <FROM_opt>                   => LX_TERMINAL
      243+    4823        <IBM_channel_phrase>
      244+    4824        <INDICATE_opt>               => LX_TERMINAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:131  
      245+    4825        <INITIAL_opt>                => LX_TERMINAL
      246+    4826        <IN_opt>                     => LX_TERMINAL
      247+    4827        <IS_ARE_opt>                 => LX_TERMINAL
      248+    4828        <IS_CONTAINS_opt>            => LX_TERMINAL
      249+    4829        <IS_opt>                     => LX_TERMINAL
      250+    4830        <I_O_clause>
      251+    4831        <I_O_clause_list>
      252+    4832        <I_O_control_clause>
      253+    4833        <I_O_techniques>
      254+    4834        <KEY_opt>                    => LX_TERMINAL
      255+    4835        <LIMIT_is_opt>
      256+    4836        <LINES_opt>                  => LX_TERMINAL
      257+    4837        <LINE_LINES_opt>             => LX_TERMINAL
      258+    4838        <MESSAGE_opt>                => LX_TERMINAL
      259+    4839        <MODE_opt>                   => LX_TERMINAL
      260+    4840        <NEXT_PAGE>                  => LX_TERMINAL (NEXT)
      261+    4841        <NUMBER_opt>                 => LX_TERMINAL
      262+    4842        <OCCURS_INDEX_clause>        => LX_LIST OF LX_TERMINAL(name)
      263+    4843        <OCCURS_KEY_clause>          => LX_LIST (2 nodes)
      264+    4844                                           Node 1) LX_TERMINAL ( ASC/DES)
      265+    4845                                           Node 2) <qualified_id_list>
      266+    4846        <OF_opt>                     => LX_TERMINAL
      267+    4847        <OF_or_IN>                   => LX_TERMINAL
      268+    4848        <ON_opt>                     => LX_TERMINAL
      269+    4849        <OPERATIONAL_opt>            => LX_TERMINAL
      270+    4850        <OPTIONAL_opt>               => LX_TERMINAL
      271+    4851        <PROCEDURE_swap_div>
      272+    4852        <PROGRAM_opt>                => LX_TERMINAL
      273+    4853        <RECORDS_CHARS_opt>          => LX_TERMINAL
      274+    4854        <RECORD_RECORDS_IS_ARE>
      275+    4855        <RECORD_SORT_MERGE_opt>      => LX_TERMINAL
      276+    4856        <SD_clause>
      277+    4857        <SD_clause_list>
      278+    4858        <SD_clause_list_opt>
      279+    4859        <SIGN_opt>                   => LX_TERMINAL
      280+    4860        <SIZE_opt>                   => LX_TERMINAL
      281+    4861        <STATUS_opt>                 => LX_TERMINAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:132  
      282+    4862        <SYMBOLIC_opt>               => LX_TERMINAL
      283+    4863        <SYSTEM_GS>
      284+    4864        <TAPE_opt>                   => LX_TERMINAL
      285+    4865        <TIMES_opt>                  => LX_TERMINAL
      286+    4866        <TO_opt>                     => LX_TERMINAL
      287+    4867        <VALUE_IS>                   => LX_TERMINAL (VALUE,VALUES)
      288+    4868        <VFC_clause>
      289+    4869        <WHEN_opt>                   => LX_TERMINAL
      290+    4870        <WITH_opt>                   => LX_TERMINAL
      291+    4871        <WS_LINKAGE_CONSTANT>        => LX_TERMINAL
      292+    4872        <WS_LINKAGE_CONSTANT_section> => LX_TERMINAL (WS,LINKAGE,CONSTANT)
      293+    4873        <access_clause>
      294+    4874        <alpha_constant>             => LX_TERMINAL
      295+    4875        <alpha_constant_no_ALL>      => LX_TERMINAL
      296+    4876        <alphabet_also_phrases>
      297+    4877        <alphabet_literal_spec>
      298+    4878        <alphabet_literal_specs>
      299+    4879        <alphabet_name>
      300+    4880        <alphabet_name_common>
      301+    4881        <alphabet_phrase>
      302+    4882        <alphabet_type>
      303+    4883        <alternate_record_clause>
      304+    4884        <arith_expr>
      305+    4885        <author_para_opt>
      306+    4886        <basic_access_type>
      307+    4887        <basic_mnemonic_name>
      308+    4888        <basic_select_clause>
      309+    4889        <blank_clause>               => LX_TERMINAL (BLANK)
      310+    4890        <block_clause>
      311+    4891        <block_phrase>
      312+    4892        <cd_name>
      313+    4893        <code_set_clause>
      314+    4894        <collating_sequence>
      315+    4895        <common_initial_choice>
      316+    4896        <common_initial_opt>
      317+    4897        <communication_entry>
      318+    4898        <communication_entry_list>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:133  
      319+    4899        <communication_section>
      320+    4900        <comp_default>
      321+    4901        <computer_name>
      322+    4902        <computer_special_opt>
      323+    4903        <config_i_o>
      324+    4904        <config_section>
      325+    4905        <console_phrase>
      326+    4906        <control_div>
      327+    4907        <control_div_opt>
      328+    4908        <currency_phrase>
      329+    4909        <data_div>
      330+    4910        <data_div_opt>
      331+    4911        <data_name>                  => LX_TERMINAL
      332+    4912        <data_name_filler_list>
      333+    4913        <data_name_list>             => LX_LIST OF LX_TERMINAL
      334+    4914        <data_record_clause>
      335+    4915        <date_compiled_para_opt>
      336+    4916        <date_written_para_opt>
      337+    4917        <dd_clause>                  => LX_LARGE to LX_REC_DECL
      338+    4918        <dd_clauses>                 => LX_LARGE to LX_REC_DECL
      339+    4919        <decimal_phrase>
      340+    4920        <default_clause>
      341+    4921        <default_clause_list>
      342+    4922        <default_section>
      343+    4923        <default_section_opt>
      344+    4924        <delimiter_clause>
      345+    4925        <depending_on_qual_id_opt>   => <qualified_id> or LX_TERMINAL (EMPTY)
      346+    4926        <dn_or_filler_opt>           => LX_TERMINAL (FILLER or name)
      347+    4927        <end_key_clause>
      348+    4928        <end_program>
      349+    4929        <end_program_list>
      350+    4930        <environ_div>
      351+    4931        <environ_div_opt>
      352+    4932        <external_clause>            => LX_TERMINAL (EXTERNAL)
      353+    4933        <external_program>
      354+    4934        <factor>
      355+    4935        <file_control_entry>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:134  
      356+    4936        <file_control_entry_list>
      357+    4937        <file_control_entry_list_opt>
      358+    4938        <file_description_entry>
      359+    4939        <file_description_entry_list>
      360+    4940        <file_name>                  => LX_TERMINAL
      361+    4941        <file_name_list>
      362+    4942        <file_name_position>
      363+    4943        <file_name_position_list>
      364+    4944        <file_section>
      365+    4945        <file_status_clause>
      366+    4946        <global_clause>              => LX_TERMINAL (GLOBAL)
      367+    4947        <ident_div>
      368+    4948        <ident_info_opt>
      369+    4949        <ident_num-lit>
      370+    4950        <identifier>
      371+    4951        <identifier_list>
      372+    4952        <input_output_section>
      373+    4953        <installation_para_opt>
      374+    4954        <int_or_int-TO-int>          => LX_LIST of LX_TERMINAL(per int)
      375+    4955        <integer>                    => LX_TERMINAL
      376+    4956        <integer_list>               => LX_LIST OF LX_TERMINAL
      377+    4957        <internal_program>
      378+    4958        <is_data_name_filler>
      379+    4959        <justified_clause>           => LX_TERMINAL (RIGHT,EMPTY)
      380+    4960        <label_clause>
      381+    4961        <label_name>
      382+    4962        <label_name_list>
      383+    4963        <label_type>
      384+    4964        <lead_trail>                 => LX_TERMINAL ( LEADING,TRAILING)
      385+    4965        <level_no>                   => LX_TERMINAL (number or number_or_para)
      386+    4966        <linage_bottom>
      387+    4967        <linage_clause>
      388+    4968        <linage_footing>
      389+    4969        <linage_prefix>
      390+    4970        <linage_top>
      391+    4971        <line_number_clause>
      392+    4972        <literal>                    => LX_TERMINAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:135  
      393+    4973        <literal_thru>               => LX_LIST (1 or 2 nodes)
      394+    4974                                          node 1) LX_TERMINAL (first literal)
      395+    4975                                          node 2, if any) LX_TERMINAL (second literal)
      396+    4976        <literal_thru_list>          => LX_LIST OF <literal_thru>
      397+    4977        <memory_size>
      398+    4978        <message_date_clause>
      399+    4979        <message_time_clause>
      400+    4980        <mnemonic_name>
      401+    4981        <obj_computer_clause>
      402+    4982        <obj_computer_clauses>
      403+    4983        <object_computer_opt>
      404+    4984        <off_phrase>
      405+    4985        <on_off_phrase>
      406+    4986        <on_phrase>
      407+    4987        <on_rerun_file_opt>
      408+    4988        <org_with_clause>
      409+    4989        <organization_clause>
      410+    4990        <organization_relative>
      411+    4991        <padding_clause>
      412+    4992        <page_format_clause>
      413+    4993        <page_format_clause_list>
      414+    4994        <page_phrase>
      415+    4995        <picture_clause>             => LX_TERMINAL (picture_string)
      416+    4996        <privacy_phrase_opt>
      417+    4997        <proc_div>
      418+    4998        <proc_div_opt>
      419+    4999        <procedure_div_using>
      420+    5000        <prog_col_sequence>
      421+    5001        <program>
      422+    5002        <program_name>               => LX_TERMINAL
      423+    5003        <pwr>
      424+    5004        <qualified_id>               => LX_LIST OF LX_TERMINAL
      425+    5005        <qualified_id_integer>
      426+    5006        <qualified_id_list>          => LX_LIST OF <qualified_id>
      427+    5007        <qualified_id_lit>           => LX_TERMINAL or LX_LIST OF LX_ITEM
      428+    5008        <queue_type>
      429+    5009        <record_contains_clause>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:136  
      430+    5010        <record_delimiter_name>
      431+    5011        <record_description_entries> => LX_LARGE to LX_REC_DECL
      432+    5012        <record_description_entry>   => LX_LARGE to LX_REC_DECL
      433+    5013        <record_key_clause>
      434+    5014        <record_varying_from_clause_opt>
      435+    5015        <redefines_clause>           => LX_TERMINAL
      436+    5016        <reference_modification>
      437+    5017        <relative_key_clause>
      438+    5018        <renames_clause>             => LX_LIST of <qualified_id> (1 or 2 nodes)
      439+    5019        <report_clause>
      440+    5020        <report_desc_clause>
      441+    5021        <report_desc_clause_list>
      442+    5022        <report_description_entries>
      443+    5023        <report_description_entry>
      444+    5024        <report_entry>
      445+    5025        <report_entry_clause>
      446+    5026        <report_entry_clause_list>
      447+    5027        <report_entry_list>
      448+    5028        <report_name>
      449+    5029        <report_name_list>
      450+    5030        <report_section>
      451+    5031        <report_type>
      452+    5032        <rerun_every_clause>
      453+    5033        <reserve_clause>
      454+    5034        <section>
      455+    5035        <sections>
      456+    5036        <security_para_opt>
      457+    5037        <segment_limit>
      458+    5038        <select_clause>
      459+    5039        <select_clause_list>
      460+    5040        <separate_character_opt>     => LX_TERMINAL (EMPTY,SEPARATE)
      461+    5041        <sign_clause>                => LX_LIST (2 NODES)
      462+    5042                                          node 1) LX_TERMINAL (LEADING,TRAILING)
      463+    5043                                          node 2) LX_TERMINAL (SEPARATE,EMPTY)
      464+    5044        <sign_is_opt>                => LX_TERMINAL (SIGN,EMPTY)
      465+    5045        <source_computer_opt>
      466+    5046        <special_names_clause>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:137  
      467+    5047        <special_names_clause_list>
      468+    5048        <special_names_opt>
      469+    5049        <status_key_clause>
      470+    5050        <sub_schema_section>
      471+    5051        <subscript_list>
      472+    5052        <subscripts>
      473+    5053        <substitution_section>
      474+    5054        <substitution_section_opt>
      475+    5055        <sum_reset_clause_opt>
      476+    5056        <sum_upon_clause_opt>
      477+    5057        <switch_phrase>
      478+    5058        <symbolic_char_phrase>
      479+    5059        <symbolic_char_phrases>
      480+    5060        <symbolic_phrase>
      481+    5061        <sync_clause>                => LX_TERMINAL ( LEFT,RIGHT,EMPTY)
      482+    5062        <sysin_phrase>
      483+    5063        <sysout_phrase>
      484+    5064        <tape_option>
      485+    5065        <tape_option_list>
      486+    5066        <term>
      487+    5067        <text_length_clause>
      488+    5068        <unary>
      489+    5069        <usage_clause>               => LX_TERMINAL (COMP..DISPLAY)
      490+    5070        <usage_is>
      491+    5071        <usage_type>                 => LX_TERMINAL (COMP..DISPLAY)
      492+    5072        <value_of_clause>
      493+    5073        <value_of_name>
      494+    5074        <value_of_name_list>
      495+    5075
      496+    5076        */
      497+    5077        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:138  
      498+    5078        /* PROCEDURE DIVISION NODES
      499+    5079
      500+    5080        <ADD_body>
      501+    5081        <ADD_to_no_round>
      502+    5082        <ADVANCING_opt>              => LX_TERMINAL
      503+    5083        <ALL_opt>                    => LX_TERMINAL
      504+    5084        <ALL_or_LEADING>             => LX_TERMINAL
      505+    5085        <ALL_or_LEADING_or_FIRST>    => LX_TERMINAL
      506+    5086        <ALL_set_phrase>
      507+    5087        <ALL_set_phrase_opt>
      508+    5088        <ALTER_item>                 => LX_LIST(2) of <procedure_name>
      509+    5089        <ALTER_list>                 => LX_LIST OF <ALTER_item>
      510+    5090        <AND_condition>
      511+    5091        <AND_list_cond_2>
      512+    5092        <ASCENDING_or_DESCENDING>    => LX_TERMINAL
      513+    5093        <ASC_DES_phrase>
      514+    5094        <ASC_DES_phrases>
      515+    5095        <AT_END_phrase>              => ILS_LIST
      516+    5096        <AT_END_phrase_opt>          => LX_TERMINAL(EMPTY) or ILS_LIST
      517+    5097        <AT_opt>                     => LX_TERMINAL
      518+    5098        <BEFORE_AFTER>               => LX_TERMINAL
      519+    5099        <BEGINNING_ENDING_ALL>       => LX_TERMINAL
      520+    5100        <BEGINNING_ENDING_opt>       => LX_TERMINAL
      521+    5101        <BY_opt>                     => LX_TERMINAL
      522+    5102        <CALL_using_item>
      523+    5103        <CALL_using_list>
      524+    5104        <CLOSE_file_list>
      525+    5105        <CLOSE_options_opt>
      526+    5106        <COLLATING_opt>              => LX_TERMINAL
      527+    5107        <CONTROL_swap_div>
      528+    5108        <COUNT_in_phrase_opt>
      529+    5109        <CURRENCY_opt>               => LX_TERMINAL
      530+    5110        <CURRENT_opt>                => LX_TERMINAL
      531+    5111        <DATA_opt>                   => LX_TERMINAL
      532+    5112        <DELIMITER_in_phrase_opt>
      533+    5113        <DISABLE_type>
      534+    5114        <DISPLAY_options>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:139  
      535+    5115        <DIVIDE_body>                => DIVIDE_STMT
      536+    5116        <DIVIDE_no_round>            => DIVIDE_STMT
      537+    5117        <DML_accept>
      538+    5118        <DML_connect>
      539+    5119        <DML_disconnect>
      540+    5120        <DML_erase>
      541+    5121        <DML_find>
      542+    5122        <DML_finish>
      543+    5123        <DML_get>
      544+    5124        <DML_modify>
      545+    5125        <DML_ready>
      546+    5126        <DML_record_selection_expr>
      547+    5127        <DML_set>
      548+    5128        <DML_statement>
      549+    5129        <DML_store>
      550+    5130        <DML_use>
      551+    5131        <EOP_phrase>
      552+    5132        <EVAL_expression>
      553+    5133        <EVAL_expression_list>
      554+    5134        <EVAL_when_item>
      555+    5135        <EVAL_when_list>
      556+    5136        <EXAMINE_type>
      557+    5137        <EXCEPTION_ERROR>            => LX_TERMINAL
      558+    5138        <FILE_VOLUME>                => LX_TERMINAL
      559+    5139        <FIRST_NEXT>                 => LX_TERMINAL
      560+    5140        <FOR_opt>                    => LX_TERMINAL
      561+    5141        <GLOBAL_opt>                 => LX_TERMINAL
      562+    5142        <IDENTIFICATION_swap_div>
      563+    5143        <INCLUDING_ONLY>             => LX_TERMINAL
      564+    5144        <INITIAL_opt>                => LX_TERMINAL
      565+    5145        <INPUT_OUTPUT_EXTEND>        => LX_TERMINAL
      566+    5146        <INPUT_OUTPUT_opt>           => LX_TERMINAL
      567+    5147        <INSPECT_1>                  => LX_LIST of <identifier> & <INSP_1_for_list>
      568+    5148        <INSP_1_all_lead>            => LX_LIST of LX_LIST of <ident_alpha_list_no_ALL>
      569+    5149                                                            & <INSP_1_before_after_opt>
      570+    5150        <INSP_1_before_after_opt>    => LX_TERMINAL (empty) or LX_LIST of LX_LIST (1 or 2)
      571+    5151        <INSP_1_for_list>            => LX_LIST of LX_LIST of LX_TERMINAL (CHARACTERS, ALL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:140  
              5151        or LEADING)
      572+    5152                                                            & <INSP_1_before_after_opt>
      573+    5153                                                           or <INSP_1_all_lead>
      574+    5154                                                            & [<identifier>]
      575+    5155        <INSP_2_first>               => LX_LIST of LX_LIST of <ident_alpha_lit_no_ALL>
      576+    5156                                                            & <ident_alpha_lit_no_ALL>
      577+    5157                                                            & <INSP_1_before_after_opt>
      578+    5158        <INSP_2_replace>             => LX_LIST of LX_LIST of LX_TERMINAL (CHARACTERS)
      579+    5159                                                            & <ident_alpha_lit_no_ALL>
      580+    5160                                                            & <INSP_1_before_after_opt>
      581+    5161                                                           or LX_TERMINAL (ALL, ...)
      582+    5162                                                            & <INSP_2_first>
      583+    5163        <INSP_after>                 => LX_LIST of LX_TERMINAL & <ident_alpha_list_no_all>
      584+    5164                                                   (AFTER)
      585+    5165        <INSP_before>                => LX_LIST of LX_TERMINAL & <ident_alpha_list_no_all>
      586+    5166                                                   (BEFORE)
      587+    5167        <INVALID_clause>             => ILS_LIST
      588+    5168        <IN_opt>                     => LX_TERMINAL
      589+    5169        <IS_opt>                     => LX_TERMINAL
      590+    5170        <KEY_opt>                    => LX_TERMINAL
      591+    5171        <LINE_LINES_opt>             => LX_TERMINAL
      592+    5172        <LINE_opt>                   => LX_TERMINAL
      593+    5173        <MEMBERSHIP_opt>             => LX_TERMINAL
      594+    5174        <MESSAGE_SEGMENT>            => LX_TERMINAL
      595+    5175        <MESSAGE_opt>                => LX_TERMINAL
      596+    5176        <MULTIPLY_body>              => MULTIPLY_STMT
      597+    5177        <NEXT_SENTENCE>              => LX_TERMINAL(NEXT)
      598+    5178        <NEXT_opt>                   => LX_TERMINAL
      599+    5179        <NOT_condition>
      600+    5180        <NO_DATA_clause>             => ILS_LIST
      601+    5181        <OF_opt>                     => LX_TERMINAL
      602+    5182        <OF_or_IN>                   => LX_TERMINAL
      603+    5183        <ON_EXCEPTION_phrase>        => ILS_LIST
      604+    5184        <ON_opt>                     => LX_TERMINAL
      605+    5185        <OPEN_body>
      606+    5186        <OPEN_file_name_rew_list>
      607+    5187        <OPEN_no_rew_opt>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:141  
      608+    5188        <OPEN_type>
      609+    5189        <ORDER_opt>                  => LX_TERMINAL
      610+    5190        <OR_opt>                     => LX_TERMINAL
      611+    5191        <PERFORM_2>                  => LX_TERMINAL or LX_ETT_ITEM
      612+    5192        <PERFORM_3>                  => LX_LIST(2) of LX_TERMINAL(BEFORE,AFTER) & <condition
              5192        >
      613+    5193        <PERFORM_4>                  => LX_LIST(2) of LX_TERMINAL(BEFORE, AFTER) & <VARYING_
              5193        body>
      614+    5194        <PERFORM_proc_phrase>        => LX_LIST of <procedure_name>
      615+    5195        <PROCEED_TO_opt>             => LX_TERMINAL (PROCEED, empty)
      616+    5196        <PROCESSING_opt>             => LX_TERMINAL
      617+    5197        <READ_key_phrase_opt>
      618+    5198        <RECORD_opt>                 => LX_TERMINAL
      619+    5199        <REEL_UNIT_FILE_opt>         => LX_TERMINAL
      620+    5200        <REFERENCES_opt>             => LX_TERMINAL
      621+    5201        <RETRIEVAL_UPDATE_LOAD>      => LX_TERMINAL
      622+    5202        <SEARCH_EQUAL>
      623+    5203        <SEARCH_WHEN_1>
      624+    5204        <SEARCH_WHEN_2>
      625+    5205        <SEARCH_condition_2>
      626+    5206        <SEND_advancing_type>
      627+    5207        <SEND_rep_line_opt>
      628+    5208        <SEND_with_phrase>
      629+    5209        <SET_body>
      630+    5210        <SET_body_3>
      631+    5211        <SET_body_item_3>
      632+    5212        <SORT_MERGE_output_GIVING>
      633+    5213        <SORT_input>
      634+    5214        <STANDARD_opt>               => LX_TERMINAL
      635+    5215        <START_key_opt>
      636+    5216        <START_rel_op>
      637+    5217        <STRING_delimiter>           => LX_ETT_ITEM or LX_TERMINAL
      638+    5218        <STRING_list>                => LX_LIST of LX_LIST of 2 nodes
      639+    5219                                            1) <ident_alpha_list_no_ALL_list>
      640+    5220                                            2) <STRING_delimiter>
      641+    5221        <SUBTRACT_body>              => SUBTRACT_STMT
      642+    5222        <SYSTEM_GS>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:142  
      643+    5223        <TERMINAL_opt>               => LX_TERMINAL
      644+    5224        <THAN_opt>                   => LX_TERMINAL
      645+    5225        <THEN_opt>                   => LX_TERMINAL
      646+    5226        <TO_opt>                     => LX_TERMINAL
      647+    5227        <UNSTRING_delim_list>
      648+    5228        <UNSTRING_delimited_phrase_opt>
      649+    5229        <UNSTRING_ident_list>
      650+    5230        <UNSTRING_ident_lit_phrase>
      651+    5231        <UNSTRING_tally_phrase_opt>
      652+    5232        <USE_debugging_list>
      653+    5233        <USE_debugging_list_opt>
      654+    5234        <USE_debugging_type>
      655+    5235        <USE_procedure_type>
      656+    5236        <USE_statement>
      657+    5237        <VARYING_SEARCH_phrase_opt>
      658+    5238        <VARYING_body>               => <VARYING_item>
      659+    5239        <VARYING_item>               => LX_LIST(4)
      660+    5240                                           1) LX_LIST OF LX_ETT_ITEM (identifier)
      661+    5241                                           2) LX_LIST of LX_ETT_ITEM or LX_TERMINAL (from)
      662+    5242                                           3) LX_LIST of LX_ETT_ITEM or LX_TERMINAL (by)
      663+    5243                                           4) LX_LIST of <condition>
      664+    5244        <WHEN_CONDITION_1>
      665+    5245        <WHEN_CONDITION_2>
      666+    5246        <WHEN_selection_item>
      667+    5247        <WHEN_selection_list>
      668+    5248        <WITH_opt>                   => LX_TERMINAL
      669+    5249        <WITH_ptr_ident_opt>
      670+    5250        <all_references_opt>
      671+    5251        <alpha_constant>             => LX_TERMINAL
      672+    5252        <alpha_constant_no_ALL>      => LX_TERMINAL
      673+    5253        <alpha_constant_no_ALL_no_zero> => LX_TERMINAL
      674+    5254        <alpha_constant_no_zero>     => LX_TERMINAL
      675+    5255        <alpha_or_arith>             => LX_TERMINAL or BINARY_OP or UNARY_OP or LX_ETT_ITEM
      676+    5256        <alphabet_name>              => LX_TERMINAL
      677+    5257        <alphabet_name_common>       => LX_TERMINAL
      678+    5258        <arith_expr>                 => LX_TERMINAL or BINARY_OP or UNARY_OP or LX_ETT_ITEM
      679+    5259        <basic_mnemonic_name>        => LX_TERMINAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:143  
      680+    5260        <basic_mnemonic_name_list>
      681+    5261        <basic_rel_op>               => BINARY_OP
      682+    5262        <before_after_advancing_opt>
      683+    5263        <cd_name>
      684+    5264        <class_sign>                 => LX_TERMINAL
      685+    5265        <collating_sequence>
      686+    5266        <collating_sequence_opt>
      687+    5267        <condition>
      688+    5268        <conditional_ADD>            => O1COM.ILS_LIST
      689+    5269        <conditional_CALL>           => O1COM.ILS_LIST
      690+    5270        <conditional_COMPUTE>        => O1COM.ILS_LIST
      691+    5271        <conditional_DELETE>         => O1COM.ILS_LIST
      692+    5272        <conditional_DIVIDE>         => O1COM.ILS_LIST
      693+    5273        <conditional_EVALUATE>       => O1COM.ILS_LIST
      694+    5274        <conditional_IF>             => O1COM.ILS_LIST
      695+    5275        <conditional_MULTIPLY>       => O1COM.ILS_LIST
      696+    5276        <conditional_READ>           => O1COM.ILS_LIST
      697+    5277        <conditional_RECEIVE>        => O1COM.ILS_LIST
      698+    5278        <conditional_RETURN>         => O1COM.ILS_LIST
      699+    5279        <conditional_REWRITE>        => O1COM.ILS_LIST
      700+    5280        <conditional_SEARCH>         => O1COM.ILS_LIST
      701+    5281        <conditional_START>          => O1COM.ILS_LIST
      702+    5282        <conditional_STRING>         => O1COM.ILS_LIST
      703+    5283        <conditional_SUBTRACT>       => O1COM.ILS_LIST
      704+    5284        <conditional_UNSTRING>       => O1COM.ILS_LIST
      705+    5285        <conditional_WRITE>          => O1COM.ILS_LIST
      706+    5286        <conditional_stmt>           => O1COM.ILS_LIST
      707+    5287        <control_div>
      708+    5288        <control_div_opt>
      709+    5289        <data_name>                  => LX_TERMINAL
      710+    5290        <data_name_list>             => LX_LIST OF LX_TERMINAL
      711+    5291        <data_name_list_opt>         => LX_TERMINAL (EMPTY) or LX_LIST OF LX_TERMINAL
      712+    5292        <data_name_opt>              => LX_TERMINAL
      713+    5293        <declaratives_opt>
      714+    5294        <delimited_ADD>              => O1COM.ILS_LIST
      715+    5295        <delimited_CALL>             => O1COM.ILS_LIST
      716+    5296        <delimited_COMPUTE>          => O1COM.ILS_LIST
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:144  
      717+    5297        <delimited_DELETE>           => O1COM.ILS_LIST
      718+    5298        <delimited_DIVIDE>           => O1COM.ILS_LIST
      719+    5299        <delimited_EVALUATE>         => O1COM.ILS_LIST
      720+    5300        <delimited_IF>               => O1COM.ILS_LIST
      721+    5301        <delimited_MULTIPLY>         => O1COM.ILS_LIST
      722+    5302        <delimited_PERFORM>          => O1COM.ILS_LIST
      723+    5303        <delimited_READ>             => O1COM.ILS_LIST
      724+    5304        <delimited_RECEIVE>          => O1COM.ILS_LIST
      725+    5305        <delimited_RETURN>           => O1COM.ILS_LIST
      726+    5306        <delimited_REWRITE>          => O1COM.ILS_LIST
      727+    5307        <delimited_SEARCH>           => O1COM.ILS_LIST
      728+    5308        <delimited_START>            => O1COM.ILS_LIST
      729+    5309        <delimited_STRING>           => O1COM.ILS_LIST
      730+    5310        <delimited_SUBTRACT>         => O1COM.ILS_LIST
      731+    5311        <delimited_UNSTRING>         => O1COM.ILS_LIST
      732+    5312        <delimited_WRITE>            => O1COM.ILS_LIST
      733+    5313        <delimited_stmt>             => O1COM.ILS_LIST
      734+    5314        <end_program>
      735+    5315        <end_program_list>
      736+    5316        <factor>                     => LX_TERMINAL or LX_ETT_ITEM or BINARY_OP or UNARY_OP
      737+    5317        <file_name>
      738+    5318        <file_name_list>
      739+    5319        <find_type>
      740+    5320        <from_ident_phrase_opt>
      741+    5321        <ident_alpha_lit_no_ALL>     => LX_TERMINAL or LX_ETT_ITEM
      742+    5322        <ident_alpha_lit_no_ALL_list>    => LX_LIST of <ident_alpha_lit_no_all>
      743+    5323        <ident_div>
      744+    5324        <ident_ident-round>          => LX_ETT_ITEM
      745+    5325        <ident_ident-round_list>     => LX_LIST OF LX_ETT_ITEM
      746+    5326        <ident_lit>                  => LX_TERMINA or LX_ETT_ITEM
      747+    5327        <ident_lit_list_no_ALL>      => LX_LIST of (LX_TERMINAL or LX_ETT_ITEM)
      748+    5328        <ident_lit_no_ALL>           => LX_TERMINAL or LX_ETT_ITEM
      749+    5329        <ident_no_refmod>            => LX_ETT_ITEM
      750+    5330        <ident_ident-round_no_refmod> => LX_ETT_ITEM
      751+    5331        <ident_num-lit>              => LX_TERMINAL or LX_ETT_ITEM
      752+    5332        <ident_num-lit_list>         => LX_LIST of (LX_TERMINAL or LX_ETT_ITEM)
      753+    5333        <ident_num-lit_opt>          => LX_TERMINAL (maybe EMPTY) or LX_ETT_ITEM
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:145  
      754+    5334        <identifier>                 => LX_ETT_ITEM
      755+    5335        <identifier_list>            => LX_LIST of <identifier>
      756+    5336        <identifier_list_opt>
      757+    5337        <identifier_opt>
      758+    5338        <imp_cond_stmts>
      759+    5339        <imperative_ACCEPT>          => O1COM.ILS_LIST
      760+    5340        <imperative_ADD>             => ADD_STMT
      761+    5341        <imperative_ALTER>           => O1COM.ILS_LIST
      762+    5342        <imperative_CALL>
      763+    5343        <imperative_CANCEL>
      764+    5344        <imperative_CLOSE>
      765+    5345        <imperative_COMPUTE>         => COMPUTE_STMT
      766+    5346        <imperative_CONTINUE>        => O1COM.ILS_LIST
      767+    5347        <imperative_DELETE>
      768+    5348        <imperative_DISABLE>
      769+    5349        <imperative_DISPLAY>         => O1COM.ILS_LIST
      770+    5350        <imperative_DIVIDE>          => DIVIDE_STMT
      771+    5351        <imperative_ENABLE>
      772+    5352        <imperative_ENTRY>
      773+    5353        <imperative_EXAMINE>
      774+    5354        <imperative_EXIT_PROGRAM>
      775+    5355        <imperative_GENERATE>
      776+    5356        <imperative_GO_TO>           => O1COM.ILS_LIST
      777+    5357        <imperative_INITIALIZE>
      778+    5358        <imperative_INITIATE>
      779+    5359        <imperative_INSPECT>         => INSPECT_1_STMT or INSPECT_2_STMT or
      780+    5360                                        INSPECT_3_STMT or INSPECT_4_STMT
      781+    5361        <imperative_MERGE>
      782+    5362        <imperative_MOVE>            => O1COM.ILS_LIST
      783+    5363        <imperative_MULTIPLY>        => MULTIPLY_STMT
      784+    5364        <imperative_OPEN>
      785+    5365        <imperative_PERFORM>         => O1COM.ILS_LIST
      786+    5366        <imperative_PURGE>
      787+    5367        <imperative_READ>
      788+    5368        <imperative_READ_LABEL>
      789+    5369        <imperative_RECEIVE>
      790+    5370        <imperative_RELEASE>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:146  
      791+    5371        <imperative_RETURN>
      792+    5372        <imperative_REWRITE>
      793+    5373        <imperative_SEND>
      794+    5374        <imperative_SET>
      795+    5375        <imperative_SORT>
      796+    5376        <imperative_START>
      797+    5377        <imperative_STOP>            => O1COM.ILS_LIST
      798+    5378        <imperative_STRING>
      799+    5379        <imperative_SUBTRACT>        => SUBTRACT_STMT
      800+    5380        <imperative_SUPPRESS>
      801+    5381        <imperative_TERMINATE>
      802+    5382        <imperative_UNSTRING>
      803+    5383        <imperative_WRITE>
      804+    5384        <imperative_WRITE_LABEL>
      805+    5385        <imperative_stmt>            => O1COM.ILS_LIST
      806+    5386        <imperative_stmts>           => ILS_LIST
      807+    5387        <init_data_types>
      808+    5388        <integer>                    => LX_TERMINAL
      809+    5389        <internal_program>
      810+    5390        <into_ident_phrase_opt>
      811+    5391        <less_than_rel_op>           => BINARY_OP
      812+    5392        <literal>                    => LX_TERMINAL
      813+    5393        <literal_list>               => LX_LIST OF LX_TERMINAL
      814+    5394        <literal_no_ALL>             => LX_TERMINAL
      815+    5395        <mnemonic_name>              => LX_TERMINAL
      816+    5396        <overflow_phrase>            => ILS_LIST
      817+    5397        <paragraph>                  => ILS_LIST
      818+    5398        <paragraph_def>              => LX_TERMINAL
      819+    5399        <paragraph_header>           => ILS_LIST
      820+    5400        <paragraph_ref>              => LX_TERMINAL
      821+    5401        <paragraphs>                 => ILS_LIST
      822+    5402        <privacy_on_words>
      823+    5403        <privacy_phrase>
      824+    5404        <privacy_phrase_list>
      825+    5405        <privacy_word>               => LX_TERMINAL
      826+    5406        <privacy_word_list>
      827+    5407        <proc_div>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:147  
      828+    5408        <proc_section>
      829+    5409        <procedure_div_subset>
      830+    5410        <procedure_div_using>
      831+    5411        <procedure_name>             => LX_TERMINAL(ST$ points to PARA)
      832+    5412        <procedure_name_list>        => LX_LIST of <procedure_name>
      833+    5413        <procedure_name_or_blank>    => LX_TERMINAL
      834+    5414        <program_name>
      835+    5415        <program_procedure_division>
      836+    5416        <pwr>                        => LX_TERMINAL or LX_ETT_ITEM or BINARY_OP or UNARY_OP
      837+    5417        <qualified_id>               => LX_LIST OF LX_TERMINAL
      838+    5418        <qualified_id_list>          => LX_LIST OF <qualified_id>
      839+    5419        <reference_modification>     => LX_LIST of 1 or 2 <arith_expr>
      840+    5420        <relation_condition>         => BINARY_OP
      841+    5421        <relational_operator>        => BINARY_OP
      842+    5422        <report_name>
      843+    5423        <report_name_list>
      844+    5424        <retaining_clause>
      845+    5425        <retaining_type>             => LX_TERMINAL
      846+    5426        <retaining_type_list>
      847+    5427        <section_header>             => ILS_LIST
      848+    5428        <section_name>
      849+    5429        <section_use_header>
      850+    5430        <sections_paragraphs_opt>    => ILS_LIST or LX_TERMINAL(empty)
      851+    5431        <sentences>                  => ILS_LIST
      852+    5432        <sign_class_condition>       => UNARY_OP
      853+    5433        <size_error_phrase>          => ILS_LIST
      854+    5434        <subscript_list>             => LX_LIST of <arith_expr>
      855+    5435        <subscripts>                 => LX_LIST of <arith_expr>
      856+    5436        <term>                       => LX_TERMINAL or LX_ETT_ITEM or BINARY_OP or UNARY_OP
      857+    5437        <thru_sect_opt>
      858+    5438        <unary>                      => LX_TERMINAL or LX_ETT_ITEM or BINARY_OP or UNARY_OP
      859+    5439        <with_conversion_opt>
      860+    5440        <with_dup_phrase_opt>
      861+    5441        <with_test_opt>              => LX_TERMINAL (BEFORE,AFTER)
      862+    5442        */
      863+    5443
      864+    5444
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:148  
      865+    5445
      866+    5446        %EQU ADD_TO = 0;
      867+    5447        %EQU ADD_GIVING = 1;
      868+    5448        %EQU ADD_CORRESPONDING = 2;
      869+    5449
      870+    5450    1   DCL 1 ADD_STMT BASED ALIGNED, /* ADD STATEMENT */
      871+    5451    1       2 ID     UBIN HALF UNAL,
      872+    5452    1       2 *      UBIN HALF UNAL,
      873+    5453    1       2 KEY_WORD$ PTR,
      874+    5454    1       2 SENDING$  PTR ,
      875+    5455    1       2 RECEIVING$ PTR,
      876+    5456    1       2 TYPE   SBIN WORD,
      877+    5457    1       2 *      SBIN WORD,
      878+    5458    1       2 *      SBIN WORD,
      879+    5459    1       2 *      SBIN WORD;
      880+    5460
      881+    5461
      882+    5462        /* Unary operators  for UNARY_OP */
      883+    5463
      884+    5464        %EQU OP_NOT                    = 0;
      885+    5465        %EQU OP_UNARY_MINUS            = 1;
      886+    5466        %EQU OP_PAREN                  = 2;
      887+    5467        %EQU OP_OWNER                  = 3;
      888+    5468        %EQU OP_MEMBER                 = 4;
      889+    5469        %EQU OP_TENANT                 = 5;
      890+    5470        %EQU OP_NUMERIC                = 6;
      891+    5471        %EQU OP_ALPHABETIC             = 7;
      892+    5472        %EQU OP_ALPHABETIC_LOWER       = 8;
      893+    5473        %EQU OP_ALPHABETIC_UPPER       = 9;
      894+    5474        %EQU OP_POSITIVE               = 10;
      895+    5475        %EQU OP_NEGATIVE               = 11;
      896+    5476        %EQU OP_ZERO                   = 12;
      897+    5477        %EQU OP_EMPTY                  = 13;
      898+    5478
      899+    5479        /* Binary operators for BINARY OP */
      900+    5480
      901+    5481        %EQU OP_AND                    = 14;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:149  
      902+    5482        %EQU OP_OR                     = 15;
      903+    5483        %EQU OP_PLUS                   = 16;
      904+    5484        %EQU OP_BINARY_MINUS           = 17;
      905+    5485        %EQU OP_STAR                   = 18;
      906+    5486        %EQU OP_SLASH                  = 19;
      907+    5487        %EQU OP_STAR_STAR              = 20;
      908+    5488        %EQU OP_THRU                   = 21;
      909+    5489        %EQU OP_LESS_THAN              = 22;
      910+    5490        %EQU OP_EQUAL                  = 23;
      911+    5491        %EQU OP_GREATER_THAN           = 24;
      912+    5492        %EQU OP_NOT_EQUAL              = 25;
      913+    5493        %EQU OP_LESS_THAN_OR_EQUAL     = 26;
      914+    5494        %EQU OP_GREATER_THAN_OR_EQUAL  = 27;
      915+    5495        %EQU OP_MINIMUM                = 28;
      916+    5496        %EQU OP_INDEX                  = 29;
      917+    5497
      918+    5498           /* Unary op */
      919+    5499
      920+    5500        %EQU OP_SWITCH_IS_ON           = 30;
      921+    5501        %EQU OP_SWITCH_IS_OFF          = 31;
      922+    5502        %EQU OP_SET_SWITCH_ON          = 32;
      923+    5503        %EQU OP_SET_SWITCH_OFF         = 33;
      924+    5504
      925+    5505        /* More binary ops */
      926+    5506        %EQU OP_USER_CLASS             = 34;
      927+    5507
      928+    5508
      929+    5509        %MACRO SET_OF_UNARY_ARITH;
      930+    5510
      931+    5511             %OP_PAREN,
      932+    5512             %OP_UNARY_MINUS
      933+    5513
      934+    5514        %MEND;
      935+    5515
      936+    5516
      937+    5517        %MACRO SET_OF_RELATIONAL_OPS;
      938+    5518
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:150  
      939+    5519            %OP_USER_CLASS,
      940+    5520            %OP_AND,
      941+    5521            %OP_OR,
      942+    5522            %OP_EQUAL,
      943+    5523            %OP_LESS_THAN,
      944+    5524            %OP_GREATER_THAN,
      945+    5525            %OP_NOT_EQUAL,
      946+    5526            %OP_LESS_THAN_OR_EQUAL,
      947+    5527            %OP_GREATER_THAN_OR_EQUAL
      948+    5528
      949+    5529        %MEND;
      950+    5530
      951+    5531
      952+    5532
      953+    5533        %MACRO SET_OF_BINARY_ARITH;
      954+    5534
      955+    5535             %OP_PLUS,
      956+    5536             %OP_BINARY_MINUS,
      957+    5537             %OP_STAR,
      958+    5538             %OP_SLASH,
      959+    5539             %OP_STAR_STAR
      960+    5540
      961+    5541        %MEND;
      962+    5542
      963+    5543    1   DCL 1 BINARY_OP BASED ALIGNED,
      964+    5544    1         2 ID         UBIN HALF UNAL,
      965+    5545    1         2 B          UNAL,
      966+    5546    1           3 ERROR     BOOLEAN,
      967+    5547    1           3 *         BIT(5) UNAL,
      968+    5548    1           3 HIGH_LEV  BOOLEAN,   /* Expression uses high-level feature */
      969+    5549    1           3 *         BIT(11) UNAL,
      970+    5550    1         2 LOP$       PTR,
      971+    5551    1         2 ROP$       PTR,
      972+    5552    1         2 OP         UBIN WORD,
      973+    5553    1         2 *          UBIN WORD,
      974+    5554    1         2 LINE       UBIN WORD,
      975+    5555    1         2 COLUMN     UBIN WORD,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:151  
      976+    5556    1         2 LINK       PTR;
      977+    5557
      978+    5558
      979+    5559    1   DCL 1 CALL_STMT BASED ALIGNED,
      980+    5560    1       2 ID          UBIN HALF UNAL,
      981+    5561    1       2 *           UBIN HALF UNAL,
      982+    5562    1       2 KEY_WORD$   PTR,
      983+    5563    1       2 PROC_NAME$  PTR,
      984+    5564    1       2 ARG_LIST$   PTR,
      985+    5565    1       2 *           PTR,
      986+    5566    1       2 *           PTR,
      987+    5567    1       2 *           PTR,
      988+    5568    1       2 *           PTR;
      989+    5569
      990+    5570
      991+    5571
      992+    5572
      993+    5573    1   DCL 1 COMPUTE_STMT BASED ALIGNED, /* COMPUTE STATEMENT */
      994+    5574    1       2 ID     UBIN HALF UNAL,
      995+    5575    1       2 *      UBIN HALF UNAL,
      996+    5576    1       2 KEY_WORD$   PTR,
      997+    5577    1       2 EXPR$       PTR,
      998+    5578    1       2 IDENT_LIST$ PTR,
      999+    5579    1       2 *           PTR,
     1000+    5580    1       2 *           PTR,
     1001+    5581    1       2 *           PTR,
     1002+    5582    1       2 *           PTR;
     1003+    5583
     1004+    5584
     1005+    5585    1   DCL 1 DEFERED_QUAL_ID  BASED  ALIGNED, /* Defered qualified id's */
     1006+    5586    1         2 ID             UBIN HALF UNAL,
     1007+    5587    1         2 B              UNAL,
     1008+    5588    1           3 ERROR        BOOLEAN,
     1009+    5589    1           3 *            BIT(17) UNAL,
     1010+    5590    1         2 QUAL_ID_LIST$  PTR, /* Ptr to <QUALIFIED_ID> */
     1011+    5591    1         2 ASSOC_VAR_ST$  PTR, /* Ptr to associated variable ST */
     1012+    5592    1         2 ILL$           PTR, /* points to associated ILL item */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:152  
     1013+    5593    1         2 *              PTR, /* Not presently used */
     1014+    5594    1         2 LINE           UBIN WORD,
     1015+    5595    1         2 COLUMN         UBIN WORD,
     1016+    5596    1         2 LINK           PTR;
     1017+    5597
     1018+    5598
     1019+    5599    1   DCL 1 DELETE_STMT BASED ALIGNED,   /* Delete statement */
     1020+    5600    1         2 ID            UBIN HALF UNAL,
     1021+    5601    1         2 *             UBIN HALF UNAL,
     1022+    5602    1         2 KEY_WORD$     PTR,
     1023+    5603    1         2 FILE_NAME$    PTR,
     1024+    5604    1         2 *             PTR,
     1025+    5605    1         2 *             PTR,
     1026+    5606    1         2 *             PTR,
     1027+    5607    1         2 *             PTR,
     1028+    5608    1         2 *             PTR;
     1029+    5609
     1030+    5610
     1031+    5611
     1032+    5612    1   DCL 1 DIVIDE_STMT BASED ALIGNED, /* DIVIDE STATEMENT */
     1033+    5613    1         2 ID     UBIN HALF UNAL,
     1034+    5614    1         2 *      UBIN HALF UNAL,
     1035+    5615    1         2 KEY_WORD$ PTR,
     1036+    5616    1         2 DIVISOR$   PTR,
     1037+    5617    1         2 QUOTIENT_LIST$ PTR,
     1038+    5618    1         2 DIVIDEND_LIST$ PTR,
     1039+    5619    1         2 REMAINDER$ PTR,
     1040+    5620    1         2 * PTR,
     1041+    5621    1         2 * PTR;
     1042+    5622
     1043+    5623        %MACRO EMPTY_LX_LIST;
     1044+    5624        DCL 1 EMPTY_LX_LIST CONSTANT,
     1045+    5625              2 ID    UBIN HALF HALIGNED INIT (%LX_LIST),
     1046+    5626              2 *     BIT (18) INIT (FALSE),
     1047+    5627              2 TAIL$ PTR INIT (ADDR (NIL)),
     1048+    5628              2 COUNT SBIN INIT (0),
     1049+    5629              2 *     SBIN INIT (0),
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:153  
     1050+    5630              2 HEAD$ PTR INIT (ADDR (NIL)),
     1051+    5631              2 *     BIT (72) ALIGNED INIT (FALSE),
     1052+    5632              2 LINK  PTR INIT (ADDR (NIL));
     1053+    5633        %MEND;
     1054+    5634
     1055+    5635        /* Types of EXAMINE formats */
     1056+    5636        %EQU EXAMINE_TALLYING         = 0;
     1057+    5637        %EQU EXAMINE_TALLYING_REPLACING = 1;
     1058+    5638        %EQU EXAMINE_REPLACING          = 2;
     1059+    5639
     1060+    5640
     1061+    5641        /* Types of expressions for EVALUATE */
     1062+    5642
     1063+    5643        %EQU EXPR_TYPE_ANY = 0;
     1064+    5644        %EQU EXPR_TYPE_TRUE = 1;
     1065+    5645        %EQU EXPR_TYPE_FALSE = 2;
     1066+    5646        %EQU EXPR_TYPE_COND = 3;
     1067+    5647        %EQU EXPR_TYPE_EXPR = 4;
     1068+    5648
     1069+    5649        %EQU IMP_ILS_LIST  = 0; /* Imperative statement(s) only */
     1070+    5650        %EQU COND_ILS_LIST = 1; /* Flag conditional statement for level checking */
     1071+    5651
     1072+    5652    1   DCL 1 ILS_LIST BASED ALIGNED,
     1073+    5653    1         2 ID           UBIN HALF UNAL,
     1074+    5654    1         2 CODE         UBIN HALF UNAL,
     1075+    5655    1         2 HEAD$        PTR,
     1076+    5656    1         2 TAIL$        PTR,
     1077+    5657    1         2 *  PTR,
     1078+    5658    1         2 *  PTR,
     1079+    5659    1         2 *            PTR,
     1080+    5660    1         2 *            PTR,
     1081+    5661    1         2 LINK         PTR;
     1082+    5662
     1083+    5663
     1084+    5664
     1085+    5665
     1086+    5666
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:154  
     1087+    5667        %EQU INSPECT_1 = 1029 ; /* '2001'O */
     1088+    5668        %EQU INSPECT_2 = 1030 ; /* '2002'O */
     1089+    5669        %EQU INSPECT_4 = 1032 ; /* '2004'O */
     1090+    5670
     1091+    5671    1   DCL 1  INSPECT_1_STMT          BASED ALIGNED, /*INSPECT Format 1 */
     1092+    5672    1        2 ID                      UBIN HALF UNAL,
     1093+    5673    1        2 HIGH_LEV                BIT(1),   /* High-level feature used */
     1094+    5674    1        2 *                       BIT(17),
     1095+    5675    1        2 KEY_WORD$               PTR,
     1096+    5676    1        2 ID_1$                   PTR,
     1097+    5677    1        2 INSPECT_1$              PTR,
     1098+    5678    1        2 *                       PTR,
     1099+    5679    1        2 LINE                    SBIN WORD,
     1100+    5680    1        2 COLUMN                  SBIN WORD,
     1101+    5681    1        2 *                       PTR ;
     1102+    5682
     1103+    5683    1   DCL 1  INSPECT_2_STMT          BASED ALIGNED, /*INSPECT Format 2 */
     1104+    5684    1        2 ID                      UBIN HALF UNAL,
     1105+    5685    1        2 HIGH_LEV                BIT(1),   /* High-level feature used */
     1106+    5686    1        2 *                       BIT(17),
     1107+    5687    1        2 KEY_WORD$               PTR,
     1108+    5688    1        2 ID_1$                   PTR,
     1109+    5689    1        2 INSP_2_REPLACE$         PTR,
     1110+    5690    1        2 *                       PTR,
     1111+    5691    1        2 LINE                    SBIN WORD,
     1112+    5692    1        2 COLUMN                  SBIN WORD,
     1113+    5693    1        2 *                       PTR ;
     1114+    5694
     1115+    5695    1   DCL 1  INSPECT_4_STMT          BASED ALIGNED, /*INSPECT Format 4 */
     1116+    5696    1        2 ID                      UBIN HALF UNAL,
     1117+    5697    1        2 *                       UBIN HALF UNAL,
     1118+    5698    1        2 KEY_WORD$               PTR,
     1119+    5699    1        2 ID_1$                   PTR,
     1120+    5700    1        2 ID_6$                   PTR,
     1121+    5701    1        2 ID_7$                   PTR,
     1122+    5702    1        2 LINE                    SBIN WORD,
     1123+    5703    1        2 COLUMN                  SBIN WORD,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:155  
     1124+    5704    1        2 INSP_1_BEFORE_AFTER_OPT$ PTR ;
     1125+    5705
     1126+    5706    1   DCL 1 LX_ETT_ITEM BASED ALIGNED,
     1127+    5707    1       2      ID      UBIN HALF UNAL,    /* identification number */
     1128+    5708    1       2      B       UNAL,
     1129+    5709    1         3      ERROR   BOOLEAN,
     1130+    5710    1         3      ROUND   BOOLEAN,
     1131+    5711    1         3      INTEGER BOOLEAN,
     1132+    5712    1         3      ALL     BOOLEAN,
     1133+    5713    1         3      NEGATE  BOOLEAN,
     1134+    5714    1         3      REFMOD  BOOLEAN,
     1135+    5715    1         3      HIGH_LEV BOOLEAN,   /* Expression uses high-level features */
     1136+    5716    1         3      *       BIT (11) ,
     1137+    5717    1       2      FLAGS REDEF B BIT(18) UNAL,
     1138+    5718
     1139+    5719    1       2      ETT$    PTR,               /* PTR TO ETT TREE */
     1140+    5720    1       2      BY_CONTENT_ILS_LIST$  PTR, /* Move Arg to Temp ILS  */
     1141+    5721    1       2      *       SBIN WORD,
     1142+    5722    1       2      TYPE    UBIN WORD,    /* TYPE (EG, %TYI, %TYA, ETC) */
     1143+    5723    1       2      LINE    UBIN WORD,    /* LINE# OF THIS OCCURRENCE    */
     1144+    5724    1       2      COLUMN  UBIN WORD,    /* COL # OF THIS OCCURRENCE    */
     1145+    5725    1       2      LINK    PTR;
     1146+    5726
     1147+    5727    1   DCL 1 LX_LARGE BASED ALIGNED,
     1148+    5728    1         2 ID      UBIN HALF UNAL,
     1149+    5729    1         2 *       BIT(18) UNAL,
     1150+    5730    1         2 LARGE_ITEM$ PTR,
     1151+    5731    1         2 *       SBIN WORD,
     1152+    5732    1         2 *       SBIN WORD,
     1153+    5733    1         2 *       SBIN WORD,
     1154+    5734    1         2 *       SBIN WORD,
     1155+    5735    1         2 *       SBIN WORD,
     1156+    5736    1         2 LINK    PTR;
     1157+    5737
     1158+    5738    1   DCL 1 LX_LIST ALIGNED BASED , /* List descriptor */
     1159+    5739    1       2 ID      UBIN HALF UNAL,
     1160+    5740    1       2 B       UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:156  
     1161+    5741    1         3 ERROR   BOOLEAN ,
     1162+    5742    1         3 *       BIT (5),
     1163+    5743    1         3 HIGH_LEV BOOLEAN,   /* Expression uses high-level features */
     1164+    5744    1         3 *       BIT (11),
     1165+    5745
     1166+    5746    1       2 TAIL$   PTR ,             /* Pointer to tail item in list */
     1167+    5747    1       2 COUNT   SBIN WORD,        /* Number of ident items in list */
     1168+    5748    1       2 *       SBIN WORD,
     1169+    5749    1       2 HEAD$   PTR ,            /* Pointer to head of the list */
     1170+    5750    1       2 *       UBIN WORD ,
     1171+    5751    1       2 *       UBIN WORD ,
     1172+    5752    1       2 LINK    PTR ;             /* Pointer to next item in list */
     1173+    5753
     1174+    5754        /* LX_REC_DECL field equates */
     1175+    5755
     1176+    5756        %EQU REC_DECL_LEVEL_NO = 0;
     1177+    5757        %EQU REC_DECL_DATA_NAME = 1;
     1178+    5758        %EQU REC_DECL_USAGE = 2;
     1179+    5759        %EQU REC_DECL_PIC_CLAUSE = 3;
     1180+    5760        %EQU REC_DECL_REDEFINES = 4;
     1181+    5761        %EQU REC_DECL_RENAMES = 5;
     1182+    5762        %EQU REC_DECL_OCCURS = 6;
     1183+    5763        %EQU REC_DECL_VALUE = 7;
     1184+    5764        %EQU REC_DECL_SIGN = 8;
     1185+    5765        %EQU REC_DECL_BLANK = 9;
     1186+    5766        %EQU REC_DECL_GLOBAL = 10;
     1187+    5767        %EQU REC_DECL_SYNC = 11;
     1188+    5768        %EQU REC_DECL_EXTERNAL = 12;
     1189+    5769        %EQU REC_DECL_JUSTIFIED = 13;
     1190+    5770        %EQU REC_DECL_INDEXED = 14;
     1191+    5771        %EQU REC_DECL_KEY = 15;
     1192+    5772        %EQU REC_DECL_MAX_FIELD = 15;  /* Update this when adding fields */
     1193+    5773
     1194+    5774    1   DCL 1 LX_REC_DECL BASED ALIGNED,  /* Record declaration info */
     1195+    5775    1         2 ID             UBIN HALF UNAL,
     1196+    5776    1         2 *              BIT(18) UNAL,
     1197+    5777    1         2 P,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:157  
     1198+    5778    1           3 LEVEL_NO$    PTR,  /* <level_no> */
     1199+    5779    1           3 DATA_NAME$   PTR,  /* <data_name> */
     1200+    5780    1           3 USAGE$       PTR,  /* <usage_clause> */
     1201+    5781    1           3 PIC_CLAUSE$  PTR,  /* picture_clause */
     1202+    5782    1           3 REDEFINES$   PTR,  /* <redefines_clause> */
     1203+    5783    1           3 RENAMES$     PTR,  /* <renames_clause> */
     1204+    5784    1           3 OCCURS$      PTR,  /* LX_LIST (1 or 2 nodes)
     1205+    5785                                         node 1) LX_LIST of <integer> (1 or 2)
     1206+    5786                                         node 2) <qualified_id>
     1207+    5787                                     */
     1208+    5788    1           3 VALUE$       PTR,  /* <literal_thru_list> */
     1209+    5789    1           3 SIGN$        PTR,  /* <sign_clause */
     1210+    5790    1           3 BLANK$       PTR,  /* <blank_clause */
     1211+    5791    1           3 GLOBAL$      PTR,  /* <global_clause> */
     1212+    5792    1           3 SYNC$        PTR,  /* <sync_clause> */
     1213+    5793    1           3 EXTERNAL$    PTR,  /* <external_clause> */
     1214+    5794    1           3 JUSTIFIED$   PTR,  /* <justified_clause> */
     1215+    5795    1           3 INDEXED$     PTR,  /* <OCCURS_INDEX_clause> */
     1216+    5796    1           3 KEY$         PTR,  /* LX_LIST of <OCCURS_KEY_clause> */
     1217+    5797    1         2 P_PTRS (0:%REC_DECL_MAX_FIELD) REDEF P PTR,
     1218+    5798
     1219+    5799    1         2 CLAUSE_COUNT(0:%REC_DECL_MAX_FIELD) SBIN WORD,
     1220+    5800    1         2 CURRENT_CLAUSE_COUNT SBIN WORD;
     1221+    5801
     1222+    5802
     1223+    5803
     1224+    5804    1   DCL 1 LX_TERMINAL BASED ALIGNED,  /* terminal symbol obtained from parser */
     1225+    5805              %LA_STK_INFO;
     1226+    5824    1         2 LINK     PTR;
     1227+    5825
     1228+    5826
     1229+    5827
     1230+    5828
     1231+    5829    1   DCL 1 MULTIPLY_STMT BASED ALIGNED, /* MULTIPLY STATEMENT */
     1232+    5830    1       2 ID     UBIN HALF UNAL,
     1233+    5831    1       2 *      UBIN HALF UNAL,
     1234+    5832    1       2 KEY_WORD$      PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:158  
     1235+    5833    1       2 SENDING$       PTR ,
     1236+    5834    1       2 BY$            PTR,
     1237+    5835    1       2 GIVING$        PTR,
     1238+    5836    1       2 *              PTR,
     1239+    5837    1       2 *              PTR,
     1240+    5838    1       2 *      SBIN WORD;
     1241+    5839
     1242+    5840
     1243+    5841        %EQU READ_AT_END_CLAUSE = 0;
     1244+    5842        %EQU READ_INVALID_CLAUSE = 1;
     1245+    5843        %EQU READ_NO_EXCEPTION_CLAUSE = 2;
     1246+    5844
     1247+    5845    1   DCL 1 READ_STMT BASED ALIGNED,  /* Read statement */
     1248+    5846    1         2 ID         UBIN HALF UNAL,
     1249+    5847    1         2 *          UBIN HALF UNAL,
     1250+    5848    1         2 KEY_WORD$  PTR,
     1251+    5849    1         2 FILE_NAME$ PTR,
     1252+    5850    1         2 NEXT$      PTR,
     1253+    5851    1         2 INTO_IDENT$ PTR,
     1254+    5852    1         2 KEY_ID$ PTR,
     1255+    5853    1         2 *          PTR,
     1256+    5854    1         2 *          PTR;
     1257+    5855
     1258+    5856
     1259+    5857    1   DCL 1 REWRITE_STMT BASED ALIGNED,  /* Rewrite statement */
     1260+    5858    1         2 ID         UBIN HALF UNAL,
     1261+    5859    1         2 *          UBIN HALF UNAL,
     1262+    5860    1         2 KEY_WORD$  PTR,
     1263+    5861    1         2 IDENT$     PTR,
     1264+    5862    1         2 FROM_IDENT$ PTR,
     1265+    5863    1         2 *          PTR,
     1266+    5864    1         2 *          PTR,
     1267+    5865    1         2 *          PTR,
     1268+    5866    1         2 *          PTR;
     1269+    5867
     1270+    5868        /* USE_PRIVACY statement types  */
     1271+    5869
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:159  
     1272+    5870        %EQU PRIVACY_RECORD  = 1;
     1273+    5871        %EQU PRIVACY_SET     = 2;
     1274+    5872        %EQU PRIVACY_LIST    = 3;
     1275+    5873
     1276+    5874        /* DB_EXCEPTION statement types */
     1277+    5875
     1278+    5876        %EQU DB_EXCEPTION_ALL    = 0;
     1279+    5877        %EQU DB_EXCEPTION_OTHER  = 1;
     1280+    5878        %EQU DB_EXCEPTION_INDICATOR =2;
     1281+    5879        %EQU DB_EXCEPTION_END  = 3;
     1282+    5880
     1283+    5881
     1284+    5882        /* FIND statement types  */
     1285+    5883
     1286+    5884        %EQU FIND_DIRECT        = 1;
     1287+    5885        %EQU FIND_CALC          = 2;
     1288+    5886        %EQU FIND_DUPLICATE_WITHIN  = 3;
     1289+    5887        %EQU FIND_IDENT_WITHIN  = 4;
     1290+    5888        %EQU FIND_RELATIVE_OCCURENCE= 5;
     1291+    5889        %EQU FIND_OWNER         = 6;
     1292+    5890        %EQU FIND_WITHIN_USING  = 7;
     1293+    5891        %EQU FIND_FIRST_NEXT_USING  = 8;
     1294+    5892        %EQU FIND_USING         = 9;
     1295+    5893        %EQU FIND_CURRENT      = 10;
     1296+    5894
     1297+    5895        /*  USE statement types  */
     1298+    5896
     1299+    5897        %EQU USE_EXCEPTION = 0;
     1300+    5898        %EQU USE_DB_EXCEPTION = 1;
     1301+    5899        %EQU USE_SAVE_X0 = 1;
     1302+    5900        %EQU USE_PRIVACY = 2;
     1303+    5901        %EQU USE_BEFORE_REPORTING = 3;
     1304+    5902        %EQU USE_BEFORE_LABEL = 4;
     1305+    5903        %EQU USE_AFTER_LABEL = 5;
     1306+    5904
     1307+    5905        /* SET statement types */
     1308+    5906
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:160  
     1309+    5907        %EQU SET_TO        = 0;
     1310+    5908        %EQU SET_UP_BY     = 1;
     1311+    5909        %EQU SET_DOWN_BY   = 2;
     1312+    5910        %EQU SET_TO_TRUE   = 3;
     1313+    5911        %EQU SET_ON        = 4;
     1314+    5912        %EQU SET_OFF       = 5;
     1315+    5913        %EQU SET_SWITCH    = 6;
     1316+    5914        %EQU SET_TO_SWITCH = 7;
     1317+    5915
     1318+    5916    1   DCL 1 START_STMT BASED ALIGNED,
     1319+    5917    1         2 ID              UBIN HALF UNAL,
     1320+    5918    1         2 *               UBIN HALF UNAL,
     1321+    5919    1         2 KEY_WORD$       PTR,
     1322+    5920    1         2 FILE_NAME$      PTR,
     1323+    5921    1         2 KEY$            PTR,
     1324+    5922    1         2 *               PTR,
     1325+    5923    1         2 *               PTR,
     1326+    5924    1         2 *               PTR,
     1327+    5925    1         2 *               PTR;
     1328+    5926
     1329+    5927
     1330+    5928    1   DCL 1 STRING_STMT BASED ALIGNED,
     1331+    5929    1         2 ID           UBIN HALF UNAL,
     1332+    5930    1         2 *            UBIN HALF UNAL,
     1333+    5931    1         2 KEY_WORD$    PTR,
     1334+    5932    1         2 STRING_LIST$ PTR,
     1335+    5933    1         2 INTO$        PTR,
     1336+    5934    1         2 POINTER$     PTR,
     1337+    5935    1         2 *            SBIN WORD,
     1338+    5936    1         2 *            SBIN WORD;
     1339+    5937
     1340+    5938
     1341+    5939        %EQU SUBTRACT_FROM = 0;
     1342+    5940        %EQU SUBTRACT_GIVING = 1;
     1343+    5941        %EQU SUBTRACT_CORRESPONDING = 2;
     1344+    5942
     1345+    5943    1   DCL 1 SUBTRACT_STMT BASED ALIGNED, /* SUBTRACT STATEMENT */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:161  
     1346+    5944    1         2 ID     UBIN HALF UNAL,
     1347+    5945    1         2 *      UBIN HALF UNAL,
     1348+    5946    1         2 KEY_WORD$ PTR,
     1349+    5947    1         2 SENDING$  PTR ,
     1350+    5948    1         2 FROM$   PTR,
     1351+    5949    1         2 RECEIVING$ PTR,
     1352+    5950    1         2 TYPE   SBIN WORD,
     1353+    5951    1         2 *      SBIN WORD,
     1354+    5952    1         2 *      SBIN WORD;
     1355+    5953
     1356+    5954
     1357+    5955
     1358+    5956
     1359+    5957    1   DCL 1 UNARY_OP BASED ALIGNED,
     1360+    5958    1         2 ID         UBIN HALF UNAL,
     1361+    5959    1         2 B          UNAL,
     1362+    5960    1           3 ERROR     BOOLEAN,
     1363+    5961    1           3 *         BIT(5) UNAL,
     1364+    5962    1           3 HIGH_LEV  BOOLEAN,   /* Expression uses high-level feature */
     1365+    5963    1           3 *         BIT(11) UNAL,
     1366+    5964    1         2 LOP$       PTR,
     1367+    5965    1         2 *          PTR,
     1368+    5966    1         2 OP         UBIN WORD,
     1369+    5967    1         2 *          UBIN WORD,
     1370+    5968    1         2 LINE       UBIN WORD,
     1371+    5969    1         2 COLUMN     UBIN WORD,
     1372+    5970    1         2 LINK       PTR;
     1373+    5971
     1374+    5972
     1375+    5973    1   DCL 1 UNSTRING_STMT BASED ALIGNED, /* Unstring statement */
     1376+    5974    1         2 ID           UBIN HALF UNAL,
     1377+    5975    1         2 *            UBIN HALF UNAL,
     1378+    5976    1         2 KEY_WORD$    PTR,
     1379+    5977    1         2 IDENT$       PTR,
     1380+    5978    1         2 DELIM_LIST$  PTR,
     1381+    5979    1         2 INTO_LIST$   PTR,
     1382+    5980    1         2 POINTER$     PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:162  
     1383+    5981    1         2 TALLYING$    PTR,
     1384+    5982    1         2 *          PTR;
     1385+    5983
     1386+    5984
     1387+    5985        %EQU WRITE_EOP_CLAUSE = 0;
     1388+    5986        %EQU WRITE_INVALID_CLAUSE = 1;
     1389+    5987        %EQU WRITE_NO_EXCEPTION_CLAUSE = 2;
     1390+    5988
     1391+    5989    1   DCL 1 WRITE_STMT BASED ALIGNED,  /* Write statement */
     1392+    5990    1         2 ID            UBIN HALF UNAL,
     1393+    5991    1         2 *             UBIN HALF UNAL,
     1394+    5992    1         2 KEY_WORD$     PTR,
     1395+    5993    1         2 IDENT$        PTR,
     1396+    5994    1         2 FROM_IDENT$   PTR,
     1397+    5995    1         2 LINES$        PTR,
     1398+    5996    1         2 *             PTR,
     1399+    5997    1         2 *             PTR,
     1400+    5998    1         2 *             PTR;
     1401+    5999
     1402+    6000    1    DCL 1 LX_REPORT_REC     BASED  ALIGNED,
     1403+    6001    1          2 ID                     UBIN  HALF  UNAL,
     1404+    6002    1          2 *                      BIT(18) UNAL,
     1405+    6003    1          2 D,
     1406+    6004    1            3 REPORT_TYPE          UBIN WORD,  /* %REPORT_HEADING, %... */
     1407+    6005    1            3 LINE_TYPE            UBIN WORD,  /* %REPORT_LINE_INT, %.. */
     1408+    6006    1            3 NEXT_GROUP_TYPE      UBIN WORD,  /* %NEXT_GROUP_INT, %... */
     1409+    6007    1          2 P,
     1410+    6008    1            3 LEVEL_NO$            PTR,
     1411+    6009    1            3 DATA_NAME$           PTR,
     1412+    6010    1            3 USAGE$               PTR,
     1413+    6011    1            3 PICTURE$             PTR,
     1414+    6012    1            3 VALUE$               PTR,
     1415+    6013    1            3 SIGN$                PTR,
     1416+    6014    1            3 BLANK$               PTR,
     1417+    6015    1            3 TYPE$                PTR,
     1418+    6016    1            3 JUSTIFIED$           PTR,
     1419+    6017    1            3 NEXT_GROUP$          PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:163  
     1420+    6018    1            3 LINE_NUMBER$         PTR,
     1421+    6019    1            3 COLUMN_NUMBER$       PTR,
     1422+    6020    1            3 GROUP_INDICATE$      PTR,
     1423+    6021    1            3 SOURCE$              PTR,
     1424+    6022    1            3 SUM$                 PTR,
     1425+    6023    1          2 P_PTRS  (0:%REPORT_REC_MAX_FIELD)  REDEF  P  PTR,
     1426+    6024    1          2 CLAUSE_COUNT           UBIN  WORD,
     1427+    6025    1          2 NEXT_GROUP_NO#         SBIN WORD,
     1428+    6026    1          2 COLUMN_NO#             SBIN WORD,
     1429+    6027    1          2 LINE_NO#               SBIN WORD,
     1430+    6028    1          2 LEVEL_NUMBER           UBIN  WORD;
     1431+    6029
     1432+    6030    1    DCL 1 DEFERED_ID_TREE          BASED   ALIGNED,
     1433+    6031    1          2 ID                     UBIN  HALF  UNAL,
     1434+    6032    1          2 *                      UBIN  HALF  UNAL,
     1435+    6033    1          2 QUAL_ID$               PTR,
     1436+    6034    1          2 SUB$                   PTR,
     1437+    6035    1          2 REF$                   PTR,
     1438+    6036    1          2 ACTION_NO#             UBIN WORD,
     1439+    6037    1          2 LINE                   SBIN WORD,
     1440+    6038    1          2 LINK                   PTR;
     1441+    6039
     1442+    6040    1    DCL 1 DEFERED_IDENTIFIER        BASED  ALIGNED,
     1443+    6041    1          2 ID                      UBIN HALF UNAL,
     1444+    6042    1          2 B                       UNAL,
     1445+    6043    1            3 ERROR                 BOOLEAN,
     1446+    6044    1            3 *                     BIT(17)  UNAL,
     1447+    6045    1          2 DEFERED_ID$            PTR,
     1448+    6046    1          2 ASSOC_VAR_LTS$          PTR,
     1449+    6047    1          2 ASSOC_REPORT_LTS$       PTR,
     1450+    6048    1          2 *                       PTR,
     1451+    6049    1          2 LINE                    UBIN WORD,
     1452+    6050    1          2 COLUMN                  UBIN WORD,
     1453+    6051    1          2 LINK                    PTR;
     1454+    6052
     1455+    6053
     1456+    6054    1    DCL 1 DEFERED_SUM_CLAUSE_LIST   BASED  ALIGNED,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:164  
     1457+    6055    1          2 ID                      UBIN HALF UNAL,
     1458+    6056    1          2 B                       UNAL,
     1459+    6057    1            3 ERROR                 BOOLEAN,
     1460+    6058    1            3 *                     BIT(17)  UNAL,
     1461+    6059    1          2 SUM_CLAUSE_LIST$        PTR,
     1462+    6060    1          2 ASSOC_VAR_LTS$          PTR,
     1463+    6061    1          2 ASSOC_REPORT_LTS$       PTR,
     1464+    6062    1          2 ASSOC_01_LTS$           PTR,
     1465+    6063    1          2 LINE                    UBIN WORD,
     1466+    6064    1          2 COLUMN                  UBIN WORD,
     1467+    6065    1          2 LINK                    PTR;
     1468+    6066
     1469+    6067
     1470+    6068    1    DCL 1 DEFERED_SUM_CLAUSE        BASED  ALIGNED,
     1471+    6069    1          2 ID                      UBIN HALF UNAL,
     1472+    6070    1          2 B                       UNAL,
     1473+    6071    1            3 ERROR                 BOOLEAN,
     1474+    6072    1            3 RESET_ID              BOOLEAN,
     1475+    6073    1            3 RESET_FINAL           BOOLEAN,
     1476+    6074    1            3 *                     BIT(15)  UNAL,
     1477+    6075    1          2 DEFERED_ID$            PTR,
     1478+    6076    1          2 *                       PTR,
     1479+    6077    1          2 SUM_UPON$               PTR,
     1480+    6078    1          2 SUM_RESET$              PTR,
     1481+    6079    1          2 LINE                    UBIN WORD,
     1482+    6080    1          2 COLUMN                  UBIN WORD,
     1483+    6081    1          2 LINK                    PTR;
     1484+    6082
     1485+    6083    1    DCL 1 LX_CD_INPUT         BASED ALIGNED,
     1486+    6084    1          2 ID                UBIN HALF UNAL,
     1487+    6085    1          2 B                 UNAL,
     1488+    6086    1            3 INITIAL         BOOLEAN,
     1489+    6087    1            3 *               BIT(17) UNAL,
     1490+    6088    1          2 CD_NAME$          PTR,
     1491+    6089    1          2 BLOCK$            PTR,
     1492+    6090    1          2 P,
     1493+    6091    1            3 QUEUE$          PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:165  
     1494+    6092    1            3 SUB_QUEUE_1$    PTR,
     1495+    6093    1            3 SUB_QUEUE_2$    PTR,
     1496+    6094    1            3 SUB_QUEUE_3$    PTR,
     1497+    6095    1            3 MESSAGE_DATE$   PTR,
     1498+    6096    1            3 MESSAGE_TIME$   PTR,
     1499+    6097    1            3 SYMBOLIC_SOURCE$ PTR,
     1500+    6098    1            3 TEXT_LENGTH$    PTR,
     1501+    6099    1            3 END_KEY$        PTR,
     1502+    6100    1            3 STATUS_KEY$     PTR,
     1503+    6101    1            3 MESSAGE_COUNT$  PTR,
     1504+    6102    1          2 INPUT_FIELDS$  (0:%(CD_INPUT_OPTION - 1)) REDEF P PTR;
     1505+    6103
     1506+    6104    1    DCL 1 LX_CD_OUTPUT        BASED ALIGNED,
     1507+    6105    1          2 ID                UBIN HALF UNAL,
     1508+    6106    1          2 B                 UNAL,
     1509+    6107    1            3 ERROR           BOOLEAN,
     1510+    6108    1            3 *               BIT(17) UNAL,
     1511+    6109    1          2 CD_NAME$          PTR,
     1512+    6110    1          2 BLOCK$            PTR,
     1513+    6111    1          2 P,
     1514+    6112    1            3 DESTINATION_COUNT$  PTR,
     1515+    6113    1            3 TEXT_LENGTH$    PTR,
     1516+    6114    1            3 STATUS_KEY$     PTR,
     1517+    6115    1            3 DESTINATION_TABLE$ PTR,
     1518+    6116    1            3 ERROR_KEY$      PTR,
     1519+    6117    1            3 SYMBOLIC_DESTINATION$ PTR,
     1520+    6118    1            3 OCCURS$         PTR,
     1521+    6119    1            3 INDEX_LIST$     PTR,
     1522+    6120    1          2 OUTPUT_FIELDS$  (0:%(CD_OUTPUT_OPTION + 1)) REDEF P PTR;
     1523+    6121
     1524+    6122    1    DCL 1 LX_CD_I_O           BASED ALIGNED,
     1525+    6123    1          2 ID                UBIN HALF UNAL,
     1526+    6124    1          2 B                 UNAL,
     1527+    6125    1            3 INITIAL         BOOLEAN,
     1528+    6126    1            3 *               BIT(17) UNAL,
     1529+    6127    1          2 CD_NAME$          PTR,
     1530+    6128    1          2 BLOCK$            PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:166  
     1531+    6129    1          2 P,
     1532+    6130    1            3 MESSAGE_DATE$   PTR,
     1533+    6131    1            3 MESSAGE_TIME$   PTR,
     1534+    6132    1            3 TERMINAL$       PTR,
     1535+    6133    1            3 TEXT_LENGTH$    PTR,
     1536+    6134    1            3 END_KEY$        PTR,
     1537+    6135    1            3 STATUS_KEY$     PTR,
     1538+    6136    1          2 I_O_FIELDS$ (0:%(CD_I_O_OPTION - 1)) REDEF P PTR;
     1539+    6137
     1540+    6138        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:167  
     1541+    6139
     1542+    6140        %MACRO NEW_LX_REC_DECL(@POINTER=);
     1543+    6141          DO;
     1544+    6142            %NEW(@POINTER=@POINTER,
     1545+    6143                 @TEMPLATE=LX_REC_DECL);
     1546+    6144            @POINTER -> LX_REC_DECL.ID = %LX_REC_DECL;
     1547+    6145            @POINTER -> LX_REC_DECL.CURRENT_CLAUSE_COUNT = 0;
     1548+    6146            DO I = 0 TO %REC_DECL_MAX_FIELD;
     1549+    6147              @POINTER -> LX_REC_DECL.P_PTRS(I) = ADDR(NIL);
     1550+    6148              @POINTER -> LX_REC_DECL.CLAUSE_COUNT(I) = 0;
     1551+    6149            END;
     1552+    6150          END;
     1553+    6151        %MEND;
     1554+    6152
     1555+    6153         %MACRO  NEW_LX_REPORT_REC (@POINTER = );
     1556+    6154           DO;
     1557+    6155             %NEW (@POINTER = @POINTER,
     1558+    6156                   @TEMPLATE = LX_REPORT_REC);
     1559+    6157             @POINTER -> LX_REPORT_REC.ID = %LX_REPORT_REC;
     1560+    6158             @POINTER -> LX_REPORT_REC.CLAUSE_COUNT = 0;
     1561+    6159             @POINTER -> LX_REPORT_REC.D.REPORT_TYPE = %NO_REPORT_TYPE;
     1562+    6160             @POINTER -> LX_REPORT_REC.D.LINE_TYPE = %NO_REPORT_TYPE;
     1563+    6161             @POINTER -> LX_REPORT_REC.D.NEXT_GROUP_TYPE = %NO_REPORT_TYPE;
     1564+    6162             @POINTER -> LX_REPORT_REC.NEXT_GROUP_NO# = 0;
     1565+    6163             @POINTER -> LX_REPORT_REC.LINE_NO# = 0;
     1566+    6164             @POINTER -> LX_REPORT_REC.COLUMN_NO# = 0;
     1567+    6165             DO I = 0 TO %REPORT_REC_MAX_FIELD;
     1568+    6166               @POINTER -> LX_REPORT_REC.P_PTRS(I) = ADDR(NIL);
     1569+    6167             END;
     1570+    6168           END;
     1571+    6169         %MEND;
     1572+    6170
     1573+    6171         %MACRO INIT_DEFERED_ID_TREE (@POINTER = ,
     1574+    6172                                      @QUAL_ID$ = "ADDR(NIL)",
     1575+    6173                                      @LINK    = "ADDR(NIL)",
     1576+    6174                                      @SUB$    = "ADDR(NIL)",
     1577+    6175                                      @REF$    = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:168  
     1578+    6176                                      @ACTION_NO# = SEMANTIC_ACTION,
     1579+    6177                                      @LINE    = 0);
     1580+    6178           DO;
     1581+    6179
     1582+    6180             @POINTER -> DEFERED_ID_TREE.ID = %DEFERED_ID_TREE;
     1583+    6181             @POINTER -> DEFERED_ID_TREE.QUAL_ID$ = @QUAL_ID$;
     1584+    6182             @POINTER -> DEFERED_ID_TREE.SUB$ = @SUB$;
     1585+    6183             @POINTER -> DEFERED_ID_TREE.REF$ = @REF$;
     1586+    6184             @POINTER -> DEFERED_ID_TREE.LINK = @LINK;
     1587+    6185             @POINTER -> DEFERED_ID_TREE.LINE = @LINE;
     1588+    6186             @POINTER -> DEFERED_ID_TREE.ACTION_NO# = @ACTION_NO#;
     1589+    6187           END;
     1590+    6188         %MEND;
     1591+    6189
     1592+    6190         %MACRO INIT_DEFERED_IDENTIFIER (@POINTER      =,
     1593+    6191                                         @DEFERED_ID$ = "ADDR(NIL)",
     1594+    6192                                         @ASSOC_VAR_LTS$ = "ADDR(NIL)",
     1595+    6193                                         @ASSOC_REPORT_LTS$ = "ADDR(NIL)",
     1596+    6194                                         @ERROR         = '0'B,
     1597+    6195                                         @LINE          = COMCOM.CURRENT.LINE,
     1598+    6196                                         @COLUMN        = COMCOM.CURRENT.COLUMN,
     1599+    6197                                         @LINK          = "ADDR(NIL)");
     1600+    6198           DO;
     1601+    6199             @POINTER -> DEFERED_IDENTIFIER.ID = %DEFERED_IDENTIFIER;
     1602+    6200             @POINTER -> DEFERED_IDENTIFIER.DEFERED_ID$ = @DEFERED_ID$;
     1603+    6201             @POINTER -> DEFERED_IDENTIFIER.ASSOC_VAR_LTS$ = @ASSOC_VAR_LTS$;
     1604+    6202             @POINTER -> DEFERED_IDENTIFIER.ASSOC_REPORT_LTS$ = @ASSOC_REPORT_LTS$;
     1605+    6203             @POINTER -> DEFERED_IDENTIFIER.LINE = @LINE;
     1606+    6204             @POINTER -> DEFERED_IDENTIFIER.COLUMN = @COLUMN;
     1607+    6205             @POINTER -> DEFERED_IDENTIFIER.LINK = @LINK;
     1608+    6206             @POINTER -> DEFERED_IDENTIFIER.B = '0'B;
     1609+    6207             @POINTER -> DEFERED_IDENTIFIER.B.ERROR = @ERROR;
     1610+    6208           END;
     1611+    6209         %MEND;
     1612+    6210
     1613+    6211         %MACRO INIT_DEFERED_SUM_CLAUSE_LIST (@POINTER      =,
     1614+    6212                                              @SUM_CLAUSE_LIST$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:169  
     1615+    6213                                              @ASSOC_VAR_LTS$ = "ADDR(NIL)",
     1616+    6214                                              @ASSOC_REPORT_LTS$ = "ADDR(NIL)",
     1617+    6215                                              @ASSOC_01_LTS$ = "ADDR(NIL)",
     1618+    6216                                              @ERROR         = '0'B,
     1619+    6217                                              @LINE          = COMCOM.CURRENT.LINE,
     1620+    6218                                              @COLUMN       = COMCOM.CURRENT.COLUMN,
     1621+    6219                                              @LINK          = "ADDR(NIL)");
     1622+    6220           DO;
     1623+    6221             @POINTER -> DEFERED_SUM_CLAUSE_LIST.ID = %DEFERED_SUM_CLAUSE_LIST;
     1624+    6222             @POINTER -> DEFERED_SUM_CLAUSE_LIST.SUM_CLAUSE_LIST$ = @SUM_CLAUSE_LIST$;
     1625+    6223             @POINTER -> DEFERED_SUM_CLAUSE_LIST.ASSOC_VAR_LTS$ = @ASSOC_VAR_LTS$;
     1626+    6224             @POINTER -> DEFERED_SUM_CLAUSE_LIST.ASSOC_REPORT_LTS$ = @ASSOC_REPORT_LTS$;
     1627+    6225             @POINTER -> DEFERED_SUM_CLAUSE_LIST.ASSOC_01_LTS$ = @ASSOC_01_LTS$;
     1628+    6226             @POINTER -> DEFERED_SUM_CLAUSE_LIST.B = '0'B;
     1629+    6227             @POINTER -> DEFERED_SUM_CLAUSE_LIST.B.ERROR = @ERROR;
     1630+    6228             @POINTER -> DEFERED_SUM_CLAUSE_LIST.LINE = @LINE;
     1631+    6229             @POINTER -> DEFERED_SUM_CLAUSE_LIST.COLUMN = @COLUMN;
     1632+    6230             @POINTER -> DEFERED_SUM_CLAUSE_LIST.LINK = @LINK;
     1633+    6231           END;
     1634+    6232         %MEND;
     1635+    6233
     1636+    6234
     1637+    6235         %MACRO INIT_DEFERED_SUM_CLAUSE      (@POINTER      =,
     1638+    6236                                              @DEFERED_ID$ = "ADDR(NIL)",
     1639+    6237                                              @SUM_UPON$ = "ADDR(NIL)",
     1640+    6238                                              @SUM_RESET$ = "ADDR(NIL)",
     1641+    6239                                              @ERROR         = '0'B,
     1642+    6240                                              @RESET_ID      = '0'B,
     1643+    6241                                              @RESET_FINAL   = '0'B,
     1644+    6242                                              @LINE          = COMCOM.CURRENT.LINE,
     1645+    6243                                              @COLUMN        = COMCOM.CURRENT.COLUMN,
     1646+    6244                                              @LINK          = "ADDR(NIL)");
     1647+    6245           DO;
     1648+    6246             @POINTER -> DEFERED_SUM_CLAUSE.ID = %DEFERED_SUM_CLAUSE;
     1649+    6247             @POINTER -> DEFERED_SUM_CLAUSE.DEFERED_ID$ = @DEFERED_ID$;
     1650+    6248             @POINTER -> DEFERED_SUM_CLAUSE.SUM_UPON$ = @SUM_UPON$;
     1651+    6249             @POINTER -> DEFERED_SUM_CLAUSE.SUM_RESET$ = @SUM_RESET$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:170  
     1652+    6250             @POINTER -> DEFERED_SUM_CLAUSE.B = '0'B;
     1653+    6251             @POINTER -> DEFERED_SUM_CLAUSE.B.ERROR = @ERROR;
     1654+    6252             @POINTER -> DEFERED_SUM_CLAUSE.B.RESET_ID = @RESET_ID;
     1655+    6253             @POINTER -> DEFERED_SUM_CLAUSE.B.RESET_FINAL = @RESET_FINAL;
     1656+    6254             @POINTER -> DEFERED_SUM_CLAUSE.LINE = @LINE;
     1657+    6255             @POINTER -> DEFERED_SUM_CLAUSE.COLUMN = @COLUMN;
     1658+    6256             @POINTER -> DEFERED_SUM_CLAUSE.LINK = @LINK;
     1659+    6257           END;
     1660+    6258         %MEND;
     1661+    6259
     1662+    6260
     1663+    6261         %MACRO NEW_LX_CD_INPUT  (@POINTER = );
     1664+    6262           DO;
     1665+    6263             %NEW(@POINTER = @POINTER,
     1666+    6264                  @TEMPLATE = LX_CD_INPUT );
     1667+    6265
     1668+    6266             @POINTER -> LX_CD_INPUT.CD_NAME$ = ADDR(NIL);
     1669+    6267             @POINTER -> LX_CD_INPUT.BLOCK$   = ADDR(NIL);
     1670+    6268             @POINTER -> LX_CD_INPUT.ID       = %LX_CD_INPUT;
     1671+    6269             @POINTER -> LX_CD_INPUT.B        = '0'B;
     1672+    6270             DO I = 0 TO %CD_INPUT_OPTION - 1;
     1673+    6271               @POINTER -> LX_CD_INPUT.INPUT_FIELDS$(I) = ADDR(NIL);
     1674+    6272             END;
     1675+    6273           END;
     1676+    6274         %MEND;
     1677+    6275
     1678+    6276         %MACRO NEW_LX_CD_OUTPUT (@POINTER = );
     1679+    6277           DO;
     1680+    6278             %NEW(@POINTER = @POINTER,
     1681+    6279                  @TEMPLATE = LX_CD_OUTPUT);
     1682+    6280
     1683+    6281             @POINTER -> LX_CD_OUTPUT.CD_NAME$ = ADDR(NIL);
     1684+    6282             @POINTER -> LX_CD_OUTPUT.BLOCK$   = ADDR(NIL);
     1685+    6283             @POINTER -> LX_CD_OUTPUT.ID       = %LX_CD_OUTPUT;
     1686+    6284             @POINTER -> LX_CD_OUTPUT.B        = '0'B;
     1687+    6285             DO I = 0 TO %CD_OUTPUT_OPTION + 1;
     1688+    6286               @POINTER -> LX_CD_OUTPUT.OUTPUT_FIELDS$(I) = ADDR(NIL);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:171  
     1689+    6287             END;
     1690+    6288           END;
     1691+    6289         %MEND;
     1692+    6290
     1693+    6291
     1694+    6292         %MACRO NEW_LX_CD_I_O (@POINTER = );
     1695+    6293           DO;
     1696+    6294             %NEW(@POINTER = @POINTER,
     1697+    6295                  @TEMPLATE = LX_CD_I_O);
     1698+    6296
     1699+    6297             @POINTER -> LX_CD_I_O.CD_NAME$ = ADDR(NIL);
     1700+    6298             @POINTER -> LX_CD_I_O.BLOCK$   = ADDR(NIL);
     1701+    6299             @POINTER -> LX_CD_I_O.ID       = %LX_CD_I_O;
     1702+    6300             @POINTER -> LX_CD_I_O.B        = '0'B;
     1703+    6301             DO I = 0 TO %CD_I_O_OPTION - 1;
     1704+    6302               @POINTER -> LX_CD_I_O.I_O_FIELDS$(I) = ADDR(NIL);
     1705+    6303             END;
     1706+    6304           END;
     1707+    6305         %MEND;
     1708+    6306
     1709+    6307
     1710+    6308
     1711+    6309        %MACRO INIT_ADD_STMT ( @POINTER = );
     1712+    6310          DO;
     1713+    6311            @POINTER -> ADD_STMT.ID = %ADD_STMT;
     1714+    6312            @POINTER -> ADD_STMT.KEY_WORD$ = ADDR(NIL);
     1715+    6313            @POINTER -> ADD_STMT.SENDING$ = ADDR(NIL);
     1716+    6314            @POINTER -> ADD_STMT.RECEIVING$ = ADDR(NIL);
     1717+    6315            @POINTER -> ADD_STMT.TYPE = %ADD_TO;
     1718+    6316          END;
     1719+    6317        %MEND;
     1720+    6318
     1721+    6319
     1722+    6320        %MACRO INIT_CALL_STMT ( @POINTER = );
     1723+    6321          DO;
     1724+    6322            @POINTER -> CALL_STMT.ID = %CALL_STMT;
     1725+    6323            @POINTER -> CALL_STMT.KEY_WORD$ = ADDR(NIL);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:172  
     1726+    6324            @POINTER -> CALL_STMT.PROC_NAME$ = ADDR(NIL);
     1727+    6325            @POINTER -> CALL_STMT.ARG_LIST$ = ADDR(NIL);
     1728+    6326          END;
     1729+    6327        %MEND;
     1730+    6328
     1731+    6329
     1732+    6330        %MACRO INIT_DEFERED_QUAL_ID (@POINTER =,
     1733+    6331                                     @QUAL_ID_LIST$ = "ADDR(NIL)",
     1734+    6332                                     @ASSOC_VAR_ST$ = "ADDR(NIL)",
     1735+    6333                                     @ILL$          = "ADDR(NIL)",
     1736+    6334                                     @BERROR        = '0'B,
     1737+    6335                                     @LINE          = COMCOM.CURRENT.LINE,
     1738+    6336                                     @COLUMN        = COMCOM.CURRENT.COLUMN,
     1739+    6337                                     @LINK          = "ADDR(NIL)");
     1740+    6338
     1741+    6339           DO;
     1742+    6340             @POINTER -> DEFERED_QUAL_ID.ID            = %DEFERED_QUAL_ID;
     1743+    6341             @POINTER -> DEFERED_QUAL_ID.QUAL_ID_LIST$ = @QUAL_ID_LIST$;
     1744+    6342             @POINTER -> DEFERED_QUAL_ID.ASSOC_VAR_ST$ = @ASSOC_VAR_ST$;
     1745+    6343             @POINTER -> DEFERED_QUAL_ID.ILL$          = @ILL$;
     1746+    6344             @POINTER -> DEFERED_QUAL_ID.B             = '0'B;
     1747+    6345             @POINTER -> DEFERED_QUAL_ID.B.ERROR       = @BERROR;
     1748+    6346             @POINTER -> DEFERED_QUAL_ID.LINE          = @LINE;
     1749+    6347             @POINTER -> DEFERED_QUAL_ID.COLUMN        = @COLUMN;
     1750+    6348             @POINTER -> DEFERED_QUAL_ID.LINK          = @LINK;
     1751+    6349           END;
     1752+    6350
     1753+    6351        %MEND;
     1754+    6352
     1755+    6353
     1756+    6354        %MACRO INIT_DELETE_STMT (@POINTER = );
     1757+    6355          DO;
     1758+    6356            @POINTER -> DELETE_STMT.ID = %DELETE_STMT;
     1759+    6357            @POINTER -> DELETE_STMT.KEY_WORD$ = ADDR(NIL);
     1760+    6358            @POINTER -> DELETE_STMT.FILE_NAME$ = ADDR(NIL);
     1761+    6359          END;
     1762+    6360        %MEND;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:173  
     1763+    6361
     1764+    6362
     1765+    6363        %MACRO INIT_LX_LARGE (@POINTER=);
     1766+    6364          DO;
     1767+    6365            @POINTER -> LX_LARGE.ID = %LX_LARGE;
     1768+    6366            @POINTER -> LX_LARGE.LARGE_ITEM$ = ADDR(NIL);
     1769+    6367            @POINTER -> LX_LARGE.LINK = ADDR(NIL);
     1770+    6368          END;
     1771+    6369        %MEND;
     1772+    6370
     1773+    6371
     1774+    6372        %MACRO INIT_LX_LIST (@POINTER=,
     1775+    6373                             @TAIL$ = "ADDR(NIL)",
     1776+    6374                             @HEAD$ = "ADDR(NIL)",
     1777+    6375                             @LINK  = "ADDR(NIL)",
     1778+    6376                             @COUNT = 0,
     1779+    6377                             @TYPE = 0);
     1780+    6378          DO;
     1781+    6379            @POINTER -> LX_LIST.ID = %LX_LIST;
     1782+    6380            @POINTER -> LX_LIST.B  = '0'B;
     1783+    6381            @POINTER -> LX_LIST.TAIL$ = @TAIL$;
     1784+    6382            @POINTER -> LX_LIST.HEAD$ = @HEAD$;
     1785+    6383            @POINTER -> LX_LIST.LINK  = @LINK;
     1786+    6384            @POINTER -> LX_LIST.COUNT = @COUNT;
     1787+    6385          END;
     1788+    6386        %MEND;
     1789+    6387
     1790+    6388
     1791+    6389
     1792+    6390
     1793+    6391        %MACRO INIT_LX_ETT_ITEM ( @POINTER = ,
     1794+    6392                                  @TYPE    = %TYT ,
     1795+    6393                                  @LINK    = "ADDR(NIL)",
     1796+    6394                                  @ETT$    = "ADDR(NIL)" ,
     1797+    6395                                  @BY_CONTENT_ILS_LIST$ = "ADDR(NIL)",
     1798+    6396                                  @ROUND   = ,
     1799+    6397                                  @REFMOD  = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:174  
     1800+    6398                                  @ALL     = ,
     1801+    6399                                  @LINE    = COMCOM.CURRENT.LINE,
     1802+    6400                                  @COLUMN  = COMCOM.CURRENT.COLUMN);
     1803+    6401          DO;
     1804+    6402            @POINTER -> LX_ETT_ITEM.ID   = %LX_ETT_ITEM;
     1805+    6403            @POINTER -> LX_ETT_ITEM.B    = '0'B;
     1806+    6404            @POINTER -> LX_ETT_ITEM.TYPE = @TYPE;
     1807+    6405            @POINTER -> LX_ETT_ITEM.LINK = @LINK;
     1808+    6406            @POINTER -> LX_ETT_ITEM.ETT$ = @ETT$;
     1809+    6407            @POINTER -> LX_ETT_ITEM.BY_CONTENT_ILS_LIST$ =
     1810+    6408                                   @BY_CONTENT_ILS_LIST$ ;
     1811+    6409            @POINTER -> LX_ETT_ITEM.LINE = @LINE;
     1812+    6410            @POINTER -> LX_ETT_ITEM.COLUMN = @COLUMN;
     1813+    6411             %IF TEXTCHAR(@ROUND) ~= '';
     1814+    6412               @POINTER -> LX_ETT_ITEM.B.ROUND = @ROUND;
     1815+    6413             %ENDIF;
     1816+    6414
     1817+    6415             %IF TEXTCHAR(@ALL) ~= '';
     1818+    6416               @POINTER -> LX_ETT_ITEM.B.ALL = @ALL;
     1819+    6417             %ENDIF;
     1820+    6418
     1821+    6419             %IF TEXTCHAR(@REFMOD) ~= '';
     1822+    6420               @POINTER -> LX_ETT_ITEM.B.REFMOD = @REFMOD;
     1823+    6421             %ENDIF;
     1824+    6422          END;
     1825+    6423        %MEND;
     1826+    6424
     1827+    6425
     1828+    6426
     1829+    6427        %MACRO INIT_LX_TERMINAL ( @POINTER = ,
     1830+    6428                                  @TYPE    = %TYT ,
     1831+    6429                                  @BERROR  = ,
     1832+    6430                                  @LINK    = "ADDR(NIL)",
     1833+    6431                                  @LA_ITEM = ,
     1834+    6432                                  @ST$     = "ADDR(NIL)" ,
     1835+    6433                                  @SYMBOL  = %RSV_WRD_ZEROES,
     1836+    6434                                  @DNT$    = "ADDR(NIL)" ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:175  
     1837+    6435                                  @LINE    = COMCOM.CURRENT.LINE,
     1838+    6436                                  @COLUMN  = COMCOM.CURRENT.COLUMN);
     1839+    6437          DO;
     1840+    6438            @POINTER -> LX_TERMINAL.ID     = %LX_TERMINAL;
     1841+    6439            @POINTER -> LX_TERMINAL.B      = '0'B;
     1842+    6440            %IF (TEXTCHAR(@BERROR) ~= '');
     1843+    6441               @POINTER -> LX_TERMINAL.B.ERROR = @BERROR;
     1844+    6442            %ENDIF;
     1845+    6443            @POINTER -> LX_TERMINAL.TYPE   = @TYPE;
     1846+    6444            %IF (TEXTCHAR(@LA_ITEM) = '');
     1847+    6445              @POINTER -> LX_TERMINAL.LINK   = @LINK;
     1848+    6446            %ENDIF;
     1849+    6447            @POINTER -> LX_TERMINAL.ST$    = @ST$ ;
     1850+    6448            @POINTER -> LX_TERMINAL.SYMBOL = @SYMBOL;
     1851+    6449            @POINTER -> LX_TERMINAL.DNT$   = @DNT$;
     1852+    6450            @POINTER -> LX_TERMINAL.LINE   = @LINE;
     1853+    6451            @POINTER -> LX_TERMINAL.COLUMN = @COLUMN;
     1854+    6452          END;
     1855+    6453        %MEND;
     1856+    6454
     1857+    6455
     1858+    6456
     1859+    6457        %MACRO INIT_BINARY_OP (@POINTER = "ADDR(TEMP_LX_NODE)",
     1860+    6458                               @BERR    = ,
     1861+    6459                               @HIGH_LEV =,
     1862+    6460                               @LINE    = "COMCOM.CURRENT.LINE",
     1863+    6461                               @COLUMN  = "COMCOM.CURRENT.COLUMN",
     1864+    6462                               @ROP$    = "ADDR(NIL)",
     1865+    6463                               @LOP$    = "ADDR(NIL)",
     1866+    6464                               @OP      = %OP_PLUS,
     1867+    6465                               @LINK    = "ADDR(NIL)");
     1868+    6466          DO;
     1869+    6467            @POINTER -> BINARY_OP.ID      = %BINARY_OP;
     1870+    6468            @POINTER -> BINARY_OP.B       = '0'B;
     1871+    6469            %IF (TEXTCHAR(@BERR) ~= '');
     1872+    6470              @POINTER -> BINARY_OP.B.ERROR = @BERR;
     1873+    6471            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:176  
     1874+    6472            %IF (TEXTCHAR(@HIGH_LEV) ~= '');
     1875+    6473              @POINTER -> BINARY_OP.B.HIGH_LEV = @HIGH_LEV;
     1876+    6474            %ENDIF;
     1877+    6475            @POINTER -> BINARY_OP.LINE    = @LINE;
     1878+    6476            @POINTER -> BINARY_OP.COLUMN  = @COLUMN;
     1879+    6477            @POINTER -> BINARY_OP.ROP$    = @ROP$;
     1880+    6478            @POINTER -> BINARY_OP.LOP$    = @LOP$;
     1881+    6479            @POINTER -> BINARY_OP.OP      = @OP;
     1882+    6480            @POINTER -> BINARY_OP.LINK    = @LINK;
     1883+    6481          END;
     1884+    6482        %MEND;
     1885+    6483
     1886+    6484
     1887+    6485        %MACRO INIT_MULTIPLY_STMT ( @POINTER = );
     1888+    6486          DO;
     1889+    6487            @POINTER -> MULTIPLY_STMT.ID = %MULTIPLY_STMT;
     1890+    6488            @POINTER -> MULTIPLY_STMT.KEY_WORD$ = ADDR(NIL);
     1891+    6489            @POINTER -> MULTIPLY_STMT.SENDING$ = ADDR(NIL);
     1892+    6490            @POINTER -> MULTIPLY_STMT.BY$      = ADDR(NIL);
     1893+    6491            @POINTER -> MULTIPLY_STMT.GIVING$  = ADDR(NIL);
     1894+    6492          END;
     1895+    6493        %MEND;
     1896+    6494
     1897+    6495
     1898+    6496        %MACRO INIT_READ_STMT (@POINTER = );
     1899+    6497          DO;
     1900+    6498            @POINTER -> READ_STMT.ID = %READ_STMT;
     1901+    6499            @POINTER -> READ_STMT.KEY_WORD$ = ADDR(NIL);
     1902+    6500            @POINTER -> READ_STMT.FILE_NAME$ = ADDR(NIL);
     1903+    6501            @POINTER -> READ_STMT.NEXT$ = ADDR(NIL);
     1904+    6502            @POINTER -> READ_STMT.INTO_IDENT$ = ADDR(NIL);
     1905+    6503            @POINTER -> READ_STMT.KEY_ID$ = ADDR(NIL);
     1906+    6504          END;
     1907+    6505        %MEND;
     1908+    6506
     1909+    6507
     1910+    6508        %MACRO INIT_REWRITE_STMT (@POINTER = );
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:177  
     1911+    6509          DO;
     1912+    6510            @POINTER -> REWRITE_STMT.ID = %REWRITE_STMT;
     1913+    6511            @POINTER -> REWRITE_STMT.KEY_WORD$ = ADDR(NIL);
     1914+    6512            @POINTER -> REWRITE_STMT.IDENT$ = ADDR(NIL);
     1915+    6513            @POINTER -> REWRITE_STMT.FROM_IDENT$ = ADDR(NIL);
     1916+    6514          END;
     1917+    6515        %MEND;
     1918+    6516
     1919+    6517
     1920+    6518        %MACRO INIT_START_STMT (@POINTER = );
     1921+    6519          DO;
     1922+    6520            @POINTER -> START_STMT.ID = %START_STMT;
     1923+    6521            @POINTER -> START_STMT.KEY_WORD$ = ADDR(NIL);
     1924+    6522            @POINTER -> START_STMT.FILE_NAME$ = ADDR(NIL);
     1925+    6523            @POINTER -> START_STMT.KEY$ = ADDR(NIL);
     1926+    6524          END;
     1927+    6525        %MEND;
     1928+    6526
     1929+    6527
     1930+    6528        %MACRO INIT_STRING_STMT (@POINTER = );
     1931+    6529          DO;
     1932+    6530            @POINTER -> STRING_STMT.ID = %STRING_STMT;
     1933+    6531            @POINTER -> STRING_STMT.KEY_WORD$ = ADDR(NIL);
     1934+    6532            @POINTER -> STRING_STMT.STRING_LIST$ = ADDR(NIL);
     1935+    6533            @POINTER -> STRING_STMT.INTO$ = ADDR(NIL);
     1936+    6534            @POINTER -> STRING_STMT.POINTER$ = ADDR(NIL);
     1937+    6535          END;
     1938+    6536        %MEND;
     1939+    6537
     1940+    6538        %MACRO INIT_SUBTRACT_STMT ( @POINTER = );
     1941+    6539          DO;
     1942+    6540            @POINTER -> SUBTRACT_STMT.ID = %SUBTRACT_STMT;
     1943+    6541            @POINTER -> SUBTRACT_STMT.KEY_WORD$ = ADDR(NIL);
     1944+    6542            @POINTER -> SUBTRACT_STMT.SENDING$ = ADDR(NIL);
     1945+    6543            @POINTER -> SUBTRACT_STMT.FROM$ = ADDR(NIL);
     1946+    6544            @POINTER -> SUBTRACT_STMT.RECEIVING$ = ADDR(NIL);
     1947+    6545            @POINTER -> SUBTRACT_STMT.TYPE = %SUBTRACT_FROM;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:178  
     1948+    6546          END;
     1949+    6547        %MEND;
     1950+    6548
     1951+    6549
     1952+    6550
     1953+    6551        %MACRO INIT_UNARY_OP (@POINTER = "ADDR(TEMP_LX_NODE)",
     1954+    6552                               @BERR   = ,
     1955+    6553                               @HIGH_LEV = ,
     1956+    6554                               @LINE   = "COMCOM.CURRENT.LINE",
     1957+    6555                               @COLUMN = "COMCOM.CURRENT.COLUMN",
     1958+    6556                               @LOP$   = "ADDR(NIL)",
     1959+    6557                               @OP     = %OP_UNARY_MINUS,
     1960+    6558                               @LINK   = "ADDR(NIL)");
     1961+    6559          DO;
     1962+    6560            @POINTER -> UNARY_OP.ID       = %UNARY_OP;
     1963+    6561            @POINTER -> UNARY_OP.B        = '0'B;
     1964+    6562            %IF (TEXTCHAR(@BERR) ~= '');
     1965+    6563              @POINTER -> UNARY_OP.B.ERROR  = @BERR;
     1966+    6564            %ENDIF;
     1967+    6565            %IF (TEXTCHAR(@HIGH_LEV) ~= '');
     1968+    6566              @POINTER -> UNARY_OP.B.HIGH_LEV = TRUE;
     1969+    6567            %ENDIF;
     1970+    6568            @POINTER -> UNARY_OP.LINE     = @LINE;
     1971+    6569            @POINTER -> UNARY_OP.COLUMN   = @COLUMN;
     1972+    6570            @POINTER -> UNARY_OP.LOP$     = @LOP$;
     1973+    6571            @POINTER -> UNARY_OP.OP       = @OP;
     1974+    6572            @POINTER -> UNARY_OP.LINK     = @LINK;
     1975+    6573          END;
     1976+    6574        %MEND;
     1977+    6575
     1978+    6576
     1979+    6577
     1980+    6578        %MACRO INIT_UNSTRING_STMT (@POINTER = );
     1981+    6579          DO;
     1982+    6580            @POINTER -> UNSTRING_STMT.ID   = %UNSTRING_STMT;
     1983+    6581            @POINTER -> UNSTRING_STMT.KEY_WORD$ = ADDR(NIL);
     1984+    6582            @POINTER -> UNSTRING_STMT.IDENT$ = ADDR(NIL);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:179  
     1985+    6583            @POINTER -> UNSTRING_STMT.DELIM_LIST$ = ADDR(NIL);
     1986+    6584            @POINTER -> UNSTRING_STMT.INTO_LIST$ = ADDR(NIL);
     1987+    6585            @POINTER -> UNSTRING_STMT.POINTER$ = ADDR(NIL);
     1988+    6586            @POINTER -> UNSTRING_STMT.TALLYING$ = ADDR(NIL);
     1989+    6587          END;
     1990+    6588        %MEND;
     1991+    6589
     1992+    6590
     1993+    6591
     1994+    6592
     1995+    6593        %MACRO INIT_ILS_LIST (@POINTER =);
     1996+    6594          DO;
     1997+    6595            @POINTER -> ILS_LIST.ID            = %ILS_LIST;
     1998+    6596            @POINTER -> ILS_LIST.HEAD$         = ADDR(NIL);
     1999+    6597            @POINTER -> ILS_LIST.TAIL$         = ADDR(NIL);
     2000+    6598            @POINTER -> ILS_LIST.LINK          = ADDR(NIL);
     2001+    6599          END;
     2002+    6600        %MEND;
     2003+    6601
     2004+    6602
     2005+    6603        %MACRO INIT_COMPUTE_STMT (@POINTER =,
     2006+    6604                                  @EXPR$ = "ADDR(NIL)",
     2007+    6605                                  @IDENT_LIST$ = "ADDR(NIL)",
     2008+    6606                                  @KEY_WORD$ = "ADDR(NIL)");
     2009+    6607          DO;
     2010+    6608            @POINTER -> COMPUTE_STMT.ID = %COMPUTE_STMT;
     2011+    6609            @POINTER -> COMPUTE_STMT.EXPR$ = @EXPR$;
     2012+    6610            @POINTER -> COMPUTE_STMT.IDENT_LIST$ = @IDENT_LIST$;
     2013+    6611            @POINTER -> COMPUTE_STMT.KEY_WORD$ = @KEY_WORD$;
     2014+    6612          END;
     2015+    6613        %MEND;
     2016+    6614
     2017+    6615        %MACRO INIT_DIVIDE_STMT ( @POINTER =,
     2018+    6616                                  @KEY_WORD$ = "ADDR(NIL)",
     2019+    6617                                  @DIVISOR$ = "ADDR(NIL)",
     2020+    6618                                  @QUOTIENT_LIST$ = "ADDR(NIL)",
     2021+    6619                                  @DIVIDEND_LIST$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:180  
     2022+    6620                                  @REMAINDER$ = "ADDR(NIL)");
     2023+    6621          DO;
     2024+    6622            @POINTER -> DIVIDE_STMT.ID = %DIVIDE_STMT;
     2025+    6623            @POINTER -> DIVIDE_STMT.KEY_WORD$ = @KEY_WORD$;
     2026+    6624            @POINTER -> DIVIDE_STMT.DIVISOR$ = @DIVISOR$;
     2027+    6625            @POINTER -> DIVIDE_STMT.QUOTIENT_LIST$ = @QUOTIENT_LIST$;
     2028+    6626            @POINTER -> DIVIDE_STMT.DIVIDEND_LIST$ = @DIVIDEND_LIST$;
     2029+    6627            @POINTER -> DIVIDE_STMT.REMAINDER$ = @REMAINDER$;
     2030+    6628          END;
     2031+    6629        %MEND;
     2032+    6630
     2033+    6631
     2034+    6632        %MACRO INIT_WRITE_STMT (@POINTER =);
     2035+    6633          DO;
     2036+    6634            @POINTER -> WRITE_STMT.ID = %WRITE_STMT;
     2037+    6635            @POINTER -> WRITE_STMT.KEY_WORD$ = ADDR(NIL);
     2038+    6636            @POINTER -> WRITE_STMT.IDENT$    = ADDR(NIL);
     2039+    6637            @POINTER -> WRITE_STMT.FROM_IDENT$ = ADDR(NIL);
     2040+    6638            @POINTER -> WRITE_STMT.LINES$    = ADDR(NIL);
     2041+    6639          END;
     2042+    6640        %MEND;
     2043+    6641
     2044+    6642
     2045+    6643
     2046+    6644        %INCLUDE Z8A_LEX_SYMB;
        1+    6645        /*M* Z8A_LEX_SYMB => Data structures passed between the SCANNER & LEX */
        2+    6646        /*T***********************************************************/
        3+    6647        /*T*                                                         */
        4+    6648        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+    6649        /*T*                                                         */
        6+    6650        /*T***********************************************************/
        7+    6651
        8+    6652        %EQU MAX_SYMBOL_SIZE = 322;
        9+    6653        %EQU MAX_SYMBOL_SIZE_PLUS_1 = MAX_SYMBOL_SIZE + 2;
              6653            /* at least 1 char  and even number of words */
       10+    6654        %EQU LS_NORMAL = 0;
       11+    6655        %EQU LS_PERIOD_BEFORE_COMMENT_ENTRY = 1;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:181  
       12+    6656        %EQU LS_COMMENT_ENTRY = 2;
       13+    6657        %EQU LS_PICK_UP_SAVED_SYMBOL = 3;
       14+    6658        %EQU LS_PICTURE_OR_IS = 4;
       15+    6659
       16+    6660        %MACRO LEX_SYMBOL_INFO;
       17+    6661             2 NEXT$                 PTR,
       18+    6662             2 TYPE                  UBIN WORD,
       19+    6663
       20+    6664             2 B,
       21+    6665               3 DELIM_ERROR         BOOLEAN,
       22+    6666               3 REPLACED_TOKEN      BOOLEAN,
       23+    6667               3 DEBUG_TOKEN         BOOLEAN,
       24+    6668               3 CONTINUED_TOKEN     BOOLEAN,
       25+    6669               3 COMMENT_TOKEN       BOOLEAN,
       26+    6670               3 *                   BIT(31) UNAL,
       27+    6671             2 FLAGS REDEF B BIT(36) UNAL,
       28+    6672
       29+    6673             2 LEVEL                 SBIN WORD,
       30+    6674             2 LINE                  SBIN WORD,
       31+    6675             2 COLUMN                SBIN WORD,
       32+    6676             2 END_LINE              SBIN WORD,
       33+    6677             2 END_COLUMN            SBIN WORD,
       34+    6678             2 SIZE                  SBIN WORD,
       35+    6679        %MEND;
       36+    6680
       37+    6681
       38+    6682    1   DCL 1 LEX_SYMBOL EXT ALIGNED,
       39+    6683             %LEX_SYMBOL_INFO;
       40+    6701    1        2 SYMBOL                CHAR(%MAX_SYMBOL_SIZE_PLUS_1) ;
       41+    6702    1   DCL 1 LEX_SYMBOL_WORDS REDEF LEX_SYMBOL,
       42+    6703             %LEX_SYMBOL_INFO;
       43+    6721    1        2 SYMBOL (0:%(MAX_SYMBOL_SIZE_PLUS_1/4 - 1))    UBIN WORD;
       44+    6722
       45+    6723
       46+    6724    1   DCL CURRENT_LEX_SYMBOL$ PTR EXT INIT(ADDR(LEX_SYMBOL));
       47+    6725
       48+    6726    1   DCL 1 BASED_LEX_SYMBOL BASED(CURRENT_LEX_SYMBOL$) ALIGNED,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:182  
       49+    6727             %LEX_SYMBOL_INFO;
       50+    6745    1        2 SYMBOL                CHAR(BASED_LEX_SYMBOL.SIZE);
       51+    6746
       52+    6747    1   DCL 1 BASED_LEX_SYMBOL_WORDS BASED(CURRENT_LEX_SYMBOL$) ALIGNED,
       53+    6748             %LEX_SYMBOL_INFO;
       54+    6766    1        2 SYMBOL (0:0)    UBIN WORD;
       55+    6767
       56+    6768    1   DCL 1 TEMP_LEX_SYMBOL EXT ALIGNED,
       57+    6769             %LEX_SYMBOL_INFO;
       58+    6787    1        2 SYMBOL                CHAR(%MAX_SYMBOL_SIZE_PLUS_1);
       59+    6788
       60+    6789    1   DCL 1 TEMP_LEX_SYMBOL2 EXT ALIGNED,
       61+    6790             %LEX_SYMBOL_INFO;
       62+    6808    1        2 SYMBOL                CHAR(%MAX_SYMBOL_SIZE_PLUS_1);
     2047+    6809
      494     6810        %INCLUDE Z8E_O1COM ;
        1+    6811        /*T***********************************************************/
        2+    6812        /*T*                                                         */
        3+    6813        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    6814        /*T*                                                         */
        5+    6815        /*T***********************************************************/
        6+    6816        /* LEX_O1COM -- Phase 1 Common Variables */
        7+    6817
        8+    6818
        9+    6819        /* Preprocessors for sign and comp defaults */
       10+    6820        %EQU SIGN_POS_TRAILING = 0;
       11+    6821        %EQU SIGN_POS_LEADING  = 1;
       12+    6822
       13+    6823        %EQU SIGN_TYPE_OVERPUNCH = 0;
       14+    6824        %EQU SIGN_TYPE_SEPARATE  = 1;
       15+    6825
       16+    6826        %EQU AREA_A_COLUMN_START = 7;
       17+    6827        %EQU AREA_B_COLUMN_START = 11 ;
              6827            /* Actual start is col. 12 but column 1 is actually col. 0 */
       18+    6828
       19+    6829        %SET PARSE_STACK_MAX = 2000;                          /*#29032*/
       20+    6830        %SET RED_STACK_MAX = 1400;                            /*#29032*/
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:183  
       21+    6831        %EQU INSRT_LEN_MAX = 100;
       22+    6832
       23+    6833        %IF INITIALIZE;
       25+    6835        %ELSE;
       26+    6836    1     DCL 1 O1COM ALIGNED SYMREF
       27+    6837        %ENDIF;
       28+    6838
       29+    6839    1        ,2 OP_SEG                PTR         /* ESC Triad */
       30+    6840                                          %IF INITIALIZE;
       32+    6842                                          %ENDIF;
       33+    6843    1        ,2 NEXT_SA               SBIN WORD    /* For Storage Allocation */
       34+    6844    1        ,2 NEXT_BYTE             UBIN WORD    /* 0, 1, 2, OR 3          */
       35+    6845    1        ,2 NEXT_HALF_BYTE        UBIN WORD    /* 0 or 1                 */
       36+    6846    1        ,2 LAST_BLOCK$           PTR   /* Last item on BLOCK$ list */
       37+    6847                                         %IF INITIALIZE;
       39+    6849                                         %ENDIF;
       40+    6850    1        ,2 LEVEL_NO              SBIN WORD
       41+    6851                                         %IF INITIALIZE;
       43+    6853                                         %ENDIF;
       44+    6854    1        ,2 SECTION$              PTR    /* Ptr to SECTION ST entry for PARA item */
       45+    6855                                          %IF INITIALIZE;
       47+    6857                                          %ENDIF;
       48+    6858    1        ,2 LINE_NO               UBIN WORD
       49+    6859                                          %IF INITIALIZE;
       51+    6861                                          %ENDIF;
       52+    6862    1        ,2 COLUMN_NO             UBIN WORD
              6862                 /* Ptr to start of current statement for LINOI items */
       53+    6863                                          %IF INITIALIZE;
       55+    6865                                          %ENDIF;
       56+    6866    1        ,2 STATEMENT_TYPE        UBIN WORD   /* Used for setting up LINOI items */
       57+    6867                                          %IF INITIALIZE;
       59+    6869                                          %ENDIF;
       60+    6870    1        ,2 RECORD_DCL            BIT(1) ALIGNED /* Data-name expected */
       61+    6871                                         %IF INITIALIZE;
       63+    6873                                         %ENDIF;
       64+    6874    1        ,2 PD_FLAG               BIT(1) ALIGNED
       65+    6875                                         %IF INITIALIZE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:184  
       67+    6877                                         %ENDIF;
       68+    6878    1        ,2 COMMA_DECIMAL_POINT   BIT(1) ALIGNED
              6878                 /* SPECIAL-NAMES section specifies comma to be used as decimal point */
       69+    6879                                        %IF INITIALIZE;
       71+    6881                                        %ENDIF;
       72+    6882    1        ,2 DATA_DECL_CONTEXT SBIN WORD  /* See preprocessor value below */
       73+    6883    1        ,2 ILS_LIST DALIGNED
       74+    6884    1          ,3 * (0:%(LENGTH_LX_ITEM - 1)) PTR ALIGNED
       75+    6885    1        ,2 DEBUGGING_MODE         BIT(1) ALIGNED
       76+    6886                                         %IF INITIALIZE;
       78+    6888                                         %ENDIF;
       79+    6889    1        ,2 CONDITION$             PTR ALIGNED
       80+    6890                                         %IF INITIALIZE;
       82+    6892                                         %ENDIF;
       83+    6893    1        ,2 CONDITION ALIGNED
       84+    6894    1           ,3 ACTIVE             BIT(1) ALIGNED
       85+    6895                                         %IF INITIALIZE;
       87+    6897                                         %ENDIF;
       88+    6898    1           ,3 ABBREV ALIGNED
       89+    6899    1              ,4 ALLOWED         BIT(1) ALIGNED
       90+    6900                                         %IF INITIALIZE;
       92+    6902                                         %ENDIF;
       93+    6903    1              ,4 SUBJECT$        PTR
       94+    6904    1              ,4 RELATION        SBIN WORD
       95+    6905
       96+    6906    1        ,2 OCCURS_DEPENDING$     PTR ALIGNED
       97+    6907                                        %IF INITIALIZE;
       99+    6909                                        %ENDIF;
      100+    6910    1        ,2 LEVEL_88_LIST$        PTR ALIGNED
      101+    6911                                        %IF INITIALIZE;
      103+    6913                                        %ENDIF;
      104+    6914    1        ,2 INDEX_HEAD$           PTR ALIGNED
      105+    6915                                        %IF INITIALIZE;
      107+    6917                                        %ENDIF;
      108+    6918    1        ,2 INDEX_TAIL$           PTR ALIGNED
      109+    6919                                        %IF INITIALIZE;
      111+    6921                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:185  
      112+    6922    1        ,2 KEYS$                 PTR ALIGNED
      113+    6923                                        %IF INITIALIZE;
      115+    6925                                        %ENDIF;
      116+    6926    1        ,2 CONTEXT_EVALUATE      BIT(1) ALIGNED
      117+    6927                                         %IF INITIALIZE;
      119+    6929                                         %ENDIF;
      120+    6930    1        ,2 EVALUATE_NOT_AE      BIT(1) ALIGNED
      121+    6931                                         %IF INITIALIZE;
      123+    6933                                         %ENDIF;
      124+    6934    1        ,2 VALUE$                PTR ALIGNED
      125+    6935                                        %IF INITIALIZE;
      127+    6937                                        %ENDIF;
      128+    6938    1        ,2 COLLATING_SEQ$        PTR ALIGNED
      129+    6939                                        %IF INITIALIZE;
      131+    6941                                        %ENDIF;
      132+    6942    1        ,2 CURRENT_FILE_LTS$     PTR ALIGNED
      133+    6943                                        %IF INITIALIZE;
      135+    6945                                        %ENDIF;
      136+    6946    1        ,2 CURRENT_ALT_KEY       BIT(1) ALIGNED
      137+    6947                                        %IF INITIALIZE;
      139+    6949                                        %ENDIF;
      140+    6950    1        ,2 PREVIOUS_ALT_KEY      BIT(1) ALIGNED
      141+    6951                                        %IF INITIALIZE;
      143+    6953                                        %ENDIF;
      144+    6954    1        ,2 LAST_SECTION$         PTR
      145+    6955                                        %IF INITIALIZE;
      147+    6957                                        %ENDIF;
      148+    6958    1        ,2 TALLY$                PTR
      149+    6959                                        %IF INITIALIZE;
      151+    6961                                        %ENDIF;
      152+    6962    1        ,2 LAST_SYMREF$          PTR
      153+    6963                                        %IF INITIALIZE;
      155+    6965                                        %ENDIF;
      156+    6966
      157+    6967    1        ,2 DISPLAY_SIGN_POS      SBIN WORD
      158+    6968                                        %IF INITIALIZE;
      160+    6970                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:186  
      161+    6971
      162+    6972    1        ,2 DISPLAY_SIGN_TYPE     SBIN WORD
      163+    6973                                        %IF INITIALIZE;
      165+    6975                                        %ENDIF;
      166+    6976
      167+    6977    1        ,2 COMP_4_SIGN_POS       SBIN WORD
      168+    6978                                        %IF INITIALIZE;
      170+    6980                                        %ENDIF;
      171+    6981
      172+    6982    1        ,2 COMP_DEFAULT          SBIN WORD
      173+    6983                                        %IF INITIALIZE;
      175+    6985                                        %ENDIF;
      176+    6986    1        ,2 CURRENT_PROC$         PTR
      177+    6987                                        %IF INITIALIZE;
      179+    6989                                        %ENDIF;
      180+    6990
      181+    6991    1        ,2 BLOCK$                PTR
      182+    6992                                        %IF INITIALIZE;
      184+    6994                                        %ENDIF;
      185+    6995    1        ,2 ENTRY$                PTR
      186+    6996                                        %IF INITIALIZE;
      188+    6998                                        %ENDIF;
      189+    6999    1        ,2 FIRST_PROG_QLT$       PTR
      190+    7000                                        %IF INITIALIZE;
      192+    7002                                        %ENDIF;
      193+    7003    1        ,2 SECTION_FOUND         ALIGNED
      194+    7004    1          ,3 WORKING_STORAGE     BOOLEAN
      195+    7005                                        %IF INITIALIZE;
      197+    7007                                        %ENDIF;
      198+    7008    1          ,3 LINKAGE_SECTION     BOOLEAN
      199+    7009                                        %IF INITIALIZE;
      201+    7011                                        %ENDIF;
      202+    7012    1          ,3 CONSTANT_SECTION    BOOLEAN
      203+    7013                                        %IF INITIALIZE;
      205+    7015                                        %ENDIF;
      206+    7016    1          ,3 FILE_SECTION        BOOLEAN
      207+    7017                                        %IF INITIALIZE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:187  
      209+    7019                                        %ENDIF;
      210+    7020    1          ,3 REPORT_SECTION      BOOLEAN
      211+    7021                                        %IF INITIALIZE;
      213+    7023                                        %ENDIF;
      214+    7024    1          ,3 SUB_SCHEMA          BOOLEAN
      215+    7025                                        %IF INITIALIZE;
      217+    7027                                        %ENDIF;
      218+    7028    1          ,3 COMMUNICATION       BOOLEAN
      219+    7029                                        %IF INITIALIZE;
      221+    7031                                        %ENDIF;
      222+    7032    1          ,3  DECLARATIVES       BOOLEAN
              7032                   /* True only when in Sections in the declaratives procedure. */
      223+    7033                                        %IF INITIALIZE;
      225+    7035                                        %ENDIF;
      226+    7036    1          ,3 * (0:27)            BOOLEAN
      227+    7037                                        %IF INITIALIZE;
      229+    7039                                        %ENDIF;
      230+    7040    1        ,2 CURRENT_REPORT_LTS$   PTR ALIGNED
      231+    7041                                        %IF INITIALIZE;
      233+    7043                                        %ENDIF;
      234+    7044    1        ,2 ACTION_LIST$          PTR ALIGNED
      235+    7045                                        %IF INITIALIZE;
      237+    7047                                        %ENDIF;
      238+    7048    1        ,2 REPORT_SOURCE$        PTR ALIGNED
      239+    7049                                        %IF INITIALIZE;
      241+    7051                                        %ENDIF;
      242+    7052    1        ,2 REPORT_DD$            PTR ALIGNED
      243+    7053                                        %IF INITIALIZE;
      245+    7055                                        %ENDIF;
      246+    7056    1        ,2 REPORT_SUM$           PTR ALIGNED
      247+    7057                                        %IF INITIALIZE;
      249+    7059                                        %ENDIF;
      250+    7060    1        ,2 USEP_NUMBER          UBIN(18)
      251+    7061                                        %IF INITIALIZE;
      253+    7063                                        %ENDIF;
      254+    7064    1        ,2 RVA_NUMBER            UBIN HALF
      255+    7065                                        %IF INITIALIZE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:188  
      257+    7067                                        %ENDIF;
      258+    7068    1       ,2 USEP$                 PTR  ALIGNED
      259+    7069                                       %IF INITIALIZE;
      261+    7071                                       %ENDIF;
      262+    7072    1       ,2 RVA_LINK$              PTR ALIGNED
      263+    7073                                        %IF INITIALIZE;
      265+    7075                                        %ENDIF;
      266+    7076    1       ,2 RVA$                  PTR ALIGNED
      267+    7077                                        %IF INITIALIZE;
      269+    7079                                        %ENDIF;
      270+    7080    1       ,2 DML_IA$              PTR ALIGNED
      271+    7081                                        %IF INITIALIZE;
      273+    7083                                        %ENDIF;
      274+    7084    1       ,2 DML_UWA$             PTR ALIGNED
      275+    7085                                        %IF INITIALIZE;
      277+    7087                                        %ENDIF;
      278+    7088    1       ,2 NILL_RETENTION$      PTR ALIGNED
      279+    7089                                        %IF INITIALIZE;
      281+    7091                                        %ENDIF;
      282+    7092    1       ,2 UWA_PLUS_ZERO$       PTR ALIGNED
      283+    7093                                        %IF INITIALIZE;
      285+    7095                                        %ENDIF;
      286+    7096    1       ,2 CONTROL_LIST$         PTR ALIGNED
      287+    7097                                        %IF INITIALIZE;
      289+    7099                                        %ENDIF;
      290+    7100    1       ,2 CONTROL_NAME$        PTR ALIGNED
      291+    7101                                        %IF INITIALIZE;
      293+    7103                                        %ENDIF;
      294+    7104    1       ,2 INITIATE_LIST$       PTR ALIGNED
      295+    7105                                        %IF INITIALIZE;
      297+    7107                                        %ENDIF;
      298+    7108    1       ,2 NILL_RVA             BIT(1) ALIGNED
      299+    7109                                        %IF INITIALIZE;
      301+    7111                                        %ENDIF;
      302+    7112    1       ,2 USE_REPORT$          PTR ALIGNED
      303+    7113                                        %IF INITIALIZE;
      305+    7115                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:189  
      306+    7116
      307+    7117    1         ,2 AUTHOR$                PTR ALIGNED
      308+    7118                                         %IF INITIALIZE;
      310+    7120                                         %ENDIF;
      311+    7121    1         , 2 PROG_ID_DNT$            PTR ALIGNED
      312+    7122                                         %IF INITIALIZE;
      314+    7124                                         %ENDIF;
      315+    7125    1       ,2 SEG_LIMIT            SBIN WORD
      316+    7126                                        %IF INITIALIZE;
      318+    7128                                        %ENDIF;
      319+    7129    1       ,2 BASE_LTS_LIST$       PTR
      320+    7130                                        %IF INITIALIZE;
      322+    7132                                        %ENDIF;
      323+    7133    1       ,2 CURRENT_SEG_ARRAY$   PTR ALIGNED
      324+    7134                                        %IF INITIALIZE;
      326+    7136                                        %ENDIF;
      327+    7137    1        ,2 AUTHOR_COMMENT      BOOLEAN
      328+    7138                                        %IF INITIALIZE;
      330+    7140                                        %ENDIF;
      331+    7141    1       ,2 CURRENT_SEG_LIMIT$   PTR ALIGNED
      332+    7142                                        %IF INITIALIZE;
      334+    7144                                        %ENDIF;
      335+    7145    1       ,2 ID_DIV_COUNT         SBIN WORD
      336+    7146                                        %IF INITIALIZE;
      338+    7148                                        %ENDIF;
      339+    7149    1        ,2 INSTAL_ON           BOOLEAN
      340+    7150                                        %IF INITIALIZE;
      342+    7152                                        %ENDIF;
      343+    7153    1        ,2 TPE_INTERFACE       BOOLEAN
      344+    7154                                        %IF INITIALIZE;
      346+    7156                                        %ENDIF;
      347+    7157    1        ,2 CD_INITIAL          BOOLEAN
      348+    7158                                        %IF INITIALIZE;
      350+    7160                                        %ENDIF;
      351+    7161    1       ,2 CURRENT_CD_ENTRY$    PTR ALIGNED
      352+    7162                                        %IF INITIALIZE;
      354+    7164                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:190  
      355+    7165    1       ,2 AREA_B_COLUMN_START  SBIN WORD
      356+    7166                                        %IF INITIALIZE;
      358+    7168                                        %ENDIF;
      359+    7169    1       ,2 AREA_A_COLUMN_START  SBIN WORD
      360+    7170                                        %IF INITIALIZE;
      362+    7172                                        %ENDIF;
      363+    7173    1       ,2 MARGIN_R             SBIN WORD
      364+    7174                                        %IF INITIALIZE;
      366+    7176                                        %ENDIF;
      367+    7177    1       ,2 OPEN_LTS$            PTR
      368+    7178                                        %IF INITIALIZE;
      370+    7180                                        %ENDIF;
      371+    7181    1       ,2 NILL_RVA_#           SBIN WORD
      372+    7182                                        %IF INITIALIZE;
      374+    7184                                        %ENDIF;
      375+    7185    1       ,2 CURRENT_SEGMENTC     UBIN WORD
      376+    7186                                        %IF INITIALIZE;
      378+    7188                                        %ENDIF;
      379+    7189    1       ,2 START_LENGTH_OF      BIT(1) ALIGNED
      380+    7190                                        %IF INITIALIZE;
      382+    7192                                        %ENDIF;
      383+    7193    1       ,2 STATE                SBIN WORD  /* Current parse state      */
      384+    7194                                        %IF INITIALIZE;
      386+    7196                                        %ENDIF;
      387+    7197    1       ,2 LA_CNT               SBIN WORD  /* # lookahead tokens scand */
      388+    7198                                        %IF INITIALIZE;
      390+    7200                                        %ENDIF;
      391+    7201    1       ,2 LA_PUT               SBIN WORD  /* next lookahead put index */
      392+    7202                                        %IF INITIALIZE;
      394+    7204                                        %ENDIF;
      395+    7205    1       ,2 LA_GET               SBIN WORD  /* next lookahead get index */
      396+    7206                                        %IF INITIALIZE;
      398+    7208                                        %ENDIF;
      399+    7209    1       ,2 REDUCTION            SBIN WORD  /* reduce production number */
      400+    7210    1       ,2 PARSE_STACK_IDX      SBIN WORD  /* Parse Stack Index        */
      401+    7211                                        %IF INITIALIZE;
      403+    7213                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:191  
      404+    7214    1       ,2 ERRLINE              SBIN WORD  /* Data for Error Recovery. */
      405+    7215    1       ,2 ERRCOL               SBIN WORD  /* Data for Error Recovery. */
      406+    7216    1       ,2 ERR_LA_GET           SBIN WORD  /* Data for Error Recovery. */
      407+    7217    1       ,2 ERR_LA_PUT           SBIN WORD  /* Data for Error Recovery. */
      408+    7218    1       ,2 ERR_LA_CNT           SBIN WORD  /* Data for Error Recovery. */
      409+    7219    1       ,2 ERR_RECOVERY_IN_PROGRESS BIT (1) ALIGNED
      410+    7220                                        %IF INITIALIZE;
      412+    7222                                        %ENDIF;
      413+    7223    1       ,2 PARSE_ERROR_COUNT    SBIN WORD  /* Error Recovery Data      */
      414+    7224                                        %IF INITIALIZE;
      416+    7226                                        %ENDIF;
      417+    7227    1       ,2 ALT_PARSE_STACK_IDX  SBIN WORD  /* Alt Parse Stack Index.   */
      418+    7228    1       ,2 RED_STACK_TOP        SBIN WORD
      419+    7229                                        %IF INITIALIZE;
      421+    7231                                        %ENDIF;
      422+    7232    1       ,2 IED_FLAG             BIT (1) ALIGNED
      423+    7233                                        %IF INITIALIZE;
      425+    7235                                        %ENDIF;
      426+    7236    1       ,2 ALT_LX_TOP           SBIN WORD
      427+    7237    1       ,2 LX_TOP               SBIN WORD
      428+    7238
      429+    7239    1       ,2 CORRECTION
      430+    7240    1        ,3 LEN                                  SBIN WORD
      431+    7241                                        %IF INITIALIZE;
      433+    7243                                        %ENDIF;
      434+    7244    1        ,3 INDX                                 SBIN WORD
      435+    7245                                        %IF INITIALIZE;
      437+    7247                                        %ENDIF;
      438+    7248    1        ,3 SYM            (0: %INSRT_LEN_MAX)   SBIN HALF HALIGNED
      439+    7249
      440+    7250    1       ,2 LA_STK        (0: %LA_MAX)
      441+    7251    1        ,
      442+    7252              %LA_STK_INFO (LVL = 3) ;
      443+    7271    1         3 LINK                                 UBIN WORD
      444+    7272
      445+    7273    1       ,2 LA_STK_FIELDS (0: %LA_MAX) REDEF LA_STK
      446+    7274    1        ,3 ALL_BUT_LINK
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:192  
      447+    7275    1        ,
      448+    7276              %LA_STK_INFO (LVL = 4) ;
      449+    7295    1         3 LINK                                 UBIN WORD
      450+    7296
      451+    7297    1       ,2 RT_DESC_LIST$ PTR
      452+    7298                            %IF INITIALIZE;
      454+    7300                            %ENDIF;
      455+    7301    1       ,2 PSEUDO_TEXT_FLAG BIT (1) ALIGNED
      456+    7302                            %IF INITIALIZE;
      458+    7304                            %ENDIF;
      459+    7305    1       ,2 USE_SAVE_LABEL$ PTR
      460+    7306                            %IF INITIALIZE;
      462+    7308                            %ENDIF;
      463+    7309    1       ,2 USE_RESTORE_LABEL$ PTR
      464+    7310                            %IF INITIALIZE;
      466+    7312                            %ENDIF;
      467+    7313    1       ,2 SEG_INFO ALIGNED
      468+    7314    1         ,3 SEGMENT_FOUND (0:99) BIT (1)
      469+    7315                            %IF INITIALIZE;
      471+    7317                            %ENDIF;
      472+    7318    1       ,2 NEXT_CHAR              UBIN
      473+    7319                            %IF INITIALIZE;
      475+    7321                            %ENDIF;
      476+    7322    1       ,2 LAST_ITEM_GBCD         BOOLEAN
      477+    7323                            %IF INITIALIZE;
      479+    7325                            %ENDIF;
      480+    7326    1       ,2 REPLACE_BY_FLAG        BOOLEAN
      481+    7327                            %IF INITIALIZE;
      483+    7329                             %ENDIF;
      484+    7330    1       ,2 * (0:19)     SBIN /* RFU */
      485+    7331    1       ,2 PARSE_STACK (0: %PARSE_STACK_MAX) SBIN WORD
      486+    7332    1       ,2 ALT_PARSE_STACK (0: %PARSE_STACK_MAX) SBIN WORD
      487+    7333    1       ,2 RED_STACK       (0: %RED_STACK_MAX)   SBIN WORD
      488+    7334    1       ,2 LX_STK        (0: %LX_MAX)
      489+    7335    1        ,
      490+    7336              %LA_STK_INFO (LVL = 3) ;
      491+    7355    1         3 LINK                                 PTR
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:193  
      492+    7356            /* IMPORTANT NOTE - Do NOT add new O1COM entries here. Instead, add
      493+    7357               them in replacing words of the * array before O1COM.PARSE_STACK.
      494+    7358               This way, if LX_STK ever needs to be lengthened, it can be done
      495+    7359               more easily, and likewise with PARSE_STACK. */
      496+    7360    1        ;
      497+    7361
      498+    7362
      499+    7363    1   DCL HIER_STK_PTR              SBIN WORD
      500+    7364                                               %IF INITIALIZE;
      502+    7366                                               %ELSE;
      503+    7367    1                                            SYMREF;
      504+    7368                                               %ENDIF;
      505+    7369
      506+    7370    1   DCL 1 HIER_STK (0:50)         ALIGNED
      507+    7371                                              %IF INITIALIZE;
      509+    7373                                              %ELSE;
      510+    7374    1                                            SYMREF
      511+    7375                                              %ENDIF;
      512+    7376
      513+    7377    1        ,2 QLT$                   PTR
      514+    7378                                              %IF INITIALIZE;
      516+    7380                                              %ENDIF;
      517+    7381    1        ,2 DIMS$                  PTR
      518+    7382                                              %IF INITIALIZE;
      520+    7384                                              %ENDIF;
      521+    7385    1        ,2 USAGE_TYPE             SBIN HALF UNAL
      522+    7386                                              %IF INITIALIZE;
      524+    7388                                              %ENDIF;
      525+    7389    1        ,2 LEVEL#                 SBIN BYTE UNAL
      526+    7390                                              %IF INITIALIZE;
      528+    7392                                              %ENDIF;
      529+    7393    1        ,2 ATTR                   UBIN BYTE UNAL
      530+    7394                                              %IF INITIALIZE;
      532+    7396                                              %ENDIF;
      533+    7397    1        ,2 B REDEF ATTR           UNAL
      534+    7398    1         ,3 SIGN_FOUND            BOOLEAN
      535+    7399    1         ,3 SIGN_PRESENT          BOOLEAN
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:194  
      536+    7400    1         ,3 OCCURS_DEPENDING      BOOLEAN
      537+    7401    1         ,3 CONDITION_OBJ         BOOLEAN
      538+    7402    1         ,3 VALUE_PRESENTED       BOOLEAN
      539+    7403    1         ,3 *                     BIT(4) UNAL
      540+    7404    1        ,2 SIGN                   ALIGNED
      541+    7405    1         ,3 LOCATION              SBIN HALF UNAL
      542+    7406                                              %IF INITIALIZE;
      544+    7408                                              %ENDIF;
      545+    7409    1         ,3 TYPE                  SBIN HALF UNAL
      546+    7410                                              %IF INITIALIZE;
      548+    7412                                              %ENDIF;
      549+    7413    1         ,3 LINE                  SBIN HALF UNAL
      550+    7414                                              %IF INITIALIZE;
      552+    7416                                              %ENDIF;
      553+    7417    1         ,3 COLUMN                SBIN HALF UNAL
      554+    7418                                              %IF INITIALIZE;
      556+    7420                                              %ENDIF;
      557+    7421    1        ;
      558+    7422
      559+    7423        /* Preprocessor value for DATA_DECL_CONTEXT */
      560+    7424
      561+    7425        %EQU WORKING_STORAGE       = 0;
      562+    7426        %EQU FILE_DESCRIPTION      = 1;
      563+    7427        %EQU SORT_DESCRIPTION      = 2;
      564+    7428        %EQU COMMUNICATION_DESC    = 3;
      565+    7429        %EQU LINKAGE_SECTION       = 4;
      566+    7430        %EQU CONSTANT_SECTION      = 5;
      567+    7431        %EQU REPORT_SECTION        = 6;
      568+    7432        %EQU SUB_SCHEMA_SECTION    = 7;
      569+    7433        %EQU NO_CONTEXT            = 8;
      570+    7434
      571+    7435
      572+    7436        %EQU BYTES_PER_WORD        = 4 ;
      573+    7437        %EQU DIGITS_PER_BYTE       = 2 ;
      574+    7438        %EQU BYTE_0_ALIGNED        = 0 ;
      575+    7439        %EQU BYTE_1_ALIGNED        = 1 ;
      576+    7440        %EQU BYTE_2_ALIGNED        = 2 ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:195  
      577+    7441        %EQU BYTE_3_ALIGNED        = 3 ;
      578+    7442        %EQU UNKNOWN_ALIGNMENT     = 4 ;
      579+    7443        %EQU COMP2_OFFSET          = 5 ;
      580+    7444        %EQU DOUBLE_WORD_OFFSET    = 16 ;
      581+    7445
      582+    7446
      583+    7447    1      DCL 1 PAGE_FORMAT
      584+    7448                                            %IF INITIALIZE;
      586+    7450                                            %ELSE;
      587+    7451    1                                           SYMREF
      588+    7452                                            %ENDIF;
      589+    7453    1            ,2 P
      590+    7454    1              ,3 HEADING$      PTR
      591+    7455                                            %IF INITIALIZE;
      593+    7457                                            %ENDIF;
      594+    7458    1              ,3 FIRST_DETAIL$ PTR
      595+    7459                                            %IF INITIALIZE;
      597+    7461                                            %ENDIF;
      598+    7462    1              ,3 LAST_DETAIL$  PTR
      599+    7463                                            %IF INITIALIZE;
      601+    7465                                            %ENDIF;
      602+    7466    1              ,3 FOOTING$      PTR
      603+    7467                                            %IF INITIALIZE;
      605+    7469                                            %ENDIF;
      606+    7470    1            ,2 P_PTR    (0:3) REDEF P PTR;
      607+    7471
      608+    7472
      609+    7473    1   DCL REP_STK_PTR               SBIN WORD
      610+    7474                                               %IF INITIALIZE;
      612+    7476                                               %ELSE;
      613+    7477    1                                            SYMREF;
      614+    7478                                               %ENDIF;
      615+    7479
      616+    7480    1   DCL 1 REP_STK  (0:50)         ALIGNED
      617+    7481                                              %IF INITIALIZE;
      619+    7483                                              %ELSE;
      620+    7484    1                                            SYMREF
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:196  
      621+    7485                                              %ENDIF;
      622+    7486
      623+    7487    1        ,2 QLT$                   PTR
      624+    7488                                              %IF INITIALIZE;
      626+    7490                                              %ENDIF;
      627+    7491    1        ,2 LTS$                   PTR
      628+    7492                                              %IF INITIALIZE;
      630+    7494                                              %ENDIF;
      631+    7495    1        ,2 GROUP_TYPE             UBIN WORD
      632+    7496                                              %IF INITIALIZE;
      634+    7498                                              %ENDIF;
      635+    7499    1        ,2 LEVEL#                 SBIN WORD
      636+    7500                                              %IF INITIALIZE;
      638+    7502                                              %ENDIF;
      639+    7503    1        ,2 ATTR                   UBIN BYTE UNAL
      640+    7504                                              %IF INITIALIZE;
      642+    7506                                              %ENDIF;
      643+    7507    1        ,2 B  REDEF  ATTR         UNAL
      644+    7508    1          ,3 ELEMENTARY           BOOLEAN
      645+    7509    1          ,3 COLUMN_PRESENTED     BOOLEAN
      646+    7510    1          ,3 LINE_PRESENTED       BOOLEAN
      647+    7511    1          ,3 *                    BIT(6)
      648+    7512    1        ;
      649+    7513
      650+    7514         %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:197  
      651+    7515
      652+    7516         /*  EQUs of RWCT's offset  */
      653+    7517
      654+    7518        %EQU REPORT_HEADING_OFF    = 0;
      655+    7519        %EQU REPORT_FOOTING_OFF    = 1;
      656+    7520        %EQU PAGE_HEADING_OFF      = 2;
      657+    7521        %EQU PAGE_FOOTING_OFF      = 3;
      658+    7522        %EQU ACTUAL_LINE_OFF       = 4;
      659+    7523        %EQU CONTROL_LVL_OFF       = 5;
      660+    7524        %EQU FIRST_DETAIL_TBL_OFF  = 6;
      661+    7525        %EQU FIRST_DETAIL_GI_OFF   = 7;
      662+    7526        %EQU GEN_SUBTOTAL_OFF      = 8;
      663+    7527        %EQU CTR_BREAK_OFF         = 9;
      664+    7528        %EQU CTR_SHADOW_INIT_OFF   = 10;
      665+    7529        %EQU CTR_ITEM_SWAP_OFF     = 11;
      666+    7530        %EQU TOP_OF_PAGE_OFF       = 12;
      667+    7531        %EQU LINE_COUNTER_PTR_OFF  = 13;
      668+    7532        %EQU PAGE_COUNTER_PTR_OFF  = 14;
      669+    7533        %EQU CTR_BREAK_COUNTER_OFF = 15;
      670+    7534        %EQU NEXT_GROUP_INT_OFF    = 16;
      671+    7535        %EQU PAGE_LIMIT_INT_OFF    = 17;
      672+    7536        %EQU HEADING_INT_OFF       = 18;
      673+    7537        %EQU FIRST_DETAIL_INT_OFF  = 19;
      674+    7538        %EQU LAST_DETAIL_INT_OFF   = 20;
      675+    7539        %EQU FOOTING_INT_OFF       = 21;
      676+    7540        %EQU AFTER_ADVANCE_ADDR_OFF= 22;
      677+    7541        %EQU NO_OF_CTR_ITEM_OFF    = 23;
      678+    7542        %EQU REPORT_CTR_WORD_OFF   = 24;
      679+    7543
      680+    7544        %EQU CTR_HEADING_TBL_OFF   = 0;
      681+    7545        %EQU CTR_FOOTING_TBL_OFF   = 1;
      682+    7546        %EQU RESET_SUB_OFF         = 2;
      683+    7547        %EQU CROSS_ROLL_SUB_OFF    = 3;
      684+    7548        %EQU SUM_CLEAR_SUB_OFF     = 4;
      685+    7549
      686+    7550        %EQU USE_PROC_PTR_OFF      = 0;
      687+    7551        %EQU SUPRESS_PRINT_OFF     = 1;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:198  
      688+    7552        %EQU FORMATTING_SUB_OFF    = 2;
      689+    7553        %EQU FIRST_LINE_TYPE_OFF   = 3;
      690+    7554        %EQU FIRST_LINE_INT_OFF    = 4;
      691+    7555        %EQU TOTAL_LINE_INT_OFF    = 5;
      692+    7556        %EQU NEXT_GROUP_LINE_TYPE_OFF = 6;
      693+    7557        %EQU NEXT_GROUP_LINE_INT_OFF  = 7;
      694+    7558        %EQU SPECIAL_SUBTOTAL_SUB_OFF = 8;
      695+    7559        %EQU NEXT_DETAIL_IND_OFF   = 9;
      696+    7560        %EQU RWCT_ADDR_OFF         = 10;
      697+    7561        %EQU GROUP_IND_SWITCH_OFF   = 11;
      698+    7562
      699+    7563        %EQU CTR_TBL_START_OFF     = 25;
      700+    7564        %EQU CTR_TBL_SPAN          =5;
      701+    7565
      702+    7566
      703+    7567        %EQU INITIATE_REPORT  = 0;
      704+    7568        %EQU TERMINATE_REPORT = 1;
      705+    7569        %EQU GENERATE_REPORT  = 2;
      706+    7570        %EQU GENERATE_DETAIL  = 3;
      495     7571        %INCLUDE Z8A_LTS ;
        1+    7572        /*T***********************************************************/
        2+    7573        /*T*                                                         */
        3+    7574        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    7575        /*T*                                                         */
        5+    7576        /*T***********************************************************/
        6+    7577        /* INCLUDE FILE "LTS" */
        7+    7578
        8+    7579    1   DCL   LTS$    EXT PTR;
        9+    7580    1   DCL   LONG_ITEM$ REDEF LTS$ PTR ;
       10+    7581
       11+    7582        %EQU MAX#_DIMS        = 49;
       12+    7583        %EQU MAX_SEG#         = 99;
       13+    7584        %EQU MAX_FIXED_SEG#   = 49;
       14+    7585
       15+    7586    1   DCL 1 LTS_   EXT ALIGNED,
       16+    7587    1       2 TOP    PTR INIT (ADDR(NIL)),
       17+    7588    1       2 FIRST  PTR,        /* FIRST ITEM IN PAGE  */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:199  
       18+    7589    1       2 BOTTOM SBIN WORD INIT(0),  /* NEXT AVAILABLE      */
       19+    7590    1       2 FLOOR  SBIN WORD INIT(0),  /* LAST WORD IN PAGE   */
       20+    7591    1       2 SIZE   SBIN WORD INIT(0);  /* SIZE IN #PAGES      */
       21+    7592
       22+    7593    1   DCL 1 LTS     BASED (LTS$) ALIGNED,
       23+    7594    1       2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE */
       24+    7595    1       2 N       UBIN (18) UNAL; /* LENGTH OF THIS ITEM */
       25+    7596
       26+    7597    1   DCL 1 ARGLIST BASED (LTS$) ALIGNED,
       27+    7598    1       2 ID      UBIN HALF UNAL, /* Identification code   */
       28+    7599    1       2 N       UBIN HALF UNAL, /* Size of item in words */
       29+    7600    1       2 ARG$    (0:%(PAGE_SIZE-2)) PTR ,  /* Ptr to args           */
       30+    7601    1       2 ARGS  REDEF ARG$ CHAR(%((PAGE_SIZE-1)*4));
       31+    7602
       32+    7603    1   DCL 1 DIMS    BASED (LTS$) ALIGNED,
       33+    7604    1         2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE      */
       34+    7605    1         2 N       UBIN (18) UNAL, /* LENGTH OF THIS ITEM      */
       35+    7606    1         2 DN2     PTR,            /* "DEPENDING ON" DATANAME2 */
       36+    7607    1         2 D       (0:%MAX#_DIMS), /* UP TO 49 DIMENSIONS      */
       37+    7608    1           3 SPAN    UBIN (36) UNAL, /* LENGTH OF ONE ELEMENT    */
       38+    7609    1           3 DIM     UBIN (36) UNAL, /* K-TH DIMENSION           */
       39+    7610    1           3 INDEX$  PTR,            /* K-TH INDEXES LIST OF INDEX ITEMS */
       40+    7611    1         2 OD      REDEF D,          /* Occurs Depending dims */
       41+    7612    1           3 INT1  SBIN WORD,        /* Occurs int1 to int2 times */
       42+    7613    1           3 INT2  SBIN WORD,        /* */
       43+    7614    1           3 TOTAL_SPAN SBIN WORD,
       44+    7615    1           3 *     (0:%(MAX#_DIMS-1)),
       45+    7616    1             4 *   SBIN WORD,
       46+    7617    1             4 *   SBIN WORD,
       47+    7618    1             4 *   SBIN WORD;
       48+    7619
       49+    7620
       50+    7621    1   DCL 1 LCNST   ALIGNED BASED(LTS$),
       51+    7622    1       2 ID      UBIN HALF UNAL, /* Identification code */
       52+    7623    1       2 N       UBIN HALF UNAL,
       53+    7624    1       2 CONST   CHAR(%((PAGE_SIZE-1)*4)),
       54+    7625    1       2 CONSTW  REDEF CONST,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:200  
       55+    7626    1        3 VAL    (0:%(PAGE_SIZE-2)) SBIN,
       56+    7627    1       2 DESC_LIST REDEF CONST,
       57+    7628    1        3 ARG_COUNT      SBIN HALF UNAL,
       58+    7629    1        3 DESC_COUNT     SBIN HALF UNAL,
       59+    7630    1        3 DESCRIPTOR     (0:%(PAGE_SIZE-3)),
       60+    7631    1         4 DESC_WORD               UNAL,
       61+    7632    1           5 TYPE               UBIN HALF UNAL,
       62+    7633    1           5 F                  BIT(1) UNAL,
       63+    7634    1           5 EXTENDED           BIT(1) UNAL,
       64+    7635    1           5 ARRAYED            BIT(1) UNAL,
       65+    7636    1           5 STRUCT             BIT(1) UNAL,
       66+    7637    1           5 VIRTUAL            BIT(1) UNAL,
       67+    7638    1           5 ADSC               UNAL,
       68+    7639    1             6 LENGTH           SBIN(13) UNAL,
       69+    7640    1             6 LENGTH_OFFSET REDEF LENGTH SBIN(13) UNAL,
       70+    7641    1           5 NDSC REDEF  ADSC,
       71+    7642    1             6 *                BIT(1) UNAL,
       72+    7643    1             6 SCALE_FACTOR     SBIN(6) UNAL,
       73+    7644    1             6 LENGTH           SBIN(6) UNAL,
       74+    7645    1         4 SIZE_WORD REDEF DESC_WORD SBIN WORD;
       75+    7646
       76+    7647    1   DCL 1 LONG    ALIGNED BASED(LTS$),
       77+    7648    1       2 ID      UBIN HALF UNAL, /* IDENTIFICATION CODE  */
       78+    7649    1       2 *       UBIN HALF UNAL,
       79+    7650    1       2 LENGTH  UBIN WORD UNAL; /* LENGTH OF ITEM       */
       80+    7651
       81+    7652    1   DCL 1 LTSS    ALIGNED BASED,
       82+    7653    1       2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE */
       83+    7654    1       2 *       UBIN (18) UNAL,
       84+    7655    1       2 DIMS$            PTR,   /* POINTER TO DIMS ITEM */
       85+    7656    1       2 NEL$             PTR,   /* POINTER TO NEL  ITEM */
       86+    7657    1       2 LONG$            PTR,   /* POINTER TO LONG ITEM */
       87+    7658    1       2 DEPENDING_SIZE$  PTR,   /* Pointer to Depending size item */
       88+    7659    1       2 KEY$             PTR,   /* POINTER TO KEY  ITEM */
       89+    7660    1       2 FILE_LTS$        PTR,   /* Pointer to FILE_LTS item */
       90+    7661    1       2 REPORT_ENTRY$    PTR,   /* Pointer to REPORT entry LTS item */
       91+    7662    1       2 DML_REC$         REDEF REPORT_ENTRY$ PTR, /* DML_REC item */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:201  
       92+    7663    1       2 CD_LTS$          REDEF REPORT_ENTRY$ PTR, /* CD_LTS item */
       93+    7664    1       2 BASE_LTS$        PTR,   /* Pointer to BASE_LTS item */
       94+    7665    1       2 INIT_LTS$        PTR;   /* Pointer to INIT_LTS item */
       95+    7666
       96+    7667    1   DCL 1 PRIME   ALIGNED BASED(LTS$),
       97+    7668    1       2 ID      UBIN HALF UNAL, /* IDENTIFICATION CODE  */
       98+    7669    1       2 *       UBIN HALF UNAL,
       99+    7670    1       2 TRIAD   PTR,            /* POINTER TO TRIAD REG. CONTAINS */
      100+    7671    1       2 LAST    PTR,            /* POINTER TO PREVIOUS PRIME ITEM */
      101+    7672    1       2 NEXT    PTR;            /* POINTER TO NEXT PRIME ITEM FOR REG */
      102+    7673
      103+    7674    1   DCL 1 REF     ALIGNED BASED(LTS$),
      104+    7675    1         2 * UBIN HALF UNAL,
      105+    7676    1         2 B,
      106+    7677    1           3 *        BIT(16) UNAL,
      107+    7678    1           3 WORD_    BIT(1) UNAL,
      108+    7679    1           3 CONST    BIT(1) UNAL,
      109+    7680              %DESCRIPTOR(LVL=2);
      110+    7708    1         2 SSOP_TAG$ PTR,           /* Points to triad holding tag */
      111+    7709    1         2 NEXT REDEF SSOP_TAG$ PTR,/* Pooling mechanism           */
      112+    7710
      113+    7711    1         2 SIZ_TAG$ PTR,            /* Points to triad holding tag */
      114+    7712    1         2 LAST REDEF SIZ_TAG$ PTR, /* Pooling mechanism           */
      115+    7713
      116+    7714    1         2 PR_TAG$ PTR,             /* Points to triad holding tag */
      117+    7715    1         2 ST$     PTR;             /* Points to Symbol Table item */
      118+    7716
      119+    7717    1   DCL 1 EVALUATE ALIGNED BASED(LTS$),
      120+    7718    1       2 ID       UBIN (18) UNAL,  /* identification code     */
      121+    7719    1       2 N        UBIN (18) UNAL,  /* Length of this item     */
      122+    7720    1       2 SORT     (0:%PAGE_SIZE), /* Maximum limit           */
      123+    7721    1       3 COUNT    SBIN (36) UNAL,  /* Number of duplicate GOs */
      124+    7722    1       3 COND$    PTR UNAL ;       /* Pointer to GO item      */
      125+    7723
      126+    7724    1   DCL 1 NEL     ALIGNED BASED(LTS$),
      127+    7725    1       2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE  */
      128+    7726    1       2 *       UBIN (18) UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:202  
      129+    7727    1       2 DESC    UNAL,
      130+    7728            %DESCRIPTOR(LVL=3);
      131+    7756    1       2 MOP$    PTR,            /* PTR TO CONST OF MICRO OP */
      132+    7757    1       2 DNT$    PTR;            /* PTR TO LEXEME, ORIG PIC STR */
      133+    7758
      134+    7759    1   DCL 1 INDEXES          ALIGNED BASED,
      135+    7760    1         2 ID             UBIN (18) UNAL,
      136+    7761    1         2 *              UBIN (18) UNAL,
      137+    7762    1         2 INDEX_ST$      PTR,
      138+    7763    1         2 LINK           PTR;
      139+    7764
      140+    7765    1   DCL 1 RENAMES      ALIGNED BASED(LTS$),
      141+    7766    1       2 ID           UBIN (18) UNAL, /* Identification code */
      142+    7767    1       2 *            UBIN (18) UNAL,
      143+    7768    1       2 START_ST$    PTR,            /* Ptr to starting item's ST entry */
      144+    7769    1       2 END_ST$      PTR;            /* Ptr to ending item's ST entry */
      145+    7770
      146+    7771    1   DCL 1 DEPENDING_SIZE         ALIGNED BASED (LTS$),
      147+    7772    1         2 ID             UBIN (18) UNAL,
      148+    7773    1         2 MIN_SIZE       UBIN (18) UNAL,
      149+    7774    1         2 SIZE$          PTR UNAL,
      150+    7775    1         2 DIMS$          PTR UNAL;
      151+    7776
      152+    7777    1   DCL 1 KEY              ALIGNED BASED (LTS$),
      153+    7778    1        2 ID              UBIN HALF UNAL,
      154+    7779    1        2 *               UBIN HALF UNAL,
      155+    7780    1        2 B               ALIGNED,
      156+    7781    1         3 ASCENDING      BOOLEAN,
      157+    7782    1         3 USED           BOOLEAN,
      158+    7783    1         3 *              BIT (34) UNAL,
      159+    7784    1        2 KEY$            PTR,
      160+    7785    1        2 LINK            PTR;
      161+    7786
      162+    7787
      163+    7788    1     DCL 1 REPORT_LTS         BASED (LTS$)  ALIGNED,
      164+    7789    1           2 ID               UBIN  HALF    UNAL,
      165+    7790    1           2 *                UBIN  HALF    UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:203  
      166+    7791    1           2 ST$              PTR,      /* To st item of <report name> */
      167+    7792    1           2 FILE$            PTR,      /* To st item of <file name> */
      168+    7793    1           2 ATTR             BIT (36),
      169+    7794    1           2 B    REDEF  ATTR,
      170+    7795    1             3 CODE_ON             BIT (1),
      171+    7796    1             3 CONTROL_FINAL       BIT (1),
      172+    7797    1             3 PAGE_LIMIT_ON       BIT (1),
      173+    7798    1             3 HEADING_ON          BIT (1),
      174+    7799    1             3 FIRST_DETAIL_ON     BIT (1),
      175+    7800    1             3 LAST_DETAIL_ON      BIT (1),
      176+    7801    1             3 FOOTING_ON          BIT (1),
      177+    7802    1             3 GLOBAL              BIT (1),
      178+    7803    1             3 REFERENCED          BIT (1),
      179+    7804    1             3 INITIATED           BIT (1),
      180+    7805    1             3 *                   BIT (8),
      181+    7806    1             3 CODE_NUMBER         UBIN HALF UNAL,
      182+    7807    1           2 CODE             CHAR (2),
      183+    7808    1           2 CONTROL$         PTR,
      184+    7809    1           2 CONTROL_FINAL$   PTR,
      185+    7810    1           2 CONTROL_ERROR$   PTR,
      186+    7811    1           2 GENERAL_SUBTOTAL$ PTR,
      187+    7812    1           2 PAGE_LIMIT       SBIN WORD,
      188+    7813    1           2 HEADING          SBIN WORD,
      189+    7814    1           2 FIRST_DETAIL     SBIN WORD,
      190+    7815    1           2 LAST_DETAIL      SBIN WORD,
      191+    7816    1           2 FOOTING          SBIN WORD,
      192+    7817    1           2 RECORD_LENGTH    SBIN WORD,
      193+    7818    1           2 PAGE_COUNTER$    PTR,      /* Point to page counter st item */
      194+    7819    1           2 LINE_COUNTER$    PTR,      /* Point to line counter st item */
      195+    7820    1           2 SUM_LTS$         PTR,      /* To first of SUM_LTS item */
      196+    7821    1           2 RWCT$            PTR,       /* To run time control table */
      197+    7822    1           2 REPORT_HEADING$          PTR,
      198+    7823    1           2 PAGE_HEADING$            PTR,
      199+    7824    1           2 CONTROL_HEADING_FINAL$   PTR,
      200+    7825    1           2 CONTROL_HEADING$         PTR,
      201+    7826    1           2 DETAIL$                  PTR,
      202+    7827    1           2 CONTROL_FOOTING$         PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:204  
      203+    7828    1           2 CONTROL_FOOTING_FINAL$   PTR,
      204+    7829    1           2 PAGE_FOOTING$            PTR,
      205+    7830    1           2 REPORT_FOOTING$          PTR,
      206+    7831    1           2 BUFFER_ST$               PTR,
      207+    7832    1           2 CTR_LVL_COUNTER$         PTR,
      208+    7833    1           2 COL_NO#                  SBIN WORD,
      209+    7834    1           2 NO_CTR_ITEM              SBIN WORD,
      210+    7835    1           2 AFTER_ADVANCE$           PTR,
      211+    7836    1           2 DETAIL_NO               SBIN WORD,
      212+    7837    1           2 BODY_NO                 SBIN WORD,
      213+    7838    1           2 LINK                     PTR,
      214+    7839    1           2 INIT_CHAIN$              PTR;
      215+    7840
      216+    7841    1    DCL 1 REPORT_01_LTS     BASED (LTS$)  ALIGNED,
      217+    7842    1          2 ID                    UBIN HALF UNAL,
      218+    7843    1          2 ATTR                  UBIN HALF UNAL,
      219+    7844    1          2 B  REDEF ATTR,
      220+    7845    1            3 LINE_PRESENTED      BOOLEAN,
      221+    7846    1            3 CONTROL_ERROR       BOOLEAN,
      222+    7847    1            3 NEXT_GROUP_PRESENTED BOOLEAN,
      223+    7848    1            3 ELEMENTARY          BOOLEAN,
      224+    7849    1            3 GROUP_INDICATE      BOOLEAN,
      225+    7850    1            3 *                   BIT(13),
      226+    7851    1          2 LINE_TYPE             UBIN WORD,
      227+    7852    1          2 LINE_NO#              SBIN WORD,
      228+    7853    1          2 ST$                   PTR,
      229+    7854    1          2 QLT$                  PTR,
      230+    7855    1          2 USE_CHAIN$   REDEF  QLT$  PTR,
      231+    7856    1          2 PREV                  PTR,
      232+    7857    1          2 NEXT                  PTR,
      233+    7858    1          2 LINK                  PTR,
      234+    7859    1          2 GROUP_TYPE            UBIN WORD,
      235+    7860    1          2 NEXT_GROUP_TYPE       UBIN WORD,
      236+    7861    1          2 NEXT_GROUP_NO#        SBIN WORD,
      237+    7862    1          2 TOTAL_LINES           SBIN WORD,
      238+    7863    1          2 CONTROL_LTS$          PTR,
      239+    7864    1          2 REPORT_LTS$           PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:205  
      240+    7865    1          2 SPECIAL_SUBTOTAL$     PTR,
      241+    7866    1          2 FIRST_LINE            UNAL,
      242+    7867    1            3 TYPE                UBIN WORD,
      243+    7868    1            3 NO#                 SBIN WORD,
      244+    7869    1            3 LTS$                PTR,
      245+    7870    1          2 RWCT$                 PTR,
      246+    7871    1          2 GROUP_INDICATOR$      PTR;
      247+    7872
      248+    7873
      249+    7874    1    DCL 1 REPORT_ELEM_LTS             BASED (LTS$) ALIGNED,
      250+    7875    1          2 ID                        UBIN HALF UNAL,
      251+    7876    1          2 ATTR                      UBIN HALF UNAL,
      252+    7877    1          2 B   REDEF  ATTR,
      253+    7878    1            3 LINE_PRESENTED          BOOLEAN,
      254+    7879    1            3 COLUMN_PRESENTED        BOOLEAN,
      255+    7880    1            3 SOURCE_PRESENTED        BOOLEAN,
      256+    7881    1            3 SUM_PRESENTED           BOOLEAN,
      257+    7882    1            3 GROUP_INDICATE          BOOLEAN,
      258+    7883    1            3 PRINTABLE               BOOLEAN,
      259+    7884    1            3 *                       BIT(12),
      260+    7885    1          2 LINE_TYPE                 UBIN WORD,
      261+    7886    1          2 LINE_NO#                  SBIN WORD,
      262+    7887    1          2 ST$                       PTR,
      263+    7888    1          2 QLT$                      PTR,
      264+    7889    1          2 PREV                      PTR,
      265+    7890    1          2 NEXT                      PTR,
      266+    7891    1          2 COLUMN_NO#                SBIN WORD,
      267+    7892    1          2 SPAN                      SBIN WORD,
      268+    7893    1          2 SOURCE_ETT$               PTR,
      269+    7894    1          2 SUM_LTS$                  PTR,
      270+    7895    1          2 VALUE_ETT$                PTR;
      271+    7896
      272+    7897
      273+    7898    1    DCL 1 REPORT_GRP_LTS              BASED (LTS$) ALIGNED,
      274+    7899    1          2 ID                        UBIN HALF UNAL,
      275+    7900    1          2 ATTR                      UBIN HALF UNAL,
      276+    7901    1          2 B   REDEF  ATTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:206  
      277+    7902    1            3 LINE_PRESENTED          BOOLEAN,
      278+    7903    1            3 *                       BIT(17),
      279+    7904    1          2 LINE_TYPE                 UBIN WORD,
      280+    7905    1          2 LINE_NO#                  SBIN WORD,
      281+    7906    1          2 ST$                       PTR,
      282+    7907    1          2 QLT$                      PTR,
      283+    7908    1          2 PREV                      PTR,
      284+    7909    1          2 NEXT                      PTR;
      285+    7910
      286+    7911
      287+    7912    1      DCL 1 CONTROL_NAME_LTS          BASED (LTS$) ALIGNED,
      288+    7913    1            2 ID                      UBIN HALF UNAL,
      289+    7914    1            2 ATTR                    UBIN HALF UNAL,
      290+    7915    1            2 B REDEF ATTR,
      291+    7916    1              3 CLASS_EDITED          BOOLEAN,
      292+    7917    1              3 *   (0 : 13)          BOOLEAN,
      293+    7918    1              3 CLASS                 UBIN (3) UNAL,
      294+    7919    1            2 ST$                     PTR,
      295+    7920    1            2 CONTROL_HEADING$        PTR,
      296+    7921    1            2 CONTROL_FOOTING$        PTR,
      297+    7922    1            2 SUM_RESET$              PTR,
      298+    7923    1            2 SUM_SUBTOTAL$           PTR,
      299+    7924    1            2 SUM_CLEAR$              PTR,
      300+    7925    1            2 LEVEL                   SBIN WORD,
      301+    7926    1            2 LINK                    PTR,
      302+    7927    1            2 TEMP$                   PTR,
      303+    7928    1            2 SHADOW$                 PTR,
      304+    7929    1            2 ST_FIELD$               PTR,
      305+    7930    1            2 TEMP_FIELD$             PTR,
      306+    7931    1            2 SHADOW_FIELD$           PTR,
      307+    7932    1            2 START_OFFSET            SBIN WORD;
      308+    7933
      309+    7934
      310+    7935    1      DCL 1 SUM_LTS     BASED (LTS$)  ALIGNED,
      311+    7936    1              2 ID            UBIN HALF UNAL,
      312+    7937    1              2 ATTR          UBIN HALF UNAL,
      313+    7938    1              2 B REDEF ATTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:207  
      314+    7939    1                3 RESETED     BOOLEAN,
      315+    7940    1                3 *           BIT (17),
      316+    7941    1              2 EDIT_ST$      PTR,
      317+    7942    1              2 EDIT_ST_ILL$  PTR,
      318+    7943    1              2 SUM_ST$       PTR,
      319+    7944    1              2 SUM_ST_ILL$   PTR,
      320+    7945    1              2 REPORT_LTS$   PTR,
      321+    7946    1              2 REPORT_01_LTS$ PTR;
      322+    7947
      323+    7948    1      DCL 1 SEGMENT_LTS       BASED (LTS$) ALIGNED,
      324+    7949    1            2 ID              UBIN HALF UNAL,
      325+    7950    1            2 ATTR            UBIN HALF UNAL,
      326+    7951    1            2 B  REDEF ATTR,
      327+    7952    1              3 FIXED_PERMANENT   BOOLEAN,
      328+    7953    1              3 FIXED_OVERLAY     BOOLEAN,
      329+    7954    1              3 INDEPENDENT       BOOLEAN,
      330+    7955    1              3 *                 BIT(15),
      331+    7956    1            2 SECTION_ST$        PTR,
      332+    7957    1            2 SEGMENT_NO#         SBIN WORD,
      333+    7958    1            2 NEXT_SECTION$       PTR,
      334+    7959    1            2 ALTER_RESET$        PTR,
      335+    7960    1            2 NEXT                PTR,  /* link sections with same id */
      336+    7961    1            2 LINK                PTR,
      337+    7962    1            2 SUB_LABEL$          PTR,
      338+    7963    1            2 LINE                SBIN WORD,
      339+    7964    1            2 COLUMN              SBIN WORD;
      340+    7965
      341+    7966    1      DCL 1 ALTER_LTS             ALIGNED BASED,
      342+    7967    1            2 ID                  UBIN (18) UNAL,
      343+    7968    1            2 *                   UBIN (18) UNAL,
      344+    7969    1            2 LABEL$              PTR,
      345+    7970    1            2 SEG_NO#             SBIN WORD,
      346+    7971    1            2 NEXT                PTR;
      347+    7972
      348+    7973
      349+    7974    1      DCL 1 CD_LTS                BASED (LTS$) ALIGNED,
      350+    7975    1            2 ID                  UBIN HALF UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:208  
      351+    7976    1            2 ATTR                UBIN HALF UNAL,
      352+    7977    1            2 B   REDEF ATTR,
      353+    7978    1              3 INITIAL           BOOLEAN,
      354+    7979    1              3 *                 BIT (17),
      355+    7980    1            2 BUFFER              UBIN WORD,
      356+    7981    1            2 D   REDEF BUFFER,
      357+    7982    1              3 LEN               UBIN HALF UNAL,
      358+    7983    1              3 OCCURS            UBIN HALF UNAL,
      359+    7984    1            2 CD_ST$              PTR,
      360+    7985    1            2 WORK_ST$            PTR,
      361+    7986    1            2 BUFFER_ST$          PTR,
      362+    7987    1            2 BUFFER_LENGTH       SBIN WORD,
      363+    7988    1            2 LX_CD_TYPE          UBIN WORD,
      364+    7989    1            2 LINK                PTR;
      365+    7990
      366+    7991    1      DCL 1 ARRAY_PRESET_LTS      BASED (LTS$) ALIGNED,
      367+    7992    1            2 ID                  UBIN HALF UNAL,
      368+    7993    1            2 *                   UBIN HALF UNAL,
      369+    7994    1            2 CONSTANT$           PTR,
      370+    7995    1            2 STRING$             PTR,
      371+    7996    1            2 BITS_LEFT           SBIN WORD,
      372+    7997    1            2 LAST_OFFSET         SBIN WORD;
      373+    7998
      374+    7999    1     DCL 1 BASE_LTS               BASED(LTS$) ALIGNED,
      375+    8000    1           2 ID                   UBIN HALF UNAL,
      376+    8001    1           2 *                    UBIN HALF UNAL,
      377+    8002    1           2 ST$                  PTR, /* to the based variable */
      378+    8003    1           2 POINTER$             PTR, /* to the base pointer   */
      379+    8004    1           2 SEQ#                 SBIN WORD,
      380+    8005    1           2 REDEFINE$            PTR, /* to redefine subj or obj */
      381+    8006    1           2 NEXT                 PTR, /* to next BASE_LTS      */
      382+    8007    1           2 LINK                 PTR,
      383+    8008    1           2 ARGP$            PTR;
      384+    8009
      385+    8010    1      DCL 1 FILE_LTS        BASED (LTS$) ALIGNED,
      386+    8011    1           2 ID              UBIN HALF UNAL,
      387+    8012    1           2 DEVICE_TYPE     UBIN HALF UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:209  
      388+    8013    1           2 ST$             PTR,             /* Ptr to FD ST item */
      389+    8014    1           2 FAB$            PTR,             /* Ptr to FAB ST  */
      390+    8015    1           2 FIB$      REDEF FAB$      PTR,   /* Ptr to FIB ST  */
      391+    8016    1           2 FILE_LTS_CHAIN$ PTR,             /* Linked list chain of FILE_LTS items */
      392+    8017    1           2 ASSIGN$         PTR,             /* List of DNTs */
      393+    8018    1           2 NO_OF_AREAS     SBIN WORD,       /* No of areas  */
      394+    8019
      395+    8020    1           2 ORGANIZATION    SBIN WORD,       /* Codes:
      396+    8021                                                           %SEQUENTIAL
      397+    8022                                                           %RELATIVE
      398+    8023                                                           %INDEXED
      399+    8024                                                           %KEYED     */
      400+    8025
      401+    8026    1           2 PAD_CHAR$       PTR,             /* to CONST, or Data name */
      402+    8027    1           2 RECORD_DELIM   SBIN,             /* To DNT */
      403+    8028
      404+    8029    1           2 ACCESS_MODE     SBIN WORD,       /* Codes:
      405+    8030                                                           %SEQUENTIAL_ACCESS
      406+    8031                                                           %RANDOM_ACCESS
      407+    8032                                                           %DYNAMIC_ACCESS   */
      408+    8033
      409+    8034    1           2 FILE_STATUS$    PTR,             /* Ptr to ST */
      410+    8035    1           2 FILE_STATUS2$   PTR,             /* Ptr to 2nd File status */
      411+    8036
      412+    8037    1           2 RELATIVE_KEY$   PTR,             /* Ptr to ST */
      413+    8038    1           2 RECORD_KEY$     PTR,             /* Ptr to ST */
      414+    8039    1           2 ALT_RECORD_KEY$ PTR,             /* Ptr to list of keys */
      415+    8040
      416+    8041    1           2 ATTR            BIT(36),
      417+    8042    1           2 B               REDEF ATTR,
      418+    8043    1             3 MULTIPLE_FILE_TAPE   BOOLEAN,
      419+    8044    1             3 OPTIONAL_FILE        BOOLEAN,
      420+    8045    1             3 PROCESS_AREA         BOOLEAN,
      421+    8046    1             3 BSN                  BOOLEAN,
      422+    8047    1             3 FLR                  BOOLEAN,
      423+    8048    1             3 VLR                  BOOLEAN,
      424+    8049    1             3 SSF                  BOOLEAN,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:210  
      425+    8050    1             3 UNBANNERED           BOOLEAN,
      426+    8051    1             3 SPANNED              BOOLEAN,
      427+    8052    1             3 EXTERNAL             BOOLEAN,
      428+    8053    1             3 GLOBAL               BOOLEAN,
      429+    8054    1             3 DUPLICATES           BOOLEAN,
      430+    8055    1             3 LABEL_OMITTED        BOOLEAN,
      431+    8056    1             3 LABEL_STANDARD       BOOLEAN,
      432+    8057    1             3 BEGIN_TAPE_LABEL     BOOLEAN,
      433+    8058    1             3 BEGIN_FILE_LABEL     BOOLEAN,
      434+    8059    1             3 END_TAPE_LABEL       BOOLEAN,
      435+    8060    1             3 END_FILE_LABEL       BOOLEAN,
      436+    8061    1             3 RECORD_CONTAINS      BOOLEAN,
      437+    8062    1             3 BLOCK_CONTAINS       BOOLEAN,
      438+    8063    1             3 SAME_RECORD          BOOLEAN,
      439+    8064    1             3 SAME_AREA            BOOLEAN,
      440+    8065    1             3 RECORDS_NOT_CHARS    BOOLEAN,
      441+    8066    1             3 RECORD_FORMAT_2      BOOLEAN,
      442+    8067    1             3 EBCDIC               BOOLEAN,
      443+    8068    1             3 EBCDIC_CODE_SET      BOOLEAN,
      444+    8069    1             3 NON_TYA_RECORDS      BOOLEAN,
      445+    8070    1             3 SAME_SORT_AREA       BOOLEAN,
      446+    8071    1             3 MERGE_STATEMENT      BOOLEAN,
      447+    8072    1             3 REPORT_CODE          BOOLEAN,
      448+    8073    1             3 NOT_FAST_SEQUENTIAL  BOOLEAN,
      449+    8074    1             3 IMPLIED_PRINTER      BOOLEAN,   /* Used in GCOS  */
      450+    8075    1             3 BLOCK                BOOLEAN,
      451+    8076    1             3 * (0:2)              BOOLEAN,
      452+    8077
      453+    8078    1           2 NOMINAL_KEY$    PTR,             /* Ptr to ST */ /*N* Not sure */
      454+    8079
      455+    8080    1           2 BLOCK_CONTAINS  ALIGNED,
      456+    8081    1             3 INT_1         SBIN WORD,
      457+    8082    1             3 INT_2         SBIN WORD,
      458+    8083                                                   /* BLOCK CONTAINS   <INT-1> TO <INT-2>
      459+    8084                                                             | <INT-1> TO <INT-2> VARYING...
      460+    8085                                                                     | <INT-2>.
      461+    8086
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:211  
      462+    8087                                            When INT-2 not specified, INT-1 is zero.      */
      463+    8088
      464+    8089    1           2 RECORD_CONTAINS ALIGNED,
      465+    8090    1             3 INT_1         SBIN WORD,       /* INT-1 to INT-2 characters */
      466+    8091    1             3 INT_2         SBIN WORD,
      467+    8092    1             3 DEPENDING$    PTR,             /* Ptr to ST for depending on */
      468+    8093
      469+    8094    1           2 LABEL_RECORDS$ PTR,            /* Ptr to ST for datanames */
      470+    8095
      471+    8096    1           2 FILE_ID$        PTR,             /* Ptr to ST for file-id */
      472+    8097    1           2 RETENTION$      PTR,             /* Ptr to ST */
      473+    8098    1           2 CATALOG$       PTR,             /* Ptr to list of ST's */
      474+    8099    1           2 DATA_RECORD$    PTR,             /* Ptr to list of ST's */
      475+    8100
      476+    8101    1           2 LINAGE          ALIGNED,
      477+    8102    1             3 NO_OF_LINES$  PTR,             /* Ptr to ST */
      478+    8103    1             3 FOOTING$      PTR,             /* Ptr to ST */
      479+    8104    1             3 TOP$          PTR,             /* Ptr to ST */
      480+    8105    1             3 BOTTOM$       PTR,             /* Ptr to ST */
      481+    8106
      482+    8107    1           2 CODE_SET$       PTR,             /* Alphabet ST item */
      483+    8108    1           2 REPORT$         PTR,             /* List of ST (%RD) */
      484+    8109    1           2 POSITION        SBIN WORD,       /* File position */
      485+    8110    1           2 SAME_RECORD,
      486+    8111    1             3 HEAD$         PTR,
      487+    8112    1             3 LINK          PTR,
      488+    8113    1           2 SAME_AREA,
      489+    8114    1             3 HEAD$         PTR,
      490+    8115    1             3 LINK          PTR,
      491+    8116    1           2 MULT_TAPE,
      492+    8117    1             3 HEAD$         PTR,
      493+    8118    1             3 LINK          PTR,
      494+    8119    1           2 RERUN_NUM       SBIN, /* every # records rerun */
      495+    8120    1           2 DCB_DNT$        PTR,  /* DCB if other than file name */ /*#34313*/
      496+    8121    1           2 USE_PROC_LABEL$ PTR,  /* Ptr to LABEL created for use    */
      497+    8122    1           2 USE_PROC_LABEL_EPTR REDEF USE_PROC_LABEL$ EPTR,
      498+    8123    1           2 LENGTH_READ$    PTR,  /* To the ST item in FAB returned by lib */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:212  
      499+    8124    1           2 LINAGE_COUNTER$ PTR, /* To ST for LINAGE-COUNTER */
      500+    8125    1           2 RECORD_COUNT    UBIN,   /* Count of records descriptions */
      501+    8126    1           2 LABEL_EXIT$     PTR;    /* User Label Procedures */
      502+    8127
      503+    8128
      504+    8129
      505+    8130    1      DCL 1 LTS_PTR_ARRAY             BASED (LTS$) ALIGNED,
      506+    8131    1            2 ID                 UBIN HALF UNAL,
      507+    8132    1            2 N                  UBIN HALF UNAL,
      508+    8133    1            2 LINK               PTR,
      509+    8134    1            2 P$                 (0:%(PAGE_SIZE-1)) PTR;
      510+    8135
      511+    8136    1      DCL 1 PROC_SUPP            BASED (LTS$) ALIGNED,
      512+    8137    1            2 ID                 UBIN HALF UNAL,
      513+    8138    1            2 N                  UBIN HALF UNAL,
      514+    8139    1            2 CURRENCY_SIGN      CHAR (1) UNAL,
      515+    8140    1            2 LOW_VALUE          CHAR (1) UNAL,
      516+    8141    1            2 HIGH_VALUE         CHAR (1) UNAL,
      517+    8142    1            2 COLL_SEQ_PRESENT   BOOLEAN,
      518+    8143    1            2 EXIT_PROG_IN_DECL  BOOLEAN,
      519+    8144    1            2 *                  BIT (7) UNAL,
      520+    8145    1            2 COLLATING_SEQ$     PTR,
      521+    8146    1            2 INIT_PROC$         PTR,
      522+    8147    1            2 DISPLAY_SIGN_POS   SBIN,
      523+    8148    1            2 DISPLAY_SIGN_TYPE  SBIN,
      524+    8149    1            2 COMP_4_SIGN_POS    SBIN,
      525+    8150    1            2 COMP_DEFAULT       SBIN,
      526+    8151    1            2 ESC_LIST$          PTR,
      527+    8152    1            2 HEAD$              PTR,
      528+    8153    1            2 TAIL$              PTR,
      529+    8154    1            2 OPT_CONST$         PTR,   /* To Option bit const - PH4 */
      530+    8155    1            2 SEG_ARRAY$         PTR,   /* Created for every procedure */
      531+    8156    1            2 CD_LIST$           PTR,
      532+    8157    1            2 SEG_LIMIT          SBIN WORD,
      533+    8158    1            2 SEG_ID_ARRAY$      PTR,   /* Created for main procedure */
      534+    8159    1            2 REF_COUNT          UBIN,
      535+    8160    1            2 IO_RESTORE_CHAIN$  PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:213  
      536+    8161    1            2 USE_CHAIN$         PTR,
      537+    8162    1            2 PARA_STATS$        PTR,
      538+    8163    1            2 P2_SAVE$           PTR,
      539+    8164    1            2 USE_INPUT_LABEL$   PTR,
      540+    8165    1            2 USE_INPUT_LABEL_EPTR REDEF USE_INPUT_LABEL$ EPTR,
      541+    8166    1            2 USE_OUTPUT_LABEL$  PTR,
      542+    8167    1            2 USE_OUTPUT_LABEL_EPTR REDEF USE_OUTPUT_LABEL$ EPTR,
      543+    8168    1            2 USE_IO_LABEL$      PTR,
      544+    8169    1            2 USE_IO_LABEL_EPTR REDEF USE_IO_LABEL$ EPTR,
      545+    8170    1            2 USE_EXTEND_LABEL$  PTR,
      546+    8171    1            2 USE_EXTEND_LABEL_EPTR REDEF USE_EXTEND_LABEL$ EPTR;
      547+    8172
      548+    8173
      549+    8174
      550+    8175    1       DCL 1 DML_REC       BASED (LTS$) ALIGNED,
      551+    8176    1             2 ID          UBIN HALF UNAL,
      552+    8177    1             2 *           UBIN HALF UNAL,
      553+    8178    1             2 RECORD_INFO,
      554+    8179    1               3 LOCATION_MODE_CALC        BIT(1)  UNAL,
      555+    8180    1               3 RECORD_PARTIAL_DESCRIBED  BIT(1)  UNAL,
      556+    8181    1               3 STORE_NOT_PERMITTED       BIT(1)  UNAL,
      557+    8182    1               3 MODIFY_ONLY_ONLY          BIT(1)  UNAL,
      558+    8183    1               3 ALL_CALC_FIELDS_PRESENT   BIT(1)  UNAL,
      559+    8184    1               3 ERASE_ALL_NOT_PERMITTED   BIT(1)  UNAL,
      560+    8185    1               3 ERASE_NOT_PERMITTED       BIT(1)  UNAL,
      561+    8186
      562+    8187    1             2 SET_INFO,
      563+    8188    1               3 SET_ORDER_TEMP            BIT(1)  UNAL,
      564+    8189    1               3 OWNER_REC_NOT_PRESENT     BIT(1)  UNAL,
      565+    8190    1               3 MEMBERSHIP                BIT(2)  UNAL,
      566+    8191    1               3 MODIFY_ONLY_NOT_PERMITTED BIT(1)  UNAL,
      567+    8192
      568+    8193    1             2 REALM_INFO,
      569+    8194    1               3 TEMP_AREA                 BIT(1)  UNAL,
      570+    8195
      571+    8196    1             2 REALM_RELATIONSHIP           BIT(1)  UNAL,
      572+    8197    1             2 SET_RELATIONSHIP            BIT(1)  UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:214  
      573+    8198    1             2 KEY_RELATIONSHIP            BIT(1)  UNAL,
      574+    8199    1             2 * (0:19)                    BIT(1)  UNAL,
      575+    8200
      576+    8201    1             2 REALM_NAME                  UBIN WORD,
      577+    8202    1             2 SET_NAME                    UBIN WORD,
      578+    8203    1             2 KEY_NAME                    UBIN WORD,
      579+    8204    1             2 EXTEND$                     PTR;
      580+    8205
      581+    8206
      582+    8207    1       DCL   1   USE  ALIGNED BASED(LTS$),
      583+    8208    1               2   ID             UBIN HALF UNAL,
      584+    8209    1               2   TYPE           UBIN HALF UNAL, /* IO, DML, RW, ... */
      585+    8210    1               2   PROC_CHAIN$    PTR,
      586+    8211    1               2   PROC_LABEL$    PTR,
      587+    8212    1               2   PROC_NO_LABEL$ REDEF PROC_LABEL$ EPTR,
      588+    8213    1               2   LINK$          PTR,  /* Linked from the PROC_ item */
      589+    8214    1               2   TO$            PTR,         /* FAB, USE_BLOCK, ... */
      590+    8215    1               2   ILS_LIST       DALIGNED,
      591+    8216    1                3  *              (0: %(LENGTH_OF_LX_ITEM - 1)) PTR ALIGNED,
      592+    8217    1               2   INIT_LABEL_BASE$ PTR,
      593+    8218    1               2   TO1$           PTR,  /* Temp PTR for use in USE proc */
      594+    8219    1               2   LINE           UBIN HALF HALIGNED,  /* Line number of token USE */
      595+    8220    1               2   COLUMN         UBIN HALF HALIGNED;  /* Column number of token USE */
      596+    8221
      597+    8222    1       DCL 1 USE_SUPP  ALIGNED BASED(LTS$),
      598+    8223    1               2 ID        UBIN HALF HALIGNED,
      599+    8224    1               2 *         UBIN HALF HALIGNED,
      600+    8225    1               2 FILE_LTS$ PTR,
      601+    8226    1               2 PROC_LABEL$ PTR,
      602+    8227    1               2 PROC_LABEL_EPTR REDEF PROC_LABEL$ EPTR,
      603+    8228    1               2 TO$       PTR,
      604+    8229    1               2 USE$      PTR,
      605+    8230    1               2 INIT_LABEL_BASE$ PTR,
      606+    8231    1               2 LINK$     PTR;
      607+    8232
      608+    8233    1       DCL 1 RVA_LTS       BASED(LTS$) ALIGNED,
      609+    8234    1               2 ID        UBIN HALF UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:215  
      610+    8235    1               2 *         UBIN HALF UNAL,
      611+    8236    1               2 ST$       PTR,
      612+    8237    1               2 LINK$     PTR,
      613+    8238    1               2 OFFSET    UBIN HALF UNAL,
      614+    8239    1               2 VERB      UBIN(7)   UNAL,
      615+    8240    1               2 VERBS     REDEF VERB,
      616+    8241    1                   3 GET       BOOLEAN,
      617+    8242    1                   3 MODIFY    BOOLEAN,
      618+    8243    1                   3 STORE     BOOLEAN,
      619+    8244    1                   3 ERASE_    BOOLEAN,
      620+    8245    1                   3 CONNECT   BOOLEAN,
      621+    8246    1                   3 DISCONNECT BOOLEAN,
      622+    8247    1                   3 FIND      BOOLEAN,
      623+    8248    1               2 *         UBIN(11) UNAL;
      624+    8249
      625+    8250    1    DCL  1 OPEN_LTS          BASED( LTS$ ) ALIGNED,
      626+    8251    1           2 ID              UBIN HALF UNAL,
      627+    8252    1           2 OPEN_TYPE       UBIN HALF UNAL,
      628+    8253    1           2 ARG$            PTR,
      629+    8254    1           2 INFO_BLOCK$     PTR,
      630+    8255    1           2 FILE_LTS$       PTR,
      631+    8256    1           2 CONST_PARM      UBIN UNAL,
      632+    8257    1           2 LINK            PTR;
      633+    8258
      634+    8259    1    DCL 1  IO_RESTORE_CHAIN  BASED (LTS$) ALIGNED,
      635+    8260    1         2 ID                UBIN HALF UNAL,
      636+    8261    1         2 N                 UBIN HALF UNAL,
      637+    8262    1         2 RESTORE$          PTR, /* BASE triad */
      638+    8263    1         2 TO$               PTR, /* BASE or OFF triad */
      639+    8264    1         2 BASE$             PTR, /* BASE triad */
      640+    8265    1         2 NEXT$             PTR;
      641+    8266
      642+    8267        /* ALT_KEY INFO */
      643+    8268        %EQU NO_WORDS_PER_ALT_KEY = 2;
      644+    8269        %EQU MIN_ALT_KEY_SIZE     = 2;
      645+    8270        %EQU MAX#_ALT_KEYS       = 50;
      646+    8271
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:216  
      647+    8272    1      DCL 1 ALT_KEY       BASED (LTS$) ALIGNED,
      648+    8273    1            2 ID          UBIN HALF UNAL,
      649+    8274    1            2 N           UBIN HALF UNAL,
      650+    8275    1            2 NUM_KEYS_MINUS_1   SBIN,
      651+    8276    1            2 P           (0:%(MAX#_ALT_KEYS - 1)) ALIGNED,
      652+    8277    1              3 UNIQUE    BIT (1) ALIGNED,
      653+    8278    1              3 P$        PTR;
      654+    8279
      655+    8280    1   DCL 1  COPY_FILE     BASED (LTS$) ALIGNED,
      656+    8281    1         2 ID           UBIN HALF HALIGNED,
      657+    8282    1         2 *            UBIN HALF HALIGNED,
      658+    8283    1         2 ESN          UBIN,
      659+    8284    1         2 CAT_FILE     CHAR(196),
      660+    8285    1         2 NEXT$        PTR;
      661+    8286
      662+    8287    1   DCL 1 BT             BASED (LTS$) ALIGNED,
      663+    8288    1       2 ID             UBIN HALF UNAL, /* IDENTIFICATION CODE */
      664+    8289    1       2 *              UBIN HALF UNAL,
      665+    8290    1       2 ST$            PTR,
      666+    8291    1       2 LOP$           PTR,
      667+    8292    1       2 ROP$           PTR;
      668+    8293
      669+    8294    1    DCL 1 INIT_LTS    BASED (LTS$) ALIGNED,
      670+    8295    1        2 ID          UBIN HALF HALIGNED,
      671+    8296    1        2 FILL        CHAR (1),
      672+    8297    1        2 FILLER      BOOLEAN,
      673+    8298    1        2 MFILLABLE   BOOLEAN,
      674+    8299    1        2 GROUP       BOOLEAN,
      675+    8300    1        2 BCD         BOOLEAN,
      676+    8301    1        2 POINTER     BOOLEAN,
      677+    8302    1        2 *           BIT (4),
      678+    8303    1        2 BASE$       PTR,
      679+    8304    1        2 OFF         SBIN,
      680+    8305    1        2 SON$        PTR,
      681+    8306    1        2 NEXT$       PTR,
      682+    8307    1        2 LENGTH      UBIN,
      683+    8308    1        2 SPAN        UBIN,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:217  
      684+    8309    1        2 DIMS        UBIN,
      685+    8310    1        2 SUBSCR$     PTR,
      686+    8311    1        2 INDEX$      PTR;
      687+    8312        %MACRO RESERVE_LTS (ITEM=%DIMS,POINTER=LTS$) ;
      688+    8313
      689+    8314               DO ;
      690+    8315                 %IF     ITEM = %LTSS;
      691+    8316                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(LTSS)');
      692+    8317                 %ELSEIF ITEM = %PRIME;
      693+    8318                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(PRIME)');
      694+    8319                 %ELSEIF ITEM = %LONG;
      695+    8320                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(LONG)');
      696+    8321                 %ELSEIF ITEM = %REF;
      697+    8322                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REF)');
      698+    8323                 %ELSEIF ITEM = %KEY;
      699+    8324                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(KEY)');
      700+    8325                 %ELSEIF ITEM = %NEL;
      701+    8326                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(NEL)');
      702+    8327                 %ELSEIF ITEM = %INDEXES;
      703+    8328                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(INDEXES)');
      704+    8329                 %ELSEIF ITEM = %DML_REC;
      705+    8330                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(DML_REC)');
      706+    8331                 %ELSEIF ITEM = %RENAMES;
      707+    8332                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(RENAMES)');
      708+    8333                 %ELSEIF ITEM = %DEPENDING_SIZE;
      709+    8334                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(DEPENDING_SIZE)');
      710+    8335                 %ELSEIF ITEM = %FILE_LTS;
      711+    8336                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(FILE_LTS)');
      712+    8337                 %ELSEIF ITEM = %REPORT_LTS;
      713+    8338                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_LTS)');
      714+    8339                 %ELSEIF ITEM = %REPORT_01_LTS;
      715+    8340                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_01_LTS)');
      716+    8341                 %ELSEIF ITEM = %REPORT_ELEM_LTS;
      717+    8342                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_ELEM_LTS)');
      718+    8343                 %ELSEIF ITEM = %REPORT_GRP_LTS;
      719+    8344                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_GRP_LTS)');
      720+    8345                 %ELSEIF ITEM = %CONTROL_NAME_LTS;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:218  
      721+    8346                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(CONTROL_NAME_LTS)');
      722+    8347                 %ELSEIF ITEM = %SUM_LTS;
      723+    8348                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(SUM_LTS)');
      724+    8349                 %ELSEIF ITEM = %SEGMENT_LTS;
      725+    8350                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(SEGMENT_LTS)');
      726+    8351                 %ELSEIF ITEM = %ALTER_LTS;
      727+    8352                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(ALTER_LTS)');
      728+    8353                 %ELSEIF ITEM = %BASE_LTS;
      729+    8354                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(BASE_LTS)');
      730+    8355                 %ELSEIF ITEM = %CD_LTS;
      731+    8356                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(CD_LTS)');
      732+    8357                 %ELSEIF ITEM = %ARRAY_PRESET_LTS;
      733+    8358                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(ARRAY_PRESET_LTS)');
      734+    8359                 %ELSEIF ITEM = %OPEN_LTS;
      735+    8360                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(OPEN_LTS)');
      736+    8361                 %ELSEIF ITEM = %PROC_SUPP;
      737+    8362                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(PROC_SUPP)');
      738+    8363                 %ELSEIF ITEM = %COPY_FILE;
      739+    8364                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(INIT_LTS)');
      740+    8365                 %ELSEIF ITEM = %USE_LTS;
      741+    8366                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(USE)');
      742+    8367                 %ELSEIF ITEM = %RVA;
      743+    8368                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(RVA_LTS)');
      744+    8369                 %ELSEIF ITEM = %IO_RESTORE_CHAIN;
      745+    8370                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(IO_RESTORE_CHAIN)');
      746+    8371                 %ELSEIF ITEM = %USE_SUPP;
      747+    8372                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(USE_SUPP)');
      748+    8373                 %ELSEIF ITEM = %BT;
      749+    8374                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(BT)');
      750+    8375                 %ELSEIF ITEM = %INIT_LTS;
      751+    8376                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(INIT_LTS)');
      752+    8377                 %ELSEIF ITEM = %DIMS
      753+    8378                      OR ITEM = %LCNST
      754+    8379                      OR ITEM = %ARGLIST
      755+    8380                      OR ITEM = %EVALUATE
      756+    8381                      OR ITEM = %ALT_KEY
      757+    8382                      OR ITEM = %LTS_PTR_ARRAY;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:219  
      758+    8383                     /* ITERATION must be set before invoking RESERVE_LTS */
      759+    8384                     %LSET @LTS_SIZE = CHARTEXT('ITERATION');
      760+    8385                 %ELSE;
      761+    8386                     %ERROR ('**** ITEM must be set to a known LTS reference', 4);
      762+    8387                     %LSET @LTS_SIZE = CHARTEXT('ITERATION');
      763+    8388                 %ENDIF;
      764+    8389
      765+    8390                 IF LTS_.BOTTOM + %@LTS_SIZE >= LTS_.FLOOR THEN
      766+    8391                   CALL Z8AR$RESERVER (ADDR(LTS_));
      767+    8392                 POINTER = PINCRW (LTS_.FIRST, LTS_.BOTTOM);
      768+    8393                 LTS_.BOTTOM = LTS_.BOTTOM + %@LTS_SIZE;
      769+    8394                 POINTER -> LTS.ID = ITEM;
      770+    8395
      771+    8396                 %IF @LTS_SIZE = CHARTEXT('ITERATION');
      772+    8397                    POINTER -> LTS.N = ITERATION;
      773+    8398                 %ENDIF;
      774+    8399
      775+    8400               END ;
      776+    8401
      777+    8402        %MEND ;
      778+    8403
      779+    8404        %MACRO TOP_LTS (POINTER = LTS$) ;
      780+    8405
      781+    8406               DO ;
      782+    8407                 POINTER = LTS_.TOP ;
      783+    8408               END ;
      784+    8409
      785+    8410        %MEND ;
      786+    8411
      787+    8412        %MACRO STEP_LTS (POINTER = LTS$) ;
      788+    8413
      789+    8414               DO ;
      790+    8415                 ITERATION = LTS_STEP (POINTER->LTS.ID-%FIRST_LTS) ;
      791+    8416                 IF ITERATION = 0
      792+    8417                 THEN ITERATION = POINTER->LTS.N ;
      793+    8418                 POINTER = PINCRW (POINTER, ITERATION) ;
      794+    8419                 IF POINTER = PINCRW (LTS_.FIRST, LTS_.BOTTOM)
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:220  
      795+    8420                 THEN POINTER = ADDR(NIL) ;
      796+    8421                 ELSE
      797+    8422                 IF POINTER->LTS.ID = %CONTINUE
      798+    8423                 THEN POINTER = POINTER -> CONT.NEXT;
      799+    8424               END ;
      800+    8425
      801+    8426        %MEND ;
      802+    8427
      803+    8428
      804+    8429           %MACRO NEW_PROC_SUPP (@POINTER = LTS$,
      805+    8430                                 @CURRENCY_SIGN = "'$'",
      806+    8431                                 @LOW_VALUE = "BITASC('000'O)",
      807+    8432                                 @HIGH_VALUE = "BITASC('177'O)",
      808+    8433                                 @COLL_SEQ_PRESENT = FALSE,
      809+    8434                                 @DISPLAY_SIGN_POS = %SIGN_POS_TRAILING,
      810+    8435                                 @DISPLAY_SIGN_TYPE = %SIGN_TYPE_OVERPUNCH,
      811+    8436                                 @COMP_4_SIGN_POS = %SIGN_POS_TRAILING,
      812+    8437                                 @COMP_DEFAULT = %RSV_WRD_COMP,
      813+    8438                                 @COLLATING_SEQ$ = "ADDR(NIL)",
      814+    8439                                 @INIT_PROC$ = "ADDR(NIL)",
      815+    8440                                 @HEAD$     = "ADDR(NIL)",
      816+    8441                                 @TAIL$     = "ADDR(NIL)",
      817+    8442                                 @OPT_CONST$= "ADDR(NIL)",
      818+    8443                                 @SEG_ARRAY$= "ADDR(NIL)",
      819+    8444                                 @SEG_LIMIT = "%MAX_FIXED_SEG# + 1",
      820+    8445                                 @SEG_ID_ARRAY$ = "ADDR(NIL)",
      821+    8446                                 @REF_COUNT = 0,
      822+    8447                                 @IO_RESTORE_CHAIN$ = "ADDR(NIL)",
      823+    8448                                 @USE_CHAIN$        = "ADDR(NIL)",
      824+    8449                                 @USE_INPUT_LABEL$  = "ENTADDR(NIL)",
      825+    8450                                 @USE_OUTPUT_LABEL$ = "ENTADDR(NIL)",
      826+    8451                                 @USE_IO_LABEL$     = "ENTADDR(NIL)",
      827+    8452                                 @USE_EXTEND_LABEL$ = "ENTADDR(NIL)",
      828+    8453                                 @ESC_LIST$ = "ADDR(NIL)");
      829+    8454             DO;
      830+    8455               %RESERVE_LTS (POINTER = @POINTER, ITEM = %PROC_SUPP);
      831+    8456
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:221  
      832+    8457               @POINTER -> PROC_SUPP.CURRENCY_SIGN  = @CURRENCY_SIGN;
      833+    8458               @POINTER -> PROC_SUPP.COLLATING_SEQ$ = @COLLATING_SEQ$;
      834+    8459               @POINTER -> PROC_SUPP.INIT_PROC$     = @INIT_PROC$;
      835+    8460               @POINTER -> PROC_SUPP.HEAD$          = @HEAD$;
      836+    8461               @POINTER -> PROC_SUPP.TAIL$          = @TAIL$;
      837+    8462               @POINTER -> PROC_SUPP.SEG_LIMIT      = @SEG_LIMIT;
      838+    8463               @POINTER -> PROC_SUPP.ESC_LIST$      = @ESC_LIST$;
      839+    8464               @POINTER -> PROC_SUPP.LOW_VALUE      = @LOW_VALUE;
      840+    8465               @POINTER -> PROC_SUPP.HIGH_VALUE     = @HIGH_VALUE;
      841+    8466               @POINTER -> PROC_SUPP.COLL_SEQ_PRESENT = @COLL_SEQ_PRESENT;
      842+    8467               @POINTER -> PROC_SUPP.DISPLAY_SIGN_POS = @DISPLAY_SIGN_POS;
      843+    8468               @POINTER -> PROC_SUPP.REF_COUNT      = @REF_COUNT;
      844+    8469               @POINTER -> PROC_SUPP.IO_RESTORE_CHAIN$ = @IO_RESTORE_CHAIN$;
      845+    8470               @POINTER -> PROC_SUPP.USE_CHAIN$     = @USE_CHAIN$;
      846+    8471               %IF TEXTCHAR(@USE_INPUT_LABEL$) = 'ENTADDR(NIL)';
      847+    8472               @POINTER -> PROC_SUPP.USE_INPUT_LABEL_EPTR = ENTADDR(NIL);
      848+    8473               %ELSE;
      849+    8474               @POINTER -> PROC_SUPP.USE_INPUT_LABEL$ = @USE_INPUT_LABEL$;
      850+    8475               %ENDIF;
      851+    8476               %IF TEXTCHAR(@USE_OUTPUT_LABEL$) = 'ENTADDR(NIL)';
      852+    8477               @POINTER -> PROC_SUPP.USE_OUTPUT_LABEL_EPTR = ENTADDR(NIL);
      853+    8478               %ELSE;
      854+    8479               @POINTER -> PROC_SUPP.USE_OUTPUT_LABEL$ = @USE_OUTPUT_LABEL$;
      855+    8480               %ENDIF;
      856+    8481               %IF TEXTCHAR(@USE_IO_LABEL$) = 'ENTADDR(NIL)';
      857+    8482               @POINTER -> PROC_SUPP.USE_IO_LABEL_EPTR = ENTADDR(NIL);
      858+    8483               %ELSE;
      859+    8484               @POINTER -> PROC_SUPP.USE_IO_LABEL$        = @USE_IO_LABEL$;
      860+    8485               %ENDIF;
      861+    8486               %IF TEXTCHAR(@USE_EXTEND_LABEL$) = 'ENTADDR(NIL)';
      862+    8487               @POINTER -> PROC_SUPP.USE_EXTEND_LABEL_EPTR = ENTADDR(NIL);
      863+    8488               %ELSE;
      864+    8489               @POINTER -> PROC_SUPP.USE_EXTEND_LABEL$ = @USE_EXTEND_LABEL$;
      865+    8490               %ENDIF;
      866+    8491               @POINTER -> PROC_SUPP.DISPLAY_SIGN_TYPE = @DISPLAY_SIGN_TYPE;
      867+    8492               @POINTER -> PROC_SUPP.COMP_4_SIGN_POS = @COMP_4_SIGN_POS;
      868+    8493               @POINTER -> PROC_SUPP.COMP_DEFAULT   = @COMP_DEFAULT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:222  
      869+    8494               @POINTER -> PROC_SUPP.SEG_ARRAY$     = @SEG_ARRAY$;
      870+    8495               @POINTER -> PROC_SUPP.SEG_ID_ARRAY$  = @SEG_ID_ARRAY$;
      871+    8496               @POINTER -> PROC_SUPP.P2_SAVE$       = ADDR(NIL);
      872+    8497               @POINTER -> PROC_SUPP.PARA_STATS$    = ADDR(NIL);
      873+    8498             END;
      874+    8499
      875+    8500           %MEND;
      876+    8501
      877+    8502
      878+    8503           %MACRO NEW_NEL (@POINTER = LTS$,
      879+    8504                           @MOP$    = "ADDR(NIL)",
      880+    8505                           @DNT$    = "ADDR(NIL)",
      881+    8506                           @DESC    = '0'B);
      882+    8507
      883+    8508               DO;
      884+    8509                 %RESERVE_LTS (ITEM     = %NEL,
      885+    8510                               POINTER  = @POINTER);
      886+    8511
      887+    8512                 @POINTER -> NEL.MOP$   = @MOP$;
      888+    8513                 @POINTER -> NEL.DNT$   = @DNT$;
      889+    8514                 @POINTER -> NEL.DESC   = @DESC;
      890+    8515               END;
      891+    8516
      892+    8517           %MEND;
      893+    8518
      894+    8519
      895+    8520           %MACRO NEW_LTSS (@POINTER = LTS$,
      896+    8521                            @DIMS$   = "ADDR(NIL)",
      897+    8522                            @LONG$   = "ADDR(NIL)",
      898+    8523                            @BASE_LTS$ = "ADDR(NIL)",
      899+    8524                            @NEL$    = "ADDR(NIL)",
      900+    8525                            @DEPENDING_SIZE$ = "ADDR(NIL)",
      901+    8526                            @FILE_LTS$ = "ADDR(NIL)",
      902+    8527                            @INIT_LTS$ = "ADDR(NIL)",
      903+    8528                            @CD_LTS$ = ,
      904+    8529                            @DML_REC$ = ,
      905+    8530                            @REPORT_ENTRY$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:223  
      906+    8531                            @KEY$    = "ADDR(NIL)");
      907+    8532
      908+    8533               DO;
      909+    8534                 %RESERVE_LTS (ITEM     = %LTSS,
      910+    8535                               POINTER  = @POINTER);
      911+    8536
      912+    8537                 @POINTER -> LTSS.DIMS$ = @DIMS$;
      913+    8538                 @POINTER -> LTSS.LONG$ = @LONG$;
      914+    8539                 @POINTER -> LTSS.NEL$  = @NEL$;
      915+    8540                 @POINTER -> LTSS.DEPENDING_SIZE$ = @DEPENDING_SIZE$;
      916+    8541                 @POINTER -> LTSS.KEY$  = @KEY$;
      917+    8542                 @POINTER -> LTSS.BASE_LTS$  = @BASE_LTS$;
      918+    8543                 @POINTER -> LTSS.FILE_LTS$ = @FILE_LTS$;
      919+    8544                 @POINTER -> LTSS.INIT_LTS$ = @INIT_LTS$;
      920+    8545                 %IF (TEXTCHAR (@CD_LTS$) ~= '');
      921+    8546                 @POINTER -> LTSS.CD_LTS$ = @CD_LTS$;
      922+    8547                 %ELSEIF (TEXTCHAR (@DML_REC$) ~= '');
      923+    8548                 @POINTER -> LTSS.DML_REC$ = @DML_REC$;
      924+    8549                 %ELSE;
      925+    8550                 @POINTER -> LTSS.REPORT_ENTRY$ = @REPORT_ENTRY$;
      926+    8551                 %ENDIF;
      927+    8552               END;
      928+    8553
      929+    8554           %MEND;
      930+    8555
      931+    8556           %MACRO NEW_LONG (@POINTER = LTS$,
      932+    8557                            @LENGTH  = );
      933+    8558
      934+    8559               DO;
      935+    8560                 %RESERVE_LTS (ITEM    = %LONG,
      936+    8561                               POINTER = @POINTER);
      937+    8562
      938+    8563                 @POINTER -> LONG.LENGTH = @LENGTH;
      939+    8564               END;
      940+    8565
      941+    8566           %MEND;
      942+    8567
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:224  
      943+    8568           %MACRO NEW_COPY_FILE (@POINTER = LTS$,
      944+    8569                                 @ESN     = ,
      945+    8570                                 @CAT_FILE =  );
      946+    8571
      947+    8572               DO;
      948+    8573                 %RESERVE_LTS (ITEM = %COPY_FILE,
      949+    8574                               POINTER = @POINTER);
      950+    8575
      951+    8576                 @POINTER ->COPY_FILE.ESN = @ESN;
      952+    8577                 @POINTER ->COPY_FILE.CAT_FILE = @CAT_FILE;
      953+    8578                 @POINTER ->COPY_FILE.NEXT = COMCOM.COPY_PTR$;
      954+    8579                 COMCOM.COPY_PTR$ = @POINTER;
      955+    8580               END;
      956+    8581           %MEND;
      957+    8582
      958+    8583           %MACRO NEW_INIT_LTS (@POINTER     = LTS$,
      959+    8584                                @FILL        = "%BITASC ('000'O)",
      960+    8585                                @FILLER      = FALSE,
      961+    8586                                @MFILLABLE   = FALSE,
      962+    8587                                @GROUP       = FALSE,
      963+    8588                                @BCD         = FALSE,
      964+    8589                                @PTR         = FALSE,
      965+    8590                                @BASE$ = "ADDR(NIL)",
      966+    8591                                @OFF         = 0,
      967+    8592                                @SON$        = "ADDR(NIL)",
      968+    8593                                @NEXT$       = "ADDR(NIL)",
      969+    8594                                @LENGTH      = 0,
      970+    8595                                @SPAN        = 0,
      971+    8596                                @DIMS        = 0,
      972+    8597                                @SUBSCR$     = "ADDR(NIL)",
      973+    8598                                @INDEX$      = "ADDR(NIL)");
      974+    8599               DO;
      975+    8600                 %RESERVE_LTS (ITEM     = %INIT_LTS,
      976+    8601                               POINTER  = @POINTER);
      977+    8602                 @POINTER -> INIT_LTS.FILL = @FILL;
      978+    8603                 @POINTER -> INIT_LTS.FILLER = @FILLER;
      979+    8604                 @POINTER -> INIT_LTS.MFILLABLE = @MFILLABLE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:225  
      980+    8605                 @POINTER -> INIT_LTS.GROUP = @GROUP;
      981+    8606                 @POINTER -> INIT_LTS.BCD = @BCD;
      982+    8607                 @POINTER -> INIT_LTS.POINTER = @PTR;
      983+    8608                 @POINTER -> INIT_LTS.BASE$ = @BASE$;
      984+    8609                 @POINTER -> INIT_LTS.OFF = @OFF;
      985+    8610                 @POINTER -> INIT_LTS.SON$ = @SON$;
      986+    8611                 @POINTER -> INIT_LTS.NEXT$ = @NEXT$;
      987+    8612                 @POINTER -> INIT_LTS.LENGTH = @LENGTH;
      988+    8613                 @POINTER -> INIT_LTS.SPAN = @SPAN;
      989+    8614                 @POINTER -> INIT_LTS.DIMS = @DIMS;
      990+    8615                 @POINTER -> INIT_LTS.SUBSCR$ = @SUBSCR$;
      991+    8616                 @POINTER -> INIT_LTS.INDEX$ = @INDEX$;
      992+    8617               END;
      993+    8618           %MEND;
      994+    8619
      995+    8620           %MACRO NEW_DIMS (@POINTER = LTS$,
      996+    8621                            @SIZE    = "%MIN_DIM_SIZE + %NO_WORDS_PER_DIM",
      997+    8622                            @DN2$    = "ADDR(NIL)");
      998+    8623
      999+    8624               DO;
     1000+    8625                 ITERATION = @SIZE;
     1001+    8626                 %RESERVE_LTS (ITEM    = %DIMS,
     1002+    8627                               POINTER = @POINTER);
     1003+    8628
     1004+    8629                 @POINTER -> DIMS.DN2  = @DN2$;
     1005+    8630               END;
     1006+    8631
     1007+    8632           %MEND;
     1008+    8633
     1009+    8634           %MACRO NEW_REF (@POINTER = LTS$ );
     1010+    8635               DO;
     1011+    8636                 IF HEAD_REF$ = ADDR(NIL) THEN
     1012+    8637                   %RESERVE_LTS(ITEM = %REF,
     1013+    8638                                POINTER = @POINTER );
     1014+    8639                 ELSE
     1015+    8640                   %REMOVE_FROM_SL_LIST(PTR = @POINTER,
     1016+    8641                                        ITEM = REF,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:226  
     1017+    8642                                        HEAD = HEAD_REF$ );
     1018+    8643
     1019+    8644                 NUMBER_OF_REFS = NUMBER_OF_REFS + 1;
     1020+    8645               END;
     1021+    8646            %MEND;
     1022+    8647
     1023+    8648
     1024+    8649           %MACRO NEW_PRIME (@POINTER = LTS$ );
     1025+    8650               DO;
     1026+    8651                 IF HEAD_PRIMES$ = ADDR(NIL) THEN
     1027+    8652                   %RESERVE_LTS(ITEM=%PRIME,POINTER=@POINTER);
     1028+    8653                 ELSE
     1029+    8654                   %REMOVE_FROM_SL_LIST(PTR=@POINTER,ITEM=PRIME,
     1030+    8655                                        HEAD=HEAD_PRIMES$);
     1031+    8656
     1032+    8657                 NUMBER_OF_PRIMES = NUMBER_OF_PRIMES + 1;
     1033+    8658               END;
     1034+    8659           %MEND;
     1035+    8660
     1036+    8661
     1037+    8662
     1038+    8663           %MACRO FILL_DIMS (@DIMS$ = LTS$,
     1039+    8664                             @SS#   = 0,
     1040+    8665                             @INDEX$= "ADDR(NIL)",
     1041+    8666                             @SPAN  = 0,
     1042+    8667                             @DIM   = 0);
     1043+    8668
     1044+    8669               DO;
     1045+    8670                 @DIMS$ -> DIMS.D.INDEX$(@SS#) = @INDEX$;
     1046+    8671                 @DIMS$ -> DIMS.D.SPAN  (@SS#) = @SPAN;
     1047+    8672                 @DIMS$ -> DIMS.D.DIM   (@SS#) = @DIM;
     1048+    8673               END;
     1049+    8674
     1050+    8675           %MEND;
     1051+    8676
     1052+    8677
     1053+    8678           %MACRO NEW_RENAMES (@POINTER = LTS$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:227  
     1054+    8679                               @START$  = ,
     1055+    8680                               @END$    = );
     1056+    8681
     1057+    8682               DO;
     1058+    8683                 %RESERVE_LTS (ITEM    = %RENAMES,
     1059+    8684                               POINTER = @POINTER);
     1060+    8685
     1061+    8686                 @POINTER -> RENAMES.START_ST$ = @START$;
     1062+    8687                 @POINTER -> RENAMES.END_ST$   = @END$;
     1063+    8688               END;
     1064+    8689
     1065+    8690           %MEND;
     1066+    8691
     1067+    8692
     1068+    8693           %MACRO NEW_INDEXES (@POINTER = LTS$,
     1069+    8694                               @INDEX_ST$ = ST$,
     1070+    8695                               @LINK      = "ADDR(NIL)");
     1071+    8696
     1072+    8697               DO;
     1073+    8698                 %RESERVE_LTS (ITEM    = %INDEXES,
     1074+    8699                               POINTER = @POINTER);
     1075+    8700
     1076+    8701                 @POINTER -> INDEXES.INDEX_ST$ = @INDEX_ST$;
     1077+    8702                 @POINTER -> INDEXES.LINK      = @LINK;
     1078+    8703               END;
     1079+    8704
     1080+    8705           %MEND;
     1081+    8706
     1082+    8707
     1083+    8708
     1084+    8709
     1085+    8710           %MACRO NEW_DEPENDING_SIZE (@POINTER = LTS$,
     1086+    8711                                      @SIZE    = 0,
     1087+    8712                                      @DIMS$   = "ADDR(NIL)",
     1088+    8713                                      @SIZE$   = "ADDR(NIL)");
     1089+    8714
     1090+    8715               DO;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:228  
     1091+    8716                 %RESERVE_LTS (ITEM     = %DEPENDING_SIZE,
     1092+    8717                               POINTER  = @POINTER);
     1093+    8718
     1094+    8719                 @POINTER -> DEPENDING_SIZE.SIZE$ = @SIZE$;
     1095+    8720                 @POINTER -> DEPENDING_SIZE.MIN_SIZE = @SIZE;
     1096+    8721                 @POINTER -> DEPENDING_SIZE.DIMS$ = @DIMS$;
     1097+    8722               END;
     1098+    8723
     1099+    8724           %MEND;
     1100+    8725
     1101+    8726
     1102+    8727           %MACRO NEW_KEY (@POINTER = LTS$,
     1103+    8728                           @ASCENDING = TRUE,
     1104+    8729                           @USED    = FALSE,
     1105+    8730                           @KEY$    = "ADDR(NIL)",
     1106+    8731                           @LINK    = "ADDR(NIL)");
     1107+    8732
     1108+    8733               DO;
     1109+    8734                 %RESERVE_LTS (ITEM    = %KEY,
     1110+    8735                               POINTER = @POINTER);
     1111+    8736
     1112+    8737                 @POINTER -> KEY.B      = FALSE;
     1113+    8738                 @POINTER -> KEY.B.ASCENDING = @ASCENDING;
     1114+    8739                 @POINTER -> KEY.B.USED = @USED;
     1115+    8740                 @POINTER -> KEY.KEY$  = @KEY$;
     1116+    8741                 @POINTER -> KEY.LINK  = @LINK;
     1117+    8742               END;
     1118+    8743
     1119+    8744           %MEND;
     1120+    8745
     1121+    8746
     1122+    8747
     1123+    8748           %MACRO NEW_ARGLIST (@POINTER = LTS$, @NUM_OF_ARGS = 1);
     1124+    8749
     1125+    8750               DO;
     1126+    8751                 ITERATION = @NUM_OF_ARGS + 1;
     1127+    8752                 %RESERVE_LTS (ITEM = %ARGLIST, POINTER = @POINTER);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:229  
     1128+    8753               END;
     1129+    8754
     1130+    8755           %MEND;
     1131+    8756
     1132+    8757
     1133+    8758           %MACRO NEW_LCNST (@POINTER = LTS$,
     1134+    8759                             @SIZE    = 1,
     1135+    8760                             @CONST   = ' ');
     1136+    8761
     1137+    8762               DO;
     1138+    8763                 ITERATION = @SIZE;
     1139+    8764                 %RESERVE_LTS (ITEM = %LCNST,
     1140+    8765                               POINTER = @POINTER);
     1141+    8766
     1142+    8767                 SUBSTR (@POINTER -> LCNST.CONST, 0, (@SIZE - 1) * 4) = @CONST;
     1143+    8768               END;
     1144+    8769
     1145+    8770           %MEND;
     1146+    8771
     1147+    8772
     1148+    8773           %MACRO NEW_FILE_LTS (@POINTER           = LTS$,
     1149+    8774                                 @ST$               = "ADDR(NIL)",
     1150+    8775                                 @FAB$              = "ADDR(NIL)",
     1151+    8776                                 @FILE_LTS_CHAIN$   = "ADDR(NIL)",
     1152+    8777                                 @ASSIGN$           = "ADDR(NIL)",
     1153+    8778                                 @NO_OF_AREAS       = "-1",
     1154+    8779                                 @ORGANIZATION      = %NOT_SPECIFIED,
     1155+    8780                                 @PAD_CHAR$         = "ADDR(NIL)",
     1156+    8781                                 @RECORD_DELIM     = %NOT_SPECIFIED,
     1157+    8782                                 @ACCESS_MODE       = %NOT_SPECIFIED,
     1158+    8783                                 @FILE_STATUS$      = "ADDR(NIL)",
     1159+    8784                                 @FILE_STATUS2$     = "ADDR(NIL)",
     1160+    8785                                 @RELATIVE_KEY$     = "ADDR(NIL)",
     1161+    8786                                 @RECORD_KEY$       = "ADDR(NIL)",
     1162+    8787                                 @ALT_RECORD_KEY$   = "ADDR(NIL)",
     1163+    8788                                 @ATTR              = FALSE,
     1164+    8789                                 @MULTIPLE_FILE_TAPE= ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:230  
     1165+    8790                                 @OPTIONAL          = ,
     1166+    8791                                 @PROCESS_AREA      = ,
     1167+    8792                                 @BSN               = ,
     1168+    8793                                 @FLR               = ,
     1169+    8794                                 @VLR               = ,
     1170+    8795                                 @SSF               = ,
     1171+    8796                                 @UNBANNERED        = ,
     1172+    8797                                 @SPANNED           = ,
     1173+    8798                                 @EXTERNAL          = ,
     1174+    8799                                 @GLOBAL            = ,
     1175+    8800                                 @DUPLICATES        = ,
     1176+    8801                                 @LABEL_OMITTED     = ,
     1177+    8802                                 @LABEL_STANDARD    = ,
     1178+    8803                                 @BEGIN_TAPE_LABEL  = ,
     1179+    8804                                 @BEGIN_FILE_LABEL  = ,
     1180+    8805                                 @END_TAPE_LABEL    = ,
     1181+    8806                                 @END_FILE_LABEL    = ,
     1182+    8807                                 @RECORD_CONTAINS   = ,
     1183+    8808                                 @RECORDS_NOT_CHARS = ,
     1184+    8809                                 @RECORD_FORMAT_2   = ,
     1185+    8810                                 @EBCDIC            = ,
     1186+    8811                                 @EBCDIC_CODE_SET   = ,
     1187+    8812                                 @NON_TYA_RECORDS   = ,
     1188+    8813                                 @BLOCK_CONTAINS    = ,
     1189+    8814                                 @SAME_RECORD       = ,
     1190+    8815                                 @SAME_AREA         = ,
     1191+    8816                                 @NOMINAL_KEY$      = "ADDR(NIL)",
     1192+    8817                                 @BLOCK_INT_1       = 1,
     1193+    8818                                 @BLOCK_INT_2       = 1,
     1194+    8819                                 @RECORD_INT_1      = 0,
     1195+    8820                                 @RECORD_INT_2      = 0,
     1196+    8821                                 @DEPENDING$        = "ADDR(NIL)",
     1197+    8822                                 @LABEL_RECORDS$    = "ADDR(NIL)",
     1198+    8823                                 @FILE_ID$          = "ADDR(NIL)",
     1199+    8824                                 @RETENTION$        = "ADDR(NIL)",
     1200+    8825                                 @CATALOG$         = "ADDR(NIL)",
     1201+    8826                                 @DATA_RECORD$      = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:231  
     1202+    8827                                 @NO_OF_LINES$      = "ADDR(NIL)",
     1203+    8828                                 @FOOTING$          = "ADDR(NIL)",
     1204+    8829                                 @TOP$              = "ADDR(NIL)",
     1205+    8830                                 @BOTTOM$           = "ADDR(NIL)",
     1206+    8831                                 @CODE_SET$         = "ADDR(NIL)",
     1207+    8832                                 @REPORT$           = "ADDR(NIL)",
     1208+    8833                                 @POSITION          = 0,
     1209+    8834                                 @SAME_RECORD_HEAD$ = "ADDR(NIL)",
     1210+    8835                                 @SAME_RECORD_LINK  = "ADDR(NIL)",
     1211+    8836                                 @SAME_AREA_HEAD$   = "ADDR(NIL)",
     1212+    8837                                 @SAME_AREA_LINK    = "ADDR(NIL)",
     1213+    8838                                 @MULT_TAPE_HEAD$   = "ADDR(NIL)",
     1214+    8839                                 @MULT_TAPE_LINK    = "ADDR(NIL)",
     1215+    8840                                 @RERUN_NUM         = 0,
     1216+    8841                                 @DCB_DNT$          = "ADDR(NIL)",    /*#34313*/
     1217+    8842                                 @USE_PROC_LABEL$   = "ENTADDR(NIL)",
     1218+    8843                                 @LENGTH_READ$      = "ADDR(NIL)",
     1219+    8844                                 @LINAGE_COUNTER$   = "ADDR(NIL)",
     1220+    8845                                 @RECORD_COUNT      = 0,
     1221+    8846                                 @LABEL_EXIT$       = "ADDR(NIL)");
     1222+    8847             DO;
     1223+    8848               %RESERVE_LTS (ITEM     = %FILE_LTS,
     1224+    8849                             POINTER  = @POINTER);
     1225+    8850
     1226+    8851               @POINTER -> FILE_LTS.ID                   = %FILE_LTS;
     1227+    8852               @POINTER -> FILE_LTS.ST$                  = @ST$ ;
     1228+    8853               @POINTER -> FILE_LTS.FAB$                 = @FAB$;
     1229+    8854               @POINTER -> FILE_LTS.FILE_LTS_CHAIN$      = @FILE_LTS_CHAIN$;
     1230+    8855               @POINTER -> FILE_LTS.ASSIGN$              = @ASSIGN$;
     1231+    8856               @POINTER -> FILE_LTS.NO_OF_AREAS          = @NO_OF_AREAS;
     1232+    8857               @POINTER -> FILE_LTS.ORGANIZATION         = @ORGANIZATION;
     1233+    8858               @POINTER -> FILE_LTS.PAD_CHAR$            = @PAD_CHAR$;
     1234+    8859               @POINTER -> FILE_LTS.RECORD_DELIM        = @RECORD_DELIM;
     1235+    8860               @POINTER -> FILE_LTS.ACCESS_MODE          = @ACCESS_MODE;
     1236+    8861               @POINTER -> FILE_LTS.FILE_STATUS$         = @FILE_STATUS$;
     1237+    8862               @POINTER -> FILE_LTS.FILE_STATUS2$        = @FILE_STATUS2$;
     1238+    8863               @POINTER -> FILE_LTS.RELATIVE_KEY$        = @RELATIVE_KEY$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:232  
     1239+    8864               @POINTER -> FILE_LTS.RECORD_KEY$          = @RECORD_KEY$;
     1240+    8865               @POINTER -> FILE_LTS.ALT_RECORD_KEY$      = @ALT_RECORD_KEY$;
     1241+    8866               @POINTER -> FILE_LTS.ATTR                 = @ATTR;
     1242+    8867               @POINTER -> FILE_LTS.NOMINAL_KEY$         = @NOMINAL_KEY$;
     1243+    8868               @POINTER -> FILE_LTS.BLOCK_CONTAINS.INT_1 = @BLOCK_INT_1;
     1244+    8869               @POINTER -> FILE_LTS.BLOCK_CONTAINS.INT_2 = @BLOCK_INT_2;
     1245+    8870               @POINTER -> FILE_LTS.RECORD_CONTAINS.INT_1= @RECORD_INT_1;
     1246+    8871               @POINTER -> FILE_LTS.RECORD_CONTAINS.INT_2= @RECORD_INT_2;
     1247+    8872               @POINTER -> FILE_LTS.RECORD_CONTAINS.DEPENDING$ = @DEPENDING$;
     1248+    8873               @POINTER -> FILE_LTS.LABEL_RECORDS$       = @LABEL_RECORDS$;
     1249+    8874               @POINTER -> FILE_LTS.FILE_ID$             = @FILE_ID$;
     1250+    8875               @POINTER -> FILE_LTS.RETENTION$           = @RETENTION$;
     1251+    8876               @POINTER -> FILE_LTS.CATALOG$            = @CATALOG$    ;
     1252+    8877               @POINTER -> FILE_LTS.DATA_RECORD$         = @DATA_RECORD$;
     1253+    8878               @POINTER -> FILE_LTS.LINAGE.NO_OF_LINES$  = @NO_OF_LINES$;
     1254+    8879               @POINTER -> FILE_LTS.LINAGE.TOP$          = @TOP$;
     1255+    8880               @POINTER -> FILE_LTS.LINAGE.BOTTOM$       = @BOTTOM$;
     1256+    8881               @POINTER -> FILE_LTS.LINAGE.FOOTING$      = @FOOTING$;
     1257+    8882               @POINTER -> FILE_LTS.CODE_SET$            = @CODE_SET$;
     1258+    8883               @POINTER -> FILE_LTS.REPORT$              = @REPORT$;
     1259+    8884               @POINTER -> FILE_LTS.POSITION             = @POSITION;
     1260+    8885               @POINTER -> FILE_LTS.SAME_RECORD.HEAD$    = @SAME_RECORD_HEAD$;
     1261+    8886               @POINTER -> FILE_LTS.SAME_RECORD.LINK     = @SAME_RECORD_LINK;
     1262+    8887               @POINTER -> FILE_LTS.SAME_AREA.HEAD$      = @SAME_AREA_HEAD$;
     1263+    8888               @POINTER -> FILE_LTS.SAME_AREA.LINK       = @SAME_AREA_LINK;
     1264+    8889               @POINTER -> FILE_LTS.MULT_TAPE.HEAD$      = @MULT_TAPE_HEAD$;
     1265+    8890               @POINTER -> FILE_LTS.MULT_TAPE.LINK       = @MULT_TAPE_LINK;
     1266+    8891               @POINTER -> FILE_LTS.RERUN_NUM            = @RERUN_NUM;
     1267+    8892               @POINTER -> FILE_LTS.DCB_DNT$             = @DCB_DNT$; /*#34313*/
     1268+    8893               %IF TEXTCHAR(@USE_PROC_LABEL$) = 'ENTADDR(NIL)';
     1269+    8894               @POINTER -> FILE_LTS.USE_PROC_LABEL_EPTR = ENTADDR(NIL);
     1270+    8895               %ELSE;
     1271+    8896               @POINTER -> FILE_LTS.USE_PROC_LABEL$      = @USE_PROC_LABEL$;
     1272+    8897               %ENDIF;
     1273+    8898               @POINTER -> FILE_LTS.LENGTH_READ$         = @LENGTH_READ$;
     1274+    8899               @POINTER -> FILE_LTS.LINAGE_COUNTER$      = @LINAGE_COUNTER$;
     1275+    8900               @POINTER -> FILE_LTS.RECORD_COUNT         = @RECORD_COUNT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:233  
     1276+    8901               @POINTER -> FILE_LTS.B.MERGE_STATEMENT    = %FALSE;
     1277+    8902               @POINTER -> FILE_LTS.LABEL_EXIT$          = @LABEL_EXIT$;
     1278+    8903
     1279+    8904               %IF (TEXTCHAR(@MULTIPLE_FILE_TAPE) ~= '');
     1280+    8905                 @POINTER -> FILE_LTS.B.MULTIPLE_FILE_TAPE = @MULTIPLE_FILE_TAPE;
     1281+    8906               %ENDIF;
     1282+    8907               %IF (TEXTCHAR(@OPTIONAL) ~= '');
     1283+    8908                 @POINTER -> FILE_LTS.B.OPTIONAL_FILE = @OPTIONAL;
     1284+    8909               %ENDIF;
     1285+    8910               %IF (TEXTCHAR(@PROCESS_AREA) ~= '');
     1286+    8911                 @POINTER -> FILE_LTS.B.PROCESS_AREA = @PROCESS_AREA;
     1287+    8912               %ENDIF;
     1288+    8913               %IF (TEXTCHAR(@BSN) ~= '');
     1289+    8914                 @POINTER -> FILE_LTS.B.BSN = @BSN;
     1290+    8915               %ENDIF;
     1291+    8916               %IF (TEXTCHAR(@FLR) ~= '');
     1292+    8917                 @POINTER -> FILE_LTS.B.FLR = @FLR;
     1293+    8918               %ENDIF;
     1294+    8919               %IF (TEXTCHAR(@VLR) ~= '');
     1295+    8920                 @POINTER -> FILE_LTS.B.VLR = @VLR;
     1296+    8921               %ENDIF;
     1297+    8922               %IF (TEXTCHAR(@SSF) ~= '');
     1298+    8923                 @POINTER -> FILE_LTS.B.SSF = @SSF;
     1299+    8924               %ENDIF;
     1300+    8925               %IF (TEXTCHAR(@UNBANNERED) ~= '');
     1301+    8926                 @POINTER -> FILE_LTS.B.UNBANNERED = @UNBANNERED;
     1302+    8927               %ENDIF;
     1303+    8928               %IF (TEXTCHAR(@SPANNED) ~= '');
     1304+    8929                 @POINTER -> FILE_LTS.B.SPANNED = @SPANNED;
     1305+    8930               %ENDIF;
     1306+    8931               %IF (TEXTCHAR(@EXTERNAL) ~= '');
     1307+    8932                 @POINTER -> FILE_LTS.B.EXTERNAL = @EXTERNAL;
     1308+    8933               %ENDIF;
     1309+    8934               %IF (TEXTCHAR(@GLOBAL) ~= '');
     1310+    8935                 @POINTER -> FILE_LTS.B.GLOBAL = @GLOBAL;
     1311+    8936               %ENDIF;
     1312+    8937               %IF (TEXTCHAR(@DUPLICATES) ~= '');
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:234  
     1313+    8938                 @POINTER -> FILE_LTS.B.DUPLICATES = @DUPLICATES;
     1314+    8939               %ENDIF;
     1315+    8940               %IF (TEXTCHAR(@LABEL_OMITTED) ~= '');
     1316+    8941                 @POINTER -> FILE_LTS.B.LABEL_OMITTED = @LABEL_OMITTED;
     1317+    8942               %ENDIF;
     1318+    8943               %IF (TEXTCHAR(@LABEL_STANDARD) ~= '');
     1319+    8944                 @POINTER -> FILE_LTS.B.LABEL_STANDARD = @LABEL_STANDARD;
     1320+    8945               %ENDIF;
     1321+    8946               %IF (TEXTCHAR(@BEGIN_TAPE_LABEL) ~= '');
     1322+    8947                 @POINTER -> FILE_LTS.B.BEGIN_TAPE_LABEL = @BEGIN_TAPE_LABEL;
     1323+    8948               %ENDIF;
     1324+    8949               %IF (TEXTCHAR(@BEGIN_FILE_LABEL) ~= '');
     1325+    8950                 @POINTER -> FILE_LTS.B.BEGIN_FILE_LABEL = @BEGIN_FILE_LABEL;
     1326+    8951               %ENDIF;
     1327+    8952               %IF (TEXTCHAR(@END_TAPE_LABEL) ~= '');
     1328+    8953                 @POINTER -> FILE_LTS.B.END_TAPE_LABEL = @END_TAPE_LABEL;
     1329+    8954               %ENDIF;
     1330+    8955               %IF (TEXTCHAR(@END_FILE_LABEL) ~= '');
     1331+    8956                 @POINTER -> FILE_LTS.B.END_FILE_LABEL = @END_FILE_LABEL;
     1332+    8957               %ENDIF;
     1333+    8958               %IF (TEXTCHAR(@RECORDS_NOT_CHARS) ~= '');
     1334+    8959                 @POINTER -> FILE_LTS.B.RECORDS_NOT_CHARS = @RECORDS_NOT_CHARS;
     1335+    8960               %ENDIF;
     1336+    8961               %IF (TEXTCHAR(@RECORD_FORMAT_2) ~= '');
     1337+    8962                 @POINTER -> FILE_LTS.B.RECORD_FORMAT_2 = @RECORD_FORMAT_2;
     1338+    8963               %ENDIF;
     1339+    8964               %IF (TEXTCHAR(@EBCDIC) ~= '');
     1340+    8965                 @POINTER -> FILE_LTS.B.EBCDIC = @EBCDIC;
     1341+    8966               %ENDIF;
     1342+    8967               %IF (TEXTCHAR(@EBCDIC_CODE_SET) ~= '');
     1343+    8968                 @POINTER -> FILE_LTS.B.EBCDIC_CODE_SET = @EBCDIC_CODE_SET;
     1344+    8969               %ENDIF;
     1345+    8970               %IF (TEXTCHAR(@NON_TYA_RECORDS) ~= '');
     1346+    8971                 @POINTER -> FILE_LTS.B.NON_TYA_RECORDS = @NON_TYA_RECORDS;
     1347+    8972               %ENDIF;
     1348+    8973               %IF (TEXTCHAR(@RECORD_CONTAINS) ~= '');
     1349+    8974                 @POINTER -> FILE_LTS.B.RECORD_CONTAINS = @RECORD_CONTAINS;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:235  
     1350+    8975               %ENDIF;
     1351+    8976               %IF (TEXTCHAR(@BLOCK_CONTAINS) ~= '');
     1352+    8977                 @POINTER -> FILE_LTS.B.BLOCK_CONTAINS = @BLOCK_CONTAINS;
     1353+    8978               %ENDIF;
     1354+    8979               %IF (TEXTCHAR(@SAME_RECORD) ~= '');
     1355+    8980                 @POINTER -> FILE_LTS.B.SAME_RECORD = @SAME_RECORD;
     1356+    8981               %ENDIF;
     1357+    8982               %IF (TEXTCHAR(@SAME_AREA) ~= '');
     1358+    8983                 @POINTER -> FILE_LTS.B.SAME_AREA = @SAME_AREA;
     1359+    8984               %ENDIF;
     1360+    8985
     1361+    8986             END;
     1362+    8987
     1363+    8988           %MEND;
     1364+    8989           %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:236  
     1365+    8990
     1366+    8991
     1367+    8992         %MACRO NEW_REPORT_LTS  (@POINTER           = LTS$,
     1368+    8993                                 @ST$               = "ADDR(NIL)",
     1369+    8994                                 @FILE$             = "ADDR(NIL)",
     1370+    8995                                 @ATTR              = FALSE,
     1371+    8996                                 @CONTROL$          = "ADDR(NIL)",
     1372+    8997                                 @CONTROL_FINAL$    = "ADDR(NIL)",
     1373+    8998                                 @CONTROL_ERROR$    = "ADDR(NIL)",
     1374+    8999                                 @GENERAL_SUBTOTAL$ = "ADDR(NIL)",
     1375+    9000                                 @PAGE_LIMIT        = 0,
     1376+    9001                                 @HEADING           = 0,
     1377+    9002                                 @FIRST_DETAIL      = 0,
     1378+    9003                                 @LAST_DETAIL       = 0,
     1379+    9004                                 @FOOTING           = 0,
     1380+    9005                                 @RECORD_LENGTH     = 0,
     1381+    9006                                 @COL_NO#           = 0,
     1382+    9007                                 @NO_CTR_ITEM       = 0,
     1383+    9008                                 @DETAIL_NO         = 0,
     1384+    9009                                 @BODY_NO           = 0,
     1385+    9010                                 @AFTER_ADVANCE$    = "ADDR(NIL)",
     1386+    9011                                 @PAGE_COUNTER$     = "ADDR(NIL)",
     1387+    9012                                 @LINE_COUNTER$     = "ADDR(NIL)",
     1388+    9013                                 @SUM_LTS$          = "ADDR(NIL)",
     1389+    9014                                 @RWCT$             = "ADDR(NIL)",
     1390+    9015                                 @PAGE_HEADING$     = "ADDR(NIL)",
     1391+    9016                                 @REPORT_HEADING$   = "ADDR(NIL)",
     1392+    9017                                 @REPORT_FOOTING$   = "ADDR(NIL)",
     1393+    9018                                 @PAGE_FOOTING$     = "ADDR(NIL)",
     1394+    9019                                 @DEATIL$           = "ADDR(NIL)",
     1395+    9020                                 @CONTROL_FOOTING$  = "ADDR(NIL)",
     1396+    9021                                 @CONTROL_HEADING$  = "ADDR(NIL)",
     1397+    9022                                 @CONTROL_HEADING_FINAL$  = "ADDR(NIL)",
     1398+    9023                                 @CONTROL_FOOTING_FINAL$  = "ADDR(NIL)",
     1399+    9024                                 @BUFFER_ST$        = "ADDR(NIL)",
     1400+    9025                                 @CTR_LVL_COUNTER$  = "ADDR(NIL)",
     1401+    9026                                 @INIT_CHAIN$       = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:237  
     1402+    9027                                 @LINK              = "ADDR(NIL)");
     1403+    9028
     1404+    9029           DO;
     1405+    9030             %RESERVE_LTS (ITEM    = %REPORT_LTS,
     1406+    9031                           POINTER = @POINTER);
     1407+    9032
     1408+    9033             @POINTER -> REPORT_LTS.ID            = %REPORT_LTS;
     1409+    9034             @POINTER -> REPORT_LTS.ST$           = @ST$;
     1410+    9035             @POINTER -> REPORT_LTS.FILE$         = @FILE$;
     1411+    9036             @POINTER -> REPORT_LTS.ATTR          = @ATTR;
     1412+    9037             @POINTER -> REPORT_LTS.CONTROL$      = @CONTROL$;
     1413+    9038             @POINTER -> REPORT_LTS.CONTROL_FINAL$   = @CONTROL_FINAL$;
     1414+    9039             @POINTER -> REPORT_LTS.CONTROL_ERROR$   = @CONTROL_ERROR$;
     1415+    9040             @POINTER -> REPORT_LTS.GENERAL_SUBTOTAL$ = @GENERAL_SUBTOTAL$;
     1416+    9041             @POINTER -> REPORT_LTS.CTR_LVL_COUNTER$ = @CTR_LVL_COUNTER$;
     1417+    9042             @POINTER -> REPORT_LTS.PAGE_LIMIT    = @PAGE_LIMIT;
     1418+    9043             @POINTER -> REPORT_LTS.HEADING       = @HEADING;
     1419+    9044             @POINTER -> REPORT_LTS.FIRST_DETAIL  = @FIRST_DETAIL;
     1420+    9045             @POINTER -> REPORT_LTS.LAST_DETAIL   = @LAST_DETAIL;
     1421+    9046             @POINTER -> REPORT_LTS.FOOTING       = @FOOTING;
     1422+    9047             @POINTER -> REPORT_LTS.RECORD_LENGTH = @RECORD_LENGTH;
     1423+    9048             @POINTER -> REPORT_LTS.NO_CTR_ITEM   = @NO_CTR_ITEM;
     1424+    9049             @POINTER -> REPORT_LTS.DETAIL_NO     = @DETAIL_NO;
     1425+    9050             @POINTER -> REPORT_LTS.BODY_NO       = @BODY_NO;
     1426+    9051             @POINTER -> REPORT_LTS.PAGE_COUNTER$ = @PAGE_COUNTER$;
     1427+    9052             @POINTER -> REPORT_LTS.LINE_COUNTER$ = @LINE_COUNTER$;
     1428+    9053             @POINTER -> REPORT_LTS.BUFFER_ST$    = @BUFFER_ST$;
     1429+    9054             @POINTER -> REPORT_LTS.COL_NO#       = @COL_NO#;
     1430+    9055             @POINTER -> REPORT_LTS.INIT_CHAIN$   = @INIT_CHAIN$;
     1431+    9056             @POINTER -> REPORT_LTS.SUM_LTS$      = @SUM_LTS$;
     1432+    9057             @POINTER -> REPORT_LTS.RWCT$         = @RWCT$;
     1433+    9058             @POINTER -> REPORT_LTS.PAGE_HEADING$  = @PAGE_HEADING$;
     1434+    9059             @POINTER -> REPORT_LTS.PAGE_FOOTING$  = @PAGE_FOOTING$;
     1435+    9060             @POINTER -> REPORT_LTS.REPORT_HEADING$ = @REPORT_HEADING$;
     1436+    9061             @POINTER -> REPORT_LTS.REPORT_FOOTING$ = @REPORT_FOOTING$;
     1437+    9062             @POINTER -> REPORT_LTS.DETAIL$         = @DEATIL$;
     1438+    9063             @POINTER -> REPORT_LTS.CONTROL_HEADING$ = @CONTROL_HEADING$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:238  
     1439+    9064             @POINTER -> REPORT_LTS.CONTROL_FOOTING$ = @CONTROL_FOOTING$;
     1440+    9065             @POINTER -> REPORT_LTS.CONTROL_FOOTING_FINAL$ = @CONTROL_FOOTING_FINAL$;
     1441+    9066             @POINTER -> REPORT_LTS.CONTROL_HEADING_FINAL$ = @CONTROL_HEADING_FINAL$;
     1442+    9067             @POINTER -> REPORT_LTS.AFTER_ADVANCE$  = @AFTER_ADVANCE$;
     1443+    9068             @POINTER -> REPORT_LTS.LINK            = @LINK;
     1444+    9069
     1445+    9070           END;
     1446+    9071
     1447+    9072         %MEND;
     1448+    9073         %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:239  
     1449+    9074
     1450+    9075
     1451+    9076         %MACRO NEW_REPORT_01_LTS (@POINTER          = LTS$,
     1452+    9077                                   @ST$              = "ADDR(NIL)",
     1453+    9078                                   @QLT$             = "ADDR(NIL)",
     1454+    9079                                   @NEXT             = "ADDR(NIL)",
     1455+    9080                                   @PREV             = "ADDR(NIL)",
     1456+    9081                                   @LINK             = "ADDR(NIL)",
     1457+    9082                                   @RWCT$            = "ADDR(NIL)",
     1458+    9083                                   @GROUP_INDICATOR$ = "ADDR(NIL)",
     1459+    9084                                   @CONTROL_LTS$     = "ADDR(NIL)",
     1460+    9085                                   @REPORT_LTS$      = "ADDR(NIL)",
     1461+    9086                                   @SPECIAL_SUBTOTAL$ = "ADDR(NIL)",
     1462+    9087                                   @FIRST_LINE_LTS$  = "ADDR(NIL)",
     1463+    9088                                   @FIRST_LINE_TYPE  = 0,
     1464+    9089                                   @FIRST_LINE_NO#   = 0,
     1465+    9090                                   @GROUP_TYPE       = 0,
     1466+    9091                                   @LINE_TYPE        = 0,
     1467+    9092                                   @NEXT_GROUP_TYPE  = 0,
     1468+    9093                                   @NEXT_GROUP_NO#   = 0,
     1469+    9094                                   @LINE_NO#         = 0,
     1470+    9095                                   @LINE_PRESENTED  = '0'B,
     1471+    9096                                   @NEXT_GROUP_PRESENTED  = '0'B,
     1472+    9097                                   @TOTAL_LINES      = 0,
     1473+    9098                                   @ATTR             = 0 );
     1474+    9099
     1475+    9100           DO;
     1476+    9101             %RESERVE_LTS (ITEM    = %REPORT_01_LTS,
     1477+    9102                           POINTER = @POINTER);
     1478+    9103
     1479+    9104             @POINTER -> REPORT_01_LTS.ID              = %REPORT_01_LTS;
     1480+    9105             @POINTER -> REPORT_01_LTS.ST$             = @ST$;
     1481+    9106             @POINTER -> REPORT_01_LTS.QLT$            = @QLT$;
     1482+    9107             @POINTER -> REPORT_01_LTS.NEXT            = @NEXT;
     1483+    9108             @POINTER -> REPORT_01_LTS.PREV            = @PREV;
     1484+    9109             @POINTER -> REPORT_01_LTS.LINK            = @LINK;
     1485+    9110             @POINTER -> REPORT_01_LTS.RWCT$           = @RWCT$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:240  
     1486+    9111             @POINTER -> REPORT_01_LTS.GROUP_INDICATOR$ = @GROUP_INDICATOR$;
     1487+    9112             @POINTER -> REPORT_01_LTS.CONTROL_LTS$    = @CONTROL_LTS$;
     1488+    9113             @POINTER -> REPORT_01_LTS.GROUP_TYPE      = @GROUP_TYPE;
     1489+    9114             @POINTER -> REPORT_01_LTS.REPORT_LTS$     = @REPORT_LTS$;
     1490+    9115             @POINTER -> REPORT_01_LTS.SPECIAL_SUBTOTAL$ = @SPECIAL_SUBTOTAL$;
     1491+    9116             @POINTER -> REPORT_01_LTS.FIRST_LINE.TYPE = @FIRST_LINE_TYPE;
     1492+    9117             @POINTER -> REPORT_01_LTS.FIRST_LINE.LTS$ = @FIRST_LINE_LTS$;
     1493+    9118             @POINTER -> REPORT_01_LTS.FIRST_LINE.NO#  = @FIRST_LINE_NO#;
     1494+    9119             @POINTER -> REPORT_01_LTS.LINE_TYPE       = @LINE_TYPE;
     1495+    9120             @POINTER -> REPORT_01_LTS.NEXT_GROUP_TYPE = @NEXT_GROUP_TYPE;
     1496+    9121             @POINTER -> REPORT_01_LTS.NEXT_GROUP_NO#  = @NEXT_GROUP_NO#;
     1497+    9122             @POINTER -> REPORT_01_LTS.LINE_NO#        = @LINE_NO#;
     1498+    9123             @POINTER -> REPORT_01_LTS.TOTAL_LINES     = @TOTAL_LINES;
     1499+    9124             @POINTER -> REPORT_01_LTS.ATTR            = @ATTR;
     1500+    9125             @POINTER -> REPORT_01_LTS.B.LINE_PRESENTED = @LINE_PRESENTED;
     1501+    9126             @POINTER -> REPORT_01_LTS.B.NEXT_GROUP_PRESENTED = @NEXT_GROUP_PRESENTED;
     1502+    9127           END;
     1503+    9128         %MEND;
     1504+    9129
     1505+    9130
     1506+    9131
     1507+    9132
     1508+    9133         %MACRO NEW_REPORT_ELEM_LTS (@POINTER          = LTS$,
     1509+    9134                                     @ST$              = "ADDR(NIL)",
     1510+    9135                                     @QLT$             = "ADDR(NIL)",
     1511+    9136                                     @NEXT             = "ADDR(NIL)",
     1512+    9137                                     @PREV             = "ADDR(NIL)",
     1513+    9138                                     @SOURCE_ETT$      = "ADDR(NIL)",
     1514+    9139                                     @VALUE_ETT$       = "ADDR(NIL)",
     1515+    9140                                     @SUM_LTS$         = "ADDR(NIL)",
     1516+    9141                                     @LINE_TYPE        = 0,
     1517+    9142                                     @SPAN             = 0,
     1518+    9143                                     @LINE_NO#         = 0,
     1519+    9144                                     @COLUMN_NO#       = 0,
     1520+    9145                                     @LINE_PRESENTED   = '0'B,
     1521+    9146                                     @COLUMN_PRESENTED = '0'B,
     1522+    9147                                     @GROUP_INDICATE   = '0'B,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:241  
     1523+    9148                                     @SUM_PRESENTED    = '0'B,
     1524+    9149                                     @SOURCE_PRESENTED = '0'B,
     1525+    9150                                     @PRINTABLE        = '0'B,
     1526+    9151                                     @ATTR             = 0 );
     1527+    9152
     1528+    9153           DO;
     1529+    9154             %RESERVE_LTS (ITEM    = %REPORT_ELEM_LTS,
     1530+    9155                           POINTER = @POINTER);
     1531+    9156
     1532+    9157             @POINTER -> REPORT_ELEM_LTS.ID              = %REPORT_ELEM_LTS;
     1533+    9158             @POINTER -> REPORT_ELEM_LTS.ST$             = @ST$;
     1534+    9159             @POINTER -> REPORT_ELEM_LTS.QLT$            = @QLT$;
     1535+    9160             @POINTER -> REPORT_ELEM_LTS.NEXT            = @NEXT;
     1536+    9161             @POINTER -> REPORT_ELEM_LTS.PREV            = @PREV;
     1537+    9162             @POINTER -> REPORT_ELEM_LTS.SOURCE_ETT$     = @SOURCE_ETT$;
     1538+    9163             @POINTER -> REPORT_ELEM_LTS.VALUE_ETT$      = @VALUE_ETT$;
     1539+    9164             @POINTER -> REPORT_ELEM_LTS.SUM_LTS$        = @SUM_LTS$;
     1540+    9165             @POINTER -> REPORT_ELEM_LTS.LINE_TYPE       = @LINE_TYPE;
     1541+    9166             @POINTER -> REPORT_ELEM_LTS.SPAN            = @SPAN;
     1542+    9167             @POINTER -> REPORT_ELEM_LTS.COLUMN_NO#      = @COLUMN_NO#;
     1543+    9168             @POINTER -> REPORT_ELEM_LTS.LINE_NO#        = @LINE_NO#;
     1544+    9169             @POINTER -> REPORT_ELEM_LTS.ATTR            = @ATTR;
     1545+    9170             @POINTER -> REPORT_ELEM_LTS.B.COLUMN_PRESENTED = @COLUMN_PRESENTED;
     1546+    9171             @POINTER -> REPORT_ELEM_LTS.B.LINE_PRESENTED = @LINE_PRESENTED;
     1547+    9172             @POINTER -> REPORT_ELEM_LTS.B.GROUP_INDICATE = @GROUP_INDICATE;
     1548+    9173             @POINTER -> REPORT_ELEM_LTS.B.SUM_PRESENTED = @SUM_PRESENTED;
     1549+    9174             @POINTER -> REPORT_ELEM_LTS.B.SOURCE_PRESENTED = @SOURCE_PRESENTED;
     1550+    9175             @POINTER -> REPORT_ELEM_LTS.B.PRINTABLE     = @PRINTABLE;
     1551+    9176           END;
     1552+    9177         %MEND;
     1553+    9178
     1554+    9179
     1555+    9180
     1556+    9181
     1557+    9182         %MACRO NEW_REPORT_GRP_LTS  (@POINTER          = LTS$,
     1558+    9183                                     @ST$              = "ADDR(NIL)",
     1559+    9184                                     @QLT$             = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:242  
     1560+    9185                                     @NEXT             = "ADDR(NIL)",
     1561+    9186                                     @PREV             = "ADDR(NIL)",
     1562+    9187                                     @LINE_TYPE        = 0,
     1563+    9188                                     @LINE_NO#         = 0,
     1564+    9189                                     @LINE_PRESENTED  = '0'B,
     1565+    9190                                     @ATTR             = 0 );
     1566+    9191
     1567+    9192           DO;
     1568+    9193             %RESERVE_LTS (ITEM    = %REPORT_GRP_LTS,
     1569+    9194                           POINTER = @POINTER);
     1570+    9195
     1571+    9196             @POINTER -> REPORT_GRP_LTS.ID              = %REPORT_GRP_LTS;
     1572+    9197             @POINTER -> REPORT_GRP_LTS.ST$             = @ST$;
     1573+    9198             @POINTER -> REPORT_GRP_LTS.QLT$            = @QLT$;
     1574+    9199             @POINTER -> REPORT_GRP_LTS.NEXT            = @NEXT;
     1575+    9200             @POINTER -> REPORT_GRP_LTS.PREV            = @PREV;
     1576+    9201             @POINTER -> REPORT_GRP_LTS.LINE_TYPE       = @LINE_TYPE;
     1577+    9202             @POINTER -> REPORT_GRP_LTS.LINE_NO#        = @LINE_NO#;
     1578+    9203             @POINTER -> REPORT_GRP_LTS.ATTR            = @ATTR;
     1579+    9204             @POINTER -> REPORT_GRP_LTS.B.LINE_PRESENTED = @LINE_PRESENTED;
     1580+    9205           END;
     1581+    9206         %MEND;
     1582+    9207
     1583+    9208         %MACRO REPORT_ENTRIES;
     1584+    9209             %REPORT_LTS,                    /*#25795*/
     1585+    9210             %REPORT_01_LTS,
     1586+    9211             %REPORT_GRP_LTS,
     1587+    9212             %REPORT_ELEM_LTS
     1588+    9213         %MEND;
     1589+    9214
     1590+    9215
     1591+    9216         %MACRO  NEW_CONTROL_NAME_LTS   (@POINTER          = LTS$,
     1592+    9217                                         @ST$              = "ADDR(NIL)",
     1593+    9218                                         @ST_FIELD$        = "ADDR(NIL)",
     1594+    9219                                         @TEMP_FIELD$      = "ADDR(NIL)",
     1595+    9220                                         @SHADOW_FIELD$    = "ADDR(NIL)",
     1596+    9221                                         @CONTROL_HEADING$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:243  
     1597+    9222                                         @CONTROL_FOOTING$ = "ADDR(NIL)",
     1598+    9223                                         @SUM_RESET$       = "ADDR(NIL)",
     1599+    9224                                         @SUM_SUBTOTAL$    = "ADDR(NIL)",
     1600+    9225                                         @SUM_CLEAR$       = "ADDR(NIL)",
     1601+    9226                                         @TEMP$            = "ADDR(NIL)",
     1602+    9227                                         @SHADOW$          = "ADDR(NIL)",
     1603+    9228                                         @LEVEL            = 0,
     1604+    9229                                         @START_OFFSET     = 0,
     1605+    9230                                         @ATTR             = 0,
     1606+    9231                                         @LINK             = "ADDR(NIL)");
     1607+    9232
     1608+    9233
     1609+    9234           DO;
     1610+    9235             %RESERVE_LTS (ITEM  = %CONTROL_NAME_LTS,
     1611+    9236                           POINTER = @POINTER);
     1612+    9237             @POINTER -> CONTROL_NAME_LTS.ID             = %CONTROL_NAME_LTS;
     1613+    9238             @POINTER -> CONTROL_NAME_LTS.ST$            = @ST$;
     1614+    9239             @POINTER -> CONTROL_NAME_LTS.ST_FIELD$      = @ST_FIELD$;
     1615+    9240             @POINTER -> CONTROL_NAME_LTS.TEMP_FIELD$    = @TEMP_FIELD$;
     1616+    9241             @POINTER -> CONTROL_NAME_LTS.SHADOW_FIELD$  = @SHADOW_FIELD$;
     1617+    9242             @POINTER -> CONTROL_NAME_LTS.CONTROL_HEADING$ = @CONTROL_HEADING$;
     1618+    9243             @POINTER -> CONTROL_NAME_LTS.CONTROL_FOOTING$ = @CONTROL_FOOTING$;
     1619+    9244             @POINTER -> CONTROL_NAME_LTS.SUM_RESET$     = @SUM_RESET$;
     1620+    9245             @POINTER -> CONTROL_NAME_LTS.SUM_SUBTOTAL$  = @SUM_SUBTOTAL$;
     1621+    9246             @POINTER -> CONTROL_NAME_LTS.SUM_CLEAR$     = @SUM_CLEAR$;
     1622+    9247             @POINTER -> CONTROL_NAME_LTS.TEMP$          = @TEMP$;
     1623+    9248             @POINTER -> CONTROL_NAME_LTS.SHADOW$        = @SHADOW$;
     1624+    9249             @POINTER -> CONTROL_NAME_LTS.LEVEL          = @LEVEL;
     1625+    9250             @POINTER -> CONTROL_NAME_LTS.START_OFFSET   = @START_OFFSET;
     1626+    9251             @POINTER -> CONTROL_NAME_LTS.ATTR           = @ATTR;
     1627+    9252             @POINTER -> CONTROL_NAME_LTS.LINK           = @LINK;
     1628+    9253          END;
     1629+    9254         %MEND;
     1630+    9255
     1631+    9256         %MACRO NEW_SUM_LTS (@POINTER = LTS$,
     1632+    9257                             @EDIT_ST$ = "ADDR(NIL)",
     1633+    9258                             @SUM_ST$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:244  
     1634+    9259                             @SUM_ST_ILL$ = "ADDR(NIL)",
     1635+    9260                             @REPORT_LTS$ = "ADDR(NIL)",
     1636+    9261                             @REPORT_01_LTS$ = "ADDR(NIL)",
     1637+    9262                             @ATTR     = 0,
     1638+    9263                             @EDIT_ST_ILL$ = "ADDR(NIL)");
     1639+    9264
     1640+    9265           DO;
     1641+    9266             %RESERVE_LTS (ITEM = %SUM_LTS,
     1642+    9267                           POINTER = @POINTER);
     1643+    9268             @POINTER -> SUM_LTS.ID          = %SUM_LTS;
     1644+    9269             @POINTER -> SUM_LTS.EDIT_ST$     = @EDIT_ST$;
     1645+    9270             @POINTER -> SUM_LTS.REPORT_LTS$ = @REPORT_LTS$;
     1646+    9271             @POINTER -> SUM_LTS.REPORT_01_LTS$ = @REPORT_01_LTS$;
     1647+    9272             @POINTER -> SUM_LTS.SUM_ST_ILL$ = @SUM_ST_ILL$;
     1648+    9273             @POINTER -> SUM_LTS.ATTR        = @ATTR;
     1649+    9274             @POINTER -> SUM_LTS.EDIT_ST_ILL$ = @EDIT_ST_ILL$;
     1650+    9275           END;
     1651+    9276         %MEND;
     1652+    9277
     1653+    9278         %MACRO NEW_SEGMENT_LTS (@POINTER = LTS$,
     1654+    9279                                 @ATTR     = 0,
     1655+    9280                                 @FIXED_PERMANENT = '0'B,
     1656+    9281                                 @FIXED_OVERLAY   = '0'B,
     1657+    9282                                 @INDEPENDENT     = '0'B,
     1658+    9283                                 @SECTION_ST$     = "ADDR(NIL)",
     1659+    9284                                 @SEGMENT_NO#     = 0,
     1660+    9285                                 @NEXT_SECTION$   = "ADDR(NIL)",
     1661+    9286                                 @ALTER_RESET$    = "ADDR(NIL)",
     1662+    9287                                 @SUB_LABEL$      = "ADDR(NIL)",
     1663+    9288                                 @NEXT            = "ADDR(NIL)",
     1664+    9289                                 @LINK            = "ADDR(NIL)");
     1665+    9290
     1666+    9291           DO;
     1667+    9292             %RESERVE_LTS (ITEM = %SEGMENT_LTS,
     1668+    9293                           POINTER = @POINTER);
     1669+    9294
     1670+    9295             @POINTER -> SEGMENT_LTS.ID = %SEGMENT_LTS;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:245  
     1671+    9296             @POINTER -> SEGMENT_LTS.ATTR = @ATTR;
     1672+    9297             @POINTER -> SEGMENT_LTS.B.FIXED_PERMANENT = @FIXED_PERMANENT;
     1673+    9298             @POINTER -> SEGMENT_LTS.B.FIXED_OVERLAY   = @FIXED_OVERLAY;
     1674+    9299             @POINTER -> SEGMENT_LTS.B.INDEPENDENT     = @INDEPENDENT;
     1675+    9300             @POINTER -> SEGMENT_LTS.SECTION_ST$       = @SECTION_ST$;
     1676+    9301             @POINTER -> SEGMENT_LTS.SEGMENT_NO#       = @SEGMENT_NO#;
     1677+    9302             @POINTER -> SEGMENT_LTS.NEXT_SECTION$     = @NEXT_SECTION$;
     1678+    9303             @POINTER -> SEGMENT_LTS.ALTER_RESET$      = @ALTER_RESET$;
     1679+    9304             @POINTER -> SEGMENT_LTS.SUB_LABEL$      = @SUB_LABEL$;
     1680+    9305             @POINTER -> SEGMENT_LTS.NEXT              = @NEXT;
     1681+    9306             @POINTER -> SEGMENT_LTS.LINK              = @LINK;
     1682+    9307
     1683+    9308           END;
     1684+    9309         %MEND;
     1685+    9310
     1686+    9311         %MACRO NEW_ALTER_LTS (@POINTER = LTS$,
     1687+    9312                               @SEG_NO# = 0,
     1688+    9313                               @LABEL$  = "ADDR(NIL)",
     1689+    9314                               @NEXT    = "ADDR(NIL)");
     1690+    9315           DO;
     1691+    9316             %RESERVE_LTS (ITEM = %ALTER_LTS,
     1692+    9317                           POINTER = @POINTER);
     1693+    9318
     1694+    9319             @POINTER -> ALTER_LTS.ID       = %ALTER_LTS;
     1695+    9320             @POINTER -> ALTER_LTS.SEG_NO#  = @SEG_NO#;
     1696+    9321             @POINTER -> ALTER_LTS.LABEL$   = @LABEL$;
     1697+    9322             @POINTER -> ALTER_LTS.NEXT     = @NEXT;
     1698+    9323           END;
     1699+    9324         %MEND;
     1700+    9325
     1701+    9326         %MACRO NEW_ARRAY_PRESET_LTS (@POINTER = LTS$,
     1702+    9327                                      @CONSTANT$ = "ADDR(NIL)",
     1703+    9328                                      @STRING$    = "ADDR(NIL)",
     1704+    9329                                      @LAST_OFFSET = 0,
     1705+    9330                                      @BITS_LEFT  = 0);
     1706+    9331           DO;
     1707+    9332               %RESERVE_LTS (ITEM    = %ARRAY_PRESET_LTS,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:246  
     1708+    9333                             POINTER = @POINTER);
     1709+    9334
     1710+    9335               @POINTER -> ARRAY_PRESET_LTS.ID = %ARRAY_PRESET_LTS;
     1711+    9336               @POINTER -> ARRAY_PRESET_LTS.CONSTANT$ = @CONSTANT$;
     1712+    9337               @POINTER -> ARRAY_PRESET_LTS.STRING$ = @STRING$;
     1713+    9338               @POINTER -> ARRAY_PRESET_LTS.LAST_OFFSET = @LAST_OFFSET;
     1714+    9339               @POINTER -> ARRAY_PRESET_LTS.BITS_LEFT = @BITS_LEFT;
     1715+    9340           END;
     1716+    9341         %MEND;
     1717+    9342
     1718+    9343         %MACRO NEW_BASE_LTS (@POINTER = LTS$,
     1719+    9344                              @ST$ = "ADDR(NIL)",
     1720+    9345                              @POINTER$    = "ADDR(NIL)",
     1721+    9346                              @REDEFINE$    = "ADDR(NIL)",
     1722+    9347                              @SEQ# = 0,
     1723+    9348                              @ARGP$ = "ADDR(NIL)",
     1724+    9349                              @LINK = "ADDR(NIL)",
     1725+    9350                              @NEXT = "ADDR(NIL)");
     1726+    9351           DO;
     1727+    9352               %RESERVE_LTS (ITEM    = %BASE_LTS,
     1728+    9353                             POINTER = @POINTER);
     1729+    9354
     1730+    9355               @POINTER -> BASE_LTS.ID = %BASE_LTS;
     1731+    9356               @POINTER -> BASE_LTS.POINTER$ = @POINTER$;
     1732+    9357               @POINTER -> BASE_LTS.NEXT = @NEXT;
     1733+    9358               @POINTER -> BASE_LTS.LINK = @LINK;
     1734+    9359               @POINTER -> BASE_LTS.REDEFINE$ = @REDEFINE$;
     1735+    9360               @POINTER -> BASE_LTS.ARGP$ = @ARGP$;
     1736+    9361               @POINTER -> BASE_LTS.SEQ# = @SEQ#;
     1737+    9362               @POINTER -> BASE_LTS.ST$ = @ST$;
     1738+    9363           END;
     1739+    9364         %MEND;
     1740+    9365
     1741+    9366         %MACRO NEW_CD_LTS (@POINTER = ,
     1742+    9367                            @LX_CD_TYPE    = %LX_CD_INPUT,
     1743+    9368                            @CD_ST$        = "ADDR(NIL)",
     1744+    9369                            @LINK          = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:247  
     1745+    9370                            @WORK_ST$      = "ADDR(NIL)",
     1746+    9371                            @BUFFER_ST$    = "ADDR(NIL)",
     1747+    9372                            @BUFFER_LENGTH = 84,
     1748+    9373                            @ATTR          = 0,
     1749+    9374                            @OCCURS        = 0,
     1750+    9375                            @INITIAL       = '0'B);
     1751+    9376           DO;
     1752+    9377               %RESERVE_LTS (ITEM = %CD_LTS,
     1753+    9378                             POINTER = @POINTER);
     1754+    9379
     1755+    9380             @POINTER -> CD_LTS.ID         = %CD_LTS;
     1756+    9381             @POINTER -> CD_LTS.CD_ST$     = @CD_ST$;
     1757+    9382             @POINTER -> CD_LTS.WORK_ST$   = @WORK_ST$;
     1758+    9383             @POINTER -> CD_LTS.BUFFER_ST$ = @BUFFER_ST$;
     1759+    9384             @POINTER -> CD_LTS.LX_CD_TYPE = @LX_CD_TYPE;
     1760+    9385             @POINTER -> CD_LTS.BUFFER_LENGTH = @BUFFER_LENGTH;
     1761+    9386             @POINTER -> CD_LTS.ATTR          = @ATTR;
     1762+    9387             @POINTER -> CD_LTS.B.INITIAL     = @INITIAL;
     1763+    9388             @POINTER -> CD_LTS.LINK          = @LINK;
     1764+    9389             @POINTER -> CD_LTS.D.LEN         = @BUFFER_LENGTH - 4;
     1765+    9390             @POINTER -> CD_LTS.D.OCCURS      = @OCCURS;
     1766+    9391
     1767+    9392           END;
     1768+    9393         %MEND;
     1769+    9394         %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:248  
     1770+    9395
     1771+    9396           %MACRO NEW_LTS_PTR_ARRAY (@POINTER = LTS$,
     1772+    9397                                @SIZE    = %MIN_LTS_PTR_ARRAY_SIZE,
     1773+    9398                                @LINK    = "ADDR(NIL)");
     1774+    9399
     1775+    9400             DO;
     1776+    9401               ITERATION = @SIZE;
     1777+    9402               %RESERVE_LTS (ITEM     = %LTS_PTR_ARRAY,
     1778+    9403                             POINTER  = @POINTER);
     1779+    9404               @POINTER -> LTS_PTR_ARRAY.LINK = @LINK;
     1780+    9405             END;
     1781+    9406           %MEND;
     1782+    9407
     1783+    9408
     1784+    9409           %MACRO NEW_ALT_KEY (@POINTER = LTS$,
     1785+    9410                               @#KEYS   = 1);
     1786+    9411
     1787+    9412               DO;
     1788+    9413                 ITERATION = (@#KEYS * %NO_WORDS_PER_ALT_KEY) + %MIN_ALT_KEY_SIZE;
     1789+    9414                 %RESERVE_LTS (ITEM     = %ALT_KEY,
     1790+    9415                               POINTER  = @POINTER);
     1791+    9416                 @POINTER -> ALT_KEY.NUM_KEYS_MINUS_1 = @#KEYS - 1;
     1792+    9417               END;
     1793+    9418           %MEND;
     1794+    9419
     1795+    9420
     1796+    9421            %MACRO NEW_DML_REC (@POINTER  = LTS$,
     1797+    9422                                @INFO =    ,
     1798+    9423                                @EXTEND$  = "ADDR(NIL)");
     1799+    9424
     1800+    9425                DO;
     1801+    9426                    %RESERVE_LTS(POINTER = @POINTER, ITEM = %DML_REC);
     1802+    9427                    @POINTER -> DML_REC.RECORD_INFO = @INFO;
     1803+    9428                    @POINTER -> DML_REC.EXTEND$ = @EXTEND$;
     1804+    9429                END;
     1805+    9430
     1806+    9431            %MEND;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:249  
     1807+    9432
     1808+    9433            %MACRO NEW_USE_LTS ( @POINTER     = LTS$,
     1809+    9434                                 @TYPE        = %USE_TYPE_UNKNOWN,
     1810+    9435                                 @PROC_CHAIN$ = "ADDR(NIL)",
     1811+    9436                                 @PROC_LABEL$ = "ENTADDR(NIL)",
     1812+    9437                                 @LINK$       = "ADDR(NIL)",
     1813+    9438                                 @TO$         = "ADDR(NIL)",
     1814+    9439                                 @TO1$        = "ADDR(NIL)",
     1815+    9440                                 @LINE        = 0,
     1816+    9441                                 @COLUMN      = 0,
     1817+    9442                                 @INIT_LABEL_BASE$ = "ADDR(NIL)");
     1818+    9443
     1819+    9444                DO;
     1820+    9445                    %RESERVE_LTS(POINTER = @POINTER, ITEM = %USE_LTS);
     1821+    9446                    @POINTER -> USE.PROC_CHAIN$ = @PROC_CHAIN$;
     1822+    9447                    %IF TEXTCHAR(@PROC_LABEL$) = 'ENTADDR(NIL)';
     1823+    9448                    @POINTER -> USE.PROC_NO_LABEL$ = ENTADDR(NIL);
     1824+    9449                    %ELSE;
     1825+    9450                    @POINTER -> USE.PROC_LABEL$ = @PROC_LABEL$;
     1826+    9451                    %ENDIF;
     1827+    9452                    @POINTER -> USE.LINK$       = @LINK$;
     1828+    9453                    @POINTER -> USE.TO$         = @TO$  ;
     1829+    9454                    @POINTER -> USE.TYPE        = @TYPE ;
     1830+    9455                    ADDR(@POINTER -> USE.ILS_LIST) -> ILS_LIST.HEAD$ = ADDR(NIL) ;
     1831+    9456                    ADDR(@POINTER -> USE.ILS_LIST) -> ILS_LIST.TAIL$ = ADDR(NIL) ;
     1832+    9457                    ADDR(@POINTER -> USE.ILS_LIST) -> ILS_LIST.LINK  = ADDR(NIL) ;
     1833+    9458                    @POINTER -> USE.TO1$        = @TO1$ ;
     1834+    9459                    @POINTER -> USE.INIT_LABEL_BASE$        = @INIT_LABEL_BASE$ ;
     1835+    9460                    @POINTER -> USE.LINE        = @LINE;
     1836+    9461                    @POINTER -> USE.COLUMN      = @COLUMN;
     1837+    9462                END;
     1838+    9463
     1839+    9464            %MEND;
     1840+    9465
     1841+    9466            %MACRO NEW_USE_SUPP (@POINTER = LTS$,
     1842+    9467                                 @FILE_LTS$ = "ADDR(NIL)",
     1843+    9468                                 @PROC_LABEL$ = "ENTADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:250  
     1844+    9469                                 @TO$ = "ADDR(NIL)",
     1845+    9470                                 @USE$ = "ADDR(NIL)",
     1846+    9471                                 @INIT_LABEL_BASE$ = "ADDR(NIL)",
     1847+    9472                                 @LINK$ = "ADDR(NIL)");
     1848+    9473
     1849+    9474                DO;
     1850+    9475                    %RESERVE_LTS (POINTER=@POINTER, ITEM = %USE_SUPP);
     1851+    9476                    @POINTER -> USE_SUPP.FILE_LTS$   = @FILE_LTS$;
     1852+    9477                    %IF TEXTCHAR(@PROC_LABEL$) = 'ENTADDR(NIL)';
     1853+    9478                    @POINTER -> USE_SUPP.PROC_LABEL_EPTR = ENTADDR(NIL);
     1854+    9479                    %ELSE;
     1855+    9480                    @POINTER -> USE_SUPP.PROC_LABEL$ = @PROC_LABEL$;
     1856+    9481                    %ENDIF;
     1857+    9482                    @POINTER -> USE_SUPP.TO$         = @TO$;
     1858+    9483                    @POINTER -> USE_SUPP.USE$        = @USE$;
     1859+    9484                    @POINTER -> USE_SUPP.INIT_LABEL_BASE$        = @INIT_LABEL_BASE$;
     1860+    9485                    @POINTER -> USE_SUPP.LINK$       = @LINK$;
     1861+    9486                END;
     1862+    9487
     1863+    9488            %MEND;
     1864+    9489
     1865+    9490            %MACRO NEW_EXT_DML (@POINTER = LTS$,
     1866+    9491                                @EXTEND$ = "ADDR(NIL)");
     1867+    9492
     1868+    9493                DO;
     1869+    9494                    %RESERVE_LTS(POINTER = @POINTER, ITEM = %DML_REC);
     1870+    9495                    @POINTER -> DML_REC.EXTEND$ = @EXTEND$;
     1871+    9496                END;
     1872+    9497
     1873+    9498            %MEND;
     1874+    9499
     1875+    9500            %MACRO NEW_RVA_LTS( @ST$ =  ,
     1876+    9501                                @POINTER = LTS$,
     1877+    9502                                @OFFSET =  0,
     1878+    9503                                @VERB = 0 );
     1879+    9504
     1880+    9505                %RESERVE_LTS( ITEM = %RVA, POINTER = @POINTER);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:251  
     1881+    9506                @POINTER -> RVA_LTS.ST$ = @ST$;
     1882+    9507                @POINTER -> RVA_LTS.LINK$ = O1COM.RVA_LINK$;
     1883+    9508                O1COM.RVA_LINK$ = @POINTER;
     1884+    9509                @POINTER -> RVA_LTS.VERB = @VERB;
     1885+    9510                @POINTER -> RVA_LTS.OFFSET = @OFFSET;
     1886+    9511
     1887+    9512            %MEND;
     1888+    9513        %MACRO GET_RVA_LTS(@ST$ = ,
     1889+    9514                           @POINTER = ,
     1890+    9515                           @LTS$ = );
     1891+    9516            DO WHILE @POINTER ~= ADDR(NIL);
     1892+    9517                IF @ST$ = @POINTER -> RVA_LTS.ST$    THEN
     1893+    9518                  DO;
     1894+    9519                    @LTS$ = @POINTER;
     1895+    9520                    @POINTER = ADDR(NIL);
     1896+    9521                  END;
     1897+    9522                ELSE
     1898+    9523                    @POINTER = @POINTER -> RVA_LTS.LINK$;
     1899+    9524            END;
     1900+    9525        %MEND;
     1901+    9526
     1902+    9527        %MACRO NEW_OPEN_LTS( @ARG$ = ,
     1903+    9528                             @FILE_LTS$ = ,
     1904+    9529                             @CONST_PARM = ,
     1905+    9530                             @OPEN_TYPE = ,
     1906+    9531                             @INFO_BLOCK$ = ,
     1907+    9532                             @POINTER = LTS$);
     1908+    9533        DO;
     1909+    9534          %RESERVE_LTS( ITEM = %OPEN_LTS, POINTER = @POINTER );
     1910+    9535
     1911+    9536          @POINTER -> OPEN_LTS.CONST_PARM = @CONST_PARM;
     1912+    9537          @POINTER -> OPEN_LTS.OPEN_TYPE = @OPEN_TYPE;
     1913+    9538          @POINTER -> OPEN_LTS.ARG$ = @ARG$;
     1914+    9539          @POINTER -> OPEN_LTS.INFO_BLOCK$ = @INFO_BLOCK$;
     1915+    9540          @POINTER -> OPEN_LTS.FILE_LTS$ = @FILE_LTS$;
     1916+    9541          @POINTER -> OPEN_LTS.LINK = O1COM.OPEN_LTS$;
     1917+    9542
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:252  
     1918+    9543          O1COM.OPEN_LTS$ = @POINTER;
     1919+    9544
     1920+    9545        END;
     1921+    9546        %MEND;
     1922+    9547
     1923+    9548        %MACRO NEW_IO_RESTORE_CHAIN (@POINTER = LTS$,
     1924+    9549                                     @RESTORE = "ADDR(NIL)",
     1925+    9550                                     @TO      = "ADDR(NIL)",
     1926+    9551                                     @BASE    = "ADDR(NIL)",
     1927+    9552                                     @NEXT    = "ADDR(NIL)") ;
     1928+    9553           DO;
     1929+    9554             %RESERVE_LTS (ITEM    = %IO_RESTORE_CHAIN,
     1930+    9555                           POINTER = @POINTER);
     1931+    9556             @POINTER -> IO_RESTORE_CHAIN.NEXT$    = @NEXT;
     1932+    9557             @POINTER -> IO_RESTORE_CHAIN.RESTORE$ = @RESTORE;
     1933+    9558             @POINTER -> IO_RESTORE_CHAIN.TO$      = @TO;
     1934+    9559             @POINTER -> IO_RESTORE_CHAIN.BASE$    = @BASE;
     1935+    9560           END;
     1936+    9561        %MEND;
     1937+    9562
     1938+    9563        %EQU NO_OF_LTS_ITEMS = %LAST_LTS - %FIRST_LTS + 1;
     1939+    9564
     1940+    9565        /* INFO FOR DIMS ITEM */
     1941+    9566        %EQU MIN_DIM_SIZE = 5 ;
     1942+    9567        %EQU NO_WORDS_PER_DIM = 3 ;
     1943+    9568
     1944+    9569        /* Info for LTS_PTR_ARRAY */
     1945+    9570        %EQU MIN_LTS_PTR_ARRAY_SIZE = 3;
     1946+    9571
     1947+    9572        %MACRO FIND_LAST_DIM(POINTER=LTS$, VARIABLE=LAST_DIM) ;
     1948+    9573               DO ;
     1949+    9574                 VARIABLE = (POINTER->LTS.N - %MIN_DIM_SIZE) / %NO_WORDS_PER_DIM ;
     1950+    9575               END ;
     1951+    9576        %MEND ;
     1952+    9577
     1953+    9578        /* INFO FOR EVALUATE ITEM */
     1954+    9579        %EQU MIN_EVAL_SIZE = 1 ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:253  
     1955+    9580        %EQU WORDS_PER_EVAL_VAR = 4 ;
     1956+    9581
     1957+    9582    1   DCL   LTS_STEP (0:%(NO_OF_LTS_ITEMS - 1 )) UBIN
     1958+    9583        %IF INITIALIZE;
     2000+    9625        %ELSE;
     2001+    9626    1         SYMREF READONLY
     2002+    9627        %ENDIF ;
     2003+    9628    1        ;
     2004+    9629
     2005+    9630
     2006+    9631        /* Equates for verifying assign values between Z8EN & Z9EN */
     2007+    9632        %EQU ASSIGN_PRINTER = 0;
     2008+    9633        %EQU ASSIGN_INPUT   = 1;
     2009+    9634        %EQU ASSIGN_OUTPUT  = 2;
     2010+    9635        %EQU ASSIGN_DISK    = 3;
     2011+    9636
     2012+    9637        /* Equates for USE.TYPE */
     2013+    9638        %EQU USE_TYPE_UNKNOWN   = 0 ;
     2014+    9639        %EQU USE_TYPE_INPUT     = 1 ;
     2015+    9640        %EQU USE_TYPE_OUTPUT    = 2 ;
     2016+    9641        %EQU USE_TYPE_EXTEND    = 3 ;
     2017+    9642        %EQU USE_TYPE_IO        = 4 ;
     2018+    9643        %EQU USE_TYPE_FILE      = 5 ;
     2019+    9644        %EQU USE_TYPE_REPORTING = 6 ;
     2020+    9645        %EQU USE_TYPE_DML       = 7 ;
     2021+    9646        %EQU USE_TYPE_NIL       = 8 ;
     2022+    9647        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:254  
      496     9648        %INCLUDE Z8A_QLT ;
        1+    9649        /*T***********************************************************/
        2+    9650        /*T*                                                         */
        3+    9651        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    9652        /*T*                                                         */
        5+    9653        /*T***********************************************************/
        6+    9654        /* INCLUDE FILE "QLT" (QUALIFIER LINKS TABLE) */
        7+    9655
        8+    9656
        9+    9657    1   DCL   QLT$    PTR EXT ;
       10+    9658    1   DCL   PREV_01_QLT$ PTR EXT ;
       11+    9659
       12+    9660    1   DCL 1  QLT_    EXT ALIGNED,
       13+    9661    1        2 TOP     PTR INIT (ADDR(NIL)),
       14+    9662    1        2 FIRST   PTR,          /* FIRST ITEM IN PAGE  */
       15+    9663    1        2 BOTTOM  UBIN INIT(0), /* NEXT AVAILABLE WORD */
       16+    9664    1        2 FLOOR   UBIN INIT(0), /* LAST WORD IN PAGE   */
       17+    9665    1        2 SIZE    UBIN INIT(0); /* SIZE in #pages      */
       18+    9666
       19+    9667    1   DCL 1 QLT     BASED (QLT$) ALIGNED,
       20+    9668    1       2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE   */
       21+    9669    1       2 B       UNAL,           /* BITS                  */
       22+    9670    1       3 OCCURS  BIT (1) UNAL,   /* OCCURS CLAUSE USED    */
       23+    9671    1       3 SYNC    BIT (1) UNAL,   /* SYNCHRONIZED CLAUSE   */
       24+    9672    1       3 DIGIT   BIT (1) UNAL,   /* COMP4 OR COMP8        */
       25+    9673    1       3 RENAMES BIT (1) UNAL,   /* Item is a renames entry */
       26+    9674    1       3 ARRAY_VALUED BIT (1) UNAL,
       27+    9675    1       3 *       BIT (4) UNAL,  /* AVAILABLE FOR LEASE   */
       28+    9676    1       2 LEVEL_NO UBIN(9) UNAL, /* LEVEL_NO              */
       29+    9677    1       2 FATHER  PTR,
       30+    9678    1       2 BROTHER PTR,
       31+    9679    1       2 SON     PTR,
       32+    9680    1       2 RENAMES_LTS$ REDEF SON PTR,  /* Used for renames entries */
       33+    9681    1       2 ST$     PTR,
       34+    9682    1       2 DNT$    PTR ,
       35+    9683    1       2 ARRAY_VALUE$ REDEF DNT$ PTR; /* USED IN PHASE 4 & 5 */
       36+    9684
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:255  
       37+    9685        %MACRO RESERVE_QLT (ITEM=%QUAL, POINTER=QLT$);
       38+    9686
       39+    9687               DO ;
       40+    9688                 IF QLT_.BOTTOM + SIZEW(QLT) >= QLT_.FLOOR
       41+    9689                 THEN CALL Z8AR$RESERVER(ADDR(QLT_));
       42+    9690                 POINTER = PINCRW (QLT_.FIRST, QLT_.BOTTOM);
       43+    9691                 QLT_.BOTTOM = QLT_.BOTTOM + SIZEW(QLT) ;
       44+    9692                 POINTER->QLT.ID = ITEM ;
       45+    9693               END ;
       46+    9694
       47+    9695        %MEND ;
       48+    9696
       49+    9697        %MACRO TOP_QLT (POINTER=QLT$) ;
       50+    9698
       51+    9699               DO ;
       52+    9700                 POINTER = QLT_.TOP ;
       53+    9701               END ;
       54+    9702
       55+    9703        %MEND ;
       56+    9704
       57+    9705        %MACRO STEP_QLT (POINTER=QLT$) ;
       58+    9706
       59+    9707               DO ;
       60+    9708                 POINTER = PINCRW (POINTER, SIZEW(QLT)) ;
       61+    9709                 IF POINTER = PINCRW (QLT_.FIRST, QLT_.BOTTOM)
       62+    9710                 THEN POINTER = ADDR(NIL) ;
       63+    9711                 ELSE
       64+    9712                 IF POINTER->QLT.ID = %CONTINUE
       65+    9713                 THEN POINTER = POINTER -> CONT.NEXT;
       66+    9714               END ;
       67+    9715
       68+    9716        %MEND ;
       69+    9717
       70+    9718        %MACRO NEW_QLT (@POINTER = QLT$,
       71+    9719                        @ID      = %QUAL,
       72+    9720                        @FATHER  = "ADDR(NIL)",
       73+    9721                        @BROTHER = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:256  
       74+    9722                        @SON     = "ADDR(NIL)",
       75+    9723                        @ST$     = "ADDR(NIL)",
       76+    9724                        @DNT$    = "ADDR(NIL)",
       77+    9725                        @LEVEL#  = 01,
       78+    9726                        @OCCURS    = '0'B,
       79+    9727                        @SYNC      = '0'B,
       80+    9728                        @DIGIT     = '0'B,
       81+    9729                        @RENAMES   = '0'B);
       82+    9730
       83+    9731           DO;
       84+    9732             %RESERVE_QLT (ITEM    = @ID,
       85+    9733                           POINTER = @POINTER);
       86+    9734
       87+    9735             @POINTER -> QLT.FATHER  = @FATHER;
       88+    9736             @POINTER -> QLT.BROTHER = @BROTHER;
       89+    9737             @POINTER -> QLT.SON     = @SON;
       90+    9738             @POINTER -> QLT.ST$     = @ST$;
       91+    9739             @POINTER -> QLT.DNT$    = @DNT$;
       92+    9740             @POINTER -> QLT.LEVEL_NO= @LEVEL#;
       93+    9741             @POINTER -> QLT.B       = '0'B;
       94+    9742             @POINTER -> QLT.B.OCCURS  = @OCCURS;
       95+    9743             @POINTER -> QLT.B.SYNC    = @SYNC;
       96+    9744             @POINTER -> QLT.B.DIGIT   = @DIGIT;
       97+    9745             @POINTER -> QLT.B.RENAMES = @RENAMES;
       98+    9746           END;
       99+    9747
      100+    9748        %MEND;
      101+    9749
      102+    9750
      103+    9751
      104+    9752
      105+    9753        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:257  
      497     9754        %INCLUDE Z8A_ST ;
        1+    9755        /*T***********************************************************/
        2+    9756        /*T*                                                         */
        3+    9757        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    9758        /*T*                                                         */
        5+    9759        /*T***********************************************************/
        6+    9760        /* INCLUDE FILE "ST" (ACCOUNT NAME IS C80C80) */
        7+    9761
        8+    9762
        9+    9763    1   DCL   ST$    PTR EXT ;
       10+    9764
       11+    9765    1   DCL 1 ST_    EXT,
       12+    9766    1       2 TOP    PTR INIT (ADDR(NIL)),
       13+    9767    1       2 FIRST  PTR,               /* FIRST ITEM IN PAGE  */
       14+    9768    1       2 BOTTOM SBIN INIT(0),      /* NEXT AVAILABLE      */
       15+    9769    1       2 FLOOR  SBIN INIT(0),      /* LAST WORD IN PAGE   */
       16+    9770    1       2 SIZE   SBIN INIT(0) ;     /* Size in #pages.     */
       17+    9771
       18+    9772
       19+    9773        %MACRO RESERVE_ST (POINTER=ST$) ;
       20+    9774
       21+    9775             DO;
       22+    9776               IF ST_.BOTTOM + SIZEW(ST) >= ST_.FLOOR THEN
       23+    9777                 CALL Z8AR$RESERVER(ADDR(ST_));
       24+    9778
       25+    9779               POINTER = PINCRW(ST_.FIRST, ST_.BOTTOM);
       26+    9780               ST_.BOTTOM = ST_.BOTTOM + SIZEW(ST);
       27+    9781             END;
       28+    9782
       29+    9783        %MEND;
       30+    9784
       31+    9785        %MACRO TOP_ST (POINTER = ST$) ;
       32+    9786
       33+    9787             DO;
       34+    9788               POINTER = ST_.TOP;
       35+    9789             END;
       36+    9790
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:258  
       37+    9791        %MEND ;
       38+    9792
       39+    9793        %MACRO STEP_ST (POINTER = ST$) ;
       40+    9794
       41+    9795             DO;
       42+    9796               POINTER = PINCRW(POINTER, SIZEW(ST));
       43+    9797
       44+    9798               IF POINTER = PINCRW(ST_.FIRST, ST_.BOTTOM) THEN
       45+    9799                 POINTER = ADDR(NIL);
       46+    9800               ELSE
       47+    9801                 IF POINTER -> ST.ID = %CONTINUE THEN
       48+    9802                   POINTER = POINTER -> CONT.NEXT;
       49+    9803             END;
       50+    9804
       51+    9805        %MEND ;
       52+    9806
       53+    9807
       54+    9808        %MACRO ADD_ST_TO_LIST_TAIL (@PROC$ = ,
       55+    9809                                    @FROM_ST$ = );
       56+    9810
       57+    9811           DO;
       58+    9812             IF @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ = ADDR(NIL) THEN
       59+    9813               DO;
       60+    9814                 @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.HEAD$ = @FROM_ST$;
       61+    9815                 @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ = @FROM_ST$;
       62+    9816               END;
       63+    9817             ELSE
       64+    9818               DO;
       65+    9819                 @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ -> ST.LINK = @FROM_ST$;
       66+    9820                 @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ = @FROM_ST$;
       67+    9821               END;
       68+    9822           END;
       69+    9823
       70+    9824        %MEND;
       71+    9825
       72+    9826
       73+    9827        %MACRO UPDATE_PROC_LINK (@TEMPLATE = ST, @ST$ = , @PROC$ = );
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:259  
       74+    9828
       75+    9829                 %IF (TEXTCHAR(@TEMPLATE) = '') OR (TEXTCHAR(@ST$) = '');
       76+    9830                 %ENDIF;
       77+    9831
       78+    9832                 @ST$ -> @TEMPLATE.LINK = ADDR(NIL);
       79+    9833
       80+    9834                 %IF (TEXTCHAR(@PROC$) = '');
       81+    9835                   %IF PHASE = 1;
       82+    9836                     @ST$ -> @TEMPLATE.PROC$ = O1COM.CURRENT_PROC$;
       83+    9837                     IF O1COM.CURRENT_PROC$ ~= ADDR(NIL) THEN
       84+    9838                       %ADD_ST_TO_LIST_TAIL (@PROC$ = O1COM.CURRENT_PROC$,
       85+    9839                                             @FROM_ST$ = @ST$);
       86+    9840                   %ELSEIF PHASE = 0;
       87+    9841                     IF COMCOM.CURRENT.PHASE = 1 THEN
       88+    9842                       DO;
       89+    9843                         @ST$ -> @TEMPLATE.PROC$ = O1COM.CURRENT_PROC$;
       90+    9844                         IF O1COM.CURRENT_PROC$ ~= ADDR(NIL) THEN
       91+    9845                           %ADD_ST_TO_LIST_TAIL (@PROC$ = O1COM.CURRENT_PROC$,
       92+    9846                                                 @FROM_ST$ = @ST$);
       93+    9847                       END;
       94+    9848                     ELSE
       95+    9849                       @ST$ -> @TEMPLATE.PROC$ = ADDR(NIL);
       96+    9850                   %ENDIF;
       97+    9851                 %ELSE;
       98+    9852                   @ST$ -> @TEMPLATE.PROC$ = @PROC$;
       99+    9853                   IF @PROC$ ~= ADDR(NIL) THEN
      100+    9854                     %ADD_ST_TO_LIST_TAIL (@PROC$ = @PROC$,
      101+    9855                                           @FROM_ST$ = @ST$);
      102+    9856                 %ENDIF;
      103+    9857        %MEND;
      104+    9858
      105+    9859        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:260  
      106+    9860    1   DCL 1 ST     BASED (ST$) ALIGNED,
      107+    9861
      108+    9862    1       2 ID                     UBIN (18) UNAL, /* Operation code */
      109+    9863    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      110+    9864    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
      111+    9865
      112+    9866            %DESCRIPTOR(LVL=2);
      113+    9894    1       2 OU_INDEX REDEF DESCL SBIN HALF HALIGNED,
      114+    9895
      115+    9896    1       2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
      116+    9897    1       2 LINE_NO                UBIN HALF UNAL,
      117+    9898
      118+    9899    1       2 ATTR                   BIT  (36),      /* ATTRIBUTE BITS     */
      119+    9900    1       2 B REDEF ATTR,
      120+    9901    1           3 * (0:35)           BOOLEAN,
      121+    9902
      122+    9903    1       2 NEXT                   PTR,            /* SEARCH THREAD      */
      123+    9904
      124+    9905    1       2 *                      PTR,
      125+    9906
      126+    9907    1       2 DNT$                   PTR,
      127+    9908
      128+    9909    1       2 *                      PTR,
      129+    9910
      130+    9911    1       2 X_SORT_SYM$            PTR,            /* Used by phase 5 only */
      131+    9912
      132+    9913    1       2 X_REF_LIST$           PTR,             /* Used by phase 5 only */
      133+    9914    1       2 LINK                  PTR;             /* Links all ST's in a given proc */
      134+    9915
      135+    9916
      136+    9917        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:261  
      137+    9918        %MACRO SCALAR_ST_LAYOUT;
      138+    9919
      139+    9920            2 ID                     UBIN (18) UNAL, /* Operation code */
      140+    9921            2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      141+    9922            2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
      142+    9923
      143+    9924            %DESCRIPTOR(LVL=2);
      144+    9925
      145+    9926            2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
      146+    9927            2 LINE_NO                UBIN HALF UNAL,
      147+    9928
      148+    9929            2 ATTR                   BIT  (36),      /* ATTRIBUTE BITS     */
      149+    9930            2 B REDEF ATTR,
      150+    9931                3 REFERENCED         BOOLEAN,
      151+    9932                3 DEFINED            BOOLEAN,
      152+    9933                3 COMPILER_CREATED   BOOLEAN,
      153+    9934                3 JUSTIFIED          BOOLEAN,
      154+    9935                3 GREATER_256K       BOOLEAN,
      155+    9936                3 ELEMENTARY         BOOLEAN,
      156+    9937                3 LENGTH_4096        BOOLEAN,
      157+    9938                3 COMP6_NONOP        BOOLEAN,
      158+    9939                3 REDEF_SUB          BOOLEAN,
      159+    9940                3 REDEF_OBJ          BOOLEAN,
      160+    9941                3 OCCURS_DEPENDING   BOOLEAN,
      161+    9942                3 ASTERISK_SUPRESS   BOOLEAN,
      162+    9943                3 RECORD_AREA        BOOLEAN,
      163+    9944                3 P                  BOOLEAN, /* P field in an EIS instr */
      164+    9945                3 GLOBAL             BOOLEAN,
      165+    9946                3 EXTERNAL           BOOLEAN,
      166+    9947                3 LINKAGE            BOOLEAN,
      167+    9948                3 ALLOCATED          BOOLEAN,
      168+    9949                3 RENAMED            BOOLEAN,
      169+    9950                3 DML_UWA            BOOLEAN,
      170+    9951                3 DML_TYPE           UBIN(3) UNAL,
      171+    9952                3 REPORT_ITEM        BOOLEAN,
      172+    9953                3 SUM_COUNTER        BOOLEAN,
      173+    9954                3 DML_RVA            BOOLEAN,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:262  
      174+    9955                3 KANJI              BOOLEAN,
      175+    9956                3 MOD_8              BOOLEAN,
      176+    9957                3 DIGIT              BOOLEAN,
      177+    9958                3 FAB_FIB_BUILT      BOOLEAN,
      178+    9959                3 NON_STORAGE        BOOLEAN,
      179+    9960                3 ARRAY_PRESET       BOOLEAN,
      180+    9961                3 MOD_2              BOOLEAN,
      181+    9962                3 CLASS              UBIN(3) UNAL,
      182+    9963                3 SUB_CLASS REDEF CLASS,
      183+    9964                  4 EDITED           BOOLEAN,
      184+    9965                  4 TYPE             UBIN(2) UNAL,
      185+    9966
      186+    9967            2 NEXT                   PTR,            /* SEARCH THREAD      */
      187+    9968
      188+    9969            2 LTS$                   PTR,
      189+    9970
      190+    9971            2 DNT$                   PTR,
      191+    9972
      192+    9973            2 QLT$                   PTR,
      193+    9974
      194+    9975            2 SEQ#,
      195+    9976              3 FD                   UBIN HALF HALIGNED,
      196+    9977              3 BD                   UBIN HALF HALIGNED,
      197+    9978
      198+    9979            2 PROC$                  PTR,
      199+    9980            2 LINK                   PTR;
      200+    9981
      201+    9982        %MEND;
      202+    9983
      203+    9984
      204+    9985    1   DCL 1 SCALAR BASED(ST$) ALIGNED,
      205+    9986              %SCALAR_ST_LAYOUT;
      206+   10067
      207+   10068    1   DCL 1 ARRAY BASED(ST$) ALIGNED,
      208+   10069              %SCALAR_ST_LAYOUT;
      209+   10150
      210+   10151    1   DCL 1 VARIABLE BASED(ST$) ALIGNED,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:263  
      211+   10152              %SCALAR_ST_LAYOUT;
      212+   10233
      213+   10234    1   DCL 1 FD BASED(ST$) ALIGNED,
      214+   10235              %SCALAR_ST_LAYOUT;
      215+   10316
      216+   10317    1   DCL 1 SD BASED(ST$) ALIGNED,
      217+   10318              %SCALAR_ST_LAYOUT;
      218+   10399
      219+   10400    1   DCL 1 CD BASED(ST$) ALIGNED,
      220+   10401              %SCALAR_ST_LAYOUT;
      221+   10482
      222+   10483    1   DCL 1 RD BASED(ST$) ALIGNED,
      223+   10484              %SCALAR_ST_LAYOUT;
      224+   10565
      225+   10566    1   DCL 1 DB BASED(ST$) ALIGNED,
      226+   10567              %SCALAR_ST_LAYOUT;
      227+   10648
      228+   10649
      229+   10650        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:264  
      230+   10651        %MACRO INIT_SCALAR ( @ST$   = ST$,
      231+   10652                             @ID    = %SCALAR,
      232+   10653                            @R     = %BLOCK_,
      233+   10654                            @COUNT = %DATA,
      234+   10655                            @SA    = 0,
      235+   10656                            @DESCL = 0,
      236+   10657                            @TYPE  =  ,
      237+   10658                            @LINE_NO  = COMCOM.CURRENT.LINE,
      238+   10659                            @ATTR  = FALSE,
      239+   10660                            @NEXT  = "ADDR(NIL)",
      240+   10661                            @LTS$  = "ADDR(NIL)",
      241+   10662                            @DNT$  =  ,
      242+   10663                            @QLT$  = "ADDR(NIL)",
      243+   10664                            @FD    = 0,
      244+   10665                            @BD    = %MAX_SEQ#,
      245+   10666                            @PROC$ = ,
      246+   10667                            @REFERENCED       = ,
      247+   10668                            @DEFINED          = ,
      248+   10669                            @JUSTIFIED        = ,
      249+   10670                            @GREATER_256K     = ,
      250+   10671                            @ELEMENTARY       = ,
      251+   10672                            @LENGTH_4096      = ,
      252+   10673                            @COMP6_NONOP      = ,
      253+   10674                            @COMPILER_CREATED = ,
      254+   10675                            @REDEF_SUB        = ,
      255+   10676                            @REDEF_OBJ        = ,
      256+   10677                            @ASTERISK_SUPRESS = ,
      257+   10678                            @RECORD_AREA      = ,
      258+   10679                            @OCCURS_DEPENDING = ,
      259+   10680                            @P                = ,
      260+   10681                            @EXTERNAL         = ,
      261+   10682                            @GLOBAL           = ,
      262+   10683                            @LINKAGE          = ,
      263+   10684                            @ALLOCATED        = ,
      264+   10685                            @KANJI            = ,
      265+   10686                            @DIGIT            = ,
      266+   10687                            @MOD_8            = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:265  
      267+   10688                            @DML_UWA          = ,
      268+   10689                            @DML_TYPE         = ,
      269+   10690                            @REPORT_ITEM      = ,
      270+   10691                            @SUM_COUNTER      = ,
      271+   10692                            @CLASS            = );
      272+   10693
      273+   10694               %LSET OK1 = (TEXTCHAR(@TYPE) ~= '');
      274+   10695               %LSET OK2 = (TEXTCHAR(@DNT$) ~= '');
      275+   10696
      276+   10697               DO;
      277+   10698
      278+   10699                 @ST$ -> SCALAR.ID    = @ID;
      279+   10700                 @ST$ -> SCALAR.R     = @R;
      280+   10701                 @ST$ -> SCALAR.COUNT = @COUNT;
      281+   10702                 @ST$ -> SCALAR.SA    = @SA;
      282+   10703                 @ST$ -> SCALAR.DESCL = @DESCL;
      283+   10704                 @ST$ -> SCALAR.LINE_NO  = @LINE_NO;
      284+   10705                 @ST$ -> SCALAR.ATTR  = @ATTR;
      285+   10706                 @ST$ -> SCALAR.NEXT  = @NEXT;
      286+   10707                 @ST$ -> SCALAR.LTS$  = @LTS$;
      287+   10708                 @ST$ -> SCALAR.QLT$  = @QLT$;
      288+   10709                 @ST$ -> SCALAR.SEQ#.FD = @FD;
      289+   10710                 @ST$ -> SCALAR.SEQ#.BD = @BD;
      290+   10711
      291+   10712                 %UPDATE_PROC_LINK (@TEMPLATE = SCALAR, @ST$ = @ST$, @PROC$ = @PROC$);
      292+   10713
      293+   10714                 %IF OK1;
      294+   10715                   @ST$ -> SCALAR.TYPE = @TYPE;
      295+   10716                 %ELSE;
      296+   10717                   %ERROR(~OK1,'Missing TYPE parameter',2);
      297+   10718                 %ENDIF;
      298+   10719
      299+   10720                 %IF OK2;
      300+   10721                   @ST$ -> SCALAR.DNT$ = @DNT$;
      301+   10722                 %ELSE;
      302+   10723                   %ERROR(~OK2,'Missing DNT parameter',2);
      303+   10724                 %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:266  
      304+   10725
      305+   10726                 %IF (TEXTCHAR(@REFERENCED) ~= '');
      306+   10727                   @ST$ -> SCALAR.B.REFERENCED = @REFERENCED;
      307+   10728                 %ENDIF;
      308+   10729                 %IF (TEXTCHAR(@DEFINED) ~= '');
      309+   10730                   @ST$ -> SCALAR.B.DEFINED    = @DEFINED;
      310+   10731                 %ENDIF;
      311+   10732                 %IF (TEXTCHAR(@JUSTIFIED) ~= '');
      312+   10733                   @ST$ -> SCALAR.B.JUSTIFIED  = @JUSTIFIED;
      313+   10734                 %ENDIF;
      314+   10735                 %IF (TEXTCHAR(@GREATER_256K) ~= '');
      315+   10736                   @ST$ -> SCALAR.B.GREATER_256K = @GREATER_256K;
      316+   10737                 %ENDIF;
      317+   10738                 %IF (TEXTCHAR(@ELEMENTARY) ~= '');
      318+   10739                   @ST$ -> SCALAR.B.ELEMENTARY = @ELEMENTARY;
      319+   10740                 %ENDIF;
      320+   10741                 %IF (TEXTCHAR(@LENGTH_4096) ~= '');
      321+   10742                   @ST$ -> SCALAR.B.LENGTH_4096= @LENGTH_4096;
      322+   10743                 %ENDIF;
      323+   10744                 %IF (TEXTCHAR(@COMP6_NONOP) ~= '');
      324+   10745                   @ST$ -> SCALAR.B.COMP6_NONOP= @COMP6_NONOP;
      325+   10746                 %ENDIF;
      326+   10747                 %IF (TEXTCHAR(@COMPILER_CREATED) ~= '');
      327+   10748                   @ST$ -> SCALAR.B.COMPILER_CREATED = @COMPILER_CREATED;
      328+   10749                 %ENDIF;
      329+   10750                 %IF (TEXTCHAR(@REDEF_SUB) ~= '');
      330+   10751                   @ST$ -> SCALAR.B.REDEF_SUB  = @REDEF_SUB;
      331+   10752                 %ENDIF;
      332+   10753                 %IF (TEXTCHAR(@REDEF_OBJ) ~= '');
      333+   10754                   @ST$ -> SCALAR.B.REDEF_OBJ  = @REDEF_OBJ;
      334+   10755                 %ENDIF;
      335+   10756                 %IF (TEXTCHAR(@OCCURS_DEPENDING) ~= '');
      336+   10757                   @ST$ -> SCALAR.B.OCCURS_DEPENDING = @OCCURS_DEPENDING;
      337+   10758                 %ENDIF;
      338+   10759                 %IF (TEXTCHAR(@ASTERISK_SUPRESS) ~= '');
      339+   10760                   @ST$ -> SCALAR.B.ASTERISK_SUPRESS = @ASTERISK_SUPRESS;
      340+   10761                 %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:267  
      341+   10762                 %IF (TEXTCHAR(@RECORD_AREA) ~= '');
      342+   10763                   @ST$ -> SCALAR.B.RECORD_AREA = @RECORD_AREA;
      343+   10764                 %ENDIF;
      344+   10765                 %IF (TEXTCHAR(@P) ~= '');
      345+   10766                   @ST$ -> SCALAR.B.P = @P;
      346+   10767                 %ENDIF;
      347+   10768                 %IF (TEXTCHAR(@EXTERNAL) ~= '');
      348+   10769                   @ST$ -> SCALAR.B.EXTERNAL = @EXTERNAL;
      349+   10770                 %ENDIF;
      350+   10771                 %IF (TEXTCHAR(@GLOBAL) ~= '');
      351+   10772                   @ST$ -> SCALAR.B.GLOBAL = @GLOBAL;
      352+   10773                 %ENDIF;
      353+   10774                 %IF (TEXTCHAR(@LINKAGE) ~= '');
      354+   10775                   @ST$ -> SCALAR.B.LINKAGE = @LINKAGE;
      355+   10776                 %ENDIF;
      356+   10777                 %IF (TEXTCHAR(@ALLOCATED) ~= '');
      357+   10778                   @ST$ -> SCALAR.B.ALLOCATED = @ALLOCATED;
      358+   10779                 %ENDIF;
      359+   10780                 %IF (TEXTCHAR(@REPORT_ITEM) ~= '');
      360+   10781                   @ST$ -> SCALAR.B.REPORT_ITEM = @REPORT_ITEM;
      361+   10782                 %ENDIF;
      362+   10783                 %IF (TEXTCHAR(@SUM_COUNTER) ~= '');
      363+   10784                   @ST$ -> SCALAR.B.SUM_COUNTER = @SUM_COUNTER;
      364+   10785                 %ENDIF;
      365+   10786                 %IF (TEXTCHAR(@CLASS) ~= '');
      366+   10787                   @ST$ -> SCALAR.B.CLASS      = @CLASS;
      367+   10788                 %ENDIF;
      368+   10789                 %IF (TEXTCHAR(@DML_TYPE) ~= '');
      369+   10790                   @ST$ -> SCALAR.B.DML_TYPE   = @DML_TYPE;
      370+   10791                 %ENDIF;
      371+   10792                 %IF (TEXTCHAR(@DML_UWA) ~= '');
      372+   10793                   @ST$ -> SCALAR.B.DML_UWA    = @DML_UWA;
      373+   10794                 %ENDIF;
      374+   10795                 %IF (TEXTCHAR(@KANJI) ~= '') ;
      375+   10796                   @ST$ -> SCALAR.B.KANJI      = @KANJI ;
      376+   10797                 %ENDIF ;
      377+   10798                 %IF (TEXTCHAR(@DIGIT) ~= '') ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:268  
      378+   10799                   @ST$ -> SCALAR.B.DIGIT      = @DIGIT ;
      379+   10800                 %ENDIF ;
      380+   10801                 %IF (TEXTCHAR(@MOD_8) ~= '') ;
      381+   10802                   @ST$ -> SCALAR.B.MOD_8      = @MOD_8 ;
      382+   10803                 %ENDIF ;
      383+   10804
      384+   10805               END;
      385+   10806        %MEND;
      386+   10807
      387+   10808
      388+   10809        %MACRO NEW_SCALAR ( @ST$ = ST$,
      389+   10810                            @R     = %BLOCK_,
      390+   10811                            @COUNT = %DATA,
      391+   10812                            @SA    = 0,
      392+   10813                            @DESCL = 0,
      393+   10814                            @TYPE  =  ,
      394+   10815                            @LINE_NO  = COMCOM.CURRENT.LINE,
      395+   10816                            @ATTR  = FALSE,
      396+   10817                            @NEXT  = "ADDR(NIL)",
      397+   10818                            @LTS$  = "ADDR(NIL)",
      398+   10819                            @DNT$  =  ,
      399+   10820                            @QLT$  = "ADDR(NIL)",
      400+   10821                            @FD    = 0,
      401+   10822                            @BD    = %MAX_SEQ#,
      402+   10823                            @PROC$ = ,
      403+   10824                            @REFERENCED       = ,
      404+   10825                            @DEFINED          = ,
      405+   10826                            @JUSTIFIED        = ,
      406+   10827                            @GREATER_256K     = ,
      407+   10828                            @ELEMENTARY       = ,
      408+   10829                            @LENGTH_4096      = ,
      409+   10830                            @COMP6_NONOP      = ,
      410+   10831                            @COMPILER_CREATED = ,
      411+   10832                            @REDEF_SUB        = ,
      412+   10833                            @REDEF_OBJ        = ,
      413+   10834                            @OCCURS_DEPENDING = ,
      414+   10835                            @ASTERISK_SUPRESS = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:269  
      415+   10836                            @RECORD_AREA      = ,
      416+   10837                            @P                = ,
      417+   10838                            @EXTERNAL         = ,
      418+   10839                            @GLOBAL           = ,
      419+   10840                            @LINKAGE          = ,
      420+   10841                            @ALLOCATED        = ,
      421+   10842                            @KANJI            = ,
      422+   10843                            @DIGIT            = ,
      423+   10844                            @MOD_8            = ,
      424+   10845                            @DML_UWA          = ,
      425+   10846                            @DML_TYPE         = ,
      426+   10847                            @REPORT_ITEM      = ,
      427+   10848                            @SUM_COUNTER      = ,
      428+   10849                            @CLASS            = );
      429+   10850          DO;
      430+   10851            %RESERVE_ST(POINTER = @ST$);
      431+   10852
      432+   10853            %INIT_SCALAR (@ST$                = @ST$,
      433+   10854                          @ID                 = %SCALAR,
      434+   10855                          @R                  = @R,
      435+   10856                          @COUNT              = @COUNT,
      436+   10857                          @SA                 = @SA,
      437+   10858                          @DESCL              = @DESCL,
      438+   10859                          @TYPE               = @TYPE,
      439+   10860                          @LINE_NO            = @LINE_NO,
      440+   10861                          @ATTR               = @ATTR,
      441+   10862                          @NEXT               = @NEXT,
      442+   10863                          @LTS$               = @LTS$,
      443+   10864                          @DNT$               = @DNT$,
      444+   10865                          @QLT$               = @QLT$,
      445+   10866                          @FD                 = @FD,
      446+   10867                          @BD                 = @BD,
      447+   10868                          @PROC$              = @PROC$,
      448+   10869                          @REFERENCED         = @REFERENCED,
      449+   10870                          @DEFINED            = @DEFINED,
      450+   10871                          @JUSTIFIED          = @JUSTIFIED,
      451+   10872                          @GREATER_256K       = @GREATER_256K,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:270  
      452+   10873                          @ELEMENTARY         = @ELEMENTARY,
      453+   10874                          @LENGTH_4096        = @LENGTH_4096,
      454+   10875                          @COMP6_NONOP        = @COMP6_NONOP,
      455+   10876                          @COMPILER_CREATED   = @COMPILER_CREATED,
      456+   10877                          @REDEF_SUB          = @REDEF_SUB,
      457+   10878                          @REDEF_OBJ          = @REDEF_OBJ,
      458+   10879                          @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
      459+   10880                          @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
      460+   10881                          @RECORD_AREA        = @RECORD_AREA,
      461+   10882                          @P                  = @P,
      462+   10883                          @EXTERNAL           = @EXTERNAL,
      463+   10884                          @GLOBAL             = @GLOBAL,
      464+   10885                          @LINKAGE            = @LINKAGE,
      465+   10886                          @ALLOCATED          = @ALLOCATED,
      466+   10887                          @KANJI              = @KANJI,
      467+   10888                          @DIGIT              = @DIGIT,
      468+   10889                          @MOD_8              = @MOD_8,
      469+   10890                          @DML_UWA            = @DML_UWA,
      470+   10891                          @DML_TYPE           = @DML_TYPE,
      471+   10892                          @REPORT_ITEM        = @REPORT_ITEM,
      472+   10893                          @SUM_COUNTER        = @SUM_COUNTER,
      473+   10894                          @CLASS              = @CLASS);
      474+   10895          END;
      475+   10896        %MEND;
      476+   10897
      477+   10898
      478+   10899        %MACRO NEW_ARRAY ( @ST$               = ST$,
      479+   10900                            @R                = %BLOCK_,
      480+   10901                            @COUNT            = %DATA,
      481+   10902                            @SA               = 0,
      482+   10903                            @DESCL            = 0,
      483+   10904                            @TYPE             =  ,
      484+   10905                            @LINE_NO             = COMCOM.CURRENT.LINE,
      485+   10906                            @ATTR             = FALSE,
      486+   10907                            @NEXT             = "ADDR(NIL)",
      487+   10908                            @LTS$             = "ADDR(NIL)",
      488+   10909                            @DNT$             =  ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:271  
      489+   10910                            @QLT$             = "ADDR(NIL)",
      490+   10911                            @FD               = 0,
      491+   10912                            @BD               = %MAX_SEQ#,
      492+   10913                            @PROC$            = ,
      493+   10914                            @REFERENCED       = ,
      494+   10915                            @DEFINED          = ,
      495+   10916                            @JUSTIFIED        = ,
      496+   10917                            @GREATER_256K     = ,
      497+   10918                            @ELEMENTARY       = ,
      498+   10919                            @LENGTH_4096      = ,
      499+   10920                            @COMP6_NONOP      = ,
      500+   10921                            @COMPILER_CREATED = ,
      501+   10922                            @REDEF_SUB        = ,
      502+   10923                            @REDEF_OBJ        = ,
      503+   10924                            @OCCURS_DEPENDING = ,
      504+   10925                            @ASTERISK_SUPRESS = ,
      505+   10926                            @RECORD_AREA      = ,
      506+   10927                            @P                = ,
      507+   10928                            @EXTERNAL         = ,
      508+   10929                            @GLOBAL           = ,
      509+   10930                            @LINKAGE          = ,
      510+   10931                           @ALLOCATED         = ,
      511+   10932                            @CLASS            = );
      512+   10933          DO;
      513+   10934            %RESERVE_ST(POINTER               = @ST$);
      514+   10935
      515+   10936            %INIT_SCALAR (@ST$                = @ST$,
      516+   10937                          @ID                 = %ARRAY,
      517+   10938                          @R                  = @R,
      518+   10939                          @COUNT              = @COUNT,
      519+   10940                          @SA                 = @SA,
      520+   10941                          @DESCL              = @DESCL,
      521+   10942                          @TYPE               = @TYPE,
      522+   10943                          @LINE_NO               = @LINE_NO,
      523+   10944                          @ATTR               = @ATTR,
      524+   10945                          @NEXT               = @NEXT,
      525+   10946                          @LTS$               = @LTS$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:272  
      526+   10947                          @DNT$               = @DNT$,
      527+   10948                          @QLT$               = @QLT$,
      528+   10949                          @FD                 = @FD,
      529+   10950                          @BD                 = @BD,
      530+   10951                          @PROC$              = @PROC$,
      531+   10952                          @REFERENCED         = @REFERENCED,
      532+   10953                          @DEFINED            = @DEFINED,
      533+   10954                          @JUSTIFIED          = @JUSTIFIED,
      534+   10955                          @GREATER_256K       = @GREATER_256K,
      535+   10956                          @ELEMENTARY         = @ELEMENTARY,
      536+   10957                          @LENGTH_4096        = @LENGTH_4096,
      537+   10958                          @COMP6_NONOP        = @COMP6_NONOP,
      538+   10959                          @COMPILER_CREATED   = @COMPILER_CREATED,
      539+   10960                          @REDEF_SUB          = @REDEF_SUB,
      540+   10961                          @REDEF_OBJ          = @REDEF_OBJ,
      541+   10962                          @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
      542+   10963                          @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
      543+   10964                          @RECORD_AREA        = @RECORD_AREA,
      544+   10965                          @P                  = @P,
      545+   10966                          @EXTERNAL           = @EXTERNAL,
      546+   10967                          @GLOBAL             = @GLOBAL,
      547+   10968                          @LINKAGE            = @LINKAGE,
      548+   10969                          @ALLOCATED          = @ALLOCATED,
      549+   10970                          @CLASS              = @CLASS);
      550+   10971          END;
      551+   10972        %MEND;
      552+   10973
      553+   10974
      554+   10975        %MACRO NEW_RD     ( @ST$ = ST$,
      555+   10976                            @R     = %BLOCK_,
      556+   10977                            @COUNT = %DATA,
      557+   10978                            @SA    = 0,
      558+   10979                            @DESCL = 0,
      559+   10980                            @TYPE  =  ,
      560+   10981                            @LINE_NO  = COMCOM.CURRENT.LINE,
      561+   10982                            @ATTR  = FALSE,
      562+   10983                            @NEXT  = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:273  
      563+   10984                            @LTS$  = "ADDR(NIL)",
      564+   10985                            @DNT$  =  ,
      565+   10986                            @QLT$  = "ADDR(NIL)",
      566+   10987                            @FD    = 0,
      567+   10988                            @BD    = %MAX_SEQ#,
      568+   10989                            @PROC$ = ,
      569+   10990                            @REFERENCED       = ,
      570+   10991                            @DEFINED          = ,
      571+   10992                            @JUSTIFIED        = ,
      572+   10993                            @GREATER_256K     = ,
      573+   10994                            @ELEMENTARY       = ,
      574+   10995                            @LENGTH_4096      = ,
      575+   10996                            @COMP6_NONOP      = ,
      576+   10997                            @COMPILER_CREATED = ,
      577+   10998                            @REDEF_SUB        = ,
      578+   10999                            @REDEF_OBJ        = ,
      579+   11000                            @OCCURS_DEPENDING = ,
      580+   11001                            @ASTERISK_SUPRESS = ,
      581+   11002                            @RECORD_AREA      = ,
      582+   11003                            @P                = ,
      583+   11004                            @EXTERNAL         = ,
      584+   11005                            @GLOBAL           = ,
      585+   11006                            @LINKAGE          = ,
      586+   11007                            @ALLOCATED        = ,
      587+   11008                            @CLASS            = );
      588+   11009          DO;
      589+   11010            %RESERVE_ST(POINTER = @ST$);
      590+   11011
      591+   11012            %INIT_SCALAR (@ST$                = @ST$,
      592+   11013                          @ID                 = %RD,
      593+   11014                          @R                  = @R,
      594+   11015                          @COUNT              = @COUNT,
      595+   11016                          @SA                 = @SA,
      596+   11017                          @DESCL              = @DESCL,
      597+   11018                          @TYPE               = @TYPE,
      598+   11019                          @LINE_NO               = @LINE_NO,
      599+   11020                          @ATTR               = @ATTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:274  
      600+   11021                          @NEXT               = @NEXT,
      601+   11022                          @LTS$               = @LTS$,
      602+   11023                          @DNT$               = @DNT$,
      603+   11024                          @QLT$               = @QLT$,
      604+   11025                          @FD                 = @FD,
      605+   11026                          @BD                 = @BD,
      606+   11027                          @PROC$              = @PROC$,
      607+   11028                          @REFERENCED         = @REFERENCED,
      608+   11029                          @DEFINED            = @DEFINED,
      609+   11030                          @JUSTIFIED          = @JUSTIFIED,
      610+   11031                          @GREATER_256K       = @GREATER_256K,
      611+   11032                          @ELEMENTARY         = @ELEMENTARY,
      612+   11033                          @LENGTH_4096        = @LENGTH_4096,
      613+   11034                          @COMP6_NONOP        = @COMP6_NONOP,
      614+   11035                          @COMPILER_CREATED   = @COMPILER_CREATED,
      615+   11036                          @REDEF_SUB          = @REDEF_SUB,
      616+   11037                          @REDEF_OBJ          = @REDEF_OBJ,
      617+   11038                          @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
      618+   11039                          @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
      619+   11040                          @RECORD_AREA        = @RECORD_AREA,
      620+   11041                          @P                  = @P,
      621+   11042                          @EXTERNAL           = @EXTERNAL,
      622+   11043                          @GLOBAL             = @GLOBAL,
      623+   11044                          @LINKAGE            = @LINKAGE,
      624+   11045                          @ALLOCATED          = @ALLOCATED,
      625+   11046                          @CLASS              = @CLASS);
      626+   11047          END;
      627+   11048        %MEND;
      628+   11049
      629+   11050
      630+   11051
      631+   11052        %MACRO NEW_FD     ( @ST$ = ST$,
      632+   11053                            @R     = %BLOCK_,
      633+   11054                            @COUNT = %DATA,
      634+   11055                            @SA    = 0,
      635+   11056                            @DESCL = 0,
      636+   11057                            @TYPE  =  ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:275  
      637+   11058                            @LINE_NO  = COMCOM.CURRENT.LINE,
      638+   11059                            @ATTR  = FALSE,
      639+   11060                            @NEXT  = "ADDR(NIL)",
      640+   11061                            @LTS$  = "ADDR(NIL)",
      641+   11062                            @DNT$  =  ,
      642+   11063                            @QLT$  = "ADDR(NIL)",
      643+   11064                            @FD    = 0,
      644+   11065                            @BD    = %MAX_SEQ#,
      645+   11066                            @PROC$ = ,
      646+   11067                            @REFERENCED       = ,
      647+   11068                            @DEFINED          = ,
      648+   11069                            @JUSTIFIED        = ,
      649+   11070                            @GREATER_256K     = ,
      650+   11071                            @ELEMENTARY       = ,
      651+   11072                            @LENGTH_4096      = ,
      652+   11073                            @COMP6_NONOP      = ,
      653+   11074                            @COMPILER_CREATED = ,
      654+   11075                            @REDEF_SUB        = ,
      655+   11076                            @REDEF_OBJ        = ,
      656+   11077                            @OCCURS_DEPENDING = ,
      657+   11078                            @ASTERISK_SUPRESS = ,
      658+   11079                            @RECORD_AREA      = ,
      659+   11080                            @P                = ,
      660+   11081                            @EXTERNAL         = ,
      661+   11082                            @GLOBAL           = ,
      662+   11083                            @LINKAGE          = ,
      663+   11084                           @ALLOCATED         = ,
      664+   11085                            @CLASS            = );
      665+   11086          DO;
      666+   11087            %RESERVE_ST(POINTER = @ST$);
      667+   11088
      668+   11089            %INIT_SCALAR (@ST$                = @ST$,
      669+   11090                          @ID                 = %FD,
      670+   11091                          @R                  = @R,
      671+   11092                          @COUNT              = @COUNT,
      672+   11093                          @SA                 = @SA,
      673+   11094                          @DESCL              = @DESCL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:276  
      674+   11095                          @TYPE               = @TYPE,
      675+   11096                          @LINE_NO               = @LINE_NO,
      676+   11097                          @ATTR               = @ATTR,
      677+   11098                          @NEXT               = @NEXT,
      678+   11099                          @LTS$               = @LTS$,
      679+   11100                          @DNT$               = @DNT$,
      680+   11101                          @QLT$               = @QLT$,
      681+   11102                          @FD                 = @FD,
      682+   11103                          @BD                 = @BD,
      683+   11104                          @PROC$              = @PROC$,
      684+   11105                          @REFERENCED         = @REFERENCED,
      685+   11106                          @DEFINED            = @DEFINED,
      686+   11107                          @JUSTIFIED          = @JUSTIFIED,
      687+   11108                          @GREATER_256K       = @GREATER_256K,
      688+   11109                          @ELEMENTARY         = @ELEMENTARY,
      689+   11110                          @LENGTH_4096        = @LENGTH_4096,
      690+   11111                          @COMP6_NONOP        = @COMP6_NONOP,
      691+   11112                          @COMPILER_CREATED   = @COMPILER_CREATED,
      692+   11113                          @REDEF_SUB          = @REDEF_SUB,
      693+   11114                          @REDEF_OBJ          = @REDEF_OBJ,
      694+   11115                          @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
      695+   11116                          @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
      696+   11117                          @RECORD_AREA        = @RECORD_AREA,
      697+   11118                          @P                  = @P,
      698+   11119                          @EXTERNAL           = @EXTERNAL,
      699+   11120                          @GLOBAL             = @GLOBAL,
      700+   11121                          @LINKAGE            = @LINKAGE,
      701+   11122                          @ALLOCATED          = @ALLOCATED,
      702+   11123                          @CLASS              = @CLASS);
      703+   11124          END;
      704+   11125        %MEND;
      705+   11126        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:277  
      706+   11127    1   DCL 1 DML_ITEM BASED(ST$) ALIGNED,
      707+   11128
      708+   11129    1       2 ID                     UBIN (18) UNAL, /* Operation code    */
      709+   11130    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      710+   11131    1       2 COUNT                  UBIN  (9) UNAL, /* Block/symref #     */
      711+   11132
      712+   11133    1       2 INTERNAL_NAME          UBIN (36) UNAL, /* DML internal name  */
      713+   11134
      714+   11135    1       2 TYPE                   UBIN HALF UNAL, /* %TYG               */
      715+   11136    1       2 LINE_NO                UBIN HALF UNAL,
      716+   11137
      717+   11138    1       2 ATTR                   BIT (36)  UNAL,
      718+   11139    1       2 B REDEF ATTR,
      719+   11140    1         3 *         UBIN(14)  UNAL,
      720+   11141    1         3 GLOBAL       BOOLEAN,
      721+   11142    1         3 EXTERNAL     BOOLEAN,
      722+   11143    1         3 *            UBIN(9)  UNAL,
      723+   11144    1         3 DML_RVA   BOOLEAN,
      724+   11145    1         3 TEMP         BOOLEAN,
      725+   11146    1         3 *            BOOLEAN,
      726+   11147    1         3 INDEXED_REALM BOOLEAN,
      727+   11148    1         3 *         UBIN(7)  UNAL,
      728+   11149
      729+   11150    1       2 NEXT                   PTR,
      730+   11151    1       2 LTS$                   PTR,
      731+   11152    1       2 DNT$                   PTR,
      732+   11153    1       2 QLT$                   PTR,
      733+   11154    1       2 SEQ#,
      734+   11155    1         3 FD                   UBIN HALF HALIGNED,
      735+   11156    1         3 BD                   UBIN HALF HALIGNED,
      736+   11157    1       2 PROC$                  PTR,
      737+   11158    1       2 LINK                   PTR;
      738+   11159
      739+   11160
      740+   11161        %MACRO NEW_DML_ITEM  (  @ST$   = ST$,
      741+   11162                                @ID    =    ,
      742+   11163                                @TEMP  =  ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:278  
      743+   11164                                @INDEXED_REALM = FALSE,
      744+   11165                                @R    = %BLOCK_,
      745+   11166                                @COUNT = %DATA,
      746+   11167                                @INT_NAME = ,
      747+   11168                                @TYPE  = %TYG,
      748+   11169                                @LINE_NO  = COMCOM.CURRENT.LINE,
      749+   11170                                @ATTR  = FALSE,
      750+   11171                                @NEXT  = "ADDR(NIL)",
      751+   11172                                @LTS$  = "ADDR(NIL)",
      752+   11173                                @DNT$  =    ,
      753+   11174                                @QLT$  = "ADDR(NIL)",
      754+   11175                                @FD    = 0,
      755+   11176                                @BD    = %MAX_SEQ#,
      756+   11177                                @PROC$ =    );
      757+   11178
      758+   11179            DO;
      759+   11180                %RESERVE_ST(POINTER = @ST$);
      760+   11181
      761+   11182                @ST$ -> DML_ITEM.ID             = @ID;
      762+   11183                @ST$ -> DML_ITEM.R              = @R;
      763+   11184                @ST$ -> DML_ITEM.COUNT          = @COUNT;
      764+   11185                @ST$ -> DML_ITEM.INTERNAL_NAME  = @INT_NAME;
      765+   11186                @ST$ -> DML_ITEM.ATTR           = @ATTR;
      766+   11187                @ST$ -> DML_ITEM.B.TEMP         = @TEMP;
      767+   11188                @ST$ -> DML_ITEM.B.GLOBAL       = %TRUE;
      768+   11189                @ST$ -> DML_ITEM.B.EXTERNAL     = %TRUE;
      769+   11190                @ST$ -> DML_ITEM.B.INDEXED_REALM = @INDEXED_REALM;
      770+   11191                @ST$ -> DML_ITEM.TYPE           = @TYPE;
      771+   11192                @ST$ -> DML_ITEM.LINE_NO        = @LINE_NO;
      772+   11193                @ST$ -> DML_ITEM.NEXT           = @NEXT;
      773+   11194                @ST$ -> DML_ITEM.LTS$           = @LTS$;
      774+   11195                @ST$ -> DML_ITEM.DNT$           = @DNT$;
      775+   11196                @ST$ -> DML_ITEM.QLT$           = @QLT$;
      776+   11197                @ST$ -> DML_ITEM.SEQ#.FD        = @FD;
      777+   11198                @ST$ -> DML_ITEM.SEQ#.BD        = @BD;
      778+   11199
      779+   11200                %UPDATE_PROC_LINK(@TEMPLATE = DML_ITEM, @ST$ = @ST$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:279  
      780+   11201                                                        @PROC$ = @PROC$);
      781+   11202
      782+   11203            END;
      783+   11204        %MEND;
      784+   11205        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:280  
      785+   11206    1   DCL 1 CONST BASED(ST$) ALIGNED,
      786+   11207
      787+   11208    1       2 ID                     UBIN (18) UNAL, /* Operation code */
      788+   11209    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      789+   11210    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
      790+   11211
      791+   11212            %DESCRIPTOR(LVL=2);
      792+   11240
      793+   11241    1       2 TYPE                   UBIN HALF HALIGNED,
      794+   11242    1       2 *                      UBIN HALF HALIGNED,
      795+   11243
      796+   11244    1       2 ATTR BIT(36),
      797+   11245    1       2 B REDEF ATTR,
      798+   11246    1         3 LONG_CONSTANT        BOOLEAN,
      799+   11247    1         3 TWO_WORD             BOOLEAN,
      800+   11248    1         3 MOD_2                BOOLEAN,
      801+   11249    1         3 ALL                  BOOLEAN,
      802+   11250    1         3 ALLOCATED            BOOLEAN,
      803+   11251    1         3 * (0: 7)             BOOLEAN,
      804+   11252    1         3 P                    BOOLEAN,
      805+   11253    1         3 * (0:11)             BOOLEAN,
      806+   11254    1         3 KANJI                BOOLEAN,
      807+   11255    1         3 * (0: 8)             BOOLEAN,
      808+   11256
      809+   11257    1       2 NEXT                   PTR,
      810+   11258
      811+   11259    1       2 ALLOC_LINK             PTR,            /* Generator use only */
      812+   11260
      813+   11261    1       2 DNT$                   PTR,
      814+   11262
      815+   11263    1       2 *                      PTR,            /* Filler */
      816+   11264
      817+   11265    1       2 CONSTI UNAL,
      818+   11266    1          3 WORD1               SBIN WORD,      /* Fullword constant */
      819+   11267    1          3 WORD2               SBIN WORD,
      820+   11268
      821+   11269    1        2 CONSTS REDEF CONSTI,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:281  
      822+   11270    1          3 UPPER               SBIN(18) UNAL,
      823+   11271    1          3 LOWER               SBIN(18) UNAL,
      824+   11272    1          3 *                   UBIN WORD,
      825+   11273
      826+   11274    1        2 CONSTU REDEF CONSTI,
      827+   11275    1          3 UPPER               UBIN(18) UNAL,
      828+   11276    1          3 LOWER               UBIN(18) UNAL,
      829+   11277    1          3 *                   UBIN WORD,
      830+   11278
      831+   11279    1        2 CONST$ REDEF CONSTI,
      832+   11280    1          3 PTR$                PTR,
      833+   11281    1          3 *                   UBIN WORD,
      834+   11282
      835+   11283    1        2 CONSTA REDEF CONSTI
      836+   11284    1                       CHAR(8) UNAL,
      837+   11285
      838+   11286    1        2 CONSTR REDEF CONSTI,
      839+   11287    1          3 EXP                 SBIN(8) UNAL,
      840+   11288    1          3 MANTISSA            SBIN(28) UNAL,
      841+   11289    1          3 *                   UBIN WORD,
      842+   11290
      843+   11291    1        2 CONSTD REDEF CONSTI,
      844+   11292    1          3 ARG_COUNT           SBIN(18) UNAL,
      845+   11293    1          3 DESC_COUNT          SBIN(18) UNAL,
      846+   11294    1          3 DESC           UNAL,
      847+   11295    1            4 TYPE              UBIN(6) UNAL,
      848+   11296    1            4 *                 UBIN(6) UNAL,
      849+   11297    1            4 ADSC         UNAL,
      850+   11298    1              5 LENGTH          SBIN(24) UNAL,
      851+   11299    1            4 NDSC         REDEF ADSC,
      852+   11300    1              5 SCALE_FACTOR    SBIN(12) UNAL,
      853+   11301    1              5 LENGTH          SBIN(12) UNAL,
      854+   11302
      855+   11303    1        2 CONSTB (0:11) REDEF CONSTI BIT(6),
      856+   11304
      857+   11305    1       2 *                      PTR; /* Link field not applicable */
      858+   11306
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:282  
      859+   11307
      860+   11308        %MACRO NEW_CONST ( @ST$                = ST$,
      861+   11309                           @R                  = %PROGRAM,
      862+   11310                           @COUNT              = O1COM.CURRENT_SEGMENTC,
      863+   11311                           @TYPE               = %TYI,
      864+   11312                           @ATTR               = FALSE,
      865+   11313                           @NEXT               = "ADDR(NIL)",
      866+   11314                           @ALLOC_LINK         = "ADDR(NIL)",
      867+   11315                           @DNT$               = "ADDR(NIL)",
      868+   11316                           @LONG_CONSTANT      = ,
      869+   11317                           @TWO_WORD           = ,
      870+   11318                           @MOD_2              = ,
      871+   11319                           @ALL                = ,
      872+   11320                           @P                  = ,
      873+   11321                           @KANJI              = ,
      874+   11322                           @ALLOCATED          = );
      875+   11323          DO;
      876+   11324            %RESERVE_ST (POINTER               = @ST$);
      877+   11325
      878+   11326            @ST$ -> CONST.ID                   = %CONST;
      879+   11327            @ST$ -> CONST.R                    = @R;
      880+   11328            @ST$ -> CONST.COUNT                = @COUNT;
      881+   11329            @ST$ -> CONST.TYPE                 = @TYPE;
      882+   11330            @ST$ -> CONST.ATTR                 = @ATTR;
      883+   11331            @ST$ -> CONST.NEXT                 = @NEXT;
      884+   11332            @ST$ -> CONST.ALLOC_LINK           = @ALLOC_LINK;
      885+   11333            @ST$ -> CONST.DNT$                 = @DNT$;
      886+   11334
      887+   11335            %IF (TEXTCHAR(@LONG_CONSTANT) ~= '');
      888+   11336              @ST$ -> CONST.B.LONG_CONSTANT    = @LONG_CONSTANT;
      889+   11337            %ENDIF;
      890+   11338            %IF (TEXTCHAR(@TWO_WORD) ~= '');
      891+   11339              @ST$ -> CONST.B.TWO_WORD         = @TWO_WORD;
      892+   11340            %ENDIF;
      893+   11341            %IF (TEXTCHAR(@MOD_2) ~= '');
      894+   11342              @ST$ -> CONST.B.MOD_2            = @MOD_2;
      895+   11343            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:283  
      896+   11344            %IF (TEXTCHAR(@ALL) ~= '');
      897+   11345              @ST$ -> CONST.B.ALL              = @ALL;
      898+   11346            %ENDIF;
      899+   11347            %IF (TEXTCHAR(@KANJI) ~= '');
      900+   11348              @ST$ -> CONST.B.KANJI            = @KANJI;
      901+   11349            %ENDIF;
      902+   11350            %IF (TEXTCHAR(@P) ~= '');
      903+   11351              @ST$ -> CONST.B.P                = @P;
      904+   11352            %ENDIF;
      905+   11353            %IF (TEXTCHAR(@ALLOCATED) ~= '');
      906+   11354              @ST$ -> CONST.B.ALLOCATED        = @ALLOCATED;
      907+   11355            %ENDIF;
      908+   11356          END;
      909+   11357        %MEND;
      910+   11358        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:284  
      911+   11359        %MACRO PARA_ST_LAYOUT;
      912+   11360
      913+   11361            2 ID                     UBIN (18) UNAL, /* Operation code */
      914+   11362            2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      915+   11363            2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
      916+   11364
      917+   11365            2 DESC,
      918+   11366              %DESCRIPTOR(LVL=3);
      919+   11367            2 P_END$ REDEF DESC      PTR,
      920+   11368            2 P_START$ REDEF DESC    PTR,
      921+   11369            2 XR_TEMP REDEF DESC     PTR,
      922+   11370
      923+   11371            2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
      924+   11372            2 LINE_NO                UBIN HALF UNAL,
      925+   11373
      926+   11374            2 ATTR                   BIT  (36),      /* ATTRIBUTE BITS     */
      927+   11375            2 B REDEF ATTR,
      928+   11376              3 REFERENCED           BOOLEAN,
      929+   11377              3 DEFINED              BOOLEAN,
      930+   11378              3 COMPILER_CREATED     BOOLEAN,
      931+   11379              3 GOTO_LABEL           BOOLEAN,
      932+   11380              3 DUPLICATE            BOOLEAN,
      933+   11381              3 ONE_REF              BOOLEAN,
      934+   11382              3 PHASE_2              BOOLEAN,
      935+   11383              3 FALL_THRU            BOOLEAN,
      936+   11384              3 INIT_PROC            BOOLEAN,
      937+   11385              3 PFORM_START          BOOLEAN,
      938+   11386              3 PFORM_END            BOOLEAN,
      939+   11387              3 PFORM_NESTED         BOOLEAN,
      940+   11388              3 ALTER_CHECK          BOOLEAN,
      941+   11389              3 COBOL_74_PFORM       BOOLEAN,
      942+   11390              3 PFORM_74_END         BOOLEAN,
      943+   11391              3 GO_VECTOR_START      BOOLEAN,
      944+   11392              3 ENTRY_POINT          BOOLEAN,
      945+   11393              3 INTERIOR_PFORM_LBL   BOOLEAN,
      946+   11394              3 DATA_REF             BOOLEAN,
      947+   11395              3 BACKWARD_PFORM       BOOLEAN,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:285  
      948+   11396              3 ALLOCATED            BOOLEAN,
      949+   11397              3 ON_SIZE_ERROR        BOOLEAN,
      950+   11398              3 GO_ALTERED           BOOLEAN,
      951+   11399              3 USE_BASE_POINTER     BOOLEAN,
      952+   11400              3 USE_GLOBAL           BOOLEAN,
      953+   11401              3 USE_ALREADY_FLAGGED  BOOLEAN,
      954+   11402              3 USE_PROC             BOOLEAN,
      955+   11403              3 PFORM_END_LBL        BOOLEAN,
      956+   11404              3 EXIT_PROG_LABEL      BOOLEAN,
      957+   11405              3 LABEL_AFTER_USE      BOOLEAN,
      958+   11406              3 * (0:5)              BOOLEAN,
      959+   11407
      960+   11408            2 NEXT                   PTR,            /* SEARCH THREAD      */
      961+   11409
      962+   11410            2 POINTER$                PTR,
      963+   11411
      964+   11412            2 DNT$                   PTR,
      965+   11413
      966+   11414            2 SECTION$               PTR,
      967+   11415            2 SEGMENT$ REDEF SECTION$ PTR,
      968+   11416
      969+   11417            2 PREV_ILS$              PTR,
      970+   11418
      971+   11419            2 PROC$                  PTR,
      972+   11420            2 LINK                   PTR;
      973+   11421
      974+   11422        %MEND;
      975+   11423
      976+   11424
      977+   11425    1   DCL 1 PARA BASED(ST$) ALIGNED,
      978+   11426              %PARA_ST_LAYOUT;
      979+   11506
      980+   11507    1   DCL 1 SECTION BASED(ST$) ALIGNED,
      981+   11508              %PARA_ST_LAYOUT;
      982+   11588
      983+   11589    1   DCL 1 LABEL BASED(ST$) ALIGNED,
      984+   11590            %PARA_ST_LAYOUT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:286  
      985+   11670
      986+   11671
      987+   11672        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:287  
      988+   11673        %MACRO INIT_PARA (@ST$                 = ST$,
      989+   11674                          @ID                  = %PARA,
      990+   11675                          @R                   = %PROGRAM,
      991+   11676                          @COUNT               = %PROC,
      992+   11677                          @P_END$              = "ADDR(NIL)",
      993+   11678                          @TYPE                = %TYI,
      994+   11679                          @LINE_NO             = COMCOM.CURRENT.LINE,
      995+   11680                          @ATTR                = FALSE,
      996+   11681                          @NEXT                = "ADDR(NIL)",
      997+   11682                          @POINTER$            = "ADDR(NIL)",
      998+   11683                          @DNT$                = "ADDR(NIL)",
      999+   11684                          @SECTION$            = ,
     1000+   11685                          @SEGMENT$            = ,
     1001+   11686                          @PROC$               = ,
     1002+   11687                          @PREV_ILS$           = "ADDR(NIL)",
     1003+   11688                          @REFERENCED          = ,
     1004+   11689                          @DEFINED             = ,
     1005+   11690                          @COMPILER_CREATED    = ,
     1006+   11691                          @GOTO_LABEL          = ,
     1007+   11692                          @DUPLICATE           = ,
     1008+   11693                          @ONE_REF             = ,
     1009+   11694                          @PHASE_2             = ,
     1010+   11695                          @FALL_THRU           = ,
     1011+   11696                          @INIT_PROC           = ,
     1012+   11697                          @PFORM_START         = ,
     1013+   11698                          @PFORM_END           = ,
     1014+   11699                          @PFORM_NESTED        = ,
     1015+   11700                          @ALTER_CHECK         = ,
     1016+   11701                          @COBOL_74_PFORM      = ,
     1017+   11702                          @PFORM_74_END        = ,
     1018+   11703                          @GO_VECTOR_START     = ,
     1019+   11704                          @ENTRY_POINT         = ,
     1020+   11705                          @INTERIOR_PFORM_LBL  = ,
     1021+   11706                          @DATA_REF            = ,
     1022+   11707                          @BACKWARD_PFORM      = ,
     1023+   11708                          @ALLOCATED           = ,
     1024+   11709                          @ON_SIZE_ERROR       = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:288  
     1025+   11710                          @GO_ALTERED          = ,
     1026+   11711                          @USE_BASE_POINTER    = ,
     1027+   11712                          @USE_GLOBAL          = ,
     1028+   11713                          @USE_ALREADY_FLAGGED = ,
     1029+   11714                          @USE_PROC            = ,
     1030+   11715                          @PFORM_END_LBL       = ,
     1031+   11716                          @LABEL_AFTER_USE     = ,
     1032+   11717                          @EXIT_PROG_LABEL     = );
     1033+   11718          DO;
     1034+   11719            @ST$ -> PARA.ID                    = @ID;
     1035+   11720            @ST$ -> PARA.R                     = @R;
     1036+   11721            @ST$ -> PARA.COUNT                 = @COUNT;
     1037+   11722            @ST$ -> PARA.P_END$                = @P_END$;
     1038+   11723            @ST$ -> PARA.TYPE                  = @TYPE;
     1039+   11724            @ST$ -> PARA.LINE_NO               = @LINE_NO;
     1040+   11725            @ST$ -> PARA.ATTR                  = @ATTR;
     1041+   11726            @ST$ -> PARA.NEXT                  = @NEXT;
     1042+   11727            @ST$ -> PARA.POINTER$               = @POINTER$;
     1043+   11728            @ST$ -> PARA.DNT$                  = @DNT$;
     1044+   11729
     1045+   11730            %IF (TEXTCHAR(@SECTION$) ~= '');
     1046+   11731             @ST$ -> PARA.SECTION$             = @SECTION$;
     1047+   11732            %ELSEIF (TEXTCHAR(@SEGMENT$) ~= '');
     1048+   11733             @ST$ -> PARA.SEGMENT$             = @SEGMENT$;
     1049+   11734            %ELSE;
     1050+   11735             @ST$ -> PARA.SECTION$             = ADDR(NIL);
     1051+   11736            %ENDIF;
     1052+   11737
     1053+   11738
     1054+   11739            %UPDATE_PROC_LINK (@TEMPLATE = PARA, @ST$ = @ST$, @PROC$ = @PROC$);
     1055+   11740            @ST$ -> PARA.PREV_ILS$             = @PREV_ILS$;
     1056+   11741
     1057+   11742            %IF (TEXTCHAR(@REFERENCED) ~= '');
     1058+   11743              @ST$ -> PARA.B.REFERENCED        = @REFERENCED;
     1059+   11744            %ENDIF;
     1060+   11745            %IF (TEXTCHAR(@DEFINED) ~= '');
     1061+   11746              @ST$ -> PARA.B.DEFINED           = @DEFINED;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:289  
     1062+   11747            %ENDIF;
     1063+   11748            %IF (TEXTCHAR(@COMPILER_CREATED) ~= '');
     1064+   11749              @ST$ -> PARA.B.COMPILER_CREATED  = @COMPILER_CREATED;
     1065+   11750            %ENDIF;
     1066+   11751            %IF (TEXTCHAR(@GOTO_LABEL) ~= '');
     1067+   11752              @ST$ -> PARA.B.GOTO_LABEL        = @GOTO_LABEL;
     1068+   11753            %ENDIF;
     1069+   11754            %IF (TEXTCHAR(@DUPLICATE) ~= '');
     1070+   11755              @ST$ -> PARA.B.DUPLICATE         = @DUPLICATE;
     1071+   11756            %ENDIF;
     1072+   11757            %IF (TEXTCHAR(@ONE_REF) ~= '');
     1073+   11758              @ST$ -> PARA.B.ONE_REF           = @ONE_REF;
     1074+   11759            %ENDIF;
     1075+   11760            %IF (TEXTCHAR(@PHASE_2) ~= '');
     1076+   11761              @ST$ -> PARA.B.PHASE_2           = @PHASE_2;
     1077+   11762            %ENDIF;
     1078+   11763            %IF (TEXTCHAR(@FALL_THRU) ~= '');
     1079+   11764              @ST$ -> PARA.B.FALL_THRU         = @FALL_THRU;
     1080+   11765            %ENDIF;
     1081+   11766            %IF (TEXTCHAR(@INIT_PROC) ~= '');
     1082+   11767              @ST$ -> PARA.B.INIT_PROC         = @INIT_PROC;
     1083+   11768            %ENDIF;
     1084+   11769            %IF (TEXTCHAR(@PFORM_START) ~= '');
     1085+   11770              @ST$ -> PARA.B.PFORM_START       = @PFORM_START;
     1086+   11771            %ENDIF;
     1087+   11772            %IF (TEXTCHAR(@PFORM_END) ~= '');
     1088+   11773              @ST$ -> PARA.B.PFORM_END         = @PFORM_END;
     1089+   11774            %ENDIF;
     1090+   11775            %IF (TEXTCHAR(@PFORM_NESTED) ~= '');
     1091+   11776              @ST$ -> PARA.B.PFORM_NESTED      = @PFORM_NESTED;
     1092+   11777            %ENDIF;
     1093+   11778            %IF (TEXTCHAR(@ALTER_CHECK) ~= '');
     1094+   11779              @ST$ -> PARA.B.ALTER_CHECK       = @ALTER_CHECK;
     1095+   11780            %ENDIF;
     1096+   11781            %IF (TEXTCHAR(@COBOL_74_PFORM) ~= '');
     1097+   11782              @ST$ -> PARA.B.COBOL_74_PFORM    = @COBOL_74_PFORM;
     1098+   11783            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:290  
     1099+   11784            %IF (TEXTCHAR(@PFORM_74_END) ~= '');
     1100+   11785              @ST$ -> PARA.B.PFORM_74_END      = @PFORM_74_END;
     1101+   11786            %ENDIF;
     1102+   11787            %IF (TEXTCHAR(@GO_VECTOR_START) ~= '');
     1103+   11788              @ST$ -> PARA.B.GO_VECTOR_START   = @GO_VECTOR_START;
     1104+   11789            %ENDIF;
     1105+   11790             %IF (TEXTCHAR(@ENTRY_POINT) ~= '');
     1106+   11791               @ST$ -> PARA.B.ENTRY_POINT      = @ENTRY_POINT;
     1107+   11792             %ENDIF;
     1108+   11793            %IF (TEXTCHAR(@INTERIOR_PFORM_LBL) ~= '');
     1109+   11794              @ST$ -> PARA.B.INTERIOR_PFORM_LBL = @INTERIOR_PFORM_LBL;
     1110+   11795            %ENDIF;
     1111+   11796            %IF (TEXTCHAR(@DATA_REF) ~= '');
     1112+   11797              @ST$ -> PARA.B.DATA_REF          = @DATA_REF;
     1113+   11798            %ENDIF;
     1114+   11799            %IF (TEXTCHAR(@BACKWARD_PFORM) ~= '');
     1115+   11800              @ST$ -> PARA.B.BACKWARD_PFORM    = @BACKWARD_PFORM;
     1116+   11801            %ENDIF;
     1117+   11802            %IF (TEXTCHAR(@ALLOCATED) ~= '');
     1118+   11803              @ST$ -> PARA.B.ALLOCATED         = @ALLOCATED;
     1119+   11804            %ENDIF;
     1120+   11805            %IF (TEXTCHAR(@ON_SIZE_ERROR) ~= '');
     1121+   11806              @ST$ -> PARA.B.ON_SIZE_ERROR     = @ON_SIZE_ERROR;
     1122+   11807            %ENDIF;
     1123+   11808            %IF (TEXTCHAR(@GO_ALTERED) ~= '');
     1124+   11809              @ST$ -> PARA.B.GO_ALTERED        = @GO_ALTERED;
     1125+   11810            %ENDIF;
     1126+   11811            %IF (TEXTCHAR(@USE_BASE_POINTER) ~= '');
     1127+   11812              @ST$ -> PARA.B.USE_BASE_POINTER  = @USE_BASE_POINTER;
     1128+   11813            %ENDIF;
     1129+   11814            %IF (TEXTCHAR(@USE_GLOBAL) ~= '');
     1130+   11815              @ST$ -> PARA.B.USE_GLOBAL        = @USE_GLOBAL;
     1131+   11816            %ENDIF;
     1132+   11817            %IF (TEXTCHAR(@USE_ALREADY_FLAGGED) ~= '');
     1133+   11818              @ST$ -> PARA.B.USE_ALREADY_FLAGGED = @USE_ALREADY_FLAGGED;
     1134+   11819            %ENDIF;
     1135+   11820            %IF (TEXTCHAR(@USE_PROC) ~= '');
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:291  
     1136+   11821              @ST$ -> PARA.B.USE_PROC          = @USE_PROC;
     1137+   11822            %ENDIF;
     1138+   11823            %IF (TEXTCHAR(@PFORM_END_LBL) ~= '');
     1139+   11824              @ST$ -> PARA.B.PFORM_END_LBL     = @PFORM_END_LBL;
     1140+   11825            %ENDIF;
     1141+   11826            %IF (TEXTCHAR(@EXIT_PROG_LABEL) ~= '');
     1142+   11827              @ST$ -> PARA.B.EXIT_PROG_LABEL   = @EXIT_PROG_LABEL;
     1143+   11828            %ENDIF;
     1144+   11829            %IF (TEXTCHAR(@LABEL_AFTER_USE) ~= '');
     1145+   11830              @ST$ -> PARA.B.LABEL_AFTER_USE   = @LABEL_AFTER_USE;
     1146+   11831            %ENDIF;
     1147+   11832          END;
     1148+   11833
     1149+   11834        %MEND;
     1150+   11835
     1151+   11836
     1152+   11837        %MACRO NEW_PARA ( @ST$                 = ST$,
     1153+   11838                          @R                   = %PROGRAM,
     1154+   11839                          @COUNT               = %PROC,
     1155+   11840                          @P_END$              = "ADDR(NIL)",
     1156+   11841                          @TYPE                = %TYI,
     1157+   11842                          @LINE_NO             = COMCOM.CURRENT.LINE,
     1158+   11843                          @ATTR                = FALSE,
     1159+   11844                          @NEXT                = "ADDR(NIL)",
     1160+   11845                          @POINTER$            = "ADDR(NIL)",
     1161+   11846                          @DNT$                = "ADDR(NIL)",
     1162+   11847                          @SECTION$            = ,
     1163+   11848                          @PROC$               = ,
     1164+   11849                          @PREV_ILS$           = "ADDR(NIL)",
     1165+   11850                          @REFERENCED          = ,
     1166+   11851                          @DEFINED             = ,
     1167+   11852                          @COMPILER_CREATED    = ,
     1168+   11853                          @GOTO_LABEL          = ,
     1169+   11854                          @DUPLICATE           = ,
     1170+   11855                          @ONE_REF             = ,
     1171+   11856                          @PHASE_2             = ,
     1172+   11857                          @FALL_THRU           = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:292  
     1173+   11858                          @INIT_PROC           = ,
     1174+   11859                          @PFORM_START         = ,
     1175+   11860                          @PFORM_END           = ,
     1176+   11861                          @PFORM_NESTED        = ,
     1177+   11862                          @ALTER_CHECK         = ,
     1178+   11863                          @COBOL_74_PFORM      = ,
     1179+   11864                          @PFORM_74_END        = ,
     1180+   11865                          @GO_VECTOR_START     = ,
     1181+   11866                          @ENTRY_POINT         = ,
     1182+   11867                          @INTERIOR_PFORM_LBL  = ,
     1183+   11868                          @DATA_REF            = ,
     1184+   11869                          @BACKWARD_PFORM      = ,
     1185+   11870                          @ALLOCATED           = ,
     1186+   11871                          @ON_SIZE_ERROR       = ,
     1187+   11872                          @GO_ALTERED          = ,
     1188+   11873                          @USE_BASE_POINTER    = ,
     1189+   11874                          @USE_GLOBAL          = ,
     1190+   11875                          @USE_ALREADY_FLAGGED = ,
     1191+   11876                          @USE_PROC            = ,
     1192+   11877                          @PFORM_END_LBL       = ,
     1193+   11878                          @LABEL_AFTER_USE     = ,
     1194+   11879                          @EXIT_PROG_LABEL     = );
     1195+   11880          DO;
     1196+   11881            %RESERVE_ST (POINTER               = @ST$);
     1197+   11882
     1198+   11883            %INIT_PARA (@ST$                   = @ST$,
     1199+   11884                        @ID                    = %PARA,
     1200+   11885                        @R                     = @R,
     1201+   11886                        @COUNT                 = @COUNT,
     1202+   11887                        @P_END$                = @P_END$,
     1203+   11888                        @TYPE                  = @TYPE,
     1204+   11889                        @LINE_NO               = @LINE_NO,
     1205+   11890                        @ATTR                  = @ATTR,
     1206+   11891                        @NEXT                  = @NEXT,
     1207+   11892                        @POINTER$              = @POINTER$,
     1208+   11893                        @DNT$                  = @DNT$,
     1209+   11894                        @SECTION$              = @SECTION$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:293  
     1210+   11895                        @PROC$                 = @PROC$,
     1211+   11896                        @PREV_ILS$             = @PREV_ILS$,
     1212+   11897                        @REFERENCED            = @REFERENCED,
     1213+   11898                        @DEFINED               = @DEFINED,
     1214+   11899                        @COMPILER_CREATED       = @COMPILER_CREATED,
     1215+   11900                        @GOTO_LABEL             = @GOTO_LABEL,
     1216+   11901                        @DUPLICATE              = @DUPLICATE,
     1217+   11902                        @ONE_REF                = @ONE_REF,
     1218+   11903                        @PHASE_2                = @PHASE_2,
     1219+   11904                        @FALL_THRU              = @FALL_THRU,
     1220+   11905                        @INIT_PROC              = @INIT_PROC,
     1221+   11906                        @PFORM_START            = @PFORM_START,
     1222+   11907                        @PFORM_END              = @PFORM_END,
     1223+   11908                        @PFORM_NESTED           = @PFORM_NESTED,
     1224+   11909                        @ALTER_CHECK            = @ALTER_CHECK,
     1225+   11910                        @COBOL_74_PFORM         = @COBOL_74_PFORM,
     1226+   11911                        @PFORM_74_END           = @PFORM_74_END,
     1227+   11912                        @GO_VECTOR_START        = @GO_VECTOR_START,
     1228+   11913                        @ENTRY_POINT            = @ENTRY_POINT,
     1229+   11914                        @INTERIOR_PFORM_LBL     = @INTERIOR_PFORM_LBL,
     1230+   11915                        @DATA_REF               = @DATA_REF,
     1231+   11916                        @BACKWARD_PFORM         = @BACKWARD_PFORM,
     1232+   11917                        @ALLOCATED              = @ALLOCATED,
     1233+   11918                        @ON_SIZE_ERROR          = @ON_SIZE_ERROR,
     1234+   11919                        @GO_ALTERED             = @GO_ALTERED,
     1235+   11920                        @USE_BASE_POINTER       = @USE_BASE_POINTER,
     1236+   11921                        @USE_GLOBAL             = @USE_GLOBAL,
     1237+   11922                        @USE_ALREADY_FLAGGED    = @USE_ALREADY_FLAGGED,
     1238+   11923                        @USE_PROC               = @USE_PROC,
     1239+   11924                        @PFORM_END_LBL          = @PFORM_END_LBL,
     1240+   11925                        @LABEL_AFTER_USE       = @LABEL_AFTER_USE,
     1241+   11926                        @EXIT_PROG_LABEL        = @EXIT_PROG_LABEL);
     1242+   11927          END;
     1243+   11928        %MEND;
     1244+   11929
     1245+   11930
     1246+   11931
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:294  
     1247+   11932
     1248+   11933        %MACRO NEW_SECTION ( @ST$                 = ST$,
     1249+   11934                          @R                   = %PROGRAM,
     1250+   11935                          @COUNT               = %PROC,
     1251+   11936                          @P_END$              = "ADDR(NIL)",
     1252+   11937                          @TYPE                = %TYI,
     1253+   11938                          @LINE_NO             = COMCOM.CURRENT.LINE,
     1254+   11939                          @ATTR                = FALSE,
     1255+   11940                          @NEXT                = "ADDR(NIL)",
     1256+   11941                          @POINTER$            = "ADDR(NIL)",
     1257+   11942                          @DNT$                = "ADDR(NIL)",
     1258+   11943                          @SEGMENT$            = ,
     1259+   11944                          @PROC$               = ,
     1260+   11945                          @PREV_ILS$           = "ADDR(NIL)",
     1261+   11946                          @REFERENCED          = ,
     1262+   11947                          @DEFINED             = ,
     1263+   11948                          @COMPILER_CREATED    = ,
     1264+   11949                          @GOTO_LABEL          = ,
     1265+   11950                          @DUPLICATE           = ,
     1266+   11951                          @ONE_REF             = ,
     1267+   11952                          @PHASE_2             = ,
     1268+   11953                          @FALL_THRU           = ,
     1269+   11954                          @INIT_PROC           = ,
     1270+   11955                          @PFORM_START         = ,
     1271+   11956                          @PFORM_END           = ,
     1272+   11957                          @PFORM_NESTED        = ,
     1273+   11958                          @ALTER_CHECK         = ,
     1274+   11959                          @COBOL_74_PFORM      = ,
     1275+   11960                          @PFORM_74_END        = ,
     1276+   11961                          @GO_VECTOR_START     = ,
     1277+   11962                          @ENTRY_POINT         = ,
     1278+   11963                          @INTERIOR_PFORM_LBL  = ,
     1279+   11964                          @DATA_REF            = ,
     1280+   11965                          @BACKWARD_PFORM      = ,
     1281+   11966                          @ALLOCATED           = ,
     1282+   11967                          @ON_SIZE_ERROR       = ,
     1283+   11968                          @GO_ALTERED          = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:295  
     1284+   11969                          @USE_BASE_POINTER    = ,
     1285+   11970                          @USE_GLOBAL          = ,
     1286+   11971                          @USE_ALREADY_FLAGGED = ,
     1287+   11972                          @USE_PROC            = ,
     1288+   11973                          @PFORM_END_LBL       = ,
     1289+   11974                          @LABEL_AFTER_USE     = ,
     1290+   11975                          @EXIT_PROG_LABEL     = );
     1291+   11976          DO;
     1292+   11977            %RESERVE_ST (POINTER               = @ST$);
     1293+   11978
     1294+   11979            %INIT_PARA (@ST$                   = @ST$,
     1295+   11980                        @ID                    = %SECTION,
     1296+   11981                        @R                     = @R,
     1297+   11982                        @COUNT                 = @COUNT,
     1298+   11983                        @P_END$                = @P_END$,
     1299+   11984                        @TYPE                  = @TYPE,
     1300+   11985                        @LINE_NO               = @LINE_NO,
     1301+   11986                        @ATTR                  = @ATTR,
     1302+   11987                        @NEXT                  = @NEXT,
     1303+   11988                        @POINTER$              = @POINTER$,
     1304+   11989                        @DNT$                  = @DNT$,
     1305+   11990                        @SEGMENT$              = @SEGMENT$,
     1306+   11991                        @PROC$                 = @PROC$,
     1307+   11992                        @PREV_ILS$             = @PREV_ILS$,
     1308+   11993                        @REFERENCED            = @REFERENCED,
     1309+   11994                        @DEFINED               = @DEFINED,
     1310+   11995                        @COMPILER_CREATED      = @COMPILER_CREATED,
     1311+   11996                        @GOTO_LABEL            = @GOTO_LABEL,
     1312+   11997                        @DUPLICATE             = @DUPLICATE,
     1313+   11998                        @ONE_REF               = @ONE_REF,
     1314+   11999                        @PHASE_2               = @PHASE_2,
     1315+   12000                        @FALL_THRU             = @FALL_THRU,
     1316+   12001                        @INIT_PROC             = @INIT_PROC,
     1317+   12002                        @PFORM_START           = @PFORM_START,
     1318+   12003                        @PFORM_END             = @PFORM_END,
     1319+   12004                        @PFORM_NESTED          = @PFORM_NESTED,
     1320+   12005                        @ALTER_CHECK           = @ALTER_CHECK,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:296  
     1321+   12006                        @COBOL_74_PFORM        = @COBOL_74_PFORM,
     1322+   12007                        @PFORM_74_END          = @PFORM_74_END,
     1323+   12008                        @GO_VECTOR_START       = @GO_VECTOR_START,
     1324+   12009                        @ENTRY_POINT           = @ENTRY_POINT,
     1325+   12010                        @INTERIOR_PFORM_LBL    = @INTERIOR_PFORM_LBL,
     1326+   12011                        @DATA_REF              = @DATA_REF,
     1327+   12012                        @BACKWARD_PFORM        = @BACKWARD_PFORM,
     1328+   12013                        @ALLOCATED             = @ALLOCATED,
     1329+   12014                        @ON_SIZE_ERROR         = @ON_SIZE_ERROR,
     1330+   12015                        @GO_ALTERED            = @GO_ALTERED,
     1331+   12016                        @USE_BASE_POINTER      = @USE_BASE_POINTER,
     1332+   12017                        @USE_GLOBAL            = @USE_GLOBAL,
     1333+   12018                        @USE_ALREADY_FLAGGED   = @USE_ALREADY_FLAGGED,
     1334+   12019                        @USE_PROC              = @USE_PROC,
     1335+   12020                        @PFORM_END_LBL         = @PFORM_END_LBL,
     1336+   12021                        @LABEL_AFTER_USE       = @LABEL_AFTER_USE,
     1337+   12022                        @EXIT_PROG_LABEL       = @EXIT_PROG_LABEL);
     1338+   12023          END;
     1339+   12024        %MEND;
     1340+   12025
     1341+   12026
     1342+   12027        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:297  
     1343+   12028    1   DCL 1 TEMP BASED (ST$) ALIGNED,
     1344+   12029
     1345+   12030    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1346+   12031    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1347+   12032    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1348+   12033
     1349+   12034            %DESCRIPTOR(LVL=2);
     1350+   12062
     1351+   12063    1       2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
     1352+   12064    1       2 DEFINED_LOOP_LEVEL     SBIN HALF UNAL,
     1353+   12065
     1354+   12066    1       2 ATTR BIT(36),
     1355+   12067    1       2 B REDEF ATTR,
     1356+   12068    1         3 NOT_REUSABLE       BOOLEAN,
     1357+   12069    1         3 GREATER_256K       BOOLEAN,
     1358+   12070    1         3 * (0:33)           BOOLEAN,
     1359+   12071
     1360+   12072    1       2 REFERENCES           SBIN HALF UNAL,  /* Remaining references */
     1361+   12073
     1362+   12074    1       2 LENGTH               SBIN HALF UNAL,
     1363+   12075
     1364+   12076    1       2 LTS$                 PTR, /* Used by Z9IO */
     1365+   12077
     1366+   12078    1       2 DNT$                 PTR,
     1367+   12079
     1368+   12080    1       2 QLT$                 PTR,
     1369+   12081
     1370+   12082    1       2 NEXT                 PTR,
     1371+   12083    1       2 LAST                 PTR,
     1372+   12084    1       2 *                    PTR;
     1373+   12085
     1374+   12086
     1375+   12087        %MACRO NEW_TEMP (@ST$                   = ST$,
     1376+   12088                         @R                     = %BLOCK_,
     1377+   12089                         @COUNT                 = %DATA,
     1378+   12090                         @SA                    = 0,
     1379+   12091                         @DESCL                 = 0,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:298  
     1380+   12092                         @TYPE                  = %TYI,
     1381+   12093                         @DEFINED_LOOP_LEVEL     = 0,
     1382+   12094                         @ATTR                  = FALSE,
     1383+   12095                         @REFERENCES            = 0,
     1384+   12096                         @LENGTH                = 0,
     1385+   12097                         @LTS$                  = "ADDR(NIL)",
     1386+   12098                         @DNT$                  = "ADDR(NIL)",
     1387+   12099                         @QLT$                  = "ADDR(NIL)",
     1388+   12100                         @NEXT                  = "ADDR(NIL)",
     1389+   12101                         @LAST                  = "ADDR(NIL)",
     1390+   12102                         @GREATER_256K          = ,
     1391+   12103                         @NOT_REUSABLE          = );
     1392+   12104          DO;
     1393+   12105            %RESERVE_ST (POINTER = @ST$);
     1394+   12106
     1395+   12107            @ST$ -> TEMP.ID                       = %TEMP;
     1396+   12108            @ST$ -> TEMP.R                        = @R;
     1397+   12109            @ST$ -> TEMP.COUNT                    = @COUNT;
     1398+   12110            @ST$ -> TEMP.SA                       = @SA;
     1399+   12111            @ST$ -> TEMP.DESCL                    = @DESCL;
     1400+   12112            @ST$ -> TEMP.TYPE                     = @TYPE;
     1401+   12113            @ST$ -> TEMP.DEFINED_LOOP_LEVEL       = @DEFINED_LOOP_LEVEL;
     1402+   12114            @ST$ -> TEMP.ATTR                     = @ATTR;
     1403+   12115            @ST$ -> TEMP.REFERENCES               = @REFERENCES;
     1404+   12116            @ST$ -> TEMP.LENGTH                   = @LENGTH;
     1405+   12117            @ST$ -> TEMP.LTS$                     = @LTS$ ;
     1406+   12118            @ST$ -> TEMP.DNT$                     = @DNT$;
     1407+   12119            @ST$ -> TEMP.QLT$                     = @QLT$;
     1408+   12120            @ST$ -> TEMP.NEXT                     = @NEXT;
     1409+   12121            @ST$ -> TEMP.LAST                     = @LAST;
     1410+   12122
     1411+   12123            %IF (TEXTCHAR(@NOT_REUSABLE) ~= '');
     1412+   12124              @ST$ -> TEMP.B.NOT_REUSABLE         = @NOT_REUSABLE;
     1413+   12125            %ENDIF;
     1414+   12126            %IF (TEXTCHAR(@GREATER_256K) ~= '');
     1415+   12127              @ST$ -> TEMP.B.GREATER_256K         = @GREATER_256K;
     1416+   12128            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:299  
     1417+   12129          END;
     1418+   12130        %MEND;
     1419+   12131
     1420+   12132        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:300  
     1421+   12133    1   DCL 1 CONDITION            BASED (ST$)ALIGNED,
     1422+   12134
     1423+   12135    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1424+   12136    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1425+   12137    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1426+   12138
     1427+   12139    1       2 NEXT_CONDITION$        PTR,
     1428+   12140
     1429+   12141    1       2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
     1430+   12142    1       2 LINE_NO                UBIN HALF UNAL,
     1431+   12143
     1432+   12144    1       2 ATTR BIT(36),
     1433+   12145    1       2 B                  REDEF ATTR,
     1434+   12146    1        3 LINKAGE           BOOLEAN,
     1435+   12147    1        3 EXTERNAL          BOOLEAN,
     1436+   12148    1        3 GLOBAL            BOOLEAN,
     1437+   12149    1        3 *                 (0:32) BOOLEAN,
     1438+   12150
     1439+   12151    1       2 NEXT                   PTR,
     1440+   12152
     1441+   12153    1       2 VALUE_LIST$            PTR,
     1442+   12154
     1443+   12155    1       2 DNT$                   PTR,
     1444+   12156
     1445+   12157    1       2 QLT$                   PTR,
     1446+   12158
     1447+   12159    1       2 ASSOC_VAR$             PTR,
     1448+   12160
     1449+   12161    1       2 PROC$                  PTR,
     1450+   12162    1       2 LINK                   PTR;
     1451+   12163
     1452+   12164
     1453+   12165
     1454+   12166
     1455+   12167
     1456+   12168        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:301  
     1457+   12169        %MACRO NEW_CONDITION      (@ST$         = ST$,
     1458+   12170                                   @R           = %BLOCK_,
     1459+   12171                                   @COUNT       = %DATA,
     1460+   12172                                   @NEXT_COND$  = "ADDR(NIL)",
     1461+   12173                                   @TYPE        = %TYG,
     1462+   12174                                   @LINE_NO        = COMCOM.CURRENT.LINE,
     1463+   12175                                   @ATTR        = FALSE,
     1464+   12176                                   @EXTERNAL    = ,
     1465+   12177                                   @GLOBAL      = ,
     1466+   12178                                   @LINKAGE     = ,
     1467+   12179                                   @NEXT        = "ADDR(NIL)",
     1468+   12180                                   @VALUE_LIST$ = "ADDR(NIL)",
     1469+   12181                                   @DNT$        = DNT$,
     1470+   12182                                   @QLT$        = QLT$,
     1471+   12183                                   @ASSOC_VAR$  = ,
     1472+   12184                                   @PROC$       = );
     1473+   12185
     1474+   12186             DO;
     1475+   12187
     1476+   12188               %IF TEXTCHAR(@ASSOC_VAR$) = '';
     1477+   12189                 %ERROR (TRUE, 'Missing @ASSOC_VAR$ parameter.',2);
     1478+   12190               %ENDIF;
     1479+   12191
     1480+   12192               %RESERVE_ST (POINTER = @ST$);
     1481+   12193
     1482+   12194               @ST$ -> CONDITION.ID          = %CONDITION;
     1483+   12195               @ST$ -> CONDITION.R           = @R;
     1484+   12196               @ST$ -> CONDITION.COUNT       = @COUNT;
     1485+   12197               @ST$ -> CONDITION.NEXT_CONDITION$ = @NEXT_COND$;
     1486+   12198               @ST$ -> CONDITION.TYPE        = @TYPE;
     1487+   12199               @ST$ -> CONDITION.LINE_NO     = @LINE_NO;
     1488+   12200               @ST$ -> CONDITION.ATTR        = @ATTR;
     1489+   12201               @ST$ -> CONDITION.NEXT        = @NEXT;
     1490+   12202               @ST$ -> CONDITION.VALUE_LIST$ = @VALUE_LIST$;
     1491+   12203               @ST$ -> CONDITION.DNT$        = @DNT$;
     1492+   12204               @ST$ -> CONDITION.QLT$        = @QLT$;
     1493+   12205               @ST$ -> CONDITION.ASSOC_VAR$  = @ASSOC_VAR$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:302  
     1494+   12206
     1495+   12207                 %UPDATE_PROC_LINK (@TEMPLATE = CONDITION, @ST$ = @ST$, @PROC$ = @PROC$);
     1496+   12208               %IF (TEXTCHAR(@LINKAGE) ~= '');
     1497+   12209                 @ST$ -> CONDITION.B.LINKAGE = @LINKAGE;
     1498+   12210               %ENDIF;
     1499+   12211               %IF (TEXTCHAR(@GLOBAL) ~= '');
     1500+   12212                 @ST$ -> CONDITION.B.GLOBAL = @GLOBAL;
     1501+   12213               %ENDIF;
     1502+   12214               %IF (TEXTCHAR(@EXTERNAL) ~= '');
     1503+   12215                 @ST$ -> CONDITION.B.EXTERNAL = @EXTERNAL;
     1504+   12216               %ENDIF;
     1505+   12217             END;
     1506+   12218
     1507+   12219        %MEND;
     1508+   12220
     1509+   12221        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:303  
     1510+   12222    1   DCL 1 INTDEF           BASED (ST$) ALIGNED,
     1511+   12223    1        2 ID              UBIN HALF UNAL,
     1512+   12224    1        2 R               UBIN BYTE UNAL,
     1513+   12225    1        2 COUNT           UBIN BYTE UNAL,
     1514+   12226
     1515+   12227             %DESCRIPTOR       (LVL = 2);
     1516+   12255
     1517+   12256    1        2 TYPE            UBIN HALF UNAL,
     1518+   12257    1        2 LINE_NO         UBIN HALF UNAL,
     1519+   12258
     1520+   12259    1        2 ATTR            BIT(36) UNAL,
     1521+   12260    1        2 B               REDEF ATTR,
     1522+   12261    1         3 *              (0:35) BOOLEAN,
     1523+   12262
     1524+   12263    1        2 NEXT            PTR,
     1525+   12264
     1526+   12265    1        2 ARGLIST$        PTR,
     1527+   12266    1        2 DNT$            PTR,
     1528+   12267
     1529+   12268    1        2 ENTRYS$         PTR,   /* Links the entry points */
     1530+   12269    1        2 *               PTR,
     1531+   12270    1        2 PROC$           PTR,
     1532+   12271    1        2 LINK            PTR;
     1533+   12272
     1534+   12273
     1535+   12274        %MACRO NEW_INTDEF  (@ST$        = ST$,
     1536+   12275                            @R          = %PROGRAM, /*N* IS R AND COUNT RIGHT */
     1537+   12276                            @COUNT      = %PROC,
     1538+   12277                            @TYPE       = %TYG,
     1539+   12278                            @LINE_NO    = COMCOM.CURRENT.LINE,
     1540+   12279                            @ATTR       = FALSE,
     1541+   12280                            @ARGLIST$   = "ADDR(NIL)",
     1542+   12281                            @PROC$      = ,
     1543+   12282                            @ENTRYS$    = "ADDR(NIL)",
     1544+   12283                            @NEXT       = "ADDR(NIL)",
     1545+   12284                            @DNT$       = "ADDR(NIL)");
     1546+   12285
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:304  
     1547+   12286             DO;
     1548+   12287               %RESERVE_ST (POINTER = @ST$);
     1549+   12288
     1550+   12289               @ST$ -> INTDEF.ID                 = %INTDEF;
     1551+   12290               @ST$ -> INTDEF.R                  = @R;
     1552+   12291               @ST$ -> INTDEF.COUNT              = @COUNT;
     1553+   12292               @ST$ -> INTDEF.TYPE               = @TYPE;
     1554+   12293               @ST$ -> INTDEF.LINE_NO            = @LINE_NO;
     1555+   12294               @ST$ -> INTDEF.ATTR               = @ATTR;
     1556+   12295               @ST$ -> INTDEF.ARGLIST$           = @ARGLIST$;
     1557+   12296               @ST$ -> INTDEF.ENTRYS$            = @ENTRYS$;
     1558+   12297               @ST$ -> INTDEF.DNT$               = @DNT$;
     1559+   12298               @ST$ -> INTDEF.NEXT               = @NEXT;
     1560+   12299
     1561+   12300                 %UPDATE_PROC_LINK (@TEMPLATE = INTDEF, @ST$ = @ST$, @PROC$ = @PROC$);
     1562+   12301             END;
     1563+   12302           %MEND;
     1564+   12303
     1565+   12304
     1566+   12305           %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:305  
     1567+   12306    1   DCL 1 PROC_            BASED (ST$) ALIGNED,
     1568+   12307    1        2 ID              UBIN HALF UNAL,
     1569+   12308    1        2 LEVEL           UBIN HALF UNAL, /* Nesting level */
     1570+   12309
     1571+   12310    1        2 PROC_SUPP$      PTR,
     1572+   12311
     1573+   12312    1        2 LINE_START      UBIN HALF UNAL,
     1574+   12313    1        2 LINE_END        UBIN HALF UNAL,
     1575+   12314
     1576+   12315    1        2 ATTR            BIT (36) UNAL,
     1577+   12316    1        2 B               REDEF ATTR,
     1578+   12317    1         3 COMMON         BOOLEAN,
     1579+   12318    1         3 INITIAL        BOOLEAN,
     1580+   12319    1         3 CANCELED       BOOLEAN,
     1581+   12320    1         3 MANAGED        BOOLEAN,
     1582+   12321    1         3 INITIAL_RELATIVE BOOLEAN,
     1583+   12322    1         3 COMMA_IS_DECIMAL BOOLEAN,
     1584+   12323    1         3 CURRENCY_SIGN    BOOLEAN,
     1585+   12324    1         3 OBJECT_IS_COMMA  BOOLEAN,
     1586+   12325    1         3 INLINE         BOOLEAN,
     1587+   12326    1         3 MAIN_PROG      BOOLEAN,
     1588+   12327    1         3 SUB_SCHEMA     BOOLEAN,
     1589+   12328    1         3 *              (0:6) BOOLEAN,
     1590+   12329    1         3 ARG_COUNT      SBIN (18) UNAL,
     1591+   12330
     1592+   12331    1        2 PSEUDO_STACK$   PTR,  /* To base for return addr and args */
     1593+   12332    1        2 LOG_BLK_NUMBER  REDEF PSEUDO_STACK$ SBIN, /* PH5 only */
     1594+   12333
     1595+   12334    1        2 CSIB$           PTR, /* Ptr to CSIB ST item */
     1596+   12335
     1597+   12336    1        2 PROC_DEF$       PTR,
     1598+   12337
     1599+   12338    1        2 SON             PTR,
     1600+   12339
     1601+   12340    1        2 BROTHER         PTR,
     1602+   12341
     1603+   12342    1        2 FATHER          PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:306  
     1604+   12343
     1605+   12344    1        2 *               PTR;
     1606+   12345
     1607+   12346
     1608+   12347        %MACRO NEW_PROC_ (@ST$        = ST$,
     1609+   12348                          @LEVEL      = 1,
     1610+   12349                          @LINE_START = COMCOM.CURRENT.LINE,
     1611+   12350                          @LINE_END   = COMCOM.CURRENT.LINE,
     1612+   12351                          @ATTR       = FALSE,
     1613+   12352                          @PROC_SUPP$ = "ADDR(NIL)",
     1614+   12353                          @PSEUDO_STACK$       = "ADDR(NIL)",
     1615+   12354                          @CSIB$      = "ADDR(NIL)",
     1616+   12355                          @PROC_DEF$  = "ADDR(NIL)",
     1617+   12356                          @FATHER     = "ADDR(NIL)",
     1618+   12357                          @BROTHER    = "ADDR(NIL)",
     1619+   12358                          @SON        = "ADDR(NIL)",
     1620+   12359                          @COMMON     = ,
     1621+   12360                          @INITIAL    = ,
     1622+   12361                          @CANCELED   = ,
     1623+   12362                          @MANAGED    = ,
     1624+   12363                          @INITIAL_RELATIVE = ,
     1625+   12364                          @COMMA_IS_DECIMAL = ,
     1626+   12365                          @CURRENCY_SIGN = ,
     1627+   12366                          @OBJECT_IS_COMMA = ,
     1628+   12367                          @INLINE     = ,
     1629+   12368                          @MAIN_PROG  = ,
     1630+   12369                          @SUB_SCHEMA = );
     1631+   12370
     1632+   12371             DO;
     1633+   12372               %RESERVE_ST (POINTER = @ST$);
     1634+   12373
     1635+   12374               @ST$ -> PROC_.ID         = %PROC_;
     1636+   12375               @ST$ -> PROC_.LEVEL      = @LEVEL;
     1637+   12376               @ST$ -> PROC_.LINE_START = @LINE_START;
     1638+   12377               @ST$ -> PROC_.LINE_END   = @LINE_END;
     1639+   12378               @ST$ -> PROC_.ATTR       = @ATTR;
     1640+   12379               @ST$ -> PROC_.PROC_SUPP$ = @PROC_SUPP$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:307  
     1641+   12380               @ST$ -> PROC_.PSEUDO_STACK$      = @PSEUDO_STACK$;
     1642+   12381               @ST$ -> PROC_.CSIB$      = @CSIB$;
     1643+   12382               @ST$ -> PROC_.PROC_DEF$  = @PROC_DEF$;
     1644+   12383               @ST$ -> PROC_.FATHER     = @FATHER;
     1645+   12384               @ST$ -> PROC_.BROTHER    = @BROTHER;
     1646+   12385               @ST$ -> PROC_.SON        = @SON;
     1647+   12386
     1648+   12387               %IF (TEXTCHAR(@COMMON) ~= '');
     1649+   12388                 @ST$ -> PROC_.B.COMMON = @COMMON;
     1650+   12389               %ENDIF;
     1651+   12390               %IF (TEXTCHAR(@INITIAL) ~= '');
     1652+   12391                 @ST$ -> PROC_.B.INITIAL = @INITIAL;
     1653+   12392               %ENDIF;
     1654+   12393               %IF (TEXTCHAR(@CANCELED) ~= '');
     1655+   12394                 @ST$ -> PROC_.B.CANCELED = @CANCELED;
     1656+   12395               %ENDIF;
     1657+   12396               %IF (TEXTCHAR(@MANAGED) ~= '');
     1658+   12397                 @ST$ -> PROC_.B.MANAGED = @MANAGED;
     1659+   12398               %ENDIF;
     1660+   12399               %IF (TEXTCHAR(@INITIAL_RELATIVE) ~= '');
     1661+   12400                 @ST$ -> PROC_.B.INITIAL_RELATIVE = @INITIAL_RELATIVE;
     1662+   12401               %ENDIF;
     1663+   12402               %IF (TEXTCHAR(@COMMA_IS_DECIMAL) ~= '');
     1664+   12403                 @ST$ -> PROC_.B.COMMA_IS_DECIMAL = @COMMA_IS_DECIMAL;
     1665+   12404               %ENDIF;
     1666+   12405               %IF (TEXTCHAR(@CURRENCY_SIGN) ~= '');
     1667+   12406                 @ST$ -> PROC_.B.CURRENCY_SIGN = @CURRENCY_SIGN;
     1668+   12407               %ENDIF;
     1669+   12408               %IF (TEXTCHAR(@OBJECT_IS_COMMA) ~= '');
     1670+   12409                 @ST$ -> PROC_.B.OBJECT_IS_COMMA = @OBJECT_IS_COMMA;
     1671+   12410               %ENDIF;
     1672+   12411               %IF (TEXTCHAR(@INLINE) ~= '');
     1673+   12412                 @ST$ -> PROC_.B.INLINE = @INLINE;
     1674+   12413               %ENDIF;
     1675+   12414               %IF (TEXTCHAR(@MAIN_PROG) ~= '');
     1676+   12415                 @ST$ -> PROC_.B.MAIN_PROG = @MAIN_PROG;
     1677+   12416               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:308  
     1678+   12417               %IF (TEXTCHAR(@SUB_SCHEMA) ~= '');
     1679+   12418                 @ST$ -> PROC_.B.SUB_SCHEMA = @SUB_SCHEMA;
     1680+   12419               %ENDIF;
     1681+   12420             END;
     1682+   12421        %MEND;
     1683+   12422
     1684+   12423
     1685+   12424        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:309  
     1686+   12425        /*
     1687+   12426           This next template PROC_DEF is to keep symdef and intdef
     1688+   12427           the same, it is for referencing the same fields in both
     1689+   12428           to eliminate special casing each reference.  This violates
     1690+   12429           the "strong typing" ethics, but saves code that at THIS POINT
     1691+   12430           need not be different all over.  It is mostly used when accessing
     1692+   12431           ARGLIST$, and ENTRYS$.
     1693+   12432        */
     1694+   12433    1   DCL 1 PROC_DEF BASED (ST$) ALIGNED,
     1695+   12434
     1696+   12435    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1697+   12436    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1698+   12437    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1699+   12438
     1700+   12439            %DESCRIPTOR(LVL=2);
     1701+   12467
     1702+   12468    1       2 TYPE                   UBIN HALF HALIGNED,
     1703+   12469    1       2 LINE_NO                UBIN HALF HALIGNED,
     1704+   12470
     1705+   12471    1       2 ATTR BIT(36),
     1706+   12472    1       2 B                  REDEF ATTR,
     1707+   12473    1         3 * (0:35) BOOLEAN,
     1708+   12474
     1709+   12475    1       2 *                      PTR,
     1710+   12476
     1711+   12477    1       2 ARGLIST$               PTR,
     1712+   12478
     1713+   12479    1       2 DNT$                   PTR,
     1714+   12480
     1715+   12481    1       2 ENTRYS$                PTR,
     1716+   12482
     1717+   12483    1       2 *                      PTR,
     1718+   12484
     1719+   12485    1       2 PROC$                  PTR,
     1720+   12486    1       2 LINK                   PTR;
     1721+   12487
     1722+   12488
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:310  
     1723+   12489        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:311  
     1724+   12490    1   DCL 1 SYMDEF_ BASED (ST$) ALIGNED,
     1725+   12491
     1726+   12492    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1727+   12493    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1728+   12494    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1729+   12495
     1730+   12496            %DESCRIPTOR(LVL=2);
     1731+   12524
     1732+   12525    1       2 TYPE                   UBIN HALF HALIGNED,
     1733+   12526    1       2 LINE_NO                UBIN HALF HALIGNED,
     1734+   12527
     1735+   12528    1       2 ATTR BIT(36),
     1736+   12529    1       2 B                  REDEF ATTR,
     1737+   12530    1         3 MAIN_PROGRAM          BOOLEAN,
     1738+   12531    1         3 * (0:34) BOOLEAN,
     1739+   12532
     1740+   12533    1       2 NEXT                   PTR,
     1741+   12534
     1742+   12535    1       2 ARGLIST$               PTR,
     1743+   12536
     1744+   12537    1       2 DNT$                   PTR,
     1745+   12538
     1746+   12539    1       2 ENTRYS$                PTR,
     1747+   12540
     1748+   12541    1       2 *                      PTR,
     1749+   12542
     1750+   12543    1       2 PROC$                  PTR,
     1751+   12544    1       2 LINK                   PTR;
     1752+   12545
     1753+   12546
     1754+   12547        %MACRO NEW_SYMDEF_ ( @ST$              = ST$,
     1755+   12548                             @R                = %PROGRAM,
     1756+   12549                             @COUNT            = %PROC,
     1757+   12550                             @TYPE             = %TYG,
     1758+   12551                             @LINE_NO          = COMCOM.CURRENT.LINE,
     1759+   12552                             @ATTR             = FALSE,
     1760+   12553                             @MAIN_PROGRAM     = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:312  
     1761+   12554                             @ARGLIST$         = "ADDR(NIL)",
     1762+   12555                             @PROC$            = ,
     1763+   12556                             @ENTRYS$         = "ADDR(NIL)",
     1764+   12557                             @NEXT       = ,
     1765+   12558                             @DNT$             = "ADDR(NIL)");
     1766+   12559          DO;
     1767+   12560            %RESERVE_ST (POINTER = @ST$);
     1768+   12561
     1769+   12562            @ST$ -> SYMDEF_.ID                 = %SYMDEF_;
     1770+   12563            @ST$ -> SYMDEF_.R                  = @R;
     1771+   12564            @ST$ -> SYMDEF_.COUNT              = @COUNT;
     1772+   12565            @ST$ -> SYMDEF_.TYPE               = @TYPE;
     1773+   12566            @ST$ -> SYMDEF_.LINE_NO            = @LINE_NO;
     1774+   12567            @ST$ -> SYMDEF_.ATTR               = @ATTR;
     1775+   12568            @ST$ -> SYMDEF_.ARGLIST$           = @ARGLIST$;
     1776+   12569            @ST$ -> SYMDEF_.ENTRYS$         = @ENTRYS$;
     1777+   12570            @ST$ -> SYMDEF_.DNT$               = @DNT$;
     1778+   12571
     1779+   12572            %IF TEXTCHAR(@NEXT) = '';
     1780+   12573               @ST$ -> SYMDEF_.NEXT = COMCOM.SYMDEF$;
     1781+   12574               COMCOM.SYMDEF$ = @ST$;
     1782+   12575               COMCOM.SYMDEFC = COMCOM.SYMDEFC + 1;
     1783+   12576            %ELSE;
     1784+   12577               @ST$ -> SYMDEF_.NEXT = @NEXT;
     1785+   12578            %ENDIF;
     1786+   12579
     1787+   12580            %UPDATE_PROC_LINK (@TEMPLATE = SYMDEF_, @ST$ = @ST$, @PROC$ = @PROC$);
     1788+   12581            %IF (TEXTCHAR(@MAIN_PROGRAM) ~= '');
     1789+   12582              @ST$ -> SYMDEF_.MAIN_PROGRAM = @MAIN_PROGRAM;
     1790+   12583            %ENDIF;
     1791+   12584          END;
     1792+   12585        %MEND;
     1793+   12586
     1794+   12587
     1795+   12588        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:313  
     1796+   12589    1   DCL 1 SYMREF_ BASED (ST$) ALIGNED,
     1797+   12590
     1798+   12591    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1799+   12592    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1800+   12593    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1801+   12594
     1802+   12595            %DESCRIPTOR(LVL=2);
     1803+   12623
     1804+   12624    1       2 TYPE                   UBIN HALF HALIGNED,
     1805+   12625    1       2 LINE_NO                UBIN HALF HALIGNED,
     1806+   12626
     1807+   12627    1       2 ATTR BIT(36),
     1808+   12628    1       2 B                  REDEF ATTR,
     1809+   12629    1         3 * (0:25) BOOLEAN,
     1810+   12630    1         3 SCOUNT               UBIN (9) UNAL, /* For Segmentation */
     1811+   12631    1         3 NO_BASE_PTR          BOOLEAN,
     1812+   12632
     1813+   12633    1       2 NEXT                   PTR,
     1814+   12634
     1815+   12635    1       2 *                      PTR,
     1816+   12636
     1817+   12637    1       2 DNT$                   PTR,
     1818+   12638
     1819+   12639    1       2 *                      PTR,
     1820+   12640
     1821+   12641    1       2 REF_COUNT              SBIN,
     1822+   12642
     1823+   12643    1       2 PROC$                  PTR,
     1824+   12644    1       2 LINK                   PTR;
     1825+   12645
     1826+   12646
     1827+   12647        %MACRO NEW_SYMREF_ ( @ST$              = ST$,
     1828+   12648                             @R                = %PROGRAM,
     1829+   12649                             @COUNT            = %PROC,
     1830+   12650                             @TYPE             = %TYG,
     1831+   12651                             @LINE_NO          = COMCOM.CURRENT.LINE,
     1832+   12652                             @NEXT             = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:314  
     1833+   12653                             @ATTR             = FALSE,
     1834+   12654                             @NO_BASE_PTR      = TRUE,
     1835+   12655                             @REF_COUNT        = 1,
     1836+   12656                             @PROC$            = ,
     1837+   12657                             @DNT$             = "ADDR(NIL)");
     1838+   12658          DO;
     1839+   12659            %RESERVE_ST (POINTER = @ST$);
     1840+   12660
     1841+   12661            @ST$ -> SYMREF_.ID                 = %SYMREF_;
     1842+   12662            @ST$ -> SYMREF_.R                  = @R;
     1843+   12663            @ST$ -> SYMREF_.COUNT              = @COUNT;
     1844+   12664            @ST$ -> SYMREF_.REF_COUNT          = @REF_COUNT;
     1845+   12665            @ST$ -> SYMREF_.TYPE               = @TYPE;
     1846+   12666            @ST$ -> SYMREF_.LINE_NO            = @LINE_NO;
     1847+   12667            @ST$ -> SYMREF_.NEXT               = @NEXT;
     1848+   12668            @ST$ -> SYMREF_.ATTR               = @ATTR;
     1849+   12669            %IF @NO_BASE_PTR;
     1850+   12670            @ST$ -> SYMREF_.B.NO_BASE_PTR      = @NO_BASE_PTR;
     1851+   12671            %ENDIF;
     1852+   12672            @ST$ -> SYMREF_.DNT$               = @DNT$;
     1853+   12673
     1854+   12674                 %UPDATE_PROC_LINK (@TEMPLATE = SYMREF_, @ST$ = @ST$, @PROC$ = @PROC$);
     1855+   12675          END;
     1856+   12676        %MEND;
     1857+   12677
     1858+   12678        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:315  
     1859+   12679
     1860+   12680        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:316  
     1861+   12681    1   DCL 1 SEGMENT BASED (ST$) ALIGNED,
     1862+   12682
     1863+   12683    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1864+   12684    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1865+   12685    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1866+   12686
     1867+   12687            %DESCRIPTOR(LVL=2);
     1868+   12715
     1869+   12716    1       2 SIZE                   UBIN HALF HALIGNED,
     1870+   12717    1       2 LINE_NO                UBIN HALF HALIGNED,
     1871+   12718
     1872+   12719    1       2 ATTR BIT(36),
     1873+   12720    1       2 B                  REDEF ATTR,
     1874+   12721    1         3 * (0:35) BOOLEAN,
     1875+   12722
     1876+   12723    1       2 *                      PTR,
     1877+   12724
     1878+   12725    1       2 *                      PTR,
     1879+   12726
     1880+   12727    1       2 DNT$                   PTR,
     1881+   12728
     1882+   12729    1       2 BCD_ST$                PTR,
     1883+   12730
     1884+   12731    1       2 NEXT                   PTR,
     1885+   12732
     1886+   12733    1       2 PROC$                  PTR,
     1887+   12734    1       2 LINK                   PTR;
     1888+   12735
     1889+   12736
     1890+   12737        %MACRO NEW_SEGMENT ( @ST$              = ST$,
     1891+   12738                             @R                = %PROGRAM,
     1892+   12739                             @COUNT            = %PROC,
     1893+   12740                             @SIZE             = 0,
     1894+   12741                             @LINE_NO          = COMCOM.CURRENT.LINE,
     1895+   12742                             @ATTR             = FALSE,
     1896+   12743                             @BCD_ST$          = "ADDR(NIL)",
     1897+   12744                             @NEXT             = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:317  
     1898+   12745                             @PROC$            = ,
     1899+   12746                             @DNT$             = "ADDR(NIL)");
     1900+   12747          DO;
     1901+   12748            %RESERVE_ST (POINTER = @ST$);
     1902+   12749
     1903+   12750            @ST$ -> SEGMENT.ID                 = %SEGMENT;
     1904+   12751            @ST$ -> SEGMENT.R                  = @R;
     1905+   12752            @ST$ -> SEGMENT.COUNT              = @COUNT;
     1906+   12753            @ST$ -> SEGMENT.SIZE               = @SIZE;
     1907+   12754            @ST$ -> SEGMENT.LINE_NO            = @LINE_NO;
     1908+   12755            @ST$ -> SEGMENT.ATTR               = @ATTR;
     1909+   12756            @ST$ -> SEGMENT.DNT$               = @DNT$;
     1910+   12757            @ST$ -> SEGMENT.BCD_ST$            = @BCD_ST$;
     1911+   12758            @ST$ -> SEGMENT.NEXT               = @NEXT;
     1912+   12759
     1913+   12760                 %UPDATE_PROC_LINK (@TEMPLATE = SEGMENT, @ST$ = @ST$, @PROC$ = @PROC$);
     1914+   12761          END;
     1915+   12762        %MEND;
     1916+   12763
     1917+   12764
     1918+   12765
     1919+   12766        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:318  
     1920+   12767    1   DCL 1 BLOCK BASED (ST$) ALIGNED,
     1921+   12768
     1922+   12769    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1923+   12770    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1924+   12771    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1925+   12772
     1926+   12773            %DESCRIPTOR(LVL=2);
     1927+   12801
     1928+   12802    1       2 SIZE                   UBIN HALF HALIGNED,
     1929+   12803    1       2 LINE_NO                UBIN HALF HALIGNED,
     1930+   12804
     1931+   12805    1       2 ATTR BIT(36),
     1932+   12806    1       2 B                  REDEF ATTR,
     1933+   12807    1         3 REDEFINED            BOOLEAN,  /* two or more in this block */
     1934+   12808    1         3 CSIB                 BOOLEAN,
     1935+   12809    1         3 SIZE_256K            BOOLEAN,
     1936+   12810    1         3 * (0:23) BOOLEAN,
     1937+   12811    1         3 SCOUNT               UBIN (9) UNAL, /* For segmentation */
     1938+   12812
     1939+   12813    1       2 NEXT                   PTR,
     1940+   12814
     1941+   12815    1       2 *                      PTR,
     1942+   12816
     1943+   12817    1       2 DNT$                   PTR,
     1944+   12818
     1945+   12819    1       2 QLT$                   PTR,
     1946+   12820
     1947+   12821    1       2 SIZE1                  UBIN HALF HALIGNED,
     1948+   12822    1       2 *                      BIT(18),
     1949+   12823
     1950+   12824    1       2 PROC$                  PTR,
     1951+   12825    1       2 LINK                   PTR;
     1952+   12826
     1953+   12827
     1954+   12828        %MACRO NEW_BLOCK ( @ST$              = ST$,
     1955+   12829                             @R                = %BLOCK_,
     1956+   12830                             @COUNT            = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:319  
     1957+   12831                             @SIZE             = 0,
     1958+   12832                             @LINE_NO          = COMCOM.CURRENT.LINE,
     1959+   12833                             @ATTR             = FALSE,
     1960+   12834                             @REDEFINED         = ,
     1961+   12835                             @CSIB              = ,
     1962+   12836                             @NEXT             = "ADDR(NIL)",
     1963+   12837                             @DNT$             = "ADDR(NIL)",
     1964+   12838                             @PROC$            = ,
     1965+   12839                             @QLT$             = "ADDR(NIL)");
     1966+   12840          DO;
     1967+   12841            %RESERVE_ST (POINTER = @ST$);
     1968+   12842
     1969+   12843            %IF (TEXTCHAR(@COUNT) = '');
     1970+   12844              COMCOM.BLOCKC = COMCOM.BLOCKC + 1;
     1971+   12845              @ST$ -> BLOCK.COUNT = COMCOM.BLOCKC;
     1972+   12846              %IF PHASE = 1;
     1973+   12847                O1COM.LAST_BLOCK$ -> BLOCK.NEXT = @ST$;
     1974+   12848                O1COM.LAST_BLOCK$ = @ST$;
     1975+   12849              %ENDIF;
     1976+   12850            %ELSE;
     1977+   12851              @ST$ -> BLOCK.COUNT = @COUNT;
     1978+   12852            %ENDIF;
     1979+   12853
     1980+   12854            @ST$ -> BLOCK.ID                 = %BLOCK;
     1981+   12855            @ST$ -> BLOCK.R                  = @R;
     1982+   12856            @ST$ -> BLOCK.SIZE               = @SIZE;
     1983+   12857            @ST$ -> BLOCK.LINE_NO            = @LINE_NO;
     1984+   12858            @ST$ -> BLOCK.ATTR               = @ATTR;
     1985+   12859            @ST$ -> BLOCK.NEXT               = @NEXT;
     1986+   12860            @ST$ -> BLOCK.DNT$               = @DNT$;
     1987+   12861            @ST$ -> BLOCK.QLT$               = @QLT$;
     1988+   12862            %IF (TEXTCHAR(@REDEFINED) ~= '');
     1989+   12863              @ST$ -> BLOCK.B.REDEFINED      = @REDEFINED;
     1990+   12864            %ENDIF;
     1991+   12865            %IF (TEXTCHAR(@CSIB) ~= '');
     1992+   12866              @ST$ -> BLOCK.B.CSIB           = @CSIB;
     1993+   12867            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:320  
     1994+   12868
     1995+   12869                 %UPDATE_PROC_LINK (@TEMPLATE = BLOCK, @ST$ = @ST$, @PROC$ = @PROC$);
     1996+   12870          END;
     1997+   12871        %MEND;
     1998+   12872        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:321  
     1999+   12873    1   DCL 1 DCB_ BASED (ST$) ALIGNED,
     2000+   12874
     2001+   12875    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     2002+   12876    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     2003+   12877    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     2004+   12878
     2005+   12879            %DESCRIPTOR(LVL=2);
     2006+   12907
     2007+   12908    1       2 SIZE                   UBIN HALF HALIGNED,
     2008+   12909    1       2 LINE_NO                UBIN HALF HALIGNED,
     2009+   12910
     2010+   12911    1       2 ATTR BIT(36),
     2011+   12912    1       2 B                  REDEF ATTR,
     2012+   12913    1         3 * (0:35) BOOLEAN,
     2013+   12914
     2014+   12915    1       2 NEXT                   PTR,
     2015+   12916
     2016+   12917    1       2 LTS$                   PTR,
     2017+   12918
     2018+   12919    1       2 DNT$                   PTR,
     2019+   12920
     2020+   12921    1       2 QLT$                   PTR,
     2021+   12922
     2022+   12923    1       2 *                      PTR,
     2023+   12924
     2024+   12925    1       2 PROC$                  PTR,
     2025+   12926    1       2 LINK                   PTR;
     2026+   12927
     2027+   12928
     2028+   12929        %MACRO NEW_DCB  ( @ST$              = ST$,
     2029+   12930                             @R                = %BLOCK_,
     2030+   12931                             @COUNT            = %DATA,
     2031+   12932                             @SIZE             = 0,
     2032+   12933                             @LINE_NO          = COMCOM.CURRENT.LINE,
     2033+   12934                             @ATTR             = FALSE,
     2034+   12935                             @NEXT             = "ADDR(NIL)",
     2035+   12936                             @DNT$             = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:322  
     2036+   12937                             @PROC$            = ,
     2037+   12938                             @QLT$             = "ADDR(NIL)");
     2038+   12939          DO;
     2039+   12940            %RESERVE_ST (POINTER = @ST$);
     2040+   12941
     2041+   12942            @ST$ -> DCB_.ID                 = %DCB_;
     2042+   12943            @ST$ -> DCB_.R                  = @R;
     2043+   12944            @ST$ -> DCB_.COUNT              = @COUNT;
     2044+   12945            @ST$ -> DCB_.SIZE               = @SIZE;
     2045+   12946            @ST$ -> DCB_.LINE_NO            = @LINE_NO;
     2046+   12947            @ST$ -> DCB_.ATTR               = @ATTR;
     2047+   12948            @ST$ -> DCB_.NEXT               = @NEXT;
     2048+   12949            @ST$ -> DCB_.DNT$               = @DNT$;
     2049+   12950            @ST$ -> DCB_.QLT$               = @QLT$;
     2050+   12951
     2051+   12952                 %UPDATE_PROC_LINK (@TEMPLATE = DCB_, @ST$ = @ST$, @PROC$ = @PROC$);
     2052+   12953          END;
     2053+   12954        %MEND;
     2054+   12955        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:323  
     2055+   12956
     2056+   12957    1   DCL 1 MNEMONIC                BASED (ST$) ALIGNED,
     2057+   12958
     2058+   12959    1        2 ID                     UBIN HALF UNAL,
     2059+   12960    1        2 *                      UBIN HALF UNAL,
     2060+   12961
     2061+   12962    1        2 NAME                   UBIN WORD UNAL, /* Rsv wrd # */
     2062+   12963    1        2 VFC                    REDEF NAME,
     2063+   12964    1          3 CHAR_                CHAR (1) UNAL,
     2064+   12965    1          3 *                    CHAR (3) UNAL,
     2065+   12966    1        2 CHANNEL#               REDEF NAME UBIN UNAL,
     2066+   12967
     2067+   12968    1        2 TYPE                   UBIN HALF UNAL,
     2068+   12969    1        2 LINE_NO                UBIN HALF UNAL,
     2069+   12970
     2070+   12971    1        2 ATTR                   BIT (36),
     2071+   12972    1        2 B                      REDEF ATTR,
     2072+   12973    1          3 VFC_CHAR             BOOLEAN,
     2073+   12974    1          3 CHANNEL              BOOLEAN,
     2074+   12975    1          3 MNEMONIC_NAME        BOOLEAN,
     2075+   12976    1          3 *                    (0:32) BOOLEAN,
     2076+   12977
     2077+   12978    1        2 NEXT                   PTR,
     2078+   12979
     2079+   12980    1        2 *                      PTR,
     2080+   12981
     2081+   12982    1        2 DNT$                   PTR,
     2082+   12983
     2083+   12984    1        2 QLT$                   PTR,
     2084+   12985
     2085+   12986    1        2 *                      PTR,
     2086+   12987
     2087+   12988    1        2 PROC$                  PTR,
     2088+   12989    1        2 LINK                   PTR;
     2089+   12990
     2090+   12991
     2091+   12992        %MACRO NEW_MNEMONIC (@ST$         = ST$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:324  
     2092+   12993                             @NAME        = ,
     2093+   12994                             @CHANNEL#    = ,
     2094+   12995                             @VFC_CHAR_   = ,
     2095+   12996                             @TYPE        = %TYG,
     2096+   12997                             @LINE_NO     = COMCOM.CURRENT.LINE,
     2097+   12998                             @ATTR        = '0'B,
     2098+   12999                             @CHANNEL     = ,
     2099+   13000                             @VFC_CHAR    = ,
     2100+   13001                             @MNEMONIC_NAME=,
     2101+   13002                             @NEXT        = "ADDR(NIL)",
     2102+   13003                             @DNT$        = "ADDR(NIL)",
     2103+   13004                             @PROC$       = ,
     2104+   13005                             @QLT$        = "ADDR(NIL)");
     2105+   13006
     2106+   13007               DO;
     2107+   13008                 %RESERVE_ST (POINTER = @ST$);
     2108+   13009
     2109+   13010                 @ST$ -> MNEMONIC.ID          = %MNEMONIC;
     2110+   13011                 @ST$ -> MNEMONIC.TYPE        = @TYPE;
     2111+   13012                 @ST$ -> MNEMONIC.LINE_NO     = @LINE_NO;
     2112+   13013                 @ST$ -> MNEMONIC.ATTR        = @ATTR;
     2113+   13014                 @ST$ -> MNEMONIC.NEXT        = @NEXT;
     2114+   13015                 @ST$ -> MNEMONIC.DNT$        = @DNT$;
     2115+   13016                 @ST$ -> MNEMONIC.QLT$        = @QLT$;
     2116+   13017
     2117+   13018                 %UPDATE_PROC_LINK (@TEMPLATE = MNEMONIC, @ST$ = @ST$, @PROC$ = @PROC$);
     2118+   13019
     2119+   13020                 %IF TEXTCHAR(@NAME) ~= '';
     2120+   13021                   @ST$ -> MNEMONIC.NAME      = @NAME;
     2121+   13022                   %ELSEIF TEXTCHAR(@VFC_CHAR_) ~= '';
     2122+   13023                     @ST$ -> MNEMONIC.VFC       = FALSE;
     2123+   13024                     @ST$ -> MNEMONIC.VFC.CHAR_ = @VFC_CHAR_;
     2124+   13025                   %ELSE;
     2125+   13026                       @ST$ -> MNEMONIC.CHANNEL# = @CHANNEL#;
     2126+   13027                 %ENDIF;
     2127+   13028
     2128+   13029                 %IF TEXTCHAR(@VFC_CHAR) ~= '';
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:325  
     2129+   13030                   @ST$ -> MNEMONIC.B.VFC_CHAR = @VFC_CHAR;
     2130+   13031                 %ENDIF;
     2131+   13032                 %IF TEXTCHAR(@MNEMONIC_NAME) ~= '';
     2132+   13033                   @ST$ -> MNEMONIC.B.MNEMONIC_NAME = @MNEMONIC_NAME;
     2133+   13034                 %ENDIF;
     2134+   13035                 %IF TEXTCHAR(@CHANNEL) ~= '';
     2135+   13036                   @ST$ -> MNEMONIC.B.CHANNEL = @CHANNEL;
     2136+   13037                 %ENDIF;
     2137+   13038
     2138+   13039               END;
     2139+   13040
     2140+   13041        %MEND;
     2141+   13042        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:326  
     2142+   13043
     2143+   13044    1   DCL 1 SWITCH                  BASED (ST$) ALIGNED,
     2144+   13045
     2145+   13046    1        2 ID                     UBIN HALF UNAL,
     2146+   13047    1        2 *                      UBIN HALF UNAL,
     2147+   13048
     2148+   13049    1        2 OFF$                   PTR,
     2149+   13050
     2150+   13051    1        2 TYPE                   UBIN HALF UNAL,
     2151+   13052    1        2 LINE_NO                UBIN HALF UNAL,
     2152+   13053
     2153+   13054    1        2 ATTR                   BIT (18),
     2154+   13055    1        2 B                      REDEF ATTR,
     2155+   13056    1          3 *                    (0:17) BOOLEAN,
     2156+   13057    1        2 SWITCH#                UBIN HALF UNAL,
     2157+   13058
     2158+   13059    1        2 NEXT                   PTR,
     2159+   13060
     2160+   13061    1        2 ON$                    PTR,
     2161+   13062
     2162+   13063    1        2 DNT$                   PTR,
     2163+   13064
     2164+   13065    1        2 QLT$                   PTR,
     2165+   13066
     2166+   13067    1        2 *                      PTR,
     2167+   13068
     2168+   13069    1        2 PROC$                  PTR,
     2169+   13070    1        2 LINK                   PTR;
     2170+   13071
     2171+   13072
     2172+   13073        %MACRO NEW_SWITCH (@ST$       = ST$,
     2173+   13074                           @TYPE      = %TYG,
     2174+   13075                           @LINE_NO   = COMCOM.CURRENT.LINE,
     2175+   13076                           @ATTR      = FALSE,
     2176+   13077                           @NEXT      = "ADDR(NIL)",
     2177+   13078                           @SWITCH#   = 0,
     2178+   13079                           @DNT$      = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:327  
     2179+   13080                           @QLT$      = "ADDR(NIL)",
     2180+   13081                           @PROC$     = ,
     2181+   13082                           @ON$       = "ADDR(NIL)",
     2182+   13083                           @OFF$      = "ADDR(NIL)");
     2183+   13084
     2184+   13085               DO;
     2185+   13086                 %RESERVE_ST   (POINTER = @ST$);
     2186+   13087
     2187+   13088                 @ST$ -> SWITCH.ID        = %SWITCH;
     2188+   13089                 @ST$ -> SWITCH.TYPE      = @TYPE;
     2189+   13090                 @ST$ -> SWITCH.LINE_NO   = @LINE_NO;
     2190+   13091                 @ST$ -> SWITCH.ATTR      = @ATTR;
     2191+   13092                 @ST$ -> SWITCH.NEXT      = @NEXT;
     2192+   13093                 @ST$ -> SWITCH.SWITCH#   = @SWITCH#;
     2193+   13094                 @ST$ -> SWITCH.DNT$      = @DNT$;
     2194+   13095                 @ST$ -> SWITCH.QLT$      = @QLT$;
     2195+   13096
     2196+   13097                 %UPDATE_PROC_LINK (@TEMPLATE = SWITCH, @ST$ = @ST$, @PROC$ = @PROC$);
     2197+   13098                 @ST$ -> SWITCH.ON$       = @ON$;
     2198+   13099                 @ST$ -> SWITCH.OFF$      = @OFF$;
     2199+   13100               END;
     2200+   13101
     2201+   13102        %MEND;
     2202+   13103        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:328  
     2203+   13104
     2204+   13105
     2205+   13106        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:329  
     2206+   13107
     2207+   13108    1      DCL 1 ALPHABET      BASED (ST$) ALIGNED,
     2208+   13109    1            2 ID          UBIN HALF UNAL,
     2209+   13110    1            2 *           UBIN HALF UNAL,
     2210+   13111
     2211+   13112    1            2 TABLE_ETT$  PTR,
     2212+   13113
     2213+   13114    1            2 TYPE        UBIN HALF UNAL,
     2214+   13115    1            2 LINE_NO     UBIN HALF UNAL,
     2215+   13116    1            2 ATTR        BIT (36),
     2216+   13117    1            2 B           REDEF ATTR,
     2217+   13118    1              3 ALSO      BOOLEAN,
     2218+   13119    1              3 SET_LOW_VALUE    BOOLEAN,
     2219+   13120    1              3 GTR_255   BOOLEAN,
     2220+   13121    1              3 *         (0:23) BOOLEAN,
     2221+   13122    1              3 CODE      UBIN (9) UNAL,
     2222+   13123
     2223+   13124    1            2 NEXT        PTR,
     2224+   13125    1            2 TABLE$      PTR,
     2225+   13126    1            2 DNT$        PTR,
     2226+   13127    1            2 HIGH_VALUE  UBIN BYTE UNAL,
     2227+   13128    1            2 LOW_VALUE   UBIN BYTE UNAL,
     2228+   13129    1            2 NUM_VALUES  UBIN HALF UNAL,
     2229+   13130    1            2 *           PTR,
     2230+   13131    1            2 PROC$       PTR,
     2231+   13132    1            2 LINK        PTR;
     2232+   13133
     2233+   13134
     2234+   13135           %MACRO NEW_ALPHABET (@ST$         = ST$,
     2235+   13136                                @ATTR        = FALSE,
     2236+   13137                                @ALSO        = FALSE,
     2237+   13138                                @SET_LOW_VALUE = FALSE,
     2238+   13139                                @GTR_255     = FALSE,
     2239+   13140                                @LINE_NO     = COMCOM.CURRENT.LINE,
     2240+   13141                                @NEXT        = "ADDR(NIL)",
     2241+   13142                                @TYPE        = %TYG,
     2242+   13143                                @CODE        = %ASCII,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:330  
     2243+   13144                                @DNT$        = "ADDR(NIL)",
     2244+   13145                                @PROC$       = ,
     2245+   13146                                @HIGH_VALUE  = 127,
     2246+   13147                                @LOW_VALUE   = 0,
     2247+   13148                                @TABLE_ETT$  = "ADDR(NIL)",
     2248+   13149                                @NUM_VALUES  = 0,
     2249+   13150                                @TABLE$      = "ADDR(NIL)");
     2250+   13151
     2251+   13152               DO;
     2252+   13153                 %RESERVE_ST (POINTER = @ST$);
     2253+   13154
     2254+   13155                 @ST$ -> ALPHABET.ID         = %ALPHABET;
     2255+   13156                 @ST$ -> ALPHABET.LINE_NO    = @LINE_NO;
     2256+   13157                 @ST$ -> ALPHABET.TYPE       = @TYPE;
     2257+   13158                 @ST$ -> ALPHABET.ATTR       = @ATTR;
     2258+   13159                 @ST$ -> ALPHABET.B.CODE     = @CODE;
     2259+   13160                 @ST$ -> ALPHABET.NEXT       = @NEXT;
     2260+   13161                 @ST$ -> ALPHABET.DNT$       = @DNT$;
     2261+   13162
     2262+   13163                 %UPDATE_PROC_LINK (@TEMPLATE = ALPHABET, @ST$ = @ST$, @PROC$ = @PROC$);
     2263+   13164                 @ST$ -> ALPHABET.HIGH_VALUE = @HIGH_VALUE;
     2264+   13165                 @ST$ -> ALPHABET.LOW_VALUE  = @LOW_VALUE;
     2265+   13166                 @ST$ -> ALPHABET.TABLE$     = @TABLE$;
     2266+   13167                 @ST$ -> ALPHABET.NUM_VALUES = @NUM_VALUES;
     2267+   13168                 @ST$ -> ALPHABET.TABLE_ETT$ = @TABLE_ETT$;
     2268+   13169
     2269+   13170                 %IF (TEXTCHAR (@ALSO) ~= '');
     2270+   13171                   @ST$ -> ALPHABET.B.ALSO = @ALSO;
     2271+   13172                 %ENDIF;
     2272+   13173                 %IF (TEXTCHAR (@SET_LOW_VALUE) ~= '');
     2273+   13174                   @ST$ -> ALPHABET.B.SET_LOW_VALUE = @SET_LOW_VALUE;
     2274+   13175                 %ENDIF;
     2275+   13176                 %IF (TEXTCHAR (@GTR_255) ~= '');
     2276+   13177                   @ST$ -> ALPHABET.B.GTR_255 = @GTR_255;
     2277+   13178                 %ENDIF;
     2278+   13179               END;
     2279+   13180
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:331  
     2280+   13181           %MEND;
     2281+   13182
     2282+   13183
     2283+   13184    1      DCL 1 CLASS                BASED (ST$) ALIGNED,
     2284+   13185    1            2 ID                 UBIN HALF UNAL,
     2285+   13186    1            2 *                  UBIN HALF UNAL,
     2286+   13187
     2287+   13188    1            2 TABLE$             PTR,
     2288+   13189
     2289+   13190    1            2 TYPE               UBIN HALF UNAL,
     2290+   13191    1            2 LINE_NO            UBIN HALF UNAL,
     2291+   13192    1            2 ATTR               BIT (36),
     2292+   13193    1            2 B                  REDEF ATTR,
     2293+   13194    1              3 *                (0:35) BOOLEAN,
     2294+   13195
     2295+   13196    1            2 NEXT               PTR,
     2296+   13197    1            2 *                  PTR,
     2297+   13198    1            2 DNT$               PTR,
     2298+   13199    1            2 QLT$               PTR,
     2299+   13200    1            2 *                  PTR,
     2300+   13201    1            2 PROC$              PTR,
     2301+   13202    1            2 LINK               PTR;
     2302+   13203
     2303+   13204
     2304+   13205           %MACRO NEW_CLASS (@ST$ = ST$,
     2305+   13206                             @TABLE$  = "ADDR(NIL)",
     2306+   13207                             @TYPE    = %TYG,
     2307+   13208                             @LINE_NO = COMCOM.CURRENT.LINE,
     2308+   13209                             @ATTR    = FALSE,
     2309+   13210                             @NEXT    = "ADDR(NIL)",
     2310+   13211                             @DNT$    = "ADDR(NIL)",
     2311+   13212                             @PROC$   = ,
     2312+   13213                             @QLT$    = "ADDR(NIL)");
     2313+   13214
     2314+   13215             DO;
     2315+   13216               %RESERVE_ST (POINTER = @ST$);
     2316+   13217
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:332  
     2317+   13218               @ST$ -> CLASS.ID       = %CLASS;
     2318+   13219               @ST$ -> CLASS.TABLE$   = @TABLE$;
     2319+   13220               @ST$ -> CLASS.TYPE     = @TYPE;
     2320+   13221               @ST$ -> CLASS.LINE_NO  = @LINE_NO;
     2321+   13222               @ST$ -> CLASS.ATTR     = @ATTR;
     2322+   13223               @ST$ -> CLASS.NEXT     = @NEXT;
     2323+   13224               @ST$ -> CLASS.DNT$     = @DNT$;
     2324+   13225               @ST$ -> CLASS.QLT$     = @QLT$;
     2325+   13226
     2326+   13227                 %UPDATE_PROC_LINK (@TEMPLATE = CLASS, @ST$ = @ST$, @PROC$ = @PROC$);
     2327+   13228             END;
     2328+   13229           %MEND;
     2329+   13230
     2330+   13231
     2331+   13232
     2332+   13233    1      DCL 1 SYMBOLIC_CHAR        BASED (ST$) ALIGNED,
     2333+   13234    1            2 ID                 UBIN HALF UNAL,
     2334+   13235    1            2 *                  UBIN HALF UNAL,
     2335+   13236    1            2 *                  UBIN WORD UNAL,
     2336+   13237
     2337+   13238    1            2 TYPE               UBIN HALF UNAL,
     2338+   13239    1            2 LINE_NO            UBIN HALF UNAL,
     2339+   13240    1            2 ATTR               BIT (36),
     2340+   13241    1            2 B                  REDEF ATTR,
     2341+   13242    1              3 *                (0:35) BOOLEAN,
     2342+   13243
     2343+   13244    1            2 NEXT               PTR,
     2344+   13245    1            2 CONST$             PTR,
     2345+   13246    1            2 DNT$               PTR,
     2346+   13247    1            2 QLT$               PTR,
     2347+   13248    1            2 *                  PTR,
     2348+   13249    1            2 PROC$              PTR,
     2349+   13250    1            2 LINK               PTR;
     2350+   13251
     2351+   13252
     2352+   13253           %MACRO NEW_SYM_CHAR (@ST$         = ST$,
     2353+   13254                                @ATTR        = FALSE,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:333  
     2354+   13255                                @LINE_NO     = COMCOM.CURRENT.LINE,
     2355+   13256                                @TYPE        = %TYG,
     2356+   13257                                @NEXT        = "ADDR(NIL)",
     2357+   13258                                @DNT$        = "ADDR(NIL)",
     2358+   13259                                @QLT$        = "ADDR(NIL)",
     2359+   13260                                @PROC$       = ,
     2360+   13261                                @CONST$      = "ADDR(NIL)");
     2361+   13262
     2362+   13263               DO;
     2363+   13264                 %RESERVE_ST (POINTER = @ST$);
     2364+   13265
     2365+   13266                 @ST$ -> SYMBOLIC_CHAR.ID         = %SYM_CHAR;
     2366+   13267                 @ST$ -> SYMBOLIC_CHAR.LINE_NO    = @LINE_NO;
     2367+   13268                 @ST$ -> SYMBOLIC_CHAR.TYPE       = @TYPE;
     2368+   13269                 @ST$ -> SYMBOLIC_CHAR.ATTR       = @ATTR;
     2369+   13270                 @ST$ -> SYMBOLIC_CHAR.NEXT       = @NEXT;
     2370+   13271                 @ST$ -> SYMBOLIC_CHAR.DNT$       = @DNT$;
     2371+   13272                 @ST$ -> SYMBOLIC_CHAR.QLT$       = @QLT$;
     2372+   13273
     2373+   13274                %UPDATE_PROC_LINK (@TEMPLATE = SYMBOLIC_CHAR, @ST$ = @ST$, @PROC$ = @PROC$);
     2374+   13275                 @ST$ -> SYMBOLIC_CHAR.CONST$     = @CONST$;
     2375+   13276               END;
     2376+   13277
     2377+   13278           %MEND;
     2378+   13279
     2379+   13280
     2380+   13281        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:334  
     2381+   13282
     2382+   13283
     2383+   13284        %MACRO SET_OF_ST_ITEMS;
     2384+   13285
     2385+   13286             %TEMP,
     2386+   13287             %MNEMONIC,
     2387+   13288             %SWITCH,
     2388+   13289             %ALPHABET,
     2389+   13290             %CONDITION,
     2390+   13291             %ARRAY,
     2391+   13292             %SCALAR,
     2392+   13293             %CSIB,
     2393+   13294             %CONST,
     2394+   13295             %SECTION,
     2395+   13296             %PARA,
     2396+   13297             %SYMREF_,
     2397+   13298             %SYMDEF_,
     2398+   13299             %BLOCK,
     2399+   13300             %INDUCT,
     2400+   13301             %INTDEF,
     2401+   13302             %POINTER,
     2402+   13303             %SEGMENT,
     2403+   13304             %FD,
     2404+   13305             %SD,
     2405+   13306             %CD,
     2406+   13307             %RD,
     2407+   13308             %DB,
     2408+   13309             %CLASS,
     2409+   13310             %DCB_,
     2410+   13311             %REALM,
     2411+   13312             %DML_SET,
     2412+   13313             %DML_KEY,
     2413+   13314             %PRIVACY_KEY
     2414+   13315
     2415+   13316        %MEND;
     2416+   13317
     2417+   13318        %MACRO SET_OF_FILE_DESCRIPTIONS;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:335  
     2418+   13319
     2419+   13320             %FD,
     2420+   13321             %SD,
     2421+   13322             %RD
     2422+   13323
     2423+   13324        %MEND;
     2424+   13325
     2425+   13326
     2426+   13327        %MACRO ST_ITEMS_WITH_STORAGE ;
     2427+   13328             %TEMP,
     2428+   13329             %ARRAY,
     2429+   13330             %SCALAR,
     2430+   13331             %CSIB,
     2431+   13332             %CONST,
     2432+   13333             %FD,
     2433+   13334             %SD,
     2434+   13335             %RD,
     2435+   13336             %CD,
     2436+   13337             %POINTER
     2437+   13338        %MEND;
     2438+   13339
     2439+   13340
     2440+   13341
     2441+   13342
     2442+   13343        %EQU COMP1_LENGTH = 2 ; /* Length in terms of bytes */
     2443+   13344        %EQU COMP2_LENGTH = 4 ;
     2444+   13345        %EQU COMP6_LENGTH = 4 ;
     2445+   13346        %EQU COMP7_LENGTH = 2 ;
     2446+   13347        %EQU COMP11_13_LENGTH = 4 ;
     2447+   13348        %EQU COMP12_14_LENGTH = 8 ;
     2448+   13349
     2449+   13350        %EQU FLOATING_POINT_LEADING_SIGN = '00'B;
     2450+   13351        %EQU LEADING_SIGN = '01'B;
     2451+   13352        %EQU TRAILING_SIGN = '10'B;
     2452+   13353        %EQU NO_SIGN = '11'B;
     2453+   13354        %EQU OVP_LEADING_SIGN = '00'B;
     2454+   13355        %EQU OVP_TRAILING_SIGN = '11'B;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:336  
     2455+   13356
     2456+   13357        %EQU ADSC4 = '10'B;
     2457+   13358        %EQU ADSC6 = '01'B;
     2458+   13359        %EQU ADSC9 = '00'B;
     2459+   13360
     2460+   13361        %EQU NDSC4 = TRUE;
     2461+   13362        %EQU NDSC9 = FALSE;
     2462+   13363
     2463+   13364        %EQU ABSOLUTE = 0;
     2464+   13365        %EQU PROGRAM  = 1;
     2465+   13366        %EQU EXT_PROGRAM = 2;
     2466+   13367        %EQU BLOCK_   = 3;
     2467+   13368        %EQU START_BLK = 4;
     2468+   13369
     2469+   13370
     2470+   13371        /* Preprocessor values for SCALAR CLASS */
     2471+   13372
     2472+   13373        %EQU CLASS_EDITED               = 4;
     2473+   13374        %EQU CLASS_ALPHANUMERIC         = 3;
     2474+   13375        %EQU CLASS_ALPHABETIC           = 2;
     2475+   13376        %EQU CLASS_NUMERIC              = 1;
     2476+   13377        %EQU CLASS_NUMERIC_EDITED       = %(CLASS_NUMERIC + CLASS_EDITED);
     2477+   13378        %EQU CLASS_ALPHANUMERIC_EDITED  = %(CLASS_ALPHANUMERIC + CLASS_EDITED);
     2478+   13379        %EQU CLASS_ALPHABETIC_EDITED    = %(CLASS_ALPHABETIC + CLASS_EDITED);
     2479+   13380        %EQU CLASS_UNDEFINED            = 0;
     2480+   13381        %EQU CLASS_POINTER              = 0; /* Same as UNDEFINED */
     2481+   13382
     2482+   13383        /* Preprocessor values for ALPHABET types (CODE) */
     2483+   13384
     2484+   13385        %EQU ASCII             = 0;
     2485+   13386        %EQU JIS               = 1;
     2486+   13387        %EQU GRAPHIC           = 2;
     2487+   13388        %EQU EBCDIC            = 3;
     2488+   13389        %EQU GBCD              = 4;
     2489+   13390        %EQU HBCD              = 5;
     2490+   13391        %EQU USER_DEFINED      = 6;
     2491+   13392
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:337  
     2492+   13393
     2493+   13394        /* Channel numbers */
     2494+   13395        %EQU CPS =  0;
     2495+   13396        %EQU C01 =  1;
     2496+   13397        %EQU C02 =  2;
     2497+   13398        %EQU C03 =  3;
     2498+   13399        %EQU C04 =  4;
     2499+   13400        %EQU C05 =  5;
     2500+   13401        %EQU C06 =  6;
     2501+   13402        %EQU C07 =  7;
     2502+   13403        %EQU C08 =  8;
     2503+   13404        %EQU C09 =  9;
     2504+   13405        %EQU C10 = 10;
     2505+   13406        %EQU C11 = 11;
     2506+   13407        %EQU C12 = 12;
     2507+   13408        %EQU C13 = 13;
     2508+   13409        %EQU C14 = 14;
     2509+   13410        %EQU C15 = 15;
     2510+   13411
     2511+   13412        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:338  
      498    13413    1   RETURN ;
      499    13414    1   END ;

PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:339  
--  Include file information  --

   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_QLT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_O1COM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LEX_SYMB.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_STACKS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_TYPES.:Z8A6TOU  is referenced.
   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8DD$DOCUMENT.

   Procedure Z8DD$DOCUMENT requires 3 words for executable code.
   Procedure Z8DD$DOCUMENT is declared NOAUTO and requires 2 words of local(STATIC) storage.

    No errors detected in file Z8DD.:Z8A6TSI    .

PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:340  

 Object Unit name= Z8DD$DOCUMENT                              File name= Z8DD.:Z8A6TOU
 UTS= AUG 09 '97 11:05:12.08 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     2      2  Z8DD$DOCUMENT
    1  LblCom even  none     1      1  ITERATION
    2  LblCom even  none    90    132  LEX_SYMBOL
    3  LblCom even  none     1      1  CURRENT_LEX_SYMBOL$
    4  LblCom even  none    90    132  TEMP_LEX_SYMBOL
    5  LblCom even  none    90    132  TEMP_LEX_SYMBOL2
    6  LblCom even  none     1      1  LTS$
    7  LblCom even  none     5      5  LTS_
    8  LblCom even  none     1      1  QLT$
    9  LblCom even  none     1      1  PREV_01_QLT$
   10  LblCom even  none     5      5  QLT_
   11  LblCom even  none     1      1  ST$
   12  LblCom even  none     5      5  ST_
   13   Proc  even  none     3      3  Z8DD$DOCUMENT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes            yes      Std        0  Z8DD$DOCUMENT
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:341  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     COMCOM                                O1COM                                 HIER_STK_PTR
     HIER_STK                              PAGE_FORMAT                           REP_STK_PTR
     REP_STK                          r    LTS_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:342  


        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        Z8DD$DOCUMENT: PROC NOAUTO ;

      6 13 000000   000000 741200 0     Z8DD$DOCUME* STX1  ! 0

        7        7        /*M*  Z8DD$DOCUMENT -- Phase 1 Storage allocation overview */
        8        8
        9        9        %SET LISTINC = '1'B ;
       10       10
       11       11        /*P*
       12       12               NAME:  Z8DD$DOCUMENT
       13       13            PURPOSE:  Explains the functions of preliminary storage allocation and
       14       14                      span calculations done during Phase 1.
       15       15        */
       16       16
       17       17        /*F*
       18       18               NAME:  PURPOSE
       19       19             AUTHOR:  GK Myers  (6/05/81)
       20       20          REFERENCE:  Frank Helwig's article 'Storage Allocation'
       21       21
       22       22                      Phase 1 storage allocation calculates all of the offsets within
       23       23                      an 01 structure and calculates the span of all array entries.
       24       24                      The offsets are then stored for later usage by Phase 2 which
       25       25                      calculates the storage location by adding the offset of the 01
       26       26                      item to the variable's offset within the 01 structure to get
       27       27                      the actual location.  The span fields of an array are the actual
       28       28                      length of each dimension of the item.  This is used to
       29       29                      calculate locations of subscripted values of array items.
       30       30        */
       31       31        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:343  
       32       32        /*F*
       33       33               NAME:  METHOD
       34       34             AUTHOR:  GK Myers (06/05/81)
       35       35
       36       36                      The code for these modules is in PL-6.  The master module
       37       37                      (Z8DA$STORAGE_ALLOCATION) is called by Phase 1 upon reaching
       38       38                      the end of the DATA DIVISION.  The master module then calls
       39       39                      the procedures to calculate the sizes and spans of variables
       40       40                      within a 01 data structure.
       41       41
       42       42                      The modules and their relationships are described in the
       43       43                      following diagram:
       44       44
       45       45                          ******************************      ********************
       46       46                          !                            !----->!                  !<-----
       47       47        Z8EM$SEMANTICS    !                            !      !  Z8DC$SIZE_CALC  !     !
       48       48                  ------->!                            !      !    (Recursive)   !     !
       49       49                          !                            !      !                  !------
       50       50                          !  Z8DA$STORAGE_ALLOCATION   !      ********************
       51       51                          !                            !      ********************
       52       52                          !                            !----->!                  !<-----
       53       53                          !                            !      !  Z8DS$SPAN_CALC  !     !
       54       54                          !                            !      !    (Recursive)   !     !
       55       55                          !                            !      !                  !------
       56       56                          ******************************      ********************
       57       57
       58       58            Z8EM$SEMANTICS_DATA_DIV  Phase 1 SEMANTICS routine calls Z8DA upon reaching
       59       59                                     the end of the DATA DIVISION.
       60       60
       61       61            Z8DA$STORAGE_ALLOCATION  Storage allocation root.  Calls Z8DC$SIZE_CALC,
       62       62                                     Z8DS$SPAN_CALC and does initialization for all
       63       63                                     data structures as it steps through the QLT.
       64       64
       65       65            Z8DC$SIZE_CALC           Calculates the size and alignment of each variable
       66       66                                     within a structure.  It starts with the 02's and
       67       67                                     then is called recursively to calculate the 03's,
       68       68                                     04's, etc. until all of the variables are
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:344  
       69       69                                     calculated.
       70       70
       71       71            Z8DS$SPAN_CALC           Calculates the spans for each variable within a
       72       72                                     structure.  As in Z8DC it starts with the 02's and
       73       73                                     then is called recursively to calculate the other
       74       74                                     levels within the structure.
       75       75        */
       76       76        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:345  
       77       77        /*F*
       78       78               NAME:  FORMAT_OF_INPUT
       79       79            CHAPTER:  Overview
       80       80             AUTHOR:  GK Myers (06/08/81)
       81       81
       82       82                      The information needed for storage allocation and span calculation
       83       83                      is stored in three tables.  When Phase 1 allocates a data item, it
       84       84                      creates an entry in the symbol table, qualifier links table, and
       85       85                      if the item is dimensioned a LTS entry.  A brief description
       86       86                      of the three tables follows.
       87       87
       88       88                         LTS  - Long Term Supplement.  This table gives information
       89       89                                for array entries, edited entries, items with lengths
       90       90                                greater than the ST.ADSC.N field, and a controller
       91       91                                entry if needed.  This table is accessed via pointers
       92       92                                in the ST.
       93       93
       94       94                         QLT  - Qualifier Links Table.  This table contains bits
       95       95                                giving further information about a symbol table
       96       96                                item and also details the entry's father,
       97       97                                brother, and son if one exists.  The table is accessed
       98       98                                sequentially or by pointers in the ST.
       99       99
      100      100                          ST  - Symbol Table.  This table is comprised of items
      101      101                                representing encoded versions of data names, file
      102      102                                names, labels, etc.  The information concerning
      103      103                                the items location, type, and length is contained
      104      104                                here.  This table is accessed sequentially or by
      105      105                                pointers in the QLT.
      106      106        */
      107      107
      108      108        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:346  
      109      109        /*F*
      110      110               NAME:  FORMAT_OF_INPUT
      111      111            CHAPTER:  LTS_table
      112      112
      113      113                      Whenever an item has an occurs clause or if it is an
      114      114                      edited item, Phase 1 will set up an LTS entry.  The type
      115      115                      of entry is dependent on which clause is used.  If more
      116      116                      than one clause is used an LTSS item is created which
      117      117                      holds pointers to the various LTS entries.  Another entry
      118      118                      is set up if the variable's size is greater than 4095 as its
      119      119                      size can't be stored in the symbol table.
      120      120
      121      121                      (1) The dimensioned entry consists of
      122      122
      123      123                          DIMS.ID            identification code
      124      124                          DIMS.N             length of entry in words
      125      125                          DIMS.DN2           pointer to dataname it depends on or nill
      126      126                          DIMS.D.DIM(0:49)   number of items in kth dimension
      127      127                          DIMS.D.SPAN(0:49)  span of item
      128      128                          DIMS.D.INDEX(0:49) pointer to kth index or nill
      129      129
      130      130                DIMS
      131      131                0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      132      132               I-----------------I-----------------I-----------------I-----------------I
      133      133              0!ID                                 !N                                  !
      134      134               I-----------------I-----------------I-----------------I-----------------I
      135      135              1!DN2                                                                    !
      136      136               I-----------------I-----------------I-----------------I-----------------I
      137      137              2!SPAN                                                                   !
      138      138               I-----------------I-----------------I-----------------I-----------------I
      139      139              3!DIM                                                                    !
      140      140               I-----------------I-----------------I-----------------I-----------------I
      141      141              4!INDEX$                                                                 !
      142      142               I-----------------I-----------------I-----------------I-----------------I
      143      143                ARRAY:'  62'O ENTRIES TOTAL.
      144      144               I-----------------I-----------------I-----------------I-----------------I
      145      145
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:347  
      146      146                      (2) We are not concerned with the edited entry.
      147      147
      148      148                      (3) The long entry consists of
      149      149
      150      150                          LONG.ID            identification code
      151      151                          LONG.LENGTH        length of item
      152      152
      153      153                LONG
      154      154                0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      155      155               I-----------------I-----------------I-----------------I-----------------I
      156      156              0!ID                                 !*                                  !
      157      157               I-----------------I-----------------I-----------------I-----------------I
      158      158              1!LENGTH                                                                 !
      159      159               I-----------------I-----------------I-----------------I-----------------I
      160      160
      161      161                      (4) LTSS entry to manage multiple Lts entries.
      162      162
      163      163                          LTSS.ID            identification code
      164      164                          LTSS.DIMS$         pointer to dimensioned entry
      165      165                          LTSS.NEL$          pointer to edited entry
      166      166                          LTSS.LONG$         pointer to long entry
      167      167
      168      168                LTSS
      169      169                0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      170      170               I-----------------I-----------------I-----------------I-----------------I
      171      171              0!ID                                 !*                                  !
      172      172               I-----------------I-----------------I-----------------I-----------------I
      173      173              1!DIMS$                                                                  !
      174      174               I-----------------I-----------------I-----------------I-----------------I
      175      175              2!NEL$                                                                   !
      176      176               I-----------------I-----------------I-----------------I-----------------I
      177      177              3!LONG$                                                                  !
      178      178               I-----------------I-----------------I-----------------I-----------------I
      179      179        */
      180      180        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:348  
      181      181        /*F*
      182      182               NAME:  FORMAT_OF_INPUT
      183      183            CHAPTER:  QLT table
      184      184
      185      185                      A qualifier item is set up for every array, scalar, or label
      186      186                      item in the symbol table.
      187      187
      188      188                          QLT.FATHER        pointer to father or nill
      189      189                          QLT.BROTHER       pointer to brother or nill
      190      190                          QLT.SON           pointer to son or nill
      191      191                          QLT.ST$           pointer to ST entry
      192      192
      193      193                        Attribute bits:
      194      194
      195      195                          QLT.B.OCCURS      item has an occurs clause
      196      196                          QLT.B.SYNC        item has synchronized clause
      197      197                          QLT.B.DIGIT       COMP-4 or (COMP-8 when not synchronized)
      198      198
      199      199                QLT
      200      200                0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      201      201               I-----------------I-----------------I-----------------I-----------------I
      202      202              0!ID                                 !. . . . . . . . . . . . . . . . . .!
      203      203               I-----------------I-----------------I-----------------I-----------------I
      204      204              0!. . . . . . . . . . . . . . . . . .!O!S!D!*                            !
      205      205               I-----------------I-----------------I-----------------I-----------------I
      206      206              1!FATHER                                                                 !
      207      207               I-----------------I-----------------I-----------------I-----------------I
      208      208              2!BROTHER                                                                !
      209      209               I-----------------I-----------------I-----------------I-----------------I
      210      210              3!SON                                                                    !
      211      211               I-----------------I-----------------I-----------------I-----------------I
      212      212              4!ST$                                                                    !
      213      213               I-----------------I-----------------I-----------------I-----------------I
      214      214              5!DNT$                                                                   !
      215      215               I-----------------I-----------------I-----------------I-----------------I
      216      216        */
      217      217        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:349  
      218      218        /*F*
      219      219               NAME:  FORMAT_OF_INPUT
      220      220            CHAPTER:  ST
      221      221
      222      222                      A symbol table item is set up for every block, label, array,
      223      223                      constant, or scalar item.  Some of the items in this
      224      224                      table are redefined for generator usage.
      225      225
      226      226                          ST.ID             identification code
      227      227                          ST.R              relocation: 1 for labels, 3 for variables
      228      228                          ST.COUNT          block number
      229      229                          ST.SA             storage address
      230      230                          ST.TYPE           data type ie. COMP-6, COMP-7, etc.
      231      231                          ST.LINE_NO        line number of declaration
      232      232
      233      233                      A descriptor field is set up with information depending on the
      234      234                      item being numeric (NDSC), alphabetic (ADSC), or bit (BDSC).
      235      235
      236      236                        Alpha Descriptor
      237      237                          ST.ADSC.CN        byte position within word
      238      238                          ST.ADSC.N         length of item in bytes (if > 4095 then
      239      239                                            stored in LONG.LENGTH in LTS table)
      240      240
      241      241                        Bit Descriptor
      242      242
      243      243                          ST.BDSC.C         character position in word
      244      244                          ST.BDSC.B         bit within byte
      245      245                          ST.BDSC.N         length in bits
      246      246
      247      247                        Numeric Descriptor
      248      248
      249      249                          ST.NDSC.CN        digit position within word
      250      250                          ST.NDSC.TN        '0'B = 9 bit, '1'B = 4 bit
      251      251                          ST.NDSC.S         signed number, '11'b = no sign
      252      252                          ST.NDSC.SF        scale factor
      253      253                          ST.NDSC.N         length in digits is st.ndsc.tn, else bytes
      254      254
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:350  
      255      255                        Attribute bits
      256      256
      257      257                          ST.B.REFERENCED   item is referenced
      258      258                          ST.B.DEFINED      item is defined
      259      259                          ST.B.ARG          item is used as an argument
      260      260                          ST.B.DUPLICATE    defined more than once
      261      261                          ST.B.EDITED       item is in edited format
      262      262                          ST.B.ONE_REF      item is referenced only once
      263      263                          ST.B.TOOBIG       size greater than 256K
      264      264                          ST.B.LONG_CONSTANT
      265      265                          ST.B.ELEMENTARY   item has no sons
      266      266                          ST.B.DIMENSIONED  item has an DIMS entry in LTS
      267      267                          ST.B.TOO_MUCH     item has more than 1 LTS entry
      268      268                          ST.B.LENGTH_4096  item's length is stored in LONG.LENGTH
      269      269                          ST.B.COMP6_NONOP  item can't be optimized into COMP-6
      270      270                          ST.B.PHASE_2      label has been read by Phase 2
      271      271                          ST.B.FALL_THRU    label may be reached by falling thru
      272      272
      273      273                        Pointers
      274      274
      275      275                          ST.NEXT           pointer to next entry if duplicate
      276      276                          ST.LTS$           pointer to LTS entry
      277      277                          ST.ILS$           pointer to ILS entry
      278      278                          ST.DNT$           pointer to DNT entry
      279      279                          ST.QLT$           pointer to QLT
      280      280
      281      281              ST                            WALIGNED
      282      282              0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      283      283             I-----------------I-----------------I-----------------I-----------------I
      284      284            0!ID                                 !R                !COUNT            !W
      285      285             I-----------------I-----------------I-----------------I-----------------I
      286      286            1!SA                                 !. . . . . . . . . . . . . . . . . .!
      287      287             I-----------------I-----------------I-----------------I-----------------I
      288      288            1!SA_BIT                             !DESCL                              !
      289      289             I-----------------I-----------------I-----------------I-----------------I
      290      290              LVL2=BDSC
      291      291            1!. . . . . . . . . . . . . . . . . .!C  !B      !N                      !B
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:351  
      292      292             I-----------------I-----------------I-----------------I-----------------I
      293      293              LVL2=BDSC        LVL3=LEN
      294      294            1!. . . . . . . . . . . . . . . . . . . . . . . .!*              !REG    !B
      295      295             I-----------------I-----------------I-----------------I-----------------I
      296      296              LVL2=ADSC
      297      297            1!. . . . . . . . . . . . . . . . . .!CN !M!TA !M!N                      !B
      298      298             I-----------------I-----------------I-----------------I-----------------I
      299      299              LVL2=ADSC        LVL3=LEN
      300      300            1!. . . . . . . . . . . . . . . . . . . . . . . .!*              !REG    !B
      301      301             I-----------------I-----------------I-----------------I-----------------I
      302      302              LVL2=NDSC
      303      303            1!. . . . . . . . . . . . . . . . . .!CN   !T!S  !SF         !N          !B
      304      304             I-----------------I-----------------I-----------------I-----------------I
      305      305            2!TYPE or SIZE                       !LINE_NO                            !
      306      306             I-----------------I-----------------I-----------------I-----------------I
      307      307              LVL2=REF         LVL3=MF
      308      308            2!. . . . . . . . . . . . . . . . . .!A!R!I!TAG    !. . . . . . . . . . .!B
      309      309             I-----------------I-----------------I-----------------I-----------------I
      310      310              LVL2=REF
      311      311            2!. . . . . . . . . . . . . . . . . . . . . . . . .!ARF  !C!*            !
      312      312             I-----------------I-----------------I-----------------I-----------------I
      313      313            3!ATTR                                                                   !
      314      314             I-----------------I-----------------I-----------------I-----------------I
      315      315              LVL2=B
      316      316            3!R!D!A!D!E!O!T!L!E!D!T!L!C!P!F!*                                        !B
      317      317             I-----------------I-----------------I-----------------I-----------------I
      318      318
      319      319              0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8
      320      320             I-----------------I-----------------I-----------------I-----------------I
      321      321            4!NEXT                                                                   !
      322      322             I-----------------I-----------------I-----------------I-----------------I
      323      323            5!LTS$ or POINTER$ or ILS$                                                !
      324      324             I-----------------I-----------------I-----------------I-----------------I
      325      325            6!DNT$                                                                   !
      326      326             I-----------------I-----------------I-----------------I-----------------I
      327      327            6!CONSTI                                                                 !
      328      328             I-----------------I-----------------I-----------------I-----------------I
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:352  
      329      329            6!LAST                                                                   !
      330      330             I-----------------I-----------------I-----------------I-----------------I
      331      331            7!QLT$                                                                   !
      332      332             I-----------------I-----------------I-----------------I-----------------I
      333      333            7!ST_PTR                                                                 !
      334      334             I-----------------I-----------------I-----------------I-----------------I
      335      335            7!ASS_TRIAD                                                              !
      336      336             I-----------------I-----------------I-----------------I-----------------I
      337      337            7!SEGMENT$                                                               !
      338      338             I-----------------I-----------------I-----------------I-----------------I
      339      339            7!SECTION$                                                               !
      340      340             I-----------------I-----------------I-----------------I-----------------I
      341      341           10!FDP                                !BDP                                !
      342      342             I-----------------I-----------------I-----------------I-----------------I
      343      343           11!PROC$                                                                  !
      344      344             I-----------------I-----------------I-----------------I-----------------I
      345      345           11!REF_TRIAD                                                              !
      346      346             I-----------------I-----------------I-----------------I-----------------I
      347      347         */
      348      348        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:353  
      349      349        /*F*
      350      350               NAME:  PROGRAM_DESCRIPTIONS
      351      351            CHAPTER:  Z8DA$STORAGE_ALLOCATION
      352      352             AUTHOR:  GK Myers
      353      353
      354      354                      Z8DA acts as a control procedure for the size calculation and
      355      355                      span calculation procedures.  This procedure starts at the top
      356      356                      of the QLT and then loops through the QLT by retrieving each
      357      357                      entry's brother until all the 01's and 77's have been looked at.
      358      358
      359      359                      If the entry is an elementary 01 or a 77 then it is passed by as
      360      360                      Phase 2 will handle it.  When a 01 is accessed that is a structure
      361      361                      then the data variables for offsets within structures are
      362      362                      initialized to zero.  Z8DC and Z8DS are then called.  A pseudo
      363      363                      program is below to show the program flow.
      364      364
      365      365
      366      366                           Get pointer to top of QLT
      367      367                           Do while QLT pointer isn't nill
      368      368                             If element is non-elementary then
      369      369                               Initialize offset counters
      370      370                               Call Z8DC
      371      371                               Call Z8DS
      372      372                             Get QLT entry's brother
      373      373                           End
      374      374        */
      375      375        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:354  
      376      376        /*F*
      377      377               NAME:  PROGRAM_DESCRIPTIONS
      378      378            CHAPTER:  Z8DC$SIZE_CALC
      379      379
      380      380                      This routine receives an 01 data item which is the top of a
      381      381                      structure.  The alignments and sizes of the variables within are
      382      382                      calculated and stored for usage by Phase 2.  A pseudo program
      383      383                      is below to show the program flow.
      384      384
      385      385
      386      386                           If element is non-elementary then
      387      387                             Initialize structure variables
      388      388                             Do while element's son is not nill
      389      389                               Align variable
      390      390                               If son is elementary then
      391      391                                 Get size of son from ST
      392      392                               Else
      393      393                                 Call Z8DC
      394      394                               If son has an occurs clause then
      395      395                                 Expand size to include dimensions
      396      396                               Increment offset and storage counters
      397      397                               Get son's brother
      398      398                             End
      399      399                             Assign size of structure
      400      400
      401      401
      402      402                      The procedure has a do-loop after the initialization of the
      403      403                      structure variables.  This loop goes through the sons of a
      404      404                      structure by the QLT.BROTHER pointer.  If the son is non-
      405      405                      elementary then it locates the first elementary item within
      406      406                      the structure to decide on the alignment.  The alignment is
      407      407                      done according to the conventions described in Frank Helwig's
      408      408                      article by calling a macro that does the alignment and calculates
      409      409                      the filler used.  After the alignment has been done the offsets
      410      410                      are stored in the variable's SA field.  If the offset counters
      411      411                      step beyond the data storage limit (256K) the counters are reset
      412      412                      to zero.
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:355  
      413      413
      414      414                      The son is then processed differently depending on it being
      415      415                      an elementary item or not.  If it is elementary then the size is
      416      416                      pulled from the length field of the ST.  If it is non-elementary
      417      417                      then Z8DC is called to operate on that structure within that
      418      418                      element.  The maximum alignment boundary of this structure is
      419      419                      checked against the outer structure's boundary to assign the
      420      420                      larger value.
      421      421
      422      422                      When the item has an occurs clause the size of the variable is
      423      423                      expanded out to the size of one element multiplied by the number
      424      424                      of items in the array.  The size of the variable is also checked
      425      425                      to make sure it is not larger than the data storage limit.
      426      426
      427      427                      The storage counters and the size of the structure are incremented
      428      428                      by the size and the amount of filler needed to align the variable.
      429      429                      The element's brother is then determined and the program goes
      430      430                      to the top of the loop.
      431      431
      432      432                      The size of the structure that was processed in the loop is
      433      433                      checked to make sure it is a multiple of the maximum boundary
      434      434                      needed inside the structure (see Frank Helwig's article).  If
      435      435                      it is not then filler is used to make it so.  The size is
      436      436                      then stored in ST.ADSC.N if it will fit (less than 4095 bytes)
      437      437                      otherwise a LONG item is created in the LTS table and the size
      438      438                      is stored in LONG.LENGTH.
      439      439        */
      440      440        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:356  
      441      441        /*F*
      442      442               NAME:  PROGRAM_DESCRIPTIONS
      443      443            CHAPTER:  Z8DS$SPAN_CALC
      444      444
      445      445                      This procedure is passed the structure's son to calculate the span
      446      446                      of that son and other members of the structure.  The span of an
      447      447                      array item is the length of one element of the array.  This is
      448      448                      used to calculate the storage locations for members of array
      449      449                      items.  A pseudo program follows to explain the program flow.
      450      450
      451      451
      452      452                           Find innermost father that has occurs clause
      453      453                           If item has occurs clause then
      454      454                             Copy inherited spans
      455      455                             Calculate span of item and convert spans to proper units
      456      456                           Else
      457      457                             Copy inherited spans and convert to proper units
      458      458                           Calculate offset for OFF triad
      459      459                           If item has a son then
      460      460                             Call Z8DS passing the son as the parameter
      461      461                           If item has a brother then
      462      462                             Call Z8DS passing the brother as the parameter
      463      463
      464      464
      465      465                      The innermost father that has an occurs clause is determined so
      466      466                      that the outer spans of an item can be copied over.
      467      467
      468      468                      If the item has an occurs clause then all the spans of the
      469      469                      father are copied over.  The span of the item is then calculated
      470      470                      by using the size of that item.  All of the spans are then
      471      471                      converted according to the proper units (words, bytes, or
      472      472                      digits) depending on the type of data item.
      473      473
      474      474                      If there is no occurs clause then the spans of the father are
      475      475                      copied over and converted to the correct units as done above.
      476      476
      477      477                      The fudge offset for the OFF triad is calculated by summing up
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:357  
      478      478                      all of the span fields for an item and storing it in the SPAN(0)
      479      479                      field.
      480      480
      481      481                      If the item has a son then Z8DS is called with the son passed
      482      482                      as a parameter.  The item is then checked to see if it has a
      483      483                      brother and if it does then Z8DS is called with the brother
      484      484                      passsed as the parameter.
      485      485        */
      486      486        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:358  
      487      487        %EQU PHASE = 1;
      488      488        %INCLUDE Z8A_DEFC ;
        1+     489        /*T***********************************************************/
        2+     490        /*T*                                                         */
        3+     491        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+     492        /*T*                                                         */
        5+     493        /*T***********************************************************/
        6+     494        /* DEFC -- DEFINE COMPILER COMMON THINGS */
        7+     495
        8+     496        /*
        9+     497             The following flag is *very* important.  It is used to determine
       10+     498        whether to compile the initialization section of a declaration or
       11+     499        not.  Distinction between SYMDEF and SYMREF attributes can be made
       12+     500        using this variable as well.
       13+     501
       14+     502        */
       15+     503
       16+     504        %SET INITIALIZE = '0'B;
       17+     505
       18+     506        %EQU SUCCESSFUL_CALL = '1'B;
       19+     507        %EQU SUCCESSFUL_CALLS = '1'B;
       20+     508        %EQU OPTIMIZE_THIS_CASE = 0;
       21+     509        %SET INCLUDE_ENT_DEFS = '1'B;
       22+     510        %EQU OPTIMIZATION = 0;
       23+     511        %EQU OPTIMIZED = 0;
       24+     512        %EQU PAGE_SIZE = 1024;
       25+     513        %EQU PAGES_PER_BLOCK = 8 ;
       26+     514        %EQU BLOCK_SIZE      = 8192 ;  /* PAGE_SIZE * PAGES_PER_BLOCK */
       27+     515        %EQU #4K = BITBIN('010000'O);
       28+     516        %EQU #16K = BITBIN('040000'O);
       29+     517        %EQU #128K = BITBIN('0400000'O);
       30+     518        %EQU #256K = BITBIN('1000000'O);
       31+     519        %EQU MAX_ARGS = 1020 ;
       32+     520        %EQU MAX_SEQ# = BITBIN('777777'O) ; /* 256K - 1 */
       33+     521        %EQU Z8A_NAMES_SIZE = 599;  /* Maximum valid ID */
       34+     522
       35+     523        %EQU KANJI_SPACE = BITASC ('241'O) ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:359  
       36+     524        %EQU KANJI_START = BITASC ('216'O) ;
       37+     525        %EQU KANJI_END   = BITASC ('217'O) ;
       38+     526        %EQU LENGTH_OF_LX_ITEM = 8 ; /* See LENGTH_LX_ITEM in Z8E_STACKS */
       39+     527        %EQU HIGH_LEV = 1;
       40+     528        %EQU INT_LEV  = 2;
       41+     529        %EQU LOW_LEV  = 3;
       42+     530
       43+     531        /* Special %SUBs for perhaps more understandable code */
       44+     532
       45+     533        %SUB NEVER    = "WHILE('0'B)";
       46+     534        %SUB FOREVER  = "WHILE('1'B)";
       47+     535        %SUB BOOLEAN  = "BIT(1) UNAL";
       48+     536
       49+     537        %SUB TRUE     = "'1'B";
       50+     538        %SUB FALSE    = "'0'B";
       51+     539
       52+     540    1   DCL 1 PAGE BASED ALIGNED,
       53+     541    1         2 * (0:%(PAGE_SIZE - 2)) UBIN WORD UNAL,
       54+     542    1         2 NEXT PTR;
       55+     543
       56+     544    1   DCL 1 CONT BASED ALIGNED,
       57+     545    1         2 ID UBIN HALF UNAL,
       58+     546    1         2 * UBIN HALF UNAL,
       59+     547    1         2 NEXT PTR;
       60+     548
       61+     549    1   DCL ITERATION SBIN WORD EXT ; /* USED TO RSV VARIABLE ITEMS */
       62+     550
       63+     551    1   DCL CHARS CHAR(%(PAGE_SIZE * 4)) ALIGNED BASED ;
       64+     552
       65+     553        %IF PHASE ~= 0 ;
       66+     554    1   DCL Z8AR$RESERVER ENTRY(1);
       67+     555        %ENDIF;
      489      556        %INCLUDE Z8A_SUPP_MAC ;
        1+     557        /*T***********************************************************/
        2+     558        /*T*                                                         */
        3+     559        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+     560        /*T*                                                         */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:360  
        5+     561        /*T***********************************************************/
        6+     562            %INCLUDE Z8A_NAMES;
        1+     563        /*T***********************************************************/
        2+     564        /*T*                                                         */
        3+     565        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+     566        /*T*                                                         */
        5+     567        /*T***********************************************************/
        6+     568        /* INCLUDE FILE Z8A_NAMES */
        7+     569
        8+     570                       %IF PHASE = 6;
       15+     577                       %ENDIF;
       16+     578
       17+     579        %EQU CONTINUE   =   0; /* '0000'O */
       18+     580                               %IF INITIALIZE AND PHASE = 6;
       20+     582                               %ENDIF;
       21+     583
       22+     584        %EQU FIRST_ETT  =   1; /* '0001'O */
       23+     585        %EQU BASE       =   1; /* '0001'O         lop is based on rop       */
       24+     586                               %IF INITIALIZE AND PHASE = 6;
       26+     588                               %ENDIF;
       27+     589
       28+     590        %EQU FISS       =   2; /* '0002'O         fission of lop            */
       29+     591                               %IF INITIALIZE AND PHASE = 6; /* (size = ropcon )         */
       31+     593                               %ENDIF;
       32+     594
       33+     595        %EQU OFF        =   3; /* '0003'O         offset: lop = "BASE"      */
       34+     596                               %IF INITIALIZE AND PHASE = 6;
       36+     598                               %ENDIF;
       37+     599
       38+     600        %EQU SIZ        =   4; /* '0004'O         size(lop) = rop           */
       39+     601                               %IF INITIALIZE AND PHASE = 6;
       41+     603                               %ENDIF;
       42+     604
       43+     605        %EQU SSOP       =   5; /* '0005'O         subscript(lop) = rop      */
       44+     606                               %IF INITIALIZE AND PHASE = 6;
       46+     608                               %ENDIF;
       47+     609
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:361  
       48+     610        %EQU DAN        =   6; /* '0006'O         conversion tya to tyd     */
       49+     611                               %IF INITIALIZE AND PHASE = 6;
       51+     613                               %ENDIF;
       52+     614
       53+     615        %EQU DNA        =   7; /* '0007'O         descriptor conversion     */
       54+     616                               %IF INITIALIZE AND PHASE = 6; /*         N -> A           */
       56+     618                               %ENDIF;
       57+     619
       58+     620        %EQU DESC       =   8; /* '0010'O         new complete descriptor   */
       59+     621                               %IF INITIALIZE AND PHASE = 6;
       61+     623                               %ENDIF;
       62+     624
       63+     625        %EQU D96        =   9; /* '0011'O         conversion tya to tyb     */
       64+     626                               %IF INITIALIZE AND PHASE = 6;
       66+     628                               %ENDIF;
       67+     629                                                                    /*#28637*/
       68+     630        %EQU REFMOD     =  10; /* '0012'O         Reference Modification    */
       69+     631                               %IF INITIALIZE AND PHASE = 6;
       71+     633                               %ENDIF;
       72+     634
       73+     635        /*-------------------------------------------------------*/ /*#28637*/
       74+     636        /*      Room  for  item  here                                       */
       75+     637        /*------------------------------------------------------------------*/
       76+     638
       77+     639                               %IF INITIALIZE AND PHASE = 6;
       79+     641                               %ENDIF;
       80+     642
       81+     643        %EQU MPD10      =  12; /* '0014'O         multiply decimal power 10 */
       82+     644                               %IF INITIALIZE AND PHASE = 6;
       84+     646                               %ENDIF;
       85+     647
       86+     648        %EQU TRIAD      =  13; /* '0015'O         lop is a const item       */
       87+     649                               %IF INITIALIZE AND PHASE = 6;
       89+     651                               %ENDIF;
       90+     652
       91+     653        %EQU ARGP       =  14; /* '0016'O         argument pointer         */
       92+     654                               %IF INITIALIZE AND PHASE = 6; /*       lop is an st item  */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:362  
       94+     656                               %ENDIF;
       95+     657
       96+     658        %EQU ESC        =  15; /* '0017'O         escape ptr, lop is block  */
       97+     659                               %IF INITIALIZE AND PHASE = 6;
       99+     661                               %ENDIF;
      100+     662
      101+     663        %EQU CVDF       =  16; /* '0020'O         convert tyd ==> tyf       */
      102+     664                               %IF INITIALIZE AND PHASE = 6;
      104+     666                               %ENDIF;
      105+     667
      106+     668        %EQU MODI       =  17; /* '0021'O         mod(lop,rop) tyi          */
      107+     669                               %IF INITIALIZE AND PHASE = 6;
      109+     671                               %ENDIF;
      110+     672
      111+     673        %EQU ASC_BIN    =  18; /* '0022'O         convert tya(pic x) => tyi */
      112+     674                               %IF INITIALIZE AND PHASE = 6;
      114+     676                               %ENDIF;
      115+     677
      116+     678        %EQU CVIK       =  19; /* '0023'O         convert tyi ==> tyk       */
      117+     679                               %IF INITIALIZE AND PHASE = 6;
      119+     681                               %ENDIF;
      120+     682
      121+     683        %EQU CVKI       =  20; /* '0024'O         convert tyk ==> tyi       */
      122+     684                               %IF INITIALIZE AND PHASE = 6;
      124+     686                               %ENDIF;
      125+     687
      126+     688        %EQU CFILL      =  21; /* '0025'O         compare alphanumeric to a */
      127+     689                               %IF INITIALIZE AND PHASE = 6; /*        fill character    */
      129+     691                               %ENDIF;
      130+     692
      131+     693        %EQU CVDDD      =  22; /* '0026'O         convert decimal to        */
      132+     694                               %IF INITIALIZE AND PHASE = 6; /* decimal with de-editing  */
      134+     696                               %ENDIF;
      135+     697
      136+     698        %EQU SBCHK      =  23; /* '0027'O         subscript check           */
      137+     699                               %IF INITIALIZE AND PHASE = 6;
      139+     701                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:363  
      140+     702
      141+     703        %EQU OCCHK      =  24; /* '0030'O         occurs depending check    */
      142+     704                               %IF INITIALIZE AND PHASE = 6;
      144+     706                               %ENDIF;
      145+     707
      146+     708        %EQU CMGR       =  25; /* '0031'O         compare magnitude tyr     */
      147+     709                               %IF INITIALIZE AND PHASE = 6;
      149+     711                               %ENDIF;
      150+     712
      151+     713        %EQU CMGQ       =  26; /* '0032'O         compare magnitude tyq     */
      152+     714                               %IF INITIALIZE AND PHASE = 6;
      154+     716                               %ENDIF;
      155+     717
      156+     718        %EQU CMPQ       =  27; /* '0033'O         compare real tyq lop:rop  */
      157+     719                               %IF INITIALIZE AND PHASE = 6;
      159+     721                               %ENDIF;
      160+     722
      161+     723        %EQU ANDI       =  28; /* '0034'O         and rop & lop together    */
      162+     724                               %IF INITIALIZE AND PHASE = 6;
      164+     726                               %ENDIF;
      165+     727
      166+     728        %EQU CVIH       =  29; /* '0035'O         convert tyi ==> tyh       */
      167+     729                               %IF INITIALIZE AND PHASE = 6; /*        (unused)          */
      169+     731                               %ENDIF;
      170+     732
      171+     733        %EQU CVID9      =  30; /* '0036'O         convert tyi ==> tyd 9-bit */
      172+     734                               %IF INITIALIZE AND PHASE = 6;
      174+     736                               %ENDIF;
      175+     737
      176+     738        %EQU CVDSF      =  31; /* '0037'O         convert tyd ==> tyd       */
      177+     739                               %IF INITIALIZE AND PHASE = 6; /* without scale factor     */
      179+     741                               %ENDIF;
      180+     742
      181+     743        %EQU RNDQ       =  32; /* '0040'O         round double prec. real   */
      182+     744                               %IF INITIALIZE AND PHASE = 6;
      184+     746                               %ENDIF;
      185+     747
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:364  
      186+     748        %EQU EXRR       =  33; /* '0041'O         exponentiation: R ** R    */
      187+     749                               %IF INITIALIZE AND PHASE = 6;
      189+     751                               %ENDIF;
      190+     752
      191+     753        %EQU EXRI       =  34; /* '0042'O         exponentiation: R ** I    */
      192+     754                               %IF INITIALIZE AND PHASE = 6;
      194+     756                               %ENDIF;
      195+     757
      196+     758        %EQU EXQQ       =  35; /* '0043'O         exponentiation: Q ** Q    */
      197+     759                               %IF INITIALIZE AND PHASE = 6;
      199+     761                               %ENDIF;
      200+     762
      201+     763        %EQU EXQI       =  36; /* '0044'O         exponentiation: Q ** I    */
      202+     764                               %IF INITIALIZE AND PHASE = 6;
      204+     766                               %ENDIF;
      205+     767
      206+     768        %EQU ADQ        =  37; /* '0045'O         adq double precision      */
      207+     769                               %IF INITIALIZE AND PHASE = 6;
      209+     771                               %ENDIF;
      210+     772
      211+     773        %EQU SBQ        =  38; /* '0046'O         sbq double precision      */
      212+     774                               %IF INITIALIZE AND PHASE = 6;
      214+     776                               %ENDIF;
      215+     777
      216+     778        %EQU MPQ        =  39; /* '0047'O         mpq double precision      */
      217+     779                               %IF INITIALIZE AND PHASE = 6;
      219+     781                               %ENDIF;
      220+     782
      221+     783        %EQU DVQ        =  40; /* '0050'O         dvq double precision      */
      222+     784                               %IF INITIALIZE AND PHASE = 6;
      224+     786                               %ENDIF;
      225+     787
      226+     788        %EQU USQ        =  41; /* '0051'O         usq double precision      */
      227+     789                               %IF INITIALIZE AND PHASE = 6;
      229+     791                               %ENDIF;
      230+     792
      231+     793        %EQU MPI2       =  42; /* '0052'O         mp2i integer: lop to      */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:365  
      232+     794                               %IF INITIALIZE AND PHASE = 6; /*      power of 2          */
      234+     796                               %ENDIF;
      235+     797
      236+     798        %EQU ADD        =  43; /* '0053'O         add decimal: lop + rop    */
      237+     799                               %IF INITIALIZE AND PHASE = 6;
      239+     801                               %ENDIF;
      240+     802
      241+     803        %EQU ADI        =  44; /* '0054'O         add integer: lop + rop    */
      242+     804                               %IF INITIALIZE AND PHASE = 6;
      244+     806                               %ENDIF;
      245+     807
      246+     808        %EQU SBD        =  45; /* '0055'O         subtract decimal: lop-rop */
      247+     809                               %IF INITIALIZE AND PHASE = 6;
      249+     811                               %ENDIF;
      250+     812
      251+     813        %EQU SBI        =  46; /* '0056'O         subtract integer: lop-rop */
      252+     814                               %IF INITIALIZE AND PHASE = 6;
      254+     816                               %ENDIF;
      255+     817
      256+     818        %EQU MPD        =  47; /* '0057'O         multiply decimal: lop*rop */
      257+     819                               %IF INITIALIZE AND PHASE = 6;
      259+     821                               %ENDIF;
      260+     822
      261+     823        %EQU MPI        =  48; /* '0060'O         multiply integer: lop*rop */
      262+     824                               %IF INITIALIZE AND PHASE = 6;
      264+     826                               %ENDIF;
      265+     827
      266+     828        %EQU DVD        =  49; /* '0061'O         divide   decimal: lop/rop */
      267+     829                               %IF INITIALIZE AND PHASE = 6;
      269+     831                               %ENDIF;
      270+     832
      271+     833        %EQU DVI        =  50; /* '0062'O         divide   decimal: lop/rop */
      272+     834                               %IF INITIALIZE AND PHASE = 6;
      274+     836                               %ENDIF;
      275+     837
      276+     838        %EQU DVDR       =  51; /* '0063'O         divide decimal rounded    */
      277+     839                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:366  
      279+     841                               %ENDIF;
      280+     842
      281+     843        %EQU EXDIO      =  52; /* '0064'O         inline exponentiation:    */
      282+     844                               %IF INITIALIZE AND PHASE = 6; /*       D ** I             */
      284+     846                               %ENDIF;
      285+     847
      286+     848        %EQU USD        =  53; /* '0065'O         unary subtract decimal    */
      287+     849                               %IF INITIALIZE AND PHASE = 6;
      289+     851                               %ENDIF;
      290+     852
      291+     853        %EQU USI        =  54; /* '0066'O         unary subtract integer    */
      292+     854                               %IF INITIALIZE AND PHASE = 6;
      294+     856                               %ENDIF;
      295+     857
      296+     858        %EQU ADR        =  55; /* '0067'O         add real: lop + rop       */
      297+     859                               %IF INITIALIZE AND PHASE = 6;
      299+     861                               %ENDIF;
      300+     862
      301+     863        %EQU SBR        =  56; /* '0070'O         subtract real: lop - rop  */
      302+     864                               %IF INITIALIZE AND PHASE = 6;
      304+     866                               %ENDIF;
      305+     867
      306+     868        %EQU MPR        =  57; /* '0071'O         multiply real: lop * rop  */
      307+     869                               %IF INITIALIZE AND PHASE = 6;
      309+     871                               %ENDIF;
      310+     872
      311+     873        %EQU DVR        =  58; /* '0072'O         divide real: lop / rop    */
      312+     874                               %IF INITIALIZE AND PHASE = 6;
      314+     876                               %ENDIF;
      315+     877
      316+     878        %EQU USR        =  59; /* '0073'O         unary subtract:  - lop    */
      317+     879                               %IF INITIALIZE AND PHASE = 6;
      319+     881                               %ENDIF;
      320+     882
      321+     883        %EQU CVDO       =  60; /* '0074'O         convert tyd ==> tyo       */
      322+     884                               %IF INITIALIZE AND PHASE = 6;
      324+     886                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:367  
      325+     887
      326+     888        %EQU EXII       =  61; /* '0075'O         exponentiation: I ** I    */
      327+     889                               %IF INITIALIZE AND PHASE = 6;
      329+     891                               %ENDIF;
      330+     892
      331+     893        %EQU EXDI       =  62; /* '0076'O         exponentiation: D ** I    */
      332+     894                               %IF INITIALIZE AND PHASE = 6;
      334+     896                               %ENDIF;
      335+     897
      336+     898        %EQU EXDD       =  63; /* '0077'O         exponentiation: D ** D    */
      337+     899                               %IF INITIALIZE AND PHASE = 6;
      339+     901                               %ENDIF;
      340+     902
      341+     903        %EQU CVII       =  64; /* '0100'O         move integer to int. temp */
      342+     904                               %IF INITIALIZE AND PHASE = 6;
      344+     906                               %ENDIF;
      345+     907
      346+     908        %EQU CVDD       =  65; /* '0101'O         move decimal to dec. temp */
      347+     909                               %IF INITIALIZE AND PHASE = 6;
      349+     911                               %ENDIF;
      350+     912
      351+     913        %EQU RNDD       =  66; /* '0102'O         move dec to dec temp round*/
      352+     914                               %IF INITIALIZE AND PHASE = 6;
      354+     916                               %ENDIF;
      355+     917
      356+     918        %EQU CVRR       =  67; /* '0103'O         move real to real         */
      357+     919                               %IF INITIALIZE AND PHASE = 6;
      359+     921                               %ENDIF;
      360+     922
      361+     923        %EQU RNDR       =  68; /* '0104'O         round single prec real    */
      362+     924                               %IF INITIALIZE AND PHASE = 6;
      364+     926                               %ENDIF;
      365+     927
      366+     928        %EQU TRN        =  69; /* '0105'O         truncate                  */
      367+     929                               %IF INITIALIZE AND PHASE = 6;
      369+     931                               %ENDIF;
      370+     932
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:368  
      371+     933        %EQU CMPI       =  70; /* '0106'O         compare integer lop : rop */
      372+     934                               %IF INITIALIZE AND PHASE = 6;
      374+     936                               %ENDIF;
      375+     937
      376+     938        %EQU CMPD       =  71; /* '0107'O         compare decimal lop : rop */
      377+     939                               %IF INITIALIZE AND PHASE = 6;
      379+     941                               %ENDIF;
      380+     942
      381+     943        %EQU CMPC       =  72; /* '0110'O         compare class             */
      382+     944                               %IF INITIALIZE AND PHASE = 6;
      384+     946                               %ENDIF;
      385+     947
      386+     948        %EQU CMPA       =  73; /* '0111'O         compare alphanumeric      */
      387+     949                               %IF INITIALIZE AND PHASE = 6;
      389+     951                               %ENDIF;
      390+     952
      391+     953        %EQU CMPR       =  74; /* '0112'O         compare real  lop : rop   */
      392+     954                               %IF INITIALIZE AND PHASE = 6;
      394+     956                               %ENDIF;
      395+     957
      396+     958        %EQU CMGP       =  75; /* '0113'O         compare go pointer */
      397+     959                               %IF INITIALIZE AND PHASE = 6;
      399+     961                               %ENDIF;
      400+     962
      401+     963        %EQU DVI2       =  76; /* '0114'O         divide integer power of 2 */
      402+     964                               %IF INITIALIZE AND PHASE = 6;
      404+     966                               %ENDIF;
      405+     967
      406+     968        %EQU CVT        =  77; /* '0115'O         convert & transliterate   */
      407+     969                               %IF INITIALIZE AND PHASE = 6;
      409+     971                               %ENDIF;
      410+     972
      411+     973        %EQU CMPAA      =  78; /* '0116'O         compare alphanumeric all  */
      412+     974                               %IF INITIALIZE AND PHASE = 6;
      414+     976                               %ENDIF;
      415+     977
      416+     978        %EQU CMEE       =  79; /* '0117'O         compare 2-words even even */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:369  
      417+     979                               %IF INITIALIZE AND PHASE = 6;
      419+     981                               %ENDIF;
      420+     982
      421+     983        %EQU CMOE       =  80; /* '0120'O         compare 2-words odd  even */
      422+     984                               %IF INITIALIZE AND PHASE = 6;
      424+     986                               %ENDIF;
      425+     987
      426+     988        %EQU CMPAO      =  81; /* '0121'O         compare alpha optimized   */
      427+     989                               %IF INITIALIZE AND PHASE = 6;
      429+     991                               %ENDIF;
      430+     992
      431+     993        %EQU CMPAS      =  82; /* '0122'O         compare alpha supplement  */
      432+     994                               %IF INITIALIZE AND PHASE = 6;
      434+     996                               %ENDIF;
      435+     997
      436+     998        %EQU CMGI       =  83; /* '0123'O         compare magnitude tyi     */
      437+     999                               %IF INITIALIZE AND PHASE = 6;
      439+    1001                               %ENDIF;
      440+    1002
      441+    1003        %EQU CVAA       =  84; /* '0124'O         move alphanumeric to      */
      442+    1004                               %IF INITIALIZE AND PHASE = 6; /*      alphanumeric temp   */
      444+    1006                               %ENDIF;
      445+    1007
      446+    1008        %EQU CV49       =  85; /* '0125'O         convert 4-bit to 9-bit    */
      447+    1009                               %IF INITIALIZE AND PHASE = 6;
      449+    1011                               %ENDIF;
      450+    1012
      451+    1013        %EQU CVID4      =  86; /* '0126'O         convert integer to decimal*/
      452+    1014                               %IF INITIALIZE AND PHASE = 6;
      454+    1016                               %ENDIF;
      455+    1017
      456+    1018        %EQU CVOD4      =  87; /* '0127'O         convert overpunched to    */
      457+    1019                               %IF INITIALIZE AND PHASE = 6; /*         decimal          */
      459+    1021                               %ENDIF;
      460+    1022
      461+    1023        %EQU CVRD4      =  88; /* '0130'O         convert real to decimal   */
      462+    1024                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:370  
      464+    1026                               %ENDIF;
      465+    1027
      466+    1028        %EQU CVQD4      =  89; /* '0131'O         convert double precision  */
      467+    1029                               %IF INITIALIZE AND PHASE = 6; /*       real to decimal    */
      469+    1031                               %ENDIF;
      470+    1032
      471+    1033        %EQU CVDI       =  90; /* '0132'O         convert decimal to integer*/
      472+    1034                               %IF INITIALIZE AND PHASE = 6;
      474+    1036                               %ENDIF;
      475+    1037
      476+    1038        %EQU CVJI       =  91; /* '0133'O         convert 16/32 to integer  */
      477+    1039                               %IF INITIALIZE AND PHASE = 6;
      479+    1041                               %ENDIF;
      480+    1042
      481+    1043        %EQU CVHI       =  92; /* '0134'O         convert comp-7 to integer */
      482+    1044                               %IF INITIALIZE AND PHASE = 6;
      484+    1046                               %ENDIF;
      485+    1047
      486+    1048        %EQU CVRI       =  93; /* '0135'O         convert real to integer   */
      487+    1049                               %IF INITIALIZE AND PHASE = 6;
      489+    1051                               %ENDIF;
      490+    1052
      491+    1053        %EQU CVQI       =  94; /* '0136'O         convert double-real to int*/
      492+    1054                               %IF INITIALIZE AND PHASE = 6;
      494+    1056                               %ENDIF;
      495+    1057
      496+    1058        %EQU CVDRR      =  95; /* '0137'O         convert decimal to real   */
      497+    1059                               %IF INITIALIZE AND PHASE = 6;
      499+    1061                               %ENDIF;
      500+    1062
      501+    1063        %EQU CVIR       =  96; /* '0140'O         convert integer to real   */
      502+    1064                               %IF INITIALIZE AND PHASE = 6;
      504+    1066                               %ENDIF;
      505+    1067
      506+    1068        %EQU CVQR       =  97; /* '0141'O         convert double-real to    */
      507+    1069                               %IF INITIALIZE AND PHASE = 6; /*         real             */
      509+    1071                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:371  
      510+    1072
      511+    1073        %EQU CVDQR      =  98; /* '0142'O         convert dec to double real*/
      512+    1074                               %IF INITIALIZE AND PHASE = 6;
      514+    1076                               %ENDIF;
      515+    1077
      516+    1078        %EQU CVIQ       =  99; /* '0143'O         convert int to double-real*/
      517+    1079                               %IF INITIALIZE AND PHASE = 6;
      519+    1081                               %ENDIF;
      520+    1082
      521+    1083        %EQU CVRQ       = 100; /* '0144'O         convert real  double-real */
      522+    1084                               %IF INITIALIZE AND PHASE = 6;
      524+    1086                               %ENDIF;
      525+    1087
      526+    1088        %EQU CVIJ       = 101; /* '0145'O         convert tyi to tyj        */
      527+    1089                               %IF INITIALIZE AND PHASE = 6;
      529+    1091                               %ENDIF;
      530+    1092
      531+    1093        %EQU ORI        = 102; /* '0146'O         or lop & rop together     */
      532+    1094                               %IF INITIALIZE AND PHASE = 6;
      534+    1096                               %ENDIF;
      535+    1097
      536+    1098        %EQU CVOD9      = 103; /* '0147'O         convert tyo to 9-bit      */
      537+    1099                               %IF INITIALIZE AND PHASE = 6;
      539+    1101                               %ENDIF;
      540+    1102
      541+    1103        %EQU CVQD9      = 104; /* '0150'O         convert tyq to 9-bit tyd  */
      542+    1104                               %IF INITIALIZE AND PHASE = 6;
      544+    1106                               %ENDIF;
      545+    1107
      546+    1108        %EQU CVRD9      = 105; /* '0151'O         convert tyr to 9-bit tyd  */
      547+    1109                               %IF INITIALIZE AND PHASE = 6;
      549+    1111                               %ENDIF;
      550+    1112
      551+    1113        %EQU INDEX      = 106; /* '0152'O         index primitive           */
      552+    1114                               %IF INITIALIZE AND PHASE = 6;
      554+    1116                               %ENDIF;
      555+    1117
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:372  
      556+    1118        %EQU MINI       = 107; /* '0153'O         minimum integer primitive */
      557+    1119                               %IF INITIALIZE AND PHASE = 6;
      559+    1121                               %ENDIF;
      560+    1122
      561+    1123        %EQU MIND       = 108; /* '0154'O         minimum decimal primitive */
      562+    1124                               %IF INITIALIZE AND PHASE = 6;
      564+    1126                               %ENDIF;
      565+    1127
      566+    1128        %EQU MINR       = 109; /* '0155'O         minimum real primitive    */
      567+    1129                               %IF INITIALIZE AND PHASE = 6;
      569+    1131                               %ENDIF;
      570+    1132
      571+    1133        %EQU MINQ       = 110; /* '0156'O         minimum double primitive  */
      572+    1134                               %IF INITIALIZE AND PHASE = 6;
      574+    1136                               %ENDIF;
      575+    1137
      576+    1138        %EQU BIN_ASC    = 111; /* '0157'O         convert binary to         */
      577+    1139                               %IF INITIALIZE AND PHASE = 6; /*         tya ( pic x )    */
      579+    1141                               %ENDIF;
      580+    1142
      581+    1143        %EQU CFILLR     = 112; /* '0160'O         compare alphanumeric to   */
      582+    1144                               %IF INITIALIZE AND PHASE = 6; /*       a fill character   */
      584+    1146                               %ENDIF;
      585+    1147
      586+    1148        %EQU SHIFT_L    = 113; /* '0161'O         shift lop left ropcon bits*/
      587+    1149                               %IF INITIALIZE AND PHASE = 6;
      589+    1151                               %ENDIF;
      590+    1152
      591+    1153        %EQU SHIFT_R    = 114; /* '0162'O         shift lop right (rop) bits*/
      592+    1154                               %IF INITIALIZE AND PHASE = 6;
      594+    1156                               %ENDIF;
      595+    1157
      596+    1158        %EQU ADO        = 115; /* '0163'O         add overpunch: lop + rop  */
      597+    1159                               %IF INITIALIZE AND PHASE = 6;
      599+    1161                               %ENDIF;
      600+    1162
      601+    1163        %EQU SBO        = 116; /* '0164'O         subtract overpunch lop-rop*/
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:373  
      602+    1164                               %IF INITIALIZE AND PHASE = 6;
      604+    1166                               %ENDIF;
      605+    1167
      606+    1168        %EQU MPO        = 117; /* '0165'O         divide overpunch: lop/rop */
      607+    1169                               %IF INITIALIZE AND PHASE = 6;
      609+    1171                               %ENDIF;
      610+    1172
      611+    1173        %EQU DVO        = 118; /* '0166'O         divide overpunch: lop/rop */
      612+    1174                               %IF INITIALIZE AND PHASE = 6;
      614+    1176                               %ENDIF;
      615+    1177
      616+    1178        %EQU DVOR       = 119; /* '0167'O         divide overpunch: lop/rop */
      617+    1179                               %IF INITIALIZE AND PHASE = 6; /*        rounded           */
      619+    1181                               %ENDIF;
      620+    1182
      621+    1183        %EQU CMPO       = 120; /* '0170'O         compare overpunch: lop:rop*/
      622+    1184                               %IF INITIALIZE AND PHASE = 6;
      624+    1186                               %ENDIF;
      625+    1187
      626+    1188        %EQU EVAL       = 121; /* '0171'O         evaluate non-optimized triad */
      627+    1189                               %IF INITIALIZE AND PHASE = 6;
      629+    1191                               %ENDIF;
      630+    1192
      631+    1193        %EQU USO        = 122; /* '0172'O         unary subtract:  - lop */
      632+    1194                               %IF INITIALIZE AND PHASE = 6;
      634+    1196                               %ENDIF;
      635+    1197
      636+    1198        %EQU MINO       = 123; /* '0173'O         minimum overpunched primitive */
      637+    1199                               %IF INITIALIZE AND PHASE = 6;
      639+    1201                               %ENDIF;
      640+    1202
      641+    1203        %EQU RNDO       = 124; /* '0174'O         Round overpunched */
      642+    1204                               %IF INITIALIZE AND PHASE = 6;
      644+    1206                               %ENDIF;
      645+    1207
      646+    1208        %EQU ADDR       = 125; /* '0175'O   address triad                 */
      647+    1209                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:374  
      649+    1211                               %ENDIF;
      650+    1212
      651+    1213        %EQU AUTO       = 126; /* '0176'O   auto storage item       */
      652+    1214                               %IF INITIALIZE AND PHASE = 6;
      654+    1216                               %ENDIF;
      655+    1217
      656+    1218        %EQU CMK        = 127; /* '0177'O   compare masked                */
      657+    1219                               %IF INITIALIZE AND PHASE = 6;
      659+    1221                               %ENDIF;
      660+    1222
      661+    1223        %EQU CMK1       = 128; /* '0200'O   compare masked, mask    */
      662+    1224                               %IF INITIALIZE AND PHASE = 6;
      664+    1226                               %ENDIF;
      665+    1227
      666+    1228        %EQU CMPT       = 129; /* '0201'O   compare with translation */
      667+    1229                               %IF INITIALIZE AND PHASE = 6;
      669+    1231                               %ENDIF;
      670+    1232
      671+    1233        %EQU LAST_ETT   = 129; /* '0201'O       update as items are added.*/
      672+    1234
      673+    1235        /*------------------------------------------------------------------*
      674+    1236                     Room for item(s) here
      675+    1237         *------------------------------------------------------------------*/
      676+    1238
      677+    1239                               %IF INITIALIZE AND PHASE = 6;
      679+    1241                               %ENDIF;
      680+    1242        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:375  
      681+    1243        %EQU FIRST_ILL  = 150; /* '0226'O         update as items are added.*/
      682+    1244
      683+    1245        %EQU AD2D       = 150; /* '0226'O         lop = lop + rop           */
      684+    1246                               %IF INITIALIZE AND PHASE = 6;
      686+    1248                               %ENDIF;
      687+    1249
      688+    1250        %EQU AD2DR      = 151; /* '0227'O         lop = lop + rop rounded   */
      689+    1251                               %IF INITIALIZE AND PHASE = 6;
      691+    1253                               %ENDIF;
      692+    1254
      693+    1255        %EQU AD2I       = 152; /* '0230'O         lop = lop + rop comp-6    */
      694+    1256                               %IF INITIALIZE AND PHASE = 6;
      696+    1258                               %ENDIF;
      697+    1259
      698+    1260        %EQU SB2D       = 153; /* '0231'O         lop = lop - rop decimal   */
      699+    1261                               %IF INITIALIZE AND PHASE = 6;
      701+    1263                               %ENDIF;
      702+    1264
      703+    1265        %EQU SB2DR      = 154; /* '0232'O         lop = lop - rop rounded   */
      704+    1266                               %IF INITIALIZE AND PHASE = 6;
      706+    1268                               %ENDIF;
      707+    1269
      708+    1270        %EQU SB2I       = 155; /* '0233'O         lop = lop - rop  comp-6   */
      709+    1271                               %IF INITIALIZE AND PHASE = 6;
      711+    1273                               %ENDIF;
      712+    1274
      713+    1275        %EQU MP2D       = 156; /* '0234'O         lop = lop * rop decimal   */
      714+    1276                               %IF INITIALIZE AND PHASE = 6;
      716+    1278                               %ENDIF;
      717+    1279
      718+    1280        %EQU MP2DR      = 157; /* '0235'O         lop = lop * rop rounded   */
      719+    1281                               %IF INITIALIZE AND PHASE = 6;
      721+    1283                               %ENDIF;
      722+    1284
      723+    1285        %EQU MP2I       = 158; /* '0236'O         lop = lop * rop comp-6    */
      724+    1286                               %IF INITIALIZE AND PHASE = 6;
      726+    1288                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:376  
      727+    1289
      728+    1290        %EQU DV2D       = 159; /* '0237'O         lop = lop / rop  decimal  */
      729+    1291                               %IF INITIALIZE AND PHASE = 6;
      731+    1293                               %ENDIF;
      732+    1294
      733+    1295        %EQU DV2DR      = 160; /* '0240'O         lop = lop / rop  rounded  */
      734+    1296                               %IF INITIALIZE AND PHASE = 6;
      736+    1298                               %ENDIF;
      737+    1299
      738+    1300        %EQU DV2I       = 161; /* '0241'O         lop = lop / rop  comp-6   */
      739+    1301                               %IF INITIALIZE AND PHASE = 6;
      741+    1303                               %ENDIF;
      742+    1304
      743+    1305        %EQU DV2IR      = 162; /* '0242'O         lop = lop / rop rounded   */
      744+    1306                               %IF INITIALIZE AND PHASE = 6;
      746+    1308                               %ENDIF;
      747+    1309
      748+    1310        %EQU MVDD       = 163; /* '0243'O         lop = rop        decimal  */
      749+    1311                               %IF INITIALIZE AND PHASE = 6;
      751+    1313                               %ENDIF;
      752+    1314
      753+    1315        %EQU MVDDR      = 164; /* '0244'O         lop = rop        rounded  */
      754+    1316                               %IF INITIALIZE AND PHASE = 6;
      756+    1318                               %ENDIF;
      757+    1319
      758+    1320        %EQU MVII       = 165; /* '0245'O         lop = rop        comp-6   */
      759+    1321                               %IF INITIALIZE AND PHASE = 6;
      761+    1323                               %ENDIF;
      762+    1324
      763+    1325        %EQU MVRR       = 166; /* '0246'O         lop = rop real  (comp-13) */
      764+    1326                               %IF INITIALIZE AND PHASE = 6;
      766+    1328                               %ENDIF;
      767+    1329
      768+    1330        %EQU MVQQ       = 167; /* '0247'O         lop = rop d.p.  (comp-14) */
      769+    1331                               %IF INITIALIZE AND PHASE = 6;
      771+    1333                               %ENDIF;
      772+    1334
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:377  
      773+    1335        %EQU MVRL       = 168; /* '0250'O         lop = rop right-to-left   */
      774+    1336                               %IF INITIALIZE AND PHASE = 6;
      776+    1338                               %ENDIF;
      777+    1339
      778+    1340        %EQU MVHH       = 169; /* '0251'O                   half word       */
      779+    1341                               %IF INITIALIZE AND PHASE = 6;
      781+    1343                               %ENDIF;
      782+    1344
      783+    1345        %EQU MVID       = 170; /* '0252'O         comp-6 = decimal          */
      784+    1346                               %IF INITIALIZE AND PHASE = 6;
      786+    1348                               %ENDIF;
      787+    1349
      788+    1350        %EQU MVIH       = 171; /* '0253'O         comp-6 = half word        */
      789+    1351                               %IF INITIALIZE AND PHASE = 6;
      791+    1353                               %ENDIF;
      792+    1354
      793+    1355        %EQU MVAN       = 172; /* '0254'O         lop = rop  alphanumeric   */
      794+    1356                               %IF INITIALIZE AND PHASE = 6;
      796+    1358                               %ENDIF;
      797+    1359
      798+    1360        %EQU MVANO      = 173; /* '0255'O         Mvan optimized            */
      799+    1361                               %IF INITIALIZE AND PHASE = 6;
      801+    1363                               %ENDIF;
      802+    1364
      803+    1365        %EQU MVIJ       = 174; /* '0256'O         comp-6 = comp-1 or comp-2 */
      804+    1366                               %IF INITIALIZE AND PHASE = 6;
      806+    1368                               %ENDIF;
      807+    1369
      808+    1370        %EQU MVOD       = 175; /* '0257'O         overpunched = decimal     */
      809+    1371                               %IF INITIALIZE AND PHASE = 6;
      811+    1373                               %ENDIF;
      812+    1374
      813+    1375        %EQU MVQD       = 176; /* '0260'O         double-prec = decimal     */
      814+    1376                               %IF INITIALIZE AND PHASE = 6;
      816+    1378                               %ENDIF;
      817+    1379
      818+    1380        %EQU MVRD       = 177; /* '0261'O         real = decimal            */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:378  
      819+    1381                               %IF INITIALIZE AND PHASE = 6;
      821+    1383                               %ENDIF;
      822+    1384
      823+    1385        %EQU MVJJ       = 178; /* '0262'O         lop = rop  comp-1         */
      824+    1386                               %IF INITIALIZE AND PHASE = 6;
      826+    1388                               %ENDIF;
      827+    1389
      828+    1390        %EQU MVDO       = 179; /* '0263'O         decimal = overpunched     */
      829+    1391                               %IF INITIALIZE AND PHASE = 6;
      831+    1393                               %ENDIF;
      832+    1394
      833+    1395        %EQU MVDQ       = 180; /* '0264'O         decimal = double real     */
      834+    1396                               %IF INITIALIZE AND PHASE = 6;
      836+    1398                               %ENDIF;
      837+    1399
      838+    1400        %EQU MVDR       = 181; /* '0265'O         decimal = real            */
      839+    1401                               %IF INITIALIZE AND PHASE = 6;
      841+    1403                               %ENDIF;
      842+    1404
      843+    1405        %EQU MVDI       = 182; /* '0266'O         decimal = comp-6          */
      844+    1406                               %IF INITIALIZE AND PHASE = 6;
      846+    1408                               %ENDIF;
      847+    1409
      848+    1410        %EQU MVKK       = 183; /* '0267'O         lop = rop comp-2          */
      849+    1411                               %IF INITIALIZE AND PHASE = 6;
      851+    1413                               %ENDIF;
      852+    1414
      853+    1415        %EQU MFILL      = 184; /* '0270'O         alpha = fill character    */
      854+    1416                               %IF INITIALIZE AND PHASE = 6;
      856+    1418                               %ENDIF;
      857+    1419
      858+    1420        %EQU MVIK       = 185; /* '0271'O         move tyi ==> tyk          */
      859+    1421                               %IF INITIALIZE AND PHASE = 6;
      861+    1423                               %ENDIF;
      862+    1424
      863+    1425        %EQU MVKI       = 186; /* '0272'O        move tyk ==> tyi          */
      864+    1426                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:379  
      866+    1428                               %ENDIF;
      867+    1429
      868+    1430        %EQU MVJI       = 187; /* '0273'O        move tyj ==> tyi          */
      869+    1431                               %IF INITIALIZE AND PHASE = 6;
      871+    1433                               %ENDIF;
      872+    1434
      873+    1435        %EQU PINC       = 188; /* '0274'O        pointer increment         */
      874+    1436                               %IF INITIALIZE AND PHASE = 6;
      876+    1438                               %ENDIF;
      877+    1439
      878+    1440        %EQU MVPP       = 189; /* '0275'O        move typ ==> typ          */
      879+    1441                               %IF INITIALIZE AND PHASE = 6;
      881+    1443                               %ENDIF;
      882+    1444
      883+    1445        /*------------------------------------------------------------------*
      884+    1446                    Room  for  item(s)  here
      885+    1447         *------------------------------------------------------------------*/
      886+    1448
      887+    1449                               %IF INITIALIZE AND PHASE = 6;
      889+    1451                               %ENDIF;
      890+    1452
      891+    1453        %EQU REMEM     = 203;  /* '0313'O     Remember Argument            */
      892+    1454                               %IF INITIALIZE AND PHASE = 6;
      894+    1456                               %ENDIF;
      895+    1457        %EQU STP2      = 204;  /* '0314'O     STP2 to lop                   */
      896+    1458                               %IF INITIALIZE AND PHASE = 6;
      898+    1460                               %ENDIF;
      899+    1461
      900+    1462        %EQU MVDDD      = 205; /* '0315'O         to_ = lop  de-edited      */
      901+    1463                               %IF INITIALIZE AND PHASE = 6;
      903+    1465                               %ENDIF;
      904+    1466
      905+    1467        %EQU MVEAL      = 206; /* '0316'O         move edited alpha > 63    */
      906+    1468                               %IF INITIALIZE AND PHASE = 6;
      908+    1470                               %ENDIF;
      909+    1471
      910+    1472        %EQU MVEAN      = 207; /* '0317'O         move edited alphanumeric  */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:380  
      911+    1473                               %IF INITIALIZE AND PHASE = 6;
      913+    1475                               %ENDIF;
      914+    1476
      915+    1477        %EQU MVEDD      = 208; /* '0310'O         move edited decimal       */
      916+    1478                               %IF INITIALIZE AND PHASE = 6;
      918+    1480                               %ENDIF;
      919+    1481
      920+    1482        %EQU AD3D       = 209; /* '0321'O         to_ = lop + rop deciaml   */
      921+    1483                               %IF INITIALIZE AND PHASE = 6;
      923+    1485                               %ENDIF;
      924+    1486
      925+    1487        %EQU AD3DR      = 210; /* '0322'O         to_ = lop + rop rounded   */
      926+    1488                               %IF INITIALIZE AND PHASE = 6;
      928+    1490                               %ENDIF;
      929+    1491
      930+    1492        %EQU SB3D       = 211; /* '0323'O         to_ = lop - rop decimal   */
      931+    1493                               %IF INITIALIZE AND PHASE = 6;
      933+    1495                               %ENDIF;
      934+    1496
      935+    1497        %EQU SB3DR      = 212; /* '0324'O         to_ = lop - rop rounded   */
      936+    1498                               %IF INITIALIZE AND PHASE = 6;
      938+    1500                               %ENDIF;
      939+    1501
      940+    1502        %EQU MP3D       = 213; /* '0325'O         to_ = lop * rop  decimal  */
      941+    1503                               %IF INITIALIZE AND PHASE = 6;
      943+    1505                               %ENDIF;
      944+    1506
      945+    1507        %EQU MP3DR      = 214; /* '0326'O         to_ = lop * rop rounded   */
      946+    1508                               %IF INITIALIZE AND PHASE = 6;
      948+    1510                               %ENDIF;
      949+    1511
      950+    1512        %EQU DV3D       = 215; /* '0327'O         to_ = lop / rop deciaml   */
      951+    1513                               %IF INITIALIZE AND PHASE = 6;
      953+    1515                               %ENDIF;
      954+    1516
      955+    1517        %EQU DV3DR      = 216; /* '0330'O         to_ = lop / rop rounded   */
      956+    1518                               %IF INITIALIZE AND PHASE = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:381  
      958+    1520                               %ENDIF;
      959+    1521
      960+    1522                               %IF INITIALIZE AND PHASE = 6;
      962+    1524                               %ENDIF;
      963+    1525
      964+    1526        %EQU DV4I       = 218; /* '0332'O         to_ = lop/rop remainder   */
      965+    1527                               %IF INITIALIZE AND PHASE = 6;
      967+    1529                               %ENDIF;
      968+    1530
      969+    1531        /*------------------------------------------------------------------*
      970+    1532                    Room  for item(s)  here
      971+    1533         *------------------------------------------------------------------*/
      972+    1534
      973+    1535                               %IF INITIALIZE AND PHASE = 6;
      975+    1537                               %ENDIF;
      976+    1538
      977+    1539        %EQU P_P_PRESET = 222; /* '0336'O        PTR PTR Preset            */
      978+    1540                               %IF INITIALIZE AND PHASE = 6;
      980+    1542                               %ENDIF;
      981+    1543
      982+    1544        %EQU STOP       = 223; /* '0337'O         stop run                  */
      983+    1545                               %IF INITIALIZE AND PHASE = 6;
      985+    1547                               %ENDIF;
      986+    1548
      987+    1549        %EQU STOPL      = 224; /* '0340'O         stop literal              */
      988+    1550                               %IF INITIALIZE AND PHASE = 6;
      990+    1552                               %ENDIF;
      991+    1553
      992+    1554        %EQU EVALP      = 225; /* '0341'O         evaluate primary          */
      993+    1555                               %IF INITIALIZE AND PHASE = 6;
      995+    1557                               %ENDIF;
      996+    1558
      997+    1559        %EQU CCOSU      = 226; /* '0342'O         compute common subexpr.   */
      998+    1560                               %IF INITIALIZE AND PHASE = 6;
     1000+    1562                               %ENDIF;
     1001+    1563
     1002+    1564        %EQU PTR_SET    = 227; /* '0343'O         preset pointer            */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:382  
     1003+    1565                               %IF INITIALIZE AND PHASE = 6;
     1005+    1567                               %ENDIF;
     1006+    1568
     1007+    1569        %EQU GO         = 228; /* '0344'O         go to                     */
     1008+    1570                               %IF INITIALIZE AND PHASE = 6;
     1010+    1572                               %ENDIF;
     1011+    1573
     1012+    1574        %EQU MULTI_GO   = 229; /* '0345'O         Multi label go            */
     1013+    1575                               %IF INITIALIZE AND PHASE = 6;
     1015+    1577                               %ENDIF;
     1016+    1578
     1017+    1579        %EQU DEFLB      = 230; /* '0346'O         define label              */
     1018+    1580                               %IF INITIALIZE AND PHASE = 6;
     1020+    1582                               %ENDIF;
     1021+    1583
     1022+    1584        %EQU INITV      = 231; /* '0347'O         initialize value (dn#15)  */
     1023+    1585                               %IF INITIALIZE AND PHASE = 6;
     1025+    1587                               %ENDIF;
     1026+    1588
     1027+    1589        %EQU INCRV      = 232; /* '0350'O         increment value (dn#15)   */
     1028+    1590                               %IF INITIALIZE AND PHASE = 6;
     1030+    1592                               %ENDIF;
     1031+    1593
     1032+    1594                               %IF INITIALIZE AND PHASE = 6; /*  2 MORE HERE*/
     1034+    1596                               %ENDIF;
     1035+    1597
     1036+    1598        %EQU ENTRY      = 235; /* '0353'O         entry point               */
     1037+    1599                               %IF INITIALIZE AND PHASE = 6;
     1039+    1601                               %ENDIF;
     1040+    1602
     1041+    1603        %EQU ON_SWITCH  = 236; /* '0354'O         set switch on             */
     1042+    1604                               %IF INITIALIZE AND PHASE = 6;
     1044+    1606                               %ENDIF;
     1045+    1607
     1046+    1608        %EQU OFF_SWITCH = 237; /* '0355'O         set switch off            */
     1047+    1609                               %IF INITIALIZE AND PHASE = 6;
     1049+    1611                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:383  
     1050+    1612
     1051+    1613        %EQU GO_SUB     = 238; /* '0356'O         perform optimized         */
     1052+    1614                               %IF INITIALIZE AND PHASE = 6;
     1054+    1616                               %ENDIF;
     1055+    1617
     1056+    1618        %EQU SUB_ENTRY  = 239; /* '0357'O         perform entry             */
     1057+    1619                               %IF INITIALIZE AND PHASE = 6;
     1059+    1621                               %ENDIF;
     1060+    1622
     1061+    1623        %EQU SUB_END    = 240; /* '0360'O         perform exit              */
     1062+    1624                               %IF INITIALIZE AND PHASE = 6;
     1064+    1626                               %ENDIF;
     1065+    1627
     1066+    1628        %EQU SUB_PREP   = 241; /* '0361'O         perform fall thru         */
     1067+    1629                               %IF INITIALIZE AND PHASE = 6;
     1069+    1631                               %ENDIF;
     1070+    1632
     1071+    1633        %EQU OS_CALL    = 242; /* '0362'O         procedure call through    */
     1072+    1634                              %IF INITIALIZE AND PHASE = 6; /* the operator segment X9OS */
     1074+    1636                               %ENDIF;
     1075+    1637
     1076+    1638        %EQU USER_CALL  = 243; /* '0363'O         proc call to user routine */
     1077+    1639                               %IF INITIALIZE AND PHASE = 6;
     1079+    1641                               %ENDIF;
     1080+    1642
     1081+    1643        %EQU USE_ENTRY  = 244; /* '0364'O         USE section entry         */
     1082+    1644                               %IF INITIALIZE AND PHASE = 6;
     1084+    1646                               %ENDIF;
     1085+    1647
     1086+    1648        %EQU USE_END    = 245; /* '0365'O         USE section return        */
     1087+    1649                               %IF INITIALIZE AND PHASE = 6;
     1089+    1651                               %ENDIF;
     1090+    1652
     1091+    1653        %EQU EXIT_PROG  = 246; /* '0366'O         EXIT PROGRAM              */
     1092+    1654                               %IF INITIALIZE AND PHASE = 6;
     1094+    1656                               %ENDIF;
     1095+    1657
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:384  
     1096+    1658        %EQU VAL        = 247; /* '0367'O         VALue frozen              */
     1097+    1659                               %IF INITIALIZE AND PHASE = 6;
     1099+    1661                               %ENDIF;
     1100+    1662
     1101+    1663        %EQU VAL_END    = 248; /* '0370'O         VALue frozen END          */
     1102+    1664                               %IF INITIALIZE AND PHASE = 6;
     1104+    1666                               %ENDIF;
     1105+    1667
     1106+    1668        %EQU ACCEP      = 249; /* '0371'O         accept                    */
     1107+    1669                               %IF INITIALIZE AND PHASE = 6;
     1109+    1671                               %ENDIF;
     1110+    1672
     1111+    1673        %EQU DISPL      = 250; /* '0372'          display                   */
     1112+    1674                               %IF INITIALIZE AND PHASE = 6;
     1114+    1676                               %ENDIF;
     1115+    1677
     1116+    1678        %EQU LINOI      = 251; /* '0373'O         line number item          */
     1117+    1679                               %IF INITIALIZE AND PHASE = 6;
     1119+    1681                               %ENDIF;
     1120+    1682
     1121+    1683        %EQU END        = 252; /* '0374'O         end program               */
     1122+    1684                               %IF INITIALIZE AND PHASE = 6;
     1124+    1686                               %ENDIF;
     1125+    1687
     1126+    1688        %EQU DO1        = 253; /* '0375'O         in-line perform           */
     1127+    1689                               %IF INITIALIZE AND PHASE = 6;
     1129+    1691                               %ENDIF;
     1130+    1692
     1131+    1693        %EQU DO2        = 254; /* '0376'O                                   */
     1132+    1694                               %IF INITIALIZE AND PHASE = 6;
     1134+    1696                               %ENDIF;
     1135+    1697
     1136+    1698        %EQU DO3        = 255; /* '0377'O                                   */
     1137+    1699                               %IF INITIALIZE AND PHASE = 6;
     1139+    1701                               %ENDIF;
     1140+    1702
     1141+    1703        %EQU DO4        = 256; /* '0400'O                                   */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:385  
     1142+    1704                               %IF INITIALIZE AND PHASE = 6;
     1144+    1706                               %ENDIF;
     1145+    1707
     1146+    1708        %EQU DO5        = 257; /* '0401'O         in-line perform           */
     1147+    1709                               %IF INITIALIZE AND PHASE = 6;
     1149+    1711                               %ENDIF;
     1150+    1712
     1151+    1713        %EQU MVFIL      = 258; /* '0402'O         Move with fill */
     1152+    1714                               %IF INITIALIZE AND PHASE = 6;
     1154+    1716                               %ENDIF;
     1155+    1717
     1156+    1718        %EQU DOEND      = 259; /* '0403'O         end in-line perform       */
     1157+    1719                               %IF INITIALIZE AND PHASE = 6;
     1159+    1721                               %ENDIF;
     1160+    1722
     1161+    1723        %EQU PFORM      = 260; /* '0404'O         out-of-line perform       */
     1162+    1724                               %IF INITIALIZE AND PHASE = 6;
     1164+    1726                               %ENDIF;
     1165+    1727
     1166+    1728                               %IF INITIALIZE AND PHASE = 6; /*  2 MORE HERE*/
     1168+    1730                               %ENDIF;
     1169+    1731
     1170+    1732        %EQU EVALU      = 263; /* '407'O          evaluate statement        */
     1171+    1733                               %IF INITIALIZE AND PHASE = 6;
     1173+    1735                               %ENDIF;
     1174+    1736
     1175+    1737        %EQU WHEN       = 264; /* '0410'O         when sub-statement        */
     1176+    1738                               %IF INITIALIZE AND PHASE = 6;
     1178+    1740                               %ENDIF;
     1179+    1741
     1180+    1742        %EQU OR2I       = 265; /* '0411'O         lop = lop OR rop  comp-6  */
     1181+    1743                               %IF INITIALIZE AND PHASE = 6;
     1183+    1745                               %ENDIF;
     1184+    1746
     1185+    1747        %EQU ALTER      = 266; /* '0412'O         alter statement           */
     1186+    1748                               %IF INITIALIZE AND PHASE = 6;
     1188+    1750                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:386  
     1189+    1751
     1190+    1752        %EQU SEARCH     = 267; /* '0413'O         search primitive          */
     1191+    1753                               %IF INITIALIZE AND PHASE = 6;
     1193+    1755                               %ENDIF;
     1194+    1756
     1195+    1757        %EQU MVT        = 268; /* '0414'O         move and translate        */
     1196+    1758                               %IF INITIALIZE AND PHASE = 6;
     1198+    1760                               %ENDIF;
     1199+    1761
     1200+    1762        %EQU MVOOR      = 269; /* '0415'O         move overpunched rounded  */
     1201+    1763                               %IF INITIALIZE AND PHASE = 6;
     1203+    1765                               %ENDIF;
     1204+    1766
     1205+    1767        %EQU MVDOR      = 270; /* '0416'O         move dec to over rounded  */
     1206+    1768                               %IF INITIALIZE AND PHASE = 6;
     1208+    1770                               %ENDIF;
     1209+    1771
     1210+    1772        %EQU MVODR      = 271; /* '0417'O         move over to dec rounded  */
     1211+    1773                               %IF INITIALIZE AND PHASE = 6;
     1213+    1775                               %ENDIF;
     1214+    1776
     1215+    1777        %EQU PREOFF     = 272; /* '0420'O         Preset w/offset in words  */
     1216+    1778                               %IF INITIALIZE AND PHASE = 6;
     1218+    1780                               %ENDIF;
     1219+    1781
     1220+    1782        %EQU PEND       = 273; /* '0421'O         end of data divisions     */
     1221+    1783                               %IF INITIALIZE AND PHASE = 6; /*        presets           */
     1223+    1785                               %ENDIF;
     1224+    1786
     1225+    1787        %EQU PRESET     = 274; /* '0422'O         data preset               */
     1226+    1788                               %IF INITIALIZE AND PHASE = 6;
     1228+    1790                               %ENDIF;
     1229+    1791
     1230+    1792        %EQU MVOO       = 275; /* '0423'O         lop = rop overpunch       */
     1231+    1793                               %IF INITIALIZE AND PHASE = 6;
     1233+    1795                               %ENDIF;
     1234+    1796
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:387  
     1235+    1797        %EQU AD2O       = 276; /* '0424'O         lop = lop + rop overpunch */
     1236+    1798                               %IF INITIALIZE AND PHASE = 6;
     1238+    1800                               %ENDIF;
     1239+    1801
     1240+    1802        %EQU AD2OR      = 277; /* '0425'O         lop = lop + rop overpunch */
     1241+    1803                               %IF INITIALIZE AND PHASE = 6; /*             rounded      */
     1243+    1805                               %ENDIF;
     1244+    1806
     1245+    1807        %EQU AD3O       = 278; /* '0426'O         to_ = lop + rop overpunch */
     1246+    1808                               %IF INITIALIZE AND PHASE = 6;
     1248+    1810                               %ENDIF;
     1249+    1811
     1250+    1812        %EQU AD3OR      = 279; /* '0427'O         to_ = lop + rop overpunch */
     1251+    1813                               %IF INITIALIZE AND PHASE = 6; /*                 rounded  */
     1253+    1815                               %ENDIF;
     1254+    1816
     1255+    1817        %EQU MP2O       = 280; /* '0430'O         lop = lop * rop overpunch */
     1256+    1818                               %IF INITIALIZE AND PHASE = 6;
     1258+    1820                               %ENDIF;
     1259+    1821
     1260+    1822        %EQU MP2OR      = 281; /* '0431'O         lop = lop * rop overpunch */
     1261+    1823                               %IF INITIALIZE AND PHASE = 6; /*                 rounded  */
     1263+    1825                               %ENDIF;
     1264+    1826
     1265+    1827        %EQU MP3O       = 282; /* '0432'O         to_ = lop * rop overpunch */
     1266+    1828                               %IF INITIALIZE AND PHASE = 6;
     1268+    1830                               %ENDIF;
     1269+    1831
     1270+    1832        %EQU MP3OR      = 283; /* '0433'O         to_ = lop * rop overpunch */
     1271+    1833                               %IF INITIALIZE AND PHASE = 6; /*                 rounded  */
     1273+    1835                               %ENDIF;
     1274+    1836
     1275+    1837        %EQU DV2O       = 284; /* '0434'O         lop = lop / rop overpunch */
     1276+    1838                               %IF INITIALIZE AND PHASE = 6;
     1278+    1840                               %ENDIF;
     1279+    1841
     1280+    1842        %EQU DV2OR      = 285; /* '0435'O         lop = lop / rop overpunch */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:388  
     1281+    1843                               %IF INITIALIZE AND PHASE = 6; /*                 rounded  */
     1283+    1845                               %ENDIF;
     1284+    1846
     1285+    1847        %EQU DV3O       = 286; /* '0436'O         to_ = lop / rop overpunch */
     1286+    1848                               %IF INITIALIZE AND PHASE = 6;
     1288+    1850                               %ENDIF;
     1289+    1851
     1290+    1852        %EQU DV3OR      = 287; /* '0437'O         to_ = lop / rop overpunch */
     1291+    1853                               %IF INITIALIZE AND PHASE = 6; /*                 rounded  */
     1293+    1855                               %ENDIF;
     1294+    1856
     1295+    1857        %EQU SB2O       = 288; /* '0440'O         lop = lop - rop overpunch */
     1296+    1858                               %IF INITIALIZE AND PHASE = 6;
     1298+    1860                               %ENDIF;
     1299+    1861
     1300+    1862        %EQU SB2OR      = 289; /* '0441'O         lop = lop - rop overpunch */
     1301+    1863                               %IF INITIALIZE AND PHASE = 6; /*                 rounded  */
     1303+    1865                               %ENDIF;
     1304+    1866
     1305+    1867        %EQU SB3O       = 290; /* '0442'O         to_ = lop - rop overpunch */
     1306+    1868                               %IF INITIALIZE AND PHASE = 6;
     1308+    1870                               %ENDIF;
     1309+    1871
     1310+    1872        %EQU SB3OR      = 291; /* '0443'O         to_ = lop - rop overpunch */
     1311+    1873                               %IF INITIALIZE AND PHASE = 6; /*                 rounded  */
     1313+    1875                               %ENDIF;
     1314+    1876
     1315+    1877        %EQU END_PROG   = 292; /* '0444'O         similar to %EOD           */
     1316+    1878                                %IF INITIALIZE AND PHASE = 6;
     1318+    1880                                %ENDIF;
     1319+    1881        %EQU SCOPE      = 293; /* '0445'O         Defines begin of scope    */
     1320+    1882                                %IF INITIALIZE AND PHASE = 6;
     1322+    1884                                %ENDIF;
     1323+    1885
     1324+    1886        %EQU P_A_PRESET = 294; /* '0446'O        Pointer/Absolute preset   */
     1325+    1887                                %IF INITIALIZE AND PHASE = 6;
     1327+    1889                                %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:389  
     1328+    1890
     1329+    1891        %EQU LAST_ILL   = 294; /* '0446'O         Update as items are added */
     1330+    1892
     1331+    1893        /*-----------------------------------------------------------------*
     1332+    1894                   Room  for  more  item(s)  here
     1333+    1895         *------------------------------------------------------------------*/
     1334+    1896
     1335+    1897                               %IF INITIALIZE AND PHASE = 6;
     1337+    1899                               %ENDIF;
     1338+    1900        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:390  
     1339+    1901        %EQU FIRST_ILS  = 480; /* '0740'O         update as items are added */
     1340+    1902
     1341+    1903        %EQU OPN        = 480; /* '0740'O                                   */
     1342+    1904                               %IF INITIALIZE AND PHASE = 6;
     1344+    1906                               %ENDIF;
     1345+    1907
     1346+    1908        %EQU OPV        = 481; /* '0741'O                                   */
     1347+    1909                               %IF INITIALIZE AND PHASE = 6;
     1349+    1911                               %ENDIF;
     1350+    1912
     1351+    1913        %EQU OPA        = 482; /* '0742'O                                   */
     1352+    1914                               %IF INITIALIZE AND PHASE = 6;
     1354+    1916                               %ENDIF;
     1355+    1917
     1356+    1918        %EQU LAST_ILS   = 482; /* '0742'O         update as items are added */
     1357+    1919
     1358+    1920        %EJECT
     1359+    1921        %EQU DPI        = 483; /* '0743'O                                   */
     1360+    1922                               %IF INITIALIZE AND PHASE = 6;
     1362+    1924                               %ENDIF;
     1363+    1925
     1364+    1926                               %IF INITIALIZE AND PHASE = 6;
     1366+    1928                               %ENDIF;
     1367+    1929        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:391  
     1368+    1930        %EQU FIRST_ERR  = 488; /* '0750'O                                   */
     1369+    1931
     1370+    1932        %EQU ERROR      = 488; /* '0750'O                                   */
     1371+    1933                               %IF INITIALIZE AND PHASE = 6;
     1373+    1935                               %ENDIF;
     1374+    1936
     1375+    1937        %EQU LAST_ERR   = 488; /* '0750'O                                   */
     1376+    1938        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:392  
     1377+    1939        %EQU FIRST_ST   = 489; /* '0751'O                                   */
     1378+    1940
     1379+    1941        %EQU CSIB       = 489; /* '0751'O                                   */
     1380+    1942                               %IF INITIALIZE AND PHASE = 6;
     1382+    1944                               %ENDIF;
     1383+    1945
     1384+    1946        %EQU REALM      = 490; /* '0752'O                                   */
     1385+    1947                               %IF INITIALIZE AND PHASE = 6;
     1387+    1949                               %ENDIF;
     1388+    1950
     1389+    1951        %EQU DML_SET    = 491; /* '0753'O                                   */
     1390+    1952                               %IF INITIALIZE AND PHASE = 6;
     1392+    1954                               %ENDIF;
     1393+    1955
     1394+    1956        %EQU DML_KEY    = 492; /* '0754'O                                   */
     1395+    1957                               %IF INITIALIZE AND PHASE = 6;
     1397+    1959                               %ENDIF;
     1398+    1960
     1399+    1961        %EQU PRIVACY_KEY =493; /* '0755'O                                   */
     1400+    1962                               %IF INITIALIZE AND PHASE = 6;
     1402+    1964                               %ENDIF;
     1403+    1965
     1404+    1966        %EQU PROC_      = 494; /* '0756'O    Proc st item                   */
     1405+    1967                               %IF INITIALIZE AND PHASE = 6;
     1407+    1969                               %ENDIF;
     1408+    1970
     1409+    1971        %EQU CLASS      = 495; /* '0757'O    User defined class             */
     1410+    1972                               %IF INITIALIZE AND PHASE = 6;
     1412+    1974                               %ENDIF;
     1413+    1975
     1414+    1976        %EQU TEMP       = 496; /* '0760'O                                   */
     1415+    1977                               %IF INITIALIZE AND PHASE = 6;
     1417+    1979                               %ENDIF;
     1418+    1980
     1419+    1981        %EQU MNEMONIC   = 497; /* '0761'O                                   */
     1420+    1982                               %IF INITIALIZE AND PHASE = 6;
     1422+    1984                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:393  
     1423+    1985
     1424+    1986        %EQU SWITCH     = 498; /* '0762'O                                   */
     1425+    1987                               %IF INITIALIZE AND PHASE = 6;
     1427+    1989                               %ENDIF;
     1428+    1990
     1429+    1991        %EQU ALPHABET   = 499; /* '0763'O                                   */
     1430+    1992                               %IF INITIALIZE AND PHASE = 6;
     1432+    1994                               %ENDIF;
     1433+    1995
     1434+    1996        %EQU CONDITION  = 500; /* '0764'O                                   */
     1435+    1997                               %IF INITIALIZE AND PHASE = 6;
     1437+    1999                               %ENDIF;
     1438+    2000
     1439+    2001        %EQU ARRAY      = 501; /* '0765'O                                   */
     1440+    2002                               %IF INITIALIZE AND PHASE = 6;
     1442+    2004                               %ENDIF;
     1443+    2005
     1444+    2006        %EQU SCALAR     = 502; /* '0766'O                                   */
     1445+    2007                               %IF INITIALIZE AND PHASE = 6;
     1447+    2009                               %ENDIF;
     1448+    2010
     1449+    2011        %EQU CONST      = 503; /* '0767'O                                   */
     1450+    2012                               %IF INITIALIZE AND PHASE = 6;
     1452+    2014                               %ENDIF;
     1453+    2015
     1454+    2016        %EQU SECTION    = 504; /* '0770'O                                   */
     1455+    2017                               %IF INITIALIZE AND PHASE = 6;
     1457+    2019                               %ENDIF;
     1458+    2020
     1459+    2021        %EQU PARA       = 505; /* '0771'O                                   */
     1460+    2022                               %IF INITIALIZE AND PHASE = 6;
     1462+    2024                               %ENDIF;
     1463+    2025
     1464+    2026        %EQU SYMREF_    = 506; /* '0772'O                                   */
     1465+    2027                               %IF INITIALIZE AND PHASE = 6;
     1467+    2029                               %ENDIF;
     1468+    2030
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:394  
     1469+    2031        %EQU SYMDEF_    = 507; /* '0773'O                                   */
     1470+    2032                               %IF INITIALIZE AND PHASE = 6;
     1472+    2034                               %ENDIF;
     1473+    2035
     1474+    2036        %EQU BLOCK      = 508; /* '0774'O                                   */
     1475+    2037                               %IF INITIALIZE AND PHASE = 6;
     1477+    2039                               %ENDIF;
     1478+    2040
     1479+    2041        %EQU INDUCT     = 509; /* '0775'O                                   */
     1480+    2042                               %IF INITIALIZE AND PHASE = 6;
     1482+    2044                               %ENDIF;
     1483+    2045
     1484+    2046        %EQU INTDEF     = 510; /* '0776'O                                   */
     1485+    2047                               %IF INITIALIZE AND PHASE = 6;
     1487+    2049                               %ENDIF;
     1488+    2050
     1489+    2051        %EQU POINTER    = 511; /* '0777'O                                   */
     1490+    2052                               %IF INITIALIZE AND PHASE = 6;
     1492+    2054                               %ENDIF;
     1493+    2055
     1494+    2056        %EQU SEGMENT    = 512; /* '1000'O                                   */
     1495+    2057                               %IF INITIALIZE AND PHASE = 6;
     1497+    2059                               %ENDIF;
     1498+    2060
     1499+    2061        %EQU SYM_CHAR   = 513; /* '1001'O                                   */
     1500+    2062                               %IF INITIALIZE AND PHASE = 6;
     1502+    2064                               %ENDIF;
     1503+    2065
     1504+    2066        %EQU FD         = 514; /* '1002'O                                   */
     1505+    2067                               %IF INITIALIZE AND PHASE = 6;
     1507+    2069                               %ENDIF;
     1508+    2070
     1509+    2071        %EQU SD         = 515; /* '1003'O                                   */
     1510+    2072                               %IF INITIALIZE AND PHASE = 6;
     1512+    2074                               %ENDIF;
     1513+    2075
     1514+    2076        %EQU CD         = 516; /* '1004'O                                   */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:395  
     1515+    2077                               %IF INITIALIZE AND PHASE = 6;
     1517+    2079                               %ENDIF;
     1518+    2080
     1519+    2081        %EQU RD         = 517; /* '1005'O                                   */
     1520+    2082                               %IF INITIALIZE AND PHASE = 6;
     1522+    2084                               %ENDIF;
     1523+    2085
     1524+    2086        %EQU DB         = 518; /* '1006'O                                   */
     1525+    2087                               %IF INITIALIZE AND PHASE = 6;
     1527+    2089                               %ENDIF;
     1528+    2090
     1529+    2091        %EQU DCB_       = 519; /* '1007'O                                   */
     1530+    2092                               %IF INITIALIZE AND PHASE = 6;
     1532+    2094                               %ENDIF;
     1533+    2095
     1534+    2096        %EQU LAST_ST    = 519; /* '1007'O         add at the front          */
     1535+    2097        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:396  
     1536+    2098        %EQU FIRST_OBJ  = 520; /* '1010'O                                   */
     1537+    2099
     1538+    2100        %EQU LINE       = 520; /* '1010'O                                   */
     1539+    2101                               %IF INITIALIZE AND PHASE = 6;
     1541+    2103                               %ENDIF;
     1542+    2104
     1543+    2105        %EQU LAB        = 521; /* '1011'O                                   */
     1544+    2106                               %IF INITIALIZE AND PHASE = 6;
     1546+    2108                               %ENDIF;
     1547+    2109
     1548+    2110        %EQU WORD       = 522; /* '1012'O                                   */
     1549+    2111                               %IF INITIALIZE AND PHASE = 6;
     1551+    2113                               %ENDIF;
     1552+    2114
     1553+    2115        %EQU ORG        = 523; /* '1013'O                                   */
     1554+    2116                               %IF INITIALIZE AND PHASE = 6;
     1556+    2118                               %ENDIF;
     1557+    2119
     1558+    2120        %EQU OBJ_SCOPE  = 524; /*  '1014'O                                  */
     1559+    2121                               %IF INITIALIZE AND PHASE = 6;
     1561+    2123                               %ENDIF;
     1562+    2124
     1563+    2125        %EQU LAST_OBJ   = 524; /* '1014'O         update as items are added */
     1564+    2126
     1565+    2127                               %IF INITIALIZE AND PHASE = 6;
     1567+    2129                               %ENDIF;
     1568+    2130        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:397  
     1569+    2131        %EQU FIRST_DNT  = 550; /* '1046'O                                   */
     1570+    2132
     1571+    2133        %EQU LEXEME     = 550; /* '1046'O                                   */
     1572+    2134                               %IF INITIALIZE AND PHASE = 6;
     1574+    2136                               %ENDIF;
     1575+    2137
     1576+    2138        %EQU LAST_DNT   = 550; /* '1046'O                                   */
     1577+    2139
     1578+    2140                               %IF INITIALIZE AND PHASE = 6;
     1580+    2142                               %ENDIF;
     1581+    2143
     1582+    2144        %EQU FIRST_QLT  = 555; /* '1053'O                                   */
     1583+    2145
     1584+    2146        %EQU QUAL       = 555; /* '1053'O                                   */
     1585+    2147                               %IF INITIALIZE AND PHASE = 6;
     1587+    2149                               %ENDIF;
     1588+    2150
     1589+    2151        %EQU LAST_QLT   = 555; /* '1053'O                                   */
     1590+    2152
     1591+    2153                               %IF INITIALIZE AND PHASE = 6;
     1593+    2155                               %ENDIF;
     1594+    2156        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:398  
     1595+    2157        %EQU FIRST_GST  = 557; /* '1055'O                                   */
     1596+    2158
     1597+    2159        %EQU GSA        = 557; /* '1055'O                                   */
     1598+    2160                               %IF INITIALIZE AND PHASE = 6;
     1600+    2162                               %ENDIF;
     1601+    2163
     1602+    2164        %EQU LAST_GST   = 557; /* '1055'O                                   */
     1603+    2165
     1604+    2166                               %IF INITIALIZE AND PHASE = 6;
     1606+    2168                               %ENDIF;
     1607+    2169        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:399  
     1608+    2170        %EQU FIRST_LTS  = 562; /* '1062'O                                  */
     1609+    2171        %EQU INIT_LTS   = 562; /* '1062'O    Information for INITIALIZE    */
     1610+    2172                               %IF INITIALIZE AND PHASE = 6;
     1612+    2174                               %ENDIF;
     1613+    2175        %EQU BT         = 563; /* '1063'O    Binary tree for GCOS XREF     */
     1614+    2176                               %IF INITIALIZE AND PHASE = 6;
     1616+    2178                               %ENDIF;
     1617+    2179        %EQU USE_SUPP   = 564; /* '1064'O         USE supplement for COMMON program */
     1618+    2180                               %IF INITIALIZE AND PHASE = 6;
     1620+    2182                               %ENDIF;
     1621+    2183        %EQU COPY_FILE  = 565; /* '1065'0                                  */
     1622+    2184                               %IF INITIALIZE AND PHASE = 6;
     1624+    2186                               %ENDIF;
     1625+    2187        %EQU BASE_LTS         = 566; /* '1066'O  LTS for based variable    */
     1626+    2188                               %IF INITIALIZE AND PHASE = 6;
     1628+    2190                               %ENDIF;
     1629+    2191        %EQU IO_RESTORE_CHAIN = 567; /* '1067'O    Restore at EXIT PROGRAM */
     1630+    2192                               %IF INITIALIZE AND PHASE = 6;
     1632+    2194                               %ENDIF;
     1633+    2195        %EQU ARRAY_PRESET_LTS = 568; /* '1070'O    Array preset LTS        */
     1634+    2196                               %IF INITIALIZE AND PHASE = 6;
     1636+    2198                               %ENDIF;
     1637+    2199        %EQU OPEN_LTS    = 569; /* '1071'O    Open LTS                     */
     1638+    2200                               %IF INITIALIZE AND PHASE = 6;
     1640+    2202                               %ENDIF;
     1641+    2203        %EQU CD_LTS      = 570; /* '1072'O     CD entry LTS                */
     1642+    2204                               %IF INITIALIZE AND PHASE = 6;
     1644+    2206                               %ENDIF;
     1645+    2207
     1646+    2208        %EQU ALTER_LTS   = 571; /* '1073'O     alter pointer LTS           */
     1647+    2209                               %IF INITIALIZE AND PHASE = 6;
     1649+    2211                               %ENDIF;
     1650+    2212
     1651+    2213        %EQU SEGMENT_LTS = 572; /* '1074'O         segment LTS             */
     1652+    2214                               %IF INITIALIZE AND PHASE = 6;
     1654+    2216                               %ENDIF;
     1655+    2217
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:400  
     1656+    2218        %EQU RVA              = 573; /* '1075'O                            */
     1657+    2219                                     %IF INITIALIZE AND PHASE = 6;
     1659+    2221                                     %ENDIF;
     1660+    2222
     1661+    2223        %EQU SUM_LTS    = 574; /* '1076'O         sum counter LTS          */
     1662+    2224                               %IF INITIALIZE AND PHASE = 6;
     1664+    2226                               %ENDIF;
     1665+    2227
     1666+    2228
     1667+    2229        %EQU CONTROL_NAME_LTS = 575; /* '1077'O         control name LTS   */
     1668+    2230                               %IF INITIALIZE AND PHASE = 6;
     1670+    2232                               %ENDIF;
     1671+    2233
     1672+    2234        %EQU USE_LTS    = 576; /* '1100'O                                  */
     1673+    2235                               %IF INITIALIZE AND PHASE = 6;
     1675+    2237                               %ENDIF;
     1676+    2238
     1677+    2239
     1678+    2240        %EQU REPORT_01_LTS = 577; /* '1101'O         report_01_entry       */
     1679+    2241                               %IF INITIALIZE AND PHASE = 6;
     1681+    2243                               %ENDIF;
     1682+    2244
     1683+    2245        %EQU REPORT_ELEM_LTS = 578; /* '1102'O    report elementary entry   */
     1684+    2246                               %IF INITIALIZE AND PHASE = 6;
     1686+    2248                               %ENDIF;
     1687+    2249
     1688+    2250        %EQU REPORT_GRP_LTS = 579; /* '1103'O       report group entry      */
     1689+    2251                               %IF INITIALIZE AND PHASE = 6;
     1691+    2253                               %ENDIF;
     1692+    2254
     1693+    2255        %EQU DIMS       = 580; /* '1104'O         dimensions                */
     1694+    2256                               %IF INITIALIZE AND PHASE = 6;
     1696+    2258                               %ENDIF;
     1697+    2259
     1698+    2260        %EQU LTSS       = 581; /* '1105'O         lts supplement item       */
     1699+    2261                               %IF INITIALIZE AND PHASE = 6;
     1701+    2263                               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:401  
     1702+    2264
     1703+    2265        %EQU LCNST      = 582; /* '1106'O         long constant             */
     1704+    2266                               %IF INITIALIZE AND PHASE = 6;
     1706+    2268                               %ENDIF;
     1707+    2269
     1708+    2270        %EQU PRIME      = 583; /* '1107'O         prime item(generator only)*/
     1709+    2271                               %IF INITIALIZE AND PHASE = 6;
     1711+    2273                               %ENDIF;
     1712+    2274
     1713+    2275        %EQU LONG       = 584; /* '1110'O         length of item            */
     1714+    2276                               %IF INITIALIZE AND PHASE = 6;
     1716+    2278                               %ENDIF;
     1717+    2279
     1718+    2280        %EQU REF        = 585; /* '1111'O         modified reference to ST  */
     1719+    2281                               %IF INITIALIZE AND PHASE = 6;
     1721+    2283                               %ENDIF;
     1722+    2284
     1723+    2285        %EQU ARGLIST    = 586; /* '1112'O         list of args              */
     1724+    2286                               %IF INITIALIZE AND PHASE = 6;
     1726+    2288                               %ENDIF;
     1727+    2289
     1728+    2290        %EQU EVALUATE   = 587; /* '1113'O         evaluate sorting          */
     1729+    2291                               %IF INITIALIZE AND PHASE = 6;
     1731+    2293                               %ENDIF;
     1732+    2294
     1733+    2295        %EQU KEY        = 588; /* '1114'O         key item                  */
     1734+    2296                               %IF INITIALIZE AND PHASE = 6;
     1736+    2298                               %ENDIF;
     1737+    2299
     1738+    2300        %EQU NEL        = 589; /* '1115'O         nel item                  */
     1739+    2301                               %IF INITIALIZE AND PHASE = 6;
     1741+    2303                               %ENDIF;
     1742+    2304
     1743+    2305        %EQU INDEXES    = 590; /* '1116'O         indexes item              */
     1744+    2306                               %IF INITIALIZE AND PHASE = 6;
     1746+    2308                               %ENDIF;
     1747+    2309
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:402  
     1748+    2310        %EQU RENAMES    = 591; /* '1117'O         renames item              */
     1749+    2311                               %IF INITIALIZE AND PHASE = 6;
     1751+    2313                               %ENDIF;
     1752+    2314
     1753+    2315        %EQU DEPENDING_SIZE = 592; /* '1120'O     size depending            */
     1754+    2316                               %IF INITIALIZE AND PHASE = 6;
     1756+    2318                               %ENDIF;
     1757+    2319
     1758+    2320        %EQU FILE_LTS   = 593; /* '1121'O         file item             */
     1759+    2321                               %IF INITIALIZE AND PHASE = 6;
     1761+    2323                               %ENDIF;
     1762+    2324
     1763+    2325        %EQU LTS_PTR_ARRAY = 594; /* '1122'O      generic list item(array)  */
     1764+    2326                               %IF INITIALIZE AND PHASE = 6;
     1766+    2328                               %ENDIF;
     1767+    2329
     1768+    2330        %EQU ALT_KEY    = 595; /* '1123'O         alternate key structure   */
     1769+    2331                               %IF INITIALIZE AND PHASE = 6;
     1771+    2333                               %ENDIF;
     1772+    2334
     1773+    2335        %EQU PROC_SUPP  = 596; /* '1124'O         Proc ST item supplement   */
     1774+    2336                               %IF INITIALIZE AND PHASE = 6;
     1776+    2338                               %ENDIF;
     1777+    2339        %EQU DML_REC    = 597; /* '1125'O                                   */
     1778+    2340                               %IF INITIALIZE AND PHASE = 6;
     1780+    2342                               %ENDIF;
     1781+    2343
     1782+    2344        %EQU REPORT_LTS = 598; /* '1126'O         Report item               */
     1783+    2345                               %IF INITIALIZE AND PHASE = 6;
     1785+    2347                               %ENDIF;
     1786+    2348        %EQU DEFERED_ACTION_LTS = 599; /* '1127'O  Defered_action item  */
     1787+    2349                               %IF INITIALIZE AND PHASE = 6;
     1789+    2351                               %ENDIF;
     1790+    2352        %EQU LAST_LTS   = 599; /* '1127'O         update as items are added */
     1791+    2353
     1792+    2354        /*------------------------------------------------------------------*
     1793+    2355                     NO room  for  more  item(s)  here!
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:403  
     1794+    2356         *------------------------------------------------------------------*/
     1795+    2357
     1796+    2358                               %IF INITIALIZE AND PHASE = 6;
     1798+    2360                               %ENDIF;
     1799+    2361         %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:404  
        7+    2362            %INCLUDE X8A_COM_MACS;
        1+    2363        /*T***********************************************************/
        2+    2364        /*T*                                                         */
        3+    2365        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    2366        /*T*                                                         */
        5+    2367        /*T***********************************************************/
        6+    2368        /*  X8A_COM_MACS:   Library and Compiler  common macros             */
        7+    2369
        8+    2370        %MACRO DESCRIPTOR(LVL=2, ENDING(YES='1'B,NO='0'B)='0'B);
        9+    2371
       10+    2372            %(LVL) SA     UBIN HALF UNAL, /* STORAGE ADDRESS    */
       11+    2373            %(LVL) SA_BIT REDEF SA BIT(18) UNAL, /* FOR BOOLEAN */
       12+    2374            %(LVL) SIGNED_SA REDEF SA SBIN HALF UNAL, /* Use carefully!!!   */
       13+    2375            %(LVL) P      REDEF SA BIT(1) HALIGNED, /* EIS descr. P bit */
       14+    2376            %(LVL) DESCL  UBIN HALF UNAL, /* DESCRIPTOR LOWER HALF */
       15+    2377
       16+    2378            %(LVL) BDSC   REDEF DESCL,    /* BIT DESCRIPTOR     */
       17+    2379            %(LVL+1) C      UBIN  (2) UNAL, /* CHARACTER POSITION */
       18+    2380            %(LVL+1) B      UBIN  (4) UNAL, /* BIT WITHIN BYTE    */
       19+    2381            %(LVL+1) N      UBIN (12) UNAL, /* LENGTH             */
       20+    2382            %(LVL) ADSC   REDEF DESCL,    /* ALPHA DESCRIPTOR   */
       21+    2383            %(LVL+1) CN     UBIN  (2) UNAL, /* CHARACTER NUMBER   */
       22+    2384            %(LVL+1) MBZ1   BIT   (1) UNAL, /* MBZ FOR 9-BIT      */
       23+    2385            %(LVL+1) TA     BIT   (2) UNAL, /* TYPE (00 = 9-BIT)  */
       24+    2386            %(LVL+1) MBZ2   BIT   (1) UNAL, /* MUST BE ZERO       */
       25+    2387            %(LVL+1) N      UBIN (12) UNAL, /* LENGTH             */
       26+    2388            %(LVL) NDSC   REDEF DESCL,    /* NUMERIC DESCRIPTOR */
       27+    2389            %(LVL+1) CN     UBIN  (3) UNAL, /* CHARACTER NUMBER   */
       28+    2390            %(LVL+1) TN     BIT   (1) UNAL, /* 0=9-BIT, 1=4-BIT   */
       29+    2391            %(LVL+1) S      BIT   (2) UNAL, /* SIGN: 11=NO-SIGN   */
       30+    2392            %(LVL+1) SF     SBIN  (6) UNAL, /* SCALE FACTOR       */
       31+    2393            %(LVL+1) N      UBIN  (6) UNAL  /* LENGTH             */
       32+    2394                                          %IF ENDING;
       33+    2395                                            ;
       34+    2396                                          %ELSE;
       35+    2397                                            ,
       36+    2398                                          %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:405  
       37+    2399
       38+    2400        %MEND;
       39+    2401        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:406  
       40+    2402        %MACRO PACK_NDSC ( @DESC    = ,
       41+    2403                           @SA      = 0 ,
       42+    2404                           @LENGTH  = ,
       43+    2405                           @TYPE    = %TYD,
       44+    2406                           @SIGN    = ,
       45+    2407                           @CN      = 0 ,
       46+    2408                           @TN      = %NDSC4 ,
       47+    2409                           @SCALE   = 0 );
       48+    2410
       49+    2411             %ERROR(TEXTCHAR(@DESC) = '','Missing DESC parameter',2);
       50+    2412             %ERROR(TEXTCHAR(@LENGTH) = '','Missing LENGTH parameter',2);
       51+    2413             %ERROR(TEXTCHAR(@SIGN) = '','Missing SIGN parameter', 2);
       52+    2414
       53+    2415             DO;
       54+    2416               @DESC.SA = @SA;
       55+    2417               @DESC.NDSC.CN = @CN;
       56+    2418               @DESC.NDSC.TN = @TN;
       57+    2419               @DESC.NDSC.S = @SIGN;
       58+    2420               @DESC.NDSC.SF = @SCALE;
       59+    2421
       60+    2422               DO CASE(BITBIN(@SIGN));
       61+    2423                 CASE(%(BITBIN(%NO_SIGN)));
       62+    2424                   @DESC.NDSC.N = @LENGTH;
       63+    2425
       64+    2426                 CASE(%(BITBIN(%TRAILING_SIGN)),%(BITBIN(%LEADING_SIGN)));
       65+    2427                   %IF TEXTCHAR(@TYPE) = 'TYO';
       66+    2428                     @DESC.NDSC.N = @LENGTH;
       67+    2429                   %ELSEIF TEXTCHAR(@TYPE) = 'TYD';
       68+    2430                     @DESC.NDSC.N = @LENGTH + 1;
       69+    2431                   %ELSEIF TEXTCHAR(@TYPE) = 'TYF' OR TEXTCHAR(@TYPE) = 'TYC';
       70+    2432                      IF @TN = %NDSC4 /* Overpunched */ THEN
       71+    2433                        @DESC.NDSC.N = @LENGTH;
       72+    2434                      ELSE
       73+    2435                        @DESC.NDSC.N = @LENGTH + 1;
       74+    2436                   %ELSE;
       75+    2437                     IF @TYPE = %TYO THEN
       76+    2438                       @DESC.NDSC.N = @LENGTH;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:407  
       77+    2439                     ELSE IF @TYPE = %TYD THEN
       78+    2440                       @DESC.NDSC.N = @LENGTH + 1;
       79+    2441                     ELSE IF @TN = %NDSC4 /* Overpunched */ THEN
       80+    2442                       @DESC.NDSC.N = @LENGTH;
       81+    2443                     ELSE
       82+    2444                       @DESC.NDSC.N = @LENGTH + 1;
       83+    2445                   %ENDIF;
       84+    2446
       85+    2447                 CASE(%(BITBIN(%FLOATING_POINT_LEADING_SIGN)));
       86+    2448                   %IF TEXTCHAR(@TN) ~= 'NDSC4';
       87+    2449                     %IF TEXTCHAR(@TN) ~= 'NDSC9';
       88+    2450                       IF @TN = %NDSC4 THEN
       89+    2451                         @DESC.NDSC.N = @LENGTH + 3;
       90+    2452                       ELSE
       91+    2453                         @DESC.NDSC.N = @LENGTH + 2;
       92+    2454                     %ELSE;
       93+    2455                       @DESC.NDSC.N = @LENGTH + 2;
       94+    2456                     %ENDIF;
       95+    2457                   %ELSE;
       96+    2458                     @DESC.NDSC.N = @LENGTH + 3;
       97+    2459                   %ENDIF;
       98+    2460
       99+    2461               END /* Case */;
      100+    2462             END;
      101+    2463
      102+    2464        %MEND;
      103+    2465        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:408  
        8+    2466
        9+    2467
       10+    2468        %EQU NO_SIGN_VALUE    = 0;
       11+    2469        %EQU PLUS_SIGN_VALUE  = 1;
       12+    2470        %EQU MINUS_SIGN_VALUE = 2;
       13+    2471
       14+    2472        %MACRO DCL_NUM_DESC (@STRN = NUM_DESC);
       15+    2473
       16+    2474           DCL 1 @STRN                ALIGNED,
       17+    2475                2 DIGITS_LEFT         SBIN WORD,
       18+    2476                2 DIGITS_RIGHT        SBIN WORD,
       19+    2477                2 DIGITS_EXPONENT     SBIN WORD,
       20+    2478                2 MANTISSA_SIGN_VALUE SBIN WORD,
       21+    2479                2 EXPONENT_SIGN_VALUE SBIN WORD,
       22+    2480                2 COMMA_PRESENT       BIT(1) ALIGNED;
       23+    2481
       24+    2482        %MEND;
       25+    2483
       26+    2484        %MACRO FISH(TRIAD=,RTN=);
       27+    2485
       28+    2486             DO;
       29+    2487               RTN = TRIAD;
       30+    2488
       31+    2489               DO WHILE(RTN -> ETT.ID < %FIRST_ST);
       32+    2490                 RTN = RTN -> ETT.LOP;
       33+    2491               END;
       34+    2492             END;
       35+    2493
       36+    2494        %MEND;
       37+    2495
       38+    2496        %MACRO FISH_TO_BASE (TRIAD=, RTN=) ;
       39+    2497
       40+    2498               DO ;
       41+    2499                 RTN = TRIAD ;
       42+    2500                 DO WHILE (RTN->ETT.ID ~= %BASE) ;
       43+    2501                   RTN = RTN -> ETT.LOP ;
       44+    2502                 END ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:409  
       45+    2503               END ;
       46+    2504
       47+    2505        %MEND ;
       48+    2506
       49+    2507        %MACRO FISH_TO_LTSS (ITEM = LTSS.DIMS$, LTS_ST$ = ST$, POINTER = LTS$) ;
       50+    2508
       51+    2509               DO ;
       52+    2510                 %ERROR (TRUE,
       53+    2511                   'You FOOL !!! There is a macro GET_LTS to do this for you!!',
       54+    2512                   4);
       55+    2513               END;
       56+    2514
       57+    2515        %MEND ;
       58+    2516        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:410  
       59+    2517
       60+    2518
       61+    2519        %MACRO REMOVE_FROM_DL_LIST (PTR=, ITEM=, HEAD=, NEXT=NEXT, LAST=LAST);
       62+    2520
       63+    2521             DO;
       64+    2522               IF PTR -> ITEM.NEXT = ADDR(NIL) THEN
       65+    2523                 DO;
       66+    2524                   IF PTR -> ITEM.LAST = ADDR(NIL) THEN
       67+    2525                     HEAD = ADDR(NIL);
       68+    2526                   ELSE
       69+    2527                     PTR -> ITEM.LAST -> ITEM.NEXT = ADDR(NIL);
       70+    2528                 END;
       71+    2529               ELSE
       72+    2530                 IF PTR = HEAD THEN
       73+    2531                   DO;
       74+    2532                     PTR -> ITEM.NEXT -> ITEM.LAST = ADDR(NIL);
       75+    2533                     HEAD = PTR -> ITEM.NEXT;
       76+    2534                   END;
       77+    2535                 ELSE
       78+    2536                   DO;
       79+    2537                     PTR -> ITEM.NEXT -> ITEM.LAST = PTR -> ITEM.LAST;
       80+    2538                     PTR -> ITEM.LAST -> ITEM.NEXT = PTR -> ITEM.NEXT;
       81+    2539                   END;
       82+    2540             END;
       83+    2541
       84+    2542        %MEND;
       85+    2543
       86+    2544
       87+    2545
       88+    2546        %MACRO REMOVE_FROM_SL_LIST (PTR=, ITEM=, HEAD=, PREV="ADDR(NIL)",
       89+    2547                                    NEXT = NEXT) ;
       90+    2548
       91+    2549             %IF TEXTCHAR(PREV) = 'ADDR(NIL)';
       92+    2550               DO;
       93+    2551                 PTR = HEAD;
       94+    2552                 HEAD = HEAD -> ITEM.NEXT;
       95+    2553               END;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:411  
       96+    2554             %ELSE;
       97+    2555               DO;
       98+    2556                 PTR = PREV -> ITEM.NEXT;
       99+    2557                 PREV -> ITEM.NEXT = PTR -> ITEM.NEXT;
      100+    2558               END;
      101+    2559             %ENDIF;
      102+    2560
      103+    2561        %MEND;
      104+    2562
      105+    2563
      106+    2564
      107+    2565        %MACRO INSERT_INTO_DL_LIST (PTR=, ITEM=, HEAD=, PREV="ADDR(NIL)",
      108+    2566                                    NEXT=NEXT, LAST=LAST) ;
      109+    2567
      110+    2568             %IF TEXTCHAR(PREV) = 'ADDR(NIL)';
      111+    2569               DO;
      112+    2570                 PTR -> ITEM.NEXT = HEAD;
      113+    2571                 PTR -> ITEM.LAST = ADDR(NIL);
      114+    2572                 IF HEAD ~= ADDR(NIL) THEN
      115+    2573                   HEAD -> ITEM.LAST = PTR;
      116+    2574                 HEAD = PTR;
      117+    2575               END;
      118+    2576             %ELSE;
      119+    2577               DO;
      120+    2578                 IF PREV = ADDR(NIL) THEN DO ;
      121+    2579                   PTR -> ITEM.NEXT = HEAD ;
      122+    2580                   PTR -> ITEM.LAST = ADDR(NIL) ;
      123+    2581                   IF HEAD ~= ADDR(NIL) THEN
      124+    2582                     HEAD -> ITEM.LAST = PTR ;
      125+    2583                   HEAD = PTR ;
      126+    2584                 END ;
      127+    2585                 ELSE DO ; /* PREV <> Nil */
      128+    2586                   PTR -> ITEM.NEXT = PREV -> ITEM.NEXT;
      129+    2587                   PTR -> ITEM.LAST = PREV;
      130+    2588                   IF PREV -> ITEM.NEXT ~= ADDR(NIL) THEN
      131+    2589                     PREV -> ITEM.NEXT -> ITEM.LAST = PTR;
      132+    2590                   PREV -> ITEM.NEXT = PTR;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:412  
      133+    2591                 END ;
      134+    2592               END;
      135+    2593             %ENDIF;
      136+    2594
      137+    2595        %MEND;
      138+    2596
      139+    2597
      140+    2598
      141+    2599        %MACRO INSERT_INTO_SL_LIST (PTR=, ITEM=, HEAD=, PREV="ADDR(NIL)",
      142+    2600                                    NEXT=NEXT) ;
      143+    2601
      144+    2602             %IF TEXTCHAR(PREV) = 'ADDR(NIL)';
      145+    2603               DO;
      146+    2604                 PTR -> ITEM.NEXT = HEAD;
      147+    2605                 HEAD = PTR;
      148+    2606               END;
      149+    2607             %ELSE;
      150+    2608               DO;
      151+    2609                 PTR -> ITEM.NEXT = PREV -> ITEM.NEXT;
      152+    2610                 PREV -> ITEM.NEXT = PTR;
      153+    2611               END;
      154+    2612             %ENDIF;
      155+    2613
      156+    2614        %MEND;
      157+    2615
      158+    2616
      159+    2617
      160+    2618        %MACRO BUILD_BINARY_DESC ( @DESC = , @LENGTH = );
      161+    2619
      162+    2620             %ERROR(TEXTCHAR(@DESC) = '', 'Missing DESC parameter', 2);
      163+    2621             %ERROR(TEXTCHAR(@LENGTH) = '', 'Missing LENGTH parameter', 2);
      164+    2622
      165+    2623             DO;
      166+    2624               @DESC = '0'O;
      167+    2625
      168+    2626               @DESC.NDSC.N = @LENGTH;
      169+    2627             END;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:413  
      170+    2628
      171+    2629        %MEND;
      172+    2630
      173+    2631
      174+    2632
      175+    2633        %MACRO UNPACK_NDSC ( @DESC      = ,
      176+    2634                             @TYPE      = %TYD,
      177+    2635                             @SA        = ,
      178+    2636                             @LENGTH    = ,
      179+    2637                             @CN        = ,
      180+    2638                             @TN        = ,
      181+    2639                             @SIGN      = ,
      182+    2640                             @SCALE     = );
      183+    2641
      184+    2642             %LSET OK1 = (TEXTCHAR(@DESC) ~= '');
      185+    2643
      186+    2644             %IF ~OK1;
      187+    2645               %ERROR(~OK1,'Missing DESC parameter',2);
      188+    2646             %ELSE;
      189+    2647               DO;
      190+    2648                 %IF (TEXTCHAR(@LENGTH) ~= '');
      191+    2649                   DO CASE(BITBIN(@DESC.NDSC.S));
      192+    2650                     CASE(%(BITBIN(%NO_SIGN)));
      193+    2651                       @LENGTH = @DESC.NDSC.N;
      194+    2652
      195+    2653                     CASE(%(BITBIN(%TRAILING_SIGN)),%(BITBIN(%LEADING_SIGN)));
      196+    2654                       %IF TEXTCHAR(@TYPE) = TEXTCHAR(%TYO);
      197+    2655                         @LENGTH = @DESC.NDSC.N;
      198+    2656                       %ELSEIF TEXTCHAR(@TYPE) = TEXTCHAR(%TYD);
      199+    2657                         @LENGTH = @DESC.NDSC.N - 1;
      200+    2658              %ELSEIF TEXTCHAR(@TYPE) = TEXTCHAR(%TYF) OR TEXTCHAR(@TYPE) = TEXTCHAR(%TYC);
      201+    2659                         IF @DESC.NDSC.TN = %NDSC4 /* Overpunched */ THEN
      202+    2660                           @LENGTH = @DESC.NDSC.N;
      203+    2661                         ELSE
      204+    2662                           @LENGTH = @DESC.NDSC.N - 1;
      205+    2663                       %ELSE;
      206+    2664                         IF @TYPE = %TYO THEN
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:414  
      207+    2665                           @LENGTH = @DESC.NDSC.N;
      208+    2666                         ELSE IF @TYPE = %TYD THEN
      209+    2667                           @LENGTH = @DESC.NDSC.N - 1;
      210+    2668                         ELSE IF @DESC.NDSC.TN = %NDSC4 /* Overpunched */ THEN
      211+    2669                           @LENGTH = @DESC.NDSC.N;
      212+    2670                         ELSE
      213+    2671                           @LENGTH = @DESC.NDSC.N - 1;
      214+    2672                       %ENDIF;
      215+    2673
      216+    2674                     CASE(%(BITBIN(%FLOATING_POINT_LEADING_SIGN)));
      217+    2675                       IF @DESC.NDSC.TN = %NDSC4 THEN
      218+    2676                         @LENGTH = @DESC.NDSC.N - 3;
      219+    2677                       ELSE
      220+    2678                         @LENGTH = @DESC.NDSC.N - 2;
      221+    2679
      222+    2680                   END /* Case */;
      223+    2681                 %ENDIF;
      224+    2682
      225+    2683                 %IF (TEXTCHAR(@SA) ~= '');
      226+    2684                   @SA = @DESC.SA;
      227+    2685                 %ENDIF;
      228+    2686
      229+    2687                 %IF (TEXTCHAR(@CN) ~= '');
      230+    2688                   @CN = @DESC.NDSC.CN;
      231+    2689                 %ENDIF;
      232+    2690
      233+    2691                 %IF (TEXTCHAR(@TN) ~= '');
      234+    2692                   @TN = @DESC.NDSC.TN;
      235+    2693                 %ENDIF;
      236+    2694
      237+    2695                 %IF (TEXTCHAR(@SCALE) ~= '');
      238+    2696                   @SCALE = @DESC.NDSC.SF;
      239+    2697                 %ENDIF;
      240+    2698
      241+    2699                 %IF (TEXTCHAR(@SIGN) ~= '');
      242+    2700                   @SIGN = @DESC.NDSC.S;
      243+    2701                 %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:415  
      244+    2702               END;
      245+    2703             %ENDIF;
      246+    2704
      247+    2705        %MEND;
      248+    2706
      249+    2707
      250+    2708
      251+    2709
      252+    2710        %MACRO UNPACK_ADSC ( @DESC      = ,
      253+    2711                             @SA        = ,
      254+    2712                             @LENGTH    = ,
      255+    2713                             @CN        = ,
      256+    2714                             @TA        = );
      257+    2715
      258+    2716             %LSET OK1 = (TEXTCHAR(@DESC) ~= '');
      259+    2717
      260+    2718             %IF ~OK1;
      261+    2719               %ERROR(~OK1,'Missing DESC parameter',2);
      262+    2720             %ELSE;
      263+    2721               DO;
      264+    2722                 %IF (TEXTCHAR(@SA) ~= '');
      265+    2723                   @SA = @DESC.SA;
      266+    2724                 %ENDIF;
      267+    2725
      268+    2726                 %IF (TEXTCHAR(@LENGTH) ~= '');
      269+    2727                   @LENGTH = @DESC.ADSC.N;
      270+    2728                 %ENDIF;
      271+    2729
      272+    2730                 %IF (TEXTCHAR(@CN) ~= '');
      273+    2731                   IF @DESC.ADSC.TA = %ADSC9
      274+    2732                     THEN @CN = @DESC.ADSC.CN;
      275+    2733                     ELSE @CN = @DESC.NDSC.CN;
      276+    2734                 %ENDIF;
      277+    2735
      278+    2736                 %IF (TEXTCHAR(@TA) ~= '');
      279+    2737                   @TA = @DESC.ADSC.TA;
      280+    2738                 %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:416  
      281+    2739               END;
      282+    2740             %ENDIF;
      283+    2741
      284+    2742        %MEND;
      285+    2743
      286+    2744
      287+    2745
      288+    2746        %MACRO PACK_ADSC ( @DESC    = ,
      289+    2747                           @SA      = 0 ,
      290+    2748                           @LENGTH  = ,
      291+    2749                           @CN      = 0 ,
      292+    2750                           @TA      = %ADSC9 );
      293+    2751
      294+    2752             %ERROR(TEXTCHAR(@DESC) = '','Missing DESC parameter',2);
      295+    2753             %ERROR(TEXTCHAR(@LENGTH) = '','Missing LENGTH parameter',2);
      296+    2754
      297+    2755             DO;
      298+    2756               @DESC.SA = @SA;
      299+    2757               %IF (TEXTCHAR(@TA)) = 'ADSC9';
      300+    2758               @DESC.ADSC.CN = @CN;
      301+    2759               @DESC.ADSC.MBZ1 = '0'B;
      302+    2760               %ELSEIF (TEXTCHAR(@TA)) = 'ADSC4' OR (TEXTCHAR(@TA)) = 'ADSC6';
      303+    2761               @DESC.NDSC.CN = @CN;
      304+    2762               %ELSE;
      305+    2763               IF @TA = %ADSC9 THEN
      306+    2764                 DO;
      307+    2765                   @DESC.ADSC.CN = @CN;
      308+    2766                   @DESC.ADSC.MBZ1 = '0'B;
      309+    2767                 END;
      310+    2768               ELSE
      311+    2769                 @DESC.NDSC.CN = @CN;
      312+    2770               %ENDIF;
      313+    2771               @DESC.ADSC.TA = @TA;
      314+    2772               @DESC.ADSC.MBZ2 = '0'B;
      315+    2773               @DESC.ADSC.N = @LENGTH;
      316+    2774             END;
      317+    2775
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:417  
      318+    2776        %MEND;
      319+    2777
      320+    2778
      321+    2779
      322+    2780        %MACRO GET_ADSC_LEN(ST$=,RTN=);
      323+    2781
      324+    2782             DO;
      325+    2783               IF ST$ -> SCALAR.B.LENGTH_4096 THEN
      326+    2784                 IF ST$ -> SCALAR.LTS$ -> LTS.ID = %LTSS THEN
      327+    2785                   RTN = ST$ -> SCALAR.LTS$ -> LTSS.LONG$ -> LONG.LENGTH;
      328+    2786                 ELSE
      329+    2787                   RTN = ST$ -> SCALAR.LTS$ -> LONG.LENGTH;
      330+    2788               ELSE
      331+    2789                 RTN = ST$ -> SCALAR.ADSC.N;
      332+    2790             END;
      333+    2791
      334+    2792        %MEND;
      335+    2793
      336+    2794
      337+    2795
      338+    2796        %MACRO GET_CN(@ST$=,@ST1$=,@RTN=);
      339+    2797
      340+    2798             DO;
      341+    2799               IF @ST1$ -> SCALAR.TYPE = %TYB OR
      342+    2800                  @ST1$ -> SCALAR.TYPE = %TYC OR
      343+    2801                    (@ST1$ -> SCALAR.TYPE = %TYD AND
      344+    2802                     @ST$ -> SCALAR.NDSC.TN = %NDSC4) THEN
      345+    2803                 @RTN = @ST$ -> SCALAR.NDSC.CN;
      346+    2804               ELSE
      347+    2805                 @RTN = @ST$ -> SCALAR.ADSC.CN;
      348+    2806             END;
      349+    2807
      350+    2808        %MEND;
      351+    2809
      352+    2810
      353+    2811
      354+    2812        %MACRO GET_CONSTANT_ADDRESS ( @CONSTANT=, @STRING= ) ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:418  
      355+    2813
      356+    2814             DO;
      357+    2815               IF @CONSTANT -> CONST.B.LONG_CONSTANT THEN
      358+    2816                 @STRING = ADDR(@CONSTANT -> CONST.CONST$.PTR$ -> LCNST.CONST);
      359+    2817               ELSE
      360+    2818                 @STRING = ADDR(@CONSTANT -> CONST.CONSTI);
      361+    2819             END;
      362+    2820
      363+    2821        %MEND;
      364+    2822
      365+    2823
      366+    2824        %MACRO REVERSE_RELATE_OP_CODE(OP_CODE=O1COM.RELATE_OP_CODE,
      367+    2825                                      @CLASS(NO='0'B,YES='1'B)="'0'B") ;
      368+    2826        /* @CLASS is yes only if there is a possibility that a class comparison
      369+    2827           might be reversed. */
      370+    2828               DO ;
      371+    2829
      372+    2830                 DO CASE(OP_CODE) ;
      373+    2831
      374+    2832                   CASE(%GO_LESS_THAN_ARITH) ;
      375+    2833                     OP_CODE = %GO_GREATER_THAN_OR_EQUAL_ARITH ;
      376+    2834
      377+    2835                   CASE(%GO_LESS_THAN_ALPHA) ;
      378+    2836                     OP_CODE = %GO_GREATER_THAN_OR_EQUAL_ALPHA ;
      379+    2837
      380+    2838                   CASE(%GO_GREATER_THAN_ARITH) ;
      381+    2839                     OP_CODE = %GO_LESS_THAN_OR_EQUAL_ARITH ;
      382+    2840
      383+    2841                   CASE(%GO_GREATER_THAN_ALPHA) ;
      384+    2842                     OP_CODE = %GO_LESS_THAN_OR_EQUAL_ALPHA ;
      385+    2843
      386+    2844                   CASE(%GO_LESS_THAN_OR_EQUAL_ARITH) ;
      387+    2845                     OP_CODE = %GO_GREATER_THAN_ARITH ;
      388+    2846
      389+    2847                   CASE(%GO_LESS_THAN_OR_EQUAL_ALPHA) ;
      390+    2848                     OP_CODE = %GO_GREATER_THAN_ALPHA ;
      391+    2849
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:419  
      392+    2850                   CASE(%GO_GREATER_THAN_OR_EQUAL_ARITH) ;
      393+    2851                     OP_CODE = %GO_LESS_THAN_ARITH ;
      394+    2852
      395+    2853                   CASE(%GO_GREATER_THAN_OR_EQUAL_ALPHA) ;
      396+    2854                     OP_CODE = %GO_LESS_THAN_ALPHA ;
      397+    2855
      398+    2856                   CASE(%GO_EQUAL) ;
      399+    2857                     OP_CODE = %GO_NOT_EQUAL ;
      400+    2858
      401+    2859                   CASE(%GO_NOT_EQUAL) ;
      402+    2860                     OP_CODE = %GO_EQUAL ;
      403+    2861
      404+    2862                   CASE(%GO_SWITCH_ON) ;
      405+    2863                     OP_CODE = %GO_SWITCH_OFF ;
      406+    2864
      407+    2865                   CASE(%GO_SWITCH_OFF) ;
      408+    2866                     OP_CODE = %GO_SWITCH_ON ;
      409+    2867
      410+    2868                   %IF @CLASS;
      411+    2869                   CASE(%GO_CLASS) ;
      412+    2870                     OP_CODE = %GO_NOT_CLASS ;
      413+    2871
      414+    2872                   CASE(%GO_NOT_CLASS) ;
      415+    2873                     OP_CODE = %GO_CLASS ;
      416+    2874
      417+    2875                   %ENDIF;
      418+    2876                 END ;
      419+    2877
      420+    2878               END ;
      421+    2879        %MEND ;
      422+    2880        %EJECT ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:420  
      423+    2881           %MACRO GET_LTS (@ID      = %DIMS,
      424+    2882                           @ST$     = ST$,
      425+    2883                           @RETURN$ = LTS$);
      426+    2884
      427+    2885               DO;
      428+    2886                 IF @ST$ -> VARIABLE.LTS$ ~= ADDR(NIL) AND
      429+    2887                    @ST$ -> VARIABLE.LTS$ -> LTS.ID = %LTSS THEN
      430+    2888                   DO;
      431+    2889                     %IF @ID = %DIMS;
      432+    2890                       @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.DIMS$;
      433+    2891                     %ELSEIF @ID = %NEL;
      434+    2892                         @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.NEL$;
      435+    2893                       %ELSEIF @ID = %LONG;
      436+    2894                           @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.LONG$;
      437+    2895                         %ELSEIF @ID = %KEY;
      438+    2896                             @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.KEY$;
      439+    2897                           %ELSEIF @ID = %DEPENDING_SIZE;
      440+    2898                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.DEPENDING_SIZE$;
      441+    2899                           %ELSEIF @ID = %FILE_LTS;
      442+    2900                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.FILE_LTS$;
      443+    2901                           %ELSEIF @ID = %REPORT_LTS;
      444+    2902                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
      445+    2903                           %ELSEIF @ID = %REPORT_01_LTS;
      446+    2904                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
      447+    2905                           %ELSEIF @ID = %REPORT_GRP_LTS;
      448+    2906                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
      449+    2907                           %ELSEIF @ID = %REPORT_ELEM_LTS;
      450+    2908                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.REPORT_ENTRY$;
      451+    2909                           %ELSEIF @ID = %DML_REC;
      452+    2910                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.DML_REC$;
      453+    2911                           %ELSEIF @ID = %CD_LTS;
      454+    2912                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.CD_LTS$;
      455+    2913                           %ELSEIF @ID = %BASE_LTS;
      456+    2914                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.BASE_LTS$;
      457+    2915                           %ELSEIF @ID = %INIT_LTS;
      458+    2916                               @RETURN$ = @ST$ -> VARIABLE.LTS$ -> LTSS.INIT_LTS$;
      459+    2917                     %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:421  
      460+    2918                   END;
      461+    2919                 ELSE
      462+    2920                   IF @ST$ -> VARIABLE.LTS$ ~= ADDR(NIL)
      463+    2921                       AND @ST$ -> VARIABLE.LTS$ -> LTS.ID = @ID THEN
      464+    2922                     @RETURN$ = @ST$ -> VARIABLE.LTS$;
      465+    2923                   ELSE
      466+    2924                     @RETURN$ = ADDR(NIL);
      467+    2925               END;
      468+    2926
      469+    2927           %MEND;
      470+    2928
      471+    2929
      472+    2930
      473+    2931           %MACRO UPDATE_PREV_QLT$ (@NEW_QLT$ = QLT$);
      474+    2932
      475+    2933             DO;
      476+    2934               IF COMCOM.PREV_QLT$ ~= ADDR(NIL) THEN
      477+    2935                 COMCOM.PREV_QLT$ -> QLT.BROTHER = @NEW_QLT$;
      478+    2936
      479+    2937               COMCOM.PREV_QLT$ = @NEW_QLT$;
      480+    2938             END;
      481+    2939
      482+    2940           %MEND;
      483+    2941
      484+    2942
      485+    2943
      486+    2944           %MACRO GET_TYPE_DESC_ADSC_LEN (@TYPE_DESC = , @LENGTH = );
      487+    2945
      488+    2946             DO;
      489+    2947               IF @TYPE_DESC.SIZ$ = ADDR(NIL) THEN
      490+    2948                 @LENGTH = @TYPE_DESC.DESC.ADSC.N;
      491+    2949               ELSE
      492+    2950                 @LENGTH = @TYPE_DESC.SIZ$ -> ETT.LOP -> CONST.CONSTI.WORD1;
      493+    2951             END;
      494+    2952
      495+    2953           %MEND;
      496+    2954
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:422  
      497+    2955
      490     2956        %INCLUDE Z8A_COMCOM ;
        1+    2957        /*T***********************************************************/
        2+    2958        /*T*                                                         */
        3+    2959        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    2960        /*T*                                                         */
        5+    2961        /*T***********************************************************/
        6+    2962        /* %INCLUDE COMCOM -- COMMON VARIABLES USED BY EVERYBODY */
        7+    2963
        8+    2964        %EQU PROC = 0;           /*/ .PROC. BLOCK /*/
        9+    2965        %EQU DATA = 1;           /*/ .DATA. BLOCK /*/
       10+    2966        %EQU LIT  = 2;           /*/ .LIT.  BLOCK /*/
       11+    2967        %EQU LINK = 3;           /*/ .LINK. BLOCK /*/
       12+    2968
       13+    2969        %EQU DEFAULT_FATAL_ERROR_LIMIT = 25;
       14+    2970
       15+    2971
       16+    2972    1   DCL 1 COMCOM         DALIGNED
       17+    2973                           %IF INITIALIZE;
       19+    2975                           %ELSE;
       20+    2976    1                        SYMREF
       21+    2977                           %ENDIF;
       22+    2978
       23+    2979    1        ,2 *                 BIT (1) ALIGNED
       24+    2980                              %IF INITIALIZE;
       26+    2982                              %ENDIF;
       27+    2983
       28+    2984    1        ,2 ALMOST_ONE PTR             /* TWO WORD FLOATING POINT CONST., ALMOST ONE */
       29+    2985
       30+    2986    1        ,2 MAX_ERROR   SBIN WORD           /* Will replace MAX_ERROR_GENERATED */
       31+    2987                              %IF INITIALIZE;
       33+    2989                              %ENDIF;
       34+    2990
       35+    2991    1        ,2 NO_OF_ERRORS SBIN WORD          /* Number of ERR items */
       36+    2992                              %IF INITIALIZE;
       38+    2994                              %ENDIF;
       39+    2995
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:423  
       40+    2996    1        ,2 ARGS1 PTR                       /* used for 1 argument call */
       41+    2997                              %IF INITIALIZE;
       43+    2999                              %ENDIF;
       44+    3000
       45+    3001    1        ,2 ARGS2 PTR                       /* used for 2 argument call */
       46+    3002                              %IF INITIALIZE;
       48+    3004                              %ENDIF;
       49+    3005
       50+    3006    1        ,2 ARGS3 PTR                       /* used for 3 argument call */
       51+    3007                              %IF INITIALIZE;
       53+    3009                              %ENDIF;
       54+    3010
       55+    3011    1        ,2 ESC PTR                         /* last 16k block allocated */
       56+    3012                              %IF INITIALIZE;
       58+    3014                              %ENDIF;
       59+    3015
       60+    3016    1        ,2 FIRST_ILS PTR                   /* First item in ILS table */
       61+    3017                              %IF INITIALIZE;
       63+    3019                              %ENDIF;
       64+    3020
       65+    3021    1        ,2 OPTION_BITS(0:71) BIT(1) ALIGNED  /* OPTIONS */
       66+    3022                              %IF INITIALIZE;
       68+    3024                              %ENDIF;
       69+    3025    1        ,2 OB          REDEF OPTION_BITS
       70+    3026    1          ,3 ALTNO       BIT (1) ALIGNED  /* LISTING OF COMDK OUTPUT  */
       71+    3027    1          ,3 BINARYWS    BIT (1) HALIGNED /* SET DEFAULT PICTURE TO BINARY */
       72+    3028    1          ,3 BINARYWS_FLAG BIT (1) HALIGNED /* APPLY BINARYWS ONLY TO CERTAIN 01'S */
       73+    3029    1          ,3 ASCIIPRT    BIT (1) ALIGNED  /* COMPILER P* TO ASCII PRINTER (GCOS) */
       74+    3030    1          ,3 OPTZ        BIT (1) ALIGNED  /* Do PERFORM optimizations */
       75+    3031    1          ,3 COBOL_74    BIT (1) ALIGNED  /* APPLY COBOL-74 SEMANTICS */
       76+    3032    1          ,3 COMDK       BIT (1) ALIGNED  /* "SO" ON CP-6             */
       77+    3033    1          ,3 LU          BIT (1) ALIGNED  /* List Update input file */
       78+    3034    1          ,3 SUBCHK      BIT (1) ALIGNED  /* SUBSCRIPT CHECKING       */
       79+    3035    1          ,3 INITIAL     BIT (1) ALIGNED  /* Initialize all WORKING-STORAGE */
       80+    3036    1          ,3 DECK        BIT (1) ALIGNED  /* USED TO BE C*            */
       81+    3037    1          ,3 DSE         BIT (1) ALIGNED  /* DSA FLAGGING (LEVEL-6)   */
       82+    3038    1          ,3 DSS         BIT (1) ALIGNED  /* DEBUG SUPPORT SCHEMA     */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:424  
       83+    3039    1          ,3 *           BIT (1) ALIGNED  /*                          */
       84+    3040    1          ,3 ELS        BIT (1) ALIGNED
              3040                   /* Object computer will execute ELS2 instructions (overpunched) */
       85+    3041                          /* ELS bit is set if machine is DPS88, DPS90, DPS8000, DPS9000 */
       86+    3042    1          ,3 HEX         BIT (1) ALIGNED  /* HEX EXPONENT             */
       87+    3043    1          ,3 HEX_SBIN    REDEF HEX SBIN WORD /* Used by phase 4 to ref. hex */
       88+    3044    1          ,3 FORMAT      BIT (1) ALIGNED  /* Free Format (or FMT)     */
       89+    3045    1          ,3 SSPROC      BIT (1) ALIGNED  /* IGNORE SEGMENTATION     */
       90+    3046    1          ,3 IBM         BIT (1) ALIGNED  /* IBM SEMANTICS & SYNTAX  */
       91+    3047    1          ,3 IDSLIST     BIT (1) ALIGNED  /* LIST SUB-SCHEMA         */
       92+    3048    1          ,3 INFO        BIT (1) ALIGNED  /* GIVE INFO DIAGNOSTICS   */
       93+    3049    1          ,3 INHIB       BIT (1) ALIGNED  /* INHIBIT TEST OPTIMIZATIONS */
       94+    3050    1          ,3 FIPS                ALIGNED  /* FIPS LEVEL CHECKS       */
       95+    3051    1             ,4 OBS      BIT (1)          /* OBSOLETE FEATURE FLAGGING */
       96+    3052    1             ,4 SEG1     BIT (1)          /* SEGMENTATION LOW LEVEL */
       97+    3053    1             ,4 SEG2     BIT (1)          /* SEGMENTATION HIGH LEVEL */
       98+    3054    1             ,4 RPW      BIT (1)          /* REPORT WRITER FLAGGING */
       99+    3055    1             ,4 *        BIT (14)
      100+    3056    1             ,4 LEVEL    SBIN HALF HALIGNED /* LOW, INT, HIGH OR ANSI */
      101+    3057    1          ,3 LNRSM       BIT (1) ALIGNED  /* LIST NON-REFERENCED SYMBOLS */
      102+    3058    1          ,3 LISTIN      BIT (1) ALIGNED  /* LIST SOURCE INPUT       */
      103+    3059    1          ,3 LISTOUT     ALIGNED          /* LIST OU INSTRUCTIONS    */
      104+    3060    1             ,4 CODE     BIT(1) UNAL
      105+    3061    1             ,4 DATA     BIT(1) UNAL
      106+    3062    1             ,4 *        BIT(34) UNAL
      107+    3063    1          ,3 MAP         BIT (1) ALIGNED  /* STORAGE MAP             */
      108+    3064    1          ,3 KANJI       BIT (1) ALIGNED  /* For Accept/Display      */
      109+    3065    1          ,3 CLIST      BIT (1) ALIGNED  /* MINI COPY/REPLACE LIST  */
      110+    3066    1          ,3 MAIN_PROG   BIT (1) ALIGNED  /* Program is main         */
      111+    3067    1          ,3 NRESET      BIT (1) ALIGNED  /* EXECUTE ANYWAY          */
      112+    3068    1          ,3 NWARN       BIT (1) ALIGNED  /* DON'T ISSUE WARNINGS    */
      113+    3069    1          ,3 SV3         REDEF NWARN BIT(1) ALIGNED
      114+    3070    1          ,3 TP8         BIT (1) ALIGNED  /* TP8 TPR                 */
      115+    3071    1          ,3 RESEQ       BIT (1) ALIGNED  /* RESEQUENCE COLS. 1-6    */
      116+    3072    1          ,3 STATS       BIT (1) ALIGNED  /* COMPILER STATISTICS     */
      117+    3073    1          ,3 TP          BIT (1) ALIGNED  /* THIS IS A TPR           */
      118+    3074    1          ,3 TSS         BIT (1) ALIGNED  /* EXECUTE UNDER TSS       */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:425  
      119+    3075    1          ,3 XREF        BIT (1) ALIGNED  /* SYMBOLIC CROSS REFERENCE*/
      120+    3076    1          ,3 O1DUMP      BIT (1) ALIGNED  /* PHASE 1 DUMP            */
      121+    3077    1          ,3 O2DUMP      BIT (1) ALIGNED  /* PHASE 2 DUMP            */
      122+    3078    1          ,3 O3DUMP      BIT (1) ALIGNED  /* PHASE 3 DUMP            */
      123+    3079    1          ,3 O4DUMP      BIT (1) ALIGNED  /* PHASE 4 DUMP            */
      124+    3080    1          ,3 SUB         BIT (1) ALIGNED  /* THIS IS A SUBROUTINE.   */
      125+    3081    1          ,3 NOCANCEL    BIT (1) ALIGNED  /* NO CANCELs executed     */
      126+    3082    1          ,3 PM          ALIGNED          /* Procedure Map (CP-6)    */
      127+    3083    1             ,4 FULL BIT(1) UNAL
      128+    3084    1             ,4 MINI BIT(1) UNAL
      129+    3085    1             ,4 *        BIT(34) UNAL
      130+    3086    1          ,3 DM          ALIGNED          /* Data Map (CP-6)         */
      131+    3087    1             ,4 STATIC_  BIT(1) UNAL
      132+    3088    1             ,4 AUTO_    BIT(1) UNAL
      133+    3089    1             ,4 SYMREF_  BIT(1) UNAL
      134+    3090    1             ,4 BASED_   BIT(1) UNAL
      135+    3091    1             ,4 *        BIT(32) UNAL
      136+    3092    1          ,3 MDM         ALIGNED          /* Mini Data Map (CP-6)    */
      137+    3093    1             ,4 STATIC_  BIT(1) UNAL
      138+    3094    1             ,4 AUTO_    BIT(1) UNAL
      139+    3095    1             ,4 SYMREF_  BIT(1) UNAL
      140+    3096    1             ,4 BASED_   BIT(1) UNAL
      141+    3097    1             ,4 *        BIT(32) UNAL
      142+    3098    1          ,3 NMESS       BIT (1) ALIGNED  /* Suppress all diagnostics */
      143+    3099    1          ,3 SV4         BIT (1) ALIGNED  /* Don't print sev 1-3     */
      144+    3100    1          ,3 SV5         BIT (1) ALIGNED  /* Don't print sev 1-4     */
      145+    3101    1          ,3 CHECK       BIT (1) ALIGNED  /* Bypass Phases 3 and 4   */
      146+    3102    1          ,3 SEQ         BIT (1) ALIGNED /* Sequence check line numbers (GCOS only) */
      147+    3103    1          ,3 MS_DATA     BIT (1) ALIGNED  /* Multiple Data Segments */
      148+    3104    1          ,3 ARRAY_PRESET BIT (1) ALIGNED /* Keep QLT for array preset */
      149+    3105    1          ,3 LEXEMES     BIT (1) ALIGNED  /* Dump LEXEME items       */
      150+    3106    1          ,3 WRN73       BIT (1) ALIGNED  /* Verify columns 73-80 blank (GCOS only) */
      151+    3107    1          ,3 CONTINUE    BIT (1) ALIGNED  /* Continue execution on IPR */
      152+    3108    1          ,3 LO          ALIGNED          /* UnGmap report (CP-6 only) */
      153+    3109    1             ,4 CODE     BIT(1) UNAL
      154+    3110    1             ,4 DATA     BIT(1) UNAL
      155+    3111    1             ,4 *        BIT(34) UNAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:426  
      156+    3112    1          ,3 SQLLIST REDEF LO BIT(1) ALIGNED /* List expanded SQL (GCOS only) */
      157+    3113    1          ,3 OBJ         BIT (1) ALIGNED  /* Dump OBJ table          */
      158+    3114    1          ,3 STARK       BIT (1) ALIGNED  /* Output updated source   */
      159+    3115    1          ,3 IT          BIT (1) ALIGNED  /* Interactive Tree        */
      160+    3116    1          ,3 KEEP_OM     BIT (1) ALIGNED  /* Keep old OM if fatal err (GCOS) */
      161+    3117    1          ,3 UI          BIT (1) ALIGNED  /* Updates Included        */
      162+    3118    1          ,3 ABDUMP      BIT (1) ALIGNED  /* Dump Tables on abort    */
      163+    3119    1          ,3 VIRTUAL     BIT (1) ALIGNED /* use CP-6 virtual space   */
      164+    3120    1          ,3 SQL REDEF VIRTUAL ALIGNED /* SQL-related bits (GCOS) */
      165+    3121    1            ,4 SQL       BIT (1) HALIGNED /* Invoke SQL preprocessor (GCOS) */
      166+    3122    1            ,4 SQLCODE   BIT (1) HALIGNED /* Use SQLCODE, not SQLCA (GCOS) */
      167+    3123    1          ,3 DPS88       BIT(1)  ALIGNED   /* Compile for DPS88 */
      168+    3124    1          ,3 COUNT               ALIGNED   /* COUNT option */
      169+    3125    1            ,4 COUNT     BIT(1)  HALIGNED
              3125                     /* Count entries into programs and paragraphs */
      170+    3126    1            ,4 RSCR_FLAG BIT(1)  HALIGNED  /* Use RSCR instruction for COUNT */
      171+    3127    1          ,3 OPTUI       BIT(1)  ALIGNED  /* Optional UI file (CP-6)  */
      172+    3128    1          ,3 DEBUG REDEF OPTUI BIT(1) ALIGNED /* DEBUG option (GCOS) */
      173+    3129    1          ,3 ACOMDK      BIT (1) ALIGNED  /* ASCII comdk (GCOS only) */
      174+    3130    1          ,3 PARAMETER_CHECK   BIT (1) ALIGNED
              3130                   /* Check COBOL85 parameters at runtime */
      175+    3131    1          ,3 LIBRARY_OPSEG      BIT (1) ALIGNED  /* GCOS ONLY         */
      176+    3132    1          ,3 N6UPD       BIT (1) ALIGNED  /* Do not update 6* file   */
      177+    3133    1          ,3 *           BIT (1) ALIGNED  /* FILLER                  */
      178+    3134
      179+    3135    1        ,2 D_ONE       PTR                 /* Decimal One          */
      180+    3136                              %IF INITIALIZE;
      182+    3138                              %ENDIF;
      183+    3139
      184+    3140    1        ,2 EIS           ALIGNED
      185+    3141    1          ,3 FILL        CHAR (1)  UNAL    /* EIS FILL CHARACTER      */
      186+    3142                              %IF INITIALIZE;
      188+    3144                              %ENDIF;
      189+    3145    1          ,3 *           UBIN (27) UNAL    /* Not available */
      190+    3146                              %IF INITIALIZE;
      192+    3148                              %ENDIF;
      193+    3149    1        ,2 FILL_SBIN   REDEF EIS SBIN WORD
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:427  
      194+    3150
      195+    3151    1        ,2 D_ZERO      PTR                 /* Decimal Zero */
      196+    3152                              %IF INITIALIZE;
      198+    3154                              %ENDIF;
      199+    3155
      200+    3156    1        ,2 ARGS0       PTR                 /* Used for a no argument call */
      201+    3157                              %IF INITIALIZE;
      203+    3159                              %ENDIF;
      204+    3160    1        ,2 VALUE_0     REDEF ARGS0 PTR     /* Used fo the value 0 */
      205+    3161    1        ,2 FALSE$      REDEF ARGS0 PTR     /* Used for constant comparisons */
      206+    3162
      207+    3163    1        ,2 VALUE_1     PTR                 /* Used for the value 1 */
      208+    3164                              %IF INITIALIZE;
      210+    3166                              %ENDIF;
      211+    3167    1        ,2 TRUE$       REDEF VALUE_1 PTR   /* Used for constant comparisons */
      212+    3168
      213+    3169    1        ,2 H_PFORM     PTR                 /* Ptr to top of PFORM linked list */
      214+    3170                              %IF INITIALIZE;
      216+    3172                              %ENDIF;
      217+    3173
      218+    3174    1        ,2 DO_REQ      BIT (1) ALIGNED     /* DO output required              */
      219+    3175
      220+    3176    1        ,2 *           BIT (1) ALIGNED
      221+    3177
      222+    3178    1        ,2 LINES
      223+    3179    1          ,3 SOURCE      SBIN WORD         /* # OF SOURCE LINES       */
      224+    3180                              %IF INITIALIZE;
      226+    3182                              %ENDIF;
      227+    3183
      228+    3184    1        ,2 CURRENT
      229+    3185    1          ,3 PHASE       UBIN WORD         /* CURRENT PHASE# (0->6)   */
      230+    3186    1          ,3 LINE        SBIN WORD         /* CURRENT LINE#           */
      231+    3187                              %IF INITIALIZE;
      233+    3189                              %ENDIF;
      234+    3190    1          ,3 COLUMN      SBIN WORD         /* CURRENT COLUMN #        */
      235+    3191                              %IF INITIALIZE;
      237+    3193                              %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:428  
      238+    3194
      239+    3195    1        ,2 ARGS4 PTR                       /* used for 4 argument call */
      240+    3196
      241+    3197    1        ,2 FIRST_PROC$   PTR               /* To the first PROC_ ST item */
      242+    3198                              %IF INITIALIZE;
      244+    3200                              %ENDIF;
      245+    3201
      246+    3202    1        ,2 COMPILE
      247+    3203    1            ,3 UTS       SBIN WORD         /* Time stamp for compile start */
      248+    3204    1            ,3 DATE      CHAR (8) UNAL     /* Date that compile started */
      249+    3205    1            ,3 TIME      CHAR (6) UNAL     /* Time that compile started */
      250+    3206    1            ,3 *         CHAR (2) UNAL     /* Filler for word alignment */
      251+    3207
      252+    3208    1        ,2 BLOCKC      SBIN WORD           /* No. of BLOCK items      */
      253+    3209                              %IF INITIALIZE;
      255+    3211                              %ENDIF;
      256+    3212
      257+    3213    1        ,2 BLOCK$      PTR                 /* BLOCK Head Link         */
      258+    3214                              %IF INITIALIZE;
      260+    3216                              %ENDIF;
      261+    3217
      262+    3218    1        ,2 OU_EXTERNAL_NAME$ PTR           /* program-id LEXEME */
      263+    3219                              %IF INITIALIZE;
      265+    3221                              %ENDIF;
      266+    3222
      267+    3223    1        ,2 PROC_END    SBIN WORD           /* loc of last gen instr   */
      268+    3224
      269+    3225    1        ,2 SEGMENT$(0:99) PTR              /* PTR TO PROC ITEMS */
      270+    3226                              %IF INITIALIZE;
      272+    3228                              %ENDIF;
      273+    3229
      274+    3230    1        ,2 SEGMENTC       SBIN WORD        /* NUMBER OF SEGMENTS */
      275+    3231                              %IF INITIALIZE;
      277+    3233                              %ENDIF;
      278+    3234
      279+    3235    1        ,2 SYMDEFC     SBIN WORD           /* Number of SYMDEFs       */
      280+    3236                              %IF INITIALIZE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:429  
      282+    3238                              %ENDIF;
      283+    3239
      284+    3240    1        ,2 SYMDEF$     PTR                 /* Head Link of SYMDEFs    */
      285+    3241                              %IF INITIALIZE;
      287+    3243                              %ENDIF;
      288+    3244
      289+    3245    1        ,2 MAX_ARGS    SBIN WORD           /* Maximum # of args passed */
      290+    3246                              %IF INITIALIZE;
      292+    3248                              %ENDIF;
      293+    3249
      294+    3250    1        ,2 MAX_PARAMS  SBIN WORD           /* Maximum #args received   */
      295+    3251                              %IF INITIALIZE;
      297+    3253                              %ENDIF;
      298+    3254
      299+    3255    1        ,2 H_LBL       PTR                 /* Head link of DEFLBs  */
      300+    3256                              %IF INITIALIZE;
      302+    3258                              %ENDIF;
      303+    3259
      304+    3260    1        ,2 PLUGS_USED  SBIN WORD           /* 0 = No Plugin Errors */
      305+    3261                              %IF INITIALIZE;
      307+    3263                              %ENDIF;
      308+    3264
      309+    3265    1        ,2 H_BASE      PTR                 /* Head link of BASE triads */
      310+    3266                              %IF INITIALIZE;
      312+    3268                              %ENDIF;
      313+    3269
      314+    3270    1        ,2 IL_SPACE    (0:5) SBIN WORD     /* #Words of IL */
      315+    3271                              %IF INITIALIZE;
      317+    3273                              %ENDIF;
      318+    3274
      319+    3275    1        ,2 H_DO        PTR                 /* Head link of DO entries */
      320+    3276                              %IF INITIALIZE;
      322+    3278                              %ENDIF;
      323+    3279
      324+    3280    1        ,2 H_BRANCH    PTR                 /* Head link of branch instructions */
      325+    3281                              %IF INITIALIZE;
      327+    3283                              %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:430  
      328+    3284
      329+    3285    1        ,2 LINE1       CHAR (80)           /* First line of COBOL85 invocation */
      330+    3286                                                                    /*#28761*/
      331+    3287    1        ,2 MAX_RECEIVING_ITEMS  SBIN WORD
      332+    3288                              %IF INITIALIZE;
      334+    3290                              %ENDIF;
      335+    3291                                                                    /*#28761*/
      336+    3292    1        ,2 INT_SUB$             PTR     /* Internal subroutine list.   */
      337+    3293                              %IF INITIALIZE;
      339+    3295                              %ENDIF;
      340+    3296
      341+    3297    1        ,2 SORT_MEM UBIN WORD          /* OPTION = SORT_MEM=nnn */
      342+    3298                              %IF INITIALIZE;
      344+    3300                              %ENDIF;
      345+    3301
      346+    3302    1        ,2 SR CHAR (4)                    /*  Software release (GCOS only) */
      347+    3303                              %IF INITIALIZE;
      349+    3305                              %ENDIF;
      350+    3306
      351+    3307    1        ,2 SQL_NOT_AVAILABLE   BIT(1) ALIGNED
              3307                 /* Set if any SQL token detected but customer does not have SQL */
      352+    3308                              %IF INITIALIZE;
      354+    3310                              %ENDIF;
      355+    3311
      356+    3312    1        ,2 TIMES(0:5) UBIN WORD            /* PHASE TIMINGS */
      357+    3313                              %IF INITIALIZE;
      359+    3315                              %ENDIF;
      360+    3316
      361+    3317    1        ,2 COMMON_REDEF UBIN WORD          /* Seq# of last CALL or PFORM */
      362+    3318                              %IF INITIALIZE;
      364+    3320                              %ENDIF;
      365+    3321
      366+    3322
      367+    3323    1        ,2 SEVERITY    UBIN WORD           /* Minimum error severity */
      368+    3324                              %IF INITIALIZE;
      370+    3326                              %ENDIF;
      371+    3327
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:431  
      372+    3328    1        ,2 LAST_BLOCK$    PTR             /* Block in which storage being allocated */
      373+    3329                              %IF INITIALIZE;
      375+    3331                              %ENDIF;
      376+    3332
      377+    3333    1        ,2 TREE_LINE CHAR (84)             /* Text from TREE option */
      378+    3334                              %IF INITIALIZE;
      380+    3336                              %ENDIF;
      381+    3337
      382+    3338    1        ,2 H_ENTRY$    PTR                 /* Ptr to last ENTRY ILS */
      383+    3339                              %IF INITIALIZE;
      385+    3341                              %ENDIF;
      386+    3342
      387+    3343    1        ,2 PREV_QLT$    PTR                /* Ptr to previous level 1 data item */
      388+    3344                              %IF INITIALIZE;
      390+    3346                              %ENDIF;
      391+    3347
      392+    3348    1        ,2 FREE$       PTR                 /* Head of FREE pages */
      393+    3349                              %IF INITIALIZE;
      395+    3351                              %ENDIF;
      396+    3352
      397+    3353    1        ,2 OPERATOR_SEGMENT$     PTR
      398+    3354                              %IF INITIALIZE;
      400+    3356                              %ENDIF;
      401+    3357
      402+    3358    1        ,2 MAX_TEMP_LENGTH    SBIN WORD    /* Max # of digits (precision) in temps */
      403+    3359                              %IF INITIALIZE;
      405+    3361                              %ENDIF;
      406+    3362
      407+    3363    1        ,2 CURRENCY_SIGN CHAR (1) ALIGNED
      408+    3364                              %IF INITIALIZE;
      410+    3366                              %ENDIF;
      411+    3367
      412+    3368    1        ,2 HIGH_VALUE    CHAR (1) ALIGNED
      413+    3369                              %IF INITIALIZE;
      415+    3371                              %ENDIF;
      416+    3372
      417+    3373    1        ,2 MAX_SEQ#      UBIN
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:432  
      418+    3374                              %IF INITIALIZE;
      420+    3376                              %ENDIF;
      421+    3377
      422+    3378    1        ,2 DATE_COMPILED_LINE SBIN WORD
      423+    3379                              %IF INITIALIZE;
      425+    3381                              %ENDIF;
      426+    3382
      427+    3383    1        ,2 FILE_LTS_CHAIN$ PTR             /* Ptr to linked list of FILE_LTSs */
      428+    3384                              %IF INITIALIZE;
      430+    3386                              %ENDIF;
      431+    3387    1        ,2 NO_OF_SEQ_RANGES UBIN           /* Incr. whenever ILS.SEQNO reset to 1 */
      432+    3388                              %IF INITIALIZE;
      434+    3390                              %ENDIF;
      435+    3391    1        ,2 SYMREF$       PTR              /* Head link of SYMREF chain */
      436+    3392                              %IF INITIALIZE;
      438+    3394                              %ENDIF;
      439+    3395
      440+    3396    1        ,2 SYMREFC       SBIN WORD         /* No. of SYMREF items */
      441+    3397                              %IF INITIALIZE;
      443+    3399                              %ENDIF;
      444+    3400
      445+    3401    1        ,2 FIRST_ENTRY_SEQ_NUM  SBIN WORD  /* Sequence Number */
      446+    3402                              %IF INITIALIZE;
      448+    3404                              %ENDIF;
      449+    3405
      450+    3406    1        ,2 NO_OF_GLOBAL_PRS     SBIN WORD  /* Set by Phase 3 for Ph4 */
      451+    3407                              %IF INITIALIZE;
      453+    3409                              %ENDIF;
      454+    3410    1        ,2 IN_DECLARATIVES       BIT(1) ALIGNED
      455+    3411                                        %IF INITIALIZE;
      457+    3413                                        %ENDIF;
      458+    3414    1        ,2 USE_BLOCK_ST$         PTR
      459+    3415                                        %IF INITIALIZE;
      461+    3417                                        %ENDIF;
      462+    3418    1        ,2 PROG_ID_DNT$          PTR /* GCOS only */
      463+    3419                                        %IF INITIALIZE;
      465+    3421                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:433  
      466+    3422    1        ,2 MAIN_ENCOUNTERED      BIT(1) ALIGNED
      467+    3423                                        %IF INITIALIZE;
      469+    3425                                        %ENDIF;
      470+    3426    1        ,2 BREAK                 BIT(1)
      471+    3427                                        %IF INITIALIZE;
      473+    3429                                        %ENDIF;
      474+    3430    1        ,2 BREAK_EXIT            BIT(1)
      475+    3431                                        %IF INITIALIZE;
      477+    3433                                        %ENDIF;
      478+    3434    1        ,2 WRAP                  BIT(1)
      479+    3435                                        %IF INITIALIZE;
      481+    3437                                        %ENDIF;
      482+    3438    1        ,2 WRAP_EXIT             BIT(1)
      483+    3439                                        %IF INITIALIZE;
      485+    3441                                        %ENDIF;
      486+    3442    1        ,2 *                     BIT (32)
      487+    3443                                        %IF INITIALIZE;
      489+    3445                                        %ENDIF;
      490+    3446    1        ,2 PRIVACY_LINE          UBIN
      491+    3447                                        %IF INITIALIZE;
      493+    3449                                        %ENDIF;
      494+    3450    1        ,2 PRIVACY_COL           SBIN
      495+    3451                                        %IF INITIALIZE;
      497+    3453                                        %ENDIF;
      498+    3454    1        ,2 BINARYWS$             PTR
      499+    3455                                        %IF INITIALIZE;
      501+    3457                                        %ENDIF;
      502+    3458    1        ,2 PLATFORM              BIT (1) ALIGNED /* Option such as DPS90 specified */
      503+    3459                                        %IF INITIALIZE;
      505+    3461                                        %ENDIF;
      506+    3462    1        ,2 ON_SIZE               BIT(1) ALIGNED
      507+    3463                                        %IF INITIALIZE;
      509+    3465                                        %ENDIF;
      510+    3466             %EQU SOURCE_FILE_NAME_LENGTH = 27;
      511+    3467    1        ,2 SOURCE_FILE_NAME CHAR(%SOURCE_FILE_NAME_LENGTH) ALIGNED
      512+    3468                                        %IF INITIALIZE;
      514+    3470                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:434  
      515+    3471    1        ,2 CANCEL_ID     BIT(1) ALIGNED   /* Set if program contains */
      516+    3472                                %IF INITIALIZE;    /* CANCEL IDENTIFIER */
      518+    3474                                %ENDIF;
      519+    3475
      520+    3476    1        ,2 X66_STATIC_0$ PTR               /* Entry operator          */
      521+    3477                              %IF INITIALIZE;
      523+    3479                              %ENDIF;
      524+    3480    1        ,2 X66_STATIC_1$ PTR               /* Entry operator           */
      525+    3481                              %IF INITIALIZE;
      527+    3483                              %ENDIF;
      528+    3484    1        ,2 X66_STATIC_2$ PTR               /* Entry operator           */
      529+    3485                              %IF INITIALIZE;
      531+    3487                              %ENDIF;
      532+    3488    1        ,2 X66_STATIC_3$ PTR               /* Entry operator           */
      533+    3489                              %IF INITIALIZE;
      535+    3491                              %ENDIF;
      536+    3492    1        ,2 X66_STATIC_N$ PTR               /* Entry operator           */
      537+    3493                              %IF INITIALIZE;
      539+    3495                              %ENDIF;
      540+    3496    1        ,2 COMMA_DECIMAL_PRESENT BIT(1) ALIGNED /* Set if program  */
      541+    3497                                %IF INITIALIZE;    /* has COMMA IS DECIMAL */
      543+    3499                                %ENDIF;
      544+    3500
      545+    3501    1        ,2 LOGICAL_BLOCK_CNT UBIN WORD    /* Set by PH4 for PH5      */
      546+    3502                                %IF INITIALIZE;
      548+    3504                                %ENDIF;        /* of records allowed      */
      549+    3505
      550+    3506    1        ,2 LIBCOM#COM$ PTR               /* Pts to BASE over LIBCOMCOM */
      551+    3507    1        ,2 ERRLIM         SBIN   /* The limit on FATAL errors */
      552+    3508                                 %IF INITIALIZE;
      554+    3510                                 %ENDIF;
      555+    3511    1        ,2 RD_RECOVERY_FILE$   PTR
      556+    3512                                      %IF INITIALIZE;
      558+    3514                                      %ENDIF;
      559+    3515
      560+    3516
      561+    3517    1        ,2 USE_PROC_CHAIN$   PTR         /* Ptr to LTS chain of USE PROC labels  */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:435  
      562+    3518                              %IF INITIALIZE;
      564+    3520                              %ENDIF;
      565+    3521
      566+    3522    1       ,2 IDS_SUB_SCHEMA     BIT(1) ALIGNED /* Set if program contains */
      567+    3523                                  %IF INITIALIZE; /*    DML Sub-Schema     */
      569+    3525                                  %ENDIF;
      570+    3526
      571+    3527    1        ,2 INSTALLATION$       PTR
      572+    3528                                      %IF INITIALIZE;
      574+    3530                                      %ENDIF;
      575+    3531
      576+    3532    1        ,2 E_L_WORD            PTR
      577+    3533                                      %IF INITIALIZE;
      579+    3535                                      %ENDIF;
      580+    3536
      581+    3537    1        ,2 SEG_LIMIT           SBIN WORD
      582+    3538                                      %IF INITIALIZE;
      584+    3540                                      %ENDIF;
      585+    3541
      586+    3542    1        ,2 SEG_SYMREF$         PTR
      587+    3543                                      %IF INITIALIZE;
      589+    3545                                      %ENDIF;
      590+    3546
      591+    3547
      592+    3548    1        ,2 FILE_POSITION    SBIN WORD
      593+    3549                                   %IF INITIALIZE;
      595+    3551                                   %ENDIF;
      596+    3552    1        ,2 AUTHOR$          PTR
      597+    3553                                   %IF INITIALIZE;
      599+    3555                                   %ENDIF;
      600+    3556    1        ,2 DATA_LIMIT_ERROR_FLAGGED BIT(1) ALIGNED
      601+    3557                                  %IF INITIALIZE;
      603+    3559                                  %ENDIF;
      604+    3560    1        ,2 VERSION
      605+    3561    1          ,3 LENGTH         SBIN WORD
      606+    3562                                   %IF INITIALIZE;
      608+    3564                                   %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:436  
      609+    3565    1          ,3 NAME           CHAR (10)
      610+    3566                                   %IF INITIALIZE;
      612+    3568                                   %ENDIF;
      613+    3569    1        ,2 VS_PTR$ (0:23)   PTR
      614+    3570                                   %IF INITIALIZE;
      616+    3572                                   %ENDIF;
      617+    3573    1        ,2 VS_FREE$         PTR     /* Free real space for F.S. I/O */
      618+    3574                                  %IF INITIALIZE;
      620+    3576                                  %ENDIF;
      621+    3577    1        ,2 VS_DCB#          SBIN WORD
      622+    3578                                  %IF INITIALIZE;
      624+    3580                                   %ENDIF;
      625+    3581
      626+    3582    1        ,2 ESC_LIST (0:3)      ALIGNED
      627+    3583    1         ,3 ESC$               PTR
      628+    3584                                      %IF INITIALIZE;
      630+    3586                                      %ENDIF;
      631+    3587    1         ,3 PR#                SBIN HALF HALIGNED
      632+    3588                                      %IF INITIALIZE;
      634+    3590                                      %ENDIF;
      635+    3591    1         ,3 OPTION             SBIN HALF HALIGNED
      636+    3592                                      %IF INITIALIZE;
      638+    3594                                      %ENDIF;
      639+    3595    1        ,2 AUTO$               PTR
      640+    3596                                     %IF INITIALIZE;
      642+    3598                                     %ENDIF;
      643+    3599    1        ,2 NULL_PTR$           PTR      /* to a Null ptr const ETT */
      644+    3600                                     %IF INITIALIZE;
      646+    3602                                     %ENDIF;
      647+    3603
      648+    3604    1        ,2 LAST        PTR ;               /* LAST WORD IN COMCOM     */
      649+    3605        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:437  
      491     3606        %INCLUDE Z8A_ERR_NUMS ;
        1+    3607        /*M* Z8A_ERR_NUMS */
        2+    3608        /*T***********************************************************/
        3+    3609        /*T*                                                         */
        4+    3610        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+    3611        /*T*                                                         */
        6+    3612        /*T***********************************************************/
        7+    3613
        8+    3614        /*P*
        9+    3615
       10+    3616                 NAME: Z8A_ERR_NUMS
       11+    3617              PURPOSE: List of all error numbers used throughout the compiler.
       12+    3618                       The Annotator uses these numbers to obtain the actual
       13+    3619                       error text from Z8I_ERR_TXT.
       14+    3620
       15+    3621        */
       16+    3622
       17+    3623
       18+    3624        /* WHEN ADDING ENTRIES TO THESE TABLES, MAKE SURE YOU UPDATE
       19+    3625           THE TEXT FOR THE MESSAGE IN ANN_ERROR_TEXT.
       20+    3626           ALSO, MAKE SURE THAT LAST_XXX_MSG_NO IS UPDATED TO THE
       21+    3627           LAST ENTRY IN EACH TABLE.
       22+    3628        */
       23+    3629
       24+    3630
       25+    3631
       26+    3632        /* -------------- */
       27+    3633        /* ERRORS 000-099 - Informational messages */
       28+    3634        /* -------------- */
       29+    3635        %EQU E$UNEXP_EOF_DURING_RECOVERY = 0;
       30+    3636        %EQU E$PARSING_RESUMED               = 1;
       31+    3637        %EQU E$CORRES_INFO                   = 2;
       32+    3638        %EQU E$RECURSIVE_PERFORM             = 3;
       33+    3639        %EQU E$POSSIBLE_TRUNCATION           = 4;
       34+    3640        %EQU E$POSSIBLE_LEFT_TRUNCATION      = 5;
       35+    3641        %EQU E$POSSIBLE_RIGHT_TRUNCATION     = 6;
       36+    3642        %EQU E$SIGN_TRUNCATION               = 7;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:438  
       37+    3643        %EQU E$INDEX_FILE_CODE               = 8;
       38+    3644        %EQU E$COPYBOOK_NOT_FOUND            = 9;
       39+    3645        %EQU E$NO_DATA_IN_COPYBOOK           = 10;
       40+    3646        %EQU E$DUPL_DEFIN_ERR                = 11;
       41+    3647        %EQU E$OPERANDS_OVERLAP              = 12;
       42+    3648        %EQU E$COMP2_TOO_LONG                = 13;
       43+    3649        %EQU E$LAST_000_MSG_NO               = 13;
       44+    3650
       45+    3651
       46+    3652
       47+    3653        /* -------------- */
       48+    3654        /* ERRORS 100-199 - Warning messages */
       49+    3655        /* -------------- */
       50+    3656        %EQU E$DEAD_CODE               = 100 ;
       51+    3657        %EQU E$NULL_PFORM_WARNING      = 101 ;
       52+    3658        %EQU E$ILLEGAL_OPTION          = 102 ;
       53+    3659        %EQU E$REDEF_SIZE_WARN         = 103 ;
       54+    3660        %EQU E$USELESS_IF              = 104 ;
       55+    3661        %EQU E$RW_USED_AS_DATA_NAME    = 105 ;
       56+    3662        %EQU E$USERWORD_TOO_LONG       = 106 ;
       57+    3663        %EQU E$MUST_BE_DISK            = 107 ;
       58+    3664        %EQU E$RENAMES_DIGIT_BOUND_WARN= 108 ;
       59+    3665        %EQU E$MISSING_DELIMITER       = 109 ;
       60+    3666        %EQU E$INTERNAL_CALL_ALTRET    = 110;
       61+    3667        %EQU E$ERR_COMMENT_ENTRY_CONTINUE = 111;
       62+    3668        %EQU E$OCCURS_ORDERING_ERROR   = 112;
       63+    3669        %EQU E$CONVERT_COMP1_TO_COMP2  = 113;
       64+    3670        %EQU E$NO_CORRES_FIELDS        = 114;
       65+    3671        %EQU E$NO_INITIALIZE_VALUES    = 115;
       66+    3672        %EQU E$EVAL_WHEN_NEVER_SELECTED = 116;
       67+    3673        %EQU E$FILE_ORG_NOT_SUPPORTED  = 117;
       68+    3674        %EQU E$FEATURE_NOT_SUPPORTED   = 118;
       69+    3675        %EQU E$NO_ASSIGN_CLAUSE        = 119;
       70+    3676        %EQU E$EXTEND_WITH_LINAGE      = 120;
       71+    3677        %EQU E$EXTEND_MULTI_FILE_TAPE  = 121;
       72+    3678        %EQU E$EXTEND_MUST_BE_SEQ      = 122;
       73+    3679        %EQU E$CANT_EXIT               = 123;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:439  
       74+    3680        %EQU E$AREA_A_ERROR            = 124;
       75+    3681        %EQU E$VALUE_OVERFLOW          = 125;
       76+    3682        %EQU E$TRUNCATION_WARN         = 126;
       77+    3683        %EQU E$ASSIGN_ADV_POS          = 127;
       78+    3684        %EQU E$ASSIGN_OPEN_INPUT       = 128;
       79+    3685        %EQU E$ASSIGN_OPEN_OUTPUT      = 129;
       80+    3686        %EQU E$ASSIGN_OPEN_IO          = 130;
       81+    3687        %EQU E$ASSIGN_OPEN_EXTEND      = 131;
       82+    3688        %EQU E$MUST_BE_IN_AREA_A       = 132;
       83+    3689        %EQU E$RECORD_CONTAINS_WARN    = 133;
       84+    3690        %EQU E$COMPUTER_NOT_KNOWN      = 134;
       85+    3691        %EQU E$DUPLICATE_ON_PHRASE     = 135;
       86+    3692        %EQU E$PRIVACY_KEY_TO_LONG     = 136;
       87+    3693        %EQU E$USAGE_NOT_DISPLAY       = 137;
       88+    3694        %EQU E$POINTER_EQUALITY_ERROR  = 138;
       89+    3695        %EQU E$SET_PRIVACY             = 139;
       90+    3696        %EQU E$ITEM_PRIVACY            = 140;
       91+    3697        %EQU E$LINE_LENGTH_GT_80       = 141;
       92+    3698        %EQU E$NOT_DISPLAY_SEPARATE_SIGN = 142;
       93+    3699        %EQU E$CLAUSE_INVALID_IN_SORT  = 143;
       94+    3700        %EQU E$NOT_IN_USING_LIST       = 144;
       95+    3701        %EQU E$SYNC_NOT_ELEMENTARY     = 145;
       96+    3702        %EQU E$VALUE_NOT_VALID_IN_CONTEXT = 146;
       97+    3703        %EQU E$REPORT_DISK_ERROR       = 147;
       98+    3704        %EQU E$SIGN_CLAUSE_NOT_NUMERIC = 148;
       99+    3705        %EQU E$SEQ_ERROR               = 149;
      100+    3706        %EQU E$WRN73                   = 150;
      101+    3707        %EQU E$IMPROPER_HOST_VARIABLE  = 151;
      102+    3708        %EQU E$CANNOT_CONNECT_TO_IRDS  = 152;
      103+    3709        %EQU E$CANNOT_CONTINUE_IN_IRDS = 153;
      104+    3710        %EQU E$DEPENDING_REQUIRES_RANGE= 154;
      105+    3711        %EQU E$DUPLICATE_RERUN         = 155;
      106+    3712        %EQU E$DML_PRECALC_GCOS_ONLY   = 156;
      107+    3713        %EQU E$AT_END_OR_INVALID_REQ   = 157;
      108+    3714        %EQU E$MISSING_MINREC_ON_VLR   = 158;
      109+    3715        %EQU E$CONVERT_COMP6_TO_11_12  = 159;
      110+    3716
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:440  
      111+    3717        %EQU E$DUPLICATE_INSERT        = 160;
      112+    3718        %EQU E$INSERT_OVERLAPS_DELETE  = 161;
      113+    3719        %EQU E$SHOULD_BE_INTEGER       = 162;
      114+    3720        %EQU E$GROUP_MOVE              = 163;
      115+    3721        %EQU E$EXAMINE_NOT_1_BYTE      = 164;
      116+    3722        %EQU E$FLR_ILLEGAL             = 165;
      117+    3723        %EQU E$IBM_INITIAL_ILLEGAL     = 166;
      118+    3724        %EQU E$LAST_100_MSG_NO         = 166;
      119+    3725
      120+    3726
      121+    3727
      122+    3728        /* -------------- */
      123+    3729        /* ERRORS 200-299 - Level check messages */
      124+    3730        /* -------------- */
      125+    3731
      126+    3732        /* FIRST ANSI */
      127+    3733
      128+    3734        %EQU FIRST_ANSI                = 200;
      129+    3735        %EQU E$ANSI_LARGE_NUMERIC_ITEM = 200;
      130+    3736        %EQU E$USERWORD_ANSI_ERROR     = 201;
      131+    3737        %EQU E$ANSI_FLOATING_POINT     = 202;
      132+    3738        %EQU E$ANSI_MAX_PIC_DIGITS     = 203;
      133+    3739        %EQU E$REDEF_SUB_VAR_OCCUR     = 204;
      134+    3740        %EQU E$COMP_AND_DISPLAY_IN_ANSI= 205;
      135+    3741        %EQU E$ALPHABET_VALUE_GTR_128  = 206;
      136+    3742        %EQU E$IDEN_PGPH_SEQ_ERR       = 207;
      137+    3743        %EQU E$VALUE_IN_CONTEXT_NOT_ANSI = 208;
      138+    3744        %EQU E$SET_NOT_ANSI            = 209;
      139+    3745        %EQU E$SUBSCRIPT_EXPECTED_ANSI = 210;
      140+    3746        %EQU E$LEVEL_CHECK             = 211;
      141+    3747        %EQU E$OBSOLETE                = 212;
      142+    3748        %EQU E$NON_ANSI_FILE_ORG       = 213;
      143+    3749        %EQU E$NON_ANSI_FILE_ATTR      = 214;
      144+    3750        %EQU E$ALPHABET_OMITTED_ANSI   = 215;
      145+    3751        %EQU E$NON_ANSI_STATEMENT      = 216;
      146+    3752        %EQU E$BLOCK_NON_ANSI          = 217;
      147+    3753        %EQU E$ANSI_LEVEL_SEQ_ERROR    = 218;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:441  
      148+    3754        %EQU E$REDEF_OBJ_VAR_OCCUR     = 219;
      149+    3755        %EQU E$NON_ANSI_ORDINAL        = 220;
      150+    3756        %EQU E$9_NOT_LEGAL_AFTER_DEC_PT= 221;
      151+    3757        %EQU E$CONT_COL_8_11_ERROR     = 222;
      152+    3758        %EQU E$LAST_200_MSG_NO         = 222;
      153+    3759
      154+    3760
      155+    3761        /* -------------- */
      156+    3762        /* ERRORS 300-399 - Fatal error messages */
      157+    3763        /* -------------- */
      158+    3764        /* FIRST FATAL */
      159+    3765
      160+    3766        %EQU FIRST_FATAL               = 300;
      161+    3767
      162+    3768        %EQU E$DUPLICATE_CURSOR_NAME  = 300 ;
      163+    3769        %EQU E$CURSOR_NOT_DEFINED     = 301;
      164+    3770        %EQU E$ITEM_NOT_CURSOR        = 302;
      165+    3771        %EQU E$INVALID_CURSOR_NAME    = 303 ;
      166+    3772        %EQU E$HOST_NOT_DEFINED       = 304 ;
      167+    3773        %EQU E$ILLEGAL_PIC_STRING     = 305 ;
      168+    3774        %EQU E$MISSING_SIGN_CLAUSE    = 306 ;
      169+    3775        %EQU E$ILLEGAL_LEVEL_NUMBER   = 307 ;
      170+    3776        %EQU E$SQL_NOT_AVAILABLE      = 308 ;
      171+    3777        %EQU E$USE_SQL_OPTION         = 309 ;
      172+    3778        %EQU E$SQL_HEX                = 310 ;
      173+    3779        %EQU E$DUPLICATED_INCLUDE_SQLCA = 311;
      174+    3780        %EQU E$INCLUDE_SQLCA_NOT_EXIST = 312;
      175+    3781        %EQU E$INTERNAL_BUFFER_OVERFLOW = 313;
      176+    3782        %EQU E$USING_WITH_DYNAMIC_SQL_ONLY = 314;
      177+    3783        %EQU E$WRONG_ARG_NUM            = 315;
      178+    3784        %EQU E$INCORRECT_FUNCTION_NAME  = 316;
      179+    3785        %EQU E$INVALID_TYPE             = 317;
      180+    3786        %EQU E$WRONG_ORDER              = 318;
      181+    3787        %EQU E$REPORT_CODE_DEVICE_ERR   = 319;
      182+    3788        %EQU E$ILLEGAL_KEY_TYPE         = 320;
      183+    3789        %EQU E$INCOMPATIBLE_ATTRIB      = 321;
      184+    3790        %EQU E$ILLEGAL_TYPE_31_32_RECORD = 322;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:442  
      185+    3791        %EQU E$LITERAL_ILLEGAL_HERE     = 323;
      186+    3792        %EQU E$REPLACING_WHAT           = 324;
      187+    3793        %EQU E$NOT_IN_REALM             = 325;
      188+    3794        %EQU E$DB_REG_EQUALITY_ERROR    = 326;
      189+    3795        %EQU E$LAST_300_MSG_NO         = 326;
      190+    3796
      191+    3797
      192+    3798        /* -------------- */
      193+    3799        /* ERRORS 400-499 - Fatal error messages (cont) */
      194+    3800        /* -------------- */
      195+    3801        %EQU E$UNDER_SCORE_ILLEGAL     = 400;
      196+    3802        %EQU E$PARSE_ERROR             = 401;
      197+    3803        %EQU E$SUBSCRIPT_OUT_OF_BOUNDS = 402 ;
      198+    3804        %EQU E$SUB_SCHEMA_NOT_RANDOM   = 403;
      199+    3805        %EQU E$KEY_TOO_LONG            = 404;
      200+    3806        %EQU E$NO_LABEL                = 405 ;
      201+    3807        %EQU E$NO_LABEL_DATA           = 406 ;
      202+    3808        %EQU E$DUP_LABEL               = 407 ;
      203+    3809        %EQU E$SORT_FILE_SAME_AREA     = 408 ;
      204+    3810        %EQU E$REDEFINES_OVERFLOW      = 409 ;
      205+    3811        %EQU E$LABEL_DATA_USAGE        = 410 ;
      206+    3812        %EQU E$PARA_DATA_USAGE         = 411 ;
      207+    3813        %EQU E$SECTION_DATA_USAGE      = 412 ;
      208+    3814        %EQU E$SECTION_PARA_USAGE      = 413 ;
      209+    3815        %EQU E$NO_LABEL_IN_SECTION     = 414 ;
      210+    3816        %EQU E$SYNTAX_INS              = 415 ;
      211+    3817        %EQU E$SYNTAX_DEL              = 416 ;
      212+    3818        %EQU E$SYNTAX_REP              = 417 ;
      213+    3819        %EQU E$INVALID_LEVEL_NUMBER    = 418 ;
      214+    3820        %EQU E$EXTRA_END_PROGRAM      = 419;
      215+    3821        %EQU E$END_PROGRAM_INSERTED   = 420;
      216+    3822        %EQU E$WRONG_END_PROGRAM = 421;
      217+    3823        %EQU E$AMBIGUOUS_REFERENCE     = 422 ;
      218+    3824        %EQU E$UNDECLARED_DATA_NAME    = 423 ;
      219+    3825        %EQU E$NOT_IMPLEMENTED       = 424 ;
      220+    3826        %EQU E$ITEM_IN_MULTIPLE_BLOCKS = 425;
      221+    3827        %EQU E$MISSING_DATA_PIC_CLAUSE = 426 ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:443  
      222+    3828        %EQU E$INVALID_DISPLAY_CONST   = 427 ;
      223+    3829        %EQU E$INSPECT_ID3_N_NE_ID5_N  = 428 ;
      224+    3830        %EQU E$INSPECT_NOT_1_BYTE      = 429 ;
      225+    3831        %EQU E$INSPECT_ID6_N_NE_ID7_N  = 430 ;
      226+    3832        %EQU E$INSPECT_LIT4_SAME_CHAR  = 431 ;
      227+    3833        %EQU E$LEVEL_MUST_BE_01_OR_77  = 432;
      228+    3834        %EQU E$NULL_QUOTE_STRING       = 433 ;
      229+    3835        %EQU E$CONFLICT_USAGE_CLAUSES  = 434 ;
      230+    3836        %EQU E$NO_PIC_USAGE_OR_GROUP   = 435 ;
      231+    3837        %EQU E$CONSOLE_ADV_ERROR       = 436 ;
      232+    3838        %EQU E$RENAMES_VAR_OCCR_ERR    = 437 ;
      233+    3839        %EQU E$WRONG_BLOCK_ORDER       = 438 ;
      234+    3840        %EQU E$EXTERNAL_AND_BLOCK      = 439 ;
      235+    3841        %EQU E$TOO_LARGE_NUM_EXP       = 440 ;
      236+    3842        %EQU E$FILE_NOT_DEFINED        = 441 ;
      237+    3843        %EQU E$MOVE_NON_INT_TO_TYA     = 442 ;
      238+    3844        %EQU E$MOVE_NUM_TO_ALPHABETIC  = 443 ;
      239+    3845        %EQU E$NO_LETTER_USERWORD      = 444 ;
      240+    3846        %EQU E$USERWORD_END_DASH_ERROR = 445 ;
      241+    3847        %EQU E$ONLY_IN_REP_CNT         = 446 ;
      242+    3848        %EQU E$INVALID_CHARACTER       = 447 ;
      243+    3849        %EQU E$END_UNEXPECTED          = 448 ;
      244+    3850        %EQU E$ZERO_LENGTH_PICTURE     = 449 ;
      245+    3851        %EQU E$PIC_LENGTH_MAX          = 450 ;
      246+    3852        %EQU E$CHAR_ILLEGAL_IN_REP_CNT = 451 ;
      247+    3853        %EQU E$ZERO_REP_COUNT_LENGTH   = 452 ;
      248+    3854        %EQU E$REP_CNT_GTR_ZERO        = 453 ;
      249+    3855        %EQU E$CR_DB_AT_END_ONLY       = 454 ;
      250+    3856        %EQU E$BEGINNING_CR_DB_ILL     = 455 ;
      251+    3857        %EQU E$E_NOT_IN_VALID_CONTEXT  = 456 ;
      252+    3858        %EQU E$CHAR_ONLY_APPEAR_ONCE   = 457 ;
      253+    3859        %EQU E$V_AND_DOT_IN_SAME_PIC   = 458 ;
      254+    3860        %EQU E$REFMOD_OUT_OF_BOUNDS    = 459 ;
      255+    3861        %EQU E$ONLY_ONE_SIGN_PER_PIC   = 460 ;
      256+    3862        %EQU E$ONLY_ONE_SUPPRESS_TYPE  = 461 ;
      257+    3863        %EQU E$P_AND_DOT_IN_SAME_PIC   = 462 ;
      258+    3864        %EQU E$DOT_AND_P_IN_SAME_PIC   = 463 ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:444  
      259+    3865        %EQU E$INVALID_CHAR_IN_EXRAD   = 464 ;
      260+    3866        %EQU E$EXRAD_MUST_BE_LAST      = 465 ;
      261+    3867        %EQU E$CHAR_IN_WRONG_CONTEXT   = 466 ;
      262+    3868        %EQU E$ILL_CHAR_FOR_ANE_PIC    = 467 ;
      263+    3869        %EQU E$ILL_CHAR_FOR_N_PIC      = 468 ;
      264+    3870        %EQU E$ILL_CHAR_FOR_NE_PIC     = 469 ;
      265+    3871        %EQU E$CHAR_ONLY_FOR_NE_PIC    = 470 ;
      266+    3872        %EQU E$CHAR_ONLY_FOR_AN_ANE_PIC= 471 ;
      267+    3873        %EQU E$CHAR_ONLY_FOR_ALPHA     = 472 ;
      268+    3874        %EQU E$CHAR_ONLY_FOR_N_PIC     = 473 ;
      269+    3875        %EQU E$CHAR_ONLY_FOR_N_NE_PIC  = 474 ;
      270+    3876        %EQU E$LDG_SIGN_MUST_BE_FIRST  = 475 ;
      271+    3877        %EQU E$LDG_S_MUST_BE_FIRST     = 476 ;
      272+    3878        %EQU E$V_ILL_AFTER_LDG_P       = 477 ;
      273+    3879        %EQU E$TRL_P_ILL_AFTER_V       = 478 ;
      274+    3880        %EQU E$CHAR_ILL_AFTER_P        = 479 ;
      275+    3881        %EQU E$PLUS_EXPECTED_AFTER_E   = 480 ;
      276+    3882        %EQU E$SIGN_EXPECTED_AFTER_E   = 481 ;
      277+    3883        %EQU E$SUPRESS_NOT_LEGAL_HERE  = 482 ;
      278+    3884        %EQU E$TOO_MANY_LITERALS       = 483 ;
      279+    3885        %EQU E$TRL_S_MUST_BE_LAST      = 484 ;
      280+    3886        %EQU E$TRL_PLUS_OR_MINUS_LAST  = 485 ;
      281+    3887        %EQU E$PIC_NEEDS_NO_SOURCE     = 486 ;
      282+    3888        %EQU E$FATAL_SYSTEM_ERR        = 487;
      283+    3889        %EQU E$ALTER_SECTION_ERROR     = 488 ;
      284+    3890        %EQU E$ALTER_PARA_ERROR        = 489 ;
      285+    3891        %EQU E$BAD_ORDINAL_CHARACTER   = 490 ;
      286+    3892        %EQU E$TYPE_4_FIND_ILLEGAL     = 491 ;
      287+    3893        %EQU E$SAME_GLOBAL_NAMES       = 492;
      288+    3894        %EQU E$OCCURS_IN_REDEF         = 493 ;
      289+    3895        %EQU E$NON_MATCH_REDEF_LEVEL   = 494 ;
      290+    3896        %EQU E$NON_ADJACENT_REDEF      = 495 ;
      291+    3897        %EQU E$INVALID_TO_SUBSCRIPT    = 496;
      292+    3898        %EQU E$DATA_NAME_QUAL_ERROR    = 497 ;
      293+    3899        %EQU E$ILLEGAL_CHARS_IN_VALUE  = 498 ;
      294+    3900        %EQU E$VALUE_AND_REDEFINES     = 499 ;
      295+    3901
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:445  
      296+    3902        %EQU E$LAST_400_MSG_NO         = 499 ;
      297+    3903
      298+    3904
      299+    3905
      300+    3906        /* -------------- */
      301+    3907        /* ERRORS 500-599 - Fatal error messages (cont) */
      302+    3908        /* -------------- */
      303+    3909        %EQU E$VALUE_AND_OCCURS        = 500;
      304+    3910        %EQU E$CANNOT_REDEFINE         = 501;
      305+    3911        %EQU E$USING_VARS_ONLY_ONCE    = 502;
      306+    3912        %EQU E$MUST_BE_IN_LINKAGE      = 503;
      307+    3913        %EQU E$MOVE_ALPHA_TYAE_TO_NUM  = 504;
      308+    3914        %EQU E$NON_INTEGER_ERROR       = 505 ;
      309+    3915        %EQU E$QUOTED_STRING_EXPECTED  = 506;
      310+    3916        %EQU E$ONLY_66_IN_RENAMES      = 507;
      311+    3917        %EQU E$ILL_START_LEVEL_RENAMES = 508;
      312+    3918        %EQU E$ILL_END_LEVEL_RENAMES   = 509;
      313+    3919        %EQU E$END_RENAMES_FOUND_FIRST = 510;
      314+    3920        %EQU E$RENAME_MUST_FOLLOW_01   = 511;
      315+    3921        %EQU E$OCCURS_IN_RENAMES       = 512;
      316+    3922        %EQU E$RENAME_START_CONTAIN_END= 513;
      317+    3923        %EQU E$INCONSISTENT_ARGS       = 514;
      318+    3924        %EQU E$NUMERIC_ITEM_TOO_LONG   = 515;
      319+    3925        %EQU E$MULTIPLE_VALUE_IS       = 516;
      320+    3926        %EQU E$TWO_PROCS_SAME_NAME     = 517;
      321+    3927        %EQU E$ONLY_1_66_77_88         = 518;
      322+    3928        %EQU E$ENTRY_ON_MAIN_PROG      = 519;
      323+    3929        %EQU E$CLAUSE_MUST_IN_INTL_PROC= 520;
      324+    3930        %EQU E$MULTIPLE_SECTIONS       = 521;
      325+    3931        %EQU E$LEVEL_77_TO_01          = 522;
      326+    3932        %EQU E$DEPEND_ATTR_NOT_MATCH_OCCURS = 523;
      327+    3933        %EQU E$DEPENDING_MISSING       = 524;
      328+    3934        %EQU E$EXTERNAL_SAME_AREA      = 525;
      329+    3935        %EQU E$SAME_EXTERNAL_NAMES     = 526;
      330+    3936        %EQU E$NO_VALUE_FOR_EXTERNAL   = 527;
      331+    3937        %EQU E$MISPOSITION_OF_88      = 528;
      332+    3938        %EQU E$NO_VALUE_FOR_INDEX      = 529;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:446  
      333+    3939        %EQU E$ONLY_UNSIGNED_TYA_TO_NUM= 530;
      334+    3940        %EQU E$SYMBOL_TOO_LARGE        = 531;
      335+    3941        %EQU E$JUST_SYNC_IN_COND_GROUP = 532;
      336+    3942        %EQU E$DISPLAY_ONLY_IN_COND_GROUP = 533;
      337+    3943        %EQU E$ILLEGAL_SYMBOL          = 534;
      338+    3944        %EQU E$INITIALIZE_RENAMES      = 535;
      339+    3945        %EQU E$SEGMENT_LIMIT_ERROR     = 536;
      340+    3946        %EQU E$REPORT_SAME_RECORD      = 537;
      341+    3947        %EQU E$SEGMENT_NUMBER_ERROR    = 538;
      342+    3948        %EQU E$ERR_ACCESS_W_REPORT     = 539;
      343+    3949        %EQU E$DUP_SEC_W_DIFF_SEG#     = 540;
      344+    3950        %EQU E$ALTER_IND_GOTO          = 541;
      345+    3951        %EQU E$ERROR_DATA_NAME         = 542;
      346+    3952        %EQU E$NO_PIC_ALLOWED_ON_GROUP = 543;
      347+    3953        %EQU E$CATALOG_NAME_TOO_LONG   = 544;
      348+    3954        %EQU E$OCCURS_ON_LEVEL_1       = 545;
      349+    3955        %EQU E$LEVEL_1_OR_77_AT_TOP    = 546;
      350+    3956        %EQU E$PERFORM_BY_ZERO         = 547;
      351+    3957        %EQU E$SYNC_IN_INDEX           = 548 ;
      352+    3958        %EQU E$VALUE_NUMERIC_ERR  = 549;
      353+    3959        %EQU E$COMMA_IN_NUMBER         = 550;
      354+    3960        %EQU E$USING_SCALAR_W_SUBSCRIPT = 551;
      355+    3961        %EQU E$REPLACE_BY_EXPECTED     = 552;
      356+    3962        %EQU E$REPLACE_PERIOD_EXPECTED = 553;
      357+    3963        %EQU E$REPLACE_NULL_SPEC       = 554;
      358+    3964        %EQU E$COPY_PERIOD_EXPECTED    = 555;
      359+    3965        %EQU E$REPLACING_BY_WHAT       = 556;
      360+    3966        %EQU E$INVALID_SUBSCRIPT       = 557;
      361+    3967        %EQU E$OPEN_OPTIONAL_OUTPUT       = 558;
      362+    3968        %EQU E$REDEFINES_ORDER_ERR     = 559;
      363+    3969        %EQU E$DUP_DD_CLAUSE           = 560;
      364+    3970        %EQU E$PIC_ON_INDEX            = 561;
      365+    3971        %EQU E$PIC_STR_TOO_LONG        = 562;
      366+    3972        %EQU E$ALPHA_PIC_ON_NUMERIC_ITEM = 563;
      367+    3973        %EQU E$BWZ_AND_ASTERISK        = 564;
      368+    3974        %EQU E$LVL_77_NOT_VALID_HERE   = 565;
      369+    3975        %EQU E$INVALID_NUMERIC_LIMIT   = 566;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:447  
      370+    3976        %EQU E$ONLY_INT_EXPR_FOR_REFMOD= 567;
      371+    3977        %EQU E$NUMERIC_TYPE_EXPECTED   = 568;
      372+    3978        %EQU E$INVALID_ACCEPT_TYPE     = 569;
      373+    3979        %EQU E$INVALID_MOVE_OPERANDS   = 570;
      374+    3980        %EQU E$INVALID_MATH_OPERANDS   = 571;
      375+    3981        %EQU E$INVALID_COMP_OPERANDS   = 572;
      376+    3982        %EQU E$JUSTIFIED_NOT_ON_ALPHA  = 573;
      377+    3983        %EQU E$JUSTIFIED_NOT_ELEMENTARY= 574;
      378+    3984        %EQU E$VALUE_REDUNDANT         = 575; /* Moved from 138 */
      379+    3985        %EQU E$BWZ_NOT_ELEMENTARY      = 576;
      380+    3986        %EQU E$NO_PIC_WITH_BWZ         = 577;
      381+    3987        %EQU E$BWZ_MUST_BE_DISPLAY     = 578;
      382+    3988        %EQU E$EXTERNAL_IN_WRONG_CONTEXT=579;
      383+    3989        %EQU E$EXT_GLOBAL_NO_DATA_NAME = 580;
      384+    3990        %EQU E$EXTERNAL_AND_REDEFINES  = 581;
      385+    3991        %EQU E$GLOBAL_IN_WRONG_CONTEXT = 582;
      386+    3992        %EQU E$JUST_SYNC_UNDER_VALUE   = 583;
      387+    3993        %EQU E$INVALID_LEVEL#_FOR_REDEF= 584;
      388+    3994        %EQU E$REDEF_IN_FD_OR_CD       = 585;
      389+    3995        %EQU E$PIC_MUST_HAVE_SIGN      = 586;
      390+    3996        %EQU E$NUM_CONST_W_ALPHA_ITEM  = 587;
      391+    3997        %EQU E$CONSTANT_REQUIRES_VALUE = 588;
      392+    3998        %EQU E$MULTIPLE_VALUES_ONLY_FOR_88 = 589;
      393+    3999        %EQU E$THRU_CLAUSE_BUT_NOT_88  = 590;
      394+    4000        %EQU E$DUPLICATE_USER_LABEL_PROC = 591;
      395+    4001        %EQU E$INCORRECT_PARA_NAME     = 592;
      396+    4002        %EQU E$INVALID_CORRES_ID      = 593;
      397+    4003        %EQU E$AMBIGUOUS_CORRES_REF    = 594;
      398+    4004        %EQU E$INDEX_MUST_BE_UNIQUE    = 595;
      399+    4005        %EQU E$INDEX_MUST_HAVE_OCCURS  = 596;
      400+    4006        %EQU E$CONDITION_EXPECTED      = 597;
      401+    4007        %EQU E$SUB_IN_WRONG_ORDER      = 598;
      402+    4008        %EQU E$WRONG_#_OF_SUBS         = 599;
      403+    4009
      404+    4010        %EQU E$LAST_500_MSG_NO         = 599;
      405+    4011
      406+    4012
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:448  
      407+    4013        /* -------------- */
      408+    4014        /* ERRORS 600-699 - Fatal error messages (cont) */
      409+    4015        /* -------------- */
      410+    4016        %EQU E$INVALID_SET             = 600;
      411+    4017        %EQU E$SUBSCRIPT_EXPECTED      = 601;
      412+    4018        %EQU E$NO_SIGN_S_FOUND         = 602;
      413+    4019        %EQU E$WRONG_SIGN_TYPE         = 603;
      414+    4020        %EQU E$SPARE_604               = 604;
      415+    4021        %EQU E$INT2_LSS_INT1    = 605;
      416+    4022        %EQU E$SEG_NUM_OVER_49         = 606;
      417+    4023        %EQU E$INDEX_IN_INITIALIZE     = 607;
      418+    4024        %EQU E$REDEFINES_NOT_DEFINED   = 608;
      419+    4025        %EQU E$MUST_BE_DISPLAY         = 609;
      420+    4026        %EQU E$MUST_BE_INTEGER         = 610;
      421+    4027        %EQU E$NO_P_IN_PICTURE         = 611;
      422+    4028        %EQU E$INSUFFICIENT_SIGNIFICANCE = 612;
      423+    4029        %EQU E$EDITED_INVALID          = 613;
      424+    4030        %EQU E$JUSTIFIED_INVALID       = 614;
      425+    4031        %EQU E$DEPEND_IS_UNDER_OCCURS  = 615;
      426+    4032        %EQU E$INITIALIZE_WITH_DEPENDING = 616;
      427+    4033        %EQU E$ONLY_VALUE_ON_COND_NAME = 617;
      428+    4034        %EQU E$CONDITION_NAME_EXPECTED = 618;
      429+    4035        %EQU E$SEARCH_ID_ERROR         = 619;
      430+    4036        %EQU E$MNEMONIC_NAME_EXPECTED  = 620;
      431+    4037        %EQU E$INVALID_SUBSCRIPT_CONTEXT = 621;
      432+    4038        %EQU E$OCCURS_BETWEEN_KEY_AND_ARRAY = 622;
      433+    4039        %EQU E$KEY_MUST_BE_IN_GROUP    = 623;
      434+    4040        %EQU E$KEY_IS_ARRAY            = 624;
      435+    4041        %EQU E$INVALID_DISPLAY_UPON    = 625;
      436+    4042        %EQU E$ERROR_IN_ALPHABET_LITERAL = 626;
      437+    4043        %EQU E$LITERAL_GTR_1_CHAR       = 627;
      438+    4044        %EQU E$SEARCH_KEY_TYPE         = 628;
      439+    4045        %EQU E$SEARCH_COMP_VALUE_MISSING = 629;
      440+    4046        %EQU E$SEARCH_SINGLE_COND_VALUE = 630;
      441+    4047        %EQU E$SEARCH_EXTRA_COMP_VALUE = 631;
      442+    4048        %EQU E$SEARCH_CONSEC_KEYS      = 632;
      443+    4049        %EQU E$SEARCH_NO_TABLE_KEY_INDEX = 633;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:449  
      444+    4050        %EQU E$ALPHABET_NOT_DEFINED    = 634;
      445+    4051        %EQU E$DIFF_#_INTS_AND_DNS     = 635;
      446+    4052        %EQU E$NUMBER_GTR_512          = 636;
      447+    4053        %EQU E$SYMBOLIC_CHAR_NOT_UNIQUE= 637;
      448+    4054        %EQU E$REPORT_DEVICE_ERROR    = 638;
      449+    4055        %EQU E$EVAL_INCOMPATIBLE_TYPES = 639;
      450+    4056        %EQU E$EVAL_NOT_EXPR_ILLEGAL = 640;
      451+    4057        %EQU E$EVAL_EXPR_COUNT_ERROR = 641;
      452+    4058        %EQU E$CLASS_ON_NON_IDENTIFIER = 642;
      453+    4059        %EQU E$CLASS_ALPHABETIC_NOT_TYA = 643;
      454+    4060        %EQU E$CLASS_NUMERIC_ON_ALPHABETIC = 644;
      455+    4061        %EQU E$NON_SEQUENTIAL_ALPHA_CLAUSE = 645;
      456+    4062        %EQU E$INVALID_CURRENCY_SIGN       = 646;
      457+    4063        %EQU E$EMBEDDED_QUOTES          = 647;
      458+    4064        %EQU E$MULTIPLE_CURRENCY_SIGNS  = 648;
      459+    4065        %EQU E$INVALID_ACCEPT_FROM      = 649;
      460+    4066        %EQU E$ALPHABET_VALUE_GTR_512   = 650;
      461+    4067        %EQU E$TOO_MANY_ALPHABET_VALUES = 651;
      462+    4068        %EQU E$ILLEGAL_DELIMITER_CLAUSE = 652 ;
      463+    4069        %EQU E$ILLEGAL_COUNT_CLAUSE     = 653 ;
      464+    4070        %EQU E$ALPHANUMERIC_TYPE_EXPECTED = 654 ;
      465+    4071        %EQU E$ID7_TOO_SMALL            = 655 ;
      466+    4072        %EQU E$INDEX_IN_CONSTANT_SECT   = 656;
      467+    4073        %EQU E$RENAMES_WITH_PIC         = 657;
      468+    4074        %EQU E$CLAUSE_NOT_VALID        = 658;
      469+    4075        %EQU E$KEY_MUST_HAVE_OCCURS    = 659;
      470+    4076        %EQU E$REDEF_REDEF_ERROR       = 660;
      471+    4077        %EQU E$OCC_DEP_MUST_BE_LAST    = 661;
      472+    4078        %EQU E$NON_UNIQUE_FILENAME     = 662;
      473+    4079        %EQU E$ILLEGAL_DEVICE          = 663;
      474+    4080        %EQU E$ACCESS_AND_ORG_DIFF     = 664;
      475+    4081        %EQU E$MUST_BE_TAPE            = 665;
      476+    4082        %EQU E$DUPLICATES_NO_KEY       = 666;
      477+    4083        %EQU E$ALPHABET_CONTAINS_LITERAL = 667;
      478+    4084        %EQU E$FILE_NOT_SELECTED       = 668;
      479+    4085        %EQU E$NO_KEY_SPECIFIED        = 669;
      480+    4086        %EQU E$INVALID_CALL_ARGUMENT   = 670;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:450  
      481+    4087        %EQU E$2_FILES_REQUIRED        = 671;
      482+    4088        %EQU E$FILE_TYPE_EXPECTED      = 672;
      483+    4089        %EQU E$MUST_BE_1_CHAR_LONG     = 673;
      484+    4090        %EQU E$MUST_BE_IN_WORK_STORAGE = 674;
      485+    4091        %EQU E$CLAUSE_INVALID_WITH_ORG = 675;
      486+    4092        %EQU E$MUST_BE_2_CHAR_LONG     = 676;
      487+    4093        %EQU E$MUST_BE_GTR_ZERO        = 677;
      488+    4094        %EQU E$MUST_BE_ELEMENTARY      = 678;
      489+    4095        %EQU E$FOOTING_GTR_LINES       = 679;
      490+    4096        %EQU E$LINES_MUST_BE_SPECIFIED = 680;
      491+    4097        %EQU E$MUST_BE_UNSIGNED        = 681;
      492+    4098        %EQU E$RECORD_DEFN_LSS_REC_CLAUSE = 682;
      493+    4099        %EQU E$RECORD_DEFN_GTR_REC_CLAUSE = 683;
      494+    4100        %EQU E$CLAUSE_NOT_VALID_WITH_ORG  = 684;
      495+    4101        %EQU E$REL_KEY_IN_FD              = 685;
      496+    4102        %EQU E$READ_KEY_FOR_SEQ           = 686;
      497+    4103        %EQU E$READ_KEY_INDEXED_KEYED_ONLY = 687;
      498+    4104        %EQU E$KEY_NOT_IN_FILE_DESC        = 688;
      499+    4105        %EQU E$ORG_NOT_SEQ_WITH_CLAUSE     = 689;
      500+    4106        %EQU E$WRONG_ORG_WITH_KEY          = 690;
      501+    4107        %EQU E$OCCURS_DEPEND_UNDER_OCCURS  = 691;
      502+    4108        %EQU E$GLOBAL_INVALID_IN_USE       = 692;
      503+    4109        %EQU E$ONLY_ONE_USE_OF_TYPE        = 693;
      504+    4110        %EQU E$ONLY_ONE_USE_PER_FILE       = 694;
      505+    4111        %EQU E$NEXT_WITH_INVALID           = 695;
      506+    4112        %EQU E$INVALID_WITH_SEQ            = 696;
      507+    4113        %EQU E$MUST_BE_COMP_6              = 697;
      508+    4114        %EQU E$READ_KEY_NOT_VALID          = 698;
      509+    4115        %EQU E$FILE_RECORD_REQ             = 699;
      510+    4116
      511+    4117        %EQU E$LAST_600_MSG_NO             = 699;
      512+    4118
      513+    4119
      514+    4120
      515+    4121        /* -------------- */
      516+    4122        /* ERRORS 700-799 - Fatal error messages (cont) */
      517+    4123        /* -------------- */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:451  
      518+    4124        %EQU E$NEXT_WITH_RANDOM            = 700;
      519+    4125        %EQU E$AT_END_FOR_RANDOM           = 701;
      520+    4126        %EQU E$NEXT_REQ_FOR_DYNAMIC        = 702;
      521+    4127        %EQU E$ADVANCING_SEQ_ONLY          = 703;
      522+    4128        %EQU E$WRITE_EOP_SEQ_ONLY          = 704;
      523+    4129        %EQU E$WRITE_ADV_EOP               = 705;
      524+    4130        %EQU E$WRITE_EOP_LINAGE            = 706;
      525+    4131        %EQU E$INVALID_SEQ_ORGANIZATION           = 707;
      526+    4132        %EQU E$WRITE_INVALID_OR_USE_PROC   = 708;
      527+    4133        %EQU E$WRITE_ADVANCING_LINAGE      = 709;
      528+    4134        %EQU E$POSITIVE_INTEGER_EXPECTED  = 710;
      529+    4135        %EQU E$NOT_VALID_IN_CONTEXT        = 711;
      530+    4136        %EQU E$OPEN_CLOSE_SEQ_ONLY         = 712;
      531+    4137        %EQU E$NON_NEGATIVE_INTEGER_EXP    = 713;
      532+    4138        %EQU E$ILLEGAL_CHANNEL#            = 714;
      533+    4139        %EQU E$INVALID_ADVANCING_TYPE      = 715;
      534+    4140        %EQU E$NO_FD_SPECIFIED             = 716;
      535+    4141        %EQU E$INVALID_RETENTION_ITEM      = 717;
      536+    4142        %EQU E$FILE_NAME_TOO_LONG          = 718;
      537+    4143        %EQU E$DELETE_FOR_SEQ_FILE         = 719;
      538+    4144        %EQU E$INVALID_SEQ_ACCESS          = 720;
      539+    4145        %EQU E$REWRITE_INVALID_REL_SEQ     = 721;
      540+    4146        %EQU E$START_FOR_RANDOM            = 722;
      541+    4147        %EQU E$RELATIVE_START_KEY          = 723;
      542+    4148        %EQU E$START_KEY_NOT_ALPHANUMERIC  = 724;
      543+    4149        %EQU E$START_INDEXED_KEY           = 725;
      544+    4150        %EQU E$START_SEQUENTIAL            = 726;
      545+    4151        %EQU E$NO_VARIABLE_OCCURRENCE      = 727;
      546+    4152        %EQU E$FILE_IN_SAME_CLAUSE_TWICE   = 728;
      547+    4153        %EQU E$NOM_KEY_WITH_REL_KEY        = 729;
      548+    4154        %EQU E$SWITCH_EXPECTED             = 730;
      549+    4155        %EQU E$WRITE_POS_IDENT             = 731;
      550+    4156        %EQU E$WRITE_POS_SEQ_ONLY          = 732;
      551+    4157        %EQU E$WRITE_POS_LINAGE            = 733;
      552+    4158        %EQU E$WRITE_POS_EOP_CLAUSE        = 734;
      553+    4159        %EQU E$FD_ALREADY_EXISTS           = 735;
      554+    4160        %EQU E$ALPHABET_EXPECTED           = 736;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:452  
      555+    4161        %EQU E$KEY_IN_FILE_RECORD          = 737;
      556+    4162        %EQU E$KEY_WITH_OCCURS             = 738;
      557+    4163        %EQU E$SD_RECORD_REQ               = 739;
      558+    4164        %EQU E$RECORD_COUNT_NON_TYA        = 740;
      559+    4165        %EQU E$CLASS_EXPECTED              = 741;
      560+    4166        %EQU E$START_KEYED_KEY             = 742;
      561+    4167        %EQU E$INVALID_DISPLAY_TYPE       = 743;
      562+    4168        %EQU E$MISSING_COPY_FILE1          = 744;
      563+    4169        %EQU E$MISSING_COPY_FILE2          = 745;
      564+    4170        %EQU E$REPLACE_SYNTAX_ERROR        = 746;
      565+    4171        %EQU E$SUB_SCHEMA_NOT_PRESENT      = 747;
      566+    4172        %EQU E$ERROR_READING_SUB_SCHEMA    = 748;
      567+    4173        %EQU E$SUB_SCHEMA_NOT_TRANSLATED   = 749;
      568+    4174        %EQU E$SCHEMA_NOT_KNOWN            = 750;
      569+    4175        %EQU E$SUB_SCHEMA_NOT_KNOWN        = 751;
      570+    4176        %EQU E$PRIVACY_KEY_MISSING         = 752;
      571+    4177        %EQU E$PRIVACY_KEY_NO_MATCH        = 753;
      572+    4178        %EQU E$WRITE_ERROR                 = 754;
      573+    4179        %EQU E$DML_SET_SENDER_ERROR        = 755;
      574+    4180        %EQU E$DML_SET_RECEIVER_ERROR      = 756;
      575+    4181        %EQU E$DB_EXCEPTION_ALL_ERROR      = 757;
      576+    4182        %EQU E$DB_EXCEPT_OTHER_ERROR       = 758;
      577+    4183        %EQU E$DB_EXCEPT_DUPLICATE         = 759;
      578+    4184        %EQU E$DB_EXCEPT_NOT_VALID         = 760;
      579+    4185        %EQU E$NO_VALID_SUB_SCHEMA         = 761;
      580+    4186        %EQU E$DUPLICATE_RECORD_ALL        = 762;
      581+    4187        %EQU E$DUPLICATE_SET_ALL           = 763;
      582+    4188        %EQU E$ITEM_NOT_REALM              = 764;
      583+    4189        %EQU E$ERROR_TEMP_REALM_RETRIEVAL  = 765;
      584+    4190        %EQU E$GET_LIST_IGNORED            = 766;
      585+    4191        %EQU E$ITEM_NOT_FIELD              = 767;
      586+    4192        %EQU E$ITEM_NOT_DB_KEY             = 768;
      587+    4193        %EQU E$ITEM_NOT_A_RECORD           = 769;
      588+    4194        %EQU E$ITEM_NOT_REALM_OR_SET       = 770;
      589+    4195        %EQU E$LOCATION_MODE_NOT_CALC      = 771;
      590+    4196        %EQU E$ITEM_NOT_A_SET              = 772;
      591+    4197        %EQU E$INVALID_CLAUSE_FOR_DB_KEY   = 773;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:453  
      592+    4198        %EQU E$INVALID_MEMBER              = 774;
      593+    4199        %EQU E$REALM_CURRENCY_ERROR        = 775;
      594+    4200        %EQU E$RECORD_CURRENCY_ERROR       = 776;
      595+    4201        %EQU E$DB_KEY_CURRENCY_ERROR       = 777;
      596+    4202        %EQU E$CURRENCY_ERROR              = 778;
      597+    4203        %EQU E$DB_KEY_CURRENCY_ERROR_2     = 779;
      598+    4204        %EQU E$ELEMENTARY_CURRENCY_ERROR   = 780;
      599+    4205        %EQU E$ITEM_NOT_RECORD_FIELD       = 781;
      600+    4206        %EQU E$USE_PRIVACY_TYPE_ERROR      = 782;
      601+    4207        %EQU E$DB_KEY_EQUALITY_ERROR       = 783;
      602+    4208        %EQU E$DB_KEY_COMPARISON_ERROR     = 784;
      603+    4209        %EQU E$ITEM_NOT_A_KEY              = 785;
      604+    4210        %EQU E$MULTIPLE_SET_CONDITIONS         = 786;
      605+    4211        %EQU E$MULTIPLE_FILE_ERROR         = 787;
      606+    4212        %EQU E$DUPLICATE_SUB_SCHEMA_SECTION = 788;
      607+    4213        %EQU E$ILLEGAL_DML_REF             = 789;
      608+    4214        %EQU E$DB_KEY_CURRENCY_ERROR_3     = 790;
      609+    4215        %EQU E$FIELD_NOT_IN_RECORD         = 791;
      610+    4216        %EQU E$ILLEGAL_GRAPHIC_LITERAL     = 792;
      611+    4217        %EQU E$GRAPHIC_LITERAL_ODD         = 793;
      612+    4218        %EQU E$GRAPHIC_LITERAL_KE_KS_ERROR = 794;
      613+    4219        %EQU E$MIXING_TYN_WITH_TYA         = 795;
      614+    4220        %EQU E$PIC_N_ILLEGAL               = 796;
      615+    4221        %EQU E$ILLEGAL_GRAPHIC_CHARACTER   = 797;
      616+    4222        %EQU E$ARG_MISMATCH                = 798;
      617+    4223        %EQU E$INTERNAL_COPY               = 799;
      618+    4224
      619+    4225        %EQU E$LAST_700_MSG_NO             = 799;
      620+    4226
      621+    4227
      622+    4228
      623+    4229        /* -------------- */
      624+    4230        /* ERRORS 800-899 - Fatal error messages (cont) */
      625+    4231        /* -------------- */
      626+    4232        %EQU E$ERR_CLAUSE_IN_REP_01_ENTRY    = 800;
      627+    4233        %EQU E$TYPE_CLAUSE_MISSING     = 801;
      628+    4234        %EQU E$ERR_LEVEL_AND_01_ASSUMED = 802;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:454  
      629+    4235        %EQU E$ERR_LEVEL_AND_49_ASSUMED = 803;
      630+    4236        %EQU E$SEPARATE_MUST_SPECIFIED = 804;
      631+    4237        %EQU E$ERR_CLAUSE_IN_GROUP_ENTRY = 805;
      632+    4238        %EQU E$ERR_CLAUSE1_WITH_CLAUSE2   = 806;
      633+    4239        %EQU E$SUM_MUST_BE_NUMERIC     = 807;
      634+    4240        %EQU E$SUM_MUST_IN_CF          = 808;
      635+    4241        %EQU E$ERR_RESET_IN_SUM        = 809;
      636+    4242        %EQU E$GROUP_IND_IN_DETAIL_ONLY  = 810;
      637+    4243        %EQU E$GROUP_IND_IN_PRINTABLE_ONLY  = 811;
      638+    4244        %EQU E$TYPE_IN_01_ONLY         = 812;
      639+    4245        %EQU E$ONE_REPORT_HEADING_ONLY = 813;
      640+    4246        %EQU E$ONE_PAGE_HEADING_ONLY   = 814;
      641+    4247        %EQU E$ONE_PAGE_FOOTING_ONLY   = 815;
      642+    4248        %EQU E$ONE_REPORT_FOOTING_ONLY = 816;
      643+    4249        %EQU E$ONE_CONTROL_FOOT_FINAL_ONLY = 817;
      644+    4250        %EQU E$ONE_CONTROL_HEAD_FINAL_ONLY = 818;
      645+    4251        %EQU E$ONLY_W_PAGE_IN_RD       = 819;
      646+    4252        %EQU E$ONLY_CONTROL_FINAL_IN_RD = 820;
      647+    4253        %EQU E$REPORT_FILE_W_01_ENTRY  = 821;
      648+    4254        %EQU E$RECORD_MISS_FROM_FD     = 822;
      649+    4255        %EQU E$REPORT_NAME_NOT_DECL    = 823;
      650+    4256        %EQU E$RD_ALREADY_EXISTS       = 824;
      651+    4257        %EQU E$INT_MUST_GTR_EQU_1      = 825;
      652+    4258        %EQU E$NUM_IS_TOO_SMALL        = 826;
      653+    4259        %EQU E$NUM_EXCEED_999          = 827;
      654+    4260        %EQU E$ERR_NAME_IN_CONTROL     = 828;
      655+    4261        %EQU E$DUP_CONTROL_NAME        = 829;
      656+    4262        %EQU E$DCL_IN_REPORT           = 830;
      657+    4263        %EQU E$VAR_OCCUR_NAME          = 831;
      658+    4264        %EQU E$ERR_NEXT_PAGE           = 832;
      659+    4265        %EQU E$NAME_NOT_IN_CONTROL_CLAUSE = 833;
      660+    4266        %EQU E$DUP_REF_CONTROL_NAME    = 834;
      661+    4267        %EQU E$LINE_UNDER_LINE         = 835;
      662+    4268        %EQU E$LINE_W_NO_PAGE          = 836;
      663+    4269        %EQU E$ABSOLUTE_FOLLOW_RELATIVE = 837;
      664+    4270        %EQU E$ABSOLUTE_NOT_ASCENDING  = 838;
      665+    4271        %EQU E$NEXT_PAGE_NOT_FIRST     = 839;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:455  
      666+    4272        %EQU E$NEXT_PAGE_IN_WRONG_GRP  = 840;
      667+    4273        %EQU E$NEXT_GROUP_NOT_IN_01    = 841;
      668+    4274        %EQU E$NEXT_GROUP_IN_WRONG_GRP = 842;
      669+    4275        %EQU E$NEXT_GROUP_PAGE_IN_PF   = 843;
      670+    4276        %EQU E$NEXT_GROUP_W_NO_PAGE    = 844;
      671+    4277        %EQU E$NO_LINE_FOR_COLUMN      = 845;
      672+    4278        %EQU E$FIELD_OVERLAPPED        = 846;
      673+    4279        %EQU E$NEXT_GROUP_W_NO_LINE    = 847;
      674+    4280        %EQU E$LINE_NOT_ABS_IN_PF      = 848;
      675+    4281        %EQU E$FIT_IN_ERROR            = 849;
      676+    4282        %EQU E$NEXT_GROUP_FIT_ERROR    = 850;
      677+    4283        %EQU E$DETAIL_REPORT_GROUP_EXPECTED = 851;
      678+    4284        %EQU E$WRONG_GEN_REPORT        = 852;
      679+    4285        %EQU E$REPORT_DESC_NOT_DEFINED = 853;
      680+    4286        %EQU E$REPORT_NAME_EXPECTED    = 854;
      681+    4287        %EQU E$MUST_SUM_IN_SAME_REPORT = 855;
      682+    4288        %EQU E$WRONG_DATA_NAME_IN_REP  = 856;
      683+    4289        %EQU E$NO_LINAGE_IN_REP        = 857;
      684+    4290        %EQU E$REP_ITEM_W_UPON         = 858;
      685+    4291        %EQU E$MUST_BE_DETAIL_GROUP    = 859;
      686+    4292        %EQU E$SUM_IN_SAME_REPORT      = 860;
      687+    4293        %EQU E$EQU_OR_LOWER_LVL_SUM    = 861;
      688+    4294        %EQU E$CODE_FOR_ALL_REPORT     = 862;
      689+    4295        %EQU E$OPEN_ERR_FOR_REPORT_FILE = 863;
      690+    4296        %EQU E$SUPPRESS_ERROR          = 864;
      691+    4297        %EQU E$ERR_STMT_IN_USE_REPORTING = 865;
      692+    4298        %EQU E$DUP_NAME_IN_USE_REPORTING = 866;
      693+    4299        %EQU E$MUST_BE_REPORT_GROUP    = 867;
      694+    4300        %EQU E$DUP_USE_BEFORE_REPORTING = 868;
      695+    4301        %EQU E$MORE_THEN_ONE_INITIAL   = 869;
      696+    4302        %EQU E$NAME_LIST_OVERFLOW      = 870;
      697+    4303        %EQU E$THIS_CD_NEED_01_ENTRY   = 871;
      698+    4304        %EQU E$BUFFER_LENGTH_ERROR     = 872;
      699+    4305        %EQU E$ONLY_FIRST_MAY_HAVE_VALUE = 873;
      700+    4306        %EQU E$MUST_BE_CD_I_O          = 874;
      701+    4307        %EQU E$MUST_NO_SIGN_ONE_CHAR_INT = 875;
      702+    4308        %EQU E$NOT_ALLOWED_IN_DM4_TP   = 876;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:456  
      703+    4309        %EQU E$USING_WITH_INITIAL      = 877;
      704+    4310        %EQU E$MUST_SAME_LIMIT_AS_MAIN = 878;
      705+    4311        %EQU E$DUPLICATE_ERROR_PHRASES = 879;
      706+    4312        %EQU E$MULTIPLE_ERROR_PHRASES  = 880;
      707+    4313        %EQU E$MISSING_NOT_CLAUSE      = 881;
      708+    4314        %EQU E$MISSING_WITH_CLAUSE     = 882;
      709+    4315        %EQU E$USER_LABEL_NAME_ERROR   = 883;
      710+    4316        %EQU E$USER_LABEL_ASSIGN_ERROR = 884;
      711+    4317        %EQU E$DUPLICATE_NAME          = 885;
      712+    4318        %EQU E$UNPOOLED_PRIMES         = 886;
      713+    4319        %EQU E$UNPOOLED_REFS           = 887;
      714+    4320        %EQU E$UNPOOLED_TEMPS          = 888;
      715+    4321        %EQU E$HEAP_NOT_RETURNED       = 889;
      716+    4322        %EQU E$POINTER_INCOMPATIBLE    = 890;
      717+    4323        %EQU E$ERROR_IN_ADDRESS_OF     = 891;
      718+    4324        %EQU E$ITEM_NOT_IN_SCHEMA      = 892;
      719+    4325        %EQU E$GOTO_NO_DEST            = 893;
      720+    4326        %EQU E$DUPLICATE_DCB_NAME      = 894; /* GCOS E$GET_BUFFER_ERR  */
      721+    4327        %EQU E$BUSY_FILE               = 895; /* GCOS TS8 only */
      722+    4328        %EQU E$CANNOT_ACCESS_FILE      = 896; /* GCOS TS8 only */
      723+    4329        %EQU E$LAST_800_MSG_NO         = 896;
      724+    4330
      725+    4331
      726+    4332
      727+    4333        /* -------------- */
      728+    4334        /* ERRORS 900-999 - Compiler abort messages */
      729+    4335        /* -------------- */
      730+    4336        %EQU E$ERROR_LIMIT_EXCEEDED    = 900;
      731+    4337        %EQU E$BLOCK_DATA_LIMIT        = 901;
      732+    4338        %EQU E$COMPILER_ABORT          = 902;
      733+    4339        %EQU E$PARSE_STACK_OVERFLOW_ERROR = 903;
      734+    4340        %EQU E$SEMANTIC_TOKEN_STACK_OVERFLW = 904;
      735+    4341        %EQU E$RED_STACK_OVERFLOW_ERROR = 905;
      736+    4342        %EQU E$CORRECTION_FAILURE      = 906;
      737+    4343        %EQU E$ANNOTATOR_ABORT         = 907;
      738+    4344        %EQU E$LX_STACK_OVERFLOW_ERROR = 908;
      739+    4345        %EQU E$DML_STACK_OVERFLOW_ERROR= 909;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:457  
      740+    4346        %EQU E$TOO_MANY_LINES          = 910; /* GCOS only */
      741+    4347        %EQU E$AUTO_STACK_OVERFLOW_ERROR = 911;
      742+    4348        %EQU E$CODE_LIMIT              = 912;
      743+    4349        %EQU E$INVALID_CODE            = 913;
      744+    4350        %EQU E$SPARE_914               = 914;
      745+    4351        %EQU E$EVALP_NOT_DELETED       = 915;
      746+    4352        %EQU E$BAD_PIC_TYPE            = 916 ;
      747+    4353        %EQU E$BAD_NUM_PIC_TYPE        = 917 ;
      748+    4354        %EQU E$SEQ_NO_OVERFLOW         = 918 ;
      749+    4355        %EQU E$DATA_LIMIT              = 919;
      750+    4356        %EQU E$INPUT_FILE_OPEN_ERROR   = 920;
      751+    4357        %EQU E$SCANNER_FAILURE         = 921;
      752+    4358        %EQU E$INVALID_COMPILER_LITERAL = 922;
      753+    4359        %EQU E$SPARE_923               = 923;
      754+    4360        %EQU E$ACTION_NOT_PRESENT      = 924;
      755+    4361        %EQU E$UNEXPECTED_CASE         = 925;
      756+    4362        %EQU E$BAD_STRUCTURE_TYPE      = 926;
      757+    4363        %EQU E$PRESET_BUFFER_NOT_EMPTY = 927;
      758+    4364        %EQU E$NON_CURRENT_FAB         = 928;
      759+    4365        %EQU E$SCHEMA_SUB_SCHEMA_ERROR = 929;
      760+    4366
      761+    4367        %EQU E$LAST_900_MSG_NO         = 929;
      762+    4368
      763+    4369        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:458  
      492     4370        %INCLUDE Z8A_TYPES;
        1+    4371        /*T***********************************************************/
        2+    4372        /*T*                                                         */
        3+    4373        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    4374        /*T*                                                         */
        5+    4375        /*T***********************************************************/
        6+    4376
        7+    4377        %EQU TYD = 0 ; /* DECIMAL (COMP, COMP-3, ETC) */
        8+    4378        %EQU TYI = 1 ; /* INTEGER (COMP-6) */
        9+    4379        %EQU TYJ = 2 ; /* 16 Bit - Comp-1                    */
       10+    4380        %EQU TYO = 3 ; /* OVERPUNCHED (PIC S99 DISPLAY) */
       11+    4381        %EQU TYR = 4 ; /* REAL (COMP-11) */
       12+    4382        %EQU TYQ = 5 ; /* D.P. (COMP-12) */
       13+    4383        %EQU TYE = 6 ; /* EBCDIC (DISPLAY-1) */
       14+    4384        %EQU TYH = 7 ; /* COMP-7 (HALF WORD) */
       15+    4385        %EQU TYA = 8 ; /* ASCII ALPHANUMERIC */
       16+    4386        %EQU TYX = 9 ; /* INDEX */
       17+    4387        %EQU TYY =10 ; /* INDEX (IBM) */
       18+    4388        %EQU TYF = 11 ; /* EBCDIC numeric */
       19+    4389        %EQU TYB = 12 ; /* GBCD */
       20+    4390        %EQU TYT = 13 ; /* Typeless for various scratch uses */
       21+    4391        %EQU TYN = 14 ; /* Kanji variable (PIC N)            */
       22+    4392        %EQU TYK = 15 ; /* 32 Bit - Comp-2                   */
       23+    4393        %EQU TYG = 16 ; /* Generic type, ie. Weird so that ST.ID must be checked */
       24+    4394        %EQU TYM = 17 ; /* Micro-op string for editing       */
       25+    4395        %EQU TYP = 18 ; /* Pointer variable                  */
       26+    4396        %EQU TYC = 19 ; /* GBCD numeric                      */
       27+    4397
       28+    4398        /* Sets of types for use in case statements */
       29+    4399
       30+    4400        %MACRO SET_OF_NUMERIC_TYPES;
       31+    4401
       32+    4402          %TYD, %TYI, %TYJ, %TYO, %TYR, %TYQ, %TYH, %TYK, %TYF, %TYC
       33+    4403
       34+    4404        %MEND;
       35+    4405
       36+    4406
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:459  
       37+    4407        /* Lengths for each type (if applicable) */
       38+    4408
       39+    4409        %EQU TYH_LENGTH  = 2;
       40+    4410        %EQU TYI_LENGTH  = 4;
       41+    4411        %EQU TYJ_LENGTH  = 2;
       42+    4412        %EQU TYK_LENGTH  = 4;
       43+    4413        %EQU TYQ_LENGTH  = 8;
       44+    4414        %EQU TYR_LENGTH  = 4;
       45+    4415        %EQU TYX_LENGTH  = 8;
       46+    4416        %EQU TYY_LENGTH  = 6;
       47+    4417
       48+    4418
       49+    4419        /* Type significance -- This is different from the length in that
       50+    4420                                the length is what is in the ST descriptor
       51+    4421                                and the storage it consumes, whereas the
       52+    4422                                significance is the digits of precision
       53+    4423                                that particular type can represent.      */
       54+    4424
       55+    4425        %EQU TYH_SIGNIFICANCE = 6;
       56+    4426        %EQU TYI_SIGNIFICANCE = 11;
       57+    4427        %EQU TYJ_SIGNIFICANCE = 5;
       58+    4428        %EQU TYK_SIGNIFICANCE = 10;
       59+    4429        %EQU TYQ_SIGNIFICANCE = 26;
       60+    4430        %EQU TYR_SIGNIFICANCE = 26;
       61+    4431
       62+    4432        /* Maximum values */
       63+    4433
       64+    4434        %EQU TYH_MAX_VALUE = 131071; /* Min value is - (%TYH_MAX_VALUE + 1) */
       65+    4435        %EQU TYJ_MAX_VALUE = 32767 ; /* Min value is - (%TYJ_MAX_VALUE + 1) */
       66+    4436        %EQU TYK_MAX_VALUE = 2147483647; /* Min value is
       67+    4437                                            - (%TYK_MAX_VALUE + 1)          */
       68+    4438        %EQU TYI_MAX_VALUE = 34359738367;/* Min value is
       69+    4439                                            - (%TYI_MAX_VALUE + 1)          */
       70+    4440
       71+    4441
       72+    4442        %EQU CONTEXT_NUMERIC       = 00;
       73+    4443        %EQU CONTEXT_ALPHA_NUMERIC = 01;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:460  
       74+    4444        %EQU CONTEXT_UNKNOWN       = 02;
       75+    4445        %EQU CONTEXT_KANJI         = 03;
       76+    4446
       77+    4447             %SET TYPE_MATRIX_SIZE = 191;
       78+    4448
       79+    4449        %MACRO TYPE_MATRIX_BEGIN ( @NAME = );
       80+    4450
       81+    4451             %SET TYPE_MATRIX_ENTRIES = 0;
       82+    4452                  DCL 1 @NAME ALIGNED CONSTANT,
       83+    4453
       84+    4454        %MEND;
       85+    4455
       86+    4456
       87+    4457        %MACRO TYPE_MATRIX_ENTRY ( @LOP = , @ROP = , @LOP_BECOMES = , @ROP_BECOMES = );
       88+    4458
       89+    4459             2 * BIT(1)   UNAL INIT('0'B),
       90+    4460             2 * UBIN(4)  UNAL INIT(@LOP),
       91+    4461             2 * UBIN(4)  UNAL INIT(@ROP),
       92+    4462             2 * BIT(1)   UNAL INIT('1'B),
       93+    4463             2 * UBIN(4)  UNAL INIT(@LOP_BECOMES),
       94+    4464             2 * UBIN(4)  UNAL INIT(@ROP_BECOMES),
       95+    4465
       96+    4466             %SET TYPE_MATRIX_ENTRIES = TYPE_MATRIX_ENTRIES + 1;
       97+    4467
       98+    4468        %MEND;
       99+    4469
      100+    4470
      101+    4471        %MACRO TYPE_MATRIX_END;
      102+    4472
      103+    4473
      104+    4474        %SET FILLER = (TYPE_MATRIX_SIZE - TYPE_MATRIX_ENTRIES);
      105+    4475
      106+    4476             2 * (0:%(FILLER - 1)),
      107+    4477                3 * BIT(1) UNAL INIT('0'B * %FILLER),
      108+    4478                3 * UBIN(4) UNAL INIT(0 * %FILLER),
      109+    4479                3 * UBIN(4) UNAL INIT(0 * %FILLER),
      110+    4480                3 * BIT(1) UNAL INIT('1'B * %FILLER),
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:461  
      111+    4481                3 * UBIN(8) UNAL INIT(0 * %FILLER);
      112+    4482
      113+    4483        %MEND;
      114+    4484
      115+    4485        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:462  
      116+    4486        %MACRO TYPE_DESC;
      117+    4487
      118+    4488             2 TYPE     SBIN WORD UNAL,
      119+    4489             2 DESC,
      120+    4490               %DESCRIPTOR (LVL = 3);
      121+    4491             2 SIZ$     PTR,
      122+    4492             2 SSOP$    PTR;
      123+    4493
      124+    4494        %MEND;
      125+    4495
      126+    4496
      127+    4497
      128+    4498        %MACRO INIT_TYPE_DESC (@TYPE_DESC = ,
      129+    4499                               @TYPE      = %TYI,
      130+    4500                               @SIZ$      = "ADDR(NIL)",
      131+    4501                               @SSOP$     = "ADDR(NIL)",
      132+    4502                               @DESC      = );
      133+    4503
      134+    4504             DO;
      135+    4505               %LSET @DESCRIPTOR@ = CHARTEXT(CONCAT(TEXTCHAR(@TYPE_DESC), '.DESC'));
      136+    4506
      137+    4507               %IF TEXTCHAR(@TYPE) = 'TYI';
      138+    4508                 %IF (TEXTCHAR(@DESC) = '');
      139+    4509                   %BUILD_BINARY_DESC(@DESC = %@DESCRIPTOR@ ,
      140+    4510                                      @LENGTH = %TYI_LENGTH );
      141+    4511                 %ELSE;
      142+    4512                   @TYPE_DESC.DESC = @DESC;
      143+    4513                 %ENDIF;
      144+    4514
      145+    4515                 @TYPE_DESC.TYPE = @TYPE;
      146+    4516                 @TYPE_DESC.SIZ$ = @SIZ$;
      147+    4517                 @TYPE_DESC.SSOP$ = @SSOP$;
      148+    4518               %ELSEIF TEXTCHAR(@TYPE) = 'TYD';
      149+    4519                 %IF (TEXTCHAR(@DESC) = '');
      150+    4520                   %PACK_NDSC( @DESC     = %@DESCRIPTOR@ ,
      151+    4521                               @LENGTH   = COMCOM.MAX_TEMP_LENGTH ,
      152+    4522                               @TN       = %NDSC9 ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:463  
      153+    4523                               @SIGN     = %NO_SIGN );
      154+    4524                 %ELSE;
      155+    4525                   @TYPE_DESC.DESC = @DESC;
      156+    4526                 %ENDIF;
      157+    4527
      158+    4528                 @TYPE_DESC.TYPE = @TYPE;
      159+    4529                 @TYPE_DESC.SIZ$ = @SIZ$;
      160+    4530                 @TYPE_DESC.SSOP$ = @SSOP$;
      161+    4531               %ELSE;
      162+    4532                 %IF (TEXTCHAR(@DESC) = '');
      163+    4533                   %ERROR (TRUE, 'DESC parameter missing in INIT_TYPE_DESC',2);
      164+    4534                 %ELSE;
      165+    4535                   @TYPE_DESC.DESC  = @DESC;
      166+    4536                   @TYPE_DESC.SSOP$ = @SSOP$;
      167+    4537                   @TYPE_DESC.SIZ$  = @SIZ$;
      168+    4538                   @TYPE_DESC.TYPE  = @TYPE;
      169+    4539                 %ENDIF;
      170+    4540               %ENDIF;
      171+    4541             END;
      172+    4542
      173+    4543        %MEND;
      493     4544        %INCLUDE Z8E_STACKS;
        1+    4545        /*M* LEX_STACKS  -- Parser stack and redefs for typed stack elements */
        2+    4546        /*T***********************************************************/
        3+    4547        /*T*                                                         */
        4+    4548        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+    4549        /*T*                                                         */
        6+    4550        /*T***********************************************************/
        7+    4551
        8+    4552        /* Communications between LEX, PARSER, & SEMANTICS */
        9+    4553
       10+    4554        %EQU LX_MAX = 2000 ;                                      /*#29032*/
       11+    4555        %EQU LA_MAX = 70;
       12+    4556
       13+    4557
       14+    4558        %MACRO LA_STK_INFO(LVL=2);
       15+    4559            %(LVL)      ID      UBIN HALF UNAL,    /* identification number */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:464  
       16+    4560            %(LVL)      B       UNAL,
       17+    4561              %(LVL+1)      ERROR   BOOLEAN,
       18+    4562              %(LVL+1)      ROUND   BOOLEAN,
       19+    4563              %(LVL+1)      INTEGER BOOLEAN,
       20+    4564              %(LVL+1)      ALL     BOOLEAN,
       21+    4565              %(LVL+1)      NEGATE  BOOLEAN,
       22+    4566              %(LVL+1)      *       BIT (1) ,
       23+    4567              %(LVL+1)      HIGH_LEV BOOLEAN,
       24+    4568              %(LVL+1)      *       BIT (11) ,
       25+    4569            %(LVL)      FLAGS REDEF B BIT(18) UNAL,
       26+    4570
       27+    4571            %(LVL)      ST$     PTR,               /* PTR TO ST ITEM (EG, SCALAR)*/
       28+    4572            %(LVL)      DNT$    PTR,               /* PTR TO LEXEME ITEM (IN DNT)*/
       29+    4573            %(LVL)      SYMBOL  SBIN WORD,    /* TERMINAL NUMBER (IE, RW#)  */
       30+    4574            %(LVL)      TYPE    UBIN WORD,    /* TYPE (EG, %TYI, %TYA, ETC) */
       31+    4575            %(LVL)      LINE    UBIN WORD,    /* LINE# OF THIS OCCURRENCE    */
       32+    4576            %(LVL)      COLUMN  UBIN WORD,    /* COL # OF THIS OCCURRENCE    */
       33+    4577
       34+    4578        %MEND;
       35+    4579
       36+    4580    1   DCL 1 LA_ITEM  BASED ALIGNED,
       37+    4581              %LA_STK_INFO;
       38+    4600    1         2 LINK    UBIN WORD ;   /* MAKES LOOK_AHEAD CIRCULAR  */
       39+    4601
       40+    4602    1   DCL 1 LX_ITEM BASED ALIGNED,
       41+    4603              %LA_STK_INFO;
       42+    4622    1         2 LINK     PTR;
       43+    4623
       44+    4624        %EQU LENGTH_LX_ITEM = 8;   /* length of the LX_ITEM structure */
       45+    4625
       46+    4626        %MACRO DCL_AUTO_LX_ITEM (@NAME = );
       47+    4627
       48+    4628          DCL 1 @NAME DALIGNED,
       49+    4629                2 * (0:%(LENGTH_LX_ITEM - 1)) SBIN WORD ALIGNED;
       50+    4630
       51+    4631        %MEND;
       52+    4632
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:465  
       53+    4633
       54+    4634        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:466  
       55+    4635
       56+    4636        /* Data structures which represent the abstract syntax tree */
       57+    4637
       58+    4638        /*V* Several conventions have been adopted for abstract syntax tree
       59+    4639             data structures:
       60+    4640
       61+    4641              1) ID => Each node in the abstract syntax tree must contain
       62+    4642                         an ID field which uniquely identifies the node.
       63+    4643                         The ID field must be the first 18 bits of the
       64+    4644                         structure.  Terminal symbols, for example, have an
       65+    4645                         ID of %TERMINAL(0).  LX_LIST nodes have an
       66+    4646                         ID of %LX_LIST.
       67+    4647
       68+    4648              2) LENGTH => Each node in the abstract syntax tree is
       69+    4649                         "LENGTHW(LX_ITEM)" words (8) by convention.
       70+    4650                         This is to allow manipulation of these nodes on
       71+    4651                         the semantic stack without regard to node type.
       72+    4652                         If you define a structure which differs in length
       73+    4653                         from this convention, you must be responsible for
       74+    4654                         all manipulations of this structure.  In particular,
       75+    4655                         it must not be referenced on the semantic stack.
       76+    4656
       77+    4657              3) LINK => Most abstract syntax tree nodes may be linked into
       78+    4658                         lists.  By convention, the link to the next node in
       79+    4659                         the list must be kept in the last word of the node.
       80+    4660                         This allows common routines to manipulate lists
       81+    4661                         without regard to the node type on the list.
       82+    4662
       83+    4663              4) LIST NODE => One universal list structure has been defined -
       84+    4664                         LX_LIST.  This list structure should be used
       85+    4665                         whenever possible, so that common list processing can be
       86+    4666                         performed on abstract syntax tree nodes.
       87+    4667
       88+    4668              5) B.ERROR => Most nodes in the abstract syntax tree contain
       89+    4669                         an error bit, B.ERROR.  This flag signifies that
       90+    4670                         a syntactic or semantic error has already occurred,
       91+    4671                         so further cascaded semantic errors may result.
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:467  
       92+    4672                         This bit is propagated up the semantic tree.  As
       93+    4673                         each semantic error is detected, the associated error
       94+    4674                         message should be suppressed, although semantic
       95+    4675                         recovery must still be initiated.
       96+    4676        */
       97+    4677
       98+    4678
       99+    4679        /*V*
      100+    4680            All access to the abstract syntax tree is provided through the
      101+    4681            "semantic stack".  In particular, semantic actions have access
      102+    4682            to abstract syntax tree nodes for each terminal and non-terminal
      103+    4683            on the right hand side of each reduction.  This is accomplished
      104+    4684            by referring to the LX_STK stack items down from the value of
      105+    4685            LX_TOP.  For example, the production
      106+    4686
      107+    4687                         P ::= A B C {ACTION}
      108+    4688
      109+    4689            will be represented on the LX_STK when the semantic action
      110+    4690            "ACTION" is executed by
      111+    4691
      112+    4692                         C <- LX_TOP
      113+    4693                         B <- LX_TOP - 1
      114+    4694                         A <- LX_TOP - 2
      115+    4695
      116+    4696            Each terminal symbol on the right hand side of a production is
      117+    4697            represented by an abstract syntax tree node with an ID of %TERMIANL.
      118+    4698            Non-terminals may have an arbitrary type of node, since the creation
      119+    4699            of the node for each non-terminal is handled by the semantic actions.
      120+    4700
      121+    4701            Propagation of abstract syntax tree nodes up the tree  is  done by
      122+    4702            using the left-most abstract syntax tree node on the right hand side
      123+    4703            of the production for the node associated with the left hand side
      124+    4704            non-terminal.  In the above example, the node associated with "A"
      125+    4705            is at LX_STK(LX_TOP - 2) after the semantic action completes will
      126+    4706            be used for the non-terminal "P".  It is the responsibility of the
      127+    4707            semantic actions to set up the nodes for non-terminals, so that
      128+    4708            node propagation will occur correctly.  Note that if the node for the
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:468  
      129+    4709            left-most symbol on the right hand side is not changed, it is propagated
      130+    4710            up the tree for the left hand side non-terminal.
      131+    4711
      132+    4712            Propagation of information up the abstract syntax tree is the method
      133+    4713            of choice for semantic analysis.  As semantic checking and information
      134+    4714            gathering is completed for each portion of the tree, the internal
      135+    4715            language for this section of the program is then generated.
      136+    4716
      137+    4717        */
      138+    4718
      139+    4719
      140+    4720
      141+    4721        /* LX_ITEM.ID values for distinguishing tree nodes */
      142+    4722
      143+    4723        %EQU LX_TERMINAL   = 0;   /* for all terminal symbols returned by LEX */
      144+    4724        %EQU LX_LARGE      = 1;
      145+    4725        %EQU LX_LIST       = 2;
      146+    4726        %EQU LX_REC_DECL   = 3;
      147+    4727        %EQU NO_EXCEPTION_CLAUSE = 0;
      148+    4728        %EQU LX_ETT_ITEM   = 4;
      149+    4729        %EQU BINARY_OP     = 5;
      150+    4730        %EQU UNARY_OP      = 6;
      151+    4731        %EQU ILS_LIST      = 7;
      152+    4732        %EQU COMPUTE_STMT  = 8;
      153+    4733        %EQU ADD_STMT      = 9;
      154+    4734        %EQU SUBTRACT_STMT = 10;
      155+    4735        %EQU MULTIPLY_STMT = 11;
      156+    4736        %EQU DIVIDE_STMT   = 12;
      157+    4737        %EQU DEFERED_QUAL_ID = 13;
      158+    4738        %EQU STRING_STMT = 14;
      159+    4739        %EQU UNSTRING_STMT = 15;
      160+    4740        %EQU CALL_STMT = 16;
      161+    4741        %EQU READ_STMT = 17;
      162+    4742        %EQU WRITE_STMT = 18;
      163+    4743        %EQU DELETE_STMT = 19;
      164+    4744        %EQU REWRITE_STMT = 20;
      165+    4745        %EQU START_STMT = 21;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:469  
      166+    4746
      167+    4747         %EQU LX_REPORT_REC = 22;
      168+    4748         %EQU DEFERED_ACTION = 23;
      169+    4749         %EQU DEFERED_IDENTIFIER = 24;
      170+    4750         %EQU DEFERED_SUM_CLAUSE_LIST = 25;
      171+    4751         %EQU DEFERED_SUM_CLAUSE = 26;
      172+    4752         %EQU DEFERED_ID_TREE = 27;
      173+    4753
      174+    4754         %EQU MIN_DEFERED_ACTION_SIZE = 6;
      175+    4755         %EQU REPORT_REC_MAX_FIELD = 14;
      176+    4756         %EQU NO_REPORT_TYPE = 0;
      177+    4757         %EQU REPORT_HEADING = 1;
      178+    4758         %EQU PAGE_HEADING = 2;
      179+    4759         %EQU CONTROL_HEADING = 3;
      180+    4760         %EQU CONTROL_HEADING_FINAL = 4;
      181+    4761         %EQU TYPE_DETAIL = 5;
      182+    4762         %EQU CONTROL_FOOTING = 6;
      183+    4763         %EQU CONTROL_FOOTING_FINAL =7;
      184+    4764         %EQU PAGE_FOOTING = 8;
      185+    4765         %EQU REPORT_FOOTING = 9;
      186+    4766         %EQU REPORT_LINE_INT = 1;
      187+    4767         %EQU REPORT_LINE_PLUS = 2;
      188+    4768         %EQU REPORT_LINE_NEXT_PAGE = 3;
      189+    4769         %EQU NEXT_GROUP_INT = 1;
      190+    4770         %EQU NEXT_GROUP_PLUS = 2;
      191+    4771         %EQU NEXT_GROUP_NEXT_PAGE = 3;
      192+    4772         %EQU PRE_NEXT_PAGE = 31;
      193+    4773         %EQU REP_ACT_ID         = 0;
      194+    4774         %EQU REP_ACT_ID_REF     = 1;
      195+    4775         %EQU REP_ACT_ID_SUB     = 2;
      196+    4776         %EQU REP_ACT_ID_SUB_REF = 3;
      197+    4777
      198+    4778         %EQU LX_CD_INPUT      = 28;
      199+    4779         %EQU LX_CD_OUTPUT     = 29;
      200+    4780         %EQU LX_CD_I_O        = 30;
      201+    4781         %EQU CD_INPUT_OPTION  = 11;
      202+    4782         %EQU CD_OUTPUT_OPTION = 6;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:470  
      203+    4783         %EQU CD_I_O_OPTION    = 6;
      204+    4784
      205+    4785
      206+    4786
      207+    4787        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:471  
      208+    4788        /* Correspondence of non-terminals with abstract syntax tree nodes */
      209+    4789
      210+    4790        /* DATA DIVISION NODES
      211+    4791
      212+    4792        <ACCESS_mode_is>
      213+    4793        <AREA_AREAS_opt>             => LX_TERMINAL
      214+    4794        <AREA_opt>                   => LX_TERMINAL
      215+    4795        <ARE_opt>                    => LX_TERMINAL
      216+    4796        <ASCENDING_or_DESCENDING>    => LX_TERMINAL
      217+    4797        <AT_opt>                     => LX_TERMINAL
      218+    4798        <BY_opt>                     => LX_TERMINAL
      219+    4799        <CATALOG-NAME_is>
      220+    4800        <CD_I-O_clause>
      221+    4801        <CD_I-O_clause_list>
      222+    4802        <CD_input_clause>
      223+    4803        <CD_input_clause_list>
      224+    4804        <CD_mode_clause>
      225+    4805        <CD_output_clause>
      226+    4806        <CD_output_clause_list>
      227+    4807        <CHARACTERS_opt>             => LX_TERMINAL
      228+    4808        <CHARACTER_opt>              => LX_TERMINAL
      229+    4809        <CLOSE_opt>                  => LX_TERMINAL
      230+    4810        <COLLATING_opt>
      231+    4811        <COMMA_DECIMAL-POINT>
      232+    4812        <CONTAINS_opt>               => LX_TERMINAL
      233+    4813        <CONTROL_is>
      234+    4814        <EVERY_opt>                  => LX_TERMINAL
      235+    4815        <FD_access_clause>
      236+    4816        <FD_clause>
      237+    4817        <FD_clause_list>
      238+    4818        <FD_clause_list_opt>
      239+    4819        <FILE_opt>                   => LX_TERMINAL
      240+    4820        <FILLER_opt>                 => LX_TERMINAL
      241+    4821        <FOR_opt>                    => LX_TERMINAL
      242+    4822        <FROM_opt>                   => LX_TERMINAL
      243+    4823        <IBM_channel_phrase>
      244+    4824        <INDICATE_opt>               => LX_TERMINAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:472  
      245+    4825        <INITIAL_opt>                => LX_TERMINAL
      246+    4826        <IN_opt>                     => LX_TERMINAL
      247+    4827        <IS_ARE_opt>                 => LX_TERMINAL
      248+    4828        <IS_CONTAINS_opt>            => LX_TERMINAL
      249+    4829        <IS_opt>                     => LX_TERMINAL
      250+    4830        <I_O_clause>
      251+    4831        <I_O_clause_list>
      252+    4832        <I_O_control_clause>
      253+    4833        <I_O_techniques>
      254+    4834        <KEY_opt>                    => LX_TERMINAL
      255+    4835        <LIMIT_is_opt>
      256+    4836        <LINES_opt>                  => LX_TERMINAL
      257+    4837        <LINE_LINES_opt>             => LX_TERMINAL
      258+    4838        <MESSAGE_opt>                => LX_TERMINAL
      259+    4839        <MODE_opt>                   => LX_TERMINAL
      260+    4840        <NEXT_PAGE>                  => LX_TERMINAL (NEXT)
      261+    4841        <NUMBER_opt>                 => LX_TERMINAL
      262+    4842        <OCCURS_INDEX_clause>        => LX_LIST OF LX_TERMINAL(name)
      263+    4843        <OCCURS_KEY_clause>          => LX_LIST (2 nodes)
      264+    4844                                           Node 1) LX_TERMINAL ( ASC/DES)
      265+    4845                                           Node 2) <qualified_id_list>
      266+    4846        <OF_opt>                     => LX_TERMINAL
      267+    4847        <OF_or_IN>                   => LX_TERMINAL
      268+    4848        <ON_opt>                     => LX_TERMINAL
      269+    4849        <OPERATIONAL_opt>            => LX_TERMINAL
      270+    4850        <OPTIONAL_opt>               => LX_TERMINAL
      271+    4851        <PROCEDURE_swap_div>
      272+    4852        <PROGRAM_opt>                => LX_TERMINAL
      273+    4853        <RECORDS_CHARS_opt>          => LX_TERMINAL
      274+    4854        <RECORD_RECORDS_IS_ARE>
      275+    4855        <RECORD_SORT_MERGE_opt>      => LX_TERMINAL
      276+    4856        <SD_clause>
      277+    4857        <SD_clause_list>
      278+    4858        <SD_clause_list_opt>
      279+    4859        <SIGN_opt>                   => LX_TERMINAL
      280+    4860        <SIZE_opt>                   => LX_TERMINAL
      281+    4861        <STATUS_opt>                 => LX_TERMINAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:473  
      282+    4862        <SYMBOLIC_opt>               => LX_TERMINAL
      283+    4863        <SYSTEM_GS>
      284+    4864        <TAPE_opt>                   => LX_TERMINAL
      285+    4865        <TIMES_opt>                  => LX_TERMINAL
      286+    4866        <TO_opt>                     => LX_TERMINAL
      287+    4867        <VALUE_IS>                   => LX_TERMINAL (VALUE,VALUES)
      288+    4868        <VFC_clause>
      289+    4869        <WHEN_opt>                   => LX_TERMINAL
      290+    4870        <WITH_opt>                   => LX_TERMINAL
      291+    4871        <WS_LINKAGE_CONSTANT>        => LX_TERMINAL
      292+    4872        <WS_LINKAGE_CONSTANT_section> => LX_TERMINAL (WS,LINKAGE,CONSTANT)
      293+    4873        <access_clause>
      294+    4874        <alpha_constant>             => LX_TERMINAL
      295+    4875        <alpha_constant_no_ALL>      => LX_TERMINAL
      296+    4876        <alphabet_also_phrases>
      297+    4877        <alphabet_literal_spec>
      298+    4878        <alphabet_literal_specs>
      299+    4879        <alphabet_name>
      300+    4880        <alphabet_name_common>
      301+    4881        <alphabet_phrase>
      302+    4882        <alphabet_type>
      303+    4883        <alternate_record_clause>
      304+    4884        <arith_expr>
      305+    4885        <author_para_opt>
      306+    4886        <basic_access_type>
      307+    4887        <basic_mnemonic_name>
      308+    4888        <basic_select_clause>
      309+    4889        <blank_clause>               => LX_TERMINAL (BLANK)
      310+    4890        <block_clause>
      311+    4891        <block_phrase>
      312+    4892        <cd_name>
      313+    4893        <code_set_clause>
      314+    4894        <collating_sequence>
      315+    4895        <common_initial_choice>
      316+    4896        <common_initial_opt>
      317+    4897        <communication_entry>
      318+    4898        <communication_entry_list>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:474  
      319+    4899        <communication_section>
      320+    4900        <comp_default>
      321+    4901        <computer_name>
      322+    4902        <computer_special_opt>
      323+    4903        <config_i_o>
      324+    4904        <config_section>
      325+    4905        <console_phrase>
      326+    4906        <control_div>
      327+    4907        <control_div_opt>
      328+    4908        <currency_phrase>
      329+    4909        <data_div>
      330+    4910        <data_div_opt>
      331+    4911        <data_name>                  => LX_TERMINAL
      332+    4912        <data_name_filler_list>
      333+    4913        <data_name_list>             => LX_LIST OF LX_TERMINAL
      334+    4914        <data_record_clause>
      335+    4915        <date_compiled_para_opt>
      336+    4916        <date_written_para_opt>
      337+    4917        <dd_clause>                  => LX_LARGE to LX_REC_DECL
      338+    4918        <dd_clauses>                 => LX_LARGE to LX_REC_DECL
      339+    4919        <decimal_phrase>
      340+    4920        <default_clause>
      341+    4921        <default_clause_list>
      342+    4922        <default_section>
      343+    4923        <default_section_opt>
      344+    4924        <delimiter_clause>
      345+    4925        <depending_on_qual_id_opt>   => <qualified_id> or LX_TERMINAL (EMPTY)
      346+    4926        <dn_or_filler_opt>           => LX_TERMINAL (FILLER or name)
      347+    4927        <end_key_clause>
      348+    4928        <end_program>
      349+    4929        <end_program_list>
      350+    4930        <environ_div>
      351+    4931        <environ_div_opt>
      352+    4932        <external_clause>            => LX_TERMINAL (EXTERNAL)
      353+    4933        <external_program>
      354+    4934        <factor>
      355+    4935        <file_control_entry>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:475  
      356+    4936        <file_control_entry_list>
      357+    4937        <file_control_entry_list_opt>
      358+    4938        <file_description_entry>
      359+    4939        <file_description_entry_list>
      360+    4940        <file_name>                  => LX_TERMINAL
      361+    4941        <file_name_list>
      362+    4942        <file_name_position>
      363+    4943        <file_name_position_list>
      364+    4944        <file_section>
      365+    4945        <file_status_clause>
      366+    4946        <global_clause>              => LX_TERMINAL (GLOBAL)
      367+    4947        <ident_div>
      368+    4948        <ident_info_opt>
      369+    4949        <ident_num-lit>
      370+    4950        <identifier>
      371+    4951        <identifier_list>
      372+    4952        <input_output_section>
      373+    4953        <installation_para_opt>
      374+    4954        <int_or_int-TO-int>          => LX_LIST of LX_TERMINAL(per int)
      375+    4955        <integer>                    => LX_TERMINAL
      376+    4956        <integer_list>               => LX_LIST OF LX_TERMINAL
      377+    4957        <internal_program>
      378+    4958        <is_data_name_filler>
      379+    4959        <justified_clause>           => LX_TERMINAL (RIGHT,EMPTY)
      380+    4960        <label_clause>
      381+    4961        <label_name>
      382+    4962        <label_name_list>
      383+    4963        <label_type>
      384+    4964        <lead_trail>                 => LX_TERMINAL ( LEADING,TRAILING)
      385+    4965        <level_no>                   => LX_TERMINAL (number or number_or_para)
      386+    4966        <linage_bottom>
      387+    4967        <linage_clause>
      388+    4968        <linage_footing>
      389+    4969        <linage_prefix>
      390+    4970        <linage_top>
      391+    4971        <line_number_clause>
      392+    4972        <literal>                    => LX_TERMINAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:476  
      393+    4973        <literal_thru>               => LX_LIST (1 or 2 nodes)
      394+    4974                                          node 1) LX_TERMINAL (first literal)
      395+    4975                                          node 2, if any) LX_TERMINAL (second literal)
      396+    4976        <literal_thru_list>          => LX_LIST OF <literal_thru>
      397+    4977        <memory_size>
      398+    4978        <message_date_clause>
      399+    4979        <message_time_clause>
      400+    4980        <mnemonic_name>
      401+    4981        <obj_computer_clause>
      402+    4982        <obj_computer_clauses>
      403+    4983        <object_computer_opt>
      404+    4984        <off_phrase>
      405+    4985        <on_off_phrase>
      406+    4986        <on_phrase>
      407+    4987        <on_rerun_file_opt>
      408+    4988        <org_with_clause>
      409+    4989        <organization_clause>
      410+    4990        <organization_relative>
      411+    4991        <padding_clause>
      412+    4992        <page_format_clause>
      413+    4993        <page_format_clause_list>
      414+    4994        <page_phrase>
      415+    4995        <picture_clause>             => LX_TERMINAL (picture_string)
      416+    4996        <privacy_phrase_opt>
      417+    4997        <proc_div>
      418+    4998        <proc_div_opt>
      419+    4999        <procedure_div_using>
      420+    5000        <prog_col_sequence>
      421+    5001        <program>
      422+    5002        <program_name>               => LX_TERMINAL
      423+    5003        <pwr>
      424+    5004        <qualified_id>               => LX_LIST OF LX_TERMINAL
      425+    5005        <qualified_id_integer>
      426+    5006        <qualified_id_list>          => LX_LIST OF <qualified_id>
      427+    5007        <qualified_id_lit>           => LX_TERMINAL or LX_LIST OF LX_ITEM
      428+    5008        <queue_type>
      429+    5009        <record_contains_clause>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:477  
      430+    5010        <record_delimiter_name>
      431+    5011        <record_description_entries> => LX_LARGE to LX_REC_DECL
      432+    5012        <record_description_entry>   => LX_LARGE to LX_REC_DECL
      433+    5013        <record_key_clause>
      434+    5014        <record_varying_from_clause_opt>
      435+    5015        <redefines_clause>           => LX_TERMINAL
      436+    5016        <reference_modification>
      437+    5017        <relative_key_clause>
      438+    5018        <renames_clause>             => LX_LIST of <qualified_id> (1 or 2 nodes)
      439+    5019        <report_clause>
      440+    5020        <report_desc_clause>
      441+    5021        <report_desc_clause_list>
      442+    5022        <report_description_entries>
      443+    5023        <report_description_entry>
      444+    5024        <report_entry>
      445+    5025        <report_entry_clause>
      446+    5026        <report_entry_clause_list>
      447+    5027        <report_entry_list>
      448+    5028        <report_name>
      449+    5029        <report_name_list>
      450+    5030        <report_section>
      451+    5031        <report_type>
      452+    5032        <rerun_every_clause>
      453+    5033        <reserve_clause>
      454+    5034        <section>
      455+    5035        <sections>
      456+    5036        <security_para_opt>
      457+    5037        <segment_limit>
      458+    5038        <select_clause>
      459+    5039        <select_clause_list>
      460+    5040        <separate_character_opt>     => LX_TERMINAL (EMPTY,SEPARATE)
      461+    5041        <sign_clause>                => LX_LIST (2 NODES)
      462+    5042                                          node 1) LX_TERMINAL (LEADING,TRAILING)
      463+    5043                                          node 2) LX_TERMINAL (SEPARATE,EMPTY)
      464+    5044        <sign_is_opt>                => LX_TERMINAL (SIGN,EMPTY)
      465+    5045        <source_computer_opt>
      466+    5046        <special_names_clause>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:478  
      467+    5047        <special_names_clause_list>
      468+    5048        <special_names_opt>
      469+    5049        <status_key_clause>
      470+    5050        <sub_schema_section>
      471+    5051        <subscript_list>
      472+    5052        <subscripts>
      473+    5053        <substitution_section>
      474+    5054        <substitution_section_opt>
      475+    5055        <sum_reset_clause_opt>
      476+    5056        <sum_upon_clause_opt>
      477+    5057        <switch_phrase>
      478+    5058        <symbolic_char_phrase>
      479+    5059        <symbolic_char_phrases>
      480+    5060        <symbolic_phrase>
      481+    5061        <sync_clause>                => LX_TERMINAL ( LEFT,RIGHT,EMPTY)
      482+    5062        <sysin_phrase>
      483+    5063        <sysout_phrase>
      484+    5064        <tape_option>
      485+    5065        <tape_option_list>
      486+    5066        <term>
      487+    5067        <text_length_clause>
      488+    5068        <unary>
      489+    5069        <usage_clause>               => LX_TERMINAL (COMP..DISPLAY)
      490+    5070        <usage_is>
      491+    5071        <usage_type>                 => LX_TERMINAL (COMP..DISPLAY)
      492+    5072        <value_of_clause>
      493+    5073        <value_of_name>
      494+    5074        <value_of_name_list>
      495+    5075
      496+    5076        */
      497+    5077        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:479  
      498+    5078        /* PROCEDURE DIVISION NODES
      499+    5079
      500+    5080        <ADD_body>
      501+    5081        <ADD_to_no_round>
      502+    5082        <ADVANCING_opt>              => LX_TERMINAL
      503+    5083        <ALL_opt>                    => LX_TERMINAL
      504+    5084        <ALL_or_LEADING>             => LX_TERMINAL
      505+    5085        <ALL_or_LEADING_or_FIRST>    => LX_TERMINAL
      506+    5086        <ALL_set_phrase>
      507+    5087        <ALL_set_phrase_opt>
      508+    5088        <ALTER_item>                 => LX_LIST(2) of <procedure_name>
      509+    5089        <ALTER_list>                 => LX_LIST OF <ALTER_item>
      510+    5090        <AND_condition>
      511+    5091        <AND_list_cond_2>
      512+    5092        <ASCENDING_or_DESCENDING>    => LX_TERMINAL
      513+    5093        <ASC_DES_phrase>
      514+    5094        <ASC_DES_phrases>
      515+    5095        <AT_END_phrase>              => ILS_LIST
      516+    5096        <AT_END_phrase_opt>          => LX_TERMINAL(EMPTY) or ILS_LIST
      517+    5097        <AT_opt>                     => LX_TERMINAL
      518+    5098        <BEFORE_AFTER>               => LX_TERMINAL
      519+    5099        <BEGINNING_ENDING_ALL>       => LX_TERMINAL
      520+    5100        <BEGINNING_ENDING_opt>       => LX_TERMINAL
      521+    5101        <BY_opt>                     => LX_TERMINAL
      522+    5102        <CALL_using_item>
      523+    5103        <CALL_using_list>
      524+    5104        <CLOSE_file_list>
      525+    5105        <CLOSE_options_opt>
      526+    5106        <COLLATING_opt>              => LX_TERMINAL
      527+    5107        <CONTROL_swap_div>
      528+    5108        <COUNT_in_phrase_opt>
      529+    5109        <CURRENCY_opt>               => LX_TERMINAL
      530+    5110        <CURRENT_opt>                => LX_TERMINAL
      531+    5111        <DATA_opt>                   => LX_TERMINAL
      532+    5112        <DELIMITER_in_phrase_opt>
      533+    5113        <DISABLE_type>
      534+    5114        <DISPLAY_options>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:480  
      535+    5115        <DIVIDE_body>                => DIVIDE_STMT
      536+    5116        <DIVIDE_no_round>            => DIVIDE_STMT
      537+    5117        <DML_accept>
      538+    5118        <DML_connect>
      539+    5119        <DML_disconnect>
      540+    5120        <DML_erase>
      541+    5121        <DML_find>
      542+    5122        <DML_finish>
      543+    5123        <DML_get>
      544+    5124        <DML_modify>
      545+    5125        <DML_ready>
      546+    5126        <DML_record_selection_expr>
      547+    5127        <DML_set>
      548+    5128        <DML_statement>
      549+    5129        <DML_store>
      550+    5130        <DML_use>
      551+    5131        <EOP_phrase>
      552+    5132        <EVAL_expression>
      553+    5133        <EVAL_expression_list>
      554+    5134        <EVAL_when_item>
      555+    5135        <EVAL_when_list>
      556+    5136        <EXAMINE_type>
      557+    5137        <EXCEPTION_ERROR>            => LX_TERMINAL
      558+    5138        <FILE_VOLUME>                => LX_TERMINAL
      559+    5139        <FIRST_NEXT>                 => LX_TERMINAL
      560+    5140        <FOR_opt>                    => LX_TERMINAL
      561+    5141        <GLOBAL_opt>                 => LX_TERMINAL
      562+    5142        <IDENTIFICATION_swap_div>
      563+    5143        <INCLUDING_ONLY>             => LX_TERMINAL
      564+    5144        <INITIAL_opt>                => LX_TERMINAL
      565+    5145        <INPUT_OUTPUT_EXTEND>        => LX_TERMINAL
      566+    5146        <INPUT_OUTPUT_opt>           => LX_TERMINAL
      567+    5147        <INSPECT_1>                  => LX_LIST of <identifier> & <INSP_1_for_list>
      568+    5148        <INSP_1_all_lead>            => LX_LIST of LX_LIST of <ident_alpha_list_no_ALL>
      569+    5149                                                            & <INSP_1_before_after_opt>
      570+    5150        <INSP_1_before_after_opt>    => LX_TERMINAL (empty) or LX_LIST of LX_LIST (1 or 2)
      571+    5151        <INSP_1_for_list>            => LX_LIST of LX_LIST of LX_TERMINAL (CHARACTERS, ALL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:481  
              5151        or LEADING)
      572+    5152                                                            & <INSP_1_before_after_opt>
      573+    5153                                                           or <INSP_1_all_lead>
      574+    5154                                                            & [<identifier>]
      575+    5155        <INSP_2_first>               => LX_LIST of LX_LIST of <ident_alpha_lit_no_ALL>
      576+    5156                                                            & <ident_alpha_lit_no_ALL>
      577+    5157                                                            & <INSP_1_before_after_opt>
      578+    5158        <INSP_2_replace>             => LX_LIST of LX_LIST of LX_TERMINAL (CHARACTERS)
      579+    5159                                                            & <ident_alpha_lit_no_ALL>
      580+    5160                                                            & <INSP_1_before_after_opt>
      581+    5161                                                           or LX_TERMINAL (ALL, ...)
      582+    5162                                                            & <INSP_2_first>
      583+    5163        <INSP_after>                 => LX_LIST of LX_TERMINAL & <ident_alpha_list_no_all>
      584+    5164                                                   (AFTER)
      585+    5165        <INSP_before>                => LX_LIST of LX_TERMINAL & <ident_alpha_list_no_all>
      586+    5166                                                   (BEFORE)
      587+    5167        <INVALID_clause>             => ILS_LIST
      588+    5168        <IN_opt>                     => LX_TERMINAL
      589+    5169        <IS_opt>                     => LX_TERMINAL
      590+    5170        <KEY_opt>                    => LX_TERMINAL
      591+    5171        <LINE_LINES_opt>             => LX_TERMINAL
      592+    5172        <LINE_opt>                   => LX_TERMINAL
      593+    5173        <MEMBERSHIP_opt>             => LX_TERMINAL
      594+    5174        <MESSAGE_SEGMENT>            => LX_TERMINAL
      595+    5175        <MESSAGE_opt>                => LX_TERMINAL
      596+    5176        <MULTIPLY_body>              => MULTIPLY_STMT
      597+    5177        <NEXT_SENTENCE>              => LX_TERMINAL(NEXT)
      598+    5178        <NEXT_opt>                   => LX_TERMINAL
      599+    5179        <NOT_condition>
      600+    5180        <NO_DATA_clause>             => ILS_LIST
      601+    5181        <OF_opt>                     => LX_TERMINAL
      602+    5182        <OF_or_IN>                   => LX_TERMINAL
      603+    5183        <ON_EXCEPTION_phrase>        => ILS_LIST
      604+    5184        <ON_opt>                     => LX_TERMINAL
      605+    5185        <OPEN_body>
      606+    5186        <OPEN_file_name_rew_list>
      607+    5187        <OPEN_no_rew_opt>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:482  
      608+    5188        <OPEN_type>
      609+    5189        <ORDER_opt>                  => LX_TERMINAL
      610+    5190        <OR_opt>                     => LX_TERMINAL
      611+    5191        <PERFORM_2>                  => LX_TERMINAL or LX_ETT_ITEM
      612+    5192        <PERFORM_3>                 => LX_LIST(2) of LX_TERMINAL(BEFORE,AFTER) & <condition
              5192        >
      613+    5193        <PERFORM_4>                 => LX_LIST(2) of LX_TERMINAL(BEFORE, AFTER) & <VARYING_
              5193        body>
      614+    5194        <PERFORM_proc_phrase>        => LX_LIST of <procedure_name>
      615+    5195        <PROCEED_TO_opt>             => LX_TERMINAL (PROCEED, empty)
      616+    5196        <PROCESSING_opt>             => LX_TERMINAL
      617+    5197        <READ_key_phrase_opt>
      618+    5198        <RECORD_opt>                 => LX_TERMINAL
      619+    5199        <REEL_UNIT_FILE_opt>         => LX_TERMINAL
      620+    5200        <REFERENCES_opt>             => LX_TERMINAL
      621+    5201        <RETRIEVAL_UPDATE_LOAD>      => LX_TERMINAL
      622+    5202        <SEARCH_EQUAL>
      623+    5203        <SEARCH_WHEN_1>
      624+    5204        <SEARCH_WHEN_2>
      625+    5205        <SEARCH_condition_2>
      626+    5206        <SEND_advancing_type>
      627+    5207        <SEND_rep_line_opt>
      628+    5208        <SEND_with_phrase>
      629+    5209        <SET_body>
      630+    5210        <SET_body_3>
      631+    5211        <SET_body_item_3>
      632+    5212        <SORT_MERGE_output_GIVING>
      633+    5213        <SORT_input>
      634+    5214        <STANDARD_opt>               => LX_TERMINAL
      635+    5215        <START_key_opt>
      636+    5216        <START_rel_op>
      637+    5217        <STRING_delimiter>           => LX_ETT_ITEM or LX_TERMINAL
      638+    5218        <STRING_list>                => LX_LIST of LX_LIST of 2 nodes
      639+    5219                                            1) <ident_alpha_list_no_ALL_list>
      640+    5220                                            2) <STRING_delimiter>
      641+    5221        <SUBTRACT_body>              => SUBTRACT_STMT
      642+    5222        <SYSTEM_GS>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:483  
      643+    5223        <TERMINAL_opt>               => LX_TERMINAL
      644+    5224        <THAN_opt>                   => LX_TERMINAL
      645+    5225        <THEN_opt>                   => LX_TERMINAL
      646+    5226        <TO_opt>                     => LX_TERMINAL
      647+    5227        <UNSTRING_delim_list>
      648+    5228        <UNSTRING_delimited_phrase_opt>
      649+    5229        <UNSTRING_ident_list>
      650+    5230        <UNSTRING_ident_lit_phrase>
      651+    5231        <UNSTRING_tally_phrase_opt>
      652+    5232        <USE_debugging_list>
      653+    5233        <USE_debugging_list_opt>
      654+    5234        <USE_debugging_type>
      655+    5235        <USE_procedure_type>
      656+    5236        <USE_statement>
      657+    5237        <VARYING_SEARCH_phrase_opt>
      658+    5238        <VARYING_body>               => <VARYING_item>
      659+    5239        <VARYING_item>               => LX_LIST(4)
      660+    5240                                           1) LX_LIST OF LX_ETT_ITEM (identifier)
      661+    5241                                           2) LX_LIST of LX_ETT_ITEM or LX_TERMINAL (from)
      662+    5242                                           3) LX_LIST of LX_ETT_ITEM or LX_TERMINAL (by)
      663+    5243                                           4) LX_LIST of <condition>
      664+    5244        <WHEN_CONDITION_1>
      665+    5245        <WHEN_CONDITION_2>
      666+    5246        <WHEN_selection_item>
      667+    5247        <WHEN_selection_list>
      668+    5248        <WITH_opt>                   => LX_TERMINAL
      669+    5249        <WITH_ptr_ident_opt>
      670+    5250        <all_references_opt>
      671+    5251        <alpha_constant>             => LX_TERMINAL
      672+    5252        <alpha_constant_no_ALL>      => LX_TERMINAL
      673+    5253        <alpha_constant_no_ALL_no_zero> => LX_TERMINAL
      674+    5254        <alpha_constant_no_zero>     => LX_TERMINAL
      675+    5255        <alpha_or_arith>             => LX_TERMINAL or BINARY_OP or UNARY_OP or LX_ETT_ITEM
      676+    5256        <alphabet_name>              => LX_TERMINAL
      677+    5257        <alphabet_name_common>       => LX_TERMINAL
      678+    5258        <arith_expr>                 => LX_TERMINAL or BINARY_OP or UNARY_OP or LX_ETT_ITEM
      679+    5259        <basic_mnemonic_name>        => LX_TERMINAL
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:484  
      680+    5260        <basic_mnemonic_name_list>
      681+    5261        <basic_rel_op>               => BINARY_OP
      682+    5262        <before_after_advancing_opt>
      683+    5263        <cd_name>
      684+    5264        <class_sign>                 => LX_TERMINAL
      685+    5265        <collating_sequence>
      686+    5266        <collating_sequence_opt>
      687+    5267        <condition>
      688+    5268        <conditional_ADD>            => O1COM.ILS_LIST
      689+    5269        <conditional_CALL>           => O1COM.ILS_LIST
      690+    5270        <conditional_COMPUTE>        => O1COM.ILS_LIST
      691+    5271        <conditional_DELETE>         => O1COM.ILS_LIST
      692+    5272        <conditional_DIVIDE>         => O1COM.ILS_LIST
      693+    5273        <conditional_EVALUATE>       => O1COM.ILS_LIST
      694+    5274        <conditional_IF>             => O1COM.ILS_LIST
      695+    5275        <conditional_MULTIPLY>       => O1COM.ILS_LIST
      696+    5276        <conditional_READ>           => O1COM.ILS_LIST
      697+    5277        <conditional_RECEIVE>        => O1COM.ILS_LIST
      698+    5278        <conditional_RETURN>         => O1COM.ILS_LIST
      699+    5279        <conditional_REWRITE>        => O1COM.ILS_LIST
      700+    5280        <conditional_SEARCH>         => O1COM.ILS_LIST
      701+    5281        <conditional_START>          => O1COM.ILS_LIST
      702+    5282        <conditional_STRING>         => O1COM.ILS_LIST
      703+    5283        <conditional_SUBTRACT>       => O1COM.ILS_LIST
      704+    5284        <conditional_UNSTRING>       => O1COM.ILS_LIST
      705+    5285        <conditional_WRITE>          => O1COM.ILS_LIST
      706+    5286        <conditional_stmt>           => O1COM.ILS_LIST
      707+    5287        <control_div>
      708+    5288        <control_div_opt>
      709+    5289        <data_name>                  => LX_TERMINAL
      710+    5290        <data_name_list>             => LX_LIST OF LX_TERMINAL
      711+    5291        <data_name_list_opt>         => LX_TERMINAL (EMPTY) or LX_LIST OF LX_TERMINAL
      712+    5292        <data_name_opt>              => LX_TERMINAL
      713+    5293        <declaratives_opt>
      714+    5294        <delimited_ADD>              => O1COM.ILS_LIST
      715+    5295        <delimited_CALL>             => O1COM.ILS_LIST
      716+    5296        <delimited_COMPUTE>          => O1COM.ILS_LIST
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:485  
      717+    5297        <delimited_DELETE>           => O1COM.ILS_LIST
      718+    5298        <delimited_DIVIDE>           => O1COM.ILS_LIST
      719+    5299        <delimited_EVALUATE>         => O1COM.ILS_LIST
      720+    5300        <delimited_IF>               => O1COM.ILS_LIST
      721+    5301        <delimited_MULTIPLY>         => O1COM.ILS_LIST
      722+    5302        <delimited_PERFORM>          => O1COM.ILS_LIST
      723+    5303        <delimited_READ>             => O1COM.ILS_LIST
      724+    5304        <delimited_RECEIVE>          => O1COM.ILS_LIST
      725+    5305        <delimited_RETURN>           => O1COM.ILS_LIST
      726+    5306        <delimited_REWRITE>          => O1COM.ILS_LIST
      727+    5307        <delimited_SEARCH>           => O1COM.ILS_LIST
      728+    5308        <delimited_START>            => O1COM.ILS_LIST
      729+    5309        <delimited_STRING>           => O1COM.ILS_LIST
      730+    5310        <delimited_SUBTRACT>         => O1COM.ILS_LIST
      731+    5311        <delimited_UNSTRING>         => O1COM.ILS_LIST
      732+    5312        <delimited_WRITE>            => O1COM.ILS_LIST
      733+    5313        <delimited_stmt>             => O1COM.ILS_LIST
      734+    5314        <end_program>
      735+    5315        <end_program_list>
      736+    5316        <factor>                     => LX_TERMINAL or LX_ETT_ITEM or BINARY_OP or UNARY_OP
      737+    5317        <file_name>
      738+    5318        <file_name_list>
      739+    5319        <find_type>
      740+    5320        <from_ident_phrase_opt>
      741+    5321        <ident_alpha_lit_no_ALL>     => LX_TERMINAL or LX_ETT_ITEM
      742+    5322        <ident_alpha_lit_no_ALL_list>    => LX_LIST of <ident_alpha_lit_no_all>
      743+    5323        <ident_div>
      744+    5324        <ident_ident-round>          => LX_ETT_ITEM
      745+    5325        <ident_ident-round_list>     => LX_LIST OF LX_ETT_ITEM
      746+    5326        <ident_lit>                  => LX_TERMINA or LX_ETT_ITEM
      747+    5327        <ident_lit_list_no_ALL>      => LX_LIST of (LX_TERMINAL or LX_ETT_ITEM)
      748+    5328        <ident_lit_no_ALL>           => LX_TERMINAL or LX_ETT_ITEM
      749+    5329        <ident_no_refmod>            => LX_ETT_ITEM
      750+    5330        <ident_ident-round_no_refmod> => LX_ETT_ITEM
      751+    5331        <ident_num-lit>              => LX_TERMINAL or LX_ETT_ITEM
      752+    5332        <ident_num-lit_list>         => LX_LIST of (LX_TERMINAL or LX_ETT_ITEM)
      753+    5333        <ident_num-lit_opt>          => LX_TERMINAL (maybe EMPTY) or LX_ETT_ITEM
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:486  
      754+    5334        <identifier>                 => LX_ETT_ITEM
      755+    5335        <identifier_list>            => LX_LIST of <identifier>
      756+    5336        <identifier_list_opt>
      757+    5337        <identifier_opt>
      758+    5338        <imp_cond_stmts>
      759+    5339        <imperative_ACCEPT>          => O1COM.ILS_LIST
      760+    5340        <imperative_ADD>             => ADD_STMT
      761+    5341        <imperative_ALTER>           => O1COM.ILS_LIST
      762+    5342        <imperative_CALL>
      763+    5343        <imperative_CANCEL>
      764+    5344        <imperative_CLOSE>
      765+    5345        <imperative_COMPUTE>         => COMPUTE_STMT
      766+    5346        <imperative_CONTINUE>        => O1COM.ILS_LIST
      767+    5347        <imperative_DELETE>
      768+    5348        <imperative_DISABLE>
      769+    5349        <imperative_DISPLAY>         => O1COM.ILS_LIST
      770+    5350        <imperative_DIVIDE>          => DIVIDE_STMT
      771+    5351        <imperative_ENABLE>
      772+    5352        <imperative_ENTRY>
      773+    5353        <imperative_EXAMINE>
      774+    5354        <imperative_EXIT_PROGRAM>
      775+    5355        <imperative_GENERATE>
      776+    5356        <imperative_GO_TO>           => O1COM.ILS_LIST
      777+    5357        <imperative_INITIALIZE>
      778+    5358        <imperative_INITIATE>
      779+    5359        <imperative_INSPECT>         => INSPECT_1_STMT or INSPECT_2_STMT or
      780+    5360                                        INSPECT_3_STMT or INSPECT_4_STMT
      781+    5361        <imperative_MERGE>
      782+    5362        <imperative_MOVE>            => O1COM.ILS_LIST
      783+    5363        <imperative_MULTIPLY>        => MULTIPLY_STMT
      784+    5364        <imperative_OPEN>
      785+    5365        <imperative_PERFORM>         => O1COM.ILS_LIST
      786+    5366        <imperative_PURGE>
      787+    5367        <imperative_READ>
      788+    5368        <imperative_READ_LABEL>
      789+    5369        <imperative_RECEIVE>
      790+    5370        <imperative_RELEASE>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:487  
      791+    5371        <imperative_RETURN>
      792+    5372        <imperative_REWRITE>
      793+    5373        <imperative_SEND>
      794+    5374        <imperative_SET>
      795+    5375        <imperative_SORT>
      796+    5376        <imperative_START>
      797+    5377        <imperative_STOP>            => O1COM.ILS_LIST
      798+    5378        <imperative_STRING>
      799+    5379        <imperative_SUBTRACT>        => SUBTRACT_STMT
      800+    5380        <imperative_SUPPRESS>
      801+    5381        <imperative_TERMINATE>
      802+    5382        <imperative_UNSTRING>
      803+    5383        <imperative_WRITE>
      804+    5384        <imperative_WRITE_LABEL>
      805+    5385        <imperative_stmt>            => O1COM.ILS_LIST
      806+    5386        <imperative_stmts>           => ILS_LIST
      807+    5387        <init_data_types>
      808+    5388        <integer>                    => LX_TERMINAL
      809+    5389        <internal_program>
      810+    5390        <into_ident_phrase_opt>
      811+    5391        <less_than_rel_op>           => BINARY_OP
      812+    5392        <literal>                    => LX_TERMINAL
      813+    5393        <literal_list>               => LX_LIST OF LX_TERMINAL
      814+    5394        <literal_no_ALL>             => LX_TERMINAL
      815+    5395        <mnemonic_name>              => LX_TERMINAL
      816+    5396        <overflow_phrase>            => ILS_LIST
      817+    5397        <paragraph>                  => ILS_LIST
      818+    5398        <paragraph_def>              => LX_TERMINAL
      819+    5399        <paragraph_header>           => ILS_LIST
      820+    5400        <paragraph_ref>              => LX_TERMINAL
      821+    5401        <paragraphs>                 => ILS_LIST
      822+    5402        <privacy_on_words>
      823+    5403        <privacy_phrase>
      824+    5404        <privacy_phrase_list>
      825+    5405        <privacy_word>               => LX_TERMINAL
      826+    5406        <privacy_word_list>
      827+    5407        <proc_div>
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:488  
      828+    5408        <proc_section>
      829+    5409        <procedure_div_subset>
      830+    5410        <procedure_div_using>
      831+    5411        <procedure_name>             => LX_TERMINAL(ST$ points to PARA)
      832+    5412        <procedure_name_list>        => LX_LIST of <procedure_name>
      833+    5413        <procedure_name_or_blank>    => LX_TERMINAL
      834+    5414        <program_name>
      835+    5415        <program_procedure_division>
      836+    5416        <pwr>                        => LX_TERMINAL or LX_ETT_ITEM or BINARY_OP or UNARY_OP
      837+    5417        <qualified_id>               => LX_LIST OF LX_TERMINAL
      838+    5418        <qualified_id_list>          => LX_LIST OF <qualified_id>
      839+    5419        <reference_modification>     => LX_LIST of 1 or 2 <arith_expr>
      840+    5420        <relation_condition>         => BINARY_OP
      841+    5421        <relational_operator>        => BINARY_OP
      842+    5422        <report_name>
      843+    5423        <report_name_list>
      844+    5424        <retaining_clause>
      845+    5425        <retaining_type>             => LX_TERMINAL
      846+    5426        <retaining_type_list>
      847+    5427        <section_header>             => ILS_LIST
      848+    5428        <section_name>
      849+    5429        <section_use_header>
      850+    5430        <sections_paragraphs_opt>    => ILS_LIST or LX_TERMINAL(empty)
      851+    5431        <sentences>                  => ILS_LIST
      852+    5432        <sign_class_condition>       => UNARY_OP
      853+    5433        <size_error_phrase>          => ILS_LIST
      854+    5434        <subscript_list>             => LX_LIST of <arith_expr>
      855+    5435        <subscripts>                 => LX_LIST of <arith_expr>
      856+    5436        <term>                       => LX_TERMINAL or LX_ETT_ITEM or BINARY_OP or UNARY_OP
      857+    5437        <thru_sect_opt>
      858+    5438        <unary>                      => LX_TERMINAL or LX_ETT_ITEM or BINARY_OP or UNARY_OP
      859+    5439        <with_conversion_opt>
      860+    5440        <with_dup_phrase_opt>
      861+    5441        <with_test_opt>              => LX_TERMINAL (BEFORE,AFTER)
      862+    5442        */
      863+    5443
      864+    5444
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:489  
      865+    5445
      866+    5446        %EQU ADD_TO = 0;
      867+    5447        %EQU ADD_GIVING = 1;
      868+    5448        %EQU ADD_CORRESPONDING = 2;
      869+    5449
      870+    5450    1   DCL 1 ADD_STMT BASED ALIGNED, /* ADD STATEMENT */
      871+    5451    1       2 ID     UBIN HALF UNAL,
      872+    5452    1       2 *      UBIN HALF UNAL,
      873+    5453    1       2 KEY_WORD$ PTR,
      874+    5454    1       2 SENDING$  PTR ,
      875+    5455    1       2 RECEIVING$ PTR,
      876+    5456    1       2 TYPE   SBIN WORD,
      877+    5457    1       2 *      SBIN WORD,
      878+    5458    1       2 *      SBIN WORD,
      879+    5459    1       2 *      SBIN WORD;
      880+    5460
      881+    5461
      882+    5462        /* Unary operators  for UNARY_OP */
      883+    5463
      884+    5464        %EQU OP_NOT                    = 0;
      885+    5465        %EQU OP_UNARY_MINUS            = 1;
      886+    5466        %EQU OP_PAREN                  = 2;
      887+    5467        %EQU OP_OWNER                  = 3;
      888+    5468        %EQU OP_MEMBER                 = 4;
      889+    5469        %EQU OP_TENANT                 = 5;
      890+    5470        %EQU OP_NUMERIC                = 6;
      891+    5471        %EQU OP_ALPHABETIC             = 7;
      892+    5472        %EQU OP_ALPHABETIC_LOWER       = 8;
      893+    5473        %EQU OP_ALPHABETIC_UPPER       = 9;
      894+    5474        %EQU OP_POSITIVE               = 10;
      895+    5475        %EQU OP_NEGATIVE               = 11;
      896+    5476        %EQU OP_ZERO                   = 12;
      897+    5477        %EQU OP_EMPTY                  = 13;
      898+    5478
      899+    5479        /* Binary operators for BINARY OP */
      900+    5480
      901+    5481        %EQU OP_AND                    = 14;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:490  
      902+    5482        %EQU OP_OR                     = 15;
      903+    5483        %EQU OP_PLUS                   = 16;
      904+    5484        %EQU OP_BINARY_MINUS           = 17;
      905+    5485        %EQU OP_STAR                   = 18;
      906+    5486        %EQU OP_SLASH                  = 19;
      907+    5487        %EQU OP_STAR_STAR              = 20;
      908+    5488        %EQU OP_THRU                   = 21;
      909+    5489        %EQU OP_LESS_THAN              = 22;
      910+    5490        %EQU OP_EQUAL                  = 23;
      911+    5491        %EQU OP_GREATER_THAN           = 24;
      912+    5492        %EQU OP_NOT_EQUAL              = 25;
      913+    5493        %EQU OP_LESS_THAN_OR_EQUAL     = 26;
      914+    5494        %EQU OP_GREATER_THAN_OR_EQUAL  = 27;
      915+    5495        %EQU OP_MINIMUM                = 28;
      916+    5496        %EQU OP_INDEX                  = 29;
      917+    5497
      918+    5498           /* Unary op */
      919+    5499
      920+    5500        %EQU OP_SWITCH_IS_ON           = 30;
      921+    5501        %EQU OP_SWITCH_IS_OFF          = 31;
      922+    5502        %EQU OP_SET_SWITCH_ON          = 32;
      923+    5503        %EQU OP_SET_SWITCH_OFF         = 33;
      924+    5504
      925+    5505        /* More binary ops */
      926+    5506        %EQU OP_USER_CLASS             = 34;
      927+    5507
      928+    5508
      929+    5509        %MACRO SET_OF_UNARY_ARITH;
      930+    5510
      931+    5511             %OP_PAREN,
      932+    5512             %OP_UNARY_MINUS
      933+    5513
      934+    5514        %MEND;
      935+    5515
      936+    5516
      937+    5517        %MACRO SET_OF_RELATIONAL_OPS;
      938+    5518
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:491  
      939+    5519            %OP_USER_CLASS,
      940+    5520            %OP_AND,
      941+    5521            %OP_OR,
      942+    5522            %OP_EQUAL,
      943+    5523            %OP_LESS_THAN,
      944+    5524            %OP_GREATER_THAN,
      945+    5525            %OP_NOT_EQUAL,
      946+    5526            %OP_LESS_THAN_OR_EQUAL,
      947+    5527            %OP_GREATER_THAN_OR_EQUAL
      948+    5528
      949+    5529        %MEND;
      950+    5530
      951+    5531
      952+    5532
      953+    5533        %MACRO SET_OF_BINARY_ARITH;
      954+    5534
      955+    5535             %OP_PLUS,
      956+    5536             %OP_BINARY_MINUS,
      957+    5537             %OP_STAR,
      958+    5538             %OP_SLASH,
      959+    5539             %OP_STAR_STAR
      960+    5540
      961+    5541        %MEND;
      962+    5542
      963+    5543    1   DCL 1 BINARY_OP BASED ALIGNED,
      964+    5544    1         2 ID         UBIN HALF UNAL,
      965+    5545    1         2 B          UNAL,
      966+    5546    1           3 ERROR     BOOLEAN,
      967+    5547    1           3 *         BIT(5) UNAL,
      968+    5548    1           3 HIGH_LEV  BOOLEAN,   /* Expression uses high-level feature */
      969+    5549    1           3 *         BIT(11) UNAL,
      970+    5550    1         2 LOP$       PTR,
      971+    5551    1         2 ROP$       PTR,
      972+    5552    1         2 OP         UBIN WORD,
      973+    5553    1         2 *          UBIN WORD,
      974+    5554    1         2 LINE       UBIN WORD,
      975+    5555    1         2 COLUMN     UBIN WORD,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:492  
      976+    5556    1         2 LINK       PTR;
      977+    5557
      978+    5558
      979+    5559    1   DCL 1 CALL_STMT BASED ALIGNED,
      980+    5560    1       2 ID          UBIN HALF UNAL,
      981+    5561    1       2 *           UBIN HALF UNAL,
      982+    5562    1       2 KEY_WORD$   PTR,
      983+    5563    1       2 PROC_NAME$  PTR,
      984+    5564    1       2 ARG_LIST$   PTR,
      985+    5565    1       2 *           PTR,
      986+    5566    1       2 *           PTR,
      987+    5567    1       2 *           PTR,
      988+    5568    1       2 *           PTR;
      989+    5569
      990+    5570
      991+    5571
      992+    5572
      993+    5573    1   DCL 1 COMPUTE_STMT BASED ALIGNED, /* COMPUTE STATEMENT */
      994+    5574    1       2 ID     UBIN HALF UNAL,
      995+    5575    1       2 *      UBIN HALF UNAL,
      996+    5576    1       2 KEY_WORD$   PTR,
      997+    5577    1       2 EXPR$       PTR,
      998+    5578    1       2 IDENT_LIST$ PTR,
      999+    5579    1       2 *           PTR,
     1000+    5580    1       2 *           PTR,
     1001+    5581    1       2 *           PTR,
     1002+    5582    1       2 *           PTR;
     1003+    5583
     1004+    5584
     1005+    5585    1   DCL 1 DEFERED_QUAL_ID  BASED  ALIGNED, /* Defered qualified id's */
     1006+    5586    1         2 ID             UBIN HALF UNAL,
     1007+    5587    1         2 B              UNAL,
     1008+    5588    1           3 ERROR        BOOLEAN,
     1009+    5589    1           3 *            BIT(17) UNAL,
     1010+    5590    1         2 QUAL_ID_LIST$  PTR, /* Ptr to <QUALIFIED_ID> */
     1011+    5591    1         2 ASSOC_VAR_ST$  PTR, /* Ptr to associated variable ST */
     1012+    5592    1         2 ILL$           PTR, /* points to associated ILL item */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:493  
     1013+    5593    1         2 *              PTR, /* Not presently used */
     1014+    5594    1         2 LINE           UBIN WORD,
     1015+    5595    1         2 COLUMN         UBIN WORD,
     1016+    5596    1         2 LINK           PTR;
     1017+    5597
     1018+    5598
     1019+    5599    1   DCL 1 DELETE_STMT BASED ALIGNED,   /* Delete statement */
     1020+    5600    1         2 ID            UBIN HALF UNAL,
     1021+    5601    1         2 *             UBIN HALF UNAL,
     1022+    5602    1         2 KEY_WORD$     PTR,
     1023+    5603    1         2 FILE_NAME$    PTR,
     1024+    5604    1         2 *             PTR,
     1025+    5605    1         2 *             PTR,
     1026+    5606    1         2 *             PTR,
     1027+    5607    1         2 *             PTR,
     1028+    5608    1         2 *             PTR;
     1029+    5609
     1030+    5610
     1031+    5611
     1032+    5612    1   DCL 1 DIVIDE_STMT BASED ALIGNED, /* DIVIDE STATEMENT */
     1033+    5613    1         2 ID     UBIN HALF UNAL,
     1034+    5614    1         2 *      UBIN HALF UNAL,
     1035+    5615    1         2 KEY_WORD$ PTR,
     1036+    5616    1         2 DIVISOR$   PTR,
     1037+    5617    1         2 QUOTIENT_LIST$ PTR,
     1038+    5618    1         2 DIVIDEND_LIST$ PTR,
     1039+    5619    1         2 REMAINDER$ PTR,
     1040+    5620    1         2 * PTR,
     1041+    5621    1         2 * PTR;
     1042+    5622
     1043+    5623        %MACRO EMPTY_LX_LIST;
     1044+    5624        DCL 1 EMPTY_LX_LIST CONSTANT,
     1045+    5625              2 ID    UBIN HALF HALIGNED INIT (%LX_LIST),
     1046+    5626              2 *     BIT (18) INIT (FALSE),
     1047+    5627              2 TAIL$ PTR INIT (ADDR (NIL)),
     1048+    5628              2 COUNT SBIN INIT (0),
     1049+    5629              2 *     SBIN INIT (0),
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:494  
     1050+    5630              2 HEAD$ PTR INIT (ADDR (NIL)),
     1051+    5631              2 *     BIT (72) ALIGNED INIT (FALSE),
     1052+    5632              2 LINK  PTR INIT (ADDR (NIL));
     1053+    5633        %MEND;
     1054+    5634
     1055+    5635        /* Types of EXAMINE formats */
     1056+    5636        %EQU EXAMINE_TALLYING         = 0;
     1057+    5637        %EQU EXAMINE_TALLYING_REPLACING = 1;
     1058+    5638        %EQU EXAMINE_REPLACING          = 2;
     1059+    5639
     1060+    5640
     1061+    5641        /* Types of expressions for EVALUATE */
     1062+    5642
     1063+    5643        %EQU EXPR_TYPE_ANY = 0;
     1064+    5644        %EQU EXPR_TYPE_TRUE = 1;
     1065+    5645        %EQU EXPR_TYPE_FALSE = 2;
     1066+    5646        %EQU EXPR_TYPE_COND = 3;
     1067+    5647        %EQU EXPR_TYPE_EXPR = 4;
     1068+    5648
     1069+    5649        %EQU IMP_ILS_LIST  = 0; /* Imperative statement(s) only */
     1070+    5650        %EQU COND_ILS_LIST = 1; /* Flag conditional statement for level checking */
     1071+    5651
     1072+    5652    1   DCL 1 ILS_LIST BASED ALIGNED,
     1073+    5653    1         2 ID           UBIN HALF UNAL,
     1074+    5654    1         2 CODE         UBIN HALF UNAL,
     1075+    5655    1         2 HEAD$        PTR,
     1076+    5656    1         2 TAIL$        PTR,
     1077+    5657    1         2 *  PTR,
     1078+    5658    1         2 *  PTR,
     1079+    5659    1         2 *            PTR,
     1080+    5660    1         2 *            PTR,
     1081+    5661    1         2 LINK         PTR;
     1082+    5662
     1083+    5663
     1084+    5664
     1085+    5665
     1086+    5666
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:495  
     1087+    5667        %EQU INSPECT_1 = 1029 ; /* '2001'O */
     1088+    5668        %EQU INSPECT_2 = 1030 ; /* '2002'O */
     1089+    5669        %EQU INSPECT_4 = 1032 ; /* '2004'O */
     1090+    5670
     1091+    5671    1   DCL 1  INSPECT_1_STMT          BASED ALIGNED, /*INSPECT Format 1 */
     1092+    5672    1        2 ID                      UBIN HALF UNAL,
     1093+    5673    1        2 HIGH_LEV                BIT(1),   /* High-level feature used */
     1094+    5674    1        2 *                       BIT(17),
     1095+    5675    1        2 KEY_WORD$               PTR,
     1096+    5676    1        2 ID_1$                   PTR,
     1097+    5677    1        2 INSPECT_1$              PTR,
     1098+    5678    1        2 *                       PTR,
     1099+    5679    1        2 LINE                    SBIN WORD,
     1100+    5680    1        2 COLUMN                  SBIN WORD,
     1101+    5681    1        2 *                       PTR ;
     1102+    5682
     1103+    5683    1   DCL 1  INSPECT_2_STMT          BASED ALIGNED, /*INSPECT Format 2 */
     1104+    5684    1        2 ID                      UBIN HALF UNAL,
     1105+    5685    1        2 HIGH_LEV                BIT(1),   /* High-level feature used */
     1106+    5686    1        2 *                       BIT(17),
     1107+    5687    1        2 KEY_WORD$               PTR,
     1108+    5688    1        2 ID_1$                   PTR,
     1109+    5689    1        2 INSP_2_REPLACE$         PTR,
     1110+    5690    1        2 *                       PTR,
     1111+    5691    1        2 LINE                    SBIN WORD,
     1112+    5692    1        2 COLUMN                  SBIN WORD,
     1113+    5693    1        2 *                       PTR ;
     1114+    5694
     1115+    5695    1   DCL 1  INSPECT_4_STMT          BASED ALIGNED, /*INSPECT Format 4 */
     1116+    5696    1        2 ID                      UBIN HALF UNAL,
     1117+    5697    1        2 *                       UBIN HALF UNAL,
     1118+    5698    1        2 KEY_WORD$               PTR,
     1119+    5699    1        2 ID_1$                   PTR,
     1120+    5700    1        2 ID_6$                   PTR,
     1121+    5701    1        2 ID_7$                   PTR,
     1122+    5702    1        2 LINE                    SBIN WORD,
     1123+    5703    1        2 COLUMN                  SBIN WORD,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:496  
     1124+    5704    1        2 INSP_1_BEFORE_AFTER_OPT$ PTR ;
     1125+    5705
     1126+    5706    1   DCL 1 LX_ETT_ITEM BASED ALIGNED,
     1127+    5707    1       2      ID      UBIN HALF UNAL,    /* identification number */
     1128+    5708    1       2      B       UNAL,
     1129+    5709    1         3      ERROR   BOOLEAN,
     1130+    5710    1         3      ROUND   BOOLEAN,
     1131+    5711    1         3      INTEGER BOOLEAN,
     1132+    5712    1         3      ALL     BOOLEAN,
     1133+    5713    1         3      NEGATE  BOOLEAN,
     1134+    5714    1         3      REFMOD  BOOLEAN,
     1135+    5715    1         3      HIGH_LEV BOOLEAN,   /* Expression uses high-level features */
     1136+    5716    1         3      *       BIT (11) ,
     1137+    5717    1       2      FLAGS REDEF B BIT(18) UNAL,
     1138+    5718
     1139+    5719    1       2      ETT$    PTR,               /* PTR TO ETT TREE */
     1140+    5720    1       2      BY_CONTENT_ILS_LIST$  PTR, /* Move Arg to Temp ILS  */
     1141+    5721    1       2      *       SBIN WORD,
     1142+    5722    1       2      TYPE    UBIN WORD,    /* TYPE (EG, %TYI, %TYA, ETC) */
     1143+    5723    1       2      LINE    UBIN WORD,    /* LINE# OF THIS OCCURRENCE    */
     1144+    5724    1       2      COLUMN  UBIN WORD,    /* COL # OF THIS OCCURRENCE    */
     1145+    5725    1       2      LINK    PTR;
     1146+    5726
     1147+    5727    1   DCL 1 LX_LARGE BASED ALIGNED,
     1148+    5728    1         2 ID      UBIN HALF UNAL,
     1149+    5729    1         2 *       BIT(18) UNAL,
     1150+    5730    1         2 LARGE_ITEM$ PTR,
     1151+    5731    1         2 *       SBIN WORD,
     1152+    5732    1         2 *       SBIN WORD,
     1153+    5733    1         2 *       SBIN WORD,
     1154+    5734    1         2 *       SBIN WORD,
     1155+    5735    1         2 *       SBIN WORD,
     1156+    5736    1         2 LINK    PTR;
     1157+    5737
     1158+    5738    1   DCL 1 LX_LIST ALIGNED BASED , /* List descriptor */
     1159+    5739    1       2 ID      UBIN HALF UNAL,
     1160+    5740    1       2 B       UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:497  
     1161+    5741    1         3 ERROR   BOOLEAN ,
     1162+    5742    1         3 *       BIT (5),
     1163+    5743    1         3 HIGH_LEV BOOLEAN,   /* Expression uses high-level features */
     1164+    5744    1         3 *       BIT (11),
     1165+    5745
     1166+    5746    1       2 TAIL$   PTR ,             /* Pointer to tail item in list */
     1167+    5747    1       2 COUNT   SBIN WORD,        /* Number of ident items in list */
     1168+    5748    1       2 *       SBIN WORD,
     1169+    5749    1       2 HEAD$   PTR ,            /* Pointer to head of the list */
     1170+    5750    1       2 *       UBIN WORD ,
     1171+    5751    1       2 *       UBIN WORD ,
     1172+    5752    1       2 LINK    PTR ;             /* Pointer to next item in list */
     1173+    5753
     1174+    5754        /* LX_REC_DECL field equates */
     1175+    5755
     1176+    5756        %EQU REC_DECL_LEVEL_NO = 0;
     1177+    5757        %EQU REC_DECL_DATA_NAME = 1;
     1178+    5758        %EQU REC_DECL_USAGE = 2;
     1179+    5759        %EQU REC_DECL_PIC_CLAUSE = 3;
     1180+    5760        %EQU REC_DECL_REDEFINES = 4;
     1181+    5761        %EQU REC_DECL_RENAMES = 5;
     1182+    5762        %EQU REC_DECL_OCCURS = 6;
     1183+    5763        %EQU REC_DECL_VALUE = 7;
     1184+    5764        %EQU REC_DECL_SIGN = 8;
     1185+    5765        %EQU REC_DECL_BLANK = 9;
     1186+    5766        %EQU REC_DECL_GLOBAL = 10;
     1187+    5767        %EQU REC_DECL_SYNC = 11;
     1188+    5768        %EQU REC_DECL_EXTERNAL = 12;
     1189+    5769        %EQU REC_DECL_JUSTIFIED = 13;
     1190+    5770        %EQU REC_DECL_INDEXED = 14;
     1191+    5771        %EQU REC_DECL_KEY = 15;
     1192+    5772        %EQU REC_DECL_MAX_FIELD = 15;  /* Update this when adding fields */
     1193+    5773
     1194+    5774    1   DCL 1 LX_REC_DECL BASED ALIGNED,  /* Record declaration info */
     1195+    5775    1         2 ID             UBIN HALF UNAL,
     1196+    5776    1         2 *              BIT(18) UNAL,
     1197+    5777    1         2 P,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:498  
     1198+    5778    1           3 LEVEL_NO$    PTR,  /* <level_no> */
     1199+    5779    1           3 DATA_NAME$   PTR,  /* <data_name> */
     1200+    5780    1           3 USAGE$       PTR,  /* <usage_clause> */
     1201+    5781    1           3 PIC_CLAUSE$  PTR,  /* picture_clause */
     1202+    5782    1           3 REDEFINES$   PTR,  /* <redefines_clause> */
     1203+    5783    1           3 RENAMES$     PTR,  /* <renames_clause> */
     1204+    5784    1           3 OCCURS$      PTR,  /* LX_LIST (1 or 2 nodes)
     1205+    5785                                         node 1) LX_LIST of <integer> (1 or 2)
     1206+    5786                                         node 2) <qualified_id>
     1207+    5787                                     */
     1208+    5788    1           3 VALUE$       PTR,  /* <literal_thru_list> */
     1209+    5789    1           3 SIGN$        PTR,  /* <sign_clause */
     1210+    5790    1           3 BLANK$       PTR,  /* <blank_clause */
     1211+    5791    1           3 GLOBAL$      PTR,  /* <global_clause> */
     1212+    5792    1           3 SYNC$        PTR,  /* <sync_clause> */
     1213+    5793    1           3 EXTERNAL$    PTR,  /* <external_clause> */
     1214+    5794    1           3 JUSTIFIED$   PTR,  /* <justified_clause> */
     1215+    5795    1           3 INDEXED$     PTR,  /* <OCCURS_INDEX_clause> */
     1216+    5796    1           3 KEY$         PTR,  /* LX_LIST of <OCCURS_KEY_clause> */
     1217+    5797    1         2 P_PTRS (0:%REC_DECL_MAX_FIELD) REDEF P PTR,
     1218+    5798
     1219+    5799    1         2 CLAUSE_COUNT(0:%REC_DECL_MAX_FIELD) SBIN WORD,
     1220+    5800    1         2 CURRENT_CLAUSE_COUNT SBIN WORD;
     1221+    5801
     1222+    5802
     1223+    5803
     1224+    5804    1   DCL 1 LX_TERMINAL BASED ALIGNED,  /* terminal symbol obtained from parser */
     1225+    5805              %LA_STK_INFO;
     1226+    5824    1         2 LINK     PTR;
     1227+    5825
     1228+    5826
     1229+    5827
     1230+    5828
     1231+    5829    1   DCL 1 MULTIPLY_STMT BASED ALIGNED, /* MULTIPLY STATEMENT */
     1232+    5830    1       2 ID     UBIN HALF UNAL,
     1233+    5831    1       2 *      UBIN HALF UNAL,
     1234+    5832    1       2 KEY_WORD$      PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:499  
     1235+    5833    1       2 SENDING$       PTR ,
     1236+    5834    1       2 BY$            PTR,
     1237+    5835    1       2 GIVING$        PTR,
     1238+    5836    1       2 *              PTR,
     1239+    5837    1       2 *              PTR,
     1240+    5838    1       2 *      SBIN WORD;
     1241+    5839
     1242+    5840
     1243+    5841        %EQU READ_AT_END_CLAUSE = 0;
     1244+    5842        %EQU READ_INVALID_CLAUSE = 1;
     1245+    5843        %EQU READ_NO_EXCEPTION_CLAUSE = 2;
     1246+    5844
     1247+    5845    1   DCL 1 READ_STMT BASED ALIGNED,  /* Read statement */
     1248+    5846    1         2 ID         UBIN HALF UNAL,
     1249+    5847    1         2 *          UBIN HALF UNAL,
     1250+    5848    1         2 KEY_WORD$  PTR,
     1251+    5849    1         2 FILE_NAME$ PTR,
     1252+    5850    1         2 NEXT$      PTR,
     1253+    5851    1         2 INTO_IDENT$ PTR,
     1254+    5852    1         2 KEY_ID$ PTR,
     1255+    5853    1         2 *          PTR,
     1256+    5854    1         2 *          PTR;
     1257+    5855
     1258+    5856
     1259+    5857    1   DCL 1 REWRITE_STMT BASED ALIGNED,  /* Rewrite statement */
     1260+    5858    1         2 ID         UBIN HALF UNAL,
     1261+    5859    1         2 *          UBIN HALF UNAL,
     1262+    5860    1         2 KEY_WORD$  PTR,
     1263+    5861    1         2 IDENT$     PTR,
     1264+    5862    1         2 FROM_IDENT$ PTR,
     1265+    5863    1         2 *          PTR,
     1266+    5864    1         2 *          PTR,
     1267+    5865    1         2 *          PTR,
     1268+    5866    1         2 *          PTR;
     1269+    5867
     1270+    5868        /* USE_PRIVACY statement types  */
     1271+    5869
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:500  
     1272+    5870        %EQU PRIVACY_RECORD  = 1;
     1273+    5871        %EQU PRIVACY_SET     = 2;
     1274+    5872        %EQU PRIVACY_LIST    = 3;
     1275+    5873
     1276+    5874        /* DB_EXCEPTION statement types */
     1277+    5875
     1278+    5876        %EQU DB_EXCEPTION_ALL    = 0;
     1279+    5877        %EQU DB_EXCEPTION_OTHER  = 1;
     1280+    5878        %EQU DB_EXCEPTION_INDICATOR =2;
     1281+    5879        %EQU DB_EXCEPTION_END  = 3;
     1282+    5880
     1283+    5881
     1284+    5882        /* FIND statement types  */
     1285+    5883
     1286+    5884        %EQU FIND_DIRECT        = 1;
     1287+    5885        %EQU FIND_CALC          = 2;
     1288+    5886        %EQU FIND_DUPLICATE_WITHIN  = 3;
     1289+    5887        %EQU FIND_IDENT_WITHIN  = 4;
     1290+    5888        %EQU FIND_RELATIVE_OCCURENCE= 5;
     1291+    5889        %EQU FIND_OWNER         = 6;
     1292+    5890        %EQU FIND_WITHIN_USING  = 7;
     1293+    5891        %EQU FIND_FIRST_NEXT_USING  = 8;
     1294+    5892        %EQU FIND_USING         = 9;
     1295+    5893        %EQU FIND_CURRENT      = 10;
     1296+    5894
     1297+    5895        /*  USE statement types  */
     1298+    5896
     1299+    5897        %EQU USE_EXCEPTION = 0;
     1300+    5898        %EQU USE_DB_EXCEPTION = 1;
     1301+    5899        %EQU USE_SAVE_X0 = 1;
     1302+    5900        %EQU USE_PRIVACY = 2;
     1303+    5901        %EQU USE_BEFORE_REPORTING = 3;
     1304+    5902        %EQU USE_BEFORE_LABEL = 4;
     1305+    5903        %EQU USE_AFTER_LABEL = 5;
     1306+    5904
     1307+    5905        /* SET statement types */
     1308+    5906
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:501  
     1309+    5907        %EQU SET_TO        = 0;
     1310+    5908        %EQU SET_UP_BY     = 1;
     1311+    5909        %EQU SET_DOWN_BY   = 2;
     1312+    5910        %EQU SET_TO_TRUE   = 3;
     1313+    5911        %EQU SET_ON        = 4;
     1314+    5912        %EQU SET_OFF       = 5;
     1315+    5913        %EQU SET_SWITCH    = 6;
     1316+    5914        %EQU SET_TO_SWITCH = 7;
     1317+    5915
     1318+    5916    1   DCL 1 START_STMT BASED ALIGNED,
     1319+    5917    1         2 ID              UBIN HALF UNAL,
     1320+    5918    1         2 *               UBIN HALF UNAL,
     1321+    5919    1         2 KEY_WORD$       PTR,
     1322+    5920    1         2 FILE_NAME$      PTR,
     1323+    5921    1         2 KEY$            PTR,
     1324+    5922    1         2 *               PTR,
     1325+    5923    1         2 *               PTR,
     1326+    5924    1         2 *               PTR,
     1327+    5925    1         2 *               PTR;
     1328+    5926
     1329+    5927
     1330+    5928    1   DCL 1 STRING_STMT BASED ALIGNED,
     1331+    5929    1         2 ID           UBIN HALF UNAL,
     1332+    5930    1         2 *            UBIN HALF UNAL,
     1333+    5931    1         2 KEY_WORD$    PTR,
     1334+    5932    1         2 STRING_LIST$ PTR,
     1335+    5933    1         2 INTO$        PTR,
     1336+    5934    1         2 POINTER$     PTR,
     1337+    5935    1         2 *            SBIN WORD,
     1338+    5936    1         2 *            SBIN WORD;
     1339+    5937
     1340+    5938
     1341+    5939        %EQU SUBTRACT_FROM = 0;
     1342+    5940        %EQU SUBTRACT_GIVING = 1;
     1343+    5941        %EQU SUBTRACT_CORRESPONDING = 2;
     1344+    5942
     1345+    5943    1   DCL 1 SUBTRACT_STMT BASED ALIGNED, /* SUBTRACT STATEMENT */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:502  
     1346+    5944    1         2 ID     UBIN HALF UNAL,
     1347+    5945    1         2 *      UBIN HALF UNAL,
     1348+    5946    1         2 KEY_WORD$ PTR,
     1349+    5947    1         2 SENDING$  PTR ,
     1350+    5948    1         2 FROM$   PTR,
     1351+    5949    1         2 RECEIVING$ PTR,
     1352+    5950    1         2 TYPE   SBIN WORD,
     1353+    5951    1         2 *      SBIN WORD,
     1354+    5952    1         2 *      SBIN WORD;
     1355+    5953
     1356+    5954
     1357+    5955
     1358+    5956
     1359+    5957    1   DCL 1 UNARY_OP BASED ALIGNED,
     1360+    5958    1         2 ID         UBIN HALF UNAL,
     1361+    5959    1         2 B          UNAL,
     1362+    5960    1           3 ERROR     BOOLEAN,
     1363+    5961    1           3 *         BIT(5) UNAL,
     1364+    5962    1           3 HIGH_LEV  BOOLEAN,   /* Expression uses high-level feature */
     1365+    5963    1           3 *         BIT(11) UNAL,
     1366+    5964    1         2 LOP$       PTR,
     1367+    5965    1         2 *          PTR,
     1368+    5966    1         2 OP         UBIN WORD,
     1369+    5967    1         2 *          UBIN WORD,
     1370+    5968    1         2 LINE       UBIN WORD,
     1371+    5969    1         2 COLUMN     UBIN WORD,
     1372+    5970    1         2 LINK       PTR;
     1373+    5971
     1374+    5972
     1375+    5973    1   DCL 1 UNSTRING_STMT BASED ALIGNED, /* Unstring statement */
     1376+    5974    1         2 ID           UBIN HALF UNAL,
     1377+    5975    1         2 *            UBIN HALF UNAL,
     1378+    5976    1         2 KEY_WORD$    PTR,
     1379+    5977    1         2 IDENT$       PTR,
     1380+    5978    1         2 DELIM_LIST$  PTR,
     1381+    5979    1         2 INTO_LIST$   PTR,
     1382+    5980    1         2 POINTER$     PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:503  
     1383+    5981    1         2 TALLYING$    PTR,
     1384+    5982    1         2 *          PTR;
     1385+    5983
     1386+    5984
     1387+    5985        %EQU WRITE_EOP_CLAUSE = 0;
     1388+    5986        %EQU WRITE_INVALID_CLAUSE = 1;
     1389+    5987        %EQU WRITE_NO_EXCEPTION_CLAUSE = 2;
     1390+    5988
     1391+    5989    1   DCL 1 WRITE_STMT BASED ALIGNED,  /* Write statement */
     1392+    5990    1         2 ID            UBIN HALF UNAL,
     1393+    5991    1         2 *             UBIN HALF UNAL,
     1394+    5992    1         2 KEY_WORD$     PTR,
     1395+    5993    1         2 IDENT$        PTR,
     1396+    5994    1         2 FROM_IDENT$   PTR,
     1397+    5995    1         2 LINES$        PTR,
     1398+    5996    1         2 *             PTR,
     1399+    5997    1         2 *             PTR,
     1400+    5998    1         2 *             PTR;
     1401+    5999
     1402+    6000    1    DCL 1 LX_REPORT_REC     BASED  ALIGNED,
     1403+    6001    1          2 ID                     UBIN  HALF  UNAL,
     1404+    6002    1          2 *                      BIT(18) UNAL,
     1405+    6003    1          2 D,
     1406+    6004    1            3 REPORT_TYPE          UBIN WORD,  /* %REPORT_HEADING, %... */
     1407+    6005    1            3 LINE_TYPE            UBIN WORD,  /* %REPORT_LINE_INT, %.. */
     1408+    6006    1            3 NEXT_GROUP_TYPE      UBIN WORD,  /* %NEXT_GROUP_INT, %... */
     1409+    6007    1          2 P,
     1410+    6008    1            3 LEVEL_NO$            PTR,
     1411+    6009    1            3 DATA_NAME$           PTR,
     1412+    6010    1            3 USAGE$               PTR,
     1413+    6011    1            3 PICTURE$             PTR,
     1414+    6012    1            3 VALUE$               PTR,
     1415+    6013    1            3 SIGN$                PTR,
     1416+    6014    1            3 BLANK$               PTR,
     1417+    6015    1            3 TYPE$                PTR,
     1418+    6016    1            3 JUSTIFIED$           PTR,
     1419+    6017    1            3 NEXT_GROUP$          PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:504  
     1420+    6018    1            3 LINE_NUMBER$         PTR,
     1421+    6019    1            3 COLUMN_NUMBER$       PTR,
     1422+    6020    1            3 GROUP_INDICATE$      PTR,
     1423+    6021    1            3 SOURCE$              PTR,
     1424+    6022    1            3 SUM$                 PTR,
     1425+    6023    1          2 P_PTRS  (0:%REPORT_REC_MAX_FIELD)  REDEF  P  PTR,
     1426+    6024    1          2 CLAUSE_COUNT           UBIN  WORD,
     1427+    6025    1          2 NEXT_GROUP_NO#         SBIN WORD,
     1428+    6026    1          2 COLUMN_NO#             SBIN WORD,
     1429+    6027    1          2 LINE_NO#               SBIN WORD,
     1430+    6028    1          2 LEVEL_NUMBER           UBIN  WORD;
     1431+    6029
     1432+    6030    1    DCL 1 DEFERED_ID_TREE          BASED   ALIGNED,
     1433+    6031    1          2 ID                     UBIN  HALF  UNAL,
     1434+    6032    1          2 *                      UBIN  HALF  UNAL,
     1435+    6033    1          2 QUAL_ID$               PTR,
     1436+    6034    1          2 SUB$                   PTR,
     1437+    6035    1          2 REF$                   PTR,
     1438+    6036    1          2 ACTION_NO#             UBIN WORD,
     1439+    6037    1          2 LINE                   SBIN WORD,
     1440+    6038    1          2 LINK                   PTR;
     1441+    6039
     1442+    6040    1    DCL 1 DEFERED_IDENTIFIER        BASED  ALIGNED,
     1443+    6041    1          2 ID                      UBIN HALF UNAL,
     1444+    6042    1          2 B                       UNAL,
     1445+    6043    1            3 ERROR                 BOOLEAN,
     1446+    6044    1            3 *                     BIT(17)  UNAL,
     1447+    6045    1          2 DEFERED_ID$            PTR,
     1448+    6046    1          2 ASSOC_VAR_LTS$          PTR,
     1449+    6047    1          2 ASSOC_REPORT_LTS$       PTR,
     1450+    6048    1          2 *                       PTR,
     1451+    6049    1          2 LINE                    UBIN WORD,
     1452+    6050    1          2 COLUMN                  UBIN WORD,
     1453+    6051    1          2 LINK                    PTR;
     1454+    6052
     1455+    6053
     1456+    6054    1    DCL 1 DEFERED_SUM_CLAUSE_LIST   BASED  ALIGNED,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:505  
     1457+    6055    1          2 ID                      UBIN HALF UNAL,
     1458+    6056    1          2 B                       UNAL,
     1459+    6057    1            3 ERROR                 BOOLEAN,
     1460+    6058    1            3 *                     BIT(17)  UNAL,
     1461+    6059    1          2 SUM_CLAUSE_LIST$        PTR,
     1462+    6060    1          2 ASSOC_VAR_LTS$          PTR,
     1463+    6061    1          2 ASSOC_REPORT_LTS$       PTR,
     1464+    6062    1          2 ASSOC_01_LTS$           PTR,
     1465+    6063    1          2 LINE                    UBIN WORD,
     1466+    6064    1          2 COLUMN                  UBIN WORD,
     1467+    6065    1          2 LINK                    PTR;
     1468+    6066
     1469+    6067
     1470+    6068    1    DCL 1 DEFERED_SUM_CLAUSE        BASED  ALIGNED,
     1471+    6069    1          2 ID                      UBIN HALF UNAL,
     1472+    6070    1          2 B                       UNAL,
     1473+    6071    1            3 ERROR                 BOOLEAN,
     1474+    6072    1            3 RESET_ID              BOOLEAN,
     1475+    6073    1            3 RESET_FINAL           BOOLEAN,
     1476+    6074    1            3 *                     BIT(15)  UNAL,
     1477+    6075    1          2 DEFERED_ID$            PTR,
     1478+    6076    1          2 *                       PTR,
     1479+    6077    1          2 SUM_UPON$               PTR,
     1480+    6078    1          2 SUM_RESET$              PTR,
     1481+    6079    1          2 LINE                    UBIN WORD,
     1482+    6080    1          2 COLUMN                  UBIN WORD,
     1483+    6081    1          2 LINK                    PTR;
     1484+    6082
     1485+    6083    1    DCL 1 LX_CD_INPUT         BASED ALIGNED,
     1486+    6084    1          2 ID                UBIN HALF UNAL,
     1487+    6085    1          2 B                 UNAL,
     1488+    6086    1            3 INITIAL         BOOLEAN,
     1489+    6087    1            3 *               BIT(17) UNAL,
     1490+    6088    1          2 CD_NAME$          PTR,
     1491+    6089    1          2 BLOCK$            PTR,
     1492+    6090    1          2 P,
     1493+    6091    1            3 QUEUE$          PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:506  
     1494+    6092    1            3 SUB_QUEUE_1$    PTR,
     1495+    6093    1            3 SUB_QUEUE_2$    PTR,
     1496+    6094    1            3 SUB_QUEUE_3$    PTR,
     1497+    6095    1            3 MESSAGE_DATE$   PTR,
     1498+    6096    1            3 MESSAGE_TIME$   PTR,
     1499+    6097    1            3 SYMBOLIC_SOURCE$ PTR,
     1500+    6098    1            3 TEXT_LENGTH$    PTR,
     1501+    6099    1            3 END_KEY$        PTR,
     1502+    6100    1            3 STATUS_KEY$     PTR,
     1503+    6101    1            3 MESSAGE_COUNT$  PTR,
     1504+    6102    1          2 INPUT_FIELDS$  (0:%(CD_INPUT_OPTION - 1)) REDEF P PTR;
     1505+    6103
     1506+    6104    1    DCL 1 LX_CD_OUTPUT        BASED ALIGNED,
     1507+    6105    1          2 ID                UBIN HALF UNAL,
     1508+    6106    1          2 B                 UNAL,
     1509+    6107    1            3 ERROR           BOOLEAN,
     1510+    6108    1            3 *               BIT(17) UNAL,
     1511+    6109    1          2 CD_NAME$          PTR,
     1512+    6110    1          2 BLOCK$            PTR,
     1513+    6111    1          2 P,
     1514+    6112    1            3 DESTINATION_COUNT$  PTR,
     1515+    6113    1            3 TEXT_LENGTH$    PTR,
     1516+    6114    1            3 STATUS_KEY$     PTR,
     1517+    6115    1            3 DESTINATION_TABLE$ PTR,
     1518+    6116    1            3 ERROR_KEY$      PTR,
     1519+    6117    1            3 SYMBOLIC_DESTINATION$ PTR,
     1520+    6118    1            3 OCCURS$         PTR,
     1521+    6119    1            3 INDEX_LIST$     PTR,
     1522+    6120    1          2 OUTPUT_FIELDS$  (0:%(CD_OUTPUT_OPTION + 1)) REDEF P PTR;
     1523+    6121
     1524+    6122    1    DCL 1 LX_CD_I_O           BASED ALIGNED,
     1525+    6123    1          2 ID                UBIN HALF UNAL,
     1526+    6124    1          2 B                 UNAL,
     1527+    6125    1            3 INITIAL         BOOLEAN,
     1528+    6126    1            3 *               BIT(17) UNAL,
     1529+    6127    1          2 CD_NAME$          PTR,
     1530+    6128    1          2 BLOCK$            PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:507  
     1531+    6129    1          2 P,
     1532+    6130    1            3 MESSAGE_DATE$   PTR,
     1533+    6131    1            3 MESSAGE_TIME$   PTR,
     1534+    6132    1            3 TERMINAL$       PTR,
     1535+    6133    1            3 TEXT_LENGTH$    PTR,
     1536+    6134    1            3 END_KEY$        PTR,
     1537+    6135    1            3 STATUS_KEY$     PTR,
     1538+    6136    1          2 I_O_FIELDS$ (0:%(CD_I_O_OPTION - 1)) REDEF P PTR;
     1539+    6137
     1540+    6138        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:508  
     1541+    6139
     1542+    6140        %MACRO NEW_LX_REC_DECL(@POINTER=);
     1543+    6141          DO;
     1544+    6142            %NEW(@POINTER=@POINTER,
     1545+    6143                 @TEMPLATE=LX_REC_DECL);
     1546+    6144            @POINTER -> LX_REC_DECL.ID = %LX_REC_DECL;
     1547+    6145            @POINTER -> LX_REC_DECL.CURRENT_CLAUSE_COUNT = 0;
     1548+    6146            DO I = 0 TO %REC_DECL_MAX_FIELD;
     1549+    6147              @POINTER -> LX_REC_DECL.P_PTRS(I) = ADDR(NIL);
     1550+    6148              @POINTER -> LX_REC_DECL.CLAUSE_COUNT(I) = 0;
     1551+    6149            END;
     1552+    6150          END;
     1553+    6151        %MEND;
     1554+    6152
     1555+    6153         %MACRO  NEW_LX_REPORT_REC (@POINTER = );
     1556+    6154           DO;
     1557+    6155             %NEW (@POINTER = @POINTER,
     1558+    6156                   @TEMPLATE = LX_REPORT_REC);
     1559+    6157             @POINTER -> LX_REPORT_REC.ID = %LX_REPORT_REC;
     1560+    6158             @POINTER -> LX_REPORT_REC.CLAUSE_COUNT = 0;
     1561+    6159             @POINTER -> LX_REPORT_REC.D.REPORT_TYPE = %NO_REPORT_TYPE;
     1562+    6160             @POINTER -> LX_REPORT_REC.D.LINE_TYPE = %NO_REPORT_TYPE;
     1563+    6161             @POINTER -> LX_REPORT_REC.D.NEXT_GROUP_TYPE = %NO_REPORT_TYPE;
     1564+    6162             @POINTER -> LX_REPORT_REC.NEXT_GROUP_NO# = 0;
     1565+    6163             @POINTER -> LX_REPORT_REC.LINE_NO# = 0;
     1566+    6164             @POINTER -> LX_REPORT_REC.COLUMN_NO# = 0;
     1567+    6165             DO I = 0 TO %REPORT_REC_MAX_FIELD;
     1568+    6166               @POINTER -> LX_REPORT_REC.P_PTRS(I) = ADDR(NIL);
     1569+    6167             END;
     1570+    6168           END;
     1571+    6169         %MEND;
     1572+    6170
     1573+    6171         %MACRO INIT_DEFERED_ID_TREE (@POINTER = ,
     1574+    6172                                      @QUAL_ID$ = "ADDR(NIL)",
     1575+    6173                                      @LINK    = "ADDR(NIL)",
     1576+    6174                                      @SUB$    = "ADDR(NIL)",
     1577+    6175                                      @REF$    = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:509  
     1578+    6176                                      @ACTION_NO# = SEMANTIC_ACTION,
     1579+    6177                                      @LINE    = 0);
     1580+    6178           DO;
     1581+    6179
     1582+    6180             @POINTER -> DEFERED_ID_TREE.ID = %DEFERED_ID_TREE;
     1583+    6181             @POINTER -> DEFERED_ID_TREE.QUAL_ID$ = @QUAL_ID$;
     1584+    6182             @POINTER -> DEFERED_ID_TREE.SUB$ = @SUB$;
     1585+    6183             @POINTER -> DEFERED_ID_TREE.REF$ = @REF$;
     1586+    6184             @POINTER -> DEFERED_ID_TREE.LINK = @LINK;
     1587+    6185             @POINTER -> DEFERED_ID_TREE.LINE = @LINE;
     1588+    6186             @POINTER -> DEFERED_ID_TREE.ACTION_NO# = @ACTION_NO#;
     1589+    6187           END;
     1590+    6188         %MEND;
     1591+    6189
     1592+    6190         %MACRO INIT_DEFERED_IDENTIFIER (@POINTER      =,
     1593+    6191                                         @DEFERED_ID$ = "ADDR(NIL)",
     1594+    6192                                         @ASSOC_VAR_LTS$ = "ADDR(NIL)",
     1595+    6193                                         @ASSOC_REPORT_LTS$ = "ADDR(NIL)",
     1596+    6194                                         @ERROR         = '0'B,
     1597+    6195                                         @LINE          = COMCOM.CURRENT.LINE,
     1598+    6196                                         @COLUMN        = COMCOM.CURRENT.COLUMN,
     1599+    6197                                         @LINK          = "ADDR(NIL)");
     1600+    6198           DO;
     1601+    6199             @POINTER -> DEFERED_IDENTIFIER.ID = %DEFERED_IDENTIFIER;
     1602+    6200             @POINTER -> DEFERED_IDENTIFIER.DEFERED_ID$ = @DEFERED_ID$;
     1603+    6201             @POINTER -> DEFERED_IDENTIFIER.ASSOC_VAR_LTS$ = @ASSOC_VAR_LTS$;
     1604+    6202             @POINTER -> DEFERED_IDENTIFIER.ASSOC_REPORT_LTS$ = @ASSOC_REPORT_LTS$;
     1605+    6203             @POINTER -> DEFERED_IDENTIFIER.LINE = @LINE;
     1606+    6204             @POINTER -> DEFERED_IDENTIFIER.COLUMN = @COLUMN;
     1607+    6205             @POINTER -> DEFERED_IDENTIFIER.LINK = @LINK;
     1608+    6206             @POINTER -> DEFERED_IDENTIFIER.B = '0'B;
     1609+    6207             @POINTER -> DEFERED_IDENTIFIER.B.ERROR = @ERROR;
     1610+    6208           END;
     1611+    6209         %MEND;
     1612+    6210
     1613+    6211         %MACRO INIT_DEFERED_SUM_CLAUSE_LIST (@POINTER      =,
     1614+    6212                                              @SUM_CLAUSE_LIST$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:510  
     1615+    6213                                              @ASSOC_VAR_LTS$ = "ADDR(NIL)",
     1616+    6214                                              @ASSOC_REPORT_LTS$ = "ADDR(NIL)",
     1617+    6215                                              @ASSOC_01_LTS$ = "ADDR(NIL)",
     1618+    6216                                              @ERROR         = '0'B,
     1619+    6217                                              @LINE          = COMCOM.CURRENT.LINE,
     1620+    6218                                              @COLUMN       = COMCOM.CURRENT.COLUMN,
     1621+    6219                                              @LINK          = "ADDR(NIL)");
     1622+    6220           DO;
     1623+    6221             @POINTER -> DEFERED_SUM_CLAUSE_LIST.ID = %DEFERED_SUM_CLAUSE_LIST;
     1624+    6222             @POINTER -> DEFERED_SUM_CLAUSE_LIST.SUM_CLAUSE_LIST$ = @SUM_CLAUSE_LIST$;
     1625+    6223             @POINTER -> DEFERED_SUM_CLAUSE_LIST.ASSOC_VAR_LTS$ = @ASSOC_VAR_LTS$;
     1626+    6224             @POINTER -> DEFERED_SUM_CLAUSE_LIST.ASSOC_REPORT_LTS$ = @ASSOC_REPORT_LTS$;
     1627+    6225             @POINTER -> DEFERED_SUM_CLAUSE_LIST.ASSOC_01_LTS$ = @ASSOC_01_LTS$;
     1628+    6226             @POINTER -> DEFERED_SUM_CLAUSE_LIST.B = '0'B;
     1629+    6227             @POINTER -> DEFERED_SUM_CLAUSE_LIST.B.ERROR = @ERROR;
     1630+    6228             @POINTER -> DEFERED_SUM_CLAUSE_LIST.LINE = @LINE;
     1631+    6229             @POINTER -> DEFERED_SUM_CLAUSE_LIST.COLUMN = @COLUMN;
     1632+    6230             @POINTER -> DEFERED_SUM_CLAUSE_LIST.LINK = @LINK;
     1633+    6231           END;
     1634+    6232         %MEND;
     1635+    6233
     1636+    6234
     1637+    6235         %MACRO INIT_DEFERED_SUM_CLAUSE      (@POINTER      =,
     1638+    6236                                              @DEFERED_ID$ = "ADDR(NIL)",
     1639+    6237                                              @SUM_UPON$ = "ADDR(NIL)",
     1640+    6238                                              @SUM_RESET$ = "ADDR(NIL)",
     1641+    6239                                              @ERROR         = '0'B,
     1642+    6240                                              @RESET_ID      = '0'B,
     1643+    6241                                              @RESET_FINAL   = '0'B,
     1644+    6242                                              @LINE          = COMCOM.CURRENT.LINE,
     1645+    6243                                              @COLUMN        = COMCOM.CURRENT.COLUMN,
     1646+    6244                                              @LINK          = "ADDR(NIL)");
     1647+    6245           DO;
     1648+    6246             @POINTER -> DEFERED_SUM_CLAUSE.ID = %DEFERED_SUM_CLAUSE;
     1649+    6247             @POINTER -> DEFERED_SUM_CLAUSE.DEFERED_ID$ = @DEFERED_ID$;
     1650+    6248             @POINTER -> DEFERED_SUM_CLAUSE.SUM_UPON$ = @SUM_UPON$;
     1651+    6249             @POINTER -> DEFERED_SUM_CLAUSE.SUM_RESET$ = @SUM_RESET$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:511  
     1652+    6250             @POINTER -> DEFERED_SUM_CLAUSE.B = '0'B;
     1653+    6251             @POINTER -> DEFERED_SUM_CLAUSE.B.ERROR = @ERROR;
     1654+    6252             @POINTER -> DEFERED_SUM_CLAUSE.B.RESET_ID = @RESET_ID;
     1655+    6253             @POINTER -> DEFERED_SUM_CLAUSE.B.RESET_FINAL = @RESET_FINAL;
     1656+    6254             @POINTER -> DEFERED_SUM_CLAUSE.LINE = @LINE;
     1657+    6255             @POINTER -> DEFERED_SUM_CLAUSE.COLUMN = @COLUMN;
     1658+    6256             @POINTER -> DEFERED_SUM_CLAUSE.LINK = @LINK;
     1659+    6257           END;
     1660+    6258         %MEND;
     1661+    6259
     1662+    6260
     1663+    6261         %MACRO NEW_LX_CD_INPUT  (@POINTER = );
     1664+    6262           DO;
     1665+    6263             %NEW(@POINTER = @POINTER,
     1666+    6264                  @TEMPLATE = LX_CD_INPUT );
     1667+    6265
     1668+    6266             @POINTER -> LX_CD_INPUT.CD_NAME$ = ADDR(NIL);
     1669+    6267             @POINTER -> LX_CD_INPUT.BLOCK$   = ADDR(NIL);
     1670+    6268             @POINTER -> LX_CD_INPUT.ID       = %LX_CD_INPUT;
     1671+    6269             @POINTER -> LX_CD_INPUT.B        = '0'B;
     1672+    6270             DO I = 0 TO %CD_INPUT_OPTION - 1;
     1673+    6271               @POINTER -> LX_CD_INPUT.INPUT_FIELDS$(I) = ADDR(NIL);
     1674+    6272             END;
     1675+    6273           END;
     1676+    6274         %MEND;
     1677+    6275
     1678+    6276         %MACRO NEW_LX_CD_OUTPUT (@POINTER = );
     1679+    6277           DO;
     1680+    6278             %NEW(@POINTER = @POINTER,
     1681+    6279                  @TEMPLATE = LX_CD_OUTPUT);
     1682+    6280
     1683+    6281             @POINTER -> LX_CD_OUTPUT.CD_NAME$ = ADDR(NIL);
     1684+    6282             @POINTER -> LX_CD_OUTPUT.BLOCK$   = ADDR(NIL);
     1685+    6283             @POINTER -> LX_CD_OUTPUT.ID       = %LX_CD_OUTPUT;
     1686+    6284             @POINTER -> LX_CD_OUTPUT.B        = '0'B;
     1687+    6285             DO I = 0 TO %CD_OUTPUT_OPTION + 1;
     1688+    6286               @POINTER -> LX_CD_OUTPUT.OUTPUT_FIELDS$(I) = ADDR(NIL);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:512  
     1689+    6287             END;
     1690+    6288           END;
     1691+    6289         %MEND;
     1692+    6290
     1693+    6291
     1694+    6292         %MACRO NEW_LX_CD_I_O (@POINTER = );
     1695+    6293           DO;
     1696+    6294             %NEW(@POINTER = @POINTER,
     1697+    6295                  @TEMPLATE = LX_CD_I_O);
     1698+    6296
     1699+    6297             @POINTER -> LX_CD_I_O.CD_NAME$ = ADDR(NIL);
     1700+    6298             @POINTER -> LX_CD_I_O.BLOCK$   = ADDR(NIL);
     1701+    6299             @POINTER -> LX_CD_I_O.ID       = %LX_CD_I_O;
     1702+    6300             @POINTER -> LX_CD_I_O.B        = '0'B;
     1703+    6301             DO I = 0 TO %CD_I_O_OPTION - 1;
     1704+    6302               @POINTER -> LX_CD_I_O.I_O_FIELDS$(I) = ADDR(NIL);
     1705+    6303             END;
     1706+    6304           END;
     1707+    6305         %MEND;
     1708+    6306
     1709+    6307
     1710+    6308
     1711+    6309        %MACRO INIT_ADD_STMT ( @POINTER = );
     1712+    6310          DO;
     1713+    6311            @POINTER -> ADD_STMT.ID = %ADD_STMT;
     1714+    6312            @POINTER -> ADD_STMT.KEY_WORD$ = ADDR(NIL);
     1715+    6313            @POINTER -> ADD_STMT.SENDING$ = ADDR(NIL);
     1716+    6314            @POINTER -> ADD_STMT.RECEIVING$ = ADDR(NIL);
     1717+    6315            @POINTER -> ADD_STMT.TYPE = %ADD_TO;
     1718+    6316          END;
     1719+    6317        %MEND;
     1720+    6318
     1721+    6319
     1722+    6320        %MACRO INIT_CALL_STMT ( @POINTER = );
     1723+    6321          DO;
     1724+    6322            @POINTER -> CALL_STMT.ID = %CALL_STMT;
     1725+    6323            @POINTER -> CALL_STMT.KEY_WORD$ = ADDR(NIL);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:513  
     1726+    6324            @POINTER -> CALL_STMT.PROC_NAME$ = ADDR(NIL);
     1727+    6325            @POINTER -> CALL_STMT.ARG_LIST$ = ADDR(NIL);
     1728+    6326          END;
     1729+    6327        %MEND;
     1730+    6328
     1731+    6329
     1732+    6330        %MACRO INIT_DEFERED_QUAL_ID (@POINTER =,
     1733+    6331                                     @QUAL_ID_LIST$ = "ADDR(NIL)",
     1734+    6332                                     @ASSOC_VAR_ST$ = "ADDR(NIL)",
     1735+    6333                                     @ILL$          = "ADDR(NIL)",
     1736+    6334                                     @BERROR        = '0'B,
     1737+    6335                                     @LINE          = COMCOM.CURRENT.LINE,
     1738+    6336                                     @COLUMN        = COMCOM.CURRENT.COLUMN,
     1739+    6337                                     @LINK          = "ADDR(NIL)");
     1740+    6338
     1741+    6339           DO;
     1742+    6340             @POINTER -> DEFERED_QUAL_ID.ID            = %DEFERED_QUAL_ID;
     1743+    6341             @POINTER -> DEFERED_QUAL_ID.QUAL_ID_LIST$ = @QUAL_ID_LIST$;
     1744+    6342             @POINTER -> DEFERED_QUAL_ID.ASSOC_VAR_ST$ = @ASSOC_VAR_ST$;
     1745+    6343             @POINTER -> DEFERED_QUAL_ID.ILL$          = @ILL$;
     1746+    6344             @POINTER -> DEFERED_QUAL_ID.B             = '0'B;
     1747+    6345             @POINTER -> DEFERED_QUAL_ID.B.ERROR       = @BERROR;
     1748+    6346             @POINTER -> DEFERED_QUAL_ID.LINE          = @LINE;
     1749+    6347             @POINTER -> DEFERED_QUAL_ID.COLUMN        = @COLUMN;
     1750+    6348             @POINTER -> DEFERED_QUAL_ID.LINK          = @LINK;
     1751+    6349           END;
     1752+    6350
     1753+    6351        %MEND;
     1754+    6352
     1755+    6353
     1756+    6354        %MACRO INIT_DELETE_STMT (@POINTER = );
     1757+    6355          DO;
     1758+    6356            @POINTER -> DELETE_STMT.ID = %DELETE_STMT;
     1759+    6357            @POINTER -> DELETE_STMT.KEY_WORD$ = ADDR(NIL);
     1760+    6358            @POINTER -> DELETE_STMT.FILE_NAME$ = ADDR(NIL);
     1761+    6359          END;
     1762+    6360        %MEND;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:514  
     1763+    6361
     1764+    6362
     1765+    6363        %MACRO INIT_LX_LARGE (@POINTER=);
     1766+    6364          DO;
     1767+    6365            @POINTER -> LX_LARGE.ID = %LX_LARGE;
     1768+    6366            @POINTER -> LX_LARGE.LARGE_ITEM$ = ADDR(NIL);
     1769+    6367            @POINTER -> LX_LARGE.LINK = ADDR(NIL);
     1770+    6368          END;
     1771+    6369        %MEND;
     1772+    6370
     1773+    6371
     1774+    6372        %MACRO INIT_LX_LIST (@POINTER=,
     1775+    6373                             @TAIL$ = "ADDR(NIL)",
     1776+    6374                             @HEAD$ = "ADDR(NIL)",
     1777+    6375                             @LINK  = "ADDR(NIL)",
     1778+    6376                             @COUNT = 0,
     1779+    6377                             @TYPE = 0);
     1780+    6378          DO;
     1781+    6379            @POINTER -> LX_LIST.ID = %LX_LIST;
     1782+    6380            @POINTER -> LX_LIST.B  = '0'B;
     1783+    6381            @POINTER -> LX_LIST.TAIL$ = @TAIL$;
     1784+    6382            @POINTER -> LX_LIST.HEAD$ = @HEAD$;
     1785+    6383            @POINTER -> LX_LIST.LINK  = @LINK;
     1786+    6384            @POINTER -> LX_LIST.COUNT = @COUNT;
     1787+    6385          END;
     1788+    6386        %MEND;
     1789+    6387
     1790+    6388
     1791+    6389
     1792+    6390
     1793+    6391        %MACRO INIT_LX_ETT_ITEM ( @POINTER = ,
     1794+    6392                                  @TYPE    = %TYT ,
     1795+    6393                                  @LINK    = "ADDR(NIL)",
     1796+    6394                                  @ETT$    = "ADDR(NIL)" ,
     1797+    6395                                  @BY_CONTENT_ILS_LIST$ = "ADDR(NIL)",
     1798+    6396                                  @ROUND   = ,
     1799+    6397                                  @REFMOD  = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:515  
     1800+    6398                                  @ALL     = ,
     1801+    6399                                  @LINE    = COMCOM.CURRENT.LINE,
     1802+    6400                                  @COLUMN  = COMCOM.CURRENT.COLUMN);
     1803+    6401          DO;
     1804+    6402            @POINTER -> LX_ETT_ITEM.ID   = %LX_ETT_ITEM;
     1805+    6403            @POINTER -> LX_ETT_ITEM.B    = '0'B;
     1806+    6404            @POINTER -> LX_ETT_ITEM.TYPE = @TYPE;
     1807+    6405            @POINTER -> LX_ETT_ITEM.LINK = @LINK;
     1808+    6406            @POINTER -> LX_ETT_ITEM.ETT$ = @ETT$;
     1809+    6407            @POINTER -> LX_ETT_ITEM.BY_CONTENT_ILS_LIST$ =
     1810+    6408                                   @BY_CONTENT_ILS_LIST$ ;
     1811+    6409            @POINTER -> LX_ETT_ITEM.LINE = @LINE;
     1812+    6410            @POINTER -> LX_ETT_ITEM.COLUMN = @COLUMN;
     1813+    6411             %IF TEXTCHAR(@ROUND) ~= '';
     1814+    6412               @POINTER -> LX_ETT_ITEM.B.ROUND = @ROUND;
     1815+    6413             %ENDIF;
     1816+    6414
     1817+    6415             %IF TEXTCHAR(@ALL) ~= '';
     1818+    6416               @POINTER -> LX_ETT_ITEM.B.ALL = @ALL;
     1819+    6417             %ENDIF;
     1820+    6418
     1821+    6419             %IF TEXTCHAR(@REFMOD) ~= '';
     1822+    6420               @POINTER -> LX_ETT_ITEM.B.REFMOD = @REFMOD;
     1823+    6421             %ENDIF;
     1824+    6422          END;
     1825+    6423        %MEND;
     1826+    6424
     1827+    6425
     1828+    6426
     1829+    6427        %MACRO INIT_LX_TERMINAL ( @POINTER = ,
     1830+    6428                                  @TYPE    = %TYT ,
     1831+    6429                                  @BERROR  = ,
     1832+    6430                                  @LINK    = "ADDR(NIL)",
     1833+    6431                                  @LA_ITEM = ,
     1834+    6432                                  @ST$     = "ADDR(NIL)" ,
     1835+    6433                                  @SYMBOL  = %RSV_WRD_ZEROES,
     1836+    6434                                  @DNT$    = "ADDR(NIL)" ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:516  
     1837+    6435                                  @LINE    = COMCOM.CURRENT.LINE,
     1838+    6436                                  @COLUMN  = COMCOM.CURRENT.COLUMN);
     1839+    6437          DO;
     1840+    6438            @POINTER -> LX_TERMINAL.ID     = %LX_TERMINAL;
     1841+    6439            @POINTER -> LX_TERMINAL.B      = '0'B;
     1842+    6440            %IF (TEXTCHAR(@BERROR) ~= '');
     1843+    6441               @POINTER -> LX_TERMINAL.B.ERROR = @BERROR;
     1844+    6442            %ENDIF;
     1845+    6443            @POINTER -> LX_TERMINAL.TYPE   = @TYPE;
     1846+    6444            %IF (TEXTCHAR(@LA_ITEM) = '');
     1847+    6445              @POINTER -> LX_TERMINAL.LINK   = @LINK;
     1848+    6446            %ENDIF;
     1849+    6447            @POINTER -> LX_TERMINAL.ST$    = @ST$ ;
     1850+    6448            @POINTER -> LX_TERMINAL.SYMBOL = @SYMBOL;
     1851+    6449            @POINTER -> LX_TERMINAL.DNT$   = @DNT$;
     1852+    6450            @POINTER -> LX_TERMINAL.LINE   = @LINE;
     1853+    6451            @POINTER -> LX_TERMINAL.COLUMN = @COLUMN;
     1854+    6452          END;
     1855+    6453        %MEND;
     1856+    6454
     1857+    6455
     1858+    6456
     1859+    6457        %MACRO INIT_BINARY_OP (@POINTER = "ADDR(TEMP_LX_NODE)",
     1860+    6458                               @BERR    = ,
     1861+    6459                               @HIGH_LEV =,
     1862+    6460                               @LINE    = "COMCOM.CURRENT.LINE",
     1863+    6461                               @COLUMN  = "COMCOM.CURRENT.COLUMN",
     1864+    6462                               @ROP$    = "ADDR(NIL)",
     1865+    6463                               @LOP$    = "ADDR(NIL)",
     1866+    6464                               @OP      = %OP_PLUS,
     1867+    6465                               @LINK    = "ADDR(NIL)");
     1868+    6466          DO;
     1869+    6467            @POINTER -> BINARY_OP.ID      = %BINARY_OP;
     1870+    6468            @POINTER -> BINARY_OP.B       = '0'B;
     1871+    6469            %IF (TEXTCHAR(@BERR) ~= '');
     1872+    6470              @POINTER -> BINARY_OP.B.ERROR = @BERR;
     1873+    6471            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:517  
     1874+    6472            %IF (TEXTCHAR(@HIGH_LEV) ~= '');
     1875+    6473              @POINTER -> BINARY_OP.B.HIGH_LEV = @HIGH_LEV;
     1876+    6474            %ENDIF;
     1877+    6475            @POINTER -> BINARY_OP.LINE    = @LINE;
     1878+    6476            @POINTER -> BINARY_OP.COLUMN  = @COLUMN;
     1879+    6477            @POINTER -> BINARY_OP.ROP$    = @ROP$;
     1880+    6478            @POINTER -> BINARY_OP.LOP$    = @LOP$;
     1881+    6479            @POINTER -> BINARY_OP.OP      = @OP;
     1882+    6480            @POINTER -> BINARY_OP.LINK    = @LINK;
     1883+    6481          END;
     1884+    6482        %MEND;
     1885+    6483
     1886+    6484
     1887+    6485        %MACRO INIT_MULTIPLY_STMT ( @POINTER = );
     1888+    6486          DO;
     1889+    6487            @POINTER -> MULTIPLY_STMT.ID = %MULTIPLY_STMT;
     1890+    6488            @POINTER -> MULTIPLY_STMT.KEY_WORD$ = ADDR(NIL);
     1891+    6489            @POINTER -> MULTIPLY_STMT.SENDING$ = ADDR(NIL);
     1892+    6490            @POINTER -> MULTIPLY_STMT.BY$      = ADDR(NIL);
     1893+    6491            @POINTER -> MULTIPLY_STMT.GIVING$  = ADDR(NIL);
     1894+    6492          END;
     1895+    6493        %MEND;
     1896+    6494
     1897+    6495
     1898+    6496        %MACRO INIT_READ_STMT (@POINTER = );
     1899+    6497          DO;
     1900+    6498            @POINTER -> READ_STMT.ID = %READ_STMT;
     1901+    6499            @POINTER -> READ_STMT.KEY_WORD$ = ADDR(NIL);
     1902+    6500            @POINTER -> READ_STMT.FILE_NAME$ = ADDR(NIL);
     1903+    6501            @POINTER -> READ_STMT.NEXT$ = ADDR(NIL);
     1904+    6502            @POINTER -> READ_STMT.INTO_IDENT$ = ADDR(NIL);
     1905+    6503            @POINTER -> READ_STMT.KEY_ID$ = ADDR(NIL);
     1906+    6504          END;
     1907+    6505        %MEND;
     1908+    6506
     1909+    6507
     1910+    6508        %MACRO INIT_REWRITE_STMT (@POINTER = );
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:518  
     1911+    6509          DO;
     1912+    6510            @POINTER -> REWRITE_STMT.ID = %REWRITE_STMT;
     1913+    6511            @POINTER -> REWRITE_STMT.KEY_WORD$ = ADDR(NIL);
     1914+    6512            @POINTER -> REWRITE_STMT.IDENT$ = ADDR(NIL);
     1915+    6513            @POINTER -> REWRITE_STMT.FROM_IDENT$ = ADDR(NIL);
     1916+    6514          END;
     1917+    6515        %MEND;
     1918+    6516
     1919+    6517
     1920+    6518        %MACRO INIT_START_STMT (@POINTER = );
     1921+    6519          DO;
     1922+    6520            @POINTER -> START_STMT.ID = %START_STMT;
     1923+    6521            @POINTER -> START_STMT.KEY_WORD$ = ADDR(NIL);
     1924+    6522            @POINTER -> START_STMT.FILE_NAME$ = ADDR(NIL);
     1925+    6523            @POINTER -> START_STMT.KEY$ = ADDR(NIL);
     1926+    6524          END;
     1927+    6525        %MEND;
     1928+    6526
     1929+    6527
     1930+    6528        %MACRO INIT_STRING_STMT (@POINTER = );
     1931+    6529          DO;
     1932+    6530            @POINTER -> STRING_STMT.ID = %STRING_STMT;
     1933+    6531            @POINTER -> STRING_STMT.KEY_WORD$ = ADDR(NIL);
     1934+    6532            @POINTER -> STRING_STMT.STRING_LIST$ = ADDR(NIL);
     1935+    6533            @POINTER -> STRING_STMT.INTO$ = ADDR(NIL);
     1936+    6534            @POINTER -> STRING_STMT.POINTER$ = ADDR(NIL);
     1937+    6535          END;
     1938+    6536        %MEND;
     1939+    6537
     1940+    6538        %MACRO INIT_SUBTRACT_STMT ( @POINTER = );
     1941+    6539          DO;
     1942+    6540            @POINTER -> SUBTRACT_STMT.ID = %SUBTRACT_STMT;
     1943+    6541            @POINTER -> SUBTRACT_STMT.KEY_WORD$ = ADDR(NIL);
     1944+    6542            @POINTER -> SUBTRACT_STMT.SENDING$ = ADDR(NIL);
     1945+    6543            @POINTER -> SUBTRACT_STMT.FROM$ = ADDR(NIL);
     1946+    6544            @POINTER -> SUBTRACT_STMT.RECEIVING$ = ADDR(NIL);
     1947+    6545            @POINTER -> SUBTRACT_STMT.TYPE = %SUBTRACT_FROM;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:519  
     1948+    6546          END;
     1949+    6547        %MEND;
     1950+    6548
     1951+    6549
     1952+    6550
     1953+    6551        %MACRO INIT_UNARY_OP (@POINTER = "ADDR(TEMP_LX_NODE)",
     1954+    6552                               @BERR   = ,
     1955+    6553                               @HIGH_LEV = ,
     1956+    6554                               @LINE   = "COMCOM.CURRENT.LINE",
     1957+    6555                               @COLUMN = "COMCOM.CURRENT.COLUMN",
     1958+    6556                               @LOP$   = "ADDR(NIL)",
     1959+    6557                               @OP     = %OP_UNARY_MINUS,
     1960+    6558                               @LINK   = "ADDR(NIL)");
     1961+    6559          DO;
     1962+    6560            @POINTER -> UNARY_OP.ID       = %UNARY_OP;
     1963+    6561            @POINTER -> UNARY_OP.B        = '0'B;
     1964+    6562            %IF (TEXTCHAR(@BERR) ~= '');
     1965+    6563              @POINTER -> UNARY_OP.B.ERROR  = @BERR;
     1966+    6564            %ENDIF;
     1967+    6565            %IF (TEXTCHAR(@HIGH_LEV) ~= '');
     1968+    6566              @POINTER -> UNARY_OP.B.HIGH_LEV = TRUE;
     1969+    6567            %ENDIF;
     1970+    6568            @POINTER -> UNARY_OP.LINE     = @LINE;
     1971+    6569            @POINTER -> UNARY_OP.COLUMN   = @COLUMN;
     1972+    6570            @POINTER -> UNARY_OP.LOP$     = @LOP$;
     1973+    6571            @POINTER -> UNARY_OP.OP       = @OP;
     1974+    6572            @POINTER -> UNARY_OP.LINK     = @LINK;
     1975+    6573          END;
     1976+    6574        %MEND;
     1977+    6575
     1978+    6576
     1979+    6577
     1980+    6578        %MACRO INIT_UNSTRING_STMT (@POINTER = );
     1981+    6579          DO;
     1982+    6580            @POINTER -> UNSTRING_STMT.ID   = %UNSTRING_STMT;
     1983+    6581            @POINTER -> UNSTRING_STMT.KEY_WORD$ = ADDR(NIL);
     1984+    6582            @POINTER -> UNSTRING_STMT.IDENT$ = ADDR(NIL);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:520  
     1985+    6583            @POINTER -> UNSTRING_STMT.DELIM_LIST$ = ADDR(NIL);
     1986+    6584            @POINTER -> UNSTRING_STMT.INTO_LIST$ = ADDR(NIL);
     1987+    6585            @POINTER -> UNSTRING_STMT.POINTER$ = ADDR(NIL);
     1988+    6586            @POINTER -> UNSTRING_STMT.TALLYING$ = ADDR(NIL);
     1989+    6587          END;
     1990+    6588        %MEND;
     1991+    6589
     1992+    6590
     1993+    6591
     1994+    6592
     1995+    6593        %MACRO INIT_ILS_LIST (@POINTER =);
     1996+    6594          DO;
     1997+    6595            @POINTER -> ILS_LIST.ID            = %ILS_LIST;
     1998+    6596            @POINTER -> ILS_LIST.HEAD$         = ADDR(NIL);
     1999+    6597            @POINTER -> ILS_LIST.TAIL$         = ADDR(NIL);
     2000+    6598            @POINTER -> ILS_LIST.LINK          = ADDR(NIL);
     2001+    6599          END;
     2002+    6600        %MEND;
     2003+    6601
     2004+    6602
     2005+    6603        %MACRO INIT_COMPUTE_STMT (@POINTER =,
     2006+    6604                                  @EXPR$ = "ADDR(NIL)",
     2007+    6605                                  @IDENT_LIST$ = "ADDR(NIL)",
     2008+    6606                                  @KEY_WORD$ = "ADDR(NIL)");
     2009+    6607          DO;
     2010+    6608            @POINTER -> COMPUTE_STMT.ID = %COMPUTE_STMT;
     2011+    6609            @POINTER -> COMPUTE_STMT.EXPR$ = @EXPR$;
     2012+    6610            @POINTER -> COMPUTE_STMT.IDENT_LIST$ = @IDENT_LIST$;
     2013+    6611            @POINTER -> COMPUTE_STMT.KEY_WORD$ = @KEY_WORD$;
     2014+    6612          END;
     2015+    6613        %MEND;
     2016+    6614
     2017+    6615        %MACRO INIT_DIVIDE_STMT ( @POINTER =,
     2018+    6616                                  @KEY_WORD$ = "ADDR(NIL)",
     2019+    6617                                  @DIVISOR$ = "ADDR(NIL)",
     2020+    6618                                  @QUOTIENT_LIST$ = "ADDR(NIL)",
     2021+    6619                                  @DIVIDEND_LIST$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:521  
     2022+    6620                                  @REMAINDER$ = "ADDR(NIL)");
     2023+    6621          DO;
     2024+    6622            @POINTER -> DIVIDE_STMT.ID = %DIVIDE_STMT;
     2025+    6623            @POINTER -> DIVIDE_STMT.KEY_WORD$ = @KEY_WORD$;
     2026+    6624            @POINTER -> DIVIDE_STMT.DIVISOR$ = @DIVISOR$;
     2027+    6625            @POINTER -> DIVIDE_STMT.QUOTIENT_LIST$ = @QUOTIENT_LIST$;
     2028+    6626            @POINTER -> DIVIDE_STMT.DIVIDEND_LIST$ = @DIVIDEND_LIST$;
     2029+    6627            @POINTER -> DIVIDE_STMT.REMAINDER$ = @REMAINDER$;
     2030+    6628          END;
     2031+    6629        %MEND;
     2032+    6630
     2033+    6631
     2034+    6632        %MACRO INIT_WRITE_STMT (@POINTER =);
     2035+    6633          DO;
     2036+    6634            @POINTER -> WRITE_STMT.ID = %WRITE_STMT;
     2037+    6635            @POINTER -> WRITE_STMT.KEY_WORD$ = ADDR(NIL);
     2038+    6636            @POINTER -> WRITE_STMT.IDENT$    = ADDR(NIL);
     2039+    6637            @POINTER -> WRITE_STMT.FROM_IDENT$ = ADDR(NIL);
     2040+    6638            @POINTER -> WRITE_STMT.LINES$    = ADDR(NIL);
     2041+    6639          END;
     2042+    6640        %MEND;
     2043+    6641
     2044+    6642
     2045+    6643
     2046+    6644        %INCLUDE Z8A_LEX_SYMB;
        1+    6645        /*M* Z8A_LEX_SYMB => Data structures passed between the SCANNER & LEX */
        2+    6646        /*T***********************************************************/
        3+    6647        /*T*                                                         */
        4+    6648        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5+    6649        /*T*                                                         */
        6+    6650        /*T***********************************************************/
        7+    6651
        8+    6652        %EQU MAX_SYMBOL_SIZE = 322;
        9+    6653        %EQU MAX_SYMBOL_SIZE_PLUS_1 = MAX_SYMBOL_SIZE + 2;
              6653            /* at least 1 char  and even number of words */
       10+    6654        %EQU LS_NORMAL = 0;
       11+    6655        %EQU LS_PERIOD_BEFORE_COMMENT_ENTRY = 1;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:522  
       12+    6656        %EQU LS_COMMENT_ENTRY = 2;
       13+    6657        %EQU LS_PICK_UP_SAVED_SYMBOL = 3;
       14+    6658        %EQU LS_PICTURE_OR_IS = 4;
       15+    6659
       16+    6660        %MACRO LEX_SYMBOL_INFO;
       17+    6661             2 NEXT$                 PTR,
       18+    6662             2 TYPE                  UBIN WORD,
       19+    6663
       20+    6664             2 B,
       21+    6665               3 DELIM_ERROR         BOOLEAN,
       22+    6666               3 REPLACED_TOKEN      BOOLEAN,
       23+    6667               3 DEBUG_TOKEN         BOOLEAN,
       24+    6668               3 CONTINUED_TOKEN     BOOLEAN,
       25+    6669               3 COMMENT_TOKEN       BOOLEAN,
       26+    6670               3 *                   BIT(31) UNAL,
       27+    6671             2 FLAGS REDEF B BIT(36) UNAL,
       28+    6672
       29+    6673             2 LEVEL                 SBIN WORD,
       30+    6674             2 LINE                  SBIN WORD,
       31+    6675             2 COLUMN                SBIN WORD,
       32+    6676             2 END_LINE              SBIN WORD,
       33+    6677             2 END_COLUMN            SBIN WORD,
       34+    6678             2 SIZE                  SBIN WORD,
       35+    6679        %MEND;
       36+    6680
       37+    6681
       38+    6682    1   DCL 1 LEX_SYMBOL EXT ALIGNED,
       39+    6683             %LEX_SYMBOL_INFO;
       40+    6701    1        2 SYMBOL                CHAR(%MAX_SYMBOL_SIZE_PLUS_1) ;
       41+    6702    1   DCL 1 LEX_SYMBOL_WORDS REDEF LEX_SYMBOL,
       42+    6703             %LEX_SYMBOL_INFO;
       43+    6721    1        2 SYMBOL (0:%(MAX_SYMBOL_SIZE_PLUS_1/4 - 1))    UBIN WORD;
       44+    6722
       45+    6723
       46+    6724    1   DCL CURRENT_LEX_SYMBOL$ PTR EXT INIT(ADDR(LEX_SYMBOL));
       47+    6725
       48+    6726    1   DCL 1 BASED_LEX_SYMBOL BASED(CURRENT_LEX_SYMBOL$) ALIGNED,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:523  
       49+    6727             %LEX_SYMBOL_INFO;
       50+    6745    1        2 SYMBOL                CHAR(BASED_LEX_SYMBOL.SIZE);
       51+    6746
       52+    6747    1   DCL 1 BASED_LEX_SYMBOL_WORDS BASED(CURRENT_LEX_SYMBOL$) ALIGNED,
       53+    6748             %LEX_SYMBOL_INFO;
       54+    6766    1        2 SYMBOL (0:0)    UBIN WORD;
       55+    6767
       56+    6768    1   DCL 1 TEMP_LEX_SYMBOL EXT ALIGNED,
       57+    6769             %LEX_SYMBOL_INFO;
       58+    6787    1        2 SYMBOL                CHAR(%MAX_SYMBOL_SIZE_PLUS_1);
       59+    6788
       60+    6789    1   DCL 1 TEMP_LEX_SYMBOL2 EXT ALIGNED,
       61+    6790             %LEX_SYMBOL_INFO;
       62+    6808    1        2 SYMBOL                CHAR(%MAX_SYMBOL_SIZE_PLUS_1);
     2047+    6809
      494     6810        %INCLUDE Z8E_O1COM ;
        1+    6811        /*T***********************************************************/
        2+    6812        /*T*                                                         */
        3+    6813        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    6814        /*T*                                                         */
        5+    6815        /*T***********************************************************/
        6+    6816        /* LEX_O1COM -- Phase 1 Common Variables */
        7+    6817
        8+    6818
        9+    6819        /* Preprocessors for sign and comp defaults */
       10+    6820        %EQU SIGN_POS_TRAILING = 0;
       11+    6821        %EQU SIGN_POS_LEADING  = 1;
       12+    6822
       13+    6823        %EQU SIGN_TYPE_OVERPUNCH = 0;
       14+    6824        %EQU SIGN_TYPE_SEPARATE  = 1;
       15+    6825
       16+    6826        %EQU AREA_A_COLUMN_START = 7;
       17+    6827        %EQU AREA_B_COLUMN_START = 11 ;
              6827            /* Actual start is col. 12 but column 1 is actually col. 0 */
       18+    6828
       19+    6829        %SET PARSE_STACK_MAX = 2000;                          /*#29032*/
       20+    6830        %SET RED_STACK_MAX = 1400;                            /*#29032*/
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:524  
       21+    6831        %EQU INSRT_LEN_MAX = 100;
       22+    6832
       23+    6833        %IF INITIALIZE;
       25+    6835        %ELSE;
       26+    6836    1     DCL 1 O1COM ALIGNED SYMREF
       27+    6837        %ENDIF;
       28+    6838
       29+    6839    1        ,2 OP_SEG                PTR         /* ESC Triad */
       30+    6840                                          %IF INITIALIZE;
       32+    6842                                          %ENDIF;
       33+    6843    1        ,2 NEXT_SA               SBIN WORD    /* For Storage Allocation */
       34+    6844    1        ,2 NEXT_BYTE             UBIN WORD    /* 0, 1, 2, OR 3          */
       35+    6845    1        ,2 NEXT_HALF_BYTE        UBIN WORD    /* 0 or 1                 */
       36+    6846    1        ,2 LAST_BLOCK$           PTR   /* Last item on BLOCK$ list */
       37+    6847                                         %IF INITIALIZE;
       39+    6849                                         %ENDIF;
       40+    6850    1        ,2 LEVEL_NO              SBIN WORD
       41+    6851                                         %IF INITIALIZE;
       43+    6853                                         %ENDIF;
       44+    6854    1        ,2 SECTION$              PTR    /* Ptr to SECTION ST entry for PARA item */
       45+    6855                                          %IF INITIALIZE;
       47+    6857                                          %ENDIF;
       48+    6858    1        ,2 LINE_NO               UBIN WORD
       49+    6859                                          %IF INITIALIZE;
       51+    6861                                          %ENDIF;
       52+    6862    1        ,2 COLUMN_NO             UBIN WORD
              6862                 /* Ptr to start of current statement for LINOI items */
       53+    6863                                          %IF INITIALIZE;
       55+    6865                                          %ENDIF;
       56+    6866    1        ,2 STATEMENT_TYPE        UBIN WORD   /* Used for setting up LINOI items */
       57+    6867                                          %IF INITIALIZE;
       59+    6869                                          %ENDIF;
       60+    6870    1        ,2 RECORD_DCL            BIT(1) ALIGNED /* Data-name expected */
       61+    6871                                         %IF INITIALIZE;
       63+    6873                                         %ENDIF;
       64+    6874    1        ,2 PD_FLAG               BIT(1) ALIGNED
       65+    6875                                         %IF INITIALIZE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:525  
       67+    6877                                         %ENDIF;
       68+    6878    1        ,2 COMMA_DECIMAL_POINT   BIT(1) ALIGNED
              6878                 /* SPECIAL-NAMES section specifies comma to be used as decimal point */
       69+    6879                                        %IF INITIALIZE;
       71+    6881                                        %ENDIF;
       72+    6882    1        ,2 DATA_DECL_CONTEXT SBIN WORD  /* See preprocessor value below */
       73+    6883    1        ,2 ILS_LIST DALIGNED
       74+    6884    1          ,3 * (0:%(LENGTH_LX_ITEM - 1)) PTR ALIGNED
       75+    6885    1        ,2 DEBUGGING_MODE         BIT(1) ALIGNED
       76+    6886                                         %IF INITIALIZE;
       78+    6888                                         %ENDIF;
       79+    6889    1        ,2 CONDITION$             PTR ALIGNED
       80+    6890                                         %IF INITIALIZE;
       82+    6892                                         %ENDIF;
       83+    6893    1        ,2 CONDITION ALIGNED
       84+    6894    1           ,3 ACTIVE             BIT(1) ALIGNED
       85+    6895                                         %IF INITIALIZE;
       87+    6897                                         %ENDIF;
       88+    6898    1           ,3 ABBREV ALIGNED
       89+    6899    1              ,4 ALLOWED         BIT(1) ALIGNED
       90+    6900                                         %IF INITIALIZE;
       92+    6902                                         %ENDIF;
       93+    6903    1              ,4 SUBJECT$        PTR
       94+    6904    1              ,4 RELATION        SBIN WORD
       95+    6905
       96+    6906    1        ,2 OCCURS_DEPENDING$     PTR ALIGNED
       97+    6907                                        %IF INITIALIZE;
       99+    6909                                        %ENDIF;
      100+    6910    1        ,2 LEVEL_88_LIST$        PTR ALIGNED
      101+    6911                                        %IF INITIALIZE;
      103+    6913                                        %ENDIF;
      104+    6914    1        ,2 INDEX_HEAD$           PTR ALIGNED
      105+    6915                                        %IF INITIALIZE;
      107+    6917                                        %ENDIF;
      108+    6918    1        ,2 INDEX_TAIL$           PTR ALIGNED
      109+    6919                                        %IF INITIALIZE;
      111+    6921                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:526  
      112+    6922    1        ,2 KEYS$                 PTR ALIGNED
      113+    6923                                        %IF INITIALIZE;
      115+    6925                                        %ENDIF;
      116+    6926    1        ,2 CONTEXT_EVALUATE      BIT(1) ALIGNED
      117+    6927                                         %IF INITIALIZE;
      119+    6929                                         %ENDIF;
      120+    6930    1        ,2 EVALUATE_NOT_AE      BIT(1) ALIGNED
      121+    6931                                         %IF INITIALIZE;
      123+    6933                                         %ENDIF;
      124+    6934    1        ,2 VALUE$                PTR ALIGNED
      125+    6935                                        %IF INITIALIZE;
      127+    6937                                        %ENDIF;
      128+    6938    1        ,2 COLLATING_SEQ$        PTR ALIGNED
      129+    6939                                        %IF INITIALIZE;
      131+    6941                                        %ENDIF;
      132+    6942    1        ,2 CURRENT_FILE_LTS$     PTR ALIGNED
      133+    6943                                        %IF INITIALIZE;
      135+    6945                                        %ENDIF;
      136+    6946    1        ,2 CURRENT_ALT_KEY       BIT(1) ALIGNED
      137+    6947                                        %IF INITIALIZE;
      139+    6949                                        %ENDIF;
      140+    6950    1        ,2 PREVIOUS_ALT_KEY      BIT(1) ALIGNED
      141+    6951                                        %IF INITIALIZE;
      143+    6953                                        %ENDIF;
      144+    6954    1        ,2 LAST_SECTION$         PTR
      145+    6955                                        %IF INITIALIZE;
      147+    6957                                        %ENDIF;
      148+    6958    1        ,2 TALLY$                PTR
      149+    6959                                        %IF INITIALIZE;
      151+    6961                                        %ENDIF;
      152+    6962    1        ,2 LAST_SYMREF$          PTR
      153+    6963                                        %IF INITIALIZE;
      155+    6965                                        %ENDIF;
      156+    6966
      157+    6967    1        ,2 DISPLAY_SIGN_POS      SBIN WORD
      158+    6968                                        %IF INITIALIZE;
      160+    6970                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:527  
      161+    6971
      162+    6972    1        ,2 DISPLAY_SIGN_TYPE     SBIN WORD
      163+    6973                                        %IF INITIALIZE;
      165+    6975                                        %ENDIF;
      166+    6976
      167+    6977    1        ,2 COMP_4_SIGN_POS       SBIN WORD
      168+    6978                                        %IF INITIALIZE;
      170+    6980                                        %ENDIF;
      171+    6981
      172+    6982    1        ,2 COMP_DEFAULT          SBIN WORD
      173+    6983                                        %IF INITIALIZE;
      175+    6985                                        %ENDIF;
      176+    6986    1        ,2 CURRENT_PROC$         PTR
      177+    6987                                        %IF INITIALIZE;
      179+    6989                                        %ENDIF;
      180+    6990
      181+    6991    1        ,2 BLOCK$                PTR
      182+    6992                                        %IF INITIALIZE;
      184+    6994                                        %ENDIF;
      185+    6995    1        ,2 ENTRY$                PTR
      186+    6996                                        %IF INITIALIZE;
      188+    6998                                        %ENDIF;
      189+    6999    1        ,2 FIRST_PROG_QLT$       PTR
      190+    7000                                        %IF INITIALIZE;
      192+    7002                                        %ENDIF;
      193+    7003    1        ,2 SECTION_FOUND         ALIGNED
      194+    7004    1          ,3 WORKING_STORAGE     BOOLEAN
      195+    7005                                        %IF INITIALIZE;
      197+    7007                                        %ENDIF;
      198+    7008    1          ,3 LINKAGE_SECTION     BOOLEAN
      199+    7009                                        %IF INITIALIZE;
      201+    7011                                        %ENDIF;
      202+    7012    1          ,3 CONSTANT_SECTION    BOOLEAN
      203+    7013                                        %IF INITIALIZE;
      205+    7015                                        %ENDIF;
      206+    7016    1          ,3 FILE_SECTION        BOOLEAN
      207+    7017                                        %IF INITIALIZE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:528  
      209+    7019                                        %ENDIF;
      210+    7020    1          ,3 REPORT_SECTION      BOOLEAN
      211+    7021                                        %IF INITIALIZE;
      213+    7023                                        %ENDIF;
      214+    7024    1          ,3 SUB_SCHEMA          BOOLEAN
      215+    7025                                        %IF INITIALIZE;
      217+    7027                                        %ENDIF;
      218+    7028    1          ,3 COMMUNICATION       BOOLEAN
      219+    7029                                        %IF INITIALIZE;
      221+    7031                                        %ENDIF;
      222+    7032    1          ,3  DECLARATIVES       BOOLEAN
              7032                   /* True only when in Sections in the declaratives procedure. */
      223+    7033                                        %IF INITIALIZE;
      225+    7035                                        %ENDIF;
      226+    7036    1          ,3 * (0:27)            BOOLEAN
      227+    7037                                        %IF INITIALIZE;
      229+    7039                                        %ENDIF;
      230+    7040    1        ,2 CURRENT_REPORT_LTS$   PTR ALIGNED
      231+    7041                                        %IF INITIALIZE;
      233+    7043                                        %ENDIF;
      234+    7044    1        ,2 ACTION_LIST$          PTR ALIGNED
      235+    7045                                        %IF INITIALIZE;
      237+    7047                                        %ENDIF;
      238+    7048    1        ,2 REPORT_SOURCE$        PTR ALIGNED
      239+    7049                                        %IF INITIALIZE;
      241+    7051                                        %ENDIF;
      242+    7052    1        ,2 REPORT_DD$            PTR ALIGNED
      243+    7053                                        %IF INITIALIZE;
      245+    7055                                        %ENDIF;
      246+    7056    1        ,2 REPORT_SUM$           PTR ALIGNED
      247+    7057                                        %IF INITIALIZE;
      249+    7059                                        %ENDIF;
      250+    7060    1        ,2 USEP_NUMBER          UBIN(18)
      251+    7061                                        %IF INITIALIZE;
      253+    7063                                        %ENDIF;
      254+    7064    1        ,2 RVA_NUMBER            UBIN HALF
      255+    7065                                        %IF INITIALIZE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:529  
      257+    7067                                        %ENDIF;
      258+    7068    1       ,2 USEP$                 PTR  ALIGNED
      259+    7069                                       %IF INITIALIZE;
      261+    7071                                       %ENDIF;
      262+    7072    1       ,2 RVA_LINK$              PTR ALIGNED
      263+    7073                                        %IF INITIALIZE;
      265+    7075                                        %ENDIF;
      266+    7076    1       ,2 RVA$                  PTR ALIGNED
      267+    7077                                        %IF INITIALIZE;
      269+    7079                                        %ENDIF;
      270+    7080    1       ,2 DML_IA$              PTR ALIGNED
      271+    7081                                        %IF INITIALIZE;
      273+    7083                                        %ENDIF;
      274+    7084    1       ,2 DML_UWA$             PTR ALIGNED
      275+    7085                                        %IF INITIALIZE;
      277+    7087                                        %ENDIF;
      278+    7088    1       ,2 NILL_RETENTION$      PTR ALIGNED
      279+    7089                                        %IF INITIALIZE;
      281+    7091                                        %ENDIF;
      282+    7092    1       ,2 UWA_PLUS_ZERO$       PTR ALIGNED
      283+    7093                                        %IF INITIALIZE;
      285+    7095                                        %ENDIF;
      286+    7096    1       ,2 CONTROL_LIST$         PTR ALIGNED
      287+    7097                                        %IF INITIALIZE;
      289+    7099                                        %ENDIF;
      290+    7100    1       ,2 CONTROL_NAME$        PTR ALIGNED
      291+    7101                                        %IF INITIALIZE;
      293+    7103                                        %ENDIF;
      294+    7104    1       ,2 INITIATE_LIST$       PTR ALIGNED
      295+    7105                                        %IF INITIALIZE;
      297+    7107                                        %ENDIF;
      298+    7108    1       ,2 NILL_RVA             BIT(1) ALIGNED
      299+    7109                                        %IF INITIALIZE;
      301+    7111                                        %ENDIF;
      302+    7112    1       ,2 USE_REPORT$          PTR ALIGNED
      303+    7113                                        %IF INITIALIZE;
      305+    7115                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:530  
      306+    7116
      307+    7117    1         ,2 AUTHOR$                PTR ALIGNED
      308+    7118                                         %IF INITIALIZE;
      310+    7120                                         %ENDIF;
      311+    7121    1         , 2 PROG_ID_DNT$            PTR ALIGNED
      312+    7122                                         %IF INITIALIZE;
      314+    7124                                         %ENDIF;
      315+    7125    1       ,2 SEG_LIMIT            SBIN WORD
      316+    7126                                        %IF INITIALIZE;
      318+    7128                                        %ENDIF;
      319+    7129    1       ,2 BASE_LTS_LIST$       PTR
      320+    7130                                        %IF INITIALIZE;
      322+    7132                                        %ENDIF;
      323+    7133    1       ,2 CURRENT_SEG_ARRAY$   PTR ALIGNED
      324+    7134                                        %IF INITIALIZE;
      326+    7136                                        %ENDIF;
      327+    7137    1        ,2 AUTHOR_COMMENT      BOOLEAN
      328+    7138                                        %IF INITIALIZE;
      330+    7140                                        %ENDIF;
      331+    7141    1       ,2 CURRENT_SEG_LIMIT$   PTR ALIGNED
      332+    7142                                        %IF INITIALIZE;
      334+    7144                                        %ENDIF;
      335+    7145    1       ,2 ID_DIV_COUNT         SBIN WORD
      336+    7146                                        %IF INITIALIZE;
      338+    7148                                        %ENDIF;
      339+    7149    1        ,2 INSTAL_ON           BOOLEAN
      340+    7150                                        %IF INITIALIZE;
      342+    7152                                        %ENDIF;
      343+    7153    1        ,2 TPE_INTERFACE       BOOLEAN
      344+    7154                                        %IF INITIALIZE;
      346+    7156                                        %ENDIF;
      347+    7157    1        ,2 CD_INITIAL          BOOLEAN
      348+    7158                                        %IF INITIALIZE;
      350+    7160                                        %ENDIF;
      351+    7161    1       ,2 CURRENT_CD_ENTRY$    PTR ALIGNED
      352+    7162                                        %IF INITIALIZE;
      354+    7164                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:531  
      355+    7165    1       ,2 AREA_B_COLUMN_START  SBIN WORD
      356+    7166                                        %IF INITIALIZE;
      358+    7168                                        %ENDIF;
      359+    7169    1       ,2 AREA_A_COLUMN_START  SBIN WORD
      360+    7170                                        %IF INITIALIZE;
      362+    7172                                        %ENDIF;
      363+    7173    1       ,2 MARGIN_R             SBIN WORD
      364+    7174                                        %IF INITIALIZE;
      366+    7176                                        %ENDIF;
      367+    7177    1       ,2 OPEN_LTS$            PTR
      368+    7178                                        %IF INITIALIZE;
      370+    7180                                        %ENDIF;
      371+    7181    1       ,2 NILL_RVA_#           SBIN WORD
      372+    7182                                        %IF INITIALIZE;
      374+    7184                                        %ENDIF;
      375+    7185    1       ,2 CURRENT_SEGMENTC     UBIN WORD
      376+    7186                                        %IF INITIALIZE;
      378+    7188                                        %ENDIF;
      379+    7189    1       ,2 START_LENGTH_OF      BIT(1) ALIGNED
      380+    7190                                        %IF INITIALIZE;
      382+    7192                                        %ENDIF;
      383+    7193    1       ,2 STATE                SBIN WORD  /* Current parse state      */
      384+    7194                                        %IF INITIALIZE;
      386+    7196                                        %ENDIF;
      387+    7197    1       ,2 LA_CNT               SBIN WORD  /* # lookahead tokens scand */
      388+    7198                                        %IF INITIALIZE;
      390+    7200                                        %ENDIF;
      391+    7201    1       ,2 LA_PUT               SBIN WORD  /* next lookahead put index */
      392+    7202                                        %IF INITIALIZE;
      394+    7204                                        %ENDIF;
      395+    7205    1       ,2 LA_GET               SBIN WORD  /* next lookahead get index */
      396+    7206                                        %IF INITIALIZE;
      398+    7208                                        %ENDIF;
      399+    7209    1       ,2 REDUCTION            SBIN WORD  /* reduce production number */
      400+    7210    1       ,2 PARSE_STACK_IDX      SBIN WORD  /* Parse Stack Index        */
      401+    7211                                        %IF INITIALIZE;
      403+    7213                                        %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:532  
      404+    7214    1       ,2 ERRLINE              SBIN WORD  /* Data for Error Recovery. */
      405+    7215    1       ,2 ERRCOL               SBIN WORD  /* Data for Error Recovery. */
      406+    7216    1       ,2 ERR_LA_GET           SBIN WORD  /* Data for Error Recovery. */
      407+    7217    1       ,2 ERR_LA_PUT           SBIN WORD  /* Data for Error Recovery. */
      408+    7218    1       ,2 ERR_LA_CNT           SBIN WORD  /* Data for Error Recovery. */
      409+    7219    1       ,2 ERR_RECOVERY_IN_PROGRESS BIT (1) ALIGNED
      410+    7220                                        %IF INITIALIZE;
      412+    7222                                        %ENDIF;
      413+    7223    1       ,2 PARSE_ERROR_COUNT    SBIN WORD  /* Error Recovery Data      */
      414+    7224                                        %IF INITIALIZE;
      416+    7226                                        %ENDIF;
      417+    7227    1       ,2 ALT_PARSE_STACK_IDX  SBIN WORD  /* Alt Parse Stack Index.   */
      418+    7228    1       ,2 RED_STACK_TOP        SBIN WORD
      419+    7229                                        %IF INITIALIZE;
      421+    7231                                        %ENDIF;
      422+    7232    1       ,2 IED_FLAG             BIT (1) ALIGNED
      423+    7233                                        %IF INITIALIZE;
      425+    7235                                        %ENDIF;
      426+    7236    1       ,2 ALT_LX_TOP           SBIN WORD
      427+    7237    1       ,2 LX_TOP               SBIN WORD
      428+    7238
      429+    7239    1       ,2 CORRECTION
      430+    7240    1        ,3 LEN                                  SBIN WORD
      431+    7241                                        %IF INITIALIZE;
      433+    7243                                        %ENDIF;
      434+    7244    1        ,3 INDX                                 SBIN WORD
      435+    7245                                        %IF INITIALIZE;
      437+    7247                                        %ENDIF;
      438+    7248    1        ,3 SYM            (0: %INSRT_LEN_MAX)   SBIN HALF HALIGNED
      439+    7249
      440+    7250    1       ,2 LA_STK        (0: %LA_MAX)
      441+    7251    1        ,
      442+    7252              %LA_STK_INFO (LVL = 3) ;
      443+    7271    1         3 LINK                                 UBIN WORD
      444+    7272
      445+    7273    1       ,2 LA_STK_FIELDS (0: %LA_MAX) REDEF LA_STK
      446+    7274    1        ,3 ALL_BUT_LINK
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:533  
      447+    7275    1        ,
      448+    7276              %LA_STK_INFO (LVL = 4) ;
      449+    7295    1         3 LINK                                 UBIN WORD
      450+    7296
      451+    7297    1       ,2 RT_DESC_LIST$ PTR
      452+    7298                            %IF INITIALIZE;
      454+    7300                            %ENDIF;
      455+    7301    1       ,2 PSEUDO_TEXT_FLAG BIT (1) ALIGNED
      456+    7302                            %IF INITIALIZE;
      458+    7304                            %ENDIF;
      459+    7305    1       ,2 USE_SAVE_LABEL$ PTR
      460+    7306                            %IF INITIALIZE;
      462+    7308                            %ENDIF;
      463+    7309    1       ,2 USE_RESTORE_LABEL$ PTR
      464+    7310                            %IF INITIALIZE;
      466+    7312                            %ENDIF;
      467+    7313    1       ,2 SEG_INFO ALIGNED
      468+    7314    1         ,3 SEGMENT_FOUND (0:99) BIT (1)
      469+    7315                            %IF INITIALIZE;
      471+    7317                            %ENDIF;
      472+    7318    1       ,2 NEXT_CHAR              UBIN
      473+    7319                            %IF INITIALIZE;
      475+    7321                            %ENDIF;
      476+    7322    1       ,2 LAST_ITEM_GBCD         BOOLEAN
      477+    7323                            %IF INITIALIZE;
      479+    7325                            %ENDIF;
      480+    7326    1       ,2 REPLACE_BY_FLAG        BOOLEAN
      481+    7327                            %IF INITIALIZE;
      483+    7329                             %ENDIF;
      484+    7330    1       ,2 * (0:19)     SBIN /* RFU */
      485+    7331    1       ,2 PARSE_STACK (0: %PARSE_STACK_MAX) SBIN WORD
      486+    7332    1       ,2 ALT_PARSE_STACK (0: %PARSE_STACK_MAX) SBIN WORD
      487+    7333    1       ,2 RED_STACK       (0: %RED_STACK_MAX)   SBIN WORD
      488+    7334    1       ,2 LX_STK        (0: %LX_MAX)
      489+    7335    1        ,
      490+    7336              %LA_STK_INFO (LVL = 3) ;
      491+    7355    1         3 LINK                                 PTR
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:534  
      492+    7356            /* IMPORTANT NOTE - Do NOT add new O1COM entries here. Instead, add
      493+    7357               them in replacing words of the * array before O1COM.PARSE_STACK.
      494+    7358               This way, if LX_STK ever needs to be lengthened, it can be done
      495+    7359               more easily, and likewise with PARSE_STACK. */
      496+    7360    1        ;
      497+    7361
      498+    7362
      499+    7363    1   DCL HIER_STK_PTR              SBIN WORD
      500+    7364                                               %IF INITIALIZE;
      502+    7366                                               %ELSE;
      503+    7367    1                                            SYMREF;
      504+    7368                                               %ENDIF;
      505+    7369
      506+    7370    1   DCL 1 HIER_STK (0:50)         ALIGNED
      507+    7371                                              %IF INITIALIZE;
      509+    7373                                              %ELSE;
      510+    7374    1                                            SYMREF
      511+    7375                                              %ENDIF;
      512+    7376
      513+    7377    1        ,2 QLT$                   PTR
      514+    7378                                              %IF INITIALIZE;
      516+    7380                                              %ENDIF;
      517+    7381    1        ,2 DIMS$                  PTR
      518+    7382                                              %IF INITIALIZE;
      520+    7384                                              %ENDIF;
      521+    7385    1        ,2 USAGE_TYPE             SBIN HALF UNAL
      522+    7386                                              %IF INITIALIZE;
      524+    7388                                              %ENDIF;
      525+    7389    1        ,2 LEVEL#                 SBIN BYTE UNAL
      526+    7390                                              %IF INITIALIZE;
      528+    7392                                              %ENDIF;
      529+    7393    1        ,2 ATTR                   UBIN BYTE UNAL
      530+    7394                                              %IF INITIALIZE;
      532+    7396                                              %ENDIF;
      533+    7397    1        ,2 B REDEF ATTR           UNAL
      534+    7398    1         ,3 SIGN_FOUND            BOOLEAN
      535+    7399    1         ,3 SIGN_PRESENT          BOOLEAN
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:535  
      536+    7400    1         ,3 OCCURS_DEPENDING      BOOLEAN
      537+    7401    1         ,3 CONDITION_OBJ         BOOLEAN
      538+    7402    1         ,3 VALUE_PRESENTED       BOOLEAN
      539+    7403    1         ,3 *                     BIT(4) UNAL
      540+    7404    1        ,2 SIGN                   ALIGNED
      541+    7405    1         ,3 LOCATION              SBIN HALF UNAL
      542+    7406                                              %IF INITIALIZE;
      544+    7408                                              %ENDIF;
      545+    7409    1         ,3 TYPE                  SBIN HALF UNAL
      546+    7410                                              %IF INITIALIZE;
      548+    7412                                              %ENDIF;
      549+    7413    1         ,3 LINE                  SBIN HALF UNAL
      550+    7414                                              %IF INITIALIZE;
      552+    7416                                              %ENDIF;
      553+    7417    1         ,3 COLUMN                SBIN HALF UNAL
      554+    7418                                              %IF INITIALIZE;
      556+    7420                                              %ENDIF;
      557+    7421    1        ;
      558+    7422
      559+    7423        /* Preprocessor value for DATA_DECL_CONTEXT */
      560+    7424
      561+    7425        %EQU WORKING_STORAGE       = 0;
      562+    7426        %EQU FILE_DESCRIPTION      = 1;
      563+    7427        %EQU SORT_DESCRIPTION      = 2;
      564+    7428        %EQU COMMUNICATION_DESC    = 3;
      565+    7429        %EQU LINKAGE_SECTION       = 4;
      566+    7430        %EQU CONSTANT_SECTION      = 5;
      567+    7431        %EQU REPORT_SECTION        = 6;
      568+    7432        %EQU SUB_SCHEMA_SECTION    = 7;
      569+    7433        %EQU NO_CONTEXT            = 8;
      570+    7434
      571+    7435
      572+    7436        %EQU BYTES_PER_WORD        = 4 ;
      573+    7437        %EQU DIGITS_PER_BYTE       = 2 ;
      574+    7438        %EQU BYTE_0_ALIGNED        = 0 ;
      575+    7439        %EQU BYTE_1_ALIGNED        = 1 ;
      576+    7440        %EQU BYTE_2_ALIGNED        = 2 ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:536  
      577+    7441        %EQU BYTE_3_ALIGNED        = 3 ;
      578+    7442        %EQU UNKNOWN_ALIGNMENT     = 4 ;
      579+    7443        %EQU COMP2_OFFSET          = 5 ;
      580+    7444        %EQU DOUBLE_WORD_OFFSET    = 16 ;
      581+    7445
      582+    7446
      583+    7447    1      DCL 1 PAGE_FORMAT
      584+    7448                                            %IF INITIALIZE;
      586+    7450                                            %ELSE;
      587+    7451    1                                           SYMREF
      588+    7452                                            %ENDIF;
      589+    7453    1            ,2 P
      590+    7454    1              ,3 HEADING$      PTR
      591+    7455                                            %IF INITIALIZE;
      593+    7457                                            %ENDIF;
      594+    7458    1              ,3 FIRST_DETAIL$ PTR
      595+    7459                                            %IF INITIALIZE;
      597+    7461                                            %ENDIF;
      598+    7462    1              ,3 LAST_DETAIL$  PTR
      599+    7463                                            %IF INITIALIZE;
      601+    7465                                            %ENDIF;
      602+    7466    1              ,3 FOOTING$      PTR
      603+    7467                                            %IF INITIALIZE;
      605+    7469                                            %ENDIF;
      606+    7470    1            ,2 P_PTR    (0:3) REDEF P PTR;
      607+    7471
      608+    7472
      609+    7473    1   DCL REP_STK_PTR               SBIN WORD
      610+    7474                                               %IF INITIALIZE;
      612+    7476                                               %ELSE;
      613+    7477    1                                            SYMREF;
      614+    7478                                               %ENDIF;
      615+    7479
      616+    7480    1   DCL 1 REP_STK  (0:50)         ALIGNED
      617+    7481                                              %IF INITIALIZE;
      619+    7483                                              %ELSE;
      620+    7484    1                                            SYMREF
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:537  
      621+    7485                                              %ENDIF;
      622+    7486
      623+    7487    1        ,2 QLT$                   PTR
      624+    7488                                              %IF INITIALIZE;
      626+    7490                                              %ENDIF;
      627+    7491    1        ,2 LTS$                   PTR
      628+    7492                                              %IF INITIALIZE;
      630+    7494                                              %ENDIF;
      631+    7495    1        ,2 GROUP_TYPE             UBIN WORD
      632+    7496                                              %IF INITIALIZE;
      634+    7498                                              %ENDIF;
      635+    7499    1        ,2 LEVEL#                 SBIN WORD
      636+    7500                                              %IF INITIALIZE;
      638+    7502                                              %ENDIF;
      639+    7503    1        ,2 ATTR                   UBIN BYTE UNAL
      640+    7504                                              %IF INITIALIZE;
      642+    7506                                              %ENDIF;
      643+    7507    1        ,2 B  REDEF  ATTR         UNAL
      644+    7508    1          ,3 ELEMENTARY           BOOLEAN
      645+    7509    1          ,3 COLUMN_PRESENTED     BOOLEAN
      646+    7510    1          ,3 LINE_PRESENTED       BOOLEAN
      647+    7511    1          ,3 *                    BIT(6)
      648+    7512    1        ;
      649+    7513
      650+    7514         %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:538  
      651+    7515
      652+    7516         /*  EQUs of RWCT's offset  */
      653+    7517
      654+    7518        %EQU REPORT_HEADING_OFF    = 0;
      655+    7519        %EQU REPORT_FOOTING_OFF    = 1;
      656+    7520        %EQU PAGE_HEADING_OFF      = 2;
      657+    7521        %EQU PAGE_FOOTING_OFF      = 3;
      658+    7522        %EQU ACTUAL_LINE_OFF       = 4;
      659+    7523        %EQU CONTROL_LVL_OFF       = 5;
      660+    7524        %EQU FIRST_DETAIL_TBL_OFF  = 6;
      661+    7525        %EQU FIRST_DETAIL_GI_OFF   = 7;
      662+    7526        %EQU GEN_SUBTOTAL_OFF      = 8;
      663+    7527        %EQU CTR_BREAK_OFF         = 9;
      664+    7528        %EQU CTR_SHADOW_INIT_OFF   = 10;
      665+    7529        %EQU CTR_ITEM_SWAP_OFF     = 11;
      666+    7530        %EQU TOP_OF_PAGE_OFF       = 12;
      667+    7531        %EQU LINE_COUNTER_PTR_OFF  = 13;
      668+    7532        %EQU PAGE_COUNTER_PTR_OFF  = 14;
      669+    7533        %EQU CTR_BREAK_COUNTER_OFF = 15;
      670+    7534        %EQU NEXT_GROUP_INT_OFF    = 16;
      671+    7535        %EQU PAGE_LIMIT_INT_OFF    = 17;
      672+    7536        %EQU HEADING_INT_OFF       = 18;
      673+    7537        %EQU FIRST_DETAIL_INT_OFF  = 19;
      674+    7538        %EQU LAST_DETAIL_INT_OFF   = 20;
      675+    7539        %EQU FOOTING_INT_OFF       = 21;
      676+    7540        %EQU AFTER_ADVANCE_ADDR_OFF= 22;
      677+    7541        %EQU NO_OF_CTR_ITEM_OFF    = 23;
      678+    7542        %EQU REPORT_CTR_WORD_OFF   = 24;
      679+    7543
      680+    7544        %EQU CTR_HEADING_TBL_OFF   = 0;
      681+    7545        %EQU CTR_FOOTING_TBL_OFF   = 1;
      682+    7546        %EQU RESET_SUB_OFF         = 2;
      683+    7547        %EQU CROSS_ROLL_SUB_OFF    = 3;
      684+    7548        %EQU SUM_CLEAR_SUB_OFF     = 4;
      685+    7549
      686+    7550        %EQU USE_PROC_PTR_OFF      = 0;
      687+    7551        %EQU SUPRESS_PRINT_OFF     = 1;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:539  
      688+    7552        %EQU FORMATTING_SUB_OFF    = 2;
      689+    7553        %EQU FIRST_LINE_TYPE_OFF   = 3;
      690+    7554        %EQU FIRST_LINE_INT_OFF    = 4;
      691+    7555        %EQU TOTAL_LINE_INT_OFF    = 5;
      692+    7556        %EQU NEXT_GROUP_LINE_TYPE_OFF = 6;
      693+    7557        %EQU NEXT_GROUP_LINE_INT_OFF  = 7;
      694+    7558        %EQU SPECIAL_SUBTOTAL_SUB_OFF = 8;
      695+    7559        %EQU NEXT_DETAIL_IND_OFF   = 9;
      696+    7560        %EQU RWCT_ADDR_OFF         = 10;
      697+    7561        %EQU GROUP_IND_SWITCH_OFF   = 11;
      698+    7562
      699+    7563        %EQU CTR_TBL_START_OFF     = 25;
      700+    7564        %EQU CTR_TBL_SPAN          =5;
      701+    7565
      702+    7566
      703+    7567        %EQU INITIATE_REPORT  = 0;
      704+    7568        %EQU TERMINATE_REPORT = 1;
      705+    7569        %EQU GENERATE_REPORT  = 2;
      706+    7570        %EQU GENERATE_DETAIL  = 3;
      495     7571        %INCLUDE Z8A_LTS ;
        1+    7572        /*T***********************************************************/
        2+    7573        /*T*                                                         */
        3+    7574        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    7575        /*T*                                                         */
        5+    7576        /*T***********************************************************/
        6+    7577        /* INCLUDE FILE "LTS" */
        7+    7578
        8+    7579    1   DCL   LTS$    EXT PTR;
        9+    7580    1   DCL   LONG_ITEM$ REDEF LTS$ PTR ;
       10+    7581
       11+    7582        %EQU MAX#_DIMS        = 49;
       12+    7583        %EQU MAX_SEG#         = 99;
       13+    7584        %EQU MAX_FIXED_SEG#   = 49;
       14+    7585
       15+    7586    1   DCL 1 LTS_   EXT ALIGNED,
       16+    7587    1       2 TOP    PTR INIT (ADDR(NIL)),
       17+    7588    1       2 FIRST  PTR,        /* FIRST ITEM IN PAGE  */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:540  
       18+    7589    1       2 BOTTOM SBIN WORD INIT(0),  /* NEXT AVAILABLE      */
       19+    7590    1       2 FLOOR  SBIN WORD INIT(0),  /* LAST WORD IN PAGE   */
       20+    7591    1       2 SIZE   SBIN WORD INIT(0);  /* SIZE IN #PAGES      */
       21+    7592
       22+    7593    1   DCL 1 LTS     BASED (LTS$) ALIGNED,
       23+    7594    1       2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE */
       24+    7595    1       2 N       UBIN (18) UNAL; /* LENGTH OF THIS ITEM */
       25+    7596
       26+    7597    1   DCL 1 ARGLIST BASED (LTS$) ALIGNED,
       27+    7598    1       2 ID      UBIN HALF UNAL, /* Identification code   */
       28+    7599    1       2 N       UBIN HALF UNAL, /* Size of item in words */
       29+    7600    1       2 ARG$    (0:%(PAGE_SIZE-2)) PTR ,  /* Ptr to args           */
       30+    7601    1       2 ARGS  REDEF ARG$ CHAR(%((PAGE_SIZE-1)*4));
       31+    7602
       32+    7603    1   DCL 1 DIMS    BASED (LTS$) ALIGNED,
       33+    7604    1         2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE      */
       34+    7605    1         2 N       UBIN (18) UNAL, /* LENGTH OF THIS ITEM      */
       35+    7606    1         2 DN2     PTR,            /* "DEPENDING ON" DATANAME2 */
       36+    7607    1         2 D       (0:%MAX#_DIMS), /* UP TO 49 DIMENSIONS      */
       37+    7608    1           3 SPAN    UBIN (36) UNAL, /* LENGTH OF ONE ELEMENT    */
       38+    7609    1           3 DIM     UBIN (36) UNAL, /* K-TH DIMENSION           */
       39+    7610    1           3 INDEX$  PTR,            /* K-TH INDEXES LIST OF INDEX ITEMS */
       40+    7611    1         2 OD      REDEF D,          /* Occurs Depending dims */
       41+    7612    1           3 INT1  SBIN WORD,        /* Occurs int1 to int2 times */
       42+    7613    1           3 INT2  SBIN WORD,        /* */
       43+    7614    1           3 TOTAL_SPAN SBIN WORD,
       44+    7615    1           3 *     (0:%(MAX#_DIMS-1)),
       45+    7616    1             4 *   SBIN WORD,
       46+    7617    1             4 *   SBIN WORD,
       47+    7618    1             4 *   SBIN WORD;
       48+    7619
       49+    7620
       50+    7621    1   DCL 1 LCNST   ALIGNED BASED(LTS$),
       51+    7622    1       2 ID      UBIN HALF UNAL, /* Identification code */
       52+    7623    1       2 N       UBIN HALF UNAL,
       53+    7624    1       2 CONST   CHAR(%((PAGE_SIZE-1)*4)),
       54+    7625    1       2 CONSTW  REDEF CONST,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:541  
       55+    7626    1        3 VAL    (0:%(PAGE_SIZE-2)) SBIN,
       56+    7627    1       2 DESC_LIST REDEF CONST,
       57+    7628    1        3 ARG_COUNT      SBIN HALF UNAL,
       58+    7629    1        3 DESC_COUNT     SBIN HALF UNAL,
       59+    7630    1        3 DESCRIPTOR     (0:%(PAGE_SIZE-3)),
       60+    7631    1         4 DESC_WORD               UNAL,
       61+    7632    1           5 TYPE               UBIN HALF UNAL,
       62+    7633    1           5 F                  BIT(1) UNAL,
       63+    7634    1           5 EXTENDED           BIT(1) UNAL,
       64+    7635    1           5 ARRAYED            BIT(1) UNAL,
       65+    7636    1           5 STRUCT             BIT(1) UNAL,
       66+    7637    1           5 VIRTUAL            BIT(1) UNAL,
       67+    7638    1           5 ADSC               UNAL,
       68+    7639    1             6 LENGTH           SBIN(13) UNAL,
       69+    7640    1             6 LENGTH_OFFSET REDEF LENGTH SBIN(13) UNAL,
       70+    7641    1           5 NDSC REDEF  ADSC,
       71+    7642    1             6 *                BIT(1) UNAL,
       72+    7643    1             6 SCALE_FACTOR     SBIN(6) UNAL,
       73+    7644    1             6 LENGTH           SBIN(6) UNAL,
       74+    7645    1         4 SIZE_WORD REDEF DESC_WORD SBIN WORD;
       75+    7646
       76+    7647    1   DCL 1 LONG    ALIGNED BASED(LTS$),
       77+    7648    1       2 ID      UBIN HALF UNAL, /* IDENTIFICATION CODE  */
       78+    7649    1       2 *       UBIN HALF UNAL,
       79+    7650    1       2 LENGTH  UBIN WORD UNAL; /* LENGTH OF ITEM       */
       80+    7651
       81+    7652    1   DCL 1 LTSS    ALIGNED BASED,
       82+    7653    1       2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE */
       83+    7654    1       2 *       UBIN (18) UNAL,
       84+    7655    1       2 DIMS$            PTR,   /* POINTER TO DIMS ITEM */
       85+    7656    1       2 NEL$             PTR,   /* POINTER TO NEL  ITEM */
       86+    7657    1       2 LONG$            PTR,   /* POINTER TO LONG ITEM */
       87+    7658    1       2 DEPENDING_SIZE$  PTR,   /* Pointer to Depending size item */
       88+    7659    1       2 KEY$             PTR,   /* POINTER TO KEY  ITEM */
       89+    7660    1       2 FILE_LTS$        PTR,   /* Pointer to FILE_LTS item */
       90+    7661    1       2 REPORT_ENTRY$    PTR,   /* Pointer to REPORT entry LTS item */
       91+    7662    1       2 DML_REC$         REDEF REPORT_ENTRY$ PTR, /* DML_REC item */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:542  
       92+    7663    1       2 CD_LTS$          REDEF REPORT_ENTRY$ PTR, /* CD_LTS item */
       93+    7664    1       2 BASE_LTS$        PTR,   /* Pointer to BASE_LTS item */
       94+    7665    1       2 INIT_LTS$        PTR;   /* Pointer to INIT_LTS item */
       95+    7666
       96+    7667    1   DCL 1 PRIME   ALIGNED BASED(LTS$),
       97+    7668    1       2 ID      UBIN HALF UNAL, /* IDENTIFICATION CODE  */
       98+    7669    1       2 *       UBIN HALF UNAL,
       99+    7670    1       2 TRIAD   PTR,            /* POINTER TO TRIAD REG. CONTAINS */
      100+    7671    1       2 LAST    PTR,            /* POINTER TO PREVIOUS PRIME ITEM */
      101+    7672    1       2 NEXT    PTR;            /* POINTER TO NEXT PRIME ITEM FOR REG */
      102+    7673
      103+    7674    1   DCL 1 REF     ALIGNED BASED(LTS$),
      104+    7675    1         2 * UBIN HALF UNAL,
      105+    7676    1         2 B,
      106+    7677    1           3 *        BIT(16) UNAL,
      107+    7678    1           3 WORD_    BIT(1) UNAL,
      108+    7679    1           3 CONST    BIT(1) UNAL,
      109+    7680              %DESCRIPTOR(LVL=2);
      110+    7708    1         2 SSOP_TAG$ PTR,           /* Points to triad holding tag */
      111+    7709    1         2 NEXT REDEF SSOP_TAG$ PTR,/* Pooling mechanism           */
      112+    7710
      113+    7711    1         2 SIZ_TAG$ PTR,            /* Points to triad holding tag */
      114+    7712    1         2 LAST REDEF SIZ_TAG$ PTR, /* Pooling mechanism           */
      115+    7713
      116+    7714    1         2 PR_TAG$ PTR,             /* Points to triad holding tag */
      117+    7715    1         2 ST$     PTR;             /* Points to Symbol Table item */
      118+    7716
      119+    7717    1   DCL 1 EVALUATE ALIGNED BASED(LTS$),
      120+    7718    1       2 ID       UBIN (18) UNAL,  /* identification code     */
      121+    7719    1       2 N        UBIN (18) UNAL,  /* Length of this item     */
      122+    7720    1       2 SORT     (0:%PAGE_SIZE), /* Maximum limit           */
      123+    7721    1       3 COUNT    SBIN (36) UNAL,  /* Number of duplicate GOs */
      124+    7722    1       3 COND$    PTR UNAL ;       /* Pointer to GO item      */
      125+    7723
      126+    7724    1   DCL 1 NEL     ALIGNED BASED(LTS$),
      127+    7725    1       2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE  */
      128+    7726    1       2 *       UBIN (18) UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:543  
      129+    7727    1       2 DESC    UNAL,
      130+    7728            %DESCRIPTOR(LVL=3);
      131+    7756    1       2 MOP$    PTR,            /* PTR TO CONST OF MICRO OP */
      132+    7757    1       2 DNT$    PTR;            /* PTR TO LEXEME, ORIG PIC STR */
      133+    7758
      134+    7759    1   DCL 1 INDEXES          ALIGNED BASED,
      135+    7760    1         2 ID             UBIN (18) UNAL,
      136+    7761    1         2 *              UBIN (18) UNAL,
      137+    7762    1         2 INDEX_ST$      PTR,
      138+    7763    1         2 LINK           PTR;
      139+    7764
      140+    7765    1   DCL 1 RENAMES      ALIGNED BASED(LTS$),
      141+    7766    1       2 ID           UBIN (18) UNAL, /* Identification code */
      142+    7767    1       2 *            UBIN (18) UNAL,
      143+    7768    1       2 START_ST$    PTR,            /* Ptr to starting item's ST entry */
      144+    7769    1       2 END_ST$      PTR;            /* Ptr to ending item's ST entry */
      145+    7770
      146+    7771    1   DCL 1 DEPENDING_SIZE         ALIGNED BASED (LTS$),
      147+    7772    1         2 ID             UBIN (18) UNAL,
      148+    7773    1         2 MIN_SIZE       UBIN (18) UNAL,
      149+    7774    1         2 SIZE$          PTR UNAL,
      150+    7775    1         2 DIMS$          PTR UNAL;
      151+    7776
      152+    7777    1   DCL 1 KEY              ALIGNED BASED (LTS$),
      153+    7778    1        2 ID              UBIN HALF UNAL,
      154+    7779    1        2 *               UBIN HALF UNAL,
      155+    7780    1        2 B               ALIGNED,
      156+    7781    1         3 ASCENDING      BOOLEAN,
      157+    7782    1         3 USED           BOOLEAN,
      158+    7783    1         3 *              BIT (34) UNAL,
      159+    7784    1        2 KEY$            PTR,
      160+    7785    1        2 LINK            PTR;
      161+    7786
      162+    7787
      163+    7788    1     DCL 1 REPORT_LTS         BASED (LTS$)  ALIGNED,
      164+    7789    1           2 ID               UBIN  HALF    UNAL,
      165+    7790    1           2 *                UBIN  HALF    UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:544  
      166+    7791    1           2 ST$              PTR,      /* To st item of <report name> */
      167+    7792    1           2 FILE$            PTR,      /* To st item of <file name> */
      168+    7793    1           2 ATTR             BIT (36),
      169+    7794    1           2 B    REDEF  ATTR,
      170+    7795    1             3 CODE_ON             BIT (1),
      171+    7796    1             3 CONTROL_FINAL       BIT (1),
      172+    7797    1             3 PAGE_LIMIT_ON       BIT (1),
      173+    7798    1             3 HEADING_ON          BIT (1),
      174+    7799    1             3 FIRST_DETAIL_ON     BIT (1),
      175+    7800    1             3 LAST_DETAIL_ON      BIT (1),
      176+    7801    1             3 FOOTING_ON          BIT (1),
      177+    7802    1             3 GLOBAL              BIT (1),
      178+    7803    1             3 REFERENCED          BIT (1),
      179+    7804    1             3 INITIATED           BIT (1),
      180+    7805    1             3 *                   BIT (8),
      181+    7806    1             3 CODE_NUMBER         UBIN HALF UNAL,
      182+    7807    1           2 CODE             CHAR (2),
      183+    7808    1           2 CONTROL$         PTR,
      184+    7809    1           2 CONTROL_FINAL$   PTR,
      185+    7810    1           2 CONTROL_ERROR$   PTR,
      186+    7811    1           2 GENERAL_SUBTOTAL$ PTR,
      187+    7812    1           2 PAGE_LIMIT       SBIN WORD,
      188+    7813    1           2 HEADING          SBIN WORD,
      189+    7814    1           2 FIRST_DETAIL     SBIN WORD,
      190+    7815    1           2 LAST_DETAIL      SBIN WORD,
      191+    7816    1           2 FOOTING          SBIN WORD,
      192+    7817    1           2 RECORD_LENGTH    SBIN WORD,
      193+    7818    1           2 PAGE_COUNTER$    PTR,      /* Point to page counter st item */
      194+    7819    1           2 LINE_COUNTER$    PTR,      /* Point to line counter st item */
      195+    7820    1           2 SUM_LTS$         PTR,      /* To first of SUM_LTS item */
      196+    7821    1           2 RWCT$            PTR,       /* To run time control table */
      197+    7822    1           2 REPORT_HEADING$          PTR,
      198+    7823    1           2 PAGE_HEADING$            PTR,
      199+    7824    1           2 CONTROL_HEADING_FINAL$   PTR,
      200+    7825    1           2 CONTROL_HEADING$         PTR,
      201+    7826    1           2 DETAIL$                  PTR,
      202+    7827    1           2 CONTROL_FOOTING$         PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:545  
      203+    7828    1           2 CONTROL_FOOTING_FINAL$   PTR,
      204+    7829    1           2 PAGE_FOOTING$            PTR,
      205+    7830    1           2 REPORT_FOOTING$          PTR,
      206+    7831    1           2 BUFFER_ST$               PTR,
      207+    7832    1           2 CTR_LVL_COUNTER$         PTR,
      208+    7833    1           2 COL_NO#                  SBIN WORD,
      209+    7834    1           2 NO_CTR_ITEM              SBIN WORD,
      210+    7835    1           2 AFTER_ADVANCE$           PTR,
      211+    7836    1           2 DETAIL_NO               SBIN WORD,
      212+    7837    1           2 BODY_NO                 SBIN WORD,
      213+    7838    1           2 LINK                     PTR,
      214+    7839    1           2 INIT_CHAIN$              PTR;
      215+    7840
      216+    7841    1    DCL 1 REPORT_01_LTS     BASED (LTS$)  ALIGNED,
      217+    7842    1          2 ID                    UBIN HALF UNAL,
      218+    7843    1          2 ATTR                  UBIN HALF UNAL,
      219+    7844    1          2 B  REDEF ATTR,
      220+    7845    1            3 LINE_PRESENTED      BOOLEAN,
      221+    7846    1            3 CONTROL_ERROR       BOOLEAN,
      222+    7847    1            3 NEXT_GROUP_PRESENTED BOOLEAN,
      223+    7848    1            3 ELEMENTARY          BOOLEAN,
      224+    7849    1            3 GROUP_INDICATE      BOOLEAN,
      225+    7850    1            3 *                   BIT(13),
      226+    7851    1          2 LINE_TYPE             UBIN WORD,
      227+    7852    1          2 LINE_NO#              SBIN WORD,
      228+    7853    1          2 ST$                   PTR,
      229+    7854    1          2 QLT$                  PTR,
      230+    7855    1          2 USE_CHAIN$   REDEF  QLT$  PTR,
      231+    7856    1          2 PREV                  PTR,
      232+    7857    1          2 NEXT                  PTR,
      233+    7858    1          2 LINK                  PTR,
      234+    7859    1          2 GROUP_TYPE            UBIN WORD,
      235+    7860    1          2 NEXT_GROUP_TYPE       UBIN WORD,
      236+    7861    1          2 NEXT_GROUP_NO#        SBIN WORD,
      237+    7862    1          2 TOTAL_LINES           SBIN WORD,
      238+    7863    1          2 CONTROL_LTS$          PTR,
      239+    7864    1          2 REPORT_LTS$           PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:546  
      240+    7865    1          2 SPECIAL_SUBTOTAL$     PTR,
      241+    7866    1          2 FIRST_LINE            UNAL,
      242+    7867    1            3 TYPE                UBIN WORD,
      243+    7868    1            3 NO#                 SBIN WORD,
      244+    7869    1            3 LTS$                PTR,
      245+    7870    1          2 RWCT$                 PTR,
      246+    7871    1          2 GROUP_INDICATOR$      PTR;
      247+    7872
      248+    7873
      249+    7874    1    DCL 1 REPORT_ELEM_LTS             BASED (LTS$) ALIGNED,
      250+    7875    1          2 ID                        UBIN HALF UNAL,
      251+    7876    1          2 ATTR                      UBIN HALF UNAL,
      252+    7877    1          2 B   REDEF  ATTR,
      253+    7878    1            3 LINE_PRESENTED          BOOLEAN,
      254+    7879    1            3 COLUMN_PRESENTED        BOOLEAN,
      255+    7880    1            3 SOURCE_PRESENTED        BOOLEAN,
      256+    7881    1            3 SUM_PRESENTED           BOOLEAN,
      257+    7882    1            3 GROUP_INDICATE          BOOLEAN,
      258+    7883    1            3 PRINTABLE               BOOLEAN,
      259+    7884    1            3 *                       BIT(12),
      260+    7885    1          2 LINE_TYPE                 UBIN WORD,
      261+    7886    1          2 LINE_NO#                  SBIN WORD,
      262+    7887    1          2 ST$                       PTR,
      263+    7888    1          2 QLT$                      PTR,
      264+    7889    1          2 PREV                      PTR,
      265+    7890    1          2 NEXT                      PTR,
      266+    7891    1          2 COLUMN_NO#                SBIN WORD,
      267+    7892    1          2 SPAN                      SBIN WORD,
      268+    7893    1          2 SOURCE_ETT$               PTR,
      269+    7894    1          2 SUM_LTS$                  PTR,
      270+    7895    1          2 VALUE_ETT$                PTR;
      271+    7896
      272+    7897
      273+    7898    1    DCL 1 REPORT_GRP_LTS              BASED (LTS$) ALIGNED,
      274+    7899    1          2 ID                        UBIN HALF UNAL,
      275+    7900    1          2 ATTR                      UBIN HALF UNAL,
      276+    7901    1          2 B   REDEF  ATTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:547  
      277+    7902    1            3 LINE_PRESENTED          BOOLEAN,
      278+    7903    1            3 *                       BIT(17),
      279+    7904    1          2 LINE_TYPE                 UBIN WORD,
      280+    7905    1          2 LINE_NO#                  SBIN WORD,
      281+    7906    1          2 ST$                       PTR,
      282+    7907    1          2 QLT$                      PTR,
      283+    7908    1          2 PREV                      PTR,
      284+    7909    1          2 NEXT                      PTR;
      285+    7910
      286+    7911
      287+    7912    1      DCL 1 CONTROL_NAME_LTS          BASED (LTS$) ALIGNED,
      288+    7913    1            2 ID                      UBIN HALF UNAL,
      289+    7914    1            2 ATTR                    UBIN HALF UNAL,
      290+    7915    1            2 B REDEF ATTR,
      291+    7916    1              3 CLASS_EDITED          BOOLEAN,
      292+    7917    1              3 *   (0 : 13)          BOOLEAN,
      293+    7918    1              3 CLASS                 UBIN (3) UNAL,
      294+    7919    1            2 ST$                     PTR,
      295+    7920    1            2 CONTROL_HEADING$        PTR,
      296+    7921    1            2 CONTROL_FOOTING$        PTR,
      297+    7922    1            2 SUM_RESET$              PTR,
      298+    7923    1            2 SUM_SUBTOTAL$           PTR,
      299+    7924    1            2 SUM_CLEAR$              PTR,
      300+    7925    1            2 LEVEL                   SBIN WORD,
      301+    7926    1            2 LINK                    PTR,
      302+    7927    1            2 TEMP$                   PTR,
      303+    7928    1            2 SHADOW$                 PTR,
      304+    7929    1            2 ST_FIELD$               PTR,
      305+    7930    1            2 TEMP_FIELD$             PTR,
      306+    7931    1            2 SHADOW_FIELD$           PTR,
      307+    7932    1            2 START_OFFSET            SBIN WORD;
      308+    7933
      309+    7934
      310+    7935    1      DCL 1 SUM_LTS     BASED (LTS$)  ALIGNED,
      311+    7936    1              2 ID            UBIN HALF UNAL,
      312+    7937    1              2 ATTR          UBIN HALF UNAL,
      313+    7938    1              2 B REDEF ATTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:548  
      314+    7939    1                3 RESETED     BOOLEAN,
      315+    7940    1                3 *           BIT (17),
      316+    7941    1              2 EDIT_ST$      PTR,
      317+    7942    1              2 EDIT_ST_ILL$  PTR,
      318+    7943    1              2 SUM_ST$       PTR,
      319+    7944    1              2 SUM_ST_ILL$   PTR,
      320+    7945    1              2 REPORT_LTS$   PTR,
      321+    7946    1              2 REPORT_01_LTS$ PTR;
      322+    7947
      323+    7948    1      DCL 1 SEGMENT_LTS       BASED (LTS$) ALIGNED,
      324+    7949    1            2 ID              UBIN HALF UNAL,
      325+    7950    1            2 ATTR            UBIN HALF UNAL,
      326+    7951    1            2 B  REDEF ATTR,
      327+    7952    1              3 FIXED_PERMANENT   BOOLEAN,
      328+    7953    1              3 FIXED_OVERLAY     BOOLEAN,
      329+    7954    1              3 INDEPENDENT       BOOLEAN,
      330+    7955    1              3 *                 BIT(15),
      331+    7956    1            2 SECTION_ST$        PTR,
      332+    7957    1            2 SEGMENT_NO#         SBIN WORD,
      333+    7958    1            2 NEXT_SECTION$       PTR,
      334+    7959    1            2 ALTER_RESET$        PTR,
      335+    7960    1            2 NEXT                PTR,  /* link sections with same id */
      336+    7961    1            2 LINK                PTR,
      337+    7962    1            2 SUB_LABEL$          PTR,
      338+    7963    1            2 LINE                SBIN WORD,
      339+    7964    1            2 COLUMN              SBIN WORD;
      340+    7965
      341+    7966    1      DCL 1 ALTER_LTS             ALIGNED BASED,
      342+    7967    1            2 ID                  UBIN (18) UNAL,
      343+    7968    1            2 *                   UBIN (18) UNAL,
      344+    7969    1            2 LABEL$              PTR,
      345+    7970    1            2 SEG_NO#             SBIN WORD,
      346+    7971    1            2 NEXT                PTR;
      347+    7972
      348+    7973
      349+    7974    1      DCL 1 CD_LTS                BASED (LTS$) ALIGNED,
      350+    7975    1            2 ID                  UBIN HALF UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:549  
      351+    7976    1            2 ATTR                UBIN HALF UNAL,
      352+    7977    1            2 B   REDEF ATTR,
      353+    7978    1              3 INITIAL           BOOLEAN,
      354+    7979    1              3 *                 BIT (17),
      355+    7980    1            2 BUFFER              UBIN WORD,
      356+    7981    1            2 D   REDEF BUFFER,
      357+    7982    1              3 LEN               UBIN HALF UNAL,
      358+    7983    1              3 OCCURS            UBIN HALF UNAL,
      359+    7984    1            2 CD_ST$              PTR,
      360+    7985    1            2 WORK_ST$            PTR,
      361+    7986    1            2 BUFFER_ST$          PTR,
      362+    7987    1            2 BUFFER_LENGTH       SBIN WORD,
      363+    7988    1            2 LX_CD_TYPE          UBIN WORD,
      364+    7989    1            2 LINK                PTR;
      365+    7990
      366+    7991    1      DCL 1 ARRAY_PRESET_LTS      BASED (LTS$) ALIGNED,
      367+    7992    1            2 ID                  UBIN HALF UNAL,
      368+    7993    1            2 *                   UBIN HALF UNAL,
      369+    7994    1            2 CONSTANT$           PTR,
      370+    7995    1            2 STRING$             PTR,
      371+    7996    1            2 BITS_LEFT           SBIN WORD,
      372+    7997    1            2 LAST_OFFSET         SBIN WORD;
      373+    7998
      374+    7999    1     DCL 1 BASE_LTS               BASED(LTS$) ALIGNED,
      375+    8000    1           2 ID                   UBIN HALF UNAL,
      376+    8001    1           2 *                    UBIN HALF UNAL,
      377+    8002    1           2 ST$                  PTR, /* to the based variable */
      378+    8003    1           2 POINTER$             PTR, /* to the base pointer   */
      379+    8004    1           2 SEQ#                 SBIN WORD,
      380+    8005    1           2 REDEFINE$            PTR, /* to redefine subj or obj */
      381+    8006    1           2 NEXT                 PTR, /* to next BASE_LTS      */
      382+    8007    1           2 LINK                 PTR,
      383+    8008    1           2 ARGP$            PTR;
      384+    8009
      385+    8010    1      DCL 1 FILE_LTS        BASED (LTS$) ALIGNED,
      386+    8011    1           2 ID              UBIN HALF UNAL,
      387+    8012    1           2 DEVICE_TYPE     UBIN HALF UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:550  
      388+    8013    1           2 ST$             PTR,             /* Ptr to FD ST item */
      389+    8014    1           2 FAB$            PTR,             /* Ptr to FAB ST  */
      390+    8015    1           2 FIB$      REDEF FAB$      PTR,   /* Ptr to FIB ST  */
      391+    8016    1           2 FILE_LTS_CHAIN$ PTR,            /* Linked list chain of FILE_LTS items */
      392+    8017    1           2 ASSIGN$         PTR,             /* List of DNTs */
      393+    8018    1           2 NO_OF_AREAS     SBIN WORD,       /* No of areas  */
      394+    8019
      395+    8020    1           2 ORGANIZATION    SBIN WORD,       /* Codes:
      396+    8021                                                           %SEQUENTIAL
      397+    8022                                                           %RELATIVE
      398+    8023                                                           %INDEXED
      399+    8024                                                           %KEYED     */
      400+    8025
      401+    8026    1           2 PAD_CHAR$       PTR,             /* to CONST, or Data name */
      402+    8027    1           2 RECORD_DELIM   SBIN,             /* To DNT */
      403+    8028
      404+    8029    1           2 ACCESS_MODE     SBIN WORD,       /* Codes:
      405+    8030                                                           %SEQUENTIAL_ACCESS
      406+    8031                                                           %RANDOM_ACCESS
      407+    8032                                                           %DYNAMIC_ACCESS   */
      408+    8033
      409+    8034    1           2 FILE_STATUS$    PTR,             /* Ptr to ST */
      410+    8035    1           2 FILE_STATUS2$   PTR,             /* Ptr to 2nd File status */
      411+    8036
      412+    8037    1           2 RELATIVE_KEY$   PTR,             /* Ptr to ST */
      413+    8038    1           2 RECORD_KEY$     PTR,             /* Ptr to ST */
      414+    8039    1           2 ALT_RECORD_KEY$ PTR,             /* Ptr to list of keys */
      415+    8040
      416+    8041    1           2 ATTR            BIT(36),
      417+    8042    1           2 B               REDEF ATTR,
      418+    8043    1             3 MULTIPLE_FILE_TAPE   BOOLEAN,
      419+    8044    1             3 OPTIONAL_FILE        BOOLEAN,
      420+    8045    1             3 PROCESS_AREA         BOOLEAN,
      421+    8046    1             3 BSN                  BOOLEAN,
      422+    8047    1             3 FLR                  BOOLEAN,
      423+    8048    1             3 VLR                  BOOLEAN,
      424+    8049    1             3 SSF                  BOOLEAN,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:551  
      425+    8050    1             3 UNBANNERED           BOOLEAN,
      426+    8051    1             3 SPANNED              BOOLEAN,
      427+    8052    1             3 EXTERNAL             BOOLEAN,
      428+    8053    1             3 GLOBAL               BOOLEAN,
      429+    8054    1             3 DUPLICATES           BOOLEAN,
      430+    8055    1             3 LABEL_OMITTED        BOOLEAN,
      431+    8056    1             3 LABEL_STANDARD       BOOLEAN,
      432+    8057    1             3 BEGIN_TAPE_LABEL     BOOLEAN,
      433+    8058    1             3 BEGIN_FILE_LABEL     BOOLEAN,
      434+    8059    1             3 END_TAPE_LABEL       BOOLEAN,
      435+    8060    1             3 END_FILE_LABEL       BOOLEAN,
      436+    8061    1             3 RECORD_CONTAINS      BOOLEAN,
      437+    8062    1             3 BLOCK_CONTAINS       BOOLEAN,
      438+    8063    1             3 SAME_RECORD          BOOLEAN,
      439+    8064    1             3 SAME_AREA            BOOLEAN,
      440+    8065    1             3 RECORDS_NOT_CHARS    BOOLEAN,
      441+    8066    1             3 RECORD_FORMAT_2      BOOLEAN,
      442+    8067    1             3 EBCDIC               BOOLEAN,
      443+    8068    1             3 EBCDIC_CODE_SET      BOOLEAN,
      444+    8069    1             3 NON_TYA_RECORDS      BOOLEAN,
      445+    8070    1             3 SAME_SORT_AREA       BOOLEAN,
      446+    8071    1             3 MERGE_STATEMENT      BOOLEAN,
      447+    8072    1             3 REPORT_CODE          BOOLEAN,
      448+    8073    1             3 NOT_FAST_SEQUENTIAL  BOOLEAN,
      449+    8074    1             3 IMPLIED_PRINTER      BOOLEAN,   /* Used in GCOS  */
      450+    8075    1             3 BLOCK                BOOLEAN,
      451+    8076    1             3 * (0:2)              BOOLEAN,
      452+    8077
      453+    8078    1           2 NOMINAL_KEY$    PTR,             /* Ptr to ST */ /*N* Not sure */
      454+    8079
      455+    8080    1           2 BLOCK_CONTAINS  ALIGNED,
      456+    8081    1             3 INT_1         SBIN WORD,
      457+    8082    1             3 INT_2         SBIN WORD,
      458+    8083                                                   /* BLOCK CONTAINS   <INT-1> TO <INT-2>
      459+    8084                                                            | <INT-1> TO <INT-2> VARYING...
      460+    8085                                                                     | <INT-2>.
      461+    8086
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:552  
      462+    8087                                            When INT-2 not specified, INT-1 is zero.     */
      463+    8088
      464+    8089    1           2 RECORD_CONTAINS ALIGNED,
      465+    8090    1             3 INT_1         SBIN WORD,       /* INT-1 to INT-2 characters */
      466+    8091    1             3 INT_2         SBIN WORD,
      467+    8092    1             3 DEPENDING$    PTR,             /* Ptr to ST for depending on */
      468+    8093
      469+    8094    1           2 LABEL_RECORDS$ PTR,            /* Ptr to ST for datanames */
      470+    8095
      471+    8096    1           2 FILE_ID$        PTR,             /* Ptr to ST for file-id */
      472+    8097    1           2 RETENTION$      PTR,             /* Ptr to ST */
      473+    8098    1           2 CATALOG$       PTR,             /* Ptr to list of ST's */
      474+    8099    1           2 DATA_RECORD$    PTR,             /* Ptr to list of ST's */
      475+    8100
      476+    8101    1           2 LINAGE          ALIGNED,
      477+    8102    1             3 NO_OF_LINES$  PTR,             /* Ptr to ST */
      478+    8103    1             3 FOOTING$      PTR,             /* Ptr to ST */
      479+    8104    1             3 TOP$          PTR,             /* Ptr to ST */
      480+    8105    1             3 BOTTOM$       PTR,             /* Ptr to ST */
      481+    8106
      482+    8107    1           2 CODE_SET$       PTR,             /* Alphabet ST item */
      483+    8108    1           2 REPORT$         PTR,             /* List of ST (%RD) */
      484+    8109    1           2 POSITION        SBIN WORD,       /* File position */
      485+    8110    1           2 SAME_RECORD,
      486+    8111    1             3 HEAD$         PTR,
      487+    8112    1             3 LINK          PTR,
      488+    8113    1           2 SAME_AREA,
      489+    8114    1             3 HEAD$         PTR,
      490+    8115    1             3 LINK          PTR,
      491+    8116    1           2 MULT_TAPE,
      492+    8117    1             3 HEAD$         PTR,
      493+    8118    1             3 LINK          PTR,
      494+    8119    1           2 RERUN_NUM       SBIN, /* every # records rerun */
      495+    8120    1           2 DCB_DNT$        PTR,  /* DCB if other than file name */ /*#34313*/
      496+    8121    1           2 USE_PROC_LABEL$ PTR,  /* Ptr to LABEL created for use    */
      497+    8122    1           2 USE_PROC_LABEL_EPTR REDEF USE_PROC_LABEL$ EPTR,
      498+    8123    1           2 LENGTH_READ$    PTR,  /* To the ST item in FAB returned by lib */
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:553  
      499+    8124    1           2 LINAGE_COUNTER$ PTR, /* To ST for LINAGE-COUNTER */
      500+    8125    1           2 RECORD_COUNT    UBIN,   /* Count of records descriptions */
      501+    8126    1           2 LABEL_EXIT$     PTR;    /* User Label Procedures */
      502+    8127
      503+    8128
      504+    8129
      505+    8130    1      DCL 1 LTS_PTR_ARRAY             BASED (LTS$) ALIGNED,
      506+    8131    1            2 ID                 UBIN HALF UNAL,
      507+    8132    1            2 N                  UBIN HALF UNAL,
      508+    8133    1            2 LINK               PTR,
      509+    8134    1            2 P$                 (0:%(PAGE_SIZE-1)) PTR;
      510+    8135
      511+    8136    1      DCL 1 PROC_SUPP            BASED (LTS$) ALIGNED,
      512+    8137    1            2 ID                 UBIN HALF UNAL,
      513+    8138    1            2 N                  UBIN HALF UNAL,
      514+    8139    1            2 CURRENCY_SIGN      CHAR (1) UNAL,
      515+    8140    1            2 LOW_VALUE          CHAR (1) UNAL,
      516+    8141    1            2 HIGH_VALUE         CHAR (1) UNAL,
      517+    8142    1            2 COLL_SEQ_PRESENT   BOOLEAN,
      518+    8143    1            2 EXIT_PROG_IN_DECL  BOOLEAN,
      519+    8144    1            2 *                  BIT (7) UNAL,
      520+    8145    1            2 COLLATING_SEQ$     PTR,
      521+    8146    1            2 INIT_PROC$         PTR,
      522+    8147    1            2 DISPLAY_SIGN_POS   SBIN,
      523+    8148    1            2 DISPLAY_SIGN_TYPE  SBIN,
      524+    8149    1            2 COMP_4_SIGN_POS    SBIN,
      525+    8150    1            2 COMP_DEFAULT       SBIN,
      526+    8151    1            2 ESC_LIST$          PTR,
      527+    8152    1            2 HEAD$              PTR,
      528+    8153    1            2 TAIL$              PTR,
      529+    8154    1            2 OPT_CONST$         PTR,   /* To Option bit const - PH4 */
      530+    8155    1            2 SEG_ARRAY$         PTR,   /* Created for every procedure */
      531+    8156    1            2 CD_LIST$           PTR,
      532+    8157    1            2 SEG_LIMIT          SBIN WORD,
      533+    8158    1            2 SEG_ID_ARRAY$      PTR,   /* Created for main procedure */
      534+    8159    1            2 REF_COUNT          UBIN,
      535+    8160    1            2 IO_RESTORE_CHAIN$  PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:554  
      536+    8161    1            2 USE_CHAIN$         PTR,
      537+    8162    1            2 PARA_STATS$        PTR,
      538+    8163    1            2 P2_SAVE$           PTR,
      539+    8164    1            2 USE_INPUT_LABEL$   PTR,
      540+    8165    1            2 USE_INPUT_LABEL_EPTR REDEF USE_INPUT_LABEL$ EPTR,
      541+    8166    1            2 USE_OUTPUT_LABEL$  PTR,
      542+    8167    1            2 USE_OUTPUT_LABEL_EPTR REDEF USE_OUTPUT_LABEL$ EPTR,
      543+    8168    1            2 USE_IO_LABEL$      PTR,
      544+    8169    1            2 USE_IO_LABEL_EPTR REDEF USE_IO_LABEL$ EPTR,
      545+    8170    1            2 USE_EXTEND_LABEL$  PTR,
      546+    8171    1            2 USE_EXTEND_LABEL_EPTR REDEF USE_EXTEND_LABEL$ EPTR;
      547+    8172
      548+    8173
      549+    8174
      550+    8175    1       DCL 1 DML_REC       BASED (LTS$) ALIGNED,
      551+    8176    1             2 ID          UBIN HALF UNAL,
      552+    8177    1             2 *           UBIN HALF UNAL,
      553+    8178    1             2 RECORD_INFO,
      554+    8179    1               3 LOCATION_MODE_CALC        BIT(1)  UNAL,
      555+    8180    1               3 RECORD_PARTIAL_DESCRIBED  BIT(1)  UNAL,
      556+    8181    1               3 STORE_NOT_PERMITTED       BIT(1)  UNAL,
      557+    8182    1               3 MODIFY_ONLY_ONLY          BIT(1)  UNAL,
      558+    8183    1               3 ALL_CALC_FIELDS_PRESENT   BIT(1)  UNAL,
      559+    8184    1               3 ERASE_ALL_NOT_PERMITTED   BIT(1)  UNAL,
      560+    8185    1               3 ERASE_NOT_PERMITTED       BIT(1)  UNAL,
      561+    8186
      562+    8187    1             2 SET_INFO,
      563+    8188    1               3 SET_ORDER_TEMP            BIT(1)  UNAL,
      564+    8189    1               3 OWNER_REC_NOT_PRESENT     BIT(1)  UNAL,
      565+    8190    1               3 MEMBERSHIP                BIT(2)  UNAL,
      566+    8191    1               3 MODIFY_ONLY_NOT_PERMITTED BIT(1)  UNAL,
      567+    8192
      568+    8193    1             2 REALM_INFO,
      569+    8194    1               3 TEMP_AREA                 BIT(1)  UNAL,
      570+    8195
      571+    8196    1             2 REALM_RELATIONSHIP           BIT(1)  UNAL,
      572+    8197    1             2 SET_RELATIONSHIP            BIT(1)  UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:555  
      573+    8198    1             2 KEY_RELATIONSHIP            BIT(1)  UNAL,
      574+    8199    1             2 * (0:19)                    BIT(1)  UNAL,
      575+    8200
      576+    8201    1             2 REALM_NAME                  UBIN WORD,
      577+    8202    1             2 SET_NAME                    UBIN WORD,
      578+    8203    1             2 KEY_NAME                    UBIN WORD,
      579+    8204    1             2 EXTEND$                     PTR;
      580+    8205
      581+    8206
      582+    8207    1       DCL   1   USE  ALIGNED BASED(LTS$),
      583+    8208    1               2   ID             UBIN HALF UNAL,
      584+    8209    1               2   TYPE           UBIN HALF UNAL, /* IO, DML, RW, ... */
      585+    8210    1               2   PROC_CHAIN$    PTR,
      586+    8211    1               2   PROC_LABEL$    PTR,
      587+    8212    1               2   PROC_NO_LABEL$ REDEF PROC_LABEL$ EPTR,
      588+    8213    1               2   LINK$          PTR,  /* Linked from the PROC_ item */
      589+    8214    1               2   TO$            PTR,         /* FAB, USE_BLOCK, ... */
      590+    8215    1               2   ILS_LIST       DALIGNED,
      591+    8216    1                3  *              (0: %(LENGTH_OF_LX_ITEM - 1)) PTR ALIGNED,
      592+    8217    1               2   INIT_LABEL_BASE$ PTR,
      593+    8218    1               2   TO1$           PTR,  /* Temp PTR for use in USE proc */
      594+    8219    1               2   LINE           UBIN HALF HALIGNED,  /* Line number of token USE */
      595+    8220    1               2   COLUMN         UBIN HALF HALIGNED; /* Column number of token USE */
      596+    8221
      597+    8222    1       DCL 1 USE_SUPP  ALIGNED BASED(LTS$),
      598+    8223    1               2 ID        UBIN HALF HALIGNED,
      599+    8224    1               2 *         UBIN HALF HALIGNED,
      600+    8225    1               2 FILE_LTS$ PTR,
      601+    8226    1               2 PROC_LABEL$ PTR,
      602+    8227    1               2 PROC_LABEL_EPTR REDEF PROC_LABEL$ EPTR,
      603+    8228    1               2 TO$       PTR,
      604+    8229    1               2 USE$      PTR,
      605+    8230    1               2 INIT_LABEL_BASE$ PTR,
      606+    8231    1               2 LINK$     PTR;
      607+    8232
      608+    8233    1       DCL 1 RVA_LTS       BASED(LTS$) ALIGNED,
      609+    8234    1               2 ID        UBIN HALF UNAL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:556  
      610+    8235    1               2 *         UBIN HALF UNAL,
      611+    8236    1               2 ST$       PTR,
      612+    8237    1               2 LINK$     PTR,
      613+    8238    1               2 OFFSET    UBIN HALF UNAL,
      614+    8239    1               2 VERB      UBIN(7)   UNAL,
      615+    8240    1               2 VERBS     REDEF VERB,
      616+    8241    1                   3 GET       BOOLEAN,
      617+    8242    1                   3 MODIFY    BOOLEAN,
      618+    8243    1                   3 STORE     BOOLEAN,
      619+    8244    1                   3 ERASE_    BOOLEAN,
      620+    8245    1                   3 CONNECT   BOOLEAN,
      621+    8246    1                   3 DISCONNECT BOOLEAN,
      622+    8247    1                   3 FIND      BOOLEAN,
      623+    8248    1               2 *         UBIN(11) UNAL;
      624+    8249
      625+    8250    1    DCL  1 OPEN_LTS          BASED( LTS$ ) ALIGNED,
      626+    8251    1           2 ID              UBIN HALF UNAL,
      627+    8252    1           2 OPEN_TYPE       UBIN HALF UNAL,
      628+    8253    1           2 ARG$            PTR,
      629+    8254    1           2 INFO_BLOCK$     PTR,
      630+    8255    1           2 FILE_LTS$       PTR,
      631+    8256    1           2 CONST_PARM      UBIN UNAL,
      632+    8257    1           2 LINK            PTR;
      633+    8258
      634+    8259    1    DCL 1  IO_RESTORE_CHAIN  BASED (LTS$) ALIGNED,
      635+    8260    1         2 ID                UBIN HALF UNAL,
      636+    8261    1         2 N                 UBIN HALF UNAL,
      637+    8262    1         2 RESTORE$          PTR, /* BASE triad */
      638+    8263    1         2 TO$               PTR, /* BASE or OFF triad */
      639+    8264    1         2 BASE$             PTR, /* BASE triad */
      640+    8265    1         2 NEXT$             PTR;
      641+    8266
      642+    8267        /* ALT_KEY INFO */
      643+    8268        %EQU NO_WORDS_PER_ALT_KEY = 2;
      644+    8269        %EQU MIN_ALT_KEY_SIZE     = 2;
      645+    8270        %EQU MAX#_ALT_KEYS       = 50;
      646+    8271
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:557  
      647+    8272    1      DCL 1 ALT_KEY       BASED (LTS$) ALIGNED,
      648+    8273    1            2 ID          UBIN HALF UNAL,
      649+    8274    1            2 N           UBIN HALF UNAL,
      650+    8275    1            2 NUM_KEYS_MINUS_1   SBIN,
      651+    8276    1            2 P           (0:%(MAX#_ALT_KEYS - 1)) ALIGNED,
      652+    8277    1              3 UNIQUE    BIT (1) ALIGNED,
      653+    8278    1              3 P$        PTR;
      654+    8279
      655+    8280    1   DCL 1  COPY_FILE     BASED (LTS$) ALIGNED,
      656+    8281    1         2 ID           UBIN HALF HALIGNED,
      657+    8282    1         2 *            UBIN HALF HALIGNED,
      658+    8283    1         2 ESN          UBIN,
      659+    8284    1         2 CAT_FILE     CHAR(196),
      660+    8285    1         2 NEXT$        PTR;
      661+    8286
      662+    8287    1   DCL 1 BT             BASED (LTS$) ALIGNED,
      663+    8288    1       2 ID             UBIN HALF UNAL, /* IDENTIFICATION CODE */
      664+    8289    1       2 *              UBIN HALF UNAL,
      665+    8290    1       2 ST$            PTR,
      666+    8291    1       2 LOP$           PTR,
      667+    8292    1       2 ROP$           PTR;
      668+    8293
      669+    8294    1    DCL 1 INIT_LTS    BASED (LTS$) ALIGNED,
      670+    8295    1        2 ID          UBIN HALF HALIGNED,
      671+    8296    1        2 FILL        CHAR (1),
      672+    8297    1        2 FILLER      BOOLEAN,
      673+    8298    1        2 MFILLABLE   BOOLEAN,
      674+    8299    1        2 GROUP       BOOLEAN,
      675+    8300    1        2 BCD         BOOLEAN,
      676+    8301    1        2 POINTER     BOOLEAN,
      677+    8302    1        2 *           BIT (4),
      678+    8303    1        2 BASE$       PTR,
      679+    8304    1        2 OFF         SBIN,
      680+    8305    1        2 SON$        PTR,
      681+    8306    1        2 NEXT$       PTR,
      682+    8307    1        2 LENGTH      UBIN,
      683+    8308    1        2 SPAN        UBIN,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:558  
      684+    8309    1        2 DIMS        UBIN,
      685+    8310    1        2 SUBSCR$     PTR,
      686+    8311    1        2 INDEX$      PTR;
      687+    8312        %MACRO RESERVE_LTS (ITEM=%DIMS,POINTER=LTS$) ;
      688+    8313
      689+    8314               DO ;
      690+    8315                 %IF     ITEM = %LTSS;
      691+    8316                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(LTSS)');
      692+    8317                 %ELSEIF ITEM = %PRIME;
      693+    8318                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(PRIME)');
      694+    8319                 %ELSEIF ITEM = %LONG;
      695+    8320                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(LONG)');
      696+    8321                 %ELSEIF ITEM = %REF;
      697+    8322                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REF)');
      698+    8323                 %ELSEIF ITEM = %KEY;
      699+    8324                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(KEY)');
      700+    8325                 %ELSEIF ITEM = %NEL;
      701+    8326                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(NEL)');
      702+    8327                 %ELSEIF ITEM = %INDEXES;
      703+    8328                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(INDEXES)');
      704+    8329                 %ELSEIF ITEM = %DML_REC;
      705+    8330                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(DML_REC)');
      706+    8331                 %ELSEIF ITEM = %RENAMES;
      707+    8332                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(RENAMES)');
      708+    8333                 %ELSEIF ITEM = %DEPENDING_SIZE;
      709+    8334                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(DEPENDING_SIZE)');
      710+    8335                 %ELSEIF ITEM = %FILE_LTS;
      711+    8336                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(FILE_LTS)');
      712+    8337                 %ELSEIF ITEM = %REPORT_LTS;
      713+    8338                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_LTS)');
      714+    8339                 %ELSEIF ITEM = %REPORT_01_LTS;
      715+    8340                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_01_LTS)');
      716+    8341                 %ELSEIF ITEM = %REPORT_ELEM_LTS;
      717+    8342                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_ELEM_LTS)');
      718+    8343                 %ELSEIF ITEM = %REPORT_GRP_LTS;
      719+    8344                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(REPORT_GRP_LTS)');
      720+    8345                 %ELSEIF ITEM = %CONTROL_NAME_LTS;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:559  
      721+    8346                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(CONTROL_NAME_LTS)');
      722+    8347                 %ELSEIF ITEM = %SUM_LTS;
      723+    8348                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(SUM_LTS)');
      724+    8349                 %ELSEIF ITEM = %SEGMENT_LTS;
      725+    8350                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(SEGMENT_LTS)');
      726+    8351                 %ELSEIF ITEM = %ALTER_LTS;
      727+    8352                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(ALTER_LTS)');
      728+    8353                 %ELSEIF ITEM = %BASE_LTS;
      729+    8354                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(BASE_LTS)');
      730+    8355                 %ELSEIF ITEM = %CD_LTS;
      731+    8356                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(CD_LTS)');
      732+    8357                 %ELSEIF ITEM = %ARRAY_PRESET_LTS;
      733+    8358                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(ARRAY_PRESET_LTS)');
      734+    8359                 %ELSEIF ITEM = %OPEN_LTS;
      735+    8360                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(OPEN_LTS)');
      736+    8361                 %ELSEIF ITEM = %PROC_SUPP;
      737+    8362                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(PROC_SUPP)');
      738+    8363                 %ELSEIF ITEM = %COPY_FILE;
      739+    8364                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(INIT_LTS)');
      740+    8365                 %ELSEIF ITEM = %USE_LTS;
      741+    8366                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(USE)');
      742+    8367                 %ELSEIF ITEM = %RVA;
      743+    8368                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(RVA_LTS)');
      744+    8369                 %ELSEIF ITEM = %IO_RESTORE_CHAIN;
      745+    8370                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(IO_RESTORE_CHAIN)');
      746+    8371                 %ELSEIF ITEM = %USE_SUPP;
      747+    8372                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(USE_SUPP)');
      748+    8373                 %ELSEIF ITEM = %BT;
      749+    8374                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(BT)');
      750+    8375                 %ELSEIF ITEM = %INIT_LTS;
      751+    8376                     %LSET @LTS_SIZE = CHARTEXT('SIZEW(INIT_LTS)');
      752+    8377                 %ELSEIF ITEM = %DIMS
      753+    8378                      OR ITEM = %LCNST
      754+    8379                      OR ITEM = %ARGLIST
      755+    8380                      OR ITEM = %EVALUATE
      756+    8381                      OR ITEM = %ALT_KEY
      757+    8382                      OR ITEM = %LTS_PTR_ARRAY;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:560  
      758+    8383                     /* ITERATION must be set before invoking RESERVE_LTS */
      759+    8384                     %LSET @LTS_SIZE = CHARTEXT('ITERATION');
      760+    8385                 %ELSE;
      761+    8386                     %ERROR ('**** ITEM must be set to a known LTS reference', 4);
      762+    8387                     %LSET @LTS_SIZE = CHARTEXT('ITERATION');
      763+    8388                 %ENDIF;
      764+    8389
      765+    8390                 IF LTS_.BOTTOM + %@LTS_SIZE >= LTS_.FLOOR THEN
      766+    8391                   CALL Z8AR$RESERVER (ADDR(LTS_));
      767+    8392                 POINTER = PINCRW (LTS_.FIRST, LTS_.BOTTOM);
      768+    8393                 LTS_.BOTTOM = LTS_.BOTTOM + %@LTS_SIZE;
      769+    8394                 POINTER -> LTS.ID = ITEM;
      770+    8395
      771+    8396                 %IF @LTS_SIZE = CHARTEXT('ITERATION');
      772+    8397                    POINTER -> LTS.N = ITERATION;
      773+    8398                 %ENDIF;
      774+    8399
      775+    8400               END ;
      776+    8401
      777+    8402        %MEND ;
      778+    8403
      779+    8404        %MACRO TOP_LTS (POINTER = LTS$) ;
      780+    8405
      781+    8406               DO ;
      782+    8407                 POINTER = LTS_.TOP ;
      783+    8408               END ;
      784+    8409
      785+    8410        %MEND ;
      786+    8411
      787+    8412        %MACRO STEP_LTS (POINTER = LTS$) ;
      788+    8413
      789+    8414               DO ;
      790+    8415                 ITERATION = LTS_STEP (POINTER->LTS.ID-%FIRST_LTS) ;
      791+    8416                 IF ITERATION = 0
      792+    8417                 THEN ITERATION = POINTER->LTS.N ;
      793+    8418                 POINTER = PINCRW (POINTER, ITERATION) ;
      794+    8419                 IF POINTER = PINCRW (LTS_.FIRST, LTS_.BOTTOM)
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:561  
      795+    8420                 THEN POINTER = ADDR(NIL) ;
      796+    8421                 ELSE
      797+    8422                 IF POINTER->LTS.ID = %CONTINUE
      798+    8423                 THEN POINTER = POINTER -> CONT.NEXT;
      799+    8424               END ;
      800+    8425
      801+    8426        %MEND ;
      802+    8427
      803+    8428
      804+    8429           %MACRO NEW_PROC_SUPP (@POINTER = LTS$,
      805+    8430                                 @CURRENCY_SIGN = "'$'",
      806+    8431                                 @LOW_VALUE = "BITASC('000'O)",
      807+    8432                                 @HIGH_VALUE = "BITASC('177'O)",
      808+    8433                                 @COLL_SEQ_PRESENT = FALSE,
      809+    8434                                 @DISPLAY_SIGN_POS = %SIGN_POS_TRAILING,
      810+    8435                                 @DISPLAY_SIGN_TYPE = %SIGN_TYPE_OVERPUNCH,
      811+    8436                                 @COMP_4_SIGN_POS = %SIGN_POS_TRAILING,
      812+    8437                                 @COMP_DEFAULT = %RSV_WRD_COMP,
      813+    8438                                 @COLLATING_SEQ$ = "ADDR(NIL)",
      814+    8439                                 @INIT_PROC$ = "ADDR(NIL)",
      815+    8440                                 @HEAD$     = "ADDR(NIL)",
      816+    8441                                 @TAIL$     = "ADDR(NIL)",
      817+    8442                                 @OPT_CONST$= "ADDR(NIL)",
      818+    8443                                 @SEG_ARRAY$= "ADDR(NIL)",
      819+    8444                                 @SEG_LIMIT = "%MAX_FIXED_SEG# + 1",
      820+    8445                                 @SEG_ID_ARRAY$ = "ADDR(NIL)",
      821+    8446                                 @REF_COUNT = 0,
      822+    8447                                 @IO_RESTORE_CHAIN$ = "ADDR(NIL)",
      823+    8448                                 @USE_CHAIN$        = "ADDR(NIL)",
      824+    8449                                 @USE_INPUT_LABEL$  = "ENTADDR(NIL)",
      825+    8450                                 @USE_OUTPUT_LABEL$ = "ENTADDR(NIL)",
      826+    8451                                 @USE_IO_LABEL$     = "ENTADDR(NIL)",
      827+    8452                                 @USE_EXTEND_LABEL$ = "ENTADDR(NIL)",
      828+    8453                                 @ESC_LIST$ = "ADDR(NIL)");
      829+    8454             DO;
      830+    8455               %RESERVE_LTS (POINTER = @POINTER, ITEM = %PROC_SUPP);
      831+    8456
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:562  
      832+    8457               @POINTER -> PROC_SUPP.CURRENCY_SIGN  = @CURRENCY_SIGN;
      833+    8458               @POINTER -> PROC_SUPP.COLLATING_SEQ$ = @COLLATING_SEQ$;
      834+    8459               @POINTER -> PROC_SUPP.INIT_PROC$     = @INIT_PROC$;
      835+    8460               @POINTER -> PROC_SUPP.HEAD$          = @HEAD$;
      836+    8461               @POINTER -> PROC_SUPP.TAIL$          = @TAIL$;
      837+    8462               @POINTER -> PROC_SUPP.SEG_LIMIT      = @SEG_LIMIT;
      838+    8463               @POINTER -> PROC_SUPP.ESC_LIST$      = @ESC_LIST$;
      839+    8464               @POINTER -> PROC_SUPP.LOW_VALUE      = @LOW_VALUE;
      840+    8465               @POINTER -> PROC_SUPP.HIGH_VALUE     = @HIGH_VALUE;
      841+    8466               @POINTER -> PROC_SUPP.COLL_SEQ_PRESENT = @COLL_SEQ_PRESENT;
      842+    8467               @POINTER -> PROC_SUPP.DISPLAY_SIGN_POS = @DISPLAY_SIGN_POS;
      843+    8468               @POINTER -> PROC_SUPP.REF_COUNT      = @REF_COUNT;
      844+    8469               @POINTER -> PROC_SUPP.IO_RESTORE_CHAIN$ = @IO_RESTORE_CHAIN$;
      845+    8470               @POINTER -> PROC_SUPP.USE_CHAIN$     = @USE_CHAIN$;
      846+    8471               %IF TEXTCHAR(@USE_INPUT_LABEL$) = 'ENTADDR(NIL)';
      847+    8472               @POINTER -> PROC_SUPP.USE_INPUT_LABEL_EPTR = ENTADDR(NIL);
      848+    8473               %ELSE;
      849+    8474               @POINTER -> PROC_SUPP.USE_INPUT_LABEL$ = @USE_INPUT_LABEL$;
      850+    8475               %ENDIF;
      851+    8476               %IF TEXTCHAR(@USE_OUTPUT_LABEL$) = 'ENTADDR(NIL)';
      852+    8477               @POINTER -> PROC_SUPP.USE_OUTPUT_LABEL_EPTR = ENTADDR(NIL);
      853+    8478               %ELSE;
      854+    8479               @POINTER -> PROC_SUPP.USE_OUTPUT_LABEL$ = @USE_OUTPUT_LABEL$;
      855+    8480               %ENDIF;
      856+    8481               %IF TEXTCHAR(@USE_IO_LABEL$) = 'ENTADDR(NIL)';
      857+    8482               @POINTER -> PROC_SUPP.USE_IO_LABEL_EPTR = ENTADDR(NIL);
      858+    8483               %ELSE;
      859+    8484               @POINTER -> PROC_SUPP.USE_IO_LABEL$        = @USE_IO_LABEL$;
      860+    8485               %ENDIF;
      861+    8486               %IF TEXTCHAR(@USE_EXTEND_LABEL$) = 'ENTADDR(NIL)';
      862+    8487               @POINTER -> PROC_SUPP.USE_EXTEND_LABEL_EPTR = ENTADDR(NIL);
      863+    8488               %ELSE;
      864+    8489               @POINTER -> PROC_SUPP.USE_EXTEND_LABEL$ = @USE_EXTEND_LABEL$;
      865+    8490               %ENDIF;
      866+    8491               @POINTER -> PROC_SUPP.DISPLAY_SIGN_TYPE = @DISPLAY_SIGN_TYPE;
      867+    8492               @POINTER -> PROC_SUPP.COMP_4_SIGN_POS = @COMP_4_SIGN_POS;
      868+    8493               @POINTER -> PROC_SUPP.COMP_DEFAULT   = @COMP_DEFAULT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:563  
      869+    8494               @POINTER -> PROC_SUPP.SEG_ARRAY$     = @SEG_ARRAY$;
      870+    8495               @POINTER -> PROC_SUPP.SEG_ID_ARRAY$  = @SEG_ID_ARRAY$;
      871+    8496               @POINTER -> PROC_SUPP.P2_SAVE$       = ADDR(NIL);
      872+    8497               @POINTER -> PROC_SUPP.PARA_STATS$    = ADDR(NIL);
      873+    8498             END;
      874+    8499
      875+    8500           %MEND;
      876+    8501
      877+    8502
      878+    8503           %MACRO NEW_NEL (@POINTER = LTS$,
      879+    8504                           @MOP$    = "ADDR(NIL)",
      880+    8505                           @DNT$    = "ADDR(NIL)",
      881+    8506                           @DESC    = '0'B);
      882+    8507
      883+    8508               DO;
      884+    8509                 %RESERVE_LTS (ITEM     = %NEL,
      885+    8510                               POINTER  = @POINTER);
      886+    8511
      887+    8512                 @POINTER -> NEL.MOP$   = @MOP$;
      888+    8513                 @POINTER -> NEL.DNT$   = @DNT$;
      889+    8514                 @POINTER -> NEL.DESC   = @DESC;
      890+    8515               END;
      891+    8516
      892+    8517           %MEND;
      893+    8518
      894+    8519
      895+    8520           %MACRO NEW_LTSS (@POINTER = LTS$,
      896+    8521                            @DIMS$   = "ADDR(NIL)",
      897+    8522                            @LONG$   = "ADDR(NIL)",
      898+    8523                            @BASE_LTS$ = "ADDR(NIL)",
      899+    8524                            @NEL$    = "ADDR(NIL)",
      900+    8525                            @DEPENDING_SIZE$ = "ADDR(NIL)",
      901+    8526                            @FILE_LTS$ = "ADDR(NIL)",
      902+    8527                            @INIT_LTS$ = "ADDR(NIL)",
      903+    8528                            @CD_LTS$ = ,
      904+    8529                            @DML_REC$ = ,
      905+    8530                            @REPORT_ENTRY$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:564  
      906+    8531                            @KEY$    = "ADDR(NIL)");
      907+    8532
      908+    8533               DO;
      909+    8534                 %RESERVE_LTS (ITEM     = %LTSS,
      910+    8535                               POINTER  = @POINTER);
      911+    8536
      912+    8537                 @POINTER -> LTSS.DIMS$ = @DIMS$;
      913+    8538                 @POINTER -> LTSS.LONG$ = @LONG$;
      914+    8539                 @POINTER -> LTSS.NEL$  = @NEL$;
      915+    8540                 @POINTER -> LTSS.DEPENDING_SIZE$ = @DEPENDING_SIZE$;
      916+    8541                 @POINTER -> LTSS.KEY$  = @KEY$;
      917+    8542                 @POINTER -> LTSS.BASE_LTS$  = @BASE_LTS$;
      918+    8543                 @POINTER -> LTSS.FILE_LTS$ = @FILE_LTS$;
      919+    8544                 @POINTER -> LTSS.INIT_LTS$ = @INIT_LTS$;
      920+    8545                 %IF (TEXTCHAR (@CD_LTS$) ~= '');
      921+    8546                 @POINTER -> LTSS.CD_LTS$ = @CD_LTS$;
      922+    8547                 %ELSEIF (TEXTCHAR (@DML_REC$) ~= '');
      923+    8548                 @POINTER -> LTSS.DML_REC$ = @DML_REC$;
      924+    8549                 %ELSE;
      925+    8550                 @POINTER -> LTSS.REPORT_ENTRY$ = @REPORT_ENTRY$;
      926+    8551                 %ENDIF;
      927+    8552               END;
      928+    8553
      929+    8554           %MEND;
      930+    8555
      931+    8556           %MACRO NEW_LONG (@POINTER = LTS$,
      932+    8557                            @LENGTH  = );
      933+    8558
      934+    8559               DO;
      935+    8560                 %RESERVE_LTS (ITEM    = %LONG,
      936+    8561                               POINTER = @POINTER);
      937+    8562
      938+    8563                 @POINTER -> LONG.LENGTH = @LENGTH;
      939+    8564               END;
      940+    8565
      941+    8566           %MEND;
      942+    8567
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:565  
      943+    8568           %MACRO NEW_COPY_FILE (@POINTER = LTS$,
      944+    8569                                 @ESN     = ,
      945+    8570                                 @CAT_FILE =  );
      946+    8571
      947+    8572               DO;
      948+    8573                 %RESERVE_LTS (ITEM = %COPY_FILE,
      949+    8574                               POINTER = @POINTER);
      950+    8575
      951+    8576                 @POINTER ->COPY_FILE.ESN = @ESN;
      952+    8577                 @POINTER ->COPY_FILE.CAT_FILE = @CAT_FILE;
      953+    8578                 @POINTER ->COPY_FILE.NEXT = COMCOM.COPY_PTR$;
      954+    8579                 COMCOM.COPY_PTR$ = @POINTER;
      955+    8580               END;
      956+    8581           %MEND;
      957+    8582
      958+    8583           %MACRO NEW_INIT_LTS (@POINTER     = LTS$,
      959+    8584                                @FILL        = "%BITASC ('000'O)",
      960+    8585                                @FILLER      = FALSE,
      961+    8586                                @MFILLABLE   = FALSE,
      962+    8587                                @GROUP       = FALSE,
      963+    8588                                @BCD         = FALSE,
      964+    8589                                @PTR         = FALSE,
      965+    8590                                @BASE$ = "ADDR(NIL)",
      966+    8591                                @OFF         = 0,
      967+    8592                                @SON$        = "ADDR(NIL)",
      968+    8593                                @NEXT$       = "ADDR(NIL)",
      969+    8594                                @LENGTH      = 0,
      970+    8595                                @SPAN        = 0,
      971+    8596                                @DIMS        = 0,
      972+    8597                                @SUBSCR$     = "ADDR(NIL)",
      973+    8598                                @INDEX$      = "ADDR(NIL)");
      974+    8599               DO;
      975+    8600                 %RESERVE_LTS (ITEM     = %INIT_LTS,
      976+    8601                               POINTER  = @POINTER);
      977+    8602                 @POINTER -> INIT_LTS.FILL = @FILL;
      978+    8603                 @POINTER -> INIT_LTS.FILLER = @FILLER;
      979+    8604                 @POINTER -> INIT_LTS.MFILLABLE = @MFILLABLE;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:566  
      980+    8605                 @POINTER -> INIT_LTS.GROUP = @GROUP;
      981+    8606                 @POINTER -> INIT_LTS.BCD = @BCD;
      982+    8607                 @POINTER -> INIT_LTS.POINTER = @PTR;
      983+    8608                 @POINTER -> INIT_LTS.BASE$ = @BASE$;
      984+    8609                 @POINTER -> INIT_LTS.OFF = @OFF;
      985+    8610                 @POINTER -> INIT_LTS.SON$ = @SON$;
      986+    8611                 @POINTER -> INIT_LTS.NEXT$ = @NEXT$;
      987+    8612                 @POINTER -> INIT_LTS.LENGTH = @LENGTH;
      988+    8613                 @POINTER -> INIT_LTS.SPAN = @SPAN;
      989+    8614                 @POINTER -> INIT_LTS.DIMS = @DIMS;
      990+    8615                 @POINTER -> INIT_LTS.SUBSCR$ = @SUBSCR$;
      991+    8616                 @POINTER -> INIT_LTS.INDEX$ = @INDEX$;
      992+    8617               END;
      993+    8618           %MEND;
      994+    8619
      995+    8620           %MACRO NEW_DIMS (@POINTER = LTS$,
      996+    8621                            @SIZE    = "%MIN_DIM_SIZE + %NO_WORDS_PER_DIM",
      997+    8622                            @DN2$    = "ADDR(NIL)");
      998+    8623
      999+    8624               DO;
     1000+    8625                 ITERATION = @SIZE;
     1001+    8626                 %RESERVE_LTS (ITEM    = %DIMS,
     1002+    8627                               POINTER = @POINTER);
     1003+    8628
     1004+    8629                 @POINTER -> DIMS.DN2  = @DN2$;
     1005+    8630               END;
     1006+    8631
     1007+    8632           %MEND;
     1008+    8633
     1009+    8634           %MACRO NEW_REF (@POINTER = LTS$ );
     1010+    8635               DO;
     1011+    8636                 IF HEAD_REF$ = ADDR(NIL) THEN
     1012+    8637                   %RESERVE_LTS(ITEM = %REF,
     1013+    8638                                POINTER = @POINTER );
     1014+    8639                 ELSE
     1015+    8640                   %REMOVE_FROM_SL_LIST(PTR = @POINTER,
     1016+    8641                                        ITEM = REF,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:567  
     1017+    8642                                        HEAD = HEAD_REF$ );
     1018+    8643
     1019+    8644                 NUMBER_OF_REFS = NUMBER_OF_REFS + 1;
     1020+    8645               END;
     1021+    8646            %MEND;
     1022+    8647
     1023+    8648
     1024+    8649           %MACRO NEW_PRIME (@POINTER = LTS$ );
     1025+    8650               DO;
     1026+    8651                 IF HEAD_PRIMES$ = ADDR(NIL) THEN
     1027+    8652                   %RESERVE_LTS(ITEM=%PRIME,POINTER=@POINTER);
     1028+    8653                 ELSE
     1029+    8654                   %REMOVE_FROM_SL_LIST(PTR=@POINTER,ITEM=PRIME,
     1030+    8655                                        HEAD=HEAD_PRIMES$);
     1031+    8656
     1032+    8657                 NUMBER_OF_PRIMES = NUMBER_OF_PRIMES + 1;
     1033+    8658               END;
     1034+    8659           %MEND;
     1035+    8660
     1036+    8661
     1037+    8662
     1038+    8663           %MACRO FILL_DIMS (@DIMS$ = LTS$,
     1039+    8664                             @SS#   = 0,
     1040+    8665                             @INDEX$= "ADDR(NIL)",
     1041+    8666                             @SPAN  = 0,
     1042+    8667                             @DIM   = 0);
     1043+    8668
     1044+    8669               DO;
     1045+    8670                 @DIMS$ -> DIMS.D.INDEX$(@SS#) = @INDEX$;
     1046+    8671                 @DIMS$ -> DIMS.D.SPAN  (@SS#) = @SPAN;
     1047+    8672                 @DIMS$ -> DIMS.D.DIM   (@SS#) = @DIM;
     1048+    8673               END;
     1049+    8674
     1050+    8675           %MEND;
     1051+    8676
     1052+    8677
     1053+    8678           %MACRO NEW_RENAMES (@POINTER = LTS$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:568  
     1054+    8679                               @START$  = ,
     1055+    8680                               @END$    = );
     1056+    8681
     1057+    8682               DO;
     1058+    8683                 %RESERVE_LTS (ITEM    = %RENAMES,
     1059+    8684                               POINTER = @POINTER);
     1060+    8685
     1061+    8686                 @POINTER -> RENAMES.START_ST$ = @START$;
     1062+    8687                 @POINTER -> RENAMES.END_ST$   = @END$;
     1063+    8688               END;
     1064+    8689
     1065+    8690           %MEND;
     1066+    8691
     1067+    8692
     1068+    8693           %MACRO NEW_INDEXES (@POINTER = LTS$,
     1069+    8694                               @INDEX_ST$ = ST$,
     1070+    8695                               @LINK      = "ADDR(NIL)");
     1071+    8696
     1072+    8697               DO;
     1073+    8698                 %RESERVE_LTS (ITEM    = %INDEXES,
     1074+    8699                               POINTER = @POINTER);
     1075+    8700
     1076+    8701                 @POINTER -> INDEXES.INDEX_ST$ = @INDEX_ST$;
     1077+    8702                 @POINTER -> INDEXES.LINK      = @LINK;
     1078+    8703               END;
     1079+    8704
     1080+    8705           %MEND;
     1081+    8706
     1082+    8707
     1083+    8708
     1084+    8709
     1085+    8710           %MACRO NEW_DEPENDING_SIZE (@POINTER = LTS$,
     1086+    8711                                      @SIZE    = 0,
     1087+    8712                                      @DIMS$   = "ADDR(NIL)",
     1088+    8713                                      @SIZE$   = "ADDR(NIL)");
     1089+    8714
     1090+    8715               DO;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:569  
     1091+    8716                 %RESERVE_LTS (ITEM     = %DEPENDING_SIZE,
     1092+    8717                               POINTER  = @POINTER);
     1093+    8718
     1094+    8719                 @POINTER -> DEPENDING_SIZE.SIZE$ = @SIZE$;
     1095+    8720                 @POINTER -> DEPENDING_SIZE.MIN_SIZE = @SIZE;
     1096+    8721                 @POINTER -> DEPENDING_SIZE.DIMS$ = @DIMS$;
     1097+    8722               END;
     1098+    8723
     1099+    8724           %MEND;
     1100+    8725
     1101+    8726
     1102+    8727           %MACRO NEW_KEY (@POINTER = LTS$,
     1103+    8728                           @ASCENDING = TRUE,
     1104+    8729                           @USED    = FALSE,
     1105+    8730                           @KEY$    = "ADDR(NIL)",
     1106+    8731                           @LINK    = "ADDR(NIL)");
     1107+    8732
     1108+    8733               DO;
     1109+    8734                 %RESERVE_LTS (ITEM    = %KEY,
     1110+    8735                               POINTER = @POINTER);
     1111+    8736
     1112+    8737                 @POINTER -> KEY.B      = FALSE;
     1113+    8738                 @POINTER -> KEY.B.ASCENDING = @ASCENDING;
     1114+    8739                 @POINTER -> KEY.B.USED = @USED;
     1115+    8740                 @POINTER -> KEY.KEY$  = @KEY$;
     1116+    8741                 @POINTER -> KEY.LINK  = @LINK;
     1117+    8742               END;
     1118+    8743
     1119+    8744           %MEND;
     1120+    8745
     1121+    8746
     1122+    8747
     1123+    8748           %MACRO NEW_ARGLIST (@POINTER = LTS$, @NUM_OF_ARGS = 1);
     1124+    8749
     1125+    8750               DO;
     1126+    8751                 ITERATION = @NUM_OF_ARGS + 1;
     1127+    8752                 %RESERVE_LTS (ITEM = %ARGLIST, POINTER = @POINTER);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:570  
     1128+    8753               END;
     1129+    8754
     1130+    8755           %MEND;
     1131+    8756
     1132+    8757
     1133+    8758           %MACRO NEW_LCNST (@POINTER = LTS$,
     1134+    8759                             @SIZE    = 1,
     1135+    8760                             @CONST   = ' ');
     1136+    8761
     1137+    8762               DO;
     1138+    8763                 ITERATION = @SIZE;
     1139+    8764                 %RESERVE_LTS (ITEM = %LCNST,
     1140+    8765                               POINTER = @POINTER);
     1141+    8766
     1142+    8767                 SUBSTR (@POINTER -> LCNST.CONST, 0, (@SIZE - 1) * 4) = @CONST;
     1143+    8768               END;
     1144+    8769
     1145+    8770           %MEND;
     1146+    8771
     1147+    8772
     1148+    8773           %MACRO NEW_FILE_LTS (@POINTER           = LTS$,
     1149+    8774                                 @ST$               = "ADDR(NIL)",
     1150+    8775                                 @FAB$              = "ADDR(NIL)",
     1151+    8776                                 @FILE_LTS_CHAIN$   = "ADDR(NIL)",
     1152+    8777                                 @ASSIGN$           = "ADDR(NIL)",
     1153+    8778                                 @NO_OF_AREAS       = "-1",
     1154+    8779                                 @ORGANIZATION      = %NOT_SPECIFIED,
     1155+    8780                                 @PAD_CHAR$         = "ADDR(NIL)",
     1156+    8781                                 @RECORD_DELIM     = %NOT_SPECIFIED,
     1157+    8782                                 @ACCESS_MODE       = %NOT_SPECIFIED,
     1158+    8783                                 @FILE_STATUS$      = "ADDR(NIL)",
     1159+    8784                                 @FILE_STATUS2$     = "ADDR(NIL)",
     1160+    8785                                 @RELATIVE_KEY$     = "ADDR(NIL)",
     1161+    8786                                 @RECORD_KEY$       = "ADDR(NIL)",
     1162+    8787                                 @ALT_RECORD_KEY$   = "ADDR(NIL)",
     1163+    8788                                 @ATTR              = FALSE,
     1164+    8789                                 @MULTIPLE_FILE_TAPE= ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:571  
     1165+    8790                                 @OPTIONAL          = ,
     1166+    8791                                 @PROCESS_AREA      = ,
     1167+    8792                                 @BSN               = ,
     1168+    8793                                 @FLR               = ,
     1169+    8794                                 @VLR               = ,
     1170+    8795                                 @SSF               = ,
     1171+    8796                                 @UNBANNERED        = ,
     1172+    8797                                 @SPANNED           = ,
     1173+    8798                                 @EXTERNAL          = ,
     1174+    8799                                 @GLOBAL            = ,
     1175+    8800                                 @DUPLICATES        = ,
     1176+    8801                                 @LABEL_OMITTED     = ,
     1177+    8802                                 @LABEL_STANDARD    = ,
     1178+    8803                                 @BEGIN_TAPE_LABEL  = ,
     1179+    8804                                 @BEGIN_FILE_LABEL  = ,
     1180+    8805                                 @END_TAPE_LABEL    = ,
     1181+    8806                                 @END_FILE_LABEL    = ,
     1182+    8807                                 @RECORD_CONTAINS   = ,
     1183+    8808                                 @RECORDS_NOT_CHARS = ,
     1184+    8809                                 @RECORD_FORMAT_2   = ,
     1185+    8810                                 @EBCDIC            = ,
     1186+    8811                                 @EBCDIC_CODE_SET   = ,
     1187+    8812                                 @NON_TYA_RECORDS   = ,
     1188+    8813                                 @BLOCK_CONTAINS    = ,
     1189+    8814                                 @SAME_RECORD       = ,
     1190+    8815                                 @SAME_AREA         = ,
     1191+    8816                                 @NOMINAL_KEY$      = "ADDR(NIL)",
     1192+    8817                                 @BLOCK_INT_1       = 1,
     1193+    8818                                 @BLOCK_INT_2       = 1,
     1194+    8819                                 @RECORD_INT_1      = 0,
     1195+    8820                                 @RECORD_INT_2      = 0,
     1196+    8821                                 @DEPENDING$        = "ADDR(NIL)",
     1197+    8822                                 @LABEL_RECORDS$    = "ADDR(NIL)",
     1198+    8823                                 @FILE_ID$          = "ADDR(NIL)",
     1199+    8824                                 @RETENTION$        = "ADDR(NIL)",
     1200+    8825                                 @CATALOG$         = "ADDR(NIL)",
     1201+    8826                                 @DATA_RECORD$      = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:572  
     1202+    8827                                 @NO_OF_LINES$      = "ADDR(NIL)",
     1203+    8828                                 @FOOTING$          = "ADDR(NIL)",
     1204+    8829                                 @TOP$              = "ADDR(NIL)",
     1205+    8830                                 @BOTTOM$           = "ADDR(NIL)",
     1206+    8831                                 @CODE_SET$         = "ADDR(NIL)",
     1207+    8832                                 @REPORT$           = "ADDR(NIL)",
     1208+    8833                                 @POSITION          = 0,
     1209+    8834                                 @SAME_RECORD_HEAD$ = "ADDR(NIL)",
     1210+    8835                                 @SAME_RECORD_LINK  = "ADDR(NIL)",
     1211+    8836                                 @SAME_AREA_HEAD$   = "ADDR(NIL)",
     1212+    8837                                 @SAME_AREA_LINK    = "ADDR(NIL)",
     1213+    8838                                 @MULT_TAPE_HEAD$   = "ADDR(NIL)",
     1214+    8839                                 @MULT_TAPE_LINK    = "ADDR(NIL)",
     1215+    8840                                 @RERUN_NUM         = 0,
     1216+    8841                                 @DCB_DNT$          = "ADDR(NIL)",    /*#34313*/
     1217+    8842                                 @USE_PROC_LABEL$   = "ENTADDR(NIL)",
     1218+    8843                                 @LENGTH_READ$      = "ADDR(NIL)",
     1219+    8844                                 @LINAGE_COUNTER$   = "ADDR(NIL)",
     1220+    8845                                 @RECORD_COUNT      = 0,
     1221+    8846                                 @LABEL_EXIT$       = "ADDR(NIL)");
     1222+    8847             DO;
     1223+    8848               %RESERVE_LTS (ITEM     = %FILE_LTS,
     1224+    8849                             POINTER  = @POINTER);
     1225+    8850
     1226+    8851               @POINTER -> FILE_LTS.ID                   = %FILE_LTS;
     1227+    8852               @POINTER -> FILE_LTS.ST$                  = @ST$ ;
     1228+    8853               @POINTER -> FILE_LTS.FAB$                 = @FAB$;
     1229+    8854               @POINTER -> FILE_LTS.FILE_LTS_CHAIN$      = @FILE_LTS_CHAIN$;
     1230+    8855               @POINTER -> FILE_LTS.ASSIGN$              = @ASSIGN$;
     1231+    8856               @POINTER -> FILE_LTS.NO_OF_AREAS          = @NO_OF_AREAS;
     1232+    8857               @POINTER -> FILE_LTS.ORGANIZATION         = @ORGANIZATION;
     1233+    8858               @POINTER -> FILE_LTS.PAD_CHAR$            = @PAD_CHAR$;
     1234+    8859               @POINTER -> FILE_LTS.RECORD_DELIM        = @RECORD_DELIM;
     1235+    8860               @POINTER -> FILE_LTS.ACCESS_MODE          = @ACCESS_MODE;
     1236+    8861               @POINTER -> FILE_LTS.FILE_STATUS$         = @FILE_STATUS$;
     1237+    8862               @POINTER -> FILE_LTS.FILE_STATUS2$        = @FILE_STATUS2$;
     1238+    8863               @POINTER -> FILE_LTS.RELATIVE_KEY$        = @RELATIVE_KEY$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:573  
     1239+    8864               @POINTER -> FILE_LTS.RECORD_KEY$          = @RECORD_KEY$;
     1240+    8865               @POINTER -> FILE_LTS.ALT_RECORD_KEY$      = @ALT_RECORD_KEY$;
     1241+    8866               @POINTER -> FILE_LTS.ATTR                 = @ATTR;
     1242+    8867               @POINTER -> FILE_LTS.NOMINAL_KEY$         = @NOMINAL_KEY$;
     1243+    8868               @POINTER -> FILE_LTS.BLOCK_CONTAINS.INT_1 = @BLOCK_INT_1;
     1244+    8869               @POINTER -> FILE_LTS.BLOCK_CONTAINS.INT_2 = @BLOCK_INT_2;
     1245+    8870               @POINTER -> FILE_LTS.RECORD_CONTAINS.INT_1= @RECORD_INT_1;
     1246+    8871               @POINTER -> FILE_LTS.RECORD_CONTAINS.INT_2= @RECORD_INT_2;
     1247+    8872               @POINTER -> FILE_LTS.RECORD_CONTAINS.DEPENDING$ = @DEPENDING$;
     1248+    8873               @POINTER -> FILE_LTS.LABEL_RECORDS$       = @LABEL_RECORDS$;
     1249+    8874               @POINTER -> FILE_LTS.FILE_ID$             = @FILE_ID$;
     1250+    8875               @POINTER -> FILE_LTS.RETENTION$           = @RETENTION$;
     1251+    8876               @POINTER -> FILE_LTS.CATALOG$            = @CATALOG$    ;
     1252+    8877               @POINTER -> FILE_LTS.DATA_RECORD$         = @DATA_RECORD$;
     1253+    8878               @POINTER -> FILE_LTS.LINAGE.NO_OF_LINES$  = @NO_OF_LINES$;
     1254+    8879               @POINTER -> FILE_LTS.LINAGE.TOP$          = @TOP$;
     1255+    8880               @POINTER -> FILE_LTS.LINAGE.BOTTOM$       = @BOTTOM$;
     1256+    8881               @POINTER -> FILE_LTS.LINAGE.FOOTING$      = @FOOTING$;
     1257+    8882               @POINTER -> FILE_LTS.CODE_SET$            = @CODE_SET$;
     1258+    8883               @POINTER -> FILE_LTS.REPORT$              = @REPORT$;
     1259+    8884               @POINTER -> FILE_LTS.POSITION             = @POSITION;
     1260+    8885               @POINTER -> FILE_LTS.SAME_RECORD.HEAD$    = @SAME_RECORD_HEAD$;
     1261+    8886               @POINTER -> FILE_LTS.SAME_RECORD.LINK     = @SAME_RECORD_LINK;
     1262+    8887               @POINTER -> FILE_LTS.SAME_AREA.HEAD$      = @SAME_AREA_HEAD$;
     1263+    8888               @POINTER -> FILE_LTS.SAME_AREA.LINK       = @SAME_AREA_LINK;
     1264+    8889               @POINTER -> FILE_LTS.MULT_TAPE.HEAD$      = @MULT_TAPE_HEAD$;
     1265+    8890               @POINTER -> FILE_LTS.MULT_TAPE.LINK       = @MULT_TAPE_LINK;
     1266+    8891               @POINTER -> FILE_LTS.RERUN_NUM            = @RERUN_NUM;
     1267+    8892               @POINTER -> FILE_LTS.DCB_DNT$             = @DCB_DNT$; /*#34313*/
     1268+    8893               %IF TEXTCHAR(@USE_PROC_LABEL$) = 'ENTADDR(NIL)';
     1269+    8894               @POINTER -> FILE_LTS.USE_PROC_LABEL_EPTR = ENTADDR(NIL);
     1270+    8895               %ELSE;
     1271+    8896               @POINTER -> FILE_LTS.USE_PROC_LABEL$      = @USE_PROC_LABEL$;
     1272+    8897               %ENDIF;
     1273+    8898               @POINTER -> FILE_LTS.LENGTH_READ$         = @LENGTH_READ$;
     1274+    8899               @POINTER -> FILE_LTS.LINAGE_COUNTER$      = @LINAGE_COUNTER$;
     1275+    8900               @POINTER -> FILE_LTS.RECORD_COUNT         = @RECORD_COUNT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:574  
     1276+    8901               @POINTER -> FILE_LTS.B.MERGE_STATEMENT    = %FALSE;
     1277+    8902               @POINTER -> FILE_LTS.LABEL_EXIT$          = @LABEL_EXIT$;
     1278+    8903
     1279+    8904               %IF (TEXTCHAR(@MULTIPLE_FILE_TAPE) ~= '');
     1280+    8905                 @POINTER -> FILE_LTS.B.MULTIPLE_FILE_TAPE = @MULTIPLE_FILE_TAPE;
     1281+    8906               %ENDIF;
     1282+    8907               %IF (TEXTCHAR(@OPTIONAL) ~= '');
     1283+    8908                 @POINTER -> FILE_LTS.B.OPTIONAL_FILE = @OPTIONAL;
     1284+    8909               %ENDIF;
     1285+    8910               %IF (TEXTCHAR(@PROCESS_AREA) ~= '');
     1286+    8911                 @POINTER -> FILE_LTS.B.PROCESS_AREA = @PROCESS_AREA;
     1287+    8912               %ENDIF;
     1288+    8913               %IF (TEXTCHAR(@BSN) ~= '');
     1289+    8914                 @POINTER -> FILE_LTS.B.BSN = @BSN;
     1290+    8915               %ENDIF;
     1291+    8916               %IF (TEXTCHAR(@FLR) ~= '');
     1292+    8917                 @POINTER -> FILE_LTS.B.FLR = @FLR;
     1293+    8918               %ENDIF;
     1294+    8919               %IF (TEXTCHAR(@VLR) ~= '');
     1295+    8920                 @POINTER -> FILE_LTS.B.VLR = @VLR;
     1296+    8921               %ENDIF;
     1297+    8922               %IF (TEXTCHAR(@SSF) ~= '');
     1298+    8923                 @POINTER -> FILE_LTS.B.SSF = @SSF;
     1299+    8924               %ENDIF;
     1300+    8925               %IF (TEXTCHAR(@UNBANNERED) ~= '');
     1301+    8926                 @POINTER -> FILE_LTS.B.UNBANNERED = @UNBANNERED;
     1302+    8927               %ENDIF;
     1303+    8928               %IF (TEXTCHAR(@SPANNED) ~= '');
     1304+    8929                 @POINTER -> FILE_LTS.B.SPANNED = @SPANNED;
     1305+    8930               %ENDIF;
     1306+    8931               %IF (TEXTCHAR(@EXTERNAL) ~= '');
     1307+    8932                 @POINTER -> FILE_LTS.B.EXTERNAL = @EXTERNAL;
     1308+    8933               %ENDIF;
     1309+    8934               %IF (TEXTCHAR(@GLOBAL) ~= '');
     1310+    8935                 @POINTER -> FILE_LTS.B.GLOBAL = @GLOBAL;
     1311+    8936               %ENDIF;
     1312+    8937               %IF (TEXTCHAR(@DUPLICATES) ~= '');
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:575  
     1313+    8938                 @POINTER -> FILE_LTS.B.DUPLICATES = @DUPLICATES;
     1314+    8939               %ENDIF;
     1315+    8940               %IF (TEXTCHAR(@LABEL_OMITTED) ~= '');
     1316+    8941                 @POINTER -> FILE_LTS.B.LABEL_OMITTED = @LABEL_OMITTED;
     1317+    8942               %ENDIF;
     1318+    8943               %IF (TEXTCHAR(@LABEL_STANDARD) ~= '');
     1319+    8944                 @POINTER -> FILE_LTS.B.LABEL_STANDARD = @LABEL_STANDARD;
     1320+    8945               %ENDIF;
     1321+    8946               %IF (TEXTCHAR(@BEGIN_TAPE_LABEL) ~= '');
     1322+    8947                 @POINTER -> FILE_LTS.B.BEGIN_TAPE_LABEL = @BEGIN_TAPE_LABEL;
     1323+    8948               %ENDIF;
     1324+    8949               %IF (TEXTCHAR(@BEGIN_FILE_LABEL) ~= '');
     1325+    8950                 @POINTER -> FILE_LTS.B.BEGIN_FILE_LABEL = @BEGIN_FILE_LABEL;
     1326+    8951               %ENDIF;
     1327+    8952               %IF (TEXTCHAR(@END_TAPE_LABEL) ~= '');
     1328+    8953                 @POINTER -> FILE_LTS.B.END_TAPE_LABEL = @END_TAPE_LABEL;
     1329+    8954               %ENDIF;
     1330+    8955               %IF (TEXTCHAR(@END_FILE_LABEL) ~= '');
     1331+    8956                 @POINTER -> FILE_LTS.B.END_FILE_LABEL = @END_FILE_LABEL;
     1332+    8957               %ENDIF;
     1333+    8958               %IF (TEXTCHAR(@RECORDS_NOT_CHARS) ~= '');
     1334+    8959                 @POINTER -> FILE_LTS.B.RECORDS_NOT_CHARS = @RECORDS_NOT_CHARS;
     1335+    8960               %ENDIF;
     1336+    8961               %IF (TEXTCHAR(@RECORD_FORMAT_2) ~= '');
     1337+    8962                 @POINTER -> FILE_LTS.B.RECORD_FORMAT_2 = @RECORD_FORMAT_2;
     1338+    8963               %ENDIF;
     1339+    8964               %IF (TEXTCHAR(@EBCDIC) ~= '');
     1340+    8965                 @POINTER -> FILE_LTS.B.EBCDIC = @EBCDIC;
     1341+    8966               %ENDIF;
     1342+    8967               %IF (TEXTCHAR(@EBCDIC_CODE_SET) ~= '');
     1343+    8968                 @POINTER -> FILE_LTS.B.EBCDIC_CODE_SET = @EBCDIC_CODE_SET;
     1344+    8969               %ENDIF;
     1345+    8970               %IF (TEXTCHAR(@NON_TYA_RECORDS) ~= '');
     1346+    8971                 @POINTER -> FILE_LTS.B.NON_TYA_RECORDS = @NON_TYA_RECORDS;
     1347+    8972               %ENDIF;
     1348+    8973               %IF (TEXTCHAR(@RECORD_CONTAINS) ~= '');
     1349+    8974                 @POINTER -> FILE_LTS.B.RECORD_CONTAINS = @RECORD_CONTAINS;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:576  
     1350+    8975               %ENDIF;
     1351+    8976               %IF (TEXTCHAR(@BLOCK_CONTAINS) ~= '');
     1352+    8977                 @POINTER -> FILE_LTS.B.BLOCK_CONTAINS = @BLOCK_CONTAINS;
     1353+    8978               %ENDIF;
     1354+    8979               %IF (TEXTCHAR(@SAME_RECORD) ~= '');
     1355+    8980                 @POINTER -> FILE_LTS.B.SAME_RECORD = @SAME_RECORD;
     1356+    8981               %ENDIF;
     1357+    8982               %IF (TEXTCHAR(@SAME_AREA) ~= '');
     1358+    8983                 @POINTER -> FILE_LTS.B.SAME_AREA = @SAME_AREA;
     1359+    8984               %ENDIF;
     1360+    8985
     1361+    8986             END;
     1362+    8987
     1363+    8988           %MEND;
     1364+    8989           %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:577  
     1365+    8990
     1366+    8991
     1367+    8992         %MACRO NEW_REPORT_LTS  (@POINTER           = LTS$,
     1368+    8993                                 @ST$               = "ADDR(NIL)",
     1369+    8994                                 @FILE$             = "ADDR(NIL)",
     1370+    8995                                 @ATTR              = FALSE,
     1371+    8996                                 @CONTROL$          = "ADDR(NIL)",
     1372+    8997                                 @CONTROL_FINAL$    = "ADDR(NIL)",
     1373+    8998                                 @CONTROL_ERROR$    = "ADDR(NIL)",
     1374+    8999                                 @GENERAL_SUBTOTAL$ = "ADDR(NIL)",
     1375+    9000                                 @PAGE_LIMIT        = 0,
     1376+    9001                                 @HEADING           = 0,
     1377+    9002                                 @FIRST_DETAIL      = 0,
     1378+    9003                                 @LAST_DETAIL       = 0,
     1379+    9004                                 @FOOTING           = 0,
     1380+    9005                                 @RECORD_LENGTH     = 0,
     1381+    9006                                 @COL_NO#           = 0,
     1382+    9007                                 @NO_CTR_ITEM       = 0,
     1383+    9008                                 @DETAIL_NO         = 0,
     1384+    9009                                 @BODY_NO           = 0,
     1385+    9010                                 @AFTER_ADVANCE$    = "ADDR(NIL)",
     1386+    9011                                 @PAGE_COUNTER$     = "ADDR(NIL)",
     1387+    9012                                 @LINE_COUNTER$     = "ADDR(NIL)",
     1388+    9013                                 @SUM_LTS$          = "ADDR(NIL)",
     1389+    9014                                 @RWCT$             = "ADDR(NIL)",
     1390+    9015                                 @PAGE_HEADING$     = "ADDR(NIL)",
     1391+    9016                                 @REPORT_HEADING$   = "ADDR(NIL)",
     1392+    9017                                 @REPORT_FOOTING$   = "ADDR(NIL)",
     1393+    9018                                 @PAGE_FOOTING$     = "ADDR(NIL)",
     1394+    9019                                 @DEATIL$           = "ADDR(NIL)",
     1395+    9020                                 @CONTROL_FOOTING$  = "ADDR(NIL)",
     1396+    9021                                 @CONTROL_HEADING$  = "ADDR(NIL)",
     1397+    9022                                 @CONTROL_HEADING_FINAL$  = "ADDR(NIL)",
     1398+    9023                                 @CONTROL_FOOTING_FINAL$  = "ADDR(NIL)",
     1399+    9024                                 @BUFFER_ST$        = "ADDR(NIL)",
     1400+    9025                                 @CTR_LVL_COUNTER$  = "ADDR(NIL)",
     1401+    9026                                 @INIT_CHAIN$       = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:578  
     1402+    9027                                 @LINK              = "ADDR(NIL)");
     1403+    9028
     1404+    9029           DO;
     1405+    9030             %RESERVE_LTS (ITEM    = %REPORT_LTS,
     1406+    9031                           POINTER = @POINTER);
     1407+    9032
     1408+    9033             @POINTER -> REPORT_LTS.ID            = %REPORT_LTS;
     1409+    9034             @POINTER -> REPORT_LTS.ST$           = @ST$;
     1410+    9035             @POINTER -> REPORT_LTS.FILE$         = @FILE$;
     1411+    9036             @POINTER -> REPORT_LTS.ATTR          = @ATTR;
     1412+    9037             @POINTER -> REPORT_LTS.CONTROL$      = @CONTROL$;
     1413+    9038             @POINTER -> REPORT_LTS.CONTROL_FINAL$   = @CONTROL_FINAL$;
     1414+    9039             @POINTER -> REPORT_LTS.CONTROL_ERROR$   = @CONTROL_ERROR$;
     1415+    9040             @POINTER -> REPORT_LTS.GENERAL_SUBTOTAL$ = @GENERAL_SUBTOTAL$;
     1416+    9041             @POINTER -> REPORT_LTS.CTR_LVL_COUNTER$ = @CTR_LVL_COUNTER$;
     1417+    9042             @POINTER -> REPORT_LTS.PAGE_LIMIT    = @PAGE_LIMIT;
     1418+    9043             @POINTER -> REPORT_LTS.HEADING       = @HEADING;
     1419+    9044             @POINTER -> REPORT_LTS.FIRST_DETAIL  = @FIRST_DETAIL;
     1420+    9045             @POINTER -> REPORT_LTS.LAST_DETAIL   = @LAST_DETAIL;
     1421+    9046             @POINTER -> REPORT_LTS.FOOTING       = @FOOTING;
     1422+    9047             @POINTER -> REPORT_LTS.RECORD_LENGTH = @RECORD_LENGTH;
     1423+    9048             @POINTER -> REPORT_LTS.NO_CTR_ITEM   = @NO_CTR_ITEM;
     1424+    9049             @POINTER -> REPORT_LTS.DETAIL_NO     = @DETAIL_NO;
     1425+    9050             @POINTER -> REPORT_LTS.BODY_NO       = @BODY_NO;
     1426+    9051             @POINTER -> REPORT_LTS.PAGE_COUNTER$ = @PAGE_COUNTER$;
     1427+    9052             @POINTER -> REPORT_LTS.LINE_COUNTER$ = @LINE_COUNTER$;
     1428+    9053             @POINTER -> REPORT_LTS.BUFFER_ST$    = @BUFFER_ST$;
     1429+    9054             @POINTER -> REPORT_LTS.COL_NO#       = @COL_NO#;
     1430+    9055             @POINTER -> REPORT_LTS.INIT_CHAIN$   = @INIT_CHAIN$;
     1431+    9056             @POINTER -> REPORT_LTS.SUM_LTS$      = @SUM_LTS$;
     1432+    9057             @POINTER -> REPORT_LTS.RWCT$         = @RWCT$;
     1433+    9058             @POINTER -> REPORT_LTS.PAGE_HEADING$  = @PAGE_HEADING$;
     1434+    9059             @POINTER -> REPORT_LTS.PAGE_FOOTING$  = @PAGE_FOOTING$;
     1435+    9060             @POINTER -> REPORT_LTS.REPORT_HEADING$ = @REPORT_HEADING$;
     1436+    9061             @POINTER -> REPORT_LTS.REPORT_FOOTING$ = @REPORT_FOOTING$;
     1437+    9062             @POINTER -> REPORT_LTS.DETAIL$         = @DEATIL$;
     1438+    9063             @POINTER -> REPORT_LTS.CONTROL_HEADING$ = @CONTROL_HEADING$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:579  
     1439+    9064             @POINTER -> REPORT_LTS.CONTROL_FOOTING$ = @CONTROL_FOOTING$;
     1440+    9065             @POINTER -> REPORT_LTS.CONTROL_FOOTING_FINAL$ = @CONTROL_FOOTING_FINAL$;
     1441+    9066             @POINTER -> REPORT_LTS.CONTROL_HEADING_FINAL$ = @CONTROL_HEADING_FINAL$;
     1442+    9067             @POINTER -> REPORT_LTS.AFTER_ADVANCE$  = @AFTER_ADVANCE$;
     1443+    9068             @POINTER -> REPORT_LTS.LINK            = @LINK;
     1444+    9069
     1445+    9070           END;
     1446+    9071
     1447+    9072         %MEND;
     1448+    9073         %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:580  
     1449+    9074
     1450+    9075
     1451+    9076         %MACRO NEW_REPORT_01_LTS (@POINTER          = LTS$,
     1452+    9077                                   @ST$              = "ADDR(NIL)",
     1453+    9078                                   @QLT$             = "ADDR(NIL)",
     1454+    9079                                   @NEXT             = "ADDR(NIL)",
     1455+    9080                                   @PREV             = "ADDR(NIL)",
     1456+    9081                                   @LINK             = "ADDR(NIL)",
     1457+    9082                                   @RWCT$            = "ADDR(NIL)",
     1458+    9083                                   @GROUP_INDICATOR$ = "ADDR(NIL)",
     1459+    9084                                   @CONTROL_LTS$     = "ADDR(NIL)",
     1460+    9085                                   @REPORT_LTS$      = "ADDR(NIL)",
     1461+    9086                                   @SPECIAL_SUBTOTAL$ = "ADDR(NIL)",
     1462+    9087                                   @FIRST_LINE_LTS$  = "ADDR(NIL)",
     1463+    9088                                   @FIRST_LINE_TYPE  = 0,
     1464+    9089                                   @FIRST_LINE_NO#   = 0,
     1465+    9090                                   @GROUP_TYPE       = 0,
     1466+    9091                                   @LINE_TYPE        = 0,
     1467+    9092                                   @NEXT_GROUP_TYPE  = 0,
     1468+    9093                                   @NEXT_GROUP_NO#   = 0,
     1469+    9094                                   @LINE_NO#         = 0,
     1470+    9095                                   @LINE_PRESENTED  = '0'B,
     1471+    9096                                   @NEXT_GROUP_PRESENTED  = '0'B,
     1472+    9097                                   @TOTAL_LINES      = 0,
     1473+    9098                                   @ATTR             = 0 );
     1474+    9099
     1475+    9100           DO;
     1476+    9101             %RESERVE_LTS (ITEM    = %REPORT_01_LTS,
     1477+    9102                           POINTER = @POINTER);
     1478+    9103
     1479+    9104             @POINTER -> REPORT_01_LTS.ID              = %REPORT_01_LTS;
     1480+    9105             @POINTER -> REPORT_01_LTS.ST$             = @ST$;
     1481+    9106             @POINTER -> REPORT_01_LTS.QLT$            = @QLT$;
     1482+    9107             @POINTER -> REPORT_01_LTS.NEXT            = @NEXT;
     1483+    9108             @POINTER -> REPORT_01_LTS.PREV            = @PREV;
     1484+    9109             @POINTER -> REPORT_01_LTS.LINK            = @LINK;
     1485+    9110             @POINTER -> REPORT_01_LTS.RWCT$           = @RWCT$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:581  
     1486+    9111             @POINTER -> REPORT_01_LTS.GROUP_INDICATOR$ = @GROUP_INDICATOR$;
     1487+    9112             @POINTER -> REPORT_01_LTS.CONTROL_LTS$    = @CONTROL_LTS$;
     1488+    9113             @POINTER -> REPORT_01_LTS.GROUP_TYPE      = @GROUP_TYPE;
     1489+    9114             @POINTER -> REPORT_01_LTS.REPORT_LTS$     = @REPORT_LTS$;
     1490+    9115             @POINTER -> REPORT_01_LTS.SPECIAL_SUBTOTAL$ = @SPECIAL_SUBTOTAL$;
     1491+    9116             @POINTER -> REPORT_01_LTS.FIRST_LINE.TYPE = @FIRST_LINE_TYPE;
     1492+    9117             @POINTER -> REPORT_01_LTS.FIRST_LINE.LTS$ = @FIRST_LINE_LTS$;
     1493+    9118             @POINTER -> REPORT_01_LTS.FIRST_LINE.NO#  = @FIRST_LINE_NO#;
     1494+    9119             @POINTER -> REPORT_01_LTS.LINE_TYPE       = @LINE_TYPE;
     1495+    9120             @POINTER -> REPORT_01_LTS.NEXT_GROUP_TYPE = @NEXT_GROUP_TYPE;
     1496+    9121             @POINTER -> REPORT_01_LTS.NEXT_GROUP_NO#  = @NEXT_GROUP_NO#;
     1497+    9122             @POINTER -> REPORT_01_LTS.LINE_NO#        = @LINE_NO#;
     1498+    9123             @POINTER -> REPORT_01_LTS.TOTAL_LINES     = @TOTAL_LINES;
     1499+    9124             @POINTER -> REPORT_01_LTS.ATTR            = @ATTR;
     1500+    9125             @POINTER -> REPORT_01_LTS.B.LINE_PRESENTED = @LINE_PRESENTED;
     1501+    9126             @POINTER -> REPORT_01_LTS.B.NEXT_GROUP_PRESENTED = @NEXT_GROUP_PRESENTED;
     1502+    9127           END;
     1503+    9128         %MEND;
     1504+    9129
     1505+    9130
     1506+    9131
     1507+    9132
     1508+    9133         %MACRO NEW_REPORT_ELEM_LTS (@POINTER          = LTS$,
     1509+    9134                                     @ST$              = "ADDR(NIL)",
     1510+    9135                                     @QLT$             = "ADDR(NIL)",
     1511+    9136                                     @NEXT             = "ADDR(NIL)",
     1512+    9137                                     @PREV             = "ADDR(NIL)",
     1513+    9138                                     @SOURCE_ETT$      = "ADDR(NIL)",
     1514+    9139                                     @VALUE_ETT$       = "ADDR(NIL)",
     1515+    9140                                     @SUM_LTS$         = "ADDR(NIL)",
     1516+    9141                                     @LINE_TYPE        = 0,
     1517+    9142                                     @SPAN             = 0,
     1518+    9143                                     @LINE_NO#         = 0,
     1519+    9144                                     @COLUMN_NO#       = 0,
     1520+    9145                                     @LINE_PRESENTED   = '0'B,
     1521+    9146                                     @COLUMN_PRESENTED = '0'B,
     1522+    9147                                     @GROUP_INDICATE   = '0'B,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:582  
     1523+    9148                                     @SUM_PRESENTED    = '0'B,
     1524+    9149                                     @SOURCE_PRESENTED = '0'B,
     1525+    9150                                     @PRINTABLE        = '0'B,
     1526+    9151                                     @ATTR             = 0 );
     1527+    9152
     1528+    9153           DO;
     1529+    9154             %RESERVE_LTS (ITEM    = %REPORT_ELEM_LTS,
     1530+    9155                           POINTER = @POINTER);
     1531+    9156
     1532+    9157             @POINTER -> REPORT_ELEM_LTS.ID              = %REPORT_ELEM_LTS;
     1533+    9158             @POINTER -> REPORT_ELEM_LTS.ST$             = @ST$;
     1534+    9159             @POINTER -> REPORT_ELEM_LTS.QLT$            = @QLT$;
     1535+    9160             @POINTER -> REPORT_ELEM_LTS.NEXT            = @NEXT;
     1536+    9161             @POINTER -> REPORT_ELEM_LTS.PREV            = @PREV;
     1537+    9162             @POINTER -> REPORT_ELEM_LTS.SOURCE_ETT$     = @SOURCE_ETT$;
     1538+    9163             @POINTER -> REPORT_ELEM_LTS.VALUE_ETT$      = @VALUE_ETT$;
     1539+    9164             @POINTER -> REPORT_ELEM_LTS.SUM_LTS$        = @SUM_LTS$;
     1540+    9165             @POINTER -> REPORT_ELEM_LTS.LINE_TYPE       = @LINE_TYPE;
     1541+    9166             @POINTER -> REPORT_ELEM_LTS.SPAN            = @SPAN;
     1542+    9167             @POINTER -> REPORT_ELEM_LTS.COLUMN_NO#      = @COLUMN_NO#;
     1543+    9168             @POINTER -> REPORT_ELEM_LTS.LINE_NO#        = @LINE_NO#;
     1544+    9169             @POINTER -> REPORT_ELEM_LTS.ATTR            = @ATTR;
     1545+    9170             @POINTER -> REPORT_ELEM_LTS.B.COLUMN_PRESENTED = @COLUMN_PRESENTED;
     1546+    9171             @POINTER -> REPORT_ELEM_LTS.B.LINE_PRESENTED = @LINE_PRESENTED;
     1547+    9172             @POINTER -> REPORT_ELEM_LTS.B.GROUP_INDICATE = @GROUP_INDICATE;
     1548+    9173             @POINTER -> REPORT_ELEM_LTS.B.SUM_PRESENTED = @SUM_PRESENTED;
     1549+    9174             @POINTER -> REPORT_ELEM_LTS.B.SOURCE_PRESENTED = @SOURCE_PRESENTED;
     1550+    9175             @POINTER -> REPORT_ELEM_LTS.B.PRINTABLE     = @PRINTABLE;
     1551+    9176           END;
     1552+    9177         %MEND;
     1553+    9178
     1554+    9179
     1555+    9180
     1556+    9181
     1557+    9182         %MACRO NEW_REPORT_GRP_LTS  (@POINTER          = LTS$,
     1558+    9183                                     @ST$              = "ADDR(NIL)",
     1559+    9184                                     @QLT$             = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:583  
     1560+    9185                                     @NEXT             = "ADDR(NIL)",
     1561+    9186                                     @PREV             = "ADDR(NIL)",
     1562+    9187                                     @LINE_TYPE        = 0,
     1563+    9188                                     @LINE_NO#         = 0,
     1564+    9189                                     @LINE_PRESENTED  = '0'B,
     1565+    9190                                     @ATTR             = 0 );
     1566+    9191
     1567+    9192           DO;
     1568+    9193             %RESERVE_LTS (ITEM    = %REPORT_GRP_LTS,
     1569+    9194                           POINTER = @POINTER);
     1570+    9195
     1571+    9196             @POINTER -> REPORT_GRP_LTS.ID              = %REPORT_GRP_LTS;
     1572+    9197             @POINTER -> REPORT_GRP_LTS.ST$             = @ST$;
     1573+    9198             @POINTER -> REPORT_GRP_LTS.QLT$            = @QLT$;
     1574+    9199             @POINTER -> REPORT_GRP_LTS.NEXT            = @NEXT;
     1575+    9200             @POINTER -> REPORT_GRP_LTS.PREV            = @PREV;
     1576+    9201             @POINTER -> REPORT_GRP_LTS.LINE_TYPE       = @LINE_TYPE;
     1577+    9202             @POINTER -> REPORT_GRP_LTS.LINE_NO#        = @LINE_NO#;
     1578+    9203             @POINTER -> REPORT_GRP_LTS.ATTR            = @ATTR;
     1579+    9204             @POINTER -> REPORT_GRP_LTS.B.LINE_PRESENTED = @LINE_PRESENTED;
     1580+    9205           END;
     1581+    9206         %MEND;
     1582+    9207
     1583+    9208         %MACRO REPORT_ENTRIES;
     1584+    9209             %REPORT_LTS,                    /*#25795*/
     1585+    9210             %REPORT_01_LTS,
     1586+    9211             %REPORT_GRP_LTS,
     1587+    9212             %REPORT_ELEM_LTS
     1588+    9213         %MEND;
     1589+    9214
     1590+    9215
     1591+    9216         %MACRO  NEW_CONTROL_NAME_LTS   (@POINTER          = LTS$,
     1592+    9217                                         @ST$              = "ADDR(NIL)",
     1593+    9218                                         @ST_FIELD$        = "ADDR(NIL)",
     1594+    9219                                         @TEMP_FIELD$      = "ADDR(NIL)",
     1595+    9220                                         @SHADOW_FIELD$    = "ADDR(NIL)",
     1596+    9221                                         @CONTROL_HEADING$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:584  
     1597+    9222                                         @CONTROL_FOOTING$ = "ADDR(NIL)",
     1598+    9223                                         @SUM_RESET$       = "ADDR(NIL)",
     1599+    9224                                         @SUM_SUBTOTAL$    = "ADDR(NIL)",
     1600+    9225                                         @SUM_CLEAR$       = "ADDR(NIL)",
     1601+    9226                                         @TEMP$            = "ADDR(NIL)",
     1602+    9227                                         @SHADOW$          = "ADDR(NIL)",
     1603+    9228                                         @LEVEL            = 0,
     1604+    9229                                         @START_OFFSET     = 0,
     1605+    9230                                         @ATTR             = 0,
     1606+    9231                                         @LINK             = "ADDR(NIL)");
     1607+    9232
     1608+    9233
     1609+    9234           DO;
     1610+    9235             %RESERVE_LTS (ITEM  = %CONTROL_NAME_LTS,
     1611+    9236                           POINTER = @POINTER);
     1612+    9237             @POINTER -> CONTROL_NAME_LTS.ID             = %CONTROL_NAME_LTS;
     1613+    9238             @POINTER -> CONTROL_NAME_LTS.ST$            = @ST$;
     1614+    9239             @POINTER -> CONTROL_NAME_LTS.ST_FIELD$      = @ST_FIELD$;
     1615+    9240             @POINTER -> CONTROL_NAME_LTS.TEMP_FIELD$    = @TEMP_FIELD$;
     1616+    9241             @POINTER -> CONTROL_NAME_LTS.SHADOW_FIELD$  = @SHADOW_FIELD$;
     1617+    9242             @POINTER -> CONTROL_NAME_LTS.CONTROL_HEADING$ = @CONTROL_HEADING$;
     1618+    9243             @POINTER -> CONTROL_NAME_LTS.CONTROL_FOOTING$ = @CONTROL_FOOTING$;
     1619+    9244             @POINTER -> CONTROL_NAME_LTS.SUM_RESET$     = @SUM_RESET$;
     1620+    9245             @POINTER -> CONTROL_NAME_LTS.SUM_SUBTOTAL$  = @SUM_SUBTOTAL$;
     1621+    9246             @POINTER -> CONTROL_NAME_LTS.SUM_CLEAR$     = @SUM_CLEAR$;
     1622+    9247             @POINTER -> CONTROL_NAME_LTS.TEMP$          = @TEMP$;
     1623+    9248             @POINTER -> CONTROL_NAME_LTS.SHADOW$        = @SHADOW$;
     1624+    9249             @POINTER -> CONTROL_NAME_LTS.LEVEL          = @LEVEL;
     1625+    9250             @POINTER -> CONTROL_NAME_LTS.START_OFFSET   = @START_OFFSET;
     1626+    9251             @POINTER -> CONTROL_NAME_LTS.ATTR           = @ATTR;
     1627+    9252             @POINTER -> CONTROL_NAME_LTS.LINK           = @LINK;
     1628+    9253          END;
     1629+    9254         %MEND;
     1630+    9255
     1631+    9256         %MACRO NEW_SUM_LTS (@POINTER = LTS$,
     1632+    9257                             @EDIT_ST$ = "ADDR(NIL)",
     1633+    9258                             @SUM_ST$ = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:585  
     1634+    9259                             @SUM_ST_ILL$ = "ADDR(NIL)",
     1635+    9260                             @REPORT_LTS$ = "ADDR(NIL)",
     1636+    9261                             @REPORT_01_LTS$ = "ADDR(NIL)",
     1637+    9262                             @ATTR     = 0,
     1638+    9263                             @EDIT_ST_ILL$ = "ADDR(NIL)");
     1639+    9264
     1640+    9265           DO;
     1641+    9266             %RESERVE_LTS (ITEM = %SUM_LTS,
     1642+    9267                           POINTER = @POINTER);
     1643+    9268             @POINTER -> SUM_LTS.ID          = %SUM_LTS;
     1644+    9269             @POINTER -> SUM_LTS.EDIT_ST$     = @EDIT_ST$;
     1645+    9270             @POINTER -> SUM_LTS.REPORT_LTS$ = @REPORT_LTS$;
     1646+    9271             @POINTER -> SUM_LTS.REPORT_01_LTS$ = @REPORT_01_LTS$;
     1647+    9272             @POINTER -> SUM_LTS.SUM_ST_ILL$ = @SUM_ST_ILL$;
     1648+    9273             @POINTER -> SUM_LTS.ATTR        = @ATTR;
     1649+    9274             @POINTER -> SUM_LTS.EDIT_ST_ILL$ = @EDIT_ST_ILL$;
     1650+    9275           END;
     1651+    9276         %MEND;
     1652+    9277
     1653+    9278         %MACRO NEW_SEGMENT_LTS (@POINTER = LTS$,
     1654+    9279                                 @ATTR     = 0,
     1655+    9280                                 @FIXED_PERMANENT = '0'B,
     1656+    9281                                 @FIXED_OVERLAY   = '0'B,
     1657+    9282                                 @INDEPENDENT     = '0'B,
     1658+    9283                                 @SECTION_ST$     = "ADDR(NIL)",
     1659+    9284                                 @SEGMENT_NO#     = 0,
     1660+    9285                                 @NEXT_SECTION$   = "ADDR(NIL)",
     1661+    9286                                 @ALTER_RESET$    = "ADDR(NIL)",
     1662+    9287                                 @SUB_LABEL$      = "ADDR(NIL)",
     1663+    9288                                 @NEXT            = "ADDR(NIL)",
     1664+    9289                                 @LINK            = "ADDR(NIL)");
     1665+    9290
     1666+    9291           DO;
     1667+    9292             %RESERVE_LTS (ITEM = %SEGMENT_LTS,
     1668+    9293                           POINTER = @POINTER);
     1669+    9294
     1670+    9295             @POINTER -> SEGMENT_LTS.ID = %SEGMENT_LTS;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:586  
     1671+    9296             @POINTER -> SEGMENT_LTS.ATTR = @ATTR;
     1672+    9297             @POINTER -> SEGMENT_LTS.B.FIXED_PERMANENT = @FIXED_PERMANENT;
     1673+    9298             @POINTER -> SEGMENT_LTS.B.FIXED_OVERLAY   = @FIXED_OVERLAY;
     1674+    9299             @POINTER -> SEGMENT_LTS.B.INDEPENDENT     = @INDEPENDENT;
     1675+    9300             @POINTER -> SEGMENT_LTS.SECTION_ST$       = @SECTION_ST$;
     1676+    9301             @POINTER -> SEGMENT_LTS.SEGMENT_NO#       = @SEGMENT_NO#;
     1677+    9302             @POINTER -> SEGMENT_LTS.NEXT_SECTION$     = @NEXT_SECTION$;
     1678+    9303             @POINTER -> SEGMENT_LTS.ALTER_RESET$      = @ALTER_RESET$;
     1679+    9304             @POINTER -> SEGMENT_LTS.SUB_LABEL$      = @SUB_LABEL$;
     1680+    9305             @POINTER -> SEGMENT_LTS.NEXT              = @NEXT;
     1681+    9306             @POINTER -> SEGMENT_LTS.LINK              = @LINK;
     1682+    9307
     1683+    9308           END;
     1684+    9309         %MEND;
     1685+    9310
     1686+    9311         %MACRO NEW_ALTER_LTS (@POINTER = LTS$,
     1687+    9312                               @SEG_NO# = 0,
     1688+    9313                               @LABEL$  = "ADDR(NIL)",
     1689+    9314                               @NEXT    = "ADDR(NIL)");
     1690+    9315           DO;
     1691+    9316             %RESERVE_LTS (ITEM = %ALTER_LTS,
     1692+    9317                           POINTER = @POINTER);
     1693+    9318
     1694+    9319             @POINTER -> ALTER_LTS.ID       = %ALTER_LTS;
     1695+    9320             @POINTER -> ALTER_LTS.SEG_NO#  = @SEG_NO#;
     1696+    9321             @POINTER -> ALTER_LTS.LABEL$   = @LABEL$;
     1697+    9322             @POINTER -> ALTER_LTS.NEXT     = @NEXT;
     1698+    9323           END;
     1699+    9324         %MEND;
     1700+    9325
     1701+    9326         %MACRO NEW_ARRAY_PRESET_LTS (@POINTER = LTS$,
     1702+    9327                                      @CONSTANT$ = "ADDR(NIL)",
     1703+    9328                                      @STRING$    = "ADDR(NIL)",
     1704+    9329                                      @LAST_OFFSET = 0,
     1705+    9330                                      @BITS_LEFT  = 0);
     1706+    9331           DO;
     1707+    9332               %RESERVE_LTS (ITEM    = %ARRAY_PRESET_LTS,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:587  
     1708+    9333                             POINTER = @POINTER);
     1709+    9334
     1710+    9335               @POINTER -> ARRAY_PRESET_LTS.ID = %ARRAY_PRESET_LTS;
     1711+    9336               @POINTER -> ARRAY_PRESET_LTS.CONSTANT$ = @CONSTANT$;
     1712+    9337               @POINTER -> ARRAY_PRESET_LTS.STRING$ = @STRING$;
     1713+    9338               @POINTER -> ARRAY_PRESET_LTS.LAST_OFFSET = @LAST_OFFSET;
     1714+    9339               @POINTER -> ARRAY_PRESET_LTS.BITS_LEFT = @BITS_LEFT;
     1715+    9340           END;
     1716+    9341         %MEND;
     1717+    9342
     1718+    9343         %MACRO NEW_BASE_LTS (@POINTER = LTS$,
     1719+    9344                              @ST$ = "ADDR(NIL)",
     1720+    9345                              @POINTER$    = "ADDR(NIL)",
     1721+    9346                              @REDEFINE$    = "ADDR(NIL)",
     1722+    9347                              @SEQ# = 0,
     1723+    9348                              @ARGP$ = "ADDR(NIL)",
     1724+    9349                              @LINK = "ADDR(NIL)",
     1725+    9350                              @NEXT = "ADDR(NIL)");
     1726+    9351           DO;
     1727+    9352               %RESERVE_LTS (ITEM    = %BASE_LTS,
     1728+    9353                             POINTER = @POINTER);
     1729+    9354
     1730+    9355               @POINTER -> BASE_LTS.ID = %BASE_LTS;
     1731+    9356               @POINTER -> BASE_LTS.POINTER$ = @POINTER$;
     1732+    9357               @POINTER -> BASE_LTS.NEXT = @NEXT;
     1733+    9358               @POINTER -> BASE_LTS.LINK = @LINK;
     1734+    9359               @POINTER -> BASE_LTS.REDEFINE$ = @REDEFINE$;
     1735+    9360               @POINTER -> BASE_LTS.ARGP$ = @ARGP$;
     1736+    9361               @POINTER -> BASE_LTS.SEQ# = @SEQ#;
     1737+    9362               @POINTER -> BASE_LTS.ST$ = @ST$;
     1738+    9363           END;
     1739+    9364         %MEND;
     1740+    9365
     1741+    9366         %MACRO NEW_CD_LTS (@POINTER = ,
     1742+    9367                            @LX_CD_TYPE    = %LX_CD_INPUT,
     1743+    9368                            @CD_ST$        = "ADDR(NIL)",
     1744+    9369                            @LINK          = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:588  
     1745+    9370                            @WORK_ST$      = "ADDR(NIL)",
     1746+    9371                            @BUFFER_ST$    = "ADDR(NIL)",
     1747+    9372                            @BUFFER_LENGTH = 84,
     1748+    9373                            @ATTR          = 0,
     1749+    9374                            @OCCURS        = 0,
     1750+    9375                            @INITIAL       = '0'B);
     1751+    9376           DO;
     1752+    9377               %RESERVE_LTS (ITEM = %CD_LTS,
     1753+    9378                             POINTER = @POINTER);
     1754+    9379
     1755+    9380             @POINTER -> CD_LTS.ID         = %CD_LTS;
     1756+    9381             @POINTER -> CD_LTS.CD_ST$     = @CD_ST$;
     1757+    9382             @POINTER -> CD_LTS.WORK_ST$   = @WORK_ST$;
     1758+    9383             @POINTER -> CD_LTS.BUFFER_ST$ = @BUFFER_ST$;
     1759+    9384             @POINTER -> CD_LTS.LX_CD_TYPE = @LX_CD_TYPE;
     1760+    9385             @POINTER -> CD_LTS.BUFFER_LENGTH = @BUFFER_LENGTH;
     1761+    9386             @POINTER -> CD_LTS.ATTR          = @ATTR;
     1762+    9387             @POINTER -> CD_LTS.B.INITIAL     = @INITIAL;
     1763+    9388             @POINTER -> CD_LTS.LINK          = @LINK;
     1764+    9389             @POINTER -> CD_LTS.D.LEN         = @BUFFER_LENGTH - 4;
     1765+    9390             @POINTER -> CD_LTS.D.OCCURS      = @OCCURS;
     1766+    9391
     1767+    9392           END;
     1768+    9393         %MEND;
     1769+    9394         %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:589  
     1770+    9395
     1771+    9396           %MACRO NEW_LTS_PTR_ARRAY (@POINTER = LTS$,
     1772+    9397                                @SIZE    = %MIN_LTS_PTR_ARRAY_SIZE,
     1773+    9398                                @LINK    = "ADDR(NIL)");
     1774+    9399
     1775+    9400             DO;
     1776+    9401               ITERATION = @SIZE;
     1777+    9402               %RESERVE_LTS (ITEM     = %LTS_PTR_ARRAY,
     1778+    9403                             POINTER  = @POINTER);
     1779+    9404               @POINTER -> LTS_PTR_ARRAY.LINK = @LINK;
     1780+    9405             END;
     1781+    9406           %MEND;
     1782+    9407
     1783+    9408
     1784+    9409           %MACRO NEW_ALT_KEY (@POINTER = LTS$,
     1785+    9410                               @#KEYS   = 1);
     1786+    9411
     1787+    9412               DO;
     1788+    9413                 ITERATION = (@#KEYS * %NO_WORDS_PER_ALT_KEY) + %MIN_ALT_KEY_SIZE;
     1789+    9414                 %RESERVE_LTS (ITEM     = %ALT_KEY,
     1790+    9415                               POINTER  = @POINTER);
     1791+    9416                 @POINTER -> ALT_KEY.NUM_KEYS_MINUS_1 = @#KEYS - 1;
     1792+    9417               END;
     1793+    9418           %MEND;
     1794+    9419
     1795+    9420
     1796+    9421            %MACRO NEW_DML_REC (@POINTER  = LTS$,
     1797+    9422                                @INFO =    ,
     1798+    9423                                @EXTEND$  = "ADDR(NIL)");
     1799+    9424
     1800+    9425                DO;
     1801+    9426                    %RESERVE_LTS(POINTER = @POINTER, ITEM = %DML_REC);
     1802+    9427                    @POINTER -> DML_REC.RECORD_INFO = @INFO;
     1803+    9428                    @POINTER -> DML_REC.EXTEND$ = @EXTEND$;
     1804+    9429                END;
     1805+    9430
     1806+    9431            %MEND;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:590  
     1807+    9432
     1808+    9433            %MACRO NEW_USE_LTS ( @POINTER     = LTS$,
     1809+    9434                                 @TYPE        = %USE_TYPE_UNKNOWN,
     1810+    9435                                 @PROC_CHAIN$ = "ADDR(NIL)",
     1811+    9436                                 @PROC_LABEL$ = "ENTADDR(NIL)",
     1812+    9437                                 @LINK$       = "ADDR(NIL)",
     1813+    9438                                 @TO$         = "ADDR(NIL)",
     1814+    9439                                 @TO1$        = "ADDR(NIL)",
     1815+    9440                                 @LINE        = 0,
     1816+    9441                                 @COLUMN      = 0,
     1817+    9442                                 @INIT_LABEL_BASE$ = "ADDR(NIL)");
     1818+    9443
     1819+    9444                DO;
     1820+    9445                    %RESERVE_LTS(POINTER = @POINTER, ITEM = %USE_LTS);
     1821+    9446                    @POINTER -> USE.PROC_CHAIN$ = @PROC_CHAIN$;
     1822+    9447                    %IF TEXTCHAR(@PROC_LABEL$) = 'ENTADDR(NIL)';
     1823+    9448                    @POINTER -> USE.PROC_NO_LABEL$ = ENTADDR(NIL);
     1824+    9449                    %ELSE;
     1825+    9450                    @POINTER -> USE.PROC_LABEL$ = @PROC_LABEL$;
     1826+    9451                    %ENDIF;
     1827+    9452                    @POINTER -> USE.LINK$       = @LINK$;
     1828+    9453                    @POINTER -> USE.TO$         = @TO$  ;
     1829+    9454                    @POINTER -> USE.TYPE        = @TYPE ;
     1830+    9455                    ADDR(@POINTER -> USE.ILS_LIST) -> ILS_LIST.HEAD$ = ADDR(NIL) ;
     1831+    9456                    ADDR(@POINTER -> USE.ILS_LIST) -> ILS_LIST.TAIL$ = ADDR(NIL) ;
     1832+    9457                    ADDR(@POINTER -> USE.ILS_LIST) -> ILS_LIST.LINK  = ADDR(NIL) ;
     1833+    9458                    @POINTER -> USE.TO1$        = @TO1$ ;
     1834+    9459                    @POINTER -> USE.INIT_LABEL_BASE$        = @INIT_LABEL_BASE$ ;
     1835+    9460                    @POINTER -> USE.LINE        = @LINE;
     1836+    9461                    @POINTER -> USE.COLUMN      = @COLUMN;
     1837+    9462                END;
     1838+    9463
     1839+    9464            %MEND;
     1840+    9465
     1841+    9466            %MACRO NEW_USE_SUPP (@POINTER = LTS$,
     1842+    9467                                 @FILE_LTS$ = "ADDR(NIL)",
     1843+    9468                                 @PROC_LABEL$ = "ENTADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:591  
     1844+    9469                                 @TO$ = "ADDR(NIL)",
     1845+    9470                                 @USE$ = "ADDR(NIL)",
     1846+    9471                                 @INIT_LABEL_BASE$ = "ADDR(NIL)",
     1847+    9472                                 @LINK$ = "ADDR(NIL)");
     1848+    9473
     1849+    9474                DO;
     1850+    9475                    %RESERVE_LTS (POINTER=@POINTER, ITEM = %USE_SUPP);
     1851+    9476                    @POINTER -> USE_SUPP.FILE_LTS$   = @FILE_LTS$;
     1852+    9477                    %IF TEXTCHAR(@PROC_LABEL$) = 'ENTADDR(NIL)';
     1853+    9478                    @POINTER -> USE_SUPP.PROC_LABEL_EPTR = ENTADDR(NIL);
     1854+    9479                    %ELSE;
     1855+    9480                    @POINTER -> USE_SUPP.PROC_LABEL$ = @PROC_LABEL$;
     1856+    9481                    %ENDIF;
     1857+    9482                    @POINTER -> USE_SUPP.TO$         = @TO$;
     1858+    9483                    @POINTER -> USE_SUPP.USE$        = @USE$;
     1859+    9484                    @POINTER -> USE_SUPP.INIT_LABEL_BASE$        = @INIT_LABEL_BASE$;
     1860+    9485                    @POINTER -> USE_SUPP.LINK$       = @LINK$;
     1861+    9486                END;
     1862+    9487
     1863+    9488            %MEND;
     1864+    9489
     1865+    9490            %MACRO NEW_EXT_DML (@POINTER = LTS$,
     1866+    9491                                @EXTEND$ = "ADDR(NIL)");
     1867+    9492
     1868+    9493                DO;
     1869+    9494                    %RESERVE_LTS(POINTER = @POINTER, ITEM = %DML_REC);
     1870+    9495                    @POINTER -> DML_REC.EXTEND$ = @EXTEND$;
     1871+    9496                END;
     1872+    9497
     1873+    9498            %MEND;
     1874+    9499
     1875+    9500            %MACRO NEW_RVA_LTS( @ST$ =  ,
     1876+    9501                                @POINTER = LTS$,
     1877+    9502                                @OFFSET =  0,
     1878+    9503                                @VERB = 0 );
     1879+    9504
     1880+    9505                %RESERVE_LTS( ITEM = %RVA, POINTER = @POINTER);
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:592  
     1881+    9506                @POINTER -> RVA_LTS.ST$ = @ST$;
     1882+    9507                @POINTER -> RVA_LTS.LINK$ = O1COM.RVA_LINK$;
     1883+    9508                O1COM.RVA_LINK$ = @POINTER;
     1884+    9509                @POINTER -> RVA_LTS.VERB = @VERB;
     1885+    9510                @POINTER -> RVA_LTS.OFFSET = @OFFSET;
     1886+    9511
     1887+    9512            %MEND;
     1888+    9513        %MACRO GET_RVA_LTS(@ST$ = ,
     1889+    9514                           @POINTER = ,
     1890+    9515                           @LTS$ = );
     1891+    9516            DO WHILE @POINTER ~= ADDR(NIL);
     1892+    9517                IF @ST$ = @POINTER -> RVA_LTS.ST$    THEN
     1893+    9518                  DO;
     1894+    9519                    @LTS$ = @POINTER;
     1895+    9520                    @POINTER = ADDR(NIL);
     1896+    9521                  END;
     1897+    9522                ELSE
     1898+    9523                    @POINTER = @POINTER -> RVA_LTS.LINK$;
     1899+    9524            END;
     1900+    9525        %MEND;
     1901+    9526
     1902+    9527        %MACRO NEW_OPEN_LTS( @ARG$ = ,
     1903+    9528                             @FILE_LTS$ = ,
     1904+    9529                             @CONST_PARM = ,
     1905+    9530                             @OPEN_TYPE = ,
     1906+    9531                             @INFO_BLOCK$ = ,
     1907+    9532                             @POINTER = LTS$);
     1908+    9533        DO;
     1909+    9534          %RESERVE_LTS( ITEM = %OPEN_LTS, POINTER = @POINTER );
     1910+    9535
     1911+    9536          @POINTER -> OPEN_LTS.CONST_PARM = @CONST_PARM;
     1912+    9537          @POINTER -> OPEN_LTS.OPEN_TYPE = @OPEN_TYPE;
     1913+    9538          @POINTER -> OPEN_LTS.ARG$ = @ARG$;
     1914+    9539          @POINTER -> OPEN_LTS.INFO_BLOCK$ = @INFO_BLOCK$;
     1915+    9540          @POINTER -> OPEN_LTS.FILE_LTS$ = @FILE_LTS$;
     1916+    9541          @POINTER -> OPEN_LTS.LINK = O1COM.OPEN_LTS$;
     1917+    9542
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:593  
     1918+    9543          O1COM.OPEN_LTS$ = @POINTER;
     1919+    9544
     1920+    9545        END;
     1921+    9546        %MEND;
     1922+    9547
     1923+    9548        %MACRO NEW_IO_RESTORE_CHAIN (@POINTER = LTS$,
     1924+    9549                                     @RESTORE = "ADDR(NIL)",
     1925+    9550                                     @TO      = "ADDR(NIL)",
     1926+    9551                                     @BASE    = "ADDR(NIL)",
     1927+    9552                                     @NEXT    = "ADDR(NIL)") ;
     1928+    9553           DO;
     1929+    9554             %RESERVE_LTS (ITEM    = %IO_RESTORE_CHAIN,
     1930+    9555                           POINTER = @POINTER);
     1931+    9556             @POINTER -> IO_RESTORE_CHAIN.NEXT$    = @NEXT;
     1932+    9557             @POINTER -> IO_RESTORE_CHAIN.RESTORE$ = @RESTORE;
     1933+    9558             @POINTER -> IO_RESTORE_CHAIN.TO$      = @TO;
     1934+    9559             @POINTER -> IO_RESTORE_CHAIN.BASE$    = @BASE;
     1935+    9560           END;
     1936+    9561        %MEND;
     1937+    9562
     1938+    9563        %EQU NO_OF_LTS_ITEMS = %LAST_LTS - %FIRST_LTS + 1;
     1939+    9564
     1940+    9565        /* INFO FOR DIMS ITEM */
     1941+    9566        %EQU MIN_DIM_SIZE = 5 ;
     1942+    9567        %EQU NO_WORDS_PER_DIM = 3 ;
     1943+    9568
     1944+    9569        /* Info for LTS_PTR_ARRAY */
     1945+    9570        %EQU MIN_LTS_PTR_ARRAY_SIZE = 3;
     1946+    9571
     1947+    9572        %MACRO FIND_LAST_DIM(POINTER=LTS$, VARIABLE=LAST_DIM) ;
     1948+    9573               DO ;
     1949+    9574                 VARIABLE = (POINTER->LTS.N - %MIN_DIM_SIZE) / %NO_WORDS_PER_DIM ;
     1950+    9575               END ;
     1951+    9576        %MEND ;
     1952+    9577
     1953+    9578        /* INFO FOR EVALUATE ITEM */
     1954+    9579        %EQU MIN_EVAL_SIZE = 1 ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:594  
     1955+    9580        %EQU WORDS_PER_EVAL_VAR = 4 ;
     1956+    9581
     1957+    9582    1   DCL   LTS_STEP (0:%(NO_OF_LTS_ITEMS - 1 )) UBIN
     1958+    9583        %IF INITIALIZE;
     2000+    9625        %ELSE;
     2001+    9626    1         SYMREF READONLY
     2002+    9627        %ENDIF ;
     2003+    9628    1        ;
     2004+    9629
     2005+    9630
     2006+    9631        /* Equates for verifying assign values between Z8EN & Z9EN */
     2007+    9632        %EQU ASSIGN_PRINTER = 0;
     2008+    9633        %EQU ASSIGN_INPUT   = 1;
     2009+    9634        %EQU ASSIGN_OUTPUT  = 2;
     2010+    9635        %EQU ASSIGN_DISK    = 3;
     2011+    9636
     2012+    9637        /* Equates for USE.TYPE */
     2013+    9638        %EQU USE_TYPE_UNKNOWN   = 0 ;
     2014+    9639        %EQU USE_TYPE_INPUT     = 1 ;
     2015+    9640        %EQU USE_TYPE_OUTPUT    = 2 ;
     2016+    9641        %EQU USE_TYPE_EXTEND    = 3 ;
     2017+    9642        %EQU USE_TYPE_IO        = 4 ;
     2018+    9643        %EQU USE_TYPE_FILE      = 5 ;
     2019+    9644        %EQU USE_TYPE_REPORTING = 6 ;
     2020+    9645        %EQU USE_TYPE_DML       = 7 ;
     2021+    9646        %EQU USE_TYPE_NIL       = 8 ;
     2022+    9647        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:595  
      496     9648        %INCLUDE Z8A_QLT ;
        1+    9649        /*T***********************************************************/
        2+    9650        /*T*                                                         */
        3+    9651        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    9652        /*T*                                                         */
        5+    9653        /*T***********************************************************/
        6+    9654        /* INCLUDE FILE "QLT" (QUALIFIER LINKS TABLE) */
        7+    9655
        8+    9656
        9+    9657    1   DCL   QLT$    PTR EXT ;
       10+    9658    1   DCL   PREV_01_QLT$ PTR EXT ;
       11+    9659
       12+    9660    1   DCL 1  QLT_    EXT ALIGNED,
       13+    9661    1        2 TOP     PTR INIT (ADDR(NIL)),
       14+    9662    1        2 FIRST   PTR,          /* FIRST ITEM IN PAGE  */
       15+    9663    1        2 BOTTOM  UBIN INIT(0), /* NEXT AVAILABLE WORD */
       16+    9664    1        2 FLOOR   UBIN INIT(0), /* LAST WORD IN PAGE   */
       17+    9665    1        2 SIZE    UBIN INIT(0); /* SIZE in #pages      */
       18+    9666
       19+    9667    1   DCL 1 QLT     BASED (QLT$) ALIGNED,
       20+    9668    1       2 ID      UBIN (18) UNAL, /* IDENTIFICATION CODE   */
       21+    9669    1       2 B       UNAL,           /* BITS                  */
       22+    9670    1       3 OCCURS  BIT (1) UNAL,   /* OCCURS CLAUSE USED    */
       23+    9671    1       3 SYNC    BIT (1) UNAL,   /* SYNCHRONIZED CLAUSE   */
       24+    9672    1       3 DIGIT   BIT (1) UNAL,   /* COMP4 OR COMP8        */
       25+    9673    1       3 RENAMES BIT (1) UNAL,   /* Item is a renames entry */
       26+    9674    1       3 ARRAY_VALUED BIT (1) UNAL,
       27+    9675    1       3 *       BIT (4) UNAL,  /* AVAILABLE FOR LEASE   */
       28+    9676    1       2 LEVEL_NO UBIN(9) UNAL, /* LEVEL_NO              */
       29+    9677    1       2 FATHER  PTR,
       30+    9678    1       2 BROTHER PTR,
       31+    9679    1       2 SON     PTR,
       32+    9680    1       2 RENAMES_LTS$ REDEF SON PTR,  /* Used for renames entries */
       33+    9681    1       2 ST$     PTR,
       34+    9682    1       2 DNT$    PTR ,
       35+    9683    1       2 ARRAY_VALUE$ REDEF DNT$ PTR; /* USED IN PHASE 4 & 5 */
       36+    9684
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:596  
       37+    9685        %MACRO RESERVE_QLT (ITEM=%QUAL, POINTER=QLT$);
       38+    9686
       39+    9687               DO ;
       40+    9688                 IF QLT_.BOTTOM + SIZEW(QLT) >= QLT_.FLOOR
       41+    9689                 THEN CALL Z8AR$RESERVER(ADDR(QLT_));
       42+    9690                 POINTER = PINCRW (QLT_.FIRST, QLT_.BOTTOM);
       43+    9691                 QLT_.BOTTOM = QLT_.BOTTOM + SIZEW(QLT) ;
       44+    9692                 POINTER->QLT.ID = ITEM ;
       45+    9693               END ;
       46+    9694
       47+    9695        %MEND ;
       48+    9696
       49+    9697        %MACRO TOP_QLT (POINTER=QLT$) ;
       50+    9698
       51+    9699               DO ;
       52+    9700                 POINTER = QLT_.TOP ;
       53+    9701               END ;
       54+    9702
       55+    9703        %MEND ;
       56+    9704
       57+    9705        %MACRO STEP_QLT (POINTER=QLT$) ;
       58+    9706
       59+    9707               DO ;
       60+    9708                 POINTER = PINCRW (POINTER, SIZEW(QLT)) ;
       61+    9709                 IF POINTER = PINCRW (QLT_.FIRST, QLT_.BOTTOM)
       62+    9710                 THEN POINTER = ADDR(NIL) ;
       63+    9711                 ELSE
       64+    9712                 IF POINTER->QLT.ID = %CONTINUE
       65+    9713                 THEN POINTER = POINTER -> CONT.NEXT;
       66+    9714               END ;
       67+    9715
       68+    9716        %MEND ;
       69+    9717
       70+    9718        %MACRO NEW_QLT (@POINTER = QLT$,
       71+    9719                        @ID      = %QUAL,
       72+    9720                        @FATHER  = "ADDR(NIL)",
       73+    9721                        @BROTHER = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:597  
       74+    9722                        @SON     = "ADDR(NIL)",
       75+    9723                        @ST$     = "ADDR(NIL)",
       76+    9724                        @DNT$    = "ADDR(NIL)",
       77+    9725                        @LEVEL#  = 01,
       78+    9726                        @OCCURS    = '0'B,
       79+    9727                        @SYNC      = '0'B,
       80+    9728                        @DIGIT     = '0'B,
       81+    9729                        @RENAMES   = '0'B);
       82+    9730
       83+    9731           DO;
       84+    9732             %RESERVE_QLT (ITEM    = @ID,
       85+    9733                           POINTER = @POINTER);
       86+    9734
       87+    9735             @POINTER -> QLT.FATHER  = @FATHER;
       88+    9736             @POINTER -> QLT.BROTHER = @BROTHER;
       89+    9737             @POINTER -> QLT.SON     = @SON;
       90+    9738             @POINTER -> QLT.ST$     = @ST$;
       91+    9739             @POINTER -> QLT.DNT$    = @DNT$;
       92+    9740             @POINTER -> QLT.LEVEL_NO= @LEVEL#;
       93+    9741             @POINTER -> QLT.B       = '0'B;
       94+    9742             @POINTER -> QLT.B.OCCURS  = @OCCURS;
       95+    9743             @POINTER -> QLT.B.SYNC    = @SYNC;
       96+    9744             @POINTER -> QLT.B.DIGIT   = @DIGIT;
       97+    9745             @POINTER -> QLT.B.RENAMES = @RENAMES;
       98+    9746           END;
       99+    9747
      100+    9748        %MEND;
      101+    9749
      102+    9750
      103+    9751
      104+    9752
      105+    9753        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:598  
      497     9754        %INCLUDE Z8A_ST ;
        1+    9755        /*T***********************************************************/
        2+    9756        /*T*                                                         */
        3+    9757        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4+    9758        /*T*                                                         */
        5+    9759        /*T***********************************************************/
        6+    9760        /* INCLUDE FILE "ST" (ACCOUNT NAME IS C80C80) */
        7+    9761
        8+    9762
        9+    9763    1   DCL   ST$    PTR EXT ;
       10+    9764
       11+    9765    1   DCL 1 ST_    EXT,
       12+    9766    1       2 TOP    PTR INIT (ADDR(NIL)),
       13+    9767    1       2 FIRST  PTR,               /* FIRST ITEM IN PAGE  */
       14+    9768    1       2 BOTTOM SBIN INIT(0),      /* NEXT AVAILABLE      */
       15+    9769    1       2 FLOOR  SBIN INIT(0),      /* LAST WORD IN PAGE   */
       16+    9770    1       2 SIZE   SBIN INIT(0) ;     /* Size in #pages.     */
       17+    9771
       18+    9772
       19+    9773        %MACRO RESERVE_ST (POINTER=ST$) ;
       20+    9774
       21+    9775             DO;
       22+    9776               IF ST_.BOTTOM + SIZEW(ST) >= ST_.FLOOR THEN
       23+    9777                 CALL Z8AR$RESERVER(ADDR(ST_));
       24+    9778
       25+    9779               POINTER = PINCRW(ST_.FIRST, ST_.BOTTOM);
       26+    9780               ST_.BOTTOM = ST_.BOTTOM + SIZEW(ST);
       27+    9781             END;
       28+    9782
       29+    9783        %MEND;
       30+    9784
       31+    9785        %MACRO TOP_ST (POINTER = ST$) ;
       32+    9786
       33+    9787             DO;
       34+    9788               POINTER = ST_.TOP;
       35+    9789             END;
       36+    9790
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:599  
       37+    9791        %MEND ;
       38+    9792
       39+    9793        %MACRO STEP_ST (POINTER = ST$) ;
       40+    9794
       41+    9795             DO;
       42+    9796               POINTER = PINCRW(POINTER, SIZEW(ST));
       43+    9797
       44+    9798               IF POINTER = PINCRW(ST_.FIRST, ST_.BOTTOM) THEN
       45+    9799                 POINTER = ADDR(NIL);
       46+    9800               ELSE
       47+    9801                 IF POINTER -> ST.ID = %CONTINUE THEN
       48+    9802                   POINTER = POINTER -> CONT.NEXT;
       49+    9803             END;
       50+    9804
       51+    9805        %MEND ;
       52+    9806
       53+    9807
       54+    9808        %MACRO ADD_ST_TO_LIST_TAIL (@PROC$ = ,
       55+    9809                                    @FROM_ST$ = );
       56+    9810
       57+    9811           DO;
       58+    9812             IF @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ = ADDR(NIL) THEN
       59+    9813               DO;
       60+    9814                 @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.HEAD$ = @FROM_ST$;
       61+    9815                 @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ = @FROM_ST$;
       62+    9816               END;
       63+    9817             ELSE
       64+    9818               DO;
       65+    9819                 @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ -> ST.LINK = @FROM_ST$;
       66+    9820                 @PROC$ -> PROC_.PROC_SUPP$ -> PROC_SUPP.TAIL$ = @FROM_ST$;
       67+    9821               END;
       68+    9822           END;
       69+    9823
       70+    9824        %MEND;
       71+    9825
       72+    9826
       73+    9827        %MACRO UPDATE_PROC_LINK (@TEMPLATE = ST, @ST$ = , @PROC$ = );
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:600  
       74+    9828
       75+    9829                 %IF (TEXTCHAR(@TEMPLATE) = '') OR (TEXTCHAR(@ST$) = '');
       76+    9830                 %ENDIF;
       77+    9831
       78+    9832                 @ST$ -> @TEMPLATE.LINK = ADDR(NIL);
       79+    9833
       80+    9834                 %IF (TEXTCHAR(@PROC$) = '');
       81+    9835                   %IF PHASE = 1;
       82+    9836                     @ST$ -> @TEMPLATE.PROC$ = O1COM.CURRENT_PROC$;
       83+    9837                     IF O1COM.CURRENT_PROC$ ~= ADDR(NIL) THEN
       84+    9838                       %ADD_ST_TO_LIST_TAIL (@PROC$ = O1COM.CURRENT_PROC$,
       85+    9839                                             @FROM_ST$ = @ST$);
       86+    9840                   %ELSEIF PHASE = 0;
       87+    9841                     IF COMCOM.CURRENT.PHASE = 1 THEN
       88+    9842                       DO;
       89+    9843                         @ST$ -> @TEMPLATE.PROC$ = O1COM.CURRENT_PROC$;
       90+    9844                         IF O1COM.CURRENT_PROC$ ~= ADDR(NIL) THEN
       91+    9845                           %ADD_ST_TO_LIST_TAIL (@PROC$ = O1COM.CURRENT_PROC$,
       92+    9846                                                 @FROM_ST$ = @ST$);
       93+    9847                       END;
       94+    9848                     ELSE
       95+    9849                       @ST$ -> @TEMPLATE.PROC$ = ADDR(NIL);
       96+    9850                   %ENDIF;
       97+    9851                 %ELSE;
       98+    9852                   @ST$ -> @TEMPLATE.PROC$ = @PROC$;
       99+    9853                   IF @PROC$ ~= ADDR(NIL) THEN
      100+    9854                     %ADD_ST_TO_LIST_TAIL (@PROC$ = @PROC$,
      101+    9855                                           @FROM_ST$ = @ST$);
      102+    9856                 %ENDIF;
      103+    9857        %MEND;
      104+    9858
      105+    9859        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:601  
      106+    9860    1   DCL 1 ST     BASED (ST$) ALIGNED,
      107+    9861
      108+    9862    1       2 ID                     UBIN (18) UNAL, /* Operation code */
      109+    9863    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      110+    9864    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
      111+    9865
      112+    9866            %DESCRIPTOR(LVL=2);
      113+    9894    1       2 OU_INDEX REDEF DESCL SBIN HALF HALIGNED,
      114+    9895
      115+    9896    1       2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
      116+    9897    1       2 LINE_NO                UBIN HALF UNAL,
      117+    9898
      118+    9899    1       2 ATTR                   BIT  (36),      /* ATTRIBUTE BITS     */
      119+    9900    1       2 B REDEF ATTR,
      120+    9901    1           3 * (0:35)           BOOLEAN,
      121+    9902
      122+    9903    1       2 NEXT                   PTR,            /* SEARCH THREAD      */
      123+    9904
      124+    9905    1       2 *                      PTR,
      125+    9906
      126+    9907    1       2 DNT$                   PTR,
      127+    9908
      128+    9909    1       2 *                      PTR,
      129+    9910
      130+    9911    1       2 X_SORT_SYM$            PTR,            /* Used by phase 5 only */
      131+    9912
      132+    9913    1       2 X_REF_LIST$           PTR,             /* Used by phase 5 only */
      133+    9914    1       2 LINK                  PTR;             /* Links all ST's in a given proc */
      134+    9915
      135+    9916
      136+    9917        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:602  
      137+    9918        %MACRO SCALAR_ST_LAYOUT;
      138+    9919
      139+    9920            2 ID                     UBIN (18) UNAL, /* Operation code */
      140+    9921            2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      141+    9922            2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
      142+    9923
      143+    9924            %DESCRIPTOR(LVL=2);
      144+    9925
      145+    9926            2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
      146+    9927            2 LINE_NO                UBIN HALF UNAL,
      147+    9928
      148+    9929            2 ATTR                   BIT  (36),      /* ATTRIBUTE BITS     */
      149+    9930            2 B REDEF ATTR,
      150+    9931                3 REFERENCED         BOOLEAN,
      151+    9932                3 DEFINED            BOOLEAN,
      152+    9933                3 COMPILER_CREATED   BOOLEAN,
      153+    9934                3 JUSTIFIED          BOOLEAN,
      154+    9935                3 GREATER_256K       BOOLEAN,
      155+    9936                3 ELEMENTARY         BOOLEAN,
      156+    9937                3 LENGTH_4096        BOOLEAN,
      157+    9938                3 COMP6_NONOP        BOOLEAN,
      158+    9939                3 REDEF_SUB          BOOLEAN,
      159+    9940                3 REDEF_OBJ          BOOLEAN,
      160+    9941                3 OCCURS_DEPENDING   BOOLEAN,
      161+    9942                3 ASTERISK_SUPRESS   BOOLEAN,
      162+    9943                3 RECORD_AREA        BOOLEAN,
      163+    9944                3 P                  BOOLEAN, /* P field in an EIS instr */
      164+    9945                3 GLOBAL             BOOLEAN,
      165+    9946                3 EXTERNAL           BOOLEAN,
      166+    9947                3 LINKAGE            BOOLEAN,
      167+    9948                3 ALLOCATED          BOOLEAN,
      168+    9949                3 RENAMED            BOOLEAN,
      169+    9950                3 DML_UWA            BOOLEAN,
      170+    9951                3 DML_TYPE           UBIN(3) UNAL,
      171+    9952                3 REPORT_ITEM        BOOLEAN,
      172+    9953                3 SUM_COUNTER        BOOLEAN,
      173+    9954                3 DML_RVA            BOOLEAN,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:603  
      174+    9955                3 KANJI              BOOLEAN,
      175+    9956                3 MOD_8              BOOLEAN,
      176+    9957                3 DIGIT              BOOLEAN,
      177+    9958                3 FAB_FIB_BUILT      BOOLEAN,
      178+    9959                3 NON_STORAGE        BOOLEAN,
      179+    9960                3 ARRAY_PRESET       BOOLEAN,
      180+    9961                3 MOD_2              BOOLEAN,
      181+    9962                3 CLASS              UBIN(3) UNAL,
      182+    9963                3 SUB_CLASS REDEF CLASS,
      183+    9964                  4 EDITED           BOOLEAN,
      184+    9965                  4 TYPE             UBIN(2) UNAL,
      185+    9966
      186+    9967            2 NEXT                   PTR,            /* SEARCH THREAD      */
      187+    9968
      188+    9969            2 LTS$                   PTR,
      189+    9970
      190+    9971            2 DNT$                   PTR,
      191+    9972
      192+    9973            2 QLT$                   PTR,
      193+    9974
      194+    9975            2 SEQ#,
      195+    9976              3 FD                   UBIN HALF HALIGNED,
      196+    9977              3 BD                   UBIN HALF HALIGNED,
      197+    9978
      198+    9979            2 PROC$                  PTR,
      199+    9980            2 LINK                   PTR;
      200+    9981
      201+    9982        %MEND;
      202+    9983
      203+    9984
      204+    9985    1   DCL 1 SCALAR BASED(ST$) ALIGNED,
      205+    9986              %SCALAR_ST_LAYOUT;
      206+   10067
      207+   10068    1   DCL 1 ARRAY BASED(ST$) ALIGNED,
      208+   10069              %SCALAR_ST_LAYOUT;
      209+   10150
      210+   10151    1   DCL 1 VARIABLE BASED(ST$) ALIGNED,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:604  
      211+   10152              %SCALAR_ST_LAYOUT;
      212+   10233
      213+   10234    1   DCL 1 FD BASED(ST$) ALIGNED,
      214+   10235              %SCALAR_ST_LAYOUT;
      215+   10316
      216+   10317    1   DCL 1 SD BASED(ST$) ALIGNED,
      217+   10318              %SCALAR_ST_LAYOUT;
      218+   10399
      219+   10400    1   DCL 1 CD BASED(ST$) ALIGNED,
      220+   10401              %SCALAR_ST_LAYOUT;
      221+   10482
      222+   10483    1   DCL 1 RD BASED(ST$) ALIGNED,
      223+   10484              %SCALAR_ST_LAYOUT;
      224+   10565
      225+   10566    1   DCL 1 DB BASED(ST$) ALIGNED,
      226+   10567              %SCALAR_ST_LAYOUT;
      227+   10648
      228+   10649
      229+   10650        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:605  
      230+   10651        %MACRO INIT_SCALAR ( @ST$   = ST$,
      231+   10652                             @ID    = %SCALAR,
      232+   10653                            @R     = %BLOCK_,
      233+   10654                            @COUNT = %DATA,
      234+   10655                            @SA    = 0,
      235+   10656                            @DESCL = 0,
      236+   10657                            @TYPE  =  ,
      237+   10658                            @LINE_NO  = COMCOM.CURRENT.LINE,
      238+   10659                            @ATTR  = FALSE,
      239+   10660                            @NEXT  = "ADDR(NIL)",
      240+   10661                            @LTS$  = "ADDR(NIL)",
      241+   10662                            @DNT$  =  ,
      242+   10663                            @QLT$  = "ADDR(NIL)",
      243+   10664                            @FD    = 0,
      244+   10665                            @BD    = %MAX_SEQ#,
      245+   10666                            @PROC$ = ,
      246+   10667                            @REFERENCED       = ,
      247+   10668                            @DEFINED          = ,
      248+   10669                            @JUSTIFIED        = ,
      249+   10670                            @GREATER_256K     = ,
      250+   10671                            @ELEMENTARY       = ,
      251+   10672                            @LENGTH_4096      = ,
      252+   10673                            @COMP6_NONOP      = ,
      253+   10674                            @COMPILER_CREATED = ,
      254+   10675                            @REDEF_SUB        = ,
      255+   10676                            @REDEF_OBJ        = ,
      256+   10677                            @ASTERISK_SUPRESS = ,
      257+   10678                            @RECORD_AREA      = ,
      258+   10679                            @OCCURS_DEPENDING = ,
      259+   10680                            @P                = ,
      260+   10681                            @EXTERNAL         = ,
      261+   10682                            @GLOBAL           = ,
      262+   10683                            @LINKAGE          = ,
      263+   10684                            @ALLOCATED        = ,
      264+   10685                            @KANJI            = ,
      265+   10686                            @DIGIT            = ,
      266+   10687                            @MOD_8            = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:606  
      267+   10688                            @DML_UWA          = ,
      268+   10689                            @DML_TYPE         = ,
      269+   10690                            @REPORT_ITEM      = ,
      270+   10691                            @SUM_COUNTER      = ,
      271+   10692                            @CLASS            = );
      272+   10693
      273+   10694               %LSET OK1 = (TEXTCHAR(@TYPE) ~= '');
      274+   10695               %LSET OK2 = (TEXTCHAR(@DNT$) ~= '');
      275+   10696
      276+   10697               DO;
      277+   10698
      278+   10699                 @ST$ -> SCALAR.ID    = @ID;
      279+   10700                 @ST$ -> SCALAR.R     = @R;
      280+   10701                 @ST$ -> SCALAR.COUNT = @COUNT;
      281+   10702                 @ST$ -> SCALAR.SA    = @SA;
      282+   10703                 @ST$ -> SCALAR.DESCL = @DESCL;
      283+   10704                 @ST$ -> SCALAR.LINE_NO  = @LINE_NO;
      284+   10705                 @ST$ -> SCALAR.ATTR  = @ATTR;
      285+   10706                 @ST$ -> SCALAR.NEXT  = @NEXT;
      286+   10707                 @ST$ -> SCALAR.LTS$  = @LTS$;
      287+   10708                 @ST$ -> SCALAR.QLT$  = @QLT$;
      288+   10709                 @ST$ -> SCALAR.SEQ#.FD = @FD;
      289+   10710                 @ST$ -> SCALAR.SEQ#.BD = @BD;
      290+   10711
      291+   10712                 %UPDATE_PROC_LINK (@TEMPLATE = SCALAR, @ST$ = @ST$, @PROC$ = @PROC$);
      292+   10713
      293+   10714                 %IF OK1;
      294+   10715                   @ST$ -> SCALAR.TYPE = @TYPE;
      295+   10716                 %ELSE;
      296+   10717                   %ERROR(~OK1,'Missing TYPE parameter',2);
      297+   10718                 %ENDIF;
      298+   10719
      299+   10720                 %IF OK2;
      300+   10721                   @ST$ -> SCALAR.DNT$ = @DNT$;
      301+   10722                 %ELSE;
      302+   10723                   %ERROR(~OK2,'Missing DNT parameter',2);
      303+   10724                 %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:607  
      304+   10725
      305+   10726                 %IF (TEXTCHAR(@REFERENCED) ~= '');
      306+   10727                   @ST$ -> SCALAR.B.REFERENCED = @REFERENCED;
      307+   10728                 %ENDIF;
      308+   10729                 %IF (TEXTCHAR(@DEFINED) ~= '');
      309+   10730                   @ST$ -> SCALAR.B.DEFINED    = @DEFINED;
      310+   10731                 %ENDIF;
      311+   10732                 %IF (TEXTCHAR(@JUSTIFIED) ~= '');
      312+   10733                   @ST$ -> SCALAR.B.JUSTIFIED  = @JUSTIFIED;
      313+   10734                 %ENDIF;
      314+   10735                 %IF (TEXTCHAR(@GREATER_256K) ~= '');
      315+   10736                   @ST$ -> SCALAR.B.GREATER_256K = @GREATER_256K;
      316+   10737                 %ENDIF;
      317+   10738                 %IF (TEXTCHAR(@ELEMENTARY) ~= '');
      318+   10739                   @ST$ -> SCALAR.B.ELEMENTARY = @ELEMENTARY;
      319+   10740                 %ENDIF;
      320+   10741                 %IF (TEXTCHAR(@LENGTH_4096) ~= '');
      321+   10742                   @ST$ -> SCALAR.B.LENGTH_4096= @LENGTH_4096;
      322+   10743                 %ENDIF;
      323+   10744                 %IF (TEXTCHAR(@COMP6_NONOP) ~= '');
      324+   10745                   @ST$ -> SCALAR.B.COMP6_NONOP= @COMP6_NONOP;
      325+   10746                 %ENDIF;
      326+   10747                 %IF (TEXTCHAR(@COMPILER_CREATED) ~= '');
      327+   10748                   @ST$ -> SCALAR.B.COMPILER_CREATED = @COMPILER_CREATED;
      328+   10749                 %ENDIF;
      329+   10750                 %IF (TEXTCHAR(@REDEF_SUB) ~= '');
      330+   10751                   @ST$ -> SCALAR.B.REDEF_SUB  = @REDEF_SUB;
      331+   10752                 %ENDIF;
      332+   10753                 %IF (TEXTCHAR(@REDEF_OBJ) ~= '');
      333+   10754                   @ST$ -> SCALAR.B.REDEF_OBJ  = @REDEF_OBJ;
      334+   10755                 %ENDIF;
      335+   10756                 %IF (TEXTCHAR(@OCCURS_DEPENDING) ~= '');
      336+   10757                   @ST$ -> SCALAR.B.OCCURS_DEPENDING = @OCCURS_DEPENDING;
      337+   10758                 %ENDIF;
      338+   10759                 %IF (TEXTCHAR(@ASTERISK_SUPRESS) ~= '');
      339+   10760                   @ST$ -> SCALAR.B.ASTERISK_SUPRESS = @ASTERISK_SUPRESS;
      340+   10761                 %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:608  
      341+   10762                 %IF (TEXTCHAR(@RECORD_AREA) ~= '');
      342+   10763                   @ST$ -> SCALAR.B.RECORD_AREA = @RECORD_AREA;
      343+   10764                 %ENDIF;
      344+   10765                 %IF (TEXTCHAR(@P) ~= '');
      345+   10766                   @ST$ -> SCALAR.B.P = @P;
      346+   10767                 %ENDIF;
      347+   10768                 %IF (TEXTCHAR(@EXTERNAL) ~= '');
      348+   10769                   @ST$ -> SCALAR.B.EXTERNAL = @EXTERNAL;
      349+   10770                 %ENDIF;
      350+   10771                 %IF (TEXTCHAR(@GLOBAL) ~= '');
      351+   10772                   @ST$ -> SCALAR.B.GLOBAL = @GLOBAL;
      352+   10773                 %ENDIF;
      353+   10774                 %IF (TEXTCHAR(@LINKAGE) ~= '');
      354+   10775                   @ST$ -> SCALAR.B.LINKAGE = @LINKAGE;
      355+   10776                 %ENDIF;
      356+   10777                 %IF (TEXTCHAR(@ALLOCATED) ~= '');
      357+   10778                   @ST$ -> SCALAR.B.ALLOCATED = @ALLOCATED;
      358+   10779                 %ENDIF;
      359+   10780                 %IF (TEXTCHAR(@REPORT_ITEM) ~= '');
      360+   10781                   @ST$ -> SCALAR.B.REPORT_ITEM = @REPORT_ITEM;
      361+   10782                 %ENDIF;
      362+   10783                 %IF (TEXTCHAR(@SUM_COUNTER) ~= '');
      363+   10784                   @ST$ -> SCALAR.B.SUM_COUNTER = @SUM_COUNTER;
      364+   10785                 %ENDIF;
      365+   10786                 %IF (TEXTCHAR(@CLASS) ~= '');
      366+   10787                   @ST$ -> SCALAR.B.CLASS      = @CLASS;
      367+   10788                 %ENDIF;
      368+   10789                 %IF (TEXTCHAR(@DML_TYPE) ~= '');
      369+   10790                   @ST$ -> SCALAR.B.DML_TYPE   = @DML_TYPE;
      370+   10791                 %ENDIF;
      371+   10792                 %IF (TEXTCHAR(@DML_UWA) ~= '');
      372+   10793                   @ST$ -> SCALAR.B.DML_UWA    = @DML_UWA;
      373+   10794                 %ENDIF;
      374+   10795                 %IF (TEXTCHAR(@KANJI) ~= '') ;
      375+   10796                   @ST$ -> SCALAR.B.KANJI      = @KANJI ;
      376+   10797                 %ENDIF ;
      377+   10798                 %IF (TEXTCHAR(@DIGIT) ~= '') ;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:609  
      378+   10799                   @ST$ -> SCALAR.B.DIGIT      = @DIGIT ;
      379+   10800                 %ENDIF ;
      380+   10801                 %IF (TEXTCHAR(@MOD_8) ~= '') ;
      381+   10802                   @ST$ -> SCALAR.B.MOD_8      = @MOD_8 ;
      382+   10803                 %ENDIF ;
      383+   10804
      384+   10805               END;
      385+   10806        %MEND;
      386+   10807
      387+   10808
      388+   10809        %MACRO NEW_SCALAR ( @ST$ = ST$,
      389+   10810                            @R     = %BLOCK_,
      390+   10811                            @COUNT = %DATA,
      391+   10812                            @SA    = 0,
      392+   10813                            @DESCL = 0,
      393+   10814                            @TYPE  =  ,
      394+   10815                            @LINE_NO  = COMCOM.CURRENT.LINE,
      395+   10816                            @ATTR  = FALSE,
      396+   10817                            @NEXT  = "ADDR(NIL)",
      397+   10818                            @LTS$  = "ADDR(NIL)",
      398+   10819                            @DNT$  =  ,
      399+   10820                            @QLT$  = "ADDR(NIL)",
      400+   10821                            @FD    = 0,
      401+   10822                            @BD    = %MAX_SEQ#,
      402+   10823                            @PROC$ = ,
      403+   10824                            @REFERENCED       = ,
      404+   10825                            @DEFINED          = ,
      405+   10826                            @JUSTIFIED        = ,
      406+   10827                            @GREATER_256K     = ,
      407+   10828                            @ELEMENTARY       = ,
      408+   10829                            @LENGTH_4096      = ,
      409+   10830                            @COMP6_NONOP      = ,
      410+   10831                            @COMPILER_CREATED = ,
      411+   10832                            @REDEF_SUB        = ,
      412+   10833                            @REDEF_OBJ        = ,
      413+   10834                            @OCCURS_DEPENDING = ,
      414+   10835                            @ASTERISK_SUPRESS = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:610  
      415+   10836                            @RECORD_AREA      = ,
      416+   10837                            @P                = ,
      417+   10838                            @EXTERNAL         = ,
      418+   10839                            @GLOBAL           = ,
      419+   10840                            @LINKAGE          = ,
      420+   10841                            @ALLOCATED        = ,
      421+   10842                            @KANJI            = ,
      422+   10843                            @DIGIT            = ,
      423+   10844                            @MOD_8            = ,
      424+   10845                            @DML_UWA          = ,
      425+   10846                            @DML_TYPE         = ,
      426+   10847                            @REPORT_ITEM      = ,
      427+   10848                            @SUM_COUNTER      = ,
      428+   10849                            @CLASS            = );
      429+   10850          DO;
      430+   10851            %RESERVE_ST(POINTER = @ST$);
      431+   10852
      432+   10853            %INIT_SCALAR (@ST$                = @ST$,
      433+   10854                          @ID                 = %SCALAR,
      434+   10855                          @R                  = @R,
      435+   10856                          @COUNT              = @COUNT,
      436+   10857                          @SA                 = @SA,
      437+   10858                          @DESCL              = @DESCL,
      438+   10859                          @TYPE               = @TYPE,
      439+   10860                          @LINE_NO            = @LINE_NO,
      440+   10861                          @ATTR               = @ATTR,
      441+   10862                          @NEXT               = @NEXT,
      442+   10863                          @LTS$               = @LTS$,
      443+   10864                          @DNT$               = @DNT$,
      444+   10865                          @QLT$               = @QLT$,
      445+   10866                          @FD                 = @FD,
      446+   10867                          @BD                 = @BD,
      447+   10868                          @PROC$              = @PROC$,
      448+   10869                          @REFERENCED         = @REFERENCED,
      449+   10870                          @DEFINED            = @DEFINED,
      450+   10871                          @JUSTIFIED          = @JUSTIFIED,
      451+   10872                          @GREATER_256K       = @GREATER_256K,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:611  
      452+   10873                          @ELEMENTARY         = @ELEMENTARY,
      453+   10874                          @LENGTH_4096        = @LENGTH_4096,
      454+   10875                          @COMP6_NONOP        = @COMP6_NONOP,
      455+   10876                          @COMPILER_CREATED   = @COMPILER_CREATED,
      456+   10877                          @REDEF_SUB          = @REDEF_SUB,
      457+   10878                          @REDEF_OBJ          = @REDEF_OBJ,
      458+   10879                          @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
      459+   10880                          @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
      460+   10881                          @RECORD_AREA        = @RECORD_AREA,
      461+   10882                          @P                  = @P,
      462+   10883                          @EXTERNAL           = @EXTERNAL,
      463+   10884                          @GLOBAL             = @GLOBAL,
      464+   10885                          @LINKAGE            = @LINKAGE,
      465+   10886                          @ALLOCATED          = @ALLOCATED,
      466+   10887                          @KANJI              = @KANJI,
      467+   10888                          @DIGIT              = @DIGIT,
      468+   10889                          @MOD_8              = @MOD_8,
      469+   10890                          @DML_UWA            = @DML_UWA,
      470+   10891                          @DML_TYPE           = @DML_TYPE,
      471+   10892                          @REPORT_ITEM        = @REPORT_ITEM,
      472+   10893                          @SUM_COUNTER        = @SUM_COUNTER,
      473+   10894                          @CLASS              = @CLASS);
      474+   10895          END;
      475+   10896        %MEND;
      476+   10897
      477+   10898
      478+   10899        %MACRO NEW_ARRAY ( @ST$               = ST$,
      479+   10900                            @R                = %BLOCK_,
      480+   10901                            @COUNT            = %DATA,
      481+   10902                            @SA               = 0,
      482+   10903                            @DESCL            = 0,
      483+   10904                            @TYPE             =  ,
      484+   10905                            @LINE_NO             = COMCOM.CURRENT.LINE,
      485+   10906                            @ATTR             = FALSE,
      486+   10907                            @NEXT             = "ADDR(NIL)",
      487+   10908                            @LTS$             = "ADDR(NIL)",
      488+   10909                            @DNT$             =  ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:612  
      489+   10910                            @QLT$             = "ADDR(NIL)",
      490+   10911                            @FD               = 0,
      491+   10912                            @BD               = %MAX_SEQ#,
      492+   10913                            @PROC$            = ,
      493+   10914                            @REFERENCED       = ,
      494+   10915                            @DEFINED          = ,
      495+   10916                            @JUSTIFIED        = ,
      496+   10917                            @GREATER_256K     = ,
      497+   10918                            @ELEMENTARY       = ,
      498+   10919                            @LENGTH_4096      = ,
      499+   10920                            @COMP6_NONOP      = ,
      500+   10921                            @COMPILER_CREATED = ,
      501+   10922                            @REDEF_SUB        = ,
      502+   10923                            @REDEF_OBJ        = ,
      503+   10924                            @OCCURS_DEPENDING = ,
      504+   10925                            @ASTERISK_SUPRESS = ,
      505+   10926                            @RECORD_AREA      = ,
      506+   10927                            @P                = ,
      507+   10928                            @EXTERNAL         = ,
      508+   10929                            @GLOBAL           = ,
      509+   10930                            @LINKAGE          = ,
      510+   10931                           @ALLOCATED         = ,
      511+   10932                            @CLASS            = );
      512+   10933          DO;
      513+   10934            %RESERVE_ST(POINTER               = @ST$);
      514+   10935
      515+   10936            %INIT_SCALAR (@ST$                = @ST$,
      516+   10937                          @ID                 = %ARRAY,
      517+   10938                          @R                  = @R,
      518+   10939                          @COUNT              = @COUNT,
      519+   10940                          @SA                 = @SA,
      520+   10941                          @DESCL              = @DESCL,
      521+   10942                          @TYPE               = @TYPE,
      522+   10943                          @LINE_NO               = @LINE_NO,
      523+   10944                          @ATTR               = @ATTR,
      524+   10945                          @NEXT               = @NEXT,
      525+   10946                          @LTS$               = @LTS$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:613  
      526+   10947                          @DNT$               = @DNT$,
      527+   10948                          @QLT$               = @QLT$,
      528+   10949                          @FD                 = @FD,
      529+   10950                          @BD                 = @BD,
      530+   10951                          @PROC$              = @PROC$,
      531+   10952                          @REFERENCED         = @REFERENCED,
      532+   10953                          @DEFINED            = @DEFINED,
      533+   10954                          @JUSTIFIED          = @JUSTIFIED,
      534+   10955                          @GREATER_256K       = @GREATER_256K,
      535+   10956                          @ELEMENTARY         = @ELEMENTARY,
      536+   10957                          @LENGTH_4096        = @LENGTH_4096,
      537+   10958                          @COMP6_NONOP        = @COMP6_NONOP,
      538+   10959                          @COMPILER_CREATED   = @COMPILER_CREATED,
      539+   10960                          @REDEF_SUB          = @REDEF_SUB,
      540+   10961                          @REDEF_OBJ          = @REDEF_OBJ,
      541+   10962                          @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
      542+   10963                          @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
      543+   10964                          @RECORD_AREA        = @RECORD_AREA,
      544+   10965                          @P                  = @P,
      545+   10966                          @EXTERNAL           = @EXTERNAL,
      546+   10967                          @GLOBAL             = @GLOBAL,
      547+   10968                          @LINKAGE            = @LINKAGE,
      548+   10969                          @ALLOCATED          = @ALLOCATED,
      549+   10970                          @CLASS              = @CLASS);
      550+   10971          END;
      551+   10972        %MEND;
      552+   10973
      553+   10974
      554+   10975        %MACRO NEW_RD     ( @ST$ = ST$,
      555+   10976                            @R     = %BLOCK_,
      556+   10977                            @COUNT = %DATA,
      557+   10978                            @SA    = 0,
      558+   10979                            @DESCL = 0,
      559+   10980                            @TYPE  =  ,
      560+   10981                            @LINE_NO  = COMCOM.CURRENT.LINE,
      561+   10982                            @ATTR  = FALSE,
      562+   10983                            @NEXT  = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:614  
      563+   10984                            @LTS$  = "ADDR(NIL)",
      564+   10985                            @DNT$  =  ,
      565+   10986                            @QLT$  = "ADDR(NIL)",
      566+   10987                            @FD    = 0,
      567+   10988                            @BD    = %MAX_SEQ#,
      568+   10989                            @PROC$ = ,
      569+   10990                            @REFERENCED       = ,
      570+   10991                            @DEFINED          = ,
      571+   10992                            @JUSTIFIED        = ,
      572+   10993                            @GREATER_256K     = ,
      573+   10994                            @ELEMENTARY       = ,
      574+   10995                            @LENGTH_4096      = ,
      575+   10996                            @COMP6_NONOP      = ,
      576+   10997                            @COMPILER_CREATED = ,
      577+   10998                            @REDEF_SUB        = ,
      578+   10999                            @REDEF_OBJ        = ,
      579+   11000                            @OCCURS_DEPENDING = ,
      580+   11001                            @ASTERISK_SUPRESS = ,
      581+   11002                            @RECORD_AREA      = ,
      582+   11003                            @P                = ,
      583+   11004                            @EXTERNAL         = ,
      584+   11005                            @GLOBAL           = ,
      585+   11006                            @LINKAGE          = ,
      586+   11007                            @ALLOCATED        = ,
      587+   11008                            @CLASS            = );
      588+   11009          DO;
      589+   11010            %RESERVE_ST(POINTER = @ST$);
      590+   11011
      591+   11012            %INIT_SCALAR (@ST$                = @ST$,
      592+   11013                          @ID                 = %RD,
      593+   11014                          @R                  = @R,
      594+   11015                          @COUNT              = @COUNT,
      595+   11016                          @SA                 = @SA,
      596+   11017                          @DESCL              = @DESCL,
      597+   11018                          @TYPE               = @TYPE,
      598+   11019                          @LINE_NO               = @LINE_NO,
      599+   11020                          @ATTR               = @ATTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:615  
      600+   11021                          @NEXT               = @NEXT,
      601+   11022                          @LTS$               = @LTS$,
      602+   11023                          @DNT$               = @DNT$,
      603+   11024                          @QLT$               = @QLT$,
      604+   11025                          @FD                 = @FD,
      605+   11026                          @BD                 = @BD,
      606+   11027                          @PROC$              = @PROC$,
      607+   11028                          @REFERENCED         = @REFERENCED,
      608+   11029                          @DEFINED            = @DEFINED,
      609+   11030                          @JUSTIFIED          = @JUSTIFIED,
      610+   11031                          @GREATER_256K       = @GREATER_256K,
      611+   11032                          @ELEMENTARY         = @ELEMENTARY,
      612+   11033                          @LENGTH_4096        = @LENGTH_4096,
      613+   11034                          @COMP6_NONOP        = @COMP6_NONOP,
      614+   11035                          @COMPILER_CREATED   = @COMPILER_CREATED,
      615+   11036                          @REDEF_SUB          = @REDEF_SUB,
      616+   11037                          @REDEF_OBJ          = @REDEF_OBJ,
      617+   11038                          @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
      618+   11039                          @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
      619+   11040                          @RECORD_AREA        = @RECORD_AREA,
      620+   11041                          @P                  = @P,
      621+   11042                          @EXTERNAL           = @EXTERNAL,
      622+   11043                          @GLOBAL             = @GLOBAL,
      623+   11044                          @LINKAGE            = @LINKAGE,
      624+   11045                          @ALLOCATED          = @ALLOCATED,
      625+   11046                          @CLASS              = @CLASS);
      626+   11047          END;
      627+   11048        %MEND;
      628+   11049
      629+   11050
      630+   11051
      631+   11052        %MACRO NEW_FD     ( @ST$ = ST$,
      632+   11053                            @R     = %BLOCK_,
      633+   11054                            @COUNT = %DATA,
      634+   11055                            @SA    = 0,
      635+   11056                            @DESCL = 0,
      636+   11057                            @TYPE  =  ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:616  
      637+   11058                            @LINE_NO  = COMCOM.CURRENT.LINE,
      638+   11059                            @ATTR  = FALSE,
      639+   11060                            @NEXT  = "ADDR(NIL)",
      640+   11061                            @LTS$  = "ADDR(NIL)",
      641+   11062                            @DNT$  =  ,
      642+   11063                            @QLT$  = "ADDR(NIL)",
      643+   11064                            @FD    = 0,
      644+   11065                            @BD    = %MAX_SEQ#,
      645+   11066                            @PROC$ = ,
      646+   11067                            @REFERENCED       = ,
      647+   11068                            @DEFINED          = ,
      648+   11069                            @JUSTIFIED        = ,
      649+   11070                            @GREATER_256K     = ,
      650+   11071                            @ELEMENTARY       = ,
      651+   11072                            @LENGTH_4096      = ,
      652+   11073                            @COMP6_NONOP      = ,
      653+   11074                            @COMPILER_CREATED = ,
      654+   11075                            @REDEF_SUB        = ,
      655+   11076                            @REDEF_OBJ        = ,
      656+   11077                            @OCCURS_DEPENDING = ,
      657+   11078                            @ASTERISK_SUPRESS = ,
      658+   11079                            @RECORD_AREA      = ,
      659+   11080                            @P                = ,
      660+   11081                            @EXTERNAL         = ,
      661+   11082                            @GLOBAL           = ,
      662+   11083                            @LINKAGE          = ,
      663+   11084                           @ALLOCATED         = ,
      664+   11085                            @CLASS            = );
      665+   11086          DO;
      666+   11087            %RESERVE_ST(POINTER = @ST$);
      667+   11088
      668+   11089            %INIT_SCALAR (@ST$                = @ST$,
      669+   11090                          @ID                 = %FD,
      670+   11091                          @R                  = @R,
      671+   11092                          @COUNT              = @COUNT,
      672+   11093                          @SA                 = @SA,
      673+   11094                          @DESCL              = @DESCL,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:617  
      674+   11095                          @TYPE               = @TYPE,
      675+   11096                          @LINE_NO               = @LINE_NO,
      676+   11097                          @ATTR               = @ATTR,
      677+   11098                          @NEXT               = @NEXT,
      678+   11099                          @LTS$               = @LTS$,
      679+   11100                          @DNT$               = @DNT$,
      680+   11101                          @QLT$               = @QLT$,
      681+   11102                          @FD                 = @FD,
      682+   11103                          @BD                 = @BD,
      683+   11104                          @PROC$              = @PROC$,
      684+   11105                          @REFERENCED         = @REFERENCED,
      685+   11106                          @DEFINED            = @DEFINED,
      686+   11107                          @JUSTIFIED          = @JUSTIFIED,
      687+   11108                          @GREATER_256K       = @GREATER_256K,
      688+   11109                          @ELEMENTARY         = @ELEMENTARY,
      689+   11110                          @LENGTH_4096        = @LENGTH_4096,
      690+   11111                          @COMP6_NONOP        = @COMP6_NONOP,
      691+   11112                          @COMPILER_CREATED   = @COMPILER_CREATED,
      692+   11113                          @REDEF_SUB          = @REDEF_SUB,
      693+   11114                          @REDEF_OBJ          = @REDEF_OBJ,
      694+   11115                          @OCCURS_DEPENDING   = @OCCURS_DEPENDING,
      695+   11116                          @ASTERISK_SUPRESS   = @ASTERISK_SUPRESS,
      696+   11117                          @RECORD_AREA        = @RECORD_AREA,
      697+   11118                          @P                  = @P,
      698+   11119                          @EXTERNAL           = @EXTERNAL,
      699+   11120                          @GLOBAL             = @GLOBAL,
      700+   11121                          @LINKAGE            = @LINKAGE,
      701+   11122                          @ALLOCATED          = @ALLOCATED,
      702+   11123                          @CLASS              = @CLASS);
      703+   11124          END;
      704+   11125        %MEND;
      705+   11126        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:618  
      706+   11127    1   DCL 1 DML_ITEM BASED(ST$) ALIGNED,
      707+   11128
      708+   11129    1       2 ID                     UBIN (18) UNAL, /* Operation code    */
      709+   11130    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      710+   11131    1       2 COUNT                  UBIN  (9) UNAL, /* Block/symref #     */
      711+   11132
      712+   11133    1       2 INTERNAL_NAME          UBIN (36) UNAL, /* DML internal name  */
      713+   11134
      714+   11135    1       2 TYPE                   UBIN HALF UNAL, /* %TYG               */
      715+   11136    1       2 LINE_NO                UBIN HALF UNAL,
      716+   11137
      717+   11138    1       2 ATTR                   BIT (36)  UNAL,
      718+   11139    1       2 B REDEF ATTR,
      719+   11140    1         3 *         UBIN(14)  UNAL,
      720+   11141    1         3 GLOBAL       BOOLEAN,
      721+   11142    1         3 EXTERNAL     BOOLEAN,
      722+   11143    1         3 *            UBIN(9)  UNAL,
      723+   11144    1         3 DML_RVA   BOOLEAN,
      724+   11145    1         3 TEMP         BOOLEAN,
      725+   11146    1         3 *            BOOLEAN,
      726+   11147    1         3 INDEXED_REALM BOOLEAN,
      727+   11148    1         3 *         UBIN(7)  UNAL,
      728+   11149
      729+   11150    1       2 NEXT                   PTR,
      730+   11151    1       2 LTS$                   PTR,
      731+   11152    1       2 DNT$                   PTR,
      732+   11153    1       2 QLT$                   PTR,
      733+   11154    1       2 SEQ#,
      734+   11155    1         3 FD                   UBIN HALF HALIGNED,
      735+   11156    1         3 BD                   UBIN HALF HALIGNED,
      736+   11157    1       2 PROC$                  PTR,
      737+   11158    1       2 LINK                   PTR;
      738+   11159
      739+   11160
      740+   11161        %MACRO NEW_DML_ITEM  (  @ST$   = ST$,
      741+   11162                                @ID    =    ,
      742+   11163                                @TEMP  =  ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:619  
      743+   11164                                @INDEXED_REALM = FALSE,
      744+   11165                                @R    = %BLOCK_,
      745+   11166                                @COUNT = %DATA,
      746+   11167                                @INT_NAME = ,
      747+   11168                                @TYPE  = %TYG,
      748+   11169                                @LINE_NO  = COMCOM.CURRENT.LINE,
      749+   11170                                @ATTR  = FALSE,
      750+   11171                                @NEXT  = "ADDR(NIL)",
      751+   11172                                @LTS$  = "ADDR(NIL)",
      752+   11173                                @DNT$  =    ,
      753+   11174                                @QLT$  = "ADDR(NIL)",
      754+   11175                                @FD    = 0,
      755+   11176                                @BD    = %MAX_SEQ#,
      756+   11177                                @PROC$ =    );
      757+   11178
      758+   11179            DO;
      759+   11180                %RESERVE_ST(POINTER = @ST$);
      760+   11181
      761+   11182                @ST$ -> DML_ITEM.ID             = @ID;
      762+   11183                @ST$ -> DML_ITEM.R              = @R;
      763+   11184                @ST$ -> DML_ITEM.COUNT          = @COUNT;
      764+   11185                @ST$ -> DML_ITEM.INTERNAL_NAME  = @INT_NAME;
      765+   11186                @ST$ -> DML_ITEM.ATTR           = @ATTR;
      766+   11187                @ST$ -> DML_ITEM.B.TEMP         = @TEMP;
      767+   11188                @ST$ -> DML_ITEM.B.GLOBAL       = %TRUE;
      768+   11189                @ST$ -> DML_ITEM.B.EXTERNAL     = %TRUE;
      769+   11190                @ST$ -> DML_ITEM.B.INDEXED_REALM = @INDEXED_REALM;
      770+   11191                @ST$ -> DML_ITEM.TYPE           = @TYPE;
      771+   11192                @ST$ -> DML_ITEM.LINE_NO        = @LINE_NO;
      772+   11193                @ST$ -> DML_ITEM.NEXT           = @NEXT;
      773+   11194                @ST$ -> DML_ITEM.LTS$           = @LTS$;
      774+   11195                @ST$ -> DML_ITEM.DNT$           = @DNT$;
      775+   11196                @ST$ -> DML_ITEM.QLT$           = @QLT$;
      776+   11197                @ST$ -> DML_ITEM.SEQ#.FD        = @FD;
      777+   11198                @ST$ -> DML_ITEM.SEQ#.BD        = @BD;
      778+   11199
      779+   11200                %UPDATE_PROC_LINK(@TEMPLATE = DML_ITEM, @ST$ = @ST$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:620  
      780+   11201                                                        @PROC$ = @PROC$);
      781+   11202
      782+   11203            END;
      783+   11204        %MEND;
      784+   11205        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:621  
      785+   11206    1   DCL 1 CONST BASED(ST$) ALIGNED,
      786+   11207
      787+   11208    1       2 ID                     UBIN (18) UNAL, /* Operation code */
      788+   11209    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      789+   11210    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
      790+   11211
      791+   11212            %DESCRIPTOR(LVL=2);
      792+   11240
      793+   11241    1       2 TYPE                   UBIN HALF HALIGNED,
      794+   11242    1       2 *                      UBIN HALF HALIGNED,
      795+   11243
      796+   11244    1       2 ATTR BIT(36),
      797+   11245    1       2 B REDEF ATTR,
      798+   11246    1         3 LONG_CONSTANT        BOOLEAN,
      799+   11247    1         3 TWO_WORD             BOOLEAN,
      800+   11248    1         3 MOD_2                BOOLEAN,
      801+   11249    1         3 ALL                  BOOLEAN,
      802+   11250    1         3 ALLOCATED            BOOLEAN,
      803+   11251    1         3 * (0: 7)             BOOLEAN,
      804+   11252    1         3 P                    BOOLEAN,
      805+   11253    1         3 * (0:11)             BOOLEAN,
      806+   11254    1         3 KANJI                BOOLEAN,
      807+   11255    1         3 * (0: 8)             BOOLEAN,
      808+   11256
      809+   11257    1       2 NEXT                   PTR,
      810+   11258
      811+   11259    1       2 ALLOC_LINK             PTR,            /* Generator use only */
      812+   11260
      813+   11261    1       2 DNT$                   PTR,
      814+   11262
      815+   11263    1       2 *                      PTR,            /* Filler */
      816+   11264
      817+   11265    1       2 CONSTI UNAL,
      818+   11266    1          3 WORD1               SBIN WORD,      /* Fullword constant */
      819+   11267    1          3 WORD2               SBIN WORD,
      820+   11268
      821+   11269    1        2 CONSTS REDEF CONSTI,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:622  
      822+   11270    1          3 UPPER               SBIN(18) UNAL,
      823+   11271    1          3 LOWER               SBIN(18) UNAL,
      824+   11272    1          3 *                   UBIN WORD,
      825+   11273
      826+   11274    1        2 CONSTU REDEF CONSTI,
      827+   11275    1          3 UPPER               UBIN(18) UNAL,
      828+   11276    1          3 LOWER               UBIN(18) UNAL,
      829+   11277    1          3 *                   UBIN WORD,
      830+   11278
      831+   11279    1        2 CONST$ REDEF CONSTI,
      832+   11280    1          3 PTR$                PTR,
      833+   11281    1          3 *                   UBIN WORD,
      834+   11282
      835+   11283    1        2 CONSTA REDEF CONSTI
      836+   11284    1                       CHAR(8) UNAL,
      837+   11285
      838+   11286    1        2 CONSTR REDEF CONSTI,
      839+   11287    1          3 EXP                 SBIN(8) UNAL,
      840+   11288    1          3 MANTISSA            SBIN(28) UNAL,
      841+   11289    1          3 *                   UBIN WORD,
      842+   11290
      843+   11291    1        2 CONSTD REDEF CONSTI,
      844+   11292    1          3 ARG_COUNT           SBIN(18) UNAL,
      845+   11293    1          3 DESC_COUNT          SBIN(18) UNAL,
      846+   11294    1          3 DESC           UNAL,
      847+   11295    1            4 TYPE              UBIN(6) UNAL,
      848+   11296    1            4 *                 UBIN(6) UNAL,
      849+   11297    1            4 ADSC         UNAL,
      850+   11298    1              5 LENGTH          SBIN(24) UNAL,
      851+   11299    1            4 NDSC         REDEF ADSC,
      852+   11300    1              5 SCALE_FACTOR    SBIN(12) UNAL,
      853+   11301    1              5 LENGTH          SBIN(12) UNAL,
      854+   11302
      855+   11303    1        2 CONSTB (0:11) REDEF CONSTI BIT(6),
      856+   11304
      857+   11305    1       2 *                      PTR; /* Link field not applicable */
      858+   11306
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:623  
      859+   11307
      860+   11308        %MACRO NEW_CONST ( @ST$                = ST$,
      861+   11309                           @R                  = %PROGRAM,
      862+   11310                           @COUNT              = O1COM.CURRENT_SEGMENTC,
      863+   11311                           @TYPE               = %TYI,
      864+   11312                           @ATTR               = FALSE,
      865+   11313                           @NEXT               = "ADDR(NIL)",
      866+   11314                           @ALLOC_LINK         = "ADDR(NIL)",
      867+   11315                           @DNT$               = "ADDR(NIL)",
      868+   11316                           @LONG_CONSTANT      = ,
      869+   11317                           @TWO_WORD           = ,
      870+   11318                           @MOD_2              = ,
      871+   11319                           @ALL                = ,
      872+   11320                           @P                  = ,
      873+   11321                           @KANJI              = ,
      874+   11322                           @ALLOCATED          = );
      875+   11323          DO;
      876+   11324            %RESERVE_ST (POINTER               = @ST$);
      877+   11325
      878+   11326            @ST$ -> CONST.ID                   = %CONST;
      879+   11327            @ST$ -> CONST.R                    = @R;
      880+   11328            @ST$ -> CONST.COUNT                = @COUNT;
      881+   11329            @ST$ -> CONST.TYPE                 = @TYPE;
      882+   11330            @ST$ -> CONST.ATTR                 = @ATTR;
      883+   11331            @ST$ -> CONST.NEXT                 = @NEXT;
      884+   11332            @ST$ -> CONST.ALLOC_LINK           = @ALLOC_LINK;
      885+   11333            @ST$ -> CONST.DNT$                 = @DNT$;
      886+   11334
      887+   11335            %IF (TEXTCHAR(@LONG_CONSTANT) ~= '');
      888+   11336              @ST$ -> CONST.B.LONG_CONSTANT    = @LONG_CONSTANT;
      889+   11337            %ENDIF;
      890+   11338            %IF (TEXTCHAR(@TWO_WORD) ~= '');
      891+   11339              @ST$ -> CONST.B.TWO_WORD         = @TWO_WORD;
      892+   11340            %ENDIF;
      893+   11341            %IF (TEXTCHAR(@MOD_2) ~= '');
      894+   11342              @ST$ -> CONST.B.MOD_2            = @MOD_2;
      895+   11343            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:624  
      896+   11344            %IF (TEXTCHAR(@ALL) ~= '');
      897+   11345              @ST$ -> CONST.B.ALL              = @ALL;
      898+   11346            %ENDIF;
      899+   11347            %IF (TEXTCHAR(@KANJI) ~= '');
      900+   11348              @ST$ -> CONST.B.KANJI            = @KANJI;
      901+   11349            %ENDIF;
      902+   11350            %IF (TEXTCHAR(@P) ~= '');
      903+   11351              @ST$ -> CONST.B.P                = @P;
      904+   11352            %ENDIF;
      905+   11353            %IF (TEXTCHAR(@ALLOCATED) ~= '');
      906+   11354              @ST$ -> CONST.B.ALLOCATED        = @ALLOCATED;
      907+   11355            %ENDIF;
      908+   11356          END;
      909+   11357        %MEND;
      910+   11358        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:625  
      911+   11359        %MACRO PARA_ST_LAYOUT;
      912+   11360
      913+   11361            2 ID                     UBIN (18) UNAL, /* Operation code */
      914+   11362            2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
      915+   11363            2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
      916+   11364
      917+   11365            2 DESC,
      918+   11366              %DESCRIPTOR(LVL=3);
      919+   11367            2 P_END$ REDEF DESC      PTR,
      920+   11368            2 P_START$ REDEF DESC    PTR,
      921+   11369            2 XR_TEMP REDEF DESC     PTR,
      922+   11370
      923+   11371            2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
      924+   11372            2 LINE_NO                UBIN HALF UNAL,
      925+   11373
      926+   11374            2 ATTR                   BIT  (36),      /* ATTRIBUTE BITS     */
      927+   11375            2 B REDEF ATTR,
      928+   11376              3 REFERENCED           BOOLEAN,
      929+   11377              3 DEFINED              BOOLEAN,
      930+   11378              3 COMPILER_CREATED     BOOLEAN,
      931+   11379              3 GOTO_LABEL           BOOLEAN,
      932+   11380              3 DUPLICATE            BOOLEAN,
      933+   11381              3 ONE_REF              BOOLEAN,
      934+   11382              3 PHASE_2              BOOLEAN,
      935+   11383              3 FALL_THRU            BOOLEAN,
      936+   11384              3 INIT_PROC            BOOLEAN,
      937+   11385              3 PFORM_START          BOOLEAN,
      938+   11386              3 PFORM_END            BOOLEAN,
      939+   11387              3 PFORM_NESTED         BOOLEAN,
      940+   11388              3 ALTER_CHECK          BOOLEAN,
      941+   11389              3 COBOL_74_PFORM       BOOLEAN,
      942+   11390              3 PFORM_74_END         BOOLEAN,
      943+   11391              3 GO_VECTOR_START      BOOLEAN,
      944+   11392              3 ENTRY_POINT          BOOLEAN,
      945+   11393              3 INTERIOR_PFORM_LBL   BOOLEAN,
      946+   11394              3 DATA_REF             BOOLEAN,
      947+   11395              3 BACKWARD_PFORM       BOOLEAN,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:626  
      948+   11396              3 ALLOCATED            BOOLEAN,
      949+   11397              3 ON_SIZE_ERROR        BOOLEAN,
      950+   11398              3 GO_ALTERED           BOOLEAN,
      951+   11399              3 USE_BASE_POINTER     BOOLEAN,
      952+   11400              3 USE_GLOBAL           BOOLEAN,
      953+   11401              3 USE_ALREADY_FLAGGED  BOOLEAN,
      954+   11402              3 USE_PROC             BOOLEAN,
      955+   11403              3 PFORM_END_LBL        BOOLEAN,
      956+   11404              3 EXIT_PROG_LABEL      BOOLEAN,
      957+   11405              3 LABEL_AFTER_USE      BOOLEAN,
      958+   11406              3 * (0:5)              BOOLEAN,
      959+   11407
      960+   11408            2 NEXT                   PTR,            /* SEARCH THREAD      */
      961+   11409
      962+   11410            2 POINTER$                PTR,
      963+   11411
      964+   11412            2 DNT$                   PTR,
      965+   11413
      966+   11414            2 SECTION$               PTR,
      967+   11415            2 SEGMENT$ REDEF SECTION$ PTR,
      968+   11416
      969+   11417            2 PREV_ILS$              PTR,
      970+   11418
      971+   11419            2 PROC$                  PTR,
      972+   11420            2 LINK                   PTR;
      973+   11421
      974+   11422        %MEND;
      975+   11423
      976+   11424
      977+   11425    1   DCL 1 PARA BASED(ST$) ALIGNED,
      978+   11426              %PARA_ST_LAYOUT;
      979+   11506
      980+   11507    1   DCL 1 SECTION BASED(ST$) ALIGNED,
      981+   11508              %PARA_ST_LAYOUT;
      982+   11588
      983+   11589    1   DCL 1 LABEL BASED(ST$) ALIGNED,
      984+   11590            %PARA_ST_LAYOUT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:627  
      985+   11670
      986+   11671
      987+   11672        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:628  
      988+   11673        %MACRO INIT_PARA (@ST$                 = ST$,
      989+   11674                          @ID                  = %PARA,
      990+   11675                          @R                   = %PROGRAM,
      991+   11676                          @COUNT               = %PROC,
      992+   11677                          @P_END$              = "ADDR(NIL)",
      993+   11678                          @TYPE                = %TYI,
      994+   11679                          @LINE_NO             = COMCOM.CURRENT.LINE,
      995+   11680                          @ATTR                = FALSE,
      996+   11681                          @NEXT                = "ADDR(NIL)",
      997+   11682                          @POINTER$            = "ADDR(NIL)",
      998+   11683                          @DNT$                = "ADDR(NIL)",
      999+   11684                          @SECTION$            = ,
     1000+   11685                          @SEGMENT$            = ,
     1001+   11686                          @PROC$               = ,
     1002+   11687                          @PREV_ILS$           = "ADDR(NIL)",
     1003+   11688                          @REFERENCED          = ,
     1004+   11689                          @DEFINED             = ,
     1005+   11690                          @COMPILER_CREATED    = ,
     1006+   11691                          @GOTO_LABEL          = ,
     1007+   11692                          @DUPLICATE           = ,
     1008+   11693                          @ONE_REF             = ,
     1009+   11694                          @PHASE_2             = ,
     1010+   11695                          @FALL_THRU           = ,
     1011+   11696                          @INIT_PROC           = ,
     1012+   11697                          @PFORM_START         = ,
     1013+   11698                          @PFORM_END           = ,
     1014+   11699                          @PFORM_NESTED        = ,
     1015+   11700                          @ALTER_CHECK         = ,
     1016+   11701                          @COBOL_74_PFORM      = ,
     1017+   11702                          @PFORM_74_END        = ,
     1018+   11703                          @GO_VECTOR_START     = ,
     1019+   11704                          @ENTRY_POINT         = ,
     1020+   11705                          @INTERIOR_PFORM_LBL  = ,
     1021+   11706                          @DATA_REF            = ,
     1022+   11707                          @BACKWARD_PFORM      = ,
     1023+   11708                          @ALLOCATED           = ,
     1024+   11709                          @ON_SIZE_ERROR       = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:629  
     1025+   11710                          @GO_ALTERED          = ,
     1026+   11711                          @USE_BASE_POINTER    = ,
     1027+   11712                          @USE_GLOBAL          = ,
     1028+   11713                          @USE_ALREADY_FLAGGED = ,
     1029+   11714                          @USE_PROC            = ,
     1030+   11715                          @PFORM_END_LBL       = ,
     1031+   11716                          @LABEL_AFTER_USE     = ,
     1032+   11717                          @EXIT_PROG_LABEL     = );
     1033+   11718          DO;
     1034+   11719            @ST$ -> PARA.ID                    = @ID;
     1035+   11720            @ST$ -> PARA.R                     = @R;
     1036+   11721            @ST$ -> PARA.COUNT                 = @COUNT;
     1037+   11722            @ST$ -> PARA.P_END$                = @P_END$;
     1038+   11723            @ST$ -> PARA.TYPE                  = @TYPE;
     1039+   11724            @ST$ -> PARA.LINE_NO               = @LINE_NO;
     1040+   11725            @ST$ -> PARA.ATTR                  = @ATTR;
     1041+   11726            @ST$ -> PARA.NEXT                  = @NEXT;
     1042+   11727            @ST$ -> PARA.POINTER$               = @POINTER$;
     1043+   11728            @ST$ -> PARA.DNT$                  = @DNT$;
     1044+   11729
     1045+   11730            %IF (TEXTCHAR(@SECTION$) ~= '');
     1046+   11731             @ST$ -> PARA.SECTION$             = @SECTION$;
     1047+   11732            %ELSEIF (TEXTCHAR(@SEGMENT$) ~= '');
     1048+   11733             @ST$ -> PARA.SEGMENT$             = @SEGMENT$;
     1049+   11734            %ELSE;
     1050+   11735             @ST$ -> PARA.SECTION$             = ADDR(NIL);
     1051+   11736            %ENDIF;
     1052+   11737
     1053+   11738
     1054+   11739            %UPDATE_PROC_LINK (@TEMPLATE = PARA, @ST$ = @ST$, @PROC$ = @PROC$);
     1055+   11740            @ST$ -> PARA.PREV_ILS$             = @PREV_ILS$;
     1056+   11741
     1057+   11742            %IF (TEXTCHAR(@REFERENCED) ~= '');
     1058+   11743              @ST$ -> PARA.B.REFERENCED        = @REFERENCED;
     1059+   11744            %ENDIF;
     1060+   11745            %IF (TEXTCHAR(@DEFINED) ~= '');
     1061+   11746              @ST$ -> PARA.B.DEFINED           = @DEFINED;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:630  
     1062+   11747            %ENDIF;
     1063+   11748            %IF (TEXTCHAR(@COMPILER_CREATED) ~= '');
     1064+   11749              @ST$ -> PARA.B.COMPILER_CREATED  = @COMPILER_CREATED;
     1065+   11750            %ENDIF;
     1066+   11751            %IF (TEXTCHAR(@GOTO_LABEL) ~= '');
     1067+   11752              @ST$ -> PARA.B.GOTO_LABEL        = @GOTO_LABEL;
     1068+   11753            %ENDIF;
     1069+   11754            %IF (TEXTCHAR(@DUPLICATE) ~= '');
     1070+   11755              @ST$ -> PARA.B.DUPLICATE         = @DUPLICATE;
     1071+   11756            %ENDIF;
     1072+   11757            %IF (TEXTCHAR(@ONE_REF) ~= '');
     1073+   11758              @ST$ -> PARA.B.ONE_REF           = @ONE_REF;
     1074+   11759            %ENDIF;
     1075+   11760            %IF (TEXTCHAR(@PHASE_2) ~= '');
     1076+   11761              @ST$ -> PARA.B.PHASE_2           = @PHASE_2;
     1077+   11762            %ENDIF;
     1078+   11763            %IF (TEXTCHAR(@FALL_THRU) ~= '');
     1079+   11764              @ST$ -> PARA.B.FALL_THRU         = @FALL_THRU;
     1080+   11765            %ENDIF;
     1081+   11766            %IF (TEXTCHAR(@INIT_PROC) ~= '');
     1082+   11767              @ST$ -> PARA.B.INIT_PROC         = @INIT_PROC;
     1083+   11768            %ENDIF;
     1084+   11769            %IF (TEXTCHAR(@PFORM_START) ~= '');
     1085+   11770              @ST$ -> PARA.B.PFORM_START       = @PFORM_START;
     1086+   11771            %ENDIF;
     1087+   11772            %IF (TEXTCHAR(@PFORM_END) ~= '');
     1088+   11773              @ST$ -> PARA.B.PFORM_END         = @PFORM_END;
     1089+   11774            %ENDIF;
     1090+   11775            %IF (TEXTCHAR(@PFORM_NESTED) ~= '');
     1091+   11776              @ST$ -> PARA.B.PFORM_NESTED      = @PFORM_NESTED;
     1092+   11777            %ENDIF;
     1093+   11778            %IF (TEXTCHAR(@ALTER_CHECK) ~= '');
     1094+   11779              @ST$ -> PARA.B.ALTER_CHECK       = @ALTER_CHECK;
     1095+   11780            %ENDIF;
     1096+   11781            %IF (TEXTCHAR(@COBOL_74_PFORM) ~= '');
     1097+   11782              @ST$ -> PARA.B.COBOL_74_PFORM    = @COBOL_74_PFORM;
     1098+   11783            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:631  
     1099+   11784            %IF (TEXTCHAR(@PFORM_74_END) ~= '');
     1100+   11785              @ST$ -> PARA.B.PFORM_74_END      = @PFORM_74_END;
     1101+   11786            %ENDIF;
     1102+   11787            %IF (TEXTCHAR(@GO_VECTOR_START) ~= '');
     1103+   11788              @ST$ -> PARA.B.GO_VECTOR_START   = @GO_VECTOR_START;
     1104+   11789            %ENDIF;
     1105+   11790             %IF (TEXTCHAR(@ENTRY_POINT) ~= '');
     1106+   11791               @ST$ -> PARA.B.ENTRY_POINT      = @ENTRY_POINT;
     1107+   11792             %ENDIF;
     1108+   11793            %IF (TEXTCHAR(@INTERIOR_PFORM_LBL) ~= '');
     1109+   11794              @ST$ -> PARA.B.INTERIOR_PFORM_LBL = @INTERIOR_PFORM_LBL;
     1110+   11795            %ENDIF;
     1111+   11796            %IF (TEXTCHAR(@DATA_REF) ~= '');
     1112+   11797              @ST$ -> PARA.B.DATA_REF          = @DATA_REF;
     1113+   11798            %ENDIF;
     1114+   11799            %IF (TEXTCHAR(@BACKWARD_PFORM) ~= '');
     1115+   11800              @ST$ -> PARA.B.BACKWARD_PFORM    = @BACKWARD_PFORM;
     1116+   11801            %ENDIF;
     1117+   11802            %IF (TEXTCHAR(@ALLOCATED) ~= '');
     1118+   11803              @ST$ -> PARA.B.ALLOCATED         = @ALLOCATED;
     1119+   11804            %ENDIF;
     1120+   11805            %IF (TEXTCHAR(@ON_SIZE_ERROR) ~= '');
     1121+   11806              @ST$ -> PARA.B.ON_SIZE_ERROR     = @ON_SIZE_ERROR;
     1122+   11807            %ENDIF;
     1123+   11808            %IF (TEXTCHAR(@GO_ALTERED) ~= '');
     1124+   11809              @ST$ -> PARA.B.GO_ALTERED        = @GO_ALTERED;
     1125+   11810            %ENDIF;
     1126+   11811            %IF (TEXTCHAR(@USE_BASE_POINTER) ~= '');
     1127+   11812              @ST$ -> PARA.B.USE_BASE_POINTER  = @USE_BASE_POINTER;
     1128+   11813            %ENDIF;
     1129+   11814            %IF (TEXTCHAR(@USE_GLOBAL) ~= '');
     1130+   11815              @ST$ -> PARA.B.USE_GLOBAL        = @USE_GLOBAL;
     1131+   11816            %ENDIF;
     1132+   11817            %IF (TEXTCHAR(@USE_ALREADY_FLAGGED) ~= '');
     1133+   11818              @ST$ -> PARA.B.USE_ALREADY_FLAGGED = @USE_ALREADY_FLAGGED;
     1134+   11819            %ENDIF;
     1135+   11820            %IF (TEXTCHAR(@USE_PROC) ~= '');
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:632  
     1136+   11821              @ST$ -> PARA.B.USE_PROC          = @USE_PROC;
     1137+   11822            %ENDIF;
     1138+   11823            %IF (TEXTCHAR(@PFORM_END_LBL) ~= '');
     1139+   11824              @ST$ -> PARA.B.PFORM_END_LBL     = @PFORM_END_LBL;
     1140+   11825            %ENDIF;
     1141+   11826            %IF (TEXTCHAR(@EXIT_PROG_LABEL) ~= '');
     1142+   11827              @ST$ -> PARA.B.EXIT_PROG_LABEL   = @EXIT_PROG_LABEL;
     1143+   11828            %ENDIF;
     1144+   11829            %IF (TEXTCHAR(@LABEL_AFTER_USE) ~= '');
     1145+   11830              @ST$ -> PARA.B.LABEL_AFTER_USE   = @LABEL_AFTER_USE;
     1146+   11831            %ENDIF;
     1147+   11832          END;
     1148+   11833
     1149+   11834        %MEND;
     1150+   11835
     1151+   11836
     1152+   11837        %MACRO NEW_PARA ( @ST$                 = ST$,
     1153+   11838                          @R                   = %PROGRAM,
     1154+   11839                          @COUNT               = %PROC,
     1155+   11840                          @P_END$              = "ADDR(NIL)",
     1156+   11841                          @TYPE                = %TYI,
     1157+   11842                          @LINE_NO             = COMCOM.CURRENT.LINE,
     1158+   11843                          @ATTR                = FALSE,
     1159+   11844                          @NEXT                = "ADDR(NIL)",
     1160+   11845                          @POINTER$            = "ADDR(NIL)",
     1161+   11846                          @DNT$                = "ADDR(NIL)",
     1162+   11847                          @SECTION$            = ,
     1163+   11848                          @PROC$               = ,
     1164+   11849                          @PREV_ILS$           = "ADDR(NIL)",
     1165+   11850                          @REFERENCED          = ,
     1166+   11851                          @DEFINED             = ,
     1167+   11852                          @COMPILER_CREATED    = ,
     1168+   11853                          @GOTO_LABEL          = ,
     1169+   11854                          @DUPLICATE           = ,
     1170+   11855                          @ONE_REF             = ,
     1171+   11856                          @PHASE_2             = ,
     1172+   11857                          @FALL_THRU           = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:633  
     1173+   11858                          @INIT_PROC           = ,
     1174+   11859                          @PFORM_START         = ,
     1175+   11860                          @PFORM_END           = ,
     1176+   11861                          @PFORM_NESTED        = ,
     1177+   11862                          @ALTER_CHECK         = ,
     1178+   11863                          @COBOL_74_PFORM      = ,
     1179+   11864                          @PFORM_74_END        = ,
     1180+   11865                          @GO_VECTOR_START     = ,
     1181+   11866                          @ENTRY_POINT         = ,
     1182+   11867                          @INTERIOR_PFORM_LBL  = ,
     1183+   11868                          @DATA_REF            = ,
     1184+   11869                          @BACKWARD_PFORM      = ,
     1185+   11870                          @ALLOCATED           = ,
     1186+   11871                          @ON_SIZE_ERROR       = ,
     1187+   11872                          @GO_ALTERED          = ,
     1188+   11873                          @USE_BASE_POINTER    = ,
     1189+   11874                          @USE_GLOBAL          = ,
     1190+   11875                          @USE_ALREADY_FLAGGED = ,
     1191+   11876                          @USE_PROC            = ,
     1192+   11877                          @PFORM_END_LBL       = ,
     1193+   11878                          @LABEL_AFTER_USE     = ,
     1194+   11879                          @EXIT_PROG_LABEL     = );
     1195+   11880          DO;
     1196+   11881            %RESERVE_ST (POINTER               = @ST$);
     1197+   11882
     1198+   11883            %INIT_PARA (@ST$                   = @ST$,
     1199+   11884                        @ID                    = %PARA,
     1200+   11885                        @R                     = @R,
     1201+   11886                        @COUNT                 = @COUNT,
     1202+   11887                        @P_END$                = @P_END$,
     1203+   11888                        @TYPE                  = @TYPE,
     1204+   11889                        @LINE_NO               = @LINE_NO,
     1205+   11890                        @ATTR                  = @ATTR,
     1206+   11891                        @NEXT                  = @NEXT,
     1207+   11892                        @POINTER$              = @POINTER$,
     1208+   11893                        @DNT$                  = @DNT$,
     1209+   11894                        @SECTION$              = @SECTION$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:634  
     1210+   11895                        @PROC$                 = @PROC$,
     1211+   11896                        @PREV_ILS$             = @PREV_ILS$,
     1212+   11897                        @REFERENCED            = @REFERENCED,
     1213+   11898                        @DEFINED               = @DEFINED,
     1214+   11899                        @COMPILER_CREATED       = @COMPILER_CREATED,
     1215+   11900                        @GOTO_LABEL             = @GOTO_LABEL,
     1216+   11901                        @DUPLICATE              = @DUPLICATE,
     1217+   11902                        @ONE_REF                = @ONE_REF,
     1218+   11903                        @PHASE_2                = @PHASE_2,
     1219+   11904                        @FALL_THRU              = @FALL_THRU,
     1220+   11905                        @INIT_PROC              = @INIT_PROC,
     1221+   11906                        @PFORM_START            = @PFORM_START,
     1222+   11907                        @PFORM_END              = @PFORM_END,
     1223+   11908                        @PFORM_NESTED           = @PFORM_NESTED,
     1224+   11909                        @ALTER_CHECK            = @ALTER_CHECK,
     1225+   11910                        @COBOL_74_PFORM         = @COBOL_74_PFORM,
     1226+   11911                        @PFORM_74_END           = @PFORM_74_END,
     1227+   11912                        @GO_VECTOR_START        = @GO_VECTOR_START,
     1228+   11913                        @ENTRY_POINT            = @ENTRY_POINT,
     1229+   11914                        @INTERIOR_PFORM_LBL     = @INTERIOR_PFORM_LBL,
     1230+   11915                        @DATA_REF               = @DATA_REF,
     1231+   11916                        @BACKWARD_PFORM         = @BACKWARD_PFORM,
     1232+   11917                        @ALLOCATED              = @ALLOCATED,
     1233+   11918                        @ON_SIZE_ERROR          = @ON_SIZE_ERROR,
     1234+   11919                        @GO_ALTERED             = @GO_ALTERED,
     1235+   11920                        @USE_BASE_POINTER       = @USE_BASE_POINTER,
     1236+   11921                        @USE_GLOBAL             = @USE_GLOBAL,
     1237+   11922                        @USE_ALREADY_FLAGGED    = @USE_ALREADY_FLAGGED,
     1238+   11923                        @USE_PROC               = @USE_PROC,
     1239+   11924                        @PFORM_END_LBL          = @PFORM_END_LBL,
     1240+   11925                        @LABEL_AFTER_USE       = @LABEL_AFTER_USE,
     1241+   11926                        @EXIT_PROG_LABEL        = @EXIT_PROG_LABEL);
     1242+   11927          END;
     1243+   11928        %MEND;
     1244+   11929
     1245+   11930
     1246+   11931
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:635  
     1247+   11932
     1248+   11933        %MACRO NEW_SECTION ( @ST$                 = ST$,
     1249+   11934                          @R                   = %PROGRAM,
     1250+   11935                          @COUNT               = %PROC,
     1251+   11936                          @P_END$              = "ADDR(NIL)",
     1252+   11937                          @TYPE                = %TYI,
     1253+   11938                          @LINE_NO             = COMCOM.CURRENT.LINE,
     1254+   11939                          @ATTR                = FALSE,
     1255+   11940                          @NEXT                = "ADDR(NIL)",
     1256+   11941                          @POINTER$            = "ADDR(NIL)",
     1257+   11942                          @DNT$                = "ADDR(NIL)",
     1258+   11943                          @SEGMENT$            = ,
     1259+   11944                          @PROC$               = ,
     1260+   11945                          @PREV_ILS$           = "ADDR(NIL)",
     1261+   11946                          @REFERENCED          = ,
     1262+   11947                          @DEFINED             = ,
     1263+   11948                          @COMPILER_CREATED    = ,
     1264+   11949                          @GOTO_LABEL          = ,
     1265+   11950                          @DUPLICATE           = ,
     1266+   11951                          @ONE_REF             = ,
     1267+   11952                          @PHASE_2             = ,
     1268+   11953                          @FALL_THRU           = ,
     1269+   11954                          @INIT_PROC           = ,
     1270+   11955                          @PFORM_START         = ,
     1271+   11956                          @PFORM_END           = ,
     1272+   11957                          @PFORM_NESTED        = ,
     1273+   11958                          @ALTER_CHECK         = ,
     1274+   11959                          @COBOL_74_PFORM      = ,
     1275+   11960                          @PFORM_74_END        = ,
     1276+   11961                          @GO_VECTOR_START     = ,
     1277+   11962                          @ENTRY_POINT         = ,
     1278+   11963                          @INTERIOR_PFORM_LBL  = ,
     1279+   11964                          @DATA_REF            = ,
     1280+   11965                          @BACKWARD_PFORM      = ,
     1281+   11966                          @ALLOCATED           = ,
     1282+   11967                          @ON_SIZE_ERROR       = ,
     1283+   11968                          @GO_ALTERED          = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:636  
     1284+   11969                          @USE_BASE_POINTER    = ,
     1285+   11970                          @USE_GLOBAL          = ,
     1286+   11971                          @USE_ALREADY_FLAGGED = ,
     1287+   11972                          @USE_PROC            = ,
     1288+   11973                          @PFORM_END_LBL       = ,
     1289+   11974                          @LABEL_AFTER_USE     = ,
     1290+   11975                          @EXIT_PROG_LABEL     = );
     1291+   11976          DO;
     1292+   11977            %RESERVE_ST (POINTER               = @ST$);
     1293+   11978
     1294+   11979            %INIT_PARA (@ST$                   = @ST$,
     1295+   11980                        @ID                    = %SECTION,
     1296+   11981                        @R                     = @R,
     1297+   11982                        @COUNT                 = @COUNT,
     1298+   11983                        @P_END$                = @P_END$,
     1299+   11984                        @TYPE                  = @TYPE,
     1300+   11985                        @LINE_NO               = @LINE_NO,
     1301+   11986                        @ATTR                  = @ATTR,
     1302+   11987                        @NEXT                  = @NEXT,
     1303+   11988                        @POINTER$              = @POINTER$,
     1304+   11989                        @DNT$                  = @DNT$,
     1305+   11990                        @SEGMENT$              = @SEGMENT$,
     1306+   11991                        @PROC$                 = @PROC$,
     1307+   11992                        @PREV_ILS$             = @PREV_ILS$,
     1308+   11993                        @REFERENCED            = @REFERENCED,
     1309+   11994                        @DEFINED               = @DEFINED,
     1310+   11995                        @COMPILER_CREATED      = @COMPILER_CREATED,
     1311+   11996                        @GOTO_LABEL            = @GOTO_LABEL,
     1312+   11997                        @DUPLICATE             = @DUPLICATE,
     1313+   11998                        @ONE_REF               = @ONE_REF,
     1314+   11999                        @PHASE_2               = @PHASE_2,
     1315+   12000                        @FALL_THRU             = @FALL_THRU,
     1316+   12001                        @INIT_PROC             = @INIT_PROC,
     1317+   12002                        @PFORM_START           = @PFORM_START,
     1318+   12003                        @PFORM_END             = @PFORM_END,
     1319+   12004                        @PFORM_NESTED          = @PFORM_NESTED,
     1320+   12005                        @ALTER_CHECK           = @ALTER_CHECK,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:637  
     1321+   12006                        @COBOL_74_PFORM        = @COBOL_74_PFORM,
     1322+   12007                        @PFORM_74_END          = @PFORM_74_END,
     1323+   12008                        @GO_VECTOR_START       = @GO_VECTOR_START,
     1324+   12009                        @ENTRY_POINT           = @ENTRY_POINT,
     1325+   12010                        @INTERIOR_PFORM_LBL    = @INTERIOR_PFORM_LBL,
     1326+   12011                        @DATA_REF              = @DATA_REF,
     1327+   12012                        @BACKWARD_PFORM        = @BACKWARD_PFORM,
     1328+   12013                        @ALLOCATED             = @ALLOCATED,
     1329+   12014                        @ON_SIZE_ERROR         = @ON_SIZE_ERROR,
     1330+   12015                        @GO_ALTERED            = @GO_ALTERED,
     1331+   12016                        @USE_BASE_POINTER      = @USE_BASE_POINTER,
     1332+   12017                        @USE_GLOBAL            = @USE_GLOBAL,
     1333+   12018                        @USE_ALREADY_FLAGGED   = @USE_ALREADY_FLAGGED,
     1334+   12019                        @USE_PROC              = @USE_PROC,
     1335+   12020                        @PFORM_END_LBL         = @PFORM_END_LBL,
     1336+   12021                        @LABEL_AFTER_USE       = @LABEL_AFTER_USE,
     1337+   12022                        @EXIT_PROG_LABEL       = @EXIT_PROG_LABEL);
     1338+   12023          END;
     1339+   12024        %MEND;
     1340+   12025
     1341+   12026
     1342+   12027        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:638  
     1343+   12028    1   DCL 1 TEMP BASED (ST$) ALIGNED,
     1344+   12029
     1345+   12030    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1346+   12031    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1347+   12032    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1348+   12033
     1349+   12034            %DESCRIPTOR(LVL=2);
     1350+   12062
     1351+   12063    1       2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
     1352+   12064    1       2 DEFINED_LOOP_LEVEL     SBIN HALF UNAL,
     1353+   12065
     1354+   12066    1       2 ATTR BIT(36),
     1355+   12067    1       2 B REDEF ATTR,
     1356+   12068    1         3 NOT_REUSABLE       BOOLEAN,
     1357+   12069    1         3 GREATER_256K       BOOLEAN,
     1358+   12070    1         3 * (0:33)           BOOLEAN,
     1359+   12071
     1360+   12072    1       2 REFERENCES           SBIN HALF UNAL,  /* Remaining references */
     1361+   12073
     1362+   12074    1       2 LENGTH               SBIN HALF UNAL,
     1363+   12075
     1364+   12076    1       2 LTS$                 PTR, /* Used by Z9IO */
     1365+   12077
     1366+   12078    1       2 DNT$                 PTR,
     1367+   12079
     1368+   12080    1       2 QLT$                 PTR,
     1369+   12081
     1370+   12082    1       2 NEXT                 PTR,
     1371+   12083    1       2 LAST                 PTR,
     1372+   12084    1       2 *                    PTR;
     1373+   12085
     1374+   12086
     1375+   12087        %MACRO NEW_TEMP (@ST$                   = ST$,
     1376+   12088                         @R                     = %BLOCK_,
     1377+   12089                         @COUNT                 = %DATA,
     1378+   12090                         @SA                    = 0,
     1379+   12091                         @DESCL                 = 0,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:639  
     1380+   12092                         @TYPE                  = %TYI,
     1381+   12093                         @DEFINED_LOOP_LEVEL     = 0,
     1382+   12094                         @ATTR                  = FALSE,
     1383+   12095                         @REFERENCES            = 0,
     1384+   12096                         @LENGTH                = 0,
     1385+   12097                         @LTS$                  = "ADDR(NIL)",
     1386+   12098                         @DNT$                  = "ADDR(NIL)",
     1387+   12099                         @QLT$                  = "ADDR(NIL)",
     1388+   12100                         @NEXT                  = "ADDR(NIL)",
     1389+   12101                         @LAST                  = "ADDR(NIL)",
     1390+   12102                         @GREATER_256K          = ,
     1391+   12103                         @NOT_REUSABLE          = );
     1392+   12104          DO;
     1393+   12105            %RESERVE_ST (POINTER = @ST$);
     1394+   12106
     1395+   12107            @ST$ -> TEMP.ID                       = %TEMP;
     1396+   12108            @ST$ -> TEMP.R                        = @R;
     1397+   12109            @ST$ -> TEMP.COUNT                    = @COUNT;
     1398+   12110            @ST$ -> TEMP.SA                       = @SA;
     1399+   12111            @ST$ -> TEMP.DESCL                    = @DESCL;
     1400+   12112            @ST$ -> TEMP.TYPE                     = @TYPE;
     1401+   12113            @ST$ -> TEMP.DEFINED_LOOP_LEVEL       = @DEFINED_LOOP_LEVEL;
     1402+   12114            @ST$ -> TEMP.ATTR                     = @ATTR;
     1403+   12115            @ST$ -> TEMP.REFERENCES               = @REFERENCES;
     1404+   12116            @ST$ -> TEMP.LENGTH                   = @LENGTH;
     1405+   12117            @ST$ -> TEMP.LTS$                     = @LTS$ ;
     1406+   12118            @ST$ -> TEMP.DNT$                     = @DNT$;
     1407+   12119            @ST$ -> TEMP.QLT$                     = @QLT$;
     1408+   12120            @ST$ -> TEMP.NEXT                     = @NEXT;
     1409+   12121            @ST$ -> TEMP.LAST                     = @LAST;
     1410+   12122
     1411+   12123            %IF (TEXTCHAR(@NOT_REUSABLE) ~= '');
     1412+   12124              @ST$ -> TEMP.B.NOT_REUSABLE         = @NOT_REUSABLE;
     1413+   12125            %ENDIF;
     1414+   12126            %IF (TEXTCHAR(@GREATER_256K) ~= '');
     1415+   12127              @ST$ -> TEMP.B.GREATER_256K         = @GREATER_256K;
     1416+   12128            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:640  
     1417+   12129          END;
     1418+   12130        %MEND;
     1419+   12131
     1420+   12132        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:641  
     1421+   12133    1   DCL 1 CONDITION            BASED (ST$)ALIGNED,
     1422+   12134
     1423+   12135    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1424+   12136    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1425+   12137    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1426+   12138
     1427+   12139    1       2 NEXT_CONDITION$        PTR,
     1428+   12140
     1429+   12141    1       2 TYPE                   UBIN HALF UNAL, /* %TYD, %TYI, OR ... */
     1430+   12142    1       2 LINE_NO                UBIN HALF UNAL,
     1431+   12143
     1432+   12144    1       2 ATTR BIT(36),
     1433+   12145    1       2 B                  REDEF ATTR,
     1434+   12146    1        3 LINKAGE           BOOLEAN,
     1435+   12147    1        3 EXTERNAL          BOOLEAN,
     1436+   12148    1        3 GLOBAL            BOOLEAN,
     1437+   12149    1        3 *                 (0:32) BOOLEAN,
     1438+   12150
     1439+   12151    1       2 NEXT                   PTR,
     1440+   12152
     1441+   12153    1       2 VALUE_LIST$            PTR,
     1442+   12154
     1443+   12155    1       2 DNT$                   PTR,
     1444+   12156
     1445+   12157    1       2 QLT$                   PTR,
     1446+   12158
     1447+   12159    1       2 ASSOC_VAR$             PTR,
     1448+   12160
     1449+   12161    1       2 PROC$                  PTR,
     1450+   12162    1       2 LINK                   PTR;
     1451+   12163
     1452+   12164
     1453+   12165
     1454+   12166
     1455+   12167
     1456+   12168        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:642  
     1457+   12169        %MACRO NEW_CONDITION      (@ST$         = ST$,
     1458+   12170                                   @R           = %BLOCK_,
     1459+   12171                                   @COUNT       = %DATA,
     1460+   12172                                   @NEXT_COND$  = "ADDR(NIL)",
     1461+   12173                                   @TYPE        = %TYG,
     1462+   12174                                   @LINE_NO        = COMCOM.CURRENT.LINE,
     1463+   12175                                   @ATTR        = FALSE,
     1464+   12176                                   @EXTERNAL    = ,
     1465+   12177                                   @GLOBAL      = ,
     1466+   12178                                   @LINKAGE     = ,
     1467+   12179                                   @NEXT        = "ADDR(NIL)",
     1468+   12180                                   @VALUE_LIST$ = "ADDR(NIL)",
     1469+   12181                                   @DNT$        = DNT$,
     1470+   12182                                   @QLT$        = QLT$,
     1471+   12183                                   @ASSOC_VAR$  = ,
     1472+   12184                                   @PROC$       = );
     1473+   12185
     1474+   12186             DO;
     1475+   12187
     1476+   12188               %IF TEXTCHAR(@ASSOC_VAR$) = '';
     1477+   12189                 %ERROR (TRUE, 'Missing @ASSOC_VAR$ parameter.',2);
     1478+   12190               %ENDIF;
     1479+   12191
     1480+   12192               %RESERVE_ST (POINTER = @ST$);
     1481+   12193
     1482+   12194               @ST$ -> CONDITION.ID          = %CONDITION;
     1483+   12195               @ST$ -> CONDITION.R           = @R;
     1484+   12196               @ST$ -> CONDITION.COUNT       = @COUNT;
     1485+   12197               @ST$ -> CONDITION.NEXT_CONDITION$ = @NEXT_COND$;
     1486+   12198               @ST$ -> CONDITION.TYPE        = @TYPE;
     1487+   12199               @ST$ -> CONDITION.LINE_NO     = @LINE_NO;
     1488+   12200               @ST$ -> CONDITION.ATTR        = @ATTR;
     1489+   12201               @ST$ -> CONDITION.NEXT        = @NEXT;
     1490+   12202               @ST$ -> CONDITION.VALUE_LIST$ = @VALUE_LIST$;
     1491+   12203               @ST$ -> CONDITION.DNT$        = @DNT$;
     1492+   12204               @ST$ -> CONDITION.QLT$        = @QLT$;
     1493+   12205               @ST$ -> CONDITION.ASSOC_VAR$  = @ASSOC_VAR$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:643  
     1494+   12206
     1495+   12207                 %UPDATE_PROC_LINK (@TEMPLATE = CONDITION, @ST$ = @ST$, @PROC$ = @PROC$);
     1496+   12208               %IF (TEXTCHAR(@LINKAGE) ~= '');
     1497+   12209                 @ST$ -> CONDITION.B.LINKAGE = @LINKAGE;
     1498+   12210               %ENDIF;
     1499+   12211               %IF (TEXTCHAR(@GLOBAL) ~= '');
     1500+   12212                 @ST$ -> CONDITION.B.GLOBAL = @GLOBAL;
     1501+   12213               %ENDIF;
     1502+   12214               %IF (TEXTCHAR(@EXTERNAL) ~= '');
     1503+   12215                 @ST$ -> CONDITION.B.EXTERNAL = @EXTERNAL;
     1504+   12216               %ENDIF;
     1505+   12217             END;
     1506+   12218
     1507+   12219        %MEND;
     1508+   12220
     1509+   12221        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:644  
     1510+   12222    1   DCL 1 INTDEF           BASED (ST$) ALIGNED,
     1511+   12223    1        2 ID              UBIN HALF UNAL,
     1512+   12224    1        2 R               UBIN BYTE UNAL,
     1513+   12225    1        2 COUNT           UBIN BYTE UNAL,
     1514+   12226
     1515+   12227             %DESCRIPTOR       (LVL = 2);
     1516+   12255
     1517+   12256    1        2 TYPE            UBIN HALF UNAL,
     1518+   12257    1        2 LINE_NO         UBIN HALF UNAL,
     1519+   12258
     1520+   12259    1        2 ATTR            BIT(36) UNAL,
     1521+   12260    1        2 B               REDEF ATTR,
     1522+   12261    1         3 *              (0:35) BOOLEAN,
     1523+   12262
     1524+   12263    1        2 NEXT            PTR,
     1525+   12264
     1526+   12265    1        2 ARGLIST$        PTR,
     1527+   12266    1        2 DNT$            PTR,
     1528+   12267
     1529+   12268    1        2 ENTRYS$         PTR,   /* Links the entry points */
     1530+   12269    1        2 *               PTR,
     1531+   12270    1        2 PROC$           PTR,
     1532+   12271    1        2 LINK            PTR;
     1533+   12272
     1534+   12273
     1535+   12274        %MACRO NEW_INTDEF  (@ST$        = ST$,
     1536+   12275                            @R          = %PROGRAM, /*N* IS R AND COUNT RIGHT */
     1537+   12276                            @COUNT      = %PROC,
     1538+   12277                            @TYPE       = %TYG,
     1539+   12278                            @LINE_NO    = COMCOM.CURRENT.LINE,
     1540+   12279                            @ATTR       = FALSE,
     1541+   12280                            @ARGLIST$   = "ADDR(NIL)",
     1542+   12281                            @PROC$      = ,
     1543+   12282                            @ENTRYS$    = "ADDR(NIL)",
     1544+   12283                            @NEXT       = "ADDR(NIL)",
     1545+   12284                            @DNT$       = "ADDR(NIL)");
     1546+   12285
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:645  
     1547+   12286             DO;
     1548+   12287               %RESERVE_ST (POINTER = @ST$);
     1549+   12288
     1550+   12289               @ST$ -> INTDEF.ID                 = %INTDEF;
     1551+   12290               @ST$ -> INTDEF.R                  = @R;
     1552+   12291               @ST$ -> INTDEF.COUNT              = @COUNT;
     1553+   12292               @ST$ -> INTDEF.TYPE               = @TYPE;
     1554+   12293               @ST$ -> INTDEF.LINE_NO            = @LINE_NO;
     1555+   12294               @ST$ -> INTDEF.ATTR               = @ATTR;
     1556+   12295               @ST$ -> INTDEF.ARGLIST$           = @ARGLIST$;
     1557+   12296               @ST$ -> INTDEF.ENTRYS$            = @ENTRYS$;
     1558+   12297               @ST$ -> INTDEF.DNT$               = @DNT$;
     1559+   12298               @ST$ -> INTDEF.NEXT               = @NEXT;
     1560+   12299
     1561+   12300                 %UPDATE_PROC_LINK (@TEMPLATE = INTDEF, @ST$ = @ST$, @PROC$ = @PROC$);
     1562+   12301             END;
     1563+   12302           %MEND;
     1564+   12303
     1565+   12304
     1566+   12305           %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:646  
     1567+   12306    1   DCL 1 PROC_            BASED (ST$) ALIGNED,
     1568+   12307    1        2 ID              UBIN HALF UNAL,
     1569+   12308    1        2 LEVEL           UBIN HALF UNAL, /* Nesting level */
     1570+   12309
     1571+   12310    1        2 PROC_SUPP$      PTR,
     1572+   12311
     1573+   12312    1        2 LINE_START      UBIN HALF UNAL,
     1574+   12313    1        2 LINE_END        UBIN HALF UNAL,
     1575+   12314
     1576+   12315    1        2 ATTR            BIT (36) UNAL,
     1577+   12316    1        2 B               REDEF ATTR,
     1578+   12317    1         3 COMMON         BOOLEAN,
     1579+   12318    1         3 INITIAL        BOOLEAN,
     1580+   12319    1         3 CANCELED       BOOLEAN,
     1581+   12320    1         3 MANAGED        BOOLEAN,
     1582+   12321    1         3 INITIAL_RELATIVE BOOLEAN,
     1583+   12322    1         3 COMMA_IS_DECIMAL BOOLEAN,
     1584+   12323    1         3 CURRENCY_SIGN    BOOLEAN,
     1585+   12324    1         3 OBJECT_IS_COMMA  BOOLEAN,
     1586+   12325    1         3 INLINE         BOOLEAN,
     1587+   12326    1         3 MAIN_PROG      BOOLEAN,
     1588+   12327    1         3 SUB_SCHEMA     BOOLEAN,
     1589+   12328    1         3 *              (0:6) BOOLEAN,
     1590+   12329    1         3 ARG_COUNT      SBIN (18) UNAL,
     1591+   12330
     1592+   12331    1        2 PSEUDO_STACK$   PTR,  /* To base for return addr and args */
     1593+   12332    1        2 LOG_BLK_NUMBER  REDEF PSEUDO_STACK$ SBIN, /* PH5 only */
     1594+   12333
     1595+   12334    1        2 CSIB$           PTR, /* Ptr to CSIB ST item */
     1596+   12335
     1597+   12336    1        2 PROC_DEF$       PTR,
     1598+   12337
     1599+   12338    1        2 SON             PTR,
     1600+   12339
     1601+   12340    1        2 BROTHER         PTR,
     1602+   12341
     1603+   12342    1        2 FATHER          PTR,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:647  
     1604+   12343
     1605+   12344    1        2 *               PTR;
     1606+   12345
     1607+   12346
     1608+   12347        %MACRO NEW_PROC_ (@ST$        = ST$,
     1609+   12348                          @LEVEL      = 1,
     1610+   12349                          @LINE_START = COMCOM.CURRENT.LINE,
     1611+   12350                          @LINE_END   = COMCOM.CURRENT.LINE,
     1612+   12351                          @ATTR       = FALSE,
     1613+   12352                          @PROC_SUPP$ = "ADDR(NIL)",
     1614+   12353                          @PSEUDO_STACK$       = "ADDR(NIL)",
     1615+   12354                          @CSIB$      = "ADDR(NIL)",
     1616+   12355                          @PROC_DEF$  = "ADDR(NIL)",
     1617+   12356                          @FATHER     = "ADDR(NIL)",
     1618+   12357                          @BROTHER    = "ADDR(NIL)",
     1619+   12358                          @SON        = "ADDR(NIL)",
     1620+   12359                          @COMMON     = ,
     1621+   12360                          @INITIAL    = ,
     1622+   12361                          @CANCELED   = ,
     1623+   12362                          @MANAGED    = ,
     1624+   12363                          @INITIAL_RELATIVE = ,
     1625+   12364                          @COMMA_IS_DECIMAL = ,
     1626+   12365                          @CURRENCY_SIGN = ,
     1627+   12366                          @OBJECT_IS_COMMA = ,
     1628+   12367                          @INLINE     = ,
     1629+   12368                          @MAIN_PROG  = ,
     1630+   12369                          @SUB_SCHEMA = );
     1631+   12370
     1632+   12371             DO;
     1633+   12372               %RESERVE_ST (POINTER = @ST$);
     1634+   12373
     1635+   12374               @ST$ -> PROC_.ID         = %PROC_;
     1636+   12375               @ST$ -> PROC_.LEVEL      = @LEVEL;
     1637+   12376               @ST$ -> PROC_.LINE_START = @LINE_START;
     1638+   12377               @ST$ -> PROC_.LINE_END   = @LINE_END;
     1639+   12378               @ST$ -> PROC_.ATTR       = @ATTR;
     1640+   12379               @ST$ -> PROC_.PROC_SUPP$ = @PROC_SUPP$;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:648  
     1641+   12380               @ST$ -> PROC_.PSEUDO_STACK$      = @PSEUDO_STACK$;
     1642+   12381               @ST$ -> PROC_.CSIB$      = @CSIB$;
     1643+   12382               @ST$ -> PROC_.PROC_DEF$  = @PROC_DEF$;
     1644+   12383               @ST$ -> PROC_.FATHER     = @FATHER;
     1645+   12384               @ST$ -> PROC_.BROTHER    = @BROTHER;
     1646+   12385               @ST$ -> PROC_.SON        = @SON;
     1647+   12386
     1648+   12387               %IF (TEXTCHAR(@COMMON) ~= '');
     1649+   12388                 @ST$ -> PROC_.B.COMMON = @COMMON;
     1650+   12389               %ENDIF;
     1651+   12390               %IF (TEXTCHAR(@INITIAL) ~= '');
     1652+   12391                 @ST$ -> PROC_.B.INITIAL = @INITIAL;
     1653+   12392               %ENDIF;
     1654+   12393               %IF (TEXTCHAR(@CANCELED) ~= '');
     1655+   12394                 @ST$ -> PROC_.B.CANCELED = @CANCELED;
     1656+   12395               %ENDIF;
     1657+   12396               %IF (TEXTCHAR(@MANAGED) ~= '');
     1658+   12397                 @ST$ -> PROC_.B.MANAGED = @MANAGED;
     1659+   12398               %ENDIF;
     1660+   12399               %IF (TEXTCHAR(@INITIAL_RELATIVE) ~= '');
     1661+   12400                 @ST$ -> PROC_.B.INITIAL_RELATIVE = @INITIAL_RELATIVE;
     1662+   12401               %ENDIF;
     1663+   12402               %IF (TEXTCHAR(@COMMA_IS_DECIMAL) ~= '');
     1664+   12403                 @ST$ -> PROC_.B.COMMA_IS_DECIMAL = @COMMA_IS_DECIMAL;
     1665+   12404               %ENDIF;
     1666+   12405               %IF (TEXTCHAR(@CURRENCY_SIGN) ~= '');
     1667+   12406                 @ST$ -> PROC_.B.CURRENCY_SIGN = @CURRENCY_SIGN;
     1668+   12407               %ENDIF;
     1669+   12408               %IF (TEXTCHAR(@OBJECT_IS_COMMA) ~= '');
     1670+   12409                 @ST$ -> PROC_.B.OBJECT_IS_COMMA = @OBJECT_IS_COMMA;
     1671+   12410               %ENDIF;
     1672+   12411               %IF (TEXTCHAR(@INLINE) ~= '');
     1673+   12412                 @ST$ -> PROC_.B.INLINE = @INLINE;
     1674+   12413               %ENDIF;
     1675+   12414               %IF (TEXTCHAR(@MAIN_PROG) ~= '');
     1676+   12415                 @ST$ -> PROC_.B.MAIN_PROG = @MAIN_PROG;
     1677+   12416               %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:649  
     1678+   12417               %IF (TEXTCHAR(@SUB_SCHEMA) ~= '');
     1679+   12418                 @ST$ -> PROC_.B.SUB_SCHEMA = @SUB_SCHEMA;
     1680+   12419               %ENDIF;
     1681+   12420             END;
     1682+   12421        %MEND;
     1683+   12422
     1684+   12423
     1685+   12424        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:650  
     1686+   12425        /*
     1687+   12426           This next template PROC_DEF is to keep symdef and intdef
     1688+   12427           the same, it is for referencing the same fields in both
     1689+   12428           to eliminate special casing each reference.  This violates
     1690+   12429           the "strong typing" ethics, but saves code that at THIS POINT
     1691+   12430           need not be different all over.  It is mostly used when accessing
     1692+   12431           ARGLIST$, and ENTRYS$.
     1693+   12432        */
     1694+   12433    1   DCL 1 PROC_DEF BASED (ST$) ALIGNED,
     1695+   12434
     1696+   12435    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1697+   12436    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1698+   12437    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1699+   12438
     1700+   12439            %DESCRIPTOR(LVL=2);
     1701+   12467
     1702+   12468    1       2 TYPE                   UBIN HALF HALIGNED,
     1703+   12469    1       2 LINE_NO                UBIN HALF HALIGNED,
     1704+   12470
     1705+   12471    1       2 ATTR BIT(36),
     1706+   12472    1       2 B                  REDEF ATTR,
     1707+   12473    1         3 * (0:35) BOOLEAN,
     1708+   12474
     1709+   12475    1       2 *                      PTR,
     1710+   12476
     1711+   12477    1       2 ARGLIST$               PTR,
     1712+   12478
     1713+   12479    1       2 DNT$                   PTR,
     1714+   12480
     1715+   12481    1       2 ENTRYS$                PTR,
     1716+   12482
     1717+   12483    1       2 *                      PTR,
     1718+   12484
     1719+   12485    1       2 PROC$                  PTR,
     1720+   12486    1       2 LINK                   PTR;
     1721+   12487
     1722+   12488
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:651  
     1723+   12489        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:652  
     1724+   12490    1   DCL 1 SYMDEF_ BASED (ST$) ALIGNED,
     1725+   12491
     1726+   12492    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1727+   12493    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1728+   12494    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1729+   12495
     1730+   12496            %DESCRIPTOR(LVL=2);
     1731+   12524
     1732+   12525    1       2 TYPE                   UBIN HALF HALIGNED,
     1733+   12526    1       2 LINE_NO                UBIN HALF HALIGNED,
     1734+   12527
     1735+   12528    1       2 ATTR BIT(36),
     1736+   12529    1       2 B                  REDEF ATTR,
     1737+   12530    1         3 MAIN_PROGRAM          BOOLEAN,
     1738+   12531    1         3 * (0:34) BOOLEAN,
     1739+   12532
     1740+   12533    1       2 NEXT                   PTR,
     1741+   12534
     1742+   12535    1       2 ARGLIST$               PTR,
     1743+   12536
     1744+   12537    1       2 DNT$                   PTR,
     1745+   12538
     1746+   12539    1       2 ENTRYS$                PTR,
     1747+   12540
     1748+   12541    1       2 *                      PTR,
     1749+   12542
     1750+   12543    1       2 PROC$                  PTR,
     1751+   12544    1       2 LINK                   PTR;
     1752+   12545
     1753+   12546
     1754+   12547        %MACRO NEW_SYMDEF_ ( @ST$              = ST$,
     1755+   12548                             @R                = %PROGRAM,
     1756+   12549                             @COUNT            = %PROC,
     1757+   12550                             @TYPE             = %TYG,
     1758+   12551                             @LINE_NO          = COMCOM.CURRENT.LINE,
     1759+   12552                             @ATTR             = FALSE,
     1760+   12553                             @MAIN_PROGRAM     = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:653  
     1761+   12554                             @ARGLIST$         = "ADDR(NIL)",
     1762+   12555                             @PROC$            = ,
     1763+   12556                             @ENTRYS$         = "ADDR(NIL)",
     1764+   12557                             @NEXT       = ,
     1765+   12558                             @DNT$             = "ADDR(NIL)");
     1766+   12559          DO;
     1767+   12560            %RESERVE_ST (POINTER = @ST$);
     1768+   12561
     1769+   12562            @ST$ -> SYMDEF_.ID                 = %SYMDEF_;
     1770+   12563            @ST$ -> SYMDEF_.R                  = @R;
     1771+   12564            @ST$ -> SYMDEF_.COUNT              = @COUNT;
     1772+   12565            @ST$ -> SYMDEF_.TYPE               = @TYPE;
     1773+   12566            @ST$ -> SYMDEF_.LINE_NO            = @LINE_NO;
     1774+   12567            @ST$ -> SYMDEF_.ATTR               = @ATTR;
     1775+   12568            @ST$ -> SYMDEF_.ARGLIST$           = @ARGLIST$;
     1776+   12569            @ST$ -> SYMDEF_.ENTRYS$         = @ENTRYS$;
     1777+   12570            @ST$ -> SYMDEF_.DNT$               = @DNT$;
     1778+   12571
     1779+   12572            %IF TEXTCHAR(@NEXT) = '';
     1780+   12573               @ST$ -> SYMDEF_.NEXT = COMCOM.SYMDEF$;
     1781+   12574               COMCOM.SYMDEF$ = @ST$;
     1782+   12575               COMCOM.SYMDEFC = COMCOM.SYMDEFC + 1;
     1783+   12576            %ELSE;
     1784+   12577               @ST$ -> SYMDEF_.NEXT = @NEXT;
     1785+   12578            %ENDIF;
     1786+   12579
     1787+   12580            %UPDATE_PROC_LINK (@TEMPLATE = SYMDEF_, @ST$ = @ST$, @PROC$ = @PROC$);
     1788+   12581            %IF (TEXTCHAR(@MAIN_PROGRAM) ~= '');
     1789+   12582              @ST$ -> SYMDEF_.MAIN_PROGRAM = @MAIN_PROGRAM;
     1790+   12583            %ENDIF;
     1791+   12584          END;
     1792+   12585        %MEND;
     1793+   12586
     1794+   12587
     1795+   12588        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:654  
     1796+   12589    1   DCL 1 SYMREF_ BASED (ST$) ALIGNED,
     1797+   12590
     1798+   12591    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1799+   12592    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1800+   12593    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1801+   12594
     1802+   12595            %DESCRIPTOR(LVL=2);
     1803+   12623
     1804+   12624    1       2 TYPE                   UBIN HALF HALIGNED,
     1805+   12625    1       2 LINE_NO                UBIN HALF HALIGNED,
     1806+   12626
     1807+   12627    1       2 ATTR BIT(36),
     1808+   12628    1       2 B                  REDEF ATTR,
     1809+   12629    1         3 * (0:25) BOOLEAN,
     1810+   12630    1         3 SCOUNT               UBIN (9) UNAL, /* For Segmentation */
     1811+   12631    1         3 NO_BASE_PTR          BOOLEAN,
     1812+   12632
     1813+   12633    1       2 NEXT                   PTR,
     1814+   12634
     1815+   12635    1       2 *                      PTR,
     1816+   12636
     1817+   12637    1       2 DNT$                   PTR,
     1818+   12638
     1819+   12639    1       2 *                      PTR,
     1820+   12640
     1821+   12641    1       2 REF_COUNT              SBIN,
     1822+   12642
     1823+   12643    1       2 PROC$                  PTR,
     1824+   12644    1       2 LINK                   PTR;
     1825+   12645
     1826+   12646
     1827+   12647        %MACRO NEW_SYMREF_ ( @ST$              = ST$,
     1828+   12648                             @R                = %PROGRAM,
     1829+   12649                             @COUNT            = %PROC,
     1830+   12650                             @TYPE             = %TYG,
     1831+   12651                             @LINE_NO          = COMCOM.CURRENT.LINE,
     1832+   12652                             @NEXT             = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:655  
     1833+   12653                             @ATTR             = FALSE,
     1834+   12654                             @NO_BASE_PTR      = TRUE,
     1835+   12655                             @REF_COUNT        = 1,
     1836+   12656                             @PROC$            = ,
     1837+   12657                             @DNT$             = "ADDR(NIL)");
     1838+   12658          DO;
     1839+   12659            %RESERVE_ST (POINTER = @ST$);
     1840+   12660
     1841+   12661            @ST$ -> SYMREF_.ID                 = %SYMREF_;
     1842+   12662            @ST$ -> SYMREF_.R                  = @R;
     1843+   12663            @ST$ -> SYMREF_.COUNT              = @COUNT;
     1844+   12664            @ST$ -> SYMREF_.REF_COUNT          = @REF_COUNT;
     1845+   12665            @ST$ -> SYMREF_.TYPE               = @TYPE;
     1846+   12666            @ST$ -> SYMREF_.LINE_NO            = @LINE_NO;
     1847+   12667            @ST$ -> SYMREF_.NEXT               = @NEXT;
     1848+   12668            @ST$ -> SYMREF_.ATTR               = @ATTR;
     1849+   12669            %IF @NO_BASE_PTR;
     1850+   12670            @ST$ -> SYMREF_.B.NO_BASE_PTR      = @NO_BASE_PTR;
     1851+   12671            %ENDIF;
     1852+   12672            @ST$ -> SYMREF_.DNT$               = @DNT$;
     1853+   12673
     1854+   12674                 %UPDATE_PROC_LINK (@TEMPLATE = SYMREF_, @ST$ = @ST$, @PROC$ = @PROC$);
     1855+   12675          END;
     1856+   12676        %MEND;
     1857+   12677
     1858+   12678        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:656  
     1859+   12679
     1860+   12680        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:657  
     1861+   12681    1   DCL 1 SEGMENT BASED (ST$) ALIGNED,
     1862+   12682
     1863+   12683    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1864+   12684    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1865+   12685    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1866+   12686
     1867+   12687            %DESCRIPTOR(LVL=2);
     1868+   12715
     1869+   12716    1       2 SIZE                   UBIN HALF HALIGNED,
     1870+   12717    1       2 LINE_NO                UBIN HALF HALIGNED,
     1871+   12718
     1872+   12719    1       2 ATTR BIT(36),
     1873+   12720    1       2 B                  REDEF ATTR,
     1874+   12721    1         3 * (0:35) BOOLEAN,
     1875+   12722
     1876+   12723    1       2 *                      PTR,
     1877+   12724
     1878+   12725    1       2 *                      PTR,
     1879+   12726
     1880+   12727    1       2 DNT$                   PTR,
     1881+   12728
     1882+   12729    1       2 BCD_ST$                PTR,
     1883+   12730
     1884+   12731    1       2 NEXT                   PTR,
     1885+   12732
     1886+   12733    1       2 PROC$                  PTR,
     1887+   12734    1       2 LINK                   PTR;
     1888+   12735
     1889+   12736
     1890+   12737        %MACRO NEW_SEGMENT ( @ST$              = ST$,
     1891+   12738                             @R                = %PROGRAM,
     1892+   12739                             @COUNT            = %PROC,
     1893+   12740                             @SIZE             = 0,
     1894+   12741                             @LINE_NO          = COMCOM.CURRENT.LINE,
     1895+   12742                             @ATTR             = FALSE,
     1896+   12743                             @BCD_ST$          = "ADDR(NIL)",
     1897+   12744                             @NEXT             = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:658  
     1898+   12745                             @PROC$            = ,
     1899+   12746                             @DNT$             = "ADDR(NIL)");
     1900+   12747          DO;
     1901+   12748            %RESERVE_ST (POINTER = @ST$);
     1902+   12749
     1903+   12750            @ST$ -> SEGMENT.ID                 = %SEGMENT;
     1904+   12751            @ST$ -> SEGMENT.R                  = @R;
     1905+   12752            @ST$ -> SEGMENT.COUNT              = @COUNT;
     1906+   12753            @ST$ -> SEGMENT.SIZE               = @SIZE;
     1907+   12754            @ST$ -> SEGMENT.LINE_NO            = @LINE_NO;
     1908+   12755            @ST$ -> SEGMENT.ATTR               = @ATTR;
     1909+   12756            @ST$ -> SEGMENT.DNT$               = @DNT$;
     1910+   12757            @ST$ -> SEGMENT.BCD_ST$            = @BCD_ST$;
     1911+   12758            @ST$ -> SEGMENT.NEXT               = @NEXT;
     1912+   12759
     1913+   12760                 %UPDATE_PROC_LINK (@TEMPLATE = SEGMENT, @ST$ = @ST$, @PROC$ = @PROC$);
     1914+   12761          END;
     1915+   12762        %MEND;
     1916+   12763
     1917+   12764
     1918+   12765
     1919+   12766        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:659  
     1920+   12767    1   DCL 1 BLOCK BASED (ST$) ALIGNED,
     1921+   12768
     1922+   12769    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     1923+   12770    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     1924+   12771    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     1925+   12772
     1926+   12773            %DESCRIPTOR(LVL=2);
     1927+   12801
     1928+   12802    1       2 SIZE                   UBIN HALF HALIGNED,
     1929+   12803    1       2 LINE_NO                UBIN HALF HALIGNED,
     1930+   12804
     1931+   12805    1       2 ATTR BIT(36),
     1932+   12806    1       2 B                  REDEF ATTR,
     1933+   12807    1         3 REDEFINED            BOOLEAN,  /* two or more in this block */
     1934+   12808    1         3 CSIB                 BOOLEAN,
     1935+   12809    1         3 SIZE_256K            BOOLEAN,
     1936+   12810    1         3 * (0:23) BOOLEAN,
     1937+   12811    1         3 SCOUNT               UBIN (9) UNAL, /* For segmentation */
     1938+   12812
     1939+   12813    1       2 NEXT                   PTR,
     1940+   12814
     1941+   12815    1       2 *                      PTR,
     1942+   12816
     1943+   12817    1       2 DNT$                   PTR,
     1944+   12818
     1945+   12819    1       2 QLT$                   PTR,
     1946+   12820
     1947+   12821    1       2 SIZE1                  UBIN HALF HALIGNED,
     1948+   12822    1       2 *                      BIT(18),
     1949+   12823
     1950+   12824    1       2 PROC$                  PTR,
     1951+   12825    1       2 LINK                   PTR;
     1952+   12826
     1953+   12827
     1954+   12828        %MACRO NEW_BLOCK ( @ST$              = ST$,
     1955+   12829                             @R                = %BLOCK_,
     1956+   12830                             @COUNT            = ,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:660  
     1957+   12831                             @SIZE             = 0,
     1958+   12832                             @LINE_NO          = COMCOM.CURRENT.LINE,
     1959+   12833                             @ATTR             = FALSE,
     1960+   12834                             @REDEFINED         = ,
     1961+   12835                             @CSIB              = ,
     1962+   12836                             @NEXT             = "ADDR(NIL)",
     1963+   12837                             @DNT$             = "ADDR(NIL)",
     1964+   12838                             @PROC$            = ,
     1965+   12839                             @QLT$             = "ADDR(NIL)");
     1966+   12840          DO;
     1967+   12841            %RESERVE_ST (POINTER = @ST$);
     1968+   12842
     1969+   12843            %IF (TEXTCHAR(@COUNT) = '');
     1970+   12844              COMCOM.BLOCKC = COMCOM.BLOCKC + 1;
     1971+   12845              @ST$ -> BLOCK.COUNT = COMCOM.BLOCKC;
     1972+   12846              %IF PHASE = 1;
     1973+   12847                O1COM.LAST_BLOCK$ -> BLOCK.NEXT = @ST$;
     1974+   12848                O1COM.LAST_BLOCK$ = @ST$;
     1975+   12849              %ENDIF;
     1976+   12850            %ELSE;
     1977+   12851              @ST$ -> BLOCK.COUNT = @COUNT;
     1978+   12852            %ENDIF;
     1979+   12853
     1980+   12854            @ST$ -> BLOCK.ID                 = %BLOCK;
     1981+   12855            @ST$ -> BLOCK.R                  = @R;
     1982+   12856            @ST$ -> BLOCK.SIZE               = @SIZE;
     1983+   12857            @ST$ -> BLOCK.LINE_NO            = @LINE_NO;
     1984+   12858            @ST$ -> BLOCK.ATTR               = @ATTR;
     1985+   12859            @ST$ -> BLOCK.NEXT               = @NEXT;
     1986+   12860            @ST$ -> BLOCK.DNT$               = @DNT$;
     1987+   12861            @ST$ -> BLOCK.QLT$               = @QLT$;
     1988+   12862            %IF (TEXTCHAR(@REDEFINED) ~= '');
     1989+   12863              @ST$ -> BLOCK.B.REDEFINED      = @REDEFINED;
     1990+   12864            %ENDIF;
     1991+   12865            %IF (TEXTCHAR(@CSIB) ~= '');
     1992+   12866              @ST$ -> BLOCK.B.CSIB           = @CSIB;
     1993+   12867            %ENDIF;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:661  
     1994+   12868
     1995+   12869                 %UPDATE_PROC_LINK (@TEMPLATE = BLOCK, @ST$ = @ST$, @PROC$ = @PROC$);
     1996+   12870          END;
     1997+   12871        %MEND;
     1998+   12872        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:662  
     1999+   12873    1   DCL 1 DCB_ BASED (ST$) ALIGNED,
     2000+   12874
     2001+   12875    1       2 ID                     UBIN (18) UNAL, /* Operation code */
     2002+   12876    1       2 R                      UBIN  (9) UNAL, /* Relocation: 1 OR 3 */
     2003+   12877    1       2 COUNT                  UBIN  (9) UNAL, /* Block/Symref #     */
     2004+   12878
     2005+   12879            %DESCRIPTOR(LVL=2);
     2006+   12907
     2007+   12908    1       2 SIZE                   UBIN HALF HALIGNED,
     2008+   12909    1       2 LINE_NO                UBIN HALF HALIGNED,
     2009+   12910
     2010+   12911    1       2 ATTR BIT(36),
     2011+   12912    1       2 B                  REDEF ATTR,
     2012+   12913    1         3 * (0:35) BOOLEAN,
     2013+   12914
     2014+   12915    1       2 NEXT                   PTR,
     2015+   12916
     2016+   12917    1       2 LTS$                   PTR,
     2017+   12918
     2018+   12919    1       2 DNT$                   PTR,
     2019+   12920
     2020+   12921    1       2 QLT$                   PTR,
     2021+   12922
     2022+   12923    1       2 *                      PTR,
     2023+   12924
     2024+   12925    1       2 PROC$                  PTR,
     2025+   12926    1       2 LINK                   PTR;
     2026+   12927
     2027+   12928
     2028+   12929        %MACRO NEW_DCB  ( @ST$              = ST$,
     2029+   12930                             @R                = %BLOCK_,
     2030+   12931                             @COUNT            = %DATA,
     2031+   12932                             @SIZE             = 0,
     2032+   12933                             @LINE_NO          = COMCOM.CURRENT.LINE,
     2033+   12934                             @ATTR             = FALSE,
     2034+   12935                             @NEXT             = "ADDR(NIL)",
     2035+   12936                             @DNT$             = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:663  
     2036+   12937                             @PROC$            = ,
     2037+   12938                             @QLT$             = "ADDR(NIL)");
     2038+   12939          DO;
     2039+   12940            %RESERVE_ST (POINTER = @ST$);
     2040+   12941
     2041+   12942            @ST$ -> DCB_.ID                 = %DCB_;
     2042+   12943            @ST$ -> DCB_.R                  = @R;
     2043+   12944            @ST$ -> DCB_.COUNT              = @COUNT;
     2044+   12945            @ST$ -> DCB_.SIZE               = @SIZE;
     2045+   12946            @ST$ -> DCB_.LINE_NO            = @LINE_NO;
     2046+   12947            @ST$ -> DCB_.ATTR               = @ATTR;
     2047+   12948            @ST$ -> DCB_.NEXT               = @NEXT;
     2048+   12949            @ST$ -> DCB_.DNT$               = @DNT$;
     2049+   12950            @ST$ -> DCB_.QLT$               = @QLT$;
     2050+   12951
     2051+   12952                 %UPDATE_PROC_LINK (@TEMPLATE = DCB_, @ST$ = @ST$, @PROC$ = @PROC$);
     2052+   12953          END;
     2053+   12954        %MEND;
     2054+   12955        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:664  
     2055+   12956
     2056+   12957    1   DCL 1 MNEMONIC                BASED (ST$) ALIGNED,
     2057+   12958
     2058+   12959    1        2 ID                     UBIN HALF UNAL,
     2059+   12960    1        2 *                      UBIN HALF UNAL,
     2060+   12961
     2061+   12962    1        2 NAME                   UBIN WORD UNAL, /* Rsv wrd # */
     2062+   12963    1        2 VFC                    REDEF NAME,
     2063+   12964    1          3 CHAR_                CHAR (1) UNAL,
     2064+   12965    1          3 *                    CHAR (3) UNAL,
     2065+   12966    1        2 CHANNEL#               REDEF NAME UBIN UNAL,
     2066+   12967
     2067+   12968    1        2 TYPE                   UBIN HALF UNAL,
     2068+   12969    1        2 LINE_NO                UBIN HALF UNAL,
     2069+   12970
     2070+   12971    1        2 ATTR                   BIT (36),
     2071+   12972    1        2 B                      REDEF ATTR,
     2072+   12973    1          3 VFC_CHAR             BOOLEAN,
     2073+   12974    1          3 CHANNEL              BOOLEAN,
     2074+   12975    1          3 MNEMONIC_NAME        BOOLEAN,
     2075+   12976    1          3 *                    (0:32) BOOLEAN,
     2076+   12977
     2077+   12978    1        2 NEXT                   PTR,
     2078+   12979
     2079+   12980    1        2 *                      PTR,
     2080+   12981
     2081+   12982    1        2 DNT$                   PTR,
     2082+   12983
     2083+   12984    1        2 QLT$                   PTR,
     2084+   12985
     2085+   12986    1        2 *                      PTR,
     2086+   12987
     2087+   12988    1        2 PROC$                  PTR,
     2088+   12989    1        2 LINK                   PTR;
     2089+   12990
     2090+   12991
     2091+   12992        %MACRO NEW_MNEMONIC (@ST$         = ST$,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:665  
     2092+   12993                             @NAME        = ,
     2093+   12994                             @CHANNEL#    = ,
     2094+   12995                             @VFC_CHAR_   = ,
     2095+   12996                             @TYPE        = %TYG,
     2096+   12997                             @LINE_NO     = COMCOM.CURRENT.LINE,
     2097+   12998                             @ATTR        = '0'B,
     2098+   12999                             @CHANNEL     = ,
     2099+   13000                             @VFC_CHAR    = ,
     2100+   13001                             @MNEMONIC_NAME=,
     2101+   13002                             @NEXT        = "ADDR(NIL)",
     2102+   13003                             @DNT$        = "ADDR(NIL)",
     2103+   13004                             @PROC$       = ,
     2104+   13005                             @QLT$        = "ADDR(NIL)");
     2105+   13006
     2106+   13007               DO;
     2107+   13008                 %RESERVE_ST (POINTER = @ST$);
     2108+   13009
     2109+   13010                 @ST$ -> MNEMONIC.ID          = %MNEMONIC;
     2110+   13011                 @ST$ -> MNEMONIC.TYPE        = @TYPE;
     2111+   13012                 @ST$ -> MNEMONIC.LINE_NO     = @LINE_NO;
     2112+   13013                 @ST$ -> MNEMONIC.ATTR        = @ATTR;
     2113+   13014                 @ST$ -> MNEMONIC.NEXT        = @NEXT;
     2114+   13015                 @ST$ -> MNEMONIC.DNT$        = @DNT$;
     2115+   13016                 @ST$ -> MNEMONIC.QLT$        = @QLT$;
     2116+   13017
     2117+   13018                 %UPDATE_PROC_LINK (@TEMPLATE = MNEMONIC, @ST$ = @ST$, @PROC$ = @PROC$);
     2118+   13019
     2119+   13020                 %IF TEXTCHAR(@NAME) ~= '';
     2120+   13021                   @ST$ -> MNEMONIC.NAME      = @NAME;
     2121+   13022                   %ELSEIF TEXTCHAR(@VFC_CHAR_) ~= '';
     2122+   13023                     @ST$ -> MNEMONIC.VFC       = FALSE;
     2123+   13024                     @ST$ -> MNEMONIC.VFC.CHAR_ = @VFC_CHAR_;
     2124+   13025                   %ELSE;
     2125+   13026                       @ST$ -> MNEMONIC.CHANNEL# = @CHANNEL#;
     2126+   13027                 %ENDIF;
     2127+   13028
     2128+   13029                 %IF TEXTCHAR(@VFC_CHAR) ~= '';
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:666  
     2129+   13030                   @ST$ -> MNEMONIC.B.VFC_CHAR = @VFC_CHAR;
     2130+   13031                 %ENDIF;
     2131+   13032                 %IF TEXTCHAR(@MNEMONIC_NAME) ~= '';
     2132+   13033                   @ST$ -> MNEMONIC.B.MNEMONIC_NAME = @MNEMONIC_NAME;
     2133+   13034                 %ENDIF;
     2134+   13035                 %IF TEXTCHAR(@CHANNEL) ~= '';
     2135+   13036                   @ST$ -> MNEMONIC.B.CHANNEL = @CHANNEL;
     2136+   13037                 %ENDIF;
     2137+   13038
     2138+   13039               END;
     2139+   13040
     2140+   13041        %MEND;
     2141+   13042        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:667  
     2142+   13043
     2143+   13044    1   DCL 1 SWITCH                  BASED (ST$) ALIGNED,
     2144+   13045
     2145+   13046    1        2 ID                     UBIN HALF UNAL,
     2146+   13047    1        2 *                      UBIN HALF UNAL,
     2147+   13048
     2148+   13049    1        2 OFF$                   PTR,
     2149+   13050
     2150+   13051    1        2 TYPE                   UBIN HALF UNAL,
     2151+   13052    1        2 LINE_NO                UBIN HALF UNAL,
     2152+   13053
     2153+   13054    1        2 ATTR                   BIT (18),
     2154+   13055    1        2 B                      REDEF ATTR,
     2155+   13056    1          3 *                    (0:17) BOOLEAN,
     2156+   13057    1        2 SWITCH#                UBIN HALF UNAL,
     2157+   13058
     2158+   13059    1        2 NEXT                   PTR,
     2159+   13060
     2160+   13061    1        2 ON$                    PTR,
     2161+   13062
     2162+   13063    1        2 DNT$                   PTR,
     2163+   13064
     2164+   13065    1        2 QLT$                   PTR,
     2165+   13066
     2166+   13067    1        2 *                      PTR,
     2167+   13068
     2168+   13069    1        2 PROC$                  PTR,
     2169+   13070    1        2 LINK                   PTR;
     2170+   13071
     2171+   13072
     2172+   13073        %MACRO NEW_SWITCH (@ST$       = ST$,
     2173+   13074                           @TYPE      = %TYG,
     2174+   13075                           @LINE_NO   = COMCOM.CURRENT.LINE,
     2175+   13076                           @ATTR      = FALSE,
     2176+   13077                           @NEXT      = "ADDR(NIL)",
     2177+   13078                           @SWITCH#   = 0,
     2178+   13079                           @DNT$      = "ADDR(NIL)",
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:668  
     2179+   13080                           @QLT$      = "ADDR(NIL)",
     2180+   13081                           @PROC$     = ,
     2181+   13082                           @ON$       = "ADDR(NIL)",
     2182+   13083                           @OFF$      = "ADDR(NIL)");
     2183+   13084
     2184+   13085               DO;
     2185+   13086                 %RESERVE_ST   (POINTER = @ST$);
     2186+   13087
     2187+   13088                 @ST$ -> SWITCH.ID        = %SWITCH;
     2188+   13089                 @ST$ -> SWITCH.TYPE      = @TYPE;
     2189+   13090                 @ST$ -> SWITCH.LINE_NO   = @LINE_NO;
     2190+   13091                 @ST$ -> SWITCH.ATTR      = @ATTR;
     2191+   13092                 @ST$ -> SWITCH.NEXT      = @NEXT;
     2192+   13093                 @ST$ -> SWITCH.SWITCH#   = @SWITCH#;
     2193+   13094                 @ST$ -> SWITCH.DNT$      = @DNT$;
     2194+   13095                 @ST$ -> SWITCH.QLT$      = @QLT$;
     2195+   13096
     2196+   13097                 %UPDATE_PROC_LINK (@TEMPLATE = SWITCH, @ST$ = @ST$, @PROC$ = @PROC$);
     2197+   13098                 @ST$ -> SWITCH.ON$       = @ON$;
     2198+   13099                 @ST$ -> SWITCH.OFF$      = @OFF$;
     2199+   13100               END;
     2200+   13101
     2201+   13102        %MEND;
     2202+   13103        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:669  
     2203+   13104
     2204+   13105
     2205+   13106        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:670  
     2206+   13107
     2207+   13108    1      DCL 1 ALPHABET      BASED (ST$) ALIGNED,
     2208+   13109    1            2 ID          UBIN HALF UNAL,
     2209+   13110    1            2 *           UBIN HALF UNAL,
     2210+   13111
     2211+   13112    1            2 TABLE_ETT$  PTR,
     2212+   13113
     2213+   13114    1            2 TYPE        UBIN HALF UNAL,
     2214+   13115    1            2 LINE_NO     UBIN HALF UNAL,
     2215+   13116    1            2 ATTR        BIT (36),
     2216+   13117    1            2 B           REDEF ATTR,
     2217+   13118    1              3 ALSO      BOOLEAN,
     2218+   13119    1              3 SET_LOW_VALUE    BOOLEAN,
     2219+   13120    1              3 GTR_255   BOOLEAN,
     2220+   13121    1              3 *         (0:23) BOOLEAN,
     2221+   13122    1              3 CODE      UBIN (9) UNAL,
     2222+   13123
     2223+   13124    1            2 NEXT        PTR,
     2224+   13125    1            2 TABLE$      PTR,
     2225+   13126    1            2 DNT$        PTR,
     2226+   13127    1            2 HIGH_VALUE  UBIN BYTE UNAL,
     2227+   13128    1            2 LOW_VALUE   UBIN BYTE UNAL,
     2228+   13129    1            2 NUM_VALUES  UBIN HALF UNAL,
     2229+   13130    1            2 *           PTR,
     2230+   13131    1            2 PROC$       PTR,
     2231+   13132    1            2 LINK        PTR;
     2232+   13133
     2233+   13134
     2234+   13135           %MACRO NEW_ALPHABET (@ST$         = ST$,
     2235+   13136                                @ATTR        = FALSE,
     2236+   13137                                @ALSO        = FALSE,
     2237+   13138                                @SET_LOW_VALUE = FALSE,
     2238+   13139                                @GTR_255     = FALSE,
     2239+   13140                                @LINE_NO     = COMCOM.CURRENT.LINE,
     2240+   13141                                @NEXT        = "ADDR(NIL)",
     2241+   13142                                @TYPE        = %TYG,
     2242+   13143                                @CODE        = %ASCII,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:671  
     2243+   13144                                @DNT$        = "ADDR(NIL)",
     2244+   13145                                @PROC$       = ,
     2245+   13146                                @HIGH_VALUE  = 127,
     2246+   13147                                @LOW_VALUE   = 0,
     2247+   13148                                @TABLE_ETT$  = "ADDR(NIL)",
     2248+   13149                                @NUM_VALUES  = 0,
     2249+   13150                                @TABLE$      = "ADDR(NIL)");
     2250+   13151
     2251+   13152               DO;
     2252+   13153                 %RESERVE_ST (POINTER = @ST$);
     2253+   13154
     2254+   13155                 @ST$ -> ALPHABET.ID         = %ALPHABET;
     2255+   13156                 @ST$ -> ALPHABET.LINE_NO    = @LINE_NO;
     2256+   13157                 @ST$ -> ALPHABET.TYPE       = @TYPE;
     2257+   13158                 @ST$ -> ALPHABET.ATTR       = @ATTR;
     2258+   13159                 @ST$ -> ALPHABET.B.CODE     = @CODE;
     2259+   13160                 @ST$ -> ALPHABET.NEXT       = @NEXT;
     2260+   13161                 @ST$ -> ALPHABET.DNT$       = @DNT$;
     2261+   13162
     2262+   13163                 %UPDATE_PROC_LINK (@TEMPLATE = ALPHABET, @ST$ = @ST$, @PROC$ = @PROC$);
     2263+   13164                 @ST$ -> ALPHABET.HIGH_VALUE = @HIGH_VALUE;
     2264+   13165                 @ST$ -> ALPHABET.LOW_VALUE  = @LOW_VALUE;
     2265+   13166                 @ST$ -> ALPHABET.TABLE$     = @TABLE$;
     2266+   13167                 @ST$ -> ALPHABET.NUM_VALUES = @NUM_VALUES;
     2267+   13168                 @ST$ -> ALPHABET.TABLE_ETT$ = @TABLE_ETT$;
     2268+   13169
     2269+   13170                 %IF (TEXTCHAR (@ALSO) ~= '');
     2270+   13171                   @ST$ -> ALPHABET.B.ALSO = @ALSO;
     2271+   13172                 %ENDIF;
     2272+   13173                 %IF (TEXTCHAR (@SET_LOW_VALUE) ~= '');
     2273+   13174                   @ST$ -> ALPHABET.B.SET_LOW_VALUE = @SET_LOW_VALUE;
     2274+   13175                 %ENDIF;
     2275+   13176                 %IF (TEXTCHAR (@GTR_255) ~= '');
     2276+   13177                   @ST$ -> ALPHABET.B.GTR_255 = @GTR_255;
     2277+   13178                 %ENDIF;
     2278+   13179               END;
     2279+   13180
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:672  
     2280+   13181           %MEND;
     2281+   13182
     2282+   13183
     2283+   13184    1      DCL 1 CLASS                BASED (ST$) ALIGNED,
     2284+   13185    1            2 ID                 UBIN HALF UNAL,
     2285+   13186    1            2 *                  UBIN HALF UNAL,
     2286+   13187
     2287+   13188    1            2 TABLE$             PTR,
     2288+   13189
     2289+   13190    1            2 TYPE               UBIN HALF UNAL,
     2290+   13191    1            2 LINE_NO            UBIN HALF UNAL,
     2291+   13192    1            2 ATTR               BIT (36),
     2292+   13193    1            2 B                  REDEF ATTR,
     2293+   13194    1              3 *                (0:35) BOOLEAN,
     2294+   13195
     2295+   13196    1            2 NEXT               PTR,
     2296+   13197    1            2 *                  PTR,
     2297+   13198    1            2 DNT$               PTR,
     2298+   13199    1            2 QLT$               PTR,
     2299+   13200    1            2 *                  PTR,
     2300+   13201    1            2 PROC$              PTR,
     2301+   13202    1            2 LINK               PTR;
     2302+   13203
     2303+   13204
     2304+   13205           %MACRO NEW_CLASS (@ST$ = ST$,
     2305+   13206                             @TABLE$  = "ADDR(NIL)",
     2306+   13207                             @TYPE    = %TYG,
     2307+   13208                             @LINE_NO = COMCOM.CURRENT.LINE,
     2308+   13209                             @ATTR    = FALSE,
     2309+   13210                             @NEXT    = "ADDR(NIL)",
     2310+   13211                             @DNT$    = "ADDR(NIL)",
     2311+   13212                             @PROC$   = ,
     2312+   13213                             @QLT$    = "ADDR(NIL)");
     2313+   13214
     2314+   13215             DO;
     2315+   13216               %RESERVE_ST (POINTER = @ST$);
     2316+   13217
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:673  
     2317+   13218               @ST$ -> CLASS.ID       = %CLASS;
     2318+   13219               @ST$ -> CLASS.TABLE$   = @TABLE$;
     2319+   13220               @ST$ -> CLASS.TYPE     = @TYPE;
     2320+   13221               @ST$ -> CLASS.LINE_NO  = @LINE_NO;
     2321+   13222               @ST$ -> CLASS.ATTR     = @ATTR;
     2322+   13223               @ST$ -> CLASS.NEXT     = @NEXT;
     2323+   13224               @ST$ -> CLASS.DNT$     = @DNT$;
     2324+   13225               @ST$ -> CLASS.QLT$     = @QLT$;
     2325+   13226
     2326+   13227                 %UPDATE_PROC_LINK (@TEMPLATE = CLASS, @ST$ = @ST$, @PROC$ = @PROC$);
     2327+   13228             END;
     2328+   13229           %MEND;
     2329+   13230
     2330+   13231
     2331+   13232
     2332+   13233    1      DCL 1 SYMBOLIC_CHAR        BASED (ST$) ALIGNED,
     2333+   13234    1            2 ID                 UBIN HALF UNAL,
     2334+   13235    1            2 *                  UBIN HALF UNAL,
     2335+   13236    1            2 *                  UBIN WORD UNAL,
     2336+   13237
     2337+   13238    1            2 TYPE               UBIN HALF UNAL,
     2338+   13239    1            2 LINE_NO            UBIN HALF UNAL,
     2339+   13240    1            2 ATTR               BIT (36),
     2340+   13241    1            2 B                  REDEF ATTR,
     2341+   13242    1              3 *                (0:35) BOOLEAN,
     2342+   13243
     2343+   13244    1            2 NEXT               PTR,
     2344+   13245    1            2 CONST$             PTR,
     2345+   13246    1            2 DNT$               PTR,
     2346+   13247    1            2 QLT$               PTR,
     2347+   13248    1            2 *                  PTR,
     2348+   13249    1            2 PROC$              PTR,
     2349+   13250    1            2 LINK               PTR;
     2350+   13251
     2351+   13252
     2352+   13253           %MACRO NEW_SYM_CHAR (@ST$         = ST$,
     2353+   13254                                @ATTR        = FALSE,
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:674  
     2354+   13255                                @LINE_NO     = COMCOM.CURRENT.LINE,
     2355+   13256                                @TYPE        = %TYG,
     2356+   13257                                @NEXT        = "ADDR(NIL)",
     2357+   13258                                @DNT$        = "ADDR(NIL)",
     2358+   13259                                @QLT$        = "ADDR(NIL)",
     2359+   13260                                @PROC$       = ,
     2360+   13261                                @CONST$      = "ADDR(NIL)");
     2361+   13262
     2362+   13263               DO;
     2363+   13264                 %RESERVE_ST (POINTER = @ST$);
     2364+   13265
     2365+   13266                 @ST$ -> SYMBOLIC_CHAR.ID         = %SYM_CHAR;
     2366+   13267                 @ST$ -> SYMBOLIC_CHAR.LINE_NO    = @LINE_NO;
     2367+   13268                 @ST$ -> SYMBOLIC_CHAR.TYPE       = @TYPE;
     2368+   13269                 @ST$ -> SYMBOLIC_CHAR.ATTR       = @ATTR;
     2369+   13270                 @ST$ -> SYMBOLIC_CHAR.NEXT       = @NEXT;
     2370+   13271                 @ST$ -> SYMBOLIC_CHAR.DNT$       = @DNT$;
     2371+   13272                 @ST$ -> SYMBOLIC_CHAR.QLT$       = @QLT$;
     2372+   13273
     2373+   13274               %UPDATE_PROC_LINK (@TEMPLATE = SYMBOLIC_CHAR, @ST$ = @ST$, @PROC$ = @PROC$);
     2374+   13275                 @ST$ -> SYMBOLIC_CHAR.CONST$     = @CONST$;
     2375+   13276               END;
     2376+   13277
     2377+   13278           %MEND;
     2378+   13279
     2379+   13280
     2380+   13281        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:675  
     2381+   13282
     2382+   13283
     2383+   13284        %MACRO SET_OF_ST_ITEMS;
     2384+   13285
     2385+   13286             %TEMP,
     2386+   13287             %MNEMONIC,
     2387+   13288             %SWITCH,
     2388+   13289             %ALPHABET,
     2389+   13290             %CONDITION,
     2390+   13291             %ARRAY,
     2391+   13292             %SCALAR,
     2392+   13293             %CSIB,
     2393+   13294             %CONST,
     2394+   13295             %SECTION,
     2395+   13296             %PARA,
     2396+   13297             %SYMREF_,
     2397+   13298             %SYMDEF_,
     2398+   13299             %BLOCK,
     2399+   13300             %INDUCT,
     2400+   13301             %INTDEF,
     2401+   13302             %POINTER,
     2402+   13303             %SEGMENT,
     2403+   13304             %FD,
     2404+   13305             %SD,
     2405+   13306             %CD,
     2406+   13307             %RD,
     2407+   13308             %DB,
     2408+   13309             %CLASS,
     2409+   13310             %DCB_,
     2410+   13311             %REALM,
     2411+   13312             %DML_SET,
     2412+   13313             %DML_KEY,
     2413+   13314             %PRIVACY_KEY
     2414+   13315
     2415+   13316        %MEND;
     2416+   13317
     2417+   13318        %MACRO SET_OF_FILE_DESCRIPTIONS;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:676  
     2418+   13319
     2419+   13320             %FD,
     2420+   13321             %SD,
     2421+   13322             %RD
     2422+   13323
     2423+   13324        %MEND;
     2424+   13325
     2425+   13326
     2426+   13327        %MACRO ST_ITEMS_WITH_STORAGE ;
     2427+   13328             %TEMP,
     2428+   13329             %ARRAY,
     2429+   13330             %SCALAR,
     2430+   13331             %CSIB,
     2431+   13332             %CONST,
     2432+   13333             %FD,
     2433+   13334             %SD,
     2434+   13335             %RD,
     2435+   13336             %CD,
     2436+   13337             %POINTER
     2437+   13338        %MEND;
     2438+   13339
     2439+   13340
     2440+   13341
     2441+   13342
     2442+   13343        %EQU COMP1_LENGTH = 2 ; /* Length in terms of bytes */
     2443+   13344        %EQU COMP2_LENGTH = 4 ;
     2444+   13345        %EQU COMP6_LENGTH = 4 ;
     2445+   13346        %EQU COMP7_LENGTH = 2 ;
     2446+   13347        %EQU COMP11_13_LENGTH = 4 ;
     2447+   13348        %EQU COMP12_14_LENGTH = 8 ;
     2448+   13349
     2449+   13350        %EQU FLOATING_POINT_LEADING_SIGN = '00'B;
     2450+   13351        %EQU LEADING_SIGN = '01'B;
     2451+   13352        %EQU TRAILING_SIGN = '10'B;
     2452+   13353        %EQU NO_SIGN = '11'B;
     2453+   13354        %EQU OVP_LEADING_SIGN = '00'B;
     2454+   13355        %EQU OVP_TRAILING_SIGN = '11'B;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:677  
     2455+   13356
     2456+   13357        %EQU ADSC4 = '10'B;
     2457+   13358        %EQU ADSC6 = '01'B;
     2458+   13359        %EQU ADSC9 = '00'B;
     2459+   13360
     2460+   13361        %EQU NDSC4 = TRUE;
     2461+   13362        %EQU NDSC9 = FALSE;
     2462+   13363
     2463+   13364        %EQU ABSOLUTE = 0;
     2464+   13365        %EQU PROGRAM  = 1;
     2465+   13366        %EQU EXT_PROGRAM = 2;
     2466+   13367        %EQU BLOCK_   = 3;
     2467+   13368        %EQU START_BLK = 4;
     2468+   13369
     2469+   13370
     2470+   13371        /* Preprocessor values for SCALAR CLASS */
     2471+   13372
     2472+   13373        %EQU CLASS_EDITED               = 4;
     2473+   13374        %EQU CLASS_ALPHANUMERIC         = 3;
     2474+   13375        %EQU CLASS_ALPHABETIC           = 2;
     2475+   13376        %EQU CLASS_NUMERIC              = 1;
     2476+   13377        %EQU CLASS_NUMERIC_EDITED       = %(CLASS_NUMERIC + CLASS_EDITED);
     2477+   13378        %EQU CLASS_ALPHANUMERIC_EDITED  = %(CLASS_ALPHANUMERIC + CLASS_EDITED);
     2478+   13379        %EQU CLASS_ALPHABETIC_EDITED    = %(CLASS_ALPHABETIC + CLASS_EDITED);
     2479+   13380        %EQU CLASS_UNDEFINED            = 0;
     2480+   13381        %EQU CLASS_POINTER              = 0; /* Same as UNDEFINED */
     2481+   13382
     2482+   13383        /* Preprocessor values for ALPHABET types (CODE) */
     2483+   13384
     2484+   13385        %EQU ASCII             = 0;
     2485+   13386        %EQU JIS               = 1;
     2486+   13387        %EQU GRAPHIC           = 2;
     2487+   13388        %EQU EBCDIC            = 3;
     2488+   13389        %EQU GBCD              = 4;
     2489+   13390        %EQU HBCD              = 5;
     2490+   13391        %EQU USER_DEFINED      = 6;
     2491+   13392
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:678  
     2492+   13393
     2493+   13394        /* Channel numbers */
     2494+   13395        %EQU CPS =  0;
     2495+   13396        %EQU C01 =  1;
     2496+   13397        %EQU C02 =  2;
     2497+   13398        %EQU C03 =  3;
     2498+   13399        %EQU C04 =  4;
     2499+   13400        %EQU C05 =  5;
     2500+   13401        %EQU C06 =  6;
     2501+   13402        %EQU C07 =  7;
     2502+   13403        %EQU C08 =  8;
     2503+   13404        %EQU C09 =  9;
     2504+   13405        %EQU C10 = 10;
     2505+   13406        %EQU C11 = 11;
     2506+   13407        %EQU C12 = 12;
     2507+   13408        %EQU C13 = 13;
     2508+   13409        %EQU C14 = 14;
     2509+   13410        %EQU C15 = 15;
     2510+   13411
     2511+   13412        %EJECT;
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:679  
      498    13413    1   RETURN ;

  13413 13 000001   000000 221200 0                  LDX1  ! 0
        13 000002   000001 702211                    TSX2  ! 1,X1
      499    13414    1   END ;

PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:680  
--  Include file information  --

   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_QLT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_O1COM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LEX_SYMB.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_STACKS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_TYPES.:Z8A6TOU  is referenced.
   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8DD$DOCUMENT.
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:681  

 **** Variables and constants ****

  ****  Section 001 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 002 LblCom LEX_SYMBOL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(3240)  r     1 LEX_SYMBOL                 0-0-0/w STRC(3240)        1 LEX_SYMBOL_WORDS

  ****  Section 003 LblCom CURRENT_LEX_SYMBOL$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 CURRENT_LEX_SYMBOL$

  ****  Section 004 LblCom TEMP_LEX_SYMBOL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(3240)        1 TEMP_LEX_SYMBOL

  ****  Section 005 LblCom TEMP_LEX_SYMBOL2

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(3240)        1 TEMP_LEX_SYMBOL2

PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:682  
  ****  Section 006 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 007 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_

  ****  Section 008 LblCom QLT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 QLT$

  ****  Section 009 LblCom PREV_01_QLT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 PREV_01_QLT$

  ****  Section 010 LblCom QLT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 QLT_

  ****  Section 011 LblCom ST$

PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:683  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 012 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ST_

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248)       1 COMCOM
     0-0-0/w STRC(180)         1 HIER_STK(0:50)
     0-0-0/w SBIN              1 HIER_STK_PTR
     0-0-0/w UBIN              1 LTS_STEP(0:37)
     0-0-0/d STRC(11580)       1 O1COM                      0-0-0/w STRC(144)         1 PAGE_FORMAT
     0-0-0/w STRC(153)         1 REP_STK(0:50)              0-0-0/w SBIN              1 REP_STK_PTR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(288)         1 ADD_STMT                   0-0-0/w STRC(396)         1 ALPHABET
     0-0-0/w STRC(144)         1 ALTER_LTS                  0-0-0/w STRC(3672)        1 ALT_KEY
     0-0-0/w STRC(36864)       1 ARGLIST                    0-0-0/w STRC(396)         1 ARRAY
     0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS           0-0-0/w ASTR(324)   r     1 BASED_LEX_SYMBOL
     0-0-0/w STRC(360)         1 BASED_LEX_SYMBOL_WORDS
     0-0-0/w STRC(288)         1 BASE_LTS                   0-0-0/w STRC(288)         1 BINARY_OP
     0-0-0/w STRC(396)         1 BLOCK                      0-0-0/w STRC(144)         1 BT
     0-0-0/w STRC(288)         1 CALL_STMT                  0-0-0/w STRC(396)         1 CD
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:684  
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(396)         1 CLASS                      0-0-0/w STRC(288)         1 COMPUTE_STMT
     0-0-0/w STRC(396)         1 CONDITION                  0-0-0/w STRC(396)         1 CONST
     0-0-0/w STRC(72)          1 CONT                       0-0-0/w STRC(540)         1 CONTROL_NAME_LTS
     0-0-0/w STRC(1872)        1 COPY_FILE                  0-0-0/w STRC(396)         1 DB
     0-0-0/w STRC(396)         1 DCB_                       0-0-0/w STRC(288)         1 DEFERED_IDENTIFIER
     0-0-0/w STRC(252)         1 DEFERED_ID_TREE            0-0-0/w STRC(288)         1 DEFERED_QUAL_ID
     0-0-0/w STRC(288)         1 DEFERED_SUM_CLAUSE
     0-0-0/w STRC(288)         1 DEFERED_SUM_CLAUSE_LIST
     0-0-0/w STRC(288)         1 DELETE_STMT                0-0-0/w STRC(108)         1 DEPENDING_SIZE
     0-0-0/w STRC(5472)        1 DIMS                       0-0-0/w STRC(288)         1 DIVIDE_STMT
     0-0-0/w STRC(396)         1 DML_ITEM                   0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w STRC(73836)       1 EVALUATE                   0-0-0/w STRC(396)         1 FD
     0-0-0/w STRC(1692)        1 FILE_LTS                   0-0-0/w STRC(288)         1 ILS_LIST
     0-0-0/w STRC(108)         1 INDEXES                    0-0-0/w STRC(360)         1 INIT_LTS
     0-0-0/w STRC(288)         1 INSPECT_1_STMT             0-0-0/w STRC(288)         1 INSPECT_2_STMT
     0-0-0/w STRC(288)         1 INSPECT_4_STMT             0-0-0/w STRC(396)         1 INTDEF
     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN           0-0-0/w STRC(144)         1 KEY
     0-0-0/w STRC(396)         1 LABEL                      0-0-0/w STRC(288)         1 LA_ITEM
     0-0-0/w STRC(36864)       1 LCNST                      0-0-0/w STRC(72)          1 LONG
     0-0-0/w STRC              1 LTS                        0-0-0/w STRC(360)         1 LTSS
     0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY              0-0-0/w STRC(504)         1 LX_CD_INPUT
     0-0-0/w STRC(324)         1 LX_CD_I_O                  0-0-0/w STRC(396)         1 LX_CD_OUTPUT
     0-0-0/w STRC(288)         1 LX_ETT_ITEM                0-0-0/w STRC(288)         1 LX_ITEM
     0-0-0/w STRC(288)         1 LX_LARGE                   0-0-0/w STRC(288)         1 LX_LIST
     0-0-0/w STRC(1224)        1 LX_REC_DECL                0-0-0/w STRC(864)         1 LX_REPORT_REC
     0-0-0/w STRC(288)         1 LX_TERMINAL                0-0-0/w STRC(396)         1 MNEMONIC
     0-0-0/w STRC(288)         1 MULTIPLY_STMT              0-0-0/w STRC(144)         1 NEL
     0-0-0/w STRC(216)         1 OPEN_LTS                   0-0-0/w STRC(36864)       1 PAGE
     0-0-0/w STRC(396)         1 PARA                       0-0-0/w STRC(144)         1 PRIME
     0-0-0/w STRC(396)         1 PROC_                      0-0-0/w STRC(396)         1 PROC_DEF
     0-0-0/w STRC(900)         1 PROC_SUPP                  0-0-0/w STRC(216)         1 QLT
     0-0-0/w STRC(396)         1 RD                         0-0-0/w STRC(288)         1 READ_STMT
     0-0-0/w STRC(216)         1 REF                        0-0-0/w STRC(108)         1 RENAMES
     0-0-0/w STRC(720)         1 REPORT_01_LTS              0-0-0/w STRC(432)         1 REPORT_ELEM_LTS
     0-0-0/w STRC(252)         1 REPORT_GRP_LTS             0-0-0/w STRC(1332)        1 REPORT_LTS
     0-0-0/w STRC(288)         1 REWRITE_STMT               0-0-0/w STRC(144)         1 RVA_LTS
PL6.E3A0      #001=Z8DD$DOCUMENT File=Z8DD.:Z8A6TSI                              SAT 08/09/97 11:05 Page:685  
     0-0-0/w STRC(396)         1 SCALAR                     0-0-0/w STRC(396)         1 SD
     0-0-0/w STRC(396)         1 SECTION                    0-0-0/w STRC(396)         1 SEGMENT
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(396)         1 ST
     0-0-0/w STRC(288)         1 START_STMT                 0-0-0/w STRC(252)         1 STRING_STMT
     0-0-0/w STRC(288)         1 SUBTRACT_STMT              0-0-0/w STRC(252)         1 SUM_LTS
     0-0-0/w STRC(396)         1 SWITCH                     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR
     0-0-0/w STRC(396)         1 SYMDEF_                    0-0-0/w STRC(396)         1 SYMREF_
     0-0-0/w STRC(396)         1 TEMP                       0-0-0/w STRC(288)         1 UNARY_OP
     0-0-0/w STRC(288)         1 UNSTRING_STMT              0-0-0/d STRC(612)         1 USE
     0-0-0/w STRC(252)         1 USE_SUPP                   0-0-0/w STRC(396)         1 VARIABLE
     0-0-0/w STRC(288)         1 WRITE_STMT


   Procedure Z8DD$DOCUMENT requires 3 words for executable code.
   Procedure Z8DD$DOCUMENT is declared NOAUTO and requires 2 words of local(STATIC) storage.

    No errors detected in file Z8DD.:Z8A6TSI    .
