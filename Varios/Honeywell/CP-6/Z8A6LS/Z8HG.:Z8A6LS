VERSION A06

PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:1    
        1        1        /*M* Z8HG -- Register Manangement routines                          */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        Z8HG$CHOOSE_REGISTER:PROC(LO,HI,REGISTER) ALTRET;
        8        8        /*P*
        9        9               NAME: Z8HG$CHOOSE_REGISTER
       10       10            PURPOSE: Selects the most eligible register from a register class.
       11       11
       12       12        */
       13       13        /*F*
       14       14
       15       15               NAME: PICK_REGISTER
       16       16            PURPOSE: Selects the most eligible register from a register class.
       17       17               CALL: CALL Z8HG$CHOOSE_REGISTER(=LO,=HI,REGISTER=);
       18       18              INPUT: LO
       19       19                       Lower bounds of register class.
       20       20                     HI
       21       21                       Upper bounds of register class.
       22       22                       Triad above current triad (the one requesting the
       23       23                       register) has given us a hint as to which register
       24       24                       it would be able to generate the best code with.
       25       25                     REGISTER
       26       26                       Chosen register.
       27       27               DATA: Register classes::
       28       28
       29       29                        AR                XR                PR
       30       30                    _________          _________        _________
       31       31                    %ARA-%ARQ          %XR0-%XR7        %PR0-%PR7
       32       32
       33       33        DESCRIPTION: Chosen register doesn't have to be unused.  A "favored"
       34       34                     register is ideal for use, because this is the last reference
       35       35                     to that register. Refer to action FAVOR
       36       36                     for more info on selection of favored registers.
       37       37
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:2    
       38       38         */
       39       39
       40       40    1        DCL LO SBIN WORD;
       41       41    1        DCL HI SBIN WORD;
       42       42    1        DCL REGISTER SBIN WORD;
       43       43    1        DCL MIN_COST UBIN WORD;
       44       44
       45       45             %EQU PHASE = 4;
       46       46             %INCLUDE Z8A_DEFC;
       47      114             %INCLUDE X8A_COM_MACS;
       48      218             %INCLUDE Z8A_NAMES;
       49     2018             %INCLUDE Z8A_ETT;
       50     2319             %INCLUDE Z8A_LTS;
       51     4396             %INCLUDE Z8H_RAT;
       52     4487
       53     4488    1        DCL Z8HU$POOL ENTRY(1);
       54     4489    1        DCL Z8HU$POOL_PRIME ENTRY(1);
       55     4490
       56     4491    1        DCL PRIME$ PTR;
       57     4492    1        DCL NEXT$ PTR;
       58     4493    1        DCL I SBIN WORD;
       59     4494    1        DCL FOUND_ONE BOOLEAN;
       60     4495
       61     4496
       62     4497    1            MIN_COST = BITBIN('777777777777'O);
       63     4498    1            REGISTER = LO;
       64     4499    1            FOUND_ONE = FALSE;
       65     4500    2            DO I = HI DOWNTO LO;
       66     4501    2              IF RAT.CLASS(I) = %DEMAND THEN
       67     4502    3                DO;
       68     4503    3                  IF RAT.B.FAVORED(I) OR RAT.PRIMES(I) = ADDR(NIL) THEN
       69     4504    4                    DO;
       70     4505    4                      REGISTER = I;
       71     4506    4                      RETURN;
       72     4507    4                    END;
       73     4508
       74     4509    3                  IF RAT.COUNT(I) < MIN_COST AND
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:3    
       75     4510    3                     RAT.AWAITING(I) <= 0 THEN
       76     4511    4                    DO;
       77     4512    4                      MIN_COST = RAT.COUNT(I);
       78     4513    4                      REGISTER = I;
       79     4514    4                      FOUND_ONE = TRUE;
       80     4515    4                    END;
       81     4516    3                END;
       82     4517    2            END;
       83     4518    1            IF NOT FOUND_ONE THEN
       84     4519    2              DO;
       85     4520    2                IF LO >= %PR0 THEN
       86     4521    3                  DO;
       87     4522    4                    DO I = HI DOWNTO LO;
       88     4523    4                      IF RAT.COUNT(I) < MIN_COST AND
       89     4524    4                         RAT.CLASS(I) = %DEMAND AND
       90     4525    4                         (RAT.PRIMES(I) -> PRIME.TRIAD -> ETT.ID = %ESC OR
       91     4526    4                          RAT.PRIMES(I) -> PRIME.TRIAD -> ETT.ID = %ARGP) THEN
       92     4527    5                        DO;
       93     4528    5                          MIN_COST = RAT.COUNT(I);
       94     4529    5                          REGISTER = I;
       95     4530    5                          FOUND_ONE = TRUE;
       96     4531    5                        END;
       97     4532    4                    END;
       98     4533    3                    IF FOUND_ONE THEN
       99     4534    4                      DO;
      100     4535    4                        RAT.AWAITING(REGISTER) = 0;
      101     4536    4                        RAT.COUNT(REGISTER) = 0;
      102     4537    4                        PRIME$ = RAT.PRIMES(REGISTER);
      103     4538    5                        DO UNTIL PRIME$ = ADDR(NIL);
      104     4539                               /* More than 1 iteration unlikely */
      105     4540    5                          NEXT$ = PRIME$ -> PRIME.NEXT;
      106     4541    5                          CALL Z8HU$POOL_PRIME( PRIME$ -> PRIME.TRIAD );
      107     4542    5                          CALL Z8HU$POOL( PRIME$ -> PRIME.TRIAD );
      108     4543    5                          PRIME$ = NEXT$;
      109     4544    5                        END;
      110     4545    4                        RAT.PRIMES(REGISTER) = ADDR(NIL);
      111     4546    4                        RETURN;
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:4    
      112     4547    4                      END;
      113     4548    3                  END; /* LO >= %PR0 */
      114     4549    2                ALTRETURN; /* No PRs available */
      115     4550    2              END; /* NOT FOUND_ONE */
      116     4551
      117     4552    1   END Z8HG$CHOOSE_REGISTER;
      118     4553        %EOD;

PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:5    
--  Include file information  --

   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$CHOOSE_REGISTER.

   Procedure Z8HG$CHOOSE_REGISTER requires 133 words for executable code.
   Procedure Z8HG$CHOOSE_REGISTER requires 18 words of local(AUTO) storage.

PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:6    

 Object Unit name= Z8HG$CHOOSE_REGISTER                       File name= Z8HG.:Z8A6TOU
 UTS= AUG 09 '97 13:18:08.56 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  ETT$
    2  LblCom even  none     1      1  HEAD_ETT$
    3  LblCom even  none   512   1000  ETT_BUCKETS
    4  LblCom even  none     5      5  ETT_
    5  LblCom even  none     1      1  LTS$
    6  LblCom even  none     5      5  LTS_
    7  LblCom even  none   112    160  RAT
    8  RoData even  UTS      1      1  Z8HG$CHOOSE_REGISTER
    9   Proc  even  none   133    205  Z8HG$CHOOSE_REGISTER
   10  RoData even  none     2      2  Z8HG$CHOOSE_REGISTER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     9      0   yes    yes     yes      Std        3  Z8HG$CHOOSE_REGISTER

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 Z8HU$POOL_PRIME
         yes           Std       1 Z8HU$POOL
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:7    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    LTS_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:8    


        1        1        /*M* Z8HG -- Register Manangement routines                          */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        Z8HG$CHOOSE_REGISTER:PROC(LO,HI,REGISTER) ALTRET;

      7  9 000000   000000 700200 xent  Z8HG$CHOOSE* TSX0  ! X66_AUTO_3
         9 000001   000022 000003                    ZERO    18,3

        8        8        /*P*
        9        9               NAME: Z8HG$CHOOSE_REGISTER
       10       10            PURPOSE: Selects the most eligible register from a register class.
       11       11
       12       12        */
       13       13        /*F*
       14       14
       15       15               NAME: PICK_REGISTER
       16       16            PURPOSE: Selects the most eligible register from a register class.
       17       17               CALL: CALL Z8HG$CHOOSE_REGISTER(=LO,=HI,REGISTER=);
       18       18              INPUT: LO
       19       19                       Lower bounds of register class.
       20       20                     HI
       21       21                       Upper bounds of register class.
       22       22                       Triad above current triad (the one requesting the
       23       23                       register) has given us a hint as to which register
       24       24                       it would be able to generate the best code with.
       25       25                     REGISTER
       26       26                       Chosen register.
       27       27               DATA: Register classes::
       28       28
       29       29                        AR                XR                PR
       30       30                    _________          _________        _________
       31       31                    %ARA-%ARQ          %XR0-%XR7        %PR0-%PR7
       32       32
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:9    
       33       33        DESCRIPTION: Chosen register doesn't have to be unused.  A "favored"
       34       34                     register is ideal for use, because this is the last reference
       35       35                     to that register. Refer to action FAVOR
       36       36                     for more info on selection of favored registers.
       37       37
       38       38         */
       39       39
       40       40    1        DCL LO SBIN WORD;
       41       41    1        DCL HI SBIN WORD;
       42       42    1        DCL REGISTER SBIN WORD;
       43       43    1        DCL MIN_COST UBIN WORD;
       44       44
       45       45             %EQU PHASE = 4;
       46       46             %INCLUDE Z8A_DEFC;
       47      114             %INCLUDE X8A_COM_MACS;
       48      218             %INCLUDE Z8A_NAMES;
       49     2018             %INCLUDE Z8A_ETT;
       50     2319             %INCLUDE Z8A_LTS;
       51     4396             %INCLUDE Z8H_RAT;
       52     4487
       53     4488    1        DCL Z8HU$POOL ENTRY(1);
       54     4489    1        DCL Z8HU$POOL_PRIME ENTRY(1);
       55     4490
       56     4491    1        DCL PRIME$ PTR;
       57     4492    1        DCL NEXT$ PTR;
       58     4493    1        DCL I SBIN WORD;
       59     4494    1        DCL FOUND_ONE BOOLEAN;
       60     4495
       61     4496
       62     4497    1            MIN_COST = BITBIN('777777777777'O);

   4497  9 000002   000000 235000 8                  LDA     0
         9 000003   200006 755100                    STA     MIN_COST,,AUTO

       63     4498    1            REGISTER = LO;

   4498  9 000004   200003 470500                    LDP0    @LO,,AUTO
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:10   
         9 000005   200005 471500                    LDP1    @REGISTER,,AUTO
         9 000006   000000 235100                    LDA     0,,PR0
         9 000007   100000 755100                    STA     0,,PR1

       64     4499    1            FOUND_ONE = FALSE;

   4499  9 000010   200016 450100                    STZ     FOUND_ONE,,AUTO

       65     4500    2            DO I = HI DOWNTO LO;

   4500  9 000011   200004 473500                    LDP3    @HI,,AUTO
         9 000012   300000 235100                    LDA     0,,PR3
         9 000013   200015 755100                    STA     I,,AUTO
         9 000014   000053 710000 9                  TRA     s:4517+2

       66     4501    2              IF RAT.CLASS(I) = %DEMAND THEN

   4501  9 000015   200015 235100                    LDA     I,,AUTO
         9 000016   000002 735000                    ALS     2
         9 000017   000003 235005 7                  LDA     RAT+3,AL
         9 000020   000051 601000 9                  TNZ     s:4517

       67     4502    3                DO;

       68     4503    3                  IF RAT.B.FAVORED(I) OR RAT.PRIMES(I) = ADDR(NIL) THEN

   4503  9 000021   200015 235100                    LDA     I,,AUTO
         9 000022   000002 735000                    ALS     2
         9 000023   000001 236005 7                  LDQ     RAT+1,AL
         9 000024   100000 316003                    CANQ    32768,DU
         9 000025   000031 601000 9                  TNZ     s:4505
         9 000026   000000 236005 7                  LDQ     RAT,AL
         9 000027   000000 116000 10                 CMPQ    0
         9 000030   000035 601000 9                  TNZ     s:4509

       69     4504    4                    DO;

PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:11   
       70     4505    4                      REGISTER = I;

   4505  9 000031   200005 470500                    LDP0    @REGISTER,,AUTO
         9 000032   200015 236100                    LDQ     I,,AUTO
         9 000033   000000 756100                    STQ     0,,PR0

       71     4506    4                      RETURN;

   4506  9 000034   000000 702200 xent               TSX2  ! X66_ARET

       72     4507    4                    END;
       73     4508
       74     4509    3                  IF RAT.COUNT(I) < MIN_COST AND

   4509  9 000035   000002 236005 7                  LDQ     RAT+2,AL
         9 000036   000041 604000 9                  TMI     s:4509+4
         9 000037   200006 116100                    CMPQ    MIN_COST,,AUTO
         9 000040   000051 603000 9                  TRC     s:4517
         9 000041   000001 720005 7                  LXL0    RAT+1,AL
         9 000042   000051 605400 9                  TPNZ    s:4517

       75     4510    3                     RAT.AWAITING(I) <= 0 THEN
       76     4511    4                    DO;

       77     4512    4                      MIN_COST = RAT.COUNT(I);

   4512  9 000043   200006 756100                    STQ     MIN_COST,,AUTO

       78     4513    4                      REGISTER = I;

   4513  9 000044   200005 470500                    LDP0    @REGISTER,,AUTO
         9 000045   200015 235100                    LDA     I,,AUTO
         9 000046   000000 755100                    STA     0,,PR0

       79     4514    4                      FOUND_ONE = TRUE;

   4514  9 000047   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:12   
         9 000050   200016 756100                    STQ     FOUND_ONE,,AUTO

       80     4515    4                    END;

       81     4516    3                END;

       82     4517    2            END;

   4517  9 000051   000001 336007                    LCQ     1,DL
         9 000052   200015 056100                    ASQ     I,,AUTO
         9 000053   200003 470500                    LDP0    @LO,,AUTO
         9 000054   200015 236100                    LDQ     I,,AUTO
         9 000055   000000 116100                    CMPQ    0,,PR0
         9 000056   000015 605000 9                  TPL     s:4501

       83     4518    1            IF NOT FOUND_ONE THEN

   4518  9 000057   200016 234100                    SZN     FOUND_ONE,,AUTO
         9 000060   000204 604000 9                  TMI     s:4552

       84     4519    2              DO;

       85     4520    2                IF LO >= %PR0 THEN

   4520  9 000061   000000 235100                    LDA     0,,PR0
         9 000062   000024 115007                    CMPA    20,DL
         9 000063   000203 604000 9                  TMI     s:4549

       86     4521    3                  DO;

       87     4522    4                    DO I = HI DOWNTO LO;

   4522  9 000064   200004 471500                    LDP1    @HI,,AUTO
         9 000065   100000 235100                    LDA     0,,PR1
         9 000066   200015 755100                    STA     I,,AUTO
         9 000067   000122 710000 9                  TRA     s:4532+2

PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:13   
       88     4523    4                      IF RAT.COUNT(I) < MIN_COST AND

   4523  9 000070   200015 235100                    LDA     I,,AUTO
         9 000071   000002 735000                    ALS     2
         9 000072   000002 236005 7                  LDQ     RAT+2,AL
         9 000073   000076 604000 9                  TMI     s:4523+6
         9 000074   200006 116100                    CMPQ    MIN_COST,,AUTO
         9 000075   000120 603000 9                  TRC     s:4532
         9 000076   000003 235005 7                  LDA     RAT+3,AL
         9 000077   000120 601000 9                  TNZ     s:4532
         9 000100   200015 235100                    LDA     I,,AUTO
         9 000101   000002 735000                    ALS     2
         9 000102   000000 470405 7                  LDP0    RAT,AL
         9 000103   000001 471500                    LDP1    1,,PR0
         9 000104   100000 220100                    LDX0    0,,PR1
         9 000105   000017 100003                    CMPX0   15,DU
         9 000106   000111 600000 9                  TZE     s:4528
         9 000107   000016 100003                    CMPX0   14,DU
         9 000110   000120 601000 9                  TNZ     s:4532

       89     4524    4                         RAT.CLASS(I) = %DEMAND AND
       90     4525    4                         (RAT.PRIMES(I) -> PRIME.TRIAD -> ETT.ID = %ESC OR
       91     4526    4                          RAT.PRIMES(I) -> PRIME.TRIAD -> ETT.ID = %ARGP) THEN
       92     4527    5                        DO;

       93     4528    5                          MIN_COST = RAT.COUNT(I);

   4528  9 000111   000002 235005 7                  LDA     RAT+2,AL
         9 000112   200006 755100                    STA     MIN_COST,,AUTO

       94     4529    5                          REGISTER = I;

   4529  9 000113   200005 470500                    LDP0    @REGISTER,,AUTO
         9 000114   200015 236100                    LDQ     I,,AUTO
         9 000115   000000 756100                    STQ     0,,PR0

       95     4530    5                          FOUND_ONE = TRUE;
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:14   

   4530  9 000116   400000 236003                    LDQ     -131072,DU
         9 000117   200016 756100                    STQ     FOUND_ONE,,AUTO

       96     4531    5                        END;

       97     4532    4                    END;

   4532  9 000120   000001 336007                    LCQ     1,DL
         9 000121   200015 056100                    ASQ     I,,AUTO
         9 000122   200003 470500                    LDP0    @LO,,AUTO
         9 000123   200015 236100                    LDQ     I,,AUTO
         9 000124   000000 116100                    CMPQ    0,,PR0
         9 000125   000070 605000 9                  TPL     s:4523

       98     4533    3                    IF FOUND_ONE THEN

   4533  9 000126   200016 234100                    SZN     FOUND_ONE,,AUTO
         9 000127   000203 605000 9                  TPL     s:4549

       99     4534    4                      DO;

      100     4535    4                        RAT.AWAITING(REGISTER) = 0;

   4535  9 000130   200005 471500                    LDP1    @REGISTER,,AUTO
         9 000131   100000 235100                    LDA     0,,PR1
         9 000132   000001 735000                    ALS     1
         9 000133   000001 735000                    ALS     1
         9 000134   000000 220003                    LDX0    0,DU
         9 000135   000001 440005 7                  SXL0    RAT+1,AL

      101     4536    4                        RAT.COUNT(REGISTER) = 0;

   4536  9 000136   100000 235100                    LDA     0,,PR1
         9 000137   000001 735000                    ALS     1
         9 000140   000001 735000                    ALS     1
         9 000141   000002 450005 7                  STZ     RAT+2,AL
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:15   

      102     4537    4                        PRIME$ = RAT.PRIMES(REGISTER);

   4537  9 000142   100000 235100                    LDA     0,,PR1
         9 000143   000001 735000                    ALS     1
         9 000144   000001 735000                    ALS     1
         9 000145   000000 236005 7                  LDQ     RAT,AL
         9 000146   200013 756100                    STQ     PRIME$,,AUTO

      103     4538    5                        DO UNTIL PRIME$ = ADDR(NIL);

      104     4539                               /* More than 1 iteration unlikely */
      105     4540    5                          NEXT$ = PRIME$ -> PRIME.NEXT;

   4540  9 000147   200013 470500                    LDP0    PRIME$,,AUTO
         9 000150   000003 236100                    LDQ     3,,PR0
         9 000151   200014 756100                    STQ     NEXT$,,AUTO

      106     4541    5                          CALL Z8HU$POOL_PRIME( PRIME$ -> PRIME.TRIAD );

   4541  9 000152   200013 236100                    LDQ     PRIME$,,AUTO
         9 000153   000001 036003                    ADLQ    1,DU
         9 000154   200020 756100                    STQ     FOUND_ONE+2,,AUTO
         9 000155   200020 630500                    EPPR0   FOUND_ONE+2,,AUTO
         9 000156   000001 631400 10                 EPPR1   1
         9 000157   000000 701000 xent               TSX1    Z8HU$POOL_PRIME
         9 000160   000000 011000                    NOP     0

      107     4542    5                          CALL Z8HU$POOL( PRIME$ -> PRIME.TRIAD );

   4542  9 000161   200013 236100                    LDQ     PRIME$,,AUTO
         9 000162   000001 036003                    ADLQ    1,DU
         9 000163   200020 756100                    STQ     FOUND_ONE+2,,AUTO
         9 000164   200020 630500                    EPPR0   FOUND_ONE+2,,AUTO
         9 000165   000001 631400 10                 EPPR1   1
         9 000166   000000 701000 xent               TSX1    Z8HU$POOL
         9 000167   000000 011000                    NOP     0
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:16   

      108     4543    5                          PRIME$ = NEXT$;

   4543  9 000170   200014 236100                    LDQ     NEXT$,,AUTO
         9 000171   200013 756100                    STQ     PRIME$,,AUTO

      109     4544    5                        END;

   4544  9 000172   000000 116000 10                 CMPQ    0
         9 000173   000147 601000 9                  TNZ     s:4540

      110     4545    4                        RAT.PRIMES(REGISTER) = ADDR(NIL);

   4545  9 000174   200005 470500                    LDP0    @REGISTER,,AUTO
         9 000175   000000 235100                    LDA     0,,PR0
         9 000176   000001 735000                    ALS     1
         9 000177   000001 735000                    ALS     1
         9 000200   000000 236000 10                 LDQ     0
         9 000201   000000 756005 7                  STQ     RAT,AL

      111     4546    4                        RETURN;

   4546  9 000202   000000 702200 xent               TSX2  ! X66_ARET

      112     4547    4                      END;
      113     4548    3                  END; /* LO >= %PR0 */
      114     4549    2                ALTRETURN; /* No PRs available */

   4549  9 000203   000000 702200 xent               TSX2  ! X66_AALT

      115     4550    2              END; /* NOT FOUND_ONE */
      116     4551
      117     4552    1   END Z8HG$CHOOSE_REGISTER;

   4552  9 000204   000000 702200 xent               TSX2  ! X66_ARET
      118     4553        %EOD;

PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:17   
--  Include file information  --

   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$CHOOSE_REGISTER.
PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:18   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 002 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 003 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 004 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:19   
  ****  Section 005 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 006 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_

  ****  Section 007 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 RAT(0:27)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @HI                        3-0-0/w PTR         r     1 @LO
     5-0-0/w PTR         r     1 @REGISTER                 12-0-0/b BIT               1 AORQ
    16-0-0/b BIT         r     1 FOUND_ONE                 *0-0-0/w SBIN        r     1 HI
    15-0-0/w SBIN        r     1 I                         11-0-0/w UBIN              1 LAST_FREED
    10-0-0/w UBIN              1 LAST_USED                 *0-0-0/w SBIN        r     1 LO
     6-0-0/w UBIN        r     1 MIN_COST                  14-0-0/w PTR         r     1 NEXT$
    13-0-0/w PTR         r     1 PRIME$                     7-0-0/w UBIN              1 REGID
    *0-0-0/w SBIN        r     1 REGISTER

  ****  SYMREF variables  ****

PL6.E3A0      #001=Z8HG$CHOOSE_REGISTER File=Z8HG.:Z8A6TSI                       SAT 08/09/97 13:18 Page:20   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)         1 ALTER_LTS                  0-0-0/w STRC(3672)        1 ALT_KEY
     0-0-0/w STRC(36864)       1 ARGLIST                    0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS
     0-0-0/w STRC(288)         1 BASE_LTS                   0-0-0/w STRC(144)         1 BT
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(72)          1 CONT                       0-0-0/w STRC(540)         1 CONTROL_NAME_LTS
     0-0-0/w STRC(1872)        1 COPY_FILE                  0-0-0/w STRC(108)         1 DEPENDING_SIZE
     0-0-0/w STRC(5472)        1 DIMS                       0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(73836)       1 EVALUATE
     0-0-0/w STRC(1692)        1 FILE_LTS                   0-0-0/w STRC(108)         1 INDEXES
     0-0-0/w STRC(360)         1 INIT_LTS                   0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN
     0-0-0/w STRC(144)         1 KEY                        0-0-0/w STRC(36864)       1 LCNST
     0-0-0/w STRC(72)          1 LONG                       0-0-0/w STRC              1 LTS
     0-0-0/w STRC(360)         1 LTSS                       0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY
     0-0-0/w STRC(144)         1 NEL                        0-0-0/w STRC(216)         1 OPEN_LTS
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(144)   r     1 PRIME
     0-0-0/w STRC(900)         1 PROC_SUPP                  0-0-0/w STRC(216)         1 REF
     0-0-0/w STRC(108)         1 RENAMES                    0-0-0/w STRC(720)         1 REPORT_01_LTS
     0-0-0/w STRC(432)         1 REPORT_ELEM_LTS            0-0-0/w STRC(252)         1 REPORT_GRP_LTS
     0-0-0/w STRC(1332)        1 REPORT_LTS                 0-0-0/w STRC(144)         1 RVA_LTS
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(252)         1 SUM_LTS
     0-0-0/d STRC(612)         1 USE                        0-0-0/w STRC(252)         1 USE_SUPP


   Procedure Z8HG$CHOOSE_REGISTER requires 133 words for executable code.
   Procedure Z8HG$CHOOSE_REGISTER requires 18 words of local(AUTO) storage.

PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:21   
      119        1        /*T***********************************************************/
      120        2        /*T*                                                         */
      121        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      122        4        /*T*                                                         */
      123        5        /*T***********************************************************/
      124        6        Z8HG$FREE_REGISTER:PROC(REGISTER);
      125        7        /*P*
      126        8               NAME: Z8HG$FREE_REGISTER
      127        9            PURPOSE: Remove register association from one or more triads.
      128       10
      129       11        */
      130       12        /*F*
      131       13
      132       14               NAME: Z8HG$FREE_REGISTER
      133       15            PURPOSE: Remove register association from one or more triads.
      134       16               CALL: CALL Z8HG$FREE_REGISTER(=REGISTER);
      135       17              INPUT: REGISTER
      136       18                       Register to be freed.
      137       19        DESCRIPTION: If triad is going to be referenced again, contents of
      138       20                     the register must be contained in a temporary area
      139       21                     (index register, or temp storage. Note: Triad may
      140       22                     already storage contained).  The triad must then be
      141       23                     modified either to reflect its new index register, or
      142       24                     storage containment.  PRIME items must be pooled,
      143       25                     and the RAT item for the register wiped clean.
      144       26
      145       27        */
      146       28
      147       29    1        DCL REGISTER UBIN WORD;
      148       30    1        DCL PTR1$ PTR;
      149       31    1        DCL PTR2$ PTR;
      150       32    1        DCL BASED$PTR$ PTR BASED;
      151       33
      152       34             %EQU PHASE = 4;
      153       35             %INCLUDE Z8A_DEFC;
      154      103             %INCLUDE Z8A_SUPP_MAC;
      155     2503             %INCLUDE Z8H_RAT;
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:22   
      156     2594             %INCLUDE Z9A_FLAGS;
      157     2608             %INCLUDE Z8A_LTS;
      158     4685             %INCLUDE Z8A_ETT;
      159     4986             %INCLUDE Z8A_ST;
      160     8645             %INCLUDE Z8H_SUPPORT;
      161     9093
      162     9094    1        DCL Z8HG$SAVE_MAYBE ENTRY(1) ALTRET;
      163     9095    1        DCL Z8HI$BURST      ENTRY(2);
      164     9096    1        DCL Z8HU$POOL ENTRY(1);
      165     9097    1        DCL Z8HU$POOL_PRIME ENTRY(1);
      166     9098
      167     9099    1        DCL P$ PTR;
      168     9100    1        DCL NODE$ PTR;
      169     9101        %EJECT;
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:23   
      170     9102    1        IF RAT.PRIMES(REGISTER) ~= ADDR(NIL) AND
      171     9103    1           NOT RAT.B.FAVORED(REGISTER) THEN
      172     9104    1          IF RAT.CLASS(REGISTER) ~= %GLOBAL THEN
      173     9105    2            DO;
      174     9106    2              PTR1$ = RAT.PRIMES(REGISTER);
      175     9107
      176     9108    3              DO UNTIL(PTR1$ = ADDR(NIL));
      177     9109    3                CALL Z8HG$SAVE_MAYBE(PTR1$ -> PRIME.TRIAD)
      178     9110    3                  WHENRETURN
      179     9111    4                    DO;
      180     9112    4                      PTR1$ = PTR1$ -> PRIME.NEXT;
      181     9113    4                    END;
      182     9114    3                  WHENALTRETURN
      183     9115    4                    DO;
      184     9116    4                      PTR1$ = ADDR(NIL);
      185     9117    4                    END;
      186     9118
      187     9119    3              END /* UNTIL */;
      188     9120
      189     9121    2              PTR1$ = RAT.PRIMES(REGISTER);
      190     9122
      191     9123    3              DO WHILE( PTR1$ ~= ADDR(NIL) );
      192     9124    3                PTR2$ = PTR1$ -> PRIME.NEXT;
      193     9125
      194     9126    3                P$ = PTR1$ -> PRIME.TRIAD;
      195     9127    3                CALL Z8HU$POOL_PRIME(P$);
      196     9128
      197     9129    4                DO CASE(REGISTER);
      198     9130    4                  CASE(%PR0,%PR1,%PR2,%PR3,%PR4,%PR5,%PR6,%PR7);
      199     9131    4                    IF P$ -> ETT.COUNT > 0 AND
      200     9132    4                       P$ -> ETT.ID ~= %ARGP AND
      201     9133    4                       P$ -> ETT.ID ~= %ESC AND
      202     9134    4                       P$ -> ETT.REF$ ~= ADDR(NIL) THEN
      203     9135    5                      DO;
      204     9136    5                        P$ -> ETT.STATE = %REF_T;
      205     9137
      206     9138    5                        IF P$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP AND
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:24   
      207     9139    5                          P$ -> ETT.REF$ -> REF.ST$ -> TEMP.REFERENCES = 0 THEN
      208     9140    5                          CALL Z8HU$POOL(P$);
      209     9141    5                      END;
      210     9142    4                    ELSE
      211     9143    4                       CALL Z8HU$POOL(P$);
      212     9144    4                END;
      213     9145
      214     9146    3                PTR1$ = PTR2$;
      215     9147    3              END;
      216     9148    2            END /* Not %GLOBAL */;
      217     9149    1          ELSE
      218     9150    2            DO /* %GLOBAL */;
      219     9151    2              PTR1$ = RAT.PRIMES(REGISTER);
      220     9152    2              PTR2$ = ADDR(RAT.PRIMES(REGISTER));
      221     9153    3              DO UNTIL(PTR1$ = ADDR(NIL));
      222     9154    3                P$ = PTR1$ -> PRIME.TRIAD;
      223     9155    3                PTR1$ = PTR1$ -> PRIME.NEXT;
      224     9156    3                IF P$ -> ETT.ID = %ARGP AND
      225     9157    3                   NOT P$ -> ETT.B.OPT_SEARCH AND
      226     9158    3                   P$ -> ETT.ESCINF.ARG# + 2 >
      227     9159    3                       P$ -> ETT.LOP -> SCALAR.PROC$ -> PROC_.PROC_DEF$ ->
      228     9160    3                       SYMDEF_.ARGLIST$ -> ARGLIST.N THEN
      229     9161    4                  DO;
      230     9162                         /* One definition is address of based identifier;
      231     9163                            free that definition */
      232     9164    4                    CALL Z8HU$POOL_PRIME(P$);
      233     9165    4                    CALL Z8HU$POOL(P$);
      234     9166    4                    PTR2$ -> BASED$PTR$ = PTR1$;
      235     9167    4                  END;
      236     9168    3                ELSE
      237     9169    3                  PTR2$ = ADDR(PTR2$ -> PRIME.NEXT);
      238     9170    3              END /* UNTIL */;
      239     9171    2            END;
      240     9172    1   END Z8HG$FREE_REGISTER;
      241     9173        %EOD;

PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:25   
--  Include file information  --

   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$FREE_REGISTER.

   Procedure Z8HG$FREE_REGISTER requires 170 words for executable code.
   Procedure Z8HG$FREE_REGISTER requires 14 words of local(AUTO) storage.

PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:26   

 Object Unit name= Z8HG$FREE_REGISTER                         File name= Z8HG.:Z8A6TOU
 UTS= AUG 09 '97 13:18:48.92 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none   112    160  RAT
    2  LblCom even  none     1      1  LTS$
    3  LblCom even  none     5      5  LTS_
    4  LblCom even  none     1      1  ETT$
    5  LblCom even  none     1      1  HEAD_ETT$
    6  LblCom even  none   512   1000  ETT_BUCKETS
    7  LblCom even  none     5      5  ETT_
    8  LblCom even  none     1      1  ST$
    9  LblCom even  none     5      5  ST_
   10   Proc  even  none   170    252  Z8HG$FREE_REGISTER
   11  RoData even  none     3      3  Z8HG$FREE_REGISTER

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes            yes      Std        1  Z8HG$FREE_REGISTER
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:27   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 Z8HG$SAVE_MAYBE
         yes           Std       1 Z8HU$POOL_PRIME
         yes           Std       1 Z8HU$POOL
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    LTS_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:28   


      119        1        /*T***********************************************************/
      120        2        /*T*                                                         */
      121        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      122        4        /*T*                                                         */
      123        5        /*T***********************************************************/
      124        6        Z8HG$FREE_REGISTER:PROC(REGISTER);

      6 10 000000   000000 700200 xent  Z8HG$FREE_R* TSX0  ! X66_AUTO_1
        10 000001   000016 000001                    ZERO    14,1

      125        7        /*P*
      126        8               NAME: Z8HG$FREE_REGISTER
      127        9            PURPOSE: Remove register association from one or more triads.
      128       10
      129       11        */
      130       12        /*F*
      131       13
      132       14               NAME: Z8HG$FREE_REGISTER
      133       15            PURPOSE: Remove register association from one or more triads.
      134       16               CALL: CALL Z8HG$FREE_REGISTER(=REGISTER);
      135       17              INPUT: REGISTER
      136       18                       Register to be freed.
      137       19        DESCRIPTION: If triad is going to be referenced again, contents of
      138       20                     the register must be contained in a temporary area
      139       21                     (index register, or temp storage. Note: Triad may
      140       22                     already storage contained).  The triad must then be
      141       23                     modified either to reflect its new index register, or
      142       24                     storage containment.  PRIME items must be pooled,
      143       25                     and the RAT item for the register wiped clean.
      144       26
      145       27        */
      146       28
      147       29    1        DCL REGISTER UBIN WORD;
      148       30    1        DCL PTR1$ PTR;
      149       31    1        DCL PTR2$ PTR;
      150       32    1        DCL BASED$PTR$ PTR BASED;
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:29   
      151       33
      152       34             %EQU PHASE = 4;
      153       35             %INCLUDE Z8A_DEFC;
      154      103             %INCLUDE Z8A_SUPP_MAC;
      155     2503             %INCLUDE Z8H_RAT;
      156     2594             %INCLUDE Z9A_FLAGS;
      157     2608             %INCLUDE Z8A_LTS;
      158     4685             %INCLUDE Z8A_ETT;
      159     4986             %INCLUDE Z8A_ST;
      160     8645             %INCLUDE Z8H_SUPPORT;
      161     9093
      162     9094    1        DCL Z8HG$SAVE_MAYBE ENTRY(1) ALTRET;
      163     9095    1        DCL Z8HI$BURST      ENTRY(2);
      164     9096    1        DCL Z8HU$POOL ENTRY(1);
      165     9097    1        DCL Z8HU$POOL_PRIME ENTRY(1);
      166     9098
      167     9099    1        DCL P$ PTR;
      168     9100    1        DCL NODE$ PTR;
      169     9101        %EJECT;
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:30   
      170     9102    1        IF RAT.PRIMES(REGISTER) ~= ADDR(NIL) AND

   9102 10 000002   200003 470500                    LDP0    @REGISTER,,AUTO
        10 000003   000000 235100                    LDA     0,,PR0
        10 000004   000001 735000                    ALS     1
        10 000005   000001 735000                    ALS     1
        10 000006   000000 236005 1                  LDQ     RAT,AL
        10 000007   000000 116000 11                 CMPQ    0
        10 000010   000251 600000 10                 TZE     s:9172
        10 000011   000000 235100                    LDA     0,,PR0
        10 000012   000001 735000                    ALS     1
        10 000013   000001 735000                    ALS     1
        10 000014   000001 236005 1                  LDQ     RAT+1,AL
        10 000015   100000 316003                    CANQ    32768,DU
        10 000016   000251 601000 10                 TNZ     s:9172

      171     9103    1           NOT RAT.B.FAVORED(REGISTER) THEN
      172     9104    1          IF RAT.CLASS(REGISTER) ~= %GLOBAL THEN

   9104 10 000017   000000 235100                    LDA     0,,PR0
        10 000020   000001 735000                    ALS     1
        10 000021   000001 735000                    ALS     1
        10 000022   000003 235005 1                  LDA     RAT+3,AL
        10 000023   000001 115007                    CMPA    1,DL
        10 000024   000160 600000 10                 TZE     s:9151

      173     9105    2            DO;

      174     9106    2              PTR1$ = RAT.PRIMES(REGISTER);

   9106 10 000025   000000 235100                    LDA     0,,PR0
        10 000026   000001 735000                    ALS     1
        10 000027   000001 735000                    ALS     1
        10 000030   000000 236005 1                  LDQ     RAT,AL
        10 000031   200004 756100                    STQ     PTR1$,,AUTO

      175     9107
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:31   
      176     9108    3              DO UNTIL(PTR1$ = ADDR(NIL));

      177     9109    3                CALL Z8HG$SAVE_MAYBE(PTR1$ -> PRIME.TRIAD)

   9109 10 000032   200004 236100                    LDQ     PTR1$,,AUTO
        10 000033   000001 036003                    ADLQ    1,DU
        10 000034   200014 756100                    STQ     NODE$+1,,AUTO
        10 000035   200014 630500                    EPPR0   NODE$+1,,AUTO
        10 000036   000001 631400 11                 EPPR1   1
        10 000037   000000 701000 xent               TSX1    Z8HG$SAVE_MAYBE
        10 000040   000045 702000 10                 TSX2    s:9116

      178     9110    3                  WHENRETURN
      179     9111    4                    DO;

      180     9112    4                      PTR1$ = PTR1$ -> PRIME.NEXT;

   9112 10 000041   200004 470500                    LDP0    PTR1$,,AUTO
        10 000042   000003 236100                    LDQ     3,,PR0
        10 000043   200004 756100                    STQ     PTR1$,,AUTO

      181     9113    4                    END;

   9113 10 000044   000047 710000 10                 TRA     s:9119

      182     9114    3                  WHENALTRETURN
      183     9115    4                    DO;

      184     9116    4                      PTR1$ = ADDR(NIL);

   9116 10 000045   000000 236000 11                 LDQ     0
        10 000046   200004 756100                    STQ     PTR1$,,AUTO

      185     9117    4                    END;

      186     9118
      187     9119    3              END /* UNTIL */;
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:32   

   9119 10 000047   000000 116000 11                 CMPQ    0
        10 000050   000032 601000 10                 TNZ     s:9109

      188     9120
      189     9121    2              PTR1$ = RAT.PRIMES(REGISTER);

   9121 10 000051   200003 470500                    LDP0    @REGISTER,,AUTO
        10 000052   000000 235100                    LDA     0,,PR0
        10 000053   000001 735000                    ALS     1
        10 000054   000001 735000                    ALS     1
        10 000055   000000 236005 1                  LDQ     RAT,AL
        10 000056   200004 756100                    STQ     PTR1$,,AUTO

      190     9122
      191     9123    3              DO WHILE( PTR1$ ~= ADDR(NIL) );

   9123 10 000057   000155 710000 10                 TRA     s:9147

      192     9124    3                PTR2$ = PTR1$ -> PRIME.NEXT;

   9124 10 000060   200004 470500                    LDP0    PTR1$,,AUTO
        10 000061   000003 236100                    LDQ     3,,PR0
        10 000062   200005 756100                    STQ     PTR2$,,AUTO

      193     9125
      194     9126    3                P$ = PTR1$ -> PRIME.TRIAD;

   9126 10 000063   000001 236100                    LDQ     1,,PR0
        10 000064   200012 756100                    STQ     P$,,AUTO

      195     9127    3                CALL Z8HU$POOL_PRIME(P$);

   9127 10 000065   200012 631500                    EPPR1   P$,,AUTO
        10 000066   200014 451500                    STP1    NODE$+1,,AUTO
        10 000067   200014 630500                    EPPR0   NODE$+1,,AUTO
        10 000070   000001 631400 11                 EPPR1   1
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:33   
        10 000071   000000 701000 xent               TSX1    Z8HU$POOL_PRIME
        10 000072   000000 011000                    NOP     0

      196     9128
      197     9129    4                DO CASE(REGISTER);

   9129 10 000073   200003 470500                    LDP0    @REGISTER,,AUTO
        10 000074   000000 235100                    LDA     0,,PR0
        10 000075   000024 135007                    SBLA    20,DL
        10 000076   000010 115007                    CMPA    8,DL
        10 000077   000101 602005 10                 TNC     s:9129+6,AL
        10 000100   000153 710000 10                 TRA     s:9146
        10 000101   000111 710000 10                 TRA     s:9131
        10 000102   000111 710000 10                 TRA     s:9131
        10 000103   000111 710000 10                 TRA     s:9131
        10 000104   000111 710000 10                 TRA     s:9131
        10 000105   000111 710000 10                 TRA     s:9131
        10 000106   000111 710000 10                 TRA     s:9131
        10 000107   000111 710000 10                 TRA     s:9131
        10 000110   000111 710000 10                 TRA     s:9131

      198     9130    4                  CASE(%PR0,%PR1,%PR2,%PR3,%PR4,%PR5,%PR6,%PR7);

      199     9131    4                    IF P$ -> ETT.COUNT > 0 AND

   9131 10 000111   200012 471500                    LDP1    P$,,AUTO
        10 000112   100000 720100                    LXL0    0,,PR1
        10 000113   000145 600000 10                 TZE     s:9143
        10 000114   100000 221100                    LDX1    0,,PR1
        10 000115   000016 101003                    CMPX1   14,DU
        10 000116   000145 600000 10                 TZE     s:9143
        10 000117   000017 101003                    CMPX1   15,DU
        10 000120   000145 600000 10                 TZE     s:9143
        10 000121   100003 236100                    LDQ     3,,PR1
        10 000122   000000 116000 11                 CMPQ    0
        10 000123   000145 600000 10                 TZE     s:9143

PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:34   
      200     9132    4                       P$ -> ETT.ID ~= %ARGP AND
      201     9133    4                       P$ -> ETT.ID ~= %ESC AND
      202     9134    4                       P$ -> ETT.REF$ ~= ADDR(NIL) THEN
      203     9135    5                      DO;

      204     9136    5                        P$ -> ETT.STATE = %REF_T;

   9136 10 000124   000004 222003                    LDX2    4,DU
        10 000125   100004 742100                    STX2    4,,PR1

      205     9137
      206     9138    5                        IF P$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP AND

   9138 10 000126   200012 471500                    LDP1    P$,,AUTO
        10 000127   100003 473500                    LDP3    3,,PR1
        10 000130   300005 474500                    LDP4    5,,PR3
        10 000131   400000 220100                    LDX0    0,,PR4
        10 000132   000760 100003                    CMPX0   496,DU
        10 000133   000153 601000 10                 TNZ     s:9146
        10 000134   400004 221100                    LDX1    4,,PR4
        10 000135   000153 601000 10                 TNZ     s:9146

      207     9139    5                          P$ -> ETT.REF$ -> REF.ST$ -> TEMP.REFERENCES = 0 THEN
      208     9140    5                          CALL Z8HU$POOL(P$);

   9140 10 000136   200012 635500                    EPPR5   P$,,AUTO
        10 000137   200014 455500                    STP5    NODE$+1,,AUTO
        10 000140   200014 630500                    EPPR0   NODE$+1,,AUTO
        10 000141   000001 631400 11                 EPPR1   1
        10 000142   000000 701000 xent               TSX1    Z8HU$POOL
        10 000143   000000 011000                    NOP     0

      209     9141    5                      END;

   9141 10 000144   000153 710000 10                 TRA     s:9146

      210     9142    4                    ELSE
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:35   
      211     9143    4                       CALL Z8HU$POOL(P$);

   9143 10 000145   200012 633500                    EPPR3   P$,,AUTO
        10 000146   200014 453500                    STP3    NODE$+1,,AUTO
        10 000147   200014 630500                    EPPR0   NODE$+1,,AUTO
        10 000150   000001 631400 11                 EPPR1   1
        10 000151   000000 701000 xent               TSX1    Z8HU$POOL
        10 000152   000000 011000                    NOP     0

      212     9144    4                END;

      213     9145
      214     9146    3                PTR1$ = PTR2$;

   9146 10 000153   200005 236100                    LDQ     PTR2$,,AUTO
        10 000154   200004 756100                    STQ     PTR1$,,AUTO

      215     9147    3              END;

   9147 10 000155   000000 116000 11                 CMPQ    0
        10 000156   000060 601000 10                 TNZ     s:9124

      216     9148    2            END /* Not %GLOBAL */;

   9148 10 000157   000251 710000 10                 TRA     s:9172

      217     9149    1          ELSE
      218     9150    2            DO /* %GLOBAL */;

      219     9151    2              PTR1$ = RAT.PRIMES(REGISTER);

   9151 10 000160   000000 235100                    LDA     0,,PR0
        10 000161   000001 735000                    ALS     1
        10 000162   000001 735000                    ALS     1
        10 000163   000000 236005 1                  LDQ     RAT,AL
        10 000164   200004 756100                    STQ     PTR1$,,AUTO

PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:36   
      220     9152    2              PTR2$ = ADDR(RAT.PRIMES(REGISTER));

   9152 10 000165   000000 235100                    LDA     0,,PR0
        10 000166   000001 735000                    ALS     1
        10 000167   000044 733000                    LRS     36
        10 000170   000023 736000                    QLS     19
        10 000171   000002 036000 11                 ADLQ    2
        10 000172   200005 756100                    STQ     PTR2$,,AUTO

      221     9153    3              DO UNTIL(PTR1$ = ADDR(NIL));

      222     9154    3                P$ = PTR1$ -> PRIME.TRIAD;

   9154 10 000173   200004 470500                    LDP0    PTR1$,,AUTO
        10 000174   000001 236100                    LDQ     1,,PR0
        10 000175   200012 756100                    STQ     P$,,AUTO

      223     9155    3                PTR1$ = PTR1$ -> PRIME.NEXT;

   9155 10 000176   000003 236100                    LDQ     3,,PR0
        10 000177   200004 756100                    STQ     PTR1$,,AUTO

      224     9156    3                IF P$ -> ETT.ID = %ARGP AND

   9156 10 000200   200012 470500                    LDP0    P$,,AUTO
        10 000201   000000 220100                    LDX0    0,,PR0
        10 000202   000016 100003                    CMPX0   14,DU
        10 000203   000243 601000 10                 TNZ     s:9169
        10 000204   000004 236100                    LDQ     4,,PR0
        10 000205   000020 316007                    CANQ    16,DL
        10 000206   000243 601000 10                 TNZ     s:9169
        10 000207   000001 471500                    LDP1    1,,PR0
        10 000210   100011 473500                    LDP3    9,,PR1
        10 000211   300006 474500                    LDP4    6,,PR3
        10 000212   400005 475500                    LDP5    5,,PR4
        10 000213   000002 236100                    LDQ     2,,PR0
        10 000214   000022 772000                    QRL     18
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:37   
        10 000215   000002 036007                    ADLQ    2,DL
        10 000216   200014 756100                    STQ     NODE$+1,,AUTO
        10 000217   500000 236100                    LDQ     0,,PR5
        10 000220   777777 376007                    ANQ     -1,DL
        10 000221   200014 116100                    CMPQ    NODE$+1,,AUTO
        10 000222   000243 605000 10                 TPL     s:9169

      225     9157    3                   NOT P$ -> ETT.B.OPT_SEARCH AND
      226     9158    3                   P$ -> ETT.ESCINF.ARG# + 2 >
      227     9159    3                       P$ -> ETT.LOP -> SCALAR.PROC$ -> PROC_.PROC_DEF$ ->
      228     9160    3                       SYMDEF_.ARGLIST$ -> ARGLIST.N THEN
      229     9161    4                  DO;

      230     9162                         /* One definition is address of based identifier;
      231     9163                            free that definition */
      232     9164    4                    CALL Z8HU$POOL_PRIME(P$);

   9164 10 000223   200012 631500                    EPPR1   P$,,AUTO
        10 000224   200014 451500                    STP1    NODE$+1,,AUTO
        10 000225   200014 630500                    EPPR0   NODE$+1,,AUTO
        10 000226   000001 631400 11                 EPPR1   1
        10 000227   000000 701000 xent               TSX1    Z8HU$POOL_PRIME
        10 000230   000000 011000                    NOP     0

      233     9165    4                    CALL Z8HU$POOL(P$);

   9165 10 000231   200012 630500                    EPPR0   P$,,AUTO
        10 000232   200014 450500                    STP0    NODE$+1,,AUTO
        10 000233   200014 630500                    EPPR0   NODE$+1,,AUTO
        10 000234   000001 631400 11                 EPPR1   1
        10 000235   000000 701000 xent               TSX1    Z8HU$POOL
        10 000236   000000 011000                    NOP     0

      234     9166    4                    PTR2$ -> BASED$PTR$ = PTR1$;

   9166 10 000237   200004 236100                    LDQ     PTR1$,,AUTO
        10 000240   200005 470500                    LDP0    PTR2$,,AUTO
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:38   
        10 000241   000000 756100                    STQ     0,,PR0

      235     9167    4                  END;

   9167 10 000242   000246 710000 10                 TRA     s:9170

      236     9168    3                ELSE
      237     9169    3                  PTR2$ = ADDR(PTR2$ -> PRIME.NEXT);

   9169 10 000243   200005 236100                    LDQ     PTR2$,,AUTO
        10 000244   000003 036003                    ADLQ    3,DU
        10 000245   200005 756100                    STQ     PTR2$,,AUTO

      238     9170    3              END /* UNTIL */;

   9170 10 000246   200004 236100                    LDQ     PTR1$,,AUTO
        10 000247   000000 116000 11                 CMPQ    0
        10 000250   000173 601000 10                 TNZ     s:9154

      239     9171    2            END;

      240     9172    1   END Z8HG$FREE_REGISTER;

   9172 10 000251   000000 702200 xent               TSX2  ! X66_ARET
      241     9173        %EOD;

PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:39   
--  Include file information  --

   Z8H_SUPPORT.:Z8A6TOU  is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$FREE_REGISTER.
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:40   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 RAT(0:27)

  ****  Section 002 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 003 LblCom LTS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 LTS_

  ****  Section 004 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:41   
  ****  Section 005 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 006 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 007 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

  ****  Section 008 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 009 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ST_

  ****  Auto variables  ****

PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:42   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @REGISTER                 11-0-0/b BIT               1 AORQ
    10-0-0/w UBIN              1 LAST_FREED                 7-0-0/w UBIN              1 LAST_USED
    13-0-0/w PTR               1 NODE$                     12-0-0/w PTR         r     1 P$
     4-0-0/w PTR         r     1 PTR1$                      5-0-0/w PTR         r     1 PTR2$
     6-0-0/w UBIN              1 REGID                     *0-0-0/w UBIN        r     1 REGISTER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)         1 ALPHABET                   0-0-0/w STRC(144)         1 ALTER_LTS
     0-0-0/w STRC(3672)        1 ALT_KEY                    0-0-0/w STRC(36864) r     1 ARGLIST
     0-0-0/w STRC(396)         1 ARRAY                      0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS
     0-0-0/w PTR         r     1 BASED$PTR$                 0-0-0/w STRC(288)         1 BASE_LTS
     0-0-0/w STRC(396)         1 BLOCK                      0-0-0/w STRC(144)         1 BT
     0-0-0/w STRC(396)         1 CD                         0-0-0/w STRC(288)         1 CD_LTS
     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(396)         1 CLASS
     0-0-0/w STRC(396)         1 CONDITION                  0-0-0/w STRC(396)         1 CONST
     0-0-0/w STRC(72)          1 CONT                       0-0-0/w STRC(540)         1 CONTROL_NAME_LTS
     0-0-0/w STRC(1872)        1 COPY_FILE                  0-0-0/w STRC(396)         1 DB
     0-0-0/w STRC(396)         1 DCB_                       0-0-0/w STRC(108)         1 DEPENDING_SIZE
     0-0-0/w STRC(5472)        1 DIMS                       0-0-0/w STRC(396)         1 DML_ITEM
     0-0-0/w STRC(216)         1 DML_REC                    0-0-0/w STRC(180)   r     1 ETT
     0-0-0/w STRC(73836)       1 EVALUATE                   0-0-0/w STRC(396)         1 FD
     0-0-0/w STRC(1692)        1 FILE_LTS                   0-0-0/w STRC(108)         1 INDEXES
     0-0-0/w STRC(360)         1 INIT_LTS                   0-0-0/w STRC(396)         1 INTDEF
PL6.E3A0      #002=Z8HG$FREE_REGISTER File=Z8HG.:Z8A6TSI                         SAT 08/09/97 13:18 Page:43   
     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN           0-0-0/w STRC(144)         1 KEY
     0-0-0/w STRC(396)         1 LABEL                      0-0-0/w STRC(36864)       1 LCNST
     0-0-0/w STRC(72)          1 LONG                       0-0-0/w STRC              1 LTS
     0-0-0/w STRC(360)         1 LTSS                       0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY
     0-0-0/w STRC(396)         1 MNEMONIC                   0-0-0/w STRC(144)         1 NEL
     0-0-0/w STRC(216)         1 OPEN_LTS                   0-0-0/w STRC(36864)       1 PAGE
     0-0-0/w STRC(396)         1 PARA                       0-0-0/w STRC(144)   r     1 PRIME
     0-0-0/w STRC(396)   r     1 PROC_                      0-0-0/w STRC(396)         1 PROC_DEF
     0-0-0/w STRC(900)         1 PROC_SUPP                  0-0-0/w STRC(396)         1 RD
     0-0-0/w STRC(216)   r     1 REF                        0-0-0/w STRC(108)         1 RENAMES
     0-0-0/w STRC(720)         1 REPORT_01_LTS              0-0-0/w STRC(432)         1 REPORT_ELEM_LTS
     0-0-0/w STRC(252)         1 REPORT_GRP_LTS             0-0-0/w STRC(1332)        1 REPORT_LTS
     0-0-0/w STRC(144)         1 RVA_LTS                    0-0-0/w STRC(396)   r     1 SCALAR
     0-0-0/w STRC(396)         1 SD                         0-0-0/w STRC(396)         1 SECTION
     0-0-0/w STRC(396)         1 SEGMENT                    0-0-0/w STRC(360)         1 SEGMENT_LTS
     0-0-0/w STRC(396)   r     1 ST                         0-0-0/w STRC(252)         1 SUM_LTS
     0-0-0/w STRC(396)         1 SWITCH                     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR
     0-0-0/w STRC(396)   r     1 SYMDEF_                    0-0-0/w STRC(396)         1 SYMREF_
     0-0-0/w STRC(396)   r     1 TEMP                       0-0-0/d STRC(612)         1 USE
     0-0-0/w STRC(252)         1 USE_SUPP                   0-0-0/w STRC(396)         1 VARIABLE


   Procedure Z8HG$FREE_REGISTER requires 170 words for executable code.
   Procedure Z8HG$FREE_REGISTER requires 14 words of local(AUTO) storage.

PL6.E3A0      #003=Z8HG$FREE_ALL_REGISTERS File=Z8HG.:Z8A6TSI                    SAT 08/09/97 13:20 Page:44   
      242        1        /*T***********************************************************/
      243        2        /*T*                                                         */
      244        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      245        4        /*T*                                                         */
      246        5        /*T***********************************************************/
      247        6        Z8HG$FREE_ALL_REGISTERS:PROC;
      248        7        /*P*
      249        8               NAME: Z8HG$FREE_ALL_REGISTERS
      250        9            PURPOSE: To free all registers! Of course!
      251       10
      252       11        */
      253       12        /*F*
      254       13
      255       14               NAME: Z8HG$FREE_ALL_REGISTERS
      256       15            PURPOSE: To free all registers.
      257       16               CALL: CALL Z8HG$FREE_ALL_REGISTERS;
      258       17        DESCRIPTION: Free all registers that are "free-able."  For example
      259       18                     GLOBAL registers cannot be freed.  This routine can
      260       19                     be called from definition of a referenced label.
      261       20
      262       21        */
      263       22
      264       23
      265       24    1        DCL Z8HG$FREE_REGISTER ENTRY(1);
      266       25    1        DCL I SBIN WORD;
      267       26
      268       27
      269       28             %EQU PHASE = 4;
      270       29             %INCLUDE Z8A_DEFC;
      271       97             %INCLUDE Z8H_RAT;
      272      188        %EJECT;
PL6.E3A0      #003=Z8HG$FREE_ALL_REGISTERS File=Z8HG.:Z8A6TSI                    SAT 08/09/97 13:20 Page:45   
      273      189    1        CALL Z8HG$FREE_REGISTER(%IND);
      274      190
      275      191    2        DO I = %ARA TO %AREAQ;
      276      192    2          CALL Z8HG$FREE_REGISTER(I);
      277      193    2        END;
      278      194
      279      195    2        DO I = %PR0 TO %PR7;
      280      196    2          CALL Z8HG$FREE_REGISTER(I);
      281      197    2        END;
      282      198
      283      199    1   END Z8HG$FREE_ALL_REGISTERS;
      284      200        %EOD;

PL6.E3A0      #003=Z8HG$FREE_ALL_REGISTERS File=Z8HG.:Z8A6TSI                    SAT 08/09/97 13:20 Page:46   
--  Include file information  --

   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$FREE_ALL_REGISTERS.

   Procedure Z8HG$FREE_ALL_REGISTERS requires 31 words for executable code.
   Procedure Z8HG$FREE_ALL_REGISTERS requires 10 words of local(AUTO) storage.

PL6.E3A0      #003=Z8HG$FREE_ALL_REGISTERS File=Z8HG.:Z8A6TSI                    SAT 08/09/97 13:20 Page:47   

 Object Unit name= Z8HG$FREE_ALL_REGISTERS                    File name= Z8HG.:Z8A6TOU
 UTS= AUG 09 '97 13:20:08.32 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none   112    160  RAT
    2   Proc  even  none    31     37  Z8HG$FREE_ALL_REGISTERS
    3  RoData even  none     3      3  Z8HG$FREE_ALL_REGISTERS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        0  Z8HG$FREE_ALL_REGISTERS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 Z8HG$FREE_REGISTER
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #003=Z8HG$FREE_ALL_REGISTERS File=Z8HG.:Z8A6TSI                    SAT 08/09/97 13:20 Page:48   


      242        1        /*T***********************************************************/
      243        2        /*T*                                                         */
      244        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      245        4        /*T*                                                         */
      246        5        /*T***********************************************************/
      247        6        Z8HG$FREE_ALL_REGISTERS:PROC;

      6  2 000000   000000 700200 xent  Z8HG$FREE_A* TSX0  ! X66_AUTO_0
         2 000001   000012 000000                    ZERO    10,0

      248        7        /*P*
      249        8               NAME: Z8HG$FREE_ALL_REGISTERS
      250        9            PURPOSE: To free all registers! Of course!
      251       10
      252       11        */
      253       12        /*F*
      254       13
      255       14               NAME: Z8HG$FREE_ALL_REGISTERS
      256       15            PURPOSE: To free all registers.
      257       16               CALL: CALL Z8HG$FREE_ALL_REGISTERS;
      258       17        DESCRIPTION: Free all registers that are "free-able."  For example
      259       18                     GLOBAL registers cannot be freed.  This routine can
      260       19                     be called from definition of a referenced label.
      261       20
      262       21        */
      263       22
      264       23
      265       24    1        DCL Z8HG$FREE_REGISTER ENTRY(1);
      266       25    1        DCL I SBIN WORD;
      267       26
      268       27
      269       28             %EQU PHASE = 4;
      270       29             %INCLUDE Z8A_DEFC;
      271       97             %INCLUDE Z8H_RAT;
      272      188        %EJECT;
PL6.E3A0      #003=Z8HG$FREE_ALL_REGISTERS File=Z8HG.:Z8A6TSI                    SAT 08/09/97 13:20 Page:49   
      273      189    1        CALL Z8HG$FREE_REGISTER(%IND);

    189  2 000002   000002 630400 3                  EPPR0   2
         2 000003   000000 631400 3                  EPPR1   0
         2 000004   000000 701000 xent               TSX1    Z8HG$FREE_REGISTER
         2 000005   000000 011000                    NOP     0

      274      190
      275      191    2        DO I = %ARA TO %AREAQ;

    191  2 000006   000005 235007                    LDA     5,DL
         2 000007   200003 755100                    STA     I,,AUTO

      276      192    2          CALL Z8HG$FREE_REGISTER(I);

    192  2 000010   200003 630500                    EPPR0   I,,AUTO
         2 000011   200010 450500                    STP0    AORQ+1,,AUTO
         2 000012   200010 630500                    EPPR0   AORQ+1,,AUTO
         2 000013   000000 631400 3                  EPPR1   0
         2 000014   000000 701000 xent               TSX1    Z8HG$FREE_REGISTER
         2 000015   000000 011000                    NOP     0

      277      193    2        END;

    193  2 000016   200003 054100                    AOS     I,,AUTO
         2 000017   200003 235100                    LDA     I,,AUTO
         2 000020   000022 115007                    CMPA    18,DL
         2 000021   000010 604400 2                  TMOZ    s:192

      278      194
      279      195    2        DO I = %PR0 TO %PR7;

    195  2 000022   000024 236007                    LDQ     20,DL
         2 000023   200003 756100                    STQ     I,,AUTO

      280      196    2          CALL Z8HG$FREE_REGISTER(I);

PL6.E3A0      #003=Z8HG$FREE_ALL_REGISTERS File=Z8HG.:Z8A6TSI                    SAT 08/09/97 13:20 Page:50   
    196  2 000024   200003 630500                    EPPR0   I,,AUTO
         2 000025   200010 450500                    STP0    AORQ+1,,AUTO
         2 000026   200010 630500                    EPPR0   AORQ+1,,AUTO
         2 000027   000000 631400 3                  EPPR1   0
         2 000030   000000 701000 xent               TSX1    Z8HG$FREE_REGISTER
         2 000031   000000 011000                    NOP     0

      281      197    2        END;

    197  2 000032   200003 054100                    AOS     I,,AUTO
         2 000033   200003 235100                    LDA     I,,AUTO
         2 000034   000033 115007                    CMPA    27,DL
         2 000035   000024 604400 2                  TMOZ    s:196

      282      198
      283      199    1   END Z8HG$FREE_ALL_REGISTERS;

    199  2 000036   000000 702200 xent               TSX2  ! X66_ARET
      284      200        %EOD;

PL6.E3A0      #003=Z8HG$FREE_ALL_REGISTERS File=Z8HG.:Z8A6TSI                    SAT 08/09/97 13:20 Page:51   
--  Include file information  --

   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$FREE_ALL_REGISTERS.
PL6.E3A0      #003=Z8HG$FREE_ALL_REGISTERS File=Z8HG.:Z8A6TSI                    SAT 08/09/97 13:20 Page:52   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)         1 RAT(0:27)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/b BIT               1 AORQ                       3-0-0/w SBIN        r     1 I
     6-0-0/w UBIN              1 LAST_FREED                 5-0-0/w UBIN              1 LAST_USED
     4-0-0/w UBIN              1 REGID

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(36864)       1 PAGE


   Procedure Z8HG$FREE_ALL_REGISTERS requires 31 words for executable code.
   Procedure Z8HG$FREE_ALL_REGISTERS requires 10 words of local(AUTO) storage.

PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:53   
      285        1        /*T***********************************************************/
      286        2        /*T*                                                         */
      287        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      288        4        /*T*                                                         */
      289        5        /*T***********************************************************/
      290        6        Z8HG$SAVE_MAYBE:PROC(NODE$) ALTRET;
      291        7        /*P*
      292        8
      293        9               NAME: Z8HG$SAVE_MAYBE
      294       10            PURPOSE: To assure that a triad is storage contained as well as
      295       11                     register contained.
      296       12        */
      297       13        /*F*
      298       14             NAME: Z8HG$SAVE_MAYBE
      299       15             PURPOSE:
      300       16                  To assure that a triad is storage contained as well as register
      301       17                  contained (a special case does exist... read on).
      302       18             DESCRIPTION:
      303       19                  None.
      304       20        */
      305       21        /*D*
      306       22             NAME: Z8HG$SAVE_MAYBE
      307       23             CALL:
      308       24                  CALL Z8HG$SAVE_MAYBE(=NODE$);
      309       25             PARAMETERS:
      310       26                  NODE$ -- Triad containing register to be saved.
      311       27             INTERFACE:
      312       28             ENVIRONMENT:
      313       29                  None.
      314       30             INPUT:
      315       31                  ETT table
      316       32                  RAT (Register Assignment Table)
      317       33             OUTPUT:
      318       34                  ETT table (triad reflects new storage containment).
      319       35                  RAT (Register Assignment Table), to reflect free of register,
      320       36                      or new index register containment.
      321       37             SCRATCH:
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:54   
      322       38                  P$ -- To get around PL6 not letting me pass by value.
      323       39             DESCRIPTION:
      324       40                  Well, I don't want to store a register if it is already in
      325       41                  storage somewhere, or, if it is an AWAITED register, I want
      326       42                  to put it in an index register (store:load vs switch).  I
      327       43                  go through a few checks to see if it is already storage
      328       44                  contained, then do the store, leaving the register
      329       45                  containment intact.
      330       46        */
      331       47
      332       48    1        DCL NODE$ PTR;
      333       49             %EQU PHASE = 4;
      334       50             %INCLUDE Z8A_DEFC;
      335      118             %INCLUDE Z8A_SUPP_MAC;
      336     2518             %INCLUDE Z8H_DEP;
      337     2625             %INCLUDE Z8A_ETT;
      338     2926             %INCLUDE Z8H_RAT;
      339     3017
      340     3018
      341     3019
      342     3020    1        DCL FORCE BOOLEAN;
      343     3021    1        DCL REGISTER SBIN WORD;
      344     3022
      345     3023
      346     3024    1        DCL Z8HI$BURST ENTRY(2);
      347     3025
      348     3026        %EJECT;
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:55   
      349     3027    1        FORCE = FALSE;
      350     3028    1        GOTO  DONT_FORCE;
      351     3029
      352     3030    1   Z8HG$SAVE:ENTRY(NODE$) ALTRET;
      353     3031
      354     3032        /*V* Z8HG$SAVE Forces the use of storage in containing
      355     3033             the triad.  Index registers will not be used to
      356     3034             contain the triad as is possible with Z8HG$SAVE_MAYBE */
      357     3035
      358     3036    1        FORCE = TRUE;
      359     3037
      360     3038    1        DONT_FORCE:
      361     3039
      362     3040
      363     3041    1        IF NODE$ = ADDR(NIL) THEN
      364     3042    1          RETURN;
      365     3043
      366     3044    1        REGISTER = NODE$ -> ETT.STATE;
      367     3045
      368     3046    1        IF NODE$ -> ETT.ID <= %LAST_REFERENCE_TRIAD THEN
      369     3047    1          RETURN;
      370     3048
      371     3049    1        IF NODE$ -> ETT.REF$ ~= ADDR(NIL) THEN
      372     3050    1          RETURN;
      373     3051
      374     3052    1        IF RAT.B.FAVORED(REGISTER) THEN
      375     3053    1          RETURN;
      376     3054
      377     3055    1        IF NODE$ -> ETT.COUNT = 0 THEN
      378     3056    1          RETURN;
      379     3057
      380     3058
      381     3059
      382     3060    2        DO CASE(REGISTER);
      383     3061    2          CASE(%ARA,%ARQ);
      384     3062    2            IF RAT.AWAITING(REGISTER) > 0 AND NOT RAT.B.GREATER_256K(REGISTER)
      385     3063    2            AND NOT FORCE THEN
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:56   
      386     3064    3              DO;
      387     3065    3                CALL Z8HI$BURST(NODE$, DEP.MDEP);
      388     3066    3                ALTRETURN;
      389     3067    3              END;
      390     3068    2            ELSE
      391     3069    2              CALL Z8HI$BURST(NODE$,DEP.ARDEP(REGISTER - %ARA));
      392     3070
      393     3071    2          CASE(%AREA);
      394     3072    2            CALL Z8HI$BURST(NODE$,DEP.EADEP);
      395     3073
      396     3074    2          CASE(%ARAQ);
      397     3075    2            CALL Z8HI$BURST(NODE$,DEP.AQDEP);
      398     3076
      399     3077    2          CASE(%AREAQ);
      400     3078    2            CALL Z8HI$BURST(NODE$,DEP.EAQDEP);
      401     3079
      402     3080    2          CASE(%IND);
      403     3081    2            CALL Z8HI$BURST(NODE$,DEP.INDDEP);
      404     3082
      405     3083    2          CASE(%XR0,%XR1,%XR2,%XR3,%XR4,%XR5,%XR6,%XR7,%OPTIMIZATION);
      406     3084    2            CALL Z8HI$BURST(NODE$,DEP.XRDEP(REGISTER - %XR0));
      407     3085
      408     3086    2          CASE(%PR0,%PR1,%PR2,%PR3,%PR4,%PR5,%PR6,%PR7);
      409     3087    2            IF NODE$ -> ETT.REF$ = ADDR(NIL) THEN
      410     3088    2              CALL Z8HI$BURST(NODE$,DEP.PRDEP(REGISTER - %PR0));
      411     3089
      412     3090    2        END /* Case */;
      413     3091
      414     3092    1   END Z8HG$SAVE_MAYBE;
      415     3093        %EOD;

PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:57   
--  Include file information  --

   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_DEP.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$SAVE_MAYBE.

   Procedure Z8HG$SAVE_MAYBE requires 145 words for executable code.
   Procedure Z8HG$SAVE_MAYBE requires 12 words of local(AUTO) storage.

PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:58   

 Object Unit name= Z8HG$SAVE_MAYBE                            File name= Z8HG.:Z8A6TOU
 UTS= AUG 09 '97 13:20:15.84 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none    48     60  DEP
    2  LblCom even  none     1      1  ETT$
    3  LblCom even  none     1      1  HEAD_ETT$
    4  LblCom even  none   512   1000  ETT_BUCKETS
    5  LblCom even  none     5      5  ETT_
    6  LblCom even  none   112    160  RAT
    7   Proc  even  none   145    221  Z8HG$SAVE_MAYBE
    8  RoData even  none     7      7  Z8HG$SAVE_MAYBE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     7      0   yes    yes     yes      Std        1  Z8HG$SAVE_MAYBE
     7      4          yes     yes      Std        1  Z8HG$SAVE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 Z8HI$BURST
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:59   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:60   


      285        1        /*T***********************************************************/
      286        2        /*T*                                                         */
      287        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      288        4        /*T*                                                         */
      289        5        /*T***********************************************************/
      290        6        Z8HG$SAVE_MAYBE:PROC(NODE$) ALTRET;

      6  7 000000   000000 700200 xent  Z8HG$SAVE_M* TSX0  ! X66_AUTO_1
         7 000001   000014 000001                    ZERO    12,1

      291        7        /*P*
      292        8
      293        9               NAME: Z8HG$SAVE_MAYBE
      294       10            PURPOSE: To assure that a triad is storage contained as well as
      295       11                     register contained.
      296       12        */
      297       13        /*F*
      298       14             NAME: Z8HG$SAVE_MAYBE
      299       15             PURPOSE:
      300       16                  To assure that a triad is storage contained as well as register
      301       17                  contained (a special case does exist... read on).
      302       18             DESCRIPTION:
      303       19                  None.
      304       20        */
      305       21        /*D*
      306       22             NAME: Z8HG$SAVE_MAYBE
      307       23             CALL:
      308       24                  CALL Z8HG$SAVE_MAYBE(=NODE$);
      309       25             PARAMETERS:
      310       26                  NODE$ -- Triad containing register to be saved.
      311       27             INTERFACE:
      312       28             ENVIRONMENT:
      313       29                  None.
      314       30             INPUT:
      315       31                  ETT table
      316       32                  RAT (Register Assignment Table)
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:61   
      317       33             OUTPUT:
      318       34                  ETT table (triad reflects new storage containment).
      319       35                  RAT (Register Assignment Table), to reflect free of register,
      320       36                      or new index register containment.
      321       37             SCRATCH:
      322       38                  P$ -- To get around PL6 not letting me pass by value.
      323       39             DESCRIPTION:
      324       40                  Well, I don't want to store a register if it is already in
      325       41                  storage somewhere, or, if it is an AWAITED register, I want
      326       42                  to put it in an index register (store:load vs switch).  I
      327       43                  go through a few checks to see if it is already storage
      328       44                  contained, then do the store, leaving the register
      329       45                  containment intact.
      330       46        */
      331       47
      332       48    1        DCL NODE$ PTR;
      333       49             %EQU PHASE = 4;
      334       50             %INCLUDE Z8A_DEFC;
      335      118             %INCLUDE Z8A_SUPP_MAC;
      336     2518             %INCLUDE Z8H_DEP;
      337     2625             %INCLUDE Z8A_ETT;
      338     2926             %INCLUDE Z8H_RAT;
      339     3017
      340     3018
      341     3019
      342     3020    1        DCL FORCE BOOLEAN;
      343     3021    1        DCL REGISTER SBIN WORD;
      344     3022
      345     3023
      346     3024    1        DCL Z8HI$BURST ENTRY(2);
      347     3025
      348     3026        %EJECT;
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:62   
      349     3027    1        FORCE = FALSE;

   3027  7 000002   200010 450100                    STZ     FORCE,,AUTO

      350     3028    1        GOTO  DONT_FORCE;

   3028  7 000003   000010 710000 7                  TRA     DONT_FORCE

      351     3029
      352     3030    1   Z8HG$SAVE:ENTRY(NODE$) ALTRET;

   3030  7 000004   000000 700200 xent  Z8HG$SAVE    TSX0  ! X66_AUTO_1
         7 000005   000014 000001                    ZERO    12,1

      353     3031
      354     3032        /*V* Z8HG$SAVE Forces the use of storage in containing
      355     3033             the triad.  Index registers will not be used to
      356     3034             contain the triad as is possible with Z8HG$SAVE_MAYBE */
      357     3035
      358     3036    1        FORCE = TRUE;

   3036  7 000006   400000 236003                    LDQ     -131072,DU
         7 000007   200010 756100                    STQ     FORCE,,AUTO

      359     3037
      360     3038    1        DONT_FORCE:
      361     3039
      362     3040
      363     3041    1        IF NODE$ = ADDR(NIL) THEN

   3041  7 000010   200003 470500       DONT_FORCE   LDP0    @NODE$,,AUTO
         7 000011   000000 236100                    LDQ     0,,PR0
         7 000012   000000 116000 8                  CMPQ    0
         7 000013   000015 601000 7                  TNZ     s:3044

      364     3042    1          RETURN;

PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:63   
   3042  7 000014   000000 702200 xent               TSX2  ! X66_ARET

      365     3043
      366     3044    1        REGISTER = NODE$ -> ETT.STATE;

   3044  7 000015   000000 471500                    LDP1    0,,PR0
         7 000016   100004 236100                    LDQ     4,,PR1
         7 000017   000022 772000                    QRL     18
         7 000020   200011 756100                    STQ     REGISTER,,AUTO

      367     3045
      368     3046    1        IF NODE$ -> ETT.ID <= %LAST_REFERENCE_TRIAD THEN

   3046  7 000021   100000 220100                    LDX0    0,,PR1
         7 000022   000020 100003                    CMPX0   16,DU
         7 000023   000025 603000 7                  TRC     s:3049

      369     3047    1          RETURN;

   3047  7 000024   000000 702200 xent               TSX2  ! X66_ARET

      370     3048
      371     3049    1        IF NODE$ -> ETT.REF$ ~= ADDR(NIL) THEN

   3049  7 000025   100003 236100                    LDQ     3,,PR1
         7 000026   000000 116000 8                  CMPQ    0
         7 000027   000031 600000 7                  TZE     s:3052

      372     3050    1          RETURN;

   3050  7 000030   000000 702200 xent               TSX2  ! X66_ARET

      373     3051
      374     3052    1        IF RAT.B.FAVORED(REGISTER) THEN

   3052  7 000031   200011 235100                    LDA     REGISTER,,AUTO
         7 000032   000002 735000                    ALS     2
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:64   
         7 000033   000001 236005 6                  LDQ     RAT+1,AL
         7 000034   100000 316003                    CANQ    32768,DU
         7 000035   000037 600000 7                  TZE     s:3055

      375     3053    1          RETURN;

   3053  7 000036   000000 702200 xent               TSX2  ! X66_ARET

      376     3054
      377     3055    1        IF NODE$ -> ETT.COUNT = 0 THEN

   3055  7 000037   100000 721100                    LXL1    0,,PR1
         7 000040   000042 601000 7                  TNZ     s:3060

      378     3056    1          RETURN;

   3056  7 000041   000000 702200 xent               TSX2  ! X66_ARET

      379     3057
      380     3058
      381     3059
      382     3060    2        DO CASE(REGISTER);

   3060  7 000042   200011 235100                    LDA     REGISTER,,AUTO
         7 000043   000034 115007                    CMPA    28,DL
         7 000044   000046 602005 7                  TNC     s:3060+4,AL
         7 000045   000220 710000 7                  TRA     s:3092
         7 000046   000174 710000 7                  TRA     s:3084
         7 000047   000220 710000 7                  TRA     s:3092
         7 000050   000220 710000 7                  TRA     s:3092
         7 000051   000164 710000 7                  TRA     s:3081
         7 000052   000220 710000 7                  TRA     s:3092
         7 000053   000102 710000 7                  TRA     s:3062
         7 000054   000102 710000 7                  TRA     s:3062
         7 000055   000144 710000 7                  TRA     s:3075
         7 000056   000174 710000 7                  TRA     s:3084
         7 000057   000174 710000 7                  TRA     s:3084
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:65   
         7 000060   000174 710000 7                  TRA     s:3084
         7 000061   000174 710000 7                  TRA     s:3084
         7 000062   000174 710000 7                  TRA     s:3084
         7 000063   000174 710000 7                  TRA     s:3084
         7 000064   000174 710000 7                  TRA     s:3084
         7 000065   000174 710000 7                  TRA     s:3084
         7 000066   000220 710000 7                  TRA     s:3092
         7 000067   000134 710000 7                  TRA     s:3072
         7 000070   000154 710000 7                  TRA     s:3078
         7 000071   000220 710000 7                  TRA     s:3092
         7 000072   000205 710000 7                  TRA     s:3087
         7 000073   000205 710000 7                  TRA     s:3087
         7 000074   000205 710000 7                  TRA     s:3087
         7 000075   000205 710000 7                  TRA     s:3087
         7 000076   000205 710000 7                  TRA     s:3087
         7 000077   000205 710000 7                  TRA     s:3087
         7 000100   000205 710000 7                  TRA     s:3087
         7 000101   000205 710000 7                  TRA     s:3087

      383     3061    2          CASE(%ARA,%ARQ);

      384     3062    2            IF RAT.AWAITING(REGISTER) > 0 AND NOT RAT.B.GREATER_256K(REGISTER)

   3062  7 000102   000002 735000                    ALS     2
         7 000103   000001 722005 6                  LXL2    RAT+1,AL
         7 000104   000122 604400 7                  TMOZ    s:3069
         7 000105   000001 236005 6                  LDQ     RAT+1,AL
         7 000106   200000 316003                    CANQ    65536,DU
         7 000107   000122 601000 7                  TNZ     s:3069
         7 000110   200010 234100                    SZN     FORCE,,AUTO
         7 000111   000122 604000 7                  TMI     s:3069

      385     3063    2            AND NOT FORCE THEN
      386     3064    3              DO;

      387     3065    3                CALL Z8HI$BURST(NODE$, DEP.MDEP);

PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:66   
   3065  7 000112   000002 236000 8                  LDQ     2
         7 000113   200003 235100                    LDA     @NODE$,,AUTO
         7 000114   200012 757100                    STAQ    REGISTER+1,,AUTO
         7 000115   200012 630500                    EPPR0   REGISTER+1,,AUTO
         7 000116   000001 631400 8                  EPPR1   1
         7 000117   000000 701000 xent               TSX1    Z8HI$BURST
         7 000120   000000 011000                    NOP     0

      388     3066    3                ALTRETURN;

   3066  7 000121   000000 702200 xent               TSX2  ! X66_AALT

      389     3067    3              END;
      390     3068    2            ELSE
      391     3069    2              CALL Z8HI$BURST(NODE$,DEP.ARDEP(REGISTER - %ARA));

   3069  7 000122   200011 723100                    LXL3    REGISTER,,AUTO
         7 000123   000035 633413 1                  EPPR3   DEP+29,X3
         7 000124   200013 453500                    STP3    REGISTER+2,,AUTO
         7 000125   200003 236100                    LDQ     @NODE$,,AUTO
         7 000126   200012 756100                    STQ     REGISTER+1,,AUTO
         7 000127   200012 630500                    EPPR0   REGISTER+1,,AUTO
         7 000130   000001 631400 8                  EPPR1   1
         7 000131   000000 701000 xent               TSX1    Z8HI$BURST
         7 000132   000000 011000                    NOP     0
         7 000133   000220 710000 7                  TRA     s:3092

      392     3070
      393     3071    2          CASE(%AREA);

      394     3072    2            CALL Z8HI$BURST(NODE$,DEP.EADEP);

   3072  7 000134   000003 236000 8                  LDQ     3
         7 000135   200003 235100                    LDA     @NODE$,,AUTO
         7 000136   200012 757100                    STAQ    REGISTER+1,,AUTO
         7 000137   200012 630500                    EPPR0   REGISTER+1,,AUTO
         7 000140   000001 631400 8                  EPPR1   1
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:67   
         7 000141   000000 701000 xent               TSX1    Z8HI$BURST
         7 000142   000000 011000                    NOP     0
         7 000143   000220 710000 7                  TRA     s:3092

      395     3073
      396     3074    2          CASE(%ARAQ);

      397     3075    2            CALL Z8HI$BURST(NODE$,DEP.AQDEP);

   3075  7 000144   000004 236000 8                  LDQ     4
         7 000145   200003 235100                    LDA     @NODE$,,AUTO
         7 000146   200012 757100                    STAQ    REGISTER+1,,AUTO
         7 000147   200012 630500                    EPPR0   REGISTER+1,,AUTO
         7 000150   000001 631400 8                  EPPR1   1
         7 000151   000000 701000 xent               TSX1    Z8HI$BURST
         7 000152   000000 011000                    NOP     0
         7 000153   000220 710000 7                  TRA     s:3092

      398     3076
      399     3077    2          CASE(%AREAQ);

      400     3078    2            CALL Z8HI$BURST(NODE$,DEP.EAQDEP);

   3078  7 000154   000005 236000 8                  LDQ     5
         7 000155   200003 235100                    LDA     @NODE$,,AUTO
         7 000156   200012 757100                    STAQ    REGISTER+1,,AUTO
         7 000157   200012 630500                    EPPR0   REGISTER+1,,AUTO
         7 000160   000001 631400 8                  EPPR1   1
         7 000161   000000 701000 xent               TSX1    Z8HI$BURST
         7 000162   000000 011000                    NOP     0
         7 000163   000220 710000 7                  TRA     s:3092

      401     3079
      402     3080    2          CASE(%IND);

      403     3081    2            CALL Z8HI$BURST(NODE$,DEP.INDDEP);

PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:68   
   3081  7 000164   000006 236000 8                  LDQ     6
         7 000165   200003 235100                    LDA     @NODE$,,AUTO
         7 000166   200012 757100                    STAQ    REGISTER+1,,AUTO
         7 000167   200012 630500                    EPPR0   REGISTER+1,,AUTO
         7 000170   000001 631400 8                  EPPR1   1
         7 000171   000000 701000 xent               TSX1    Z8HI$BURST
         7 000172   000000 011000                    NOP     0
         7 000173   000220 710000 7                  TRA     s:3092

      404     3082
      405     3083    2          CASE(%XR0,%XR1,%XR2,%XR3,%XR4,%XR5,%XR6,%XR7,%OPTIMIZATION);

      406     3084    2            CALL Z8HI$BURST(NODE$,DEP.XRDEP(REGISTER - %XR0));

   3084  7 000174   000022 633405 1                  EPPR3   DEP+18,AL
         7 000175   200013 453500                    STP3    REGISTER+2,,AUTO
         7 000176   200003 236100                    LDQ     @NODE$,,AUTO
         7 000177   200012 756100                    STQ     REGISTER+1,,AUTO
         7 000200   200012 630500                    EPPR0   REGISTER+1,,AUTO
         7 000201   000001 631400 8                  EPPR1   1
         7 000202   000000 701000 xent               TSX1    Z8HI$BURST
         7 000203   000000 011000                    NOP     0
         7 000204   000220 710000 7                  TRA     s:3092

      407     3085
      408     3086    2          CASE(%PR0,%PR1,%PR2,%PR3,%PR4,%PR5,%PR6,%PR7);

      409     3087    2            IF NODE$ -> ETT.REF$ = ADDR(NIL) THEN

   3087  7 000205   100003 236100                    LDQ     3,,PR1
         7 000206   000000 116000 8                  CMPQ    0
         7 000207   000220 601000 7                  TNZ     s:3092

      410     3088    2              CALL Z8HI$BURST(NODE$,DEP.PRDEP(REGISTER - %PR0));

   3088  7 000210   000024 633405 1                  EPPR3   DEP+20,AL
         7 000211   200013 453500                    STP3    REGISTER+2,,AUTO
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:69   
         7 000212   200003 236100                    LDQ     @NODE$,,AUTO
         7 000213   200012 756100                    STQ     REGISTER+1,,AUTO
         7 000214   200012 630500                    EPPR0   REGISTER+1,,AUTO
         7 000215   000001 631400 8                  EPPR1   1
         7 000216   000000 701000 xent               TSX1    Z8HI$BURST
         7 000217   000000 011000                    NOP     0

      411     3089
      412     3090    2        END /* Case */;

      413     3091
      414     3092    1   END Z8HG$SAVE_MAYBE;

   3092  7 000220   000000 702200 xent               TSX2  ! X66_ARET
      415     3093        %EOD;

PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:70   
--  Include file information  --

   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_DEP.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$SAVE_MAYBE.
PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:71   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom DEP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b STRC(1728)  r     1 DEP

  ****  Section 002 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 003 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

  ****  Section 004 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

PL6.E3A0      #004=Z8HG$SAVE_MAYBE File=Z8HG.:Z8A6TSI                            SAT 08/09/97 13:20 Page:72   
  ****  Section 005 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

  ****  Section 006 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 RAT(0:27)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @NODE$                     7-0-0/b BIT               1 AORQ
    10-0-0/b BIT         r     1 FORCE                      6-0-0/w UBIN              1 LAST_FREED
     5-0-0/w UBIN              1 LAST_USED                 *0-0-0/w PTR         r     1 NODE$
     4-0-0/w UBIN              1 REGID                     11-0-0/w SBIN        r     1 REGISTER

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(36864)       1 PAGE


   Procedure Z8HG$SAVE_MAYBE requires 145 words for executable code.
   Procedure Z8HG$SAVE_MAYBE requires 12 words of local(AUTO) storage.

PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:73   
      416        1        /*T***********************************************************/
      417        2        /*T*                                                         */
      418        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      419        4        /*T*                                                         */
      420        5        /*T***********************************************************/
      421        6        /*P*
      422        7
      423        8              NAME: Z8HG$USE_REGISTER
      424        9           PURPOSE: To associate a register with a triad.
      425       10
      426       11        */
      427       12        /*F*
      428       13             NAME: Z8HG$USE_REGISTER
      429       14             PURPOSE:
      430       15                  To associate a register with a triad.
      431       16             DESCRIPTION:
      432       17                  None.
      433       18        */
      434       19        /*D*
      435       20             NAME: Z8HG$USE_REGISTER
      436       21             CALL:
      437       22                  CALL Z8HG$USE_REGISTER(=NODE$, =REGISTER);
      438       23             PARAMETERS:
      439       24                  NODE$ -- Triad that REGISTER is to be associated.
      440       25                  REGISTER -- Register to be associated with triad.
      441       26             ENVIRONMENT:
      442       27                  None.
      443       28             INPUT:
      444       29                  None.
      445       30             OUTPUT:
      446       31                  A new PRIME item, and RAT info for that register created or
      447       32                  is appended.
      448       33             SCRATCH:
      449       34                  P$ -- To get around PL6's inefficiencies.
      450       35             DESCRIPTION:
      451       36                  Lookup triad in list that may or may not already exist
      452       37                  for REGISTER, to see if it already is in the list.  If it
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:74   
      453       38                  is, don't put another copy in, it fouls up the list (among
      454       39                  other things).
      455       40
      456       41                  Get a new PRIME item, either from a previously pooled one,
      457       42                  or a brand spankin' new one.
      458       43
      459       44                  Put that PRIME item, with all the info filled in as far as
      460       45                  what triad is associated, etc. into the RAT.PRIMES(REGISTER)
      461       46                  list.  Mark the triad as being register REGISTER contained.
      462       47
      463       48                  If the triad happens to be and ILL item (top of the tree),
      464       49                  then I do aliasing (more than one triad holds the same
      465       50                  register containment).
      466       51
      467       52                  Example:
      468       53
      469       54                  Consider this pseudo-code -->  GENI   LDQ,ROP
      470       55                                                 GENI   STQ,LOP
      471       56                                                 ASSIGN AR(Q),USED
      472       57                                                 QUIT
      473       58
      474       59                  This is from MVII (an ILL item).  Both the LOP and ROP
      475       60                  are equivalent, and I can reflect this by associating
      476       61                  the AR(Q) with both of them.  The LOP will always have
      477       62                  a count of zero when we do this.  It is hoped that it'll
      478       63                  get another count soon.  The ROP may or may not be zero.
      479       64                  If it is, don't assign it, it definitely will not be
      480       65                  *good* again, until after a redefinition.
      481       66        */
      482       67        %EJECT;
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:75   
      483       68        Z8HG$USE_REGISTER:PROC(NODE$,REGISTER);
      484       69
      485       70    1        DCL NODE$ PTR;
      486       71    1        DCL REGISTER UBIN WORD;
      487       72
      488       73    1        DCL Z8HU$POOL_PRIME      ENTRY(1);
      489       74
      490       75             %EQU PHASE = 4;
      491       76             %INCLUDE Z8A_DEFC;
      492      144             %INCLUDE Z8A_SUPP_MAC;
      493     2544             %INCLUDE Z8A_ILS;
      494     2653             %INCLUDE Z8A_ETT;
      495     2954             %INCLUDE Z8A_ST;
      496     6613             %INCLUDE Z8A_LTS;
      497     8690             %INCLUDE Z8H_RAT;
      498     8781             %INCLUDE Z8H_EXT;
      499     8832
      500     8833
      501     8834
      502     8835    1        IF NODE$ -> ETT.ID >= %FIRST_ILL THEN
      503     8836    2          DO;
      504     8837    2            IF ILS$ -> ILS.ID ~= %OPA THEN
      505     8838    2              CALL USE_UTILITY(NODE$ -> ETT.LOP);
      506     8839    2            IF NODE$ -> ETT.ROP ~= ADDR(NIL)  THEN
      507     8840    2              IF NODE$ -> ETT.ROP -> ETT.COUNT ~= 0 THEN
      508     8841    2                CALL USE_UTILITY(NODE$ -> ETT.ROP);
      509     8842    2          END;
      510     8843    1        ELSE
      511     8844    1          CALL USE_UTILITY(NODE$);
      512     8845
      513     8846    1        RETURN;
      514     8847
      515     8848        %EJECT;
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:76   
      516     8849    1   USE_UTILITY:PROC(NODE$);
      517     8850
      518     8851    2        DCL NODE$ PTR;
      519     8852    2        DCL P$ PTR;
      520     8853
      521     8854
      522     8855    2        P$ = RAT.PRIMES(REGISTER);
      523     8856
      524     8857    3        DO WHILE(P$ ~= ADDR(NIL));
      525     8858    3          IF P$ -> PRIME.TRIAD = NODE$ THEN
      526     8859    3            RETURN;
      527     8860
      528     8861    3          P$ = P$ -> PRIME.NEXT;
      529     8862    3        END;
      530     8863
      531     8864    2        IF RAT.PRIMES( NODE$ -> ETT.STATE ) ~= ADDR(NIL)   THEN
      532     8865    2          CALL Z8HU$POOL_PRIME( NODE$ );
      533     8866
      534     8867             %NEW_PRIME;
      535     8974
      536     8975             %INSERT_INTO_DL_LIST(PTR=LTS$,ITEM=PRIME,HEAD="RAT.PRIMES(REGISTER)");
      537     9003
      538     9004    2        LTS$ -> PRIME.TRIAD = NODE$;
      539     9005    2        RAT.COUNT(REGISTER) = RAT.COUNT(REGISTER) + NODE$ -> ETT.COUNT;
      540     9006    2        IF NODE$ -> ETT.REF$ ~= ADDR(NIL) THEN
      541     9007    2          IF NODE$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN
      542     9008    2            RAT.B.GREATER_256K (REGISTER) = NODE$ -> ETT.REF$ -> REF.ST$
      543     9009    2                -> TEMP.B.GREATER_256K;
      544     9010    2        NODE$ -> ETT.STATE = REGISTER;
      545     9011
      546     9012    2   END USE_UTILITY;
      547     9013
      548     9014        %EJECT;
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:77   
      549     9015    1   END Z8HG$USE_REGISTER;

PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:78   
--  Include file information  --

   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ILS.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$USE_REGISTER.

   Procedure Z8HG$USE_REGISTER requires 157 words for executable code.
   Procedure Z8HG$USE_REGISTER requires 16 words of local(AUTO) storage.

    No errors detected in file Z8HG.:Z8A6TSI    .

PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:79   

 Object Unit name= Z8HG$USE_REGISTER                          File name= Z8HG.:Z8A6TOU
 UTS= AUG 09 '97 13:20:42.36 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1  LblCom even  none     1      1  ILS$
    2  LblCom even  none     5      5  ILS_
    3  LblCom even  none     1      1  ETT$
    4  LblCom even  none     1      1  HEAD_ETT$
    5  LblCom even  none   512   1000  ETT_BUCKETS
    6  LblCom even  none     5      5  ETT_
    7  LblCom even  none     1      1  ST$
    8  LblCom even  none     5      5  ST_
    9  LblCom even  none     1      1  LTS$
   10  LblCom even  none     5      5  LTS_
   11  LblCom even  none   112    160  RAT
   12  LblCom even  none     1      1  NUMBER_OF_PRIMES
   13  LblCom even  none     1      1  NUMBER_OF_TEMPS
   14  LblCom even  none     1      1  NUMBER_OF_REFS
   15  LblCom even  none     1      1  GENERATING_PTRS
   16  LblCom even  none     1      1  USE_PROC_RETURN
   17  LblCom even  none     1      1  CURRENT_SCOPE$
   18  LblCom even  none     1      1  HEAD_REF$
   19  LblCom even  none     1      1  HEAD_TEMP$
   20  LblCom even  none     1      1  CONST$
   21  LblCom even  none     1      1  HEAD_PRIMES$
   22  LblCom even  none     1      1  CUR_LOOP_LEVEL
   23  LblCom even  none     2      2  PEPD
   24   Proc  even  none   157    235  Z8HG$USE_REGISTER
   25  RoData even  none     3      3  Z8HG$USE_REGISTER
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:80   

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    24      0   yes            yes      Std        2  Z8HG$USE_REGISTER

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 Z8HU$POOL_PRIME
         yes           Std       1 Z8AR$RESERVER
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    ILS_STEP_TABLE                   r    LTS_STEP

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:81   


      416        1        /*T***********************************************************/
      417        2        /*T*                                                         */
      418        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      419        4        /*T*                                                         */
      420        5        /*T***********************************************************/
      421        6        /*P*
      422        7
      423        8              NAME: Z8HG$USE_REGISTER
      424        9           PURPOSE: To associate a register with a triad.
      425       10
      426       11        */
      427       12        /*F*
      428       13             NAME: Z8HG$USE_REGISTER
      429       14             PURPOSE:
      430       15                  To associate a register with a triad.
      431       16             DESCRIPTION:
      432       17                  None.
      433       18        */
      434       19        /*D*
      435       20             NAME: Z8HG$USE_REGISTER
      436       21             CALL:
      437       22                  CALL Z8HG$USE_REGISTER(=NODE$, =REGISTER);
      438       23             PARAMETERS:
      439       24                  NODE$ -- Triad that REGISTER is to be associated.
      440       25                  REGISTER -- Register to be associated with triad.
      441       26             ENVIRONMENT:
      442       27                  None.
      443       28             INPUT:
      444       29                  None.
      445       30             OUTPUT:
      446       31                  A new PRIME item, and RAT info for that register created or
      447       32                  is appended.
      448       33             SCRATCH:
      449       34                  P$ -- To get around PL6's inefficiencies.
      450       35             DESCRIPTION:
      451       36                  Lookup triad in list that may or may not already exist
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:82   
      452       37                  for REGISTER, to see if it already is in the list.  If it
      453       38                  is, don't put another copy in, it fouls up the list (among
      454       39                  other things).
      455       40
      456       41                  Get a new PRIME item, either from a previously pooled one,
      457       42                  or a brand spankin' new one.
      458       43
      459       44                  Put that PRIME item, with all the info filled in as far as
      460       45                  what triad is associated, etc. into the RAT.PRIMES(REGISTER)
      461       46                  list.  Mark the triad as being register REGISTER contained.
      462       47
      463       48                  If the triad happens to be and ILL item (top of the tree),
      464       49                  then I do aliasing (more than one triad holds the same
      465       50                  register containment).
      466       51
      467       52                  Example:
      468       53
      469       54                  Consider this pseudo-code -->  GENI   LDQ,ROP
      470       55                                                 GENI   STQ,LOP
      471       56                                                 ASSIGN AR(Q),USED
      472       57                                                 QUIT
      473       58
      474       59                  This is from MVII (an ILL item).  Both the LOP and ROP
      475       60                  are equivalent, and I can reflect this by associating
      476       61                  the AR(Q) with both of them.  The LOP will always have
      477       62                  a count of zero when we do this.  It is hoped that it'll
      478       63                  get another count soon.  The ROP may or may not be zero.
      479       64                  If it is, don't assign it, it definitely will not be
      480       65                  *good* again, until after a redefinition.
      481       66        */
      482       67        %EJECT;
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:83   
      483       68        Z8HG$USE_REGISTER:PROC(NODE$,REGISTER);

     68 24 000000   000000 700200 xent  Z8HG$USE_RE* TSX0  ! X66_AUTO_2
        24 000001   000020 000002                    ZERO    16,2

      484       69
      485       70    1        DCL NODE$ PTR;
      486       71    1        DCL REGISTER UBIN WORD;
      487       72
      488       73    1        DCL Z8HU$POOL_PRIME      ENTRY(1);
      489       74
      490       75             %EQU PHASE = 4;
      491       76             %INCLUDE Z8A_DEFC;
      492      144             %INCLUDE Z8A_SUPP_MAC;
      493     2544             %INCLUDE Z8A_ILS;
      494     2653             %INCLUDE Z8A_ETT;
      495     2954             %INCLUDE Z8A_ST;
      496     6613             %INCLUDE Z8A_LTS;
      497     8690             %INCLUDE Z8H_RAT;
      498     8781             %INCLUDE Z8H_EXT;
      499     8832
      500     8833
      501     8834
      502     8835    1        IF NODE$ -> ETT.ID >= %FIRST_ILL THEN

   8835 24 000002   200003 470500                    LDP0    @NODE$,,AUTO
        24 000003   000000 471500                    LDP1    0,,PR0
        24 000004   100000 220100                    LDX0    0,,PR1
        24 000005   000226 100003                    CMPX0   150,DU
        24 000006   000034 602000 24                 TNC     s:8844

      503     8836    2          DO;

      504     8837    2            IF ILS$ -> ILS.ID ~= %OPA THEN

   8837 24 000007   000000 473400 1                  LDP3    ILS$
        24 000010   300000 221100                    LDX1    0,,PR3
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:84   
        24 000011   000742 101003                    CMPX1   482,DU
        24 000012   000017 600000 24                 TZE     s:8839

      505     8838    2              CALL USE_UTILITY(NODE$ -> ETT.LOP);

   8838 24 000013   100001 634500                    EPPR4   1,,PR1
        24 000014   200013 454500                    STP4    AORQ+3,,AUTO
        24 000015   000041 701000 24                 TSX1    USE_UTILITY
        24 000016   000000 011000                    NOP     0

      506     8839    2            IF NODE$ -> ETT.ROP ~= ADDR(NIL)  THEN

   8839 24 000017   200003 470500                    LDP0    @NODE$,,AUTO
        24 000020   000000 471500                    LDP1    0,,PR0
        24 000021   100002 236100                    LDQ     2,,PR1
        24 000022   000000 116000 25                 CMPQ    0
        24 000023   000040 600000 24                 TZE     s:8846

      507     8840    2              IF NODE$ -> ETT.ROP -> ETT.COUNT ~= 0 THEN

   8840 24 000024   100002 473500                    LDP3    2,,PR1
        24 000025   300000 720100                    LXL0    0,,PR3
        24 000026   000040 600000 24                 TZE     s:8846

      508     8841    2                CALL USE_UTILITY(NODE$ -> ETT.ROP);

   8841 24 000027   100002 634500                    EPPR4   2,,PR1
        24 000030   200013 454500                    STP4    AORQ+3,,AUTO
        24 000031   000041 701000 24                 TSX1    USE_UTILITY
        24 000032   000000 011000                    NOP     0

      509     8842    2          END;

   8842 24 000033   000040 710000 24                 TRA     s:8846

      510     8843    1        ELSE
      511     8844    1          CALL USE_UTILITY(NODE$);
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:85   

   8844 24 000034   200003 236100                    LDQ     @NODE$,,AUTO
        24 000035   200013 756100                    STQ     AORQ+3,,AUTO
        24 000036   000041 701000 24                 TSX1    USE_UTILITY
        24 000037   000000 011000                    NOP     0

      512     8845
      513     8846    1        RETURN;

   8846 24 000040   000000 702200 xent               TSX2  ! X66_ARET

      514     8847
      515     8848        %EJECT;
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:86   
      516     8849    1   USE_UTILITY:PROC(NODE$);

   8849 24 000041   200012 741300       USE_UTILITY  STX1  ! AORQ+2,,AUTO

      517     8850
      518     8851    2        DCL NODE$ PTR;
      519     8852    2        DCL P$ PTR;
      520     8853
      521     8854
      522     8855    2        P$ = RAT.PRIMES(REGISTER);

   8855 24 000042   200004 470500                    LDP0    @REGISTER,,AUTO
        24 000043   000000 235100                    LDA     0,,PR0
        24 000044   000001 735000                    ALS     1
        24 000045   000001 735000                    ALS     1
        24 000046   000000 236005 11                 LDQ     RAT,AL
        24 000047   200014 756100                    STQ     P$,,AUTO

      523     8856
      524     8857    3        DO WHILE(P$ ~= ADDR(NIL));

   8857 24 000050   000062 710000 24                 TRA     s:8862

      525     8858    3          IF P$ -> PRIME.TRIAD = NODE$ THEN

   8858 24 000051   200014 470500                    LDP0    P$,,AUTO
        24 000052   200013 471500                    LDP1    @NODE$,,AUTO
        24 000053   000001 236100                    LDQ     1,,PR0
        24 000054   100000 116100                    CMPQ    0,,PR1
        24 000055   000060 601000 24                 TNZ     s:8861

      526     8859    3            RETURN;

   8859 24 000056   200012 221300                    LDX1  ! AORQ+2,,AUTO
        24 000057   000001 702211                    TSX2  ! 1,X1

      527     8860
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:87   
      528     8861    3          P$ = P$ -> PRIME.NEXT;

   8861 24 000060   000003 236100                    LDQ     3,,PR0
        24 000061   200014 756100                    STQ     P$,,AUTO

      529     8862    3        END;

   8862 24 000062   000000 116000 25                 CMPQ    0
        24 000063   000051 601000 24                 TNZ     s:8858

      530     8863
      531     8864    2        IF RAT.PRIMES( NODE$ -> ETT.STATE ) ~= ADDR(NIL)   THEN

   8864 24 000064   200013 470500                    LDP0    @NODE$,,AUTO
        24 000065   000000 471500                    LDP1    0,,PR0
        24 000066   100004 220100                    LDX0    4,,PR1
        24 000067   100004 020100                    ADLX0   4,,PR1
        24 000070   000000 635010                    EAA     0,X0
        24 000071   000021 771000                    ARL     17
        24 000072   000000 236005 11                 LDQ     RAT,AL
        24 000073   000000 116000 25                 CMPQ    0
        24 000074   000101 600000 24                 TZE     s:8869

      532     8865    2          CALL Z8HU$POOL_PRIME( NODE$ );

   8865 24 000075   200013 630500                    EPPR0   @NODE$,,AUTO
        24 000076   000001 631400 25                 EPPR1   1
        24 000077   000000 701000 xent               TSX1    Z8HU$POOL_PRIME
        24 000100   000000 011000                    NOP     0

      533     8866
      534     8867             %NEW_PRIME;

   8869 24 000101   000000 236000 21                 LDQ     HEAD_PRIMES$
        24 000102   000000 116000 25                 CMPQ    0
        24 000103   000132 601000 24                 TNZ     s:8961

PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:88   
   8946 24 000104   000002 236000 10                 LDQ     LTS_+2
        24 000105   000004 036007                    ADLQ    4,DL
        24 000106   000003 116000 10                 CMPQ    LTS_+3
        24 000107   000120 604000 24                 TMI     s:8948

   8947 24 000110   000002 236000 25                 LDQ     2
        24 000111   200016 756100                    STQ     P$+2,,AUTO
        24 000112   200016 630500                    EPPR0   P$+2,,AUTO
        24 000113   200017 450500                    STP0    P$+3,,AUTO
        24 000114   200017 630500                    EPPR0   P$+3,,AUTO
        24 000115   000001 631400 25                 EPPR1   1
        24 000116   000000 701000 xent               TSX1    Z8AR$RESERVER
        24 000117   000000 011000                    NOP     0

   8948 24 000120   000002 236000 10                 LDQ     LTS_+2
        24 000121   000022 736000                    QLS     18
        24 000122   000001 036000 10                 ADLQ    LTS_+1
        24 000123   000000 756000 9                  STQ     LTS$

   8949 24 000124   000004 236007                    LDQ     4,DL
        24 000125   000002 056000 10                 ASQ     LTS_+2

   8950 24 000126   001107 220003                    LDX0    583,DU
        24 000127   000000 470400 9                  LDP0    LTS$
        24 000130   000000 740100                    STX0    0,,PR0

   8954 24 000131   000136 710000 24                 TRA     s:8971

   8961 24 000132   000000 756000 9                  STQ     LTS$

   8962 24 000133   000000 470400 21                 LDP0    HEAD_PRIMES$
        24 000134   000003 236100                    LDQ     3,,PR0
        24 000135   000000 756000 21                 STQ     HEAD_PRIMES$

   8971 24 000136   000000 054000 12                 AOS     NUMBER_OF_PRIMES

      535     8974
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:89   
      536     8975             %INSERT_INTO_DL_LIST(PTR=LTS$,ITEM=PRIME,HEAD="RAT.PRIMES(REGISTER)");

   8978 24 000137   200004 470500                    LDP0    @REGISTER,,AUTO
        24 000140   000000 235100                    LDA     0,,PR0
        24 000141   000001 735000                    ALS     1
        24 000142   000001 735000                    ALS     1
        24 000143   000000 236005 11                 LDQ     RAT,AL
        24 000144   000000 471400 9                  LDP1    LTS$
        24 000145   100003 756100                    STQ     3,,PR1

   8979 24 000146   000000 236000 25                 LDQ     0
        24 000147   100002 756100                    STQ     2,,PR1

   8980 24 000150   000000 235100                    LDA     0,,PR0
        24 000151   000001 735000                    ALS     1
        24 000152   000001 735000                    ALS     1
        24 000153   000000 236005 11                 LDQ     RAT,AL
        24 000154   000000 116000 25                 CMPQ    0
        24 000155   000164 600000 24                 TZE     s:8982

   8981 24 000156   000000 235100                    LDA     0,,PR0
        24 000157   000001 735000                    ALS     1
        24 000160   000001 735000                    ALS     1
        24 000161   000000 473405 11                 LDP3    RAT,AL
        24 000162   000000 236000 9                  LDQ     LTS$
        24 000163   300002 756100                    STQ     2,,PR3

   8982 24 000164   000000 235100                    LDA     0,,PR0
        24 000165   000001 735000                    ALS     1
        24 000166   000001 735000                    ALS     1
        24 000167   000000 236000 9                  LDQ     LTS$
        24 000170   000000 756005 11                 STQ     RAT,AL

      537     9003
      538     9004    2        LTS$ -> PRIME.TRIAD = NODE$;

   9004 24 000171   200013 473500                    LDP3    @NODE$,,AUTO
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:90   
        24 000172   300000 236100                    LDQ     0,,PR3
        24 000173   100001 756100                    STQ     1,,PR1

      539     9005    2        RAT.COUNT(REGISTER) = RAT.COUNT(REGISTER) + NODE$ -> ETT.COUNT;

   9005 24 000174   000000 235100                    LDA     0,,PR0
        24 000175   000001 735000                    ALS     1
        24 000176   000001 735000                    ALS     1
        24 000177   000000 620005                    EAX0    0,AL
        24 000200   000000 235100                    LDA     0,,PR0
        24 000201   000001 735000                    ALS     1
        24 000202   300000 474500                    LDP4    0,,PR3
        24 000203   000001 735000                    ALS     1
        24 000204   400000 236100                    LDQ     0,,PR4
        24 000205   777777 376007                    ANQ     -1,DL
        24 000206   000002 036005 11                 ADLQ    RAT+2,AL
        24 000207   000002 756010 11                 STQ     RAT+2,X0

      540     9006    2        IF NODE$ -> ETT.REF$ ~= ADDR(NIL) THEN

   9006 24 000210   300000 474500                    LDP4    0,,PR3
        24 000211   400003 236100                    LDQ     3,,PR4
        24 000212   000000 116000 25                 CMPQ    0
        24 000213   000230 600000 24                 TZE     s:9010

      541     9007    2          IF NODE$ -> ETT.REF$ -> REF.ST$ -> ST.ID = %TEMP THEN

   9007 24 000214   400003 475500                    LDP5    3,,PR4
        24 000215   500005 476500                    LDP6    5,,PR5
        24 000216   600000 220100                    LDX0    0,,PR6
        24 000217   000760 100003                    CMPX0   496,DU
        24 000220   000230 601000 24                 TNZ     s:9010

      542     9008    2            RAT.B.GREATER_256K (REGISTER) = NODE$ -> ETT.REF$ -> REF.ST$

   9008 24 000221   000000 235100                    LDA     0,,PR0
        24 000222   000001 735000                    ALS     1
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:91   
        24 000223   000001 735000                    ALS     1
        24 000224   600003 236100                    LDQ     3,,PR6
        24 000225   000001 676005 11                 ERQ     RAT+1,AL
        24 000226   200000 376003                    ANQ     65536,DU
        24 000227   000001 656005 11                 ERSQ    RAT+1,AL

      543     9009    2                -> TEMP.B.GREATER_256K;
      544     9010    2        NODE$ -> ETT.STATE = REGISTER;

   9010 24 000230   300000 474500                    LDP4    0,,PR3
        24 000231   000000 720100                    LXL0    0,,PR0
        24 000232   400004 740100                    STX0    4,,PR4

      545     9011
      546     9012    2   END USE_UTILITY;

   9012 24 000233   200012 221300                    LDX1  ! AORQ+2,,AUTO
        24 000234   000001 702211                    TSX2  ! 1,X1
      547     9013
      548     9014        %EJECT;
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:92   
      549     9015    1   END Z8HG$USE_REGISTER;

PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:93   
--  Include file information  --

   Z8H_EXT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8H_RAT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LTS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ST.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ETT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ILS.:Z8A6TOU  cannot be made into a system file and is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8HG$USE_REGISTER.
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:94   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 ITERATION

  ****  Section 001 LblCom ILS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ILS$

  ****  Section 002 LblCom ILS_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ILS_

  ****  Section 003 LblCom ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ETT$

  ****  Section 004 LblCom HEAD_ETT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_ETT$

PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:95   
  ****  Section 005 LblCom ETT_BUCKETS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 ETT_BUCKETS(0:511)

  ****  Section 006 LblCom ETT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ETT_

  ****  Section 007 LblCom ST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 ST$

  ****  Section 008 LblCom ST_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)         1 ST_

  ****  Section 009 LblCom LTS$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 LONG_ITEM$                 0-0-0/w PTR         r     1 LTS$

  ****  Section 010 LblCom LTS_

PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:96   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 LTS_

  ****  Section 011 LblCom RAT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 RAT(0:27)

  ****  Section 012 LblCom NUMBER_OF_PRIMES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 NUMBER_OF_PRIMES

  ****  Section 013 LblCom NUMBER_OF_TEMPS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_TEMPS

  ****  Section 014 LblCom NUMBER_OF_REFS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 NUMBER_OF_REFS

  ****  Section 015 LblCom GENERATING_PTRS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:97   

     0-0-0/b BIT               1 GENERATING_PTRS

  ****  Section 016 LblCom USE_PROC_RETURN

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 USE_PROC_RETURN

  ****  Section 017 LblCom CURRENT_SCOPE$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CURRENT_SCOPE$

  ****  Section 018 LblCom HEAD_REF$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_REF$

  ****  Section 019 LblCom HEAD_TEMP$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 HEAD_TEMP$

  ****  Section 020 LblCom CONST$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 CONST$
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:98   

  ****  Section 021 LblCom HEAD_PRIMES$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 HEAD_PRIMES$

  ****  Section 022 LblCom CUR_LOOP_LEVEL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN              1 CUR_LOOP_LEVEL

  ****  Section 023 LblCom PEPD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC              1 PEPD(0:1)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @NODE$                    13-0-0/w PTR         r     1 @NODE$
     4-0-0/w PTR         r     1 @REGISTER                 10-0-0/b BIT               1 AORQ
     7-0-0/w UBIN              1 LAST_FREED                 6-0-0/w UBIN              1 LAST_USED
    *0-0-0/w PTR         r     1 NODE$                     *0-0-0/w PTR         r     1 NODE$
    14-0-0/w PTR         r     1 P$                         5-0-0/w UBIN              1 REGID
    *0-0-0/w UBIN        r     1 REGISTER

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:99   
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 ILS_STEP_TABLE(0:2)
     0-0-0/w UBIN              1 LTS_STEP(0:37)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(396)         1 ALPHABET                   0-0-0/w STRC(144)         1 ALTER_LTS
     0-0-0/w STRC(3672)        1 ALT_KEY                    0-0-0/w STRC(36864)       1 ARGLIST
     0-0-0/w STRC(396)         1 ARRAY                      0-0-0/w STRC(180)         1 ARRAY_PRESET_LTS
     0-0-0/w STRC(288)         1 BASE_LTS                   0-0-0/w STRC(396)         1 BLOCK
     0-0-0/w STRC(144)         1 BT                         0-0-0/w STRC(396)         1 CD
     0-0-0/w STRC(288)         1 CD_LTS                     0-0-0/w CHAR(4096)        1 CHARS
     0-0-0/w STRC(396)         1 CLASS                      0-0-0/w STRC(396)         1 CONDITION
     0-0-0/w STRC(396)         1 CONST                      0-0-0/w STRC(72)          1 CONT
     0-0-0/w STRC(540)         1 CONTROL_NAME_LTS           0-0-0/w STRC(1872)        1 COPY_FILE
     0-0-0/w STRC(396)         1 DB                         0-0-0/w STRC(396)         1 DCB_
     0-0-0/w STRC(108)         1 DEPENDING_SIZE             0-0-0/w STRC(5472)        1 DIMS
     0-0-0/w STRC(396)         1 DML_ITEM                   0-0-0/w STRC(216)         1 DML_REC
     0-0-0/w STRC(180)   r     1 ETT                        0-0-0/w STRC(73836)       1 EVALUATE
     0-0-0/w STRC(396)         1 FD                         0-0-0/w STRC(1692)        1 FILE_LTS
     0-0-0/w STRC(180)   r     1 ILS                        0-0-0/w STRC(108)         1 INDEXES
     0-0-0/w STRC(360)         1 INIT_LTS                   0-0-0/w STRC(396)         1 INTDEF
     0-0-0/w STRC(180)         1 IO_RESTORE_CHAIN           0-0-0/w STRC(144)         1 KEY
     0-0-0/w STRC(396)         1 LABEL                      0-0-0/w STRC(36864)       1 LCNST
     0-0-0/w STRC(72)          1 LONG                       0-0-0/w STRC        r     1 LTS
     0-0-0/w STRC(360)         1 LTSS                       0-0-0/w STRC(36936)       1 LTS_PTR_ARRAY
     0-0-0/w STRC(396)         1 MNEMONIC                   0-0-0/w STRC(144)         1 NEL
     0-0-0/w STRC(216)         1 OPEN_LTS                   0-0-0/w STRC(144)         1 OPN
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w STRC(396)         1 PARA
     0-0-0/w STRC(144)   r     1 PRIME                      0-0-0/w STRC(396)         1 PROC_
     0-0-0/w STRC(396)         1 PROC_DEF                   0-0-0/w STRC(900)         1 PROC_SUPP
     0-0-0/w STRC(396)         1 RD                         0-0-0/w STRC(216)   r     1 REF
     0-0-0/w STRC(108)         1 RENAMES                    0-0-0/w STRC(720)         1 REPORT_01_LTS
PL6.E3A0      #005=Z8HG$USE_REGISTER File=Z8HG.:Z8A6TSI                          SAT 08/09/97 13:20 Page:100  
     0-0-0/w STRC(432)         1 REPORT_ELEM_LTS            0-0-0/w STRC(252)         1 REPORT_GRP_LTS
     0-0-0/w STRC(1332)        1 REPORT_LTS                 0-0-0/w STRC(144)         1 RVA_LTS
     0-0-0/w STRC(396)         1 SCALAR                     0-0-0/w STRC(396)         1 SD
     0-0-0/w STRC(396)         1 SECTION                    0-0-0/w STRC(396)         1 SEGMENT
     0-0-0/w STRC(360)         1 SEGMENT_LTS                0-0-0/w STRC(396)   r     1 ST
     0-0-0/w STRC(252)         1 SUM_LTS                    0-0-0/w STRC(396)         1 SWITCH
     0-0-0/w STRC(396)         1 SYMBOLIC_CHAR              0-0-0/w STRC(396)         1 SYMDEF_
     0-0-0/w STRC(396)         1 SYMREF_                    0-0-0/w STRC(396)   r     1 TEMP
     0-0-0/d STRC(612)         1 USE                        0-0-0/w STRC(252)         1 USE_SUPP
     0-0-0/w STRC(396)         1 VARIABLE


   Procedure Z8HG$USE_REGISTER requires 157 words for executable code.
   Procedure Z8HG$USE_REGISTER requires 16 words of local(AUTO) storage.

    No errors detected in file Z8HG.:Z8A6TSI    .
