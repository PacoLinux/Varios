

09:13 AUG 09 '97 Z8A_TYPES.:Z8A6SI                                         1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6
    7      %EQU TYD = 0 ; /* DECIMAL (COMP, COMP-3, ETC) */
    8      %EQU TYI = 1 ; /* INTEGER (COMP-6) */
    9      %EQU TYJ = 2 ; /* 16 Bit - Comp-1                    */
   10      %EQU TYO = 3 ; /* OVERPUNCHED (PIC S99 DISPLAY) */
   11      %EQU TYR = 4 ; /* REAL (COMP-11) */
   12      %EQU TYQ = 5 ; /* D.P. (COMP-12) */
   13      %EQU TYE = 6 ; /* EBCDIC (DISPLAY-1) */
   14      %EQU TYH = 7 ; /* COMP-7 (HALF WORD) */
   15      %EQU TYA = 8 ; /* ASCII ALPHANUMERIC */
   16      %EQU TYX = 9 ; /* INDEX */
   17      %EQU TYY =10 ; /* INDEX (IBM) */
   18      %EQU TYF = 11 ; /* EBCDIC numeric */
   19      %EQU TYB = 12 ; /* GBCD */
   20      %EQU TYT = 13 ; /* Typeless for various scratch uses */
   21      %EQU TYN = 14 ; /* Kanji variable (PIC N)            */
   22      %EQU TYK = 15 ; /* 32 Bit - Comp-2                   */
   23      %EQU TYG = 16 ; /* Generic type, ie. Weird so that ST.ID must be checked */
   24      %EQU TYM = 17 ; /* Micro-op string for editing       */
   25      %EQU TYP = 18 ; /* Pointer variable                  */
   26      %EQU TYC = 19 ; /* GBCD numeric                      */
   27
   28      /* Sets of types for use in case statements */
   29
   30      %MACRO SET_OF_NUMERIC_TYPES;
   31
   32        %TYD, %TYI, %TYJ, %TYO, %TYR, %TYQ, %TYH, %TYK, %TYF, %TYC
   33
   34      %MEND;
   35
   36
   37      /* Lengths for each type (if applicable) */
09:13 AUG 09 '97 Z8A_TYPES.:Z8A6SI                                         2    
   38
   39      %EQU TYH_LENGTH  = 2;
   40      %EQU TYI_LENGTH  = 4;
   41      %EQU TYJ_LENGTH  = 2;
   42      %EQU TYK_LENGTH  = 4;
   43      %EQU TYQ_LENGTH  = 8;
   44      %EQU TYR_LENGTH  = 4;
   45      %EQU TYX_LENGTH  = 8;
   46      %EQU TYY_LENGTH  = 6;
   47
   48
   49      /* Type significance -- This is different from the length in that
   50                              the length is what is in the ST descriptor
   51                              and the storage it consumes, whereas the
   52                              significance is the digits of precision
   53                              that particular type can represent.      */
   54
   55      %EQU TYH_SIGNIFICANCE = 6;
   56      %EQU TYI_SIGNIFICANCE = 11;
   57      %EQU TYJ_SIGNIFICANCE = 5;
   58      %EQU TYK_SIGNIFICANCE = 10;
   59      %EQU TYQ_SIGNIFICANCE = 26;
   60      %EQU TYR_SIGNIFICANCE = 26;
   61
   62      /* Maximum values */
   63
   64      %EQU TYH_MAX_VALUE = 131071; /* Min value is - (%TYH_MAX_VALUE + 1) */
   65      %EQU TYJ_MAX_VALUE = 32767 ; /* Min value is - (%TYJ_MAX_VALUE + 1) */
   66      %EQU TYK_MAX_VALUE = 2147483647; /* Min value is
   67                                          - (%TYK_MAX_VALUE + 1)          */
   68      %EQU TYI_MAX_VALUE = 34359738367;/* Min value is
   69                                          - (%TYI_MAX_VALUE + 1)          */
   70
   71
   72      %EQU CONTEXT_NUMERIC       = 00;
   73      %EQU CONTEXT_ALPHA_NUMERIC = 01;
   74      %EQU CONTEXT_UNKNOWN       = 02;
09:13 AUG 09 '97 Z8A_TYPES.:Z8A6SI                                         3    
   75      %EQU CONTEXT_KANJI         = 03;
   76
   77           %SET TYPE_MATRIX_SIZE = 191;
   78
   79      %MACRO TYPE_MATRIX_BEGIN ( @NAME = );
   80
   81           %SET TYPE_MATRIX_ENTRIES = 0;
   82                DCL 1 @NAME ALIGNED CONSTANT,
   83
   84      %MEND;
   85
   86
   87      %MACRO TYPE_MATRIX_ENTRY ( @LOP = , @ROP = , @LOP_BECOMES = , @ROP_BECOMES = );
   88
   89           2 * BIT(1)   UNAL INIT('0'B),
   90           2 * UBIN(4)  UNAL INIT(@LOP),
   91           2 * UBIN(4)  UNAL INIT(@ROP),
   92           2 * BIT(1)   UNAL INIT('1'B),
   93           2 * UBIN(4)  UNAL INIT(@LOP_BECOMES),
   94           2 * UBIN(4)  UNAL INIT(@ROP_BECOMES),
   95
   96           %SET TYPE_MATRIX_ENTRIES = TYPE_MATRIX_ENTRIES + 1;
   97
   98      %MEND;
   99
  100
  101      %MACRO TYPE_MATRIX_END;
  102
  103
  104      %SET FILLER = (TYPE_MATRIX_SIZE - TYPE_MATRIX_ENTRIES);
  105
  106           2 * (0:%(FILLER - 1)),
  107              3 * BIT(1) UNAL INIT('0'B * %FILLER),
  108              3 * UBIN(4) UNAL INIT(0 * %FILLER),
  109              3 * UBIN(4) UNAL INIT(0 * %FILLER),
  110              3 * BIT(1) UNAL INIT('1'B * %FILLER),
  111              3 * UBIN(8) UNAL INIT(0 * %FILLER);
09:13 AUG 09 '97 Z8A_TYPES.:Z8A6SI                                         4    
  112
  113      %MEND;
  114
  115      %EJECT;

09:13 AUG 09 '97 Z8A_TYPES.:Z8A6SI                                         5    
  116      %MACRO TYPE_DESC;
  117
  118           2 TYPE     SBIN WORD UNAL,
  119           2 DESC,
  120             %DESCRIPTOR (LVL = 3);
  121           2 SIZ$     PTR,
  122           2 SSOP$    PTR;
  123
  124      %MEND;
  125
  126
  127
  128      %MACRO INIT_TYPE_DESC (@TYPE_DESC = ,
  129                             @TYPE      = %TYI,
  130                             @SIZ$      = "ADDR(NIL)",
  131                             @SSOP$     = "ADDR(NIL)",
  132                             @DESC      = );
  133
  134           DO;
  135             %LSET @DESCRIPTOR@ = CHARTEXT(CONCAT(TEXTCHAR(@TYPE_DESC), '.DESC'));
  136
  137             %IF TEXTCHAR(@TYPE) = 'TYI';
  138               %IF (TEXTCHAR(@DESC) = '');
  139                 %BUILD_BINARY_DESC(@DESC = %@DESCRIPTOR@ ,
  140                                    @LENGTH = %TYI_LENGTH );
  141               %ELSE;
  142                 @TYPE_DESC.DESC = @DESC;
  143               %ENDIF;
  144
  145               @TYPE_DESC.TYPE = @TYPE;
  146               @TYPE_DESC.SIZ$ = @SIZ$;
  147               @TYPE_DESC.SSOP$ = @SSOP$;
  148             %ELSEIF TEXTCHAR(@TYPE) = 'TYD';
  149               %IF (TEXTCHAR(@DESC) = '');
  150                 %PACK_NDSC( @DESC     = %@DESCRIPTOR@ ,
  151                             @LENGTH   = COMCOM.MAX_TEMP_LENGTH ,
  152                             @TN       = %NDSC9 ,
09:13 AUG 09 '97 Z8A_TYPES.:Z8A6SI                                         6    
  153                             @SIGN     = %NO_SIGN );
  154               %ELSE;
  155                 @TYPE_DESC.DESC = @DESC;
  156               %ENDIF;
  157
  158               @TYPE_DESC.TYPE = @TYPE;
  159               @TYPE_DESC.SIZ$ = @SIZ$;
  160               @TYPE_DESC.SSOP$ = @SSOP$;
  161             %ELSE;
  162               %IF (TEXTCHAR(@DESC) = '');
  163                 %ERROR (TRUE, 'DESC parameter missing in INIT_TYPE_DESC',2);
  164               %ELSE;
  165                 @TYPE_DESC.DESC  = @DESC;
  166                 @TYPE_DESC.SSOP$ = @SSOP$;
  167                 @TYPE_DESC.SIZ$  = @SIZ$;
  168                 @TYPE_DESC.TYPE  = @TYPE;
  169               %ENDIF;
  170             %ENDIF;
  171           END;
  172
  173      %MEND;

