VERSION A06

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        Z8EF$PARSE_PROC_DIV : PROC;
        7        7
        8        8        %EQU PHASE = 1;
        9        9        %INCLUDE Z8A_DEFC;
       10       77        %INCLUDE Z8A_SUPP_MAC;
       11     2477        %INCLUDE Z8A_SYS_FILE;
       12     8752        %INCLUDE Z8A_ERR_NUMS;
       13     9516        %INCLUDE Z8A_COMCOM;
       14    10166        %INCLUDE Z8A_DNT;
       15    10387
       16    10388        %INCLUDE Z8E_PD_SUBS;
       17    10417        %INCLUDE Z8E_PDPDA_S;
       18    11110        %INCLUDE Z8E_P_OLAY;
       19    11123        %INCLUDE Z8E_STACKS;
       20    13389        %INCLUDE Z8E_O1COM;
       21    14150        %INCLUDE Z8A_TYPES;
       22    14324        %INCLUDE Z8E_WINDOW;
       23    16394        %INCLUDE Z8A_P_STATE;
       24    16404
       25    16405        /* If parse transitions are to be monitored, set PARSING_STATS
       26    16406           to true in the file Z8E_P_STATS,
       27    16407           and set PARSING_STATS_FILENAME = file name for data retention
       28    16408        */
       29    16409        %EQU PARSING_STATS_FILENAME = 'PD_STATS';
       30    16410
       31    16411        %INCLUDE Z8A_P_MACROS;
       32    17221
       33    17222
       34    17223    1   DCL Z8EN$SEMANTICS_PROC_DIV ENTRY;
       35    17224    1   DCL Z8EL$LEX ENTRY;
       36    17225    1   DCL Z9AT$TERMINATOR ENTRY;
       37    17226    1   DCL Z8EE$CREATE_DUMMY_TOKEN ENTRY(4);
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:2    
       38    17227
       39    17228
       40    17229    1   DCL SEMANTIC_ACTION SBIN WORD EXT; /* Set to semantic action to be executed */
       41    17230
       42    17231
       43    17232        %EJECT;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:3    
       44    17233        /* The following macros and code may need to be customized
       45    17234           for a specific application.
       46    17235        */
       47    17236
       48    17237
       49    17238        %MACRO CREATE_DUMMY_TOKEN;
       50    17239          CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,
       51    17240                                    BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX), 36),
       52    17241                                        O1COM.ERRLINE,
       53    17242                                        O1COM.ERRCOL);
       54    17243        %MEND;
       55    17244
       56    17245
       57    17246        %MACRO TERMINATE;
       58    17247          /* Insert code for abnormal termination of parser */
       59    17248          CALL Z9AT$TERMINATOR;
       60    17249        %MEND;
       61    17250
       62    17251
       63    17252        %EQU DI_CHAR_LEN_MAX = 100;  /* Maximum length of an error plug-in */
       64    17253
       65    17254
       66    17255
       67    17256        %MACRO ERRORPROC;
       68    17257        ERROR : PROC(ERROR_TYPE, PLUG1$, PLUG2$);
       69    17258
       70    17259        DCL ERROR_TYPE SBIN WORD;
       71    17260        DCL PLUG1$ PTR;  /* TO DNT */
       72    17261        DCL PLUG2$ PTR;  /* TO DNT */
       73    17262
       74    17263        DCL NEWPLUG1$ PTR;
       75    17264        DCL NEWPLUG2$ PTR;
       76    17265        DCL Z8AE$ERROR ENTRY(12);
       77    17266
       78    17267        DCL 1 PARSEDNT BASED ALIGNED,
       79    17268              2 TEXT,
       80    17269                3 LENGTH SBIN WORD,
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:4    
       81    17270                3 NAME CHAR(PARSEDNT.TEXT.LENGTH);
       82    17271
       83    17272        /* ERROR LOCATION IS SET WITH THE RESET_ERROR_LOC MACRO BEFORE
       84    17273           THE ERROR PROCEDURE IS CALLED */
       85    17274
       86    17275        IF ADDR(PLUG1$) = ADDR(NIL) THEN
       87    17276          /* Only error type is specified */
       88    17277          CALL Z8AE$ERROR(ERROR_TYPE, O1COM.ERRLINE, O1COM.ERRCOL);
       89    17278        ELSE
       90    17279          IF ADDR(PLUG2$) = ADDR(NIL) THEN
       91    17280            /* Only 1 plug is specified */
       92    17281            DO;
       93    17282              %NEW_DNT(@POINTER = NEWPLUG1$,
       94    17283                          @SIZE = "PLUG1$ -> PARSEDNT.TEXT.LENGTH",
       95    17284                          @NAME = "PLUG1$ -> PARSEDNT.TEXT.NAME");
       96    17285              CALL Z8AE$ERROR(ERROR_TYPE, O1COM.ERRLINE, O1COM.ERRCOL, NEWPLUG1$);
       97    17286            END;
       98    17287          ELSE
       99    17288            /* 2 PLUGS WERE SPECIFIED */
      100    17289            DO;
      101    17290              %NEW_DNT(@POINTER = NEWPLUG1$,
      102    17291                            @SIZE = "PLUG1$ -> PARSEDNT.TEXT.LENGTH",
      103    17292                            @NAME = "PLUG1$ -> PARSEDNT.TEXT.NAME");
      104    17293              %NEW_DNT(@POINTER = NEWPLUG2$,
      105    17294                          @SIZE = "PLUG2$ -> PARSEDNT.TEXT.LENGTH",
      106    17295                          @NAME = "PLUG2$ -> PARSEDNT.TEXT.NAME");
      107    17296            CALL Z8AE$ERROR (ERROR_TYPE, O1COM.ERRLINE, O1COM.ERRCOL, NEWPLUG1$, NEWPLUG2$);
      108    17297            END;
      109    17298
      110    17299        END ERROR;
      111    17300        %MEND;
      112    17301
      113    17302
      114    17303
      115    17304        %MACRO RESET_ERROR_LOC;
      116    17305
      117    17306          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:5    
      118    17307          DO;
      119    17308             O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
      120    17309             O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
      121    17310          END;
      122    17311        %MEND;
      123    17312
      124    17313
      125    17314        %MACRO CREATE_EMPTY_TERMINAL_ON_LX_STK;
      126    17315          DO;
      127    17316            /* Fill in LX_STK(LX_TOP) with an empty terminal value */
      128    17317            %INIT_LX_TERMINAL ( @POINTER = "ADDR(O1COM.LX_STK(O1COM.LX_TOP))",
      129    17318                                @SYMBOL = %EMPTY);
      130    17319          END;
      131    17320        %MEND;
      132    17321
      133    17322
      134    17323        %MACRO LAST_SHIFTED_LOC;
      135    17324
      136    17325          /* Set the location of the last shifted token which differs
      137    17326             from the location of the last token scanned when error
      138    17327             correction is done.
      139    17328          */
      140    17329          DO;
      141    17330            COMCOM.CURRENT.LINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
      142    17331            COMCOM.CURRENT.COLUMN = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
      143    17332          END;
      144    17333        %MEND;
      145    17334
      146    17335
      147    17336        %MACRO CALL_SEMANTICS(A=0);
      148    17337
      149    17338          /* Call the semantics routine with the designated action.
      150    17339          */
      151    17340          SEMANTIC_ACTION = BITBIN(A);
      152    17341          CALL Z8EN$SEMANTICS_PROC_DIV;
      153    17342
      154    17343        %MEND;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:6    
      155    17344
      156    17345
      157    17346        %MACRO CALL_SCANNER;
      158    17347
      159    17348          /* Call the scanner to obtain the next token.  The token should be
      160    17349             placed in LA_STK(LA_PUT).
      161    17350          */
      162    17351          CALL Z8EL$LEX;
      163    17352
      164    17353        %MEND;
      165    17354
      166    17355        %ERRORPROC;
      167    17565
      168    17566        %IF PARSING_STATS;
      169    17567 C        %RESTORE_PARSER_STATS_PROC;
      170    17568 C        %DUMP_Z8E_P_STATS_PROC;
      171    17569        %ENDIF;
      172    17570
      173    17571        %RESTORE_PARSER_STATS;
      174    17576
      175    17577
      176    17578
      177    17579        %LIST;
      178    17580
      179    17581    2   DO WHILE '1'B;
      180    17582
      181    17583          %GET_ACTION_ITEM;
             17584               /* Get the next action from the action table.  This will be
             17585                  either a shift, reduce, or an error.
             17586               */
             17587    2     IF ACTION_COL.BASE(O1COM.STATE) = 0 THEN
             17588    3       DO;
             17589              %IF PARSING_STATS;
             17590 C            %INC_ACTION_COL_STATS(I=O1COM.STATE);
             17591              %ENDIF;
             17592    3         ACTION = ACTION_COL.DEFAULT(O1COM.STATE);
             17593    3       END;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:7    
             17594    2     ELSE
             17595    3       DO;
             17596              %AT_LEAST_ONE_TOKEN;
             17597               /* Make sure at least one token is available to
             17598                   a shift operation.
             17599               */
             17600    4     DO;
             17601            %IF LOCALLY_LEAST_COST_RECOVERY;
             17602    4         IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             17603    4           IF O1COM.CORRECTION.LEN = 0 AND O1COM.CORRECTION.INDX = 0 THEN
             17604    5             DO;
             17605                    %CALL_SCANNER;
             17606          /* Call the scanner to obtain the next token.  The token should be
             17607             placed in LA_STK(LA_PUT).
             17608          */
             17609    5     CALL Z8EL$LEX;
             17611    5               O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17612    5               O1COM.LA_CNT = 1;
             17613    5             END;
             17614    4           ELSE
             17615    4             IF O1COM.CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */
             17616    5               DO;
             17617                      %CREATE_DUMMY_TOKEN;
             17618    5     CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,
             17619    5                                   BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX),
             17619                                            36),
             17620    5                                   O1COM.ERRLINE,
             17621    5                                   O1COM.ERRCOL);
             17623    5                 O1COM.CORRECTION.LEN   = O1COM.CORRECTION.LEN - 1;
             17624    5                 O1COM.CORRECTION.INDX  = O1COM.CORRECTION.INDX + 1;
             17625    5                 O1COM.LA_GET           = O1COM.LA_PUT;
             17626    5                 O1COM.LA_CNT           = 1;
             17627    5               END;
             17628    4             ELSE
             17629    5               DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */
             17630    5                 O1COM.CORRECTION.INDX  = 0;
             17631    5                 O1COM.LA_CNT           = O1COM.ERR_LA_CNT;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:8    
             17632    5                 O1COM.LA_PUT           = O1COM.ERR_LA_PUT;
             17633    5                 O1COM.LA_GET           = O1COM.ERR_LA_GET;
             17634    5               END;
             17635            %ELSE;
             17636 C            IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             17637 C              IF NOT PANIC_MODE_IN_PROGRESS THEN
             17638 C                DO;
             17639 C                  %CALL_SCANNER;
             17640 C                  O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17641 C                  O1COM.LA_CNT = 1;
             17642 C                END;
             17643 C              ELSE
             17644 C                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
             17645 C                  O1COM.LA_CNT = O1COM.ERR_LA_CNT;
             17646 C                  O1COM.LA_PUT = O1COM.ERR_LA_PUT;
             17647 C                  O1COM.LA_GET = O1COM.ERR_LA_GET;
             17648 C       DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.
             17648 C      LA_GET)) ~= O1COM.STATE;
             17649 C                    IF O1COM.LA_STK.SYMBOL(O1COM.LA_GET) = %TERM_EOF_SYM THEN
             17650 C                      DO;
             17651 C                        %RESET_ERROR_LOC;
             17652 C                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
             17653 C                        %TERMINATE;
             17654 C                      END;
             17655 C                    O1COM.LA_CNT = O1COM.LA_CNT - 1;
             17656 C                    O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
             17657 C                    IF O1COM.LA_CNT < 1 THEN
             17658 C                      DO;
             17659 C                        %CALL_SCANNER;
             17660 C                        O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17661 C                        O1COM.LA_CNT = 1;
             17662 C                      END;
             17663 C                  END;
             17664 C                  PANIC_MODE_IN_PROGRESS = '0'B;
             17665 C                  %RESET_ERROR_LOC;
             17666 C                  CALL ERROR (%E$PARSING_RESUMED);
             17667 C                END;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:9    
             17668              %ENDIF;
             17669    4     END;
             17671    3         INDX = ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.LA_GET);
             17672    3         IF ACTION_ROW.CHECK(INDX) = O1COM.STATE THEN
             17673    4           DO;
             17674                  %IF PARSING_STATS;
             17675 C                %INC_ACTION_ROW_STATS(I=INDX);
             17676                  %ENDIF;
             17677    4             ACTION = ACTION_ROW.NEXT(INDX);
             17678    4             IF ACTION = 0 THEN
             17679    5               DO;
             17680                      %IF LOCALLY_LEAST_COST_RECOVERY;
             17681                        %CLEAR_SEMANTIC_ACTIONS;
             17682               /* We are about to do a shift and know that no error has
             17683                  occurred;  therefore, do all semantic actions which have
             17684                  been accumulated.
             17685               */
             17686    6   DO;
             17687    6     O1COM.ALT_LX_TOP    = O1COM.LX_TOP;
             17688    6     O1COM.RED_STACK_TOP = O1COM.RED_STACK_TOP - 2;
             17689    7     DO INDX = 0 TO O1COM.RED_STACK_TOP  BY 2;
             17690    7    O1COM.LX_TOP = O1COM.RED_STACK(INDX + 1);
             17691    7       O1COM.REDUCTION = O1COM.RED_STACK(INDX);
             17692    7       IF PRODR.SEMANTIC(O1COM.REDUCTION) > 0 THEN
             17693    8         DO;
             17694                %CALL_SEMANTICS(A="BINBIT(PRODR.SEMANTIC(O1COM.REDUCTION),36)");
             17695          /* Call the semantics routine with the designated action.
             17696          */
             17697    8     SEMANTIC_ACTION = BITBIN(A);
             17698    8     CALL Z8EN$SEMANTICS_PROC_DIV;
             17700    8         END;
             17701    7       IF PRODR.POPSTACK(O1COM.REDUCTION) = 0 THEN
             17702    8         DO;
             17703    8           O1COM.LX_TOP = O1COM.LX_TOP + 1;
             17704                %CREATE_EMPTY_TERMINAL_ON_LX_STK;
             17705    9     DO;
             17706            /* Fill in LX_STK(LX_TOP) with an empty terminal value */
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:10   
             17707            %INIT_LX_TERMINAL ( @POINTER = "ADDR(O1COM.LX_STK(O1COM.LX_TOP))",
             17708                                @SYMBOL = %EMPTY);
             17709   10     DO;
             17710   10       @POINTER -> LX_TERMINAL.ID     = %LX_TERMINAL;
             17711   10       @POINTER -> LX_TERMINAL.B      = '0'B;
             17712            %IF (TEXTCHAR(@BERROR) ~= '');
             17713 C             @POINTER -> LX_TERMINAL.B.ERROR = @BERROR;
             17714            %ENDIF;
             17715   10       @POINTER -> LX_TERMINAL.TYPE   = @TYPE %;
             17716            %IF (TEXTCHAR(@LA_ITEM) = '');
             17717   10         @POINTER -> LX_TERMINAL.LINK   = @LINK;
             17718            %ENDIF;
             17719   10       @POINTER -> LX_TERMINAL.ST$    = @ST$ ;
             17720   10       @POINTER -> LX_TERMINAL.SYMBOL = @SYMBOL %;
             17721   10       @POINTER -> LX_TERMINAL.DNT$   = @DNT$;
             17722   10       @POINTER -> LX_TERMINAL.LINE   = @LINE;
             17723   10       @POINTER -> LX_TERMINAL.COLUMN = @COLUMN;
             17724   10     END;
             17726    9     END;
             17728    8         END;
             17729    7     END;
             17730    6     O1COM.RED_STACK_TOP  = 0;
             17731    6     O1COM.LX_TOP         = O1COM.ALT_LX_TOP;
             17732    6     O1COM.IED_FLAG       = '0'B;
             17733    6   END;
             17735                      %ENDIF;
             17736                      %DUMP_PARSER_STATS;
             17737          %IF PARSING_STATS;
             17738 C           CALL DUMP_PARSER_STATS;
             17739          %ENDIF;
             17741                      %LAST_SHIFTED_LOC;
             17742          /* Set the location of the last shifted token which differs
             17743             from the location of the last token scanned when error
             17744             correction is done.
             17745          */
             17746    6     DO;
             17747    6       COMCOM.CURRENT.LINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:11   
             17748    6       COMCOM.CURRENT.COLUMN = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
             17749    6     END;
             17751    5                 RETURN;
             17752    5               END;
             17753    4           END;
             17754    3         ELSE
             17755    4           DO;
             17756                  %IF PARSING_STATS;
             17757 C                %INC_ACTION_COL_STATS(I=O1COM.STATE);
             17758                  %ENDIF;
             17759    4             ACTION = ACTION_COL.DEFAULT(O1COM.STATE);
             17760    4           END;
             17761    3       END;
      182    17763
      183    17764    2     IF ACTION < 0 THEN
      184    17765            %REDUCE;
             17766               /* Reduce the symbols and states on the stack by the appropriate
             17767                  production, after calling any required semantic routine.
             17768                  The token stack (LX_STK) is left with one dummy token to
             17769                  represent the non_terminal that was just reduced.  This non_terminal
             17770                  and the state on the stack after the reduction are used to
             17771                  index into the GOTO table to obtain the next state.
             17772               */
             17773    3         DO;
             17774    3           ACTION          = - ACTION;
             17775                %IF LOCALLY_LEAST_COST_RECOVERY;
             17776                  %SAVE_IED_STATE;
             17777               /* Our error correction scheme requires that we detect errors
             17778                  immediately;  that is, before we do any reductions.
             17779                  Unfortunately, it is a property of LALR parsers that
             17780                  some reductions may be performed upon  encountering an
             17781                  error symbol, before recognizing the error.  Therefore, we
             17782                  must save the state of the parser at any reduction and stack
             17783                  all semantic calls until the next shift has been performed,
             17784                  which means the next token has been accepted.
             17785               */
             17786    4     DO;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:12   
             17787    4       IF NOT O1COM.IED_FLAG THEN
             17788    5         DO;
             17789    5           O1COM.ALT_PARSE_STACK_IDX = O1COM.PARSE_STACK_IDX;
             17790    5           PARSE_STACK_IDX_IN_CHARS = O1COM.PARSE_STACK_IDX * 4 + 4;
             17791    5           ADDR(O1COM.ALT_PARSE_STACK) -> PARSE_STACK_USED
             17792    5               = ADDR(O1COM.PARSE_STACK) -> PARSE_STACK_USED;
             17793    5           O1COM.ALT_LX_TOP          = O1COM.LX_TOP;
             17794    5           O1COM.IED_FLAG            = '1'B;
             17795    5         END;
             17796    4     END;
             17798                %ENDIF;
             17799                %IF LOCALLY_LEAST_COST_RECOVERY;
             17800                  %PUSH_SEMANTIC_ACTION;
             17801               /* Do to the immediate error detection problem, we need to
             17802                  save all semantic actions until a shift is about to be done,
             17803                  signaling that no error has been encountered.
             17804               */
             17805    4   DO;
             17806    4     IF O1COM.RED_STACK_TOP < %RED_STACK_MAX - 2 THEN
             17807    5       DO;
             17808    5         O1COM.RED_STACK(O1COM.RED_STACK_TOP)     = ACTION;
             17809    5         O1COM.RED_STACK(O1COM.RED_STACK_TOP + 1) = O1COM.LX_TOP;
             17810    5         O1COM.RED_STACK_TOP                = O1COM.RED_STACK_TOP + 2;
             17811    5       END;
             17812    4     ELSE
             17813    5       DO;
             17814              %AT_LEAST_ONE_TOKEN;
             17815               /* Make sure at least one token is available to
             17816                   a shift operation.
             17817               */
             17818    6     DO;
             17819            %IF LOCALLY_LEAST_COST_RECOVERY;
             17820    6         IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             17821    6           IF O1COM.CORRECTION.LEN = 0 AND O1COM.CORRECTION.INDX = 0 THEN
             17822    7             DO;
             17823                    %CALL_SCANNER;
             17824          /* Call the scanner to obtain the next token.  The token should be
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:13   
             17825             placed in LA_STK(LA_PUT).
             17826          */
             17827    7     CALL Z8EL$LEX;
             17829    7               O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17830    7               O1COM.LA_CNT = 1;
             17831    7             END;
             17832    6           ELSE
             17833    6             IF O1COM.CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */
             17834    7               DO;
             17835                      %CREATE_DUMMY_TOKEN;
             17836    7     CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,
             17837    7                                   BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX),
             17837                                            36),
             17838    7                                   O1COM.ERRLINE,
             17839    7                                   O1COM.ERRCOL);
             17841    7                 O1COM.CORRECTION.LEN   = O1COM.CORRECTION.LEN - 1;
             17842    7                 O1COM.CORRECTION.INDX  = O1COM.CORRECTION.INDX + 1;
             17843    7                 O1COM.LA_GET           = O1COM.LA_PUT;
             17844    7                 O1COM.LA_CNT           = 1;
             17845    7               END;
             17846    6             ELSE
             17847    7               DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */
             17848    7                 O1COM.CORRECTION.INDX  = 0;
             17849    7                 O1COM.LA_CNT           = O1COM.ERR_LA_CNT;
             17850    7                 O1COM.LA_PUT           = O1COM.ERR_LA_PUT;
             17851    7                 O1COM.LA_GET           = O1COM.ERR_LA_GET;
             17852    7               END;
             17853            %ELSE;
             17854 C            IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             17855 C              IF NOT PANIC_MODE_IN_PROGRESS THEN
             17856 C                DO;
             17857 C                  %CALL_SCANNER;
             17858 C                  O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17859 C                  O1COM.LA_CNT = 1;
             17860 C                END;
             17861 C              ELSE
             17862 C                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:14   
             17863 C                  O1COM.LA_CNT = O1COM.ERR_LA_CNT;
             17864 C                  O1COM.LA_PUT = O1COM.ERR_LA_PUT;
             17865 C                  O1COM.LA_GET = O1COM.ERR_LA_GET;
             17866 C       DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.
             17866 C      LA_GET)) ~= O1COM.STATE;
             17867 C                    IF O1COM.LA_STK.SYMBOL(O1COM.LA_GET) = %TERM_EOF_SYM THEN
             17868 C                      DO;
             17869 C                        %RESET_ERROR_LOC;
             17870 C                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
             17871 C                        %TERMINATE;
             17872 C                      END;
             17873 C                    O1COM.LA_CNT = O1COM.LA_CNT - 1;
             17874 C                    O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
             17875 C                    IF O1COM.LA_CNT < 1 THEN
             17876 C                      DO;
             17877 C                        %CALL_SCANNER;
             17878 C                        O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17879 C                        O1COM.LA_CNT = 1;
             17880 C                      END;
             17881 C                  END;
             17882 C                  PANIC_MODE_IN_PROGRESS = '0'B;
             17883 C                  %RESET_ERROR_LOC;
             17884 C                  CALL ERROR (%E$PARSING_RESUMED);
             17885 C                END;
             17886              %ENDIF;
             17887    6     END;
             17889              %RED_STACK_OVERFLOW;
             17890               /* The reduction stack for semantic calls has overflowed,
             17891                  so abort the compilation.
             17892               */
             17893    6   DO;
             17894        %RESET_ERROR_LOC;
             17895          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
             17896    7     DO;
             17897    7        O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
             17898    7        O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
             17899    7     END;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:15   
             17901    6     CALL ERROR(%E$RED_STACK_OVERFLOW_ERROR);
             17902          %TERMINATE;
             17903          /* Insert code for abnormal termination of parser */
             17904    6     CALL Z9AT$TERMINATOR;
             17906    6   END;
             17908    5       END;
             17909    4   END;
             17911                %ELSE;
             17912 C                IF PRODR.SEMANTIC(ACTION) > 0 THEN
             17913 C                  DO;
             17914 C                    O1COM.REDUCTION = ACTION;
             17915 C                    %CALL_SEMANTICS(A="BINBIT(PRODR.SEMANTIC(O1COM.REDUCTION),36)");
             17916 C                  END;
             17917                %ENDIF;
             17918                %IF PARSING_STATS;
             17919 C                %INC_PRODR_STATS(I=ACTION);
             17920                %ENDIF;
             17921    3           O1COM.PARSE_STACK_IDX = O1COM.PARSE_STACK_IDX - PRODR.POPSTACK(ACTION);
             17922    3        O1COM.LX_TOP       = O1COM.PARSE_STACK_IDX + 1;
             17923                %IF ~ LOCALLY_LEAST_COST_RECOVERY;
             17924 C                IF PRODR.POPSTACK(ACTION) = 0 THEN
             17925 C                  DO;
             17926 C                    %CREATE_EMPTY_TERMINAL_ON_LX_STK;
             17927 C                  END;
             17928                %ENDIF;
             17929                /* Get new state */
             17930    3           NT = PRODR.GOAL(ACTION);
             17931    3           IF GOTO_COL.BASE(NT) = 0 THEN
             17932    4             DO;
             17933                    %IF PARSING_STATS;
             17934 C                  %INC_GOTO_COL_STATS(I=NT);
             17935                    %ENDIF;
             17936    4               O1COM.STATE = GOTO_COL.DEFAULT(NT);
             17937    4             END;
             17938    3           ELSE
             17939    4             DO;
             17940    4               INDX = GOTO_COL.BASE(NT) + O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX);
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:16   
             17941    4               IF GOTO_ROW.CHECK(INDX) = NT THEN
             17942    5                 DO;
             17943                        %IF PARSING_STATS;
             17944 C                      %INC_GOTO_ROW_STATS(I=INDX);
             17945                        %ENDIF;
             17946    5                   O1COM.STATE = GOTO_ROW.NEXT (INDX);
             17947    5                 END;
             17948    4               ELSE
             17949    5                 DO;
             17950                        %IF PARSING_STATS;
             17951 C                      %INC_GOTO_COL_STATS(I=NT);
             17952                        %ENDIF;
             17953    5                   O1COM.STATE = GOTO_COL.DEFAULT(NT);
             17954    5                 END;
             17955    4             END;
             17956                /* Push state on stack */
             17957    3           IF O1COM.PARSE_STACK_IDX = %PARSE_STACK_MAX THEN
             17958    4             DO;
             17959                    %AT_LEAST_ONE_TOKEN;
             17960               /* Make sure at least one token is available to
             17961                   a shift operation.
             17962               */
             17963    5     DO;
             17964            %IF LOCALLY_LEAST_COST_RECOVERY;
             17965    5         IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             17966    5           IF O1COM.CORRECTION.LEN = 0 AND O1COM.CORRECTION.INDX = 0 THEN
             17967    6             DO;
             17968                    %CALL_SCANNER;
             17969          /* Call the scanner to obtain the next token.  The token should be
             17970             placed in LA_STK(LA_PUT).
             17971          */
             17972    6     CALL Z8EL$LEX;
             17974    6               O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17975    6               O1COM.LA_CNT = 1;
             17976    6             END;
             17977    5           ELSE
             17978    5             IF O1COM.CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:17   
             17979    6               DO;
             17980                      %CREATE_DUMMY_TOKEN;
             17981    6     CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,
             17982    6                                   BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX),
             17982                                            36),
             17983    6                                   O1COM.ERRLINE,
             17984    6                                   O1COM.ERRCOL);
             17986    6                 O1COM.CORRECTION.LEN   = O1COM.CORRECTION.LEN - 1;
             17987    6                 O1COM.CORRECTION.INDX  = O1COM.CORRECTION.INDX + 1;
             17988    6                 O1COM.LA_GET           = O1COM.LA_PUT;
             17989    6                 O1COM.LA_CNT           = 1;
             17990    6               END;
             17991    5             ELSE
             17992    6               DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */
             17993    6                 O1COM.CORRECTION.INDX  = 0;
             17994    6                 O1COM.LA_CNT           = O1COM.ERR_LA_CNT;
             17995    6                 O1COM.LA_PUT           = O1COM.ERR_LA_PUT;
             17996    6                 O1COM.LA_GET           = O1COM.ERR_LA_GET;
             17997    6               END;
             17998            %ELSE;
             17999 C            IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             18000 C              IF NOT PANIC_MODE_IN_PROGRESS THEN
             18001 C                DO;
             18002 C                  %CALL_SCANNER;
             18003 C                  O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             18004 C                  O1COM.LA_CNT = 1;
             18005 C                END;
             18006 C              ELSE
             18007 C                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
             18008 C                  O1COM.LA_CNT = O1COM.ERR_LA_CNT;
             18009 C                  O1COM.LA_PUT = O1COM.ERR_LA_PUT;
             18010 C                  O1COM.LA_GET = O1COM.ERR_LA_GET;
             18011 C       DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.
             18011 C      LA_GET)) ~= O1COM.STATE;
             18012 C                    IF O1COM.LA_STK.SYMBOL(O1COM.LA_GET) = %TERM_EOF_SYM THEN
             18013 C                      DO;
             18014 C                        %RESET_ERROR_LOC;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:18   
             18015 C                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
             18016 C                        %TERMINATE;
             18017 C                      END;
             18018 C                    O1COM.LA_CNT = O1COM.LA_CNT - 1;
             18019 C                    O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
             18020 C                    IF O1COM.LA_CNT < 1 THEN
             18021 C                      DO;
             18022 C                        %CALL_SCANNER;
             18023 C                        O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             18024 C                        O1COM.LA_CNT = 1;
             18025 C                      END;
             18026 C                  END;
             18027 C                  PANIC_MODE_IN_PROGRESS = '0'B;
             18028 C                  %RESET_ERROR_LOC;
             18029 C                  CALL ERROR (%E$PARSING_RESUMED);
             18030 C                END;
             18031              %ENDIF;
             18032    5     END;
             18034                    %PARSE_STACK_OVERFLOW;
             18035               /* The parse stack has overflowed, so abort the compilation.
             18036               */
             18037    5   DO;
             18038        %RESET_ERROR_LOC;
             18039          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
             18040    6     DO;
             18041    6        O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
             18042    6        O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
             18043    6     END;
             18045    5     CALL ERROR (%E$PARSE_STACK_OVERFLOW_ERROR);
             18046          %TERMINATE;
             18047          /* Insert code for abnormal termination of parser */
             18048    5     CALL Z9AT$TERMINATOR;
             18050    5   END;
             18052    4             END;
             18053    3           ELSE
             18054    4             DO;
             18055    4               O1COM.PARSE_STACK_IDX               = O1COM.PARSE_STACK_IDX + 1;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:19   
             18056    4               O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX)  = O1COM.STATE;
             18057    4             END;
             18058    3         END;
      185    18060    2     ELSE
      186    18061    2       IF ACTION > 0 THEN
      187    18062              %SHIFT;
             18063               /* Shift the symbol and go to the next state.
             18064                  The symbol is always a terminal, and it is placed on the token
             18065                  stack (LX_STK) for reference by a semantics action ala Dave
             18066                  Ward's parser.
             18067               */
             18068    3       DO;
             18069              %IF LOCALLY_LEAST_COST_RECOVERY;
             18070                %CLEAR_SEMANTIC_ACTIONS;
             18071               /* We are about to do a shift and know that no error has
             18072                  occurred;  therefore, do all semantic actions which have
             18073                  been accumulated.
             18074               */
             18075    4   DO;
             18076    4     O1COM.ALT_LX_TOP    = O1COM.LX_TOP;
             18077    4     O1COM.RED_STACK_TOP = O1COM.RED_STACK_TOP - 2;
             18078    5     DO INDX = 0 TO O1COM.RED_STACK_TOP  BY 2;
             18079    5    O1COM.LX_TOP = O1COM.RED_STACK(INDX + 1);
             18080    5       O1COM.REDUCTION = O1COM.RED_STACK(INDX);
             18081    5       IF PRODR.SEMANTIC(O1COM.REDUCTION) > 0 THEN
             18082    6         DO;
             18083                %CALL_SEMANTICS(A="BINBIT(PRODR.SEMANTIC(O1COM.REDUCTION),36)");
             18084          /* Call the semantics routine with the designated action.
             18085          */
             18086    6     SEMANTIC_ACTION = BITBIN(A);
             18087    6     CALL Z8EN$SEMANTICS_PROC_DIV;
             18089    6         END;
             18090    5       IF PRODR.POPSTACK(O1COM.REDUCTION) = 0 THEN
             18091    6         DO;
             18092    6           O1COM.LX_TOP = O1COM.LX_TOP + 1;
             18093                %CREATE_EMPTY_TERMINAL_ON_LX_STK;
             18094    7     DO;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:20   
             18095            /* Fill in LX_STK(LX_TOP) with an empty terminal value */
             18096            %INIT_LX_TERMINAL ( @POINTER = "ADDR(O1COM.LX_STK(O1COM.LX_TOP))",
             18097                                @SYMBOL = %EMPTY);
             18098    8     DO;
             18099    8       @POINTER -> LX_TERMINAL.ID     = %LX_TERMINAL;
             18100    8       @POINTER -> LX_TERMINAL.B      = '0'B;
             18101            %IF (TEXTCHAR(@BERROR) ~= '');
             18102 C             @POINTER -> LX_TERMINAL.B.ERROR = @BERROR;
             18103            %ENDIF;
             18104    8       @POINTER -> LX_TERMINAL.TYPE   = @TYPE %;
             18105            %IF (TEXTCHAR(@LA_ITEM) = '');
             18106    8         @POINTER -> LX_TERMINAL.LINK   = @LINK;
             18107            %ENDIF;
             18108    8       @POINTER -> LX_TERMINAL.ST$    = @ST$ ;
             18109    8       @POINTER -> LX_TERMINAL.SYMBOL = @SYMBOL %;
             18110    8       @POINTER -> LX_TERMINAL.DNT$   = @DNT$;
             18111    8       @POINTER -> LX_TERMINAL.LINE   = @LINE;
             18112    8       @POINTER -> LX_TERMINAL.COLUMN = @COLUMN;
             18113    8     END;
             18115    7     END;
             18117    6         END;
             18118    5     END;
             18119    4     O1COM.RED_STACK_TOP  = 0;
             18120    4     O1COM.LX_TOP         = O1COM.ALT_LX_TOP;
             18121    4     O1COM.IED_FLAG       = '0'B;
             18122    4   END;
             18124              %ENDIF;
             18125              %AT_LEAST_ONE_TOKEN;
             18126               /* Make sure at least one token is available to
             18127                   a shift operation.
             18128               */
             18129    4     DO;
             18130            %IF LOCALLY_LEAST_COST_RECOVERY;
             18131    4         IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             18132    4           IF O1COM.CORRECTION.LEN = 0 AND O1COM.CORRECTION.INDX = 0 THEN
             18133    5             DO;
             18134                    %CALL_SCANNER;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:21   
             18135          /* Call the scanner to obtain the next token.  The token should be
             18136             placed in LA_STK(LA_PUT).
             18137          */
             18138    5     CALL Z8EL$LEX;
             18140    5               O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             18141    5               O1COM.LA_CNT = 1;
             18142    5             END;
             18143    4           ELSE
             18144    4             IF O1COM.CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */
             18145    5               DO;
             18146                      %CREATE_DUMMY_TOKEN;
             18147    5     CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,
             18148    5                                   BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX),
             18148                                            36),
             18149    5                                   O1COM.ERRLINE,
             18150    5                                   O1COM.ERRCOL);
             18152    5                 O1COM.CORRECTION.LEN   = O1COM.CORRECTION.LEN - 1;
             18153    5                 O1COM.CORRECTION.INDX  = O1COM.CORRECTION.INDX + 1;
             18154    5                 O1COM.LA_GET           = O1COM.LA_PUT;
             18155    5                 O1COM.LA_CNT           = 1;
             18156    5               END;
             18157    4             ELSE
             18158    5               DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */
             18159    5                 O1COM.CORRECTION.INDX  = 0;
             18160    5                 O1COM.LA_CNT           = O1COM.ERR_LA_CNT;
             18161    5                 O1COM.LA_PUT           = O1COM.ERR_LA_PUT;
             18162    5                 O1COM.LA_GET           = O1COM.ERR_LA_GET;
             18163    5               END;
             18164            %ELSE;
             18165 C            IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             18166 C              IF NOT PANIC_MODE_IN_PROGRESS THEN
             18167 C                DO;
             18168 C                  %CALL_SCANNER;
             18169 C                  O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             18170 C                  O1COM.LA_CNT = 1;
             18171 C                END;
             18172 C              ELSE
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:22   
             18173 C                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
             18174 C                  O1COM.LA_CNT = O1COM.ERR_LA_CNT;
             18175 C                  O1COM.LA_PUT = O1COM.ERR_LA_PUT;
             18176 C                  O1COM.LA_GET = O1COM.ERR_LA_GET;
             18177 C       DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.
             18177 C      LA_GET)) ~= O1COM.STATE;
             18178 C                    IF O1COM.LA_STK.SYMBOL(O1COM.LA_GET) = %TERM_EOF_SYM THEN
             18179 C                      DO;
             18180 C                        %RESET_ERROR_LOC;
             18181 C                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
             18182 C                        %TERMINATE;
             18183 C                      END;
             18184 C                    O1COM.LA_CNT = O1COM.LA_CNT - 1;
             18185 C                    O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
             18186 C                    IF O1COM.LA_CNT < 1 THEN
             18187 C                      DO;
             18188 C                        %CALL_SCANNER;
             18189 C                        O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             18190 C                        O1COM.LA_CNT = 1;
             18191 C                      END;
             18192 C                  END;
             18193 C                  PANIC_MODE_IN_PROGRESS = '0'B;
             18194 C                  %RESET_ERROR_LOC;
             18195 C                  CALL ERROR (%E$PARSING_RESUMED);
             18196 C                END;
             18197              %ENDIF;
             18198    4     END;
             18200    3         IF O1COM.LX_TOP = %LX_MAX THEN
             18201                %SEMANTIC_TOKEN_STACK_OVERFLOW;
             18202               /* The semantic token stack has overflowed, so abort
             18203                  the compilation.
             18204               */
             18205    4   DO;
             18206        %RESET_ERROR_LOC;
             18207          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
             18208    5     DO;
             18209    5        O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:23   
             18210    5        O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
             18211    5     END;
             18213    4     CALL ERROR (%E$SEMANTIC_TOKEN_STACK_OVERFLW);
             18214          %TERMINATE;
             18215          /* Insert code for abnormal termination of parser */
             18216    4     CALL Z9AT$TERMINATOR;
             18218    4     RETURN;
             18219    4   END;
             18221    3      O1COM.LX_TOP      = O1COM.LX_TOP + 1;
             18222    3         O1COM.LX_STK(O1COM.LX_TOP) = O1COM.LA_STK(O1COM.LA_GET);
             18223    3         O1COM.LX_STK.LINK(O1COM.LX_TOP) = ADDR(NIL);
             18224              %LAST_SHIFTED_LOC;
             18225          /* Set the location of the last shifted token which differs
             18226             from the location of the last token scanned when error
             18227             correction is done.
             18228          */
             18229    4     DO;
             18230    4       COMCOM.CURRENT.LINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
             18231    4       COMCOM.CURRENT.COLUMN = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
             18232    4     END;
             18234    3         IF O1COM.PARSE_STACK_IDX = %PARSE_STACK_MAX THEN
             18235                %PARSE_STACK_OVERFLOW;
             18236               /* The parse stack has overflowed, so abort the compilation.
             18237               */
             18238    4   DO;
             18239        %RESET_ERROR_LOC;
             18240          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
             18241    5     DO;
             18242    5        O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
             18243    5        O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
             18244    5     END;
             18246    4     CALL ERROR (%E$PARSE_STACK_OVERFLOW_ERROR);
             18247          %TERMINATE;
             18248          /* Insert code for abnormal termination of parser */
             18249    4     CALL Z9AT$TERMINATOR;
             18251    4   END;
             18253    3         ELSE
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:24   
             18254    4           DO;
             18255    4             O1COM.LA_CNT         = O1COM.LA_CNT -1 ;
             18256    4             O1COM.LA_GET         = O1COM.LA_STK.LINK(O1COM.LA_GET);
             18257    4             O1COM.STATE                         = ACTION;
             18258    4             O1COM.PARSE_STACK_IDX               = O1COM.PARSE_STACK_IDX + 1;
             18259    4             O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX)  = O1COM.STATE;
             18260    4           END;
             18261    3       END;
      188    18263    2       ELSE
      189    18264    3         DO;  /* RECOVERY */
      190    18265    3           O1COM.ERR_RECOVERY_IN_PROGRESS = '1'B;
      191    18266    3           O1COM.PARSE_ERROR_COUNT = O1COM.PARSE_ERROR_COUNT + 1;
      192    18267                %RESTORE_IED_STATE;
             18268        /* Restore the parse state to that before
             18269           the last lookahead was done;  This represents
             18270           the immediate error detection state.
             18271        */
             18272    4   DO;
             18273    4     IF O1COM.IED_FLAG THEN
             18274    5       DO;
             18275    5         O1COM.PARSE_STACK_IDX  = O1COM.ALT_PARSE_STACK_IDX;
             18276    5         PARSE_STACK_IDX_IN_CHARS = O1COM.ALT_PARSE_STACK_IDX * 4 + 4;
             18277    5         ADDR(O1COM.PARSE_STACK) -> PARSE_STACK_USED
             18278    5               = ADDR(O1COM.ALT_PARSE_STACK) -> PARSE_STACK_USED;
             18279    5      O1COM.LX_TOP        = O1COM.ALT_LX_TOP;
             18280    5         O1COM.STATE            = O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX);
             18281    5         O1COM.IED_FLAG         = '0'B;
             18282    5         O1COM.RED_STACK_TOP    = 0;
             18283    5       END;
             18284    4   END;
      193    18286    3           PARSER_OVERLAY_RETURN_CODE = %PARSE_ERROR_RETURN;
      194    18287    3           UNWIND TO OVERLAY_COORDINATION_VECTOR;
      195    18288    3        END;
      196    18289
      197    18290    2   END; /* DO WHILE */
      198    18291
      199    18292    1   END Z8EF$PARSE_PROC_DIV;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:25   

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:26   
--  Include file information  --

   Z8E_P_STATS.:Z8A6TOU  is referenced.
   Z8A_P_MACROS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_P_STATE.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_WINDOW.:Z8A6TOU  is referenced.
   Z8A_TYPES.:Z8A6TOU  is referenced.
   Z8E_O1COM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LEX_SYMB.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_STACKS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_P_OLAY.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_PDPDA_S.:Z8A6TOU  is referenced.
   Z8E_PD_SUBS.:Z8A6TOU  is referenced.
   Z8A_DNT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8EF$PARSE_PROC_DIV.

   Procedure Z8EF$PARSE_PROC_DIV requires 803 words for executable code.
   Procedure Z8EF$PARSE_PROC_DIV requires 22 words of local(AUTO) storage.

    No errors detected in file Z8EF.:Z8A6TSI    .

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:27   

 Object Unit name= Z8EF$PARSE_PROC_DIV                        File name= Z8EF.:Z8A6TOU
 UTS= AUG 09 '97 11:49:37.52 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  LblCom even  none     1      1  ITERATION
    1   DCB   even  none     0      0  M$UC
    2  LblCom even  none     1      1  DNT$
    3  LblCom even  none     5      5  DNT_
    4  LblCom even  none     1      1  DNT_BUCKET_NUMBER
    5  LblCom even  none     1      1  DNT_OF_1$
    6  LblCom even  none     2      2  OVERLAY_COORDINATION_VECTOR
    7  LblCom even  none     1      1  PARSER_OVERLAY_RETURN_CODE
    8  LblCom even  none    90    132  LEX_SYMBOL
    9  LblCom even  none     1      1  CURRENT_LEX_SYMBOL$
   10  LblCom even  none    90    132  TEMP_LEX_SYMBOL
   11  LblCom even  none    90    132  TEMP_LEX_SYMBOL2
   12  LblCom even  none     1      1  SEMANTIC_ACTION
   13   Proc  even  none   803   1443  Z8EF$PARSE_PROC_DIV
   14  RoData even  none    18     22  Z8EF$PARSE_PROC_DIV

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes            yes      Std        0  Z8EF$PARSE_PROC_DIV
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:28   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 Z8EL$LEX
         yes           Std       0 Z8EN$SEMANTICS_PROC_DIV
         yes           Std       4 Z8EE$CREATE_DUMMY_TOKEN
         yes           Std       0 Z9AT$TERMINATOR
         yes           Std      12 Z8AE$ERROR
         yes           Std       1 Z8AR$RESERVER
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       nStd      0 X66_AUNWIND

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  COMCOM                                O1COM
     HIER_STK_PTR                          HIER_STK                              PAGE_FORMAT
     REP_STK_PTR                           REP_STK                          r    PD_PRODR
r    PD_ACTION_COL                    r    PD_ACTION_ROW                    r    PD_GOTO_COL
r    PD_GOTO_ROW

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:29   


        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        Z8EF$PARSE_PROC_DIV : PROC;

      6 13 000000   000000 700200 xent  Z8EF$PARSE_* TSX0  ! X66_AUTO_0
        13 000001   000026 000000                    ZERO    22,0
        13 000002   000321 710000 13                 TRA     s:17587

        7        7
        8        8        %EQU PHASE = 1;
        9        9        %INCLUDE Z8A_DEFC;
       10       77        %INCLUDE Z8A_SUPP_MAC;
       11     2477        %INCLUDE Z8A_SYS_FILE;
       12     8752        %INCLUDE Z8A_ERR_NUMS;
       13     9516        %INCLUDE Z8A_COMCOM;
       14    10166        %INCLUDE Z8A_DNT;
       15    10387
       16    10388        %INCLUDE Z8E_PD_SUBS;
       17    10417        %INCLUDE Z8E_PDPDA_S;
       18    11110        %INCLUDE Z8E_P_OLAY;
       19    11123        %INCLUDE Z8E_STACKS;
       20    13389        %INCLUDE Z8E_O1COM;
       21    14150        %INCLUDE Z8A_TYPES;
       22    14324        %INCLUDE Z8E_WINDOW;
       23    16394        %INCLUDE Z8A_P_STATE;
       24    16404
       25    16405        /* If parse transitions are to be monitored, set PARSING_STATS
       26    16406           to true in the file Z8E_P_STATS,
       27    16407           and set PARSING_STATS_FILENAME = file name for data retention
       28    16408        */
       29    16409        %EQU PARSING_STATS_FILENAME = 'PD_STATS';
       30    16410
       31    16411        %INCLUDE Z8A_P_MACROS;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:30   
       32    17221
       33    17222
       34    17223    1   DCL Z8EN$SEMANTICS_PROC_DIV ENTRY;
       35    17224    1   DCL Z8EL$LEX ENTRY;
       36    17225    1   DCL Z9AT$TERMINATOR ENTRY;
       37    17226    1   DCL Z8EE$CREATE_DUMMY_TOKEN ENTRY(4);
       38    17227
       39    17228
       40    17229    1   DCL SEMANTIC_ACTION SBIN WORD EXT; /* Set to semantic action to be executed */
       41    17230
       42    17231
       43    17232        %EJECT;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:31   
       44    17233        /* The following macros and code may need to be customized
       45    17234           for a specific application.
       46    17235        */
       47    17236
       48    17237
       49    17238        %MACRO CREATE_DUMMY_TOKEN;
       50    17239          CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,
       51    17240                                   BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX), 36),
       52    17241                                        O1COM.ERRLINE,
       53    17242                                        O1COM.ERRCOL);
       54    17243        %MEND;
       55    17244
       56    17245
       57    17246        %MACRO TERMINATE;
       58    17247          /* Insert code for abnormal termination of parser */
       59    17248          CALL Z9AT$TERMINATOR;
       60    17249        %MEND;
       61    17250
       62    17251
       63    17252        %EQU DI_CHAR_LEN_MAX = 100;  /* Maximum length of an error plug-in */
       64    17253
       65    17254
       66    17255
       67    17256        %MACRO ERRORPROC;
       68    17257        ERROR : PROC(ERROR_TYPE, PLUG1$, PLUG2$);
       69    17258
       70    17259        DCL ERROR_TYPE SBIN WORD;
       71    17260        DCL PLUG1$ PTR;  /* TO DNT */
       72    17261        DCL PLUG2$ PTR;  /* TO DNT */
       73    17262
       74    17263        DCL NEWPLUG1$ PTR;
       75    17264        DCL NEWPLUG2$ PTR;
       76    17265        DCL Z8AE$ERROR ENTRY(12);
       77    17266
       78    17267        DCL 1 PARSEDNT BASED ALIGNED,
       79    17268              2 TEXT,
       80    17269                3 LENGTH SBIN WORD,
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:32   
       81    17270                3 NAME CHAR(PARSEDNT.TEXT.LENGTH);
       82    17271
       83    17272        /* ERROR LOCATION IS SET WITH THE RESET_ERROR_LOC MACRO BEFORE
       84    17273           THE ERROR PROCEDURE IS CALLED */
       85    17274
       86    17275        IF ADDR(PLUG1$) = ADDR(NIL) THEN
       87    17276          /* Only error type is specified */
       88    17277          CALL Z8AE$ERROR(ERROR_TYPE, O1COM.ERRLINE, O1COM.ERRCOL);
       89    17278        ELSE
       90    17279          IF ADDR(PLUG2$) = ADDR(NIL) THEN
       91    17280            /* Only 1 plug is specified */
       92    17281            DO;
       93    17282              %NEW_DNT(@POINTER = NEWPLUG1$,
       94    17283                          @SIZE = "PLUG1$ -> PARSEDNT.TEXT.LENGTH",
       95    17284                          @NAME = "PLUG1$ -> PARSEDNT.TEXT.NAME");
       96    17285              CALL Z8AE$ERROR(ERROR_TYPE, O1COM.ERRLINE, O1COM.ERRCOL, NEWPLUG1$);
       97    17286            END;
       98    17287          ELSE
       99    17288            /* 2 PLUGS WERE SPECIFIED */
      100    17289            DO;
      101    17290              %NEW_DNT(@POINTER = NEWPLUG1$,
      102    17291                            @SIZE = "PLUG1$ -> PARSEDNT.TEXT.LENGTH",
      103    17292                            @NAME = "PLUG1$ -> PARSEDNT.TEXT.NAME");
      104    17293              %NEW_DNT(@POINTER = NEWPLUG2$,
      105    17294                          @SIZE = "PLUG2$ -> PARSEDNT.TEXT.LENGTH",
      106    17295                          @NAME = "PLUG2$ -> PARSEDNT.TEXT.NAME");
      107    17296           CALL Z8AE$ERROR (ERROR_TYPE, O1COM.ERRLINE, O1COM.ERRCOL, NEWPLUG1$, NEWPLUG2$);
      108    17297            END;
      109    17298
      110    17299        END ERROR;
      111    17300        %MEND;
      112    17301
      113    17302
      114    17303
      115    17304        %MACRO RESET_ERROR_LOC;
      116    17305
      117    17306          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:33   
      118    17307          DO;
      119    17308             O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
      120    17309             O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
      121    17310          END;
      122    17311        %MEND;
      123    17312
      124    17313
      125    17314        %MACRO CREATE_EMPTY_TERMINAL_ON_LX_STK;
      126    17315          DO;
      127    17316            /* Fill in LX_STK(LX_TOP) with an empty terminal value */
      128    17317            %INIT_LX_TERMINAL ( @POINTER = "ADDR(O1COM.LX_STK(O1COM.LX_TOP))",
      129    17318                                @SYMBOL = %EMPTY);
      130    17319          END;
      131    17320        %MEND;
      132    17321
      133    17322
      134    17323        %MACRO LAST_SHIFTED_LOC;
      135    17324
      136    17325          /* Set the location of the last shifted token which differs
      137    17326             from the location of the last token scanned when error
      138    17327             correction is done.
      139    17328          */
      140    17329          DO;
      141    17330            COMCOM.CURRENT.LINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
      142    17331            COMCOM.CURRENT.COLUMN = O1COM.LA_STK.COLUMN(O1COM.LA_GET);
      143    17332          END;
      144    17333        %MEND;
      145    17334
      146    17335
      147    17336        %MACRO CALL_SEMANTICS(A=0);
      148    17337
      149    17338          /* Call the semantics routine with the designated action.
      150    17339          */
      151    17340          SEMANTIC_ACTION = BITBIN(A);
      152    17341          CALL Z8EN$SEMANTICS_PROC_DIV;
      153    17342
      154    17343        %MEND;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:34   
      155    17344
      156    17345
      157    17346        %MACRO CALL_SCANNER;
      158    17347
      159    17348          /* Call the scanner to obtain the next token.  The token should be
      160    17349             placed in LA_STK(LA_PUT).
      161    17350          */
      162    17351          CALL Z8EL$LEX;
      163    17352
      164    17353        %MEND;
      165    17354
      166    17355        %ERRORPROC;

  17356 13 000003   200010 741300       ERROR        STX1  ! INDX+1,,AUTO

  17369 13 000004   200012 236100                    LDQ     @PLUG1$,,AUTO
        13 000005   000000 116000 14                 CMPQ    0
        13 000006   000021 601000 13                 TNZ     s:17373

  17371 13 000007   000002 236000 14                 LDQ     2
        13 000010   200020 756100                    STQ     NEWPLUG2$+3,,AUTO
        13 000011   000003 236000 14                 LDQ     3
        13 000012   200011 235100                    LDA     @ERROR_TYPE,,AUTO
        13 000013   200016 757100                    STAQ    NEWPLUG2$+1,,AUTO
        13 000014   200016 630500                    EPPR0   NEWPLUG2$+1,,AUTO
        13 000015   000001 631400 14                 EPPR1   1
        13 000016   000000 701000 xent               TSX1    Z8AE$ERROR
        13 000017   000000 011000                    NOP     0
        13 000020   000317 710000 13                 TRA     s:17563

  17373 13 000021   200013 236100                    LDQ     @PLUG2$,,AUTO
        13 000022   000000 116000 14                 CMPQ    0
        13 000023   000126 601000 13                 TNZ     s:17446

  17381 13 000024   200012 470500                    LDP0    @PLUG1$,,AUTO
        13 000025   000000 471500                    LDP1    0,,PR0
        13 000026   100000 236100                    LDQ     0,,PR1
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:35   
        13 000027   000025 036007                    ADLQ    21,DL
        13 000030   000004 506007                    DIV     4,DL
        13 000031   000000 756000 0                  STQ     ITERATION

  17382 13 000032   000002 036000 3                  ADLQ    DNT_+2
        13 000033   000046 604000 13                 TMI     s:17384
        13 000034   000003 116000 3                  CMPQ    DNT_+3
        13 000035   000046 602000 13                 TNC     s:17384

  17383 13 000036   000005 236000 14                 LDQ     5
        13 000037   200016 756100                    STQ     NEWPLUG2$+1,,AUTO
        13 000040   200016 631500                    EPPR1   NEWPLUG2$+1,,AUTO
        13 000041   200017 451500                    STP1    NEWPLUG2$+2,,AUTO
        13 000042   200017 630500                    EPPR0   NEWPLUG2$+2,,AUTO
        13 000043   000004 631400 14                 EPPR1   4
        13 000044   000000 701000 xent               TSX1    Z8AR$RESERVER
        13 000045   000000 011000                    NOP     0

  17384 13 000046   000002 236000 3                  LDQ     DNT_+2
        13 000047   000022 736000                    QLS     18
        13 000050   000001 036000 3                  ADLQ    DNT_+1
        13 000051   200014 756100                    STQ     NEWPLUG1$,,AUTO

  17385 13 000052   000002 236000 3                  LDQ     DNT_+2
        13 000053   000000 036000 0                  ADLQ    ITERATION
        13 000054   000002 756000 3                  STQ     DNT_+2

  17386 13 000055   001046 220003                    LDX0    550,DU
        13 000056   200014 470500                    LDP0    NEWPLUG1$,,AUTO
        13 000057   000000 740100                    STX0    0,,PR0

  17387 13 000060   000000 721000 0                  LXL1    ITERATION
        13 000061   200014 470500                    LDP0    NEWPLUG1$,,AUTO
        13 000062   000000 441100                    SXL1    0,,PR0

  17388 13 000063   200012 470500                    LDP0    @PLUG1$,,AUTO
        13 000064   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:36   
        13 000065   100000 721100                    LXL1    0,,PR1
        13 000066   200014 473500                    LDP3    NEWPLUG1$,,AUTO
        13 000067   300004 741100                    STX1    4,,PR3

  17391 13 000070   000000 236000 14                 LDQ     0
        13 000071   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000072   100001 756100                    STQ     1,,PR1

  17392 13 000073   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000074   100002 756100                    STQ     2,,PR1

  17393 13 000075   000000 221003                    LDX1    0,DU
        13 000076   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000077   100003 741100                    STX1    3,,PR1

  17394 13 000100   000000 222003                    LDX2    0,DU
        13 000101   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000102   100003 442100                    SXL2    3,,PR1

  17395 13 000103   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000104   100004 223100                    LDX3    4,,PR1
        13 000105   000000 473500                    LDP3    0,,PR0
        13 000106   300000 724100                    LXL4    0,,PR3
        13 000107   040140 100540                    MLR     fill='040'O
        13 000110   300001 000014                    ADSC9   1,,PR3                   cn=0,n=*X4
        13 000111   100004 400013                    ADSC9   4,,PR1                   cn=2,n=*X3

  17436 13 000112   200014 631500                    EPPR1   NEWPLUG1$,,AUTO
        13 000113   200021 451500                    STP1    NEWPLUG2$+4,,AUTO
        13 000114   000002 236000 14                 LDQ     2
        13 000115   200020 756100                    STQ     NEWPLUG2$+3,,AUTO
        13 000116   000003 236000 14                 LDQ     3
        13 000117   200011 235100                    LDA     @ERROR_TYPE,,AUTO
        13 000120   200016 757100                    STAQ    NEWPLUG2$+1,,AUTO
        13 000121   200016 630500                    EPPR0   NEWPLUG2$+1,,AUTO
        13 000122   000006 631400 14                 EPPR1   6
        13 000123   000000 701000 xent               TSX1    Z8AE$ERROR
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:37   
        13 000124   000000 011000                    NOP     0

  17437 13 000125   000317 710000 13                 TRA     s:17563

  17446 13 000126   200012 470500                    LDP0    @PLUG1$,,AUTO
        13 000127   000000 471500                    LDP1    0,,PR0
        13 000130   100000 236100                    LDQ     0,,PR1
        13 000131   000025 036007                    ADLQ    21,DL
        13 000132   000004 506007                    DIV     4,DL
        13 000133   000000 756000 0                  STQ     ITERATION

  17447 13 000134   000002 036000 3                  ADLQ    DNT_+2
        13 000135   000150 604000 13                 TMI     s:17449
        13 000136   000003 116000 3                  CMPQ    DNT_+3
        13 000137   000150 602000 13                 TNC     s:17449

  17448 13 000140   000005 236000 14                 LDQ     5
        13 000141   200016 756100                    STQ     NEWPLUG2$+1,,AUTO
        13 000142   200016 631500                    EPPR1   NEWPLUG2$+1,,AUTO
        13 000143   200017 451500                    STP1    NEWPLUG2$+2,,AUTO
        13 000144   200017 630500                    EPPR0   NEWPLUG2$+2,,AUTO
        13 000145   000004 631400 14                 EPPR1   4
        13 000146   000000 701000 xent               TSX1    Z8AR$RESERVER
        13 000147   000000 011000                    NOP     0

  17449 13 000150   000002 236000 3                  LDQ     DNT_+2
        13 000151   000022 736000                    QLS     18
        13 000152   000001 036000 3                  ADLQ    DNT_+1
        13 000153   200014 756100                    STQ     NEWPLUG1$,,AUTO

  17450 13 000154   000002 236000 3                  LDQ     DNT_+2
        13 000155   000000 036000 0                  ADLQ    ITERATION
        13 000156   000002 756000 3                  STQ     DNT_+2

  17451 13 000157   001046 220003                    LDX0    550,DU
        13 000160   200014 470500                    LDP0    NEWPLUG1$,,AUTO
        13 000161   000000 740100                    STX0    0,,PR0
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:38   

  17452 13 000162   000000 721000 0                  LXL1    ITERATION
        13 000163   200014 470500                    LDP0    NEWPLUG1$,,AUTO
        13 000164   000000 441100                    SXL1    0,,PR0

  17453 13 000165   200012 470500                    LDP0    @PLUG1$,,AUTO
        13 000166   000000 471500                    LDP1    0,,PR0
        13 000167   100000 721100                    LXL1    0,,PR1
        13 000170   200014 473500                    LDP3    NEWPLUG1$,,AUTO
        13 000171   300004 741100                    STX1    4,,PR3

  17456 13 000172   000000 236000 14                 LDQ     0
        13 000173   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000174   100001 756100                    STQ     1,,PR1

  17457 13 000175   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000176   100002 756100                    STQ     2,,PR1

  17458 13 000177   000000 221003                    LDX1    0,DU
        13 000200   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000201   100003 741100                    STX1    3,,PR1

  17459 13 000202   000000 222003                    LDX2    0,DU
        13 000203   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000204   100003 442100                    SXL2    3,,PR1

  17460 13 000205   200014 471500                    LDP1    NEWPLUG1$,,AUTO
        13 000206   100004 223100                    LDX3    4,,PR1
        13 000207   000000 473500                    LDP3    0,,PR0
        13 000210   300000 724100                    LXL4    0,,PR3
        13 000211   040140 100540                    MLR     fill='040'O
        13 000212   300001 000014                    ADSC9   1,,PR3                   cn=0,n=*X4
        13 000213   100004 400013                    ADSC9   4,,PR1                   cn=2,n=*X3

  17506 13 000214   200013 471500                    LDP1    @PLUG2$,,AUTO
        13 000215   100000 473500                    LDP3    0,,PR1
        13 000216   300000 236100                    LDQ     0,,PR3
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:39   
        13 000217   000025 036007                    ADLQ    21,DL
        13 000220   000004 506007                    DIV     4,DL
        13 000221   000000 756000 0                  STQ     ITERATION

  17507 13 000222   000002 036000 3                  ADLQ    DNT_+2
        13 000223   000236 604000 13                 TMI     s:17509
        13 000224   000003 116000 3                  CMPQ    DNT_+3
        13 000225   000236 602000 13                 TNC     s:17509

  17508 13 000226   000005 236000 14                 LDQ     5
        13 000227   200016 756100                    STQ     NEWPLUG2$+1,,AUTO
        13 000230   200016 633500                    EPPR3   NEWPLUG2$+1,,AUTO
        13 000231   200017 453500                    STP3    NEWPLUG2$+2,,AUTO
        13 000232   200017 630500                    EPPR0   NEWPLUG2$+2,,AUTO
        13 000233   000004 631400 14                 EPPR1   4
        13 000234   000000 701000 xent               TSX1    Z8AR$RESERVER
        13 000235   000000 011000                    NOP     0

  17509 13 000236   000002 236000 3                  LDQ     DNT_+2
        13 000237   000022 736000                    QLS     18
        13 000240   000001 036000 3                  ADLQ    DNT_+1
        13 000241   200015 756100                    STQ     NEWPLUG2$,,AUTO

  17510 13 000242   000002 236000 3                  LDQ     DNT_+2
        13 000243   000000 036000 0                  ADLQ    ITERATION
        13 000244   000002 756000 3                  STQ     DNT_+2

  17511 13 000245   001046 220003                    LDX0    550,DU
        13 000246   200015 470500                    LDP0    NEWPLUG2$,,AUTO
        13 000247   000000 740100                    STX0    0,,PR0

  17512 13 000250   000000 721000 0                  LXL1    ITERATION
        13 000251   200015 470500                    LDP0    NEWPLUG2$,,AUTO
        13 000252   000000 441100                    SXL1    0,,PR0

  17513 13 000253   200013 470500                    LDP0    @PLUG2$,,AUTO
        13 000254   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:40   
        13 000255   100000 721100                    LXL1    0,,PR1
        13 000256   200015 473500                    LDP3    NEWPLUG2$,,AUTO
        13 000257   300004 741100                    STX1    4,,PR3

  17516 13 000260   000000 236000 14                 LDQ     0
        13 000261   200015 471500                    LDP1    NEWPLUG2$,,AUTO
        13 000262   100001 756100                    STQ     1,,PR1

  17517 13 000263   200015 471500                    LDP1    NEWPLUG2$,,AUTO
        13 000264   100002 756100                    STQ     2,,PR1

  17518 13 000265   000000 221003                    LDX1    0,DU
        13 000266   200015 471500                    LDP1    NEWPLUG2$,,AUTO
        13 000267   100003 741100                    STX1    3,,PR1

  17519 13 000270   000000 222003                    LDX2    0,DU
        13 000271   200015 471500                    LDP1    NEWPLUG2$,,AUTO
        13 000272   100003 442100                    SXL2    3,,PR1

  17520 13 000273   200015 471500                    LDP1    NEWPLUG2$,,AUTO
        13 000274   100004 223100                    LDX3    4,,PR1
        13 000275   000000 473500                    LDP3    0,,PR0
        13 000276   300000 724100                    LXL4    0,,PR3
        13 000277   040140 100540                    MLR     fill='040'O
        13 000300   300001 000014                    ADSC9   1,,PR3                   cn=0,n=*X4
        13 000301   100004 400013                    ADSC9   4,,PR1                   cn=2,n=*X3

  17561 13 000302   200015 631500                    EPPR1   NEWPLUG2$,,AUTO
        13 000303   200022 451500                    STP1    NEWPLUG2$+5,,AUTO
        13 000304   200014 633500                    EPPR3   NEWPLUG1$,,AUTO
        13 000305   200021 453500                    STP3    NEWPLUG2$+4,,AUTO
        13 000306   000002 236000 14                 LDQ     2
        13 000307   200020 756100                    STQ     NEWPLUG2$+3,,AUTO
        13 000310   000003 236000 14                 LDQ     3
        13 000311   200011 235100                    LDA     @ERROR_TYPE,,AUTO
        13 000312   200016 757100                    STAQ    NEWPLUG2$+1,,AUTO
        13 000313   200016 630500                    EPPR0   NEWPLUG2$+1,,AUTO
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:41   
        13 000314   000007 631400 14                 EPPR1   7
        13 000315   000000 701000 xent               TSX1    Z8AE$ERROR
        13 000316   000000 011000                    NOP     0

  17563 13 000317   200010 221300                    LDX1  ! INDX+1,,AUTO
        13 000320   000001 702211                    TSX2  ! 1,X1

      167    17565
      168    17566        %IF PARSING_STATS;
      169    17567 C        %RESTORE_PARSER_STATS_PROC;
      170    17568 C        %DUMP_Z8E_P_STATS_PROC;
      171    17569        %ENDIF;
      172    17570
      173    17571        %RESTORE_PARSER_STATS;
      174    17576
      175    17577
      176    17578
      177    17579        %LIST;
      178    17580
      179    17581    2   DO WHILE '1'B;

      180    17582
      181    17583          %GET_ACTION_ITEM;
             17584               /* Get the next action from the action table.  This will be
             17585                  either a shift, reduce, or an error.
             17586               */
             17587    2     IF ACTION_COL.BASE(O1COM.STATE) = 0 THEN

  17587 13 000321   000130 720000 xsym               LXL0    O1COM+88
        13 000322   000000 721010 xsym               LXL1    PD_ACTION_COL,X0
        13 000323   000327 601000 13                 TNZ     s:17602

             17588    3       DO;

             17589              %IF PARSING_STATS;
             17590 C            %INC_ACTION_COL_STATS(I=O1COM.STATE);
             17591              %ENDIF;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:42   
             17592    3         ACTION = ACTION_COL.DEFAULT(O1COM.STATE);

  17592 13 000324   000000 222010 xsym               LDX2    PD_ACTION_COL,X0
        13 000325   200006 742100                    STX2    ACTION,,AUTO

             17593    3       END;

  17593 13 000326   000553 710000 13                 TRA     s:17764

             17594    2     ELSE
             17595    3       DO;

             17596              %AT_LEAST_ONE_TOKEN;
             17597               /* Make sure at least one token is available to
             17598                   a shift operation.
             17599               */
             17600    4     DO;

             17601            %IF LOCALLY_LEAST_COST_RECOVERY;
             17602    4         IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */

  17602 13 000327   000131 235000 xsym               LDA     O1COM+89
        13 000330   000412 605400 13                 TPNZ    s:17671

             17603    4           IF O1COM.CORRECTION.LEN = 0 AND O1COM.CORRECTION.INDX = 0 THEN

  17603 13 000331   000152 236000 xsym               LDQ     O1COM+106
        13 000332   000347 601000 13                 TNZ     s:17615
        13 000333   000153 235000 xsym               LDA     O1COM+107
        13 000334   000347 601000 13                 TNZ     s:17615

             17604    5             DO;

             17605                    %CALL_SCANNER;
             17606          /* Call the scanner to obtain the next token.  The token should be
             17607             placed in LA_STK(LA_PUT).
             17608          */
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:43   
             17609    5     CALL Z8EL$LEX;

  17609 13 000335   000010 631400 14                 EPPR1   8
        13 000336   000000 701000 xent               TSX1    Z8EL$LEX
        13 000337   000000 011000                    NOP     0

             17611    5               O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);

  17611 13 000340   000132 235000 xsym               LDA     O1COM+90
        13 000341   000003 735000                    ALS     3
        13 000342   000246 235005 xsym               LDA     O1COM+166,AL
        13 000343   000132 755000 xsym               STA     O1COM+90

             17612    5               O1COM.LA_CNT = 1;

  17612 13 000344   000001 236007                    LDQ     1,DL
        13 000345   000131 756000 xsym               STQ     O1COM+89

             17613    5             END;

  17613 13 000346   000412 710000 13                 TRA     s:17671

             17614    4           ELSE
             17615    4             IF O1COM.CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */

  17615 13 000347   000000 116003                    CMPQ    0,DU
        13 000350   000403 604400 13                 TMOZ    s:17630

             17616    5               DO;

             17617                      %CREATE_DUMMY_TOKEN;
             17618    5     CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,

  17618 13 000351   000153 235000 xsym               LDA     O1COM+107
        13 000352   000001 735000                    ALS     1
        13 000353   000100 100405                    MLR     fill='000'O
        13 000354   000154 000002 xsym               ADSC9   O1COM+108,A              cn=0,n=2
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:44   
        13 000355   200016 000004                    ADSC9   NEWPLUG2$+1,,AUTO        cn=0,n=4
        13 000356   200016 236100                    LDQ     NEWPLUG2$+1,,AUTO
        13 000357   000022 732000                    QRS     18
        13 000360   200020 756100                    STQ     NEWPLUG2$+3,,AUTO
        13 000361   000012 237000 14                 LDAQ    10
        13 000362   200024 757100                    STAQ    NEWPLUG2$+7,,AUTO
        13 000363   200020 630500                    EPPR0   NEWPLUG2$+3,,AUTO
        13 000364   200023 450500                    STP0    NEWPLUG2$+6,,AUTO
        13 000365   000011 236000 14                 LDQ     9
        13 000366   200022 756100                    STQ     NEWPLUG2$+5,,AUTO
        13 000367   200022 630500                    EPPR0   NEWPLUG2$+5,,AUTO
        13 000370   000006 631400 14                 EPPR1   6
        13 000371   000000 701000 xent               TSX1    Z8EE$CREATE_DUMMY_TOKEN
        13 000372   000000 011000                    NOP     0

             17619    5                                   BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX),
             17619                                            36),
             17620    5                                   O1COM.ERRLINE,
             17621    5                                   O1COM.ERRCOL);
             17623    5                 O1COM.CORRECTION.LEN   = O1COM.CORRECTION.LEN - 1;

  17623 13 000373   000001 336007                    LCQ     1,DL
        13 000374   000152 056000 xsym               ASQ     O1COM+106

             17624    5                 O1COM.CORRECTION.INDX  = O1COM.CORRECTION.INDX + 1;

  17624 13 000375   000153 054000 xsym               AOS     O1COM+107

             17625    5                 O1COM.LA_GET           = O1COM.LA_PUT;

  17625 13 000376   000132 235000 xsym               LDA     O1COM+90
        13 000377   000133 755000 xsym               STA     O1COM+91

             17626    5                 O1COM.LA_CNT           = 1;

  17626 13 000400   000001 235007                    LDA     1,DL
        13 000401   000131 755000 xsym               STA     O1COM+89
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:45   

             17627    5               END;

  17627 13 000402   000412 710000 13                 TRA     s:17671

             17628    4             ELSE
             17629    5               DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */

             17630    5                 O1COM.CORRECTION.INDX  = 0;

  17630 13 000403   000153 450000 xsym               STZ     O1COM+107

             17631    5                 O1COM.LA_CNT           = O1COM.ERR_LA_CNT;

  17631 13 000404   000142 235000 xsym               LDA     O1COM+98
        13 000405   000131 755000 xsym               STA     O1COM+89

             17632    5                 O1COM.LA_PUT           = O1COM.ERR_LA_PUT;

  17632 13 000406   000141 235000 xsym               LDA     O1COM+97
        13 000407   000132 755000 xsym               STA     O1COM+90

             17633    5                 O1COM.LA_GET           = O1COM.ERR_LA_GET;

  17633 13 000410   000140 235000 xsym               LDA     O1COM+96
        13 000411   000133 755000 xsym               STA     O1COM+91

             17634    5               END;

             17635            %ELSE;
             17636 C            IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             17637 C              IF NOT PANIC_MODE_IN_PROGRESS THEN
             17638 C                DO;
             17639 C                  %CALL_SCANNER;
             17640 C                  O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17641 C                  O1COM.LA_CNT = 1;
             17642 C                END;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:46   
             17643 C              ELSE
             17644 C                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
             17645 C                  O1COM.LA_CNT = O1COM.ERR_LA_CNT;
             17646 C                  O1COM.LA_PUT = O1COM.ERR_LA_PUT;
             17647 C                  O1COM.LA_GET = O1COM.ERR_LA_GET;
             17648 C      DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.
             17648 C      LA_GET)) ~= O1COM.STATE;
             17649 C                    IF O1COM.LA_STK.SYMBOL(O1COM.LA_GET) = %TERM_EOF_SYM THEN
             17650 C                      DO;
             17651 C                        %RESET_ERROR_LOC;
             17652 C                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
             17653 C                        %TERMINATE;
             17654 C                      END;
             17655 C                    O1COM.LA_CNT = O1COM.LA_CNT - 1;
             17656 C                    O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
             17657 C                    IF O1COM.LA_CNT < 1 THEN
             17658 C                      DO;
             17659 C                        %CALL_SCANNER;
             17660 C                        O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17661 C                        O1COM.LA_CNT = 1;
             17662 C                      END;
             17663 C                  END;
             17664 C                  PANIC_MODE_IN_PROGRESS = '0'B;
             17665 C                  %RESET_ERROR_LOC;
             17666 C                  CALL ERROR (%E$PARSING_RESUMED);
             17667 C                END;
             17668              %ENDIF;
             17669    4     END;

             17671    3         INDX = ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.LA_GET);

  17671 13 000412   000133 235000 xsym               LDA     O1COM+91
        13 000413   000003 735000                    ALS     3
        13 000414   000130 720000 xsym               LXL0    O1COM+88
        13 000415   000000 236010 xsym               LDQ     PD_ACTION_COL,X0
        13 000416   777777 376007                    ANQ     -1,DL
        13 000417   000242 036005 xsym               ADLQ    O1COM+162,AL
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:47   
        13 000420   000000 621006                    EAX1    0,QL
        13 000421   200007 741100                    STX1    INDX,,AUTO

             17672    3         IF ACTION_ROW.CHECK(INDX) = O1COM.STATE THEN

  17672 13 000422   000000 236011 xsym               LDQ     PD_ACTION_ROW,X1
        13 000423   777777 376007                    ANQ     -1,DL
        13 000424   000130 116000 xsym               CMPQ    O1COM+88
        13 000425   000551 601000 13                 TNZ     s:17759

             17673    4           DO;

             17674                  %IF PARSING_STATS;
             17675 C                %INC_ACTION_ROW_STATS(I=INDX);
             17676                  %ENDIF;
             17677    4             ACTION = ACTION_ROW.NEXT(INDX);

  17677 13 000426   000000 222011 xsym               LDX2    PD_ACTION_ROW,X1
        13 000427   200006 742100                    STX2    ACTION,,AUTO

             17678    4             IF ACTION = 0 THEN

  17678 13 000430   000553 601000 13                 TNZ     s:17764

             17679    5               DO;

             17680                      %IF LOCALLY_LEAST_COST_RECOVERY;
             17681                        %CLEAR_SEMANTIC_ACTIONS;
             17682               /* We are about to do a shift and know that no error has
             17683                  occurred;  therefore, do all semantic actions which have
             17684                  been accumulated.
             17685               */
             17686    6   DO;

             17687    6     O1COM.ALT_LX_TOP    = O1COM.LX_TOP;

  17687 13 000431   000151 235000 xsym               LDA     O1COM+105
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:48   
        13 000432   000150 755000 xsym               STA     O1COM+104

             17688    6     O1COM.RED_STACK_TOP = O1COM.RED_STACK_TOP - 2;

  17688 13 000433   000002 336007                    LCQ     2,DL
        13 000434   000146 056000 xsym               ASQ     O1COM+102

             17689    7     DO INDX = 0 TO O1COM.RED_STACK_TOP  BY 2;

  17689 13 000435   000000 223003                    LDX3    0,DU
        13 000436   200007 743100                    STX3    INDX,,AUTO
        13 000437   000530 710000 13                 TRA     s:17729+3

             17690    7    O1COM.LX_TOP = O1COM.RED_STACK(INDX + 1);

  17690 13 000440   200007 220100                    LDX0    INDX,,AUTO
        13 000441   011227 235010 xsym               LDA     O1COM+4759,X0
        13 000442   000151 755000 xsym               STA     O1COM+105

             17691    7       O1COM.REDUCTION = O1COM.RED_STACK(INDX);

  17691 13 000443   011226 235010 xsym               LDA     O1COM+4758,X0
        13 000444   000134 755000 xsym               STA     O1COM+92

             17692    7       IF PRODR.SEMANTIC(O1COM.REDUCTION) > 0 THEN

  17692 13 000445   000001 735000                    ALS     1
        13 000446   000001 235005 xsym               LDA     PD_PRODR+1,AL
        13 000447   000457 600000 13                 TZE     s:17701

             17693    8         DO;

             17694                %CALL_SEMANTICS(A="BINBIT(PRODR.SEMANTIC(O1COM.REDUCTION),36)");
             17695          /* Call the semantics routine with the designated action.
             17696          */
             17697    8     SEMANTIC_ACTION = BITBIN(A);

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:49   
  17697 13 000450   000134 235000 xsym               LDA     O1COM+92
        13 000451   000001 735000                    ALS     1
        13 000452   000001 235005 xsym               LDA     PD_PRODR+1,AL
        13 000453   000000 755000 12                 STA     SEMANTIC_ACTION

             17698    8     CALL Z8EN$SEMANTICS_PROC_DIV;

  17698 13 000454   000010 631400 14                 EPPR1   8
        13 000455   000000 701000 xent               TSX1    Z8EN$SEMANTICS_PROC_DIV
        13 000456   000000 011000                    NOP     0

             17700    8         END;

             17701    7       IF PRODR.POPSTACK(O1COM.REDUCTION) = 0 THEN

  17701 13 000457   000134 235000 xsym               LDA     O1COM+92
        13 000460   000001 735000                    ALS     1
        13 000461   000000 720005 xsym               LXL0    PD_PRODR,AL
        13 000462   000525 601000 13                 TNZ     s:17729

             17702    8         DO;

             17703    8           O1COM.LX_TOP = O1COM.LX_TOP + 1;

  17703 13 000463   000151 054000 xsym               AOS     O1COM+105

             17704                %CREATE_EMPTY_TERMINAL_ON_LX_STK;
             17705    9     DO;

             17706            /* Fill in LX_STK(LX_TOP) with an empty terminal value */
             17707            %INIT_LX_TERMINAL ( @POINTER = "ADDR(O1COM.LX_STK(O1COM.LX_TOP))",
             17708                                @SYMBOL = %EMPTY);
             17709   10     DO;

             17710   10       @POINTER -> LX_TERMINAL.ID     = %LX_TERMINAL;

  17710 13 000464   000151 236000 xsym               LDQ     O1COM+105
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:50   
        13 000465   000003 736000                    QLS     3
        13 000466   000000 221003                    LDX1    0,DU
        13 000467   014017 741006 xsym               STX1    O1COM+6159,QL

             17711   10       @POINTER -> LX_TERMINAL.B      = '0'B;

  17711 13 000470   000151 235000 xsym               LDA     O1COM+105
        13 000471   000003 735000                    ALS     3
        13 000472   000000 220003                    LDX0    0,DU
        13 000473   014017 440005 xsym               SXL0    O1COM+6159,AL

             17712            %IF (TEXTCHAR(@BERROR) ~= '');
             17713 C             @POINTER -> LX_TERMINAL.B.ERROR = @BERROR;
             17714            %ENDIF;
             17715   10       @POINTER -> LX_TERMINAL.TYPE   = @TYPE %;

  17715 13 000474   000151 235000 xsym               LDA     O1COM+105
        13 000475   000003 735000                    ALS     3
        13 000476   000015 236007                    LDQ     13,DL
        13 000477   014023 756005 xsym               STQ     O1COM+6163,AL

             17716            %IF (TEXTCHAR(@LA_ITEM) = '');
             17717   10         @POINTER -> LX_TERMINAL.LINK   = @LINK;

  17717 13 000500   000151 235000 xsym               LDA     O1COM+105
        13 000501   000003 735000                    ALS     3
        13 000502   000000 236000 14                 LDQ     0
        13 000503   014026 756005 xsym               STQ     O1COM+6166,AL

             17718            %ENDIF;
             17719   10       @POINTER -> LX_TERMINAL.ST$    = @ST$ ;

  17719 13 000504   000151 235000 xsym               LDA     O1COM+105
        13 000505   000003 735000                    ALS     3
        13 000506   014020 756005 xsym               STQ     O1COM+6160,AL

             17720   10       @POINTER -> LX_TERMINAL.SYMBOL = @SYMBOL %;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:51   

  17720 13 000507   000151 235000 xsym               LDA     O1COM+105
        13 000510   000003 735000                    ALS     3
        13 000511   014022 450005 xsym               STZ     O1COM+6162,AL

             17721   10       @POINTER -> LX_TERMINAL.DNT$   = @DNT$;

  17721 13 000512   000151 235000 xsym               LDA     O1COM+105
        13 000513   000003 735000                    ALS     3
        13 000514   014021 756005 xsym               STQ     O1COM+6161,AL

             17722   10       @POINTER -> LX_TERMINAL.LINE   = @LINE;

  17722 13 000515   000151 235000 xsym               LDA     O1COM+105
        13 000516   000003 735000                    ALS     3
        13 000517   000133 236000 xsym               LDQ     COMCOM+91
        13 000520   014024 756005 xsym               STQ     O1COM+6164,AL

             17723   10       @POINTER -> LX_TERMINAL.COLUMN = @COLUMN;

  17723 13 000521   000151 235000 xsym               LDA     O1COM+105
        13 000522   000003 735000                    ALS     3
        13 000523   000134 236000 xsym               LDQ     COMCOM+92
        13 000524   014025 756005 xsym               STQ     O1COM+6165,AL

             17724   10     END;

             17726    9     END;

             17728    8         END;

             17729    7     END;

  17729 13 000525   200007 220100                    LDX0    INDX,,AUTO
        13 000526   000002 621010                    EAX1    2,X0
        13 000527   200007 741100                    STX1    INDX,,AUTO
        13 000530   200007 236100                    LDQ     INDX,,AUTO
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:52   
        13 000531   000022 732000                    QRS     18
        13 000532   000146 116000 xsym               CMPQ    O1COM+102
        13 000533   000440 604400 13                 TMOZ    s:17690

             17730    6     O1COM.RED_STACK_TOP  = 0;

  17730 13 000534   000146 450000 xsym               STZ     O1COM+102

             17731    6     O1COM.LX_TOP         = O1COM.ALT_LX_TOP;

  17731 13 000535   000150 235000 xsym               LDA     O1COM+104
        13 000536   000151 755000 xsym               STA     O1COM+105

             17732    6     O1COM.IED_FLAG       = '0'B;

  17732 13 000537   000147 450000 xsym               STZ     O1COM+103

             17733    6   END;

             17735                      %ENDIF;
             17736                      %DUMP_PARSER_STATS;
             17737          %IF PARSING_STATS;
             17738 C           CALL DUMP_PARSER_STATS;
             17739          %ENDIF;
             17741                      %LAST_SHIFTED_LOC;
             17742          /* Set the location of the last shifted token which differs
             17743             from the location of the last token scanned when error
             17744             correction is done.
             17745          */
             17746    6     DO;

             17747    6       COMCOM.CURRENT.LINE = O1COM.LA_STK.LINE(O1COM.LA_GET);

  17747 13 000540   000133 235000 xsym               LDA     O1COM+91
        13 000541   000003 735000                    ALS     3
        13 000542   000244 235005 xsym               LDA     O1COM+164,AL
        13 000543   000133 755000 xsym               STA     COMCOM+91
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:53   

             17748    6       COMCOM.CURRENT.COLUMN = O1COM.LA_STK.COLUMN(O1COM.LA_GET);

  17748 13 000544   000133 235000 xsym               LDA     O1COM+91
        13 000545   000003 735000                    ALS     3
        13 000546   000245 235005 xsym               LDA     O1COM+165,AL
        13 000547   000134 755000 xsym               STA     COMCOM+92

             17749    6     END;

             17751    5                 RETURN;

  17751 13 000550   000000 702200 xent               TSX2  ! X66_ARET

             17752    5               END;
             17753    4           END;
             17754    3         ELSE
             17755    4           DO;

             17756                  %IF PARSING_STATS;
             17757 C                %INC_ACTION_COL_STATS(I=O1COM.STATE);
             17758                  %ENDIF;
             17759    4             ACTION = ACTION_COL.DEFAULT(O1COM.STATE);

  17759 13 000551   000000 222010 xsym               LDX2    PD_ACTION_COL,X0
        13 000552   200006 742100                    STX2    ACTION,,AUTO

             17760    4           END;

             17761    3       END;

      182    17763
      183    17764    2     IF ACTION < 0 THEN

  17764 13 000553   001103 605000 13                 TPL     s:18061

      184    17765            %REDUCE;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:54   
             17766               /* Reduce the symbols and states on the stack by the appropriate
             17767                  production, after calling any required semantic routine.
             17768                  The token stack (LX_STK) is left with one dummy token to
             17769                  represent the non_terminal that was just reduced.  This non_terminal
             17770                  and the state on the stack after the reduction are used to
             17771                  index into the GOTO table to obtain the next state.
             17772               */
             17773    3         DO;

             17774    3           ACTION          = - ACTION;

  17774 13 000554   777777 622012                    EAX2    -1,X2
        13 000555   777777 662003                    ERX2    -1,DU
        13 000556   200006 742100                    STX2    ACTION,,AUTO

             17775                %IF LOCALLY_LEAST_COST_RECOVERY;
             17776                  %SAVE_IED_STATE;
             17777               /* Our error correction scheme requires that we detect errors
             17778                  immediately;  that is, before we do any reductions.
             17779                  Unfortunately, it is a property of LALR parsers that
             17780                  some reductions may be performed upon  encountering an
             17781                  error symbol, before recognizing the error.  Therefore, we
             17782                  must save the state of the parser at any reduction and stack
             17783                  all semantic calls until the next shift has been performed,
             17784                  which means the next token has been accepted.
             17785               */
             17786    4     DO;

             17787    4       IF NOT O1COM.IED_FLAG THEN

  17787 13 000557   000147 234000 xsym               SZN     O1COM+103
        13 000560   000577 604000 13                 TMI     s:17806

             17788    5         DO;

             17789    5           O1COM.ALT_PARSE_STACK_IDX = O1COM.PARSE_STACK_IDX;

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:55   
  17789 13 000561   000135 235000 xsym               LDA     O1COM+93
        13 000562   000145 755000 xsym               STA     O1COM+101

             17790    5           PARSE_STACK_IDX_IN_CHARS = O1COM.PARSE_STACK_IDX * 4 + 4;

  17790 13 000563   000002 735000                    ALS     2
        13 000564   000004 035007                    ADLA    4,DL
        13 000565   200003 755100                    STA     PARSE_STACK_IDX_IN_CHARS,,AUTO

             17791    5           ADDR(O1COM.ALT_PARSE_STACK) -> PARSE_STACK_USED

  17791 13 000566   000000 621005                    EAX1    0,AL
        13 000567   200003 723100                    LXL3    PARSE_STACK_IDX_IN_CHARS,,AUTO
        13 000570   040040 100440                    MLR     fill='040'O
        13 000571   001364 000011 xsym               ADSC9   O1COM+756                cn=0,n=*X1
        13 000572   005305 000013 xsym               ADSC9   O1COM+2757               cn=0,n=*X3

             17792    5               = ADDR(O1COM.PARSE_STACK) -> PARSE_STACK_USED;
             17793    5           O1COM.ALT_LX_TOP          = O1COM.LX_TOP;

  17793 13 000573   000151 235000 xsym               LDA     O1COM+105
        13 000574   000150 755000 xsym               STA     O1COM+104

             17794    5           O1COM.IED_FLAG            = '1'B;

  17794 13 000575   400000 236003                    LDQ     -131072,DU
        13 000576   000147 756000 xsym               STQ     O1COM+103

             17795    5         END;

             17796    4     END;

             17798                %ENDIF;
             17799                %IF LOCALLY_LEAST_COST_RECOVERY;
             17800                  %PUSH_SEMANTIC_ACTION;
             17801               /* Do to the immediate error detection problem, we need to
             17802                  save all semantic actions until a shift is about to be done,
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:56   
             17803                  signaling that no error has been encountered.
             17804               */
             17805    4   DO;

             17806    4     IF O1COM.RED_STACK_TOP < %RED_STACK_MAX - 2 THEN

  17806 13 000577   000146 235000 xsym               LDA     O1COM+102
        13 000600   002566 115007                    CMPA    1398,DL
        13 000601   000613 605000 13                 TPL     s:17820

             17807    5       DO;

             17808    5         O1COM.RED_STACK(O1COM.RED_STACK_TOP)     = ACTION;

  17808 13 000602   200006 236100                    LDQ     ACTION,,AUTO
        13 000603   000022 732000                    QRS     18
        13 000604   011226 756005 xsym               STQ     O1COM+4758,AL

             17809    5         O1COM.RED_STACK(O1COM.RED_STACK_TOP + 1) = O1COM.LX_TOP;

  17809 13 000605   000146 720000 xsym               LXL0    O1COM+102
        13 000606   000151 235000 xsym               LDA     O1COM+105
        13 000607   011227 755010 xsym               STA     O1COM+4759,X0

             17810    5         O1COM.RED_STACK_TOP                = O1COM.RED_STACK_TOP + 2;

  17810 13 000610   000002 236007                    LDQ     2,DL
        13 000611   000146 056000 xsym               ASQ     O1COM+102

             17811    5       END;

  17811 13 000612   000720 710000 13                 TRA     s:17921

             17812    4     ELSE
             17813    5       DO;

             17814              %AT_LEAST_ONE_TOKEN;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:57   
             17815               /* Make sure at least one token is available to
             17816                   a shift operation.
             17817               */
             17818    6     DO;

             17819            %IF LOCALLY_LEAST_COST_RECOVERY;
             17820    6         IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */

  17820 13 000613   000131 236000 xsym               LDQ     O1COM+89
        13 000614   000676 605400 13                 TPNZ    s:17897

             17821    6           IF O1COM.CORRECTION.LEN = 0 AND O1COM.CORRECTION.INDX = 0 THEN

  17821 13 000615   000152 235000 xsym               LDA     O1COM+106
        13 000616   000633 601000 13                 TNZ     s:17833
        13 000617   000153 235000 xsym               LDA     O1COM+107
        13 000620   000633 601000 13                 TNZ     s:17833

             17822    7             DO;

             17823                    %CALL_SCANNER;
             17824          /* Call the scanner to obtain the next token.  The token should be
             17825             placed in LA_STK(LA_PUT).
             17826          */
             17827    7     CALL Z8EL$LEX;

  17827 13 000621   000010 631400 14                 EPPR1   8
        13 000622   000000 701000 xent               TSX1    Z8EL$LEX
        13 000623   000000 011000                    NOP     0

             17829    7               O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);

  17829 13 000624   000132 235000 xsym               LDA     O1COM+90
        13 000625   000003 735000                    ALS     3
        13 000626   000246 235005 xsym               LDA     O1COM+166,AL
        13 000627   000132 755000 xsym               STA     O1COM+90

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:58   
             17830    7               O1COM.LA_CNT = 1;

  17830 13 000630   000001 236007                    LDQ     1,DL
        13 000631   000131 756000 xsym               STQ     O1COM+89

             17831    7             END;

  17831 13 000632   000676 710000 13                 TRA     s:17897

             17832    6           ELSE
             17833    6             IF O1COM.CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */

  17833 13 000633   000152 235000 xsym               LDA     O1COM+106
        13 000634   000667 604400 13                 TMOZ    s:17848

             17834    7               DO;

             17835                      %CREATE_DUMMY_TOKEN;
             17836    7     CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,

  17836 13 000635   000153 235000 xsym               LDA     O1COM+107
        13 000636   000001 735000                    ALS     1
        13 000637   000100 100405                    MLR     fill='000'O
        13 000640   000154 000002 xsym               ADSC9   O1COM+108,A              cn=0,n=2
        13 000641   200016 000004                    ADSC9   NEWPLUG2$+1,,AUTO        cn=0,n=4
        13 000642   200016 236100                    LDQ     NEWPLUG2$+1,,AUTO
        13 000643   000022 732000                    QRS     18
        13 000644   200020 756100                    STQ     NEWPLUG2$+3,,AUTO
        13 000645   000012 237000 14                 LDAQ    10
        13 000646   200024 757100                    STAQ    NEWPLUG2$+7,,AUTO
        13 000647   200020 630500                    EPPR0   NEWPLUG2$+3,,AUTO
        13 000650   200023 450500                    STP0    NEWPLUG2$+6,,AUTO
        13 000651   000011 236000 14                 LDQ     9
        13 000652   200022 756100                    STQ     NEWPLUG2$+5,,AUTO
        13 000653   200022 630500                    EPPR0   NEWPLUG2$+5,,AUTO
        13 000654   000006 631400 14                 EPPR1   6
        13 000655   000000 701000 xent               TSX1    Z8EE$CREATE_DUMMY_TOKEN
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:59   
        13 000656   000000 011000                    NOP     0

             17837    7                                   BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX),
             17837                                            36),
             17838    7                                   O1COM.ERRLINE,
             17839    7                                   O1COM.ERRCOL);
             17841    7                 O1COM.CORRECTION.LEN   = O1COM.CORRECTION.LEN - 1;

  17841 13 000657   000001 336007                    LCQ     1,DL
        13 000660   000152 056000 xsym               ASQ     O1COM+106

             17842    7                 O1COM.CORRECTION.INDX  = O1COM.CORRECTION.INDX + 1;

  17842 13 000661   000153 054000 xsym               AOS     O1COM+107

             17843    7                 O1COM.LA_GET           = O1COM.LA_PUT;

  17843 13 000662   000132 235000 xsym               LDA     O1COM+90
        13 000663   000133 755000 xsym               STA     O1COM+91

             17844    7                 O1COM.LA_CNT           = 1;

  17844 13 000664   000001 235007                    LDA     1,DL
        13 000665   000131 755000 xsym               STA     O1COM+89

             17845    7               END;

  17845 13 000666   000676 710000 13                 TRA     s:17897

             17846    6             ELSE
             17847    7               DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */

             17848    7                 O1COM.CORRECTION.INDX  = 0;

  17848 13 000667   000153 450000 xsym               STZ     O1COM+107

             17849    7                 O1COM.LA_CNT           = O1COM.ERR_LA_CNT;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:60   

  17849 13 000670   000142 235000 xsym               LDA     O1COM+98
        13 000671   000131 755000 xsym               STA     O1COM+89

             17850    7                 O1COM.LA_PUT           = O1COM.ERR_LA_PUT;

  17850 13 000672   000141 236000 xsym               LDQ     O1COM+97
        13 000673   000132 756000 xsym               STQ     O1COM+90

             17851    7                 O1COM.LA_GET           = O1COM.ERR_LA_GET;

  17851 13 000674   000140 235000 xsym               LDA     O1COM+96
        13 000675   000133 755000 xsym               STA     O1COM+91

             17852    7               END;

             17853            %ELSE;
             17854 C            IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             17855 C              IF NOT PANIC_MODE_IN_PROGRESS THEN
             17856 C                DO;
             17857 C                  %CALL_SCANNER;
             17858 C                  O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17859 C                  O1COM.LA_CNT = 1;
             17860 C                END;
             17861 C              ELSE
             17862 C                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
             17863 C                  O1COM.LA_CNT = O1COM.ERR_LA_CNT;
             17864 C                  O1COM.LA_PUT = O1COM.ERR_LA_PUT;
             17865 C                  O1COM.LA_GET = O1COM.ERR_LA_GET;
             17866 C      DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.
             17866 C      LA_GET)) ~= O1COM.STATE;
             17867 C                    IF O1COM.LA_STK.SYMBOL(O1COM.LA_GET) = %TERM_EOF_SYM THEN
             17868 C                      DO;
             17869 C                        %RESET_ERROR_LOC;
             17870 C                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
             17871 C                        %TERMINATE;
             17872 C                      END;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:61   
             17873 C                    O1COM.LA_CNT = O1COM.LA_CNT - 1;
             17874 C                    O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
             17875 C                    IF O1COM.LA_CNT < 1 THEN
             17876 C                      DO;
             17877 C                        %CALL_SCANNER;
             17878 C                        O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             17879 C                        O1COM.LA_CNT = 1;
             17880 C                      END;
             17881 C                  END;
             17882 C                  PANIC_MODE_IN_PROGRESS = '0'B;
             17883 C                  %RESET_ERROR_LOC;
             17884 C                  CALL ERROR (%E$PARSING_RESUMED);
             17885 C                END;
             17886              %ENDIF;
             17887    6     END;

             17889              %RED_STACK_OVERFLOW;
             17890               /* The reduction stack for semantic calls has overflowed,
             17891                  so abort the compilation.
             17892               */
             17893    6   DO;

             17894        %RESET_ERROR_LOC;
             17895          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
             17896    7     DO;

             17897    7        O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);

  17897 13 000676   000133 235000 xsym               LDA     O1COM+91
        13 000677   000003 735000                    ALS     3
        13 000700   000244 235005 xsym               LDA     O1COM+164,AL
        13 000701   000136 755000 xsym               STA     O1COM+94

             17898    7        O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);

  17898 13 000702   000133 236000 xsym               LDQ     O1COM+91
        13 000703   000003 736000                    QLS     3
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:62   
        13 000704   000245 235006 xsym               LDA     O1COM+165,QL
        13 000705   000137 755000 xsym               STA     O1COM+95

             17899    7     END;

             17901    6     CALL ERROR(%E$RED_STACK_OVERFLOW_ERROR);

  17901 13 000706   000000 236000 14                 LDQ     0
        13 000707   000000 235000 14                 LDA     0
        13 000710   200012 757100                    STAQ    @ERROR_TYPE+1,,AUTO
        13 000711   000015 236000 14                 LDQ     13
        13 000712   200011 756100                    STQ     INDX+2,,AUTO
        13 000713   000003 701000 13                 TSX1    ERROR
        13 000714   000000 011000                    NOP     0

             17902          %TERMINATE;
             17903          /* Insert code for abnormal termination of parser */
             17904    6     CALL Z9AT$TERMINATOR;

  17904 13 000715   000010 631400 14                 EPPR1   8
        13 000716   000000 701000 xent               TSX1    Z9AT$TERMINATOR
        13 000717   000000 011000                    NOP     0

             17906    6   END;

             17908    5       END;

             17909    4   END;

             17911                %ELSE;
             17912 C                IF PRODR.SEMANTIC(ACTION) > 0 THEN
             17913 C                  DO;
             17914 C                    O1COM.REDUCTION = ACTION;
             17915 C                    %CALL_SEMANTICS(A="BINBIT(PRODR.SEMANTIC(O1COM.REDUCTION),36)");
             17916 C                  END;
             17917                %ENDIF;
             17918                %IF PARSING_STATS;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:63   
             17919 C                %INC_PRODR_STATS(I=ACTION);
             17920                %ENDIF;
             17921    3           O1COM.PARSE_STACK_IDX = O1COM.PARSE_STACK_IDX - PRODR.POPSTACK(ACTION);

  17921 13 000720   200006 220100                    LDX0    ACTION,,AUTO
        13 000721   200006 020100                    ADLX0   ACTION,,AUTO
        13 000722   000000 236010 xsym               LDQ     PD_PRODR,X0
        13 000723   777777 376007                    ANQ     -1,DL
        13 000724   200016 756100                    STQ     NEWPLUG2$+1,,AUTO
        13 000725   000135 236000 xsym               LDQ     O1COM+93
        13 000726   200016 136100                    SBLQ    NEWPLUG2$+1,,AUTO
        13 000727   000135 756000 xsym               STQ     O1COM+93

             17922    3        O1COM.LX_TOP       = O1COM.PARSE_STACK_IDX + 1;

  17922 13 000730   000001 036007                    ADLQ    1,DL
        13 000731   000151 756000 xsym               STQ     O1COM+105

             17923                %IF ~ LOCALLY_LEAST_COST_RECOVERY;
             17924 C                IF PRODR.POPSTACK(ACTION) = 0 THEN
             17925 C                  DO;
             17926 C                    %CREATE_EMPTY_TERMINAL_ON_LX_STK;
             17927 C                  END;
             17928                %ENDIF;
             17929                /* Get new state */
             17930    3           NT = PRODR.GOAL(ACTION);

  17930 13 000732   000000 221010 xsym               LDX1    PD_PRODR,X0
        13 000733   200005 741100                    STX1    NT,,AUTO

             17931    3           IF GOTO_COL.BASE(NT) = 0 THEN

  17931 13 000734   000000 722011 xsym               LXL2    PD_GOTO_COL,X1
        13 000735   000742 601000 13                 TNZ     s:17940

             17932    4             DO;

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:64   
             17933                    %IF PARSING_STATS;
             17934 C                  %INC_GOTO_COL_STATS(I=NT);
             17935                    %ENDIF;
             17936    4               O1COM.STATE = GOTO_COL.DEFAULT(NT);

  17936 13 000736   000000 236011 xsym               LDQ     PD_GOTO_COL,X1
        13 000737   000022 772000                    QRL     18
        13 000740   000130 756000 xsym               STQ     O1COM+88

             17937    4             END;

  17937 13 000741   000766 710000 13                 TRA     s:17957

             17938    3           ELSE
             17939    4             DO;

             17940    4               INDX = GOTO_COL.BASE(NT) + O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX);

  17940 13 000742   000135 723000 xsym               LXL3    O1COM+93
        13 000743   000000 236011 xsym               LDQ     PD_GOTO_COL,X1
        13 000744   777777 376007                    ANQ     -1,DL
        13 000745   001364 036013 xsym               ADLQ    O1COM+756,X3
        13 000746   000000 624006                    EAX4    0,QL
        13 000747   200007 744100                    STX4    INDX,,AUTO

             17941    4               IF GOTO_ROW.CHECK(INDX) = NT THEN

  17941 13 000750   200005 235100                    LDA     NT,,AUTO
        13 000751   000022 731000                    ARS     18
        13 000752   200016 755100                    STA     NEWPLUG2$+1,,AUTO
        13 000753   000000 236014 xsym               LDQ     PD_GOTO_ROW,X4
        13 000754   777777 376007                    ANQ     -1,DL
        13 000755   200016 116100                    CMPQ    NEWPLUG2$+1,,AUTO
        13 000756   000763 601000 13                 TNZ     s:17953

             17942    5                 DO;

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:65   
             17943                        %IF PARSING_STATS;
             17944 C                      %INC_GOTO_ROW_STATS(I=INDX);
             17945                        %ENDIF;
             17946    5                   O1COM.STATE = GOTO_ROW.NEXT (INDX);

  17946 13 000757   000000 236014 xsym               LDQ     PD_GOTO_ROW,X4
        13 000760   000022 772000                    QRL     18
        13 000761   000130 756000 xsym               STQ     O1COM+88

             17947    5                 END;

  17947 13 000762   000766 710000 13                 TRA     s:17957

             17948    4               ELSE
             17949    5                 DO;

             17950                        %IF PARSING_STATS;
             17951 C                      %INC_GOTO_COL_STATS(I=NT);
             17952                        %ENDIF;
             17953    5                   O1COM.STATE = GOTO_COL.DEFAULT(NT);

  17953 13 000763   000000 236011 xsym               LDQ     PD_GOTO_COL,X1
        13 000764   000022 772000                    QRL     18
        13 000765   000130 756000 xsym               STQ     O1COM+88

             17954    5                 END;

             17955    4             END;

             17956                /* Push state on stack */
             17957    3           IF O1COM.PARSE_STACK_IDX = %PARSE_STACK_MAX THEN

  17957 13 000766   000135 235000 xsym               LDA     O1COM+93
        13 000767   003720 115007                    CMPA    2000,DL
        13 000770   001077 601000 13                 TNZ     s:18055

             17958    4             DO;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:66   

             17959                    %AT_LEAST_ONE_TOKEN;
             17960               /* Make sure at least one token is available to
             17961                   a shift operation.
             17962               */
             17963    5     DO;

             17964            %IF LOCALLY_LEAST_COST_RECOVERY;
             17965    5         IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */

  17965 13 000771   000131 235000 xsym               LDA     O1COM+89
        13 000772   001054 605400 13                 TPNZ    s:18041

             17966    5           IF O1COM.CORRECTION.LEN = 0 AND O1COM.CORRECTION.INDX = 0 THEN

  17966 13 000773   000152 235000 xsym               LDA     O1COM+106
        13 000774   001011 601000 13                 TNZ     s:17978
        13 000775   000153 235000 xsym               LDA     O1COM+107
        13 000776   001011 601000 13                 TNZ     s:17978

             17967    6             DO;

             17968                    %CALL_SCANNER;
             17969          /* Call the scanner to obtain the next token.  The token should be
             17970             placed in LA_STK(LA_PUT).
             17971          */
             17972    6     CALL Z8EL$LEX;

  17972 13 000777   000010 631400 14                 EPPR1   8
        13 001000   000000 701000 xent               TSX1    Z8EL$LEX
        13 001001   000000 011000                    NOP     0

             17974    6               O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);

  17974 13 001002   000132 235000 xsym               LDA     O1COM+90
        13 001003   000003 735000                    ALS     3
        13 001004   000246 235005 xsym               LDA     O1COM+166,AL
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:67   
        13 001005   000132 755000 xsym               STA     O1COM+90

             17975    6               O1COM.LA_CNT = 1;

  17975 13 001006   000001 236007                    LDQ     1,DL
        13 001007   000131 756000 xsym               STQ     O1COM+89

             17976    6             END;

  17976 13 001010   001054 710000 13                 TRA     s:18041

             17977    5           ELSE
             17978    5             IF O1COM.CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */

  17978 13 001011   000152 235000 xsym               LDA     O1COM+106
        13 001012   001045 604400 13                 TMOZ    s:17993

             17979    6               DO;

             17980                      %CREATE_DUMMY_TOKEN;
             17981    6     CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,

  17981 13 001013   000153 235000 xsym               LDA     O1COM+107
        13 001014   000001 735000                    ALS     1
        13 001015   000100 100405                    MLR     fill='000'O
        13 001016   000154 000002 xsym               ADSC9   O1COM+108,A              cn=0,n=2
        13 001017   200016 000004                    ADSC9   NEWPLUG2$+1,,AUTO        cn=0,n=4
        13 001020   200016 236100                    LDQ     NEWPLUG2$+1,,AUTO
        13 001021   000022 732000                    QRS     18
        13 001022   200020 756100                    STQ     NEWPLUG2$+3,,AUTO
        13 001023   000012 237000 14                 LDAQ    10
        13 001024   200024 757100                    STAQ    NEWPLUG2$+7,,AUTO
        13 001025   200020 630500                    EPPR0   NEWPLUG2$+3,,AUTO
        13 001026   200023 450500                    STP0    NEWPLUG2$+6,,AUTO
        13 001027   000011 236000 14                 LDQ     9
        13 001030   200022 756100                    STQ     NEWPLUG2$+5,,AUTO
        13 001031   200022 630500                    EPPR0   NEWPLUG2$+5,,AUTO
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:68   
        13 001032   000006 631400 14                 EPPR1   6
        13 001033   000000 701000 xent               TSX1    Z8EE$CREATE_DUMMY_TOKEN
        13 001034   000000 011000                    NOP     0

             17982    6                                   BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX),
             17982                                            36),
             17983    6                                   O1COM.ERRLINE,
             17984    6                                   O1COM.ERRCOL);
             17986    6                 O1COM.CORRECTION.LEN   = O1COM.CORRECTION.LEN - 1;

  17986 13 001035   000001 336007                    LCQ     1,DL
        13 001036   000152 056000 xsym               ASQ     O1COM+106

             17987    6                 O1COM.CORRECTION.INDX  = O1COM.CORRECTION.INDX + 1;

  17987 13 001037   000153 054000 xsym               AOS     O1COM+107

             17988    6                 O1COM.LA_GET           = O1COM.LA_PUT;

  17988 13 001040   000132 235000 xsym               LDA     O1COM+90
        13 001041   000133 755000 xsym               STA     O1COM+91

             17989    6                 O1COM.LA_CNT           = 1;

  17989 13 001042   000001 235007                    LDA     1,DL
        13 001043   000131 755000 xsym               STA     O1COM+89

             17990    6               END;

  17990 13 001044   001054 710000 13                 TRA     s:18041

             17991    5             ELSE
             17992    6               DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */

             17993    6                 O1COM.CORRECTION.INDX  = 0;

  17993 13 001045   000153 450000 xsym               STZ     O1COM+107
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:69   

             17994    6                 O1COM.LA_CNT           = O1COM.ERR_LA_CNT;

  17994 13 001046   000142 235000 xsym               LDA     O1COM+98
        13 001047   000131 755000 xsym               STA     O1COM+89

             17995    6                 O1COM.LA_PUT           = O1COM.ERR_LA_PUT;

  17995 13 001050   000141 235000 xsym               LDA     O1COM+97
        13 001051   000132 755000 xsym               STA     O1COM+90

             17996    6                 O1COM.LA_GET           = O1COM.ERR_LA_GET;

  17996 13 001052   000140 235000 xsym               LDA     O1COM+96
        13 001053   000133 755000 xsym               STA     O1COM+91

             17997    6               END;

             17998            %ELSE;
             17999 C            IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
             18000 C              IF NOT PANIC_MODE_IN_PROGRESS THEN
             18001 C                DO;
             18002 C                  %CALL_SCANNER;
             18003 C                  O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             18004 C                  O1COM.LA_CNT = 1;
             18005 C                END;
             18006 C              ELSE
             18007 C                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
             18008 C                  O1COM.LA_CNT = O1COM.ERR_LA_CNT;
             18009 C                  O1COM.LA_PUT = O1COM.ERR_LA_PUT;
             18010 C                  O1COM.LA_GET = O1COM.ERR_LA_GET;
             18011 C      DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.
             18011 C      LA_GET)) ~= O1COM.STATE;
             18012 C                    IF O1COM.LA_STK.SYMBOL(O1COM.LA_GET) = %TERM_EOF_SYM THEN
             18013 C                      DO;
             18014 C                        %RESET_ERROR_LOC;
             18015 C                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:70   
             18016 C                        %TERMINATE;
             18017 C                      END;
             18018 C                    O1COM.LA_CNT = O1COM.LA_CNT - 1;
             18019 C                    O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
             18020 C                    IF O1COM.LA_CNT < 1 THEN
             18021 C                      DO;
             18022 C                        %CALL_SCANNER;
             18023 C                        O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             18024 C                        O1COM.LA_CNT = 1;
             18025 C                      END;
             18026 C                  END;
             18027 C                  PANIC_MODE_IN_PROGRESS = '0'B;
             18028 C                  %RESET_ERROR_LOC;
             18029 C                  CALL ERROR (%E$PARSING_RESUMED);
             18030 C                END;
             18031              %ENDIF;
             18032    5     END;

             18034                    %PARSE_STACK_OVERFLOW;
             18035               /* The parse stack has overflowed, so abort the compilation.
             18036               */
             18037    5   DO;

             18038        %RESET_ERROR_LOC;
             18039          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
             18040    6     DO;

             18041    6        O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);

  18041 13 001054   000133 235000 xsym               LDA     O1COM+91
        13 001055   000003 735000                    ALS     3
        13 001056   000244 235005 xsym               LDA     O1COM+164,AL
        13 001057   000136 755000 xsym               STA     O1COM+94

             18042    6        O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);

  18042 13 001060   000133 236000 xsym               LDQ     O1COM+91
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:71   
        13 001061   000003 736000                    QLS     3
        13 001062   000245 235006 xsym               LDA     O1COM+165,QL
        13 001063   000137 755000 xsym               STA     O1COM+95

             18043    6     END;

             18045    5     CALL ERROR (%E$PARSE_STACK_OVERFLOW_ERROR);

  18045 13 001064   000000 236000 14                 LDQ     0
        13 001065   000000 235000 14                 LDA     0
        13 001066   200012 757100                    STAQ    @ERROR_TYPE+1,,AUTO
        13 001067   000017 236000 14                 LDQ     15
        13 001070   200011 756100                    STQ     INDX+2,,AUTO
        13 001071   000003 701000 13                 TSX1    ERROR
        13 001072   000000 011000                    NOP     0

             18046          %TERMINATE;
             18047          /* Insert code for abnormal termination of parser */
             18048    5     CALL Z9AT$TERMINATOR;

  18048 13 001073   000010 631400 14                 EPPR1   8
        13 001074   000000 701000 xent               TSX1    Z9AT$TERMINATOR
        13 001075   000000 011000                    NOP     0

             18050    5   END;

             18052    4             END;

  18052 13 001076   000321 710000 13                 TRA     s:17587

             18053    3           ELSE
             18054    4             DO;

             18055    4               O1COM.PARSE_STACK_IDX               = O1COM.PARSE_STACK_IDX + 1;

  18055 13 001077   000135 054000 xsym               AOS     O1COM+93

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:72   
             18056    4               O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX)  = O1COM.STATE;

  18056 13 001100   000135 723000 xsym               LXL3    O1COM+93
        13 001101   001364 756013 xsym               STQ     O1COM+756,X3

             18057    4             END;

             18058    3         END;

  18058 13 001102   000321 710000 13                 TRA     s:17587

      185    18060    2     ELSE
      186    18061    2       IF ACTION > 0 THEN

  18061 13 001103   001410 604400 13                 TMOZ    s:18265

      187    18062              %SHIFT;
             18063               /* Shift the symbol and go to the next state.
             18064                  The symbol is always a terminal, and it is placed on the token
             18065                  stack (LX_STK) for reference by a semantics action ala Dave
             18066                  Ward's parser.
             18067               */
             18068    3       DO;

             18069              %IF LOCALLY_LEAST_COST_RECOVERY;
             18070                %CLEAR_SEMANTIC_ACTIONS;
             18071               /* We are about to do a shift and know that no error has
             18072                  occurred;  therefore, do all semantic actions which have
             18073                  been accumulated.
             18074               */
             18075    4   DO;

             18076    4     O1COM.ALT_LX_TOP    = O1COM.LX_TOP;

  18076 13 001104   000151 235000 xsym               LDA     O1COM+105
        13 001105   000150 755000 xsym               STA     O1COM+104

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:73   
             18077    4     O1COM.RED_STACK_TOP = O1COM.RED_STACK_TOP - 2;

  18077 13 001106   000002 336007                    LCQ     2,DL
        13 001107   000146 056000 xsym               ASQ     O1COM+102

             18078    5     DO INDX = 0 TO O1COM.RED_STACK_TOP  BY 2;

  18078 13 001110   000000 221003                    LDX1    0,DU
        13 001111   200007 741100                    STX1    INDX,,AUTO
        13 001112   001203 710000 13                 TRA     s:18118+3

             18079    5    O1COM.LX_TOP = O1COM.RED_STACK(INDX + 1);

  18079 13 001113   200007 220100                    LDX0    INDX,,AUTO
        13 001114   011227 235010 xsym               LDA     O1COM+4759,X0
        13 001115   000151 755000 xsym               STA     O1COM+105

             18080    5       O1COM.REDUCTION = O1COM.RED_STACK(INDX);

  18080 13 001116   011226 235010 xsym               LDA     O1COM+4758,X0
        13 001117   000134 755000 xsym               STA     O1COM+92

             18081    5       IF PRODR.SEMANTIC(O1COM.REDUCTION) > 0 THEN

  18081 13 001120   000001 735000                    ALS     1
        13 001121   000001 235005 xsym               LDA     PD_PRODR+1,AL
        13 001122   001132 600000 13                 TZE     s:18090

             18082    6         DO;

             18083                %CALL_SEMANTICS(A="BINBIT(PRODR.SEMANTIC(O1COM.REDUCTION),36)");
             18084          /* Call the semantics routine with the designated action.
             18085          */
             18086    6     SEMANTIC_ACTION = BITBIN(A);

  18086 13 001123   000134 235000 xsym               LDA     O1COM+92
        13 001124   000001 735000                    ALS     1
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:74   
        13 001125   000001 235005 xsym               LDA     PD_PRODR+1,AL
        13 001126   000000 755000 12                 STA     SEMANTIC_ACTION

             18087    6     CALL Z8EN$SEMANTICS_PROC_DIV;

  18087 13 001127   000010 631400 14                 EPPR1   8
        13 001130   000000 701000 xent               TSX1    Z8EN$SEMANTICS_PROC_DIV
        13 001131   000000 011000                    NOP     0

             18089    6         END;

             18090    5       IF PRODR.POPSTACK(O1COM.REDUCTION) = 0 THEN

  18090 13 001132   000134 235000 xsym               LDA     O1COM+92
        13 001133   000001 735000                    ALS     1
        13 001134   000000 720005 xsym               LXL0    PD_PRODR,AL
        13 001135   001200 601000 13                 TNZ     s:18118

             18091    6         DO;

             18092    6           O1COM.LX_TOP = O1COM.LX_TOP + 1;

  18092 13 001136   000151 054000 xsym               AOS     O1COM+105

             18093                %CREATE_EMPTY_TERMINAL_ON_LX_STK;
             18094    7     DO;

             18095            /* Fill in LX_STK(LX_TOP) with an empty terminal value */
             18096            %INIT_LX_TERMINAL ( @POINTER = "ADDR(O1COM.LX_STK(O1COM.LX_TOP))",
             18097                                @SYMBOL = %EMPTY);
             18098    8     DO;

             18099    8       @POINTER -> LX_TERMINAL.ID     = %LX_TERMINAL;

  18099 13 001137   000151 236000 xsym               LDQ     O1COM+105
        13 001140   000003 736000                    QLS     3
        13 001141   000000 221003                    LDX1    0,DU
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:75   
        13 001142   014017 741006 xsym               STX1    O1COM+6159,QL

             18100    8       @POINTER -> LX_TERMINAL.B      = '0'B;

  18100 13 001143   000151 235000 xsym               LDA     O1COM+105
        13 001144   000003 735000                    ALS     3
        13 001145   000000 220003                    LDX0    0,DU
        13 001146   014017 440005 xsym               SXL0    O1COM+6159,AL

             18101            %IF (TEXTCHAR(@BERROR) ~= '');
             18102 C             @POINTER -> LX_TERMINAL.B.ERROR = @BERROR;
             18103            %ENDIF;
             18104    8       @POINTER -> LX_TERMINAL.TYPE   = @TYPE %;

  18104 13 001147   000151 235000 xsym               LDA     O1COM+105
        13 001150   000003 735000                    ALS     3
        13 001151   000015 236007                    LDQ     13,DL
        13 001152   014023 756005 xsym               STQ     O1COM+6163,AL

             18105            %IF (TEXTCHAR(@LA_ITEM) = '');
             18106    8         @POINTER -> LX_TERMINAL.LINK   = @LINK;

  18106 13 001153   000151 235000 xsym               LDA     O1COM+105
        13 001154   000003 735000                    ALS     3
        13 001155   000000 236000 14                 LDQ     0
        13 001156   014026 756005 xsym               STQ     O1COM+6166,AL

             18107            %ENDIF;
             18108    8       @POINTER -> LX_TERMINAL.ST$    = @ST$ ;

  18108 13 001157   000151 235000 xsym               LDA     O1COM+105
        13 001160   000003 735000                    ALS     3
        13 001161   014020 756005 xsym               STQ     O1COM+6160,AL

             18109    8       @POINTER -> LX_TERMINAL.SYMBOL = @SYMBOL %;

  18109 13 001162   000151 235000 xsym               LDA     O1COM+105
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:76   
        13 001163   000003 735000                    ALS     3
        13 001164   014022 450005 xsym               STZ     O1COM+6162,AL

             18110    8       @POINTER -> LX_TERMINAL.DNT$   = @DNT$;

  18110 13 001165   000151 235000 xsym               LDA     O1COM+105
        13 001166   000003 735000                    ALS     3
        13 001167   014021 756005 xsym               STQ     O1COM+6161,AL

             18111    8       @POINTER -> LX_TERMINAL.LINE   = @LINE;

  18111 13 001170   000151 235000 xsym               LDA     O1COM+105
        13 001171   000003 735000                    ALS     3
        13 001172   000133 236000 xsym               LDQ     COMCOM+91
        13 001173   014024 756005 xsym               STQ     O1COM+6164,AL

             18112    8       @POINTER -> LX_TERMINAL.COLUMN = @COLUMN;

  18112 13 001174   000151 235000 xsym               LDA     O1COM+105
        13 001175   000003 735000                    ALS     3
        13 001176   000134 236000 xsym               LDQ     COMCOM+92
        13 001177   014025 756005 xsym               STQ     O1COM+6165,AL

             18113    8     END;

             18115    7     END;

             18117    6         END;

             18118    5     END;

  18118 13 001200   200007 220100                    LDX0    INDX,,AUTO
        13 001201   000002 621010                    EAX1    2,X0
        13 001202   200007 741100                    STX1    INDX,,AUTO
        13 001203   200007 236100                    LDQ     INDX,,AUTO
        13 001204   000022 732000                    QRS     18
        13 001205   000146 116000 xsym               CMPQ    O1COM+102
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:77   
        13 001206   001113 604400 13                 TMOZ    s:18079

             18119    4     O1COM.RED_STACK_TOP  = 0;

  18119 13 001207   000146 450000 xsym               STZ     O1COM+102

             18120    4     O1COM.LX_TOP         = O1COM.ALT_LX_TOP;

  18120 13 001210   000150 235000 xsym               LDA     O1COM+104
        13 001211   000151 755000 xsym               STA     O1COM+105

             18121    4     O1COM.IED_FLAG       = '0'B;

  18121 13 001212   000147 450000 xsym               STZ     O1COM+103

             18122    4   END;

             18124              %ENDIF;
             18125              %AT_LEAST_ONE_TOKEN;
             18126               /* Make sure at least one token is available to
             18127                   a shift operation.
             18128               */
             18129    4     DO;

             18130            %IF LOCALLY_LEAST_COST_RECOVERY;
             18131    4         IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */

  18131 13 001213   000131 235000 xsym               LDA     O1COM+89
        13 001214   001276 605400 13                 TPNZ    s:18200

             18132    4           IF O1COM.CORRECTION.LEN = 0 AND O1COM.CORRECTION.INDX = 0 THEN

  18132 13 001215   000152 235000 xsym               LDA     O1COM+106
        13 001216   001233 601000 13                 TNZ     s:18144
        13 001217   000153 235000 xsym               LDA     O1COM+107
        13 001220   001233 601000 13                 TNZ     s:18144

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:78   
             18133    5             DO;

             18134                    %CALL_SCANNER;
             18135          /* Call the scanner to obtain the next token.  The token should be
             18136             placed in LA_STK(LA_PUT).
             18137          */
             18138    5     CALL Z8EL$LEX;

  18138 13 001221   000010 631400 14                 EPPR1   8
        13 001222   000000 701000 xent               TSX1    Z8EL$LEX
        13 001223   000000 011000                    NOP     0

             18140    5               O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);

  18140 13 001224   000132 235000 xsym               LDA     O1COM+90
        13 001225   000003 735000                    ALS     3
        13 001226   000246 235005 xsym               LDA     O1COM+166,AL
        13 001227   000132 755000 xsym               STA     O1COM+90

             18141    5               O1COM.LA_CNT = 1;

  18141 13 001230   000001 236007                    LDQ     1,DL
        13 001231   000131 756000 xsym               STQ     O1COM+89

             18142    5             END;

  18142 13 001232   001276 710000 13                 TRA     s:18200

             18143    4           ELSE
             18144    4             IF O1COM.CORRECTION.LEN > 0 THEN  /* NEED TO INSERT AN ERROR TOKEN */

  18144 13 001233   000152 235000 xsym               LDA     O1COM+106
        13 001234   001267 604400 13                 TMOZ    s:18159

             18145    5               DO;

             18146                      %CREATE_DUMMY_TOKEN;
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:79   
             18147    5     CALL Z8EE$CREATE_DUMMY_TOKEN (O1COM.LA_PUT,

  18147 13 001235   000153 235000 xsym               LDA     O1COM+107
        13 001236   000001 735000                    ALS     1
        13 001237   000100 100405                    MLR     fill='000'O
        13 001240   000154 000002 xsym               ADSC9   O1COM+108,A              cn=0,n=2
        13 001241   200016 000004                    ADSC9   NEWPLUG2$+1,,AUTO        cn=0,n=4
        13 001242   200016 236100                    LDQ     NEWPLUG2$+1,,AUTO
        13 001243   000022 732000                    QRS     18
        13 001244   200020 756100                    STQ     NEWPLUG2$+3,,AUTO
        13 001245   000012 237000 14                 LDAQ    10
        13 001246   200024 757100                    STAQ    NEWPLUG2$+7,,AUTO
        13 001247   200020 630500                    EPPR0   NEWPLUG2$+3,,AUTO
        13 001250   200023 450500                    STP0    NEWPLUG2$+6,,AUTO
        13 001251   000011 236000 14                 LDQ     9
        13 001252   200022 756100                    STQ     NEWPLUG2$+5,,AUTO
        13 001253   200022 630500                    EPPR0   NEWPLUG2$+5,,AUTO
        13 001254   000006 631400 14                 EPPR1   6
        13 001255   000000 701000 xent               TSX1    Z8EE$CREATE_DUMMY_TOKEN
        13 001256   000000 011000                    NOP     0

             18148    5                                   BINBIT(O1COM.CORRECTION.SYM(O1COM.CORRECTION.INDX),
             18148                                            36),
             18149    5                                   O1COM.ERRLINE,
             18150    5                                   O1COM.ERRCOL);
             18152    5                 O1COM.CORRECTION.LEN   = O1COM.CORRECTION.LEN - 1;

  18152 13 001257   000001 336007                    LCQ     1,DL
        13 001260   000152 056000 xsym               ASQ     O1COM+106

             18153    5                 O1COM.CORRECTION.INDX  = O1COM.CORRECTION.INDX + 1;

  18153 13 001261   000153 054000 xsym               AOS     O1COM+107

             18154    5                 O1COM.LA_GET           = O1COM.LA_PUT;

  18154 13 001262   000132 235000 xsym               LDA     O1COM+90
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:80   
        13 001263   000133 755000 xsym               STA     O1COM+91

             18155    5                 O1COM.LA_CNT           = 1;

  18155 13 001264   000001 235007                    LDA     1,DL
        13 001265   000131 755000 xsym               STA     O1COM+89

             18156    5               END;

  18156 13 001266   001276 710000 13                 TRA     s:18200

             18157    4             ELSE
             18158    5               DO;  /* HAVE EXHAUSTED ALL ERROR CORRECTION */

             18159    5                 O1COM.CORRECTION.INDX  = 0;

  18159 13 001267   000153 450000 xsym               STZ     O1COM+107

             18160    5                 O1COM.LA_CNT           = O1COM.ERR_LA_CNT;

  18160 13 001270   000142 235000 xsym               LDA     O1COM+98
        13 001271   000131 755000 xsym               STA     O1COM+89

             18161    5                 O1COM.LA_PUT           = O1COM.ERR_LA_PUT;

  18161 13 001272   000141 235000 xsym               LDA     O1COM+97
        13 001273   000132 755000 xsym               STA     O1COM+90

             18162    5                 O1COM.LA_GET           = O1COM.ERR_LA_GET;

  18162 13 001274   000140 235000 xsym               LDA     O1COM+96
        13 001275   000133 755000 xsym               STA     O1COM+91

             18163    5               END;

             18164            %ELSE;
             18165 C            IF O1COM.LA_CNT < 1 THEN  /* NEED TOKENS */
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:81   
             18166 C              IF NOT PANIC_MODE_IN_PROGRESS THEN
             18167 C                DO;
             18168 C                  %CALL_SCANNER;
             18169 C                  O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             18170 C                  O1COM.LA_CNT = 1;
             18171 C                END;
             18172 C              ELSE
             18173 C                DO;  /* GET VALID SYMBOL FOR PANIC SHIFT */
             18174 C                  O1COM.LA_CNT = O1COM.ERR_LA_CNT;
             18175 C                  O1COM.LA_PUT = O1COM.ERR_LA_PUT;
             18176 C                  O1COM.LA_GET = O1COM.ERR_LA_GET;
             18177 C      DO WHILE ACTION_ROW.CHECK(ACTION_COL.BASE(O1COM.STATE) + O1COM.LA_STK.SYMBOL(O1COM.
             18177 C      LA_GET)) ~= O1COM.STATE;
             18178 C                    IF O1COM.LA_STK.SYMBOL(O1COM.LA_GET) = %TERM_EOF_SYM THEN
             18179 C                      DO;
             18180 C                        %RESET_ERROR_LOC;
             18181 C                        CALL ERROR(%E$UNEXP_EOF_DURING_RECOVERY);
             18182 C                        %TERMINATE;
             18183 C                      END;
             18184 C                    O1COM.LA_CNT = O1COM.LA_CNT - 1;
             18185 C                    O1COM.LA_GET = O1COM.LA_STK.LINK(O1COM.LA_GET);
             18186 C                    IF O1COM.LA_CNT < 1 THEN
             18187 C                      DO;
             18188 C                        %CALL_SCANNER;
             18189 C                        O1COM.LA_PUT = O1COM.LA_STK.LINK(O1COM.LA_PUT);
             18190 C                        O1COM.LA_CNT = 1;
             18191 C                      END;
             18192 C                  END;
             18193 C                  PANIC_MODE_IN_PROGRESS = '0'B;
             18194 C                  %RESET_ERROR_LOC;
             18195 C                  CALL ERROR (%E$PARSING_RESUMED);
             18196 C                END;
             18197              %ENDIF;
             18198    4     END;

             18200    3         IF O1COM.LX_TOP = %LX_MAX THEN

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:82   
  18200 13 001276   000151 235000 xsym               LDA     O1COM+105
        13 001277   003720 115007                    CMPA    2000,DL
        13 001300   001322 601000 13                 TNZ     s:18221

             18201                %SEMANTIC_TOKEN_STACK_OVERFLOW;
             18202               /* The semantic token stack has overflowed, so abort
             18203                  the compilation.
             18204               */
             18205    4   DO;

             18206        %RESET_ERROR_LOC;
             18207          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
             18208    5     DO;

             18209    5        O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);

  18209 13 001301   000133 236000 xsym               LDQ     O1COM+91
        13 001302   000003 736000                    QLS     3
        13 001303   000244 235006 xsym               LDA     O1COM+164,QL
        13 001304   000136 755000 xsym               STA     O1COM+94

             18210    5        O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);

  18210 13 001305   000245 235006 xsym               LDA     O1COM+165,QL
        13 001306   000137 755000 xsym               STA     O1COM+95

             18211    5     END;

             18213    4     CALL ERROR (%E$SEMANTIC_TOKEN_STACK_OVERFLW);

  18213 13 001307   000000 236000 14                 LDQ     0
        13 001310   000000 235000 14                 LDA     0
        13 001311   200012 757100                    STAQ    @ERROR_TYPE+1,,AUTO
        13 001312   000021 236000 14                 LDQ     17
        13 001313   200011 756100                    STQ     INDX+2,,AUTO
        13 001314   000003 701000 13                 TSX1    ERROR
        13 001315   000000 011000                    NOP     0
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:83   

             18214          %TERMINATE;
             18215          /* Insert code for abnormal termination of parser */
             18216    4     CALL Z9AT$TERMINATOR;

  18216 13 001316   000010 631400 14                 EPPR1   8
        13 001317   000000 701000 xent               TSX1    Z9AT$TERMINATOR
        13 001320   000000 011000                    NOP     0

             18218    4     RETURN;

  18218 13 001321   000000 702200 xent               TSX2  ! X66_ARET

             18219    4   END;
             18221    3      O1COM.LX_TOP      = O1COM.LX_TOP + 1;

  18221 13 001322   000151 054000 xsym               AOS     O1COM+105

             18222    3         O1COM.LX_STK(O1COM.LX_TOP) = O1COM.LA_STK(O1COM.LA_GET);

  18222 13 001323   000133 235000 xsym               LDA     O1COM+91
        13 001324   000005 735000                    ALS     5
        13 001325   000151 236000 xsym               LDQ     O1COM+105
        13 001326   000005 736000                    QLS     5
        13 001327   000006 100405                    MLR     fill='000'O
        13 001330   000237 000040 xsym               ADSC9   O1COM+159,A              cn=0,n=32
        13 001331   014017 000040 xsym               ADSC9   O1COM+6159,Q             cn=0,n=32

             18223    3         O1COM.LX_STK.LINK(O1COM.LX_TOP) = ADDR(NIL);

  18223 13 001332   000151 235000 xsym               LDA     O1COM+105
        13 001333   000003 735000                    ALS     3
        13 001334   000000 236000 14                 LDQ     0
        13 001335   014026 756005 xsym               STQ     O1COM+6166,AL

             18224              %LAST_SHIFTED_LOC;
             18225          /* Set the location of the last shifted token which differs
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:84   
             18226             from the location of the last token scanned when error
             18227             correction is done.
             18228          */
             18229    4     DO;

             18230    4       COMCOM.CURRENT.LINE = O1COM.LA_STK.LINE(O1COM.LA_GET);

  18230 13 001336   000133 235000 xsym               LDA     O1COM+91
        13 001337   000003 735000                    ALS     3
        13 001340   000244 235005 xsym               LDA     O1COM+164,AL
        13 001341   000133 755000 xsym               STA     COMCOM+91

             18231    4       COMCOM.CURRENT.COLUMN = O1COM.LA_STK.COLUMN(O1COM.LA_GET);

  18231 13 001342   000133 235000 xsym               LDA     O1COM+91
        13 001343   000003 735000                    ALS     3
        13 001344   000245 235005 xsym               LDA     O1COM+165,AL
        13 001345   000134 755000 xsym               STA     COMCOM+92

             18232    4     END;

             18234    3         IF O1COM.PARSE_STACK_IDX = %PARSE_STACK_MAX THEN

  18234 13 001346   000135 235000 xsym               LDA     O1COM+93
        13 001347   003720 115007                    CMPA    2000,DL
        13 001350   001373 601000 13                 TNZ     s:18255

             18235                %PARSE_STACK_OVERFLOW;
             18236               /* The parse stack has overflowed, so abort the compilation.
             18237               */
             18238    4   DO;

             18239        %RESET_ERROR_LOC;
             18240          /* RESET THE LINE & COLUMN TO THE POINT OF ERROR */
             18241    5     DO;

             18242    5        O1COM.ERRLINE = O1COM.LA_STK.LINE(O1COM.LA_GET);
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:85   

  18242 13 001351   000133 235000 xsym               LDA     O1COM+91
        13 001352   000003 735000                    ALS     3
        13 001353   000244 235005 xsym               LDA     O1COM+164,AL
        13 001354   000136 755000 xsym               STA     O1COM+94

             18243    5        O1COM.ERRCOL  = O1COM.LA_STK.COLUMN(O1COM.LA_GET);

  18243 13 001355   000133 235000 xsym               LDA     O1COM+91
        13 001356   000003 735000                    ALS     3
        13 001357   000245 235005 xsym               LDA     O1COM+165,AL
        13 001360   000137 755000 xsym               STA     O1COM+95

             18244    5     END;

             18246    4     CALL ERROR (%E$PARSE_STACK_OVERFLOW_ERROR);

  18246 13 001361   000000 235000 14                 LDA     0
        13 001362   200012 757100                    STAQ    @ERROR_TYPE+1,,AUTO
        13 001363   000017 236000 14                 LDQ     15
        13 001364   200011 756100                    STQ     INDX+2,,AUTO
        13 001365   000003 701000 13                 TSX1    ERROR
        13 001366   000000 011000                    NOP     0

             18247          %TERMINATE;
             18248          /* Insert code for abnormal termination of parser */
             18249    4     CALL Z9AT$TERMINATOR;

  18249 13 001367   000010 631400 14                 EPPR1   8
        13 001370   000000 701000 xent               TSX1    Z9AT$TERMINATOR
        13 001371   000000 011000                    NOP     0

             18251    4   END;

  18251 13 001372   000321 710000 13                 TRA     s:17587

             18253    3         ELSE
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:86   
             18254    4           DO;

             18255    4             O1COM.LA_CNT         = O1COM.LA_CNT -1 ;

  18255 13 001373   000001 336007                    LCQ     1,DL
        13 001374   000131 056000 xsym               ASQ     O1COM+89

             18256    4             O1COM.LA_GET         = O1COM.LA_STK.LINK(O1COM.LA_GET);

  18256 13 001375   000133 235000 xsym               LDA     O1COM+91
        13 001376   000003 735000                    ALS     3
        13 001377   000246 235005 xsym               LDA     O1COM+166,AL
        13 001400   000133 755000 xsym               STA     O1COM+91

             18257    4             O1COM.STATE                         = ACTION;

  18257 13 001401   200006 235100                    LDA     ACTION,,AUTO
        13 001402   000022 731000                    ARS     18
        13 001403   000130 755000 xsym               STA     O1COM+88

             18258    4             O1COM.PARSE_STACK_IDX               = O1COM.PARSE_STACK_IDX + 1;

  18258 13 001404   000135 054000 xsym               AOS     O1COM+93

             18259    4             O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX)  = O1COM.STATE;

  18259 13 001405   000135 720000 xsym               LXL0    O1COM+93
        13 001406   001364 755010 xsym               STA     O1COM+756,X0

             18260    4           END;

             18261    3       END;

  18261 13 001407   000321 710000 13                 TRA     s:17587

      188    18263    2       ELSE
      189    18264    3         DO;  /* RECOVERY */
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:87   

      190    18265    3           O1COM.ERR_RECOVERY_IN_PROGRESS = '1'B;

  18265 13 001410   400000 236003                    LDQ     -131072,DU
        13 001411   000143 756000 xsym               STQ     O1COM+99

      191    18266    3           O1COM.PARSE_ERROR_COUNT = O1COM.PARSE_ERROR_COUNT + 1;

  18266 13 001412   000144 054000 xsym               AOS     O1COM+100

      192    18267                %RESTORE_IED_STATE;
             18268        /* Restore the parse state to that before
             18269           the last lookahead was done;  This represents
             18270           the immediate error detection state.
             18271        */
             18272    4   DO;

             18273    4     IF O1COM.IED_FLAG THEN

  18273 13 001413   000147 234000 xsym               SZN     O1COM+103
        13 001414   001436 605000 13                 TPL     s:18286

             18274    5       DO;

             18275    5         O1COM.PARSE_STACK_IDX  = O1COM.ALT_PARSE_STACK_IDX;

  18275 13 001415   000145 235000 xsym               LDA     O1COM+101
        13 001416   000135 755000 xsym               STA     O1COM+93

             18276    5         PARSE_STACK_IDX_IN_CHARS = O1COM.ALT_PARSE_STACK_IDX * 4 + 4;

  18276 13 001417   000002 735000                    ALS     2
        13 001420   000004 035007                    ADLA    4,DL
        13 001421   200003 755100                    STA     PARSE_STACK_IDX_IN_CHARS,,AUTO

             18277    5         ADDR(O1COM.PARSE_STACK) -> PARSE_STACK_USED

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:88   
  18277 13 001422   000000 621005                    EAX1    0,AL
        13 001423   200003 723100                    LXL3    PARSE_STACK_IDX_IN_CHARS,,AUTO
        13 001424   040040 100440                    MLR     fill='040'O
        13 001425   005305 000011 xsym               ADSC9   O1COM+2757               cn=0,n=*X1
        13 001426   001364 000013 xsym               ADSC9   O1COM+756                cn=0,n=*X3

             18278    5               = ADDR(O1COM.ALT_PARSE_STACK) -> PARSE_STACK_USED;
             18279    5      O1COM.LX_TOP        = O1COM.ALT_LX_TOP;

  18279 13 001427   000150 235000 xsym               LDA     O1COM+104
        13 001430   000151 755000 xsym               STA     O1COM+105

             18280    5         O1COM.STATE            = O1COM.PARSE_STACK(O1COM.PARSE_STACK_IDX);

  18280 13 001431   000135 721000 xsym               LXL1    O1COM+93
        13 001432   001364 235011 xsym               LDA     O1COM+756,X1
        13 001433   000130 755000 xsym               STA     O1COM+88

             18281    5         O1COM.IED_FLAG         = '0'B;

  18281 13 001434   000147 450000 xsym               STZ     O1COM+103

             18282    5         O1COM.RED_STACK_TOP    = 0;

  18282 13 001435   000146 450000 xsym               STZ     O1COM+102

             18283    5       END;

             18284    4   END;

      193    18286    3           PARSER_OVERLAY_RETURN_CODE = %PARSE_ERROR_RETURN;

  18286 13 001436   000002 235007                    LDA     2,DL
        13 001437   000000 755000 7                  STA     PARSER_OVERLAY_RETURN_CODE

      194    18287    3           UNWIND TO OVERLAY_COORDINATION_VECTOR;

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:89   
  18287 13 001440   000000 237200 6                  LDAQ  ! OVERLAY_COORDINATION_VECTOR
        13 001441   000000 700200 xent               TSX0  ! X66_AUNWIND
        13 001442   000000 000200                    ZERO    0,128
      195    18288    3        END;
      196    18289
      197    18290    2   END; /* DO WHILE */
      198    18291
      199    18292    1   END Z8EF$PARSE_PROC_DIV;

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:90   
--  Include file information  --

   Z8E_P_STATS.:Z8A6TOU  is referenced.
   Z8A_P_MACROS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_P_STATE.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_WINDOW.:Z8A6TOU  is referenced.
   Z8A_TYPES.:Z8A6TOU  is referenced.
   Z8E_O1COM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_LEX_SYMB.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_STACKS.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_P_OLAY.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8E_PDPDA_S.:Z8A6TOU  is referenced.
   Z8E_PD_SUBS.:Z8A6TOU  is referenced.
   Z8A_DNT.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_COMCOM.:Z8A6TOU  cannot be made into a system file and is referenced.
   Z8A_ERR_NUMS.:Z8A6TOU  is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
   Z9A_FLAGS.:Z8A6TOU  is referenced.
   Z8A_SYS_FILE.:Z8A6TOU  is referenced.
   X8A_COM_MACS.:X8A6TOU  is referenced.
   Z8A_NAMES.:Z8A6TOU  is referenced.
   Z8A_SUPP_MAC.:Z8A6TOU  is referenced.
   Z8A_DEFC.:Z8A6TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure Z8EF$PARSE_PROC_DIV.
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:91   

 **** Variables and constants ****

  ****  Section 000 LblCom ITERATION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 ITERATION

  ****  Section 002 LblCom DNT$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 DNT$

  ****  Section 003 LblCom DNT_

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(180)   r     1 DNT_

  ****  Section 004 LblCom DNT_BUCKET_NUMBER

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN              1 DNT_BUCKET_NUMBER

  ****  Section 005 LblCom DNT_OF_1$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 DNT_OF_1$

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:92   
  ****  Section 006 LblCom OVERLAY_COORDINATION_VECTOR

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d REMB        r     1 OVERLAY_COORDINATION_VECTOR

  ****  Section 007 LblCom PARSER_OVERLAY_RETURN_CODE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 PARSER_OVERLAY_RETURN_CODE

  ****  Section 008 LblCom LEX_SYMBOL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(3240)  r     1 LEX_SYMBOL                 0-0-0/w STRC(3240)        1 LEX_SYMBOL_WORDS

  ****  Section 009 LblCom CURRENT_LEX_SYMBOL$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 CURRENT_LEX_SYMBOL$

  ****  Section 010 LblCom TEMP_LEX_SYMBOL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(3240)        1 TEMP_LEX_SYMBOL

  ****  Section 011 LblCom TEMP_LEX_SYMBOL2

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:93   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(3240)        1 TEMP_LEX_SYMBOL2

  ****  Section 012 LblCom SEMANTIC_ACTION

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 SEMANTIC_ACTION

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    11-0-0/w PTR         r     1 @ERROR_TYPE               12-0-0/w PTR         r     1 @PLUG1$
    13-0-0/w PTR         r     1 @PLUG2$                    6-0-0/w SBIN(18)    r     1 ACTION
    *0-0-0/w SBIN        r     1 ERROR_TYPE                 7-0-0/w SBIN(18)    r     1 INDX
    14-0-0/w PTR         r     1 NEWPLUG1$                 15-0-0/w PTR         r     1 NEWPLUG2$
     5-0-0/w SBIN(18)    r     1 NT
     3-0-0/w SBIN        r     1 PARSE_STACK_IDX_IN_CHARS
    *0-0-0/w PTR         r     1 PLUG1$                    *0-0-0/w PTR         r     1 PLUG2$
     4-0-0/w SBIN(18)          1 PSI

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(13248) r     1 COMCOM
     0-0-0/w STRC(180)         1 HIER_STK(0:50)
     0-0-0/w SBIN              1 HIER_STK_PTR               0-0-0/d STRC(11580) r     1 O1COM
     0-0-0/w STRC(144)         1 PAGE_FORMAT
     0-0-0/b STRC        r     1 PD_ACTION_COL(0:1535)
     0-0-0/b STRC        r     1 PD_ACTION_ROW(0:7207)
PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:94   
     0-0-0/b STRC        r     1 PD_GOTO_COL(0:729)
     0-0-0/b STRC        r     1 PD_GOTO_ROW(0:2903)
     0-0-0/b STRC(72)    r     1 PD_PRODR(0:970)            0-0-0/w STRC(153)         1 REP_STK(0:50)
     0-0-0/w SBIN              1 REP_STK_PTR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(288)         1 ADD_STMT                   0-0-0/w ASTR(324)   r     1 BASED_LEX_SYMBOL
     0-0-0/w STRC(360)         1 BASED_LEX_SYMBOL_WORDS
     0-0-0/w STRC(288)         1 BINARY_OP                  0-0-0/w STRC(288)         1 CALL_STMT
     0-0-0/w CHAR(4096)        1 CHARS                      0-0-0/w STRC(288)         1 COMPUTE_STMT
     0-0-0/w STRC(72)          1 CONT                       0-0-0/w STRC(288)         1 DEFERED_IDENTIFIER
     0-0-0/w STRC(252)         1 DEFERED_ID_TREE            0-0-0/w STRC(288)         1 DEFERED_QUAL_ID
     0-0-0/w STRC(288)         1 DEFERED_SUM_CLAUSE
     0-0-0/w STRC(288)         1 DEFERED_SUM_CLAUSE_LIST
     0-0-0/w STRC(288)         1 DELETE_STMT                0-0-0/w STRC(288)         1 DIVIDE_STMT
     0-0-0/w ASTR(180)   r     1 DNT                        0-0-0/w STRC(288)         1 ILS_LIST
     0-0-0/w STRC(288)         1 INSPECT_1_STMT             0-0-0/w STRC(288)         1 INSPECT_2_STMT
     0-0-0/w STRC(288)         1 INSPECT_4_STMT             0-0-0/w STRC(288)         1 LA_ITEM
     0-0-0/w STRC(504)         1 LX_CD_INPUT                0-0-0/w STRC(324)         1 LX_CD_I_O
     0-0-0/w STRC(396)         1 LX_CD_OUTPUT               0-0-0/w STRC(288)         1 LX_ETT_ITEM
     0-0-0/w STRC(288)         1 LX_ITEM                    0-0-0/w STRC(288)         1 LX_LARGE
     0-0-0/w STRC(288)         1 LX_LIST                    0-0-0/w STRC(1224)        1 LX_REC_DECL
     0-0-0/w STRC(864)         1 LX_REPORT_REC              0-0-0/w STRC(288)   r     1 LX_TERMINAL
     0-0-0N  NULL        r     1 M$UC                       0-0-0/w STRC(288)         1 MULTIPLY_STMT
     0-0-0/w STRC(36864)       1 PAGE                       0-0-0/w ASTR        r     1 PARSEDNT
     0-0-0/c ACHR        r     1 PARSE_STACK_USED           0-0-0/w STRC(288)         1 READ_STMT
     0-0-0/w STRC(288)         1 REWRITE_STMT               0-0-0/w STRC(288)         1 START_STMT
     0-0-0/w STRC(252)         1 STRING_STMT                0-0-0/w STRC(288)         1 SUBTRACT_STMT
     0-0-0/w STRC(288)         1 UNARY_OP                   0-0-0/w STRC(288)         1 UNSTRING_STMT
     0-0-0/w STRC(288)         1 WRITE_STMT

PL6.E3A0      #001=Z8EF$PARSE_PROC_DIV File=Z8EF.:Z8A6TSI                        SAT 08/09/97 11:49 Page:95   

   Procedure Z8EF$PARSE_PROC_DIV requires 803 words for executable code.
   Procedure Z8EF$PARSE_PROC_DIV requires 22 words of local(AUTO) storage.

    No errors detected in file Z8EF.:Z8A6TSI    .
