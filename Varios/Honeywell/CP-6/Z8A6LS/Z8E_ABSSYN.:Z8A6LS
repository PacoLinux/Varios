

09:14 AUG 09 '97 Z8E_ABSSYN.:Z8A6SI                                        1    
    1      /*M* Include file "LEX_ABSSYN" -> Abstract syntax tree macros and utilities */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8
    9      /* Temporary abstract syntax node to be used in propagation of
   10        tree nodes when a value from the left most symbol on the right
   11        hand side of a production is used.
   12      */
   13      DCL 1 TEMP_LX_NODE EXT DALIGNED,
   14            %LA_STK_INFO;
   15            2 LINK         PTR;
   16
   17
   18      %MACRO PROPAGATE (@FROM=O1COM.LX_TOP);
   19        DO;
   20          O1COM.LX_STK(O1COM.LX_TOP + 1 - PRODR.POPSTACK(O1COM.REDUCTION)) = O1COM.LX_STK(@FROM);
   21        END;
   22      %MEND;
   23
   24
   25      %MACRO PROPAGATE_LX_ITEM(@FROM$=);
   26        DO;
   27          O1COM.LX_STK(O1COM.LX_TOP + 1 - PRODR.POPSTACK(O1COM.REDUCTION))
   28               = @FROM$ -> LX_ITEM;
   29        END;
   30      %MEND;
   31
   32
   33      %MACRO PROPAGATE_TEMP_LX_NODE;
   34        DO;
   35          O1COM.LX_STK(O1COM.LX_TOP + 1 - PRODR.POPSTACK(O1COM.REDUCTION)) = TEMP_LX_NODE;
   36        END;
   37      %MEND;
09:14 AUG 09 '97 Z8E_ABSSYN.:Z8A6SI                                        2    
   38
   39
   40      %MACRO PROP_ERR_TEMP_LX_NODE;
   41        DO;
   42          DO I = O1COM.LX_TOP + 1 - PRODR.POPSTACK(O1COM.REDUCTION) TO O1COM.LX_TOP;
   43            IF O1COM.LX_STK.B.ERROR(I) THEN
   44              TEMP_LX_NODE.B.ERROR = TRUE;
   45          END;
   46        END;
   47      %MEND;
   48
   49
   50      %MACRO PROP_LEV_TEMP_LX_NODE;
   51        DO;
   52          IF COMCOM.OB.FIPS.LEVEL >= %INT_LEV THEN
   53            DO I = O1COM.LX_TOP + 1 - PRODR.POPSTACK(O1COM.REDUCTION) TO O1COM.LX_TOP;
   54              IF O1COM.LX_STK.B.HIGH_LEV(I) THEN
   55                TEMP_LX_NODE.B.HIGH_LEV = TRUE;
   56            END;
   57        END;
   58      %MEND;
   59
   60
   61      %MACRO PROP_LX_TOP_ERR_TEMP_LX_NODE;
   62        DO;
   63          IF O1COM.LX_STK.B.ERROR (O1COM.LX_TOP) THEN
   64            TEMP_LX_NODE.B.ERROR = TRUE;
   65        END;
   66      %MEND;
   67
   68
   69      %MACRO PROP_LX_TOP_PROP_ERR;
   70        DO;
   71          DO I = O1COM.LX_TOP + 1 - PRODR.POPSTACK(O1COM.REDUCTION) TO O1COM.LX_TOP - 1;
   72            IF O1COM.LX_STK.B.ERROR(I) THEN
   73              O1COM.LX_STK.B.ERROR(O1COM.LX_TOP) = TRUE;
   74          END;
09:14 AUG 09 '97 Z8E_ABSSYN.:Z8A6SI                                        3    
   75          %PROPAGATE(@FROM=O1COM.LX_TOP);
   76        END;
   77      %MEND;
   78
   79
   80      %MACRO NEW_COPY_LX_STK (@FROM=O1COM.LX_TOP, @POINTER=HEAP$);
   81        DO;
   82          %NEW_HEAP(@POINTER=@POINTER,
   83                    @SIZE=%LENGTH_LX_ITEM);
   84          @POINTER -> LX_ITEM = O1COM.LX_STK(@FROM);
   85        END;
   86      %MEND;
   87
   88
   89      %MACRO NEW_COPY_LX_ITEM (@FROM$ =, @TO$ =);
   90        DO;
   91          %NEW_HEAP (@POINTER = @TO$,
   92                     @SIZE = %LENGTH_LX_ITEM);
   93          @TO$ -> LX_ITEM = @FROM$ -> LX_ITEM;
   94          @TO$ -> LX_ITEM.LINK = ADDR(NIL);
   95        END;
   96      %MEND;
   97
   98
   99      %MACRO ADD_LX_ITEM_TO_LIST_HEAD ( @LIST$ =,
  100                                        @FROM$ = );
  101        DO;
  102          @FROM$  -> LX_ITEM.LINK  = @LIST$ -> LX_LIST.HEAD$;
  103          @LIST$ -> LX_LIST.HEAD$ = @FROM$;
  104          IF @LIST$ -> LX_LIST.COUNT = 0 THEN
  105            @LIST$ -> LX_LIST.TAIL$ = @FROM$;
  106          @LIST$ -> LX_LIST.COUNT = @LIST$ -> LX_LIST.COUNT + 1;
  107        END;
  108      %MEND;
  109
  110
  111      %MACRO ADD_LX_STK_TO_LIST_HEAD (@LIST$ = "ADDR(TEMP_LX_NODE)",
09:14 AUG 09 '97 Z8E_ABSSYN.:Z8A6SI                                        4    
  112                                      @FROM  = O1COM.LX_TOP);
  113        DO;
  114          %NEW_COPY_LX_STK (@POINTER= HEAP$, @FROM=@FROM);
  115          %ADD_LX_ITEM_TO_LIST_HEAD ( @LIST$ = @LIST$,
  116                                      @FROM$ = HEAP$);
  117        END;
  118      %MEND;
  119
  120
  121      %MACRO ADD_LX_ITEM_TO_LIST_TAIL (@LIST$ =,
  122                                       @FROM$ =);
  123        DO;
  124          @FROM$ -> LX_ITEM.LINK = ADDR(NIL);
  125          IF @LIST$ -> LX_LIST.COUNT = 0 THEN
  126            DO;  /* First item on list */
  127              @LIST$ -> LX_LIST.HEAD$ = @FROM$;
  128              @LIST$ -> LX_LIST.TAIL$ = @FROM$;
  129            END;
  130          ELSE
  131            DO;  /* Other items on list */
  132              @LIST$ -> LX_LIST.TAIL$ -> LX_ITEM.LINK = @FROM$;
  133              @LIST$ -> LX_LIST.TAIL$ = @FROM$;
  134            END;
  135          @LIST$ -> LX_LIST.COUNT = @LIST$ -> LX_LIST.COUNT + 1;
  136        END;
  137      %MEND;
  138
  139
  140      %MACRO ADD_LX_STK_TO_LIST_TAIL (@LIST$ = "ADDR(TEMP_LX_NODE)",
  141                                      @FROM  = O1COM.LX_TOP);
  142        DO;
  143          %NEW_COPY_LX_STK(@POINTER = HEAP$, @FROM=@FROM);
  144          %ADD_LX_ITEM_TO_LIST_TAIL (@LIST$ = @LIST$,
  145                                     @FROM$ = HEAP$);
  146        END;
  147      %MEND;
  148
09:14 AUG 09 '97 Z8E_ABSSYN.:Z8A6SI                                        5    
  149
  150      %MACRO APPEND_LISTS (@FROM$ =, @TO$ =);
  151        DO;
  152          IF @FROM$ -> LX_LIST.COUNT > 0 THEN
  153            DO;
  154              @TO$ -> LX_LIST.TAIL$ -> LX_ITEM.LINK
  155                  = @FROM$ -> LX_LIST.HEAD$;
  156              @TO$ -> LX_LIST.TAIL$
  157                  = @FROM$ -> LX_LIST.TAIL$;
  158              @TO$ -> LX_LIST.COUNT
  159                  = @FROM$ -> LX_LIST.COUNT + @TO$ -> LX_LIST.COUNT;
  160              @FROM$ -> LX_LIST.COUNT = 0;
  161              @FROM$ -> LX_LIST.HEAD$ = ADDR(NIL);
  162              @FROM$ -> LX_LIST.TAIL$ = ADDR(NIL);
  163            END;
  164        END;
  165      %MEND;
  166
  167
  168       %MACRO ADD_DEFERED_ACTION_TO_LIST_TAIL (@LIST$ = ,
  169                                               @FROM$ = );
  170         DO;
  171           @FROM$ -> DEFERED_ACTION.LINK = ADDR(NIL);
  172             IF @LIST$ -> LX_LIST.COUNT = 0 THEN
  173               DO;
  174                 @LIST$ -> LX_LIST.HEAD$ = @FROM$;
  175                 @LIST$ -> LX_LIST.TAIL$ = @FROM$;
  176               END;
  177             ELSE
  178               DO;
  179                 @LIST$ -> LX_LIST.TAIL$ -> DEFERED_ACTION.LINK = @FROM$;
  180                 @LIST$ -> LX_LIST.TAIL$ = @FROM$;
  181                 P$ = @LIST$ -> LX_LIST.HEAD$;
  182               END;
  183           @LIST$ -> LX_LIST.COUNT = @LIST$ -> LX_LIST.COUNT + 1;
  184         END;
  185       %MEND;
09:14 AUG 09 '97 Z8E_ABSSYN.:Z8A6SI                                        6    
  186
  187

