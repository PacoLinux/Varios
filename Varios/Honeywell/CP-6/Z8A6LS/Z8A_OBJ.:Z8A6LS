

09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6
    7           DCL OBJ$ PTR EXT;
    8
    9
   10
   11           %IF INCLUDE_ENT_DEFS = '1'B;
   12              DCL Z9HF$WRITE_OBJ_PAGE ENTRY(1);
   13              DCL Z9HF$READ_OBJ_PAGE ENTRY ALTRET;
   14              DCL Z9HF$OPEN_OBJ_INPUT ENTRY;
   15              DCL Z9HF$OPEN_OBJ_OUTPUT ENTRY;
   16              DCL Z9HF$CLOSE_OBJ ENTRY;
   17              DCL Z9HF$FREE_OBJ ENTRY;
   18              DCL Z9HF$GET_OBJ_PAGE ENTRY;
   19           %ENDIF;
   20
   21           DCL PAGING_OBJ BIT(1) ALIGNED EXT INIT('0'B);
   22
   23           DCL OBJ_PAGE_COUNT SBIN WORD EXT INIT(0);
   24
   25           DCL OBJ_FINISHED BIT(1) ALIGNED EXT INIT('0'B);
   26
   27           DCL OBJ_SEG_SIZE SBIN WORD EXT INIT(0);
   28
   29           DCL OBJ_TOP_NEW_SEG PTR EXT INIT(ADDR(NIL));
   30
   31           DCL OBJ_LAST_REGULAR_PAGE PTR EXT INIT(ADDR(NIL));
   32
   33           DCL 1 OBJ_ EXT,
   34                  2 TOP PTR INIT(ADDR(NIL)),
   35                  2 FIRST PTR,
   36                  2 BOTTOM SBIN WORD INIT(0),
   37                  2 FLOOR SBIN WORD INIT(0),
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           2    
   38                  2 SIZE  SBIN WORD INIT(0) ;
   39
   40           DCL 1 OBJ BASED(OBJ$) ALIGNED,
   41                  2 ID       UBIN HALF UNAL,
   42                  2 *        UBIN HALF UNAL;
   43
   44           DCL 1 OBJ_WORD BASED(OBJ$) ALIGNED,
   45                  2 ID       UBIN HALF UNAL,
   46                  2 KEY      UBIN(9) UNAL,    /* Type of generated word */
   47                  2 B REDEF KEY,
   48                    3 *        BIT(1) UNAL,
   49                    3 SEGID_REL BIT(1) UNAL,
   50                    3 BOTH_REL BIT(1) UNAL,
   51                    3 HALF_REL BIT(1) UNAL,
   52                    3 RESOLVE_ADDRESS BIT(1) UNAL,
   53                    3 ETC BIT(1) UNAL,
   54                    3 BUFFER BIT(1) UNAL,
   55                    3 WORD_REL    BIT(1) UNAL,
   56                    3 IC     BIT(1) UNAL,
   57                  2 *        UBIN(9) UNAL,
   58                  2 OFFSET   SBIN WORD UNAL,  /* Location counter       */
   59                  2 ST$      PTR,             /* Symbol Table pointer   */
   60                  2 OU_WORD  BIT(36) UNAL,    /* Generated word         */
   61                  2 ST2$     REDEF OU_WORD PTR, /* Used if B.BOTH_REL is on */
   62
   63                  2 INST REDEF OU_WORD,
   64                    3 LONGY  UBIN HALF UNAL,
   65                    3 SHORT REDEF LONGY,
   66                      4 AR#  UBIN(3) UNAL,
   67                      4 Y    SBIN(15) UNAL,
   68                    3 OPCODE UBIN(9) UNAL,
   69                    3 EIS    UBIN(1) UNAL,
   70                    3 INT    BIT(1) UNAL,
   71                    3 AR     BIT(1) UNAL,
   72                    3 TAGM   UBIN(2) UNAL,
   73                    3 TAGD   UBIN(4) UNAL;
   74
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           3    
   75           DCL 1 OBJ_LINE BASED(OBJ$) ALIGNED,
   76                  2  ID      UBIN HALF UNAL,
   77                  2  TYPE    UBIN HALF UNAL,
   78                  2  OFFSET  SBIN WORD UNAL,  /* Instruction counter    */
   79                  2  COLUMN  UBIN HALF UNAL,  /* Column within NUMBER   */
   80                  2  NUMBER  UBIN HALF UNAL;
   81
   82           DCL 1 OBJ_LAB BASED(OBJ$) ALIGNED,
   83                  2  ID      UBIN HALF UNAL,
   84                  2  *       UBIN HALF UNAL,
   85                  2 ST$      PTR;
   86
   87           DCL 1 OBJ_ORG BASED(OBJ$) ALIGNED,
   88                  2 ID       UBIN HALF UNAL,
   89                  2 *        UBIN HALF UNAL,
   90                  2 ST$      PTR;
   91
   92           DCL 1 OBJ_SCOPE BASED(OBJ$) ALIGNED,
   93                  2 ID       UBIN HALF UNAL,
   94                  2 *        UBIN HALF UNAL,
   95                  2 PROC$    PTR;
   96
   97      %MACRO NEW_WORD( @OU_WORD = ,
   98                       @ST2$    = ,
   99                       @OFFSET  = CURRENT_BLOCK$ -> BLOCK.SIZE ,
  100                       @ST$  =    "ADDR(NIL)" ,
  101                       @KEY     = 0 ,
  102                       @ADVANCE_BLOCK_SIZE(YES='1'B, NO='0'B) = '1'B );
  103
  104           %LSET OK1 = (TEXTCHAR(@OU_WORD) ~= '');
  105           %LSET OK2 = (TEXTCHAR(@ST2$) ~= '');
  106
  107           DO;
  108             %RESERVE_OBJ(ITEM=%WORD);
  109
  110             OBJ_WORD.ST$ = @ST$;
  111             OBJ_WORD.OFFSET = @OFFSET;
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           4    
  112             OBJ_WORD.KEY = @KEY;
  113
  114             %IF OK1;
  115               OBJ_WORD.OU_WORD = @OU_WORD;
  116             %ELSEIF OK2;
  117               OBJ_WORD.ST2$ = @ST2$;
  118             %ELSE;
  119               %ERROR(~OK1,'Missing OU_WORD parameter',2);
  120             %ENDIF;
  121
  122             %IF @ADVANCE_BLOCK_SIZE;
  123               CURRENT_BLOCK$ -> BLOCK.SIZE = CURRENT_BLOCK$ -> BLOCK.SIZE + 1;
  124               IF CURRENT_BLOCK$ -> BLOCK.SIZE = 0 THEN
  125                 CALL Z8AE$ERROR (%E$CODE_LIMIT);
  126             %ENDIF;
  127           END;
  128
  129      %MEND;
  130
  131
  132
  133      %MACRO NEW_LINE ( @OFFSET = ,
  134                        @TYPE   = ,
  135                        @COLUMN = ,
  136                        @NUMBER = );
  137
  138           %LSET OK1 = (TEXTCHAR(@OFFSET) ~= '');
  139           %LSET OK2 = (TEXTCHAR(@COLUMN) ~= '');
  140           %LSET OK3 = (TEXTCHAR(@NUMBER) ~= '');
  141           %LSET OK4 = (TEXTCHAR(@TYPE) ~= '');
  142
  143           DO;
  144             %RESERVE_OBJ(ITEM = %LINE);
  145
  146             %IF OK1;
  147               OBJ_LINE.OFFSET = @OFFSET;
  148             %ELSE;
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           5    
  149               %ERROR(~OK1,'Missing OFFSET parameter', 2);
  150             %ENDIF;
  151
  152             %IF OK2;
  153               OBJ_LINE.COLUMN = @COLUMN;
  154             %ELSE;
  155               %ERROR(~OK2,'Missing COLUMN parameter', 2);
  156             %ENDIF;
  157
  158             %IF OK3;
  159               OBJ_LINE.NUMBER = @NUMBER;
  160             %ELSE;
  161               %ERROR(~OK3,'Missing NUMBER parameter', 2);
  162             %ENDIF;
  163
  164             %IF OK4;
  165               OBJ_LINE.TYPE = @TYPE;
  166             %ELSE;
  167               %ERROR(~OK4, 'Missing TYPE parameter', 2);
  168             %ENDIF;
  169
  170           END;
  171
  172      %MEND;
  173
  174
  175
  176      %MACRO NEW_LAB( @ST$  = );
  177
  178           %LSET OK1 = (TEXTCHAR(@ST$) ~= '');
  179
  180           DO;
  181             %RESERVE_OBJ ( ITEM = %LAB );
  182
  183             %IF OK1;
  184               OBJ_LAB.ST$ = @ST$;
  185             %ELSE;
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           6    
  186               %ERROR(~OK1,'Missing ST$ parameter', 2);
  187             %ENDIF;
  188           END;
  189
  190      %MEND;
  191
  192
  193
  194      %MACRO NEW_ORG( @ST$ = );
  195
  196           %LSET OK1 = (TEXTCHAR(@ST$) ~= '');
  197
  198           DO;
  199             %RESERVE_OBJ ( ITEM = %ORG );
  200
  201             %IF OK1;
  202               OBJ_ORG.ST$ = @ST$;
  203             %ELSE;
  204               %ERROR(~OK1,'Missing ST$ parameter', 2);
  205             %ENDIF;
  206           END;
  207
  208      %MEND;
  209
  210      %MACRO NEW_SCOPE ( @PROC$ = );
  211           %LSET OK1 = (TEXTCHAR(@PROC$) ~= '');
  212
  213           DO;
  214             %RESERVE_OBJ ( ITEM = %OBJ_SCOPE );
  215
  216             %IF OK1;
  217               OBJ_SCOPE.PROC$ = @PROC$;
  218             %ELSE;
  219               %ERROR(~OK1,'MISSING PROC$ PARAMETER', 2);
  220             %ENDIF;
  221           END;
  222
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           7    
  223      %MEND;
  224
  225      %MACRO RESERVE_OBJ (ITEM=, POINTER=OBJ$) ;
  226
  227           DO;
  228             %IF ITEM = %LINE;
  229                %LSET @OBJ_SIZE = CHARTEXT('SIZEW(OBJ_LINE)');
  230             %ELSEIF ITEM = %LAB;
  231                %LSET @OBJ_SIZE = CHARTEXT('SIZEW(OBJ_LAB)');
  232             %ELSEIF ITEM = %WORD;
  233                %LSET @OBJ_SIZE = CHARTEXT('SIZEW(OBJ_WORD)');
  234             %ELSEIF ITEM = %ORG;
  235                %LSET @OBJ_SIZE = CHARTEXT('SIZEW(OBJ_ORG)');
  236             %ELSEIF ITEM = %OBJ_SCOPE;
  237                %LSET @OBJ_SIZE = CHARTEXT('SIZEW(OBJ_SCOPE)');
  238             %ELSE;
  239                %ERROR ('**** Invalid item in RESERVE_OBJ', 4);
  240             %ENDIF;
  241
  242             IF OBJ_.BOTTOM + %@OBJ_SIZE >= OBJ_.FLOOR THEN
  243               DO;
  244                 IF PAGING_OBJ THEN
  245                   CALL Z9HF$WRITE_OBJ_PAGE(OBJ_.TOP);
  246
  247                 CALL Z9HF$GET_OBJ_PAGE;
  248               END;
  249
  250             POINTER = PINCRW(OBJ_.FIRST, OBJ_.BOTTOM);
  251             OBJ_.BOTTOM = OBJ_.BOTTOM + %@OBJ_SIZE;
  252             POINTER -> OBJ.ID = ITEM;
  253           END;
  254
  255      %MEND ;
  256
  257      %MACRO TOP_OBJ (POINTER = OBJ$) ;
  258
  259             DO ;
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           8    
  260               IF PAGING_OBJ THEN
  261                 DO;
  262
  263                   IF ~OBJ_FINISHED THEN
  264                     DO;
  265                       CALL Z9HF$WRITE_OBJ_PAGE(OBJ_.FIRST);
  266                       OBJ_FINISHED = TRUE;
  267                     END;
  268
  269                   CALL Z9HF$CLOSE_OBJ;
  270                   CALL Z9HF$OPEN_OBJ_INPUT;
  271                   CALL Z9HF$READ_OBJ_PAGE;
  272                 END;
  273
  274               POINTER = OBJ_.TOP ;
  275             END ;
  276
  277      %MEND ;
  278
  279      %MACRO STEP_OBJ (POINTER = OBJ$) ;
  280
  281           DO;
  282             POINTER = PINCRW(POINTER, OBJ_STEP(POINTER -> OBJ.ID - %FIRST_OBJ));
  283
  284              IF POINTER -> OBJ.ID = %CONTINUE THEN
  285                DO;
  286                  IF PAGING_OBJ THEN
  287                    DO;
  288                      CALL Z9HF$READ_OBJ_PAGE
  289
  290                         WHENRETURN DO;
  291                            POINTER = OBJ_.FIRST;
  292                         END;
  293
  294                         WHENALTRETURN DO;
  295                            CALL Z9HF$CLOSE_OBJ;
  296                            POINTER = ADDR(NIL);
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           9    
  297                         END;
  298                    END;
  299                  ELSE
  300                    IF POINTER = PINCRW(OBJ_.FIRST,OBJ_.BOTTOM) THEN
  301                      POINTER = ADDR(NIL);
  302                    ELSE
  303                      POINTER = POINTER -> CONT.NEXT;
  304                 END;
  305           END;
  306
  307      %MEND ;
  308
  309
  310
  311
  312      %EQU OBJ_STEP_BOUNDS = LAST_OBJ - FIRST_OBJ;
  313
  314      DCL   OBJ_STEP (0:%OBJ_STEP_BOUNDS) UBIN
  315      %IF INITIALIZE;
  316            CONSTANT SYMDEF
  317      INIT(  SIZEW(OBJ_LINE)   /* LINE      */,
  318             SIZEW(OBJ_LAB)    /* LAB       */,
  319             SIZEW(OBJ_WORD)   /* WORD      */,
  320             SIZEW(OBJ_ORG)    /* ORG       */,
  321             SIZEW(OBJ_SCOPE)  /* OBJ_SCOPE */)
  322      %ELSE;
  323            SYMREF READONLY
  324      %ENDIF;
  325      ;
  326      %EJECT;

09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           10   
  327
  328
  329      /* These macros are common between Z9IO and Z9IL */
  330
  331      %MACRO DCL_EIS_BUFFER;
  332
  333        DCL EIS_BUFFER_LEN SBIN WORD;
  334
  335        DCL 1 EIS_BUFFER,
  336              2 QUEUE (0:3),
  337                3 * SBIN WORD,
  338                3 * SBIN WORD,
  339                3 * SBIN WORD,
  340                3 INST SBIN WORD,
  341              2 EWORD REDEF QUEUE,
  342                3 * BIT(36) ALIGNED,
  343                3 * BIT(36) ALIGNED,
  344                3 * BIT(36) ALIGNED,
  345                3 INST,
  346                  4 *      BIT(2) UNAL,
  347                  4 AR3    BIT(1) UNAL,
  348                  4 *      BIT(2) UNAL,
  349                  4 TAGD3 UBIN(4) UNAL,
  350                  4 *      BIT(2) UNAL,
  351                  4 AR2    BIT(1) UNAL,
  352                  4 *      BIT(2) UNAL,
  353                  4 TAGD2 UBIN(4) UNAL,
  354                  4 *      BIT(11) UNAL,
  355                  4 AR1    BIT(1) UNAL,
  356                  4 *      BIT(2) UNAL,
  357                  4 TAGD1 UBIN(4) UNAL,
  358                3 *(0:11) SBIN WORD;
  359
  360        DCL 1 LOCAL_OBJ_WORD ALIGNED,
  361              2 LONGY  UBIN HALF UNAL,
  362              2 SHORT REDEF LONGY,
  363                3 AR#  UBIN(3) UNAL,
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           11   
  364                3 Y    SBIN(15) UNAL,
  365              2 OPCODE UBIN(9) UNAL,
  366              2 EIS    UBIN(1) UNAL,
  367              2 INT    BIT(1) UNAL,
  368              2 AR     BIT(1) UNAL,
  369              2 TAGM   UBIN(2) UNAL,
  370              2 TAGD   UBIN(4) UNAL;
  371
  372      %MEND;
  373
  374
  375      %MACRO APPLY_RESOLVE_ADDRESS(@POINTER = OBJ$);
  376
  377       DO;
  378        LOCAL_OBJ_WORD = @POINTER -> OBJ_WORD.INST;
  379
  380        IF @POINTER -> OBJ_WORD.B.RESOLVE_ADDRESS THEN
  381          DO CASE (EIS_BUFFER_LEN);
  382
  383            CASE(0);
  384
  385              IF LOCAL_OBJ_WORD.AR THEN
  386                  LOCAL_OBJ_WORD.SHORT.Y = LOCAL_OBJ_WORD.SHORT.Y
  387                                         + @POINTER -> OBJ_WORD.ST$ -> ST.SA;
  388              ELSE
  389                  LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY
  390                                         + @POINTER -> OBJ_WORD.ST$ -> ST.SA;
  391
  392            CASE(1);
  393
  394              IF EIS_BUFFER.EWORD.INST.AR1 THEN
  395                  LOCAL_OBJ_WORD.SHORT.Y = LOCAL_OBJ_WORD.SHORT.Y
  396                                         + @POINTER -> OBJ_WORD.ST$ -> ST.SA;
  397              ELSE
  398                  LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY
  399                                         + @POINTER -> OBJ_WORD.ST$ -> ST.SA;
  400
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           12   
  401            CASE(2);
  402
  403              IF EIS_BUFFER.EWORD.INST.AR2 THEN
  404                  LOCAL_OBJ_WORD.SHORT.Y = LOCAL_OBJ_WORD.SHORT.Y
  405                                         + @POINTER -> OBJ_WORD.ST$ -> ST.SA;
  406              ELSE
  407                  LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY
  408                                         + @POINTER -> OBJ_WORD.ST$ -> ST.SA;
  409
  410            CASE(3);
  411
  412              IF EIS_BUFFER.EWORD.INST.AR3 THEN
  413                  LOCAL_OBJ_WORD.SHORT.Y = LOCAL_OBJ_WORD.SHORT.Y
  414                                         + @POINTER -> OBJ_WORD.ST$ -> ST.SA;
  415              ELSE
  416                  LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY
  417                                         + @POINTER -> OBJ_WORD.ST$ -> ST.SA;
  418
  419          END;  /* DO CASE */
  420       END;
  421
  422      %MEND;
  423
  424
  425      %MACRO APPLY_IC(@POINTER = OBJ$);
  426
  427       DO;
  428        IF @POINTER -> OBJ_WORD.B.IC THEN
  429          DO CASE (EIS_BUFFER_LEN);
  430
  431            CASE(0);
  432
  433              IF LOCAL_OBJ_WORD.AR THEN
  434                  LOCAL_OBJ_WORD.SHORT.Y = LOCAL_OBJ_WORD.SHORT.Y
  435                                         - @POINTER -> OBJ_WORD.OFFSET;
  436              ELSE
  437                  LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           13   
  438                                         - @POINTER -> OBJ_WORD.OFFSET;
  439             LOCAL_OBJ_WORD.TAGD = 4;
  440
  441            CASE(1);
  442
  443              IF EIS_BUFFER.EWORD.INST.AR1 THEN
  444                  LOCAL_OBJ_WORD.SHORT.Y = LOCAL_OBJ_WORD.SHORT.Y
  445                                         - @POINTER -> OBJ_WORD.OFFSET + EIS_BUFFER_LEN;
  446              ELSE
  447                  LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY
  448                                         - @POINTER -> OBJ_WORD.OFFSET + EIS_BUFFER_LEN;
  449              EIS_BUFFER.EWORD.INST.TAGD1 = 4;
  450
  451            CASE(2);
  452
  453              IF EIS_BUFFER.EWORD.INST.AR2 THEN
  454                  LOCAL_OBJ_WORD.SHORT.Y = LOCAL_OBJ_WORD.SHORT.Y
  455                                         - @POINTER -> OBJ_WORD.OFFSET + EIS_BUFFER_LEN;
  456              ELSE
  457                  LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY
  458                                         - @POINTER -> OBJ_WORD.OFFSET + EIS_BUFFER_LEN;
  459              EIS_BUFFER.EWORD.INST.TAGD2 = 4;
  460
  461            CASE(3);
  462
  463              IF EIS_BUFFER.EWORD.INST.AR3 THEN
  464                  LOCAL_OBJ_WORD.SHORT.Y = LOCAL_OBJ_WORD.SHORT.Y
  465                                         - @POINTER -> OBJ_WORD.OFFSET + EIS_BUFFER_LEN;
  466              ELSE
  467                  LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY
  468                                         - @POINTER -> OBJ_WORD.OFFSET + EIS_BUFFER_LEN;
  469              EIS_BUFFER.EWORD.INST.TAGD3 = 4;
  470
  471          END;  /* DO CASE */
  472       END;
  473
  474      %MEND;
09:12 AUG 09 '97 Z8A_OBJ.:Z8A6SI                                           14   
  475
  476
  477
  478
  479         %MACRO Resolve_Address(@Pointer = "ADDR(NIL)");
  480
  481         IF @Pointer -> OBJ_WORD.B.RESOLVE_ADDRESS THEN
  482            IF LOCAL_OBJ_WORD.AR THEN
  483               LOCAL_OBJ_WORD.SHORT.Y = LOCAL_OBJ_WORD.SHORT.Y + @Pointer -> OBJ_WORD.ST$ -> ST.SA;
  484
  485            ELSE
  486               LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY + @Pointer -> OBJ_WORD.ST$ -> ST.SA;
  487
  488
  489         IF @Pointer -> OBJ_WORD.B.IC THEN
  490            DO;
  491            LOCAL_OBJ_WORD.LONGY = LOCAL_OBJ_WORD.LONGY - @Pointer -> OBJ_WORD.OFFSET;
  492            LOCAL_OBJ_WORD.TAGD=4;
  493            END;
  494         %MEND;
  495
  496

