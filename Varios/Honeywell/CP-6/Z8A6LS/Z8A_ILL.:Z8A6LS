

09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /* INCLUDE FILE "ILL" (ACCOUNT IS C80C80) */
    7
    8      DCL   ILL$   PTR EXT;
    9
   10      DCL 1  ILL_   EXT,
   11           2 TOP    PTR  INIT (ADDR(NIL)),
   12           2 FIRST  PTR,               /* FIRST ITEM IN PAGE  */
   13           2 BOTTOM SBIN INIT(0),      /* NEXT AVAILABLE      */
   14           2 FLOOR  SBIN INIT(0),      /* LAST WORD IN PAGE   */
   15           2 SIZE   SBIN INIT(0);      /* Size in #words      */
   16
   17      DCL 1  ILL     BASED (ILL$) ALIGNED,
   18           2 ID      UBIN HALF UNAL, /* OPERATION CODE */
   19           2 CODE    UBIN HALF UNAL,
   20           2 LOP     PTR,            /* LEFT OPERAND */
   21           2 WHEN$   REDEF LOP PTR,  /* Ptr to next WHEN entry for current EVALUATE */
   22           2 ARG$    REDEF LOP PTR,  /* Ptr to ARGLIST fo CASE statement */
   23           2 ROP     PTR,            /* RIGHT OPERAND */
   24           2 LBL     REDEF ROP PTR,  /* Ptr to previous label */
   25           2 SUB     REDEF ROP PTR,  /* Ptr to SBI item for EVALUATE stmt */
   26           2 ROPCON  REDEF ROP SBIN, /* USE_ENTRY, count of EXIT_PROGs */
   27           2 TO_     PTR,            /* RECEIVING FIELD */
   28           2 ILL$    REDEF TO_ PTR,  /* Ptr to next INITV, INCRV, etc */
   29           2 BRANCH$ REDEF TO_ PTR,  /* Ptr to next branch instr. for label res. */
   30           2 REMAINDER         PTR,  /* Ptr to Remainder */
   31           2 DESCRIPTOR$ REDEF REMAINDER PTR; /* Ptr to Descriptor Block */
   32
   33      DCL 1  PFORM   BASED (ILL$) ALIGNED, /* PFORM */
   34           2 ID      UBIN HALF UNAL, /* OPERATION CODE */
   35           2 CODE    UBIN HALF UNAL,
   36           2 LOP     PTR,            /* LEFT OPERAND */
   37           2 ROP     PTR,            /* RIGHT OPERAND */
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          2    
   38           2 BRANCH$ PTR,  /* Ptr to next branch instr. for label res. */
   39           2 PFORM_LIST$ PTR, /* Ptr to next PFORM item in PFORM list */
   40           2 DO$     PTR;  /* PTR to DO2 if PERFORM n TIMES */
   41
   42      DCL 1  LINOI     BASED (ILL$) ALIGNED, /* LINOI */
   43           2 ID        UBIN HALF UNAL,
   44           2 PREV_LINE UBIN HALF UNAL,
   45           2 COLUMN_NO UBIN HALF UNAL,
   46           2 LINE_NO   UBIN HALF UNAL,
   47           2 TYPE      UBIN HALF UNAL,
   48           2 PREV_COL  UBIN HALF UNAL;
   49
   50      DCL 1   CCOSU     BASED (ILL$) ALIGNED, /* EVALP, CCOSU */
   51           2  ID        UBIN HALF UNAL,
   52           2  CNTE      SBIN HALF UNAL, /* Count of number of References  */
   53           2  LEVEL     SBIN HALF UNAL, /* Loop Level of Lowest Reference */
   54           2  HSEQ      SBIN HALF UNAL, /* Sequence# of Highest Reference */
   55           2  B         UNAL,           /* Bits                           */
   56            3 OPTZ      BIT (1),        /* Part of an Optimal Subscript   */
   57            3 NLN       BIT (1),        /* Non-Linear                     */
   58            3 IND          BIT (1),     /* Contains Induction Variables   */
   59            3 INV          BIT (1),     /* Has INITV item generated       */
   60            3 GOOD_FOREVER BIT (1),     /* The triad is never redefined   */
   61            3 VAL_FREEZE   BIT (1),     /* Value freeze dictated by %VAL  */
   62            3 *            BIT (12),    /* Upper Half Bits are for Phase3 */
   63            3 *            BIT (14),    /* Lower Half Bits are for Phase4 */
   64            3 IGNORE    BIT (1),        /* Ignore this CCOSU              */
   65            3 EVAL      BIT (1),        /* Evaluate Here (don't wait)     */
   66            3 ARITH     BIT (1),        /* Used Arithmetically            */
   67            3 SUBS      BIT (1),        /* Used As a Subscript            */
   68
   69           2  GEN REDEF B,              /* Generator code only            */
   70            3 *         BIT(32) UNAL,   /* FILLER                         */
   71            3 CODE      UBIN(4) UNAL,   /* eval,arith, and subs           */
   72
   73           2  ILL$      PTR,            /* Ptr to another CCOSU or ILL    */
   74           2  NEXT$     REDEF ILL$ PTR, /* Pooling Mechanism in PH3     */
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          3    
   75
   76           2  EVEX      PTR,            /* Ptr to the EValp EXpression    */
   77           2  LSEQ      SBIN HALF UNAL, /* Sequence# of Lowest Reference  */
   78           2  MSEQ      SBIN HALF UNAL; /* Minimum Seq# of Inductions     */
   79
   80      DCL 1   VAL       BASED (ILL$) ALIGNED,
   81           2  ID        UBIN HALF UNAL,
   82           2  *         UBIN HALF UNAL,
   83           2  ETT$      PTR,       /* Value that is suspended. */ /*#28761*/
   84           2  VAL_END$  PTR ;                /* VAL_END ILS item */
   85
   86      DCL 1   VAL_END   BASED (ILL$) ALIGNED,
   87           2  ID        UBIN HALF UNAL,
   88           2  *         UBIN HALF UNAL,
   89           2  VAL$      PTR ,                /* VAL ILS item */
   90           2  LINOI$    PTR ;                /* LINOI ILS following */
   91
   92      DCL 1   DO_N      BASED (ILL$) ALIGNED , /* DO1, DO5 */
   93           2  ID        UBIN HALF UNAL,
   94           2  B         UNAL,
   95            3 TEST_AFTER BIT (1),        /* If test is done after loop    */
   96            3 *         BIT (17),
   97           2  ITE       PTR,             /* Ptr to end of loop            */
   98           2  ITB       REDEF ITE PTR,   /* Ptr to beginning of loop      */
   99           2  GLIST     PTR,             /*                               */
  100           2  DLBT      REDEF GLIST PTR, /*                               */
  101           2  ITP       PTR,             /* Ptr to prior DO or DOEND entry*/
  102           2  LABEL REDEF ITP PTR,       /* Generator use only            */
  103           2  ITO       PTR,             /* Ptr to outside loop entry     */
  104           2  LEVEL     SBIN HALF UNAL,  /* Nesting level of do loop      */
  105           2  VAR_CNT   SBIN HALF UNAL,  /* Number of varying clauses for PFORM format 4 */
  106           2  XLAB      PTR,             /* Ptr to last referenced label  */
  107           2  TEMP REDEF XLAB PTR,       /* Generator use only            */
  108           2  TIMES$    PTR,             /* Ptr to number of times loop dn */
  109           2  MOVE$     REDEF TIMES$ PTR,/* Ptr to MOVE instr for varying */
  110           2  VARYING$  PTR,             /* Ptr to variable to vary       */
  111           2  END_LAB$  REDEF VARYING$ PTR,/* Ptr to label after end of DOEND*/
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          4    
  112           2  FROM$     PTR,             /* Ptr to starting value         */
  113           2  BY$       PTR;             /* Ptr to increment value        */
  114
  115      DCL 1   DOEND     BASED (ILL$) ALIGNED,  /* DOEND */
  116           2  ID        UBIN HALF UNAL,
  117           2  B         UNAL,
  118            3 *         BIT (18),
  119           2  ITB       PTR, /* Ptr to associated DOn item */
  120           2  DLIST     PTR, /* Ptr to Temp Deassignment List */
  121           2  ITP       PTR; /* Ptr to next DOn or DOEND */
  122
  123
  124
  125      DCL 1  PRESET    BASED (ILL$) ALIGNED, /* PRESET, PTR_SET */
  126           2 ID        UBIN HALF UNAL,
  127           2 OFFSET    UBIN HALF UNAL, /* Offset from lop to begin preset */
  128           2 LOP       PTR , /* Ptr to ST item to preset */
  129           2 ROP       PTR; /* Ptr to the constant's ST item */
  130
  131      DCL 1  PREOFF    BASED (ILL$) ALIGNED,
  132           2 ID        UBIN HALF UNAL,
  133           2 OFFSET    UBIN HALF UNAL,  /* Offset of LOP in words */
  134           2 LOP       PTR,  /* St ptr */
  135           2 ROP       PTR,  /* St ptr */
  136           2 N         UBIN WORD;  /* Length in words of sending guy */
  137
  138      DCL 1  P_P_PRESET      BASED (ILL$) ALIGNED,
  139            2 ID             UBIN HALF UNAL,
  140            2 OFFSET         UBIN HALF UNAL,
  141            2 LOP            PTR,
  142            2 ROP            PTR,
  143            2 TO_            PTR;
  144
  145      DCL 1  P_A_PRESET      BASED (ILL$) ALIGNED,
  146           2 ID              UBIN HALF UNAL,
  147           2 OFFSET          UBIN HALF UNAL, /* Offset of TO_ in words */
  148           2 LOP             PTR,            /* ST ptr to address to be
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          5    
  149                                                preset in upper half */
  150           2 ROPCON          UBIN,           /* Constant to be preset in
  151                                                lower half           */
  152           2 TO_             PTR;            /* The word to be preseted */
  153
  154
  155      DCL 1  BINARY_ILL BASED (ILL$) ALIGNED, /* AD2D - MVDI, MVIK, OR2I, */
  156                                             /* MVOOR - MVODR, MVOO - AD2OR, MP2O, */
  157                                             /* MP2OR, DV2O, DV2OR, SB2O, SB2OR, */
  158                                              /* INITV, INCRV, SUB_ENTRY, SUB_END */
  159           2 ID         UBIN HALF UNAL,
  160           2 *          UBIN HALF UNAL,
  161           2 LOP        PTR,
  162           2 ROP        PTR;
  163
  164      DCL 1  TRINARY_ILL BASED (ILL$) ALIGNED, /* MVDDD, MVEAN - DV3DR */
  165           2 ID          UBIN HALF UNAL,
  166           2 *           UBIN HALF UNAL,
  167           2 LOP         PTR,
  168           2 ROP         PTR,
  169           2 TO_         PTR;
  170
  171      DCL 1  ACCEPT_DISPLAY BASED (ILL$) ALIGNED, /* ACCEP, DISPL */
  172           2 ID             UBIN HALF UNAL,
  173           2 CODE           UBIN HALF UNAL,
  174           2 LOP            PTR,
  175           2 ROP            PTR;
  176
  177      DCL 1  CODED_MOVE BASED (ILL$) ALIGNED, /* MVANO, MVIH, MVIJ */
  178           2 ID         UBIN HALF UNAL,
  179           2 CODE       UBIN HALF UNAL,
  180           2 LOP        PTR,
  181           2 ROP        PTR;
  182
  183      DCL 1  MVFIL       BASED (ILL$) ALIGNED, /* MVFIL */
  184           2 ID          UBIN HALF HALIGNED,
  185           2 FILL        CHAR(1),
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          6    
  186           2 CODE        UBIN BYTE CALIGNED,
  187           2 LOP         PTR,
  188           2 ROP         PTR;
  189
  190      DCL 1  MVEAL       BASED (ILL$) ALIGNED, /* MVEAL */
  191           2 ID          UBIN HALF UNAL,
  192           2 *           UBIN HALF UNAL,
  193           2 LOP         PTR,
  194           2 ROP         PTR,
  195           2 TO_         PTR,
  196           2 DESCRIPTOR$ PTR;
  197
  198      DCL 1  DV4I        BASED (ILL$) ALIGNED, /* DV4I */
  199           2 ID          UBIN HALF UNAL,
  200           2 *           UBIN HALF UNAL,
  201           2 LOP         PTR,
  202           2 ROP         PTR,
  203           2 TO_         PTR,
  204           2 REMAINDER   PTR;
  205
  206      DCL 1  ILL_NO_OPS  BASED (ILL$) ALIGNED, /* STOP, END, PEND, STOPL */
  207           2 ID          UBIN HALF UNAL,
  208           2 CODE        UBIN HALF UNAL;
  209
  210      DCL 1  UNARY_ILL   BASED (ILL$) ALIGNED, /* ON_SWITCH, OFF_SWITCH */
  211                                               /* GO_SUB, SUB_PREP   */
  212                                               /* EXIT_PROG, USE_END */
  213           2 ID          UBIN HALF UNAL,
  214           2 CODE        UBIN HALF UNAL,
  215           2 LOP         PTR;
  216
  217      DCL 1  ENTRY_ILL   BASED (ILL$) ALIGNED, /* ENTRY, USE_ENTRY */
  218           2 ID          UBIN HALF UNAL,
  219           2 CODE        UBIN HALF UNAL,
  220           2 LOP         PTR,
  221           2 ROP         PTR,
  222           2 PREV_ENTRY_ILS$ PTR,
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          7    
  223           2 EXIT_PROG$  PTR ;
  224
  225      DCL 1  MFILL       BASED (ILL$) ALIGNED, /* MFILL */
  226           2 ID          UBIN HALF UNAL,
  227           2 FILL        CHAR (1) UNAL,
  228           2 *           CHAR (1) UNAL,
  229           2 LOP         PTR;
  230
  231      DCL 1  GO          BASED (ILL$) ALIGNED, /* GO */
  232           2 ID          UBIN HALF UNAL,
  233           2 CODE        UBIN HALF UNAL,
  234           2 LOP         PTR,
  235           2 LABEL$ REDEF LOP PTR,
  236           2 ROP         PTR,
  237           2 EXPR$  REDEF ROP PTR,
  238           2 BRANCH$     PTR;
  239
  240      DCL 1  BRANCH_ILL  BASED (ILL$) ALIGNED, /* ALTER */
  241           2 ID          UBIN HALF UNAL,
  242           2 *           UBIN HALF UNAL,
  243           2 LOP         PTR,
  244           2 ROP         PTR,
  245           2 BRANCH$     PTR;
  246
  247      DCL 1  DEFLB       BASED (ILL$) ALIGNED, /* DEFLB */
  248           2 ID          UBIN HALF UNAL,
  249           2 *           UBIN HALF UNAL,
  250           2 LOP         PTR,
  251           2 LBL         PTR,
  252    *      2 BRANCH$     PTR,
  253    *      2 PREV_ENTRY_ILS$ REDEF BRANCH$ PTR; /* For Phase 3 */
  254
  255      DCL 1  EVALU       BASED (ILL$) ALIGNED, /* EVALU */
  256           2 ID          UBIN HALF UNAL,
  257           2 CODE        UBIN HALF UNAL,
  258           2 WHEN$       PTR,             /* Ptr to first WHEN item */
  259           2 ARG$        REDEF WHEN$ PTR, /* Ptr to ARGLIST if case optimized */
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          8    
  260           2 SUB         PTR;            /* Ptr to SBI item */
  261
  262      DCL 1  WHEN        BASED (ILL$) ALIGNED, /* WHEN  */
  263           2 ID          UBIN HALF UNAL,
  264           2 CODE        UBIN HALF UNAL,
  265           2 WHEN$       PTR;            /* Ptr to next WHEN item */
  266
  267      DCL 1  SCOPE       BASED (ILL$) ALIGNED, /* SCOPE */
  268           2 ID          UBIN HALF UNAL,
  269           2 CODE        UBIN HALF UNAL, /* %PROGRAM_SCOPE,
  270                                            %DECLARATIVES_SCOPE */
  271           2 PROC$       PTR, /* to current PROC_ ST item */
  272           2 END_ILS$    PTR, /* to end ils item for this scope - PH2 */
  273           2 BRANCH$     PTR; /* Ph2 */
  274
  275      DCL 1  SEARCH_     BASED (ILL$) ALIGNED, /* SEARCH */
  276           2 ID          UBIN HALF UNAL,
  277           2 *           UBIN HALF UNAL,
  278           2 LOP         PTR ,
  279           2 ROP         PTR,
  280           2 TO_         PTR,
  281           2 TABLEVAL    PTR, /* Optional */
  282           2 ALTRET_     PTR; /* Optional */
  283
  284      DCL 1  OS_CALL     BASED (ILL$) ALIGNED, /* OS_CALL */
  285           2 ID          UBIN HALF UNAL,
  286           2 CODE        UBIN HALF UNAL,
  287           2 LOP         PTR,
  288           2 ROP         PTR,
  289           2 BRANCH$     PTR,
  290           2 ALTRET$     PTR,  /* Optional */
  291           2 RETURN$     REDEF ALTRET$ PTR ;
  292
  293      DCL 1  USER_CALL   BASED (ILL$) ALIGNED, /* USER_CALL */
  294           2 ID          UBIN HALF UNAL,
  295           2 *           UBIN HALF UNAL,
  296           2 LOP         PTR,
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          9    
  297           2 ROP         PTR,
  298           2 BRANCH$     PTR,
  299           2 ALTRET$     PTR,
  300           2 DESTINATION$ PTR;
  301
  302       DCL 1 STP2   BASED(ILL$) ALIGNED,
  303             2 ID               UBIN HALF UNAL,
  304             2 *                UBIN HALF UNAL,
  305             2 LOP              PTR;
  306
  307       DCL 1 REMEM    BASED(ILL$) ALIGNED,
  308             2 ID        UBIN HALF UNAL,
  309             2 *         UBIN HALF UNAL,
  310             2 LOP       PTR,
  311             2 ROP       PTR,
  312             2 BRANCH$   PTR;
  313
  314       DCL 1 PINC     BASED(ILL$) ALIGNED,
  315             2 ID        UBIN HALF UNAL,
  316             2 *         UBIN HALF UNAL,
  317             2 LOP       PTR,
  318             2 ROP       PTR,
  319             2 ROPCON    UBIN WORD UNAL;
  320
  321       DCL 1 MVIIS       BASED(ILL$) ALIGNED,
  322             2 ID        UBIN HALF UNAL,
  323             2 OFFSET    UBIN HALF UNAL,
  324             2 LOP       PTR;
  325
  326       DCL 1 MULTI_GO    BASED(ILL$) ALIGNED,
  327             2 ID        UBIN HALF UNAL,
  328             2 CODE      UBIN HALF UNAL,
  329             2 LOP       PTR,
  330             2 ROP       PTR,
  331             2 BRANCH$   PTR,
  332             2 EXPR$     PTR;
  333
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          10   
  334      %MACRO RESERVE_ILL (ITEM=, POINTER=ILL$);
  335
  336           DO;
  337             ITERATION = ILL_STEP(ITEM - %FIRST_ILL);
  338
  339             IF ILL_.BOTTOM + ITERATION >= ILL_.FLOOR THEN
  340               CALL Z8AR$RESERVER(ADDR(ILL_));
  341
  342             POINTER = PINCRW(ILL_.FIRST, ILL_.BOTTOM);
  343             ILL_.BOTTOM = ILL_.BOTTOM + ITERATION;
  344             POINTER -> ILL.ID = ITEM;
  345
  346           END;
  347
  348      %MEND;
  349
  350      %MACRO TOP_ILL (POINTER = ILL$);
  351
  352           DO;
  353             POINTER = ILL_.TOP;
  354           END;
  355
  356      %MEND;
  357
  358      %MACRO STEP_ILL (POINTER = ILL$);
  359
  360           DO;
  361             ITERATION = ILL_STEP(POINTER -> ILL.ID - %FIRST_ILL);
  362
  363             POINTER = PINCRW(POINTER, ITERATION);
  364
  365             IF POINTER = PINCRW(ILL_.FIRST, ILL_.BOTTOM) THEN
  366               POINTER = ADDR(NIL);
  367             ELSE
  368               IF POINTER -> ILL.ID = %CONTINUE THEN
  369                 POINTER = POINTER -> CONT.NEXT;
  370           END;
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          11   
  371
  372      %MEND;
  373
  374      %EQU FIRST_MOVE = BITBIN('243'O);
  375      %EQU END_OF_MOVES = BITBIN('271'O);
  376      %EQU END_OF_ASSIGNMENTS = BITBIN('331'O);
  377      %EQU NO_STATEMENT_TYPE = 0 ; /* For LINOI.TYPE field */
  378
  379
  380      %SET ILL_STEP_BOUNDS = LAST_ILL - FIRST_ILL;
  381      DCL   ILL_STEP (0:%ILL_STEP_BOUNDS) UBIN
  382      %IF INITIALIZE;
  383            CONSTANT SYMDEF
  384            INIT (
  385             SIZEW(BINARY_ILL) /* AD2D   */
  386            ,SIZEW(BINARY_ILL) /* AD2DR  */
  387            ,SIZEW(BINARY_ILL) /* AD2I   */
  388            ,SIZEW(BINARY_ILL) /* SB2D   */
  389            ,SIZEW(BINARY_ILL) /* SB2DR  */
  390            ,SIZEW(BINARY_ILL) /* SB2I   */
  391            ,SIZEW(BINARY_ILL) /* MP2D   */
  392            ,SIZEW(BINARY_ILL) /* MP2DR  */
  393            ,SIZEW(BINARY_ILL) /* MP2I   */
  394            ,SIZEW(BINARY_ILL) /* DV2D   */
  395            ,SIZEW(BINARY_ILL) /* DV2DR  */
  396            ,SIZEW(BINARY_ILL) /* DV2I   */
  397            ,SIZEW(BINARY_ILL) /* DV2IR  */
  398            ,SIZEW(BINARY_ILL) /* MVDD   */
  399            ,SIZEW(BINARY_ILL) /* MVDDR  */
  400            ,SIZEW(BINARY_ILL) /* MVII   */
  401            ,SIZEW(BINARY_ILL) /* MVRR   */
  402            ,SIZEW(BINARY_ILL) /* MVQQ   */
  403            ,SIZEW(BINARY_ILL) /* MVRL   */
  404            ,SIZEW(BINARY_ILL) /* MVHH   */
  405            ,SIZEW(BINARY_ILL) /* MVID   */
  406            ,SIZEW(CODED_MOVE) /* MVIH   */
  407            ,SIZEW(BINARY_ILL) /* MVAN   */
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          12   
  408            ,SIZEW(CODED_MOVE) /* MVANO */
  409            ,SIZEW(CODED_MOVE) /* MVIJ   */
  410            ,SIZEW(BINARY_ILL) /* MVOD   */
  411            ,SIZEW(BINARY_ILL) /* MVQD   */
  412            ,SIZEW(BINARY_ILL) /* MVRD   */
  413            ,SIZEW(BINARY_ILL) /* MVJJ   */
  414            ,SIZEW(BINARY_ILL) /* MVDO   */
  415            ,SIZEW(BINARY_ILL) /* MVDQ   */
  416            ,SIZEW(BINARY_ILL) /* MVDR   */
  417            ,SIZEW(BINARY_ILL) /* MVDI   */
  418            ,SIZEW(BINARY_ILL) /* MVKK   */
  419            ,SIZEW(MFILL) /* MFILL  */
  420            ,SIZEW(BINARY_ILL) /* MVIK   */
  421            ,SIZEW(BINARY_ILL)  /* MVJI   */
  422            ,SIZEW(BINARY_ILL)  /* MVKI   */
  423            ,SIZEW(PINC)        /* PINC   */
  424            ,SIZEW(BINARY_ILL)  /* MVPP   */
  425            ,0*13
  426            ,SIZEW(REMEM)    /* REMEM */
  427            ,SIZEW(UNARY_ILL)   /* STP2  */
  428            ,SIZEW(TRINARY_ILL) /* MVDDD */
  429            ,SIZEW(MVEAL) /* MVEAL */
  430            ,SIZEW(TRINARY_ILL) /* MVEAN  */
  431            ,SIZEW(TRINARY_ILL) /* MVEDD  */
  432            ,SIZEW(TRINARY_ILL) /* AD3D   */
  433            ,SIZEW(TRINARY_ILL) /* AD3DR  */
  434            ,SIZEW(TRINARY_ILL) /* SB3D   */
  435            ,SIZEW(TRINARY_ILL) /* SB3DR  */
  436            ,SIZEW(TRINARY_ILL) /* MP3D   */
  437            ,SIZEW(TRINARY_ILL) /* MP3DR  */
  438            ,SIZEW(TRINARY_ILL) /* DV3D   */
  439            ,SIZEW(TRINARY_ILL) /* DV3DR  */
  440            ,SIZEW(TRINARY_ILL) /* DV3IR  */
  441            ,SIZEW(DV4I) /* DV4I   */
  442            ,SIZEW(ILL_NO_OPS) /* SETF   */
  443            ,SIZEW(ILL_NO_OPS) /* SETFF  */
  444            ,SIZEW(ILL_NO_OPS) /* SETFT  */
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          13   
  445            ,SIZEW(P_P_PRESET) /*  PTR_PTR_PRESET  */
  446            ,SIZEW(ILL_NO_OPS) /* STOP   */
  447            ,SIZEW(ILL_NO_OPS) /* STOPL  240 160 */
  448            ,SIZEW(CCOSU) /* EVALP  241 161 */
  449            ,SIZEW(CCOSU) /* CCOSU  242 162 */
  450            ,SIZEW(PRESET) /* PTR_SET 343 227 */
  451            ,SIZEW(GO) /* GO     */
  452            ,SIZEW(MULTI_GO) /* MULTI_GO */
  453            ,SIZEW(DEFLB) /* DEFLB  */
  454            ,SIZEV(BINARY_ILL) /* INITV */
  455            ,SIZEV(BINARY_ILL) /* INCRV */
  456            ,0*2
  457            ,SIZEW(ENTRY_ILL) /* ENTRY  */
  458            ,SIZEW(UNARY_ILL) /* ON_SWITCH */
  459            ,SIZEW(UNARY_ILL) /* OFF_SWITCH */
  460            ,SIZEW(UNARY_ILL) /* GO_SUB     */
  461            ,SIZEW(BINARY_ILL) /* SUB_ENTRY  */
  462            ,SIZEW(BINARY_ILL) /* SUB_END    */
  463            ,SIZEW(UNARY_ILL) /* SUB_PREP   */
  464            ,SIZEW(OS_CALL) /* OS_CALL   */
  465            ,SIZEW(USER_CALL)  /* USER_CALL */
  466            ,SIZEW(ENTRY_ILL) /* USE_ENTRY  */
  467            ,SIZEW(UNARY_ILL) /* USE_END    */
  468            ,SIZEW(UNARY_ILL)  /* EXIT_PROG  */
  469            ,SIZEW(VAL)            /* VAL      247  367 */
  470            ,SIZEW(VAL_END)        /* VAL_END  248  370 */
  471            ,SIZEW(ACCEPT_DISPLAY) /* ACCEP  */
  472            ,SIZEW(ACCEPT_DISPLAY) /* DISPL  */
  473            ,SIZEW(LINOI) /* LINOI  */
  474            ,SIZEW(ILL_NO_OPS) /* END    */
  475            ,SIZEW(DO_N) /* DO1    */
  476            ,SIZEW(DO_N) /* DO2    */
  477            ,SIZEW(DO_N) /* DO3    */
  478            ,SIZEW(DO_N) /* DO4    */
  479            ,SIZEW(DO_N) /* DO5    */
  480            ,SIZEW(MVFIL) /* MVFIL  */
  481            ,SIZEW(DOEND) /* DOEND  */
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          14   
  482            ,SIZEW(PFORM) /* PFORM  */
  483            ,0*2
  484            ,SIZEW(EVALU) /* EVALU  */
  485            ,SIZEW(WHEN) /* WHEN   */
  486            ,SIZEW(BINARY_ILL) /* OR2I   */
  487            ,SIZEW(BRANCH_ILL) /* ALTER  */
  488            ,SIZEW(SEARCH_) /* SRCH */
  489            ,SIZEW(TRINARY_ILL)     /* MVT  */
  490            ,SIZEW(BINARY_ILL) /* MVOOR  269  415  */
  491            ,SIZEW(BINARY_ILL) /* MVDOR  270  416  */
  492            ,SIZEW(BINARY_ILL) /* MVODR  271  417  */
  493            ,SIZEW(PREOFF) /* PREOFF */
  494            ,SIZEW(ILL_NO_OPS) /* PEND   */
  495            ,SIZEW(PRESET) /* PRESET */
  496            ,SIZEW(BINARY_ILL) /* MVOO   */
  497            ,SIZEW(BINARY_ILL) /* AD2O   */
  498            ,SIZEW(BINARY_ILL) /* AD2OR  */
  499            ,SIZEW(TRINARY_ILL) /* AD3O   */
  500            ,SIZEW(TRINARY_ILL) /* AD3OR  */
  501            ,SIZEW(BINARY_ILL) /* MP2O  */
  502            ,SIZEW(BINARY_ILL) /* MP2OR */
  503            ,SIZEW(TRINARY_ILL) /* MP3O */
  504            ,SIZEW(TRINARY_ILL) /* MP3OR */
  505            ,SIZEW(BINARY_ILL) /* DV2O  */
  506            ,SIZEW(BINARY_ILL) /* DV2OR */
  507            ,SIZEW(TRINARY_ILL) /* DV3O  */
  508            ,SIZEW(TRINARY_ILL) /* DV3OR */
  509            ,SIZEW(BINARY_ILL) /* SB2O  */
  510            ,SIZEW(BINARY_ILL) /* SB2OR */
  511            ,SIZEW(TRINARY_ILL) /* SB3O  */
  512            ,SIZEW(TRINARY_ILL) /* SB3OR */
  513            ,SIZEW(ILL_NO_OPS) /* END_PROG */
  514            ,SIZEW(SCOPE)  /* SCOPE */
  515            ,SIZEW(P_A_PRESET) /* P_A_PRESET */
  516             )
  517      %ELSE;
  518            SYMREF READONLY
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          15   
  519      %ENDIF;
  520            ;
  521
  522      /* codes for MVANO */
  523      %EQU MVANO_UPPER_TO_UPPER =  0;
  524      %EQU MVANO_UPPER_TO_LOWER =  1;
  525      %EQU MVANO_LOWER_TO_UPPER =  2;
  526      %EQU MVANO_LOWER_TO_LOWER =  3;
  527      %EQU MVANO_WORD_TO_WORD   =  4;
  528      %EQU MVANO_EVEN_TO_EVEN   =  5;
  529      %EQU MVANO_EVEN_TO_ODD    =  6;
  530      %EQU MVANO_ODD_TO_EVEN    =  7;
  531      %EQU MVANO_ODD_TO_ODD     =  8;
  532      %EQU MVANO_BYTE_0         =  9;
  533      %EQU MVANO_BYTE_1         = 10;
  534      %EQU MVANO_BYTE_2         = 11;
  535      %EQU MVANO_BYTE_3         = 12;
  536      %EQU MVANO_BYTES_1_2      = 13;
  537      %EQU MVANO_BYTES_0_2      = 14;
  538      %EQU MVANO_BYTES_1_3      = 15;
  539      %EQU MVANO_BYTES_0_1      = 16 ;
  540      %EQU MVANO_BYTES_2_3      = 17 ;
  541
  542      /* Codes for MVIH */
  543      %EQU MVIH_UPPER               = 0;
  544      %EQU MVIH_LOWER               = 1;
  545      %EQU MVIH_UNKNOWN             = 2;
  546
  547      /* Codes for MVIJ */
  548      %EQU MVIJ_BYTE0 = 0;
  549      %EQU MVIJ_BYTE1 = 1;
  550      %EQU MVIJ_BYTE2 = 2;
  551      %EQU MVIJ_BYTE3 = 3;
  552      %EQU MVIJ_UNKNOWN = 4;
  553
  554      /* Codes for MVIK */
  555      %EQU MVIK_BYTE0 = 0;
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          16   
  556      %EQU MVIK_BYTE1 = 1;
  557      %EQU MVIK_BYTE2 = 2;
  558      %EQU MVIK_BYTE3 = 3;
  559      %EQU MVIK_UNKNOWN = 4;
  560
  561      /* Codes for MVFIL */
  562      %EQU MLRFIL = 0;
  563      %EQU MRLFIL = 1;
  564
  565
  566      /* codes for DISPLAY */
  567      %EQU DISPLAY_DEFAULT      = 0;
  568      %EQU DISPLAY_DEFAULT_NO_ADV = 1;
  569      %EQU DISPLAY_SYSOUT       = 0;
  570      %EQU DISPLAY_SYSOUT_NO_ADV = 1;
  571      %EQU DISPLAY_CONSOLE       = 2;
  572
  573      /* code for ACCEPT */
  574      %EQU ACCEPT_DATE           = 0;
  575      %EQU ACCEPT_DAY            = 1;
  576      %EQU ACCEPT_TIME           = 2;
  577      %EQU ACCEPT_DAY_OF_WEEK    = 3;
  578      %EQU ACCEPT_SYSIN          = 4;
  579      %EQU ACCEPT_CONSOLE        = 5;
  580
  581      %EQU RUNTIME_ASCII = 21;
  582      %EQU RUNTIME_KANJI = 22 ;
  583      %EQU RUNTIME_POINTER = 13;
  584      %EQU RUNTIME_UNPACKED_NO_SIGN = 41;
  585      %EQU RUNTIME_PACKED_NO_SIGN = 40;
  586      %EQU RUNTIME_UNPACKED_LEAD_SIGN = 42;
  587      %EQU RUNTIME_PACKED_LEAD_SIGN = 9;
  588      %EQU RUNTIME_PACKED_LEAD_SIGN_EBC = 51;  /* COMP-3 */
  589      %EQU RUNTIME_UNPACKED_TRAIL_SIGN = 43;
  590      %EQU RUNTIME_PACKED_TRAIL_SIGN = 25;
  591      %EQU RUNTIME_PACKED_TRAIL_SIGN_EBC = 31;  /* COMP-3 */
  592      %EQU RUNTIME_UNPACKED_LEAD_OVER = 44;
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          17   
  593      %EQU RUNTIME_UNPACKED_TRAIL_OVER = 45;
  594      %EQU RUNTIME_UNPACKED_LEAD_FLOAT = 50;
  595      %EQU RUNTIME_PACKED_LEAD_FLOAT = 10;
  596      %EQU RUNTIME_BINARY_FIX_POINT1 = 1;
  597      %EQU RUNTIME_32_BIT_SIGNED_INTEGER = 30;
  598      %EQU RUNTIME_16_BIT_SIGNED_INTEGER = 29;
  599      %EQU RUNTIME_BINARY_FLOAT_SINGLE = 3;
  600      %EQU RUNTIME_BINARY_FLOAT_DOUBLE = 4;
  601
  602      /* New arg_descriptor codes for EBCDIC and GBCD */
  603
  604      %EQU RUNTIME_EBCDIC_ALPHANUMERIC =   23;
  605      %EQU RUNTIME_GBCD_ALPHANUMERIC =     24;
  606
  607      %EQU RUNTIME_EBCDIC_NO_SIGN =       53;
  608      %EQU RUNTIME_EBCDIC_LEAD_SIGN =     54;
  609      %EQU RUNTIME_EBCDIC_TRAIL_SIGN =    55;
  610      %EQU RUNTIME_EBCDIC_LEAD_OVER =     56;
  611      %EQU RUNTIME_EBCDIC_TRAIL_OVER =    57;
  612      %EQU RUNTIME_GBCD_NO_SIGN =         59;
  613      %EQU RUNTIME_GBCD_LEAD_SIGN =       60;
  614      %EQU RUNTIME_GBCD_TRAIL_SIGN =      61;
  615      %EQU RUNTIME_GBCD_LEAD_OVER =       62;
  616      %EQU RUNTIME_GBCD_TRAIL_OVER =      63;
  617
  618      /* Codes for GO items */
  619      %EQU GO_UNCONDITIONAL               = 0;
  620
  621      %EQU GO_LESS_THAN_ARITH             = 1;
  622      %EQU GO_LESS_THAN                   = 1;
  623      %EQU GO_LESS_THAN_ALPHA             = 2;
  624
  625      %EQU GO_GREATER_THAN_ARITH          = 3;
  626      %EQU GO_GREATER_THAN                = 3;
  627      %EQU GO_GREATER_THAN_ALPHA          = 4;
  628
  629      %EQU GO_LESS_THAN_OR_EQUAL_ARITH    = 5;
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          18   
  630      %EQU GO_LESS_THAN_OR_EQUAL          = 5;
  631      %EQU GO_LESS_THAN_OR_EQUAL_ALPHA    = 6;
  632
  633      %EQU GO_GREATER_THAN_OR_EQUAL_ARITH = 7;
  634      %EQU GO_GREATER_THAN_OR_EQUAL       = 7;
  635      %EQU GO_GREATER_THAN_OR_EQUAL_ALPHA = 8;
  636
  637      %EQU GO_EQUAL                       = 9;
  638      %EQU GO_NOT_EQUAL                   = 10;
  639      %EQU GO_CLASS                       = 11;
  640      %EQU GO_NOT_CLASS                   = 12;
  641      %EQU GO_OVERFLOW                    = 13;
  642      %EQU GO_FLAG_FALSE                  = 14;
  643      %EQU GO_MPI_OVERFLOW                = 15;
  644      %EQU GO_ALTERED                     = 16;
  645      %EQU GO_PFORM_BYCHK                 = 17;
  646      %EQU GO_FLT_OVERFLOW_OFF            = 19;
  647      %EQU GO_OVERFLOW_OFF                = 20;
  648      %EQU GO_SWITCH_ON                   = 21;
  649      %EQU GO_SWITCH_OFF                  = 22;
  650      %EQU GO_LESS_THAN_LOGICAL           = 23;
  651      %EQU GO_AND_SAVE_IC_IN_X1           = 24;
  652      %EQU GO_FLT_OVERFLOW                = 25;
  653      %EQU GO_CROSS_SEGMENT               = 26;
  654      %EQU GO_INVALID_LABEL               = 27; /* Internal in Phase 2 only */
  655
  656      /* ON SIZE CODES */
  657      %EQU NO_FLOAT_BINARY_DATA = 0;
  658      %EQU FLOAT_BINARY_DATA = 1;
  659
  660      /* EVALUATE_CODES */
  661      %EQU WHEN_CONDITION = 0;
  662      %EQU WHEN_OTHER = 1;
  663
  664      /* ENTRY CODES */
  665      %EQU MAIN_PROGRAM      = 0 ;
  666      %EQU SUBROUTINE        = 1 ;
09:11 AUG 09 '97 Z8A_ILL.:Z8A6SI/Z8A_ILL.:Z8A6TUI                          19   
  667      %EQU SUBROUTINE_ENTRY  = 2 ;
  668
  669      /* PROGRAM SCOPE CODES */
  670      %EQU PROGRAM_SCOPE      = 0;
  671      %EQU DECLARATIVES_SCOPE = 1;
  672      %EQU INIT_SCOPE         = 2;
  673
  674      /*  USE_ENTRY AND USE_END CODES */
  675      %EQU USE_PROC       = 0;
  676      %EQU DB_EXCEPT_PROC = 1;
  677      %EQU USE_CROSS_SEGMENT = 2;
  678      %EQU USE_LOCAL      = 3;
  679    * %EQU INIT_PROC      = 4;
  680      %EQU USE_GLOBAL     = 8; /* Added to above for GLOBAL USE proc */
  681
  682      /*  PFORM CODES */
  683      %EQU PFORM_DEFAULT  = 0;
  684      %EQU PFORM_OPTIMIZED = 1;
  685      %EQU PFORM_USE_PROC = 2;
  686
  687      /*  EXIT_PROG CODES */
  688      %EQU EXIT_PROG_DEFAULT = 0;
  689      %EQU EXIT_PROG_PHASE2_CREATED = 1;
  690    * %EQU EXIT_PROG_TP8 = 3;
  691
  692      %EJECT;


