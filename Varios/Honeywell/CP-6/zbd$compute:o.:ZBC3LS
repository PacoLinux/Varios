

CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             #ifndef NORCSID
        2         2             static char rcsid[] = "$Header: compute.c,v 0.8 87/03/10 01:00:33 ceriel Exp $
                               ";
        3         3             #endif
        4         4
        5         5             #include "assert:h"
        6         6             #include "param:h"
        7         7             #include "tables:h"
        8         8             #include "types:h"
        9         9             #include <cgg_cg:h>
       10        10             #include "data:h"
       11        11             #include "result:h"
       12        12             #include "glosym:h"
       13        13             #include "extern:h"
       14        14
       15        15             /*
       16        16              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
       17        17              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
       18        18              *
       19        19              * Author: Hans van Staveren
       20        20              */
       21        21
       22        22             #define LLEAF 01
       23        23             #define LDEF  02
       24        24             #define RLEAF 04
       25        25             #define RDEF  010
       26        26             #define LLDEF LLEAF|LDEF
       27        27             #define RLDEF RLEAF|RDEF
       28        28
       29        29             char opdesc[] = {
       30        30    1         0,                      /* EX_TOKFIELD */
       31        31    1         0,                      /* EX_ARG */
       32        32    1         0,                      /* EX_CON */
       33        33    1         0,                      /* EX_ALLREG */
       34        34    1         LLDEF|RLDEF,            /* EX_SAMESIGN */
       35        35    1         LLDEF|RLDEF,            /* EX_SFIT */
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       36        36    1         LLDEF|RLDEF,            /* EX_UFIT */
       37        37    1         0,                      /* EX_ROM */
       38        38    1         LLDEF|RLDEF,            /* EX_NCPEQ */
       39        39    1         LLDEF|RLDEF,            /* EX_SCPEQ */
       40        40    1         LLDEF|RLDEF,            /* EX_RCPEQ */
       41        41    1         LLDEF|RLDEF,            /* EX_NCPNE */
       42        42    1         LLDEF|RLDEF,            /* EX_SCPNE */
       43        43    1         LLDEF|RLDEF,            /* EX_RCPNE */
       44        44    1         LLDEF|RLDEF,            /* EX_NCPGT */
       45        45    1         LLDEF|RLDEF,            /* EX_NCPGE */
       46        46    1         LLDEF|RLDEF,            /* EX_NCPLT */
       47        47    1         LLDEF|RLDEF,            /* EX_NCPLE */
       48        48    1         LLDEF,                  /* EX_OR2 */
       49        49    1         LLDEF,                  /* EX_AND2 */
       50        50    1         LLDEF|RLDEF,            /* EX_PLUS */
       51        51    1         LLDEF|RLDEF,            /* EX_CAT */
       52        52    1         LLDEF|RLDEF,            /* EX_MINUS */
       53        53    1         LLDEF|RLDEF,            /* EX_TIMES */
       54        54    1         LLDEF|RLDEF,            /* EX_DIVIDE */
       55        55    1         LLDEF|RLDEF,            /* EX_MOD */
       56        56    1         LLDEF|RLDEF,            /* EX_LSHIFT */
       57        57    1         LLDEF|RLDEF,            /* EX_RSHIFT */
       58        58    1         LLDEF,                  /* EX_NOT */
       59        59    1         LLDEF,                  /* EX_COMP */
       60        60    1         0,                      /* EX_COST */
       61        61    1         0,                      /* EX_STRING */
       62        62    1         LLEAF,                  /* EX_DEFINED */
       63        63    1         0,                      /* EX_SUBREG */
       64        64    1         LLDEF,                  /* EX_TOSTRING */
       65        65    1         LLDEF,                  /* EX_UMINUS */
       66        66    1         0,                      /* EX_REG */
       67        67    1         0,       /* EX_LOWW */
       68        68    1         0,       /* EX_HIGHW */
       69        69    1         LLDEF,         /* EX_INREG */
       70        70    1         LLDEF,         /* EX_REGVAR */
       71        71    1         LLDEF|RLDEF,      /* EX_OR */
       72        72    1         LLDEF|RLDEF,      /* EX_XOR */
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       73        73    1         LLDEF|RLDEF,      /* EX_AND      */
       74        74    1         LLDEF,            /* EX_GNM      */
       75        75    1         LLDEF,            /* EX_GNMOFFS  */
       76        76    1         LLDEF,            /* EX_GETTEMP  */
       77        77    1         LLDEF|RLDEF,      /* EX_ADDRTEMP */
       78        78    1         LLDEF,            /* EX_GETADDR  */
       79        79    1        };
       80        80
       81        81             int zb_auto_info[10] = {0, 0, 0, 0,    0, 0, 0, 0,    0, 0};
       82        82
       83        83             /*B*    NAME:       zb_auto_info
       84        84                     PURPOSE:    To maintain information concerning the current
       85        85                                 function's auto frame.
       86        86                     DESCRIPTION:
       87        87                           This variable contains entries for the following
       88        88                        items of auto frame information:
       89        89
       90        90                        [0]   argument checking on/off
       91        91                        [1]   calling sequence type
       92        92                        [2]   0=static function; 1=global function
       93        93                        [3]   number of bytes of parameters
       94        94                        [4]   number of bytes of parameters and locals
       95        95                        [5]   current temp offset
       96        96                        [6]   temp highwater
       97        97                        [7]   index into zb_temp_info array for current temp
       98        98                        [8]   0=update temp info; else just looking for codep
       99        99                        [9]   *unused*
      100       100             */
      101       101             #define MAX_AUTO_TEMPS    2048
      102       102
      103       103
      104       104             long zb_temp_info[ MAX_AUTO_TEMPS ];
      105       105
      106       106             /*B*    NAME:       zb_temp_info
      107       107                     PURPOSE:    To contain information about all of the
      108       108                                 currently allocated temps
      109       109                     DESCRIPTION:
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      110       110                           When a temp is allocated, its size (in words) and
      111       111                           location in the auto frame is put in this array.
      112       112                           If a temp of more than 7 bytes is allocated, it is
      113       113                           created on a double word boundry.
      114       114
      115       115             */
      116       116
      117       117             #ifdef TM_L66
      118       118             #define HW_BITS 18
      119       119             #define HW_MASK 0777777
      120       120             #else
      121       121   *S*       #define HW_BITS 16
      122       122   *S*       #define HW_MASK 0xFFFF
      123       123   *S*       #endif
      124       124
      125       125             char ext_string[256];  /*  to hold result of strnum: external name */
      126       126
      127       127
      128       128             string salloc(),strcpy(),strcat();
      129       129
      130       130             string mycat(s1,s2) register string s1,s2; {
      131       131    1         register string s;
      132       132    1
      133       133    1         if (s1==0 || *s1=='\0') return(s2);
      134       134    1         if (s2==0 || *s2=='\0') return(s1);
      135       135    1         s=salloc(strlen(s1)+strlen(s2)+1);
      136       136    1         strcpy(s,s1);
      137       137    1         strcat(s,"+");
      138       138    1         strcat(s,s2);
      139       139    1         return(s);
      140       140    1        }
      141       141
      142       142             string mystrcpy(s) register string s; {
      143       143    1         register string r;
      144       144    1
      145       145    1         r=salloc(strlen(s));
      146       146    1         strcpy(r,s);
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      147       147    1         return(r);
      148       148    1        }
      149       149
      150       150             char digstr[21][15];
      151       151
      152       152             string tostring(n) register word n; {
      153       153    1         char buf[25];
      154       154    1
      155       155    1         if (n>=-20 && n<=20 && (n&1)==0) {
      156       156    2            if (digstr[(n>>1)+10][0]==0)
      157       157    2               sprintf(digstr[(n>>1)+10],WRD_FMT,n);
      158       158    2            return(digstr[(n>>1)+10]);
      159       159    2         }
      160       160    1         sprintf(buf,WRD_FMT,n);
      161       161    1         return(mystrcpy(buf));
      162       162    1        }
      163       163
      164       164             result_t undefres= {EV_UNDEF};
      165       165
      166       166             result_t compute(node) register node_p node; {
      167       167    1         result_t leaf1,leaf2,result;
      168       168    1         register token_p tp;
      169       169    1         int desc;
      170       170    1         long mask,tmp;
      171       171    1         int i,tmpreg;
      172       172    1         glosym_p gp;
      173       173    1
      174       174    1         desc=opdesc[node->ex_operator];
      175       175    1         if (desc&LLEAF) {
      176       176    2            leaf1 = compute(&enodes[node->ex_lnode]);
      177       177    2            if (desc&LDEF && leaf1.e_typ==EV_UNDEF)
      178       178    2               return(undefres);
      179       179    2         }
      180       180    1         if (desc&RLEAF) {
      181       181    2            leaf2 = compute(&enodes[node->ex_rnode]);
      182       182    2            if (desc&RDEF && leaf2.e_typ==EV_UNDEF)
      183       183    2               return(undefres);
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      184       184    2         }
      185       185    1         result.e_typ=EV_INT;
      186       186    1         switch(node->ex_operator) {
      187       187    2         default:        assert(FALSE);
      188       188    2         case EX_TOKFIELD:
      189       189    2            if (node->ex_lnode==0)
      190       190    2               if (curtoken) tp = curtoken;
      191       191    2               else tp = &fakestack[stackheight-1];
      192       192    2            else  tp = &fakestack[stackheight-node->ex_lnode];
      193       193    2            switch(result.e_typ = tokens[tp->t_token].t_type[node->ex_rnode-1]) {
      194       194    3            default:
      195       195    3               assert(FALSE);
      196       196    3            case EV_INT:
      197       197    3               result.e_v.e_con = tp->t_att[node->ex_rnode-1].aw;
      198       198    3               break;
      199       199    3            case EV_ADDR:
      200       200    3               result.e_v.e_addr = tp->t_att[node->ex_rnode-1].aa;
      201       201    3               break;
      202       202    3            case EV_REG:
      203       203    3               result.e_v.e_reg = tp->t_att[node->ex_rnode-1].ar;
      204       204    3               break;
      205       205    3            }
      206       206    2            return(result);
      207       207    2         case EX_ARG:
      208       208    2            return(dollar[node->ex_lnode-1]);
      209       209    2         case EX_CON:
      210       210    2            result.e_typ = EV_INT;
      211       211    2            result.e_v.e_con = ((long) node->ex_rnode << 16) | ((long)node->ex_lnode&0
                               xffff);
      212       212    2            return(result);
      213       213    2         case EX_REG:
      214       214    2            result.e_typ = EV_REG;
      215       215    2            result.e_v.e_reg = node->ex_lnode;
      216       216    2            return(result);
      217       217    2         case EX_ALLREG:
      218       218    2            result.e_typ = EV_REG;
      219       219    2            result.e_v.e_reg = allreg[node->ex_lnode-1];
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      220       220    2        #if MAXMEMBERS!=0
      221       221    2            if (node->ex_rnode!=0)
      222       222    2               result.e_v.e_reg = machregs[result.e_v.e_reg].
      223       223    2                  r_members[node->ex_rnode-1];
      224       224    2        #endif
      225       225    2            return(result);
      226       226    2         case EX_SAMESIGN:
      227       227    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      228       228    2            result.e_typ = EV_INT;
      229       229    2            if (leaf1.e_v.e_con>=0)
      230       230    2               result.e_v.e_con= leaf2.e_v.e_con>=0;
      231       231    2            else
      232       232    2               result.e_v.e_con= leaf2.e_v.e_con<0;
      233       233    2            return(result);
      234       234    2         case EX_SFIT:
      235       235    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      236       236    2            mask = (-1) << (leaf2.e_v.e_con - 1);
      237       237    2            tmp = leaf1.e_v.e_con&mask;
      238       238    2            result.e_v.e_con = tmp==0||tmp==mask;
      239       239    2            return(result);
      240       240    2         case EX_UFIT:
      241       241    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      242       242    2            mask = (-1) << (leaf2.e_v.e_con);
      243       243    2            result.e_v.e_con = (leaf1.e_v.e_con&mask)==0;
      244       244    2            return(result);
      245       245    2         case EX_ROM:
      246       246    2            assert(node->ex_rnode>=0 &&node->ex_rnode<MAXROM);
      247       247    2            leaf2=dollar[node->ex_lnode];
      248       248    2            if (leaf2.e_typ != EV_ADDR)
      249       249    2               return(undefres);
      250       250    2            if (leaf2.e_v.e_addr.ea_off!=0)
      251       251    2               return(undefres);
      252       252    2            gp = lookglo(leaf2.e_v.e_addr.ea_str);
      253       253    2            if (gp == (glosym_p) 0)
      254       254    2               return(undefres);
      255       255    2            if ((gp->gl_rom[MAXROM]&(1<<node->ex_rnode))==0)
      256       256    2               return(undefres);
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      257       257    2            result.e_v.e_con = gp->gl_rom[node->ex_rnode];
      258       258    2            return(result);
      259       259    2         case EX_LOWW:
      260       260    2            result.e_v.e_con = saveemp[node->ex_lnode].em_u.em_loper&HW_MASK;
      261       261    2            return(result);
      262       262    2         case EX_HIGHW:
      263       263    2            result.e_v.e_con = saveemp[node->ex_lnode].em_u.em_loper>>HW_BITS;
      264       264    2            return(result);
      265       265    2         case EX_NCPEQ:
      266       266    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      267       267    2            result.e_v.e_con = leaf1.e_v.e_con==leaf2.e_v.e_con;
      268       268    2            return(result);
      269       269    2         case EX_SCPEQ:
      270       270    2         assert(leaf1.e_typ == EV_ADDR && leaf2.e_typ == EV_ADDR);
      271       271    2            result.e_v.e_con =
      272       272    2                (strcmp(leaf1.e_v.e_addr.ea_str,leaf2.e_v.e_addr.ea_str)==0 &&
      273       273    2                leaf1.e_v.e_addr.ea_off==leaf2.e_v.e_addr.ea_off);
      274       274    2            return(result);
      275       275    2         case EX_RCPEQ:
      276       276    2         assert(leaf1.e_typ == EV_REG && leaf2.e_typ == EV_REG);
      277       277    2            result.e_v.e_con = leaf1.e_v.e_reg==leaf2.e_v.e_reg;
      278       278    2            return(result);
      279       279    2         case EX_NCPNE:
      280       280    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      281       281    2            result.e_v.e_con = leaf1.e_v.e_con!=leaf2.e_v.e_con;
      282       282    2            return(result);
      283       283    2         case EX_SCPNE:
      284       284    2         assert(leaf1.e_typ == EV_ADDR && leaf2.e_typ == EV_ADDR);
      285       285    2            result.e_v.e_con =
      286       286    2                !(strcmp(leaf1.e_v.e_addr.ea_str,leaf2.e_v.e_addr.ea_str)==0 &&
      287       287    2                leaf1.e_v.e_addr.ea_off==leaf2.e_v.e_addr.ea_off);
      288       288    2            return(result);
      289       289    2         case EX_RCPNE:
      290       290    2         assert(leaf1.e_typ == EV_REG && leaf2.e_typ == EV_REG);
      291       291    2            result.e_v.e_con = leaf1.e_v.e_reg!=leaf2.e_v.e_reg;
      292       292    2            return(result);
      293       293    2         case EX_NCPGT:
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      294       294    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      295       295    2            result.e_v.e_con = leaf1.e_v.e_con>leaf2.e_v.e_con;
      296       296    2            return(result);
      297       297    2         case EX_NCPGE:
      298       298    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      299       299    2            result.e_v.e_con = leaf1.e_v.e_con>=leaf2.e_v.e_con;
      300       300    2            return(result);
      301       301    2         case EX_NCPLT:
      302       302    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      303       303    2            result.e_v.e_con = leaf1.e_v.e_con<leaf2.e_v.e_con;
      304       304    2            return(result);
      305       305    2         case EX_NCPLE:
      306       306    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      307       307    2            result.e_v.e_con = leaf1.e_v.e_con<=leaf2.e_v.e_con;
      308       308    2            return(result);
      309       309    2         case EX_OR2:
      310       310    2         assert(leaf1.e_typ == EV_INT);
      311       311    2            if (leaf1.e_v.e_con==0)
      312       312    2               return(compute(&enodes[node->ex_rnode]));
      313       313    2            return(leaf1);
      314       314    2         case EX_AND2:
      315       315    2         assert(leaf1.e_typ == EV_INT);
      316       316    2            if (leaf1.e_v.e_con!=0)
      317       317    2               return(compute(&enodes[node->ex_rnode]));
      318       318    2            return(leaf1);
      319       319    2         case EX_PLUS:
      320       320    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      321       321    2            result.e_v.e_con=leaf1.e_v.e_con+leaf2.e_v.e_con;
      322       322    2            return(result);
      323       323    2         case EX_CAT:
      324       324    2         assert(leaf1.e_typ == EV_ADDR && leaf2.e_typ == EV_ADDR);
      325       325    2            result.e_typ = EV_ADDR;
      326       326    2            result.e_v.e_addr.ea_str = mycat(leaf1.e_v.e_addr.ea_str,leaf2.e_v.e_addr.
                               ea_str);
      327       327    2            result.e_v.e_addr.ea_off = leaf1.e_v.e_addr.ea_off+leaf2.e_v.e_addr.ea_off
                               ;
      328       328    2            return(result);
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      329       329    2         case EX_GNMOFFS:
      330       330    2         assert(leaf1.e_typ == EV_ADDR);
      331       331    2            result.e_v.e_con = leaf1.e_v.e_addr.ea_off + strnum(leaf1.e_v.e_addr.ea_st
                               r);
      332       332    2            return(result);
      333       333    2         case EX_GNM:
      334       334    2         assert(leaf1.e_typ == EV_ADDR);
      335       335    2            result.e_typ = EV_ADDR;
      336       336    2            strnum(leaf1.e_v.e_addr.ea_str); /* fill in ext_string */
      337       337    2            result.e_v.e_addr.ea_str = mystrcpy(ext_string);
      338       338    2            result.e_v.e_addr.ea_off = 0;
      339       339    2            return(result);
      340       340    2         case EX_MINUS:
      341       341    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      342       342    2            result.e_v.e_con = leaf1.e_v.e_con - leaf2.e_v.e_con;
      343       343    2            return(result);
      344       344    2         case EX_OR:
      345       345    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      346       346    2            result.e_v.e_con = leaf1.e_v.e_con | leaf2.e_v.e_con;
      347       347    2            return(result);
      348       348    2         case EX_XOR:
      349       349    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      350       350    2            result.e_v.e_con = leaf1.e_v.e_con ^ leaf2.e_v.e_con;
      351       351    2            return(result);
      352       352    2         case EX_AND:
      353       353    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      354       354    2            result.e_v.e_con = leaf1.e_v.e_con & leaf2.e_v.e_con;
      355       355    2            return(result);
      356       356    2         case EX_TIMES:
      357       357    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      358       358    2            result.e_v.e_con = leaf1.e_v.e_con * leaf2.e_v.e_con;
      359       359    2            return(result);
      360       360    2         case EX_DIVIDE:
      361       361    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      362       362    2            result.e_v.e_con = leaf1.e_v.e_con / leaf2.e_v.e_con;
      363       363    2            return(result);
      364       364    2         case EX_MOD:
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      365       365    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      366       366    2            result.e_v.e_con = leaf1.e_v.e_con % leaf2.e_v.e_con;
      367       367    2            return(result);
      368       368    2         case EX_LSHIFT:
      369       369    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      370       370    2            result.e_v.e_con = leaf1.e_v.e_con << leaf2.e_v.e_con;
      371       371    2            return(result);
      372       372    2         case EX_RSHIFT:
      373       373    2         assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      374       374    2            result.e_v.e_con = leaf1.e_v.e_con >> leaf2.e_v.e_con;
      375       375    2            return(result);
      376       376    2         case EX_NOT:
      377       377    2         assert(leaf1.e_typ == EV_INT);
      378       378    2            result.e_v.e_con = !leaf1.e_v.e_con;
      379       379    2            return(result);
      380       380    2         case EX_COMP:
      381       381    2         assert(leaf1.e_typ == EV_INT);
      382       382    2            result.e_v.e_con = ~leaf1.e_v.e_con;
      383       383    2            return(result);
      384       384    2         case EX_STRING:
      385       385    2            result.e_typ = EV_ADDR;
      386       386    2            result.e_v.e_addr.ea_str = codestrings[node->ex_lnode];
      387       387    2            result.e_v.e_addr.ea_off = 0;
      388       388    2            return(result);
      389       389    2         case EX_DEFINED:
      390       390    2            result.e_v.e_con=leaf1.e_typ!=EV_UNDEF;
      391       391    2            return(result);
      392       392    2         case EX_SUBREG:
      393       393    2            result.e_typ = EV_REG;
      394       394    2            if (node->ex_lnode==0)
      395       395    2               if (curtoken) tp = curtoken;
      396       396    2               else tp = &fakestack[stackheight-1];
      397       397    2            else  tp = &fakestack[stackheight-node->ex_lnode];
      398       398    2            assert(tp->t_token == -1);
      399       399    2            tmpreg= tp->t_att[0].ar;
      400       400    2        #if MAXMEMBERS!=0
      401       401    2            if (node->ex_rnode)
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
      402       402    2               tmpreg=machregs[tmpreg].r_members[node->ex_rnode-1];
      403       403    2        #endif
      404       404    2            result.e_v.e_reg=tmpreg;
      405       405    2            return(result);
      406       406    2         case EX_TOSTRING:
      407       407    2         assert(leaf1.e_typ == EV_INT);
      408       408    2            result.e_typ = EV_ADDR;
      409       409    2            result.e_v.e_addr.ea_str = "";
      410       410    2            result.e_v.e_addr.ea_off = leaf1.e_v.e_con;
      411       411    2            return(result);
      412       412    2        #ifdef REGVARS
      413       413    2         case EX_INREG:
      414       414    2         assert(leaf1.e_typ == EV_INT);
      415       415    2            result.e_v.e_con = isregtyp((long) leaf1.e_v.e_con);
      416       416    2            return(result);
      417       417    2         case EX_REGVAR:
      418       418    2         assert(leaf1.e_typ == EV_INT);
      419       419    2            i = isregvar((long) leaf1.e_v.e_con);
      420       420    2            if (i<=0)
      421       421    2               return(undefres);
      422       422    2            result.e_typ = EV_REG;
      423       423    2            result.e_v.e_reg=i;
      424       424    2            return(result);
      425       425    2        #endif
      426       426    2         case EX_UMINUS:
      427       427    2         assert(leaf1.e_typ == EV_INT);
      428       428    2            result.e_v.e_con = -leaf1.e_v.e_con;
      429       429    2            return(result);
      430       430    2         case EX_GETTEMP:
      431       431    2            assert(leaf1.e_typ == EV_INT);
      432       432    2            result.e_v.e_con = make_a_temp(leaf1.e_v.e_con);
      433       433    2            return(result);
      434       434    2         case EX_ADDRTEMP:
      435       435    2            assert(leaf1.e_typ == EV_INT && leaf2.e_typ == EV_INT);
      436       436    2            result.e_v.e_con = get_temp_addr(leaf1.e_v.e_con,leaf2.e_v.e_con);
      437       437    2            return(result);
      438       438    2         case EX_GETADDR:
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=13 
      439       439    2            assert(leaf1.e_typ == EV_INT);
      440       440    2            if (leaf1.e_v.e_con < 0)
      441       441    2                 result.e_v.e_con = (zb_auto_info[4]+leaf1.e_v.e_con)/4;
      442       442    2            else result.e_v.e_con = leaf1.e_v.e_con/4;
      443       443    2            return(result);
      444       444    2         }
      445       445    1        }
      446       446
      447       447             #define strdig(cc) ((c = cc)>='0' && (c)<='9')? (c)-'0' : -1
      448       448
      449       449             int strnum(s) char *s; {
      450       450    1          int i, val=0, accum=0, sign=1, is = 0;
      451       451    1          char *s_str = "- +";
      452       452    1          char *ss = ext_string, c;
      453       453    1
      454       454    1          while (*s)  {
      455       455    2             accum = 0;
      456       456    2             i = strdig(*s);
      457       457    2             if (i >= 0) {
      458       458    3                do {
      459       459    4                   accum = accum * 10 +i;
      460       460    4                   } while ( (i=strdig(*(++s))) >= 0 );
      461       461    3                val += sign * accum;
      462       462    3                }
      463       463    2             else {
      464       464    3                sign = (c != '-') ? 1 : -1;
      465       465    3                if (!is) s--;
      466       466    3                if (c)  i = strdig( *++s );
      467       467    3                if (c && c != '+' && c != '-' && i < 0)   {
      468       468    4                   if (is++) *ss++ = s_str[1+sign];
      469       469    4                   while( c && c != '+'  &&  c != '-') *ss++ = c, c = *++s;
      470       470    4                   sign = (c != '-') ? 1 : -1;
      471       471    4                   }
      472       472    3                else if (c && i < 0) s++, sign = (c != '-') ? 1 : -1;
      473       473    3                }
      474       474    2             }
      475       475    1          *ss = 0;
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=14 
      476       476    1          return val;
      477       477    1        }
      478       478
      479       479             /*I*    NAME:       make_a_temp
      480       480                     PURPOSE:    To allocate a temporary.
      481       481                     DESCRIPTION:
      482       482                           Temporaries are always allocated on word (4-byte)
      483       483                        boundries.  The argument is the number of bytes to
      484       484                        allocate for the temporary.  All temporaries over 7
      485       485                        bytes in length are allocated on double words.
      486       486
      487       487             */
      488       488             #define MAX(a,b) ((a)>(b)) ? (a) : (b)
      489       489             int
      490       490             make_a_temp(bytes)
      491       491               int bytes;
      492       492             {
      493       493    1          int loc  = zb_auto_info[5];
      494       494    1          int base = zb_auto_info[5];
      495       495    1          int size = (bytes + 3) & (-4);
      496       496    1          int temp;
      497       497    1
      498       498    1          if (bytes > 4) loc = (loc + 7)&(-8);
      499       499    1          if (!zb_auto_info[8])   {
      500       500    2             temp = ++zb_auto_info[7];
      501       501    2             zb_auto_info[5]  = loc + size;
      502       502    2             zb_auto_info[6]  = MAX(zb_auto_info[5],zb_auto_info[6]);
      503       503    2             zb_temp_info[temp] = (loc << HW_BITS) + base;
      504       504    2          }
      505       505    1          return (loc/4);
      506       506    1        }
      507       507
      508       508             /*I*    NAME:       get_temp_addr
      509       509                     PURPOSE:    To return a temp address and optionally remove
      510       510                                 "n" temporaries.
      511       511                     DESCRIPTION:
      512       512
CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=15 
      513       513                        The first argument is the temporary number to return.
      514       514                        The number is 0 for the most recent, 1 for the next most
      515       515                        recent, ...
      516       516
      517       517                        The second argument is the number of temporaries to remove
      518       518                        from the stack.
      519       519
      520       520             */
      521       521             int
      522       522             get_temp_addr(tempno, tempgo)
      523       523               int tempno, tempgo;
      524       524             {
      525       525    1          int   temp = zb_auto_info[7];
      526       526    1          int   ntmp;
      527       527    1
      528       528    1          ntmp = zb_auto_info[7] - tempgo;
      529       529    1          if (!zb_auto_info[8])   {
      530       530    2             assert( temp >= tempgo  &&  temp >= tempno );
      531       531    2             zb_auto_info[7] = ntmp;
      532       532    2             if (tempgo>0)
      533       533    2                zb_auto_info[5] = zb_temp_info[ntmp+1] & HW_MASK;
      534       534    2          }
      535       535    1          return (((zb_temp_info[temp - tempno]) >> HW_BITS) & HW_MASK)/4;
      536       536    1        }
---  Include file information  ---

   zbg$assert:h.:ZBC3TOU. is referenced
   zbg$param:h.:ZBC3TOU. is referenced
   tables:h.:ZBC3TOU. is referenced
   zbg$types:h.:ZBC3TOU. is referenced
   cgg_cg:h.:ZBC3TOU. is referenced
   zbg$data:h.:ZBC3TOU. is referenced
   zbg$result:h.:ZBC3TOU. is referenced
   zbg$glosym:h.:ZBC3TOU. is referenced
   zbg$extern:h.:ZBC3TOU. is referenced

CC.C03    File=zbg$compute:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=16 
No diagnostics were issued in the file zbg$compute:c.:ZBC3TSI
