

CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ic_lookup.c,v 1.5 87/03/25 16:24:41 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  I N T E R M E D I A T E   C O D E
        7         7              *
        8         8              *  I C _ L O O K U P . C
        9         9              */
       10        10
       11        11
       12        12             #include <stdio:h>
       13        13             #include "types:h"
       14        14             #include "debug:h"
       15        15             #include "map:h"
       16        16             #include "em_spec:h"
       17        17             #include "ic:h"
       18        18             #include "ic_lookup:h"
       19        19             #include "alloc:h"
       20        20
       21        21
       22        22             sym_p symhash[NSYMHASH];
       23        23             prc_p prochash[NPROCHASH];
       24        24             num_p numhash[NNUMHASH];
       25        25
       26        26
       27        27
       28        28             #define newsym()   (sym_p) newstruct(sym)
       29        29             #define newprc()   (prc_p) newstruct(prc)
       30        30             #define newnum()   (num_p) newstruct(num)
       31        31
       32        32             #define oldsym(x)  oldstruct(sym,x)
       33        33             #define oldprc(x)  oldstruct(prc,x)
       34        34             #define oldnum(x)  oldstruct(num,x)
       35        35
       36        36
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=2  
       37        37             /* instr_lab */
       38        38
       39        39
       40        40
       41        41
       42        42
       43        43             lab_id instr_lab(number)
       44        44              short number;
       45        45             {
       46        46    1         register num_p *npp, np;
       47        47    1
       48        48    1         /* In EM assembly language, a label is an unsigned number,
       49        49    1          * e.g. 120 in 'BRA *120'. In IC the labels of a procedure
       50        50    1          * are represented by consecutive integer numbers, called
       51        51    1          * lab_id. The mapping takes place here.
       52        52    1          */
       53        53    1
       54        54    1
       55        55    1         npp = &numhash[number%NNUMHASH];
       56        56    1         while (*npp != (num_p) 0) {
       57        57    2            if ((*npp)->n_number == number) {
       58        58    3               return(*npp)->n_labid;
       59        59    3            } else {
       60        60    3               npp = &(*npp)->n_next;
       61        61    3            }
       62        62    2         }
       63        63    1
       64        64    1         /* The label was not found in the hashtable, so
       65        65    1          * create a new entry for it.
       66        66    1          */
       67        67    1
       68        68    1         *npp = np = newnum();
       69        69    1         np->n_number = number;
       70        70    1         np->n_labid = ++lastlid;
       71        71    1         np->n_next = (num_p) 0 ;
       72        72    1         /* Assign a new label identifier to the num struct.
       73        73    1          * lastlid is reset to 0 at the beginning of
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=3  
       74        74    1          * every new EM procedure (by cleaninstrlabs).
       75        75    1          */
       76        76    1         return (np->n_labid);
       77        77    1        }
       78        78
       79        79
       80        80
       81        81             /*  symlookup */
       82        82
       83        83             STATIC unsigned hash(string) char *string; {
       84        84    1         register char *p;
       85        85    1         register unsigned i,sum;
       86        86    1
       87        87    1         for (sum=i=0,p=string;*p;i += 3)
       88        88    1            sum ^= (*p++)<<(i&07);
       89        89    1         return(sum);
       90        90    1        }
       91        91
       92        92             dblock_p symlookup(name, status)
       93        93              char *name;
       94        94              int  status;
       95        95             {
       96        96    1         /* Look up the name of a data block. The name can appear
       97        97    1          * in either a defining or applied occurrence (status is
       98        98    1          * DEFINING, OCCURRING resp.), or in a MES ms_ext instruction
       99        99    1          * as the name of a data block imported by a library module
      100       100    1          * (status is IMPORTING). Things get complicated,
      101       101    1          * because a HOL pseudo need not be preceded by a
      102       102    1          * data label, i.e. a hol block need not have a name.
      103       103    1          */
      104       104    1
      105       105    1
      106       106    1         register sym_p *spp,  sp;
      107       107    1         register dblock_p dp;
      108       108    1
      109       109    1         if (name == (char *) 0) {
      110       110    2            assert(status == DEFINING);
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=4  
      111       111    2            dp = newdblock();
      112       112    2         } else {
      113       113    2            spp = &symhash[hash(name)%NSYMHASH];
      114       114    2            while (*spp != (sym_p) 0) {
      115       115    3               /* Every hashtable entry points to a list
      116       116    3                * of synonyms (i.e. names with the same
      117       117    3                * hash values). Try to find 'name' in its
      118       118    3                * list.
      119       119    3                */
      120       120    3               if (strcmp((*spp)->sy_name, name) == 0) {
      121       121    4                  /* found */
      122       122    4                  return ((*spp)->sy_dblock);
      123       123    4               } else {
      124       124    4                  spp = &(*spp)->sy_next;
      125       125    4               }
      126       126    3            }
      127       127    2            /* The name is not found, so create a new entry for it.
      128       128    2             * However, if the status is IMPORTING, we just return 0,
      129       129    2             * indicating that we don't need this name.
      130       130    2             */
      131       131    2            if (status == IMPORTING) return (dblock_p) 0;
      132       132    2            *spp = sp = newsym();
      133       133    2            sp->sy_name = (char *) newcore(strlen(name)+1);
      134       134    2         sp->sy_next = (sym_p) 0 ;
      135       135    2            strcpy(sp->sy_name, name);
      136       136    2            dp = sp->sy_dblock = newdblock();
      137       137    2         }
      138       138    1         if (fdblock == (dblock_p) 0) {
      139       139    2            fdblock = dp;
      140       140    2            /* first data block */
      141       141    2         } else {
      142       142    2            ldblock->d_next = dp; /* link to last dblock */
      143       143    2         }
      144       144    1         ldblock = dp;
      145       145    1         dp->d_pseudo   = DUNKNOWN; /* clear all fields */
      146       146    1         dp->d_id = ++lastdid;
      147       147    1         dp->d_size  = 0;
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=5  
      148       148    1         dp->d_objlist  = (obj_p) 0;
      149       149    1         dp->d_values   = (arg_p) 0;
      150       150    1         dp->d_next  = (dblock_p) 0;
      151       151    1         dp->d_flags1   = 0;
      152       152    1         dp->d_flags2   = 0;
      153       153    1         if (status == OCCURRING) {
      154       154    2            /* This is the first occurrence of the identifier,
      155       155    2             * so if it is a used occurrence make the
      156       156    2             * identifier externally visible, else make it
      157       157    2             * internal.
      158       158    2             */
      159       159    2            dp->d_flags1 |= DF_EXTERNAL;
      160       160    2         }
      161       161    1         return dp;
      162       162    1        }
      163       163
      164       164
      165       165
      166       166             /* getsym */
      167       167
      168       168             dblock_p getsym(status)
      169       169              int status;
      170       170             {
      171       171    1         if (table2() != DLBX) {
      172       172    2            error("symbol expected");
      173       173    2         }
      174       174    1         return(symlookup(string,status));
      175       175    1        }
      176       176
      177       177
      178       178
      179       179             /* getproc */
      180       180
      181       181             proc_p getproc(status)
      182       182              int status;
      183       183             {
      184       184    1         if (table2() != sp_pnam) {
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=6  
      185       185    2            error("proc name expected");
      186       186    2         }
      187       187    1         return(proclookup(string,status));
      188       188    1        }
      189       189
      190       190
      191       191
      192       192             /* proclookup */
      193       193
      194       194             proc_p proclookup(name, status)
      195       195              char *name;
      196       196              int  status;
      197       197             {
      198       198    1         register prc_p *ppp,  pp;
      199       199    1         register proc_p dp;
      200       200    1
      201       201    1         ppp = &prochash[hash(name)%NPROCHASH];
      202       202    1         while (*ppp != (prc_p) 0) {
      203       203    2            /* Every hashtable entry points to a list
      204       204    2             * of synonyms (i.e. names with the same
      205       205    2             * hash values). Try to find 'name' in its
      206       206    2             * list.
      207       207    2             */
      208       208    2            if (strcmp((*ppp)->pr_name, name) == 0) {
      209       209    3               /* found */
      210       210    3               return ((*ppp)->pr_proc);
      211       211    3            } else {
      212       212    3               ppp = &(*ppp)->pr_next;
      213       213    3            }
      214       214    2         }
      215       215    1         /* The name is not found, so create a new entry for it,
      216       216    1          * unless the status is IMPORTING, in which case we
      217       217    1          * return 0, indicating we don't want this proc.
      218       218    1          */
      219       219    1         if (status == IMPORTING) return (proc_p) 0;
      220       220    1         *ppp = pp = newprc();
      221       221    1         pp->pr_name = (char *) newcore(strlen(name)+1);
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=7  
      222       222    1         pp->pr_next = (prc_p) 0 ;
      223       223    1         strcpy(pp->pr_name, name);
      224       224    1         dp = pp->pr_proc = newproc();
      225       225    1         if (fproc == (proc_p) 0) {
      226       226    2            fproc = dp;  /* first proc */
      227       227    2         } else {
      228       228    2            lproc->p_next = dp;
      229       229    2         }
      230       230    1         lproc = dp;
      231       231    1         dp->p_id = ++lastpid;   /* create a unique proc_id */
      232       232    1         dp->p_next  = (proc_p) 0;
      233       233    1         dp->p_mes16 = (line_p) 0;  /* null out mes16 pntr. */
      234       234    1         dp->p_flags1   = 0;
      235       235    1         dp->p_flags2   = 0;
      236       236    1         if (status == OCCURRING) {
      237       237    2            /* This is the first occurrence of the identifier,
      238       238    2             * so if it is a used occurrence the make the
      239       239    2             * identifier externally visible, else make it
      240       240    2             * internal.
      241       241    2             */
      242       242    2            dp->p_flags1 |= PF_EXTERNAL;
      243       243    2         }
      244       244    1         return dp;
      245       245    1        }
      246       246
      247       247
      248       248
      249       249             /* cleaninstrlabs */
      250       250
      251       251             cleaninstrlabs()
      252       252             {
      253       253    1         register num_p *npp, np, next;
      254       254    1
      255       255    1         for (npp = numhash; npp < &numhash[NNUMHASH]; npp++) {
      256       256    2            for  (np = *npp; np != (num_p) 0; np = next) {
      257       257    3               next = np->n_next;
      258       258    3               oldnum(np);
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=8  
      259       259    3            }
      260       260    2            *npp = (num_p) 0;
      261       261    2         }
      262       262    1         /* Reset last label id (used by instr_lab). */
      263       263    1         lastlid = (lab_id) 0;
      264       264    1        }
      265       265
      266       266
      267       267
      268       268             /* dump_procnames */
      269       269
      270       270             dump_procnames(hash,n,f)
      271       271              prc_p  hash[];
      272       272              int    n;
      273       273              FILE   *f;
      274       274             {
      275       275    1         /* Save the names of the EM procedures in file f.
      276       276    1          * Note that the Optimizer Intermediate Code does not
      277       277    1          * use identifiers but proc_ids, object_ids etc.
      278       278    1          * The names, however, can be used after optimization
      279       279    1          * is completed, to reconstruct Compact Assembly Language.
      280       280    1          * The output consists of tuples (proc_id, name).
      281       281    1          * This routine is called once for every input file.
      282       282    1          * To prevent names of external procedures being written
      283       283    1          * more than once, the PF_WRITTEN flag is used.
      284       284    1          */
      285       285    1
      286       286    1         register prc_p *pp, ph;
      287       287    1         proc_p p;
      288       288    1         register int i;
"zbe$ic_lookup:c.:ZBC3TSI", line 288: (warning) identifier "i" is not used
      289       289    1
      290       290    1        #define PF_WRITTEN 01
      291       291    1
      292       292    1
      293       293    1         for (pp = &hash[0]; pp < &hash[n]; pp++) {
      294       294    2            /* Traverse the entire hash table */
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=9  
      295       295    2            for (ph = *pp; ph != (prc_p) 0; ph = ph->pr_next) {
      296       296    3               /* Traverse the list of synonyms */
      297       297    3               p = ph->pr_proc;
      298       298    3               if ((p->p_flags2 & PF_WRITTEN) == 0) {
      299       299    4                  /* not been written yet */
      300       300    4                  fprintf(f,"%d  %s\n",p->p_id, ph->pr_name);
      301       301    4                  p->p_flags2 |= PF_WRITTEN;
      302       302    4               }
      303       303    3            }
      304       304    2         }
      305       305    1        }
      306       306
      307       307
      308       308
      309       309             /* cleanprocs */
      310       310
      311       311             cleanprocs(hash,n,mask)
      312       312              prc_p hash[];
      313       313              int   n,mask;
      314       314             {
      315       315    1         /* After an EM input file has been processed, the names
      316       316    1          * of those procedures that are internal (i.e. not visible
      317       317    1          * outside the file they are defined in) must be removed
      318       318    1          * from the procedure hash table. This is accomplished
      319       319    1          * by removing the 'prc struct' from its synonym list.
      320       320    1          * After the final input file has been processed, all
      321       321    1          * remaining prc structs are also removed.
      322       322    1          */
      323       323    1
      324       324    1         register prc_p *pp, ph, x, next;
      325       325    1
      326       326    1         for (pp = &hash[0]; pp < &hash[n]; pp++) {
      327       327    2            /* Traverse the hash table */
      328       328    2            x = (prc_p) 0;
      329       329    2            for (ph = *pp; ph != (prc_p) 0; ph = next) {
      330       330    3               /* Traverse the synonym list.
      331       331    3                * x points to the prc struct just before ph,
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=10 
      332       332    3                * or is 0 if ph is the first struct of
      333       333    3                * the list.
      334       334    3                */
      335       335    3               next = ph->pr_next;
      336       336    3               if ((ph->pr_proc->p_flags1 & mask) == 0) {
      337       337    4                  if (x == (prc_p) 0) {
      338       338    5                     *pp = next;
      339       339    5                  } else {
      340       340    5                     x->pr_next = next;
      341       341    5                  }
      342       342    4                  oldprc(ph); /* delete the struct */
      343       343    4               } else {
      344       344    4                  x = ph;
      345       345    4               }
      346       346    3            }
      347       347    2         }
      348       348    1        }
      349       349
      350       350
      351       351
      352       352             /* dump_dblocknames */
      353       353
      354       354             dump_dblocknames(hash,n,f)
      355       355              sym_p  hash[];
      356       356              int    n;
      357       357              FILE   *f;
      358       358             {
      359       359    1         /* Save the names of the EM data blocks in file f.
      360       360    1          * The output consists of tuples (dblock_id, name).
      361       361    1          * This routine is called once for every input file.
      362       362    1          */
      363       363    1
      364       364    1         register sym_p *sp, sh;
      365       365    1         dblock_p d;
      366       366    1         register int i;
"zbe$ic_lookup:c.:ZBC3TSI", line 366: (warning) identifier "i" is not used
      367       367    1
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=11 
      368       368    1        #define DF_WRITTEN 01
      369       369    1
      370       370    1
      371       371    1         for (sp = &hash[0]; sp < &hash[n]; sp++) {
      372       372    2            /* Traverse the entire hash table */
      373       373    2            for (sh = *sp; sh != (sym_p) 0; sh = sh->sy_next) {
      374       374    3               /* Traverse the list of synonyms */
      375       375    3               d = sh->sy_dblock;
      376       376    3               if ((d->d_flags2 & DF_WRITTEN) == 0) {
      377       377    4                  /* not been written yet */
      378       378    4                  fprintf(f,"%d  %s\n",d->d_id, sh->sy_name);
      379       379    4                  d->d_flags2 |= DF_WRITTEN;
      380       380    4               }
      381       381    3            }
      382       382    2         }
      383       383    1        }
      384       384
      385       385
      386       386
      387       387             /* cleandblocks */
      388       388
      389       389             cleandblocks(hash,n,mask)
      390       390              sym_p hash[];
      391       391              int   n,mask;
      392       392             {
      393       393    1         /* After an EM input file has been processed, the names
      394       394    1          * of those data blocks that are internal must be removed.
      395       395    1          */
      396       396    1
      397       397    1         register sym_p *sp, sh, x, next;
      398       398    1
      399       399    1         for (sp = &hash[0]; sp < &hash[n]; sp++) {
      400       400    2            x = (sym_p) 0;
      401       401    2            for (sh = *sp; sh != (sym_p) 0; sh = next) {
      402       402    3               next = sh->sy_next;
      403       403    3               if ((sh->sy_dblock->d_flags1 & mask) == 0) {
      404       404    4                  if (x == (sym_p) 0) {
CC.C03    File=zbe$ic_lookup:c.:ZBC3TSI                                             Fri Aug 22 1997  Page=12 
      405       405    5                     *sp = next;
      406       406    5                  } else {
      407       407    5                     x->sy_next = next;
      408       408    5                  }
      409       409    4                  oldsym(sh); /* delete the struct */
      410       410    4               } else {
      411       411    4                  x = sh;
      412       412    4               }
      413       413    3            }
      414       414    2         }
      415       415    1        }
      416       416
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$map:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   zbe$ic:h.:ZBC3TOU. is referenced
   zbe$ic_lookup:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbe$ic_lookup:c.:ZBC3TSI
