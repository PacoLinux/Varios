#*******************************************************************************
#*******************************************************************************
#
#  ROUTINE NAME: IVERIFY (SR051)
#
#  PURPOSE:
#      TO SEARCH A CHARACTER STRING FOR THE FIRST CHARACTER WHICH IS NOT PRESENT
#      IN A SECOND REFERENCE STRING
#
#  BASIC APPROACH:
#      COMPARE EACH CHARACTER IN THE FIRST STRING AGAINST EACH CHARACTER IN
#      THE SECOND
#
#  ENVIRONMENT:
#      LANGUAGE: RATFOR, FORTRAN 77
#
#  MAJOR PROGRAM VARIABLES:
#      I - LOOP INDEX THROUGH STRING
#      J - LOOP INDEX THROUGH COMPARE STRING
#      L1 - LENGTH OF STRING
#      L2 - LENGTH OF COMPARE STRING
#
#  INPUT:
#      STRING - CHARACTER STRING SCANNED
#      COMPARE - LIST OF CHARACTERS WHICH CHARACTERS IN STRING ARE COMPARED
#          AGAINST
#
#  OUTPUT:
#      IVERIFY - CHARACTER POSITION IN STRING WHERE FIRST CHARACTER NOT FOUND
#         IN COMPARE STRING IS LOCATED
#
#  AUTHOR: ROB JANES
#  DATE:   18AUG78
#  REFERENCE: CR0795-78040
#
#*******************************************************************************
#*******************************************************************************
    FUNCTION IVERIFY (STRING, COMPARE)
    CHARACTER*(*) STRING, COMPARE
 
    L1 = LEN (STRING)
    L2 = LEN (COMPARE)
 
#   LOOP THROUGH ALL CHARACTERS IN STRING
    DO I = 1, L1 $(
#      COMPARE CHARACTER IN STRING AGAINST EACH CHARACTER IN COMPARE
       FOR (J=1; J<=L2; J=J+1)
          IF (COMPARE(J:J) == STRING(I:I))
             BREAK
       IF (J > L2) $(
          IVERIFY = I
          RETURN
       $)
    $)
 
    IVERIFY = 0
    RETURN
    END
#*******************************************************************************
#*******************************************************************************
#
#  ROUTINE NAME: $DSTRING
#
#  PURPOSE:
#      SCAN A LINE AND EXTRACT A DELIMITED STRING OF CHARACTERS
#
#  BASIC APPROACH:
#      USE POSITION SPECIFIED TO BEGIN SCAN.  SCAN UNTIL AN END-OF-LINE
#      IS HIT OR ONE OF THE CHARACTERS GIVE IN DELIMS IS FOUND.
#
#  MAJOR PROGRAM VARIABLES:
#      ISTART - STARTING POSITION IN LINE OF STRING (NO LEADING BLANKS)
#      IPOS - ARGUMENT WHICH IS UPDATED. INITIALLY POINTS TO END OF
#            PREVIOUSLY LOCATED STRING (0 FOR STARTING A NEW LINE)
#            AT END, POINTS TO DELIMITER OF STRING LOCATED (OR LENGTH OF LINE,
#            PLUS ONE FOR LAST STRING ON THE LINE)
#
#  INPUT:
#      DELIMS - STRING OF SINGLE CHARACTERS WHICH MAY TERMINATE THE STRING
#            BEING SCANNED FOR.
#      LINE - LINE TO BE SCANNED FOR THE STRING.
#
#  OUTPUT:
#      STRNG - LOCATED STRING, WITH NO LEADING BLANKS AND BLANK PADDED.  DOES
#            NOT CONTAIN THE DELIMITER.  IPOS POINTS TO THAT IN LINE
#
#  ROUTINES CALLED:
#      IVERIFY - L.R - FIND FIRST CHARACTER WHICH ISN'T IN STRING SUPPLIED
#      LENSIG - L.R - SIGNIFICANT LENGTH OF A STRING
#
#  AUTHOR: ROB JANES
#  DATE:   29JUN81
#
#*******************************************************************************
#*******************************************************************************
    SUBROUTINE $DSTRING (LINE, IPOS, STRNG, DELIMS, KNDEX, JNDEX, ISTAT)
    CHARACTER*(*) LINE, DELIMS, STRNG
 
#   SKIP LEADING BLANKS
    IPOS = IPOS + 1
    I = IVERIFY (LINE(IPOS:), ' ')
    IF (I == 0) $(
       IPOS = LENSIG(LINE) + 1
       STRNG = ' '
       RETURN
    $)
 
#   LOCATE END OF TOKEN
    ISTART = IPOS + I - 1
    L = LENSIG(LINE) - ISTART + 2
    DO I = 1, LEN(DELIMS) $(
       J = INDEX (LINE(ISTART:), DELIMS(I:I))
       IF (J > 0)
          L = MIN (L, J)
    $)
 
#   PULL OFF TOKEN TO BE RETURNED
    IF (L > 1) $(
       IF (L - 1 > LEN(STRNG))
          ISTAT = KNDEX*1000 + JNDEX
       STRNG = LINE(ISTART:ISTART+L-2)
    $)
    ELSE
       STRNG = ' '
 
#   UPDATE POINTER TO DELIMITER LOCATED (END-OF-STRING IF NO DELIMITER)
    IPOS = ISTART + L - 1
    IF (IPOS > LENSIG(LINE))
       IPOS = LENSIG(LINE) + 1
    END
#*******************************************************************************
#*******************************************************************************
#
#  ROUTINE NAME: PARSEOPT
#
#  PURPOSE:
#      PARSE THE OPTIONS SPECIFIED ON A COMMAND LINE. RETURN THEM IN A
#      CONVENIENT FORM FOR USE BY THE CALLING PROGRAM
#
#  BASIC APPROACH:
#      SCAN THE INPUT COMMAND LINE BY REPEATED CALLS TO THE ROUTINE $DSTRING
#
#  MAJOR PROGRAM VARIABLES:
#      IPOS - CHARACTER POINTER INTO THE COMMAND LINE. UPDATED BY $DSTRING
#
#  INPUT:
#      LINE - LINE OF OPTIONS AND SUBOPTIONS. FORMAT IS
#            (OPTION, OPTION=SUBOPTION, OPTION=(SUBOPTION,SUBOPTION,...)
#            OPTION(SUBOPTION,SUBOPTION,...) )
#      MAXOPT - MAXIMUM NUMBER OF OPTIONS THAT CALLING ROUTINE CAN HANDLE
#
#  OUTPUT:
#      ISTAT - STATUS VALUE RETURNED TO CALLING ROUTINE
#      NOPTIONS - NUMBER OF OPTIONS AND SUBOPTIONS LOCATED
#      OPTIONS - ACTUAL OPTIONS LOCATED
#            OPTIONS (1,*) IS MAJOR COMMAND
#            OPTIONS (2,*) IS SUBCOMMAND (IF THERE IS ANY)
#            THE FORMAT IS
#            OPTIONS(1,1) OPTIONS(2,1)
#            MAJOR        MINOR 1
#                         MINOR 2
#            MAJOR
#            MAJOR
#            MAJOR        MINOR
#            MAJOR        MINOR 1
#                         MINOR 2
#
#  ROUTINES CALLED:
#      $DSTRING - RETURN 1 DELIMITED TOKEN FROM THE COMMAND LINE
#      LENSIG - L.R - SIGNIFICANT LENGTH OF A STRING
#      IVERIFY - L.R - FIND FIRST CHARACTER NOT IN REFERENCE STRING
#
#  AUTHOR: ROB JANES
#  DATE:   29JUN81
#
#*******************************************************************************
#*******************************************************************************
    SUBROUTINE PARSEOPT (LINE, MAXOPT, NOPTIONS, OPTIONS, ISTAT)
    CHARACTER LINE*(*), OPTIONS(2,MAXOPT)*(*)
 
    ISTAT = 0
    NOPTIONS = 0
 
#   SKIP OVER LEADING BLANKS AND A LEADING LEFT PAREN IF THERE IS ONE.
    IPOS = IVERIFY (LINE, ' (') - 1
 
    REPEAT $(
 
       IF (NOPTIONS >= MAXOPT) $(
          ISTAT = 1
          RETURN
       $)
       NOPTIONS = NOPTIONS + 1
 
       CALL $DSTRING (LINE, IPOS, OPTIONS(1,NOPTIONS), ',=()', 1, NOPTIONS, ISTAT)
 
       IF (IPOS > LENSIG(LINE))  # SINCE WE'RE DONE, NO SUBOPTION POSSIBLE
          OPTIONS(2,NOPTIONS) = ' '
 
#      EITHER WE'RE DONE OR THE OPTION HAS NO SUBOPTIONS
       ELSE IF (LINE(IPOS:IPOS) == ')'  .OR.
          LINE(IPOS:IPOS) == ',')
          OPTIONS(2,NOPTIONS) = ' '
 
       ELSE IF (LINE(IPOS:IPOS) == '=' )  $(
#         IS THERE A '(' NEXT    (IGNORE BLANKS)
          I = IVERIFY ( LINE(IPOS+1:), ' ' )
          IPOS = IPOS + I - 1
          IF (I == 0 )  $(
             OPTIONS(2,NOPTIONS) = ' '
             IPOS = LEN(LINE) + 1
          $)
          ELSE IF (LINE(IPOS+1:IPOS+1) .NE. '(' )  $(     # A SINGLE SUBOPTION
             CALL $DSTRING (LINE, IPOS, OPTIONS(2,NOPTIONS), ',)', 2, NOPTIONS, ISTAT)
          $)
          ELSE  $(
 
             IPOS = IPOS + 1
             CALL $DSTRING (LINE, IPOS, OPTIONS(2,NOPTIONS), ',)', 2, NOPTIONS, ISTAT)
 
#            LOOP THROUGH SUBOPTIONS.  SUBOPTION LIST TERMINATED BY ')'
             WHILE (LINE(IPOS:IPOS) .NE. ')') $(
                IF (NOPTIONS >= MAXOPT) $(
                   ISTAT = 1
                   RETURN
                $)
                NOPTIONS = NOPTIONS + 1
                OPTIONS(1,NOPTIONS) = ' '
                CALL $DSTRING (LINE, IPOS, OPTIONS(2,NOPTIONS), ',)', 2, NOPTIONS, ISTAT)
                IF (IPOS > LENSIG(LINE))
                   BREAK
             $)
             IPOS = IPOS + 1               # SKIP OVER THE ')'
          $)
       $)
       IF (IPOS > LENSIG(LINE))
          BREAK
    $) UNTIL (LINE(IPOS:IPOS) == ')')
    IF (OPTIONS(1,NOPTIONS) == ' '  &  OPTIONS(2,NOPTIONS) == ' ')
       NOPTIONS = NOPTIONS - 1
    END
