VERSION A02

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:1    
        1        1        /*M* FUS$SECMNGR - NFS Security Database Manager */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*  NAME: FUS$SECMNGR
        8        8              Purpose:
        9        9                    The body of the NFSA processor - the security database
       10       10                    compiler for NFS.
       11       11        */
       12       12        /*F*  NAME: FUS$SECMNGR
       13       13              Purpose:
       14       14                    To compile the file passed in (M$SI) into a form that is
       15       15                    suitable for use by the NFSD ghost (M$OU).  The format
       16       16                    of the input file is describes in the NFS documentation,
       17       17                    and is parsed in FUS_NODES_D.
       18       18        */
       19       19        /*D*  NAME: FUS$SECMNGR
       20       20              Inputs:
       21       21                    M$SI - the input file to compile
       22       22              Outputs:
       23       23                    M$OU - the compiled output file
       24       24                    M$LO - a list of the input file, and any errors encountered
       25       25                    M$DO - a list of any errors encountered
       26       26              Algorithm:
       27       27                    Read the input file, and parse it's lines until EOF.  For each user
       28       28                    record read, make a database entry - HOSTS may require special
       29       29                    handling, because each host requires a separate database entry,
       30       30                    so we push off its processing to the end.
       31       31                    For each database entry, verify that the information is valid.
       32       32        */
       33       33        FUS$SECMNGR: PROC MAIN;
       34       34
       35       35        %INCLUDE CP_6;
       36      116        %INCLUDE CP_6_SUBS;
       37      656        %INCLUDE B_ERRORS_C;
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:2    
       38     1783        %INCLUDE FU_NFS_M;
       39     2298        %INCLUDE FU_PERR_C;
       40     2316        %INCLUDE FUS_DATA_C;
       41     2360        %INCLUDE XU_MACRO_C;
       42     5466        %INCLUDE XUG_ENTRY;
       43     5497        %INCLUDE XSL_PERR_C;
       44     5552        %INCLUDE XSL_SOCKET_M;
       45     6300        %INCLUDE XSL_SOCKET_E;
       46     6558
       47     6559        %P_PCB      (NAME=P_PCB, R=FUS_NODES, STCLASS=STATIC);
       48     6758        %PARSE$OUT  (NAME=OUT,STCLASS="BASED(OUT$)");
       49     6803        %PARSE$SYM  (NAME=SYM,STCLASS="BASED(SYM$)");
       50     6841        %XUG_INIT   (PCB=P_PCB);
       51     7254        %XUG_GETCMD (NAME=XUG_GETCMD,NODES=FUS_NODES,CONTINUE_OK=YES);
       52     7592        %XSL$HOSTENT (FPTN=HOSTENT,STCLASS="BASED(HOSTENT$)");
       53     7652
       54     7653        %FPT_OPEN (FPTN=OPEN_NFSSEC,
       55     7654                   DCB=M$OU,
       56     7655                   ASN=FILE,
       57     7656                   SHARE=ALL,
       58     7657                   CTG=YES,
       59     7658                   ACS=DIRECT,
       60     7659                   ORG=KEYED);
       61     7768
       62     7769        %FPT_READ (FPTN=ETCUSERS,
       63     7770                   BUF=ETCUSERS_BUF,
       64     7771                   DCB=M$SI);
       65     7810        %FPT_WRITE (FPTN=WRITE_NFSSEC,
       66     7811                    DCB=M$OU,
       67     7812                    BUF=FU$SECREC,
       68     7813                    KEY=FU$NFSSECKEY);
       69     7844
       70     7845        %FU$NFSSECKEY (NAME=FU$NFSSECKEY,STCLASS=STATIC);
       71     7866        %FU$NFSSECKEY (NAME=FU$NFSKEY_CONST,STCLASS=CONSTANT);
       72     7887        %FU$SECREC (NAME=FU$SECREC,STCLASS=STATIC);
       73     7910        %FU$SECREC (NAME=FU$SECREC_CONST,STCLASS=CONSTANT);
       74     7933
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:3    
       75     7934    1   DCL M$SI DCB;
       76     7935    1   DCL M$DO DCB;
       77     7936    1   DCL M$OU DCB;
       78     7937    1   DCL M$LO DCB;
       79     7938
       80     7939        %FPT_ERRMSG (FPTN=FUS_ERRMSG, FILENAME=FUS_ERRFID, DCB=M$SI,
       81     7940                     OUTDCB1 = M$DO, OUTDCB2=M$LO, BUF=FUS_ERRBUF);
       82     7967        %VLP_NAME (FPTN=FUS_ERRFID,NAME=':FUERRMSG');
       83     7994        %VLP_ERRCODE (FPTN=E_FUS_NOUID, STCLASS="CONSTANT SYMDEF",
       84     7995                      FCG=FU, MID=S, ERR#=%E$FUS_NOUID);
       85     8040        %VLP_ERRCODE (FPTN=E_FUS_NOGID, STCLASS="CONSTANT SYMDEF",
       86     8041                      FCG=FU, MID=S, ERR#=%E$FUS_NOGID);
       87     8086        %VLP_ERRCODE (FPTN=E_FUS_NOACCT, STCLASS="CONSTANT SYMDEF",
       88     8087                      FCG=FU, MID=S, ERR#=%E$FUS_NOACCT);
       89     8132        %VLP_ERRCODE (FPTN=E_FUS_NONAME, STCLASS="CONSTANT SYMDEF",
       90     8133                      FCG=FU, MID=S, ERR#=%E$FUS_NONAME);
       91     8178        %VLP_ERRCODE (FPTN=E_FUS_NOHOST, STCLASS="CONSTANT SYMDEF",
       92     8179                      FCG=FU, MID=S, ERR#=%E$FUS_NOHOST);
       93     8224        %VLP_ERRCODE (FPTN=E_FUS_NONFS, STCLASS="CONSTANT SYMDEF",
       94     8225                      FCG=FU, MID=S, ERR#=%E$FUS_NONFS);
       95     8270        %VLP_ERRCODE (FPTN=E_FUS_NOHSTCL, STCLASS="CONSTANT SYMDEF",
       96     8271                      FCG=FU, MID=S, ERR#=%E$FUS_NOHSTCL);
       97     8316        %VLP_ERRCODE (FPTN=E_FUS_NOCP6, STCLASS="CONSTANT SYMDEF",
       98     8317                      FCG=FU, MID=S, ERR#=%E$FUS_NOCP6);
       99     8362        %VLP_ERRCODE (FPTN=E_FUS_NOUNIX, STCLASS="CONSTANT SYMDEF",
      100     8363                      FCG=FU, MID=S, ERR#=%E$FUS_NOUNIX);
      101     8408        %VLP_ERRCODE (FPTN=E_FUS_UIDTOOBIG, STCLASS="CONSTANT SYMDEF",
      102     8409                      FCG=FU, MID=S, ERR#=%E$FUS_UIDTOOBIG);
      103     8454        %VLP_ERRCODE (FPTN=E_FUS_GIDTOOBIG, STCLASS="CONSTANT SYMDEF",
      104     8455                      FCG=FU, MID=S, ERR#=%E$FUS_GIDTOOBIG);
      105     8500
      106     8501    1   DCL XSL$GETHOSTBYNAME ENTRY(2) ALTRET;
      107     8502    1   DCL XSL$HTONS ENTRY(2);
      108     8503
      109     8504    1   DCL OUT$ PTR;
      110     8505    1   DCL SYM$ PTR;
      111     8506    1   DCL P1$ PTR;  /* Misc. ptrs mostly to save typing */
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:4    
      112     8507    1   DCL P2$ PTR;
      113     8508    1   DCL HOST$ PTR STATIC INIT(ADDR(NIL));
      114     8509    1   DCL HOSTENT$ PTR;
      115     8510
      116     8511    1   DCL FUS_NODES SBIN SYMREF;
      117     8512
      118     8513    1   DCL ETCUSERS_BUF CHAR(255) STATIC;
      119     8514    1   DCL FUS_ERRBUF CHAR(255) STATIC;
      120     8515
      121     8516    1   DCL I1 SBIN;
      122     8517    1   DCL I2 SBIN;
      123     8518    1   DCL TMP SBIN;
      124     8519    1   DCL NFS_CLAUSE# BIT(1);
      125     8520    1   DCL UNIXID_CLAUSE# BIT(1);
      126     8521    1   DCL CP6ID_CLAUSE# BIT(1);
      127     8522    1   DCL HOST_CLAUSE# BIT(1);
      128     8523    1   DCL UID# BIT(1);
      129     8524    1   DCL GID# BIT(1);
      130     8525    1   DCL ERROR# BIT(1);
      131     8526
      132     8527        %EJECT;
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:5    
      133     8528    1   CALL XUG$INIT (XUG_GETCMD,XUG_INIT);
      134     8529    1   CALL M$OPEN (OPEN_NFSSEC);
      135     8530
      136     8531    2   DO WHILE '1'B;
      137     8532
      138     8533    2      FU$SECREC = FU$SECREC_CONST;
      139     8534    2      FU$NFSSECKEY = FU$NFSKEY_CONST;
      140     8535    2      NFS_CLAUSE# = %NO#;
      141     8536    2      HOST_CLAUSE# = %NO#;
      142     8537    2      CP6ID_CLAUSE# = %NO#;
      143     8538    2      UNIXID_CLAUSE# = %NO#;
      144     8539    2      UID# = %NO#;
      145     8540    2      GID# = %NO#;
      146     8541    2      ERROR# = %NO#;
      147     8542    2      HOST$ = ADDR(NIL);
      148     8543    2      CALL XUG$GETCMD (XUG_GETCMD)
      149     8544    3           WHENALTRETURN DO;
      150     8545    3             IF XUG_GETCMD.ERR#.CODE# = %E$EOF THEN
      151     8546    3                CALL M$EXIT;
      152     8547    3             CALL RPT_ERR (XUG_GETCMD.ERR#);  /* unexpected error - not EOF */
      153     8548    3             CALL M$XXX;
      154     8549    3           END;
      155     8550
      156     8551    2      OUT$ = XUG_GETCMD.OUT$;
      157     8552    3      DO I1 = 0 TO OUT.NSUBLKS - 1;
      158     8553    4         DO CASE(OUT.SUBLK$(I1)->OUT.CODE);
      159     8554    4            CASE(%UNIXID);
      160     8555    4                UNIXID_CLAUSE# = %YES#;
      161     8556    4                P1$ = OUT.SUBLK$(I1)->OUT.SUBLK$(0);
      162     8557    5                DO I2 = 0 TO P1$->OUT.NSUBLKS - 1;
      163     8558    5                   P2$ = P1$->OUT.SUBLK$(I2)->OUT.SUBLK$(0);
      164     8559    6                   DO CASE(P2$->OUT.CODE);
      165     8560    6                      CASE(%UNX_NAME);
      166     8561                               /* Not used by NFS (at this time) */
      167     8562    6                      CASE(%UNX_GID);
      168     8563    6                          GID# = %YES#;
      169     8564    6                          IF P2$->OUT.SUBLK$(0)->OUT.CODE ~= %UNX_ID_WILD
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:6    
      170     8565    7                           THEN DO;
      171     8566    7                             IF P2$->OUT.SUBLK$(0)->OUT.CODE = %UNX_ID_NEG
      172     8567    7                              THEN P2$ = P2$->OUT.SUBLK$(0);
      173     8568    7                             CALL CHARBIN(TMP,P2$->OUT.SUBLK$(0)->SYM.TEXT);
      174     8569    7                             IF P2$->OUT.CODE = %UNX_ID_NEG
      175     8570    7                              THEN TMP = -TMP;
      176     8571    7                             IF TMP < -2 OR TMP > 65533 THEN CALL RPT_ERR (
              8571                                      E_FUS_GIDTOOBIG);
      177     8572              /*E* ERROR: FUS-%E$FUS_GIDTOOBIG-0
      178     8573                 MESSAGE: The specified GID is out of range; it must be between -2 and 65533
      179     8574              */
      180     8575    7                             CALL XSL$HTONS( FU$SECREC.GID, TMP);
      181     8576                                   /* pack TMP's value as 8bit bytes in FU$SECREC.GID */
      182     8577    7                             END;
      183     8578    6                          ELSE
      184     8579    6                             FU$SECREC.GID = 256;  /* WILDCARD - ? */
      185     8580    6                          FU$NFSSECKEY.GID = FU$SECREC.GID;
      186     8581    6                      CASE(%UNX_UID);
      187     8582    6                          UID# = %YES#;
      188     8583    6                          IF P2$->OUT.SUBLK$(0)->OUT.CODE ~= %UNX_ID_WILD
      189     8584    7                           THEN DO;
      190     8585    7                             IF P2$->OUT.SUBLK$(0)->OUT.CODE = %UNX_ID_NEG
      191     8586    7                              THEN P2$ = P2$->OUT.SUBLK$(0);
      192     8587    7                             CALL CHARBIN(TMP,P2$->OUT.SUBLK$(0)->SYM.TEXT);
      193     8588    7                             IF P2$->OUT.CODE = %UNX_ID_NEG
      194     8589    7                              THEN TMP = -TMP;
      195     8590    7                             IF TMP < -2 OR TMP > 65533 THEN CALL RPT_ERR (
              8590                                      E_FUS_UIDTOOBIG);
      196     8591              /*E* ERROR: FUS-%E$FUS_UIDTOOBIG-0
      197     8592                 MESSAGE: The specified GID is out of range; it must be between -2 and 65533
      198     8593              */
      199     8594    7                             CALL XSL$HTONS( FU$SECREC.UID, TMP);
      200     8595                                   /* pack TMP's value as 8bit bytes in FU$SECREC.GID */
      201     8596    7                             END;
      202     8597    6                          ELSE
      203     8598    6                             FU$SECREC.UID = 256;  /* WILDCARD - ? */
      204     8599    6                          FU$NFSSECKEY.UID = FU$SECREC.UID;
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:7    
      205     8600    6                   END; /* CASE */
      206     8601    5                END; /* DO I2 */
      207     8602
      208     8603    4            CASE(%CP6ID);
      209     8604
      210     8605    4                CP6ID_CLAUSE# = %YES#;
      211     8606    4                P1$ = OUT.SUBLK$(I1)->OUT.SUBLK$(0);
      212     8607    5                DO I2 = 0 TO P1$->OUT.NSUBLKS - 1;
      213     8608    5                   P2$ = P1$->OUT.SUBLK$(I2);
      214     8609    6                   DO CASE(P2$->OUT.CODE);
      215     8610    6                      CASE(%CP6_NAME);
      216     8611    6                          FU$SECREC.UNAME = P2$->OUT.SUBLK$(0)->SYM.TEXT;
      217     8612    6                      CASE(%CP6_ACCT);
      218     8613    6                          FU$SECREC.ACCN = P2$->OUT.SUBLK$(0)->SYM.TEXT;
      219     8614    6                   END; /* CASE */
      220     8615    5                END; /* DO I2 */
      221     8616
      222     8617    4            CASE(%HOSTS);
      223     8618
      224     8619    4                HOST_CLAUSE# = %YES#;
      225     8620    4                P1$ = OUT.SUBLK$(I1)->OUT.SUBLK$(0)->OUT.SUBLK$(0);
      226     8621    4                IF P1$->OUT.SUBLK$(0)->OUT.CODE ~= %HOST_WILD THEN
      227     8622                        /*
      228     8623                        There are 1 or several hosts listed, we'll process
      229     8624                        them later when we have the rest of the user info.
      230     8625                        */
      231     8626    4                   HOST$ = P1$;
      232     8627
      233     8628    4            CASE(%NFS);
      234     8629
      235     8630    4                NFS_CLAUSE# = %YES#;
      236     8631    4                P1$ = OUT.SUBLK$(I1)->OUT.SUBLK$(0);
      237     8632    5                DO I2 = 0 TO P1$->OUT.NSUBLKS - 1;
      238     8633    5                   P2$ = P1$->OUT.SUBLK$(I2)->OUT.SUBLK$(0);
      239     8634    6                   DO CASE(P2$->OUT.CODE);
      240     8635    6                      CASE(%SECCHK);
      241     8636                            /* This needs a lot more work. */
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:8    
      242     8637    6                          IF (P2$->OUT.NSUBLKS = 0)
      243     8638    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      244     8639    6                          THEN
      245     8640    6                             FU$SECREC.SECCHK = %YES#;
      246     8641    6                      CASE(%FMSEC);
      247     8642    6                          IF (P2$->OUT.NSUBLKS = 0)
      248     8643    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      249     8644    6                          THEN
      250     8645    6                             FU$SECREC.FMSEC = %YES#;
      251     8646    6                      CASE(%FMREAD);
      252     8647    6                          IF (P2$->OUT.NSUBLKS = 0)
      253     8648    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      254     8649    6                          THEN
      255     8650    6                             FU$SECREC.FMREAD = %YES#;
      256     8651    6                      CASE(%FMBLK);
      257     8652    6                          IF (P2$->OUT.NSUBLKS = 0)
      258     8653    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      259     8654    6                          THEN
      260     8655    6                             FU$SECREC.FMBLK = %YES#;
      261     8656    6                      CASE(%MOUNT);
      262     8657    6                          IF (P2$->OUT.NSUBLKS = 0)
      263     8658    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      264     8659    6                          THEN
      265     8660    6                             FU$SECREC.MOUNT = %YES#;
      266     8661    6                      CASE(%REJECT);
      267     8662    6                          IF (P2$->OUT.NSUBLKS = 0)
      268     8663    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      269     8664    6                          THEN
      270     8665    6                             FU$SECREC.REJECT = %YES#;
      271     8666    6                      CASE(%TOPLVL);
      272     8667    6                          FU$SECREC.TOPLVL = P2$->OUT.SUBLK$(0)->OUT.CODE;
      273     8668    6                   END; /* CASE */
      274     8669    5                END; /* DO I2 */
      275     8670
      276     8671    4         END; /* CASE */
      277     8672    3      END; /* DO I */
      278     8673
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:9    
      279     8674    3      IF OUT.CODE < %JUNK THEN DO;
      280     8675    3         CALL NFSCHECKER;
      281     8676    4         IF NOT ERROR# THEN DO;
      282     8677    4            IF HOST$ = ADDR(NIL) THEN /* host name is ? (wildcarded) */
      283     8678    4               CALL M$WRITE (WRITE_NFSSEC);
      284     8679    4            ELSE  /* loop through the list of host names */
      285     8680    5               DO I1 = 0 TO HOST$->OUT.NSUBLKS - 1;
      286     8681    5                  FU$NFSSECKEY.NAME = HOST$->OUT.SUBLK$(I1)->SYM.TEXT;
      287     8682    5                  FU$NFSSECKEY.L = 5 + HOST$->OUT.SUBLK$(I1)->SYM.COUNT;
      288     8683    5                  SUBSTR(FU$NFSSECKEY.NAME,FU$NFSSECKEY.L,1) = BINASC(0);
      289     8684    5                  CALL XSL$GETHOSTBYNAME (HOSTENT$, FU$NFSSECKEY.NAME)
      290     8685    6                       WHENRETURN DO;
      291     8686    6                          CALL M$WRITE (WRITE_NFSSEC);
      292     8687    6                       END;
      293     8688    6                       WHENALTRETURN DO;
      294     8689                    /*E* ERROR: FUS-%E$FUS_NOHOST-0
      295     8690                         MESSAGE:  Specified host not found; no NFS authorization
      296     8691                                   record created.
      297     8692                    */
      298     8693    6                          CALL RPT_ERR (E_FUS_NOHOST);
      299     8694    6                       END;
      300     8695    5                  END; /* DO I1 */
      301     8696    4            END; /* IF NOT ERROR# */
      302     8697    3         END; /* IF OUT.CODE */
      303     8698    2      END; /* DO FOREVER */
      304     8699
      305     8700        %EJECT;
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:10   
      306     8701        /*I*  NAME:    NFSCHECKER
      307     8702              Purpose: To verify that the information in the data base entry is valid.
      308     8703                       It does not check the size of GID or UID, or HOST entries -
      309     8704                       that's the caller's responsibility.  The rules for an entry are:
      310     8705
      311     8706                    1. A CP6ID clause is required.
      312     8707                    2. CP-6 account and name are both required.
      313     8708                    3. A UNIXID clause is required and must contain both uid and gid.
      314     8709                       The name field is not used by NFS (at this time).
      315     8710                    4. HOST clause is required and must by a valid system or '?'.
      316     8711                  ? 5. If uid=? and gid=?, HOST must not be ?
      317     8712                    6. NFS clause is required for a record to be written to :nfssec
      318     8713        */
      319     8714    1   NFSCHECKER: PROC;
      320     8715
      321     8716    2      IF NOT UNIXID_CLAUSE# THEN CALL RPT_ERR (E_FUS_NOUNIX);
      322     8717              /*E* ERROR: FUS-%E$FUS_NOUNIX-0
      323     8718                   MESSAGE: Required clause UNIXID is missing.
      324     8719              */
      325     8720
      326     8721    2      IF NOT UID# THEN CALL RPT_ERR (E_FUS_NOUID);
      327     8722              /*E* ERROR: FUS-%E$FUS_NOUID-0
      328     8723                   MESSAGE:  No Unix uid found for this user; no NFS
      329     8724                             authorization record created.
      330     8725              */
      331     8726
      332     8727    2      IF NOT GID# THEN CALL RPT_ERR (E_FUS_NOGID);
      333     8728              /*E* ERROR: FUS-%E$FUS_NOGID-0
      334     8729                   MESSAGE:  No Unix gid found for this user; no NFS
      335     8730                             authorization record created.
      336     8731              */
      337     8732
      338     8733    2      IF NOT CP6ID_CLAUSE# THEN CALL RPT_ERR (E_FUS_NOCP6);
      339     8734              /*E* ERROR: FUS-%E$FUS_NOCP6-0
      340     8735                   MESSAGE: Required clause CP6ID is missing.
      341     8736              */
      342     8737
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:11   
      343     8738    2      IF FU$SECREC.ACCN = ' ' THEN CALL RPT_ERR (E_FUS_NOACCT);
      344     8739              /*E* ERROR: FUS-%E$FUS_NOACCT-0
      345     8740                   MESSAGE:  No CP-6 account found for this user; no NFS
      346     8741                             authorization record created.
      347     8742              */
      348     8743
      349     8744    2      IF FU$SECREC.UNAME = ' ' THEN CALL RPT_ERR (E_FUS_NONAME);
      350     8745              /*E* ERROR: FUS-%E$FUS_NONAME-0
      351     8746                   MESSAGE:  No CP-6 user name found for this user; no NFS
      352     8747                             authorization record created.
      353     8748              */
      354     8749
      355     8750    2      IF NOT HOST_CLAUSE# THEN CALL RPT_ERR (E_FUS_NOHSTCL);
      356     8751              /*E* ERROR: FUS-%E$FUS_NOHSTCL-0
      357     8752                   MESSAGE: Required clause HOST is missing.
      358     8753              */
      359     8754
      360     8755    2      IF NOT NFS_CLAUSE# THEN CALL RPT_ERR (E_FUS_NONFS);
      361     8756              /*E* ERROR: FUS-%E$FUS_NONFS-0
      362     8757                   MESSAGE:  No NFS clause found for this user; no NFS
      363     8758                             authorization record created.
      364     8759              */
      365     8760
      366     8761    2   END NFSCHECKER;
      367     8762
      368     8763        /*I*  NAME:    RPT_ERR
      369     8764              Purpose: Print out the passed error, and set the ERROR# flag.
      370     8765              Inputs:  ERR - a standard CP/6 error code
      371     8766        */
      372     8767    1   RPT_ERR: PROC (ERR);
      373     8768    2   DCL ERR BIT(36) ALIGNED;
      374     8769
      375     8770    2      FUS_ERRMSG.CODE_ = VECTOR(ERR);
      376     8771    2      CALL M$ERRMSG (FUS_ERRMSG);
      377     8772    2      ERROR# = %YES#;
      378     8773
      379     8774    2   END RPT_ERR;
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:12   
      380     8775    1   END FUS$SECMNGR;

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:13   
--  Include file information  --

   XSL_SOCKET_E.:LIBRARY  is referenced.
   XSL_SOCKET_M.:LIBRARY  is referenced.
   XSL_PERR_C.:LIBRARY  is referenced.
   XUG_ENTRY.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   FUS_DATA_C.:FUA2TOU  is referenced.
   FU_PERR_C.:FUA2TOU  is referenced.
   FU_NFS_M.:FUA2TOU  is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FUS$SECMNGR.

   Procedure FUS$SECMNGR requires 449 words for executable code.
   Procedure FUS$SECMNGR requires 24 words of local(AUTO) storage.

    No errors detected in file FUS$SECMNGR.:FUA2TSI    .

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:14   

 Object Unit name= FUS$SECMNGR                                File name= FUS$SECMNGR.:FUA2TOU
 UTS= NOV 21 '97 11:36:23.72 FRI                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none   406    626  FUS$SECMNGR
    2  RoData even  UTS     83    123  FUS$SECMNGR
    3   DCB   even  none     0      0  M$SI
    4   DCB   even  none     0      0  M$DO
    5   DCB   even  none     0      0  M$OU
    6   DCB   even  none     0      0  M$LO
    7   Proc  even  none   449    701  FUS$SECMNGR
    8  RoData even  none    22     26  FUS$SECMNGR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     7      0   yes            yes      Main       0  FUS$SECMNGR
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:15   

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    2    110  E_FUS_NOUID                        2    111  E_FUS_NOGID
    2    112  E_FUS_NOACCT                       2    113  E_FUS_NONAME
    2    114  E_FUS_NOHOST                       2    115  E_FUS_NONFS
    2    116  E_FUS_NOHSTCL                      2    117  E_FUS_NOCP6
    2    120  E_FUS_NOUNIX                       2    121  E_FUS_UIDTOOBIG
    2    122  E_FUS_GIDTOOBIG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XTX$ADAPT
         yes           Std       2 XSL$HTONS
 yes     yes           Std       2 XUG$INIT
 yes     yes           Std       1 XUG$GETCMD
 yes     yes           Std       2 XSL$GETHOSTBYNAME
                       nStd      0 X66_MAUTO
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$SI                                  M$DO
     M$OU                                  M$LO                                  FUS_NODES
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:16   


        1        1        /*M* FUS$SECMNGR - NFS Security Database Manager */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*P*  NAME: FUS$SECMNGR
        8        8              Purpose:
        9        9                    The body of the NFSA processor - the security database
       10       10                    compiler for NFS.
       11       11        */
       12       12        /*F*  NAME: FUS$SECMNGR
       13       13              Purpose:
       14       14                    To compile the file passed in (M$SI) into a form that is
       15       15                    suitable for use by the NFSD ghost (M$OU).  The format
       16       16                    of the input file is describes in the NFS documentation,
       17       17                    and is parsed in FUS_NODES_D.
       18       18        */
       19       19        /*D*  NAME: FUS$SECMNGR
       20       20              Inputs:
       21       21                    M$SI - the input file to compile
       22       22              Outputs:
       23       23                    M$OU - the compiled output file
       24       24                    M$LO - a list of the input file, and any errors encountered
       25       25                    M$DO - a list of any errors encountered
       26       26              Algorithm:
       27       27                    Read the input file, and parse it's lines until EOF.  For each user
       28       28                    record read, make a database entry - HOSTS may require special
       29       29                    handling, because each host requires a separate database entry,
       30       30                    so we push off its processing to the end.
       31       31                    For each database entry, verify that the information is valid.
       32       32        */
       33       33        FUS$SECMNGR: PROC MAIN;

     33  7 000000   000000 700200 xent  FUS$SECMNGR  TSX0  ! X66_MAUTO
         7 000001   000030 000000                    ZERO    24,0
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:17   

       34       34
       35       35        %INCLUDE CP_6;
       36      116        %INCLUDE CP_6_SUBS;
       37      656        %INCLUDE B_ERRORS_C;
       38     1783        %INCLUDE FU_NFS_M;
       39     2298        %INCLUDE FU_PERR_C;
       40     2316        %INCLUDE FUS_DATA_C;
       41     2360        %INCLUDE XU_MACRO_C;
       42     5466        %INCLUDE XUG_ENTRY;
       43     5497        %INCLUDE XSL_PERR_C;
       44     5552        %INCLUDE XSL_SOCKET_M;
       45     6300        %INCLUDE XSL_SOCKET_E;
       46     6558
       47     6559        %P_PCB      (NAME=P_PCB, R=FUS_NODES, STCLASS=STATIC);
       48     6758        %PARSE$OUT  (NAME=OUT,STCLASS="BASED(OUT$)");
       49     6803        %PARSE$SYM  (NAME=SYM,STCLASS="BASED(SYM$)");
       50     6841        %XUG_INIT   (PCB=P_PCB);
       51     7254        %XUG_GETCMD (NAME=XUG_GETCMD,NODES=FUS_NODES,CONTINUE_OK=YES);
       52     7592        %XSL$HOSTENT (FPTN=HOSTENT,STCLASS="BASED(HOSTENT$)");
       53     7652
       54     7653        %FPT_OPEN (FPTN=OPEN_NFSSEC,
       55     7654                   DCB=M$OU,
       56     7655                   ASN=FILE,
       57     7656                   SHARE=ALL,
       58     7657                   CTG=YES,
       59     7658                   ACS=DIRECT,
       60     7659                   ORG=KEYED);
       61     7768
       62     7769        %FPT_READ (FPTN=ETCUSERS,
       63     7770                   BUF=ETCUSERS_BUF,
       64     7771                   DCB=M$SI);
       65     7810        %FPT_WRITE (FPTN=WRITE_NFSSEC,
       66     7811                    DCB=M$OU,
       67     7812                    BUF=FU$SECREC,
       68     7813                    KEY=FU$NFSSECKEY);
       69     7844
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:18   
       70     7845        %FU$NFSSECKEY (NAME=FU$NFSSECKEY,STCLASS=STATIC);
       71     7866        %FU$NFSSECKEY (NAME=FU$NFSKEY_CONST,STCLASS=CONSTANT);
       72     7887        %FU$SECREC (NAME=FU$SECREC,STCLASS=STATIC);
       73     7910        %FU$SECREC (NAME=FU$SECREC_CONST,STCLASS=CONSTANT);
       74     7933
       75     7934    1   DCL M$SI DCB;
       76     7935    1   DCL M$DO DCB;
       77     7936    1   DCL M$OU DCB;
       78     7937    1   DCL M$LO DCB;
       79     7938
       80     7939        %FPT_ERRMSG (FPTN=FUS_ERRMSG, FILENAME=FUS_ERRFID, DCB=M$SI,
       81     7940                     OUTDCB1 = M$DO, OUTDCB2=M$LO, BUF=FUS_ERRBUF);
       82     7967        %VLP_NAME (FPTN=FUS_ERRFID,NAME=':FUERRMSG');
       83     7994        %VLP_ERRCODE (FPTN=E_FUS_NOUID, STCLASS="CONSTANT SYMDEF",
       84     7995                      FCG=FU, MID=S, ERR#=%E$FUS_NOUID);
       85     8040        %VLP_ERRCODE (FPTN=E_FUS_NOGID, STCLASS="CONSTANT SYMDEF",
       86     8041                      FCG=FU, MID=S, ERR#=%E$FUS_NOGID);
       87     8086        %VLP_ERRCODE (FPTN=E_FUS_NOACCT, STCLASS="CONSTANT SYMDEF",
       88     8087                      FCG=FU, MID=S, ERR#=%E$FUS_NOACCT);
       89     8132        %VLP_ERRCODE (FPTN=E_FUS_NONAME, STCLASS="CONSTANT SYMDEF",
       90     8133                      FCG=FU, MID=S, ERR#=%E$FUS_NONAME);
       91     8178        %VLP_ERRCODE (FPTN=E_FUS_NOHOST, STCLASS="CONSTANT SYMDEF",
       92     8179                      FCG=FU, MID=S, ERR#=%E$FUS_NOHOST);
       93     8224        %VLP_ERRCODE (FPTN=E_FUS_NONFS, STCLASS="CONSTANT SYMDEF",
       94     8225                      FCG=FU, MID=S, ERR#=%E$FUS_NONFS);
       95     8270        %VLP_ERRCODE (FPTN=E_FUS_NOHSTCL, STCLASS="CONSTANT SYMDEF",
       96     8271                      FCG=FU, MID=S, ERR#=%E$FUS_NOHSTCL);
       97     8316        %VLP_ERRCODE (FPTN=E_FUS_NOCP6, STCLASS="CONSTANT SYMDEF",
       98     8317                      FCG=FU, MID=S, ERR#=%E$FUS_NOCP6);
       99     8362        %VLP_ERRCODE (FPTN=E_FUS_NOUNIX, STCLASS="CONSTANT SYMDEF",
      100     8363                      FCG=FU, MID=S, ERR#=%E$FUS_NOUNIX);
      101     8408        %VLP_ERRCODE (FPTN=E_FUS_UIDTOOBIG, STCLASS="CONSTANT SYMDEF",
      102     8409                      FCG=FU, MID=S, ERR#=%E$FUS_UIDTOOBIG);
      103     8454        %VLP_ERRCODE (FPTN=E_FUS_GIDTOOBIG, STCLASS="CONSTANT SYMDEF",
      104     8455                      FCG=FU, MID=S, ERR#=%E$FUS_GIDTOOBIG);
      105     8500
      106     8501    1   DCL XSL$GETHOSTBYNAME ENTRY(2) ALTRET;
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:19   
      107     8502    1   DCL XSL$HTONS ENTRY(2);
      108     8503
      109     8504    1   DCL OUT$ PTR;
      110     8505    1   DCL SYM$ PTR;
      111     8506    1   DCL P1$ PTR;  /* Misc. ptrs mostly to save typing */
      112     8507    1   DCL P2$ PTR;
      113     8508    1   DCL HOST$ PTR STATIC INIT(ADDR(NIL));
      114     8509    1   DCL HOSTENT$ PTR;
      115     8510
      116     8511    1   DCL FUS_NODES SBIN SYMREF;
      117     8512
      118     8513    1   DCL ETCUSERS_BUF CHAR(255) STATIC;
      119     8514    1   DCL FUS_ERRBUF CHAR(255) STATIC;
      120     8515
      121     8516    1   DCL I1 SBIN;
      122     8517    1   DCL I2 SBIN;
      123     8518    1   DCL TMP SBIN;
      124     8519    1   DCL NFS_CLAUSE# BIT(1);
      125     8520    1   DCL UNIXID_CLAUSE# BIT(1);
      126     8521    1   DCL CP6ID_CLAUSE# BIT(1);
      127     8522    1   DCL HOST_CLAUSE# BIT(1);
      128     8523    1   DCL UID# BIT(1);
      129     8524    1   DCL GID# BIT(1);
      130     8525    1   DCL ERROR# BIT(1);
      131     8526
      132     8527        %EJECT;
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:20   
      133     8528    1   CALL XUG$INIT (XUG_GETCMD,XUG_INIT);

   8528  7 000002   000000 630400 8                  EPPR0   0
         7 000003   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000004   000000 701000 xent               TSX1    XUG$INIT
         7 000005   000000 011000                    NOP     0

      134     8529    1   CALL M$OPEN (OPEN_NFSSEC);

   8529  7 000006   000134 630400 1                  EPPR0   OPEN_NFSSEC
         7 000007   050000 713400                    CLIMB   open
         7 000010   410400 401760                    pmme    nvectors=18

      135     8530
      136     8531    2   DO WHILE '1'B;

      137     8532
      138     8533    2      FU$SECREC = FU$SECREC_CONST;

   8533  7 000011   000000 100400                    MLR     fill='000'O
         7 000012   000100 000040 2                  ADSC9   FU$SECREC_CONST          cn=0,n=32
         7 000013   000360 000040 1                  ADSC9   FU$SECREC                cn=0,n=32

      139     8534    2      FU$NFSSECKEY = FU$NFSKEY_CONST;

   8534  7 000014   000000 100400                    MLR     fill='000'O
         7 000015   000000 000377 2                  ADSC9   FU$NFSKEY_CONST          cn=0,n=255
         7 000016   000260 000377 1                  ADSC9   FU$NFSSECKEY             cn=0,n=255

      140     8535    2      NFS_CLAUSE# = %NO#;

   8535  7 000017   200013 450100                    STZ     NFS_CLAUSE#,,AUTO

      141     8536    2      HOST_CLAUSE# = %NO#;

   8536  7 000020   200016 450100                    STZ     HOST_CLAUSE#,,AUTO

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:21   
      142     8537    2      CP6ID_CLAUSE# = %NO#;

   8537  7 000021   200015 450100                    STZ     CP6ID_CLAUSE#,,AUTO

      143     8538    2      UNIXID_CLAUSE# = %NO#;

   8538  7 000022   200014 450100                    STZ     UNIXID_CLAUSE#,,AUTO

      144     8539    2      UID# = %NO#;

   8539  7 000023   200017 450100                    STZ     UID#,,AUTO

      145     8540    2      GID# = %NO#;

   8540  7 000024   200020 450100                    STZ     GID#,,AUTO

      146     8541    2      ERROR# = %NO#;

   8541  7 000025   200021 450100                    STZ     ERROR#,,AUTO

      147     8542    2      HOST$ = ADDR(NIL);

   8542  7 000026   000001 236000 xsym               LDQ     B_VECTNIL+1
         7 000027   000425 756000 1                  STQ     HOST$

      148     8543    2      CALL XUG$GETCMD (XUG_GETCMD)

   8543  7 000030   000000 630400 8                  EPPR0   0
         7 000031   000017 631400 xsym               EPPR1   B_VECTNIL+15
         7 000032   000000 701000 xent               TSX1    XUG$GETCMD
         7 000033   000035 702000 7                  TSX2    s:8545
         7 000034   000051 710000 7                  TRA     s:8551

      149     8544    3           WHENALTRETURN DO;

      150     8545    3             IF XUG_GETCMD.ERR#.CODE# = %E$EOF THEN

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:22   
   8545  7 000035   000063 236000 1                  LDQ     XUG_GETCMD+1
         7 000036   377770 376007                    ANQ     131064,DL
         7 000037   000060 116007                    CMPQ    48,DL
         7 000040   000043 601000 7                  TNZ     s:8547

      151     8546    3                CALL M$EXIT;

   8546  7 000041   000001 713400                    CLIMB   exit
         7 000042   000000 401760                    pmme    nvectors=0

      152     8547    3             CALL RPT_ERR (XUG_GETCMD.ERR#);  /* unexpected error - not EOF */

   8547  7 000043   000002 236000 8                  LDQ     2
         7 000044   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000045   000666 701000 7                  TSX1    RPT_ERR
         7 000046   000000 011000                    NOP     0

      153     8548    3             CALL M$XXX;

   8548  7 000047   000003 713400                    CLIMB   3
         7 000050   000000 401760                    pmme    nvectors=0

      154     8549    3           END;

      155     8550
      156     8551    2      OUT$ = XUG_GETCMD.OUT$;

   8551  7 000051   000063 236000 1                  LDQ     XUG_GETCMD+1
         7 000052   200003 756100                    STQ     OUT$,,AUTO

      157     8552    3      DO I1 = 0 TO OUT.NSUBLKS - 1;

   8552  7 000053   200010 450100                    STZ     I1,,AUTO
         7 000054   000500 710000 7                  TRA     s:8672+1

      158     8553    4         DO CASE(OUT.SUBLK$(I1)->OUT.CODE);

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:23   
   8553  7 000055   200003 470500                    LDP0    OUT$,,AUTO
         7 000056   200010 720100                    LXL0    I1,,AUTO
         7 000057   000003 471510                    LDP1    3,X0,PR0
         7 000060   100000 721100                    LXL1    0,,PR1
         7 000061   000005 101003                    CMPX1   5,DU
         7 000062   000064 602011 7                  TNC     s:8553+7,X1
         7 000063   000477 710000 7                  TRA     s:8672
         7 000064   000477 710000 7                  TRA     s:8672
         7 000065   000071 710000 7                  TRA     s:8555
         7 000066   000257 710000 7                  TRA     s:8605
         7 000067   000330 710000 7                  TRA     s:8619
         7 000070   000344 710000 7                  TRA     s:8630

      159     8554    4            CASE(%UNIXID);

      160     8555    4                UNIXID_CLAUSE# = %YES#;

   8555  7 000071   400000 236003                    LDQ     -131072,DU
         7 000072   200014 756100                    STQ     UNIXID_CLAUSE#,,AUTO

      161     8556    4                P1$ = OUT.SUBLK$(I1)->OUT.SUBLK$(0);

   8556  7 000073   100003 236100                    LDQ     3,,PR1
         7 000074   200005 756100                    STQ     P1$,,AUTO

      162     8557    5                DO I2 = 0 TO P1$->OUT.NSUBLKS - 1;

   8557  7 000075   200011 450100                    STZ     I2,,AUTO
         7 000076   000251 710000 7                  TRA     s:8601+1

      163     8558    5                   P2$ = P1$->OUT.SUBLK$(I2)->OUT.SUBLK$(0);

   8558  7 000077   200005 470500                    LDP0    P1$,,AUTO
         7 000100   200011 720100                    LXL0    I2,,AUTO
         7 000101   000003 471510                    LDP1    3,X0,PR0
         7 000102   100003 236100                    LDQ     3,,PR1
         7 000103   200006 756100                    STQ     P2$,,AUTO
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:24   

      164     8559    6                   DO CASE(P2$->OUT.CODE);

   8559  7 000104   200006 473500                    LDP3    P2$,,AUTO
         7 000105   300000 236100                    LDQ     0,,PR3
         7 000106   777777 376007                    ANQ     -1,DL
         7 000107   000011 136007                    SBLQ    9,DL
         7 000110   000002 116007                    CMPQ    2,DL
         7 000111   000113 602006 7                  TNC     s:8559+7,QL
         7 000112   000250 710000 7                  TRA     s:8601
         7 000113   000115 710000 7                  TRA     s:8563
         7 000114   000173 710000 7                  TRA     s:8582

      165     8560    6                      CASE(%UNX_NAME);

      166     8561                               /* Not used by NFS (at this time) */
      167     8562    6                      CASE(%UNX_GID);

      168     8563    6                          GID# = %YES#;

   8563  7 000115   400000 236003                    LDQ     -131072,DU
         7 000116   200020 756100                    STQ     GID#,,AUTO

      169     8564    6                          IF P2$->OUT.SUBLK$(0)->OUT.CODE ~= %UNX_ID_WILD

   8564  7 000117   300003 474500                    LDP4    3,,PR3
         7 000120   400000 721100                    LXL1    0,,PR4
         7 000121   000014 101003                    CMPX1   12,DU
         7 000122   000166 600000 7                  TZE     s:8579

      170     8565    7                           THEN DO;

      171     8566    7                             IF P2$->OUT.SUBLK$(0)->OUT.CODE = %UNX_ID_NEG

   8566  7 000123   000047 101003                    CMPX1   39,DU
         7 000124   000127 601000 7                  TNZ     s:8568

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:25   
      172     8567    7                              THEN P2$ = P2$->OUT.SUBLK$(0);

   8567  7 000125   300003 236100                    LDQ     3,,PR3
         7 000126   200006 756100                    STQ     P2$,,AUTO

      173     8568    7                             CALL CHARBIN(TMP,P2$->OUT.SUBLK$(0)->SYM.TEXT);

   8568  7 000127   200006 473500                    LDP3    P2$,,AUTO
         7 000130   300003 474500                    LDP4    3,,PR3
         7 000131   400004 236100                    LDQ     4,,PR4
         7 000132   000033 772000                    QRL     27
         7 000133   000000 621006                    EAX1    0,QL
         7 000134   000100 305540                    DTB
         7 000135   400004 230011                    NDSC9   4,,PR4                   cn=1,s=nosgn,sf=0,n=*X1
         7 000136   200012 000004                    NDSC9   TMP,,AUTO                cn=0,s=lsgnf,sf=0,n=4

      174     8569    7                             IF P2$->OUT.CODE = %UNX_ID_NEG

   8569  7 000137   300000 721100                    LXL1    0,,PR3
         7 000140   000047 101003                    CMPX1   39,DU
         7 000141   000144 601000 7                  TNZ     s:8571

      175     8570    7                              THEN TMP = -TMP;

   8570  7 000142   200012 335100                    LCA     TMP,,AUTO
         7 000143   200012 755100                    STA     TMP,,AUTO

      176     8571    7                             IF TMP < -2 OR TMP > 65533 THEN CALL RPT_ERR (
              8571                                      E_FUS_GIDTOOBIG);

   8571  7 000144   200012 235100                    LDA     TMP,,AUTO
         7 000145   000003 115000 8                  CMPA    3
         7 000146   000151 604000 7                  TMI     s:8571+5
         7 000147   177775 115007                    CMPA    65533,DL
         7 000150   000155 604400 7                  TMOZ    s:8575

   8571  7 000151   000004 236000 8                  LDQ     4
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:26   
         7 000152   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000153   000666 701000 7                  TSX1    RPT_ERR
         7 000154   000000 011000                    NOP     0

      177     8572              /*E* ERROR: FUS-%E$FUS_GIDTOOBIG-0
      178     8573                MESSAGE: The specified GID is out of range; it must be between -2 and 65533
      179     8574              */
      180     8575    7                             CALL XSL$HTONS( FU$SECREC.GID, TMP);

   8575  7 000155   200012 630500                    EPPR0   TMP,,AUTO
         7 000156   200027 450500                    STP0    @ERR+2,,AUTO
         7 000157   000005 236000 8                  LDQ     5
         7 000160   200026 756100                    STQ     @ERR+1,,AUTO
         7 000161   200026 630500                    EPPR0   @ERR+1,,AUTO
         7 000162   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000163   000000 701000 xent               TSX1    XSL$HTONS
         7 000164   000000 011000                    NOP     0

      181     8576                                   /* pack TMP's value as 8bit bytes in FU$SECREC.GID */
      182     8577    7                             END;

   8577  7 000165   000170 710000 7                  TRA     s:8580

      183     8578    6                          ELSE
      184     8579    6                             FU$SECREC.GID = 256;  /* WILDCARD - ? */

   8579  7 000166   000400 235007                    LDA     256,DL
         7 000167   000361 755000 1                  STA     FU$SECREC+1

      185     8580    6                          FU$NFSSECKEY.GID = FU$SECREC.GID;

   8580  7 000170   000361 720000 1                  LXL0    FU$SECREC+1
         7 000171   000261 740000 1                  STX0    FU$NFSSECKEY+1
         7 000172   000250 710000 7                  TRA     s:8601

      186     8581    6                      CASE(%UNX_UID);

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:27   
      187     8582    6                          UID# = %YES#;

   8582  7 000173   400000 236003                    LDQ     -131072,DU
         7 000174   200017 756100                    STQ     UID#,,AUTO

      188     8583    6                          IF P2$->OUT.SUBLK$(0)->OUT.CODE ~= %UNX_ID_WILD

   8583  7 000175   300003 474500                    LDP4    3,,PR3
         7 000176   400000 721100                    LXL1    0,,PR4
         7 000177   000014 101003                    CMPX1   12,DU
         7 000200   000244 600000 7                  TZE     s:8598

      189     8584    7                           THEN DO;

      190     8585    7                             IF P2$->OUT.SUBLK$(0)->OUT.CODE = %UNX_ID_NEG

   8585  7 000201   000047 101003                    CMPX1   39,DU
         7 000202   000205 601000 7                  TNZ     s:8587

      191     8586    7                              THEN P2$ = P2$->OUT.SUBLK$(0);

   8586  7 000203   300003 236100                    LDQ     3,,PR3
         7 000204   200006 756100                    STQ     P2$,,AUTO

      192     8587    7                             CALL CHARBIN(TMP,P2$->OUT.SUBLK$(0)->SYM.TEXT);

   8587  7 000205   200006 473500                    LDP3    P2$,,AUTO
         7 000206   300003 474500                    LDP4    3,,PR3
         7 000207   400004 236100                    LDQ     4,,PR4
         7 000210   000033 772000                    QRL     27
         7 000211   000000 621006                    EAX1    0,QL
         7 000212   000100 305540                    DTB
         7 000213   400004 230011                    NDSC9   4,,PR4                   cn=1,s=nosgn,sf=0,n=*X1
         7 000214   200012 000004                    NDSC9   TMP,,AUTO                cn=0,s=lsgnf,sf=0,n=4

      193     8588    7                             IF P2$->OUT.CODE = %UNX_ID_NEG

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:28   
   8588  7 000215   300000 721100                    LXL1    0,,PR3
         7 000216   000047 101003                    CMPX1   39,DU
         7 000217   000222 601000 7                  TNZ     s:8590

      194     8589    7                              THEN TMP = -TMP;

   8589  7 000220   200012 335100                    LCA     TMP,,AUTO
         7 000221   200012 755100                    STA     TMP,,AUTO

      195     8590    7                             IF TMP < -2 OR TMP > 65533 THEN CALL RPT_ERR (
              8590                                      E_FUS_UIDTOOBIG);

   8590  7 000222   200012 235100                    LDA     TMP,,AUTO
         7 000223   000003 115000 8                  CMPA    3
         7 000224   000227 604000 7                  TMI     s:8590+5
         7 000225   177775 115007                    CMPA    65533,DL
         7 000226   000233 604400 7                  TMOZ    s:8594

   8590  7 000227   000006 236000 8                  LDQ     6
         7 000230   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000231   000666 701000 7                  TSX1    RPT_ERR
         7 000232   000000 011000                    NOP     0

      196     8591              /*E* ERROR: FUS-%E$FUS_UIDTOOBIG-0
      197     8592                MESSAGE: The specified GID is out of range; it must be between -2 and 65533
      198     8593              */
      199     8594    7                             CALL XSL$HTONS( FU$SECREC.UID, TMP);

   8594  7 000233   200012 630500                    EPPR0   TMP,,AUTO
         7 000234   200027 450500                    STP0    @ERR+2,,AUTO
         7 000235   000007 236000 8                  LDQ     7
         7 000236   200026 756100                    STQ     @ERR+1,,AUTO
         7 000237   200026 630500                    EPPR0   @ERR+1,,AUTO
         7 000240   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000241   000000 701000 xent               TSX1    XSL$HTONS
         7 000242   000000 011000                    NOP     0

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:29   
      200     8595                                   /* pack TMP's value as 8bit bytes in FU$SECREC.GID */
      201     8596    7                             END;

   8596  7 000243   000246 710000 7                  TRA     s:8599

      202     8597    6                          ELSE
      203     8598    6                             FU$SECREC.UID = 256;  /* WILDCARD - ? */

   8598  7 000244   000400 235007                    LDA     256,DL
         7 000245   000360 755000 1                  STA     FU$SECREC

      204     8599    6                          FU$NFSSECKEY.UID = FU$SECREC.UID;

   8599  7 000246   000360 720000 1                  LXL0    FU$SECREC
         7 000247   000260 440000 1                  SXL0    FU$NFSSECKEY

      205     8600    6                   END; /* CASE */

      206     8601    5                END; /* DO I2 */

   8601  7 000250   200011 054100                    AOS     I2,,AUTO
         7 000251   200005 470500                    LDP0    P1$,,AUTO
         7 000252   000001 236100                    LDQ     1,,PR0
         7 000253   000022 772000                    QRL     18
         7 000254   200011 116100                    CMPQ    I2,,AUTO
         7 000255   000077 605400 7                  TPNZ    s:8558
         7 000256   000477 710000 7                  TRA     s:8672

      207     8602
      208     8603    4            CASE(%CP6ID);

      209     8604
      210     8605    4                CP6ID_CLAUSE# = %YES#;

   8605  7 000257   400000 236003                    LDQ     -131072,DU
         7 000260   200015 756100                    STQ     CP6ID_CLAUSE#,,AUTO

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:30   
      211     8606    4                P1$ = OUT.SUBLK$(I1)->OUT.SUBLK$(0);

   8606  7 000261   100003 236100                    LDQ     3,,PR1
         7 000262   200005 756100                    STQ     P1$,,AUTO

      212     8607    5                DO I2 = 0 TO P1$->OUT.NSUBLKS - 1;

   8607  7 000263   200011 450100                    STZ     I2,,AUTO
         7 000264   000322 710000 7                  TRA     s:8615+1

      213     8608    5                   P2$ = P1$->OUT.SUBLK$(I2);

   8608  7 000265   200005 470500                    LDP0    P1$,,AUTO
         7 000266   200011 720100                    LXL0    I2,,AUTO
         7 000267   000003 236110                    LDQ     3,X0,PR0
         7 000270   200006 756100                    STQ     P2$,,AUTO

      214     8609    6                   DO CASE(P2$->OUT.CODE);

   8609  7 000271   200006 471500                    LDP1    P2$,,AUTO
         7 000272   100000 236100                    LDQ     0,,PR1
         7 000273   777777 376007                    ANQ     -1,DL
         7 000274   000016 136007                    SBLQ    14,DL
         7 000275   000002 116007                    CMPQ    2,DL
         7 000276   000300 602006 7                  TNC     s:8609+7,QL
         7 000277   000321 710000 7                  TRA     s:8615
         7 000300   000312 710000 7                  TRA     s:8613
         7 000301   000302 710000 7                  TRA     s:8611

      215     8610    6                      CASE(%CP6_NAME);

      216     8611    6                          FU$SECREC.UNAME = P2$->OUT.SUBLK$(0)->SYM.TEXT;

   8611  7 000302   100003 473500                    LDP3    3,,PR1
         7 000303   300004 236100                    LDQ     4,,PR3
         7 000304   000033 772000                    QRL     27
         7 000305   000000 621006                    EAX1    0,QL
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:31   
         7 000306   040000 100540                    MLR     fill='040'O
         7 000307   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
         7 000310   000364 000014 1                  ADSC9   FU$SECREC+4              cn=0,n=12
         7 000311   000321 710000 7                  TRA     s:8615

      217     8612    6                      CASE(%CP6_ACCT);

      218     8613    6                          FU$SECREC.ACCN = P2$->OUT.SUBLK$(0)->SYM.TEXT;

   8613  7 000312   100003 473500                    LDP3    3,,PR1
         7 000313   300004 236100                    LDQ     4,,PR3
         7 000314   000033 772000                    QRL     27
         7 000315   000000 621006                    EAX1    0,QL
         7 000316   040000 100540                    MLR     fill='040'O
         7 000317   300004 200011                    ADSC9   4,,PR3                   cn=1,n=*X1
         7 000320   000362 000010 1                  ADSC9   FU$SECREC+2              cn=0,n=8

      219     8614    6                   END; /* CASE */

      220     8615    5                END; /* DO I2 */

   8615  7 000321   200011 054100                    AOS     I2,,AUTO
         7 000322   200005 470500                    LDP0    P1$,,AUTO
         7 000323   000001 236100                    LDQ     1,,PR0
         7 000324   000022 772000                    QRL     18
         7 000325   200011 116100                    CMPQ    I2,,AUTO
         7 000326   000265 605400 7                  TPNZ    s:8608
         7 000327   000477 710000 7                  TRA     s:8672

      221     8616
      222     8617    4            CASE(%HOSTS);

      223     8618
      224     8619    4                HOST_CLAUSE# = %YES#;

   8619  7 000330   400000 236003                    LDQ     -131072,DU
         7 000331   200016 756100                    STQ     HOST_CLAUSE#,,AUTO
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:32   

      225     8620    4                P1$ = OUT.SUBLK$(I1)->OUT.SUBLK$(0)->OUT.SUBLK$(0);

   8620  7 000332   100003 473500                    LDP3    3,,PR1
         7 000333   300003 236100                    LDQ     3,,PR3
         7 000334   200005 756100                    STQ     P1$,,AUTO

      226     8621    4                IF P1$->OUT.SUBLK$(0)->OUT.CODE ~= %HOST_WILD THEN

   8621  7 000335   200005 474500                    LDP4    P1$,,AUTO
         7 000336   400003 475500                    LDP5    3,,PR4
         7 000337   500000 722100                    LXL2    0,,PR5
         7 000340   000021 102003                    CMPX2   17,DU
         7 000341   000477 600000 7                  TZE     s:8672

      227     8622                        /*
      228     8623                        There are 1 or several hosts listed, we'll process
      229     8624                        them later when we have the rest of the user info.
      230     8625                        */
      231     8626    4                   HOST$ = P1$;

   8626  7 000342   000425 756000 1                  STQ     HOST$
         7 000343   000477 710000 7                  TRA     s:8672

      232     8627
      233     8628    4            CASE(%NFS);

      234     8629
      235     8630    4                NFS_CLAUSE# = %YES#;

   8630  7 000344   400000 236003                    LDQ     -131072,DU
         7 000345   200013 756100                    STQ     NFS_CLAUSE#,,AUTO

      236     8631    4                P1$ = OUT.SUBLK$(I1)->OUT.SUBLK$(0);

   8631  7 000346   100003 236100                    LDQ     3,,PR1
         7 000347   200005 756100                    STQ     P1$,,AUTO
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:33   

      237     8632    5                DO I2 = 0 TO P1$->OUT.NSUBLKS - 1;

   8632  7 000350   200011 450100                    STZ     I2,,AUTO
         7 000351   000472 710000 7                  TRA     s:8669+1

      238     8633    5                   P2$ = P1$->OUT.SUBLK$(I2)->OUT.SUBLK$(0);

   8633  7 000352   200005 470500                    LDP0    P1$,,AUTO
         7 000353   200011 720100                    LXL0    I2,,AUTO
         7 000354   000003 471510                    LDP1    3,X0,PR0
         7 000355   100003 236100                    LDQ     3,,PR1
         7 000356   200006 756100                    STQ     P2$,,AUTO

      239     8634    6                   DO CASE(P2$->OUT.CODE);

   8634  7 000357   200006 473500                    LDP3    P2$,,AUTO
         7 000360   300000 236100                    LDQ     0,,PR3
         7 000361   777777 376007                    ANQ     -1,DL
         7 000362   000040 136007                    SBLQ    32,DL
         7 000363   000007 116007                    CMPQ    7,DL
         7 000364   000366 602006 7                  TNC     s:8634+7,QL
         7 000365   000471 710000 7                  TRA     s:8669
         7 000366   000375 710000 7                  TRA     s:8637
         7 000367   000430 710000 7                  TRA     s:8652
         7 000370   000406 710000 7                  TRA     s:8642
         7 000371   000417 710000 7                  TRA     s:8647
         7 000372   000463 710000 7                  TRA     s:8667
         7 000373   000441 710000 7                  TRA     s:8657
         7 000374   000452 710000 7                  TRA     s:8662

      240     8635    6                      CASE(%SECCHK);

      241     8636                            /* This needs a lot more work. */
      242     8637    6                          IF (P2$->OUT.NSUBLKS = 0)

   8637  7 000375   300001 221100                    LDX1    1,,PR3
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:34   
         7 000376   000403 600000 7                  TZE     s:8640
         7 000377   300003 474500                    LDP4    3,,PR3
         7 000400   400000 722100                    LXL2    0,,PR4
         7 000401   000001 102003                    CMPX2   1,DU
         7 000402   000471 601000 7                  TNZ     s:8669

      243     8638    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      244     8639    6                          THEN
      245     8640    6                             FU$SECREC.SECCHK = %YES#;

   8640  7 000403   400000 236003                    LDQ     -131072,DU
         7 000404   000367 256000 1                  ORSQ    FU$SECREC+7
         7 000405   000471 710000 7                  TRA     s:8669

      246     8641    6                      CASE(%FMSEC);

      247     8642    6                          IF (P2$->OUT.NSUBLKS = 0)

   8642  7 000406   300001 221100                    LDX1    1,,PR3
         7 000407   000414 600000 7                  TZE     s:8645
         7 000410   300003 474500                    LDP4    3,,PR3
         7 000411   400000 722100                    LXL2    0,,PR4
         7 000412   000001 102003                    CMPX2   1,DU
         7 000413   000471 601000 7                  TNZ     s:8669

      248     8643    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      249     8644    6                          THEN
      250     8645    6                             FU$SECREC.FMSEC = %YES#;

   8645  7 000414   100000 236003                    LDQ     32768,DU
         7 000415   000367 256000 1                  ORSQ    FU$SECREC+7
         7 000416   000471 710000 7                  TRA     s:8669

      251     8646    6                      CASE(%FMREAD);

      252     8647    6                          IF (P2$->OUT.NSUBLKS = 0)

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:35   
   8647  7 000417   300001 221100                    LDX1    1,,PR3
         7 000420   000425 600000 7                  TZE     s:8650
         7 000421   300003 474500                    LDP4    3,,PR3
         7 000422   400000 722100                    LXL2    0,,PR4
         7 000423   000001 102003                    CMPX2   1,DU
         7 000424   000471 601000 7                  TNZ     s:8669

      253     8648    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      254     8649    6                          THEN
      255     8650    6                             FU$SECREC.FMREAD = %YES#;

   8650  7 000425   020000 236003                    LDQ     8192,DU
         7 000426   000367 256000 1                  ORSQ    FU$SECREC+7
         7 000427   000471 710000 7                  TRA     s:8669

      256     8651    6                      CASE(%FMBLK);

      257     8652    6                          IF (P2$->OUT.NSUBLKS = 0)

   8652  7 000430   300001 221100                    LDX1    1,,PR3
         7 000431   000436 600000 7                  TZE     s:8655
         7 000432   300003 474500                    LDP4    3,,PR3
         7 000433   400000 722100                    LXL2    0,,PR4
         7 000434   000001 102003                    CMPX2   1,DU
         7 000435   000471 601000 7                  TNZ     s:8669

      258     8653    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      259     8654    6                          THEN
      260     8655    6                             FU$SECREC.FMBLK = %YES#;

   8655  7 000436   200000 236003                    LDQ     65536,DU
         7 000437   000367 256000 1                  ORSQ    FU$SECREC+7
         7 000440   000471 710000 7                  TRA     s:8669

      261     8656    6                      CASE(%MOUNT);

      262     8657    6                          IF (P2$->OUT.NSUBLKS = 0)
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:36   

   8657  7 000441   300001 221100                    LDX1    1,,PR3
         7 000442   000447 600000 7                  TZE     s:8660
         7 000443   300003 474500                    LDP4    3,,PR3
         7 000444   400000 722100                    LXL2    0,,PR4
         7 000445   000001 102003                    CMPX2   1,DU
         7 000446   000471 601000 7                  TNZ     s:8669

      263     8658    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      264     8659    6                          THEN
      265     8660    6                             FU$SECREC.MOUNT = %YES#;

   8660  7 000447   040000 236003                    LDQ     16384,DU
         7 000450   000367 256000 1                  ORSQ    FU$SECREC+7
         7 000451   000471 710000 7                  TRA     s:8669

      266     8661    6                      CASE(%REJECT);

      267     8662    6                          IF (P2$->OUT.NSUBLKS = 0)

   8662  7 000452   300001 221100                    LDX1    1,,PR3
         7 000453   000460 600000 7                  TZE     s:8665
         7 000454   300003 474500                    LDP4    3,,PR3
         7 000455   400000 722100                    LXL2    0,,PR4
         7 000456   000001 102003                    CMPX2   1,DU
         7 000457   000471 601000 7                  TNZ     s:8669

      268     8663    6                          OR (P2$->OUT.SUBLK$(0)->OUT.CODE = %YES)
      269     8664    6                          THEN
      270     8665    6                             FU$SECREC.REJECT = %YES#;

   8665  7 000460   002000 236003                    LDQ     1024,DU
         7 000461   000367 256000 1                  ORSQ    FU$SECREC+7
         7 000462   000471 710000 7                  TRA     s:8669

      271     8666    6                      CASE(%TOPLVL);

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:37   
      272     8667    6                          FU$SECREC.TOPLVL = P2$->OUT.SUBLK$(0)->OUT.CODE;

   8667  7 000463   300003 474500                    LDP4    3,,PR3
         7 000464   400000 236100                    LDQ     0,,PR4
         7 000465   000035 736000                    QLS     29
         7 000466   000367 676000 1                  ERQ     FU$SECREC+7
         7 000467   014000 376003                    ANQ     6144,DU
         7 000470   000367 656000 1                  ERSQ    FU$SECREC+7

      273     8668    6                   END; /* CASE */

      274     8669    5                END; /* DO I2 */

   8669  7 000471   200011 054100                    AOS     I2,,AUTO
         7 000472   200005 470500                    LDP0    P1$,,AUTO
         7 000473   000001 236100                    LDQ     1,,PR0
         7 000474   000022 772000                    QRL     18
         7 000475   200011 116100                    CMPQ    I2,,AUTO
         7 000476   000352 605400 7                  TPNZ    s:8633

      275     8670
      276     8671    4         END; /* CASE */

      277     8672    3      END; /* DO I */

   8672  7 000477   200010 054100                    AOS     I1,,AUTO
         7 000500   200003 470500                    LDP0    OUT$,,AUTO
         7 000501   000001 236100                    LDQ     1,,PR0
         7 000502   000022 772000                    QRL     18
         7 000503   200010 116100                    CMPQ    I1,,AUTO
         7 000504   000055 605400 7                  TPNZ    s:8553

      278     8673
      279     8674    3      IF OUT.CODE < %JUNK THEN DO;

   8674  7 000505   000000 720100                    LXL0    0,,PR0
         7 000506   000005 100003                    CMPX0   5,DU
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:38   
         7 000507   000011 603000 7                  TRC     s:8533

      280     8675    3         CALL NFSCHECKER;

   8675  7 000510   000600 701000 7                  TSX1    NFSCHECKER
         7 000511   000000 011000                    NOP     0

      281     8676    4         IF NOT ERROR# THEN DO;

   8676  7 000512   200021 234100                    SZN     ERROR#,,AUTO
         7 000513   000011 604000 7                  TMI     s:8533

      282     8677    4            IF HOST$ = ADDR(NIL) THEN /* host name is ? (wildcarded) */

   8677  7 000514   000425 236000 1                  LDQ     HOST$
         7 000515   000001 116000 xsym               CMPQ    B_VECTNIL+1
         7 000516   000523 601000 7                  TNZ     s:8680

      283     8678    4               CALL M$WRITE (WRITE_NFSSEC);

   8678  7 000517   000244 630400 1                  EPPR0   WRITE_NFSSEC
         7 000520   040001 713400                    CLIMB   write
         7 000521   401400 401760                    pmme    nvectors=4
         7 000522   000011 710000 7                  TRA     s:8533

      284     8679    4            ELSE  /* loop through the list of host names */
      285     8680    5               DO I1 = 0 TO HOST$->OUT.NSUBLKS - 1;

   8680  7 000523   200010 450100                    STZ     I1,,AUTO
         7 000524   000572 710000 7                  TRA     s:8695+1

      286     8681    5                  FU$NFSSECKEY.NAME = HOST$->OUT.SUBLK$(I1)->SYM.TEXT;

   8681  7 000525   000425 470400 1                  LDP0    HOST$
         7 000526   200010 720100                    LXL0    I1,,AUTO
         7 000527   000003 471510                    LDP1    3,X0,PR0
         7 000530   100004 236100                    LDQ     4,,PR1
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:39   
         7 000531   000033 772000                    QRL     27
         7 000532   000000 621006                    EAX1    0,QL
         7 000533   040000 100540                    MLR     fill='040'O
         7 000534   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
         7 000535   000261 400371 1                  ADSC9   FU$NFSSECKEY+1           cn=2,n=249

      287     8682    5                  FU$NFSSECKEY.L = 5 + HOST$->OUT.SUBLK$(I1)->SYM.COUNT;

   8682  7 000536   000003 471510                    LDP1    3,X0,PR0
         7 000537   100004 236100                    LDQ     4,,PR1
         7 000540   000033 772000                    QRL     27
         7 000541   000005 036007                    ADLQ    5,DL
         7 000542   000033 736000                    QLS     27
         7 000543   000260 552040 1                  STBQ    FU$NFSSECKEY,'40'O

      288     8683    5                  SUBSTR(FU$NFSSECKEY.NAME,FU$NFSSECKEY.L,1) = BINASC(0);

   8683  7 000544   000260 236000 1                  LDQ     FU$NFSSECKEY
         7 000545   000033 772000                    QRL     27
         7 000546   040006 100400                    MLR     fill='040'O
         7 000547   000010 000001 8                  ADSC9   8                        cn=0,n=1
         7 000550   000261 400001 1                  ADSC9   FU$NFSSECKEY+1,Q         cn=2,n=1

      289     8684    5                  CALL XSL$GETHOSTBYNAME (HOSTENT$, FU$NFSSECKEY.NAME)

   8684  7 000551   000011 236000 8                  LDQ     9
         7 000552   200027 756100                    STQ     @ERR+2,,AUTO
         7 000553   200007 631500                    EPPR1   HOSTENT$,,AUTO
         7 000554   200026 451500                    STP1    @ERR+1,,AUTO
         7 000555   200026 630500                    EPPR0   @ERR+1,,AUTO
         7 000556   000020 631400 xsym               EPPR1   B_VECTNIL+16
         7 000557   000000 701000 xent               TSX1    XSL$GETHOSTBYNAME
         7 000560   000565 702000 7                  TSX2    s:8693

      290     8685    6                       WHENRETURN DO;

      291     8686    6                          CALL M$WRITE (WRITE_NFSSEC);
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:40   

   8686  7 000561   000244 630400 1                  EPPR0   WRITE_NFSSEC
         7 000562   040001 713400                    CLIMB   write
         7 000563   401400 401760                    pmme    nvectors=4

      292     8687    6                       END;

   8687  7 000564   000571 710000 7                  TRA     s:8695

      293     8688    6                       WHENALTRETURN DO;

      294     8689                    /*E* ERROR: FUS-%E$FUS_NOHOST-0
      295     8690                         MESSAGE:  Specified host not found; no NFS authorization
      296     8691                                   record created.
      297     8692                    */
      298     8693    6                          CALL RPT_ERR (E_FUS_NOHOST);

   8693  7 000565   000012 236000 8                  LDQ     10
         7 000566   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000567   000666 701000 7                  TSX1    RPT_ERR
         7 000570   000000 011000                    NOP     0

      299     8694    6                       END;

      300     8695    5                  END; /* DO I1 */

   8695  7 000571   200010 054100                    AOS     I1,,AUTO
         7 000572   000425 470400 1                  LDP0    HOST$
         7 000573   000001 236100                    LDQ     1,,PR0
         7 000574   000022 772000                    QRL     18
         7 000575   200010 116100                    CMPQ    I1,,AUTO
         7 000576   000525 605400 7                  TPNZ    s:8681

      301     8696    4            END; /* IF NOT ERROR# */

      302     8697    3         END; /* IF OUT.CODE */

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:41   
      303     8698    2      END; /* DO FOREVER */

   8698  7 000577   000011 710000 7                  TRA     s:8533

      304     8699
      305     8700        %EJECT;
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:42   
      306     8701        /*I*  NAME:    NFSCHECKER
      307     8702              Purpose: To verify that the information in the data base entry is valid.
      308     8703                       It does not check the size of GID or UID, or HOST entries -
      309     8704                       that's the caller's responsibility.  The rules for an entry are:
      310     8705
      311     8706                    1. A CP6ID clause is required.
      312     8707                    2. CP-6 account and name are both required.
      313     8708                    3. A UNIXID clause is required and must contain both uid and gid.
      314     8709                       The name field is not used by NFS (at this time).
      315     8710                    4. HOST clause is required and must by a valid system or '?'.
      316     8711                  ? 5. If uid=? and gid=?, HOST must not be ?
      317     8712                    6. NFS clause is required for a record to be written to :nfssec
      318     8713        */
      319     8714    1   NFSCHECKER: PROC;

   8714  7 000600   200022 741300       NFSCHECKER   STX1  ! ERROR#+1,,AUTO

      320     8715
      321     8716    2      IF NOT UNIXID_CLAUSE# THEN CALL RPT_ERR (E_FUS_NOUNIX);

   8716  7 000601   200014 234100                    SZN     UNIXID_CLAUSE#,,AUTO
         7 000602   000607 604000 7                  TMI     s:8721

   8716  7 000603   000013 236000 8                  LDQ     11
         7 000604   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000605   000666 701000 7                  TSX1    RPT_ERR
         7 000606   000000 011000                    NOP     0

      322     8717              /*E* ERROR: FUS-%E$FUS_NOUNIX-0
      323     8718                   MESSAGE: Required clause UNIXID is missing.
      324     8719              */
      325     8720
      326     8721    2      IF NOT UID# THEN CALL RPT_ERR (E_FUS_NOUID);

   8721  7 000607   200017 234100                    SZN     UID#,,AUTO
         7 000610   000615 604000 7                  TMI     s:8727

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:43   
   8721  7 000611   000014 236000 8                  LDQ     12
         7 000612   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000613   000666 701000 7                  TSX1    RPT_ERR
         7 000614   000000 011000                    NOP     0

      327     8722              /*E* ERROR: FUS-%E$FUS_NOUID-0
      328     8723                   MESSAGE:  No Unix uid found for this user; no NFS
      329     8724                             authorization record created.
      330     8725              */
      331     8726
      332     8727    2      IF NOT GID# THEN CALL RPT_ERR (E_FUS_NOGID);

   8727  7 000615   200020 234100                    SZN     GID#,,AUTO
         7 000616   000623 604000 7                  TMI     s:8733

   8727  7 000617   000015 236000 8                  LDQ     13
         7 000620   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000621   000666 701000 7                  TSX1    RPT_ERR
         7 000622   000000 011000                    NOP     0

      333     8728              /*E* ERROR: FUS-%E$FUS_NOGID-0
      334     8729                   MESSAGE:  No Unix gid found for this user; no NFS
      335     8730                             authorization record created.
      336     8731              */
      337     8732
      338     8733    2      IF NOT CP6ID_CLAUSE# THEN CALL RPT_ERR (E_FUS_NOCP6);

   8733  7 000623   200015 234100                    SZN     CP6ID_CLAUSE#,,AUTO
         7 000624   000631 604000 7                  TMI     s:8738

   8733  7 000625   000016 236000 8                  LDQ     14
         7 000626   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000627   000666 701000 7                  TSX1    RPT_ERR
         7 000630   000000 011000                    NOP     0

      339     8734              /*E* ERROR: FUS-%E$FUS_NOCP6-0
      340     8735                   MESSAGE: Required clause CP6ID is missing.
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:44   
      341     8736              */
      342     8737
      343     8738    2      IF FU$SECREC.ACCN = ' ' THEN CALL RPT_ERR (E_FUS_NOACCT);

   8738  7 000631   000362 237000 1                  LDAQ    FU$SECREC+2
         7 000632   000020 117000 8                  CMPAQ   16
         7 000633   000640 601000 7                  TNZ     s:8744

   8738  7 000634   000022 236000 8                  LDQ     18
         7 000635   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000636   000666 701000 7                  TSX1    RPT_ERR
         7 000637   000000 011000                    NOP     0

      344     8739              /*E* ERROR: FUS-%E$FUS_NOACCT-0
      345     8740                   MESSAGE:  No CP-6 account found for this user; no NFS
      346     8741                             authorization record created.
      347     8742              */
      348     8743
      349     8744    2      IF FU$SECREC.UNAME = ' ' THEN CALL RPT_ERR (E_FUS_NONAME);

   8744  7 000640   040000 106400                    CMPC    fill='040'O
         7 000641   000364 000014 1                  ADSC9   FU$SECREC+4              cn=0,n=12
         7 000642   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         7 000643   000650 601000 7                  TNZ     s:8750

   8744  7 000644   000023 236000 8                  LDQ     19
         7 000645   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000646   000666 701000 7                  TSX1    RPT_ERR
         7 000647   000000 011000                    NOP     0

      350     8745              /*E* ERROR: FUS-%E$FUS_NONAME-0
      351     8746                   MESSAGE:  No CP-6 user name found for this user; no NFS
      352     8747                             authorization record created.
      353     8748              */
      354     8749
      355     8750    2      IF NOT HOST_CLAUSE# THEN CALL RPT_ERR (E_FUS_NOHSTCL);

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:45   
   8750  7 000650   200016 234100                    SZN     HOST_CLAUSE#,,AUTO
         7 000651   000656 604000 7                  TMI     s:8755

   8750  7 000652   000024 236000 8                  LDQ     20
         7 000653   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000654   000666 701000 7                  TSX1    RPT_ERR
         7 000655   000000 011000                    NOP     0

      356     8751              /*E* ERROR: FUS-%E$FUS_NOHSTCL-0
      357     8752                   MESSAGE: Required clause HOST is missing.
      358     8753              */
      359     8754
      360     8755    2      IF NOT NFS_CLAUSE# THEN CALL RPT_ERR (E_FUS_NONFS);

   8755  7 000656   200013 234100                    SZN     NFS_CLAUSE#,,AUTO
         7 000657   000664 604000 7                  TMI     s:8761

   8755  7 000660   000025 236000 8                  LDQ     21
         7 000661   200025 756100                    STQ     ERROR#+4,,AUTO
         7 000662   000666 701000 7                  TSX1    RPT_ERR
         7 000663   000000 011000                    NOP     0

      361     8756              /*E* ERROR: FUS-%E$FUS_NONFS-0
      362     8757                   MESSAGE:  No NFS clause found for this user; no NFS
      363     8758                             authorization record created.
      364     8759              */
      365     8760
      366     8761    2   END NFSCHECKER;

   8761  7 000664   200022 221300                    LDX1  ! ERROR#+1,,AUTO
         7 000665   000001 702211                    TSX2  ! 1,X1

      367     8762
      368     8763        /*I*  NAME:    RPT_ERR
      369     8764              Purpose: Print out the passed error, and set the ERROR# flag.
      370     8765              Inputs:  ERR - a standard CP/6 error code
      371     8766        */
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:46   
      372     8767    1   RPT_ERR: PROC (ERR);

   8767  7 000666   200024 741300       RPT_ERR      STX1  ! ERROR#+3,,AUTO

      373     8768    2   DCL ERR BIT(36) ALIGNED;
      374     8769
      375     8770    2      FUS_ERRMSG.CODE_ = VECTOR(ERR);

   8770  7 000667   777640 235007                    LDA     -96,DL
         7 000670   200025 236100                    LDQ     @ERR,,AUTO
         7 000671   000372 757000 1                  STAQ    FUS_ERRMSG+2

      376     8771    2      CALL M$ERRMSG (FUS_ERRMSG);

   8771  7 000672   000370 630400 1                  EPPR0   FUS_ERRMSG
         7 000673   020000 713400                    CLIMB   8192
         7 000674   405000 401760                    pmme    nvectors=11

      377     8772    2      ERROR# = %YES#;

   8772  7 000675   400000 236003                    LDQ     -131072,DU
         7 000676   200021 756100                    STQ     ERROR#,,AUTO

      378     8773
      379     8774    2   END RPT_ERR;

   8774  7 000677   200024 221300                    LDX1  ! ERROR#+3,,AUTO
         7 000700   000001 702211                    TSX2  ! 1,X1
      380     8775    1   END FUS$SECMNGR;

PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:47   
--  Include file information  --

   XSL_SOCKET_E.:LIBRARY  is referenced.
   XSL_SOCKET_M.:LIBRARY  is referenced.
   XSL_PERR_C.:LIBRARY  is referenced.
   XUG_ENTRY.:LIBRARY  cannot be made into a system file and is referenced.
   XU_MACRO_C.:LIBRARY  is referenced.
   FUS_DATA_C.:FUA2TOU  is referenced.
   FU_PERR_C.:FUA2TOU  is referenced.
   FU_NFS_M.:FUA2TOU  is referenced.
   B_ERRORS_C.:LIBRARY  is referenced.
   CP_6_SUBS.:LIBRARY  is referenced.
   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FUS$SECMNGR.
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:48   

 **** Variables and constants ****

  ****  Section 001  Data  FUS$SECMNGR

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   226-0-0/d STRC(504)   r     1 ETCUSERS                 426-0-0/c CHAR(255)   r     1 ETCUSERS_BUF
   260-0-0/w STRC(2295)  r     1 FU$NFSSECKEY             360-0-0/w STRC(288)   r     1 FU$SECREC
   526-0-0/c CHAR(255)   r     1 FUS_ERRBUF               422-0-0/c STRC(90)    r     1 FUS_ERRFID
   370-0-0/d STRC(936)   r     1 FUS_ERRMSG               425-0-0/w PTR         r     1 HOST$
   134-0-0/d STRC(2088)  r     1 OPEN_NFSSEC                0-0-0/w STRC(504)   r     1 P_PCB
   244-0-0/d STRC(432)   r     1 WRITE_NFSSEC              62-0-0/d STRC(1512)  r     1 XUG_GETCMD
    16-0-0/d STRC(1296)  r     1 XUG_INIT

  ****  Section 002 RoData FUS$SECMNGR

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   122-0-0/w STRC        r     1 E_FUS_GIDTOOBIG          112-0-0/w STRC        r     1 E_FUS_NOACCT
   117-0-0/w STRC        r     1 E_FUS_NOCP6              111-0-0/w STRC        r     1 E_FUS_NOGID
   114-0-0/w STRC        r     1 E_FUS_NOHOST             116-0-0/w STRC        r     1 E_FUS_NOHSTCL
   113-0-0/w STRC        r     1 E_FUS_NONAME             115-0-0/w STRC        r     1 E_FUS_NONFS
   110-0-0/w STRC        r     1 E_FUS_NOUID              120-0-0/w STRC        r     1 E_FUS_NOUNIX
   121-0-0/w STRC        r     1 E_FUS_UIDTOOBIG            0-0-0/w STRC(2295)  r     1 FU$NFSKEY_CONST
   100-0-0/w STRC(288)   r     1 FU$SECREC_CONST

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    25-0-0/w PTR         r     1 @ERR                      15-0-0/b BIT         r     1 CP6ID_CLAUSE#
    *0-0-0/w BIT         r     1 ERR                       21-0-0/b BIT         r     1 ERROR#
    20-0-0/b BIT         r     1 GID#                       7-0-0/w PTR         r     1 HOSTENT$
    16-0-0/b BIT         r     1 HOST_CLAUSE#              10-0-0/w SBIN        r     1 I1
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:49   
    11-0-0/w SBIN        r     1 I2                        13-0-0/b BIT         r     1 NFS_CLAUSE#
     3-0-0/w PTR         r     1 OUT$                       5-0-0/w PTR         r     1 P1$
     6-0-0/w PTR         r     1 P2$                        4-0-0/w PTR         r     1 SYM$
    12-0-0/w SBIN        r     1 TMP                       17-0-0/b BIT         r     1 UID#
    14-0-0/b BIT         r     1 UNIXID_CLAUSE#

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 FUS_NODES

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$OU                       0-0-0N  NULL        r     1 M$SI
     0-0-0/w STRC(144)   r     1 OUT                        0-0-0/w ASTR(153)   r     1 SYM


   Procedure FUS$SECMNGR requires 449 words for executable code.
   Procedure FUS$SECMNGR requires 24 words of local(AUTO) storage.

    No errors detected in file FUS$SECMNGR.:FUA2TSI    .
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:50   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:51   
          MINI XREF LISTING

CP6ID_CLAUSE#
      8521**DCL      8537<<ASSIGN   8605<<ASSIGN   8733>>IF
ERR IN PROCEDURE RPT_ERR
      8768**DCL      8767--PROC     8770--ASSIGN
ERROR#
      8525**DCL      8541<<ASSIGN   8676>>IF       8772<<ASSIGN
ETCUSERS.STATION_
      7791**DCL      7792--REDEF
ETCUSERS.V
      7792**DCL      7788--DCLINIT
ETCUSERS.V.DVBYTE.REREAD#
      7803**DCL      7803--REDEF
ETCUSERS.V.INDX#
      7801**DCL      7801--REDEF
ETCUSERS_BUF
      8513**DCL      7790--DCLINIT  7791--DCLINIT
E_FUS_GIDTOOBIG
      8467**DCL      8571<>CALL
E_FUS_NOACCT
      8099**DCL      8738<>CALL
E_FUS_NOCP6
      8329**DCL      8733<>CALL
E_FUS_NOGID
      8053**DCL      8727<>CALL
E_FUS_NOHOST
      8191**DCL      8693<>CALL
E_FUS_NOHSTCL
      8283**DCL      8750<>CALL
E_FUS_NONAME
      8145**DCL      8744<>CALL
E_FUS_NONFS
      8237**DCL      8755<>CALL
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:52   
E_FUS_NOUID
      8007**DCL      8721<>CALL
E_FUS_NOUNIX
      8375**DCL      8716<>CALL
E_FUS_UIDTOOBIG
      8421**DCL      8590<>CALL
FU$NFSKEY_CONST
      7880**DCL      8534>>ASSIGN
FU$NFSSECKEY
      7859**DCL      7830--DCLINIT  8534<<ASSIGN
FU$NFSSECKEY.GID
      7863**DCL      8580<<ASSIGN
FU$NFSSECKEY.L
      7863**DCL      8682<<ASSIGN   8683>>ASSIGN
FU$NFSSECKEY.NAME
      7864**DCL      8681<<ASSIGN   8683<<ASSIGN   8684<>CALL
FU$NFSSECKEY.UID
      7863**DCL      8599<<ASSIGN
FU$SECREC
      7901**DCL      7831--DCLINIT  7832--DCLINIT  8533<<ASSIGN
FU$SECREC.ACCN
      7905**DCL      8613<<ASSIGN   8738>>IF
FU$SECREC.FMBLK
      7906**DCL      8655<<ASSIGN
FU$SECREC.FMREAD
      7907**DCL      8650<<ASSIGN
FU$SECREC.FMSEC
      7906**DCL      8645<<ASSIGN
FU$SECREC.GID
      7905**DCL      8575<>CALL     8579<<ASSIGN   8580>>ASSIGN
FU$SECREC.MOUNT
      7907**DCL      8660<<ASSIGN
FU$SECREC.REJECT
      7907**DCL      8665<<ASSIGN
FU$SECREC.SECCHK
      7906**DCL      8640<<ASSIGN
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:53   
FU$SECREC.TOPLVL
      7907**DCL      8667<<ASSIGN
FU$SECREC.UID
      7905**DCL      8594<>CALL     8598<<ASSIGN   8599>>ASSIGN
FU$SECREC.UNAME
      7905**DCL      8611<<ASSIGN   8744>>IF
FU$SECREC_CONST
      7924**DCL      8533>>ASSIGN
FUS_ERRBUF
      8514**DCL      7952--DCLINIT
FUS_ERRFID
      7992**DCL      7952--DCLINIT
FUS_ERRMSG
      7951**DCL      8771<>CALL
FUS_ERRMSG.CODE_
      7951**DCL      8770<<ASSIGN
FUS_ERRMSG.V
      7955**DCL      7951--DCLINIT
FUS_NODES
      8511**DCL      6582--DCLINIT  7268--DCLINIT
GID#
      8524**DCL      8540<<ASSIGN   8563<<ASSIGN   8727>>IF
HOST$
      8508**DCL      8542<<ASSIGN   8626<<ASSIGN   8677>>IF       8680>>DOINDEX  8681>>ASSIGN   8681>>ASSIGN
      8682>>ASSIGN
HOSTENT$
      8509**DCL      7609--IMP-PTR  8684<>CALL
HOST_CLAUSE#
      8522**DCL      8536<<ASSIGN   8619<<ASSIGN   8750>>IF
I1
      8516**DCL      8552<<DOINDEX  8553>>DOCASE   8556>>ASSIGN   8606>>ASSIGN   8620>>ASSIGN   8631>>ASSIGN
      8680<<DOINDEX  8681>>ASSIGN   8681>>ASSIGN   8682>>ASSIGN
I2
      8517**DCL      8557<<DOINDEX  8558>>ASSIGN   8607<<DOINDEX  8608>>ASSIGN   8632<<DOINDEX  8633>>ASSIGN
M$ERRMSG
       107**DCL-ENT  8771--CALL
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:54   
M$EXIT
        56**DCL-ENT  8546--CALL
M$OPEN
        44**DCL-ENT  8529--CALL
M$WRITE
        45**DCL-ENT  8678--CALL     8686--CALL
M$XXX
        56**DCL-ENT  8548--CALL
NFSCHECKER
      8714**PROC     8675--CALL
NFS_CLAUSE#
      8519**DCL      8535<<ASSIGN   8630<<ASSIGN   8755>>IF
OPEN_NFSSEC
      7724**DCL      8529<>CALL
OPEN_NFSSEC.ACSVEH_
      7726**DCL      7727--REDEF
OPEN_NFSSEC.ALTKEYS_
      7732**DCL      7733--REDEF    7733--REDEF
OPEN_NFSSEC.HDR_
      7731**DCL      7732--REDEF
OPEN_NFSSEC.TAB_
      7730**DCL      7731--REDEF
OPEN_NFSSEC.UHL_
      7724**DCL      7725--REDEF    7725--REDEF
OPEN_NFSSEC.V
      7733**DCL      7724--DCLINIT
OPEN_NFSSEC.V.FSN#
      7764**DCL      7764--REDEF    7764--REDEF
OPEN_NFSSEC.WSN_
      7730**DCL      7730--REDEF
OUT.CODE
      6772**DCL      8553>>DOCASE   8559>>DOCASE   8564>>IF       8566>>IF       8569>>IF       8583>>IF
      8585>>IF       8588>>IF       8609>>DOCASE   8621>>IF       8634>>DOCASE   8637>>IF       8642>>IF
      8647>>IF       8652>>IF       8657>>IF       8662>>IF       8667>>ASSIGN   8674>>IF
OUT.NSUBLKS
      6776**DCL      8552>>DOINDEX  8557>>DOINDEX  8607>>DOINDEX  8632>>DOINDEX  8637>>IF       8642>>IF
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:55   
      8647>>IF       8652>>IF       8657>>IF       8662>>IF       8680>>DOINDEX
OUT.SUBLK$
      6797**DCL      8553>>DOCASE   8556>>ASSIGN   8556>>ASSIGN   8558>>ASSIGN   8558>>ASSIGN   8564>>IF
      8566>>IF       8567>>ASSIGN   8568>>CALLBLT  8568>>CALLBLT  8583>>IF       8585>>IF       8586>>ASSIGN
      8587>>CALLBLT  8587>>CALLBLT  8606>>ASSIGN   8606>>ASSIGN   8608>>ASSIGN   8611>>ASSIGN   8611>>ASSIGN
      8613>>ASSIGN   8613>>ASSIGN   8620>>ASSIGN   8620>>ASSIGN   8620>>ASSIGN   8621>>IF       8631>>ASSIGN
      8631>>ASSIGN   8633>>ASSIGN   8633>>ASSIGN   8637>>IF       8642>>IF       8647>>IF       8652>>IF
      8657>>IF       8662>>IF       8667>>ASSIGN   8681>>ASSIGN   8681>>ASSIGN   8682>>ASSIGN
OUT$
      8504**DCL      6764--IMP-PTR  8551<<ASSIGN   8552>>DOINDEX  8553>>DOCASE   8556>>ASSIGN   8606>>ASSIGN
      8620>>ASSIGN   8631>>ASSIGN   8674>>IF
P1$
      8506**DCL      8556<<ASSIGN   8557>>DOINDEX  8558>>ASSIGN   8606<<ASSIGN   8607>>DOINDEX  8608>>ASSIGN
      8620<<ASSIGN   8621>>IF       8626>>ASSIGN   8631<<ASSIGN   8632>>DOINDEX  8633>>ASSIGN
P2$
      8507**DCL      8558<<ASSIGN   8559>>DOCASE   8564>>IF       8566>>IF       8567<<ASSIGN   8567>>ASSIGN
      8568>>CALLBLT  8568>>CALLBLT  8569>>IF       8583>>IF       8585>>IF       8586<<ASSIGN   8586>>ASSIGN
      8587>>CALLBLT  8587>>CALLBLT  8588>>IF       8608<<ASSIGN   8609>>DOCASE   8611>>ASSIGN   8611>>ASSIGN
      8613>>ASSIGN   8613>>ASSIGN   8633<<ASSIGN   8634>>DOCASE   8637>>IF       8637>>IF       8642>>IF
      8642>>IF       8647>>IF       8647>>IF       8652>>IF       8652>>IF       8657>>IF       8657>>IF
      8662>>IF       8662>>IF       8667>>ASSIGN
P_PCB
      6577**DCL      6996--DCLINIT
RPT_ERR
      8767**PROC     8547--CALL     8571--CALL     8590--CALL     8693--CALL     8716--CALL     8721--CALL
      8727--CALL     8733--CALL     8738--CALL     8744--CALL     8750--CALL     8755--CALL
SYM.COUNT
      6833**DCL      6836--IMP-SIZ  8568>>CALLBLT  8587>>CALLBLT  8611>>ASSIGN   8613>>ASSIGN   8681>>ASSIGN
      8682>>ASSIGN
SYM.TEXT
      6836**DCL      8568>>CALLBLT  8587>>CALLBLT  8611>>ASSIGN   8613>>ASSIGN   8681>>ASSIGN
SYM$
      8505**DCL      6810--IMP-PTR
TMP
      8518**DCL      8568<<CALLBLT  8570<<ASSIGN   8570>>ASSIGN   8571>>IF       8571>>IF       8575<>CALL
      8587<<CALLBLT  8589<<ASSIGN   8589>>ASSIGN   8590>>IF       8590>>IF       8594<>CALL
PL6.E3A0      #001=FUS$SECMNGR File=FUS$SECMNGR.:FUA2TSI                         FRI 11/21/97 11:36 Page:56   
UID#
      8523**DCL      8539<<ASSIGN   8582<<ASSIGN   8721>>IF
UNIXID_CLAUSE#
      8520**DCL      8538<<ASSIGN   8555<<ASSIGN   8716>>IF
WRITE_NFSSEC
      7830**DCL      8678<>CALL     8686<>CALL
WRITE_NFSSEC.STATION_
      7832**DCL      7832--REDEF
WRITE_NFSSEC.V
      7833**DCL      7830--DCLINIT
WRITE_NFSSEC.V.DVBYTE.VFC#
      7839**DCL      7839--REDEF
XSL$GETHOSTBYNAME
      8501**DCL-ENT  8684--CALL
XSL$HTONS
      8502**DCL-ENT  8575--CALL     8594--CALL
XTX$ADAPT
      6858**DCL-ENT  7174--DCLINIT
XUG$GETCMD
      5473**DCL-ENT  8543--CALL
XUG$INIT
      5477**DCL-ENT  8528--CALL
XUG_GETCMD
      7267**DCL      8528<>CALL     8543<>CALL
XUG_GETCMD.ERR#
      7278**DCL      8547<>CALL
XUG_GETCMD.ERR#.CODE#
      7281**DCL      8545>>IF
XUG_GETCMD.OUT$
      7272**DCL      7278--REDEF    8551>>ASSIGN
XUG_INIT
      6863**DCL      8528<>CALL
