

CC.C03    File=zbc$switch:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: switch.c,v 3.15 87/03/25 23:13:10 ceriel Exp $ */
        6         6             /*  S W I T C H - S T A T E M E N T  A D M I N I S T R A T I O N */
        7         7
        8         8             #include "nofloat:h"
        9         9             #include <em:h>
       10        10             #include "debug:h"
       11        11             #include "botch_free:h"
       12        12             #include <alloc:h>
       13        13             #include "density:h"
       14        14             #include "Lpars:h"
       15        15             #include "idf:h"
       16        16             #include "label:h"
       17        17             #include "arith:h"
       18        18             #include "switch:h"
       19        19             #include "code:h"
       20        20             #include "assert:h"
       21        21             #include "expr:h"
       22        22             #include "type:h"
       23        23             #include "noRoption:h"
       24        24             #include "zb_target:h"
       25        25             #include "dataFirst:h"
       26        26             #include "use_tmp:h"
       27        27
       28        28             extern char options[];
       29        29
       30        30             #define   compact(nr, low, up) (nr != 0 && (up - low) / nr <= (DENSITY - 1))
       31        31
       32        32             static struct switch_hdr *switch_stack = 0;
       33        33
       34        34             /* (EB 86.05.20) The following rules hold for switch statements:
       35        35              - the expression E in "switch(E)" is cast to 'int' (RM 9.7)
       36        36              - the expression E in "case E:" must be 'int' (RM 9.7)
CC.C03    File=zbc$switch:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37              - the values in the CSA/CSB tables are words (EM 7.4)
       38        38              For simplicity, we suppose int_size == word_size.
       39        39             */
       40        40
       41        41             code_startswitch(expp)
       42        42              struct expr **expp;
       43        43             {
       44        44    1         /* Check the expression, stack a new case header and
       45        45    1            fill in the necessary fields.
       46        46    1         */
       47        47    1         register label l_table = text_label();
       48        48    1         register label l_break = text_label();
       49        49    1         register struct switch_hdr *sh = new_switch_hdr();
       50        50    1         int fund = any2arith(expp, SWITCH); /* INT, LONG or DOUBLE */
       51        51    1
       52        52    1         switch (fund) {
       53        53    2         case LONG:
       54        54    2        #ifndef NOROPTION
       55        55    2            if (options['R'])
       56        56    2               warning("long in switch (cast to int)");
       57        57    2        #endif
       58        58    2            int2int(expp, int_type);
       59        59    2            break;
       60        60    2        #ifndef NOFLOAT
       61        61    2         case DOUBLE:
       62        62    2            error("float/double in switch");
       63        63    2            erroneous2int(expp);
       64        64    2            break;
       65        65    2        #endif NOFLOAT
       66        66    2         }
       67        67    1         stack_stmt(l_break, NO_LABEL);
       68        68    1         sh->sh_break = l_break;
       69        69    1         sh->sh_default = 0;
       70        70    1         sh->sh_table = l_table;
       71        71    1         sh->sh_nrofentries = 0;
       72        72    1         sh->sh_type = (*expp)->ex_type;  /* the expression switched */
       73        73    1         sh->sh_lowerbd = sh->sh_upperbd = (arith)0;  /* immaterial ??? */
CC.C03    File=zbc$switch:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    1         sh->sh_entries = (struct case_entry *) 0; /* case-entry list */
       75        75    1         sh->next = switch_stack;   /* push onto switch-stack  */
       76        76    1         switch_stack = sh;
       77        77    1         /* evaluate the switch expr.  */
       78        78    1         code_expr(*expp, RVAL, TRUE, NO_LABEL, NO_LABEL);
       79        79    1         C_bra(l_table);         /* goto start of switch_table */
       80        80    1        }
       81        81
       82        82             code_endswitch()
       83        83             {
       84        84    1         register struct switch_hdr *sh = switch_stack;
       85        85    1         register label tablabel;
       86        86    1         register struct case_entry *ce;
       87        87    1
       88        88    1         if (sh->sh_default == 0)   /* no default occurred yet */
       89        89    1            sh->sh_default = sh->sh_break;
       90        90    1         C_bra(sh->sh_break);    /* skip the switch table now  */
       91        91    1         C_df_ilb(sh->sh_table);    /* switch table entry      */
       92        92    1         tablabel = data_label();   /* the rom must have a label  */
       93        93    1         C_df_dlb(tablabel);
       94        94    1         C_rom_ilb(sh->sh_default);
       95        95    1         if (compact(sh->sh_nrofentries, sh->sh_lowerbd, sh->sh_upperbd)) {
       96        96    2            /* CSA */
       97        97    2            register arith val;
       98        98    2
       99        99    2            C_rom_cst(sh->sh_lowerbd);
      100       100    2            C_rom_cst(sh->sh_upperbd - sh->sh_lowerbd);
      101       101    2            ce = sh->sh_entries;
      102       102    2            for (val = sh->sh_lowerbd; val <= sh->sh_upperbd; val++) {
      103       103    3               ASSERT(ce);
      104       104    3               if (val == ce->ce_value) {
      105       105    4                  C_rom_ilb(ce->ce_label);
      106       106    4                  ce = ce->next;
      107       107    4               }
      108       108    3               else
      109       109    3                  C_rom_ilb(sh->sh_default);
      110       110    3            }
CC.C03    File=zbc$switch:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111    2            C_lae_dlb(tablabel, (arith)0); /* perform the switch  */
      112       112    2            C_csa(sh->sh_type->tp_size);
      113       113    2         }
      114       114    1         else { /* CSB */
      115       115    2            C_rom_cst((arith)sh->sh_nrofentries);
      116       116    2            for (ce = sh->sh_entries; ce; ce = ce->next) {
      117       117    3               /* generate the entries: value + prog.label  */
      118       118    3               C_rom_cst(ce->ce_value);
      119       119    3               C_rom_ilb(ce->ce_label);
      120       120    3            }
      121       121    2            C_lae_dlb(tablabel, (arith)0); /* perform the switch  */
      122       122    2            C_csb(sh->sh_type->tp_size);
      123       123    2         }
      124       124    1         C_df_ilb(sh->sh_break);
      125       125    1         switch_stack = sh->next;   /* unstack the switch descriptor */
      126       126    1         for (ce = sh->sh_entries; ce;) { /* free allocated switch structure */
      127       127    2            register struct case_entry *tmp = ce->next;
      128       128    2
      129       129    2            free_case_entry(ce);
      130       130    2            ce = tmp;
      131       131    2         }
      132       132    1         free_switch_hdr(sh);
      133       133    1         unstack_stmt();
      134       134    1        }
      135       135
      136       136             code_case(expr)
      137       137              struct expr *expr;
      138       138             {
      139       139    1         register arith val;
      140       140    1         register struct case_entry *ce;
      141       141    1         register struct switch_hdr *sh = switch_stack;
      142       142    1
      143       143    1         ASSERT(is_cp_cst(expr));
      144       144    1         if (sh == 0) {
      145       145    2            error("case statement not in switch");
      146       146    2            return;
      147       147    2         }
CC.C03    File=zbc$switch:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148    1         if (expr->ex_flags & EX_ERROR) /* is probably 0 anyway */
      149       149    1            return;
      150       150    1         ch7cast(&expr, SWITCH, sh->sh_type);
      151       151    1         ce = new_case_entry();
      152       152    1         C_df_ilb(ce->ce_label = text_label());
      153       153    1         ce->ce_value = val = expr->VL_VALUE;
      154       154    1         if (sh->sh_entries == 0) { /* first case entry  */
      155       155    2            ce->next = (struct case_entry *) 0;
      156       156    2            sh->sh_entries = ce;
      157       157    2            sh->sh_lowerbd = sh->sh_upperbd = val;
      158       158    2            sh->sh_nrofentries = 1;
      159       159    2         }
      160       160    1         else { /* second etc. case entry; put ce into proper place */
      161       161    2            register struct case_entry *c1 = sh->sh_entries, *c2 = 0;
      162       162    2
      163       163    2            if (val < sh->sh_lowerbd)
      164       164    2               sh->sh_lowerbd = val;
      165       165    2            else
      166       166    2            if (val > sh->sh_upperbd)
      167       167    2               sh->sh_upperbd = val;
      168       168    2            while (c1 && c1->ce_value < ce->ce_value) {
      169       169    3               c2 = c1;
      170       170    3               c1 = c1->next;
      171       171    3            }
      172       172    2            /* At this point three cases are possible:
      173       173    2               1: c1 != 0 && c2 != 0: insert ce somewhere in the middle
      174       174    2               2: c1 != 0 && c2 == 0: insert ce right after the head
      175       175    2               3: c1 == 0 && c2 != 0: append ce to last element
      176       176    2               The case c1 == 0 && c2 == 0 cannot occur, since
      177       177    2               the list is guaranteed to be non-empty.
      178       178    2            */
      179       179    2            if (c1) {
      180       180    3               if (c1->ce_value == ce->ce_value) {
      181       181    4                  error("multiple case entry for value %ld",
      182       182    4                     ce->ce_value);
      183       183    4                  free_case_entry(ce);
      184       184    4                  return;
CC.C03    File=zbc$switch:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185    4               }
      186       186    3               if (c2) {
      187       187    4                  ce->next = c2->next;
      188       188    4                  c2->next = ce;
      189       189    4               }
      190       190    3               else {
      191       191    4                  ce->next = sh->sh_entries;
      192       192    4                  sh->sh_entries = ce;
      193       193    4               }
      194       194    3            }
      195       195    2            else {
      196       196    3               ASSERT(c2);
      197       197    3               ce->next = (struct case_entry *) 0;
      198       198    3               c2->next = ce;
      199       199    3            }
      200       200    2            (sh->sh_nrofentries)++;
      201       201    2         }
      202       202    1        }
      203       203
      204       204             code_default()
      205       205             {
      206       206    1         register struct switch_hdr *sh = switch_stack;
      207       207    1
      208       208    1         if (sh == 0)
      209       209    1            error("default not in switch");
      210       210    1         else
      211       211    1         if (sh->sh_default != 0)
      212       212    1            error("multiple entry for default in switch");
      213       213    1         else
      214       214    1            C_df_ilb(sh->sh_default = text_label());
      215       215    1        }
      216       216
---  Include file information  ---

   zbc$nofloat:h.:ZBC3TOU. is referenced
   em:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$switch:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
   em_label:h.:ZBC3TOU. is referenced
   em_code:h.:ZBC3TOU. is referenced
   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$botch_free:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$density:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   zbc$switch:h.:ZBC3TOU. is referenced
   zbc$code:h.:ZBC3TOU. is referenced
   zbc$assert:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$noRoption:h.:ZBC3TOU. is referenced
   zbc$zb_target:h.:ZBC3TOU. is referenced
   zbc$dataFirst:h.:ZBC3TOU. is referenced
   zbc$use_tmp:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$switch:c.:ZBC3TSI
