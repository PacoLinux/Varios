

14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        1    
    1      /*M* KNH_MACRO_C - Macro definitions for Handler Monitor Interface */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* MEC,MOC,EXM=20,CLM=20,CRM=80  */
    8
    9
   10                          /*F* NAME: KNH$QHDR
   11
   12                          The KNH$QHDR macro generates a structure which defines the
   13                          circular queue header in the user's circular queue data
   14                          segment.
   15                          The user may address this structure via the pointer
   16                          G$HAND_Q$, which must be SYMREFed.
   17
   18                          */
   19
   20      %MACRO KNH$QHDR (FPTN=KNH$QHDR,STCLASS="BASED",
   21                       EXTENSION(YES=1,NO=0)=0,
   22                       EXTENSION_DWD=PTR$ PTR);
   23
   24      DCL 1 FPTN STCLASS CALIGNED,
   25            2 RCQ,
   26                          /*K* RCQ - The Receive Circular Que
   27                          application to pick up data or mess
   28                          The KNH$QHDR structure contains inf
   29                          the RCQ as follows:
   30                          */
   31              3 IPTR UBIN(16) CALIGNED,
   32                          /*K* RCQ.IPTR - UBIN WORD.
   33                          The RCQ Insert Pointer isn't a
   34                          a pointer, but is instead a doubleword offset from
   35                          the start of the RCQ where an item may be inserted.
   36                          The RCQ.IPTR is updated by the monitor to point to
   37                          just after the end of the item just inserted into
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        2    
   38                          the RCQ.
   39                          */
   40              3 RPTR UBIN(16) CALIGNED,
   41                          /*K* RCQ.RPTR - UBIN WORD.
   42                          The RCQ Remover Pointer is a doubleword offset from the
   43                          start of the RCQ where the next item is to be removed.
   44                          The RCQ.PPTR is updated by the application after it has
   45                          removed an item from the RCQ to point to just after the
   46                          end of the item just removed.
   47                          */
   48              3 SZ UBIN(16) CALIGNED,
   49                          /*K* RCQ.SZ - UBIN WORD.
   50                          Contains the size, in doublewords, of the RCQ.
   51                          */
   52              3 OFFSET UBIN(16) CALIGNED,
   53                          /*K* RCQ.OFFSET - UBIN WORD.
   54                          Contains the word offset from the base of the CQ
   55                          segment (G$HAND_Q$) to the start of the RCQ.
   56                          */
   57                          /*K* EXTENSION - {YES|NO} is a MACRO parameter only,
   58                          that when YES, limits the Macro expansion to include
   59                          only that portion that is useful in a CQ extension.
   60                          That portion includes only the XTNDAT (aka RCQ) and
   61                          SCQ areas.
   62                          */
   63            2 XTNDAT REDEF RCQ,
   64                          /*K* XTNDAT redefines the RCQ area for headers of
   65                          overflow segments used by handlers to temporarily
   66                          save messages that can't be inserted into the main
   67                          send CQ.  RCQ is not used for such areas.
   68                          */
   69              3 LNK$ PTR,
   70                          /*K* XTNDAT.LNK$ - PTR.  Chains extension areas together
   71                          in the order in which the messages must be transmitted.
   72                          */
   73              3 EXTENSION_DWD,
   74                          /*K* EXTENSION_DWD - user specifiable, otherwise unused
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        3    
   75                          2-word portion of XTNDAT.  Defaults to "PTR$ PTR".
   76                          */
   77            2 SCQ,
   78                          /*K* SCQ - The Send Circular Queue (SCQ) is used by the
   79                          application by inserting items into its own SCQ when that
   80                          application wishes the monitor to to take the item out and
   81                          forward it to another endpoint.
   82                          The KNH$QHDR structure contains information pertaining to
   83                          the SCQ as follows:
   84                          */
   85              3 IPTR UBIN(16) CALIGNED,
   86                          /*K* SCQ.IPTR - UBIN WORD.
   87                          The SCQ Insert Pointer is a doubleword offset from
   88                          the start of the SCQ where an item may be inserted.
   89                          The SCQ.IPTR is updated by the application to point to
   90                          just after the end of the item just inserted into
   91                          the SCQ.
   92                          */
   93              3 RPTR UBIN(16) CALIGNED,
   94                          /*K* SCQ.RPTR - UBIN WORD.
   95                          The SCQ Remover Pointer is a doubleword offset from the
   96                          start of the SCQ where the next item is to be removed.
   97                          The SCQ.PPTR is updated by the monitor after it has
   98                          removed an item from the SCQ to point to just after the
   99                          end of the item just removed.
  100                          */
  101              3 SZ UBIN(16) CALIGNED,
  102                          /*K* SCQ.SZ - UBIN WORD.
  103                          Contains the size, in doublewords, of the SCQ.
  104                          */
  105              3 OFFSET UBIN(16) CALIGNED %CHARTEXT(SUBSTR(',;',EXTENSION,1))
  106      %IF EXTENSION=0;
  107                          /*K* SCQ.OFFSET - UBIN WORD.
  108                          Contains the word offset from the base of the CQ
  109                          segment (G$HAND_Q$) to the start of the SCQ.
  110                          */
  111            2 CTX,
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        4    
  112                          /*K* CTX - A ConTeXt area may be specified by the
  113                          application when the circular queue is established.
  114                          The contents of the context area is totally left
  115                          to the application; the monitor does not modify it
  116                          in any way.
  117                          The KNH$QHDR structure contains information pertaining to
  118                          this context area as follows:
  119                          */
  120              3 OFFSET UBIN(16) CALIGNED,
  121                          /*K* CTX.OFFSET - UBIN WORD.
  122                          Contains the word offset from the base of the CQ
  123                          segment (G$HAND_Q$) to the start of the Context area.
  124                          */
  125              3 SZ UBIN(15) UNAL,
  126                          /*K* CTX.SZ - UBIN WORD.
  127                          Contains the size, in words, of the context area.
  128                          */
  129      %IF NOT(MODE_FEP);
  130              3 *BIT(2) UNAL,
  131      %ENDIF;
  132              3 WU BIT(1) UNAL,
  133                          /*K* CTX.WU - BIT(1).
  134                          If set, indicates that the monitor is to wakeup the user
  135                          after scanning the Send Circular Queue.
  136                          */
  137            2 MSGS_SCQ UBIN(32) CALIGNED,
  138                          /*K* MSGS_SCQ - UBIN(32).
  139                          Contains a count that is incremented every time a
  140                          message is taken from the Send Circular Queue.
  141                          */
  142            2 MBC_SCQ UBIN(32) CALIGNED,
  143                          /*K* MBC_SCQ - UBIN(32).
  144                          Contains a count of the total number of bytes that
  145                          have been taken from the Send Circular Queue.
  146                          */
  147            2 WRAP_SCQ UBIN(32) CALIGNED,
  148                          /*K* WRAP_SCQ - UBIN(32).
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        5    
  149                          Contains a count of times the Send Circular Queue
  150                          has wrapped.
  151                          */
  152            2 MSGS_RCQ UBIN(32) CALIGNED,
  153                          /*K* MSGS_RCQ - UBIN(32).
  154                          Contains a count that is incremented every time a
  155                          message is put into the Receive Circular Queue.
  156                          */
  157            2 MBC_RCQ UBIN(32) CALIGNED,
  158                          /*K* MBC_RCQ - UBIN(32).
  159                          Contains a quad-byte of messages that
  160                          have been put into the Receive Circular Queue.
  161                          */
  162            2 WRAP_RCQ UBIN(32) CALIGNED,
  163                          /*K* WRAP_RCQ - UBIN(32).
  164                          Contains a count of times the Receive Circular Queue
  165                          has wrapped.
  166                          */
  167            2 LAST_RCQPTR UBIN(16) CALIGNED,
  168                          /*K* LAST_RCQPTR - UBIN(16).
  169                          Contains a doubleword offset from the start of
  170                          the RCQ to where the last item has been inserted.
  171                          This field is maintained by the monitor.
  172                          */
  173            2 LAST_SCQPTR UBIN(16) CALIGNED;
  174                          /*K* LAST_SCQPTR - UBIN WORD.
  175                          Contains a doubleword offset from the start of
  176                          the SCQ to where the last item has been inserted.
  177                          This field is maintained by the handler library.
  178                          */
  179      %ENDIF;
  180      %MEND;
  181
  182
  183                          /*F* NAME: KNH$HMI
  184
  185                          The KNH$HMI macro generates a structure for the
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        6    
  186                          Handler/Monitor context blocks that are contained
  187                          in the BOBCAT data segment.
  188
  189                          An HMI context block is allocated when the user
  190                          opens a DCB with ORG=CQ.  The address of the block
  191                          allocated is put in the user table (G$USER.HMI$).
  192                          */
  193
  194      %MACRO KNH$HMI (FPTN=KNH$HMI,STCLASS=BASED);
  195
  196      DCL 1 FPTN STCLASS CALIGNED,
  197            2 RCQ,
  198              3 IPTR UBIN(16) CALIGNED,
  199              3 RPTR UBIN(16) CALIGNED,
  200              3 SZ UBIN(16) CALIGNED,
  201              3 OFFSET UBIN(16) CALIGNED,
  202              3 LOCK,
  203                4 WHO CHAR(4),
  204                4 SREG CHAR(2),
  205            2 SCQ,
  206              3 IPTR UBIN(16) CALIGNED,
  207              3 RPTR UBIN(16) CALIGNED,
  208              3 SZ UBIN(16) CALIGNED,
  209              3 OFFSET UBIN(16) CALIGNED,
  210              3 LOCK,
  211                4 WHO CHAR(4),
  212                4 SREG CHAR(2),
  213
  214              3 BUSY BIT(1) UNAL,
  215              3 SCANNED BIT(1) UNAL,
  216              3 * BIT(13) UNAL,
  217              3 CLOSING BIT(1) UNAL,
  218
  219            2 CTX,
  220              3 OFFSET UBIN(16) CALIGNED,
  221              3 SZ UBIN(16) CALIGNED,
  222            2 WAIT_HEAD$ PTR CALIGNED,
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        7    
  223                          /*K* WAIT_HEAD$ - PTR.
  224                          Contains the address of the first LDCT on the chain
  225                          of LDCTs that are waiting for space on this Receive Circular
  226                          Queue.  Waiting LDCTs are chained through KN$LDCT.LNK$.
  227                          */
  228            2 WAIT_COUNT UBIN(16) CALIGNED,
  229                          /*K* WAIT_COUNT - UBIN.
  230                          Contains a count of the number of LDCTs that are
  231                          on the chain of LDCTs waiting for space on the
  232                          Receive Circular Queue.
  233                          */
  234            2 USER# UBIN(16) CALIGNED,
  235                          /*K* USER# - UBIN.
  236                          Contains the user number for the owner of this
  237                          HMI Context Block.  If zero, this context block
  238                          is not in use.
  239                          */
  240            2 PP# UBIN(32) CALIGNED,
  241            2 PPSZ UBIN(16) CALIGNED,
  242            2 LDCTS# UBIN(16) CALIGNED;
  243
  244      %MEND;
  245
  246
  247                          /*F* NAME: KNH$MESS - Header for CQ Messages
  248
  249                          Messages in the CQ may be either control type messages or
  250                          data messages.  There is a CQ message header that is at the
  251                          beginning of each item in the CQ that tells the application
  252                          or the monitor's HMI routines what to do.  This CQ message
  253                          header contains a function code which tells the
  254                          receiver whether the item contains data or some kind of
  255                          control message, such as connect/disconnect.
  256
  257                     Some functions, such as data transfer, are fairly complete in
  258                     themselves.  Others, such as connection initiation require a
  259                     whole slew of parameters.  Thus an item in the CQ consists of
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        8    
  260                     a message header, optionally followed by an FPT related to the
  261                     specific function, optionally followed by the application's
  262                     actual data.
  263
  264                     The KNH$MESS macro in file KNH_MACRO_C
  265                     generates the structure for the control
  266                     information that is at the beginning of each message in the
  267                     Handler Circular Queue.
  268
  269                     The KNH$MESS structure contains the following:
  270                     */
  271      %MACRO KNH$MESS (FPTN=KNH$MESS,STCLASS=BASED,
  272                          FUNCTION=0,
  273                          LDCTX=0,
  274                          UID=0,
  275                          RECTYPE=0,
  276                          FPTSZ=0,
  277                          MSGSZ=0,
  278                          LAST=";");
  279       %LSET LISTDIR='0'B;
  280       %LSET LISTEXP='1'B;
  281       %LSET LISTCOM='0'B;
  282       %LSET LISTSUB='1'B;
  283       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  284       %IF (SUBSTR(STR,0,6)='STATIC') OR
  285       (SUBSTR(STR,0,8)='CONSTANT') OR
  286       (SUBSTR(STR,0,3)='EXT');
  287       %LSET INIT=CHARTEXT('INIT');
  288       %LSET EINIT=CHARTEXT('');
  289       %ELSE;
  290       %LSET INIT=CHARTEXT('/*');
  291       %LSET EINIT=CHARTEXT('*/');
  292       %ENDIF;
  293
  294      DCL 1 FPTN STCLASS CALIGNED,
  295            2 %CHARTEXT('FUNCTION ') UBIN(16) CALIGNED %INIT(FUNCTION)%EINIT,
  296                          /*K* FUNCTION - UBIN WORD.
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        9    
  297                          Contains the code to indicate the type of message.
  298
  299                          .XEQ KNH_MACRO_C KN_FCN_equ
  300                          */
  301            2 FLAGS REDEF %CHARTEXT('FUNCTION') CALIGNED,
  302      %IF NOT(MODE_FEP);
  303              3 * BIT(1) UNAL,
  304      %ENDIF;
  305              3 FREE BIT(1) UNAL ,
  306                          /*K* FLAGS.FREE - BIT(1).
  307                          Set in messages in the SCQ after the
  308                          message has been sent.
  309                          */
  310              3 * BIT(7) UNAL ,
  311              3 %CHARTEXT('FUNCTION ') UBIN BYTE UNAL,
  312
  313            2 %CHARTEXT('LDCTX ') UBIN(16) CALIGNED %INIT(LDCTX)%EINIT,
  314                          /*K* LDCTX - UBIN WORD.
  315                          Contains the LDCT index which represents an
  316                          application's endpoint.
  317                          */
  318        %KNH@UID (FPTN="", STCLASS=STCLASS, LVL=2, UID=UID, LAST=",");
  319                          /*K* UID - BIT(32).
  320                          Contains the application's User Identification:
  321                          */
  322                          /*K* UIDX.CQ_HNDID - UBIN BYTE.
  323                          .XEQ KNH_MACRO_C KNH@UID UIDX.CQ_HNDID
  324                          */
  325                          /*K* UIDX.CQ_HNDCTXID - UBIN BYTE.
  326                          .XEQ KNH_MACRO_C KNH@UID UIDX.CQ_HNDCTXID
  327                          */
  328            2 %CHARTEXT('RECTYPE ') UBIN(16) CALIGNED  %INIT(RECTYPE)%EINIT,
  329                          /*K* RECTYPE - UBIN WORD.
  330                          When FUNCTION is KN_FCN_DATA and RECTYPE is
  331                          non-zero, the Coupler will reset the value of
  332                          FUNCTION with RECTYPE before forwarding the
  333                          message to the Host.
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        10   
  334
  335                          */
  336            2 LAST_PTR UBIN(16) CALIGNED %INIT(0)%EINIT,
  337                          /*K* LAST_PTR - UBIN WORD.
  338                          Contains a doubleword offset from the start of
  339                          the circular queue to the previous message that
  340                          was inserted or removed.
  341                          */
  342            2 %CHARTEXT('FPTSZ ') UBIN(16) CALIGNED %INIT(FPTSZ)%EINIT,
  343                          /*K* FPTSIZE - UBIN WORD.
  344                          Contains the byte size of the FPT portion of the
  345                          message.  If no FPT, FPTSZ will be zero.
  346                          */
  347            2 %CHARTEXT('MSGSZ ') UBIN(16) CALIGNED %INIT(MSGSZ)%EINIT LAST
  348                          /*K* MSGSZ - UBIN WORD.
  349                          Contains the byte size of the data
  350                          that follows the message header and optional FPT.
  351                          If no data is associated with the message, MSGSZ
  352                          will be zero.
  353                          */
  354      %MEND;
  355
  356
  357                          /*F* NAME: KNH@UID
  358
  359                          The KNH@UID macro is used within the KNH$MESS macro and
  360                          defines the various formats for UID.
  361
  362                          */
  363      %MACRO KNH@UID (FPTN=KNH@UID,STCLASS=AUTO,
  364                          LVL=1,
  365                          UID=0,
  366                          LAST=";");
  367       %LSET LISTDIR='0'B;
  368       %LSET LISTEXP='1'B;
  369       %LSET LISTCOM='0'B;
  370       %LSET LISTSUB='1'B;
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        11   
  371       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  372       %IF (SUBSTR(STR,0,6)='STATIC') OR
  373       (SUBSTR(STR,0,8)='CONSTANT') OR
  374       (SUBSTR(STR,0,3)='EXT');
  375       %LSET INIT=CHARTEXT('INIT');
  376       %LSET EINIT=CHARTEXT('');
  377       %ELSE;
  378       %LSET INIT=CHARTEXT('/*');
  379       %LSET EINIT=CHARTEXT('*/');
  380       %ENDIF;
  381
  382      %IF LVL = 1;
  383      DCL 1 FPTN WALIGNED STCLASS,
  384      %LSET NXTLVL = 2;
  385      %ELSE;
  386      %IF TEXTCHAR(FPTN) ~= '';
  387      %(LVL) FPTN,
  388      %LSET NXTLVL = LVL + 1;
  389      %ELSE;
  390      %LSET NXTLVL = LVL;
  391      %ENDIF;
  392      %ENDIF;
  393
  394            %(NXTLVL) %CHARTEXT('UID ') UBIN(32) CALIGNED %INIT(UID)%EINIT,
  395                          /*K* UID - UBIN(32).
  396                          ???
  397                          */
  398            %(NXTLVL) UID$ REDEF %CHARTEXT('UID ') PTR CALIGNED,
  399                          /*K* UID$ - PTR.
  400                          ???
  401                          */
  402            %(NXTLVL) UIDX REDEF %CHARTEXT('UID '),
  403              %(NXTLVL+1) CQ_HNDID UBIN BYTE CALIGNED,
  404                          /*K* UIDX.CQ_HNDID - UBIN BYTE.
  405                          The CQ Handler Identifier contains a value defined
  406                          by the CQ user (e.g., KV#CQ_HNDID). Specifies what routine
  407                          in the handler should service this message.
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        12   
  408                          */
  409              %(NXTLVL+1) CQ_HNDCTXID UBIN(24) CALIGNED LAST
  410                          /*K* UIDX.CQ_HNDCTXID - UBIN(24).
  411                          The CQ Handler Context Identifier
  412                          specifies an identifier understood only by the
  413                          handler with this CQ_HNDID.  Typically would be the
  414                          low-order 24 bits of a context block address within
  415                          the handler.
  416                          */
  417      %MEND;
  418
  419
  420
  421      /*F* NAME: KN_NAMTXT_FCN
  422
  423      The KN_NAMTXT_FCN macro generates the text for the KN_FCN_function
  424      values which are defined in the KNH_MACRO_C include file.  These
  425      values have meaning for KNH$MESS.FUNCTION.
  426
  427      */
  428      %MACRO KN_NAMTXT_FCN (NAME = KN_NAMTXT_FCN, LAST = ";", STCLASS = CONSTANT);
  429      %LSET LISTDIR = '0'B;
  430      %LSET LISTEXP = '1'B;
  431      %LSET LISTCOM = '0'B;
  432      %LSET LISTSUB = '1'B;
  433      %LSET STC = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  434      %LSET STC = BITBIN(STC = 'STA' OR STC = 'CON' OR STC = 'EXT');
  435      %IF STC = 1;
  436      %LSET INIT = CHARTEXT(' INIT');
  437      %LSET ENIT = CHARTEXT('');
  438      %ELSE;
  439      %LSET INIT = CHARTEXT('/*');
  440      %LSET ENIT = CHARTEXT('*/');
  441      %ENDIF;
  442      DCL 1 NAME STCLASS,
  443            2 TXT_INT CALIGNED,
  444              3 * CHAR(15) %INIT('KN_FCN: none(0)')%ENIT CALIGNED,
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        13   
  445              3 * CHAR(15) %INIT('KN_FCN_INIT')%ENIT CALIGNED,
  446              3 * CHAR(15) %INIT('KN_FCN_INIT_ACK')%ENIT CALIGNED,
  447              3 * CHAR(15) %INIT('KN_FCN_TERM')%ENIT CALIGNED,
  448              3 * CHAR(15) %INIT('KN_FCN_TERM_ACK')%ENIT CALIGNED,
  449              3 * CHAR(15) %INIT('KN_FCN_DATA')%ENIT CALIGNED,
  450              3 * CHAR(15) %INIT('KN_FCN_NOP')%ENIT CALIGNED,
  451              3 * CHAR(15) %INIT('KN_FCN_LOOP')%ENIT CALIGNED,
  452              3 * CHAR(15) %INIT('KN_FCN_UNQ')%ENIT CALIGNED,
  453              3 * CHAR(15) %INIT('KN_FCN_UNCOUNT')%ENIT CALIGNED,
  454              3 * CHAR(15) %INIT('KN_FCN_RESET')%ENIT CALIGNED,
  455              3 * CHAR(15) %INIT('KN_FCN_BLOCK')%ENIT CALIGNED,
  456              3 * CHAR(15) %INIT('KN_FCN_UNBLOCK')%ENIT CALIGNED,
  457              3 * CHAR(15) %INIT('KN_FCN_EXDT')%ENIT CALIGNED,
  458              3 * CHAR(15) %INIT('KN_FCN_EXDT_ACK')%ENIT CALIGNED,
  459              3 * CHAR(15) %INIT('KN_FCN_EXDT_NAK')%ENIT CALIGNED,
  460            2 TXT(0:15) REDEF TXT_INT CHAR(15) CALIGNED LAST
  461      %MEND;
  462
  463      /*F* NAME: KN_FCN_equ
  464
  465      The file KNH_MACRO_C contains the following EQUated values
  466      that may be used to determine the meaning of FUNCTION:
  467
  468      .fif
  469      KN_FCN_INIT       1       Initiate connection
  470      KN_FCN_INIT_ACK   2       Initiate connection acknowledgment
  471      KN_FCN_TERM       3       Terminate connection
  472      KN_FCN_TERM_ACK   4       Terminate connection acknowledgment
  473      KN_FCN_DATA       5       Send data
  474      KN_FCN_NOP        6       No operation
  475      KN_FCN_LOOP       7       Loop back
  476      KN_FCN_UNQ        8       Transport connection has been made - unqueue
  477      KN_FCN_UNCOUNT    9       LDCT will not be linked on wait queue
  478      KN_FCN_RESET     10       Request to reset the virtual circuit
  479      KN_FCN_BLOCK     11       Link layer blocks messages from network
  480                                layer
  481      KN_FCN_UNBLOCK   12       Link layer unblocks messages from network
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        14   
  482                                layer
  483      KN_FCN_EXPEDITED_DATA
  484                       13       Request transmission or report receipt of
  485                                expedited data
  486      KN_FCN_EXPEDITED_DATA_ACK
  487                       14       Report ack of previous expedited data request
  488      KN_FNC_EXPEDITED_DATA_NAK
  489                       15       Report negative ack of previous expedited
  490                                data request.
  491      .fin
  492      */
  493      /* Function for the Network layers */
  494      /* WARNING:  Update KN_NAMTXT_FCN when updating this list of SETs. */
  495      %SET KN_FCN_INIT = 1; /* Initiate connection                                  */
  496      %SET KN_FCN_INIT_ACK = 2; /* Initiate connection acknowledement               */
  497      %SET KN_FCN_TERM = 3; /* Terminate connection                                 */
  498      %SET KN_FCN_TERM_ACK = 4; /* Terminate connection acknowledement              */
  499      %SET KN_FCN_DATA = 5; /* Send data                                            */
  500      %SET KN_FCN_NOP = 6; /* Nop                                                   */
  501      %SET KN_FCN_LOOP = 7; /* Loop back                                            */
  502      %SET KN_FCN_UNQ = 8; /* Transport connection has been made - unqueue          */
  503      %SET KN_FCN_UNCOUNT = 9; /* LDCT will not be linked on wait queue             */
  504      %SET KN_FCN_RESET = 10; /* request or report a reset on a circuit.            */
  505      %SET KN_FCN_BLOCK = 11; /* hdlc to network.  this vir cir is being flow controlled */
  506      %SET KN_FCN_UNBLOCK = 12; /* hdlc to network.  this vir cir is being unflow controlled */
  507      %SET KN_FCN_EXPEDITED_DATA = 13;
  508      %SET KN_FCN_EXPEDITED_DATA_ACK = 14;
  509      %SET KN_FCN_EXPEDITED_DATA_NAK = 15;
  510      %SET KN_FCN_MAX = 15; /* the highest value of the function types              */
  511
  512
  513
  514      /*F* NAME: FPT_CONNECT
  515
  516      The data defined by the FPT_CONNECT macro follows the KNH$MESS
  517      structure when the function code is KN_FCN_INIT.
  518
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        15   
  519      The FPT_CONNECT structure contains the following:
  520      */
  521
  522      %MACRO FPT_CONNECT (FPTN=FPT_CONNECT,
  523                          STCLASS="",
  524                          LVL=1,
  525                          LAST=";",
  526                          TYPE(SESSION=1,SECONDARY=3,QDP=4,LINK=5,CIRCUIT=6)=0,
  527                          ADRTYP(X121=1,FEP=2,LACS=3,NET=4,NONE=0)=0,
  528                          CLASS=4,
  529                          OSI_FLOW(YES='1'B,NO='0'B,ANY)='0'B,
  530                          TRACE(YES='1'B,NO='0'B,ANY)='0'B,
  531                          CLNS(YES='1'B,NO='0'B,ANY)='1'B,
  532                          OSI(YES='1'B,NO='0'B,ANY)='0'B,
  533                          EXPEDITED(YES='1'B,NO='0'B,ANY)='0'B,
  534                          EXTENDED(YES='1'B,NO='0'B,ANY)='1'B,
  535                          CLASS_2_FLOW(YES='1'B,NO='0'B,ANY)='0'B,
  536                          CHKSUM(YES='1'B,NO='0'B,ANY)='1'B,
  537                          SERVICE=0,
  538                          RESOURCE=' ');
  539
  540       %LSET LISTDIR='0'B;
  541       %LSET LISTEXP='1'B;
  542       %LSET LISTCOM='0'B;
  543       %LSET LISTSUB='1'B;
  544       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  545       %IF (SUBSTR(STR,0,6)='STATIC') OR
  546       (SUBSTR(STR,0,8)='CONSTANT') OR
  547       (SUBSTR(STR,0,3)='EXT');
  548       %LSET INIT=CHARTEXT('INIT');
  549       %LSET ENIT=CHARTEXT(' ');
  550       %ELSE;
  551       %LSET INIT=CHARTEXT('/*');
  552       %LSET ENIT=CHARTEXT('*/');
  553       %ENDIF;
  554
  555      %IF LVL=1;
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        16   
  556      DCL 1 FPTN STCLASS ALIGNED,
  557      %ELSE;
  558           %(LVL) FPTN,
  559      %ENDIF;
  560            %(LVL+1) %CHARTEXT('TYPE ') UBIN %INIT(TYPE)%CHARTEXT('/**/'),
  561                          /*K* TYPE - UBIN.
  562                          Contains a value to indicate the connection type.
  563                          The TYPE value may be initialized in FPT_CONNECT
  564                          by specifying TYPE={SESSION | LINK}.
  565
  566                          File KNH_MACRO_C contains the following EQUated
  567                          values that may be used to reference FPT_CONNECT.TYPE:
  568
  569                          .fif
  570                             KN_CON_TYP_SESS    1   CP-6 Session Connection
  571                        KN_CON_TYP_D00     2   D00 Link Connection (no longer used)
  572                        KN_CON_TYP_SNTW    3   Secondary Network Connection (RFU)
  573                        KN_CON_TYP_QDP     4   Quick Data Path over Coupler
  574                        KN_CON_TYP_LINK    5   Link Connection
  575                        KN_CON_TYP_CIRCUIT 6   Class A network (CONS)
  576                        .fin
  577
  578                        Examples of session level connections are: VDH
  579                        entity on behave of some device, NODEADMN's
  580                        connections to the handler's, or most customer
  581                        written handlers.
  582
  583                        An example of a link level connection is HDLCX25.
  584                        */
  585           %LSET NXTLVL = LVL+1;
  586                %(LVL+1) %CHARTEXT('RESOURCE ') CHAR(8) %INIT(RESOURCE)%CHARTEXT('/**/'),
  587                          /*K* RESOURCE - CHAR(8).
  588                          Specifies what resource that this connection
  589                          is to me made to.  The following resources are
  590                          currently defined:
  591
  592                          .fif
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        17   
  593                          }   NETMAN - indicates the Network manager
  594                          }   NODADM - indicates the Node administrator
  595                          }   LOGON  - indicates a host user is to be created
  596                          .fin
  597                          */
  598           %B$TERMINAL_ID(FPTN=TERMINAL_ID,LAST=",",LVL=NXTLVL);
  599                          /*K* TERMINAL_ID - Structure.
  600                          See B$TERMINAL_ID.
  601                          */
  602            %(LVL+1) RLCID,
  603                %(LVL+2) NODE UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  604                %(LVL+2) GENERATION UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  605                %(LVL+2) FEP_NODE REDEF GENERATION UBIN BYTE CALIGNED,
  606                %(LVL+2) LDCTX UBIN %INIT(0)%CHARTEXT('/**/'),
  607               %(LVL+2) FLAGS REDEF LDCTX,
  608                     %(LVL+3) HOST_NODE BIT(1),
  609                     %(LVL+3) VIRCIR BIT(1),
  610                          /*K* FLAGS.VIRCIR - BIT(1).
  611                                indicates that the link context created is
  612                                associated with an x25 virtual circuit.*/
  613                     %(LVL+3) * BIT(14),
  614                          /*K* RLCID - Structure.
  615                          Contains the Remote Logical Connection IDentifer
  616                          of the other end point:
  617
  618                          .xeq KN_DATA_M KN$LDCT RLCID
  619                          */
  620           %(LVL+1) USER,
  621               %(LVL+2) SYSID UBIN %INIT(0)%CHARTEXT('/**/'),
  622                          /*K* USER.SYSID - UBIN(16).
  623                          Contains the sysid of the user requesting the connection.
  624                          */
  625           %(LVL+1) SPEED UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  626                          /*K* SPEED - UBIN BYTE.
  627                          Contains the line speed of the device logging on.
  628                          */
  629            %(LVL+1) %CHARTEXT('SERVICE ') UBIN BYTE UNAL %INIT(SERVICE)%CHARTEXT('/**/'),
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        18   
  630                          /*K* SERVICE - UBIN BYTE.
  631                          For TYPE set to LINK, SERVICE specifies the
  632                          the value to be used for KNN$LINK.QOS.
  633
  634                          For TYPE set to SESS, SERVICE specifies the
  635                          value that represents the QOS required on the
  636                          Transport connection.
  637                          */
  638                %(LVL+1) %CHARTEXT('CLASS') UBIN BYTE CALIGNED %INIT(CLASS)%ENIT,
  639                          /*K* CLASS - UBIN BYTE.
  640                          Specifies the request Transport Class.
  641                          The mandatory default is 4.
  642                          */
  643                %(LVL+1) * UBIN BYTE CALIGNED %INIT(0)%ENIT,
  644                %(LVL+1) TR_FLAGS,
  645                          /*K* TR_FLAGS - BIT ARRAY.
  646                          The following transport options may be set by
  647                          specifying flag=YES|NO.
  648                          */
  649                          /*N* Most of the TR_FLAGS are here just to keep the
  650                          format parallel to the flags kn K$FPT_CONNECT_OSI.
  651                          Most have mandatory defaults as explained below.
  652                          */
  653                  %(LVL+2) * UBIN BYTE CALIGNED %INIT(0)%ENIT,
  654                  %(LVL+2) %CHARTEXT('OSI_FLOW') BIT(1) UNAL %INIT(OSI_FLOW)%ENIT,
  655                          /*N* TR_FLAGS.OSI_FLOW - BIT(1).
  656                          If set, indicates that the flow control mechanism
  657                          for Host Session to Intermediate Fep Transport is
  658                          to be enabled.
  659                          The mandatory default for CP-6 connections is NO.
  660                          */
  661                  %(LVL+2) %CHARTEXT('TRACE') BIT(1) UNAL %INIT(TRACE)%ENIT,
  662                          /*N* TR_FLAGS.TRACE - BIT(1).
  663                          If set, indicates that the trace option is to be
  664                          enabled of the local fep for this transport connection.
  665                          The default is NO.
  666                          */
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        19   
  667                  %(LVL+2) %CHARTEXT('CLNS') BIT(1) UNAL %INIT(CLNS)%ENIT,
  668                          /*N* TR_FLAGS.CLNS - BIT(1).
  669                          If set, indicates that the Connectionless Network
  670                          Service is to be used on this connection.
  671                          This is the mandatory default for CP-6 connections.
  672                          */
  673                %(LVL+2) %CHARTEXT('OSI') BIT(1) UNAL %INIT(OSI)%ENIT,
  674                          /*N* TR_FLAGS.OSI - BIT(1).
  675                          If set, indicates that this is to be an OSI
  676                          Session Connection.  Valid only when TYPE is
  677                          set to SESS.
  678                          The mandatory default for CP-6 connections is NO.
  679                          */
  680                %(LVL+2) %CHARTEXT('CLASS_2_FLOW') BIT(1) UNAL %INIT(CLASS_2_FLOW)%ENIT,
  681                          /*N* TR_FLAGS.CLASS_2_FLOW - BIT(1).
  682                          If set, indicates that explicit flow control
  683                          is not to be used for this Class 2 connection.
  684                          This bit has no meaning for other than Class 2.
  685                          The default is NO.
  686                          */
  687                %(LVL+2) %CHARTEXT('EXTENDED') BIT(1) UNAL %INIT(EXTENDED)%ENIT,
  688                          /*K* TR_FLAGS.EXTENDED - BIT(1).
  689                          Set if the use of extended formats is to be used
  690                          on this connection.  Valid only when the selected
  691                          class is Class 4.
  692                          The default is YES.
  693                          */
  694                          /*N* Also valid in Class 2.                               */
  695                %(LVL+2) %CHARTEXT('EXPEDITED') BIT(1) UNAL %INIT(EXPEDITED)%ENIT,
  696                          /*K* TR_FLAGS.EXPEDITED - BIT(1).
  697                          Set if the use of expedited data is to be allowed
  698                          on this connection.  Valid only when the selected
  699                          class is Class 4.
  700                          The mandatory default for CP-6 connections is NO.
  701                          */
  702                          /*N* Also valid in Class 2 with explicit flow control.    */
  703      %IF ADRTYP=0;
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        20   
  704                %(LVL+2) %CHARTEXT('CHKSUM') BIT(1) UNAL %INIT(CHKSUM)%ENIT LAST
  705                          /*K* TR_FLAGS.CHKSUM - BIT(1).
  706                          Set if the use of the transport checksum parameter
  707                          is to be used on this transport connection.
  708                          Vaild only when the selected class is Class 4.
  709                          The default is YES.
  710                          */
  711      %ELSE;
  712                %(LVL+2) %CHARTEXT('CHKSUM') BIT(1) UNAL %INIT(CHKSUM)%ENIT,
  713              %K$NSAP(FPTN=DEST,ADRTYP=ADRTYP,STCLASS=STCLASS,LAST=",",LVL=NXTLVL);
  714      /*
  715                 address of the distant endpoint.  set by hdlcx25 link and vir cir
  716                 or the 1984 nsap facility in the case of a class A type network connection
  717      */
  718              %K$NSAP(FPTN=LADR,ADRTYP=ADRTYP,STCLASS=STCLASS,LAST=",",LVL=NXTLVL);
  719      /*
  720                 address that this cp6-network is identified as to the network at the
  721                 distant end point.
  722      */
  723              %(LVL+1) %CHARTEXT('DSTSNPA') CALIGNED,
  724                %(LVL+2) LNG UBIN BYTE CALIGNED %INIT(0)%ENIT,
  725                %(LVL+2) ADR_STRING CHAR(7) CALIGNED,
  726                %(LVL+2) ADR_PAIR (0:6) REDEF ADR_STRING UBIN BYTE CALIGNED LAST
  727      /*
  728                 either the group of subnetwork address that an HDLC link can reach,
  729                 or the subnetwork address that we want to establish a new circuit to.
  730      */
  731           %ENDIF;
  732
  733      %MEND;
  734
  735
  736      /*F* NAME: KN_CON_TYP_equ - for FPT_CONNECT.TYPE
  737      */
  738      %EQU KN_CON_TYP_SESS = 1; /* Session connection                               */
  739      %EQU KN_CON_TYP_D00 = 2; /* D00 Link connection                               */
  740      %EQU KN_CON_TYP_SNTW = 3; /* Secondary Network connection                     */
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        21   
  741      %EQU KN_CON_TYP_QDP = 4; /* Couplers QDP connection                           */
  742      %EQU KN_CON_TYP_LINK = 5; /* Link connection                                  */
  743      %EQU KN_CON_TYP_CIRCUIT = 6; /* Class A network                               */
  744
  745      /*F* NAME: K_CNC_equ - for FPT_CONNECT.RLCID.NODE
  746
  747      These equs are used only by Fep Network and HDLCX25.
  748      .fif
  749
  750         K_CNC_LINK# - 255   X.25 Link Level Connection.
  751      .* K_CNC_VC#   - 254   X.25 VC Connection to foreign network. (RFU)
  752         K_CNC_IS#   - 253   X.25 VC Connection to an Intermediate System.
  753      .fin
  754      */
  755
  756      %EQU K_CNC_LINK# = 255;
  757      %EQU K_CNC_VC# = 254;
  758      %EQU K_CNC_IS# = 253;
  759
  760
  761
  762      /*F* NAME: FPT_CONNECT_ACK
  763
  764      The data defined by the FPT_CONNECT_ACK macro follows the KNH$MESS
  765      structure when the function code is KN_FCN_INIT_ACK.
  766
  767      The FPT_CONNECT_ACK structure contains the following:
  768      */
  769      %MACRO FPT_CONNECT_ACK (FPTN=FPT_CONNECT_ACK,
  770                          STCLASS="",
  771                          LVL=1,
  772                          LAST=";",
  773                          REASON=0);
  774
  775       %LSET LISTDIR='0'B;
  776       %LSET LISTEXP='1'B;
  777       %LSET LISTCOM='0'B;
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        22   
  778       %LSET LISTSUB='1'B;
  779       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  780       %IF (SUBSTR(STR,0,6)='STATIC') OR
  781       (SUBSTR(STR,0,8)='CONSTANT') OR
  782       (SUBSTR(STR,0,3)='EXT');
  783       %LSET INIT=CHARTEXT('INIT');
  784       %ELSE;
  785       %LSET INIT=CHARTEXT('/*');
  786       %ENDIF;
  787       %LSET FEP = BITBIN(MODE_FEP);
  788       %LSET KN_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
  789      %IF LVL=1;
  790
  791      DCL 1 FPTN STCLASS ALIGNED,
  792      %ELSE;
  793           %(LVL) FPTN,
  794      %ENDIF;
  795            %(LVL+1) %CHARTEXT('REASON ') UBIN %INIT(REASON)%CHARTEXT('/**/'),
  796                          /*K* REASON - UBIN(16).
  797                          Contains zero if the connection has been accepted.
  798
  799                          Contains an error code from the file K_REASON_C if
  800                          the connection has been rejected:
  801
  802                          .xeq K_REASON_C K_REASON_equ
  803                          */
  804            %(LVL+1) OUTLINK$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  805                          /*K* OUTLINK$ - PTR.
  806                          Contains a link context pointer if the connection request
  807                          is to be redirected (REASON = %K_REASON_REDIRECT) to
  808                          another link.
  809                          */
  810      %LSET NXTLVL = %(LVL+1);
  811                 %KNH@UID(FPTN=UID,STCLASS="REDEF OUTLINK$",LVL=%NXTLVL,LAST=",");
  812            %(LVL+1) * UBIN (%(18-2*FEP)) %KN_DBLBYTALG %INIT(0)%CHARTEXT('/**/') LAST
  813                          /*K* slack word to keep double-word boundary.
  814                          */
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        23   
  815
  816      %MEND;
  817
  818
  819
  820      /*F* NAME: FPT_TERM
  821
  822      The data defined by the FPT_TERM macro follows the KNH$MESS
  823      structure when the function code is KN_FCN_TERM.
  824
  825      The FPT_TERM structure contains the following:
  826      */
  827
  828      %MACRO FPT_TERM (FPTN=FPT_TERM,
  829                       STCLASS=STATIC,
  830                       ALGN=WALIGNED,
  831                       LVL=1,
  832                       LAST=";",
  833                       REASON=0,
  834                       NODE=0,
  835                       GENERATION=0,
  836                       LDCTX=0,
  837                       COS=1);
  838
  839       %LSET LISTDIR='0'B;
  840       %LSET LISTEXP='1'B;
  841       %LSET LISTCOM='0'B;
  842       %LSET LISTSUB='1'B;
  843       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  844       %IF (SUBSTR(STR,0,6)='STATIC') OR
  845       (SUBSTR(STR,0,8)='CONSTANT') OR
  846       (SUBSTR(STR,0,3)='EXT');
  847       %LSET INIT=CHARTEXT('INIT');
  848       %LSET EINIT=CHARTEXT('');
  849       %ELSE;
  850       %LSET INIT=CHARTEXT('/*');
  851       %LSET EINIT=CHARTEXT('*/');
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        24   
  852       %ENDIF;
  853      %IF LVL=1;
  854
  855      DCL 1 FPTN STCLASS ALIGNED,
  856      %ELSE;
  857           %(LVL) FPTN,
  858      %ENDIF;
  859            %(LVL+1) RLCID,
  860                %(LVL+2) %CHARTEXT('NODE') UBIN BYTE CALIGNED %INIT(NODE)%EINIT,
  861                %(LVL+2) %CHARTEXT('GENERATION') UBIN BYTE CALIGNED %INIT(GENERATION)%EINIT,
  862                %(LVL+2) %CHARTEXT('LDCTX') UBIN %INIT(LDCTX)%EINIT,
  863                          /*K* RLCID - Structure.
  864                          Contains the Remote Logical Connection IDentifer
  865                          of the other end point.
  866                          */
  867            %(LVL+1) %CHARTEXT('REASON') UBIN %INIT(REASON)%EINIT,
  868                          /*K* REASON  - UBIN(16).
  869                          Contains a code for the reason the
  870                          disconnect is being requested.
  871
  872                          .xeq KNH_MACRO_C KN_CON_TERM_REASON_equ
  873                          */
  874            2 %CHARTEXT('COS') UBIN BYTE UNAL %INIT(COS)%EINIT,
  875                          /*N* COS - UBIN BYTE.
  876                          Contains a value indicating the class of service
  877                          required by this end point.
  878
  879                          NODEADMN sets this value from KL_SGNRSP.COS.
  880                          */
  881            2 * UBIN BYTE UNAL %INIT(0)%EINIT LAST
  882      %MEND;
  883
  884
  885
  886      /*F* NAME: KN_CON_TERM_REASON_equ - for FPT_TERM.REASON
  887      The file KNH_MACRO_C contains a set of EQUs that may
  888      be used to determine the meaning for FPT_TERM.REASON:
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        25   
  889
  890      .fif
  891      }   KN_TERM_REASON_CLOSE     2   The CQ has been closed.
  892      }   KN_TERM_REASON_NTRNSPRT  3   No transport connection
  893      .fin
  894      */
  895      %EQU KN_TERM_REASON_RETRY_EXHAUSTED = 1;
  896      %EQU KN_TERM_REASON_CLOSE = 2;
  897      %EQU KN_TERM_REASON_NTRNSPRT = 3;
  898      %EQU KN_TERM_REASON_LST = 4; /*  Handler loss of connection                   */
  899
  900      /*F* NAME: FPT_TERM_ACK
  901
  902      The data defined by the FPT_TERM_ACK macro follows the KNH$MESS
  903      structure when the function code is KN_FCN_TERM_ACK.
  904
  905
  906      */
  907      %MACRO FPT_TERM_ACK (FPTN=FPT_TERM_ACK,
  908                          STCLASS="",
  909                          LVL=1,
  910                          LAST=";",
  911                          REASON=0);
  912
  913       %LSET LISTDIR='0'B;
  914       %LSET LISTEXP='1'B;
  915       %LSET LISTCOM='0'B;
  916       %LSET LISTSUB='1'B;
  917       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  918       %IF (SUBSTR(STR,0,6)='STATIC') OR
  919       (SUBSTR(STR,0,8)='CONSTANT') OR
  920       (SUBSTR(STR,0,3)='EXT');
  921       %LSET INIT=CHARTEXT('INIT');
  922       %LSET EINIT=CHARTEXT('');
  923       %ELSE;
  924       %LSET INIT=CHARTEXT('/*');
  925       %LSET EINIT=CHARTEXT('*/');
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        26   
  926       %ENDIF;
  927       %LSET FEP = BITBIN(MODE_FEP);
  928       %LSET KN_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
  929      %IF LVL=1;
  930
  931      DCL 1 FPTN STCLASS ALIGNED,
  932      %ELSE;
  933           %(LVL) FPTN,
  934      %ENDIF;
  935            %(LVL+1) %CHARTEXT('REASON ') UBIN %INIT(REASON)%EINIT,
  936                     /*K*  REASON The reason code passed back indicates whether or
  937                                  not the temination occurred normally.
  938                     */
  939            %(LVL+1) * UBIN (%(18-2*FEP)) %KN_DBLBYTALG %INIT(0)%CHARTEXT('/**/') LAST
  940                          /*K* slack word to keep double-word boundary.
  941                          */
  942
  943      %MEND;
  944
  945
  946      /*F* NAME: FPT_NSAP
  947
  948      */
  949      %MACRO FPT_NSAP (FPTN=FPT_NSAP,
  950                          STCLASS="BASED",
  951                          LVL=1,
  952                          ADRTYP(X121=1,FEP=2,LACS=3,NET=4,ANY)=4,
  953                          LAST=";");
  954
  955       %LSET LISTDIR='0'B;
  956       %LSET LISTEXP='1'B;
  957       %LSET LISTCOM='0'B;
  958       %LSET LISTSUB='1'B;
  959       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  960       %IF (SUBSTR(STR,0,6)='STATIC') OR
  961       (SUBSTR(STR,0,8)='CONSTANT') OR
  962       (SUBSTR(STR,0,3)='EXT');
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        27   
  963       %LSET INIT=CHARTEXT('INIT');
  964       %LSET ENIT=CHARTEXT('');
  965       %ELSE;
  966       %LSET INIT=CHARTEXT('/*');
  967       %LSET ENIT=CHARTEXT('*/');
  968       %ENDIF;
  969      %IF LVL=1;
  970
  971      DCL 1 FPTN STCLASS ALIGNED,
  972      %ELSE;
  973           %(LVL) FPTN,
  974      %ENDIF;
  975      %LSET NXTLVL = %(LVL+1);
  976      %K$NSAP(FPTN=NSAP,LVL=%NXTLVL,ADRTYP=ADRTYP,LAST=LAST);
  977      %MEND;
  978      /*F* NAME: FPT_RESET
  979
  980      The data defined by the FPT_RESET macro follows the KNH$MESS
  981      structure when the function code is KN_FCN_RESET.
  982
  983
  984      */
  985      %MACRO FPT_RESET (FPTN=FPT_RESET,
  986                        STCLASS="",
  987                        LVL=1,
  988                        LAST=";",
  989                        CAUSE=0,
  990                        DIAG=0);
  991
  992       %LSET LISTDIR='0'B;
  993       %LSET LISTEXP='1'B;
  994       %LSET LISTCOM='0'B;
  995       %LSET LISTSUB='1'B;
  996       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  997       %IF (SUBSTR(STR,0,6)='STATIC') OR
  998       (SUBSTR(STR,0,8)='CONSTANT') OR
  999       (SUBSTR(STR,0,3)='EXT');
14:50 JUL 28 '97 KNH_MACRO_C.:E05SI                                        28   
 1000       %LSET INIT=CHARTEXT('INIT');
 1001       %LSET EINIT=CHARTEXT('');
 1002       %ELSE;
 1003       %LSET INIT=CHARTEXT('/*');
 1004       %LSET EINIT=CHARTEXT('*/');
 1005       %ENDIF;
 1006       %LSET FEP = BITBIN(MODE_FEP);
 1007       %LSET KN_DBLBYTALG = CHARTEXT(SUBSTR('HALIGNED', FEP));
 1008      %IF LVL=1;
 1009
 1010      DCL 1 FPTN STCLASS ALIGNED,
 1011      %ELSE;
 1012           %(LVL) FPTN,
 1013      %ENDIF;
 1014            %(LVL+1) %CHARTEXT('CAUSE') UBIN (%(18-2*FEP)) %KN_DBLBYTALG %INIT(CAUSE)%EINIT,
 1015                          /*K*  CAUSE The cause code to be used or found in the reset
 1016                                      packet.
 1017                          */
 1018            %(LVL+1) %CHARTEXT('DIAG') UBIN (%(18-2*FEP)) %KN_DBLBYTALG %INIT(DIAG)%EINIT LAST
 1019                     /*K*  DIAG  The diagnostics code to be used or found in the reset
 1020                                 packet.
 1021                     */
 1022
 1023      %MEND;

