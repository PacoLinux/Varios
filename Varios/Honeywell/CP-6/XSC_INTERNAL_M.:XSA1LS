

10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    1    
    1      /*M*    XSC_INTERNAL_M  Internal macros for the ISO ACSE layer          */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      /*F*    NAME:   XSC$CCTX
    9
   10              XSC$CCTX is the connection context block for an ISO ACSE connection.
   11      */
   12      %MACRO XSC$CCTX(
   13                      NAME=XSC$CCTX, LVL=1, LAST=";", STCLASS=BASED);
   14      %LSET LISTDIR = '0'B;
   15      %LSET LISTEXP = '1'B;
   16      %LSET LISTCOM = '0'B;
   17      %LSET LISTSUB = '1'B;
   18      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   19      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   20          %LSET INIT = CHARTEXT( ' INIT');
   21          %LSET ENIT = CHARTEXT( '');
   22      %ELSE;
   23          %LSET INIT = CHARTEXT( '/*');
   24          %LSET ENIT = CHARTEXT( '*/');
   25      %ENDIF;
   26      %IF LENGTHC( 'NAME') = 0;
   27          %LSET LVL = LVL - 1;
   28      %ELSE;
   29          %IF LVL = 1;
   30              DCL 1 NAME STCLASS,
   31          %ELSE;
   32              %LVL NAME,
   33          %ENDIF;
   34      %ENDIF;
   35      %LSET LVL1 = LVL + 1;
   36      %LSET LVL2 = LVL1 + 1;
   37      %IF MODE_FEP;
10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    2    
   38          %LSET LONG = CHARTEXT( '(32)');
   39          %LSET HALF = CHARTEXT( 'WORD');
   40      %ELSE;
   41          %LSET LONG = CHARTEXT( 'WORD');
   42          %LSET HALF = CHARTEXT( 'HALF');
   43      %ENDIF;
   44
   45          %LVL1 %CHARTEXT( 'STATE') UBIN BYTE %INIT( %XSC_CST_NULL)%ENIT CALIGNED,
   46          %LVL1 %CHARTEXT( 'HISTX') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
   47          %LVL1 %CHARTEXT( 'CCID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
   48      %IF NOT MODE_FEP;
   49          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
   50      %ENDIF;
   51          %LVL1 %CHARTEXT( '*') BIT(6) %INIT( '0'B)%ENIT UNAL,
   52          %LVL1 %CHARTEXT( 'ORIGINATOR') BIT(1) %INIT( '0'B)%ENIT UNAL,
   53          %LVL1 %CHARTEXT( 'ABORTING') BIT(1) %INIT( '0'B)%ENIT UNAL,
   54          %LVL1 %CHARTEXT( 'ENTRY$') EPTR %INIT( ENTADDR( NIL))%ENIT,
   55          %LVL1 %CHARTEXT( 'HISTZ(0:7)') UBIN %HALF %INIT( 0*8)%ENIT CALIGNED,
   56          %LVL1 %CHARTEXT( 'HIST(0:7)') REDEF HISTZ,
   57              %LVL2 %CHARTEXT( 'EVENT') UBIN BYTE CALIGNED,
   58              %LVL2 %CHARTEXT( 'NXTST') UBIN BYTE CALIGNED LAST
   59
   60      %MEND;
   61      /*F*    NAME:   XSC$QVEC
   62
   63              XSC$QVEC generates a structure describing a byte-string buffer
   64              by its length and address. It is similar to the VECTOR construct
   65              of PL6, but is more efficient since the length is right-justified
   66              in a full word.  The "down" side is, only byte resolution.
   67      */
   68      %MACRO XSC$QVEC(
   69                      NAME=XSC$QVEC, LVL=1, LAST=";", STCLASS=BASED,
   70                      PTR$="ADDR( NIL)",
   71                      SIZE=0);
   72      %LSET LISTDIR = '0'B;
   73      %LSET LISTEXP = '1'B;
   74      %LSET LISTCOM = '0'B;
10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    3    
   75      %LSET LISTSUB = '1'B;
   76      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   77      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   78          %LSET INIT = CHARTEXT( ' INIT');
   79          %LSET ENIT = CHARTEXT( '');
   80      %ELSE;
   81          %LSET INIT = CHARTEXT( '/*');
   82          %LSET ENIT = CHARTEXT( '*/');
   83      %ENDIF;
   84      %IF LENGTHC( 'NAME') = 0;
   85          %LSET LVL = LVL - 1;
   86      %ELSE;
   87          %IF LVL = 1;
   88              DCL 1 NAME STCLASS,
   89          %ELSE;
   90              %LVL NAME,
   91          %ENDIF;
   92      %ENDIF;
   93      %LSET LVL1 = LVL + 1;
   94      %LSET LVL2 = LVL1 + 1;
   95      %IF MODE_FEP;
   96          %LSET LONG = CHARTEXT( '(32)');
   97          %LSET HALF = CHARTEXT( 'WORD');
   98      %ELSE;
   99          %LSET LONG = CHARTEXT( 'WORD');
  100          %LSET HALF = CHARTEXT( 'HALF');
  101      %ENDIF;
  102
  103          %LVL1 %CHARTEXT( 'PTR$') PTR %INIT( PTR$)%ENIT CALIGNED,
  104          %LVL1 %CHARTEXT( 'SIZE') SBIN %LONG %INIT( SIZE)%ENIT LAST
  105
  106      %MEND;
  107      /*F*    NAME:   XSC$VBLK
  108
  109              XSC$VBLK is used to generate a structure that is used to pass
  110              parameters to various procedures within the ACSE layer.  It
  111              carries all the status information for a particular outgoing or
10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    4    
  112              incoming ACSE message, and is thus somewhat like K$RWPARM.
  113      */
  114      %MACRO XSC$VBLK(
  115                      NAME=XSC$VBLK, LVL=1, LAST=";", STCLASS=BASED);
  116      %LSET LISTDIR = '0'B;
  117      %LSET LISTEXP = '1'B;
  118      %LSET LISTCOM = '0'B;
  119      %LSET LISTSUB = '1'B;
  120      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  121      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  122          %LSET INIT = CHARTEXT( ' INIT');
  123          %LSET ENIT = CHARTEXT( '');
  124      %ELSE;
  125          %LSET INIT = CHARTEXT( '/*');
  126          %LSET ENIT = CHARTEXT( '*/');
  127      %ENDIF;
  128      %IF LENGTHC( 'NAME') = 0;
  129          %LSET LVL = LVL - 1;
  130      %ELSE;
  131          %IF LVL = 1;
  132              DCL 1 NAME STCLASS,
  133          %ELSE;
  134              %LVL NAME,
  135          %ENDIF;
  136      %ENDIF;
  137      %LSET LVL1 = LVL + 1;
  138      %LSET LVL2 = LVL1 + 1;
  139      %IF MODE_FEP;
  140          %LSET LONG = CHARTEXT( '(32)');
  141          %LSET HALF = CHARTEXT( 'WORD');
  142      %ELSE;
  143          %LSET LONG = CHARTEXT( 'WORD');
  144          %LSET HALF = CHARTEXT( 'HALF');
  145      %ENDIF;
  146
  147          %LVL1 %CHARTEXT( 'CTX$') PTR %INIT( ADDR( NIL))%ENIT,
  148          %LVL1 %CHARTEXT( 'FPT$') PTR %INIT( ADDR( NIL))%ENIT,
10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    5    
  149          %XSC$QVEC( NAME=PDU, LVL=%LVL1, LAST=",", STCLASS=STCLASS);
  150          %XSC$QVEC( NAME=DATA, LVL=%LVL1, LAST=",", STCLASS=STCLASS);
  151          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  152          %LVL1 %CHARTEXT( '*') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  153          %LVL1 %CHARTEXT( 'APDUERR') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  154          %LVL1 %CHARTEXT( 'EVENT') UBIN BYTE %INIT( 0)%ENIT CALIGNED LAST
  155      %MEND;
  156
  157      %MACRO ENCDECMACS;
  158
  159      /*F*    NAME:   ITEM
  160
  161              ITEM defines one 'item' of the 'itemlist'. As an APDU is being encoded
  162              or decoded, the itemlist contains an item for each piece of the APDU.
  163      */
  164      %MACRO ITEM( NAME=ITEM, LVL=1, LAST=";", STCLASS=BASED);
  165      %IF LENGTHC( 'NAME') = 0;
  166          %LSET LVL = LVL - 1;
  167      %ELSE;
  168          %IF LVL = 1;
  169              DCL 1 NAME STCLASS ALIGNED,
  170          %ELSE;
  171              %LVL NAME ALIGNED,
  172          %ENDIF;
  173      %ENDIF;
  174      %LSET LVL1 = LVL + 1;
  175      %LSET LVL2 = LVL1 + 1;
  176
  177          %LVL1 %CHARTEXT( 'Z') UBIN WORD ALIGNED,
  178          %LVL1 %CHARTEXT( 'X') REDEF %CHARTEXT( 'Z'),
  179              %LVL2 %CHARTEXT( 'LEN') UBIN(18) CALIGNED,
  180              %LVL2 %CHARTEXT( 'OPT') UBIN(1) UNAL,
  181              %LVL2 %CHARTEXT( 'TAG') UBIN(8) UNAL,
  182              %LVL2 %CHARTEXT( 'IMP') UBIN(1) UNAL,
  183              %LVL2 %CHARTEXT( 'TYP') UBIN(5) UNAL,
  184              %LVL2 %CHARTEXT( 'LVL') UBIN(3) UNAL,
  185          %LVL1 %CHARTEXT( 'U') UBIN WORD ALIGNED,
10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    6    
  186          %LVL1 %CHARTEXT( 'S') REDEF %CHARTEXT( 'U') SBIN WORD ALIGNED,
  187          %LVL1 %CHARTEXT( 'P') REDEF %CHARTEXT( 'U') PTR CALIGNED,
  188          %LVL1 %CHARTEXT( 'B') REDEF %CHARTEXT( 'U') BIT(36) ALIGNED LAST
  189      %MEND;
  190
  191      /*F*    NAME:   LOAD
  192
  193              The LOAD macro is used in XSC$ENCODE to add another item to the
  194              itemlist as an APDU is being encoded.
  195      */
  196      %MACRO LOAD(
  197              LEN=0,
  198              IMP( NO=0, YES=1, N=0, Y=1)=0,
  199              CON( NO=0, YES=32, N=0, Y=32)=0,
  200              TAG( A0=64, A1=65, A2=66, A3=67, A4=68,
  201                   C0=128, C1=129, C2=130, C3=131, C4=132,
  202                   C5=133, C6=134, C7=135, C8=136, C9=137,
  203                   C29=157, C30=158)=,
  204              TYP( NONE=0,
  205                   BOOL=1, INTG=2, BITSTR=3, OCTETSTR=4,
  206                   NULL=5,
  207                   OBJID=6, OBJDSCR=7, EXTRN=8,
  208                   ANY=12,
  209                   CHOICE=13,
  210                   SEQOF=14, SETOF=15,
  211                   SEQ=16, SET=17,
  212                   NUMSTR=18, PRNTSTR=19, TELSTR=20, VIDSTR=21, IA5STR=22,
  213                   UTCTIM=23, GENTIM=24,
  214                   GRFSTR=25, VISSTR=26, ISO646STR=26, GENSTR=27)=,
  215              LVL=,
  216              VAL="0",
  217              OPT( NO=0, YES=1, N=0, Y=1)=0,
  218              SCANNING=0);
  219      %LSET TLVL = TEXTCHAR(LVL);
  220      %ERROR( LENGTHC( TLVL) = 0, 'LVL must be specified');
  221      %LSET L1 = SUBSTR( TLVL, 0, 1);
  222      %IF L1 >= '0' AND L1 <= '9';
10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    7    
  223          %ERROR( LVL > 7, 'LVL too deep');
  224      %ENDIF;
  225      %LSET XLVL = CHARTEXT( TLVL);
  226      %LSET XCON = CON;
  227      %IF LENGTHC( TEXTCHAR(TYP)) = 0;
  228          %IF LENGTHC( TEXTCHAR(TAG)) = 0;
  229              %ERROR( '1'B, 'TAG or TYP must be specified');
  230              %LSET XTAG = 0;
  231          %ELSE;
  232              %LSET XTAG = TAG;
  233          %ENDIF;
  234          %LSET XTYP = 0;
  235      %ELSE;
  236          %LSET XTYP = TYP;
  237          %IF LENGTHC( TEXTCHAR(TAG)) = 0;
  238              %IF     %XTYP = %XSC_TYP_SEQOF;
  239                  %LSET XTAG = 48;
  240              %ELSEIF %XTYP = %XSC_TYP_SETOF;
  241                  %LSET XTAG = 49;
  242              %ELSE;
  243                  %LSET XTAG = TYP;
  244              %ENDIF;
  245          %ELSE;
  246              %LSET XTAG = TAG;
  247          %ENDIF;
  248      %ENDIF;
  249          DO;
  250      %LSET TVAL = TEXTCHAR(VAL);
  251      %LSET TLEN = TEXTCHAR(LEN);
  252      %IF TVAL = '0';
  253          %LSET XVAL = 0;
  254      %ELSE;
  255          %LSET XVAL = CHARTEXT( %TVAL);
  256      %ENDIF;
  257      /* Figure out length of item */
  258      %IF %TLEN ~= '0';
  259          %LSET XLEN = CHARTEXT( CONCAT( '(', %TLEN, ')'));
10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    8    
  260      %ELSE;
  261          %LSET XLEN = 0;
  262      %ENDIF;
  263      /* Stash the item value word */
  264      %IF     %XTYP = %XSC_TYP_INTG;  /* signed integer */
  265          %IF TLEN = '0';
  266              %LSET XLEN = 4;
  267          %ENDIF;
  268          %IF SCANNING = 1;
  269              ITEMLIST.P( XSC_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  270          %ELSE;
  271              ITEMLIST.S( XSC_ITEMCNT) = %XVAL;
  272          %ENDIF;
  273      %ELSEIF %XTYP = %XSC_TYP_BITSTR OR %XTYP = %XSC_TYP_BOOL;/* bitstring,boolean */
  274          %IF SCANNING = 1;
  275              ITEMLIST.P( XSC_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  276          %ELSE;
  277              ITEMLIST.B( XSC_ITEMCNT) = %XVAL;
  278          %ENDIF;
  279      %ELSEIF %XTYP = %XSC_TYP_UTCTIM OR %XTYP = %XSC_TYP_GENTIM;  /* timestamp */
  280          %IF TLEN = '0';
  281              %LSET XLEN = 20;
  282          %ENDIF;
  283          %IF SCANNING = 1;
  284              ITEMLIST.P( XSC_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  285          %ELSE;
  286              ITEMLIST.U( XSC_ITEMCNT) = %XVAL;
  287          %ENDIF;
  288      %ELSEIF %XTYP = %XSC_TYP_OBJID OR %XTYP = %XSC_TYP_OBJDSCR;  /* object */
  289          %LSET XLEN = CHARTEXT( CONCAT( %TVAL, '->CTXT.LEN'));
  290          ITEMLIST.P( XSC_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, '->CTXT.TXT')));
  291      %ELSEIF %XTYP = %XSC_TYP_NONE OR %XTYP = %XSC_TYP_NULL;
  292      %ELSEIF %XTYP = %XSC_TYP_SEQ OR %XTYP = %XSC_TYP_SEQOF;
  293          %LSET XCON = 32;
  294      %ELSEIF %XTYP = %XSC_TYP_SET OR %XTYP = %XSC_TYP_SETOF;
  295          %LSET XCON = 32;
  296      %ELSEIF %XTYP = %XSC_TYP_CHOICE;  /* handled manually by code */
10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    9    
  297      %ELSE;  /* everything else looks like pointer to text */
  298          %ERROR( TLEN = '0', 'LEN must be specified for this text string');
  299          ITEMLIST.P( XSC_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  300      %ENDIF;
  301      /* Stash the item descriptor word */
  302          ITEMLIST.Z( XSC_ITEMCNT) = %XLVL + %XTYP*8 + IMP*256 + (%XCON+%XTAG)*512 + OPT*131072 + %XLEN*262144;
  303      /* Increment itemlist index */
  304      %IF SCANNING = 0;
  305          XSC_ITEMCNT = XSC_ITEMCNT + 1;
  306      %ENDIF;
  307          END;
  308      %MEND;
  309
  310      /*F*    NAME:   SCAN
  311
  312              The SCAN macro is used in XSC$DECODE to scan another item of the
  313              itemlist as an APDU is being decoded.
  314      */
  315      %MACRO SCAN(
  316              LEN=0,
  317              IMP( NO=0, YES=1, N=0, Y=1)=0,
  318              CON( NO=0, YES=32, N=0, Y=32)=0,
  319              TAG( A0=64, A1=65, A2=66, A3=67, A4=68,
  320                   C0=128, C1=129, C2=130, C3=131, C4=132,
  321                   C5=133, C6=134, C7=135, C8=136, C9=137,
  322                   C29=157, C30=158)=,
  323              TYP( NONE=0,
  324                   BOOL=1, INTG=2, BITSTR=3, OCTETSTR=4,
  325                   NULL=5,
  326                   OBJID=6, OBJDSCR=7, EXTRN=8,
  327                   ANY=12,
  328                   CHOICE=13,
  329                   SEQOF=14, SETOF=15,
  330                   SEQ=16, SET=17,
  331                   NUMSTR=18, PRNTSTR=19, TELSTR=20, VIDSTR=21, IA5STR=22,
  332                   UTCTIM=23, GENTIM=24,
  333                   GRFSTR=25, VISSTR=26, ISO646STR=26, GENSTR=27)=,
10:39 OCT 01 '97 XSC_INTERNAL_M.:XSA1SI                                    10   
  334              LVL=,
  335              VAL="0",
  336              OPT( NO=0, YES=1, N=0, Y=1)=0,
  337              SCANNING=0);
  338          DO;
  339          %LOAD( LEN=LEN, IMP=IMP, CON=CON, TAG=TAG, TYP=TYP, LVL=LVL, VAL=VAL, OPT=OPT, SCANNING=1);
  340          CALL SCAN ALTRET( SCANERR);
  341          END;
  342      %MEND;
  343
  344      %MEND;  /* end of ENCDECMACS macro */

