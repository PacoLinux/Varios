

10:41 OCT 01 '97 XSS_MACHINE_M.:XSA1SI                                     1    
    1      /*M*    XSS_MACHINE_M   Actions and Predicates for ISO Session layer    */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      /*P*    NAME:   XSS_MACHINE_M
    9              PURPOSE:
   10                  This file contains PL-6 MACROs and SETs which define the various
   11                  actions and predicates for the ISO Session layer.  The contents
   12                  of the MACROs and SETs were determined by slavishly following the
   13                  ISO Session protocol standard, ISO 8327.
   14      */
   15      /*F*    NAME:   XSS_MACHINE_M
   16              PURPOSE:
   17                  This file contains PL-6 MACROs and SETs which define the various
   18                  actions and predicates for the ISO Session layer.  These things
   19                  are defined as MACROs and SETs to help avoid the mistakes that
   20                  could result from manually transcribing from the Session document
   21                  to code.  Note: The appropriate compilation flags should be set
   22                  to cause expansion of this stuff on the listing output, otherwise
   23                  it'll be difficult to figure out what's going on when debugging.
   24              DESCRIPTION:
   25                  Each of the actions called out in the Session protocol standard
   26                  is implemented as a PL-6 MACRO.  Each of the predicates called
   27                  out is implemented as a PL-6 SET.  The MACROs and SETs assume
   28                  that XSS_SESSION_E has been included previously, to define
   29                  necessary preprocessor variables and other stuff.
   30      */
   31
   32      /* the following are the legal values for SCTX.VRSP                     */
   33      %EQU VRSP_NO    = 0     /* no resynchronization in progress             */;
   34      %EQU VRSP_A     = 1     /* resynchronize abandon                        */;
   35      %EQU VRSP_R     = 2     /* resynchronize restart                        */;
   36      %EQU VRSP_S     = 3     /* resynchronize set                            */;
   37      %EQU VRSP_DSC   = 4     /* discard activity                             */;
10:41 OCT 01 '97 XSS_MACHINE_M.:XSA1SI                                     2    
   38      %EQU VRSP_INT   = 5     /* interrupt activity                           */;
   39
   40      %MACRO ACTION01;
   41          CALL ACTION01 ALTRET( ACTIONERR);
   42      %MEND;
   43
   44      %MACRO ACTION02;
   45          CALL ACTION02 ALTRET( ACTIONERR);
   46      %MEND;
   47
   48      %MACRO ACTION03;
   49          CALL ACTION03 ALTRET( ACTIONERR);
   50      %MEND;
   51
   52      %MACRO ACTION04;
   53          CALL ACTION04 ALTRET( ACTIONERR);
   54      %MEND;
   55
   56      %MACRO ACTION05;
   57          CALL ACTION05 ALTRET( ACTIONERR);
   58      %MEND;
   59
   60      %MACRO ACTION06;
   61          CALL ACTION06 ALTRET( ACTIONERR);
   62      %MEND;
   63
   64      %MACRO ACTION07;
   65          CALL ACTION07 ALTRET( ACTIONERR);
   66      %MEND;
   67
   68      %MACRO ACTION08;
   69          CALL ACTION08 ALTRET( ACTIONERR);
   70      %MEND;
   71
   72      %MACRO ACTION09;
   73          CALL ACTION09 ALTRET( ACTIONERR);
   74      %MEND;
10:41 OCT 01 '97 XSS_MACHINE_M.:XSA1SI                                     3    
   75
   76      %MACRO ACTION10;
   77          CALL ACTION10 ALTRET( ACTIONERR);
   78      %MEND;
   79
   80      %MACRO ACTION11;
   81          CALL ACTION11 ALTRET( ACTIONERR);
   82      %MEND;
   83
   84      %MACRO ACTION12;
   85          CALL ACTION12 ALTRET( ACTIONERR);
   86      %MEND;
   87
   88      %MACRO ACTION13;
   89          CALL ACTION13 ALTRET( ACTIONERR);
   90      %MEND;
   91
   92      %MACRO ACTION14;
   93          CALL ACTION14 ALTRET( ACTIONERR);
   94      %MEND;
   95
   96      %MACRO ACTION15;
   97          CALL ACTION15 ALTRET( ACTIONERR);
   98      %MEND;
   99
  100      %MACRO ACTION16;
  101          CALL ACTION16 ALTRET( ACTIONERR);
  102      %MEND;
  103
  104      %MACRO ACTION17;
  105          CALL ACTION17 ALTRET( ACTIONERR);
  106      %MEND;
  107
  108      %MACRO ACTION18;
  109          CALL ACTION18 ALTRET( ACTIONERR);
  110      %MEND;
  111
10:41 OCT 01 '97 XSS_MACHINE_M.:XSA1SI                                     4    
  112      %MACRO ACTION19;
  113          CALL ACTION19 ALTRET( ACTIONERR);
  114      %MEND;
  115
  116      %MACRO ACTION20;
  117          CALL ACTION20 ALTRET( ACTIONERR);
  118      %MEND;
  119
  120      %MACRO ACTION21;
  121          CALL ACTION21 ALTRET( ACTIONERR);
  122      %MEND;
  123
  124      %MACRO ACTION22;
  125          CALL ACTION22 ALTRET( ACTIONERR);
  126      %MEND;
  127
  128      %MACRO ACTION23;
  129          CALL ACTION23 ALTRET( ACTIONERR);
  130      %MEND;
  131
  132      %MACRO ACTION24;
  133          CALL ACTION24 ALTRET( ACTIONERR);
  134      %MEND;
  135
  136      %MACRO ACTION25;
  137          CALL ACTION25 ALTRET( ACTIONERR);
  138      %MEND;
  139
  140      %MACRO ACTION26;
  141          CALL ACTION26 ALTRET( ACTIONERR);
  142      %MEND;
  143
  144      %MACRO ACTION27;
  145          CALL ACTION27 ALTRET( ACTIONERR);
  146      %MEND;
  147
  148      %MACRO ACTION28;
10:41 OCT 01 '97 XSS_MACHINE_M.:XSA1SI                                     5    
  149          CALL ACTION28 ALTRET( ACTIONERR);
  150      %MEND;
  151
  152      %MACRO ACTION29;
  153          CALL ACTION29 ALTRET( ACTIONERR);
  154      %MEND;
  155
  156      %MACRO ACTION30;
  157          CALL ACTION30 ALTRET( ACTIONERR);
  158      %MEND;
  159
  160      %MACRO ACTION31;
  161          CALL ACTION31 ALTRET( ACTIONERR);
  162      %MEND;
  163
  164      %MACRO ACTION32;
  165          CALL ACTION32 ALTRET( ACTIONERR);
  166      %MEND;
  167
  168      %MACRO EMIT_AND;
  169      %IF LENGTHC( PRED) > 0;
  170          %CHARTEXT( %CONCAT( 'IF PINV(', %PRED, ') THEN CALL PRED', %PRED, %ALT));
  171          %SET IFCMD = %CONCAT( %IFCMD, %MINUS, 'PRED(', %PRED, ') ');
  172          %SET PRED = '';
  173          %SET MINUS = 'NOT ';
  174      %ENDIF;
  175      %MEND;
  176
  177      %MACRO EMIT_OR;
  178      %IF LENGTHC( PRED) > 0;
  179          %CHARTEXT( %CONCAT( 'IF PINV(', %PRED, ') THEN CALL PRED', %PRED, %ALT));
  180          %SET IFCMD = %CONCAT( %IFCMD, %AND, %MINUS, 'PRED(', %PRED, ') ');
  181          %SET AND = 'AND ';
  182          %SET PRED = '';
  183          %SET MINUS = 'NOT ';
  184      %ENDIF;
  185      %MEND;
10:41 OCT 01 '97 XSS_MACHINE_M.:XSA1SI                                     6    
  186
  187      %MACRO EMIT_IFCMD;
  188      %IF LENGTHC( IFCMD) > 3;
  189          %SET IFCMD = %CONCAT( %IFCMD, 'THEN EXIT');
  190          %CHARTEXT( %IFCMD);
  191          %SET IFCMD = 'IF ';
  192          %SET AND = '';
  193          %SET PRED = '';
  194          %SET MINUS = 'NOT ';
  195      %ENDIF;
  196      %MEND;
  197
  198      %MACRO EVALARG;
  199      %IF LENGTHC( ARG) > 0;
  200          %LSET CHR = SUBSTR( ARG, 0, 1);
  201          %IF %CHR = '-';
  202              %SET MINUS = '';
  203          %ELSEIF %CHR = '&';
  204              %EMIT_AND;
  205              %EMIT_IFCMD;
  206          %ELSEIF %CHR = '|';
  207              %EMIT_OR;
  208          %ELSEIF %CHR = '(';
  209          %ELSEIF %CHR = ')';
  210              %EMIT_OR;
  211              %EMIT_IFCMD;
  212          %ELSE;
  213              %SET PRED = CONCAT( %PRED, %CHR);
  214          %ENDIF;
  215          %SET ARG = SUBSTR( ARG, 1);
  216          %EVALARG;
  217      %ELSE;
  218          %EMIT_OR;
  219          %EMIT_IFCMD;
  220      %ENDIF;
  221      %MEND;
  222
10:41 OCT 01 '97 XSS_MACHINE_M.:XSA1SI                                     7    
  223      %MACRO IFPREDDO( P=);
  224      %ERROR( INPRED='1'B, 'This IFPREDDO is nested; previous ENDPREDDO missing');
  225      %SET INPRED = '1'B;
  226      %SET ARG = TEXTCHAR(P);
  227      %SET IFCMD = 'IF ';
  228      %SET AND = '';
  229      %SET PRED = '';
  230      %SET MINUS = 'NOT ';
  231      %SET ALT = ' ALTRET( PREDERR)';
  232          CONTINUING = '1'B;
  233          DO;
  234              %EVALARG;
  235              CONTINUING = '0'B;
  236      %MEND;
  237
  238      %MACRO ELSEPREDDO( P=);
  239      %ERROR( INPRED='0'B, 'This ELSEPREDDO doesn''t follow an IF/ELSEPREDDO');
  240      %SET ARG = TEXTCHAR(P);
  241      %SET IFCMD = 'IF ';
  242      %SET AND = '';
  243      %SET PRED = '';
  244      %SET MINUS = 'NOT ';
  245          IF CONTINUING THEN DO;
  246              %EVALARG;
  247              CONTINUING = '0'B;
  248      %MEND;
  249
  250      %MACRO ENDPREDDO;
  251      %ERROR( INPRED='0'B, 'This ENDPREDDO doesn''t terminate an IFPREDDO');
  252      %SET INPRED = '0'B;
  253          IF CONTINUING THEN CALL OOPS;
  254      %MEND;

